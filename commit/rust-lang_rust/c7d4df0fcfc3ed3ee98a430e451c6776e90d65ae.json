{"sha": "c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3ZDRkZjBmY2ZjM2VkM2VlOThhNDMwZTQ1MWM2Nzc2ZTkwZDY1YWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-30T03:09:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-30T03:09:39Z"}, "message": "Auto merge of #60966 - oli-obk:diagnostic_items, r=eddyb\n\nAdd a \"diagnostic item\" scheme for lints referring to libstd items\n\nfixes https://github.com/rust-lang/rust/issues/39131\n\nr? @Manishearth @rust-lang/wg-diagnostics", "tree": {"sha": "a8c0a086a2829c37fca162af80cb2caef3ae0e0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8c0a086a2829c37fca162af80cb2caef3ae0e0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae", "html_url": "https://github.com/rust-lang/rust/commit/c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72b2abfd65ba024e12d7fe51852a309419f494d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/72b2abfd65ba024e12d7fe51852a309419f494d8", "html_url": "https://github.com/rust-lang/rust/commit/72b2abfd65ba024e12d7fe51852a309419f494d8"}, {"sha": "6978b9482b976d991dac1dc55a6effe1f697cd1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6978b9482b976d991dac1dc55a6effe1f697cd1f", "html_url": "https://github.com/rust-lang/rust/commit/6978b9482b976d991dac1dc55a6effe1f697cd1f"}], "stats": {"total": 278, "additions": 260, "deletions": 18}, "files": [{"sha": "d5dc2d4b8688d79b0c8f5e25f76fbc759992cef8", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae", "patch": "@@ -291,6 +291,7 @@ use crate::raw_vec::RawVec;\n /// [`reserve`]: ../../std/vec/struct.Vec.html#method.reserve\n /// [owned slice]: ../../std/boxed/struct.Box.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(all(not(bootstrap), not(test)), rustc_diagnostic_item = \"vec_type\")]\n pub struct Vec<T> {\n     buf: RawVec<T>,\n     len: usize,"}, {"sha": "7e35188bc1082e7fbe1e5042b7871851201359bc", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae", "patch": "@@ -518,7 +518,8 @@ impl Display for Arguments<'_> {\n     label=\"`{Self}` cannot be formatted using `{{:?}}` because it doesn't implement `{Debug}`\",\n )]\n #[doc(alias = \"{:?}\")]\n-#[lang = \"debug_trait\"]\n+#[cfg_attr(boostrap_stdarch_ignore_this, lang = \"debug_trait\")]\n+#[cfg_attr(not(boostrap_stdarch_ignore_this), rustc_diagnostic_item = \"debug_trait\")]\n pub trait Debug {\n     /// Formats the value using the given formatter.\n     ///"}, {"sha": "b3a561ef74be745f73e65092cd37bfd2b2b04b59", "filename": "src/librustc/arena.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae/src%2Flibrustc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae/src%2Flibrustc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Farena.rs?ref=c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae", "patch": "@@ -94,6 +94,10 @@ macro_rules! arena_types {\n                         rustc::hir::def_id::CrateNum\n                     >\n                 >,\n+            [few] diagnostic_items: rustc_data_structures::fx::FxHashMap<\n+                syntax::symbol::Symbol,\n+                rustc::hir::def_id::DefId,\n+            >,\n             [few] resolve_lifetimes: rustc::middle::resolve_lifetime::ResolveLifetimes,\n             [decode] generic_predicates: rustc::ty::GenericPredicates<'tcx>,\n             [few] lint_levels: rustc::lint::LintLevelMap,"}, {"sha": "368f5bb64fe6c056afda13fd41fc31cabc1033ec", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae", "patch": "@@ -62,6 +62,7 @@\n #![feature(log_syntax)]\n #![feature(mem_take)]\n #![feature(associated_type_bounds)]\n+#![feature(rustc_attrs)]\n \n #![recursion_limit=\"512\"]\n \n@@ -109,6 +110,7 @@ pub mod middle {\n     pub mod cstore;\n     pub mod dead;\n     pub mod dependency_format;\n+    pub mod diagnostic_items;\n     pub mod entry;\n     pub mod exported_symbols;\n     pub mod free_region;"}, {"sha": "13834eaf40f576591e17ac71c75536a31bc4ac38", "filename": "src/librustc/lint/internal.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae/src%2Flibrustc%2Flint%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae/src%2Flibrustc%2Flint%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Finternal.rs?ref=c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae", "patch": "@@ -159,29 +159,23 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TyTyKind {\n }\n \n fn lint_ty_kind_usage(cx: &LateContext<'_, '_>, segment: &PathSegment) -> bool {\n-    if segment.ident.name == sym::TyKind {\n-        if let Some(res) = segment.res {\n-            if let Some(did) = res.opt_def_id() {\n-                return cx.match_def_path(did, TYKIND_PATH);\n-            }\n+    if let Some(res) = segment.res {\n+        if let Some(did) = res.opt_def_id() {\n+            return cx.tcx.is_diagnostic_item(sym::TyKind, did);\n         }\n     }\n \n     false\n }\n \n-const TYKIND_PATH: &[Symbol] = &[sym::rustc, sym::ty, sym::sty, sym::TyKind];\n-const TY_PATH: &[Symbol] = &[sym::rustc, sym::ty, sym::Ty];\n-const TYCTXT_PATH: &[Symbol] = &[sym::rustc, sym::ty, sym::context, sym::TyCtxt];\n-\n fn is_ty_or_ty_ctxt(cx: &LateContext<'_, '_>, ty: &Ty) -> Option<String> {\n     match &ty.node {\n         TyKind::Path(qpath) => {\n             if let QPath::Resolved(_, path) = qpath {\n                 let did = path.res.opt_def_id()?;\n-                if cx.match_def_path(did, TY_PATH) {\n+                if cx.tcx.is_diagnostic_item(sym::Ty, did) {\n                     return Some(format!(\"Ty{}\", gen_args(path.segments.last().unwrap())));\n-                } else if cx.match_def_path(did, TYCTXT_PATH) {\n+                } else if cx.tcx.is_diagnostic_item(sym::TyCtxt, did) {\n                     return Some(format!(\"TyCtxt{}\", gen_args(path.segments.last().unwrap())));\n                 }\n             }"}, {"sha": "dfae169b27824abe35d7242c0c6ee3e7ac66139e", "filename": "src/librustc/middle/diagnostic_items.rs", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae/src%2Flibrustc%2Fmiddle%2Fdiagnostic_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae/src%2Flibrustc%2Fmiddle%2Fdiagnostic_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdiagnostic_items.rs?ref=c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae", "patch": "@@ -0,0 +1,123 @@\n+//! Detecting diagnostic items.\n+//!\n+//! Diagnostic items are items that are not language-inherent, but can reasonably be expected to\n+//! exist for diagnostic purposes. This allows diagnostic authors to refer to specific items\n+//! directly, without having to guess module paths and crates.\n+//! Examples are:\n+//!\n+//! * Traits like `Debug`, that have no bearing on language semantics\n+//!\n+//! * Compiler internal types like `Ty` and `TyCtxt`\n+\n+use crate::hir::def_id::{DefId, LOCAL_CRATE};\n+use crate::ty::TyCtxt;\n+use crate::util::nodemap::FxHashMap;\n+\n+use syntax::ast;\n+use syntax::symbol::{Symbol, sym};\n+use crate::hir::itemlikevisit::ItemLikeVisitor;\n+use crate::hir;\n+\n+struct DiagnosticItemCollector<'tcx> {\n+    // items from this crate\n+    items: FxHashMap<Symbol, DefId>,\n+    tcx: TyCtxt<'tcx>,\n+}\n+\n+impl<'v, 'tcx> ItemLikeVisitor<'v> for DiagnosticItemCollector<'tcx> {\n+    fn visit_item(&mut self, item: &hir::Item) {\n+        self.observe_item(&item.attrs, item.hir_id);\n+    }\n+\n+    fn visit_trait_item(&mut self, trait_item: &hir::TraitItem) {\n+        self.observe_item(&trait_item.attrs, trait_item.hir_id);\n+    }\n+\n+    fn visit_impl_item(&mut self, impl_item: &hir::ImplItem) {\n+        self.observe_item(&impl_item.attrs, impl_item.hir_id);\n+    }\n+}\n+\n+impl<'tcx> DiagnosticItemCollector<'tcx> {\n+    fn new(tcx: TyCtxt<'tcx>) -> DiagnosticItemCollector<'tcx> {\n+        DiagnosticItemCollector {\n+            tcx,\n+            items: Default::default(),\n+        }\n+    }\n+\n+    fn observe_item(&mut self, attrs: &[ast::Attribute], hir_id: hir::HirId) {\n+        if let Some(name) = extract(attrs) {\n+            let def_id = self.tcx.hir().local_def_id(hir_id);\n+            // insert into our table\n+            collect_item(self.tcx, &mut self.items, name, def_id);\n+        }\n+    }\n+}\n+\n+fn collect_item(\n+    tcx: TyCtxt<'_>,\n+    items: &mut FxHashMap<Symbol, DefId>,\n+    name: Symbol,\n+    item_def_id: DefId,\n+) {\n+    // Check for duplicates.\n+    if let Some(original_def_id) = items.insert(name, item_def_id) {\n+        if original_def_id != item_def_id {\n+            let mut err = match tcx.hir().span_if_local(item_def_id) {\n+                Some(span) => tcx.sess.struct_span_err(\n+                    span,\n+                    &format!(\"duplicate diagnostic item found: `{}`.\", name)),\n+                None => tcx.sess.struct_err(&format!(\n+                        \"duplicate diagnostic item in crate `{}`: `{}`.\",\n+                        tcx.crate_name(item_def_id.krate),\n+                        name)),\n+            };\n+            if let Some(span) = tcx.hir().span_if_local(original_def_id) {\n+                span_note!(&mut err, span, \"first defined here.\");\n+            } else {\n+                err.note(&format!(\"first defined in crate `{}`.\",\n+                                    tcx.crate_name(original_def_id.krate)));\n+            }\n+            err.emit();\n+        }\n+    }\n+}\n+\n+/// Extract the first `rustc_diagnostic_item = \"$name\"` out of a list of attributes.\n+fn extract(attrs: &[ast::Attribute]) -> Option<Symbol> {\n+    attrs.iter().find_map(|attr| {\n+        if attr.check_name(sym::rustc_diagnostic_item) {\n+            attr.value_str()\n+        } else {\n+            None\n+        }\n+    })\n+}\n+\n+/// Traverse and collect the diagnostic items in the current\n+pub fn collect<'tcx>(tcx: TyCtxt<'tcx>) -> &'tcx FxHashMap<Symbol, DefId> {\n+    // Initialize the collector.\n+    let mut collector = DiagnosticItemCollector::new(tcx);\n+\n+    // Collect diagnostic items in this crate.\n+    tcx.hir().krate().visit_all_item_likes(&mut collector);\n+\n+    tcx.arena.alloc(collector.items)\n+}\n+\n+\n+/// Traverse and collect all the diagnostic items in all crates.\n+pub fn collect_all<'tcx>(tcx: TyCtxt<'tcx>) -> &'tcx FxHashMap<Symbol, DefId> {\n+    // Initialize the collector.\n+    let mut collector = FxHashMap::default();\n+\n+    // Collect diagnostic items in other crates.\n+    for &cnum in tcx.crates().iter().chain(std::iter::once(&LOCAL_CRATE)) {\n+        for (&name, &def_id) in tcx.diagnostic_items(cnum).iter() {\n+            collect_item(tcx, &mut collector, name, def_id);\n+        }\n+    }\n+\n+    tcx.arena.alloc(collector)\n+}"}, {"sha": "6b04600eb75f8d0e2d903bbf111774ef9049e370", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae", "patch": "@@ -367,8 +367,6 @@ language_item_table! {\n \n     MaybeUninitLangItem,         \"maybe_uninit\",       maybe_uninit,            Target::Union;\n \n-    DebugTraitLangItem,          \"debug_trait\",        debug_trait,             Target::Trait;\n-\n     // Align offset for stride != 1, must not panic.\n     AlignOffsetLangItem,         \"align_offset\",       align_offset_fn,         Target::Fn;\n "}, {"sha": "ef838114f6c36886ae2e141a2aaf283efd27667d", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae", "patch": "@@ -804,7 +804,7 @@ rustc_queries! {\n     }\n \n     BorrowChecking {\n-        // Lifetime resolution. See `middle::resolve_lifetimes`.\n+        /// Lifetime resolution. See `middle::resolve_lifetimes`.\n         query resolve_lifetimes(_: CrateNum) -> &'tcx ResolveLifetimes {\n             desc { \"resolving lifetimes\" }\n         }\n@@ -846,13 +846,30 @@ rustc_queries! {\n             -> &'tcx [(Symbol, Option<Symbol>)] {\n             desc { \"calculating the lib features defined in a crate\" }\n         }\n+        /// Returns the lang items defined in another crate by loading it from metadata.\n+        // FIXME: It is illegal to pass a `CrateNum` other than `LOCAL_CRATE` here, just get rid\n+        // of that argument?\n         query get_lang_items(_: CrateNum) -> &'tcx LanguageItems {\n             eval_always\n             desc { \"calculating the lang items map\" }\n         }\n+\n+        /// Returns all diagnostic items defined in all crates\n+        query all_diagnostic_items(_: CrateNum) -> &'tcx FxHashMap<Symbol, DefId> {\n+            eval_always\n+            desc { \"calculating the diagnostic items map\" }\n+        }\n+\n+        /// Returns the lang items defined in another crate by loading it from metadata.\n         query defined_lang_items(_: CrateNum) -> &'tcx [(DefId, usize)] {\n             desc { \"calculating the lang items defined in a crate\" }\n         }\n+\n+        /// Returns the diagnostic items defined in a crate\n+        query diagnostic_items(_: CrateNum) -> &'tcx FxHashMap<Symbol, DefId> {\n+            desc { \"calculating the diagnostic items map in a crate\" }\n+        }\n+\n         query missing_lang_items(_: CrateNum) -> &'tcx [LangItem] {\n             desc { \"calculating the missing lang items in a crate\" }\n         }"}, {"sha": "e240e0df8b94814238872fdf169999296c2708bc", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae", "patch": "@@ -978,6 +978,7 @@ pub struct FreeRegionInfo {\n ///\n /// [rustc guide]: https://rust-lang.github.io/rustc-guide/ty.html\n #[derive(Copy, Clone)]\n+#[cfg_attr(not(bootstrap), rustc_diagnostic_item = \"TyCtxt\")]\n pub struct TyCtxt<'tcx> {\n     gcx: &'tcx GlobalCtxt<'tcx>,\n }\n@@ -1308,10 +1309,22 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.get_lib_features(LOCAL_CRATE)\n     }\n \n+    /// Obtain all lang items of this crate and all dependencies (recursively)\n     pub fn lang_items(self) -> &'tcx middle::lang_items::LanguageItems {\n         self.get_lang_items(LOCAL_CRATE)\n     }\n \n+    /// Obtain the given diagnostic item's `DefId`. Use `is_diagnostic_item` if you just want to\n+    /// compare against another `DefId`, since `is_diagnostic_item` is cheaper.\n+    pub fn get_diagnostic_item(self, name: Symbol) -> Option<DefId> {\n+        self.all_diagnostic_items(LOCAL_CRATE).get(&name).copied()\n+    }\n+\n+    /// Check whether the diagnostic item with the given `name` has the given `DefId`.\n+    pub fn is_diagnostic_item(self, name: Symbol, did: DefId) -> bool {\n+        self.diagnostic_items(did.krate).get(&name) == Some(&did)\n+    }\n+\n     pub fn stability(self) -> &'tcx stability::Index<'tcx> {\n         self.stability_index(LOCAL_CRATE)\n     }\n@@ -2896,6 +2909,14 @@ pub fn provide(providers: &mut ty::query::Providers<'_>) {\n         assert_eq!(id, LOCAL_CRATE);\n         tcx.arena.alloc(middle::lang_items::collect(tcx))\n     };\n+    providers.diagnostic_items = |tcx, id| {\n+        assert_eq!(id, LOCAL_CRATE);\n+        middle::diagnostic_items::collect(tcx)\n+    };\n+    providers.all_diagnostic_items = |tcx, id| {\n+        assert_eq!(id, LOCAL_CRATE);\n+        middle::diagnostic_items::collect_all(tcx)\n+    };\n     providers.maybe_unused_trait_import = |tcx, id| {\n         tcx.maybe_unused_trait_imports.contains(&id)\n     };"}, {"sha": "56505c04f0f0c5185df95fcdb6bb540178f5b827", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae", "patch": "@@ -581,6 +581,7 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for ty::TyS<'tcx> {\n     }\n }\n \n+#[cfg_attr(not(bootstrap), rustc_diagnostic_item = \"Ty\")]\n pub type Ty<'tcx> = &'tcx TyS<'tcx>;\n \n impl<'tcx> rustc_serialize::UseSpecializedEncodable for Ty<'tcx> {}"}, {"sha": "d2edf6fb1ee808b44685400f5a0ab6586f970254", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae", "patch": "@@ -86,6 +86,7 @@ impl BoundRegion {\n /// AST structure in `libsyntax/ast.rs` as well.\n #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash,\n          RustcEncodable, RustcDecodable, HashStable, Debug)]\n+#[cfg_attr(not(bootstrap), rustc_diagnostic_item = \"TyKind\")]\n pub enum TyKind<'tcx> {\n     /// The primitive boolean type. Written as `bool`.\n     Bool,"}, {"sha": "26e7b789f8f9047b73f4b8ba0de4a64c3a498960", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae", "patch": "@@ -570,7 +570,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDebugImplementations {\n             _ => return,\n         }\n \n-        let debug = match cx.tcx.lang_items().debug_trait() {\n+        let debug = match cx.tcx.get_diagnostic_item(sym::debug_trait) {\n             Some(debug) => debug,\n             None => return,\n         };"}, {"sha": "d6450f00c8b6a47ca66265365d2d425010d6830b", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae", "patch": "@@ -226,6 +226,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     }\n     defined_lib_features => { cdata.get_lib_features(tcx) }\n     defined_lang_items => { cdata.get_lang_items(tcx) }\n+    diagnostic_items => { cdata.get_diagnostic_items(tcx) }\n     missing_lang_items => { cdata.get_missing_lang_items(tcx) }\n \n     missing_extern_crate_item => {"}, {"sha": "75d7261704722bf6d9bb999df140d14eb10c6b24", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae", "patch": "@@ -12,6 +12,7 @@ use rustc::middle::exported_symbols::{ExportedSymbol, SymbolExportLevel};\n use rustc::hir::def::{self, Res, DefKind, CtorOf, CtorKind};\n use rustc::hir::def_id::{CrateNum, DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_data_structures::fingerprint::Fingerprint;\n+use rustc_data_structures::fx::FxHashMap;\n use rustc::middle::lang_items;\n use rustc::mir::{self, interpret};\n use rustc::mir::interpret::AllocDecodingSession;\n@@ -757,6 +758,23 @@ impl<'a, 'tcx> CrateMetadata {\n         }\n     }\n \n+    /// Iterates over the diagnostic items in the given crate.\n+    pub fn get_diagnostic_items(\n+        &self,\n+        tcx: TyCtxt<'tcx>,\n+    ) -> &'tcx FxHashMap<Symbol, DefId> {\n+        tcx.arena.alloc(if self.is_proc_macro_crate() {\n+            // Proc macro crates do not export any diagnostic-items to the target.\n+            Default::default()\n+        } else {\n+            self.root\n+                .diagnostic_items\n+                .decode(self)\n+                .map(|(name, def_index)| (name, self.local_def_id(def_index)))\n+                .collect()\n+        })\n+    }\n+\n     /// Iterates over each child of the given item.\n     pub fn each_child_of_item<F>(&self, id: DefIndex, mut callback: F, sess: &Session)\n         where F: FnMut(def::Export<hir::HirId>)"}, {"sha": "db212408d8ebd5d29aad23e5edf5e753b3d132ee", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae", "patch": "@@ -33,7 +33,7 @@ use syntax::ast;\n use syntax::attr;\n use syntax::ext::proc_macro::is_proc_macro_attr;\n use syntax::source_map::Spanned;\n-use syntax::symbol::{kw, sym, Ident};\n+use syntax::symbol::{kw, sym, Ident, Symbol};\n use syntax_pos::{self, FileName, SourceFile, Span};\n use log::{debug, trace};\n \n@@ -404,6 +404,11 @@ impl<'tcx> EncodeContext<'tcx> {\n         let lang_items_missing = self.encode_lang_items_missing();\n         let lang_item_bytes = self.position() - i;\n \n+        // Encode the diagnostic items.\n+        i = self.position();\n+        let diagnostic_items = self.encode_diagnostic_items();\n+        let diagnostic_item_bytes = self.position() - i;\n+\n         // Encode the native libraries used\n         i = self.position();\n         let native_libraries = self.encode_native_libraries();\n@@ -520,6 +525,7 @@ impl<'tcx> EncodeContext<'tcx> {\n             dylib_dependency_formats,\n             lib_features,\n             lang_items,\n+            diagnostic_items,\n             lang_items_missing,\n             native_libraries,\n             foreign_modules,\n@@ -545,6 +551,7 @@ impl<'tcx> EncodeContext<'tcx> {\n             println!(\"             dep bytes: {}\", dep_bytes);\n             println!(\"     lib feature bytes: {}\", lib_feature_bytes);\n             println!(\"       lang item bytes: {}\", lang_item_bytes);\n+            println!(\" diagnostic item bytes: {}\", diagnostic_item_bytes);\n             println!(\"          native bytes: {}\", native_lib_bytes);\n             println!(\"         source_map bytes: {}\", source_map_bytes);\n             println!(\"            impl bytes: {}\", impl_bytes);\n@@ -1555,6 +1562,12 @@ impl EncodeContext<'tcx> {\n         self.lazy(lib_features.to_vec())\n     }\n \n+    fn encode_diagnostic_items(&mut self) -> Lazy<[(Symbol, DefIndex)]> {\n+        let tcx = self.tcx;\n+        let diagnostic_items = tcx.diagnostic_items(LOCAL_CRATE);\n+        self.lazy(diagnostic_items.iter().map(|(&name, def_id)| (name, def_id.index)))\n+    }\n+\n     fn encode_lang_items(&mut self) -> Lazy<[(DefIndex, usize)]> {\n         let tcx = self.tcx;\n         let lang_items = tcx.lang_items();"}, {"sha": "1a5f0e17ba7ceebdd110b95321808718b9a6e004", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae", "patch": "@@ -176,6 +176,7 @@ pub struct CrateRoot<'tcx> {\n     pub lib_features: Lazy<[(Symbol, Option<Symbol>)]>,\n     pub lang_items: Lazy<[(DefIndex, usize)]>,\n     pub lang_items_missing: Lazy<[lang_items::LangItem]>,\n+    pub diagnostic_items: Lazy<[(Symbol, DefIndex)]>,\n     pub native_libraries: Lazy<[NativeLibrary]>,\n     pub foreign_modules: Lazy<[ForeignModule]>,\n     pub source_map: Lazy<[syntax_pos::SourceFile]>,"}, {"sha": "ee7ac3b15d9550cf651a0a0039f93f72a443f9cd", "filename": "src/libsyntax/feature_gate/builtin_attrs.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs?ref=c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae", "patch": "@@ -461,6 +461,17 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         lang, Normal, template!(NameValueStr: \"name\"), lang_items,\n         \"language items are subject to change\",\n     ),\n+    (\n+        sym::rustc_diagnostic_item,\n+        Normal,\n+        template!(NameValueStr: \"name\"),\n+        Gated(\n+            Stability::Unstable,\n+            sym::rustc_attrs,\n+            \"diagnostic items compiler internal support for linting\",\n+            cfg_fn!(rustc_attrs),\n+        ),\n+    ),\n     (\n         sym::no_debug, Whitelisted, template!(Word),\n         Gated("}, {"sha": "f44716e013ec877cc6b9dc8689f0032c6907f79c", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae", "patch": "@@ -225,9 +225,10 @@ symbols! {\n         custom_inner_attributes,\n         custom_test_frameworks,\n         c_variadic,\n-        Debug,\n+        debug_trait,\n         declare_lint_pass,\n         decl_macro,\n+        Debug,\n         Decodable,\n         Default,\n         default_lib_allocator,\n@@ -238,6 +239,7 @@ symbols! {\n         deref,\n         deref_mut,\n         derive,\n+        diagnostic,\n         direct,\n         doc,\n         doc_alias,\n@@ -569,6 +571,7 @@ symbols! {\n         rustc_conversion_suggestion,\n         rustc_def_path,\n         rustc_deprecated,\n+        rustc_diagnostic_item,\n         rustc_diagnostic_macros,\n         rustc_dirty,\n         rustc_dummy,"}, {"sha": "1d35422ed624145edb8154b29cfa66a53f495cb2", "filename": "src/test/ui/tool-attributes/diagnostic_item.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae/src%2Ftest%2Fui%2Ftool-attributes%2Fdiagnostic_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae/src%2Ftest%2Fui%2Ftool-attributes%2Fdiagnostic_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftool-attributes%2Fdiagnostic_item.rs?ref=c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae", "patch": "@@ -0,0 +1,2 @@\n+#[rustc_diagnostic_item = \"foomp\"] //~ ERROR compiler internal support for linting\n+struct Foomp;"}, {"sha": "deff4da6b8052d3adefbece97f509392ee5efdb4", "filename": "src/test/ui/tool-attributes/diagnostic_item.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae/src%2Ftest%2Fui%2Ftool-attributes%2Fdiagnostic_item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae/src%2Ftest%2Fui%2Ftool-attributes%2Fdiagnostic_item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftool-attributes%2Fdiagnostic_item.stderr?ref=c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae", "patch": "@@ -0,0 +1,17 @@\n+error[E0658]: diagnostic items compiler internal support for linting\n+  --> $DIR/diagnostic_item.rs:1:1\n+   |\n+LL | #[rustc_diagnostic_item = \"foomp\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add `#![feature(rustc_attrs)]` to the crate attributes to enable\n+\n+error[E0601]: `main` function not found in crate `diagnostic_item`\n+   |\n+   = note: consider adding a `main` function to `$DIR/diagnostic_item.rs`\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0601, E0658.\n+For more information about an error, try `rustc --explain E0601`."}, {"sha": "b32a66b16be18ec8daad58fbcad97dd390954ef5", "filename": "src/test/ui/tool-attributes/diagnostic_item2.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae/src%2Ftest%2Fui%2Ftool-attributes%2Fdiagnostic_item2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae/src%2Ftest%2Fui%2Ftool-attributes%2Fdiagnostic_item2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftool-attributes%2Fdiagnostic_item2.rs?ref=c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae", "patch": "@@ -0,0 +1,6 @@\n+// check-pass\n+\n+#[clippy::diagnostic_item = \"mep\"]\n+struct Mep;\n+\n+fn main() {}"}, {"sha": "c1a236ed1cc3275aada009c0ff3f156eabc241ff", "filename": "src/test/ui/tool-attributes/diagnostic_item3.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae/src%2Ftest%2Fui%2Ftool-attributes%2Fdiagnostic_item3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae/src%2Ftest%2Fui%2Ftool-attributes%2Fdiagnostic_item3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftool-attributes%2Fdiagnostic_item3.rs?ref=c7d4df0fcfc3ed3ee98a430e451c6776e90d65ae", "patch": "@@ -0,0 +1,7 @@\n+// check-pass\n+#![feature(rustc_attrs)]\n+\n+#[rustc_diagnostic_item = \"foomp\"]\n+struct Foomp;\n+\n+fn main() {}"}]}