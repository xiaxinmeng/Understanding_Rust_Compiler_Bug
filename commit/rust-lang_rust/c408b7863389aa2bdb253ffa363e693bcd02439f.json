{"sha": "c408b7863389aa2bdb253ffa363e693bcd02439f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0MDhiNzg2MzM4OWFhMmJkYjI1M2ZmYTM2M2U2OTNiY2QwMjQzOWY=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2015-08-19T14:03:59Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2015-08-22T11:58:39Z"}, "message": "Move the Borrow and BorrowMut traits to libcore.", "tree": {"sha": "d24554daf2d34ade8df07a7a68c4a5ced316cf0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d24554daf2d34ade8df07a7a68c4a5ced316cf0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c408b7863389aa2bdb253ffa363e693bcd02439f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c408b7863389aa2bdb253ffa363e693bcd02439f", "html_url": "https://github.com/rust-lang/rust/commit/c408b7863389aa2bdb253ffa363e693bcd02439f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c408b7863389aa2bdb253ffa363e693bcd02439f/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94ee3b5a54a9f4965b82f5e4eda512966e96ac63", "url": "https://api.github.com/repos/rust-lang/rust/commits/94ee3b5a54a9f4965b82f5e4eda512966e96ac63", "html_url": "https://github.com/rust-lang/rust/commit/94ee3b5a54a9f4965b82f5e4eda512966e96ac63"}], "stats": {"total": 239, "additions": 129, "deletions": 110}, "files": [{"sha": "b68d7976540a03d9cd8ca9fcf3ec1997bad9529a", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c408b7863389aa2bdb253ffa363e693bcd02439f/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c408b7863389aa2bdb253ffa363e693bcd02439f/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=c408b7863389aa2bdb253ffa363e693bcd02439f", "patch": "@@ -73,6 +73,7 @@ use boxed::Box;\n \n use core::sync::atomic;\n use core::sync::atomic::Ordering::{Relaxed, Release, Acquire, SeqCst};\n+use core::borrow;\n use core::fmt;\n use core::cmp::Ordering;\n use core::mem::{align_of_val, size_of_val};\n@@ -1109,3 +1110,7 @@ mod tests {\n         assert!(y.upgrade().is_none());\n     }\n }\n+\n+impl<T: ?Sized> borrow::Borrow<T> for Arc<T> {\n+    fn borrow(&self) -> &T { &**self }\n+}"}, {"sha": "a6e0f3a9bd97d3c1eac029aed9a160a3972fb80f", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c408b7863389aa2bdb253ffa363e693bcd02439f/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c408b7863389aa2bdb253ffa363e693bcd02439f/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=c408b7863389aa2bdb253ffa363e693bcd02439f", "patch": "@@ -57,6 +57,7 @@ use heap;\n use raw_vec::RawVec;\n \n use core::any::Any;\n+use core::borrow;\n use core::cmp::Ordering;\n use core::fmt;\n use core::hash::{self, Hash};\n@@ -562,3 +563,10 @@ impl<T: Clone> Clone for Box<[T]> {\n     }\n }\n \n+impl<T: ?Sized> borrow::Borrow<T> for Box<T> {\n+    fn borrow(&self) -> &T { &**self }\n+}\n+\n+impl<T: ?Sized> borrow::BorrowMut<T> for Box<T> {\n+    fn borrow_mut(&mut self) -> &mut T { &mut **self }\n+}"}, {"sha": "b1fb5be4d21bf63b68f4f09cb6fa487d808ec69d", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c408b7863389aa2bdb253ffa363e693bcd02439f/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c408b7863389aa2bdb253ffa363e693bcd02439f/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=c408b7863389aa2bdb253ffa363e693bcd02439f", "patch": "@@ -158,6 +158,7 @@ use boxed::Box;\n #[cfg(test)]\n use std::boxed::Box;\n \n+use core::borrow;\n use core::cell::Cell;\n use core::cmp::Ordering;\n use core::fmt;\n@@ -1091,3 +1092,7 @@ mod tests {\n         assert_eq!(foo, foo.clone());\n     }\n }\n+\n+impl<T: ?Sized> borrow::Borrow<T> for Rc<T> {\n+    fn borrow(&self) -> &T { &**self }\n+}"}, {"sha": "bd1864b28cdd3e24e22621733a2a5d3a2e909d0d", "filename": "src/libcollections/borrow.rs", "status": "modified", "additions": 1, "deletions": 110, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/c408b7863389aa2bdb253ffa363e693bcd02439f/src%2Flibcollections%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c408b7863389aa2bdb253ffa363e693bcd02439f/src%2Flibcollections%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fborrow.rs?ref=c408b7863389aa2bdb253ffa363e693bcd02439f", "patch": "@@ -21,119 +21,10 @@ use core::ops::Deref;\n use core::option::Option;\n \n use fmt;\n-use alloc::{boxed, rc, arc};\n \n use self::Cow::*;\n \n-/// A trait for borrowing data.\n-///\n-/// In general, there may be several ways to \"borrow\" a piece of data.  The\n-/// typical ways of borrowing a type `T` are `&T` (a shared borrow) and `&mut T`\n-/// (a mutable borrow). But types like `Vec<T>` provide additional kinds of\n-/// borrows: the borrowed slices `&[T]` and `&mut [T]`.\n-///\n-/// When writing generic code, it is often desirable to abstract over all ways\n-/// of borrowing data from a given type. That is the role of the `Borrow`\n-/// trait: if `T: Borrow<U>`, then `&U` can be borrowed from `&T`.  A given\n-/// type can be borrowed as multiple different types. In particular, `Vec<T>:\n-/// Borrow<Vec<T>>` and `Vec<T>: Borrow<[T]>`.\n-///\n-/// If you are implementing `Borrow` and both `Self` and `Borrowed` implement\n-/// `Hash`, `Eq`, and/or `Ord`, they must produce the same result.\n-///\n-/// `Borrow` is very similar to, but different than, `AsRef`. See\n-/// [the book][book] for more.\n-///\n-/// [book]: ../../book/borrow-and-asref.html\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub trait Borrow<Borrowed: ?Sized> {\n-    /// Immutably borrows from an owned value.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::borrow::Borrow;\n-    ///\n-    /// fn check<T: Borrow<str>>(s: T) {\n-    ///     assert_eq!(\"Hello\", s.borrow());\n-    /// }\n-    ///\n-    /// let s = \"Hello\".to_string();\n-    ///\n-    /// check(s);\n-    ///\n-    /// let s = \"Hello\";\n-    ///\n-    /// check(s);\n-    /// ```\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn borrow(&self) -> &Borrowed;\n-}\n-\n-/// A trait for mutably borrowing data.\n-///\n-/// Similar to `Borrow`, but for mutable borrows.\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub trait BorrowMut<Borrowed: ?Sized> : Borrow<Borrowed> {\n-    /// Mutably borrows from an owned value.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::borrow::BorrowMut;\n-    ///\n-    /// fn check<T: BorrowMut<[i32]>>(mut v: T) {\n-    ///     assert_eq!(&mut [1, 2, 3], v.borrow_mut());\n-    /// }\n-    ///\n-    /// let v = vec![1, 2, 3];\n-    ///\n-    /// check(v);\n-    /// ```\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn borrow_mut(&mut self) -> &mut Borrowed;\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: ?Sized> Borrow<T> for T {\n-    fn borrow(&self) -> &T { self }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: ?Sized> BorrowMut<T> for T {\n-    fn borrow_mut(&mut self) -> &mut T { self }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T: ?Sized> Borrow<T> for &'a T {\n-    fn borrow(&self) -> &T { &**self }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T: ?Sized> Borrow<T> for &'a mut T {\n-    fn borrow(&self) -> &T { &**self }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T: ?Sized> BorrowMut<T> for &'a mut T {\n-    fn borrow_mut(&mut self) -> &mut T { &mut **self }\n-}\n-\n-impl<T: ?Sized> Borrow<T> for boxed::Box<T> {\n-    fn borrow(&self) -> &T { &**self }\n-}\n-\n-impl<T: ?Sized> BorrowMut<T> for boxed::Box<T> {\n-    fn borrow_mut(&mut self) -> &mut T { &mut **self }\n-}\n-\n-impl<T: ?Sized> Borrow<T> for rc::Rc<T> {\n-    fn borrow(&self) -> &T { &**self }\n-}\n-\n-impl<T: ?Sized> Borrow<T> for arc::Arc<T> {\n-    fn borrow(&self) -> &T { &**self }\n-}\n+pub use core::borrow::{Borrow, BorrowMut};\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, B: ?Sized> Borrow<B> for Cow<'a, B> where B: ToOwned, <B as ToOwned>::Owned: 'a {"}, {"sha": "79330d3a61ea7dcfedeb9f6da18513bf1f4b5f91", "filename": "src/libcore/borrow.rs", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/c408b7863389aa2bdb253ffa363e693bcd02439f/src%2Flibcore%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c408b7863389aa2bdb253ffa363e693bcd02439f/src%2Flibcore%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fborrow.rs?ref=c408b7863389aa2bdb253ffa363e693bcd02439f", "patch": "@@ -0,0 +1,109 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! A module for working with borrowed data.\n+\n+#![stable(feature = \"rust1\", since = \"1.0.0\")]\n+\n+use marker::Sized;\n+\n+/// A trait for borrowing data.\n+///\n+/// In general, there may be several ways to \"borrow\" a piece of data.  The\n+/// typical ways of borrowing a type `T` are `&T` (a shared borrow) and `&mut T`\n+/// (a mutable borrow). But types like `Vec<T>` provide additional kinds of\n+/// borrows: the borrowed slices `&[T]` and `&mut [T]`.\n+///\n+/// When writing generic code, it is often desirable to abstract over all ways\n+/// of borrowing data from a given type. That is the role of the `Borrow`\n+/// trait: if `T: Borrow<U>`, then `&U` can be borrowed from `&T`.  A given\n+/// type can be borrowed as multiple different types. In particular, `Vec<T>:\n+/// Borrow<Vec<T>>` and `Vec<T>: Borrow<[T]>`.\n+///\n+/// If you are implementing `Borrow` and both `Self` and `Borrowed` implement\n+/// `Hash`, `Eq`, and/or `Ord`, they must produce the same result.\n+///\n+/// `Borrow` is very similar to, but different than, `AsRef`. See\n+/// [the book][book] for more.\n+///\n+/// [book]: ../../book/borrow-and-asref.html\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub trait Borrow<Borrowed: ?Sized> {\n+    /// Immutably borrows from an owned value.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::borrow::Borrow;\n+    ///\n+    /// fn check<T: Borrow<str>>(s: T) {\n+    ///     assert_eq!(\"Hello\", s.borrow());\n+    /// }\n+    ///\n+    /// let s = \"Hello\".to_string();\n+    ///\n+    /// check(s);\n+    ///\n+    /// let s = \"Hello\";\n+    ///\n+    /// check(s);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    fn borrow(&self) -> &Borrowed;\n+}\n+\n+/// A trait for mutably borrowing data.\n+///\n+/// Similar to `Borrow`, but for mutable borrows.\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub trait BorrowMut<Borrowed: ?Sized> : Borrow<Borrowed> {\n+    /// Mutably borrows from an owned value.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::borrow::BorrowMut;\n+    ///\n+    /// fn check<T: BorrowMut<[i32]>>(mut v: T) {\n+    ///     assert_eq!(&mut [1, 2, 3], v.borrow_mut());\n+    /// }\n+    ///\n+    /// let v = vec![1, 2, 3];\n+    ///\n+    /// check(v);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    fn borrow_mut(&mut self) -> &mut Borrowed;\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T: ?Sized> Borrow<T> for T {\n+    fn borrow(&self) -> &T { self }\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T: ?Sized> BorrowMut<T> for T {\n+    fn borrow_mut(&mut self) -> &mut T { self }\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<'a, T: ?Sized> Borrow<T> for &'a T {\n+    fn borrow(&self) -> &T { &**self }\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<'a, T: ?Sized> Borrow<T> for &'a mut T {\n+    fn borrow(&self) -> &T { &**self }\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<'a, T: ?Sized> BorrowMut<T> for &'a mut T {\n+    fn borrow_mut(&mut self) -> &mut T { &mut **self }\n+}"}, {"sha": "78a467e365799125b2d5c3dde848bd61d2d133af", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c408b7863389aa2bdb253ffa363e693bcd02439f/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c408b7863389aa2bdb253ffa363e693bcd02439f/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=c408b7863389aa2bdb253ffa363e693bcd02439f", "patch": "@@ -139,6 +139,7 @@ pub mod cmp;\n pub mod clone;\n pub mod default;\n pub mod convert;\n+pub mod borrow;\n \n /* Core types and methods on primitives */\n "}]}