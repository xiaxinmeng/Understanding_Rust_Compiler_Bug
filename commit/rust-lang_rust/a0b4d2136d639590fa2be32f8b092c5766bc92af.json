{"sha": "a0b4d2136d639590fa2be32f8b092c5766bc92af", "node_id": "C_kwDOAAsO6NoAKGEwYjRkMjEzNmQ2Mzk1OTBmYTJiZTMyZjhiMDkyYzU3NjZiYzkyYWY", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-03-02T18:43:43Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-03-13T13:31:12Z"}, "message": "Use trimmed down deserialization impl for config\n\nThis reduces binary size from 10.1MiB (6.2MiB for just rustbuild code)\nto 9.7MiB (5.8MiB for just rustbuild code).\n\nThis also reduces compile time from ~6.1s for incr recompilation to ~5.6s.\n\nThere is still a lot of\nunnecessary code due to the toml crate monomorphizing every\ndeserialization impl 5 times.", "tree": {"sha": "68bdcda20ed3057c6ffa4fee98e9f209b56b9cea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68bdcda20ed3057c6ffa4fee98e9f209b56b9cea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0b4d2136d639590fa2be32f8b092c5766bc92af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0b4d2136d639590fa2be32f8b092c5766bc92af", "html_url": "https://github.com/rust-lang/rust/commit/a0b4d2136d639590fa2be32f8b092c5766bc92af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0b4d2136d639590fa2be32f8b092c5766bc92af/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88609e51265a563552e8fb4509f83a99e15451b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/88609e51265a563552e8fb4509f83a99e15451b2", "html_url": "https://github.com/rust-lang/rust/commit/88609e51265a563552e8fb4509f83a99e15451b2"}], "stats": {"total": 383, "additions": 237, "deletions": 146}, "files": [{"sha": "762f18fb32f8e2055a3f21e45324b7f14b448844", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 237, "deletions": 146, "changes": 383, "blob_url": "https://github.com/rust-lang/rust/blob/a0b4d2136d639590fa2be32f8b092c5766bc92af/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0b4d2136d639590fa2be32f8b092c5766bc92af/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=a0b4d2136d639590fa2be32f8b092c5766bc92af", "patch": "@@ -17,7 +17,7 @@ use crate::channel::GitInfo;\n pub use crate::flags::Subcommand;\n use crate::flags::{Color, Flags};\n use crate::util::{exe, t};\n-use serde::Deserialize;\n+use serde::{Deserialize, Deserializer};\n \n macro_rules! check_ci_llvm {\n     ($name:expr) => {\n@@ -364,13 +364,11 @@ impl Merge for TomlConfig {\n // rustbuild.\n macro_rules! define_config {\n     ($(#[$attr:meta])* struct $name:ident {\n-        $($field:ident: $field_ty:ty,)*\n+        $($field:ident: Option<$field_ty:ty> = $field_key:literal,)*\n     }) => {\n         $(#[$attr])*\n-        #[derive(Deserialize)]\n-        #[serde(deny_unknown_fields, rename_all = \"kebab-case\")]\n         struct $name {\n-            $($field: $field_ty,)*\n+            $($field: Option<$field_ty>,)*\n         }\n \n         impl Merge for $name {\n@@ -382,108 +380,201 @@ macro_rules! define_config {\n                 )*\n             }\n         }\n+\n+        // The following is a trimmed version of what serde_derive generates. All parts not relevant\n+        // for toml deserialization have been removed. This reduces the binary size and improves\n+        // compile time of rustbuild.\n+        impl<'de> Deserialize<'de> for $name {\n+            fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>\n+            where\n+                D: Deserializer<'de>,\n+            {\n+                #[allow(non_camel_case_types)]\n+                enum FieldName {\n+                    $($field,)*\n+                }\n+                struct FieldNameVisitor;\n+                impl<'de> serde::de::Visitor<'de> for FieldNameVisitor {\n+                    type Value = FieldName;\n+                    fn expecting(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+                        f.write_str(\"field identifier\")\n+                    }\n+\n+                    #[inline]\n+                    fn visit_str<E>(self, value: &str) -> Result<Self::Value, E>\n+                    where\n+                        E: serde::de::Error,\n+                    {\n+                        match value {\n+                            $($field_key => Ok(FieldName::$field),)*\n+                            _ => Err(serde::de::Error::unknown_field(value, FIELDS)),\n+                        }\n+                    }\n+                }\n+                impl<'de> Deserialize<'de> for FieldName {\n+                    #[inline]\n+                    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>\n+                    where\n+                        D: Deserializer<'de>,\n+                    {\n+                        Deserializer::deserialize_identifier(deserializer, FieldNameVisitor)\n+                    }\n+                }\n+                struct Field;\n+                impl<'de> serde::de::Visitor<'de> for Field {\n+                    type Value = $name;\n+                    fn expecting(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+                        f.write_str(concat!(\"struct \", stringify!($name)))\n+                    }\n+\n+                    #[inline]\n+                    fn visit_map<A>(self, mut map: A) -> Result<Self::Value, A::Error>\n+                    where\n+                        A: serde::de::MapAccess<'de>,\n+                    {\n+                        $(let mut $field: Option<$field_ty> = None;)*\n+                        while let Some(key) =\n+                            match serde::de::MapAccess::next_key::<FieldName>(&mut map) {\n+                                Ok(val) => val,\n+                                Err(err) => {\n+                                    return Err(err);\n+                                }\n+                            }\n+                        {\n+                            match key {\n+                                $(FieldName::$field => {\n+                                    if $field.is_some() {\n+                                        return Err(<A::Error as serde::de::Error>::duplicate_field(\n+                                            $field_key,\n+                                        ));\n+                                    }\n+                                    $field = match serde::de::MapAccess::next_value::<$field_ty>(\n+                                        &mut map,\n+                                    ) {\n+                                        Ok(val) => Some(val),\n+                                        Err(err) => {\n+                                            return Err(err);\n+                                        }\n+                                    };\n+                                })*\n+                            }\n+                        }\n+                        Ok($name { $($field),* })\n+                    }\n+                }\n+                const FIELDS: &'static [&'static str] = &[\n+                    $($field_key,)*\n+                ];\n+                Deserializer::deserialize_struct(\n+                    deserializer,\n+                    stringify!($name),\n+                    FIELDS,\n+                    Field,\n+                )\n+            }\n+        }\n     }\n }\n \n define_config! {\n     /// TOML representation of various global build decisions.\n     #[derive(Default)]\n     struct Build {\n-        build: Option<String>,\n-        host: Option<Vec<String>>,\n-        target: Option<Vec<String>>,\n-        build_dir: Option<String>,\n-        cargo: Option<String>,\n-        rustc: Option<String>,\n-        rustfmt: Option<PathBuf>,\n-        docs: Option<bool>,\n-        compiler_docs: Option<bool>,\n-        docs_minification: Option<bool>,\n-        submodules: Option<bool>,\n-        fast_submodules: Option<bool>,\n-        gdb: Option<String>,\n-        nodejs: Option<String>,\n-        npm: Option<String>,\n-        python: Option<String>,\n-        locked_deps: Option<bool>,\n-        vendor: Option<bool>,\n-        full_bootstrap: Option<bool>,\n-        extended: Option<bool>,\n-        tools: Option<HashSet<String>>,\n-        verbose: Option<usize>,\n-        sanitizers: Option<bool>,\n-        profiler: Option<bool>,\n-        cargo_native_static: Option<bool>,\n-        low_priority: Option<bool>,\n-        configure_args: Option<Vec<String>>,\n-        local_rebuild: Option<bool>,\n-        print_step_timings: Option<bool>,\n-        print_step_rusage: Option<bool>,\n-        check_stage: Option<u32>,\n-        doc_stage: Option<u32>,\n-        build_stage: Option<u32>,\n-        test_stage: Option<u32>,\n-        install_stage: Option<u32>,\n-        dist_stage: Option<u32>,\n-        bench_stage: Option<u32>,\n-        patch_binaries_for_nix: Option<bool>,\n+        build: Option<String> = \"build\",\n+        host: Option<Vec<String>> = \"host\",\n+        target: Option<Vec<String>> = \"target\",\n+        build_dir: Option<String> = \"build-dir\",\n+        cargo: Option<String> = \"cargo\",\n+        rustc: Option<String> = \"rustc\",\n+        rustfmt: Option<PathBuf> = \"rustfmt\",\n+        docs: Option<bool> = \"docs\",\n+        compiler_docs: Option<bool> = \"compiler-docs\",\n+        docs_minification: Option<bool> = \"docs-minification\",\n+        submodules: Option<bool> = \"submodules\",\n+        fast_submodules: Option<bool> = \"fast-submodules\",\n+        gdb: Option<String> = \"gdb\",\n+        nodejs: Option<String> = \"nodejs\",\n+        npm: Option<String> = \"npm\",\n+        python: Option<String> = \"python\",\n+        locked_deps: Option<bool> = \"locked-deps\",\n+        vendor: Option<bool> = \"vendor\",\n+        full_bootstrap: Option<bool> = \"full-bootstrap\",\n+        extended: Option<bool> = \"extended\",\n+        tools: Option<HashSet<String>> = \"tools\",\n+        verbose: Option<usize> = \"verbose\",\n+        sanitizers: Option<bool> = \"sanitizers\",\n+        profiler: Option<bool> = \"profiler\",\n+        cargo_native_static: Option<bool> = \"cargo-native-static\",\n+        low_priority: Option<bool> = \"low-priority\",\n+        configure_args: Option<Vec<String>> = \"configure-args\",\n+        local_rebuild: Option<bool> = \"local-rebuild\",\n+        print_step_timings: Option<bool> = \"print-step-timings\",\n+        print_step_rusage: Option<bool> = \"print-step-rusage\",\n+        check_stage: Option<u32> = \"check-stage\",\n+        doc_stage: Option<u32> = \"doc-stage\",\n+        build_stage: Option<u32> = \"build-stage\",\n+        test_stage: Option<u32> = \"test-stage\",\n+        install_stage: Option<u32> = \"install-stage\",\n+        dist_stage: Option<u32> = \"dist-stage\",\n+        bench_stage: Option<u32> = \"bench-stage\",\n+        patch_binaries_for_nix: Option<bool> = \"patch-binaries-for-nix\",\n     }\n }\n \n define_config! {\n     /// TOML representation of various global install decisions.\n     struct Install {\n-        prefix: Option<String>,\n-        sysconfdir: Option<String>,\n-        docdir: Option<String>,\n-        bindir: Option<String>,\n-        libdir: Option<String>,\n-        mandir: Option<String>,\n-        datadir: Option<String>,\n+        prefix: Option<String> = \"prefix\",\n+        sysconfdir: Option<String> = \"sysconfdir\",\n+        docdir: Option<String> = \"docdir\",\n+        bindir: Option<String> = \"bindir\",\n+        libdir: Option<String> = \"libdir\",\n+        mandir: Option<String> = \"mandir\",\n+        datadir: Option<String> = \"datadir\",\n     }\n }\n \n define_config! {\n     /// TOML representation of how the LLVM build is configured.\n     struct Llvm {\n-        skip_rebuild: Option<bool>,\n-        optimize: Option<bool>,\n-        thin_lto: Option<bool>,\n-        release_debuginfo: Option<bool>,\n-        assertions: Option<bool>,\n-        tests: Option<bool>,\n-        plugins: Option<bool>,\n-        ccache: Option<StringOrBool>,\n-        version_check: Option<bool>,\n-        static_libstdcpp: Option<bool>,\n-        ninja: Option<bool>,\n-        targets: Option<String>,\n-        experimental_targets: Option<String>,\n-        link_jobs: Option<u32>,\n-        link_shared: Option<bool>,\n-        version_suffix: Option<String>,\n-        clang_cl: Option<String>,\n-        cflags: Option<String>,\n-        cxxflags: Option<String>,\n-        ldflags: Option<String>,\n-        use_libcxx: Option<bool>,\n-        use_linker: Option<String>,\n-        allow_old_toolchain: Option<bool>,\n-        polly: Option<bool>,\n-        clang: Option<bool>,\n-        download_ci_llvm: Option<StringOrBool>,\n-        build_config: Option<HashMap<String, String>>,\n+        skip_rebuild: Option<bool> = \"skip-rebuild\",\n+        optimize: Option<bool> = \"optimize\",\n+        thin_lto: Option<bool> = \"thin-lto\",\n+        release_debuginfo: Option<bool> = \"release-debuginfo\",\n+        assertions: Option<bool> = \"assertions\",\n+        tests: Option<bool> = \"tests\",\n+        plugins: Option<bool> = \"plugins\",\n+        ccache: Option<StringOrBool> = \"ccache\",\n+        version_check: Option<bool> = \"version-check\",\n+        static_libstdcpp: Option<bool> = \"static-libstdcpp\",\n+        ninja: Option<bool> = \"ninja\",\n+        targets: Option<String> = \"targets\",\n+        experimental_targets: Option<String> = \"experimental-targets\",\n+        link_jobs: Option<u32> = \"link-jobs\",\n+        link_shared: Option<bool> = \"link-shared\",\n+        version_suffix: Option<String> = \"version-suffix\",\n+        clang_cl: Option<String> = \"clang-cl\",\n+        cflags: Option<String> = \"cflags\",\n+        cxxflags: Option<String> = \"cxxflags\",\n+        ldflags: Option<String> = \"ldflags\",\n+        use_libcxx: Option<bool> = \"use-libcxx\",\n+        use_linker: Option<String> = \"use-linker\",\n+        allow_old_toolchain: Option<bool> = \"allow-old-toolchain\",\n+        polly: Option<bool> = \"polly\",\n+        clang: Option<bool> = \"clang\",\n+        download_ci_llvm: Option<StringOrBool> = \"download-ci-llvm\",\n+        build_config: Option<HashMap<String, String>> = \"build-config\",\n     }\n }\n \n define_config! {\n     struct Dist {\n-        sign_folder: Option<String>,\n-        gpg_password_file: Option<String>,\n-        upload_addr: Option<String>,\n-        src_tarball: Option<bool>,\n-        missing_tools: Option<bool>,\n-        compression_formats: Option<Vec<String>>,\n+        sign_folder: Option<String> = \"sign-folder\",\n+        gpg_password_file: Option<String> = \"gpg-password-file\",\n+        upload_addr: Option<String> = \"upload-addr\",\n+        src_tarball: Option<bool> = \"src-tarball\",\n+        missing_tools: Option<bool> = \"missing-tools\",\n+        compression_formats: Option<Vec<String>> = \"compression-formats\",\n     }\n }\n \n@@ -503,76 +594,76 @@ impl Default for StringOrBool {\n define_config! {\n     /// TOML representation of how the Rust build is configured.\n     struct Rust {\n-        optimize: Option<bool>,\n-        debug: Option<bool>,\n-        codegen_units: Option<u32>,\n-        codegen_units_std: Option<u32>,\n-        debug_assertions: Option<bool>,\n-        debug_assertions_std: Option<bool>,\n-        overflow_checks: Option<bool>,\n-        overflow_checks_std: Option<bool>,\n-        debug_logging: Option<bool>,\n-        debuginfo_level: Option<u32>,\n-        debuginfo_level_rustc: Option<u32>,\n-        debuginfo_level_std: Option<u32>,\n-        debuginfo_level_tools: Option<u32>,\n-        debuginfo_level_tests: Option<u32>,\n-        run_dsymutil: Option<bool>,\n-        backtrace: Option<bool>,\n-        incremental: Option<bool>,\n-        parallel_compiler: Option<bool>,\n-        default_linker: Option<String>,\n-        channel: Option<String>,\n-        description: Option<String>,\n-        musl_root: Option<String>,\n-        rpath: Option<bool>,\n-        verbose_tests: Option<bool>,\n-        optimize_tests: Option<bool>,\n-        codegen_tests: Option<bool>,\n-        ignore_git: Option<bool>,\n-        dist_src: Option<bool>,\n-        save_toolstates: Option<String>,\n-        codegen_backends: Option<Vec<String>>,\n-        lld: Option<bool>,\n-        use_lld: Option<bool>,\n-        llvm_tools: Option<bool>,\n-        deny_warnings: Option<bool>,\n-        backtrace_on_ice: Option<bool>,\n-        verify_llvm_ir: Option<bool>,\n-        thin_lto_import_instr_limit: Option<u32>,\n-        remap_debuginfo: Option<bool>,\n-        jemalloc: Option<bool>,\n-        test_compare_mode: Option<bool>,\n-        llvm_libunwind: Option<String>,\n-        control_flow_guard: Option<bool>,\n-        new_symbol_mangling: Option<bool>,\n-        profile_generate: Option<String>,\n-        profile_use: Option<String>,\n+        optimize: Option<bool> = \"optimize\",\n+        debug: Option<bool> = \"debug\",\n+        codegen_units: Option<u32> = \"codegen-units\",\n+        codegen_units_std: Option<u32> = \"codegen-units-std\",\n+        debug_assertions: Option<bool> = \"debug-assertions\",\n+        debug_assertions_std: Option<bool> = \"debug-assertions-std\",\n+        overflow_checks: Option<bool> = \"overflow-checks\",\n+        overflow_checks_std: Option<bool> = \"overflow-checks-std\",\n+        debug_logging: Option<bool> = \"debug-logging\",\n+        debuginfo_level: Option<u32> = \"debuginfo-level\",\n+        debuginfo_level_rustc: Option<u32> = \"debuginfo-level-rustc\",\n+        debuginfo_level_std: Option<u32> = \"debuginfo-level-std\",\n+        debuginfo_level_tools: Option<u32> = \"debuginfo-level-tools\",\n+        debuginfo_level_tests: Option<u32> = \"debuginfo-level-tests\",\n+        run_dsymutil: Option<bool> = \"run-dsymutil\",\n+        backtrace: Option<bool> = \"backtrace\",\n+        incremental: Option<bool> = \"incremental\",\n+        parallel_compiler: Option<bool> = \"parallel-compiler\",\n+        default_linker: Option<String> = \"default-linker\",\n+        channel: Option<String> = \"channel\",\n+        description: Option<String> = \"description\",\n+        musl_root: Option<String> = \"musl-root\",\n+        rpath: Option<bool> = \"rpath\",\n+        verbose_tests: Option<bool> = \"verbose-tests\",\n+        optimize_tests: Option<bool> = \"optimize-tests\",\n+        codegen_tests: Option<bool> = \"codegen-tests\",\n+        ignore_git: Option<bool> = \"ignore-git\",\n+        dist_src: Option<bool> = \"dist-src\",\n+        save_toolstates: Option<String> = \"save-toolstates\",\n+        codegen_backends: Option<Vec<String>> = \"codegen-backends\",\n+        lld: Option<bool> = \"lld\",\n+        use_lld: Option<bool> = \"use-lld\",\n+        llvm_tools: Option<bool> = \"llvm-tools\",\n+        deny_warnings: Option<bool> = \"deny-warnings\",\n+        backtrace_on_ice: Option<bool> = \"backtrace-on-ice\",\n+        verify_llvm_ir: Option<bool> = \"verify-llvm-ir\",\n+        thin_lto_import_instr_limit: Option<u32> = \"thin-lto-import-instr-limit\",\n+        remap_debuginfo: Option<bool> = \"remap-debuginfo\",\n+        jemalloc: Option<bool> = \"jemalloc\",\n+        test_compare_mode: Option<bool> = \"test-compare-mode\",\n+        llvm_libunwind: Option<String> = \"llvm-libunwind\",\n+        control_flow_guard: Option<bool> = \"control-flow-guard\",\n+        new_symbol_mangling: Option<bool> = \"new-symbol-mangling\",\n+        profile_generate: Option<String> = \"profile-generate\",\n+        profile_use: Option<String> = \"profile-use\",\n         // ignored; this is set from an env var set by bootstrap.py\n-        download_rustc: Option<StringOrBool>,\n+        download_rustc: Option<StringOrBool> = \"download-rustc\",\n     }\n }\n \n define_config! {\n     /// TOML representation of how each build target is configured.\n     struct TomlTarget {\n-        cc: Option<String>,\n-        cxx: Option<String>,\n-        ar: Option<String>,\n-        ranlib: Option<String>,\n-        default_linker: Option<PathBuf>,\n-        linker: Option<String>,\n-        llvm_config: Option<String>,\n-        llvm_filecheck: Option<String>,\n-        android_ndk: Option<String>,\n-        sanitizers: Option<bool>,\n-        profiler: Option<bool>,\n-        crt_static: Option<bool>,\n-        musl_root: Option<String>,\n-        musl_libdir: Option<String>,\n-        wasi_root: Option<String>,\n-        qemu_rootfs: Option<String>,\n-        no_std: Option<bool>,\n+        cc: Option<String> = \"cc\",\n+        cxx: Option<String> = \"cxx\",\n+        ar: Option<String> = \"ar\",\n+        ranlib: Option<String> = \"ranlib\",\n+        default_linker: Option<PathBuf> = \"default-linker\",\n+        linker: Option<String> = \"linker\",\n+        llvm_config: Option<String> = \"llvm-config\",\n+        llvm_filecheck: Option<String> = \"llvm-filecheck\",\n+        android_ndk: Option<String> = \"android-ndk\",\n+        sanitizers: Option<bool> = \"sanitizers\",\n+        profiler: Option<bool> = \"profiler\",\n+        crt_static: Option<bool> = \"crt-static\",\n+        musl_root: Option<String> = \"musl-root\",\n+        musl_libdir: Option<String> = \"musl-libdir\",\n+        wasi_root: Option<String> = \"wasi-root\",\n+        qemu_rootfs: Option<String> = \"qemu-rootfs\",\n+        no_std: Option<bool> = \"no-std\",\n     }\n }\n "}]}