{"sha": "80e2957c60b4d148575b0d2ab94cbfe3f7ebbef6", "node_id": "C_kwDOAAsO6NoAKDgwZTI5NTdjNjBiNGQxNDg1NzViMGQyYWI5NGNiZmUzZjdlYmJlZjY", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2022-05-13T23:12:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-13T23:12:33Z"}, "message": "Apply suggestions from code review\n\nCo-authored-by: Wesley Wiser <wwiser@gmail.com>\nCo-authored-by: Josh Stone <cuviper@gmail.com>\nCo-authored-by: Josh Triplett <josh@joshtriplett.org>", "tree": {"sha": "0a02e4f46459136ffc051e6c78523eaf75c84e10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a02e4f46459136ffc051e6c78523eaf75c84e10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80e2957c60b4d148575b0d2ab94cbfe3f7ebbef6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJifuXhCRBK7hj4Ov3rIwAAcTIIAAcMCcfjvsVZFP/r65Ipatu3\nzKNQ+M0xHPKhvIGDB6Q0U1J4o/uDawCvis7Q98iVvl8j9zIYzjT1N+DbLkidOxOw\ndDsZ2eJIrfrzGmiB0bbxSg1XbT7f4B01kl84SpLxwvK3DGh4d7r8+XwIW68WCMso\nKknl3dDxhMtPC2WIdhdOg0gDEzOLxJSSrR1o5ZeHYltzA9YQaJFS+T1TuRVuXMTF\n7gbMvprl2weVzvRTU6jPjfVi5pz+ZyYOFK+D6D3WN0q/oxosJOekYiViqeKPO2ih\nv0jinKpB2XKoNAmjZhKFNbb8vKblTDlQ9FjILJDzqFpSfp8a5q8fQGPmkbWu3q8=\n=9nvD\n-----END PGP SIGNATURE-----\n", "payload": "tree 0a02e4f46459136ffc051e6c78523eaf75c84e10\nparent 0a07e55f221ce8bb7eb6bdac7e1df263aec9d84c\nauthor Tyler Mandry <tmandry@gmail.com> 1652483553 -0700\ncommitter GitHub <noreply@github.com> 1652483553 -0700\n\nApply suggestions from code review\n\nCo-authored-by: Wesley Wiser <wwiser@gmail.com>\nCo-authored-by: Josh Stone <cuviper@gmail.com>\nCo-authored-by: Josh Triplett <josh@joshtriplett.org>"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80e2957c60b4d148575b0d2ab94cbfe3f7ebbef6", "html_url": "https://github.com/rust-lang/rust/commit/80e2957c60b4d148575b0d2ab94cbfe3f7ebbef6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80e2957c60b4d148575b0d2ab94cbfe3f7ebbef6/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a07e55f221ce8bb7eb6bdac7e1df263aec9d84c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a07e55f221ce8bb7eb6bdac7e1df263aec9d84c", "html_url": "https://github.com/rust-lang/rust/commit/0a07e55f221ce8bb7eb6bdac7e1df263aec9d84c"}], "stats": {"total": 15, "additions": 7, "deletions": 8}, "files": [{"sha": "61264b1e1d1b7233ed31104582a310685b0d4ccf", "filename": "RELEASES.md", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/80e2957c60b4d148575b0d2ab94cbfe3f7ebbef6/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/80e2957c60b4d148575b0d2ab94cbfe3f7ebbef6/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=80e2957c60b4d148575b0d2ab94cbfe3f7ebbef6", "patch": "@@ -14,21 +14,21 @@ Compiler\n \n - [Linking modifier syntax in `#[link]` attributes and on the command line, as well as the `whole-archive` modifier specifically, are now supported][93901]\n - [Update to LLVM 14.0.0][95247]\n-- [The `char` type is now described as UTF-8 (`DW_ATE_UTF`) in DWARF debuginfo][89887]\n+- [The `char` type is now described as UTF-32 in debuginfo][89887]\n - The [`#[target_feature]`][target_feature] attribute [can now be used with aarch64 features][90621]\n-- [`#[target_feature = \"adx\"]` is now stable][93745]\n+- X86 [`#[target_feature = \"adx\"]` is now stable][93745]\n - [Catching a second unwind from FFI code while cleaning up from a Rust panic now causes the process to abort][92911]\n \n Libraries\n ---------\n \n - [`ManuallyDrop<T>` is now documented to have the same layout as `T`][88375]\n-- [Windows paths longer than 260 chars are now supported in `process::Command` without needing explicit canonoicalization][92519]\n+- [Windows paths longer than 260 chars are now supported in `process::Command` without needing explicit canonicalization][92519]\n - [`#[ignore = \"\u2026\"]` messages are printed when running tests][92714]\n - [Consistently present absent stdio handles on Windows as NULL handles][93263]\n-- [Make `std::io::stdio::lock()` return `'static` handles][93965]\n+- [Make `std::io::stdio::lock()` return `'static` handles.][93965] Previously, the creation of locked handles to stdin/stdout/stderr would borrow the handles being locked, which prevented writing `let out = std::io::stdout().lock();` because `out` would outlive the return value of `stdout()`. Such code now works, eliminating a common pitfall that affected many Rust users.\n - [`Vec::from_raw_parts` is now less restrictive about its inputs][95016]\n-- [Use cgroup quotas for calculating `available_parallelism` on Linux][92697]\n+- [`std::thread::available_parallelism` now takes cgroup quotas into account.][92697] Since `available_parallelism` is often used to create a thread pool for parallel computation, which may be CPU-bound for performance, `available_parallelism` will return a value consistent with the ability to use that many threads continuously, if possible. For instance, in a container with 8 virtual CPUs but quotas only allowing for 50% usage, `available_parallelism` will return 4.\n \n Stabilized APIs\n ---------------\n@@ -41,8 +41,7 @@ Stabilized APIs\n - [`VecDeque::retain_mut`][95491]\n - [`Write` for `Cursor<[u8; N]>`][92663]\n - [`std::os::unix::net::SocketAddr::from_pathname`][94356]\n-- [`std::process::ExitCode`][93840]\n-- [`std::process::Termination`][93840]\n+- [`std::process::ExitCode`][93840] and [`std::process::Termination`][93840]. The stabilization of these two APIs now makes it possible for programs to return errors from `main` with custom exit codes.\n - [`std::thread::JoinHandle::is_finished`][95130]\n \n These APIs are now usable in const contexts:\n@@ -70,7 +69,7 @@ Compatibility Notes\n - [The number of `#` in `r#` raw string literals is now required to be less than 256][95251]\n - [When checking that a dyn type satisfies a trait bound, supertrait bounds are now enforced][92285]\n - [`cargo vendor` now only accepts one value for each `--sync` flag][cargo/10448]\n-- [`cfg` predicates in `all()` and `any()` are always evaluated to detect errors, instead of short-circuiting][94295]\n+- [`cfg` predicates in `all()` and `any()` are always evaluated to detect errors, instead of short-circuiting.][94295] The compatibility considerations here arise in nightly-only code that used the short-circuiting behavior of `all` to write something like `cfg(all(feature = \"nightly\", syntax-requiring-nightly))`, which will now fail to compile. Instead, use either `cfg_attr(feature = \"nightly\", ...)` or nested uses of `cfg`.\n - [bootstrap: static-libstdcpp is now enabled by default, and can now be disabled when llvm-tools is enabled][94832]\n \n Internal Changes"}]}