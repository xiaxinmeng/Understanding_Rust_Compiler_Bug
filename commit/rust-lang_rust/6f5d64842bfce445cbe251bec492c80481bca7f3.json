{"sha": "6f5d64842bfce445cbe251bec492c80481bca7f3", "node_id": "C_kwDOAAsO6NoAKDZmNWQ2NDg0MmJmY2U0NDVjYmUyNTFiZWM0OTJjODA0ODFiY2E3ZjM", "commit": {"author": {"name": "dAxpeDDa", "email": "daxpedda@gmail.com", "date": "2022-08-09T02:48:05Z"}, "committer": {"name": "dAxpeDDa", "email": "daxpedda@gmail.com", "date": "2022-08-09T02:56:04Z"}, "message": "Address review", "tree": {"sha": "b22bcb605a24477b17f61ceefd5fd3d44898546e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b22bcb605a24477b17f61ceefd5fd3d44898546e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f5d64842bfce445cbe251bec492c80481bca7f3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE3qx/rJh59vdc2+v9Q9YqPqOI5G8FAmLxzMYACgkQQ9YqPqOI\n5G+1aQ//co+CItnjAihgJ25EWpk+Xrx7OZfpcTj23LQlMx/KUQH0pXmuwr0TNDo9\n0PUFqJUAUkMqUzwe+aSUUK2PCAtCEooA8+KR3iO8N4yi5cY0Pgx3/5fRmvrQv02Y\n8IeSvo7xus+cgEIPjRt8oO/1WWTYt1Y7pGKY4VIVFV65ZV9dX2YZdVoEFjXW3iLv\nftDYxYgRKsjUDcNQRPTc5aVP6NM//K0ag0skNxjFYR0QF318WH0122xb5+w6ueSx\nDEKq9kzeNnlUrK19NjjSswrpIuLZMjTAKhvhdcroCgrMhYA3vxHLWWGVmcVzCGdR\nTeDSSBw1iLUKh00OJONM3q30Z3xTrc57ZqDkvvJZEkjI+1bXVUXlEN5aGL5nGYtx\neAa/9w9CvMedN2qo9TYdT7awJV9dTaTrI3f/Dm201iiEdANSMSG1Mxk9M6Insf66\nu7pMMEOV3N1zBSM8k2RCX8VgLj96DW3a9/2oL05qgcmAmQts+1aJd9kzHJI3iIeX\ndB791XyVssL/pAO53bJDuYKF9JVaY/HH7ZJ2BOTsMDkkflXrcwIwYDcLldD46izC\nYBnn78f2Ai/nqsf1sWxDB1dJ4zaeuDt5uqCX99GR04VxVYOWzizkSUbOyUl4d1JM\nabDQ/VqC7GIrbu47J0u3voxDy2Gd/5E3UoY0xMD0M7piFWAKGzc=\n=JYlj\n-----END PGP SIGNATURE-----", "payload": "tree b22bcb605a24477b17f61ceefd5fd3d44898546e\nparent 8d4f2ac38195567ee8eca0123d428951821db507\nauthor dAxpeDDa <daxpedda@gmail.com> 1660013285 +0200\ncommitter dAxpeDDa <daxpedda@gmail.com> 1660013764 +0200\n\nAddress review\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f5d64842bfce445cbe251bec492c80481bca7f3", "html_url": "https://github.com/rust-lang/rust/commit/6f5d64842bfce445cbe251bec492c80481bca7f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f5d64842bfce445cbe251bec492c80481bca7f3/comments", "author": {"login": "daxpedda", "id": 1645124, "node_id": "MDQ6VXNlcjE2NDUxMjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1645124?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daxpedda", "html_url": "https://github.com/daxpedda", "followers_url": "https://api.github.com/users/daxpedda/followers", "following_url": "https://api.github.com/users/daxpedda/following{/other_user}", "gists_url": "https://api.github.com/users/daxpedda/gists{/gist_id}", "starred_url": "https://api.github.com/users/daxpedda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daxpedda/subscriptions", "organizations_url": "https://api.github.com/users/daxpedda/orgs", "repos_url": "https://api.github.com/users/daxpedda/repos", "events_url": "https://api.github.com/users/daxpedda/events{/privacy}", "received_events_url": "https://api.github.com/users/daxpedda/received_events", "type": "User", "site_admin": false}, "committer": {"login": "daxpedda", "id": 1645124, "node_id": "MDQ6VXNlcjE2NDUxMjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1645124?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daxpedda", "html_url": "https://github.com/daxpedda", "followers_url": "https://api.github.com/users/daxpedda/followers", "following_url": "https://api.github.com/users/daxpedda/following{/other_user}", "gists_url": "https://api.github.com/users/daxpedda/gists{/gist_id}", "starred_url": "https://api.github.com/users/daxpedda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daxpedda/subscriptions", "organizations_url": "https://api.github.com/users/daxpedda/orgs", "repos_url": "https://api.github.com/users/daxpedda/repos", "events_url": "https://api.github.com/users/daxpedda/events{/privacy}", "received_events_url": "https://api.github.com/users/daxpedda/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d4f2ac38195567ee8eca0123d428951821db507", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d4f2ac38195567ee8eca0123d428951821db507", "html_url": "https://github.com/rust-lang/rust/commit/8d4f2ac38195567ee8eca0123d428951821db507"}], "stats": {"total": 29, "additions": 13, "deletions": 16}, "files": [{"sha": "da3db9230a0c5c1047dfd8430764ca85e021b986", "filename": "clippy_utils/src/check_proc_macro.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6f5d64842bfce445cbe251bec492c80481bca7f3/clippy_utils%2Fsrc%2Fcheck_proc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f5d64842bfce445cbe251bec492c80481bca7f3/clippy_utils%2Fsrc%2Fcheck_proc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fcheck_proc_macro.rs?ref=6f5d64842bfce445cbe251bec492c80481bca7f3", "patch": "@@ -15,8 +15,8 @@\n use rustc_ast::ast::{IntTy, LitIntType, LitKind, StrStyle, UintTy};\n use rustc_hir::{\n     intravisit::FnKind, Block, BlockCheckMode, Body, Closure, Destination, Expr, ExprKind, FieldDef, FnHeader, HirId,\n-    Impl, ImplItem, ImplItemKind, IsAuto, Item, ItemKind, LoopSource, MatchSource, QPath, TraitItem, TraitItemKind,\n-    UnOp, UnsafeSource, Unsafety, Variant, VariantData, YieldSource,\n+    Impl, ImplItem, ImplItemKind, IsAuto, Item, ItemKind, LoopSource, MatchSource, Node, QPath, TraitItem,\n+    TraitItemKind, UnOp, UnsafeSource, Unsafety, Variant, VariantData, YieldSource,\n };\n use rustc_lint::{LateContext, LintContext};\n use rustc_middle::ty::TyCtxt;\n@@ -251,23 +251,20 @@ fn variant_search_pat(v: &Variant<'_>) -> (Pat, Pat) {\n }\n \n fn fn_kind_pat(tcx: TyCtxt<'_>, kind: &FnKind<'_>, body: &Body<'_>, hir_id: HirId) -> (Pat, Pat) {\n-    let (start_pat, end_pat, visibility) = match kind {\n-        FnKind::ItemFn(.., header) => (\n-            fn_header_search_pat(*header),\n-            Pat::Str(\"\"),\n-            tcx.visibility(tcx.hir().local_def_id(hir_id)),\n-        ),\n-        FnKind::Method(.., sig) => (\n-            fn_header_search_pat(sig.header),\n-            Pat::Str(\"\"),\n-            tcx.visibility(tcx.hir().local_def_id(hir_id)),\n-        ),\n+    let (start_pat, end_pat) = match kind {\n+        FnKind::ItemFn(.., header) => (fn_header_search_pat(*header), Pat::Str(\"\")),\n+        FnKind::Method(.., sig) => (fn_header_search_pat(sig.header), Pat::Str(\"\")),\n         FnKind::Closure => return (Pat::Str(\"\"), expr_search_pat(tcx, &body.value).1),\n     };\n-    if visibility.is_public() {\n-        (Pat::Str(\"pub\"), end_pat)\n-    } else {\n+    let vis_span = match tcx.hir().get(hir_id) {\n+        Node::Item(Item { vis_span, .. }) | Node::ImplItem(ImplItem { vis_span, .. }) => Some(vis_span),\n+        Node::TraitItem(_) => None,\n+        _ => unreachable!(),\n+    };\n+    if matches!(vis_span, Some(span) if span.is_empty()) {\n         (start_pat, end_pat)\n+    } else {\n+        (Pat::Str(\"pub\"), end_pat)\n     }\n }\n "}]}