{"sha": "35058287ce7cadd20eebf3fc77a34ca59c8a5eac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1MDU4Mjg3Y2U3Y2FkZDIwZWViZjNmYzc3YTM0Y2E1OWM4YTVlYWM=", "commit": {"author": {"name": "daxpedda", "email": "daxpedda@users.noreply.github.com", "date": "2018-12-16T14:42:02Z"}, "committer": {"name": "daxpedda", "email": "daxpedda@users.noreply.github.com", "date": "2018-12-16T14:42:02Z"}, "message": "Fix `implicit_return` false positives.", "tree": {"sha": "58ae54b85a186b534f2cd4045b22829ab30a48ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58ae54b85a186b534f2cd4045b22829ab30a48ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35058287ce7cadd20eebf3fc77a34ca59c8a5eac", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJWBAABCABAFiEEtfVYniVMfR+YKQUSxyLctqGR7qsFAlwWZDoiHGRheHBlZGRh\nQHVzZXJzLm5vcmVwbHkuZ2l0aHViLmNvbQAKCRDHIty2oZHuq6yQEACdzPUJ7rUu\nalcmzFsX8IDyyPGGiRRTDNqzkE0eau34YV3uTPY9hfHBDBSLoZVUCoKx4SuDEodl\nyGO/kc2+dP8xu7ro70sLpk6/3aUHqzjZMGXm+1v+2fVoZ6xirqwdPQ4c7sNb1m9Z\nNJTuuLjEpXPpyrGwc5l7C9u5S7IE/OFnAGQiATF//dIybjOo5hGtlNaZNic8vfQX\nEqnNd0x9YpmPY8j8NrAiXwqI+4O6MGD4L+gFVpQTGbX/Wb1ciBwlPLnqvR4s1t1p\nmnzL3lGxRqJ9k3TtYdCTNpaB0kS160qcqTQSOZvHg/hElpT//UGvuwFhwevdufnk\n1UbBGwmbCtJtgsBNcosdh5FSdvgOliQ3jDKqCaDvp+vujlJLZf5QDpUNrlg+evf+\nHr5+vgze4o5UGFe3b/MBorFLta5M/igXJ/UJ2T3eUrKWeju86uDG9i4zQ5ypzNCn\nkkiFJdt6CtQ2tcVcXw+oufVWmaiafGf2C8wOudbyTuVdcrkJnqc2drmXTwkFhksu\n4uFq7uN8oY/3fXm9Jy8r1sg0etZNiF27J5CEee05HutQ6DGo5GIbFZ9Dp9zgyAHF\nHhCR3pCVcl6rTGGrbBP5p7mvEhGuyNimladQO7rH+w835r8rvE6Y9gVgPQqIHrU/\nBzP/25E8SS58XujzqBwjsQoz9VIDVrZXKw==\n=vgz6\n-----END PGP SIGNATURE-----", "payload": "tree 58ae54b85a186b534f2cd4045b22829ab30a48ed\nparent a416c5e0f7c4c9473069a58410d3ec3e86b1ac0d\nauthor daxpedda <daxpedda@users.noreply.github.com> 1544971322 +0100\ncommitter daxpedda <daxpedda@users.noreply.github.com> 1544971322 +0100\n\nFix `implicit_return` false positives.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35058287ce7cadd20eebf3fc77a34ca59c8a5eac", "html_url": "https://github.com/rust-lang/rust/commit/35058287ce7cadd20eebf3fc77a34ca59c8a5eac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35058287ce7cadd20eebf3fc77a34ca59c8a5eac/comments", "author": {"login": "daxpedda", "id": 1645124, "node_id": "MDQ6VXNlcjE2NDUxMjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1645124?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daxpedda", "html_url": "https://github.com/daxpedda", "followers_url": "https://api.github.com/users/daxpedda/followers", "following_url": "https://api.github.com/users/daxpedda/following{/other_user}", "gists_url": "https://api.github.com/users/daxpedda/gists{/gist_id}", "starred_url": "https://api.github.com/users/daxpedda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daxpedda/subscriptions", "organizations_url": "https://api.github.com/users/daxpedda/orgs", "repos_url": "https://api.github.com/users/daxpedda/repos", "events_url": "https://api.github.com/users/daxpedda/events{/privacy}", "received_events_url": "https://api.github.com/users/daxpedda/received_events", "type": "User", "site_admin": false}, "committer": {"login": "daxpedda", "id": 1645124, "node_id": "MDQ6VXNlcjE2NDUxMjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1645124?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daxpedda", "html_url": "https://github.com/daxpedda", "followers_url": "https://api.github.com/users/daxpedda/followers", "following_url": "https://api.github.com/users/daxpedda/following{/other_user}", "gists_url": "https://api.github.com/users/daxpedda/gists{/gist_id}", "starred_url": "https://api.github.com/users/daxpedda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daxpedda/subscriptions", "organizations_url": "https://api.github.com/users/daxpedda/orgs", "repos_url": "https://api.github.com/users/daxpedda/repos", "events_url": "https://api.github.com/users/daxpedda/events{/privacy}", "received_events_url": "https://api.github.com/users/daxpedda/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a416c5e0f7c4c9473069a58410d3ec3e86b1ac0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a416c5e0f7c4c9473069a58410d3ec3e86b1ac0d", "html_url": "https://github.com/rust-lang/rust/commit/a416c5e0f7c4c9473069a58410d3ec3e86b1ac0d"}], "stats": {"total": 87, "additions": 61, "deletions": 26}, "files": [{"sha": "96022db56aa26ed933342eb701db26064e583165", "filename": "clippy_lints/src/implicit_return.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/35058287ce7cadd20eebf3fc77a34ca59c8a5eac/clippy_lints%2Fsrc%2Fimplicit_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35058287ce7cadd20eebf3fc77a34ca59c8a5eac/clippy_lints%2Fsrc%2Fimplicit_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_return.rs?ref=35058287ce7cadd20eebf3fc77a34ca59c8a5eac", "patch": "@@ -45,6 +45,19 @@ declare_clippy_lint! {\n pub struct Pass;\n \n impl Pass {\n+    fn lint(cx: &LateContext<'_, '_>, outer_span: syntax_pos::Span, inner_span: syntax_pos::Span, msg: &str) {\n+        span_lint_and_then(cx, IMPLICIT_RETURN, outer_span, \"missing return statement\", |db| {\n+            if let Some(snippet) = snippet_opt(cx, inner_span) {\n+                db.span_suggestion_with_applicability(\n+                    outer_span,\n+                    msg,\n+                    format!(\"return {}\", snippet),\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+        });\n+    }\n+\n     fn expr_match(cx: &LateContext<'_, '_>, expr: &rustc::hir::Expr) {\n         match &expr.node {\n             // loops could be using `break` instead of `return`\n@@ -55,23 +68,19 @@ impl Pass {\n                 // only needed in the case of `break` with `;` at the end\n                 else if let Some(stmt) = block.stmts.last() {\n                     if let rustc::hir::StmtKind::Semi(expr, ..) = &stmt.node {\n-                        Self::expr_match(cx, expr);\n+                        // make sure it's a break, otherwise we want to skip\n+                        if let ExprKind::Break(.., break_expr) = &expr.node {\n+                            if let Some(break_expr) = break_expr {\n+                                Self::lint(cx, expr.span, break_expr.span, \"change `break` to `return` as shown\");\n+                            }\n+                        }\n                     }\n                 }\n             },\n             // use `return` instead of `break`\n             ExprKind::Break(.., break_expr) => {\n                 if let Some(break_expr) = break_expr {\n-                    span_lint_and_then(cx, IMPLICIT_RETURN, expr.span, \"missing return statement\", |db| {\n-                        if let Some(snippet) = snippet_opt(cx, break_expr.span) {\n-                            db.span_suggestion_with_applicability(\n-                                expr.span,\n-                                \"change `break` to `return` as shown\",\n-                                format!(\"return {}\", snippet),\n-                                Applicability::MachineApplicable,\n-                            );\n-                        }\n-                    });\n+                    Self::lint(cx, expr.span, break_expr.span, \"change `break` to `return` as shown\");\n                 }\n             },\n             ExprKind::If(.., if_expr, else_expr) => {\n@@ -89,16 +98,7 @@ impl Pass {\n             // skip if it already has a return statement\n             ExprKind::Ret(..) => (),\n             // everything else is missing `return`\n-            _ => span_lint_and_then(cx, IMPLICIT_RETURN, expr.span, \"missing return statement\", |db| {\n-                if let Some(snippet) = snippet_opt(cx, expr.span) {\n-                    db.span_suggestion_with_applicability(\n-                        expr.span,\n-                        \"add `return` as shown\",\n-                        format!(\"return {}\", snippet),\n-                        Applicability::MachineApplicable,\n-                    );\n-                }\n-            }),\n+            _ => Self::lint(cx, expr.span, expr.span, \"add `return` as shown\"),\n         }\n     }\n }"}, {"sha": "61cb35e1209a40a153a3c8e5f92108a74cdcc7c8", "filename": "tests/ui/implicit_return.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/35058287ce7cadd20eebf3fc77a34ca59c8a5eac/tests%2Fui%2Fimplicit_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35058287ce7cadd20eebf3fc77a34ca59c8a5eac/tests%2Fui%2Fimplicit_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_return.rs?ref=35058287ce7cadd20eebf3fc77a34ca59c8a5eac", "patch": "@@ -42,6 +42,27 @@ fn test_loop() -> bool {\n     }\n }\n \n+#[allow(clippy::never_loop)]\n+fn test_loop_with_block() -> bool {\n+    loop {\n+        {\n+            break true;\n+        }\n+    }\n+}\n+\n+#[allow(clippy::never_loop)]\n+fn test_loop_with_nests() -> bool {\n+    loop {\n+        if true {\n+            let _ = true;\n+        }\n+        else {\n+            break true;\n+        }\n+    }\n+}\n+\n fn test_closure() {\n     #[rustfmt::skip]\n     let _ = || { true };\n@@ -53,5 +74,7 @@ fn main() {\n     let _ = test_if_block();\n     let _ = test_match(true);\n     let _ = test_loop();\n+    let _ = test_loop_with_block();\n+    let _ = test_loop_with_nests();\n     test_closure();\n }"}, {"sha": "6d0761554cd25224abc8e1a9aef180c4efbacecb", "filename": "tests/ui/implicit_return.stderr", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/35058287ce7cadd20eebf3fc77a34ca59c8a5eac/tests%2Fui%2Fimplicit_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35058287ce7cadd20eebf3fc77a34ca59c8a5eac/tests%2Fui%2Fimplicit_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_return.stderr?ref=35058287ce7cadd20eebf3fc77a34ca59c8a5eac", "patch": "@@ -37,16 +37,28 @@ error: missing return statement\n    |         ^^^^^^^^^^ help: change `break` to `return` as shown: `return true`\n \n error: missing return statement\n-  --> $DIR/implicit_return.rs:47:18\n+  --> $DIR/implicit_return.rs:49:13\n    |\n-47 |     let _ = || { true };\n+49 |             break true;\n+   |             ^^^^^^^^^^ help: change `break` to `return` as shown: `return true`\n+\n+error: missing return statement\n+  --> $DIR/implicit_return.rs:61:13\n+   |\n+61 |             break true;\n+   |             ^^^^^^^^^^ help: change `break` to `return` as shown: `return true`\n+\n+error: missing return statement\n+  --> $DIR/implicit_return.rs:68:18\n+   |\n+68 |     let _ = || { true };\n    |                  ^^^^ help: add `return` as shown: `return true`\n \n error: missing return statement\n-  --> $DIR/implicit_return.rs:48:16\n+  --> $DIR/implicit_return.rs:69:16\n    |\n-48 |     let _ = || true;\n+69 |     let _ = || true;\n    |                ^^^^ help: add `return` as shown: `return true`\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 10 previous errors\n "}]}