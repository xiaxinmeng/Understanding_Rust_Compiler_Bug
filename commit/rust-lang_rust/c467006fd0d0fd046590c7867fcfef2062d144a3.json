{"sha": "c467006fd0d0fd046590c7867fcfef2062d144a3", "node_id": "C_kwDOAAsO6NoAKGM0NjcwMDZmZDBkMGZkMDQ2NTkwYzc4NjdmY2ZlZjIwNjJkMTQ0YTM", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-11-08T10:45:41Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-11-11T01:51:00Z"}, "message": "suggest removing unnecessary . to use a floating point literal", "tree": {"sha": "247e6a0592cc9ae6e439e4125acec46e67b8ebf3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/247e6a0592cc9ae6e439e4125acec46e67b8ebf3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c467006fd0d0fd046590c7867fcfef2062d144a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c467006fd0d0fd046590c7867fcfef2062d144a3", "html_url": "https://github.com/rust-lang/rust/commit/c467006fd0d0fd046590c7867fcfef2062d144a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c467006fd0d0fd046590c7867fcfef2062d144a3/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1a859b25a95999ba276075bbd8e284ea675b41a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1a859b25a95999ba276075bbd8e284ea675b41a", "html_url": "https://github.com/rust-lang/rust/commit/c1a859b25a95999ba276075bbd8e284ea675b41a"}], "stats": {"total": 82, "additions": 81, "deletions": 1}, "files": [{"sha": "be618eb664c3f951d042078ff73f551c51ad2d65", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c467006fd0d0fd046590c7867fcfef2062d144a3/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c467006fd0d0fd046590c7867fcfef2062d144a3/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=c467006fd0d0fd046590c7867fcfef2062d144a3", "patch": "@@ -43,7 +43,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             || self.suggest_block_to_brackets_peeling_refs(err, expr, expr_ty, expected)\n             || self.suggest_copied_or_cloned(err, expr, expr_ty, expected)\n             || self.suggest_into(err, expr, expr_ty, expected)\n-            || self.suggest_option_to_bool(err, expr, expr_ty, expected);\n+            || self.suggest_option_to_bool(err, expr, expr_ty, expected)\n+            || self.suggest_floating_point_literal(err, expr, expected);\n \n         self.note_type_is_not_clone(err, expected, expr_ty, expr);\n         self.note_need_for_fn_pointer(err, expected, expr_ty);"}, {"sha": "fb8669e949cdf202278e5c943903245cab2711b3", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c467006fd0d0fd046590c7867fcfef2062d144a3/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c467006fd0d0fd046590c7867fcfef2062d144a3/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=c467006fd0d0fd046590c7867fcfef2062d144a3", "patch": "@@ -1204,6 +1204,27 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n+    #[instrument(skip(self, err))]\n+    pub(crate) fn suggest_floating_point_literal(\n+        &self,\n+        err: &mut Diagnostic,\n+        expr: &hir::Expr<'_>,\n+        expected_ty: Ty<'tcx>,\n+    ) -> bool {\n+        if let ExprKind::Struct(QPath::LangItem(LangItem::Range, ..), [start, _], _) = expr.kind\n+            && expected_ty.is_floating_point()\n+        {\n+            err.span_suggestion_verbose(\n+                self.tcx.sess.source_map().next_point(start.span),\n+                \"remove the unnecessary `.` operator to to use a floating point literal\",\n+                \"\",\n+                Applicability::MachineApplicable,\n+            );\n+            return true;\n+        }\n+        false\n+    }\n+\n     fn is_loop(&self, id: hir::HirId) -> bool {\n         let node = self.tcx.hir().get(id);\n         matches!(node, Node::Expr(Expr { kind: ExprKind::Loop(..), .. }))"}, {"sha": "b1eda63d56e279c3e5e1b20878bc68d8ce568b25", "filename": "src/test/ui/suggestions/unnecessary_dot_for_floating_point_literal.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c467006fd0d0fd046590c7867fcfef2062d144a3/src%2Ftest%2Fui%2Fsuggestions%2Funnecessary_dot_for_floating_point_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c467006fd0d0fd046590c7867fcfef2062d144a3/src%2Ftest%2Fui%2Fsuggestions%2Funnecessary_dot_for_floating_point_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Funnecessary_dot_for_floating_point_literal.rs?ref=c467006fd0d0fd046590c7867fcfef2062d144a3", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    let _: f64 = 0..10; //~ ERROR mismatched types\n+    let _: f64 = 0..; //~ ERROR mismatched types\n+    let _: f64 = ..10; //~ ERROR mismatched types\n+    let _: f64 = std::ops::Range { start: 0, end: 1 }; //~ ERROR mismatched types\n+}"}, {"sha": "2f1d7dc230f4df3f7229a458f7322d6676c5d6c4", "filename": "src/test/ui/suggestions/unnecessary_dot_for_floating_point_literal.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/c467006fd0d0fd046590c7867fcfef2062d144a3/src%2Ftest%2Fui%2Fsuggestions%2Funnecessary_dot_for_floating_point_literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c467006fd0d0fd046590c7867fcfef2062d144a3/src%2Ftest%2Fui%2Fsuggestions%2Funnecessary_dot_for_floating_point_literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Funnecessary_dot_for_floating_point_literal.stderr?ref=c467006fd0d0fd046590c7867fcfef2062d144a3", "patch": "@@ -0,0 +1,52 @@\n+error[E0308]: mismatched types\n+  --> $DIR/unnecessary_dot_for_floating_point_literal.rs:2:18\n+   |\n+LL |     let _: f64 = 0..10;\n+   |            ---   ^^^^^ expected `f64`, found struct `std::ops::Range`\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: expected type `f64`\n+            found struct `std::ops::Range<{integer}>`\n+help: remove the unnecessary `.` operator to to use a floating point literal\n+   |\n+LL -     let _: f64 = 0..10;\n+LL +     let _: f64 = 0.10;\n+   |\n+\n+error[E0308]: mismatched types\n+  --> $DIR/unnecessary_dot_for_floating_point_literal.rs:3:18\n+   |\n+LL |     let _: f64 = 0..;\n+   |            ---   ^^^ expected `f64`, found struct `RangeFrom`\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: expected type `f64`\n+            found struct `RangeFrom<{integer}>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/unnecessary_dot_for_floating_point_literal.rs:4:18\n+   |\n+LL |     let _: f64 = ..10;\n+   |            ---   ^^^^ expected `f64`, found struct `RangeTo`\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: expected type `f64`\n+            found struct `RangeTo<{integer}>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/unnecessary_dot_for_floating_point_literal.rs:5:18\n+   |\n+LL |     let _: f64 = std::ops::Range { start: 0, end: 1 };\n+   |            ---   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found struct `std::ops::Range`\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: expected type `f64`\n+            found struct `std::ops::Range<{integer}>`\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}