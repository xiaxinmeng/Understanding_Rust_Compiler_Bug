{"sha": "f65c6e416c6f401c332149da8f8ad1d7b8a218a7", "node_id": "C_kwDOAAsO6NoAKGY2NWM2ZTQxNmM2ZjQwMWMzMzIxNDlkYThmOGFkMWQ3YjhhMjE4YTc", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-02-16T16:51:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-16T16:51:24Z"}, "message": "Rollup merge of #106347 - estebank:removal-suggestion, r=TaKO8Ki\n\nMore accurate spans for arg removal suggestion\n\nPartially address #106304.", "tree": {"sha": "2df99e5c84a8c16679f63e9c428e1d8de916e5e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2df99e5c84a8c16679f63e9c428e1d8de916e5e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f65c6e416c6f401c332149da8f8ad1d7b8a218a7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj7l8MCRBK7hj4Ov3rIwAAJXcIABtN2Ywf1Hu5J0Tba1wAkvSO\nprcgVO4B2cuWmxBIjOMPzwdtgOR6+rZUoSnWeGGlCB4KcX8wCVeIfg+IYfLrQsSv\ndQ9/xPxIGPocX/h368Sy7i7MepkXL1ImLr8WzoWBAbkkkjl7o8DUplcRqReX4bjN\nM3s9pOmx1gJ4gqQsuDwQHg2U+1ZOZmd9S701C2edhIWbxdV6/yLp+oCCgUA4oe4X\nw49xLVepIE50enjt/UdPQXU6sCz9VMhPRg2y5IDREwJGT+SaT7W7fmuaH96qJpXG\n62kgQEoXcVVGiJSGt5O7e9UBL9YXosfaf3R9Psz0U2UV9F2983wYJD4KP+K1xzk=\n=O4Z2\n-----END PGP SIGNATURE-----\n", "payload": "tree 2df99e5c84a8c16679f63e9c428e1d8de916e5e1\nparent af3c8b27266e290cf65704284f6862d0f90ee4fc\nparent dff10d0668a1e89782fb660e033d6a57ab122266\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1676566284 +0100\ncommitter GitHub <noreply@github.com> 1676566284 +0100\n\nRollup merge of #106347 - estebank:removal-suggestion, r=TaKO8Ki\n\nMore accurate spans for arg removal suggestion\n\nPartially address #106304.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f65c6e416c6f401c332149da8f8ad1d7b8a218a7", "html_url": "https://github.com/rust-lang/rust/commit/f65c6e416c6f401c332149da8f8ad1d7b8a218a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f65c6e416c6f401c332149da8f8ad1d7b8a218a7/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af3c8b27266e290cf65704284f6862d0f90ee4fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/af3c8b27266e290cf65704284f6862d0f90ee4fc", "html_url": "https://github.com/rust-lang/rust/commit/af3c8b27266e290cf65704284f6862d0f90ee4fc"}, {"sha": "dff10d0668a1e89782fb660e033d6a57ab122266", "url": "https://api.github.com/repos/rust-lang/rust/commits/dff10d0668a1e89782fb660e033d6a57ab122266", "html_url": "https://github.com/rust-lang/rust/commit/dff10d0668a1e89782fb660e033d6a57ab122266"}], "stats": {"total": 518, "additions": 286, "deletions": 232}, "files": [{"sha": "211bbf4f50e68ee18a35b23f0dd031359c438ec3", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f65c6e416c6f401c332149da8f8ad1d7b8a218a7/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f65c6e416c6f401c332149da8f8ad1d7b8a218a7/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=f65c6e416c6f401c332149da8f8ad1d7b8a218a7", "patch": "@@ -1768,7 +1768,7 @@ impl EmitterWriter {\n \n         // Render the replacements for each suggestion\n         let suggestions = suggestion.splice_lines(sm);\n-        debug!(\"emit_suggestion_default: suggestions={:?}\", suggestions);\n+        debug!(?suggestions);\n \n         if suggestions.is_empty() {\n             // Suggestions coming from macros can have malformed spans. This is a heavy handed\n@@ -1797,6 +1797,7 @@ impl EmitterWriter {\n         for (complete, parts, highlights, only_capitalization) in\n             suggestions.iter().take(MAX_SUGGESTIONS)\n         {\n+            debug!(?complete, ?parts, ?highlights);\n             notice_capitalization |= only_capitalization;\n \n             let has_deletion = parts.iter().any(|p| p.is_deletion(sm));"}, {"sha": "63b170a3c63b1d5abc12cafa12855a345d3d7e5f", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 96, "deletions": 25, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/f65c6e416c6f401c332149da8f8ad1d7b8a218a7/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f65c6e416c6f401c332149da8f8ad1d7b8a218a7/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=f65c6e416c6f401c332149da8f8ad1d7b8a218a7", "patch": "@@ -755,15 +755,20 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n \n         errors.drain_filter(|error| {\n-                let Error::Invalid(provided_idx, expected_idx, Compatibility::Incompatible(Some(e))) = error else { return false };\n-                let (provided_ty, provided_span) = provided_arg_tys[*provided_idx];\n-                let trace = mk_trace(provided_span, formal_and_expected_inputs[*expected_idx], provided_ty);\n-                if !matches!(trace.cause.as_failure_code(*e), FailureCode::Error0308(_)) {\n-                    self.err_ctxt().report_and_explain_type_error(trace, *e).emit();\n-                    return true;\n-                }\n-                false\n-            });\n+            let Error::Invalid(\n+                provided_idx,\n+                expected_idx,\n+                Compatibility::Incompatible(Some(e)),\n+            ) = error else { return false };\n+            let (provided_ty, provided_span) = provided_arg_tys[*provided_idx];\n+            let trace =\n+                mk_trace(provided_span, formal_and_expected_inputs[*expected_idx], provided_ty);\n+            if !matches!(trace.cause.as_failure_code(*e), FailureCode::Error0308(_)) {\n+                self.err_ctxt().report_and_explain_type_error(trace, *e).emit();\n+                return true;\n+            }\n+            false\n+        });\n \n         // We're done if we found errors, but we already emitted them.\n         if errors.is_empty() {\n@@ -864,7 +869,27 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n         let mut suggestion_text = SuggestionText::None;\n \n+        let ty_to_snippet = |ty: Ty<'tcx>, expected_idx: ExpectedIdx| {\n+            if ty.is_unit() {\n+                \"()\".to_string()\n+            } else if ty.is_suggestable(tcx, false) {\n+                format!(\"/* {} */\", ty)\n+            } else if let Some(fn_def_id) = fn_def_id\n+                && self.tcx.def_kind(fn_def_id).is_fn_like()\n+                && let self_implicit =\n+                    matches!(call_expr.kind, hir::ExprKind::MethodCall(..)) as usize\n+                && let Some(arg) = self.tcx.fn_arg_names(fn_def_id)\n+                    .get(expected_idx.as_usize() + self_implicit)\n+                && arg.name != kw::SelfLower\n+            {\n+                format!(\"/* {} */\", arg.name)\n+            } else {\n+                \"/* value */\".to_string()\n+            }\n+        };\n+\n         let mut errors = errors.into_iter().peekable();\n+        let mut suggestions = vec![];\n         while let Some(error) = errors.next() {\n             match error {\n                 Error::Invalid(provided_idx, expected_idx, compatibility) => {\n@@ -905,7 +930,22 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         \"\".to_string()\n                     };\n                     labels\n-                        .push((provided_span, format!(\"argument{} unexpected\", provided_ty_name)));\n+                        .push((provided_span, format!(\"unexpected argument{}\", provided_ty_name)));\n+                    let mut span = provided_span;\n+                    if arg_idx.index() > 0\n+                        && let Some((_, prev)) = provided_arg_tys\n+                            .get(ProvidedIdx::from_usize(arg_idx.index() - 1)\n+                    ) {\n+                        // Include previous comma\n+                        span = span.with_lo(prev.hi());\n+                    } else if let Some((_, next)) = provided_arg_tys.get(\n+                        ProvidedIdx::from_usize(arg_idx.index() + 1),\n+                    ) {\n+                        // Include next comma\n+                        span = span.until(*next);\n+                    }\n+                    suggestions.push((span, String::new()));\n+\n                     suggestion_text = match suggestion_text {\n                         SuggestionText::None => SuggestionText::Remove(false),\n                         SuggestionText::Remove(_) => SuggestionText::Remove(true),\n@@ -1095,6 +1135,45 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n         }\n \n+        // Incorporate the argument changes in the removal suggestion.\n+        // When a type is *missing*, and the rest are additional, we want to suggest these with a\n+        // multipart suggestion, but in order to do so we need to figure out *where* the arg that\n+        // was provided but had the wrong type should go, because when looking at `expected_idx`\n+        // that is the position in the argument list in the definition, while `provided_idx` will\n+        // not be present. So we have to look at what the *last* provided position was, and point\n+        // one after to suggest the replacement. FIXME(estebank): This is hacky, and there's\n+        // probably a better more involved change we can make to make this work.\n+        // For example, if we have\n+        // ```\n+        // fn foo(i32, &'static str) {}\n+        // foo((), (), ());\n+        // ```\n+        // what should be suggested is\n+        // ```\n+        // foo(/* i32 */, /* &str */);\n+        // ```\n+        // which includes the replacement of the first two `()` for the correct type, and the\n+        // removal of the last `()`.\n+        let mut prev = -1;\n+        for (expected_idx, provided_idx) in matched_inputs.iter_enumerated() {\n+            // We want to point not at the *current* argument expression index, but rather at the\n+            // index position where it *should have been*, which is *after* the previous one.\n+            if let Some(provided_idx) = provided_idx {\n+                prev = provided_idx.index() as i64;\n+            }\n+            let idx = ProvidedIdx::from_usize((prev + 1) as usize);\n+            if let None = provided_idx\n+                && let Some((_, arg_span)) = provided_arg_tys.get(idx)\n+            {\n+                // There is a type that was *not* found anywhere, so it isn't a move, but a\n+                // replacement and we look at what type it should have been. This will allow us\n+                // To suggest a multipart suggestion when encountering `foo(1, \"\")` where the def\n+                // was `fn foo(())`.\n+                let (_, expected_ty) = formal_and_expected_inputs[expected_idx];\n+                suggestions.push((*arg_span, ty_to_snippet(expected_ty, expected_idx)));\n+            }\n+        }\n+\n         // If we have less than 5 things to say, it would be useful to call out exactly what's wrong\n         if labels.len() <= 5 {\n             for (span, label) in labels {\n@@ -1112,7 +1191,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 Some(format!(\"provide the argument{}\", if plural { \"s\" } else { \"\" }))\n             }\n             SuggestionText::Remove(plural) => {\n-                Some(format!(\"remove the extra argument{}\", if plural { \"s\" } else { \"\" }))\n+                err.multipart_suggestion(\n+                    &format!(\"remove the extra argument{}\", if plural { \"s\" } else { \"\" }),\n+                    suggestions,\n+                    Applicability::HasPlaceholders,\n+                );\n+                None\n             }\n             SuggestionText::Swap => Some(\"swap these arguments\".to_string()),\n             SuggestionText::Reorder => Some(\"reorder these arguments\".to_string()),\n@@ -1151,20 +1235,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 } else {\n                     // Propose a placeholder of the correct type\n                     let (_, expected_ty) = formal_and_expected_inputs[expected_idx];\n-                    if expected_ty.is_unit() {\n-                        \"()\".to_string()\n-                    } else if expected_ty.is_suggestable(tcx, false) {\n-                        format!(\"/* {} */\", expected_ty)\n-                    } else if let Some(fn_def_id) = fn_def_id\n-                        && self.tcx.def_kind(fn_def_id).is_fn_like()\n-                        && let self_implicit = matches!(call_expr.kind, hir::ExprKind::MethodCall(..)) as usize\n-                        && let Some(arg) = self.tcx.fn_arg_names(fn_def_id).get(expected_idx.as_usize() + self_implicit)\n-                        && arg.name != kw::SelfLower\n-                    {\n-                        format!(\"/* {} */\", arg.name)\n-                    } else {\n-                        \"/* value */\".to_string()\n-                    }\n+                    ty_to_snippet(expected_ty, expected_idx)\n                 };\n                 suggestion += &suggestion_text;\n             }"}, {"sha": "d1b9d7a40b47b7cb245812660d498ff4d187f8a4", "filename": "tests/ui/alloc-error/alloc-error-handler-bad-signature-3.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f65c6e416c6f401c332149da8f8ad1d7b8a218a7/tests%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f65c6e416c6f401c332149da8f8ad1d7b8a218a7/tests%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-3.stderr?ref=f65c6e416c6f401c332149da8f8ad1d7b8a218a7", "patch": "@@ -7,18 +7,17 @@ LL |   fn oom() -> ! {\n    |  _-^^^^^^^^^^^^\n LL | |     loop {}\n LL | | }\n-   | |_- argument of type `core::alloc::Layout` unexpected\n+   | | -\n+   | | |\n+   | |_unexpected argument of type `core::alloc::Layout`\n+   |   help: remove the extra argument\n    |\n note: function defined here\n   --> $DIR/alloc-error-handler-bad-signature-3.rs:10:4\n    |\n LL | fn oom() -> ! {\n    |    ^^^\n    = note: this error originates in the attribute macro `alloc_error_handler` (in Nightly builds, run with -Z macro-backtrace for more info)\n-help: remove the extra argument\n-   |\n-LL | fn oom() -> !() {\n-   |              ++\n \n error: aborting due to previous error\n "}, {"sha": "c74186285f9f08560355849adce977f599333491", "filename": "tests/ui/argument-suggestions/basic.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f65c6e416c6f401c332149da8f8ad1d7b8a218a7/tests%2Fui%2Fargument-suggestions%2Fbasic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f65c6e416c6f401c332149da8f8ad1d7b8a218a7/tests%2Fui%2Fargument-suggestions%2Fbasic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fargument-suggestions%2Fbasic.stderr?ref=f65c6e416c6f401c332149da8f8ad1d7b8a218a7", "patch": "@@ -16,17 +16,16 @@ error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> $DIR/basic.rs:21:5\n    |\n LL |     extra(\"\");\n-   |     ^^^^^ -- argument of type `&'static str` unexpected\n+   |     ^^^^^ --\n+   |           |\n+   |           unexpected argument of type `&'static str`\n+   |           help: remove the extra argument\n    |\n note: function defined here\n   --> $DIR/basic.rs:14:4\n    |\n LL | fn extra() {}\n    |    ^^^^^\n-help: remove the extra argument\n-   |\n-LL |     extra();\n-   |          ~~\n \n error[E0061]: this function takes 1 argument but 0 arguments were supplied\n   --> $DIR/basic.rs:22:5"}, {"sha": "ff795b507f218db0eb7e2c0387852f7ec517f6f1", "filename": "tests/ui/argument-suggestions/exotic-calls.stderr", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f65c6e416c6f401c332149da8f8ad1d7b8a218a7/tests%2Fui%2Fargument-suggestions%2Fexotic-calls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f65c6e416c6f401c332149da8f8ad1d7b8a218a7/tests%2Fui%2Fargument-suggestions%2Fexotic-calls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fargument-suggestions%2Fexotic-calls.stderr?ref=f65c6e416c6f401c332149da8f8ad1d7b8a218a7", "patch": "@@ -2,65 +2,61 @@ error[E0057]: this function takes 0 arguments but 1 argument was supplied\n   --> $DIR/exotic-calls.rs:2:5\n    |\n LL |     t(1i32);\n-   |     ^ ---- argument of type `i32` unexpected\n+   |     ^ ----\n+   |       |\n+   |       unexpected argument of type `i32`\n+   |       help: remove the extra argument\n    |\n note: callable defined here\n   --> $DIR/exotic-calls.rs:1:11\n    |\n LL | fn foo<T: Fn()>(t: T) {\n    |           ^^^^\n-help: remove the extra argument\n-   |\n-LL |     t();\n-   |      ~~\n \n error[E0057]: this function takes 0 arguments but 1 argument was supplied\n   --> $DIR/exotic-calls.rs:7:5\n    |\n LL |     t(1i32);\n-   |     ^ ---- argument of type `i32` unexpected\n+   |     ^ ----\n+   |       |\n+   |       unexpected argument of type `i32`\n+   |       help: remove the extra argument\n    |\n note: type parameter defined here\n   --> $DIR/exotic-calls.rs:6:11\n    |\n LL | fn bar(t: impl Fn()) {\n    |           ^^^^^^^^^\n-help: remove the extra argument\n-   |\n-LL |     t();\n-   |      ~~\n \n error[E0057]: this function takes 0 arguments but 1 argument was supplied\n   --> $DIR/exotic-calls.rs:16:5\n    |\n LL |     baz()(1i32)\n-   |     ^^^^^ ---- argument of type `i32` unexpected\n+   |     ^^^^^ ----\n+   |           |\n+   |           unexpected argument of type `i32`\n+   |           help: remove the extra argument\n    |\n note: opaque type defined here\n   --> $DIR/exotic-calls.rs:11:13\n    |\n LL | fn baz() -> impl Fn() {\n    |             ^^^^^^^^^\n-help: remove the extra argument\n-   |\n-LL |     baz()()\n-   |          ~~\n \n error[E0057]: this function takes 0 arguments but 1 argument was supplied\n   --> $DIR/exotic-calls.rs:22:5\n    |\n LL |     x(1i32);\n-   |     ^ ---- argument of type `i32` unexpected\n+   |     ^ ----\n+   |       |\n+   |       unexpected argument of type `i32`\n+   |       help: remove the extra argument\n    |\n note: closure defined here\n   --> $DIR/exotic-calls.rs:21:13\n    |\n LL |     let x = || {};\n    |             ^^\n-help: remove the extra argument\n-   |\n-LL |     x();\n-   |      ~~\n \n error: aborting due to 4 previous errors\n "}, {"sha": "0911685b4280a3e2dd65f497182b7f7ecd7e3e21", "filename": "tests/ui/argument-suggestions/extra_arguments.stderr", "status": "modified", "additions": 70, "deletions": 75, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/f65c6e416c6f401c332149da8f8ad1d7b8a218a7/tests%2Fui%2Fargument-suggestions%2Fextra_arguments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f65c6e416c6f401c332149da8f8ad1d7b8a218a7/tests%2Fui%2Fargument-suggestions%2Fextra_arguments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fargument-suggestions%2Fextra_arguments.stderr?ref=f65c6e416c6f401c332149da8f8ad1d7b8a218a7", "patch": "@@ -2,57 +2,54 @@ error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> $DIR/extra_arguments.rs:7:3\n    |\n LL |   empty(\"\");\n-   |   ^^^^^ -- argument of type `&'static str` unexpected\n+   |   ^^^^^ --\n+   |         |\n+   |         unexpected argument of type `&'static str`\n+   |         help: remove the extra argument\n    |\n note: function defined here\n   --> $DIR/extra_arguments.rs:1:4\n    |\n LL | fn empty() {}\n    |    ^^^^^\n-help: remove the extra argument\n-   |\n-LL |   empty();\n-   |        ~~\n \n error[E0061]: this function takes 1 argument but 2 arguments were supplied\n   --> $DIR/extra_arguments.rs:9:3\n    |\n LL |   one_arg(1, 1);\n-   |   ^^^^^^^    - argument of type `{integer}` unexpected\n+   |   ^^^^^^^  ---\n+   |            | |\n+   |            | unexpected argument of type `{integer}`\n+   |            help: remove the extra argument\n    |\n note: function defined here\n   --> $DIR/extra_arguments.rs:2:4\n    |\n LL | fn one_arg(_a: i32) {}\n    |    ^^^^^^^ -------\n-help: remove the extra argument\n-   |\n-LL |   one_arg(1);\n-   |          ~~~\n \n error[E0061]: this function takes 1 argument but 2 arguments were supplied\n   --> $DIR/extra_arguments.rs:10:3\n    |\n LL |   one_arg(1, \"\");\n-   |   ^^^^^^^    -- argument of type `&'static str` unexpected\n+   |   ^^^^^^^  ----\n+   |            | |\n+   |            | unexpected argument of type `&'static str`\n+   |            help: remove the extra argument\n    |\n note: function defined here\n   --> $DIR/extra_arguments.rs:2:4\n    |\n LL | fn one_arg(_a: i32) {}\n    |    ^^^^^^^ -------\n-help: remove the extra argument\n-   |\n-LL |   one_arg(1);\n-   |          ~~~\n \n error[E0061]: this function takes 1 argument but 3 arguments were supplied\n   --> $DIR/extra_arguments.rs:11:3\n    |\n LL |   one_arg(1, \"\", 1.0);\n-   |   ^^^^^^^    --  --- argument of type `{float}` unexpected\n+   |   ^^^^^^^    --  --- unexpected argument of type `{float}`\n    |              |\n-   |              argument of type `&'static str` unexpected\n+   |              unexpected argument of type `&'static str`\n    |\n note: function defined here\n   --> $DIR/extra_arguments.rs:2:4\n@@ -61,80 +58,77 @@ LL | fn one_arg(_a: i32) {}\n    |    ^^^^^^^ -------\n help: remove the extra arguments\n    |\n-LL |   one_arg(1);\n-   |          ~~~\n+LL -   one_arg(1, \"\", 1.0);\n+LL +   one_arg(1);\n+   |\n \n error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n   --> $DIR/extra_arguments.rs:13:3\n    |\n LL |   two_arg_same(1, 1, 1);\n-   |   ^^^^^^^^^^^^       - argument of type `{integer}` unexpected\n+   |   ^^^^^^^^^^^^     ---\n+   |                    | |\n+   |                    | unexpected argument of type `{integer}`\n+   |                    help: remove the extra argument\n    |\n note: function defined here\n   --> $DIR/extra_arguments.rs:3:4\n    |\n LL | fn two_arg_same(_a: i32, _b: i32) {}\n    |    ^^^^^^^^^^^^ -------  -------\n-help: remove the extra argument\n-   |\n-LL |   two_arg_same(1, 1);\n-   |               ~~~~~~\n \n error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n   --> $DIR/extra_arguments.rs:14:3\n    |\n LL |   two_arg_same(1, 1, 1.0);\n-   |   ^^^^^^^^^^^^       --- argument of type `{float}` unexpected\n+   |   ^^^^^^^^^^^^     -----\n+   |                    | |\n+   |                    | unexpected argument of type `{float}`\n+   |                    help: remove the extra argument\n    |\n note: function defined here\n   --> $DIR/extra_arguments.rs:3:4\n    |\n LL | fn two_arg_same(_a: i32, _b: i32) {}\n    |    ^^^^^^^^^^^^ -------  -------\n-help: remove the extra argument\n-   |\n-LL |   two_arg_same(1, 1);\n-   |               ~~~~~~\n \n error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n   --> $DIR/extra_arguments.rs:16:3\n    |\n LL |   two_arg_diff(1, 1, \"\");\n-   |   ^^^^^^^^^^^^    - argument of type `{integer}` unexpected\n+   |   ^^^^^^^^^^^^  ---\n+   |                 | |\n+   |                 | unexpected argument of type `{integer}`\n+   |                 help: remove the extra argument\n    |\n note: function defined here\n   --> $DIR/extra_arguments.rs:4:4\n    |\n LL | fn two_arg_diff(_a: i32, _b: &str) {}\n    |    ^^^^^^^^^^^^ -------  --------\n-help: remove the extra argument\n-   |\n-LL |   two_arg_diff(1, \"\");\n-   |               ~~~~~~~\n \n error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n   --> $DIR/extra_arguments.rs:17:3\n    |\n LL |   two_arg_diff(1, \"\", \"\");\n-   |   ^^^^^^^^^^^^        -- argument of type `&'static str` unexpected\n+   |   ^^^^^^^^^^^^      ----\n+   |                     | |\n+   |                     | unexpected argument of type `&'static str`\n+   |                     help: remove the extra argument\n    |\n note: function defined here\n   --> $DIR/extra_arguments.rs:4:4\n    |\n LL | fn two_arg_diff(_a: i32, _b: &str) {}\n    |    ^^^^^^^^^^^^ -------  --------\n-help: remove the extra argument\n-   |\n-LL |   two_arg_diff(1, \"\");\n-   |               ~~~~~~~\n \n error[E0061]: this function takes 2 arguments but 4 arguments were supplied\n   --> $DIR/extra_arguments.rs:18:3\n    |\n LL |   two_arg_diff(1, 1, \"\", \"\");\n-   |   ^^^^^^^^^^^^    -      -- argument of type `&'static str` unexpected\n+   |   ^^^^^^^^^^^^    -      -- unexpected argument of type `&'static str`\n    |                   |\n-   |                   argument of type `{integer}` unexpected\n+   |                   unexpected argument of type `{integer}`\n    |\n note: function defined here\n   --> $DIR/extra_arguments.rs:4:4\n@@ -143,16 +137,17 @@ LL | fn two_arg_diff(_a: i32, _b: &str) {}\n    |    ^^^^^^^^^^^^ -------  --------\n help: remove the extra arguments\n    |\n-LL |   two_arg_diff(1, \"\");\n-   |               ~~~~~~~\n+LL -   two_arg_diff(1, 1, \"\", \"\");\n+LL +   two_arg_diff(1, \"\");\n+   |\n \n error[E0061]: this function takes 2 arguments but 4 arguments were supplied\n   --> $DIR/extra_arguments.rs:19:3\n    |\n LL |   two_arg_diff(1, \"\", 1, \"\");\n-   |   ^^^^^^^^^^^^        -  -- argument of type `&'static str` unexpected\n+   |   ^^^^^^^^^^^^        -  -- unexpected argument of type `&'static str`\n    |                       |\n-   |                       argument of type `{integer}` unexpected\n+   |                       unexpected argument of type `{integer}`\n    |\n note: function defined here\n   --> $DIR/extra_arguments.rs:4:4\n@@ -161,78 +156,78 @@ LL | fn two_arg_diff(_a: i32, _b: &str) {}\n    |    ^^^^^^^^^^^^ -------  --------\n help: remove the extra arguments\n    |\n-LL |   two_arg_diff(1, \"\");\n-   |               ~~~~~~~\n+LL -   two_arg_diff(1, \"\", 1, \"\");\n+LL +   two_arg_diff(1, \"\");\n+   |\n \n error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n   --> $DIR/extra_arguments.rs:22:3\n    |\n LL |   two_arg_same(1, 1,     \"\");\n-   |   ^^^^^^^^^^^^           -- argument of type `&'static str` unexpected\n+   |   ^^^^^^^^^^^^     --------\n+   |                    |     |\n+   |                    |     unexpected argument of type `&'static str`\n+   |                    help: remove the extra argument\n    |\n note: function defined here\n   --> $DIR/extra_arguments.rs:3:4\n    |\n LL | fn two_arg_same(_a: i32, _b: i32) {}\n    |    ^^^^^^^^^^^^ -------  -------\n-help: remove the extra argument\n-   |\n-LL |   two_arg_same(1, 1);\n-   |               ~~~~~~\n \n error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n   --> $DIR/extra_arguments.rs:23:3\n    |\n LL |   two_arg_diff(1, 1,     \"\");\n-   |   ^^^^^^^^^^^^    - argument of type `{integer}` unexpected\n+   |   ^^^^^^^^^^^^  ---\n+   |                 | |\n+   |                 | unexpected argument of type `{integer}`\n+   |                 help: remove the extra argument\n    |\n note: function defined here\n   --> $DIR/extra_arguments.rs:4:4\n    |\n LL | fn two_arg_diff(_a: i32, _b: &str) {}\n    |    ^^^^^^^^^^^^ -------  --------\n-help: remove the extra argument\n-   |\n-LL |   two_arg_diff(1, \"\");\n-   |               ~~~~~~~\n \n error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n   --> $DIR/extra_arguments.rs:24:3\n    |\n-LL |   two_arg_same(\n-   |   ^^^^^^^^^^^^\n-...\n-LL |     \"\"\n-   |     -- argument of type `&'static str` unexpected\n+LL |     two_arg_same(\n+   |     ^^^^^^^^^^^^\n+LL |       1,\n+LL |       1,\n+   |  ______-\n+LL | |     \"\"\n+   | |     --\n+   | |_____||\n+   |       |help: remove the extra argument\n+   |       unexpected argument of type `&'static str`\n    |\n note: function defined here\n   --> $DIR/extra_arguments.rs:3:4\n    |\n LL | fn two_arg_same(_a: i32, _b: i32) {}\n    |    ^^^^^^^^^^^^ -------  -------\n-help: remove the extra argument\n-   |\n-LL |   two_arg_same(1, 1);\n-   |               ~~~~~~\n \n error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n   --> $DIR/extra_arguments.rs:30:3\n    |\n-LL |   two_arg_diff(\n-   |   ^^^^^^^^^^^^\n-LL |     1,\n-LL |     1,\n-   |     - argument of type `{integer}` unexpected\n+LL |     two_arg_diff(\n+   |     ^^^^^^^^^^^^\n+LL |       1,\n+   |  ______-\n+LL | |     1,\n+   | |     -\n+   | |     |\n+   | |_____unexpected argument of type `{integer}`\n+   |       help: remove the extra argument\n    |\n note: function defined here\n   --> $DIR/extra_arguments.rs:4:4\n    |\n LL | fn two_arg_diff(_a: i32, _b: &str) {}\n    |    ^^^^^^^^^^^^ -------  --------\n-help: remove the extra argument\n-   |\n-LL |   two_arg_diff(1, \"\");\n-   |               ~~~~~~~\n \n error: aborting due to 14 previous errors\n "}, {"sha": "061f510144bda630423bbecc95277adef416d6a2", "filename": "tests/ui/argument-suggestions/issue-101097.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f65c6e416c6f401c332149da8f8ad1d7b8a218a7/tests%2Fui%2Fargument-suggestions%2Fissue-101097.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f65c6e416c6f401c332149da8f8ad1d7b8a218a7/tests%2Fui%2Fargument-suggestions%2Fissue-101097.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fargument-suggestions%2Fissue-101097.stderr?ref=f65c6e416c6f401c332149da8f8ad1d7b8a218a7", "patch": "@@ -4,7 +4,7 @@ error[E0061]: this function takes 6 arguments but 7 arguments were supplied\n LL |     f(C, A, A, A, B, B, C);\n    |     ^ -     -  -  - expected `C`, found `B`\n    |       |     |  |\n-   |       |     |  argument of type `A` unexpected\n+   |       |     |  unexpected argument of type `A`\n    |       |     expected `B`, found `A`\n    |       expected `A`, found `C`\n    |\n@@ -64,8 +64,8 @@ error[E0308]: arguments to this function are incorrect\n LL |     f(A, A, D, D, B, B);\n    |     ^       -  -  ---- two arguments of type `C` and `C` are missing\n    |             |  |\n-   |             |  argument of type `D` unexpected\n-   |             argument of type `D` unexpected\n+   |             |  unexpected argument of type `D`\n+   |             unexpected argument of type `D`\n    |\n note: function defined here\n   --> $DIR/issue-101097.rs:6:4"}, {"sha": "a86cbbf1802e17d66cea042c9255441bb338962e", "filename": "tests/ui/argument-suggestions/issue-97484.stderr", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f65c6e416c6f401c332149da8f8ad1d7b8a218a7/tests%2Fui%2Fargument-suggestions%2Fissue-97484.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f65c6e416c6f401c332149da8f8ad1d7b8a218a7/tests%2Fui%2Fargument-suggestions%2Fissue-97484.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fargument-suggestions%2Fissue-97484.stderr?ref=f65c6e416c6f401c332149da8f8ad1d7b8a218a7", "patch": "@@ -2,11 +2,11 @@ error[E0061]: this function takes 4 arguments but 7 arguments were supplied\n   --> $DIR/issue-97484.rs:12:5\n    |\n LL |     foo(&&A, B, C, D, E, F, G);\n-   |     ^^^      -  -     -  - argument of type `F` unexpected\n+   |     ^^^      -  -     -  - unexpected argument of type `F`\n    |              |  |     |\n    |              |  |     expected `&E`, found `E`\n-   |              |  argument of type `C` unexpected\n-   |              argument of type `B` unexpected\n+   |              |  unexpected argument of type `C`\n+   |              unexpected argument of type `B`\n    |\n note: function defined here\n   --> $DIR/issue-97484.rs:9:4\n@@ -19,8 +19,9 @@ LL |     foo(&&A, B, C, D, &E, F, G);\n    |                       ~~\n help: remove the extra arguments\n    |\n-LL |     foo(&&A, D, /* &E */, G);\n-   |        ~~~~~~~~~~~~~~~~~~~~~\n+LL -     foo(&&A, B, C, D, E, F, G);\n+LL +     foo(&&A, D, /* &E */, G);\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "c645dd381792953442bc300a50b0bd440aa07780", "filename": "tests/ui/argument-suggestions/mixed_cases.stderr", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f65c6e416c6f401c332149da8f8ad1d7b8a218a7/tests%2Fui%2Fargument-suggestions%2Fmixed_cases.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f65c6e416c6f401c332149da8f8ad1d7b8a218a7/tests%2Fui%2Fargument-suggestions%2Fmixed_cases.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fargument-suggestions%2Fmixed_cases.stderr?ref=f65c6e416c6f401c332149da8f8ad1d7b8a218a7", "patch": "@@ -2,7 +2,7 @@ error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n   --> $DIR/mixed_cases.rs:10:3\n    |\n LL |   two_args(1, \"\", X {});\n-   |   ^^^^^^^^    --  ---- argument of type `X` unexpected\n+   |   ^^^^^^^^    --  ---- unexpected argument of type `X`\n    |               |\n    |               expected `f32`, found `&str`\n    |\n@@ -13,16 +13,17 @@ LL | fn two_args(_a: i32, _b: f32) {}\n    |    ^^^^^^^^ -------  -------\n help: remove the extra argument\n    |\n-LL |   two_args(1, /* f32 */);\n-   |           ~~~~~~~~~~~~~~\n+LL -   two_args(1, \"\", X {});\n+LL +   two_args(1, /* f32 */);\n+   |\n \n error[E0061]: this function takes 3 arguments but 4 arguments were supplied\n   --> $DIR/mixed_cases.rs:11:3\n    |\n LL |   three_args(1, \"\", X {}, \"\");\n-   |   ^^^^^^^^^^    --  ----  -- argument of type `&'static str` unexpected\n+   |   ^^^^^^^^^^    --  ----  -- unexpected argument of type `&'static str`\n    |                 |   |\n-   |                 |   argument of type `X` unexpected\n+   |                 |   unexpected argument of type `X`\n    |                 an argument of type `f32` is missing\n    |\n note: function defined here\n@@ -58,7 +59,7 @@ error[E0308]: arguments to this function are incorrect\n   --> $DIR/mixed_cases.rs:17:3\n    |\n LL |   three_args(1, \"\", X {});\n-   |   ^^^^^^^^^^    --  ---- argument of type `X` unexpected\n+   |   ^^^^^^^^^^    --  ---- unexpected argument of type `X`\n    |                 |\n    |                 an argument of type `f32` is missing\n    |"}, {"sha": "9b0cf069824a6155691a9e29dff53cae8cab205c", "filename": "tests/ui/error-codes/E0057.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f65c6e416c6f401c332149da8f8ad1d7b8a218a7/tests%2Fui%2Ferror-codes%2FE0057.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f65c6e416c6f401c332149da8f8ad1d7b8a218a7/tests%2Fui%2Ferror-codes%2FE0057.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0057.stderr?ref=f65c6e416c6f401c332149da8f8ad1d7b8a218a7", "patch": "@@ -18,17 +18,16 @@ error[E0057]: this function takes 1 argument but 2 arguments were supplied\n   --> $DIR/E0057.rs:5:13\n    |\n LL |     let c = f(2, 3);\n-   |             ^    - argument of type `{integer}` unexpected\n+   |             ^  ---\n+   |                | |\n+   |                | unexpected argument of type `{integer}`\n+   |                help: remove the extra argument\n    |\n note: closure defined here\n   --> $DIR/E0057.rs:2:13\n    |\n LL |     let f = |x| x * 3;\n    |             ^^^\n-help: remove the extra argument\n-   |\n-LL |     let c = f(2);\n-   |              ~~~\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6db29bc61b12aa716d19e2060a9371963d9d96b4", "filename": "tests/ui/issues/issue-16939.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f65c6e416c6f401c332149da8f8ad1d7b8a218a7/tests%2Fui%2Fissues%2Fissue-16939.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f65c6e416c6f401c332149da8f8ad1d7b8a218a7/tests%2Fui%2Fissues%2Fissue-16939.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-16939.stderr?ref=f65c6e416c6f401c332149da8f8ad1d7b8a218a7", "patch": "@@ -2,17 +2,16 @@ error[E0057]: this function takes 0 arguments but 1 argument was supplied\n   --> $DIR/issue-16939.rs:5:9\n    |\n LL |     |t| f(t);\n-   |         ^ - argument unexpected\n+   |         ^ -\n+   |           |\n+   |           unexpected argument\n+   |           help: remove the extra argument\n    |\n note: callable defined here\n   --> $DIR/issue-16939.rs:4:12\n    |\n LL | fn _foo<F: Fn()> (f: F) {\n    |            ^^^^\n-help: remove the extra argument\n-   |\n-LL |     |t| f();\n-   |          ~~\n \n error: aborting due to previous error\n "}, {"sha": "abf3543ddb9f8c85f4d2def2baaf3865229960f5", "filename": "tests/ui/issues/issue-26094.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f65c6e416c6f401c332149da8f8ad1d7b8a218a7/tests%2Fui%2Fissues%2Fissue-26094.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f65c6e416c6f401c332149da8f8ad1d7b8a218a7/tests%2Fui%2Fissues%2Fissue-26094.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-26094.rs?ref=f65c6e416c6f401c332149da8f8ad1d7b8a218a7", "patch": "@@ -1,6 +1,6 @@\n macro_rules! some_macro {\n     ($other: expr) => ({\n-        $other(None) //~ NOTE argument of type `Option<_>` unexpected\n+        $other(None) //~ NOTE unexpected argument of type `Option<_>`\n     })\n }\n "}, {"sha": "608d2c7aff93f59ac2722183559f3864ec5aa667", "filename": "tests/ui/issues/issue-26094.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f65c6e416c6f401c332149da8f8ad1d7b8a218a7/tests%2Fui%2Fissues%2Fissue-26094.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f65c6e416c6f401c332149da8f8ad1d7b8a218a7/tests%2Fui%2Fissues%2Fissue-26094.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-26094.stderr?ref=f65c6e416c6f401c332149da8f8ad1d7b8a218a7", "patch": "@@ -2,7 +2,10 @@ error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> $DIR/issue-26094.rs:10:17\n    |\n LL |         $other(None)\n-   |                ---- argument of type `Option<_>` unexpected\n+   |                ----\n+   |                |\n+   |                unexpected argument of type `Option<_>`\n+   |                help: remove the extra argument\n ...\n LL |     some_macro!(some_function);\n    |                 ^^^^^^^^^^^^^\n@@ -12,10 +15,6 @@ note: function defined here\n    |\n LL | fn some_function() {}\n    |    ^^^^^^^^^^^^^\n-help: remove the extra argument\n-   |\n-LL |         some_function()\n-   |         ~~~~~~~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "e544e4244034df0cd69c4bc407ae3d0e9c6a4b90", "filename": "tests/ui/issues/issue-4935.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f65c6e416c6f401c332149da8f8ad1d7b8a218a7/tests%2Fui%2Fissues%2Fissue-4935.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f65c6e416c6f401c332149da8f8ad1d7b8a218a7/tests%2Fui%2Fissues%2Fissue-4935.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-4935.stderr?ref=f65c6e416c6f401c332149da8f8ad1d7b8a218a7", "patch": "@@ -2,17 +2,16 @@ error[E0061]: this function takes 1 argument but 2 arguments were supplied\n   --> $DIR/issue-4935.rs:5:13\n    |\n LL | fn main() { foo(5, 6) }\n-   |             ^^^    - argument of type `{integer}` unexpected\n+   |             ^^^  ---\n+   |                  | |\n+   |                  | unexpected argument of type `{integer}`\n+   |                  help: remove the extra argument\n    |\n note: function defined here\n   --> $DIR/issue-4935.rs:3:4\n    |\n LL | fn foo(a: usize) {}\n    |    ^^^ --------\n-help: remove the extra argument\n-   |\n-LL | fn main() { foo(5) }\n-   |                ~~~\n \n error: aborting due to previous error\n "}, {"sha": "0f37e8f09a964153b9d4972eea114c40dbee3ac0", "filename": "tests/ui/methods/method-call-err-msg.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f65c6e416c6f401c332149da8f8ad1d7b8a218a7/tests%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f65c6e416c6f401c332149da8f8ad1d7b8a218a7/tests%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr?ref=f65c6e416c6f401c332149da8f8ad1d7b8a218a7", "patch": "@@ -2,17 +2,16 @@ error[E0061]: this method takes 0 arguments but 1 argument was supplied\n   --> $DIR/method-call-err-msg.rs:13:7\n    |\n LL |     x.zero(0)\n-   |       ^^^^ - argument of type `{integer}` unexpected\n+   |       ^^^^ -\n+   |            |\n+   |            unexpected argument of type `{integer}`\n+   |            help: remove the extra argument\n    |\n note: associated function defined here\n   --> $DIR/method-call-err-msg.rs:5:8\n    |\n LL |     fn zero(self) -> Foo { self }\n    |        ^^^^\n-help: remove the extra argument\n-   |\n-LL |     x.zero()\n-   |           ~~\n \n error[E0061]: this method takes 1 argument but 0 arguments were supplied\n   --> $DIR/method-call-err-msg.rs:14:7"}, {"sha": "cd483e7ad2c6470984b1df1c5600b004fb5e2256", "filename": "tests/ui/mismatched_types/overloaded-calls-bad.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f65c6e416c6f401c332149da8f8ad1d7b8a218a7/tests%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f65c6e416c6f401c332149da8f8ad1d7b8a218a7/tests%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.stderr?ref=f65c6e416c6f401c332149da8f8ad1d7b8a218a7", "patch": "@@ -32,7 +32,7 @@ error[E0057]: this function takes 1 argument but 2 arguments were supplied\n   --> $DIR/overloaded-calls-bad.rs:37:15\n    |\n LL |     let ans = s(\"burma\", \"shave\");\n-   |               ^ -------  ------- argument of type `&'static str` unexpected\n+   |               ^ -------  ------- unexpected argument of type `&'static str`\n    |                 |\n    |                 expected `isize`, found `&str`\n    |\n@@ -43,8 +43,9 @@ LL | impl FnMut<(isize,)> for S {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: remove the extra argument\n    |\n-LL |     let ans = s(/* isize */);\n-   |                ~~~~~~~~~~~~~\n+LL -     let ans = s(\"burma\", \"shave\");\n+LL +     let ans = s(/* isize */);\n+   |\n \n error[E0308]: mismatched types\n   --> $DIR/overloaded-calls-bad.rs:40:7"}, {"sha": "f803f9da2af1a5f08cb68455d13c223f72fd68b2", "filename": "tests/ui/resolve/resolve-primitive-fallback.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f65c6e416c6f401c332149da8f8ad1d7b8a218a7/tests%2Fui%2Fresolve%2Fresolve-primitive-fallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f65c6e416c6f401c332149da8f8ad1d7b8a218a7/tests%2Fui%2Fresolve%2Fresolve-primitive-fallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fresolve-primitive-fallback.stderr?ref=f65c6e416c6f401c332149da8f8ad1d7b8a218a7", "patch": "@@ -24,14 +24,13 @@ error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> $DIR/resolve-primitive-fallback.rs:3:5\n    |\n LL |     std::mem::size_of(u16);\n-   |     ^^^^^^^^^^^^^^^^^ --- argument unexpected\n+   |     ^^^^^^^^^^^^^^^^^ ---\n+   |                       |\n+   |                       unexpected argument\n+   |                       help: remove the extra argument\n    |\n note: function defined here\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n-help: remove the extra argument\n-   |\n-LL |     std::mem::size_of();\n-   |                      ~~\n \n error: aborting due to 3 previous errors\n "}, {"sha": "f0dea66f6128d77c94f59359198e6f873a04eaed", "filename": "tests/ui/span/issue-34264.stderr", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f65c6e416c6f401c332149da8f8ad1d7b8a218a7/tests%2Fui%2Fspan%2Fissue-34264.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f65c6e416c6f401c332149da8f8ad1d7b8a218a7/tests%2Fui%2Fspan%2Fissue-34264.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fissue-34264.stderr?ref=f65c6e416c6f401c332149da8f8ad1d7b8a218a7", "patch": "@@ -54,17 +54,16 @@ error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n   --> $DIR/issue-34264.rs:7:5\n    |\n LL |     foo(Some(42), 2, \"\");\n-   |     ^^^              -- argument of type `&'static str` unexpected\n+   |     ^^^            ----\n+   |                    | |\n+   |                    | unexpected argument of type `&'static str`\n+   |                    help: remove the extra argument\n    |\n note: function defined here\n   --> $DIR/issue-34264.rs:1:4\n    |\n LL | fn foo(Option<i32>, String) {}\n    |    ^^^ -----------  ------\n-help: remove the extra argument\n-   |\n-LL |     foo(Some(42), 2);\n-   |        ~~~~~~~~~~~~~\n \n error[E0308]: mismatched types\n   --> $DIR/issue-34264.rs:8:13\n@@ -84,17 +83,16 @@ error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n   --> $DIR/issue-34264.rs:10:5\n    |\n LL |     bar(1, 2, 3);\n-   |     ^^^       - argument of type `{integer}` unexpected\n+   |     ^^^     ---\n+   |             | |\n+   |             | unexpected argument of type `{integer}`\n+   |             help: remove the extra argument\n    |\n note: function defined here\n   --> $DIR/issue-34264.rs:3:4\n    |\n LL | fn bar(x, y: usize) {}\n    |    ^^^ -  --------\n-help: remove the extra argument\n-   |\n-LL |     bar(1, 2);\n-   |        ~~~~~~\n \n error: aborting due to 6 previous errors\n "}, {"sha": "510b99bb5af73f5d3295519fbaccfd431e36ebb7", "filename": "tests/ui/suggestions/args-instead-of-tuple-errors.stderr", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f65c6e416c6f401c332149da8f8ad1d7b8a218a7/tests%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f65c6e416c6f401c332149da8f8ad1d7b8a218a7/tests%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.stderr?ref=f65c6e416c6f401c332149da8f8ad1d7b8a218a7", "patch": "@@ -2,7 +2,7 @@ error[E0061]: this enum variant takes 1 argument but 2 arguments were supplied\n   --> $DIR/args-instead-of-tuple-errors.rs:6:34\n    |\n LL |     let _: Option<(i32, bool)> = Some(1, 2);\n-   |                                  ^^^^    - argument of type `{integer}` unexpected\n+   |                                  ^^^^    - unexpected argument of type `{integer}`\n    |\n note: expected `(i32, bool)`, found integer\n   --> $DIR/args-instead-of-tuple-errors.rs:6:39\n@@ -22,14 +22,15 @@ note: tuple variant defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n help: remove the extra argument\n    |\n-LL |     let _: Option<(i32, bool)> = Some(/* (i32, bool) */);\n-   |                                      ~~~~~~~~~~~~~~~~~~~\n+LL -     let _: Option<(i32, bool)> = Some(1, 2);\n+LL +     let _: Option<(i32, bool)> = Some(/* (i32, bool) */);\n+   |\n \n error[E0061]: this function takes 1 argument but 2 arguments were supplied\n   --> $DIR/args-instead-of-tuple-errors.rs:8:5\n    |\n LL |     int_bool(1, 2);\n-   |     ^^^^^^^^    - argument of type `{integer}` unexpected\n+   |     ^^^^^^^^    - unexpected argument of type `{integer}`\n    |\n note: expected `(i32, bool)`, found integer\n   --> $DIR/args-instead-of-tuple-errors.rs:8:14\n@@ -45,8 +46,9 @@ LL | fn int_bool(_: (i32, bool)) {\n    |    ^^^^^^^^ --------------\n help: remove the extra argument\n    |\n-LL |     int_bool(/* (i32, bool) */);\n-   |             ~~~~~~~~~~~~~~~~~~~\n+LL -     int_bool(1, 2);\n+LL +     int_bool(/* (i32, bool) */);\n+   |\n \n error[E0061]: this enum variant takes 1 argument but 0 arguments were supplied\n   --> $DIR/args-instead-of-tuple-errors.rs:11:28"}, {"sha": "7143c959478b47d4df505125c071a3f797c7a00d", "filename": "tests/ui/tuple/wrong_argument_ice-3.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f65c6e416c6f401c332149da8f8ad1d7b8a218a7/tests%2Fui%2Ftuple%2Fwrong_argument_ice-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f65c6e416c6f401c332149da8f8ad1d7b8a218a7/tests%2Fui%2Ftuple%2Fwrong_argument_ice-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftuple%2Fwrong_argument_ice-3.stderr?ref=f65c6e416c6f401c332149da8f8ad1d7b8a218a7", "patch": "@@ -2,7 +2,7 @@ error[E0061]: this method takes 1 argument but 2 arguments were supplied\n   --> $DIR/wrong_argument_ice-3.rs:9:16\n    |\n LL |         groups.push(new_group, vec![process]);\n-   |                ^^^^            ------------- argument of type `Vec<&Process>` unexpected\n+   |                ^^^^            ------------- unexpected argument of type `Vec<&Process>`\n    |\n note: expected `(Vec<String>, Vec<Process>)`, found `Vec<String>`\n   --> $DIR/wrong_argument_ice-3.rs:9:21\n@@ -15,8 +15,9 @@ note: associated function defined here\n   --> $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n help: remove the extra argument\n    |\n-LL |         groups.push(/* (Vec<String>, Vec<Process>) */);\n-   |                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+LL -         groups.push(new_group, vec![process]);\n+LL +         groups.push(/* (Vec<String>, Vec<Process>) */);\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "d8569ebf6b6e29fa38f163a50a24d9c31250717c", "filename": "tests/ui/tuple/wrong_argument_ice-4.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f65c6e416c6f401c332149da8f8ad1d7b8a218a7/tests%2Fui%2Ftuple%2Fwrong_argument_ice-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f65c6e416c6f401c332149da8f8ad1d7b8a218a7/tests%2Fui%2Ftuple%2Fwrong_argument_ice-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftuple%2Fwrong_argument_ice-4.stderr?ref=f65c6e416c6f401c332149da8f8ad1d7b8a218a7", "patch": "@@ -6,17 +6,16 @@ LL |       (|| {})(|| {\n LL | |\n LL | |         let b = 1;\n LL | |     });\n-   | |_____- argument of type `[closure@$DIR/wrong_argument_ice-4.rs:2:13: 2:15]` unexpected\n+   | |     -\n+   | |     |\n+   | |_____unexpected argument of type `[closure@$DIR/wrong_argument_ice-4.rs:2:13: 2:15]`\n+   |       help: remove the extra argument\n    |\n note: closure defined here\n   --> $DIR/wrong_argument_ice-4.rs:2:6\n    |\n LL |     (|| {})(|| {\n    |      ^^\n-help: remove the extra argument\n-   |\n-LL |     (|| {})();\n-   |            ~~\n \n error: aborting due to previous error\n "}, {"sha": "429501c2762fc61ba27a017d5b32a81ad1ecde27", "filename": "tests/ui/type/type-ascription-instead-of-initializer.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f65c6e416c6f401c332149da8f8ad1d7b8a218a7/tests%2Fui%2Ftype%2Ftype-ascription-instead-of-initializer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f65c6e416c6f401c332149da8f8ad1d7b8a218a7/tests%2Fui%2Ftype%2Ftype-ascription-instead-of-initializer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype%2Ftype-ascription-instead-of-initializer.stderr?ref=f65c6e416c6f401c332149da8f8ad1d7b8a218a7", "patch": "@@ -11,14 +11,13 @@ error[E0061]: this function takes 1 argument but 2 arguments were supplied\n   --> $DIR/type-ascription-instead-of-initializer.rs:2:12\n    |\n LL |     let x: Vec::with_capacity(10, 20);\n-   |            ^^^^^^^^^^^^^^^^^^     -- argument of type `{integer}` unexpected\n+   |            ^^^^^^^^^^^^^^^^^^   ----\n+   |                                 | |\n+   |                                 | unexpected argument of type `{integer}`\n+   |                                 help: remove the extra argument\n    |\n note: associated function defined here\n   --> $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-help: remove the extra argument\n-   |\n-LL |     let x: Vec::with_capacity(10);\n-   |                              ~~~~\n \n error: aborting due to 2 previous errors\n "}, {"sha": "72ddebab486ce07820a0a9f3d388612d17adefb0", "filename": "tests/ui/typeck/remove-extra-argument.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f65c6e416c6f401c332149da8f8ad1d7b8a218a7/tests%2Fui%2Ftypeck%2Fremove-extra-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f65c6e416c6f401c332149da8f8ad1d7b8a218a7/tests%2Fui%2Ftypeck%2Fremove-extra-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fremove-extra-argument.stderr?ref=f65c6e416c6f401c332149da8f8ad1d7b8a218a7", "patch": "@@ -2,17 +2,16 @@ error[E0061]: this function takes 1 argument but 2 arguments were supplied\n   --> $DIR/remove-extra-argument.rs:6:5\n    |\n LL |     l(vec![], vec![])\n-   |     ^         ------ argument of type `Vec<_>` unexpected\n+   |     ^       --------\n+   |             | |\n+   |             | unexpected argument of type `Vec<_>`\n+   |             help: remove the extra argument\n    |\n note: function defined here\n   --> $DIR/remove-extra-argument.rs:3:4\n    |\n LL | fn l(_a: Vec<u8>) {}\n    |    ^ -----------\n-help: remove the extra argument\n-   |\n-LL |     l(vec![])\n-   |      ~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "57cbd1d2005c3411905b9a28ce864db7f13c7ca7", "filename": "tests/ui/typeck/struct-enum-wrong-args.stderr", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f65c6e416c6f401c332149da8f8ad1d7b8a218a7/tests%2Fui%2Ftypeck%2Fstruct-enum-wrong-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f65c6e416c6f401c332149da8f8ad1d7b8a218a7/tests%2Fui%2Ftypeck%2Fstruct-enum-wrong-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fstruct-enum-wrong-args.stderr?ref=f65c6e416c6f401c332149da8f8ad1d7b8a218a7", "patch": "@@ -2,29 +2,29 @@ error[E0061]: this enum variant takes 1 argument but 2 arguments were supplied\n   --> $DIR/struct-enum-wrong-args.rs:6:13\n    |\n LL |     let _ = Some(3, 2);\n-   |             ^^^^    - argument of type `{integer}` unexpected\n+   |             ^^^^  ---\n+   |                   | |\n+   |                   | unexpected argument of type `{integer}`\n+   |                   help: remove the extra argument\n    |\n note: tuple variant defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n-help: remove the extra argument\n-   |\n-LL |     let _ = Some(3);\n-   |                 ~~~\n \n error[E0061]: this enum variant takes 1 argument but 3 arguments were supplied\n   --> $DIR/struct-enum-wrong-args.rs:7:13\n    |\n LL |     let _ = Ok(3, 6, 2);\n-   |             ^^    -  - argument of type `{integer}` unexpected\n+   |             ^^    -  - unexpected argument of type `{integer}`\n    |                   |\n-   |                   argument of type `{integer}` unexpected\n+   |                   unexpected argument of type `{integer}`\n    |\n note: tuple variant defined here\n   --> $SRC_DIR/core/src/result.rs:LL:COL\n help: remove the extra arguments\n    |\n-LL |     let _ = Ok(3);\n-   |               ~~~\n+LL -     let _ = Ok(3, 6, 2);\n+LL +     let _ = Ok(3);\n+   |\n \n error[E0061]: this enum variant takes 1 argument but 0 arguments were supplied\n   --> $DIR/struct-enum-wrong-args.rs:8:13\n@@ -59,17 +59,16 @@ error[E0061]: this struct takes 1 argument but 2 arguments were supplied\n   --> $DIR/struct-enum-wrong-args.rs:10:13\n    |\n LL |     let _ = Wrapper(5, 2);\n-   |             ^^^^^^^    - argument of type `{integer}` unexpected\n+   |             ^^^^^^^  ---\n+   |                      | |\n+   |                      | unexpected argument of type `{integer}`\n+   |                      help: remove the extra argument\n    |\n note: tuple struct defined here\n   --> $DIR/struct-enum-wrong-args.rs:2:8\n    |\n LL | struct Wrapper(i32);\n    |        ^^^^^^^\n-help: remove the extra argument\n-   |\n-LL |     let _ = Wrapper(5);\n-   |                    ~~~\n \n error[E0061]: this struct takes 2 arguments but 0 arguments were supplied\n   --> $DIR/struct-enum-wrong-args.rs:11:13\n@@ -107,17 +106,16 @@ error[E0061]: this struct takes 2 arguments but 3 arguments were supplied\n   --> $DIR/struct-enum-wrong-args.rs:13:13\n    |\n LL |     let _ = DoubleWrapper(5, 2, 7);\n-   |             ^^^^^^^^^^^^^       - argument of type `{integer}` unexpected\n+   |             ^^^^^^^^^^^^^     ---\n+   |                               | |\n+   |                               | unexpected argument of type `{integer}`\n+   |                               help: remove the extra argument\n    |\n note: tuple struct defined here\n   --> $DIR/struct-enum-wrong-args.rs:3:8\n    |\n LL | struct DoubleWrapper(i32, i32);\n    |        ^^^^^^^^^^^^^\n-help: remove the extra argument\n-   |\n-LL |     let _ = DoubleWrapper(5, 2);\n-   |                          ~~~~~~\n \n error: aborting due to 8 previous errors\n "}]}