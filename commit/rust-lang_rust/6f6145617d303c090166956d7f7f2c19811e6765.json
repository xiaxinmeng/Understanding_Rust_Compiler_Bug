{"sha": "6f6145617d303c090166956d7f7f2c19811e6765", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmNjE0NTYxN2QzMDNjMDkwMTY2OTU2ZDdmN2YyYzE5ODExZTY3NjU=", "commit": {"author": {"name": "R\u00e9my Rakic", "email": "remy.rakic+github@gmail.com", "date": "2021-05-24T14:16:56Z"}, "committer": {"name": "R\u00e9my Rakic", "email": "remy.rakic+github@gmail.com", "date": "2021-05-25T16:39:51Z"}, "message": "add test for issue 85155 and similar\n\nThis test reproduces post-monomorphization errors one can encounter\nwhen using incorrect immediate arguments to some of the stdarch\nintrinsics using const generics.", "tree": {"sha": "24c472823285aab7309d9ede2ed27232734c0bb2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24c472823285aab7309d9ede2ed27232734c0bb2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f6145617d303c090166956d7f7f2c19811e6765", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f6145617d303c090166956d7f7f2c19811e6765", "html_url": "https://github.com/rust-lang/rust/commit/6f6145617d303c090166956d7f7f2c19811e6765", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f6145617d303c090166956d7f7f2c19811e6765/comments", "author": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d14dd9f763c9d0126cb40fd816eb25b4a1b1e8c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/d14dd9f763c9d0126cb40fd816eb25b4a1b1e8c4", "html_url": "https://github.com/rust-lang/rust/commit/d14dd9f763c9d0126cb40fd816eb25b4a1b1e8c4"}], "stats": {"total": 56, "additions": 56, "deletions": 0}, "files": [{"sha": "bdeaa0cd3606281e3e6b32e0ed5aed838d2e7609", "filename": "src/test/ui/consts/const-eval/auxiliary/post_monomorphization_error.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6f6145617d303c090166956d7f7f2c19811e6765/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fauxiliary%2Fpost_monomorphization_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f6145617d303c090166956d7f7f2c19811e6765/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fauxiliary%2Fpost_monomorphization_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fauxiliary%2Fpost_monomorphization_error.rs?ref=6f6145617d303c090166956d7f7f2c19811e6765", "patch": "@@ -0,0 +1,20 @@\n+// Auxiliary crate used for testing post-monomorphization errors cross-crate.\n+// It duplicates the setup used in `stdarch` to validate its intrinsics' const arguments.\n+\n+struct ValidateConstImm<const IMM: i32, const MIN: i32, const MAX: i32>;\n+impl<const IMM: i32, const MIN: i32, const MAX: i32> ValidateConstImm<IMM, MIN, MAX> {\n+    pub(crate) const VALID: () = {\n+        let _ = 1 / ((IMM >= MIN && IMM <= MAX) as usize);\n+    };\n+}\n+\n+macro_rules! static_assert_imm1 {\n+    ($imm:ident) => {\n+        let _ = $crate::ValidateConstImm::<$imm, 0, { (1 << 1) - 1 }>::VALID;\n+    };\n+}\n+\n+// This function triggers an error whenever the const argument does not fit in 1-bit.\n+pub fn stdarch_intrinsic<const IMM1: i32>() {\n+    static_assert_imm1!(IMM1);\n+}"}, {"sha": "c3216d53d055406260e338b9e66d69fb4733c430", "filename": "src/test/ui/consts/const-eval/issue-85155.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6f6145617d303c090166956d7f7f2c19811e6765/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-85155.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f6145617d303c090166956d7f7f2c19811e6765/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-85155.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-85155.rs?ref=6f6145617d303c090166956d7f7f2c19811e6765", "patch": "@@ -0,0 +1,21 @@\n+// This is a test with a setup similar to issue 85155, which triggers a const eval error: a const\n+// argument value is outside the range expected by the `stdarch` intrinsic.\n+//\n+// It's not the exact code mentioned in that issue because it depends both on `stdarch` intrinsics\n+// only available on x64, and internal implementation details of `stdarch`. But mostly because these\n+// are not important to trigger the diagnostics issue: it's specifically about the lack of context\n+// in the diagnostics of post-monomorphization errors (PMEs) for consts, happening in a dependency.\n+// Therefore, its setup is reproduced with an aux crate, which will similarly trigger a PME\n+// depending on the const argument value, like the `stdarch` intrinsics would.\n+//\n+// aux-build: post_monomorphization_error.rs\n+// build-fail: this is a post-monomorphization error, it passes check runs and requires building\n+//             to actually fail.\n+\n+extern crate post_monomorphization_error;\n+\n+fn main() {\n+    // This function triggers a PME whenever the const argument does not fit in 1-bit.\n+    post_monomorphization_error::stdarch_intrinsic::<2>();\n+    //~^ NOTE the above error was encountered while instantiating\n+}"}, {"sha": "0a1edfb8a33568c7470f10290350f2418ac5216f", "filename": "src/test/ui/consts/const-eval/issue-85155.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6f6145617d303c090166956d7f7f2c19811e6765/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-85155.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f6145617d303c090166956d7f7f2c19811e6765/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-85155.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-85155.stderr?ref=6f6145617d303c090166956d7f7f2c19811e6765", "patch": "@@ -0,0 +1,15 @@\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/auxiliary/post_monomorphization_error.rs:7:17\n+   |\n+LL |         let _ = 1 / ((IMM >= MIN && IMM <= MAX) as usize);\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attempt to divide `1_usize` by zero\n+\n+note: the above error was encountered while instantiating `fn stdarch_intrinsic::<2_i32>`\n+  --> $DIR/issue-85155.rs:19:5\n+   |\n+LL |     post_monomorphization_error::stdarch_intrinsic::<2>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0080`."}]}