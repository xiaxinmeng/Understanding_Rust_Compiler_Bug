{"sha": "6ffe1d99d4edd907ffa37493e1758ab1cbaf0617", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmZmUxZDk5ZDRlZGQ5MDdmZmEzNzQ5M2UxNzU4YWIxY2JhZjA2MTc=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-02T16:16:59Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-02T16:16:59Z"}, "message": "Fix references to patterns in extract_struct_from_enum_variant assist", "tree": {"sha": "bc6f86da65544003287c87da4ddce315f7ee9b6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc6f86da65544003287c87da4ddce315f7ee9b6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ffe1d99d4edd907ffa37493e1758ab1cbaf0617", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ffe1d99d4edd907ffa37493e1758ab1cbaf0617", "html_url": "https://github.com/rust-lang/rust/commit/6ffe1d99d4edd907ffa37493e1758ab1cbaf0617", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ffe1d99d4edd907ffa37493e1758ab1cbaf0617/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ff7ab680c338e62679ad75eee0e1a357ce07fa8", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ff7ab680c338e62679ad75eee0e1a357ce07fa8", "html_url": "https://github.com/rust-lang/rust/commit/9ff7ab680c338e62679ad75eee0e1a357ce07fa8"}], "stats": {"total": 77, "additions": 51, "deletions": 26}, "files": [{"sha": "d3ff7b65cd00989b1f6a25e7d161bb149eee0b1d", "filename": "crates/ide_assists/src/handlers/extract_struct_from_enum_variant.rs", "status": "modified", "additions": 51, "deletions": 26, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/6ffe1d99d4edd907ffa37493e1758ab1cbaf0617/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ffe1d99d4edd907ffa37493e1758ab1cbaf0617/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs?ref=6ffe1d99d4edd907ffa37493e1758ab1cbaf0617", "patch": "@@ -14,16 +14,16 @@ use ide_db::{\n use itertools::Itertools;\n use rustc_hash::FxHashSet;\n use syntax::{\n-    algo::find_node_at_offset,\n     ast::{\n         self, make, AstNode, AttrsOwner, GenericParamsOwner, NameOwner, TypeBoundsOwner,\n         VisibilityOwner,\n     },\n+    match_ast,\n     ted::{self, Position},\n     SyntaxNode, T,\n };\n \n-use crate::{AssistContext, AssistId, AssistKind, Assists};\n+use crate::{assist_context::AssistBuilder, AssistContext, AssistId, AssistKind, Assists};\n \n // Assist: extract_struct_from_enum_variant\n //\n@@ -75,11 +75,10 @@ pub(crate) fn extract_struct_from_enum_variant(\n                     continue;\n                 }\n                 builder.edit_file(file_id);\n-                let source_file = builder.make_mut(ctx.sema.parse(file_id));\n                 let processed = process_references(\n                     ctx,\n+                    builder,\n                     &mut visited_modules_set,\n-                    source_file.syntax(),\n                     &enum_module_def,\n                     &variant_hir_name,\n                     references,\n@@ -89,13 +88,12 @@ pub(crate) fn extract_struct_from_enum_variant(\n                 });\n             }\n             builder.edit_file(ctx.frange.file_id);\n-            let source_file = builder.make_mut(ctx.sema.parse(ctx.frange.file_id));\n             let variant = builder.make_mut(variant.clone());\n             if let Some(references) = def_file_references {\n                 let processed = process_references(\n                     ctx,\n+                    builder,\n                     &mut visited_modules_set,\n-                    source_file.syntax(),\n                     &enum_module_def,\n                     &variant_hir_name,\n                     references,\n@@ -248,8 +246,8 @@ fn apply_references(\n \n fn process_references(\n     ctx: &AssistContext,\n+    builder: &mut AssistBuilder,\n     visited_modules: &mut FxHashSet<Module>,\n-    source_file: &SyntaxNode,\n     enum_module_def: &ModuleDef,\n     variant_hir_name: &Name,\n     refs: Vec<FileReference>,\n@@ -258,8 +256,9 @@ fn process_references(\n     // and corresponding nodes up front\n     refs.into_iter()\n         .flat_map(|reference| {\n-            let (segment, scope_node, module) =\n-                reference_to_node(&ctx.sema, source_file, reference)?;\n+            let (segment, scope_node, module) = reference_to_node(&ctx.sema, reference)?;\n+            let segment = builder.make_mut(segment);\n+            let scope_node = builder.make_syntax_mut(scope_node);\n             if !visited_modules.contains(&module) {\n                 let mod_path = module.find_use_path_prefixed(\n                     ctx.sema.db,\n@@ -281,23 +280,22 @@ fn process_references(\n \n fn reference_to_node(\n     sema: &hir::Semantics<RootDatabase>,\n-    source_file: &SyntaxNode,\n     reference: FileReference,\n ) -> Option<(ast::PathSegment, SyntaxNode, hir::Module)> {\n-    let offset = reference.range.start();\n-    if let Some(path_expr) = find_node_at_offset::<ast::PathExpr>(source_file, offset) {\n-        // tuple variant\n-        Some((path_expr.path()?.segment()?, path_expr.syntax().parent()?))\n-    } else if let Some(record_expr) = find_node_at_offset::<ast::RecordExpr>(source_file, offset) {\n-        // record variant\n-        Some((record_expr.path()?.segment()?, record_expr.syntax().clone()))\n-    } else {\n-        None\n-    }\n-    .and_then(|(segment, expr)| {\n-        let module = sema.scope(&expr).module()?;\n-        Some((segment, expr, module))\n-    })\n+    let segment =\n+        reference.name.as_name_ref()?.syntax().parent().and_then(ast::PathSegment::cast)?;\n+    let parent = segment.parent_path().syntax().parent()?;\n+    let expr_or_pat = match_ast! {\n+        match parent {\n+            ast::PathExpr(_it) => parent.parent()?,\n+            ast::RecordExpr(_it) => parent,\n+            ast::TupleStructPat(_it) => parent,\n+            ast::RecordPat(_it) => parent,\n+            _ => return None,\n+        }\n+    };\n+    let module = sema.scope(&expr_or_pat).module()?;\n+    Some((segment, expr_or_pat, module))\n }\n \n #[cfg(test)]\n@@ -558,7 +556,7 @@ enum E {\n }\n \n fn f() {\n-    let e = E::V { i: 9, j: 2 };\n+    let E::V { i, j } = E::V { i: 9, j: 2 };\n }\n \"#,\n             r#\"\n@@ -569,7 +567,34 @@ enum E {\n }\n \n fn f() {\n-    let e = E::V(V { i: 9, j: 2 });\n+    let E::V(V { i, j }) = E::V(V { i: 9, j: 2 });\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn extract_record_fix_references2() {\n+        check_assist(\n+            extract_struct_from_enum_variant,\n+            r#\"\n+enum E {\n+    $0V(i32, i32)\n+}\n+\n+fn f() {\n+    let E::V(i, j) = E::V(9, 2);\n+}\n+\"#,\n+            r#\"\n+struct V(pub i32, pub i32);\n+\n+enum E {\n+    V(V)\n+}\n+\n+fn f() {\n+    let E::V(V(i, j)) = E::V(V(9, 2));\n }\n \"#,\n         )"}]}