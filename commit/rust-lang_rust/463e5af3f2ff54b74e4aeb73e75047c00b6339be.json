{"sha": "463e5af3f2ff54b74e4aeb73e75047c00b6339be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2M2U1YWYzZjJmZjU0Yjc0ZTRhZWI3M2U3NTA0N2MwMGI2MzM5YmU=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-12-21T10:04:00Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-12-21T10:04:00Z"}, "message": "Merge #306\n\n306: Finish weird exprs r=DJMcNab a=DJMcNab\n\nFix #290.\r\n\r\nNote that I'm not certain my use of `p.nth(1) == Ident` is entirely consistent with `libsyntax` - in the original, [`is_union_item`](https://github.com/rust-lang/rust/blob/9622f9dc4745eb59fd229477f453ae83e8044db9/src/libsyntax/parse/parser.rs#L4593-L4596) uses `t.is_ident() && !t.is_reserved_ident()`, whereas we effectively only do `is_ident`. However, I cannot find the definition of `is_reserved_ident` (even searching the rust repository only gives uses, no definitions), so this will have to do unless someone else can find it :|.\n\nCo-authored-by: DJMcNab <36049421+djmcnab@users.noreply.github.com>", "tree": {"sha": "00b56f7f72ceee1a6ebc11ff3a4cfae54782eaf7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00b56f7f72ceee1a6ebc11ff3a4cfae54782eaf7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/463e5af3f2ff54b74e4aeb73e75047c00b6339be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/463e5af3f2ff54b74e4aeb73e75047c00b6339be", "html_url": "https://github.com/rust-lang/rust/commit/463e5af3f2ff54b74e4aeb73e75047c00b6339be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/463e5af3f2ff54b74e4aeb73e75047c00b6339be/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "4f7ec0170353e61c148909d2716c915578392a7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f7ec0170353e61c148909d2716c915578392a7b", "html_url": "https://github.com/rust-lang/rust/commit/4f7ec0170353e61c148909d2716c915578392a7b"}, {"sha": "9beee92500bfb5953717a67c18217722ea82be49", "url": "https://api.github.com/repos/rust-lang/rust/commits/9beee92500bfb5953717a67c18217722ea82be49", "html_url": "https://github.com/rust-lang/rust/commit/9beee92500bfb5953717a67c18217722ea82be49"}], "stats": {"total": 2400, "additions": 2399, "deletions": 1}, "files": [{"sha": "aa5fe0777215ee9605b06493c09c502cbf53957b", "filename": "crates/ra_syntax/src/grammar/items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/463e5af3f2ff54b74e4aeb73e75047c00b6339be/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/463e5af3f2ff54b74e4aeb73e75047c00b6339be/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fitems.rs?ref=463e5af3f2ff54b74e4aeb73e75047c00b6339be", "patch": "@@ -202,7 +202,7 @@ fn items_without_modifiers(p: &mut Parser) -> Option<SyntaxKind> {\n             }\n             STRUCT_DEF\n         }\n-        IDENT if p.at_contextual_kw(\"union\") => {\n+        IDENT if p.at_contextual_kw(\"union\") && p.nth(1) == IDENT => {\n             // test union_items\n             // union Foo {}\n             // union Foo {"}, {"sha": "8c13231631c31e06767972a01cdb22ed92f2c3ee", "filename": "crates/ra_syntax/tests/data/parser/ok/0035_weird_exprs.rs", "status": "added", "additions": 154, "deletions": 0, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/463e5af3f2ff54b74e4aeb73e75047c00b6339be/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Fok%2F0035_weird_exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/463e5af3f2ff54b74e4aeb73e75047c00b6339be/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Fok%2F0035_weird_exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Fok%2F0035_weird_exprs.rs?ref=463e5af3f2ff54b74e4aeb73e75047c00b6339be", "patch": "@@ -0,0 +1,154 @@\n+//! Adapted from a `rustc` test, which can be found at \n+//! https://github.com/rust-lang/rust/blob/6d34ec18c7d7e574553f6347ecf08e1e1c45c13d/src/test/run-pass/weird-exprs.rs.\n+//! \n+//! Reported to rust-analyzer in https://github.com/rust-analyzer/rust-analyzer/issues/290\n+\n+#![allow(non_camel_case_types)]\n+#![allow(dead_code)]\n+#![allow(unreachable_code)]\n+#![allow(unused_parens)]\n+\n+#![recursion_limit = \"128\"]\n+\n+use std::cell::Cell;\n+use std::mem::swap;\n+\n+// Just a grab bag of stuff that you wouldn't want to actually write.\n+\n+fn strange() -> bool { let _x: bool = return true; }\n+\n+fn funny() {\n+    fn f(_x: ()) { }\n+    f(return);\n+}\n+\n+fn what() {\n+    fn the(x: &Cell<bool>) {\n+        return while !x.get() { x.set(true); };\n+    }\n+    let i = &Cell::new(false);\n+    let dont = {||the(i)};\n+    dont();\n+    assert!((i.get()));\n+}\n+\n+fn zombiejesus() {\n+    loop {\n+        while (return) {\n+            if (return) {\n+                match (return) {\n+                    1 => {\n+                        if (return) {\n+                            return\n+                        } else {\n+                            return\n+                        }\n+                    }\n+                    _ => { return }\n+                };\n+            } else if (return) {\n+                return;\n+            }\n+        }\n+        if (return) { break; }\n+    }\n+}\n+\n+fn notsure() {\n+    let mut _x: isize;\n+    let mut _y = (_x = 0) == (_x = 0);\n+    let mut _z = (_x = 0) < (_x = 0);\n+    let _a = (_x += 0) == (_x = 0);\n+    let _b = swap(&mut _y, &mut _z) == swap(&mut _y, &mut _z);\n+}\n+\n+fn canttouchthis() -> usize {\n+    fn p() -> bool { true }\n+    let _a = (assert!((true)) == (assert!(p())));\n+    let _c = (assert!((p())) == ());\n+    let _b: bool = (println!(\"{}\", 0) == (return 0));\n+}\n+\n+fn angrydome() {\n+    loop { if break { } }\n+    let mut i = 0;\n+    loop { i += 1; if i == 1 { match (continue) { 1 => { }, _ => panic!(\"wat\") } }\n+      break; }\n+}\n+\n+fn evil_lincoln() { let _evil = println!(\"lincoln\"); }\n+\n+fn dots() {\n+    assert_eq!(String::from(\"..................................................\"),\n+               format!(\"{:?}\", .. .. .. .. .. .. .. .. .. .. .. .. ..\n+                               .. .. .. .. .. .. .. .. .. .. .. ..));\n+}\n+\n+fn u8(u8: u8) {\n+    if u8 != 0u8 {\n+        assert_eq!(8u8, {\n+            macro_rules! u8 {\n+                (u8) => {\n+                    mod u8 {\n+                        pub fn u8<'u8: 'u8 + 'u8>(u8: &'u8 u8) -> &'u8 u8 {\n+                            \"u8\";\n+                            u8\n+                        }\n+                    }\n+                };\n+            }\n+\n+            u8!(u8);\n+            let &u8: &u8 = u8::u8(&8u8);\n+            crate::u8(0u8);\n+            u8\n+        });\n+    }\n+}\n+\n+fn fishy() {\n+    assert_eq!(String::from(\"><>\"),\n+               String::<>::from::<>(\"><>\").chars::<>().rev::<>().collect::<String>());\n+}\n+\n+fn union() {\n+    union union<'union> { union: &'union union<'union>, }\n+}\n+\n+fn special_characters() {\n+    let val = !((|(..):(_,_),__@_|__)((&*\"\\\\\",'\ud83e\udd14')/**/,{})=={&[..=..][..];})//\n+    ;\n+    assert!(!val);\n+}\n+\n+fn punch_card() -> impl std::fmt::Debug {\n+    ..=..=.. ..    .. .. .. ..    .. .. .. ..    .. ..=.. ..\n+    ..=.. ..=..    .. .. .. ..    .. .. .. ..    ..=..=..=..\n+    ..=.. ..=..    ..=.. ..=..    .. ..=..=..    .. ..=.. ..\n+    ..=..=.. ..    ..=.. ..=..    ..=.. .. ..    .. ..=.. ..\n+    ..=.. ..=..    ..=.. ..=..    .. ..=.. ..    .. ..=.. ..\n+    ..=.. ..=..    ..=.. ..=..    .. .. ..=..    .. ..=.. ..\n+    ..=.. ..=..    .. ..=..=..    ..=..=.. ..    .. ..=.. ..\n+}\n+\n+fn ktulhu() {\n+    ;;;();;;;;;;;;()\n+}\n+\n+pub fn main() {\n+    strange();\n+    funny();\n+    what();\n+    zombiejesus();\n+    notsure();\n+    canttouchthis();\n+    angrydome();\n+    evil_lincoln();\n+    dots();\n+    u8(8u8);\n+    fishy();\n+    union();\n+    special_characters();\n+    punch_card();\n+    ktulhu();\n+}"}, {"sha": "20932a8378a03ce4190c15ade9b6c2330a743877", "filename": "crates/ra_syntax/tests/data/parser/ok/0035_weird_exprs.txt", "status": "added", "additions": 2244, "deletions": 0, "changes": 2244, "blob_url": "https://github.com/rust-lang/rust/blob/463e5af3f2ff54b74e4aeb73e75047c00b6339be/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Fok%2F0035_weird_exprs.txt", "raw_url": "https://github.com/rust-lang/rust/raw/463e5af3f2ff54b74e4aeb73e75047c00b6339be/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Fok%2F0035_weird_exprs.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Fok%2F0035_weird_exprs.txt?ref=463e5af3f2ff54b74e4aeb73e75047c00b6339be"}]}