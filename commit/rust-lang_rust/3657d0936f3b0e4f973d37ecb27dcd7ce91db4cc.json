{"sha": "3657d0936f3b0e4f973d37ecb27dcd7ce91db4cc", "node_id": "C_kwDOAAsO6NoAKDM2NTdkMDkzNmYzYjBlNGY5NzNkMzdlY2IyN2RjZDdjZTkxZGI0Y2M", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-05-20T15:48:17Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-05-21T14:55:14Z"}, "message": "Extend `substs_to_args` into a perfectly-sized Vec almost every time", "tree": {"sha": "9824e96d4522a00dacfb71a183340f4621a669a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9824e96d4522a00dacfb71a183340f4621a669a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3657d0936f3b0e4f973d37ecb27dcd7ce91db4cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3657d0936f3b0e4f973d37ecb27dcd7ce91db4cc", "html_url": "https://github.com/rust-lang/rust/commit/3657d0936f3b0e4f973d37ecb27dcd7ce91db4cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3657d0936f3b0e4f973d37ecb27dcd7ce91db4cc/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08237d8a6d60e9c11cef34ad1523821d28b6bd8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/08237d8a6d60e9c11cef34ad1523821d28b6bd8e", "html_url": "https://github.com/rust-lang/rust/commit/08237d8a6d60e9c11cef34ad1523821d28b6bd8e"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "47597e0413ae1c1c287a0905885104ba789b5100", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3657d0936f3b0e4f973d37ecb27dcd7ce91db4cc/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3657d0936f3b0e4f973d37ecb27dcd7ce91db4cc/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=3657d0936f3b0e4f973d37ecb27dcd7ce91db4cc", "patch": "@@ -80,23 +80,23 @@ pub(crate) fn substs_to_args(\n     substs: &[ty::subst::GenericArg<'_>],\n     mut skip_first: bool,\n ) -> Vec<GenericArg> {\n-    substs\n-        .iter()\n-        .filter_map(|kind| match kind.unpack() {\n-            GenericArgKind::Lifetime(lt) => match *lt {\n-                ty::ReLateBound(_, ty::BoundRegion { kind: ty::BrAnon(_), .. }) => {\n-                    Some(GenericArg::Lifetime(Lifetime::elided()))\n-                }\n-                _ => lt.clean(cx).map(GenericArg::Lifetime),\n-            },\n-            GenericArgKind::Type(_) if skip_first => {\n-                skip_first = false;\n-                None\n+    let mut ret_val =\n+        Vec::with_capacity(substs.len().saturating_sub(if skip_first { 1 } else { 0 }));\n+    ret_val.extend(substs.iter().filter_map(|kind| match kind.unpack() {\n+        GenericArgKind::Lifetime(lt) => match *lt {\n+            ty::ReLateBound(_, ty::BoundRegion { kind: ty::BrAnon(_), .. }) => {\n+                Some(GenericArg::Lifetime(Lifetime::elided()))\n             }\n-            GenericArgKind::Type(ty) => Some(GenericArg::Type(ty.clean(cx))),\n-            GenericArgKind::Const(ct) => Some(GenericArg::Const(Box::new(ct.clean(cx)))),\n-        })\n-        .collect()\n+            _ => lt.clean(cx).map(GenericArg::Lifetime),\n+        },\n+        GenericArgKind::Type(_) if skip_first => {\n+            skip_first = false;\n+            None\n+        }\n+        GenericArgKind::Type(ty) => Some(GenericArg::Type(ty.clean(cx))),\n+        GenericArgKind::Const(ct) => Some(GenericArg::Const(Box::new(ct.clean(cx)))),\n+    }));\n+    ret_val\n }\n \n fn external_generic_args("}]}