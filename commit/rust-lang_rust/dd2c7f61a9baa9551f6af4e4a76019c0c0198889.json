{"sha": "dd2c7f61a9baa9551f6af4e4a76019c0c0198889", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkMmM3ZjYxYTliYWE5NTUxZjZhZjRlNGE3NjAxOWMwYzAxOTg4ODk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-04-15T23:18:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-04-15T23:18:52Z"}, "message": "auto merge of #5879 : astrieanna/rust/document_std_base64, r=catamorphism\n\nThis adds examples for the methods in std::base64.\r\n\r\nEach example is complete in the sense that you can copy-paste it into a file and compile it successfully without adding anything (imports, etc). The hardest part of figuring out how to use this was figuring out the right import statements to put at the top.", "tree": {"sha": "3edbfa147910323a939d21b2465e5f96d9cae1ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3edbfa147910323a939d21b2465e5f96d9cae1ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd2c7f61a9baa9551f6af4e4a76019c0c0198889", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd2c7f61a9baa9551f6af4e4a76019c0c0198889", "html_url": "https://github.com/rust-lang/rust/commit/dd2c7f61a9baa9551f6af4e4a76019c0c0198889", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd2c7f61a9baa9551f6af4e4a76019c0c0198889/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f10cf26e25c75e148d86dd151a210d9f4a7ece2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f10cf26e25c75e148d86dd151a210d9f4a7ece2f", "html_url": "https://github.com/rust-lang/rust/commit/f10cf26e25c75e148d86dd151a210d9f4a7ece2f"}, {"sha": "b5c9990c387fff415a7de54f5870e5af92169a5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5c9990c387fff415a7de54f5870e5af92169a5d", "html_url": "https://github.com/rust-lang/rust/commit/b5c9990c387fff415a7de54f5870e5af92169a5d"}], "stats": {"total": 80, "additions": 79, "deletions": 1}, "files": [{"sha": "cd468411b5abf351c6e87e00fc9c87b95bfb893a", "filename": "src/libstd/base64.rs", "status": "modified", "additions": 79, "deletions": 1, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/dd2c7f61a9baa9551f6af4e4a76019c0c0198889/src%2Flibstd%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd2c7f61a9baa9551f6af4e4a76019c0c0198889/src%2Flibstd%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbase64.rs?ref=dd2c7f61a9baa9551f6af4e4a76019c0c0198889", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -27,6 +27,21 @@ static CHARS: [char, ..64] = [\n ];\n \n impl<'self> ToBase64 for &'self [u8] {\n+    /**\n+     * Turn a vector of `u8` bytes into a base64 string.\n+     *\n+     * *Example*:\n+     *\n+     * ~~~~\n+     * extern mod std;\n+     * use std::base64::ToBase64;\n+     *\n+     * fn main () {\n+     *     let str = [52,32].to_base64();\n+     *     println(fmt!(\"%s\", str));\n+     * }\n+     * ~~~~\n+     */\n     fn to_base64(&self) -> ~str {\n         let mut s = ~\"\";\n         let len = self.len();\n@@ -74,6 +89,23 @@ impl<'self> ToBase64 for &'self [u8] {\n }\n \n impl<'self> ToBase64 for &'self str {\n+    /**\n+     * Convert any string (literal, `@`, `&`, or `~`) to base64 encoding.\n+     *\n+     *\n+     * *Example*:\n+     *\n+     * ~~~~\n+     * extern mod std;\n+     * use std::base64::ToBase64;\n+     *\n+     * fn main () {\n+     *     let str = \"Hello, World\".to_base64();\n+     *     println(fmt!(\"%s\",str));\n+     * }\n+     * ~~~~\n+     *\n+     */\n     fn to_base64(&self) -> ~str {\n         str::to_bytes(*self).to_base64()\n     }\n@@ -84,6 +116,25 @@ pub trait FromBase64 {\n }\n \n impl FromBase64 for ~[u8] {\n+    /**\n+     * Convert base64 `u8` vector into u8 byte values.\n+     * Every 4 encoded characters is converted into 3 octets, modulo padding.\n+     *\n+     * *Example*:\n+     *\n+     * ~~~~\n+     * extern mod std;\n+     * use std::base64::ToBase64;\n+     * use std::base64::FromBase64;\n+     *\n+     * fn main () {\n+     *     let str = [52,32].to_base64();\n+     *     println(fmt!(\"%s\", str));\n+     *     let bytes = str.from_base64();\n+     *     println(fmt!(\"%?\",bytes));\n+     * }\n+     * ~~~~\n+     */\n     fn from_base64(&self) -> ~[u8] {\n         if self.len() % 4u != 0u { fail!(~\"invalid base64 length\"); }\n \n@@ -144,6 +195,33 @@ impl FromBase64 for ~[u8] {\n }\n \n impl FromBase64 for ~str {\n+    /**\n+     * Convert any base64 encoded string (literal, `@`, `&`, or `~`)\n+     * to the byte values it encodes.\n+     *\n+     * You can use the `from_bytes` function in `core::str`\n+     * to turn a `[u8]` into a string with characters corresponding to those values.\n+     *\n+     * *Example*:\n+     *\n+     * This converts a string literal to base64 and back.\n+     *\n+     * ~~~~\n+     * extern mod std;\n+     * use std::base64::ToBase64;\n+     * use std::base64::FromBase64;\n+     * use core::str;\n+     *\n+     * fn main () {\n+     *     let hello_str = \"Hello, World\".to_base64();\n+     *     println(fmt!(\"%s\",hello_str));\n+     *     let bytes = hello_str.from_base64();\n+     *     println(fmt!(\"%?\",bytes));\n+     *     let result_str = str::from_bytes(bytes);\n+     *     println(fmt!(\"%s\",result_str));\n+     * }\n+     * ~~~~\n+     */\n     fn from_base64(&self) -> ~[u8] {\n         str::to_bytes(*self).from_base64()\n     }"}]}