{"sha": "250935d0c7c23b4d80703f5b660a92d6591d8649", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1MDkzNWQwYzdjMjNiNGQ4MDcwM2Y1YjY2MGE5MmQ2NTkxZDg2NDk=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-12-30T17:07:43Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-01-12T13:18:55Z"}, "message": "Fix a hole in generic parameter import future-proofing\n\nAdd some tests for buggy derive helpers", "tree": {"sha": "3cdca14c77bd3c1e18f11d53c48ef01ab16e731e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3cdca14c77bd3c1e18f11d53c48ef01ab16e731e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/250935d0c7c23b4d80703f5b660a92d6591d8649", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/250935d0c7c23b4d80703f5b660a92d6591d8649", "html_url": "https://github.com/rust-lang/rust/commit/250935d0c7c23b4d80703f5b660a92d6591d8649", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/250935d0c7c23b4d80703f5b660a92d6591d8649/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79134c051702f71cb4ef13a283dc3689eec9466d", "url": "https://api.github.com/repos/rust-lang/rust/commits/79134c051702f71cb4ef13a283dc3689eec9466d", "html_url": "https://github.com/rust-lang/rust/commit/79134c051702f71cb4ef13a283dc3689eec9466d"}], "stats": {"total": 80, "additions": 68, "deletions": 12}, "files": [{"sha": "7c05913467c542ad7e1a0bb49c4de43dfc3684cc", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/250935d0c7c23b4d80703f5b660a92d6591d8649/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/250935d0c7c23b4d80703f5b660a92d6591d8649/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=250935d0c7c23b4d80703f5b660a92d6591d8649", "patch": "@@ -67,7 +67,7 @@ use syntax_pos::{Span, DUMMY_SP, MultiSpan};\n use errors::{Applicability, DiagnosticBuilder, DiagnosticId};\n \n use std::cell::{Cell, RefCell};\n-use std::{cmp, fmt, iter, ptr};\n+use std::{cmp, fmt, iter, mem, ptr};\n use std::collections::BTreeSet;\n use std::mem::replace;\n use rustc_data_structures::ptr_key::PtrKey;\n@@ -2375,11 +2375,27 @@ impl<'a> Resolver<'a> {\n                 ast::UseTreeKind::Simple(..) if segments.len() == 1 => &[TypeNS, ValueNS][..],\n                 _ => &[TypeNS],\n             };\n+            let report_error = |this: &Self, ns| {\n+                let what = if ns == TypeNS { \"type parameters\" } else { \"local variables\" };\n+                this.session.span_err(ident.span, &format!(\"imports cannot refer to {}\", what));\n+            };\n+\n             for &ns in nss {\n-                if let Some(LexicalScopeBinding::Def(..)) =\n-                        self.resolve_ident_in_lexical_scope(ident, ns, None, use_tree.prefix.span) {\n-                    let what = if ns == TypeNS { \"type parameters\" } else { \"local variables\" };\n-                    self.session.span_err(ident.span, &format!(\"imports cannot refer to {}\", what));\n+                match self.resolve_ident_in_lexical_scope(ident, ns, None, use_tree.prefix.span) {\n+                    Some(LexicalScopeBinding::Def(..)) => {\n+                        report_error(self, ns);\n+                    }\n+                    Some(LexicalScopeBinding::Item(binding)) => {\n+                        let orig_blacklisted_binding =\n+                            mem::replace(&mut self.blacklisted_binding, Some(binding));\n+                        if let Some(LexicalScopeBinding::Def(..)) =\n+                                self.resolve_ident_in_lexical_scope(ident, ns, None,\n+                                                                    use_tree.prefix.span) {\n+                            report_error(self, ns);\n+                        }\n+                        self.blacklisted_binding = orig_blacklisted_binding;\n+                    }\n+                    None => {}\n                 }\n             }\n         } else if let ast::UseTreeKind::Nested(use_trees) = &use_tree.kind {"}, {"sha": "fd55897522bf7f2c1595bfe8377186e9fc102161", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/250935d0c7c23b4d80703f5b660a92d6591d8649/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/250935d0c7c23b4d80703f5b660a92d6591d8649/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=250935d0c7c23b4d80703f5b660a92d6591d8649", "patch": "@@ -223,6 +223,11 @@ impl<'a> Resolver<'a> {\n         }\n \n         let check_usable = |this: &mut Self, binding: &'a NameBinding<'a>| {\n+            if let Some(blacklisted_binding) = this.blacklisted_binding {\n+                if ptr::eq(binding, blacklisted_binding) {\n+                    return Err((Determined, Weak::No));\n+                }\n+            }\n             // `extern crate` are always usable for backwards compatibility, see issue #37020,\n             // remove this together with `PUB_USE_OF_PRIVATE_EXTERN_CRATE`.\n             let usable = this.is_accessible(binding.vis) || binding.is_extern_crate();"}, {"sha": "844962b910a6917ad08f36ca4a97f826f828e7fa", "filename": "src/test/ui/imports/issue-56125.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/250935d0c7c23b4d80703f5b660a92d6591d8649/src%2Ftest%2Fui%2Fimports%2Fissue-56125.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/250935d0c7c23b4d80703f5b660a92d6591d8649/src%2Ftest%2Fui%2Fimports%2Fissue-56125.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fissue-56125.stderr?ref=250935d0c7c23b4d80703f5b660a92d6591d8649", "patch": "@@ -43,7 +43,7 @@ LL |     use issue_56125::*; //~ ERROR `issue_56125` is ambiguous\n    = note: `issue_56125` could refer to an extern crate passed with `--extern`\n    = help: use `::issue_56125` to refer to this extern crate unambiguously\n note: `issue_56125` could also refer to the module imported here\n-  --> $DIR/issue-56125.rs:17:9\n+  --> $DIR/issue-56125.rs:18:9\n    |\n LL |     use issue_56125::*; //~ ERROR `issue_56125` is ambiguous\n    |         ^^^^^^^^^^^^^^"}, {"sha": "f6fe9f9fd8b304d48d4b081e1070c29c11210b9d", "filename": "src/test/ui/proc-macro/derive-helper-shadowing.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/250935d0c7c23b4d80703f5b660a92d6591d8649/src%2Ftest%2Fui%2Fproc-macro%2Fderive-helper-shadowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/250935d0c7c23b4d80703f5b660a92d6591d8649/src%2Ftest%2Fui%2Fproc-macro%2Fderive-helper-shadowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fderive-helper-shadowing.rs?ref=250935d0c7c23b4d80703f5b660a92d6591d8649", "patch": "@@ -5,6 +5,26 @@ use derive_helper_shadowing::*;\n \n #[my_attr] //~ ERROR `my_attr` is ambiguous\n #[derive(MyTrait)]\n-struct S;\n+struct S {\n+    // FIXME No ambiguity, attributes in non-macro positions are not resolved properly\n+    #[my_attr]\n+    field: [u8; {\n+        // FIXME No ambiguity, derive helpers are not put into scope for non-attributes\n+        use my_attr;\n \n-fn main() {}\n+        // FIXME No ambiguity, derive helpers are not put into scope for inner items\n+        #[my_attr]\n+        struct U;\n+\n+        mod inner {\n+            #[my_attr] //~ ERROR attribute `my_attr` is currently unknown\n+            struct V;\n+        }\n+\n+        0\n+    }]\n+}\n+\n+fn main() {\n+    let s = S { field: [] };\n+}"}, {"sha": "8180c84d3f6eba226545dbef42d98e7b422374e9", "filename": "src/test/ui/proc-macro/derive-helper-shadowing.stderr", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/250935d0c7c23b4d80703f5b660a92d6591d8649/src%2Ftest%2Fui%2Fproc-macro%2Fderive-helper-shadowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/250935d0c7c23b4d80703f5b660a92d6591d8649/src%2Ftest%2Fui%2Fproc-macro%2Fderive-helper-shadowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fderive-helper-shadowing.stderr?ref=250935d0c7c23b4d80703f5b660a92d6591d8649", "patch": "@@ -1,3 +1,11 @@\n+error[E0658]: The attribute `my_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+  --> $DIR/derive-helper-shadowing.rs:20:15\n+   |\n+LL |             #[my_attr] //~ ERROR attribute `my_attr` is currently unknown\n+   |               ^^^^^^^\n+   |\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n error[E0659]: `my_attr` is ambiguous (derive helper attribute vs any other name)\n   --> $DIR/derive-helper-shadowing.rs:6:3\n    |\n@@ -16,6 +24,7 @@ LL | use derive_helper_shadowing::*;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: use `crate::my_attr` to refer to this attribute macro unambiguously\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0659`.\n+Some errors occurred: E0658, E0659.\n+For more information about an error, try `rustc --explain E0658`."}, {"sha": "1e53c2d1daca465044bc19a724d3badee99539de", "filename": "src/test/ui/rust-2018/future-proofing-locals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/250935d0c7c23b4d80703f5b660a92d6591d8649/src%2Ftest%2Fui%2Frust-2018%2Ffuture-proofing-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/250935d0c7c23b4d80703f5b660a92d6591d8649/src%2Ftest%2Fui%2Frust-2018%2Ffuture-proofing-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Ffuture-proofing-locals.rs?ref=250935d0c7c23b4d80703f5b660a92d6591d8649", "patch": "@@ -16,7 +16,7 @@ fn type_param<T>() {\n }\n \n fn self_import<T>() {\n-    use T; // FIXME Should be an error, but future-proofing fails due to `T` being \"self-shadowed\"\n+    use T; //~ ERROR imports cannot refer to type parameters\n }\n \n fn let_binding() {"}, {"sha": "413e199cd646cdc829323cd8527d1589e86ae630", "filename": "src/test/ui/rust-2018/future-proofing-locals.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/250935d0c7c23b4d80703f5b660a92d6591d8649/src%2Ftest%2Fui%2Frust-2018%2Ffuture-proofing-locals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/250935d0c7c23b4d80703f5b660a92d6591d8649/src%2Ftest%2Fui%2Frust-2018%2Ffuture-proofing-locals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Ffuture-proofing-locals.stderr?ref=250935d0c7c23b4d80703f5b660a92d6591d8649", "patch": "@@ -16,6 +16,12 @@ error: imports cannot refer to type parameters\n LL |     use T::*; //~ ERROR imports cannot refer to type parameters\n    |         ^\n \n+error: imports cannot refer to type parameters\n+  --> $DIR/future-proofing-locals.rs:19:9\n+   |\n+LL |     use T; //~ ERROR imports cannot refer to type parameters\n+   |         ^\n+\n error: imports cannot refer to local variables\n   --> $DIR/future-proofing-locals.rs:25:9\n    |\n@@ -46,5 +52,5 @@ error: imports cannot refer to local variables\n LL |     use {T as _, x}; //~ ERROR imports cannot refer to type parameters\n    |                  ^\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 9 previous errors\n "}]}