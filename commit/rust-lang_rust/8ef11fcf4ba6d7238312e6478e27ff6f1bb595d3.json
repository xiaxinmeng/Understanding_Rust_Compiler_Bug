{"sha": "8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlZjExZmNmNGJhNmQ3MjM4MzEyZTY0NzhlMjdmZjZmMWJiNTk1ZDM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-05T01:59:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-05T01:59:44Z"}, "message": "Rollup merge of #64110 - estebank:receiver-type, r=Centril\n\nRefer to \"`self` type\" instead of \"receiver type\"\n\nFix https://github.com/rust-lang/rust/issues/42603.", "tree": {"sha": "c91c19d0137293de4558175db13805565cd0c111", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c91c19d0137293de4558175db13805565cd0c111"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdcGwQCRBK7hj4Ov3rIwAAdHIIABLQO6DQKZrPL1fktETpE4S6\nW8FqHZPI42Murs9Osv4kuRCjC4qJqKiC/CcHHU/wTNDrcRcGBvLO6yZQ4yb767se\nk0e6/TrEhK2c1Ys19frZaKUK7+bXbKxJ2qr4HcKs0+vQlBhIhiOFklNEriL0ZeJv\nbk6EJSDu6Dt/YFuYhti1D+r2u0GLegxXb0THCsAMX4cqYr+EeOD2+hRcb9e0pDVd\nLxUaN+XiUSuX2Tvh2P8KhCD8zg0WPAH/Iihs1Bz/pgHehBfUg207XHTDSlnxNJ6a\n9roMngp7r0t6Iw+e15PMW5YoCq2sFn4/IZd1yEUE9nCP9hRO7CfiSoNl2ZyMq/s=\n=HQ/L\n-----END PGP SIGNATURE-----\n", "payload": "tree c91c19d0137293de4558175db13805565cd0c111\nparent 68660d2494af3c20e1eb3a9c4a469e3f6202d2b9\nparent e16ce8007a129fc3829d5ed9c1fed5cd4fb6c2c9\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1567648784 +0200\ncommitter GitHub <noreply@github.com> 1567648784 +0200\n\nRollup merge of #64110 - estebank:receiver-type, r=Centril\n\nRefer to \"`self` type\" instead of \"receiver type\"\n\nFix https://github.com/rust-lang/rust/issues/42603.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3", "html_url": "https://github.com/rust-lang/rust/commit/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68660d2494af3c20e1eb3a9c4a469e3f6202d2b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/68660d2494af3c20e1eb3a9c4a469e3f6202d2b9", "html_url": "https://github.com/rust-lang/rust/commit/68660d2494af3c20e1eb3a9c4a469e3f6202d2b9"}, {"sha": "e16ce8007a129fc3829d5ed9c1fed5cd4fb6c2c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/e16ce8007a129fc3829d5ed9c1fed5cd4fb6c2c9", "html_url": "https://github.com/rust-lang/rust/commit/e16ce8007a129fc3829d5ed9c1fed5cd4fb6c2c9"}], "stats": {"total": 433, "additions": 283, "deletions": 150}, "files": [{"sha": "937a9ea6c1bd485150b91ac3e01e40f7848dfb7f", "filename": "src/librustc/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Flibrustc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Flibrustc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ferror_codes.rs?ref=8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3", "patch": "@@ -39,7 +39,7 @@ Generally, `Self: Sized` is used to indicate that the trait should not be used\n as a trait object. If the trait comes from your own crate, consider removing\n this restriction.\n \n-### Method references the `Self` type in its arguments or return type\n+### Method references the `Self` type in its parameters or return type\n \n This happens when a trait has a method like the following:\n "}, {"sha": "bf9cb79fb8a1060769e1a3862b9f231a5e4917b7", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3", "patch": "@@ -1627,7 +1627,7 @@ impl<'tcx> ObligationCause<'tcx> {\n             MainFunctionType => Error0580(\"main function has wrong type\"),\n             StartFunctionType => Error0308(\"start function has wrong type\"),\n             IntrinsicType => Error0308(\"intrinsic has wrong type\"),\n-            MethodReceiver => Error0308(\"mismatched method receiver\"),\n+            MethodReceiver => Error0308(\"mismatched `self` parameter type\"),\n \n             // In the case where we have no more specific thing to\n             // say, also take a look at the error code, maybe we can"}, {"sha": "03cc00d87e3cd3091843b68545bb2e32672efc5e", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3", "patch": "@@ -1384,7 +1384,10 @@ impl<'tcx> TyCtxt<'tcx> {\n         let mut reported_violations = FxHashSet::default();\n         for violation in violations {\n             if reported_violations.insert(violation.clone()) {\n-                err.note(&violation.error_msg());\n+                match violation.span() {\n+                    Some(span) => err.span_label(span, violation.error_msg()),\n+                    None => err.note(&violation.error_msg()),\n+                };\n             }\n         }\n         Some(err)"}, {"sha": "f7f459cd27f68d2d801e6d82a52c76119e7de820", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 44, "deletions": 28, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3", "patch": "@@ -20,7 +20,7 @@ use std::borrow::Cow;\n use std::iter::{self};\n use syntax::ast::{self};\n use syntax::symbol::InternedString;\n-use syntax_pos::Span;\n+use syntax_pos::{Span, DUMMY_SP};\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n pub enum ObjectSafetyViolation {\n@@ -32,10 +32,10 @@ pub enum ObjectSafetyViolation {\n     SupertraitSelf,\n \n     /// Method has something illegal.\n-    Method(ast::Name, MethodViolationCode),\n+    Method(ast::Name, MethodViolationCode, Span),\n \n     /// Associated const.\n-    AssocConst(ast::Name),\n+    AssocConst(ast::Name, Span),\n }\n \n impl ObjectSafetyViolation {\n@@ -46,22 +46,35 @@ impl ObjectSafetyViolation {\n             ObjectSafetyViolation::SupertraitSelf =>\n                 \"the trait cannot use `Self` as a type parameter \\\n                  in the supertraits or where-clauses\".into(),\n-            ObjectSafetyViolation::Method(name, MethodViolationCode::StaticMethod) =>\n-                format!(\"method `{}` has no receiver\", name).into(),\n-            ObjectSafetyViolation::Method(name, MethodViolationCode::ReferencesSelf) =>\n-                format!(\"method `{}` references the `Self` type \\\n-                         in its arguments or return type\", name).into(),\n-            ObjectSafetyViolation::Method(name,\n-                                            MethodViolationCode::WhereClauseReferencesSelf(_)) =>\n-                format!(\"method `{}` references the `Self` type in where clauses\", name).into(),\n-            ObjectSafetyViolation::Method(name, MethodViolationCode::Generic) =>\n+            ObjectSafetyViolation::Method(name, MethodViolationCode::StaticMethod, _) =>\n+                format!(\"associated function `{}` has no `self` parameter\", name).into(),\n+            ObjectSafetyViolation::Method(name, MethodViolationCode::ReferencesSelf, _) => format!(\n+                \"method `{}` references the `Self` type in its parameters or return type\",\n+                name,\n+            ).into(),\n+            ObjectSafetyViolation::Method(\n+                name,\n+                MethodViolationCode::WhereClauseReferencesSelf,\n+                _,\n+            ) => format!(\"method `{}` references the `Self` type in where clauses\", name).into(),\n+            ObjectSafetyViolation::Method(name, MethodViolationCode::Generic, _) =>\n                 format!(\"method `{}` has generic type parameters\", name).into(),\n-            ObjectSafetyViolation::Method(name, MethodViolationCode::UndispatchableReceiver) =>\n-                format!(\"method `{}`'s receiver cannot be dispatched on\", name).into(),\n-            ObjectSafetyViolation::AssocConst(name) =>\n+            ObjectSafetyViolation::Method(name, MethodViolationCode::UndispatchableReceiver, _) =>\n+                format!(\"method `{}`'s `self` parameter cannot be dispatched on\", name).into(),\n+            ObjectSafetyViolation::AssocConst(name, _) =>\n                 format!(\"the trait cannot contain associated consts like `{}`\", name).into(),\n         }\n     }\n+\n+    pub fn span(&self) -> Option<Span> {\n+        // When `span` comes from a separate crate, it'll be `DUMMY_SP`. Treat it as `None` so\n+        // diagnostics use a `note` instead of a `span_label`.\n+        match *self {\n+            ObjectSafetyViolation::AssocConst(_, span) |\n+            ObjectSafetyViolation::Method(_, _, span) if span != DUMMY_SP => Some(span),\n+            _ => None,\n+        }\n+    }\n }\n \n /// Reasons a method might not be object-safe.\n@@ -74,7 +87,7 @@ pub enum MethodViolationCode {\n     ReferencesSelf,\n \n     /// e.g., `fn foo(&self) where Self: Clone`\n-    WhereClauseReferencesSelf(Span),\n+    WhereClauseReferencesSelf,\n \n     /// e.g., `fn foo<A>()`\n     Generic,\n@@ -88,9 +101,10 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// astconv -- currently, `Self` in supertraits. This is needed\n     /// because `object_safety_violations` can't be used during\n     /// type collection.\n-    pub fn astconv_object_safety_violations(self, trait_def_id: DefId)\n-                                            -> Vec<ObjectSafetyViolation>\n-    {\n+    pub fn astconv_object_safety_violations(\n+        self,\n+        trait_def_id: DefId,\n+    ) -> Vec<ObjectSafetyViolation> {\n         debug_assert!(self.generics_of(trait_def_id).has_self);\n         let violations = traits::supertrait_def_ids(self, trait_def_id)\n             .filter(|&def_id| self.predicates_reference_self(def_id, true))\n@@ -128,7 +142,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n \n         match self.virtual_call_violation_for_method(trait_def_id, method) {\n-            None | Some(MethodViolationCode::WhereClauseReferencesSelf(_)) => true,\n+            None | Some(MethodViolationCode::WhereClauseReferencesSelf) => true,\n             Some(_) => false,\n         }\n     }\n@@ -138,12 +152,15 @@ impl<'tcx> TyCtxt<'tcx> {\n         let mut violations: Vec<_> = self.associated_items(trait_def_id)\n             .filter(|item| item.kind == ty::AssocKind::Method)\n             .filter_map(|item|\n-                self.object_safety_violation_for_method(trait_def_id, &item)\n-                    .map(|code| ObjectSafetyViolation::Method(item.ident.name, code))\n+                self.object_safety_violation_for_method(trait_def_id, &item).map(|code| {\n+                    ObjectSafetyViolation::Method(item.ident.name, code, item.ident.span)\n+                })\n             ).filter(|violation| {\n-                if let ObjectSafetyViolation::Method(_,\n-                    MethodViolationCode::WhereClauseReferencesSelf(span)) = violation\n-                {\n+                if let ObjectSafetyViolation::Method(\n+                    _,\n+                    MethodViolationCode::WhereClauseReferencesSelf,\n+                    span,\n+                ) = violation {\n                     // Using `CRATE_NODE_ID` is wrong, but it's hard to get a more precise id.\n                     // It's also hard to get a use site span, so we use the method definition span.\n                     self.lint_node_note(\n@@ -169,7 +186,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n         violations.extend(self.associated_items(trait_def_id)\n             .filter(|item| item.kind == ty::AssocKind::Const)\n-            .map(|item| ObjectSafetyViolation::AssocConst(item.ident.name)));\n+            .map(|item| ObjectSafetyViolation::AssocConst(item.ident.name, item.ident.span)));\n \n         debug!(\"object_safety_violations_for_trait(trait_def_id={:?}) = {:?}\",\n                trait_def_id,\n@@ -325,8 +342,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                 .visit_tys_shallow(|t| {\n                     self.contains_illegal_self_type_reference(trait_def_id, t)\n                 }) {\n-            let span = self.def_span(method.def_id);\n-            return Some(MethodViolationCode::WhereClauseReferencesSelf(span));\n+            return Some(MethodViolationCode::WhereClauseReferencesSelf);\n         }\n \n         let receiver_ty = self.liberate_late_bound_regions("}, {"sha": "ac8ee43dd0801670797b165e48e1b7eba5a30237", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3", "patch": "@@ -762,19 +762,19 @@ fn check_opaque_types<'fcx, 'tcx>(\n     substituted_predicates\n }\n \n+const HELP_FOR_SELF_TYPE: &str =\n+    \"consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, \\\n+     `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one \\\n+     of the previous types except `Self`)\";\n+\n fn check_method_receiver<'fcx, 'tcx>(\n     fcx: &FnCtxt<'fcx, 'tcx>,\n     method_sig: &hir::MethodSig,\n     method: &ty::AssocItem,\n     self_ty: Ty<'tcx>,\n ) {\n-    const HELP_FOR_SELF_TYPE: &str =\n-        \"consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, \\\n-         `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one \\\n-         of the previous types except `Self`)\";\n     // Check that the method has a valid receiver type, given the type `Self`.\n-    debug!(\"check_method_receiver({:?}, self_ty={:?})\",\n-           method, self_ty);\n+    debug!(\"check_method_receiver({:?}, self_ty={:?})\", method, self_ty);\n \n     if !method.method_has_self_argument {\n         return;\n@@ -805,12 +805,7 @@ fn check_method_receiver<'fcx, 'tcx>(\n     if fcx.tcx.features().arbitrary_self_types {\n         if !receiver_is_valid(fcx, span, receiver_ty, self_ty, true) {\n             // Report error; `arbitrary_self_types` was enabled.\n-            fcx.tcx.sess.diagnostic().mut_span_err(\n-                span, &format!(\"invalid method receiver type: {:?}\", receiver_ty)\n-            ).note(\"type of `self` must be `Self` or a type that dereferences to it\")\n-            .help(HELP_FOR_SELF_TYPE)\n-            .code(DiagnosticId::Error(\"E0307\".into()))\n-            .emit();\n+            e0307(fcx, span, receiver_ty);\n         }\n     } else {\n         if !receiver_is_valid(fcx, span, receiver_ty, self_ty, false) {\n@@ -830,17 +825,22 @@ fn check_method_receiver<'fcx, 'tcx>(\n                 .emit();\n             } else {\n                 // Report error; would not have worked with `arbitrary_self_types`.\n-                fcx.tcx.sess.diagnostic().mut_span_err(\n-                    span, &format!(\"invalid method receiver type: {:?}\", receiver_ty)\n-                ).note(\"type must be `Self` or a type that dereferences to it\")\n-                .help(HELP_FOR_SELF_TYPE)\n-                .code(DiagnosticId::Error(\"E0307\".into()))\n-                .emit();\n+                e0307(fcx, span, receiver_ty);\n             }\n         }\n     }\n }\n \n+fn e0307(fcx: &FnCtxt<'fcx, 'tcx>, span: Span, receiver_ty: Ty<'_>) {\n+    fcx.tcx.sess.diagnostic().mut_span_err(\n+        span,\n+        &format!(\"invalid `self` parameter type: {:?}\", receiver_ty)\n+    ).note(\"type of `self` must be `Self` or a type that dereferences to it\")\n+    .help(HELP_FOR_SELF_TYPE)\n+    .code(DiagnosticId::Error(\"E0307\".into()))\n+    .emit();\n+}\n+\n /// Returns whether `receiver_ty` would be considered a valid receiver type for `self_ty`. If\n /// `arbitrary_self_types` is enabled, `receiver_ty` must transitively deref to `self_ty`, possibly\n /// through a `*const/mut T` raw pointer. If the feature is not enabled, the requirements are more"}, {"sha": "093446d28533e21c6bad37611e4e96566074c6d5", "filename": "src/librustc_typeck/error_codes.rs", "status": "modified", "additions": 82, "deletions": 2, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Flibrustc_typeck%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Flibrustc_typeck%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Ferror_codes.rs?ref=8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3", "patch": "@@ -212,7 +212,7 @@ match string {\n E0033: r##\"\n This error indicates that a pointer to a trait type cannot be implicitly\n dereferenced by a pattern. Every trait defines a type, but because the\n-size of trait implementors isn't fixed, this type has no compile-time size.\n+size of trait implementers isn't fixed, this type has no compile-time size.\n Therefore, all accesses to trait types must be through pointers. If you\n encounter this error you should try to avoid dereferencing the pointer.\n \n@@ -2425,6 +2425,87 @@ struct Bar<S, T> { x: Foo<S, T> }\n ```\n \"##,\n \n+E0307: r##\"\n+This error indicates that the `self` parameter in a method has an invalid\n+\"reciever type\".\n+\n+Methods take a special first parameter, of which there are three variants:\n+`self`, `&self`, and `&mut self`. These are syntactic sugar for\n+`self: Self`, `self: &Self`, and `self: &mut Self` respectively.\n+\n+```\n+# struct Foo;\n+trait Trait {\n+    fn foo(&self);\n+//         ^^^^^ `self` here is a reference to the receiver object\n+}\n+\n+impl Trait for Foo {\n+    fn foo(&self) {}\n+//         ^^^^^ the receiver type is `&Foo`\n+}\n+```\n+\n+The type `Self` acts as an alias to the type of the current trait\n+implementer, or \"receiver type\". Besides the already mentioned `Self`,\n+`&Self` and `&mut Self` valid receiver types, the following are also valid:\n+`self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, and `self: Pin<P>`\n+(where P is one of the previous types except `Self`). Note that `Self` can\n+also be the underlying implementing type, like `Foo` in the following\n+example:\n+\n+```\n+# struct Foo;\n+# trait Trait {\n+#     fn foo(&self);\n+# }\n+impl Trait for Foo {\n+    fn foo(self: &Foo) {}\n+}\n+```\n+\n+E0307 will be emitted by the compiler when using an invalid reciver type,\n+like in the following example:\n+\n+```compile_fail,E0307\n+# struct Foo;\n+# struct Bar;\n+# trait Trait {\n+#     fn foo(&self);\n+# }\n+impl Trait for Foo {\n+    fn foo(self: &Bar) {}\n+}\n+```\n+\n+The nightly feature [Arbintrary self types][AST] extends the accepted\n+set of receiver types to also include any type that can dereference to\n+`Self`:\n+\n+```\n+#![feature(arbitrary_self_types)]\n+\n+struct Foo;\n+struct Bar;\n+\n+// Because you can dereference `Bar` into `Foo`...\n+impl std::ops::Deref for Bar {\n+    type Target = Foo;\n+\n+    fn deref(&self) -> &Foo {\n+        &Foo\n+    }\n+}\n+\n+impl Foo {\n+    fn foo(self: Bar) {}\n+//         ^^^^^^^^^ ...it can be used as the receiver type\n+}\n+```\n+\n+[AST]: https://doc.rust-lang.org/unstable-book/language-features/arbitrary-self-types.html\n+\"##,\n+\n E0321: r##\"\n A cross-crate opt-out trait was implemented on something which wasn't a struct\n or enum type. Erroneous code example:\n@@ -4851,7 +4932,6 @@ register_diagnostics! {\n //  E0247,\n //  E0248, // value used as a type, now reported earlier during resolution as E0412\n //  E0249,\n-    E0307, // invalid method `self` type\n //  E0319, // trait impls for defaulted traits allowed just for structs/enums\n //  E0372, // coherence not object safe\n     E0377, // the trait `CoerceUnsized` may only be implemented for a coercion"}, {"sha": "a5d7fc5b7024685e0d7d9b677bb7a6853f3f8934", "filename": "src/test/ui/associated-const/associated-const-in-trait.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-in-trait.stderr?ref=8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3", "patch": "@@ -1,10 +1,11 @@\n error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/associated-const-in-trait.rs:9:6\n    |\n+LL |     const N: usize;\n+   |           - the trait cannot contain associated consts like `N`\n+...\n LL | impl dyn Trait {\n    |      ^^^^^^^^^ the trait `Trait` cannot be made into an object\n-   |\n-   = note: the trait cannot contain associated consts like `N`\n \n error: aborting due to previous error\n "}, {"sha": "18a7cea95bdb9fe2b0f05b45df222e2e4bd6eddc", "filename": "src/test/ui/coherence/coherence-impl-trait-for-trait-object-safe.old.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.old.stderr?ref=8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3", "patch": "@@ -1,10 +1,10 @@\n error[E0038]: the trait `NotObjectSafe` cannot be made into an object\n   --> $DIR/coherence-impl-trait-for-trait-object-safe.rs:11:6\n    |\n+LL | trait NotObjectSafe { fn eq(&self, other: Self); }\n+   |                          -- method `eq` references the `Self` type in its parameters or return type\n LL | impl NotObjectSafe for dyn NotObjectSafe { }\n    |      ^^^^^^^^^^^^^ the trait `NotObjectSafe` cannot be made into an object\n-   |\n-   = note: method `eq` references the `Self` type in its arguments or return type\n \n error: aborting due to previous error\n "}, {"sha": "18a7cea95bdb9fe2b0f05b45df222e2e4bd6eddc", "filename": "src/test/ui/coherence/coherence-impl-trait-for-trait-object-safe.re.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.re.stderr?ref=8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3", "patch": "@@ -1,10 +1,10 @@\n error[E0038]: the trait `NotObjectSafe` cannot be made into an object\n   --> $DIR/coherence-impl-trait-for-trait-object-safe.rs:11:6\n    |\n+LL | trait NotObjectSafe { fn eq(&self, other: Self); }\n+   |                          -- method `eq` references the `Self` type in its parameters or return type\n LL | impl NotObjectSafe for dyn NotObjectSafe { }\n    |      ^^^^^^^^^^^^^ the trait `NotObjectSafe` cannot be made into an object\n-   |\n-   = note: method `eq` references the `Self` type in its arguments or return type\n \n error: aborting due to previous error\n "}, {"sha": "5b384045a486abce4305ac22682809efd07ead89", "filename": "src/test/ui/did_you_mean/issue-40006.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr?ref=8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3", "patch": "@@ -61,8 +61,9 @@ error[E0038]: the trait `X` cannot be made into an object\n    |\n LL | impl dyn X {\n    |      ^^^^^ the trait `X` cannot be made into an object\n-   |\n-   = note: method `xxx` has no receiver\n+...\n+LL |     fn xxx() { ### }\n+   |        --- associated function `xxx` has no `self` parameter\n \n error: aborting due to 9 previous errors\n "}, {"sha": "19439651394234071986e9fd56e3f16f9a4b1a12", "filename": "src/test/ui/error-codes/E0033-teach.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.rs?ref=8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3", "patch": "@@ -1,14 +1,13 @@\n // compile-flags: -Z teach\n \n trait SomeTrait {\n-    fn foo();\n+    fn foo(); //~ associated function `foo` has no `self` parameter\n }\n \n fn main() {\n     let trait_obj: &dyn SomeTrait = SomeTrait;\n     //~^ ERROR expected value, found trait `SomeTrait`\n     //~| ERROR E0038\n-    //~| method `foo` has no receiver\n \n     let &invalid = trait_obj;\n     //~^ ERROR E0033"}, {"sha": "80f3d4441bd9faf6acfd0bc1350aa7b79a8cedc4", "filename": "src/test/ui/error-codes/E0033-teach.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.stderr?ref=8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3", "patch": "@@ -7,13 +7,14 @@ LL |     let trait_obj: &dyn SomeTrait = SomeTrait;\n error[E0038]: the trait `SomeTrait` cannot be made into an object\n   --> $DIR/E0033-teach.rs:8:20\n    |\n+LL |     fn foo();\n+   |        --- associated function `foo` has no `self` parameter\n+...\n LL |     let trait_obj: &dyn SomeTrait = SomeTrait;\n    |                    ^^^^^^^^^^^^^^ the trait `SomeTrait` cannot be made into an object\n-   |\n-   = note: method `foo` has no receiver\n \n error[E0033]: type `&dyn SomeTrait` cannot be dereferenced\n-  --> $DIR/E0033-teach.rs:13:9\n+  --> $DIR/E0033-teach.rs:12:9\n    |\n LL |     let &invalid = trait_obj;\n    |         ^^^^^^^^ type `&dyn SomeTrait` cannot be dereferenced"}, {"sha": "e5f0530f45ff86ae0a5550512d394184db90fe58", "filename": "src/test/ui/error-codes/E0033.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Ferror-codes%2FE0033.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Ferror-codes%2FE0033.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0033.rs?ref=8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3", "patch": "@@ -1,12 +1,11 @@\n trait SomeTrait {\n-    fn foo();\n+    fn foo(); //~ associated function `foo` has no `self` parameter\n }\n \n fn main() {\n     let trait_obj: &dyn SomeTrait = SomeTrait;\n     //~^ ERROR expected value, found trait `SomeTrait`\n     //~| ERROR E0038\n-    //~| method `foo` has no receiver\n \n     let &invalid = trait_obj;\n     //~^ ERROR E0033"}, {"sha": "c2843796cc851b82c578555ab57ccfbf1ce9dc66", "filename": "src/test/ui/error-codes/E0033.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Ferror-codes%2FE0033.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Ferror-codes%2FE0033.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0033.stderr?ref=8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3", "patch": "@@ -7,13 +7,14 @@ LL |     let trait_obj: &dyn SomeTrait = SomeTrait;\n error[E0038]: the trait `SomeTrait` cannot be made into an object\n   --> $DIR/E0033.rs:6:20\n    |\n+LL |     fn foo();\n+   |        --- associated function `foo` has no `self` parameter\n+...\n LL |     let trait_obj: &dyn SomeTrait = SomeTrait;\n    |                    ^^^^^^^^^^^^^^ the trait `SomeTrait` cannot be made into an object\n-   |\n-   = note: method `foo` has no receiver\n \n error[E0033]: type `&dyn SomeTrait` cannot be dereferenced\n-  --> $DIR/E0033.rs:11:9\n+  --> $DIR/E0033.rs:10:9\n    |\n LL |     let &invalid = trait_obj;\n    |         ^^^^^^^^ type `&dyn SomeTrait` cannot be dereferenced"}, {"sha": "5c4d6d53c4626bc01c8d3685372c6696a77eb8ee", "filename": "src/test/ui/error-codes/E0038.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Ferror-codes%2FE0038.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Ferror-codes%2FE0038.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0038.stderr?ref=8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3", "patch": "@@ -1,10 +1,11 @@\n error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/E0038.rs:5:1\n    |\n+LL |     fn foo(&self) -> Self;\n+   |        --- method `foo` references the `Self` type in its parameters or return type\n+...\n LL | fn call_foo(x: Box<dyn Trait>) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait` cannot be made into an object\n-   |\n-   = note: method `foo` references the `Self` type in its arguments or return type\n \n error: aborting due to previous error\n "}, {"sha": "9ab8e13893bc77b5b63bfb9b575b7dd4fd843faa", "filename": "src/test/ui/explicit/explicit-self-lifetime-mismatch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Fexplicit%2Fexplicit-self-lifetime-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Fexplicit%2Fexplicit-self-lifetime-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexplicit%2Fexplicit-self-lifetime-mismatch.rs?ref=8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3", "patch": "@@ -6,11 +6,11 @@ struct Foo<'a,'b> {\n impl<'a,'b> Foo<'a,'b> {\n     fn bar(self:\n            Foo<'b,'a>\n-    //~^ ERROR mismatched method receiver\n+    //~^ ERROR mismatched `self` parameter type\n     //~| expected type `Foo<'a, 'b>`\n     //~| found type `Foo<'b, 'a>`\n     //~| lifetime mismatch\n-    //~| ERROR mismatched method receiver\n+    //~| ERROR mismatched `self` parameter type\n     //~| expected type `Foo<'a, 'b>`\n     //~| found type `Foo<'b, 'a>`\n     //~| lifetime mismatch"}, {"sha": "4bf2d573d4f967580eb8aa07333eb077e963b8ff", "filename": "src/test/ui/explicit/explicit-self-lifetime-mismatch.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Fexplicit%2Fexplicit-self-lifetime-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Fexplicit%2Fexplicit-self-lifetime-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexplicit%2Fexplicit-self-lifetime-mismatch.stderr?ref=8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3", "patch": "@@ -1,4 +1,4 @@\n-error[E0308]: mismatched method receiver\n+error[E0308]: mismatched `self` parameter type\n   --> $DIR/explicit-self-lifetime-mismatch.rs:8:12\n    |\n LL |            Foo<'b,'a>\n@@ -17,7 +17,7 @@ note: ...does not necessarily outlive the lifetime 'a as defined on the impl at\n LL | impl<'a,'b> Foo<'a,'b> {\n    |      ^^\n \n-error[E0308]: mismatched method receiver\n+error[E0308]: mismatched `self` parameter type\n   --> $DIR/explicit-self-lifetime-mismatch.rs:8:12\n    |\n LL |            Foo<'b,'a>"}, {"sha": "b47568400c3b702b5fd381647a59d2ee8bfd32f6", "filename": "src/test/ui/issues/issue-17740.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Fissues%2Fissue-17740.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Fissues%2Fissue-17740.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17740.rs?ref=8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3", "patch": "@@ -4,11 +4,11 @@ struct Foo<'a> {\n \n impl <'a> Foo<'a>{\n     fn bar(self: &mut Foo) {\n-    //~^ mismatched method receiver\n+    //~^ mismatched `self` parameter type\n     //~| expected type `Foo<'a>`\n     //~| found type `Foo<'_>`\n     //~| lifetime mismatch\n-    //~| mismatched method receiver\n+    //~| mismatched `self` parameter type\n     //~| expected type `Foo<'a>`\n     //~| found type `Foo<'_>`\n     //~| lifetime mismatch"}, {"sha": "b8a0a0676319a292aa5ac9888fc9f3b7336ca303", "filename": "src/test/ui/issues/issue-17740.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Fissues%2Fissue-17740.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Fissues%2Fissue-17740.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17740.stderr?ref=8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3", "patch": "@@ -1,4 +1,4 @@\n-error[E0308]: mismatched method receiver\n+error[E0308]: mismatched `self` parameter type\n   --> $DIR/issue-17740.rs:6:18\n    |\n LL |     fn bar(self: &mut Foo) {\n@@ -23,7 +23,7 @@ note: ...does not necessarily outlive the lifetime 'a as defined on the impl at\n LL | impl <'a> Foo<'a>{\n    |       ^^\n \n-error[E0308]: mismatched method receiver\n+error[E0308]: mismatched `self` parameter type\n   --> $DIR/issue-17740.rs:6:18\n    |\n LL |     fn bar(self: &mut Foo) {"}, {"sha": "44279cc867b46e268a4a5e58f76bf937f0990fb7", "filename": "src/test/ui/issues/issue-17905-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Fissues%2Fissue-17905-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Fissues%2Fissue-17905-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17905-2.rs?ref=8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3", "patch": "@@ -6,8 +6,8 @@ impl Pair<\n     isize\n > {\n     fn say(self: &Pair<&str, isize>) {\n-//~^ ERROR mismatched method receiver\n-//~| ERROR mismatched method receiver\n+//~^ ERROR mismatched `self` parameter type\n+//~| ERROR mismatched `self` parameter type\n         println!(\"{:?}\", self);\n     }\n }"}, {"sha": "585bc9c14883bfb867afe9f9e22eed6a44ab15d3", "filename": "src/test/ui/issues/issue-17905-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Fissues%2Fissue-17905-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Fissues%2Fissue-17905-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17905-2.stderr?ref=8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3", "patch": "@@ -1,4 +1,4 @@\n-error[E0308]: mismatched method receiver\n+error[E0308]: mismatched `self` parameter type\n   --> $DIR/issue-17905-2.rs:8:18\n    |\n LL |     fn say(self: &Pair<&str, isize>) {\n@@ -21,7 +21,7 @@ note: ...does not necessarily outlive the lifetime '_ as defined on the impl at\n LL |     &str,\n    |     ^\n \n-error[E0308]: mismatched method receiver\n+error[E0308]: mismatched `self` parameter type\n   --> $DIR/issue-17905-2.rs:8:18\n    |\n LL |     fn say(self: &Pair<&str, isize>) {"}, {"sha": "d5e7092801ecd9b3806bc9fa5360f7b39940b20e", "filename": "src/test/ui/issues/issue-18959.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Fissues%2Fissue-18959.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Fissues%2Fissue-18959.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18959.stderr?ref=8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3", "patch": "@@ -1,10 +1,11 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/issue-18959.rs:11:1\n    |\n+LL | pub trait Foo { fn foo<T>(&self, ext_thing: &T); }\n+   |                    --- method `foo` has generic type parameters\n+...\n LL | fn foo(b: &dyn Bar) {\n    | ^^^^^^^^^^^^^^^^^^^ the trait `Bar` cannot be made into an object\n-   |\n-   = note: method `foo` has generic type parameters\n \n error: aborting due to previous error\n "}, {"sha": "92bfdf1f26e93828b4eb0796d05086b17dc7826d", "filename": "src/test/ui/issues/issue-19380.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Fissues%2Fissue-19380.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Fissues%2Fissue-19380.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19380.stderr?ref=8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3", "patch": "@@ -1,10 +1,11 @@\n error[E0038]: the trait `Qiz` cannot be made into an object\n   --> $DIR/issue-19380.rs:11:3\n    |\n+LL |   fn qiz();\n+   |      --- associated function `qiz` has no `self` parameter\n+...\n LL |   foos: &'static [&'static (dyn Qiz + 'static)]\n    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Qiz` cannot be made into an object\n-   |\n-   = note: method `qiz` has no receiver\n \n error: aborting due to previous error\n "}, {"sha": "5415a45f7d621c41812f53ed39eb7bd0ed9fae59", "filename": "src/test/ui/issues/issue-19538.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Fissues%2Fissue-19538.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Fissues%2Fissue-19538.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19538.stderr?ref=8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3", "patch": "@@ -1,18 +1,21 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/issue-19538.rs:17:15\n    |\n+LL |     fn foo<T>(&self, val: T);\n+   |        --- method `foo` has generic type parameters\n+...\n LL |     let test: &mut dyn Bar = &mut thing;\n    |               ^^^^^^^^^^^^ the trait `Bar` cannot be made into an object\n-   |\n-   = note: method `foo` has generic type parameters\n \n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/issue-19538.rs:17:30\n    |\n+LL |     fn foo<T>(&self, val: T);\n+   |        --- method `foo` has generic type parameters\n+...\n LL |     let test: &mut dyn Bar = &mut thing;\n    |                              ^^^^^^^^^^ the trait `Bar` cannot be made into an object\n    |\n-   = note: method `foo` has generic type parameters\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&mut dyn Bar>` for `&mut Thing`\n \n error: aborting due to 2 previous errors"}, {"sha": "02475ea97e3d1fe81fd8a95851f873912b24bffc", "filename": "src/test/ui/issues/issue-50781.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Fissues%2Fissue-50781.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Fissues%2Fissue-50781.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50781.stderr?ref=8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3", "patch": "@@ -1,8 +1,8 @@\n error: the trait `X` cannot be made into an object\n-  --> $DIR/issue-50781.rs:6:5\n+  --> $DIR/issue-50781.rs:6:8\n    |\n LL |     fn foo(&self) where Self: Trait;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^\n    |\n note: lint level defined here\n   --> $DIR/issue-50781.rs:1:9"}, {"sha": "b1dac26d65a15552b0171de954b53273a0e4f8f0", "filename": "src/test/ui/issues/issue-56806.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Fissues%2Fissue-56806.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Fissues%2Fissue-56806.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-56806.rs?ref=8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3", "patch": "@@ -1,7 +1,6 @@\n pub trait Trait {\n     fn dyn_instead_of_self(self: Box<dyn Trait>);\n-    //~^ ERROR invalid method receiver type: std::boxed::Box<(dyn Trait + 'static)>\n+    //~^ ERROR invalid `self` parameter type\n }\n \n-pub fn main() {\n-}\n+pub fn main() {}"}, {"sha": "a4f9aadcfef3ee3f1bb5e1e74cd4668c93dc1a4d", "filename": "src/test/ui/issues/issue-56806.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Fissues%2Fissue-56806.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Fissues%2Fissue-56806.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-56806.stderr?ref=8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3", "patch": "@@ -1,11 +1,12 @@\n-error[E0307]: invalid method receiver type: std::boxed::Box<(dyn Trait + 'static)>\n+error[E0307]: invalid `self` parameter type: std::boxed::Box<(dyn Trait + 'static)>\n   --> $DIR/issue-56806.rs:2:34\n    |\n LL |     fn dyn_instead_of_self(self: Box<dyn Trait>);\n    |                                  ^^^^^^^^^^^^^^\n    |\n-   = note: type must be `Self` or a type that dereferences to it\n+   = note: type of `self` must be `Self` or a type that dereferences to it\n    = help: consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one of the previous types except `Self`)\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0307`."}, {"sha": "7d5aa00356e0b5b767cedf8af3c89e84c12d41f4", "filename": "src/test/ui/object-safety/object-safety-associated-consts.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.stderr?ref=8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3", "patch": "@@ -1,10 +1,11 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-associated-consts.rs:9:1\n    |\n+LL |     const X: usize;\n+   |           - the trait cannot contain associated consts like `X`\n+...\n LL | fn make_bar<T:Bar>(t: &T) -> &dyn Bar {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Bar` cannot be made into an object\n-   |\n-   = note: the trait cannot contain associated consts like `X`\n \n error: aborting due to previous error\n "}, {"sha": "b25e0052e4163f98c46a95c955af2671a7b68cad", "filename": "src/test/ui/object-safety/object-safety-generics.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-generics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-generics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-generics.stderr?ref=8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3", "patch": "@@ -1,18 +1,20 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-generics.rs:14:1\n    |\n+LL |     fn bar<T>(&self, t: T);\n+   |        --- method `bar` has generic type parameters\n+...\n LL | fn make_bar<T:Bar>(t: &T) -> &dyn Bar {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Bar` cannot be made into an object\n-   |\n-   = note: method `bar` has generic type parameters\n \n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-generics.rs:19:1\n    |\n+LL |     fn bar<T>(&self, t: T);\n+   |        --- method `bar` has generic type parameters\n+...\n LL | fn make_bar_explicit<T:Bar>(t: &T) -> &dyn Bar {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Bar` cannot be made into an object\n-   |\n-   = note: method `bar` has generic type parameters\n \n error: aborting due to 2 previous errors\n "}, {"sha": "971e79cb0210f240b6536b0f4cdaadc7dcb2fd5a", "filename": "src/test/ui/object-safety/object-safety-mentions-Self.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.stderr?ref=8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3", "patch": "@@ -1,18 +1,20 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-mentions-Self.rs:17:1\n    |\n+LL |     fn bar(&self, x: &Self);\n+   |        --- method `bar` references the `Self` type in its parameters or return type\n+...\n LL | fn make_bar<T:Bar>(t: &T) -> &dyn Bar {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Bar` cannot be made into an object\n-   |\n-   = note: method `bar` references the `Self` type in its arguments or return type\n \n error[E0038]: the trait `Baz` cannot be made into an object\n   --> $DIR/object-safety-mentions-Self.rs:22:1\n    |\n+LL |     fn bar(&self) -> Self;\n+   |        --- method `bar` references the `Self` type in its parameters or return type\n+...\n LL | fn make_baz<T:Baz>(t: &T) -> &dyn Baz {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Baz` cannot be made into an object\n-   |\n-   = note: method `bar` references the `Self` type in its arguments or return type\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0de783f60ea4743fd9c5a61ecc14c1a5bcdf502a", "filename": "src/test/ui/object-safety/object-safety-no-static.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-no-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-no-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-no-static.stderr?ref=8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3", "patch": "@@ -1,10 +1,11 @@\n error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/object-safety-no-static.rs:8:1\n    |\n+LL |     fn foo();\n+   |        --- associated function `foo` has no `self` parameter\n+...\n LL | fn foo_implicit<T:Foo+'static>(b: Box<T>) -> Box<dyn Foo + 'static> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n-   |\n-   = note: method `foo` has no receiver\n \n error: aborting due to previous error\n "}, {"sha": "63ac11dc8ae01b463a4269b14dbbdd3ca092fd8e", "filename": "src/test/ui/resolve/issue-3907-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Fresolve%2Fissue-3907-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Fresolve%2Fissue-3907-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-3907-2.stderr?ref=8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3", "patch": "@@ -4,7 +4,7 @@ error[E0038]: the trait `issue_3907::Foo` cannot be made into an object\n LL | fn bar(_x: Foo) {}\n    | ^^^^^^^^^^^^^^^ the trait `issue_3907::Foo` cannot be made into an object\n    |\n-   = note: method `bar` has no receiver\n+   = note: associated function `bar` has no `self` parameter\n \n error: aborting due to previous error\n "}, {"sha": "e6eba377a9578c9178a282268ee3c866e92c556e", "filename": "src/test/ui/self/arbitrary-self-types-not-object-safe.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.stderr?ref=8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3", "patch": "@@ -1,18 +1,21 @@\n error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/arbitrary-self-types-not-object-safe.rs:31:32\n    |\n+LL |     fn foo(self: &Rc<Self>) -> usize;\n+   |        --- method `foo`'s `self` parameter cannot be dispatched on\n+...\n LL |     let x = Rc::new(5usize) as Rc<dyn Foo>;\n    |                                ^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n-   |\n-   = note: method `foo`'s receiver cannot be dispatched on\n \n error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/arbitrary-self-types-not-object-safe.rs:31:13\n    |\n+LL |     fn foo(self: &Rc<Self>) -> usize;\n+   |        --- method `foo`'s `self` parameter cannot be dispatched on\n+...\n LL |     let x = Rc::new(5usize) as Rc<dyn Foo>;\n    |             ^^^^^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n    |\n-   = note: method `foo`'s receiver cannot be dispatched on\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<std::rc::Rc<dyn Foo>>` for `std::rc::Rc<usize>`\n \n error: aborting due to 2 previous errors"}, {"sha": "7a0cfb679ed67f84c4c14919f3a8921f7b856550", "filename": "src/test/ui/span/issue-27522.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Fspan%2Fissue-27522.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Fspan%2Fissue-27522.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-27522.rs?ref=8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3", "patch": "@@ -3,7 +3,7 @@\n struct SomeType {}\n \n trait Foo {\n-    fn handler(self: &SomeType); //~ ERROR invalid method receiver type\n+    fn handler(self: &SomeType); //~ ERROR invalid `self` parameter type\n }\n \n fn main() {}"}, {"sha": "8a254a9685543d6af60ca50aa544ba82d81c0ea0", "filename": "src/test/ui/span/issue-27522.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Fspan%2Fissue-27522.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Fspan%2Fissue-27522.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-27522.stderr?ref=8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3", "patch": "@@ -1,11 +1,12 @@\n-error[E0307]: invalid method receiver type: &SomeType\n+error[E0307]: invalid `self` parameter type: &SomeType\n   --> $DIR/issue-27522.rs:6:22\n    |\n LL |     fn handler(self: &SomeType);\n    |                      ^^^^^^^^^\n    |\n-   = note: type must be `Self` or a type that dereferences to it\n+   = note: type of `self` must be `Self` or a type that dereferences to it\n    = help: consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one of the previous types except `Self`)\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0307`."}, {"sha": "16ea7bdb0807d19bd48c85f85d4bfee1d8f97f60", "filename": "src/test/ui/traits/trait-item-privacy.stderr", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Ftraits%2Ftrait-item-privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Ftraits%2Ftrait-item-privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-item-privacy.stderr?ref=8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3", "patch": "@@ -110,12 +110,17 @@ LL |     C::A;\n error[E0038]: the trait `assoc_const::C` cannot be made into an object\n   --> $DIR/trait-item-privacy.rs:101:5\n    |\n+LL |         const A: u8 = 0;\n+   |               - the trait cannot contain associated consts like `A`\n+...\n+LL |         const B: u8 = 0;\n+   |               - the trait cannot contain associated consts like `B`\n+...\n+LL |         const C: u8 = 0;\n+   |               - the trait cannot contain associated consts like `C`\n+...\n LL |     C::A;\n    |     ^^^^ the trait `assoc_const::C` cannot be made into an object\n-   |\n-   = note: the trait cannot contain associated consts like `C`\n-   = note: the trait cannot contain associated consts like `B`\n-   = note: the trait cannot contain associated consts like `A`\n \n error[E0223]: ambiguous associated type\n   --> $DIR/trait-item-privacy.rs:115:12"}, {"sha": "3ac1e96b30c95121989a9d3fdd11a980864f3a6b", "filename": "src/test/ui/traits/trait-object-safety.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-safety.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-safety.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-safety.stderr?ref=8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3", "patch": "@@ -1,19 +1,22 @@\n error[E0038]: the trait `Tr` cannot be made into an object\n   --> $DIR/trait-object-safety.rs:15:22\n    |\n+LL |     fn foo();\n+   |        --- associated function `foo` has no `self` parameter\n+...\n LL |     let _: &dyn Tr = &St;\n    |                      ^^^ the trait `Tr` cannot be made into an object\n    |\n-   = note: method `foo` has no receiver\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&dyn Tr>` for `&St`\n \n error[E0038]: the trait `Tr` cannot be made into an object\n   --> $DIR/trait-object-safety.rs:15:12\n    |\n+LL |     fn foo();\n+   |        --- associated function `foo` has no `self` parameter\n+...\n LL |     let _: &dyn Tr = &St;\n    |            ^^^^^^^ the trait `Tr` cannot be made into an object\n-   |\n-   = note: method `foo` has no receiver\n \n error: aborting due to 2 previous errors\n "}, {"sha": "83c2c06527493782371e1dcc11977027411c49b8", "filename": "src/test/ui/traits/trait-test-2.stderr", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Ftraits%2Ftrait-test-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Ftraits%2Ftrait-test-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-test-2.stderr?ref=8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3", "patch": "@@ -13,20 +13,25 @@ LL |     10.blah::<i32, i32>();\n error[E0038]: the trait `bar` cannot be made into an object\n   --> $DIR/trait-test-2.rs:11:16\n    |\n+LL | trait bar { fn dup(&self) -> Self; fn blah<X>(&self); }\n+   |                ---                    ---- method `blah` has generic type parameters\n+   |                |\n+   |                method `dup` references the `Self` type in its parameters or return type\n+...\n LL |     (box 10 as Box<dyn bar>).dup();\n    |                ^^^^^^^^^^^^ the trait `bar` cannot be made into an object\n-   |\n-   = note: method `dup` references the `Self` type in its arguments or return type\n-   = note: method `blah` has generic type parameters\n \n error[E0038]: the trait `bar` cannot be made into an object\n   --> $DIR/trait-test-2.rs:11:6\n    |\n+LL | trait bar { fn dup(&self) -> Self; fn blah<X>(&self); }\n+   |                ---                    ---- method `blah` has generic type parameters\n+   |                |\n+   |                method `dup` references the `Self` type in its parameters or return type\n+...\n LL |     (box 10 as Box<dyn bar>).dup();\n    |      ^^^^^^ the trait `bar` cannot be made into an object\n    |\n-   = note: method `dup` references the `Self` type in its arguments or return type\n-   = note: method `blah` has generic type parameters\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<std::boxed::Box<dyn bar>>` for `std::boxed::Box<{integer}>`\n \n error: aborting due to 4 previous errors"}, {"sha": "b315fe9df8afd349073f6fed2855a5b635ebcab3", "filename": "src/test/ui/type/type-parameter-defaults-referencing-Self-ppaux.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-defaults-referencing-Self-ppaux.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-defaults-referencing-Self-ppaux.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-defaults-referencing-Self-ppaux.stderr?ref=8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3", "patch": "@@ -13,10 +13,11 @@ LL |     let y = x as dyn MyAdd<i32>;\n error[E0038]: the trait `MyAdd` cannot be made into an object\n   --> $DIR/type-parameter-defaults-referencing-Self-ppaux.rs:14:18\n    |\n+LL | trait MyAdd<Rhs=Self> { fn add(&self, other: &Rhs) -> Self; }\n+   |                            --- method `add` references the `Self` type in its parameters or return type\n+...\n LL |     let y = x as dyn MyAdd<i32>;\n    |                  ^^^^^^^^^^^^^^ the trait `MyAdd` cannot be made into an object\n-   |\n-   = note: method `add` references the `Self` type in its arguments or return type\n \n error: aborting due to 2 previous errors\n "}, {"sha": "bdb8e197fbe498e1980562de3e00fc19f4d237bf", "filename": "src/test/ui/ufcs/ufcs-explicit-self-bad.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Fufcs%2Fufcs-explicit-self-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Fufcs%2Fufcs-explicit-self-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fufcs%2Fufcs-explicit-self-bad.rs?ref=8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3", "patch": "@@ -6,7 +6,7 @@ struct Foo {\n \n impl Foo {\n     fn foo(self: isize, x: isize) -> isize {\n-        //~^ ERROR invalid method receiver type\n+        //~^ ERROR invalid `self` parameter type\n         self.f + x\n     }\n }\n@@ -17,11 +17,11 @@ struct Bar<T> {\n \n impl<T> Bar<T> {\n     fn foo(self: Bar<isize>, x: isize) -> isize {\n-        //~^ ERROR invalid method receiver type\n+        //~^ ERROR invalid `self` parameter type\n         x\n     }\n     fn bar(self: &Bar<usize>, x: isize) -> isize {\n-        //~^ ERROR invalid method receiver type\n+        //~^ ERROR invalid `self` parameter type\n         x\n     }\n }\n@@ -34,14 +34,14 @@ trait SomeTrait {\n \n impl<'a, T> SomeTrait for &'a Bar<T> {\n     fn dummy1(self: &&'a Bar<T>) { }\n-    fn dummy2(self: &Bar<T>) {} //~ ERROR mismatched method receiver\n-    //~^ ERROR mismatched method receiver\n+    fn dummy2(self: &Bar<T>) {} //~ ERROR mismatched `self` parameter type\n+    //~^ ERROR mismatched `self` parameter type\n     fn dummy3(self: &&Bar<T>) {}\n-    //~^ ERROR mismatched method receiver\n+    //~^ ERROR mismatched `self` parameter type\n     //~| expected type `&'a Bar<T>`\n     //~| found type `&Bar<T>`\n     //~| lifetime mismatch\n-    //~| ERROR mismatched method receiver\n+    //~| ERROR mismatched `self` parameter type\n     //~| expected type `&'a Bar<T>`\n     //~| found type `&Bar<T>`\n     //~| lifetime mismatch"}, {"sha": "b2fe1b281fc999ee0ed8324d1b536abab6a2dc7f", "filename": "src/test/ui/ufcs/ufcs-explicit-self-bad.stderr", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Fufcs%2Fufcs-explicit-self-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Fufcs%2Fufcs-explicit-self-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fufcs%2Fufcs-explicit-self-bad.stderr?ref=8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3", "patch": "@@ -1,31 +1,31 @@\n-error[E0307]: invalid method receiver type: isize\n+error[E0307]: invalid `self` parameter type: isize\n   --> $DIR/ufcs-explicit-self-bad.rs:8:18\n    |\n LL |     fn foo(self: isize, x: isize) -> isize {\n    |                  ^^^^^\n    |\n-   = note: type must be `Self` or a type that dereferences to it\n+   = note: type of `self` must be `Self` or a type that dereferences to it\n    = help: consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one of the previous types except `Self`)\n \n-error[E0307]: invalid method receiver type: Bar<isize>\n+error[E0307]: invalid `self` parameter type: Bar<isize>\n   --> $DIR/ufcs-explicit-self-bad.rs:19:18\n    |\n LL |     fn foo(self: Bar<isize>, x: isize) -> isize {\n    |                  ^^^^^^^^^^\n    |\n-   = note: type must be `Self` or a type that dereferences to it\n+   = note: type of `self` must be `Self` or a type that dereferences to it\n    = help: consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one of the previous types except `Self`)\n \n-error[E0307]: invalid method receiver type: &Bar<usize>\n+error[E0307]: invalid `self` parameter type: &Bar<usize>\n   --> $DIR/ufcs-explicit-self-bad.rs:23:18\n    |\n LL |     fn bar(self: &Bar<usize>, x: isize) -> isize {\n    |                  ^^^^^^^^^^^\n    |\n-   = note: type must be `Self` or a type that dereferences to it\n+   = note: type of `self` must be `Self` or a type that dereferences to it\n    = help: consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one of the previous types except `Self`)\n \n-error[E0308]: mismatched method receiver\n+error[E0308]: mismatched `self` parameter type\n   --> $DIR/ufcs-explicit-self-bad.rs:37:21\n    |\n LL |     fn dummy2(self: &Bar<T>) {}\n@@ -44,7 +44,7 @@ note: ...does not necessarily outlive the lifetime 'a as defined on the impl at\n LL | impl<'a, T> SomeTrait for &'a Bar<T> {\n    |      ^^\n \n-error[E0308]: mismatched method receiver\n+error[E0308]: mismatched `self` parameter type\n   --> $DIR/ufcs-explicit-self-bad.rs:37:21\n    |\n LL |     fn dummy2(self: &Bar<T>) {}\n@@ -63,7 +63,7 @@ note: ...does not necessarily outlive the anonymous lifetime #1 defined on the m\n LL |     fn dummy2(self: &Bar<T>) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0308]: mismatched method receiver\n+error[E0308]: mismatched `self` parameter type\n   --> $DIR/ufcs-explicit-self-bad.rs:39:21\n    |\n LL |     fn dummy3(self: &&Bar<T>) {}\n@@ -82,7 +82,7 @@ note: ...does not necessarily outlive the lifetime 'a as defined on the impl at\n LL | impl<'a, T> SomeTrait for &'a Bar<T> {\n    |      ^^\n \n-error[E0308]: mismatched method receiver\n+error[E0308]: mismatched `self` parameter type\n   --> $DIR/ufcs-explicit-self-bad.rs:39:21\n    |\n LL |     fn dummy3(self: &&Bar<T>) {}\n@@ -103,4 +103,5 @@ LL |     fn dummy3(self: &&Bar<T>) {}\n \n error: aborting due to 7 previous errors\n \n-For more information about this error, try `rustc --explain E0308`.\n+Some errors have detailed explanations: E0307, E0308.\n+For more information about an error, try `rustc --explain E0307`."}, {"sha": "0d8441f87e7e776618a5d3979208478dbcb91f7e", "filename": "src/test/ui/wf/wf-object-safe.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Fwf%2Fwf-object-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3/src%2Ftest%2Fui%2Fwf%2Fwf-object-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-object-safe.stderr?ref=8ef11fcf4ba6d7238312e6478e27ff6f1bb595d3", "patch": "@@ -1,10 +1,11 @@\n error[E0038]: the trait `A` cannot be made into an object\n   --> $DIR/wf-object-safe.rs:9:13\n    |\n+LL |     fn foo(&self, _x: &Self);\n+   |        --- method `foo` references the `Self` type in its parameters or return type\n+...\n LL |     let _x: &dyn A;\n    |             ^^^^^^ the trait `A` cannot be made into an object\n-   |\n-   = note: method `foo` references the `Self` type in its arguments or return type\n \n error: aborting due to previous error\n "}]}