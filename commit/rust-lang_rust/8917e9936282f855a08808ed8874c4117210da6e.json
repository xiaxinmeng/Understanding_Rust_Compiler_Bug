{"sha": "8917e9936282f855a08808ed8874c4117210da6e", "node_id": "C_kwDOAAsO6NoAKDg5MTdlOTkzNjI4MmY4NTVhMDg4MDhlZDg4NzRjNDExNzIxMGRhNmU", "commit": {"author": {"name": "Ibraheem Ahmed", "email": "ibraheem@ibraheem.ca", "date": "2023-01-12T02:29:14Z"}, "committer": {"name": "Ibraheem Ahmed", "email": "ibraheem@ibraheem.ca", "date": "2023-01-12T02:29:14Z"}, "message": "rework and document backoff behavior of `sync::mpsc`", "tree": {"sha": "9aecc07b0835416b00735928e0d2c5635ca8f40b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9aecc07b0835416b00735928e0d2c5635ca8f40b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8917e9936282f855a08808ed8874c4117210da6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8917e9936282f855a08808ed8874c4117210da6e", "html_url": "https://github.com/rust-lang/rust/commit/8917e9936282f855a08808ed8874c4117210da6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8917e9936282f855a08808ed8874c4117210da6e/comments", "author": {"login": "ibraheemdev", "id": 34988408, "node_id": "MDQ6VXNlcjM0OTg4NDA4", "avatar_url": "https://avatars.githubusercontent.com/u/34988408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibraheemdev", "html_url": "https://github.com/ibraheemdev", "followers_url": "https://api.github.com/users/ibraheemdev/followers", "following_url": "https://api.github.com/users/ibraheemdev/following{/other_user}", "gists_url": "https://api.github.com/users/ibraheemdev/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibraheemdev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibraheemdev/subscriptions", "organizations_url": "https://api.github.com/users/ibraheemdev/orgs", "repos_url": "https://api.github.com/users/ibraheemdev/repos", "events_url": "https://api.github.com/users/ibraheemdev/events{/privacy}", "received_events_url": "https://api.github.com/users/ibraheemdev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibraheemdev", "id": 34988408, "node_id": "MDQ6VXNlcjM0OTg4NDA4", "avatar_url": "https://avatars.githubusercontent.com/u/34988408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibraheemdev", "html_url": "https://github.com/ibraheemdev", "followers_url": "https://api.github.com/users/ibraheemdev/followers", "following_url": "https://api.github.com/users/ibraheemdev/following{/other_user}", "gists_url": "https://api.github.com/users/ibraheemdev/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibraheemdev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibraheemdev/subscriptions", "organizations_url": "https://api.github.com/users/ibraheemdev/orgs", "repos_url": "https://api.github.com/users/ibraheemdev/repos", "events_url": "https://api.github.com/users/ibraheemdev/events{/privacy}", "received_events_url": "https://api.github.com/users/ibraheemdev/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8276c94ac06b272e88fb1bb9c5f6615fc5876ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8276c94ac06b272e88fb1bb9c5f6615fc5876ef", "html_url": "https://github.com/rust-lang/rust/commit/f8276c94ac06b272e88fb1bb9c5f6615fc5876ef"}], "stats": {"total": 61, "additions": 30, "deletions": 31}, "files": [{"sha": "c1e3e48b04468c8c501d45392b3c06b35fa34ac8", "filename": "library/std/src/sync/mpmc/array.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8917e9936282f855a08808ed8874c4117210da6e/library%2Fstd%2Fsrc%2Fsync%2Fmpmc%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8917e9936282f855a08808ed8874c4117210da6e/library%2Fstd%2Fsrc%2Fsync%2Fmpmc%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmpmc%2Farray.rs?ref=8917e9936282f855a08808ed8874c4117210da6e", "patch": "@@ -168,7 +168,7 @@ impl<T> Channel<T> {\n                         return true;\n                     }\n                     Err(_) => {\n-                        backoff.spin();\n+                        backoff.spin_light();\n                         tail = self.tail.load(Ordering::Relaxed);\n                     }\n                 }\n@@ -182,11 +182,11 @@ impl<T> Channel<T> {\n                     return false;\n                 }\n \n-                backoff.spin();\n+                backoff.spin_light();\n                 tail = self.tail.load(Ordering::Relaxed);\n             } else {\n                 // Snooze because we need to wait for the stamp to get updated.\n-                backoff.snooze();\n+                backoff.spin_heavy();\n                 tail = self.tail.load(Ordering::Relaxed);\n             }\n         }\n@@ -251,7 +251,7 @@ impl<T> Channel<T> {\n                         return true;\n                     }\n                     Err(_) => {\n-                        backoff.spin();\n+                        backoff.spin_light();\n                         head = self.head.load(Ordering::Relaxed);\n                     }\n                 }\n@@ -273,11 +273,11 @@ impl<T> Channel<T> {\n                     }\n                 }\n \n-                backoff.spin();\n+                backoff.spin_light();\n                 head = self.head.load(Ordering::Relaxed);\n             } else {\n                 // Snooze because we need to wait for the stamp to get updated.\n-                backoff.snooze();\n+                backoff.spin_heavy();\n                 head = self.head.load(Ordering::Relaxed);\n             }\n         }\n@@ -330,7 +330,7 @@ impl<T> Channel<T> {\n                 if backoff.is_completed() {\n                     break;\n                 } else {\n-                    backoff.spin();\n+                    backoff.spin_light();\n                 }\n             }\n "}, {"sha": "ec6c0726ac790304403e374be47c6246c50f66dc", "filename": "library/std/src/sync/mpmc/list.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8917e9936282f855a08808ed8874c4117210da6e/library%2Fstd%2Fsrc%2Fsync%2Fmpmc%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8917e9936282f855a08808ed8874c4117210da6e/library%2Fstd%2Fsrc%2Fsync%2Fmpmc%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmpmc%2Flist.rs?ref=8917e9936282f855a08808ed8874c4117210da6e", "patch": "@@ -46,7 +46,7 @@ impl<T> Slot<T> {\n     fn wait_write(&self) {\n         let backoff = Backoff::new();\n         while self.state.load(Ordering::Acquire) & WRITE == 0 {\n-            backoff.snooze();\n+            backoff.spin_heavy();\n         }\n     }\n }\n@@ -82,7 +82,7 @@ impl<T> Block<T> {\n             if !next.is_null() {\n                 return next;\n             }\n-            backoff.snooze();\n+            backoff.spin_heavy();\n         }\n     }\n \n@@ -191,7 +191,7 @@ impl<T> Channel<T> {\n \n             // If we reached the end of the block, wait until the next one is installed.\n             if offset == BLOCK_CAP {\n-                backoff.snooze();\n+                backoff.spin_heavy();\n                 tail = self.tail.index.load(Ordering::Acquire);\n                 block = self.tail.block.load(Ordering::Acquire);\n                 continue;\n@@ -247,7 +247,7 @@ impl<T> Channel<T> {\n                     return true;\n                 },\n                 Err(_) => {\n-                    backoff.spin();\n+                    backoff.spin_light();\n                     tail = self.tail.index.load(Ordering::Acquire);\n                     block = self.tail.block.load(Ordering::Acquire);\n                 }\n@@ -286,7 +286,7 @@ impl<T> Channel<T> {\n \n             // If we reached the end of the block, wait until the next one is installed.\n             if offset == BLOCK_CAP {\n-                backoff.snooze();\n+                backoff.spin_heavy();\n                 head = self.head.index.load(Ordering::Acquire);\n                 block = self.head.block.load(Ordering::Acquire);\n                 continue;\n@@ -320,7 +320,7 @@ impl<T> Channel<T> {\n             // The block can be null here only if the first message is being sent into the channel.\n             // In that case, just wait until it gets initialized.\n             if block.is_null() {\n-                backoff.snooze();\n+                backoff.spin_heavy();\n                 head = self.head.index.load(Ordering::Acquire);\n                 block = self.head.block.load(Ordering::Acquire);\n                 continue;\n@@ -351,7 +351,7 @@ impl<T> Channel<T> {\n                     return true;\n                 },\n                 Err(_) => {\n-                    backoff.spin();\n+                    backoff.spin_light();\n                     head = self.head.index.load(Ordering::Acquire);\n                     block = self.head.block.load(Ordering::Acquire);\n                 }\n@@ -542,7 +542,7 @@ impl<T> Channel<T> {\n             // New updates to tail will be rejected by MARK_BIT and aborted unless it's\n             // at boundary. We need to wait for the updates take affect otherwise there\n             // can be memory leaks.\n-            backoff.snooze();\n+            backoff.spin_heavy();\n             tail = self.tail.index.load(Ordering::Acquire);\n         }\n "}, {"sha": "cfe42750d5239a6a46ab629027581df795c12129", "filename": "library/std/src/sync/mpmc/utils.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/8917e9936282f855a08808ed8874c4117210da6e/library%2Fstd%2Fsrc%2Fsync%2Fmpmc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8917e9936282f855a08808ed8874c4117210da6e/library%2Fstd%2Fsrc%2Fsync%2Fmpmc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmpmc%2Futils.rs?ref=8917e9936282f855a08808ed8874c4117210da6e", "patch": "@@ -91,9 +91,8 @@ impl<T> DerefMut for CachePadded<T> {\n }\n \n const SPIN_LIMIT: u32 = 6;\n-const YIELD_LIMIT: u32 = 10;\n \n-/// Performs exponential backoff in spin loops.\n+/// Performs quadratic backoff in spin loops.\n pub struct Backoff {\n     step: Cell<u32>,\n }\n@@ -104,25 +103,27 @@ impl Backoff {\n         Backoff { step: Cell::new(0) }\n     }\n \n-    /// Backs off in a lock-free loop.\n+    /// Backs off using lightweight spinning.\n     ///\n-    /// This method should be used when we need to retry an operation because another thread made\n-    /// progress.\n+    /// This method should be used for:\n+    ///     - Retrying an operation because another thread made progress. i.e. on CAS failure.\n+    ///     - Waiting for an operation to complete by spinning optimistically for a few iterations\n+    ///     before falling back to parking the thread (see `Backoff::is_completed`).\n     #[inline]\n-    pub fn spin(&self) {\n+    pub fn spin_light(&self) {\n         let step = self.step.get().min(SPIN_LIMIT);\n         for _ in 0..step.pow(2) {\n             crate::hint::spin_loop();\n         }\n \n-        if self.step.get() <= SPIN_LIMIT {\n-            self.step.set(self.step.get() + 1);\n-        }\n+        self.step.set(self.step.get() + 1);\n     }\n \n-    /// Backs off in a blocking loop.\n+    /// Backs off using heavyweight spinning.\n+    ///\n+    /// This method should be used in blocking loops where parking the thread is not an option.\n     #[inline]\n-    pub fn snooze(&self) {\n+    pub fn spin_heavy(&self) {\n         if self.step.get() <= SPIN_LIMIT {\n             for _ in 0..self.step.get().pow(2) {\n                 crate::hint::spin_loop()\n@@ -131,12 +132,10 @@ impl Backoff {\n             crate::thread::yield_now();\n         }\n \n-        if self.step.get() <= YIELD_LIMIT {\n-            self.step.set(self.step.get() + 1);\n-        }\n+        self.step.set(self.step.get() + 1);\n     }\n \n-    /// Returns `true` if quadratic backoff has completed and blocking the thread is advised.\n+    /// Returns `true` if quadratic backoff has completed and parking the thread is advised.\n     #[inline]\n     pub fn is_completed(&self) -> bool {\n         self.step.get() > SPIN_LIMIT"}, {"sha": "33f768dcbe90296d9a98cbc191ad65adc4ce01aa", "filename": "library/std/src/sync/mpmc/zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8917e9936282f855a08808ed8874c4117210da6e/library%2Fstd%2Fsrc%2Fsync%2Fmpmc%2Fzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8917e9936282f855a08808ed8874c4117210da6e/library%2Fstd%2Fsrc%2Fsync%2Fmpmc%2Fzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmpmc%2Fzero.rs?ref=8917e9936282f855a08808ed8874c4117210da6e", "patch": "@@ -57,7 +57,7 @@ impl<T> Packet<T> {\n     fn wait_ready(&self) {\n         let backoff = Backoff::new();\n         while !self.ready.load(Ordering::Acquire) {\n-            backoff.snooze();\n+            backoff.spin_heavy();\n         }\n     }\n }"}]}