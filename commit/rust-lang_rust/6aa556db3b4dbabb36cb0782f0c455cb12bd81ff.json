{"sha": "6aa556db3b4dbabb36cb0782f0c455cb12bd81ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhYTU1NmRiM2I0ZGJhYmIzNmNiMDc4MmYwYzQ1NWNiMTJiZDgxZmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-14T05:31:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-14T05:31:29Z"}, "message": "auto merge of #9843 : sfackler/rust/rustdoc-strip-private, r=alexcrichton\n\nIn addition, the renderer will add comments to structs and enums saying\r\nthat fields or variants have been stripped.\r\n\r\nThe comments are currently\r\n```rust\r\n// some fields stripped\r\n// some variants stripped\r\n```\r\n\r\nI was thinking of changing that to \"some private...\" but passes other than\r\nstrip-private may strip fields or variants as well.\r\n\r\ncc @alexcrichton", "tree": {"sha": "027a870114dc0e5ef44cb94cc2cc87e2f3f5c029", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/027a870114dc0e5ef44cb94cc2cc87e2f3f5c029"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6aa556db3b4dbabb36cb0782f0c455cb12bd81ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6aa556db3b4dbabb36cb0782f0c455cb12bd81ff", "html_url": "https://github.com/rust-lang/rust/commit/6aa556db3b4dbabb36cb0782f0c455cb12bd81ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6aa556db3b4dbabb36cb0782f0c455cb12bd81ff/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "009c3d8bae1c12d36c77649dde90523b708b8d10", "url": "https://api.github.com/repos/rust-lang/rust/commits/009c3d8bae1c12d36c77649dde90523b708b8d10", "html_url": "https://github.com/rust-lang/rust/commit/009c3d8bae1c12d36c77649dde90523b708b8d10"}, {"sha": "d6d31d788d453d411077b8dad8ad74c84113defa", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6d31d788d453d411077b8dad8ad74c84113defa", "html_url": "https://github.com/rust-lang/rust/commit/d6d31d788d453d411077b8dad8ad74c84113defa"}], "stats": {"total": 36, "additions": 27, "deletions": 9}, "files": [{"sha": "d3e5c8e32db1e4dfbe844e70f077c0c0dbb094bc", "filename": "src/librustdoc/clean.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6aa556db3b4dbabb36cb0782f0c455cb12bd81ff/src%2Flibrustdoc%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aa556db3b4dbabb36cb0782f0c455cb12bd81ff/src%2Flibrustdoc%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean.rs?ref=6aa556db3b4dbabb36cb0782f0c455cb12bd81ff", "patch": "@@ -685,6 +685,7 @@ pub struct Struct {\n     struct_type: doctree::StructType,\n     generics: Generics,\n     fields: ~[Item],\n+    fields_stripped: bool,\n }\n \n impl Clean<Item> for doctree::Struct {\n@@ -699,6 +700,7 @@ impl Clean<Item> for doctree::Struct {\n                 struct_type: self.struct_type,\n                 generics: self.generics.clean(),\n                 fields: self.fields.clean(),\n+                fields_stripped: false,\n             }),\n         }\n     }\n@@ -711,13 +713,15 @@ impl Clean<Item> for doctree::Struct {\n pub struct VariantStruct {\n     struct_type: doctree::StructType,\n     fields: ~[Item],\n+    fields_stripped: bool,\n }\n \n impl Clean<VariantStruct> for syntax::ast::struct_def {\n     fn clean(&self) -> VariantStruct {\n         VariantStruct {\n             struct_type: doctree::struct_type_from_def(self),\n             fields: self.fields.clean(),\n+            fields_stripped: false,\n         }\n     }\n }\n@@ -726,6 +730,7 @@ impl Clean<VariantStruct> for syntax::ast::struct_def {\n pub struct Enum {\n     variants: ~[Item],\n     generics: Generics,\n+    variants_stripped: bool,\n }\n \n impl Clean<Item> for doctree::Enum {\n@@ -739,6 +744,7 @@ impl Clean<Item> for doctree::Enum {\n             inner: EnumItem(Enum {\n                 variants: self.variants.clean(),\n                 generics: self.generics.clean(),\n+                variants_stripped: false,\n             }),\n         }\n     }"}, {"sha": "080c7de835cb5c6edbe428c1e22612708df4590a", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6aa556db3b4dbabb36cb0782f0c455cb12bd81ff/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aa556db3b4dbabb36cb0782f0c455cb12bd81ff/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=6aa556db3b4dbabb36cb0782f0c455cb12bd81ff", "patch": "@@ -27,7 +27,9 @@ pub trait DocFolder {\n             StructItem(i) => {\n                 let mut i = i;\n                 let mut foo = ~[]; swap(&mut foo, &mut i.fields);\n+                let num_fields = foo.len();\n                 i.fields.extend(&mut foo.move_iter().filter_map(|x| self.fold_item(x)));\n+                i.fields_stripped |= num_fields != i.fields.len();\n                 StructItem(i)\n             },\n             ModuleItem(i) => {\n@@ -36,7 +38,9 @@ pub trait DocFolder {\n             EnumItem(i) => {\n                 let mut i = i;\n                 let mut foo = ~[]; swap(&mut foo, &mut i.variants);\n+                let num_variants = foo.len();\n                 i.variants.extend(&mut foo.move_iter().filter_map(|x| self.fold_item(x)));\n+                i.variants_stripped |= num_variants != i.variants.len();\n                 EnumItem(i)\n             },\n             TraitItem(i) => {\n@@ -73,7 +77,9 @@ pub trait DocFolder {\n                     StructVariant(j) => {\n                         let mut j = j;\n                         let mut foo = ~[]; swap(&mut foo, &mut j.fields);\n+                        let num_fields = foo.len();\n                         j.fields.extend(&mut foo.move_iter().filter_map(c));\n+                        j.fields_stripped |= num_fields != j.fields.len();\n                         VariantItem(Variant {kind: StructVariant(j), ..i2})\n                     },\n                     _ => VariantItem(i2)"}, {"sha": "bb78b5aabb5f9e2f82f7a1100fbfbe1529bc930a", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6aa556db3b4dbabb36cb0782f0c455cb12bd81ff/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aa556db3b4dbabb36cb0782f0c455cb12bd81ff/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=6aa556db3b4dbabb36cb0782f0c455cb12bd81ff", "patch": "@@ -1265,7 +1265,8 @@ fn render_method(w: &mut io::Writer, meth: &clean::Item, withlink: bool) {\n \n fn item_struct(w: &mut io::Writer, it: &clean::Item, s: &clean::Struct) {\n     write!(w, \"<pre class='struct'>\");\n-    render_struct(w, it, Some(&s.generics), s.struct_type, s.fields, \"\", true);\n+    render_struct(w, it, Some(&s.generics), s.struct_type, s.fields,\n+                  s.fields_stripped, \"\", true);\n     write!(w, \"</pre>\");\n \n     document(w, it);\n@@ -1312,14 +1313,18 @@ fn item_enum(w: &mut io::Writer, it: &clean::Item, e: &clean::Enum) {\n                         }\n                         clean::StructVariant(ref s) => {\n                             render_struct(w, v, None, s.struct_type, s.fields,\n-                                          \"    \", false);\n+                                          s.fields_stripped, \"    \", false);\n                         }\n                     }\n                 }\n                 _ => unreachable!()\n             }\n             write!(w, \",\\n\");\n         }\n+\n+        if e.variants_stripped {\n+            write!(w, \"    // some variants omitted\\n\");\n+        }\n         write!(w, \"\\\\}\");\n     }\n     write!(w, \"</pre>\");\n@@ -1343,6 +1348,7 @@ fn render_struct(w: &mut io::Writer, it: &clean::Item,\n                  g: Option<&clean::Generics>,\n                  ty: doctree::StructType,\n                  fields: &[clean::Item],\n+                 fields_stripped: bool,\n                  tab: &str,\n                  structhead: bool) {\n     write!(w, \"{}{}{}\",\n@@ -1368,6 +1374,10 @@ fn render_struct(w: &mut io::Writer, it: &clean::Item,\n                     _ => unreachable!()\n                 }\n             }\n+\n+            if fields_stripped {\n+                write!(w, \"    // some fields omitted\\n{}\", tab);\n+            }\n             write!(w, \"\\\\}\");\n         }\n         doctree::Tuple | doctree::Newtype => {"}, {"sha": "43f2896a0d2b4dc6fc64ad15a2dc3431fbce19c4", "filename": "src/librustdoc/passes.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6aa556db3b4dbabb36cb0782f0c455cb12bd81ff/src%2Flibrustdoc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aa556db3b4dbabb36cb0782f0c455cb12bd81ff/src%2Flibrustdoc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses.rs?ref=6aa556db3b4dbabb36cb0782f0c455cb12bd81ff", "patch": "@@ -70,17 +70,13 @@ pub fn strip_private(mut crate: clean::Crate) -> plugins::PluginResult {\n                     }\n                 }\n \n-                // These are public-by-default (if the enum was public)\n-                clean::VariantItem(*) => {\n+                // These are public-by-default (if the enum/struct was public)\n+                clean::VariantItem(*) | clean::StructFieldItem(*) => {\n                     if i.visibility == Some(ast::private) {\n                         return None;\n                     }\n                 }\n \n-                // We show these regardless of whether they're public/private\n-                // because it's useful to see sometimes\n-                clean::StructFieldItem(*) => {}\n-\n                 // handled below\n                 clean::ModuleItem(*) => {}\n "}, {"sha": "a724ff3bf74d8d37f0b620327a93e033f3a40faa", "filename": "src/librustdoc/rustdoc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6aa556db3b4dbabb36cb0782f0c455cb12bd81ff/src%2Flibrustdoc%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aa556db3b4dbabb36cb0782f0c455cb12bd81ff/src%2Flibrustdoc%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Frustdoc.rs?ref=6aa556db3b4dbabb36cb0782f0c455cb12bd81ff", "patch": "@@ -48,7 +48,7 @@ pub mod passes;\n pub mod plugins;\n pub mod visit_ast;\n \n-pub static SCHEMA_VERSION: &'static str = \"0.8.0\";\n+pub static SCHEMA_VERSION: &'static str = \"0.8.1\";\n \n type Pass = (&'static str,                                      // name\n              extern fn(clean::Crate) -> plugins::PluginResult,  // fn"}]}