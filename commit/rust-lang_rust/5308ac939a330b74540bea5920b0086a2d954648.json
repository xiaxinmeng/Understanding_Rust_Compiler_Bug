{"sha": "5308ac939a330b74540bea5920b0086a2d954648", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzMDhhYzkzOWEzMzBiNzQ1NDBiZWE1OTIwYjAwODZhMmQ5NTQ2NDg=", "commit": {"author": {"name": "Chris Wong", "email": "lambda.fairy@gmail.com", "date": "2015-04-12T01:24:19Z"}, "committer": {"name": "Chris Wong", "email": "lambda.fairy@gmail.com", "date": "2015-04-12T22:30:10Z"}, "message": "Remove regex module from libunicode\n\nThe regex crate keeps its own tables now (rust-lang/regex#41) so we\ndon't need them here.\n\n[breaking-change]", "tree": {"sha": "bc0e49da6eceecda802df9167bda3874ec5311f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc0e49da6eceecda802df9167bda3874ec5311f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5308ac939a330b74540bea5920b0086a2d954648", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5308ac939a330b74540bea5920b0086a2d954648", "html_url": "https://github.com/rust-lang/rust/commit/5308ac939a330b74540bea5920b0086a2d954648", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5308ac939a330b74540bea5920b0086a2d954648/comments", "author": {"login": "lambda-fairy", "id": 1572323, "node_id": "MDQ6VXNlcjE1NzIzMjM=", "avatar_url": "https://avatars.githubusercontent.com/u/1572323?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lambda-fairy", "html_url": "https://github.com/lambda-fairy", "followers_url": "https://api.github.com/users/lambda-fairy/followers", "following_url": "https://api.github.com/users/lambda-fairy/following{/other_user}", "gists_url": "https://api.github.com/users/lambda-fairy/gists{/gist_id}", "starred_url": "https://api.github.com/users/lambda-fairy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lambda-fairy/subscriptions", "organizations_url": "https://api.github.com/users/lambda-fairy/orgs", "repos_url": "https://api.github.com/users/lambda-fairy/repos", "events_url": "https://api.github.com/users/lambda-fairy/events{/privacy}", "received_events_url": "https://api.github.com/users/lambda-fairy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lambda-fairy", "id": 1572323, "node_id": "MDQ6VXNlcjE1NzIzMjM=", "avatar_url": "https://avatars.githubusercontent.com/u/1572323?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lambda-fairy", "html_url": "https://github.com/lambda-fairy", "followers_url": "https://api.github.com/users/lambda-fairy/followers", "following_url": "https://api.github.com/users/lambda-fairy/following{/other_user}", "gists_url": "https://api.github.com/users/lambda-fairy/gists{/gist_id}", "starred_url": "https://api.github.com/users/lambda-fairy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lambda-fairy/subscriptions", "organizations_url": "https://api.github.com/users/lambda-fairy/orgs", "repos_url": "https://api.github.com/users/lambda-fairy/repos", "events_url": "https://api.github.com/users/lambda-fairy/events{/privacy}", "received_events_url": "https://api.github.com/users/lambda-fairy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37cb1d455e77fbdb132c920e523eb4845f6b4fb9", "url": "https://api.github.com/repos/rust-lang/rust/commits/37cb1d455e77fbdb132c920e523eb4845f6b4fb9", "html_url": "https://github.com/rust-lang/rust/commit/37cb1d455e77fbdb132c920e523eb4845f6b4fb9"}], "stats": {"total": 3045, "additions": 8, "deletions": 3037}, "files": [{"sha": "79b87ad95e63fddc1386887278fd8fa027b96677", "filename": "src/etc/unicode.py", "status": "modified", "additions": 7, "deletions": 44, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/5308ac939a330b74540bea5920b0086a2d954648/src%2Fetc%2Funicode.py", "raw_url": "https://github.com/rust-lang/rust/raw/5308ac939a330b74540bea5920b0086a2d954648/src%2Fetc%2Funicode.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Funicode.py?ref=5308ac939a330b74540bea5920b0086a2d954648", "patch": "@@ -305,33 +305,13 @@ def emit_table(f, name, t_data, t_type = \"&'static [(char, char)]\", is_pub=True,\n     format_table_content(f, data, 8)\n     f.write(\"\\n    ];\\n\\n\")\n \n-def emit_property_module(f, mod, tbl, emit_fn):\n+def emit_property_module(f, mod, tbl, emit):\n     f.write(\"pub mod %s {\\n\" % mod)\n-    keys = tbl.keys()\n-    keys.sort()\n-    for cat in keys:\n+    for cat in sorted(emit):\n         emit_table(f, \"%s_table\" % cat, tbl[cat])\n-        if cat in emit_fn:\n-            f.write(\"    pub fn %s(c: char) -> bool {\\n\" % cat)\n-            f.write(\"        super::bsearch_range_table(c, %s_table)\\n\" % cat)\n-            f.write(\"    }\\n\\n\")\n-    f.write(\"}\\n\\n\")\n-\n-def emit_regex_module(f, cats, w_data):\n-    f.write(\"pub mod regex {\\n\")\n-    regex_class = \"&'static [(char, char)]\"\n-    class_table = \"&'static [(&'static str, %s)]\" % regex_class\n-\n-    emit_table(f, \"UNICODE_CLASSES\", cats, class_table,\n-        pfun=lambda x: \"(\\\"%s\\\",super::%s::%s_table)\" % (x[0], x[1], x[0]))\n-\n-    f.write(\"    pub const PERLD: %s = super::general_category::Nd_table;\\n\\n\"\n-            % regex_class)\n-    f.write(\"    pub const PERLS: %s = super::property::White_Space_table;\\n\\n\"\n-            % regex_class)\n-\n-    emit_table(f, \"PERLW\", w_data, regex_class)\n-\n+        f.write(\"    pub fn %s(c: char) -> bool {\\n\" % cat)\n+        f.write(\"        super::bsearch_range_table(c, %s_table)\\n\" % cat)\n+        f.write(\"    }\\n\\n\")\n     f.write(\"}\\n\\n\")\n \n def emit_conversions_module(f, lowerupper, upperlower):\n@@ -605,8 +585,7 @@ def optimize_width_table(wtable):\n         (canon_decomp, compat_decomp, gencats, combines,\n                 lowerupper, upperlower) = load_unicode_data(\"UnicodeData.txt\")\n         want_derived = [\"XID_Start\", \"XID_Continue\", \"Alphabetic\", \"Lowercase\", \"Uppercase\"]\n-        other_derived = [\"Default_Ignorable_Code_Point\"]\n-        derived = load_properties(\"DerivedCoreProperties.txt\", want_derived + other_derived)\n+        derived = load_properties(\"DerivedCoreProperties.txt\", want_derived)\n         scripts = load_properties(\"Scripts.txt\", [])\n         props = load_properties(\"PropList.txt\",\n                 [\"White_Space\", \"Join_Control\", \"Noncharacter_Code_Point\"])\n@@ -616,27 +595,11 @@ def optimize_width_table(wtable):\n         # bsearch_range_table is used in all the property modules below\n         emit_bsearch_range_table(rf)\n \n-        # all of these categories will also be available as \\p{} in libregex\n-        allcats = []\n+        # category tables\n         for (name, cat, pfuns) in (\"general_category\", gencats, [\"N\", \"Cc\"]), \\\n                                   (\"derived_property\", derived, want_derived), \\\n-                                  (\"script\", scripts, []), \\\n                                   (\"property\", props, [\"White_Space\"]):\n             emit_property_module(rf, name, cat, pfuns)\n-            allcats.extend(map(lambda x: (x, name), cat))\n-        allcats.sort(key=lambda c: c[0])\n-\n-        # the \\w regex corresponds to Alphabetic + Mark + Decimal_Number +\n-        # Connector_Punctuation + Join-Control according to UTS#18\n-        # http://www.unicode.org/reports/tr18/#Compatibility_Properties\n-        perl_words = []\n-        for cat in derived[\"Alphabetic\"], gencats[\"M\"], gencats[\"Nd\"], \\\n-                   gencats[\"Pc\"], props[\"Join_Control\"]:\n-            perl_words.extend(ungroup_cat(cat))\n-        perl_words = group_cat(perl_words)\n-\n-        # emit lookup tables for \\p{}, along with \\d, \\w, and \\s for libregex\n-        emit_regex_module(rf, allcats, perl_words)\n \n         # normalizations and conversions module\n         emit_norm_module(rf, canon_decomp, compat_decomp, combines, norm_props)"}, {"sha": "da8eb3686e25610185cbdfbe9c12dac6f6995e23", "filename": "src/libunicode/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5308ac939a330b74540bea5920b0086a2d954648/src%2Flibunicode%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5308ac939a330b74540bea5920b0086a2d954648/src%2Flibunicode%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Flib.rs?ref=5308ac939a330b74540bea5920b0086a2d954648", "patch": "@@ -39,9 +39,6 @@\n \n extern crate core;\n \n-// regex module\n-pub use tables::regex;\n-\n mod normalize;\n mod tables;\n mod u_str;"}, {"sha": "e70ec366387f7367b9cd0be4f51ec926fe292bfd", "filename": "src/libunicode/tables.rs", "status": "modified", "additions": 1, "deletions": 2990, "changes": 2991, "blob_url": "https://github.com/rust-lang/rust/blob/5308ac939a330b74540bea5920b0086a2d954648/src%2Flibunicode%2Ftables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5308ac939a330b74540bea5920b0086a2d954648/src%2Flibunicode%2Ftables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Ftables.rs?ref=5308ac939a330b74540bea5920b0086a2d954648"}]}