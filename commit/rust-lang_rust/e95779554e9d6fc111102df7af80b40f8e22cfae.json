{"sha": "e95779554e9d6fc111102df7af80b40f8e22cfae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5NTc3OTU1NGU5ZDZmYzExMTEwMmRmN2FmODBiNDBmOGUyMmNmYWU=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-01-08T09:13:14Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-08T16:02:23Z"}, "message": "Store deprecated status of i/u-suffixed literals.", "tree": {"sha": "e838385272c295d7cdab1ae32193ec4ebe3bd5af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e838385272c295d7cdab1ae32193ec4ebe3bd5af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e95779554e9d6fc111102df7af80b40f8e22cfae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e95779554e9d6fc111102df7af80b40f8e22cfae", "html_url": "https://github.com/rust-lang/rust/commit/e95779554e9d6fc111102df7af80b40f8e22cfae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e95779554e9d6fc111102df7af80b40f8e22cfae/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f99a41fe1a27a48e96bc2616ec9faa6de924386", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f99a41fe1a27a48e96bc2616ec9faa6de924386", "html_url": "https://github.com/rust-lang/rust/commit/2f99a41fe1a27a48e96bc2616ec9faa6de924386"}], "stats": {"total": 191, "additions": 112, "deletions": 79}, "files": [{"sha": "9795947ac811d6e8096de353a0b51e2dd0bb6902", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e95779554e9d6fc111102df7af80b40f8e22cfae/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e95779554e9d6fc111102df7af80b40f8e22cfae/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=e95779554e9d6fc111102df7af80b40f8e22cfae", "patch": "@@ -216,7 +216,7 @@ impl LintPass for TypeLimits {\n                         match lit.node {\n                             ast::LitInt(v, ast::SignedIntLit(_, ast::Plus)) |\n                             ast::LitInt(v, ast::UnsuffixedIntLit(ast::Plus)) => {\n-                                let int_type = if t == ast::TyIs {\n+                                let int_type = if let ast::TyIs(_) = t {\n                                     cx.sess().target.int_type\n                                 } else { t };\n                                 let (min, max) = int_ty_range(int_type);\n@@ -233,7 +233,7 @@ impl LintPass for TypeLimits {\n                         };\n                     },\n                     ty::ty_uint(t) => {\n-                        let uint_type = if t == ast::TyUs {\n+                        let uint_type = if let ast::TyUs(_) = t {\n                             cx.sess().target.uint_type\n                         } else { t };\n                         let (min, max) = uint_ty_range(uint_type);\n@@ -296,7 +296,7 @@ impl LintPass for TypeLimits {\n         // warnings are consistent between 32- and 64-bit platforms\n         fn int_ty_range(int_ty: ast::IntTy) -> (i64, i64) {\n             match int_ty {\n-                ast::TyIs=>    (i64::MIN,        i64::MAX),\n+                ast::TyIs(_) =>    (i64::MIN,        i64::MAX),\n                 ast::TyI8 =>   (i8::MIN  as i64, i8::MAX  as i64),\n                 ast::TyI16 =>  (i16::MIN as i64, i16::MAX as i64),\n                 ast::TyI32 =>  (i32::MIN as i64, i32::MAX as i64),\n@@ -306,7 +306,7 @@ impl LintPass for TypeLimits {\n \n         fn uint_ty_range(uint_ty: ast::UintTy) -> (u64, u64) {\n             match uint_ty {\n-                ast::TyUs=>   (u64::MIN,         u64::MAX),\n+                ast::TyUs(_) =>   (u64::MIN,         u64::MAX),\n                 ast::TyU8 =>  (u8::MIN   as u64, u8::MAX   as u64),\n                 ast::TyU16 => (u16::MIN  as u64, u16::MAX  as u64),\n                 ast::TyU32 => (u32::MIN  as u64, u32::MAX  as u64),\n@@ -323,7 +323,7 @@ impl LintPass for TypeLimits {\n \n         fn int_ty_bits(int_ty: ast::IntTy, target_int_ty: ast::IntTy) -> u64 {\n             match int_ty {\n-                ast::TyIs=>    int_ty_bits(target_int_ty, target_int_ty),\n+                ast::TyIs(_) =>    int_ty_bits(target_int_ty, target_int_ty),\n                 ast::TyI8 =>   i8::BITS  as u64,\n                 ast::TyI16 =>  i16::BITS as u64,\n                 ast::TyI32 =>  i32::BITS as u64,\n@@ -333,7 +333,7 @@ impl LintPass for TypeLimits {\n \n         fn uint_ty_bits(uint_ty: ast::UintTy, target_uint_ty: ast::UintTy) -> u64 {\n             match uint_ty {\n-                ast::TyUs=>    uint_ty_bits(target_uint_ty, target_uint_ty),\n+                ast::TyUs(_) =>    uint_ty_bits(target_uint_ty, target_uint_ty),\n                 ast::TyU8 =>   u8::BITS  as u64,\n                 ast::TyU16 =>  u16::BITS as u64,\n                 ast::TyU32 =>  u32::BITS as u64,\n@@ -404,12 +404,12 @@ struct ImproperCTypesVisitor<'a, 'tcx: 'a> {\n impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n     fn check_def(&mut self, sp: Span, ty_id: ast::NodeId, path_id: ast::NodeId) {\n         match self.cx.tcx.def_map.borrow()[path_id].clone() {\n-            def::DefPrimTy(ast::TyInt(ast::TyIs)) => {\n+            def::DefPrimTy(ast::TyInt(ast::TyIs(_))) => {\n                 self.cx.span_lint(IMPROPER_CTYPES, sp,\n                                   \"found rust type `isize` in foreign module, while \\\n                                    libc::c_int or libc::c_long should be used\");\n             }\n-            def::DefPrimTy(ast::TyUint(ast::TyUs)) => {\n+            def::DefPrimTy(ast::TyUint(ast::TyUs(_))) => {\n                 self.cx.span_lint(IMPROPER_CTYPES, sp,\n                                   \"found rust type `usize` in foreign module, while \\\n                                    libc::c_uint or libc::c_ulong should be used\");"}, {"sha": "bdd08ad6c4952038af1029b1982de787ee9c047b", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e95779554e9d6fc111102df7af80b40f8e22cfae/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e95779554e9d6fc111102df7af80b40f8e22cfae/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=e95779554e9d6fc111102df7af80b40f8e22cfae", "patch": "@@ -61,7 +61,7 @@ pub fn enc_ty<'a, 'tcx>(w: &mut SeekableMemWriter, cx: &ctxt<'a, 'tcx>, t: Ty<'t\n         ty::ty_char => mywrite!(w, \"c\"),\n         ty::ty_int(t) => {\n             match t {\n-                ast::TyIs => mywrite!(w, \"is\"),\n+                ast::TyIs(_) => mywrite!(w, \"is\"),\n                 ast::TyI8 => mywrite!(w, \"MB\"),\n                 ast::TyI16 => mywrite!(w, \"MW\"),\n                 ast::TyI32 => mywrite!(w, \"ML\"),\n@@ -70,7 +70,7 @@ pub fn enc_ty<'a, 'tcx>(w: &mut SeekableMemWriter, cx: &ctxt<'a, 'tcx>, t: Ty<'t\n         }\n         ty::ty_uint(t) => {\n             match t {\n-                ast::TyUs => mywrite!(w, \"us\"),\n+                ast::TyUs(_) => mywrite!(w, \"us\"),\n                 ast::TyU8 => mywrite!(w, \"Mb\"),\n                 ast::TyU16 => mywrite!(w, \"Mw\"),\n                 ast::TyU32 => mywrite!(w, \"Ml\"),"}, {"sha": "52352e920ce36a3922683413684780e822e951d9", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e95779554e9d6fc111102df7af80b40f8e22cfae/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e95779554e9d6fc111102df7af80b40f8e22cfae/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=e95779554e9d6fc111102df7af80b40f8e22cfae", "patch": "@@ -528,12 +528,12 @@ pub fn eval_const_expr_partial(tcx: &ty::ctxt, e: &Expr) -> Result<const_val, St\n \n         eval_const_expr_partial(tcx, &**base)\n             .and_then(|val| define_casts!(val, {\n-                ty::ty_int(ast::TyIs) => (int, const_int, i64),\n+                ty::ty_int(ast::TyIs(_)) => (int, const_int, i64),\n                 ty::ty_int(ast::TyI8) => (i8, const_int, i64),\n                 ty::ty_int(ast::TyI16) => (i16, const_int, i64),\n                 ty::ty_int(ast::TyI32) => (i32, const_int, i64),\n                 ty::ty_int(ast::TyI64) => (i64, const_int, i64),\n-                ty::ty_uint(ast::TyUs) => (uint, const_uint, u64),\n+                ty::ty_uint(ast::TyUs(_)) => (uint, const_uint, u64),\n                 ty::ty_uint(ast::TyU8) => (u8, const_uint, u64),\n                 ty::ty_uint(ast::TyU16) => (u16, const_uint, u64),\n                 ty::ty_uint(ast::TyU32) => (u32, const_uint, u64),"}, {"sha": "2534232960fad5b22e3a45bf9d4e239b8eb673e2", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e95779554e9d6fc111102df7af80b40f8e22cfae/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e95779554e9d6fc111102df7af80b40f8e22cfae/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=e95779554e9d6fc111102df7af80b40f8e22cfae", "patch": "@@ -2341,12 +2341,12 @@ impl<'tcx> CommonTypes<'tcx> {\n             bool: intern_ty(arena, interner, ty_bool),\n             char: intern_ty(arena, interner, ty_char),\n             err: intern_ty(arena, interner, ty_err),\n-            int: intern_ty(arena, interner, ty_int(ast::TyIs)),\n+            int: intern_ty(arena, interner, ty_int(ast::TyIs(_))),\n             i8: intern_ty(arena, interner, ty_int(ast::TyI8)),\n             i16: intern_ty(arena, interner, ty_int(ast::TyI16)),\n             i32: intern_ty(arena, interner, ty_int(ast::TyI32)),\n             i64: intern_ty(arena, interner, ty_int(ast::TyI64)),\n-            uint: intern_ty(arena, interner, ty_uint(ast::TyUs)),\n+            uint: intern_ty(arena, interner, ty_uint(ast::TyUs(_))),\n             u8: intern_ty(arena, interner, ty_uint(ast::TyU8)),\n             u16: intern_ty(arena, interner, ty_uint(ast::TyU16)),\n             u32: intern_ty(arena, interner, ty_uint(ast::TyU32)),\n@@ -2692,7 +2692,7 @@ impl FlagComputation {\n \n pub fn mk_mach_int<'tcx>(tcx: &ctxt<'tcx>, tm: ast::IntTy) -> Ty<'tcx> {\n     match tm {\n-        ast::TyIs   => tcx.types.int,\n+        ast::TyIs(_)   => tcx.types.int,\n         ast::TyI8   => tcx.types.i8,\n         ast::TyI16  => tcx.types.i16,\n         ast::TyI32  => tcx.types.i32,\n@@ -2702,7 +2702,7 @@ pub fn mk_mach_int<'tcx>(tcx: &ctxt<'tcx>, tm: ast::IntTy) -> Ty<'tcx> {\n \n pub fn mk_mach_uint<'tcx>(tcx: &ctxt<'tcx>, tm: ast::UintTy) -> Ty<'tcx> {\n     match tm {\n-        ast::TyUs   => tcx.types.uint,\n+        ast::TyUs(_)   => tcx.types.uint,\n         ast::TyU8   => tcx.types.u8,\n         ast::TyU16  => tcx.types.u16,\n         ast::TyU32  => tcx.types.u32,\n@@ -3363,7 +3363,7 @@ pub fn type_contents<'tcx>(cx: &ctxt<'tcx>, ty: Ty<'tcx>) -> TypeContents {\n \n         let result = match ty.sty {\n             // uint and int are ffi-unsafe\n-            ty_uint(ast::TyUs) | ty_int(ast::TyIs) => {\n+            ty_uint(ast::TyUs(_)) | ty_int(ast::TyIs(_)) => {\n                 TC::ReachesFfiUnsafe\n             }\n \n@@ -3937,7 +3937,7 @@ pub fn type_is_fresh(ty: Ty) -> bool {\n \n pub fn type_is_uint(ty: Ty) -> bool {\n     match ty.sty {\n-      ty_infer(IntVar(_)) | ty_uint(ast::TyUs) => true,\n+      ty_infer(IntVar(_)) | ty_uint(ast::TyUs(_)) => true,\n       _ => false\n     }\n }\n@@ -3983,7 +3983,7 @@ pub fn type_is_signed(ty: Ty) -> bool {\n \n pub fn type_is_machine(ty: Ty) -> bool {\n     match ty.sty {\n-        ty_int(ast::TyIs) | ty_uint(ast::TyUs) => false,\n+        ty_int(ast::TyIs(_)) | ty_uint(ast::TyUs(_)) => false,\n         ty_int(..) | ty_uint(..) | ty_float(..) => true,\n         _ => false\n     }"}, {"sha": "88f0abf3ca761e586302146eeaf9616bc7f87aed", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e95779554e9d6fc111102df7af80b40f8e22cfae/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e95779554e9d6fc111102df7af80b40f8e22cfae/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=e95779554e9d6fc111102df7af80b40f8e22cfae", "patch": "@@ -819,15 +819,15 @@ impl PrimitiveTypeTable {\n         table.intern(\"char\",    TyChar);\n         table.intern(\"f32\",     TyFloat(TyF32));\n         table.intern(\"f64\",     TyFloat(TyF64));\n-        table.intern(\"int\",     TyInt(TyIs));\n-        table.intern(\"isize\",   TyInt(TyIs));\n+        table.intern(\"int\",     TyInt(TyIs(true)));\n+        table.intern(\"isize\",   TyInt(TyIs(false)));\n         table.intern(\"i8\",      TyInt(TyI8));\n         table.intern(\"i16\",     TyInt(TyI16));\n         table.intern(\"i32\",     TyInt(TyI32));\n         table.intern(\"i64\",     TyInt(TyI64));\n         table.intern(\"str\",     TyStr);\n-        table.intern(\"uint\",    TyUint(TyUs));\n-        table.intern(\"usize\",   TyUint(TyUs));\n+        table.intern(\"uint\",    TyUint(TyUs(true)));\n+        table.intern(\"usize\",   TyUint(TyUs(false)));\n         table.intern(\"u8\",      TyUint(TyU8));\n         table.intern(\"u16\",     TyUint(TyU16));\n         table.intern(\"u32\",     TyUint(TyU32));"}, {"sha": "88ce36a710a0c606ff06c32ce1c6f1f769f84a9d", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e95779554e9d6fc111102df7af80b40f8e22cfae/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e95779554e9d6fc111102df7af80b40f8e22cfae/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=e95779554e9d6fc111102df7af80b40f8e22cfae", "patch": "@@ -917,8 +917,8 @@ pub fn fail_if_zero_or_overflows<'blk, 'tcx>(\n             ty::ty_int(t) => {\n                 let llty = Type::int_from_ty(cx.ccx(), t);\n                 let min = match t {\n-                    ast::TyIs if llty == Type::i32(cx.ccx()) => i32::MIN as u64,\n-                    ast::TyIs => i64::MIN as u64,\n+                    ast::TyIs(_) if llty == Type::i32(cx.ccx()) => i32::MIN as u64,\n+                    ast::TyIs(_) => i64::MIN as u64,\n                     ast::TyI8 => i8::MIN as u64,\n                     ast::TyI16 => i16::MIN as u64,\n                     ast::TyI32 => i32::MIN as u64,"}, {"sha": "2f58baab7fca944327b5e073538c0e9150431f62", "filename": "src/librustc_trans/trans/debuginfo.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e95779554e9d6fc111102df7af80b40f8e22cfae/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e95779554e9d6fc111102df7af80b40f8e22cfae/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs?ref=e95779554e9d6fc111102df7af80b40f8e22cfae", "patch": "@@ -1804,14 +1804,14 @@ fn basic_type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         ty::ty_bool => (\"bool\".to_string(), DW_ATE_boolean),\n         ty::ty_char => (\"char\".to_string(), DW_ATE_unsigned_char),\n         ty::ty_int(int_ty) => match int_ty {\n-            ast::TyIs => (\"isize\".to_string(), DW_ATE_signed),\n+            ast::TyIs(_) => (\"isize\".to_string(), DW_ATE_signed),\n             ast::TyI8 => (\"i8\".to_string(), DW_ATE_signed),\n             ast::TyI16 => (\"i16\".to_string(), DW_ATE_signed),\n             ast::TyI32 => (\"i32\".to_string(), DW_ATE_signed),\n             ast::TyI64 => (\"i64\".to_string(), DW_ATE_signed)\n         },\n         ty::ty_uint(uint_ty) => match uint_ty {\n-            ast::TyUs => (\"usize\".to_string(), DW_ATE_unsigned),\n+            ast::TyUs(_) => (\"usize\".to_string(), DW_ATE_unsigned),\n             ast::TyU8 => (\"u8\".to_string(), DW_ATE_unsigned),\n             ast::TyU16 => (\"u16\".to_string(), DW_ATE_unsigned),\n             ast::TyU32 => (\"u32\".to_string(), DW_ATE_unsigned),\n@@ -3739,12 +3739,12 @@ fn push_debuginfo_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         ty::ty_bool              => output.push_str(\"bool\"),\n         ty::ty_char              => output.push_str(\"char\"),\n         ty::ty_str               => output.push_str(\"str\"),\n-        ty::ty_int(ast::TyIs)     => output.push_str(\"isize\"),\n+        ty::ty_int(ast::TyIs(_))     => output.push_str(\"isize\"),\n         ty::ty_int(ast::TyI8)    => output.push_str(\"i8\"),\n         ty::ty_int(ast::TyI16)   => output.push_str(\"i16\"),\n         ty::ty_int(ast::TyI32)   => output.push_str(\"i32\"),\n         ty::ty_int(ast::TyI64)   => output.push_str(\"i64\"),\n-        ty::ty_uint(ast::TyUs)    => output.push_str(\"usize\"),\n+        ty::ty_uint(ast::TyUs(_))    => output.push_str(\"usize\"),\n         ty::ty_uint(ast::TyU8)   => output.push_str(\"u8\"),\n         ty::ty_uint(ast::TyU16)  => output.push_str(\"u16\"),\n         ty::ty_uint(ast::TyU32)  => output.push_str(\"u32\"),"}, {"sha": "71a7789eb393277ec4a7372554d44a399001d6a1", "filename": "src/librustc_trans/trans/type_.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e95779554e9d6fc111102df7af80b40f8e22cfae/src%2Flibrustc_trans%2Ftrans%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e95779554e9d6fc111102df7af80b40f8e22cfae/src%2Flibrustc_trans%2Ftrans%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftype_.rs?ref=e95779554e9d6fc111102df7af80b40f8e22cfae", "patch": "@@ -112,7 +112,7 @@ impl Type {\n \n     pub fn int_from_ty(ccx: &CrateContext, t: ast::IntTy) -> Type {\n         match t {\n-            ast::TyIs => ccx.int_type(),\n+            ast::TyIs(_) => ccx.int_type(),\n             ast::TyI8 => Type::i8(ccx),\n             ast::TyI16 => Type::i16(ccx),\n             ast::TyI32 => Type::i32(ccx),\n@@ -122,7 +122,7 @@ impl Type {\n \n     pub fn uint_from_ty(ccx: &CrateContext, t: ast::UintTy) -> Type {\n         match t {\n-            ast::TyUs => ccx.int_type(),\n+            ast::TyUs(_) => ccx.int_type(),\n             ast::TyU8 => Type::i8(ccx),\n             ast::TyU16 => Type::i16(ccx),\n             ast::TyU32 => Type::i32(ccx),"}, {"sha": "416dfb420ffae0068d301998d96fc5b2426d1ee7", "filename": "src/librustc_trans/trans/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e95779554e9d6fc111102df7af80b40f8e22cfae/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e95779554e9d6fc111102df7af80b40f8e22cfae/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs?ref=e95779554e9d6fc111102df7af80b40f8e22cfae", "patch": "@@ -263,7 +263,7 @@ pub fn type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) -> Type {\n         }\n \n         match unsized_part_of_type(cx.tcx(), t).sty {\n-            ty::ty_str | ty::ty_vec(..) => Type::uint_from_ty(cx, ast::TyUs),\n+            ty::ty_str | ty::ty_vec(..) => Type::uint_from_ty(cx, ast::TyUs(_)),\n             ty::ty_trait(_) => Type::vtable_ptr(cx),\n             _ => panic!(\"Unexpected type returned from unsized_part_of_type : {}\",\n                        t.repr(cx.tcx()))"}, {"sha": "f3778eb054037ee355ded8af6bcfe1a29b1625c4", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e95779554e9d6fc111102df7af80b40f8e22cfae/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e95779554e9d6fc111102df7af80b40f8e22cfae/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=e95779554e9d6fc111102df7af80b40f8e22cfae", "patch": "@@ -2442,7 +2442,7 @@ fn try_index_step<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n \n     // First, try built-in indexing.\n     match (ty::index(adjusted_ty), &index_ty.sty) {\n-        (Some(ty), &ty::ty_uint(ast::TyUs)) | (Some(ty), &ty::ty_infer(ty::IntVar(_))) => {\n+        (Some(ty), &ty::ty_uint(ast::TyUs(_))) | (Some(ty), &ty::ty_infer(ty::IntVar(_))) => {\n             debug!(\"try_index_step: success, using built-in indexing\");\n             fcx.write_adjustment(base_expr.id, base_expr.span, ty::AdjustDerefRef(adjustment));\n             return Some((tcx.types.uint, ty));\n@@ -4770,7 +4770,7 @@ pub fn check_enum_variants(ccx: &CrateCtxt,\n                 ast::TyU16 => disr as u16 as Disr == disr,\n                 ast::TyU32 => disr as u32 as Disr == disr,\n                 ast::TyU64 => disr as u64 as Disr == disr,\n-                ast::TyUs => uint_in_range(ccx, ccx.tcx.sess.target.uint_type, disr)\n+                ast::TyUs(_) => uint_in_range(ccx, ccx.tcx.sess.target.uint_type, disr)\n             }\n         }\n         fn int_in_range(ccx: &CrateCtxt, ty: ast::IntTy, disr: ty::Disr) -> bool {\n@@ -4779,7 +4779,7 @@ pub fn check_enum_variants(ccx: &CrateCtxt,\n                 ast::TyI16 => disr as i16 as Disr == disr,\n                 ast::TyI32 => disr as i32 as Disr == disr,\n                 ast::TyI64 => disr as i64 as Disr == disr,\n-                ast::TyIs => int_in_range(ccx, ccx.tcx.sess.target.int_type, disr)\n+                ast::TyIs(_) => int_in_range(ccx, ccx.tcx.sess.target.int_type, disr)\n             }\n         }\n         match ty {"}, {"sha": "a44c73e8c4120f91d9b986673e6a68273003faf8", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e95779554e9d6fc111102df7af80b40f8e22cfae/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e95779554e9d6fc111102df7af80b40f8e22cfae/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=e95779554e9d6fc111102df7af80b40f8e22cfae", "patch": "@@ -1389,12 +1389,12 @@ impl<'tcx> Clean<Type> for ty::Ty<'tcx> {\n         match self.sty {\n             ty::ty_bool => Primitive(Bool),\n             ty::ty_char => Primitive(Char),\n-            ty::ty_int(ast::TyIs) => Primitive(Isize),\n+            ty::ty_int(ast::TyIs(_)) => Primitive(Isize),\n             ty::ty_int(ast::TyI8) => Primitive(I8),\n             ty::ty_int(ast::TyI16) => Primitive(I16),\n             ty::ty_int(ast::TyI32) => Primitive(I32),\n             ty::ty_int(ast::TyI64) => Primitive(I64),\n-            ty::ty_uint(ast::TyUs) => Primitive(Usize),\n+            ty::ty_uint(ast::TyUs(_)) => Primitive(Usize),\n             ty::ty_uint(ast::TyU8) => Primitive(U8),\n             ty::ty_uint(ast::TyU16) => Primitive(U16),\n             ty::ty_uint(ast::TyU32) => Primitive(U32),\n@@ -2269,12 +2269,12 @@ fn resolve_type(cx: &DocContext,\n             ast::TyStr => return Primitive(Str),\n             ast::TyBool => return Primitive(Bool),\n             ast::TyChar => return Primitive(Char),\n-            ast::TyInt(ast::TyIs) => return Primitive(Isize),\n+            ast::TyInt(ast::TyIs(_)) => return Primitive(Isize),\n             ast::TyInt(ast::TyI8) => return Primitive(I8),\n             ast::TyInt(ast::TyI16) => return Primitive(I16),\n             ast::TyInt(ast::TyI32) => return Primitive(I32),\n             ast::TyInt(ast::TyI64) => return Primitive(I64),\n-            ast::TyUint(ast::TyUs) => return Primitive(Usize),\n+            ast::TyUint(ast::TyUs(_)) => return Primitive(Usize),\n             ast::TyUint(ast::TyU8) => return Primitive(U8),\n             ast::TyUint(ast::TyU16) => return Primitive(U16),\n             ast::TyUint(ast::TyU32) => return Primitive(U32),"}, {"sha": "630f7768885de6ec6097834c0b90a2a312398f6f", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 36, "deletions": 8, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/e95779554e9d6fc111102df7af80b40f8e22cfae/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e95779554e9d6fc111102df7af80b40f8e22cfae/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=e95779554e9d6fc111102df7af80b40f8e22cfae", "patch": "@@ -1075,15 +1075,29 @@ pub struct Typedef {\n     pub typ: P<Ty>,\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Copy)]\n+#[derive(Clone, Eq, RustcEncodable, RustcDecodable, Hash, Copy)]\n pub enum IntTy {\n-    TyIs,\n+    TyIs(bool /* is this deprecated `int`? */),\n     TyI8,\n     TyI16,\n     TyI32,\n     TyI64,\n }\n \n+impl PartialEq for IntTy {\n+    fn eq(&self, other: &IntTy) -> bool {\n+        match (*self, *other) {\n+            // true/false need to compare the same, so this can't be derived\n+            (TyIs(_), TyIs(_)) |\n+            (TyI8, TyI8) |\n+            (TyI16, TyI16) |\n+            (TyI32, TyI32) |\n+            (TyI64, TyI64) => true,\n+            _ => false\n+        }\n+    }\n+}\n+\n impl fmt::Show for IntTy {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         fmt::String::fmt(self, f)\n@@ -1099,27 +1113,41 @@ impl fmt::String for IntTy {\n impl IntTy {\n     pub fn suffix_len(&self) -> uint {\n         match *self {\n-            TyIs => 1,\n-            TyI8 => 2,\n+            TyIs(true) /* i */ => 1,\n+            TyIs(false) /* is */ | TyI8 => 2,\n             TyI16 | TyI32 | TyI64  => 3,\n         }\n     }\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Copy)]\n+#[derive(Clone, Eq, RustcEncodable, RustcDecodable, Hash, Copy)]\n pub enum UintTy {\n-    TyUs,\n+    TyUs(bool /* is this deprecated uint? */),\n     TyU8,\n     TyU16,\n     TyU32,\n     TyU64,\n }\n \n+impl PartialEq for UintTy {\n+    fn eq(&self, other: &UintTy) -> bool {\n+        match (*self, *other) {\n+            // true/false need to compare the same, so this can't be derived\n+            (TyUs(_), TyUs(_)) |\n+            (TyU8, TyU8) |\n+            (TyU16, TyU16) |\n+            (TyU32, TyU32) |\n+            (TyU64, TyU64) => true,\n+            _ => false\n+        }\n+    }\n+}\n+\n impl UintTy {\n     pub fn suffix_len(&self) -> uint {\n         match *self {\n-            TyUs => 1,\n-            TyU8 => 2,\n+            TyUs(true) /* u */ => 1,\n+            TyUs(false) /* us */ | TyU8 => 2,\n             TyU16 | TyU32 | TyU64  => 3,\n         }\n     }"}, {"sha": "bc7fbd46fd8bac52f795026e8f48854f315ffa3f", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e95779554e9d6fc111102df7af80b40f8e22cfae/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e95779554e9d6fc111102df7af80b40f8e22cfae/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=e95779554e9d6fc111102df7af80b40f8e22cfae", "patch": "@@ -127,8 +127,10 @@ pub fn is_path(e: P<Expr>) -> bool {\n /// We want to avoid \"45int\" and \"-3int\" in favor of \"45\" and \"-3\"\n pub fn int_ty_to_string(t: IntTy, val: Option<i64>) -> String {\n     let s = match t {\n-        TyIs if val.is_some() => \"is\",\n-        TyIs => \"isize\",\n+        TyIs(true) if val.is_some() => \"i\",\n+        TyIs(true) => \"int\",\n+        TyIs(false) if val.is_some() => \"is\",\n+        TyIs(false) => \"isize\",\n         TyI8 => \"i8\",\n         TyI16 => \"i16\",\n         TyI32 => \"i32\",\n@@ -148,7 +150,7 @@ pub fn int_ty_max(t: IntTy) -> u64 {\n     match t {\n         TyI8 => 0x80u64,\n         TyI16 => 0x8000u64,\n-        TyIs | TyI32 => 0x80000000u64, // actually ni about TyIs\n+        TyIs(_) | TyI32 => 0x80000000u64, // actually ni about TyIs\n         TyI64 => 0x8000000000000000u64\n     }\n }\n@@ -157,8 +159,10 @@ pub fn int_ty_max(t: IntTy) -> u64 {\n /// We want to avoid \"42uint\" in favor of \"42u\"\n pub fn uint_ty_to_string(t: UintTy, val: Option<u64>) -> String {\n     let s = match t {\n-        TyUs if val.is_some() => \"us\",\n-        TyUs => \"usize\",\n+        TyUs(true) if val.is_some() => \"u\",\n+        TyUs(true) => \"uint\",\n+        TyUs(false) if val.is_some() => \"us\",\n+        TyUs(false) => \"usize\",\n         TyU8 => \"u8\",\n         TyU16 => \"u16\",\n         TyU32 => \"u32\",\n@@ -175,7 +179,7 @@ pub fn uint_ty_max(t: UintTy) -> u64 {\n     match t {\n         TyU8 => 0xffu64,\n         TyU16 => 0xffffu64,\n-        TyUs | TyU32 => 0xffffffffu64, // actually ni about TyUs\n+        TyUs(_) | TyU32 => 0xffffffffu64, // actually ni about TyUs\n         TyU64 => 0xffffffffffffffffu64\n     }\n }"}, {"sha": "6f57c06d33e885d682d33f5d0c6856bec4429a3f", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e95779554e9d6fc111102df7af80b40f8e22cfae/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e95779554e9d6fc111102df7af80b40f8e22cfae/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=e95779554e9d6fc111102df7af80b40f8e22cfae", "patch": "@@ -464,10 +464,10 @@ fn int_type_of_word(s: &str) -> Option<IntType> {\n         \"u32\" => Some(UnsignedInt(ast::TyU32)),\n         \"i64\" => Some(SignedInt(ast::TyI64)),\n         \"u64\" => Some(UnsignedInt(ast::TyU64)),\n-        \"int\" => Some(SignedInt(ast::TyIs)),\n-        \"uint\" => Some(UnsignedInt(ast::TyUs)),\n-        \"isize\" => Some(SignedInt(ast::TyIs)),\n-        \"usize\" => Some(UnsignedInt(ast::TyUs)),\n+        \"int\" => Some(SignedInt(ast::TyIs(true))),\n+        \"uint\" => Some(UnsignedInt(ast::TyUs(true))),\n+        \"isize\" => Some(SignedInt(ast::TyIs(false))),\n+        \"usize\" => Some(UnsignedInt(ast::TyUs(false))),\n         _ => None\n     }\n }\n@@ -511,7 +511,7 @@ impl IntType {\n             SignedInt(ast::TyI16) | UnsignedInt(ast::TyU16) |\n             SignedInt(ast::TyI32) | UnsignedInt(ast::TyU32) |\n             SignedInt(ast::TyI64) | UnsignedInt(ast::TyU64) => true,\n-            SignedInt(ast::TyIs) | UnsignedInt(ast::TyUs) => false\n+            SignedInt(ast::TyIs(_)) | UnsignedInt(ast::TyUs(_)) => false\n         }\n     }\n }"}, {"sha": "c34142aec39c8e7aa4158717613ceda9531ff8f0", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e95779554e9d6fc111102df7af80b40f8e22cfae/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e95779554e9d6fc111102df7af80b40f8e22cfae/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=e95779554e9d6fc111102df7af80b40f8e22cfae", "patch": "@@ -642,10 +642,11 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         self.expr(sp, ast::ExprLit(P(respan(sp, lit))))\n     }\n     fn expr_uint(&self, span: Span, i: uint) -> P<ast::Expr> {\n-        self.expr_lit(span, ast::LitInt(i as u64, ast::UnsignedIntLit(ast::TyUs)))\n+        self.expr_lit(span, ast::LitInt(i as u64, ast::UnsignedIntLit(ast::TyUs(false))))\n     }\n     fn expr_int(&self, sp: Span, i: int) -> P<ast::Expr> {\n-        self.expr_lit(sp, ast::LitInt(i as u64, ast::SignedIntLit(ast::TyIs, ast::Sign::new(i))))\n+        self.expr_lit(sp, ast::LitInt(i as u64, ast::SignedIntLit(ast::TyIs(false),\n+                                                                  ast::Sign::new(i))))\n     }\n     fn expr_u8(&self, sp: Span, u: u8) -> P<ast::Expr> {\n         self.expr_lit(sp, ast::LitInt(u as u64, ast::UnsignedIntLit(ast::TyU8)))"}, {"sha": "e6b6f7bbd49c3d0f09d99bd7fcfd5d7fad69cce2", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e95779554e9d6fc111102df7af80b40f8e22cfae/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e95779554e9d6fc111102df7af80b40f8e22cfae/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=e95779554e9d6fc111102df7af80b40f8e22cfae", "patch": "@@ -1031,7 +1031,7 @@ impl<'a> MethodDef<'a> {\n             let arms: Vec<ast::Arm> = variants.iter().enumerate()\n                 .map(|(index, variant)| {\n                     let pat = variant_to_pat(cx, sp, type_ident, &**variant);\n-                    let lit = ast::LitInt(index as u64, ast::UnsignedIntLit(ast::TyUs));\n+                    let lit = ast::LitInt(index as u64, ast::UnsignedIntLit(ast::TyUs(false)));\n                     cx.arm(sp, vec![pat], cx.expr_lit(sp, lit))\n                 }).collect();\n "}, {"sha": "c42b188302cc3ab25c1001c80b183535604622e9", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e95779554e9d6fc111102df7af80b40f8e22cfae/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e95779554e9d6fc111102df7af80b40f8e22cfae/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=e95779554e9d6fc111102df7af80b40f8e22cfae", "patch": "@@ -244,10 +244,10 @@ pub mod rt {\n     }\n \n     macro_rules! impl_to_source_int {\n-        (signed, $t:ty, $tag:ident) => (\n+        (signed, $t:ty, $tag:expr) => (\n             impl ToSource for $t {\n                 fn to_source(&self) -> String {\n-                    let lit = ast::LitInt(*self as u64, ast::SignedIntLit(ast::$tag,\n+                    let lit = ast::LitInt(*self as u64, ast::SignedIntLit($tag,\n                                                                           ast::Sign::new(*self)));\n                     pprust::lit_to_string(&dummy_spanned(lit))\n                 }\n@@ -258,10 +258,10 @@ pub mod rt {\n                 }\n             }\n         );\n-        (unsigned, $t:ty, $tag:ident) => (\n+        (unsigned, $t:ty, $tag:expr) => (\n             impl ToSource for $t {\n                 fn to_source(&self) -> String {\n-                    let lit = ast::LitInt(*self as u64, ast::UnsignedIntLit(ast::$tag));\n+                    let lit = ast::LitInt(*self as u64, ast::UnsignedIntLit($tag));\n                     pprust::lit_to_string(&dummy_spanned(lit))\n                 }\n             }\n@@ -273,17 +273,17 @@ pub mod rt {\n         );\n     }\n \n-    impl_to_source_int! { signed, int, TyIs }\n-    impl_to_source_int! { signed, i8,  TyI8 }\n-    impl_to_source_int! { signed, i16, TyI16 }\n-    impl_to_source_int! { signed, i32, TyI32 }\n-    impl_to_source_int! { signed, i64, TyI64 }\n+    impl_to_source_int! { signed, int, ast::TyIs(false) }\n+    impl_to_source_int! { signed, i8,  ast::TyI8 }\n+    impl_to_source_int! { signed, i16, ast::TyI16 }\n+    impl_to_source_int! { signed, i32, ast::TyI32 }\n+    impl_to_source_int! { signed, i64, ast::TyI64 }\n \n-    impl_to_source_int! { unsigned, uint, TyUs }\n-    impl_to_source_int! { unsigned, u8,   TyU8 }\n-    impl_to_source_int! { unsigned, u16,  TyU16 }\n-    impl_to_source_int! { unsigned, u32,  TyU32 }\n-    impl_to_source_int! { unsigned, u64,  TyU64 }\n+    impl_to_source_int! { unsigned, uint, ast::TyUs(false) }\n+    impl_to_source_int! { unsigned, u8,   ast::TyU8 }\n+    impl_to_source_int! { unsigned, u16,  ast::TyU16 }\n+    impl_to_source_int! { unsigned, u32,  ast::TyU32 }\n+    impl_to_source_int! { unsigned, u64,  ast::TyU64 }\n \n     // Alas ... we write these out instead. All redundant.\n "}, {"sha": "f1f547ba0c7dd52e24855c6f32f558ecb390e743", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e95779554e9d6fc111102df7af80b40f8e22cfae/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e95779554e9d6fc111102df7af80b40f8e22cfae/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=e95779554e9d6fc111102df7af80b40f8e22cfae", "patch": "@@ -702,14 +702,14 @@ pub fn integer_lit(s: &str, suffix: Option<&str>, sd: &SpanHandler, sp: Span) ->\n     if let Some(suf) = suffix {\n         if suf.is_empty() { sd.span_bug(sp, \"found empty literal suffix in Some\")}\n         ty = match suf {\n-            \"i\"   => ast::SignedIntLit(ast::TyIs, ast::Plus),\n-            \"is\"   => ast::SignedIntLit(ast::TyIs, ast::Plus),\n+            \"i\"   => ast::SignedIntLit(ast::TyIs(true), ast::Plus),\n+            \"is\"   => ast::SignedIntLit(ast::TyIs(false), ast::Plus),\n             \"i8\"  => ast::SignedIntLit(ast::TyI8, ast::Plus),\n             \"i16\" => ast::SignedIntLit(ast::TyI16, ast::Plus),\n             \"i32\" => ast::SignedIntLit(ast::TyI32, ast::Plus),\n             \"i64\" => ast::SignedIntLit(ast::TyI64, ast::Plus),\n-            \"u\"   => ast::UnsignedIntLit(ast::TyUs),\n-            \"us\"   => ast::UnsignedIntLit(ast::TyUs),\n+            \"u\"   => ast::UnsignedIntLit(ast::TyUs(true)),\n+            \"us\"   => ast::UnsignedIntLit(ast::TyUs(false)),\n             \"u8\"  => ast::UnsignedIntLit(ast::TyU8),\n             \"u16\" => ast::UnsignedIntLit(ast::TyU16),\n             \"u32\" => ast::UnsignedIntLit(ast::TyU32),"}]}