{"sha": "a5406feb1cf1a9f2479b72917cf4225e5f6aa240", "node_id": "C_kwDOAAsO6NoAKGE1NDA2ZmViMWNmMWE5ZjI0NzliNzI5MTdjZjQyMjVlNWY2YWEyNDA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-26T02:30:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-26T02:30:18Z"}, "message": "Auto merge of #103158 - Bryanskiy:resolve_perf, r=petrochenkov\n\nPerf improvements for effective visibility calculating\n\nrelated to https://github.com/rust-lang/rust/pull/102026\nr? `@petrochenkov`", "tree": {"sha": "dbb40017c1aafcf522992057bda4b59bc94536d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbb40017c1aafcf522992057bda4b59bc94536d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5406feb1cf1a9f2479b72917cf4225e5f6aa240", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5406feb1cf1a9f2479b72917cf4225e5f6aa240", "html_url": "https://github.com/rust-lang/rust/commit/a5406feb1cf1a9f2479b72917cf4225e5f6aa240", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5406feb1cf1a9f2479b72917cf4225e5f6aa240/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6365e5ad9fa9e2ec867a67aeeae414e7c62d8354", "url": "https://api.github.com/repos/rust-lang/rust/commits/6365e5ad9fa9e2ec867a67aeeae414e7c62d8354", "html_url": "https://github.com/rust-lang/rust/commit/6365e5ad9fa9e2ec867a67aeeae414e7c62d8354"}, {"sha": "a9447bb9d00f480d0b7f18218b632eda4d9b4f5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9447bb9d00f480d0b7f18218b632eda4d9b4f5d", "html_url": "https://github.com/rust-lang/rust/commit/a9447bb9d00f480d0b7f18218b632eda4d9b4f5d"}], "stats": {"total": 110, "additions": 57, "deletions": 53}, "files": [{"sha": "5687e5bdc4342ea461337ad22e67b68b9445667e", "filename": "compiler/rustc_middle/src/middle/privacy.rs", "status": "modified", "additions": 35, "deletions": 33, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/a5406feb1cf1a9f2479b72917cf4225e5f6aa240/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5406feb1cf1a9f2479b72917cf4225e5f6aa240/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fprivacy.rs?ref=a5406feb1cf1a9f2479b72917cf4225e5f6aa240", "patch": "@@ -69,21 +69,7 @@ impl EffectiveVisibility {\n         self.get(tag).is_public()\n     }\n \n-    fn update(&mut self, vis: Visibility, tag: AccessLevel, tree: impl DefIdTree) -> bool {\n-        let mut changed = false;\n-        for level in AccessLevel::all_levels() {\n-            if level <= tag {\n-                let current_effective_vis = self.get_mut(level);\n-                if *current_effective_vis != vis && vis.is_at_least(*current_effective_vis, tree) {\n-                    changed = true;\n-                    *current_effective_vis = vis;\n-                }\n-            }\n-        }\n-        changed\n-    }\n-\n-    fn from_vis(vis: Visibility) -> EffectiveVisibility {\n+    pub fn from_vis(vis: Visibility) -> EffectiveVisibility {\n         EffectiveVisibility {\n             public: vis,\n             exported: vis,\n@@ -173,33 +159,49 @@ impl<Id: Hash + Eq + Copy + Into<DefId>> AccessLevels<Id> {\n         parent_id: Id,\n         tag: AccessLevel,\n         tree: impl DefIdTree,\n-    ) -> Result<bool, ()> {\n+    ) -> bool {\n         let mut changed = false;\n-        let mut current_effective_vis = self\n-            .get_effective_vis(id)\n-            .copied()\n-            .unwrap_or_else(|| EffectiveVisibility::from_vis(default_vis()));\n+        let mut current_effective_vis = self.get_effective_vis(id).copied().unwrap_or_else(|| {\n+            if id.into().is_crate_root() {\n+                EffectiveVisibility::from_vis(Visibility::Public)\n+            } else {\n+                EffectiveVisibility::from_vis(default_vis())\n+            }\n+        });\n         if let Some(inherited_effective_vis) = self.get_effective_vis(parent_id) {\n+            let mut inherited_effective_vis_at_prev_level = *inherited_effective_vis.get(tag);\n+            let mut calculated_effective_vis = inherited_effective_vis_at_prev_level;\n             for level in AccessLevel::all_levels() {\n                 if tag >= level {\n                     let inherited_effective_vis_at_level = *inherited_effective_vis.get(level);\n-                    let calculated_effective_vis =\n-                        if nominal_vis.is_at_least(inherited_effective_vis_at_level, tree) {\n-                            inherited_effective_vis_at_level\n-                        } else {\n-                            nominal_vis\n-                        };\n-                    changed |= current_effective_vis.update(calculated_effective_vis, level, tree);\n+                    let current_effective_vis_at_level = current_effective_vis.get_mut(level);\n+                    // effective visibility for id shouldn't be recalculated if\n+                    // inherited from parent_id effective visibility isn't changed at next level\n+                    if !(inherited_effective_vis_at_prev_level == inherited_effective_vis_at_level\n+                        && tag != level)\n+                    {\n+                        calculated_effective_vis =\n+                            if nominal_vis.is_at_least(inherited_effective_vis_at_level, tree) {\n+                                inherited_effective_vis_at_level\n+                            } else {\n+                                nominal_vis\n+                            };\n+                    }\n+                    // effective visibility can't be decreased at next update call for the\n+                    // same id\n+                    if *current_effective_vis_at_level != calculated_effective_vis\n+                        && calculated_effective_vis\n+                            .is_at_least(*current_effective_vis_at_level, tree)\n+                    {\n+                        changed = true;\n+                        *current_effective_vis_at_level = calculated_effective_vis;\n+                    }\n+                    inherited_effective_vis_at_prev_level = inherited_effective_vis_at_level;\n                 }\n             }\n-        } else {\n-            if !id.into().is_crate_root() {\n-                return Err(());\n-            }\n-            changed |= current_effective_vis.update(Visibility::Public, AccessLevel::Public, tree);\n         }\n         self.map.insert(id, current_effective_vis);\n-        Ok(changed)\n+        changed\n     }\n }\n "}, {"sha": "4db58d92bd5e3f33690591ce4483e06fa0d94aff", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a5406feb1cf1a9f2479b72917cf4225e5f6aa240/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5406feb1cf1a9f2479b72917cf4225e5f6aa240/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=a5406feb1cf1a9f2479b72917cf4225e5f6aa240", "patch": "@@ -922,9 +922,9 @@ pub struct TestReachabilityVisitor<'tcx, 'a> {\n impl<'tcx, 'a> TestReachabilityVisitor<'tcx, 'a> {\n     fn access_level_diagnostic(&mut self, def_id: LocalDefId) {\n         if self.tcx.has_attr(def_id.to_def_id(), sym::rustc_effective_visibility) {\n+            let mut error_msg = String::new();\n+            let span = self.tcx.def_span(def_id.to_def_id());\n             if let Some(effective_vis) = self.access_levels.get_effective_vis(def_id) {\n-                let mut error_msg = String::new();\n-                let span = self.tcx.def_span(def_id.to_def_id());\n                 for level in AccessLevel::all_levels() {\n                     let vis_str = match effective_vis.get(level) {\n                         ty::Visibility::Restricted(restricted_id) => {\n@@ -943,8 +943,10 @@ impl<'tcx, 'a> TestReachabilityVisitor<'tcx, 'a> {\n                     }\n                     error_msg.push_str(&format!(\"{:?}: {}\", level, vis_str));\n                 }\n-                self.tcx.sess.emit_err(ReportEffectiveVisibility { span, descr: error_msg });\n+            } else {\n+                error_msg.push_str(\"not in the table\");\n             }\n+            self.tcx.sess.emit_err(ReportEffectiveVisibility { span, descr: error_msg });\n         }\n     }\n }"}, {"sha": "c27b5b0c420072e8ce6d6d7d5828f8279535ed99", "filename": "compiler/rustc_resolve/src/access_levels.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a5406feb1cf1a9f2479b72917cf4225e5f6aa240/compiler%2Frustc_resolve%2Fsrc%2Faccess_levels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5406feb1cf1a9f2479b72917cf4225e5f6aa240/compiler%2Frustc_resolve%2Fsrc%2Faccess_levels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Faccess_levels.rs?ref=a5406feb1cf1a9f2479b72917cf4225e5f6aa240", "patch": "@@ -96,25 +96,25 @@ impl<'r, 'a> AccessLevelsVisitor<'r, 'a> {\n         parent_id: LocalDefId,\n         tag: AccessLevel,\n     ) {\n+        let module_id = self\n+            .r\n+            .get_nearest_non_block_module(def_id.to_def_id())\n+            .nearest_parent_mod()\n+            .expect_local();\n+        if nominal_vis == Visibility::Restricted(module_id)\n+            || self.r.visibilities[&parent_id] == Visibility::Restricted(module_id)\n+        {\n+            return;\n+        }\n         let mut access_levels = std::mem::take(&mut self.r.access_levels);\n-        let module_id =\n-            self.r.get_nearest_non_block_module(def_id.to_def_id()).def_id().expect_local();\n-        let res = access_levels.update(\n+        self.changed |= access_levels.update(\n             def_id,\n             nominal_vis,\n             || Visibility::Restricted(module_id),\n             parent_id,\n             tag,\n             &*self.r,\n         );\n-        if let Ok(changed) = res {\n-            self.changed |= changed;\n-        } else {\n-            self.r.session.delay_span_bug(\n-                self.r.opt_span(def_id.to_def_id()).unwrap(),\n-                \"Can't update effective visibility\",\n-            );\n-        }\n         self.r.access_levels = access_levels;\n     }\n }"}, {"sha": "6bca7161886855debdfef80175ff11c8b152efcc", "filename": "src/test/ui/privacy/access_levels.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a5406feb1cf1a9f2479b72917cf4225e5f6aa240/src%2Ftest%2Fui%2Fprivacy%2Faccess_levels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5406feb1cf1a9f2479b72917cf4225e5f6aa240/src%2Ftest%2Fui%2Fprivacy%2Faccess_levels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Faccess_levels.rs?ref=a5406feb1cf1a9f2479b72917cf4225e5f6aa240", "patch": "@@ -17,12 +17,12 @@ mod outer { //~ ERROR Public: pub(crate), Exported: pub(crate), Reachable: pub(c\n         }\n \n         #[rustc_effective_visibility]\n-        struct PrivStruct; //~ ERROR Public: pub(self), Exported: pub(self), Reachable: pub(self), ReachableFromImplTrait: pub(self)\n+        struct PrivStruct; //~ ERROR not in the table\n \n         #[rustc_effective_visibility]\n         pub union PubUnion { //~ ERROR Public: pub(crate), Exported: pub, Reachable: pub, ReachableFromImplTrait: pub\n             #[rustc_effective_visibility]\n-            a: u8, //~ ERROR Public: pub(self), Exported: pub(self), Reachable: pub(self), ReachableFromImplTrait: pub(self)\n+            a: u8, //~ ERROR not in the table\n             #[rustc_effective_visibility]\n             pub b: u8, //~ ERROR Public: pub(crate), Exported: pub, Reachable: pub, ReachableFromImplTrait: pub\n         }\n@@ -38,13 +38,13 @@ mod outer { //~ ERROR Public: pub(crate), Exported: pub(crate), Reachable: pub(c\n     }\n \n     #[rustc_effective_visibility]\n-    macro_rules! none_macro { //~ Public: pub(crate), Exported: pub(crate), Reachable: pub(crate), ReachableFromImplTrait: pub(crate)\n+    macro_rules! none_macro { //~ ERROR Public: pub(crate), Exported: pub(crate), Reachable: pub(crate), ReachableFromImplTrait: pub(crate)\n         () => {};\n     }\n \n     #[macro_export]\n     #[rustc_effective_visibility]\n-    macro_rules! public_macro { //~ Public: pub, Exported: pub, Reachable: pub, ReachableFromImplTrait: pub\n+    macro_rules! public_macro { //~ ERROR Public: pub, Exported: pub, Reachable: pub, ReachableFromImplTrait: pub\n         () => {};\n     }\n "}, {"sha": "07c4d436ff000a84a570dbc25f5e9415e520b712", "filename": "src/test/ui/privacy/access_levels.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a5406feb1cf1a9f2479b72917cf4225e5f6aa240/src%2Ftest%2Fui%2Fprivacy%2Faccess_levels.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a5406feb1cf1a9f2479b72917cf4225e5f6aa240/src%2Ftest%2Fui%2Fprivacy%2Faccess_levels.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Faccess_levels.stderr?ref=a5406feb1cf1a9f2479b72917cf4225e5f6aa240", "patch": "@@ -22,7 +22,7 @@ error: Public: pub(crate), Exported: pub, Reachable: pub, ReachableFromImplTrait\n LL |         pub trait PubTrait {\n    |         ^^^^^^^^^^^^^^^^^^\n \n-error: Public: pub(self), Exported: pub(self), Reachable: pub(self), ReachableFromImplTrait: pub(self)\n+error: not in the table\n   --> $DIR/access_levels.rs:20:9\n    |\n LL |         struct PrivStruct;\n@@ -34,7 +34,7 @@ error: Public: pub(crate), Exported: pub, Reachable: pub, ReachableFromImplTrait\n LL |         pub union PubUnion {\n    |         ^^^^^^^^^^^^^^^^^^\n \n-error: Public: pub(self), Exported: pub(self), Reachable: pub(self), ReachableFromImplTrait: pub(self)\n+error: not in the table\n   --> $DIR/access_levels.rs:25:13\n    |\n LL |             a: u8,"}]}