{"sha": "80ad300b890c07d4c95fbf63c0f9cd3e397e545f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwYWQzMDBiODkwYzA3ZDRjOTVmYmY2M2MwZjljZDNlMzk3ZTU0NWY=", "commit": {"author": {"name": "Keith Yeung", "email": "kungfukeith11@gmail.com", "date": "2018-10-02T16:31:46Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-19T13:34:28Z"}, "message": "Wrap cast expressions inside of ValueTypeAscription", "tree": {"sha": "9f802c9584daa5b88556107a7d53ba355484ca0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f802c9584daa5b88556107a7d53ba355484ca0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80ad300b890c07d4c95fbf63c0f9cd3e397e545f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80ad300b890c07d4c95fbf63c0f9cd3e397e545f", "html_url": "https://github.com/rust-lang/rust/commit/80ad300b890c07d4c95fbf63c0f9cd3e397e545f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80ad300b890c07d4c95fbf63c0f9cd3e397e545f/comments", "author": {"login": "KiChjang", "id": 3248587, "node_id": "MDQ6VXNlcjMyNDg1ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/3248587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KiChjang", "html_url": "https://github.com/KiChjang", "followers_url": "https://api.github.com/users/KiChjang/followers", "following_url": "https://api.github.com/users/KiChjang/following{/other_user}", "gists_url": "https://api.github.com/users/KiChjang/gists{/gist_id}", "starred_url": "https://api.github.com/users/KiChjang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KiChjang/subscriptions", "organizations_url": "https://api.github.com/users/KiChjang/orgs", "repos_url": "https://api.github.com/users/KiChjang/repos", "events_url": "https://api.github.com/users/KiChjang/events{/privacy}", "received_events_url": "https://api.github.com/users/KiChjang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e20fa70bb349026226616b92ea44f7bdfd270d75", "url": "https://api.github.com/repos/rust-lang/rust/commits/e20fa70bb349026226616b92ea44f7bdfd270d75", "html_url": "https://github.com/rust-lang/rust/commit/e20fa70bb349026226616b92ea44f7bdfd270d75"}], "stats": {"total": 42, "additions": 40, "deletions": 2}, "files": [{"sha": "796f6753e95168c030027b370c0b726b024bb8ab", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/80ad300b890c07d4c95fbf63c0f9cd3e397e545f/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80ad300b890c07d4c95fbf63c0f9cd3e397e545f/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=80ad300b890c07d4c95fbf63c0f9cd3e397e545f", "patch": "@@ -637,7 +637,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                 name: Field::new(cx.tcx.field_index(expr.id, cx.tables)),\n             }\n         }\n-        hir::ExprKind::Cast(ref source, _) => {\n+        hir::ExprKind::Cast(ref source, ref ty) => {\n             // Check to see if this cast is a \"coercion cast\", where the cast is actually done\n             // using a coercion (or is a no-op).\n             if let Some(&TyCastKind::CoercionCast) = cx.tables()\n@@ -714,7 +714,26 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                 } else {\n                     source.to_ref()\n                 };\n-                ExprKind::Cast { source }\n+\n+                let cast = ExprKind::Cast { source };\n+\n+                if let Some(user_ty) = cx.tables.user_provided_tys().get(ty.hir_id) {\n+                    // NOTE: Creating a new Expr and wrapping a Cast inside of it may be\n+                    //       inefficient, revisit this when performance becomes an issue.\n+                    let cast_expr = Expr {\n+                        temp_lifetime,\n+                        ty: expr_ty,\n+                        span: expr.span,\n+                        kind: cast,\n+                    };\n+\n+                    ExprKind::ValueTypeAscription {\n+                        source: cast_expr.to_ref(),\n+                        user_ty: UserTypeAnnotation::Ty(*user_ty),\n+                    }\n+                } else {\n+                    cast\n+                }\n             }\n         }\n         hir::ExprKind::Type(ref source, ref ty) => {"}, {"sha": "e6922d1c4c7e452b0f1289591eec87612b28f614", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/80ad300b890c07d4c95fbf63c0f9cd3e397e545f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80ad300b890c07d4c95fbf63c0f9cd3e397e545f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=80ad300b890c07d4c95fbf63c0f9cd3e397e545f", "patch": "@@ -4166,6 +4166,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     let mut deferred_cast_checks = self.deferred_cast_checks.borrow_mut();\n                     match cast::CastCheck::new(self, e, t_expr, t_cast, t.span, expr.span) {\n                         Ok(cast_check) => {\n+                            let c_ty = self.infcx.canonicalize_response(&t_cast);\n+                            self.tables.borrow_mut().user_provided_tys_mut().insert(t.hir_id, c_ty);\n                             deferred_cast_checks.push(cast_check);\n                             t_cast\n                         }"}, {"sha": "aa2cf85dfd9992c7cc8416f97f0bcba28b19a394", "filename": "src/test/ui/nll/user-annotations/cast_static_lifetime.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/80ad300b890c07d4c95fbf63c0f9cd3e397e545f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fcast_static_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80ad300b890c07d4c95fbf63c0f9cd3e397e545f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fcast_static_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fcast_static_lifetime.rs?ref=80ad300b890c07d4c95fbf63c0f9cd3e397e545f", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(warnings)]\n+#![feature(nll)]\n+\n+fn main() {\n+    let x = 22_u32;\n+    let y: &u32 = (&x) as &'static u32;\n+}"}]}