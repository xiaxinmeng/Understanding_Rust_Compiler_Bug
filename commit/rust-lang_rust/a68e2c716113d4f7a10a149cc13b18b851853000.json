{"sha": "a68e2c716113d4f7a10a149cc13b18b851853000", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2OGUyYzcxNjExM2Q0ZjdhMTBhMTQ5Y2MxM2IxOGI4NTE4NTMwMDA=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-07-01T19:19:21Z"}, "committer": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-07-01T19:19:30Z"}, "message": "Clean up extra lifetime, add assertions", "tree": {"sha": "a0d5adfa3f8a8f1a51402c7b66b80587abb791a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0d5adfa3f8a8f1a51402c7b66b80587abb791a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a68e2c716113d4f7a10a149cc13b18b851853000", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a68e2c716113d4f7a10a149cc13b18b851853000", "html_url": "https://github.com/rust-lang/rust/commit/a68e2c716113d4f7a10a149cc13b18b851853000", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a68e2c716113d4f7a10a149cc13b18b851853000/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8ed2e7ed4118a2e590489514ad21b21afc9d1b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8ed2e7ed4118a2e590489514ad21b21afc9d1b0", "html_url": "https://github.com/rust-lang/rust/commit/d8ed2e7ed4118a2e590489514ad21b21afc9d1b0"}], "stats": {"total": 51, "additions": 26, "deletions": 25}, "files": [{"sha": "7fa950cb98d344886fa6b94698647d5fecab2f2b", "filename": "src/librustc_mir/dataflow/impls/storage_liveness.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a68e2c716113d4f7a10a149cc13b18b851853000/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a68e2c716113d4f7a10a149cc13b18b851853000/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs?ref=a68e2c716113d4f7a10a149cc13b18b851853000", "patch": "@@ -33,7 +33,9 @@ impl<'a, 'tcx> BitDenotation<'tcx> for MaybeStorageLive<'a, 'tcx> {\n     }\n \n     fn start_block_effect(&self, _on_entry: &mut BitSet<Local>) {\n-        // Nothing is live on function entry\n+        // Nothing is live on function entry (generators only have a self\n+        // argument, and we don't care about that)\n+        assert_eq!(1, self.body.arg_count);\n     }\n \n     fn statement_effect(&self,\n@@ -72,16 +74,16 @@ impl<'a, 'tcx> BottomValue for MaybeStorageLive<'a, 'tcx> {\n \n /// Dataflow analysis that determines whether each local requires storage at a\n /// given location; i.e. whether its storage can go away without being observed.\n-pub struct RequiresStorage<'mir, 'tcx, 'b> {\n+pub struct RequiresStorage<'mir, 'tcx> {\n     body: &'mir Body<'tcx>,\n     borrowed_locals:\n-        RefCell<DataflowResultsRefCursor<'mir, 'tcx, 'b, HaveBeenBorrowedLocals<'mir, 'tcx>>>,\n+        RefCell<DataflowResultsRefCursor<'mir, 'tcx, HaveBeenBorrowedLocals<'mir, 'tcx>>>,\n }\n \n-impl<'mir, 'tcx: 'mir, 'b> RequiresStorage<'mir, 'tcx, 'b> {\n+impl<'mir, 'tcx: 'mir> RequiresStorage<'mir, 'tcx> {\n     pub fn new(\n         body: &'mir Body<'tcx>,\n-        borrowed_locals: &'b DataflowResults<'tcx, HaveBeenBorrowedLocals<'mir, 'tcx>>,\n+        borrowed_locals: &'mir DataflowResults<'tcx, HaveBeenBorrowedLocals<'mir, 'tcx>>,\n     ) -> Self {\n         RequiresStorage {\n             body,\n@@ -94,15 +96,17 @@ impl<'mir, 'tcx: 'mir, 'b> RequiresStorage<'mir, 'tcx, 'b> {\n     }\n }\n \n-impl<'mir, 'tcx, 'b> BitDenotation<'tcx> for RequiresStorage<'mir, 'tcx, 'b> {\n+impl<'mir, 'tcx> BitDenotation<'tcx> for RequiresStorage<'mir, 'tcx> {\n     type Idx = Local;\n     fn name() -> &'static str { \"requires_storage\" }\n     fn bits_per_block(&self) -> usize {\n         self.body.local_decls.len()\n     }\n \n     fn start_block_effect(&self, _sets: &mut BitSet<Local>) {\n-        // Nothing is live on function entry\n+        // Nothing is live on function entry (generators only have a self\n+        // argument, and we don't care about that)\n+        assert_eq!(1, self.body.arg_count);\n     }\n \n     fn statement_effect(&self,\n@@ -146,7 +150,7 @@ impl<'mir, 'tcx, 'b> BitDenotation<'tcx> for RequiresStorage<'mir, 'tcx, 'b> {\n     }\n }\n \n-impl<'mir, 'tcx, 'b> RequiresStorage<'mir, 'tcx, 'b> {\n+impl<'mir, 'tcx> RequiresStorage<'mir, 'tcx> {\n     /// Kill locals that are fully moved and have not been borrowed.\n     fn check_for_move(&self, sets: &mut GenKillSet<Local>, loc: Location) {\n         let mut visitor = MoveVisitor {\n@@ -165,18 +169,18 @@ impl<'mir, 'tcx, 'b> RequiresStorage<'mir, 'tcx, 'b> {\n     }\n }\n \n-impl<'mir, 'tcx, 'b> BottomValue for RequiresStorage<'mir, 'tcx, 'b> {\n+impl<'mir, 'tcx> BottomValue for RequiresStorage<'mir, 'tcx> {\n     /// bottom = dead\n     const BOTTOM_VALUE: bool = false;\n }\n \n-struct MoveVisitor<'a, 'b, 'mir, 'tcx> {\n+struct MoveVisitor<'a, 'mir, 'tcx> {\n     borrowed_locals:\n-        &'a RefCell<DataflowResultsRefCursor<'mir, 'tcx, 'b, HaveBeenBorrowedLocals<'mir, 'tcx>>>,\n+        &'a RefCell<DataflowResultsRefCursor<'mir, 'tcx, HaveBeenBorrowedLocals<'mir, 'tcx>>>,\n     sets: &'a mut GenKillSet<Local>,\n }\n \n-impl<'a, 'b, 'mir: 'a, 'tcx> Visitor<'tcx> for MoveVisitor<'a, 'b, 'mir, 'tcx> {\n+impl<'a, 'mir: 'a, 'tcx> Visitor<'tcx> for MoveVisitor<'a, 'mir, 'tcx> {\n     fn visit_local(&mut self, local: &Local, context: PlaceContext, loc: Location) {\n         if PlaceContext::NonMutatingUse(NonMutatingUseContext::Move) == context {\n             let mut borrowed_locals = self.borrowed_locals.borrow_mut();"}, {"sha": "25e7a5d9cf378edbdee31d4c739832187337e745", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a68e2c716113d4f7a10a149cc13b18b851853000/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a68e2c716113d4f7a10a149cc13b18b851853000/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=a68e2c716113d4f7a10a149cc13b18b851853000", "patch": "@@ -359,8 +359,8 @@ where\n     body: &'mir Body<'tcx>,\n }\n \n-pub type DataflowResultsRefCursor<'mir, 'tcx, 'flow, BD> =\n-    DataflowResultsCursor<'mir, 'tcx, BD, &'flow DataflowResults<'tcx, BD>>;\n+pub type DataflowResultsRefCursor<'mir, 'tcx, BD> =\n+    DataflowResultsCursor<'mir, 'tcx, BD, &'mir DataflowResults<'tcx, BD>>;\n \n impl<'mir, 'tcx, BD, DR> DataflowResultsCursor<'mir, 'tcx, BD, DR>\n where"}, {"sha": "6d6bce5ffbbc76a1fdd03a506a2bfa38f1d81820", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a68e2c716113d4f7a10a149cc13b18b851853000/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a68e2c716113d4f7a10a149cc13b18b851853000/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=a68e2c716113d4f7a10a149cc13b18b851853000", "patch": "@@ -62,7 +62,6 @@ use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n use rustc_data_structures::bit_set::{BitSet, BitMatrix};\n use std::borrow::Cow;\n use std::iter;\n-use std::marker::PhantomData;\n use std::mem;\n use crate::transform::{MirPass, MirSource};\n use crate::transform::simplify;\n@@ -578,8 +577,8 @@ fn compute_storage_conflicts(\n     body: &'mir Body<'tcx>,\n     stored_locals: &liveness::LiveVarSet,\n     ignored: &StorageIgnored,\n-    requires_storage: DataflowResults<'tcx, RequiresStorage<'mir, 'tcx, '_>>,\n-    _requires_storage_analysis: RequiresStorage<'mir, 'tcx, '_>,\n+    requires_storage: DataflowResults<'tcx, RequiresStorage<'mir, 'tcx>>,\n+    _requires_storage_analysis: RequiresStorage<'mir, 'tcx>,\n ) -> BitMatrix<GeneratorSavedLocal, GeneratorSavedLocal> {\n     assert_eq!(body.local_decls.len(), ignored.0.domain_size());\n     assert_eq!(body.local_decls.len(), stored_locals.domain_size());\n@@ -596,7 +595,6 @@ fn compute_storage_conflicts(\n         body,\n         stored_locals: &stored_locals,\n         local_conflicts: BitMatrix::from_row_n(&ineligible_locals, body.local_decls.len()),\n-        _phantom: PhantomData::default(),\n     };\n     let mut state = FlowAtLocation::new(requires_storage);\n     visitor.analyze_results(&mut state);\n@@ -628,19 +626,18 @@ fn compute_storage_conflicts(\n     storage_conflicts\n }\n \n-struct StorageConflictVisitor<'body: 'b, 'tcx, 's, 'b> {\n+struct StorageConflictVisitor<'body, 'tcx, 's> {\n     body: &'body Body<'tcx>,\n     stored_locals: &'s liveness::LiveVarSet,\n     // FIXME(tmandry): Consider using sparse bitsets here once we have good\n     // benchmarks for generators.\n     local_conflicts: BitMatrix<Local, Local>,\n-    _phantom: PhantomData<&'b ()>,\n }\n \n-impl<'body, 'tcx, 's, 'b> DataflowResultsConsumer<'body, 'tcx>\n-    for StorageConflictVisitor<'body, 'tcx, 's, 'b>\n+impl<'body, 'tcx, 's> DataflowResultsConsumer<'body, 'tcx>\n+    for StorageConflictVisitor<'body, 'tcx, 's>\n {\n-    type FlowState = FlowAtLocation<'tcx, RequiresStorage<'body, 'tcx, 'b>>;\n+    type FlowState = FlowAtLocation<'tcx, RequiresStorage<'body, 'tcx>>;\n \n     fn body(&self) -> &'body Body<'tcx> {\n         self.body\n@@ -668,9 +665,9 @@ impl<'body, 'tcx, 's, 'b> DataflowResultsConsumer<'body, 'tcx>\n     }\n }\n \n-impl<'body, 'tcx, 's, 'b> StorageConflictVisitor<'body, 'tcx, 's, 'b> {\n+impl<'body, 'tcx, 's> StorageConflictVisitor<'body, 'tcx, 's> {\n     fn apply_state(&mut self,\n-                   flow_state: &FlowAtLocation<'tcx, RequiresStorage<'body, 'tcx, 'b>>,\n+                   flow_state: &FlowAtLocation<'tcx, RequiresStorage<'body, 'tcx>>,\n                    loc: Location) {\n         // Ignore unreachable blocks.\n         match self.body.basic_blocks()[loc.block].terminator().kind {"}]}