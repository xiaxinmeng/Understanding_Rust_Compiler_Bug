{"sha": "c159e414b42e2fd43ed88bbf4113fbe8c8e372fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxNTllNDE0YjQyZTJmZDQzZWQ4OGJiZjQxMTNmYmU4YzhlMzcyZmU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-15T15:30:58Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-15T15:30:58Z"}, "message": "remove Cancelable from Module API, part 2", "tree": {"sha": "f8035b08462e192462528c9f3942431162aa9068", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8035b08462e192462528c9f3942431162aa9068"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c159e414b42e2fd43ed88bbf4113fbe8c8e372fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c159e414b42e2fd43ed88bbf4113fbe8c8e372fe", "html_url": "https://github.com/rust-lang/rust/commit/c159e414b42e2fd43ed88bbf4113fbe8c8e372fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c159e414b42e2fd43ed88bbf4113fbe8c8e372fe/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca52cf1ecd4f65ff2a8c3953c35b006e73a60ea8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca52cf1ecd4f65ff2a8c3953c35b006e73a60ea8", "html_url": "https://github.com/rust-lang/rust/commit/ca52cf1ecd4f65ff2a8c3953c35b006e73a60ea8"}], "stats": {"total": 61, "additions": 28, "deletions": 33}, "files": [{"sha": "81638e3842e6e31ee772f1b88ac04b5e1cb93409", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c159e414b42e2fd43ed88bbf4113fbe8c8e372fe/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c159e414b42e2fd43ed88bbf4113fbe8c8e372fe/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=c159e414b42e2fd43ed88bbf4113fbe8c8e372fe", "patch": "@@ -97,14 +97,14 @@ impl Module {\n     }\n \n     /// Returns the crate this module is part of.\n-    pub fn krate(&self, db: &impl HirDatabase) -> Cancelable<Option<Crate>> {\n+    pub fn krate(&self, db: &impl HirDatabase) -> Option<Crate> {\n         self.krate_impl(db)\n     }\n \n     /// Topmost parent of this module. Every module has a `crate_root`, but some\n     /// might be missing `krate`. This can happen if a module's file is not included\n     /// in the module tree of any target in Cargo.toml.\n-    pub fn crate_root(&self, db: &impl HirDatabase) -> Cancelable<Module> {\n+    pub fn crate_root(&self, db: &impl HirDatabase) -> Module {\n         self.crate_root_impl(db)\n     }\n \n@@ -114,23 +114,23 @@ impl Module {\n     }\n \n     /// Iterates over all child modules.\n-    pub fn children(&self, db: &impl HirDatabase) -> Cancelable<impl Iterator<Item = Module>> {\n+    pub fn children(&self, db: &impl HirDatabase) -> impl Iterator<Item = Module> {\n         self.children_impl(db)\n     }\n \n     /// Finds a parent module.\n-    pub fn parent(&self, db: &impl HirDatabase) -> Cancelable<Option<Module>> {\n+    pub fn parent(&self, db: &impl HirDatabase) -> Option<Module> {\n         self.parent_impl(db)\n     }\n \n-    pub fn path_to_root(&self, db: &impl HirDatabase) -> Cancelable<Vec<Module>> {\n+    pub fn path_to_root(&self, db: &impl HirDatabase) -> Vec<Module> {\n         let mut res = vec![self.clone()];\n         let mut curr = self.clone();\n-        while let Some(next) = curr.parent(db)? {\n+        while let Some(next) = curr.parent(db) {\n             res.push(next.clone());\n             curr = next\n         }\n-        Ok(res)\n+        res\n     }\n \n     /// Returns a `ModuleScope`: a set of items, visible in this module."}, {"sha": "8668d6c8aab3aba774f13cd685fc5d885f67b5af", "filename": "crates/ra_hir/src/code_model_impl/module.rs", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c159e414b42e2fd43ed88bbf4113fbe8c8e372fe/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c159e414b42e2fd43ed88bbf4113fbe8c8e372fe/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs?ref=c159e414b42e2fd43ed88bbf4113fbe8c8e372fe", "patch": "@@ -66,21 +66,21 @@ impl Module {\n         Some((file_id, src))\n     }\n \n-    pub(crate) fn krate_impl(&self, db: &impl HirDatabase) -> Cancelable<Option<Crate>> {\n-        let root = self.crate_root(db)?;\n+    pub(crate) fn krate_impl(&self, db: &impl HirDatabase) -> Option<Crate> {\n+        let root = self.crate_root(db);\n         let loc = root.def_id.loc(db);\n         let file_id = loc.source_item_id.file_id.as_original_file();\n \n         let crate_graph = db.crate_graph();\n-        let crate_id = ctry!(crate_graph.crate_id_for_crate_root(file_id));\n-        Ok(Some(Crate::new(crate_id)))\n+        let crate_id = crate_graph.crate_id_for_crate_root(file_id)?;\n+        Some(Crate::new(crate_id))\n     }\n \n-    pub(crate) fn crate_root_impl(&self, db: &impl HirDatabase) -> Cancelable<Module> {\n+    pub(crate) fn crate_root_impl(&self, db: &impl HirDatabase) -> Module {\n         let loc = self.def_id.loc(db);\n         let module_tree = db.module_tree(loc.source_root_id);\n         let module_id = loc.module_id.crate_root(&module_tree);\n-        Ok(Module::from_module_id(db, loc.source_root_id, module_id))\n+        Module::from_module_id(db, loc.source_root_id, module_id)\n     }\n \n     /// Finds a child module with the specified name.\n@@ -92,7 +92,7 @@ impl Module {\n     }\n \n     /// Iterates over all child modules.\n-    pub fn children_impl(&self, db: &impl HirDatabase) -> Cancelable<impl Iterator<Item = Module>> {\n+    pub fn children_impl(&self, db: &impl HirDatabase) -> impl Iterator<Item = Module> {\n         // FIXME this should be implementable without collecting into a vec, but\n         // it's kind of hard since the iterator needs to keep a reference to the\n         // module tree.\n@@ -103,18 +103,14 @@ impl Module {\n             .children(&module_tree)\n             .map(|(_, module_id)| Module::from_module_id(db, loc.source_root_id, module_id))\n             .collect::<Vec<_>>();\n-        Ok(children.into_iter())\n+        children.into_iter()\n     }\n \n-    pub fn parent_impl(&self, db: &impl HirDatabase) -> Cancelable<Option<Module>> {\n+    pub fn parent_impl(&self, db: &impl HirDatabase) -> Option<Module> {\n         let loc = self.def_id.loc(db);\n         let module_tree = db.module_tree(loc.source_root_id);\n-        let parent_id = ctry!(loc.module_id.parent(&module_tree));\n-        Ok(Some(Module::from_module_id(\n-            db,\n-            loc.source_root_id,\n-            parent_id,\n-        )))\n+        let parent_id = loc.module_id.parent(&module_tree)?;\n+        Some(Module::from_module_id(db, loc.source_root_id, parent_id))\n     }\n \n     /// Returns a `ModuleScope`: a set of items, visible in this module.\n@@ -132,10 +128,10 @@ impl Module {\n     ) -> Cancelable<PerNs<DefId>> {\n         let mut curr_per_ns = PerNs::types(\n             match path.kind {\n-                PathKind::Crate => self.crate_root(db)?,\n+                PathKind::Crate => self.crate_root(db),\n                 PathKind::Self_ | PathKind::Plain => self.clone(),\n                 PathKind::Super => {\n-                    if let Some(p) = self.parent(db)? {\n+                    if let Some(p) = self.parent(db) {\n                         p\n                     } else {\n                         return Ok(PerNs::none());"}, {"sha": "7b572061a55a44ea3e42f2aa88bae6eb1b643667", "filename": "crates/ra_hir/src/ids.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c159e414b42e2fd43ed88bbf4113fbe8c8e372fe/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c159e414b42e2fd43ed88bbf4113fbe8c8e372fe/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=c159e414b42e2fd43ed88bbf4113fbe8c8e372fe", "patch": "@@ -217,7 +217,7 @@ impl DefId {\n \n     /// Returns the containing crate.\n     pub fn krate(&self, db: &impl HirDatabase) -> Cancelable<Option<Crate>> {\n-        Ok(self.module(db)?.krate(db)?)\n+        Ok(self.module(db)?.krate(db))\n     }\n \n     /// Returns the containing impl block, if this is an impl item."}, {"sha": "f0da2ee2bae32b9353b78c4ffc4b976754a4d576", "filename": "crates/ra_hir/src/ty/method_resolution.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c159e414b42e2fd43ed88bbf4113fbe8c8e372fe/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c159e414b42e2fd43ed88bbf4113fbe8c8e372fe/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs?ref=c159e414b42e2fd43ed88bbf4113fbe8c8e372fe", "patch": "@@ -75,7 +75,7 @@ impl CrateImplBlocks {\n             }\n         }\n \n-        for child in module.children(db)? {\n+        for child in module.children(db) {\n             self.collect_recursive(db, child)?;\n         }\n "}, {"sha": "3ef11dfa17674cce44a3b6ad3f4f2fd60cdb429d", "filename": "crates/ra_ide_api/src/imp.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c159e414b42e2fd43ed88bbf4113fbe8c8e372fe/crates%2Fra_ide_api%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c159e414b42e2fd43ed88bbf4113fbe8c8e372fe/crates%2Fra_ide_api%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fimp.rs?ref=c159e414b42e2fd43ed88bbf4113fbe8c8e372fe", "patch": "@@ -99,16 +99,16 @@ impl db::RootDatabase {\n \n impl db::RootDatabase {\n     /// Returns `Vec` for the same reason as `parent_module`\n-    pub(crate) fn crate_for(&self, file_id: FileId) -> Cancelable<Vec<CrateId>> {\n+    pub(crate) fn crate_for(&self, file_id: FileId) -> Vec<CrateId> {\n         let module = match source_binder::module_from_file_id(self, file_id) {\n             Some(it) => it,\n-            None => return Ok(Vec::new()),\n+            None => return Vec::new(),\n         };\n-        let krate = match module.krate(self)? {\n+        let krate = match module.krate(self) {\n             Some(it) => it,\n-            None => return Ok(Vec::new()),\n+            None => return Vec::new(),\n         };\n-        Ok(vec![krate.crate_id()])\n+        vec![krate.crate_id()]\n     }\n     pub(crate) fn find_all_refs(\n         &self,"}, {"sha": "0f690fc849d2f1420196fd923c00afe3c1ff173a", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c159e414b42e2fd43ed88bbf4113fbe8c8e372fe/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c159e414b42e2fd43ed88bbf4113fbe8c8e372fe/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=c159e414b42e2fd43ed88bbf4113fbe8c8e372fe", "patch": "@@ -419,7 +419,7 @@ impl Analysis {\n \n     /// Returns crates this file belongs too.\n     pub fn crate_for(&self, file_id: FileId) -> Cancelable<Vec<CrateId>> {\n-        self.with_db(|db| db.crate_for(file_id))?\n+        self.with_db(|db| db.crate_for(file_id))\n     }\n \n     /// Returns the root file of the given crate."}, {"sha": "a3207fdd25298a75d60f9db2b1dbcf0dc80596ea", "filename": "crates/ra_ide_api/src/runnables.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c159e414b42e2fd43ed88bbf4113fbe8c8e372fe/crates%2Fra_ide_api%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c159e414b42e2fd43ed88bbf4113fbe8c8e372fe/crates%2Fra_ide_api%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Frunnables.rs?ref=c159e414b42e2fd43ed88bbf4113fbe8c8e372fe", "patch": "@@ -80,7 +80,6 @@ fn runnable_mod(db: &RootDatabase, file_id: FileId, module: &ast::Module) -> Opt\n     // FIXME: thread cancellation instead of `.ok`ing\n     let path = module\n         .path_to_root(db)\n-        .ok()?\n         .into_iter()\n         .rev()\n         .filter_map(|it| it.name(db))"}]}