{"sha": "ba3eebd41db384c2a46535e8db8c7b2337d55f0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhM2VlYmQ0MWRiMzg0YzJhNDY1MzVlOGRiOGM3YjIzMzdkNTVmMGI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-09-23T11:39:27Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-09-23T18:30:13Z"}, "message": "Make it illegal to use modes in a fn signature with providing\nan explicit variable name. (Step one to changing the defaults)\n\nFirst step to #3535", "tree": {"sha": "0a746d1b95cd85358fa07aca67683524c8dd1f79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a746d1b95cd85358fa07aca67683524c8dd1f79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba3eebd41db384c2a46535e8db8c7b2337d55f0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba3eebd41db384c2a46535e8db8c7b2337d55f0b", "html_url": "https://github.com/rust-lang/rust/commit/ba3eebd41db384c2a46535e8db8c7b2337d55f0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e7ddee8239ceba5989c5dfd83e9a935775b00d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e7ddee8239ceba5989c5dfd83e9a935775b00d1", "html_url": "https://github.com/rust-lang/rust/commit/2e7ddee8239ceba5989c5dfd83e9a935775b00d1"}], "stats": {"total": 203, "additions": 111, "deletions": 92}, "files": [{"sha": "1b90e25fdc1c6eca3ee599df44b76d90a89d2bee", "filename": "src/libcore/at_vec.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Flibcore%2Fat_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Flibcore%2Fat_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fat_vec.rs?ref=ba3eebd41db384c2a46535e8db8c7b2337d55f0b", "patch": "@@ -50,7 +50,8 @@ pure fn capacity<T>(&&v: @[const T]) -> uint {\n  *             onto the vector being constructed.\n  */\n #[inline(always)]\n-pure fn build_sized<A>(size: uint, builder: fn(push: pure fn(+A))) -> @[A] {\n+pure fn build_sized<A>(size: uint,\n+                       builder: fn(push: pure fn(+v: A))) -> @[A] {\n     let mut vec = @[];\n     unsafe { raw::reserve(vec, size); }\n     builder(|+x| unsafe { raw::push(vec, move x) });\n@@ -68,7 +69,7 @@ pure fn build_sized<A>(size: uint, builder: fn(push: pure fn(+A))) -> @[A] {\n  *             onto the vector being constructed.\n  */\n #[inline(always)]\n-pure fn build<A>(builder: fn(push: pure fn(+A))) -> @[A] {\n+pure fn build<A>(builder: fn(push: pure fn(+v: A))) -> @[A] {\n     build_sized(4, builder)\n }\n \n@@ -86,7 +87,7 @@ pure fn build<A>(builder: fn(push: pure fn(+A))) -> @[A] {\n  */\n #[inline(always)]\n pure fn build_sized_opt<A>(size: Option<uint>,\n-                           builder: fn(push: pure fn(+A))) -> @[A] {\n+                           builder: fn(push: pure fn(+v: A))) -> @[A] {\n     build_sized(size.get_default(4), builder)\n }\n "}, {"sha": "82767112b3956ba1e648f4ec03177ff00ba3ac69", "filename": "src/libcore/dvec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Flibcore%2Fdvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Flibcore%2Fdvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdvec.rs?ref=ba3eebd41db384c2a46535e8db8c7b2337d55f0b", "patch": "@@ -93,7 +93,7 @@ priv impl<A> DVec<A> {\n     }\n \n     #[inline(always)]\n-    fn check_out<B>(f: fn(-~[A]) -> B) -> B {\n+    fn check_out<B>(f: fn(-v: ~[A]) -> B) -> B {\n         unsafe {\n             let mut data = cast::reinterpret_cast(&null::<()>());\n             data <-> self.data;\n@@ -126,7 +126,7 @@ impl<A> DVec<A> {\n      * and return a new vector to replace it with.\n      */\n     #[inline(always)]\n-    fn swap(f: fn(-~[A]) -> ~[A]) {\n+    fn swap(f: fn(-v: ~[A]) -> ~[A]) {\n         self.check_out(|v| self.give_back(f(move v)))\n     }\n \n@@ -136,7 +136,7 @@ impl<A> DVec<A> {\n      * and return a new vector to replace it with.\n      */\n     #[inline(always)]\n-    fn swap_mut(f: fn(-~[mut A]) -> ~[mut A]) {\n+    fn swap_mut(f: fn(-v: ~[mut A]) -> ~[mut A]) {\n         do self.swap |v| {\n             vec::from_mut(f(vec::to_mut(move v)))\n         }"}, {"sha": "bc7f2c9e666471e867e19cde6da986c03be91714", "filename": "src/libcore/io.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=ba3eebd41db384c2a46535e8db8c7b2337d55f0b", "patch": "@@ -827,7 +827,7 @@ mod fsync {\n     // FIXME (#2004) find better way to create resources within lifetime of\n     // outer res\n     fn FILE_res_sync(&&file: FILERes, opt_level: Option<Level>,\n-                  blk: fn(&&Res<*libc::FILE>)) {\n+                  blk: fn(&&v: Res<*libc::FILE>)) {\n         blk(Res({\n             val: file.f, opt_level: opt_level,\n             fsync_fn: fn@(&&file: *libc::FILE, l: Level) -> int {\n@@ -838,7 +838,7 @@ mod fsync {\n \n     // fsync fd after executing blk\n     fn fd_res_sync(&&fd: FdRes, opt_level: Option<Level>,\n-                   blk: fn(&&Res<fd_t>)) {\n+                   blk: fn(&&v: Res<fd_t>)) {\n         blk(Res({\n             val: fd.fd, opt_level: opt_level,\n             fsync_fn: fn@(&&fd: fd_t, l: Level) -> int {\n@@ -852,7 +852,7 @@ mod fsync {\n \n     // Call o.fsync after executing blk\n     fn obj_sync(&&o: FSyncable, opt_level: Option<Level>,\n-                blk: fn(&&Res<FSyncable>)) {\n+                blk: fn(&&v: Res<FSyncable>)) {\n         blk(Res({\n             val: o, opt_level: opt_level,\n             fsync_fn: fn@(&&o: FSyncable, l: Level) -> int {"}, {"sha": "8af4ce3d0b1b5d256ec55b9aa766f1da7eda0e8f", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=ba3eebd41db384c2a46535e8db8c7b2337d55f0b", "patch": "@@ -63,7 +63,7 @@ trait Buildable<A> {\n      *             onto the sequence being constructed.\n      */\n      static pure fn build_sized(size: uint,\n-                                builder: fn(push: pure fn(+A))) -> self;\n+                                builder: fn(push: pure fn(+v: A))) -> self;\n }\n \n pure fn eachi<A,IA:BaseIter<A>>(self: IA, blk: fn(uint, v: &A) -> bool) {\n@@ -223,7 +223,7 @@ pure fn find<A: Copy,IA:BaseIter<A>>(self: IA,\n  *             onto the sequence being constructed.\n  */\n #[inline(always)]\n-pure fn build<A,B: Buildable<A>>(builder: fn(push: pure fn(+A))) -> B {\n+pure fn build<A,B: Buildable<A>>(builder: fn(push: pure fn(+v: A))) -> B {\n     build_sized(4, builder)\n }\n \n@@ -243,7 +243,7 @@ pure fn build<A,B: Buildable<A>>(builder: fn(push: pure fn(+A))) -> B {\n #[inline(always)]\n pure fn build_sized_opt<A,B: Buildable<A>>(\n     size: Option<uint>,\n-    builder: fn(push: pure fn(+A))) -> B {\n+    builder: fn(push: pure fn(+v: A))) -> B {\n \n     build_sized(size.get_default(4), builder)\n }"}, {"sha": "cadafc81013d5617c4953984d82a945056555f7d", "filename": "src/libcore/option.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=ba3eebd41db384c2a46535e8db8c7b2337d55f0b", "patch": "@@ -69,7 +69,7 @@ pure fn map_ref<T, U>(opt: &Option<T>, f: fn(x: &T) -> U) -> Option<U> {\n     match *opt { Some(ref x) => Some(f(x)), None => None }\n }\n \n-pure fn map_consume<T, U>(+opt: Option<T>, f: fn(+T) -> U) -> Option<U> {\n+pure fn map_consume<T, U>(+opt: Option<T>, f: fn(+v: T) -> U) -> Option<U> {\n     /*!\n      * As `map`, but consumes the option and gives `f` ownership to avoid\n      * copying.\n@@ -107,7 +107,7 @@ pure fn or<T>(+opta: Option<T>, +optb: Option<T>) -> Option<T> {\n }\n \n #[inline(always)]\n-pure fn while_some<T>(+x: Option<T>, blk: fn(+T) -> Option<T>) {\n+pure fn while_some<T>(+x: Option<T>, blk: fn(+v: T) -> Option<T>) {\n     //! Applies a function zero or more times until the result is none.\n \n     let mut opt <- x;\n@@ -248,7 +248,7 @@ impl<T: Copy> Option<T> {\n      */\n     pure fn expect(reason: ~str) -> T { expect(self, reason) }\n     /// Applies a function zero or more times until the result is none.\n-    pure fn while_some(blk: fn(+T) -> Option<T>) { while_some(self, blk) }\n+    pure fn while_some(blk: fn(+v: T) -> Option<T>) { while_some(self, blk) }\n }\n \n #[cfg(stage0)]"}, {"sha": "ecc1e4e8a6325d552b652cc9443e76e379c83679", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=ba3eebd41db384c2a46535e8db8c7b2337d55f0b", "patch": "@@ -889,7 +889,7 @@ endpoint is passed to the new task.\n fn spawn_service<T: Send, Tb: Send>(\n     init: extern fn() -> (SendPacketBuffered<T, Tb>,\n                           RecvPacketBuffered<T, Tb>),\n-    +service: fn~(+RecvPacketBuffered<T, Tb>))\n+    +service: fn~(+v: RecvPacketBuffered<T, Tb>))\n     -> SendPacketBuffered<T, Tb>\n {\n     let (client, server) = init();\n@@ -913,7 +913,7 @@ receive state.\n fn spawn_service_recv<T: Send, Tb: Send>(\n     init: extern fn() -> (RecvPacketBuffered<T, Tb>,\n                           SendPacketBuffered<T, Tb>),\n-    +service: fn~(+SendPacketBuffered<T, Tb>))\n+    +service: fn~(+v: SendPacketBuffered<T, Tb>))\n     -> RecvPacketBuffered<T, Tb>\n {\n     let (client, server) = init();"}, {"sha": "ab4e77895b94dd9ece7d260d4065e3bfe56ce0bc", "filename": "src/libcore/str.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=ba3eebd41db384c2a46535e8db8c7b2337d55f0b", "patch": "@@ -2109,7 +2109,8 @@ mod raw {\n     unsafe fn from_byte(u: u8) -> ~str { raw::from_bytes([u]) }\n \n     /// Form a slice from a *u8 buffer of the given length without copying.\n-    unsafe fn buf_as_slice<T>(buf: *u8, len: uint, f: fn(&& &str) -> T) -> T {\n+    unsafe fn buf_as_slice<T>(buf: *u8, len: uint,\n+                              f: fn(&&v: &str) -> T) -> T {\n         let v = (buf, len + 1);\n         assert is_utf8(::cast::reinterpret_cast(&v));\n         f(::cast::transmute(move v))"}, {"sha": "1f38a10b2e75ecfdecbe3e5e446675170c473143", "filename": "src/libcore/task.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=ba3eebd41db384c2a46535e8db8c7b2337d55f0b", "patch": "@@ -338,7 +338,7 @@ type TaskOpts = {\n // FIXME (#2585): Replace the 'consumed' bit with move mode on self\n enum TaskBuilder = {\n     opts: TaskOpts,\n-    gen_body: fn@(+fn~()) -> fn~(),\n+    gen_body: fn@(+v: fn~()) -> fn~(),\n     can_not_copy: Option<util::NonCopyable>,\n     mut consumed: bool,\n };\n@@ -466,7 +466,7 @@ impl TaskBuilder {\n      * # Failure\n      * Fails if a future_result was already set for this task.\n      */\n-    fn future_result(blk: fn(+future::Future<TaskResult>)) -> TaskBuilder {\n+    fn future_result(blk: fn(+v: future::Future<TaskResult>)) -> TaskBuilder {\n         // FIXME (#1087, #1857): Once linked failure and notification are\n         // handled in the library, I can imagine implementing this by just\n         // registering an arbitrary number of task::on_exit handlers and\n@@ -528,7 +528,7 @@ impl TaskBuilder {\n      * generator by applying the task body which results from the\n      * existing body generator to the new body generator.\n      */\n-    fn add_wrapper(wrapper: fn@(+fn~()) -> fn~()) -> TaskBuilder {\n+    fn add_wrapper(wrapper: fn@(+v: fn~()) -> fn~()) -> TaskBuilder {\n         let prev_gen_body = self.gen_body;\n         let notify_chan = if self.opts.notify_chan.is_none() {\n             None\n@@ -578,7 +578,7 @@ impl TaskBuilder {\n         spawn::spawn_raw(move opts, x.gen_body(move f));\n     }\n     /// Runs a task, while transfering ownership of one argument to the child.\n-    fn spawn_with<A: Send>(+arg: A, +f: fn~(+A)) {\n+    fn spawn_with<A: Send>(+arg: A, +f: fn~(+v: A)) {\n         let arg = ~mut Some(move arg);\n         do self.spawn |move arg, move f|{\n             f(option::swap_unwrap(arg))\n@@ -705,7 +705,7 @@ fn spawn_supervised(+f: fn~()) {\n     task().supervised().spawn(move f)\n }\n \n-fn spawn_with<A:Send>(+arg: A, +f: fn~(+A)) {\n+fn spawn_with<A:Send>(+arg: A, +f: fn~(+v: A)) {\n     /*!\n      * Runs a task, while transfering ownership of one argument to the\n      * child.\n@@ -1246,7 +1246,7 @@ fn test_spawn_sched_blocking() {\n }\n \n #[cfg(test)]\n-fn avoid_copying_the_body(spawnfn: fn(+fn~())) {\n+fn avoid_copying_the_body(spawnfn: fn(+v: fn~())) {\n     let p = comm::Port::<uint>();\n     let ch = comm::Chan(p);\n "}, {"sha": "d91783284c03ca313dc8618508ecb0bf44fa811f", "filename": "src/libcore/task/local_data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Flibcore%2Ftask%2Flocal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Flibcore%2Ftask%2Flocal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Flocal_data.rs?ref=ba3eebd41db384c2a46535e8db8c7b2337d55f0b", "patch": "@@ -43,7 +43,7 @@ use local_data_priv::{\n  *\n  * These two cases aside, the interface is safe.\n  */\n-type LocalDataKey<T: Owned> = &fn(+@T);\n+type LocalDataKey<T: Owned> = &fn(+v: @T);\n \n /**\n  * Remove a task-local data value from the table, returning the"}, {"sha": "21f217d57f46cabca9191b3643a1357f4b15ab6f", "filename": "src/libcore/task/spawn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Flibcore%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Flibcore%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fspawn.rs?ref=ba3eebd41db384c2a46535e8db8c7b2337d55f0b", "patch": "@@ -82,7 +82,7 @@ fn taskset_remove(tasks: &mut TaskSet, task: *rust_task) {\n     let was_present = tasks.remove(&task);\n     assert was_present;\n }\n-fn taskset_each(tasks: &TaskSet, blk: fn(+*rust_task) -> bool) {\n+fn taskset_each(tasks: &TaskSet, blk: fn(+v: *rust_task) -> bool) {\n     tasks.each_key(|k| blk(*k))\n }\n "}, {"sha": "1dea6dbd17c06d1e869b53b581b718e3875aba4a", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=ba3eebd41db384c2a46535e8db8c7b2337d55f0b", "patch": "@@ -235,7 +235,8 @@ pure fn with_capacity<T>(capacity: uint) -> ~[T] {\n  *             onto the vector being constructed.\n  */\n #[inline(always)]\n-pure fn build_sized<A>(size: uint, builder: fn(push: pure fn(+A))) -> ~[A] {\n+pure fn build_sized<A>(size: uint,\n+                       builder: fn(push: pure fn(+v: A))) -> ~[A] {\n     let mut vec = with_capacity(size);\n     builder(|+x| unsafe { push(vec, move x) });\n     move vec\n@@ -252,7 +253,7 @@ pure fn build_sized<A>(size: uint, builder: fn(push: pure fn(+A))) -> ~[A] {\n  *             onto the vector being constructed.\n  */\n #[inline(always)]\n-pure fn build<A>(builder: fn(push: pure fn(+A))) -> ~[A] {\n+pure fn build<A>(builder: fn(push: pure fn(+v: A))) -> ~[A] {\n     build_sized(4, builder)\n }\n \n@@ -270,7 +271,7 @@ pure fn build<A>(builder: fn(push: pure fn(+A))) -> ~[A] {\n  */\n #[inline(always)]\n pure fn build_sized_opt<A>(size: Option<uint>,\n-                           builder: fn(push: pure fn(+A))) -> ~[A] {\n+                           builder: fn(push: pure fn(+v: A))) -> ~[A] {\n     build_sized(size.get_default(4), builder)\n }\n \n@@ -506,7 +507,7 @@ fn unshift<T>(&v: ~[T], +x: T) {\n     }\n }\n \n-fn consume<T>(+v: ~[T], f: fn(uint, +T)) unsafe {\n+fn consume<T>(+v: ~[T], f: fn(uint, +v: T)) unsafe {\n     do as_imm_buf(v) |p, ln| {\n         for uint::range(0, ln) |i| {\n             let x <- *ptr::offset(p, i);\n@@ -517,7 +518,7 @@ fn consume<T>(+v: ~[T], f: fn(uint, +T)) unsafe {\n     raw::set_len(v, 0);\n }\n \n-fn consume_mut<T>(+v: ~[mut T], f: fn(uint, +T)) unsafe {\n+fn consume_mut<T>(+v: ~[mut T], f: fn(uint, +v: T)) unsafe {\n     do as_imm_buf(v) |p, ln| {\n         for uint::range(0, ln) |i| {\n             let x <- *ptr::offset(p, i);\n@@ -748,7 +749,7 @@ pure fn map<T, U>(v: &[T], f: fn(v: &T) -> U) -> ~[U] {\n     move result\n }\n \n-fn map_consume<T, U>(+v: ~[T], f: fn(+T) -> U) -> ~[U] {\n+fn map_consume<T, U>(+v: ~[T], f: fn(+v: T) -> U) -> ~[U] {\n     let mut result = ~[];\n     do consume(move v) |_i, x| {\n         vec::push(result, f(move x));\n@@ -1808,7 +1809,7 @@ mod raw {\n      * not bytes).\n      */\n     #[inline(always)]\n-    unsafe fn form_slice<T,U>(p: *T, len: uint, f: fn(&& &[T]) -> U) -> U {\n+    unsafe fn form_slice<T,U>(p: *T, len: uint, f: fn(&&v: &[T]) -> U) -> U {\n         let pair = (p, len * sys::size_of::<T>());\n         let v : *(&blk/[T]) =\n             ::cast::reinterpret_cast(&ptr::addr_of(pair));"}, {"sha": "4ffe724511387b237df6cb243f5e26719a378d99", "filename": "src/libstd/arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Flibstd%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Flibstd%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farc.rs?ref=ba3eebd41db384c2a46535e8db8c7b2337d55f0b", "patch": "@@ -340,7 +340,7 @@ impl<T: Const Send> &RWARC<T> {\n      * }\n      * ~~~\n      */\n-    fn write_downgrade<U>(blk: fn(+RWWriteMode<T>) -> U) -> U {\n+    fn write_downgrade<U>(blk: fn(+v: RWWriteMode<T>) -> U) -> U {\n         let state = unsafe { get_shared_mutable_state(&self.x) };\n         do borrow_rwlock(state).write_downgrade |write_mode| {\n             check_poison(false, state.failed);"}, {"sha": "2c0a3716411d3417e72c20df83c0035488b4b6c8", "filename": "src/libstd/bitv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Flibstd%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Flibstd%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitv.rs?ref=ba3eebd41db384c2a46535e8db8c7b2337d55f0b", "patch": "@@ -140,7 +140,7 @@ impl BigBitv {\n     }\n \n     #[inline(always)]\n-     fn each_storage(op: fn(&uint) -> bool) {\n+     fn each_storage(op: fn(&v: uint) -> bool) {\n         for uint::range(0, self.storage.len()) |i| {\n             let mut w = self.storage[i];\n             let b = !op(w);"}, {"sha": "adaab0050bbfd732cd234ca5439601d006ae4aad", "filename": "src/libstd/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Flibstd%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Flibstd%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmap.rs?ref=ba3eebd41db384c2a46535e8db8c7b2337d55f0b", "patch": "@@ -33,7 +33,7 @@ trait Map<K:Eq IterBytes Hash Copy, V: Copy> {\n      *\n      * Returns true if the key did not already exist in the map\n      */\n-    fn insert(+K, +V) -> bool;\n+    fn insert(+v: K, +v: V) -> bool;\n \n     /// Returns true if the map contains a value for the specified key\n     fn contains_key(+key: K) -> bool;"}, {"sha": "8fdcc22b4c1a5488a7716c58304607db7eeabd1f", "filename": "src/libstd/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Flibstd%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Flibstd%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync.rs?ref=ba3eebd41db384c2a46535e8db8c7b2337d55f0b", "patch": "@@ -539,7 +539,7 @@ impl &RWlock {\n      * }\n      * ~~~\n      */\n-    fn write_downgrade<U>(blk: fn(+RWlockWriteMode) -> U) -> U {\n+    fn write_downgrade<U>(blk: fn(+v: RWlockWriteMode) -> U) -> U {\n         // Implementation slightly different from the slicker 'write's above.\n         // The exit path is conditional on whether the caller downgrades.\n         let mut _release = None;"}, {"sha": "94536924afe307d4d7b62b669bb9ae40fb0fbca6", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=ba3eebd41db384c2a46535e8db8c7b2337d55f0b", "patch": "@@ -34,7 +34,7 @@ type spanned<T> = {node: T, span: span};\n /* can't import macros yet, so this is copied from token.rs. See its comment\n  * there. */\n macro_rules! interner_key (\n-    () => (cast::transmute::<(uint, uint), &fn(+@@token::ident_interner)>(\n+    () => (cast::transmute::<(uint, uint), &fn(+v: @@token::ident_interner)>(\n         (-3 as uint, 0u)))\n )\n "}, {"sha": "4ebb85010411a43f48eeed86d381e07466da6782", "filename": "src/libsyntax/ext/auto_serialize.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Flibsyntax%2Fext%2Fauto_serialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Flibsyntax%2Fext%2Fauto_serialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_serialize.rs?ref=ba3eebd41db384c2a46535e8db8c7b2337d55f0b", "patch": "@@ -351,8 +351,8 @@ fn ser_variant(cx: ext_ctxt,\n                span: span,\n                -s: @ast::expr,\n                pfn: fn(~[@ast::pat]) -> ast::pat_,\n-               bodyfn: fn(-@ast::expr, ast::blk) -> @ast::expr,\n-               argfn: fn(-@ast::expr, uint, ast::blk) -> @ast::expr)\n+               bodyfn: fn(-v: @ast::expr, ast::blk) -> @ast::expr,\n+               argfn: fn(-v: @ast::expr, uint, ast::blk) -> @ast::expr)\n     -> ast::arm {\n     let vnames = do vec::from_fn(vec::len(tys)) |i| {\n         cx.parse_sess().interner.intern(@fmt!(\"__v%u\", i))\n@@ -535,7 +535,7 @@ fn ser_ty(cx: ext_ctxt, tps: ser_tps_map,\n fn mk_ser_fn(cx: ext_ctxt, span: span, name: ast::ident,\n              tps: ~[ast::ty_param],\n              f: fn(ext_ctxt, ser_tps_map,\n-                   -@ast::expr, -@ast::expr) -> ~[@ast::stmt])\n+                   -v: @ast::expr, -v: @ast::expr) -> ~[@ast::stmt])\n     -> @ast::item {\n     let ext_cx = cx; // required for #ast\n \n@@ -747,7 +747,7 @@ fn deser_ty(cx: ext_ctxt, tps: deser_tps_map,\n \n fn mk_deser_fn(cx: ext_ctxt, span: span,\n                name: ast::ident, tps: ~[ast::ty_param],\n-               f: fn(ext_ctxt, deser_tps_map, -@ast::expr) -> @ast::expr)\n+               f: fn(ext_ctxt, deser_tps_map, -v: @ast::expr) -> @ast::expr)\n     -> @ast::item {\n     let ext_cx = cx; // required for #ast\n "}, {"sha": "dbe475c1b509003d53d95586fc84bcadc742e937", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=ba3eebd41db384c2a46535e8db8c7b2337d55f0b", "patch": "@@ -167,7 +167,7 @@ fn expand_mod_items(exts: HashMap<~str, syntax_extension>, cx: ext_ctxt,\n // When we enter a module, record it, for the sake of `module!`\n fn expand_item(exts: HashMap<~str, syntax_extension>,\n                cx: ext_ctxt, &&it: @ast::item, fld: ast_fold,\n-               orig: fn@(&&@ast::item, ast_fold) -> Option<@ast::item>)\n+               orig: fn@(&&v: @ast::item, ast_fold) -> Option<@ast::item>)\n     -> Option<@ast::item>\n {\n     let is_mod = match it.node {"}, {"sha": "bfe0f4dd0e64de5e0b06fd53b73f7135baf3a64a", "filename": "src/libsyntax/ext/pipes/ast_builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs?ref=ba3eebd41db384c2a46535e8db8c7b2337d55f0b", "patch": "@@ -77,9 +77,9 @@ trait ext_ctxt_ast_builder {\n     fn item_ty(name: ident, span: span, ty: @ast::ty) -> @ast::item;\n     fn ty_vars(+ty_params: ~[ast::ty_param]) -> ~[@ast::ty];\n     fn ty_field_imm(name: ident, ty: @ast::ty) -> ast::ty_field;\n-    fn ty_rec(+~[ast::ty_field]) -> @ast::ty;\n+    fn ty_rec(+v: ~[ast::ty_field]) -> @ast::ty;\n     fn field_imm(name: ident, e: @ast::expr) -> ast::field;\n-    fn rec(+~[ast::field]) -> @ast::expr;\n+    fn rec(+v: ~[ast::field]) -> @ast::expr;\n     fn block(+stmts: ~[@ast::stmt], e: @ast::expr) -> ast::blk;\n     fn stmt_let(ident: ident, e: @ast::expr) -> @ast::stmt;\n     fn stmt_expr(e: @ast::expr) -> @ast::stmt;"}, {"sha": "07362e1b31e62f3b84f29db42e3226b14ea6ce35", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=ba3eebd41db384c2a46535e8db8c7b2337d55f0b", "patch": "@@ -20,27 +20,27 @@ export extensions;\n \n trait ast_fold {\n     fn fold_crate(crate) -> crate;\n-    fn fold_crate_directive(&&@crate_directive) -> @crate_directive;\n-    fn fold_view_item(&&@view_item) -> @view_item;\n-    fn fold_foreign_item(&&@foreign_item) -> @foreign_item;\n-    fn fold_item(&&@item) -> Option<@item>;\n-    fn fold_struct_field(&&@struct_field) -> @struct_field;\n+    fn fold_crate_directive(&&v: @crate_directive) -> @crate_directive;\n+    fn fold_view_item(&&v: @view_item) -> @view_item;\n+    fn fold_foreign_item(&&v: @foreign_item) -> @foreign_item;\n+    fn fold_item(&&v: @item) -> Option<@item>;\n+    fn fold_struct_field(&&v: @struct_field) -> @struct_field;\n     fn fold_item_underscore(item_) -> item_;\n-    fn fold_method(&&@method) -> @method;\n+    fn fold_method(&&v: @method) -> @method;\n     fn fold_block(blk) -> blk;\n-    fn fold_stmt(&&@stmt) -> @stmt;\n+    fn fold_stmt(&&v: @stmt) -> @stmt;\n     fn fold_arm(arm) -> arm;\n-    fn fold_pat(&&@pat) -> @pat;\n-    fn fold_decl(&&@decl) -> @decl;\n-    fn fold_expr(&&@expr) -> @expr;\n-    fn fold_ty(&&@ty) -> @ty;\n+    fn fold_pat(&&v: @pat) -> @pat;\n+    fn fold_decl(&&v: @decl) -> @decl;\n+    fn fold_expr(&&v: @expr) -> @expr;\n+    fn fold_ty(&&v: @ty) -> @ty;\n     fn fold_mod(_mod) -> _mod;\n     fn fold_foreign_mod(foreign_mod) -> foreign_mod;\n     fn fold_variant(variant) -> variant;\n-    fn fold_ident(&&ident) -> ident;\n-    fn fold_path(&&@path) -> @path;\n-    fn fold_local(&&@local) -> @local;\n-    fn map_exprs(fn@(&&@expr) -> @expr, ~[@expr]) -> ~[@expr];\n+    fn fold_ident(&&v: ident) -> ident;\n+    fn fold_path(&&v: @path) -> @path;\n+    fn fold_local(&&v: @local) -> @local;\n+    fn map_exprs(fn@(&&v: @expr) -> @expr, ~[@expr]) -> ~[@expr];\n     fn new_id(node_id) -> node_id;\n     fn new_span(span) -> span;\n }\n@@ -53,11 +53,11 @@ type ast_fold_precursor = @{\n     fold_crate_directive: fn@(crate_directive_, span,\n                               ast_fold) -> (crate_directive_, span),\n     fold_view_item: fn@(view_item_, ast_fold) -> view_item_,\n-    fold_foreign_item: fn@(&&@foreign_item, ast_fold) -> @foreign_item,\n-    fold_item: fn@(&&@item, ast_fold) -> Option<@item>,\n-    fold_struct_field: fn@(&&@struct_field, ast_fold) -> @struct_field,\n+    fold_foreign_item: fn@(&&v: @foreign_item, ast_fold) -> @foreign_item,\n+    fold_item: fn@(&&v: @item, ast_fold) -> Option<@item>,\n+    fold_struct_field: fn@(&&v: @struct_field, ast_fold) -> @struct_field,\n     fold_item_underscore: fn@(item_, ast_fold) -> item_,\n-    fold_method: fn@(&&@method, ast_fold) -> @method,\n+    fold_method: fn@(&&v: @method, ast_fold) -> @method,\n     fold_block: fn@(blk_, span, ast_fold) -> (blk_, span),\n     fold_stmt: fn@(stmt_, span, ast_fold) -> (stmt_, span),\n     fold_arm: fn@(arm, ast_fold) -> arm,\n@@ -68,10 +68,10 @@ type ast_fold_precursor = @{\n     fold_mod: fn@(_mod, ast_fold) -> _mod,\n     fold_foreign_mod: fn@(foreign_mod, ast_fold) -> foreign_mod,\n     fold_variant: fn@(variant_, span, ast_fold) -> (variant_, span),\n-    fold_ident: fn@(&&ident, ast_fold) -> ident,\n+    fold_ident: fn@(&&v: ident, ast_fold) -> ident,\n     fold_path: fn@(path, ast_fold) -> path,\n     fold_local: fn@(local_, span, ast_fold) -> (local_, span),\n-    map_exprs: fn@(fn@(&&@expr) -> @expr, ~[@expr]) -> ~[@expr],\n+    map_exprs: fn@(fn@(&&v: @expr) -> @expr, ~[@expr]) -> ~[@expr],\n     new_id: fn@(node_id) -> node_id,\n     new_span: fn@(span) -> span};\n \n@@ -643,7 +643,7 @@ fn noop_fold_local(l: local_, fld: ast_fold) -> local_ {\n \n /* temporarily eta-expand because of a compiler bug with using `fn<T>` as a\n    value */\n-fn noop_map_exprs(f: fn@(&&@expr) -> @expr, es: ~[@expr]) -> ~[@expr] {\n+fn noop_map_exprs(f: fn@(&&v: @expr) -> @expr, es: ~[@expr]) -> ~[@expr] {\n     return vec::map(es, |x| f(*x));\n }\n \n@@ -773,7 +773,7 @@ impl ast_fold_precursor: ast_fold {\n         let (n, s) = self.fold_local(x.node, x.span, self as ast_fold);\n         return @{node: n, span: self.new_span(s)};\n     }\n-    fn map_exprs(f: fn@(&&@expr) -> @expr, e: ~[@expr]) -> ~[@expr] {\n+    fn map_exprs(f: fn@(&&v: @expr) -> @expr, e: ~[@expr]) -> ~[@expr] {\n         self.map_exprs(f, e)\n     }\n     fn new_id(node_id: ast::node_id) -> node_id {"}, {"sha": "d787123bf6101a9eb150dd7da9fbf4575ac7c7f4", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=ba3eebd41db384c2a46535e8db8c7b2337d55f0b", "patch": "@@ -21,7 +21,8 @@ pub enum ObsoleteSyntax {\n     ObsoleteWith,\n     ObsoleteClassMethod,\n     ObsoleteClassTraits,\n-    ObsoletePrivSection\n+    ObsoletePrivSection,\n+    ObsoleteModeInFnType\n }\n \n #[cfg(stage0)]\n@@ -99,6 +100,11 @@ impl parser : ObsoleteReporter {\n                 \"the `priv` keyword is applied to individual items, methods, \\\n                  and fields\"\n             ),\n+            ObsoleteModeInFnType => (\n+                \"mode without identifier in fn type\",\n+                \"to use a (deprecated) mode in a fn type, you should \\\n+                 give the argument an explicit name (like `&&v: int`)\"\n+            ),\n         };\n \n         self.report(sp, kind, kind_str, desc);"}, {"sha": "f2e7245a1d47cf7e0baf156bf21c197cfbefae52", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=ba3eebd41db384c2a46535e8db8c7b2337d55f0b", "patch": "@@ -19,7 +19,8 @@ use obsolete::{\n     ObsoleteReporter, ObsoleteSyntax,\n     ObsoleteLowerCaseKindBounds, ObsoleteLet,\n     ObsoleteFieldTerminator, ObsoleteStructCtor,\n-    ObsoleteWith, ObsoleteClassMethod, ObsoleteClassTraits\n+    ObsoleteWith, ObsoleteClassMethod, ObsoleteClassTraits,\n+    ObsoleteModeInFnType\n };\n use ast::{_mod, add, alt_check, alt_exhaustive, arg, arm, attribute,\n              bind_by_ref, bind_by_implicit_ref, bind_by_value, bind_by_move,\n@@ -618,6 +619,15 @@ impl parser {\n             } else { special_idents::invalid }\n         };\n \n+        match m {\n+            expl(_) => {\n+                if i == special_idents::invalid {\n+                    self.obsolete(copy self.span, ObsoleteModeInFnType);\n+                }\n+            }\n+            _ => {}\n+        }\n+\n         let t = self.parse_ty(false);\n \n         {mode: m, ty: t, ident: i, id: self.get_id()}\n@@ -1585,7 +1595,7 @@ impl parser {\n     }\n \n     fn parse_sugary_call_expr(keyword: ~str,\n-                              ctor: fn(+@expr) -> expr_) -> @expr {\n+                              ctor: fn(+v: @expr) -> expr_) -> @expr {\n         let lo = self.last_span;\n         // Parse the callee `foo` in\n         //    for foo || {\n@@ -2400,7 +2410,7 @@ impl parser {\n                                     fn(parser) -> arg_or_capture_item)\n                             -> (self_ty, fn_decl, capture_clause) {\n \n-        fn maybe_parse_self_ty(cnstr: fn(+mutability) -> ast::self_ty_,\n+        fn maybe_parse_self_ty(cnstr: fn(+v: mutability) -> ast::self_ty_,\n                                p: parser) -> ast::self_ty_ {\n             // We need to make sure it isn't a mode or a type\n             if p.token_is_keyword(~\"self\", p.look_ahead(1)) ||"}, {"sha": "570ec8c0b6bf1545f7785b74b4335724f4be340b", "filename": "src/test/bench/pingpong.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Ftest%2Fbench%2Fpingpong.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Ftest%2Fbench%2Fpingpong.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fpingpong.rs?ref=ba3eebd41db384c2a46535e8db8c7b2337d55f0b", "patch": "@@ -65,7 +65,7 @@ macro_rules! follow (\n )\n \n fn switch<T: Send, Tb: Send, U>(+endp: pipes::RecvPacketBuffered<T, Tb>,\n-                      f: fn(+Option<T>) -> U) -> U {\n+                      f: fn(+v: Option<T>) -> U) -> U {\n     f(pipes::try_recv(endp))\n }\n "}, {"sha": "8bb315576934e5eadcad86c49d2bdf0fc7fb70a1", "filename": "src/test/bench/task-perf-word-count-generic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs?ref=ba3eebd41db384c2a46535e8db8c7b2337d55f0b", "patch": "@@ -80,7 +80,7 @@ fn reduce(&&word: ~str, get: map_reduce::getter<int>) {\n     let mut count = 0;\n \n     loop { match get() { Some(_) => { count += 1; } None => { break; } } }\n-    \n+\n     io::println(fmt!(\"%s\\t%?\", word, count));\n }\n \n@@ -89,7 +89,7 @@ struct box<T> {\n }\n \n impl<T> box<T> {\n-    fn swap(f: fn(+T) -> T) {\n+    fn swap(f: fn(+v: T) -> T) {\n         let mut tmp = None;\n         self.contents <-> tmp;\n         self.contents = Some(f(option::unwrap(tmp)));"}, {"sha": "58f126f7f4e593a15eedd279c9b017ceb2f0f3f8", "filename": "src/test/compile-fail/arg-style-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Ftest%2Fcompile-fail%2Farg-style-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Ftest%2Fcompile-fail%2Farg-style-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Farg-style-mismatch.rs?ref=ba3eebd41db384c2a46535e8db8c7b2337d55f0b", "patch": "@@ -1,5 +1,5 @@\n // error-pattern: mismatched types\n \n fn f(&&_x: int) {}\n-fn g(_a: fn(+int)) {}\n+fn g(_a: fn(+v: int)) {}\n fn main() { g(f); }"}, {"sha": "75e524e27ac48931438ccf9d437ce33ec05a6f3a", "filename": "src/test/compile-fail/issue-2766-a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Ftest%2Fcompile-fail%2Fissue-2766-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Ftest%2Fcompile-fail%2Fissue-2766-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2766-a.rs?ref=ba3eebd41db384c2a46535e8db8c7b2337d55f0b", "patch": "@@ -4,7 +4,7 @@ mod stream {\n     mod server {\n         #[legacy_exports];\n         impl<T: Send> stream<T> {\n-            fn recv() -> extern fn(+stream<T>) -> stream::stream<T> {\n+            fn recv() -> extern fn(+v: stream<T>) -> stream::stream<T> {\n               // resolve really should report just one error here.\n               // Change the test case when it changes.\n               fn recv(+pipe: stream<T>) -> stream::stream<T> { //~ ERROR attempt to use a type argument out of scope"}, {"sha": "8c25d94db3bede771e9785b06b46da7e14e605a1", "filename": "src/test/run-pass/class-impl-very-parameterized-trait.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs?ref=ba3eebd41db384c2a46535e8db8c7b2337d55f0b", "patch": "@@ -70,18 +70,18 @@ impl<T: Copy> cat<T> : Map<int, T> {\n     }\n   }\n \n-  pure fn each(f: fn(+int, +T) -> bool) {\n+  pure fn each(f: fn(+v: int, +v: T) -> bool) {\n     let mut n = int::abs(self.meows);\n     while n > 0 {\n         if !f(n, self.name) { break; }\n         n -= 1;\n     }\n   }\n \n-  pure fn each_key(&&f: fn(+int) -> bool) {\n+  pure fn each_key(&&f: fn(+v: int) -> bool) {\n     for self.each |k, _v| { if !f(k) { break; } loop;};\n   }\n-  pure fn each_value(&&f: fn(+T) -> bool) {\n+  pure fn each_value(&&f: fn(+v: T) -> bool) {\n     for self.each |_k, v| { if !f(v) { break; } loop;};\n   }\n "}, {"sha": "c4220f10e84074579033acdb9395eaf03d65a1ae", "filename": "src/test/run-pass/fixed-point-bind-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Ftest%2Frun-pass%2Ffixed-point-bind-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Ftest%2Frun-pass%2Ffixed-point-bind-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffixed-point-bind-box.rs?ref=ba3eebd41db384c2a46535e8db8c7b2337d55f0b", "patch": "@@ -9,7 +9,7 @@ fn fix<A, B>(f: extern fn(fn@(A) -> B, A) -> B) -> fn@(A) -> B {\n     return {|a|fix_help(f, a)};\n }\n \n-fn fact_(f: fn@(&&int) -> int, &&n: int) -> int {\n+fn fact_(f: fn@(&&v: int) -> int, &&n: int) -> int {\n     // fun fact 0 = 1\n     return if n == 0 { 1 } else { n * f(n - 1) };\n }"}, {"sha": "44b642abd7a066ea9bb2b09f389e245c29f58303", "filename": "src/test/run-pass/fixed-point-bind-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Ftest%2Frun-pass%2Ffixed-point-bind-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Ftest%2Frun-pass%2Ffixed-point-bind-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffixed-point-bind-unique.rs?ref=ba3eebd41db384c2a46535e8db8c7b2337d55f0b", "patch": "@@ -9,7 +9,7 @@ fn fix<A: Owned, B: Send>(f: extern fn(fn@(A) -> B, A) -> B) -> fn@(A) -> B {\n     return {|a|fix_help(f, a)};\n }\n \n-fn fact_(f: fn@(&&int) -> int, &&n: int) -> int {\n+fn fact_(f: fn@(&&v: int) -> int, &&n: int) -> int {\n     // fun fact 0 = 1\n     return if n == 0 { 1 } else { n * f(n - 1) };\n }"}, {"sha": "ae6b1a1079ff7b3427c0cd9dea3e076561e9dc51", "filename": "src/test/run-pass/fn-bare-assign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Ftest%2Frun-pass%2Ffn-bare-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Ftest%2Frun-pass%2Ffn-bare-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-bare-assign.rs?ref=ba3eebd41db384c2a46535e8db8c7b2337d55f0b", "patch": "@@ -3,7 +3,7 @@ fn f(i: int, &called: bool) {\n     called = true;\n }\n \n-fn g(f: extern fn(int, &bool), &called: bool) {\n+fn g(f: extern fn(int, &v: bool), &called: bool) {\n     f(10, called);\n }\n "}, {"sha": "cf023fba2bb64b97c180dce90ef3a3f985733961", "filename": "src/test/run-pass/generic-temporary.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Ftest%2Frun-pass%2Fgeneric-temporary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Ftest%2Frun-pass%2Fgeneric-temporary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-temporary.rs?ref=ba3eebd41db384c2a46535e8db8c7b2337d55f0b", "patch": "@@ -12,6 +12,6 @@ fn apply<T>(produce: extern fn() -> T,\n \n fn main() {\n     let produce: extern fn() -> int = mk;\n-    let consume: extern fn(&&int) = chk;\n+    let consume: extern fn(&&v: int) = chk;\n     apply::<int>(produce, consume);\n }"}, {"sha": "3b3b63308cd47124003f055f54c6e0409264a31d", "filename": "src/test/run-pass/issue-2185.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Ftest%2Frun-pass%2Fissue-2185.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Ftest%2Frun-pass%2Fissue-2185.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2185.rs?ref=ba3eebd41db384c2a46535e8db8c7b2337d55f0b", "patch": "@@ -14,7 +14,7 @@ impl<A> fn@(fn(A)): iterable<A> {\n }\n \n impl fn@(fn(uint)): iterable<uint> {\n-    fn iter(blk: fn(&&uint)) { self( |i| blk(i) ) }\n+    fn iter(blk: fn(&&v: uint)) { self( |i| blk(i) ) }\n }\n \n fn filter<A,IA:iterable<A>>(self: IA, prd: fn@(A) -> bool, blk: fn(A)) {\n@@ -41,7 +41,7 @@ fn range(lo: uint, hi: uint, it: fn(uint)) {\n \n fn main() {\n     let range: fn@(fn&(uint)) = |a| range(0u, 1000u, a);\n-    let filt: fn@(fn&(&&uint)) = |a| filter(\n+    let filt: fn@(fn&(&&v: uint)) = |a| filter(\n         range,\n         |&&n: uint| n % 3u != 0u && n % 5u != 0u,\n         a);"}, {"sha": "8ac76293284b53cbd8e333130beb4d0e20665434", "filename": "src/test/run-pass/pipe-bank-proto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Ftest%2Frun-pass%2Fpipe-bank-proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Ftest%2Frun-pass%2Fpipe-bank-proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-bank-proto.rs?ref=ba3eebd41db384c2a46535e8db8c7b2337d55f0b", "patch": "@@ -37,7 +37,7 @@ macro_rules! move_it (\n )\n \n fn switch<T: Send, U>(+endp: pipes::RecvPacket<T>,\n-                      f: fn(+Option<T>) -> U) -> U {\n+                      f: fn(+v: Option<T>) -> U) -> U {\n     f(pipes::try_recv(endp))\n }\n "}, {"sha": "be00567af677b439a9c7396d1c9bc9aa91f39ef1", "filename": "src/test/run-pass/sendfn-generic-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Ftest%2Frun-pass%2Fsendfn-generic-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Ftest%2Frun-pass%2Fsendfn-generic-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendfn-generic-fn.rs?ref=ba3eebd41db384c2a46535e8db8c7b2337d55f0b", "patch": "@@ -14,7 +14,7 @@ fn make_generic_record<A: Copy, B: Copy>(a: A, b: B) -> pair<A,B> {\n     return {a: a, b: b};\n }\n \n-fn test05_start(&&f: fn~(&&float, &&~str) -> pair<float, ~str>) {\n+fn test05_start(&&f: fn~(&&v: float, &&v: ~str) -> pair<float, ~str>) {\n     let p = f(22.22f, ~\"Hi\");\n     log(debug, p);\n     assert p.a == 22.22f;"}, {"sha": "57d6558dd7733c1707d9ee6d8a4b91af5549f8a8", "filename": "src/test/run-pass/static-method-test.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Ftest%2Frun-pass%2Fstatic-method-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba3eebd41db384c2a46535e8db8c7b2337d55f0b/src%2Ftest%2Frun-pass%2Fstatic-method-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-method-test.rs?ref=ba3eebd41db384c2a46535e8db8c7b2337d55f0b", "patch": "@@ -26,27 +26,27 @@ impl int: bool_like {\n // A trait for sequences that can be constructed imperatively.\n trait buildable<A> {\n      static pure fn build_sized(size: uint,\n-                                builder: fn(push: pure fn(+A))) -> self;\n+                                builder: fn(push: pure fn(+v: A))) -> self;\n }\n \n \n impl<A> @[A]: buildable<A> {\n     #[inline(always)]\n      static pure fn build_sized(size: uint,\n-                                builder: fn(push: pure fn(+A))) -> @[A] {\n+                                builder: fn(push: pure fn(+v: A))) -> @[A] {\n          at_vec::build_sized(size, builder)\n      }\n }\n impl<A> ~[A]: buildable<A> {\n     #[inline(always)]\n      static pure fn build_sized(size: uint,\n-                                builder: fn(push: pure fn(+A))) -> ~[A] {\n+                                builder: fn(push: pure fn(+v: A))) -> ~[A] {\n          vec::build_sized(size, builder)\n      }\n }\n \n #[inline(always)]\n-pure fn build<A, B: buildable<A>>(builder: fn(push: pure fn(+A))) -> B {\n+pure fn build<A, B: buildable<A>>(builder: fn(push: pure fn(+v: A))) -> B {\n     build_sized(4, builder)\n }\n "}]}