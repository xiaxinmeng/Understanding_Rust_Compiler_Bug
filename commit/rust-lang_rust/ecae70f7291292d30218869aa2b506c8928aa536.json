{"sha": "ecae70f7291292d30218869aa2b506c8928aa536", "node_id": "C_kwDOAAsO6NoAKGVjYWU3MGY3MjkxMjkyZDMwMjE4ODY5YWEyYjUwNmM4OTI4YWE1MzY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-07T22:14:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-07T22:14:10Z"}, "message": "Auto merge of #8075 - Qwaz:non_send_fields_documentation, r=xFrednet\n\nClarify the purpose of the non_send lint\n\nPR 2/2 for issue #8045. Tried to tone down the warning message and clarify the intention of the lint. Specifically, I added a description that this lint tries to detect \"types that are not safe to be sent to another thread\".\n\nchangelog: none\n\nr? `@xFrednet`", "tree": {"sha": "f2b31f7801ae81f55202367b4bbe7d7c4e84d3d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2b31f7801ae81f55202367b4bbe7d7c4e84d3d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ecae70f7291292d30218869aa2b506c8928aa536", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ecae70f7291292d30218869aa2b506c8928aa536", "html_url": "https://github.com/rust-lang/rust/commit/ecae70f7291292d30218869aa2b506c8928aa536", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ecae70f7291292d30218869aa2b506c8928aa536/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c7df44e2d096f6538dbb2b7d8a23bd330131a8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c7df44e2d096f6538dbb2b7d8a23bd330131a8a", "html_url": "https://github.com/rust-lang/rust/commit/1c7df44e2d096f6538dbb2b7d8a23bd330131a8a"}, {"sha": "5d63a286383b0a0ed03aa2568e306a3a154e3fa9", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d63a286383b0a0ed03aa2568e306a3a154e3fa9", "html_url": "https://github.com/rust-lang/rust/commit/5d63a286383b0a0ed03aa2568e306a3a154e3fa9"}], "stats": {"total": 115, "additions": 59, "deletions": 56}, "files": [{"sha": "85ca2cf308d96eced5b3d73f5ecd4ad2ab1ae679", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ecae70f7291292d30218869aa2b506c8928aa536/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecae70f7291292d30218869aa2b506c8928aa536/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=ecae70f7291292d30218869aa2b506c8928aa536", "patch": "@@ -220,7 +220,6 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(non_copy_const::DECLARE_INTERIOR_MUTABLE_CONST),\n     LintId::of(non_expressive_names::JUST_UNDERSCORES_AND_DIGITS),\n     LintId::of(non_octal_unix_permissions::NON_OCTAL_UNIX_PERMISSIONS),\n-    LintId::of(non_send_fields_in_send_ty::NON_SEND_FIELDS_IN_SEND_TY),\n     LintId::of(octal_escapes::OCTAL_ESCAPES),\n     LintId::of(open_options::NONSENSICAL_OPEN_OPTIONS),\n     LintId::of(option_env_unwrap::OPTION_ENV_UNWRAP),"}, {"sha": "e3cf067001834a3b16b00d480584e2771e37ed2e", "filename": "clippy_lints/src/lib.register_nursery.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ecae70f7291292d30218869aa2b506c8928aa536/clippy_lints%2Fsrc%2Flib.register_nursery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecae70f7291292d30218869aa2b506c8928aa536/clippy_lints%2Fsrc%2Flib.register_nursery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_nursery.rs?ref=ecae70f7291292d30218869aa2b506c8928aa536", "patch": "@@ -18,6 +18,7 @@ store.register_group(true, \"clippy::nursery\", Some(\"clippy_nursery\"), vec![\n     LintId::of(missing_const_for_fn::MISSING_CONST_FOR_FN),\n     LintId::of(mutable_debug_assertion::DEBUG_ASSERT_WITH_MUT_CALL),\n     LintId::of(mutex_atomic::MUTEX_INTEGER),\n+    LintId::of(non_send_fields_in_send_ty::NON_SEND_FIELDS_IN_SEND_TY),\n     LintId::of(nonstandard_macro_braces::NONSTANDARD_MACRO_BRACES),\n     LintId::of(option_if_let_else::OPTION_IF_LET_ELSE),\n     LintId::of(path_buf_push_overwrite::PATH_BUF_PUSH_OVERWRITE),"}, {"sha": "10f8ae4b7f7fca8583cde6a976955579a3efc4e1", "filename": "clippy_lints/src/lib.register_suspicious.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ecae70f7291292d30218869aa2b506c8928aa536/clippy_lints%2Fsrc%2Flib.register_suspicious.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecae70f7291292d30218869aa2b506c8928aa536/clippy_lints%2Fsrc%2Flib.register_suspicious.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_suspicious.rs?ref=ecae70f7291292d30218869aa2b506c8928aa536", "patch": "@@ -15,7 +15,6 @@ store.register_group(true, \"clippy::suspicious\", Some(\"clippy_suspicious\"), vec!\n     LintId::of(loops::MUT_RANGE_BOUND),\n     LintId::of(methods::SUSPICIOUS_MAP),\n     LintId::of(mut_key::MUTABLE_KEY_TYPE),\n-    LintId::of(non_send_fields_in_send_ty::NON_SEND_FIELDS_IN_SEND_TY),\n     LintId::of(octal_escapes::OCTAL_ESCAPES),\n     LintId::of(suspicious_trait_impl::SUSPICIOUS_ARITHMETIC_IMPL),\n     LintId::of(suspicious_trait_impl::SUSPICIOUS_OP_ASSIGN_IMPL),"}, {"sha": "203f03d3603c8058a19821b16519c2e16199978c", "filename": "clippy_lints/src/non_send_fields_in_send_ty.rs", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ecae70f7291292d30218869aa2b506c8928aa536/clippy_lints%2Fsrc%2Fnon_send_fields_in_send_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecae70f7291292d30218869aa2b506c8928aa536/clippy_lints%2Fsrc%2Fnon_send_fields_in_send_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_send_fields_in_send_ty.rs?ref=ecae70f7291292d30218869aa2b506c8928aa536", "patch": "@@ -13,24 +13,28 @@ use rustc_span::sym;\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Warns about fields in struct implementing `Send` that are neither `Send` nor `Copy`.\n+    /// This lint warns about a `Send` implementation for a type that\n+    /// contains fields that are not safe to be sent across threads.\n+    /// It tries to detect fields that can cause a soundness issue\n+    /// when sent to another thread (e.g., `Rc`) while allowing `!Send` fields\n+    /// that are expected to exist in a `Send` type, such as raw pointers.\n     ///\n     /// ### Why is this bad?\n-    /// Sending the struct to another thread will transfer the ownership to\n-    /// the new thread by dropping in the current thread during the transfer.\n-    /// This causes soundness issues for non-`Send` fields, as they are also\n-    /// dropped and might not be set up to handle this.\n+    /// Sending the struct to another thread effectively sends all of its fields,\n+    /// and the fields that do not implement `Send` can lead to soundness bugs\n+    /// such as data races when accessed in a thread\n+    /// that is different from the thread that created it.\n     ///\n     /// See:\n     /// * [*The Rustonomicon* about *Send and Sync*](https://doc.rust-lang.org/nomicon/send-and-sync.html)\n     /// * [The documentation of `Send`](https://doc.rust-lang.org/std/marker/trait.Send.html)\n     ///\n     /// ### Known Problems\n-    /// Data structures that contain raw pointers may cause false positives.\n-    /// They are sometimes safe to be sent across threads but do not implement\n-    /// the `Send` trait. This lint has a heuristic to filter out basic cases\n-    /// such as `Vec<*const T>`, but it's not perfect. Feel free to create an\n-    /// issue if you have a suggestion on how this heuristic can be improved.\n+    /// This lint relies on heuristics to distinguish types that are actually\n+    /// unsafe to be sent across threads and `!Send` types that are expected to\n+    /// exist in  `Send` type. Its rule can filter out basic cases such as\n+    /// `Vec<*const T>`, but it's not perfect. Feel free to create an issue if\n+    /// you have a suggestion on how this heuristic can be improved.\n     ///\n     /// ### Example\n     /// ```rust,ignore\n@@ -46,8 +50,8 @@ declare_clippy_lint! {\n     /// or specify correct bounds on generic type parameters (`T: Send`).\n     #[clippy::version = \"1.57.0\"]\n     pub NON_SEND_FIELDS_IN_SEND_TY,\n-    suspicious,\n-    \"there is field that does not implement `Send` in a `Send` struct\"\n+    nursery,\n+    \"there is a field that is not safe to be sent to another thread in a `Send` struct\"\n }\n \n #[derive(Copy, Clone)]\n@@ -120,14 +124,14 @@ impl<'tcx> LateLintPass<'tcx> for NonSendFieldInSendTy {\n                         NON_SEND_FIELDS_IN_SEND_TY,\n                         item.span,\n                         &format!(\n-                            \"this implementation is unsound, as some fields in `{}` are `!Send`\",\n+                            \"some fields in `{}` are not safe to be sent to another thread\",\n                             snippet(cx, hir_impl.self_ty.span, \"Unknown\")\n                         ),\n                         |diag| {\n                             for field in non_send_fields {\n                                 diag.span_note(\n                                     field.def.span,\n-                                    &format!(\"the type of field `{}` is `!Send`\", field.def.ident.name),\n+                                    &format!(\"it is not safe to send field `{}` to another thread\", field.def.ident.name),\n                                 );\n \n                                 match field.generic_params.len() {"}, {"sha": "49eecf18b4c4f83f5fadacb8f6ad593bc2969cac", "filename": "tests/ui-toml/strict_non_send_fields_in_send_ty/test.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ecae70f7291292d30218869aa2b506c8928aa536/tests%2Fui-toml%2Fstrict_non_send_fields_in_send_ty%2Ftest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ecae70f7291292d30218869aa2b506c8928aa536/tests%2Fui-toml%2Fstrict_non_send_fields_in_send_ty%2Ftest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fstrict_non_send_fields_in_send_ty%2Ftest.stderr?ref=ecae70f7291292d30218869aa2b506c8928aa536", "patch": "@@ -1,86 +1,86 @@\n-error: this implementation is unsound, as some fields in `NoGeneric` are `!Send`\n+error: some fields in `NoGeneric` are not safe to be sent to another thread\n   --> $DIR/test.rs:11:1\n    |\n LL | unsafe impl Send for NoGeneric {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::non-send-fields-in-send-ty` implied by `-D warnings`\n-note: the type of field `rc_is_not_send` is `!Send`\n+note: it is not safe to send field `rc_is_not_send` to another thread\n   --> $DIR/test.rs:8:5\n    |\n LL |     rc_is_not_send: Rc<String>,\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: use a thread-safe type that implements `Send`\n \n-error: this implementation is unsound, as some fields in `MultiField<T>` are `!Send`\n+error: some fields in `MultiField<T>` are not safe to be sent to another thread\n   --> $DIR/test.rs:19:1\n    |\n LL | unsafe impl<T> Send for MultiField<T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the type of field `field1` is `!Send`\n+note: it is not safe to send field `field1` to another thread\n   --> $DIR/test.rs:14:5\n    |\n LL |     field1: T,\n    |     ^^^^^^^^^\n    = help: add `T: Send` bound in `Send` impl\n-note: the type of field `field2` is `!Send`\n+note: it is not safe to send field `field2` to another thread\n   --> $DIR/test.rs:15:5\n    |\n LL |     field2: T,\n    |     ^^^^^^^^^\n    = help: add `T: Send` bound in `Send` impl\n-note: the type of field `field3` is `!Send`\n+note: it is not safe to send field `field3` to another thread\n   --> $DIR/test.rs:16:5\n    |\n LL |     field3: T,\n    |     ^^^^^^^^^\n    = help: add `T: Send` bound in `Send` impl\n \n-error: this implementation is unsound, as some fields in `MyOption<T>` are `!Send`\n+error: some fields in `MyOption<T>` are not safe to be sent to another thread\n   --> $DIR/test.rs:26:1\n    |\n LL | unsafe impl<T> Send for MyOption<T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the type of field `0` is `!Send`\n+note: it is not safe to send field `0` to another thread\n   --> $DIR/test.rs:22:12\n    |\n LL |     MySome(T),\n    |            ^\n    = help: add `T: Send` bound in `Send` impl\n \n-error: this implementation is unsound, as some fields in `HeuristicTest` are `!Send`\n+error: some fields in `HeuristicTest` are not safe to be sent to another thread\n   --> $DIR/test.rs:41:1\n    |\n LL | unsafe impl Send for HeuristicTest {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the type of field `field1` is `!Send`\n+note: it is not safe to send field `field1` to another thread\n   --> $DIR/test.rs:34:5\n    |\n LL |     field1: Vec<*const NonSend>,\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: use a thread-safe type that implements `Send`\n-note: the type of field `field2` is `!Send`\n+note: it is not safe to send field `field2` to another thread\n   --> $DIR/test.rs:35:5\n    |\n LL |     field2: [*const NonSend; 3],\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: use a thread-safe type that implements `Send`\n-note: the type of field `field3` is `!Send`\n+note: it is not safe to send field `field3` to another thread\n   --> $DIR/test.rs:36:5\n    |\n LL |     field3: (*const NonSend, *const NonSend, *const NonSend),\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: use a thread-safe type that implements `Send`\n-note: the type of field `field4` is `!Send`\n+note: it is not safe to send field `field4` to another thread\n   --> $DIR/test.rs:37:5\n    |\n LL |     field4: (*const NonSend, Rc<u8>),\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: use a thread-safe type that implements `Send`\n-note: the type of field `field5` is `!Send`\n+note: it is not safe to send field `field5` to another thread\n   --> $DIR/test.rs:38:5\n    |\n LL |     field5: Vec<Vec<*const NonSend>>,"}, {"sha": "60df4e226e4fa47078c43dc3bb66e1ff30e3e6e3", "filename": "tests/ui/non_send_fields_in_send_ty.stderr", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/ecae70f7291292d30218869aa2b506c8928aa536/tests%2Fui%2Fnon_send_fields_in_send_ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ecae70f7291292d30218869aa2b506c8928aa536/tests%2Fui%2Fnon_send_fields_in_send_ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnon_send_fields_in_send_ty.stderr?ref=ecae70f7291292d30218869aa2b506c8928aa536", "patch": "@@ -1,166 +1,166 @@\n-error: this implementation is unsound, as some fields in `RingBuffer<T>` are `!Send`\n+error: some fields in `RingBuffer<T>` are not safe to be sent to another thread\n   --> $DIR/non_send_fields_in_send_ty.rs:16:1\n    |\n LL | unsafe impl<T> Send for RingBuffer<T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::non-send-fields-in-send-ty` implied by `-D warnings`\n-note: the type of field `data` is `!Send`\n+note: it is not safe to send field `data` to another thread\n   --> $DIR/non_send_fields_in_send_ty.rs:11:5\n    |\n LL |     data: Vec<UnsafeCell<T>>,\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: add bounds on type parameter `T` that satisfy `Vec<UnsafeCell<T>>: Send`\n \n-error: this implementation is unsound, as some fields in `MvccRwLock<T>` are `!Send`\n+error: some fields in `MvccRwLock<T>` are not safe to be sent to another thread\n   --> $DIR/non_send_fields_in_send_ty.rs:24:1\n    |\n LL | unsafe impl<T> Send for MvccRwLock<T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the type of field `lock` is `!Send`\n+note: it is not safe to send field `lock` to another thread\n   --> $DIR/non_send_fields_in_send_ty.rs:21:5\n    |\n LL |     lock: Mutex<Box<T>>,\n    |     ^^^^^^^^^^^^^^^^^^^\n    = help: add bounds on type parameter `T` that satisfy `Mutex<Box<T>>: Send`\n \n-error: this implementation is unsound, as some fields in `ArcGuard<RC, T>` are `!Send`\n+error: some fields in `ArcGuard<RC, T>` are not safe to be sent to another thread\n   --> $DIR/non_send_fields_in_send_ty.rs:32:1\n    |\n LL | unsafe impl<RC, T: Send> Send for ArcGuard<RC, T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the type of field `head` is `!Send`\n+note: it is not safe to send field `head` to another thread\n   --> $DIR/non_send_fields_in_send_ty.rs:29:5\n    |\n LL |     head: Arc<RC>,\n    |     ^^^^^^^^^^^^^\n    = help: add bounds on type parameter `RC` that satisfy `Arc<RC>: Send`\n \n-error: this implementation is unsound, as some fields in `DeviceHandle<T>` are `!Send`\n+error: some fields in `DeviceHandle<T>` are not safe to be sent to another thread\n   --> $DIR/non_send_fields_in_send_ty.rs:48:1\n    |\n LL | unsafe impl<T: UsbContext> Send for DeviceHandle<T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the type of field `context` is `!Send`\n+note: it is not safe to send field `context` to another thread\n   --> $DIR/non_send_fields_in_send_ty.rs:44:5\n    |\n LL |     context: T,\n    |     ^^^^^^^^^^\n    = help: add `T: Send` bound in `Send` impl\n \n-error: this implementation is unsound, as some fields in `NoGeneric` are `!Send`\n+error: some fields in `NoGeneric` are not safe to be sent to another thread\n   --> $DIR/non_send_fields_in_send_ty.rs:55:1\n    |\n LL | unsafe impl Send for NoGeneric {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the type of field `rc_is_not_send` is `!Send`\n+note: it is not safe to send field `rc_is_not_send` to another thread\n   --> $DIR/non_send_fields_in_send_ty.rs:52:5\n    |\n LL |     rc_is_not_send: Rc<String>,\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: use a thread-safe type that implements `Send`\n \n-error: this implementation is unsound, as some fields in `MultiField<T>` are `!Send`\n+error: some fields in `MultiField<T>` are not safe to be sent to another thread\n   --> $DIR/non_send_fields_in_send_ty.rs:63:1\n    |\n LL | unsafe impl<T> Send for MultiField<T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the type of field `field1` is `!Send`\n+note: it is not safe to send field `field1` to another thread\n   --> $DIR/non_send_fields_in_send_ty.rs:58:5\n    |\n LL |     field1: T,\n    |     ^^^^^^^^^\n    = help: add `T: Send` bound in `Send` impl\n-note: the type of field `field2` is `!Send`\n+note: it is not safe to send field `field2` to another thread\n   --> $DIR/non_send_fields_in_send_ty.rs:59:5\n    |\n LL |     field2: T,\n    |     ^^^^^^^^^\n    = help: add `T: Send` bound in `Send` impl\n-note: the type of field `field3` is `!Send`\n+note: it is not safe to send field `field3` to another thread\n   --> $DIR/non_send_fields_in_send_ty.rs:60:5\n    |\n LL |     field3: T,\n    |     ^^^^^^^^^\n    = help: add `T: Send` bound in `Send` impl\n \n-error: this implementation is unsound, as some fields in `MyOption<T>` are `!Send`\n+error: some fields in `MyOption<T>` are not safe to be sent to another thread\n   --> $DIR/non_send_fields_in_send_ty.rs:70:1\n    |\n LL | unsafe impl<T> Send for MyOption<T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the type of field `0` is `!Send`\n+note: it is not safe to send field `0` to another thread\n   --> $DIR/non_send_fields_in_send_ty.rs:66:12\n    |\n LL |     MySome(T),\n    |            ^\n    = help: add `T: Send` bound in `Send` impl\n \n-error: this implementation is unsound, as some fields in `MultiParam<A, B>` are `!Send`\n+error: some fields in `MultiParam<A, B>` are not safe to be sent to another thread\n   --> $DIR/non_send_fields_in_send_ty.rs:82:1\n    |\n LL | unsafe impl<A, B> Send for MultiParam<A, B> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the type of field `vec` is `!Send`\n+note: it is not safe to send field `vec` to another thread\n   --> $DIR/non_send_fields_in_send_ty.rs:79:5\n    |\n LL |     vec: Vec<(A, B)>,\n    |     ^^^^^^^^^^^^^^^^\n    = help: add bounds on type parameters `A, B` that satisfy `Vec<(A, B)>: Send`\n \n-error: this implementation is unsound, as some fields in `HeuristicTest` are `!Send`\n+error: some fields in `HeuristicTest` are not safe to be sent to another thread\n   --> $DIR/non_send_fields_in_send_ty.rs:100:1\n    |\n LL | unsafe impl Send for HeuristicTest {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the type of field `field4` is `!Send`\n+note: it is not safe to send field `field4` to another thread\n   --> $DIR/non_send_fields_in_send_ty.rs:95:5\n    |\n LL |     field4: (*const NonSend, Rc<u8>),\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: use a thread-safe type that implements `Send`\n \n-error: this implementation is unsound, as some fields in `AttrTest3<T>` are `!Send`\n+error: some fields in `AttrTest3<T>` are not safe to be sent to another thread\n   --> $DIR/non_send_fields_in_send_ty.rs:119:1\n    |\n LL | unsafe impl<T> Send for AttrTest3<T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the type of field `0` is `!Send`\n+note: it is not safe to send field `0` to another thread\n   --> $DIR/non_send_fields_in_send_ty.rs:114:11\n    |\n LL |     Enum2(T),\n    |           ^\n    = help: add `T: Send` bound in `Send` impl\n \n-error: this implementation is unsound, as some fields in `Complex<P, u32>` are `!Send`\n+error: some fields in `Complex<P, u32>` are not safe to be sent to another thread\n   --> $DIR/non_send_fields_in_send_ty.rs:127:1\n    |\n LL | unsafe impl<P> Send for Complex<P, u32> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the type of field `field1` is `!Send`\n+note: it is not safe to send field `field1` to another thread\n   --> $DIR/non_send_fields_in_send_ty.rs:123:5\n    |\n LL |     field1: A,\n    |     ^^^^^^^^^\n    = help: add `P: Send` bound in `Send` impl\n \n-error: this implementation is unsound, as some fields in `Complex<Q, MutexGuard<'static, bool>>` are `!Send`\n+error: some fields in `Complex<Q, MutexGuard<'static, bool>>` are not safe to be sent to another thread\n   --> $DIR/non_send_fields_in_send_ty.rs:130:1\n    |\n LL | unsafe impl<Q: Send> Send for Complex<Q, MutexGuard<'static, bool>> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the type of field `field2` is `!Send`\n+note: it is not safe to send field `field2` to another thread\n   --> $DIR/non_send_fields_in_send_ty.rs:124:5\n    |\n LL |     field2: B,"}]}