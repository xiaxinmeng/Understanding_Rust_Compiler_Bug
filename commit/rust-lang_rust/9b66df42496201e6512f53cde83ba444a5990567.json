{"sha": "9b66df42496201e6512f53cde83ba444a5990567", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliNjZkZjQyNDk2MjAxZTY1MTJmNTNjZGU4M2JhNDQ0YTU5OTA1Njc=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-11-06T18:44:56Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-11-06T18:44:56Z"}, "message": "Sync from rust dc06a36074f04c6a77b5834f2950011d49607898", "tree": {"sha": "c276a7264c68c90d7c3ca8e4f0c222877969cfe6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c276a7264c68c90d7c3ca8e4f0c222877969cfe6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b66df42496201e6512f53cde83ba444a5990567", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b66df42496201e6512f53cde83ba444a5990567", "html_url": "https://github.com/rust-lang/rust/commit/9b66df42496201e6512f53cde83ba444a5990567", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b66df42496201e6512f53cde83ba444a5990567/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66e4f1bb7a3e8edcab93e664cee74e174cb89f01", "url": "https://api.github.com/repos/rust-lang/rust/commits/66e4f1bb7a3e8edcab93e664cee74e174cb89f01", "html_url": "https://github.com/rust-lang/rust/commit/66e4f1bb7a3e8edcab93e664cee74e174cb89f01"}, {"sha": "d6f457d835849940b5ddb34c167b6adf24deb4c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6f457d835849940b5ddb34c167b6adf24deb4c9", "html_url": "https://github.com/rust-lang/rust/commit/d6f457d835849940b5ddb34c167b6adf24deb4c9"}], "stats": {"total": 35, "additions": 18, "deletions": 17}, "files": [{"sha": "36d7afc4ebfa9ea81a9caa1c88d45ed767dac67d", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b66df42496201e6512f53cde83ba444a5990567/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/9b66df42496201e6512f53cde83ba444a5990567/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=9b66df42496201e6512f53cde83ba444a5990567", "patch": "@@ -1 +1 @@\n-nightly-2020-11-03\n+nightly-2020-11-06"}, {"sha": "bfe5514b6d3eab4a096f4007c00cbbc269c89166", "filename": "src/base.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9b66df42496201e6512f53cde83ba444a5990567/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b66df42496201e6512f53cde83ba444a5990567/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=9b66df42496201e6512f53cde83ba444a5990567", "patch": "@@ -499,7 +499,7 @@ fn codegen_stmt<'tcx>(\n                         UnOp::Neg => match layout.ty.kind() {\n                             ty::Int(IntTy::I128) => {\n                                 // FIXME remove this case once ineg.i128 works\n-                                let zero = CValue::const_val(fx, layout, 0);\n+                                let zero = CValue::const_val(fx, layout, ty::ScalarInt::null(layout.size));\n                                 crate::num::codegen_int_binop(fx, BinOp::Sub, zero, operand)\n                             }\n                             ty::Int(_) => CValue::by_val(fx.bcx.ins().ineg(val), layout),\n@@ -585,13 +585,11 @@ fn codegen_stmt<'tcx>(\n                                     .discriminant_for_variant(fx.tcx, *index)\n                                     .unwrap();\n                                 let discr = if discr.ty.is_signed() {\n-                                    rustc_middle::mir::interpret::sign_extend(\n-                                        discr.val,\n-                                        fx.layout_of(discr.ty).size,\n-                                    )\n+                                    fx.layout_of(discr.ty).size.sign_extend(discr.val)\n                                 } else {\n                                     discr.val\n                                 };\n+                                let discr = discr.into();\n \n                                 let discr = CValue::const_val(fx, fx.layout_of(to_ty), discr);\n                                 lval.write_cvalue(fx, discr);"}, {"sha": "41cfae4ca6e26e677319b6ee41d0af6893e91398", "filename": "src/constant.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9b66df42496201e6512f53cde83ba444a5990567/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b66df42496201e6512f53cde83ba444a5990567/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=9b66df42496201e6512f53cde83ba444a5990567", "patch": "@@ -186,9 +186,8 @@ pub(crate) fn codegen_const_value<'tcx>(\n             }\n \n             match x {\n-                Scalar::Raw { data, size } => {\n-                    assert_eq!(u64::from(size), layout.size.bytes());\n-                    CValue::const_val(fx, layout, data)\n+                Scalar::Int(int) => {\n+                    CValue::const_val(fx, layout, int)\n                 }\n                 Scalar::Ptr(ptr) => {\n                     let alloc_kind = fx.tcx.get_global_alloc(ptr.alloc_id);"}, {"sha": "1e8e86add1a59ad8fcc7d508a4c04018db488847", "filename": "src/discriminant.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9b66df42496201e6512f53cde83ba444a5990567/src%2Fdiscriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b66df42496201e6512f53cde83ba444a5990567/src%2Fdiscriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiscriminant.rs?ref=9b66df42496201e6512f53cde83ba444a5990567", "patch": "@@ -1,6 +1,6 @@\n //! Handling of enum discriminants\n //!\n-//! Adapted from https://github.com/rust-lang/rust/blob/d760df5aea483aae041c9a241e7acacf48f75035/src/librustc_codegen_ssa/mir/place.rs\n+//! Adapted from <https://github.com/rust-lang/rust/blob/d760df5aea483aae041c9a241e7acacf48f75035/src/librustc_codegen_ssa/mir/place.rs>\n \n use rustc_target::abi::{Int, TagEncoding, Variants};\n \n@@ -30,7 +30,8 @@ pub(crate) fn codegen_set_discriminant<'tcx>(\n                 .ty\n                 .discriminant_for_variant(fx.tcx, variant_index)\n                 .unwrap()\n-                .val;\n+                .val\n+                .into();\n             let discr = CValue::const_val(fx, ptr.layout(), to);\n             ptr.write_cvalue(fx, discr);\n         }\n@@ -49,7 +50,7 @@ pub(crate) fn codegen_set_discriminant<'tcx>(\n                 let niche = place.place_field(fx, mir::Field::new(tag_field));\n                 let niche_value = variant_index.as_u32() - niche_variants.start().as_u32();\n                 let niche_value = u128::from(niche_value).wrapping_add(niche_start);\n-                let niche_llval = CValue::const_val(fx, niche.layout(), niche_value);\n+                let niche_llval = CValue::const_val(fx, niche.layout(), niche_value.into());\n                 niche.write_cvalue(fx, niche_llval);\n             }\n         }\n@@ -77,7 +78,7 @@ pub(crate) fn codegen_get_discriminant<'tcx>(\n                 .ty\n                 .discriminant_for_variant(fx.tcx, *index)\n                 .map_or(u128::from(index.as_u32()), |discr| discr.val);\n-            return CValue::const_val(fx, dest_layout, discr_val);\n+            return CValue::const_val(fx, dest_layout, discr_val.into());\n         }\n         Variants::Multiple {\n             tag,"}, {"sha": "ab16fabd348a540d04a12b0f2bcdfb60dae441c0", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9b66df42496201e6512f53cde83ba444a5990567/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b66df42496201e6512f53cde83ba444a5990567/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=9b66df42496201e6512f53cde83ba444a5990567", "patch": "@@ -1064,7 +1064,8 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n \n             fx.bcx.ins().call_indirect(f_sig, f, &[data]);\n \n-            let ret_val = CValue::const_val(fx, ret.layout(), 0);\n+            let layout = ret.layout();\n+            let ret_val = CValue::const_val(fx, layout, ty::ScalarInt::null(layout.size));\n             ret.write_cvalue(fx, ret_val);\n         };\n "}, {"sha": "0000866c4f6a95fd912424d5619cbf06b13680fc", "filename": "src/value_and_place.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9b66df42496201e6512f53cde83ba444a5990567/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b66df42496201e6512f53cde83ba444a5990567/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=9b66df42496201e6512f53cde83ba444a5990567", "patch": "@@ -231,22 +231,24 @@ impl<'tcx> CValue<'tcx> {\n     pub(crate) fn const_val(\n         fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n         layout: TyAndLayout<'tcx>,\n-        const_val: u128,\n+        const_val: ty::ScalarInt,\n     ) -> CValue<'tcx> {\n+        assert_eq!(const_val.size(), layout.size);\n         use cranelift_codegen::ir::immediates::{Ieee32, Ieee64};\n \n         let clif_ty = fx.clif_type(layout.ty).unwrap();\n \n         if let ty::Bool = layout.ty.kind() {\n             assert!(\n-                const_val == 0 || const_val == 1,\n+                const_val == ty::ScalarInt::FALSE || const_val == ty::ScalarInt::TRUE,\n                 \"Invalid bool 0x{:032X}\",\n                 const_val\n             );\n         }\n \n         let val = match layout.ty.kind() {\n             ty::Uint(UintTy::U128) | ty::Int(IntTy::I128) => {\n+                let const_val = const_val.to_bits(layout.size).unwrap();\n                 let lsb = fx.bcx.ins().iconst(types::I64, const_val as u64 as i64);\n                 let msb = fx\n                     .bcx\n@@ -259,7 +261,7 @@ impl<'tcx> CValue<'tcx> {\n                 fx\n                     .bcx\n                     .ins()\n-                    .iconst(clif_ty, u64::try_from(const_val).expect(\"uint\") as i64)\n+                    .iconst(clif_ty, const_val.to_bits(layout.size).unwrap() as i64)\n             }\n             ty::Float(FloatTy::F32) => {\n                 fx.bcx.ins().f32const(Ieee32::with_bits(u32::try_from(const_val).unwrap()))"}]}