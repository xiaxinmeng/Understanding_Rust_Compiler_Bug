{"sha": "22dfa2b44a797b76f38b9ce775da9bc9886787af", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyZGZhMmI0NGE3OTdiNzZmMzhiOWNlNzc1ZGE5YmM5ODg2Nzg3YWY=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-12-22T16:07:44Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-12-22T18:12:03Z"}, "message": "Rollup merge of #56970 - Firstyear:mem_uninit_doc_ptr_drop, r=Manishearth\n\nMem uninit doc ptr drop\n\nExtend the mem::uninitialized documentation to account for partially initialized arrays and how to correctly handle these. These are used in some datastructures (trees for example) or in FFI.\n\nr? @Manishearth", "tree": {"sha": "df69d3d8380cd9752247a36b904251c8fd5b9b07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df69d3d8380cd9752247a36b904251c8fd5b9b07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22dfa2b44a797b76f38b9ce775da9bc9886787af", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlwefnMACgkQ/vbIBR0O\nATy6Ig/+KOLw6J29ktnztniQz7b1lXv61ujqnAfzrIzZBHz/1WyrO7cjHkz+Wk8A\nv7vVRw3mmKdBTYGcZk0K1kxApZU157P3Sap1NOwOXBlzZiMDnjEohZL7yW1VJ8tG\nAfbuJYFcOGW5Du2tYQGy0iKfmANYTb1jLVvQ0SOxYADZmbkCj4tlgbNg/N1f7Jse\nVxI6wnXOnV4S3f7EAexa/TEH0LNDA5QMwXWYhghmKieMSjkhcmSX08kFQFfzL9Vq\nwFpKX+fZbXK8+fNveIyvo3q0ZDiv6/LdW8ZRsJBtJSwC2RPRnY5GNfXJM1ljY8DL\nLCC+b1tPlpdNnI2yh72bZUl0jHeo/shZijPt2pe1otTrlz7Ryt43Z3jlyfj9pY0U\nq2693MX9jROg8cNDb5gkKZVcnkEpKb4J5vuScbXLD3/l+K7+cElrnwtupcRF5vIe\nb3EnItbTorgV3tNoFqpnKfAbdSPDf/vvcDnp3sQ3yLbsdI/z7+gG1JiPfvMpOMHv\nHCOL8Ti5YKLksUyJa2eKcH2Qq0AvydbLM76pVJr20CBctFW8PfyowKceXDLzgdkm\nSFSK0+7hNcKv3BmSDq1sdOoKR2kau+a1VSDbDhdw80IYPBVUoppiXVOGQ9A4HGfs\nI051J9UIwhj9zN77JQxeDEfeATNa4teOy0cuKc2PWQo2dUGfOK8=\n=jBPx\n-----END PGP SIGNATURE-----", "payload": "tree df69d3d8380cd9752247a36b904251c8fd5b9b07\nparent 1c76a2fd10adb737688e40564b6f4f35829fcab2\nparent b2d8040e6f89318c0ca7f5512ca31f8311b14a36\nauthor kennytm <kennytm@gmail.com> 1545494864 +0800\ncommitter kennytm <kennytm@gmail.com> 1545502323 +0800\n\nRollup merge of #56970 - Firstyear:mem_uninit_doc_ptr_drop, r=Manishearth\n\nMem uninit doc ptr drop\n\nExtend the mem::uninitialized documentation to account for partially initialized arrays and how to correctly handle these. These are used in some datastructures (trees for example) or in FFI.\n\nr? @Manishearth\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22dfa2b44a797b76f38b9ce775da9bc9886787af", "html_url": "https://github.com/rust-lang/rust/commit/22dfa2b44a797b76f38b9ce775da9bc9886787af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22dfa2b44a797b76f38b9ce775da9bc9886787af/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c76a2fd10adb737688e40564b6f4f35829fcab2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c76a2fd10adb737688e40564b6f4f35829fcab2", "html_url": "https://github.com/rust-lang/rust/commit/1c76a2fd10adb737688e40564b6f4f35829fcab2"}, {"sha": "b2d8040e6f89318c0ca7f5512ca31f8311b14a36", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2d8040e6f89318c0ca7f5512ca31f8311b14a36", "html_url": "https://github.com/rust-lang/rust/commit/b2d8040e6f89318c0ca7f5512ca31f8311b14a36"}], "stats": {"total": 39, "additions": 39, "deletions": 0}, "files": [{"sha": "87dde9066019cae96b8aca6cc763fa4257e8d9ff", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/22dfa2b44a797b76f38b9ce775da9bc9886787af/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22dfa2b44a797b76f38b9ce775da9bc9886787af/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=22dfa2b44a797b76f38b9ce775da9bc9886787af", "patch": "@@ -530,6 +530,12 @@ pub unsafe fn zeroed<T>() -> T {\n /// it goes out of scope (and therefore would be dropped). Note that this\n /// includes a `panic` occurring and unwinding the stack suddenly.\n ///\n+/// If you partially initialize an array, you may need to use\n+/// [`ptr::drop_in_place`][drop_in_place] to remove the elements you have fully\n+/// initialized followed by [`mem::forget`][mem_forget] to prevent drop running\n+/// on the array. If a partially allocated array is dropped this will lead to\n+/// undefined behaviour.\n+///\n /// # Examples\n ///\n /// Here's how to safely initialize an array of [`Vec`]s.\n@@ -583,11 +589,44 @@ pub unsafe fn zeroed<T>() -> T {\n /// println!(\"{:?}\", &data[0]);\n /// ```\n ///\n+/// This example shows how to handle partially initialized arrays, which could\n+/// be found in low-level datastructures.\n+///\n+/// ```\n+/// use std::mem;\n+/// use std::ptr;\n+///\n+/// // Count the number of elements we have assigned.\n+/// let mut data_len: usize = 0;\n+/// let mut data: [String; 1000];\n+///\n+/// unsafe {\n+///     data = mem::uninitialized();\n+///\n+///     for elem in &mut data[0..500] {\n+///         ptr::write(elem, String::from(\"hello\"));\n+///         data_len += 1;\n+///     }\n+///\n+///     // For each item in the array, drop if we allocated it.\n+///     for i in &mut data[0..data_len] {\n+///         ptr::drop_in_place(i);\n+///     }\n+/// }\n+/// // Forget the data. If this is allowed to drop, you may see a crash such as:\n+/// // 'mem_uninit_test(2457,0x7fffb55dd380) malloc: *** error for object\n+/// // 0x7ff3b8402920: pointer being freed was not allocated'\n+/// mem::forget(data);\n+/// ```\n+///\n /// [`Vec`]: ../../std/vec/struct.Vec.html\n /// [`vec!`]: ../../std/macro.vec.html\n /// [`Clone`]: ../../std/clone/trait.Clone.html\n /// [ub]: ../../reference/behavior-considered-undefined.html\n /// [write]: ../ptr/fn.write.html\n+/// [drop_in_place]: ../ptr/fn.drop_in_place.html\n+/// [mem_zeroed]: fn.zeroed.html\n+/// [mem_forget]: fn.forget.html\n /// [copy]: ../intrinsics/fn.copy.html\n /// [copy_no]: ../intrinsics/fn.copy_nonoverlapping.html\n /// [`Drop`]: ../ops/trait.Drop.html"}]}