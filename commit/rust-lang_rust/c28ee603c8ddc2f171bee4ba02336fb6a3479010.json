{"sha": "c28ee603c8ddc2f171bee4ba02336fb6a3479010", "node_id": "C_kwDOAAsO6NoAKGMyOGVlNjAzYzhkZGMyZjE3MWJlZTRiYTAyMzM2ZmI2YTM0NzkwMTA", "commit": {"author": {"name": "jyn", "email": "github@jyn.dev", "date": "2023-05-25T20:14:56Z"}, "committer": {"name": "jyn", "email": "github@jyn.dev", "date": "2023-05-29T18:26:44Z"}, "message": "Fix bugs in `doc` refactor\n\n- Switch from `cargo rustdoc` to `cargo doc`\n\n  This allows passing `-p` to multiple packages.\n\n- Remove `OsStr` support\n\n  It doesn't work with RUSTDOCFLAGS, and we don't support non-utf8 paths\n  anyway.\n\n- Pass `-p std` for each crate in the standard library\n\n  By default cargo only documents the top-level crate, which is\n  `sysroot` and has no docs.", "tree": {"sha": "56e98ebbeb14854987c6aa569adbecf88b7b0e43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56e98ebbeb14854987c6aa569adbecf88b7b0e43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c28ee603c8ddc2f171bee4ba02336fb6a3479010", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c28ee603c8ddc2f171bee4ba02336fb6a3479010", "html_url": "https://github.com/rust-lang/rust/commit/c28ee603c8ddc2f171bee4ba02336fb6a3479010", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c28ee603c8ddc2f171bee4ba02336fb6a3479010/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71770d5e6e5c6d77777e7f9c86f7c9533882c449", "url": "https://api.github.com/repos/rust-lang/rust/commits/71770d5e6e5c6d77777e7f9c86f7c9533882c449", "html_url": "https://github.com/rust-lang/rust/commit/71770d5e6e5c6d77777e7f9c86f7c9533882c449"}], "stats": {"total": 65, "additions": 40, "deletions": 25}, "files": [{"sha": "3de85c91516c4759d7e4452c87192d2ce294f2d8", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 40, "deletions": 25, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/c28ee603c8ddc2f171bee4ba02336fb6a3479010/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c28ee603c8ddc2f171bee4ba02336fb6a3479010/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=c28ee603c8ddc2f171bee4ba02336fb6a3479010", "patch": "@@ -7,7 +7,6 @@\n //! Everything here is basically just a shim around calling either `rustbook` or\n //! `rustdoc`.\n \n-use std::ffi::OsStr;\n use std::fs;\n use std::io;\n use std::path::{Path, PathBuf};\n@@ -471,20 +470,21 @@ impl Step for Std {\n             builder.ensure(SharedAssets { target: self.target });\n         }\n \n-        let index_page = builder.src.join(\"src/doc/index.md\").into_os_string();\n+        let index_page = builder\n+            .src\n+            .join(\"src/doc/index.md\")\n+            .into_os_string()\n+            .into_string()\n+            .expect(\"non-utf8 paths are unsupported\");\n         let mut extra_args = match self.format {\n-            DocumentationFormat::HTML => vec![\n-                OsStr::new(\"--markdown-css\"),\n-                OsStr::new(\"rust.css\"),\n-                OsStr::new(\"--markdown-no-toc\"),\n-                OsStr::new(\"--index-page\"),\n-                &index_page,\n-            ],\n-            DocumentationFormat::JSON => vec![OsStr::new(\"--output-format\"), OsStr::new(\"json\")],\n+            DocumentationFormat::HTML => {\n+                vec![\"--markdown-css\", \"rust.css\", \"--markdown-no-toc\", \"--index-page\", &index_page]\n+            }\n+            DocumentationFormat::JSON => vec![\"--output-format\", \"json\"],\n         };\n \n         if !builder.config.docs_minification {\n-            extra_args.push(OsStr::new(\"--disable-minification\"));\n+            extra_args.push(\"--disable-minification\");\n         }\n \n         doc_std(builder, self.format, stage, target, &out, &extra_args, &self.crates);\n@@ -549,7 +549,7 @@ fn doc_std(\n     stage: u32,\n     target: TargetSelection,\n     out: &Path,\n-    extra_args: &[&OsStr],\n+    extra_args: &[&str],\n     requested_crates: &[String],\n ) {\n     if builder.no_std(target) == Some(true) {\n@@ -574,24 +574,39 @@ fn doc_std(\n     // as a function parameter.\n     let out_dir = target_dir.join(target.triple).join(\"doc\");\n \n-    let mut cargo = builder.cargo(compiler, Mode::Std, SourceType::InTree, target, \"rustdoc\");\n+    let mut cargo = builder.cargo(compiler, Mode::Std, SourceType::InTree, target, \"doc\");\n     compile::std_cargo(builder, target, compiler.stage, &mut cargo);\n-    cargo.arg(\"--target-dir\").arg(&*target_dir.to_string_lossy()).arg(\"-Zskip-rustdoc-fingerprint\");\n+    cargo\n+        .arg(\"--no-deps\")\n+        .arg(\"--target-dir\")\n+        .arg(&*target_dir.to_string_lossy())\n+        .arg(\"-Zskip-rustdoc-fingerprint\")\n+        .rustdocflag(\"-Z\")\n+        .rustdocflag(\"unstable-options\")\n+        .rustdocflag(\"--resource-suffix\")\n+        .rustdocflag(&builder.version);\n+    for arg in extra_args {\n+        cargo.rustdocflag(arg);\n+    }\n \n-    for krate in requested_crates {\n-        cargo.arg(\"-p\").arg(krate);\n+    if builder.config.library_docs_private_items {\n+        cargo.rustdocflag(\"--document-private-items\").rustdocflag(\"--document-hidden-items\");\n     }\n \n-    cargo\n-        .arg(\"--\")\n-        .arg(\"-Z\")\n-        .arg(\"unstable-options\")\n-        .arg(\"--resource-suffix\")\n-        .arg(&builder.version)\n-        .args(extra_args);\n+    // HACK: because we use `--manifest-path library/sysroot/Cargo.toml`, cargo thinks we only want to document that specific crate, not its dependencies.\n+    // Override its default.\n+    let built_crates = if requested_crates.is_empty() {\n+        builder\n+            .in_tree_crates(\"sysroot\", None)\n+            .into_iter()\n+            .map(|krate| krate.name.to_string())\n+            .collect()\n+    } else {\n+        requested_crates.to_vec()\n+    };\n \n-    if builder.config.library_docs_private_items {\n-        cargo.arg(\"--document-private-items\").arg(\"--document-hidden-items\");\n+    for krate in built_crates {\n+        cargo.arg(\"-p\").arg(krate);\n     }\n \n     builder.run(&mut cargo.into());"}]}