{"sha": "25530538282b932472e7d6740142c970038ec222", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1NTMwNTM4MjgyYjkzMjQ3MmU3ZDY3NDAxNDJjOTcwMDM4ZWMyMjI=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-05-02T15:00:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-02T15:00:23Z"}, "message": "Rollup merge of #84752 - lrh2000:generator-debuginfo, r=tmandry\n\nFix debuginfo for generators\n\nFirst, all fields except the discriminant (including `outer_fields`) should be put into structures inside the variant part, which gives an equivalent layout but offers us much better integration with debuggers.\n\nSecond, artificial flags in generator variants should be removed.\n - Literally, variants are not artificial. We have `yield` statements, upvars and inner variables in the source code.\n - Functionally, we don't want debuggers to suppress the variants. It contains the state of the generator, which is useful when debugging. So they shouldn't be marked artificial.\n - Debuggers may use artificial flags to find the active variant. In this case, marking variants artificial will make debuggers not work properly.\n\nFixes #62572.\nFixes #79009.\n\nAnd refer https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/Debuginfo.20for.20generators.", "tree": {"sha": "2c4b7d1fcab8f33e0327250ba5927b0337de1fbe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c4b7d1fcab8f33e0327250ba5927b0337de1fbe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25530538282b932472e7d6740142c970038ec222", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgjr6ICRBK7hj4Ov3rIwAA8SkIADhjmZSv5e/FaGEaygGa7/vP\nXhbEeI0Oje/WtlYFuQT/bmRmyqLsWF+iSh3I2I+2lAADDu/mR4Wg06p4SLQYWu1z\nrztPALJp38d8tr5QAd51umOyCB/jFlRoMGe5V+wuQwOuj9wv+gjefTPdd9mA8vMa\n3tHFSSA1z1PmeJKyEBVe70Mgck6y5O2XYvnDrYqR4FZTx5KdmLgHrxknp5QrP09V\n2Sv5cTLEMT5HT9fnwbsoG2q0p3TIt28r3/iLPtjHgYWjY63M+9TGs08YZz6M+QdW\nA4A2LTj32ibXshF/Hl7nVkK1kgE3xnRauRMY2yJYa46jIT7urjqZBE2+35YH5Hw=\n=G5oE\n-----END PGP SIGNATURE-----\n", "payload": "tree 2c4b7d1fcab8f33e0327250ba5927b0337de1fbe\nparent 4198d0a87cf9cd97c451414f168f9d2609754201\nparent 5bf989ece9e29941f2c517a39289a60bfb8595c0\nauthor Dylan DPC <dylan.dpc@gmail.com> 1619967623 +0200\ncommitter GitHub <noreply@github.com> 1619967623 +0200\n\nRollup merge of #84752 - lrh2000:generator-debuginfo, r=tmandry\n\nFix debuginfo for generators\n\nFirst, all fields except the discriminant (including `outer_fields`) should be put into structures inside the variant part, which gives an equivalent layout but offers us much better integration with debuggers.\n\nSecond, artificial flags in generator variants should be removed.\n - Literally, variants are not artificial. We have `yield` statements, upvars and inner variables in the source code.\n - Functionally, we don't want debuggers to suppress the variants. It contains the state of the generator, which is useful when debugging. So they shouldn't be marked artificial.\n - Debuggers may use artificial flags to find the active variant. In this case, marking variants artificial will make debuggers not work properly.\n\nFixes #62572.\nFixes #79009.\n\nAnd refer https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/Debuginfo.20for.20generators.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25530538282b932472e7d6740142c970038ec222", "html_url": "https://github.com/rust-lang/rust/commit/25530538282b932472e7d6740142c970038ec222", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25530538282b932472e7d6740142c970038ec222/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4198d0a87cf9cd97c451414f168f9d2609754201", "url": "https://api.github.com/repos/rust-lang/rust/commits/4198d0a87cf9cd97c451414f168f9d2609754201", "html_url": "https://github.com/rust-lang/rust/commit/4198d0a87cf9cd97c451414f168f9d2609754201"}, {"sha": "5bf989ece9e29941f2c517a39289a60bfb8595c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bf989ece9e29941f2c517a39289a60bfb8595c0", "html_url": "https://github.com/rust-lang/rust/commit/5bf989ece9e29941f2c517a39289a60bfb8595c0"}], "stats": {"total": 194, "additions": 114, "deletions": 80}, "files": [{"sha": "280d9a4d3702179a4cef60afa2c4781602293d9a", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 34, "deletions": 30, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/25530538282b932472e7d6740142c970038ec222/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25530538282b932472e7d6740142c970038ec222/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=25530538282b932472e7d6740142c970038ec222", "patch": "@@ -309,6 +309,7 @@ impl RecursiveTypeDescription<'ll, 'tcx> {\n                     unfinished_type,\n                     member_holding_stub,\n                     member_descriptions,\n+                    None,\n                 );\n                 MetadataCreationResult::new(metadata_stub, true)\n             }\n@@ -1459,6 +1460,7 @@ struct EnumMemberDescriptionFactory<'ll, 'tcx> {\n     layout: TyAndLayout<'tcx>,\n     tag_type_metadata: Option<&'ll DIType>,\n     containing_scope: &'ll DIScope,\n+    common_members: Vec<Option<&'ll DIType>>,\n     span: Span,\n }\n \n@@ -1493,10 +1495,6 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n         } else {\n             type_metadata(cx, self.enum_type, self.span)\n         };\n-        let flags = match self.enum_type.kind() {\n-            ty::Generator(..) => DIFlags::FlagArtificial,\n-            _ => DIFlags::FlagZero,\n-        };\n \n         match self.layout.variants {\n             Variants::Single { index } => {\n@@ -1523,14 +1521,15 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                     self.enum_type,\n                     variant_type_metadata,\n                     member_descriptions,\n+                    Some(&self.common_members),\n                 );\n                 vec![MemberDescription {\n                     name: if fallback { String::new() } else { variant_info.variant_name() },\n                     type_metadata: variant_type_metadata,\n                     offset: Size::ZERO,\n                     size: self.layout.size,\n                     align: self.layout.align.abi,\n-                    flags,\n+                    flags: DIFlags::FlagZero,\n                     discriminant: None,\n                     source_info: variant_info.source_info(cx),\n                 }]\n@@ -1572,6 +1571,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                             self.enum_type,\n                             variant_type_metadata,\n                             member_descriptions,\n+                            Some(&self.common_members),\n                         );\n \n                         MemberDescription {\n@@ -1584,7 +1584,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                             offset: Size::ZERO,\n                             size: self.layout.size,\n                             align: self.layout.align.abi,\n-                            flags,\n+                            flags: DIFlags::FlagZero,\n                             discriminant: Some(\n                                 self.layout.ty.discriminant_for_variant(cx.tcx, i).unwrap().val\n                                     as u64,\n@@ -1621,6 +1621,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                         self.enum_type,\n                         variant_type_metadata,\n                         variant_member_descriptions,\n+                        Some(&self.common_members),\n                     );\n \n                     // Encode the information about the null variant in the union\n@@ -1667,7 +1668,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                         offset: Size::ZERO,\n                         size: variant.size,\n                         align: variant.align.abi,\n-                        flags,\n+                        flags: DIFlags::FlagZero,\n                         discriminant: None,\n                         source_info: variant_info.source_info(cx),\n                     }]\n@@ -1695,6 +1696,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                                 self.enum_type,\n                                 variant_type_metadata,\n                                 member_descriptions,\n+                                Some(&self.common_members),\n                             );\n \n                             let niche_value = if i == dataful_variant {\n@@ -1717,7 +1719,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                                 offset: Size::ZERO,\n                                 size: self.layout.size,\n                                 align: self.layout.align.abi,\n-                                flags,\n+                                flags: DIFlags::FlagZero,\n                                 discriminant: niche_value,\n                                 source_info: variant_info.source_info(cx),\n                             }\n@@ -1849,13 +1851,6 @@ impl<'tcx> VariantInfo<'_, 'tcx> {\n         }\n         None\n     }\n-\n-    fn is_artificial(&self) -> bool {\n-        match self {\n-            VariantInfo::Generator { .. } => true,\n-            VariantInfo::Adt(..) => false,\n-        }\n-    }\n }\n \n /// Returns a tuple of (1) `type_metadata_stub` of the variant, (2) a\n@@ -1881,8 +1876,7 @@ fn describe_enum_variant(\n             &variant_name,\n             unique_type_id,\n             Some(containing_scope),\n-            // FIXME(tmandry): This doesn't seem to have any effect.\n-            if variant.is_artificial() { DIFlags::FlagArtificial } else { DIFlags::FlagZero },\n+            DIFlags::FlagZero,\n         )\n     });\n \n@@ -1945,11 +1939,6 @@ fn prepare_enum_metadata(\n ) -> RecursiveTypeDescription<'ll, 'tcx> {\n     let tcx = cx.tcx;\n     let enum_name = compute_debuginfo_type_name(tcx, enum_type, false);\n-    // FIXME(tmandry): This doesn't seem to have any effect.\n-    let enum_flags = match enum_type.kind() {\n-        ty::Generator(..) => DIFlags::FlagArtificial,\n-        _ => DIFlags::FlagZero,\n-    };\n \n     let containing_scope = get_namespace_for_item(cx, enum_def_id);\n     // FIXME: This should emit actual file metadata for the enum, but we\n@@ -2082,7 +2071,7 @@ fn prepare_enum_metadata(\n                     UNKNOWN_LINE_NUMBER,\n                     layout.size.bits(),\n                     layout.align.abi.bits() as u32,\n-                    enum_flags,\n+                    DIFlags::FlagZero,\n                     None,\n                     0, // RuntimeLang\n                     unique_type_id_str.as_ptr().cast(),\n@@ -2102,6 +2091,7 @@ fn prepare_enum_metadata(\n                 layout,\n                 tag_type_metadata: discriminant_type_metadata,\n                 containing_scope,\n+                common_members: vec![],\n                 span,\n             }),\n         );\n@@ -2171,7 +2161,7 @@ fn prepare_enum_metadata(\n         }\n     };\n \n-    let mut outer_fields = match layout.variants {\n+    let outer_fields = match layout.variants {\n         Variants::Single { .. } => vec![],\n         Variants::Multiple { .. } => {\n             let tuple_mdf = TupleMemberDescriptionFactory {\n@@ -2203,18 +2193,21 @@ fn prepare_enum_metadata(\n             UNKNOWN_LINE_NUMBER,\n             layout.size.bits(),\n             layout.align.abi.bits() as u32,\n-            enum_flags,\n+            DIFlags::FlagZero,\n             discriminator_metadata,\n             empty_array,\n             variant_part_unique_type_id_str.as_ptr().cast(),\n             variant_part_unique_type_id_str.len(),\n         )\n     };\n-    outer_fields.push(Some(variant_part));\n \n     let struct_wrapper = {\n         // The variant part must be wrapped in a struct according to DWARF.\n-        let type_array = create_DIArray(DIB(cx), &outer_fields);\n+        // All fields except the discriminant (including `outer_fields`)\n+        // should be put into structures inside the variant part, which gives\n+        // an equivalent layout but offers us much better integration with\n+        // debuggers.\n+        let type_array = create_DIArray(DIB(cx), &[Some(variant_part)]);\n \n         let type_map = debug_context(cx).type_map.borrow();\n         let unique_type_id_str = type_map.get_unique_type_id_as_string(unique_type_id);\n@@ -2229,7 +2222,7 @@ fn prepare_enum_metadata(\n                 UNKNOWN_LINE_NUMBER,\n                 layout.size.bits(),\n                 layout.align.abi.bits() as u32,\n-                enum_flags,\n+                DIFlags::FlagZero,\n                 None,\n                 type_array,\n                 0,\n@@ -2251,6 +2244,7 @@ fn prepare_enum_metadata(\n             layout,\n             tag_type_metadata: None,\n             containing_scope,\n+            common_members: outer_fields,\n             span,\n         }),\n     )\n@@ -2283,7 +2277,13 @@ fn composite_type_metadata(\n         DIFlags::FlagZero,\n     );\n     // ... and immediately create and add the member descriptions.\n-    set_members_of_composite_type(cx, composite_type, composite_type_metadata, member_descriptions);\n+    set_members_of_composite_type(\n+        cx,\n+        composite_type,\n+        composite_type_metadata,\n+        member_descriptions,\n+        None,\n+    );\n \n     composite_type_metadata\n }\n@@ -2293,6 +2293,7 @@ fn set_members_of_composite_type(\n     composite_type: Ty<'tcx>,\n     composite_type_metadata: &'ll DICompositeType,\n     member_descriptions: Vec<MemberDescription<'ll>>,\n+    common_members: Option<&Vec<Option<&'ll DIType>>>,\n ) {\n     // In some rare cases LLVM metadata uniquing would lead to an existing type\n     // description being used instead of a new one created in\n@@ -2311,10 +2312,13 @@ fn set_members_of_composite_type(\n         }\n     }\n \n-    let member_metadata: Vec<_> = member_descriptions\n+    let mut member_metadata: Vec<_> = member_descriptions\n         .into_iter()\n         .map(|desc| Some(desc.into_metadata(cx, composite_type_metadata)))\n         .collect();\n+    if let Some(other_members) = common_members {\n+        member_metadata.extend(other_members.iter());\n+    }\n \n     let type_params = compute_type_parameters(cx, composite_type);\n     unsafe {"}, {"sha": "f2641404aae21b91eaa6674587bd20db7940c14e", "filename": "src/test/codegen/async-fn-debug-msvc.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/25530538282b932472e7d6740142c970038ec222/src%2Ftest%2Fcodegen%2Fasync-fn-debug-msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25530538282b932472e7d6740142c970038ec222/src%2Ftest%2Fcodegen%2Fasync-fn-debug-msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fasync-fn-debug-msvc.rs?ref=25530538282b932472e7d6740142c970038ec222", "patch": "@@ -1,7 +1,7 @@\n // Verify debuginfo for generators:\n //  - Each variant points to the file and line of its yield point\n-//  - The generator types and variants are marked artificial\n-//  - Captured vars from the source are not marked artificial\n+//  - The discriminants are marked artificial\n+//  - Other fields are not marked artificial\n //\n //\n // compile-flags: -C debuginfo=2 --edition=2018\n@@ -17,26 +17,32 @@ async fn async_fn_test() {\n // FIXME: No way to reliably check the filename.\n \n // CHECK-DAG:  [[ASYNC_FN:!.*]] = !DINamespace(name: \"async_fn_test\"\n-// CHECK-DAG:  [[GEN:!.*]] = !DICompositeType(tag: DW_TAG_union_type, name: \"generator-0\", scope: [[ASYNC_FN]], {{.*}}flags: DIFlagArtificial\n+// CHECK-DAG:  [[GEN:!.*]] = !DICompositeType(tag: DW_TAG_union_type, name: \"generator-0\", scope: [[ASYNC_FN]]\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, scope: [[GEN]],\n // For brevity, we only check the struct name and members of the last variant.\n // CHECK-SAME: file: [[FILE:![0-9]*]], line: 11,\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, scope: [[GEN]],\n // CHECK-SAME: file: [[FILE]], line: 15,\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, scope: [[GEN]],\n // CHECK-SAME: file: [[FILE]], line: 15,\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, scope: [[GEN]],\n // CHECK-SAME: file: [[FILE]], line: 12,\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, scope: [[GEN]],\n // CHECK-SAME: file: [[FILE]], line: 14,\n // CHECK-SAME: baseType: [[VARIANT:![0-9]*]]\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      [[S1:!.*]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"Suspend1\", scope: [[ASYNC_FN]],\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"RUST$ENUM$DISR\", scope: [[S1]],\n // CHECK-SAME: flags: DIFlagArtificial\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"s\", scope: [[S1]]"}, {"sha": "7de115f7e9194d7d062c3346f2d76fd64e3e579a", "filename": "src/test/codegen/async-fn-debug.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/25530538282b932472e7d6740142c970038ec222/src%2Ftest%2Fcodegen%2Fasync-fn-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25530538282b932472e7d6740142c970038ec222/src%2Ftest%2Fcodegen%2Fasync-fn-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fasync-fn-debug.rs?ref=25530538282b932472e7d6740142c970038ec222", "patch": "@@ -1,7 +1,7 @@\n // Verify debuginfo for async fn:\n //  - Each variant points to the file and line of its yield point\n-//  - The generator types and variants are marked artificial\n-//  - Captured vars from the source are not marked artificial\n+//  - The discriminants are marked artificial\n+//  - Other fields are not marked artificial\n //\n //\n // compile-flags: -C debuginfo=2 --edition=2018\n@@ -17,29 +17,36 @@ async fn async_fn_test() {\n // FIXME: No way to reliably check the filename.\n \n // CHECK-DAG:  [[ASYNC_FN:!.*]] = !DINamespace(name: \"async_fn_test\"\n-// CHECK-DAG:  [[GEN:!.*]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"generator-0\", scope: [[ASYNC_FN]], {{.*}}flags: DIFlagArtificial\n+// CHECK-DAG:  [[GEN:!.*]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"generator-0\", scope: [[ASYNC_FN]]\n // CHECK:      [[VARIANT:!.*]] = !DICompositeType(tag: DW_TAG_variant_part, scope: [[ASYNC_FN]],\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n // CHECK-SAME: discriminator: [[DISC:![0-9]*]]\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"0\", scope: [[VARIANT]],\n // CHECK-SAME: file: [[FILE:![0-9]*]], line: 11,\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      {{!.*}} = !DICompositeType(tag: DW_TAG_structure_type, name: \"Unresumed\", scope: [[GEN]],\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"1\", scope: [[VARIANT]],\n // CHECK-SAME: file: [[FILE]], line: 15,\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"2\", scope: [[VARIANT]],\n // CHECK-SAME: file: [[FILE]], line: 15,\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"3\", scope: [[VARIANT]],\n // CHECK-SAME: file: [[FILE]], line: 12,\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"4\", scope: [[VARIANT]],\n // CHECK-SAME: file: [[FILE]], line: 14,\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      [[S1:!.*]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"Suspend1\", scope: [[GEN]],\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"s\", scope: [[S1]]\n // CHECK-NOT:  flags: DIFlagArtificial\n // CHECK-SAME: )"}, {"sha": "44be71f3b9b8056ce99d538ff8bc57ed949cdb41", "filename": "src/test/codegen/generator-debug-msvc.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/25530538282b932472e7d6740142c970038ec222/src%2Ftest%2Fcodegen%2Fgenerator-debug-msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25530538282b932472e7d6740142c970038ec222/src%2Ftest%2Fcodegen%2Fgenerator-debug-msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fgenerator-debug-msvc.rs?ref=25530538282b932472e7d6740142c970038ec222", "patch": "@@ -1,7 +1,7 @@\n // Verify debuginfo for generators:\n //  - Each variant points to the file and line of its yield point\n-//  - The generator types and variants are marked artificial\n-//  - Captured vars from the source are not marked artificial\n+//  - The discriminants are marked artificial\n+//  - Other fields are not marked artificial\n //\n //\n // compile-flags: -C debuginfo=2\n@@ -21,26 +21,32 @@ fn generator_test() -> impl Generator<Yield = i32, Return = ()> {\n // FIXME: No way to reliably check the filename.\n \n // CHECK-DAG:  [[GEN_FN:!.*]] = !DINamespace(name: \"generator_test\"\n-// CHECK-DAG:  [[GEN:!.*]] = !DICompositeType(tag: DW_TAG_union_type, name: \"generator-0\", scope: [[GEN_FN]], {{.*}}flags: DIFlagArtificial\n+// CHECK-DAG:  [[GEN:!.*]] = !DICompositeType(tag: DW_TAG_union_type, name: \"generator-0\", scope: [[GEN_FN]]\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, scope: [[GEN]],\n // For brevity, we only check the struct name and members of the last variant.\n // CHECK-SAME: file: [[FILE:![0-9]*]], line: 14,\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, scope: [[GEN]],\n // CHECK-SAME: file: [[FILE]], line: 18,\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, scope: [[GEN]],\n // CHECK-SAME: file: [[FILE]], line: 18,\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, scope: [[GEN]],\n // CHECK-SAME: file: [[FILE]], line: 15,\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, scope: [[GEN]],\n // CHECK-SAME: file: [[FILE]], line: 17,\n // CHECK-SAME: baseType: [[VARIANT:![0-9]*]]\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      [[S1:!.*]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"Suspend1\", scope: [[GEN_FN]],\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"RUST$ENUM$DISR\", scope: [[S1]],\n // CHECK-SAME: flags: DIFlagArtificial\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"s\", scope: [[S1]]"}, {"sha": "8b87a2f0646044af947a3639e32637aaeec6e82f", "filename": "src/test/codegen/generator-debug.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/25530538282b932472e7d6740142c970038ec222/src%2Ftest%2Fcodegen%2Fgenerator-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25530538282b932472e7d6740142c970038ec222/src%2Ftest%2Fcodegen%2Fgenerator-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fgenerator-debug.rs?ref=25530538282b932472e7d6740142c970038ec222", "patch": "@@ -1,7 +1,7 @@\n // Verify debuginfo for generators:\n //  - Each variant points to the file and line of its yield point\n-//  - The generator types and variants are marked artificial\n-//  - Captured vars from the source are not marked artificial\n+//  - The discriminants are marked artificial\n+//  - Other fields are not marked artificial\n //\n //\n // compile-flags: -C debuginfo=2 --edition=2018\n@@ -21,29 +21,36 @@ fn generator_test() -> impl Generator<Yield = i32, Return = ()> {\n // FIXME: No way to reliably check the filename.\n \n // CHECK-DAG:  [[GEN_FN:!.*]] = !DINamespace(name: \"generator_test\"\n-// CHECK-DAG:  [[GEN:!.*]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"generator-0\", scope: [[GEN_FN]], {{.*}}flags: DIFlagArtificial\n+// CHECK-DAG:  [[GEN:!.*]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"generator-0\", scope: [[GEN_FN]]\n // CHECK:      [[VARIANT:!.*]] = !DICompositeType(tag: DW_TAG_variant_part, scope: [[GEN_FN]],\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n // CHECK-SAME: discriminator: [[DISC:![0-9]*]]\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"0\", scope: [[VARIANT]],\n // CHECK-SAME: file: [[FILE:![0-9]*]], line: 14,\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      {{!.*}} = !DICompositeType(tag: DW_TAG_structure_type, name: \"Unresumed\", scope: [[GEN]],\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"1\", scope: [[VARIANT]],\n // CHECK-SAME: file: [[FILE]], line: 18,\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"2\", scope: [[VARIANT]],\n // CHECK-SAME: file: [[FILE]], line: 18,\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"3\", scope: [[VARIANT]],\n // CHECK-SAME: file: [[FILE]], line: 15,\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"4\", scope: [[VARIANT]],\n // CHECK-SAME: file: [[FILE]], line: 17,\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      [[S1:!.*]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"Suspend1\", scope: [[GEN]],\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"s\", scope: [[S1]]\n // CHECK-NOT:  flags: DIFlagArtificial\n // CHECK-SAME: )"}, {"sha": "1beed1c835d977d566d388f019057a1d6722eb25", "filename": "src/test/debuginfo/generator-objects.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/25530538282b932472e7d6740142c970038ec222/src%2Ftest%2Fdebuginfo%2Fgenerator-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25530538282b932472e7d6740142c970038ec222/src%2Ftest%2Fdebuginfo%2Fgenerator-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgenerator-objects.rs?ref=25530538282b932472e7d6740142c970038ec222", "patch": "@@ -1,37 +1,41 @@\n // Require a gdb that can read DW_TAG_variant_part.\n // min-gdb-version: 8.2\n \n+// LLDB without native Rust support cannot read DW_TAG_variant_part,\n+// so it prints nothing for generators. But those tests are kept to\n+// ensure that LLDB won't crash at least (like #57822).\n+\n // compile-flags:-g\n \n // === GDB TESTS ===================================================================================\n \n // gdb-command:run\n // gdb-command:print b\n-// gdb-check:$1 = generator_objects::main::generator-0 {__0: 0x[...], <<variant>>: {__state: 0, 0: generator_objects::main::generator-0::Unresumed, 1: generator_objects::main::generator-0::Returned, 2: generator_objects::main::generator-0::Panicked, 3: generator_objects::main::generator-0::Suspend0 {[...]}, 4: generator_objects::main::generator-0::Suspend1 {[...]}}}\n+// gdb-check:$1 = generator_objects::main::generator-0::Unresumed(0x[...])\n // gdb-command:continue\n // gdb-command:print b\n-// gdb-check:$2 = generator_objects::main::generator-0 {__0: 0x[...], <<variant>>: {__state: 3, 0: generator_objects::main::generator-0::Unresumed, 1: generator_objects::main::generator-0::Returned, 2: generator_objects::main::generator-0::Panicked, 3: generator_objects::main::generator-0::Suspend0 {c: 6, d: 7}, 4: generator_objects::main::generator-0::Suspend1 {[...]}}}\n+// gdb-check:$2 = generator_objects::main::generator-0::Suspend0{c: 6, d: 7, __0: 0x[...]}\n // gdb-command:continue\n // gdb-command:print b\n-// gdb-check:$3 = generator_objects::main::generator-0 {__0: 0x[...], <<variant>>: {__state: 4, 0: generator_objects::main::generator-0::Unresumed, 1: generator_objects::main::generator-0::Returned, 2: generator_objects::main::generator-0::Panicked, 3: generator_objects::main::generator-0::Suspend0 {[...]}, 4: generator_objects::main::generator-0::Suspend1 {c: 7, d: 8}}}\n+// gdb-check:$3 = generator_objects::main::generator-0::Suspend1{c: 7, d: 8, __0: 0x[...]}\n // gdb-command:continue\n // gdb-command:print b\n-// gdb-check:$4 = generator_objects::main::generator-0 {__0: 0x[...], <<variant>>: {__state: 1, 0: generator_objects::main::generator-0::Unresumed, 1: generator_objects::main::generator-0::Returned, 2: generator_objects::main::generator-0::Panicked, 3: generator_objects::main::generator-0::Suspend0 {[...]}, 4: generator_objects::main::generator-0::Suspend1 {[...]}}}\n+// gdb-check:$4 = generator_objects::main::generator-0::Returned(0x[...])\n \n // === LLDB TESTS ==================================================================================\n \n // lldb-command:run\n // lldb-command:print b\n-// lldbg-check:(generator_objects::main::generator-0) $0 = { 0 = 0x[...] }\n+// lldbg-check:(generator_objects::main::generator-0) $0 =\n // lldb-command:continue\n // lldb-command:print b\n-// lldbg-check:(generator_objects::main::generator-0) $1 = { 0 = 0x[...] }\n+// lldbg-check:(generator_objects::main::generator-0) $1 =\n // lldb-command:continue\n // lldb-command:print b\n-// lldbg-check:(generator_objects::main::generator-0) $2 = { 0 = 0x[...] }\n+// lldbg-check:(generator_objects::main::generator-0) $2 =\n // lldb-command:continue\n // lldb-command:print b\n-// lldbg-check:(generator_objects::main::generator-0) $3 = { 0 = 0x[...] }\n+// lldbg-check:(generator_objects::main::generator-0) $3 =\n \n #![feature(omit_gdb_pretty_printer_section, generators, generator_trait)]\n #![omit_gdb_pretty_printer_section]"}, {"sha": "6b2b12edda5d7a710c48862caaed0560b263be0c", "filename": "src/test/debuginfo/issue-57822.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25530538282b932472e7d6740142c970038ec222/src%2Ftest%2Fdebuginfo%2Fissue-57822.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25530538282b932472e7d6740142c970038ec222/src%2Ftest%2Fdebuginfo%2Fissue-57822.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fissue-57822.rs?ref=25530538282b932472e7d6740142c970038ec222", "patch": "@@ -14,7 +14,7 @@\n // gdb-check:$1 = issue_57822::main::closure-1 (issue_57822::main::closure-0 (1))\n \n // gdb-command:print b\n-// gdb-check:$2 = issue_57822::main::generator-3 {__0: issue_57822::main::generator-2 {__0: 2, <<variant>>: {[...]}}, <<variant>>: {[...]}}\n+// gdb-check:$2 = issue_57822::main::generator-3::Unresumed(issue_57822::main::generator-2::Unresumed(2))\n \n // === LLDB TESTS ==================================================================================\n \n@@ -24,7 +24,7 @@\n // lldbg-check:(issue_57822::main::closure-1) $0 = { 0 = { 0 = 1 } }\n \n // lldb-command:print b\n-// lldbg-check:(issue_57822::main::generator-3) $1 = { 0 = { 0 = 2 } }\n+// lldbg-check:(issue_57822::main::generator-3) $1 =\n \n #![feature(omit_gdb_pretty_printer_section, generators, generator_trait)]\n #![omit_gdb_pretty_printer_section]"}]}