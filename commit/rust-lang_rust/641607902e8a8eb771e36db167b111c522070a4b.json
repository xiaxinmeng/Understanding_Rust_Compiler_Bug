{"sha": "641607902e8a8eb771e36db167b111c522070a4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0MTYwNzkwMmU4YThlYjc3MWUzNmRiMTY3YjExMWM1MjIwNzBhNGI=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-10-15T23:07:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-15T23:07:57Z"}, "message": "Rollup merge of #65425 - nnethercote:optimize-BitIter, r=zackmdavis\n\nOptimize `BitIter`\n\nA minor speed improvement.", "tree": {"sha": "52c588d2a022f7595b8f78da0f65e01dce8625f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52c588d2a022f7595b8f78da0f65e01dce8625f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/641607902e8a8eb771e36db167b111c522070a4b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdplFNCRBK7hj4Ov3rIwAAdHIIAD6m8vub3APFmTYtHbdJYe5S\nltXEQcIwQ/SA942EJpwcSd45/rp2D0DFIztJZZfBf0zQiqDupG5eV/pX/tZ4luE7\n8+tBjaAuUkNNW6GUHtEIo0qXj2l1QSGwp1QgHS7+x9JTVkfHWiig43/lrV41v48a\nSLczFE6uD8jTnpbPgOG/ocvxJ46GFWCJ2goju1WBqvGyNdyoJT+H8baYl8NQhrJr\nny2pomy6DgVXVd0gvZXIj8jlT3tfnAAY9ZrDPKiUfg6hKoQ+z4eBabQQh/XWUhGk\nWziwDZcojY7meJ7daSdsmdNSLyKEW01CEVpU8v3vZZ3YZ/kbvXMRfg+mcBYQZu8=\n=zlGf\n-----END PGP SIGNATURE-----\n", "payload": "tree 52c588d2a022f7595b8f78da0f65e01dce8625f4\nparent 2dac8b9176c2c547d0708b53ed6c174cf6cf10b9\nparent 60851b08e523e1a3ab4defc8b6049751b6bf1ad5\nauthor Tyler Mandry <tmandry@gmail.com> 1571180877 -0700\ncommitter GitHub <noreply@github.com> 1571180877 -0700\n\nRollup merge of #65425 - nnethercote:optimize-BitIter, r=zackmdavis\n\nOptimize `BitIter`\n\nA minor speed improvement.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/641607902e8a8eb771e36db167b111c522070a4b", "html_url": "https://github.com/rust-lang/rust/commit/641607902e8a8eb771e36db167b111c522070a4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/641607902e8a8eb771e36db167b111c522070a4b/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2dac8b9176c2c547d0708b53ed6c174cf6cf10b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/2dac8b9176c2c547d0708b53ed6c174cf6cf10b9", "html_url": "https://github.com/rust-lang/rust/commit/2dac8b9176c2c547d0708b53ed6c174cf6cf10b9"}, {"sha": "60851b08e523e1a3ab4defc8b6049751b6bf1ad5", "url": "https://api.github.com/repos/rust-lang/rust/commits/60851b08e523e1a3ab4defc8b6049751b6bf1ad5", "html_url": "https://github.com/rust-lang/rust/commit/60851b08e523e1a3ab4defc8b6049751b6bf1ad5"}], "stats": {"total": 63, "additions": 42, "deletions": 21}, "files": [{"sha": "d8c6e4c33e2faaad6b57a25ebe60846d32ed32f3", "filename": "src/librustc_index/bit_set.rs", "status": "modified", "additions": 42, "deletions": 21, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/641607902e8a8eb771e36db167b111c522070a4b/src%2Flibrustc_index%2Fbit_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641607902e8a8eb771e36db167b111c522070a4b/src%2Flibrustc_index%2Fbit_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_index%2Fbit_set.rs?ref=641607902e8a8eb771e36db167b111c522070a4b", "patch": "@@ -168,11 +168,7 @@ impl<T: Idx> BitSet<T> {\n     /// Iterates over the indices of set bits in a sorted order.\n     #[inline]\n     pub fn iter(&self) -> BitIter<'_, T> {\n-        BitIter {\n-            cur: None,\n-            iter: self.words.iter().enumerate(),\n-            marker: PhantomData,\n-        }\n+        BitIter::new(&self.words)\n     }\n \n     /// Duplicates the set as a hybrid set.\n@@ -291,26 +287,55 @@ impl<T: Idx> ToString for BitSet<T> {\n }\n \n pub struct BitIter<'a, T: Idx> {\n-    cur: Option<(Word, usize)>,\n-    iter: iter::Enumerate<slice::Iter<'a, Word>>,\n+    /// A copy of the current word, but with any already-visited bits cleared.\n+    /// (This lets us use `trailing_zeros()` to find the next set bit.) When it\n+    /// is reduced to 0, we move onto the next word.\n+    word: Word,\n+\n+    /// The offset (measured in bits) of the current word.\n+    offset: usize,\n+\n+    /// Underlying iterator over the words.\n+    iter: slice::Iter<'a, Word>,\n+\n     marker: PhantomData<T>\n }\n \n+impl<'a, T: Idx> BitIter<'a, T> {\n+    #[inline]\n+    fn new(words: &'a [Word]) -> BitIter<'a, T> {\n+        // We initialize `word` and `offset` to degenerate values. On the first\n+        // call to `next()` we will fall through to getting the first word from\n+        // `iter`, which sets `word` to the first word (if there is one) and\n+        // `offset` to 0. Doing it this way saves us from having to maintain\n+        // additional state about whether we have started.\n+        BitIter {\n+            word: 0,\n+            offset: std::usize::MAX - (WORD_BITS - 1),\n+            iter: words.iter(),\n+            marker: PhantomData,\n+        }\n+    }\n+}\n+\n impl<'a, T: Idx> Iterator for BitIter<'a, T> {\n     type Item = T;\n     fn next(&mut self) -> Option<T> {\n         loop {\n-            if let Some((ref mut word, offset)) = self.cur {\n-                let bit_pos = word.trailing_zeros() as usize;\n-                if bit_pos != WORD_BITS {\n-                    let bit = 1 << bit_pos;\n-                    *word ^= bit;\n-                    return Some(T::new(bit_pos + offset))\n-                }\n+            if self.word != 0 {\n+                // Get the position of the next set bit in the current word,\n+                // then clear the bit.\n+                let bit_pos = self.word.trailing_zeros() as usize;\n+                let bit = 1 << bit_pos;\n+                self.word ^= bit;\n+                return Some(T::new(bit_pos + self.offset))\n             }\n \n-            let (i, word) = self.iter.next()?;\n-            self.cur = Some((*word, WORD_BITS * i));\n+            // Move onto the next word. `wrapping_add()` is needed to handle\n+            // the degenerate initial value given to `offset` in `new()`.\n+            let word = self.iter.next()?;\n+            self.word = *word;\n+            self.offset = self.offset.wrapping_add(WORD_BITS);\n         }\n     }\n }\n@@ -851,11 +876,7 @@ impl<R: Idx, C: Idx> BitMatrix<R, C> {\n     pub fn iter(&self, row: R) -> BitIter<'_, C> {\n         assert!(row.index() < self.num_rows);\n         let (start, end) = self.range(row);\n-        BitIter {\n-            cur: None,\n-            iter: self.words[start..end].iter().enumerate(),\n-            marker: PhantomData,\n-        }\n+        BitIter::new(&self.words[start..end])\n     }\n \n     /// Returns the number of elements in `row`."}]}