{"sha": "ed60cf2475cabd3d9ad1afdc03bd6952d99b744c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkNjBjZjI0NzVjYWJkM2Q5YWQxYWZkYzAzYmQ2OTUyZDk5Yjc0NGM=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-09-30T02:07:26Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-03T18:55:18Z"}, "message": "When encountering chained operators use heuristics to recover from bad turbofish", "tree": {"sha": "dee2a035a94709e49d7ba216f036b67070a129fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dee2a035a94709e49d7ba216f036b67070a129fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed60cf2475cabd3d9ad1afdc03bd6952d99b744c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed60cf2475cabd3d9ad1afdc03bd6952d99b744c", "html_url": "https://github.com/rust-lang/rust/commit/ed60cf2475cabd3d9ad1afdc03bd6952d99b744c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed60cf2475cabd3d9ad1afdc03bd6952d99b744c/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2023ac599c38a59f86552089e6791c5a73412d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2023ac599c38a59f86552089e6791c5a73412d3", "html_url": "https://github.com/rust-lang/rust/commit/f2023ac599c38a59f86552089e6791c5a73412d3"}], "stats": {"total": 148, "additions": 121, "deletions": 27}, "files": [{"sha": "0e3d873b252e6999c5a30debc71bd19581c51b65", "filename": "src/libsyntax/parse/diagnostics.rs", "status": "modified", "additions": 88, "deletions": 12, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/ed60cf2475cabd3d9ad1afdc03bd6952d99b744c/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed60cf2475cabd3d9ad1afdc03bd6952d99b744c/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs?ref=ed60cf2475cabd3d9ad1afdc03bd6952d99b744c", "patch": "@@ -543,16 +543,25 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Produces an error if comparison operators are chained (RFC #558).\n-    /// We only need to check the LHS, not the RHS, because all comparison ops\n-    /// have same precedence and are left-associative.\n-    crate fn check_no_chained_comparison(&self, lhs: &Expr, outer_op: &AssocOp) -> PResult<'a, ()> {\n-        debug_assert!(outer_op.is_comparison(),\n-                      \"check_no_chained_comparison: {:?} is not comparison\",\n-                      outer_op);\n+    /// We only need to check the LHS, not the RHS, because all comparison ops have same\n+    /// precedence and are left-associative.\n+    ///\n+    /// This can also be hit if someone incorrectly writes `foo<bar>()` when they should have used\n+    /// the turbofish syntax. We attempt some heuristic recovery if that is the case.\n+    crate fn check_no_chained_comparison(\n+        &mut self,\n+        lhs: &Expr,\n+        outer_op: &AssocOp,\n+    ) -> PResult<'a, Option<P<Expr>>> {\n+        debug_assert!(\n+            outer_op.is_comparison(),\n+            \"check_no_chained_comparison: {:?} is not comparison\",\n+            outer_op,\n+        );\n         match lhs.kind {\n             ExprKind::Binary(op, _, _) if op.node.is_comparison() => {\n                 // Respan to include both operators.\n-                let op_span = op.span.to(self.token.span);\n+                let op_span = op.span.to(self.prev_span);\n                 let mut err = self.struct_span_err(\n                     op_span,\n                     \"chained comparison operators require parentheses\",\n@@ -561,17 +570,84 @@ impl<'a> Parser<'a> {\n                     *outer_op == AssocOp::Less ||  // Include `<` to provide this recommendation\n                     *outer_op == AssocOp::Greater  // even in a case like the following:\n                 {                                  //     Foo<Bar<Baz<Qux, ()>>>\n-                    err.help(\n-                        \"use `::<...>` instead of `<...>` if you meant to specify type arguments\");\n-                    err.help(\"or use `(...)` if you meant to specify fn arguments\");\n-                    // These cases cause too many knock-down errors, bail out (#61329).\n+                    let msg = \"use `::<...>` instead of `<...>` if you meant to specify type \\\n+                               arguments\";\n+                    if *outer_op == AssocOp::Less {\n+                    // if self.look_ahead(1, |t| t.kind == token::Lt || t.kind == token::ModSep) {\n+                        let snapshot = self.clone();\n+                        self.bump();\n+                        // So far we have parsed `foo<bar<`\n+                        let mut acc = 1;\n+                        while acc > 0 {\n+                            match &self.token.kind {\n+                                token::Lt => {\n+                                    acc += 1;\n+                                }\n+                                token::Gt => {\n+                                    acc -= 1;\n+                                }\n+                                token::BinOp(token::Shr) => {\n+                                    acc -= 2;\n+                                }\n+                                token::Eof => {\n+                                    break;\n+                                }\n+                                _ => {}\n+                            }\n+                            self.bump();\n+                        }\n+                        if self.token.kind != token::OpenDelim(token::Paren) {\n+                            mem::replace(self, snapshot.clone());\n+                        }\n+                    }\n+                    if self.token.kind == token::OpenDelim(token::Paren) {\n+                        err.span_suggestion(\n+                            op_span.shrink_to_lo(),\n+                            msg,\n+                            \"::\".to_string(),\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                        let snapshot = self.clone();\n+                        self.bump();\n+                        let mut acc = 1;\n+                        while acc > 0 {\n+                            match &self.token.kind {\n+                                token::OpenDelim(token::Paren) => {\n+                                    acc += 1;\n+                                }\n+                                token::CloseDelim(token::Paren) => {\n+                                    acc -= 1;\n+                                }\n+                                token::Eof => {\n+                                    break;\n+                                }\n+                                _ => {}\n+                            }\n+                            self.bump();\n+                        }\n+                        if self.token.kind == token::Eof {\n+                            mem::replace(self, snapshot);\n+                            return Err(err);\n+                        } else {\n+                            err.emit();\n+                            return Ok(Some(self.mk_expr(\n+                                lhs.span.to(self.prev_span),\n+                                ExprKind::Err,\n+                                ThinVec::new(),\n+                            )));\n+                        }\n+                    } else {\n+                        err.help(msg);\n+                        err.help(\"or use `(...)` if you meant to specify fn arguments\");\n+                        // These cases cause too many knock-down errors, bail out (#61329).\n+                    }\n                     return Err(err);\n                 }\n                 err.emit();\n             }\n             _ => {}\n         }\n-        Ok(())\n+        Ok(None)\n     }\n \n     crate fn maybe_report_ambiguous_plus("}, {"sha": "b459782d237c7c6ecbeadc84db10eef5e203fc1a", "filename": "src/libsyntax/parse/parser/expr.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed60cf2475cabd3d9ad1afdc03bd6952d99b744c/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed60cf2475cabd3d9ad1afdc03bd6952d99b744c/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs?ref=ed60cf2475cabd3d9ad1afdc03bd6952d99b744c", "patch": "@@ -238,7 +238,9 @@ impl<'a> Parser<'a> {\n \n             self.bump();\n             if op.is_comparison() {\n-                self.check_no_chained_comparison(&lhs, &op)?;\n+                if let Some(expr) = self.check_no_chained_comparison(&lhs, &op)? {\n+                    return Ok(expr);\n+                }\n             }\n             // Special cases:\n             if op == AssocOp::As {"}, {"sha": "d0448cc265c31f120310eb3281502ee7a8c3c3cc", "filename": "src/test/ui/did_you_mean/issue-40396.stderr", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ed60cf2475cabd3d9ad1afdc03bd6952d99b744c/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed60cf2475cabd3d9ad1afdc03bd6952d99b744c/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.stderr?ref=ed60cf2475cabd3d9ad1afdc03bd6952d99b744c", "patch": "@@ -2,16 +2,17 @@ error: chained comparison operators require parentheses\n   --> $DIR/issue-40396.rs:2:20\n    |\n LL |     (0..13).collect<Vec<i32>>();\n-   |                    ^^^^^^^^\n+   |                    ^^^^^\n+help: use `::<...>` instead of `<...>` if you meant to specify type arguments\n    |\n-   = help: use `::<...>` instead of `<...>` if you meant to specify type arguments\n-   = help: or use `(...)` if you meant to specify fn arguments\n+LL |     (0..13).collect::<Vec<i32>>();\n+   |                    ^^\n \n error: chained comparison operators require parentheses\n   --> $DIR/issue-40396.rs:7:8\n    |\n LL |     Vec<i32>::new();\n-   |        ^^^^^^^\n+   |        ^^^^^\n    |\n    = help: use `::<...>` instead of `<...>` if you meant to specify type arguments\n    = help: or use `(...)` if you meant to specify fn arguments\n@@ -20,10 +21,11 @@ error: chained comparison operators require parentheses\n   --> $DIR/issue-40396.rs:12:20\n    |\n LL |     (0..13).collect<Vec<i32>();\n-   |                    ^^^^^^^^\n+   |                    ^^^^^\n+help: use `::<...>` instead of `<...>` if you meant to specify type arguments\n    |\n-   = help: use `::<...>` instead of `<...>` if you meant to specify type arguments\n-   = help: or use `(...)` if you meant to specify fn arguments\n+LL |     (0..13).collect::<Vec<i32>();\n+   |                    ^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "11839938cb0227e064077a4b5fdebb2cbb883d02", "filename": "src/test/ui/parser/require-parens-for-chained-comparison.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ed60cf2475cabd3d9ad1afdc03bd6952d99b744c/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed60cf2475cabd3d9ad1afdc03bd6952d99b744c/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.rs?ref=ed60cf2475cabd3d9ad1afdc03bd6952d99b744c", "patch": "@@ -13,5 +13,8 @@ fn main() {\n     f<X>();\n     //~^ ERROR chained comparison operators require parentheses\n     //~| HELP: use `::<...>` instead of `<...>`\n-    //~| HELP: or use `(...)`\n+\n+    f<Result<Option<X>, Option<Option<X>>>(1, 2);\n+    //~^ ERROR chained comparison operators require parentheses\n+    //~| HELP: use `::<...>` instead of `<...>`\n }"}, {"sha": "02fb56a7f9be267bbc2d75b768b4943fc545c179", "filename": "src/test/ui/parser/require-parens-for-chained-comparison.stderr", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ed60cf2475cabd3d9ad1afdc03bd6952d99b744c/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed60cf2475cabd3d9ad1afdc03bd6952d99b744c/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.stderr?ref=ed60cf2475cabd3d9ad1afdc03bd6952d99b744c", "patch": "@@ -2,22 +2,33 @@ error: chained comparison operators require parentheses\n   --> $DIR/require-parens-for-chained-comparison.rs:5:11\n    |\n LL |     false == false == false;\n-   |           ^^^^^^^^^^^^^^^^^\n+   |           ^^^^^^^^^^^\n \n error: chained comparison operators require parentheses\n   --> $DIR/require-parens-for-chained-comparison.rs:8:11\n    |\n LL |     false == 0 < 2;\n-   |           ^^^^^^^^\n+   |           ^^^^^^\n \n error: chained comparison operators require parentheses\n   --> $DIR/require-parens-for-chained-comparison.rs:13:6\n    |\n LL |     f<X>();\n-   |      ^^^^\n+   |      ^^^\n+help: use `::<...>` instead of `<...>` if you meant to specify type arguments\n    |\n-   = help: use `::<...>` instead of `<...>` if you meant to specify type arguments\n-   = help: or use `(...)` if you meant to specify fn arguments\n+LL |     f::<X>();\n+   |      ^^\n+\n+error: chained comparison operators require parentheses\n+  --> $DIR/require-parens-for-chained-comparison.rs:17:6\n+   |\n+LL |     f<Result<Option<X>, Option<Option<X>>>(1, 2);\n+   |      ^^^^^^^^\n+help: use `::<...>` instead of `<...>` if you meant to specify type arguments\n+   |\n+LL |     f::<Result<Option<X>, Option<Option<X>>>(1, 2);\n+   |      ^^\n \n error[E0308]: mismatched types\n   --> $DIR/require-parens-for-chained-comparison.rs:8:14\n@@ -37,6 +48,6 @@ LL |     false == 0 < 2;\n    = note: expected type `bool`\n               found type `{integer}`\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}]}