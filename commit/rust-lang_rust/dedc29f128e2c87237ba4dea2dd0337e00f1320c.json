{"sha": "dedc29f128e2c87237ba4dea2dd0337e00f1320c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlZGMyOWYxMjhlMmM4NzIzN2JhNGRlYTJkZDAzMzdlMDBmMTMyMGM=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-12-30T05:31:24Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-12-30T05:55:49Z"}, "message": "rustdoc: Unify the handling of the hidden example lines.", "tree": {"sha": "bd87f4cb9af3a6259cb802045469b7a156205aa8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd87f4cb9af3a6259cb802045469b7a156205aa8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dedc29f128e2c87237ba4dea2dd0337e00f1320c", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dedc29f128e2c87237ba4dea2dd0337e00f1320c", "html_url": "https://github.com/rust-lang/rust/commit/dedc29f128e2c87237ba4dea2dd0337e00f1320c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dedc29f128e2c87237ba4dea2dd0337e00f1320c/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "582ad8ffc28429714b84d2dd8f01c780afb00b15", "url": "https://api.github.com/repos/rust-lang/rust/commits/582ad8ffc28429714b84d2dd8f01c780afb00b15", "html_url": "https://github.com/rust-lang/rust/commit/582ad8ffc28429714b84d2dd8f01c780afb00b15"}], "stats": {"total": 21, "additions": 15, "deletions": 6}, "files": [{"sha": "5da087eedbd58164647d0477e8c094755e149a88", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/dedc29f128e2c87237ba4dea2dd0337e00f1320c/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedc29f128e2c87237ba4dea2dd0337e00f1320c/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=dedc29f128e2c87237ba4dea2dd0337e00f1320c", "patch": "@@ -94,15 +94,26 @@ extern {\n \n }\n \n+/// Returns Some(code) if `s` is a line that should be stripped from\n+/// documentation but used in example code. `code` is the portion of\n+/// `s` that should be used in tests. (None for lines that should be\n+/// left as-is.)\n+fn stripped_filtered_line<'a>(s: &'a str) -> Option<&'a str> {\n+    let trimmed = s.trim();\n+    if trimmed.starts_with(\"# \") {\n+        Some(trimmed.slice_from(2))\n+    } else {\n+        None\n+    }\n+}\n+\n pub fn render(w: &mut io::Writer, s: &str) {\n     extern fn block(ob: *buf, text: *buf, lang: *buf, opaque: *libc::c_void) {\n         unsafe {\n             let my_opaque: &my_opaque = cast::transmute(opaque);\n             vec::raw::buf_as_slice((*text).data, (*text).size as uint, |text| {\n                 let text = str::from_utf8(text);\n-                let mut lines = text.lines().filter(|l| {\n-                    !l.trim().starts_with(\"# \")\n-                });\n+                let mut lines = text.lines().filter(|l| stripped_filtered_line(*l).is_none());\n                 let text = lines.to_owned_vec().connect(\"\\n\");\n \n                 let buf = buf {\n@@ -169,9 +180,7 @@ pub fn find_testable_code(doc: &str, tests: &mut ::test::Collector) {\n             vec::raw::buf_as_slice((*text).data, (*text).size as uint, |text| {\n                 let tests: &mut ::test::Collector = intrinsics::transmute(opaque);\n                 let text = str::from_utf8(text);\n-                let mut lines = text.lines().map(|l| {\n-                            if l.starts_with(\"# \") {l.slice_from(2)} else {l}\n-                        });\n+                let mut lines = text.lines().map(|l| stripped_filtered_line(l).unwrap_or(l));\n                 let text = lines.to_owned_vec().connect(\"\\n\");\n                 tests.add_test(text, ignore, shouldfail);\n             })"}]}