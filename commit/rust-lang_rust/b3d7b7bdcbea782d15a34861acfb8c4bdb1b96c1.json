{"sha": "b3d7b7bdcbea782d15a34861acfb8c4bdb1b96c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzZDdiN2JkY2JlYTc4MmQxNWEzNDg2MWFjZmI4YzRiZGIxYjk2YzE=", "commit": {"author": {"name": "DPC", "email": "dylan.dpc@gmail.com", "date": "2020-08-30T12:43:52Z"}, "committer": {"name": "DPC", "email": "dylan.dpc@gmail.com", "date": "2020-08-30T12:43:52Z"}, "message": "update fixmes", "tree": {"sha": "da2ba88a33e1fb2d2c5ad3fd9f55cfbf80abb655", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da2ba88a33e1fb2d2c5ad3fd9f55cfbf80abb655"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3d7b7bdcbea782d15a34861acfb8c4bdb1b96c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3d7b7bdcbea782d15a34861acfb8c4bdb1b96c1", "html_url": "https://github.com/rust-lang/rust/commit/b3d7b7bdcbea782d15a34861acfb8c4bdb1b96c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3d7b7bdcbea782d15a34861acfb8c4bdb1b96c1/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea800d529a8d7c1b4e9de639637fce971a458c4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea800d529a8d7c1b4e9de639637fce971a458c4f", "html_url": "https://github.com/rust-lang/rust/commit/ea800d529a8d7c1b4e9de639637fce971a458c4f"}], "stats": {"total": 27, "additions": 13, "deletions": 14}, "files": [{"sha": "7f9ab5357d6973d74c945ce434cee9319d6aaf4c", "filename": "library/core/src/fmt/float.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b3d7b7bdcbea782d15a34861acfb8c4bdb1b96c1/library%2Fcore%2Fsrc%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3d7b7bdcbea782d15a34861acfb8c4bdb1b96c1/library%2Fcore%2Fsrc%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Ffloat.rs?ref=b3d7b7bdcbea782d15a34861acfb8c4bdb1b96c1", "patch": "@@ -14,11 +14,11 @@ fn float_to_decimal_common_exact<T>(\n where\n     T: flt2dec::DecodableFloat,\n {\n-    // SAFETY: Possible undefined behavior, see FIXME(#53491)\n+    // SAFETY: Possible undefined behavior, see FIXME(#76092)\n     unsafe {\n         let mut buf = MaybeUninit::<[u8; 1024]>::uninit(); // enough for f32 and f64\n         let mut parts = MaybeUninit::<[flt2dec::Part<'_>; 4]>::uninit();\n-        // FIXME(#53491): This is calling `get_mut` on an uninitialized\n+        // FIXME(#76092): This is calling `assume_init_mut` on an uninitialized\n         // `MaybeUninit` (here and elsewhere in this file). Revisit this once\n         // we decided whether that is valid or not.\n         // We can do this only because we are libstd and coupled to the compiler.\n@@ -47,12 +47,12 @@ fn float_to_decimal_common_shortest<T>(\n where\n     T: flt2dec::DecodableFloat,\n {\n-    // SAFETY: Possible undefined behavior, see FIXME(#53491)\n+    // SAFETY: Possible undefined behavior, see FIXME(#76092)\n     unsafe {\n         // enough for f32 and f64\n         let mut buf = MaybeUninit::<[u8; flt2dec::MAX_SIG_DIGITS]>::uninit();\n         let mut parts = MaybeUninit::<[flt2dec::Part<'_>; 4]>::uninit();\n-        // FIXME(#53491)\n+        // FIXME(#76092)\n         let formatted = flt2dec::to_shortest_str(\n             flt2dec::strategy::grisu::format_shortest,\n             *num,\n@@ -103,11 +103,11 @@ fn float_to_exponential_common_exact<T>(\n where\n     T: flt2dec::DecodableFloat,\n {\n-    // SAFETY: Possible undefined behavior, see FIXME(#53491)\n+    // SAFETY: Possible undefined behavior, see FIXME(#76092)\n     unsafe {\n         let mut buf = MaybeUninit::<[u8; 1024]>::uninit(); // enough for f32 and f64\n         let mut parts = MaybeUninit::<[flt2dec::Part<'_>; 6]>::uninit();\n-        // FIXME(#53491)\n+        // FIXME(#76092)\n         let formatted = flt2dec::to_exact_exp_str(\n             flt2dec::strategy::grisu::format_exact,\n             *num,\n@@ -133,12 +133,12 @@ fn float_to_exponential_common_shortest<T>(\n where\n     T: flt2dec::DecodableFloat,\n {\n-    // SAFETY: Possible undefined behavior, see FIXME(#53491)\n+    // SAFETY: Possible undefined behavior, see FIXME(#76092)\n     unsafe {\n         // enough for f32 and f64\n         let mut buf = MaybeUninit::<[u8; flt2dec::MAX_SIG_DIGITS]>::uninit();\n         let mut parts = MaybeUninit::<[flt2dec::Part<'_>; 6]>::uninit();\n-        // FIXME(#53491)\n+        // FIXME(#76092)\n         let formatted = flt2dec::to_shortest_exp_str(\n             flt2dec::strategy::grisu::format_shortest,\n             *num,"}, {"sha": "421b16baa4cacb9524afc7f437ebd847cd57a0b6", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b3d7b7bdcbea782d15a34861acfb8c4bdb1b96c1/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3d7b7bdcbea782d15a34861acfb8c4bdb1b96c1/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=b3d7b7bdcbea782d15a34861acfb8c4bdb1b96c1", "patch": "@@ -167,8 +167,7 @@ use crate::mem::ManuallyDrop;\n ///\n /// // For each item in the array, drop if we allocated it.\n /// for elem in &mut data[0..data_len] {\n-///     unsafe { ptr::drop_in_place(elem.\n-/// ptr()); }\n+///     unsafe { ptr::drop_in_place(elem.ptr()); }\n /// }\n /// ```\n ///\n@@ -718,7 +717,7 @@ impl<T> MaybeUninit<T> {\n     /// {\n     ///     let mut buffer = MaybeUninit::<[u8; 64]>::uninit();\n     ///     reader.read_exact(unsafe { buffer.assume_init_mut() })?;\n-    ///                             // ^^^^^^^^^^^^^^^^\n+    ///                             // ^^^^^^^^^^^^^^^^^^^^^^^^\n     ///                             // (mutable) reference to uninitialized memory!\n     ///                             // This is undefined behavior.\n     ///     Ok(unsafe { buffer.assume_init() })\n@@ -739,11 +738,11 @@ impl<T> MaybeUninit<T> {\n     /// let foo: Foo = unsafe {\n     ///     let mut foo = MaybeUninit::<Foo>::uninit();\n     ///     ptr::write(&mut foo.assume_init_mut().a as *mut u32, 1337);\n-    ///                  // ^^^^^^^^^^^^^\n+    ///                  // ^^^^^^^^^^^^^^^^^^^^^\n     ///                  // (mutable) reference to uninitialized memory!\n     ///                  // This is undefined behavior.\n     ///     ptr::write(&mut foo.assume_init_mut().b as *mut u8, 42);\n-    ///                  // ^^^^^^^^^^^^^\n+    ///                  // ^^^^^^^^^^^^^^^^^^^^^\n     ///                  // (mutable) reference to uninitialized memory!\n     ///                  // This is undefined behavior.\n     ///     foo.assume_init()"}, {"sha": "49eabeee2156f21f520c237074d9538e98b74a7c", "filename": "library/std/src/io/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3d7b7bdcbea782d15a34861acfb8c4bdb1b96c1/library%2Fstd%2Fsrc%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3d7b7bdcbea782d15a34861acfb8c4bdb1b96c1/library%2Fstd%2Fsrc%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Futil.rs?ref=b3d7b7bdcbea782d15a34861acfb8c4bdb1b96c1", "patch": "@@ -49,7 +49,7 @@ where\n     W: Write,\n {\n     let mut buf = MaybeUninit::<[u8; super::DEFAULT_BUF_SIZE]>::uninit();\n-    // FIXME(#53491): This is calling `get_mut` and `get_ref` on an uninitialized\n+    // FIXME(#76092): This is calling `get_mut` and `get_ref` on an uninitialized\n     // `MaybeUninit`. Revisit this once we decided whether that is valid or not.\n     // This is still technically undefined behavior due to creating a reference\n     // to uninitialized data, but within libstd we can rely on more guarantees"}]}