{"sha": "c9cf92226ca3e6fa2372aa549e9593345be906a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5Y2Y5MjIyNmNhM2U2ZmEyMzcyYWE1NDllOTU5MzM0NWJlOTA2YTY=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-02-25T13:33:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-25T13:33:44Z"}, "message": "Rollup merge of #75807 - jyn514:num-intra-link, r=poliorcetics\n\nConvert core/num/mod.rs to intra-doc links\n\nHelps with #75080.\nThis can't convert the associated constants `MAX` and `MIN` until #74489 is merged.\n\nr? `@poliorcetics`", "tree": {"sha": "36ecd692fc34ee0c359141f7b5e02cd470b0ce68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36ecd692fc34ee0c359141f7b5e02cd470b0ce68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9cf92226ca3e6fa2372aa549e9593345be906a6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgN6c4CRBK7hj4Ov3rIwAAdHIIAJAoYtOebJMYQA0uGBSBBTzC\nz62GwKoiomCgCJpPKFoBdErllLFyHFLdhvHke/R1Et7uxc0QaJ4nH5DltmzR+QbY\n4FFYLdbaB/KzCOAHrsfDNTKsnhhddTxQLy+wd7YRQSUo7C9gP5WP5c92rAy0vP3q\n/wYiqpqpTl++2xWJnb4qI1Eyz8XRQGTHONa1aXIKxhHqw2DXK2ntnl4gUGaMlVXQ\nCMnucnckrGQeh+T9afjFHjjBFcmcEv1IQm7wNut0wmBRJ8ueYjFUn1ypQfzxHyo1\nCnZcWSnV+sLXg1SPL1WSttbJ7IQKbdij/cjoviXHPuGDF/LG17kB++HAdLr+i2Y=\n=4EGG\n-----END PGP SIGNATURE-----\n", "payload": "tree 36ecd692fc34ee0c359141f7b5e02cd470b0ce68\nparent 89d32eb1ea44b3d739feb3c2a77adbba1e39b8e6\nparent ea3118ca0dae57e45da3fd947efd7e2e38f92307\nauthor Dylan DPC <dylan.dpc@gmail.com> 1614260024 +0100\ncommitter GitHub <noreply@github.com> 1614260024 +0100\n\nRollup merge of #75807 - jyn514:num-intra-link, r=poliorcetics\n\nConvert core/num/mod.rs to intra-doc links\n\nHelps with #75080.\nThis can't convert the associated constants `MAX` and `MIN` until #74489 is merged.\n\nr? `@poliorcetics`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9cf92226ca3e6fa2372aa549e9593345be906a6", "html_url": "https://github.com/rust-lang/rust/commit/c9cf92226ca3e6fa2372aa549e9593345be906a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9cf92226ca3e6fa2372aa549e9593345be906a6/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89d32eb1ea44b3d739feb3c2a77adbba1e39b8e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/89d32eb1ea44b3d739feb3c2a77adbba1e39b8e6", "html_url": "https://github.com/rust-lang/rust/commit/89d32eb1ea44b3d739feb3c2a77adbba1e39b8e6"}, {"sha": "ea3118ca0dae57e45da3fd947efd7e2e38f92307", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea3118ca0dae57e45da3fd947efd7e2e38f92307", "html_url": "https://github.com/rust-lang/rust/commit/ea3118ca0dae57e45da3fd947efd7e2e38f92307"}], "stats": {"total": 76, "additions": 34, "deletions": 42}, "files": [{"sha": "e2cc8faf8547d18157550b5621440060e38933fe", "filename": "library/core/src/num/error.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c9cf92226ca3e6fa2372aa549e9593345be906a6/library%2Fcore%2Fsrc%2Fnum%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9cf92226ca3e6fa2372aa549e9593345be906a6/library%2Fcore%2Fsrc%2Fnum%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ferror.rs?ref=c9cf92226ca3e6fa2372aa549e9593345be906a6", "patch": "@@ -54,10 +54,7 @@ impl From<!> for TryFromIntError {\n ///\n /// Among other causes, `ParseIntError` can be thrown because of leading or trailing whitespace\n /// in the string e.g., when it is obtained from the standard input.\n-/// Using the [`str.trim()`] method ensures that no whitespace remains before parsing.\n-///\n-/// [`str.trim()`]: ../../std/primitive.str.html#method.trim\n-/// [`i8::from_str_radix`]: ../../std/primitive.i8.html#method.from_str_radix\n+/// Using the [`str::trim()`] method ensures that no whitespace remains before parsing.\n ///\n /// # Example\n ///"}, {"sha": "80cfb5a0e3aeb2b519735cf0b439d7bb3be6f07e", "filename": "library/core/src/num/f32.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c9cf92226ca3e6fa2372aa549e9593345be906a6/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9cf92226ca3e6fa2372aa549e9593345be906a6/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs?ref=c9cf92226ca3e6fa2372aa549e9593345be906a6", "patch": "@@ -18,7 +18,7 @@ use crate::mem;\n use crate::num::FpCategory;\n \n /// The radix or base of the internal representation of `f32`.\n-/// Use [`f32::RADIX`](../../std/primitive.f32.html#associatedconstant.RADIX) instead.\n+/// Use [`f32::RADIX`] instead.\n ///\n /// # Examples\n ///\n@@ -832,8 +832,8 @@ impl f32 {\n     /// As the target platform's native endianness is used, portable code\n     /// should use [`to_be_bytes`] or [`to_le_bytes`], as appropriate, instead.\n     ///\n-    /// [`to_be_bytes`]: #method.to_be_bytes\n-    /// [`to_le_bytes`]: #method.to_le_bytes\n+    /// [`to_be_bytes`]: f32::to_be_bytes\n+    /// [`to_le_bytes`]: f32::to_le_bytes\n     ///\n     /// # Examples\n     ///\n@@ -860,7 +860,7 @@ impl f32 {\n     ///\n     /// [`to_ne_bytes`] should be preferred over this whenever possible.\n     ///\n-    /// [`to_ne_bytes`]: #method.to_ne_bytes\n+    /// [`to_ne_bytes`]: f32::to_ne_bytes\n     ///\n     /// # Examples\n     ///\n@@ -920,8 +920,8 @@ impl f32 {\n     /// likely wants to use [`from_be_bytes`] or [`from_le_bytes`], as\n     /// appropriate instead.\n     ///\n-    /// [`from_be_bytes`]: #method.from_be_bytes\n-    /// [`from_le_bytes`]: #method.from_le_bytes\n+    /// [`from_be_bytes`]: f32::from_be_bytes\n+    /// [`from_le_bytes`]: f32::from_le_bytes\n     ///\n     /// # Examples\n     ///"}, {"sha": "e365e1b21df10df0c648589f19e2c3b9c80fc1fd", "filename": "library/core/src/num/f64.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c9cf92226ca3e6fa2372aa549e9593345be906a6/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9cf92226ca3e6fa2372aa549e9593345be906a6/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs?ref=c9cf92226ca3e6fa2372aa549e9593345be906a6", "patch": "@@ -846,8 +846,8 @@ impl f64 {\n     /// As the target platform's native endianness is used, portable code\n     /// should use [`to_be_bytes`] or [`to_le_bytes`], as appropriate, instead.\n     ///\n-    /// [`to_be_bytes`]: #method.to_be_bytes\n-    /// [`to_le_bytes`]: #method.to_le_bytes\n+    /// [`to_be_bytes`]: f64::to_be_bytes\n+    /// [`to_le_bytes`]: f64::to_le_bytes\n     ///\n     /// # Examples\n     ///\n@@ -874,7 +874,7 @@ impl f64 {\n     ///\n     /// [`to_ne_bytes`] should be preferred over this whenever possible.\n     ///\n-    /// [`to_ne_bytes`]: #method.to_ne_bytes\n+    /// [`to_ne_bytes`]: f64::to_ne_bytes\n     ///\n     /// # Examples\n     ///\n@@ -934,8 +934,8 @@ impl f64 {\n     /// likely wants to use [`from_be_bytes`] or [`from_le_bytes`], as\n     /// appropriate instead.\n     ///\n-    /// [`from_be_bytes`]: #method.from_be_bytes\n-    /// [`from_le_bytes`]: #method.from_le_bytes\n+    /// [`from_be_bytes`]: f64::from_be_bytes\n+    /// [`from_le_bytes`]: f64::from_le_bytes\n     ///\n     /// # Examples\n     ///"}, {"sha": "ce9dca39d0ea4f7d7099d5cd143b2ae1f6333d61", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c9cf92226ca3e6fa2372aa549e9593345be906a6/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9cf92226ca3e6fa2372aa549e9593345be906a6/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=c9cf92226ca3e6fa2372aa549e9593345be906a6", "patch": "@@ -1067,7 +1067,7 @@ macro_rules! int_impl {\n         ///\n         /// Note that this is *not* the same as a rotate-left; the RHS of a wrapping shift-left is restricted to\n         /// the range of the type, rather than the bits shifted out of the LHS being returned to the other end.\n-        /// The primitive integer types all implement a [`rotate_left`](#method.rotate_left) function,\n+        /// The primitive integer types all implement a [`rotate_left`](Self::rotate_left) function,\n         /// which may be what you want instead.\n         ///\n         /// # Examples\n@@ -1096,7 +1096,7 @@ macro_rules! int_impl {\n         ///\n         /// Note that this is *not* the same as a rotate-right; the RHS of a wrapping shift-right is restricted\n         /// to the range of the type, rather than the bits shifted out of the LHS being returned to the other\n-        /// end. The primitive integer types all implement a [`rotate_right`](#method.rotate_right) function,\n+        /// end. The primitive integer types all implement a [`rotate_right`](Self::rotate_right) function,\n         /// which may be what you want instead.\n         ///\n         /// # Examples\n@@ -1812,8 +1812,8 @@ macro_rules! int_impl {\n         ///\n         #[doc = $to_xe_bytes_doc]\n         ///\n-        /// [`to_be_bytes`]: #method.to_be_bytes\n-        /// [`to_le_bytes`]: #method.to_le_bytes\n+        /// [`to_be_bytes`]: Self::to_be_bytes\n+        /// [`to_le_bytes`]: Self::to_le_bytes\n         ///\n         /// # Examples\n         ///\n@@ -1845,7 +1845,7 @@ macro_rules! int_impl {\n         ///\n         /// [`to_ne_bytes`] should be preferred over this whenever possible.\n         ///\n-        /// [`to_ne_bytes`]: #method.to_ne_bytes\n+        /// [`to_ne_bytes`]: Self::to_ne_bytes\n         ///\n         /// # Examples\n         ///\n@@ -1937,8 +1937,8 @@ macro_rules! int_impl {\n         /// likely wants to use [`from_be_bytes`] or [`from_le_bytes`], as\n         /// appropriate instead.\n         ///\n-        /// [`from_be_bytes`]: #method.from_be_bytes\n-        /// [`from_le_bytes`]: #method.from_le_bytes\n+        /// [`from_be_bytes`]: Self::from_be_bytes\n+        /// [`from_le_bytes`]: Self::from_le_bytes\n         ///\n         #[doc = $to_xe_bytes_doc]\n         ///\n@@ -1976,7 +1976,7 @@ macro_rules! int_impl {\n         }\n \n         /// New code should prefer to use\n-        #[doc = concat!(\"[`\", stringify!($SelfT), \"::MIN\", \"`](#associatedconstant.MIN).\")]\n+        #[doc = concat!(\"[`\", stringify!($SelfT), \"::MIN\", \"`] instead.\")]\n         ///\n         /// Returns the smallest value that can be represented by this integer type.\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1989,7 +1989,7 @@ macro_rules! int_impl {\n         }\n \n         /// New code should prefer to use\n-        #[doc = concat!(\"[`\", stringify!($SelfT), \"::MAX\", \"`](#associatedconstant.MAX).\")]\n+        #[doc = concat!(\"[`\", stringify!($SelfT), \"::MAX\", \"`] instead.\")]\n         ///\n         /// Returns the largest value that can be represented by this integer type.\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "272da6e1eb0f91293ab8732054a9cfcc1a1d7c83", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c9cf92226ca3e6fa2372aa549e9593345be906a6/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9cf92226ca3e6fa2372aa549e9593345be906a6/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=c9cf92226ca3e6fa2372aa549e9593345be906a6", "patch": "@@ -193,7 +193,7 @@ impl u8 {\n     /// assert_eq!(65, lowercase_a.to_ascii_uppercase());\n     /// ```\n     ///\n-    /// [`make_ascii_uppercase`]: #method.make_ascii_uppercase\n+    /// [`make_ascii_uppercase`]: Self::make_ascii_uppercase\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn to_ascii_uppercase(&self) -> u8 {\n@@ -216,7 +216,7 @@ impl u8 {\n     /// assert_eq!(97, uppercase_a.to_ascii_lowercase());\n     /// ```\n     ///\n-    /// [`make_ascii_lowercase`]: #method.make_ascii_lowercase\n+    /// [`make_ascii_lowercase`]: Self::make_ascii_lowercase\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn to_ascii_lowercase(&self) -> u8 {\n@@ -266,7 +266,7 @@ impl u8 {\n     /// assert_eq!(b'A', byte);\n     /// ```\n     ///\n-    /// [`to_ascii_uppercase`]: #method.to_ascii_uppercase\n+    /// [`to_ascii_uppercase`]: Self::to_ascii_uppercase\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn make_ascii_uppercase(&mut self) {\n@@ -291,7 +291,7 @@ impl u8 {\n     /// assert_eq!(b'a', byte);\n     /// ```\n     ///\n-    /// [`to_ascii_lowercase`]: #method.to_ascii_lowercase\n+    /// [`to_ascii_lowercase`]: Self::to_ascii_lowercase\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn make_ascii_lowercase(&mut self) {\n@@ -723,9 +723,6 @@ impl usize {\n /// This `enum` is used as the return type for [`f32::classify`] and [`f64::classify`]. See\n /// their documentation for more.\n ///\n-/// [`f32::classify`]: ../../std/primitive.f32.html#method.classify\n-/// [`f64::classify`]: ../../std/primitive.f64.html#method.classify\n-///\n /// # Examples\n ///\n /// ```"}, {"sha": "7393e7f923e1fdf5d9874a0610f8884814fc6f31", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c9cf92226ca3e6fa2372aa549e9593345be906a6/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9cf92226ca3e6fa2372aa549e9593345be906a6/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=c9cf92226ca3e6fa2372aa549e9593345be906a6", "patch": "@@ -994,7 +994,7 @@ macro_rules! uint_impl {\n         /// RHS of a wrapping shift-left is restricted to the range\n         /// of the type, rather than the bits shifted out of the LHS\n         /// being returned to the other end. The primitive integer\n-        /// types all implement a [`rotate_left`](#method.rotate_left) function,\n+        /// types all implement a [`rotate_left`](Self::rotate_left) function,\n         /// which may be what you want instead.\n         ///\n         /// # Examples\n@@ -1026,7 +1026,7 @@ macro_rules! uint_impl {\n         /// RHS of a wrapping shift-right is restricted to the range\n         /// of the type, rather than the bits shifted out of the LHS\n         /// being returned to the other end. The primitive integer\n-        /// types all implement a [`rotate_right`](#method.rotate_right) function,\n+        /// types all implement a [`rotate_right`](Self::rotate_right) function,\n         /// which may be what you want instead.\n         ///\n         /// # Examples\n@@ -1642,8 +1642,8 @@ macro_rules! uint_impl {\n         ///\n         #[doc = $to_xe_bytes_doc]\n         ///\n-        /// [`to_be_bytes`]: #method.to_be_bytes\n-        /// [`to_le_bytes`]: #method.to_le_bytes\n+        /// [`to_be_bytes`]: Self::to_be_bytes\n+        /// [`to_le_bytes`]: Self::to_le_bytes\n         ///\n         /// # Examples\n         ///\n@@ -1675,7 +1675,7 @@ macro_rules! uint_impl {\n         ///\n         /// [`to_ne_bytes`] should be preferred over this whenever possible.\n         ///\n-        /// [`to_ne_bytes`]: #method.to_ne_bytes\n+        /// [`to_ne_bytes`]: Self::to_ne_bytes\n         ///\n         /// # Examples\n         ///\n@@ -1767,8 +1767,8 @@ macro_rules! uint_impl {\n         /// likely wants to use [`from_be_bytes`] or [`from_le_bytes`], as\n         /// appropriate instead.\n         ///\n-        /// [`from_be_bytes`]: #method.from_be_bytes\n-        /// [`from_le_bytes`]: #method.from_le_bytes\n+        /// [`from_be_bytes`]: Self::from_be_bytes\n+        /// [`from_le_bytes`]: Self::from_le_bytes\n         ///\n         #[doc = $from_xe_bytes_doc]\n         ///\n@@ -1806,8 +1806,7 @@ macro_rules! uint_impl {\n         }\n \n         /// New code should prefer to use\n-        #[doc = concat!(\"[`\", stringify!($SelfT), \"::MIN\", \"`](#associatedconstant.MIN).\")]\n-        /// instead.\n+        #[doc = concat!(\"[`\", stringify!($SelfT), \"::MIN\", \"`] instead.\")]\n         ///\n         /// Returns the smallest value that can be represented by this integer type.\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1818,8 +1817,7 @@ macro_rules! uint_impl {\n         pub const fn min_value() -> Self { Self::MIN }\n \n         /// New code should prefer to use\n-        #[doc = concat!(\"[`\", stringify!($SelfT), \"::MAX\", \"`](#associatedconstant.MAX).\")]\n-        /// instead.\n+        #[doc = concat!(\"[`\", stringify!($SelfT), \"::MAX\", \"`] instead.\")]\n         ///\n         /// Returns the largest value that can be represented by this integer type.\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]"}]}