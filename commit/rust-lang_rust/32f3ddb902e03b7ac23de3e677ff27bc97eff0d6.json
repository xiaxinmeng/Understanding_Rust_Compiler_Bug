{"sha": "32f3ddb902e03b7ac23de3e677ff27bc97eff0d6", "node_id": "C_kwDOAAsO6NoAKDMyZjNkZGI5MDJlMDNiN2FjMjNkZTNlNjc3ZmYyN2JjOTdlZmYwZDY", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-05-03T18:47:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-03T18:47:23Z"}, "message": "Rollup merge of #110436 - Mark-Simulacrum:support-xz-version, r=pietroalbini\n\nSupport loading version information from xz tarballs\n\nThis is intended to allow us to move recompression from xz (produced in CI) to gz after an initial manifest run, which produces a list of actually required artifacts. The rest are then deleted, which means that we can avoid recompressing them, saving a bunch of time.\n\nThis is essentially untested and more might be needed, will run a patched promote-release against try artifacts from this PR. If we do go ahead with this we'll either need to backport this patch to beta/stable, wait for it to propagate, or temporarily recompress to gzip but not xz tarballs (or similar).\n\nr? `@pietroalbini`", "tree": {"sha": "045260484145db2639eb452bd360516d2754796c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/045260484145db2639eb452bd360516d2754796c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32f3ddb902e03b7ac23de3e677ff27bc97eff0d6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkUqw7CRBK7hj4Ov3rIwAABbEIAIDLmeox9qUKFOG4CwbjTqPj\nUOrNFiC1mJdDdWijqfITFKg5xwjDNTHY5fISwe0cQyfmRsQf2aX2eMJtNU3xxE6C\nr4pvmAn9VeGPRHEu64ks1wSk85M7GaNAq4jI/+e0b/wX1BYxH46agp2LIc8YRWiD\nl0qIebocYhpRnPhpt2gFbgk66SkUaWE6xsWul8IvDmVxO0eIBqfVIAS89sBuRulp\nlWA8ZwtTKB6kr2aJPC+DRCOmcnMJK9jNCeG83Vc3jjjmaQv+z+eogqI108Otz1Vo\nXEnG7Ek94Ec8XCYZy8XoBXu7tjFSGBwHGwYufz4VoEqrtTJYhMq7rvhuTtYB52A=\n=UJYT\n-----END PGP SIGNATURE-----\n", "payload": "tree 045260484145db2639eb452bd360516d2754796c\nparent 068807a5b8072349363c33918c41f4d7ddfde600\nparent e40a4461eae543e067e6133817919f6ab7f04ac8\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1683139643 +0530\ncommitter GitHub <noreply@github.com> 1683139643 +0530\n\nRollup merge of #110436 - Mark-Simulacrum:support-xz-version, r=pietroalbini\n\nSupport loading version information from xz tarballs\n\nThis is intended to allow us to move recompression from xz (produced in CI) to gz after an initial manifest run, which produces a list of actually required artifacts. The rest are then deleted, which means that we can avoid recompressing them, saving a bunch of time.\n\nThis is essentially untested and more might be needed, will run a patched promote-release against try artifacts from this PR. If we do go ahead with this we'll either need to backport this patch to beta/stable, wait for it to propagate, or temporarily recompress to gzip but not xz tarballs (or similar).\n\nr? `@pietroalbini`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32f3ddb902e03b7ac23de3e677ff27bc97eff0d6", "html_url": "https://github.com/rust-lang/rust/commit/32f3ddb902e03b7ac23de3e677ff27bc97eff0d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32f3ddb902e03b7ac23de3e677ff27bc97eff0d6/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "068807a5b8072349363c33918c41f4d7ddfde600", "url": "https://api.github.com/repos/rust-lang/rust/commits/068807a5b8072349363c33918c41f4d7ddfde600", "html_url": "https://github.com/rust-lang/rust/commit/068807a5b8072349363c33918c41f4d7ddfde600"}, {"sha": "e40a4461eae543e067e6133817919f6ab7f04ac8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e40a4461eae543e067e6133817919f6ab7f04ac8", "html_url": "https://github.com/rust-lang/rust/commit/e40a4461eae543e067e6133817919f6ab7f04ac8"}], "stats": {"total": 38, "additions": 31, "deletions": 7}, "files": [{"sha": "3dfe558afa619331a4d4b7337a3852c1454d88db", "filename": "Cargo.lock", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/32f3ddb902e03b7ac23de3e677ff27bc97eff0d6/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/32f3ddb902e03b7ac23de3e677ff27bc97eff0d6/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=32f3ddb902e03b7ac23de3e677ff27bc97eff0d6", "patch": "@@ -297,6 +297,7 @@ dependencies = [\n  \"sha2\",\n  \"tar\",\n  \"toml\",\n+ \"xz2\",\n ]\n \n [[package]]\n@@ -2060,9 +2061,9 @@ dependencies = [\n \n [[package]]\n name = \"lzma-sys\"\n-version = \"0.1.16\"\n+version = \"0.1.20\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"f24f76ec44a8ac23a31915d6e326bca17ce88da03096f1ff194925dc714dac99\"\n+checksum = \"5fda04ab3764e6cde78b9974eec4f779acaba7c4e84b36eca3cf77c581b85d27\"\n dependencies = [\n  \"cc\",\n  \"libc\",\n@@ -5658,9 +5659,9 @@ dependencies = [\n \n [[package]]\n name = \"xz2\"\n-version = \"0.1.6\"\n+version = \"0.1.7\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c179869f34fc7c01830d3ce7ea2086bc3a07e0d35289b667d0a8bf910258926c\"\n+checksum = \"388c44dc09d76f1536602ead6d325eb532f5c122f17782bd57fb47baeeb767e2\"\n dependencies = [\n  \"lzma-sys\",\n ]"}, {"sha": "6c3b5bb00a3475e2bec5d1b7a75beade6623c776", "filename": "src/tools/build-manifest/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/32f3ddb902e03b7ac23de3e677ff27bc97eff0d6/src%2Ftools%2Fbuild-manifest%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/32f3ddb902e03b7ac23de3e677ff27bc97eff0d6/src%2Ftools%2Fbuild-manifest%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2FCargo.toml?ref=32f3ddb902e03b7ac23de3e677ff27bc97eff0d6", "patch": "@@ -9,6 +9,7 @@ serde = { version = \"1.0\", features = [\"derive\"] }\n serde_json = \"1.0\"\n anyhow = \"1.0.32\"\n flate2 = \"1.0.16\"\n+xz2 = \"0.1.7\"\n tar = \"0.4.29\"\n sha2 = \"0.10.1\"\n rayon = \"1.5.1\""}, {"sha": "7a4c15d01eadc219dfdb570c83eb8952715320a7", "filename": "src/tools/build-manifest/src/versions.rs", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/32f3ddb902e03b7ac23de3e677ff27bc97eff0d6/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32f3ddb902e03b7ac23de3e677ff27bc97eff0d6/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fversions.rs?ref=32f3ddb902e03b7ac23de3e677ff27bc97eff0d6", "patch": "@@ -5,6 +5,7 @@ use std::fs::File;\n use std::io::Read;\n use std::path::{Path, PathBuf};\n use tar::Archive;\n+use xz2::read::XzDecoder;\n \n const DEFAULT_TARGET: &str = \"x86_64-unknown-linux-gnu\";\n \n@@ -175,9 +176,23 @@ impl Versions {\n     }\n \n     fn load_version_from_tarball(&mut self, package: &PkgType) -> Result<VersionInfo, Error> {\n-        let tarball_name = self.tarball_name(package, DEFAULT_TARGET)?;\n-        let tarball = self.dist_path.join(tarball_name);\n+        for ext in [\"xz\", \"gz\"] {\n+            let info =\n+                self.load_version_from_tarball_inner(&self.dist_path.join(self.archive_name(\n+                    package,\n+                    DEFAULT_TARGET,\n+                    &format!(\"tar.{}\", ext),\n+                )?))?;\n+            if info.present {\n+                return Ok(info);\n+            }\n+        }\n+\n+        // If neither tarball is present, we fallback to returning the non-present info.\n+        Ok(VersionInfo::default())\n+    }\n \n+    fn load_version_from_tarball_inner(&mut self, tarball: &Path) -> Result<VersionInfo, Error> {\n         let file = match File::open(&tarball) {\n             Ok(file) => file,\n             Err(err) if err.kind() == std::io::ErrorKind::NotFound => {\n@@ -187,7 +202,14 @@ impl Versions {\n             }\n             Err(err) => return Err(err.into()),\n         };\n-        let mut tar = Archive::new(GzDecoder::new(file));\n+        let mut tar: Archive<Box<dyn std::io::Read>> =\n+            Archive::new(if tarball.extension().map_or(false, |e| e == \"gz\") {\n+                Box::new(GzDecoder::new(file))\n+            } else if tarball.extension().map_or(false, |e| e == \"xz\") {\n+                Box::new(XzDecoder::new(file))\n+            } else {\n+                unimplemented!(\"tarball extension not recognized: {}\", tarball.display())\n+            });\n \n         let mut version = None;\n         let mut git_commit = None;"}]}