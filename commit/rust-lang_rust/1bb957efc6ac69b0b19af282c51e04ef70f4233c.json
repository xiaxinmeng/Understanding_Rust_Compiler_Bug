{"sha": "1bb957efc6ac69b0b19af282c51e04ef70f4233c", "node_id": "C_kwDOAAsO6NoAKDFiYjk1N2VmYzZhYzY5YjBiMTlhZjI4MmM1MWUwNGVmNzBmNDIzM2M", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-05-18T03:32:28Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-05-18T22:48:28Z"}, "message": "Improve CGU partitioning debug output.\n\n- Pass a slice instead of an iterator to `debug_dump`.\n- For each CGU set, print: the number of CGUs, the max and min size, and\n  the ratio of the max and min size (which indicates how evenly sized\n  they are).\n- Print a `FINAL` entry, showing the absolute final results.", "tree": {"sha": "516d64221cd7e8b2e80ad69d4f2b176963ead4d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/516d64221cd7e8b2e80ad69d4f2b176963ead4d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1bb957efc6ac69b0b19af282c51e04ef70f4233c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1bb957efc6ac69b0b19af282c51e04ef70f4233c", "html_url": "https://github.com/rust-lang/rust/commit/1bb957efc6ac69b0b19af282c51e04ef70f4233c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1bb957efc6ac69b0b19af282c51e04ef70f4233c/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1551495d3221b6162b96a14fc5cdb45f2783ed3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1551495d3221b6162b96a14fc5cdb45f2783ed3c", "html_url": "https://github.com/rust-lang/rust/commit/1551495d3221b6162b96a14fc5cdb45f2783ed3c"}], "stats": {"total": 26, "additions": 16, "deletions": 10}, "files": [{"sha": "eafe57a0c02077b5b202671d193bfd75f3eecd1c", "filename": "compiler/rustc_monomorphize/src/partitioning/mod.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1bb957efc6ac69b0b19af282c51e04ef70f4233c/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bb957efc6ac69b0b19af282c51e04ef70f4233c/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs?ref=1bb957efc6ac69b0b19af282c51e04ef70f4233c", "patch": "@@ -250,13 +250,13 @@ where\n         cgu.create_size_estimate(tcx);\n     }\n \n-    debug_dump(tcx, \"INITIAL PARTITIONING:\", initial_partitioning.codegen_units.iter());\n+    debug_dump(tcx, \"INITIAL PARTITIONING\", &initial_partitioning.codegen_units);\n \n     // Merge until we have at most `max_cgu_count` codegen units.\n     {\n         let _prof_timer = tcx.prof.generic_activity(\"cgu_partitioning_merge_cgus\");\n         partitioner.merge_codegen_units(cx, &mut initial_partitioning);\n-        debug_dump(tcx, \"POST MERGING:\", initial_partitioning.codegen_units.iter());\n+        debug_dump(tcx, \"POST MERGING\", &initial_partitioning.codegen_units);\n     }\n \n     // In the next step, we use the inlining map to determine which additional\n@@ -272,7 +272,7 @@ where\n         cgu.create_size_estimate(tcx);\n     }\n \n-    debug_dump(tcx, \"POST INLINING:\", post_inlining.codegen_units.iter());\n+    debug_dump(tcx, \"POST INLINING\", &post_inlining.codegen_units);\n \n     // Next we try to make as many symbols \"internal\" as possible, so LLVM has\n     // more freedom to optimize.\n@@ -322,6 +322,8 @@ where\n \n     result.sort_by(|a, b| a.name().as_str().cmp(b.name().as_str()));\n \n+    debug_dump(tcx, \"FINAL\", &result);\n+\n     result\n }\n \n@@ -346,19 +348,23 @@ struct PostInliningPartitioning<'tcx> {\n     internalization_candidates: FxHashSet<MonoItem<'tcx>>,\n }\n \n-fn debug_dump<'a, 'tcx, I>(tcx: TyCtxt<'tcx>, label: &str, cgus: I)\n-where\n-    I: Iterator<Item = &'a CodegenUnit<'tcx>>,\n-    'tcx: 'a,\n-{\n+fn debug_dump<'a, 'tcx: 'a>(tcx: TyCtxt<'tcx>, label: &str, cgus: &[CodegenUnit<'tcx>]) {\n     let dump = move || {\n         use std::fmt::Write;\n \n+        let num_cgus = cgus.len();\n+        let max = cgus.iter().map(|cgu| cgu.size_estimate()).max().unwrap();\n+        let min = cgus.iter().map(|cgu| cgu.size_estimate()).min().unwrap();\n+        let ratio = max as f64 / min as f64;\n+\n         let s = &mut String::new();\n-        let _ = writeln!(s, \"{label}\");\n+        let _ = writeln!(\n+            s,\n+            \"{label} ({num_cgus} CodegenUnits, max={max}, min={min}, max/min={ratio:.1}):\"\n+        );\n         for cgu in cgus {\n             let _ =\n-                writeln!(s, \"CodegenUnit {} estimated size {} :\", cgu.name(), cgu.size_estimate());\n+                writeln!(s, \"CodegenUnit {} estimated size {}:\", cgu.name(), cgu.size_estimate());\n \n             for (mono_item, linkage) in cgu.items() {\n                 let symbol_name = mono_item.symbol_name(tcx).name;"}]}