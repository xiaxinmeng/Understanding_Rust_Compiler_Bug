{"sha": "23646e658326503720742c556d73230a4e96f0bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzNjQ2ZTY1ODMyNjUwMzcyMDc0MmM1NTZkNzMyMzBhNGU5NmYwYmY=", "commit": {"author": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-09-04T21:27:01Z"}, "committer": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-09-04T21:27:01Z"}, "message": "Merge remote-tracking branch 'upstream/master' into sync-from-rust", "tree": {"sha": "b0701d3e3343701fb5ac7083d0d4182abbf52389", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0701d3e3343701fb5ac7083d0d4182abbf52389"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23646e658326503720742c556d73230a4e96f0bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23646e658326503720742c556d73230a4e96f0bf", "html_url": "https://github.com/rust-lang/rust/commit/23646e658326503720742c556d73230a4e96f0bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23646e658326503720742c556d73230a4e96f0bf/comments", "author": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4286d9c87af269e46203fc1ca8108669d00e7c63", "url": "https://api.github.com/repos/rust-lang/rust/commits/4286d9c87af269e46203fc1ca8108669d00e7c63", "html_url": "https://github.com/rust-lang/rust/commit/4286d9c87af269e46203fc1ca8108669d00e7c63"}, {"sha": "b9e35dfa41fd73c35994fce9de5db8f8bb1b4e24", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9e35dfa41fd73c35994fce9de5db8f8bb1b4e24", "html_url": "https://github.com/rust-lang/rust/commit/b9e35dfa41fd73c35994fce9de5db8f8bb1b4e24"}], "stats": {"total": 858, "additions": 724, "deletions": 134}, "files": [{"sha": "99a8b1a6293c3c01ec0cb43ce98e28b5629f6e00", "filename": "CHANGELOG.md", "status": "modified", "additions": 106, "deletions": 3, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/23646e658326503720742c556d73230a4e96f0bf/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/23646e658326503720742c556d73230a4e96f0bf/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=23646e658326503720742c556d73230a4e96f0bf", "patch": "@@ -6,11 +6,113 @@ document.\n \n ## Unreleased / In Rust Nightly\n \n-[c2c07fa...master](https://github.com/rust-lang/rust-clippy/compare/c2c07fa...master)\n+[09bd400...master](https://github.com/rust-lang/rust-clippy/compare/09bd400...master)\n+\n+## Rust 1.47\n+\n+Current beta, release 2020-10-08\n+\n+[c2c07fa...09bd400](https://github.com/rust-lang/rust-clippy/compare/c2c07fa...09bd400)\n+\n+### New lints\n+\n+* [`derive_ord_xor_partial_ord`] [#5848](https://github.com/rust-lang/rust-clippy/pull/5848)\n+* [`trait_duplication_in_bounds`] [#5852](https://github.com/rust-lang/rust-clippy/pull/5852)\n+* [`map_identity`] [#5694](https://github.com/rust-lang/rust-clippy/pull/5694)\n+* [`unit_return_expecting_ord`] [#5737](https://github.com/rust-lang/rust-clippy/pull/5737)\n+* [`pattern_type_mismatch`] [#4841](https://github.com/rust-lang/rust-clippy/pull/4841)\n+* [`repeat_once`] [#5773](https://github.com/rust-lang/rust-clippy/pull/5773)\n+* [`same_item_push`] [#5825](https://github.com/rust-lang/rust-clippy/pull/5825)\n+* [`needless_arbitrary_self_type`] [#5869](https://github.com/rust-lang/rust-clippy/pull/5869)\n+* [`match_like_matches_macro`] [#5769](https://github.com/rust-lang/rust-clippy/pull/5769)\n+* [`stable_sort_primitive`] [#5809](https://github.com/rust-lang/rust-clippy/pull/5809)\n+* [`blanket_clippy_restriction_lints`] [#5750](https://github.com/rust-lang/rust-clippy/pull/5750)\n+* [`option_if_let_else`] [#5301](https://github.com/rust-lang/rust-clippy/pull/5301)\n+\n+### Moves and Deprecations\n+\n+* Deprecate [`regex_macro`] lint\n+  [#5760](https://github.com/rust-lang/rust-clippy/pull/5760)\n+* Move [`range_minus_one`] to `pedantic`\n+  [#5752](https://github.com/rust-lang/rust-clippy/pull/5752)\n+\n+### Enhancements\n+\n+* Improve [`needless_collect`] by catching `collect` calls followed by `iter` or `into_iter` calls\n+  [#5837](https://github.com/rust-lang/rust-clippy/pull/5837)\n+* [`panic`], [`todo`], [`unimplemented`] and [`unreachable`] now detect calls with formatting\n+  [#5811](https://github.com/rust-lang/rust-clippy/pull/5811)\n+* Detect more cases of [`suboptimal_flops`] and [`imprecise_flops`]\n+  [#5443](https://github.com/rust-lang/rust-clippy/pull/5443)\n+* Handle asymmetrical implementations of `PartialEq` in [`cmp_owned`]\n+  [#5701](https://github.com/rust-lang/rust-clippy/pull/5701)\n+* Make it possible to allow [`unsafe_derive_deserialize`]\n+  [#5870](https://github.com/rust-lang/rust-clippy/pull/5870)\n+* Catch `ord.min(a).max(b)` where a < b in [`min_max`]\n+  [#5871](https://github.com/rust-lang/rust-clippy/pull/5871)\n+* Make [`clone_on_copy`] suggestion machine applicable\n+  [#5745](https://github.com/rust-lang/rust-clippy/pull/5745)\n+* Enable [`len_zero`] on ranges now that `is_empty` is stable on them\n+  [#5961](https://github.com/rust-lang/rust-clippy/pull/5961)\n+\n+### False Positive Fixes\n+\n+* Avoid triggering [`or_fun_call`] with const fns that take no arguments\n+  [#5889](https://github.com/rust-lang/rust-clippy/pull/5889)\n+* Fix [`redundant_closure_call`] false positive for closures that have multiple calls\n+  [#5800](https://github.com/rust-lang/rust-clippy/pull/5800)\n+* Don't lint cases involving `ManuallyDrop` in [`redundant_clone`]\n+  [#5824](https://github.com/rust-lang/rust-clippy/pull/5824)\n+* Treat a single expression the same as a single statement in the 2nd arm of a match in [`single_match_else`]\n+  [#5771](https://github.com/rust-lang/rust-clippy/pull/5771)\n+* Don't trigger [`unnested_or_patterns`] if the feature `or_patterns` is not enabled\n+  [#5758](https://github.com/rust-lang/rust-clippy/pull/5758)\n+* Avoid linting if key borrows in [`unnecessary_sort_by`]\n+  [#5756](https://github.com/rust-lang/rust-clippy/pull/5756)\n+* Consider `Try` impl for `Poll` when generating suggestions in [`try_err`]\n+  [#5857](https://github.com/rust-lang/rust-clippy/pull/5857)\n+* Take input lifetimes into account in `manual_async_fn`\n+  [#5859](https://github.com/rust-lang/rust-clippy/pull/5859)\n+* Fix multiple false positives in [`type_repetition_in_bounds`] and add a configuration option\n+  [#5761](https://github.com/rust-lang/rust-clippy/pull/5761)\n+* Limit the [`suspicious_arithmetic_impl`] lint to one binary operation\n+  [#5820](https://github.com/rust-lang/rust-clippy/pull/5820)\n+\n+### Suggestion Fixes/Improvements\n+\n+* Improve readability of [`shadow_unrelated`] suggestion by truncating the RHS snippet\n+  [#5788](https://github.com/rust-lang/rust-clippy/pull/5788)\n+* Suggest `filter_map` instead of `flat_map` when mapping to `Option` in [`map_flatten`]\n+  [#5846](https://github.com/rust-lang/rust-clippy/pull/5846)\n+* Ensure suggestion is shown correctly for long method call chains in [`iter_nth_zero`]\n+  [#5793](https://github.com/rust-lang/rust-clippy/pull/5793)\n+* Drop borrow operator in suggestions of [`redundant_pattern_matching`]\n+  [#5815](https://github.com/rust-lang/rust-clippy/pull/5815)\n+* Add suggestion for [`iter_skip_next`]\n+  [#5843](https://github.com/rust-lang/rust-clippy/pull/5843)\n+* Improve [`collapsible_if`] fix suggestion\n+  [#5732](https://github.com/rust-lang/rust-clippy/pull/5732)\n+\n+### ICE Fixes\n+\n+* Fix ICE caused by [`needless_collect`]\n+  [#5877](https://github.com/rust-lang/rust-clippy/pull/5877)\n+* Fix ICE caused by [`unnested_or_patterns`]\n+  [#5784](https://github.com/rust-lang/rust-clippy/pull/5784)\n+\n+### Documentation Improvements\n+\n+* Fix grammar of [`await_holding_lock`] documentation\n+  [#5748](https://github.com/rust-lang/rust-clippy/pull/5748)\n+\n+### Others\n+\n+* Make lints adhere to the rustc dev guide\n+  [#5888](https://github.com/rust-lang/rust-clippy/pull/5888)\n \n ## Rust 1.46\n \n-Current beta, release 2020-08-27\n+Current stable, released 2020-08-27\n \n [7ea7cd1...c2c07fa](https://github.com/rust-lang/rust-clippy/compare/7ea7cd1...c2c07fa)\n \n@@ -72,7 +174,7 @@ Current beta, release 2020-08-27\n \n ## Rust 1.45\n \n-Current stable, released 2020-07-16\n+Released 2020-07-16\n \n [891e1a8...7ea7cd1](https://github.com/rust-lang/rust-clippy/compare/891e1a8...7ea7cd1)\n \n@@ -1410,6 +1512,7 @@ Released 2018-09-13\n [`assertions_on_constants`]: https://rust-lang.github.io/rust-clippy/master/index.html#assertions_on_constants\n [`assign_op_pattern`]: https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern\n [`assign_ops`]: https://rust-lang.github.io/rust-clippy/master/index.html#assign_ops\n+[`async_yields_async`]: https://rust-lang.github.io/rust-clippy/master/index.html#async_yields_async\n [`await_holding_lock`]: https://rust-lang.github.io/rust-clippy/master/index.html#await_holding_lock\n [`bad_bit_mask`]: https://rust-lang.github.io/rust-clippy/master/index.html#bad_bit_mask\n [`bind_instead_of_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#bind_instead_of_map"}, {"sha": "88d9d3b5a263d06ee312b6cc0be90f30852e5acf", "filename": "clippy_lints/src/async_yields_async.rs", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/23646e658326503720742c556d73230a4e96f0bf/clippy_lints%2Fsrc%2Fasync_yields_async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23646e658326503720742c556d73230a4e96f0bf/clippy_lints%2Fsrc%2Fasync_yields_async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fasync_yields_async.rs?ref=23646e658326503720742c556d73230a4e96f0bf", "patch": "@@ -0,0 +1,86 @@\n+use crate::utils::{implements_trait, snippet, span_lint_and_then};\n+use rustc_errors::Applicability;\n+use rustc_hir::{AsyncGeneratorKind, Body, BodyId, ExprKind, GeneratorKind, QPath};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for async blocks that yield values of types\n+    /// that can themselves be awaited.\n+    ///\n+    /// **Why is this bad?** An await is likely missing.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// async fn foo() {}\n+    ///\n+    /// fn bar() {\n+    ///   let x = async {\n+    ///     foo()\n+    ///   };\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// async fn foo() {}\n+    ///\n+    /// fn bar() {\n+    ///   let x = async {\n+    ///     foo().await\n+    ///   };\n+    /// }\n+    /// ```\n+    pub ASYNC_YIELDS_ASYNC,\n+    correctness,\n+    \"async blocks that return a type that can be awaited\"\n+}\n+\n+declare_lint_pass!(AsyncYieldsAsync => [ASYNC_YIELDS_ASYNC]);\n+\n+impl<'tcx> LateLintPass<'tcx> for AsyncYieldsAsync {\n+    fn check_body(&mut self, cx: &LateContext<'tcx>, body: &'tcx Body<'_>) {\n+        use AsyncGeneratorKind::{Block, Closure};\n+        // For functions, with explicitly defined types, don't warn.\n+        // XXXkhuey maybe we should?\n+        if let Some(GeneratorKind::Async(Block | Closure)) = body.generator_kind {\n+            if let Some(future_trait_def_id) = cx.tcx.lang_items().future_trait() {\n+                let body_id = BodyId {\n+                    hir_id: body.value.hir_id,\n+                };\n+                let def_id = cx.tcx.hir().body_owner_def_id(body_id);\n+                let typeck_results = cx.tcx.typeck(def_id);\n+                let expr_ty = typeck_results.expr_ty(&body.value);\n+\n+                if implements_trait(cx, expr_ty, future_trait_def_id, &[]) {\n+                    let return_expr_span = match &body.value.kind {\n+                        // XXXkhuey there has to be a better way.\n+                        ExprKind::Block(block, _) => block.expr.map(|e| e.span),\n+                        ExprKind::Path(QPath::Resolved(_, path)) => Some(path.span),\n+                        _ => None,\n+                    };\n+                    if let Some(return_expr_span) = return_expr_span {\n+                        span_lint_and_then(\n+                            cx,\n+                            ASYNC_YIELDS_ASYNC,\n+                            return_expr_span,\n+                            \"an async construct yields a type which is itself awaitable\",\n+                            |db| {\n+                                db.span_label(body.value.span, \"outer async construct\");\n+                                db.span_label(return_expr_span, \"awaitable value not awaited\");\n+                                db.span_suggestion(\n+                                    return_expr_span,\n+                                    \"consider awaiting this value\",\n+                                    format!(\"{}.await\", snippet(cx, return_expr_span, \"..\")),\n+                                    Applicability::MaybeIncorrect,\n+                                );\n+                            },\n+                        );\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "c8f153e7201cb12988e0030f928446f7490bcda2", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 22, "deletions": 16, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/23646e658326503720742c556d73230a4e96f0bf/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23646e658326503720742c556d73230a4e96f0bf/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=23646e658326503720742c556d73230a4e96f0bf", "patch": "@@ -71,8 +71,9 @@ declare_clippy_lint! {\n     /// **What it does:** Checks for `extern crate` and `use` items annotated with\n     /// lint attributes.\n     ///\n-    /// This lint permits `#[allow(unused_imports)]`, `#[allow(deprecated)]` and\n-    /// `#[allow(unreachable_pub)]` on `use` items and `#[allow(unused_imports)]` on\n+    /// This lint permits `#[allow(unused_imports)]`, `#[allow(deprecated)]`,\n+    /// `#[allow(unreachable_pub)]`, `#[allow(clippy::wildcard_imports)]` and\n+    /// `#[allow(clippy::enum_glob_use)]` on `use` items and `#[allow(unused_imports)]` on\n     /// `extern crate` items with a `#[macro_use]` attribute.\n     ///\n     /// **Why is this bad?** Lint attributes have no effect on crate imports. Most\n@@ -318,7 +319,8 @@ impl<'tcx> LateLintPass<'tcx> for Attributes {\n                         if let Some(ident) = attr.ident() {\n                             match &*ident.as_str() {\n                                 \"allow\" | \"warn\" | \"deny\" | \"forbid\" => {\n-                                    // permit `unused_imports`, `deprecated` and `unreachable_pub` for `use` items\n+                                    // permit `unused_imports`, `deprecated`, `unreachable_pub`,\n+                                    // `clippy::wildcard_imports`, and `clippy::enum_glob_use` for `use` items\n                                     // and `unused_imports` for `extern crate` items with `macro_use`\n                                     for lint in lint_list {\n                                         match item.kind {\n@@ -327,6 +329,9 @@ impl<'tcx> LateLintPass<'tcx> for Attributes {\n                                                     || is_word(lint, sym!(deprecated))\n                                                     || is_word(lint, sym!(unreachable_pub))\n                                                     || is_word(lint, sym!(unused))\n+                                                    || extract_clippy_lint(lint)\n+                                                        .map_or(false, |s| s == \"wildcard_imports\")\n+                                                    || extract_clippy_lint(lint).map_or(false, |s| s == \"enum_glob_use\")\n                                                 {\n                                                     return;\n                                                 }\n@@ -387,24 +392,25 @@ impl<'tcx> LateLintPass<'tcx> for Attributes {\n     }\n }\n \n-fn check_clippy_lint_names(cx: &LateContext<'_>, ident: &str, items: &[NestedMetaItem]) {\n-    fn extract_name(lint: &NestedMetaItem) -> Option<SymbolStr> {\n-        if_chain! {\n-            if let Some(meta_item) = lint.meta_item();\n-            if meta_item.path.segments.len() > 1;\n-            if let tool_name = meta_item.path.segments[0].ident;\n-            if tool_name.as_str() == \"clippy\";\n-            let lint_name = meta_item.path.segments.last().unwrap().ident.name;\n-            then {\n-                return Some(lint_name.as_str());\n-            }\n+/// Returns the lint name if it is clippy lint.\n+fn extract_clippy_lint(lint: &NestedMetaItem) -> Option<SymbolStr> {\n+    if_chain! {\n+        if let Some(meta_item) = lint.meta_item();\n+        if meta_item.path.segments.len() > 1;\n+        if let tool_name = meta_item.path.segments[0].ident;\n+        if tool_name.as_str() == \"clippy\";\n+        let lint_name = meta_item.path.segments.last().unwrap().ident.name;\n+        then {\n+            return Some(lint_name.as_str());\n         }\n-        None\n     }\n+    None\n+}\n \n+fn check_clippy_lint_names(cx: &LateContext<'_>, ident: &str, items: &[NestedMetaItem]) {\n     let lint_store = cx.lints();\n     for lint in items {\n-        if let Some(lint_name) = extract_name(lint) {\n+        if let Some(lint_name) = extract_clippy_lint(lint) {\n             if let CheckLintNameResult::Tool(Err((None, _))) =\n                 lint_store.check_lint_name(&lint_name, Some(sym!(clippy)))\n             {"}, {"sha": "320a2a257bd09405a2435fa94e7f2ada169dabb2", "filename": "clippy_lints/src/default_trait_access.rs", "status": "modified", "additions": 16, "deletions": 30, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/23646e658326503720742c556d73230a4e96f0bf/clippy_lints%2Fsrc%2Fdefault_trait_access.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23646e658326503720742c556d73230a4e96f0bf/clippy_lints%2Fsrc%2Fdefault_trait_access.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault_trait_access.rs?ref=23646e658326503720742c556d73230a4e96f0bf", "patch": "@@ -38,37 +38,23 @@ impl<'tcx> LateLintPass<'tcx> for DefaultTraitAccess {\n             if let ExprKind::Path(ref qpath) = path.kind;\n             if let Some(def_id) = cx.qpath_res(qpath, path.hir_id).opt_def_id();\n             if match_def_path(cx, def_id, &paths::DEFAULT_TRAIT_METHOD);\n+            // Detect and ignore <Foo as Default>::default() because these calls do explicitly name the type.\n+            if let QPath::Resolved(None, _path) = qpath;\n             then {\n-                match qpath {\n-                    QPath::Resolved(..) => {\n-                        if_chain! {\n-                            // Detect and ignore <Foo as Default>::default() because these calls do\n-                            // explicitly name the type.\n-                            if let ExprKind::Call(ref method, ref _args) = expr.kind;\n-                            if let ExprKind::Path(ref p) = method.kind;\n-                            if let QPath::Resolved(Some(_ty), _path) = p;\n-                            then {\n-                                return;\n-                            }\n-                        }\n-\n-                        // TODO: Work out a way to put \"whatever the imported way of referencing\n-                        // this type in this file\" rather than a fully-qualified type.\n-                        let expr_ty = cx.typeck_results().expr_ty(expr);\n-                        if let ty::Adt(..) = expr_ty.kind() {\n-                            let replacement = format!(\"{}::default()\", expr_ty);\n-                            span_lint_and_sugg(\n-                                cx,\n-                                DEFAULT_TRAIT_ACCESS,\n-                                expr.span,\n-                                &format!(\"calling `{}` is more clear than this expression\", replacement),\n-                                \"try\",\n-                                replacement,\n-                                Applicability::Unspecified, // First resolve the TODO above\n-                            );\n-                         }\n-                    },\n-                    QPath::TypeRelative(..) | QPath::LangItem(..) => {},\n+                let expr_ty = cx.typeck_results().expr_ty(expr);\n+                if let ty::Adt(def, ..) = expr_ty.kind {\n+                    // TODO: Work out a way to put \"whatever the imported way of referencing\n+                    // this type in this file\" rather than a fully-qualified type.\n+                    let replacement = format!(\"{}::default()\", cx.tcx.def_path_str(def.did));\n+                    span_lint_and_sugg(\n+                        cx,\n+                        DEFAULT_TRAIT_ACCESS,\n+                        expr.span,\n+                        &format!(\"calling `{}` is more clear than this expression\", replacement),\n+                        \"try\",\n+                        replacement,\n+                        Applicability::Unspecified, // First resolve the TODO above\n+                    );\n                 }\n             }\n         }"}, {"sha": "0eb1d3313660b6e6736ce9cd7f6e274b932f11da", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/23646e658326503720742c556d73230a4e96f0bf/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23646e658326503720742c556d73230a4e96f0bf/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=23646e658326503720742c556d73230a4e96f0bf", "patch": "@@ -154,6 +154,7 @@ mod arithmetic;\n mod as_conversions;\n mod assertions_on_constants;\n mod assign_ops;\n+mod async_yields_async;\n mod atomic_ordering;\n mod attrs;\n mod await_holding_lock;\n@@ -483,6 +484,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &assertions_on_constants::ASSERTIONS_ON_CONSTANTS,\n         &assign_ops::ASSIGN_OP_PATTERN,\n         &assign_ops::MISREFACTORED_ASSIGN_OP,\n+        &async_yields_async::ASYNC_YIELDS_ASYNC,\n         &atomic_ordering::INVALID_ATOMIC_ORDERING,\n         &attrs::BLANKET_CLIPPY_RESTRICTION_LINTS,\n         &attrs::DEPRECATED_CFG_ATTR,\n@@ -1099,6 +1101,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box unwrap_in_result::UnwrapInResult);\n     store.register_late_pass(|| box self_assignment::SelfAssignment);\n     store.register_late_pass(|| box float_equality_without_abs::FloatEqualityWithoutAbs);\n+    store.register_late_pass(|| box async_yields_async::AsyncYieldsAsync);\n \n     store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         LintId::of(&arithmetic::FLOAT_ARITHMETIC),\n@@ -1232,6 +1235,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&assertions_on_constants::ASSERTIONS_ON_CONSTANTS),\n         LintId::of(&assign_ops::ASSIGN_OP_PATTERN),\n         LintId::of(&assign_ops::MISREFACTORED_ASSIGN_OP),\n+        LintId::of(&async_yields_async::ASYNC_YIELDS_ASYNC),\n         LintId::of(&atomic_ordering::INVALID_ATOMIC_ORDERING),\n         LintId::of(&attrs::BLANKET_CLIPPY_RESTRICTION_LINTS),\n         LintId::of(&attrs::DEPRECATED_CFG_ATTR),\n@@ -1675,6 +1679,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n \n     store.register_group(true, \"clippy::correctness\", Some(\"clippy_correctness\"), vec![\n         LintId::of(&approx_const::APPROX_CONSTANT),\n+        LintId::of(&async_yields_async::ASYNC_YIELDS_ASYNC),\n         LintId::of(&atomic_ordering::INVALID_ATOMIC_ORDERING),\n         LintId::of(&attrs::DEPRECATED_SEMVER),\n         LintId::of(&attrs::MISMATCHED_TARGET_OS),"}, {"sha": "ba69c8266b1182be338a48dfb85571a9acb83ba8", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/23646e658326503720742c556d73230a4e96f0bf/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23646e658326503720742c556d73230a4e96f0bf/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=23646e658326503720742c556d73230a4e96f0bf", "patch": "@@ -1324,20 +1324,20 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Warns when using push_str with a single-character string literal,\n-    /// and push with a char would work fine.\n+    /// **What it does:** Warns when using `push_str` with a single-character string literal,\n+    /// and `push` with a `char` would work fine.\n     ///\n-    /// **Why is this bad?** It's less clear that we are pushing a single character\n+    /// **Why is this bad?** It's less clear that we are pushing a single character.\n     ///\n     /// **Known problems:** None\n     ///\n     /// **Example:**\n-    /// ```\n+    /// ```rust\n     /// let mut string = String::new();\n     /// string.push_str(\"R\");\n     /// ```\n     /// Could be written as\n-    /// ```\n+    /// ```rust\n     /// let mut string = String::new();\n     /// string.push('R');\n     /// ```"}, {"sha": "c75adb62f2575aedab44e40b1b8163b0522a8f84", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/23646e658326503720742c556d73230a4e96f0bf/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23646e658326503720742c556d73230a4e96f0bf/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=23646e658326503720742c556d73230a4e96f0bf", "patch": "@@ -331,8 +331,9 @@ impl<'tcx> LateLintPass<'tcx> for Transmute {\n             if let Some(def_id) = cx.qpath_res(qpath, path_expr.hir_id).opt_def_id();\n             if match_def_path(cx, def_id, &paths::TRANSMUTE);\n             then {\n-                // Avoid suggesting from/to bits in const contexts.\n+                // Avoid suggesting from/to bits and dereferencing raw pointers in const contexts.\n                 // See https://github.com/rust-lang/rust/issues/73736 for progress on making them `const fn`.\n+                // And see https://github.com/rust-lang/rust/issues/51911 for dereferencing raw pointers.\n                 let const_context = in_constant(cx, e.hir_id);\n \n                 let from_ty = cx.typeck_results().expr_ty(&args[0]);\n@@ -486,7 +487,8 @@ impl<'tcx> LateLintPass<'tcx> for Transmute {\n                                     Applicability::Unspecified,\n                                 );\n                             } else {\n-                                if cx.tcx.erase_regions(&from_ty) != cx.tcx.erase_regions(&to_ty) {\n+                                if (cx.tcx.erase_regions(&from_ty) != cx.tcx.erase_regions(&to_ty))\n+                                    && !const_context {\n                                     span_lint_and_then(\n                                         cx,\n                                         TRANSMUTE_PTR_TO_PTR,"}, {"sha": "fa8dd210ebadd12bc68a22a794cd339bc84aff74", "filename": "clippy_lints/src/utils/ast_utils.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23646e658326503720742c556d73230a4e96f0bf/clippy_lints%2Fsrc%2Futils%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23646e658326503720742c556d73230a4e96f0bf/clippy_lints%2Fsrc%2Futils%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fast_utils.rs?ref=23646e658326503720742c556d73230a4e96f0bf", "patch": "@@ -191,7 +191,9 @@ pub fn eq_stmt(l: &Stmt, r: &Stmt) -> bool {\n         (Item(l), Item(r)) => eq_item(l, r, eq_item_kind),\n         (Expr(l), Expr(r)) | (Semi(l), Semi(r)) => eq_expr(l, r),\n         (Empty, Empty) => true,\n-        (MacCall(l), MacCall(r)) => l.style == r.style && eq_mac_call(&l.mac, &r.mac) && over(&l.attrs, &r.attrs, |l, r| eq_attr(l, r)),\n+        (MacCall(l), MacCall(r)) => {\n+            l.style == r.style && eq_mac_call(&l.mac, &r.mac) && over(&l.attrs, &r.attrs, |l, r| eq_attr(l, r))\n+        },\n         _ => false,\n     }\n }"}, {"sha": "9c5a12ea9c8e1674e7be4e522437555e156b977e", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23646e658326503720742c556d73230a4e96f0bf/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23646e658326503720742c556d73230a4e96f0bf/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=23646e658326503720742c556d73230a4e96f0bf", "patch": "@@ -122,7 +122,7 @@ define_Conf! {\n         \"IPv4\", \"IPv6\",\n         \"ClojureScript\", \"CoffeeScript\", \"JavaScript\", \"PureScript\", \"TypeScript\",\n         \"NaN\", \"NaNs\",\n-        \"OAuth\",\n+        \"OAuth\", \"GraphQL\",\n         \"OCaml\",\n         \"OpenGL\", \"OpenMP\", \"OpenSSH\", \"OpenSSL\", \"OpenStreetMap\",\n         \"TensorFlow\","}, {"sha": "96e9d0f32f8e3801810462b72a453d29300b38bf", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23646e658326503720742c556d73230a4e96f0bf/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23646e658326503720742c556d73230a4e96f0bf/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=23646e658326503720742c556d73230a4e96f0bf", "patch": "@@ -899,7 +899,7 @@ pub fn is_ctor_or_promotable_const_function(cx: &LateContext<'_>, expr: &Expr<'_\n             return match res {\n                 def::Res::Def(DefKind::Variant | DefKind::Ctor(..), ..) => true,\n                 // FIXME: check the constness of the arguments, see https://github.com/rust-lang/rust-clippy/pull/5682#issuecomment-638681210\n-                def::Res::Def(DefKind::Fn, def_id) if has_no_arguments(cx, def_id) => {\n+                def::Res::Def(DefKind::Fn | DefKind::AssocFn, def_id) if has_no_arguments(cx, def_id) => {\n                     const_eval::is_const_fn(cx.tcx, def_id)\n                 },\n                 def::Res::Def(_, def_id) => cx.tcx.is_promotable_const_fn(def_id),"}, {"sha": "811fde388d15adbaeffbd998ddcf91ea91089f52", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/23646e658326503720742c556d73230a4e96f0bf/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23646e658326503720742c556d73230a4e96f0bf/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=23646e658326503720742c556d73230a4e96f0bf", "patch": "@@ -132,7 +132,11 @@ impl<'a> Sugg<'a> {\n     pub fn ast(cx: &EarlyContext<'_>, expr: &ast::Expr, default: &'a str) -> Self {\n         use rustc_ast::ast::RangeLimits;\n \n-        let snippet = snippet(cx, expr.span, default);\n+        let snippet = if expr.span.from_expansion() {\n+            snippet_with_macro_callsite(cx, expr.span, default)\n+        } else {\n+            snippet(cx, expr.span, default)\n+        };\n \n         match expr.kind {\n             ast::ExprKind::AddrOf(..)"}, {"sha": "dff19ef440f313ba9665abd73598bae00d8821ee", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/23646e658326503720742c556d73230a4e96f0bf/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23646e658326503720742c556d73230a4e96f0bf/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=23646e658326503720742c556d73230a4e96f0bf", "patch": "@@ -52,6 +52,13 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"assign_ops\",\n     },\n+    Lint {\n+        name: \"async_yields_async\",\n+        group: \"correctness\",\n+        desc: \"async blocks that return a type that can be awaited\",\n+        deprecation: None,\n+        module: \"async_yields_async\",\n+    },\n     Lint {\n         name: \"await_holding_lock\",\n         group: \"pedantic\","}, {"sha": "9b1a7ac3ba9de85493244232abca89ce4d5d5452", "filename": "tests/ui/async_yields_async.fixed", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/23646e658326503720742c556d73230a4e96f0bf/tests%2Fui%2Fasync_yields_async.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/23646e658326503720742c556d73230a4e96f0bf/tests%2Fui%2Fasync_yields_async.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync_yields_async.fixed?ref=23646e658326503720742c556d73230a4e96f0bf", "patch": "@@ -0,0 +1,68 @@\n+// run-rustfix\n+// edition:2018\n+\n+#![feature(async_closure)]\n+#![warn(clippy::async_yields_async)]\n+\n+use core::future::Future;\n+use core::pin::Pin;\n+use core::task::{Context, Poll};\n+\n+struct CustomFutureType;\n+\n+impl Future for CustomFutureType {\n+    type Output = u8;\n+\n+    fn poll(self: Pin<&mut Self>, _: &mut Context) -> Poll<Self::Output> {\n+        Poll::Ready(3)\n+    }\n+}\n+\n+fn custom_future_type_ctor() -> CustomFutureType {\n+    CustomFutureType\n+}\n+\n+async fn f() -> CustomFutureType {\n+    // Don't warn for functions since you have to explicitly declare their\n+    // return types.\n+    CustomFutureType\n+}\n+\n+#[rustfmt::skip]\n+fn main() {\n+    let _f = {\n+        3\n+    };\n+    let _g = async {\n+        3\n+    };\n+    let _h = async {\n+        async {\n+            3\n+        }.await\n+    };\n+    let _i = async {\n+        CustomFutureType.await\n+    };\n+    let _i = async || {\n+        3\n+    };\n+    let _j = async || {\n+        async {\n+            3\n+        }.await\n+    };\n+    let _k = async || {\n+        CustomFutureType.await\n+    };\n+    let _l = async || CustomFutureType.await;\n+    let _m = async || {\n+        println!(\"I'm bored\");\n+        // Some more stuff\n+\n+        // Finally something to await\n+        CustomFutureType.await\n+    };\n+    let _n = async || custom_future_type_ctor();\n+    let _o = async || f();\n+}"}, {"sha": "731c094edb42b16b7a8488293fb09affc43d92db", "filename": "tests/ui/async_yields_async.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/23646e658326503720742c556d73230a4e96f0bf/tests%2Fui%2Fasync_yields_async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23646e658326503720742c556d73230a4e96f0bf/tests%2Fui%2Fasync_yields_async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync_yields_async.rs?ref=23646e658326503720742c556d73230a4e96f0bf", "patch": "@@ -0,0 +1,68 @@\n+// run-rustfix\n+// edition:2018\n+\n+#![feature(async_closure)]\n+#![warn(clippy::async_yields_async)]\n+\n+use core::future::Future;\n+use core::pin::Pin;\n+use core::task::{Context, Poll};\n+\n+struct CustomFutureType;\n+\n+impl Future for CustomFutureType {\n+    type Output = u8;\n+\n+    fn poll(self: Pin<&mut Self>, _: &mut Context) -> Poll<Self::Output> {\n+        Poll::Ready(3)\n+    }\n+}\n+\n+fn custom_future_type_ctor() -> CustomFutureType {\n+    CustomFutureType\n+}\n+\n+async fn f() -> CustomFutureType {\n+    // Don't warn for functions since you have to explicitly declare their\n+    // return types.\n+    CustomFutureType\n+}\n+\n+#[rustfmt::skip]\n+fn main() {\n+    let _f = {\n+        3\n+    };\n+    let _g = async {\n+        3\n+    };\n+    let _h = async {\n+        async {\n+            3\n+        }\n+    };\n+    let _i = async {\n+        CustomFutureType\n+    };\n+    let _i = async || {\n+        3\n+    };\n+    let _j = async || {\n+        async {\n+            3\n+        }\n+    };\n+    let _k = async || {\n+        CustomFutureType\n+    };\n+    let _l = async || CustomFutureType;\n+    let _m = async || {\n+        println!(\"I'm bored\");\n+        // Some more stuff\n+\n+        // Finally something to await\n+        CustomFutureType\n+    };\n+    let _n = async || custom_future_type_ctor();\n+    let _o = async || f();\n+}"}, {"sha": "17d0c3751064ff2b2ddf604c4dc78af7f6d04676", "filename": "tests/ui/async_yields_async.stderr", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/23646e658326503720742c556d73230a4e96f0bf/tests%2Fui%2Fasync_yields_async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23646e658326503720742c556d73230a4e96f0bf/tests%2Fui%2Fasync_yields_async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync_yields_async.stderr?ref=23646e658326503720742c556d73230a4e96f0bf", "patch": "@@ -0,0 +1,96 @@\n+error: an async construct yields a type which is itself awaitable\n+  --> $DIR/async_yields_async.rs:40:9\n+   |\n+LL |        let _h = async {\n+   |   ____________________-\n+LL |  |         async {\n+   |  |_________^\n+LL | ||             3\n+LL | ||         }\n+   | ||_________^ awaitable value not awaited\n+LL |  |     };\n+   |  |_____- outer async construct\n+   |\n+   = note: `-D clippy::async-yields-async` implied by `-D warnings`\n+help: consider awaiting this value\n+   |\n+LL |         async {\n+LL |             3\n+LL |         }.await\n+   |\n+\n+error: an async construct yields a type which is itself awaitable\n+  --> $DIR/async_yields_async.rs:45:9\n+   |\n+LL |       let _i = async {\n+   |  ____________________-\n+LL | |         CustomFutureType\n+   | |         ^^^^^^^^^^^^^^^^\n+   | |         |\n+   | |         awaitable value not awaited\n+   | |         help: consider awaiting this value: `CustomFutureType.await`\n+LL | |     };\n+   | |_____- outer async construct\n+\n+error: an async construct yields a type which is itself awaitable\n+  --> $DIR/async_yields_async.rs:51:9\n+   |\n+LL |        let _j = async || {\n+   |   _______________________-\n+LL |  |         async {\n+   |  |_________^\n+LL | ||             3\n+LL | ||         }\n+   | ||_________^ awaitable value not awaited\n+LL |  |     };\n+   |  |_____- outer async construct\n+   |\n+help: consider awaiting this value\n+   |\n+LL |         async {\n+LL |             3\n+LL |         }.await\n+   |\n+\n+error: an async construct yields a type which is itself awaitable\n+  --> $DIR/async_yields_async.rs:56:9\n+   |\n+LL |       let _k = async || {\n+   |  _______________________-\n+LL | |         CustomFutureType\n+   | |         ^^^^^^^^^^^^^^^^\n+   | |         |\n+   | |         awaitable value not awaited\n+   | |         help: consider awaiting this value: `CustomFutureType.await`\n+LL | |     };\n+   | |_____- outer async construct\n+\n+error: an async construct yields a type which is itself awaitable\n+  --> $DIR/async_yields_async.rs:58:23\n+   |\n+LL |     let _l = async || CustomFutureType;\n+   |                       ^^^^^^^^^^^^^^^^\n+   |                       |\n+   |                       outer async construct\n+   |                       awaitable value not awaited\n+   |                       help: consider awaiting this value: `CustomFutureType.await`\n+\n+error: an async construct yields a type which is itself awaitable\n+  --> $DIR/async_yields_async.rs:64:9\n+   |\n+LL |       let _m = async || {\n+   |  _______________________-\n+LL | |         println!(\"I'm bored\");\n+LL | |         // Some more stuff\n+LL | |\n+LL | |         // Finally something to await\n+LL | |         CustomFutureType\n+   | |         ^^^^^^^^^^^^^^^^\n+   | |         |\n+   | |         awaitable value not awaited\n+   | |         help: consider awaiting this value: `CustomFutureType.await`\n+LL | |     };\n+   | |_____- outer async construct\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "efd4187947b201221058dbede468a1f1a76f841f", "filename": "tests/ui/collapsible_if.fixed", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/23646e658326503720742c556d73230a4e96f0bf/tests%2Fui%2Fcollapsible_if.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/23646e658326503720742c556d73230a4e96f0bf/tests%2Fui%2Fcollapsible_if.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_if.fixed?ref=23646e658326503720742c556d73230a4e96f0bf", "patch": "@@ -135,4 +135,7 @@ fn main() {\n             if truth() {}\n         }\n     }\n+\n+    // Fix #5962\n+    if matches!(true, true) && matches!(true, true) {}\n }"}, {"sha": "657f32d38a32bc1a3714c8de089e6ade5a52c628", "filename": "tests/ui/collapsible_if.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/23646e658326503720742c556d73230a4e96f0bf/tests%2Fui%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23646e658326503720742c556d73230a4e96f0bf/tests%2Fui%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_if.rs?ref=23646e658326503720742c556d73230a4e96f0bf", "patch": "@@ -149,4 +149,9 @@ fn main() {\n             if truth() {}\n         }\n     }\n+\n+    // Fix #5962\n+    if matches!(true, true) {\n+        if matches!(true, true) {}\n+    }\n }"}, {"sha": "acd1ec3f2caeaf6a924529a5f1d9307e8ca9075a", "filename": "tests/ui/collapsible_if.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/23646e658326503720742c556d73230a4e96f0bf/tests%2Fui%2Fcollapsible_if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23646e658326503720742c556d73230a4e96f0bf/tests%2Fui%2Fcollapsible_if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_if.stderr?ref=23646e658326503720742c556d73230a4e96f0bf", "patch": "@@ -118,5 +118,13 @@ LL |         println!(\"Hello world!\");\n LL |     }\n    |\n \n-error: aborting due to 7 previous errors\n+error: this `if` statement can be collapsed\n+  --> $DIR/collapsible_if.rs:154:5\n+   |\n+LL | /     if matches!(true, true) {\n+LL | |         if matches!(true, true) {}\n+LL | |     }\n+   | |_____^ help: collapse nested if block: `if matches!(true, true) && matches!(true, true) {}`\n+\n+error: aborting due to 8 previous errors\n "}, {"sha": "d05567a3f82493cf908778222291721a5555d7a5", "filename": "tests/ui/default_trait_access.fixed", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/23646e658326503720742c556d73230a4e96f0bf/tests%2Fui%2Fdefault_trait_access.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/23646e658326503720742c556d73230a4e96f0bf/tests%2Fui%2Fdefault_trait_access.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_trait_access.fixed?ref=23646e658326503720742c556d73230a4e96f0bf", "patch": "@@ -0,0 +1,106 @@\n+// run-rustfix\n+\n+#![allow(unused_imports)]\n+#![deny(clippy::default_trait_access)]\n+\n+use std::default;\n+use std::default::Default as D2;\n+use std::string;\n+\n+fn main() {\n+    let s1: String = std::string::String::default();\n+\n+    let s2 = String::default();\n+\n+    let s3: String = std::string::String::default();\n+\n+    let s4: String = std::string::String::default();\n+\n+    let s5 = string::String::default();\n+\n+    let s6: String = std::string::String::default();\n+\n+    let s7 = std::string::String::default();\n+\n+    let s8: String = DefaultFactory::make_t_badly();\n+\n+    let s9: String = DefaultFactory::make_t_nicely();\n+\n+    let s10 = DerivedDefault::default();\n+\n+    let s11: GenericDerivedDefault<String> = GenericDerivedDefault::default();\n+\n+    let s12 = GenericDerivedDefault::<String>::default();\n+\n+    let s13 = TupleDerivedDefault::default();\n+\n+    let s14: TupleDerivedDefault = TupleDerivedDefault::default();\n+\n+    let s15: ArrayDerivedDefault = ArrayDerivedDefault::default();\n+\n+    let s16 = ArrayDerivedDefault::default();\n+\n+    let s17: TupleStructDerivedDefault = TupleStructDerivedDefault::default();\n+\n+    let s18 = TupleStructDerivedDefault::default();\n+\n+    let s19 = <DerivedDefault as Default>::default();\n+\n+    println!(\n+        \"[{}] [{}] [{}] [{}] [{}] [{}] [{}] [{}] [{}] [{:?}] [{:?}] [{:?}] [{:?}] [{:?}] [{:?}] [{:?}] [{:?}] [{:?}], [{:?}]\",\n+        s1,\n+        s2,\n+        s3,\n+        s4,\n+        s5,\n+        s6,\n+        s7,\n+        s8,\n+        s9,\n+        s10,\n+        s11,\n+        s12,\n+        s13,\n+        s14,\n+        s15,\n+        s16,\n+        s17,\n+        s18,\n+        s19,\n+    );\n+}\n+\n+struct DefaultFactory;\n+\n+impl DefaultFactory {\n+    pub fn make_t_badly<T: Default>() -> T {\n+        Default::default()\n+    }\n+\n+    pub fn make_t_nicely<T: Default>() -> T {\n+        T::default()\n+    }\n+}\n+\n+#[derive(Debug, Default)]\n+struct DerivedDefault {\n+    pub s: String,\n+}\n+\n+#[derive(Debug, Default)]\n+struct GenericDerivedDefault<T: Default + std::fmt::Debug> {\n+    pub s: T,\n+}\n+\n+#[derive(Debug, Default)]\n+struct TupleDerivedDefault {\n+    pub s: (String, String),\n+}\n+\n+#[derive(Debug, Default)]\n+struct ArrayDerivedDefault {\n+    pub s: [String; 10],\n+}\n+\n+#[derive(Debug, Default)]\n+struct TupleStructDerivedDefault(String);"}, {"sha": "447e70c0bbbea74d9fbe5958e3f3aceb9c60a64c", "filename": "tests/ui/default_trait_access.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/23646e658326503720742c556d73230a4e96f0bf/tests%2Fui%2Fdefault_trait_access.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23646e658326503720742c556d73230a4e96f0bf/tests%2Fui%2Fdefault_trait_access.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_trait_access.rs?ref=23646e658326503720742c556d73230a4e96f0bf", "patch": "@@ -1,4 +1,7 @@\n-#![warn(clippy::default_trait_access)]\n+// run-rustfix\n+\n+#![allow(unused_imports)]\n+#![deny(clippy::default_trait_access)]\n \n use std::default;\n use std::default::Default as D2;"}, {"sha": "df8a5b94ddcf3c81468744a3263fdd0b316964c5", "filename": "tests/ui/default_trait_access.stderr", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/23646e658326503720742c556d73230a4e96f0bf/tests%2Fui%2Fdefault_trait_access.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23646e658326503720742c556d73230a4e96f0bf/tests%2Fui%2Fdefault_trait_access.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_trait_access.stderr?ref=23646e658326503720742c556d73230a4e96f0bf", "patch": "@@ -1,49 +1,53 @@\n error: calling `std::string::String::default()` is more clear than this expression\n-  --> $DIR/default_trait_access.rs:8:22\n+  --> $DIR/default_trait_access.rs:11:22\n    |\n LL |     let s1: String = Default::default();\n    |                      ^^^^^^^^^^^^^^^^^^ help: try: `std::string::String::default()`\n    |\n-   = note: `-D clippy::default-trait-access` implied by `-D warnings`\n+note: the lint level is defined here\n+  --> $DIR/default_trait_access.rs:4:9\n+   |\n+LL | #![deny(clippy::default_trait_access)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: calling `std::string::String::default()` is more clear than this expression\n-  --> $DIR/default_trait_access.rs:12:22\n+  --> $DIR/default_trait_access.rs:15:22\n    |\n LL |     let s3: String = D2::default();\n    |                      ^^^^^^^^^^^^^ help: try: `std::string::String::default()`\n \n error: calling `std::string::String::default()` is more clear than this expression\n-  --> $DIR/default_trait_access.rs:14:22\n+  --> $DIR/default_trait_access.rs:17:22\n    |\n LL |     let s4: String = std::default::Default::default();\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::string::String::default()`\n \n error: calling `std::string::String::default()` is more clear than this expression\n-  --> $DIR/default_trait_access.rs:18:22\n+  --> $DIR/default_trait_access.rs:21:22\n    |\n LL |     let s6: String = default::Default::default();\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::string::String::default()`\n \n-error: calling `GenericDerivedDefault<std::string::String>::default()` is more clear than this expression\n-  --> $DIR/default_trait_access.rs:28:46\n+error: calling `GenericDerivedDefault::default()` is more clear than this expression\n+  --> $DIR/default_trait_access.rs:31:46\n    |\n LL |     let s11: GenericDerivedDefault<String> = Default::default();\n-   |                                              ^^^^^^^^^^^^^^^^^^ help: try: `GenericDerivedDefault<std::string::String>::default()`\n+   |                                              ^^^^^^^^^^^^^^^^^^ help: try: `GenericDerivedDefault::default()`\n \n error: calling `TupleDerivedDefault::default()` is more clear than this expression\n-  --> $DIR/default_trait_access.rs:34:36\n+  --> $DIR/default_trait_access.rs:37:36\n    |\n LL |     let s14: TupleDerivedDefault = Default::default();\n    |                                    ^^^^^^^^^^^^^^^^^^ help: try: `TupleDerivedDefault::default()`\n \n error: calling `ArrayDerivedDefault::default()` is more clear than this expression\n-  --> $DIR/default_trait_access.rs:36:36\n+  --> $DIR/default_trait_access.rs:39:36\n    |\n LL |     let s15: ArrayDerivedDefault = Default::default();\n    |                                    ^^^^^^^^^^^^^^^^^^ help: try: `ArrayDerivedDefault::default()`\n \n error: calling `TupleStructDerivedDefault::default()` is more clear than this expression\n-  --> $DIR/default_trait_access.rs:40:42\n+  --> $DIR/default_trait_access.rs:43:42\n    |\n LL |     let s17: TupleStructDerivedDefault = Default::default();\n    |                                          ^^^^^^^^^^^^^^^^^^ help: try: `TupleStructDerivedDefault::default()`"}, {"sha": "68c5d32846f19b69887d21d0b8dcf8c2157d9100", "filename": "tests/ui/doc.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/23646e658326503720742c556d73230a4e96f0bf/tests%2Fui%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23646e658326503720742c556d73230a4e96f0bf/tests%2Fui%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc.rs?ref=23646e658326503720742c556d73230a4e96f0bf", "patch": "@@ -49,6 +49,16 @@ fn test_emphasis() {\n fn test_units() {\n }\n \n+/// This tests allowed identifiers.\n+/// DirectX\n+/// ECMAScript\n+/// OAuth GraphQL\n+/// TeX LaTeX BibTeX BibLaTeX\n+/// CamelCase (see also #2395)\n+/// be_sure_we_got_to_the_end_of_it\n+fn test_allowed() {\n+}\n+\n /// This test has [a link_with_underscores][chunked-example] inside it. See #823.\n /// See also [the issue tracker](https://github.com/rust-lang/rust-clippy/search?q=clippy::doc_markdown&type=Issues)\n /// on GitHub (which is a camel-cased word, but is OK). And here is another [inline link][inline_link].\n@@ -168,9 +178,6 @@ fn issue_1920() {}\n /// Not ok: http://www.unicode.org/reports/tr9/#Reordering_Resolved_Levels\n fn issue_1832() {}\n \n-/// Ok: CamelCase (It should not be surrounded by backticks)\n-fn issue_2395() {}\n-\n /// An iterator over mycrate::Collection's values.\n /// It should not lint a `'static` lifetime in ticks.\n fn issue_2210() {}"}, {"sha": "23fca43590b4f5a11b85c810ee651e88af46fe4a", "filename": "tests/ui/doc.stderr", "status": "modified", "additions": 28, "deletions": 22, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/23646e658326503720742c556d73230a4e96f0bf/tests%2Fui%2Fdoc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23646e658326503720742c556d73230a4e96f0bf/tests%2Fui%2Fdoc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc.stderr?ref=23646e658326503720742c556d73230a4e96f0bf", "patch": "@@ -54,131 +54,137 @@ error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the doc\n LL | /// be_sure_we_got_to_the_end_of_it\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n+  --> $DIR/doc.rs:58:5\n+   |\n+LL | /// be_sure_we_got_to_the_end_of_it\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error: you should put `link_with_underscores` between ticks in the documentation\n-  --> $DIR/doc.rs:52:22\n+  --> $DIR/doc.rs:62:22\n    |\n LL | /// This test has [a link_with_underscores][chunked-example] inside it. See #823.\n    |                      ^^^^^^^^^^^^^^^^^^^^^\n \n error: you should put `inline_link2` between ticks in the documentation\n-  --> $DIR/doc.rs:55:21\n+  --> $DIR/doc.rs:65:21\n    |\n LL | /// It can also be [inline_link2].\n    |                     ^^^^^^^^^^^^\n \n error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n-  --> $DIR/doc.rs:65:5\n+  --> $DIR/doc.rs:75:5\n    |\n LL | /// be_sure_we_got_to_the_end_of_it\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: you should put `CamelCaseThing` between ticks in the documentation\n-  --> $DIR/doc.rs:73:8\n+  --> $DIR/doc.rs:83:8\n    |\n LL | /// ## CamelCaseThing\n    |        ^^^^^^^^^^^^^^\n \n error: you should put `CamelCaseThing` between ticks in the documentation\n-  --> $DIR/doc.rs:76:7\n+  --> $DIR/doc.rs:86:7\n    |\n LL | /// # CamelCaseThing\n    |       ^^^^^^^^^^^^^^\n \n error: you should put `CamelCaseThing` between ticks in the documentation\n-  --> $DIR/doc.rs:78:22\n+  --> $DIR/doc.rs:88:22\n    |\n LL | /// Not a title #897 CamelCaseThing\n    |                      ^^^^^^^^^^^^^^\n \n error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n-  --> $DIR/doc.rs:79:5\n+  --> $DIR/doc.rs:89:5\n    |\n LL | /// be_sure_we_got_to_the_end_of_it\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n-  --> $DIR/doc.rs:86:5\n+  --> $DIR/doc.rs:96:5\n    |\n LL | /// be_sure_we_got_to_the_end_of_it\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n-  --> $DIR/doc.rs:99:5\n+  --> $DIR/doc.rs:109:5\n    |\n LL | /// be_sure_we_got_to_the_end_of_it\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: you should put `FooBar` between ticks in the documentation\n-  --> $DIR/doc.rs:110:43\n+  --> $DIR/doc.rs:120:43\n    |\n LL | /** E.g., serialization of an empty list: FooBar\n    |                                           ^^^^^^\n \n error: you should put `BarQuz` between ticks in the documentation\n-  --> $DIR/doc.rs:115:5\n+  --> $DIR/doc.rs:125:5\n    |\n LL | And BarQuz too.\n    |     ^^^^^^\n \n error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n-  --> $DIR/doc.rs:116:1\n+  --> $DIR/doc.rs:126:1\n    |\n LL | be_sure_we_got_to_the_end_of_it\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: you should put `FooBar` between ticks in the documentation\n-  --> $DIR/doc.rs:121:43\n+  --> $DIR/doc.rs:131:43\n    |\n LL | /** E.g., serialization of an empty list: FooBar\n    |                                           ^^^^^^\n \n error: you should put `BarQuz` between ticks in the documentation\n-  --> $DIR/doc.rs:126:5\n+  --> $DIR/doc.rs:136:5\n    |\n LL | And BarQuz too.\n    |     ^^^^^^\n \n error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n-  --> $DIR/doc.rs:127:1\n+  --> $DIR/doc.rs:137:1\n    |\n LL | be_sure_we_got_to_the_end_of_it\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n-  --> $DIR/doc.rs:138:5\n+  --> $DIR/doc.rs:148:5\n    |\n LL | /// be_sure_we_got_to_the_end_of_it\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: you should put bare URLs between `<`/`>` or make a proper Markdown link\n-  --> $DIR/doc.rs:165:13\n+  --> $DIR/doc.rs:175:13\n    |\n LL | /// Not ok: http://www.unicode.org\n    |             ^^^^^^^^^^^^^^^^^^^^^^\n \n error: you should put bare URLs between `<`/`>` or make a proper Markdown link\n-  --> $DIR/doc.rs:166:13\n+  --> $DIR/doc.rs:176:13\n    |\n LL | /// Not ok: https://www.unicode.org\n    |             ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: you should put bare URLs between `<`/`>` or make a proper Markdown link\n-  --> $DIR/doc.rs:167:13\n+  --> $DIR/doc.rs:177:13\n    |\n LL | /// Not ok: http://www.unicode.org/\n    |             ^^^^^^^^^^^^^^^^^^^^^^\n \n error: you should put bare URLs between `<`/`>` or make a proper Markdown link\n-  --> $DIR/doc.rs:168:13\n+  --> $DIR/doc.rs:178:13\n    |\n LL | /// Not ok: http://www.unicode.org/reports/tr9/#Reordering_Resolved_Levels\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: you should put `mycrate::Collection` between ticks in the documentation\n-  --> $DIR/doc.rs:174:22\n+  --> $DIR/doc.rs:181:22\n    |\n LL | /// An iterator over mycrate::Collection's values.\n    |                      ^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 30 previous errors\n+error: aborting due to 31 previous errors\n "}, {"sha": "5fb568672d35638a4fb027c61ad6f8aef687c6d1", "filename": "tests/ui/or_fun_call.fixed", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/23646e658326503720742c556d73230a4e96f0bf/tests%2Fui%2For_fun_call.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/23646e658326503720742c556d73230a4e96f0bf/tests%2Fui%2For_fun_call.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.fixed?ref=23646e658326503720742c556d73230a4e96f0bf", "patch": "@@ -58,12 +58,6 @@ fn or_fun_call() {\n     let without_default = Some(Foo);\n     without_default.unwrap_or_else(Foo::new);\n \n-    let mut map = HashMap::<u64, String>::new();\n-    map.entry(42).or_insert_with(String::new);\n-\n-    let mut btree = BTreeMap::<u64, String>::new();\n-    btree.entry(42).or_insert_with(String::new);\n-\n     let stringy = Some(String::from(\"\"));\n     let _ = stringy.unwrap_or_else(|| \"\".to_owned());\n \n@@ -122,6 +116,17 @@ pub fn skip_const_fn_with_no_args() {\n         Some(42)\n     }\n     let _ = None.or(foo());\n+\n+    // See issue #5693.\n+    let mut map = std::collections::HashMap::new();\n+    map.insert(1, vec![1]);\n+    map.entry(1).or_insert(vec![]);\n+\n+    let mut map = HashMap::<u64, String>::new();\n+    map.entry(42).or_insert(String::new());\n+\n+    let mut btree = BTreeMap::<u64, String>::new();\n+    btree.entry(42).or_insert(String::new());\n }\n \n fn main() {}"}, {"sha": "737b0f7e55bc7a56773f0e9b63e64e2a0626b67e", "filename": "tests/ui/or_fun_call.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/23646e658326503720742c556d73230a4e96f0bf/tests%2Fui%2For_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23646e658326503720742c556d73230a4e96f0bf/tests%2Fui%2For_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.rs?ref=23646e658326503720742c556d73230a4e96f0bf", "patch": "@@ -58,12 +58,6 @@ fn or_fun_call() {\n     let without_default = Some(Foo);\n     without_default.unwrap_or(Foo::new());\n \n-    let mut map = HashMap::<u64, String>::new();\n-    map.entry(42).or_insert(String::new());\n-\n-    let mut btree = BTreeMap::<u64, String>::new();\n-    btree.entry(42).or_insert(String::new());\n-\n     let stringy = Some(String::from(\"\"));\n     let _ = stringy.unwrap_or(\"\".to_owned());\n \n@@ -122,6 +116,17 @@ pub fn skip_const_fn_with_no_args() {\n         Some(42)\n     }\n     let _ = None.or(foo());\n+\n+    // See issue #5693.\n+    let mut map = std::collections::HashMap::new();\n+    map.insert(1, vec![1]);\n+    map.entry(1).or_insert(vec![]);\n+\n+    let mut map = HashMap::<u64, String>::new();\n+    map.entry(42).or_insert(String::new());\n+\n+    let mut btree = BTreeMap::<u64, String>::new();\n+    btree.entry(42).or_insert(String::new());\n }\n \n fn main() {}"}, {"sha": "b8a436993f329f3d6f608a228fcee774841b3249", "filename": "tests/ui/or_fun_call.stderr", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/23646e658326503720742c556d73230a4e96f0bf/tests%2Fui%2For_fun_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23646e658326503720742c556d73230a4e96f0bf/tests%2Fui%2For_fun_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.stderr?ref=23646e658326503720742c556d73230a4e96f0bf", "patch": "@@ -60,35 +60,23 @@ error: use of `unwrap_or` followed by a function call\n LL |     without_default.unwrap_or(Foo::new());\n    |                     ^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(Foo::new)`\n \n-error: use of `or_insert` followed by a function call\n-  --> $DIR/or_fun_call.rs:62:19\n-   |\n-LL |     map.entry(42).or_insert(String::new());\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_insert_with(String::new)`\n-\n-error: use of `or_insert` followed by a function call\n-  --> $DIR/or_fun_call.rs:65:21\n-   |\n-LL |     btree.entry(42).or_insert(String::new());\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_insert_with(String::new)`\n-\n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:68:21\n+  --> $DIR/or_fun_call.rs:62:21\n    |\n LL |     let _ = stringy.unwrap_or(\"\".to_owned());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| \"\".to_owned())`\n \n error: use of `or` followed by a function call\n-  --> $DIR/or_fun_call.rs:93:35\n+  --> $DIR/or_fun_call.rs:87:35\n    |\n LL |     let _ = Some(\"a\".to_string()).or(Some(\"b\".to_string()));\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_else(|| Some(\"b\".to_string()))`\n \n error: use of `or` followed by a function call\n-  --> $DIR/or_fun_call.rs:97:10\n+  --> $DIR/or_fun_call.rs:91:10\n    |\n LL |         .or(Some(Bar(b, Duration::from_secs(2))));\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_else(|| Some(Bar(b, Duration::from_secs(2))))`\n \n-error: aborting due to 15 previous errors\n+error: aborting due to 13 previous errors\n "}, {"sha": "26b03bdc74055665d927efde9bbd8ae50ccd6f71", "filename": "tests/ui/transmute_ptr_to_ptr.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/23646e658326503720742c556d73230a4e96f0bf/tests%2Fui%2Ftransmute_ptr_to_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23646e658326503720742c556d73230a4e96f0bf/tests%2Fui%2Ftransmute_ptr_to_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_ptr_to_ptr.rs?ref=23646e658326503720742c556d73230a4e96f0bf", "patch": "@@ -51,4 +51,12 @@ fn transmute_ptr_to_ptr() {\n     let _: &GenericParam<&LifetimeParam<'static>> = unsafe { std::mem::transmute(&GenericParam { t: &lp }) };\n }\n \n+// dereferencing raw pointers in const contexts, should not lint as it's unstable (issue 5959)\n+const _: &() = {\n+    struct ZST;\n+    let zst = &ZST;\n+\n+    unsafe { std::mem::transmute::<&'static ZST, &'static ()>(zst) }\n+};\n+\n fn main() {}"}, {"sha": "a5fcde768f18344ed7684116e0ce5f9aeeb52ee5", "filename": "tests/ui/useless_attribute.fixed", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/23646e658326503720742c556d73230a4e96f0bf/tests%2Fui%2Fuseless_attribute.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/23646e658326503720742c556d73230a4e96f0bf/tests%2Fui%2Fuseless_attribute.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_attribute.fixed?ref=23646e658326503720742c556d73230a4e96f0bf", "patch": "@@ -49,6 +49,14 @@ mod a {\n     pub use self::b::C;\n }\n \n+// don't lint on clippy::wildcard_imports for `use` items\n+#[allow(clippy::wildcard_imports)]\n+pub use std::io::prelude::*;\n+\n+// don't lint on clippy::enum_glob_use for `use` items\n+#[allow(clippy::enum_glob_use)]\n+pub use std::cmp::Ordering::*;\n+\n fn test_indented_attr() {\n     #![allow(clippy::almost_swapped)]\n     use std::collections::HashSet;"}, {"sha": "0396d39e3d54eff2151a4d43964c70cac8d86051", "filename": "tests/ui/useless_attribute.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/23646e658326503720742c556d73230a4e96f0bf/tests%2Fui%2Fuseless_attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23646e658326503720742c556d73230a4e96f0bf/tests%2Fui%2Fuseless_attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_attribute.rs?ref=23646e658326503720742c556d73230a4e96f0bf", "patch": "@@ -49,6 +49,14 @@ mod a {\n     pub use self::b::C;\n }\n \n+// don't lint on clippy::wildcard_imports for `use` items\n+#[allow(clippy::wildcard_imports)]\n+pub use std::io::prelude::*;\n+\n+// don't lint on clippy::enum_glob_use for `use` items\n+#[allow(clippy::enum_glob_use)]\n+pub use std::cmp::Ordering::*;\n+\n fn test_indented_attr() {\n     #[allow(clippy::almost_swapped)]\n     use std::collections::HashSet;"}, {"sha": "d0194e4bbbe5b0a3133c130a8ccd30a80402fd59", "filename": "tests/ui/useless_attribute.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23646e658326503720742c556d73230a4e96f0bf/tests%2Fui%2Fuseless_attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23646e658326503720742c556d73230a4e96f0bf/tests%2Fui%2Fuseless_attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_attribute.stderr?ref=23646e658326503720742c556d73230a4e96f0bf", "patch": "@@ -13,7 +13,7 @@ LL | #[cfg_attr(feature = \"cargo-clippy\", allow(dead_code))]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: if you just forgot a `!`, use: `#![cfg_attr(feature = \"cargo-clippy\", allow(dead_code)`\n \n error: useless lint attribute\n-  --> $DIR/useless_attribute.rs:53:5\n+  --> $DIR/useless_attribute.rs:61:5\n    |\n LL |     #[allow(clippy::almost_swapped)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: if you just forgot a `!`, use: `#![allow(clippy::almost_swapped)]`"}, {"sha": "319de217e0d90170c1bcf7545aef25e1caff11d5", "filename": "util/dev", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4286d9c87af269e46203fc1ca8108669d00e7c63/util%2Fdev", "raw_url": "https://github.com/rust-lang/rust/raw/4286d9c87af269e46203fc1ca8108669d00e7c63/util%2Fdev", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fdev?ref=4286d9c87af269e46203fc1ca8108669d00e7c63", "patch": "@@ -1,7 +0,0 @@\n-#!/bin/sh\n-CARGO_TARGET_DIR=$(pwd)/target/\n-export CARGO_TARGET_DIR\n-\n-echo 'Deprecated! `util/dev` usage is deprecated, please use `cargo dev` instead.'\n-\n-cd clippy_dev && cargo run -- \"$@\""}]}