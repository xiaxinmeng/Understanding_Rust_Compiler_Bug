{"sha": "6edd59885605d2cf0aa8727cf2cd30cd13098804", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlZGQ1OTg4NTYwNWQyY2YwYWE4NzI3Y2YyY2QzMGNkMTMwOTg4MDQ=", "commit": {"author": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2020-12-04T21:26:47Z"}, "committer": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2020-12-04T21:26:47Z"}, "message": "Added a lint-fraction-readability flag to the configuration", "tree": {"sha": "4d7a30e00dbe995e20773c88ef147ee06877c7cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d7a30e00dbe995e20773c88ef147ee06877c7cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6edd59885605d2cf0aa8727cf2cd30cd13098804", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6edd59885605d2cf0aa8727cf2cd30cd13098804", "html_url": "https://github.com/rust-lang/rust/commit/6edd59885605d2cf0aa8727cf2cd30cd13098804", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6edd59885605d2cf0aa8727cf2cd30cd13098804/comments", "author": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13c1a01936605ebd615ee458a7eb02ca89f9ebdb", "url": "https://api.github.com/repos/rust-lang/rust/commits/13c1a01936605ebd615ee458a7eb02ca89f9ebdb", "html_url": "https://github.com/rust-lang/rust/commit/13c1a01936605ebd615ee458a7eb02ca89f9ebdb"}], "stats": {"total": 155, "additions": 118, "deletions": 37}, "files": [{"sha": "58e91dd32bd62bb2c484be6d670c362c8070426d", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6edd59885605d2cf0aa8727cf2cd30cd13098804/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6edd59885605d2cf0aa8727cf2cd30cd13098804/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=6edd59885605d2cf0aa8727cf2cd30cd13098804", "patch": "@@ -1138,7 +1138,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box cargo_common_metadata::CargoCommonMetadata);\n     store.register_late_pass(|| box multiple_crate_versions::MultipleCrateVersions);\n     store.register_late_pass(|| box wildcard_dependencies::WildcardDependencies);\n-    store.register_early_pass(|| box literal_representation::LiteralDigitGrouping);\n+    let literal_representation_lint_fraction_readability = conf.lint_fraction_readability;\n+    store.register_early_pass(move || box literal_representation::LiteralDigitGrouping::new(literal_representation_lint_fraction_readability));\n     let literal_representation_threshold = conf.literal_representation_threshold;\n     store.register_early_pass(move || box literal_representation::DecimalLiteralRepresentation::new(literal_representation_threshold));\n     let enum_variant_name_threshold = conf.enum_variant_name_threshold;"}, {"sha": "3920e5b6e83d14027386aa60b70dfd15921d38e5", "filename": "clippy_lints/src/literal_representation.rs", "status": "modified", "additions": 28, "deletions": 9, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/6edd59885605d2cf0aa8727cf2cd30cd13098804/clippy_lints%2Fsrc%2Fliteral_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6edd59885605d2cf0aa8727cf2cd30cd13098804/clippy_lints%2Fsrc%2Fliteral_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_representation.rs?ref=6edd59885605d2cf0aa8727cf2cd30cd13098804", "patch": "@@ -11,7 +11,7 @@ use rustc_ast::ast::{Expr, ExprKind, Lit, LitKind};\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n-use rustc_session::{declare_lint_pass, declare_tool_lint, impl_lint_pass};\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n declare_clippy_lint! {\n     /// **What it does:** Warns if a long integral or floating-point constant does\n@@ -32,7 +32,7 @@ declare_clippy_lint! {\n     /// ```\n     pub UNREADABLE_LITERAL,\n     pedantic,\n-    \"long integer literal without underscores\"\n+    \"long literal without underscores\"\n }\n \n declare_clippy_lint! {\n@@ -208,7 +208,13 @@ impl WarningType {\n     }\n }\n \n-declare_lint_pass!(LiteralDigitGrouping => [\n+#[allow(clippy::module_name_repetitions)]\n+#[derive(Copy, Clone)]\n+pub struct LiteralDigitGrouping {\n+    lint_fraction_readability: bool,\n+}\n+\n+impl_lint_pass!(LiteralDigitGrouping => [\n     UNREADABLE_LITERAL,\n     INCONSISTENT_DIGIT_GROUPING,\n     LARGE_DIGIT_GROUPS,\n@@ -223,7 +229,7 @@ impl EarlyLintPass for LiteralDigitGrouping {\n         }\n \n         if let ExprKind::Lit(ref lit) = expr.kind {\n-            Self::check_lit(cx, lit)\n+            self.check_lit(cx, lit)\n         }\n     }\n }\n@@ -232,7 +238,13 @@ impl EarlyLintPass for LiteralDigitGrouping {\n const UUID_GROUP_LENS: [usize; 5] = [8, 4, 4, 4, 12];\n \n impl LiteralDigitGrouping {\n-    fn check_lit(cx: &EarlyContext<'_>, lit: &Lit) {\n+    pub fn new(lint_fraction_readability: bool) -> Self {\n+        Self {\n+            lint_fraction_readability,\n+        }\n+    }\n+\n+    fn check_lit(&self, cx: &EarlyContext<'_>, lit: &Lit) {\n         if_chain! {\n             if let Some(src) = snippet_opt(cx, lit.span);\n             if let Some(mut num_lit) = NumericLiteral::from_lit(&src, &lit);\n@@ -247,9 +259,12 @@ impl LiteralDigitGrouping {\n \n                 let result = (|| {\n \n-                    let integral_group_size = Self::get_group_size(num_lit.integer.split('_'), num_lit.radix)?;\n+                    let integral_group_size = Self::get_group_size(num_lit.integer.split('_'), num_lit.radix, true)?;\n                     if let Some(fraction) = num_lit.fraction {\n-                        let fractional_group_size = Self::get_group_size(fraction.rsplit('_'), num_lit.radix)?;\n+                        let fractional_group_size = Self::get_group_size(\n+                            fraction.rsplit('_'),\n+                            num_lit.radix,\n+                            self.lint_fraction_readability)?;\n \n                         let consistent = Self::parts_consistent(integral_group_size,\n                                                                 fractional_group_size,\n@@ -363,7 +378,11 @@ impl LiteralDigitGrouping {\n \n     /// Returns the size of the digit groups (or None if ungrouped) if successful,\n     /// otherwise returns a `WarningType` for linting.\n-    fn get_group_size<'a>(groups: impl Iterator<Item = &'a str>, radix: Radix) -> Result<Option<usize>, WarningType> {\n+    fn get_group_size<'a>(\n+        groups: impl Iterator<Item = &'a str>,\n+        radix: Radix,\n+        lint_unreadable: bool,\n+    ) -> Result<Option<usize>, WarningType> {\n         let mut groups = groups.map(str::len);\n \n         let first = groups.next().expect(\"At least one group\");\n@@ -380,7 +399,7 @@ impl LiteralDigitGrouping {\n             } else {\n                 Ok(Some(second))\n             }\n-        } else if first > 5 {\n+        } else if first > 5 && lint_unreadable {\n             Err(WarningType::UnreadableLiteral)\n         } else {\n             Ok(None)"}, {"sha": "c9d5f781f1b2e387b3f5cfd7fa4d896b00da21ac", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6edd59885605d2cf0aa8727cf2cd30cd13098804/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6edd59885605d2cf0aa8727cf2cd30cd13098804/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=6edd59885605d2cf0aa8727cf2cd30cd13098804", "patch": "@@ -170,6 +170,8 @@ define_Conf! {\n     (warn_on_all_wildcard_imports, \"warn_on_all_wildcard_imports\": bool, false),\n     /// Lint: DISALLOWED_METHOD. The list of blacklisted methods to lint about. NB: `bar` is not here since it has legitimate uses\n     (disallowed_methods, \"disallowed_methods\": Vec<String>, Vec::<String>::new()),\n+    /// Lint: UNREADABLE_LITERAL. Should the fraction of a decimal be linted to include separators.\n+    (lint_fraction_readability, \"lint_fraction_readability\": bool, true),\n }\n \n impl Default for Conf {"}, {"sha": "635e282dc06907c55717c823a20affaa6ee9ebf1", "filename": "tests/ui-toml/lint_decimal_readability/clippy.toml", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6edd59885605d2cf0aa8727cf2cd30cd13098804/tests%2Fui-toml%2Flint_decimal_readability%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/6edd59885605d2cf0aa8727cf2cd30cd13098804/tests%2Fui-toml%2Flint_decimal_readability%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Flint_decimal_readability%2Fclippy.toml?ref=6edd59885605d2cf0aa8727cf2cd30cd13098804", "patch": "@@ -0,0 +1 @@\n+lint-fraction-readability = false\n\\ No newline at end of file"}, {"sha": "9377eb69b233aca281df4305c86149d13f90b2f6", "filename": "tests/ui-toml/lint_decimal_readability/test.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6edd59885605d2cf0aa8727cf2cd30cd13098804/tests%2Fui-toml%2Flint_decimal_readability%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6edd59885605d2cf0aa8727cf2cd30cd13098804/tests%2Fui-toml%2Flint_decimal_readability%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Flint_decimal_readability%2Ftest.rs?ref=6edd59885605d2cf0aa8727cf2cd30cd13098804", "patch": "@@ -0,0 +1,22 @@\n+#[deny(clippy::unreadable_literal)]\n+\n+fn allow_inconsistent_digit_grouping() {\n+    #![allow(clippy::inconsistent_digit_grouping)]\n+    let _pass1 = 100_200_300.123456789;\n+}\n+\n+fn main() {\n+    allow_inconsistent_digit_grouping();\n+\n+    let _pass1 = 100_200_300.100_200_300;\n+    let _pass2 = 1.123456789;\n+    let _pass3 = 1.0;\n+    let _pass4 = 10000.00001;\n+    let _pass5 = 1.123456789e1;\n+\n+    // due to clippy::inconsistent-digit-grouping\n+    let _fail1 = 100_200_300.123456789;\n+\n+    // fail due to the integer part\n+    let _fail2 = 100200300.300200100;\n+}"}, {"sha": "9119ef19a7be1aae36193412bcba84b58b204340", "filename": "tests/ui-toml/lint_decimal_readability/test.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6edd59885605d2cf0aa8727cf2cd30cd13098804/tests%2Fui-toml%2Flint_decimal_readability%2Ftest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6edd59885605d2cf0aa8727cf2cd30cd13098804/tests%2Fui-toml%2Flint_decimal_readability%2Ftest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Flint_decimal_readability%2Ftest.stderr?ref=6edd59885605d2cf0aa8727cf2cd30cd13098804", "patch": "@@ -0,0 +1,10 @@\n+error: digits grouped inconsistently by underscores\n+  --> $DIR/test.rs:18:18\n+   |\n+LL |     let _fail1 = 100_200_300.123456789;\n+   |                  ^^^^^^^^^^^^^^^^^^^^^ help: consider: `100_200_300.123_456_789`\n+   |\n+   = note: `-D clippy::inconsistent-digit-grouping` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}, {"sha": "eff4da7e6582d78ece635e39e0caf147f33ac00e", "filename": "tests/ui-toml/toml_unknown_key/conf_unknown_key.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6edd59885605d2cf0aa8727cf2cd30cd13098804/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6edd59885605d2cf0aa8727cf2cd30cd13098804/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr?ref=6edd59885605d2cf0aa8727cf2cd30cd13098804", "patch": "@@ -1,4 +1,4 @@\n-error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of `msrv`, `blacklisted-names`, `cognitive-complexity-threshold`, `cyclomatic-complexity-threshold`, `doc-valid-idents`, `too-many-arguments-threshold`, `type-complexity-threshold`, `single-char-binding-names-threshold`, `too-large-for-stack`, `enum-variant-name-threshold`, `enum-variant-size-threshold`, `verbose-bit-mask-threshold`, `literal-representation-threshold`, `trivial-copy-size-limit`, `pass-by-value-size-limit`, `too-many-lines-threshold`, `array-size-threshold`, `vec-box-size-threshold`, `max-trait-bounds`, `max-struct-bools`, `max-fn-params-bools`, `warn-on-all-wildcard-imports`, `disallowed-methods`, `third-party` at line 5 column 1\n+error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of `msrv`, `blacklisted-names`, `cognitive-complexity-threshold`, `cyclomatic-complexity-threshold`, `doc-valid-idents`, `too-many-arguments-threshold`, `type-complexity-threshold`, `single-char-binding-names-threshold`, `too-large-for-stack`, `enum-variant-name-threshold`, `enum-variant-size-threshold`, `verbose-bit-mask-threshold`, `literal-representation-threshold`, `trivial-copy-size-limit`, `pass-by-value-size-limit`, `too-many-lines-threshold`, `array-size-threshold`, `vec-box-size-threshold`, `max-trait-bounds`, `max-struct-bools`, `max-fn-params-bools`, `warn-on-all-wildcard-imports`, `disallowed-methods`, `lint-fraction-readability`, `third-party` at line 5 column 1\n \n error: aborting due to previous error\n "}, {"sha": "c2e38037addd2465af022e7ce1b786ca33b24260", "filename": "tests/ui/unreadable_literal.fixed", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6edd59885605d2cf0aa8727cf2cd30cd13098804/tests%2Fui%2Funreadable_literal.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/6edd59885605d2cf0aa8727cf2cd30cd13098804/tests%2Fui%2Funreadable_literal.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funreadable_literal.fixed?ref=6edd59885605d2cf0aa8727cf2cd30cd13098804", "patch": "@@ -10,6 +10,14 @@ macro_rules! foo {\n     };\n }\n \n+struct Bar(f32);\n+\n+macro_rules! bar {\n+    () => {\n+        Bar(100200300400.100200300400500)\n+    };\n+}\n+\n fn main() {\n     let _good = (\n         0b1011_i64,\n@@ -26,10 +34,12 @@ fn main() {\n     let _good_sci = 1.1234e1;\n     let _bad_sci = 1.123_456e1;\n \n-    let _fail9 = 0x00ab_cdef;\n-    let _fail10: u32 = 0xBAFE_BAFE;\n-    let _fail11 = 0x0abc_deff;\n-    let _fail12: i128 = 0x00ab_cabc_abca_bcab_cabc;\n+    let _fail1 = 0x00ab_cdef;\n+    let _fail2: u32 = 0xBAFE_BAFE;\n+    let _fail3 = 0x0abc_deff;\n+    let _fail4: i128 = 0x00ab_cabc_abca_bcab_cabc;\n+    let _fail5 = 1.100_300_400;\n \n     let _ = foo!();\n+    let _ = bar!();\n }"}, {"sha": "8296945b25eb4713fc702fa08d298cdf2d9a6214", "filename": "tests/ui/unreadable_literal.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6edd59885605d2cf0aa8727cf2cd30cd13098804/tests%2Fui%2Funreadable_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6edd59885605d2cf0aa8727cf2cd30cd13098804/tests%2Fui%2Funreadable_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funreadable_literal.rs?ref=6edd59885605d2cf0aa8727cf2cd30cd13098804", "patch": "@@ -10,6 +10,14 @@ macro_rules! foo {\n     };\n }\n \n+struct Bar(f32);\n+\n+macro_rules! bar {\n+    () => {\n+        Bar(100200300400.100200300400500)\n+    };\n+}\n+\n fn main() {\n     let _good = (\n         0b1011_i64,\n@@ -26,10 +34,12 @@ fn main() {\n     let _good_sci = 1.1234e1;\n     let _bad_sci = 1.123456e1;\n \n-    let _fail9 = 0xabcdef;\n-    let _fail10: u32 = 0xBAFEBAFE;\n-    let _fail11 = 0xabcdeff;\n-    let _fail12: i128 = 0xabcabcabcabcabcabc;\n+    let _fail1 = 0xabcdef;\n+    let _fail2: u32 = 0xBAFEBAFE;\n+    let _fail3 = 0xabcdeff;\n+    let _fail4: i128 = 0xabcabcabcabcabcabc;\n+    let _fail5 = 1.100300400;\n \n     let _ = foo!();\n+    let _ = bar!();\n }"}, {"sha": "8436aac17acfe76b42d9a20a21ddd9e81e1723d1", "filename": "tests/ui/unreadable_literal.stderr", "status": "modified", "additions": 24, "deletions": 18, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/6edd59885605d2cf0aa8727cf2cd30cd13098804/tests%2Fui%2Funreadable_literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6edd59885605d2cf0aa8727cf2cd30cd13098804/tests%2Fui%2Funreadable_literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funreadable_literal.stderr?ref=6edd59885605d2cf0aa8727cf2cd30cd13098804", "patch": "@@ -1,66 +1,72 @@\n error: digits of hex or binary literal not grouped by four\n-  --> $DIR/unreadable_literal.rs:17:9\n+  --> $DIR/unreadable_literal.rs:25:9\n    |\n LL |         0x1_234_567,\n    |         ^^^^^^^^^^^ help: consider: `0x0123_4567`\n    |\n    = note: `-D clippy::unusual-byte-groupings` implied by `-D warnings`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:25:17\n+  --> $DIR/unreadable_literal.rs:33:17\n    |\n LL |     let _bad = (0b110110_i64, 0xcafebabe_usize, 123456_f32, 1.234567_f32);\n    |                 ^^^^^^^^^^^^ help: consider: `0b11_0110_i64`\n    |\n    = note: `-D clippy::unreadable-literal` implied by `-D warnings`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:25:31\n+  --> $DIR/unreadable_literal.rs:33:31\n    |\n LL |     let _bad = (0b110110_i64, 0xcafebabe_usize, 123456_f32, 1.234567_f32);\n    |                               ^^^^^^^^^^^^^^^^ help: consider: `0xcafe_babe_usize`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:25:49\n+  --> $DIR/unreadable_literal.rs:33:49\n    |\n LL |     let _bad = (0b110110_i64, 0xcafebabe_usize, 123456_f32, 1.234567_f32);\n    |                                                 ^^^^^^^^^^ help: consider: `123_456_f32`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:25:61\n+  --> $DIR/unreadable_literal.rs:33:61\n    |\n LL |     let _bad = (0b110110_i64, 0xcafebabe_usize, 123456_f32, 1.234567_f32);\n    |                                                             ^^^^^^^^^^^^ help: consider: `1.234_567_f32`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:27:20\n+  --> $DIR/unreadable_literal.rs:35:20\n    |\n LL |     let _bad_sci = 1.123456e1;\n    |                    ^^^^^^^^^^ help: consider: `1.123_456e1`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:29:18\n+  --> $DIR/unreadable_literal.rs:37:18\n    |\n-LL |     let _fail9 = 0xabcdef;\n+LL |     let _fail1 = 0xabcdef;\n    |                  ^^^^^^^^ help: consider: `0x00ab_cdef`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:30:24\n+  --> $DIR/unreadable_literal.rs:38:23\n    |\n-LL |     let _fail10: u32 = 0xBAFEBAFE;\n-   |                        ^^^^^^^^^^ help: consider: `0xBAFE_BAFE`\n+LL |     let _fail2: u32 = 0xBAFEBAFE;\n+   |                       ^^^^^^^^^^ help: consider: `0xBAFE_BAFE`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:31:19\n+  --> $DIR/unreadable_literal.rs:39:18\n    |\n-LL |     let _fail11 = 0xabcdeff;\n-   |                   ^^^^^^^^^ help: consider: `0x0abc_deff`\n+LL |     let _fail3 = 0xabcdeff;\n+   |                  ^^^^^^^^^ help: consider: `0x0abc_deff`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:32:25\n+  --> $DIR/unreadable_literal.rs:40:24\n    |\n-LL |     let _fail12: i128 = 0xabcabcabcabcabcabc;\n-   |                         ^^^^^^^^^^^^^^^^^^^^ help: consider: `0x00ab_cabc_abca_bcab_cabc`\n+LL |     let _fail4: i128 = 0xabcabcabcabcabcabc;\n+   |                        ^^^^^^^^^^^^^^^^^^^^ help: consider: `0x00ab_cabc_abca_bcab_cabc`\n \n-error: aborting due to 10 previous errors\n+error: long literal lacking separators\n+  --> $DIR/unreadable_literal.rs:41:18\n+   |\n+LL |     let _fail5 = 1.100300400;\n+   |                  ^^^^^^^^^^^ help: consider: `1.100_300_400`\n+\n+error: aborting due to 11 previous errors\n "}]}