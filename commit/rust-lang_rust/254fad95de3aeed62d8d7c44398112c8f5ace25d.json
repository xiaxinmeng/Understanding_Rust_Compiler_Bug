{"sha": "254fad95de3aeed62d8d7c44398112c8f5ace25d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1NGZhZDk1ZGUzYWVlZDYyZDhkN2M0NDM5ODExMmM4ZjVhY2UyNWQ=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-03-16T10:45:29Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-03-16T10:45:29Z"}, "message": "Use LocalInternedString inside of AbsolutePathPrinter", "tree": {"sha": "475a2306251cfbb7b3beda0cb4c3cf0a926da5f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/475a2306251cfbb7b3beda0cb4c3cf0a926da5f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/254fad95de3aeed62d8d7c44398112c8f5ace25d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZxoS6lESXlRGMHWcaTCGhp1QZjcFAlyM08kACgkQaTCGhp1Q\nZjcOZw/9GUfDsqxsqFQLbZ/0fmpJqGHu7LWZe+QB4sE0hg29QXAE+//hfZiCWAd9\n9NV8fLszccGeJ4/+NIdedtpbuJnqP7wn8gvhIMoCTf48fbfzLfQ3Gyw7/8Sd8xfr\nXu3yUL1fh71hZHi7rZO9TSZkyPLcwOlOvCBEsRWkjXgDqemsnC6DJiDfI2b3bRLf\ny1bs+drzZX/Ex/wDC6zxD4ydXooInAXMWUKM3tQPNVSRYomabPZR24Lwle1aBGCr\nm3kRHhtuoMS4QyE/f1T2NCdkHGbKsTGoXkcnbvS0gX/9w7ZG/HmPV+tfapw2w4tP\nbdJqJemW7OhNduKNeQ/iQc14AnwSUZ7c8pt5u6kiRwx3J3PIHlxxqGvVSPqLbgFR\n3J4DD2lYsiXlxwIX5S/YmWpURsIPnqolFSWbUiZ8JhTFyjqRVBAgBvPfc8RCxRIy\npJUpH80ihepeLUGyj47hJqZcj4tSM/Afy3Q365vuMGOMBNbAYgnI9hc5JTPUgBVQ\nCQsGDKYlHllJDZePmXtBg3/24a923gYizj4N7IfjPG4mt0PfMW5Ef/MHMOzL4ol/\nI0pQMaSTV/Z9KYi264Suk9BAaEphofUFCi1iNo5axvXpN8tCbBKXJG2ROO4g8VWA\nAu2bEBXE9KdTTMJGpiv34eW5GJ5yeXhJSRMh7tR5QDRB/8iqJF0=\n=RcjN\n-----END PGP SIGNATURE-----", "payload": "tree 475a2306251cfbb7b3beda0cb4c3cf0a926da5f5\nparent dae5c9c685b8b7e936b48bedf41ce4f2e6890629\nauthor flip1995 <hello@philkrones.com> 1552733129 +0100\ncommitter flip1995 <hello@philkrones.com> 1552733129 +0100\n\nUse LocalInternedString inside of AbsolutePathPrinter\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/254fad95de3aeed62d8d7c44398112c8f5ace25d", "html_url": "https://github.com/rust-lang/rust/commit/254fad95de3aeed62d8d7c44398112c8f5ace25d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/254fad95de3aeed62d8d7c44398112c8f5ace25d/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dae5c9c685b8b7e936b48bedf41ce4f2e6890629", "url": "https://api.github.com/repos/rust-lang/rust/commits/dae5c9c685b8b7e936b48bedf41ce4f2e6890629", "html_url": "https://github.com/rust-lang/rust/commit/dae5c9c685b8b7e936b48bedf41ce4f2e6890629"}], "stats": {"total": 25, "additions": 14, "deletions": 11}, "files": [{"sha": "8d71eb54277746368cfc568384777b44107f7ad7", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/254fad95de3aeed62d8d7c44398112c8f5ace25d/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/254fad95de3aeed62d8d7c44398112c8f5ace25d/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=254fad95de3aeed62d8d7c44398112c8f5ace25d", "patch": "@@ -245,7 +245,7 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n                     let def = self.tables.qpath_def(qpath, callee.hir_id);\n                     if let Some(def_id) = def.opt_def_id();\n                     let def_path = get_def_path(self.tcx, def_id);\n-                    if let &[\"core\", \"num\", impl_ty, \"max_value\"] = &def_path.iter().map(|s| s.as_str()).collect::<Vec<_>>()[..];\n+                    if let &[\"core\", \"num\", impl_ty, \"max_value\"] = &def_path[..];\n                     then {\n                        let value = match impl_ty {\n                            \"<impl i8>\" => i8::max_value() as u128,"}, {"sha": "632e96abb99ca48dedf4a123f81b65e481879372", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/254fad95de3aeed62d8d7c44398112c8f5ace25d/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/254fad95de3aeed62d8d7c44398112c8f5ace25d/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=254fad95de3aeed62d8d7c44398112c8f5ace25d", "patch": "@@ -43,7 +43,7 @@ use rustc_errors::Applicability;\n use syntax::ast::{self, LitKind};\n use syntax::attr;\n use syntax::source_map::{Span, DUMMY_SP};\n-use syntax::symbol::{keywords, Symbol};\n+use syntax::symbol::{keywords, Symbol, LocalInternedString};\n \n use crate::reexport::*;\n \n@@ -107,7 +107,7 @@ use rustc::ty::print::Printer;\n impl<'tcx> Printer<'tcx, 'tcx> for AbsolutePathPrinter<'_, 'tcx> {\n     type Error = !;\n \n-    type Path = Vec<String>;\n+    type Path = Vec<LocalInternedString>;\n     type Region = ();\n     type Type = ();\n     type DynExistential = ();\n@@ -141,17 +141,18 @@ impl<'tcx> Printer<'tcx, 'tcx> for AbsolutePathPrinter<'_, 'tcx> {\n         self,\n         cnum: CrateNum,\n         ) -> Result<Self::Path, Self::Error> {\n-        Ok(vec![self.tcx.original_crate_name(cnum).to_string()])\n+        Ok(vec![self.tcx.original_crate_name(cnum).as_str()])\n     }\n+\n     fn path_qualified(\n         self,\n         self_ty: Ty<'tcx>,\n         trait_ref: Option<ty::TraitRef<'tcx>>,\n         ) -> Result<Self::Path, Self::Error> {\n         // This shouldn't ever be needed, but just in case:\n         Ok(vec![match trait_ref {\n-            Some(trait_ref) => format!(\"{:?}\", trait_ref),\n-            None => format!(\"<{}>\", self_ty),\n+            Some(trait_ref) => Symbol::intern(&format!(\"{:?}\", trait_ref)).as_str(),\n+            None => Symbol::intern(&format!(\"<{}>\", self_ty)).as_str(),\n         }])\n     }\n \n@@ -167,22 +168,24 @@ impl<'tcx> Printer<'tcx, 'tcx> for AbsolutePathPrinter<'_, 'tcx> {\n         // This shouldn't ever be needed, but just in case:\n         path.push(match trait_ref {\n             Some(trait_ref) => {\n-                format!(\"<impl {} for {}>\", trait_ref, self_ty)\n+                Symbol::intern(&format!(\"<impl {} for {}>\", trait_ref, self_ty)).as_str()\n             }\n-            None => format!(\"<impl {}>\", self_ty),\n+            None => Symbol::intern(&format!(\"<impl {}>\", self_ty)).as_str(),\n         });\n \n         Ok(path)\n     }\n+\n     fn path_append(\n         self,\n         print_prefix: impl FnOnce(Self) -> Result<Self::Path, Self::Error>,\n         disambiguated_data: &DisambiguatedDefPathData,\n         ) -> Result<Self::Path, Self::Error> {\n         let mut path = print_prefix(self)?;\n-        path.push(disambiguated_data.data.as_interned_str().to_string());\n+        path.push(disambiguated_data.data.as_interned_str().as_str());\n         Ok(path)\n     }\n+\n     fn path_generic_args(\n         self,\n         print_prefix: impl FnOnce(Self) -> Result<Self::Path, Self::Error>,\n@@ -215,8 +218,8 @@ pub fn match_def_path<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId, path\n ///     // The given `def_id` is that of an `Option` type\n /// };\n /// ```\n-pub fn get_def_path<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Vec<String> {\n-    AbsolutePathPrinter { tcx }.print_def_path(def_id, &[]).unwrap()\n+pub fn get_def_path<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Vec<&'static str> {\n+    AbsolutePathPrinter { tcx }.print_def_path(def_id, &[]).unwrap().iter().map(LocalInternedString::get).collect()\n }\n \n /// Checks if type is struct, enum or union type with the given def path."}]}