{"sha": "f33a75c20ced68f5f9b384ab213ced26a1276107", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzM2E3NWMyMGNlZDY4ZjVmOWIzODRhYjIxM2NlZDI2YTEyNzYxMDc=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-05-21T19:12:46Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-06-28T17:08:09Z"}, "message": "Remove `control_flow_destroyed` and properly lower `&&` and `||`", "tree": {"sha": "4c23dd7d27276f3146d67f0b23087f21134e3207", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c23dd7d27276f3146d67f0b23087f21134e3207"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f33a75c20ced68f5f9b384ab213ced26a1276107", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f33a75c20ced68f5f9b384ab213ced26a1276107", "html_url": "https://github.com/rust-lang/rust/commit/f33a75c20ced68f5f9b384ab213ced26a1276107", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f33a75c20ced68f5f9b384ab213ced26a1276107/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66f0cef1b1284b3c4f8d94c1bed0b4fda3d2053c", "url": "https://api.github.com/repos/rust-lang/rust/commits/66f0cef1b1284b3c4f8d94c1bed0b4fda3d2053c", "html_url": "https://github.com/rust-lang/rust/commit/66f0cef1b1284b3c4f8d94c1bed0b4fda3d2053c"}], "stats": {"total": 77, "additions": 0, "deletions": 77}, "files": [{"sha": "d54c6db6d5e6d346f74f55fe82e20d1478ee05e5", "filename": "src/librustc_middle/mir/mod.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f33a75c20ced68f5f9b384ab213ced26a1276107/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f33a75c20ced68f5f9b384ab213ced26a1276107/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fmod.rs?ref=f33a75c20ced68f5f9b384ab213ced26a1276107", "patch": "@@ -148,14 +148,6 @@ pub struct Body<'tcx> {\n     /// Debug information pertaining to user variables, including captures.\n     pub var_debug_info: Vec<VarDebugInfo<'tcx>>,\n \n-    /// Mark this MIR of a const context other than const functions as having converted a `&&` or\n-    /// `||` expression into `&` or `|` respectively. This is problematic because if we ever stop\n-    /// this conversion from happening and use short circuiting, we will cause the following code\n-    /// to change the value of `x`: `let mut x = 42; false && { x = 55; true };`\n-    ///\n-    /// List of places where control flow was destroyed. Used for error reporting.\n-    pub control_flow_destroyed: Vec<(Span, String)>,\n-\n     /// A span representing this MIR, for error reporting.\n     pub span: Span,\n \n@@ -185,7 +177,6 @@ impl<'tcx> Body<'tcx> {\n         arg_count: usize,\n         var_debug_info: Vec<VarDebugInfo<'tcx>>,\n         span: Span,\n-        control_flow_destroyed: Vec<(Span, String)>,\n         generator_kind: Option<GeneratorKind>,\n     ) -> Self {\n         // We need `arg_count` locals, and one for the return place.\n@@ -212,7 +203,6 @@ impl<'tcx> Body<'tcx> {\n             span,\n             required_consts: Vec::new(),\n             ignore_interior_mut_in_const_validation: false,\n-            control_flow_destroyed,\n             predecessor_cache: PredecessorCache::new(),\n         }\n     }\n@@ -236,7 +226,6 @@ impl<'tcx> Body<'tcx> {\n             spread_arg: None,\n             span: DUMMY_SP,\n             required_consts: Vec::new(),\n-            control_flow_destroyed: Vec::new(),\n             generator_kind: None,\n             var_debug_info: Vec::new(),\n             ignore_interior_mut_in_const_validation: false,"}, {"sha": "5671b5b4f04c1d37fbc62d50bc917293a6b7ac1b", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f33a75c20ced68f5f9b384ab213ced26a1276107/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f33a75c20ced68f5f9b384ab213ced26a1276107/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=f33a75c20ced68f5f9b384ab213ced26a1276107", "patch": "@@ -251,7 +251,6 @@ fn new_body<'tcx>(\n         arg_count,\n         vec![],\n         span,\n-        vec![],\n         None,\n     )\n }"}, {"sha": "238ad703fb00a8332094c4a4da950570f5390474", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f33a75c20ced68f5f9b384ab213ced26a1276107/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f33a75c20ced68f5f9b384ab213ced26a1276107/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=f33a75c20ced68f5f9b384ab213ced26a1276107", "patch": "@@ -207,8 +207,6 @@ impl Validator<'mir, 'tcx> {\n             }\n         }\n \n-        check_short_circuiting_in_const_local(self.ccx);\n-\n         if body.is_cfg_cyclic() {\n             // We can't provide a good span for the error here, but this should be caught by the\n             // HIR const-checker anyways.\n@@ -626,44 +624,6 @@ fn error_min_const_fn_violation(tcx: TyCtxt<'_>, span: Span, msg: Cow<'_, str>)\n         .emit();\n }\n \n-fn check_short_circuiting_in_const_local(ccx: &ConstCx<'_, 'tcx>) {\n-    let body = ccx.body;\n-\n-    if body.control_flow_destroyed.is_empty() {\n-        return;\n-    }\n-\n-    let mut locals = body.vars_iter();\n-    if let Some(local) = locals.next() {\n-        let span = body.local_decls[local].source_info.span;\n-        let mut error = ccx.tcx.sess.struct_span_err(\n-            span,\n-            &format!(\n-                \"new features like let bindings are not permitted in {}s \\\n-                which also use short circuiting operators\",\n-                ccx.const_kind(),\n-            ),\n-        );\n-        for (span, kind) in body.control_flow_destroyed.iter() {\n-            error.span_note(\n-                *span,\n-                &format!(\n-                    \"use of {} here does not actually short circuit due to \\\n-                     the const evaluator presently not being able to do control flow. \\\n-                     See issue #49146 <https://github.com/rust-lang/rust/issues/49146> \\\n-                     for more information.\",\n-                    kind\n-                ),\n-            );\n-        }\n-        for local in locals {\n-            let span = body.local_decls[local].source_info.span;\n-            error.span_note(span, \"more locals are defined here\");\n-        }\n-        error.emit();\n-    }\n-}\n-\n fn check_return_ty_is_sync(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, hir_id: HirId) {\n     let ty = body.return_ty();\n     tcx.infer_ctxt().enter(|infcx| {"}, {"sha": "5d0d7c15478f1d0e444a03bb8fdfa84c828c03d6", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f33a75c20ced68f5f9b384ab213ced26a1276107/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f33a75c20ced68f5f9b384ab213ced26a1276107/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=f33a75c20ced68f5f9b384ab213ced26a1276107", "patch": "@@ -133,7 +133,6 @@ impl<'tcx> MirPass<'tcx> for ConstProp {\n             body.arg_count,\n             Default::default(),\n             tcx.def_span(source.def_id()),\n-            Default::default(),\n             body.generator_kind,\n         );\n "}, {"sha": "bd7ebaa01f81b236593e9dd9afcf27913cfef034", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f33a75c20ced68f5f9b384ab213ced26a1276107/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f33a75c20ced68f5f9b384ab213ced26a1276107/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=f33a75c20ced68f5f9b384ab213ced26a1276107", "patch": "@@ -1142,7 +1142,6 @@ pub fn promote_candidates<'tcx>(\n             0,\n             vec![],\n             body.span,\n-            vec![],\n             body.generator_kind,\n         );\n         promoted.ignore_interior_mut_in_const_validation = true;"}, {"sha": "e69f6b30abd5cb89c27c87597a1640bb98484300", "filename": "src/librustc_mir_build/build/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f33a75c20ced68f5f9b384ab213ced26a1276107/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f33a75c20ced68f5f9b384ab213ced26a1276107/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs?ref=f33a75c20ced68f5f9b384ab213ced26a1276107", "patch": "@@ -778,7 +778,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             self.arg_count,\n             self.var_debug_info,\n             self.fn_span,\n-            self.hir.control_flow_destroyed(),\n             self.generator_kind,\n         )\n     }"}, {"sha": "d36990684e03b46ae2c0a1907322609c32e7fce1", "filename": "src/librustc_mir_build/hair/cx/expr.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f33a75c20ced68f5f9b384ab213ced26a1276107/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f33a75c20ced68f5f9b384ab213ced26a1276107/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs?ref=f33a75c20ced68f5f9b384ab213ced26a1276107", "patch": "@@ -255,20 +255,6 @@ fn make_mirror_unadjusted<'a, 'tcx>(\n             } else {\n                 // FIXME overflow\n                 match (op.node, cx.constness) {\n-                    // Destroy control flow if `#![feature(const_if_match)]` is not enabled.\n-                    (hir::BinOpKind::And, hir::Constness::Const)\n-                        if !cx.tcx.features().const_if_match =>\n-                    {\n-                        cx.control_flow_destroyed.push((op.span, \"`&&` operator\".into()));\n-                        ExprKind::Binary { op: BinOp::BitAnd, lhs: lhs.to_ref(), rhs: rhs.to_ref() }\n-                    }\n-                    (hir::BinOpKind::Or, hir::Constness::Const)\n-                        if !cx.tcx.features().const_if_match =>\n-                    {\n-                        cx.control_flow_destroyed.push((op.span, \"`||` operator\".into()));\n-                        ExprKind::Binary { op: BinOp::BitOr, lhs: lhs.to_ref(), rhs: rhs.to_ref() }\n-                    }\n-\n                     (hir::BinOpKind::And, _) => ExprKind::LogicalOp {\n                         op: LogicalOp::And,\n                         lhs: lhs.to_ref(),"}, {"sha": "d8b3ac79e6b9c81c32db548e40ad53197898ca80", "filename": "src/librustc_mir_build/hair/cx/mod.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f33a75c20ced68f5f9b384ab213ced26a1276107/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f33a75c20ced68f5f9b384ab213ced26a1276107/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fmod.rs?ref=f33a75c20ced68f5f9b384ab213ced26a1276107", "patch": "@@ -47,9 +47,6 @@ crate struct Cx<'a, 'tcx> {\n \n     /// Whether this constant/function needs overflow checks.\n     check_overflow: bool,\n-\n-    /// See field with the same name on `mir::Body`.\n-    control_flow_destroyed: Vec<(Span, String)>,\n }\n \n impl<'a, 'tcx> Cx<'a, 'tcx> {\n@@ -89,13 +86,8 @@ impl<'a, 'tcx> Cx<'a, 'tcx> {\n             body_owner: src_def_id.to_def_id(),\n             body_owner_kind,\n             check_overflow,\n-            control_flow_destroyed: Vec::new(),\n         }\n     }\n-\n-    crate fn control_flow_destroyed(self) -> Vec<(Span, String)> {\n-        self.control_flow_destroyed\n-    }\n }\n \n impl<'a, 'tcx> Cx<'a, 'tcx> {"}]}