{"sha": "3dce936753b90dcf80f25251034ccee7afd8ea71", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkY2U5MzY3NTNiOTBkY2Y4MGYyNTI1MTAzNGNjZWU3YWZkOGVhNzE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-04-02T02:04:46Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-04-18T21:07:35Z"}, "message": "core: Remove #[doc(hidden)] attributes and atomic wrapper functions from pipes\n\nNeither are needed", "tree": {"sha": "289d661fb0a6fd25dc6f5a2eb906a3c0ed9a37dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/289d661fb0a6fd25dc6f5a2eb906a3c0ed9a37dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3dce936753b90dcf80f25251034ccee7afd8ea71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3dce936753b90dcf80f25251034ccee7afd8ea71", "html_url": "https://github.com/rust-lang/rust/commit/3dce936753b90dcf80f25251034ccee7afd8ea71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3dce936753b90dcf80f25251034ccee7afd8ea71/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f2d21dc0d69de134e0ed70bcf1a15f4cac4973a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f2d21dc0d69de134e0ed70bcf1a15f4cac4973a", "html_url": "https://github.com/rust-lang/rust/commit/8f2d21dc0d69de134e0ed70bcf1a15f4cac4973a"}], "stats": {"total": 50, "additions": 2, "deletions": 48}, "files": [{"sha": "36cfdbf5617aaff7050276c1985eead4471cf21e", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 2, "deletions": 48, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/3dce936753b90dcf80f25251034ccee7afd8ea71/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dce936753b90dcf80f25251034ccee7afd8ea71/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=3dce936753b90dcf80f25251034ccee7afd8ea71", "patch": "@@ -92,14 +92,12 @@ use ptr;\n use task;\n use vec;\n \n-#[doc(hidden)]\n static SPIN_COUNT: uint = 0;\n \n macro_rules! move_it (\n     { $x:expr } => ( unsafe { let y = *ptr::addr_of(&($x)); y } )\n )\n \n-#[doc(hidden)]\n #[deriving(Eq)]\n enum State {\n     Empty,\n@@ -124,7 +122,6 @@ pub fn BufferHeader() -> BufferHeader {\n }\n \n // This is for protocols to associate extra data to thread around.\n-#[doc(hidden)]\n pub struct Buffer<T> {\n     header: BufferHeader,\n     data: T,\n@@ -185,13 +182,11 @@ pub impl PacketHeader {\n     }\n }\n \n-#[doc(hidden)]\n pub struct Packet<T> {\n     header: PacketHeader,\n     mut payload: Option<T>,\n }\n \n-#[doc(hidden)]\n pub trait HasBuffer {\n     fn set_buffer(&self, b: *libc::c_void);\n }\n@@ -202,14 +197,12 @@ impl<T:Owned> HasBuffer for Packet<T> {\n     }\n }\n \n-#[doc(hidden)]\n pub fn mk_packet<T:Owned>() -> Packet<T> {\n     Packet {\n         header: PacketHeader(),\n         payload: None,\n     }\n }\n-#[doc(hidden)]\n fn unibuffer<T>() -> ~Buffer<Packet<T>> {\n     let b = ~Buffer {\n         header: BufferHeader(),\n@@ -225,7 +218,6 @@ fn unibuffer<T>() -> ~Buffer<Packet<T>> {\n     b\n }\n \n-#[doc(hidden)]\n pub fn packet<T>() -> *Packet<T> {\n     let b = unibuffer();\n     let p = ptr::addr_of(&(b.data));\n@@ -234,7 +226,6 @@ pub fn packet<T>() -> *Packet<T> {\n     p\n }\n \n-#[doc(hidden)]\n pub fn entangle_buffer<T:Owned,Tstart:Owned>(\n     buffer: ~Buffer<T>,\n     init: &fn(*libc::c_void, x: &T) -> *Packet<Tstart>)\n@@ -245,30 +236,6 @@ pub fn entangle_buffer<T:Owned,Tstart:Owned>(\n     (SendPacketBuffered(p), RecvPacketBuffered(p))\n }\n \n-// If I call the rusti versions directly from a polymorphic function,\n-// I get link errors. This is a bug that needs investigated more.\n-#[doc(hidden)]\n-pub fn atomic_xchng_rel(dst: &mut int, src: int) -> int {\n-    unsafe {\n-        intrinsics::atomic_xchg_rel(dst, src)\n-    }\n-}\n-\n-#[doc(hidden)]\n-pub fn atomic_add_acq(dst: &mut int, src: int) -> int {\n-    unsafe {\n-        intrinsics::atomic_xadd_acq(dst, src)\n-    }\n-}\n-\n-#[doc(hidden)]\n-pub fn atomic_sub_rel(dst: &mut int, src: int) -> int {\n-    unsafe {\n-        intrinsics::atomic_xsub_rel(dst, src)\n-    }\n-}\n-\n-#[doc(hidden)]\n pub fn swap_task(dst: &mut *rust_task, src: *rust_task) -> *rust_task {\n     // It might be worth making both acquire and release versions of\n     // this.\n@@ -277,11 +244,9 @@ pub fn swap_task(dst: &mut *rust_task, src: *rust_task) -> *rust_task {\n     }\n }\n \n-#[doc(hidden)]\n #[allow(non_camel_case_types)]\n pub type rust_task = libc::c_void;\n \n-#[doc(hidden)]\n pub mod rustrt {\n     use libc;\n     use super::rust_task;\n@@ -303,7 +268,6 @@ pub mod rustrt {\n     }\n }\n \n-#[doc(hidden)]\n fn wait_event(this: *rust_task) -> *libc::c_void {\n     unsafe {\n         let mut event = ptr::null();\n@@ -316,21 +280,18 @@ fn wait_event(this: *rust_task) -> *libc::c_void {\n     }\n }\n \n-#[doc(hidden)]\n fn swap_state_acq(dst: &mut State, src: State) -> State {\n     unsafe {\n         transmute(intrinsics::atomic_xchg_acq(transmute(dst), src as int))\n     }\n }\n \n-#[doc(hidden)]\n fn swap_state_rel(dst: &mut State, src: State) -> State {\n     unsafe {\n         transmute(intrinsics::atomic_xchg_rel(transmute(dst), src as int))\n     }\n }\n \n-#[doc(hidden)]\n pub unsafe fn get_buffer<T>(p: *PacketHeader) -> ~Buffer<T> {\n     transmute((*p).buf_header())\n }\n@@ -348,7 +309,7 @@ impl<T> ::ops::Drop for BufferResource<T> {\n             let b = move_it!(self.buffer);\n             //let p = ptr::addr_of(*b);\n             //error!(\"drop %?\", p);\n-            let old_count = atomic_sub_rel(&mut b.header.ref_count, 1);\n+            let old_count = intrinsics::atomic_xsub_rel(&mut b.header.ref_count, 1);\n             //let old_count = atomic_xchng_rel(b.header.ref_count, 0);\n             if old_count == 1 {\n                 // The new count is 0.\n@@ -365,15 +326,14 @@ impl<T> ::ops::Drop for BufferResource<T> {\n fn BufferResource<T>(b: ~Buffer<T>) -> BufferResource<T> {\n     //let p = ptr::addr_of(*b);\n     //error!(\"take %?\", p);\n-    atomic_add_acq(&mut b.header.ref_count, 1);\n+    unsafe { intrinsics::atomic_xadd_acq(&mut b.header.ref_count, 1) };\n \n     BufferResource {\n         // tjc: ????\n         buffer: b\n     }\n }\n \n-#[doc(hidden)]\n pub fn send<T,Tbuffer>(p: SendPacketBuffered<T,Tbuffer>, payload: T) -> bool {\n     let header = p.header();\n     let p_ = p.unwrap();\n@@ -550,7 +510,6 @@ pub fn peek<T:Owned,Tb:Owned>(p: &RecvPacketBuffered<T, Tb>) -> bool {\n     }\n }\n \n-#[doc(hidden)]\n fn sender_terminate<T:Owned>(p: *Packet<T>) {\n     let p = unsafe { &*p };\n     match swap_state_rel(&mut p.header.state, Terminated) {\n@@ -581,7 +540,6 @@ fn sender_terminate<T:Owned>(p: *Packet<T>) {\n     }\n }\n \n-#[doc(hidden)]\n fn receiver_terminate<T:Owned>(p: *Packet<T>) {\n     let p = unsafe { &*p };\n     match swap_state_rel(&mut p.header.state, Terminated) {\n@@ -675,7 +633,6 @@ message.\n */\n pub type SendPacket<T> = SendPacketBuffered<T, Packet<T>>;\n \n-#[doc(hidden)]\n pub fn SendPacket<T>(p: *Packet<T>) -> SendPacket<T> {\n     SendPacketBuffered(p)\n }\n@@ -746,7 +703,6 @@ pub impl<T,Tbuffer> SendPacketBuffered<T,Tbuffer> {\n /// message.\n pub type RecvPacket<T> = RecvPacketBuffered<T, Packet<T>>;\n \n-#[doc(hidden)]\n pub fn RecvPacket<T>(p: *Packet<T>) -> RecvPacket<T> {\n     RecvPacketBuffered(p)\n }\n@@ -814,7 +770,6 @@ pub fn RecvPacketBuffered<T,Tbuffer>(p: *Packet<T>)\n     }\n }\n \n-#[doc(hidden)]\n pub fn entangle<T>() -> (SendPacket<T>, RecvPacket<T>) {\n     let p = packet();\n     (SendPacket(p), RecvPacket(p))\n@@ -863,7 +818,6 @@ pub fn select2<A:Owned,Ab:Owned,B:Owned,Bb:Owned>(\n     }\n }\n \n-#[doc(hidden)]\n pub trait Selectable {\n     fn header(&self) -> *PacketHeader;\n }"}]}