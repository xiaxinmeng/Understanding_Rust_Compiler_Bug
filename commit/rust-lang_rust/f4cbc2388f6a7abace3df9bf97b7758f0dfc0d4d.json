{"sha": "f4cbc2388f6a7abace3df9bf97b7758f0dfc0d4d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0Y2JjMjM4OGY2YTdhYmFjZTNkZjliZjk3Yjc3NThmMGRmYzBkNGQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-05-13T00:51:46Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-05-17T20:13:09Z"}, "message": "Pass crate editions to macro expansions, update tests", "tree": {"sha": "0c22aec07a25c5662471b3d14b032d271b7086f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c22aec07a25c5662471b3d14b032d271b7086f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4cbc2388f6a7abace3df9bf97b7758f0dfc0d4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4cbc2388f6a7abace3df9bf97b7758f0dfc0d4d", "html_url": "https://github.com/rust-lang/rust/commit/f4cbc2388f6a7abace3df9bf97b7758f0dfc0d4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4cbc2388f6a7abace3df9bf97b7758f0dfc0d4d/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76bf3454da405fb3ccd56fca49a8423f2b72c40f", "url": "https://api.github.com/repos/rust-lang/rust/commits/76bf3454da405fb3ccd56fca49a8423f2b72c40f", "html_url": "https://github.com/rust-lang/rust/commit/76bf3454da405fb3ccd56fca49a8423f2b72c40f"}], "stats": {"total": 172, "additions": 107, "deletions": 65}, "files": [{"sha": "6c1f72f5f9cd66b6fc9a4a38744e8bf8eab01d2e", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f4cbc2388f6a7abace3df9bf97b7758f0dfc0d4d/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4cbc2388f6a7abace3df9bf97b7758f0dfc0d4d/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=f4cbc2388f6a7abace3df9bf97b7758f0dfc0d4d", "patch": "@@ -35,6 +35,7 @@ use std::{cmp, fs};\n \n use syntax::ast;\n use syntax::attr;\n+use syntax::edition::Edition;\n use syntax::ext::base::SyntaxExtension;\n use syntax::symbol::Symbol;\n use syntax::visit;\n@@ -535,7 +536,10 @@ impl<'a> CrateLoader<'a> {\n             mem::transmute::<*mut u8, fn(&mut Registry)>(sym)\n         };\n \n-        struct MyRegistrar(Vec<(ast::Name, Lrc<SyntaxExtension>)>);\n+        struct MyRegistrar {\n+            extensions: Vec<(ast::Name, Lrc<SyntaxExtension>)>,\n+            edition: Edition,\n+        }\n \n         impl Registry for MyRegistrar {\n             fn register_custom_derive(&mut self,\n@@ -544,36 +548,38 @@ impl<'a> CrateLoader<'a> {\n                                       attributes: &[&'static str]) {\n                 let attrs = attributes.iter().cloned().map(Symbol::intern).collect::<Vec<_>>();\n                 let derive = ProcMacroDerive::new(expand, attrs.clone());\n-                let derive = SyntaxExtension::ProcMacroDerive(Box::new(derive), attrs);\n-                self.0.push((Symbol::intern(trait_name), Lrc::new(derive)));\n+                let derive = SyntaxExtension::ProcMacroDerive(\n+                    Box::new(derive), attrs, self.edition\n+                );\n+                self.extensions.push((Symbol::intern(trait_name), Lrc::new(derive)));\n             }\n \n             fn register_attr_proc_macro(&mut self,\n                                         name: &str,\n                                         expand: fn(TokenStream, TokenStream) -> TokenStream) {\n                 let expand = SyntaxExtension::AttrProcMacro(\n-                    Box::new(AttrProcMacro { inner: expand })\n+                    Box::new(AttrProcMacro { inner: expand }), self.edition\n                 );\n-                self.0.push((Symbol::intern(name), Lrc::new(expand)));\n+                self.extensions.push((Symbol::intern(name), Lrc::new(expand)));\n             }\n \n             fn register_bang_proc_macro(&mut self,\n                                         name: &str,\n                                         expand: fn(TokenStream) -> TokenStream) {\n                 let expand = SyntaxExtension::ProcMacro(\n-                    Box::new(BangProcMacro { inner: expand })\n+                    Box::new(BangProcMacro { inner: expand }), self.edition\n                 );\n-                self.0.push((Symbol::intern(name), Lrc::new(expand)));\n+                self.extensions.push((Symbol::intern(name), Lrc::new(expand)));\n             }\n         }\n \n-        let mut my_registrar = MyRegistrar(Vec::new());\n+        let mut my_registrar = MyRegistrar { extensions: Vec::new(), edition: root.edition };\n         registrar(&mut my_registrar);\n \n         // Intentionally leak the dynamic library. We can't ever unload it\n         // since the library can make things that will live arbitrarily long.\n         mem::forget(lib);\n-        my_registrar.0\n+        my_registrar.extensions\n     }\n \n     /// Look for a plugin registrar. Returns library path, crate"}, {"sha": "c8f25f935e9fe13807ea87dc9dbdb071719c933a", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f4cbc2388f6a7abace3df9bf97b7758f0dfc0d4d/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4cbc2388f6a7abace3df9bf97b7758f0dfc0d4d/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=f4cbc2388f6a7abace3df9bf97b7758f0dfc0d4d", "patch": "@@ -518,7 +518,8 @@ impl CrateStore for cstore::CStore {\n             return LoadedMacro::ProcMacro(proc_macros[id.index.to_proc_macro_index()].1.clone());\n         } else if data.name == \"proc_macro\" &&\n                   self.get_crate_data(id.krate).item_name(id.index) == \"quote\" {\n-            let ext = SyntaxExtension::ProcMacro(Box::new(::proc_macro::__internal::Quoter));\n+            let ext = SyntaxExtension::ProcMacro(Box::new(::proc_macro::__internal::Quoter),\n+                                                 data.edition());\n             return LoadedMacro::ProcMacro(Lrc::new(ext));\n         }\n "}, {"sha": "ea15f4c75b96c73bb0bd7336242812ac7be2f398", "filename": "src/librustc_plugin/registry.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f4cbc2388f6a7abace3df9bf97b7758f0dfc0d4d/src%2Flibrustc_plugin%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4cbc2388f6a7abace3df9bf97b7758f0dfc0d4d/src%2Flibrustc_plugin%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fregistry.rs?ref=f4cbc2388f6a7abace3df9bf97b7758f0dfc0d4d", "patch": "@@ -15,6 +15,7 @@ use rustc::session::Session;\n \n use syntax::ext::base::{SyntaxExtension, NamedSyntaxExtension, NormalTT, IdentTT};\n use syntax::ext::base::MacroExpanderFn;\n+use syntax::ext::hygiene;\n use syntax::symbol::Symbol;\n use syntax::ast;\n use syntax::feature_gate::AttributeType;\n@@ -107,15 +108,17 @@ impl<'a> Registry<'a> {\n                 def_info: _,\n                 allow_internal_unstable,\n                 allow_internal_unsafe,\n-                unstable_feature\n+                unstable_feature,\n+                edition,\n             } => {\n                 let nid = ast::CRATE_NODE_ID;\n                 NormalTT {\n                     expander,\n                     def_info: Some((nid, self.krate_span)),\n                     allow_internal_unstable,\n                     allow_internal_unsafe,\n-                    unstable_feature\n+                    unstable_feature,\n+                    edition,\n                 }\n             }\n             IdentTT(ext, _, allow_internal_unstable) => {\n@@ -150,6 +153,7 @@ impl<'a> Registry<'a> {\n             allow_internal_unstable: false,\n             allow_internal_unsafe: false,\n             unstable_feature: None,\n+            edition: hygiene::default_edition(),\n         });\n     }\n "}, {"sha": "d3cc533cd36a460661ab60423b3d317c12ed086b", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f4cbc2388f6a7abace3df9bf97b7758f0dfc0d4d/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4cbc2388f6a7abace3df9bf97b7758f0dfc0d4d/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=f4cbc2388f6a7abace3df9bf97b7758f0dfc0d4d", "patch": "@@ -588,7 +588,8 @@ impl<'a> Resolver<'a> {\n \n         let ext = Lrc::new(macro_rules::compile(&self.session.parse_sess,\n                                                &self.session.features_untracked(),\n-                                               &macro_def));\n+                                               &macro_def,\n+                                               self.cstore.crate_edition_untracked(def_id.krate)));\n         self.macro_map.insert(def_id, ext.clone());\n         ext\n     }"}, {"sha": "0fc963a1367126180e043a40fdf953063dda190b", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f4cbc2388f6a7abace3df9bf97b7758f0dfc0d4d/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4cbc2388f6a7abace3df9bf97b7758f0dfc0d4d/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=f4cbc2388f6a7abace3df9bf97b7758f0dfc0d4d", "patch": "@@ -24,7 +24,7 @@ use syntax::errors::DiagnosticBuilder;\n use syntax::ext::base::{self, Annotatable, Determinacy, MultiModifier, MultiDecorator};\n use syntax::ext::base::{MacroKind, SyntaxExtension, Resolver as SyntaxResolver};\n use syntax::ext::expand::{Expansion, ExpansionKind, Invocation, InvocationKind, find_attr_invoc};\n-use syntax::ext::hygiene::{Mark, MarkKind};\n+use syntax::ext::hygiene::{self, Mark, MarkKind};\n use syntax::ext::placeholders::placeholder;\n use syntax::ext::tt::macro_rules;\n use syntax::feature_gate::{self, emit_feature_err, GateIssue};\n@@ -328,7 +328,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n         for did in self.unused_macros.iter() {\n             let id_span = match *self.macro_map[did] {\n                 SyntaxExtension::NormalTT { def_info, .. } => def_info,\n-                SyntaxExtension::DeclMacro(.., osp) => osp,\n+                SyntaxExtension::DeclMacro(.., osp, _) => osp,\n                 _ => None,\n             };\n             if let Some((id, span)) = id_span {\n@@ -371,7 +371,7 @@ impl<'a> Resolver<'a> {\n         };\n         for path in traits {\n             match self.resolve_macro(scope, path, MacroKind::Derive, force) {\n-                Ok(ext) => if let SyntaxExtension::ProcMacroDerive(_, ref inert_attrs) = *ext {\n+                Ok(ext) => if let SyntaxExtension::ProcMacroDerive(_, ref inert_attrs, _) = *ext {\n                     if inert_attrs.contains(&attr_name) {\n                         // FIXME(jseyfried) Avoid `mem::replace` here.\n                         let dummy_item = placeholder(ExpansionKind::Items, ast::DUMMY_NODE_ID)\n@@ -755,7 +755,7 @@ impl<'a> Resolver<'a> {\n         let def_id = self.definitions.local_def_id(item.id);\n         let ext = Lrc::new(macro_rules::compile(&self.session.parse_sess,\n                                                &self.session.features_untracked(),\n-                                               item));\n+                                               item, hygiene::default_edition()));\n         self.macro_map.insert(def_id, ext);\n \n         let def = match item.node { ast::ItemKind::MacroDef(ref def) => def, _ => unreachable!() };\n@@ -803,14 +803,15 @@ impl<'a> Resolver<'a> {\n \n         match *ext {\n             // If `ext` is a procedural macro, check if we've already warned about it\n-            AttrProcMacro(_) | ProcMacro(_) => if !self.warned_proc_macros.insert(name) { return; },\n+            AttrProcMacro(..) | ProcMacro(..) =>\n+                if !self.warned_proc_macros.insert(name) { return; },\n             _ => return,\n         }\n \n         let warn_msg = match *ext {\n-            AttrProcMacro(_) => \"attribute procedural macros cannot be \\\n-                                 imported with `#[macro_use]`\",\n-            ProcMacro(_) => \"procedural macros cannot be imported with `#[macro_use]`\",\n+            AttrProcMacro(..) => \"attribute procedural macros cannot be \\\n+                                  imported with `#[macro_use]`\",\n+            ProcMacro(..) => \"procedural macros cannot be imported with `#[macro_use]`\",\n             _ => return,\n         };\n "}, {"sha": "f7d4227977c834ebd7defa449137df221d689f01", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f4cbc2388f6a7abace3df9bf97b7758f0dfc0d4d/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4cbc2388f6a7abace3df9bf97b7758f0dfc0d4d/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=f4cbc2388f6a7abace3df9bf97b7758f0dfc0d4d", "patch": "@@ -14,9 +14,10 @@ use ast::{self, Attribute, Name, PatKind, MetaItem};\n use attr::HasAttrs;\n use codemap::{self, CodeMap, Spanned, respan};\n use syntax_pos::{Span, MultiSpan, DUMMY_SP};\n+use edition::Edition;\n use errors::{DiagnosticBuilder, DiagnosticId};\n use ext::expand::{self, Expansion, Invocation};\n-use ext::hygiene::{Mark, SyntaxContext};\n+use ext::hygiene::{self, Mark, SyntaxContext};\n use fold::{self, Folder};\n use parse::{self, parser, DirectoryOwnership};\n use parse::token;\n@@ -586,13 +587,13 @@ pub enum SyntaxExtension {\n     MultiModifier(Box<MultiItemModifier + sync::Sync + sync::Send>),\n \n     /// A function-like procedural macro. TokenStream -> TokenStream.\n-    ProcMacro(Box<ProcMacro + sync::Sync + sync::Send>),\n+    ProcMacro(Box<ProcMacro + sync::Sync + sync::Send>, Edition),\n \n     /// An attribute-like procedural macro. TokenStream, TokenStream -> TokenStream.\n     /// The first TokenSteam is the attribute, the second is the annotated item.\n     /// Allows modification of the input items and adding new items, similar to\n     /// MultiModifier, but uses TokenStreams, rather than AST nodes.\n-    AttrProcMacro(Box<AttrProcMacro + sync::Sync + sync::Send>),\n+    AttrProcMacro(Box<AttrProcMacro + sync::Sync + sync::Send>, Edition),\n \n     /// A normal, function-like syntax extension.\n     ///\n@@ -608,6 +609,8 @@ pub enum SyntaxExtension {\n         allow_internal_unsafe: bool,\n         /// The macro's feature name if it is unstable, and the stability feature\n         unstable_feature: Option<(Symbol, u32)>,\n+        /// Edition of the crate in which the macro is defined\n+        edition: Edition,\n     },\n \n     /// A function-like syntax extension that has an extra ident before\n@@ -619,17 +622,16 @@ pub enum SyntaxExtension {\n     /// The input is the annotated item.\n     /// Allows generating code to implement a Trait for a given struct\n     /// or enum item.\n-    ProcMacroDerive(Box<MultiItemModifier +\n-                        sync::Sync +\n-                        sync::Send>, Vec<Symbol> /* inert attribute names */),\n+    ProcMacroDerive(Box<MultiItemModifier + sync::Sync + sync::Send>,\n+                    Vec<Symbol> /* inert attribute names */, Edition),\n \n     /// An attribute-like procedural macro that derives a builtin trait.\n     BuiltinDerive(BuiltinDeriveFn),\n \n     /// A declarative macro, e.g. `macro m() {}`.\n     ///\n     /// The second element is the definition site span.\n-    DeclMacro(Box<TTMacroExpander + sync::Sync + sync::Send>, Option<(ast::NodeId, Span)>),\n+    DeclMacro(Box<TTMacroExpander + sync::Sync + sync::Send>, Option<(ast::NodeId, Span)>, Edition),\n }\n \n impl SyntaxExtension {\n@@ -660,6 +662,21 @@ impl SyntaxExtension {\n             _ => false,\n         }\n     }\n+\n+    pub fn edition(&self) -> Edition {\n+        match *self {\n+            SyntaxExtension::NormalTT { edition, .. } |\n+            SyntaxExtension::DeclMacro(.., edition) |\n+            SyntaxExtension::ProcMacro(.., edition) |\n+            SyntaxExtension::AttrProcMacro(.., edition) |\n+            SyntaxExtension::ProcMacroDerive(.., edition) => edition,\n+            // Unstable legacy stuff\n+            SyntaxExtension::IdentTT(..) |\n+            SyntaxExtension::MultiDecorator(..) |\n+            SyntaxExtension::MultiModifier(..) |\n+            SyntaxExtension::BuiltinDerive(..) => hygiene::default_edition(),\n+        }\n+    }\n }\n \n pub type NamedSyntaxExtension = (Name, SyntaxExtension);"}, {"sha": "ee96963362b6c419f21ef0010ecc5f62e8072d8f", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f4cbc2388f6a7abace3df9bf97b7758f0dfc0d4d/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4cbc2388f6a7abace3df9bf97b7758f0dfc0d4d/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=f4cbc2388f6a7abace3df9bf97b7758f0dfc0d4d", "patch": "@@ -502,7 +502,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 span: None,\n                 allow_internal_unstable: false,\n                 allow_internal_unsafe: false,\n-                edition: hygiene::default_edition(),\n+                edition: ext.edition(),\n             }\n         });\n \n@@ -521,7 +521,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 items.push(item);\n                 Some(kind.expect_from_annotatables(items))\n             }\n-            AttrProcMacro(ref mac) => {\n+            AttrProcMacro(ref mac, ..) => {\n                 self.gate_proc_macro_attr_item(attr.span, &item);\n                 let item_tok = TokenTree::Token(DUMMY_SP, Token::interpolated(match item {\n                     Annotatable::Item(item) => token::NtItem(item),\n@@ -610,7 +610,8 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                                           allow_internal_unstable,\n                                           allow_internal_unsafe,\n                                           // can't infer this type\n-                                          unstable_feature: Option<(Symbol, u32)>| {\n+                                          unstable_feature: Option<(Symbol, u32)>,\n+                                          edition| {\n \n             // feature-gate the macro invocation\n             if let Some((feature, issue)) = unstable_feature {\n@@ -643,16 +644,17 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                     span: def_site_span,\n                     allow_internal_unstable,\n                     allow_internal_unsafe,\n-                    edition: hygiene::default_edition(),\n+                    edition,\n                 },\n             });\n             Ok(())\n         };\n \n         let opt_expanded = match *ext {\n-            DeclMacro(ref expand, def_span) => {\n+            DeclMacro(ref expand, def_span, edition) => {\n                 if let Err(dummy_span) = validate_and_set_expn_info(self, def_span.map(|(_, s)| s),\n-                                                                    false, false, None) {\n+                                                                    false, false, None,\n+                                                                    edition) {\n                     dummy_span\n                 } else {\n                     kind.make_from(expand.expand(self.cx, span, mac.node.stream()))\n@@ -665,11 +667,13 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 allow_internal_unstable,\n                 allow_internal_unsafe,\n                 unstable_feature,\n+                edition,\n             } => {\n                 if let Err(dummy_span) = validate_and_set_expn_info(self, def_info.map(|(_, s)| s),\n                                                                     allow_internal_unstable,\n                                                                     allow_internal_unsafe,\n-                                                                    unstable_feature) {\n+                                                                    unstable_feature,\n+                                                                    edition) {\n                     dummy_span\n                 } else {\n                     kind.make_from(expander.expand(self.cx, span, mac.node.stream()))\n@@ -712,7 +716,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 kind.dummy(span)\n             }\n \n-            ProcMacro(ref expandfun) => {\n+            ProcMacro(ref expandfun, edition) => {\n                 if ident.name != keywords::Invalid.name() {\n                     let msg =\n                         format!(\"macro {}! expects no ident argument, given '{}'\", path, ident);\n@@ -731,7 +735,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                             // FIXME probably want to follow macro_rules macros here.\n                             allow_internal_unstable: false,\n                             allow_internal_unsafe: false,\n-                            edition: hygiene::default_edition(),\n+                            edition,\n                         },\n                     });\n \n@@ -806,12 +810,12 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 span: None,\n                 allow_internal_unstable: false,\n                 allow_internal_unsafe: false,\n-                edition: hygiene::default_edition(),\n+                edition: ext.edition(),\n             }\n         };\n \n         match *ext {\n-            ProcMacroDerive(ref ext, _) => {\n+            ProcMacroDerive(ref ext, ..) => {\n                 invoc.expansion_data.mark.set_expn_info(expn_info);\n                 let span = span.with_ctxt(self.cx.backtrace());\n                 let dummy = ast::MetaItem { // FIXME(jseyfried) avoid this"}, {"sha": "d1a7e7aac266ef8291a2ec7433cabcefe9078939", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f4cbc2388f6a7abace3df9bf97b7758f0dfc0d4d/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4cbc2388f6a7abace3df9bf97b7758f0dfc0d4d/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=f4cbc2388f6a7abace3df9bf97b7758f0dfc0d4d", "patch": "@@ -10,6 +10,7 @@\n \n use {ast, attr};\n use syntax_pos::{Span, DUMMY_SP};\n+use edition::Edition;\n use ext::base::{DummyResult, ExtCtxt, MacResult, SyntaxExtension};\n use ext::base::{NormalTT, TTMacroExpander};\n use ext::expand::{Expansion, ExpansionKind};\n@@ -183,7 +184,8 @@ fn generic_extension<'cx>(cx: &'cx mut ExtCtxt,\n // Holy self-referential!\n \n /// Converts a `macro_rules!` invocation into a syntax extension.\n-pub fn compile(sess: &ParseSess, features: &Features, def: &ast::Item) -> SyntaxExtension {\n+pub fn compile(sess: &ParseSess, features: &Features, def: &ast::Item, edition: Edition)\n+               -> SyntaxExtension {\n     let lhs_nm = ast::Ident::with_empty_ctxt(Symbol::gensym(\"lhs\"));\n     let rhs_nm = ast::Ident::with_empty_ctxt(Symbol::gensym(\"rhs\"));\n \n@@ -298,10 +300,11 @@ pub fn compile(sess: &ParseSess, features: &Features, def: &ast::Item) -> Syntax\n             def_info: Some((def.id, def.span)),\n             allow_internal_unstable,\n             allow_internal_unsafe,\n-            unstable_feature\n+            unstable_feature,\n+            edition,\n         }\n     } else {\n-        SyntaxExtension::DeclMacro(expander, Some((def.id, def.span)))\n+        SyntaxExtension::DeclMacro(expander, Some((def.id, def.span)), edition)\n     }\n }\n "}, {"sha": "15fcfac13adf2b02563e781e635d850c3eeda2ac", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f4cbc2388f6a7abace3df9bf97b7758f0dfc0d4d/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4cbc2388f6a7abace3df9bf97b7758f0dfc0d4d/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=f4cbc2388f6a7abace3df9bf97b7758f0dfc0d4d", "patch": "@@ -54,6 +54,7 @@ pub mod proc_macro_impl;\n use rustc_data_structures::sync::Lrc;\n use syntax::ast;\n use syntax::ext::base::{MacroExpanderFn, NormalTT, NamedSyntaxExtension};\n+use syntax::ext::hygiene;\n use syntax::symbol::Symbol;\n \n pub fn register_builtins(resolver: &mut syntax::ext::base::Resolver,\n@@ -74,6 +75,7 @@ pub fn register_builtins(resolver: &mut syntax::ext::base::Resolver,\n                         allow_internal_unstable: false,\n                         allow_internal_unsafe: false,\n                         unstable_feature: None,\n+                        edition: hygiene::default_edition(),\n                     });\n         )* }\n     }\n@@ -128,7 +130,8 @@ pub fn register_builtins(resolver: &mut syntax::ext::base::Resolver,\n                 def_info: None,\n                 allow_internal_unstable: true,\n                 allow_internal_unsafe: false,\n-                unstable_feature: None\n+                unstable_feature: None,\n+                edition: hygiene::default_edition(),\n             });\n \n     for (name, ext) in user_exts {"}, {"sha": "d7ede763838687f79a620e7f4982329364bce61c", "filename": "src/test/run-pass-fulldeps/auxiliary/plugin_args.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4cbc2388f6a7abace3df9bf97b7758f0dfc0d4d/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fplugin_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4cbc2388f6a7abace3df9bf97b7758f0dfc0d4d/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fplugin_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fplugin_args.rs?ref=f4cbc2388f6a7abace3df9bf97b7758f0dfc0d4d", "patch": "@@ -20,6 +20,7 @@ extern crate rustc_plugin;\n \n use std::borrow::ToOwned;\n use syntax::ast;\n+use syntax::ext::hygiene;\n use syntax::ext::build::AstBuilder;\n use syntax::ext::base::{TTMacroExpander, ExtCtxt, MacResult, MacEager, NormalTT};\n use syntax::print::pprust;\n@@ -54,5 +55,6 @@ pub fn plugin_registrar(reg: &mut Registry) {\n             allow_internal_unstable: false,\n             allow_internal_unsafe: false,\n             unstable_feature: None,\n+            edition: hygiene::default_edition(),\n         });\n }"}, {"sha": "ae2083427725a84c6b4e2f2f54ee09b868797a53", "filename": "src/test/run-pass/edition-keywords-2015-2018.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f4cbc2388f6a7abace3df9bf97b7758f0dfc0d4d/src%2Ftest%2Frun-pass%2Fedition-keywords-2015-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4cbc2388f6a7abace3df9bf97b7758f0dfc0d4d/src%2Ftest%2Frun-pass%2Fedition-keywords-2015-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fedition-keywords-2015-2018.rs?ref=f4cbc2388f6a7abace3df9bf97b7758f0dfc0d4d", "patch": "@@ -28,14 +28,14 @@ pub fn check_async() {\n \n     if passes_ident!(async) == 1 {} // OK\n     if passes_ident!(r#async) == 1 {} // OK\n-    one_async::async(); // OK\n-    one_async::r#async(); // OK\n+    // one_async::async(); // ERROR, unresolved name\n+    // one_async::r#async(); // ERROR, unresolved name\n     two_async::async(); // OK\n     two_async::r#async(); // OK\n }\n \n mod one_async {\n-    produces_async! {} // ERROR, FIXME\n+    // produces_async! {} // ERROR, reserved\n }\n mod two_async {\n     produces_async_raw! {} // OK\n@@ -54,13 +54,13 @@ pub fn check_proc() {\n     // if passes_ident!(proc) == 1 {} // ERROR, reserved\n     if passes_ident!(r#proc) == 1 {} // OK\n     // one_proc::proc(); // ERROR, reserved\n-    // one_proc::r#proc(); // OK, FIXME\n+    one_proc::r#proc(); // OK\n     // two_proc::proc(); // ERROR, reserved\n     two_proc::r#proc(); // OK\n }\n \n mod one_proc {\n-    // produces_proc! {} // OK, FIXME\n+    produces_proc! {} // OK\n }\n mod two_proc {\n     produces_proc_raw! {} // OK"}, {"sha": "b70ccd6b0f4daf0124aaef51b707281662390daf", "filename": "src/test/run-pass/edition-keywords-2018-2015.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f4cbc2388f6a7abace3df9bf97b7758f0dfc0d4d/src%2Ftest%2Frun-pass%2Fedition-keywords-2018-2015.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4cbc2388f6a7abace3df9bf97b7758f0dfc0d4d/src%2Ftest%2Frun-pass%2Fedition-keywords-2018-2015.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fedition-keywords-2018-2015.rs?ref=f4cbc2388f6a7abace3df9bf97b7758f0dfc0d4d", "patch": "@@ -29,13 +29,13 @@ pub fn check_async() {\n     // if passes_ident!(async) == 1 {} // ERROR, reserved\n     if passes_ident!(r#async) == 1 {} // OK\n     // one_async::async(); // ERROR, reserved\n-    // one_async::r#async(); // OK, FIXME\n+    one_async::r#async(); // OK\n     // two_async::async(); // ERROR, reserved\n     two_async::r#async(); // OK\n }\n \n mod one_async {\n-    // produces_async! {} // OK, FIXME\n+    produces_async! {} // OK\n }\n mod two_async {\n     produces_async_raw! {} // OK\n@@ -53,14 +53,14 @@ pub fn check_proc() {\n \n     if passes_ident!(proc) == 1 {} // OK\n     if passes_ident!(r#proc) == 1 {} // OK\n-    one_proc::proc(); // OK\n-    one_proc::r#proc(); // OK\n+    // one_proc::proc(); // ERROR, unresolved name\n+    // one_proc::r#proc(); // ERROR, unresolved name\n     two_proc::proc(); // OK\n     two_proc::r#proc(); // OK\n }\n \n mod one_proc {\n-    produces_proc! {} // ERROR, FIXME\n+    // produces_proc! {} // ERROR, reserved\n }\n mod two_proc {\n     produces_proc_raw! {} // OK"}, {"sha": "59117184686b1593d3345de2ac2b52d12c1f3972", "filename": "src/test/ui/edition-keywords-2015-2018-expansion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4cbc2388f6a7abace3df9bf97b7758f0dfc0d4d/src%2Ftest%2Fui%2Fedition-keywords-2015-2018-expansion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4cbc2388f6a7abace3df9bf97b7758f0dfc0d4d/src%2Ftest%2Fui%2Fedition-keywords-2015-2018-expansion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fedition-keywords-2015-2018-expansion.rs?ref=f4cbc2388f6a7abace3df9bf97b7758f0dfc0d4d", "patch": "@@ -18,15 +18,15 @@ extern crate edition_kw_macro_2018;\n \n // `async`\n mod one_async {\n-    produces_async! {} // ERROR, FIXME\n+    produces_async! {} // ERROR expected identifier, found reserved keyword\n }\n mod two_async {\n     produces_async_raw! {} // OK\n }\n \n // `proc`\n mod one_proc {\n-    produces_proc! {} // OK, FIXME\n+    produces_proc! {} // OK\n }\n mod two_proc {\n     produces_proc_raw! {} // OK"}, {"sha": "a1716efb5375475eb677f435228a99dc6639817f", "filename": "src/test/ui/edition-keywords-2015-2018-expansion.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f4cbc2388f6a7abace3df9bf97b7758f0dfc0d4d/src%2Ftest%2Fui%2Fedition-keywords-2015-2018-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4cbc2388f6a7abace3df9bf97b7758f0dfc0d4d/src%2Ftest%2Fui%2Fedition-keywords-2015-2018-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fedition-keywords-2015-2018-expansion.stderr?ref=f4cbc2388f6a7abace3df9bf97b7758f0dfc0d4d", "patch": "@@ -1,8 +1,8 @@\n-error: expected identifier, found reserved keyword `proc`\n-  --> $DIR/edition-keywords-2015-2018-expansion.rs:29:5\n+error: expected identifier, found reserved keyword `async`\n+  --> $DIR/edition-keywords-2015-2018-expansion.rs:21:5\n    |\n-LL |     produces_proc! {} // OK, FIXME\n-   |     ^^^^^^^^^^^^^^^^^ expected identifier, found reserved keyword\n+LL |     produces_async! {} // ERROR expected identifier, found reserved keyword\n+   |     ^^^^^^^^^^^^^^^^^^ expected identifier, found reserved keyword\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n "}, {"sha": "04de1018f15884fb0bb97b565adfdd4f55df4d24", "filename": "src/test/ui/edition-keywords-2018-2015-expansion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4cbc2388f6a7abace3df9bf97b7758f0dfc0d4d/src%2Ftest%2Fui%2Fedition-keywords-2018-2015-expansion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4cbc2388f6a7abace3df9bf97b7758f0dfc0d4d/src%2Ftest%2Fui%2Fedition-keywords-2018-2015-expansion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fedition-keywords-2018-2015-expansion.rs?ref=f4cbc2388f6a7abace3df9bf97b7758f0dfc0d4d", "patch": "@@ -18,15 +18,15 @@ extern crate edition_kw_macro_2015;\n \n // `async`\n mod one_async {\n-    produces_async! {} // OK, FIXME\n+    produces_async! {} // OK\n }\n mod two_async {\n     produces_async_raw! {} // OK\n }\n \n // `proc`\n mod one_proc {\n-    produces_proc! {} // ERROR, FIXME\n+    produces_proc! {} // ERROR expected identifier, found reserved keyword\n }\n mod two_proc {\n     produces_proc_raw! {} // OK"}, {"sha": "320022e526a24fa1e32c07efe7f4832c42eace05", "filename": "src/test/ui/edition-keywords-2018-2015-expansion.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f4cbc2388f6a7abace3df9bf97b7758f0dfc0d4d/src%2Ftest%2Fui%2Fedition-keywords-2018-2015-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4cbc2388f6a7abace3df9bf97b7758f0dfc0d4d/src%2Ftest%2Fui%2Fedition-keywords-2018-2015-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fedition-keywords-2018-2015-expansion.stderr?ref=f4cbc2388f6a7abace3df9bf97b7758f0dfc0d4d", "patch": "@@ -1,8 +1,8 @@\n-error: expected identifier, found reserved keyword `async`\n-  --> $DIR/edition-keywords-2018-2015-expansion.rs:21:5\n+error: expected identifier, found reserved keyword `proc`\n+  --> $DIR/edition-keywords-2018-2015-expansion.rs:29:5\n    |\n-LL |     produces_async! {} // OK, FIXME\n-   |     ^^^^^^^^^^^^^^^^^^ expected identifier, found reserved keyword\n+LL |     produces_proc! {} // ERROR expected identifier, found reserved keyword\n+   |     ^^^^^^^^^^^^^^^^^ expected identifier, found reserved keyword\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n "}]}