{"sha": "28f735bb26706af3dddc7fa52ea4122a408cb023", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4ZjczNWJiMjY3MDZhZjNkZGRjN2ZhNTJlYTQxMjJhNDA4Y2IwMjM=", "commit": {"author": {"name": "Bruno Kirschner", "email": "bruno.kirschner@online.de", "date": "2018-06-03T16:46:11Z"}, "committer": {"name": "Bruno Kirschner", "email": "bruno.kirschner@online.de", "date": "2018-06-03T20:56:17Z"}, "message": "Cleaned implements_ord helper function in boolean lint file.", "tree": {"sha": "e168c651a00eed24c149cae69da87b691e0dd436", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e168c651a00eed24c149cae69da87b691e0dd436"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28f735bb26706af3dddc7fa52ea4122a408cb023", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28f735bb26706af3dddc7fa52ea4122a408cb023", "html_url": "https://github.com/rust-lang/rust/commit/28f735bb26706af3dddc7fa52ea4122a408cb023", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28f735bb26706af3dddc7fa52ea4122a408cb023/comments", "author": {"login": "0ndorio", "id": 1611081, "node_id": "MDQ6VXNlcjE2MTEwODE=", "avatar_url": "https://avatars.githubusercontent.com/u/1611081?v=4", "gravatar_id": "", "url": "https://api.github.com/users/0ndorio", "html_url": "https://github.com/0ndorio", "followers_url": "https://api.github.com/users/0ndorio/followers", "following_url": "https://api.github.com/users/0ndorio/following{/other_user}", "gists_url": "https://api.github.com/users/0ndorio/gists{/gist_id}", "starred_url": "https://api.github.com/users/0ndorio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/0ndorio/subscriptions", "organizations_url": "https://api.github.com/users/0ndorio/orgs", "repos_url": "https://api.github.com/users/0ndorio/repos", "events_url": "https://api.github.com/users/0ndorio/events{/privacy}", "received_events_url": "https://api.github.com/users/0ndorio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "0ndorio", "id": 1611081, "node_id": "MDQ6VXNlcjE2MTEwODE=", "avatar_url": "https://avatars.githubusercontent.com/u/1611081?v=4", "gravatar_id": "", "url": "https://api.github.com/users/0ndorio", "html_url": "https://github.com/0ndorio", "followers_url": "https://api.github.com/users/0ndorio/followers", "following_url": "https://api.github.com/users/0ndorio/following{/other_user}", "gists_url": "https://api.github.com/users/0ndorio/gists{/gist_id}", "starred_url": "https://api.github.com/users/0ndorio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/0ndorio/subscriptions", "organizations_url": "https://api.github.com/users/0ndorio/orgs", "repos_url": "https://api.github.com/users/0ndorio/repos", "events_url": "https://api.github.com/users/0ndorio/events{/privacy}", "received_events_url": "https://api.github.com/users/0ndorio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80728a22015846f28d32d5b759d04ccf048cdf9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/80728a22015846f28d32d5b759d04ccf048cdf9b", "html_url": "https://github.com/rust-lang/rust/commit/80728a22015846f28d32d5b759d04ccf048cdf9b"}], "stats": {"total": 34, "additions": 19, "deletions": 15}, "files": [{"sha": "0a453618e1939ff34b8ae4c09d97134535097004", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/28f735bb26706af3dddc7fa52ea4122a408cb023/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f735bb26706af3dddc7fa52ea4122a408cb023/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=28f735bb26706af3dddc7fa52ea4122a408cb023", "patch": "@@ -123,10 +123,9 @@ impl<'a, 'tcx, 'v> Hir2Qmm<'a, 'tcx, 'v> {\n             let negated = match e.node {\n                 ExprBinary(binop, ref lhs, ref rhs) => {\n  \n-                    match implements_ord(self.cx, lhs) {\n-                        Some(true) => (),\n-                        _ => continue,\n-                    };\n+                    if !implements_ord(self.cx, lhs) {\n+                        continue;\n+                    }\n \n                     let mk_expr = |op| {\n                         Expr {\n@@ -181,10 +180,9 @@ impl<'a, 'tcx, 'v> SuggestContext<'a, 'tcx, 'v> {\n         match expr.node {\n             ExprBinary(binop, ref lhs, ref rhs) => {\n \n-                match implements_ord(self.cx, lhs) {\n-                    Some(true) => (),\n-                    _ => return None,\n-                };\n+                if !implements_ord(self.cx, lhs) {\n+                    return None;\n+                }\n \n                 match binop.node {\n                     BiEq => Some(\" != \"),\n@@ -458,12 +456,8 @@ impl<'a, 'tcx> Visitor<'tcx> for NonminimalBoolVisitor<'a, 'tcx> {\n }\n \n \n-fn implements_ord<'a, 'tcx>(cx: &'a LateContext<'a, 'tcx>, expr: &Expr) -> Option<bool> {\n+fn implements_ord<'a, 'tcx>(cx: &'a LateContext<'a, 'tcx>, expr: &Expr) -> bool {\n     let ty = cx.tables.expr_ty(expr);\n-\n-    return if let Some(id) = get_trait_def_id(cx, &paths::ORD) {\n-        Some(implements_trait(cx, ty, id, &[]))\n-    } else {\n-        None\n-    };\n+    get_trait_def_id(cx, &paths::ORD)\n+        .map_or(false, |id| implements_trait(cx, ty, id, &[]))\n }"}, {"sha": "9daf15d378ccf32ce9ac8fe3bf13d60323a616ce", "filename": "tests/ui/booleans.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/28f735bb26706af3dddc7fa52ea4122a408cb023/tests%2Fui%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f735bb26706af3dddc7fa52ea4122a408cb023/tests%2Fui%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbooleans.rs?ref=28f735bb26706af3dddc7fa52ea4122a408cb023", "patch": "@@ -114,3 +114,13 @@ fn warn_for_built_in_methods_with_negation() {\n     if !res.is_some() { }\n     if !res.is_none() { }\n }\n+\n+#[allow(neg_cmp_op_on_partial_ord)]\n+fn dont_warn_for_negated_partial_ord_comparision() {\n+    let a: f64 = unimplemented!();\n+    let b: f64 = unimplemented!();\n+    let _ = !(a < b);\n+    let _ = !(a <= b);\n+    let _ = !(a > b);\n+    let _ = !(a >= b);\n+}"}]}