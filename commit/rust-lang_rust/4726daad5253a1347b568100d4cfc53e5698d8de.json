{"sha": "4726daad5253a1347b568100d4cfc53e5698d8de", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3MjZkYWFkNTI1M2ExMzQ3YjU2ODEwMGQ0Y2ZjNTNlNTY5OGQ4ZGU=", "commit": {"author": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2020-04-07T22:22:42Z"}, "committer": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2020-04-07T22:43:27Z"}, "message": "Use int assoc consts in checked_conversions lint", "tree": {"sha": "698c522f064c5ff33352d8b96b7f6bc9ce1707fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/698c522f064c5ff33352d8b96b7f6bc9ce1707fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4726daad5253a1347b568100d4cfc53e5698d8de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4726daad5253a1347b568100d4cfc53e5698d8de", "html_url": "https://github.com/rust-lang/rust/commit/4726daad5253a1347b568100d4cfc53e5698d8de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4726daad5253a1347b568100d4cfc53e5698d8de/comments", "author": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "committer": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b192f2cd1592fc882b29bfad5baf3bfaa7acde2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b192f2cd1592fc882b29bfad5baf3bfaa7acde2f", "html_url": "https://github.com/rust-lang/rust/commit/b192f2cd1592fc882b29bfad5baf3bfaa7acde2f"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "d9776dd50a836add3ab5635534b41bbe225c6180", "filename": "clippy_lints/src/checked_conversions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4726daad5253a1347b568100d4cfc53e5698d8de/clippy_lints%2Fsrc%2Fchecked_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4726daad5253a1347b568100d4cfc53e5698d8de/clippy_lints%2Fsrc%2Fchecked_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fchecked_conversions.rs?ref=4726daad5253a1347b568100d4cfc53e5698d8de", "patch": "@@ -21,7 +21,7 @@ declare_clippy_lint! {\n     /// ```rust\n     /// # let foo: u32 = 5;\n     /// # let _ =\n-    /// foo <= i32::max_value() as u32\n+    /// foo <= i32::MAX as u32\n     /// # ;\n     /// ```\n     ///\n@@ -179,7 +179,7 @@ impl ConversionType {\n     }\n }\n \n-/// Check for `expr <= (to_type::max_value() as from_type)`\n+/// Check for `expr <= (to_type::MAX as from_type)`\n fn check_upper_bound<'tcx>(expr: &'tcx Expr<'tcx>) -> Option<Conversion<'tcx>> {\n     if_chain! {\n          if let ExprKind::Binary(ref op, ref left, ref right) = &expr.kind;\n@@ -194,7 +194,7 @@ fn check_upper_bound<'tcx>(expr: &'tcx Expr<'tcx>) -> Option<Conversion<'tcx>> {\n     }\n }\n \n-/// Check for `expr >= 0|(to_type::min_value() as from_type)`\n+/// Check for `expr >= 0|(to_type::MIN as from_type)`\n fn check_lower_bound<'tcx>(expr: &'tcx Expr<'tcx>) -> Option<Conversion<'tcx>> {\n     fn check_function<'a>(candidate: &'a Expr<'a>, check: &'a Expr<'a>) -> Option<Conversion<'a>> {\n         (check_lower_bound_zero(candidate, check)).or_else(|| (check_lower_bound_min(candidate, check)))\n@@ -222,7 +222,7 @@ fn check_lower_bound_zero<'a>(candidate: &'a Expr<'_>, check: &'a Expr<'_>) -> O\n     }\n }\n \n-/// Check for `expr >= (to_type::min_value() as from_type)`\n+/// Check for `expr >= (to_type::MIN as from_type)`\n fn check_lower_bound_min<'a>(candidate: &'a Expr<'_>, check: &'a Expr<'_>) -> Option<Conversion<'a>> {\n     if let Some((from, to)) = get_types_from_cast(check, MIN_VALUE, SINTS) {\n         Conversion::try_new(candidate, from, to)"}]}