{"sha": "9ee4d1aadc7f4151193a7f53d1fcbb4fddf40ece", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllZTRkMWFhZGM3ZjQxNTExOTNhN2Y1M2QxZmNiYjRmZGRmNDBlY2U=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-15T10:18:20Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-15T11:38:07Z"}, "message": "reword Miri validity errors: undefined -> uninitialized", "tree": {"sha": "7deafadda236b68a8cd014acaf61155153659782", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7deafadda236b68a8cd014acaf61155153659782"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ee4d1aadc7f4151193a7f53d1fcbb4fddf40ece", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ee4d1aadc7f4151193a7f53d1fcbb4fddf40ece", "html_url": "https://github.com/rust-lang/rust/commit/9ee4d1aadc7f4151193a7f53d1fcbb4fddf40ece", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ee4d1aadc7f4151193a7f53d1fcbb4fddf40ece/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "351eefe93a96f98d37182701590493b6710175c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/351eefe93a96f98d37182701590493b6710175c3", "html_url": "https://github.com/rust-lang/rust/commit/351eefe93a96f98d37182701590493b6710175c3"}], "stats": {"total": 23, "additions": 14, "deletions": 9}, "files": [{"sha": "d60f6f38d07f2daa4a43e47eaa183cfe23bff9db", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9ee4d1aadc7f4151193a7f53d1fcbb4fddf40ece/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ee4d1aadc7f4151193a7f53d1fcbb4fddf40ece/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=9ee4d1aadc7f4151193a7f53d1fcbb4fddf40ece", "patch": "@@ -322,7 +322,11 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, 'tcx, M\n         let value = self.ecx.read_immediate(value)?;\n         // Handle wide pointers.\n         // Check metadata early, for better diagnostics\n-        let place = try_validation!(self.ecx.ref_to_mplace(value), \"undefined pointer\", self.path);\n+        let place = try_validation!(\n+            self.ecx.ref_to_mplace(value),\n+            format_args!(\"uninitialized {}\", kind),\n+            self.path\n+        );\n         if place.layout.is_unsized() {\n             self.check_wide_ptr_meta(place.meta, place.layout)?;\n         }\n@@ -334,7 +338,7 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, 'tcx, M\n                     format_args!(\"invalid {} metadata: {}\", kind, msg),\n                     self.path\n                 ),\n-                _ => bug!(\"Unexpected error during ptr size_and_align_of: {}\", err),\n+                _ => bug!(\"unexpected error during ptr size_and_align_of: {}\", err),\n             },\n         };\n         let (size, align) = size_and_align\n@@ -477,10 +481,11 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, 'tcx, M\n             }\n             ty::RawPtr(..) => {\n                 // We are conservative with undef for integers, but try to\n-                // actually enforce our current rules for raw pointers.\n+                // actually enforce the strict rules for raw pointers (mostly because\n+                // that lets us re-use `ref_to_mplace`).\n                 let place = try_validation!(\n                     self.ecx.ref_to_mplace(self.ecx.read_immediate(value)?),\n-                    \"undefined pointer\",\n+                    \"uninitialized raw pointer\",\n                     self.path\n                 );\n                 if place.layout.is_unsized() {\n@@ -776,14 +781,14 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n                         // For some errors we might be able to provide extra information\n                         match err.kind {\n                             err_ub!(InvalidUndefBytes(Some(ptr))) => {\n-                                // Some byte was undefined, determine which\n+                                // Some byte was uninitialized, determine which\n                                 // element that byte belongs to so we can\n                                 // provide an index.\n                                 let i = usize::try_from(ptr.offset.bytes() / layout.size.bytes())\n                                     .unwrap();\n                                 self.path.push(PathElem::ArrayElem(i));\n \n-                                throw_validation_failure!(\"undefined bytes\", self.path)\n+                                throw_validation_failure!(\"uninitialized value\", self.path)\n                             }\n                             // Other errors shouldn't be possible\n                             _ => return Err(err),"}, {"sha": "f12753e5dcacc38b80a4e9db6480a995bf94f5dd", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ee4d1aadc7f4151193a7f53d1fcbb4fddf40ece/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ee4d1aadc7f4151193a7f53d1fcbb4fddf40ece/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.stderr?ref=9ee4d1aadc7f4151193a7f53d1fcbb4fddf40ece", "patch": "@@ -62,7 +62,7 @@ LL | |\n LL | |     let uninit_len = MaybeUninit::<usize> { uninit: () };\n LL | |     mem::transmute((42, uninit_len))\n LL | | };\n-   | |__^ type validation failed: encountered undefined pointer\n+   | |__^ type validation failed: encountered uninitialized reference\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n@@ -130,7 +130,7 @@ LL | |\n LL | |     let uninit_len = MaybeUninit::<usize> { uninit: () };\n LL | |     mem::transmute((42, uninit_len))\n LL | | };\n-   | |__^ type validation failed: encountered undefined pointer\n+   | |__^ type validation failed: encountered uninitialized raw pointer\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n "}, {"sha": "946c375ced7013283467686b4e1cf9c79f09093d", "filename": "src/test/ui/consts/const-eval/union-ice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ee4d1aadc7f4151193a7f53d1fcbb4fddf40ece/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ee4d1aadc7f4151193a7f53d1fcbb4fddf40ece/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ice.stderr?ref=9ee4d1aadc7f4151193a7f53d1fcbb4fddf40ece", "patch": "@@ -27,7 +27,7 @@ LL | |         unsafe { UNION.field3 },\n ...  |\n LL | |     a: 42,\n LL | | };\n-   | |__^ type validation failed: encountered undefined bytes at .b[1]\n+   | |__^ type validation failed: encountered uninitialized value at .b[1]\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n "}]}