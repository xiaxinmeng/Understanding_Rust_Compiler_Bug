{"sha": "0d60e8d0021a8d3c8214bb0462e03020d3742cfb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkNjBlOGQwMDIxYThkM2M4MjE0YmIwNDYyZTAzMDIwZDM3NDJjZmI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2015-07-09T21:34:30Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2015-07-09T22:39:26Z"}, "message": "Update RELEASES.md for 1.2", "tree": {"sha": "7030a2a4a60554f2f343d8c8e634e5ab155e5af0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7030a2a4a60554f2f343d8c8e634e5ab155e5af0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d60e8d0021a8d3c8214bb0462e03020d3742cfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d60e8d0021a8d3c8214bb0462e03020d3742cfb", "html_url": "https://github.com/rust-lang/rust/commit/0d60e8d0021a8d3c8214bb0462e03020d3742cfb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d60e8d0021a8d3c8214bb0462e03020d3742cfb/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7dbcf8f571d7e6ef0f6240f0f2860606cfd9142", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7dbcf8f571d7e6ef0f6240f0f2860606cfd9142", "html_url": "https://github.com/rust-lang/rust/commit/e7dbcf8f571d7e6ef0f6240f0f2860606cfd9142"}], "stats": {"total": 137, "additions": 133, "deletions": 4}, "files": [{"sha": "636bcc4312eb829a8618d964f81b7c61cef821ea", "filename": "RELEASES.md", "status": "modified", "additions": 133, "deletions": 4, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/0d60e8d0021a8d3c8214bb0462e03020d3742cfb/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/0d60e8d0021a8d3c8214bb0462e03020d3742cfb/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=0d60e8d0021a8d3c8214bb0462e03020d3742cfb", "patch": "@@ -1,15 +1,144 @@\n Version 1.2.0 (August 2015)\n ===========================\n \n+* ~1200 changes, numerous bugfixes\n+\n Highlights\n ----------\n \n-* [Parallel codegen][parcodegen] is now working again, which can substantially\n-  speed up large builds in debug mode; It also gets another ~33% speedup when\n-  bootstrapping on a 4 core machine (using 8 jobs). It's not enabled by default,\n-  but will be \"in the near future\"\n+* [Dynamically-sized-type coercions][dst] allow smart pointer types\n+  like `Rc` to contain types without a fixed size, arrays and trait\n+  objects, finally enabling use of `Rc<[T]>` and completing the\n+  implementation of DST.\n+* [Parallel codegen][parcodegen] is now working again, which can\n+  substantially speed up large builds in debug mode; It also gets\n+  another ~33% speedup when bootstrapping on a 4 core machine (using 8\n+  jobs). It's not enabled by default, but will be \"in the near\n+  future\". It can be activated with the `-C codegen-units=N` flag to\n+  `rustc`.\n+\n+Breaking Changes\n+----------------\n+\n+* The [`to_uppercase`] and [`to_lowercase`] methods on `char` now do\n+  unicode case mapping, which is a previously-planned change in\n+  behavior and considered a bugfix.\n+* [`mem::align_of`] now specifies [the *minimum alignment* for\n+  T][align], which is usually the alignment programs are interested\n+  in, and the same value reported by clang's\n+  `alignof`. [`mem::min_align_of`] is deprecated. This is not known to\n+  break real code.\n+\n+Language\n+--------\n \n+* Patterns with `ref mut` now correctly invoke [`DerefMut`] when\n+  matching against dereferencable values.\n+\n+Libraries\n+---------\n \n+* The [`Extend`] trait, which grows a collection from an iterator, is\n+  implemented over iterators of references, for `String`, `Vec`,\n+  `LinkedList`, `VecDeque`, `EnumSet`, `BinaryHeap`, `VecMap`,\n+  `BTreeSet` and `BTreeMap`. [RFC][extend-rfc].\n+* The [`iter::once`] function returns an iterator that yields a single\n+  element.\n+* The [`iter::empty`] function returns an iterator that yields no\n+  elements.\n+* The [`matches`] and [`rmatches`] methods on `str` return iterators\n+  over substring matches.\n+* [`Cell`] and [`RefCell`] both implement [`Eq`].\n+* A number of methods for wrapping arithmetic are added to the\n+  integral types, [`wrapping_div`], [`wrapping_rem`],\n+  [`wrapping_neg`], [`wrapping_shl`], [`wrapping_shr`]. These are in\n+  addition to the existing [`wrapping_add`], [`wrapping_sub`], and\n+  [`wrapping_mul`] methods, and alternatives to the [`Wrapping`]\n+  type.. It is illegal for the default arithmetic operations in Rust\n+  to overflow; the desire to wrap must be explicit.\n+* The `{:#?}` formatting specifier [displays the alternate,\n+  pretty-printed][debugfmt] form of the `Debug` formatter. This\n+  feature was actually introduced prior to 1.0 with little\n+  fanfare.\n+* [`fmt::Formatter`] implements [`fmt::Write`], a `fmt`-specific trait\n+  for writing data to formatted strings, similar to [`io::Write`].\n+* [`fmt::Formatter`] adds 'debug builder' methods, [`debug_struct`],\n+  [`debug_tuple`], [`debug_list`], [`debug_set`], [`debug_map`]. These\n+  are used by code generators to emit implementations of [`Debug`].\n+* `str` has new [`to_uppercase`][strup] and [`to_lowercase`][strlow]\n+  methods that convert case, following Unicode case mapping.\n+* It is now easier to handle to poisoned locks. The [`PoisonError`]\n+  type, returned by failing lock operations, exposes `into_inner`,\n+  `get_ref`, and `get_mut`, which all give access to the inner lock\n+  guard, and allow the poisoned lock to continue to operate. The\n+  `is_poisoned` method of [`RwLock`] and [`Mutex`] can poll for a\n+  poisoned lock without attempting to take the lock.\n+* On Unix the [`FromRawFd`] trait is implemented for [`Stdio`], and\n+  [`AsRawFd`] for [`ChildStdin`], [`ChildStdout`], [`ChildStderr`].\n+  On Windows the `FromRawHandle` trait is implemented for `Stdio`,\n+  and `AsRawHandle` for `ChildStdin`, `ChildStdout`,\n+  `ChildStderr`.\n+* [`io::ErrorKind`] has a new variant, `InvalidData`, which indicates\n+  malformed input.\n+\n+Misc\n+----\n+\n+* `rustc` employs smarter heuristics for guessing at [typos].\n+* `rustc` emits more efficient code for [no-op conversions between\n+  unsafe pointers][nop].\n+* Fat pointers are now [passed in pairs of immediate arguments][fat],\n+  resulting in faster compile times and smaller code.\n+\n+[`Extend`]: http://doc.rust-lang.org/nightly/std/iter/trait.Extend.html\n+[extend-rfc]: https://github.com/rust-lang/rfcs/blob/master/text/0839-embrace-extend-extinguish.md\n+[`iter::once`]: http://doc.rust-lang.org/nightly/std/iter/fn.once.html\n+[`iter::empty`]: http://doc.rust-lang.org/nightly/std/iter/fn.empty.html\n+[`matches`]: http://doc.rust-lang.org/nightly/std/primitive.str.html#method.matches\n+[`rmatches`]: http://doc.rust-lang.org/nightly/std/primitive.str.html#method.rmatches\n+[`Cell`]: http://doc.rust-lang.org/nightly/std/cell/struct.Cell.html\n+[`RefCell`]: http://doc.rust-lang.org/nightly/std/cell/struct.RefCell.html\n+[`wrapping_add`]: http://doc.rust-lang.org/nightly/std/primitive.i8.html#method.wrapping_add\n+[`wrapping_sub`]: http://doc.rust-lang.org/nightly/std/primitive.i8.html#method.wrapping_sub\n+[`wrapping_mul`]: http://doc.rust-lang.org/nightly/std/primitive.i8.html#method.wrapping_mul\n+[`wrapping_div`]: http://doc.rust-lang.org/nightly/std/primitive.i8.html#method.wrapping_div\n+[`wrapping_rem`]: http://doc.rust-lang.org/nightly/std/primitive.i8.html#method.wrapping_rem\n+[`wrapping_neg`]: http://doc.rust-lang.org/nightly/std/primitive.i8.html#method.wrapping_neg\n+[`wrapping_shl`]: http://doc.rust-lang.org/nightly/std/primitive.i8.html#method.wrapping_shl\n+[`wrapping_shr`]: http://doc.rust-lang.org/nightly/std/primitive.i8.html#method.wrapping_shr\n+[`Wrapping`]: http://doc.rust-lang.org/nightly/std/num/struct.Wrapping.html\n+[`fmt::Formatter`]: http://doc.rust-lang.org/nightly/std/fmt/struct.Formatter.html\n+[`fmt::Write`]: http://doc.rust-lang.org/nightly/std/fmt/trait.Write.html\n+[`io::Write`]: http://doc.rust-lang.org/nightly/std/io/trait.Write.html\n+[`debug_struct`]: http://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html#method.debug_struct\n+[`debug_tuple`]: http://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html#method.debug_tuple\n+[`debug_list`]: http://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html#method.debug_list\n+[`debug_set`]: http://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html#method.debug_set\n+[`debug_map`]: http://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html#method.debug_map\n+[`Debug`]: http://doc.rust-lang.org/nightly/std/fmt/trait.Debug.html\n+[strup]: http://doc.rust-lang.org/nightly/std/primitive.str.html#method.to_uppercase\n+[strlow]: http://doc.rust-lang.org/nightly/std/primitive.str.html#method.to_lowercase\n+[`to_uppercase`]: http://doc.rust-lang.org/nightly/std/primitive.char.html#method.to_uppercase\n+[`to_lowercase`]: http://doc.rust-lang.org/nightly/std/primitive.char.html#method.to_lowercase\n+[`PoisonError`]: http://doc.rust-lang.org/nightly/std/sync/struct.PoisonError.html\n+[`RwLock`]: http://doc.rust-lang.org/nightly/std/sync/struct.RwLock.html\n+[`Mutex`]: http://doc.rust-lang.org/nightly/std/sync/struct.Mutex.html\n+[`FromRawFd`]: http://doc.rust-lang.org/nightly/std/os/unix/io/trait.FromRawFd.html\n+[`AsRawFd`]: http://doc.rust-lang.org/nightly/std/os/unix/io/trait.AsRawFd.html\n+[`Stdio`]: http://doc.rust-lang.org/nightly/std/process/struct.Stdio.html\n+[`ChildStdin`]: http://doc.rust-lang.org/nightly/std/process/struct.ChildStdin.html\n+[`ChildStdout`]: http://doc.rust-lang.org/nightly/std/process/struct.ChildStdout.html\n+[`ChildStderr`]: http://doc.rust-lang.org/nightly/std/process/struct.ChildStderr.html\n+[`io::ErrorKind`]: http://doc.rust-lang.org/nightly/std/io/enum.ErrorKind.html\n+[debugfmt]: https://www.reddit.com/r/rust/comments/3ceaui/psa_produces_prettyprinted_debug_output/\n+[`DerefMut`]: http://doc.rust-lang.org/nightly/std/ops/trait.DerefMut.html\n+[`mem::align_of`]: http://doc.rust-lang.org/nightly/std/mem/fn.align_of.html\n+[align]: https://github.com/rust-lang/rust/pull/25646\n+[`mem::min_align_of`]: http://doc.rust-lang.org/nightly/std/mem/fn.min_align_of.html\n+[typos]: https://github.com/rust-lang/rust/pull/26087\n+[nop]: https://github.com/rust-lang/rust/pull/26336\n+[fat]: https://github.com/rust-lang/rust/pull/26411\n+[dst]: https://github.com/rust-lang/rfcs/blob/master/text/0982-dst-coercion.md\n [parcodegen]: https://github.com/rust-lang/rust/pull/26018\n \n "}]}