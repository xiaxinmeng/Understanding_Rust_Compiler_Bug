{"sha": "e35c021aa44d9e86569592657f85943bae1815a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzNWMwMjFhYTQ0ZDllODY1Njk1OTI2NTdmODU5NDNiYWUxODE1YTU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-01T23:47:46Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-01T23:53:53Z"}, "message": "Parse \"\",str as istrs. Pretty print istrs as \"\",str. Issue #855", "tree": {"sha": "02ba7cc6cbc600503bf87519725bf8f516970680", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02ba7cc6cbc600503bf87519725bf8f516970680"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e35c021aa44d9e86569592657f85943bae1815a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e35c021aa44d9e86569592657f85943bae1815a5", "html_url": "https://github.com/rust-lang/rust/commit/e35c021aa44d9e86569592657f85943bae1815a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e35c021aa44d9e86569592657f85943bae1815a5/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8a833dccd5dc6e7c2b0694e22334724fe32e91d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8a833dccd5dc6e7c2b0694e22334724fe32e91d", "html_url": "https://github.com/rust-lang/rust/commit/d8a833dccd5dc6e7c2b0694e22334724fe32e91d"}], "stats": {"total": 17, "additions": 5, "deletions": 12}, "files": [{"sha": "47e557a35e50213679aaeb451fa468c9f373bdb0", "filename": "src/comp/front/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e35c021aa44d9e86569592657f85943bae1815a5/src%2Fcomp%2Ffront%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e35c021aa44d9e86569592657f85943bae1815a5/src%2Fcomp%2Ffront%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fattr.rs?ref=e35c021aa44d9e86569592657f85943bae1815a5", "patch": "@@ -196,7 +196,7 @@ fn span<@T>(item: &T) -> ast::spanned<T> {\n \n fn mk_name_value_item_str(name: ast::ident,\n                           value: &istr) -> @ast::meta_item {\n-    let value_lit = span(ast::lit_str(value, ast::sk_rc));\n+    let value_lit = span(ast::lit_str(value, ast::sk_unique));\n     ret mk_name_value_item(name, value_lit);\n }\n "}, {"sha": "d2c73bfb16fdd3d481fb9ba1d138b966a25c809a", "filename": "src/comp/syntax/ext/ident_to_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e35c021aa44d9e86569592657f85943bae1815a5/src%2Fcomp%2Fsyntax%2Fext%2Fident_to_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e35c021aa44d9e86569592657f85943bae1815a5/src%2Fcomp%2Fsyntax%2Fext%2Fident_to_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fident_to_str.rs?ref=e35c021aa44d9e86569592657f85943bae1815a5", "patch": "@@ -20,6 +20,6 @@ fn expand_syntax_ext(cx: &ext_ctxt, sp: codemap::span, arg: @ast::expr,\n     ret make_new_lit(cx, sp,\n                      ast::lit_str(expr_to_ident(cx, args[0u],\n                                                 ~\"expected an ident\"),\n-                                  ast::sk_rc));\n+                                  ast::sk_unique));\n \n }"}, {"sha": "e22ebeb78d3b2ee4f7666701eba915bcbbe2f9e0", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e35c021aa44d9e86569592657f85943bae1815a5/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e35c021aa44d9e86569592657f85943bae1815a5/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=e35c021aa44d9e86569592657f85943bae1815a5", "patch": "@@ -493,7 +493,7 @@ fn parse_ty(p: &parser, colons_before_params: bool) -> @ast::ty {\n     } else if eat_word(p, ~\"float\") {\n         t = ast::ty_float;\n     } else if eat_word(p, ~\"str\") {\n-        t = ast::ty_str;\n+        t = ast::ty_istr;\n     } else if eat_word(p, ~\"istr\") {\n         t = ast::ty_istr;\n     } else if eat_word(p, ~\"char\") {\n@@ -708,7 +708,7 @@ fn parse_lit(p: &parser) -> ast::lit {\n           token::LIT_CHAR(c) { p.bump(); lit = ast::lit_char(c); }\n           token::LIT_STR(s) {\n             p.bump();\n-            lit = ast::lit_str(p.get_str(s), ast::sk_rc);\n+            lit = ast::lit_str(p.get_str(s), ast::sk_unique);\n           }\n           token::LPAREN. {\n             p.bump();"}, {"sha": "f1382341eb94ab5796a5da03f8a65c8dcb6fefa1", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e35c021aa44d9e86569592657f85943bae1815a5/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e35c021aa44d9e86569592657f85943bae1815a5/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=e35c021aa44d9e86569592657f85943bae1815a5", "patch": "@@ -279,7 +279,7 @@ fn print_type(s: &ps, ty: &@ast::ty) {\n       }\n       ast::ty_char. { word(s.s, ~\"char\"); }\n       ast::ty_str. { word(s.s, ~\"str\"); }\n-      ast::ty_istr. { word(s.s, ~\"istr\"); }\n+      ast::ty_istr. { word(s.s, ~\"str\"); }\n       ast::ty_box(mt) { word(s.s, ~\"@\"); print_mt(s, mt); }\n       ast::ty_vec(mt) {\n         word(s.s, ~\"[\");\n@@ -1497,12 +1497,6 @@ fn print_literal(s: &ps, lit: &@ast::lit) {\n     alt next_lit(s) {\n       some(lt) {\n         if lt.pos == lit.span.lo {\n-            // FIXME: This is a hack until istrs replace strings, since\n-            // istrs are prefixed with a token that is not part of the literal\n-            alt lit.node {\n-              ast::lit_str(_, ast::sk_unique.) { word(s.s, ~\"~\"); }\n-              _ { }\n-            }\n             word(s.s, lt.lit);\n             s.cur_lit += 1u;\n             ret;\n@@ -1512,7 +1506,6 @@ fn print_literal(s: &ps, lit: &@ast::lit) {\n     }\n     alt lit.node {\n       ast::lit_str(st, kind) {\n-        if kind == ast::sk_unique { word(s.s, ~\"~\"); }\n         print_string(s, st);\n       }\n       ast::lit_char(ch) {"}]}