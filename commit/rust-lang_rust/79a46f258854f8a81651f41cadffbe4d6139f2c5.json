{"sha": "79a46f258854f8a81651f41cadffbe4d6139f2c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5YTQ2ZjI1ODg1NGY4YTgxNjUxZjQxY2FkZmZiZTRkNjEzOWYyYzU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-08-22T13:13:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-22T13:13:07Z"}, "message": "Merge #1717\n\n1717: Don't add `?` bounds as real bounds r=flodiebold a=matklad\n\ncloses #1709\r\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "d41acbbf7895f17fb4af653fa9e8b4bb1a9a2c93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d41acbbf7895f17fb4af653fa9e8b4bb1a9a2c93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79a46f258854f8a81651f41cadffbe4d6139f2c5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdXpTjCRBK7hj4Ov3rIwAAdHIIACKpyeNsgLEOJa0o4H4DbOyQ\nB2q9+UZBKtt3Q5SyKOQkE6CRDnxBAFGiM39p+gErMbFiO08tiCVhyTTfjQvbm5Bs\nMuPVH9WMczDTF0cn63EPG7DXflI52bGLlinMaWgaSM3XJiFd3oLmdEIlk/lNFHSw\nw0qQeH4qqv6E3EcR9UR1cfeD6OX2tjxJZxc8K/KO7lmflkqBbZQlOlTGf+qcHaon\nbRkfe62rSsQmkJ23XFCh1xHVYvMBxs9bbM2XgbsyYDM8iadJ072L7WwfjojW378F\niMkarguMeTFMCcFD/TNMYoKhtnF4LLaMnQpC4kJk+10fvYUcUbKXq8QubtOekXE=\n=OOJi\n-----END PGP SIGNATURE-----\n", "payload": "tree d41acbbf7895f17fb4af653fa9e8b4bb1a9a2c93\nparent 5c7d832bf9110350f0107791229172b0305f2701\nparent 9f238930f1969731869c89956414f4b160b180c0\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1566479587 +0000\ncommitter GitHub <noreply@github.com> 1566479587 +0000\n\nMerge #1717\n\n1717: Don't add `?` bounds as real bounds r=flodiebold a=matklad\n\ncloses #1709\r\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79a46f258854f8a81651f41cadffbe4d6139f2c5", "html_url": "https://github.com/rust-lang/rust/commit/79a46f258854f8a81651f41cadffbe4d6139f2c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79a46f258854f8a81651f41cadffbe4d6139f2c5/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c7d832bf9110350f0107791229172b0305f2701", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c7d832bf9110350f0107791229172b0305f2701", "html_url": "https://github.com/rust-lang/rust/commit/5c7d832bf9110350f0107791229172b0305f2701"}, {"sha": "9f238930f1969731869c89956414f4b160b180c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f238930f1969731869c89956414f4b160b180c0", "html_url": "https://github.com/rust-lang/rust/commit/9f238930f1969731869c89956414f4b160b180c0"}], "stats": {"total": 49, "additions": 49, "deletions": 0}, "files": [{"sha": "e75337cdf75a3c6e8554cfd7b110880cf742e4a5", "filename": "crates/ra_hir/src/generics.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/79a46f258854f8a81651f41cadffbe4d6139f2c5/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79a46f258854f8a81651f41cadffbe4d6139f2c5/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fgenerics.rs?ref=79a46f258854f8a81651f41cadffbe4d6139f2c5", "patch": "@@ -75,6 +75,7 @@ impl GenericParams {\n         };\n         generics.parent_params = parent.map(|p| db.generic_params(p));\n         let start = generics.parent_params.as_ref().map(|p| p.params.len()).unwrap_or(0) as u32;\n+        // FIXME: add `: Sized` bound for everything except for `Self` in traits\n         match def {\n             GenericDef::Function(it) => generics.fill(&it.source(db).ast, start),\n             GenericDef::Struct(it) => generics.fill(&it.source(db).ast, start),\n@@ -86,6 +87,9 @@ impl GenericParams {\n                 generics.fill(&it.source(db).ast, start + 1);\n             }\n             GenericDef::TypeAlias(it) => generics.fill(&it.source(db).ast, start),\n+            // Note that we don't add `Self` here: in `impl`s, `Self` is not a\n+            // type-parameter, but rather is a type-alias for impl's target\n+            // type, so this is handled by the resovler.\n             GenericDef::ImplBlock(it) => generics.fill(&it.source(db).ast, start),\n             GenericDef::EnumVariant(_) => {}\n         }\n@@ -135,6 +139,10 @@ impl GenericParams {\n     }\n \n     fn add_where_predicate_from_bound(&mut self, bound: ast::TypeBound, type_ref: TypeRef) {\n+        if bound.has_question_mark() {\n+            // FIXME: remove this bound\n+            return;\n+        }\n         let path = bound\n             .type_ref()\n             .and_then(|tr| match tr {"}, {"sha": "57fd5492d8b36ac0b3e4f759e394a1205e13b088", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/79a46f258854f8a81651f41cadffbe4d6139f2c5/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79a46f258854f8a81651f41cadffbe4d6139f2c5/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=79a46f258854f8a81651f41cadffbe4d6139f2c5", "patch": "@@ -3028,6 +3028,35 @@ fn test(s: S) {\n     assert_eq!(t, \"{unknown}\");\n }\n \n+#[test]\n+fn deref_trait_with_question_mark_size() {\n+    let t = type_at(\n+        r#\"\n+//- /main.rs\n+#[lang = \"deref\"]\n+trait Deref {\n+    type Target;\n+    fn deref(&self) -> &Self::Target;\n+}\n+\n+struct Arc<T>;\n+impl<T: ?Sized> Deref for Arc<T> {\n+    type Target = T;\n+}\n+\n+struct S;\n+impl S {\n+    fn foo(&self) -> u128 {}\n+}\n+\n+fn test(s: Arc<S>) {\n+    (*s, s.foo())<|>\n+}\n+\"#,\n+    );\n+    assert_eq!(t, \"(S, u128)\");\n+}\n+\n #[test]\n fn obligation_from_function_clause() {\n     let t = type_at("}, {"sha": "efe261fc2322f1a49dfb8b1f86fa32cb552b9391", "filename": "crates/ra_syntax/src/ast/extensions.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/79a46f258854f8a81651f41cadffbe4d6139f2c5/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79a46f258854f8a81651f41cadffbe4d6139f2c5/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs?ref=79a46f258854f8a81651f41cadffbe4d6139f2c5", "patch": "@@ -382,6 +382,18 @@ impl ast::WherePred {\n     }\n }\n \n+impl ast::TypeBound {\n+    pub fn question_mark_token(&self) -> Option<SyntaxToken> {\n+        self.syntax()\n+            .children_with_tokens()\n+            .filter_map(|it| it.into_token())\n+            .find(|it| it.kind() == T![?])\n+    }\n+    pub fn has_question_mark(&self) -> bool {\n+        self.question_mark_token().is_some()\n+    }\n+}\n+\n impl ast::TraitDef {\n     pub fn is_auto(&self) -> bool {\n         self.syntax().children_with_tokens().any(|t| t.kind() == T![auto])"}]}