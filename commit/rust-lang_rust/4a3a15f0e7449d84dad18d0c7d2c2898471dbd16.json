{"sha": "4a3a15f0e7449d84dad18d0c7d2c2898471dbd16", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhM2ExNWYwZTc0NDlkODRkYWQxOGQwYzdkMmMyODk4NDcxZGJkMTY=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2019-09-15T00:06:08Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2019-09-15T00:08:22Z"}, "message": "Parse `..` as a proper pattern", "tree": {"sha": "bd4eeb80f58fddfaf7f465734ad178bbbdc6a338", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd4eeb80f58fddfaf7f465734ad178bbbdc6a338"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a3a15f0e7449d84dad18d0c7d2c2898471dbd16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a3a15f0e7449d84dad18d0c7d2c2898471dbd16", "html_url": "https://github.com/rust-lang/rust/commit/4a3a15f0e7449d84dad18d0c7d2c2898471dbd16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a3a15f0e7449d84dad18d0c7d2c2898471dbd16/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "426112c97e587dfdaa79bcec0d4a37bef3c6b474", "url": "https://api.github.com/repos/rust-lang/rust/commits/426112c97e587dfdaa79bcec0d4a37bef3c6b474", "html_url": "https://github.com/rust-lang/rust/commit/426112c97e587dfdaa79bcec0d4a37bef3c6b474"}], "stats": {"total": 52, "additions": 42, "deletions": 10}, "files": [{"sha": "919b0f37dbd29b2d3872ffb2ea733d8af686c345", "filename": "crates/ra_parser/src/grammar/patterns.rs", "status": "modified", "additions": 42, "deletions": 10, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a15f0e7449d84dad18d0c7d2c2898471dbd16/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a15f0e7449d84dad18d0c7d2c2898471dbd16/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fpatterns.rs?ref=4a3a15f0e7449d84dad18d0c7d2c2898471dbd16", "patch": "@@ -2,7 +2,7 @@ use super::*;\n \n pub(super) const PATTERN_FIRST: TokenSet = expressions::LITERAL_FIRST\n     .union(paths::PATH_FIRST)\n-    .union(token_set![BOX_KW, REF_KW, MUT_KW, L_PAREN, L_BRACK, AMP, UNDERSCORE, MINUS]);\n+    .union(token_set![BOX_KW, REF_KW, MUT_KW, L_PAREN, L_BRACK, AMP, UNDERSCORE, MINUS, DOT]);\n \n pub(crate) fn pattern(p: &mut Parser) {\n     pattern_r(p, PAT_RECOVERY_SET);\n@@ -73,6 +73,7 @@ fn atom_pat(p: &mut Parser, recovery_set: TokenSet) -> Option<CompletedMarker> {\n         _ if paths::is_use_path_start(p) => path_pat(p),\n         _ if is_literal_pat_start(p) => literal_pat(p),\n \n+        T![.] if p.at(T![..]) => dot_dot_pat(p),\n         T![_] => placeholder_pat(p),\n         T![&] => ref_pat(p),\n         T!['('] => tuple_pat(p),\n@@ -163,7 +164,9 @@ fn record_field_pat_list(p: &mut Parser) {\n     p.bump_any();\n     while !p.at(EOF) && !p.at(T!['}']) {\n         match p.current() {\n+            // A trailing `..` is *not* treated as a DOT_DOT_PAT.\n             T![.] if p.at(T![..]) => p.bump(T![..]),\n+\n             IDENT if p.nth(1) == T![:] => record_field_pat(p),\n             T!['{'] => error_block(p, \"expected ident\"),\n             T![box] => {\n@@ -201,6 +204,39 @@ fn placeholder_pat(p: &mut Parser) -> CompletedMarker {\n     m.complete(p, PLACEHOLDER_PAT)\n }\n \n+// test dot_dot_pat\n+// fn main() {\n+//     let .. = ();\n+//     //\n+//     // Tuples\n+//     //\n+//     let (a, ..) = ();\n+//     let (a, ..,) = ();\n+//     let Tuple(a, ..) = ();\n+//     let Tuple(a, ..,) = ();\n+//     let (.., ..) = ();\n+//     let Tuple(.., ..) = ();\n+//     let (.., a, ..) = ();\n+//     let Tuple(.., a, ..) = ();\n+//     //\n+//     // Slices\n+//     //\n+//     let [..] = ();\n+//     let [head, ..] = ();\n+//     let [head, tail @ ..] = ();\n+//     let [head, .., cons] = ();\n+//     let [head, mid @ .., cons] = ();\n+//     let [head, .., .., cons] = ();\n+//     let [head, .., mid, tail @ ..] = ();\n+//     let [head, .., mid, .., cons] = ();\n+// }\n+fn dot_dot_pat(p: &mut Parser) -> CompletedMarker {\n+    assert!(p.at(T![..]));\n+    let m = p.start();\n+    p.bump(T![..]);\n+    m.complete(p, DOT_DOT_PAT)\n+}\n+\n // test ref_pat\n // fn main() {\n //     let &a = ();\n@@ -241,16 +277,12 @@ fn slice_pat(p: &mut Parser) -> CompletedMarker {\n \n fn pat_list(p: &mut Parser, ket: SyntaxKind) {\n     while !p.at(EOF) && !p.at(ket) {\n-        match p.current() {\n-            T![.] if p.at(T![..]) => p.bump(T![..]),\n-            _ => {\n-                if !p.at_ts(PATTERN_FIRST) {\n-                    p.error(\"expected a pattern\");\n-                    break;\n-                }\n-                pattern(p)\n-            }\n+        if !p.at_ts(PATTERN_FIRST) {\n+            p.error(\"expected a pattern\");\n+            break;\n         }\n+\n+        pattern(p);\n         if !p.at(ket) {\n             p.expect(T![,]);\n         }"}]}