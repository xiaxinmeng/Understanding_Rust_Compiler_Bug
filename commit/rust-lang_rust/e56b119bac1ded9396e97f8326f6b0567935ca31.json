{"sha": "e56b119bac1ded9396e97f8326f6b0567935ca31", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1NmIxMTliYWMxZGVkOTM5NmU5N2Y4MzI2ZjZiMDU2NzkzNWNhMzE=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-04-15T20:55:10Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-04-15T20:55:10Z"}, "message": "rustc_typeck: keep register_infer_ok_obligations calls out of snapshots.", "tree": {"sha": "de3f7c6e1dfb46dea46270137e51630d2c095f90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de3f7c6e1dfb46dea46270137e51630d2c095f90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e56b119bac1ded9396e97f8326f6b0567935ca31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e56b119bac1ded9396e97f8326f6b0567935ca31", "html_url": "https://github.com/rust-lang/rust/commit/e56b119bac1ded9396e97f8326f6b0567935ca31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e56b119bac1ded9396e97f8326f6b0567935ca31/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99f5c8593b1778947830d1da580c55b70680b919", "url": "https://api.github.com/repos/rust-lang/rust/commits/99f5c8593b1778947830d1da580c55b70680b919", "html_url": "https://github.com/rust-lang/rust/commit/99f5c8593b1778947830d1da580c55b70680b919"}], "stats": {"total": 19, "additions": 9, "deletions": 10}, "files": [{"sha": "c6a1f6cfc0d7fff01b72258e9ce19969dbd4ab55", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e56b119bac1ded9396e97f8326f6b0567935ca31/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e56b119bac1ded9396e97f8326f6b0567935ca31/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=e56b119bac1ded9396e97f8326f6b0567935ca31", "patch": "@@ -711,16 +711,15 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         let cause = self.cause(expr.span, ObligationCauseCode::ExprAssignable);\n         let coerce = Coerce::new(self, cause);\n-        self.commit_if_ok(|_| {\n-            let ok = coerce.coerce(&[expr], source, target)?;\n-            let adjustment = self.register_infer_ok_obligations(ok);\n-            self.apply_adjustment(expr.id, adjustment);\n-\n-            // We should now have added sufficient adjustments etc to\n-            // ensure that the type of expression, post-adjustment, is\n-            // a subtype of target.\n-            Ok(target)\n-        })\n+        let ok = self.commit_if_ok(|_| coerce.coerce(&[expr], source, target))?;\n+\n+        let adjustment = self.register_infer_ok_obligations(ok);\n+        self.apply_adjustment(expr.id, adjustment);\n+\n+        // We should now have added sufficient adjustments etc to\n+        // ensure that the type of expression, post-adjustment, is\n+        // a subtype of target.\n+        Ok(target)\n     }\n \n     /// Given some expressions, their known unified type and another expression,"}]}