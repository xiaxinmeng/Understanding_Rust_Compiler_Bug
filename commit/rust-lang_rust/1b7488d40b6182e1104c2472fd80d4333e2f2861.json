{"sha": "1b7488d40b6182e1104c2472fd80d4333e2f2861", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiNzQ4OGQ0MGI2MTgyZTExMDRjMjQ3MmZkODBkNDMzM2UyZjI4NjE=", "commit": {"author": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2018-05-27T00:30:26Z"}, "committer": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2018-05-28T16:20:14Z"}, "message": "scrap `find_node_for_hir_id` in favor of `hir_to_node_id`\n\nMichael Woerister pointed out that `hir_to_node_id` (introduced in\nAugust 2017's 28ddd7a4e) supersedes the functionality of\n`find_node_for_hir_id` (just a hash lookup compared to that linear\nsearch).", "tree": {"sha": "bdcc6eb1b04138dd69b0c644dc6356a810e935a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdcc6eb1b04138dd69b0c644dc6356a810e935a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b7488d40b6182e1104c2472fd80d4333e2f2861", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b7488d40b6182e1104c2472fd80d4333e2f2861", "html_url": "https://github.com/rust-lang/rust/commit/1b7488d40b6182e1104c2472fd80d4333e2f2861", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b7488d40b6182e1104c2472fd80d4333e2f2861/comments", "author": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "078486b9f653c25b9df010d67d6d3886e61bb114", "url": "https://api.github.com/repos/rust-lang/rust/commits/078486b9f653c25b9df010d67d6d3886e61bb114", "html_url": "https://github.com/rust-lang/rust/commit/078486b9f653c25b9df010d67d6d3886e61bb114"}], "stats": {"total": 28, "additions": 8, "deletions": 20}, "files": [{"sha": "838be076a0b62c397ec9be7ad8bc2fc2dc57c2dd", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b7488d40b6182e1104c2472fd80d4333e2f2861/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b7488d40b6182e1104c2472fd80d4333e2f2861/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=1b7488d40b6182e1104c2472fd80d4333e2f2861", "patch": "@@ -487,14 +487,6 @@ impl Definitions {\n         self.node_to_hir_id[node_id]\n     }\n \n-    pub fn find_node_for_hir_id(&self, hir_id: hir::HirId) -> ast::NodeId {\n-        self.node_to_hir_id\n-            .iter()\n-            .position(|x| *x == hir_id)\n-            .map(|idx| ast::NodeId::new(idx))\n-            .unwrap()\n-    }\n-\n     #[inline]\n     pub fn def_index_to_hir_id(&self, def_index: DefIndex) -> hir::HirId {\n         let space_index = def_index.address_space().index();"}, {"sha": "ddbc03292f6442501a65c89d3d947d16472dcab3", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1b7488d40b6182e1104c2472fd80d4333e2f2861/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b7488d40b6182e1104c2472fd80d4333e2f2861/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=1b7488d40b6182e1104c2472fd80d4333e2f2861", "patch": "@@ -609,8 +609,7 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n         match local.init {\n             None => {\n                 local.pat.each_binding(|_, hir_id, span, _| {\n-                    // FIXME: converting HirId \u2192 NodeId is said to be relatively expensive\n-                    let node_id = self.mc.tcx.hir.definitions().find_node_for_hir_id(hir_id);\n+                    let node_id = self.mc.tcx.hir.hir_to_node_id(hir_id);\n                     self.delegate.decl_without_init(node_id, span);\n                 })\n             }"}, {"sha": "37732708733b040cf578b6c430f26bfe81d18907", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b7488d40b6182e1104c2472fd80d4333e2f2861/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b7488d40b6182e1104c2472fd80d4333e2f2861/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=1b7488d40b6182e1104c2472fd80d4333e2f2861", "patch": "@@ -488,7 +488,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n             // FIXME\n             None if self.is_tainted_by_errors() => Err(()),\n             None => {\n-                let id = self.tcx.hir.definitions().find_node_for_hir_id(id);\n+                let id = self.tcx.hir.hir_to_node_id(id);\n                 bug!(\"no type for node {}: {} in mem_categorization\",\n                      id, self.tcx.hir.node_to_string(id));\n             }"}, {"sha": "9d3dda46dade1c997fd312581f23b8c18bed693c", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1b7488d40b6182e1104c2472fd80d4333e2f2861/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b7488d40b6182e1104c2472fd80d4333e2f2861/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=1b7488d40b6182e1104c2472fd80d4333e2f2861", "patch": "@@ -266,9 +266,7 @@ fn validate_hir_id_for_typeck_tables(local_id_root: Option<DefId>,\n         if let Some(local_id_root) = local_id_root {\n             if hir_id.owner != local_id_root.index {\n                 ty::tls::with(|tcx| {\n-                    let node_id = tcx.hir\n-                                     .definitions()\n-                                     .find_node_for_hir_id(hir_id);\n+                    let node_id = tcx.hir.hir_to_node_id(hir_id);\n \n                     bug!(\"node {} with HirId::owner {:?} cannot be placed in \\\n                           TypeckTables with local_id_root {:?}\",\n@@ -527,7 +525,7 @@ impl<'tcx> TypeckTables<'tcx> {\n             None => {\n                 bug!(\"node_id_to_type: no type for node `{}`\",\n                     tls::with(|tcx| {\n-                        let id = tcx.hir.definitions().find_node_for_hir_id(id);\n+                        let id = tcx.hir.hir_to_node_id(id);\n                         tcx.hir.node_to_string(id)\n                     }))\n             }\n@@ -2616,8 +2614,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                                                     msg: &str)\n         -> DiagnosticBuilder<'tcx>\n     {\n-        // FIXME: converting HirId \u2192 NodeId is said to be relatively expensive\n-        let node_id = self.hir.definitions().find_node_for_hir_id(hir_id);\n+        let node_id = self.hir.hir_to_node_id(hir_id);\n         let (level, src) = self.lint_level_at_node(lint, node_id);\n         lint::struct_lint_level(self.sess, lint, level, src, Some(span.into()), msg)\n     }"}, {"sha": "90b974fb972c00534312bd06f6b19e8adca0eafd", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b7488d40b6182e1104c2472fd80d4333e2f2861/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b7488d40b6182e1104c2472fd80d4333e2f2861/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=1b7488d40b6182e1104c2472fd80d4333e2f2861", "patch": "@@ -2110,7 +2110,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             Some(&t) => t,\n             None if self.is_tainted_by_errors() => self.tcx.types.err,\n             None => {\n-                let node_id = self.tcx.hir.definitions().find_node_for_hir_id(id);\n+                let node_id = self.tcx.hir.hir_to_node_id(id);\n                 bug!(\"no type for node {}: {} in fcx {}\",\n                      node_id, self.tcx.hir.node_to_string(node_id),\n                      self.tag());"}, {"sha": "f295d1763c4c75c5c3ac575ea7022f411f0c6c18", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b7488d40b6182e1104c2472fd80d4333e2f2861/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b7488d40b6182e1104c2472fd80d4333e2f2861/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=1b7488d40b6182e1104c2472fd80d4333e2f2861", "patch": "@@ -560,7 +560,7 @@ impl Locatable for DefIndex {\n \n impl Locatable for hir::HirId {\n     fn to_span(&self, tcx: &TyCtxt) -> Span {\n-        let node_id = tcx.hir.definitions().find_node_for_hir_id(*self);\n+        let node_id = tcx.hir.hir_to_node_id(*self);\n         tcx.hir.span(node_id)\n     }\n }"}, {"sha": "bff849d7ae8e99d2a8cd83138442c588c6c4dd24", "filename": "src/librustc_typeck/check_unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b7488d40b6182e1104c2472fd80d4333e2f2861/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b7488d40b6182e1104c2472fd80d4333e2f2861/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=1b7488d40b6182e1104c2472fd80d4333e2f2861", "patch": "@@ -106,7 +106,7 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n         }\n         assert_eq!(def_id.krate, LOCAL_CRATE);\n         let hir_id = tcx.hir.definitions().def_index_to_hir_id(def_id.index);\n-        let id = tcx.hir.definitions().find_node_for_hir_id(hir_id);\n+        let id = tcx.hir.hir_to_node_id(hir_id);\n         let lint = lint::builtin::UNUSED_EXTERN_CRATES;\n         let msg = \"unused extern crate\";\n         tcx.lint_node(lint, id, span, msg);"}]}