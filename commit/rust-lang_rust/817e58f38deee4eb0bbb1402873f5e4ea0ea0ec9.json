{"sha": "817e58f38deee4eb0bbb1402873f5e4ea0ea0ec9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxN2U1OGYzOGRlZWU0ZWIwYmJiMTQwMjg3M2Y1ZTRlYTBlYTBlYzk=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-03-07T01:41:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-07T01:41:12Z"}, "message": "Rollup merge of #82592 - Lonami:patch-1, r=RalfJung\n\nImprove transmute docs with further clarifications\n\nCloses #82493.\n\nPlease let me know if any of the new wording sounds off, English is not my mother tongue.", "tree": {"sha": "d2ab390abcdb86c0fa858443f7280e0c0c24dff5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2ab390abcdb86c0fa858443f7280e0c0c24dff5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/817e58f38deee4eb0bbb1402873f5e4ea0ea0ec9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgRC85CRBK7hj4Ov3rIwAAdHIIAHCznpYfZmbyXqEu5mU5GPaw\n3DWoa38xJc37pJnH5kYRxvkK7ksDfMcu6XBeROs9YgYC8PQvoVua0y+qZvaGCBHq\nSg4fdmf/zkGT5eFwUgMmjo9bc5jBiC0DNASCQ6oVORrX15ypwUJM5RZAvoBVJnjS\nYdXW8MAReUFfdg7kUdqsib7N447X3jV1NzQWXk+67f73kbUwc6DkobjZQCyJwWuA\nL1y2rWvvgN7yqHBJ59WKn5nzmtoG85n9VLvMk7o+bsnrkFRCyKha4bW4xy3xzJVD\nTjzZf7OzjKBdedkBXTj90Rmi4HcqxAMRZoqzv1JFLfzK7cfUB0qRudzbThmDcLE=\n=b2LD\n-----END PGP SIGNATURE-----\n", "payload": "tree d2ab390abcdb86c0fa858443f7280e0c0c24dff5\nparent 3d762a7f36e1105b3f2988874e00806b8c331d6d\nparent fbc17410b24719f2b3ff18f622bd677c76f59fde\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1615081272 +0900\ncommitter GitHub <noreply@github.com> 1615081272 +0900\n\nRollup merge of #82592 - Lonami:patch-1, r=RalfJung\n\nImprove transmute docs with further clarifications\n\nCloses #82493.\n\nPlease let me know if any of the new wording sounds off, English is not my mother tongue.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/817e58f38deee4eb0bbb1402873f5e4ea0ea0ec9", "html_url": "https://github.com/rust-lang/rust/commit/817e58f38deee4eb0bbb1402873f5e4ea0ea0ec9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/817e58f38deee4eb0bbb1402873f5e4ea0ea0ec9/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d762a7f36e1105b3f2988874e00806b8c331d6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d762a7f36e1105b3f2988874e00806b8c331d6d", "html_url": "https://github.com/rust-lang/rust/commit/3d762a7f36e1105b3f2988874e00806b8c331d6d"}, {"sha": "fbc17410b24719f2b3ff18f622bd677c76f59fde", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbc17410b24719f2b3ff18f622bd677c76f59fde", "html_url": "https://github.com/rust-lang/rust/commit/fbc17410b24719f2b3ff18f622bd677c76f59fde"}], "stats": {"total": 27, "additions": 18, "deletions": 9}, "files": [{"sha": "634ed87b0910e69d4ca86d5aefcaa2ad0571534a", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/817e58f38deee4eb0bbb1402873f5e4ea0ea0ec9/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/817e58f38deee4eb0bbb1402873f5e4ea0ea0ec9/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=817e58f38deee4eb0bbb1402873f5e4ea0ea0ec9", "patch": "@@ -846,6 +846,12 @@ extern \"rust-intrinsic\" {\n     /// destination value, then forgets the original. It's equivalent to C's\n     /// `memcpy` under the hood, just like `transmute_copy`.\n     ///\n+    /// Because `transmute` is a by-value operation, alignment of the *transmuted values\n+    /// themselves* is not a concern. As with any other function, the compiler already ensures\n+    /// both `T` and `U` are properly aligned. However, when transmuting values that *point\n+    /// elsewhere* (such as pointers, references, boxes\u2026), the caller has to ensure proper\n+    /// alignment of the pointed-to values.\n+    ///\n     /// `transmute` is **incredibly** unsafe. There are a vast number of ways to\n     /// cause [undefined behavior][ub] with this function. `transmute` should be\n     /// the absolute last resort.\n@@ -965,7 +971,13 @@ extern \"rust-intrinsic\" {\n     /// assert_eq!(b\"Rust\", &[82, 117, 115, 116]);\n     /// ```\n     ///\n-    /// Turning a `Vec<&T>` into a `Vec<Option<&T>>`:\n+    /// Turning a `Vec<&T>` into a `Vec<Option<&T>>`.\n+    ///\n+    /// To transmute the inner type of the contents of a container, you must make sure to not\n+    /// violate any of the container's invariants. For `Vec`, this means that both the size\n+    /// *and alignment* of the inner types have to match. Other containers might rely on the\n+    /// size of the type, alignment, or even the `TypeId`, in which case transmuting wouldn't\n+    /// be possible at all without violating the container invariants.\n     ///\n     /// ```\n     /// let store = [0, 1, 2, 3];\n@@ -991,14 +1003,11 @@ extern \"rust-intrinsic\" {\n     ///\n     /// let v_clone = v_orig.clone();\n     ///\n-    /// // The no-copy, unsafe way, still using transmute, but not relying on the data layout.\n-    /// // Like the first approach, this reuses the `Vec` internals.\n-    /// // Therefore, the new inner type must have the\n-    /// // exact same size, *and the same alignment*, as the old type.\n-    /// // The same caveats exist for this method as transmute, for\n-    /// // the original inner type (`&i32`) to the converted inner type\n-    /// // (`Option<&i32>`), so read the nomicon pages linked above and also\n-    /// // consult the [`from_raw_parts`] documentation.\n+    /// // This is the proper no-copy, unsafe way of \"transmuting\" a `Vec`, without relying on the\n+    /// // data layout. Instead of literally calling `transmute`, we perform a pointer cast, but\n+    /// // in terms of converting the original inner type (`&i32`) to the new one (`Option<&i32>`),\n+    /// // this has all the same caveats. Besides the information provided above, also consult the\n+    /// // [`from_raw_parts`] documentation.\n     /// let v_from_raw = unsafe {\n     // FIXME Update this when vec_into_raw_parts is stabilized\n     ///     // Ensure the original vector is not dropped."}]}