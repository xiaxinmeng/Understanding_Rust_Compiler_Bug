{"sha": "8aa10c00a4c5b957d459fac5a103cd9688e8dcdd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhYTEwYzAwYTRjNWI5NTdkNDU5ZmFjNWExMDNjZDk2ODhlOGRjZGQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-08T17:33:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-08T17:33:03Z"}, "message": "Merge #5266\n\n5266: Remove relative_path dependency r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "4b90fb312b32dd8431140f52265c44c580e0a588", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b90fb312b32dd8431140f52265c44c580e0a588"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8aa10c00a4c5b957d459fac5a103cd9688e8dcdd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfBgNPCRBK7hj4Ov3rIwAAdHIIAKwp80gbqtxfCi6tcNvqSO9i\nPJmSdb8ojcYCFg1B1RftQ329wjXDiyqkKZCE1Q5O3ayC9Bre1Lilf8xPv5YJzgYy\nA8KKYO6yZn4g7KWSJNu2pirVBN0RHrrK/+uT35oNnrSeCtj6dHsx2A7o1jCWLVQk\npA+7yiIpCXqloyEsezxErsZzUA6W2366toann/uAFXMldjUNXNXDPyXcvlBbVlbo\n/wGb+yfWgUfeA+772H4/W7OeUf70nOaLw5a+4dsqyI+QwUvg75s2JDWUJfmqZnB0\nt3hDasH5t3hydFx+W/AGrs+4WOrmAA9lmA/mdCo3+4BZr2la6hLFMC+ux+FVnm8=\n=oM6O\n-----END PGP SIGNATURE-----\n", "payload": "tree 4b90fb312b32dd8431140f52265c44c580e0a588\nparent a622a8e109e0f41f1b7cf869acb955eab8c95b43\nparent dab7f3d2c6cd035f446fbdcda2442954da4afd3a\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1594229583 +0000\ncommitter GitHub <noreply@github.com> 1594229583 +0000\n\nMerge #5266\n\n5266: Remove relative_path dependency r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8aa10c00a4c5b957d459fac5a103cd9688e8dcdd", "html_url": "https://github.com/rust-lang/rust/commit/8aa10c00a4c5b957d459fac5a103cd9688e8dcdd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8aa10c00a4c5b957d459fac5a103cd9688e8dcdd/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a622a8e109e0f41f1b7cf869acb955eab8c95b43", "url": "https://api.github.com/repos/rust-lang/rust/commits/a622a8e109e0f41f1b7cf869acb955eab8c95b43", "html_url": "https://github.com/rust-lang/rust/commit/a622a8e109e0f41f1b7cf869acb955eab8c95b43"}, {"sha": "dab7f3d2c6cd035f446fbdcda2442954da4afd3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/dab7f3d2c6cd035f446fbdcda2442954da4afd3a", "html_url": "https://github.com/rust-lang/rust/commit/dab7f3d2c6cd035f446fbdcda2442954da4afd3a"}], "stats": {"total": 169, "additions": 108, "deletions": 61}, "files": [{"sha": "242fca7004bb71f788bb049080c7ef5ac6d19fa5", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8aa10c00a4c5b957d459fac5a103cd9688e8dcdd/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/8aa10c00a4c5b957d459fac5a103cd9688e8dcdd/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=8aa10c00a4c5b957d459fac5a103cd9688e8dcdd", "patch": "@@ -1020,7 +1020,6 @@ dependencies = [\n  \"ra_prof\",\n  \"ra_syntax\",\n  \"ra_tt\",\n- \"relative-path\",\n  \"rustc-hash\",\n  \"salsa\",\n  \"stdx\",\n@@ -1408,12 +1407,6 @@ version = \"0.6.18\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"26412eb97c6b088a6997e05f69403a802a92d520de2f8e63c2b65f9e0f47c4e8\"\n \n-[[package]]\n-name = \"relative-path\"\n-version = \"1.2.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c602122c47b382cd045b10866a084b184035d45d8c2609cdd3762852ddfae2a1\"\n-\n [[package]]\n name = \"remove_dir_all\"\n version = \"0.5.3\""}, {"sha": "889142442a5de6d3089fa595fc3c45ca195bef0b", "filename": "crates/ra_db/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8aa10c00a4c5b957d459fac5a103cd9688e8dcdd/crates%2Fra_db%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8aa10c00a4c5b957d459fac5a103cd9688e8dcdd/crates%2Fra_db%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2FCargo.toml?ref=8aa10c00a4c5b957d459fac5a103cd9688e8dcdd", "patch": "@@ -9,7 +9,6 @@ doctest = false\n \n [dependencies]\n salsa = \"0.15.0\"\n-relative-path = \"1.0.0\"\n rustc-hash = \"1.1.0\"\n \n ra_syntax = { path = \"../ra_syntax\" }"}, {"sha": "f25be24fe2371e0f4448a91e37b9cc06691ecc51", "filename": "crates/ra_db/src/lib.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8aa10c00a4c5b957d459fac5a103cd9688e8dcdd/crates%2Fra_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aa10c00a4c5b957d459fac5a103cd9688e8dcdd/crates%2Fra_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Flib.rs?ref=8aa10c00a4c5b957d459fac5a103cd9688e8dcdd", "patch": "@@ -16,9 +16,8 @@ pub use crate::{\n         SourceRoot, SourceRootId,\n     },\n };\n-pub use relative_path::{RelativePath, RelativePathBuf};\n pub use salsa;\n-pub use vfs::{file_set::FileSet, AbsPathBuf, VfsPath};\n+pub use vfs::{file_set::FileSet, VfsPath};\n \n #[macro_export]\n macro_rules! impl_intern_key {\n@@ -93,9 +92,9 @@ pub trait FileLoader {\n     fn file_text(&self, file_id: FileId) -> Arc<String>;\n     /// Note that we intentionally accept a `&str` and not a `&Path` here. This\n     /// method exists to handle `#[path = \"/some/path.rs\"] mod foo;` and such,\n-    /// so the input is guaranteed to be utf-8 string. We might introduce\n-    /// `struct StrPath(str)` for clarity some day, but it's a bit messy, so we\n-    /// get by with a `&str` for the time being.\n+    /// so the input is guaranteed to be utf-8 string. One might be tempted to\n+    /// introduce some kind of \"utf-8 path with / separators\", but that's a bad idea. Behold\n+    /// `#[path = \"C://no/way\"]`\n     fn resolve_path(&self, anchor: FileId, path: &str) -> Option<FileId>;\n     fn relevant_crates(&self, file_id: FileId) -> Arc<FxHashSet<CrateId>>;\n }"}, {"sha": "9539616325a46d9ba7508a76bb14bb3351b653d7", "filename": "crates/ra_hir_def/src/nameres/mod_resolution.rs", "status": "modified", "additions": 87, "deletions": 29, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/8aa10c00a4c5b957d459fac5a103cd9688e8dcdd/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fmod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aa10c00a4c5b957d459fac5a103cd9688e8dcdd/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fmod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fmod_resolution.rs?ref=8aa10c00a4c5b957d459fac5a103cd9688e8dcdd", "patch": "@@ -1,41 +1,46 @@\n //! This module resolves `mod foo;` declaration to file.\n use hir_expand::name::Name;\n-use ra_db::{FileId, RelativePathBuf};\n+use ra_db::FileId;\n use ra_syntax::SmolStr;\n \n use crate::{db::DefDatabase, HirFileId};\n \n #[derive(Clone, Debug)]\n pub(super) struct ModDir {\n-    /// `.` for `mod.rs`, `lib.rs`\n-    /// `./foo` for `foo.rs`\n-    /// `./foo/bar` for `mod bar { mod x; }` nested in `foo.rs`\n-    path: RelativePathBuf,\n+    /// `` for `mod.rs`, `lib.rs`\n+    /// `foo/` for `foo.rs`\n+    /// `foo/bar/` for `mod bar { mod x; }` nested in `foo.rs`\n+    /// Invariant: path.is_empty() || path.ends_with('/')\n+    dir_path: DirPath,\n     /// inside `./foo.rs`, mods with `#[path]` should *not* be relative to `./foo/`\n     root_non_dir_owner: bool,\n }\n \n impl ModDir {\n     pub(super) fn root() -> ModDir {\n-        ModDir { path: RelativePathBuf::default(), root_non_dir_owner: false }\n+        ModDir { dir_path: DirPath::empty(), root_non_dir_owner: false }\n     }\n \n     pub(super) fn descend_into_definition(\n         &self,\n         name: &Name,\n         attr_path: Option<&SmolStr>,\n     ) -> ModDir {\n-        let mut path = self.path.clone();\n-        match attr_to_path(attr_path) {\n-            None => path.push(&name.to_string()),\n+        let path = match attr_path.map(|it| it.as_str()) {\n+            None => {\n+                let mut path = self.dir_path.clone();\n+                path.push(&name.to_string());\n+                path\n+            }\n             Some(attr_path) => {\n-                if self.root_non_dir_owner {\n-                    assert!(path.pop());\n+                let mut path = self.dir_path.join_attr(attr_path, self.root_non_dir_owner);\n+                if !(path.is_empty() || path.ends_with('/')) {\n+                    path.push('/')\n                 }\n-                path.push(attr_path);\n+                DirPath::new(path)\n             }\n-        }\n-        ModDir { path, root_non_dir_owner: false }\n+        };\n+        ModDir { dir_path: path, root_non_dir_owner: false }\n     }\n \n     pub(super) fn resolve_declaration(\n@@ -48,34 +53,87 @@ impl ModDir {\n         let file_id = file_id.original_file(db.upcast());\n \n         let mut candidate_files = Vec::new();\n-        match attr_to_path(attr_path) {\n+        match attr_path {\n             Some(attr_path) => {\n-                let base =\n-                    if self.root_non_dir_owner { self.path.parent().unwrap() } else { &self.path };\n-                candidate_files.push(base.join(attr_path).to_string())\n+                candidate_files.push(self.dir_path.join_attr(attr_path, self.root_non_dir_owner))\n             }\n             None => {\n-                candidate_files.push(self.path.join(&format!(\"{}.rs\", name)).to_string());\n-                candidate_files.push(self.path.join(&format!(\"{}/mod.rs\", name)).to_string());\n+                candidate_files.push(format!(\"{}{}.rs\", self.dir_path.0, name));\n+                candidate_files.push(format!(\"{}{}/mod.rs\", self.dir_path.0, name));\n             }\n         };\n \n         for candidate in candidate_files.iter() {\n             if let Some(file_id) = db.resolve_path(file_id, candidate.as_str()) {\n-                let mut root_non_dir_owner = false;\n-                let mut mod_path = RelativePathBuf::new();\n                 let is_mod_rs = candidate.ends_with(\"mod.rs\");\n-                if !(is_mod_rs || attr_path.is_some()) {\n-                    root_non_dir_owner = true;\n-                    mod_path.push(&name.to_string());\n-                }\n-                return Ok((file_id, is_mod_rs, ModDir { path: mod_path, root_non_dir_owner }));\n+\n+                let (dir_path, root_non_dir_owner) = if is_mod_rs || attr_path.is_some() {\n+                    (DirPath::empty(), false)\n+                } else {\n+                    (DirPath::new(format!(\"{}/\", name)), true)\n+                };\n+                return Ok((file_id, is_mod_rs, ModDir { dir_path, root_non_dir_owner }));\n             }\n         }\n         Err(candidate_files.remove(0))\n     }\n }\n \n-fn attr_to_path(attr: Option<&SmolStr>) -> Option<RelativePathBuf> {\n-    attr.and_then(|it| RelativePathBuf::from_path(&it.replace(\"\\\\\", \"/\")).ok())\n+#[derive(Clone, Debug)]\n+struct DirPath(String);\n+\n+impl DirPath {\n+    fn assert_invariant(&self) {\n+        assert!(self.0.is_empty() || self.0.ends_with('/'));\n+    }\n+    fn new(repr: String) -> DirPath {\n+        let res = DirPath(repr);\n+        res.assert_invariant();\n+        res\n+    }\n+    fn empty() -> DirPath {\n+        DirPath::new(String::new())\n+    }\n+    fn push(&mut self, name: &str) {\n+        self.0.push_str(name);\n+        self.0.push('/');\n+        self.assert_invariant();\n+    }\n+    fn parent(&self) -> Option<&str> {\n+        if self.0.is_empty() {\n+            return None;\n+        };\n+        let idx =\n+            self.0[..self.0.len() - '/'.len_utf8()].rfind('/').map_or(0, |it| it + '/'.len_utf8());\n+        Some(&self.0[..idx])\n+    }\n+    /// So this is the case which doesn't really work I think if we try to be\n+    /// 100% platform agnostic:\n+    ///\n+    /// ```\n+    /// mod a {\n+    ///     #[path=\"C://sad/face\"]\n+    ///     mod b { mod c; }\n+    /// }\n+    /// ```\n+    ///\n+    /// Here, we need to join logical dir path to a string path from an\n+    /// attribute. Ideally, we should somehow losslessly communicate the whole\n+    /// construction to `FileLoader`.\n+    fn join_attr(&self, mut attr: &str, relative_to_parent: bool) -> String {\n+        let base = if relative_to_parent { self.parent().unwrap() } else { &self.0 };\n+\n+        if attr.starts_with(\"./\") {\n+            attr = &attr[\"./\".len()..];\n+        }\n+        let tmp;\n+        let attr = if attr.contains('\\\\') {\n+            tmp = attr.replace('\\\\', \"/\");\n+            &tmp\n+        } else {\n+            attr\n+        };\n+        let res = format!(\"{}{}\", base, attr);\n+        res\n+    }\n }"}, {"sha": "d1a255dcfcf7e32315163af728c5022382bb447d", "filename": "crates/ra_ide_db/src/change.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8aa10c00a4c5b957d459fac5a103cd9688e8dcdd/crates%2Fra_ide_db%2Fsrc%2Fchange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aa10c00a4c5b957d459fac5a103cd9688e8dcdd/crates%2Fra_ide_db%2Fsrc%2Fchange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fchange.rs?ref=8aa10c00a4c5b957d459fac5a103cd9688e8dcdd", "patch": "@@ -5,8 +5,7 @@ use std::{fmt, sync::Arc, time};\n \n use ra_db::{\n     salsa::{Database, Durability, SweepStrategy},\n-    CrateGraph, FileId, RelativePathBuf, SourceDatabase, SourceDatabaseExt, SourceRoot,\n-    SourceRootId,\n+    CrateGraph, FileId, SourceDatabase, SourceDatabaseExt, SourceRoot, SourceRootId,\n };\n use ra_prof::{memory_usage, profile, Bytes};\n use rustc_hash::FxHashSet;\n@@ -57,14 +56,14 @@ impl AnalysisChange {\n #[derive(Debug)]\n struct AddFile {\n     file_id: FileId,\n-    path: RelativePathBuf,\n+    path: String,\n     text: Arc<String>,\n }\n \n #[derive(Debug)]\n struct RemoveFile {\n     file_id: FileId,\n-    path: RelativePathBuf,\n+    path: String,\n }\n \n #[derive(Default)]"}, {"sha": "d0e566f47e6eaa62083f9e1eacbbbeaffb78b9af", "filename": "crates/rust-analyzer/src/bin/args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8aa10c00a4c5b957d459fac5a103cd9688e8dcdd/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aa10c00a4c5b957d459fac5a103cd9688e8dcdd/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs?ref=8aa10c00a4c5b957d459fac5a103cd9688e8dcdd", "patch": "@@ -7,9 +7,9 @@ use std::{env, fmt::Write, path::PathBuf};\n \n use anyhow::{bail, Result};\n use pico_args::Arguments;\n-use ra_db::AbsPathBuf;\n use ra_ssr::{SsrPattern, SsrRule};\n use rust_analyzer::cli::{BenchWhat, Position, Verbosity};\n+use vfs::AbsPathBuf;\n \n pub(crate) struct Args {\n     pub(crate) verbosity: Verbosity,"}, {"sha": "047772d0c301d09b17a814642e699111744c9bb6", "filename": "crates/rust-analyzer/src/bin/main.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8aa10c00a4c5b957d459fac5a103cd9688e8dcdd/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aa10c00a4c5b957d459fac5a103cd9688e8dcdd/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs?ref=8aa10c00a4c5b957d459fac5a103cd9688e8dcdd", "patch": "@@ -6,14 +6,13 @@ mod args;\n use std::convert::TryFrom;\n \n use lsp_server::Connection;\n+use ra_project_model::ProjectManifest;\n use rust_analyzer::{\n     cli,\n     config::{Config, LinkedProject},\n     from_json, Result,\n };\n-\n-use ra_db::AbsPathBuf;\n-use ra_project_model::ProjectManifest;\n+use vfs::AbsPathBuf;\n \n use crate::args::HelpPrinted;\n "}, {"sha": "3183996247ef2514eee9919f431a48f098e24c15", "filename": "crates/rust-analyzer/src/cargo_target_spec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8aa10c00a4c5b957d459fac5a103cd9688e8dcdd/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aa10c00a4c5b957d459fac5a103cd9688e8dcdd/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs?ref=8aa10c00a4c5b957d459fac5a103cd9688e8dcdd", "patch": "@@ -1,9 +1,9 @@\n //! See `CargoTargetSpec`\n \n use ra_cfg::CfgExpr;\n-use ra_db::AbsPathBuf;\n use ra_ide::{FileId, RunnableKind, TestId};\n use ra_project_model::{self, TargetKind};\n+use vfs::AbsPathBuf;\n \n use crate::{global_state::GlobalStateSnapshot, Result};\n "}, {"sha": "a93d5fb73918758622c14ce59a403a837111227e", "filename": "crates/rust-analyzer/src/cli/analysis_bench.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8aa10c00a4c5b957d459fac5a103cd9688e8dcdd/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aa10c00a4c5b957d459fac5a103cd9688e8dcdd/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs?ref=8aa10c00a4c5b957d459fac5a103cd9688e8dcdd", "patch": "@@ -5,9 +5,10 @@ use std::{env, path::Path, str::FromStr, sync::Arc, time::Instant};\n use anyhow::{format_err, Result};\n use ra_db::{\n     salsa::{Database, Durability},\n-    AbsPathBuf, FileId,\n+    FileId,\n };\n use ra_ide::{Analysis, AnalysisChange, AnalysisHost, CompletionConfig, FilePosition, LineCol};\n+use vfs::AbsPathBuf;\n \n use crate::cli::{load_cargo::load_cargo, Verbosity};\n "}, {"sha": "a43bf2244d3906c1339ed5097da62b3f77ff2583", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8aa10c00a4c5b957d459fac5a103cd9688e8dcdd/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aa10c00a4c5b957d459fac5a103cd9688e8dcdd/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=8aa10c00a4c5b957d459fac5a103cd9688e8dcdd", "patch": "@@ -4,10 +4,10 @@ use std::{path::Path, sync::Arc};\n \n use anyhow::Result;\n use crossbeam_channel::{unbounded, Receiver};\n-use ra_db::{AbsPathBuf, CrateGraph};\n+use ra_db::CrateGraph;\n use ra_ide::{AnalysisChange, AnalysisHost};\n use ra_project_model::{CargoConfig, ProcMacroClient, ProjectManifest, ProjectWorkspace};\n-use vfs::{loader::Handle, AbsPath};\n+use vfs::{loader::Handle, AbsPath, AbsPathBuf};\n \n use crate::reload::{ProjectFolders, SourceRootConfig};\n "}, {"sha": "9e7de0243e3e80771fc4ca7afe7fdac628135236", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8aa10c00a4c5b957d459fac5a103cd9688e8dcdd/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aa10c00a4c5b957d459fac5a103cd9688e8dcdd/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=8aa10c00a4c5b957d459fac5a103cd9688e8dcdd", "patch": "@@ -11,10 +11,10 @@ use std::{ffi::OsString, path::PathBuf};\n \n use flycheck::FlycheckConfig;\n use lsp_types::ClientCapabilities;\n-use ra_db::AbsPathBuf;\n use ra_ide::{AssistConfig, CompletionConfig, HoverConfig, InlayHintsConfig};\n use ra_project_model::{CargoConfig, ProjectJson, ProjectJsonData, ProjectManifest};\n use serde::Deserialize;\n+use vfs::AbsPathBuf;\n \n use crate::diagnostics::DiagnosticsConfig;\n "}, {"sha": "e51796d36e042559da166d57af4bb36874995c5c", "filename": "crates/rust-analyzer/tests/heavy_tests/support.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8aa10c00a4c5b957d459fac5a103cd9688e8dcdd/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aa10c00a4c5b957d459fac5a103cd9688e8dcdd/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs?ref=8aa10c00a4c5b957d459fac5a103cd9688e8dcdd", "patch": "@@ -12,17 +12,16 @@ use lsp_types::{\n     notification::Exit, request::Shutdown, TextDocumentIdentifier, Url, WorkDoneProgress,\n };\n use lsp_types::{ProgressParams, ProgressParamsValue};\n-use serde::Serialize;\n-use serde_json::{to_string_pretty, Value};\n-use tempfile::TempDir;\n-use test_utils::{find_mismatch, Fixture};\n-\n-use ra_db::AbsPathBuf;\n use ra_project_model::ProjectManifest;\n use rust_analyzer::{\n     config::{ClientCapsConfig, Config, FilesConfig, FilesWatcher, LinkedProject},\n     main_loop,\n };\n+use serde::Serialize;\n+use serde_json::{to_string_pretty, Value};\n+use tempfile::TempDir;\n+use test_utils::{find_mismatch, Fixture};\n+use vfs::AbsPathBuf;\n \n pub struct Project<'a> {\n     fixture: &'a str,"}]}