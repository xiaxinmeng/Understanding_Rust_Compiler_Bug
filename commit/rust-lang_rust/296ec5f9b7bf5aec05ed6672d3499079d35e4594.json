{"sha": "296ec5f9b7bf5aec05ed6672d3499079d35e4594", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5NmVjNWY5YjdiZjVhZWMwNWVkNjY3MmQzNDk5MDc5ZDM1ZTQ1OTQ=", "commit": {"author": {"name": "Mark-Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-11-29T03:25:33Z"}, "committer": {"name": "Mark-Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-06T05:33:38Z"}, "message": "Refactor FnSig to contain a Slice for its inputs and outputs.", "tree": {"sha": "abd86510f4b398705948a79eb7662dd9e4a288c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abd86510f4b398705948a79eb7662dd9e4a288c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/296ec5f9b7bf5aec05ed6672d3499079d35e4594", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/296ec5f9b7bf5aec05ed6672d3499079d35e4594", "html_url": "https://github.com/rust-lang/rust/commit/296ec5f9b7bf5aec05ed6672d3499079d35e4594", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/296ec5f9b7bf5aec05ed6672d3499079d35e4594/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1eab19dba844f0545527b043c5f812152658939d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1eab19dba844f0545527b043c5f812152658939d", "html_url": "https://github.com/rust-lang/rust/commit/1eab19dba844f0545527b043c5f812152658939d"}], "stats": {"total": 235, "additions": 121, "deletions": 114}, "files": [{"sha": "4854a14f733f552c89e10e3252e1cbdb72a792ec", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/296ec5f9b7bf5aec05ed6672d3499079d35e4594/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296ec5f9b7bf5aec05ed6672d3499079d35e4594/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=296ec5f9b7bf5aec05ed6672d3499079d35e4594", "patch": "@@ -1542,6 +1542,17 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n+    pub fn mk_fn_sig<I>(self, inputs: I, output: I::Item, variadic: bool)\n+        -> <I::Item as InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>::Output\n+        where I: Iterator,\n+              I::Item: InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>\n+    {\n+        inputs.chain(iter::once(output)).intern_with(|xs| ty::FnSig {\n+            inputs_and_output: self.intern_type_list(xs),\n+            variadic: variadic\n+        })\n+    }\n+\n     pub fn mk_existential_predicates<I: InternAs<[ExistentialPredicate<'tcx>],\n                                      &'tcx Slice<ExistentialPredicate<'tcx>>>>(self, iter: I)\n                                      -> I::Output {"}, {"sha": "76c26d01ac8e2051d1658fb21f06bb75806939c5", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/296ec5f9b7bf5aec05ed6672d3499079d35e4594/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296ec5f9b7bf5aec05ed6672d3499079d35e4594/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=296ec5f9b7bf5aec05ed6672d3499079d35e4594", "patch": "@@ -18,8 +18,10 @@ use ty::subst::{Kind, Substs};\n use ty::{self, Ty, TyCtxt, TypeFoldable};\n use ty::error::{ExpectedFound, TypeError};\n use std::rc::Rc;\n+use std::iter;\n use syntax::abi;\n use hir as ast;\n+use rustc_data_structures::accumulate_vec::AccumulateVec;\n \n pub type RelateResult<'tcx, T> = Result<T, TypeError<'tcx>>;\n \n@@ -180,21 +182,30 @@ impl<'tcx> Relate<'tcx> for ty::FnSig<'tcx> {\n                            -> RelateResult<'tcx, ty::FnSig<'tcx>>\n         where R: TypeRelation<'a, 'gcx, 'tcx>, 'gcx: 'a+'tcx, 'tcx: 'a\n     {\n-        if a.variadic() != b.variadic() {\n+        if a.variadic != b.variadic {\n             return Err(TypeError::VariadicMismatch(\n-                expected_found(relation, &a.variadic(), &b.variadic())));\n+                expected_found(relation, &a.variadic, &b.variadic)));\n         }\n \n         if a.inputs().len() != b.inputs().len() {\n             return Err(TypeError::ArgCount);\n         }\n \n-        let inputs = a.inputs().iter().zip(b.inputs()).map(|(&a, &b)| {\n-            relation.relate_with_variance(ty::Contravariant, &a, &b)\n-        }).collect::<Result<Vec<_>, _>>()?;\n-        let output = relation.relate(&a.output(), &b.output())?;\n-\n-        Ok(ty::FnSig::new(inputs, output, a.variadic()))\n+        let inputs_and_output = a.inputs().iter().cloned()\n+            .zip(b.inputs().iter().cloned())\n+            .map(|x| (x, false))\n+            .chain(iter::once(((a.output(), b.output()), true)))\n+            .map(|((a, b), is_output)| {\n+                if is_output {\n+                    relation.relate(&a, &b)\n+                } else {\n+                    relation.relate_with_variance(ty::Contravariant, &a, &b)\n+                }\n+            }).collect::<Result<AccumulateVec<[_; 8]>, _>>()?;\n+        Ok(ty::FnSig {\n+            inputs_and_output: relation.tcx().intern_type_list(&inputs_and_output),\n+            variadic: a.variadic\n+        })\n     }\n }\n "}, {"sha": "0f0478bc8cdb0d8528f3402faa3b941635625522", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/296ec5f9b7bf5aec05ed6672d3499079d35e4594/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296ec5f9b7bf5aec05ed6672d3499079d35e4594/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=296ec5f9b7bf5aec05ed6672d3499079d35e4594", "patch": "@@ -232,10 +232,11 @@ impl<'a, 'tcx> Lift<'tcx> for ty::adjustment::AutoBorrow<'a> {\n impl<'a, 'tcx> Lift<'tcx> for ty::FnSig<'a> {\n     type Lifted = ty::FnSig<'tcx>;\n     fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n-        tcx.lift(self.inputs()).and_then(|inputs| {\n-            tcx.lift(&self.output()).map(|output| {\n-                ty::FnSig::new(inputs, output, self.variadic())\n-            })\n+        tcx.lift(&self.inputs_and_output).map(|x| {\n+            ty::FnSig {\n+                inputs_and_output: x,\n+                variadic: self.variadic\n+            }\n         })\n     }\n }\n@@ -585,17 +586,20 @@ impl<'tcx> TypeFoldable<'tcx> for ty::TypeAndMut<'tcx> {\n \n impl<'tcx> TypeFoldable<'tcx> for ty::FnSig<'tcx> {\n     fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n-        ty::FnSig::new(self.inputs().to_owned().fold_with(folder),\n-                    self.output().fold_with(folder),\n-                    self.variadic())\n+        let inputs_and_output = self.inputs_and_output.fold_with(folder);\n+        ty::FnSig {\n+            inputs_and_output: folder.tcx().intern_type_list(&inputs_and_output),\n+            variadic: self.variadic,\n+        }\n     }\n \n     fn fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n         folder.fold_fn_sig(self)\n     }\n \n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n-        self.inputs().to_owned().visit_with(visitor) || self.output().visit_with(visitor)\n+        self.inputs().iter().any(|i| i.visit_with(visitor)) ||\n+        self.output().visit_with(visitor)\n     }\n }\n "}, {"sha": "3b7c46ef7fe175c890b46700bcc3bff19cf12101", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 10, "deletions": 19, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/296ec5f9b7bf5aec05ed6672d3499079d35e4594/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296ec5f9b7bf5aec05ed6672d3499079d35e4594/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=296ec5f9b7bf5aec05ed6672d3499079d35e4594", "patch": "@@ -563,40 +563,31 @@ pub struct ClosureTy<'tcx> {\n /// - `variadic` indicates whether this is a variadic function. (only true for foreign fns)\n #[derive(Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n pub struct FnSig<'tcx> {\n-    inputs: Vec<Ty<'tcx>>,\n-    output: Ty<'tcx>,\n-    variadic: bool\n+    pub inputs_and_output: &'tcx Slice<Ty<'tcx>>,\n+    pub variadic: bool\n }\n \n impl<'tcx> FnSig<'tcx> {\n-    pub fn new(inputs: Vec<Ty<'tcx>>, output: Ty<'tcx>, variadic: bool) -> Self {\n-        FnSig { inputs: inputs, output: output, variadic: variadic }\n-    }\n-\n     pub fn inputs(&self) -> &[Ty<'tcx>] {\n-        &self.inputs\n+        &self.inputs_and_output[..self.inputs_and_output.len() - 1]\n     }\n \n     pub fn output(&self) -> Ty<'tcx> {\n-        self.output\n-    }\n-\n-    pub fn variadic(&self) -> bool {\n-        self.variadic\n+        self.inputs_and_output[self.inputs_and_output.len() - 1]\n     }\n }\n \n pub type PolyFnSig<'tcx> = Binder<FnSig<'tcx>>;\n \n impl<'tcx> PolyFnSig<'tcx> {\n-    pub fn inputs<'a>(&'a self) -> Binder<&[Ty<'tcx>]> {\n-        Binder(self.0.inputs())\n+    pub fn inputs(&self) -> Binder<&[Ty<'tcx>]> {\n+        Binder(self.skip_binder().inputs())\n     }\n     pub fn input(&self, index: usize) -> ty::Binder<Ty<'tcx>> {\n-        self.map_bound_ref(|fn_sig| fn_sig.inputs[index])\n+        self.map_bound_ref(|fn_sig| fn_sig.inputs()[index])\n     }\n     pub fn output(&self) -> ty::Binder<Ty<'tcx>> {\n-        self.map_bound_ref(|fn_sig| fn_sig.output.clone())\n+        self.map_bound_ref(|fn_sig| fn_sig.output().clone())\n     }\n     pub fn variadic(&self) -> bool {\n         self.skip_binder().variadic\n@@ -1261,8 +1252,8 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n     }\n \n     // Type accessors for substructures of types\n-    pub fn fn_args(&self) -> ty::Binder<Vec<Ty<'tcx>>> {\n-        ty::Binder(self.fn_sig().inputs().skip_binder().iter().cloned().collect::<Vec<_>>())\n+    pub fn fn_args(&self) -> ty::Binder<&[Ty<'tcx>]> {\n+        self.fn_sig().inputs()\n     }\n \n     pub fn fn_ret(&self) -> Binder<Ty<'tcx>> {"}, {"sha": "38b38e5b49764b5bcf4c4d59b90b3bb089125d35", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/296ec5f9b7bf5aec05ed6672d3499079d35e4594/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296ec5f9b7bf5aec05ed6672d3499079d35e4594/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=296ec5f9b7bf5aec05ed6672d3499079d35e4594", "patch": "@@ -595,7 +595,7 @@ impl<'tcx> fmt::Debug for ty::InstantiatedPredicates<'tcx> {\n impl<'tcx> fmt::Display for ty::FnSig<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"fn\")?;\n-        fn_sig(f, self.inputs(), self.variadic(), self.output())\n+        fn_sig(f, self.inputs(), self.variadic, self.output())\n     }\n }\n \n@@ -625,7 +625,7 @@ impl fmt::Debug for ty::RegionVid {\n \n impl<'tcx> fmt::Debug for ty::FnSig<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"({:?}; variadic: {})->{:?}\", self.inputs(), self.variadic(), self.output())\n+        write!(f, \"({:?}; variadic: {})->{:?}\", self.inputs(), self.variadic, self.output())\n     }\n }\n "}, {"sha": "b7cebe310730969a701e65e975328cdd9d2d8b9f", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/296ec5f9b7bf5aec05ed6672d3499079d35e4594/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296ec5f9b7bf5aec05ed6672d3499079d35e4594/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=296ec5f9b7bf5aec05ed6672d3499079d35e4594", "patch": "@@ -265,15 +265,10 @@ impl<'a, 'gcx, 'tcx> Env<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn t_fn(&self, input_tys: &[Ty<'tcx>], output_ty: Ty<'tcx>) -> Ty<'tcx> {\n-        let input_args = input_tys.iter().cloned().collect();\n         self.infcx.tcx.mk_fn_ptr(self.infcx.tcx.mk_bare_fn(ty::BareFnTy {\n             unsafety: hir::Unsafety::Normal,\n             abi: Abi::Rust,\n-            sig: ty::Binder(ty::FnSig {\n-                inputs: input_args,\n-                output: output_ty,\n-                variadic: false,\n-            }),\n+            sig: ty::Binder(self.infcx.tcx.mk_fn_sig(input_tys.iter().cloned(), output_ty, false)),\n         }))\n     }\n "}, {"sha": "4c86331a525766d5ca759642620a4fca7a94a861", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/296ec5f9b7bf5aec05ed6672d3499079d35e4594/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296ec5f9b7bf5aec05ed6672d3499079d35e4594/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=296ec5f9b7bf5aec05ed6672d3499079d35e4594", "patch": "@@ -529,7 +529,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n     {\n         debug!(\"check_call_inputs({:?}, {:?})\", sig, args);\n         if args.len() < sig.inputs().len() ||\n-           (args.len() > sig.inputs().len() && !sig.variadic()) {\n+           (args.len() > sig.inputs().len() && !sig.variadic) {\n             span_mirbug!(self, term, \"call to {:?} with wrong # of args\", sig);\n         }\n         for (n, (fn_arg, op_arg)) in sig.inputs().iter().zip(args).enumerate() {"}, {"sha": "0ac853e99eecdba47d0fc66dd9ca0fe2054a825c", "filename": "src/librustc_trans/abi.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/296ec5f9b7bf5aec05ed6672d3499079d35e4594/src%2Flibrustc_trans%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296ec5f9b7bf5aec05ed6672d3499079d35e4594/src%2Flibrustc_trans%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fabi.rs?ref=296ec5f9b7bf5aec05ed6672d3499079d35e4594", "patch": "@@ -369,7 +369,7 @@ impl FnType {\n \n         let mut inputs = sig.inputs();\n         let extra_args = if abi == RustCall {\n-            assert!(!sig.variadic() && extra_args.is_empty());\n+            assert!(!sig.variadic && extra_args.is_empty());\n \n             match sig.inputs().last().unwrap().sty {\n                 ty::TyTuple(ref tupled_arguments) => {\n@@ -382,7 +382,7 @@ impl FnType {\n                 }\n             }\n         } else {\n-            assert!(sig.variadic() || extra_args.is_empty());\n+            assert!(sig.variadic || extra_args.is_empty());\n             extra_args\n         };\n \n@@ -525,7 +525,7 @@ impl FnType {\n         FnType {\n             args: args,\n             ret: ret,\n-            variadic: sig.variadic(),\n+            variadic: sig.variadic,\n             cconv: cconv\n         }\n     }"}, {"sha": "867e4dce19aca30a06f6a15350cb9fdc977538ad", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/296ec5f9b7bf5aec05ed6672d3499079d35e4594/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296ec5f9b7bf5aec05ed6672d3499079d35e4594/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=296ec5f9b7bf5aec05ed6672d3499079d35e4594", "patch": "@@ -1077,7 +1077,7 @@ pub fn trans_ctor_shim<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         let dest_val = adt::MaybeSizedValue::sized(dest); // Can return unsized value\n         let mut llarg_idx = fcx.fn_ty.ret.is_indirect() as usize;\n         let mut arg_idx = 0;\n-        for (i, arg_ty) in sig.inputs().into_iter().enumerate() {\n+        for (i, arg_ty) in sig.inputs().iter().enumerate() {\n             let lldestptr = adt::trans_field_ptr(bcx, sig.output(), dest_val, Disr::from(disr), i);\n             let arg = &fcx.fn_ty.args[arg_idx];\n             arg_idx += 1;"}, {"sha": "7fb57dc19fcf995201b7113eabe83a9683166cc5", "filename": "src/librustc_trans/callee.rs", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/296ec5f9b7bf5aec05ed6672d3499079d35e4594/src%2Flibrustc_trans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296ec5f9b7bf5aec05ed6672d3499079d35e4594/src%2Flibrustc_trans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcallee.rs?ref=296ec5f9b7bf5aec05ed6672d3499079d35e4594", "patch": "@@ -38,6 +38,7 @@ use type_of;\n use Disr;\n use rustc::ty::{self, Ty, TypeFoldable};\n use rustc::hir;\n+use std::iter;\n \n use syntax_pos::DUMMY_SP;\n \n@@ -329,13 +330,10 @@ fn trans_fn_once_adapter_shim<'a, 'tcx>(\n \n     // Make a version with the type of by-ref closure.\n     let ty::ClosureTy { unsafety, abi, mut sig } = tcx.closure_type(def_id, substs);\n-    sig.0 = ty::FnSig::new({\n-            let mut inputs = sig.0.inputs().to_owned();\n-            inputs.insert(0, ref_closure_ty); // sig has no self type as of yet\n-            inputs\n-        },\n+    sig.0 = tcx.mk_fn_sig(\n+        iter::once(ref_closure_ty).chain(sig.0.inputs().iter().cloned()),\n         sig.0.output(),\n-        sig.0.variadic()\n+        sig.0.variadic\n     );\n     let llref_fn_ty = tcx.mk_fn_ptr(tcx.mk_bare_fn(ty::BareFnTy {\n         unsafety: unsafety,\n@@ -349,14 +347,10 @@ fn trans_fn_once_adapter_shim<'a, 'tcx>(\n     // Make a version of the closure type with the same arguments, but\n     // with argument #0 being by value.\n     assert_eq!(abi, Abi::RustCall);\n-    sig.0 = ty::FnSig::new(\n-        {\n-            let mut inputs = sig.0.inputs().to_owned();\n-            inputs[0] = closure_ty;\n-            inputs\n-        },\n+    sig.0 = tcx.mk_fn_sig(\n+        iter::once(closure_ty).chain(sig.0.inputs().iter().skip(1).cloned()),\n         sig.0.output(),\n-        sig.0.variadic()\n+        sig.0.variadic\n     );\n \n     let sig = tcx.erase_late_bound_regions_and_normalize(&sig);\n@@ -507,8 +501,8 @@ fn trans_fn_pointer_shim<'a, 'tcx>(\n     };\n     let sig = tcx.erase_late_bound_regions_and_normalize(sig);\n     let tuple_input_ty = tcx.intern_tup(sig.inputs());\n-    let sig = ty::FnSig::new(\n-        vec![bare_fn_ty_maybe_ref, tuple_input_ty],\n+    let sig = tcx.mk_fn_sig(\n+        [bare_fn_ty_maybe_ref, tuple_input_ty].iter().cloned(),\n         sig.output(),\n         false\n     );"}, {"sha": "b1d61cea39ceceaaad7b2164e6c62dcfc1956633", "filename": "src/librustc_trans/common.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/296ec5f9b7bf5aec05ed6672d3499079d35e4594/src%2Flibrustc_trans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296ec5f9b7bf5aec05ed6672d3499079d35e4594/src%2Flibrustc_trans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcommon.rs?ref=296ec5f9b7bf5aec05ed6672d3499079d35e4594", "patch": "@@ -418,8 +418,8 @@ impl<'a, 'tcx> FunctionContext<'a, 'tcx> {\n         let ty = tcx.mk_fn_ptr(tcx.mk_bare_fn(ty::BareFnTy {\n             unsafety: hir::Unsafety::Unsafe,\n             abi: Abi::C,\n-            sig: ty::Binder(ty::FnSig::new(\n-                vec![tcx.mk_mut_ptr(tcx.types.u8)],\n+            sig: ty::Binder(tcx.mk_fn_sig(\n+                iter::once(tcx.mk_mut_ptr(tcx.types.u8)),\n                 tcx.types.never,\n                 false\n             )),\n@@ -1091,10 +1091,10 @@ pub fn ty_fn_ty<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                 ty::ClosureKind::FnOnce => ty,\n             };\n \n-            let sig = sig.map_bound(|sig| ty::FnSig::new(\n-                iter::once(env_ty).chain(sig.inputs().into_iter().cloned()).collect(),\n+            let sig = sig.map_bound(|sig| tcx.mk_fn_sig(\n+                iter::once(env_ty).chain(sig.inputs().iter().cloned()),\n                 sig.output(),\n-                sig.variadic()\n+                sig.variadic\n             ));\n             Cow::Owned(ty::BareFnTy { unsafety: unsafety, abi: abi, sig: sig })\n         }"}, {"sha": "788ce32937d847a8a9697ec9bd915eddc659aecc", "filename": "src/librustc_trans/debuginfo/type_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/296ec5f9b7bf5aec05ed6672d3499079d35e4594/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296ec5f9b7bf5aec05ed6672d3499079d35e4594/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs?ref=296ec5f9b7bf5aec05ed6672d3499079d35e4594", "patch": "@@ -125,7 +125,7 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                 output.pop();\n             }\n \n-            if sig.variadic() {\n+            if sig.variadic {\n                 if !sig.inputs().is_empty() {\n                     output.push_str(\", ...\");\n                 } else {"}, {"sha": "577ffbad1348ba07673018c6958c0f04bdeeef32", "filename": "src/librustc_trans/intrinsic.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/296ec5f9b7bf5aec05ed6672d3499079d35e4594/src%2Flibrustc_trans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296ec5f9b7bf5aec05ed6672d3499079d35e4594/src%2Flibrustc_trans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fintrinsic.rs?ref=296ec5f9b7bf5aec05ed6672d3499079d35e4594", "patch": "@@ -36,6 +36,7 @@ use rustc::session::Session;\n use syntax_pos::{Span, DUMMY_SP};\n \n use std::cmp::Ordering;\n+use std::iter;\n \n fn get_simple_intrinsic(ccx: &CrateContext, name: &str) -> Option<ValueRef> {\n     let llvm_name = match name {\n@@ -1012,7 +1013,7 @@ fn gen_fn<'a, 'tcx>(fcx: &FunctionContext<'a, 'tcx>,\n                     trans: &mut for<'b> FnMut(Block<'b, 'tcx>))\n                     -> ValueRef {\n     let ccx = fcx.ccx;\n-    let sig = ty::FnSig::new(inputs, output, false);\n+    let sig = ccx.tcx().mk_fn_sig(inputs.into_iter(), output, false);\n     let fn_ty = FnType::new(ccx, Abi::Rust, &sig, &[]);\n \n     let rust_fn_ty = ccx.tcx().mk_fn_ptr(ccx.tcx().mk_bare_fn(ty::BareFnTy {\n@@ -1047,7 +1048,7 @@ fn get_rust_try_fn<'a, 'tcx>(fcx: &FunctionContext<'a, 'tcx>,\n     let fn_ty = tcx.mk_fn_ptr(tcx.mk_bare_fn(ty::BareFnTy {\n         unsafety: hir::Unsafety::Unsafe,\n         abi: Abi::Rust,\n-        sig: ty::Binder(ty::FnSig::new(vec![i8p], tcx.mk_nil(), false)),\n+        sig: ty::Binder(tcx.mk_fn_sig(iter::once(i8p), tcx.mk_nil(), false)),\n     }));\n     let output = tcx.types.i32;\n     let rust_try = gen_fn(fcx, \"__rust_try\", vec![fn_ty, i8p, i8p], output, trans);"}, {"sha": "214eaeb817f302b24011f9603d5899aa1bf022cc", "filename": "src/librustc_trans/trans_item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/296ec5f9b7bf5aec05ed6672d3499079d35e4594/src%2Flibrustc_trans%2Ftrans_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296ec5f9b7bf5aec05ed6672d3499079d35e4594/src%2Flibrustc_trans%2Ftrans_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans_item.rs?ref=296ec5f9b7bf5aec05ed6672d3499079d35e4594", "patch": "@@ -187,7 +187,7 @@ impl<'a, 'tcx> TransItem<'tcx> {\n         assert_eq!(dg.ty(), glue::get_drop_glue_type(tcx, dg.ty()));\n         let t = dg.ty();\n \n-        let sig = ty::FnSig::new(vec![tcx.mk_mut_ptr(tcx.types.i8)], tcx.mk_nil(), false);\n+        let sig = tcx.mk_fn_sig(iter::once(tcx.mk_mut_ptr(tcx.types.i8)), tcx.mk_nil(), false);\n \n         // Create a FnType for fn(*mut i8) and substitute the real type in\n         // later - that prevents FnType from splitting fat pointers up.\n@@ -487,7 +487,7 @@ impl<'a, 'tcx> DefPathBasedNames<'a, 'tcx> {\n                     output.pop();\n                 }\n \n-                if sig.variadic() {\n+                if sig.variadic {\n                     if !sig.inputs().is_empty() {\n                         output.push_str(\", ...\");\n                     } else {"}, {"sha": "d458c7c009e2ee8fccce3fd31a9d326781a6a7d6", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/296ec5f9b7bf5aec05ed6672d3499079d35e4594/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296ec5f9b7bf5aec05ed6672d3499079d35e4594/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=296ec5f9b7bf5aec05ed6672d3499079d35e4594", "patch": "@@ -1796,15 +1796,16 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n             hir::DefaultReturn(..) => self.tcx().mk_nil(),\n         };\n \n-        let input_tys = self_ty.into_iter().chain(arg_tys).collect();\n-\n-        debug!(\"ty_of_method_or_bare_fn: input_tys={:?}\", input_tys);\n         debug!(\"ty_of_method_or_bare_fn: output_ty={:?}\", output_ty);\n \n         self.tcx().mk_bare_fn(ty::BareFnTy {\n             unsafety: unsafety,\n             abi: abi,\n-            sig: ty::Binder(ty::FnSig::new(input_tys, output_ty, decl.variadic)),\n+            sig: ty::Binder(self.tcx().mk_fn_sig(\n+                self_ty.into_iter().chain(arg_tys),\n+                output_ty,\n+                decl.variadic\n+            )),\n         })\n     }\n \n@@ -1846,7 +1847,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         // that function type\n         let rb = rscope::BindingRscope::new();\n \n-        let input_tys: Vec<_> = decl.inputs.iter().enumerate().map(|(i, a)| {\n+        let input_tys = decl.inputs.iter().enumerate().map(|(i, a)| {\n             let expected_arg_ty = expected_sig.as_ref().and_then(|e| {\n                 // no guarantee that the correct number of expected args\n                 // were supplied\n@@ -1857,9 +1858,9 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                 }\n             });\n             self.ty_of_arg(&rb, a, expected_arg_ty)\n-        }).collect();\n+        });\n \n-        let expected_ret_ty = expected_sig.map(|e| e.output());\n+        let expected_ret_ty = expected_sig.as_ref().map(|e| e.output());\n \n         let is_infer = match decl.output {\n             hir::Return(ref output) if output.node == hir::TyInfer => true,\n@@ -1876,13 +1877,12 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n             hir::DefaultReturn(..) => bug!(),\n         };\n \n-        debug!(\"ty_of_closure: input_tys={:?}\", input_tys);\n         debug!(\"ty_of_closure: output_ty={:?}\", output_ty);\n \n         ty::ClosureTy {\n             unsafety: unsafety,\n             abi: abi,\n-            sig: ty::Binder(ty::FnSig::new(input_tys, output_ty, decl.variadic)),\n+            sig: ty::Binder(self.tcx().mk_fn_sig(input_tys, output_ty, decl.variadic)),\n         }\n     }\n "}, {"sha": "4fba29def226c6eb0a0ed0fa359962e245eac116", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/296ec5f9b7bf5aec05ed6672d3499079d35e4594/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296ec5f9b7bf5aec05ed6672d3499079d35e4594/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=296ec5f9b7bf5aec05ed6672d3499079d35e4594", "patch": "@@ -237,8 +237,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 // This is the \"default\" function signature, used in case of error.\n                 // In that case, we check each argument against \"error\" in order to\n                 // set up all the node type bindings.\n-                error_fn_sig = ty::Binder(ty::FnSig::new(\n-                    self.err_args(arg_exprs.len()),\n+                error_fn_sig = ty::Binder(self.tcx.mk_fn_sig(\n+                    self.err_args(arg_exprs.len()).into_iter(),\n                     self.tcx.types.err,\n                     false,\n                 ));\n@@ -267,7 +267,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                   fn_sig.inputs(),\n                                   &expected_arg_tys[..],\n                                   arg_exprs,\n-                                  fn_sig.variadic(),\n+                                  fn_sig.variadic,\n                                   TupleArgumentsFlag::DontTupleArguments,\n                                   def_span);\n \n@@ -294,7 +294,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                   fn_sig.inputs(),\n                                   &expected_arg_tys,\n                                   arg_exprs,\n-                                  fn_sig.variadic(),\n+                                  fn_sig.variadic,\n                                   TupleArgumentsFlag::TupleArguments,\n                                   None);\n \n@@ -366,7 +366,7 @@ impl<'gcx, 'tcx> DeferredCallResolution<'gcx, 'tcx> for CallResolution<'gcx, 'tc\n                 debug!(\"attempt_resolution: method_callee={:?}\", method_callee);\n \n                 for (method_arg_ty, self_arg_ty) in\n-                    method_sig.inputs().into_iter().skip(1).zip(self.fn_sig.inputs()) {\n+                    method_sig.inputs().iter().skip(1).zip(self.fn_sig.inputs()) {\n                     fcx.demand_eqtype(self.call_expr.span, &self_arg_ty, &method_arg_ty);\n                 }\n "}, {"sha": "142a8b971110df2fc9a72e79a9c2ffb732a225a7", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/296ec5f9b7bf5aec05ed6672d3499079d35e4594/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296ec5f9b7bf5aec05ed6672d3499079d35e4594/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=296ec5f9b7bf5aec05ed6672d3499079d35e4594", "patch": "@@ -15,6 +15,7 @@ use super::{check_fn, Expectation, FnCtxt};\n use astconv::AstConv;\n use rustc::ty::{self, ToPolyTraitRef, Ty};\n use std::cmp;\n+use std::iter;\n use syntax::abi::Abi;\n use rustc::hir;\n \n@@ -86,7 +87,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         // Tuple up the arguments and insert the resulting function type into\n         // the `closures` table.\n-        fn_ty.sig.0 = ty::FnSig::new(vec![self.tcx.intern_tup(fn_ty.sig.skip_binder().inputs())],\n+        fn_ty.sig.0 = self.tcx.mk_fn_sig(\n+            iter::once(self.tcx.intern_tup(fn_ty.sig.skip_binder().inputs())),\n             fn_ty.sig.skip_binder().output(),\n             fn_ty.sig.variadic()\n         );\n@@ -215,19 +217,17 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                arg_param_ty);\n \n         let input_tys = match arg_param_ty.sty {\n-            ty::TyTuple(tys) => tys.to_vec(),\n+            ty::TyTuple(tys) => tys.into_iter(),\n             _ => {\n                 return None;\n             }\n         };\n-        debug!(\"deduce_sig_from_projection: input_tys {:?}\", input_tys);\n \n         let ret_param_ty = projection.0.ty;\n         let ret_param_ty = self.resolve_type_vars_if_possible(&ret_param_ty);\n-        debug!(\"deduce_sig_from_projection: ret_param_ty {:?}\",\n-               ret_param_ty);\n+        debug!(\"deduce_sig_from_projection: ret_param_ty {:?}\", ret_param_ty);\n \n-        let fn_sig = ty::FnSig::new(input_tys, ret_param_ty, false);\n+        let fn_sig = self.tcx.mk_fn_sig(input_tys.cloned(), ret_param_ty, false);\n         debug!(\"deduce_sig_from_projection: fn_sig {:?}\", fn_sig);\n \n         Some(fn_sig)"}, {"sha": "183a2a48ff523664a30cf9dd0d165bdefb64244c", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/296ec5f9b7bf5aec05ed6672d3499079d35e4594/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296ec5f9b7bf5aec05ed6672d3499079d35e4594/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=296ec5f9b7bf5aec05ed6672d3499079d35e4594", "patch": "@@ -14,7 +14,6 @@\n use intrinsics;\n use rustc::traits::{ObligationCause, ObligationCauseCode};\n use rustc::ty::subst::Substs;\n-use rustc::ty::FnSig;\n use rustc::ty::{self, Ty};\n use rustc::util::nodemap::FxHashMap;\n use {CrateCtxt, require_same_types};\n@@ -26,6 +25,8 @@ use syntax_pos::Span;\n \n use rustc::hir;\n \n+use std::iter;\n+\n fn equate_intrinsic_type<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                                    it: &hir::ForeignItem,\n                                    n_tps: usize,\n@@ -42,7 +43,7 @@ fn equate_intrinsic_type<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n     let fty = tcx.mk_fn_def(def_id, substs, tcx.mk_bare_fn(ty::BareFnTy {\n         unsafety: hir::Unsafety::Unsafe,\n         abi: abi,\n-        sig: ty::Binder(FnSig::new(inputs, output, false)),\n+        sig: ty::Binder(tcx.mk_fn_sig(inputs.into_iter(), output, false)),\n     }));\n     let i_n_tps = tcx.item_generics(def_id).types.len();\n     if i_n_tps != n_tps {\n@@ -295,7 +296,7 @@ pub fn check_intrinsic_type(ccx: &CrateCtxt, it: &hir::ForeignItem) {\n                 let fn_ty = tcx.mk_bare_fn(ty::BareFnTy {\n                     unsafety: hir::Unsafety::Normal,\n                     abi: Abi::Rust,\n-                    sig: ty::Binder(FnSig::new(vec![mut_u8], tcx.mk_nil(), false)),\n+                    sig: ty::Binder(tcx.mk_fn_sig(iter::once(mut_u8), tcx.mk_nil(), false)),\n                 });\n                 (0, vec![tcx.mk_fn_ptr(fn_ty), mut_u8, mut_u8], tcx.types.i32)\n             }"}, {"sha": "1b35081d5241c7909a5fdd6960cd12ceb56fdc85", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/296ec5f9b7bf5aec05ed6672d3499079d35e4594/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296ec5f9b7bf5aec05ed6672d3499079d35e4594/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=296ec5f9b7bf5aec05ed6672d3499079d35e4594", "patch": "@@ -790,7 +790,7 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n \n     fcx.require_type_is_sized(fcx.ret_ty, decl.output.span(), traits::ReturnType);\n     fcx.ret_ty = fcx.instantiate_anon_types(&fcx.ret_ty);\n-    fn_sig = ty::FnSig::new(fn_sig.inputs().to_owned(), fcx.ret_ty, fn_sig.variadic());\n+    fn_sig = fcx.tcx.mk_fn_sig(fn_sig.inputs().iter().cloned(), &fcx.ret_ty, fn_sig.variadic);\n \n     {\n         let mut visit = GatherLocalsVisitor { fcx: &fcx, };\n@@ -2473,11 +2473,14 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             match method_fn_ty.sty {\n                 ty::TyFnDef(def_id, .., ref fty) => {\n                     // HACK(eddyb) ignore self in the definition (see above).\n-                    let expected_arg_tys = self.expected_types_for_fn_args(sp, expected,\n-                                                                           fty.sig.0.output(),\n-                                                                           &fty.sig.0.inputs()[1..]);\n+                    let expected_arg_tys = self.expected_types_for_fn_args(\n+                        sp,\n+                        expected,\n+                        fty.sig.0.output(),\n+                        &fty.sig.0.inputs()[1..]\n+                    );\n                     self.check_argument_types(sp, &fty.sig.0.inputs()[1..], &expected_arg_tys[..],\n-                                              args_no_rcvr, fty.sig.0.variadic(), tuple_arguments,\n+                                              args_no_rcvr, fty.sig.0.variadic, tuple_arguments,\n                                               self.tcx.map.span_if_local(def_id));\n                     fty.sig.0.output()\n                 }"}, {"sha": "fba77d171797e1da459a8cb77716523cf671d078", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/296ec5f9b7bf5aec05ed6672d3499079d35e4594/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296ec5f9b7bf5aec05ed6672d3499079d35e4594/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=296ec5f9b7bf5aec05ed6672d3499079d35e4594", "patch": "@@ -920,17 +920,12 @@ fn convert_variant_ctor<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n     let ctor_ty = match variant.ctor_kind {\n         CtorKind::Fictive | CtorKind::Const => ty,\n         CtorKind::Fn => {\n-            let inputs: Vec<_> =\n-                variant.fields\n-                .iter()\n-                .map(|field| tcx.item_type(field.did))\n-                .collect();\n-            let substs = mk_item_substs(&ccx.icx(&predicates),\n-                                        ccx.tcx.map.span(ctor_id), def_id);\n+            let inputs = variant.fields.iter().map(|field| tcx.item_type(field.did));\n+            let substs = mk_item_substs(&ccx.icx(&predicates), ccx.tcx.map.span(ctor_id), def_id);\n             tcx.mk_fn_def(def_id, substs, tcx.mk_bare_fn(ty::BareFnTy {\n                 unsafety: hir::Unsafety::Normal,\n                 abi: abi::Abi::Rust,\n-                sig: ty::Binder(ty::FnSig::new(inputs, ty, false))\n+                sig: ty::Binder(ccx.tcx.mk_fn_sig(inputs, ty, false))\n             }))\n         }\n     };\n@@ -2081,7 +2076,7 @@ fn compute_type_of_foreign_fn_decl<'a, 'tcx>(\n     ccx.tcx.mk_fn_def(def_id, substs, ccx.tcx.mk_bare_fn(ty::BareFnTy {\n         abi: abi,\n         unsafety: hir::Unsafety::Unsafe,\n-        sig: ty::Binder(ty::FnSig::new(input_tys, output, decl.variadic)),\n+        sig: ty::Binder(ccx.tcx.mk_fn_sig(input_tys.into_iter(), output, decl.variadic)),\n     }))\n }\n "}, {"sha": "50d4c3cd0c994a8fd0e7080a6fc328a6b66f31ce", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/296ec5f9b7bf5aec05ed6672d3499079d35e4594/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296ec5f9b7bf5aec05ed6672d3499079d35e4594/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=296ec5f9b7bf5aec05ed6672d3499079d35e4594", "patch": "@@ -116,6 +116,7 @@ use syntax::ast;\n use syntax::abi::Abi;\n use syntax_pos::Span;\n \n+use std::iter;\n use std::cell::RefCell;\n use util::nodemap::NodeMap;\n \n@@ -222,7 +223,7 @@ fn check_main_fn_ty(ccx: &CrateCtxt,\n                                       tcx.mk_bare_fn(ty::BareFnTy {\n                 unsafety: hir::Unsafety::Normal,\n                 abi: Abi::Rust,\n-                sig: ty::Binder(ty::FnSig::new(Vec::new(), tcx.mk_nil(), false))\n+                sig: ty::Binder(tcx.mk_fn_sig(iter::empty(), tcx.mk_nil(), false))\n             }));\n \n             require_same_types(\n@@ -270,11 +271,11 @@ fn check_start_fn_ty(ccx: &CrateCtxt,\n                                       tcx.mk_bare_fn(ty::BareFnTy {\n                 unsafety: hir::Unsafety::Normal,\n                 abi: Abi::Rust,\n-                sig: ty::Binder(ty::FnSig::new(\n-                    vec![\n+                sig: ty::Binder(tcx.mk_fn_sig(\n+                    [\n                         tcx.types.isize,\n                         tcx.mk_imm_ptr(tcx.mk_imm_ptr(tcx.types.u8))\n-                    ],\n+                    ].iter().cloned(),\n                     tcx.types.isize,\n                     false,\n                 )),"}]}