{"sha": "4eeb623e9ee35db03ec3281dcfd1c61194312404", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlZWI2MjNlOWVlMzVkYjAzZWMzMjgxZGNmZDFjNjExOTQzMTI0MDQ=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2019-07-06T21:30:32Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2019-08-16T15:11:18Z"}, "message": "Fix intra-rustdoc links", "tree": {"sha": "be94e150b86a1f8f927736b7a094ac23cdbaca0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be94e150b86a1f8f927736b7a094ac23cdbaca0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4eeb623e9ee35db03ec3281dcfd1c61194312404", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4eeb623e9ee35db03ec3281dcfd1c61194312404", "html_url": "https://github.com/rust-lang/rust/commit/4eeb623e9ee35db03ec3281dcfd1c61194312404", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4eeb623e9ee35db03ec3281dcfd1c61194312404/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "170d933d2f8a7d4787355a86136093af86b03077", "url": "https://api.github.com/repos/rust-lang/rust/commits/170d933d2f8a7d4787355a86136093af86b03077", "html_url": "https://github.com/rust-lang/rust/commit/170d933d2f8a7d4787355a86136093af86b03077"}], "stats": {"total": 16, "additions": 14, "deletions": 2}, "files": [{"sha": "3442fce467a70cfc1d53614dc35f70dba22bc384", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4eeb623e9ee35db03ec3281dcfd1c61194312404/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eeb623e9ee35db03ec3281dcfd1c61194312404/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=4eeb623e9ee35db03ec3281dcfd1c61194312404", "patch": "@@ -200,6 +200,8 @@ impl<T> Box<mem::MaybeUninit<T>> {\n     /// Calling this when the content is not yet fully initialized\n     /// causes immediate undefined behavior.\n     ///\n+    /// [`MaybeUninit::assume_init`]: ../../std/mem/union.MaybeUninit.html#method.assume_init\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -234,6 +236,8 @@ impl<T> Box<[mem::MaybeUninit<T>]> {\n     /// Calling this when the content is not yet fully initialized\n     /// causes immediate undefined behavior.\n     ///\n+    /// [`MaybeUninit::assume_init`]: ../../std/mem/union.MaybeUninit.html#method.assume_init\n+    ///\n     /// # Examples\n     ///\n     /// ```"}, {"sha": "70911790be24e64e67df52bf845c1ebedf3f362a", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4eeb623e9ee35db03ec3281dcfd1c61194312404/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eeb623e9ee35db03ec3281dcfd1c61194312404/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=4eeb623e9ee35db03ec3281dcfd1c61194312404", "patch": "@@ -471,6 +471,8 @@ impl<T> Rc<mem::MaybeUninit<T>> {\n     /// Calling this when the content is not yet fully initialized\n     /// causes immediate undefined behavior.\n     ///\n+    /// [`MaybeUninit::assume_init`]: ../../std/mem/union.MaybeUninit.html#method.assume_init\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -513,6 +515,8 @@ impl<T> Rc<[mem::MaybeUninit<T>]> {\n     /// Calling this when the content is not yet fully initialized\n     /// causes immediate undefined behavior.\n     ///\n+    /// [`MaybeUninit::assume_init`]: ../../std/mem/union.MaybeUninit.html#method.assume_init\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -745,7 +749,7 @@ impl<T: ?Sized> Rc<T> {\n     ///\n     /// # Safety\n     ///\n-    /// There must be no other `Rc` or [`Weak`][weak] pointers to the same value.\n+    /// There must be no other `Rc` or [`Weak`] pointers to the same value.\n     /// This is the case for example immediately after `Rc::new`.\n     ///\n     /// # Examples"}, {"sha": "901d2d831d16b8e0698ebb507855e6bc8ea07e68", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4eeb623e9ee35db03ec3281dcfd1c61194312404/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eeb623e9ee35db03ec3281dcfd1c61194312404/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=4eeb623e9ee35db03ec3281dcfd1c61194312404", "patch": "@@ -455,6 +455,8 @@ impl<T> Arc<mem::MaybeUninit<T>> {\n     /// Calling this when the content is not yet fully initialized\n     /// causes immediate undefined behavior.\n     ///\n+    /// [`MaybeUninit::assume_init`]: ../../std/mem/union.MaybeUninit.html#method.assume_init\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -497,6 +499,8 @@ impl<T> Arc<[mem::MaybeUninit<T>]> {\n     /// Calling this when the content is not yet fully initialized\n     /// causes immediate undefined behavior.\n     ///\n+    /// [`MaybeUninit::assume_init`]: ../../std/mem/union.MaybeUninit.html#method.assume_init\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -1130,7 +1134,7 @@ impl<T: ?Sized> Arc<T> {\n     ///\n     /// # Safety\n     ///\n-    /// There must be no other `Arc` or [`Weak`][weak] pointers to the same value.\n+    /// There must be no other `Arc` or [`Weak`] pointers to the same value.\n     /// This is the case for example immediately after `Rc::new`.\n     ///\n     /// # Examples"}]}