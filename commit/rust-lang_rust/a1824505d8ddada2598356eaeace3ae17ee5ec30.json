{"sha": "a1824505d8ddada2598356eaeace3ae17ee5ec30", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExODI0NTA1ZDhkZGFkYTI1OTgzNTZlYWVhY2UzYWUxN2VlNWVjMzA=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-04-01T11:18:06Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-05-02T07:46:42Z"}, "message": "Gate on clippy on CI", "tree": {"sha": "98439350d186d1fb50a117d197e0a9dc4d913fdc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98439350d186d1fb50a117d197e0a9dc4d913fdc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1824505d8ddada2598356eaeace3ae17ee5ec30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1824505d8ddada2598356eaeace3ae17ee5ec30", "html_url": "https://github.com/rust-lang/rust/commit/a1824505d8ddada2598356eaeace3ae17ee5ec30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1824505d8ddada2598356eaeace3ae17ee5ec30/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dae90c195989b09475b6c0225a3018cbd7afa587", "url": "https://api.github.com/repos/rust-lang/rust/commits/dae90c195989b09475b6c0225a3018cbd7afa587", "html_url": "https://github.com/rust-lang/rust/commit/dae90c195989b09475b6c0225a3018cbd7afa587"}], "stats": {"total": 93, "additions": 33, "deletions": 60}, "files": [{"sha": "bae904114960a86b1cb2d2560b7dde5a9681c37e", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 28, "deletions": 49, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/a1824505d8ddada2598356eaeace3ae17ee5ec30/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1824505d8ddada2598356eaeace3ae17ee5ec30/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=a1824505d8ddada2598356eaeace3ae17ee5ec30", "patch": "@@ -1330,7 +1330,7 @@ pub struct Clippy {\n }\n \n impl Step for Clippy {\n-    type Output = Option<PathBuf>;\n+    type Output = PathBuf;\n     const ONLY_HOSTS: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n@@ -1348,7 +1348,7 @@ impl Step for Clippy {\n         });\n     }\n \n-    fn run(self, builder: &Builder<'_>) -> Option<PathBuf> {\n+    fn run(self, builder: &Builder<'_>) -> PathBuf {\n         let compiler = self.compiler;\n         let target = self.target;\n         assert!(builder.config.extended);\n@@ -1368,16 +1368,10 @@ impl Step for Clippy {\n         // state for clippy isn't testing.\n         let clippy = builder\n             .ensure(tool::Clippy { compiler, target, extra_features: Vec::new() })\n-            .or_else(|| {\n-                missing_tool(\"clippy\", builder.build.config.missing_tools);\n-                None\n-            })?;\n+            .expect(\"clippy expected to build - essential tool\");\n         let cargoclippy = builder\n             .ensure(tool::CargoClippy { compiler, target, extra_features: Vec::new() })\n-            .or_else(|| {\n-                missing_tool(\"cargo clippy\", builder.build.config.missing_tools);\n-                None\n-            })?;\n+            .expect(\"clippy expected to build - essential tool\");\n \n         builder.install(&clippy, &image.join(\"bin\"), 0o755);\n         builder.install(&cargoclippy, &image.join(\"bin\"), 0o755);\n@@ -1416,7 +1410,7 @@ impl Step for Clippy {\n         builder.info(&format!(\"Dist clippy stage{} ({})\", compiler.stage, target));\n         let _time = timeit(builder);\n         builder.run(&mut cmd);\n-        Some(distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target)))\n+        distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target))\n     }\n }\n \n@@ -1683,7 +1677,7 @@ impl Step for Extended {\n         tarballs.push(rustc_installer);\n         tarballs.push(cargo_installer);\n         tarballs.extend(rls_installer.clone());\n-        tarballs.extend(clippy_installer.clone());\n+        tarballs.push(clippy_installer);\n         tarballs.extend(miri_installer.clone());\n         tarballs.extend(rustfmt_installer.clone());\n         tarballs.extend(llvm_tools_installer);\n@@ -1761,9 +1755,6 @@ impl Step for Extended {\n             if rls_installer.is_none() {\n                 contents = filter(&contents, \"rls\");\n             }\n-            if clippy_installer.is_none() {\n-                contents = filter(&contents, \"clippy\");\n-            }\n             if miri_installer.is_none() {\n                 contents = filter(&contents, \"miri\");\n             }\n@@ -1805,13 +1796,11 @@ impl Step for Extended {\n             prepare(\"rust-docs\");\n             prepare(\"rust-std\");\n             prepare(\"rust-analysis\");\n+            prepare(\"clippy\");\n \n             if rls_installer.is_some() {\n                 prepare(\"rls\");\n             }\n-            if clippy_installer.is_some() {\n-                prepare(\"clippy\");\n-            }\n             if miri_installer.is_some() {\n                 prepare(\"miri\");\n             }\n@@ -1863,12 +1852,10 @@ impl Step for Extended {\n             prepare(\"rust-analysis\");\n             prepare(\"rust-docs\");\n             prepare(\"rust-std\");\n+            prepare(\"clippy\");\n             if rls_installer.is_some() {\n                 prepare(\"rls\");\n             }\n-            if clippy_installer.is_some() {\n-                prepare(\"clippy\");\n-            }\n             if miri_installer.is_some() {\n                 prepare(\"miri\");\n             }\n@@ -1989,25 +1976,23 @@ impl Step for Extended {\n                         .arg(etc.join(\"msi/remove-duplicates.xsl\")),\n                 );\n             }\n-            if clippy_installer.is_some() {\n-                builder.run(\n-                    Command::new(&heat)\n-                        .current_dir(&exe)\n-                        .arg(\"dir\")\n-                        .arg(\"clippy\")\n-                        .args(&heat_flags)\n-                        .arg(\"-cg\")\n-                        .arg(\"ClippyGroup\")\n-                        .arg(\"-dr\")\n-                        .arg(\"Clippy\")\n-                        .arg(\"-var\")\n-                        .arg(\"var.ClippyDir\")\n-                        .arg(\"-out\")\n-                        .arg(exe.join(\"ClippyGroup.wxs\"))\n-                        .arg(\"-t\")\n-                        .arg(etc.join(\"msi/remove-duplicates.xsl\")),\n-                );\n-            }\n+            builder.run(\n+                Command::new(&heat)\n+                    .current_dir(&exe)\n+                    .arg(\"dir\")\n+                    .arg(\"clippy\")\n+                    .args(&heat_flags)\n+                    .arg(\"-cg\")\n+                    .arg(\"ClippyGroup\")\n+                    .arg(\"-dr\")\n+                    .arg(\"Clippy\")\n+                    .arg(\"-var\")\n+                    .arg(\"var.ClippyDir\")\n+                    .arg(\"-out\")\n+                    .arg(exe.join(\"ClippyGroup.wxs\"))\n+                    .arg(\"-t\")\n+                    .arg(etc.join(\"msi/remove-duplicates.xsl\")),\n+            );\n             if miri_installer.is_some() {\n                 builder.run(\n                     Command::new(&heat)\n@@ -2073,6 +2058,7 @@ impl Step for Extended {\n                     .arg(\"-dCargoDir=cargo\")\n                     .arg(\"-dStdDir=rust-std\")\n                     .arg(\"-dAnalysisDir=rust-analysis\")\n+                    .arg(\"-dClippyDir=clippy\")\n                     .arg(\"-arch\")\n                     .arg(&arch)\n                     .arg(\"-out\")\n@@ -2083,9 +2069,6 @@ impl Step for Extended {\n                 if rls_installer.is_some() {\n                     cmd.arg(\"-dRlsDir=rls\");\n                 }\n-                if clippy_installer.is_some() {\n-                    cmd.arg(\"-dClippyDir=clippy\");\n-                }\n                 if miri_installer.is_some() {\n                     cmd.arg(\"-dMiriDir=miri\");\n                 }\n@@ -2101,12 +2084,10 @@ impl Step for Extended {\n             candle(\"DocsGroup.wxs\".as_ref());\n             candle(\"CargoGroup.wxs\".as_ref());\n             candle(\"StdGroup.wxs\".as_ref());\n+            candle(\"ClippyGroup.wxs\".as_ref());\n             if rls_installer.is_some() {\n                 candle(\"RlsGroup.wxs\".as_ref());\n             }\n-            if clippy_installer.is_some() {\n-                candle(\"ClippyGroup.wxs\".as_ref());\n-            }\n             if miri_installer.is_some() {\n                 candle(\"MiriGroup.wxs\".as_ref());\n             }\n@@ -2138,14 +2119,12 @@ impl Step for Extended {\n                 .arg(\"CargoGroup.wixobj\")\n                 .arg(\"StdGroup.wixobj\")\n                 .arg(\"AnalysisGroup.wixobj\")\n+                .arg(\"ClippyGroup.wixobj\")\n                 .current_dir(&exe);\n \n             if rls_installer.is_some() {\n                 cmd.arg(\"RlsGroup.wixobj\");\n             }\n-            if clippy_installer.is_some() {\n-                cmd.arg(\"ClippyGroup.wixobj\");\n-            }\n             if miri_installer.is_some() {\n                 cmd.arg(\"MiriGroup.wixobj\");\n             }"}, {"sha": "fafd3cdf927c08224ad0676e581da510b770d4e3", "filename": "src/bootstrap/install.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a1824505d8ddada2598356eaeace3ae17ee5ec30/src%2Fbootstrap%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1824505d8ddada2598356eaeace3ae17ee5ec30/src%2Fbootstrap%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Finstall.rs?ref=a1824505d8ddada2598356eaeace3ae17ee5ec30", "patch": "@@ -214,10 +214,8 @@ install!((self, builder, _config),\n         }\n     };\n     Clippy, \"clippy\", Self::should_build(_config), only_hosts: true, {\n-        if builder.ensure(dist::Clippy {\n-            compiler: self.compiler,\n-            target: self.target,\n-        }).is_some() || Self::should_install(builder) {\n+        builder.ensure(dist::Clippy { compiler: self.compiler, target: self.target });\n+        if Self::should_install(builder) {\n             install_clippy(builder, self.compiler.stage, self.target);\n         } else {\n             builder.info("}, {"sha": "90b8b5eea947fe70e32910b63eca7cbeac860f18", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1824505d8ddada2598356eaeace3ae17ee5ec30/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1824505d8ddada2598356eaeace3ae17ee5ec30/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=a1824505d8ddada2598356eaeace3ae17ee5ec30", "patch": "@@ -548,9 +548,7 @@ impl Step for Clippy {\n \n             builder.add_rustc_lib_path(compiler, &mut cargo);\n \n-            if try_run(builder, &mut cargo.into()) {\n-                builder.save_toolstate(\"clippy-driver\", ToolState::TestPass);\n-            }\n+            try_run(builder, &mut cargo.into());\n         } else {\n             eprintln!(\"failed to test clippy: could not build\");\n         }"}, {"sha": "8ebad95ea176263384ccb970bb2101de09621bf0", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a1824505d8ddada2598356eaeace3ae17ee5ec30/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1824505d8ddada2598356eaeace3ae17ee5ec30/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=a1824505d8ddada2598356eaeace3ae17ee5ec30", "patch": "@@ -652,14 +652,12 @@ tool_extended!((self, builder),\n     Miri, miri, \"src/tools/miri\", \"miri\", {};\n     CargoMiri, miri, \"src/tools/miri\", \"cargo-miri\", {};\n     Rls, rls, \"src/tools/rls\", \"rls\", {\n-        let clippy = builder.ensure(Clippy {\n+        builder.ensure(Clippy {\n             compiler: self.compiler,\n             target: self.target,\n             extra_features: Vec::new(),\n         });\n-        if clippy.is_some() {\n-            self.extra_features.push(\"clippy\".to_owned());\n-        }\n+        self.extra_features.push(\"clippy\".to_owned());\n     };\n     Rustfmt, rustfmt, \"src/tools/rustfmt\", \"rustfmt\", {};\n );"}]}