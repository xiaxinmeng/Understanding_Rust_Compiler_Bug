{"sha": "0db26d612d9416c42759d2142f51c166993aab91", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkYjI2ZDYxMmQ5NDE2YzQyNzU5ZDIxNDJmNTFjMTY2OTkzYWFiOTE=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-04-27T13:26:14Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-04-27T13:26:14Z"}, "message": "Don't put empty implementations into details/summary blocks", "tree": {"sha": "97ceb95dc32929cd45a7217217071e5f153448a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97ceb95dc32929cd45a7217217071e5f153448a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0db26d612d9416c42759d2142f51c166993aab91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0db26d612d9416c42759d2142f51c166993aab91", "html_url": "https://github.com/rust-lang/rust/commit/0db26d612d9416c42759d2142f51c166993aab91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0db26d612d9416c42759d2142f51c166993aab91/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1886935b78e62a6c23a243e48f81815ae7fd141", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1886935b78e62a6c23a243e48f81815ae7fd141", "html_url": "https://github.com/rust-lang/rust/commit/e1886935b78e62a6c23a243e48f81815ae7fd141"}], "stats": {"total": 209, "additions": 112, "deletions": 97}, "files": [{"sha": "45412f55c1572df8383c9180031064eaf0e7aa40", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0db26d612d9416c42759d2142f51c166993aab91/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0db26d612d9416c42759d2142f51c166993aab91/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=0db26d612d9416c42759d2142f51c166993aab91", "patch": "@@ -82,6 +82,10 @@ impl Buffer {\n         self.buffer.push_str(s);\n     }\n \n+    crate fn push_buffer(&mut self, other: Buffer) {\n+        self.buffer.push_str(&other.buffer);\n+    }\n+\n     // Intended for consumption by write! and writeln! (std::fmt) but without\n     // the fmt::Result return type imposed by fmt::Write (and avoiding the trait\n     // import)."}, {"sha": "288b41d6ea363aa71abc57275320d99a52a525ee", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 108, "deletions": 97, "changes": 205, "blob_url": "https://github.com/rust-lang/rust/blob/0db26d612d9416c42759d2142f51c166993aab91/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0db26d612d9416c42759d2142f51c166993aab91/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=0db26d612d9416c42759d2142f51c166993aab91", "patch": "@@ -1286,99 +1286,6 @@ fn render_impl(\n     let trait_ = i.trait_did_full(cache).map(|did| &traits[&did]);\n     let mut close_tags = String::new();\n \n-    if render_mode == RenderMode::Normal {\n-        let id = cx.derive_id(match i.inner_impl().trait_ {\n-            Some(ref t) => {\n-                if is_on_foreign_type {\n-                    get_id_for_impl_on_foreign_type(&i.inner_impl().for_, t, cx)\n-                } else {\n-                    format!(\"impl-{}\", small_url_encode(format!(\"{:#}\", t.print(cx))))\n-                }\n-            }\n-            None => \"impl\".to_string(),\n-        });\n-        let aliases = if aliases.is_empty() {\n-            String::new()\n-        } else {\n-            format!(\" aliases=\\\"{}\\\"\", aliases.join(\",\"))\n-        };\n-        if let Some(use_absolute) = use_absolute {\n-            write!(\n-                w,\n-                \"<details class=\\\"rustdoc-toggle implementors-toggle\\\" open>\\\n-                     <summary>\\\n-                         <h3 id=\\\"{}\\\" class=\\\"impl\\\"{}>\\\n-                             <code class=\\\"in-band\\\">\",\n-                id, aliases\n-            );\n-            close_tags.insert_str(0, \"</details>\");\n-            write!(w, \"{}\", i.inner_impl().print(use_absolute, cx));\n-            if show_def_docs {\n-                for it in &i.inner_impl().items {\n-                    if let clean::TypedefItem(ref tydef, _) = *it.kind {\n-                        w.write_str(\"<span class=\\\"where fmt-newline\\\">  \");\n-                        assoc_type(\n-                            w,\n-                            it,\n-                            &[],\n-                            Some(&tydef.type_),\n-                            AssocItemLink::Anchor(None),\n-                            \"\",\n-                            cx,\n-                        );\n-                        w.write_str(\";</span>\");\n-                    }\n-                }\n-            }\n-            w.write_str(\"</code>\");\n-        } else {\n-            write!(\n-                w,\n-                \"<details class=\\\"rustdoc-toggle implementors-toggle\\\" open>\\\n-                     <summary>\\\n-                         <h3 id=\\\"{}\\\" class=\\\"impl\\\"{}>\\\n-                             <code class=\\\"in-band\\\">{}</code>\",\n-                id,\n-                aliases,\n-                i.inner_impl().print(false, cx)\n-            );\n-            close_tags.insert_str(0, \"</details>\");\n-        }\n-        write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\"></a>\", id);\n-        render_stability_since_raw(\n-            w,\n-            i.impl_item.stable_since(tcx).as_deref(),\n-            i.impl_item.const_stable_since(tcx).as_deref(),\n-            outer_version,\n-            outer_const_version,\n-        );\n-        write_srclink(cx, &i.impl_item, w);\n-        w.write_str(\"</h3></summary>\");\n-\n-        if trait_.is_some() {\n-            if let Some(portability) = portability(&i.impl_item, Some(parent)) {\n-                write!(w, \"<div class=\\\"item-info\\\">{}</div>\", portability);\n-            }\n-        }\n-\n-        if let Some(ref dox) = cx.shared.maybe_collapsed_doc_value(&i.impl_item) {\n-            let mut ids = cx.id_map.borrow_mut();\n-            write!(\n-                w,\n-                \"<div class=\\\"docblock\\\">{}</div>\",\n-                Markdown(\n-                    &*dox,\n-                    &i.impl_item.links(cx),\n-                    &mut ids,\n-                    cx.shared.codes,\n-                    cx.shared.edition(),\n-                    &cx.shared.playground\n-                )\n-                .into_string()\n-            );\n-        }\n-    }\n-\n     fn doc_impl_item(\n         w: &mut Buffer,\n         cx: &Context<'_>,\n@@ -1554,11 +1461,10 @@ fn render_impl(\n         }\n     }\n \n-    w.write_str(\"<div class=\\\"impl-items\\\">\");\n-    close_tags.insert_str(0, \"</div>\");\n+    let mut impl_items = Buffer::empty_from(w);\n     for trait_item in &i.inner_impl().items {\n         doc_impl_item(\n-            w,\n+            &mut impl_items,\n             cx,\n             trait_item,\n             if trait_.is_some() { &i.impl_item } else { parent },\n@@ -1614,7 +1520,7 @@ fn render_impl(\n     if show_default_items {\n         if let Some(t) = trait_ {\n             render_default_items(\n-                w,\n+                &mut impl_items,\n                 cx,\n                 &t.trait_,\n                 &i.inner_impl(),\n@@ -1626,6 +1532,111 @@ fn render_impl(\n             );\n         }\n     }\n+    let details_str = if impl_items.is_empty() {\n+        \"\"\n+    } else {\n+        \"<details class=\\\"rustdoc-toggle implementors-toggle\\\" open><summary>\"\n+    };\n+    if render_mode == RenderMode::Normal {\n+        let id = cx.derive_id(match i.inner_impl().trait_ {\n+            Some(ref t) => {\n+                if is_on_foreign_type {\n+                    get_id_for_impl_on_foreign_type(&i.inner_impl().for_, t, cx)\n+                } else {\n+                    format!(\"impl-{}\", small_url_encode(format!(\"{:#}\", t.print(cx))))\n+                }\n+            }\n+            None => \"impl\".to_string(),\n+        });\n+        let aliases = if aliases.is_empty() {\n+            String::new()\n+        } else {\n+            format!(\" aliases=\\\"{}\\\"\", aliases.join(\",\"))\n+        };\n+        if let Some(use_absolute) = use_absolute {\n+            write!(\n+                w,\n+                \"{}<h3 id=\\\"{}\\\" class=\\\"impl\\\"{}><code class=\\\"in-band\\\">\",\n+                details_str, id, aliases\n+            );\n+            if !impl_items.is_empty() {\n+                close_tags.insert_str(0, \"</details>\");\n+            }\n+            write!(w, \"{}\", i.inner_impl().print(use_absolute, cx));\n+            if show_def_docs {\n+                for it in &i.inner_impl().items {\n+                    if let clean::TypedefItem(ref tydef, _) = *it.kind {\n+                        w.write_str(\"<span class=\\\"where fmt-newline\\\">  \");\n+                        assoc_type(\n+                            w,\n+                            it,\n+                            &[],\n+                            Some(&tydef.type_),\n+                            AssocItemLink::Anchor(None),\n+                            \"\",\n+                            cx,\n+                        );\n+                        w.write_str(\";</span>\");\n+                    }\n+                }\n+            }\n+            w.write_str(\"</code>\");\n+        } else {\n+            write!(\n+                w,\n+                \"{}<h3 id=\\\"{}\\\" class=\\\"impl\\\"{}><code class=\\\"in-band\\\">{}</code>\",\n+                details_str,\n+                id,\n+                aliases,\n+                i.inner_impl().print(false, cx)\n+            );\n+            if !impl_items.is_empty() {\n+                close_tags.insert_str(0, \"</details>\");\n+            }\n+        }\n+        write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\"></a>\", id);\n+        render_stability_since_raw(\n+            w,\n+            i.impl_item.stable_since(tcx).as_deref(),\n+            i.impl_item.const_stable_since(tcx).as_deref(),\n+            outer_version,\n+            outer_const_version,\n+        );\n+        write_srclink(cx, &i.impl_item, w);\n+        if impl_items.is_empty() {\n+            w.write_str(\"</h3>\");\n+        } else {\n+            w.write_str(\"</h3></summary>\");\n+        }\n+\n+        if trait_.is_some() {\n+            if let Some(portability) = portability(&i.impl_item, Some(parent)) {\n+                write!(w, \"<div class=\\\"item-info\\\">{}</div>\", portability);\n+            }\n+        }\n+\n+        if let Some(ref dox) = cx.shared.maybe_collapsed_doc_value(&i.impl_item) {\n+            let mut ids = cx.id_map.borrow_mut();\n+            write!(\n+                w,\n+                \"<div class=\\\"docblock\\\">{}</div>\",\n+                Markdown(\n+                    &*dox,\n+                    &i.impl_item.links(cx),\n+                    &mut ids,\n+                    cx.shared.codes,\n+                    cx.shared.edition(),\n+                    &cx.shared.playground\n+                )\n+                .into_string()\n+            );\n+        }\n+    }\n+    if !impl_items.is_empty() {\n+        w.write_str(\"<div class=\\\"impl-items\\\">\");\n+        w.push_buffer(impl_items);\n+        close_tags.insert_str(0, \"</div>\");\n+    }\n     w.write_str(&close_tags);\n }\n "}]}