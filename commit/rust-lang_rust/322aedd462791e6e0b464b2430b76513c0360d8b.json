{"sha": "322aedd462791e6e0b464b2430b76513c0360d8b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyMmFlZGQ0NjI3OTFlNmUwYjQ2NGIyNDMwYjc2NTEzYzAzNjBkOGI=", "commit": {"author": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2014-10-15T07:20:39Z"}, "committer": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2014-10-16T15:15:35Z"}, "message": "librustdoc: Remove all uses of {:?}.", "tree": {"sha": "3892eb7524afe325e98e35176d6a9cbdf160ee92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3892eb7524afe325e98e35176d6a9cbdf160ee92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/322aedd462791e6e0b464b2430b76513c0360d8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/322aedd462791e6e0b464b2430b76513c0360d8b", "html_url": "https://github.com/rust-lang/rust/commit/322aedd462791e6e0b464b2430b76513c0360d8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/322aedd462791e6e0b464b2430b76513c0360d8b/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5a8bad1ffaeee78aaa3cff6ddd3e8c93ca9b989", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5a8bad1ffaeee78aaa3cff6ddd3e8c93ca9b989", "html_url": "https://github.com/rust-lang/rust/commit/c5a8bad1ffaeee78aaa3cff6ddd3e8c93ca9b989"}], "stats": {"total": 29, "additions": 15, "deletions": 14}, "files": [{"sha": "102ba5820fe2fd01279b1146d6a9d92bab9b3d66", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/322aedd462791e6e0b464b2430b76513c0360d8b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/322aedd462791e6e0b464b2430b76513c0360d8b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=322aedd462791e6e0b464b2430b76513c0360d8b", "patch": "@@ -1251,7 +1251,7 @@ impl Clean<Type> for ast::Ty {\n             TyBareFn(ref barefn) => BareFunction(box barefn.clean(cx)),\n             TyParen(ref ty) => ty.clean(cx),\n             TyBot => Bottom,\n-            ref x => fail!(\"Unimplemented type {:?}\", x),\n+            ref x => fail!(\"Unimplemented type {}\", x),\n         }\n     }\n }\n@@ -1575,7 +1575,7 @@ impl Clean<VariantKind> for ast::VariantKind {\n     }\n }\n \n-#[deriving(Clone, Encodable, Decodable)]\n+#[deriving(Clone, Encodable, Decodable, Show)]\n pub struct Span {\n     pub filename: String,\n     pub loline: uint,\n@@ -1714,7 +1714,7 @@ impl Clean<BareFunctionDecl> for ast::BareFnTy {\n     }\n }\n \n-#[deriving(Clone, Encodable, Decodable)]\n+#[deriving(Clone, Encodable, Decodable, Show)]\n pub struct Static {\n     pub type_: Type,\n     pub mutability: Mutability,\n@@ -1726,7 +1726,7 @@ pub struct Static {\n \n impl Clean<Item> for doctree::Static {\n     fn clean(&self, cx: &DocContext) -> Item {\n-        debug!(\"claning static {}: {:?}\", self.name.clean(cx), self);\n+        debug!(\"claning static {}: {}\", self.name.clean(cx), self);\n         Item {\n             name: Some(self.name.clean(cx)),\n             attrs: self.attrs.clean(cx),\n@@ -2004,7 +2004,7 @@ trait ToSource {\n \n impl ToSource for syntax::codemap::Span {\n     fn to_src(&self, cx: &DocContext) -> String {\n-        debug!(\"converting span {:?} to snippet\", self.clean(cx));\n+        debug!(\"converting span {} to snippet\", self.clean(cx));\n         let sn = match cx.sess().codemap().span_to_snippet(*self) {\n             Some(x) => x.to_string(),\n             None    => \"\".to_string()\n@@ -2017,7 +2017,7 @@ impl ToSource for syntax::codemap::Span {\n fn lit_to_string(lit: &ast::Lit) -> String {\n     match lit.node {\n         ast::LitStr(ref st, _) => st.get().to_string(),\n-        ast::LitBinary(ref data) => format!(\"{:?}\", data.as_slice()),\n+        ast::LitBinary(ref data) => format!(\"{}\", data),\n         ast::LitByte(b) => {\n             let mut res = String::from_str(\"b'\");\n             (b as char).escape_default(|c| {\n@@ -2037,7 +2037,7 @@ fn lit_to_string(lit: &ast::Lit) -> String {\n \n fn name_from_pat(p: &ast::Pat) -> String {\n     use syntax::ast::*;\n-    debug!(\"Trying to get a name from pattern: {:?}\", p);\n+    debug!(\"Trying to get a name from pattern: {}\", p);\n \n     match p.node {\n         PatWild(PatWildSingle) => \"_\".to_string(),\n@@ -2082,7 +2082,7 @@ fn resolve_type(cx: &DocContext, path: Path,\n         // If we're extracting tests, this return value doesn't matter.\n         None => return Primitive(Bool),\n     };\n-    debug!(\"searching for {:?} in defmap\", id);\n+    debug!(\"searching for {} in defmap\", id);\n     let def = match tcx.def_map.borrow().find(&id) {\n         Some(&k) => k,\n         None => fail!(\"unresolved id not in defmap\")"}, {"sha": "c5c9aae89e476558fe9f56a2a8233eaeaf40fce6", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/322aedd462791e6e0b464b2430b76513c0360d8b/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/322aedd462791e6e0b464b2430b76513c0360d8b/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=322aedd462791e6e0b464b2430b76513c0360d8b", "patch": "@@ -135,7 +135,7 @@ pub fn run_core(libs: Vec<Path>, cfgs: Vec<String>, externs: Externs,\n         inlined: RefCell::new(Some(HashSet::new())),\n         populated_crate_impls: RefCell::new(HashSet::new()),\n     };\n-    debug!(\"crate: {:?}\", ctxt.krate);\n+    debug!(\"crate: {}\", ctxt.krate);\n \n     let analysis = CrateAnalysis {\n         exported_items: exported_items,"}, {"sha": "7509f96f9167507923d45ee68d8ae5ae9d3cae62", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/322aedd462791e6e0b464b2430b76513c0360d8b/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/322aedd462791e6e0b464b2430b76513c0360d8b/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=322aedd462791e6e0b464b2430b76513c0360d8b", "patch": "@@ -141,6 +141,7 @@ pub struct Typedef {\n     pub stab: Option<attr::Stability>,\n }\n \n+#[deriving(Show)]\n pub struct Static {\n     pub type_: P<ast::Ty>,\n     pub mutability: ast::Mutability,"}, {"sha": "b4bf1668d941fb6b0dd9f4fc5888750f0b65d54e", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/322aedd462791e6e0b464b2430b76513c0360d8b/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/322aedd462791e6e0b464b2430b76513c0360d8b/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=322aedd462791e6e0b464b2430b76513c0360d8b", "patch": "@@ -1042,7 +1042,7 @@ impl Context {\n     /// sure it always points to the top (relatively)\n     fn recurse<T>(&mut self, s: String, f: |&mut Context| -> T) -> T {\n         if s.len() == 0 {\n-            fail!(\"what {:?}\", self);\n+            fail!(\"Unexpected empty destination: {}\", self.current);\n         }\n         let prev = self.dst.clone();\n         self.dst.push(s.as_slice());\n@@ -1491,7 +1491,7 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n \n     indices.sort_by(|&i1, &i2| cmp(&items[i1], &items[i2], i1, i2));\n \n-    debug!(\"{:?}\", indices);\n+    debug!(\"{}\", indices);\n     let mut curty = None;\n     for &idx in indices.iter() {\n         let myitem = &items[idx];"}, {"sha": "ad79faebd45c5635d33ba3a7f4b4385ee90e203c", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/322aedd462791e6e0b464b2430b76513c0360d8b/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/322aedd462791e6e0b464b2430b76513c0360d8b/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=322aedd462791e6e0b464b2430b76513c0360d8b", "patch": "@@ -333,7 +333,7 @@ fn rust_input(cratefile: &str, externs: core::Externs, matches: &getopts::Matche\n     let (mut krate, analysis) = std::task::try(proc() {\n         let cr = cr;\n         core::run_core(libs, cfgs, externs, &cr, triple)\n-    }).map_err(|boxed_any|format!(\"{:?}\", boxed_any)).unwrap();\n+    }).map_err(|_| \"rustc failed\").unwrap();\n     info!(\"finished with rustc\");\n     analysiskey.replace(Some(analysis));\n \n@@ -480,7 +480,7 @@ fn json_output(krate: clean::Crate, res: Vec<plugins::PluginJson> ,\n     };\n     let crate_json = match json::from_str(crate_json_str.as_slice()) {\n         Ok(j) => j,\n-        Err(e) => fail!(\"Rust generated JSON is invalid: {:?}\", e)\n+        Err(e) => fail!(\"Rust generated JSON is invalid: {}\", e)\n     };\n \n     json.insert(\"crate\".to_string(), crate_json);"}, {"sha": "8e377037a9713e42db97f5aab17e0bff32456ca4", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/322aedd462791e6e0b464b2430b76513c0360d8b/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/322aedd462791e6e0b464b2430b76513c0360d8b/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=322aedd462791e6e0b464b2430b76513c0360d8b", "patch": "@@ -264,7 +264,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n \n     pub fn visit_item(&mut self, item: &ast::Item,\n                       renamed: Option<ast::Ident>, om: &mut Module) {\n-        debug!(\"Visiting item {:?}\", item);\n+        debug!(\"Visiting item {}\", item);\n         let name = renamed.unwrap_or(item.ident);\n         match item.node {\n             ast::ItemMod(ref m) => {"}]}