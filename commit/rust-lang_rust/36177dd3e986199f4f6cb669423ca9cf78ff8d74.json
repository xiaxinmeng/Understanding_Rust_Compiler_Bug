{"sha": "36177dd3e986199f4f6cb669423ca9cf78ff8d74", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2MTc3ZGQzZTk4NjE5OWY0ZjZjYjY2OTQyM2NhOWNmNzhmZjhkNzQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-12-10T16:38:40Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-12-14T22:32:20Z"}, "message": "make fact that trans'ing lvar does not modify bcx explicit in type", "tree": {"sha": "2ab840db17a3ed09d90331df4b2e18d290aeed0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ab840db17a3ed09d90331df4b2e18d290aeed0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36177dd3e986199f4f6cb669423ca9cf78ff8d74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36177dd3e986199f4f6cb669423ca9cf78ff8d74", "html_url": "https://github.com/rust-lang/rust/commit/36177dd3e986199f4f6cb669423ca9cf78ff8d74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36177dd3e986199f4f6cb669423ca9cf78ff8d74/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7fbca4e31ce51ac4b7cae155780730e1ab2dccb4", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fbca4e31ce51ac4b7cae155780730e1ab2dccb4", "html_url": "https://github.com/rust-lang/rust/commit/7fbca4e31ce51ac4b7cae155780730e1ab2dccb4"}], "stats": {"total": 31, "additions": 19, "deletions": 12}, "files": [{"sha": "b8e73b118d052a49c34909b825ca72855d9bab66", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/36177dd3e986199f4f6cb669423ca9cf78ff8d74/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36177dd3e986199f4f6cb669423ca9cf78ff8d74/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=36177dd3e986199f4f6cb669423ca9cf78ff8d74", "patch": "@@ -2188,8 +2188,10 @@ fn trans_expr_fn(bcx: @block_ctxt, f: ast::_fn, sp: span,\n     let s = mangle_internal_name_by_path(ccx, sub_cx.path);\n     let llfn = decl_internal_cdecl_fn(ccx.llmod, s, llfnty);\n \n-    let copying = f.proto == ast::proto_shared(ast::sugar_normal)\n-               || f.proto == ast::proto_shared(ast::sugar_sexy);\n+    let copying = alt f.proto {\n+      ast::proto_shared(_) | ast::proto_send. { true }\n+      ast::proto_bare. | ast::proto_block. { false }\n+    };\n     let env;\n     alt f.proto {\n       ast::proto_block. | ast::proto_shared(_) | ast::proto_send. {\n@@ -2812,6 +2814,7 @@ type generic_info =\n      tydescs: [ValueRef]};\n \n tag lval_kind { temporary; owned; owned_imm; }\n+type local_var_result = {val: ValueRef, kind: lval_kind};\n type lval_result = {bcx: @block_ctxt, val: ValueRef, kind: lval_kind};\n tag callee_env { obj_env(ValueRef); null_env; is_closure; }\n type lval_maybe_callee = {bcx: @block_ctxt,\n@@ -2824,6 +2827,10 @@ fn null_env_ptr(bcx: @block_ctxt) -> ValueRef {\n     C_null(T_opaque_closure_ptr(bcx_ccx(bcx)))\n }\n \n+fn lval_from_local_var(bcx: @block_ctxt, r: local_var_result) -> lval_result {\n+    ret { bcx: bcx, val: r.val, kind: r.kind };\n+}\n+\n fn lval_owned(bcx: @block_ctxt, val: ValueRef) -> lval_result {\n     ret {bcx: bcx, val: val, kind: owned};\n }\n@@ -2893,28 +2900,28 @@ fn lookup_discriminant(lcx: @local_ctxt, vid: ast::def_id) -> ValueRef {\n     }\n }\n \n-fn trans_local_var(cx: @block_ctxt, def: ast::def) -> lval_result {\n-    fn take_local(cx: @block_ctxt, table: hashmap<ast::node_id, local_val>,\n-                  id: ast::node_id) -> lval_result {\n+fn trans_local_var(cx: @block_ctxt, def: ast::def) -> local_var_result {\n+    fn take_local(table: hashmap<ast::node_id, local_val>,\n+                  id: ast::node_id) -> local_var_result {\n         alt table.find(id) {\n-          some(local_mem(v)) { lval_owned(cx, v) }\n-          some(local_imm(v)) { {bcx: cx, val: v, kind: owned_imm} }\n+          some(local_mem(v)) { {val: v, kind: owned} }\n+          some(local_imm(v)) { {val: v, kind: owned_imm} }\n         }\n     }\n     alt def {\n       ast::def_upvar(did, _, _) {\n         assert (cx.fcx.llupvars.contains_key(did.node));\n-        ret lval_owned(cx, cx.fcx.llupvars.get(did.node));\n+        ret { val: cx.fcx.llupvars.get(did.node), kind: owned };\n       }\n       ast::def_arg(did, _) {\n-        ret take_local(cx, cx.fcx.llargs, did.node);\n+        ret take_local(cx.fcx.llargs, did.node);\n       }\n       ast::def_local(did, _) | ast::def_binding(did) {\n-        ret take_local(cx, cx.fcx.lllocals, did.node);\n+        ret take_local(cx.fcx.lllocals, did.node);\n       }\n       ast::def_obj_field(did, _) {\n         assert (cx.fcx.llobjfields.contains_key(did.node));\n-        ret lval_owned(cx, cx.fcx.llobjfields.get(did.node));\n+        ret { val: cx.fcx.llobjfields.get(did.node), kind: owned };\n       }\n       _ {\n         bcx_ccx(cx).sess.span_unimpl\n@@ -2975,7 +2982,7 @@ fn trans_var(cx: @block_ctxt, sp: span, def: ast::def, id: ast::node_id)\n       }\n       _ {\n         let loc = trans_local_var(cx, def);\n-        ret lval_no_env(loc.bcx, loc.val, loc.kind);\n+        ret lval_no_env(cx, loc.val, loc.kind);\n       }\n     }\n }"}]}