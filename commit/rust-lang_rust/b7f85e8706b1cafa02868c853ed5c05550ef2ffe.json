{"sha": "b7f85e8706b1cafa02868c853ed5c05550ef2ffe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3Zjg1ZTg3MDZiMWNhZmEwMjg2OGM4NTNlZDVjMDU1NTBlZjJmZmU=", "commit": {"author": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-04-20T18:05:15Z"}, "committer": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-04-20T18:05:15Z"}, "message": "Apply suggestions from PR review\n\n* Move the lint to pedantic\n* Import used types instead of prefixing with `hir::`", "tree": {"sha": "a42b5de4423b377c68940d92c9b52b3a7a0d985d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a42b5de4423b377c68940d92c9b52b3a7a0d985d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7f85e8706b1cafa02868c853ed5c05550ef2ffe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7f85e8706b1cafa02868c853ed5c05550ef2ffe", "html_url": "https://github.com/rust-lang/rust/commit/b7f85e8706b1cafa02868c853ed5c05550ef2ffe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7f85e8706b1cafa02868c853ed5c05550ef2ffe/comments", "author": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00b4f2819fa4786bb54bd2c4091767f64268d528", "url": "https://api.github.com/repos/rust-lang/rust/commits/00b4f2819fa4786bb54bd2c4091767f64268d528", "html_url": "https://github.com/rust-lang/rust/commit/00b4f2819fa4786bb54bd2c4091767f64268d528"}], "stats": {"total": 49, "additions": 18, "deletions": 31}, "files": [{"sha": "16300db0974b3a244974711859ccf2c4241ed04b", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 16, "deletions": 28, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/b7f85e8706b1cafa02868c853ed5c05550ef2ffe/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f85e8706b1cafa02868c853ed5c05550ef2ffe/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=b7f85e8706b1cafa02868c853ed5c05550ef2ffe", "patch": "@@ -3,9 +3,11 @@ use crate::utils::{\n     is_automatically_derived, is_copy, match_path, span_lint_and_help, span_lint_and_note, span_lint_and_then,\n };\n use if_chain::if_chain;\n-use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{walk_expr, walk_fn, walk_item, FnKind, NestedVisitorMap, Visitor};\n+use rustc_hir::{\n+    BlockCheckMode, BodyId, Expr, ExprKind, FnDecl, HirId, Item, ItemKind, TraitRef, UnsafeSource, Unsafety,\n+};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::map::Map;\n use rustc_middle::ty::{self, Ty};\n@@ -97,15 +99,15 @@ declare_clippy_lint! {\n     /// }\n     /// ```\n     pub UNSAFE_DERIVE_DESERIALIZE,\n-    correctness,\n+    pedantic,\n     \"deriving `serde::Deserialize` on a type that has methods using `unsafe`\"\n }\n \n declare_lint_pass!(Derive => [EXPL_IMPL_CLONE_ON_COPY, DERIVE_HASH_XOR_EQ, UNSAFE_DERIVE_DESERIALIZE]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Derive {\n-    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::Item<'_>) {\n-        if let hir::ItemKind::Impl {\n+    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item<'_>) {\n+        if let ItemKind::Impl {\n             of_trait: Some(ref trait_ref),\n             ..\n         } = item.kind\n@@ -128,7 +130,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Derive {\n fn check_hash_peq<'a, 'tcx>(\n     cx: &LateContext<'a, 'tcx>,\n     span: Span,\n-    trait_ref: &hir::TraitRef<'_>,\n+    trait_ref: &TraitRef<'_>,\n     ty: Ty<'tcx>,\n     hash_is_automatically_derived: bool,\n ) {\n@@ -175,12 +177,7 @@ fn check_hash_peq<'a, 'tcx>(\n }\n \n /// Implementation of the `EXPL_IMPL_CLONE_ON_COPY` lint.\n-fn check_copy_clone<'a, 'tcx>(\n-    cx: &LateContext<'a, 'tcx>,\n-    item: &hir::Item<'_>,\n-    trait_ref: &hir::TraitRef<'_>,\n-    ty: Ty<'tcx>,\n-) {\n+fn check_copy_clone<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, item: &Item<'_>, trait_ref: &TraitRef<'_>, ty: Ty<'tcx>) {\n     if match_path(&trait_ref.path, &paths::CLONE_TRAIT) {\n         if !is_copy(cx, ty) {\n             return;\n@@ -223,16 +220,16 @@ fn check_copy_clone<'a, 'tcx>(\n /// Implementation of the `UNSAFE_DERIVE_DESERIALIZE` lint.\n fn check_unsafe_derive_deserialize<'a, 'tcx>(\n     cx: &LateContext<'a, 'tcx>,\n-    item: &hir::Item<'_>,\n-    trait_ref: &hir::TraitRef<'_>,\n+    item: &Item<'_>,\n+    trait_ref: &TraitRef<'_>,\n     ty: Ty<'tcx>,\n ) {\n-    fn item_from_def_id<'tcx>(cx: &LateContext<'_, 'tcx>, def_id: DefId) -> &'tcx hir::Item<'tcx> {\n+    fn item_from_def_id<'tcx>(cx: &LateContext<'_, 'tcx>, def_id: DefId) -> &'tcx Item<'tcx> {\n         let hir_id = cx.tcx.hir().as_local_hir_id(def_id).unwrap();\n         cx.tcx.hir().expect_item(hir_id)\n     }\n \n-    fn has_unsafe<'tcx>(cx: &LateContext<'_, 'tcx>, item: &'tcx hir::Item<'_>) -> bool {\n+    fn has_unsafe<'tcx>(cx: &LateContext<'_, 'tcx>, item: &'tcx Item<'_>) -> bool {\n         let mut visitor = UnsafeVisitor { cx, has_unsafe: false };\n         walk_item(&mut visitor, item);\n         visitor.has_unsafe\n@@ -267,21 +264,14 @@ struct UnsafeVisitor<'a, 'tcx> {\n impl<'tcx> Visitor<'tcx> for UnsafeVisitor<'_, 'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn visit_fn(\n-        &mut self,\n-        kind: FnKind<'tcx>,\n-        decl: &'tcx hir::FnDecl<'_>,\n-        body_id: hir::BodyId,\n-        span: Span,\n-        id: hir::HirId,\n-    ) {\n+    fn visit_fn(&mut self, kind: FnKind<'tcx>, decl: &'tcx FnDecl<'_>, body_id: BodyId, span: Span, id: HirId) {\n         if self.has_unsafe {\n             return;\n         }\n \n         if_chain! {\n             if let Some(header) = kind.header();\n-            if let hir::Unsafety::Unsafe = header.unsafety;\n+            if let Unsafety::Unsafe = header.unsafety;\n             then {\n                 self.has_unsafe = true;\n             }\n@@ -290,14 +280,12 @@ impl<'tcx> Visitor<'tcx> for UnsafeVisitor<'_, 'tcx> {\n         walk_fn(self, kind, decl, body_id, span, id);\n     }\n \n-    fn visit_expr(&mut self, expr: &'tcx hir::Expr<'_>) {\n+    fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n         if self.has_unsafe {\n             return;\n         }\n \n-        if let hir::ExprKind::Block(block, _) = expr.kind {\n-            use hir::{BlockCheckMode, UnsafeSource};\n-\n+        if let ExprKind::Block(block, _) = expr.kind {\n             match block.rules {\n                 BlockCheckMode::UnsafeBlock(UnsafeSource::UserProvided)\n                 | BlockCheckMode::PushUnsafeBlock(UnsafeSource::UserProvided)"}, {"sha": "c04e0884b196a94a56125d4ca23abb1411932eaf", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b7f85e8706b1cafa02868c853ed5c05550ef2ffe/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f85e8706b1cafa02868c853ed5c05550ef2ffe/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=b7f85e8706b1cafa02868c853ed5c05550ef2ffe", "patch": "@@ -1106,6 +1106,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&default_trait_access::DEFAULT_TRAIT_ACCESS),\n         LintId::of(&dereference::EXPLICIT_DEREF_METHODS),\n         LintId::of(&derive::EXPL_IMPL_CLONE_ON_COPY),\n+        LintId::of(&derive::UNSAFE_DERIVE_DESERIALIZE),\n         LintId::of(&doc::DOC_MARKDOWN),\n         LintId::of(&doc::MISSING_ERRORS_DOC),\n         LintId::of(&empty_enum::EMPTY_ENUM),\n@@ -1197,7 +1198,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&copies::IFS_SAME_COND),\n         LintId::of(&copies::IF_SAME_THEN_ELSE),\n         LintId::of(&derive::DERIVE_HASH_XOR_EQ),\n-        LintId::of(&derive::UNSAFE_DERIVE_DESERIALIZE),\n         LintId::of(&doc::MISSING_SAFETY_DOC),\n         LintId::of(&doc::NEEDLESS_DOCTEST_MAIN),\n         LintId::of(&double_comparison::DOUBLE_COMPARISONS),\n@@ -1610,7 +1610,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&copies::IFS_SAME_COND),\n         LintId::of(&copies::IF_SAME_THEN_ELSE),\n         LintId::of(&derive::DERIVE_HASH_XOR_EQ),\n-        LintId::of(&derive::UNSAFE_DERIVE_DESERIALIZE),\n         LintId::of(&drop_bounds::DROP_BOUNDS),\n         LintId::of(&drop_forget_ref::DROP_COPY),\n         LintId::of(&drop_forget_ref::DROP_REF),"}, {"sha": "9b3f0d7182bfb0963533461e73ece0c66ec48794", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7f85e8706b1cafa02868c853ed5c05550ef2ffe/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f85e8706b1cafa02868c853ed5c05550ef2ffe/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=b7f85e8706b1cafa02868c853ed5c05550ef2ffe", "patch": "@@ -2336,7 +2336,7 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n     },\n     Lint {\n         name: \"unsafe_derive_deserialize\",\n-        group: \"correctness\",\n+        group: \"pedantic\",\n         desc: \"deriving `serde::Deserialize` on a type that has methods using `unsafe`\",\n         deprecation: None,\n         module: \"derive\","}]}