{"sha": "4bb39966a670864de0078cafc1e5b623ca1b2ec3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiYjM5OTY2YTY3MDg2NGRlMDA3OGNhZmMxZTViNjIzY2ExYjJlYzM=", "commit": {"author": {"name": "F001", "email": "changchun.fan@qq.com", "date": "2018-05-18T16:17:13Z"}, "committer": {"name": "F001", "email": "changchun.fan@qq.com", "date": "2018-05-20T02:16:33Z"}, "message": "re-implement", "tree": {"sha": "cba862b02742a47ae094a4d4f68bf3ebe9c53d06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cba862b02742a47ae094a4d4f68bf3ebe9c53d06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4bb39966a670864de0078cafc1e5b623ca1b2ec3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4bb39966a670864de0078cafc1e5b623ca1b2ec3", "html_url": "https://github.com/rust-lang/rust/commit/4bb39966a670864de0078cafc1e5b623ca1b2ec3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4bb39966a670864de0078cafc1e5b623ca1b2ec3/comments", "author": {"login": "F001", "id": 3314340, "node_id": "MDQ6VXNlcjMzMTQzNDA=", "avatar_url": "https://avatars.githubusercontent.com/u/3314340?v=4", "gravatar_id": "", "url": "https://api.github.com/users/F001", "html_url": "https://github.com/F001", "followers_url": "https://api.github.com/users/F001/followers", "following_url": "https://api.github.com/users/F001/following{/other_user}", "gists_url": "https://api.github.com/users/F001/gists{/gist_id}", "starred_url": "https://api.github.com/users/F001/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/F001/subscriptions", "organizations_url": "https://api.github.com/users/F001/orgs", "repos_url": "https://api.github.com/users/F001/repos", "events_url": "https://api.github.com/users/F001/events{/privacy}", "received_events_url": "https://api.github.com/users/F001/received_events", "type": "User", "site_admin": false}, "committer": {"login": "F001", "id": 3314340, "node_id": "MDQ6VXNlcjMzMTQzNDA=", "avatar_url": "https://avatars.githubusercontent.com/u/3314340?v=4", "gravatar_id": "", "url": "https://api.github.com/users/F001", "html_url": "https://github.com/F001", "followers_url": "https://api.github.com/users/F001/followers", "following_url": "https://api.github.com/users/F001/following{/other_user}", "gists_url": "https://api.github.com/users/F001/gists{/gist_id}", "starred_url": "https://api.github.com/users/F001/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/F001/subscriptions", "organizations_url": "https://api.github.com/users/F001/orgs", "repos_url": "https://api.github.com/users/F001/repos", "events_url": "https://api.github.com/users/F001/events{/privacy}", "received_events_url": "https://api.github.com/users/F001/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ea24915894d49cb93eab52e65f1e4f0baa1bc32", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ea24915894d49cb93eab52e65f1e4f0baa1bc32", "html_url": "https://github.com/rust-lang/rust/commit/3ea24915894d49cb93eab52e65f1e4f0baa1bc32"}], "stats": {"total": 65, "additions": 61, "deletions": 4}, "files": [{"sha": "1cb00abbb7e392a53ef70dabe826c40d508b35c2", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4bb39966a670864de0078cafc1e5b623ca1b2ec3/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb39966a670864de0078cafc1e5b623ca1b2ec3/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=4bb39966a670864de0078cafc1e5b623ca1b2ec3", "patch": "@@ -279,6 +279,12 @@ declare_lint! {\n     \"detects labels that are never used\"\n }\n \n+declare_lint! {\n+    pub DUPLICATE_ASSOCIATED_TYPE_BINDING,\n+    Warn,\n+    \"warns about duplicate associated type bindings in generics\"\n+}\n+\n /// Does nothing as a lint pass, but registers some `Lint`s\n /// which are used by other parts of the compiler.\n #[derive(Copy, Clone)]\n@@ -330,6 +336,7 @@ impl LintPass for HardwiredLints {\n             BARE_TRAIT_OBJECT,\n             ABSOLUTE_PATH_NOT_STARTING_WITH_CRATE,\n             UNSTABLE_NAME_COLLISION,\n+            DUPLICATE_ASSOCIATED_TYPE_BINDING,\n         )\n     }\n }"}, {"sha": "091ed0a4b367f3c9b6aa8d79b22b46185d49ce4d", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4bb39966a670864de0078cafc1e5b623ca1b2ec3/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb39966a670864de0078cafc1e5b623ca1b2ec3/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=4bb39966a670864de0078cafc1e5b623ca1b2ec3", "patch": "@@ -27,7 +27,7 @@ use rustc_target::spec::abi;\n use std::slice;\n use require_c_abi_if_variadic;\n use util::common::ErrorReported;\n-use util::nodemap::FxHashSet;\n+use util::nodemap::{FxHashSet, FxHashMap};\n use errors::FatalError;\n \n use std::iter;\n@@ -398,13 +398,24 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                                                  trait_ref.path.segments.last().unwrap());\n         let poly_trait_ref = ty::Binder::bind(ty::TraitRef::new(trait_def_id, substs));\n \n+        let mut dup_bindings = FxHashMap::default();\n         poly_projections.extend(assoc_bindings.iter().filter_map(|binding| {\n             // specify type to assert that error was already reported in Err case:\n             let predicate: Result<_, ErrorReported> =\n-                self.ast_type_binding_to_poly_projection_predicate(trait_ref.ref_id, poly_trait_ref,\n-                                                                   binding, speculative);\n+                self.ast_type_binding_to_poly_projection_predicate(\n+                    trait_ref.ref_id, poly_trait_ref, binding, speculative, &mut dup_bindings);\n             predicate.ok() // ok to ignore Err() because ErrorReported (see above)\n         }));\n+        for (_id, spans) in dup_bindings {\n+            if spans.len() > 1 {\n+                self.tcx().struct_span_lint_node(\n+                        ::rustc::lint::builtin::DUPLICATE_ASSOCIATED_TYPE_BINDING,\n+                        trait_ref.ref_id,\n+                        spans,\n+                        \"duplicate associated type binding\"\n+                    ).emit();\n+            }\n+        }\n \n         debug!(\"ast_path_to_poly_trait_ref({:?}, projections={:?}) -> {:?}\",\n                trait_ref, poly_projections, poly_trait_ref);\n@@ -487,7 +498,8 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         ref_id: ast::NodeId,\n         trait_ref: ty::PolyTraitRef<'tcx>,\n         binding: &ConvertedBinding<'tcx>,\n-        speculative: bool)\n+        speculative: bool,\n+        dup_bindings: &mut FxHashMap<DefId, Vec<Span>>)\n         -> Result<ty::PolyProjectionPredicate<'tcx>, ErrorReported>\n     {\n         let tcx = self.tcx();\n@@ -565,6 +577,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n             tcx.sess.span_err(binding.span, &msg);\n         }\n         tcx.check_stability(assoc_ty.def_id, Some(ref_id), binding.span);\n+        dup_bindings.entry(assoc_ty.def_id).or_insert(Vec::new()).push(binding.span);\n \n         Ok(candidate.map_bound(|trait_ref| {\n             ty::ProjectionPredicate {"}, {"sha": "2c789a139cd3a6cf95007291be743daed79c9944", "filename": "src/test/ui/lint/issue-50589-multiple-associated-types.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4bb39966a670864de0078cafc1e5b623ca1b2ec3/src%2Ftest%2Fui%2Flint%2Fissue-50589-multiple-associated-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb39966a670864de0078cafc1e5b623ca1b2ec3/src%2Ftest%2Fui%2Flint%2Fissue-50589-multiple-associated-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-50589-multiple-associated-types.rs?ref=4bb39966a670864de0078cafc1e5b623ca1b2ec3", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-pass\n+\n+use std::iter::Iterator;\n+\n+type Unit = ();\n+\n+fn test() ->  Box<Iterator<Item = (), Item = Unit>> {\n+    Box::new(None.into_iter())\n+}\n+\n+fn main() {\n+    test();\n+}"}, {"sha": "05e02879f1f50dcfd2baf4d96ca41302e21903a9", "filename": "src/test/ui/lint/issue-50589-multiple-associated-types.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4bb39966a670864de0078cafc1e5b623ca1b2ec3/src%2Ftest%2Fui%2Flint%2Fissue-50589-multiple-associated-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4bb39966a670864de0078cafc1e5b623ca1b2ec3/src%2Ftest%2Fui%2Flint%2Fissue-50589-multiple-associated-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-50589-multiple-associated-types.stderr?ref=4bb39966a670864de0078cafc1e5b623ca1b2ec3", "patch": "@@ -0,0 +1,14 @@\n+warning: duplicate associated type binding\n+  --> $DIR/issue-50589-multiple-associated-types.rs:17:28\n+   |\n+LL | fn test() ->  Box<Iterator<Item = (), Item = Unit>> {\n+   |                            ^^^^^^^^^  ^^^^^^^^^^^\n+   |\n+   = note: #[warn(duplicate_associated_type_binding)] on by default\n+\n+warning: duplicate associated type binding\n+  --> $DIR/issue-50589-multiple-associated-types.rs:17:28\n+   |\n+LL | fn test() ->  Box<Iterator<Item = (), Item = Unit>> {\n+   |                            ^^^^^^^^^  ^^^^^^^^^^^\n+"}]}