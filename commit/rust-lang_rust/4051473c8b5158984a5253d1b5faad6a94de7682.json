{"sha": "4051473c8b5158984a5253d1b5faad6a94de7682", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwNTE0NzNjOGI1MTU4OTg0YTUyNTNkMWI1ZmFhZDZhOTRkZTc2ODI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-02T10:42:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-02T10:42:45Z"}, "message": "Auto merge of #78661 - JohnTitor:rollup-er2isja, r=JohnTitor\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #78606 (Clarify handling of final line ending in str::lines())\n - #78610 (Do not remove tokens before AST json serialization)\n - #78620 (Trivial fixes to bitwise operator documentation)\n - #78627 (Point out that total_cmp is no strict superset of partial comparison)\n - #78637 (Add fetch_update methods to AtomicBool and AtomicPtr)\n\nFailed merges:\n\nr? `@ghost`", "tree": {"sha": "a3dcca4b2e5d8b9a5b0a3d058010826b5901d30f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3dcca4b2e5d8b9a5b0a3d058010826b5901d30f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4051473c8b5158984a5253d1b5faad6a94de7682", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4051473c8b5158984a5253d1b5faad6a94de7682", "html_url": "https://github.com/rust-lang/rust/commit/4051473c8b5158984a5253d1b5faad6a94de7682", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4051473c8b5158984a5253d1b5faad6a94de7682/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "234099d1d12bef9d6e81a296222fbc272dc51d89", "url": "https://api.github.com/repos/rust-lang/rust/commits/234099d1d12bef9d6e81a296222fbc272dc51d89", "html_url": "https://github.com/rust-lang/rust/commit/234099d1d12bef9d6e81a296222fbc272dc51d89"}, {"sha": "50d7716efb7cffb43a0ca77c723754ad2174e9cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/50d7716efb7cffb43a0ca77c723754ad2174e9cc", "html_url": "https://github.com/rust-lang/rust/commit/50d7716efb7cffb43a0ca77c723754ad2174e9cc"}], "stats": {"total": 347, "additions": 189, "deletions": 158}, "files": [{"sha": "98da20af8f691cb54c61b2de9f5d7492b7501386", "filename": "compiler/rustc_ast/src/tokenstream.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4051473c8b5158984a5253d1b5faad6a94de7682/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4051473c8b5158984a5253d1b5faad6a94de7682/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs?ref=4051473c8b5158984a5253d1b5faad6a94de7682", "patch": "@@ -153,8 +153,9 @@ impl fmt::Debug for LazyTokenStream {\n }\n \n impl<S: Encoder> Encodable<S> for LazyTokenStream {\n-    fn encode(&self, _s: &mut S) -> Result<(), S::Error> {\n-        panic!(\"Attempted to encode LazyTokenStream\");\n+    fn encode(&self, s: &mut S) -> Result<(), S::Error> {\n+        // Used by AST json printing.\n+        Encodable::encode(&self.create_token_stream(), s)\n     }\n }\n "}, {"sha": "548b6c03daa7e99dc13337372c5fa2461b1e7bd2", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 2, "deletions": 88, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/4051473c8b5158984a5253d1b5faad6a94de7682/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4051473c8b5158984a5253d1b5faad6a94de7682/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=4051473c8b5158984a5253d1b5faad6a94de7682", "patch": "@@ -2,9 +2,8 @@ use crate::interface::{Compiler, Result};\n use crate::proc_macro_decls;\n use crate::util;\n \n-use rustc_ast::mut_visit::{self, MutVisitor};\n-use rustc_ast::ptr::P;\n-use rustc_ast::{self as ast, token, visit};\n+use rustc_ast::mut_visit::MutVisitor;\n+use rustc_ast::{self as ast, visit};\n use rustc_codegen_ssa::back::link::emit_metadata;\n use rustc_codegen_ssa::traits::CodegenBackend;\n use rustc_data_structures::sync::{par_iter, Lrc, OnceCell, ParallelIterator, WorkerLocal};\n@@ -37,7 +36,6 @@ use rustc_span::symbol::Symbol;\n use rustc_span::{FileName, RealFileName};\n use rustc_trait_selection::traits;\n use rustc_typeck as typeck;\n-use smallvec::SmallVec;\n use tracing::{info, warn};\n \n use rustc_serialize::json;\n@@ -52,82 +50,6 @@ use std::path::PathBuf;\n use std::rc::Rc;\n use std::{env, fs, iter, mem};\n \n-/// Remove alls `LazyTokenStreams` from an AST struct\n-/// Normally, this is done during AST lowering. However,\n-/// printing the AST JSON requires us to serialize\n-/// the entire AST, and we don't want to serialize\n-/// a `LazyTokenStream`.\n-struct TokenStripper;\n-impl mut_visit::MutVisitor for TokenStripper {\n-    fn flat_map_item(&mut self, mut i: P<ast::Item>) -> SmallVec<[P<ast::Item>; 1]> {\n-        i.tokens = None;\n-        mut_visit::noop_flat_map_item(i, self)\n-    }\n-    fn flat_map_foreign_item(\n-        &mut self,\n-        mut i: P<ast::ForeignItem>,\n-    ) -> SmallVec<[P<ast::ForeignItem>; 1]> {\n-        i.tokens = None;\n-        mut_visit::noop_flat_map_foreign_item(i, self)\n-    }\n-    fn flat_map_trait_item(\n-        &mut self,\n-        mut i: P<ast::AssocItem>,\n-    ) -> SmallVec<[P<ast::AssocItem>; 1]> {\n-        i.tokens = None;\n-        mut_visit::noop_flat_map_assoc_item(i, self)\n-    }\n-    fn flat_map_impl_item(&mut self, mut i: P<ast::AssocItem>) -> SmallVec<[P<ast::AssocItem>; 1]> {\n-        i.tokens = None;\n-        mut_visit::noop_flat_map_assoc_item(i, self)\n-    }\n-    fn visit_block(&mut self, b: &mut P<ast::Block>) {\n-        b.tokens = None;\n-        mut_visit::noop_visit_block(b, self);\n-    }\n-    fn flat_map_stmt(&mut self, mut stmt: ast::Stmt) -> SmallVec<[ast::Stmt; 1]> {\n-        stmt.tokens = None;\n-        mut_visit::noop_flat_map_stmt(stmt, self)\n-    }\n-    fn visit_pat(&mut self, p: &mut P<ast::Pat>) {\n-        p.tokens = None;\n-        mut_visit::noop_visit_pat(p, self);\n-    }\n-    fn visit_ty(&mut self, ty: &mut P<ast::Ty>) {\n-        ty.tokens = None;\n-        mut_visit::noop_visit_ty(ty, self);\n-    }\n-    fn visit_attribute(&mut self, attr: &mut ast::Attribute) {\n-        attr.tokens = None;\n-        if let ast::AttrKind::Normal(ast::AttrItem { tokens, .. }) = &mut attr.kind {\n-            *tokens = None;\n-        }\n-        mut_visit::noop_visit_attribute(attr, self);\n-    }\n-\n-    fn visit_interpolated(&mut self, nt: &mut token::Nonterminal) {\n-        if let token::Nonterminal::NtMeta(meta) = nt {\n-            meta.tokens = None;\n-        }\n-        // Handles all of the other cases\n-        mut_visit::noop_visit_interpolated(nt, self);\n-    }\n-\n-    fn visit_path(&mut self, p: &mut ast::Path) {\n-        p.tokens = None;\n-        mut_visit::noop_visit_path(p, self);\n-    }\n-    fn visit_vis(&mut self, vis: &mut ast::Visibility) {\n-        vis.tokens = None;\n-        mut_visit::noop_visit_vis(vis, self);\n-    }\n-    fn visit_expr(&mut self, e: &mut P<ast::Expr>) {\n-        e.tokens = None;\n-        mut_visit::noop_visit_expr(e, self);\n-    }\n-    fn visit_mac(&mut self, _mac: &mut ast::MacCall) {}\n-}\n-\n pub fn parse<'a>(sess: &'a Session, input: &Input) -> PResult<'a, ast::Crate> {\n     let krate = sess.time(\"parse_crate\", || match input {\n         Input::File(file) => parse_crate_from_file(file, &sess.parse_sess),\n@@ -137,10 +59,6 @@ pub fn parse<'a>(sess: &'a Session, input: &Input) -> PResult<'a, ast::Crate> {\n     })?;\n \n     if sess.opts.debugging_opts.ast_json_noexpand {\n-        // Set any `token` fields to `None` before\n-        // we display the AST.\n-        let mut krate = krate.clone();\n-        TokenStripper.visit_crate(&mut krate);\n         println!(\"{}\", json::as_json(&krate));\n     }\n \n@@ -464,10 +382,6 @@ fn configure_and_expand_inner<'a>(\n     }\n \n     if sess.opts.debugging_opts.ast_json {\n-        // Set any `token` fields to `None` before\n-        // we display the AST.\n-        let mut krate = krate.clone();\n-        TokenStripper.visit_crate(&mut krate);\n         println!(\"{}\", json::as_json(&krate));\n     }\n "}, {"sha": "86e6352d132155340662a9dff6fc4a67da78688d", "filename": "library/core/src/num/f32.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4051473c8b5158984a5253d1b5faad6a94de7682/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4051473c8b5158984a5253d1b5faad6a94de7682/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs?ref=4051473c8b5158984a5253d1b5faad6a94de7682", "patch": "@@ -876,6 +876,10 @@ impl f32 {\n     /// - Positive signaling NaN\n     /// - Positive quiet NaN\n     ///\n+    /// Note that this function does not always agree with the [`PartialOrd`]\n+    /// and [`PartialEq`] implementations of `f32`. In particular, they regard\n+    /// negative and positive zero as equal, while `total_cmp` doesn't.\n+    ///\n     /// # Example\n     /// ```\n     /// #![feature(total_cmp)]"}, {"sha": "9b1405b479f7c3d2b7766704d9cac04a7ff5dc89", "filename": "library/core/src/num/f64.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4051473c8b5158984a5253d1b5faad6a94de7682/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4051473c8b5158984a5253d1b5faad6a94de7682/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs?ref=4051473c8b5158984a5253d1b5faad6a94de7682", "patch": "@@ -890,6 +890,10 @@ impl f64 {\n     /// - Positive signaling NaN\n     /// - Positive quiet NaN\n     ///\n+    /// Note that this function does not always agree with the [`PartialOrd`]\n+    /// and [`PartialEq`] implementations of `f64`. In particular, they regard\n+    /// negative and positive zero as equal, while `total_cmp` doesn't.\n+    ///\n     /// # Example\n     /// ```\n     /// #![feature(total_cmp)]"}, {"sha": "51f804381734545f946fe411bdb123197ac5f6e6", "filename": "library/core/src/ops/bit.rs", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4051473c8b5158984a5253d1b5faad6a94de7682/library%2Fcore%2Fsrc%2Fops%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4051473c8b5158984a5253d1b5faad6a94de7682/library%2Fcore%2Fsrc%2Fops%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fbit.rs?ref=4051473c8b5158984a5253d1b5faad6a94de7682", "patch": "@@ -109,10 +109,12 @@ not_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n ///     fn bitand(self, Self(rhs): Self) -> Self::Output {\n ///         let Self(lhs) = self;\n ///         assert_eq!(lhs.len(), rhs.len());\n-///         Self(lhs.iter()\n+///         Self(\n+///             lhs.iter()\n ///                 .zip(rhs.iter())\n-///                 .map(|(x, y)| *x && *y)\n-///                 .collect())\n+///                 .map(|(x, y)| *x & *y)\n+///                 .collect()\n+///         )\n ///     }\n /// }\n ///\n@@ -207,7 +209,12 @@ bitand_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n ///     fn bitor(self, Self(rhs): Self) -> Self::Output {\n ///         let Self(lhs) = self;\n ///         assert_eq!(lhs.len(), rhs.len());\n-///         Self(lhs.iter().zip(rhs.iter()).map(|(x, y)| *x || *y).collect())\n+///         Self(\n+///             lhs.iter()\n+///                 .zip(rhs.iter())\n+///                 .map(|(x, y)| *x | *y)\n+///                 .collect()\n+///         )\n ///     }\n /// }\n ///\n@@ -302,10 +309,12 @@ bitor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n ///     fn bitxor(self, Self(rhs): Self) -> Self::Output {\n ///         let Self(lhs) = self;\n ///         assert_eq!(lhs.len(), rhs.len());\n-///         Self(lhs.iter()\n+///         Self(\n+///             lhs.iter()\n ///                 .zip(rhs.iter())\n-///                 .map(|(x, y)| (*x || *y) && !(*x && *y))\n-///                 .collect())\n+///                 .map(|(x, y)| *x ^ *y)\n+///                 .collect()\n+///         )\n ///     }\n /// }\n ///\n@@ -643,11 +652,13 @@ shr_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 i128 isize }\n ///     // `rhs` is the \"right-hand side\" of the expression `a &= b`.\n ///     fn bitand_assign(&mut self, rhs: Self) {\n ///         assert_eq!(self.0.len(), rhs.0.len());\n-///         *self = Self(self.0\n-///                          .iter()\n-///                          .zip(rhs.0.iter())\n-///                          .map(|(x, y)| *x && *y)\n-///                          .collect());\n+///         *self = Self(\n+///             self.0\n+///                 .iter()\n+///                 .zip(rhs.0.iter())\n+///                 .map(|(x, y)| *x & *y)\n+///                 .collect()\n+///         );\n ///     }\n /// }\n ///"}, {"sha": "23d63a4787efa595cb76a0218747c93089956fd5", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4051473c8b5158984a5253d1b5faad6a94de7682/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4051473c8b5158984a5253d1b5faad6a94de7682/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=4051473c8b5158984a5253d1b5faad6a94de7682", "patch": "@@ -842,7 +842,9 @@ impl str {\n     /// Lines are ended with either a newline (`\\n`) or a carriage return with\n     /// a line feed (`\\r\\n`).\n     ///\n-    /// The final line ending is optional.\n+    /// The final line ending is optional. A string that ends with a final line\n+    /// ending will return the same lines as an otherwise identical string\n+    /// without a final line ending.\n     ///\n     /// # Examples\n     ///"}, {"sha": "0c53b6ed54a849e8fb2c85088e661c57990127cc", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/4051473c8b5158984a5253d1b5faad6a94de7682/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4051473c8b5158984a5253d1b5faad6a94de7682/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=4051473c8b5158984a5253d1b5faad6a94de7682", "patch": "@@ -801,6 +801,64 @@ impl AtomicBool {\n     pub fn as_mut_ptr(&self) -> *mut bool {\n         self.v.get() as *mut bool\n     }\n+\n+    /// Fetches the value, and applies a function to it that returns an optional\n+    /// new value. Returns a `Result` of `Ok(previous_value)` if the function\n+    /// returned `Some(_)`, else `Err(previous_value)`.\n+    ///\n+    /// Note: This may call the function multiple times if the value has been\n+    /// changed from other threads in the meantime, as long as the function\n+    /// returns `Some(_)`, but the function will have been applied only once to\n+    /// the stored value.\n+    ///\n+    /// `fetch_update` takes two [`Ordering`] arguments to describe the memory\n+    /// ordering of this operation. The first describes the required ordering for\n+    /// when the operation finally succeeds while the second describes the\n+    /// required ordering for loads. These correspond to the success and failure\n+    /// orderings of [`AtomicBool::compare_exchange`] respectively.\n+    ///\n+    /// Using [`Acquire`] as success ordering makes the store part of this\n+    /// operation [`Relaxed`], and using [`Release`] makes the final successful\n+    /// load [`Relaxed`]. The (failed) load ordering can only be [`SeqCst`],\n+    /// [`Acquire`] or [`Relaxed`] and must be equivalent to or weaker than the\n+    /// success ordering.\n+    ///\n+    /// **Note:** This method is only available on platforms that support atomic\n+    /// operations on `u8`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```rust\n+    /// #![feature(atomic_fetch_update)]\n+    /// use std::sync::atomic::{AtomicBool, Ordering};\n+    ///\n+    /// let x = AtomicBool::new(false);\n+    /// assert_eq!(x.fetch_update(Ordering::SeqCst, Ordering::SeqCst, |_| None), Err(false));\n+    /// assert_eq!(x.fetch_update(Ordering::SeqCst, Ordering::SeqCst, |x| Some(!x)), Ok(false));\n+    /// assert_eq!(x.fetch_update(Ordering::SeqCst, Ordering::SeqCst, |x| Some(!x)), Ok(true));\n+    /// assert_eq!(x.load(Ordering::SeqCst), false);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"atomic_fetch_update\", reason = \"recently added\", issue = \"78639\")]\n+    #[cfg(target_has_atomic = \"8\")]\n+    pub fn fetch_update<F>(\n+        &self,\n+        set_order: Ordering,\n+        fetch_order: Ordering,\n+        mut f: F,\n+    ) -> Result<bool, bool>\n+    where\n+        F: FnMut(bool) -> Option<bool>,\n+    {\n+        let mut prev = self.load(fetch_order);\n+        while let Some(next) = f(prev) {\n+            match self.compare_exchange_weak(prev, next, set_order, fetch_order) {\n+                x @ Ok(_) => return x,\n+                Err(next_prev) => prev = next_prev,\n+            }\n+        }\n+        Err(prev)\n+    }\n }\n \n #[cfg(target_has_atomic_load_store = \"ptr\")]\n@@ -1123,6 +1181,73 @@ impl<T> AtomicPtr<T> {\n             }\n         }\n     }\n+\n+    /// Fetches the value, and applies a function to it that returns an optional\n+    /// new value. Returns a `Result` of `Ok(previous_value)` if the function\n+    /// returned `Some(_)`, else `Err(previous_value)`.\n+    ///\n+    /// Note: This may call the function multiple times if the value has been\n+    /// changed from other threads in the meantime, as long as the function\n+    /// returns `Some(_)`, but the function will have been applied only once to\n+    /// the stored value.\n+    ///\n+    /// `fetch_update` takes two [`Ordering`] arguments to describe the memory\n+    /// ordering of this operation. The first describes the required ordering for\n+    /// when the operation finally succeeds while the second describes the\n+    /// required ordering for loads. These correspond to the success and failure\n+    /// orderings of [`AtomicPtr::compare_exchange`] respectively.\n+    ///\n+    /// Using [`Acquire`] as success ordering makes the store part of this\n+    /// operation [`Relaxed`], and using [`Release`] makes the final successful\n+    /// load [`Relaxed`]. The (failed) load ordering can only be [`SeqCst`],\n+    /// [`Acquire`] or [`Relaxed`] and must be equivalent to or weaker than the\n+    /// success ordering.\n+    ///\n+    /// **Note:** This method is only available on platforms that support atomic\n+    /// operations on pointers.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```rust\n+    /// #![feature(atomic_fetch_update)]\n+    /// use std::sync::atomic::{AtomicPtr, Ordering};\n+    ///\n+    /// let ptr: *mut _ = &mut 5;\n+    /// let some_ptr = AtomicPtr::new(ptr);\n+    ///\n+    /// let new: *mut _ = &mut 10;\n+    /// assert_eq!(some_ptr.fetch_update(Ordering::SeqCst, Ordering::SeqCst, |_| None), Err(ptr));\n+    /// let result = some_ptr.fetch_update(Ordering::SeqCst, Ordering::SeqCst, |x| {\n+    ///     if x == ptr {\n+    ///         Some(new)\n+    ///     } else {\n+    ///         None\n+    ///     }\n+    /// });\n+    /// assert_eq!(result, Ok(ptr));\n+    /// assert_eq!(some_ptr.load(Ordering::SeqCst), new);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"atomic_fetch_update\", reason = \"recently added\", issue = \"78639\")]\n+    #[cfg(target_has_atomic = \"ptr\")]\n+    pub fn fetch_update<F>(\n+        &self,\n+        set_order: Ordering,\n+        fetch_order: Ordering,\n+        mut f: F,\n+    ) -> Result<*mut T, *mut T>\n+    where\n+        F: FnMut(*mut T) -> Option<*mut T>,\n+    {\n+        let mut prev = self.load(fetch_order);\n+        while let Some(next) = f(prev) {\n+            match self.compare_exchange_weak(prev, next, set_order, fetch_order) {\n+                x @ Ok(_) => return x,\n+                Err(next_prev) => prev = next_prev,\n+            }\n+        }\n+        Err(prev)\n+    }\n }\n \n #[cfg(target_has_atomic_load_store = \"8\")]"}, {"sha": "bbdd7e33ba0670b2209e0b87b5ada93ff2bb6c49", "filename": "src/test/ui/ast-json/ast-json-ice.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4051473c8b5158984a5253d1b5faad6a94de7682/src%2Ftest%2Fui%2Fast-json%2Fast-json-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4051473c8b5158984a5253d1b5faad6a94de7682/src%2Ftest%2Fui%2Fast-json%2Fast-json-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fast-json%2Fast-json-ice.rs?ref=4051473c8b5158984a5253d1b5faad6a94de7682", "patch": "@@ -39,3 +39,26 @@ fn main() {\n \n     struct A;\n }\n+\n+// Regressions tests for issues #78398 and #78510 (captured tokens in associated and foreign items)\n+\n+struct S;\n+\n+macro_rules! mac_extern {\n+    ($i:item) => {\n+        extern \"C\" { $i }\n+    }\n+}\n+macro_rules! mac_assoc {\n+    ($i:item) => {\n+        impl S { $i }\n+        trait Bar { $i }\n+    }\n+}\n+\n+mac_extern! {\n+    fn foo();\n+}\n+mac_assoc! {\n+    fn foo() {}\n+}"}, {"sha": "fb311a9045b359c377d421e61042d291bac084cb", "filename": "src/test/ui/ast-json/ast-json-noexpand-output.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4051473c8b5158984a5253d1b5faad6a94de7682/src%2Ftest%2Fui%2Fast-json%2Fast-json-noexpand-output.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/4051473c8b5158984a5253d1b5faad6a94de7682/src%2Ftest%2Fui%2Fast-json%2Fast-json-noexpand-output.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fast-json%2Fast-json-noexpand-output.stdout?ref=4051473c8b5158984a5253d1b5faad6a94de7682", "patch": "@@ -1 +1 @@\n-{\"module\":{\"inner\":{\"lo\":0,\"hi\":0},\"unsafety\":\"No\",\"items\":[{\"attrs\":[],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"core\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null}],\"inline\":true},\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"crate_type\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":{\"variant\":\"Eq\",\"fields\":[{\"lo\":0,\"hi\":0},{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}]},\"tokens\":null}]},\"id\":null,\"style\":\"Inner\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null}],\"span\":{\"lo\":0,\"hi\":0},\"proc_macros\":[]}\n+{\"module\":{\"inner\":{\"lo\":0,\"hi\":0},\"unsafety\":\"No\",\"items\":[{\"attrs\":[],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"core\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null}],\"inline\":true},\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"crate_type\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":{\"variant\":\"Eq\",\"fields\":[{\"lo\":0,\"hi\":0},{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}]},\"tokens\":null}]},\"id\":null,\"style\":\"Inner\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Pound\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Joint\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Not\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Delimited\",\"fields\":[{\"open\":{\"lo\":0,\"hi\":0},\"close\":{\"lo\":0,\"hi\":0}},\"Bracket\",{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"crate_type\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Eq\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}]},\"Alone\"]]}}],\"span\":{\"lo\":0,\"hi\":0},\"proc_macros\":[]}"}, {"sha": "d1e0f409948c20a2e9f5b46c8d1d02b472044d70", "filename": "src/test/ui/ast-json/ast-json-output.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4051473c8b5158984a5253d1b5faad6a94de7682/src%2Ftest%2Fui%2Fast-json%2Fast-json-output.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/4051473c8b5158984a5253d1b5faad6a94de7682/src%2Ftest%2Fui%2Fast-json%2Fast-json-output.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fast-json%2Fast-json-output.stdout?ref=4051473c8b5158984a5253d1b5faad6a94de7682", "patch": "@@ -1 +1 @@\n-{\"module\":{\"inner\":{\"lo\":0,\"hi\":0},\"unsafety\":\"No\",\"items\":[{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"prelude_import\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":\"Empty\",\"tokens\":null}]},\"id\":null,\"style\":\"Outer\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null}],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"Use\",\"fields\":[{\"prefix\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"{{root}}\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"std\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"prelude\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"v1\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"kind\":\"Glob\",\"span\":{\"lo\":0,\"hi\":0}}]},\"tokens\":null},{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"macro_use\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":\"Empty\",\"tokens\":null}]},\"id\":null,\"style\":\"Outer\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null}],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"std\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null},{\"attrs\":[],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"core\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null}],\"inline\":true},\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"crate_type\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":{\"variant\":\"Eq\",\"fields\":[{\"lo\":0,\"hi\":0},{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}]},\"tokens\":null}]},\"id\":null,\"style\":\"Inner\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null}],\"span\":{\"lo\":0,\"hi\":0},\"proc_macros\":[]}\n+{\"module\":{\"inner\":{\"lo\":0,\"hi\":0},\"unsafety\":\"No\",\"items\":[{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"prelude_import\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":\"Empty\",\"tokens\":null}]},\"id\":null,\"style\":\"Outer\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null}],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"Use\",\"fields\":[{\"prefix\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"{{root}}\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"std\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"prelude\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"v1\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"kind\":\"Glob\",\"span\":{\"lo\":0,\"hi\":0}}]},\"tokens\":null},{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"macro_use\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":\"Empty\",\"tokens\":null}]},\"id\":null,\"style\":\"Outer\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null}],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"std\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null},{\"attrs\":[],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"core\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null}],\"inline\":true},\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"crate_type\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":{\"variant\":\"Eq\",\"fields\":[{\"lo\":0,\"hi\":0},{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}]},\"tokens\":null}]},\"id\":null,\"style\":\"Inner\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Pound\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Joint\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Not\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Delimited\",\"fields\":[{\"open\":{\"lo\":0,\"hi\":0},\"close\":{\"lo\":0,\"hi\":0}},\"Bracket\",{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"crate_type\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Eq\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}]},\"Alone\"]]}}],\"span\":{\"lo\":0,\"hi\":0},\"proc_macros\":[]}"}, {"sha": "a1a20f9568178f968799ebfc0c2936bf0f6b86fb", "filename": "src/test/ui/ast-json/issue-78398-foreign-ice.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/234099d1d12bef9d6e81a296222fbc272dc51d89/src%2Ftest%2Fui%2Fast-json%2Fissue-78398-foreign-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/234099d1d12bef9d6e81a296222fbc272dc51d89/src%2Ftest%2Fui%2Fast-json%2Fissue-78398-foreign-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fast-json%2Fissue-78398-foreign-ice.rs?ref=234099d1d12bef9d6e81a296222fbc272dc51d89", "patch": "@@ -1,18 +0,0 @@\n-// Regression test for issue #78398\n-// Tests that we don't ICE when trying to print the AST json\n-// when we have capturd tokens for a foreign item\n-\n-// check-pass\n-// compile-flags: -Zast-json\n-\n-fn main() {}\n-\n-macro_rules! mac_extern {\n-    ($i:item) => {\n-        extern \"C\" { $i }\n-    }\n-}\n-\n-mac_extern! {\n-    fn foo();\n-}"}, {"sha": "f1d0e44e9fc8c784254510e2ad3c72924a4f29b3", "filename": "src/test/ui/ast-json/issue-78398-foreign-ice.stdout", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/234099d1d12bef9d6e81a296222fbc272dc51d89/src%2Ftest%2Fui%2Fast-json%2Fissue-78398-foreign-ice.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/234099d1d12bef9d6e81a296222fbc272dc51d89/src%2Ftest%2Fui%2Fast-json%2Fissue-78398-foreign-ice.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fast-json%2Fissue-78398-foreign-ice.stdout?ref=234099d1d12bef9d6e81a296222fbc272dc51d89", "patch": "@@ -1 +0,0 @@\n-{\"module\":{\"inner\":{\"lo\":192,\"hi\":315},\"unsafety\":\"No\",\"items\":[{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"prelude_import\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":3,\"args\":null}],\"tokens\":null},\"args\":\"Empty\",\"tokens\":null}]},\"id\":null,\"style\":\"Outer\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null}],\"id\":4,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"Use\",\"fields\":[{\"prefix\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"{{root}}\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":5,\"args\":null},{\"ident\":{\"name\":\"std\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":6,\"args\":null},{\"ident\":{\"name\":\"prelude\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":7,\"args\":null},{\"ident\":{\"name\":\"v1\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":8,\"args\":null}],\"tokens\":null},\"kind\":\"Glob\",\"span\":{\"lo\":0,\"hi\":0}}]},\"tokens\":null},{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"macro_use\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":9,\"args\":null}],\"tokens\":null},\"args\":\"Empty\",\"tokens\":null}]},\"id\":null,\"style\":\"Outer\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null}],\"id\":10,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"std\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null},{\"attrs\":[],\"id\":11,\"span\":{\"lo\":192,\"hi\":204},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":192,\"hi\":192},\"tokens\":null},\"ident\":{\"name\":\"main\",\"span\":{\"lo\":195,\"hi\":199}},\"kind\":{\"variant\":\"Fn\",\"fields\":[\"Final\",{\"header\":{\"unsafety\":\"No\",\"asyncness\":\"No\",\"constness\":\"No\",\"ext\":\"None\"},\"decl\":{\"inputs\":[],\"output\":{\"variant\":\"Default\",\"fields\":[{\"lo\":202,\"hi\":202}]}},\"span\":{\"lo\":192,\"hi\":201}},{\"params\":[],\"where_clause\":{\"has_where_token\":false,\"predicates\":[],\"span\":{\"lo\":201,\"hi\":201}},\"span\":{\"lo\":199,\"hi\":199}},{\"stmts\":[],\"id\":12,\"rules\":\"Default\",\"span\":{\"lo\":202,\"hi\":204},\"tokens\":null}]},\"tokens\":null},{\"attrs\":[],\"id\":13,\"span\":{\"lo\":206,\"hi\":284},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":206,\"hi\":206},\"tokens\":null},\"ident\":{\"name\":\"mac_extern\",\"span\":{\"lo\":219,\"hi\":229}},\"kind\":{\"variant\":\"MacroDef\",\"fields\":[{\"body\":{\"variant\":\"Delimited\",\"fields\":[{\"open\":{\"lo\":230,\"hi\":231},\"close\":{\"lo\":283,\"hi\":284}},\"Brace\",{\"0\":[[{\"variant\":\"Delimited\",\"fields\":[{\"open\":{\"lo\":236,\"hi\":237},\"close\":{\"lo\":244,\"hi\":245}},\"Paren\",{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Dollar\",\"span\":{\"lo\":237,\"hi\":238}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"i\",false]},\"span\":{\"lo\":238,\"hi\":239}}]},\"Joint\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Colon\",\"span\":{\"lo\":239,\"hi\":240}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"item\",false]},\"span\":{\"lo\":240,\"hi\":244}}]},\"Alone\"]]}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"FatArrow\",\"span\":{\"lo\":246,\"hi\":248}}]},\"Alone\"],[{\"variant\":\"Delimited\",\"fields\":[{\"open\":{\"lo\":249,\"hi\":250},\"close\":{\"lo\":281,\"hi\":282}},\"Brace\",{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"extern\",false]},\"span\":{\"lo\":259,\"hi\":265}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"C\",\"suffix\":null}]},\"span\":{\"lo\":266,\"hi\":269}}]},\"Alone\"],[{\"variant\":\"Delimited\",\"fields\":[{\"open\":{\"lo\":270,\"hi\":271},\"close\":{\"lo\":275,\"hi\":276}},\"Brace\",{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Dollar\",\"span\":{\"lo\":272,\"hi\":273}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"i\",false]},\"span\":{\"lo\":273,\"hi\":274}}]},\"Alone\"]]}]},\"Alone\"]]}]},\"Alone\"]]}]},\"macro_rules\":true}]},\"tokens\":null},{\"attrs\":[],\"id\":14,\"span\":{\"lo\":259,\"hi\":276},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":259,\"hi\":259},\"tokens\":null},\"ident\":{\"name\":\"\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ForeignMod\",\"fields\":[{\"unsafety\":\"No\",\"abi\":{\"style\":\"Cooked\",\"symbol\":\"C\",\"suffix\":null,\"span\":{\"lo\":266,\"hi\":269},\"symbol_unescaped\":\"C\"},\"items\":[{\"attrs\":[],\"id\":15,\"span\":{\"lo\":304,\"hi\":313},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":304,\"hi\":304},\"tokens\":null},\"ident\":{\"name\":\"foo\",\"span\":{\"lo\":307,\"hi\":310}},\"kind\":{\"variant\":\"Fn\",\"fields\":[\"Final\",{\"header\":{\"unsafety\":\"No\",\"asyncness\":\"No\",\"constness\":\"No\",\"ext\":\"None\"},\"decl\":{\"inputs\":[],\"output\":{\"variant\":\"Default\",\"fields\":[{\"lo\":312,\"hi\":312}]}},\"span\":{\"lo\":304,\"hi\":313}},{\"params\":[],\"where_clause\":{\"has_where_token\":false,\"predicates\":[],\"span\":{\"lo\":312,\"hi\":312}},\"span\":{\"lo\":310,\"hi\":310}},null]},\"tokens\":null}]}]},\"tokens\":null}],\"inline\":true},\"attrs\":[],\"span\":{\"lo\":192,\"hi\":315},\"proc_macros\":[]}"}, {"sha": "ef3117c49cad3d2d62f7e2e91d0b4617daa5976b", "filename": "src/test/ui/ast-json/issue-78510-assoc-ice.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/234099d1d12bef9d6e81a296222fbc272dc51d89/src%2Ftest%2Fui%2Fast-json%2Fissue-78510-assoc-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/234099d1d12bef9d6e81a296222fbc272dc51d89/src%2Ftest%2Fui%2Fast-json%2Fissue-78510-assoc-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fast-json%2Fissue-78510-assoc-ice.rs?ref=234099d1d12bef9d6e81a296222fbc272dc51d89", "patch": "@@ -1,18 +0,0 @@\n-// compile-flags: -Zast-json\n-//\n-// Regression test for issue #78510\n-// Tests that we don't ICE when we have tokens for an associated item\n-\n-struct S;\n-\n-impl S {\n-    #[derive(Debug)] //~ ERROR `derive` may only be applied to structs, enums and unions\n-    fn f() {}\n-}\n-\n-trait Bar {\n-    #[derive(Debug)] //~ ERROR `derive` may only be applied to structs, enums and unions\n-    fn foo() {}\n-}\n-\n-fn main() {}"}, {"sha": "3573c203a789309f6e28a01dd0853c9d7249a55a", "filename": "src/test/ui/ast-json/issue-78510-assoc-ice.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/234099d1d12bef9d6e81a296222fbc272dc51d89/src%2Ftest%2Fui%2Fast-json%2Fissue-78510-assoc-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/234099d1d12bef9d6e81a296222fbc272dc51d89/src%2Ftest%2Fui%2Fast-json%2Fissue-78510-assoc-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fast-json%2Fissue-78510-assoc-ice.stderr?ref=234099d1d12bef9d6e81a296222fbc272dc51d89", "patch": "@@ -1,15 +0,0 @@\n-error[E0774]: `derive` may only be applied to structs, enums and unions\n-  --> $DIR/issue-78510-assoc-ice.rs:9:5\n-   |\n-LL |     #[derive(Debug)]\n-   |     ^^^^^^^^^^^^^^^^\n-\n-error[E0774]: `derive` may only be applied to structs, enums and unions\n-  --> $DIR/issue-78510-assoc-ice.rs:14:5\n-   |\n-LL |     #[derive(Debug)]\n-   |     ^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0774`."}, {"sha": "fef9504285b530dec83f0ff48e6a91f4c6decd84", "filename": "src/test/ui/ast-json/issue-78510-assoc-ice.stdout", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/234099d1d12bef9d6e81a296222fbc272dc51d89/src%2Ftest%2Fui%2Fast-json%2Fissue-78510-assoc-ice.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/234099d1d12bef9d6e81a296222fbc272dc51d89/src%2Ftest%2Fui%2Fast-json%2Fissue-78510-assoc-ice.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fast-json%2Fissue-78510-assoc-ice.stdout?ref=234099d1d12bef9d6e81a296222fbc272dc51d89", "patch": "@@ -1 +0,0 @@\n-{\"module\":{\"inner\":{\"lo\":139,\"hi\":397},\"unsafety\":\"No\",\"items\":[{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"prelude_import\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":3,\"args\":null}],\"tokens\":null},\"args\":\"Empty\",\"tokens\":null}]},\"id\":null,\"style\":\"Outer\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null}],\"id\":4,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"Use\",\"fields\":[{\"prefix\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"{{root}}\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":5,\"args\":null},{\"ident\":{\"name\":\"std\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":6,\"args\":null},{\"ident\":{\"name\":\"prelude\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":7,\"args\":null},{\"ident\":{\"name\":\"v1\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":8,\"args\":null}],\"tokens\":null},\"kind\":\"Glob\",\"span\":{\"lo\":0,\"hi\":0}}]},\"tokens\":null},{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"macro_use\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":9,\"args\":null}],\"tokens\":null},\"args\":\"Empty\",\"tokens\":null}]},\"id\":null,\"style\":\"Outer\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null}],\"id\":10,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"std\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null},{\"attrs\":[],\"id\":11,\"span\":{\"lo\":139,\"hi\":148},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":139,\"hi\":139},\"tokens\":null},\"ident\":{\"name\":\"S\",\"span\":{\"lo\":146,\"hi\":147}},\"kind\":{\"variant\":\"Struct\",\"fields\":[{\"variant\":\"Unit\",\"fields\":[12]},{\"params\":[],\"where_clause\":{\"has_where_token\":false,\"predicates\":[],\"span\":{\"lo\":147,\"hi\":147}},\"span\":{\"lo\":147,\"hi\":147}}]},\"tokens\":null},{\"attrs\":[],\"id\":13,\"span\":{\"lo\":150,\"hi\":263},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":150,\"hi\":150},\"tokens\":null},\"ident\":{\"name\":\"\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"Impl\",\"fields\":[\"No\",\"Positive\",\"Final\",\"No\",{\"params\":[],\"where_clause\":{\"has_where_token\":false,\"predicates\":[],\"span\":{\"lo\":156,\"hi\":156}},\"span\":{\"lo\":154,\"hi\":154}},null,{\"id\":14,\"kind\":{\"variant\":\"Path\",\"fields\":[null,{\"span\":{\"lo\":155,\"hi\":156},\"segments\":[{\"ident\":{\"name\":\"S\",\"span\":{\"lo\":155,\"hi\":156}},\"id\":15,\"args\":null}],\"tokens\":null}]},\"span\":{\"lo\":155,\"hi\":156},\"tokens\":null},[{\"attrs\":[],\"id\":19,\"span\":{\"lo\":252,\"hi\":261},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":252,\"hi\":252},\"tokens\":null},\"ident\":{\"name\":\"f\",\"span\":{\"lo\":255,\"hi\":256}},\"kind\":{\"variant\":\"Fn\",\"fields\":[\"Final\",{\"header\":{\"unsafety\":\"No\",\"asyncness\":\"No\",\"constness\":\"No\",\"ext\":\"None\"},\"decl\":{\"inputs\":[],\"output\":{\"variant\":\"Default\",\"fields\":[{\"lo\":259,\"hi\":259}]}},\"span\":{\"lo\":252,\"hi\":258}},{\"params\":[],\"where_clause\":{\"has_where_token\":false,\"predicates\":[],\"span\":{\"lo\":258,\"hi\":258}},\"span\":{\"lo\":256,\"hi\":256}},{\"stmts\":[],\"id\":20,\"rules\":\"Default\",\"span\":{\"lo\":259,\"hi\":261},\"tokens\":null}]},\"tokens\":null}]]},\"tokens\":null},{\"attrs\":[],\"id\":16,\"span\":{\"lo\":265,\"hi\":383},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":265,\"hi\":265},\"tokens\":null},\"ident\":{\"name\":\"Bar\",\"span\":{\"lo\":271,\"hi\":274}},\"kind\":{\"variant\":\"Trait\",\"fields\":[\"No\",\"No\",{\"params\":[],\"where_clause\":{\"has_where_token\":false,\"predicates\":[],\"span\":{\"lo\":274,\"hi\":274}},\"span\":{\"lo\":274,\"hi\":274}},[],[{\"attrs\":[],\"id\":21,\"span\":{\"lo\":370,\"hi\":381},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":370,\"hi\":370},\"tokens\":null},\"ident\":{\"name\":\"foo\",\"span\":{\"lo\":373,\"hi\":376}},\"kind\":{\"variant\":\"Fn\",\"fields\":[\"Final\",{\"header\":{\"unsafety\":\"No\",\"asyncness\":\"No\",\"constness\":\"No\",\"ext\":\"None\"},\"decl\":{\"inputs\":[],\"output\":{\"variant\":\"Default\",\"fields\":[{\"lo\":379,\"hi\":379}]}},\"span\":{\"lo\":370,\"hi\":378}},{\"params\":[],\"where_clause\":{\"has_where_token\":false,\"predicates\":[],\"span\":{\"lo\":378,\"hi\":378}},\"span\":{\"lo\":376,\"hi\":376}},{\"stmts\":[],\"id\":22,\"rules\":\"Default\",\"span\":{\"lo\":379,\"hi\":381},\"tokens\":null}]},\"tokens\":null}]]},\"tokens\":null},{\"attrs\":[],\"id\":17,\"span\":{\"lo\":385,\"hi\":397},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":385,\"hi\":385},\"tokens\":null},\"ident\":{\"name\":\"main\",\"span\":{\"lo\":388,\"hi\":392}},\"kind\":{\"variant\":\"Fn\",\"fields\":[\"Final\",{\"header\":{\"unsafety\":\"No\",\"asyncness\":\"No\",\"constness\":\"No\",\"ext\":\"None\"},\"decl\":{\"inputs\":[],\"output\":{\"variant\":\"Default\",\"fields\":[{\"lo\":395,\"hi\":395}]}},\"span\":{\"lo\":385,\"hi\":394}},{\"params\":[],\"where_clause\":{\"has_where_token\":false,\"predicates\":[],\"span\":{\"lo\":394,\"hi\":394}},\"span\":{\"lo\":392,\"hi\":392}},{\"stmts\":[],\"id\":18,\"rules\":\"Default\",\"span\":{\"lo\":395,\"hi\":397},\"tokens\":null}]},\"tokens\":null}],\"inline\":true},\"attrs\":[],\"span\":{\"lo\":139,\"hi\":397},\"proc_macros\":[]}"}]}