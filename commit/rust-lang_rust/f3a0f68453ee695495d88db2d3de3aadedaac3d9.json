{"sha": "f3a0f68453ee695495d88db2d3de3aadedaac3d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzYTBmNjg0NTNlZTY5NTQ5NWQ4OGRiMmQzZGUzYWFkZWRhYWMzZDk=", "commit": {"author": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2020-10-18T08:43:01Z"}, "committer": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2020-10-18T09:01:08Z"}, "message": "Zip -> Enumerate", "tree": {"sha": "4bdacdbcbffca2a6fc9cb3c240eb6918d6103007", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4bdacdbcbffca2a6fc9cb3c240eb6918d6103007"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3a0f68453ee695495d88db2d3de3aadedaac3d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3a0f68453ee695495d88db2d3de3aadedaac3d9", "html_url": "https://github.com/rust-lang/rust/commit/f3a0f68453ee695495d88db2d3de3aadedaac3d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3a0f68453ee695495d88db2d3de3aadedaac3d9/comments", "author": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d708d7fb7922215310396d29b00ae4bfcb992a0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d708d7fb7922215310396d29b00ae4bfcb992a0f", "html_url": "https://github.com/rust-lang/rust/commit/d708d7fb7922215310396d29b00ae4bfcb992a0f"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "444f9fe8d0a680ae968bd59408983e5f7cca6940", "filename": "compiler/rustc_mir/src/borrow_check/type_check/input_output.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f3a0f68453ee695495d88db2d3de3aadedaac3d9/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Finput_output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3a0f68453ee695495d88db2d3de3aadedaac3d9/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Finput_output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Finput_output.rs?ref=f3a0f68453ee695495d88db2d3de3aadedaac3d9", "patch": "@@ -73,7 +73,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         );\n \n         // Equate expected input tys with those in the MIR.\n-        for (&normalized_input_ty, argument_index) in normalized_input_tys.iter().zip(0..) {\n+        for (argument_index, &normalized_input_ty) in normalized_input_tys.iter().enumerate() {\n             // In MIR, argument N is stored in local N+1.\n             let local = Local::new(argument_index + 1);\n \n@@ -87,8 +87,8 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         }\n \n         if let Some(user_provided_sig) = user_provided_sig {\n-            for (&user_provided_input_ty, argument_index) in\n-                user_provided_sig.inputs().iter().zip(0..)\n+            for (argument_index, &user_provided_input_ty) in\n+                user_provided_sig.inputs().iter().enumerate()\n             {\n                 // In MIR, closures begin an implicit `self`, so\n                 // argument N is stored in local N+2."}]}