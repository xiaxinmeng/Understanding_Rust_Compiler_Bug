{"sha": "bf0e34c00159b60472ca2f78adb8837b9f5849a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmMGUzNGMwMDE1OWI2MDQ3MmNhMmY3OGFkYjg4MzdiOWY1ODQ5YTI=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2021-05-10T05:05:02Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2021-05-10T05:05:02Z"}, "message": "PR feedback", "tree": {"sha": "b900d04d34f95499eced74055d52b77800c0e96f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b900d04d34f95499eced74055d52b77800c0e96f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf0e34c00159b60472ca2f78adb8837b9f5849a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf0e34c00159b60472ca2f78adb8837b9f5849a2", "html_url": "https://github.com/rust-lang/rust/commit/bf0e34c00159b60472ca2f78adb8837b9f5849a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf0e34c00159b60472ca2f78adb8837b9f5849a2/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7a6c4a905e9e4b13785a6544434f6ffe859329c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7a6c4a905e9e4b13785a6544434f6ffe859329c", "html_url": "https://github.com/rust-lang/rust/commit/b7a6c4a905e9e4b13785a6544434f6ffe859329c"}], "stats": {"total": 31, "additions": 16, "deletions": 15}, "files": [{"sha": "3bc376482e9988875f8c194b0f2a4f0b8c73e958", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf0e34c00159b60472ca2f78adb8837b9f5849a2/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf0e34c00159b60472ca2f78adb8837b9f5849a2/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=bf0e34c00159b60472ca2f78adb8837b9f5849a2", "patch": "@@ -140,8 +140,8 @@\n #![feature(maybe_uninit_extra, maybe_uninit_slice, maybe_uninit_uninit_array)]\n #![feature(alloc_layout_extra)]\n #![feature(trusted_random_access)]\n-#![feature(try_trait)]\n-#![feature(try_trait_v2)]\n+#![cfg_attr(bootstrap, feature(try_trait))]\n+#![cfg_attr(not(bootstrap), feature(try_trait_v2))]\n #![feature(min_type_alias_impl_trait)]\n #![feature(associated_type_bounds)]\n #![feature(slice_group_by)]"}, {"sha": "777e4bc2c89206728497c9a17c449915d745a38a", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bf0e34c00159b60472ca2f78adb8837b9f5849a2/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf0e34c00159b60472ca2f78adb8837b9f5849a2/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=bf0e34c00159b60472ca2f78adb8837b9f5849a2", "patch": "@@ -2418,7 +2418,8 @@ pub trait Iterator {\n         Self: Sized,\n         F: FnMut(&Self::Item) -> R,\n         R: Try<Output = bool>,\n-        // FIXME: This is a weird bound; the API should change\n+        // FIXME: This bound is rather strange, but means minimal breakage on nightly.\n+        // See #85115 for the issue tracking a holistic solution for this and try_map.\n         R: crate::ops::TryV2<Residual = Result<crate::convert::Infallible, E>>,\n     {\n         #[inline]"}, {"sha": "71bfc3b44daf6c0857f578ee809f7354f5f0dfa3", "filename": "src/test/codegen/try_identity.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bf0e34c00159b60472ca2f78adb8837b9f5849a2/src%2Ftest%2Fcodegen%2Ftry_identity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf0e34c00159b60472ca2f78adb8837b9f5849a2/src%2Ftest%2Fcodegen%2Ftry_identity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ftry_identity.rs?ref=bf0e34c00159b60472ca2f78adb8837b9f5849a2", "patch": "@@ -7,10 +7,10 @@\n \n type R = Result<u64, i32>;\n \n-// This was written to the `?` from `try_trait`,\n-// but `try_trait_v2` uses a different structure,\n-// so the relevant desugar is copied inline\n-// in order to keep the test testing the same thing.\n+// This was written to the `?` from `try_trait`, but `try_trait_v2` uses a different structure,\n+// so the relevant desugar is copied inline in order to keep the test testing the same thing.\n+// FIXME: while this might be useful for `r#try!`, it would be nice to have a MIR optimization\n+// that picks up the `?` desugaring, as `SimplifyArmIdentity` does not.  See #85133\n #[no_mangle]\n pub fn try_identity(x: R) -> R {\n // CHECK: start:"}, {"sha": "6a6e39e68f9394cb677f5eb8c5a6f69f0232a890", "filename": "src/test/mir-opt/simplify-arm.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bf0e34c00159b60472ca2f78adb8837b9f5849a2/src%2Ftest%2Fmir-opt%2Fsimplify-arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf0e34c00159b60472ca2f78adb8837b9f5849a2/src%2Ftest%2Fmir-opt%2Fsimplify-arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-arm.rs?ref=bf0e34c00159b60472ca2f78adb8837b9f5849a2", "patch": "@@ -28,10 +28,10 @@ fn from_error<T, E>(e: E) -> Result<T, E> {\n     Err(e)\n }\n \n-// This was written to the `?` from `try_trait`,\n-// but `try_trait_v2` uses a different structure,\n-// so the relevant desugar is copied inline\n-// in order to keep the test testing the same thing.\n+// This was written to the `?` from `try_trait`, but `try_trait_v2` uses a different structure,\n+// so the relevant desugar is copied inline in order to keep the test testing the same thing.\n+// FIXME: while this might be useful for `r#try!`, it would be nice to have a MIR optimization\n+// that picks up the `?` desugaring, as `SimplifyArmIdentity` does not.  See #85133\n fn id_try(r: Result<u8, i32>) -> Result<u8, i32> {\n     let x = match into_result(r) {\n         Err(e) => return from_error(From::from(e)),"}, {"sha": "b91a7bfe68fa6895a70e3e524364e61eb15901c3", "filename": "src/test/mir-opt/simplify_try.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bf0e34c00159b60472ca2f78adb8837b9f5849a2/src%2Ftest%2Fmir-opt%2Fsimplify_try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf0e34c00159b60472ca2f78adb8837b9f5849a2/src%2Ftest%2Fmir-opt%2Fsimplify_try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.rs?ref=bf0e34c00159b60472ca2f78adb8837b9f5849a2", "patch": "@@ -13,10 +13,10 @@ fn from_error<T, E>(e: E) -> Result<T, E> {\n     Err(e)\n }\n \n-// This was written to the `?` from `try_trait`,\n-// but `try_trait_v2` uses a different structure,\n-// so the relevant desugar is copied inline\n-// in order to keep the test testing the same thing.\n+// This was written to the `?` from `try_trait`, but `try_trait_v2` uses a different structure,\n+// so the relevant desugar is copied inline in order to keep the test testing the same thing.\n+// FIXME: while this might be useful for `r#try!`, it would be nice to have a MIR optimization\n+// that picks up the `?` desugaring, as `SimplifyArmIdentity` does not.  See #85133\n fn try_identity(x: Result<u32, i32>) -> Result<u32, i32> {\n     let y = match into_result(x) {\n         Err(e) => return from_error(From::from(e)),"}]}