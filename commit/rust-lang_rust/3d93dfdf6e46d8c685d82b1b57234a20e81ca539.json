{"sha": "3d93dfdf6e46d8c685d82b1b57234a20e81ca539", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkOTNkZmRmNmU0NmQ4YzY4NWQ4MmIxYjU3MjM0YTIwZTgxY2E1Mzk=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-12-30T20:56:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-30T20:56:54Z"}, "message": "Rollup merge of #80488 - CAD97:drop-weak-without-reference, r=m-ou-se\n\nDo not create dangling &T in Weak<T>::drop\n\nSince at this point all strong pointers have been dropped, the wrapped `T` has also been dropped. As such, creating a `&T` to the dropped place is negligent at best (language UB at worst). Since we have `Layout::for_value_raw` now, use that instead of `Layout::for_value` to avoid creating the `&T`.\n\nThis does have implications for custom (potentially thin) DSTs, though much less severe than those discussed in #80407. Specifically, one of two things has to be true:\n\n- It has to be possible to use a `*const T` to a dropped (potentially custom, potentially thin) unsized tailed object to determine the layout (size/align) of the object. This is what is currently implemented (though with `&T` instead of `&T`). The validity of reading some location after it has been dropped is an open question IIUC (https://github.com/rust-lang/unsafe-code-guidelines/issues/188) (except when the whole type is `Copy`, per `drop_in_place`'s docs).\n  In this design, custom DSTs would get a `*mut T` and use that to return layout, and must be able to do so while in the \"zombie\" (post-drop, pre-free) state.\n- `RcBox`/`ArcInner` compute and store layout eagerly, so that they don't have to ask the type for its layout after dropping it.\n\nImportantly, this is already true today, as you can construct `Rc<DST>`, create a `Weak<DST>`, and drop the `Rc` before the `Weak`. This PR is a strict improvement over the status quo, and the above question about potentially thin DSTs will need to be resolved by any custom DST proposal.", "tree": {"sha": "bba79c66f00633d88f91671302d86365cac90880", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bba79c66f00633d88f91671302d86365cac90880"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d93dfdf6e46d8c685d82b1b57234a20e81ca539", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf7OmWCRBK7hj4Ov3rIwAAdHIIAAC0k4uXeHs6t27OJ5A+sOk6\nN2pIBh4msuddV8nyqY5qI1+otOrl8NuaWE9G7RsDhttSjMthHONQX/0Kfe3K6Rl4\n79faNFhmexrA1ojnAUGRGHX75PKq2uI38sfSPQ66MtgGM7JfUlykTXS5Njyw/IPI\nAs7Vcj9+rZDtNnnmglF8paEZI174A11qfxGEfzPpEAWoG/+kzcq3hW6zemfZHtWy\ncHB1vN0zk0jRYnA7xk2gcPXqjCr90xBZLHRhXjsQuroiPtEMwZidwRw0Vk20sh2A\ng1vYkBog1UNpSLWSzTkHUE0orYUkqxh7uHWI0sKNbFXiUDrW4o5IYaYxgUB4Eeo=\n=Xh6n\n-----END PGP SIGNATURE-----\n", "payload": "tree bba79c66f00633d88f91671302d86365cac90880\nparent 46111c1901cc94c5233e3d5141cb0fc68063552b\nparent 81685e9ad8f80634f0dfd7c1afcab74ba1c78a59\nauthor Mara Bos <m-ou.se@m-ou.se> 1609361814 +0000\ncommitter GitHub <noreply@github.com> 1609361814 +0000\n\nRollup merge of #80488 - CAD97:drop-weak-without-reference, r=m-ou-se\n\nDo not create dangling &T in Weak<T>::drop\n\nSince at this point all strong pointers have been dropped, the wrapped `T` has also been dropped. As such, creating a `&T` to the dropped place is negligent at best (language UB at worst). Since we have `Layout::for_value_raw` now, use that instead of `Layout::for_value` to avoid creating the `&T`.\n\nThis does have implications for custom (potentially thin) DSTs, though much less severe than those discussed in #80407. Specifically, one of two things has to be true:\n\n- It has to be possible to use a `*const T` to a dropped (potentially custom, potentially thin) unsized tailed object to determine the layout (size/align) of the object. This is what is currently implemented (though with `&T` instead of `&T`). The validity of reading some location after it has been dropped is an open question IIUC (https://github.com/rust-lang/unsafe-code-guidelines/issues/188) (except when the whole type is `Copy`, per `drop_in_place`'s docs).\n  In this design, custom DSTs would get a `*mut T` and use that to return layout, and must be able to do so while in the \"zombie\" (post-drop, pre-free) state.\n- `RcBox`/`ArcInner` compute and store layout eagerly, so that they don't have to ask the type for its layout after dropping it.\n\nImportantly, this is already true today, as you can construct `Rc<DST>`, create a `Weak<DST>`, and drop the `Rc` before the `Weak`. This PR is a strict improvement over the status quo, and the above question about potentially thin DSTs will need to be resolved by any custom DST proposal.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d93dfdf6e46d8c685d82b1b57234a20e81ca539", "html_url": "https://github.com/rust-lang/rust/commit/3d93dfdf6e46d8c685d82b1b57234a20e81ca539", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d93dfdf6e46d8c685d82b1b57234a20e81ca539/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46111c1901cc94c5233e3d5141cb0fc68063552b", "url": "https://api.github.com/repos/rust-lang/rust/commits/46111c1901cc94c5233e3d5141cb0fc68063552b", "html_url": "https://github.com/rust-lang/rust/commit/46111c1901cc94c5233e3d5141cb0fc68063552b"}, {"sha": "81685e9ad8f80634f0dfd7c1afcab74ba1c78a59", "url": "https://api.github.com/repos/rust-lang/rust/commits/81685e9ad8f80634f0dfd7c1afcab74ba1c78a59", "html_url": "https://github.com/rust-lang/rust/commit/81685e9ad8f80634f0dfd7c1afcab74ba1c78a59"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "57df28a15c85aa6dcdd6ecbd305c7b46c5422f61", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d93dfdf6e46d8c685d82b1b57234a20e81ca539/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d93dfdf6e46d8c685d82b1b57234a20e81ca539/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=3d93dfdf6e46d8c685d82b1b57234a20e81ca539", "patch": "@@ -2042,7 +2042,7 @@ impl<T: ?Sized> Drop for Weak<T> {\n         // the strong pointers have disappeared.\n         if inner.weak() == 0 {\n             unsafe {\n-                Global.deallocate(self.ptr.cast(), Layout::for_value(self.ptr.as_ref()));\n+                Global.deallocate(self.ptr.cast(), Layout::for_value_raw(self.ptr.as_ptr()));\n             }\n         }\n     }"}, {"sha": "85c0a9f085729a33b8e12d5c2147086c7a17c9ec", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d93dfdf6e46d8c685d82b1b57234a20e81ca539/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d93dfdf6e46d8c685d82b1b57234a20e81ca539/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=3d93dfdf6e46d8c685d82b1b57234a20e81ca539", "patch": "@@ -1927,7 +1927,7 @@ impl<T: ?Sized> Drop for Weak<T> {\n \n         if inner.weak.fetch_sub(1, Release) == 1 {\n             acquire!(inner.weak);\n-            unsafe { Global.deallocate(self.ptr.cast(), Layout::for_value(self.ptr.as_ref())) }\n+            unsafe { Global.deallocate(self.ptr.cast(), Layout::for_value_raw(self.ptr.as_ptr())) }\n         }\n     }\n }"}]}