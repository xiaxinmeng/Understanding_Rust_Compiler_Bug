{"sha": "9463380b0ceeca6c99d7466f90f1bf9fe4732d8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0NjMzODBiMGNlZWNhNmM5OWQ3NDY2ZjkwZjFiZjlmZTQ3MzJkOGQ=", "commit": {"author": {"name": "Prabakaran Kumaresshan", "email": "4676330+nixphix@users.noreply.github.com", "date": "2020-08-15T13:19:52Z"}, "committer": {"name": "Prabakaran Kumaresshan", "email": "4676330+nixphix@users.noreply.github.com", "date": "2020-08-15T14:09:17Z"}, "message": "Switch to intra-doc links in std/src/sys/vxworks/ext/{fs,process}.rs", "tree": {"sha": "14202190f28ae1d9982516f9342058b20e221779", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14202190f28ae1d9982516f9342058b20e221779"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9463380b0ceeca6c99d7466f90f1bf9fe4732d8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9463380b0ceeca6c99d7466f90f1bf9fe4732d8d", "html_url": "https://github.com/rust-lang/rust/commit/9463380b0ceeca6c99d7466f90f1bf9fe4732d8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9463380b0ceeca6c99d7466f90f1bf9fe4732d8d/comments", "author": {"login": "nixphix", "id": 4676330, "node_id": "MDQ6VXNlcjQ2NzYzMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/4676330?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nixphix", "html_url": "https://github.com/nixphix", "followers_url": "https://api.github.com/users/nixphix/followers", "following_url": "https://api.github.com/users/nixphix/following{/other_user}", "gists_url": "https://api.github.com/users/nixphix/gists{/gist_id}", "starred_url": "https://api.github.com/users/nixphix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nixphix/subscriptions", "organizations_url": "https://api.github.com/users/nixphix/orgs", "repos_url": "https://api.github.com/users/nixphix/repos", "events_url": "https://api.github.com/users/nixphix/events{/privacy}", "received_events_url": "https://api.github.com/users/nixphix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nixphix", "id": 4676330, "node_id": "MDQ6VXNlcjQ2NzYzMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/4676330?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nixphix", "html_url": "https://github.com/nixphix", "followers_url": "https://api.github.com/users/nixphix/followers", "following_url": "https://api.github.com/users/nixphix/following{/other_user}", "gists_url": "https://api.github.com/users/nixphix/gists{/gist_id}", "starred_url": "https://api.github.com/users/nixphix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nixphix/subscriptions", "organizations_url": "https://api.github.com/users/nixphix/orgs", "repos_url": "https://api.github.com/users/nixphix/repos", "events_url": "https://api.github.com/users/nixphix/events{/privacy}", "received_events_url": "https://api.github.com/users/nixphix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5205b974d588a41798a7438b91bf26a6f084e0dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/5205b974d588a41798a7438b91bf26a6f084e0dd", "html_url": "https://github.com/rust-lang/rust/commit/5205b974d588a41798a7438b91bf26a6f084e0dd"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "680862a026897611d214ae19270b9fb1cd52666a", "filename": "library/std/src/sys/vxworks/ext/fs.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9463380b0ceeca6c99d7466f90f1bf9fe4732d8d/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9463380b0ceeca6c99d7466f90f1bf9fe4732d8d/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fext%2Ffs.rs?ref=9463380b0ceeca6c99d7466f90f1bf9fe4732d8d", "patch": "@@ -9,7 +9,7 @@ use crate::sys_common::{AsInner, AsInnerMut, FromInner};\n \n /// Unix-specific extensions to [`File`].\n ///\n-/// [`File`]: ../../../../std/fs/struct.File.html\n+/// [`File`]: crate::fs::File\n #[stable(feature = \"file_offset\", since = \"1.15.0\")]\n pub trait FileExt {\n     /// Reads a number of bytes starting from a given offset.\n@@ -24,7 +24,7 @@ pub trait FileExt {\n     /// Note that similar to [`File::read`], it is not an error to return with a\n     /// short read.\n     ///\n-    /// [`File::read`]: ../../../../std/fs/struct.File.html#method.read\n+    /// [`File::read`]: crate::fs::File::read\n     ///\n     /// # Examples\n     ///\n@@ -55,8 +55,8 @@ pub trait FileExt {\n     ///\n     /// Similar to [`Read::read_exact`] but uses [`read_at`] instead of `read`.\n     ///\n-    /// [`Read::read_exact`]: ../../../../std/io/trait.Read.html#method.read_exact\n-    /// [`read_at`]: #tymethod.read_at\n+    /// [`Read::read_exact`]: crate::io::Read::read_exact\n+    /// [`read_at`]: FileExt::read_at\n     ///\n     /// # Errors\n     ///\n@@ -75,8 +75,8 @@ pub trait FileExt {\n     /// has read, but it will never read more than would be necessary to\n     /// completely fill the buffer.\n     ///\n-    /// [`ErrorKind::Interrupted`]: ../../../../std/io/enum.ErrorKind.html#variant.Interrupted\n-    /// [`ErrorKind::UnexpectedEof`]: ../../../../std/io/enum.ErrorKind.html#variant.UnexpectedEof\n+    /// [`ErrorKind::Interrupted`]: crate::io::ErrorKind::Interrupted\n+    /// [`ErrorKind::UnexpectedEof`]: crate::io::ErrorKind::UnexpectedEof\n     ///\n     /// # Examples\n     ///\n@@ -132,7 +132,7 @@ pub trait FileExt {\n     /// Note that similar to [`File::write`], it is not an error to return a\n     /// short write.\n     ///\n-    /// [`File::write`]: ../../../../std/fs/struct.File.html#method.write\n+    /// [`File::write`]: crate::fs::File::write\n     ///\n     /// # Examples\n     ///\n@@ -171,8 +171,8 @@ pub trait FileExt {\n     /// This function will return the first error of\n     /// non-[`ErrorKind::Interrupted`] kind that [`write_at`] returns.\n     ///\n-    /// [`ErrorKind::Interrupted`]: ../../../../std/io/enum.ErrorKind.html#variant.Interrupted\n-    /// [`write_at`]: #tymethod.write_at\n+    /// [`ErrorKind::Interrupted`]: crate::io::ErrorKind::Interrupted\n+    /// [`write_at`]: FileExt::write_at\n     ///\n     /// # Examples\n     ///\n@@ -224,7 +224,7 @@ impl FileExt for fs::File {\n \n /// Unix-specific extensions to [`fs::Permissions`].\n ///\n-/// [`fs::Permissions`]: ../../../../std/fs/struct.Permissions.html\n+/// [`fs::Permissions`]: crate::fs::Permissions\n #[stable(feature = \"fs_ext\", since = \"1.1.0\")]\n pub trait PermissionsExt {\n     /// Returns the underlying raw `st_mode` bits that contain the standard\n@@ -301,7 +301,7 @@ impl PermissionsExt for Permissions {\n \n /// Unix-specific extensions to [`fs::OpenOptions`].\n ///\n-/// [`fs::OpenOptions`]: ../../../../std/fs/struct.OpenOptions.html\n+/// [`fs::OpenOptions`]: crate::fs::OpenOptions\n #[stable(feature = \"fs_ext\", since = \"1.1.0\")]\n pub trait OpenOptionsExt {\n     /// Sets the mode bits that a new file will be created with.\n@@ -370,7 +370,7 @@ impl OpenOptionsExt for OpenOptions {\n \n /// Unix-specific extensions to [`fs::Metadata`].\n ///\n-/// [`fs::Metadata`]: ../../../../std/fs/struct.Metadata.html\n+/// [`fs::Metadata`]: crate::fs::Metadata\n #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n pub trait MetadataExt {\n     /// Returns the ID of the device containing the file.\n@@ -655,7 +655,7 @@ impl MetadataExt for fs::Metadata {\n /// Adds support for special Unix file types such as block/character devices,\n /// pipes, and sockets.\n ///\n-/// [`FileType`]: ../../../../std/fs/struct.FileType.html\n+/// [`FileType`]: crate::fs::FileType\n #[stable(feature = \"file_type_ext\", since = \"1.5.0\")]\n pub trait FileTypeExt {\n     /// Returns whether this file type is a block device.\n@@ -750,7 +750,7 @@ impl FileTypeExt for fs::FileType {\n \n /// Unix-specific extension methods for [`fs::DirEntry`].\n ///\n-/// [`fs::DirEntry`]: ../../../../std/fs/struct.DirEntry.html\n+/// [`fs::DirEntry`]: crate::fs::DirEntry\n #[stable(feature = \"dir_entry_ext\", since = \"1.1.0\")]\n pub trait DirEntryExt {\n     /// Returns the underlying `d_ino` field in the contained `dirent`\n@@ -812,7 +812,7 @@ pub fn symlink<P: AsRef<Path>, Q: AsRef<Path>>(src: P, dst: Q) -> io::Result<()>\n \n /// Unix-specific extensions to [`fs::DirBuilder`].\n ///\n-/// [`fs::DirBuilder`]: ../../../../std/fs/struct.DirBuilder.html\n+/// [`fs::DirBuilder`]: crate::fs::DirBuilder\n #[stable(feature = \"dir_builder\", since = \"1.6.0\")]\n pub trait DirBuilderExt {\n     /// Sets the mode to create new directories with. This option defaults to"}, {"sha": "3b2266e946548156433cd9bb6476871694fd4ed9", "filename": "library/std/src/sys/vxworks/ext/process.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9463380b0ceeca6c99d7466f90f1bf9fe4732d8d/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9463380b0ceeca6c99d7466f90f1bf9fe4732d8d/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fext%2Fprocess.rs?ref=9463380b0ceeca6c99d7466f90f1bf9fe4732d8d", "patch": "@@ -11,7 +11,7 @@ use crate::sys_common::{AsInner, AsInnerMut, FromInner, IntoInner};\n \n /// Unix-specific extensions to the [`process::Command`] builder.\n ///\n-/// [`process::Command`]: ../../../../std/process/struct.Command.html\n+/// [`process::Command`]: crate::process::Command\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait CommandExt {\n     /// Sets the child process's user ID. This translates to a\n@@ -65,7 +65,7 @@ pub trait CommandExt {\n     /// This method is stable and usable, but it should be unsafe. To fix\n     /// that, it got deprecated in favor of the unsafe [`pre_exec`].\n     ///\n-    /// [`pre_exec`]: #tymethod.pre_exec\n+    /// [`pre_exec`]: CommandExt::pre_exec\n     #[stable(feature = \"process_exec\", since = \"1.15.0\")]\n     #[rustc_deprecated(since = \"1.37.0\", reason = \"should be unsafe, use `pre_exec` instead\")]\n     fn before_exec<F>(&mut self, f: F) -> &mut process::Command\n@@ -94,7 +94,7 @@ pub trait CommandExt {\n     /// a new child. Like spawn, however, the default behavior for the stdio\n     /// descriptors will be to inherited from the current process.\n     ///\n-    /// [`process::exit`]: ../../../process/fn.exit.html\n+    /// [`process::exit`]: crate::process::exit\n     ///\n     /// # Notes\n     ///\n@@ -152,7 +152,7 @@ impl CommandExt for process::Command {\n \n /// Unix-specific extensions to [`process::ExitStatus`].\n ///\n-/// [`process::ExitStatus`]: ../../../../std/process/struct.ExitStatus.html\n+/// [`process::ExitStatus`]: crate::process::ExitStatus\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait ExitStatusExt {\n     /// Creates a new `ExitStatus` from the raw underlying `i32` return value of"}]}