{"sha": "f53fc21ba0e99c6e7c715db7c2c618a7954620f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1M2ZjMjFiYTBlOTljNmU3YzcxNWRiN2MyYzYxOGE3OTU0NjIwZjM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-31T23:47:06Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-08-01T22:59:01Z"}, "message": "libserialize: Unconfigure tests during normal build", "tree": {"sha": "0b81c76a79044aa58cb8e293a31efbdabe3922bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b81c76a79044aa58cb8e293a31efbdabe3922bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f53fc21ba0e99c6e7c715db7c2c618a7954620f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f53fc21ba0e99c6e7c715db7c2c618a7954620f3", "html_url": "https://github.com/rust-lang/rust/commit/f53fc21ba0e99c6e7c715db7c2c618a7954620f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f53fc21ba0e99c6e7c715db7c2c618a7954620f3/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e839ffe6ab45505124aaa1327068f6a09295597d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e839ffe6ab45505124aaa1327068f6a09295597d", "html_url": "https://github.com/rust-lang/rust/commit/e839ffe6ab45505124aaa1327068f6a09295597d"}], "stats": {"total": 91, "additions": 46, "deletions": 45}, "files": [{"sha": "88ce6d81d75784c5829c48ab7e11eb63704e28a0", "filename": "src/libserialize/leb128.rs", "status": "modified", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/f53fc21ba0e99c6e7c715db7c2c618a7954620f3/src%2Flibserialize%2Fleb128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f53fc21ba0e99c6e7c715db7c2c618a7954620f3/src%2Flibserialize%2Fleb128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fleb128.rs?ref=f53fc21ba0e99c6e7c715db7c2c618a7954620f3", "patch": "@@ -138,47 +138,3 @@ pub fn read_signed_leb128(data: &[u8], start_position: usize) -> (i128, usize) {\n \n     (result, position - start_position)\n }\n-\n-macro_rules! impl_test_unsigned_leb128 {\n-    ($test_name:ident, $write_fn_name:ident, $read_fn_name:ident, $int_ty:ident) => (\n-        #[test]\n-        fn $test_name() {\n-            let mut stream = Vec::new();\n-\n-            for x in 0..62 {\n-                $write_fn_name(&mut stream, (3u64 << x) as $int_ty);\n-            }\n-\n-            let mut position = 0;\n-            for x in 0..62 {\n-                let expected = (3u64 << x) as $int_ty;\n-                let (actual, bytes_read) = $read_fn_name(&stream[position ..]);\n-                assert_eq!(expected, actual);\n-                position += bytes_read;\n-            }\n-            assert_eq!(stream.len(), position);\n-        }\n-    )\n-}\n-\n-impl_test_unsigned_leb128!(test_u16_leb128, write_u16_leb128, read_u16_leb128, u16);\n-impl_test_unsigned_leb128!(test_u32_leb128, write_u32_leb128, read_u32_leb128, u32);\n-impl_test_unsigned_leb128!(test_u64_leb128, write_u64_leb128, read_u64_leb128, u64);\n-impl_test_unsigned_leb128!(test_u128_leb128, write_u128_leb128, read_u128_leb128, u128);\n-impl_test_unsigned_leb128!(test_usize_leb128, write_usize_leb128, read_usize_leb128, usize);\n-\n-#[test]\n-fn test_signed_leb128() {\n-    let values: Vec<_> = (-500..500).map(|i| i * 0x12345789ABCDEF).collect();\n-    let mut stream = Vec::new();\n-    for &x in &values {\n-        write_signed_leb128(&mut stream, x);\n-    }\n-    let mut pos = 0;\n-    for &x in &values {\n-        let (value, bytes_read) = read_signed_leb128(&mut stream, pos);\n-        pos += bytes_read;\n-        assert_eq!(x, value);\n-    }\n-    assert_eq!(pos, stream.len());\n-}"}, {"sha": "4eb4397fecc39f4892fb90b8741d52e9ff05c714", "filename": "src/libserialize/tests/leb128.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/f53fc21ba0e99c6e7c715db7c2c618a7954620f3/src%2Flibserialize%2Ftests%2Fleb128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f53fc21ba0e99c6e7c715db7c2c618a7954620f3/src%2Flibserialize%2Ftests%2Fleb128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Ftests%2Fleb128.rs?ref=f53fc21ba0e99c6e7c715db7c2c618a7954620f3", "patch": "@@ -0,0 +1,46 @@\n+extern crate serialize as rustc_serialize;\n+use rustc_serialize::leb128::*;\n+\n+macro_rules! impl_test_unsigned_leb128 {\n+    ($test_name:ident, $write_fn_name:ident, $read_fn_name:ident, $int_ty:ident) => (\n+        #[test]\n+        fn $test_name() {\n+            let mut stream = Vec::new();\n+\n+            for x in 0..62 {\n+                $write_fn_name(&mut stream, (3u64 << x) as $int_ty);\n+            }\n+\n+            let mut position = 0;\n+            for x in 0..62 {\n+                let expected = (3u64 << x) as $int_ty;\n+                let (actual, bytes_read) = $read_fn_name(&stream[position ..]);\n+                assert_eq!(expected, actual);\n+                position += bytes_read;\n+            }\n+            assert_eq!(stream.len(), position);\n+        }\n+    )\n+}\n+\n+impl_test_unsigned_leb128!(test_u16_leb128, write_u16_leb128, read_u16_leb128, u16);\n+impl_test_unsigned_leb128!(test_u32_leb128, write_u32_leb128, read_u32_leb128, u32);\n+impl_test_unsigned_leb128!(test_u64_leb128, write_u64_leb128, read_u64_leb128, u64);\n+impl_test_unsigned_leb128!(test_u128_leb128, write_u128_leb128, read_u128_leb128, u128);\n+impl_test_unsigned_leb128!(test_usize_leb128, write_usize_leb128, read_usize_leb128, usize);\n+\n+#[test]\n+fn test_signed_leb128() {\n+    let values: Vec<_> = (-500..500).map(|i| i * 0x12345789ABCDEF).collect();\n+    let mut stream = Vec::new();\n+    for &x in &values {\n+        write_signed_leb128(&mut stream, x);\n+    }\n+    let mut pos = 0;\n+    for &x in &values {\n+        let (value, bytes_read) = read_signed_leb128(&mut stream, pos);\n+        pos += bytes_read;\n+        assert_eq!(x, value);\n+    }\n+    assert_eq!(pos, stream.len());\n+}"}, {"sha": "14d5f08c16b3a480fc8d6fd1fc8f81f8217d3ba8", "filename": "src/tools/tidy/src/unit_tests.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f53fc21ba0e99c6e7c715db7c2c618a7954620f3/src%2Ftools%2Ftidy%2Fsrc%2Funit_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f53fc21ba0e99c6e7c715db7c2c618a7954620f3/src%2Ftools%2Ftidy%2Fsrc%2Funit_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Funit_tests.rs?ref=f53fc21ba0e99c6e7c715db7c2c618a7954620f3", "patch": "@@ -34,7 +34,6 @@ pub fn check(root_path: &Path, bad: &mut bool) {\n         \"librustc_lexer/src\",\n         \"librustc_target/spec\",\n         \"librustdoc\",\n-        \"libserialize\",\n         \"libstd\",\n         \"libsyntax\",\n         \"libsyntax_pos\","}]}