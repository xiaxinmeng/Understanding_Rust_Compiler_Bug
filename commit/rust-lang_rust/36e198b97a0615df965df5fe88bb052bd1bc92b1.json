{"sha": "36e198b97a0615df965df5fe88bb052bd1bc92b1", "node_id": "C_kwDOAAsO6NoAKDM2ZTE5OGI5N2EwNjE1ZGY5NjVkZjVmZTg4YmIwNTJiZDFiYzkyYjE", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-09-13T00:48:26Z"}, "committer": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2021-11-13T21:22:06Z"}, "message": "Use new bitmask intrinsics with byte arrays", "tree": {"sha": "48469fbd34875cd5542303a14b957cec4f84a1f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48469fbd34875cd5542303a14b957cec4f84a1f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36e198b97a0615df965df5fe88bb052bd1bc92b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36e198b97a0615df965df5fe88bb052bd1bc92b1", "html_url": "https://github.com/rust-lang/rust/commit/36e198b97a0615df965df5fe88bb052bd1bc92b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36e198b97a0615df965df5fe88bb052bd1bc92b1/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ce1c645cf27c4acdefe6ec8a11d1f0491954a99", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ce1c645cf27c4acdefe6ec8a11d1f0491954a99", "html_url": "https://github.com/rust-lang/rust/commit/1ce1c645cf27c4acdefe6ec8a11d1f0491954a99"}], "stats": {"total": 48, "additions": 9, "deletions": 39}, "files": [{"sha": "4a5dc80049a9e2cd73b9b78cbd2bab9e4fc14be3", "filename": "crates/core_simd/src/lane_count.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/36e198b97a0615df965df5fe88bb052bd1bc92b1/crates%2Fcore_simd%2Fsrc%2Flane_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e198b97a0615df965df5fe88bb052bd1bc92b1/crates%2Fcore_simd%2Fsrc%2Flane_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Flane_count.rs?ref=36e198b97a0615df965df5fe88bb052bd1bc92b1", "patch": "@@ -15,34 +15,25 @@ impl<const LANES: usize> LaneCount<LANES> {\n pub trait SupportedLaneCount: Sealed {\n     #[doc(hidden)]\n     type BitMask: Copy + Default + AsRef<[u8]> + AsMut<[u8]>;\n-\n-    #[doc(hidden)]\n-    type IntBitMask;\n }\n \n impl<const LANES: usize> Sealed for LaneCount<LANES> {}\n \n impl SupportedLaneCount for LaneCount<1> {\n     type BitMask = [u8; 1];\n-    type IntBitMask = u8;\n }\n impl SupportedLaneCount for LaneCount<2> {\n     type BitMask = [u8; 1];\n-    type IntBitMask = u8;\n }\n impl SupportedLaneCount for LaneCount<4> {\n     type BitMask = [u8; 1];\n-    type IntBitMask = u8;\n }\n impl SupportedLaneCount for LaneCount<8> {\n     type BitMask = [u8; 1];\n-    type IntBitMask = u8;\n }\n impl SupportedLaneCount for LaneCount<16> {\n     type BitMask = [u8; 2];\n-    type IntBitMask = u16;\n }\n impl SupportedLaneCount for LaneCount<32> {\n     type BitMask = [u8; 4];\n-    type IntBitMask = u32;\n }"}, {"sha": "45990e9ce5f97e6caf6e4fe7c3df54ffac5200ba", "filename": "crates/core_simd/src/masks/bitmask.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/36e198b97a0615df965df5fe88bb052bd1bc92b1/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fbitmask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e198b97a0615df965df5fe88bb052bd1bc92b1/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fbitmask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fbitmask.rs?ref=36e198b97a0615df965df5fe88bb052bd1bc92b1", "patch": "@@ -1,3 +1,4 @@\n+#![allow(unused_imports)]\n use super::MaskElement;\n use crate::simd::intrinsics;\n use crate::simd::{LaneCount, Simd, SupportedLaneCount};\n@@ -101,24 +102,17 @@ where\n     #[inline]\n     pub fn to_int(self) -> Simd<T, LANES> {\n         unsafe {\n-            let mask: <LaneCount<LANES> as SupportedLaneCount>::IntBitMask =\n-                core::mem::transmute_copy(&self);\n-            intrinsics::simd_select_bitmask(mask, Simd::splat(T::TRUE), Simd::splat(T::FALSE))\n+            crate::intrinsics::simd_select_bitmask(\n+                self.0,\n+                Simd::splat(T::TRUE),\n+                Simd::splat(T::FALSE),\n+            )\n         }\n     }\n \n     #[inline]\n     pub unsafe fn from_int_unchecked(value: Simd<T, LANES>) -> Self {\n-        // TODO remove the transmute when rustc is more flexible\n-        assert_eq!(\n-            core::mem::size_of::<<LaneCount::<LANES> as SupportedLaneCount>::BitMask>(),\n-            core::mem::size_of::<<LaneCount::<LANES> as SupportedLaneCount>::IntBitMask>(),\n-        );\n-        unsafe {\n-            let mask: <LaneCount<LANES> as SupportedLaneCount>::IntBitMask =\n-                intrinsics::simd_bitmask(value);\n-            Self(core::mem::transmute_copy(&mask), PhantomData)\n-        }\n+        unsafe { Self(crate::intrinsics::simd_bitmask(value), PhantomData) }\n     }\n \n     #[cfg(feature = \"generic_const_exprs\")]"}, {"sha": "0f1edf9d2f5eb4c96d5a64936bf9c08ce1443cef", "filename": "crates/core_simd/src/masks/full_masks.rs", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/36e198b97a0615df965df5fe88bb052bd1bc92b1/crates%2Fcore_simd%2Fsrc%2Fmasks%2Ffull_masks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e198b97a0615df965df5fe88bb052bd1bc92b1/crates%2Fcore_simd%2Fsrc%2Fmasks%2Ffull_masks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks%2Ffull_masks.rs?ref=36e198b97a0615df965df5fe88bb052bd1bc92b1", "patch": "@@ -106,15 +106,8 @@ where\n     #[inline]\n     pub fn to_bitmask(self) -> [u8; LaneCount::<LANES>::BITMASK_LEN] {\n         unsafe {\n-            // TODO remove the transmute when rustc can use arrays of u8 as bitmasks\n-            assert_eq!(\n-                core::mem::size_of::<<LaneCount::<LANES> as SupportedLaneCount>::IntBitMask>(),\n-                LaneCount::<LANES>::BITMASK_LEN,\n-            );\n-            let bitmask: <LaneCount<LANES> as SupportedLaneCount>::IntBitMask =\n-                intrinsics::simd_bitmask(self.0);\n             let mut bitmask: [u8; LaneCount::<LANES>::BITMASK_LEN] =\n-                core::mem::transmute_copy(&bitmask);\n+                crate::intrinsics::simd_bitmask(self.0);\n \n             // There is a bug where LLVM appears to implement this operation with the wrong\n             // bit order.\n@@ -142,15 +135,7 @@ where\n                 }\n             }\n \n-            // TODO remove the transmute when rustc can use arrays of u8 as bitmasks\n-            assert_eq!(\n-                core::mem::size_of::<<LaneCount::<LANES> as SupportedLaneCount>::IntBitMask>(),\n-                LaneCount::<LANES>::BITMASK_LEN,\n-            );\n-            let bitmask: <LaneCount<LANES> as SupportedLaneCount>::IntBitMask =\n-                core::mem::transmute_copy(&bitmask);\n-\n-            Self::from_int_unchecked(intrinsics::simd_select_bitmask(\n+            Self::from_int_unchecked(crate::intrinsics::simd_select_bitmask(\n                 bitmask,\n                 Self::splat(true).to_int(),\n                 Self::splat(false).to_int(),"}]}