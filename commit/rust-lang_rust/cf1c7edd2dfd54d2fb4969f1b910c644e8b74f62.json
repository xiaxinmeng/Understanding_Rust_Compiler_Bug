{"sha": "cf1c7edd2dfd54d2fb4969f1b910c644e8b74f62", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmMWM3ZWRkMmRmZDU0ZDJmYjQ5NjlmMWI5MTBjNjQ0ZThiNzRmNjI=", "commit": {"author": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2020-04-06T20:44:51Z"}, "committer": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2020-04-06T20:44:51Z"}, "message": "Use assoc float consts in libcore", "tree": {"sha": "ec226b044edd578c5900f5e716f893ddb8a2e6d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec226b044edd578c5900f5e716f893ddb8a2e6d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf1c7edd2dfd54d2fb4969f1b910c644e8b74f62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf1c7edd2dfd54d2fb4969f1b910c644e8b74f62", "html_url": "https://github.com/rust-lang/rust/commit/cf1c7edd2dfd54d2fb4969f1b910c644e8b74f62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf1c7edd2dfd54d2fb4969f1b910c644e8b74f62/comments", "author": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "committer": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65e10e343608e2e42b93ec17eae01babfb1e3b8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/65e10e343608e2e42b93ec17eae01babfb1e3b8b", "html_url": "https://github.com/rust-lang/rust/commit/65e10e343608e2e42b93ec17eae01babfb1e3b8b"}], "stats": {"total": 46, "additions": 18, "deletions": 28}, "files": [{"sha": "305baa68729eb2a2fb512cac2a98b6bc7b33dd4b", "filename": "src/libcore/benches/num/dec2flt/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cf1c7edd2dfd54d2fb4969f1b910c644e8b74f62/src%2Flibcore%2Fbenches%2Fnum%2Fdec2flt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf1c7edd2dfd54d2fb4969f1b910c644e8b74f62/src%2Flibcore%2Fbenches%2Fnum%2Fdec2flt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Fnum%2Fdec2flt%2Fmod.rs?ref=cf1c7edd2dfd54d2fb4969f1b910c644e8b74f62", "patch": "@@ -1,4 +1,3 @@\n-use std::f64;\n use test::Bencher;\n \n #[bench]"}, {"sha": "a1ce33d0bb49ef90f8f065874273e4cda9f39a3e", "filename": "src/libcore/benches/num/flt2dec/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cf1c7edd2dfd54d2fb4969f1b910c644e8b74f62/src%2Flibcore%2Fbenches%2Fnum%2Fflt2dec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf1c7edd2dfd54d2fb4969f1b910c644e8b74f62/src%2Flibcore%2Fbenches%2Fnum%2Fflt2dec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Fnum%2Fflt2dec%2Fmod.rs?ref=cf1c7edd2dfd54d2fb4969f1b910c644e8b74f62", "patch": "@@ -5,7 +5,6 @@ mod strategy {\n \n use core::num::flt2dec::MAX_SIG_DIGITS;\n use core::num::flt2dec::{decode, DecodableFloat, Decoded, FullDecoded};\n-use std::f64;\n use std::io::Write;\n use std::vec::Vec;\n use test::Bencher;"}, {"sha": "1a1dbcd7b871aaab2e22a1c847a521fd097b0dd2", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cf1c7edd2dfd54d2fb4969f1b910c644e8b74f62/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf1c7edd2dfd54d2fb4969f1b910c644e8b74f62/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=cf1c7edd2dfd54d2fb4969f1b910c644e8b74f62", "patch": "@@ -76,7 +76,6 @@ fn test_cmp_by() {\n #[test]\n fn test_partial_cmp_by() {\n     use core::cmp::Ordering;\n-    use core::f64;\n \n     let f = |x: i32, y: i32| (x * x).partial_cmp(&y);\n     let xs = || [1, 2, 3, 4].iter().copied();\n@@ -2894,7 +2893,7 @@ fn test_is_sorted() {\n     assert!(![1, 3, 2].iter().is_sorted());\n     assert!([0].iter().is_sorted());\n     assert!(std::iter::empty::<i32>().is_sorted());\n-    assert!(![0.0, 1.0, std::f32::NAN].iter().is_sorted());\n+    assert!(![0.0, 1.0, f32::NAN].iter().is_sorted());\n     assert!([-2, -1, 0, 3].iter().is_sorted());\n     assert!(![-2i32, -1, 0, 3].iter().is_sorted_by_key(|n| n.abs()));\n     assert!(![\"c\", \"bb\", \"aaa\"].iter().is_sorted());"}, {"sha": "c098b9c2ba27ddf1618fe74d97f1b8913e12ef62", "filename": "src/libcore/tests/num/dec2flt/rawfp.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf1c7edd2dfd54d2fb4969f1b910c644e8b74f62/src%2Flibcore%2Ftests%2Fnum%2Fdec2flt%2Frawfp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf1c7edd2dfd54d2fb4969f1b910c644e8b74f62/src%2Flibcore%2Ftests%2Fnum%2Fdec2flt%2Frawfp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fdec2flt%2Frawfp.rs?ref=cf1c7edd2dfd54d2fb4969f1b910c644e8b74f62", "patch": "@@ -1,8 +1,6 @@\n use core::num::dec2flt::rawfp::RawFloat;\n use core::num::dec2flt::rawfp::{fp_to_float, next_float, prev_float, round_normal};\n use core::num::diy_float::Fp;\n-use std::f32;\n-use std::f64;\n \n fn integer_decode(f: f64) -> (u64, i16, i8) {\n     RawFloat::integer_decode(f)"}, {"sha": "181bbb8e18784c3515d03f2d6b58d576a222c400", "filename": "src/libcore/tests/num/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cf1c7edd2dfd54d2fb4969f1b910c644e8b74f62/src%2Flibcore%2Ftests%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf1c7edd2dfd54d2fb4969f1b910c644e8b74f62/src%2Flibcore%2Ftests%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fmod.rs?ref=cf1c7edd2dfd54d2fb4969f1b910c644e8b74f62", "patch": "@@ -205,8 +205,6 @@ test_impl_from! { test_u32f64, u32, f64 }\n // Float -> Float\n #[test]\n fn test_f32f64() {\n-    use core::f32;\n-\n     let max: f64 = f32::MAX.into();\n     assert_eq!(max as f32, f32::MAX);\n     assert!(max.is_normal());\n@@ -704,5 +702,5 @@ macro_rules! test_float {\n     };\n }\n \n-test_float!(f32, f32, ::core::f32::INFINITY, ::core::f32::NEG_INFINITY, ::core::f32::NAN);\n-test_float!(f64, f64, ::core::f64::INFINITY, ::core::f64::NEG_INFINITY, ::core::f64::NAN);\n+test_float!(f32, f32, f32::INFINITY, f32::NEG_INFINITY, f32::NAN);\n+test_float!(f64, f64, f64::INFINITY, f64::NEG_INFINITY, f64::NAN);"}, {"sha": "3c83f0f2300038ca4a4ddf5a1204f256e63193af", "filename": "src/libcore/tests/ops.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cf1c7edd2dfd54d2fb4969f1b910c644e8b74f62/src%2Flibcore%2Ftests%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf1c7edd2dfd54d2fb4969f1b910c644e8b74f62/src%2Flibcore%2Ftests%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fops.rs?ref=cf1c7edd2dfd54d2fb4969f1b910c644e8b74f62", "patch": "@@ -61,25 +61,23 @@ fn test_range_inclusive() {\n \n #[test]\n fn test_range_is_empty() {\n-    use core::f32::*;\n-\n     assert!(!(0.0..10.0).is_empty());\n     assert!((-0.0..0.0).is_empty());\n     assert!((10.0..0.0).is_empty());\n \n-    assert!(!(NEG_INFINITY..INFINITY).is_empty());\n-    assert!((EPSILON..NAN).is_empty());\n-    assert!((NAN..EPSILON).is_empty());\n-    assert!((NAN..NAN).is_empty());\n+    assert!(!(f32::NEG_INFINITY..f32::INFINITY).is_empty());\n+    assert!((f32::EPSILON..f32::NAN).is_empty());\n+    assert!((f32::NAN..f32::EPSILON).is_empty());\n+    assert!((f32::NAN..f32::NAN).is_empty());\n \n     assert!(!(0.0..=10.0).is_empty());\n     assert!(!(-0.0..=0.0).is_empty());\n     assert!((10.0..=0.0).is_empty());\n \n-    assert!(!(NEG_INFINITY..=INFINITY).is_empty());\n-    assert!((EPSILON..=NAN).is_empty());\n-    assert!((NAN..=EPSILON).is_empty());\n-    assert!((NAN..=NAN).is_empty());\n+    assert!(!(f32::NEG_INFINITY..=f32::INFINITY).is_empty());\n+    assert!((f32::EPSILON..=f32::NAN).is_empty());\n+    assert!((f32::NAN..=f32::EPSILON).is_empty());\n+    assert!((f32::NAN..=f32::NAN).is_empty());\n }\n \n #[test]"}, {"sha": "ee8931bf2e7f1c4b97f4aede3fa648dd2348fa2b", "filename": "src/libcore/tests/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf1c7edd2dfd54d2fb4969f1b910c644e8b74f62/src%2Flibcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf1c7edd2dfd54d2fb4969f1b910c644e8b74f62/src%2Flibcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fslice.rs?ref=cf1c7edd2dfd54d2fb4969f1b910c644e8b74f62", "patch": "@@ -1709,7 +1709,7 @@ fn test_is_sorted() {\n     assert!(![1, 3, 2].is_sorted());\n     assert!([0].is_sorted());\n     assert!(empty.is_sorted());\n-    assert!(![0.0, 1.0, std::f32::NAN].is_sorted());\n+    assert!(![0.0, 1.0, f32::NAN].is_sorted());\n     assert!([-2, -1, 0, 3].is_sorted());\n     assert!(![-2i32, -1, 0, 3].is_sorted_by_key(|n| n.abs()));\n     assert!(![\"c\", \"bb\", \"aaa\"].is_sorted());"}, {"sha": "ea1e281425c8904b02c1266809e769e289678f54", "filename": "src/libcore/tests/tuple.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cf1c7edd2dfd54d2fb4969f1b910c644e8b74f62/src%2Flibcore%2Ftests%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf1c7edd2dfd54d2fb4969f1b910c644e8b74f62/src%2Flibcore%2Ftests%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Ftuple.rs?ref=cf1c7edd2dfd54d2fb4969f1b910c644e8b74f62", "patch": "@@ -1,5 +1,4 @@\n use std::cmp::Ordering::{Equal, Greater, Less};\n-use std::f64::NAN;\n \n #[test]\n fn test_clone() {\n@@ -34,12 +33,12 @@ fn test_partial_ord() {\n     assert!(big >= small);\n     assert!(big >= big);\n \n-    assert!(!((1.0f64, 2.0f64) < (NAN, 3.0)));\n-    assert!(!((1.0f64, 2.0f64) <= (NAN, 3.0)));\n-    assert!(!((1.0f64, 2.0f64) > (NAN, 3.0)));\n-    assert!(!((1.0f64, 2.0f64) >= (NAN, 3.0)));\n-    assert!(((1.0f64, 2.0f64) < (2.0, NAN)));\n-    assert!(!((2.0f64, 2.0f64) < (2.0, NAN)));\n+    assert!(!((1.0f64, 2.0f64) < (f64::NAN, 3.0)));\n+    assert!(!((1.0f64, 2.0f64) <= (f64::NAN, 3.0)));\n+    assert!(!((1.0f64, 2.0f64) > (f64::NAN, 3.0)));\n+    assert!(!((1.0f64, 2.0f64) >= (f64::NAN, 3.0)));\n+    assert!(((1.0f64, 2.0f64) < (2.0, f64::NAN)));\n+    assert!(!((2.0f64, 2.0f64) < (2.0, f64::NAN)));\n }\n \n #[test]"}]}