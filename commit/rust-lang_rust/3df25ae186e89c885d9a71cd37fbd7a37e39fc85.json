{"sha": "3df25ae186e89c885d9a71cd37fbd7a37e39fc85", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkZjI1YWUxODZlODljODg1ZDlhNzFjZDM3ZmJkN2EzN2UzOWZjODU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-12T16:30:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-12T16:30:46Z"}, "message": "Auto merge of #75019 - nanpuyue:to_ipv4_mapped, r=LukasKalbertodt\n\nAdd Ipv6Addr::to_ipv4_mapped\n\n* add Ipv6Addr::to_ipv4_mapped\n* ~~deprecate Ipv4Addr::to_ipv6_compatible & Ipv6Addr::to_ipv4~~ reference: #75150\n\nAccording to [IETF RFC 4291](https://tools.ietf.org/html/rfc4291#page-10), the \"IPv4-Compatible IPv6 address\" is deprecated.\n\n> 2.5.5.1.  IPv4-Compatible IPv6 Address\n>\n>    The \"IPv4-Compatible IPv6 address\" was defined to assist in the IPv6\n>    transition.  The format of the \"IPv4-Compatible IPv6 address\" is as\n>    follows:\n>\n>    |                80 bits               | 16 |      32 bits        |\n>    +--------------------------------------+--------------------------+\n>    |0000..............................0000|0000|    IPv4 address     |\n>    +--------------------------------------+----+---------------------+\n>\n>    Note: The IPv4 address used in the \"IPv4-Compatible IPv6 address\"\n>    must be a globally-unique IPv4 unicast address.\n>\n>    The \"IPv4-Compatible IPv6 address\" is now deprecated because the\n>    current IPv6 transition mechanisms no longer use these addresses.\n>    New or updated implementations are not required to support this\n>    address type.\n\nAnd the current implementation of `Ipv4Addr::to_ipv6_compatible`is incorrect: it does not check whether the IPv4 address is a globally-unique IPv4 unicast address.\n\nPlease let me know if there are any issues with this pull request.", "tree": {"sha": "9b52046f5e87a28f9c4da32fc80810cfe041eff0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b52046f5e87a28f9c4da32fc80810cfe041eff0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3df25ae186e89c885d9a71cd37fbd7a37e39fc85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3df25ae186e89c885d9a71cd37fbd7a37e39fc85", "html_url": "https://github.com/rust-lang/rust/commit/3df25ae186e89c885d9a71cd37fbd7a37e39fc85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3df25ae186e89c885d9a71cd37fbd7a37e39fc85/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ded20c98be8585b2a9fe4eeadd1be5524f6ffb17", "url": "https://api.github.com/repos/rust-lang/rust/commits/ded20c98be8585b2a9fe4eeadd1be5524f6ffb17", "html_url": "https://github.com/rust-lang/rust/commit/ded20c98be8585b2a9fe4eeadd1be5524f6ffb17"}, {"sha": "d892a07c67dfa4f347b62ecf96de184c41dae5dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/d892a07c67dfa4f347b62ecf96de184c41dae5dd", "html_url": "https://github.com/rust-lang/rust/commit/d892a07c67dfa4f347b62ecf96de184c41dae5dd"}], "stats": {"total": 40, "additions": 40, "deletions": 0}, "files": [{"sha": "2c0025bcba069ea16e370713977e3e6b059fdc57", "filename": "library/std/src/net/ip.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/3df25ae186e89c885d9a71cd37fbd7a37e39fc85/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3df25ae186e89c885d9a71cd37fbd7a37e39fc85/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip.rs?ref=3df25ae186e89c885d9a71cd37fbd7a37e39fc85", "patch": "@@ -1473,6 +1473,37 @@ impl Ipv6Addr {\n         (self.segments()[0] & 0xff00) == 0xff00\n     }\n \n+    /// Converts this address to an [IPv4 address] if it's an \"IPv4-mapped IPv6 address\"\n+    /// defined in [IETF RFC 4291 section 2.5.5.2], otherwise returns [`None`].\n+    ///\n+    /// `::ffff:a.b.c.d` becomes `a.b.c.d`.\n+    /// All addresses *not* starting with `::ffff` will return `None`.\n+    ///\n+    /// [IPv4 address]: ../../std/net/struct.Ipv4Addr.html\n+    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n+    /// [IETF RFC 4291 section 2.5.5.2]: https://tools.ietf.org/html/rfc4291#section-2.5.5.2\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(ip)]\n+    ///\n+    /// use std::net::{Ipv4Addr, Ipv6Addr};\n+    ///\n+    /// assert_eq!(Ipv6Addr::new(0xff00, 0, 0, 0, 0, 0, 0, 0).to_ipv4_mapped(), None);\n+    /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff).to_ipv4_mapped(),\n+    ///            Some(Ipv4Addr::new(192, 10, 2, 255)));\n+    /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1).to_ipv4_mapped(), None);\n+    /// ```\n+    pub fn to_ipv4_mapped(&self) -> Option<Ipv4Addr> {\n+        match self.octets() {\n+            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xff, 0xff, a, b, c, d] => {\n+                Some(Ipv4Addr::new(a, b, c, d))\n+            }\n+            _ => None,\n+        }\n+    }\n+\n     /// Converts this address to an [IPv4 address]. Returns [`None`] if this address is\n     /// neither IPv4-compatible or IPv4-mapped.\n     ///\n@@ -2070,6 +2101,15 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn ipv6_to_ipv4_mapped() {\n+        assert_eq!(\n+            Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0x1234, 0x5678).to_ipv4_mapped(),\n+            Some(Ipv4Addr::new(0x12, 0x34, 0x56, 0x78))\n+        );\n+        assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0x1234, 0x5678).to_ipv4_mapped(), None);\n+    }\n+\n     #[test]\n     fn ipv6_to_ipv4() {\n         assert_eq!("}]}