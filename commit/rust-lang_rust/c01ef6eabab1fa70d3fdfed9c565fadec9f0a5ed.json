{"sha": "c01ef6eabab1fa70d3fdfed9c565fadec9f0a5ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwMWVmNmVhYmFiMWZhNzBkM2ZkZmVkOWM1NjVmYWRlYzlmMGE1ZWQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-12T08:41:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-12T08:41:16Z"}, "message": "Merge #7974\n\n7974: use references in CompletionItem's builder r=matklad a=yonip23\n\n@matklad \r\nThis is a follow up to [this pr](https://github.com/rust-analyzer/rust-analyzer/pull/7973)\n\nCo-authored-by: yonip23 <yoni@codota.com>", "tree": {"sha": "37160de8384855fd5fadce3ca4a3de4dacdf98b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37160de8384855fd5fadce3ca4a3de4dacdf98b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c01ef6eabab1fa70d3fdfed9c565fadec9f0a5ed", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgSyksCRBK7hj4Ov3rIwAAdHIIAAJW/wXXpOYPzFbdLh5HTlVw\nKGAKUY5zGrYhWuARIXDe/NiyN0WtpgHhH4fh1T/vN/u/6WA30KL2EiO88XwqPkkV\nKv+Ya/yVkP5Btju2JhYclPjDW1IlhQPYkB6cDfndFFZbiT7zzkmsCw+4LZYCR9fK\n3IRqF3OHNPlXp6IfuNDQ+DknEmNompgDcKXWNAXNWZFs8ur7eBQWB5tF27n3TfzZ\nOHdeM0lvhoO4CkmU6TUTOjF91ED/kLRRFEMLCwKvqYSxdUm7Ga7oIee05IjgAYo4\ny7k3ZYmjfP11Huo/e1ZZ/OWYFENfaFcnWzWor/lyXH7bw8nF8SzgFWd2Z57rRRo=\n=2jzV\n-----END PGP SIGNATURE-----\n", "payload": "tree 37160de8384855fd5fadce3ca4a3de4dacdf98b8\nparent db6364fecc2b0e9a95d9aaece820a86265b4cb4f\nparent 99c4a41cd1a9f9ef0ee4f067f0069a23123b949a\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1615538476 +0000\ncommitter GitHub <noreply@github.com> 1615538476 +0000\n\nMerge #7974\n\n7974: use references in CompletionItem's builder r=matklad a=yonip23\n\n@matklad \r\nThis is a follow up to [this pr](https://github.com/rust-analyzer/rust-analyzer/pull/7973)\n\nCo-authored-by: yonip23 <yoni@codota.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c01ef6eabab1fa70d3fdfed9c565fadec9f0a5ed", "html_url": "https://github.com/rust-lang/rust/commit/c01ef6eabab1fa70d3fdfed9c565fadec9f0a5ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c01ef6eabab1fa70d3fdfed9c565fadec9f0a5ed/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db6364fecc2b0e9a95d9aaece820a86265b4cb4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/db6364fecc2b0e9a95d9aaece820a86265b4cb4f", "html_url": "https://github.com/rust-lang/rust/commit/db6364fecc2b0e9a95d9aaece820a86265b4cb4f"}, {"sha": "99c4a41cd1a9f9ef0ee4f067f0069a23123b949a", "url": "https://api.github.com/repos/rust-lang/rust/commits/99c4a41cd1a9f9ef0ee4f067f0069a23123b949a", "html_url": "https://github.com/rust-lang/rust/commit/99c4a41cd1a9f9ef0ee4f067f0069a23123b949a"}], "stats": {"total": 349, "additions": 183, "deletions": 166}, "files": [{"sha": "14376b9244523e93f8ec0bfa8f473fdf85c1689c", "filename": "crates/ide_completion/src/completions/attribute.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c01ef6eabab1fa70d3fdfed9c565fadec9f0a5ed/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c01ef6eabab1fa70d3fdfed9c565fadec9f0a5ed/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs?ref=c01ef6eabab1fa70d3fdfed9c565fadec9f0a5ed", "patch": "@@ -45,15 +45,15 @@ fn complete_attribute_start(acc: &mut Completions, ctx: &CompletionContext, attr\n             CompletionKind::Attribute,\n             ctx.source_range(),\n             attr_completion.label,\n-        )\n-        .kind(CompletionItemKind::Attribute);\n+        );\n+        item.kind(CompletionItemKind::Attribute);\n \n         if let Some(lookup) = attr_completion.lookup {\n-            item = item.lookup_by(lookup);\n+            item.lookup_by(lookup);\n         }\n \n         if let Some((snippet, cap)) = attr_completion.snippet.zip(ctx.config.snippet_cap) {\n-            item = item.insert_snippet(cap, snippet);\n+            item.insert_snippet(cap, snippet);\n         }\n \n         if attribute.kind() == ast::AttrKind::Inner || !attr_completion.prefer_inner {\n@@ -168,16 +168,20 @@ fn complete_derive(acc: &mut Completions, ctx: &CompletionContext, derive_input:\n             );\n             let lookup = components.join(\", \");\n             let label = components.iter().rev().join(\", \");\n-            CompletionItem::new(CompletionKind::Attribute, ctx.source_range(), label)\n-                .lookup_by(lookup)\n-                .kind(CompletionItemKind::Attribute)\n-                .add_to(acc)\n+            let mut builder =\n+                CompletionItem::new(CompletionKind::Attribute, ctx.source_range(), label);\n+            builder.lookup_by(lookup).kind(CompletionItemKind::Attribute);\n+            builder.add_to(acc);\n         }\n \n         for custom_derive_name in get_derive_names_in_scope(ctx).difference(&existing_derives) {\n-            CompletionItem::new(CompletionKind::Attribute, ctx.source_range(), custom_derive_name)\n-                .kind(CompletionItemKind::Attribute)\n-                .add_to(acc)\n+            let mut builder = CompletionItem::new(\n+                CompletionKind::Attribute,\n+                ctx.source_range(),\n+                custom_derive_name,\n+            );\n+            builder.kind(CompletionItemKind::Attribute);\n+            builder.add_to(acc);\n         }\n     }\n }\n@@ -193,14 +197,13 @@ fn complete_lint(\n             .into_iter()\n             .filter(|completion| !existing_lints.contains(completion.label))\n         {\n-            CompletionItem::new(\n+            let mut builder = CompletionItem::new(\n                 CompletionKind::Attribute,\n                 ctx.source_range(),\n                 lint_completion.label,\n-            )\n-            .kind(CompletionItemKind::Attribute)\n-            .detail(lint_completion.description)\n-            .add_to(acc)\n+            );\n+            builder.kind(CompletionItemKind::Attribute).detail(lint_completion.description);\n+            builder.add_to(acc)\n         }\n     }\n }"}, {"sha": "9600a049ab8de90d79fe2d243dae0724eba01838", "filename": "crates/ide_completion/src/completions/fn_param.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c01ef6eabab1fa70d3fdfed9c565fadec9f0a5ed/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ffn_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c01ef6eabab1fa70d3fdfed9c565fadec9f0a5ed/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ffn_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ffn_param.rs?ref=c01ef6eabab1fa70d3fdfed9c565fadec9f0a5ed", "patch": "@@ -54,10 +54,9 @@ pub(crate) fn complete_fn_param(acc: &mut Completions, ctx: &CompletionContext)\n     }\n \n     params.into_iter().for_each(|(label, lookup)| {\n-        CompletionItem::new(CompletionKind::Magic, ctx.source_range(), label)\n-            .kind(CompletionItemKind::Binding)\n-            .lookup_by(lookup)\n-            .add_to(acc)\n+        let mut builder = CompletionItem::new(CompletionKind::Magic, ctx.source_range(), label);\n+        builder.kind(CompletionItemKind::Binding).lookup_by(lookup);\n+        builder.add_to(acc)\n     });\n }\n "}, {"sha": "aa3be712d7321a9517f41ce0e8da2e772f716464", "filename": "crates/ide_completion/src/completions/keyword.rs", "status": "modified", "additions": 23, "deletions": 21, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/c01ef6eabab1fa70d3fdfed9c565fadec9f0a5ed/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c01ef6eabab1fa70d3fdfed9c565fadec9f0a5ed/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs?ref=c01ef6eabab1fa70d3fdfed9c565fadec9f0a5ed", "patch": "@@ -12,33 +12,32 @@ pub(crate) fn complete_use_tree_keyword(acc: &mut Completions, ctx: &CompletionC\n \n     if ctx.use_item_syntax.is_some() {\n         if ctx.path_qual.is_none() {\n-            CompletionItem::new(CompletionKind::Keyword, source_range, \"crate::\")\n-                .kind(CompletionItemKind::Keyword)\n-                .insert_text(\"crate::\")\n-                .add_to(acc);\n+            let mut crate_builder =\n+                CompletionItem::new(CompletionKind::Keyword, source_range, \"crate::\");\n+            crate_builder.kind(CompletionItemKind::Keyword).insert_text(\"crate::\");\n+            crate_builder.add_to(acc);\n         }\n-        CompletionItem::new(CompletionKind::Keyword, source_range, \"self\")\n-            .kind(CompletionItemKind::Keyword)\n-            .add_to(acc);\n+        let mut self_builder = CompletionItem::new(CompletionKind::Keyword, source_range, \"self\");\n+        self_builder.kind(CompletionItemKind::Keyword);\n+        self_builder.add_to(acc);\n         if iter::successors(ctx.path_qual.clone(), |p| p.qualifier())\n             .all(|p| p.segment().and_then(|s| s.super_token()).is_some())\n         {\n-            CompletionItem::new(CompletionKind::Keyword, source_range, \"super::\")\n-                .kind(CompletionItemKind::Keyword)\n-                .insert_text(\"super::\")\n-                .add_to(acc);\n+            let mut super_builder =\n+                CompletionItem::new(CompletionKind::Keyword, source_range, \"super::\");\n+            super_builder.kind(CompletionItemKind::Keyword).insert_text(\"super::\");\n+            super_builder.add_to(acc);\n         }\n     }\n \n     // Suggest .await syntax for types that implement Future trait\n     if let Some(receiver) = &ctx.dot_receiver {\n         if let Some(ty) = ctx.sema.type_of_expr(receiver) {\n             if ty.impls_future(ctx.db) {\n-                CompletionItem::new(CompletionKind::Keyword, ctx.source_range(), \"await\")\n-                    .kind(CompletionItemKind::Keyword)\n-                    .detail(\"expr.await\")\n-                    .insert_text(\"await\")\n-                    .add_to(acc);\n+                let mut builder =\n+                    CompletionItem::new(CompletionKind::Keyword, ctx.source_range(), \"await\");\n+                builder.kind(CompletionItemKind::Keyword).detail(\"expr.await\").insert_text(\"await\");\n+                builder.add_to(acc);\n             }\n         };\n     }\n@@ -165,9 +164,10 @@ pub(crate) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionConte\n }\n \n fn add_keyword(ctx: &CompletionContext, acc: &mut Completions, kw: &str, snippet: &str) {\n-    let builder = CompletionItem::new(CompletionKind::Keyword, ctx.source_range(), kw)\n-        .kind(CompletionItemKind::Keyword);\n-    let builder = match ctx.config.snippet_cap {\n+    let mut builder = CompletionItem::new(CompletionKind::Keyword, ctx.source_range(), kw);\n+    builder.kind(CompletionItemKind::Keyword);\n+\n+    match ctx.config.snippet_cap {\n         Some(cap) => {\n             let tmp;\n             let snippet = if snippet.ends_with('}') && ctx.incomplete_let {\n@@ -177,9 +177,11 @@ fn add_keyword(ctx: &CompletionContext, acc: &mut Completions, kw: &str, snippet\n             } else {\n                 snippet\n             };\n-            builder.insert_snippet(cap, snippet)\n+            builder.insert_snippet(cap, snippet);\n+        }\n+        None => {\n+            builder.insert_text(if snippet.contains('$') { kw } else { snippet });\n         }\n-        None => builder.insert_text(if snippet.contains('$') { kw } else { snippet }),\n     };\n     acc.add(builder.build());\n }"}, {"sha": "fc4ac7a0de7d4a0a206f8350b277f1d601c33902", "filename": "crates/ide_completion/src/completions/mod_.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c01ef6eabab1fa70d3fdfed9c565fadec9f0a5ed/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fmod_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c01ef6eabab1fa70d3fdfed9c565fadec9f0a5ed/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fmod_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fmod_.rs?ref=c01ef6eabab1fa70d3fdfed9c565fadec9f0a5ed", "patch": "@@ -80,9 +80,10 @@ pub(crate) fn complete_mod(acc: &mut Completions, ctx: &CompletionContext) -> Op\n             if mod_under_caret.semicolon_token().is_none() {\n                 label.push(';');\n             }\n-            CompletionItem::new(CompletionKind::Magic, ctx.source_range(), &label)\n-                .kind(SymbolKind::Module)\n-                .add_to(acc)\n+            let mut builder =\n+                CompletionItem::new(CompletionKind::Magic, ctx.source_range(), &label);\n+            builder.kind(SymbolKind::Module);\n+            builder.add_to(acc)\n         });\n \n     Some(())"}, {"sha": "8551e01681f54c666be6a7c11503c20d7e20c329", "filename": "crates/ide_completion/src/completions/postfix.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c01ef6eabab1fa70d3fdfed9c565fadec9f0a5ed/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c01ef6eabab1fa70d3fdfed9c565fadec9f0a5ed/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs?ref=c01ef6eabab1fa70d3fdfed9c565fadec9f0a5ed", "patch": "@@ -301,6 +301,7 @@ fn postfix_snippet(\n         .detail(detail)\n         .kind(CompletionItemKind::Snippet)\n         .snippet_edit(cap, edit)\n+        .clone()\n }\n \n #[cfg(test)]"}, {"sha": "b9af096983a0413b94c8b495a2e3fa78ed6c15eb", "filename": "crates/ide_completion/src/completions/record.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c01ef6eabab1fa70d3fdfed9c565fadec9f0a5ed/crates%2Fide_completion%2Fsrc%2Fcompletions%2Frecord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c01ef6eabab1fa70d3fdfed9c565fadec9f0a5ed/crates%2Fide_completion%2Fsrc%2Fcompletions%2Frecord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Frecord.rs?ref=c01ef6eabab1fa70d3fdfed9c565fadec9f0a5ed", "patch": "@@ -22,16 +22,13 @@ pub(crate) fn complete_record(acc: &mut Completions, ctx: &CompletionContext) ->\n                 let completion_text = completion_text\n                     .strip_prefix(ctx.token.to_string().as_str())\n                     .unwrap_or(completion_text);\n-                acc.add(\n-                    CompletionItem::new(\n-                        CompletionKind::Snippet,\n-                        ctx.source_range(),\n-                        \"..Default::default()\",\n-                    )\n-                    .insert_text(completion_text)\n-                    .kind(SymbolKind::Field)\n-                    .build(),\n+                let mut builder = CompletionItem::new(\n+                    CompletionKind::Snippet,\n+                    ctx.source_range(),\n+                    \"..Default::default()\",\n                 );\n+                builder.insert_text(completion_text).kind(SymbolKind::Field);\n+                acc.add(builder.build());\n             }\n \n             missing_fields"}, {"sha": "a4d18cecda0e5efcecfac84b96b9abfed8c9ccc7", "filename": "crates/ide_completion/src/completions/snippet.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c01ef6eabab1fa70d3fdfed9c565fadec9f0a5ed/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c01ef6eabab1fa70d3fdfed9c565fadec9f0a5ed/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs?ref=c01ef6eabab1fa70d3fdfed9c565fadec9f0a5ed", "patch": "@@ -8,9 +8,8 @@ use crate::{\n };\n \n fn snippet(ctx: &CompletionContext, cap: SnippetCap, label: &str, snippet: &str) -> Builder {\n-    CompletionItem::new(CompletionKind::Snippet, ctx.source_range(), label)\n-        .insert_snippet(cap, snippet)\n-        .kind(CompletionItemKind::Snippet)\n+    let mut builder = CompletionItem::new(CompletionKind::Snippet, ctx.source_range(), label);\n+    builder.insert_snippet(cap, snippet).kind(CompletionItemKind::Snippet).clone()\n }\n \n pub(crate) fn complete_expr_snippet(acc: &mut Completions, ctx: &CompletionContext) {\n@@ -35,7 +34,7 @@ pub(crate) fn complete_item_snippet(acc: &mut Completions, ctx: &CompletionConte\n         None => return,\n     };\n \n-    snippet(\n+    let mut test_module_builder = snippet(\n         ctx,\n         cap,\n         \"tmod (Test module)\",\n@@ -49,11 +48,11 @@ mod tests {\n         $0\n     }\n }\",\n-    )\n-    .lookup_by(\"tmod\")\n-    .add_to(acc);\n+    );\n+    test_module_builder.lookup_by(\"tmod\");\n+    test_module_builder.add_to(acc);\n \n-    snippet(\n+    let mut test_function_builder = snippet(\n         ctx,\n         cap,\n         \"tfn (Test function)\",\n@@ -62,11 +61,13 @@ mod tests {\n fn ${1:feature}() {\n     $0\n }\",\n-    )\n-    .lookup_by(\"tfn\")\n-    .add_to(acc);\n+    );\n+    test_function_builder.lookup_by(\"tfn\");\n+    test_function_builder.add_to(acc);\n \n-    snippet(ctx, cap, \"macro_rules\", \"macro_rules! $1 {\\n\\t($2) => {\\n\\t\\t$0\\n\\t};\\n}\").add_to(acc);\n+    let macro_rules_builder =\n+        snippet(ctx, cap, \"macro_rules\", \"macro_rules! $1 {\\n\\t($2) => {\\n\\t\\t$0\\n\\t};\\n}\");\n+    macro_rules_builder.add_to(acc);\n }\n \n #[cfg(test)]"}, {"sha": "031f42d4a4c88a6182772414a3236a43595337b5", "filename": "crates/ide_completion/src/completions/trait_impl.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c01ef6eabab1fa70d3fdfed9c565fadec9f0a5ed/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c01ef6eabab1fa70d3fdfed9c565fadec9f0a5ed/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ftrait_impl.rs?ref=c01ef6eabab1fa70d3fdfed9c565fadec9f0a5ed", "patch": "@@ -145,9 +145,8 @@ fn add_function_impl(\n         format!(\"fn {}(..)\", fn_name)\n     };\n \n-    let builder = CompletionItem::new(CompletionKind::Magic, ctx.source_range(), label)\n-        .lookup_by(fn_name)\n-        .set_documentation(func.docs(ctx.db));\n+    let mut builder = CompletionItem::new(CompletionKind::Magic, ctx.source_range(), label);\n+    builder.lookup_by(fn_name).set_documentation(func.docs(ctx.db));\n \n     let completion_kind = if func.self_param(ctx.db).is_some() {\n         CompletionItemKind::Method\n@@ -161,15 +160,15 @@ fn add_function_impl(\n         match ctx.config.snippet_cap {\n             Some(cap) => {\n                 let snippet = format!(\"{} {{\\n    $0\\n}}\", function_decl);\n-                builder.snippet_edit(cap, TextEdit::replace(range, snippet))\n+                builder.snippet_edit(cap, TextEdit::replace(range, snippet));\n             }\n             None => {\n                 let header = format!(\"{} {{\", function_decl);\n-                builder.text_edit(TextEdit::replace(range, header))\n+                builder.text_edit(TextEdit::replace(range, header));\n             }\n-        }\n-        .kind(completion_kind)\n-        .add_to(acc);\n+        };\n+        builder.kind(completion_kind);\n+        builder.add_to(acc);\n     }\n }\n \n@@ -185,12 +184,14 @@ fn add_type_alias_impl(\n \n     let range = TextRange::new(type_def_node.text_range().start(), ctx.source_range().end());\n \n-    CompletionItem::new(CompletionKind::Magic, ctx.source_range(), snippet.clone())\n+    let mut builder =\n+        CompletionItem::new(CompletionKind::Magic, ctx.source_range(), snippet.clone());\n+    builder\n         .text_edit(TextEdit::replace(range, snippet))\n         .lookup_by(alias_name)\n         .kind(SymbolKind::TypeAlias)\n-        .set_documentation(type_alias.docs(ctx.db))\n-        .add_to(acc);\n+        .set_documentation(type_alias.docs(ctx.db));\n+    builder.add_to(acc);\n }\n \n fn add_const_impl(\n@@ -208,12 +209,14 @@ fn add_const_impl(\n             let range =\n                 TextRange::new(const_def_node.text_range().start(), ctx.source_range().end());\n \n-            CompletionItem::new(CompletionKind::Magic, ctx.source_range(), snippet.clone())\n+            let mut builder =\n+                CompletionItem::new(CompletionKind::Magic, ctx.source_range(), snippet.clone());\n+            builder\n                 .text_edit(TextEdit::replace(range, snippet))\n                 .lookup_by(const_name)\n                 .kind(SymbolKind::Const)\n-                .set_documentation(const_.docs(ctx.db))\n-                .add_to(acc);\n+                .set_documentation(const_.docs(ctx.db));\n+            builder.add_to(acc);\n         }\n     }\n }"}, {"sha": "cf1aaa131496a73b2147913007b55869037e8a26", "filename": "crates/ide_completion/src/item.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c01ef6eabab1fa70d3fdfed9c565fadec9f0a5ed/crates%2Fide_completion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c01ef6eabab1fa70d3fdfed9c565fadec9f0a5ed/crates%2Fide_completion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fitem.rs?ref=c01ef6eabab1fa70d3fdfed9c565fadec9f0a5ed", "patch": "@@ -401,42 +401,42 @@ impl Builder {\n             import_to_add: self.import_to_add,\n         }\n     }\n-    pub(crate) fn lookup_by(mut self, lookup: impl Into<String>) -> Builder {\n+    pub(crate) fn lookup_by(&mut self, lookup: impl Into<String>) -> &mut Builder {\n         self.lookup = Some(lookup.into());\n         self\n     }\n-    pub(crate) fn label(mut self, label: impl Into<String>) -> Builder {\n+    pub(crate) fn label(&mut self, label: impl Into<String>) -> &mut Builder {\n         self.label = label.into();\n         self\n     }\n-    pub(crate) fn insert_text(mut self, insert_text: impl Into<String>) -> Builder {\n+    pub(crate) fn insert_text(&mut self, insert_text: impl Into<String>) -> &mut Builder {\n         self.insert_text = Some(insert_text.into());\n         self\n     }\n     pub(crate) fn insert_snippet(\n-        mut self,\n+        &mut self,\n         _cap: SnippetCap,\n         snippet: impl Into<String>,\n-    ) -> Builder {\n+    ) -> &mut Builder {\n         self.insert_text_format = InsertTextFormat::Snippet;\n         self.insert_text(snippet)\n     }\n-    pub(crate) fn kind(mut self, kind: impl Into<CompletionItemKind>) -> Builder {\n+    pub(crate) fn kind(&mut self, kind: impl Into<CompletionItemKind>) -> &mut Builder {\n         self.kind = Some(kind.into());\n         self\n     }\n-    pub(crate) fn text_edit(mut self, edit: TextEdit) -> Builder {\n+    pub(crate) fn text_edit(&mut self, edit: TextEdit) -> &mut Builder {\n         self.text_edit = Some(edit);\n         self\n     }\n-    pub(crate) fn snippet_edit(mut self, _cap: SnippetCap, edit: TextEdit) -> Builder {\n+    pub(crate) fn snippet_edit(&mut self, _cap: SnippetCap, edit: TextEdit) -> &mut Builder {\n         self.insert_text_format = InsertTextFormat::Snippet;\n         self.text_edit(edit)\n     }\n-    pub(crate) fn detail(self, detail: impl Into<String>) -> Builder {\n+    pub(crate) fn detail(&mut self, detail: impl Into<String>) -> &mut Builder {\n         self.set_detail(Some(detail))\n     }\n-    pub(crate) fn set_detail(mut self, detail: Option<impl Into<String>>) -> Builder {\n+    pub(crate) fn set_detail(&mut self, detail: Option<impl Into<String>>) -> &mut Builder {\n         self.detail = detail.map(Into::into);\n         if let Some(detail) = &self.detail {\n             if never!(detail.contains('\\n'), \"multiline detail:\\n{}\", detail) {\n@@ -446,30 +446,30 @@ impl Builder {\n         self\n     }\n     #[allow(unused)]\n-    pub(crate) fn documentation(self, docs: Documentation) -> Builder {\n+    pub(crate) fn documentation(&mut self, docs: Documentation) -> &mut Builder {\n         self.set_documentation(Some(docs))\n     }\n-    pub(crate) fn set_documentation(mut self, docs: Option<Documentation>) -> Builder {\n+    pub(crate) fn set_documentation(&mut self, docs: Option<Documentation>) -> &mut Builder {\n         self.documentation = docs.map(Into::into);\n         self\n     }\n-    pub(crate) fn set_deprecated(mut self, deprecated: bool) -> Builder {\n+    pub(crate) fn set_deprecated(&mut self, deprecated: bool) -> &mut Builder {\n         self.deprecated = deprecated;\n         self\n     }\n-    pub(crate) fn set_relevance(mut self, relevance: Relevance) -> Builder {\n+    pub(crate) fn set_relevance(&mut self, relevance: Relevance) -> &mut Builder {\n         self.relevance = relevance;\n         self\n     }\n-    pub(crate) fn trigger_call_info(mut self) -> Builder {\n+    pub(crate) fn trigger_call_info(&mut self) -> &mut Builder {\n         self.trigger_call_info = Some(true);\n         self\n     }\n-    pub(crate) fn add_import(mut self, import_to_add: Option<ImportEdit>) -> Builder {\n+    pub(crate) fn add_import(&mut self, import_to_add: Option<ImportEdit>) -> &mut Builder {\n         self.import_to_add = import_to_add;\n         self\n     }\n-    pub(crate) fn ref_match(mut self, mutability: Mutability) -> Builder {\n+    pub(crate) fn ref_match(&mut self, mutability: Mutability) -> &mut Builder {\n         self.ref_match = Some(mutability);\n         self\n     }"}, {"sha": "c50cba0e03051e20efc38f6aa179eb457ddf9abc", "filename": "crates/ide_completion/src/render.rs", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/c01ef6eabab1fa70d3fdfed9c565fadec9f0a5ed/crates%2Fide_completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c01ef6eabab1fa70d3fdfed9c565fadec9f0a5ed/crates%2Fide_completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender.rs?ref=c01ef6eabab1fa70d3fdfed9c565fadec9f0a5ed", "patch": "@@ -145,28 +145,34 @@ impl<'a> Render<'a> {\n     fn add_field(&mut self, field: hir::Field, ty: &Type) -> CompletionItem {\n         let is_deprecated = self.ctx.is_deprecated(field);\n         let name = field.name(self.ctx.db());\n-        let mut item = CompletionItem::new(\n+        let mut builder = CompletionItem::new(\n             CompletionKind::Reference,\n             self.ctx.source_range(),\n             name.to_string(),\n-        )\n-        .kind(SymbolKind::Field)\n-        .detail(ty.display(self.ctx.db()).to_string())\n-        .set_documentation(field.docs(self.ctx.db()))\n-        .set_deprecated(is_deprecated);\n+        );\n+        builder\n+            .kind(SymbolKind::Field)\n+            .detail(ty.display(self.ctx.db()).to_string())\n+            .set_documentation(field.docs(self.ctx.db()))\n+            .set_deprecated(is_deprecated);\n \n         if let Some(relevance) = compute_relevance(&self.ctx, &ty, &name.to_string()) {\n-            item = item.set_relevance(relevance);\n+            builder.set_relevance(relevance);\n         }\n \n-        item.build()\n+        builder.build()\n     }\n \n     fn add_tuple_field(&mut self, field: usize, ty: &Type) -> CompletionItem {\n-        CompletionItem::new(CompletionKind::Reference, self.ctx.source_range(), field.to_string())\n-            .kind(SymbolKind::Field)\n-            .detail(ty.display(self.ctx.db()).to_string())\n-            .build()\n+        let mut builder = CompletionItem::new(\n+            CompletionKind::Reference,\n+            self.ctx.source_range(),\n+            field.to_string(),\n+        );\n+\n+        builder.kind(SymbolKind::Field).detail(ty.display(self.ctx.db()).to_string());\n+\n+        builder.build()\n     }\n \n     fn render_resolution(\n@@ -225,15 +231,13 @@ impl<'a> Render<'a> {\n                 CompletionItemKind::SymbolKind(SymbolKind::SelfParam)\n             }\n             ScopeDef::Unknown => {\n-                let item = CompletionItem::new(\n+                let mut item = CompletionItem::new(\n                     CompletionKind::Reference,\n                     self.ctx.source_range(),\n                     local_name,\n-                )\n-                .kind(CompletionItemKind::UnresolvedReference)\n-                .add_import(import_to_add)\n-                .build();\n-                return Some(item);\n+                );\n+                item.kind(CompletionItemKind::UnresolvedReference).add_import(import_to_add);\n+                return Some(item.build());\n             }\n         };\n \n@@ -242,14 +246,14 @@ impl<'a> Render<'a> {\n         if let ScopeDef::Local(local) = resolution {\n             let ty = local.ty(self.ctx.db());\n             if !ty.is_unknown() {\n-                item = item.detail(ty.display(self.ctx.db()).to_string());\n+                item.detail(ty.display(self.ctx.db()).to_string());\n             }\n         };\n \n         if let ScopeDef::Local(local) = resolution {\n             let ty = local.ty(self.ctx.db());\n             if let Some(relevance) = compute_relevance(&self.ctx, &ty, &local_name) {\n-                item = item.set_relevance(relevance)\n+                item.set_relevance(relevance);\n             }\n             if let Some((_expected_name, expected_type)) = self.ctx.expected_name_and_type() {\n                 if let Some(ty_without_ref) = expected_type.remove_ref() {\n@@ -260,7 +264,7 @@ impl<'a> Render<'a> {\n                         } else {\n                             Mutability::Shared\n                         };\n-                        item = item.ref_match(mutability)\n+                        item.ref_match(mutability);\n                     }\n                 }\n             }\n@@ -281,21 +285,17 @@ impl<'a> Render<'a> {\n                 };\n                 if has_non_default_type_params {\n                     cov_mark::hit!(inserts_angle_brackets_for_generics);\n-                    item = item\n-                        .lookup_by(local_name.clone())\n+                    item.lookup_by(local_name.clone())\n                         .label(format!(\"{}<\u2026>\", local_name))\n                         .insert_snippet(cap, format!(\"{}<$0>\", local_name));\n                 }\n             }\n         }\n-\n-        Some(\n-            item.kind(kind)\n-                .add_import(import_to_add)\n-                .set_documentation(self.docs(resolution))\n-                .set_deprecated(self.is_deprecated(resolution))\n-                .build(),\n-        )\n+        item.kind(kind)\n+            .add_import(import_to_add)\n+            .set_documentation(self.docs(resolution))\n+            .set_deprecated(self.is_deprecated(resolution));\n+        Some(item.build())\n     }\n \n     fn docs(&self, resolution: &ScopeDef) -> Option<Documentation> {"}, {"sha": "6d062b3b93a7446d3fe5e541083f10292bff6ec7", "filename": "crates/ide_completion/src/render/builder_ext.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c01ef6eabab1fa70d3fdfed9c565fadec9f0a5ed/crates%2Fide_completion%2Fsrc%2Frender%2Fbuilder_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c01ef6eabab1fa70d3fdfed9c565fadec9f0a5ed/crates%2Fide_completion%2Fsrc%2Frender%2Fbuilder_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fbuilder_ext.rs?ref=c01ef6eabab1fa70d3fdfed9c565fadec9f0a5ed", "patch": "@@ -52,11 +52,11 @@ impl Builder {\n     }\n \n     pub(super) fn add_call_parens(\n-        mut self,\n+        &mut self,\n         ctx: &CompletionContext,\n         name: String,\n         params: Params,\n-    ) -> Builder {\n+    ) -> &mut Builder {\n         if !self.should_add_parens(ctx) {\n             return self;\n         }\n@@ -71,7 +71,7 @@ impl Builder {\n         let (snippet, label) = if params.is_empty() {\n             (format!(\"{}()$0\", name), format!(\"{}()\", name))\n         } else {\n-            self = self.trigger_call_info();\n+            self.trigger_call_info();\n             let snippet = match (ctx.config.add_call_argument_snippets, params) {\n                 (true, Params::Named(params)) => {\n                     let function_params_snippet ="}, {"sha": "8add369e47057405d1514a8368211b030ca01e84", "filename": "crates/ide_completion/src/render/const_.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c01ef6eabab1fa70d3fdfed9c565fadec9f0a5ed/crates%2Fide_completion%2Fsrc%2Frender%2Fconst_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c01ef6eabab1fa70d3fdfed9c565fadec9f0a5ed/crates%2Fide_completion%2Fsrc%2Frender%2Fconst_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fconst_.rs?ref=c01ef6eabab1fa70d3fdfed9c565fadec9f0a5ed", "patch": "@@ -36,17 +36,17 @@ impl<'a> ConstRender<'a> {\n         let name = self.name()?;\n         let detail = self.detail();\n \n-        let item = CompletionItem::new(CompletionKind::Reference, self.ctx.source_range(), name)\n-            .kind(SymbolKind::Const)\n+        let mut item =\n+            CompletionItem::new(CompletionKind::Reference, self.ctx.source_range(), name);\n+        item.kind(SymbolKind::Const)\n             .set_documentation(self.ctx.docs(self.const_))\n             .set_deprecated(\n                 self.ctx.is_deprecated(self.const_)\n                     || self.ctx.is_deprecated_assoc_item(self.const_),\n             )\n-            .detail(detail)\n-            .build();\n+            .detail(detail);\n \n-        Some(item)\n+        Some(item.build())\n     }\n \n     fn name(&self) -> Option<String> {"}, {"sha": "23c43496ea850f8ec05d51fb20ef70a56ad4c7b8", "filename": "crates/ide_completion/src/render/enum_variant.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c01ef6eabab1fa70d3fdfed9c565fadec9f0a5ed/crates%2Fide_completion%2Fsrc%2Frender%2Fenum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c01ef6eabab1fa70d3fdfed9c565fadec9f0a5ed/crates%2Fide_completion%2Fsrc%2Frender%2Fenum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fenum_variant.rs?ref=c01ef6eabab1fa70d3fdfed9c565fadec9f0a5ed", "patch": "@@ -59,20 +59,20 @@ impl<'a> EnumRender<'a> {\n             CompletionKind::Reference,\n             self.ctx.source_range(),\n             self.qualified_name.clone(),\n-        )\n-        .kind(SymbolKind::Variant)\n-        .set_documentation(self.variant.docs(self.ctx.db()))\n-        .set_deprecated(self.ctx.is_deprecated(self.variant))\n-        .add_import(import_to_add)\n-        .detail(self.detail());\n+        );\n+        builder\n+            .kind(SymbolKind::Variant)\n+            .set_documentation(self.variant.docs(self.ctx.db()))\n+            .set_deprecated(self.ctx.is_deprecated(self.variant))\n+            .add_import(import_to_add)\n+            .detail(self.detail());\n \n         if self.variant_kind == StructKind::Tuple {\n             cov_mark::hit!(inserts_parens_for_tuple_enums);\n             let params = Params::Anonymous(self.variant.fields(self.ctx.db()).len());\n-            builder =\n-                builder.add_call_parens(self.ctx.completion, self.short_qualified_name, params);\n+            builder.add_call_parens(self.ctx.completion, self.short_qualified_name, params);\n         } else if self.path.is_some() {\n-            builder = builder.lookup_by(self.short_qualified_name);\n+            builder.lookup_by(self.short_qualified_name);\n         }\n \n         builder.build()"}, {"sha": "1e2f45f145fc937de1ea051c3cab1f36813b445a", "filename": "crates/ide_completion/src/render/function.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c01ef6eabab1fa70d3fdfed9c565fadec9f0a5ed/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c01ef6eabab1fa70d3fdfed9c565fadec9f0a5ed/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs?ref=c01ef6eabab1fa70d3fdfed9c565fadec9f0a5ed", "patch": "@@ -41,16 +41,22 @@ impl<'a> FunctionRender<'a> {\n \n     fn render(self, import_to_add: Option<ImportEdit>) -> CompletionItem {\n         let params = self.params();\n-        CompletionItem::new(CompletionKind::Reference, self.ctx.source_range(), self.name.clone())\n+        let mut builder = CompletionItem::new(\n+            CompletionKind::Reference,\n+            self.ctx.source_range(),\n+            self.name.clone(),\n+        );\n+        builder\n             .kind(self.kind())\n             .set_documentation(self.ctx.docs(self.func))\n             .set_deprecated(\n                 self.ctx.is_deprecated(self.func) || self.ctx.is_deprecated_assoc_item(self.func),\n             )\n             .detail(self.detail())\n             .add_call_parens(self.ctx.completion, self.name, params)\n-            .add_import(import_to_add)\n-            .build()\n+            .add_import(import_to_add);\n+\n+        builder.build()\n     }\n \n     fn detail(&self) -> String {"}, {"sha": "727f5e02ee6e67d8937f9c9b2e7fb64b7bf00401", "filename": "crates/ide_completion/src/render/macro_.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c01ef6eabab1fa70d3fdfed9c565fadec9f0a5ed/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c01ef6eabab1fa70d3fdfed9c565fadec9f0a5ed/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs?ref=c01ef6eabab1fa70d3fdfed9c565fadec9f0a5ed", "patch": "@@ -40,24 +40,27 @@ impl<'a> MacroRender<'a> {\n \n     fn render(&self, import_to_add: Option<ImportEdit>) -> Option<CompletionItem> {\n         let mut builder =\n-            CompletionItem::new(CompletionKind::Reference, self.ctx.source_range(), &self.label())\n-                .kind(SymbolKind::Macro)\n-                .set_documentation(self.docs.clone())\n-                .set_deprecated(self.ctx.is_deprecated(self.macro_))\n-                .add_import(import_to_add)\n-                .set_detail(self.detail());\n+            CompletionItem::new(CompletionKind::Reference, self.ctx.source_range(), &self.label());\n+        builder\n+            .kind(SymbolKind::Macro)\n+            .set_documentation(self.docs.clone())\n+            .set_deprecated(self.ctx.is_deprecated(self.macro_))\n+            .add_import(import_to_add)\n+            .set_detail(self.detail());\n \n         let needs_bang = self.needs_bang();\n-        builder = match self.ctx.snippet_cap() {\n+        match self.ctx.snippet_cap() {\n             Some(cap) if needs_bang => {\n                 let snippet = self.snippet();\n                 let lookup = self.lookup();\n-                builder.insert_snippet(cap, snippet).lookup_by(lookup)\n+                builder.insert_snippet(cap, snippet).lookup_by(lookup);\n+            }\n+            None if needs_bang => {\n+                builder.insert_text(self.banged_name());\n             }\n-            None if needs_bang => builder.insert_text(self.banged_name()),\n             _ => {\n                 cov_mark::hit!(dont_insert_macro_call_parens_unncessary);\n-                builder.insert_text(&self.name)\n+                builder.insert_text(&self.name);\n             }\n         };\n "}, {"sha": "4d8f2b17d91d81b5779edba5c18666585d1dbf78", "filename": "crates/ide_completion/src/render/pattern.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c01ef6eabab1fa70d3fdfed9c565fadec9f0a5ed/crates%2Fide_completion%2Fsrc%2Frender%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c01ef6eabab1fa70d3fdfed9c565fadec9f0a5ed/crates%2Fide_completion%2Fsrc%2Frender%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fpattern.rs?ref=c01ef6eabab1fa70d3fdfed9c565fadec9f0a5ed", "patch": "@@ -71,15 +71,16 @@ fn build_completion(\n     pat: String,\n     item: impl HasAttrs + Copy,\n ) -> CompletionItem {\n-    let completion = CompletionItem::new(CompletionKind::Snippet, ctx.source_range(), name)\n+    let mut completion = CompletionItem::new(CompletionKind::Snippet, ctx.source_range(), name);\n+    completion\n         .kind(CompletionItemKind::Binding)\n         .set_documentation(ctx.docs(item))\n         .set_deprecated(ctx.is_deprecated(item))\n         .detail(&pat);\n-    let completion = if let Some(snippet_cap) = ctx.snippet_cap() {\n-        completion.insert_snippet(snippet_cap, pat)\n+    if let Some(snippet_cap) = ctx.snippet_cap() {\n+        completion.insert_snippet(snippet_cap, pat);\n     } else {\n-        completion.insert_text(pat)\n+        completion.insert_text(pat);\n     };\n     completion.build()\n }"}, {"sha": "e47b4c745a8c5fc80c69e86a39a53e53b0c25ac9", "filename": "crates/ide_completion/src/render/type_alias.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c01ef6eabab1fa70d3fdfed9c565fadec9f0a5ed/crates%2Fide_completion%2Fsrc%2Frender%2Ftype_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c01ef6eabab1fa70d3fdfed9c565fadec9f0a5ed/crates%2Fide_completion%2Fsrc%2Frender%2Ftype_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Ftype_alias.rs?ref=c01ef6eabab1fa70d3fdfed9c565fadec9f0a5ed", "patch": "@@ -36,17 +36,17 @@ impl<'a> TypeAliasRender<'a> {\n         let name = self.name()?;\n         let detail = self.detail();\n \n-        let item = CompletionItem::new(CompletionKind::Reference, self.ctx.source_range(), name)\n-            .kind(SymbolKind::TypeAlias)\n+        let mut item =\n+            CompletionItem::new(CompletionKind::Reference, self.ctx.source_range(), name);\n+        item.kind(SymbolKind::TypeAlias)\n             .set_documentation(self.ctx.docs(self.type_alias))\n             .set_deprecated(\n                 self.ctx.is_deprecated(self.type_alias)\n                     || self.ctx.is_deprecated_assoc_item(self.type_alias),\n             )\n-            .detail(detail)\n-            .build();\n+            .detail(detail);\n \n-        Some(item)\n+        Some(item.build())\n     }\n \n     fn name(&self) -> Option<String> {"}]}