{"sha": "ff0d44e45a27e688b5ee5447dc9175d5e72b37c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmMGQ0NGU0NWEyN2U2ODhiNWVlNTQ0N2RjOTE3NWQ1ZTcyYjM3Yzk=", "commit": {"author": {"name": "Krishna Sai Veera Reddy", "email": "veerareddy@email.arizona.edu", "date": "2020-02-24T05:06:55Z"}, "committer": {"name": "Krishna Sai Veera Reddy", "email": "veerareddy@email.arizona.edu", "date": "2020-02-24T06:36:15Z"}, "message": "Add `imprecise_flops` lint\n\nAdd lint to detect floating point operations that can be computed more\naccurately at the cost of performance. `cbrt`, `ln_1p` and `exp_m1`\nlibrary functions call their equivalent cmath implementations which is\nslower but more accurate so moving checks for these under this new lint.", "tree": {"sha": "27e950231287cfb35eadc5c34f8a7f8a520beb56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27e950231287cfb35eadc5c34f8a7f8a520beb56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff0d44e45a27e688b5ee5447dc9175d5e72b37c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff0d44e45a27e688b5ee5447dc9175d5e72b37c9", "html_url": "https://github.com/rust-lang/rust/commit/ff0d44e45a27e688b5ee5447dc9175d5e72b37c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff0d44e45a27e688b5ee5447dc9175d5e72b37c9/comments", "author": {"login": "krishna-veerareddy", "id": 41484652, "node_id": "MDQ6VXNlcjQxNDg0NjUy", "avatar_url": "https://avatars.githubusercontent.com/u/41484652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krishna-veerareddy", "html_url": "https://github.com/krishna-veerareddy", "followers_url": "https://api.github.com/users/krishna-veerareddy/followers", "following_url": "https://api.github.com/users/krishna-veerareddy/following{/other_user}", "gists_url": "https://api.github.com/users/krishna-veerareddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/krishna-veerareddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krishna-veerareddy/subscriptions", "organizations_url": "https://api.github.com/users/krishna-veerareddy/orgs", "repos_url": "https://api.github.com/users/krishna-veerareddy/repos", "events_url": "https://api.github.com/users/krishna-veerareddy/events{/privacy}", "received_events_url": "https://api.github.com/users/krishna-veerareddy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "krishna-veerareddy", "id": 41484652, "node_id": "MDQ6VXNlcjQxNDg0NjUy", "avatar_url": "https://avatars.githubusercontent.com/u/41484652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krishna-veerareddy", "html_url": "https://github.com/krishna-veerareddy", "followers_url": "https://api.github.com/users/krishna-veerareddy/followers", "following_url": "https://api.github.com/users/krishna-veerareddy/following{/other_user}", "gists_url": "https://api.github.com/users/krishna-veerareddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/krishna-veerareddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krishna-veerareddy/subscriptions", "organizations_url": "https://api.github.com/users/krishna-veerareddy/orgs", "repos_url": "https://api.github.com/users/krishna-veerareddy/repos", "events_url": "https://api.github.com/users/krishna-veerareddy/events{/privacy}", "received_events_url": "https://api.github.com/users/krishna-veerareddy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e94a167508604d4f4d37bbd654fc3a39056ef99b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e94a167508604d4f4d37bbd654fc3a39056ef99b", "html_url": "https://github.com/rust-lang/rust/commit/e94a167508604d4f4d37bbd654fc3a39056ef99b"}], "stats": {"total": 87, "additions": 67, "deletions": 20}, "files": [{"sha": "99e84ea51931d2a5b18a09f2fbc99eece52754d8", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ff0d44e45a27e688b5ee5447dc9175d5e72b37c9/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/ff0d44e45a27e688b5ee5447dc9175d5e72b37c9/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=ff0d44e45a27e688b5ee5447dc9175d5e72b37c9", "patch": "@@ -1169,6 +1169,7 @@ Released 2018-09-13\n [`ifs_same_cond`]: https://rust-lang.github.io/rust-clippy/master/index.html#ifs_same_cond\n [`implicit_hasher`]: https://rust-lang.github.io/rust-clippy/master/index.html#implicit_hasher\n [`implicit_return`]: https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\n+[`imprecise_flops`]: https://rust-lang.github.io/rust-clippy/master/index.html#imprecise_flops\n [`inconsistent_digit_grouping`]: https://rust-lang.github.io/rust-clippy/master/index.html#inconsistent_digit_grouping\n [`indexing_slicing`]: https://rust-lang.github.io/rust-clippy/master/index.html#indexing_slicing\n [`ineffective_bit_mask`]: https://rust-lang.github.io/rust-clippy/master/index.html#ineffective_bit_mask"}, {"sha": "1300c5ad47bf0bd2ba654770ae66ecf3aa03b8ed", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff0d44e45a27e688b5ee5447dc9175d5e72b37c9/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/ff0d44e45a27e688b5ee5447dc9175d5e72b37c9/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=ff0d44e45a27e688b5ee5447dc9175d5e72b37c9", "patch": "@@ -5,7 +5,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 357 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are 358 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "eed4f58cf902d82458c38bbe274df127b815cc71", "filename": "clippy_lints/src/floating_point_arithmetic.rs", "status": "modified", "additions": 44, "deletions": 11, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/ff0d44e45a27e688b5ee5447dc9175d5e72b37c9/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0d44e45a27e688b5ee5447dc9175d5e72b37c9/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs?ref=ff0d44e45a27e688b5ee5447dc9175d5e72b37c9", "patch": "@@ -16,6 +16,39 @@ use std::f64::consts as f64_consts;\n use sugg::{format_numeric_literal, Sugg};\n use syntax::ast;\n \n+declare_clippy_lint! {\n+    /// **What it does:** Looks for floating-point expressions that\n+    /// can be expressed using built-in methods to improve accuracy\n+    /// at the cost of performance.\n+    ///\n+    /// **Why is this bad?** Negatively impacts accuracy.\n+    ///\n+    /// **Known problems:** None\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    ///\n+    /// let a = 3f32;\n+    /// let _ = a.powf(1.0 / 3.0);\n+    /// let _ = (1.0 + a).ln();\n+    /// let _ = a.exp() - 1.0;\n+    /// ```\n+    ///\n+    /// is better expressed as\n+    ///\n+    /// ```rust\n+    ///\n+    /// let a = 3f32;\n+    /// let _ = a.cbrt();\n+    /// let _ = a.ln_1p();\n+    /// let _ = a.exp_m1();\n+    /// ```\n+    pub IMPRECISE_FLOPS,\n+    nursery,\n+    \"usage of imprecise floating point operations\"\n+}\n+\n declare_clippy_lint! {\n     /// **What it does:** Looks for floating-point expressions that\n     /// can be expressed using built-in methods to improve both\n@@ -34,12 +67,9 @@ declare_clippy_lint! {\n     /// let _ = (2f32).powf(a);\n     /// let _ = E.powf(a);\n     /// let _ = a.powf(1.0 / 2.0);\n-    /// let _ = a.powf(1.0 / 3.0);\n     /// let _ = a.log(2.0);\n     /// let _ = a.log(10.0);\n     /// let _ = a.log(E);\n-    /// let _ = (1.0 + a).ln();\n-    /// let _ = a.exp() - 1.0;\n     /// let _ = a.powf(2.0);\n     /// let _ = a * 2.0 + 4.0;\n     /// ```\n@@ -53,12 +83,9 @@ declare_clippy_lint! {\n     /// let _ = a.exp2();\n     /// let _ = a.exp();\n     /// let _ = a.sqrt();\n-    /// let _ = a.cbrt();\n     /// let _ = a.log2();\n     /// let _ = a.log10();\n     /// let _ = a.ln();\n-    /// let _ = a.ln_1p();\n-    /// let _ = a.exp_m1();\n     /// let _ = a.powi(2);\n     /// let _ = a.mul_add(2.0, 4.0);\n     /// ```\n@@ -67,7 +94,10 @@ declare_clippy_lint! {\n     \"usage of sub-optimal floating point operations\"\n }\n \n-declare_lint_pass!(FloatingPointArithmetic => [SUBOPTIMAL_FLOPS]);\n+declare_lint_pass!(FloatingPointArithmetic => [\n+    IMPRECISE_FLOPS,\n+    SUBOPTIMAL_FLOPS\n+]);\n \n // Returns the specialized log method for a given base if base is constant\n // and is one of 2, 10 and e\n@@ -156,7 +186,7 @@ fn check_ln1p(cx: &LateContext<'_, '_>, expr: &Expr<'_>, args: &[Expr<'_>]) {\n \n         span_lint_and_sugg(\n             cx,\n-            SUBOPTIMAL_FLOPS,\n+            IMPRECISE_FLOPS,\n             expr.span,\n             \"ln(1 + x) can be computed more accurately\",\n             \"consider using\",\n@@ -215,18 +245,21 @@ fn check_powf(cx: &LateContext<'_, '_>, expr: &Expr<'_>, args: &[Expr<'_>]) {\n \n     // Check argument\n     if let Some((value, _)) = constant(cx, cx.tables, &args[1]) {\n-        let (help, suggestion) = if F32(1.0 / 2.0) == value || F64(1.0 / 2.0) == value {\n+        let (lint, help, suggestion) = if F32(1.0 / 2.0) == value || F64(1.0 / 2.0) == value {\n             (\n+                SUBOPTIMAL_FLOPS,\n                 \"square-root of a number can be computed more efficiently and accurately\",\n                 format!(\"{}.sqrt()\", Sugg::hir(cx, &args[0], \"..\")),\n             )\n         } else if F32(1.0 / 3.0) == value || F64(1.0 / 3.0) == value {\n             (\n+                IMPRECISE_FLOPS,\n                 \"cube-root of a number can be computed more accurately\",\n                 format!(\"{}.cbrt()\", Sugg::hir(cx, &args[0], \"..\")),\n             )\n         } else if let Some(exponent) = get_integer_from_float_constant(&value) {\n             (\n+                SUBOPTIMAL_FLOPS,\n                 \"exponentiation with integer powers can be computed more efficiently\",\n                 format!(\n                     \"{}.powi({})\",\n@@ -240,7 +273,7 @@ fn check_powf(cx: &LateContext<'_, '_>, expr: &Expr<'_>, args: &[Expr<'_>]) {\n \n         span_lint_and_sugg(\n             cx,\n-            SUBOPTIMAL_FLOPS,\n+            lint,\n             expr.span,\n             help,\n             \"consider using\",\n@@ -264,7 +297,7 @@ fn check_expm1(cx: &LateContext<'_, '_>, expr: &Expr<'_>) {\n         then {\n             span_lint_and_sugg(\n                 cx,\n-                SUBOPTIMAL_FLOPS,\n+                IMPRECISE_FLOPS,\n                 expr.span,\n                 \"(e.pow(x) - 1) can be computed more accurately\",\n                 \"consider using\","}, {"sha": "c732657b2e57159c952c48487ec401f44ae7053a", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff0d44e45a27e688b5ee5447dc9175d5e72b37c9/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0d44e45a27e688b5ee5447dc9175d5e72b37c9/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=ff0d44e45a27e688b5ee5447dc9175d5e72b37c9", "patch": "@@ -538,6 +538,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &fallible_impl_from::FALLIBLE_IMPL_FROM,\n         &float_literal::EXCESSIVE_PRECISION,\n         &float_literal::LOSSY_FLOAT_LITERAL,\n+        &floating_point_arithmetic::IMPRECISE_FLOPS,\n         &floating_point_arithmetic::SUBOPTIMAL_FLOPS,\n         &format::USELESS_FORMAT,\n         &formatting::POSSIBLE_MISSING_COMMA,\n@@ -1648,6 +1649,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_group(true, \"clippy::nursery\", Some(\"clippy_nursery\"), vec![\n         LintId::of(&attrs::EMPTY_LINE_AFTER_OUTER_ATTR),\n         LintId::of(&fallible_impl_from::FALLIBLE_IMPL_FROM),\n+        LintId::of(&floating_point_arithmetic::IMPRECISE_FLOPS),\n         LintId::of(&floating_point_arithmetic::SUBOPTIMAL_FLOPS),\n         LintId::of(&missing_const_for_fn::MISSING_CONST_FOR_FN),\n         LintId::of(&mutable_debug_assertion::DEBUG_ASSERT_WITH_MUT_CALL),"}, {"sha": "15e6a4b6036a7606969fda62247ab539d52e9f25", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ff0d44e45a27e688b5ee5447dc9175d5e72b37c9/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0d44e45a27e688b5ee5447dc9175d5e72b37c9/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=ff0d44e45a27e688b5ee5447dc9175d5e72b37c9", "patch": "@@ -6,7 +6,7 @@ pub use lint::Lint;\n pub use lint::LINT_LEVELS;\n \n // begin lint list, do not remove this comment, it\u2019s used in `update_lints`\n-pub const ALL_LINTS: [Lint; 357] = [\n+pub const ALL_LINTS: [Lint; 358] = [\n     Lint {\n         name: \"absurd_extreme_comparisons\",\n         group: \"correctness\",\n@@ -749,6 +749,13 @@ pub const ALL_LINTS: [Lint; 357] = [\n         deprecation: None,\n         module: \"implicit_return\",\n     },\n+    Lint {\n+        name: \"imprecise_flops\",\n+        group: \"nursery\",\n+        desc: \"usage of imprecise floating point operations\",\n+        deprecation: None,\n+        module: \"floating_point_arithmetic\",\n+    },\n     Lint {\n         name: \"inconsistent_digit_grouping\",\n         group: \"style\","}, {"sha": "ae7805fdf018eea7228cecc02adcb4781173768e", "filename": "tests/ui/floating_point_exp.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff0d44e45a27e688b5ee5447dc9175d5e72b37c9/tests%2Fui%2Ffloating_point_exp.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ff0d44e45a27e688b5ee5447dc9175d5e72b37c9/tests%2Fui%2Ffloating_point_exp.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_exp.fixed?ref=ff0d44e45a27e688b5ee5447dc9175d5e72b37c9", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![warn(clippy::suboptimal_flops)]\n+#![warn(clippy::imprecise_flops)]\n \n fn main() {\n     let x = 2f32;"}, {"sha": "27e0b9bcbc937a829e9e1d9ce7d7fb286c0c63d6", "filename": "tests/ui/floating_point_exp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff0d44e45a27e688b5ee5447dc9175d5e72b37c9/tests%2Fui%2Ffloating_point_exp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0d44e45a27e688b5ee5447dc9175d5e72b37c9/tests%2Fui%2Ffloating_point_exp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_exp.rs?ref=ff0d44e45a27e688b5ee5447dc9175d5e72b37c9", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![warn(clippy::suboptimal_flops)]\n+#![warn(clippy::imprecise_flops)]\n \n fn main() {\n     let x = 2f32;"}, {"sha": "5cd999ad47cdd0d768138c901b1a9df01d891d8b", "filename": "tests/ui/floating_point_exp.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff0d44e45a27e688b5ee5447dc9175d5e72b37c9/tests%2Fui%2Ffloating_point_exp.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff0d44e45a27e688b5ee5447dc9175d5e72b37c9/tests%2Fui%2Ffloating_point_exp.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_exp.stderr?ref=ff0d44e45a27e688b5ee5447dc9175d5e72b37c9", "patch": "@@ -4,7 +4,7 @@ error: (e.pow(x) - 1) can be computed more accurately\n LL |     let _ = x.exp() - 1.0;\n    |             ^^^^^^^^^^^^^ help: consider using: `x.exp_m1()`\n    |\n-   = note: `-D clippy::suboptimal-flops` implied by `-D warnings`\n+   = note: `-D clippy::imprecise-flops` implied by `-D warnings`\n \n error: (e.pow(x) - 1) can be computed more accurately\n   --> $DIR/floating_point_exp.rs:7:13"}, {"sha": "42c5e5d2bae2418c4330959aa559382a46f4940f", "filename": "tests/ui/floating_point_log.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff0d44e45a27e688b5ee5447dc9175d5e72b37c9/tests%2Fui%2Ffloating_point_log.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ff0d44e45a27e688b5ee5447dc9175d5e72b37c9/tests%2Fui%2Ffloating_point_log.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_log.fixed?ref=ff0d44e45a27e688b5ee5447dc9175d5e72b37c9", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n #![allow(dead_code, clippy::double_parens)]\n-#![warn(clippy::suboptimal_flops)]\n+#![warn(clippy::suboptimal_flops, clippy::imprecise_flops)]\n \n const TWO: f32 = 2.0;\n const E: f32 = std::f32::consts::E;"}, {"sha": "8be0d9ad56fc34fa07f120eda343a6ab61257047", "filename": "tests/ui/floating_point_log.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff0d44e45a27e688b5ee5447dc9175d5e72b37c9/tests%2Fui%2Ffloating_point_log.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0d44e45a27e688b5ee5447dc9175d5e72b37c9/tests%2Fui%2Ffloating_point_log.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_log.rs?ref=ff0d44e45a27e688b5ee5447dc9175d5e72b37c9", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n #![allow(dead_code, clippy::double_parens)]\n-#![warn(clippy::suboptimal_flops)]\n+#![warn(clippy::suboptimal_flops, clippy::imprecise_flops)]\n \n const TWO: f32 = 2.0;\n const E: f32 = std::f32::consts::E;"}, {"sha": "943fbdb0b83232964312d49beedce567093ce20b", "filename": "tests/ui/floating_point_log.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff0d44e45a27e688b5ee5447dc9175d5e72b37c9/tests%2Fui%2Ffloating_point_log.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff0d44e45a27e688b5ee5447dc9175d5e72b37c9/tests%2Fui%2Ffloating_point_log.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_log.stderr?ref=ff0d44e45a27e688b5ee5447dc9175d5e72b37c9", "patch": "@@ -53,6 +53,8 @@ error: ln(1 + x) can be computed more accurately\n    |\n LL |     let _ = (1f32 + 2.).ln();\n    |             ^^^^^^^^^^^^^^^^ help: consider using: `2.0f32.ln_1p()`\n+   |\n+   = note: `-D clippy::imprecise-flops` implied by `-D warnings`\n \n error: ln(1 + x) can be computed more accurately\n   --> $DIR/floating_point_log.rs:25:13"}, {"sha": "78a9d44829bb1ab708b1b39ed2fabffe2b3e24e4", "filename": "tests/ui/floating_point_powf.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff0d44e45a27e688b5ee5447dc9175d5e72b37c9/tests%2Fui%2Ffloating_point_powf.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ff0d44e45a27e688b5ee5447dc9175d5e72b37c9/tests%2Fui%2Ffloating_point_powf.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_powf.fixed?ref=ff0d44e45a27e688b5ee5447dc9175d5e72b37c9", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![warn(clippy::suboptimal_flops)]\n+#![warn(clippy::suboptimal_flops, clippy::imprecise_flops)]\n \n fn main() {\n     let x = 3f32;"}, {"sha": "dbc1cac5cb4315cb03ceb516542e15b4aa8e21a9", "filename": "tests/ui/floating_point_powf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff0d44e45a27e688b5ee5447dc9175d5e72b37c9/tests%2Fui%2Ffloating_point_powf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0d44e45a27e688b5ee5447dc9175d5e72b37c9/tests%2Fui%2Ffloating_point_powf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_powf.rs?ref=ff0d44e45a27e688b5ee5447dc9175d5e72b37c9", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![warn(clippy::suboptimal_flops)]\n+#![warn(clippy::suboptimal_flops, clippy::imprecise_flops)]\n \n fn main() {\n     let x = 3f32;"}, {"sha": "ad5163f0079be937ae34e629eaa5a5148c17190a", "filename": "tests/ui/floating_point_powf.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff0d44e45a27e688b5ee5447dc9175d5e72b37c9/tests%2Fui%2Ffloating_point_powf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff0d44e45a27e688b5ee5447dc9175d5e72b37c9/tests%2Fui%2Ffloating_point_powf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_powf.stderr?ref=ff0d44e45a27e688b5ee5447dc9175d5e72b37c9", "patch": "@@ -47,6 +47,8 @@ error: cube-root of a number can be computed more accurately\n    |\n LL |     let _ = x.powf(1.0 / 3.0);\n    |             ^^^^^^^^^^^^^^^^^ help: consider using: `x.cbrt()`\n+   |\n+   = note: `-D clippy::imprecise-flops` implied by `-D warnings`\n \n error: exponentiation with integer powers can be computed more efficiently\n   --> $DIR/floating_point_powf.rs:14:13"}]}