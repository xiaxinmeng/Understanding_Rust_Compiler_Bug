{"sha": "d316eba54d6778593ec87cdeffc32a89d0064ae9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzMTZlYmE1NGQ2Nzc4NTkzZWM4N2NkZWZmYzMyYTg5ZDAwNjRhZTk=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-03-06T10:46:03Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-03-06T10:46:03Z"}, "message": "Add opt_span_before() to SpanUtils trait\n\nWith some refactorings to avoid duplicated code.", "tree": {"sha": "a8c8c63a17261146ddb8bd0926d8f63fed20bf38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8c8c63a17261146ddb8bd0926d8f63fed20bf38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d316eba54d6778593ec87cdeffc32a89d0064ae9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d316eba54d6778593ec87cdeffc32a89d0064ae9", "html_url": "https://github.com/rust-lang/rust/commit/d316eba54d6778593ec87cdeffc32a89d0064ae9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d316eba54d6778593ec87cdeffc32a89d0064ae9/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64d838490a5afd0380d37714c9cbfa3207416da7", "url": "https://api.github.com/repos/rust-lang/rust/commits/64d838490a5afd0380d37714c9cbfa3207416da7", "html_url": "https://github.com/rust-lang/rust/commit/64d838490a5afd0380d37714c9cbfa3207416da7"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "f6c05f5be40ae9deedeba9ba4883e0ca6f74d3f4", "filename": "src/codemap.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d316eba54d6778593ec87cdeffc32a89d0064ae9/src%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d316eba54d6778593ec87cdeffc32a89d0064ae9/src%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcodemap.rs?ref=d316eba54d6778593ec87cdeffc32a89d0064ae9", "patch": "@@ -22,6 +22,7 @@ pub trait SpanUtils {\n     fn span_after_last(&self, original: Span, needle: &str) -> BytePos;\n     fn span_before(&self, original: Span, needle: &str) -> BytePos;\n     fn opt_span_after(&self, original: Span, needle: &str) -> Option<BytePos>;\n+    fn opt_span_before(&self, original: Span, needle: &str) -> Option<BytePos>;\n }\n \n pub trait LineRangeUtils {\n@@ -35,10 +36,7 @@ pub trait LineRangeUtils {\n \n impl<'a> SpanUtils for SnippetProvider<'a> {\n     fn span_after(&self, original: Span, needle: &str) -> BytePos {\n-        let snippet = self.span_to_snippet(original).expect(\"Bad snippet\");\n-        let offset = snippet.find_uncommented(needle).expect(\"Bad offset\") + needle.len();\n-\n-        original.lo() + BytePos(offset as u32)\n+        self.opt_span_after(original, needle).expect(\"bad span\")\n     }\n \n     fn span_after_last(&self, original: Span, needle: &str) -> BytePos {\n@@ -53,15 +51,17 @@ impl<'a> SpanUtils for SnippetProvider<'a> {\n     }\n \n     fn span_before(&self, original: Span, needle: &str) -> BytePos {\n-        let snippet = self.span_to_snippet(original).unwrap();\n-        let offset = snippet.find_uncommented(needle).unwrap();\n-\n-        original.lo() + BytePos(offset as u32)\n+        self.opt_span_before(original, needle).expect(\"bad span\")\n     }\n \n     fn opt_span_after(&self, original: Span, needle: &str) -> Option<BytePos> {\n+        self.opt_span_before(original, needle)\n+            .map(|bytepos| bytepos + BytePos(needle.len() as u32))\n+    }\n+\n+    fn opt_span_before(&self, original: Span, needle: &str) -> Option<BytePos> {\n         let snippet = self.span_to_snippet(original)?;\n-        let offset = snippet.find_uncommented(needle)? + needle.len();\n+        let offset = snippet.find_uncommented(needle)?;\n \n         Some(original.lo() + BytePos(offset as u32))\n     }"}]}