{"sha": "e08944fdafac547aecc1a94e44cc978a202eec86", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwODk0NGZkYWZhYzU0N2FlY2MxYTk0ZTQ0Y2M5NzhhMjAyZWVjODY=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-12-13T23:27:55Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-12-14T22:50:32Z"}, "message": "Do not ICE on unnamed future", "tree": {"sha": "097f6bf2f9010ca6a1331773d9559fc82e8b95b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/097f6bf2f9010ca6a1331773d9559fc82e8b95b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e08944fdafac547aecc1a94e44cc978a202eec86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e08944fdafac547aecc1a94e44cc978a202eec86", "html_url": "https://github.com/rust-lang/rust/commit/e08944fdafac547aecc1a94e44cc978a202eec86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e08944fdafac547aecc1a94e44cc978a202eec86/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de0abf7599023b71dd72b44f0165e86c040ee7ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/de0abf7599023b71dd72b44f0165e86c040ee7ea", "html_url": "https://github.com/rust-lang/rust/commit/de0abf7599023b71dd72b44f0165e86c040ee7ea"}], "stats": {"total": 61, "additions": 57, "deletions": 4}, "files": [{"sha": "69e772697f846e9af28159ba32a794616426a719", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e08944fdafac547aecc1a94e44cc978a202eec86/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08944fdafac547aecc1a94e44cc978a202eec86/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=e08944fdafac547aecc1a94e44cc978a202eec86", "patch": "@@ -1016,8 +1016,8 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n-    pub fn name(&self, id: HirId) -> Name {\n-        match self.get(id) {\n+    pub fn opt_name(&self, id: HirId) -> Option<Name> {\n+        Some(match self.get(id) {\n             Node::Item(i) => i.ident.name,\n             Node::ForeignItem(fi) => fi.ident.name,\n             Node::ImplItem(ii) => ii.ident.name,\n@@ -1028,7 +1028,14 @@ impl<'hir> Map<'hir> {\n             Node::GenericParam(param) => param.name.ident().name,\n             Node::Binding(&Pat { kind: PatKind::Binding(_, _, l, _), .. }) => l.name,\n             Node::Ctor(..) => self.name(self.get_parent_item(id)),\n-            _ => bug!(\"no name for {}\", self.node_to_string(id))\n+            _ => return None,\n+        })\n+    }\n+\n+    pub fn name(&self, id: HirId) -> Name {\n+        match self.opt_name(id) {\n+            Some(name) => name,\n+            None => bug!(\"no name for {}\", self.node_to_string(id)),\n         }\n     }\n "}, {"sha": "1a92d1eb8c5d30607b595fb45c8623f45b060d1a", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08944fdafac547aecc1a94e44cc978a202eec86/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08944fdafac547aecc1a94e44cc978a202eec86/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=e08944fdafac547aecc1a94e44cc978a202eec86", "patch": "@@ -2353,7 +2353,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             let message = if let Some(name) = last_generator\n                 .and_then(|generator_did| self.tcx.parent(generator_did))\n                 .and_then(|parent_did| self.tcx.hir().as_local_hir_id(parent_did))\n-                .map(|parent_hir_id| self.tcx.hir().name(parent_hir_id))\n+                .and_then(|parent_hir_id| self.tcx.hir().opt_name(parent_hir_id))\n             {\n                 format!(\"future returned by `{}` is not {}\", name, trait_name)\n             } else {"}, {"sha": "1a7ff613341ece66d7d2097028ccd642abfcf6fc", "filename": "src/test/ui/async-await/issue-67252-unnamed-future.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e08944fdafac547aecc1a94e44cc978a202eec86/src%2Ftest%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08944fdafac547aecc1a94e44cc978a202eec86/src%2Ftest%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.rs?ref=e08944fdafac547aecc1a94e44cc978a202eec86", "patch": "@@ -0,0 +1,24 @@\n+// edition:2018\n+use std::future::Future;\n+use std::pin::Pin;\n+use std::task::{Context, Poll};\n+\n+fn spawn<T: Send>(_: T) {}\n+\n+pub struct AFuture;\n+impl Future for AFuture{\n+    type Output = ();\n+\n+    fn poll(mut self: Pin<&mut Self>, _: &mut Context<'_>) -> Poll<()> {\n+        unimplemented!()\n+    }\n+}\n+\n+async fn foo() {\n+    spawn(async { //~ ERROR future cannot be sent between threads safely\n+        let _a = std::ptr::null_mut::<()>(); // `*mut ()` is not `Send`\n+        AFuture.await;\n+    });\n+}\n+\n+fn main() {}"}, {"sha": "24aedeb96597aecb69f43333960ec6e02de9693f", "filename": "src/test/ui/async-await/issue-67252-unnamed-future.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e08944fdafac547aecc1a94e44cc978a202eec86/src%2Ftest%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e08944fdafac547aecc1a94e44cc978a202eec86/src%2Ftest%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.stderr?ref=e08944fdafac547aecc1a94e44cc978a202eec86", "patch": "@@ -0,0 +1,22 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/issue-67252-unnamed-future.rs:18:5\n+   |\n+LL | fn spawn<T: Send>(_: T) {}\n+   |    -----    ---- required by this bound in `spawn`\n+...\n+LL |     spawn(async {\n+   |     ^^^^^ future is not `Send`\n+   |\n+   = help: within `impl std::future::Future`, the trait `std::marker::Send` is not implemented for `*mut ()`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/issue-67252-unnamed-future.rs:20:9\n+   |\n+LL |         let _a = std::ptr::null_mut::<()>(); // `*mut ()` is not `Send`\n+   |             -- has type `*mut ()`\n+LL |         AFuture.await;\n+   |         ^^^^^^^^^^^^^ await occurs here, with `_a` maybe used later\n+LL |     });\n+   |     - `_a` is later dropped here\n+\n+error: aborting due to previous error\n+"}]}