{"sha": "b8a92c1dd66c46a5150d2b899294d682683d87e2", "node_id": "C_kwDOAAsO6NoAKGI4YTkyYzFkZDY2YzQ2YTUxNTBkMmI4OTkyOTRkNjgyNjgzZDg3ZTI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-24T19:39:19Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-18T17:40:14Z"}, "message": "Revert \"Normalize opaques with escaping bound vars\"\n\nThis reverts commit 43119d643857efc366bfca527ac2dadfc3f2e906.", "tree": {"sha": "65dacba40228a162d2d6c45f1a9141cedbfd2679", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65dacba40228a162d2d6c45f1a9141cedbfd2679"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8a92c1dd66c46a5150d2b899294d682683d87e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8a92c1dd66c46a5150d2b899294d682683d87e2", "html_url": "https://github.com/rust-lang/rust/commit/b8a92c1dd66c46a5150d2b899294d682683d87e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8a92c1dd66c46a5150d2b899294d682683d87e2/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd3bfb35511cbcff59ce1454d3db627b576d7e92", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd3bfb35511cbcff59ce1454d3db627b576d7e92", "html_url": "https://github.com/rust-lang/rust/commit/fd3bfb35511cbcff59ce1454d3db627b576d7e92"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "528b98cf4a1c0915ff33a1471c3ce0fa1019adb1", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8a92c1dd66c46a5150d2b899294d682683d87e2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8a92c1dd66c46a5150d2b899294d682683d87e2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=b8a92c1dd66c46a5150d2b899294d682683d87e2", "patch": "@@ -508,7 +508,7 @@ impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n             // This is really important. While we *can* handle this, this has\n             // severe performance implications for large opaque types with\n             // late-bound regions. See `issue-88862` benchmark.\n-            ty::Opaque(def_id, substs) => {\n+            ty::Opaque(def_id, substs) if !substs.has_escaping_bound_vars() => {\n                 // Only normalize `impl Trait` outside of type inference, usually in codegen.\n                 match self.param_env.reveal() {\n                     Reveal::UserFacing => ty.super_fold_with(self),"}, {"sha": "a875ea1578dcb92d879b7f8ce80751ee13e97c5d", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8a92c1dd66c46a5150d2b899294d682683d87e2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8a92c1dd66c46a5150d2b899294d682683d87e2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=b8a92c1dd66c46a5150d2b899294d682683d87e2", "patch": "@@ -198,7 +198,7 @@ impl<'cx, 'tcx> FallibleTypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n             // This is really important. While we *can* handle this, this has\n             // severe performance implications for large opaque types with\n             // late-bound regions. See `issue-88862` benchmark.\n-            ty::Opaque(def_id, substs) => {\n+            ty::Opaque(def_id, substs) if !substs.has_escaping_bound_vars() => {\n                 // Only normalize `impl Trait` outside of type inference, usually in codegen.\n                 match self.param_env.reveal() {\n                     Reveal::UserFacing => ty.try_super_fold_with(self),"}]}