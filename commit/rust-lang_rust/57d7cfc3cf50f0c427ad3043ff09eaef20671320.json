{"sha": "57d7cfc3cf50f0c427ad3043ff09eaef20671320", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3ZDdjZmMzY2Y1MGYwYzQyN2FkMzA0M2ZmMDllYWVmMjA2NzEzMjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-11T10:34:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-11T10:34:09Z"}, "message": "Auto merge of #56645 - pietroalbini:fix-unused-imports, r=estebank\n\nInitial implementation of rustfixable unused_imports lint\n\nThis PR adds the initial implementation of rustfixable `unused_imports` lint. The implementation works, but rustfix is not able to apply all the suggestions until https://github.com/rust-lang/rust/issues/53934 is fixed. It also needs https://github.com/rust-lang/rust/pull/58296 to hide the suggested note since it's really useless.\n\ncc https://github.com/rust-lang/rust/issues/47888\n\n<details><summary><code>cargo fix</code> in action on the <code>unused_imports</code> lint</summary>\n\n![screenshot from 2018-12-09 15-49-01](https://user-images.githubusercontent.com/2299951/49698874-3a026080-fbca-11e8-9bf1-24060b6c59c8.png)\n\n</details>", "tree": {"sha": "d40593847d0095027e50bd7a500c50530f90290f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d40593847d0095027e50bd7a500c50530f90290f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57d7cfc3cf50f0c427ad3043ff09eaef20671320", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57d7cfc3cf50f0c427ad3043ff09eaef20671320", "html_url": "https://github.com/rust-lang/rust/commit/57d7cfc3cf50f0c427ad3043ff09eaef20671320", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57d7cfc3cf50f0c427ad3043ff09eaef20671320/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "576df31bedd35a1c7336ce7259bbe93ab662edef", "url": "https://api.github.com/repos/rust-lang/rust/commits/576df31bedd35a1c7336ce7259bbe93ab662edef", "html_url": "https://github.com/rust-lang/rust/commit/576df31bedd35a1c7336ce7259bbe93ab662edef"}, {"sha": "5ef71508fec1e2f89b257f6b6b65e5ca3295d658", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ef71508fec1e2f89b257f6b6b65e5ca3295d658", "html_url": "https://github.com/rust-lang/rust/commit/5ef71508fec1e2f89b257f6b6b65e5ca3295d658"}], "stats": {"total": 279, "additions": 228, "deletions": 51}, "files": [{"sha": "cb31441ca47e1e23a97d4c7b93ad19e86c987314", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/57d7cfc3cf50f0c427ad3043ff09eaef20671320/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57d7cfc3cf50f0c427ad3043ff09eaef20671320/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=57d7cfc3cf50f0c427ad3043ff09eaef20671320", "patch": "@@ -473,6 +473,7 @@ pub enum BuiltinLintDiagnostics {\n     MacroExpandedMacroExportsAccessedByAbsolutePaths(Span),\n     ElidedLifetimesInPaths(usize, Span, bool, Span, String),\n     UnknownCrateTypes(Span, String, String),\n+    UnusedImports(String, Vec<(Span, String)>),\n }\n \n impl BuiltinLintDiagnostics {\n@@ -554,6 +555,15 @@ impl BuiltinLintDiagnostics {\n             BuiltinLintDiagnostics::UnknownCrateTypes(span, note, sugg) => {\n                 db.span_suggestion(span, &note, sugg, Applicability::MaybeIncorrect);\n             }\n+            BuiltinLintDiagnostics::UnusedImports(message, replaces) => {\n+                if !replaces.is_empty() {\n+                    db.multipart_suggestion(\n+                        &message,\n+                        replaces,\n+                        Applicability::MachineApplicable,\n+                    );\n+                }\n+            }\n         }\n     }\n }"}, {"sha": "3b6179f78558b1c10b90c2a53108656c869e0208", "filename": "src/librustc_resolve/check_unused.rs", "status": "modified", "additions": 181, "deletions": 22, "changes": 203, "blob_url": "https://github.com/rust-lang/rust/blob/57d7cfc3cf50f0c427ad3043ff09eaef20671320/src%2Flibrustc_resolve%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57d7cfc3cf50f0c427ad3043ff09eaef20671320/src%2Flibrustc_resolve%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fcheck_unused.rs?ref=57d7cfc3cf50f0c427ad3043ff09eaef20671320", "patch": "@@ -7,23 +7,52 @@\n //\n // Unused trait imports can't be checked until the method resolution. We save\n // candidates here, and do the actual check in librustc_typeck/check_unused.rs.\n+//\n+// Checking for unused imports is split into three steps:\n+//\n+//  - `UnusedImportCheckVisitor` walks the AST to find all the unused imports\n+//    inside of `UseTree`s, recording their `NodeId`s and grouping them by\n+//    the parent `use` item\n+//\n+//  - `calc_unused_spans` then walks over all the `use` items marked in the\n+//    previous step to collect the spans associated with the `NodeId`s and to\n+//    calculate the spans that can be removed by rustfix; This is done in a\n+//    separate step to be able to collapse the adjacent spans that rustfix\n+//    will remove\n+//\n+//  - `check_crate` finally emits the diagnostics based on the data generated\n+//    in the last step\n \n use std::ops::{Deref, DerefMut};\n \n use crate::Resolver;\n use crate::resolve_imports::ImportDirectiveSubclass;\n \n-use rustc::{lint, ty};\n use rustc::util::nodemap::NodeMap;\n+use rustc::{lint, ty};\n+use rustc_data_structures::fx::FxHashSet;\n use syntax::ast;\n use syntax::visit::{self, Visitor};\n use syntax_pos::{Span, MultiSpan, DUMMY_SP};\n \n+struct UnusedImport<'a> {\n+    use_tree: &'a ast::UseTree,\n+    use_tree_id: ast::NodeId,\n+    item_span: Span,\n+    unused: FxHashSet<ast::NodeId>,\n+}\n+\n+impl<'a> UnusedImport<'a> {\n+    fn add(&mut self, id: ast::NodeId) {\n+        self.unused.insert(id);\n+    }\n+}\n \n struct UnusedImportCheckVisitor<'a, 'b: 'a> {\n     resolver: &'a mut Resolver<'b>,\n     /// All the (so far) unused imports, grouped path list\n-    unused_imports: NodeMap<NodeMap<Span>>,\n+    unused_imports: NodeMap<UnusedImport<'a>>,\n+    base_use_tree: Option<&'a ast::UseTree>,\n     base_id: ast::NodeId,\n     item_span: Span,\n }\n@@ -46,24 +75,39 @@ impl<'a, 'b> DerefMut for UnusedImportCheckVisitor<'a, 'b> {\n impl<'a, 'b> UnusedImportCheckVisitor<'a, 'b> {\n     // We have information about whether `use` (import) directives are actually\n     // used now. If an import is not used at all, we signal a lint error.\n-    fn check_import(&mut self, item_id: ast::NodeId, id: ast::NodeId, span: Span) {\n+    fn check_import(&mut self, id: ast::NodeId) {\n         let mut used = false;\n         self.per_ns(|this, ns| used |= this.used_imports.contains(&(id, ns)));\n         if !used {\n             if self.maybe_unused_trait_imports.contains(&id) {\n                 // Check later.\n                 return;\n             }\n-            self.unused_imports.entry(item_id).or_default().insert(id, span);\n+            self.unused_import(self.base_id).add(id);\n         } else {\n             // This trait import is definitely used, in a way other than\n             // method resolution.\n             self.maybe_unused_trait_imports.remove(&id);\n-            if let Some(i) = self.unused_imports.get_mut(&item_id) {\n-                i.remove(&id);\n+            if let Some(i) = self.unused_imports.get_mut(&self.base_id) {\n+                i.unused.remove(&id);\n             }\n         }\n     }\n+\n+    fn unused_import(&mut self, id: ast::NodeId) -> &mut UnusedImport<'a> {\n+        let use_tree_id = self.base_id;\n+        let use_tree = self.base_use_tree.unwrap();\n+        let item_span = self.item_span;\n+\n+        self.unused_imports\n+            .entry(id)\n+            .or_insert_with(|| UnusedImport {\n+                use_tree,\n+                use_tree_id,\n+                item_span,\n+                unused: FxHashSet::default(),\n+            })\n+    }\n }\n \n impl<'a, 'b> Visitor<'a> for UnusedImportCheckVisitor<'a, 'b> {\n@@ -88,31 +132,112 @@ impl<'a, 'b> Visitor<'a> for UnusedImportCheckVisitor<'a, 'b> {\n         // This allows the grouping of all the lints in the same item\n         if !nested {\n             self.base_id = id;\n+            self.base_use_tree = Some(use_tree);\n         }\n \n         if let ast::UseTreeKind::Nested(ref items) = use_tree.kind {\n-            // If it's the parent group, cover the entire use item\n-            let span = if nested {\n-                use_tree.span\n-            } else {\n-                self.item_span\n-            };\n-\n             if items.is_empty() {\n-                self.unused_imports\n-                    .entry(self.base_id)\n-                    .or_default()\n-                    .insert(id, span);\n+                self.unused_import(self.base_id).add(id);\n             }\n         } else {\n-            let base_id = self.base_id;\n-            self.check_import(base_id, id, use_tree.span);\n+            self.check_import(id);\n         }\n \n         visit::walk_use_tree(self, use_tree, id);\n     }\n }\n \n+enum UnusedSpanResult {\n+    Used,\n+    FlatUnused(Span, Span),\n+    NestedFullUnused(Vec<Span>, Span),\n+    NestedPartialUnused(Vec<Span>, Vec<Span>),\n+}\n+\n+fn calc_unused_spans(\n+    unused_import: &UnusedImport<'_>,\n+    use_tree: &ast::UseTree,\n+    use_tree_id: ast::NodeId,\n+) -> UnusedSpanResult {\n+    // The full span is the whole item's span if this current tree is not nested inside another\n+    // This tells rustfix to remove the whole item if all the imports are unused\n+    let full_span = if unused_import.use_tree.span == use_tree.span {\n+        unused_import.item_span\n+    } else {\n+        use_tree.span\n+    };\n+    match use_tree.kind {\n+        ast::UseTreeKind::Simple(..) | ast::UseTreeKind::Glob => {\n+            if unused_import.unused.contains(&use_tree_id) {\n+                UnusedSpanResult::FlatUnused(use_tree.span, full_span)\n+            } else {\n+                UnusedSpanResult::Used\n+            }\n+        }\n+        ast::UseTreeKind::Nested(ref nested) => {\n+            if nested.len() == 0 {\n+                return UnusedSpanResult::FlatUnused(use_tree.span, full_span);\n+            }\n+\n+            let mut unused_spans = Vec::new();\n+            let mut to_remove = Vec::new();\n+            let mut all_nested_unused = true;\n+            let mut previous_unused = false;\n+            for (pos, (use_tree, use_tree_id)) in nested.iter().enumerate() {\n+                let remove = match calc_unused_spans(unused_import, use_tree, *use_tree_id) {\n+                    UnusedSpanResult::Used => {\n+                        all_nested_unused = false;\n+                        None\n+                    }\n+                    UnusedSpanResult::FlatUnused(span, remove) => {\n+                        unused_spans.push(span);\n+                        Some(remove)\n+                    }\n+                    UnusedSpanResult::NestedFullUnused(mut spans, remove) => {\n+                        unused_spans.append(&mut spans);\n+                        Some(remove)\n+                    }\n+                    UnusedSpanResult::NestedPartialUnused(mut spans, mut to_remove_extra) => {\n+                        all_nested_unused = false;\n+                        unused_spans.append(&mut spans);\n+                        to_remove.append(&mut to_remove_extra);\n+                        None\n+                    }\n+                };\n+                if let Some(remove) = remove {\n+                    let remove_span = if nested.len() == 1 {\n+                        remove\n+                    } else if pos == nested.len() - 1 || !all_nested_unused {\n+                        // Delete everything from the end of the last import, to delete the\n+                        // previous comma\n+                        nested[pos - 1].0.span.shrink_to_hi().to(use_tree.span)\n+                    } else {\n+                        // Delete everything until the next import, to delete the trailing commas\n+                        use_tree.span.to(nested[pos + 1].0.span.shrink_to_lo())\n+                    };\n+\n+                    // Try to collapse adjacent spans into a single one. This prevents all cases of\n+                    // overlapping removals, which are not supported by rustfix\n+                    if previous_unused && !to_remove.is_empty() {\n+                        let previous = to_remove.pop().unwrap();\n+                        to_remove.push(previous.to(remove_span));\n+                    } else {\n+                        to_remove.push(remove_span);\n+                    }\n+                }\n+                previous_unused = remove.is_some();\n+            }\n+            if unused_spans.is_empty() {\n+                UnusedSpanResult::Used\n+            } else if all_nested_unused {\n+                UnusedSpanResult::NestedFullUnused(unused_spans, full_span)\n+            } else {\n+                UnusedSpanResult::NestedPartialUnused(unused_spans, to_remove)\n+            }\n+        }\n+    }\n+}\n+\n pub fn check_crate(resolver: &mut Resolver<'_>, krate: &ast::Crate) {\n     for directive in resolver.potentially_unused_imports.iter() {\n         match directive.subclass {\n@@ -152,14 +277,33 @@ pub fn check_crate(resolver: &mut Resolver<'_>, krate: &ast::Crate) {\n     let mut visitor = UnusedImportCheckVisitor {\n         resolver,\n         unused_imports: Default::default(),\n+        base_use_tree: None,\n         base_id: ast::DUMMY_NODE_ID,\n         item_span: DUMMY_SP,\n     };\n     visit::walk_crate(&mut visitor, krate);\n \n-    for (id, spans) in &visitor.unused_imports {\n+    for unused in visitor.unused_imports.values() {\n+        let mut fixes = Vec::new();\n+        let mut spans = match calc_unused_spans(unused, unused.use_tree, unused.use_tree_id) {\n+            UnusedSpanResult::Used => continue,\n+            UnusedSpanResult::FlatUnused(span, remove) => {\n+                fixes.push((remove, String::new()));\n+                vec![span]\n+            }\n+            UnusedSpanResult::NestedFullUnused(spans, remove) => {\n+                fixes.push((remove, String::new()));\n+                spans\n+            }\n+            UnusedSpanResult::NestedPartialUnused(spans, remove) => {\n+                for fix in &remove {\n+                    fixes.push((*fix, String::new()));\n+                }\n+                spans\n+            }\n+        };\n+\n         let len = spans.len();\n-        let mut spans = spans.values().cloned().collect::<Vec<Span>>();\n         spans.sort();\n         let ms = MultiSpan::from_spans(spans.clone());\n         let mut span_snippets = spans.iter()\n@@ -177,6 +321,21 @@ pub fn check_crate(resolver: &mut Resolver<'_>, krate: &ast::Crate) {\n                           } else {\n                               String::new()\n                           });\n-        visitor.session.buffer_lint(lint::builtin::UNUSED_IMPORTS, *id, ms, &msg);\n+\n+        let fix_msg = if fixes.len() == 1 && fixes[0].0 == unused.item_span {\n+            \"remove the whole `use` item\"\n+        } else if spans.len() > 1 {\n+            \"remove the unused imports\"\n+        } else {\n+            \"remove the unused import\"\n+        };\n+\n+        visitor.session.buffer_lint_with_diagnostic(\n+            lint::builtin::UNUSED_IMPORTS,\n+            unused.use_tree_id,\n+            ms,\n+            &msg,\n+            lint::builtin::BuiltinLintDiagnostics::UnusedImports(fix_msg.into(), fixes),\n+        );\n     }\n }"}, {"sha": "b9638722778ee3ecf9bfbb7b8e7f6d83ced8da98", "filename": "src/test/ui/bad/bad-lint-cap2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57d7cfc3cf50f0c427ad3043ff09eaef20671320/src%2Ftest%2Fui%2Fbad%2Fbad-lint-cap2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57d7cfc3cf50f0c427ad3043ff09eaef20671320/src%2Ftest%2Fui%2Fbad%2Fbad-lint-cap2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-lint-cap2.stderr?ref=57d7cfc3cf50f0c427ad3043ff09eaef20671320", "patch": "@@ -2,7 +2,7 @@ error: unused import: `std::option`\n   --> $DIR/bad-lint-cap2.rs:6:5\n    |\n LL | use std::option; //~ ERROR\n-   |     ^^^^^^^^^^^\n+   | ----^^^^^^^^^^^- help: remove the whole `use` item\n    |\n note: lint level defined here\n   --> $DIR/bad-lint-cap2.rs:4:9"}, {"sha": "21ed50b550afc7414503daae72ca61a1c5f6f3d4", "filename": "src/test/ui/bad/bad-lint-cap3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57d7cfc3cf50f0c427ad3043ff09eaef20671320/src%2Ftest%2Fui%2Fbad%2Fbad-lint-cap3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57d7cfc3cf50f0c427ad3043ff09eaef20671320/src%2Ftest%2Fui%2Fbad%2Fbad-lint-cap3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-lint-cap3.stderr?ref=57d7cfc3cf50f0c427ad3043ff09eaef20671320", "patch": "@@ -2,7 +2,7 @@ warning: unused import: `std::option`\n   --> $DIR/bad-lint-cap3.rs:7:5\n    |\n LL | use std::option; //~ WARN\n-   |     ^^^^^^^^^^^\n+   | ----^^^^^^^^^^^- help: remove the whole `use` item\n    |\n note: lint level defined here\n   --> $DIR/bad-lint-cap3.rs:4:9"}, {"sha": "fa82e974e1e29c91e481abd1b22e6504b2f2e6f8", "filename": "src/test/ui/imports/unused.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57d7cfc3cf50f0c427ad3043ff09eaef20671320/src%2Ftest%2Fui%2Fimports%2Funused.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57d7cfc3cf50f0c427ad3043ff09eaef20671320/src%2Ftest%2Fui%2Fimports%2Funused.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Funused.stderr?ref=57d7cfc3cf50f0c427ad3043ff09eaef20671320", "patch": "@@ -2,7 +2,7 @@ error: unused import: `super::f`\n   --> $DIR/unused.rs:7:24\n    |\n LL |         pub(super) use super::f; //~ ERROR unused\n-   |                        ^^^^^^^^\n+   |         ---------------^^^^^^^^- help: remove the whole `use` item\n    |\n note: lint level defined here\n   --> $DIR/unused.rs:1:9"}, {"sha": "3cfadd33b8fec2abde7f987f6054f7cdc565fa5a", "filename": "src/test/ui/issues/issue-30730.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57d7cfc3cf50f0c427ad3043ff09eaef20671320/src%2Ftest%2Fui%2Fissues%2Fissue-30730.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57d7cfc3cf50f0c427ad3043ff09eaef20671320/src%2Ftest%2Fui%2Fissues%2Fissue-30730.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-30730.stderr?ref=57d7cfc3cf50f0c427ad3043ff09eaef20671320", "patch": "@@ -2,7 +2,7 @@ error: unused import: `std::thread`\n   --> $DIR/issue-30730.rs:3:5\n    |\n LL | use std::thread;\n-   |     ^^^^^^^^^^^\n+   | ----^^^^^^^^^^^- help: remove the whole `use` item\n    |\n note: lint level defined here\n   --> $DIR/issue-30730.rs:2:9"}, {"sha": "e588d24517c8cf02495cf99a3a807fbab337084f", "filename": "src/test/ui/lint/lint-directives-on-use-items-issue-10534.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57d7cfc3cf50f0c427ad3043ff09eaef20671320/src%2Ftest%2Fui%2Flint%2Flint-directives-on-use-items-issue-10534.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57d7cfc3cf50f0c427ad3043ff09eaef20671320/src%2Ftest%2Fui%2Flint%2Flint-directives-on-use-items-issue-10534.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-directives-on-use-items-issue-10534.stderr?ref=57d7cfc3cf50f0c427ad3043ff09eaef20671320", "patch": "@@ -2,7 +2,7 @@ error: unused import: `a::x`\n   --> $DIR/lint-directives-on-use-items-issue-10534.rs:12:9\n    |\n LL |     use a::x; //~ ERROR: unused import\n-   |         ^^^^\n+   |     ----^^^^- help: remove the whole `use` item\n    |\n note: lint level defined here\n   --> $DIR/lint-directives-on-use-items-issue-10534.rs:1:9\n@@ -14,7 +14,7 @@ error: unused import: `a::y`\n   --> $DIR/lint-directives-on-use-items-issue-10534.rs:21:9\n    |\n LL |     use a::y; //~ ERROR: unused import\n-   |         ^^^^\n+   |     ----^^^^- help: remove the whole `use` item\n    |\n note: lint level defined here\n   --> $DIR/lint-directives-on-use-items-issue-10534.rs:20:12"}, {"sha": "9c5b206203c1dc9df0fca647d9c91b4f575d453f", "filename": "src/test/ui/lint/lint-unused-imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57d7cfc3cf50f0c427ad3043ff09eaef20671320/src%2Ftest%2Fui%2Flint%2Flint-unused-imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57d7cfc3cf50f0c427ad3043ff09eaef20671320/src%2Ftest%2Fui%2Flint%2Flint-unused-imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unused-imports.rs?ref=57d7cfc3cf50f0c427ad3043ff09eaef20671320", "patch": "@@ -6,7 +6,7 @@ use bar::c::cc as cal;\n use std::mem::*;            // shouldn't get errors for not using\n                             // everything imported\n use std::fmt::{};\n-//~^ ERROR unused import: `use std::fmt::{};`\n+//~^ ERROR unused import: `std::fmt::{}`\n \n // Should get errors for both 'Some' and 'None'\n use std::option::Option::{Some, None};"}, {"sha": "7970b0201db70bd20a605cb4e8ce0f630d1a8da9", "filename": "src/test/ui/lint/lint-unused-imports.stderr", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/57d7cfc3cf50f0c427ad3043ff09eaef20671320/src%2Ftest%2Fui%2Flint%2Flint-unused-imports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57d7cfc3cf50f0c427ad3043ff09eaef20671320/src%2Ftest%2Fui%2Flint%2Flint-unused-imports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unused-imports.stderr?ref=57d7cfc3cf50f0c427ad3043ff09eaef20671320", "patch": "@@ -1,8 +1,8 @@\n-error: unused import: `use std::fmt::{};`\n-  --> $DIR/lint-unused-imports.rs:8:1\n+error: unused import: `std::fmt::{}`\n+  --> $DIR/lint-unused-imports.rs:8:5\n    |\n LL | use std::fmt::{};\n-   | ^^^^^^^^^^^^^^^^^\n+   | ----^^^^^^^^^^^^- help: remove the whole `use` item\n    |\n note: lint level defined here\n   --> $DIR/lint-unused-imports.rs:1:9\n@@ -14,37 +14,39 @@ error: unused imports: `None`, `Some`\n   --> $DIR/lint-unused-imports.rs:12:27\n    |\n LL | use std::option::Option::{Some, None};\n-   |                           ^^^^  ^^^^\n+   | --------------------------^^^^--^^^^-- help: remove the whole `use` item\n \n error: unused import: `test::A`\n   --> $DIR/lint-unused-imports.rs:15:5\n    |\n LL | use test::A;       //~ ERROR unused import: `test::A`\n-   |     ^^^^^^^\n+   | ----^^^^^^^- help: remove the whole `use` item\n \n error: unused import: `bar`\n   --> $DIR/lint-unused-imports.rs:24:18\n    |\n LL | use test2::{foo, bar}; //~ ERROR unused import: `bar`\n-   |                  ^^^\n+   |                --^^^\n+   |                |\n+   |                help: remove the unused import\n \n error: unused import: `foo::Square`\n   --> $DIR/lint-unused-imports.rs:52:13\n    |\n LL |         use foo::Square; //~ ERROR unused import: `foo::Square`\n-   |             ^^^^^^^^^^^\n+   |         ----^^^^^^^^^^^- help: remove the whole `use` item\n \n error: unused import: `self::g`\n   --> $DIR/lint-unused-imports.rs:68:9\n    |\n LL |     use self::g; //~ ERROR unused import: `self::g`\n-   |         ^^^^^^^\n+   |     ----^^^^^^^- help: remove the whole `use` item\n \n error: unused import: `test2::foo`\n   --> $DIR/lint-unused-imports.rs:77:9\n    |\n LL |     use test2::foo; //~ ERROR unused import: `test2::foo`\n-   |         ^^^^^^^^^^\n+   |     ----^^^^^^^^^^- help: remove the whole `use` item\n \n error: unused import: `test::B2`\n   --> $DIR/lint-unused-imports.rs:20:5"}, {"sha": "b808ca708a31195e94c5e9f70221ccf637e8315b", "filename": "src/test/ui/lint/lints-in-foreign-macros.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/57d7cfc3cf50f0c427ad3043ff09eaef20671320/src%2Ftest%2Fui%2Flint%2Flints-in-foreign-macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57d7cfc3cf50f0c427ad3043ff09eaef20671320/src%2Ftest%2Fui%2Flint%2Flints-in-foreign-macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flints-in-foreign-macros.stderr?ref=57d7cfc3cf50f0c427ad3043ff09eaef20671320", "patch": "@@ -2,7 +2,7 @@ warning: unused import: `std::string::ToString`\n   --> $DIR/lints-in-foreign-macros.rs:11:16\n    |\n LL |     () => {use std::string::ToString;} //~ WARN: unused import\n-   |                ^^^^^^^^^^^^^^^^^^^^^\n+   |            ----^^^^^^^^^^^^^^^^^^^^^- help: remove the whole `use` item\n ...\n LL | mod a { foo!(); }\n    |         ------- in this macro invocation\n@@ -17,13 +17,13 @@ warning: unused import: `std::string::ToString`\n   --> $DIR/lints-in-foreign-macros.rs:16:18\n    |\n LL | mod c { baz!(use std::string::ToString;); } //~ WARN: unused import\n-   |                  ^^^^^^^^^^^^^^^^^^^^^\n+   |              ----^^^^^^^^^^^^^^^^^^^^^- help: remove the whole `use` item\n \n warning: unused import: `std::string::ToString`\n   --> $DIR/lints-in-foreign-macros.rs:17:19\n    |\n LL | mod d { baz2!(use std::string::ToString;); } //~ WARN: unused import\n-   |                   ^^^^^^^^^^^^^^^^^^^^^\n+   |               ----^^^^^^^^^^^^^^^^^^^^^- help: remove the whole `use` item\n \n warning: missing documentation for crate\n   --> $DIR/lints-in-foreign-macros.rs:4:1"}, {"sha": "c7b36eaf2e76b4f10e9e53727ce9c5633839fc12", "filename": "src/test/ui/rfc-2166-underscore-imports/basic.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57d7cfc3cf50f0c427ad3043ff09eaef20671320/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Fbasic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57d7cfc3cf50f0c427ad3043ff09eaef20671320/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Fbasic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Fbasic.stderr?ref=57d7cfc3cf50f0c427ad3043ff09eaef20671320", "patch": "@@ -2,7 +2,7 @@ warning: unused import: `m::Tr1 as _`\n   --> $DIR/basic.rs:26:9\n    |\n LL |     use m::Tr1 as _; //~ WARN unused import\n-   |         ^^^^^^^^^^^\n+   |     ----^^^^^^^^^^^- help: remove the whole `use` item\n    |\n note: lint level defined here\n   --> $DIR/basic.rs:4:9\n@@ -14,5 +14,5 @@ warning: unused import: `S as _`\n   --> $DIR/basic.rs:27:9\n    |\n LL |     use S as _; //~ WARN unused import\n-   |         ^^^^^^\n+   |     ----^^^^^^- help: remove the whole `use` item\n "}, {"sha": "0bbc17276d98ba899a86eb0e8e09bf6ef635a8ac", "filename": "src/test/ui/rfc-2166-underscore-imports/unused-2018.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57d7cfc3cf50f0c427ad3043ff09eaef20671320/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Funused-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57d7cfc3cf50f0c427ad3043ff09eaef20671320/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Funused-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Funused-2018.stderr?ref=57d7cfc3cf50f0c427ad3043ff09eaef20671320", "patch": "@@ -2,7 +2,7 @@ error: unused import: `core::any`\n   --> $DIR/unused-2018.rs:6:9\n    |\n LL |     use core::any; //~ ERROR unused import: `core::any`\n-   |         ^^^^^^^^^\n+   |     ----^^^^^^^^^- help: remove the whole `use` item\n    |\n note: lint level defined here\n   --> $DIR/unused-2018.rs:3:9\n@@ -14,7 +14,7 @@ error: unused import: `core`\n   --> $DIR/unused-2018.rs:10:9\n    |\n LL |     use core; //~ ERROR unused import: `core`\n-   |         ^^^^\n+   |     ----^^^^- help: remove the whole `use` item\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6bd0e9be81f5ec047f1d3dd42ac05947f5fa5102", "filename": "src/test/ui/span/multispan-import-lint.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57d7cfc3cf50f0c427ad3043ff09eaef20671320/src%2Ftest%2Fui%2Fspan%2Fmultispan-import-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57d7cfc3cf50f0c427ad3043ff09eaef20671320/src%2Ftest%2Fui%2Fspan%2Fmultispan-import-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmultispan-import-lint.stderr?ref=57d7cfc3cf50f0c427ad3043ff09eaef20671320", "patch": "@@ -10,4 +10,8 @@ note: lint level defined here\n LL | #![warn(unused)]\n    |         ^^^^^^\n    = note: #[warn(unused_imports)] implied by #[warn(unused)]\n+help: remove the unused imports\n+   |\n+LL | use std::cmp::{min};\n+   |               -- --\n "}, {"sha": "5fe85954dc8e98f3266d56a11a086e1c39b757bd", "filename": "src/test/ui/use/use-nested-groups-unused-imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57d7cfc3cf50f0c427ad3043ff09eaef20671320/src%2Ftest%2Fui%2Fuse%2Fuse-nested-groups-unused-imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57d7cfc3cf50f0c427ad3043ff09eaef20671320/src%2Ftest%2Fui%2Fuse%2Fuse-nested-groups-unused-imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-nested-groups-unused-imports.rs?ref=57d7cfc3cf50f0c427ad3043ff09eaef20671320", "patch": "@@ -18,7 +18,7 @@ use foo::{Foo, bar::{baz::{}, foobar::*}, *};\n use foo::bar::baz::{*, *};\n     //~^ ERROR unused import: `*`\n use foo::{};\n-    //~^ ERROR unused import: `use foo::{};`\n+    //~^ ERROR unused import: `foo::{}`\n \n fn main() {\n     let _: Bar;"}, {"sha": "6af6f449de5e6b5d2f14390409f37a4336dabf38", "filename": "src/test/ui/use/use-nested-groups-unused-imports.stderr", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/57d7cfc3cf50f0c427ad3043ff09eaef20671320/src%2Ftest%2Fui%2Fuse%2Fuse-nested-groups-unused-imports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57d7cfc3cf50f0c427ad3043ff09eaef20671320/src%2Ftest%2Fui%2Fuse%2Fuse-nested-groups-unused-imports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-nested-groups-unused-imports.stderr?ref=57d7cfc3cf50f0c427ad3043ff09eaef20671320", "patch": "@@ -2,7 +2,7 @@ error: unused imports: `*`, `Foo`, `baz::{}`, `foobar::*`\n   --> $DIR/use-nested-groups-unused-imports.rs:16:11\n    |\n LL | use foo::{Foo, bar::{baz::{}, foobar::*}, *};\n-   |           ^^^        ^^^^^^^  ^^^^^^^^^   ^\n+   | ----------^^^--------^^^^^^^--^^^^^^^^^---^-- help: remove the whole `use` item\n    |\n note: lint level defined here\n   --> $DIR/use-nested-groups-unused-imports.rs:3:9\n@@ -14,13 +14,15 @@ error: unused import: `*`\n   --> $DIR/use-nested-groups-unused-imports.rs:18:24\n    |\n LL | use foo::bar::baz::{*, *};\n-   |                        ^\n+   |                      --^\n+   |                      |\n+   |                      help: remove the unused import\n \n-error: unused import: `use foo::{};`\n-  --> $DIR/use-nested-groups-unused-imports.rs:20:1\n+error: unused import: `foo::{}`\n+  --> $DIR/use-nested-groups-unused-imports.rs:20:5\n    |\n LL | use foo::{};\n-   | ^^^^^^^^^^^^\n+   | ----^^^^^^^- help: remove the whole `use` item\n \n error: aborting due to 3 previous errors\n "}]}