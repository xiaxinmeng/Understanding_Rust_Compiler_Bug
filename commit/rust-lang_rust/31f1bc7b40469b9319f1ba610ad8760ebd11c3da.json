{"sha": "31f1bc7b40469b9319f1ba610ad8760ebd11c3da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxZjFiYzdiNDA0NjliOTMxOWYxYmE2MTBhZDg3NjBlYmQxMWMzZGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-15T21:35:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-15T21:35:22Z"}, "message": "Auto merge of #52400 - RalfJung:match, r=oli-obk\n\nCTFE: use binary_op to compare integer with match disriminant\n\nThis is needed to unblock https://github.com/solson/miri/pull/401: There is code in the Windows initialization functions that uses `match` to test whether a pointer is NULL.\n\nI will add a testcase in miri; I was not sure where to add a testcase in Rust itself.\n\nr? @oli-obk", "tree": {"sha": "5879efed635766e98116fb81764b52bef21a42f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5879efed635766e98116fb81764b52bef21a42f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31f1bc7b40469b9319f1ba610ad8760ebd11c3da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31f1bc7b40469b9319f1ba610ad8760ebd11c3da", "html_url": "https://github.com/rust-lang/rust/commit/31f1bc7b40469b9319f1ba610ad8760ebd11c3da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31f1bc7b40469b9319f1ba610ad8760ebd11c3da/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82e5c9c8e2c4f47a8e1090ad8e6be5a16f82795e", "url": "https://api.github.com/repos/rust-lang/rust/commits/82e5c9c8e2c4f47a8e1090ad8e6be5a16f82795e", "html_url": "https://github.com/rust-lang/rust/commit/82e5c9c8e2c4f47a8e1090ad8e6be5a16f82795e"}, {"sha": "f9825c215b9b76dd42504e72887f82eca0469c96", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9825c215b9b76dd42504e72887f82eca0469c96", "html_url": "https://github.com/rust-lang/rust/commit/f9825c215b9b76dd42504e72887f82eca0469c96"}], "stats": {"total": 65, "additions": 61, "deletions": 4}, "files": [{"sha": "e281ba79639799c7a75e874a76a63814fe630444", "filename": "src/librustc_mir/interpret/terminator/mod.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/31f1bc7b40469b9319f1ba610ad8760ebd11c3da/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31f1bc7b40469b9319f1ba610ad8760ebd11c3da/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs?ref=31f1bc7b40469b9319f1ba610ad8760ebd11c3da", "patch": "@@ -1,10 +1,10 @@\n use rustc::mir;\n use rustc::ty::{self, Ty};\n-use rustc::ty::layout::LayoutOf;\n+use rustc::ty::layout::{LayoutOf, Size};\n use syntax::codemap::Span;\n use rustc_target::spec::abi::Abi;\n \n-use rustc::mir::interpret::EvalResult;\n+use rustc::mir::interpret::{EvalResult, Scalar};\n use super::{EvalContext, Place, Machine, ValTy};\n \n use rustc_data_structures::indexed_vec::Idx;\n@@ -41,13 +41,18 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n                 let discr_prim = self.value_to_scalar(discr_val)?;\n                 let discr_layout = self.layout_of(discr_val.ty).unwrap();\n                 trace!(\"SwitchInt({:?}, {:#?})\", discr_prim, discr_layout);\n-                let discr_prim = discr_prim.to_bits(discr_layout.size)?;\n \n                 // Branch to the `otherwise` case by default, if no match is found.\n                 let mut target_block = targets[targets.len() - 1];\n \n                 for (index, &const_int) in values.iter().enumerate() {\n-                    if discr_prim == const_int {\n+                    // Compare using binary_op\n+                    let const_int = Scalar::Bits { bits: const_int, defined: 128 };\n+                    let res = self.binary_op(mir::BinOp::Eq,\n+                        discr_prim, discr_val.ty,\n+                        const_int, discr_val.ty\n+                    )?;\n+                    if res.0.to_bits(Size::from_bytes(1))? != 0 {\n                         target_block = targets[index];\n                         break;\n                     }"}, {"sha": "19b3dcc318154321cacc57ae1afe79e6f201c8f1", "filename": "src/test/ui/const-eval/match-test-ptr-null.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/31f1bc7b40469b9319f1ba610ad8760ebd11c3da/src%2Ftest%2Fui%2Fconst-eval%2Fmatch-test-ptr-null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31f1bc7b40469b9319f1ba610ad8760ebd11c3da/src%2Ftest%2Fui%2Fconst-eval%2Fmatch-test-ptr-null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fmatch-test-ptr-null.rs?ref=31f1bc7b40469b9319f1ba610ad8760ebd11c3da", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    // Make sure match uses the usual pointer comparison code path -- i.e., it should complain\n+    // that pointer comparison is disallowed, not that parts of a pointer are accessed as raw\n+    // bytes.\n+    let _: [u8; 0] = [4; { //~ ERROR could not evaluate repeat length\n+        match &1 as *const i32 as usize { //~ ERROR raw pointers cannot be cast to integers\n+            0 => 42, //~ ERROR constant contains unimplemented expression type\n+            //~^ NOTE \"pointer arithmetic or comparison\" needs an rfc before being allowed\n+            n => n,\n+        }\n+    }];\n+}"}, {"sha": "726ada9b428aa5d8c082c0fe03d5610969ec1ada", "filename": "src/test/ui/const-eval/match-test-ptr-null.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/31f1bc7b40469b9319f1ba610ad8760ebd11c3da/src%2Ftest%2Fui%2Fconst-eval%2Fmatch-test-ptr-null.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31f1bc7b40469b9319f1ba610ad8760ebd11c3da/src%2Ftest%2Fui%2Fconst-eval%2Fmatch-test-ptr-null.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fmatch-test-ptr-null.stderr?ref=31f1bc7b40469b9319f1ba610ad8760ebd11c3da", "patch": "@@ -0,0 +1,30 @@\n+error[E0018]: raw pointers cannot be cast to integers in constants\n+  --> $DIR/match-test-ptr-null.rs:16:15\n+   |\n+LL |         match &1 as *const i32 as usize { //~ ERROR raw pointers cannot be cast to integers\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0019]: constant contains unimplemented expression type\n+  --> $DIR/match-test-ptr-null.rs:17:13\n+   |\n+LL |             0 => 42, //~ ERROR constant contains unimplemented expression type\n+   |             ^\n+\n+error[E0080]: could not evaluate repeat length\n+  --> $DIR/match-test-ptr-null.rs:15:26\n+   |\n+LL |       let _: [u8; 0] = [4; { //~ ERROR could not evaluate repeat length\n+   |  __________________________^\n+LL | |         match &1 as *const i32 as usize { //~ ERROR raw pointers cannot be cast to integers\n+LL | |             0 => 42, //~ ERROR constant contains unimplemented expression type\n+   | |             - \"pointer arithmetic or comparison\" needs an rfc before being allowed inside constants\n+LL | |             //~^ NOTE \"pointer arithmetic or comparison\" needs an rfc before being allowed\n+LL | |             n => n,\n+LL | |         }\n+LL | |     }];\n+   | |_____^\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors occurred: E0018, E0019, E0080.\n+For more information about an error, try `rustc --explain E0018`."}]}