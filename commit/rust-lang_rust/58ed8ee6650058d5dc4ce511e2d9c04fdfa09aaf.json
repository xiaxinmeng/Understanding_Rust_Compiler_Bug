{"sha": "58ed8ee6650058d5dc4ce511e2d9c04fdfa09aaf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4ZWQ4ZWU2NjUwMDU4ZDVkYzRjZTUxMWUyZDljMDRmZGZhMDlhYWY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-02-11T12:39:26Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-02-11T12:41:39Z"}, "message": "use extern prelude in Resolver\n\nThis fixes two bugs:\n\n- completion for paths works again\n- we handle extern prelude shadowing more correctly", "tree": {"sha": "1a45d04e9cef82dd57967e99e9af9b923a193836", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a45d04e9cef82dd57967e99e9af9b923a193836"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58ed8ee6650058d5dc4ce511e2d9c04fdfa09aaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58ed8ee6650058d5dc4ce511e2d9c04fdfa09aaf", "html_url": "https://github.com/rust-lang/rust/commit/58ed8ee6650058d5dc4ce511e2d9c04fdfa09aaf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58ed8ee6650058d5dc4ce511e2d9c04fdfa09aaf/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2babbbb97800b526cc29f244bb6ea58b213d24f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/2babbbb97800b526cc29f244bb6ea58b213d24f3", "html_url": "https://github.com/rust-lang/rust/commit/2babbbb97800b526cc29f244bb6ea58b213d24f3"}], "stats": {"total": 99, "additions": 81, "deletions": 18}, "files": [{"sha": "4b80972353a4ab66d851592c93b84c1c47f56ee3", "filename": "crates/ra_hir/src/nameres.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/58ed8ee6650058d5dc4ce511e2d9c04fdfa09aaf/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58ed8ee6650058d5dc4ce511e2d9c04fdfa09aaf/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres.rs?ref=58ed8ee6650058d5dc4ce511e2d9c04fdfa09aaf", "patch": "@@ -434,6 +434,14 @@ impl ItemMap {\n         self.resolve_path_fp(db, original_module, path).0\n     }\n \n+    pub(crate) fn resolve_name_in_module(&self, module: Module, name: &Name) -> PerNs<ModuleDef> {\n+        let from_scope = self[module.module_id].items.get(name).map_or(PerNs::none(), |it| it.def);\n+        let from_extern_prelude =\n+            self.extern_prelude.get(name).map_or(PerNs::none(), |&it| PerNs::types(it));\n+\n+        from_scope.combine(from_extern_prelude)\n+    }\n+\n     // Returns Yes if we are sure that additions to `ItemMap` wouldn't change\n     // the result.\n     fn resolve_path_fp(\n@@ -451,19 +459,7 @@ impl ItemMap {\n                     Some((_, segment)) => segment,\n                     None => return (PerNs::none(), ReachedFixedPoint::Yes),\n                 };\n-                // Resolve in:\n-                //  - current module / scope\n-                //  - extern prelude\n-                match self[original_module.module_id].items.get(&segment.name) {\n-                    Some(res) if !res.def.is_none() => res.def,\n-                    _ => {\n-                        if let Some(def) = self.extern_prelude.get(&segment.name) {\n-                            PerNs::types(*def)\n-                        } else {\n-                            return (PerNs::none(), ReachedFixedPoint::No);\n-                        }\n-                    }\n-                }\n+                self.resolve_name_in_module(original_module, &segment.name)\n             }\n             PathKind::Super => {\n                 if let Some(p) = original_module.parent(db) {"}, {"sha": "f1a1f5b76904e72e27695a803095261373b9cc3f", "filename": "crates/ra_hir/src/nameres/tests.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/58ed8ee6650058d5dc4ce511e2d9c04fdfa09aaf/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58ed8ee6650058d5dc4ce511e2d9c04fdfa09aaf/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs?ref=58ed8ee6650058d5dc4ce511e2d9c04fdfa09aaf", "patch": "@@ -536,6 +536,38 @@ fn reexport_across_crates() {\n     );\n }\n \n+#[test]\n+fn values_dont_shadow_extern_crates() {\n+    let mut db = MockDatabase::with_files(\n+        \"\n+        //- /main.rs\n+        fn foo() {}\n+        use foo::Bar;\n+\n+        //- /foo/lib.rs\n+        pub struct Bar;\n+        \",\n+    );\n+    db.set_crate_graph_from_fixture(crate_graph! {\n+        \"main\": (\"/main.rs\", [\"foo\"]),\n+        \"foo\": (\"/foo/lib.rs\", []),\n+    });\n+    let main_id = db.file_id_of(\"/main.rs\");\n+\n+    let module = crate::source_binder::module_from_file_id(&db, main_id).unwrap();\n+    let krate = module.krate(&db).unwrap();\n+    let item_map = db.item_map(krate);\n+\n+    check_module_item_map(\n+        &item_map,\n+        module.module_id,\n+        \"\n+        Bar: t v\n+        foo: v\n+        \",\n+    );\n+}\n+\n fn check_item_map_is_not_recomputed(initial: &str, file_change: &str) {\n     let (mut db, pos) = MockDatabase::with_position(initial);\n     let module = crate::source_binder::module_from_file_id(&db, pos.file_id).unwrap();"}, {"sha": "e8abac5bc95cdef22cf7185714aa909bc53671d3", "filename": "crates/ra_hir/src/resolve.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/58ed8ee6650058d5dc4ce511e2d9c04fdfa09aaf/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58ed8ee6650058d5dc4ce511e2d9c04fdfa09aaf/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fresolve.rs?ref=58ed8ee6650058d5dc4ce511e2d9c04fdfa09aaf", "patch": "@@ -149,10 +149,7 @@ impl Scope {\n                 if let Some(KnownName::SelfParam) = name.as_known_name() {\n                     PerNs::types(Resolution::Def(m.module.into()))\n                 } else {\n-                    match m.item_map[m.module.module_id].get(name) {\n-                        Some(res) => res.def.map(Resolution::Def),\n-                        None => PerNs::none(),\n-                    }\n+                    m.item_map.resolve_name_in_module(m.module, name).map(Resolution::Def)\n                 }\n             }\n             Scope::GenericParams(gp) => match gp.find_by_name(name) {\n@@ -177,7 +174,7 @@ impl Scope {\n         }\n     }\n \n-    fn collect_names(&self, f: &mut FnMut(Name, PerNs<Resolution>)) {\n+    fn collect_names(&self, f: &mut dyn FnMut(Name, PerNs<Resolution>)) {\n         match self {\n             Scope::ModuleScope(m) => {\n                 // TODO: should we provide `self` here?"}, {"sha": "39aefdb13c92c7a9145f20b74ac693fd0520a96f", "filename": "crates/ra_ide_api/src/completion/complete_path.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/58ed8ee6650058d5dc4ce511e2d9c04fdfa09aaf/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58ed8ee6650058d5dc4ce511e2d9c04fdfa09aaf/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs?ref=58ed8ee6650058d5dc4ce511e2d9c04fdfa09aaf", "patch": "@@ -186,4 +186,20 @@ mod tests {\n             \",\n         );\n     }\n+\n+    #[test]\n+    fn completes_use_paths_across_crates() {\n+        check_reference_completion(\n+            \"completes_use_paths_across_crates\",\n+            \"\n+            //- /main.rs\n+            use foo::<|>;\n+\n+            //- /foo/lib.rs\n+            pub mod bar {\n+                pub struct S;\n+            }\n+            \",\n+        );\n+    }\n }"}, {"sha": "4b40fcf27e255ca8620d5f994a6660e7e8dbe7f8", "filename": "crates/ra_ide_api/src/completion/snapshots/completion_item__completes_use_paths_across_crates.snap", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/58ed8ee6650058d5dc4ce511e2d9c04fdfa09aaf/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__completes_use_paths_across_crates.snap", "raw_url": "https://github.com/rust-lang/rust/raw/58ed8ee6650058d5dc4ce511e2d9c04fdfa09aaf/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__completes_use_paths_across_crates.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__completes_use_paths_across_crates.snap?ref=58ed8ee6650058d5dc4ce511e2d9c04fdfa09aaf", "patch": "@@ -0,0 +1,22 @@\n+---\n+created: \"2019-02-11T11:53:02.410665254Z\"\n+creator: insta@0.6.1\n+source: crates/ra_ide_api/src/completion/completion_item.rs\n+expression: kind_completions\n+---\n+[\n+    CompletionItem {\n+        completion_kind: Reference,\n+        label: \"bar\",\n+        kind: Some(\n+            Module\n+        ),\n+        detail: None,\n+        documentation: None,\n+        lookup: None,\n+        insert_text: None,\n+        insert_text_format: PlainText,\n+        source_range: [9; 9),\n+        text_edit: None\n+    }\n+]"}]}