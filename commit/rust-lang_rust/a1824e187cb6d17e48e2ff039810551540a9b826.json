{"sha": "a1824e187cb6d17e48e2ff039810551540a9b826", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExODI0ZTE4N2NiNmQxN2U0OGUyZmYwMzk4MTA1NTE1NDBhOWI4MjY=", "commit": {"author": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-05-25T21:09:06Z"}, "committer": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-05-25T21:09:06Z"}, "message": "ptr_arg: honor `allow` attr on arguments", "tree": {"sha": "818b7edb0e854c64acd9fbf6af87403fb196c2ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/818b7edb0e854c64acd9fbf6af87403fb196c2ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1824e187cb6d17e48e2ff039810551540a9b826", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1824e187cb6d17e48e2ff039810551540a9b826", "html_url": "https://github.com/rust-lang/rust/commit/a1824e187cb6d17e48e2ff039810551540a9b826", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1824e187cb6d17e48e2ff039810551540a9b826/comments", "author": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c41916d9bd2ca98c9291d07a095503d9e934da60", "url": "https://api.github.com/repos/rust-lang/rust/commits/c41916d9bd2ca98c9291d07a095503d9e934da60", "html_url": "https://github.com/rust-lang/rust/commit/c41916d9bd2ca98c9291d07a095503d9e934da60"}], "stats": {"total": 44, "additions": 41, "deletions": 3}, "files": [{"sha": "4eac571f96620597bc37adea99c16cf7b8a74a4a", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a1824e187cb6d17e48e2ff039810551540a9b826/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1824e187cb6d17e48e2ff039810551540a9b826/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=a1824e187cb6d17e48e2ff039810551540a9b826", "patch": "@@ -2,7 +2,7 @@\n \n use crate::utils::ptr::get_spans;\n use crate::utils::{\n-    is_type_diagnostic_item, match_qpath, match_type, paths, snippet_opt, span_lint, span_lint_and_sugg,\n+    is_allowed, is_type_diagnostic_item, match_qpath, match_type, paths, snippet_opt, span_lint, span_lint_and_sugg,\n     span_lint_and_then, walk_ptrs_hir_ty,\n };\n use if_chain::if_chain;\n@@ -150,8 +150,16 @@ fn check_fn(cx: &LateContext<'_, '_>, decl: &FnDecl<'_>, fn_id: HirId, opt_body_\n     let fn_def_id = cx.tcx.hir().local_def_id(fn_id);\n     let sig = cx.tcx.fn_sig(fn_def_id);\n     let fn_ty = sig.skip_binder();\n+    let body = opt_body_id.map(|id| cx.tcx.hir().body(id));\n \n     for (idx, (arg, ty)) in decl.inputs.iter().zip(fn_ty.inputs()).enumerate() {\n+        // Honor the allow attribute on parameters. See issue 5644.\n+        if let Some(body) = &body {\n+            if is_allowed(cx, PTR_ARG, body.params[idx].hir_id) {\n+                continue;\n+            }\n+        }\n+\n         if let ty::Ref(_, ty, Mutability::Not) = ty.kind {\n             if is_type_diagnostic_item(cx, ty, sym!(vec_type)) {\n                 let mut ty_snippet = None;"}, {"sha": "73758b7eeb7eb28e27651a9ec36b9cc333e622d4", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1824e187cb6d17e48e2ff039810551540a9b826/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1824e187cb6d17e48e2ff039810551540a9b826/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=a1824e187cb6d17e48e2ff039810551540a9b826", "patch": "@@ -530,7 +530,7 @@ pub trait DiagnosticBuilderExt<'a, T: LintContext> {\n \n     /// Suggest to add an item before another.\n     ///\n-    /// The item should not be indented (expect for inner indentation).\n+    /// The item should not be indented (except for inner indentation).\n     ///\n     /// # Example\n     ///"}, {"sha": "541225e635102b73626c4c7e960c7796f2161f8f", "filename": "tests/ui/ptr_arg.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a1824e187cb6d17e48e2ff039810551540a9b826/tests%2Fui%2Fptr_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1824e187cb6d17e48e2ff039810551540a9b826/tests%2Fui%2Fptr_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_arg.rs?ref=a1824e187cb6d17e48e2ff039810551540a9b826", "patch": "@@ -71,7 +71,6 @@ fn false_positive_capacity_too(x: &String) -> String {\n #[allow(dead_code)]\n fn test_cow_with_ref(c: &Cow<[i32]>) {}\n \n-#[allow(dead_code)]\n fn test_cow(c: Cow<[i32]>) {\n     let _c = c;\n }\n@@ -84,3 +83,34 @@ trait Foo2 {\n impl Foo2 for String {\n     fn do_string(&self) {}\n }\n+\n+// Check that the allow attribute on parameters is honored\n+mod issue_5644 {\n+    use std::borrow::Cow;\n+\n+    fn allowed(\n+        #[allow(clippy::ptr_arg)] _v: &Vec<u32>,\n+        #[allow(clippy::ptr_arg)] _s: &String,\n+        #[allow(clippy::ptr_arg)] _c: &Cow<[i32]>,\n+    ) {\n+    }\n+\n+    struct S {}\n+    impl S {\n+        fn allowed(\n+            #[allow(clippy::ptr_arg)] _v: &Vec<u32>,\n+            #[allow(clippy::ptr_arg)] _s: &String,\n+            #[allow(clippy::ptr_arg)] _c: &Cow<[i32]>,\n+        ) {\n+        }\n+    }\n+\n+    trait T {\n+        fn allowed(\n+            #[allow(clippy::ptr_arg)] _v: &Vec<u32>,\n+            #[allow(clippy::ptr_arg)] _s: &String,\n+            #[allow(clippy::ptr_arg)] _c: &Cow<[i32]>,\n+        ) {\n+        }\n+    }\n+}"}]}