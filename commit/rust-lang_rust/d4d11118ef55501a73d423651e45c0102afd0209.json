{"sha": "d4d11118ef55501a73d423651e45c0102afd0209", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0ZDExMTE4ZWY1NTUwMWE3M2Q0MjM2NTFlNDVjMDEwMmFmZDAyMDk=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-09T18:50:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-09T18:50:46Z"}, "message": "Rollup merge of #74150 - tamird:blocklist, r=nikomatsakis\n\nAvoid \"blacklist\"\n\nOther terms are more inclusive and precise.\n\nClippy still has a lint named \"blacklisted-name\", but renaming it would\nbe a breaking change, so is left for future work.\n\nThe target configuration option \"abi-blacklist\" has been depreciated and\nrenamed to \"unsupported-abis\". The old name continues to work.", "tree": {"sha": "978f5af8748822fb7f38dabb04690f6d70a2655e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/978f5af8748822fb7f38dabb04690f6d70a2655e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4d11118ef55501a73d423651e45c0102afd0209", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfB2cGCRBK7hj4Ov3rIwAAdHIIAEVhVTj5dY7d5saqDOIkj/AG\nLHi3lBrf2IB62ucZgTsE4BkrUaaS3exJOyoE1fkOxRhfoPFyFVp/REZhONfYeFLS\nd2v/wrQzSaqAyZgQKwYRScS593dy403+qtDU+vPRg9aRCXFkd9XKqIc2sWTx48Hj\nB5+5iFclbWWAoPqj72KjFenruNOY2/FUy2mzQgaMBWE4C+DEx4oMsdCrOm5W3Dao\nHpNBw44XPXiGPlEX5FinmAaXwKBApa/wyPUG3QLqQ9dKDINTovKf1nKUtjjbWpz8\nuraZy4rYiacNxB79aDDdswofyNQH+sp/xOVvgdTfpe4o5L7oUM3zoMG13xMqvFU=\n=plUE\n-----END PGP SIGNATURE-----\n", "payload": "tree 978f5af8748822fb7f38dabb04690f6d70a2655e\nparent 089a6e15f662cf4eaa502bbe84504dedc6fc4b0d\nparent 1e567c11686f20b4e7422ba9cc0f1eac45e9c9fb\nauthor Manish Goregaokar <manishsmail@gmail.com> 1594320646 -0700\ncommitter GitHub <noreply@github.com> 1594320646 -0700\n\nRollup merge of #74150 - tamird:blocklist, r=nikomatsakis\n\nAvoid \"blacklist\"\n\nOther terms are more inclusive and precise.\n\nClippy still has a lint named \"blacklisted-name\", but renaming it would\nbe a breaking change, so is left for future work.\n\nThe target configuration option \"abi-blacklist\" has been depreciated and\nrenamed to \"unsupported-abis\". The old name continues to work.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4d11118ef55501a73d423651e45c0102afd0209", "html_url": "https://github.com/rust-lang/rust/commit/d4d11118ef55501a73d423651e45c0102afd0209", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4d11118ef55501a73d423651e45c0102afd0209/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "089a6e15f662cf4eaa502bbe84504dedc6fc4b0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/089a6e15f662cf4eaa502bbe84504dedc6fc4b0d", "html_url": "https://github.com/rust-lang/rust/commit/089a6e15f662cf4eaa502bbe84504dedc6fc4b0d"}, {"sha": "1e567c11686f20b4e7422ba9cc0f1eac45e9c9fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e567c11686f20b4e7422ba9cc0f1eac45e9c9fb", "html_url": "https://github.com/rust-lang/rust/commit/1e567c11686f20b4e7422ba9cc0f1eac45e9c9fb"}], "stats": {"total": 218, "additions": 111, "deletions": 107}, "files": [{"sha": "355e71ffb43293766d9a3b34004b83b0a9852054", "filename": "src/librustc_error_codes/error_codes/E0570.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_error_codes%2Ferror_codes%2FE0570.md", "raw_url": "https://github.com/rust-lang/rust/raw/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_error_codes%2Ferror_codes%2FE0570.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0570.md?ref=d4d11118ef55501a73d423651e45c0102afd0209", "patch": "@@ -1,6 +1,6 @@\n The requested ABI is unsupported by the current target.\n \n-The rust compiler maintains for each target a blacklist of ABIs unsupported on\n+The rust compiler maintains for each target a list of unsupported ABIs on\n that target. If an ABI is present in such a list this usually means that the\n target / ABI combination is currently unsupported by llvm.\n "}, {"sha": "4595a96ce24f53d166a735c869950f2ed0234d10", "filename": "src/librustc_resolve/imports.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_resolve%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_resolve%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fimports.rs?ref=d4d11118ef55501a73d423651e45c0102afd0209", "patch": "@@ -262,8 +262,8 @@ impl<'a> Resolver<'a> {\n         }\n \n         let check_usable = |this: &mut Self, binding: &'a NameBinding<'a>| {\n-            if let Some(blacklisted_binding) = this.blacklisted_binding {\n-                if ptr::eq(binding, blacklisted_binding) {\n+            if let Some(unusable_binding) = this.unusable_binding {\n+                if ptr::eq(binding, unusable_binding) {\n                     return Err((Determined, Weak::No));\n                 }\n             }\n@@ -278,12 +278,12 @@ impl<'a> Resolver<'a> {\n             return resolution\n                 .binding\n                 .and_then(|binding| {\n-                    // If the primary binding is blacklisted, search further and return the shadowed\n-                    // glob binding if it exists. What we really want here is having two separate\n-                    // scopes in a module - one for non-globs and one for globs, but until that's done\n-                    // use this hack to avoid inconsistent resolution ICEs during import validation.\n-                    if let Some(blacklisted_binding) = self.blacklisted_binding {\n-                        if ptr::eq(binding, blacklisted_binding) {\n+                    // If the primary binding is unusable, search further and return the shadowed glob\n+                    // binding if it exists. What we really want here is having two separate scopes in\n+                    // a module - one for non-globs and one for globs, but until that's done use this\n+                    // hack to avoid inconsistent resolution ICEs during import validation.\n+                    if let Some(unusable_binding) = self.unusable_binding {\n+                        if ptr::eq(binding, unusable_binding) {\n                             return resolution.shadowed_glob;\n                         }\n                     }\n@@ -875,9 +875,9 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n     /// consolidate multiple unresolved import errors into a single diagnostic.\n     fn finalize_import(&mut self, import: &'b Import<'b>) -> Option<UnresolvedImportError> {\n         let orig_vis = import.vis.replace(ty::Visibility::Invisible);\n-        let orig_blacklisted_binding = match &import.kind {\n+        let orig_unusable_binding = match &import.kind {\n             ImportKind::Single { target_bindings, .. } => {\n-                Some(mem::replace(&mut self.r.blacklisted_binding, target_bindings[TypeNS].get()))\n+                Some(mem::replace(&mut self.r.unusable_binding, target_bindings[TypeNS].get()))\n             }\n             _ => None,\n         };\n@@ -891,8 +891,8 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n             import.crate_lint(),\n         );\n         let no_ambiguity = self.r.ambiguity_errors.len() == prev_ambiguity_errors_len;\n-        if let Some(orig_blacklisted_binding) = orig_blacklisted_binding {\n-            self.r.blacklisted_binding = orig_blacklisted_binding;\n+        if let Some(orig_unusable_binding) = orig_unusable_binding {\n+            self.r.unusable_binding = orig_unusable_binding;\n         }\n         import.vis.set(orig_vis);\n         if let PathResult::Failed { .. } | PathResult::NonModule(..) = path_res {\n@@ -1013,8 +1013,8 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n         self.r.per_ns(|this, ns| {\n             if !type_ns_only || ns == TypeNS {\n                 let orig_vis = import.vis.replace(ty::Visibility::Invisible);\n-                let orig_blacklisted_binding =\n-                    mem::replace(&mut this.blacklisted_binding, target_bindings[ns].get());\n+                let orig_unusable_binding =\n+                    mem::replace(&mut this.unusable_binding, target_bindings[ns].get());\n                 let orig_last_import_segment = mem::replace(&mut this.last_import_segment, true);\n                 let binding = this.resolve_ident_in_module(\n                     module,\n@@ -1025,7 +1025,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                     import.span,\n                 );\n                 this.last_import_segment = orig_last_import_segment;\n-                this.blacklisted_binding = orig_blacklisted_binding;\n+                this.unusable_binding = orig_unusable_binding;\n                 import.vis.set(orig_vis);\n \n                 match binding {\n@@ -1291,8 +1291,8 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                     return;\n                 }\n \n-                let orig_blacklisted_binding =\n-                    mem::replace(&mut this.blacklisted_binding, target_bindings[ns].get());\n+                let orig_unusable_binding =\n+                    mem::replace(&mut this.unusable_binding, target_bindings[ns].get());\n \n                 match this.early_resolve_ident_in_lexical_scope(\n                     target,\n@@ -1311,7 +1311,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                     Err(_) => is_redundant[ns] = Some(false),\n                 }\n \n-                this.blacklisted_binding = orig_blacklisted_binding;\n+                this.unusable_binding = orig_unusable_binding;\n             }\n         });\n "}, {"sha": "679f5637686ff4eddbddd3c7a0cf59c4f7a3d552", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=d4d11118ef55501a73d423651e45c0102afd0209", "patch": "@@ -842,14 +842,14 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                         report_error(self, ns);\n                     }\n                     Some(LexicalScopeBinding::Item(binding)) => {\n-                        let orig_blacklisted_binding =\n-                            replace(&mut self.r.blacklisted_binding, Some(binding));\n+                        let orig_unusable_binding =\n+                            replace(&mut self.r.unusable_binding, Some(binding));\n                         if let Some(LexicalScopeBinding::Res(..)) = self\n                             .resolve_ident_in_lexical_scope(ident, ns, None, use_tree.prefix.span)\n                         {\n                             report_error(self, ns);\n                         }\n-                        self.r.blacklisted_binding = orig_blacklisted_binding;\n+                        self.r.unusable_binding = orig_unusable_binding;\n                     }\n                     None => {}\n                 }"}, {"sha": "0f1618031d034eb62d9f9ba580c83248adb46470", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=d4d11118ef55501a73d423651e45c0102afd0209", "patch": "@@ -867,7 +867,7 @@ pub struct Resolver<'a> {\n     last_import_segment: bool,\n     /// This binding should be ignored during in-module resolution, so that we don't get\n     /// \"self-confirming\" import resolutions during import validation.\n-    blacklisted_binding: Option<&'a NameBinding<'a>>,\n+    unusable_binding: Option<&'a NameBinding<'a>>,\n \n     /// The idents for the primitive types.\n     primitive_type_table: PrimitiveTypeTable,\n@@ -1266,7 +1266,7 @@ impl<'a> Resolver<'a> {\n             indeterminate_imports: Vec::new(),\n \n             last_import_segment: false,\n-            blacklisted_binding: None,\n+            unusable_binding: None,\n \n             primitive_type_table: PrimitiveTypeTable::new(),\n "}, {"sha": "21dcec8d5e384ae0f9cef73305c540924cc03423", "filename": "src/librustc_target/spec/aarch64_apple_ios.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Faarch64_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Faarch64_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_apple_ios.rs?ref=d4d11118ef55501a73d423651e45c0102afd0209", "patch": "@@ -18,7 +18,7 @@ pub fn target() -> TargetResult {\n             features: \"+neon,+fp-armv8,+apple-a7\".to_string(),\n             eliminate_frame_pointer: false,\n             max_atomic_width: Some(128),\n-            abi_blacklist: super::arm_base::abi_blacklist(),\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n             forces_embed_bitcode: true,\n             // Taken from a clang build on Xcode 11.4.1.\n             // These arguments are not actually invoked - they just have"}, {"sha": "2b0cd6cabf80f6619be97fde6d427d283ce05e59", "filename": "src/librustc_target/spec/aarch64_apple_tvos.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Faarch64_apple_tvos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Faarch64_apple_tvos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_apple_tvos.rs?ref=d4d11118ef55501a73d423651e45c0102afd0209", "patch": "@@ -18,7 +18,7 @@ pub fn target() -> TargetResult {\n             features: \"+neon,+fp-armv8,+apple-a7\".to_string(),\n             eliminate_frame_pointer: false,\n             max_atomic_width: Some(128),\n-            abi_blacklist: super::arm_base::abi_blacklist(),\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n             forces_embed_bitcode: true,\n             ..base\n         },"}, {"sha": "aabfe458ca3b62f9bc81c9ce823698081080365a", "filename": "src/librustc_target/spec/aarch64_fuchsia.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Faarch64_fuchsia.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Faarch64_fuchsia.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_fuchsia.rs?ref=d4d11118ef55501a73d423651e45c0102afd0209", "patch": "@@ -15,6 +15,6 @@ pub fn target() -> TargetResult {\n         target_env: String::new(),\n         target_vendor: String::new(),\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n-        options: TargetOptions { abi_blacklist: super::arm_base::abi_blacklist(), ..base },\n+        options: TargetOptions { unsupported_abis: super::arm_base::unsupported_abis(), ..base },\n     })\n }"}, {"sha": "e4ecc7ac2dc801003783ceaff03f58e1c5401bfd", "filename": "src/librustc_target/spec/aarch64_linux_android.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Faarch64_linux_android.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Faarch64_linux_android.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_linux_android.rs?ref=d4d11118ef55501a73d423651e45c0102afd0209", "patch": "@@ -20,6 +20,6 @@ pub fn target() -> TargetResult {\n         target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n-        options: TargetOptions { abi_blacklist: super::arm_base::abi_blacklist(), ..base },\n+        options: TargetOptions { unsupported_abis: super::arm_base::unsupported_abis(), ..base },\n     })\n }"}, {"sha": "1278b89c7fde2a64b4852146aa6e0225b248a17b", "filename": "src/librustc_target/spec/aarch64_unknown_cloudabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_cloudabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_cloudabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_cloudabi.rs?ref=d4d11118ef55501a73d423651e45c0102afd0209", "patch": "@@ -3,7 +3,7 @@ use crate::spec::{LinkerFlavor, Target, TargetResult};\n pub fn target() -> TargetResult {\n     let mut base = super::cloudabi_base::opts();\n     base.max_atomic_width = Some(128);\n-    base.abi_blacklist = super::arm_base::abi_blacklist();\n+    base.unsupported_abis = super::arm_base::unsupported_abis();\n     base.linker = Some(\"aarch64-unknown-cloudabi-cc\".to_string());\n \n     Ok(Target {"}, {"sha": "5ae592c5139c8ee386705f44d8fdd3ccd559a1f2", "filename": "src/librustc_target/spec/aarch64_unknown_freebsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_freebsd.rs?ref=d4d11118ef55501a73d423651e45c0102afd0209", "patch": "@@ -15,6 +15,6 @@ pub fn target() -> TargetResult {\n         target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n-        options: TargetOptions { abi_blacklist: super::arm_base::abi_blacklist(), ..base },\n+        options: TargetOptions { unsupported_abis: super::arm_base::unsupported_abis(), ..base },\n     })\n }"}, {"sha": "5f978c03248b2ab85337255e0d0ad95a2f451621", "filename": "src/librustc_target/spec/aarch64_unknown_hermit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_hermit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_hermit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_hermit.rs?ref=d4d11118ef55501a73d423651e45c0102afd0209", "patch": "@@ -3,7 +3,7 @@ use crate::spec::{LinkerFlavor, Target, TargetResult};\n pub fn target() -> TargetResult {\n     let mut base = super::hermit_base::opts();\n     base.max_atomic_width = Some(128);\n-    base.abi_blacklist = super::arm_base::abi_blacklist();\n+    base.unsupported_abis = super::arm_base::unsupported_abis();\n     base.linker = Some(\"aarch64-hermit-gcc\".to_string());\n \n     Ok(Target {"}, {"sha": "036162248c76e8e819680992b8010d713b0cc74e", "filename": "src/librustc_target/spec/aarch64_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_linux_gnu.rs?ref=d4d11118ef55501a73d423651e45c0102afd0209", "patch": "@@ -16,7 +16,7 @@ pub fn target() -> TargetResult {\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {\n-            abi_blacklist: super::arm_base::abi_blacklist(),\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n             target_mcount: \"\\u{1}_mcount\".to_string(),\n             ..base\n         },"}, {"sha": "dc613f35d1d311129602b8309dbc2c6b329ed618", "filename": "src/librustc_target/spec/aarch64_unknown_linux_musl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_linux_musl.rs?ref=d4d11118ef55501a73d423651e45c0102afd0209", "patch": "@@ -16,7 +16,7 @@ pub fn target() -> TargetResult {\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {\n-            abi_blacklist: super::arm_base::abi_blacklist(),\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n             target_mcount: \"\\u{1}_mcount\".to_string(),\n             ..base\n         },"}, {"sha": "8c2f6fcff7304b90972e1e2f17a1d0780f8877d0", "filename": "src/librustc_target/spec/aarch64_unknown_netbsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_netbsd.rs?ref=d4d11118ef55501a73d423651e45c0102afd0209", "patch": "@@ -3,7 +3,7 @@ use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n pub fn target() -> TargetResult {\n     let mut base = super::netbsd_base::opts();\n     base.max_atomic_width = Some(128);\n-    base.abi_blacklist = super::arm_base::abi_blacklist();\n+    base.unsupported_abis = super::arm_base::unsupported_abis();\n \n     Ok(Target {\n         llvm_target: \"aarch64-unknown-netbsd\".to_string(),"}, {"sha": "e012dce73fecb95911ec565588d75a93a8cf5ea1", "filename": "src/librustc_target/spec/aarch64_unknown_none.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_none.rs?ref=d4d11118ef55501a73d423651e45c0102afd0209", "patch": "@@ -18,7 +18,7 @@ pub fn target() -> Result<Target, String> {\n         linker_is_gnu: true,\n         max_atomic_width: Some(128),\n         panic_strategy: PanicStrategy::Abort,\n-        abi_blacklist: super::arm_base::abi_blacklist(),\n+        unsupported_abis: super::arm_base::unsupported_abis(),\n         ..Default::default()\n     };\n     Ok(Target {"}, {"sha": "e2aa6e3b8f52c13a6cbab6c0c0f5a2f14506372f", "filename": "src/librustc_target/spec/aarch64_unknown_none_softfloat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_none_softfloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_none_softfloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_none_softfloat.rs?ref=d4d11118ef55501a73d423651e45c0102afd0209", "patch": "@@ -18,7 +18,7 @@ pub fn target() -> Result<Target, String> {\n         linker_is_gnu: true,\n         max_atomic_width: Some(128),\n         panic_strategy: PanicStrategy::Abort,\n-        abi_blacklist: super::arm_base::abi_blacklist(),\n+        unsupported_abis: super::arm_base::unsupported_abis(),\n         ..Default::default()\n     };\n     Ok(Target {"}, {"sha": "fd726c70f496bec51ba179bf9c465664f88cbc7a", "filename": "src/librustc_target/spec/aarch64_unknown_openbsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_openbsd.rs?ref=d4d11118ef55501a73d423651e45c0102afd0209", "patch": "@@ -3,7 +3,7 @@ use crate::spec::{LinkerFlavor, Target, TargetResult};\n pub fn target() -> TargetResult {\n     let mut base = super::openbsd_base::opts();\n     base.max_atomic_width = Some(128);\n-    base.abi_blacklist = super::arm_base::abi_blacklist();\n+    base.unsupported_abis = super::arm_base::unsupported_abis();\n \n     Ok(Target {\n         llvm_target: \"aarch64-unknown-openbsd\".to_string(),"}, {"sha": "05f5d7d3a8b471683fe09cdb9863898d16d1de64", "filename": "src/librustc_target/spec/aarch64_wrs_vxworks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Faarch64_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Faarch64_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_wrs_vxworks.rs?ref=d4d11118ef55501a73d423651e45c0102afd0209", "patch": "@@ -15,6 +15,6 @@ pub fn target() -> TargetResult {\n         target_env: \"gnu\".to_string(),\n         target_vendor: \"wrs\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n-        options: TargetOptions { abi_blacklist: super::arm_base::abi_blacklist(), ..base },\n+        options: TargetOptions { unsupported_abis: super::arm_base::unsupported_abis(), ..base },\n     })\n }"}, {"sha": "b74d80dc6bb2b1892da790cae9ecd5c53ef3b294", "filename": "src/librustc_target/spec/arm_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Farm_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Farm_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farm_base.rs?ref=d4d11118ef55501a73d423651e45c0102afd0209", "patch": "@@ -1,6 +1,6 @@\n use crate::spec::abi::Abi;\n \n // All the calling conventions trigger an assertion(Unsupported calling convention) in llvm on arm\n-pub fn abi_blacklist() -> Vec<Abi> {\n+pub fn unsupported_abis() -> Vec<Abi> {\n     vec![Abi::Stdcall, Abi::Fastcall, Abi::Vectorcall, Abi::Thiscall, Abi::Win64, Abi::SysV64]\n }"}, {"sha": "7109d043f519ce35399ddfa7a9312a0c886e0565", "filename": "src/librustc_target/spec/arm_linux_androideabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Farm_linux_androideabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Farm_linux_androideabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farm_linux_androideabi.rs?ref=d4d11118ef55501a73d423651e45c0102afd0209", "patch": "@@ -17,6 +17,6 @@ pub fn target() -> TargetResult {\n         target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n-        options: TargetOptions { abi_blacklist: super::arm_base::abi_blacklist(), ..base },\n+        options: TargetOptions { unsupported_abis: super::arm_base::unsupported_abis(), ..base },\n     })\n }"}, {"sha": "2e3bad83e255969268cd7fcc0413e9868ad2c5aa", "filename": "src/librustc_target/spec/arm_unknown_linux_gnueabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_gnueabi.rs?ref=d4d11118ef55501a73d423651e45c0102afd0209", "patch": "@@ -17,7 +17,7 @@ pub fn target() -> TargetResult {\n \n         options: TargetOptions {\n             features: \"+strict-align,+v6\".to_string(),\n-            abi_blacklist: super::arm_base::abi_blacklist(),\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n             target_mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n             ..base\n         },"}, {"sha": "f8e357cce663600ab0bb74d80140da7aa413bd94", "filename": "src/librustc_target/spec/arm_unknown_linux_gnueabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_gnueabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_gnueabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_gnueabihf.rs?ref=d4d11118ef55501a73d423651e45c0102afd0209", "patch": "@@ -17,7 +17,7 @@ pub fn target() -> TargetResult {\n \n         options: TargetOptions {\n             features: \"+strict-align,+v6,+vfp2,-d32\".to_string(),\n-            abi_blacklist: super::arm_base::abi_blacklist(),\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n             target_mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n             ..base\n         },"}, {"sha": "75753af9f30789003b592a98b1b429abeef68e77", "filename": "src/librustc_target/spec/arm_unknown_linux_musleabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_musleabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_musleabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_musleabi.rs?ref=d4d11118ef55501a73d423651e45c0102afd0209", "patch": "@@ -22,7 +22,7 @@ pub fn target() -> TargetResult {\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {\n-            abi_blacklist: super::arm_base::abi_blacklist(),\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n             target_mcount: \"\\u{1}mcount\".to_string(),\n             ..base\n         },"}, {"sha": "c74c88e36125f74a4c2a63d35b4aadc3ecb74149", "filename": "src/librustc_target/spec/arm_unknown_linux_musleabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_musleabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_musleabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_musleabihf.rs?ref=d4d11118ef55501a73d423651e45c0102afd0209", "patch": "@@ -22,7 +22,7 @@ pub fn target() -> TargetResult {\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {\n-            abi_blacklist: super::arm_base::abi_blacklist(),\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n             target_mcount: \"\\u{1}mcount\".to_string(),\n             ..base\n         },"}, {"sha": "e0d1f2653ce0bfb99ede96659282f65b997aa269", "filename": "src/librustc_target/spec/armebv7r_none_eabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Farmebv7r_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Farmebv7r_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmebv7r_none_eabi.rs?ref=d4d11118ef55501a73d423651e45c0102afd0209", "patch": "@@ -22,7 +22,7 @@ pub fn target() -> TargetResult {\n             relocation_model: RelocModel::Static,\n             panic_strategy: PanicStrategy::Abort,\n             max_atomic_width: Some(32),\n-            abi_blacklist: super::arm_base::abi_blacklist(),\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n             emit_debug_gdb_scripts: false,\n             ..Default::default()\n         },"}, {"sha": "e2d37d45bf1477f83f7f71003d4b55c825c93651", "filename": "src/librustc_target/spec/armebv7r_none_eabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Farmebv7r_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Farmebv7r_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmebv7r_none_eabihf.rs?ref=d4d11118ef55501a73d423651e45c0102afd0209", "patch": "@@ -23,7 +23,7 @@ pub fn target() -> TargetResult {\n             panic_strategy: PanicStrategy::Abort,\n             features: \"+vfp3,-d32,-fp16\".to_string(),\n             max_atomic_width: Some(32),\n-            abi_blacklist: super::arm_base::abi_blacklist(),\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n             emit_debug_gdb_scripts: false,\n             ..Default::default()\n         },"}, {"sha": "2580e8b0f851593ef08e6adf08e6563083a6a74d", "filename": "src/librustc_target/spec/armv4t_unknown_linux_gnueabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Farmv4t_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Farmv4t_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv4t_unknown_linux_gnueabi.rs?ref=d4d11118ef55501a73d423651e45c0102afd0209", "patch": "@@ -18,7 +18,7 @@ pub fn target() -> TargetResult {\n             features: \"+soft-float,+strict-align\".to_string(),\n             // Atomic operations provided by compiler-builtins\n             max_atomic_width: Some(32),\n-            abi_blacklist: super::arm_base::abi_blacklist(),\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n             target_mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n             ..base\n         },"}, {"sha": "f28421dc77593c1f23b5e3b0447ef131db863176", "filename": "src/librustc_target/spec/armv5te_unknown_linux_gnueabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Farmv5te_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Farmv5te_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv5te_unknown_linux_gnueabi.rs?ref=d4d11118ef55501a73d423651e45c0102afd0209", "patch": "@@ -18,7 +18,7 @@ pub fn target() -> TargetResult {\n             features: \"+soft-float,+strict-align\".to_string(),\n             // Atomic operations provided by compiler-builtins\n             max_atomic_width: Some(32),\n-            abi_blacklist: super::arm_base::abi_blacklist(),\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n             target_mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n             ..base\n         },"}, {"sha": "fe1fa88883d3e05035a3c9ef9aeeaebd4cba8b07", "filename": "src/librustc_target/spec/armv5te_unknown_linux_musleabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Farmv5te_unknown_linux_musleabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Farmv5te_unknown_linux_musleabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv5te_unknown_linux_musleabi.rs?ref=d4d11118ef55501a73d423651e45c0102afd0209", "patch": "@@ -21,7 +21,7 @@ pub fn target() -> TargetResult {\n             features: \"+soft-float,+strict-align\".to_string(),\n             // Atomic operations provided by compiler-builtins\n             max_atomic_width: Some(32),\n-            abi_blacklist: super::arm_base::abi_blacklist(),\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n             target_mcount: \"\\u{1}mcount\".to_string(),\n             ..base\n         },"}, {"sha": "1e06f837997a18d7cd4119d80c6b9fb12d7d84be", "filename": "src/librustc_target/spec/armv6_unknown_freebsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Farmv6_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Farmv6_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv6_unknown_freebsd.rs?ref=d4d11118ef55501a73d423651e45c0102afd0209", "patch": "@@ -17,7 +17,7 @@ pub fn target() -> TargetResult {\n         options: TargetOptions {\n             features: \"+v6,+vfp2,-d32\".to_string(),\n             max_atomic_width: Some(64),\n-            abi_blacklist: super::arm_base::abi_blacklist(),\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n             target_mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n             ..base\n         },"}, {"sha": "ef40085888c81f86edc22fd0f12bda698d2bdf8f", "filename": "src/librustc_target/spec/armv6_unknown_netbsd_eabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Farmv6_unknown_netbsd_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Farmv6_unknown_netbsd_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv6_unknown_netbsd_eabihf.rs?ref=d4d11118ef55501a73d423651e45c0102afd0209", "patch": "@@ -17,7 +17,7 @@ pub fn target() -> TargetResult {\n \n         options: TargetOptions {\n             features: \"+v6,+vfp2,-d32\".to_string(),\n-            abi_blacklist: super::arm_base::abi_blacklist(),\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n             target_mcount: \"__mcount\".to_string(),\n             ..base\n         },"}, {"sha": "393843526a8cc29caeebf3d9d15047b31b257ad4", "filename": "src/librustc_target/spec/armv7_apple_ios.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Farmv7_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Farmv7_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_apple_ios.rs?ref=d4d11118ef55501a73d423651e45c0102afd0209", "patch": "@@ -17,7 +17,7 @@ pub fn target() -> TargetResult {\n         options: TargetOptions {\n             features: \"+v7,+vfp3,+neon\".to_string(),\n             max_atomic_width: Some(64),\n-            abi_blacklist: super::arm_base::abi_blacklist(),\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n             ..base\n         },\n     })"}, {"sha": "38c6c31bd10dad047aeea6520d16d7c3c8b748ba", "filename": "src/librustc_target/spec/armv7_linux_androideabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Farmv7_linux_androideabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Farmv7_linux_androideabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_linux_androideabi.rs?ref=d4d11118ef55501a73d423651e45c0102afd0209", "patch": "@@ -25,6 +25,6 @@ pub fn target() -> TargetResult {\n         target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n-        options: TargetOptions { abi_blacklist: super::arm_base::abi_blacklist(), ..base },\n+        options: TargetOptions { unsupported_abis: super::arm_base::unsupported_abis(), ..base },\n     })\n }"}, {"sha": "e3f4fe0b2efb6ed410547d1dbf2d0bfbaae3b073", "filename": "src/librustc_target/spec/armv7_unknown_cloudabi_eabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_cloudabi_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_cloudabi_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_cloudabi_eabihf.rs?ref=d4d11118ef55501a73d423651e45c0102afd0209", "patch": "@@ -5,7 +5,7 @@ pub fn target() -> TargetResult {\n     base.cpu = \"cortex-a8\".to_string();\n     base.max_atomic_width = Some(64);\n     base.features = \"+v7,+vfp3,+neon\".to_string();\n-    base.abi_blacklist = super::arm_base::abi_blacklist();\n+    base.unsupported_abis = super::arm_base::unsupported_abis();\n     base.linker = Some(\"armv7-unknown-cloudabi-eabihf-cc\".to_string());\n \n     Ok(Target {"}, {"sha": "80a9e6d7e3c8032ef20bccb0f8cdd3ca38f87a72", "filename": "src/librustc_target/spec/armv7_unknown_freebsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_freebsd.rs?ref=d4d11118ef55501a73d423651e45c0102afd0209", "patch": "@@ -17,7 +17,7 @@ pub fn target() -> TargetResult {\n         options: TargetOptions {\n             features: \"+v7,+vfp3,-d32,+thumb2,-neon\".to_string(),\n             max_atomic_width: Some(64),\n-            abi_blacklist: super::arm_base::abi_blacklist(),\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n             target_mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n             ..base\n         },"}, {"sha": "0f175e9aef5e86401a7b52f3835e08cfb7ba23e7", "filename": "src/librustc_target/spec/armv7_unknown_linux_gnueabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_linux_gnueabi.rs?ref=d4d11118ef55501a73d423651e45c0102afd0209", "patch": "@@ -21,7 +21,7 @@ pub fn target() -> TargetResult {\n             features: \"+v7,+thumb2,+soft-float,-neon\".to_string(),\n             cpu: \"generic\".to_string(),\n             max_atomic_width: Some(64),\n-            abi_blacklist: super::arm_base::abi_blacklist(),\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n             target_mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n             ..base\n         },"}, {"sha": "27923457cd16eeb9809c0a8cd7ae1c95537eb53f", "filename": "src/librustc_target/spec/armv7_unknown_linux_gnueabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_linux_gnueabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_linux_gnueabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_linux_gnueabihf.rs?ref=d4d11118ef55501a73d423651e45c0102afd0209", "patch": "@@ -22,7 +22,7 @@ pub fn target() -> TargetResult {\n             features: \"+v7,+vfp3,-d32,+thumb2,-neon\".to_string(),\n             cpu: \"generic\".to_string(),\n             max_atomic_width: Some(64),\n-            abi_blacklist: super::arm_base::abi_blacklist(),\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n             target_mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n             ..base\n         },"}, {"sha": "3d1bf05237fd99e1a2660b574dd7c69574ef6776", "filename": "src/librustc_target/spec/armv7_unknown_linux_musleabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_linux_musleabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_linux_musleabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_linux_musleabi.rs?ref=d4d11118ef55501a73d423651e45c0102afd0209", "patch": "@@ -26,7 +26,7 @@ pub fn target() -> TargetResult {\n             features: \"+v7,+thumb2,+soft-float,-neon\".to_string(),\n             cpu: \"generic\".to_string(),\n             max_atomic_width: Some(64),\n-            abi_blacklist: super::arm_base::abi_blacklist(),\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n             target_mcount: \"\\u{1}mcount\".to_string(),\n             ..base\n         },"}, {"sha": "03d7d88b0d6d03617f730343d1bcdcd9cee9923b", "filename": "src/librustc_target/spec/armv7_unknown_linux_musleabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_linux_musleabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_linux_musleabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_linux_musleabihf.rs?ref=d4d11118ef55501a73d423651e45c0102afd0209", "patch": "@@ -25,7 +25,7 @@ pub fn target() -> TargetResult {\n             features: \"+v7,+vfp3,-d32,+thumb2,-neon\".to_string(),\n             cpu: \"generic\".to_string(),\n             max_atomic_width: Some(64),\n-            abi_blacklist: super::arm_base::abi_blacklist(),\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n             target_mcount: \"\\u{1}mcount\".to_string(),\n             ..base\n         },"}, {"sha": "18fc9ed2ec63843239edba14141858856d847031", "filename": "src/librustc_target/spec/armv7_unknown_netbsd_eabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_netbsd_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_netbsd_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_netbsd_eabihf.rs?ref=d4d11118ef55501a73d423651e45c0102afd0209", "patch": "@@ -18,7 +18,7 @@ pub fn target() -> TargetResult {\n             features: \"+v7,+vfp3,-d32,+thumb2,-neon\".to_string(),\n             cpu: \"generic\".to_string(),\n             max_atomic_width: Some(64),\n-            abi_blacklist: super::arm_base::abi_blacklist(),\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n             target_mcount: \"__mcount\".to_string(),\n             ..base\n         },"}, {"sha": "04d8702471af5a93558f05c85fadda8deae69fa8", "filename": "src/librustc_target/spec/armv7_wrs_vxworks_eabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Farmv7_wrs_vxworks_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Farmv7_wrs_vxworks_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_wrs_vxworks_eabihf.rs?ref=d4d11118ef55501a73d423651e45c0102afd0209", "patch": "@@ -18,7 +18,7 @@ pub fn target() -> TargetResult {\n             features: \"+v7,+vfp3,-d32,+thumb2,-neon\".to_string(),\n             cpu: \"generic\".to_string(),\n             max_atomic_width: Some(64),\n-            abi_blacklist: super::arm_base::abi_blacklist(),\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n             ..base\n         },\n     })"}, {"sha": "1db279defff39e14db5df51ac07a4ceba8f56cb2", "filename": "src/librustc_target/spec/armv7a_none_eabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Farmv7a_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Farmv7a_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7a_none_eabi.rs?ref=d4d11118ef55501a73d423651e45c0102afd0209", "patch": "@@ -28,7 +28,7 @@ pub fn target() -> Result<Target, String> {\n         disable_redzone: true,\n         max_atomic_width: Some(64),\n         panic_strategy: PanicStrategy::Abort,\n-        abi_blacklist: super::arm_base::abi_blacklist(),\n+        unsupported_abis: super::arm_base::unsupported_abis(),\n         emit_debug_gdb_scripts: false,\n         ..Default::default()\n     };"}, {"sha": "22c2b306b43bb3c8071c1dbd70e29542f68b0165", "filename": "src/librustc_target/spec/armv7a_none_eabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Farmv7a_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Farmv7a_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7a_none_eabihf.rs?ref=d4d11118ef55501a73d423651e45c0102afd0209", "patch": "@@ -16,7 +16,7 @@ pub fn target() -> Result<Target, String> {\n         disable_redzone: true,\n         max_atomic_width: Some(64),\n         panic_strategy: PanicStrategy::Abort,\n-        abi_blacklist: super::arm_base::abi_blacklist(),\n+        unsupported_abis: super::arm_base::unsupported_abis(),\n         emit_debug_gdb_scripts: false,\n         ..Default::default()\n     };"}, {"sha": "fed83997190a766e645a01083b84fbaffe8460c0", "filename": "src/librustc_target/spec/armv7r_none_eabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Farmv7r_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Farmv7r_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7r_none_eabi.rs?ref=d4d11118ef55501a73d423651e45c0102afd0209", "patch": "@@ -22,7 +22,7 @@ pub fn target() -> TargetResult {\n             relocation_model: RelocModel::Static,\n             panic_strategy: PanicStrategy::Abort,\n             max_atomic_width: Some(32),\n-            abi_blacklist: super::arm_base::abi_blacklist(),\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n             emit_debug_gdb_scripts: false,\n             ..Default::default()\n         },"}, {"sha": "769ac13e51506f5c6a23d9d58079fcd7c29abca5", "filename": "src/librustc_target/spec/armv7r_none_eabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Farmv7r_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Farmv7r_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7r_none_eabihf.rs?ref=d4d11118ef55501a73d423651e45c0102afd0209", "patch": "@@ -23,7 +23,7 @@ pub fn target() -> TargetResult {\n             panic_strategy: PanicStrategy::Abort,\n             features: \"+vfp3,-d32,-fp16\".to_string(),\n             max_atomic_width: Some(32),\n-            abi_blacklist: super::arm_base::abi_blacklist(),\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n             emit_debug_gdb_scripts: false,\n             ..Default::default()\n         },"}, {"sha": "998a7b2e16489a57d37f0ec7c052b7cddea0e6e5", "filename": "src/librustc_target/spec/armv7s_apple_ios.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Farmv7s_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Farmv7s_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7s_apple_ios.rs?ref=d4d11118ef55501a73d423651e45c0102afd0209", "patch": "@@ -17,7 +17,7 @@ pub fn target() -> TargetResult {\n         options: TargetOptions {\n             features: \"+v7,+vfp4,+neon\".to_string(),\n             max_atomic_width: Some(64),\n-            abi_blacklist: super::arm_base::abi_blacklist(),\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n             ..base\n         },\n     })"}, {"sha": "4a2dd8913185f421940fb139689bba38a9058b65", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 29, "deletions": 21, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=d4d11118ef55501a73d423651e45c0102afd0209", "patch": "@@ -902,9 +902,10 @@ pub struct TargetOptions {\n     /// Panic strategy: \"unwind\" or \"abort\"\n     pub panic_strategy: PanicStrategy,\n \n-    /// A blacklist of ABIs unsupported by the current target. Note that generic\n-    /// ABIs are considered to be supported on all platforms and cannot be blacklisted.\n-    pub abi_blacklist: Vec<Abi>,\n+    /// A list of ABIs unsupported by the current target. Note that generic ABIs\n+    /// are considered to be supported on all platforms and cannot be marked\n+    /// unsupported.\n+    pub unsupported_abis: Vec<Abi>,\n \n     /// Whether or not linking dylibs to a static CRT is allowed.\n     pub crt_static_allows_dylibs: bool,\n@@ -1056,7 +1057,7 @@ impl Default for TargetOptions {\n             max_atomic_width: None,\n             atomic_cas: true,\n             panic_strategy: PanicStrategy::Unwind,\n-            abi_blacklist: vec![],\n+            unsupported_abis: vec![],\n             crt_static_allows_dylibs: false,\n             crt_static_default: false,\n             crt_static_respected: false,\n@@ -1125,7 +1126,7 @@ impl Target {\n     }\n \n     pub fn is_abi_supported(&self, abi: Abi) -> bool {\n-        abi.generic() || !self.options.abi_blacklist.contains(&abi)\n+        abi.generic() || !self.options.unsupported_abis.contains(&abi)\n     }\n \n     /// Loads a target descriptor from a JSON object.\n@@ -1474,22 +1475,29 @@ impl Target {\n         key!(llvm_args, list);\n         key!(use_ctors_section, bool);\n \n-        if let Some(array) = obj.find(\"abi-blacklist\").and_then(Json::as_array) {\n-            for name in array.iter().filter_map(|abi| abi.as_string()) {\n-                match lookup_abi(name) {\n-                    Some(abi) => {\n-                        if abi.generic() {\n+        // NB: The old name is deprecated, but support for it is retained for\n+        // compatibility.\n+        for name in [\"abi-blacklist\", \"unsupported-abis\"].iter() {\n+            if let Some(array) = obj.find(name).and_then(Json::as_array) {\n+                for name in array.iter().filter_map(|abi| abi.as_string()) {\n+                    match lookup_abi(name) {\n+                        Some(abi) => {\n+                            if abi.generic() {\n+                                return Err(format!(\n+                                    \"The ABI \\\"{}\\\" is considered to be supported on all \\\n+                                    targets and cannot be marked unsupported\",\n+                                    abi\n+                                ));\n+                            }\n+\n+                            base.options.unsupported_abis.push(abi)\n+                        }\n+                        None => {\n                             return Err(format!(\n-                                \"The ABI \\\"{}\\\" is considered to be supported on \\\n-                                                all targets and cannot be blacklisted\",\n-                                abi\n+                                \"Unknown ABI \\\"{}\\\" in target specification\",\n+                                name\n                             ));\n                         }\n-\n-                        base.options.abi_blacklist.push(abi)\n-                    }\n-                    None => {\n-                        return Err(format!(\"Unknown ABI \\\"{}\\\" in target specification\", name));\n                     }\n                 }\n             }\n@@ -1705,11 +1713,11 @@ impl ToJson for Target {\n         target_option_val!(llvm_args);\n         target_option_val!(use_ctors_section);\n \n-        if default.abi_blacklist != self.options.abi_blacklist {\n+        if default.unsupported_abis != self.options.unsupported_abis {\n             d.insert(\n-                \"abi-blacklist\".to_string(),\n+                \"unsupported-abis\".to_string(),\n                 self.options\n-                    .abi_blacklist\n+                    .unsupported_abis\n                     .iter()\n                     .map(|&name| Abi::name(name).to_json())\n                     .collect::<Vec<_>>()"}, {"sha": "0c8f2a34301eea08370eab434a4d39b72afd3068", "filename": "src/librustc_target/spec/nvptx64_nvidia_cuda.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Fnvptx64_nvidia_cuda.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Fnvptx64_nvidia_cuda.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fnvptx64_nvidia_cuda.rs?ref=d4d11118ef55501a73d423651e45c0102afd0209", "patch": "@@ -55,7 +55,7 @@ pub fn target() -> TargetResult {\n \n             // FIXME: enable compilation tests for the target and\n             // create the tests for this.\n-            abi_blacklist: vec![\n+            unsupported_abis: vec![\n                 Abi::Cdecl,\n                 Abi::Stdcall,\n                 Abi::Fastcall,"}, {"sha": "977aa896f2520573df84a8c8b7eea9b708f7d078", "filename": "src/librustc_target/spec/riscv32i_unknown_none_elf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Friscv32i_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Friscv32i_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Friscv32i_unknown_none_elf.rs?ref=d4d11118ef55501a73d423651e45c0102afd0209", "patch": "@@ -24,7 +24,7 @@ pub fn target() -> TargetResult {\n             panic_strategy: PanicStrategy::Abort,\n             relocation_model: RelocModel::Static,\n             emit_debug_gdb_scripts: false,\n-            abi_blacklist: super::riscv_base::abi_blacklist(),\n+            unsupported_abis: super::riscv_base::unsupported_abis(),\n             ..Default::default()\n         },\n     })"}, {"sha": "1a85cdff1315ca0f41a4fc2b1b2a89fd3ad606df", "filename": "src/librustc_target/spec/riscv32imac_unknown_none_elf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Friscv32imac_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Friscv32imac_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Friscv32imac_unknown_none_elf.rs?ref=d4d11118ef55501a73d423651e45c0102afd0209", "patch": "@@ -24,7 +24,7 @@ pub fn target() -> TargetResult {\n             panic_strategy: PanicStrategy::Abort,\n             relocation_model: RelocModel::Static,\n             emit_debug_gdb_scripts: false,\n-            abi_blacklist: super::riscv_base::abi_blacklist(),\n+            unsupported_abis: super::riscv_base::unsupported_abis(),\n             ..Default::default()\n         },\n     })"}, {"sha": "e3c1c6908a23af24a13cba44b2bf421fe0bf3a0c", "filename": "src/librustc_target/spec/riscv32imc_unknown_none_elf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Friscv32imc_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Friscv32imc_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Friscv32imc_unknown_none_elf.rs?ref=d4d11118ef55501a73d423651e45c0102afd0209", "patch": "@@ -24,7 +24,7 @@ pub fn target() -> TargetResult {\n             panic_strategy: PanicStrategy::Abort,\n             relocation_model: RelocModel::Static,\n             emit_debug_gdb_scripts: false,\n-            abi_blacklist: super::riscv_base::abi_blacklist(),\n+            unsupported_abis: super::riscv_base::unsupported_abis(),\n             ..Default::default()\n         },\n     })"}, {"sha": "f7a93c916d1d5d8557587391cd6ac78262fcf462", "filename": "src/librustc_target/spec/riscv64gc_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Friscv64gc_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Friscv64gc_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Friscv64gc_unknown_linux_gnu.rs?ref=d4d11118ef55501a73d423651e45c0102afd0209", "patch": "@@ -13,7 +13,7 @@ pub fn target() -> TargetResult {\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {\n-            abi_blacklist: super::riscv_base::abi_blacklist(),\n+            unsupported_abis: super::riscv_base::unsupported_abis(),\n             code_model: Some(CodeModel::Medium),\n             cpu: \"generic-rv64\".to_string(),\n             features: \"+m,+a,+f,+d,+c\".to_string(),"}, {"sha": "857af4ceb0d9f1635a8e3cfbd9af18b07720372a", "filename": "src/librustc_target/spec/riscv64gc_unknown_none_elf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Friscv64gc_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Friscv64gc_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Friscv64gc_unknown_none_elf.rs?ref=d4d11118ef55501a73d423651e45c0102afd0209", "patch": "@@ -25,7 +25,7 @@ pub fn target() -> TargetResult {\n             relocation_model: RelocModel::Static,\n             code_model: Some(CodeModel::Medium),\n             emit_debug_gdb_scripts: false,\n-            abi_blacklist: super::riscv_base::abi_blacklist(),\n+            unsupported_abis: super::riscv_base::unsupported_abis(),\n             ..Default::default()\n         },\n     })"}, {"sha": "36fe7730f95bfcaea3837c556d2a93683ea804e5", "filename": "src/librustc_target/spec/riscv64imac_unknown_none_elf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Friscv64imac_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Friscv64imac_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Friscv64imac_unknown_none_elf.rs?ref=d4d11118ef55501a73d423651e45c0102afd0209", "patch": "@@ -25,7 +25,7 @@ pub fn target() -> TargetResult {\n             relocation_model: RelocModel::Static,\n             code_model: Some(CodeModel::Medium),\n             emit_debug_gdb_scripts: false,\n-            abi_blacklist: super::riscv_base::abi_blacklist(),\n+            unsupported_abis: super::riscv_base::unsupported_abis(),\n             ..Default::default()\n         },\n     })"}, {"sha": "64cf890037e5132c75d3d05fa92fce63022436d0", "filename": "src/librustc_target/spec/riscv_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Friscv_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Friscv_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Friscv_base.rs?ref=d4d11118ef55501a73d423651e45c0102afd0209", "patch": "@@ -2,7 +2,7 @@ use crate::spec::abi::Abi;\n \n // All the calling conventions trigger an assertion(Unsupported calling\n // convention) in llvm on RISCV\n-pub fn abi_blacklist() -> Vec<Abi> {\n+pub fn unsupported_abis() -> Vec<Abi> {\n     vec![\n         Abi::Cdecl,\n         Abi::Stdcall,"}, {"sha": "2f7d15d5856f6887011d5e1ad4fee6c83a913e55", "filename": "src/librustc_target/spec/thumb_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Fthumb_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Fthumb_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumb_base.rs?ref=d4d11118ef55501a73d423651e45c0102afd0209", "patch": "@@ -41,7 +41,7 @@ pub fn opts() -> TargetOptions {\n         // Similarly, one almost always never wants to use relocatable code because of the extra\n         // costs it involves.\n         relocation_model: RelocModel::Static,\n-        abi_blacklist: super::arm_base::abi_blacklist(),\n+        unsupported_abis: super::arm_base::unsupported_abis(),\n         // When this section is added a volatile load to its start address is also generated. This\n         // volatile load is a footgun as it can end up loading an invalid memory address, depending\n         // on how the user set up their linker scripts. This section adds pretty printer for stuff"}, {"sha": "37828026fe11303200bcfa4408a3393cb081e2c9", "filename": "src/librustc_target/spec/thumbv7a_pc_windows_msvc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Fthumbv7a_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Fthumbv7a_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumbv7a_pc_windows_msvc.rs?ref=d4d11118ef55501a73d423651e45c0102afd0209", "patch": "@@ -37,7 +37,7 @@ pub fn target() -> TargetResult {\n             features: \"+vfp3,+neon\".to_string(),\n             cpu: \"generic\".to_string(),\n             max_atomic_width: Some(64),\n-            abi_blacklist: super::arm_base::abi_blacklist(),\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n             ..base\n         },\n     })"}, {"sha": "29a4a9875e5b0dfa9d02b74186dcb68f64774512", "filename": "src/librustc_target/spec/thumbv7a_uwp_windows_msvc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Fthumbv7a_uwp_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Fthumbv7a_uwp_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumbv7a_uwp_windows_msvc.rs?ref=d4d11118ef55501a73d423651e45c0102afd0209", "patch": "@@ -23,7 +23,7 @@ pub fn target() -> TargetResult {\n         options: TargetOptions {\n             features: \"+vfp3,+neon\".to_string(),\n             cpu: \"generic\".to_string(),\n-            abi_blacklist: super::arm_base::abi_blacklist(),\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n             ..base\n         },\n     })"}, {"sha": "c52f077f6f16c297beddf8d71c1fd7dfabc78bcb", "filename": "src/librustc_target/spec/thumbv7neon_linux_androideabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Fthumbv7neon_linux_androideabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Fthumbv7neon_linux_androideabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumbv7neon_linux_androideabi.rs?ref=d4d11118ef55501a73d423651e45c0102afd0209", "patch": "@@ -25,6 +25,6 @@ pub fn target() -> TargetResult {\n         target_env: \"\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n-        options: TargetOptions { abi_blacklist: super::arm_base::abi_blacklist(), ..base },\n+        options: TargetOptions { unsupported_abis: super::arm_base::unsupported_abis(), ..base },\n     })\n }"}, {"sha": "78936948e642ee31d38551af23299872c8b47ad5", "filename": "src/librustc_target/spec/thumbv7neon_unknown_linux_gnueabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Fthumbv7neon_unknown_linux_gnueabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Fthumbv7neon_unknown_linux_gnueabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumbv7neon_unknown_linux_gnueabihf.rs?ref=d4d11118ef55501a73d423651e45c0102afd0209", "patch": "@@ -25,7 +25,7 @@ pub fn target() -> TargetResult {\n             features: \"+v7,+thumb-mode,+thumb2,+vfp3,+neon\".to_string(),\n             cpu: \"generic\".to_string(),\n             max_atomic_width: Some(64),\n-            abi_blacklist: super::arm_base::abi_blacklist(),\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n             ..base\n         },\n     })"}, {"sha": "f759c3eeb011c2c5eed4959ea4480f088b305ebc", "filename": "src/librustc_target/spec/thumbv7neon_unknown_linux_musleabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Fthumbv7neon_unknown_linux_musleabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d11118ef55501a73d423651e45c0102afd0209/src%2Flibrustc_target%2Fspec%2Fthumbv7neon_unknown_linux_musleabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumbv7neon_unknown_linux_musleabihf.rs?ref=d4d11118ef55501a73d423651e45c0102afd0209", "patch": "@@ -29,7 +29,7 @@ pub fn target() -> TargetResult {\n             features: \"+v7,+thumb-mode,+thumb2,+vfp3,+neon\".to_string(),\n             cpu: \"generic\".to_string(),\n             max_atomic_width: Some(64),\n-            abi_blacklist: super::arm_base::abi_blacklist(),\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n             target_mcount: \"\\u{1}mcount\".to_string(),\n             ..base\n         },"}, {"sha": "c0de20822bacf4c4320a4c5d34ccf3a7bd76ad6a", "filename": "src/test/ui/issues/issue-29540.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4d11118ef55501a73d423651e45c0102afd0209/src%2Ftest%2Fui%2Fissues%2Fissue-29540.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d11118ef55501a73d423651e45c0102afd0209/src%2Ftest%2Fui%2Fissues%2Fissue-29540.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29540.rs?ref=d4d11118ef55501a73d423651e45c0102afd0209", "patch": "@@ -283,7 +283,7 @@ pub struct Config {\n     pub mds_beacon_interval: String,\n     pub mds_beacon_grace: String,\n     pub mds_enforce_unique_name: String,\n-    pub mds_blacklist_interval: String,\n+    pub mds_interval: String,\n     pub mds_session_timeout: String,\n     pub mds_freeze_tree_timeout: String,\n     pub mds_session_autoclose: String,"}, {"sha": "97272f1a9c1b6e342f08adfcbc456fd3a14f9574", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d4d11118ef55501a73d423651e45c0102afd0209/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d11118ef55501a73d423651e45c0102afd0209/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=d4d11118ef55501a73d423651e45c0102afd0209", "patch": "@@ -401,7 +401,7 @@ fn configure_lldb(config: &Config) -> Option<Config> {\n     }\n \n     if let Some(lldb_version) = config.lldb_version.as_ref() {\n-        if is_blacklisted_lldb_version(&lldb_version) {\n+        if lldb_version == \"350\" {\n             println!(\n                 \"WARNING: The used version of LLDB ({}) has a \\\n                  known issue that breaks debuginfo tests. See \\\n@@ -979,7 +979,3 @@ fn extract_lldb_version(full_version_line: Option<String>) -> (Option<String>, b\n     }\n     (None, false)\n }\n-\n-fn is_blacklisted_lldb_version(version: &str) -> bool {\n-    version == \"350\"\n-}"}]}