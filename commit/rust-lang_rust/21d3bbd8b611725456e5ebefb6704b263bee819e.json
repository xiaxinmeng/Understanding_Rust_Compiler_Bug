{"sha": "21d3bbd8b611725456e5ebefb6704b263bee819e", "node_id": "C_kwDOAAsO6NoAKDIxZDNiYmQ4YjYxMTcyNTQ1NmU1ZWJlZmI2NzA0YjI2M2JlZTgxOWU", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-10-14T12:25:12Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-10-17T08:54:24Z"}, "message": "lint: use derive more\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "323e935179ec773afa1c99e3b7bc4a840307482b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/323e935179ec773afa1c99e3b7bc4a840307482b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21d3bbd8b611725456e5ebefb6704b263bee819e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21d3bbd8b611725456e5ebefb6704b263bee819e", "html_url": "https://github.com/rust-lang/rust/commit/21d3bbd8b611725456e5ebefb6704b263bee819e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21d3bbd8b611725456e5ebefb6704b263bee819e/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea5d258a7560c0cb5b6080258ccae4a7e4d6277e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea5d258a7560c0cb5b6080258ccae4a7e4d6277e", "html_url": "https://github.com/rust-lang/rust/commit/ea5d258a7560c0cb5b6080258ccae4a7e4d6277e"}], "stats": {"total": 46, "additions": 20, "deletions": 26}, "files": [{"sha": "571b7dbfd1b04632b0a07cd75dbdb70f2828620e", "filename": "compiler/rustc_errors/src/diagnostic_impls.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/21d3bbd8b611725456e5ebefb6704b263bee819e/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21d3bbd8b611725456e5ebefb6704b263bee819e/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_impls.rs?ref=21d3bbd8b611725456e5ebefb6704b263bee819e", "patch": "@@ -1,14 +1,14 @@\n use crate::{\n     fluent, DiagnosticArgValue, DiagnosticBuilder, Handler, IntoDiagnostic, IntoDiagnosticArg,\n };\n-use rustc_target::abi::TargetDataLayoutErrors;\n-use rustc_target::spec::{PanicStrategy, SplitDebuginfo, StackProtector, TargetTriple};\n-\n use rustc_ast as ast;\n use rustc_ast_pretty::pprust;\n use rustc_hir as hir;\n+use rustc_lint_defs::Level;\n use rustc_span::edition::Edition;\n use rustc_span::symbol::{Ident, MacroRulesNormalizedIdent, Symbol};\n+use rustc_target::abi::TargetDataLayoutErrors;\n+use rustc_target::spec::{PanicStrategy, SplitDebuginfo, StackProtector, TargetTriple};\n use std::borrow::Cow;\n use std::fmt;\n use std::num::ParseIntError;\n@@ -155,6 +155,21 @@ impl IntoDiagnosticArg for ast::token::TokenKind {\n     }\n }\n \n+impl IntoDiagnosticArg for Level {\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+        DiagnosticArgValue::Str(Cow::Borrowed(match self {\n+            Level::Allow => \"-A\",\n+            Level::Warn => \"-W\",\n+            Level::ForceWarn(_) => \"--force-warn\",\n+            Level::Deny => \"-D\",\n+            Level::Forbid => \"-F\",\n+            Level::Expect(_) => {\n+                unreachable!(\"lints with the level of `expect` should not run this code\");\n+            }\n+        }))\n+    }\n+}\n+\n impl IntoDiagnostic<'_, !> for TargetDataLayoutErrors<'_> {\n     fn into_diagnostic(self, handler: &Handler) -> DiagnosticBuilder<'_, !> {\n         let mut diag;"}, {"sha": "34b70030a58286a6d27f54844831dceac5b32696", "filename": "compiler/rustc_lint/src/errors.rs", "status": "modified", "additions": 2, "deletions": 23, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/21d3bbd8b611725456e5ebefb6704b263bee819e/compiler%2Frustc_lint%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21d3bbd8b611725456e5ebefb6704b263bee819e/compiler%2Frustc_lint%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ferrors.rs?ref=21d3bbd8b611725456e5ebefb6704b263bee819e", "patch": "@@ -88,34 +88,13 @@ pub struct BuiltinEllpisisInclusiveRangePatterns {\n     pub replace: String,\n }\n \n+#[derive(Subdiagnostic)]\n+#[note(lint::requested_level)]\n pub struct RequestedLevel {\n     pub level: Level,\n     pub lint_name: String,\n }\n \n-impl AddToDiagnostic for RequestedLevel {\n-    fn add_to_diagnostic_with<F>(self, diag: &mut Diagnostic, _: F)\n-    where\n-        F: Fn(&mut Diagnostic, SubdiagnosticMessage) -> SubdiagnosticMessage,\n-    {\n-        diag.note(fluent::lint::requested_level);\n-        diag.set_arg(\n-            \"level\",\n-            match self.level {\n-                Level::Allow => \"-A\",\n-                Level::Warn => \"-W\",\n-                Level::ForceWarn(_) => \"--force-warn\",\n-                Level::Deny => \"-D\",\n-                Level::Forbid => \"-F\",\n-                Level::Expect(_) => {\n-                    unreachable!(\"lints with the level of `expect` should not run this code\");\n-                }\n-            },\n-        );\n-        diag.set_arg(\"lint_name\", self.lint_name);\n-    }\n-}\n-\n #[derive(Diagnostic)]\n #[diag(lint::unsupported_group, code = \"E0602\")]\n pub struct UnsupportedGroup {"}]}