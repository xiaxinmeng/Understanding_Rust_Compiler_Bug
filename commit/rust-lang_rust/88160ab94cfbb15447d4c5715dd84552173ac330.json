{"sha": "88160ab94cfbb15447d4c5715dd84552173ac330", "node_id": "C_kwDOAAsO6NoAKDg4MTYwYWI5NGNmYmIxNTQ0N2Q0YzU3MTVkZDg0NTUyMTczYWMzMzA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-05-31T05:07:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-31T05:07:02Z"}, "message": "Rollup merge of #112096 - workingjubilee:array-unzip, r=scottmcm\n\nRemove array_zip\n\n`[T; N]::zip` is \"eager\" but most zips are mapped. This causes poor optimization in generated code. This is a fundamental design issue and \"zip\" is \"prime real estate\" in terms of function names, so let's free it up again.\n\n- FCP concluded in https://github.com/rust-lang/rust/issues/80094#issuecomment-1468300057\n- Closes https://github.com/rust-lang/rust/issues/80094\n- Closes https://github.com/rust-lang/rust/issues/103555\n\nCould use review to make sure we aren't losing any essential codegen tests.\nr? `@scottmcm`", "tree": {"sha": "3b3283cc9cd3a52dabe378b5771e0149f4452589", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b3283cc9cd3a52dabe378b5771e0149f4452589"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88160ab94cfbb15447d4c5715dd84552173ac330", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkdtX2CRBK7hj4Ov3rIwAA5K0IAKMeCF8EdTsqTEkEnfJRTso3\n1Vf6me/7NDeYbHg7w29BFaFvznrCewKHYEMHNZ6E0ne5o1PLEd2m1v5n2S7OenEw\nUrDNqr2wqPSGEWZMrKKTcqgDNiOfiRQOvTjLXrC6xpOVOBeKhiiTZS33ufQwm2sE\n4S7+AEgL0LHeNtpwdvc1jLlgH3B9mnKC9QlISlSnztleorzuIwkdZ+WOSxvFAqUT\nHS9T3P+9wmHO8FdOLYk2kE+Gbflan/1SQXup1wA+T/5sN3Dz5yhuqWe4OgPhMTsy\nAIFZrrJwJ4t77ir3wQ0pdpP4YlZtklMo7ohtYTN8Y5iccdTN+Z/vZ2mJJTvpCKw=\n=4z+i\n-----END PGP SIGNATURE-----\n", "payload": "tree 3b3283cc9cd3a52dabe378b5771e0149f4452589\nparent 183a31be859c36e94df9cc881a0356f1d559ddbf\nparent 374f5a8091f5dadff364cda8b19f8806e268e984\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1685509622 +0200\ncommitter GitHub <noreply@github.com> 1685509622 +0200\n\nRollup merge of #112096 - workingjubilee:array-unzip, r=scottmcm\n\nRemove array_zip\n\n`[T; N]::zip` is \"eager\" but most zips are mapped. This causes poor optimization in generated code. This is a fundamental design issue and \"zip\" is \"prime real estate\" in terms of function names, so let's free it up again.\n\n- FCP concluded in https://github.com/rust-lang/rust/issues/80094#issuecomment-1468300057\n- Closes https://github.com/rust-lang/rust/issues/80094\n- Closes https://github.com/rust-lang/rust/issues/103555\n\nCould use review to make sure we aren't losing any essential codegen tests.\nr? `@scottmcm`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88160ab94cfbb15447d4c5715dd84552173ac330", "html_url": "https://github.com/rust-lang/rust/commit/88160ab94cfbb15447d4c5715dd84552173ac330", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88160ab94cfbb15447d4c5715dd84552173ac330/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "183a31be859c36e94df9cc881a0356f1d559ddbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/183a31be859c36e94df9cc881a0356f1d559ddbf", "html_url": "https://github.com/rust-lang/rust/commit/183a31be859c36e94df9cc881a0356f1d559ddbf"}, {"sha": "374f5a8091f5dadff364cda8b19f8806e268e984", "url": "https://api.github.com/repos/rust-lang/rust/commits/374f5a8091f5dadff364cda8b19f8806e268e984", "html_url": "https://github.com/rust-lang/rust/commit/374f5a8091f5dadff364cda8b19f8806e268e984"}], "stats": {"total": 41, "additions": 3, "deletions": 38}, "files": [{"sha": "76b3589b9e4b3c4223c043b0d3afc6d95dc9191b", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/88160ab94cfbb15447d4c5715dd84552173ac330/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88160ab94cfbb15447d4c5715dd84552173ac330/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=88160ab94cfbb15447d4c5715dd84552173ac330", "patch": "@@ -538,29 +538,6 @@ impl<T, const N: usize> [T; N] {\n         drain_array_with(self, |iter| try_from_trusted_iterator(iter.map(f)))\n     }\n \n-    /// 'Zips up' two arrays into a single array of pairs.\n-    ///\n-    /// `zip()` returns a new array where every element is a tuple where the\n-    /// first element comes from the first array, and the second element comes\n-    /// from the second array. In other words, it zips two arrays together,\n-    /// into a single one.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(array_zip)]\n-    /// let x = [1, 2, 3];\n-    /// let y = [4, 5, 6];\n-    /// let z = x.zip(y);\n-    /// assert_eq!(z, [(1, 4), (2, 5), (3, 6)]);\n-    /// ```\n-    #[unstable(feature = \"array_zip\", issue = \"80094\")]\n-    pub fn zip<U>(self, rhs: [U; N]) -> [(T, U); N] {\n-        drain_array_with(self, |lhs| {\n-            drain_array_with(rhs, |rhs| from_trusted_iterator(crate::iter::zip(lhs, rhs)))\n-        })\n-    }\n-\n     /// Returns a slice containing the entire array. Equivalent to `&s[..]`.\n     #[stable(feature = \"array_as_slice\", since = \"1.57.0\")]\n     #[rustc_const_stable(feature = \"array_as_slice\", since = \"1.57.0\")]"}, {"sha": "24f3f43d0787444157b3082985f7c679454141a4", "filename": "tests/codegen/array-map.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/88160ab94cfbb15447d4c5715dd84552173ac330/tests%2Fcodegen%2Farray-map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88160ab94cfbb15447d4c5715dd84552173ac330/tests%2Fcodegen%2Farray-map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Farray-map.rs?ref=88160ab94cfbb15447d4c5715dd84552173ac330", "patch": "@@ -4,7 +4,6 @@\n // ignore-debug (the extra assertions get in the way)\n \n #![crate_type = \"lib\"]\n-#![feature(array_zip)]\n \n // CHECK-LABEL: @short_integer_map\n #[no_mangle]\n@@ -16,16 +15,6 @@ pub fn short_integer_map(x: [u32; 8]) -> [u32; 8] {\n     x.map(|x| 2 * x + 1)\n }\n \n-// CHECK-LABEL: @short_integer_zip_map\n-#[no_mangle]\n-pub fn short_integer_zip_map(x: [u32; 8], y: [u32; 8]) -> [u32; 8] {\n-    // CHECK: %[[A:.+]] = load <8 x i32>\n-    // CHECK: %[[B:.+]] = load <8 x i32>\n-    // CHECK: sub <8 x i32> %[[B]], %[[A]]\n-    // CHECK: store <8 x i32>\n-    x.zip(y).map(|(x, y)| x - y)\n-}\n-\n // This test is checking that LLVM can SRoA away a bunch of the overhead,\n // like fully moving the iterators to registers.  Notably, previous implementations\n // of `map` ended up `alloca`ing the whole `array::IntoIterator`, meaning both a"}, {"sha": "54392be707f533f3c765f21df76d4783247a5c7d", "filename": "tests/codegen/autovectorize-f32x4.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/88160ab94cfbb15447d4c5715dd84552173ac330/tests%2Fcodegen%2Fautovectorize-f32x4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88160ab94cfbb15447d4c5715dd84552173ac330/tests%2Fcodegen%2Fautovectorize-f32x4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fautovectorize-f32x4.rs?ref=88160ab94cfbb15447d4c5715dd84552173ac330", "patch": "@@ -1,7 +1,6 @@\n // compile-flags: -C opt-level=3 -Z merge-functions=disabled\n // only-x86_64\n #![crate_type = \"lib\"]\n-#![feature(array_zip)]\n \n // CHECK-LABEL: @auto_vectorize_direct\n #[no_mangle]\n@@ -32,12 +31,12 @@ pub fn auto_vectorize_loop(a: [f32; 4], b: [f32; 4]) -> [f32; 4] {\n     c\n }\n \n-// CHECK-LABEL: @auto_vectorize_array_zip_map\n+// CHECK-LABEL: @auto_vectorize_array_from_fn\n #[no_mangle]\n-pub fn auto_vectorize_array_zip_map(a: [f32; 4], b: [f32; 4]) -> [f32; 4] {\n+pub fn auto_vectorize_array_from_fn(a: [f32; 4], b: [f32; 4]) -> [f32; 4] {\n // CHECK: load <4 x float>\n // CHECK: load <4 x float>\n // CHECK: fadd <4 x float>\n // CHECK: store <4 x float>\n-    a.zip(b).map(|(a, b)| a + b)\n+    std::array::from_fn(|i| a[i] + b[i])\n }"}]}