{"sha": "ed7b0447cb4d760746125f9b26f5283b02ff9056", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkN2IwNDQ3Y2I0ZDc2MDc0NjEyNWY5YjI2ZjUyODNiMDJmZjkwNTY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-02T22:09:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-02T22:09:09Z"}, "message": "Rollup merge of #63206 - BaoshanPang:master, r=alexcrichton\n\nremove unsupported test case\n\nr? @alexcrichton", "tree": {"sha": "f6d506ef804019f110e7fe65486f55d9c49a046c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6d506ef804019f110e7fe65486f55d9c49a046c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed7b0447cb4d760746125f9b26f5283b02ff9056", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdRLSFCRBK7hj4Ov3rIwAAdHIIABDkDBHnh4K0zFwtZ+AnTeCh\n3WMjveMmdH1iWOMsw4S1yhFsmjjWp9yv7pGCtf5bpBIXEB5lESQEwQ7JqSUWYwHG\nYUiT79Rm5QOmGuH02GW/XqmyAbPPpDHXznNwheUAyXMUlj8vA+nYRZDHm+5pHk7M\nmy9zyBcmjHddxSP+K4dUO3ttCe9mOM/LIES+Ge/w1BZ749MIOZqqxMaxswEgCrYo\n+vD4lxlphBnm/q1yQwoFbVIVAsemDPhY5av3LfFlwIT1CCDUnsWU4jwoa+YgEKlN\nkFQMEO2QekiZ2dyoVrBe9RHyzjERprnE2dFOz49NIVdE1Vdu115Stt1U/IxA820=\n=SiPZ\n-----END PGP SIGNATURE-----\n", "payload": "tree f6d506ef804019f110e7fe65486f55d9c49a046c\nparent 726f39a2585ede14c4e75ac440293fb556d49af5\nparent 208672f0d5da53b3553ac40d40c2a033ed883850\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1564783749 +0200\ncommitter GitHub <noreply@github.com> 1564783749 +0200\n\nRollup merge of #63206 - BaoshanPang:master, r=alexcrichton\n\nremove unsupported test case\n\nr? @alexcrichton\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed7b0447cb4d760746125f9b26f5283b02ff9056", "html_url": "https://github.com/rust-lang/rust/commit/ed7b0447cb4d760746125f9b26f5283b02ff9056", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed7b0447cb4d760746125f9b26f5283b02ff9056/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "726f39a2585ede14c4e75ac440293fb556d49af5", "url": "https://api.github.com/repos/rust-lang/rust/commits/726f39a2585ede14c4e75ac440293fb556d49af5", "html_url": "https://github.com/rust-lang/rust/commit/726f39a2585ede14c4e75ac440293fb556d49af5"}, {"sha": "208672f0d5da53b3553ac40d40c2a033ed883850", "url": "https://api.github.com/repos/rust-lang/rust/commits/208672f0d5da53b3553ac40d40c2a033ed883850", "html_url": "https://github.com/rust-lang/rust/commit/208672f0d5da53b3553ac40d40c2a033ed883850"}], "stats": {"total": 64, "additions": 0, "deletions": 64}, "files": [{"sha": "397200c39c2d743737de758b363f05b91db5afac", "filename": "src/libstd/sys/vxworks/process/process_common.rs", "status": "modified", "additions": 0, "deletions": 64, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/ed7b0447cb4d760746125f9b26f5283b02ff9056/src%2Flibstd%2Fsys%2Fvxworks%2Fprocess%2Fprocess_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed7b0447cb4d760746125f9b26f5283b02ff9056/src%2Flibstd%2Fsys%2Fvxworks%2Fprocess%2Fprocess_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Fprocess%2Fprocess_common.rs?ref=ed7b0447cb4d760746125f9b26f5283b02ff9056", "patch": "@@ -403,67 +403,3 @@ impl ExitCode {\n         self.0 as i32\n     }\n }\n-\n-#[cfg(all(test, not(target_os = \"emscripten\")))]\n-mod tests {\n-    use super::*;\n-\n-    use crate::ffi::OsStr;\n-    use crate::mem;\n-    use crate::ptr;\n-    use crate::sys::cvt;\n-\n-    macro_rules! t {\n-        ($e:expr) => {\n-            match $e {\n-                Ok(t) => t,\n-                Err(e) => panic!(\"received error for `{}`: {}\", stringify!($e), e),\n-            }\n-        }\n-    }\n-\n-    extern {\n-        fn sigemptyset(set: *mut libc::sigset_t) -> libc::c_int;\n-        fn sigaddset(set: *mut libc::sigset_t, signum: libc::c_int) -> libc::c_int;\n-    }\n-\n-    #[test]\n-    fn test_process_mask() {\n-        unsafe {\n-            // Test to make sure that a signal mask does not get inherited.\n-            let mut cmd = Command::new(OsStr::new(\"cat\"));\n-\n-            let mut set: libc::sigset_t = mem::uninitialized();\n-            let mut old_set: libc::sigset_t = mem::uninitialized();\n-            t!(cvt(sigemptyset(&mut set)));\n-            t!(cvt(sigaddset(&mut set, libc::SIGINT)));\n-            t!(cvt(libc::pthread_sigmask(libc::SIG_SETMASK, &set, &mut old_set)));\n-\n-            cmd.stdin(Stdio::MakePipe);\n-            cmd.stdout(Stdio::MakePipe);\n-\n-            let (mut cat, mut pipes) = t!(cmd.spawn(Stdio::Null, true));\n-            let stdin_write = pipes.stdin.take().unwrap();\n-            let stdout_read = pipes.stdout.take().unwrap();\n-\n-            t!(cvt(libc::pthread_sigmask(libc::SIG_SETMASK, &old_set,\n-                                         ptr::null_mut())));\n-\n-            t!(cvt(libc::kill(cat.id() as libc::pid_t, libc::SIGINT)));\n-            // We need to wait until SIGINT is definitely delivered. The\n-            // easiest way is to write something to cat, and try to read it\n-            // back: if SIGINT is unmasked, it'll get delivered when cat is\n-            // next scheduled.\n-            let _ = stdin_write.write(b\"Hello\");\n-            drop(stdin_write);\n-\n-            // Either EOF or failure (EPIPE) is okay.\n-            let mut buf = [0; 5];\n-            if let Ok(ret) = stdout_read.read(&mut buf) {\n-                assert_eq!(ret, 0);\n-            }\n-\n-            t!(cat.wait());\n-        }\n-    }\n-}"}]}