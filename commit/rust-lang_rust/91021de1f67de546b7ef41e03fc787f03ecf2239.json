{"sha": "91021de1f67de546b7ef41e03fc787f03ecf2239", "node_id": "C_kwDOAAsO6NoAKDkxMDIxZGUxZjY3ZGU1NDZiN2VmNDFlMDNmYzc4N2YwM2VjZjIyMzk", "commit": {"author": {"name": "cynecx", "email": "me@cynecx.net", "date": "2021-09-04T17:25:09Z"}, "committer": {"name": "cynecx", "email": "me@cynecx.net", "date": "2021-12-03T22:51:49Z"}, "message": "LLVM codgen support for unwinding inline assembly", "tree": {"sha": "2e809500921ea4bd58327c054b6965579cd74a81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e809500921ea4bd58327c054b6965579cd74a81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91021de1f67de546b7ef41e03fc787f03ecf2239", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91021de1f67de546b7ef41e03fc787f03ecf2239", "html_url": "https://github.com/rust-lang/rust/commit/91021de1f67de546b7ef41e03fc787f03ecf2239", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91021de1f67de546b7ef41e03fc787f03ecf2239/comments", "author": {"login": "cynecx", "id": 5961244, "node_id": "MDQ6VXNlcjU5NjEyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5961244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cynecx", "html_url": "https://github.com/cynecx", "followers_url": "https://api.github.com/users/cynecx/followers", "following_url": "https://api.github.com/users/cynecx/following{/other_user}", "gists_url": "https://api.github.com/users/cynecx/gists{/gist_id}", "starred_url": "https://api.github.com/users/cynecx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cynecx/subscriptions", "organizations_url": "https://api.github.com/users/cynecx/orgs", "repos_url": "https://api.github.com/users/cynecx/repos", "events_url": "https://api.github.com/users/cynecx/events{/privacy}", "received_events_url": "https://api.github.com/users/cynecx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cynecx", "id": 5961244, "node_id": "MDQ6VXNlcjU5NjEyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5961244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cynecx", "html_url": "https://github.com/cynecx", "followers_url": "https://api.github.com/users/cynecx/followers", "following_url": "https://api.github.com/users/cynecx/following{/other_user}", "gists_url": "https://api.github.com/users/cynecx/gists{/gist_id}", "starred_url": "https://api.github.com/users/cynecx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cynecx/subscriptions", "organizations_url": "https://api.github.com/users/cynecx/orgs", "repos_url": "https://api.github.com/users/cynecx/repos", "events_url": "https://api.github.com/users/cynecx/events{/privacy}", "received_events_url": "https://api.github.com/users/cynecx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "491dd1f387e4f0b167e35560a97efc9949304640", "url": "https://api.github.com/repos/rust-lang/rust/commits/491dd1f387e4f0b167e35560a97efc9949304640", "html_url": "https://github.com/rust-lang/rust/commit/491dd1f387e4f0b167e35560a97efc9949304640"}], "stats": {"total": 127, "additions": 109, "deletions": 18}, "files": [{"sha": "5cf6d95412bbe1b3b0beab9d1bad5b9120bd45a4", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/91021de1f67de546b7ef41e03fc787f03ecf2239/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91021de1f67de546b7ef41e03fc787f03ecf2239/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=91021de1f67de546b7ef41e03fc787f03ecf2239", "patch": "@@ -239,7 +239,8 @@ fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, '_>) {\n             fx.add_comment(inst, terminator_head);\n         }\n \n-        fx.set_debug_loc(bb_data.terminator().source_info);\n+        let source_info = bb_data.terminator().source_info;\n+        fx.set_debug_loc(source_info);\n \n         match &bb_data.terminator().kind {\n             TerminatorKind::Goto { target } => {\n@@ -295,19 +296,19 @@ fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, '_>) {\n                         let len = codegen_operand(fx, len).load_scalar(fx);\n                         let index = codegen_operand(fx, index).load_scalar(fx);\n                         let location = fx\n-                            .get_caller_location(bb_data.terminator().source_info.span)\n+                            .get_caller_location(source_info.span)\n                             .load_scalar(fx);\n \n                         codegen_panic_inner(\n                             fx,\n                             rustc_hir::LangItem::PanicBoundsCheck,\n                             &[index, len, location],\n-                            bb_data.terminator().source_info.span,\n+                            source_info.span,\n                         );\n                     }\n                     _ => {\n                         let msg_str = msg.description();\n-                        codegen_panic(fx, msg_str, bb_data.terminator().source_info.span);\n+                        codegen_panic(fx, msg_str, source_info.span);\n                     }\n                 }\n             }\n@@ -378,10 +379,18 @@ fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, '_>) {\n                 options,\n                 destination,\n                 line_spans: _,\n+                cleanup,\n             } => {\n+                if cleanup.is_some() {\n+                    fx.tcx.sess.span_fatal(\n+                        source_info.span,\n+                        \"cranelift doesn't support unwinding from inline assembly.\",\n+                    );\n+                }\n+\n                 crate::inline_asm::codegen_inline_asm(\n                     fx,\n-                    bb_data.terminator().source_info.span,\n+                    source_info.span,\n                     template,\n                     operands,\n                     *options,\n@@ -415,7 +424,7 @@ fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, '_>) {\n             }\n             TerminatorKind::Drop { place, target, unwind: _ } => {\n                 let drop_place = codegen_place(fx, *place);\n-                crate::abi::codegen_drop(fx, bb_data.terminator().source_info.span, drop_place);\n+                crate::abi::codegen_drop(fx, source_info.span, drop_place);\n \n                 let target_block = fx.get_block(*target);\n                 fx.bcx.ins().jump(target_block, &[]);"}, {"sha": "83c5cb6f1cf51ee28f975668cf55237301ca49da", "filename": "compiler/rustc_codegen_llvm/src/asm.rs", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/91021de1f67de546b7ef41e03fc787f03ecf2239/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91021de1f67de546b7ef41e03fc787f03ecf2239/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs?ref=91021de1f67de546b7ef41e03fc787f03ecf2239", "patch": "@@ -1,6 +1,8 @@\n use crate::builder::Builder;\n+use crate::common::Funclet;\n use crate::context::CodegenCx;\n use crate::llvm;\n+use crate::llvm_util;\n use crate::type_::Type;\n use crate::type_of::LayoutLlvmExt;\n use crate::value::Value;\n@@ -98,6 +100,8 @@ impl AsmBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n             ia.alignstack,\n             ia.dialect,\n             &[span],\n+            false,\n+            None,\n         );\n         if r.is_none() {\n             return false;\n@@ -121,6 +125,7 @@ impl AsmBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n         options: InlineAsmOptions,\n         line_spans: &[Span],\n         instance: Instance<'_>,\n+        dest_catch_funclet: Option<(Self::BasicBlock, Self::BasicBlock, Option<&Self::Funclet>)>,\n     ) {\n         let asm_arch = self.tcx.sess.asm_arch.unwrap();\n \n@@ -355,6 +360,8 @@ impl AsmBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n             alignstack,\n             dialect,\n             line_spans,\n+            options.contains(InlineAsmOptions::MAY_UNWIND),\n+            dest_catch_funclet,\n         )\n         .unwrap_or_else(|| span_bug!(line_spans[0], \"LLVM asm constraint validation failed\"));\n \n@@ -447,10 +454,16 @@ pub(crate) fn inline_asm_call(\n     alignstack: bool,\n     dia: LlvmAsmDialect,\n     line_spans: &[Span],\n+    unwind: bool,\n+    dest_catch_funclet: Option<(\n+        &'ll llvm::BasicBlock,\n+        &'ll llvm::BasicBlock,\n+        Option<&Funclet<'ll>>,\n+    )>,\n ) -> Option<&'ll Value> {\n     let volatile = if volatile { llvm::True } else { llvm::False };\n     let alignstack = if alignstack { llvm::True } else { llvm::False };\n-    let can_throw = llvm::False;\n+    let can_throw = if unwind { llvm::True } else { llvm::False };\n \n     let argtys = inputs\n         .iter()\n@@ -467,6 +480,13 @@ pub(crate) fn inline_asm_call(\n         let constraints_ok = llvm::LLVMRustInlineAsmVerify(fty, cons.as_ptr().cast(), cons.len());\n         debug!(\"constraint verification result: {:?}\", constraints_ok);\n         if constraints_ok {\n+            if unwind && llvm_util::get_version() < (13, 0, 0) {\n+                bx.cx.sess().span_fatal(\n+                    line_spans[0],\n+                    \"unwinding from inline assembly is only supported on llvm >= 13.\",\n+                );\n+            }\n+\n             let v = llvm::LLVMRustInlineAsm(\n                 fty,\n                 asm.as_ptr().cast(),\n@@ -478,7 +498,12 @@ pub(crate) fn inline_asm_call(\n                 llvm::AsmDialect::from_generic(dia),\n                 can_throw,\n             );\n-            let call = bx.call(fty, v, inputs, None);\n+\n+            let call = if let Some((dest, catch, funclet)) = dest_catch_funclet {\n+                bx.invoke(fty, v, inputs, dest, catch, funclet)\n+            } else {\n+                bx.call(fty, v, inputs, None)\n+            };\n \n             // Store mark in a metadata node so we can map LLVM errors\n             // back to source locations.  See #17552."}, {"sha": "5e7d7552daf10ad8e4a42a3fa8b3f480618ac023", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91021de1f67de546b7ef41e03fc787f03ecf2239/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91021de1f67de546b7ef41e03fc787f03ecf2239/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=91021de1f67de546b7ef41e03fc787f03ecf2239", "patch": "@@ -350,6 +350,8 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                     false,\n                     ast::LlvmAsmDialect::Att,\n                     &[span],\n+                    false,\n+                    None,\n                 )\n                 .unwrap_or_else(|| bug!(\"failed to generate inline asm call for `black_box`\"));\n "}, {"sha": "0447c02fdecc4fdc2e9791d374439cc978290899", "filename": "compiler/rustc_codegen_ssa/src/mir/analyze.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91021de1f67de546b7ef41e03fc787f03ecf2239/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91021de1f67de546b7ef41e03fc787f03ecf2239/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs?ref=91021de1f67de546b7ef41e03fc787f03ecf2239", "patch": "@@ -276,9 +276,9 @@ pub fn cleanup_kinds(mir: &mir::Body<'_>) -> IndexVec<mir::BasicBlock, CleanupKi\n                 | TerminatorKind::SwitchInt { .. }\n                 | TerminatorKind::Yield { .. }\n                 | TerminatorKind::FalseEdge { .. }\n-                | TerminatorKind::FalseUnwind { .. }\n-                | TerminatorKind::InlineAsm { .. } => { /* nothing to do */ }\n+                | TerminatorKind::FalseUnwind { .. } => { /* nothing to do */ }\n                 TerminatorKind::Call { cleanup: unwind, .. }\n+                | TerminatorKind::InlineAsm { cleanup: unwind, .. }\n                 | TerminatorKind::Assert { cleanup: unwind, .. }\n                 | TerminatorKind::DropAndReplace { unwind, .. }\n                 | TerminatorKind::Drop { unwind, .. } => {"}, {"sha": "e914e4932693215ea8f9718e3636416b2781c473", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 54, "deletions": 8, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/91021de1f67de546b7ef41e03fc787f03ecf2239/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91021de1f67de546b7ef41e03fc787f03ecf2239/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=91021de1f67de546b7ef41e03fc787f03ecf2239", "patch": "@@ -10,6 +10,7 @@ use crate::traits::*;\n use crate::MemFlags;\n \n use rustc_ast as ast;\n+use rustc_ast::{InlineAsmOptions, InlineAsmTemplatePiece};\n use rustc_hir::lang_items::LangItem;\n use rustc_index::vec::Idx;\n use rustc_middle::mir::AssertKind;\n@@ -174,6 +175,45 @@ impl<'a, 'tcx> TerminatorCodegenHelper<'tcx> {\n             }\n         }\n     }\n+\n+    /// Generates inline assembly with optional `destination` and `cleanup`.\n+    fn do_inlineasm<Bx: BuilderMethods<'a, 'tcx>>(\n+        &self,\n+        fx: &mut FunctionCx<'a, 'tcx, Bx>,\n+        bx: &mut Bx,\n+        template: &[InlineAsmTemplatePiece],\n+        operands: &[InlineAsmOperandRef<'tcx, Bx>],\n+        options: InlineAsmOptions,\n+        line_spans: &[Span],\n+        destination: Option<mir::BasicBlock>,\n+        cleanup: Option<mir::BasicBlock>,\n+        instance: Instance<'_>,\n+    ) {\n+        if let Some(cleanup) = cleanup {\n+            let ret_llbb = if let Some(target) = destination {\n+                fx.llbb(target)\n+            } else {\n+                fx.unreachable_block()\n+            };\n+\n+            bx.codegen_inline_asm(\n+                template,\n+                &operands,\n+                options,\n+                line_spans,\n+                instance,\n+                Some((ret_llbb, self.llblock(fx, cleanup), self.funclet(fx))),\n+            );\n+        } else {\n+            bx.codegen_inline_asm(template, &operands, options, line_spans, instance, None);\n+\n+            if let Some(target) = destination {\n+                self.funclet_br(fx, bx, target);\n+            } else {\n+                bx.unreachable();\n+            }\n+        }\n+    }\n }\n \n /// Codegen implementations for some terminator variants.\n@@ -877,6 +917,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         options: ast::InlineAsmOptions,\n         line_spans: &[Span],\n         destination: Option<mir::BasicBlock>,\n+        cleanup: Option<mir::BasicBlock>,\n         instance: Instance<'_>,\n     ) {\n         let span = terminator.source_info.span;\n@@ -931,13 +972,17 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             })\n             .collect();\n \n-        bx.codegen_inline_asm(template, &operands, options, line_spans, instance);\n-\n-        if let Some(target) = destination {\n-            helper.funclet_br(self, &mut bx, target);\n-        } else {\n-            bx.unreachable();\n-        }\n+        helper.do_inlineasm(\n+            self,\n+            &mut bx,\n+            template,\n+            &operands,\n+            options,\n+            line_spans,\n+            destination,\n+            cleanup,\n+            instance,\n+        );\n     }\n }\n \n@@ -1041,7 +1086,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 options,\n                 line_spans,\n                 destination,\n-                cleanup: _, // TODO\n+                cleanup,\n             } => {\n                 self.codegen_asm_terminator(\n                     helper,\n@@ -1052,6 +1097,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     options,\n                     line_spans,\n                     destination,\n+                    cleanup,\n                     self.instance,\n                 );\n             }"}, {"sha": "65f3c754d2dccf408f5d84bee432c260f4bb58bf", "filename": "compiler/rustc_codegen_ssa/src/traits/asm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91021de1f67de546b7ef41e03fc787f03ecf2239/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91021de1f67de546b7ef41e03fc787f03ecf2239/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fasm.rs?ref=91021de1f67de546b7ef41e03fc787f03ecf2239", "patch": "@@ -59,6 +59,7 @@ pub trait AsmBuilderMethods<'tcx>: BackendTypes {\n         options: InlineAsmOptions,\n         line_spans: &[Span],\n         instance: Instance<'_>,\n+        dest_catch_funclet: Option<(Self::BasicBlock, Self::BasicBlock, Option<&Self::Funclet>)>,\n     );\n }\n "}, {"sha": "3fbf020c552d741842f715b26b2bbd23854a2e2c", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/91021de1f67de546b7ef41e03fc787f03ecf2239/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/91021de1f67de546b7ef41e03fc787f03ecf2239/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=91021de1f67de546b7ef41e03fc787f03ecf2239", "patch": "@@ -446,11 +446,19 @@ LLVMRustInlineAsm(LLVMTypeRef Ty, char *AsmString, size_t AsmStringLen,\n                   char *Constraints, size_t ConstraintsLen,\n                   LLVMBool HasSideEffects, LLVMBool IsAlignStack,\n                   LLVMRustAsmDialect Dialect, LLVMBool CanThrow) {\n+#if LLVM_VERSION_GE(13, 0)\n   return wrap(InlineAsm::get(unwrap<FunctionType>(Ty),\n                              StringRef(AsmString, AsmStringLen),\n                              StringRef(Constraints, ConstraintsLen),\n                              HasSideEffects, IsAlignStack,\n                              fromRust(Dialect), CanThrow));\n+#else\n+  return wrap(InlineAsm::get(unwrap<FunctionType>(Ty),\n+                             StringRef(AsmString, AsmStringLen),\n+                             StringRef(Constraints, ConstraintsLen),\n+                             HasSideEffects, IsAlignStack,\n+                             fromRust(Dialect)));\n+#endif\n }\n \n extern \"C\" bool LLVMRustInlineAsmVerify(LLVMTypeRef Ty, char *Constraints,"}]}