{"sha": "efea07f31c4786945fba076f8acae2ee825975d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmZWEwN2YzMWM0Nzg2OTQ1ZmJhMDc2ZjhhY2FlMmVlODI1OTc1ZDE=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-15T15:02:45Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-15T15:02:45Z"}, "message": "Add nested region folding test", "tree": {"sha": "8e0b7a5b64b57ae362b449cce77ca57d025c0c52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e0b7a5b64b57ae362b449cce77ca57d025c0c52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efea07f31c4786945fba076f8acae2ee825975d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efea07f31c4786945fba076f8acae2ee825975d1", "html_url": "https://github.com/rust-lang/rust/commit/efea07f31c4786945fba076f8acae2ee825975d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efea07f31c4786945fba076f8acae2ee825975d1/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "658514d378ffcf3c3c028138aede860f75268729", "url": "https://api.github.com/repos/rust-lang/rust/commits/658514d378ffcf3c3c028138aede860f75268729", "html_url": "https://github.com/rust-lang/rust/commit/658514d378ffcf3c3c028138aede860f75268729"}], "stats": {"total": 59, "additions": 32, "deletions": 27}, "files": [{"sha": "66853bea7ff9486f3dddb2cca4d353bb4f4e7f90", "filename": "crates/ide/src/folding_ranges.rs", "status": "modified", "additions": 32, "deletions": 27, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/efea07f31c4786945fba076f8acae2ee825975d1/crates%2Fide%2Fsrc%2Ffolding_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efea07f31c4786945fba076f8acae2ee825975d1/crates%2Fide%2Fsrc%2Ffolding_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ffolding_ranges.rs?ref=efea07f31c4786945fba076f8acae2ee825975d1", "patch": "@@ -7,6 +7,9 @@ use syntax::{\n     SyntaxNode, TextRange, TextSize,\n };\n \n+const REGION_START: &str = \"// region:\";\n+const REGION_END: &str = \"// endregion\";\n+\n #[derive(Debug, PartialEq, Eq)]\n pub enum FoldKind {\n     Comment,\n@@ -30,17 +33,18 @@ pub struct Fold {\n \n // Feature: Folding\n //\n-// Defines folding regions for curly braced blocks, runs of consecutive import\n-// statements, and `region` / `endregion` comment markers.\n+// Defines folding regions for curly braced blocks, runs of consecutive use, mod, const or static\n+// items, and `region` / `endregion` comment markers.\n pub(crate) fn folding_ranges(file: &SourceFile) -> Vec<Fold> {\n     let mut res = vec![];\n     let mut visited_comments = FxHashSet::default();\n     let mut visited_imports = FxHashSet::default();\n     let mut visited_mods = FxHashSet::default();\n     let mut visited_consts = FxHashSet::default();\n     let mut visited_statics = FxHashSet::default();\n+\n     // regions can be nested, here is a LIFO buffer\n-    let mut regions_starts: Vec<TextSize> = vec![];\n+    let mut region_starts: Vec<TextSize> = vec![];\n \n     for element in file.syntax().descendants_with_tokens() {\n         // Fold items that span multiple lines\n@@ -59,27 +63,23 @@ pub(crate) fn folding_ranges(file: &SourceFile) -> Vec<Fold> {\n             NodeOrToken::Token(token) => {\n                 // Fold groups of comments\n                 if let Some(comment) = ast::Comment::cast(token) {\n-                    if !visited_comments.contains(&comment) {\n-                        // regions are not real comments\n-                        if comment.text().trim().starts_with(\"// region:\") {\n-                            regions_starts.push(comment.syntax().text_range().start());\n-                        } else if comment.text().trim().starts_with(\"// endregion\") {\n-                            if let Some(region) = regions_starts.pop() {\n-                                res.push(Fold {\n-                                    range: TextRange::new(\n-                                        region,\n-                                        comment.syntax().text_range().end(),\n-                                    ),\n-                                    kind: FoldKind::Region,\n-                                })\n-                            }\n-                        } else {\n-                            if let Some(range) =\n-                                contiguous_range_for_comment(comment, &mut visited_comments)\n-                            {\n-                                res.push(Fold { range, kind: FoldKind::Comment })\n-                            }\n+                    if visited_comments.contains(&comment) {\n+                        continue;\n+                    }\n+                    let text = comment.text().trim_start();\n+                    if text.starts_with(REGION_START) {\n+                        region_starts.push(comment.syntax().text_range().start());\n+                    } else if text.starts_with(REGION_END) {\n+                        if let Some(region) = region_starts.pop() {\n+                            res.push(Fold {\n+                                range: TextRange::new(region, comment.syntax().text_range().end()),\n+                                kind: FoldKind::Region,\n+                            })\n                         }\n+                    } else if let Some(range) =\n+                        contiguous_range_for_comment(comment, &mut visited_comments)\n+                    {\n+                        res.push(Fold { range, kind: FoldKind::Comment })\n                     }\n                 }\n             }\n@@ -286,16 +286,18 @@ mod tests {\n         let (ranges, text) = extract_tags(ra_fixture, \"fold\");\n \n         let parse = SourceFile::parse(&text);\n-        let folds = folding_ranges(&parse.tree());\n+        let mut folds = folding_ranges(&parse.tree());\n+        folds.sort_by_key(|fold| (fold.range.start(), fold.range.end()));\n+\n         assert_eq!(\n             folds.len(),\n             ranges.len(),\n             \"The amount of folds is different than the expected amount\"\n         );\n \n         for (fold, (range, attr)) in folds.iter().zip(ranges.into_iter()) {\n-            assert_eq!(fold.range.start(), range.start());\n-            assert_eq!(fold.range.end(), range.end());\n+            assert_eq!(fold.range.start(), range.start(), \"mismatched start of folding ranges\");\n+            assert_eq!(fold.range.end(), range.end(), \"mismatched end of folding ranges\");\n \n             let kind = match fold.kind {\n                 FoldKind::Comment => \"comment\",\n@@ -525,7 +527,10 @@ const FOO: [usize; 4] = <fold array>[\n // 1. some normal comment\n <fold region>// region: test\n // 2. some normal comment\n-calling_function(x,y);\n+<fold region>// region: inner\n+fn f() {}\n+// endregion</fold>\n+fn f2() {}\n // endregion: test</fold>\n \"#,\n         )"}]}