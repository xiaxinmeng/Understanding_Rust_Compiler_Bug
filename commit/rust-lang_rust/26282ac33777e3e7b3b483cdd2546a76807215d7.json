{"sha": "26282ac33777e3e7b3b483cdd2546a76807215d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2MjgyYWMzMzc3N2UzZTdiM2I0ODNjZGQyNTQ2YTc2ODA3MjE1ZDc=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-11-10T10:58:03Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-11-13T02:43:00Z"}, "message": "Add more \"help: ...\"'s to the parser.\n\nAdds a method for printing a fatal error and also a help message to the\nparser and uses this in a variety of places to improve error messages.\n\nCloses #12213.", "tree": {"sha": "4067ce8cd2c04701112edb072cc81457ec5ea592", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4067ce8cd2c04701112edb072cc81457ec5ea592"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26282ac33777e3e7b3b483cdd2546a76807215d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26282ac33777e3e7b3b483cdd2546a76807215d7", "html_url": "https://github.com/rust-lang/rust/commit/26282ac33777e3e7b3b483cdd2546a76807215d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26282ac33777e3e7b3b483cdd2546a76807215d7/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e621e3216bfb074b03ddeb045dc467d9ec4641f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e621e3216bfb074b03ddeb045dc467d9ec4641f8", "html_url": "https://github.com/rust-lang/rust/commit/e621e3216bfb074b03ddeb045dc467d9ec4641f8"}], "stats": {"total": 65, "additions": 41, "deletions": 24}, "files": [{"sha": "5cea74f0b96aa2ef23887b9be1b20e653d73e699", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 38, "deletions": 23, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/26282ac33777e3e7b3b483cdd2546a76807215d7/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26282ac33777e3e7b3b483cdd2546a76807215d7/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=26282ac33777e3e7b3b483cdd2546a76807215d7", "patch": "@@ -66,6 +66,7 @@ use ast_util::{as_prec, ident_to_path, operator_prec};\n use ast_util;\n use codemap::{Span, BytePos, Spanned, spanned, mk_sp};\n use codemap;\n+use diagnostic;\n use ext::tt::macro_parser;\n use parse;\n use parse::attr::ParserAttr;\n@@ -940,6 +941,11 @@ impl<'a> Parser<'a> {\n     pub fn span_fatal(&mut self, sp: Span, m: &str) -> ! {\n         self.sess.span_diagnostic.span_fatal(sp, m)\n     }\n+    pub fn span_fatal_help(&mut self, sp: Span, m: &str, help: &str) -> ! {\n+        self.span_err(sp, m);\n+        self.span_help(sp, help);\n+        panic!(diagnostic::FatalError);\n+    }\n     pub fn span_note(&mut self, sp: Span, m: &str) {\n         self.sess.span_diagnostic.span_note(sp, m)\n     }\n@@ -3702,7 +3708,14 @@ impl<'a> Parser<'a> {\n         maybe_whole!(no_clone self, NtBlock);\n \n         let lo = self.span.lo;\n-        self.expect(&token::OpenDelim(token::Brace));\n+\n+        if !self.eat(&token::OpenDelim(token::Brace)) {\n+            let sp = self.span;\n+            let tok = self.this_token_to_string();\n+            self.span_fatal_help(sp,\n+                                 format!(\"expected `{{`, found `{}`\", tok).as_slice(),\n+                                 \"place this code inside a block\");\n+        }\n \n         return self.parse_block_tail_(lo, DefaultBlock, Vec::new());\n     }\n@@ -4693,9 +4706,10 @@ impl<'a> Parser<'a> {\n             _ => {\n                 let span = self.span;\n                 let token_str = self.this_token_to_string();\n-                self.span_fatal(span,\n-                                format!(\"expected `,`, or `}}`, found `{}`\",\n-                                        token_str).as_slice())\n+                self.span_fatal_help(span,\n+                                     format!(\"expected `,`, or `}}`, found `{}`\",\n+                                             token_str).as_slice(),\n+                                     \"struct fields should be separated by commas\")\n             }\n         }\n         a_var\n@@ -4897,19 +4911,24 @@ impl<'a> Parser<'a> {\n                     (true, false) => (default_path, false),\n                     (false, true) => (secondary_path, true),\n                     (false, false) => {\n-                        self.span_fatal(id_sp,\n-                                        format!(\"file not found for module \\\n-                                                 `{}`\",\n-                                                 mod_name).as_slice());\n+                        self.span_fatal_help(id_sp,\n+                                             format!(\"file not found for module `{}`\",\n+                                                     mod_name).as_slice(),\n+                                             format!(\"name the file either {} or {} inside \\\n+                                                     the directory {}\",\n+                                                     default_path_str,\n+                                                     secondary_path_str,\n+                                                     dir_path.display()).as_slice());\n                     }\n                     (true, true) => {\n-                        self.span_fatal(\n+                        self.span_fatal_help(\n                             id_sp,\n                             format!(\"file for module `{}` found at both {} \\\n                                      and {}\",\n                                     mod_name,\n                                     default_path_str,\n-                                    secondary_path_str).as_slice());\n+                                    secondary_path_str).as_slice(),\n+                            \"delete or rename one of them to remove the ambiguity\");\n                     }\n                 }\n             }\n@@ -5062,9 +5081,10 @@ impl<'a> Parser<'a> {\n                     // skip the ident if there is one\n                     if self.token.is_ident() { self.bump(); }\n \n-                    self.span_err(span,\n-                                  format!(\"expected `;`, found `as`; perhaps you meant \\\n-                                          to enclose the crate name `{}` in a string?\",\n+                    self.span_err(span, \"expected `;`, found `as`\");\n+                    self.span_help(span,\n+                                   format!(\"perhaps you meant to enclose the crate name `{}` in \\\n+                                           a string?\",\n                                           the_ident.as_str()).as_slice());\n                     None\n                 } else {\n@@ -5574,16 +5594,12 @@ impl<'a> Parser<'a> {\n         }\n \n         // FAILURE TO PARSE ITEM\n-        if visibility != Inherited {\n-            let mut s = String::from_str(\"unmatched visibility `\");\n-            if visibility == Public {\n-                s.push_str(\"pub\")\n-            } else {\n-                s.push_str(\"priv\")\n+        match visibility {\n+            Inherited => {}\n+            Public => {\n+                let last_span = self.last_span;\n+                self.span_fatal(last_span, \"unmatched visibility `pub`\");\n             }\n-            s.push('`');\n-            let last_span = self.last_span;\n-            self.span_fatal(last_span, s.as_slice());\n         }\n         return IoviNone(attrs);\n     }\n@@ -5905,4 +5921,3 @@ impl<'a> Parser<'a> {\n         }\n     }\n }\n-"}, {"sha": "5cc52f6f6dbff8c052a3f9c6a4a183b24bc59176", "filename": "src/test/compile-fail/extern-crate-as-no-string-help.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/26282ac33777e3e7b3b483cdd2546a76807215d7/src%2Ftest%2Fcompile-fail%2Fextern-crate-as-no-string-help.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26282ac33777e3e7b3b483cdd2546a76807215d7/src%2Ftest%2Fcompile-fail%2Fextern-crate-as-no-string-help.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextern-crate-as-no-string-help.rs?ref=26282ac33777e3e7b3b483cdd2546a76807215d7", "patch": "@@ -11,4 +11,5 @@\n // Tests that the proper help is displayed in the error message\n \n extern crate foo as bar;\n-//~^ ERROR expected `;`, found `as`; perhaps you meant to enclose the crate name `foo` in a string?\n+//~^ ERROR expected `;`, found `as`\n+//~^^ HELP perhaps you meant to enclose the crate name `foo` in a string?"}, {"sha": "bbf2152d5b795c3d0a7524ea3cf2fef6756f346c", "filename": "src/test/compile-fail/mod_file_not_exist.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26282ac33777e3e7b3b483cdd2546a76807215d7/src%2Ftest%2Fcompile-fail%2Fmod_file_not_exist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26282ac33777e3e7b3b483cdd2546a76807215d7/src%2Ftest%2Fcompile-fail%2Fmod_file_not_exist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmod_file_not_exist.rs?ref=26282ac33777e3e7b3b483cdd2546a76807215d7", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n mod not_a_real_file; //~ ERROR file not found for module `not_a_real_file`\n+//~^ HELP name the file either not_a_real_file.rs or not_a_real_file/mod.rs inside the directory\n \n fn main() {\n     assert_eq!(mod_file_aux::bar(), 10);"}]}