{"sha": "1599d2260347046e6d8841493ffc64cc876fda07", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1OTlkMjI2MDM0NzA0NmU2ZDg4NDE0OTNmZmM2NGNjODc2ZmRhMDc=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2014-04-05T01:46:43Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2014-04-05T01:46:43Z"}, "message": "Added session.fileline_note() method and support infrastucture for it.\n\nAdd way to print notes with just file:linenum prefix (preserving\nintegration with source lookup for e.g. vi and emacs) but don't repeat\nthe other span info.", "tree": {"sha": "cee86c6a02f5d929a3539e768861c80821499ee2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cee86c6a02f5d929a3539e768861c80821499ee2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1599d2260347046e6d8841493ffc64cc876fda07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1599d2260347046e6d8841493ffc64cc876fda07", "html_url": "https://github.com/rust-lang/rust/commit/1599d2260347046e6d8841493ffc64cc876fda07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1599d2260347046e6d8841493ffc64cc876fda07/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ccbffac40958159c571ee515b85146397c0a35f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ccbffac40958159c571ee515b85146397c0a35f", "html_url": "https://github.com/rust-lang/rust/commit/3ccbffac40958159c571ee515b85146397c0a35f"}], "stats": {"total": 53, "additions": 45, "deletions": 8}, "files": [{"sha": "c25a2e79824bbf1ee2821e3970a7ced8cf288a2a", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1599d2260347046e6d8841493ffc64cc876fda07/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1599d2260347046e6d8841493ffc64cc876fda07/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=1599d2260347046e6d8841493ffc64cc876fda07", "patch": "@@ -232,6 +232,9 @@ impl Session {\n     pub fn span_end_note(&self, sp: Span, msg: &str) {\n         self.diagnostic().span_end_note(sp, msg)\n     }\n+    pub fn fileline_note(&self, sp: Span, msg: &str) {\n+        self.diagnostic().fileline_note(sp, msg)\n+    }\n     pub fn note(&self, msg: &str) {\n         self.diagnostic().handler().note(msg)\n     }"}, {"sha": "e3514b6f3f36a8de8b6bc67e33f7013a22bf9cc7", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 42, "deletions": 8, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/1599d2260347046e6d8841493ffc64cc876fda07/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1599d2260347046e6d8841493ffc64cc876fda07/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=1599d2260347046e6d8841493ffc64cc876fda07", "patch": "@@ -20,11 +20,37 @@ use term;\n // maximum number of lines we will print for each error; arbitrary.\n static MAX_LINES: uint = 6u;\n \n+#[deriving(Clone)]\n+pub enum RenderSpan {\n+    /// A FullSpan renders with both with an initial line for the\n+    /// message, prefixed by file:linenum, followed by a summary of\n+    /// the source code covered by the span.\n+    FullSpan(Span),\n+\n+    /// A FileLine renders with just a line for the message prefixed\n+    /// by file:linenum.\n+    FileLine(Span),\n+}\n+\n+impl RenderSpan {\n+    fn span(self) -> Span {\n+        match self {\n+            FullSpan(s) | FileLine(s) => s\n+        }\n+    }\n+    fn is_full_span(&self) -> bool {\n+        match self {\n+            &FullSpan(..) => true,\n+            &FileLine(..) => false,\n+        }\n+    }\n+}\n+\n pub trait Emitter {\n     fn emit(&mut self, cmsp: Option<(&codemap::CodeMap, Span)>,\n             msg: &str, lvl: Level);\n     fn custom_emit(&mut self, cm: &codemap::CodeMap,\n-                   sp: Span, msg: &str, lvl: Level);\n+                   sp: RenderSpan, msg: &str, lvl: Level);\n }\n \n /// This structure is used to signify that a task has failed with a fatal error\n@@ -60,7 +86,10 @@ impl SpanHandler {\n         self.handler.emit(Some((&self.cm, sp)), msg, Note);\n     }\n     pub fn span_end_note(&self, sp: Span, msg: &str) {\n-        self.handler.custom_emit(&self.cm, sp, msg, Note);\n+        self.handler.custom_emit(&self.cm, FullSpan(sp), msg, Note);\n+    }\n+    pub fn fileline_note(&self, sp: Span, msg: &str) {\n+        self.handler.custom_emit(&self.cm, FileLine(sp), msg, Note);\n     }\n     pub fn span_bug(&self, sp: Span, msg: &str) -> ! {\n         self.handler.emit(Some((&self.cm, sp)), msg, Bug);\n@@ -132,7 +161,7 @@ impl Handler {\n         self.emit.borrow_mut().emit(cmsp, msg, lvl);\n     }\n     pub fn custom_emit(&self, cm: &codemap::CodeMap,\n-                       sp: Span, msg: &str, lvl: Level) {\n+                       sp: RenderSpan, msg: &str, lvl: Level) {\n         self.emit.borrow_mut().custom_emit(cm, sp, msg, lvl);\n     }\n }\n@@ -258,7 +287,7 @@ impl Emitter for EmitterWriter {\n             msg: &str,\n             lvl: Level) {\n         let error = match cmsp {\n-            Some((cm, sp)) => emit(self, cm, sp, msg, lvl, false),\n+            Some((cm, sp)) => emit(self, cm, FullSpan(sp), msg, lvl, false),\n             None => print_diagnostic(self, \"\", lvl, msg),\n         };\n \n@@ -269,16 +298,17 @@ impl Emitter for EmitterWriter {\n     }\n \n     fn custom_emit(&mut self, cm: &codemap::CodeMap,\n-                   sp: Span, msg: &str, lvl: Level) {\n+                   sp: RenderSpan, msg: &str, lvl: Level) {\n         match emit(self, cm, sp, msg, lvl, true) {\n             Ok(()) => {}\n             Err(e) => fail!(\"failed to print diagnostics: {}\", e),\n         }\n     }\n }\n \n-fn emit(dst: &mut EmitterWriter, cm: &codemap::CodeMap, sp: Span,\n+fn emit(dst: &mut EmitterWriter, cm: &codemap::CodeMap, rsp: RenderSpan,\n         msg: &str, lvl: Level, custom: bool) -> io::IoResult<()> {\n+    let sp = rsp.span();\n     let ss = cm.span_to_str(sp);\n     let lines = cm.span_to_lines(sp);\n     if custom {\n@@ -288,10 +318,14 @@ fn emit(dst: &mut EmitterWriter, cm: &codemap::CodeMap, sp: Span,\n         let span_end = Span { lo: sp.hi, hi: sp.hi, expn_info: sp.expn_info};\n         let ses = cm.span_to_str(span_end);\n         try!(print_diagnostic(dst, ses, lvl, msg));\n-        try!(custom_highlight_lines(dst, cm, sp, lvl, lines));\n+        if rsp.is_full_span() {\n+            try!(custom_highlight_lines(dst, cm, sp, lvl, lines));\n+        }\n     } else {\n         try!(print_diagnostic(dst, ss, lvl, msg));\n-        try!(highlight_lines(dst, cm, sp, lvl, lines));\n+        if rsp.is_full_span() {\n+            try!(highlight_lines(dst, cm, sp, lvl, lines));\n+        }\n     }\n     print_macro_backtrace(dst, cm, sp)\n }"}]}