{"sha": "aab345794f4a657937881de75934a7c31064efeb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhYjM0NTc5NGY0YTY1NzkzNzg4MWRlNzU5MzRhN2MzMTA2NGVmZWI=", "commit": {"author": {"name": "Luca Gladiator", "email": "luca.gladiator@unitybox.de", "date": "2020-05-03T12:02:30Z"}, "committer": {"name": "Luca Gladiator", "email": "luca.gladiator@unitybox.de", "date": "2020-05-03T12:02:30Z"}, "message": "Make BTreeMap::new and BTreeSet::new const", "tree": {"sha": "a641bbe28083bde107f8697de7d10de74e08aef9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a641bbe28083bde107f8697de7d10de74e08aef9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aab345794f4a657937881de75934a7c31064efeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aab345794f4a657937881de75934a7c31064efeb", "html_url": "https://github.com/rust-lang/rust/commit/aab345794f4a657937881de75934a7c31064efeb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aab345794f4a657937881de75934a7c31064efeb/comments", "author": null, "committer": null, "parents": [{"sha": "0a675c5e02e6ecfda7d4e04aabd23a9935e0c4bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a675c5e02e6ecfda7d4e04aabd23a9935e0c4bf", "html_url": "https://github.com/rust-lang/rust/commit/0a675c5e02e6ecfda7d4e04aabd23a9935e0c4bf"}], "stats": {"total": 16, "additions": 14, "deletions": 2}, "files": [{"sha": "bc3411e57c513d4123897fa0d3a8476a7b899fac", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aab345794f4a657937881de75934a7c31064efeb/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aab345794f4a657937881de75934a7c31064efeb/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=aab345794f4a657937881de75934a7c31064efeb", "patch": "@@ -556,7 +556,8 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     /// map.insert(1, \"a\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn new() -> BTreeMap<K, V> {\n+    #[rustc_const_unstable(feature = \"const_btree_new\", issue = \"71835\")]\n+    pub const fn new() -> BTreeMap<K, V> {\n         BTreeMap { root: None, length: 0 }\n     }\n "}, {"sha": "dee5fb878ff2a2998ad2c75e04237d7477012882", "filename": "src/liballoc/collections/btree/set.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aab345794f4a657937881de75934a7c31064efeb/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aab345794f4a657937881de75934a7c31064efeb/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs?ref=aab345794f4a657937881de75934a7c31064efeb", "patch": "@@ -309,7 +309,8 @@ impl<T: Ord> BTreeSet<T> {\n     /// let mut set: BTreeSet<i32> = BTreeSet::new();\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn new() -> BTreeSet<T> {\n+    #[rustc_const_unstable(feature = \"const_btree_new\", issue = \"71835\")]\n+    pub const fn new() -> BTreeSet<T> {\n         BTreeSet { map: BTreeMap::new() }\n     }\n "}, {"sha": "5365c9d01684adb8fdaa7c2e3b57afe3f543dc6f", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aab345794f4a657937881de75934a7c31064efeb/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aab345794f4a657937881de75934a7c31064efeb/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=aab345794f4a657937881de75934a7c31064efeb", "patch": "@@ -82,6 +82,7 @@\n #![feature(cfg_sanitize)]\n #![feature(cfg_target_has_atomic)]\n #![feature(coerce_unsized)]\n+#![feature(const_btree_new)]\n #![feature(const_generic_impls_guard)]\n #![feature(const_generics)]\n #![feature(const_in_array_repeat_expressions)]"}, {"sha": "df980706087ae5c2d63fafc5c0f5354b798f1cd5", "filename": "src/test/ui/collections-const-new.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/aab345794f4a657937881de75934a7c31064efeb/src%2Ftest%2Fui%2Fcollections-const-new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aab345794f4a657937881de75934a7c31064efeb/src%2Ftest%2Fui%2Fcollections-const-new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcollections-const-new.rs?ref=aab345794f4a657937881de75934a7c31064efeb", "patch": "@@ -3,9 +3,18 @@\n // Test several functions can be used for constants\n // 1. Vec::new()\n // 2. String::new()\n+// 3. BTreeMap::new()\n+// 3. BTreeSet::new()\n+\n+#![feature(const_btree_new)]\n \n const MY_VEC: Vec<usize> = Vec::new();\n \n const MY_STRING: String = String::new();\n \n+use std::collections::{BTreeMap, BTreeSet};\n+const MY_BTREEMAP: BTreeMap<u32, u32> = BTreeMap::new();\n+\n+const MY_BTREESET: BTreeSet<u32> = BTreeSet::new();\n+\n fn main() {}"}]}