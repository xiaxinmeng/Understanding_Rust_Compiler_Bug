{"sha": "bde96776a199064dec3c825ca5ada8f90e1e12d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkZTk2Nzc2YTE5OTA2NGRlYzNjODI1Y2E1YWRhOGY5MGUxZTEyZDQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-02-11T20:37:12Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-02-11T20:37:12Z"}, "message": "Suggest named lifetime in ADT with hrtb", "tree": {"sha": "989e99721bc07f01d73d410485f75cbad6534b35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/989e99721bc07f01d73d410485f75cbad6534b35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bde96776a199064dec3c825ca5ada8f90e1e12d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bde96776a199064dec3c825ca5ada8f90e1e12d4", "html_url": "https://github.com/rust-lang/rust/commit/bde96776a199064dec3c825ca5ada8f90e1e12d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bde96776a199064dec3c825ca5ada8f90e1e12d4/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24be307b53931a9824829f63aa65fa5c6042ed21", "url": "https://api.github.com/repos/rust-lang/rust/commits/24be307b53931a9824829f63aa65fa5c6042ed21", "html_url": "https://github.com/rust-lang/rust/commit/24be307b53931a9824829f63aa65fa5c6042ed21"}], "stats": {"total": 97, "additions": 87, "deletions": 10}, "files": [{"sha": "59077c2bc1257c666614a841226007db2e9a5076", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 45, "deletions": 7, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/bde96776a199064dec3c825ca5ada8f90e1e12d4/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bde96776a199064dec3c825ca5ada8f90e1e12d4/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=bde96776a199064dec3c825ca5ada8f90e1e12d4", "patch": "@@ -364,14 +364,52 @@ impl AstConv<'tcx> for ItemCtxt<'tcx> {\n             );\n \n             match self.node() {\n-                hir::Node::Field(_)\n-                | hir::Node::Variant(_)\n-                | hir::Node::Ctor(_)\n-                | hir::Node::Item(hir::Item { kind: hir::ItemKind::Struct(..), .. })\n-                | hir::Node::Item(hir::Item { kind: hir::ItemKind::Enum(..), .. })\n-                | hir::Node::Item(hir::Item { kind: hir::ItemKind::Union(..), .. }) => {\n-                    // The suggestion is only valid if this is not an ADT.\n+                hir::Node::Field(_) | hir::Node::Ctor(_) | hir::Node::Variant(_) => {\n+                    let item =\n+                        self.tcx.hir().expect_item(self.tcx.hir().get_parent_item(self.hir_id()));\n+                    match &item.kind {\n+                        hir::ItemKind::Enum(_, generics)\n+                        | hir::ItemKind::Struct(_, generics)\n+                        | hir::ItemKind::Union(_, generics) => {\n+                            // FIXME: look for an appropriate lt name if `'a` is already used\n+                            let (lt_sp, sugg) = match &generics.params[..] {\n+                                [] => (generics.span, \"<'a>\".to_string()),\n+                                [bound, ..] => (bound.span.shrink_to_lo(), \"'a, \".to_string()),\n+                            };\n+                            let suggestions = vec![\n+                                (lt_sp, sugg),\n+                                (\n+                                    span,\n+                                    format!(\n+                                        \"{}::{}\",\n+                                        // Replace the existing lifetimes with a new named lifetime.\n+                                        self.tcx\n+                                            .replace_late_bound_regions(&poly_trait_ref, |_| {\n+                                                self.tcx.mk_region(ty::ReEarlyBound(\n+                                                    ty::EarlyBoundRegion {\n+                                                        def_id: item_def_id,\n+                                                        index: 0,\n+                                                        name: Symbol::intern(\"'a\"),\n+                                                    },\n+                                                ))\n+                                            })\n+                                            .0,\n+                                        item_segment.ident\n+                                    ),\n+                                ),\n+                            ];\n+                            err.multipart_suggestion(\n+                                \"use a fully qualified path with explicit lifetimes\",\n+                                suggestions,\n+                                Applicability::MaybeIncorrect,\n+                            );\n+                        }\n+                        _ => {}\n+                    }\n                 }\n+                hir::Node::Item(hir::Item { kind: hir::ItemKind::Struct(..), .. })\n+                | hir::Node::Item(hir::Item { kind: hir::ItemKind::Enum(..), .. })\n+                | hir::Node::Item(hir::Item { kind: hir::ItemKind::Union(..), .. }) => {}\n                 hir::Node::Item(_)\n                 | hir::Node::ForeignItem(_)\n                 | hir::Node::TraitItem(_)"}, {"sha": "8a5777d4d7cb519d31b78dba1fc6e82eb6210c94", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-struct.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bde96776a199064dec3c825ca5ada8f90e1e12d4/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bde96776a199064dec3c825ca5ada8f90e1e12d4/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-struct.rs?ref=bde96776a199064dec3c825ca5ada8f90e1e12d4", "patch": "@@ -7,18 +7,25 @@ pub trait Foo<T> {\n     fn get(&self, t: T) -> Self::A;\n }\n \n-struct SomeStruct<I : for<'x> Foo<&'x isize>> {\n+struct SomeStruct<I: for<'x> Foo<&'x isize>> {\n     field: I::A\n     //~^ ERROR cannot extract an associated type from a higher-ranked trait bound in this context\n }\n \n+enum SomeEnum<I: for<'x> Foo<&'x isize>> {\n+    TupleVariant(I::A),\n+    //~^ ERROR cannot extract an associated type from a higher-ranked trait bound in this context\n+    StructVariant { field: I::A },\n+    //~^ ERROR cannot extract an associated type from a higher-ranked trait bound in this context\n+}\n+\n // FIXME(eddyb) This one doesn't even compile because of the unsupported syntax.\n \n // struct AnotherStruct<I : for<'x> Foo<&'x isize>> {\n //     field: <I as for<'y> Foo<&'y isize>>::A\n // }\n \n-struct YetAnotherStruct<'a, I : for<'x> Foo<&'x isize>> {\n+struct YetAnotherStruct<'a, I: for<'x> Foo<&'x isize>> {\n     field: <I as Foo<&'a isize>>::A\n }\n "}, {"sha": "c71bc70ea6c4e778fd645839f2ccefcf0ec6e5b6", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-struct.stderr", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/bde96776a199064dec3c825ca5ada8f90e1e12d4/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bde96776a199064dec3c825ca5ada8f90e1e12d4/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-struct.stderr?ref=bde96776a199064dec3c825ca5ada8f90e1e12d4", "patch": "@@ -3,6 +3,38 @@ error[E0212]: cannot extract an associated type from a higher-ranked trait bound\n    |\n LL |     field: I::A\n    |            ^^^^\n+   |\n+help: use a fully qualified path with explicit lifetimes\n+   |\n+LL | struct SomeStruct<'a, I: for<'x> Foo<&'x isize>> {\n+LL |     field: <I as Foo<&'a isize>>::A\n+   |\n+\n+error[E0212]: cannot extract an associated type from a higher-ranked trait bound in this context\n+  --> $DIR/associated-types-project-from-hrtb-in-struct.rs:16:18\n+   |\n+LL |     TupleVariant(I::A),\n+   |                  ^^^^\n+   |\n+help: use a fully qualified path with explicit lifetimes\n+   |\n+LL | enum SomeEnum<'a, I: for<'x> Foo<&'x isize>> {\n+LL |     TupleVariant(<I as Foo<&'a isize>>::A),\n+   |\n+\n+error[E0212]: cannot extract an associated type from a higher-ranked trait bound in this context\n+  --> $DIR/associated-types-project-from-hrtb-in-struct.rs:18:28\n+   |\n+LL |     StructVariant { field: I::A },\n+   |                            ^^^^\n+   |\n+help: use a fully qualified path with explicit lifetimes\n+   |\n+LL | enum SomeEnum<'a, I: for<'x> Foo<&'x isize>> {\n+LL |     TupleVariant(I::A),\n+LL |\n+LL |     StructVariant { field: <I as Foo<&'a isize>>::A },\n+   |\n \n-error: aborting due to previous error\n+error: aborting due to 3 previous errors\n "}]}