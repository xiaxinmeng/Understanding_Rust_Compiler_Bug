{"sha": "d5a6aafb8847eeae39f23f852dd33e32ca2ca914", "node_id": "C_kwDOAAsO6NoAKGQ1YTZhYWZiODg0N2VlYWUzOWYyM2Y4NTJkZDMzZTMyY2EyY2E5MTQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-27T09:19:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-27T09:19:42Z"}, "message": "Auto merge of #89652 - rcvalle:rust-cfi, r=nagisa\n\nAdd LLVM CFI support to the Rust compiler\n\nThis PR adds LLVM Control Flow Integrity (CFI) support to the Rust compiler. It initially provides forward-edge control flow protection for Rust-compiled code only by aggregating function pointers in groups identified by their number of arguments.\n\nForward-edge control flow protection for C or C++ and Rust -compiled code \"mixed binaries\" (i.e., for when C or C++ and Rust -compiled code share the same virtual address space) will be provided in later work as part of this project by defining and using compatible type identifiers (see Type metadata in the design document in the tracking issue #89653).\n\nLLVM CFI can be enabled with -Zsanitizer=cfi and requires LTO (i.e., -Clto).\n\nThank you, `@eddyb` and `@pcc,` for all the help!", "tree": {"sha": "3ffc731f5d39f93068efd9d802bd5490729635e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ffc731f5d39f93068efd9d802bd5490729635e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5a6aafb8847eeae39f23f852dd33e32ca2ca914", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5a6aafb8847eeae39f23f852dd33e32ca2ca914", "html_url": "https://github.com/rust-lang/rust/commit/d5a6aafb8847eeae39f23f852dd33e32ca2ca914", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5a6aafb8847eeae39f23f852dd33e32ca2ca914/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8094e2e5aee1dd1adea235e4033466e058c90321", "url": "https://api.github.com/repos/rust-lang/rust/commits/8094e2e5aee1dd1adea235e4033466e058c90321", "html_url": "https://github.com/rust-lang/rust/commit/8094e2e5aee1dd1adea235e4033466e058c90321"}, {"sha": "14b83de047595a27c4ad8dadb99a42a1b5ab0194", "url": "https://api.github.com/repos/rust-lang/rust/commits/14b83de047595a27c4ad8dadb99a42a1b5ab0194", "html_url": "https://github.com/rust-lang/rust/commit/14b83de047595a27c4ad8dadb99a42a1b5ab0194"}], "stats": {"total": 15, "additions": 15, "deletions": 0}, "files": [{"sha": "fff2aa6df7c725ab53bcd2a2c9ba5008c15b72e2", "filename": "src/builder.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d5a6aafb8847eeae39f23f852dd33e32ca2ca914/src%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5a6aafb8847eeae39f23f852dd33e32ca2ca914/src%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuilder.rs?ref=d5a6aafb8847eeae39f23f852dd33e32ca2ca914", "patch": "@@ -915,6 +915,16 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n         // TODO(antoyo)\n     }\n \n+    fn type_metadata(&mut self, _function: RValue<'gcc>, _typeid: String) {\n+        // Unsupported.\n+    }\n+\n+    fn typeid_metadata(&mut self, _typeid: String) -> RValue<'gcc> {\n+        // Unsupported.\n+        self.context.new_rvalue_from_int(self.int_type, 0)\n+    }\n+\n+\n     fn store(&mut self, val: RValue<'gcc>, ptr: RValue<'gcc>, align: Align) -> RValue<'gcc> {\n         self.store_with_flags(val, ptr, align, MemFlags::empty())\n     }"}, {"sha": "64bd586662d385a863a45b0bd555d340cda24721", "filename": "src/intrinsic/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d5a6aafb8847eeae39f23f852dd33e32ca2ca914/src%2Fintrinsic%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5a6aafb8847eeae39f23f852dd33e32ca2ca914/src%2Fintrinsic%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsic%2Fmod.rs?ref=d5a6aafb8847eeae39f23f852dd33e32ca2ca914", "patch": "@@ -367,6 +367,11 @@ impl<'a, 'gcc, 'tcx> IntrinsicCallMethods<'tcx> for Builder<'a, 'gcc, 'tcx> {\n         // TODO(antoyo)\n     }\n \n+    fn type_test(&mut self, _pointer: Self::Value, _typeid: Self::Value) -> Self::Value {\n+        // Unsupported.\n+        self.context.new_rvalue_from_int(self.int_type, 0)\n+    }\n+\n     fn va_start(&mut self, _va_list: RValue<'gcc>) -> RValue<'gcc> {\n         unimplemented!();\n     }"}]}