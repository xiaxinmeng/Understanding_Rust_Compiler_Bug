{"sha": "7f5dffbb197083e5a673e7cb206dc7bdac94dcd1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmNWRmZmJiMTk3MDgzZTVhNjczZTdjYjIwNmRjN2JkYWM5NGRjZDE=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-19T06:04:25Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-21T03:03:34Z"}, "message": "Make debuginfo take debug_context instead of MirContext", "tree": {"sha": "e25dbc38e55413ebe4b3a26de707f7ebdfd8c2fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e25dbc38e55413ebe4b3a26de707f7ebdfd8c2fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f5dffbb197083e5a673e7cb206dc7bdac94dcd1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f5dffbb197083e5a673e7cb206dc7bdac94dcd1", "html_url": "https://github.com/rust-lang/rust/commit/7f5dffbb197083e5a673e7cb206dc7bdac94dcd1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f5dffbb197083e5a673e7cb206dc7bdac94dcd1/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd1890f7f4acd7acf2c319ce2b743b4f8d41731d", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd1890f7f4acd7acf2c319ce2b743b4f8d41731d", "html_url": "https://github.com/rust-lang/rust/commit/dd1890f7f4acd7acf2c319ce2b743b4f8d41731d"}], "stats": {"total": 92, "additions": 54, "deletions": 38}, "files": [{"sha": "e984edacaf871eff810e0e0387748bdfe97fce65", "filename": "src/librustc_trans/debuginfo/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7f5dffbb197083e5a673e7cb206dc7bdac94dcd1/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f5dffbb197083e5a673e7cb206dc7bdac94dcd1/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs?ref=7f5dffbb197083e5a673e7cb206dc7bdac94dcd1", "patch": "@@ -28,7 +28,6 @@ use rustc::ty::subst::Substs;\n \n use abi::Abi;\n use common::{CrateContext, BlockAndBuilder};\n-use mir::MirContext;\n use monomorphize::{self, Instance};\n use rustc::ty::{self, Ty};\n use rustc::mir;\n@@ -434,7 +433,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n }\n \n pub fn declare_local<'a, 'tcx>(bcx: &BlockAndBuilder<'a, 'tcx>,\n-                               mir: &MirContext,\n+                               dbg_context: &FunctionDebugContext,\n                                variable_name: ast::Name,\n                                variable_type: Ty<'tcx>,\n                                scope_metadata: DIScope,\n@@ -476,7 +475,7 @@ pub fn declare_local<'a, 'tcx>(bcx: &BlockAndBuilder<'a, 'tcx>,\n                     align as u64,\n                 )\n             };\n-            source_loc::set_debug_location(cx, bcx,\n+            source_loc::set_debug_location(bcx,\n                 InternalDebugLocation::new(scope_metadata, loc.line, loc.col.to_usize()));\n             unsafe {\n                 let debug_loc = llvm::LLVMGetCurrentDebugLocation(bcx.llbuilder);\n@@ -496,8 +495,8 @@ pub fn declare_local<'a, 'tcx>(bcx: &BlockAndBuilder<'a, 'tcx>,\n \n     match variable_kind {\n         ArgumentVariable(_) | CapturedVariable => {\n-            assert!(!mir.debug_context.get_ref(span).source_locations_enabled.get());\n-            source_loc::set_debug_location(cx, bcx, UnknownLocation);\n+            assert!(!dbg_context.get_ref(span).source_locations_enabled.get());\n+            source_loc::set_debug_location(bcx, UnknownLocation);\n         }\n         _ => { /* nothing to do */ }\n     }"}, {"sha": "e02c8be19a2f477315c2e1cdf671ee205c7f6796", "filename": "src/librustc_trans/debuginfo/source_loc.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7f5dffbb197083e5a673e7cb206dc7bdac94dcd1/src%2Flibrustc_trans%2Fdebuginfo%2Fsource_loc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f5dffbb197083e5a673e7cb206dc7bdac94dcd1/src%2Flibrustc_trans%2Fdebuginfo%2Fsource_loc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fsource_loc.rs?ref=7f5dffbb197083e5a673e7cb206dc7bdac94dcd1", "patch": "@@ -17,8 +17,6 @@ use super::FunctionDebugContext;\n use llvm;\n use llvm::debuginfo::DIScope;\n use builder::Builder;\n-use common::CrateContext;\n-use mir::MirContext;\n \n use libc::c_uint;\n use std::ptr;\n@@ -27,24 +25,26 @@ use syntax_pos::{Span, Pos};\n /// Sets the current debug location at the beginning of the span.\n ///\n /// Maps to a call to llvm::LLVMSetCurrentDebugLocation(...).\n-pub fn set_source_location(mir: &MirContext, builder: &Builder, scope: DIScope, span: Span) {\n-    let function_debug_context = match mir.debug_context {\n+pub fn set_source_location(\n+    debug_context: &FunctionDebugContext, builder: &Builder, scope: DIScope, span: Span\n+) {\n+    let function_debug_context = match *debug_context {\n         FunctionDebugContext::DebugInfoDisabled => return,\n         FunctionDebugContext::FunctionWithoutDebugInfo => {\n-            set_debug_location(mir.ccx(), builder, UnknownLocation);\n+            set_debug_location(builder, UnknownLocation);\n             return;\n         }\n         FunctionDebugContext::RegularContext(ref data) => data\n     };\n \n     let dbg_loc = if function_debug_context.source_locations_enabled.get() {\n-        debug!(\"set_source_location: {}\", mir.ccx().sess().codemap().span_to_string(span));\n-        let loc = span_start(mir.ccx(), span);\n+        debug!(\"set_source_location: {}\", builder.ccx.sess().codemap().span_to_string(span));\n+        let loc = span_start(builder.ccx, span);\n         InternalDebugLocation::new(scope, loc.line, loc.col.to_usize())\n     } else {\n         UnknownLocation\n     };\n-    set_debug_location(mir.ccx(), builder, dbg_loc);\n+    set_debug_location(builder, dbg_loc);\n }\n \n /// Enables emitting source locations for the given functions.\n@@ -53,8 +53,8 @@ pub fn set_source_location(mir: &MirContext, builder: &Builder, scope: DIScope,\n /// they are disabled when beginning to translate a new function. This functions\n /// switches source location emitting on and must therefore be called before the\n /// first real statement/expression of the function is translated.\n-pub fn start_emitting_source_locations(mir: &MirContext) {\n-    match mir.debug_context {\n+pub fn start_emitting_source_locations(dbg_context: &FunctionDebugContext) {\n+    match *dbg_context {\n         FunctionDebugContext::RegularContext(ref data) => {\n             data.source_locations_enabled.set(true)\n         },\n@@ -79,9 +79,7 @@ impl InternalDebugLocation {\n     }\n }\n \n-pub fn set_debug_location(cx: &CrateContext,\n-                          builder: &Builder,\n-                          debug_location: InternalDebugLocation) {\n+pub fn set_debug_location(builder: &Builder, debug_location: InternalDebugLocation) {\n     let metadata_node = match debug_location {\n         KnownLocation { scope, line, .. } => {\n             // Always set the column to zero like Clang and GCC\n@@ -90,7 +88,7 @@ pub fn set_debug_location(cx: &CrateContext,\n \n             unsafe {\n                 llvm::LLVMRustDIBuilderCreateDebugLocation(\n-                    debug_context(cx).llcontext,\n+                    debug_context(builder.ccx).llcontext,\n                     line as c_uint,\n                     col as c_uint,\n                     scope,"}, {"sha": "6b6ca1a98a38681717c3a387fa65f8d19ee5ad8f", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7f5dffbb197083e5a673e7cb206dc7bdac94dcd1/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f5dffbb197083e5a673e7cb206dc7bdac94dcd1/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=7f5dffbb197083e5a673e7cb206dc7bdac94dcd1", "patch": "@@ -115,7 +115,7 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n \n         let span = terminator.source_info.span;\n         let (scope, debug_span) = self.debug_loc(terminator.source_info);\n-        debuginfo::set_source_location(self, &bcx, scope, debug_span);\n+        debuginfo::set_source_location(&self.debug_context, &bcx, scope, debug_span);\n         match terminator.kind {\n             mir::TerminatorKind::Resume => {\n                 if let Some(cleanup_pad) = cleanup_pad {\n@@ -327,7 +327,7 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n \n                 // After this point, bcx is the block for the call to panic.\n                 bcx = panic_block;\n-                debuginfo::set_source_location(self, &bcx, scope, debug_span);\n+                debuginfo::set_source_location(&self.debug_context, &bcx, scope, debug_span);\n \n                 // Get the location information.\n                 let loc = bcx.sess().codemap().lookup_char_pos(span.lo);\n@@ -643,7 +643,8 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n                     if let Some((_, target)) = *destination {\n                         let ret_bcx = self.build_block(target);\n                         ret_bcx.at_start(|ret_bcx| {\n-                            debuginfo::set_source_location(self, &ret_bcx, scope, debug_span);\n+                            debuginfo::set_source_location(&self.debug_context,\n+                                &ret_bcx, scope, debug_span);\n                             let op = OperandRef {\n                                 val: Immediate(invokeret),\n                                 ty: sig.output(),"}, {"sha": "d0123d6e6f7c42f155b1c04576e39d496fcb5807", "filename": "src/librustc_trans/mir/mod.rs", "status": "modified", "additions": 33, "deletions": 15, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/7f5dffbb197083e5a673e7cb206dc7bdac94dcd1/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f5dffbb197083e5a673e7cb206dc7bdac94dcd1/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fmod.rs?ref=7f5dffbb197083e5a673e7cb206dc7bdac94dcd1", "patch": "@@ -44,9 +44,9 @@ use self::operand::{OperandRef, OperandValue};\n \n /// Master context for translating MIR.\n pub struct MirContext<'a, 'tcx:'a> {\n-    pub mir: &'a mir::Mir<'tcx>,\n+    mir: &'a mir::Mir<'tcx>,\n \n-    pub debug_context: debuginfo::FunctionDebugContext,\n+    debug_context: debuginfo::FunctionDebugContext,\n \n     /// Function context\n     fcx: &'a common::FunctionContext<'a, 'tcx>,\n@@ -276,7 +276,7 @@ pub fn trans_mir<'a, 'tcx: 'a>(\n                 let lvalue = LvalueRef::alloca(&bcx, ty, &name.as_str());\n                 if dbg {\n                     let (scope, span) = mircx.debug_loc(source_info);\n-                    declare_local(&bcx, &mircx, name, ty, scope,\n+                    declare_local(&bcx, &mircx.debug_context, name, ty, scope,\n                         VariableAccess::DirectVariable { alloca: lvalue.llval },\n                         VariableKind::LocalVariable, span);\n                 }\n@@ -314,7 +314,7 @@ pub fn trans_mir<'a, 'tcx: 'a>(\n     // Up until here, IR instructions for this function have explicitly not been annotated with\n     // source code location, so we don't step into call setup code. From here on, source location\n     // emitting should be enabled.\n-    debuginfo::start_emitting_source_locations(&mircx);\n+    debuginfo::start_emitting_source_locations(&mircx.debug_context);\n \n     let mut funclets: IndexVec<mir::BasicBlock, Option<Funclet>> =\n         IndexVec::from_elem(None, mir.basic_blocks());\n@@ -418,10 +418,15 @@ fn arg_local_refs<'a, 'tcx>(bcx: &BlockAndBuilder<'a, 'tcx>,\n                 let variable_access = VariableAccess::DirectVariable {\n                     alloca: lltemp\n                 };\n-                declare_local(bcx, mircx, arg_decl.name.unwrap_or(keywords::Invalid.name()),\n-                              arg_ty, scope, variable_access,\n-                              VariableKind::ArgumentVariable(arg_index + 1),\n-                              DUMMY_SP);\n+                declare_local(\n+                    bcx,\n+                    &mircx.debug_context,\n+                    arg_decl.name.unwrap_or(keywords::Invalid.name()),\n+                    arg_ty, scope,\n+                    variable_access,\n+                    VariableKind::ArgumentVariable(arg_index + 1),\n+                    DUMMY_SP\n+                );\n             });\n \n             return LocalRef::Lvalue(LvalueRef::new_sized(lltemp, LvalueTy::from_ty(arg_ty)));\n@@ -490,10 +495,16 @@ fn arg_local_refs<'a, 'tcx>(bcx: &BlockAndBuilder<'a, 'tcx>,\n         arg_scope.map(|scope| {\n             // Is this a regular argument?\n             if arg_index > 0 || mir.upvar_decls.is_empty() {\n-                declare_local(bcx, mircx, arg_decl.name.unwrap_or(keywords::Invalid.name()), arg_ty,\n-                              scope, VariableAccess::DirectVariable { alloca: llval },\n-                              VariableKind::ArgumentVariable(arg_index + 1),\n-                              DUMMY_SP);\n+                declare_local(\n+                    bcx,\n+                    &mircx.debug_context,\n+                    arg_decl.name.unwrap_or(keywords::Invalid.name()),\n+                    arg_ty,\n+                    scope,\n+                    VariableAccess::DirectVariable { alloca: llval },\n+                    VariableKind::ArgumentVariable(arg_index + 1),\n+                    DUMMY_SP\n+                );\n                 return;\n             }\n \n@@ -558,9 +569,16 @@ fn arg_local_refs<'a, 'tcx>(bcx: &BlockAndBuilder<'a, 'tcx>,\n                     alloca: env_ptr,\n                     address_operations: &ops\n                 };\n-                declare_local(bcx, mircx, decl.debug_name, ty, scope, variable_access,\n-                              VariableKind::CapturedVariable,\n-                              DUMMY_SP);\n+                declare_local(\n+                    bcx,\n+                    &mircx.debug_context,\n+                    decl.debug_name,\n+                    ty,\n+                    scope,\n+                    variable_access,\n+                    VariableKind::CapturedVariable,\n+                    DUMMY_SP\n+                );\n             }\n         });\n         LocalRef::Lvalue(LvalueRef::new_sized(llval, LvalueTy::from_ty(arg_ty)))"}, {"sha": "6fc5d7db676d330459fcd34c030c19b55c291783", "filename": "src/librustc_trans/mir/statement.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f5dffbb197083e5a673e7cb206dc7bdac94dcd1/src%2Flibrustc_trans%2Fmir%2Fstatement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f5dffbb197083e5a673e7cb206dc7bdac94dcd1/src%2Flibrustc_trans%2Fmir%2Fstatement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fstatement.rs?ref=7f5dffbb197083e5a673e7cb206dc7bdac94dcd1", "patch": "@@ -27,7 +27,7 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n         debug!(\"trans_statement(statement={:?})\", statement);\n \n         let (scope, span) = self.debug_loc(statement.source_info);\n-        debuginfo::set_source_location(self, &bcx, scope, span);\n+        debuginfo::set_source_location(&self.debug_context, &bcx, scope, span);\n         match statement.kind {\n             mir::StatementKind::Assign(ref lvalue, ref rvalue) => {\n                 if let mir::Lvalue::Local(index) = *lvalue {"}]}