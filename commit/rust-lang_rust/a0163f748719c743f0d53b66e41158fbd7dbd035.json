{"sha": "a0163f748719c743f0d53b66e41158fbd7dbd035", "node_id": "C_kwDOAAsO6NoAKGEwMTYzZjc0ODcxOWM3NDNmMGQ1M2I2NmU0MTE1OGZiZDdkYmQwMzU", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-03-13T16:35:02Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-03-13T16:35:02Z"}, "message": "Remove FieldName enum", "tree": {"sha": "929363e10d99e7d6bc258b6004d8519be4706613", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/929363e10d99e7d6bc258b6004d8519be4706613"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0163f748719c743f0d53b66e41158fbd7dbd035", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0163f748719c743f0d53b66e41158fbd7dbd035", "html_url": "https://github.com/rust-lang/rust/commit/a0163f748719c743f0d53b66e41158fbd7dbd035", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0163f748719c743f0d53b66e41158fbd7dbd035/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dca8ff5b252ce2430fa61e6a5bd230b1edc9ea50", "url": "https://api.github.com/repos/rust-lang/rust/commits/dca8ff5b252ce2430fa61e6a5bd230b1edc9ea50", "html_url": "https://github.com/rust-lang/rust/commit/dca8ff5b252ce2430fa61e6a5bd230b1edc9ea50"}], "stats": {"total": 40, "additions": 6, "deletions": 34}, "files": [{"sha": "e744810295defad144d1053ed45c251074a6f0f6", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 6, "deletions": 34, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a0163f748719c743f0d53b66e41158fbd7dbd035/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0163f748719c743f0d53b66e41158fbd7dbd035/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=a0163f748719c743f0d53b66e41158fbd7dbd035", "patch": "@@ -389,37 +389,6 @@ macro_rules! define_config {\n             where\n                 D: Deserializer<'de>,\n             {\n-                #[allow(non_camel_case_types)]\n-                enum FieldName {\n-                    $($field,)*\n-                }\n-                struct FieldNameVisitor;\n-                impl<'de> serde::de::Visitor<'de> for FieldNameVisitor {\n-                    type Value = FieldName;\n-                    fn expecting(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-                        f.write_str(\"field identifier\")\n-                    }\n-\n-                    #[inline]\n-                    fn visit_str<E>(self, value: &str) -> Result<Self::Value, E>\n-                    where\n-                        E: serde::de::Error,\n-                    {\n-                        match value {\n-                            $($field_key => Ok(FieldName::$field),)*\n-                            _ => Err(serde::de::Error::unknown_field(value, FIELDS)),\n-                        }\n-                    }\n-                }\n-                impl<'de> Deserialize<'de> for FieldName {\n-                    #[inline]\n-                    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>\n-                    where\n-                        D: Deserializer<'de>,\n-                    {\n-                        Deserializer::deserialize_identifier(deserializer, FieldNameVisitor)\n-                    }\n-                }\n                 struct Field;\n                 impl<'de> serde::de::Visitor<'de> for Field {\n                     type Value = $name;\n@@ -434,15 +403,15 @@ macro_rules! define_config {\n                     {\n                         $(let mut $field: Option<$field_ty> = None;)*\n                         while let Some(key) =\n-                            match serde::de::MapAccess::next_key::<FieldName>(&mut map) {\n+                            match serde::de::MapAccess::next_key::<String>(&mut map) {\n                                 Ok(val) => val,\n                                 Err(err) => {\n                                     return Err(err);\n                                 }\n                             }\n                         {\n-                            match key {\n-                                $(FieldName::$field => {\n+                            match &*key {\n+                                $($field_key => {\n                                     if $field.is_some() {\n                                         return Err(<A::Error as serde::de::Error>::duplicate_field(\n                                             $field_key,\n@@ -457,6 +426,9 @@ macro_rules! define_config {\n                                         }\n                                     };\n                                 })*\n+                                key => {\n+                                    return Err(serde::de::Error::unknown_field(key, FIELDS));\n+                                }\n                             }\n                         }\n                         Ok($name { $($field),* })"}]}