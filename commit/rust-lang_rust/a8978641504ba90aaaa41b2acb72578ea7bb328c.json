{"sha": "a8978641504ba90aaaa41b2acb72578ea7bb328c", "node_id": "C_kwDOAAsO6NoAKGE4OTc4NjQxNTA0YmE5MGFhYWE0MWIyYWNiNzI1NzhlYTdiYjMyOGM", "commit": {"author": {"name": "Ayush Singh", "email": "ayushsingh1325@gmail.com", "date": "2022-11-06T08:31:46Z"}, "committer": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2023-03-01T00:22:26Z"}, "message": "Add type_array to BaseTypeMethods\n\nMoved type_array function to rustc_codegen_ssa::BaseTypeMethods trait.\nThis allows using normal alloca function to create arrays as suggested in\nhttps://github.com/rust-lang/rust/pull/104022.\n\nSigned-off-by: Ayush Singh <ayushsingh1325@gmail.com>", "tree": {"sha": "27381f3b5fa37612a8c5b72204da2a06d58577fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27381f3b5fa37612a8c5b72204da2a06d58577fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8978641504ba90aaaa41b2acb72578ea7bb328c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8978641504ba90aaaa41b2acb72578ea7bb328c", "html_url": "https://github.com/rust-lang/rust/commit/a8978641504ba90aaaa41b2acb72578ea7bb328c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8978641504ba90aaaa41b2acb72578ea7bb328c/comments", "author": {"login": "Ayush1325", "id": 22546812, "node_id": "MDQ6VXNlcjIyNTQ2ODEy", "avatar_url": "https://avatars.githubusercontent.com/u/22546812?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ayush1325", "html_url": "https://github.com/Ayush1325", "followers_url": "https://api.github.com/users/Ayush1325/followers", "following_url": "https://api.github.com/users/Ayush1325/following{/other_user}", "gists_url": "https://api.github.com/users/Ayush1325/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ayush1325/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ayush1325/subscriptions", "organizations_url": "https://api.github.com/users/Ayush1325/orgs", "repos_url": "https://api.github.com/users/Ayush1325/repos", "events_url": "https://api.github.com/users/Ayush1325/events{/privacy}", "received_events_url": "https://api.github.com/users/Ayush1325/received_events", "type": "User", "site_admin": false}, "committer": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd930a3b5cff68646f1fd4eff7256a9a25302ceb", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd930a3b5cff68646f1fd4eff7256a9a25302ceb", "html_url": "https://github.com/rust-lang/rust/commit/dd930a3b5cff68646f1fd4eff7256a9a25302ceb"}], "stats": {"total": 42, "additions": 23, "deletions": 19}, "files": [{"sha": "58d4f29006004e5fd4e17548e54fd145098a2a06", "filename": "src/type_.rs", "status": "modified", "additions": 23, "deletions": 19, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/a8978641504ba90aaaa41b2acb72578ea7bb328c/src%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8978641504ba90aaaa41b2acb72578ea7bb328c/src%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftype_.rs?ref=a8978641504ba90aaaa41b2acb72578ea7bb328c", "patch": "@@ -201,6 +201,27 @@ impl<'gcc, 'tcx> BaseTypeMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n     fn val_ty(&self, value: RValue<'gcc>) -> Type<'gcc> {\n         value.get_type()\n     }\n+\n+    fn type_array(&self, ty: Type<'gcc>, mut len: u64) -> Type<'gcc> {\n+        if let Some(struct_type) = ty.is_struct() {\n+            if struct_type.get_field_count() == 0 {\n+                // NOTE: since gccjit only supports i32 for the array size and libcore's tests uses a\n+                // size of usize::MAX in test_binary_search, we workaround this by setting the size to\n+                // zero for ZSTs.\n+                // FIXME(antoyo): fix gccjit API.\n+                len = 0;\n+            }\n+        }\n+\n+        // NOTE: see note above. Some other test uses usize::MAX.\n+        if len == u64::MAX {\n+            len = 0;\n+        }\n+\n+        let len: i32 = len.try_into().expect(\"array len\");\n+\n+        self.context.new_array_type(None, ty, len)\n+    }\n }\n \n impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n@@ -227,25 +248,8 @@ impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n         self.context.new_opaque_struct_type(None, name)\n     }\n \n-    pub fn type_array(&self, ty: Type<'gcc>, mut len: u64) -> Type<'gcc> {\n-        if let Some(struct_type) = ty.is_struct() {\n-            if struct_type.get_field_count() == 0 {\n-                // NOTE: since gccjit only supports i32 for the array size and libcore's tests uses a\n-                // size of usize::MAX in test_binary_search, we workaround this by setting the size to\n-                // zero for ZSTs.\n-                // FIXME(antoyo): fix gccjit API.\n-                len = 0;\n-            }\n-        }\n-\n-        // NOTE: see note above. Some other test uses usize::MAX.\n-        if len == u64::MAX {\n-            len = 0;\n-        }\n-\n-        let len: i32 = len.try_into().expect(\"array len\");\n-\n-        self.context.new_array_type(None, ty, len)\n+    pub fn type_bool(&self) -> Type<'gcc> {\n+        self.context.new_type::<bool>()\n     }\n }\n "}]}