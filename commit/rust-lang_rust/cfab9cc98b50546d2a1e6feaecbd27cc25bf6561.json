{"sha": "cfab9cc98b50546d2a1e6feaecbd27cc25bf6561", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmYWI5Y2M5OGI1MDU0NmQyYTFlNmZlYWVjYmQyN2NjMjViZjY1NjE=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-24T01:47:04Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-24T06:38:35Z"}, "message": "Rollup merge of #22428 - erickt:io-wrappers, r=aturon\n\n Also includes some minor optimizations to the Vec and slice writers to remove the unnecessary loop.", "tree": {"sha": "70791df91aea12fa013f656169184fb80e7d50a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70791df91aea12fa013f656169184fb80e7d50a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cfab9cc98b50546d2a1e6feaecbd27cc25bf6561", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cfab9cc98b50546d2a1e6feaecbd27cc25bf6561", "html_url": "https://github.com/rust-lang/rust/commit/cfab9cc98b50546d2a1e6feaecbd27cc25bf6561", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cfab9cc98b50546d2a1e6feaecbd27cc25bf6561/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5676f6084bd0a5d1211b3afab93177747bf64fc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/5676f6084bd0a5d1211b3afab93177747bf64fc4", "html_url": "https://github.com/rust-lang/rust/commit/5676f6084bd0a5d1211b3afab93177747bf64fc4"}, {"sha": "ded93b125f3ab54c98442434341bb4675d326cda", "url": "https://api.github.com/repos/rust-lang/rust/commits/ded93b125f3ab54c98442434341bb4675d326cda", "html_url": "https://github.com/rust-lang/rust/commit/ded93b125f3ab54c98442434341bb4675d326cda"}], "stats": {"total": 37, "additions": 36, "deletions": 1}, "files": [{"sha": "82b69ddebff68630fcf70bf1da0d61c342ed754b", "filename": "src/libstd/io/impls.rs", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/cfab9cc98b50546d2a1e6feaecbd27cc25bf6561/src%2Flibstd%2Fio%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfab9cc98b50546d2a1e6feaecbd27cc25bf6561/src%2Flibstd%2Fio%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fimpls.rs?ref=cfab9cc98b50546d2a1e6feaecbd27cc25bf6561", "patch": "@@ -12,27 +12,47 @@ use core::prelude::*;\n \n use boxed::Box;\n use cmp;\n-use io::{self, SeekFrom, Read, Write, Seek, BufRead};\n+use io::{self, SeekFrom, Read, Write, Seek, BufRead, Error, ErrorKind};\n+use fmt;\n use mem;\n use slice;\n+use string::String;\n use vec::Vec;\n \n // =============================================================================\n // Forwarding implementations\n \n impl<'a, R: Read + ?Sized> Read for &'a mut R {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> { (**self).read(buf) }\n+\n+    fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<()> { (**self).read_to_end(buf) }\n+\n+    fn read_to_string(&mut self, buf: &mut String) -> io::Result<()> {\n+        (**self).read_to_string(buf)\n+    }\n }\n impl<'a, W: Write + ?Sized> Write for &'a mut W {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> { (**self).write(buf) }\n+\n+    fn write_all(&mut self, buf: &[u8]) -> io::Result<()> { (**self).write_all(buf) }\n+\n+    fn write_fmt(&mut self, fmt: fmt::Arguments) -> io::Result<()> { (**self).write_fmt(fmt) }\n+\n     fn flush(&mut self) -> io::Result<()> { (**self).flush() }\n }\n impl<'a, S: Seek + ?Sized> Seek for &'a mut S {\n     fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> { (**self).seek(pos) }\n }\n impl<'a, B: BufRead + ?Sized> BufRead for &'a mut B {\n     fn fill_buf(&mut self) -> io::Result<&[u8]> { (**self).fill_buf() }\n+\n     fn consume(&mut self, amt: usize) { (**self).consume(amt) }\n+\n+    fn read_until(&mut self, byte: u8, buf: &mut Vec<u8>) -> io::Result<()> {\n+        (**self).read_until(byte, buf)\n+    }\n+\n+    fn read_line(&mut self, buf: &mut String) -> io::Result<()> { (**self).read_line(buf) }\n }\n \n impl<R: Read + ?Sized> Read for Box<R> {\n@@ -76,6 +96,15 @@ impl<'a> Write for &'a mut [u8] {\n         *self = b;\n         Ok(amt)\n     }\n+\n+    fn write_all(&mut self, data: &[u8]) -> io::Result<()> {\n+        if try!(self.write(data)) == data.len() {\n+            Ok(())\n+        } else {\n+            Err(Error::new(ErrorKind::WriteZero, \"failed to write whole buffer\", None))\n+        }\n+    }\n+\n     fn flush(&mut self) -> io::Result<()> { Ok(()) }\n }\n \n@@ -84,5 +113,11 @@ impl Write for Vec<u8> {\n         self.push_all(buf);\n         Ok(buf.len())\n     }\n+\n+    fn write_all(&mut self, buf: &[u8]) -> io::Result<()> {\n+        try!(self.write(buf));\n+        Ok(())\n+    }\n+\n     fn flush(&mut self) -> io::Result<()> { Ok(()) }\n }"}]}