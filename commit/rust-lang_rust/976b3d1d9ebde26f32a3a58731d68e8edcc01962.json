{"sha": "976b3d1d9ebde26f32a3a58731d68e8edcc01962", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3NmIzZDFkOWViZGUyNmYzMmEzYTU4NzMxZDY4ZThlZGNjMDE5NjI=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-04-25T20:11:46Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-04-25T20:11:46Z"}, "message": "Prevent const parameters having type parameters as types", "tree": {"sha": "93c35d1034dbc9198ff2c4915b1d96ba46e017b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93c35d1034dbc9198ff2c4915b1d96ba46e017b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/976b3d1d9ebde26f32a3a58731d68e8edcc01962", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/976b3d1d9ebde26f32a3a58731d68e8edcc01962", "html_url": "https://github.com/rust-lang/rust/commit/976b3d1d9ebde26f32a3a58731d68e8edcc01962", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/976b3d1d9ebde26f32a3a58731d68e8edcc01962/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd31c392f286d61caac0babee68c900cdaa8b504", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd31c392f286d61caac0babee68c900cdaa8b504", "html_url": "https://github.com/rust-lang/rust/commit/bd31c392f286d61caac0babee68c900cdaa8b504"}], "stats": {"total": 54, "additions": 52, "deletions": 2}, "files": [{"sha": "d3b66ddb4a7b413f4474d06abb0f0a22aeb80470", "filename": "src/librustc_resolve/error_codes.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/976b3d1d9ebde26f32a3a58731d68e8edcc01962/src%2Flibrustc_resolve%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976b3d1d9ebde26f32a3a58731d68e8edcc01962/src%2Flibrustc_resolve%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Ferror_codes.rs?ref=976b3d1d9ebde26f32a3a58731d68e8edcc01962", "patch": "@@ -1642,6 +1642,16 @@ fn main() {\n ```\n \"##,\n \n+E0671: r##\"\n+Const parameters cannot depend on type parameters.\n+The following is therefore invalid:\n+```\n+fn const_id<T, const N: T>() -> T {\n+    N\n+}\n+```\n+\"##,\n+\n }\n \n register_diagnostics! {"}, {"sha": "80b82bc4dbd8490a18653016fb2f1ddad3947161", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 42, "deletions": 2, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/976b3d1d9ebde26f32a3a58731d68e8edcc01962/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976b3d1d9ebde26f32a3a58731d68e8edcc01962/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=976b3d1d9ebde26f32a3a58731d68e8edcc01962", "patch": "@@ -185,6 +185,8 @@ enum ResolutionError<'a> {\n     BindingShadowsSomethingUnacceptable(&'a str, Name, &'a NameBinding<'a>),\n     /// Error E0128: type parameters with a default cannot use forward-declared identifiers.\n     ForwardDeclaredTyParam, // FIXME(const_generics:defaults)\n+    /// Error E0671: const parameter cannot depend on type parameter.\n+    ConstParamDependentOnTypeParam,\n }\n \n /// Combines an error with provided span and emits it.\n@@ -440,6 +442,16 @@ fn resolve_struct_error<'sess, 'a>(resolver: &'sess Resolver<'_>,\n                 span, \"defaulted type parameters cannot be forward declared\".to_string());\n             err\n         }\n+        ResolutionError::ConstParamDependentOnTypeParam => {\n+            let mut err = struct_span_err!(\n+                resolver.session,\n+                span,\n+                E0671,\n+                \"const parameters cannot depend on type parameters\"\n+            );\n+            err.span_label(span, format!(\"const parameter depends on type parameter\"));\n+            err\n+        }\n     }\n }\n \n@@ -915,6 +927,18 @@ impl<'a, 'tcx> Visitor<'tcx> for Resolver<'a> {\n                 }\n             }));\n \n+        // We also ban access to type parameters for use as the types of const parameters.\n+        let mut const_ty_param_ban_rib = Rib::new(TyParamAsConstParamTy);\n+        const_ty_param_ban_rib.bindings.extend(generics.params.iter()\n+            .filter(|param| {\n+                if let GenericParamKind::Type { .. } = param.kind {\n+                    true\n+                } else {\n+                    false\n+                }\n+            })\n+            .map(|param| (Ident::with_empty_ctxt(param.ident.name), Def::Err)));\n+\n         for param in &generics.params {\n             match param.kind {\n                 GenericParamKind::Lifetime { .. } => self.visit_generic_param(param),\n@@ -933,11 +957,15 @@ impl<'a, 'tcx> Visitor<'tcx> for Resolver<'a> {\n                     default_ban_rib.bindings.remove(&Ident::with_empty_ctxt(param.ident.name));\n                 }\n                 GenericParamKind::Const { ref ty } => {\n+                    self.ribs[TypeNS].push(const_ty_param_ban_rib);\n+\n                     for bound in &param.bounds {\n                         self.visit_param_bound(bound);\n                     }\n \n                     self.visit_ty(ty);\n+\n+                    const_ty_param_ban_rib = self.ribs[TypeNS].pop().unwrap();\n                 }\n             }\n         }\n@@ -994,6 +1022,9 @@ enum RibKind<'a> {\n     /// from the default of a type parameter because they're not declared\n     /// before said type parameter. Also see the `visit_generics` override.\n     ForwardTyParamBanRibKind,\n+\n+    /// We forbid the use of type parameters as the types of const parameters.\n+    TyParamAsConstParamTy,\n }\n \n /// A single local scope.\n@@ -3944,6 +3975,15 @@ impl<'a> Resolver<'a> {\n             return Def::Err;\n         }\n \n+        // An invalid use of a type parameter as the type of a const parameter.\n+        if let TyParamAsConstParamTy = self.ribs[ns][rib_index].kind {\n+            if record_used {\n+                resolve_error(self, span, ResolutionError::ConstParamDependentOnTypeParam);\n+            }\n+            assert_eq!(def, Def::Err);\n+            return Def::Err;\n+        }\n+\n         match def {\n             Def::Upvar(..) => {\n                 span_bug!(span, \"unexpected {:?} in bindings\", def)\n@@ -3955,7 +3995,7 @@ impl<'a> Resolver<'a> {\n                 for rib in ribs {\n                     match rib.kind {\n                         NormalRibKind | ModuleRibKind(..) | MacroDefinition(..) |\n-                        ForwardTyParamBanRibKind => {\n+                        ForwardTyParamBanRibKind | TyParamAsConstParamTy => {\n                             // Nothing to do. Continue.\n                         }\n                         ClosureRibKind(function_id) => {\n@@ -4013,7 +4053,7 @@ impl<'a> Resolver<'a> {\n                     match rib.kind {\n                         NormalRibKind | TraitOrImplItemRibKind | ClosureRibKind(..) |\n                         ModuleRibKind(..) | MacroDefinition(..) | ForwardTyParamBanRibKind |\n-                        ConstantItemRibKind => {\n+                        ConstantItemRibKind | TyParamAsConstParamTy => {\n                             // Nothing to do. Continue.\n                         }\n                         ItemRibKind | FnItemRibKind => {"}]}