{"sha": "5f98fe714e8e5638fd38cb238c50508c2600002f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmOThmZTcxNGU4ZTU2MzhmZDM4Y2IyMzhjNTA1MDhjMjYwMDAwMmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-12T05:42:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-12T05:42:10Z"}, "message": "Auto merge of #50476 - zackmdavis:tame_unreachable_pub_suggestion, r=Manishearth\n\ndon't make crazy suggestion for unreachable braced pub-use\n\nThe Higher Intermediate Representation doesn't have spans for visibility\nkeywords, so we were assuming that the first whitespace-delimited token\nin the item span was the `pub` to be weakened. This doesn't work for\nbrace-grouped `use`s, which get lowered as if they were several\nindividual `use` statements, but with spans that only cover the braced\npath-segments. Constructing a correct suggestion here presents some\nchallenges\u2014until someone works those out, we can at least protect the\ndignity of our compiler by not offering any suggestion at all for `use` items.\n\nThis resolves #50455 (but again, it would be desirable in the future to\nmake a correct suggestion instead of copping out like this).\n\nr? @Manishearth", "tree": {"sha": "77ca0e53c7f2bd8018c97f79366c961532c8b8e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77ca0e53c7f2bd8018c97f79366c961532c8b8e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f98fe714e8e5638fd38cb238c50508c2600002f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f98fe714e8e5638fd38cb238c50508c2600002f", "html_url": "https://github.com/rust-lang/rust/commit/5f98fe714e8e5638fd38cb238c50508c2600002f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f98fe714e8e5638fd38cb238c50508c2600002f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c705877b1df780acfb2dcba4ebca6f30102dd8a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c705877b1df780acfb2dcba4ebca6f30102dd8a2", "html_url": "https://github.com/rust-lang/rust/commit/c705877b1df780acfb2dcba4ebca6f30102dd8a2"}, {"sha": "7006018745566fae2f09f6fc201cf4f6de6a4414", "url": "https://api.github.com/repos/rust-lang/rust/commits/7006018745566fae2f09f6fc201cf4f6de6a4414", "html_url": "https://github.com/rust-lang/rust/commit/7006018745566fae2f09f6fc201cf4f6de6a4414"}], "stats": {"total": 111, "additions": 67, "deletions": 44}, "files": [{"sha": "251b95a6fcb7933ac484cb9d613113ef8421f6a3", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 25, "deletions": 20, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/5f98fe714e8e5638fd38cb238c50508c2600002f/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f98fe714e8e5638fd38cb238c50508c2600002f/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=5f98fe714e8e5638fd38cb238c50508c2600002f", "patch": "@@ -1287,32 +1287,27 @@ impl LintPass for UnreachablePub {\n \n impl UnreachablePub {\n     fn perform_lint(&self, cx: &LateContext, what: &str, id: ast::NodeId,\n-                    vis: &hir::Visibility, span: Span, exportable: bool) {\n+                    vis: &hir::Visibility, span: Span, exportable: bool,\n+                    mut applicability: Applicability) {\n         if !cx.access_levels.is_reachable(id) && *vis == hir::Visibility::Public {\n+            if span.ctxt().outer().expn_info().is_some() {\n+                applicability = Applicability::MaybeIncorrect;\n+            }\n             let def_span = cx.tcx.sess.codemap().def_span(span);\n             let mut err = cx.struct_span_lint(UNREACHABLE_PUB, def_span,\n                                               &format!(\"unreachable `pub` {}\", what));\n-            // visibility is token at start of declaration (can be macro\n-            // variable rather than literal `pub`)\n+            // We are presuming that visibility is token at start of\n+            // declaration (can be macro variable rather than literal `pub`)\n             let pub_span = cx.tcx.sess.codemap().span_until_char(def_span, ' ');\n             let replacement = if cx.tcx.features().crate_visibility_modifier {\n                 \"crate\"\n             } else {\n                 \"pub(crate)\"\n             }.to_owned();\n-            let app = if span.ctxt().outer().expn_info().is_none() {\n-                // even if macros aren't involved the suggestion\n-                // may be incorrect -- the user may have mistakenly\n-                // hidden it behind a private module and this lint is\n-                // a helpful way to catch that. However, we're trying\n-                // not to change the nature of the code with this lint\n-                // so it's marked as machine applicable.\n-                Applicability::MachineApplicable\n-            } else {\n-                Applicability::MaybeIncorrect\n-            };\n-            err.span_suggestion_with_applicability(pub_span, \"consider restricting its visibility\",\n-                                                   replacement, app);\n+            err.span_suggestion_with_applicability(pub_span,\n+                                                   \"consider restricting its visibility\",\n+                                                   replacement,\n+                                                   applicability);\n             if exportable {\n                 err.help(\"or consider exporting it for use by other crates\");\n             }\n@@ -1321,21 +1316,31 @@ impl UnreachablePub {\n     }\n }\n \n+\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnreachablePub {\n     fn check_item(&mut self, cx: &LateContext, item: &hir::Item) {\n-        self.perform_lint(cx, \"item\", item.id, &item.vis, item.span, true);\n+        let applicability = match item.node {\n+            // suggestion span-manipulation is inadequate for `pub use\n+            // module::{item}` (Issue #50455)\n+            hir::ItemUse(..) => Applicability::MaybeIncorrect,\n+            _ => Applicability::MachineApplicable,\n+        };\n+        self.perform_lint(cx, \"item\", item.id, &item.vis, item.span, true, applicability);\n     }\n \n     fn check_foreign_item(&mut self, cx: &LateContext, foreign_item: &hir::ForeignItem) {\n-        self.perform_lint(cx, \"item\", foreign_item.id, &foreign_item.vis, foreign_item.span, true);\n+        self.perform_lint(cx, \"item\", foreign_item.id, &foreign_item.vis,\n+                          foreign_item.span, true, Applicability::MachineApplicable);\n     }\n \n     fn check_struct_field(&mut self, cx: &LateContext, field: &hir::StructField) {\n-        self.perform_lint(cx, \"field\", field.id, &field.vis, field.span, false);\n+        self.perform_lint(cx, \"field\", field.id, &field.vis, field.span, false,\n+                          Applicability::MachineApplicable);\n     }\n \n     fn check_impl_item(&mut self, cx: &LateContext, impl_item: &hir::ImplItem) {\n-        self.perform_lint(cx, \"item\", impl_item.id, &impl_item.vis, impl_item.span, false);\n+        self.perform_lint(cx, \"item\", impl_item.id, &impl_item.vis, impl_item.span, false,\n+                          Applicability::MachineApplicable);\n     }\n }\n "}, {"sha": "0a1926f8ae56a11dd9ad7f91881d37c3827cbbde", "filename": "src/test/ui/lint/unreachable_pub-pub_crate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f98fe714e8e5638fd38cb238c50508c2600002f/src%2Ftest%2Fui%2Flint%2Funreachable_pub-pub_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f98fe714e8e5638fd38cb238c50508c2600002f/src%2Ftest%2Fui%2Flint%2Funreachable_pub-pub_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funreachable_pub-pub_crate.rs?ref=5f98fe714e8e5638fd38cb238c50508c2600002f", "patch": "@@ -24,6 +24,7 @@\n mod private_mod {\n     // non-leaked `pub` items in private module should be linted\n     pub use std::fmt;\n+    pub use std::env::{Args}; // braced-use has different item spans than unbraced\n \n     pub struct Hydrogen {\n         // `pub` struct fields, too"}, {"sha": "2948deb23009c64b62b33b56fa7a380974aae3b3", "filename": "src/test/ui/lint/unreachable_pub-pub_crate.stderr", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/5f98fe714e8e5638fd38cb238c50508c2600002f/src%2Ftest%2Fui%2Flint%2Funreachable_pub-pub_crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f98fe714e8e5638fd38cb238c50508c2600002f/src%2Ftest%2Fui%2Flint%2Funreachable_pub-pub_crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funreachable_pub-pub_crate.stderr?ref=5f98fe714e8e5638fd38cb238c50508c2600002f", "patch": "@@ -14,7 +14,15 @@ LL | #![warn(unreachable_pub)]\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub-pub_crate.rs:28:5\n+  --> $DIR/unreachable_pub-pub_crate.rs:27:24\n+   |\n+LL |     pub use std::env::{Args}; // braced-use has different item spans than unbraced\n+   |                        ^^^^ help: consider restricting its visibility: `pub(crate)`\n+   |\n+   = help: or consider exporting it for use by other crates\n+\n+warning: unreachable `pub` item\n+  --> $DIR/unreachable_pub-pub_crate.rs:29:5\n    |\n LL |     pub struct Hydrogen {\n    |     ---^^^^^^^^^^^^^^^^\n@@ -24,23 +32,23 @@ LL |     pub struct Hydrogen {\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` field\n-  --> $DIR/unreachable_pub-pub_crate.rs:30:9\n+  --> $DIR/unreachable_pub-pub_crate.rs:31:9\n    |\n LL |         pub neutrons: usize,\n    |         ---^^^^^^^^^^^^^^^^\n    |         |\n    |         help: consider restricting its visibility: `pub(crate)`\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub-pub_crate.rs:36:9\n+  --> $DIR/unreachable_pub-pub_crate.rs:37:9\n    |\n LL |         pub fn count_neutrons(&self) -> usize { self.neutrons }\n    |         ---^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         help: consider restricting its visibility: `pub(crate)`\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub-pub_crate.rs:40:5\n+  --> $DIR/unreachable_pub-pub_crate.rs:41:5\n    |\n LL |     pub enum Helium {}\n    |     ---^^^^^^^^^^^^\n@@ -50,7 +58,7 @@ LL |     pub enum Helium {}\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub-pub_crate.rs:41:5\n+  --> $DIR/unreachable_pub-pub_crate.rs:42:5\n    |\n LL |     pub union Lithium { c1: usize, c2: u8 }\n    |     ---^^^^^^^^^^^^^^\n@@ -60,7 +68,7 @@ LL |     pub union Lithium { c1: usize, c2: u8 }\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub-pub_crate.rs:42:5\n+  --> $DIR/unreachable_pub-pub_crate.rs:43:5\n    |\n LL |     pub fn beryllium() {}\n    |     ---^^^^^^^^^^^^^^^\n@@ -70,7 +78,7 @@ LL |     pub fn beryllium() {}\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub-pub_crate.rs:43:5\n+  --> $DIR/unreachable_pub-pub_crate.rs:44:5\n    |\n LL |     pub trait Boron {}\n    |     ---^^^^^^^^^^^^\n@@ -80,7 +88,7 @@ LL |     pub trait Boron {}\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub-pub_crate.rs:44:5\n+  --> $DIR/unreachable_pub-pub_crate.rs:45:5\n    |\n LL |     pub const CARBON: usize = 1;\n    |     ---^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -90,7 +98,7 @@ LL |     pub const CARBON: usize = 1;\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub-pub_crate.rs:45:5\n+  --> $DIR/unreachable_pub-pub_crate.rs:46:5\n    |\n LL |     pub static NITROGEN: usize = 2;\n    |     ---^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -100,7 +108,7 @@ LL |     pub static NITROGEN: usize = 2;\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub-pub_crate.rs:46:5\n+  --> $DIR/unreachable_pub-pub_crate.rs:47:5\n    |\n LL |     pub type Oxygen = bool;\n    |     ---^^^^^^^^^^^^^^^^^^^^\n@@ -110,7 +118,7 @@ LL |     pub type Oxygen = bool;\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub-pub_crate.rs:49:47\n+  --> $DIR/unreachable_pub-pub_crate.rs:50:47\n    |\n LL |         ($visibility: vis, $name: ident) => { $visibility struct $name {} }\n    |                                               -----------^^^^^^^^^^^^^\n@@ -123,7 +131,7 @@ LL |     define_empty_struct_with_visibility!(pub, Fluorine);\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub-pub_crate.rs:54:9\n+  --> $DIR/unreachable_pub-pub_crate.rs:55:9\n    |\n LL |         pub fn catalyze() -> bool;\n    |         ---^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "5bb67670d85c2ae6f9bcfa708e28c944ed82f2c4", "filename": "src/test/ui/lint/unreachable_pub.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f98fe714e8e5638fd38cb238c50508c2600002f/src%2Ftest%2Fui%2Flint%2Funreachable_pub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f98fe714e8e5638fd38cb238c50508c2600002f/src%2Ftest%2Fui%2Flint%2Funreachable_pub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funreachable_pub.rs?ref=5f98fe714e8e5638fd38cb238c50508c2600002f", "patch": "@@ -19,6 +19,7 @@\n mod private_mod {\n     // non-leaked `pub` items in private module should be linted\n     pub use std::fmt;\n+    pub use std::env::{Args}; // braced-use has different item spans than unbraced\n \n     pub struct Hydrogen {\n         // `pub` struct fields, too"}, {"sha": "ad88c55d54013a92c97697454bdfcfcac7ef4fb4", "filename": "src/test/ui/lint/unreachable_pub.stderr", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/5f98fe714e8e5638fd38cb238c50508c2600002f/src%2Ftest%2Fui%2Flint%2Funreachable_pub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f98fe714e8e5638fd38cb238c50508c2600002f/src%2Ftest%2Fui%2Flint%2Funreachable_pub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funreachable_pub.stderr?ref=5f98fe714e8e5638fd38cb238c50508c2600002f", "patch": "@@ -14,7 +14,15 @@ LL | #![warn(unreachable_pub)]\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub.rs:23:5\n+  --> $DIR/unreachable_pub.rs:22:24\n+   |\n+LL |     pub use std::env::{Args}; // braced-use has different item spans than unbraced\n+   |                        ^^^^ help: consider restricting its visibility: `crate`\n+   |\n+   = help: or consider exporting it for use by other crates\n+\n+warning: unreachable `pub` item\n+  --> $DIR/unreachable_pub.rs:24:5\n    |\n LL |     pub struct Hydrogen {\n    |     ---^^^^^^^^^^^^^^^^\n@@ -24,23 +32,23 @@ LL |     pub struct Hydrogen {\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` field\n-  --> $DIR/unreachable_pub.rs:25:9\n+  --> $DIR/unreachable_pub.rs:26:9\n    |\n LL |         pub neutrons: usize,\n    |         ---^^^^^^^^^^^^^^^^\n    |         |\n    |         help: consider restricting its visibility: `crate`\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub.rs:31:9\n+  --> $DIR/unreachable_pub.rs:32:9\n    |\n LL |         pub fn count_neutrons(&self) -> usize { self.neutrons }\n    |         ---^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         help: consider restricting its visibility: `crate`\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub.rs:35:5\n+  --> $DIR/unreachable_pub.rs:36:5\n    |\n LL |     pub enum Helium {}\n    |     ---^^^^^^^^^^^^\n@@ -50,7 +58,7 @@ LL |     pub enum Helium {}\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub.rs:36:5\n+  --> $DIR/unreachable_pub.rs:37:5\n    |\n LL |     pub union Lithium { c1: usize, c2: u8 }\n    |     ---^^^^^^^^^^^^^^\n@@ -60,7 +68,7 @@ LL |     pub union Lithium { c1: usize, c2: u8 }\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub.rs:37:5\n+  --> $DIR/unreachable_pub.rs:38:5\n    |\n LL |     pub fn beryllium() {}\n    |     ---^^^^^^^^^^^^^^^\n@@ -70,7 +78,7 @@ LL |     pub fn beryllium() {}\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub.rs:38:5\n+  --> $DIR/unreachable_pub.rs:39:5\n    |\n LL |     pub trait Boron {}\n    |     ---^^^^^^^^^^^^\n@@ -80,7 +88,7 @@ LL |     pub trait Boron {}\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub.rs:39:5\n+  --> $DIR/unreachable_pub.rs:40:5\n    |\n LL |     pub const CARBON: usize = 1;\n    |     ---^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -90,7 +98,7 @@ LL |     pub const CARBON: usize = 1;\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub.rs:40:5\n+  --> $DIR/unreachable_pub.rs:41:5\n    |\n LL |     pub static NITROGEN: usize = 2;\n    |     ---^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -100,7 +108,7 @@ LL |     pub static NITROGEN: usize = 2;\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub.rs:41:5\n+  --> $DIR/unreachable_pub.rs:42:5\n    |\n LL |     pub type Oxygen = bool;\n    |     ---^^^^^^^^^^^^^^^^^^^^\n@@ -110,7 +118,7 @@ LL |     pub type Oxygen = bool;\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub.rs:44:47\n+  --> $DIR/unreachable_pub.rs:45:47\n    |\n LL |         ($visibility: vis, $name: ident) => { $visibility struct $name {} }\n    |                                               -----------^^^^^^^^^^^^^\n@@ -123,7 +131,7 @@ LL |     define_empty_struct_with_visibility!(pub, Fluorine);\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub.rs:49:9\n+  --> $DIR/unreachable_pub.rs:50:9\n    |\n LL |         pub fn catalyze() -> bool;\n    |         ---^^^^^^^^^^^^^^^^^^^^^^^"}]}