{"sha": "2d4a0cbe3b7a4c8f94bb1d422993ff856d714dae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkNGEwY2JlM2I3YTRjOGY5NGJiMWQ0MjI5OTNmZjg1NmQ3MTRkYWU=", "commit": {"author": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-09-26T21:16:11Z"}, "committer": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-09-26T21:18:57Z"}, "message": "Fix match arm indentation bug", "tree": {"sha": "9f251622d3e61c8e791208e9388454dcfb26dfa6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f251622d3e61c8e791208e9388454dcfb26dfa6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d4a0cbe3b7a4c8f94bb1d422993ff856d714dae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d4a0cbe3b7a4c8f94bb1d422993ff856d714dae", "html_url": "https://github.com/rust-lang/rust/commit/2d4a0cbe3b7a4c8f94bb1d422993ff856d714dae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d4a0cbe3b7a4c8f94bb1d422993ff856d714dae/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "078fff068a3d0e5401bd46214c112cb9276a6240", "url": "https://api.github.com/repos/rust-lang/rust/commits/078fff068a3d0e5401bd46214c112cb9276a6240", "html_url": "https://github.com/rust-lang/rust/commit/078fff068a3d0e5401bd46214c112cb9276a6240"}], "stats": {"total": 60, "additions": 35, "deletions": 25}, "files": [{"sha": "b8a52a02cc78cf823b26efbe0962e03490d4f39f", "filename": "src/expr.rs", "status": "modified", "additions": 21, "deletions": 18, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/2d4a0cbe3b7a4c8f94bb1d422993ff856d714dae/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d4a0cbe3b7a4c8f94bb1d422993ff856d714dae/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=2d4a0cbe3b7a4c8f94bb1d422993ff856d714dae", "patch": "@@ -155,11 +155,14 @@ impl Rewrite for ast::Expr {\n                 rewrite_chain(self, context, width, offset)\n             }\n             ast::Expr_::ExprMac(ref mac) => {\n-                // Failure to rewrite a marco should not imply failure to rewrite the Expr\n-                rewrite_macro(mac, context, width, offset).or(wrap_str(context.snippet(self.span),\n-                                                                       context.config.max_width,\n-                                                                       width,\n-                                                                       offset))\n+                // Failure to rewrite a marco should not imply failure to\n+                // rewrite the expression.\n+                rewrite_macro(mac, context, width, offset).or_else(|| {\n+                    wrap_str(context.snippet(self.span),\n+                             context.config.max_width,\n+                             width,\n+                             offset)\n+                })\n             }\n             ast::Expr_::ExprRet(None) => {\n                 wrap_str(\"return\".to_owned(),\n@@ -168,10 +171,10 @@ impl Rewrite for ast::Expr {\n                          offset)\n             }\n             ast::Expr_::ExprRet(Some(ref expr)) => {\n-                rewrite_unary_prefix(context, \"return \", &expr, width, offset)\n+                rewrite_unary_prefix(context, \"return \", expr, width, offset)\n             }\n             ast::Expr_::ExprBox(ref expr) => {\n-                rewrite_unary_prefix(context, \"box \", &expr, width, offset)\n+                rewrite_unary_prefix(context, \"box \", expr, width, offset)\n             }\n             ast::Expr_::ExprAddrOf(mutability, ref expr) => {\n                 rewrite_expr_addrof(context, mutability, &expr, width, offset)\n@@ -872,15 +875,10 @@ impl Rewrite for ast::Arm {\n         let pats_str = format!(\"{}{}\", pats_str, guard_str);\n         // Where the next text can start.\n         let mut line_start = last_line_width(&pats_str);\n-        if pats_str.find('\\n').is_none() {\n+        if !pats_str.contains('\\n') {\n             line_start += offset.width();\n         }\n \n-        let mut line_indent = offset + pats_width;\n-        if vertical {\n-            line_indent = line_indent.block_indent(context.config);\n-        }\n-\n         let comma = if let ast::ExprBlock(_) = body.node {\n             \"\"\n         } else {\n@@ -891,8 +889,9 @@ impl Rewrite for ast::Arm {\n         // 4 = ` => `.len()\n         let same_line_body = if context.config.max_width > line_start + comma.len() + 4 {\n             let budget = context.config.max_width - line_start - comma.len() - 4;\n-            let rewrite = nop_block_collapse(body.rewrite(context, budget, line_indent + 4),\n-                                             budget);\n+            let offset = Indent::new(offset.block_indent,\n+                                     line_start + 4 - offset.block_indent);\n+            let rewrite = nop_block_collapse(body.rewrite(context, budget, offset), budget);\n \n             match rewrite {\n                 Some(ref body_str) if body_str.len() <= budget || comma.is_empty() =>\n@@ -907,7 +906,6 @@ impl Rewrite for ast::Arm {\n             None\n         };\n \n-        // We have to push the body to the next line.\n         if let ast::ExprBlock(_) = body.node {\n             // We're trying to fit a block in, but it still failed, give up.\n             return None;\n@@ -926,12 +924,17 @@ impl Rewrite for ast::Arm {\n                                                                                 .map(|x| &x[..])));\n \n         let spacer = if break_line {\n-            format!(\"\\n{}\", offset.block_indent(context.config).to_string(context.config))\n+            format!(\"\\n{}\",\n+                    offset.block_indent(context.config).to_string(context.config))\n         } else {\n             \" \".to_owned()\n         };\n \n-        Some(format!(\"{}{} =>{}{},\", attr_str.trim_left(), pats_str, spacer, body_str))\n+        Some(format!(\"{}{} =>{}{},\",\n+                     attr_str.trim_left(),\n+                     pats_str,\n+                     spacer,\n+                     body_str))\n     }\n }\n "}, {"sha": "b483cae60d4bc2e68f2804345fb3eae45494dbc3", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d4a0cbe3b7a4c8f94bb1d422993ff856d714dae/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d4a0cbe3b7a4c8f94bb1d422993ff856d714dae/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=2d4a0cbe3b7a4c8f94bb1d422993ff856d714dae", "patch": "@@ -85,9 +85,9 @@ const SKIP_ANNOTATION: &'static str = \"rustfmt_skip\";\n pub struct Indent {\n     // Width of the block indent, in characters. Must be a multiple of\n     // Config::tab_spaces.\n-    block_indent: usize,\n+    pub block_indent: usize,\n     // Alignment in characters.\n-    alignment: usize,\n+    pub alignment: usize,\n }\n \n impl Indent {"}, {"sha": "d7227a0da59cc1be76012d5fb70d065640cd026a", "filename": "tests/target/match.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2d4a0cbe3b7a4c8f94bb1d422993ff856d714dae/tests%2Ftarget%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d4a0cbe3b7a4c8f94bb1d422993ff856d714dae/tests%2Ftarget%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmatch.rs?ref=2d4a0cbe3b7a4c8f94bb1d422993ff856d714dae", "patch": "@@ -65,12 +65,19 @@ fn main() {\n // Test that one-line bodies align.\n fn main() {\n     match r {\n-        Variableeeeeeeeeeeeeeeeee =>\n-            (\"variable\", vec!(\"id\", \"name\", \"qualname\", \"value\", \"type\", \"scopeid\"), true, true),\n-        Enummmmmmmmmmmmmmmmmmmmm =>\n-            (\"enum\", vec!(\"id\", \"qualname\", \"scopeid\", \"value\"), true, true),\n+        Variableeeeeeeeeeeeeeeeee => (\"variable\",\n+                                      vec!(\"id\", \"name\", \"qualname\", \"value\", \"type\", \"scopeid\"),\n+                                      true,\n+                                      true),\n+        Enummmmmmmmmmmmmmmmmmmmm => (\"enum\",\n+                                     vec!(\"id\", \"qualname\", \"scopeid\", \"value\"),\n+                                     true,\n+                                     true),\n         Variantttttttttttttttttttttttt =>\n-            (\"variant\", vec!(\"id\", \"name\", \"qualname\", \"type\", \"value\", \"scopeid\"), true, true),\n+            (\"variant\",\n+             vec!(\"id\", \"name\", \"qualname\", \"type\", \"value\", \"scopeid\"),\n+             true,\n+             true),\n     }\n }\n "}]}