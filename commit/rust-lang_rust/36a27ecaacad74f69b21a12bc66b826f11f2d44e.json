{"sha": "36a27ecaacad74f69b21a12bc66b826f11f2d44e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2YTI3ZWNhYWNhZDc0ZjY5YjIxYTEyYmM2NmI4MjZmMTFmMmQ0NGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-10T08:40:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-10T08:40:51Z"}, "message": "Auto merge of #79519 - cjgillot:noattr, r=wesleywiser\n\nStore HIR attributes in a side table\n\nSame idea as #72015 but for attributes.\nThe objective is to reduce incr-comp invalidations due to modified attributes.\nNotably, those due to modified doc comments.\n\nImplementation:\n- collect attributes during AST->HIR lowering, in `LocalDefId -> ItemLocalId -> &[Attributes]` nested tables;\n- access the attributes through a `hir_owner_attrs` query;\n- local refactorings to use this access;\n- remove `attrs` from HIR data structures one-by-one.\n\nChange in behaviour:\n- the HIR visitor traverses all attributes at once instead of parent-by-parent;\n- attribute arrays are sometimes duplicated: for statements and variant constructors;\n- as a consequence, attributes are marked as used after unused-attribute lint emission to avoid duplicate lints.\n\n~~Current bug: the lint level is not correctly applied in `std::backtrace_rs`, triggering an unused attribute warning on `#![no_std]`. I welcome suggestions.~~", "tree": {"sha": "1c796add0157cc072c2fa3316e28b3a6cbec367b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c796add0157cc072c2fa3316e28b3a6cbec367b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36a27ecaacad74f69b21a12bc66b826f11f2d44e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36a27ecaacad74f69b21a12bc66b826f11f2d44e", "html_url": "https://github.com/rust-lang/rust/commit/36a27ecaacad74f69b21a12bc66b826f11f2d44e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36a27ecaacad74f69b21a12bc66b826f11f2d44e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb8bc0b6e659cc82b80a056dbe7b7df3acda7df6", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb8bc0b6e659cc82b80a056dbe7b7df3acda7df6", "html_url": "https://github.com/rust-lang/rust/commit/cb8bc0b6e659cc82b80a056dbe7b7df3acda7df6"}, {"sha": "6c668266c0d4a949e534bb2770fa3fcc8b64ef1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c668266c0d4a949e534bb2770fa3fcc8b64ef1d", "html_url": "https://github.com/rust-lang/rust/commit/6c668266c0d4a949e534bb2770fa3fcc8b64ef1d"}], "stats": {"total": 184, "additions": 103, "deletions": 81}, "files": [{"sha": "78f0846e88e7dce83dcd655f9e8103d949943533", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/36a27ecaacad74f69b21a12bc66b826f11f2d44e/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a27ecaacad74f69b21a12bc66b826f11f2d44e/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=36a27ecaacad74f69b21a12bc66b826f11f2d44e", "patch": "@@ -276,14 +276,15 @@ impl<'tcx> LateLintPass<'tcx> for Attributes {\n     }\n \n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n+        let attrs = cx.tcx.hir().attrs(item.hir_id());\n         if is_relevant_item(cx, item) {\n-            check_attrs(cx, item.span, item.ident.name, &item.attrs)\n+            check_attrs(cx, item.span, item.ident.name, attrs)\n         }\n         match item.kind {\n             ItemKind::ExternCrate(..) | ItemKind::Use(..) => {\n-                let skip_unused_imports = item.attrs.iter().any(|attr| attr.has_name(sym::macro_use));\n+                let skip_unused_imports = attrs.iter().any(|attr| attr.has_name(sym::macro_use));\n \n-                for attr in item.attrs {\n+                for attr in attrs {\n                     if in_external_macro(cx.sess(), attr.span) {\n                         return;\n                     }\n@@ -353,13 +354,13 @@ impl<'tcx> LateLintPass<'tcx> for Attributes {\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx ImplItem<'_>) {\n         if is_relevant_impl(cx, item) {\n-            check_attrs(cx, item.span, item.ident.name, &item.attrs)\n+            check_attrs(cx, item.span, item.ident.name, cx.tcx.hir().attrs(item.hir_id()))\n         }\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx TraitItem<'_>) {\n         if is_relevant_trait(cx, item) {\n-            check_attrs(cx, item.span, item.ident.name, &item.attrs)\n+            check_attrs(cx, item.span, item.ident.name, cx.tcx.hir().attrs(item.hir_id()))\n         }\n     }\n }"}, {"sha": "658d445dfec54d0ad2e2a35bff964e571144bc84", "filename": "clippy_lints/src/cognitive_complexity.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36a27ecaacad74f69b21a12bc66b826f11f2d44e/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a27ecaacad74f69b21a12bc66b826f11f2d44e/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcognitive_complexity.rs?ref=36a27ecaacad74f69b21a12bc66b826f11f2d44e", "patch": "@@ -76,8 +76,8 @@ impl CognitiveComplexity {\n \n         if rust_cc > self.limit.limit() {\n             let fn_span = match kind {\n-                FnKind::ItemFn(ident, _, _, _, _) | FnKind::Method(ident, _, _, _) => ident.span,\n-                FnKind::Closure(_) => {\n+                FnKind::ItemFn(ident, _, _, _) | FnKind::Method(ident, _, _) => ident.span,\n+                FnKind::Closure => {\n                     let header_span = body_span.with_hi(decl.output.span().lo());\n                     let pos = snippet_opt(cx, header_span).and_then(|snip| {\n                         let low_offset = snip.find('|')?;"}, {"sha": "66cf6682f8501008ec0bcbb31e6528a6eb6ffb72", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36a27ecaacad74f69b21a12bc66b826f11f2d44e/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a27ecaacad74f69b21a12bc66b826f11f2d44e/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=36a27ecaacad74f69b21a12bc66b826f11f2d44e", "patch": "@@ -170,7 +170,8 @@ impl<'tcx> LateLintPass<'tcx> for Derive {\n         }) = item.kind\n         {\n             let ty = cx.tcx.type_of(item.def_id);\n-            let is_automatically_derived = is_automatically_derived(&*item.attrs);\n+            let attrs = cx.tcx.hir().attrs(item.hir_id());\n+            let is_automatically_derived = is_automatically_derived(attrs);\n \n             check_hash_peq(cx, item.span, trait_ref, ty, is_automatically_derived);\n             check_ord_partial_ord(cx, item.span, trait_ref, ty, is_automatically_derived);"}, {"sha": "23c99e45ca7fcd924461ceab2b2322bfb4a1694f", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/36a27ecaacad74f69b21a12bc66b826f11f2d44e/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a27ecaacad74f69b21a12bc66b826f11f2d44e/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=36a27ecaacad74f69b21a12bc66b826f11f2d44e", "patch": "@@ -208,12 +208,14 @@ impl_lint_pass!(DocMarkdown =>\n );\n \n impl<'tcx> LateLintPass<'tcx> for DocMarkdown {\n-    fn check_crate(&mut self, cx: &LateContext<'tcx>, krate: &'tcx hir::Crate<'_>) {\n-        check_attrs(cx, &self.valid_idents, &krate.item.attrs);\n+    fn check_crate(&mut self, cx: &LateContext<'tcx>, _: &'tcx hir::Crate<'_>) {\n+        let attrs = cx.tcx.hir().attrs(hir::CRATE_HIR_ID);\n+        check_attrs(cx, &self.valid_idents, attrs);\n     }\n \n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {\n-        let headers = check_attrs(cx, &self.valid_idents, &item.attrs);\n+        let attrs = cx.tcx.hir().attrs(item.hir_id());\n+        let headers = check_attrs(cx, &self.valid_idents, attrs);\n         match item.kind {\n             hir::ItemKind::Fn(ref sig, _, body_id) => {\n                 if !(is_entrypoint_fn(cx, item.def_id.to_def_id()) || in_external_macro(cx.tcx.sess, item.span)) {\n@@ -249,7 +251,8 @@ impl<'tcx> LateLintPass<'tcx> for DocMarkdown {\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::TraitItem<'_>) {\n-        let headers = check_attrs(cx, &self.valid_idents, &item.attrs);\n+        let attrs = cx.tcx.hir().attrs(item.hir_id());\n+        let headers = check_attrs(cx, &self.valid_idents, attrs);\n         if let hir::TraitItemKind::Fn(ref sig, ..) = item.kind {\n             if !in_external_macro(cx.tcx.sess, item.span) {\n                 lint_for_missing_headers(cx, item.hir_id(), item.span, sig, headers, None, None);\n@@ -258,7 +261,8 @@ impl<'tcx> LateLintPass<'tcx> for DocMarkdown {\n     }\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::ImplItem<'_>) {\n-        let headers = check_attrs(cx, &self.valid_idents, &item.attrs);\n+        let attrs = cx.tcx.hir().attrs(item.hir_id());\n+        let headers = check_attrs(cx, &self.valid_idents, attrs);\n         if self.in_trait_impl || in_external_macro(cx.tcx.sess, item.span) {\n             return;\n         }"}, {"sha": "316f7484862803281cdcc2f96e9b3a06d5c87beb", "filename": "clippy_lints/src/exhaustive_items.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36a27ecaacad74f69b21a12bc66b826f11f2d44e/clippy_lints%2Fsrc%2Fexhaustive_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a27ecaacad74f69b21a12bc66b826f11f2d44e/clippy_lints%2Fsrc%2Fexhaustive_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexhaustive_items.rs?ref=36a27ecaacad74f69b21a12bc66b826f11f2d44e", "patch": "@@ -73,7 +73,8 @@ impl LateLintPass<'_> for ExhaustiveItems {\n         if_chain! {\n             if let ItemKind::Enum(..) | ItemKind::Struct(..) = item.kind;\n             if cx.access_levels.is_exported(item.hir_id());\n-            if !item.attrs.iter().any(|a| a.has_name(sym::non_exhaustive));\n+            let attrs = cx.tcx.hir().attrs(item.hir_id());\n+            if !attrs.iter().any(|a| a.has_name(sym::non_exhaustive));\n             then {\n                 let (lint, msg) = if let ItemKind::Struct(ref v, ..) = item.kind {\n                     if v.fields().iter().any(|f| !f.vis.node.is_pub()) {"}, {"sha": "234cb0f53aa0c26a7b77e5ee3426407d8633c7df", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/36a27ecaacad74f69b21a12bc66b826f11f2d44e/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a27ecaacad74f69b21a12bc66b826f11f2d44e/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=36a27ecaacad74f69b21a12bc66b826f11f2d44e", "patch": "@@ -251,9 +251,9 @@ impl<'tcx> LateLintPass<'tcx> for Functions {\n         hir_id: hir::HirId,\n     ) {\n         let unsafety = match kind {\n-            intravisit::FnKind::ItemFn(_, _, hir::FnHeader { unsafety, .. }, _, _) => unsafety,\n-            intravisit::FnKind::Method(_, sig, _, _) => sig.header.unsafety,\n-            intravisit::FnKind::Closure(_) => return,\n+            intravisit::FnKind::ItemFn(_, _, hir::FnHeader { unsafety, .. }, _) => unsafety,\n+            intravisit::FnKind::Method(_, sig, _) => sig.header.unsafety,\n+            intravisit::FnKind::Closure => return,\n         };\n \n         // don't warn for implementations, it's not their fault\n@@ -267,9 +267,8 @@ impl<'tcx> LateLintPass<'tcx> for Functions {\n                         ..\n                     },\n                     _,\n-                    _,\n                 )\n-                | intravisit::FnKind::ItemFn(_, _, hir::FnHeader { abi: Abi::Rust, .. }, _, _) => {\n+                | intravisit::FnKind::ItemFn(_, _, hir::FnHeader { abi: Abi::Rust, .. }, _) => {\n                     self.check_arg_number(cx, decl, span.with_hi(decl.output.span().hi()))\n                 },\n                 _ => {},\n@@ -281,7 +280,8 @@ impl<'tcx> LateLintPass<'tcx> for Functions {\n     }\n \n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {\n-        let attr = must_use_attr(&item.attrs);\n+        let attrs = cx.tcx.hir().attrs(item.hir_id());\n+        let attr = must_use_attr(attrs);\n         if let hir::ItemKind::Fn(ref sig, ref _generics, ref body_id) = item.kind {\n             let is_public = cx.access_levels.is_exported(item.hir_id());\n             let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n@@ -292,7 +292,7 @@ impl<'tcx> LateLintPass<'tcx> for Functions {\n                 check_needless_must_use(cx, &sig.decl, item.hir_id(), item.span, fn_header_span, attr);\n                 return;\n             }\n-            if is_public && !is_proc_macro(cx.sess(), &item.attrs) && attr_by_name(&item.attrs, \"no_mangle\").is_none() {\n+            if is_public && !is_proc_macro(cx.sess(), attrs) && attr_by_name(attrs, \"no_mangle\").is_none() {\n                 check_must_use_candidate(\n                     cx,\n                     &sig.decl,\n@@ -313,11 +313,12 @@ impl<'tcx> LateLintPass<'tcx> for Functions {\n             if is_public && trait_ref_of_method(cx, item.hir_id()).is_none() {\n                 check_result_unit_err(cx, &sig.decl, item.span, fn_header_span);\n             }\n-            let attr = must_use_attr(&item.attrs);\n+            let attrs = cx.tcx.hir().attrs(item.hir_id());\n+            let attr = must_use_attr(attrs);\n             if let Some(attr) = attr {\n                 check_needless_must_use(cx, &sig.decl, item.hir_id(), item.span, fn_header_span, attr);\n             } else if is_public\n-                && !is_proc_macro(cx.sess(), &item.attrs)\n+                && !is_proc_macro(cx.sess(), attrs)\n                 && trait_ref_of_method(cx, item.hir_id()).is_none()\n             {\n                 check_must_use_candidate(\n@@ -345,15 +346,16 @@ impl<'tcx> LateLintPass<'tcx> for Functions {\n                 check_result_unit_err(cx, &sig.decl, item.span, fn_header_span);\n             }\n \n-            let attr = must_use_attr(&item.attrs);\n+            let attrs = cx.tcx.hir().attrs(item.hir_id());\n+            let attr = must_use_attr(attrs);\n             if let Some(attr) = attr {\n                 check_needless_must_use(cx, &sig.decl, item.hir_id(), item.span, fn_header_span, attr);\n             }\n             if let hir::TraitFn::Provided(eid) = *eid {\n                 let body = cx.tcx.hir().body(eid);\n                 Self::check_raw_ptr(cx, sig.header.unsafety, &sig.decl, body, item.hir_id());\n \n-                if attr.is_none() && is_public && !is_proc_macro(cx.sess(), &item.attrs) {\n+                if attr.is_none() && is_public && !is_proc_macro(cx.sess(), attrs) {\n                     check_must_use_candidate(\n                         cx,\n                         &sig.decl,"}, {"sha": "9e1a8864a3ebe0ff6deff9c2cbec4c1bf19a7499", "filename": "clippy_lints/src/future_not_send.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36a27ecaacad74f69b21a12bc66b826f11f2d44e/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a27ecaacad74f69b21a12bc66b826f11f2d44e/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffuture_not_send.rs?ref=36a27ecaacad74f69b21a12bc66b826f11f2d44e", "patch": "@@ -58,7 +58,7 @@ impl<'tcx> LateLintPass<'tcx> for FutureNotSend {\n         _: Span,\n         hir_id: HirId,\n     ) {\n-        if let FnKind::Closure(_) = kind {\n+        if let FnKind::Closure = kind {\n             return;\n         }\n         let ret_ty = utils::return_ty(cx, hir_id);"}, {"sha": "00acbd6cc3f7694525ebba2802f5883207b8a5bc", "filename": "clippy_lints/src/inline_fn_without_body.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36a27ecaacad74f69b21a12bc66b826f11f2d44e/clippy_lints%2Fsrc%2Finline_fn_without_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a27ecaacad74f69b21a12bc66b826f11f2d44e/clippy_lints%2Fsrc%2Finline_fn_without_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finline_fn_without_body.rs?ref=36a27ecaacad74f69b21a12bc66b826f11f2d44e", "patch": "@@ -34,7 +34,8 @@ declare_lint_pass!(InlineFnWithoutBody => [INLINE_FN_WITHOUT_BODY]);\n impl<'tcx> LateLintPass<'tcx> for InlineFnWithoutBody {\n     fn check_trait_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx TraitItem<'_>) {\n         if let TraitItemKind::Fn(_, TraitFn::Required(_)) = item.kind {\n-            check_attrs(cx, item.ident.name, &item.attrs);\n+            let attrs = cx.tcx.hir().attrs(item.hir_id());\n+            check_attrs(cx, item.ident.name, attrs);\n         }\n     }\n }"}, {"sha": "9b626d81ebd813e03e940a3cfaca1d8239057873", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36a27ecaacad74f69b21a12bc66b826f11f2d44e/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a27ecaacad74f69b21a12bc66b826f11f2d44e/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=36a27ecaacad74f69b21a12bc66b826f11f2d44e", "patch": "@@ -578,7 +578,7 @@ impl<'tcx> LateLintPass<'tcx> for Loops {\n             // also check for empty `loop {}` statements, skipping those in #[panic_handler]\n             if block.stmts.is_empty() && block.expr.is_none() && !is_in_panic_handler(cx, expr) {\n                 let msg = \"empty `loop {}` wastes CPU cycles\";\n-                let help = if is_no_std_crate(cx.tcx.hir().krate()) {\n+                let help = if is_no_std_crate(cx) {\n                     \"you should either use `panic!()` or add a call pausing or sleeping the thread to the loop body\"\n                 } else {\n                     \"you should either use `panic!()` or add `std::thread::sleep(..);` to the loop body\""}, {"sha": "6d9c78393c8c4d2eee97df292a35372f02ee80b1", "filename": "clippy_lints/src/macro_use.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36a27ecaacad74f69b21a12bc66b826f11f2d44e/clippy_lints%2Fsrc%2Fmacro_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a27ecaacad74f69b21a12bc66b826f11f2d44e/clippy_lints%2Fsrc%2Fmacro_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmacro_use.rs?ref=36a27ecaacad74f69b21a12bc66b826f11f2d44e", "patch": "@@ -107,8 +107,8 @@ impl<'tcx> LateLintPass<'tcx> for MacroUseImports {\n         if_chain! {\n             if cx.sess().opts.edition >= Edition::Edition2018;\n             if let hir::ItemKind::Use(path, _kind) = &item.kind;\n-            if let Some(mac_attr) = item\n-                .attrs\n+            let attrs = cx.tcx.hir().attrs(item.hir_id());\n+            if let Some(mac_attr) = attrs\n                 .iter()\n                 .find(|attr| attr.ident().map(|s| s.to_string()) == Some(\"macro_use\".to_string()));\n             if let Res::Def(DefKind::Mod, id) = path.res;"}, {"sha": "1b274c79d3820b5a948efb4578adb3bf220b0e3f", "filename": "clippy_lints/src/main_recursion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36a27ecaacad74f69b21a12bc66b826f11f2d44e/clippy_lints%2Fsrc%2Fmain_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a27ecaacad74f69b21a12bc66b826f11f2d44e/clippy_lints%2Fsrc%2Fmain_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmain_recursion.rs?ref=36a27ecaacad74f69b21a12bc66b826f11f2d44e", "patch": "@@ -32,8 +32,8 @@ pub struct MainRecursion {\n impl_lint_pass!(MainRecursion => [MAIN_RECURSION]);\n \n impl LateLintPass<'_> for MainRecursion {\n-    fn check_crate(&mut self, _: &LateContext<'_>, krate: &Crate<'_>) {\n-        self.has_no_std_attr = is_no_std_crate(krate);\n+    fn check_crate(&mut self, cx: &LateContext<'_>, _: &Crate<'_>) {\n+        self.has_no_std_attr = is_no_std_crate(cx);\n     }\n \n     fn check_expr_post(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {"}, {"sha": "9c87759d51d2db63dab4723091d93aacdf89c694", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36a27ecaacad74f69b21a12bc66b826f11f2d44e/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a27ecaacad74f69b21a12bc66b826f11f2d44e/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=36a27ecaacad74f69b21a12bc66b826f11f2d44e", "patch": "@@ -1207,11 +1207,11 @@ fn find_matches_sugg(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>], expr\n         if b0 != b1;\n         let if_guard = &b0_arms[0].guard;\n         if if_guard.is_none() || b0_arms.len() == 1;\n-        if b0_arms[0].attrs.is_empty();\n+        if cx.tcx.hir().attrs(b0_arms[0].hir_id).is_empty();\n         if b0_arms[1..].iter()\n             .all(|arm| {\n                 find_bool_lit(&arm.body.kind, desugared).map_or(false, |b| b == b0) &&\n-                arm.guard.is_none() && arm.attrs.is_empty()\n+                arm.guard.is_none() && cx.tcx.hir().attrs(arm.hir_id).is_empty()\n             });\n         then {\n             // The suggestion may be incorrect, because some arms can have `cfg` attributes"}, {"sha": "35b4c3d5b03abf1d65733962fbdb65e74a503689", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36a27ecaacad74f69b21a12bc66b826f11f2d44e/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a27ecaacad74f69b21a12bc66b826f11f2d44e/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=36a27ecaacad74f69b21a12bc66b826f11f2d44e", "patch": "@@ -278,7 +278,7 @@ impl<'tcx> LateLintPass<'tcx> for MiscLints {\n         span: Span,\n         _: HirId,\n     ) {\n-        if let FnKind::Closure(_) = k {\n+        if let FnKind::Closure = k {\n             // Does not apply to closures\n             return;\n         }"}, {"sha": "b0998a80128cef12d73d13f2136b7c64e5672fd0", "filename": "clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36a27ecaacad74f69b21a12bc66b826f11f2d44e/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a27ecaacad74f69b21a12bc66b826f11f2d44e/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=36a27ecaacad74f69b21a12bc66b826f11f2d44e", "patch": "@@ -133,7 +133,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingConstForFn {\n                     return;\n                 }\n             },\n-            FnKind::Closure(..) => return,\n+            FnKind::Closure => return,\n         }\n \n         let mir = cx.tcx.optimized_mir(def_id);"}, {"sha": "6ec4c38d0f9ccfeac5afc4c86d0a6fc3c46bba37", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/36a27ecaacad74f69b21a12bc66b826f11f2d44e/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a27ecaacad74f69b21a12bc66b826f11f2d44e/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=36a27ecaacad74f69b21a12bc66b826f11f2d44e", "patch": "@@ -127,7 +127,8 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n     }\n \n     fn check_crate(&mut self, cx: &LateContext<'tcx>, krate: &'tcx hir::Crate<'_>) {\n-        self.check_missing_docs_attrs(cx, &krate.item.attrs, krate.item.span, \"the\", \"crate\");\n+        let attrs = cx.tcx.hir().attrs(hir::CRATE_HIR_ID);\n+        self.check_missing_docs_attrs(cx, attrs, krate.item.span, \"the\", \"crate\");\n     }\n \n     fn check_item(&mut self, cx: &LateContext<'tcx>, it: &'tcx hir::Item<'_>) {\n@@ -160,13 +161,15 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n \n         let (article, desc) = cx.tcx.article_and_description(it.def_id.to_def_id());\n \n-        self.check_missing_docs_attrs(cx, &it.attrs, it.span, article, desc);\n+        let attrs = cx.tcx.hir().attrs(it.hir_id());\n+        self.check_missing_docs_attrs(cx, attrs, it.span, article, desc);\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'tcx>, trait_item: &'tcx hir::TraitItem<'_>) {\n         let (article, desc) = cx.tcx.article_and_description(trait_item.def_id.to_def_id());\n \n-        self.check_missing_docs_attrs(cx, &trait_item.attrs, trait_item.span, article, desc);\n+        let attrs = cx.tcx.hir().attrs(trait_item.hir_id());\n+        self.check_missing_docs_attrs(cx, attrs, trait_item.span, article, desc);\n     }\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, impl_item: &'tcx hir::ImplItem<'_>) {\n@@ -181,16 +184,19 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n         }\n \n         let (article, desc) = cx.tcx.article_and_description(impl_item.def_id.to_def_id());\n-        self.check_missing_docs_attrs(cx, &impl_item.attrs, impl_item.span, article, desc);\n+        let attrs = cx.tcx.hir().attrs(impl_item.hir_id());\n+        self.check_missing_docs_attrs(cx, attrs, impl_item.span, article, desc);\n     }\n \n     fn check_struct_field(&mut self, cx: &LateContext<'tcx>, sf: &'tcx hir::StructField<'_>) {\n         if !sf.is_positional() {\n-            self.check_missing_docs_attrs(cx, &sf.attrs, sf.span, \"a\", \"struct field\");\n+            let attrs = cx.tcx.hir().attrs(sf.hir_id);\n+            self.check_missing_docs_attrs(cx, attrs, sf.span, \"a\", \"struct field\");\n         }\n     }\n \n     fn check_variant(&mut self, cx: &LateContext<'tcx>, v: &'tcx hir::Variant<'_>) {\n-        self.check_missing_docs_attrs(cx, &v.attrs, v.span, \"a\", \"variant\");\n+        let attrs = cx.tcx.hir().attrs(v.id);\n+        self.check_missing_docs_attrs(cx, attrs, v.span, \"a\", \"variant\");\n     }\n }"}, {"sha": "9b604471573d96852ac5772707d91925def90c11", "filename": "clippy_lints/src/missing_inline.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/36a27ecaacad74f69b21a12bc66b826f11f2d44e/clippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a27ecaacad74f69b21a12bc66b826f11f2d44e/clippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_inline.rs?ref=36a27ecaacad74f69b21a12bc66b826f11f2d44e", "patch": "@@ -93,7 +93,8 @@ impl<'tcx> LateLintPass<'tcx> for MissingInline {\n         match it.kind {\n             hir::ItemKind::Fn(..) => {\n                 let desc = \"a function\";\n-                check_missing_inline_attrs(cx, &it.attrs, it.span, desc);\n+                let attrs = cx.tcx.hir().attrs(it.hir_id());\n+                check_missing_inline_attrs(cx, attrs, it.span, desc);\n             },\n             hir::ItemKind::Trait(ref _is_auto, ref _unsafe, ref _generics, ref _bounds, trait_items) => {\n                 // note: we need to check if the trait is exported so we can't use\n@@ -108,7 +109,8 @@ impl<'tcx> LateLintPass<'tcx> for MissingInline {\n                                 // an impl is not provided\n                                 let desc = \"a default trait method\";\n                                 let item = cx.tcx.hir().trait_item(tit.id);\n-                                check_missing_inline_attrs(cx, &item.attrs, item.span, desc);\n+                                let attrs = cx.tcx.hir().attrs(item.hir_id());\n+                                check_missing_inline_attrs(cx, attrs, item.span, desc);\n                             }\n                         },\n                     }\n@@ -160,6 +162,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingInline {\n             }\n         }\n \n-        check_missing_inline_attrs(cx, &impl_item.attrs, impl_item.span, desc);\n+        let attrs = cx.tcx.hir().attrs(impl_item.hir_id());\n+        check_missing_inline_attrs(cx, attrs, impl_item.span, desc);\n     }\n }"}, {"sha": "1aadcfd87b60f73a1dc44626adc30300cae35d93", "filename": "clippy_lints/src/needless_borrow.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/36a27ecaacad74f69b21a12bc66b826f11f2d44e/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a27ecaacad74f69b21a12bc66b826f11f2d44e/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrow.rs?ref=36a27ecaacad74f69b21a12bc66b826f11f2d44e", "patch": "@@ -115,8 +115,9 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessBorrow {\n         }\n     }\n \n-    fn check_item(&mut self, _: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n-        if is_automatically_derived(item.attrs) {\n+    fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n+        let attrs = cx.tcx.hir().attrs(item.hir_id());\n+        if is_automatically_derived(attrs) {\n             debug_assert!(self.derived_item.is_none());\n             self.derived_item = Some(item.def_id);\n         }"}, {"sha": "cac4b2075114ac812c0376555b8cd0cad770c1ee", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/36a27ecaacad74f69b21a12bc66b826f11f2d44e/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a27ecaacad74f69b21a12bc66b826f11f2d44e/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=36a27ecaacad74f69b21a12bc66b826f11f2d44e", "patch": "@@ -80,13 +80,14 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n         }\n \n         match kind {\n-            FnKind::ItemFn(.., header, _, attrs) => {\n+            FnKind::ItemFn(.., header, _) => {\n+                let attrs = cx.tcx.hir().attrs(hir_id);\n                 if header.abi != Abi::Rust || requires_exact_signature(attrs) {\n                     return;\n                 }\n             },\n             FnKind::Method(..) => (),\n-            FnKind::Closure(..) => return,\n+            FnKind::Closure => return,\n         }\n \n         // Exclude non-inherent impls"}, {"sha": "207423a18614927f30960ba847b944170fbca91e", "filename": "clippy_lints/src/panic_in_result_fn.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36a27ecaacad74f69b21a12bc66b826f11f2d44e/clippy_lints%2Fsrc%2Fpanic_in_result_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a27ecaacad74f69b21a12bc66b826f11f2d44e/clippy_lints%2Fsrc%2Fpanic_in_result_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpanic_in_result_fn.rs?ref=36a27ecaacad74f69b21a12bc66b826f11f2d44e", "patch": "@@ -43,9 +43,7 @@ impl<'tcx> LateLintPass<'tcx> for PanicInResultFn {\n         span: Span,\n         hir_id: hir::HirId,\n     ) {\n-        if !matches!(fn_kind, FnKind::Closure(_))\n-            && is_type_diagnostic_item(cx, return_ty(cx, hir_id), sym::result_type)\n-        {\n+        if !matches!(fn_kind, FnKind::Closure) && is_type_diagnostic_item(cx, return_ty(cx, hir_id), sym::result_type) {\n             lint_impl_body(cx, span, body);\n         }\n     }"}, {"sha": "aca1ed5ca6563144b4e3e9fc3a925f816a05ffd9", "filename": "clippy_lints/src/partialeq_ne_impl.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36a27ecaacad74f69b21a12bc66b826f11f2d44e/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a27ecaacad74f69b21a12bc66b826f11f2d44e/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs?ref=36a27ecaacad74f69b21a12bc66b826f11f2d44e", "patch": "@@ -35,7 +35,8 @@ impl<'tcx> LateLintPass<'tcx> for PartialEqNeImpl {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n         if_chain! {\n             if let ItemKind::Impl(Impl { of_trait: Some(ref trait_ref), items: impl_items, .. }) = item.kind;\n-            if !is_automatically_derived(&*item.attrs);\n+            let attrs = cx.tcx.hir().attrs(item.hir_id());\n+            if !is_automatically_derived(attrs);\n             if let Some(eq_trait) = cx.tcx.lang_items().eq_trait();\n             if trait_ref.path.res.def_id() == eq_trait;\n             then {"}, {"sha": "ff700aa51460789cc66d0aa7779ce65a24ec0cb2", "filename": "clippy_lints/src/pass_by_ref_or_value.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/36a27ecaacad74f69b21a12bc66b826f11f2d44e/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a27ecaacad74f69b21a12bc66b826f11f2d44e/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs?ref=36a27ecaacad74f69b21a12bc66b826f11f2d44e", "patch": "@@ -224,10 +224,11 @@ impl<'tcx> LateLintPass<'tcx> for PassByRefOrValue {\n         }\n \n         match kind {\n-            FnKind::ItemFn(.., header, _, attrs) => {\n+            FnKind::ItemFn(.., header, _) => {\n                 if header.abi != Abi::Rust {\n                     return;\n                 }\n+                let attrs = cx.tcx.hir().attrs(hir_id);\n                 for a in attrs {\n                     if let Some(meta_items) = a.meta_item_list() {\n                         if a.has_name(sym::proc_macro_derive)\n@@ -239,7 +240,7 @@ impl<'tcx> LateLintPass<'tcx> for PassByRefOrValue {\n                 }\n             },\n             FnKind::Method(..) => (),\n-            FnKind::Closure(..) => return,\n+            FnKind::Closure => return,\n         }\n \n         // Exclude non-inherent impls"}, {"sha": "40c0f1f45895ba0af5ed1341e12d21265bc6f637", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/36a27ecaacad74f69b21a12bc66b826f11f2d44e/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a27ecaacad74f69b21a12bc66b826f11f2d44e/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=36a27ecaacad74f69b21a12bc66b826f11f2d44e", "patch": "@@ -81,7 +81,7 @@ impl<'tcx> LateLintPass<'tcx> for Return {\n             if let Some(stmt) = block.stmts.iter().last();\n             if let StmtKind::Local(local) = &stmt.kind;\n             if local.ty.is_none();\n-            if local.attrs.is_empty();\n+            if cx.tcx.hir().attrs(local.hir_id).is_empty();\n             if let Some(initexpr) = &local.init;\n             if let PatKind::Binding(.., ident, _) = local.pat.kind;\n             if let ExprKind::Path(qpath) = &retexpr.kind;\n@@ -131,7 +131,7 @@ impl<'tcx> LateLintPass<'tcx> for Return {\n         _: HirId,\n     ) {\n         match kind {\n-            FnKind::Closure(_) => {\n+            FnKind::Closure => {\n                 // when returning without value in closure, replace this `return`\n                 // with an empty block to prevent invalid suggestion (see #6501)\n                 let replacement = if let ExprKind::Ret(None) = &body.value.kind {\n@@ -177,7 +177,8 @@ fn check_final_expr<'tcx>(\n         // simple return is always \"bad\"\n         ExprKind::Ret(ref inner) => {\n             // allow `#[cfg(a)] return a; #[cfg(b)] return b;`\n-            if !expr.attrs.iter().any(attr_is_cfg) {\n+            let attrs = cx.tcx.hir().attrs(expr.hir_id);\n+            if !attrs.iter().any(attr_is_cfg) {\n                 let borrows = inner.map_or(false, |inner| last_statement_borrows(cx, inner));\n                 if !borrows {\n                     emit_return_lint("}, {"sha": "8e076397c119a9a25f94f16734d979f6a593790d", "filename": "clippy_lints/src/unnecessary_wraps.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36a27ecaacad74f69b21a12bc66b826f11f2d44e/clippy_lints%2Fsrc%2Funnecessary_wraps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a27ecaacad74f69b21a12bc66b826f11f2d44e/clippy_lints%2Fsrc%2Funnecessary_wraps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_wraps.rs?ref=36a27ecaacad74f69b21a12bc66b826f11f2d44e", "patch": "@@ -66,12 +66,12 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryWraps {\n     ) {\n         // Abort if public function/method or closure.\n         match fn_kind {\n-            FnKind::ItemFn(.., visibility, _) | FnKind::Method(.., Some(visibility), _) => {\n+            FnKind::ItemFn(.., visibility) | FnKind::Method(.., Some(visibility)) => {\n                 if visibility.node.is_pub() {\n                     return;\n                 }\n             },\n-            FnKind::Closure(..) => return,\n+            FnKind::Closure => return,\n             _ => (),\n         }\n "}, {"sha": "3dd190ba440186c2486d6b71151102ea43df1cb5", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/36a27ecaacad74f69b21a12bc66b826f11f2d44e/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a27ecaacad74f69b21a12bc66b826f11f2d44e/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=36a27ecaacad74f69b21a12bc66b826f11f2d44e", "patch": "@@ -2,15 +2,14 @@\n //! to generate a clippy lint detecting said code automatically.\n \n use crate::utils::get_attr;\n-use rustc_ast::ast::{Attribute, LitFloatType, LitKind};\n+use rustc_ast::ast::{LitFloatType, LitKind};\n use rustc_ast::walk_list;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n use rustc_hir::intravisit::{NestedVisitorMap, Visitor};\n use rustc_hir::{BindingAnnotation, Block, Expr, ExprKind, Pat, PatKind, QPath, Stmt, StmtKind, TyKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::hir::map::Map;\n-use rustc_session::Session;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n@@ -66,7 +65,7 @@ fn done() {\n \n impl<'tcx> LateLintPass<'tcx> for Author {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {\n-        if !has_attr(cx.sess(), &item.attrs) {\n+        if !has_attr(cx, item.hir_id()) {\n             return;\n         }\n         prelude();\n@@ -75,7 +74,7 @@ impl<'tcx> LateLintPass<'tcx> for Author {\n     }\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::ImplItem<'_>) {\n-        if !has_attr(cx.sess(), &item.attrs) {\n+        if !has_attr(cx, item.hir_id()) {\n             return;\n         }\n         prelude();\n@@ -84,7 +83,7 @@ impl<'tcx> LateLintPass<'tcx> for Author {\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::TraitItem<'_>) {\n-        if !has_attr(cx.sess(), &item.attrs) {\n+        if !has_attr(cx, item.hir_id()) {\n             return;\n         }\n         prelude();\n@@ -93,7 +92,7 @@ impl<'tcx> LateLintPass<'tcx> for Author {\n     }\n \n     fn check_variant(&mut self, cx: &LateContext<'tcx>, var: &'tcx hir::Variant<'_>) {\n-        if !has_attr(cx.sess(), &var.attrs) {\n+        if !has_attr(cx, var.id) {\n             return;\n         }\n         prelude();\n@@ -103,7 +102,7 @@ impl<'tcx> LateLintPass<'tcx> for Author {\n     }\n \n     fn check_struct_field(&mut self, cx: &LateContext<'tcx>, field: &'tcx hir::StructField<'_>) {\n-        if !has_attr(cx.sess(), &field.attrs) {\n+        if !has_attr(cx, field.hir_id) {\n             return;\n         }\n         prelude();\n@@ -112,7 +111,7 @@ impl<'tcx> LateLintPass<'tcx> for Author {\n     }\n \n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) {\n-        if !has_attr(cx.sess(), &expr.attrs) {\n+        if !has_attr(cx, expr.hir_id) {\n             return;\n         }\n         prelude();\n@@ -121,7 +120,7 @@ impl<'tcx> LateLintPass<'tcx> for Author {\n     }\n \n     fn check_arm(&mut self, cx: &LateContext<'tcx>, arm: &'tcx hir::Arm<'_>) {\n-        if !has_attr(cx.sess(), &arm.attrs) {\n+        if !has_attr(cx, arm.hir_id) {\n             return;\n         }\n         prelude();\n@@ -130,7 +129,7 @@ impl<'tcx> LateLintPass<'tcx> for Author {\n     }\n \n     fn check_stmt(&mut self, cx: &LateContext<'tcx>, stmt: &'tcx hir::Stmt<'_>) {\n-        if !has_attr(cx.sess(), stmt.kind.attrs(|id| cx.tcx.hir().item(id))) {\n+        if !has_attr(cx, stmt.hir_id) {\n             return;\n         }\n         prelude();\n@@ -139,7 +138,7 @@ impl<'tcx> LateLintPass<'tcx> for Author {\n     }\n \n     fn check_foreign_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::ForeignItem<'_>) {\n-        if !has_attr(cx.sess(), &item.attrs) {\n+        if !has_attr(cx, item.hir_id()) {\n             return;\n         }\n         prelude();\n@@ -719,8 +718,9 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n     }\n }\n \n-fn has_attr(sess: &Session, attrs: &[Attribute]) -> bool {\n-    get_attr(sess, attrs, \"author\").count() > 0\n+fn has_attr(cx: &LateContext<'_>, hir_id: hir::HirId) -> bool {\n+    let attrs = cx.tcx.hir().attrs(hir_id);\n+    get_attr(cx.sess(), attrs, \"author\").count() > 0\n }\n \n #[must_use]"}, {"sha": "9e3973e1d51fcc1b76128a5836236b23b41d6fb7", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/36a27ecaacad74f69b21a12bc66b826f11f2d44e/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a27ecaacad74f69b21a12bc66b826f11f2d44e/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=36a27ecaacad74f69b21a12bc66b826f11f2d44e", "patch": "@@ -33,14 +33,14 @@ declare_lint_pass!(DeepCodeInspector => [DEEP_CODE_INSPECTION]);\n \n impl<'tcx> LateLintPass<'tcx> for DeepCodeInspector {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {\n-        if !has_attr(cx.sess(), &item.attrs) {\n+        if !has_attr(cx.sess(), cx.tcx.hir().attrs(item.hir_id())) {\n             return;\n         }\n         print_item(cx, item);\n     }\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::ImplItem<'_>) {\n-        if !has_attr(cx.sess(), &item.attrs) {\n+        if !has_attr(cx.sess(), cx.tcx.hir().attrs(item.hir_id())) {\n             return;\n         }\n         println!(\"impl item `{}`\", item.ident.name);\n@@ -89,14 +89,14 @@ impl<'tcx> LateLintPass<'tcx> for DeepCodeInspector {\n     //\n \n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) {\n-        if !has_attr(cx.sess(), &expr.attrs) {\n+        if !has_attr(cx.sess(), cx.tcx.hir().attrs(expr.hir_id)) {\n             return;\n         }\n         print_expr(cx, expr, 0);\n     }\n \n     fn check_arm(&mut self, cx: &LateContext<'tcx>, arm: &'tcx hir::Arm<'_>) {\n-        if !has_attr(cx.sess(), &arm.attrs) {\n+        if !has_attr(cx.sess(), cx.tcx.hir().attrs(arm.hir_id)) {\n             return;\n         }\n         print_pat(cx, &arm.pat, 1);\n@@ -109,7 +109,7 @@ impl<'tcx> LateLintPass<'tcx> for DeepCodeInspector {\n     }\n \n     fn check_stmt(&mut self, cx: &LateContext<'tcx>, stmt: &'tcx hir::Stmt<'_>) {\n-        if !has_attr(cx.sess(), stmt.kind.attrs(|id| cx.tcx.hir().item(id))) {\n+        if !has_attr(cx.sess(), cx.tcx.hir().attrs(stmt.hir_id)) {\n             return;\n         }\n         match stmt.kind {"}, {"sha": "4cd7ed5c45da3e79277597da183795ecf7c167dc", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/36a27ecaacad74f69b21a12bc66b826f11f2d44e/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a27ecaacad74f69b21a12bc66b826f11f2d44e/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=36a27ecaacad74f69b21a12bc66b826f11f2d44e", "patch": "@@ -61,7 +61,7 @@ use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::Node;\n use rustc_hir::{\n-    def, Arm, Block, Body, Constness, Crate, Expr, ExprKind, FnDecl, HirId, ImplItem, ImplItemKind, Item, ItemKind,\n+    def, Arm, Block, Body, Constness, Expr, ExprKind, FnDecl, HirId, ImplItem, ImplItemKind, Item, ItemKind,\n     MatchSource, Param, Pat, PatKind, Path, PathSegment, QPath, TraitItem, TraitItemKind, TraitRef, TyKind, Unsafety,\n };\n use rustc_infer::infer::TyCtxtInferExt;\n@@ -1510,8 +1510,8 @@ pub fn is_must_use_func_call(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     did.map_or(false, |did| must_use_attr(&cx.tcx.get_attrs(did)).is_some())\n }\n \n-pub fn is_no_std_crate(krate: &Crate<'_>) -> bool {\n-    krate.item.attrs.iter().any(|attr| {\n+pub fn is_no_std_crate(cx: &LateContext<'_>) -> bool {\n+    cx.tcx.hir().attrs(hir::CRATE_HIR_ID).iter().any(|attr| {\n         if let ast::AttrKind::Normal(ref attr, _) = attr.kind {\n             attr.path == sym::no_std\n         } else {"}]}