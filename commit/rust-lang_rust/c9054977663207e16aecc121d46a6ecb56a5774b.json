{"sha": "c9054977663207e16aecc121d46a6ecb56a5774b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5MDU0OTc3NjYzMjA3ZTE2YWVjYzEyMWQ0NmE2ZWNiNTZhNTc3NGI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-05T08:10:48Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-05T08:10:48Z"}, "message": "miri: binary_op_val -> binary_op_imm", "tree": {"sha": "3ccc7f8ac738e64fa6d28886bd46988b04dbb823", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ccc7f8ac738e64fa6d28886bd46988b04dbb823"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9054977663207e16aecc121d46a6ecb56a5774b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9054977663207e16aecc121d46a6ecb56a5774b", "html_url": "https://github.com/rust-lang/rust/commit/c9054977663207e16aecc121d46a6ecb56a5774b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9054977663207e16aecc121d46a6ecb56a5774b/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0117b42f66632f1f0fc08f1cdd8ca264c10bba94", "url": "https://api.github.com/repos/rust-lang/rust/commits/0117b42f66632f1f0fc08f1cdd8ca264c10bba94", "html_url": "https://github.com/rust-lang/rust/commit/0117b42f66632f1f0fc08f1cdd8ca264c10bba94"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "cb2a750f4e3b6cc4a987a5fe88ee6ac31ff9833c", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9054977663207e16aecc121d46a6ecb56a5774b/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9054977663207e16aecc121d46a6ecb56a5774b/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=c9054977663207e16aecc121d46a6ecb56a5774b", "patch": "@@ -140,7 +140,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                     \"unchecked_shr\" => BinOp::Shr,\n                     _ => bug!(\"Already checked for int ops\")\n                 };\n-                let (val, overflowed) = self.binary_op_val(bin_op, l, r)?;\n+                let (val, overflowed) = self.binary_op_imm(bin_op, l, r)?;\n                 if overflowed {\n                     let layout = self.layout_of(substs.type_at(0))?;\n                     let r_val =  r.to_scalar()?.to_bits(layout.size)?;"}, {"sha": "31824d5ec4a93380b2ad428361f36505e682c903", "filename": "src/librustc_mir/interpret/operator.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c9054977663207e16aecc121d46a6ecb56a5774b/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9054977663207e16aecc121d46a6ecb56a5774b/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperator.rs?ref=c9054977663207e16aecc121d46a6ecb56a5774b", "patch": "@@ -28,7 +28,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n         right: ImmTy<'tcx, M::PointerTag>,\n         dest: PlaceTy<'tcx, M::PointerTag>,\n     ) -> EvalResult<'tcx> {\n-        let (val, overflowed) = self.binary_op_val(op, left, right)?;\n+        let (val, overflowed) = self.binary_op_imm(op, left, right)?;\n         let val = Immediate::ScalarPair(val.into(), Scalar::from_bool(overflowed).into());\n         self.write_immediate(val, dest)\n     }\n@@ -42,7 +42,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n         right: ImmTy<'tcx, M::PointerTag>,\n         dest: PlaceTy<'tcx, M::PointerTag>,\n     ) -> EvalResult<'tcx> {\n-        let (val, _overflowed) = self.binary_op_val(op, left, right)?;\n+        let (val, _overflowed) = self.binary_op_imm(op, left, right)?;\n         self.write_scalar(val, dest)\n     }\n }\n@@ -283,9 +283,9 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n     }\n \n     /// Convenience wrapper that's useful when keeping the layout together with the\n-    /// value.\n+    /// immediate value.\n     #[inline]\n-    pub fn binary_op_val(\n+    pub fn binary_op_imm(\n         &self,\n         bin_op: mir::BinOp,\n         left: ImmTy<'tcx, M::PointerTag>,"}, {"sha": "4f92ba400481bfc2759e4f1fab4ba40cb3efd934", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9054977663207e16aecc121d46a6ecb56a5774b/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9054977663207e16aecc121d46a6ecb56a5774b/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=c9054977663207e16aecc121d46a6ecb56a5774b", "patch": "@@ -455,7 +455,7 @@ impl<'a, 'mir, 'tcx> ConstPropagator<'a, 'mir, 'tcx> {\n                 })?;\n                 trace!(\"const evaluating {:?} for {:?} and {:?}\", op, left, right);\n                 let (val, overflow) = self.use_ecx(source_info, |this| {\n-                    this.ecx.binary_op_val(op, l, r)\n+                    this.ecx.binary_op_imm(op, l, r)\n                 })?;\n                 let val = if let Rvalue::CheckedBinaryOp(..) = *rvalue {\n                     Immediate::ScalarPair("}]}