{"sha": "7b98552cc0f37e886ac3d9b911e0cf1173313c53", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiOTg1NTJjYzBmMzdlODg2YWMzZDliOTExZTBjZjExNzMzMTNjNTM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-24T17:17:30Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-24T17:17:30Z"}, "message": "use helper method for determining size of int type", "tree": {"sha": "e0444f0593c6d2feaf09072143667c7e62fdfec3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0444f0593c6d2feaf09072143667c7e62fdfec3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b98552cc0f37e886ac3d9b911e0cf1173313c53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b98552cc0f37e886ac3d9b911e0cf1173313c53", "html_url": "https://github.com/rust-lang/rust/commit/7b98552cc0f37e886ac3d9b911e0cf1173313c53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b98552cc0f37e886ac3d9b911e0cf1173313c53/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9b1554dac889b7294cd9945691652c632e158bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9b1554dac889b7294cd9945691652c632e158bc", "html_url": "https://github.com/rust-lang/rust/commit/b9b1554dac889b7294cd9945691652c632e158bc"}], "stats": {"total": 26, "additions": 11, "deletions": 15}, "files": [{"sha": "63777b4abde3dba97bbcaa95e27fbb8c3b32f6f3", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7b98552cc0f37e886ac3d9b911e0cf1173313c53/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b98552cc0f37e886ac3d9b911e0cf1173313c53/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=7b98552cc0f37e886ac3d9b911e0cf1173313c53", "patch": "@@ -3,13 +3,14 @@ use std::convert::TryFrom;\n use rustc_apfloat::ieee::{Double, Single};\n use rustc_apfloat::{Float, FloatConvert};\n use rustc_ast::ast::FloatTy;\n+use rustc_attr as attr;\n use rustc_middle::mir::interpret::{InterpResult, PointerArithmetic, Scalar};\n use rustc_middle::mir::CastKind;\n use rustc_middle::ty::adjustment::PointerCast;\n-use rustc_middle::ty::layout::TyAndLayout;\n+use rustc_middle::ty::layout::{IntegerExt, TyAndLayout};\n use rustc_middle::ty::{self, Ty, TypeAndMut, TypeFoldable};\n use rustc_span::symbol::sym;\n-use rustc_target::abi::{LayoutOf, Size, Variants};\n+use rustc_target::abi::{Integer, LayoutOf, Variants};\n \n use super::{truncate, FnVal, ImmTy, Immediate, InterpCx, Machine, OpTy, PlaceTy};\n \n@@ -195,13 +196,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         match cast_ty.kind {\n             Int(_) | Uint(_) | RawPtr(_) => {\n                 let size = match cast_ty.kind {\n-                    // FIXME: Isn't there a helper for this? The same pattern occurs below.\n-                    Int(t) => {\n-                        t.bit_width().map(Size::from_bits).unwrap_or_else(|| self.pointer_size())\n-                    }\n-                    Uint(t) => {\n-                        t.bit_width().map(Size::from_bits).unwrap_or_else(|| self.pointer_size())\n-                    }\n+                    Int(t) => Integer::from_attr(self, attr::IntType::SignedInt(t)).size(),\n+                    Uint(t) => Integer::from_attr(self, attr::IntType::UnsignedInt(t)).size(),\n                     RawPtr(_) => self.pointer_size(),\n                     _ => bug!(),\n                 };\n@@ -232,20 +228,20 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         match dest_ty.kind {\n             // float -> uint\n             Uint(t) => {\n-                let width = t.bit_width().unwrap_or_else(|| self.pointer_size().bits());\n+                let size = Integer::from_attr(self, attr::IntType::UnsignedInt(t)).size();\n                 // `to_u128` is a saturating cast, which is what we need\n                 // (https://doc.rust-lang.org/nightly/nightly-rustc/rustc_apfloat/trait.Float.html#method.to_i128_r).\n-                let v = f.to_u128(usize::try_from(width).unwrap()).value;\n+                let v = f.to_u128(size.bits_usize()).value;\n                 // This should already fit the bit width\n-                Scalar::from_uint(v, Size::from_bits(width))\n+                Scalar::from_uint(v, size)\n             }\n             // float -> int\n             Int(t) => {\n-                let width = t.bit_width().unwrap_or_else(|| self.pointer_size().bits());\n+                let size = Integer::from_attr(self, attr::IntType::SignedInt(t)).size();\n                 // `to_i128` is a saturating cast, which is what we need\n                 // (https://doc.rust-lang.org/nightly/nightly-rustc/rustc_apfloat/trait.Float.html#method.to_i128_r).\n-                let v = f.to_i128(usize::try_from(width).unwrap()).value;\n-                Scalar::from_int(v, Size::from_bits(width))\n+                let v = f.to_i128(size.bits_usize()).value;\n+                Scalar::from_int(v, size)\n             }\n             // float -> f32\n             Float(FloatTy::F32) => Scalar::from_f32(f.convert(&mut false).value),"}]}