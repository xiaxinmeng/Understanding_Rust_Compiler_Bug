{"sha": "27aa309b3d0afc094cc4cd44c23e607237403d3d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3YWEzMDliM2QwYWZjMDk0Y2M0Y2Q0NGMyM2U2MDcyMzc0MDNkM2Q=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-02-21T12:07:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-02-21T12:07:25Z"}, "message": "Merge pull request #1556 from sinkuu/take_by_value\n\nLint needless take-by-value", "tree": {"sha": "8012a985b243ee9eaa03e72f26a0d97191778f44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8012a985b243ee9eaa03e72f26a0d97191778f44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27aa309b3d0afc094cc4cd44c23e607237403d3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27aa309b3d0afc094cc4cd44c23e607237403d3d", "html_url": "https://github.com/rust-lang/rust/commit/27aa309b3d0afc094cc4cd44c23e607237403d3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27aa309b3d0afc094cc4cd44c23e607237403d3d/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55ea08102aa2782724e1797d2e37436b1f93300b", "url": "https://api.github.com/repos/rust-lang/rust/commits/55ea08102aa2782724e1797d2e37436b1f93300b", "html_url": "https://github.com/rust-lang/rust/commit/55ea08102aa2782724e1797d2e37436b1f93300b"}, {"sha": "bf21c84629278b862f2df184542aff1e3512a44f", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf21c84629278b862f2df184542aff1e3512a44f", "html_url": "https://github.com/rust-lang/rust/commit/bf21c84629278b862f2df184542aff1e3512a44f"}], "stats": {"total": 521, "additions": 481, "deletions": 40}, "files": [{"sha": "d0d7893a1cbb3ba4a58c5df7020864971bc59047", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/27aa309b3d0afc094cc4cd44c23e607237403d3d/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/27aa309b3d0afc094cc4cd44c23e607237403d3d/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=27aa309b3d0afc094cc4cd44c23e607237403d3d", "patch": "@@ -381,6 +381,7 @@ All notable changes to this project will be documented in this file.\n [`needless_bool`]: https://github.com/Manishearth/rust-clippy/wiki#needless_bool\n [`needless_borrow`]: https://github.com/Manishearth/rust-clippy/wiki#needless_borrow\n [`needless_lifetimes`]: https://github.com/Manishearth/rust-clippy/wiki#needless_lifetimes\n+[`needless_pass_by_value`]: https://github.com/Manishearth/rust-clippy/wiki#needless_pass_by_value\n [`needless_range_loop`]: https://github.com/Manishearth/rust-clippy/wiki#needless_range_loop\n [`needless_return`]: https://github.com/Manishearth/rust-clippy/wiki#needless_return\n [`needless_update`]: https://github.com/Manishearth/rust-clippy/wiki#needless_update"}, {"sha": "2c9e7e3dac9137b50caaea643173b0ed93e6a7e4", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/27aa309b3d0afc094cc4cd44c23e607237403d3d/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/27aa309b3d0afc094cc4cd44c23e607237403d3d/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=27aa309b3d0afc094cc4cd44c23e607237403d3d", "patch": "@@ -180,7 +180,7 @@ transparently:\n \n ## Lints\n \n-There are 191 lints included in this crate:\n+There are 192 lints included in this crate:\n \n name                                                                                                                   | default | triggers on\n -----------------------------------------------------------------------------------------------------------------------|---------|----------------------------------------------------------------------------------------------------------------------------------\n@@ -287,6 +287,7 @@ name\n [needless_bool](https://github.com/Manishearth/rust-clippy/wiki#needless_bool)                                         | warn    | if-statements with plain booleans in the then- and else-clause, e.g. `if p { true } else { false }`\n [needless_borrow](https://github.com/Manishearth/rust-clippy/wiki#needless_borrow)                                     | warn    | taking a reference that is going to be automatically dereferenced\n [needless_lifetimes](https://github.com/Manishearth/rust-clippy/wiki#needless_lifetimes)                               | warn    | using explicit lifetimes for references in function arguments when elision rules would allow omitting them\n+[needless_pass_by_value](https://github.com/Manishearth/rust-clippy/wiki#needless_pass_by_value)                       | warn    | functions taking arguments by value, but not consuming them in its body\n [needless_range_loop](https://github.com/Manishearth/rust-clippy/wiki#needless_range_loop)                             | warn    | for-looping over a range of indices where an iterator over items would do\n [needless_return](https://github.com/Manishearth/rust-clippy/wiki#needless_return)                                     | warn    | using a return statement like `return expr;` where an expression would suffice\n [needless_update](https://github.com/Manishearth/rust-clippy/wiki#needless_update)                                     | warn    | using `Foo { ..base }` when there are no missing fields"}, {"sha": "2ab70da8c734d5ea4d0abef0798e74ebff182b50", "filename": "clippy_lints/src/array_indexing.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/27aa309b3d0afc094cc4cd44c23e607237403d3d/clippy_lints%2Fsrc%2Farray_indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27aa309b3d0afc094cc4cd44c23e607237403d3d/clippy_lints%2Fsrc%2Farray_indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Farray_indexing.rs?ref=27aa309b3d0afc094cc4cd44c23e607237403d3d", "patch": "@@ -83,7 +83,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ArrayIndexing {\n                         .map(|end| constcx.eval(end, ExprTypeChecked))\n                         .map(|v| v.ok());\n \n-                    if let Some((start, end)) = to_const_range(start, end, range.limits, size) {\n+                    if let Some((start, end)) = to_const_range(&start, &end, range.limits, size) {\n                         if start > size || end > size {\n                             utils::span_lint(cx, OUT_OF_BOUNDS_INDEXING, e.span, \"range is out of bounds\");\n                         }\n@@ -109,18 +109,18 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ArrayIndexing {\n \n /// Returns an option containing a tuple with the start and end (exclusive) of the range.\n fn to_const_range(\n-    start: Option<Option<ConstVal>>,\n-    end: Option<Option<ConstVal>>,\n+    start: &Option<Option<ConstVal>>,\n+    end: &Option<Option<ConstVal>>,\n     limits: RangeLimits,\n     array_size: ConstInt\n ) -> Option<(ConstInt, ConstInt)> {\n-    let start = match start {\n+    let start = match *start {\n         Some(Some(ConstVal::Integral(x))) => x,\n         Some(_) => return None,\n         None => ConstInt::Infer(0),\n     };\n \n-    let end = match end {\n+    let end = match *end {\n         Some(Some(ConstVal::Integral(x))) => {\n             if limits == RangeLimits::Closed {\n                 (x + ConstInt::Infer(1)).expect(\"such a big array is not realistic\")"}, {"sha": "46371b938bc7e44d1de8a539a8ffd80b36120a55", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/27aa309b3d0afc094cc4cd44c23e607237403d3d/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27aa309b3d0afc094cc4cd44c23e607237403d3d/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=27aa309b3d0afc094cc4cd44c23e607237403d3d", "patch": "@@ -203,9 +203,9 @@ pub fn lit_to_constant(lit: &LitKind) -> Constant {\n     }\n }\n \n-fn constant_not(o: Constant) -> Option<Constant> {\n+fn constant_not(o: &Constant) -> Option<Constant> {\n     use self::Constant::*;\n-    match o {\n+    match *o {\n         Bool(b) => Some(Bool(!b)),\n         Int(value) => (!value).ok().map(Int),\n         _ => None,\n@@ -216,12 +216,12 @@ fn constant_negate(o: Constant) -> Option<Constant> {\n     use self::Constant::*;\n     match o {\n         Int(value) => (-value).ok().map(Int),\n-        Float(is, ty) => Some(Float(neg_float_str(is), ty)),\n+        Float(is, ty) => Some(Float(neg_float_str(&is), ty)),\n         _ => None,\n     }\n }\n \n-fn neg_float_str(s: String) -> String {\n+fn neg_float_str(s: &str) -> String {\n     if s.starts_with('-') {\n         s[1..].to_owned()\n     } else {\n@@ -271,7 +271,7 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n             },\n             ExprUnary(op, ref operand) => {\n                 self.expr(operand).and_then(|o| match op {\n-                    UnNot => constant_not(o),\n+                    UnNot => constant_not(&o),\n                     UnNeg => constant_negate(o),\n                     UnDeref => Some(o),\n                 })"}, {"sha": "542847dc166d6901b77a34a20e601a13ce8d31a0", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/27aa309b3d0afc094cc4cd44c23e607237403d3d/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27aa309b3d0afc094cc4cd44c23e607237403d3d/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=27aa309b3d0afc094cc4cd44c23e607237403d3d", "patch": "@@ -107,6 +107,7 @@ pub mod mut_reference;\n pub mod mutex_atomic;\n pub mod needless_bool;\n pub mod needless_borrow;\n+pub mod needless_pass_by_value;\n pub mod needless_update;\n pub mod neg_multiply;\n pub mod new_without_default;\n@@ -299,6 +300,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_late_lint_pass(box unused_io_amount::UnusedIoAmount);\n     reg.register_late_lint_pass(box large_enum_variant::LargeEnumVariant::new(conf.enum_variant_size_threshold));\n     reg.register_late_lint_pass(box should_assert_eq::ShouldAssertEq);\n+    reg.register_late_lint_pass(box needless_pass_by_value::NeedlessPassByValue);\n \n     reg.register_lint_group(\"clippy_restrictions\", vec![\n         arithmetic::FLOAT_ARITHMETIC,\n@@ -455,6 +457,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         needless_bool::BOOL_COMPARISON,\n         needless_bool::NEEDLESS_BOOL,\n         needless_borrow::NEEDLESS_BORROW,\n+        needless_pass_by_value::NEEDLESS_PASS_BY_VALUE,\n         needless_update::NEEDLESS_UPDATE,\n         neg_multiply::NEG_MULTIPLY,\n         new_without_default::NEW_WITHOUT_DEFAULT,"}, {"sha": "5fb16cc05eb632182b575feaa8b3feb4394d6d54", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/27aa309b3d0afc094cc4cd44c23e607237403d3d/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27aa309b3d0afc094cc4cd44c23e607237403d3d/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=27aa309b3d0afc094cc4cd44c23e607237403d3d", "patch": "@@ -549,8 +549,8 @@ fn check_for_loop_range<'a, 'tcx>(\n                                        |db| {\n                         multispan_sugg(db,\n                                        \"consider using an iterator\".to_string(),\n-                                       &[(pat.span, &format!(\"({}, <item>)\", ident.node)),\n-                                         (arg.span, &format!(\"{}.iter().enumerate(){}{}\", indexed, take, skip))]);\n+                                       vec![(pat.span, format!(\"({}, <item>)\", ident.node)),\n+                                            (arg.span, format!(\"{}.iter().enumerate(){}{}\", indexed, take, skip))]);\n                     });\n                 } else {\n                     let repl = if starts_at_zero && take.is_empty() {\n@@ -568,7 +568,7 @@ fn check_for_loop_range<'a, 'tcx>(\n                                        |db| {\n                         multispan_sugg(db,\n                                        \"consider using an iterator\".to_string(),\n-                                       &[(pat.span, \"<item>\"), (arg.span, &repl)]);\n+                                       vec![(pat.span, \"<item>\".to_string()), (arg.span, repl)]);\n                     });\n                 }\n             }\n@@ -816,8 +816,8 @@ fn check_for_loop_over_map_kv<'a, 'tcx>(\n                     let map = sugg::Sugg::hir(cx, arg, \"map\");\n                     multispan_sugg(db,\n                                    \"use the corresponding method\".into(),\n-                                   &[(pat_span, &snippet(cx, new_pat_span, kind)),\n-                                     (arg_span, &format!(\"{}.{}s{}()\", map.maybe_par(), kind, mutbl))]);\n+                                   vec![(pat_span, snippet(cx, new_pat_span, kind).into_owned()),\n+                                        (arg_span, format!(\"{}.{}s{}()\", map.maybe_par(), kind, mutbl))]);\n                 });\n             }\n         }"}, {"sha": "5a8ff442262c2108bcb237f9055a5ca325e5318d", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/27aa309b3d0afc094cc4cd44c23e607237403d3d/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27aa309b3d0afc094cc4cd44c23e607237403d3d/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=27aa309b3d0afc094cc4cd44c23e607237403d3d", "patch": "@@ -395,7 +395,7 @@ fn check_match_ref_pats(cx: &LateContext, ex: &Expr, arms: &[Arm], source: Match\n                                \"you don't need to add `&` to both the expression and the patterns\",\n                                |db| {\n                 let inner = Sugg::hir(cx, inner, \"..\");\n-                let template = match_template(expr.span, source, inner);\n+                let template = match_template(expr.span, source, &inner);\n                 db.span_suggestion(expr.span, \"try\", template);\n             });\n         } else {\n@@ -405,7 +405,7 @@ fn check_match_ref_pats(cx: &LateContext, ex: &Expr, arms: &[Arm], source: Match\n                                \"you don't need to add `&` to all patterns\",\n                                |db| {\n                 let ex = Sugg::hir(cx, ex, \"..\");\n-                let template = match_template(expr.span, source, ex.deref());\n+                let template = match_template(expr.span, source, &ex.deref());\n                 db.span_suggestion(expr.span,\n                                    \"instead of prefixing all patterns with `&`, you can dereference the expression\",\n                                    template);\n@@ -509,7 +509,7 @@ fn has_only_ref_pats(arms: &[Arm]) -> bool {\n     mapped.map_or(false, |v| v.iter().any(|el| *el))\n }\n \n-fn match_template(span: Span, source: MatchSource, expr: Sugg) -> String {\n+fn match_template(span: Span, source: MatchSource, expr: &Sugg) -> String {\n     match source {\n         MatchSource::Normal => format!(\"match {} {{ .. }}\", expr),\n         MatchSource::IfLetDesugar { .. } => format!(\"if let .. = {} {{ .. }}\", expr),"}, {"sha": "72399a9e6343ae024617ced7367913d791151025", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "added", "additions": 297, "deletions": 0, "changes": 297, "blob_url": "https://github.com/rust-lang/rust/blob/27aa309b3d0afc094cc4cd44c23e607237403d3d/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27aa309b3d0afc094cc4cd44c23e607237403d3d/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=27aa309b3d0afc094cc4cd44c23e607237403d3d", "patch": "@@ -0,0 +1,297 @@\n+use rustc::hir::*;\n+use rustc::hir::intravisit::FnKind;\n+use rustc::hir::def_id::DefId;\n+use rustc::lint::*;\n+use rustc::ty::{self, TypeFoldable};\n+use rustc::traits;\n+use rustc::middle::expr_use_visitor as euv;\n+use rustc::middle::mem_categorization as mc;\n+use syntax::ast::NodeId;\n+use syntax_pos::Span;\n+use syntax::errors::DiagnosticBuilder;\n+use utils::{in_macro, is_self, is_copy, implements_trait, get_trait_def_id, match_type, snippet, span_lint_and_then,\n+            multispan_sugg, paths};\n+use std::collections::{HashSet, HashMap};\n+\n+/// **What it does:** Checks for functions taking arguments by value, but not consuming them in its\n+/// body.\n+///\n+/// **Why is this bad?** Taking arguments by reference is more flexible and can sometimes avoid\n+/// unnecessary allocations.\n+///\n+/// **Known problems:** Hopefully none.\n+///\n+/// **Example:**\n+/// ```rust\n+/// fn foo(v: Vec<i32>) {\n+///     assert_eq!(v.len(), 42);\n+/// }\n+/// ```\n+declare_lint! {\n+    pub NEEDLESS_PASS_BY_VALUE,\n+    Warn,\n+    \"functions taking arguments by value, but not consuming them in its body\"\n+}\n+\n+pub struct NeedlessPassByValue;\n+\n+impl LintPass for NeedlessPassByValue {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array![NEEDLESS_PASS_BY_VALUE]\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n+    fn check_fn(\n+        &mut self,\n+        cx: &LateContext<'a, 'tcx>,\n+        kind: FnKind<'tcx>,\n+        decl: &'tcx FnDecl,\n+        body: &'tcx Body,\n+        span: Span,\n+        node_id: NodeId\n+    ) {\n+        if in_macro(cx, span) {\n+            return;\n+        }\n+\n+        if !matches!(kind, FnKind::ItemFn(..)) {\n+            return;\n+        }\n+\n+        // Allows these to be passed by value.\n+        let fn_trait = cx.tcx.lang_items.fn_trait().expect(\"failed to find `Fn` trait\");\n+        let asref_trait = get_trait_def_id(cx, &paths::ASREF_TRAIT).expect(\"failed to find `AsRef` trait\");\n+        let borrow_trait = get_trait_def_id(cx, &paths::BORROW_TRAIT).expect(\"failed to find `Borrow` trait\");\n+\n+        let preds: Vec<ty::Predicate> = {\n+            let parameter_env = ty::ParameterEnvironment::for_item(cx.tcx, node_id);\n+            traits::elaborate_predicates(cx.tcx, parameter_env.caller_bounds.clone())\n+                .filter(|p| !p.is_global())\n+                .collect()\n+        };\n+\n+        // Collect moved variables and spans which will need dereferencings from the function body.\n+        let MovedVariablesCtxt { moved_vars, spans_need_deref, .. } = {\n+            let mut ctx = MovedVariablesCtxt::new(cx);\n+            let infcx = cx.tcx.borrowck_fake_infer_ctxt(body.id());\n+            {\n+                let mut v = euv::ExprUseVisitor::new(&mut ctx, &infcx);\n+                v.consume_body(body);\n+            }\n+            ctx\n+        };\n+\n+        let fn_def_id = cx.tcx.hir.local_def_id(node_id);\n+        let param_env = ty::ParameterEnvironment::for_item(cx.tcx, node_id);\n+        let fn_sig = cx.tcx.item_type(fn_def_id).fn_sig();\n+        let fn_sig = cx.tcx.liberate_late_bound_regions(param_env.free_id_outlive, fn_sig);\n+\n+        for ((input, ty), arg) in decl.inputs.iter().zip(fn_sig.inputs()).zip(&body.arguments) {\n+\n+            // Determines whether `ty` implements `Borrow<U>` (U != ty) specifically.\n+            // This is needed due to the `Borrow<T> for T` blanket impl.\n+            let implements_borrow_trait = preds.iter()\n+                .filter_map(|pred| if let ty::Predicate::Trait(ref poly_trait_ref) = *pred {\n+                    Some(poly_trait_ref.skip_binder())\n+                } else {\n+                    None\n+                })\n+                .filter(|tpred| tpred.def_id() == borrow_trait && &tpred.self_ty() == ty)\n+                .any(|tpred| &tpred.input_types().nth(1).expect(\"Borrow trait must have an parameter\") != ty);\n+\n+            if_let_chain! {[\n+                !is_self(arg),\n+                !ty.is_mutable_pointer(),\n+                !is_copy(cx, ty, node_id),\n+                !implements_trait(cx, ty, fn_trait, &[], Some(node_id)),\n+                !implements_trait(cx, ty, asref_trait, &[], Some(node_id)),\n+                !implements_borrow_trait,\n+\n+                let PatKind::Binding(mode, defid, ..) = arg.pat.node,\n+                !moved_vars.contains(&defid),\n+            ], {\n+                // Note: `toplevel_ref_arg` warns if `BindByRef`\n+                let m = match mode {\n+                    BindingMode::BindByRef(m) | BindingMode::BindByValue(m) => m,\n+                };\n+                if m == Mutability::MutMutable {\n+                    continue;\n+                }\n+\n+                // Suggestion logic\n+                let sugg = |db: &mut DiagnosticBuilder| {\n+                    let deref_span = spans_need_deref.get(&defid);\n+                    if_let_chain! {[\n+                        match_type(cx, ty, &paths::VEC),\n+                        let TyPath(QPath::Resolved(_, ref path)) = input.node,\n+                        let Some(elem_ty) = path.segments.iter()\n+                            .find(|seg| &*seg.name.as_str() == \"Vec\")\n+                            .map(|ps| ps.parameters.types()[0]),\n+                    ], {\n+                        let slice_ty = format!(\"&[{}]\", snippet(cx, elem_ty.span, \"_\"));\n+                        db.span_suggestion(input.span,\n+                                        &format!(\"consider changing the type to `{}`\", slice_ty),\n+                                        slice_ty);\n+                        assert!(deref_span.is_none());\n+                        return; // `Vec` and `String` cannot be destructured - no need for `*` suggestion\n+                    }}\n+\n+                    if match_type(cx, ty, &paths::STRING) {\n+                        db.span_suggestion(input.span,\n+                                           \"consider changing the type to `&str`\",\n+                                           \"&str\".to_string());\n+                        assert!(deref_span.is_none());\n+                        return;\n+                    }\n+\n+                    let mut spans = vec![(input.span, format!(\"&{}\", snippet(cx, input.span, \"_\")))];\n+\n+                    // Suggests adding `*` to dereference the added reference.\n+                    if let Some(deref_span) = deref_span {\n+                        spans.extend(deref_span.iter().cloned()\n+                                     .map(|span| (span, format!(\"*{}\", snippet(cx, span, \"<expr>\")))));\n+                        spans.sort_by_key(|&(span, _)| span);\n+                    }\n+                    multispan_sugg(db, \"consider taking a reference instead\".to_string(), spans);\n+                };\n+\n+                span_lint_and_then(cx,\n+                          NEEDLESS_PASS_BY_VALUE,\n+                          input.span,\n+                          \"this argument is passed by value, but not consumed in the function body\",\n+                          sugg);\n+            }}\n+        }\n+    }\n+}\n+\n+struct MovedVariablesCtxt<'a, 'tcx: 'a> {\n+    cx: &'a LateContext<'a, 'tcx>,\n+    moved_vars: HashSet<DefId>,\n+    /// Spans which need to be prefixed with `*` for dereferencing the suggested additional\n+    /// reference.\n+    spans_need_deref: HashMap<DefId, HashSet<Span>>,\n+}\n+\n+impl<'a, 'tcx: 'a> MovedVariablesCtxt<'a, 'tcx> {\n+    fn new(cx: &'a LateContext<'a, 'tcx>) -> Self {\n+        MovedVariablesCtxt {\n+            cx: cx,\n+            moved_vars: HashSet::new(),\n+            spans_need_deref: HashMap::new(),\n+        }\n+    }\n+\n+    fn move_common(&mut self, _consume_id: NodeId, _span: Span, cmt: mc::cmt<'tcx>) {\n+        let cmt = unwrap_downcast_or_interior(cmt);\n+\n+        if_let_chain! {[\n+            let mc::Categorization::Local(vid) = cmt.cat,\n+            let Some(def_id) = self.cx.tcx.hir.opt_local_def_id(vid),\n+        ], {\n+                self.moved_vars.insert(def_id);\n+        }}\n+    }\n+\n+    fn non_moving_pat(&mut self, matched_pat: &Pat, cmt: mc::cmt<'tcx>) {\n+        let cmt = unwrap_downcast_or_interior(cmt);\n+\n+        if_let_chain! {[\n+            let mc::Categorization::Local(vid) = cmt.cat,\n+            let Some(def_id) = self.cx.tcx.hir.opt_local_def_id(vid),\n+        ], {\n+            let mut id = matched_pat.id;\n+            loop {\n+                let parent = self.cx.tcx.hir.get_parent_node(id);\n+                if id == parent {\n+                    // no parent\n+                    return;\n+                }\n+                id = parent;\n+\n+                if let Some(node) = self.cx.tcx.hir.find(id) {\n+                    match node {\n+                        map::Node::NodeExpr(e) => {\n+                            // `match` and `if let`\n+                            if let ExprMatch(ref c, ..) = e.node {\n+                                self.spans_need_deref\n+                                    .entry(def_id)\n+                                    .or_insert_with(HashSet::new)\n+                                    .insert(c.span);\n+                            }\n+                        }\n+\n+                        map::Node::NodeStmt(s) => {\n+                            // `let <pat> = x;`\n+                            if_let_chain! {[\n+                                let StmtDecl(ref decl, _) = s.node,\n+                                let DeclLocal(ref local) = decl.node,\n+                            ], {\n+                                self.spans_need_deref\n+                                    .entry(def_id)\n+                                    .or_insert_with(HashSet::new)\n+                                    .insert(local.init\n+                                        .as_ref()\n+                                        .map(|e| e.span)\n+                                        .expect(\"`let` stmt without init aren't caught by match_pat\"));\n+                            }}\n+                        }\n+\n+                        _ => {}\n+                    }\n+                }\n+            }\n+        }}\n+    }\n+}\n+\n+impl<'a, 'tcx: 'a> euv::Delegate<'tcx> for MovedVariablesCtxt<'a, 'tcx> {\n+    fn consume(&mut self, consume_id: NodeId, consume_span: Span, cmt: mc::cmt<'tcx>, mode: euv::ConsumeMode) {\n+        if let euv::ConsumeMode::Move(_) = mode {\n+            self.move_common(consume_id, consume_span, cmt);\n+        }\n+    }\n+\n+    fn matched_pat(&mut self, matched_pat: &Pat, cmt: mc::cmt<'tcx>, mode: euv::MatchMode) {\n+        if let euv::MatchMode::MovingMatch = mode {\n+            self.move_common(matched_pat.id, matched_pat.span, cmt);\n+        } else {\n+            self.non_moving_pat(matched_pat, cmt);\n+        }\n+    }\n+\n+    fn consume_pat(&mut self, consume_pat: &Pat, cmt: mc::cmt<'tcx>, mode: euv::ConsumeMode) {\n+        if let euv::ConsumeMode::Move(_) = mode {\n+            self.move_common(consume_pat.id, consume_pat.span, cmt);\n+        }\n+    }\n+\n+    fn borrow(\n+        &mut self,\n+        _: NodeId,\n+        _: Span,\n+        _: mc::cmt<'tcx>,\n+        _: &'tcx ty::Region,\n+        _: ty::BorrowKind,\n+        _: euv::LoanCause\n+    ) {\n+    }\n+\n+    fn mutate(&mut self, _: NodeId, _: Span, _: mc::cmt<'tcx>, _: euv::MutateMode) {}\n+\n+    fn decl_without_init(&mut self, _: NodeId, _: Span) {}\n+}\n+\n+\n+fn unwrap_downcast_or_interior(mut cmt: mc::cmt) -> mc::cmt {\n+    loop {\n+        match cmt.cat.clone() {\n+            mc::Categorization::Downcast(c, _) |\n+            mc::Categorization::Interior(c, _) => {\n+                cmt = c;\n+            },\n+            _ => return cmt,\n+        }\n+    }\n+}"}, {"sha": "44d4963a98d3e9c8c7c55615760bf9f11ed5e9f7", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27aa309b3d0afc094cc4cd44c23e607237403d3d/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27aa309b3d0afc094cc4cd44c23e607237403d3d/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=27aa309b3d0afc094cc4cd44c23e607237403d3d", "patch": "@@ -573,10 +573,10 @@ pub fn span_lint_and_then<'a, 'tcx: 'a, T: LintContext<'tcx>, F>(\n ///\n /// Note: in the JSON format (used by `compiletest_rs`), the help message will appear once per\n /// replacement. In human-readable format though, it only appears once before the whole suggestion.\n-pub fn multispan_sugg(db: &mut DiagnosticBuilder, help_msg: String, sugg: &[(Span, &str)]) {\n+pub fn multispan_sugg(db: &mut DiagnosticBuilder, help_msg: String, sugg: Vec<(Span, String)>) {\n     let sugg = rustc_errors::RenderSpan::Suggestion(rustc_errors::CodeSuggestion {\n         msp: MultiSpan::from_spans(sugg.iter().map(|&(span, _)| span).collect()),\n-        substitutes: sugg.iter().map(|&(_, subs)| subs.to_owned()).collect(),\n+        substitutes: sugg.into_iter().map(|(_, subs)| subs).collect(),\n     });\n \n     let sub = rustc_errors::SubDiagnostic {"}, {"sha": "57d2e5a33f102dd6ace1ef27800aa13cb67e2d2f", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27aa309b3d0afc094cc4cd44c23e607237403d3d/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27aa309b3d0afc094cc4cd44c23e607237403d3d/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=27aa309b3d0afc094cc4cd44c23e607237403d3d", "patch": "@@ -1,7 +1,9 @@\n //! This module contains paths to types and functions Clippy needs to know about.\n \n+pub const ASREF_TRAIT: [&'static str; 3] = [\"core\", \"convert\", \"AsRef\"];\n pub const BEGIN_PANIC: [&'static str; 3] = [\"std\", \"panicking\", \"begin_panic\"];\n pub const BINARY_HEAP: [&'static str; 3] = [\"collections\", \"binary_heap\", \"BinaryHeap\"];\n+pub const BORROW_TRAIT: [&'static str; 3] = [\"core\", \"borrow\", \"Borrow\"];\n pub const BOX: [&'static str; 3] = [\"std\", \"boxed\", \"Box\"];\n pub const BOX_NEW: [&'static str; 4] = [\"std\", \"boxed\", \"Box\", \"new\"];\n pub const BTREEMAP: [&'static str; 4] = [\"collections\", \"btree\", \"map\", \"BTreeMap\"];"}, {"sha": "b4ae42497fe9dd8b55a085bea889272ea69f9062", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27aa309b3d0afc094cc4cd44c23e607237403d3d/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27aa309b3d0afc094cc4cd44c23e607237403d3d/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=27aa309b3d0afc094cc4cd44c23e607237403d3d", "patch": "@@ -301,7 +301,7 @@ pub fn make_binop(op: ast::BinOpKind, lhs: &Sugg, rhs: &Sugg) -> Sugg<'static> {\n     make_assoc(AssocOp::from_ast_binop(op), lhs, rhs)\n }\n \n-#[derive(PartialEq, Eq)]\n+#[derive(PartialEq, Eq, Clone, Copy)]\n /// Operator associativity.\n enum Associativity {\n     /// The operator is both left-associative and right-associative."}, {"sha": "2d6c8ea384bdc18f3d654bbd172238dcda24b2de", "filename": "tests/issue-825.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27aa309b3d0afc094cc4cd44c23e607237403d3d/tests%2Fissue-825.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27aa309b3d0afc094cc4cd44c23e607237403d3d/tests%2Fissue-825.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fissue-825.rs?ref=27aa309b3d0afc094cc4cd44c23e607237403d3d", "patch": "@@ -4,7 +4,7 @@\n #![allow(warnings)]\n \n // this should compile in a reasonable amount of time\n-fn rust_type_id(name: String) {\n+fn rust_type_id(name: &str) {\n     if \"bool\" == &name[..] || \"uint\" == &name[..] || \"u8\" == &name[..] || \"u16\" == &name[..] ||\n        \"u32\" == &name[..] || \"f32\" == &name[..] || \"f64\" == &name[..] || \"i8\" == &name[..] ||\n        \"i16\" == &name[..] || \"i32\" == &name[..] ||"}, {"sha": "3482237bd0bc95173f81ae796cdb7770e8804a82", "filename": "tests/ui/absurd-extreme-comparisons.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27aa309b3d0afc094cc4cd44c23e607237403d3d/tests%2Fui%2Fabsurd-extreme-comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27aa309b3d0afc094cc4cd44c23e607237403d3d/tests%2Fui%2Fabsurd-extreme-comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fabsurd-extreme-comparisons.rs?ref=27aa309b3d0afc094cc4cd44c23e607237403d3d", "patch": "@@ -2,7 +2,7 @@\n #![plugin(clippy)]\n \n #![deny(absurd_extreme_comparisons)]\n-#![allow(unused, eq_op, no_effect, unnecessary_operation)]\n+#![allow(unused, eq_op, no_effect, unnecessary_operation, needless_pass_by_value)]\n \n fn main() {\n     const Z: u32 = 0;"}, {"sha": "836ac0fd37fac75e8455f5a7c52e193035ce2d85", "filename": "tests/ui/box_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27aa309b3d0afc094cc4cd44c23e607237403d3d/tests%2Fui%2Fbox_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27aa309b3d0afc094cc4cd44c23e607237403d3d/tests%2Fui%2Fbox_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox_vec.rs?ref=27aa309b3d0afc094cc4cd44c23e607237403d3d", "patch": "@@ -2,7 +2,7 @@\n #![plugin(clippy)]\n \n #![deny(clippy)]\n-#![allow(boxed_local)]\n+#![allow(boxed_local, needless_pass_by_value)]\n #![allow(blacklisted_name)]\n \n macro_rules! boxit {"}, {"sha": "f3b9e0a03af8ae88f62e3bfd70768cda94610ae5", "filename": "tests/ui/complex_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27aa309b3d0afc094cc4cd44c23e607237403d3d/tests%2Fui%2Fcomplex_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27aa309b3d0afc094cc4cd44c23e607237403d3d/tests%2Fui%2Fcomplex_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcomplex_types.rs?ref=27aa309b3d0afc094cc4cd44c23e607237403d3d", "patch": "@@ -1,7 +1,7 @@\n #![feature(plugin)]\n #![plugin(clippy)]\n #![deny(clippy)]\n-#![allow(unused)]\n+#![allow(unused, needless_pass_by_value)]\n #![feature(associated_consts, associated_type_defaults)]\n \n type Alias = Vec<Vec<Box<(u32, u32, u32, u32)>>>; // no warning here"}, {"sha": "2a3cefcbc1f420b2d57026ffe87bdf0fbee96be6", "filename": "tests/ui/dlist.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27aa309b3d0afc094cc4cd44c23e607237403d3d/tests%2Fui%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27aa309b3d0afc094cc4cd44c23e607237403d3d/tests%2Fui%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdlist.rs?ref=27aa309b3d0afc094cc4cd44c23e607237403d3d", "patch": "@@ -4,7 +4,7 @@\n \n #![plugin(clippy)]\n #![deny(clippy)]\n-#![allow(dead_code)]\n+#![allow(dead_code, needless_pass_by_value)]\n \n extern crate collections;\n use collections::linked_list::LinkedList;"}, {"sha": "97c6df8563e504fd48df21bd2a0ff1b3e0f0cf76", "filename": "tests/ui/drop_forget_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27aa309b3d0afc094cc4cd44c23e607237403d3d/tests%2Fui%2Fdrop_forget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27aa309b3d0afc094cc4cd44c23e607237403d3d/tests%2Fui%2Fdrop_forget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_forget_ref.rs?ref=27aa309b3d0afc094cc4cd44c23e607237403d3d", "patch": "@@ -2,7 +2,7 @@\n #![plugin(clippy)]\n \n #![deny(drop_ref, forget_ref)]\n-#![allow(toplevel_ref_arg, similar_names)]\n+#![allow(toplevel_ref_arg, similar_names, needless_pass_by_value)]\n \n use std::mem::{drop, forget};\n "}, {"sha": "090221ba7a83f1db766827772589c6d30097bf2d", "filename": "tests/ui/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27aa309b3d0afc094cc4cd44c23e607237403d3d/tests%2Fui%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27aa309b3d0afc094cc4cd44c23e607237403d3d/tests%2Fui%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fentry.rs?ref=27aa309b3d0afc094cc4cd44c23e607237403d3d", "patch": "@@ -1,6 +1,6 @@\n #![feature(plugin)]\n #![plugin(clippy)]\n-#![allow(unused)]\n+#![allow(unused, needless_pass_by_value)]\n \n #![deny(map_entry)]\n "}, {"sha": "d333b938a3250c418942c0f6a9af1551df561964", "filename": "tests/ui/eta.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27aa309b3d0afc094cc4cd44c23e607237403d3d/tests%2Fui%2Feta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27aa309b3d0afc094cc4cd44c23e607237403d3d/tests%2Fui%2Feta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.rs?ref=27aa309b3d0afc094cc4cd44c23e607237403d3d", "patch": "@@ -1,6 +1,6 @@\n #![feature(plugin)]\n #![plugin(clippy)]\n-#![allow(unknown_lints, unused, no_effect, redundant_closure_call, many_single_char_names)]\n+#![allow(unknown_lints, unused, no_effect, redundant_closure_call, many_single_char_names, needless_pass_by_value)]\n #![deny(redundant_closure)]\n \n fn main() {"}, {"sha": "f953c0ad3d267544c2bdd666e7a993406e4c9742", "filename": "tests/ui/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27aa309b3d0afc094cc4cd44c23e607237403d3d/tests%2Fui%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27aa309b3d0afc094cc4cd44c23e607237403d3d/tests%2Fui%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes.rs?ref=27aa309b3d0afc094cc4cd44c23e607237403d3d", "patch": "@@ -2,7 +2,7 @@\n #![plugin(clippy)]\n \n #![deny(needless_lifetimes, unused_lifetimes)]\n-#![allow(dead_code)]\n+#![allow(dead_code, needless_pass_by_value)]\n \n fn distinct_lifetimes<'a, 'b>(_x: &'a u8, _y: &'b u8, _z: u8) { }\n "}, {"sha": "5caf8017f96adf8d1f2b257512dd326cf9315b63", "filename": "tests/ui/needless_pass_by_value.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/27aa309b3d0afc094cc4cd44c23e607237403d3d/tests%2Fui%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27aa309b3d0afc094cc4cd44c23e607237403d3d/tests%2Fui%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_pass_by_value.rs?ref=27aa309b3d0afc094cc4cd44c23e607237403d3d", "patch": "@@ -0,0 +1,62 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#![deny(needless_pass_by_value)]\n+#![allow(dead_code, single_match, if_let_redundant_pattern_matching, many_single_char_names)]\n+\n+// `v` should be warned\n+// `w`, `x` and `y` are allowed (moved or mutated)\n+fn foo<T: Default>(v: Vec<T>, w: Vec<T>, mut x: Vec<T>, y: Vec<T>) -> Vec<T> {\n+    assert_eq!(v.len(), 42);\n+\n+    consume(w);\n+\n+    x.push(T::default());\n+\n+    y\n+}\n+\n+fn consume<T>(_: T) {}\n+\n+struct Wrapper(String);\n+\n+fn bar(x: String, y: Wrapper) {\n+    assert_eq!(x.len(), 42);\n+    assert_eq!(y.0.len(), 42);\n+}\n+\n+// U implements `Borrow<U>`, but should be warned correctly\n+fn test_borrow_trait<T: std::borrow::Borrow<str>, U>(t: T, u: U) {\n+    println!(\"{}\", t.borrow());\n+    consume(&u);\n+}\n+\n+// ok\n+fn test_fn<F: Fn(i32) -> i32>(f: F) {\n+    f(1);\n+}\n+\n+// x should be warned, but y is ok\n+fn test_match(x: Option<Option<String>>, y: Option<Option<String>>) {\n+    match x {\n+        Some(Some(_)) => 1, // not moved\n+        _ => 0,\n+    };\n+\n+    match y {\n+        Some(Some(s)) => consume(s), // moved\n+        _ => (),\n+    };\n+}\n+\n+// x and y should be warned, but z is ok\n+fn test_destructure(x: Wrapper, y: Wrapper, z: Wrapper) {\n+    let Wrapper(s) = z; // moved\n+    let Wrapper(ref t) = y; // not moved\n+    let Wrapper(_) = y; // still not moved\n+\n+    assert_eq!(x.0.len(), s.len());\n+    println!(\"{}\", t);\n+}\n+\n+fn main() {}"}, {"sha": "88a424a9696ae10b0a4b5878e76065c28a8e6d8a", "filename": "tests/ui/needless_pass_by_value.stderr", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/27aa309b3d0afc094cc4cd44c23e607237403d3d/tests%2Fui%2Fneedless_pass_by_value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27aa309b3d0afc094cc4cd44c23e607237403d3d/tests%2Fui%2Fneedless_pass_by_value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_pass_by_value.stderr?ref=27aa309b3d0afc094cc4cd44c23e607237403d3d", "patch": "@@ -0,0 +1,74 @@\n+error: this argument is passed by value, but not consumed in the function body\n+ --> $DIR/needless_pass_by_value.rs:9:23\n+  |\n+9 | fn foo<T: Default>(v: Vec<T>, w: Vec<T>, mut x: Vec<T>, y: Vec<T>) -> Vec<T> {\n+  |                       ^^^^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/needless_pass_by_value.rs:4:9\n+  |\n+4 | #![deny(needless_pass_by_value)]\n+  |         ^^^^^^^^^^^^^^^^^^^^^^\n+help: consider changing the type to `&[T]`\n+  | fn foo<T: Default>(v: &[T], w: Vec<T>, mut x: Vec<T>, y: Vec<T>) -> Vec<T> {\n+\n+error: this argument is passed by value, but not consumed in the function body\n+  --> $DIR/needless_pass_by_value.rs:23:11\n+   |\n+23 | fn bar(x: String, y: Wrapper) {\n+   |           ^^^^^^\n+   |\n+help: consider changing the type to `&str`\n+   | fn bar(x: &str, y: Wrapper) {\n+\n+error: this argument is passed by value, but not consumed in the function body\n+  --> $DIR/needless_pass_by_value.rs:23:22\n+   |\n+23 | fn bar(x: String, y: Wrapper) {\n+   |                      ^^^^^^^\n+   |\n+help: consider taking a reference instead\n+   | fn bar(x: String, y: &Wrapper) {\n+\n+error: this argument is passed by value, but not consumed in the function body\n+  --> $DIR/needless_pass_by_value.rs:29:63\n+   |\n+29 | fn test_borrow_trait<T: std::borrow::Borrow<str>, U>(t: T, u: U) {\n+   |                                                               ^\n+   |\n+help: consider taking a reference instead\n+   | fn test_borrow_trait<T: std::borrow::Borrow<str>, U>(t: T, u: &U) {\n+\n+error: this argument is passed by value, but not consumed in the function body\n+  --> $DIR/needless_pass_by_value.rs:40:18\n+   |\n+40 | fn test_match(x: Option<Option<String>>, y: Option<Option<String>>) {\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: consider taking a reference instead\n+   | fn test_match(x: &Option<Option<String>>, y: Option<Option<String>>) {\n+   |     match *x {\n+\n+error: this argument is passed by value, but not consumed in the function body\n+  --> $DIR/needless_pass_by_value.rs:53:24\n+   |\n+53 | fn test_destructure(x: Wrapper, y: Wrapper, z: Wrapper) {\n+   |                        ^^^^^^^\n+   |\n+help: consider taking a reference instead\n+   | fn test_destructure(x: &Wrapper, y: Wrapper, z: Wrapper) {\n+\n+error: this argument is passed by value, but not consumed in the function body\n+  --> $DIR/needless_pass_by_value.rs:53:36\n+   |\n+53 | fn test_destructure(x: Wrapper, y: Wrapper, z: Wrapper) {\n+   |                                    ^^^^^^^\n+   |\n+help: consider taking a reference instead\n+   | fn test_destructure(x: Wrapper, y: &Wrapper, z: Wrapper) {\n+   |     let Wrapper(s) = z; // moved\n+   |     let Wrapper(ref t) = *y; // not moved\n+   |     let Wrapper(_) = *y; // still not moved\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "e6144f0027aeab6a0072d4349cfac6e43db1082d", "filename": "tests/ui/should_assert_eq.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/27aa309b3d0afc094cc4cd44c23e607237403d3d/tests%2Fui%2Fshould_assert_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27aa309b3d0afc094cc4cd44c23e607237403d3d/tests%2Fui%2Fshould_assert_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshould_assert_eq.rs?ref=27aa309b3d0afc094cc4cd44c23e607237403d3d", "patch": "@@ -1,6 +1,7 @@\n #![feature(plugin)]\n #![plugin(clippy)]\n \n+#![allow(needless_pass_by_value)]\n #![deny(should_assert_eq)]\n \n #[derive(PartialEq, Eq)]"}, {"sha": "6cd729e4035dc5588af4b642197ef482b88b37e0", "filename": "tests/ui/should_assert_eq.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/27aa309b3d0afc094cc4cd44c23e607237403d3d/tests%2Fui%2Fshould_assert_eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27aa309b3d0afc094cc4cd44c23e607237403d3d/tests%2Fui%2Fshould_assert_eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshould_assert_eq.stderr?ref=27aa309b3d0afc094cc4cd44c23e607237403d3d", "patch": "@@ -1,28 +1,28 @@\n error: use `assert_eq` for better reporting\n-  --> $DIR/should_assert_eq.rs:13:5\n+  --> $DIR/should_assert_eq.rs:14:5\n    |\n-13 |     assert!(1 == 2);\n+14 |     assert!(1 == 2);\n    |     ^^^^^^^^^^^^^^^^\n    |\n note: lint level defined here\n-  --> $DIR/should_assert_eq.rs:4:9\n+  --> $DIR/should_assert_eq.rs:5:9\n    |\n-4  | #![deny(should_assert_eq)]\n+5  | #![deny(should_assert_eq)]\n    |         ^^^^^^^^^^^^^^^^\n    = note: this error originates in a macro outside of the current crate\n \n error: use `assert_eq` for better reporting\n-  --> $DIR/should_assert_eq.rs:14:5\n+  --> $DIR/should_assert_eq.rs:15:5\n    |\n-14 |     assert!(Debug(1) == Debug(2));\n+15 |     assert!(Debug(1) == Debug(2));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in a macro outside of the current crate\n \n error: use `assert_eq` for better reporting\n-  --> $DIR/should_assert_eq.rs:21:5\n+  --> $DIR/should_assert_eq.rs:22:5\n    |\n-21 |     assert!(x == y);\n+22 |     assert!(x == y);\n    |     ^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in a macro outside of the current crate"}, {"sha": "b4462a87ab475c4814a598ca136f75b317d9490c", "filename": "tests/ui/unused_lt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27aa309b3d0afc094cc4cd44c23e607237403d3d/tests%2Fui%2Funused_lt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27aa309b3d0afc094cc4cd44c23e607237403d3d/tests%2Fui%2Funused_lt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_lt.rs?ref=27aa309b3d0afc094cc4cd44c23e607237403d3d", "patch": "@@ -1,6 +1,6 @@\n #![feature(plugin)]\n #![plugin(clippy)]\n-#![allow(unused, dead_code, needless_lifetimes)]\n+#![allow(unused, dead_code, needless_lifetimes, needless_pass_by_value)]\n #![deny(unused_lifetimes)]\n \n fn empty() {"}]}