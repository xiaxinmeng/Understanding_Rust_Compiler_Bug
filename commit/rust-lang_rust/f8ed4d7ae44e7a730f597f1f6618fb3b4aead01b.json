{"sha": "f8ed4d7ae44e7a730f597f1f6618fb3b4aead01b", "node_id": "C_kwDOAAsO6NoAKGY4ZWQ0ZDdhZTQ0ZTdhNzMwZjU5N2YxZjY2MThmYjNiNGFlYWQwMWI", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-01-21T17:47:37Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-01-21T18:03:36Z"}, "message": "Use lang item resolution instead of known paths", "tree": {"sha": "32f3397e5a9cfaa3d88af26f94a12d4764abe381", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32f3397e5a9cfaa3d88af26f94a12d4764abe381"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8ed4d7ae44e7a730f597f1f6618fb3b4aead01b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8ed4d7ae44e7a730f597f1f6618fb3b4aead01b", "html_url": "https://github.com/rust-lang/rust/commit/f8ed4d7ae44e7a730f597f1f6618fb3b4aead01b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8ed4d7ae44e7a730f597f1f6618fb3b4aead01b/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15358818363f66fc8b99e3711e6eb99a5e8684b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/15358818363f66fc8b99e3711e6eb99a5e8684b9", "html_url": "https://github.com/rust-lang/rust/commit/15358818363f66fc8b99e3711e6eb99a5e8684b9"}], "stats": {"total": 246, "additions": 66, "deletions": 180}, "files": [{"sha": "8eae2e92f4262676727de7fad6daad606ac14d89", "filename": "crates/hir-def/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8ed4d7ae44e7a730f597f1f6618fb3b4aead01b/crates%2Fhir-def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ed4d7ae44e7a730f597f1f6618fb3b4aead01b/crates%2Fhir-def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Flib.rs?ref=f8ed4d7ae44e7a730f597f1f6618fb3b4aead01b", "patch": "@@ -634,6 +634,7 @@ pub trait Lookup {\n pub trait HasModule {\n     fn module(&self, db: &dyn db::DefDatabase) -> ModuleId;\n }\n+\n impl HasModule for ItemContainerId {\n     fn module(&self, db: &dyn db::DefDatabase) -> ModuleId {\n         match *self {"}, {"sha": "3286dcb5afd7eed31db7b6195e1f63b4eb0e49e3", "filename": "crates/hir-ty/src/diagnostics/expr.rs", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/f8ed4d7ae44e7a730f597f1f6618fb3b4aead01b/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ed4d7ae44e7a730f597f1f6618fb3b4aead01b/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Fexpr.rs?ref=f8ed4d7ae44e7a730f597f1f6618fb3b4aead01b", "patch": "@@ -5,7 +5,9 @@\n use std::fmt;\n use std::sync::Arc;\n \n-use hir_def::{path::path, resolver::HasResolver, AdtId, AssocItemId, DefWithBodyId, HasModule};\n+use hir_def::lang_item::LangItem;\n+use hir_def::{resolver::HasResolver, AdtId, AssocItemId, DefWithBodyId, HasModule};\n+use hir_def::{ItemContainerId, Lookup};\n use hir_expand::name;\n use itertools::Either;\n use itertools::Itertools;\n@@ -245,26 +247,25 @@ struct FilterMapNextChecker {\n impl FilterMapNextChecker {\n     fn new(resolver: &hir_def::resolver::Resolver, db: &dyn HirDatabase) -> Self {\n         // Find and store the FunctionIds for Iterator::filter_map and Iterator::next\n-        let iterator_path = path![core::iter::Iterator];\n-        let mut filter_map_function_id = None;\n-        let mut next_function_id = None;\n-\n-        if let Some(iterator_trait_id) = resolver.resolve_known_trait(db.upcast(), &iterator_path) {\n-            let iterator_trait_items = &db.trait_data(iterator_trait_id).items;\n-            for item in iterator_trait_items.iter() {\n-                if let (name, AssocItemId::FunctionId(id)) = item {\n-                    if *name == name![filter_map] {\n-                        filter_map_function_id = Some(*id);\n+        let (next_function_id, filter_map_function_id) = match db\n+            .lang_item(resolver.krate(), LangItem::IteratorNext)\n+            .and_then(|it| it.as_function())\n+        {\n+            Some(next_function_id) => (\n+                Some(next_function_id),\n+                match next_function_id.lookup(db.upcast()).container {\n+                    ItemContainerId::TraitId(iterator_trait_id) => {\n+                        let iterator_trait_items = &db.trait_data(iterator_trait_id).items;\n+                        iterator_trait_items.iter().find_map(|(name, it)| match it {\n+                            &AssocItemId::FunctionId(id) if *name == name![filter_map] => Some(id),\n+                            _ => None,\n+                        })\n                     }\n-                    if *name == name![next] {\n-                        next_function_id = Some(*id);\n-                    }\n-                }\n-                if filter_map_function_id.is_some() && next_function_id.is_some() {\n-                    break;\n-                }\n-            }\n-        }\n+                    _ => None,\n+                },\n+            ),\n+            None => (None, None),\n+        };\n         Self { filter_map_function_id, next_function_id, prev_filter_map_expr_id: None }\n     }\n "}, {"sha": "4402c75947c7b21b94d766d139fb631f866dbcb5", "filename": "crates/hir-ty/src/infer.rs", "status": "modified", "additions": 23, "deletions": 29, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/f8ed4d7ae44e7a730f597f1f6618fb3b4aead01b/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ed4d7ae44e7a730f597f1f6618fb3b4aead01b/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer.rs?ref=f8ed4d7ae44e7a730f597f1f6618fb3b4aead01b", "patch": "@@ -24,7 +24,7 @@ use hir_def::{\n     expr::{BindingAnnotation, ExprId, ExprOrPatId, PatId},\n     lang_item::{LangItem, LangItemTarget},\n     layout::Integer,\n-    path::{path, Path},\n+    path::Path,\n     resolver::{HasResolver, ResolveValueResult, Resolver, TypeNs, ValueNs},\n     type_ref::TypeRef,\n     AdtId, AssocItemId, DefWithBodyId, EnumVariantId, FieldId, FunctionId, HasModule,\n@@ -923,26 +923,24 @@ impl<'a> InferenceContext<'a> {\n     }\n \n     fn resolve_into_iter_item(&self) -> Option<TypeAliasId> {\n-        let path = path![core::iter::IntoIterator];\n-        let trait_ = self.resolver.resolve_known_trait(self.db.upcast(), &path)?;\n+        let ItemContainerId::TraitId(trait_) = self.resolve_lang_item(LangItem::IntoIterIntoIter)?\n+            .as_function()?\n+            .lookup(self.db.upcast()).container\n+        else { return None };\n         self.db.trait_data(trait_).associated_type_by_name(&name![IntoIter])\n     }\n \n     fn resolve_iterator_item(&self) -> Option<TypeAliasId> {\n-        let path = path![core::iter::Iterator];\n-        let trait_ = self.resolver.resolve_known_trait(self.db.upcast(), &path)?;\n+        let ItemContainerId::TraitId(trait_) = self.resolve_lang_item(LangItem::IteratorNext)?\n+            .as_function()?\n+            .lookup(self.db.upcast()).container\n+        else { return None };\n         self.db.trait_data(trait_).associated_type_by_name(&name![Item])\n     }\n \n     fn resolve_ops_try_ok(&self) -> Option<TypeAliasId> {\n-        // FIXME resolve via lang_item once try v2 is stable\n-        let path = path![core::ops::Try];\n-        let trait_ = self.resolver.resolve_known_trait(self.db.upcast(), &path)?;\n-        let trait_data = self.db.trait_data(trait_);\n-        trait_data\n-            // FIXME remove once try v2 is stable\n-            .associated_type_by_name(&name![Ok])\n-            .or_else(|| trait_data.associated_type_by_name(&name![Output]))\n+        let trait_ = self.resolve_lang_item(LangItem::Try)?.as_trait()?;\n+        self.db.trait_data(trait_).associated_type_by_name(&name![Output])\n     }\n \n     fn resolve_ops_neg_output(&self) -> Option<TypeAliasId> {\n@@ -956,10 +954,12 @@ impl<'a> InferenceContext<'a> {\n     }\n \n     fn resolve_future_future_output(&self) -> Option<TypeAliasId> {\n-        let trait_ = self\n-            .resolver\n-            .resolve_known_trait(self.db.upcast(), &path![core::future::IntoFuture])\n-            .or_else(|| self.resolve_lang_item(LangItem::Future)?.as_trait())?;\n+        let ItemContainerId::TraitId(trait_) = self\n+            .resolve_lang_item(LangItem::IntoFutureIntoFuture)?\n+            .as_function()?\n+            .lookup(self.db.upcast())\n+            .container\n+        else { return None };\n         self.db.trait_data(trait_).associated_type_by_name(&name![Output])\n     }\n \n@@ -969,38 +969,32 @@ impl<'a> InferenceContext<'a> {\n     }\n \n     fn resolve_range_full(&self) -> Option<AdtId> {\n-        let path = path![core::ops::RangeFull];\n-        let struct_ = self.resolver.resolve_known_struct(self.db.upcast(), &path)?;\n+        let struct_ = self.resolve_lang_item(LangItem::RangeFull)?.as_struct()?;\n         Some(struct_.into())\n     }\n \n     fn resolve_range(&self) -> Option<AdtId> {\n-        let path = path![core::ops::Range];\n-        let struct_ = self.resolver.resolve_known_struct(self.db.upcast(), &path)?;\n+        let struct_ = self.resolve_lang_item(LangItem::Range)?.as_struct()?;\n         Some(struct_.into())\n     }\n \n     fn resolve_range_inclusive(&self) -> Option<AdtId> {\n-        let path = path![core::ops::RangeInclusive];\n-        let struct_ = self.resolver.resolve_known_struct(self.db.upcast(), &path)?;\n+        let struct_ = self.resolve_lang_item(LangItem::RangeInclusiveStruct)?.as_struct()?;\n         Some(struct_.into())\n     }\n \n     fn resolve_range_from(&self) -> Option<AdtId> {\n-        let path = path![core::ops::RangeFrom];\n-        let struct_ = self.resolver.resolve_known_struct(self.db.upcast(), &path)?;\n+        let struct_ = self.resolve_lang_item(LangItem::RangeFrom)?.as_struct()?;\n         Some(struct_.into())\n     }\n \n     fn resolve_range_to(&self) -> Option<AdtId> {\n-        let path = path![core::ops::RangeTo];\n-        let struct_ = self.resolver.resolve_known_struct(self.db.upcast(), &path)?;\n+        let struct_ = self.resolve_lang_item(LangItem::RangeTo)?.as_struct()?;\n         Some(struct_.into())\n     }\n \n     fn resolve_range_to_inclusive(&self) -> Option<AdtId> {\n-        let path = path![core::ops::RangeToInclusive];\n-        let struct_ = self.resolver.resolve_known_struct(self.db.upcast(), &path)?;\n+        let struct_ = self.resolve_lang_item(LangItem::RangeToInclusive)?.as_struct()?;\n         Some(struct_.into())\n     }\n "}, {"sha": "88670364bde05beb6b24a082df2581a16c3223ed", "filename": "crates/hir-ty/src/tests/traits.rs", "status": "modified", "additions": 12, "deletions": 126, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/f8ed4d7ae44e7a730f597f1f6618fb3b4aead01b/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ed4d7ae44e7a730f597f1f6618fb3b4aead01b/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs?ref=f8ed4d7ae44e7a730f597f1f6618fb3b4aead01b", "patch": "@@ -163,98 +163,22 @@ fn test() {\n }\n \n #[test]\n-fn infer_try() {\n+fn infer_try_trait() {\n     check_types(\n         r#\"\n-//- /main.rs crate:main deps:core\n+//- minicore: try, result\n fn test() {\n     let r: Result<i32, u64> = Result::Ok(1);\n     let v = r?;\n     v;\n } //^ i32\n \n-//- /core.rs crate:core\n-pub mod ops {\n-    pub trait Try {\n-        type Ok;\n-        type Error;\n-    }\n+impl<O, E> core::ops::Try for Result<O, E> {\n+    type Output = O;\n+    type Error = Result<core::convert::Infallible, E>;\n }\n \n-pub mod result {\n-    pub enum Result<O, E> {\n-        Ok(O),\n-        Err(E)\n-    }\n-\n-    impl<O, E> crate::ops::Try for Result<O, E> {\n-        type Ok = O;\n-        type Error = E;\n-    }\n-}\n-\n-pub mod prelude {\n-    pub mod rust_2018 {\n-        pub use crate::{result::*, ops::*};\n-    }\n-}\n-\"#,\n-    );\n-}\n-\n-#[test]\n-fn infer_try_trait_v2() {\n-    check_types(\n-        r#\"\n-//- /main.rs crate:main deps:core\n-fn test() {\n-    let r: Result<i32, u64> = Result::Ok(1);\n-    let v = r?;\n-    v;\n-} //^ i32\n-\n-//- /core.rs crate:core\n-mod ops {\n-    mod try_trait {\n-        pub trait Try: FromResidual {\n-            type Output;\n-            type Residual;\n-        }\n-        pub trait FromResidual<R = <Self as Try>::Residual> {}\n-    }\n-\n-    pub use self::try_trait::FromResidual;\n-    pub use self::try_trait::Try;\n-}\n-\n-mod convert {\n-    pub trait From<T> {}\n-    impl<T> From<T> for T {}\n-}\n-\n-pub mod result {\n-    use crate::convert::From;\n-    use crate::ops::{Try, FromResidual};\n-\n-    pub enum Infallible {}\n-    pub enum Result<O, E> {\n-        Ok(O),\n-        Err(E)\n-    }\n-\n-    impl<O, E> Try for Result<O, E> {\n-        type Output = O;\n-        type Error = Result<Infallible, E>;\n-    }\n-\n-    impl<T, E, F: From<E>> FromResidual<Result<Infallible, E>> for Result<T, F> {}\n-}\n-\n-pub mod prelude {\n-    pub mod rust_2018 {\n-        pub use crate::result::*;\n-    }\n-}\n+impl<T, E, F: From<E>> core::ops::FromResidual<Result<core::convert::Infallible, E>> for Result<T, F> {}\n \"#,\n     );\n }\n@@ -263,7 +187,8 @@ pub mod prelude {\n fn infer_for_loop() {\n     check_types(\n         r#\"\n-//- /main.rs crate:main deps:core,alloc\n+//- minicore: iterator\n+//- /main.rs crate:main deps:alloc\n #![no_std]\n use alloc::collections::Vec;\n \n@@ -275,23 +200,7 @@ fn test() {\n     } //^ &str\n }\n \n-//- /core.rs crate:core\n-pub mod iter {\n-    pub trait IntoIterator {\n-        type Item;\n-        type IntoIter: Iterator<Item = Self::Item>;\n-    }\n-    pub trait Iterator {\n-        type Item;\n-    }\n-}\n-pub mod prelude {\n-    pub mod rust_2018 {\n-        pub use crate::iter::*;\n-    }\n-}\n-\n-//- /alloc.rs crate:alloc deps:core\n+//- /alloc.rs crate:alloc\n #![no_std]\n pub mod collections {\n     pub struct Vec<T> {}\n@@ -2999,40 +2908,17 @@ fn test() {\n fn integer_range_iterate() {\n     check_types(\n         r#\"\n-//- /main.rs crate:main deps:core\n+//- minicore: range, iterator\n+//- /main.rs crate:main\n fn test() {\n     for x in 0..100 { x; }\n }                   //^ i32\n \n-//- /core.rs crate:core\n-pub mod ops {\n-    pub struct Range<Idx> {\n-        pub start: Idx,\n-        pub end: Idx,\n-    }\n-}\n-\n-pub mod iter {\n-    pub trait Iterator {\n-        type Item;\n-    }\n-\n-    pub trait IntoIterator {\n-        type Item;\n-        type IntoIter: Iterator<Item = Self::Item>;\n-    }\n-\n-    impl<T> IntoIterator for T where T: Iterator {\n-        type Item = <T as Iterator>::Item;\n-        type IntoIter = Self;\n-    }\n-}\n-\n trait Step {}\n impl Step for i32 {}\n impl Step for i64 {}\n \n-impl<A: Step> iter::Iterator for ops::Range<A> {\n+impl<A: Step> core::iter::Iterator for core::ops::Range<A> {\n     type Item = A;\n }\n \"#,"}, {"sha": "0b485eb776d8a8fc4f30a400cb0a64c89086f74f", "filename": "crates/ide-completion/src/tests/flyimport.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8ed4d7ae44e7a730f597f1f6618fb3b4aead01b/crates%2Fide-completion%2Fsrc%2Ftests%2Fflyimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ed4d7ae44e7a730f597f1f6618fb3b4aead01b/crates%2Fide-completion%2Fsrc%2Ftests%2Fflyimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fflyimport.rs?ref=f8ed4d7ae44e7a730f597f1f6618fb3b4aead01b", "patch": "@@ -541,9 +541,9 @@ fn main() {\n }\n \"#,\n         expect![[r#\"\n-                fn weird_function() (use dep::test_mod::TestTrait) fn() DEPRECATED\n-                ct SPECIAL_CONST (use dep::test_mod::TestTrait) DEPRECATED\n-            \"#]],\n+            ct SPECIAL_CONST (use dep::test_mod::TestTrait) DEPRECATED\n+            fn weird_function() (use dep::test_mod::TestTrait) fn() DEPRECATED\n+        \"#]],\n     );\n }\n "}, {"sha": "dff60914409a538192e4e3b8fac56c5d88e76ed2", "filename": "crates/test-utils/src/minicore.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f8ed4d7ae44e7a730f597f1f6618fb3b4aead01b/crates%2Ftest-utils%2Fsrc%2Fminicore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ed4d7ae44e7a730f597f1f6618fb3b4aead01b/crates%2Ftest-utils%2Fsrc%2Fminicore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest-utils%2Fsrc%2Fminicore.rs?ref=f8ed4d7ae44e7a730f597f1f6618fb3b4aead01b", "patch": "@@ -28,6 +28,7 @@\n //!     generator: pin\n //!     hash:\n //!     index: sized\n+//!     infallible:\n //!     iterator: option\n //!     iterators: iterator, fn\n //!     non_zero:\n@@ -40,7 +41,7 @@\n //!     sized:\n //!     slice:\n //!     sync: sized\n-//!     try:\n+//!     try: infallible\n //!     unsize: sized\n \n pub mod marker {\n@@ -172,6 +173,9 @@ pub mod convert {\n         fn as_ref(&self) -> &T;\n     }\n     // endregion:as_ref\n+    // region:infallible\n+    pub enum Infallibe {}\n+    // endregion:infallible\n }\n \n pub mod ops {\n@@ -352,7 +356,7 @@ pub mod ops {\n             #[lang = \"from_residual\"]\n             fn from_residual(residual: R) -> Self;\n         }\n-        #[lang = \"try\"]\n+        #[lang = \"Try\"]\n         pub trait Try: FromResidual<Self::Residual> {\n             type Output;\n             type Residual;"}]}