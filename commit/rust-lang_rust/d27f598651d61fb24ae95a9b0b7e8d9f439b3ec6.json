{"sha": "d27f598651d61fb24ae95a9b0b7e8d9f439b3ec6", "node_id": "C_kwDOAAsO6NoAKGQyN2Y1OTg2NTFkNjFmYjI0YWU5NWE5YjBiN2U4ZDlmNDM5YjNlYzY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-09T22:49:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-09T22:49:47Z"}, "message": "Auto merge of #8110 - xFrednet:0000-lintcheck-markdown-output, r=matthiaskrgr\n\nUpdate lintcheck output to use tables and add markdown support\n\nThis PR updates changes lintcheck's output to use text tables and adds a markdown option to use Markdown links in the reports table. At first, I tried to keep the original output format, but the loading of old stats broke with the markdown option. The old format is therefore sadly incompatible with the new one. I can if requested make it in a way that the markdown output is only and optional additional output, but that would require more work for little benefit IMO.\n\nFor now, lintcheck has two output types. Here are the examples (best viewed on desktop):\n\n<details>\n<summary>`cargo lintcheck --only anyhow`</summary>\n\n```txt\nclippy 0.1.59 (460bef22a 2021-12-08)\n\n### Reports\n\ntarget/lintcheck/sources/anyhow-1.0.38/build.rs:1:null clippy::cargo_common_metadata \"package `anyhow` is missing `package.keywords` metadata\"\ntarget/lintcheck/sources/anyhow-1.0.38/src/error.rs:350:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\ntarget/lintcheck/sources/anyhow-1.0.38/src/lib.rs:1:null clippy::cargo_common_metadata \"package `anyhow` is missing `package.keywords` metadata\"\n\n### Stats:\n\n| lint                                               | count |\n| -------------------------------------------------- | ----- |\n| clippy::missing_panics_doc                         |     1 |\n| clippy::cargo_common_metadata                      |     2 |\n\n### ICEs:\n\n```\n\n</details>\n\n<details>\n<summary>`cargo lintcheck --only anyhow --markdown` (The file links only work locally)</summary>\n\nclippy 0.1.59 (460bef22a 2021-12-08)\n\n### Reports\n\n| file | lint | message |\n| --- | --- | --- |\n| [`anyhow-1.0.38/build.rs:1:null`](../target/lintcheck/sources/anyhow-1.0.38/build.rs#L1) | `clippy::cargo_common_metadata`                    | \"package `anyhow` is missing `package.keywords` metadata\" |\n| [`anyhow-1.0.38/src/error.rs:350:5`](../target/lintcheck/sources/anyhow-1.0.38/src/error.rs#L350) | `clippy::missing_panics_doc`                       | \"docs for function which may panic missing `# Panics` section\" |\n| [`anyhow-1.0.38/src/lib.rs:1:null`](../target/lintcheck/sources/anyhow-1.0.38/src/lib.rs#L1) | `clippy::cargo_common_metadata`                    | \"package `anyhow` is missing `package.keywords` metadata\" |\n\n### Stats:\n\n| lint                                               | count |\n| -------------------------------------------------- | ----- |\n| clippy::missing_panics_doc                         |     1 |\n| clippy::cargo_common_metadata                      |     2 |\n\n### ICEs:\n\n</details>\n\nThe table margins are so large to keep the table inline for long file names and lint names\n\n---\n\nchangelog: none\n\nr? `@matthiaskrgr`", "tree": {"sha": "44d7653e9e0dd43c209ed69414eac8d1bed83792", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44d7653e9e0dd43c209ed69414eac8d1bed83792"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d27f598651d61fb24ae95a9b0b7e8d9f439b3ec6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d27f598651d61fb24ae95a9b0b7e8d9f439b3ec6", "html_url": "https://github.com/rust-lang/rust/commit/d27f598651d61fb24ae95a9b0b7e8d9f439b3ec6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d27f598651d61fb24ae95a9b0b7e8d9f439b3ec6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a4f0923aba9a30c470b3a3d958d546bbc793ed5", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a4f0923aba9a30c470b3a3d958d546bbc793ed5", "html_url": "https://github.com/rust-lang/rust/commit/4a4f0923aba9a30c470b3a3d958d546bbc793ed5"}, {"sha": "d6fca4657d5aae35cb24eb53530a3f17dc2fd243", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6fca4657d5aae35cb24eb53530a3f17dc2fd243", "html_url": "https://github.com/rust-lang/rust/commit/d6fca4657d5aae35cb24eb53530a3f17dc2fd243"}], "stats": {"total": 98, "additions": 70, "deletions": 28}, "files": [{"sha": "53e669254cfeafde12b584fec22c15c4e2cc168b", "filename": "lintcheck/src/main.rs", "status": "modified", "additions": 70, "deletions": 28, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/d27f598651d61fb24ae95a9b0b7e8d9f439b3ec6/lintcheck%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d27f598651d61fb24ae95a9b0b7e8d9f439b3ec6/lintcheck%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lintcheck%2Fsrc%2Fmain.rs?ref=d27f598651d61fb24ae95a9b0b7e8d9f439b3ec6", "patch": "@@ -12,7 +12,7 @@ use std::process::Command;\n use std::sync::atomic::{AtomicUsize, Ordering};\n use std::{collections::HashMap, io::ErrorKind};\n use std::{\n-    env, fmt,\n+    env,\n     fs::write,\n     path::{Path, PathBuf},\n     thread,\n@@ -101,13 +101,28 @@ struct ClippyWarning {\n     is_ice: bool,\n }\n \n-impl std::fmt::Display for ClippyWarning {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        writeln!(\n-            f,\n-            r#\"target/lintcheck/sources/{}-{}/{}:{}:{} {} \"{}\"\"#,\n-            &self.crate_name, &self.crate_version, &self.file, &self.line, &self.column, &self.linttype, &self.message\n-        )\n+#[allow(unused)]\n+impl ClippyWarning {\n+    fn to_output(&self, markdown: bool) -> String {\n+        let file = format!(\"{}-{}/{}\", &self.crate_name, &self.crate_version, &self.file);\n+        let file_with_pos = format!(\"{}:{}:{}\", &file, &self.line, &self.column);\n+        if markdown {\n+            let lint = format!(\"`{}`\", self.linttype);\n+\n+            let mut output = String::from(\"| \");\n+            output.push_str(&format!(\n+                \"[`{}`](../target/lintcheck/sources/{}#L{})\",\n+                file_with_pos, file, self.line\n+            ));\n+            output.push_str(&format!(r#\" | {:<50} | \"{}\" |\"#, lint, self.message));\n+            output.push('\\n');\n+            output\n+        } else {\n+            format!(\n+                \"target/lintcheck/sources/{} {} \\\"{}\\\"\\n\",\n+                file_with_pos, self.linttype, self.message\n+            )\n+        }\n     }\n }\n \n@@ -378,6 +393,8 @@ struct LintcheckConfig {\n     fix: bool,\n     /// A list of lint that this lintcheck run shound focus on\n     lint_filter: Vec<String>,\n+    /// Indicate if the output should support markdown syntax\n+    markdown: bool,\n }\n \n impl LintcheckConfig {\n@@ -393,12 +410,17 @@ impl LintcheckConfig {\n                 .to_string()\n         });\n \n+        let markdown = clap_config.is_present(\"markdown\");\n         let sources_toml_path = PathBuf::from(sources_toml);\n \n         // for the path where we save the lint results, get the filename without extension (so for\n         // wasd.toml, use \"wasd\"...)\n         let filename: PathBuf = sources_toml_path.file_stem().unwrap().into();\n-        let lintcheck_results_path = PathBuf::from(format!(\"lintcheck-logs/{}_logs.txt\", filename.display()));\n+        let lintcheck_results_path = PathBuf::from(format!(\n+            \"lintcheck-logs/{}_logs.{}\",\n+            filename.display(),\n+            if markdown { \"md\" } else { \"txt\" }\n+        ));\n \n         // look at the --threads arg, if 0 is passed, ask rayon rayon how many threads it would spawn and\n         // use half of that for the physical core count\n@@ -440,6 +462,7 @@ impl LintcheckConfig {\n             lintcheck_results_path,\n             fix,\n             lint_filter,\n+            markdown,\n         }\n     }\n }\n@@ -601,10 +624,15 @@ fn gather_stats(clippy_warnings: &[ClippyWarning]) -> (String, HashMap<&String,\n     // to not have a lint with 200 and 2 warnings take the same spot\n     stats.sort_by_key(|(lint, count)| format!(\"{:0>4}, {}\", count, lint));\n \n+    let mut header = String::from(\"| lint                                               | count |\\n\");\n+    header.push_str(\"| -------------------------------------------------- | ----- |\\n\");\n     let stats_string = stats\n         .iter()\n-        .map(|(lint, count)| format!(\"{} {}\\n\", lint, count))\n-        .collect::<String>();\n+        .map(|(lint, count)| format!(\"| {:<50} |  {:>4} |\\n\", lint, count))\n+        .fold(header, |mut table, line| {\n+            table.push_str(&line);\n+            table\n+        });\n \n     (stats_string, counter)\n }\n@@ -802,15 +830,23 @@ pub fn main() {\n         .map(|w| (&w.crate_name, &w.message))\n         .collect();\n \n-    let mut all_msgs: Vec<String> = clippy_warnings.iter().map(ToString::to_string).collect();\n+    let mut all_msgs: Vec<String> = clippy_warnings\n+        .iter()\n+        .map(|warn| warn.to_output(config.markdown))\n+        .collect();\n     all_msgs.sort();\n-    all_msgs.push(\"\\n\\n\\n\\nStats:\\n\".into());\n+    all_msgs.push(\"\\n\\n### Stats:\\n\\n\".into());\n     all_msgs.push(stats_formatted);\n \n     // save the text into lintcheck-logs/logs.txt\n     let mut text = clippy_ver; // clippy version number on top\n-    text.push_str(&format!(\"\\n{}\", all_msgs.join(\"\")));\n-    text.push_str(\"ICEs:\\n\");\n+    text.push_str(\"\\n### Reports\\n\\n\");\n+    if config.markdown {\n+        text.push_str(\"| file | lint | message |\\n\");\n+        text.push_str(\"| --- | --- | --- |\\n\");\n+    }\n+    text.push_str(&format!(\"{}\", all_msgs.join(\"\")));\n+    text.push_str(\"\\n\\n### ICEs:\\n\");\n     ices.iter()\n         .for_each(|(cratename, msg)| text.push_str(&format!(\"{}: '{}'\", cratename, msg)));\n \n@@ -832,20 +868,21 @@ fn read_stats_from_file(file_path: &Path) -> HashMap<String, usize> {\n \n     let lines: Vec<String> = file_content.lines().map(ToString::to_string).collect();\n \n-    // search for the beginning \"Stats:\" and the end \"ICEs:\" of the section we want\n-    let start = lines.iter().position(|line| line == \"Stats:\").unwrap();\n-    let end = lines.iter().position(|line| line == \"ICEs:\").unwrap();\n-\n-    let stats_lines = &lines[start + 1..end];\n-\n-    stats_lines\n+    lines\n         .iter()\n-        .map(|line| {\n-            let mut spl = line.split(' ');\n-            (\n-                spl.next().unwrap().to_string(),\n-                spl.next().unwrap().parse::<usize>().unwrap(),\n-            )\n+        .skip_while(|line| line.as_str() != \"### Stats:\")\n+        // Skipping the table header and the `Stats:` label\n+        .skip(4)\n+        .take_while(|line| line.starts_with(\"| \"))\n+        .filter_map(|line| {\n+            let mut spl = line.split('|');\n+            // Skip the first `|` symbol\n+            spl.next();\n+            if let (Some(lint), Some(count)) = (spl.next(), spl.next()) {\n+                Some((lint.trim().to_string(), count.trim().parse::<usize>().unwrap()))\n+            } else {\n+                None\n+            }\n         })\n         .collect::<HashMap<String, usize>>()\n }\n@@ -957,6 +994,11 @@ fn get_clap_config<'a>() -> ArgMatches<'a> {\n                 .value_name(\"clippy_lint_name\")\n                 .help(\"apply a filter to only collect specified lints, this also overrides `allow` attributes\"),\n         )\n+        .arg(\n+            Arg::with_name(\"markdown\")\n+                .long(\"--markdown\")\n+                .help(\"change the reports table to use markdown links\"),\n+        )\n         .get_matches()\n }\n "}]}