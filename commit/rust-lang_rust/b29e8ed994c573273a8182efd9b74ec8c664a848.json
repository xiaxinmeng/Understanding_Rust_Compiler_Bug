{"sha": "b29e8ed994c573273a8182efd9b74ec8c664a848", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyOWU4ZWQ5OTRjNTczMjczYTgxODJlZmQ5Yjc0ZWM4YzY2NGE4NDg=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-07T17:35:24Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-07T17:46:25Z"}, "message": "Remove unnecessary completion::macro_in_item_position", "tree": {"sha": "3b114c5cd61701ecfb09ae37ddea2daf8e26e6ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b114c5cd61701ecfb09ae37ddea2daf8e26e6ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b29e8ed994c573273a8182efd9b74ec8c664a848", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b29e8ed994c573273a8182efd9b74ec8c664a848", "html_url": "https://github.com/rust-lang/rust/commit/b29e8ed994c573273a8182efd9b74ec8c664a848", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b29e8ed994c573273a8182efd9b74ec8c664a848/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa29364f831c4633613ba7e28cae147e69107d66", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa29364f831c4633613ba7e28cae147e69107d66", "html_url": "https://github.com/rust-lang/rust/commit/aa29364f831c4633613ba7e28cae147e69107d66"}], "stats": {"total": 89, "additions": 17, "deletions": 72}, "files": [{"sha": "7a4d71e9182609ea1c04af0b0d2a3da03d94c6d0", "filename": "crates/ide_completion/src/completions.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b29e8ed994c573273a8182efd9b74ec8c664a848/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b29e8ed994c573273a8182efd9b74ec8c664a848/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions.rs?ref=b29e8ed994c573273a8182efd9b74ec8c664a848", "patch": "@@ -6,7 +6,6 @@ pub(crate) mod flyimport;\n pub(crate) mod fn_param;\n pub(crate) mod keyword;\n pub(crate) mod lifetime;\n-pub(crate) mod macro_in_item_position;\n pub(crate) mod mod_;\n pub(crate) mod pattern;\n pub(crate) mod postfix;"}, {"sha": "781b96ff185a17aa35714a02bcdab8b32d0ab0d5", "filename": "crates/ide_completion/src/completions/macro_in_item_position.rs", "status": "removed", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/aa29364f831c4633613ba7e28cae147e69107d66/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fmacro_in_item_position.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa29364f831c4633613ba7e28cae147e69107d66/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fmacro_in_item_position.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fmacro_in_item_position.rs?ref=aa29364f831c4633613ba7e28cae147e69107d66", "patch": "@@ -1,48 +0,0 @@\n-//! Completes macro invocations used in item position.\n-\n-use crate::{CompletionContext, Completions};\n-\n-// Ideally this should be removed and moved into `(un)qualified_path` respectively\n-pub(crate) fn complete_macro_in_item_position(acc: &mut Completions, ctx: &CompletionContext) {\n-    // Show only macros in top level.\n-    if !ctx.expects_item() {\n-        return;\n-    }\n-\n-    ctx.scope.process_all_names(&mut |name, res| {\n-        if let hir::ScopeDef::MacroDef(mac) = res {\n-            acc.add_macro(ctx, Some(name.clone()), mac);\n-        }\n-        // FIXME: This should be done in qualified_path/unqualified_path instead?\n-        if let hir::ScopeDef::ModuleDef(hir::ModuleDef::Module(_)) = res {\n-            acc.add_resolution(ctx, name, &res);\n-        }\n-    })\n-}\n-\n-#[cfg(test)]\n-mod tests {\n-    use expect_test::{expect, Expect};\n-\n-    use crate::{test_utils::completion_list, CompletionKind};\n-\n-    fn check(ra_fixture: &str, expect: Expect) {\n-        let actual = completion_list(ra_fixture, CompletionKind::Reference);\n-        expect.assert_eq(&actual)\n-    }\n-\n-    #[test]\n-    fn completes_macros_as_item() {\n-        check(\n-            r#\"\n-macro_rules! foo { () => {} }\n-fn foo() {}\n-\n-$0\n-\"#,\n-            expect![[r#\"\n-                ma foo!(\u2026) macro_rules! foo\n-            \"#]],\n-        )\n-    }\n-}"}, {"sha": "d58745fb4dae13b6d09393e81a8ad1dd5dd8e861", "filename": "crates/ide_completion/src/completions/qualified_path.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b29e8ed994c573273a8182efd9b74ec8c664a848/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b29e8ed994c573273a8182efd9b74ec8c664a848/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=b29e8ed994c573273a8182efd9b74ec8c664a848", "patch": "@@ -7,7 +7,7 @@ use syntax::AstNode;\n use crate::{CompletionContext, Completions};\n \n pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionContext) {\n-    if ctx.is_path_disallowed() || ctx.expects_item() {\n+    if ctx.is_path_disallowed() {\n         return;\n     }\n     let path = match ctx.path_qual() {\n@@ -20,7 +20,8 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n         None => return,\n     };\n     let context_module = ctx.scope.module();\n-    if ctx.expects_assoc_item() {\n+\n+    if ctx.expects_item() || ctx.expects_assoc_item() {\n         if let hir::PathResolution::Def(hir::ModuleDef::Module(module)) = resolution {\n             let module_scope = module.scope(ctx.db, context_module);\n             for (name, def) in module_scope {\n@@ -631,25 +632,25 @@ impl MyStruct {\n \"#,\n             expect![[r##\"\n                 md bar\n-                ma foo! #[macro_export] macro_rules! foo\n+                ma foo!(\u2026) #[macro_export] macro_rules! foo\n             \"##]],\n         );\n     }\n \n     #[test]\n-    #[ignore] // FIXME doesn't complete anything atm\n     fn completes_in_item_list() {\n         check(\n             r#\"\n struct MyStruct {}\n+#[macro_export]\n macro_rules! foo {}\n mod bar {}\n \n crate::$0\n \"#,\n             expect![[r#\"\n                 md bar\n-                ma foo! macro_rules! foo\n+                ma foo!(\u2026) #[macro_export] macro_rules! foo\n             \"#]],\n         )\n     }"}, {"sha": "8b22933e0a211b5abd99993bfb857a30f91aab06", "filename": "crates/ide_completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b29e8ed994c573273a8182efd9b74ec8c664a848/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b29e8ed994c573273a8182efd9b74ec8c664a848/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=b29e8ed994c573273a8182efd9b74ec8c664a848", "patch": "@@ -5,26 +5,25 @@ use hir::ScopeDef;\n use crate::{CompletionContext, Completions};\n \n pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionContext) {\n-    if !ctx.is_trivial_path() {\n-        return;\n-    }\n-    if ctx.is_path_disallowed() || ctx.expects_item() {\n+    if ctx.is_path_disallowed() || !ctx.is_trivial_path() {\n         return;\n     }\n \n-    if ctx.expects_assoc_item() {\n-        ctx.scope.process_all_names(&mut |name, def| {\n-            if let ScopeDef::MacroDef(macro_def) = def {\n-                acc.add_macro(ctx, Some(name.clone()), macro_def);\n+    if ctx.expects_item() || ctx.expects_assoc_item() {\n+        // only show macros in {Assoc}ItemList\n+        ctx.scope.process_all_names(&mut |name, res| {\n+            if let hir::ScopeDef::MacroDef(mac) = res {\n+                acc.add_macro(ctx, Some(name.clone()), mac);\n             }\n-            if let ScopeDef::ModuleDef(hir::ModuleDef::Module(_)) = def {\n-                acc.add_resolution(ctx, name, &def);\n+            if let hir::ScopeDef::ModuleDef(hir::ModuleDef::Module(_)) = res {\n+                acc.add_resolution(ctx, name, &res);\n             }\n         });\n         return;\n     }\n \n     if ctx.expects_use_tree() {\n+        // only show modules in a fresh UseTree\n         cov_mark::hit!(only_completes_modules_in_import);\n         ctx.scope.process_all_names(&mut |name, res| {\n             if let ScopeDef::ModuleDef(hir::ModuleDef::Module(_)) = res {\n@@ -693,12 +692,11 @@ impl MyStruct {\n \"#,\n             expect![[r#\"\n                 md bar\n-                ma foo! macro_rules! foo\n+                ma foo!(\u2026) macro_rules! foo\n             \"#]],\n         )\n     }\n \n-    // FIXME: The completions here currently come from `macro_in_item_position`, but they shouldn't\n     #[test]\n     fn completes_in_item_list() {\n         check("}, {"sha": "7e4b14926312655eb3fd22169e88858c7d2322dc", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b29e8ed994c573273a8182efd9b74ec8c664a848/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b29e8ed994c573273a8182efd9b74ec8c664a848/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=b29e8ed994c573273a8182efd9b74ec8c664a848", "patch": "@@ -561,10 +561,6 @@ impl<'a> CompletionContext<'a> {\n         self.name_ref_syntax =\n             find_node_at_offset(original_file, name_ref.syntax().text_range().start());\n \n-        if matches!(self.completion_location, Some(ImmediateLocation::ItemList)) {\n-            return;\n-        }\n-\n         self.use_item_syntax =\n             self.sema.token_ancestors_with_macros(self.token.clone()).find_map(ast::Use::cast);\n \n@@ -595,7 +591,7 @@ impl<'a> CompletionContext<'a> {\n                 path_ctx.call_kind = match_ast! {\n                     match p {\n                         ast::PathExpr(it) => it.syntax().parent().and_then(ast::CallExpr::cast).map(|_| CallKind::Expr),\n-                        ast::MacroCall(_it) => Some(CallKind::Mac),\n+                        ast::MacroCall(it) => it.excl_token().and(Some(CallKind::Mac)),\n                         ast::TupleStructPat(_it) => Some(CallKind::Pat),\n                         _ => None\n                     }"}, {"sha": "18983aa01b155557048cf4288f70a58862adec68", "filename": "crates/ide_completion/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b29e8ed994c573273a8182efd9b74ec8c664a848/crates%2Fide_completion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b29e8ed994c573273a8182efd9b74ec8c664a848/crates%2Fide_completion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Flib.rs?ref=b29e8ed994c573273a8182efd9b74ec8c664a848", "patch": "@@ -158,7 +158,6 @@ pub fn completions(\n     completions::record::complete_record(&mut acc, &ctx);\n     completions::pattern::complete_pattern(&mut acc, &ctx);\n     completions::postfix::complete_postfix(&mut acc, &ctx);\n-    completions::macro_in_item_position::complete_macro_in_item_position(&mut acc, &ctx);\n     completions::trait_impl::complete_trait_impl(&mut acc, &ctx);\n     completions::mod_::complete_mod(&mut acc, &ctx);\n     completions::flyimport::import_on_the_fly(&mut acc, &ctx);"}]}