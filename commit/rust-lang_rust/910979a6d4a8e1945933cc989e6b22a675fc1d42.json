{"sha": "910979a6d4a8e1945933cc989e6b22a675fc1d42", "node_id": "C_kwDOAAsO6NoAKDkxMDk3OWE2ZDRhOGUxOTQ1OTMzY2M5ODllNmIyMmE2NzVmYzFkNDI", "commit": {"author": {"name": "Takayuki Maeda", "email": "41065217+TaKO8Ki@users.noreply.github.com", "date": "2022-05-17T08:34:58Z"}, "committer": {"name": "Takayuki Maeda", "email": "41065217+TaKO8Ki@users.noreply.github.com", "date": "2022-05-17T08:34:58Z"}, "message": "fix misleading `cannot infer type for type parameter` error", "tree": {"sha": "826129e8cb5756a4d4fc9eb9e60235c82f86a2f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/826129e8cb5756a4d4fc9eb9e60235c82f86a2f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/910979a6d4a8e1945933cc989e6b22a675fc1d42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/910979a6d4a8e1945933cc989e6b22a675fc1d42", "html_url": "https://github.com/rust-lang/rust/commit/910979a6d4a8e1945933cc989e6b22a675fc1d42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/910979a6d4a8e1945933cc989e6b22a675fc1d42/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebb80ec4e90f8622440f3e33562db0d6e6c66555", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebb80ec4e90f8622440f3e33562db0d6e6c66555", "html_url": "https://github.com/rust-lang/rust/commit/ebb80ec4e90f8622440f3e33562db0d6e6c66555"}], "stats": {"total": 59, "additions": 59, "deletions": 0}, "files": [{"sha": "55602305090692573427efefe37ded4299d251c4", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/910979a6d4a8e1945933cc989e6b22a675fc1d42/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/910979a6d4a8e1945933cc989e6b22a675fc1d42/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=910979a6d4a8e1945933cc989e6b22a675fc1d42", "patch": "@@ -866,6 +866,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 }\n             }\n \n+            self.report_ambiguous_type_parameter(&mut err, arg);\n             err.span_label(\n                 span,\n                 arg_data.cannot_infer_msg(use_diag.filter(|d| d.applies_to(span))),\n@@ -933,6 +934,27 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         }\n     }\n \n+    fn report_ambiguous_type_parameter(&self, err: &mut Diagnostic, arg: GenericArg<'tcx>) {\n+        if let GenericArgKind::Type(ty) = arg.unpack()\n+            && let ty::Infer(ty::TyVar(ty_vid)) = *ty.kind()\n+        {\n+            let mut inner = self.inner.borrow_mut();\n+            let ty_vars = &inner.type_variables();\n+            let var_origin = ty_vars.var_origin(ty_vid);\n+            if let TypeVariableOriginKind::TypeParameterDefinition(name, Some(def_id)) =\n+                var_origin.kind\n+                && let Some(parent_def_id) = self.tcx.parent(def_id).as_local()\n+                && let Some(hir::Node::Item(item)) = self.tcx.hir().find_by_def_id(parent_def_id)\n+                && let hir::ItemKind::Impl(impl_item) = item.kind\n+                && let Some(trait_ref) = &impl_item.of_trait\n+                && let Some(did) = trait_ref.trait_def_id()\n+                && self.tcx.generics_of(did).params.iter().any(|param| param.name == name)\n+            {\n+                err.span_help(self.tcx.def_span(def_id), \"type parameter declared here\");\n+            }\n+        }\n+    }\n+\n     pub fn need_type_info_err_in_generator(\n         &self,\n         kind: hir::GeneratorKind,"}, {"sha": "dc70ed661d2234515210458c0f5cdd333f1da573", "filename": "src/test/ui/inference/ambiguous_type_parameter.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/910979a6d4a8e1945933cc989e6b22a675fc1d42/src%2Ftest%2Fui%2Finference%2Fambiguous_type_parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/910979a6d4a8e1945933cc989e6b22a675fc1d42/src%2Ftest%2Fui%2Finference%2Fambiguous_type_parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fambiguous_type_parameter.rs?ref=910979a6d4a8e1945933cc989e6b22a675fc1d42", "patch": "@@ -0,0 +1,17 @@\n+use std::collections::HashMap;\n+\n+trait Store<K, V> {\n+    fn get_raw(&self, key: &K) -> Option<()>;\n+}\n+\n+struct InMemoryStore;\n+\n+impl<K> Store<String, HashMap<K, String>> for InMemoryStore {\n+    fn get_raw(&self, key: &String) -> Option<()> {\n+        None\n+    }\n+}\n+\n+fn main() {\n+    InMemoryStore.get_raw(&String::default()); //~ ERROR type annotations needed\n+}"}, {"sha": "47ef1948aee9fcab453c46c92602cd45070c5b45", "filename": "src/test/ui/inference/ambiguous_type_parameter.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/910979a6d4a8e1945933cc989e6b22a675fc1d42/src%2Ftest%2Fui%2Finference%2Fambiguous_type_parameter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/910979a6d4a8e1945933cc989e6b22a675fc1d42/src%2Ftest%2Fui%2Finference%2Fambiguous_type_parameter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fambiguous_type_parameter.stderr?ref=910979a6d4a8e1945933cc989e6b22a675fc1d42", "patch": "@@ -0,0 +1,15 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/ambiguous_type_parameter.rs:16:19\n+   |\n+LL |     InMemoryStore.get_raw(&String::default());\n+   |                   ^^^^^^^ cannot infer type for type parameter `K`\n+   |\n+help: type parameter declared here\n+  --> $DIR/ambiguous_type_parameter.rs:9:6\n+   |\n+LL | impl<K> Store<String, HashMap<K, String>> for InMemoryStore {\n+   |      ^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "3c8d7450f96fa1f4bf200399e8c089cce13cd507", "filename": "src/test/ui/traits/not-suggest-non-existing-fully-qualified-path.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/910979a6d4a8e1945933cc989e6b22a675fc1d42/src%2Ftest%2Fui%2Ftraits%2Fnot-suggest-non-existing-fully-qualified-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/910979a6d4a8e1945933cc989e6b22a675fc1d42/src%2Ftest%2Fui%2Ftraits%2Fnot-suggest-non-existing-fully-qualified-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnot-suggest-non-existing-fully-qualified-path.stderr?ref=910979a6d4a8e1945933cc989e6b22a675fc1d42", "patch": "@@ -16,6 +16,11 @@ LL |     a.method();\n    |     | cannot infer type for type parameter `U`\n    |     this method call resolves to `U`\n    |\n+help: type parameter declared here\n+  --> $DIR/not-suggest-non-existing-fully-qualified-path.rs:12:9\n+   |\n+LL | impl<T, U> V<U> for A<T>\n+   |         ^\n note: multiple `impl`s satisfying `B: I<_>` found\n   --> $DIR/not-suggest-non-existing-fully-qualified-path.rs:5:1\n    |"}]}