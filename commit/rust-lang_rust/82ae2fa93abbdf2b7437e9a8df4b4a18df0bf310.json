{"sha": "82ae2fa93abbdf2b7437e9a8df4b4a18df0bf310", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyYWUyZmE5M2FiYmRmMmI3NDM3ZTlhOGRmNGI0YTE4ZGYwYmYzMTA=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2013-07-08T23:54:28Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2013-07-11T22:51:09Z"}, "message": "Clean up Repr impls a bit so we can add generic impls for @ and ~.", "tree": {"sha": "8a83acc797b4d63874ae0a47fb991a19d31aa533", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a83acc797b4d63874ae0a47fb991a19d31aa533"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82ae2fa93abbdf2b7437e9a8df4b4a18df0bf310", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82ae2fa93abbdf2b7437e9a8df4b4a18df0bf310", "html_url": "https://github.com/rust-lang/rust/commit/82ae2fa93abbdf2b7437e9a8df4b4a18df0bf310", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82ae2fa93abbdf2b7437e9a8df4b4a18df0bf310/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38dc832154c00b57a71294be4327225d134e4aec", "url": "https://api.github.com/repos/rust-lang/rust/commits/38dc832154c00b57a71294be4327225d134e4aec", "html_url": "https://github.com/rust-lang/rust/commit/38dc832154c00b57a71294be4327225d134e4aec"}], "stats": {"total": 26, "additions": 8, "deletions": 18}, "files": [{"sha": "f5024f7973c5e491ef0e232342f1c14c43097dea", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82ae2fa93abbdf2b7437e9a8df4b4a18df0bf310/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82ae2fa93abbdf2b7437e9a8df4b4a18df0bf310/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=82ae2fa93abbdf2b7437e9a8df4b4a18df0bf310", "patch": "@@ -1185,7 +1185,7 @@ impl cmt_ {\n     }\n }\n \n-impl Repr for cmt {\n+impl Repr for cmt_ {\n     fn repr(&self, tcx: ty::ctxt) -> ~str {\n         fmt!(\"{%s id:%d m:%? ty:%s}\",\n              self.cat.repr(tcx),"}, {"sha": "1a45ce36af2f3c662ffec3acb7888951d92de012", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/82ae2fa93abbdf2b7437e9a8df4b4a18df0bf310/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82ae2fa93abbdf2b7437e9a8df4b4a18df0bf310/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=82ae2fa93abbdf2b7437e9a8df4b4a18df0bf310", "patch": "@@ -154,12 +154,6 @@ impl Repr for param_substs {\n     }\n }\n \n-impl Repr for @param_substs {\n-    fn repr(&self, tcx: ty::ctxt) -> ~str {\n-        param_substs_to_str(*self, tcx)\n-    }\n-}\n-\n // Function context.  Every LLVM function we create will have one of\n // these.\n pub struct fn_ctxt_ {"}, {"sha": "005f46057b66580d91002785050337565436af70", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/82ae2fa93abbdf2b7437e9a8df4b4a18df0bf310/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82ae2fa93abbdf2b7437e9a8df4b4a18df0bf310/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=82ae2fa93abbdf2b7437e9a8df4b4a18df0bf310", "patch": "@@ -512,9 +512,6 @@ impl<T:Repr> Repr for Option<T> {\n     }\n }\n \n-/*\n-Annoyingly, these conflict with @ast::expr.\n-\n impl<T:Repr> Repr for @T {\n     fn repr(&self, tcx: ctxt) -> ~str {\n         (&**self).repr(tcx)\n@@ -526,7 +523,6 @@ impl<T:Repr> Repr for ~T {\n         (&**self).repr(tcx)\n     }\n }\n-*/\n \n fn repr_vec<T:Repr>(tcx: ctxt, v: &[T]) -> ~str {\n     fmt!(\"[%s]\", v.map(|t| t.repr(tcx)).connect(\",\"))\n@@ -538,11 +534,11 @@ impl<'self, T:Repr> Repr for &'self [T] {\n     }\n }\n \n-// This is necessary to handle types like Option<@~[T]>, for which\n+// This is necessary to handle types like Option<~[T]>, for which\n // autoderef cannot convert the &[T] handler\n-impl<T:Repr> Repr for @~[T] {\n+impl<T:Repr> Repr for ~[T] {\n     fn repr(&self, tcx: ctxt) -> ~str {\n-        repr_vec(tcx, **self)\n+        repr_vec(tcx, *self)\n     }\n }\n \n@@ -593,19 +589,19 @@ impl Repr for ty::TraitRef {\n     }\n }\n \n-impl Repr for @ast::expr {\n+impl Repr for ast::expr {\n     fn repr(&self, tcx: ctxt) -> ~str {\n         fmt!(\"expr(%d: %s)\",\n              self.id,\n-             pprust::expr_to_str(*self, tcx.sess.intr()))\n+             pprust::expr_to_str(self, tcx.sess.intr()))\n     }\n }\n \n-impl Repr for @ast::pat {\n+impl Repr for ast::pat {\n     fn repr(&self, tcx: ctxt) -> ~str {\n         fmt!(\"pat(%d: %s)\",\n              self.id,\n-             pprust::pat_to_str(*self, tcx.sess.intr()))\n+             pprust::pat_to_str(self, tcx.sess.intr()))\n     }\n }\n "}]}