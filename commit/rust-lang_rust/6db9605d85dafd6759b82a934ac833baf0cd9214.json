{"sha": "6db9605d85dafd6759b82a934ac833baf0cd9214", "node_id": "C_kwDOAAsO6NoAKDZkYjk2MDVkODVkYWZkNjc1OWI4MmE5MzRhYzgzM2JhZjBjZDkyMTQ", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2021-05-19T21:08:32Z"}, "committer": {"name": "Alan Egerton", "email": "eggyal@gmail.com", "date": "2021-11-26T07:40:43Z"}, "message": "Use `TypeFolder::Error` for `FullTypeResolver` and `QueryNormalizer`\n\nCo-authored-by: Alan Egerton <eggyal@gmail.com>", "tree": {"sha": "240a4d0f80e5bf9b6f453961d5142f0b12ee7810", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/240a4d0f80e5bf9b6f453961d5142f0b12ee7810"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6db9605d85dafd6759b82a934ac833baf0cd9214", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEm/Nz5g9hEBdpmKVOB8rDzKfgZD8FAmGgj5MACgkQB8rDzKfg\nZD/UXg/+MhGUEjb1ndp1s61TbgHxHock3JSI88C+Xb8NyBpisso6RVRVLp6M3AO7\nQGktHLGauVy5xqAlOMfNiVNfw8zp/okpHh7ZJiajYvgUixDPdPR3M0XwBrAd3voi\n9yQJ3bTfhJZx2kUHsnDf3oAqOr39e5u0N2sYl7QC6I7S9UDaqDVp02tB7moZ/sDM\ni7RrZjPD3dNXA3C3t8LQruuSGV0eq0r9xTGuXnIzPzS49jslNcOfyyU9CVNHY3pd\n6t93CDWngy+BcvLwXnF/+s1J6IDn4/a4V2fa0AiCi7uDCYfi7ddT3lL8aSU4oyKa\nDEiwgPLF/I+zFNiZ9CAipkjwSq0xQo82bvpfn2PoY7EDSxMrr3wvkNTtkeEBTX20\nRCJSVFuQzjSEvZ2Fb1Kl2krQIOvcKUUSFb6T+vCiPZa17WjnkE4nPJ+UjmTnIifH\n5U30kfENG/mbg8aYyn4jO9t2QftfTqgcJ2+Y0Tg8kEpzV9Lk9uf768TBgvSqnLRn\nfFsBpJem2QoAnU9xekxUj3GM12VnUcBJl4xc/ZNseQl8z+XC0M9PN4mZHJJEg89C\neo1WQik7cx6L+5veJ5pXH0w84ypjxw6U068sRcaEXKgcBdWiJf1Fl9SVbM2tEdBx\n1sKCFu12zDpTohnhvA3FCnT5PYO9Pd8+KBhzUGXcFO718fjHEkY=\n=pbFU\n-----END PGP SIGNATURE-----", "payload": "tree 240a4d0f80e5bf9b6f453961d5142f0b12ee7810\nparent 30bf20a692df794c9c639ef7153115b7db5aade5\nauthor LeSeulArtichaut <leseulartichaut@gmail.com> 1621458512 +0200\ncommitter Alan Egerton <eggyal@gmail.com> 1637912443 +0000\n\nUse `TypeFolder::Error` for `FullTypeResolver` and `QueryNormalizer`\n\nCo-authored-by: Alan Egerton <eggyal@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6db9605d85dafd6759b82a934ac833baf0cd9214", "html_url": "https://github.com/rust-lang/rust/commit/6db9605d85dafd6759b82a934ac833baf0cd9214", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6db9605d85dafd6759b82a934ac833baf0cd9214/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eggyal", "id": 3089613, "node_id": "MDQ6VXNlcjMwODk2MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3089613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eggyal", "html_url": "https://github.com/eggyal", "followers_url": "https://api.github.com/users/eggyal/followers", "following_url": "https://api.github.com/users/eggyal/following{/other_user}", "gists_url": "https://api.github.com/users/eggyal/gists{/gist_id}", "starred_url": "https://api.github.com/users/eggyal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eggyal/subscriptions", "organizations_url": "https://api.github.com/users/eggyal/orgs", "repos_url": "https://api.github.com/users/eggyal/repos", "events_url": "https://api.github.com/users/eggyal/events{/privacy}", "received_events_url": "https://api.github.com/users/eggyal/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30bf20a692df794c9c639ef7153115b7db5aade5", "url": "https://api.github.com/repos/rust-lang/rust/commits/30bf20a692df794c9c639ef7153115b7db5aade5", "html_url": "https://github.com/rust-lang/rust/commit/30bf20a692df794c9c639ef7153115b7db5aade5"}], "stats": {"total": 145, "additions": 48, "deletions": 97}, "files": [{"sha": "cccdfb7452a77fd7db25cda5f59171172640f610", "filename": "compiler/rustc_infer/src/infer/resolve.rs", "status": "modified", "additions": 7, "deletions": 21, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6db9605d85dafd6759b82a934ac833baf0cd9214/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6db9605d85dafd6759b82a934ac833baf0cd9214/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs?ref=6db9605d85dafd6759b82a934ac833baf0cd9214", "patch": "@@ -181,22 +181,18 @@ pub fn fully_resolve<'a, 'tcx, T>(infcx: &InferCtxt<'a, 'tcx>, value: T) -> Fixu\n where\n     T: TypeFoldable<'tcx>,\n {\n-    let mut full_resolver = FullTypeResolver { infcx, err: None };\n-    let result = value.fold_with(&mut full_resolver).into_ok();\n-    match full_resolver.err {\n-        None => Ok(result),\n-        Some(e) => Err(e),\n-    }\n+    value.fold_with(&mut FullTypeResolver { infcx })\n }\n \n // N.B. This type is not public because the protocol around checking the\n // `err` field is not enforceable otherwise.\n struct FullTypeResolver<'a, 'tcx> {\n     infcx: &'a InferCtxt<'a, 'tcx>,\n-    err: Option<FixupError<'tcx>>,\n }\n \n impl<'a, 'tcx> TypeFolder<'tcx> for FullTypeResolver<'a, 'tcx> {\n+    type Error = FixupError<'tcx>;\n+\n     fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n         self.infcx.tcx\n     }\n@@ -207,18 +203,9 @@ impl<'a, 'tcx> TypeFolder<'tcx> for FullTypeResolver<'a, 'tcx> {\n         } else {\n             let t = self.infcx.shallow_resolve(t);\n             match *t.kind() {\n-                ty::Infer(ty::TyVar(vid)) => {\n-                    self.err = Some(FixupError::UnresolvedTy(vid));\n-                    Ok(self.tcx().ty_error())\n-                }\n-                ty::Infer(ty::IntVar(vid)) => {\n-                    self.err = Some(FixupError::UnresolvedIntTy(vid));\n-                    Ok(self.tcx().ty_error())\n-                }\n-                ty::Infer(ty::FloatVar(vid)) => {\n-                    self.err = Some(FixupError::UnresolvedFloatTy(vid));\n-                    Ok(self.tcx().ty_error())\n-                }\n+                ty::Infer(ty::TyVar(vid)) => Err(FixupError::UnresolvedTy(vid)),\n+                ty::Infer(ty::IntVar(vid)) => Err(FixupError::UnresolvedIntTy(vid)),\n+                ty::Infer(ty::FloatVar(vid)) => Err(FixupError::UnresolvedFloatTy(vid)),\n                 ty::Infer(_) => {\n                     bug!(\"Unexpected type in full type resolver: {:?}\", t);\n                 }\n@@ -250,8 +237,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for FullTypeResolver<'a, 'tcx> {\n             let c = self.infcx.shallow_resolve(c);\n             match c.val {\n                 ty::ConstKind::Infer(InferConst::Var(vid)) => {\n-                    self.err = Some(FixupError::UnresolvedConst(vid));\n-                    return Ok(self.tcx().const_error(c.ty));\n+                    return Err(FixupError::UnresolvedConst(vid));\n                 }\n                 ty::ConstKind::Infer(InferConst::Fresh(_)) => {\n                     bug!(\"Unexpected const in full const resolver: {:?}\", c);"}, {"sha": "af507feffba5b5ed615b24f7dac83074c41166d2", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 41, "deletions": 76, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/6db9605d85dafd6759b82a934ac833baf0cd9214/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6db9605d85dafd6759b82a934ac833baf0cd9214/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=6db9605d85dafd6759b82a934ac833baf0cd9214", "patch": "@@ -61,7 +61,6 @@ impl<'cx, 'tcx> AtExt<'tcx> for At<'cx, 'tcx> {\n             cause: self.cause,\n             param_env: self.param_env,\n             obligations: vec![],\n-            error: false,\n             cache: SsoHashMap::new(),\n             anon_depth: 0,\n             universes: vec![],\n@@ -88,7 +87,7 @@ impl<'cx, 'tcx> AtExt<'tcx> for At<'cx, 'tcx> {\n                 normalizer.universes.extend((0..max_visitor.escaping).map(|_| None));\n             }\n         }\n-        let result = value.fold_with(&mut normalizer).into_ok();\n+        let result = value.fold_with(&mut normalizer);\n         info!(\n             \"normalize::<{}>: result={:?} with {} obligations\",\n             std::any::type_name::<T>(),\n@@ -100,11 +99,7 @@ impl<'cx, 'tcx> AtExt<'tcx> for At<'cx, 'tcx> {\n             std::any::type_name::<T>(),\n             normalizer.obligations,\n         );\n-        if normalizer.error {\n-            Err(NoSolution)\n-        } else {\n-            Ok(Normalized { value: result, obligations: normalizer.obligations })\n-        }\n+        result.map(|value| Normalized { value, obligations: normalizer.obligations })\n     }\n }\n \n@@ -171,12 +166,13 @@ struct QueryNormalizer<'cx, 'tcx> {\n     param_env: ty::ParamEnv<'tcx>,\n     obligations: Vec<PredicateObligation<'tcx>>,\n     cache: SsoHashMap<Ty<'tcx>, Ty<'tcx>>,\n-    error: bool,\n     anon_depth: usize,\n     universes: Vec<Option<ty::UniverseIndex>>,\n }\n \n impl<'cx, 'tcx> TypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n+    type Error = NoSolution;\n+\n     fn tcx<'c>(&'c self) -> TyCtxt<'tcx> {\n         self.infcx.tcx\n     }\n@@ -262,39 +258,22 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n                     .canonicalize_query_keep_static(self.param_env.and(data), &mut orig_values);\n                 debug!(\"QueryNormalizer: c_data = {:#?}\", c_data);\n                 debug!(\"QueryNormalizer: orig_values = {:#?}\", orig_values);\n-                match tcx.normalize_projection_ty(c_data) {\n-                    Ok(result) => {\n-                        // We don't expect ambiguity.\n-                        if result.is_ambiguous() {\n-                            self.error = true;\n-                            return ty.super_fold_with(self);\n-                        }\n-\n-                        match self.infcx.instantiate_query_response_and_region_obligations(\n-                            self.cause,\n-                            self.param_env,\n-                            &orig_values,\n-                            result,\n-                        ) {\n-                            Ok(InferOk { value: result, obligations }) => {\n-                                debug!(\"QueryNormalizer: result = {:#?}\", result);\n-                                debug!(\"QueryNormalizer: obligations = {:#?}\", obligations);\n-                                self.obligations.extend(obligations);\n-                                Ok(result.normalized_ty)\n-                            }\n-\n-                            Err(_) => {\n-                                self.error = true;\n-                                ty.super_fold_with(self)\n-                            }\n-                        }\n-                    }\n-\n-                    Err(NoSolution) => {\n-                        self.error = true;\n-                        ty.super_fold_with(self)\n-                    }\n+                let result = tcx.normalize_projection_ty(c_data)?;\n+                // We don't expect ambiguity.\n+                if result.is_ambiguous() {\n+                    return Err(NoSolution);\n                 }\n+                let InferOk { value: result, obligations } =\n+                    self.infcx.instantiate_query_response_and_region_obligations(\n+                        self.cause,\n+                        self.param_env,\n+                        &orig_values,\n+                        result,\n+                    )?;\n+                debug!(\"QueryNormalizer: result = {:#?}\", result);\n+                debug!(\"QueryNormalizer: obligations = {:#?}\", obligations);\n+                self.obligations.extend(obligations);\n+                Ok(result.normalized_ty)\n             }\n \n             ty::Projection(data) => {\n@@ -318,43 +297,29 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n                     .canonicalize_query_keep_static(self.param_env.and(data), &mut orig_values);\n                 debug!(\"QueryNormalizer: c_data = {:#?}\", c_data);\n                 debug!(\"QueryNormalizer: orig_values = {:#?}\", orig_values);\n-                match tcx.normalize_projection_ty(c_data) {\n-                    Ok(result) => {\n-                        // We don't expect ambiguity.\n-                        if result.is_ambiguous() {\n-                            self.error = true;\n-                            return ty.super_fold_with(self);\n-                        }\n-                        match self.infcx.instantiate_query_response_and_region_obligations(\n-                            self.cause,\n-                            self.param_env,\n-                            &orig_values,\n-                            result,\n-                        ) {\n-                            Ok(InferOk { value: result, obligations }) => {\n-                                debug!(\"QueryNormalizer: result = {:#?}\", result);\n-                                debug!(\"QueryNormalizer: obligations = {:#?}\", obligations);\n-                                self.obligations.extend(obligations);\n-                                Ok(crate::traits::project::PlaceholderReplacer::replace_placeholders(\n-                                    infcx,\n-                                    mapped_regions,\n-                                    mapped_types,\n-                                    mapped_consts,\n-                                    &self.universes,\n-                                    result.normalized_ty,\n-                                ))\n-                            }\n-                            Err(_) => {\n-                                self.error = true;\n-                                ty.super_fold_with(self)\n-                            }\n-                        }\n-                    }\n-                    Err(NoSolution) => {\n-                        self.error = true;\n-                        ty.super_fold_with(self)\n-                    }\n+                let result = tcx.normalize_projection_ty(c_data)?;\n+                // We don't expect ambiguity.\n+                if result.is_ambiguous() {\n+                    return Err(NoSolution);\n                 }\n+                let InferOk { value: result, obligations } =\n+                    self.infcx.instantiate_query_response_and_region_obligations(\n+                        self.cause,\n+                        self.param_env,\n+                        &orig_values,\n+                        result,\n+                    )?;\n+                debug!(\"QueryNormalizer: result = {:#?}\", result);\n+                debug!(\"QueryNormalizer: obligations = {:#?}\", obligations);\n+                self.obligations.extend(obligations);\n+                Ok(crate::traits::project::PlaceholderReplacer::replace_placeholders(\n+                    infcx,\n+                    mapped_regions,\n+                    mapped_types,\n+                    mapped_consts,\n+                    &self.universes,\n+                    result.normalized_ty,\n+                ))\n             }\n \n             _ => ty.super_fold_with(self),"}]}