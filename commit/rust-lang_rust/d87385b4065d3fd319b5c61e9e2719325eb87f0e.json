{"sha": "d87385b4065d3fd319b5c61e9e2719325eb87f0e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4NzM4NWI0MDY1ZDNmZDMxOWI1YzYxZTllMjcxOTMyNWViODdmMGU=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-04-15T09:35:20Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-04-15T11:01:10Z"}, "message": "Use approximate_suggestion for non-reducible closures", "tree": {"sha": "60337ec2e2bc694552d1a0ee3d8045b4b7d6d21d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60337ec2e2bc694552d1a0ee3d8045b4b7d6d21d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d87385b4065d3fd319b5c61e9e2719325eb87f0e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCAAGBQJa0zD2AAoJELb6Bqbg4mZb3C0QALKP+OcWYGqlFMAJTBrYqVQV\nESFNVArgfYTG0eu1ozdgxD8VRYalAAAhaRFj/a2r3n6QgigXGg4Ngy6am3/Iwrjs\naT7DXNR8eNqbu8HB9kxtuoKq3M5jsxskPVnhLyTHE5fL6moOcJvFcPuKpmsza7IK\nc+9/i1bAGFeMj34wQwK7emH7FVi2JX/ZD0LJU6Yues4hKuWDM460I/Bj1w9R7vEv\nz5dVWa3AwqpM6VX5PkM9LlCccqZTERSngAIIZ5wSPtv/6tWaLFDYNa1EBMKI0Kpp\nBO3iEjN07t4kCB6rMDAfJRAF/E9P0R4RmRSe614F/3MTER+lIWvqyoBhQFXbPLxn\nybGwarf/3v6mudSkJogUrHgxGYemeEWe/7PeOBpfyTExLWk4JgWmbO+jbnuBqLOg\ndq3Fy+KOx0oPrFaT29OcMyoulOdqnjgt6OJuUdDplpINCvoj7jKlpgUvItZYxxYF\nP4B+bAH4Ll6HPMqrGDiLF1SVG+Epgq9yYR0b06ZeVFygB+6g1Lgy+7SjHwp+Ta9e\nXvd80yPURoOibyjg/J9elIVoqsYDwNUzx4H4136jFn/4LGSBeHPDVOvEtWW3Q3kp\nRtjY8eD97/KckDez3G5665W9RPeqyhOXgRCNP91dr+FyjjleBHKqYi4B7XdqsEL3\nyUyyS1lXI85izsrlTQEH\n=39RG\n-----END PGP SIGNATURE-----", "payload": "tree 60337ec2e2bc694552d1a0ee3d8045b4b7d6d21d\nparent 7de707fdba126dfb1bea7c97ef5e18c9a879b799\nauthor Philipp Hansch <dev@phansch.net> 1523784920 +0200\ncommitter Philipp Hansch <dev@phansch.net> 1523790070 +0200\n\nUse approximate_suggestion for non-reducible closures\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d87385b4065d3fd319b5c61e9e2719325eb87f0e", "html_url": "https://github.com/rust-lang/rust/commit/d87385b4065d3fd319b5c61e9e2719325eb87f0e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d87385b4065d3fd319b5c61e9e2719325eb87f0e/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7de707fdba126dfb1bea7c97ef5e18c9a879b799", "url": "https://api.github.com/repos/rust-lang/rust/commits/7de707fdba126dfb1bea7c97ef5e18c9a879b799", "html_url": "https://github.com/rust-lang/rust/commit/7de707fdba126dfb1bea7c97ef5e18c9a879b799"}], "stats": {"total": 84, "additions": 67, "deletions": 17}, "files": [{"sha": "799576d01b04ba18b16500f6dbc48f49109b5bc2", "filename": "clippy_lints/src/option_map_unit_fn.rs", "status": "modified", "additions": 36, "deletions": 16, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/d87385b4065d3fd319b5c61e9e2719325eb87f0e/clippy_lints%2Fsrc%2Foption_map_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d87385b4065d3fd319b5c61e9e2719325eb87f0e/clippy_lints%2Fsrc%2Foption_map_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foption_map_unit_fn.rs?ref=d87385b4065d3fd319b5c61e9e2719325eb87f0e", "patch": "@@ -89,18 +89,27 @@ fn reduce_unit_expression<'a>(cx: &LateContext, expr: &'a hir::Expr) -> Option<S\n         hir::ExprBlock(ref block) => {\n             match (&block.stmts[..], block.expr.as_ref()) {\n                 (&[], Some(inner_expr)) => {\n-                    // Reduce `{ X }` to `X`\n+                    // If block only contains an expression,\n+                    // reduce `{ X }` to `X`\n                     reduce_unit_expression(cx, inner_expr)\n                 },\n                 (&[ref inner_stmt], None) => {\n-                    // Reduce `{ X; }` to `X` or `X;`\n+                    // If block only contains statements,\n+                    // reduce `{ X; }` to `X` or `X;`\n                     match inner_stmt.node {\n                         hir::StmtDecl(ref d, _) => Some(d.span),\n                         hir::StmtExpr(ref e, _) => Some(e.span),\n                         hir::StmtSemi(_, _) => Some(inner_stmt.span),\n                     }\n                 },\n-                _ => None,\n+                _ => {\n+                    // For closures that contain multiple statements\n+                    // it's difficult to get a correct suggestion span\n+                    // for all cases (multi-line closures specifically)\n+                    //\n+                    // We do not attempt to build a suggestion for those right now.\n+                    None\n+                }\n             }\n         },\n         _ => None,\n@@ -142,25 +151,36 @@ fn lint_map_unit_fn(cx: &LateContext, stmt: &hir::Stmt, expr: &hir::Expr, map_ar\n                            OPTION_MAP_UNIT_FN,\n                            expr.span,\n                            msg,\n-                           |db| { db.span_suggestion(stmt.span, \"try this\", suggestion); });\n+                           |db| { db.span_approximate_suggestion(stmt.span, \"try this\", suggestion); });\n     } else if let Some((binding, closure_expr)) = unit_closure(cx, fn_arg) {\n         let msg = \"called `map(f)` on an Option value where `f` is a unit closure\";\n+\n+        enum Suggestion {\n+            Full(String),\n+            Approx(String)\n+        }\n+\n         let suggestion = if let Some(expr_span) = reduce_unit_expression(cx, closure_expr) {\n-            format!(\"if let Some({0}) = {1} {{ {2} }}\",\n-                    snippet(cx, binding.pat.span, \"_\"),\n-                    snippet(cx, var_arg.span, \"_\"),\n-                    snippet(cx, expr_span, \"_\"))\n+            Suggestion::Full(\n+                format!(\"if let Some({0}) = {1} {{ {2} }}\",\n+                        snippet(cx, binding.pat.span, \"_\"),\n+                        snippet(cx, var_arg.span, \"_\"),\n+                        snippet(cx, expr_span, \"_\"))\n+            )\n         } else {\n-            format!(\"if let Some({0}) = {1} {{ ... }}\",\n-                    snippet(cx, binding.pat.span, \"_\"),\n-                    snippet(cx, var_arg.span, \"_\"))\n+            Suggestion::Approx(\n+                format!(\"if let Some({0}) = {1} {{ ... }}\",\n+                        snippet(cx, binding.pat.span, \"_\"),\n+                        snippet(cx, var_arg.span, \"_\"))\n+            )\n         };\n \n-        span_lint_and_then(cx,\n-                           OPTION_MAP_UNIT_FN,\n-                           expr.span,\n-                           msg,\n-                           |db| { db.span_suggestion(stmt.span, \"try this\", suggestion); });\n+        span_lint_and_then(cx, OPTION_MAP_UNIT_FN, expr.span, msg, |db| {\n+            match suggestion {\n+                Suggestion::Full(sugg) => db.span_suggestion(stmt.span, \"try this\", sugg),\n+                Suggestion::Approx(sugg) => db.span_approximate_suggestion(stmt.span, \"try this\", sugg),\n+            };\n+        });\n     }\n }\n "}, {"sha": "595f65d2bbb6b3dfa8caf973919cd3012067b069", "filename": "tests/ui/option_map_unit_fn.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d87385b4065d3fd319b5c61e9e2719325eb87f0e/tests%2Fui%2Foption_map_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d87385b4065d3fd319b5c61e9e2719325eb87f0e/tests%2Fui%2Foption_map_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_map_unit_fn.rs?ref=d87385b4065d3fd319b5c61e9e2719325eb87f0e", "patch": "@@ -78,4 +78,12 @@ fn main() {\n     x.field.map(|value| { do_nothing(value); do_nothing(value) });\n \n     x.field.map(|value| if value > 0 { do_nothing(value); do_nothing(value) });\n+\n+    // Suggestion for the let block should be `{ ... }` as it's too difficult to build a\n+    // proper suggestion for these cases\n+    x.field.map(|value| {\n+        do_nothing(value);\n+        do_nothing(value)\n+    });\n+    x.field.map(|value| { do_nothing(value); do_nothing(value); });\n }"}, {"sha": "10320a5a920815a351f8560ab2c7009461956fad", "filename": "tests/ui/option_map_unit_fn.stderr", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d87385b4065d3fd319b5c61e9e2719325eb87f0e/tests%2Fui%2Foption_map_unit_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d87385b4065d3fd319b5c61e9e2719325eb87f0e/tests%2Fui%2Foption_map_unit_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_map_unit_fn.stderr?ref=d87385b4065d3fd319b5c61e9e2719325eb87f0e", "patch": "@@ -152,5 +152,27 @@ error: called `map(f)` on an Option value where `f` is a unit closure\n    |     |\n    |     help: try this: `if let Some(value) = x.field { ... }`\n \n-error: aborting due to 19 previous errors\n+error: called `map(f)` on an Option value where `f` is a unit closure\n+  --> $DIR/option_map_unit_fn.rs:84:5\n+   |\n+84 |        x.field.map(|value| {\n+   |   _____^\n+   |  |_____|\n+   | ||\n+85 | ||         do_nothing(value);\n+86 | ||         do_nothing(value)\n+87 | ||     });\n+   | ||______^- help: try this: `if let Some(value) = x.field { ... }`\n+   | |_______|\n+   |\n+\n+error: called `map(f)` on an Option value where `f` is a unit closure\n+  --> $DIR/option_map_unit_fn.rs:88:5\n+   |\n+88 |     x.field.map(|value| { do_nothing(value); do_nothing(value); });\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |     |\n+   |     help: try this: `if let Some(value) = x.field { ... }`\n+\n+error: aborting due to 21 previous errors\n "}]}