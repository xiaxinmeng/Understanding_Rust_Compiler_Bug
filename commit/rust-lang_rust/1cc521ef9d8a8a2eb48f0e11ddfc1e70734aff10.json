{"sha": "1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjYzUyMWVmOWQ4YThhMmViNDhmMGUxMWRkZmMxZTcwNzM0YWZmMTA=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-02-14T16:54:40Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-03-26T15:49:22Z"}, "message": "Update tests to use llvm_asm!", "tree": {"sha": "18eb30e68fcad637f35fe20bf83326b054171a94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18eb30e68fcad637f35fe20bf83326b054171a94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "html_url": "https://github.com/rust-lang/rust/commit/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d162d096ddf7972819e5b700890726a2ea85f272", "url": "https://api.github.com/repos/rust-lang/rust/commits/d162d096ddf7972819e5b700890726a2ea85f272", "html_url": "https://github.com/rust-lang/rust/commit/d162d096ddf7972819e5b700890726a2ea85f272"}], "stats": {"total": 822, "additions": 421, "deletions": 401}, "files": [{"sha": "3b43a1bcae9e6003ecee6c8a40562e83e6af166b", "filename": "src/librustc_error_codes/error_codes/E0668.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Flibrustc_error_codes%2Ferror_codes%2FE0668.md", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Flibrustc_error_codes%2Ferror_codes%2FE0668.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0668.md?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -7,7 +7,7 @@ assembly call.\n In particular, it can happen if you forgot the closing bracket of a register\n constraint (see issue #51430):\n ```compile_fail,E0668\n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n fn main() {\n     let rax: u64;"}, {"sha": "40376218908d10d41cfc0d44a085ea6fa055cf0e", "filename": "src/test/codegen/no-output-asm-is-volatile.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fcodegen%2Fno-output-asm-is-volatile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fcodegen%2Fno-output-asm-is-volatile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fno-output-asm-is-volatile.rs?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -1,6 +1,6 @@\n // compile-flags: -O\n \n-#![feature(asm)]\n+#![feature(llvm_asm)]\n #![crate_type = \"lib\"]\n \n // Check that inline assembly expressions without any outputs\n@@ -9,6 +9,6 @@\n // CHECK-LABEL: @assembly\n #[no_mangle]\n pub fn assembly() {\n-    unsafe { asm!(\"\") }\n+    unsafe { llvm_asm!(\"\") }\n // CHECK: tail call void asm sideeffect \"\", {{.*}}\n }"}, {"sha": "c9415aed930d5ad85290ff8a96a74e3f59b1d1f2", "filename": "src/test/compile-fail/asm-src-loc-codegen-units.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fcompile-fail%2Fasm-src-loc-codegen-units.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fcompile-fail%2Fasm-src-loc-codegen-units.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-src-loc-codegen-units.rs?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -3,10 +3,10 @@\n // compile-flags: -C codegen-units=2\n // ignore-emscripten\n \n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n fn main() {\n     unsafe {\n-        asm!(\"nowayisthisavalidinstruction\"); //~ ERROR instruction\n+        llvm_asm!(\"nowayisthisavalidinstruction\"); //~ ERROR instruction\n     }\n }"}, {"sha": "7c87f370d4f6894640a2e3edba0213efea63d9d4", "filename": "src/test/compile-fail/asm-src-loc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fcompile-fail%2Fasm-src-loc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fcompile-fail%2Fasm-src-loc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-src-loc.rs?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -1,9 +1,9 @@\n // ignore-emscripten\n \n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n fn main() {\n     unsafe {\n-        asm!(\"nowayisthisavalidinstruction\"); //~ ERROR instruction\n+        llvm_asm!(\"nowayisthisavalidinstruction\"); //~ ERROR instruction\n     }\n }"}, {"sha": "3eaffc440615f73cf1d490f460f32a371404111f", "filename": "src/test/incremental/hashes/inline_asm.rs", "status": "modified", "additions": 73, "deletions": 73, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fincremental%2Fhashes%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fincremental%2Fhashes%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Finline_asm.rs?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -11,7 +11,7 @@\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]\n-#![feature(asm)]\n+#![feature(llvm_asm)]\n #![crate_type=\"rlib\"]\n \n \n@@ -22,12 +22,12 @@\n pub fn change_template(a: i32) -> i32 {\n     let c: i32;\n     unsafe {\n-        asm!(\"add 1, $0\"\n-             : \"=r\"(c)\n-             : \"0\"(a)\n-             :\n-             :\n-             );\n+        llvm_asm!(\"add 1, $0\"\n+                  : \"=r\"(c)\n+                  : \"0\"(a)\n+                  :\n+                  :\n+                  );\n     }\n     c\n }\n@@ -39,12 +39,12 @@ pub fn change_template(a: i32) -> i32 {\n pub fn change_template(a: i32) -> i32 {\n     let c: i32;\n     unsafe {\n-        asm!(\"add 2, $0\"\n-             : \"=r\"(c)\n-             : \"0\"(a)\n-             :\n-             :\n-             );\n+        llvm_asm!(\"add 2, $0\"\n+                  : \"=r\"(c)\n+                  : \"0\"(a)\n+                  :\n+                  :\n+                  );\n     }\n     c\n }\n@@ -58,12 +58,12 @@ pub fn change_output(a: i32) -> i32 {\n     let mut _out1: i32 = 0;\n     let mut _out2: i32 = 0;\n     unsafe {\n-        asm!(\"add 1, $0\"\n-             : \"=r\"(_out1)\n-             : \"0\"(a)\n-             :\n-             :\n-             );\n+        llvm_asm!(\"add 1, $0\"\n+                  : \"=r\"(_out1)\n+                  : \"0\"(a)\n+                  :\n+                  :\n+                  );\n     }\n     _out1\n }\n@@ -76,12 +76,12 @@ pub fn change_output(a: i32) -> i32 {\n     let mut _out1: i32 = 0;\n     let mut _out2: i32 = 0;\n     unsafe {\n-        asm!(\"add 1, $0\"\n-             : \"=r\"(_out2)\n-             : \"0\"(a)\n-             :\n-             :\n-             );\n+        llvm_asm!(\"add 1, $0\"\n+                  : \"=r\"(_out2)\n+                  : \"0\"(a)\n+                  :\n+                  :\n+                  );\n     }\n     _out1\n }\n@@ -94,12 +94,12 @@ pub fn change_output(a: i32) -> i32 {\n pub fn change_input(_a: i32, _b: i32) -> i32 {\n     let _out;\n     unsafe {\n-        asm!(\"add 1, $0\"\n-             : \"=r\"(_out)\n-             : \"0\"(_a)\n-             :\n-             :\n-             );\n+        llvm_asm!(\"add 1, $0\"\n+                  : \"=r\"(_out)\n+                  : \"0\"(_a)\n+                  :\n+                  :\n+                  );\n     }\n     _out\n }\n@@ -111,12 +111,12 @@ pub fn change_input(_a: i32, _b: i32) -> i32 {\n pub fn change_input(_a: i32, _b: i32) -> i32 {\n     let _out;\n     unsafe {\n-        asm!(\"add 1, $0\"\n-             : \"=r\"(_out)\n-             : \"0\"(_b)\n-             :\n-             :\n-             );\n+        llvm_asm!(\"add 1, $0\"\n+                  : \"=r\"(_out)\n+                  : \"0\"(_b)\n+                  :\n+                  :\n+                  );\n     }\n     _out\n }\n@@ -129,12 +129,12 @@ pub fn change_input(_a: i32, _b: i32) -> i32 {\n pub fn change_input_constraint(_a: i32, _b: i32) -> i32 {\n     let _out;\n     unsafe {\n-        asm!(\"add 1, $0\"\n-             : \"=r\"(_out)\n-             : \"0\"(_a), \"r\"(_b)\n-             :\n-             :\n-             );\n+        llvm_asm!(\"add 1, $0\"\n+                  : \"=r\"(_out)\n+                  : \"0\"(_a), \"r\"(_b)\n+                  :\n+                  :\n+                  );\n     }\n     _out\n }\n@@ -146,12 +146,12 @@ pub fn change_input_constraint(_a: i32, _b: i32) -> i32 {\n pub fn change_input_constraint(_a: i32, _b: i32) -> i32 {\n     let _out;\n     unsafe {\n-        asm!(\"add 1, $0\"\n-             : \"=r\"(_out)\n-             : \"r\"(_a), \"0\"(_b)\n-             :\n-             :\n-             );\n+        llvm_asm!(\"add 1, $0\"\n+                  : \"=r\"(_out)\n+                  : \"r\"(_a), \"0\"(_b)\n+                  :\n+                  :\n+                  );\n     }\n     _out\n }\n@@ -164,12 +164,12 @@ pub fn change_input_constraint(_a: i32, _b: i32) -> i32 {\n pub fn change_clobber(_a: i32) -> i32 {\n     let _out;\n     unsafe {\n-        asm!(\"add 1, $0\"\n-             : \"=r\"(_out)\n-             : \"0\"(_a)\n-             :\n-             :\n-             );\n+        llvm_asm!(\"add 1, $0\"\n+                  : \"=r\"(_out)\n+                  : \"0\"(_a)\n+                  :\n+                  :\n+                  );\n     }\n     _out\n }\n@@ -181,12 +181,12 @@ pub fn change_clobber(_a: i32) -> i32 {\n pub fn change_clobber(_a: i32) -> i32 {\n     let _out;\n     unsafe {\n-        asm!(\"add 1, $0\"\n-             : \"=r\"(_out)\n-             : \"0\"(_a)\n-             : \"eax\"\n-             :\n-             );\n+        llvm_asm!(\"add 1, $0\"\n+                  : \"=r\"(_out)\n+                  : \"0\"(_a)\n+                  : \"eax\"\n+                  :\n+                  );\n     }\n     _out\n }\n@@ -199,12 +199,12 @@ pub fn change_clobber(_a: i32) -> i32 {\n pub fn change_options(_a: i32) -> i32 {\n     let _out;\n     unsafe {\n-        asm!(\"add 1, $0\"\n-             : \"=r\"(_out)\n-             : \"0\"(_a)\n-             :\n-             :\n-             );\n+        llvm_asm!(\"add 1, $0\"\n+                  : \"=r\"(_out)\n+                  : \"0\"(_a)\n+                  :\n+                  :\n+                  );\n     }\n     _out\n }\n@@ -216,12 +216,12 @@ pub fn change_options(_a: i32) -> i32 {\n pub fn change_options(_a: i32) -> i32 {\n     let _out;\n     unsafe {\n-        asm!(\"add 1, $0\"\n-             : \"=r\"(_out)\n-             : \"0\"(_a)\n-             :\n-             : \"volatile\"\n-             );\n+        llvm_asm!(\"add 1, $0\"\n+                  : \"=r\"(_out)\n+                  : \"0\"(_a)\n+                  :\n+                  : \"volatile\"\n+                  );\n     }\n     _out\n }"}, {"sha": "990141657f467bf7df83cafce279a0648a2901dc", "filename": "src/test/mir-opt/unreachable_asm.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fmir-opt%2Funreachable_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fmir-opt%2Funreachable_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable_asm.rs?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -1,5 +1,5 @@\n // ignore-tidy-linelength\n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n enum Empty {}\n \n@@ -18,7 +18,7 @@ fn main() {\n         }\n \n         // asm instruction stops unreachable propagation to if else blocks bb4 and bb5.\n-        unsafe { asm!(\"NOP\"); }\n+        unsafe { llvm_asm!(\"NOP\"); }\n         match _x { }\n     }\n }\n@@ -39,7 +39,7 @@ fn main() {\n //          StorageDead(_6);\n //          StorageDead(_5);\n //          StorageLive(_7);\n-//          asm!(InlineAsmInner { asm: \"NOP\", asm_str_style: Cooked, outputs: [], inputs: [], clobbers: [], volatile: true, alignstack: false, dialect: Att } : [] : []);\n+//          llvm_asm!(LlvmInlineAsmInner { asm: \"NOP\", asm_str_style: Cooked, outputs: [], inputs: [], clobbers: [], volatile: true, alignstack: false, dialect: Att } : [] : []);\n //          _7 = ();\n //          StorageDead(_7);\n //          StorageLive(_8);\n@@ -62,7 +62,7 @@ fn main() {\n //          StorageDead(_6);\n //          StorageDead(_5);\n //          StorageLive(_7);\n-//          asm!(InlineAsmInner { asm: \"NOP\", asm_str_style: Cooked, outputs: [], inputs: [], clobbers: [], volatile: true, alignstack: false, dialect: Att } : [] : []);\n+//          llvm_asm!(LlvmInlineAsmInner { asm: \"NOP\", asm_str_style: Cooked, outputs: [], inputs: [], clobbers: [], volatile: true, alignstack: false, dialect: Att } : [] : []);\n //          _7 = ();\n //          StorageDead(_7);\n //          StorageLive(_8);"}, {"sha": "0851e24d410e72d82c81e76c2fdd1702504c8aaa", "filename": "src/test/mir-opt/unreachable_asm_2.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fmir-opt%2Funreachable_asm_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fmir-opt%2Funreachable_asm_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable_asm_2.rs?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -1,5 +1,5 @@\n // ignore-tidy-linelength\n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n enum Empty {}\n \n@@ -13,11 +13,11 @@ fn main() {\n \n         if true {\n             // asm instruction stops unreachable propagation to block bb3.\n-            unsafe { asm!(\"NOP\"); }\n+            unsafe { llvm_asm!(\"NOP\"); }\n             _y = 21;\n         } else {\n             // asm instruction stops unreachable propagation to block bb3.\n-            unsafe { asm!(\"NOP\"); }\n+            unsafe { llvm_asm!(\"NOP\"); }\n             _y = 42;\n         }\n \n@@ -33,7 +33,7 @@ fn main() {\n //      }\n //      bb4: {\n //          StorageLive(_8);\n-//          asm!(InlineAsmInner { asm: \"NOP\", asm_str_style: Cooked, outputs: [], inputs: [], clobbers: [], volatile: true, alignstack: false, dialect: Att } : [] : []);\n+//          llvm_asm!(LlvmInlineAsmInner { asm: \"NOP\", asm_str_style: Cooked, outputs: [], inputs: [], clobbers: [], volatile: true, alignstack: false, dialect: Att } : [] : []);\n //          _8 = ();\n //          StorageDead(_8);\n //          _4 = const 42i32;\n@@ -42,7 +42,7 @@ fn main() {\n //      }\n //          bb5: {\n //          StorageLive(_7);\n-//          asm!(InlineAsmInner { asm: \"NOP\", asm_str_style: Cooked, outputs: [], inputs: [], clobbers: [], volatile: true, alignstack: false, dialect: Att } : [] : []);\n+//          llvm_asm!(LlvmInlineAsmInner { asm: \"NOP\", asm_str_style: Cooked, outputs: [], inputs: [], clobbers: [], volatile: true, alignstack: false, dialect: Att } : [] : []);\n //          _7 = ();\n //          StorageDead(_7);\n //          _4 = const 21i32;\n@@ -64,7 +64,7 @@ fn main() {\n //      }\n //      bb4: {\n //          StorageLive(_8);\n-//          asm!(InlineAsmInner { asm: \"NOP\", asm_str_style: Cooked, outputs: [], inputs: [], clobbers: [], volatile: true, alignstack: false, dialect: Att } : [] : []);\n+//          llvm_asm!(LlvmInlineAsmInner { asm: \"NOP\", asm_str_style: Cooked, outputs: [], inputs: [], clobbers: [], volatile: true, alignstack: false, dialect: Att } : [] : []);\n //          _8 = ();\n //          StorageDead(_8);\n //          _4 = const 42i32;\n@@ -73,7 +73,7 @@ fn main() {\n //      }\n //          bb5: {\n //          StorageLive(_7);\n-//          asm!(InlineAsmInner { asm: \"NOP\", asm_str_style: Cooked, outputs: [], inputs: [], clobbers: [], volatile: true, alignstack: false, dialect: Att } : [] : []);\n+//          llvm_asm!(LlvmInlineAsmInner { asm: \"NOP\", asm_str_style: Cooked, outputs: [], inputs: [], clobbers: [], volatile: true, alignstack: false, dialect: Att } : [] : []);\n //          _7 = ();\n //          StorageDead(_7);\n //          _4 = const 21i32;"}, {"sha": "2c09646e47e4ab1b421af5b9a1e9bea1360733a5", "filename": "src/test/pretty/asm-clobbers.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fpretty%2Fasm-clobbers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fpretty%2Fasm-clobbers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fasm-clobbers.rs?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -1,3 +1,3 @@\n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n-pub fn main() { unsafe { asm!(\"\" : : : \"hello\", \"world\") }; }\n+pub fn main() { unsafe { llvm_asm!(\"\" : : : \"hello\", \"world\") }; }"}, {"sha": "86a881bfbd18a8f201d2e532dfb0522e0763fc7b", "filename": "src/test/pretty/asm-options.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fpretty%2Fasm-options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fpretty%2Fasm-options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fasm-options.rs?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -1,11 +1,11 @@\n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n // pp-exact\n \n pub fn main() {\n     unsafe {\n-        asm!(\"\" : : : : \"volatile\");\n-        asm!(\"\" : : : : \"alignstack\");\n-        asm!(\"\" : : : : \"intel\");\n+        llvm_asm!(\"\" : : : : \"volatile\");\n+        llvm_asm!(\"\" : : : : \"alignstack\");\n+        llvm_asm!(\"\" : : : : \"intel\");\n     }\n }"}, {"sha": "41227898f24a8fcfcbd57e425b6cdbd49928b0c1", "filename": "src/test/pretty/raw-str-nonexpr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fpretty%2Fraw-str-nonexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fpretty%2Fraw-str-nonexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fraw-str-nonexpr.rs?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -1,8 +1,8 @@\n // pp-exact\n \n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n #[cfg(foo = r#\"just parse this\"#)]\n extern crate blah as blah;\n \n-fn main() { unsafe { asm!(r###\"blah\"###); } }\n+fn main() { unsafe { llvm_asm!(r###\"blah\"###); } }"}, {"sha": "2e81667cf39c6f6f95e425063ed2ea1cfc3dae8d", "filename": "src/test/run-make-fulldeps/intrinsic-unreachable/exit-ret.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Frun-make-fulldeps%2Fintrinsic-unreachable%2Fexit-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Frun-make-fulldeps%2Fintrinsic-unreachable%2Fexit-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fintrinsic-unreachable%2Fexit-ret.rs?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -1,11 +1,11 @@\n-#![feature(asm)]\n+#![feature(llvm_asm)]\n #![crate_type=\"lib\"]\n \n #[deny(unreachable_code)]\n pub fn exit(n: usize) -> i32 {\n     unsafe {\n         // Pretend this asm is an exit() syscall.\n-        asm!(\"\" :: \"r\"(n) :: \"volatile\");\n+        llvm_asm!(\"\" :: \"r\"(n) :: \"volatile\");\n         // Can't actually reach this point, but rustc doesn't know that.\n     }\n     // This return value is just here to generate some extra code for a return"}, {"sha": "fb3848b0db617aead09adef1525ec4a728d17bb4", "filename": "src/test/run-make-fulldeps/intrinsic-unreachable/exit-unreachable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Frun-make-fulldeps%2Fintrinsic-unreachable%2Fexit-unreachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Frun-make-fulldeps%2Fintrinsic-unreachable%2Fexit-unreachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fintrinsic-unreachable%2Fexit-unreachable.rs?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -1,4 +1,4 @@\n-#![feature(asm, core_intrinsics)]\n+#![feature(llvm_asm, core_intrinsics)]\n #![crate_type=\"lib\"]\n \n use std::intrinsics;\n@@ -7,7 +7,7 @@ use std::intrinsics;\n pub fn exit(n: usize) -> i32 {\n     unsafe {\n         // Pretend this asm is an exit() syscall.\n-        asm!(\"\" :: \"r\"(n) :: \"volatile\");\n+        llvm_asm!(\"\" :: \"r\"(n) :: \"volatile\");\n         intrinsics::unreachable()\n     }\n     // This return value is just here to generate some extra code for a return"}, {"sha": "fcdff59ffa984cd9b9b58754248715aabd437891", "filename": "src/test/ui/abi/abi-sysv64-register-usage.rs", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fabi%2Fabi-sysv64-register-usage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fabi%2Fabi-sysv64-register-usage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fabi-sysv64-register-usage.rs?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -6,7 +6,7 @@\n // ignore-arm\n // ignore-aarch64\n \n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n #[cfg(target_arch = \"x86_64\")]\n pub extern \"sysv64\" fn all_the_registers(rdi: i64, rsi: i64, rdx: i64,\n@@ -54,34 +54,34 @@ pub extern \"sysv64\" fn large_struct_by_val(mut foo: LargeStruct) -> LargeStruct\n pub fn main() {\n     let result: i64;\n     unsafe {\n-        asm!(\"mov rdi, 1;\n-              mov rsi, 2;\n-              mov rdx, 3;\n-              mov rcx, 4;\n-              mov r8,  5;\n-              mov r9,  6;\n-              mov eax, 0x3F800000;\n-              movd xmm0, eax;\n-              mov eax, 0x40000000;\n-              movd xmm1, eax;\n-              mov eax, 0x40800000;\n-              movd xmm2, eax;\n-              mov eax, 0x41000000;\n-              movd xmm3, eax;\n-              mov eax, 0x41800000;\n-              movd xmm4, eax;\n-              mov eax, 0x42000000;\n-              movd xmm5, eax;\n-              mov eax, 0x42800000;\n-              movd xmm6, eax;\n-              mov eax, 0x43000000;\n-              movd xmm7, eax;\n-              call r10\n-              \"\n-            : \"={rax}\"(result)\n-            : \"{r10}\"(all_the_registers as usize)\n-            : \"rdi\", \"rsi\", \"rdx\", \"rcx\", \"r8\", \"r9\", \"r11\", \"cc\", \"memory\"\n-            : \"intel\", \"alignstack\"\n+        llvm_asm!(\"mov rdi, 1;\n+                   mov rsi, 2;\n+                   mov rdx, 3;\n+                   mov rcx, 4;\n+                   mov r8,  5;\n+                   mov r9,  6;\n+                   mov eax, 0x3F800000;\n+                   movd xmm0, eax;\n+                   mov eax, 0x40000000;\n+                   movd xmm1, eax;\n+                   mov eax, 0x40800000;\n+                   movd xmm2, eax;\n+                   mov eax, 0x41000000;\n+                   movd xmm3, eax;\n+                   mov eax, 0x41800000;\n+                   movd xmm4, eax;\n+                   mov eax, 0x42000000;\n+                   movd xmm5, eax;\n+                   mov eax, 0x42800000;\n+                   movd xmm6, eax;\n+                   mov eax, 0x43000000;\n+                   movd xmm7, eax;\n+                   call r10\n+                   \"\n+                 : \"={rax}\"(result)\n+                 : \"{r10}\"(all_the_registers as usize)\n+                 : \"rdi\", \"rsi\", \"rdx\", \"rcx\", \"r8\", \"r9\", \"r11\", \"cc\", \"memory\"\n+                 : \"intel\", \"alignstack\"\n         )\n     }\n     assert_eq!(result, 42);"}, {"sha": "1dc1c859c6b0e3645ef11fbcdd53870019d42f5f", "filename": "src/test/ui/asm-concat-src.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fasm-concat-src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fasm-concat-src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm-concat-src.rs?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -2,8 +2,8 @@\n // pretty-expanded FIXME #23616\n // ignore-emscripten no asm\n \n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n pub fn main() {\n-    unsafe { asm!(concat!(\"\", \"\")) };\n+    unsafe { llvm_asm!(concat!(\"\", \"\")) };\n }"}, {"sha": "35f4d92c8ffbcf6ff9b22721c679f00831395a68", "filename": "src/test/ui/asm-in-moved.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fasm-in-moved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fasm-in-moved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm-in-moved.rs?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n \n-#![feature(asm)]\n+#![feature(llvm_asm)]\n #![allow(dead_code)]\n \n use std::cell::Cell;\n@@ -20,7 +20,7 @@ fn main() {\n         let _y: Box<NoisyDrop>;\n         let x = Box::new(NoisyDrop(&status));\n         unsafe {\n-            asm!(\"mov $1, $0\" : \"=r\"(_y) : \"r\"(x));\n+            llvm_asm!(\"mov $1, $0\" : \"=r\"(_y) : \"r\"(x));\n         }\n         assert_eq!(status.get(), \"alive\");\n     }"}, {"sha": "acefabd8a666e0385a9092cc4ecfd3bc58e5782b", "filename": "src/test/ui/asm-in-out-operand.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fasm-in-out-operand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fasm-in-out-operand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm-in-out-operand.rs?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -1,21 +1,21 @@\n // run-pass\n \n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n unsafe fn next_power_of_2(n: u32) -> u32 {\n     let mut tmp = n;\n-    asm!(\"dec $0\" : \"+rm\"(tmp) :: \"cc\");\n+    llvm_asm!(\"dec $0\" : \"+rm\"(tmp) :: \"cc\");\n     let mut shift = 1_u32;\n     while shift <= 16 {\n-        asm!(\n+        llvm_asm!(\n             \"shr %cl, $2\n             or $2, $0\n             shl $$1, $1\"\n             : \"+&rm\"(tmp), \"+{ecx}\"(shift) : \"r\"(tmp) : \"cc\"\n         );\n     }\n-    asm!(\"inc $0\" : \"+rm\"(tmp) :: \"cc\");\n+    llvm_asm!(\"inc $0\" : \"+rm\"(tmp) :: \"cc\");\n     return tmp;\n }\n \n@@ -30,7 +30,7 @@ pub fn main() {\n     let x: isize;\n     unsafe {\n         // Treat the output as initialization.\n-        asm!(\n+        llvm_asm!(\n             \"shl $2, $1\n             add $3, $1\n             mov $1, $0\"\n@@ -47,7 +47,7 @@ pub fn main() {\n         // Assignment to mutable.\n         // Early clobber \"&\":\n         // Forbids the use of a single register by both operands.\n-        asm!(\"shr $$2, $1; add $1, $0\" : \"+&r\"(x) : \"r\"(x) : \"cc\");\n+        llvm_asm!(\"shr $$2, $1; add $1, $0\" : \"+&r\"(x) : \"r\"(x) : \"cc\");\n     }\n     assert_eq!(x, 60);\n }"}, {"sha": "556ad83a4ead8202d76062e286161a15efa49657", "filename": "src/test/ui/asm-indirect-memory.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fasm-indirect-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fasm-indirect-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm-indirect-memory.rs?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -1,28 +1,28 @@\n // run-pass\n \n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n fn read(ptr: &u32) -> u32 {\n     let out: u32;\n     unsafe {\n-        asm!(\"mov $1, $0\" : \"=r\" (out) : \"*m\" (ptr));\n+        llvm_asm!(\"mov $1, $0\" : \"=r\" (out) : \"*m\" (ptr));\n     }\n     out\n }\n \n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n fn write(ptr: &mut u32, val: u32) {\n     unsafe {\n-        asm!(\"mov $1, $0\" : \"=*m\" (ptr) : \"r\" (val));\n+        llvm_asm!(\"mov $1, $0\" : \"=*m\" (ptr) : \"r\" (val));\n     }\n }\n \n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n fn replace(ptr: &mut u32, val: u32) -> u32 {\n     let out: u32;\n     unsafe {\n-        asm!(\"mov $0, $1; mov $2, $0\" : \"+*m\" (ptr), \"=&r\" (out) : \"r\" (val));\n+        llvm_asm!(\"mov $0, $1; mov $2, $0\" : \"+*m\" (ptr), \"=&r\" (out) : \"r\" (val));\n     }\n     out\n }"}, {"sha": "321f28565ff180d3c2810da8e76f9c82c53d22f5", "filename": "src/test/ui/asm-out-assign.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fasm-out-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fasm-out-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm-out-assign.rs?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -1,13 +1,13 @@\n // run-pass\n \n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n pub fn main() {\n     let x: isize;\n     unsafe {\n         // Treat the output as initialization.\n-        asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5_usize));\n+        llvm_asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5_usize));\n     }\n     assert_eq!(x, 5);\n \n@@ -16,7 +16,7 @@ pub fn main() {\n \n     unsafe {\n         // Assignment to mutable.\n-        asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(x + 7));\n+        llvm_asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(x + 7));\n     }\n     assert_eq!(x, 13);\n }"}, {"sha": "9f5662cbd1e93604784b25b7926d57886999aca2", "filename": "src/test/ui/asm/asm-bad-clobber.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fasm%2Fasm-bad-clobber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fasm%2Fasm-bad-clobber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-bad-clobber.rs?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -11,15 +11,15 @@\n // ignore-mips\n // ignore-mips64\n \n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n #[cfg(any(target_arch = \"x86\",\n           target_arch = \"x86_64\"))]\n \n pub fn main() {\n     unsafe {\n         // clobber formatted as register input/output\n-        asm!(\"xor %eax, %eax\" : : : \"{eax}\");\n+        llvm_asm!(\"xor %eax, %eax\" : : : \"{eax}\");\n         //~^ ERROR clobber should not be surrounded by braces\n     }\n }"}, {"sha": "8c5d04694c497ea61d588882d7089367c356c1f3", "filename": "src/test/ui/asm/asm-bad-clobber.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fasm%2Fasm-bad-clobber.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fasm%2Fasm-bad-clobber.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-bad-clobber.stderr?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -1,8 +1,8 @@\n error[E0664]: clobber should not be surrounded by braces\n-  --> $DIR/asm-bad-clobber.rs:22:37\n+  --> $DIR/asm-bad-clobber.rs:22:42\n    |\n-LL |         asm!(\"xor %eax, %eax\" : : : \"{eax}\");\n-   |                                     ^^^^^^^\n+LL |         llvm_asm!(\"xor %eax, %eax\" : : : \"{eax}\");\n+   |                                          ^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "b791ec3e8c8b1eff6e456018a8b866ef7d569f59", "filename": "src/test/ui/asm/asm-in-bad-modifier.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fasm%2Fasm-in-bad-modifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fasm%2Fasm-in-bad-modifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-in-bad-modifier.rs?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -8,7 +8,7 @@\n // ignore-mips\n // ignore-mips64\n \n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n fn foo(x: isize) { println!(\"{}\", x); }\n \n@@ -20,8 +20,8 @@ pub fn main() {\n     let x: isize;\n     let y: isize;\n     unsafe {\n-        asm!(\"mov $1, $0\" : \"=r\"(x) : \"=r\"(5)); //~ ERROR operand constraint contains '='\n-        asm!(\"mov $1, $0\" : \"=r\"(y) : \"+r\"(5)); //~ ERROR operand constraint contains '+'\n+        llvm_asm!(\"mov $1, $0\" : \"=r\"(x) : \"=r\"(5)); //~ ERROR operand constraint contains '='\n+        llvm_asm!(\"mov $1, $0\" : \"=r\"(y) : \"+r\"(5)); //~ ERROR operand constraint contains '+'\n     }\n     foo(x);\n     foo(y);"}, {"sha": "f1624f74a70acf7566b1c1246c61b1bc954208cf", "filename": "src/test/ui/asm/asm-in-bad-modifier.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fasm%2Fasm-in-bad-modifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fasm%2Fasm-in-bad-modifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-in-bad-modifier.stderr?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -1,14 +1,14 @@\n error[E0662]: input operand constraint contains '='\n-  --> $DIR/asm-in-bad-modifier.rs:23:39\n+  --> $DIR/asm-in-bad-modifier.rs:23:44\n    |\n-LL |         asm!(\"mov $1, $0\" : \"=r\"(x) : \"=r\"(5));\n-   |                                       ^^^^\n+LL |         llvm_asm!(\"mov $1, $0\" : \"=r\"(x) : \"=r\"(5));\n+   |                                            ^^^^\n \n error[E0663]: input operand constraint contains '+'\n-  --> $DIR/asm-in-bad-modifier.rs:24:39\n+  --> $DIR/asm-in-bad-modifier.rs:24:44\n    |\n-LL |         asm!(\"mov $1, $0\" : \"=r\"(y) : \"+r\"(5));\n-   |                                       ^^^^\n+LL |         llvm_asm!(\"mov $1, $0\" : \"=r\"(y) : \"+r\"(5));\n+   |                                            ^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "5d45f5084c5eec399396315a493b2c134f4a410b", "filename": "src/test/ui/asm/asm-literal-escaping.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fasm%2Fasm-literal-escaping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fasm%2Fasm-literal-escaping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-literal-escaping.rs?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -1,12 +1,12 @@\n // build-pass\n // only-x86_64\n \n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n fn main() {\n     unsafe {\n         // \"nop\" :: \"r\"(x) : \"eax\" : \"volatile\"\n         let x = 10;\n-        asm!(\"\\x6Eop\" :: \"\\x72\"(x) : \"\\x65ax\" : \"\\x76olatile\");\n+        llvm_asm!(\"\\x6Eop\" :: \"\\x72\"(x) : \"\\x65ax\" : \"\\x76olatile\");\n     }\n }"}, {"sha": "3c44fc90ef3f216403962fbaa3c0e26c021df73b", "filename": "src/test/ui/asm/asm-misplaced-option.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fasm%2Fasm-misplaced-option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fasm%2Fasm-misplaced-option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-misplaced-option.rs?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -12,7 +12,7 @@\n // ignore-mips\n // ignore-mips64\n \n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n #[cfg(any(target_arch = \"x86\",\n           target_arch = \"x86_64\"))]\n@@ -21,14 +21,14 @@ fn main() {\n     let mut x: isize = 0;\n     unsafe {\n         // extra colon\n-        asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5_usize), \"0\"(x) : : \"cc\");\n+        llvm_asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5_usize), \"0\"(x) : : \"cc\");\n         //~^ WARNING unrecognized option\n     }\n     assert_eq!(x, 5);\n \n     unsafe {\n         // comma in place of a colon\n-        asm!(\"add $2, $1; mov $1, $0\" : \"=r\"(x) : \"r\"(x), \"r\"(8_usize) : \"cc\", \"volatile\");\n+        llvm_asm!(\"add $2, $1; mov $1, $0\" : \"=r\"(x) : \"r\"(x), \"r\"(8_usize) : \"cc\", \"volatile\");\n         //~^ WARNING expected a clobber, found an option\n     }\n     assert_eq!(x, 13);"}, {"sha": "ea9267c643b138a8bd5e017d77f69c68c5e7413b", "filename": "src/test/ui/asm/asm-misplaced-option.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fasm%2Fasm-misplaced-option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fasm%2Fasm-misplaced-option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-misplaced-option.stderr?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -1,12 +1,12 @@\n warning: unrecognized option\n-  --> $DIR/asm-misplaced-option.rs:24:64\n+  --> $DIR/asm-misplaced-option.rs:24:69\n    |\n-LL |         asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5_usize), \"0\"(x) : : \"cc\");\n-   |                                                                ^^^^\n+LL |         llvm_asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5_usize), \"0\"(x) : : \"cc\");\n+   |                                                                     ^^^^\n \n warning: expected a clobber, found an option\n-  --> $DIR/asm-misplaced-option.rs:31:80\n+  --> $DIR/asm-misplaced-option.rs:31:85\n    |\n-LL |         asm!(\"add $2, $1; mov $1, $0\" : \"=r\"(x) : \"r\"(x), \"r\"(8_usize) : \"cc\", \"volatile\");\n-   |                                                                                ^^^^^^^^^^\n+LL |         llvm_asm!(\"add $2, $1; mov $1, $0\" : \"=r\"(x) : \"r\"(x), \"r\"(8_usize) : \"cc\", \"volatile\");\n+   |                                                                                     ^^^^^^^^^^\n "}, {"sha": "1a46879f9f291bdd54fa8bdcf416cff8fba83303", "filename": "src/test/ui/asm/asm-out-assign-imm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fasm%2Fasm-out-assign-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fasm%2Fasm-out-assign-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-out-assign-imm.rs?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -8,7 +8,7 @@\n // ignore-mips\n // ignore-mips64\n \n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n fn foo(x: isize) { println!(\"{}\", x); }\n \n@@ -21,7 +21,7 @@ pub fn main() {\n     x = 1;\n     foo(x);\n     unsafe {\n-        asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5));\n+        llvm_asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5));\n         //~^ ERROR cannot assign twice to immutable variable `x`\n     }\n     foo(x);"}, {"sha": "feec61b4fc6efd0f66483528f883c14a58ce9763", "filename": "src/test/ui/asm/asm-out-assign-imm.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fasm%2Fasm-out-assign-imm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fasm%2Fasm-out-assign-imm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-out-assign-imm.stderr?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -1,13 +1,13 @@\n error[E0384]: cannot assign twice to immutable variable `x`\n-  --> $DIR/asm-out-assign-imm.rs:24:34\n+  --> $DIR/asm-out-assign-imm.rs:24:39\n    |\n LL |     let x: isize;\n    |         - help: make this binding mutable: `mut x`\n LL |     x = 1;\n    |     ----- first assignment to `x`\n ...\n-LL |         asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5));\n-   |                                  ^ cannot assign twice to immutable variable\n+LL |         llvm_asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5));\n+   |                                       ^ cannot assign twice to immutable variable\n \n error: aborting due to previous error\n "}, {"sha": "d198437c5089411db2203a6ac68f3cff5312151e", "filename": "src/test/ui/asm/asm-out-no-modifier.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fasm%2Fasm-out-no-modifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fasm%2Fasm-out-no-modifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-out-no-modifier.rs?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -8,7 +8,7 @@\n // ignore-mips\n // ignore-mips64\n \n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n fn foo(x: isize) { println!(\"{}\", x); }\n \n@@ -19,7 +19,7 @@ fn foo(x: isize) { println!(\"{}\", x); }\n pub fn main() {\n     let x: isize;\n     unsafe {\n-        asm!(\"mov $1, $0\" : \"r\"(x) : \"r\"(5)); //~ ERROR output operand constraint lacks '='\n+        llvm_asm!(\"mov $1, $0\" : \"r\"(x) : \"r\"(5)); //~ ERROR output operand constraint lacks '='\n     }\n     foo(x);\n }"}, {"sha": "1c9e108f910c6ce929411157175b885d4cc7982a", "filename": "src/test/ui/asm/asm-out-no-modifier.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fasm%2Fasm-out-no-modifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fasm%2Fasm-out-no-modifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-out-no-modifier.stderr?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -1,8 +1,8 @@\n error[E0661]: output operand constraint lacks '=' or '+'\n-  --> $DIR/asm-out-no-modifier.rs:22:29\n+  --> $DIR/asm-out-no-modifier.rs:22:34\n    |\n-LL |         asm!(\"mov $1, $0\" : \"r\"(x) : \"r\"(5));\n-   |                             ^^^\n+LL |         llvm_asm!(\"mov $1, $0\" : \"r\"(x) : \"r\"(5));\n+   |                                  ^^^\n \n error: aborting due to previous error\n "}, {"sha": "d45498d4bb4a1b9782afd1acc06a4ab077e9d6f6", "filename": "src/test/ui/asm/asm-out-read-uninit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fasm%2Fasm-out-read-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fasm%2Fasm-out-read-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-out-read-uninit.rs?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -8,7 +8,7 @@\n // ignore-mips\n // ignore-mips64\n \n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n fn foo(x: isize) { println!(\"{}\", x); }\n \n@@ -19,7 +19,7 @@ fn foo(x: isize) { println!(\"{}\", x); }\n pub fn main() {\n     let x: isize;\n     unsafe {\n-        asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(x));\n+        llvm_asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(x));\n         //~^ ERROR use of possibly-uninitialized variable: `x`\n     }\n     foo(x);"}, {"sha": "3c3f3a6febb5a396e7fbea2aea8077ac5fd17282", "filename": "src/test/ui/asm/asm-out-read-uninit.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fasm%2Fasm-out-read-uninit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fasm%2Fasm-out-read-uninit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-out-read-uninit.stderr?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -1,8 +1,8 @@\n error[E0381]: use of possibly-uninitialized variable: `x`\n-  --> $DIR/asm-out-read-uninit.rs:22:43\n+  --> $DIR/asm-out-read-uninit.rs:22:48\n    |\n-LL |         asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(x));\n-   |                                           ^ use of possibly-uninitialized `x`\n+LL |         llvm_asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(x));\n+   |                                                ^ use of possibly-uninitialized `x`\n \n error: aborting due to previous error\n "}, {"sha": "d458be815296bc5afbfb2c216a6b9596b60f9031", "filename": "src/test/ui/asm/asm-parse-errors.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fasm%2Fasm-parse-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fasm%2Fasm-parse-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-parse-errors.rs?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -1,15 +1,15 @@\n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n fn main() {\n-    asm!(); //~ ERROR requires a string literal as an argument\n-    asm!(\"nop\" : struct); //~ ERROR expected string literal\n-    asm!(\"mov %eax, $$0x2\" : struct); //~ ERROR expected string literal\n-    asm!(\"mov %eax, $$0x2\" : \"={eax}\" struct); //~ ERROR expected `(`\n-    asm!(\"mov %eax, $$0x2\" : \"={eax}\"(struct)); //~ ERROR expected expression\n-    asm!(\"in %dx, %al\" : \"={al}\"(result) : struct); //~ ERROR expected string literal\n-    asm!(\"in %dx, %al\" : \"={al}\"(result) : \"{dx}\" struct); //~ ERROR expected `(`\n-    asm!(\"in %dx, %al\" : \"={al}\"(result) : \"{dx}\"(struct)); //~ ERROR expected expression\n-    asm!(\"mov $$0x200, %eax\" : : : struct); //~ ERROR expected string literal\n-    asm!(\"mov eax, 2\" : \"={eax}\"(foo) : : : struct); //~ ERROR expected string literal\n-    asm!(123); //~ ERROR inline assembly must be a string literal\n+    llvm_asm!(); //~ ERROR requires a string literal as an argument\n+    llvm_asm!(\"nop\" : struct); //~ ERROR expected string literal\n+    llvm_asm!(\"mov %eax, $$0x2\" : struct); //~ ERROR expected string literal\n+    llvm_asm!(\"mov %eax, $$0x2\" : \"={eax}\" struct); //~ ERROR expected `(`\n+    llvm_asm!(\"mov %eax, $$0x2\" : \"={eax}\"(struct)); //~ ERROR expected expression\n+    llvm_asm!(\"in %dx, %al\" : \"={al}\"(result) : struct); //~ ERROR expected string literal\n+    llvm_asm!(\"in %dx, %al\" : \"={al}\"(result) : \"{dx}\" struct); //~ ERROR expected `(`\n+    llvm_asm!(\"in %dx, %al\" : \"={al}\"(result) : \"{dx}\"(struct)); //~ ERROR expected expression\n+    llvm_asm!(\"mov $$0x200, %eax\" : : : struct); //~ ERROR expected string literal\n+    llvm_asm!(\"mov eax, 2\" : \"={eax}\"(foo) : : : struct); //~ ERROR expected string literal\n+    llvm_asm!(123); //~ ERROR inline assembly must be a string literal\n }"}, {"sha": "64f295c3b369895066da82079963dd6dd5e987e5", "filename": "src/test/ui/asm/asm-parse-errors.stderr", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fasm%2Fasm-parse-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fasm%2Fasm-parse-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-parse-errors.stderr?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -1,68 +1,68 @@\n error: macro requires a string literal as an argument\n   --> $DIR/asm-parse-errors.rs:4:5\n    |\n-LL |     asm!();\n-   |     ^^^^^^^ string literal required\n+LL |     llvm_asm!();\n+   |     ^^^^^^^^^^^^ string literal required\n \n error: expected string literal\n-  --> $DIR/asm-parse-errors.rs:5:18\n+  --> $DIR/asm-parse-errors.rs:5:23\n    |\n-LL |     asm!(\"nop\" : struct);\n-   |                  ^^^^^^ not a string literal\n+LL |     llvm_asm!(\"nop\" : struct);\n+   |                       ^^^^^^ not a string literal\n \n error: expected string literal\n-  --> $DIR/asm-parse-errors.rs:6:30\n+  --> $DIR/asm-parse-errors.rs:6:35\n    |\n-LL |     asm!(\"mov %eax, $$0x2\" : struct);\n-   |                              ^^^^^^ not a string literal\n+LL |     llvm_asm!(\"mov %eax, $$0x2\" : struct);\n+   |                                   ^^^^^^ not a string literal\n \n error: expected `(`, found keyword `struct`\n-  --> $DIR/asm-parse-errors.rs:7:39\n+  --> $DIR/asm-parse-errors.rs:7:44\n    |\n-LL |     asm!(\"mov %eax, $$0x2\" : \"={eax}\" struct);\n-   |                                       ^^^^^^ expected `(`\n+LL |     llvm_asm!(\"mov %eax, $$0x2\" : \"={eax}\" struct);\n+   |                                            ^^^^^^ expected `(`\n \n error: expected expression, found keyword `struct`\n-  --> $DIR/asm-parse-errors.rs:8:39\n+  --> $DIR/asm-parse-errors.rs:8:44\n    |\n-LL |     asm!(\"mov %eax, $$0x2\" : \"={eax}\"(struct));\n-   |                                       ^^^^^^ expected expression\n+LL |     llvm_asm!(\"mov %eax, $$0x2\" : \"={eax}\"(struct));\n+   |                                            ^^^^^^ expected expression\n \n error: expected string literal\n-  --> $DIR/asm-parse-errors.rs:9:44\n+  --> $DIR/asm-parse-errors.rs:9:49\n    |\n-LL |     asm!(\"in %dx, %al\" : \"={al}\"(result) : struct);\n-   |                                            ^^^^^^ not a string literal\n+LL |     llvm_asm!(\"in %dx, %al\" : \"={al}\"(result) : struct);\n+   |                                                 ^^^^^^ not a string literal\n \n error: expected `(`, found keyword `struct`\n-  --> $DIR/asm-parse-errors.rs:10:51\n+  --> $DIR/asm-parse-errors.rs:10:56\n    |\n-LL |     asm!(\"in %dx, %al\" : \"={al}\"(result) : \"{dx}\" struct);\n-   |                                                   ^^^^^^ expected `(`\n+LL |     llvm_asm!(\"in %dx, %al\" : \"={al}\"(result) : \"{dx}\" struct);\n+   |                                                        ^^^^^^ expected `(`\n \n error: expected expression, found keyword `struct`\n-  --> $DIR/asm-parse-errors.rs:11:51\n+  --> $DIR/asm-parse-errors.rs:11:56\n    |\n-LL |     asm!(\"in %dx, %al\" : \"={al}\"(result) : \"{dx}\"(struct));\n-   |                                                   ^^^^^^ expected expression\n+LL |     llvm_asm!(\"in %dx, %al\" : \"={al}\"(result) : \"{dx}\"(struct));\n+   |                                                        ^^^^^^ expected expression\n \n error: expected string literal\n-  --> $DIR/asm-parse-errors.rs:12:36\n+  --> $DIR/asm-parse-errors.rs:12:41\n    |\n-LL |     asm!(\"mov $$0x200, %eax\" : : : struct);\n-   |                                    ^^^^^^ not a string literal\n+LL |     llvm_asm!(\"mov $$0x200, %eax\" : : : struct);\n+   |                                         ^^^^^^ not a string literal\n \n error: expected string literal\n-  --> $DIR/asm-parse-errors.rs:13:45\n+  --> $DIR/asm-parse-errors.rs:13:50\n    |\n-LL |     asm!(\"mov eax, 2\" : \"={eax}\"(foo) : : : struct);\n-   |                                             ^^^^^^ not a string literal\n+LL |     llvm_asm!(\"mov eax, 2\" : \"={eax}\"(foo) : : : struct);\n+   |                                                  ^^^^^^ not a string literal\n \n error: inline assembly must be a string literal\n-  --> $DIR/asm-parse-errors.rs:14:10\n+  --> $DIR/asm-parse-errors.rs:14:15\n    |\n-LL |     asm!(123);\n-   |          ^^^\n+LL |     llvm_asm!(123);\n+   |               ^^^\n \n error: aborting due to 11 previous errors\n "}, {"sha": "ca06bdab27b96d3aa5d7fc7c22979e06a763172d", "filename": "src/test/ui/asm/issue-51431.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fasm%2Fissue-51431.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fasm%2Fissue-51431.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fissue-51431.rs?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -1,11 +1,11 @@\n // build-fail\n-// ignore-emscripten no asm! support\n+// ignore-emscripten no llvm_asm! support\n \n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n fn main() {\n     unsafe {\n-        asm! {\"mov $0,$1\"::\"0\"(\"bx\"),\"1\"(0x00)}\n+        llvm_asm! {\"mov $0,$1\"::\"0\"(\"bx\"),\"1\"(0x00)}\n         //~^ ERROR: invalid value for constraint in inline assembly\n     }\n }"}, {"sha": "b4b39a2a44ec3c92c0d806d0f8e03d0018fa2d8e", "filename": "src/test/ui/asm/issue-51431.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fasm%2Fissue-51431.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fasm%2Fissue-51431.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fissue-51431.stderr?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -1,8 +1,8 @@\n error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/issue-51431.rs:8:32\n+  --> $DIR/issue-51431.rs:8:37\n    |\n-LL |         asm! {\"mov $0,$1\"::\"0\"(\"bx\"),\"1\"(0x00)}\n-   |                                ^^^^\n+LL |         llvm_asm! {\"mov $0,$1\"::\"0\"(\"bx\"),\"1\"(0x00)}\n+   |                                     ^^^^\n \n error: aborting due to previous error\n "}, {"sha": "fd4d9bdd23dbf578b987ce9f88f2145d15b01541", "filename": "src/test/ui/asm/issue-62046.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fasm%2Fissue-62046.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fasm%2Fissue-62046.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fissue-62046.rs?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -1,11 +1,11 @@\n // build-fail\n // ignore-emscripten no asm! support\n \n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n fn main() {\n     unsafe {\n-        asm!(\"nop\" : \"+r\"(\"r15\"));\n+        llvm_asm!(\"nop\" : \"+r\"(\"r15\"));\n         //~^ malformed inline assembly\n     }\n }"}, {"sha": "cf27052df05aa6aed400e478207c76880158c55a", "filename": "src/test/ui/asm/issue-62046.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fasm%2Fissue-62046.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fasm%2Fissue-62046.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fissue-62046.stderr?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -1,8 +1,8 @@\n error[E0668]: malformed inline assembly\n   --> $DIR/issue-62046.rs:8:9\n    |\n-LL |         asm!(\"nop\" : \"+r\"(\"r15\"));\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         llvm_asm!(\"nop\" : \"+r\"(\"r15\"));\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "ecce7bfdf5bba9732ba72810968e8fe6772d4621", "filename": "src/test/ui/asm/issue-69092.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fasm%2Fissue-69092.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fasm%2Fissue-69092.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fissue-69092.rs?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -2,9 +2,9 @@\n // ignore-emscripten no asm! support\n // Regression test for #69092\n \n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n fn main() {\n-    unsafe { asm!(\".ascii \\\"Xen\\0\\\"\"); }\n+    unsafe { llvm_asm!(\".ascii \\\"Xen\\0\\\"\"); }\n     //~^ ERROR: <inline asm>:1:9: error: expected string in '.ascii' directive\n }"}, {"sha": "35f77edc3c402b942dea095312cad4c12e4406e0", "filename": "src/test/ui/asm/issue-69092.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fasm%2Fissue-69092.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fasm%2Fissue-69092.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fissue-69092.stderr?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -4,8 +4,8 @@ error: <inline asm>:1:9: error: expected string in '.ascii' directive\n \n   --> $DIR/issue-69092.rs:8:14\n    |\n-LL |     unsafe { asm!(\".ascii \\\"Xen\\0\\\"\"); }\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     unsafe { llvm_asm!(\".ascii \\\"Xen\\0\\\"\"); }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "60e6c88fc79242a8500ab75fb43e5d895df1067d", "filename": "src/test/ui/ast-json/ast-json-ice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fast-json%2Fast-json-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fast-json%2Fast-json-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fast-json%2Fast-json-ice.rs?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -8,7 +8,7 @@\n // check-pass\n // dont-check-compiler-stdout - don't check for any AST change.\n \n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n enum V {\n     A(i32),\n@@ -30,7 +30,7 @@ fn main() {\n         target_arch = \"x86_64\",\n         target_arch = \"arm\",\n         target_arch = \"aarch64\"))]\n-    unsafe { asm!(\"\"::::); }\n+    unsafe { llvm_asm!(\"\"::::); }\n \n     let x: (i32) = 35;\n     let y = x as i64<> + 5;"}, {"sha": "d16b424536aac3fa5b299506818df757ccf513df", "filename": "src/test/ui/borrowck/borrowck-asm.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.rs?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -6,7 +6,7 @@\n // ignore-sparc\n // ignore-sparc64\n \n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n #[cfg(any(target_arch = \"x86\",\n             target_arch = \"x86_64\",\n@@ -19,7 +19,7 @@ mod test_cases {\n         let y: &mut isize;\n         let x = &mut 0isize;\n         unsafe {\n-            asm!(\"nop\" : : \"r\"(x));\n+            llvm_asm!(\"nop\" : : \"r\"(x));\n         }\n         let z = x;  //~ ERROR use of moved value: `x`\n     }\n@@ -28,20 +28,20 @@ mod test_cases {\n         let mut x = 3;\n         let y = &mut x;\n         unsafe {\n-            asm!(\"nop\" : : \"r\"(x)); //~ ERROR cannot use\n+            llvm_asm!(\"nop\" : : \"r\"(x)); //~ ERROR cannot use\n         }\n         let z = y;\n     }\n \n     fn out_is_assign() {\n         let x = 3;\n         unsafe {\n-            asm!(\"nop\" : \"=r\"(x));  //~ ERROR cannot assign twice\n+            llvm_asm!(\"nop\" : \"=r\"(x));  //~ ERROR cannot assign twice\n         }\n         let mut a = &mut 3;\n         let b = &*a;\n         unsafe {\n-            asm!(\"nop\" : \"=r\"(a));  // OK, Shallow write to `a`\n+            llvm_asm!(\"nop\" : \"=r\"(a));  // OK, Shallow write to `a`\n         }\n         let c = b;\n         let d = *a;\n@@ -50,30 +50,30 @@ mod test_cases {\n     fn rw_is_assign() {\n         let x = 3;\n         unsafe {\n-            asm!(\"nop\" : \"+r\"(x));  //~ ERROR cannot assign twice\n+            llvm_asm!(\"nop\" : \"+r\"(x));  //~ ERROR cannot assign twice\n         }\n     }\n \n     fn indirect_is_not_init() {\n         let x: i32;\n         unsafe {\n-            asm!(\"nop\" : \"=*r\"(x)); //~ ERROR use of possibly-uninitialized variable\n+            llvm_asm!(\"nop\" : \"=*r\"(x)); //~ ERROR use of possibly-uninitialized variable\n         }\n     }\n \n     fn rw_is_read() {\n         let mut x = &mut 3;\n         let y = &*x;\n         unsafe {\n-            asm!(\"nop\" : \"+r\"(x));  //~ ERROR cannot assign to `x` because it is borrowed\n+            llvm_asm!(\"nop\" : \"+r\"(x));  //~ ERROR cannot assign to `x` because it is borrowed\n         }\n         let z = y;\n     }\n \n     fn two_moves() {\n         let x = &mut 2;\n         unsafe {\n-            asm!(\"nop\" : : \"r\"(x), \"r\"(x) );    //~ ERROR use of moved value\n+            llvm_asm!(\"nop\" : : \"r\"(x), \"r\"(x) );    //~ ERROR use of moved value\n         }\n     }\n }"}, {"sha": "d7e94bd34d35b95b498fd17f6c699c924e7ca437", "filename": "src/test/ui/borrowck/borrowck-asm.stderr", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.stderr?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -4,76 +4,76 @@ error[E0382]: use of moved value: `x`\n LL |         let x = &mut 0isize;\n    |             - move occurs because `x` has type `&mut isize`, which does not implement the `Copy` trait\n LL |         unsafe {\n-LL |             asm!(\"nop\" : : \"r\"(x));\n-   |                                - value moved here\n+LL |             llvm_asm!(\"nop\" : : \"r\"(x));\n+   |                                     - value moved here\n LL |         }\n LL |         let z = x;\n    |                 ^ value used here after move\n \n error[E0503]: cannot use `x` because it was mutably borrowed\n-  --> $DIR/borrowck-asm.rs:31:32\n+  --> $DIR/borrowck-asm.rs:31:37\n    |\n LL |         let y = &mut x;\n    |                 ------ borrow of `x` occurs here\n LL |         unsafe {\n-LL |             asm!(\"nop\" : : \"r\"(x));\n-   |                                ^ use of borrowed `x`\n+LL |             llvm_asm!(\"nop\" : : \"r\"(x));\n+   |                                     ^ use of borrowed `x`\n LL |         }\n LL |         let z = y;\n    |                 - borrow later used here\n \n error[E0384]: cannot assign twice to immutable variable `x`\n-  --> $DIR/borrowck-asm.rs:39:31\n+  --> $DIR/borrowck-asm.rs:39:36\n    |\n LL |         let x = 3;\n    |             -\n    |             |\n    |             first assignment to `x`\n    |             help: make this binding mutable: `mut x`\n LL |         unsafe {\n-LL |             asm!(\"nop\" : \"=r\"(x));\n-   |                               ^ cannot assign twice to immutable variable\n+LL |             llvm_asm!(\"nop\" : \"=r\"(x));\n+   |                                    ^ cannot assign twice to immutable variable\n \n error[E0384]: cannot assign twice to immutable variable `x`\n-  --> $DIR/borrowck-asm.rs:53:31\n+  --> $DIR/borrowck-asm.rs:53:36\n    |\n LL |         let x = 3;\n    |             -\n    |             |\n    |             first assignment to `x`\n    |             help: make this binding mutable: `mut x`\n LL |         unsafe {\n-LL |             asm!(\"nop\" : \"+r\"(x));\n-   |                               ^ cannot assign twice to immutable variable\n+LL |             llvm_asm!(\"nop\" : \"+r\"(x));\n+   |                                    ^ cannot assign twice to immutable variable\n \n error[E0381]: use of possibly-uninitialized variable: `x`\n-  --> $DIR/borrowck-asm.rs:60:32\n+  --> $DIR/borrowck-asm.rs:60:37\n    |\n-LL |             asm!(\"nop\" : \"=*r\"(x));\n-   |                                ^ use of possibly-uninitialized `x`\n+LL |             llvm_asm!(\"nop\" : \"=*r\"(x));\n+   |                                     ^ use of possibly-uninitialized `x`\n \n error[E0506]: cannot assign to `x` because it is borrowed\n-  --> $DIR/borrowck-asm.rs:68:31\n+  --> $DIR/borrowck-asm.rs:68:36\n    |\n LL |         let y = &*x;\n    |                 --- borrow of `x` occurs here\n LL |         unsafe {\n-LL |             asm!(\"nop\" : \"+r\"(x));\n-   |                               ^ assignment to borrowed `x` occurs here\n+LL |             llvm_asm!(\"nop\" : \"+r\"(x));\n+   |                                    ^ assignment to borrowed `x` occurs here\n LL |         }\n LL |         let z = y;\n    |                 - borrow later used here\n \n error[E0382]: use of moved value: `x`\n-  --> $DIR/borrowck-asm.rs:76:40\n+  --> $DIR/borrowck-asm.rs:76:45\n    |\n LL |         let x = &mut 2;\n    |             - move occurs because `x` has type `&mut i32`, which does not implement the `Copy` trait\n LL |         unsafe {\n-LL |             asm!(\"nop\" : : \"r\"(x), \"r\"(x) );\n-   |                                -       ^ value used here after move\n-   |                                |\n-   |                                value moved here\n+LL |             llvm_asm!(\"nop\" : : \"r\"(x), \"r\"(x) );\n+   |                                     -       ^ value used here after move\n+   |                                     |\n+   |                                     value moved here\n \n error: aborting due to 7 previous errors\n "}, {"sha": "842ae59ee8debc89d40c1ab0a12eec40b8cb0dbe", "filename": "src/test/ui/error-codes/E0660.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Ferror-codes%2FE0660.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Ferror-codes%2FE0660.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0660.rs?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -1,9 +1,9 @@\n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n fn main() {\n     let a;\n-    asm!(\"nop\" \"nop\");\n+    llvm_asm!(\"nop\" \"nop\");\n     //~^ ERROR E0660\n-    asm!(\"nop\" \"nop\" : \"=r\"(a));\n+    llvm_asm!(\"nop\" \"nop\" : \"=r\"(a));\n     //~^ ERROR E0660\n }"}, {"sha": "69288ea6fcdb3af2e1067c93d4a1e57d0c232503", "filename": "src/test/ui/error-codes/E0660.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Ferror-codes%2FE0660.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Ferror-codes%2FE0660.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0660.stderr?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -1,14 +1,14 @@\n error[E0660]: malformed inline assembly\n   --> $DIR/E0660.rs:5:5\n    |\n-LL |     asm!(\"nop\" \"nop\");\n-   |     ^^^^^^^^^^^^^^^^^^\n+LL |     llvm_asm!(\"nop\" \"nop\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0660]: malformed inline assembly\n   --> $DIR/E0660.rs:7:5\n    |\n-LL |     asm!(\"nop\" \"nop\" : \"=r\"(a));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     llvm_asm!(\"nop\" \"nop\" : \"=r\"(a));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "1099edd848b28e4ee797c7b55eb48b0c5e47f987", "filename": "src/test/ui/error-codes/E0661.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Ferror-codes%2FE0661.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Ferror-codes%2FE0661.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0661.rs?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -1,9 +1,9 @@\n // ignore-emscripten\n \n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n fn main() {\n     let a; //~ ERROR type annotations needed\n-    asm!(\"nop\" : \"r\"(a));\n+    llvm_asm!(\"nop\" : \"r\"(a));\n     //~^ ERROR E0661\n }"}, {"sha": "fe3887e72604defe2ece8654b3a8ce82ef836103", "filename": "src/test/ui/error-codes/E0661.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Ferror-codes%2FE0661.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Ferror-codes%2FE0661.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0661.stderr?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -1,8 +1,8 @@\n error[E0661]: output operand constraint lacks '=' or '+'\n-  --> $DIR/E0661.rs:7:18\n+  --> $DIR/E0661.rs:7:23\n    |\n-LL |     asm!(\"nop\" : \"r\"(a));\n-   |                  ^^^\n+LL |     llvm_asm!(\"nop\" : \"r\"(a));\n+   |                       ^^^\n \n error[E0282]: type annotations needed\n   --> $DIR/E0661.rs:6:9"}, {"sha": "095005999039f7ba6aa46c1fe626bc49dcde8749", "filename": "src/test/ui/error-codes/E0662.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Ferror-codes%2FE0662.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Ferror-codes%2FE0662.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0662.rs?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -1,10 +1,10 @@\n // ignore-emscripten\n \n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n fn main() {\n-    asm!(\"xor %eax, %eax\"\n-         :\n-         : \"=test\"(\"a\") //~ ERROR E0662\n-        );\n+    llvm_asm!(\"xor %eax, %eax\"\n+              :\n+              : \"=test\"(\"a\") //~ ERROR E0662\n+             );\n }"}, {"sha": "ebc5f628f2699ccb9f01617d00c1b63976878952", "filename": "src/test/ui/error-codes/E0662.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Ferror-codes%2FE0662.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Ferror-codes%2FE0662.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0662.stderr?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -1,8 +1,8 @@\n error[E0662]: input operand constraint contains '='\n-  --> $DIR/E0662.rs:8:12\n+  --> $DIR/E0662.rs:8:17\n    |\n-LL |          : \"=test\"(\"a\")\n-   |            ^^^^^^^\n+LL |               : \"=test\"(\"a\")\n+   |                 ^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "0783d705a5bfe6edc1285614f1d90d596a0f4d95", "filename": "src/test/ui/error-codes/E0663.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Ferror-codes%2FE0663.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Ferror-codes%2FE0663.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0663.rs?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -1,10 +1,10 @@\n // ignore-emscripten\n \n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n fn main() {\n-    asm!(\"xor %eax, %eax\"\n-         :\n-         : \"+test\"(\"a\") //~ ERROR E0663\n-        );\n+    llvm_asm!(\"xor %eax, %eax\"\n+              :\n+              : \"+test\"(\"a\") //~ ERROR E0663\n+             );\n }"}, {"sha": "4e421aa007352801256de08c4c830158a5a41bb7", "filename": "src/test/ui/error-codes/E0663.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Ferror-codes%2FE0663.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Ferror-codes%2FE0663.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0663.stderr?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -1,8 +1,8 @@\n error[E0663]: input operand constraint contains '+'\n-  --> $DIR/E0663.rs:8:12\n+  --> $DIR/E0663.rs:8:17\n    |\n-LL |          : \"+test\"(\"a\")\n-   |            ^^^^^^^\n+LL |               : \"+test\"(\"a\")\n+   |                 ^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "f8ca5c9c8c6dec0762b7af1f6fe5d3a5d895045e", "filename": "src/test/ui/error-codes/E0664.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Ferror-codes%2FE0664.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Ferror-codes%2FE0664.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0664.rs?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -1,11 +1,11 @@\n // ignore-emscripten\n \n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n fn main() {\n-    asm!(\"mov $$0x200, %eax\"\n-         :\n-         :\n-         : \"{eax}\" //~ ERROR E0664\n-        );\n+    llvm_asm!(\"mov $$0x200, %eax\"\n+              :\n+              :\n+              : \"{eax}\" //~ ERROR E0664\n+             );\n }"}, {"sha": "d0ed0f01ce79f3291136f61e49e815541d2d54fe", "filename": "src/test/ui/error-codes/E0664.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Ferror-codes%2FE0664.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Ferror-codes%2FE0664.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0664.stderr?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -1,8 +1,8 @@\n error[E0664]: clobber should not be surrounded by braces\n-  --> $DIR/E0664.rs:9:12\n+  --> $DIR/E0664.rs:9:17\n    |\n-LL |          : \"{eax}\"\n-   |            ^^^^^^^\n+LL |               : \"{eax}\"\n+   |                 ^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "7eeeb4bc4e243d18f799de376474a4106d93eff8", "filename": "src/test/ui/feature-gates/feature-gate-asm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm.rs?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -3,5 +3,6 @@\n fn main() {\n     unsafe {\n         asm!(\"\"); //~ ERROR inline assembly is not stable enough\n+        llvm_asm!(\"\"); //~ ERROR inline assembly is not stable enough\n     }\n }"}, {"sha": "1f9eaa5632e4ad3961216a41994eeb6210cd46c2", "filename": "src/test/ui/feature-gates/feature-gate-asm.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm.stderr?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -7,6 +7,15 @@ LL |         asm!(\"\");\n    = note: see issue #70173 <https://github.com/rust-lang/rust/issues/70173> for more information\n    = help: add `#![feature(asm)]` to the crate attributes to enable\n \n-error: aborting due to previous error\n+error[E0658]: use of unstable library feature 'llvm_asm': inline assembly is not stable enough for use and is subject to change\n+  --> $DIR/feature-gate-asm.rs:6:9\n+   |\n+LL |         llvm_asm!(\"\");\n+   |         ^^^^^^^^\n+   |\n+   = note: see issue #70173 <https://github.com/rust-lang/rust/issues/70173> for more information\n+   = help: add `#![feature(llvm_asm)]` to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "666a4894f627551226ae9d1c0b9c359d639cccdd", "filename": "src/test/ui/feature-gates/feature-gate-asm2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.rs?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -3,5 +3,6 @@\n fn main() {\n     unsafe {\n         println!(\"{:?}\", asm!(\"\")); //~ ERROR inline assembly is not stable\n+        println!(\"{:?}\", llvm_asm!(\"\")); //~ ERROR inline assembly is not stable\n     }\n }"}, {"sha": "17ba66e9842fac2dbf76bad1e045a76e332046cc", "filename": "src/test/ui/feature-gates/feature-gate-asm2.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.stderr?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -7,6 +7,15 @@ LL |         println!(\"{:?}\", asm!(\"\"));\n    = note: see issue #70173 <https://github.com/rust-lang/rust/issues/70173> for more information\n    = help: add `#![feature(asm)]` to the crate attributes to enable\n \n-error: aborting due to previous error\n+error[E0658]: use of unstable library feature 'llvm_asm': inline assembly is not stable enough for use and is subject to change\n+  --> $DIR/feature-gate-asm2.rs:6:26\n+   |\n+LL |         println!(\"{:?}\", llvm_asm!(\"\"));\n+   |                          ^^^^^^^^\n+   |\n+   = note: see issue #70173 <https://github.com/rust-lang/rust/issues/70173> for more information\n+   = help: add `#![feature(llvm_asm)]` to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "edf2c2e3180e820a6b9c44dc9b802ae81b18284a", "filename": "src/test/ui/inline-asm-bad-constraint.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Finline-asm-bad-constraint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Finline-asm-bad-constraint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-asm-bad-constraint.rs?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -3,7 +3,7 @@\n // build-fail\n // ignore-emscripten\n \n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n extern \"C\" {\n     fn foo(a: usize);\n@@ -19,22 +19,22 @@ fn main() {\n fn bad_register_constraint() {\n     let rax: u64;\n     unsafe {\n-        asm!(\"\" :\"={rax\"(rax)) //~ ERROR E0668\n+        llvm_asm!(\"\" :\"={rax\"(rax)) //~ ERROR E0668\n     };\n     println!(\"Accumulator is: {}\", rax);\n }\n \n // Issue #54376\n fn bad_input() {\n     unsafe {\n-        asm!(\"callq $0\" : : \"0\"(foo)) //~ ERROR E0668\n+        llvm_asm!(\"callq $0\" : : \"0\"(foo)) //~ ERROR E0668\n     };\n }\n \n fn wrong_size_output() {\n     let rax: u64 = 0;\n     unsafe {\n-        asm!(\"addb $1, $0\" : \"={rax}\"((0i32, rax))); //~ ERROR E0668\n+        llvm_asm!(\"addb $1, $0\" : \"={rax}\"((0i32, rax))); //~ ERROR E0668\n     }\n     println!(\"rax: {}\", rax);\n }"}, {"sha": "d6a3b6e8382f4bae0d5db492dfe744cad1b62464", "filename": "src/test/ui/inline-asm-bad-constraint.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Finline-asm-bad-constraint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Finline-asm-bad-constraint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-asm-bad-constraint.stderr?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -1,24 +1,24 @@\n error[E0668]: malformed inline assembly\n   --> $DIR/inline-asm-bad-constraint.rs:22:9\n    |\n-LL |         asm!(\"\" :\"={rax\"(rax))\n-   |         ^^^^^^^^^^^^^^^^^^^^^^\n+LL |         llvm_asm!(\"\" :\"={rax\"(rax))\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0668]: malformed inline assembly\n   --> $DIR/inline-asm-bad-constraint.rs:30:9\n    |\n-LL |         asm!(\"callq $0\" : : \"0\"(foo))\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         llvm_asm!(\"callq $0\" : : \"0\"(foo))\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0668]: malformed inline assembly\n   --> $DIR/inline-asm-bad-constraint.rs:37:9\n    |\n-LL |         asm!(\"addb $1, $0\" : \"={rax}\"((0i32, rax)));\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         llvm_asm!(\"addb $1, $0\" : \"={rax}\"((0i32, rax)));\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "e5fc4ee010678187eaed2960f9d0b5fc10e6a0de", "filename": "src/test/ui/inline-asm-bad-operand.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Finline-asm-bad-operand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Finline-asm-bad-operand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-asm-bad-operand.rs?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -4,7 +4,7 @@\n // build-fail\n // ignore-emscripten\n \n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n #[repr(C)]\n struct MyPtr(usize);\n@@ -19,41 +19,41 @@ fn main() {\n \n fn issue_37433() {\n     unsafe {\n-        asm!(\"\" :: \"r\"(\"\")); //~ ERROR E0669\n+        llvm_asm!(\"\" :: \"r\"(\"\")); //~ ERROR E0669\n     }\n \n     unsafe {\n         let target = MyPtr(0);\n-        asm!(\"ret\" : : \"{rdi}\"(target)); //~ ERROR E0669\n+        llvm_asm!(\"ret\" : : \"{rdi}\"(target)); //~ ERROR E0669\n     }\n }\n \n fn issue_37437() {\n     let hello: &str = \"hello\";\n     // this should fail...\n-    unsafe { asm!(\"\" :: \"i\"(hello)) }; //~ ERROR E0669\n+    unsafe { llvm_asm!(\"\" :: \"i\"(hello)) }; //~ ERROR E0669\n     // but this should succeed.\n-    unsafe { asm!(\"\" :: \"r\"(hello.as_ptr())) };\n+    unsafe { llvm_asm!(\"\" :: \"r\"(hello.as_ptr())) };\n }\n \n fn issue_40187() {\n     let arr: [u8; 1] = [0; 1];\n     unsafe {\n-        asm!(\"movups $1, %xmm0\"::\"m\"(arr)); //~ ERROR E0669\n+        llvm_asm!(\"movups $1, %xmm0\"::\"m\"(arr)); //~ ERROR E0669\n     }\n }\n \n fn issue_54067() {\n     let addr: Option<u32> = Some(123);\n     unsafe {\n-        asm!(\"mov sp, $0\"::\"r\"(addr)); //~ ERROR E0669\n+        llvm_asm!(\"mov sp, $0\"::\"r\"(addr)); //~ ERROR E0669\n     }\n }\n \n fn multiple_errors() {\n     let addr: (u32, u32) = (1, 2);\n     unsafe {\n-        asm!(\"mov sp, $0\"::\"r\"(addr), //~ ERROR E0669\n-                           \"r\"(\"hello e0669\")); //~ ERROR E0669\n+        llvm_asm!(\"mov sp, $0\"::\"r\"(addr), //~ ERROR E0669\n+                                \"r\"(\"hello e0669\")); //~ ERROR E0669\n     }\n }"}, {"sha": "1ac7024ec8bf0166f436a0f1feae7da2fe26dad7", "filename": "src/test/ui/inline-asm-bad-operand.stderr", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Finline-asm-bad-operand.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Finline-asm-bad-operand.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-asm-bad-operand.stderr?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -1,41 +1,41 @@\n error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/inline-asm-bad-operand.rs:22:24\n+  --> $DIR/inline-asm-bad-operand.rs:22:29\n    |\n-LL |         asm!(\"\" :: \"r\"(\"\"));\n-   |                        ^^\n+LL |         llvm_asm!(\"\" :: \"r\"(\"\"));\n+   |                             ^^\n \n error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/inline-asm-bad-operand.rs:27:32\n+  --> $DIR/inline-asm-bad-operand.rs:27:37\n    |\n-LL |         asm!(\"ret\" : : \"{rdi}\"(target));\n-   |                                ^^^^^^\n+LL |         llvm_asm!(\"ret\" : : \"{rdi}\"(target));\n+   |                                     ^^^^^^\n \n error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/inline-asm-bad-operand.rs:34:29\n+  --> $DIR/inline-asm-bad-operand.rs:34:34\n    |\n-LL |     unsafe { asm!(\"\" :: \"i\"(hello)) };\n-   |                             ^^^^^\n+LL |     unsafe { llvm_asm!(\"\" :: \"i\"(hello)) };\n+   |                                  ^^^^^\n \n error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/inline-asm-bad-operand.rs:42:38\n+  --> $DIR/inline-asm-bad-operand.rs:42:43\n    |\n-LL |         asm!(\"movups $1, %xmm0\"::\"m\"(arr));\n-   |                                      ^^^\n+LL |         llvm_asm!(\"movups $1, %xmm0\"::\"m\"(arr));\n+   |                                           ^^^\n \n error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/inline-asm-bad-operand.rs:49:32\n+  --> $DIR/inline-asm-bad-operand.rs:49:37\n    |\n-LL |         asm!(\"mov sp, $0\"::\"r\"(addr));\n-   |                                ^^^^\n+LL |         llvm_asm!(\"mov sp, $0\"::\"r\"(addr));\n+   |                                     ^^^^\n \n error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/inline-asm-bad-operand.rs:56:32\n+  --> $DIR/inline-asm-bad-operand.rs:56:37\n    |\n-LL |         asm!(\"mov sp, $0\"::\"r\"(addr),\n-   |                                ^^^^\n+LL |         llvm_asm!(\"mov sp, $0\"::\"r\"(addr),\n+   |                                     ^^^^\n \n error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/inline-asm-bad-operand.rs:57:32\n+  --> $DIR/inline-asm-bad-operand.rs:57:37\n    |\n LL | ...                   \"r\"(\"hello e0669\"));\n    |                           ^^^^^^^^^^^^^"}, {"sha": "02095a2f7e4d2e97370e17ac82a7d676b31fb639", "filename": "src/test/ui/issues/issue-14936.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fissues%2Fissue-14936.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fissues%2Fissue-14936.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14936.rs?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -1,7 +1,7 @@\n // build-pass\n #![allow(unused_macros)]\n #![allow(dead_code)]\n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n type History = Vec<&'static str>;\n \n@@ -18,10 +18,10 @@ macro_rules! demo {\n \n             let mut history: History = vec![];\n             unsafe {\n-                asm!(\"mov ($1), $0\"\n-                     : $output_constraint (*wrap(&mut x, \"out\", &mut history))\n-                     : \"r\"(&wrap(y, \"in\", &mut history))\n-                     :: \"volatile\");\n+                llvm_asm!(\"mov ($1), $0\"\n+                          : $output_constraint (*wrap(&mut x, \"out\", &mut history))\n+                          : \"r\"(&wrap(y, \"in\", &mut history))\n+                          :: \"volatile\");\n             }\n             assert_eq!((x,y), (1,1));\n             let b: &[_] = &[\"out\", \"in\"];"}, {"sha": "423b19c3ebd0999835a6391c70971d2f4868de85", "filename": "src/test/ui/issues/issue-23458.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fissues%2Fissue-23458.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fissues%2Fissue-23458.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23458.rs?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -1,11 +1,11 @@\n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n // build-fail\n // only-x86_64\n \n fn main() {\n     unsafe {\n-        asm!(\"int $3\"); //~ ERROR too few operands for instruction\n-                        //~| ERROR invalid operand in inline asm\n+        llvm_asm!(\"int $3\"); //~ ERROR too few operands for instruction\n+                             //~| ERROR invalid operand in inline asm\n     }\n }"}, {"sha": "81f06e639754205e35ed5649919adffda28860c3", "filename": "src/test/ui/issues/issue-23458.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fissues%2Fissue-23458.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fissues%2Fissue-23458.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23458.stderr?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -1,17 +1,17 @@\n error: invalid operand in inline asm: 'int $3'\n   --> $DIR/issue-23458.rs:8:9\n    |\n-LL |         asm!(\"int $3\");\n-   |         ^^^^^^^^^^^^^^^\n+LL |         llvm_asm!(\"int $3\");\n+   |         ^^^^^^^^^^^^^^^^^^^^\n \n error: <inline asm>:1:2: error: too few operands for instruction\n         int \n         ^\n \n   --> $DIR/issue-23458.rs:8:9\n    |\n-LL |         asm!(\"int $3\");\n-   |         ^^^^^^^^^^^^^^^\n+LL |         llvm_asm!(\"int $3\");\n+   |         ^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "32a36e44aa1aee7791dcfff6e684361f1110d21c", "filename": "src/test/ui/issues/issue-33264.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fissues%2Fissue-33264.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fissues%2Fissue-33264.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33264.rs?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -2,7 +2,7 @@\n // only-x86_64\n \n #![allow(dead_code, non_upper_case_globals)]\n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n #[repr(C)]\n pub struct D32x4(f32,f32,f32,f32);\n@@ -11,16 +11,16 @@ impl D32x4 {\n     fn add(&self, vec: Self) -> Self {\n         unsafe {\n             let ret: Self;\n-            asm!(\"\n-                 movaps $1, %xmm1\n-                 movaps $2, %xmm2\n-                 addps %xmm1, %xmm2\n-                 movaps $xmm1, $0\n-                 \"\n-                 : \"=r\"(ret)\n-                 : \"1\"(self), \"2\"(vec)\n-                 : \"xmm1\", \"xmm2\"\n-                 );\n+            llvm_asm!(\"\n+                      movaps $1, %xmm1\n+                      movaps $2, %xmm2\n+                      addps %xmm1, %xmm2\n+                      movaps $xmm1, $0\n+                      \"\n+                      : \"=r\"(ret)\n+                      : \"1\"(self), \"2\"(vec)\n+                      : \"xmm1\", \"xmm2\"\n+                      );\n             ret\n         }\n     }"}, {"sha": "be9b4af8fbc41ec7daa92dc02548afc4f2cc88f9", "filename": "src/test/ui/issues/issue-37366.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fissues%2Fissue-37366.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fissues%2Fissue-37366.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37366.rs?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -1,12 +1,12 @@\n // check-pass\n // ignore-emscripten\n \n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n macro_rules! interrupt_handler {\n     () => {\n         unsafe fn _interrupt_handler() {\n-            asm!(\"pop  eax\" :::: \"intel\");\n+            llvm_asm!(\"pop  eax\" :::: \"intel\");\n         }\n     }\n }"}, {"sha": "2ea970327f06b1797e1972b4635e20c67a51b7cf", "filename": "src/test/ui/issues/issue-37433.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fissues%2Fissue-37433.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fissues%2Fissue-37433.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37433.rs?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -1,11 +1,11 @@\n // build-fail\n-// ignore-emscripten no asm! support\n+// ignore-emscripten no llvm_asm! support\n \n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n fn main() {\n     unsafe {\n-        asm!(\"\" :: \"r\"(\"\"));\n+        llvm_asm!(\"\" :: \"r\"(\"\"));\n         //~^ ERROR: invalid value for constraint in inline assembly\n     }\n }"}, {"sha": "ff6965ad353b21b38079e154c78ef6cbdc7bbebe", "filename": "src/test/ui/issues/issue-37433.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fissues%2Fissue-37433.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fissues%2Fissue-37433.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37433.stderr?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -1,8 +1,8 @@\n error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/issue-37433.rs:8:24\n+  --> $DIR/issue-37433.rs:8:29\n    |\n-LL |         asm!(\"\" :: \"r\"(\"\"));\n-   |                        ^^\n+LL |         llvm_asm!(\"\" :: \"r\"(\"\"));\n+   |                             ^^\n \n error: aborting due to previous error\n "}, {"sha": "38591b0a9f84e28fbab3bc48243a6d2f49856833", "filename": "src/test/ui/issues/issue-53787-inline-assembler-macro.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fissues%2Fissue-53787-inline-assembler-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fissues%2Fissue-53787-inline-assembler-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-53787-inline-assembler-macro.rs?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -3,12 +3,12 @@\n // build-fail\n // ignore-emscripten\n \n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n macro_rules! fake_jump {\n     ($id:expr) => {\n         unsafe {\n-            asm!(\n+            llvm_asm!(\n             \"\n             jmp $0\n             lea eax, [ebx]"}, {"sha": "9a0376ad51f7561ebd30701e05d416a6d13aad7a", "filename": "src/test/ui/issues/issue-9129.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fissues%2Fissue-9129.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fissues%2Fissue-9129.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-9129.rs?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -12,7 +12,7 @@ impl bomb for S { fn boom(&self, _: Ident) { } }\n \n pub struct Ident { name: usize }\n \n-// macro_rules! int3 { () => ( unsafe { asm!( \"int3\" ); } ) }\n+// macro_rules! int3 { () => ( unsafe { llvm_asm!( \"int3\" ); } ) }\n macro_rules! int3 { () => ( { } ) }\n \n fn Ident_new() -> Ident {"}, {"sha": "f0eb92b2be8207b22d4a8a3d583e96ec949f67ab", "filename": "src/test/ui/macros/macro-expanded-include/foo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fmacros%2Fmacro-expanded-include%2Ffoo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fmacros%2Fmacro-expanded-include%2Ffoo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-expanded-include%2Ffoo%2Fmod.rs?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -5,5 +5,5 @@ macro_rules! m {\n }\n \n macro_rules! n {\n-    () => { unsafe { asm!(include_str!(\"file.txt\")); } }\n+    () => { unsafe { llvm_asm!(include_str!(\"file.txt\")); } }\n }"}, {"sha": "abf83a5c6ffd38f1a4a58d24a0f6cf5d892b6610", "filename": "src/test/ui/macros/macro-expanded-include/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fmacros%2Fmacro-expanded-include%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fmacros%2Fmacro-expanded-include%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-expanded-include%2Ftest.rs?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -1,6 +1,6 @@\n-// ignore-emscripten no asm! support\n+// ignore-emscripten no llvm_asm! support\n // build-pass (FIXME(62277): could be check-pass?)\n-#![feature(asm)]\n+#![feature(llvm_asm)]\n #![allow(unused)]\n \n #[macro_use]"}, {"sha": "cc96a5bff522f4445cc6120f331f65e8e6532d05", "filename": "src/test/ui/macros/macros-nonfatal-errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.rs?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -3,14 +3,14 @@\n // test that errors in a (selection) of macros don't kill compilation\n // immediately, so that we get more errors listed at a time.\n \n-#![feature(asm)]\n+#![feature(llvm_asm)]\n #![feature(trace_macros, concat_idents)]\n \n #[derive(Default)] //~ ERROR\n enum OrDeriveThis {}\n \n fn main() {\n-    asm!(invalid); //~ ERROR\n+    llvm_asm!(invalid); //~ ERROR\n \n     concat_idents!(\"not\", \"idents\"); //~ ERROR\n "}, {"sha": "f416c70123c665519339127d1f6dadd11635475f", "filename": "src/test/ui/macros/macros-nonfatal-errors.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.stderr?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -7,10 +7,10 @@ LL | #[derive(Default)]\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: inline assembly must be a string literal\n-  --> $DIR/macros-nonfatal-errors.rs:13:10\n+  --> $DIR/macros-nonfatal-errors.rs:13:15\n    |\n-LL |     asm!(invalid);\n-   |          ^^^^^^^\n+LL |     llvm_asm!(invalid);\n+   |               ^^^^^^^\n \n error: concat_idents! requires ident args.\n   --> $DIR/macros-nonfatal-errors.rs:15:5"}, {"sha": "d04b0c1a6303e966adecf4cbdb52bdbb089bffca", "filename": "src/test/ui/out-of-stack.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fout-of-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10/src%2Ftest%2Fui%2Fout-of-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fout-of-stack.rs?ref=1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "patch": "@@ -8,7 +8,7 @@\n // ignore-emscripten no processes\n // ignore-sgx no processes\n \n-#![feature(asm)]\n+#![feature(llvm_asm)]\n #![feature(rustc_private)]\n \n #[cfg(unix)]\n@@ -22,7 +22,7 @@ use std::thread;\n // Inlining to avoid llvm turning the recursive functions into tail calls,\n // which doesn't consume stack.\n #[inline(always)]\n-pub fn black_box<T>(dummy: T) { unsafe { asm!(\"\" : : \"r\"(&dummy)) } }\n+pub fn black_box<T>(dummy: T) { unsafe { llvm_asm!(\"\" : : \"r\"(&dummy)) } }\n \n fn silent_recurse() {\n     let buf = [0u8; 1000];"}]}