{"sha": "ee7413b94cd0f953518ad73f37cac28feb6e8d52", "node_id": "C_kwDOAAsO6NoAKGVlNzQxM2I5NGNkMGY5NTM1MThhZDczZjM3Y2FjMjhmZWI2ZThkNTI", "commit": {"author": {"name": "Samuel E. Moelius III", "email": "sam@moeli.us", "date": "2022-03-19T16:04:59Z"}, "committer": {"name": "Samuel E. Moelius III", "email": "sam@moeli.us", "date": "2022-03-25T00:08:45Z"}, "message": "Implement `apply_switch_int_edge_effects` for backward analyses", "tree": {"sha": "c8498d2810b67b5217da929bd1edecf7d86f6ad0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8498d2810b67b5217da929bd1edecf7d86f6ad0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee7413b94cd0f953518ad73f37cac28feb6e8d52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee7413b94cd0f953518ad73f37cac28feb6e8d52", "html_url": "https://github.com/rust-lang/rust/commit/ee7413b94cd0f953518ad73f37cac28feb6e8d52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee7413b94cd0f953518ad73f37cac28feb6e8d52/comments", "author": {"login": "smoelius", "id": 35515885, "node_id": "MDQ6VXNlcjM1NTE1ODg1", "avatar_url": "https://avatars.githubusercontent.com/u/35515885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smoelius", "html_url": "https://github.com/smoelius", "followers_url": "https://api.github.com/users/smoelius/followers", "following_url": "https://api.github.com/users/smoelius/following{/other_user}", "gists_url": "https://api.github.com/users/smoelius/gists{/gist_id}", "starred_url": "https://api.github.com/users/smoelius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smoelius/subscriptions", "organizations_url": "https://api.github.com/users/smoelius/orgs", "repos_url": "https://api.github.com/users/smoelius/repos", "events_url": "https://api.github.com/users/smoelius/events{/privacy}", "received_events_url": "https://api.github.com/users/smoelius/received_events", "type": "User", "site_admin": false}, "committer": {"login": "smoelius", "id": 35515885, "node_id": "MDQ6VXNlcjM1NTE1ODg1", "avatar_url": "https://avatars.githubusercontent.com/u/35515885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smoelius", "html_url": "https://github.com/smoelius", "followers_url": "https://api.github.com/users/smoelius/followers", "following_url": "https://api.github.com/users/smoelius/following{/other_user}", "gists_url": "https://api.github.com/users/smoelius/gists{/gist_id}", "starred_url": "https://api.github.com/users/smoelius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smoelius/subscriptions", "organizations_url": "https://api.github.com/users/smoelius/orgs", "repos_url": "https://api.github.com/users/smoelius/repos", "events_url": "https://api.github.com/users/smoelius/events{/privacy}", "received_events_url": "https://api.github.com/users/smoelius/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c7f6d60b103e940f939f568ee2e06de6e914d09", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c7f6d60b103e940f939f568ee2e06de6e914d09", "html_url": "https://github.com/rust-lang/rust/commit/9c7f6d60b103e940f939f568ee2e06de6e914d09"}], "stats": {"total": 64, "additions": 56, "deletions": 8}, "files": [{"sha": "1ad2722d91b8594b1febb9169c7d2e44d545ed33", "filename": "compiler/rustc_mir_dataflow/src/framework/direction.rs", "status": "modified", "additions": 55, "deletions": 5, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/ee7413b94cd0f953518ad73f37cac28feb6e8d52/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7413b94cd0f953518ad73f37cac28feb6e8d52/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs?ref=ee7413b94cd0f953518ad73f37cac28feb6e8d52", "patch": "@@ -248,6 +248,7 @@ impl Direction for Backward {\n                     );\n                     propagate(pred, &tmp);\n                 }\n+\n                 mir::TerminatorKind::InlineAsm {\n                     destination: Some(dest), ref operands, ..\n                 } if dest == bb => {\n@@ -266,6 +267,25 @@ impl Direction for Backward {\n                     propagate(pred, &tmp);\n                 }\n \n+                mir::TerminatorKind::SwitchInt { ref targets, ref discr, switch_ty: _ } => {\n+                    let mut applier = BackwardSwitchIntEdgeEffectsApplier {\n+                        pred,\n+                        exit_state,\n+                        targets,\n+                        bb,\n+                        propagate: &mut propagate,\n+                        effects_applied: false,\n+                    };\n+\n+                    analysis.apply_switch_int_edge_effects(pred, discr, &mut applier);\n+\n+                    let BackwardSwitchIntEdgeEffectsApplier { effects_applied, .. } = applier;\n+\n+                    if !effects_applied {\n+                        propagate(pred, exit_state)\n+                    }\n+                }\n+\n                 // Ignore dead unwinds.\n                 mir::TerminatorKind::Call { cleanup: Some(unwind), .. }\n                 | mir::TerminatorKind::Assert { cleanup: Some(unwind), .. }\n@@ -286,6 +306,33 @@ impl Direction for Backward {\n     }\n }\n \n+struct BackwardSwitchIntEdgeEffectsApplier<'a, D, F> {\n+    pred: BasicBlock,\n+    exit_state: &'a mut D,\n+    targets: &'a SwitchTargets,\n+    bb: BasicBlock,\n+    propagate: &'a mut F,\n+\n+    effects_applied: bool,\n+}\n+\n+impl<D, F> super::SwitchIntEdgeEffects<D> for BackwardSwitchIntEdgeEffectsApplier<'_, D, F>\n+where\n+    D: Clone,\n+    F: FnMut(BasicBlock, &D),\n+{\n+    fn apply(&mut self, mut apply_edge_effect: impl FnMut(&mut D, SwitchIntTarget)) {\n+        assert!(!self.effects_applied);\n+\n+        let value =\n+            self.targets.iter().find_map(|(value, target)| (target == self.bb).then_some(value));\n+        apply_edge_effect(self.exit_state, SwitchIntTarget { value, target: self.bb });\n+        (self.propagate)(self.pred, self.exit_state);\n+\n+        self.effects_applied = true;\n+    }\n+}\n+\n /// Dataflow that runs from the entry of a block (the first statement), to its exit (terminator).\n pub struct Forward;\n \n@@ -528,7 +575,7 @@ impl Direction for Forward {\n             }\n \n             SwitchInt { ref targets, ref discr, switch_ty: _ } => {\n-                let mut applier = SwitchIntEdgeEffectApplier {\n+                let mut applier = ForwardSwitchIntEdgeEffectsApplier {\n                     exit_state,\n                     targets,\n                     propagate,\n@@ -537,8 +584,11 @@ impl Direction for Forward {\n \n                 analysis.apply_switch_int_edge_effects(bb, discr, &mut applier);\n \n-                let SwitchIntEdgeEffectApplier {\n-                    exit_state, mut propagate, effects_applied, ..\n+                let ForwardSwitchIntEdgeEffectsApplier {\n+                    exit_state,\n+                    mut propagate,\n+                    effects_applied,\n+                    ..\n                 } = applier;\n \n                 if !effects_applied {\n@@ -551,15 +601,15 @@ impl Direction for Forward {\n     }\n }\n \n-struct SwitchIntEdgeEffectApplier<'a, D, F> {\n+struct ForwardSwitchIntEdgeEffectsApplier<'a, D, F> {\n     exit_state: &'a mut D,\n     targets: &'a SwitchTargets,\n     propagate: F,\n \n     effects_applied: bool,\n }\n \n-impl<D, F> super::SwitchIntEdgeEffects<D> for SwitchIntEdgeEffectApplier<'_, D, F>\n+impl<D, F> super::SwitchIntEdgeEffects<D> for ForwardSwitchIntEdgeEffectsApplier<'_, D, F>\n where\n     D: Clone,\n     F: FnMut(BasicBlock, &D),"}, {"sha": "67c16e6c0849d422754fbcbaabff4b3674f592c8", "filename": "compiler/rustc_mir_dataflow/src/framework/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee7413b94cd0f953518ad73f37cac28feb6e8d52/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7413b94cd0f953518ad73f37cac28feb6e8d52/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fmod.rs?ref=ee7413b94cd0f953518ad73f37cac28feb6e8d52", "patch": "@@ -234,8 +234,6 @@ pub trait Analysis<'tcx>: AnalysisDomain<'tcx> {\n     /// about a given `SwitchInt` terminator for each one of its edges\u2014and more efficient\u2014the\n     /// engine doesn't need to clone the exit state for a block unless\n     /// `SwitchIntEdgeEffects::apply` is actually called.\n-    ///\n-    /// FIXME: This class of effects is not supported for backward dataflow analyses.\n     fn apply_switch_int_edge_effects(\n         &self,\n         _block: BasicBlock,"}, {"sha": "c221b35867082716117f157dff9a11f78d54f65f", "filename": "compiler/rustc_mir_dataflow/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee7413b94cd0f953518ad73f37cac28feb6e8d52/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7413b94cd0f953518ad73f37cac28feb6e8d52/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs?ref=ee7413b94cd0f953518ad73f37cac28feb6e8d52", "patch": "@@ -28,7 +28,7 @@ pub use self::drop_flag_effects::{\n pub use self::framework::{\n     fmt, graphviz, lattice, visit_results, Analysis, AnalysisDomain, Backward, CallReturnPlaces,\n     Direction, Engine, Forward, GenKill, GenKillAnalysis, JoinSemiLattice, Results, ResultsCursor,\n-    ResultsRefCursor, ResultsVisitable, ResultsVisitor,\n+    ResultsRefCursor, ResultsVisitable, ResultsVisitor, SwitchIntEdgeEffects,\n };\n \n use self::move_paths::MoveData;"}]}