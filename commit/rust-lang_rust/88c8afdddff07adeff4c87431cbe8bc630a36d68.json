{"sha": "88c8afdddff07adeff4c87431cbe8bc630a36d68", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4YzhhZmRkZGZmMDdhZGVmZjRjODc0MzFjYmU4YmM2MzBhMzZkNjg=", "commit": {"author": {"name": "JarredAllen", "email": "jarredallen73@gmail.com", "date": "2020-05-10T03:20:57Z"}, "committer": {"name": "JarredAllen", "email": "jarredallen73@gmail.com", "date": "2020-07-03T23:47:38Z"}, "message": "Handle ref, mut, &, and &mut on the option", "tree": {"sha": "335f3927839018f697516e44a07d78515df82572", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/335f3927839018f697516e44a07d78515df82572"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88c8afdddff07adeff4c87431cbe8bc630a36d68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88c8afdddff07adeff4c87431cbe8bc630a36d68", "html_url": "https://github.com/rust-lang/rust/commit/88c8afdddff07adeff4c87431cbe8bc630a36d68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88c8afdddff07adeff4c87431cbe8bc630a36d68/comments", "author": {"login": "JarredAllen", "id": 19656507, "node_id": "MDQ6VXNlcjE5NjU2NTA3", "avatar_url": "https://avatars.githubusercontent.com/u/19656507?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JarredAllen", "html_url": "https://github.com/JarredAllen", "followers_url": "https://api.github.com/users/JarredAllen/followers", "following_url": "https://api.github.com/users/JarredAllen/following{/other_user}", "gists_url": "https://api.github.com/users/JarredAllen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JarredAllen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JarredAllen/subscriptions", "organizations_url": "https://api.github.com/users/JarredAllen/orgs", "repos_url": "https://api.github.com/users/JarredAllen/repos", "events_url": "https://api.github.com/users/JarredAllen/events{/privacy}", "received_events_url": "https://api.github.com/users/JarredAllen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JarredAllen", "id": 19656507, "node_id": "MDQ6VXNlcjE5NjU2NTA3", "avatar_url": "https://avatars.githubusercontent.com/u/19656507?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JarredAllen", "html_url": "https://github.com/JarredAllen", "followers_url": "https://api.github.com/users/JarredAllen/followers", "following_url": "https://api.github.com/users/JarredAllen/following{/other_user}", "gists_url": "https://api.github.com/users/JarredAllen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JarredAllen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JarredAllen/subscriptions", "organizations_url": "https://api.github.com/users/JarredAllen/orgs", "repos_url": "https://api.github.com/users/JarredAllen/repos", "events_url": "https://api.github.com/users/JarredAllen/events{/privacy}", "received_events_url": "https://api.github.com/users/JarredAllen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b85796fe3613e20a4af21933783a3d993bb8d7ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/b85796fe3613e20a4af21933783a3d993bb8d7ad", "html_url": "https://github.com/rust-lang/rust/commit/b85796fe3613e20a4af21933783a3d993bb8d7ad"}], "stats": {"total": 183, "additions": 158, "deletions": 25}, "files": [{"sha": "4e501f4ca02acdd2a32fd0ace904d726362ad055", "filename": "clippy_lints/src/option_if_let_else.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/88c8afdddff07adeff4c87431cbe8bc630a36d68/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c8afdddff07adeff4c87431cbe8bc630a36d68/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foption_if_let_else.rs?ref=88c8afdddff07adeff4c87431cbe8bc630a36d68", "patch": "@@ -140,18 +140,24 @@ fn contains_return_break_continue<'tcx>(expression: &'tcx Expr<'tcx>) -> bool {\n /// this function returns an OptionIfLetElseOccurence struct with details if\n /// this construct is found, or None if this construct is not found.\n fn detect_option_if_let_else<'a>(cx: &LateContext<'_, 'a>, expr: &'a Expr<'a>) -> Option<OptionIfLetElseOccurence> {\n-    //(String, String, String, String)> {\n     if_chain! {\n-        // if !utils::in_macro(expr.span); // Don't lint macros, because it behaves weirdly\n+        if !utils::in_macro(expr.span); // Don't lint macros, because it behaves weirdly\n         if let ExprKind::Match(let_body, arms, MatchSource::IfLetDesugar{contains_else_clause: true}) = &expr.kind;\n         if arms.len() == 2;\n-        if match_type(cx, &cx.tables.expr_ty(let_body), &paths::OPTION);\n+        // if type_is_option(cx, &cx.tables.expr_ty(let_body).kind);\n         if !is_result_ok(cx, let_body); // Don't lint on Result::ok because a different lint does it already\n-        if let PatKind::TupleStruct(_, &[inner_pat], _) = &arms[0].pat.kind;\n-        if let PatKind::Binding(_, _, id, _) = &inner_pat.kind;\n+        if let PatKind::TupleStruct(struct_qpath, &[inner_pat], _) = &arms[0].pat.kind;\n+        if utils::match_qpath(struct_qpath, &paths::OPTION_SOME);\n+        if let PatKind::Binding(bind_annotation, _, id, _) = &inner_pat.kind;\n         if !contains_return_break_continue(arms[0].body);\n         if !contains_return_break_continue(arms[1].body);\n         then {\n+            let (capture_mut, capture_ref, capture_ref_mut) = match bind_annotation {\n+                BindingAnnotation::Unannotated => (false, false, false),\n+                BindingAnnotation::Mutable => (true, false, false),\n+                BindingAnnotation::Ref => (false, true, false),\n+                BindingAnnotation::RefMut => (false, false, true),\n+            };\n             let some_body = if let ExprKind::Block(Block { stmts: statements, expr: Some(expr), .. }, _)\n                 = &arms[0].body.kind {\n                 if let &[] = &statements {\n@@ -189,21 +195,23 @@ fn detect_option_if_let_else<'a>(cx: &LateContext<'_, 'a>, expr: &'a Expr<'a>) -\n                     }\n                 }\n             });\n-            let parens_around_option = match &let_body.kind {\n+            let (parens_around_option, as_ref, as_mut, let_body) = match &let_body.kind {\n                 ExprKind::Call(..)\n                         | ExprKind::MethodCall(..)\n                         | ExprKind::Loop(..)\n                         | ExprKind::Match(..)\n                         | ExprKind::Block(..)\n                         | ExprKind::Field(..)\n                         | ExprKind::Path(_)\n-                    => false,\n-                _ => true,\n+                    => (false, capture_ref, capture_ref_mut, let_body),\n+                ExprKind::Unary(UnOp::UnDeref, expr) => (false, capture_ref, capture_ref_mut, expr),\n+                ExprKind::AddrOf(_, mutability, expr) => (false, mutability == &Mutability::Not, mutability == &Mutability::Mut, expr),\n+                _ => (true, capture_ref, capture_ref_mut, let_body),\n             };\n             Some(OptionIfLetElseOccurence {\n-                option: format!(\"{}{}{}\", if parens_around_option { \"(\" } else { \"\" }, Sugg::hir(cx, let_body, \"..\"), if parens_around_option { \")\" } else { \"\" }),\n+                option: format!(\"{}{}{}{}\", if parens_around_option { \"(\" } else { \"\" }, Sugg::hir(cx, let_body, \"..\"), if parens_around_option { \")\" } else { \"\" }, if as_mut { \".as_mut()\" } else if as_ref { \".as_ref()\" } else { \"\" }),\n                 method_sugg: format!(\"{}\", method_sugg),\n-                some_expr: format!(\"|{}| {}\", capture_name, Sugg::hir(cx, some_body, \"..\")),\n+                some_expr: format!(\"|{}{}{}| {}\", if false { \"ref \" } else { \"\" }, if capture_mut { \"mut \" } else { \"\" }, capture_name, Sugg::hir(cx, some_body, \"..\")),\n                 none_expr: format!(\"{}{}\", if method_sugg == \"map_or\" { \"\" } else { \"|| \" }, Sugg::hir(cx, none_body, \"..\")),\n                 wrap_braces,\n             })"}, {"sha": "695a460cc4edfda0a16871c1aa0b3f1498359271", "filename": "tests/ui/option_if_let_else.fixed", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/88c8afdddff07adeff4c87431cbe8bc630a36d68/tests%2Fui%2Foption_if_let_else.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/88c8afdddff07adeff4c87431cbe8bc630a36d68/tests%2Fui%2Foption_if_let_else.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_if_let_else.fixed?ref=88c8afdddff07adeff4c87431cbe8bc630a36d68", "patch": "@@ -11,8 +11,22 @@ fn else_if_option(string: Option<&str>) -> Option<(bool, &str)> {\n     } else { string.map_or(Some((false, \"\")), |x| Some((true, x))) }\n }\n \n-fn unop_bad(string: &Option<&str>) -> usize {\n-    (*string).map_or(0, |s| s.len())\n+fn unop_bad(string: &Option<&str>, mut num: Option<i32>) {\n+    let _ = string.map_or(0, |s| s.len());\n+    let _ = num.as_ref().map_or(&0, |s| s);\n+    let _ = num.as_mut().map_or(&mut 0, |s| {\n+        *s += 1;\n+        s\n+    });\n+    let _ = num.as_ref().map_or(&0, |s| s);\n+    let _ = num.map_or(0, |mut s| {\n+        s += 1;\n+        s\n+    });\n+    let _ = num.as_mut().map_or(&mut 0, |s| {\n+        *s += 1;\n+        s\n+    });\n }\n \n fn longer_body(arg: Option<u32>) -> u32 {\n@@ -53,7 +67,7 @@ fn main() {\n     let _ = optional.map_or(5, |x| x + 2);\n     let _ = bad1(None);\n     let _ = else_if_option(None);\n-    let _ = unop_bad(&None);\n+    unop_bad(&None, None);\n     let _ = longer_body(None);\n     test_map_or_else(None);\n     let _ = negative_tests(None);"}, {"sha": "6f9d506d3470b7261ef1605cc2606ebaa8fb866e", "filename": "tests/ui/option_if_let_else.rs", "status": "modified", "additions": 32, "deletions": 4, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/88c8afdddff07adeff4c87431cbe8bc630a36d68/tests%2Fui%2Foption_if_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c8afdddff07adeff4c87431cbe8bc630a36d68/tests%2Fui%2Foption_if_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_if_let_else.rs?ref=88c8afdddff07adeff4c87431cbe8bc630a36d68", "patch": "@@ -19,12 +19,40 @@ fn else_if_option(string: Option<&str>) -> Option<(bool, &str)> {\n     }\n }\n \n-fn unop_bad(string: &Option<&str>) -> usize {\n-    if let Some(s) = *string {\n+fn unop_bad(string: &Option<&str>, mut num: Option<i32>) {\n+    let _ = if let Some(s) = *string {\n         s.len()\n     } else {\n         0\n-    }\n+    };\n+    let _ = if let Some(s) = &num {\n+        s\n+    } else {\n+        &0\n+    };\n+    let _ = if let Some(s) = &mut num {\n+        *s += 1;\n+        s\n+    } else {\n+        &mut 0\n+    };\n+    let _ = if let Some(ref s) = num {\n+        s\n+    } else {\n+        &0\n+    };\n+    let _ = if let Some(mut s) = num {\n+        s += 1;\n+        s\n+    } else {\n+        0\n+    };\n+    let _ = if let Some(ref mut s) = num {\n+        *s += 1;\n+        s\n+    } else {\n+        &mut 0\n+    };\n }\n \n fn longer_body(arg: Option<u32>) -> u32 {\n@@ -69,7 +97,7 @@ fn main() {\n     let _ = if let Some(x) = optional { x + 2 } else { 5 };\n     let _ = bad1(None);\n     let _ = else_if_option(None);\n-    let _ = unop_bad(&None);\n+    unop_bad(&None, None);\n     let _ = longer_body(None);\n     test_map_or_else(None);\n     let _ = negative_tests(None);"}, {"sha": "9240d3edb27e9a1e6344c66aee89ec3094999cdd", "filename": "tests/ui/option_if_let_else.stderr", "status": "modified", "additions": 91, "deletions": 8, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/88c8afdddff07adeff4c87431cbe8bc630a36d68/tests%2Fui%2Foption_if_let_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88c8afdddff07adeff4c87431cbe8bc630a36d68/tests%2Fui%2Foption_if_let_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_if_let_else.stderr?ref=88c8afdddff07adeff4c87431cbe8bc630a36d68", "patch": "@@ -22,17 +22,100 @@ LL | |     }\n    | |_____^ help: try: `{ string.map_or(Some((false, \"\")), |x| Some((true, x))) }`\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:23:5\n+  --> $DIR/option_if_let_else.rs:23:13\n    |\n-LL | /     if let Some(s) = *string {\n+LL |       let _ = if let Some(s) = *string {\n+   |  _____________^\n LL | |         s.len()\n LL | |     } else {\n LL | |         0\n-LL | |     }\n-   | |_____^ help: try: `(*string).map_or(0, |s| s.len())`\n+LL | |     };\n+   | |_____^ help: try: `string.map_or(0, |s| s.len())`\n+\n+error: use Option::map_or instead of an if let/else\n+  --> $DIR/option_if_let_else.rs:28:13\n+   |\n+LL |       let _ = if let Some(s) = &num {\n+   |  _____________^\n+LL | |         s\n+LL | |     } else {\n+LL | |         &0\n+LL | |     };\n+   | |_____^ help: try: `num.as_ref().map_or(&0, |s| s)`\n+\n+error: use Option::map_or instead of an if let/else\n+  --> $DIR/option_if_let_else.rs:33:13\n+   |\n+LL |       let _ = if let Some(s) = &mut num {\n+   |  _____________^\n+LL | |         *s += 1;\n+LL | |         s\n+LL | |     } else {\n+LL | |         &mut 0\n+LL | |     };\n+   | |_____^\n+   |\n+help: try\n+   |\n+LL |     let _ = num.as_mut().map_or(&mut 0, |s| {\n+LL |         *s += 1;\n+LL |         s\n+LL |     });\n+   |\n+\n+error: use Option::map_or instead of an if let/else\n+  --> $DIR/option_if_let_else.rs:39:13\n+   |\n+LL |       let _ = if let Some(ref s) = num {\n+   |  _____________^\n+LL | |         s\n+LL | |     } else {\n+LL | |         &0\n+LL | |     };\n+   | |_____^ help: try: `num.as_ref().map_or(&0, |s| s)`\n+\n+error: use Option::map_or instead of an if let/else\n+  --> $DIR/option_if_let_else.rs:44:13\n+   |\n+LL |       let _ = if let Some(mut s) = num {\n+   |  _____________^\n+LL | |         s += 1;\n+LL | |         s\n+LL | |     } else {\n+LL | |         0\n+LL | |     };\n+   | |_____^\n+   |\n+help: try\n+   |\n+LL |     let _ = num.map_or(0, |mut s| {\n+LL |         s += 1;\n+LL |         s\n+LL |     });\n+   |\n+\n+error: use Option::map_or instead of an if let/else\n+  --> $DIR/option_if_let_else.rs:50:13\n+   |\n+LL |       let _ = if let Some(ref mut s) = num {\n+   |  _____________^\n+LL | |         *s += 1;\n+LL | |         s\n+LL | |     } else {\n+LL | |         &mut 0\n+LL | |     };\n+   | |_____^\n+   |\n+help: try\n+   |\n+LL |     let _ = num.as_mut().map_or(&mut 0, |s| {\n+LL |         *s += 1;\n+LL |         s\n+LL |     });\n+   |\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:31:5\n+  --> $DIR/option_if_let_else.rs:59:5\n    |\n LL | /     if let Some(x) = arg {\n LL | |         let y = x * x;\n@@ -51,7 +134,7 @@ LL |     })\n    |\n \n error: use Option::map_or_else instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:40:13\n+  --> $DIR/option_if_let_else.rs:68:13\n    |\n LL |       let _ = if let Some(x) = arg {\n    |  _____________^\n@@ -74,10 +157,10 @@ LL |     }, |x| x * x * x * x);\n    |\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:69:13\n+  --> $DIR/option_if_let_else.rs:97:13\n    |\n LL |     let _ = if let Some(x) = optional { x + 2 } else { 5 };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `optional.map_or(5, |x| x + 2)`\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 11 previous errors\n "}]}