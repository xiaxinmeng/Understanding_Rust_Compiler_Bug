{"sha": "e0fa999891e56ebaaf4eb10982a816d9f0a9dd55", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwZmE5OTk4OTFlNTZlYmFhZjRlYjEwOTgyYTgxNmQ5ZjBhOWRkNTU=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2014-08-07T20:37:39Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2014-08-07T20:37:39Z"}, "message": "Guide: strings", "tree": {"sha": "28f5571af105192674debbf1ec50fc7abc9d5948", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28f5571af105192674debbf1ec50fc7abc9d5948"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0fa999891e56ebaaf4eb10982a816d9f0a9dd55", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0fa999891e56ebaaf4eb10982a816d9f0a9dd55", "html_url": "https://github.com/rust-lang/rust/commit/e0fa999891e56ebaaf4eb10982a816d9f0a9dd55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0fa999891e56ebaaf4eb10982a816d9f0a9dd55/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5df5f56069de2778857597118a6e5f95d659736", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5df5f56069de2778857597118a6e5f95d659736", "html_url": "https://github.com/rust-lang/rust/commit/e5df5f56069de2778857597118a6e5f95d659736"}], "stats": {"total": 80, "additions": 80, "deletions": 0}, "files": [{"sha": "347ff3100daaeefeefd9caba5a85cb7644fb5fdd", "filename": "src/doc/guide.md", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/e0fa999891e56ebaaf4eb10982a816d9f0a9dd55/src%2Fdoc%2Fguide.md", "raw_url": "https://github.com/rust-lang/rust/raw/e0fa999891e56ebaaf4eb10982a816d9f0a9dd55/src%2Fdoc%2Fguide.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide.md?ref=e0fa999891e56ebaaf4eb10982a816d9f0a9dd55", "patch": "@@ -1432,6 +1432,86 @@ building our guessing game, but we need to know how to do one last thing first:\n get input from the keyboard. You can't have a guessing game without the ability\n to guess!\n \n+# Strings\n+\n+Strings are an important concept for any programmer to master. Rust's string\n+handling system is a bit different than in other languages, due to its systems\n+focus. Any time you have a data structure of variable size, things can get\n+tricky, and strings are a re-sizable data structure. That said, Rust's strings\n+also work differently than in some other systems languages, such as C.\n+\n+Let's dig into the details. A **string** is a sequence of unicode scalar values\n+encoded as a stream of UTF-8 bytes. All strings are guaranteed to be\n+validly-encoded UTF-8 sequences. Additionally, strings are not null-terminated\n+and can contain null bytes.\n+\n+Rust has two main types of strings: `&str` and `String`.\n+\n+The first kind is a `&str`. This is pronounced a 'string slice.' String literals\n+are of the type `&str`:\n+\n+```{rust}\n+let string = \"Hello there.\";\n+```\n+\n+This string is statically allocated, meaning that it's saved inside our\n+compiled program, and exists for the entire duration it runs. The `string`\n+binding is a reference to this statically allocated string. String slices\n+have a fixed size, and cannot be mutated.\n+\n+A `String`, on the other hand, is an in-memory string.  This string is\n+growable, and is also guaranteed to be UTF-8.\n+\n+```{rust}\n+let mut s = \"Hello\".to_string();\n+println!(\"{}\", s);\n+\n+s.push_str(\", world.\");\n+println!(\"{}\", s);\n+```\n+\n+You can coerce a `String` into a `&str` with the `as_slice()` method:\n+\n+```{rust}\n+fn takes_slice(slice: &str) {\n+    println!(\"Got: {}\", slice);\n+}\n+\n+fn main() {\n+    let s = \"Hello\".to_string();\n+    takes_slice(s.as_slice());\n+}\n+```\n+\n+To compare a String to a constant string, prefer `as_slice()`...\n+\n+```{rust}\n+fn compare(string: String) {\n+    if string.as_slice() == \"Hello\" {\n+        println!(\"yes\");\n+    }\n+}\n+```\n+\n+... over `to_string()`:\n+\n+```{rust}\n+fn compare(string: String) {\n+    if string == \"Hello\".to_string() {\n+        println!(\"yes\");\n+    }\n+}\n+```\n+\n+Converting a `String` to a `&str` is cheap, but converting the `&str` to a\n+`String` involves allocating memory. No reason to do that unless you have to!\n+\n+That's the basics of strings in Rust! They're probably a bit more complicated\n+than you are used to, if you come from a scripting language, but when the\n+low-level details matter, they really matter. Just remember that `String`s\n+allocate memory and control their data, while `&str`s are a reference to\n+another string, and you'll be all set.\n+\n # Standard Input\n \n Getting input from the keyboard is pretty easy, but uses some things"}]}