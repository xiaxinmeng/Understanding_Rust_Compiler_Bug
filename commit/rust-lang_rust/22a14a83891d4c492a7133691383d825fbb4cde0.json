{"sha": "22a14a83891d4c492a7133691383d825fbb4cde0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyYTE0YTgzODkxZDRjNDkyYTcxMzM2OTEzODNkODI1ZmJiNGNkZTA=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-07-21T09:27:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-21T09:27:01Z"}, "message": "Rollup merge of #34937 - GuillaumeGomez:hash_map_entry_debug, r=apasel422\n\nAdd debug for hash_map::{Entry, VacantEntry, OccupiedEntry}\n\nr? @alexcrichton", "tree": {"sha": "e370ed899678d5f36a30e52434997535a625ea9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e370ed899678d5f36a30e52434997535a625ea9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22a14a83891d4c492a7133691383d825fbb4cde0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22a14a83891d4c492a7133691383d825fbb4cde0", "html_url": "https://github.com/rust-lang/rust/commit/22a14a83891d4c492a7133691383d825fbb4cde0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22a14a83891d4c492a7133691383d825fbb4cde0/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1006f794cdb45e28dfdd4a548f8a891ec4023598", "url": "https://api.github.com/repos/rust-lang/rust/commits/1006f794cdb45e28dfdd4a548f8a891ec4023598", "html_url": "https://github.com/rust-lang/rust/commit/1006f794cdb45e28dfdd4a548f8a891ec4023598"}, {"sha": "ce442b4f5195ff6af27ae3335c7bb372015c1407", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce442b4f5195ff6af27ae3335c7bb372015c1407", "html_url": "https://github.com/rust-lang/rust/commit/ce442b4f5195ff6af27ae3335c7bb372015c1407"}], "stats": {"total": 33, "additions": 33, "deletions": 0}, "files": [{"sha": "a03249e0063568b38ec49ee378e021a8d6b72c2f", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/22a14a83891d4c492a7133691383d825fbb4cde0/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a14a83891d4c492a7133691383d825fbb4cde0/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=22a14a83891d4c492a7133691383d825fbb4cde0", "patch": "@@ -1351,13 +1351,37 @@ pub enum Entry<'a, K: 'a, V: 'a> {\n     ),\n }\n \n+#[stable(feature= \"debug_hash_map\", since = \"1.12.0\")]\n+impl<'a, K: 'a + Debug, V: 'a + Debug> Debug for Entry<'a, K, V> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        match *self {\n+            Vacant(ref v) => f.debug_tuple(\"Entry\")\n+                              .field(v)\n+                              .finish(),\n+            Occupied(ref o) => f.debug_tuple(\"Entry\")\n+                                .field(o)\n+                                .finish(),\n+        }\n+    }\n+}\n+\n /// A view into a single occupied location in a HashMap.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct OccupiedEntry<'a, K: 'a, V: 'a> {\n     key: Option<K>,\n     elem: FullBucket<K, V, &'a mut RawTable<K, V>>,\n }\n \n+#[stable(feature= \"debug_hash_map\", since = \"1.12.0\")]\n+impl<'a, K: 'a + Debug, V: 'a + Debug> Debug for OccupiedEntry<'a, K, V> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_struct(\"OccupiedEntry\")\n+         .field(\"key\", self.key())\n+         .field(\"value\", self.get())\n+         .finish()\n+    }\n+}\n+\n /// A view into a single empty location in a HashMap.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct VacantEntry<'a, K: 'a, V: 'a> {\n@@ -1366,6 +1390,15 @@ pub struct VacantEntry<'a, K: 'a, V: 'a> {\n     elem: VacantEntryState<K, V, &'a mut RawTable<K, V>>,\n }\n \n+#[stable(feature= \"debug_hash_map\", since = \"1.12.0\")]\n+impl<'a, K: 'a + Debug, V: 'a> Debug for VacantEntry<'a, K, V> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"VacantEntry\")\n+         .field(self.key())\n+         .finish()\n+    }\n+}\n+\n /// Possible states of a VacantEntry.\n enum VacantEntryState<K, V, M> {\n     /// The index is occupied, but the key to insert has precedence,"}]}