{"sha": "ed62f6dfe0c8f3b8b2769c65bb7b7bb8b3815b1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkNjJmNmRmZTBjOGYzYjhiMjc2OWM2NWJiN2I3YmI4YjM4MTViMWE=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-03-29T14:29:52Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-03-29T16:04:26Z"}, "message": "core: add consume_reverse", "tree": {"sha": "21bf6053068a469f554e51f61cf4e3feee6c55ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21bf6053068a469f554e51f61cf4e3feee6c55ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed62f6dfe0c8f3b8b2769c65bb7b7bb8b3815b1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed62f6dfe0c8f3b8b2769c65bb7b7bb8b3815b1a", "html_url": "https://github.com/rust-lang/rust/commit/ed62f6dfe0c8f3b8b2769c65bb7b7bb8b3815b1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed62f6dfe0c8f3b8b2769c65bb7b7bb8b3815b1a/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90b3658cd69f63d95f3bf568e6f23406c56f11a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/90b3658cd69f63d95f3bf568e6f23406c56f11a7", "html_url": "https://github.com/rust-lang/rust/commit/90b3658cd69f63d95f3bf568e6f23406c56f11a7"}], "stats": {"total": 28, "additions": 28, "deletions": 0}, "files": [{"sha": "426166ec430aec31382d8e4b43fff23a79e6595a", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ed62f6dfe0c8f3b8b2769c65bb7b7bb8b3815b1a/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed62f6dfe0c8f3b8b2769c65bb7b7bb8b3815b1a/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=ed62f6dfe0c8f3b8b2769c65bb7b7bb8b3815b1a", "patch": "@@ -558,6 +558,28 @@ pub fn consume<T>(mut v: ~[T], f: &fn(uint, v: T)) {\n     }\n }\n \n+pub fn consume_reverse<T>(mut v: ~[T], f: &fn(uint, v: T)) {\n+    unsafe {\n+        do as_mut_buf(v) |p, ln| {\n+            let mut i = ln;\n+            while i > 0 {\n+                i -= 1;\n+\n+                // NB: This unsafe operation counts on init writing 0s to the\n+                // holes we create in the vector. That ensures that, if the\n+                // iterator fails then we won't try to clean up the consumed\n+                // elements during unwinding\n+                let mut x = intrinsics::init();\n+                let p = ptr::mut_offset(p, i);\n+                x <-> *p;\n+                f(i, x);\n+            }\n+        }\n+\n+        raw::set_len(&mut v, 0);\n+    }\n+}\n+\n /// Remove the last element from a vector and return it\n pub fn pop<T>(v: &mut ~[T]) -> T {\n     let ln = v.len();\n@@ -1983,6 +2005,7 @@ pub trait OwnedVector<T> {\n     fn truncate(&mut self, newlen: uint);\n     fn retain(&mut self, f: &fn(t: &T) -> bool);\n     fn consume(self, f: &fn(uint, v: T));\n+    fn consume_reverse(self, f: &fn(uint, v: T));\n     fn filter(self, f: &fn(t: &T) -> bool) -> ~[T];\n     fn partition(self, f: &fn(&T) -> bool) -> (~[T], ~[T]);\n     fn grow_fn(&mut self, n: uint, op: iter::InitOp<T>);\n@@ -2044,6 +2067,11 @@ impl<T> OwnedVector<T> for ~[T] {\n         consume(self, f)\n     }\n \n+    #[inline]\n+    fn consume_reverse(self, f: &fn(uint, v: T)) {\n+        consume_reverse(self, f)\n+    }\n+\n     #[inline]\n     fn filter(self, f: &fn(&T) -> bool) -> ~[T] {\n         filter(self, f)"}]}