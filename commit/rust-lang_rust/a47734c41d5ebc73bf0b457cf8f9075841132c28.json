{"sha": "a47734c41d5ebc73bf0b457cf8f9075841132c28", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0NzczNGM0MWQ1ZWJjNzNiZjBiNDU3Y2Y4ZjkwNzU4NDExMzJjMjg=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2018-03-29T12:34:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-03-29T12:34:21Z"}, "message": "Merge pull request #2579 from rust-lang-nursery/lint_audit_mcve\n\nlint audit: Implementation + move one lint", "tree": {"sha": "2793dcbe527f51b6d409605d966394c677bd4767", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2793dcbe527f51b6d409605d966394c677bd4767"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a47734c41d5ebc73bf0b457cf8f9075841132c28", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJavN1NCRBK7hj4Ov3rIwAAdHIIABmblR8EI11QyiLQZgtOLTaQ\nDLbw+cECEggY7itOXNJL8bA07BlP7VF0CEreygghmoqe8HvUaczTGmGyLpENkIjf\nSKe9hibswexmdM9knVfWLNPuK6Is6hzhsHxEdhVO8hP3aHU8AuLk4FU8EN92kDHX\ndLLabbslC14/hk4eymwEFhh/6DxTs4U+ZpJkKnD6H63j+5cIV1HUK4KuejdE6Y3p\nKkj+3Iakt7ew8D087u8gspMaNnMuehdDXmHAyH70i+x8ZEzG1vmrTtrH1PQEi8Oi\nddBvn0/cYAJiUuHjqGvMLtuo68Da7AeJRzwkVuD3MTgAddPGtlwqNWzW0Nf/gHc=\n=46GG\n-----END PGP SIGNATURE-----\n", "payload": "tree 2793dcbe527f51b6d409605d966394c677bd4767\nparent 411d9c76514356eee5c3788b7bd8136ed336c627\nparent c1bbc173da5c2b41565d7465c848bac4409c226e\nauthor Oliver Schneider <oli-obk@users.noreply.github.com> 1522326861 +0200\ncommitter GitHub <noreply@github.com> 1522326861 +0200\n\nMerge pull request #2579 from rust-lang-nursery/lint_audit_mcve\n\nlint audit: Implementation + move one lint"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a47734c41d5ebc73bf0b457cf8f9075841132c28", "html_url": "https://github.com/rust-lang/rust/commit/a47734c41d5ebc73bf0b457cf8f9075841132c28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a47734c41d5ebc73bf0b457cf8f9075841132c28/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "411d9c76514356eee5c3788b7bd8136ed336c627", "url": "https://api.github.com/repos/rust-lang/rust/commits/411d9c76514356eee5c3788b7bd8136ed336c627", "html_url": "https://github.com/rust-lang/rust/commit/411d9c76514356eee5c3788b7bd8136ed336c627"}, {"sha": "c1bbc173da5c2b41565d7465c848bac4409c226e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1bbc173da5c2b41565d7465c848bac4409c226e", "html_url": "https://github.com/rust-lang/rust/commit/c1bbc173da5c2b41565d7465c848bac4409c226e"}], "stats": {"total": 1590, "additions": 931, "deletions": 659}, "files": [{"sha": "bdd2c7dcb0226fbb305fc43f735c7f902a5d3178", "filename": "README.md", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -7,7 +7,16 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 208 lints included in this crate!](https://rust-lang-nursery.github.io/rust-clippy/master/index.html)\n+[There are 248 lints included in this crate!](https://rust-lang-nursery.github.io/rust-clippy/master/index.html)\n+\n+We have a bunch of lint categories to allow you to choose how much clippy is supposed to ~~annoy~~ help you:\n+\n+* `clippy` (everything that has no false positives)\n+* `clippy_pedantic` (everything)\n+* `clippy_style` (code that should be written in a more idiomatic way)\n+* `complexity` (code that does something simple but in a complex way)\n+* `perf` (code that can be written in a faster way)\n+* **`correctness`** (code that is just outright wrong or very very useless)\n \n More to come, please [file an issue](https://github.com/rust-lang-nursery/rust-clippy/issues) if you have ideas!\n "}, {"sha": "d15b48ce2d19e98e5af71cfc4c02c57b80461034", "filename": "clippy_lints/src/approx_const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fapprox_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fapprox_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fapprox_const.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -26,9 +26,9 @@ use utils::span_lint;\n /// ```rust\n /// let x = 3.14;\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub APPROX_CONSTANT,\n-    Warn,\n+    correctness,\n     \"the approximate of a known float constant (in `std::fXX::consts`)\"\n }\n "}, {"sha": "501f49363dd6e441492e6a3a4de0b2506697e884", "filename": "clippy_lints/src/arithmetic.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Farithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Farithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Farithmetic.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -15,8 +15,9 @@ use utils::span_lint;\n /// ```rust\n /// a + 1\n /// ```\n-declare_restriction_lint! {\n+declare_clippy_lint! {\n     pub INTEGER_ARITHMETIC,\n+    restriction,\n     \"any integer arithmetic statement\"\n }\n \n@@ -31,8 +32,9 @@ declare_restriction_lint! {\n /// ```rust\n /// a + 1.0\n /// ```\n-declare_restriction_lint! {\n+declare_clippy_lint! {\n     pub FLOAT_ARITHMETIC,\n+    restriction,\n     \"any floating-point arithmetic statement\"\n }\n "}, {"sha": "4563a58f7abd04b1468d6567d539ce987f54039f", "filename": "clippy_lints/src/array_indexing.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Farray_indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Farray_indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Farray_indexing.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -19,9 +19,9 @@ use consts::{constant, Constant};\n /// x[9];\n /// &x[2..9];\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub OUT_OF_BOUNDS_INDEXING,\n-    Deny,\n+    correctness,\n     \"out of bounds constant indexing\"\n }\n \n@@ -39,8 +39,9 @@ declare_lint! {\n /// x[2];\n /// &x[0..2];\n /// ```\n-declare_restriction_lint! {\n+declare_clippy_lint! {\n     pub INDEXING_SLICING,\n+    restriction,\n     \"indexing/slicing usage\"\n }\n "}, {"sha": "da4b0d6a4379814396ac0fb339e5a9c6a2eb2f96", "filename": "clippy_lints/src/assign_ops.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassign_ops.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -18,8 +18,9 @@ use utils::{higher, sugg};\n /// ```rust\n /// a += 1;\n /// ```\n-declare_restriction_lint! {\n+declare_clippy_lint! {\n     pub ASSIGN_OPS,\n+    restriction,\n     \"any compound assignment operation\"\n }\n \n@@ -37,9 +38,9 @@ declare_restriction_lint! {\n /// ...\n /// a = a + b;\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub ASSIGN_OP_PATTERN,\n-    Warn,\n+    style,\n     \"assigning the result of an operation on a variable to that same variable\"\n }\n \n@@ -57,9 +58,9 @@ declare_lint! {\n /// ...\n /// a += a + b;\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub MISREFACTORED_ASSIGN_OP,\n-    Warn,\n+    complexity,\n     \"having a variable on both sides of an assign op\"\n }\n "}, {"sha": "340d82dfa61d548c9d777e7f658eaf8d04a65892", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -29,9 +29,9 @@ use utils::{in_macro, last_line_of_span, match_def_path, opt_def_id, paths, snip\n /// #[inline(always)]\n /// fn not_quite_hot_code(..) { ... }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub INLINE_ALWAYS,\n-    Warn,\n+    pedantic,\n     \"use of `#[inline(always)]`\"\n }\n \n@@ -53,9 +53,9 @@ declare_lint! {\n /// #[allow(unused_import)]\n /// use foo::bar;\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub USELESS_ATTRIBUTE,\n-    Warn,\n+    correctness,\n     \"use of lint attributes on `extern crate` items\"\n }\n \n@@ -72,9 +72,9 @@ declare_lint! {\n /// #[deprecated(since = \"forever\")]\n /// fn something_else(..) { ... }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub DEPRECATED_SEMVER,\n-    Warn,\n+    correctness,\n     \"use of `#[deprecated(since = \\\"x\\\")]` where x is not semver\"\n }\n \n@@ -103,9 +103,9 @@ declare_lint! {\n /// #[inline(always)]\n /// fn this_is_fine_too(..) { ... }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub EMPTY_LINE_AFTER_OUTER_ATTR,\n-    Warn,\n+    style,\n     \"empty line after outer attribute\"\n }\n "}, {"sha": "b6adbf1bd8627a3096360cd905c24e9c74aacec6", "filename": "clippy_lints/src/bit_mask.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fbit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fbit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbit_mask.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -36,9 +36,9 @@ use consts::{constant, Constant};\n /// ```rust\n /// if (x & 1 == 2) { \u2026 }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub BAD_BIT_MASK,\n-    Warn,\n+    correctness,\n     \"expressions of the form `_ & mask == select` that will only ever return `true` or `false`\"\n }\n \n@@ -64,9 +64,9 @@ declare_lint! {\n /// ```rust\n /// if (x | 1 > 3) { \u2026 }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub INEFFECTIVE_BIT_MASK,\n-    Warn,\n+    correctness,\n     \"expressions where a bit mask will be rendered useless by a comparison, e.g. `(x | 1) > 2`\"\n }\n \n@@ -82,9 +82,9 @@ declare_lint! {\n /// ```rust\n /// x & 0x1111 == 0\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub VERBOSE_BIT_MASK,\n-    Warn,\n+    style,\n     \"expressions where a bit mask is less readable than the corresponding method call\"\n }\n "}, {"sha": "d06e1240b068b45a76d337ddd094f49a26396efe", "filename": "clippy_lints/src/blacklisted_name.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fblacklisted_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fblacklisted_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fblacklisted_name.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -14,9 +14,9 @@ use utils::span_lint;\n /// ```rust\n /// let foo = 3.14;\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub BLACKLISTED_NAME,\n-    Warn,\n+    style,\n     \"usage of a blacklisted/placeholder name\"\n }\n "}, {"sha": "2fd385228b23e4c0be9d1fe0ffdfac8b8f52e1bb", "filename": "clippy_lints/src/block_in_if_condition.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -15,9 +15,9 @@ use utils::*;\n /// ```rust\n /// if { true } ..\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub BLOCK_IN_IF_CONDITION_EXPR,\n-    Warn,\n+    style,\n     \"braces that can be eliminated in conditions, e.g. `if { true } ...`\"\n }\n \n@@ -34,9 +34,9 @@ declare_lint! {\n /// // or\n /// if somefunc(|x| { x == 47 }) ..\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub BLOCK_IN_IF_CONDITION_STMT,\n-    Warn,\n+    style,\n     \"complex blocks in conditions, e.g. `if { let x = true; x } ...`\"\n }\n "}, {"sha": "0fa2c2ac96fab9a0c1d4ec7eab7e2c78e0df8293", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -20,9 +20,9 @@ use utils::{in_macro, snippet_opt, span_lint_and_then, SpanlessEq};\n /// if a && true  // should be: if a\n /// if !(a == b)  // should be: if a != b\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub NONMINIMAL_BOOL,\n-    Allow,\n+    complexity,\n     \"boolean expressions that can be written more concisely\"\n }\n \n@@ -38,9 +38,9 @@ declare_lint! {\n /// if a && b || a { ... }\n /// ```\n /// The `b` is unnecessary, the expression is equivalent to `if a`.\n-declare_lint! {\n+declare_clippy_lint! {\n     pub LOGIC_BUG,\n-    Warn,\n+    correctness,\n     \"boolean expressions that contain terminals which can be eliminated\"\n }\n "}, {"sha": "278decc2ebd6f8a3f55a2f35fa6d3a49afd18bbf", "filename": "clippy_lints/src/bytecount.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fbytecount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fbytecount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbytecount.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -20,9 +20,9 @@ use utils::{contains_name, get_pat_name, match_type, paths, single_segment_path,\n /// ```rust\n /// &my_data.filter(|&x| x == 0u8).count() // use bytecount::count instead\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub NAIVE_BYTECOUNT,\n-    Warn,\n+    perf,\n     \"use of naive `<slice>.filter(|&x| x == y).count()` to count byte values\"\n }\n "}, {"sha": "20a5e606dbf99faa206109aa33e2cbaac6781e0b", "filename": "clippy_lints/src/collapsible_if.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcollapsible_if.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -62,9 +62,9 @@ use utils::sugg::Sugg;\n ///     \u2026\n /// }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub COLLAPSIBLE_IF,\n-    Warn,\n+    style,\n     \"`if`s that can be collapsed (e.g. `if x { if y { ... } }` and `else { if x { ... } }`)\"\n }\n "}, {"sha": "38fcf514626ea7313b3535b7bae890c37f9b0561", "filename": "clippy_lints/src/const_static_lifetime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fconst_static_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fconst_static_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconst_static_lifetime.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -18,9 +18,9 @@ use utils::{in_macro, snippet, span_lint_and_then};\n /// ```rust\n ///  const FOO: &[(&str, &str, fn(&Bar) -> bool)] = &[...]\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub CONST_STATIC_LIFETIME,\n-    Warn,\n+    style,\n     \"Using explicit `'static` lifetime for constants when elision rules would allow omitting them.\"\n }\n "}, {"sha": "1434a1437f0a1ad9f9e23254fafc85eb21b8a0b2", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -33,9 +33,9 @@ use utils::{get_parent_expr, in_macro, snippet, span_lint_and_then, span_note_an\n ///     \u2026\n /// }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub IFS_SAME_COND,\n-    Warn,\n+    correctness,\n     \"consecutive `ifs` with the same condition\"\n }\n \n@@ -54,9 +54,9 @@ declare_lint! {\n ///     42\n /// };\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub IF_SAME_THEN_ELSE,\n-    Warn,\n+    correctness,\n     \"if with the same *then* and *else* blocks\"\n }\n \n@@ -95,9 +95,9 @@ declare_lint! {\n ///     Quz => quz(),\n /// }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub MATCH_SAME_ARMS,\n-    Warn,\n+    pedantic,\n     \"`match` with identical arm bodies\"\n }\n "}, {"sha": "139936554a1d593eb29f7733a59183de00c75cca", "filename": "clippy_lints/src/cyclomatic_complexity.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fcyclomatic_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fcyclomatic_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcyclomatic_complexity.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -19,9 +19,9 @@ use utils::{in_macro, is_allowed, match_type, paths, span_help_and_lint, LimitSt\n /// complexity.\n ///\n /// **Example:** No. You'll see it when you get the warning.\n-declare_lint! {\n+declare_clippy_lint! {\n     pub CYCLOMATIC_COMPLEXITY,\n-    Warn,\n+    complexity,\n     \"functions that should be split up into multiple functions\"\n }\n "}, {"sha": "b505e52c95b3ac34a0292563f8ca38869282a2a6", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -28,9 +28,9 @@ use utils::{is_automatically_derived, is_copy, match_path, span_lint_and_then};\n ///     ...\n /// }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub DERIVE_HASH_XOR_EQ,\n-    Warn,\n+    correctness,\n     \"deriving `Hash` but implementing `PartialEq` explicitly\"\n }\n \n@@ -43,7 +43,7 @@ declare_lint! {\n /// nothing more than copy the object, which is what `#[derive(Copy, Clone)]`\n /// gets you.\n ///\n-/// **Known problems:** None.\n+/// **Known problems:** Bounds of generic types are sometimes wrong: https://github.com/rust-lang/rust/issues/26925\n ///\n /// **Example:**\n /// ```rust\n@@ -54,9 +54,9 @@ declare_lint! {\n ///     ..\n /// }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub EXPL_IMPL_CLONE_ON_COPY,\n-    Warn,\n+    pedantic,\n     \"implementing `Clone` explicitly on `Copy` types\"\n }\n "}, {"sha": "1439c23f0fa6aee9c8eb0979d3d63b0c07fb6b5a", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -25,9 +25,9 @@ use url::Url;\n /// // ^ `foo_bar` and `that::other::module::foo` should be ticked.\n /// fn doit(foo_bar) { .. }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub DOC_MARKDOWN,\n-    Warn,\n+    pedantic,\n     \"presence of `_`, `::` or camel-case outside backticks in documentation\"\n }\n "}, {"sha": "06d0cf1d09e2e53518ec743910d5d0ec3043f04b", "filename": "clippy_lints/src/double_comparison.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fdouble_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fdouble_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdouble_comparison.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -23,9 +23,9 @@ use utils::{snippet, span_lint_and_sugg, SpanlessEq};\n /// ```rust\n /// x <= y\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub DOUBLE_COMPARISONS,\n-    Deny,\n+    complexity,\n     \"unnecessary double comparisons that can be simplified\"\n }\n "}, {"sha": "2b81e1db257525f508e3059b426a9bfa31631a7d", "filename": "clippy_lints/src/double_parens.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fdouble_parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fdouble_parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdouble_parens.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -14,8 +14,9 @@ use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintContext, LintPass}\n /// foo((0))\n /// ((1, 2))\n /// ```\n-declare_lint! {\n-    pub DOUBLE_PARENS, Warn,\n+declare_clippy_lint! {\n+    pub DOUBLE_PARENS,\n+    complexity,\n     \"Warn on unnecessary double parentheses\"\n }\n "}, {"sha": "7acc7805f82a4071129e21d2702eda8b79d1f67e", "filename": "clippy_lints/src/drop_forget_ref.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -20,9 +20,9 @@ use utils::{is_copy, match_def_path, opt_def_id, paths, span_note_and_lint};\n /// still locked\n /// operation_that_requires_mutex_to_be_unlocked();\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub DROP_REF,\n-    Warn,\n+    correctness,\n     \"calls to `std::mem::drop` with a reference instead of an owned value\"\n }\n \n@@ -41,9 +41,9 @@ declare_lint! {\n /// let x = Box::new(1);\n /// std::mem::forget(&x) // Should have been forget(x), x will still be dropped\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub FORGET_REF,\n-    Warn,\n+    correctness,\n     \"calls to `std::mem::forget` with a reference instead of an owned value\"\n }\n \n@@ -62,9 +62,9 @@ declare_lint! {\n /// std::mem::drop(x) // A copy of x is passed to the function, leaving the\n /// original unaffected\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub DROP_COPY,\n-    Warn,\n+    correctness,\n     \"calls to `std::mem::drop` with a value that implements Copy\"\n }\n \n@@ -89,9 +89,9 @@ declare_lint! {\n /// std::mem::forget(x) // A copy of x is passed to the function, leaving the\n /// original unaffected\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub FORGET_COPY,\n-    Warn,\n+    correctness,\n     \"calls to `std::mem::forget` with a value that implements Copy\"\n }\n "}, {"sha": "bceed1c21686001bddac3ccf81b5235556b59626", "filename": "clippy_lints/src/else_if_without_else.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Felse_if_without_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Felse_if_without_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Felse_if_without_else.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -32,8 +32,9 @@ use utils::{in_external_macro, span_lint_and_sugg};\n ///     // we don't care about zero\n /// }\n /// ```\n-declare_restriction_lint! {\n+declare_clippy_lint! {\n     pub ELSE_IF_WITHOUT_ELSE,\n+    restriction,\n     \"if expression with an `else if`, but without a final `else` branch\"\n }\n "}, {"sha": "1641c4d444b12c0e84440bd512e53a07e7717621", "filename": "clippy_lints/src/empty_enum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fempty_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fempty_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fempty_enum.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -16,9 +16,9 @@ use utils::span_lint_and_then;\n /// ```rust\n /// enum Test {}\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub EMPTY_ENUM,\n-    Allow,\n+    pedantic,\n     \"enum with no variants\"\n }\n "}, {"sha": "d67b3a010cfc76a217a59e63df89ec191592b866", "filename": "clippy_lints/src/entry.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fentry.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -24,9 +24,9 @@ use utils::{get_item_name, match_type, paths, snippet, span_lint_and_then, walk_\n /// ```rust\n /// m.entry(k).or_insert(v);\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub MAP_ENTRY,\n-    Warn,\n+    perf,\n     \"use of `contains_key` followed by `insert` on a `HashMap` or `BTreeMap`\"\n }\n "}, {"sha": "da3586af26236ab5c14e7106de7240dc83e2b8d0", "filename": "clippy_lints/src/enum_clike.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fenum_clike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fenum_clike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_clike.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -27,9 +27,9 @@ use rustc::mir::interpret::GlobalId;\n ///     Y = 0\n /// }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub ENUM_CLIKE_UNPORTABLE_VARIANT,\n-    Warn,\n+    correctness,\n     \"C-like enums that are `repr(isize/usize)` and have values that don't fit into an `i32`\"\n }\n "}, {"sha": "0718a6b3679b6bc5004bb081166b4df1d64b4d1d", "filename": "clippy_lints/src/enum_glob_use.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fenum_glob_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fenum_glob_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_glob_use.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -19,9 +19,9 @@ use utils::span_lint;\n /// ```rust\n /// use std::cmp::Ordering::*;\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub ENUM_GLOB_USE,\n-    Allow,\n+    pedantic,\n     \"use items that import all variants of an enum\"\n }\n "}, {"sha": "c2e246a71fa5d6de0e1578ddfd42bee479157ad2", "filename": "clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_variants.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -22,9 +22,9 @@ use utils::{camel_case_from, camel_case_until, in_macro};\n ///     HummingbirdCake,\n /// }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub ENUM_VARIANT_NAMES,\n-    Warn,\n+    style,\n     \"enums where all variants share a prefix/postfix\"\n }\n \n@@ -43,9 +43,9 @@ declare_lint! {\n ///     HummingbirdCake,\n /// }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub PUB_ENUM_VARIANT_NAMES,\n-    Allow,\n+    pedantic,\n     \"enums where all variants share a prefix/postfix\"\n }\n \n@@ -62,9 +62,9 @@ declare_lint! {\n ///     struct BlackForestCake;\n /// }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub STUTTER,\n-    Allow,\n+    pedantic,\n     \"type names prefixed/postfixed with their containing module's name\"\n }\n \n@@ -92,9 +92,9 @@ declare_lint! {\n ///     ...\n /// }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub MODULE_INCEPTION,\n-    Warn,\n+    style,\n     \"modules that have the same name as their parent module\"\n }\n "}, {"sha": "cce20a58da86b3b4fbe461c738c90a2c0edd0527", "filename": "clippy_lints/src/eq_op.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feq_op.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -17,9 +17,9 @@ use utils::{in_macro, implements_trait, is_copy, multispan_sugg, snippet, span_l\n /// ```rust\n /// x + 1 == x + 1\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub EQ_OP,\n-    Warn,\n+    correctness,\n     \"equal operands on both sides of a comparison or bitwise combination (e.g. `x == x`)\"\n }\n \n@@ -35,9 +35,9 @@ declare_lint! {\n /// ```rust\n /// &x == y\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub OP_REF,\n-    Warn,\n+    style,\n     \"taking a reference to satisfy the type constraints on `==`\"\n }\n "}, {"sha": "9cd4f3ada3bb21ca3e74ed8966f2394713db1947", "filename": "clippy_lints/src/erasing_op.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Ferasing_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Ferasing_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ferasing_op.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -16,9 +16,9 @@ use utils::{in_macro, span_lint};\n /// ```rust\n /// 0 / x; 0 * x; x & 0\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub ERASING_OP,\n-    Warn,\n+    correctness,\n     \"using erasing operations, e.g. `x * 0` or `y & 0`\"\n }\n "}, {"sha": "8c3127085fa469f34f7375aae6dd2634dc694362", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -32,9 +32,9 @@ pub struct Pass {\n ///     println!(\"{}\", *x);\n /// }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub BOXED_LOCAL,\n-    Warn,\n+    perf,\n     \"using `Box<T>` where unnecessary\"\n }\n "}, {"sha": "cb1122486f346e5c2c41c0f64d828081de45bbd5", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -22,9 +22,9 @@ pub struct EtaPass;\n /// ```\n /// where `foo(_)` is a plain function that takes the exact argument type of\n /// `x`.\n-declare_lint! {\n+declare_clippy_lint! {\n     pub REDUNDANT_CLOSURE,\n-    Warn,\n+    style,\n     \"redundant closures, i.e. `|a| foo(a)` (which can be written as just `foo`)\"\n }\n "}, {"sha": "d034104a609e86413cd848e747b1577f4647e5f2", "filename": "clippy_lints/src/eval_order_dependence.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feval_order_dependence.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -21,9 +21,9 @@ use utils::{get_parent_expr, span_lint, span_note_and_lint};\n /// let a = {x = 1; 1} + x;\n /// // Unclear whether a is 1 or 2.\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub EVAL_ORDER_DEPENDENCE,\n-    Warn,\n+    complexity,\n     \"whether a variable read occurs before a write depends on sub-expression evaluation order\"\n }\n \n@@ -43,9 +43,9 @@ declare_lint! {\n /// let x = (a, b, c, panic!());\n /// // can simply be replaced by `panic!()`\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub DIVERGING_SUB_EXPRESSION,\n-    Warn,\n+    complexity,\n     \"whether an expression contains a diverging sub expression\"\n }\n "}, {"sha": "bad5bbd84224ee71fbf2d314e4460ffcdb693e63", "filename": "clippy_lints/src/explicit_write.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fexplicit_write.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fexplicit_write.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexplicit_write.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -15,9 +15,9 @@ use utils::opt_def_id;\n /// // this would be clearer as `eprintln!(\"foo: {:?}\", bar);`\n /// writeln!(&mut io::stderr(), \"foo: {:?}\", bar).unwrap();\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub EXPLICIT_WRITE,\n-    Warn,\n+    complexity,\n     \"using the `write!()` family of functions instead of the `print!()` family \\\n      of functions, when using the latter would work\"\n }"}, {"sha": "dd37a6725d2b49bf709bd691e166f85e49da897b", "filename": "clippy_lints/src/fallible_impl_from.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffallible_impl_from.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -20,8 +20,9 @@ use utils::paths::{BEGIN_PANIC, BEGIN_PANIC_FMT, FROM_TRAIT, OPTION, RESULT};\n ///     }\n /// }\n /// ```\n-declare_lint! {\n-    pub FALLIBLE_IMPL_FROM, Allow,\n+declare_clippy_lint! {\n+    pub FALLIBLE_IMPL_FROM,\n+    nursery,\n     \"Warn on impls of `From<..>` that contain `panic!()` or `unwrap()`\"\n }\n "}, {"sha": "7136eff3274de609673ee6d2423ef03cef870d8c", "filename": "clippy_lints/src/format.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -21,9 +21,9 @@ use utils::{is_expn_of, match_def_path, match_type, opt_def_id, resolve_node, sn\n /// format!(\"foo\")\n /// format!(\"{}\", foo)\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub USELESS_FORMAT,\n-    Warn,\n+    complexity,\n     \"useless use of `format!`\"\n }\n "}, {"sha": "1ab13a825da0cf5e60e6a8fc8daa498daa330d20", "filename": "clippy_lints/src/formatting.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformatting.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -15,9 +15,9 @@ use syntax::ptr::P;\n /// ```rust,ignore\n /// a =- 42; // confusing, should it be `a -= 42` or `a = -42`?\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub SUSPICIOUS_ASSIGNMENT_FORMATTING,\n-    Warn,\n+    style,\n     \"suspicious formatting of `*=`, `-=` or `!=`\"\n }\n \n@@ -41,9 +41,9 @@ declare_lint! {\n /// if bar { // this is the `else` block of the previous `if`, but should it be?\n /// }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub SUSPICIOUS_ELSE_FORMATTING,\n-    Warn,\n+    style,\n     \"suspicious formatting of `else if`\"\n }\n \n@@ -61,9 +61,9 @@ declare_lint! {\n ///     -4, -5, -6\n /// ];\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub POSSIBLE_MISSING_COMMA,\n-    Warn,\n+    correctness,\n     \"possible missing comma in array\"\n }\n "}, {"sha": "cb359daba441477a9d0236474df0ab0f23725ebb", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -22,9 +22,9 @@ use utils::{iter_input_pats, span_lint, type_is_unsafe_function};\n /// fn foo(x: u32, y: u32, name: &str, c: Color, w: f32, h: f32, a: f32, b:\n /// f32) { .. }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub TOO_MANY_ARGUMENTS,\n-    Warn,\n+    complexity,\n     \"functions with too many arguments\"\n }\n \n@@ -48,9 +48,9 @@ declare_lint! {\n /// ```rust\n /// pub fn foo(x: *const u8) { println!(\"{}\", unsafe { *x }); }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub NOT_UNSAFE_PTR_ARG_DEREF,\n-    Warn,\n+    correctness,\n     \"public functions dereferencing raw pointer arguments but not marked `unsafe`\"\n }\n "}, {"sha": "8132ce73944a31b2f5918bb37fbf9410d18e8e13", "filename": "clippy_lints/src/identity_conversion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fidentity_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fidentity_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fidentity_conversion.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -15,9 +15,9 @@ use utils::{opt_def_id, paths, resolve_node};\n /// // format!() returns a `String`\n /// let s: String = format!(\"hello\").into();\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub IDENTITY_CONVERSION,\n-    Warn,\n+    complexity,\n     \"using always-identical `Into`/`From` conversions\"\n }\n "}, {"sha": "c6b4f9f1af36aa194012758cb46ad4831a149088", "filename": "clippy_lints/src/identity_op.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fidentity_op.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -16,9 +16,9 @@ use rustc::ty;\n /// ```rust\n /// x / 1 + 0 * 1 - 0 | 0\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub IDENTITY_OP,\n-    Warn,\n+    complexity,\n     \"using identity operations, e.g. `x + 0` or `y / 1`\"\n }\n "}, {"sha": "2465c5351bd00f5de51bbd86687c296afbb0060e", "filename": "clippy_lints/src/if_let_redundant_pattern_matching.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fif_let_redundant_pattern_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fif_let_redundant_pattern_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_let_redundant_pattern_matching.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -28,9 +28,9 @@ use utils::{match_qpath, paths, snippet, span_lint_and_then};\n /// if Some(42).is_some() {}\n /// ```\n ///\n-declare_lint! {\n+declare_clippy_lint! {\n     pub IF_LET_REDUNDANT_PATTERN_MATCHING,\n-    Warn,\n+    style,\n     \"use the proper utility function avoiding an `if let`\"\n }\n "}, {"sha": "ea264bf5186c85266b3dccdf415fd35fa01f9b5a", "filename": "clippy_lints/src/if_not_else.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fif_not_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fif_not_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_not_else.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -31,9 +31,9 @@ use utils::{in_external_macro, span_help_and_lint};\n ///     a()\n /// }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub IF_NOT_ELSE,\n-    Allow,\n+    pedantic,\n     \"`if` branches that could be swapped so no negation operation is necessary on the condition\"\n }\n "}, {"sha": "238970d4a9f2e38715e25aceaddd6eb4644ed83a", "filename": "clippy_lints/src/infinite_iter.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Finfinite_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Finfinite_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finfinite_iter.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -13,9 +13,9 @@ use utils::{get_trait_def_id, higher, implements_trait, match_qpath, paths, span\n /// ```rust\n /// repeat(1_u8).iter().collect::<Vec<_>>()\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub INFINITE_ITER,\n-    Warn,\n+    correctness,\n     \"infinite iteration\"\n }\n \n@@ -31,9 +31,9 @@ declare_lint! {\n /// ```rust\n /// [0..].iter().zip(infinite_iter.take_while(|x| x > 5))\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub MAYBE_INFINITE_ITER,\n-    Allow,\n+    pedantic,\n     \"possible infinite iteration\"\n }\n "}, {"sha": "af7de542a91d80d3e25abfe86fa57062c4df7511", "filename": "clippy_lints/src/inline_fn_without_body.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Finline_fn_without_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Finline_fn_without_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finline_fn_without_body.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -20,9 +20,9 @@ use utils::sugg::DiagnosticBuilderExt;\n ///     fn name(&self) -> &'static str;\n /// }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub INLINE_FN_WITHOUT_BODY,\n-    Warn,\n+    correctness,\n     \"use of `#[inline]` on trait methods without bodies\"\n }\n "}, {"sha": "42fb8440ac8927a2fd804fb93317c90e0c0e2069", "filename": "clippy_lints/src/int_plus_one.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fint_plus_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fint_plus_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fint_plus_one.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -22,9 +22,9 @@ use utils::{snippet_opt, span_lint_and_then};\n /// ```rust\n /// x > y\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub INT_PLUS_ONE,\n-    Allow,\n+    complexity,\n     \"instead of using x >= y + 1, use x > y\"\n }\n "}, {"sha": "037f07be1d76ce53b7f04f5fae97b96969fcb864", "filename": "clippy_lints/src/invalid_ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Finvalid_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Finvalid_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finvalid_ref.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -13,9 +13,9 @@ use utils::{match_def_path, opt_def_id, paths, span_help_and_lint};\n /// ```rust\n /// let bad_ref: &usize = std::mem::zeroed();\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub INVALID_REF,\n-    Warn,\n+    correctness,\n     \"creation of invalid reference\"\n }\n "}, {"sha": "f39f60f079ca6f10a9f6cdc6460e3fef4dcc8e4e", "filename": "clippy_lints/src/items_after_statements.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fitems_after_statements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fitems_after_statements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fitems_after_statements.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -26,9 +26,9 @@ use utils::{in_macro, span_lint};\n ///     foo(); // prints \"foo\"\n /// }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub ITEMS_AFTER_STATEMENTS,\n-    Allow,\n+    pedantic,\n     \"blocks where an item comes after a statement\"\n }\n "}, {"sha": "fd3d9714b86186668094c3462c8ccf407f065611", "filename": "clippy_lints/src/large_enum_variant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_enum_variant.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -21,9 +21,9 @@ use rustc::ty::layout::LayoutOf;\n ///    B([i32; 8000]),\n /// }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub LARGE_ENUM_VARIANT,\n-    Warn,\n+    perf,\n     \"large size difference between variants on an enum\"\n }\n "}, {"sha": "df3239ee1c79bd56547fde4fef8f863272f2d2af", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -22,9 +22,9 @@ use utils::{get_item_name, in_macro, snippet, span_lint, span_lint_and_sugg, wal\n /// ```rust\n /// if x.len() == 0 { .. }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub LEN_ZERO,\n-    Warn,\n+    style,\n     \"checking `.len() == 0` or `.len() > 0` (or similar) when `.is_empty()` \\\n      could be used instead\"\n }\n@@ -46,9 +46,9 @@ declare_lint! {\n ///     pub fn len(&self) -> usize { .. }\n /// }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub LEN_WITHOUT_IS_EMPTY,\n-    Warn,\n+    style,\n     \"traits or impls with a public `len` method but no corresponding `is_empty` method\"\n }\n "}, {"sha": "15230ddf7e4e39b8d37e5e06f2ed52652ea1106b", "filename": "clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_if_seq.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -44,9 +44,9 @@ use utils::{snippet, span_lint_and_then};\n ///     None\n /// };\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub USELESS_LET_IF_SEQ,\n-    Warn,\n+    style,\n     \"unidiomatic `let mut` declaration followed by initialization in `if`\"\n }\n "}, {"sha": "187b1fcee82e5cd714ad1f77219fc9e3867301dc", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 258, "deletions": 25, "changes": 283, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -60,10 +60,34 @@ extern crate url;\n #[macro_use]\n extern crate if_chain;\n \n-macro_rules! declare_restriction_lint {\n-    { pub $name:tt, $description:tt } => {\n+macro_rules! declare_clippy_lint {\n+    { pub $name:tt, style, $description:tt } => {\n+        declare_lint! { pub $name, Warn, $description }\n+    };\n+    { pub $name:tt, correctness, $description:tt } => {\n+        declare_lint! { pub $name, Deny, $description }\n+    };\n+    { pub $name:tt, complexity, $description:tt } => {\n+        declare_lint! { pub $name, Warn, $description }\n+    };\n+    { pub $name:tt, perf, $description:tt } => {\n+        declare_lint! { pub $name, Warn, $description }\n+    };\n+    { pub $name:tt, pedantic, $description:tt } => {\n         declare_lint! { pub $name, Allow, $description }\n     };\n+    { pub $name:tt, restriction, $description:tt } => {\n+        declare_lint! { pub $name, Allow, $description }\n+    };\n+    { pub $name:tt, nursery, $description:tt } => {\n+        declare_lint! { pub $name, Allow, $description }\n+    };\n+    { pub $name:tt, internal, $description:tt } => {\n+        declare_lint! { pub $name, Allow, $description }\n+    };\n+    { pub $name:tt, internal_warn, $description:tt } => {\n+        declare_lint! { pub $name, Warn, $description }\n+    };\n }\n \n pub mod consts;\n@@ -380,57 +404,58 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_late_lint_pass(box redundant_field_names::RedundantFieldNames);\n \n \n-    reg.register_lint_group(\"clippy_restrictions\", vec![\n+    reg.register_lint_group(\"clippy_restriction\", vec![\n         arithmetic::FLOAT_ARITHMETIC,\n         arithmetic::INTEGER_ARITHMETIC,\n         array_indexing::INDEXING_SLICING,\n         assign_ops::ASSIGN_OPS,\n         else_if_without_else::ELSE_IF_WITHOUT_ELSE,\n         literal_representation::DECIMAL_LITERAL_REPRESENTATION,\n+        mem_forget::MEM_FORGET,\n         methods::CLONE_ON_REF_PTR,\n+        methods::OPTION_UNWRAP_USED,\n+        methods::RESULT_UNWRAP_USED,\n+        methods::WRONG_PUB_SELF_CONVENTION,\n         misc::FLOAT_CMP_CONST,\n+        missing_doc::MISSING_DOCS_IN_PRIVATE_ITEMS,\n+        print::PRINT_STDOUT,\n+        print::USE_DEBUG,\n+        shadow::SHADOW_REUSE,\n+        shadow::SHADOW_SAME,\n+        shadow::SHADOW_UNRELATED,\n+        strings::STRING_ADD,\n     ]);\n \n     reg.register_lint_group(\"clippy_pedantic\", vec![\n-        booleans::NONMINIMAL_BOOL,\n+        attrs::INLINE_ALWAYS,\n+        copies::MATCH_SAME_ARMS,\n+        derive::EXPL_IMPL_CLONE_ON_COPY,\n+        doc::DOC_MARKDOWN,\n         empty_enum::EMPTY_ENUM,\n         enum_glob_use::ENUM_GLOB_USE,\n         enum_variants::PUB_ENUM_VARIANT_NAMES,\n         enum_variants::STUTTER,\n-        fallible_impl_from::FALLIBLE_IMPL_FROM,\n         if_not_else::IF_NOT_ELSE,\n         infinite_iter::MAYBE_INFINITE_ITER,\n-        int_plus_one::INT_PLUS_ONE,\n         items_after_statements::ITEMS_AFTER_STATEMENTS,\n         matches::SINGLE_MATCH_ELSE,\n-        mem_forget::MEM_FORGET,\n         methods::FILTER_MAP,\n         methods::OPTION_MAP_UNWRAP_OR,\n         methods::OPTION_MAP_UNWRAP_OR_ELSE,\n-        methods::OPTION_UNWRAP_USED,\n         methods::RESULT_MAP_UNWRAP_OR_ELSE,\n-        methods::RESULT_UNWRAP_USED,\n-        methods::WRONG_PUB_SELF_CONVENTION,\n         misc::USED_UNDERSCORE_BINDING,\n         misc_early::UNSEPARATED_LITERAL_SUFFIX,\n-        missing_doc::MISSING_DOCS_IN_PRIVATE_ITEMS,\n         mut_mut::MUT_MUT,\n-        mutex_atomic::MUTEX_INTEGER,\n+        needless_continue::NEEDLESS_CONTINUE,\n         non_expressive_names::SIMILAR_NAMES,\n-        print::PRINT_STDOUT,\n-        print::USE_DEBUG,\n-        ranges::RANGE_PLUS_ONE,\n         replace_consts::REPLACE_CONSTS,\n-        shadow::SHADOW_REUSE,\n-        shadow::SHADOW_SAME,\n-        shadow::SHADOW_UNRELATED,\n-        strings::STRING_ADD,\n         strings::STRING_ADD_ASSIGN,\n         types::CAST_POSSIBLE_TRUNCATION,\n         types::CAST_POSSIBLE_WRAP,\n         types::CAST_PRECISION_LOSS,\n         types::CAST_SIGN_LOSS,\n         types::INVALID_UPCAST_COMPARISONS,\n+        types::LINKEDLIST,\n         unicode::NON_ASCII_LITERAL,\n         unicode::UNICODE_NOT_NFC,\n         use_self::USE_SELF,\n@@ -448,7 +473,6 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         assign_ops::MISREFACTORED_ASSIGN_OP,\n         attrs::DEPRECATED_SEMVER,\n         attrs::EMPTY_LINE_AFTER_OUTER_ATTR,\n-        attrs::INLINE_ALWAYS,\n         attrs::USELESS_ATTRIBUTE,\n         bit_mask::BAD_BIT_MASK,\n         bit_mask::INEFFECTIVE_BIT_MASK,\n@@ -457,16 +481,14 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         block_in_if_condition::BLOCK_IN_IF_CONDITION_EXPR,\n         block_in_if_condition::BLOCK_IN_IF_CONDITION_STMT,\n         booleans::LOGIC_BUG,\n+        booleans::NONMINIMAL_BOOL,\n         bytecount::NAIVE_BYTECOUNT,\n         collapsible_if::COLLAPSIBLE_IF,\n         const_static_lifetime::CONST_STATIC_LIFETIME,\n         copies::IF_SAME_THEN_ELSE,\n         copies::IFS_SAME_COND,\n-        copies::MATCH_SAME_ARMS,\n         cyclomatic_complexity::CYCLOMATIC_COMPLEXITY,\n         derive::DERIVE_HASH_XOR_EQ,\n-        derive::EXPL_IMPL_CLONE_ON_COPY,\n-        doc::DOC_MARKDOWN,\n         double_comparison::DOUBLE_COMPARISONS,\n         double_parens::DOUBLE_PARENS,\n         drop_forget_ref::DROP_COPY,\n@@ -496,6 +518,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         if_let_redundant_pattern_matching::IF_LET_REDUNDANT_PATTERN_MATCHING,\n         infinite_iter::INFINITE_ITER,\n         inline_fn_without_body::INLINE_FN_WITHOUT_BODY,\n+        int_plus_one::INT_PLUS_ONE,\n         invalid_ref::INVALID_REF,\n         large_enum_variant::LARGE_ENUM_VARIANT,\n         len_zero::LEN_WITHOUT_IS_EMPTY,\n@@ -573,7 +596,6 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         needless_bool::NEEDLESS_BOOL,\n         needless_borrow::NEEDLESS_BORROW,\n         needless_borrowed_ref::NEEDLESS_BORROWED_REFERENCE,\n-        needless_continue::NEEDLESS_CONTINUE,\n         needless_pass_by_value::NEEDLESS_PASS_BY_VALUE,\n         needless_update::NEEDLESS_UPDATE,\n         neg_multiply::NEG_MULTIPLY,\n@@ -628,7 +650,6 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         types::CHAR_LIT_AS_U8,\n         types::IMPLICIT_HASHER,\n         types::LET_UNIT_VALUE,\n-        types::LINKEDLIST,\n         types::OPTION_OPTION,\n         types::TYPE_COMPLEXITY,\n         types::UNIT_ARG,\n@@ -641,6 +662,218 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         vec::USELESS_VEC,\n         zero_div_zero::ZERO_DIVIDED_BY_ZERO,\n     ]);\n+\n+    reg.register_lint_group(\"clippy_style\", vec![\n+        assign_ops::ASSIGN_OP_PATTERN,\n+        attrs::EMPTY_LINE_AFTER_OUTER_ATTR,\n+        bit_mask::VERBOSE_BIT_MASK,\n+        blacklisted_name::BLACKLISTED_NAME,\n+        block_in_if_condition::BLOCK_IN_IF_CONDITION_EXPR,\n+        block_in_if_condition::BLOCK_IN_IF_CONDITION_STMT,\n+        collapsible_if::COLLAPSIBLE_IF,\n+        const_static_lifetime::CONST_STATIC_LIFETIME,\n+        enum_variants::ENUM_VARIANT_NAMES,\n+        enum_variants::MODULE_INCEPTION,\n+        eq_op::OP_REF,\n+        eta_reduction::REDUNDANT_CLOSURE,\n+        formatting::SUSPICIOUS_ASSIGNMENT_FORMATTING,\n+        formatting::SUSPICIOUS_ELSE_FORMATTING,\n+        if_let_redundant_pattern_matching::IF_LET_REDUNDANT_PATTERN_MATCHING,\n+        len_zero::LEN_WITHOUT_IS_EMPTY,\n+        len_zero::LEN_ZERO,\n+        let_if_seq::USELESS_LET_IF_SEQ,\n+        literal_representation::INCONSISTENT_DIGIT_GROUPING,\n+        literal_representation::LARGE_DIGIT_GROUPS,\n+        literal_representation::UNREADABLE_LITERAL,\n+        loops::EMPTY_LOOP,\n+        loops::EXPLICIT_INTO_ITER_LOOP,\n+        loops::EXPLICIT_ITER_LOOP,\n+        loops::FOR_KV_MAP,\n+        loops::NEEDLESS_RANGE_LOOP,\n+        loops::WHILE_LET_ON_ITERATOR,\n+        map_clone::MAP_CLONE,\n+        matches::MATCH_BOOL,\n+        matches::MATCH_OVERLAPPING_ARM,\n+        matches::MATCH_REF_PATS,\n+        matches::MATCH_WILD_ERR_ARM,\n+        matches::SINGLE_MATCH,\n+        methods::CHARS_LAST_CMP,\n+        methods::GET_UNWRAP,\n+        methods::ITER_CLONED_COLLECT,\n+        methods::ITER_SKIP_NEXT,\n+        methods::NEW_RET_NO_SELF,\n+        methods::OK_EXPECT,\n+        methods::OPTION_MAP_OR_NONE,\n+        methods::SHOULD_IMPLEMENT_TRAIT,\n+        methods::STRING_EXTEND_CHARS,\n+        methods::UNNECESSARY_FOLD,\n+        methods::WRONG_SELF_CONVENTION,\n+        misc::REDUNDANT_PATTERN,\n+        misc::TOPLEVEL_REF_ARG,\n+        misc::ZERO_PTR,\n+        misc_early::BUILTIN_TYPE_SHADOW,\n+        misc_early::DOUBLE_NEG,\n+        misc_early::DUPLICATE_UNDERSCORE_ARGUMENT,\n+        misc_early::MIXED_CASE_HEX_LITERALS,\n+        misc_early::UNNEEDED_FIELD_PATTERN,\n+        mut_reference::UNNECESSARY_MUT_PASSED,\n+        needless_pass_by_value::NEEDLESS_PASS_BY_VALUE,\n+        neg_multiply::NEG_MULTIPLY,\n+        new_without_default::NEW_WITHOUT_DEFAULT,\n+        new_without_default::NEW_WITHOUT_DEFAULT_DERIVE,\n+        non_expressive_names::JUST_UNDERSCORES_AND_DIGITS,\n+        non_expressive_names::MANY_SINGLE_CHAR_NAMES,\n+        ok_if_let::IF_LET_SOME_RESULT,\n+        panic::PANIC_PARAMS,\n+        print::PRINT_WITH_NEWLINE,\n+        print::PRINTLN_EMPTY_STRING,\n+        ptr::CMP_NULL,\n+        ptr::PTR_ARG,\n+        question_mark::QUESTION_MARK,\n+        ranges::RANGE_MINUS_ONE,\n+        redundant_field_names::REDUNDANT_FIELD_NAMES,\n+        regex::REGEX_MACRO,\n+        regex::TRIVIAL_REGEX,\n+        returns::LET_AND_RETURN,\n+        returns::NEEDLESS_RETURN,\n+        strings::STRING_LIT_AS_BYTES,\n+        types::IMPLICIT_HASHER,\n+        types::LET_UNIT_VALUE,\n+        unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME,\n+    ]);\n+\n+    reg.register_lint_group(\"clippy_complexity\", vec![\n+        assign_ops::MISREFACTORED_ASSIGN_OP,\n+        booleans::NONMINIMAL_BOOL,\n+        cyclomatic_complexity::CYCLOMATIC_COMPLEXITY,\n+        double_comparison::DOUBLE_COMPARISONS,\n+        double_parens::DOUBLE_PARENS,\n+        eval_order_dependence::DIVERGING_SUB_EXPRESSION,\n+        eval_order_dependence::EVAL_ORDER_DEPENDENCE,\n+        explicit_write::EXPLICIT_WRITE,\n+        format::USELESS_FORMAT,\n+        functions::TOO_MANY_ARGUMENTS,\n+        identity_conversion::IDENTITY_CONVERSION,\n+        identity_op::IDENTITY_OP,\n+        int_plus_one::INT_PLUS_ONE,\n+        lifetimes::NEEDLESS_LIFETIMES,\n+        lifetimes::UNUSED_LIFETIMES,\n+        loops::EXPLICIT_COUNTER_LOOP,\n+        loops::MUT_RANGE_BOUND,\n+        loops::WHILE_LET_LOOP,\n+        matches::MATCH_AS_REF,\n+        methods::CHARS_NEXT_CMP,\n+        methods::CLONE_ON_COPY,\n+        methods::FILTER_NEXT,\n+        methods::SEARCH_IS_SOME,\n+        methods::USELESS_ASREF,\n+        misc::SHORT_CIRCUIT_STATEMENT,\n+        misc_early::REDUNDANT_CLOSURE_CALL,\n+        misc_early::ZERO_PREFIXED_LITERAL,\n+        needless_bool::BOOL_COMPARISON,\n+        needless_bool::NEEDLESS_BOOL,\n+        needless_borrow::NEEDLESS_BORROW,\n+        needless_borrowed_ref::NEEDLESS_BORROWED_REFERENCE,\n+        needless_update::NEEDLESS_UPDATE,\n+        no_effect::NO_EFFECT,\n+        no_effect::UNNECESSARY_OPERATION,\n+        overflow_check_conditional::OVERFLOW_CHECK_CONDITIONAL,\n+        partialeq_ne_impl::PARTIALEQ_NE_IMPL,\n+        precedence::PRECEDENCE,\n+        ranges::RANGE_ZIP_WITH_LEN,\n+        reference::DEREF_ADDROF,\n+        swap::MANUAL_SWAP,\n+        temporary_assignment::TEMPORARY_ASSIGNMENT,\n+        transmute::CROSSPOINTER_TRANSMUTE,\n+        transmute::MISALIGNED_TRANSMUTE,\n+        transmute::TRANSMUTE_BYTES_TO_STR,\n+        transmute::TRANSMUTE_INT_TO_BOOL,\n+        transmute::TRANSMUTE_INT_TO_CHAR,\n+        transmute::TRANSMUTE_INT_TO_FLOAT,\n+        transmute::TRANSMUTE_PTR_TO_REF,\n+        transmute::USELESS_TRANSMUTE,\n+        types::BORROWED_BOX,\n+        types::CAST_LOSSLESS,\n+        types::CHAR_LIT_AS_U8,\n+        types::OPTION_OPTION,\n+        types::TYPE_COMPLEXITY,\n+        types::UNIT_ARG,\n+        types::UNNECESSARY_CAST,\n+        unused_label::UNUSED_LABEL,\n+        zero_div_zero::ZERO_DIVIDED_BY_ZERO,\n+    ]);\n+\n+    reg.register_lint_group(\"clippy_correctness\", vec![\n+        approx_const::APPROX_CONSTANT,\n+        array_indexing::OUT_OF_BOUNDS_INDEXING,\n+        attrs::DEPRECATED_SEMVER,\n+        attrs::USELESS_ATTRIBUTE,\n+        bit_mask::BAD_BIT_MASK,\n+        bit_mask::INEFFECTIVE_BIT_MASK,\n+        booleans::LOGIC_BUG,\n+        copies::IF_SAME_THEN_ELSE,\n+        copies::IFS_SAME_COND,\n+        derive::DERIVE_HASH_XOR_EQ,\n+        drop_forget_ref::DROP_COPY,\n+        drop_forget_ref::DROP_REF,\n+        drop_forget_ref::FORGET_COPY,\n+        drop_forget_ref::FORGET_REF,\n+        enum_clike::ENUM_CLIKE_UNPORTABLE_VARIANT,\n+        eq_op::EQ_OP,\n+        erasing_op::ERASING_OP,\n+        formatting::POSSIBLE_MISSING_COMMA,\n+        functions::NOT_UNSAFE_PTR_ARG_DEREF,\n+        infinite_iter::INFINITE_ITER,\n+        inline_fn_without_body::INLINE_FN_WITHOUT_BODY,\n+        invalid_ref::INVALID_REF,\n+        loops::FOR_LOOP_OVER_OPTION,\n+        loops::FOR_LOOP_OVER_RESULT,\n+        loops::ITER_NEXT_LOOP,\n+        loops::NEVER_LOOP,\n+        loops::REVERSE_RANGE_LOOP,\n+        loops::WHILE_IMMUTABLE_CONDITION,\n+        methods::CLONE_DOUBLE_REF,\n+        methods::TEMPORARY_CSTRING_AS_PTR,\n+        minmax::MIN_MAX,\n+        misc::CMP_NAN,\n+        misc::FLOAT_CMP,\n+        misc::MODULO_ONE,\n+        open_options::NONSENSICAL_OPEN_OPTIONS,\n+        ptr::MUT_FROM_REF,\n+        ranges::ITERATOR_STEP_BY_ZERO,\n+        regex::INVALID_REGEX,\n+        serde_api::SERDE_API_MISUSE,\n+        suspicious_trait_impl::SUSPICIOUS_ARITHMETIC_IMPL,\n+        suspicious_trait_impl::SUSPICIOUS_OP_ASSIGN_IMPL,\n+        swap::ALMOST_SWAPPED,\n+        transmute::WRONG_TRANSMUTE,\n+        types::ABSURD_EXTREME_COMPARISONS,\n+        types::UNIT_CMP,\n+        unicode::ZERO_WIDTH_SPACE,\n+        unused_io_amount::UNUSED_IO_AMOUNT,\n+    ]);\n+\n+    reg.register_lint_group(\"clippy_perf\", vec![\n+        bytecount::NAIVE_BYTECOUNT,\n+        entry::MAP_ENTRY,\n+        escape::BOXED_LOCAL,\n+        large_enum_variant::LARGE_ENUM_VARIANT,\n+        loops::MANUAL_MEMCPY,\n+        loops::UNUSED_COLLECT,\n+        methods::ITER_NTH,\n+        methods::OR_FUN_CALL,\n+        methods::SINGLE_CHAR_PATTERN,\n+        misc::CMP_OWNED,\n+        mutex_atomic::MUTEX_ATOMIC,\n+        types::BOX_VEC,\n+        vec::USELESS_VEC,\n+    ]);\n+\n+    reg.register_lint_group(\"clippy_nursery\", vec![\n+        fallible_impl_from::FALLIBLE_IMPL_FROM,\n+        mutex_atomic::MUTEX_INTEGER,\n+        ranges::RANGE_PLUS_ONE,\n+    ]);\n }\n \n // only exists to let the dogfood integration test works."}, {"sha": "5fe76112e5257473d3708442c5332c171b2789e0", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -22,9 +22,9 @@ use syntax::symbol::keywords;\n /// ```rust\n /// fn in_and_out<'a>(x: &'a u8, y: u8) -> &'a u8 { x }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub NEEDLESS_LIFETIMES,\n-    Warn,\n+    complexity,\n     \"using explicit lifetimes for references in function arguments when elision rules \\\n      would allow omitting them\"\n }\n@@ -42,9 +42,9 @@ declare_lint! {\n /// ```rust\n /// fn unused_lifetime<'a>(x: u8) { .. }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub UNUSED_LIFETIMES,\n-    Warn,\n+    complexity,\n     \"unused lifetimes in function definitions\"\n }\n "}, {"sha": "89396ebd5b3c740d9880f5c690f74cb6a6255c23", "filename": "clippy_lints/src/literal_representation.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fliteral_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fliteral_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_representation.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -18,9 +18,9 @@ use utils::{in_external_macro, snippet_opt, span_lint_and_sugg};\n /// ```rust\n /// 61864918973511\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub UNREADABLE_LITERAL,\n-    Warn,\n+    style,\n     \"long integer literal without underscores\"\n }\n \n@@ -37,9 +37,9 @@ declare_lint! {\n /// ```rust\n /// 618_64_9189_73_511\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub INCONSISTENT_DIGIT_GROUPING,\n-    Warn,\n+    style,\n     \"integer literals with digits grouped inconsistently\"\n }\n \n@@ -56,9 +56,9 @@ declare_lint! {\n /// ```rust\n /// 6186491_8973511\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub LARGE_DIGIT_GROUPS,\n-    Warn,\n+    style,\n     \"grouping digits into groups that are too large\"\n }\n \n@@ -74,8 +74,9 @@ declare_lint! {\n /// `255` => `0xFF`\n /// `65_535` => `0xFFFF`\n /// `4_042_322_160` => `0xF0F0_F0F0`\n-declare_restriction_lint! {\n+declare_clippy_lint! {\n     pub DECIMAL_LITERAL_REPRESENTATION,\n+    restriction,\n     \"using decimal representation when hexadecimal would be better\"\n }\n "}, {"sha": "6f04940ae31cb4805be7a2b2753c1ffe6639647e", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 48, "deletions": 36, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -38,9 +38,9 @@ use utils::paths;\n ///     dst[i + 64] = src[i];\n /// }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub MANUAL_MEMCPY,\n-    Warn,\n+    perf,\n     \"manually copying items between slices\"\n }\n \n@@ -58,9 +58,9 @@ declare_lint! {\n ///     println!(\"{}\", vec[i]);\n /// }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub NEEDLESS_RANGE_LOOP,\n-    Warn,\n+    style,\n     \"for-looping over a range of indices where an iterator over items would do\"\n }\n \n@@ -77,9 +77,9 @@ declare_lint! {\n /// // with `y` a `Vec` or slice:\n /// for x in y.iter() { .. }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub EXPLICIT_ITER_LOOP,\n-    Warn,\n+    style,\n     \"for-looping over `_.iter()` or `_.iter_mut()` when `&_` or `&mut _` would do\"\n }\n \n@@ -95,9 +95,9 @@ declare_lint! {\n /// // with `y` a `Vec` or slice:\n /// for x in y.into_iter() { .. }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub EXPLICIT_INTO_ITER_LOOP,\n-    Warn,\n+    style,\n     \"for-looping over `_.into_iter()` when `_` would do\"\n }\n \n@@ -117,9 +117,9 @@ declare_lint! {\n /// ```rust\n /// for x in y.next() { .. }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub ITER_NEXT_LOOP,\n-    Warn,\n+    correctness,\n     \"for-looping over `_.next()` which is probably not intended\"\n }\n \n@@ -139,9 +139,9 @@ declare_lint! {\n /// ```rust\n /// if let Some(x) = option { .. }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub FOR_LOOP_OVER_OPTION,\n-    Warn,\n+    correctness,\n     \"for-looping over an `Option`, which is more clearly expressed as an `if let`\"\n }\n \n@@ -161,9 +161,9 @@ declare_lint! {\n /// ```rust\n /// if let Ok(x) = result { .. }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub FOR_LOOP_OVER_RESULT,\n-    Warn,\n+    correctness,\n     \"for-looping over a `Result`, which is more clearly expressed as an `if let`\"\n }\n \n@@ -189,9 +189,9 @@ declare_lint! {\n ///     // .. do something with x\n /// }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub WHILE_LET_LOOP,\n-    Warn,\n+    complexity,\n     \"`loop { if let { ... } else break }`, which can be written as a `while let` loop\"\n }\n \n@@ -207,9 +207,9 @@ declare_lint! {\n /// ```rust\n /// vec.iter().map(|x| /* some operation returning () */).collect::<Vec<_>>();\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub UNUSED_COLLECT,\n-    Warn,\n+    perf,\n     \"`collect()`ing an iterator without using the result; this is usually better \\\n      written as a for loop\"\n }\n@@ -230,9 +230,9 @@ declare_lint! {\n /// ```rust\n /// for x in 5..10-5 { .. } // oops, stray `-`\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub REVERSE_RANGE_LOOP,\n-    Warn,\n+    correctness,\n     \"iteration over an empty range, such as `10..0` or `5..5`\"\n }\n \n@@ -250,9 +250,9 @@ declare_lint! {\n /// for i in 0..v.len() { foo(v[i]);\n /// for i in 0..v.len() { bar(i, v[i]); }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub EXPLICIT_COUNTER_LOOP,\n-    Warn,\n+    complexity,\n     \"for-looping with an explicit counter when `_.enumerate()` would do\"\n }\n \n@@ -268,9 +268,9 @@ declare_lint! {\n /// ```rust\n /// loop {}\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub EMPTY_LOOP,\n-    Warn,\n+    style,\n     \"empty `loop {}`, which should block or sleep\"\n }\n \n@@ -285,9 +285,9 @@ declare_lint! {\n /// ```rust\n /// while let Some(val) = iter() { .. }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub WHILE_LET_ON_ITERATOR,\n-    Warn,\n+    style,\n     \"using a while-let loop instead of a for loop on an iterator\"\n }\n \n@@ -309,9 +309,9 @@ declare_lint! {\n /// ```rust\n /// for k in map.keys() { .. }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub FOR_KV_MAP,\n-    Warn,\n+    style,\n     \"looping on a map using `iter` when `keys` or `values` would do\"\n }\n \n@@ -327,17 +327,29 @@ declare_lint! {\n /// ```rust\n /// loop { ..; break; }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub NEVER_LOOP,\n-    Warn,\n+    correctness,\n     \"any loop that will always `break` or `return`\"\n }\n \n-/// TODO: add documentation\n-\n-declare_lint! {\n+/// **What it does:** Checks for loops which have a range bound that is a mutable variable\n+///\n+/// **Why is this bad?** One might think that modifying the mutable variable changes the loop bounds\n+///\n+/// **Known problems:** None\n+///\n+/// **Example:**\n+/// ```rust\n+/// let mut foo = 42;\n+/// for i in 0..foo {\n+///     foo -= 1;\n+///     println!(\"{}\", i); // prints numbers from 0 to 42, not 0 to 21\n+/// }\n+/// ```\n+declare_clippy_lint! {\n     pub MUT_RANGE_BOUND,\n-    Warn,\n+    complexity,\n     \"for loop over a range where one of the bounds is a mutable variable\"\n }\n \n@@ -358,9 +370,9 @@ declare_lint! {\n ///    println!(\"let me loop forever!\");\n /// }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub WHILE_IMMUTABLE_CONDITION,\n-    Warn,\n+    correctness,\n     \"variables used within while expression are not mutated in the body\"\n }\n "}, {"sha": "23d3c8d433d3dad8adf67e76879763316c59396b", "filename": "clippy_lints/src/map_clone.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_clone.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -18,9 +18,9 @@ use utils::{get_arg_name, is_adjusted, iter_input_pats, match_qpath, match_trait\n /// ```rust\n /// x.map(|e| e.clone());\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub MAP_CLONE,\n-    Warn,\n+    style,\n     \"using `.map(|x| x.clone())` to clone an iterator or option's contents\"\n }\n "}, {"sha": "6797199847779cb9da3a1011b45449ed25fd982f", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -25,9 +25,9 @@ use consts::{constant, Constant};\n ///     _ => ()\n /// }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub SINGLE_MATCH,\n-    Warn,\n+    style,\n     \"a match statement with a single nontrivial arm (i.e. where the other arm \\\n      is `_ => {}`) instead of `if let`\"\n }\n@@ -46,9 +46,9 @@ declare_lint! {\n ///     _ => bar(other_ref),\n /// }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub SINGLE_MATCH_ELSE,\n-    Allow,\n+    pedantic,\n     \"a match statement with a two arms where the second arm's pattern is a wildcard \\\n      instead of `if let`\"\n }\n@@ -70,9 +70,9 @@ declare_lint! {\n ///     _ => frob(&x),\n /// }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub MATCH_REF_PATS,\n-    Warn,\n+    style,\n     \"a match or `if let` with all arms prefixed with `&` instead of deref-ing the match expression\"\n }\n \n@@ -91,9 +91,9 @@ declare_lint! {\n ///     false => bar(),\n /// }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub MATCH_BOOL,\n-    Warn,\n+    style,\n     \"a match on a boolean expression instead of an `if..else` block\"\n }\n \n@@ -113,9 +113,9 @@ declare_lint! {\n ///     _ => (),\n /// }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub MATCH_OVERLAPPING_ARM,\n-    Warn,\n+    style,\n     \"a match with overlapping arms\"\n }\n \n@@ -135,9 +135,9 @@ declare_lint! {\n ///     Err(_) => panic!(\"err\"),\n /// }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub MATCH_WILD_ERR_ARM,\n-    Warn,\n+    style,\n     \"a match with `Err(_)` arm and take drastic actions\"\n }\n \n@@ -156,9 +156,9 @@ declare_lint! {\n ///   Some(ref v) => Some(v),\n /// };\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub MATCH_AS_REF,\n-    Warn,\n+    complexity,\n     \"a match on an Option value instead of using `as_ref()` or `as_mut`\"\n }\n "}, {"sha": "603fbef342124140a3b9ded6fd241ef38bb1a2a4", "filename": "clippy_lints/src/mem_forget.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fmem_forget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fmem_forget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_forget.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -14,9 +14,9 @@ use utils::{match_def_path, opt_def_id, paths, span_lint};\n /// ```rust\n /// mem::forget(Rc::new(55)))\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub MEM_FORGET,\n-    Allow,\n+    restriction,\n     \"`mem::forget` usage on `Drop` types, likely to cause memory leaks\"\n }\n "}, {"sha": "50de299ca7d18958be97840782ed2451575c3db4", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 64, "deletions": 63, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -31,9 +31,9 @@ pub struct Pass;\n /// ```rust\n /// x.unwrap()\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub OPTION_UNWRAP_USED,\n-    Allow,\n+    restriction,\n     \"using `Option.unwrap()`, which should at least get a better message using `expect()`\"\n }\n \n@@ -53,9 +53,9 @@ declare_lint! {\n /// ```rust\n /// x.unwrap()\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub RESULT_UNWRAP_USED,\n-    Allow,\n+    restriction,\n     \"using `Result.unwrap()`, which might be better handled\"\n }\n \n@@ -79,9 +79,9 @@ declare_lint! {\n ///    fn add(&self, other: &X) -> X { .. }\n /// }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub SHOULD_IMPLEMENT_TRAIT,\n-    Warn,\n+    style,\n     \"defining a method that should be implementing a std trait\"\n }\n \n@@ -108,9 +108,9 @@ declare_lint! {\n ///     fn as_str(self) -> &str { .. }\n /// }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub WRONG_SELF_CONVENTION,\n-    Warn,\n+    style,\n     \"defining a method named with an established prefix (like \\\"into_\\\") that takes \\\n      `self` with the wrong convention\"\n }\n@@ -130,9 +130,9 @@ declare_lint! {\n ///     pub fn as_str(self) -> &str { .. }\n /// }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub WRONG_PUB_SELF_CONVENTION,\n-    Allow,\n+    restriction,\n     \"defining a public method named with an established prefix (like \\\"into_\\\") that takes \\\n      `self` with the wrong convention\"\n }\n@@ -142,15 +142,15 @@ declare_lint! {\n /// **Why is this bad?** Because you usually call `expect()` on the `Result`\n /// directly to get a better error message.\n ///\n-/// **Known problems:** None.\n+/// **Known problems:** The error type needs to implement `Debug`\n ///\n /// **Example:**\n /// ```rust\n /// x.ok().expect(\"why did I do this again?\")\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub OK_EXPECT,\n-    Warn,\n+    style,\n     \"using `ok().expect()`, which gives worse error messages than \\\n      calling `expect` directly on the Result\"\n }\n@@ -160,15 +160,15 @@ declare_lint! {\n /// **Why is this bad?** Readability, this can be written more concisely as\n /// `_.map_or(_, _)`.\n ///\n-/// **Known problems:** None.\n+/// **Known problems:** The order of the arguments is not in execution order\n ///\n /// **Example:**\n /// ```rust\n /// x.map(|a| a + 1).unwrap_or(0)\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub OPTION_MAP_UNWRAP_OR,\n-    Allow,\n+    pedantic,\n     \"using `Option.map(f).unwrap_or(a)`, which is more succinctly expressed as \\\n      `map_or(a, f)`\"\n }\n@@ -178,15 +178,15 @@ declare_lint! {\n /// **Why is this bad?** Readability, this can be written more concisely as\n /// `_.map_or_else(_, _)`.\n ///\n-/// **Known problems:** None.\n+/// **Known problems:** The order of the arguments is not in execution order.\n ///\n /// **Example:**\n /// ```rust\n /// x.map(|a| a + 1).unwrap_or_else(some_function)\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub OPTION_MAP_UNWRAP_OR_ELSE,\n-    Allow,\n+    pedantic,\n     \"using `Option.map(f).unwrap_or_else(g)`, which is more succinctly expressed as \\\n      `map_or_else(g, f)`\"\n }\n@@ -202,9 +202,9 @@ declare_lint! {\n /// ```rust\n /// x.map(|a| a + 1).unwrap_or_else(some_function)\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub RESULT_MAP_UNWRAP_OR_ELSE,\n-    Allow,\n+    pedantic,\n     \"using `Result.map(f).unwrap_or_else(g)`, which is more succinctly expressed as \\\n      `.ok().map_or_else(g, f)`\"\n }\n@@ -214,15 +214,15 @@ declare_lint! {\n /// **Why is this bad?** Readability, this can be written more concisely as\n /// `_.and_then(_)`.\n ///\n-/// **Known problems:** None.\n+/// **Known problems:** The order of the arguments is not in execution order.\n ///\n /// **Example:**\n /// ```rust\n /// opt.map_or(None, |a| a + 1)\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub OPTION_MAP_OR_NONE,\n-    Warn,\n+    style,\n     \"using `Option.map_or(None, f)`, which is more succinctly expressed as \\\n      `and_then(f)`\"\n }\n@@ -238,9 +238,9 @@ declare_lint! {\n /// ```rust\n /// iter.filter(|x| x == 0).next()\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub FILTER_NEXT,\n-    Warn,\n+    complexity,\n     \"using `filter(p).next()`, which is more succinctly expressed as `.find(p)`\"\n }\n \n@@ -257,9 +257,9 @@ declare_lint! {\n /// ```rust\n /// iter.filter(|x| x == 0).map(|x| x * 2)\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub FILTER_MAP,\n-    Allow,\n+    pedantic,\n     \"using combinations of `filter`, `map`, `filter_map` and `flat_map` which can \\\n      usually be written as a single method call\"\n }\n@@ -276,9 +276,9 @@ declare_lint! {\n /// ```rust\n /// iter.find(|x| x == 0).is_some()\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub SEARCH_IS_SOME,\n-    Warn,\n+    complexity,\n     \"using an iterator search followed by `is_some()`, which is more succinctly \\\n      expressed as a call to `any()`\"\n }\n@@ -295,9 +295,9 @@ declare_lint! {\n /// ```rust\n /// name.chars().next() == Some('_')\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub CHARS_NEXT_CMP,\n-    Warn,\n+    complexity,\n     \"using `.chars().next()` to check if a string starts with a char\"\n }\n \n@@ -323,9 +323,9 @@ declare_lint! {\n /// ```rust\n /// foo.unwrap_or_default()\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub OR_FUN_CALL,\n-    Warn,\n+    perf,\n     \"using any `*or` method with a function call, which suggests `*or_else`\"\n }\n \n@@ -340,15 +340,15 @@ declare_lint! {\n /// ```rust\n /// 42u64.clone()\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub CLONE_ON_COPY,\n-    Warn,\n+    complexity,\n     \"using `clone` on a `Copy` type\"\n }\n \n /// **What it does:** Checks for usage of `.clone()` on a ref-counted pointer,\n-/// (Rc, Arc, rc::Weak, or sync::Weak), and suggests calling Clone on\n-/// the corresponding trait instead.\n+/// (`Rc`, `Arc`, `rc::Weak`, or `sync::Weak`), and suggests calling Clone via unified\n+/// function syntax instead (e.g. `Rc::clone(foo)`).\n ///\n /// **Why is this bad?**: Calling '.clone()' on an Rc, Arc, or Weak\n /// can obscure the fact that only the pointer is being cloned, not the underlying\n@@ -358,8 +358,9 @@ declare_lint! {\n /// ```rust\n /// x.clone()\n /// ```\n-declare_restriction_lint! {\n+declare_clippy_lint! {\n     pub CLONE_ON_REF_PTR,\n+    restriction,\n     \"using 'clone' on a ref-counted pointer\"\n }\n \n@@ -379,9 +380,9 @@ declare_restriction_lint! {\n ///    println!(\"{:p} {:p}\",*y, z); // prints out the same pointer\n /// }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub CLONE_DOUBLE_REF,\n-    Warn,\n+    correctness,\n     \"using `clone` on `&&T`\"\n }\n \n@@ -399,9 +400,9 @@ declare_lint! {\n ///     }\n /// }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub NEW_RET_NO_SELF,\n-    Warn,\n+    style,\n     \"not returning `Self` in a `new` method\"\n }\n \n@@ -415,9 +416,9 @@ declare_lint! {\n ///\n /// **Example:**\n /// `_.split(\"x\")` could be `_.split('x')\n-declare_lint! {\n+declare_clippy_lint! {\n     pub SINGLE_CHAR_PATTERN,\n-    Warn,\n+    perf,\n     \"using a single-character str where a char could be used, e.g. \\\n      `_.split(\\\"x\\\")`\"\n }\n@@ -444,9 +445,9 @@ declare_lint! {\n ///     call_some_ffi_func(c_str.as_ptr());\n /// }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub TEMPORARY_CSTRING_AS_PTR,\n-    Warn,\n+    correctness,\n     \"getting the inner pointer of a temporary `CString`\"\n }\n \n@@ -470,9 +471,9 @@ declare_lint! {\n /// let bad_vec = some_vec.get(3);\n /// let bad_slice = &some_vec[..].get(3);\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub ITER_NTH,\n-    Warn,\n+    perf,\n     \"using `.iter().nth()` on a standard library type with O(1) element access\"\n }\n \n@@ -494,9 +495,9 @@ declare_lint! {\n /// let bad_vec = some_vec.iter().nth(3);\n /// let bad_slice = &some_vec[..].iter().nth(3);\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub ITER_SKIP_NEXT,\n-    Warn,\n+    style,\n     \"using `.skip(x).next()` on an iterator\"\n }\n \n@@ -520,9 +521,9 @@ declare_lint! {\n /// let last = some_vec[3];\n /// some_vec[0] = 1;\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub GET_UNWRAP,\n-    Warn,\n+    style,\n     \"using `.get().unwrap()` or `.get_mut().unwrap()` when using `[]` would work instead\"\n }\n \n@@ -549,9 +550,9 @@ declare_lint! {\n /// s.push_str(abc);\n /// s.push_str(&def));\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub STRING_EXTEND_CHARS,\n-    Warn,\n+    style,\n     \"using `x.extend(s.chars())` where s is a `&str` or `String`\"\n }\n \n@@ -572,9 +573,9 @@ declare_lint! {\n /// let s = [1,2,3,4,5];\n /// let s2 : Vec<isize> = s.to_vec();\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub ITER_CLONED_COLLECT,\n-    Warn,\n+    style,\n     \"using `.cloned().collect()` on slice to create a `Vec`\"\n }\n \n@@ -590,9 +591,9 @@ declare_lint! {\n /// ```rust\n /// name.chars().last() == Some('_') || name.chars().next_back() == Some('-')\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub CHARS_LAST_CMP,\n-    Warn,\n+    style,\n     \"using `.chars().last()` or `.chars().next_back()` to check if a string ends with a char\"\n }\n \n@@ -613,9 +614,9 @@ declare_lint! {\n /// let x: &[i32] = &[1,2,3,4,5];\n /// do_stuff(x);\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub USELESS_ASREF,\n-    Warn,\n+    complexity,\n     \"using `as_ref` where the types before and after the call are the same\"\n }\n \n@@ -636,9 +637,9 @@ declare_lint! {\n /// ```rust\n /// let _ = (0..3).any(|x| x > 2);\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub UNNECESSARY_FOLD,\n-    Warn,\n+    style,\n     \"using `fold` when a more succinct alternative exists\"\n }\n "}, {"sha": "8c19f627f532b7cec21fdf185ff5e94b3df3b02c", "filename": "clippy_lints/src/minmax.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fminmax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fminmax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fminmax.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -18,9 +18,9 @@ use utils::{match_def_path, opt_def_id, paths, span_lint};\n /// ```\n /// It will always be equal to `0`. Probably the author meant to clamp the value\n /// between 0 and 100, but has erroneously swapped `min` and `max`.\n-declare_lint! {\n+declare_clippy_lint! {\n     pub MIN_MAX,\n-    Warn,\n+    correctness,\n     \"`min(_, max(_, _))` (or vice versa) with bounds clamping the result to a constant\"\n }\n "}, {"sha": "e9b6865f0c9964d5d837ea77497810bab20b30b9", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -31,9 +31,9 @@ use consts::{constant, Constant};\n /// ```rust\n /// fn foo(ref x: u8) -> bool { .. }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub TOPLEVEL_REF_ARG,\n-    Warn,\n+    style,\n     \"an entire binding declared as `ref`, in a function argument or a `let` statement\"\n }\n \n@@ -48,9 +48,9 @@ declare_lint! {\n /// ```rust\n /// x == NAN\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub CMP_NAN,\n-    Deny,\n+    correctness,\n     \"comparisons to NAN, which will always return false, probably not intended\"\n }\n \n@@ -70,9 +70,9 @@ declare_lint! {\n /// y == 1.23f64\n /// y != x  // where both are floats\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub FLOAT_CMP,\n-    Warn,\n+    correctness,\n     \"using `==` or `!=` on float values instead of comparing difference with an epsilon\"\n }\n \n@@ -89,9 +89,9 @@ declare_lint! {\n /// ```rust\n /// x.to_owned() == y\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub CMP_OWNED,\n-    Warn,\n+    perf,\n     \"creating owned instances for comparing with others, e.g. `x == \\\"foo\\\".to_string()`\"\n }\n \n@@ -108,9 +108,9 @@ declare_lint! {\n /// ```rust\n /// x % 1\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub MODULO_ONE,\n-    Warn,\n+    correctness,\n     \"taking a number modulo 1, which always returns 0\"\n }\n \n@@ -128,9 +128,9 @@ declare_lint! {\n ///     y @ _   => (), // easier written as `y`,\n /// }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub REDUNDANT_PATTERN,\n-    Warn,\n+    style,\n     \"using `name @ _` in a pattern\"\n }\n \n@@ -150,9 +150,9 @@ declare_lint! {\n /// let y = _x + 1; // Here we are using `_x`, even though it has a leading\n ///                 // underscore. We should rename `_x` to `x`\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub USED_UNDERSCORE_BINDING,\n-    Allow,\n+    pedantic,\n     \"using a binding which is prefixed with an underscore\"\n }\n \n@@ -170,9 +170,9 @@ declare_lint! {\n /// ```rust\n /// f() && g();  // We should write `if f() { g(); }`.\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub SHORT_CIRCUIT_STATEMENT,\n-    Warn,\n+    complexity,\n     \"using a short circuit boolean condition as a statement\"\n }\n \n@@ -188,9 +188,9 @@ declare_lint! {\n /// ```rust\n /// 0 as *const u32\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub ZERO_PTR,\n-    Warn,\n+    style,\n     \"using 0 as *{const, mut} T\"\n }\n \n@@ -210,8 +210,9 @@ declare_lint! {\n /// const ONE == 1.00f64\n /// x == ONE  // where both are floats\n /// ```\n-declare_restriction_lint! {\n+declare_clippy_lint! {\n     pub FLOAT_CMP_CONST,\n+    restriction,\n     \"using `==` or `!=` on float constants instead of comparing difference with an epsilon\"\n }\n "}, {"sha": "3f3ba6487ded2a7ac76a072d35903fa67fd3df83", "filename": "clippy_lints/src/misc_early.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -17,9 +17,9 @@ use utils::{constants, in_external_macro, snippet, snippet_opt, span_help_and_li\n /// ```rust\n /// let { a: _, b: ref b, c: _ } = ..\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub UNNEEDED_FIELD_PATTERN,\n-    Warn,\n+    style,\n     \"struct fields bound to a wildcard instead of using `..`\"\n }\n \n@@ -34,9 +34,9 @@ declare_lint! {\n /// ```rust\n /// fn foo(a: i32, _a: i32) {}\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub DUPLICATE_UNDERSCORE_ARGUMENT,\n-    Warn,\n+    style,\n     \"function arguments having names which only differ by an underscore\"\n }\n \n@@ -52,9 +52,9 @@ declare_lint! {\n /// ```rust\n /// (|| 42)()\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub REDUNDANT_CLOSURE_CALL,\n-    Warn,\n+    complexity,\n     \"throwaway closures called in the expression they are defined\"\n }\n \n@@ -69,9 +69,9 @@ declare_lint! {\n /// ```rust\n /// --x;\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub DOUBLE_NEG,\n-    Warn,\n+    style,\n     \"`--x`, which is a double negation of `x` and not a pre-decrement as in C/C++\"\n }\n \n@@ -86,9 +86,9 @@ declare_lint! {\n /// ```rust\n /// let y = 0x1a9BAcD;\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub MIXED_CASE_HEX_LITERALS,\n-    Warn,\n+    style,\n     \"hex literals whose letter digits are not consistently upper- or lowercased\"\n }\n \n@@ -103,9 +103,9 @@ declare_lint! {\n /// ```rust\n /// let y = 123832i32;\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub UNSEPARATED_LITERAL_SUFFIX,\n-    Allow,\n+    pedantic,\n     \"literals whose suffix is not separated by an underscore\"\n }\n \n@@ -141,9 +141,9 @@ declare_lint! {\n /// ```\n ///\n /// prints `83` (as `83 == 0o123` while `123 == 0o173`).\n-declare_lint! {\n+declare_clippy_lint! {\n     pub ZERO_PREFIXED_LITERAL,\n-    Warn,\n+    complexity,\n     \"integer literals starting with `0`\"\n }\n \n@@ -162,9 +162,9 @@ declare_lint! {\n ///     }\n /// }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub BUILTIN_TYPE_SHADOW,\n-    Warn,\n+    style,\n     \"shadowing a builtin type\"\n }\n "}, {"sha": "6a83417157b2a6eb18f93b8bfed61dbdbd02db52", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -35,9 +35,9 @@ use utils::in_macro;\n /// This lint fixes that.\n ///\n /// **Known problems:** None.\n-declare_lint! {\n+declare_clippy_lint! {\n     pub MISSING_DOCS_IN_PRIVATE_ITEMS,\n-    Allow,\n+    restriction,\n     \"detects missing documentation for public and private members\"\n }\n "}, {"sha": "13c1c930a05561f199770dfd24bb73aa0194b905", "filename": "clippy_lints/src/mut_mut.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_mut.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -16,9 +16,9 @@ use utils::{higher, in_external_macro, span_lint};\n /// ```rust\n /// let x = &mut &mut y;\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub MUT_MUT,\n-    Allow,\n+    pedantic,\n     \"usage of double-mut refs, e.g. `&mut &mut ...`\"\n }\n "}, {"sha": "5e60ff624a18aca5b1782d7814f566c152d2180d", "filename": "clippy_lints/src/mut_reference.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_reference.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -16,9 +16,9 @@ use utils::span_lint;\n /// ```rust\n /// my_vec.push(&mut value)\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub UNNECESSARY_MUT_PASSED,\n-    Warn,\n+    style,\n     \"an argument passed as a mutable reference although the callee only demands an \\\n      immutable reference\"\n }"}, {"sha": "b879d76e65cedcc9cd601ce12a8a0bddf2bc8df4", "filename": "clippy_lints/src/mutex_atomic.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fmutex_atomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fmutex_atomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmutex_atomic.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -22,9 +22,9 @@ use utils::{match_type, paths, span_lint};\n /// ```rust\n /// let x = Mutex::new(&y);\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub MUTEX_ATOMIC,\n-    Warn,\n+    perf,\n     \"using a mutex where an atomic value could be used instead\"\n }\n \n@@ -42,9 +42,9 @@ declare_lint! {\n /// ```rust\n /// let x = Mutex::new(0usize);\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub MUTEX_INTEGER,\n-    Allow,\n+    nursery,\n     \"using a mutex for an integer type\"\n }\n "}, {"sha": "e88d76656ebaf228c28268609b05293323b6804f", "filename": "clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bool.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -24,9 +24,9 @@ use utils::sugg::Sugg;\n /// ```rust\n /// if x { false } else { true }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub NEEDLESS_BOOL,\n-    Warn,\n+    complexity,\n     \"if-statements with plain booleans in the then- and else-clause, e.g. \\\n      `if p { true } else { false }`\"\n }\n@@ -42,9 +42,9 @@ declare_lint! {\n /// ```rust\n /// if x == true { }  // could be `if x { }`\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub BOOL_COMPARISON,\n-    Warn,\n+    complexity,\n     \"comparing a variable to a boolean, e.g. `if x == true`\"\n }\n "}, {"sha": "a5d89cbcb736586ffea0939d09b4dff7d5f8ae5a", "filename": "clippy_lints/src/needless_borrow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrow.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -20,9 +20,9 @@ use utils::{in_macro, snippet_opt, span_lint_and_then};\n /// ```rust\n /// let x: &i32 = &&&&&&5;\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub NEEDLESS_BORROW,\n-    Warn,\n+    complexity,\n     \"taking a reference that is going to be automatically dereferenced\"\n }\n "}, {"sha": "35eb599a5278e368d9dbfe7a3750530073773afa", "filename": "clippy_lints/src/needless_borrowed_ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -42,9 +42,9 @@ use utils::{in_macro, snippet, span_lint_and_then};\n /// reference and\n /// de-referenced.\n /// As such, it could just be |a| a.is_empty()\n-declare_lint! {\n+declare_clippy_lint! {\n     pub NEEDLESS_BORROWED_REFERENCE,\n-    Warn,\n+    complexity,\n     \"taking a needless borrowed reference\"\n }\n "}, {"sha": "162cfc7e77f9d509d7ff4c48fb4bcf833280c029", "filename": "clippy_lints/src/needless_continue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fneedless_continue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fneedless_continue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_continue.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -93,9 +93,9 @@ use utils::{in_macro, snippet, snippet_block, span_help_and_lint, trim_multiline\n ///     // Do something useful\n /// }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub NEEDLESS_CONTINUE,\n-    Warn,\n+    pedantic,\n     \"`continue` statements that can be replaced by a rearrangement of code\"\n }\n "}, {"sha": "02048c39265800ffc01e9c2ba32740e9a57d715e", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -39,9 +39,9 @@ use std::borrow::Cow;\n ///     assert_eq!(v.len(), 42);\n /// }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub NEEDLESS_PASS_BY_VALUE,\n-    Warn,\n+    style,\n     \"functions taking arguments by value, but not consuming them in its body\"\n }\n "}, {"sha": "fe75bfaf24cd6b5a685315975919fe715d4c0151", "filename": "clippy_lints/src/needless_update.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fneedless_update.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fneedless_update.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_update.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -15,9 +15,9 @@ use utils::span_lint;\n /// ```rust\n /// Point { x: 1, y: 0, ..zero_point }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub NEEDLESS_UPDATE,\n-    Warn,\n+    complexity,\n     \"using `Foo { ..base }` when there are no missing fields\"\n }\n "}, {"sha": "5ddd0d409e3b2a6e5b6f8a5eaf56a8d580dcef7f", "filename": "clippy_lints/src/neg_multiply.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fneg_multiply.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fneg_multiply.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneg_multiply.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -15,9 +15,9 @@ use utils::span_lint;\n /// ```rust\n /// x * -1\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub NEG_MULTIPLY,\n-    Warn,\n+    style,\n     \"multiplying integers with -1\"\n }\n "}, {"sha": "54b00081973d9f7ab0cbb3fcb2c73a46c68882f3", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -42,9 +42,9 @@ use utils::sugg::DiagnosticBuilderExt;\n /// ```\n ///\n /// You can also have `new()` call `Default::default()`.\n-declare_lint! {\n+declare_clippy_lint! {\n     pub NEW_WITHOUT_DEFAULT,\n-    Warn,\n+    style,\n     \"`fn new() -> Self` method without `Default` implementation\"\n }\n \n@@ -72,9 +72,9 @@ declare_lint! {\n /// ```\n ///\n /// Just prepend `#[derive(Default)]` before the `struct` definition.\n-declare_lint! {\n+declare_clippy_lint! {\n     pub NEW_WITHOUT_DEFAULT_DERIVE,\n-    Warn,\n+    style,\n     \"`fn new() -> Self` without `#[derive]`able `Default` implementation\"\n }\n "}, {"sha": "1847761416b5c6da20dba895564307f0a88c2d31", "filename": "clippy_lints/src/no_effect.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fno_effect.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -16,9 +16,9 @@ use std::ops::Deref;\n /// ```rust\n /// 0;\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub NO_EFFECT,\n-    Warn,\n+    complexity,\n     \"statements with no effect\"\n }\n \n@@ -34,9 +34,9 @@ declare_lint! {\n /// ```rust\n /// compute_array()[0];\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub UNNECESSARY_OPERATION,\n-    Warn,\n+    complexity,\n     \"outer expressions with no effect\"\n }\n "}, {"sha": "057ed15738259c0cddec68d07a7a4c6851e744ee", "filename": "clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -18,9 +18,9 @@ use utils::{in_macro, span_lint, span_lint_and_then};\n /// let checked_exp = something;\n /// let checked_expr = something_else;\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub SIMILAR_NAMES,\n-    Allow,\n+    pedantic,\n     \"similarly named items and bindings\"\n }\n \n@@ -36,9 +36,9 @@ declare_lint! {\n /// ```rust\n /// let (a, b, c, d, e, f, g) = (...);\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub MANY_SINGLE_CHAR_NAMES,\n-    Warn,\n+    style,\n     \"too many single character bindings\"\n }\n \n@@ -56,9 +56,9 @@ declare_lint! {\n /// let ___1 = 1;\n /// let __1___2 = 11;\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub JUST_UNDERSCORES_AND_DIGITS,\n-    Warn,\n+    style,\n     \"unclear name\"\n }\n "}, {"sha": "286ed4b4d48b8534d9389c696a0ddcab0ce80e7e", "filename": "clippy_lints/src/ok_if_let.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fok_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fok_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fok_if_let.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -26,9 +26,9 @@ use utils::{match_type, method_chain_args, paths, snippet, span_help_and_lint};\n ///     }\n /// }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub IF_LET_SOME_RESULT,\n-    Warn,\n+    style,\n     \"usage of `ok()` in `if let Some(pat)` statements is unnecessary, match on `Ok(pat)` instead\"\n }\n "}, {"sha": "9ab22560093e363c1ce323e90c82be4fc348f8ab", "filename": "clippy_lints/src/open_options.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fopen_options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fopen_options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fopen_options.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -16,9 +16,9 @@ use utils::{match_type, paths, span_lint, walk_ptrs_ty};\n /// ```rust\n /// OpenOptions::new().read(true).truncate(true)\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub NONSENSICAL_OPEN_OPTIONS,\n-    Warn,\n+    correctness,\n     \"nonsensical combination of options for opening a file\"\n }\n "}, {"sha": "986206a1986b4ae5da5d7058c5ce9c31af14e4f4", "filename": "clippy_lints/src/overflow_check_conditional.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Foverflow_check_conditional.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Foverflow_check_conditional.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foverflow_check_conditional.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -13,9 +13,9 @@ use utils::span_lint;\n /// ```rust\n /// a + b < a\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub OVERFLOW_CHECK_CONDITIONAL,\n-    Warn,\n+    complexity,\n     \"overflow checks inspired by C which are likely to panic\"\n }\n "}, {"sha": "bbb62a778b5d606041908ed28f638259137338a1", "filename": "clippy_lints/src/panic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpanic.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -17,9 +17,9 @@ use utils::{is_direct_expn_of, match_def_path, opt_def_id, paths, resolve_node,\n /// ```rust\n /// panic!(\"This `panic!` is probably missing a parameter there: {}\");\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub PANIC_PARAMS,\n-    Warn,\n+    style,\n     \"missing parameters in `panic!` calls\"\n }\n "}, {"sha": "787aee7184391e4a03741b6bcf8c3e10219f2e2c", "filename": "clippy_lints/src/partialeq_ne_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -20,9 +20,9 @@ use utils::{is_automatically_derived, span_lint};\n ///    fn ne(&self, other: &Foo) -> bool { !(self == other) }\n /// }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub PARTIALEQ_NE_IMPL,\n-    Warn,\n+    complexity,\n     \"re-implementing `PartialEq::ne`\"\n }\n "}, {"sha": "90e418f068747001328da0e8f19977ea44533c59", "filename": "clippy_lints/src/precedence.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fprecedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fprecedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fprecedence.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -20,9 +20,9 @@ use utils::{in_macro, snippet, span_lint_and_sugg};\n /// **Example:**\n /// * `1 << 2 + 3` equals 32, while `(1 << 2) + 3` equals 7\n /// * `-1i32.abs()` equals -1, while `(-1i32).abs()` equals 1\n-declare_lint! {\n+declare_clippy_lint! {\n     pub PRECEDENCE,\n-    Warn,\n+    complexity,\n     \"operations where precedence may be unclear\"\n }\n "}, {"sha": "6d9880e1335198754ff2c0840a1e402ce18542cd", "filename": "clippy_lints/src/print.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fprint.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -8,7 +8,7 @@ use syntax_pos::Span;\n use utils::{is_expn_of, match_def_path, match_path, resolve_node, span_lint, span_lint_and_sugg};\n use utils::{opt_def_id, paths};\n \n-/// **What it does:** This lint warns when you using `println!(\"\")` to\n+/// **What it does:** This lint warns when you use `println!(\"\")` to\n /// print a newline.\n ///\n /// **Why is this bad?** You should use `println!()`, which is simpler.\n@@ -19,13 +19,13 @@ use utils::{opt_def_id, paths};\n /// ```rust\n /// println!(\"\");\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub PRINTLN_EMPTY_STRING,\n-    Warn,\n-    \"using `print!()` with a format string that ends in a newline\"\n+    style,\n+    \"using `println!(\\\"\\\")` with an empty string\"\n }\n \n-/// **What it does:** This lint warns when you using `print!()` with a format\n+/// **What it does:** This lint warns when you use `print!()` with a format\n /// string that\n /// ends in a newline.\n ///\n@@ -38,9 +38,9 @@ declare_lint! {\n /// ```rust\n /// print!(\"Hello {}!\\n\", name);\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub PRINT_WITH_NEWLINE,\n-    Warn,\n+    style,\n     \"using `print!()` with a format string that ends in a newline\"\n }\n \n@@ -56,9 +56,9 @@ declare_lint! {\n /// ```rust\n /// println!(\"Hello world!\");\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub PRINT_STDOUT,\n-    Allow,\n+    restriction,\n     \"printing on stdout\"\n }\n \n@@ -72,9 +72,9 @@ declare_lint! {\n /// ```rust\n /// println!(\"{:?}\", foo);\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub USE_DEBUG,\n-    Allow,\n+    restriction,\n     \"use of `Debug`-based formatting\"\n }\n "}, {"sha": "17f46f78baa9bc9f12788e08804e05173c87c722", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -42,9 +42,9 @@ use utils::ptr::get_spans;\n /// ```rust\n /// fn foo(&Vec<u32>) { .. }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub PTR_ARG,\n-    Warn,\n+    style,\n     \"fn arguments of the type `&Vec<...>` or `&String`, suggesting to use `&[...]` or `&str` \\\n      instead, respectively\"\n }\n@@ -61,9 +61,9 @@ declare_lint! {\n /// ```rust\n /// if x == ptr::null { .. }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub CMP_NULL,\n-    Warn,\n+    style,\n     \"comparing a pointer to a null pointer, suggesting to use `.is_null()` instead.\"\n }\n \n@@ -86,9 +86,9 @@ declare_lint! {\n /// ```rust\n /// fn foo(&Foo) -> &mut Bar { .. }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub MUT_FROM_REF,\n-    Warn,\n+    correctness,\n     \"fns that create mutable refs from immutable ref args\"\n }\n "}, {"sha": "9478d874c693c1b7038d84fa01b78360f3f5204a", "filename": "clippy_lints/src/question_mark.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fquestion_mark.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -25,9 +25,9 @@ use utils::paths::*;\n /// ```rust\n /// option?;\n /// ```\n-declare_lint!{\n+declare_clippy_lint!{\n     pub QUESTION_MARK,\n-    Warn,\n+    style,\n     \"checks for expressions that could be replaced by the question mark operator\"\n }\n "}, {"sha": "5a5dfe04d0169e6bb65d3c9a42b3e4fae75f002b", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -18,9 +18,9 @@ use utils::sugg::Sugg;\n /// ```rust\n /// for x in (5..5).step_by(0) { .. }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub ITERATOR_STEP_BY_ZERO,\n-    Warn,\n+    correctness,\n     \"using `Iterator::step_by(0)`, which produces an infinite iterator\"\n }\n \n@@ -35,9 +35,9 @@ declare_lint! {\n /// ```rust\n /// x.iter().zip(0..x.len())\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub RANGE_ZIP_WITH_LEN,\n-    Warn,\n+    complexity,\n     \"zipping iterator with a range when `enumerate()` would do\"\n }\n \n@@ -53,9 +53,9 @@ declare_lint! {\n /// ```rust\n /// for x..(y+1) { .. }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub RANGE_PLUS_ONE,\n-    Allow,\n+    nursery,\n     \"`x..(y+1)` reads better as `x..=y`\"\n }\n \n@@ -71,9 +71,9 @@ declare_lint! {\n /// ```rust\n /// for x..=(y-1) { .. }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub RANGE_MINUS_ONE,\n-    Warn,\n+    style,\n     \"`x..=(y-1)` reads better as `x..y`\"\n }\n "}, {"sha": "5e24361f1d188f43e4b8d61bc22f79c26cbc1579", "filename": "clippy_lints/src/redundant_field_names.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fredundant_field_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fredundant_field_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_field_names.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -20,9 +20,9 @@ use utils::{in_macro, is_range_expression, match_var, span_lint_and_sugg};\n /// \n /// let foo = Foo{ bar: bar }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub REDUNDANT_FIELD_NAMES,\n-    Warn,\n+    style,\n     \"checks for fields in struct literals where shorthands could be used\"\n }\n "}, {"sha": "0d4332b4a7de29c331501c84b1dd8e01088708d1", "filename": "clippy_lints/src/reference.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Freference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Freference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freference.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -15,9 +15,9 @@ use utils::{snippet, span_lint_and_sugg};\n /// let a = f(*&mut b);\n /// let c = *&d;\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub DEREF_ADDROF,\n-    Warn,\n+    complexity,\n     \"use of `*&` or `*&mut` in an expression\"\n }\n "}, {"sha": "556ee72d9953f7e113e8159173c885663e6435f1", "filename": "clippy_lints/src/regex.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fregex.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -19,9 +19,9 @@ use consts::{constant, Constant};\n /// ```rust\n /// Regex::new(\"|\")\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub INVALID_REGEX,\n-    Deny,\n+    correctness,\n     \"invalid regular expressions\"\n }\n \n@@ -38,9 +38,9 @@ declare_lint! {\n /// ```rust\n /// Regex::new(\"^foobar\")\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub TRIVIAL_REGEX,\n-    Warn,\n+    style,\n     \"trivial regular expressions\"\n }\n \n@@ -57,9 +57,9 @@ declare_lint! {\n /// ```rust\n /// regex!(\"foo|bar\")\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub REGEX_MACRO,\n-    Warn,\n+    style,\n     \"use of `regex!(_)` instead of `Regex::new(_)`\"\n }\n "}, {"sha": "0677cb087d6ee900a90b4155d4e2a54e1fd0e6aa", "filename": "clippy_lints/src/replace_consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Freplace_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Freplace_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freplace_consts.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -20,9 +20,9 @@ use utils::{match_def_path, span_lint_and_sugg};\n /// ```rust\n /// static FOO: AtomicIsize = AtomicIsize::new(0);\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub REPLACE_CONSTS,\n-    Allow,\n+    pedantic,\n     \"Lint usages of standard library `const`s that could be replaced by `const fn`s\"\n }\n "}, {"sha": "62038262de4270411f6254c0c2c54aea13524d7b", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -17,9 +17,9 @@ use utils::{in_external_macro, in_macro, match_path_ast, snippet_opt, span_lint_\n /// ```rust\n /// fn foo(x: usize) { return x; }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub NEEDLESS_RETURN,\n-    Warn,\n+    style,\n     \"using a return statement like `return expr;` where an expression would suffice\"\n }\n \n@@ -35,9 +35,9 @@ declare_lint! {\n /// ```rust\n /// { let x = ..; x }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub LET_AND_RETURN,\n-    Warn,\n+    style,\n     \"creating a let-binding and then immediately returning it like `let x = expr; x` at \\\n      the end of a block\"\n }"}, {"sha": "588e22b7cb1e18c93cfa8cd13c9b00b7d18b805d", "filename": "clippy_lints/src/serde_api.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fserde_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fserde_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fserde_api.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -5,15 +5,15 @@ use utils::{get_trait_def_id, paths, span_lint};\n /// **What it does:** Checks for mis-uses of the serde API.\n ///\n /// **Why is this bad?** Serde is very finnicky about how its API should be\n-/// used, but the type system can't be used to enforce it (yet).\n+/// used, but the type system can't be used to enforce it (yet?).\n ///\n /// **Known problems:** None.\n ///\n /// **Example:** Implementing `Visitor::visit_string` but not\n /// `Visitor::visit_str`.\n-declare_lint! {\n+declare_clippy_lint! {\n     pub SERDE_API_MISUSE,\n-    Warn,\n+    correctness,\n     \"various things that will negatively affect your serde experience\"\n }\n "}, {"sha": "8330bb7015bffd512c0b606bd9607754a1fe187a", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -20,9 +20,9 @@ use utils::{contains_name, higher, in_external_macro, iter_input_pats, snippet,\n /// ```rust\n /// let x = &x;\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub SHADOW_SAME,\n-    Allow,\n+    restriction,\n     \"rebinding a name to itself, e.g. `let mut x = &mut x`\"\n }\n \n@@ -41,9 +41,9 @@ declare_lint! {\n /// ```rust\n /// let x = x + 1;\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub SHADOW_REUSE,\n-    Allow,\n+    restriction,\n     \"rebinding a name to an expression that re-uses the original value, e.g. \\\n      `let x = x + 1`\"\n }\n@@ -64,9 +64,9 @@ declare_lint! {\n /// ```rust\n /// let x = y; let x = z; // shadows the earlier binding\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub SHADOW_UNRELATED,\n-    Allow,\n+    restriction,\n     \"rebinding a name without even using the original value\"\n }\n "}, {"sha": "823ed1be3512b8f65be61d0a1eb3973c6fe1747f", "filename": "clippy_lints/src/strings.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrings.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -8,7 +8,8 @@ use utils::{get_parent_expr, is_allowed, match_type, paths, span_lint, span_lint\n /// `let`!).\n ///\n /// **Why is this bad?** It's not really bad, but some people think that the\n-/// `.push_str(_)` method is more readable.\n+/// `.push_str(_)` method is more readable. Also creates a new heap allocation and throws\n+/// away the old one.\n ///\n /// **Known problems:** None.\n ///\n@@ -18,9 +19,9 @@ use utils::{get_parent_expr, is_allowed, match_type, paths, span_lint, span_lint\n /// let mut x = \"Hello\".to_owned();\n /// x = x + \", World\";\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub STRING_ADD_ASSIGN,\n-    Allow,\n+    pedantic,\n     \"using `x = x + ..` where x is a `String` instead of `push_str()`\"\n }\n \n@@ -46,9 +47,9 @@ declare_lint! {\n /// let x = \"Hello\".to_owned();\n /// x + \", World\"\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub STRING_ADD,\n-    Allow,\n+    restriction,\n     \"using `x + ..` where x is a `String` instead of `push_str()`\"\n }\n \n@@ -64,9 +65,9 @@ declare_lint! {\n /// ```rust\n /// let bs = \"a byte string\".as_bytes();\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub STRING_LIT_AS_BYTES,\n-    Warn,\n+    style,\n     \"calling `as_bytes` on a string literal instead of using a byte string literal\"\n }\n "}, {"sha": "2c322ce6b5ec669d73c60be20a34e4f110c9bb9b", "filename": "clippy_lints/src/suspicious_trait_impl.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -21,9 +21,9 @@ use utils::{get_trait_def_id, span_lint};\n ///     }\n /// }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub SUSPICIOUS_ARITHMETIC_IMPL,\n-    Warn,\n+    correctness,\n     \"suspicious use of operators in impl of arithmetic trait\"\n }\n \n@@ -42,9 +42,9 @@ declare_lint! {\n ///     }\n /// }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub SUSPICIOUS_OP_ASSIGN_IMPL,\n-    Warn,\n+    correctness,\n     \"suspicious use of operators in impl of OpAssign trait\"\n }\n "}, {"sha": "47ac45578bef7ba80a5222946d214aeefb7c8226", "filename": "clippy_lints/src/swap.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -17,9 +17,9 @@ use utils::sugg::Sugg;\n /// b = a;\n /// a = t;\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub MANUAL_SWAP,\n-    Warn,\n+    complexity,\n     \"manual swap of two variables\"\n }\n \n@@ -34,9 +34,9 @@ declare_lint! {\n /// a = b;\n /// b = a;\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub ALMOST_SWAPPED,\n-    Warn,\n+    correctness,\n     \"`foo = bar; bar = foo` sequence\"\n }\n "}, {"sha": "459549f1e58be415fdfe85726896f08685c84e5d", "filename": "clippy_lints/src/temporary_assignment.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Ftemporary_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Ftemporary_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftemporary_assignment.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -15,9 +15,9 @@ use utils::span_lint;\n /// ```rust\n /// (0, 0).0 = 1\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub TEMPORARY_ASSIGNMENT,\n-    Warn,\n+    complexity,\n     \"assignments to temporaries\"\n }\n "}, {"sha": "00d6c310c6975db33ed42c05368a3b77a9b9946c", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -19,9 +19,9 @@ use utils::{opt_def_id, sugg};\n /// ```rust\n /// let ptr: *const T = core::intrinsics::transmute('x')`\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub WRONG_TRANSMUTE,\n-    Warn,\n+    correctness,\n     \"transmutes that are confusing at best, undefined behaviour at worst and always useless\"\n }\n \n@@ -37,9 +37,9 @@ declare_lint! {\n /// ```rust\n /// core::intrinsics::transmute(t) // where the result type is the same as `t`'s\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub USELESS_TRANSMUTE,\n-    Warn,\n+    complexity,\n     \"transmutes that have the same to and from types or could be a cast/coercion\"\n }\n \n@@ -55,9 +55,9 @@ declare_lint! {\n /// core::intrinsics::transmute(t)` // where the result type is the same as\n /// `*t` or `&t`'s\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub CROSSPOINTER_TRANSMUTE,\n-    Warn,\n+    complexity,\n     \"transmutes that have to or from types that are a pointer to the other\"\n }\n \n@@ -73,9 +73,9 @@ declare_lint! {\n /// // can be written:\n /// let _: &T = &*p;\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub TRANSMUTE_PTR_TO_REF,\n-    Warn,\n+    complexity,\n     \"transmutes from a pointer to a reference type\"\n }\n \n@@ -100,9 +100,9 @@ declare_lint! {\n /// // should be:\n /// let _ = std::char::from_u32(x).unwrap();\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub TRANSMUTE_INT_TO_CHAR,\n-    Warn,\n+    complexity,\n     \"transmutes from an integer to a `char`\"\n }\n \n@@ -127,9 +127,9 @@ declare_lint! {\n /// // should be:\n /// let _ = std::str::from_utf8(b).unwrap();\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub TRANSMUTE_BYTES_TO_STR,\n-    Warn,\n+    complexity,\n     \"transmutes from a `&[u8]` to a `&str`\"\n }\n \n@@ -145,9 +145,9 @@ declare_lint! {\n /// // should be:\n /// let _: bool = x != 0;\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub TRANSMUTE_INT_TO_BOOL,\n-    Warn,\n+    complexity,\n     \"transmutes from an integer to a `bool`\"\n }\n \n@@ -163,9 +163,9 @@ declare_lint! {\n /// // should be:\n /// let _: f32 = f32::from_bits(x);\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub TRANSMUTE_INT_TO_FLOAT,\n-    Warn,\n+    complexity,\n     \"transmutes from an integer to a float\"\n }\n \n@@ -180,9 +180,9 @@ declare_lint! {\n /// // u32 is 32-bit aligned; u8 is 8-bit aligned\n /// let _: u32 = unsafe { std::mem::transmute([0u8; 4]) };\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub MISALIGNED_TRANSMUTE,\n-    Warn,\n+    complexity,\n     \"transmutes to a potentially less-aligned type\"\n }\n "}, {"sha": "16a1142efb7ae207b9a20fc7a475047380c797a3", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -44,9 +44,9 @@ pub struct TypePass;\n ///     values: Vec<Foo>,\n /// }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub BOX_VEC,\n-    Warn,\n+    perf,\n     \"usage of `Box<Vec<T>>`, vector elements are already on the heap\"\n }\n \n@@ -64,9 +64,9 @@ declare_lint! {\n /// fn x() -> Option<Option<u32>> {\n ///     None\n /// }\n-declare_lint! {\n+declare_clippy_lint! {\n     pub OPTION_OPTION,\n-    Warn,\n+    complexity,\n     \"usage of `Option<Option<T>>`\"\n }\n \n@@ -99,9 +99,9 @@ declare_lint! {\n /// ```rust\n /// let x = LinkedList::new();\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub LINKEDLIST,\n-    Warn,\n+    pedantic,\n     \"usage of LinkedList, usually a vector is faster, or a more specialized data \\\n      structure like a VecDeque\"\n }\n@@ -123,9 +123,9 @@ declare_lint! {\n /// ```rust\n /// fn foo(bar: &T) { ... }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub BORROWED_BOX,\n-    Warn,\n+    complexity,\n     \"a borrow of a boxed type\"\n }\n \n@@ -353,9 +353,9 @@ pub struct LetPass;\n /// ```rust\n /// let x = { 1; };\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub LET_UNIT_VALUE,\n-    Warn,\n+    style,\n     \"creating a let binding to a value of unit type, which usually can't be used afterwards\"\n }\n \n@@ -409,9 +409,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LetPass {\n /// ```rust\n /// { foo(); bar(); baz(); }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub UNIT_CMP,\n-    Warn,\n+    correctness,\n     \"comparing unit values\"\n }\n \n@@ -464,9 +464,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnitCmp {\n ///   baz(a);\n /// })\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub UNIT_ARG,\n-    Warn,\n+    complexity,\n     \"passing unit to a function\"\n }\n \n@@ -563,9 +563,9 @@ pub struct CastPass;\n /// ```rust\n /// let x = u64::MAX; x as f64\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub CAST_PRECISION_LOSS,\n-    Allow,\n+    pedantic,\n     \"casts that cause loss of precision, e.g. `x as f32` where `x: u64`\"\n }\n \n@@ -584,9 +584,9 @@ declare_lint! {\n /// let y: i8 = -1;\n /// y as u128  // will return 18446744073709551615\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub CAST_SIGN_LOSS,\n-    Allow,\n+    pedantic,\n     \"casts from signed types to unsigned types, e.g. `x as u32` where `x: i32`\"\n }\n \n@@ -604,9 +604,9 @@ declare_lint! {\n /// ```rust\n /// fn as_u8(x: u64) -> u8 { x as u8 }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub CAST_POSSIBLE_TRUNCATION,\n-    Allow,\n+    pedantic,\n     \"casts that may cause truncation of the value, e.g. `x as u8` where `x: u32`, \\\n      or `x as i32` where `x: f32`\"\n }\n@@ -628,9 +628,9 @@ declare_lint! {\n /// ```rust\n /// u32::MAX as i32  // will yield a value of `-1`\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub CAST_POSSIBLE_WRAP,\n-    Allow,\n+    pedantic,\n     \"casts that may cause wrapping around the value, e.g. `x as i32` where `x: u32` \\\n      and `x > i32::MAX`\"\n }\n@@ -657,9 +657,9 @@ declare_lint! {\n /// ```rust\n /// fn as_u64(x: u8) -> u64 { u64::from(x) }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub CAST_LOSSLESS,\n-    Warn,\n+    complexity,\n     \"casts using `as` that are known to be lossless, e.g. `x as u64` where `x: u8`\"\n }\n \n@@ -673,9 +673,9 @@ declare_lint! {\n /// ```rust\n /// let _ = 2i32 as i32\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub UNNECESSARY_CAST,\n-    Warn,\n+    complexity,\n     \"cast to the same type, e.g. `x as i32` where `x: i32`\"\n }\n \n@@ -971,9 +971,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CastPass {\n /// ```rust\n /// struct Foo { inner: Rc<Vec<Vec<Box<(u32, u32, u32, u32)>>>> }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub TYPE_COMPLEXITY,\n-    Warn,\n+    complexity,\n     \"usage of very complex types that might be better factored into `type` definitions\"\n }\n \n@@ -1143,9 +1143,9 @@ impl<'tcx> Visitor<'tcx> for TypeComplexityVisitor {\n /// ```rust\n /// b'x'\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub CHAR_LIT_AS_U8,\n-    Warn,\n+    complexity,\n     \"casting a character literal to u8\"\n }\n \n@@ -1198,9 +1198,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CharLitAsU8 {\n /// vec.len() <= 0\n /// 100 > std::i32::MAX\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub ABSURD_EXTREME_COMPARISONS,\n-    Warn,\n+    correctness,\n     \"a comparison with a maximum or minimum value that is always true or false\"\n }\n \n@@ -1374,9 +1374,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AbsurdExtremeComparisons {\n /// ```rust\n /// let x : u8 = ...; (x as u32) > 300\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub INVALID_UPCAST_COMPARISONS,\n-    Allow,\n+    pedantic,\n     \"a comparison involving an upcast which is always true or false\"\n }\n \n@@ -1599,9 +1599,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidUpcastComparisons {\n ///\n /// pub foo(map: &mut HashMap<i32, i32>) { .. }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub IMPLICIT_HASHER,\n-    Warn,\n+    style,\n     \"missing generalization over different hashers\"\n }\n "}, {"sha": "21c6b5211531973f85552bf43768c306f8b77994", "filename": "clippy_lints/src/unicode.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funicode.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -14,9 +14,9 @@ use utils::{is_allowed, snippet, span_help_and_lint};\n ///\n /// **Example:** You don't see it, but there may be a zero-width space\n /// somewhere in this text.\n-declare_lint! {\n+declare_clippy_lint! {\n     pub ZERO_WIDTH_SPACE,\n-    Deny,\n+    correctness,\n     \"using a zero-width space in a string literal, which is confusing\"\n }\n \n@@ -34,9 +34,9 @@ declare_lint! {\n /// ```rust\n /// let x = \"H\u00e4?\"\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub NON_ASCII_LITERAL,\n-    Allow,\n+    pedantic,\n     \"using any literal non-ASCII chars in a string literal instead of \\\n      using the `\\\\u` escape\"\n }\n@@ -52,9 +52,9 @@ declare_lint! {\n ///\n /// **Example:** You may not see it, but \u201ca\u0300\u201d and \u201c\u00e0\u201d aren't the same string. The\n /// former when escaped is actually `\"a\\u{300}\"` while the latter is `\"\\u{e0}\"`.\n-declare_lint! {\n+declare_clippy_lint! {\n     pub UNICODE_NOT_NFC,\n-    Allow,\n+    pedantic,\n     \"using a unicode literal not in NFC normal form (see \\\n      [unicode tr15](http://www.unicode.org/reports/tr15/) for further information)\"\n }"}, {"sha": "f852784545c693e790f6f20b4ad8e2d662448156", "filename": "clippy_lints/src/unsafe_removed_from_name.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Funsafe_removed_from_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Funsafe_removed_from_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funsafe_removed_from_name.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -19,9 +19,9 @@ use utils::span_lint;\n /// extern crate crossbeam;\n /// use crossbeam::{spawn_unsafe as spawn};\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub UNSAFE_REMOVED_FROM_NAME,\n-    Warn,\n+    style,\n     \"`unsafe` removed from API names on import\"\n }\n "}, {"sha": "0c28e9e74ecfd62053f8e1125fa9445a03f1ed93", "filename": "clippy_lints/src/unused_io_amount.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Funused_io_amount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Funused_io_amount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_io_amount.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -23,9 +23,9 @@ use utils::{is_try, match_qpath, match_trait_method, paths, span_lint};\n ///     Ok(())\n /// }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub UNUSED_IO_AMOUNT,\n-    Deny,\n+    correctness,\n     \"unused written/read amount\"\n }\n "}, {"sha": "b009420bdb619da750c1a9c293ccd5ceea7e16c1", "filename": "clippy_lints/src/unused_label.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Funused_label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Funused_label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_label.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -21,9 +21,9 @@ use utils::{in_macro, span_lint};\n ///         if i > 4 { continue }\n ///     }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub UNUSED_LABEL,\n-    Warn,\n+    complexity,\n     \"unused labels\"\n }\n "}, {"sha": "86ce57ca0bd02e3c5e7d21acd752d0d8bfb66d8d", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -32,9 +32,9 @@ use syntax_pos::symbol::keywords::SelfType;\n ///     }\n /// }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub USE_SELF,\n-    Allow,\n+    pedantic,\n     \"Unnecessary structure name repetition whereas `Self` is applicable\"\n }\n "}, {"sha": "192d6671bcba7975b4fbbde58248b097406f214b", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -38,9 +38,9 @@ use std::collections::HashMap;\n ///     }\n /// }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub LINT_AUTHOR,\n-    Warn,\n+    internal_warn,\n     \"helper for writing lints\"\n }\n "}, {"sha": "e8d07fbed0d3cca5f70d0072265ed0e3cd03c92b", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -24,9 +24,9 @@ use syntax::attr;\n /// visibility inherited from outer item\n /// extern crate dylib source: \"/path/to/foo.so\"\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub DEEP_CODE_INSPECTION,\n-    Warn,\n+    internal_warn,\n     \"helper to dump info about code\"\n }\n "}, {"sha": "666db3e0692d34920f66672e7166fb2f3e71ab2c", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -15,9 +15,9 @@ use std::collections::{HashMap, HashSet};\n /// **Known problems:** None.\n ///\n /// **Example:** Wrong ordering of the util::paths constants.\n-declare_lint! {\n+declare_clippy_lint! {\n     pub CLIPPY_LINTS_INTERNAL,\n-    Allow,\n+    internal,\n     \"various things that will negatively affect your clippy experience\"\n }\n \n@@ -45,9 +45,9 @@ declare_lint! {\n ///     }\n /// }\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub LINT_WITHOUT_LINT_PASS,\n-    Warn,\n+    internal,\n     \"declaring a lint without associating it in a LintPass\"\n }\n "}, {"sha": "c98cd8719f10e9d4c55f91db202abd8e746d8ab3", "filename": "clippy_lints/src/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -16,9 +16,9 @@ use consts::constant;\n /// ```rust,ignore\n /// foo(&vec![1, 2])\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub USELESS_VEC,\n-    Warn,\n+    perf,\n     \"useless `vec!`\"\n }\n "}, {"sha": "16c12702c6c54e980e0a1d1658a946742431329d", "filename": "clippy_lints/src/zero_div_zero.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fzero_div_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/clippy_lints%2Fsrc%2Fzero_div_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fzero_div_zero.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -14,9 +14,9 @@ use utils::span_help_and_lint;\n /// ```rust\n /// 0.0f32 / 0.0\n /// ```\n-declare_lint! {\n+declare_clippy_lint! {\n     pub ZERO_DIVIDED_BY_ZERO,\n-    Warn,\n+    complexity,\n     \"usage of `0.0 / 0.0` to obtain NaN instead of std::f32::NaN or std::f64::NaN\"\n }\n "}, {"sha": "72b2f7a3942d35c010fb85522b15c43feaf29e15", "filename": "tests/ui/absurd-extreme-comparisons.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/tests%2Fui%2Fabsurd-extreme-comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/tests%2Fui%2Fabsurd-extreme-comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fabsurd-extreme-comparisons.stderr?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -141,7 +141,7 @@ error: <-comparison of unit values detected. This will always be false\n 31 |     () < {};\n    |     ^^^^^^^\n    |\n-   = note: `-D unit-cmp` implied by `-D warnings`\n+   = note: #[deny(unit_cmp)] on by default\n \n error: aborting due to 18 previous errors\n "}, {"sha": "e1a4a42914c3730da92966e89ea33c63663730f4", "filename": "tests/ui/bit_masks.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/tests%2Fui%2Fbit_masks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/tests%2Fui%2Fbit_masks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbit_masks.stderr?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -12,7 +12,7 @@ error: this operation will always return zero. This is likely not the intended o\n 12 |     x & 0 == 0;\n    |     ^^^^^\n    |\n-   = note: `-D erasing-op` implied by `-D warnings`\n+   = note: #[deny(erasing_op)] on by default\n \n error: incompatible bit mask: `_ & 2` can never be equal to `1`\n   --> $DIR/bit_masks.rs:15:5"}, {"sha": "0e90f6963574100590f9d7b32c2e803037bcb0cc", "filename": "tests/ui/cstring.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/tests%2Fui%2Fcstring.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/tests%2Fui%2Fcstring.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcstring.stderr?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -4,7 +4,7 @@ error: you are getting the inner pointer of a temporary `CString`\n 7 |     CString::new(\"foo\").unwrap().as_ptr();\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n-  = note: `-D temporary-cstring-as-ptr` implied by `-D warnings`\n+  = note: #[deny(temporary_cstring_as_ptr)] on by default\n   = note: that pointer will be invalid outside this expression\n help: assign the `CString` to a variable to extend its lifetime\n  --> $DIR/cstring.rs:7:5"}, {"sha": "f43b8c382a4afdfb8f5214c25dbcc870f81e2d5e", "filename": "tests/ui/derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/tests%2Fui%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/tests%2Fui%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderive.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -1,9 +1,9 @@\n \n \n-\n #![feature(untagged_unions)]\n \n #![allow(dead_code)]\n+#![warn(expl_impl_clone_on_copy)]\n \n use std::hash::{Hash, Hasher};\n "}, {"sha": "cbe3fe1029dc959161017d0f5e3ac3fb97e2ba4d", "filename": "tests/ui/derive.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/tests%2Fui%2Fderive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/tests%2Fui%2Fderive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderive.stderr?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -4,7 +4,7 @@ error: you are deriving `Hash` but have implemented `PartialEq` explicitly\n 17 | #[derive(Hash)]\n    |          ^^^^\n    |\n-   = note: `-D derive-hash-xor-eq` implied by `-D warnings`\n+   = note: #[deny(derive_hash_xor_eq)] on by default\n note: `PartialEq` implemented here\n   --> $DIR/derive.rs:20:1\n    |"}, {"sha": "59f0d3fe39b5574ce8f581109951cd56cedf315b", "filename": "tests/ui/dlist.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/tests%2Fui%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/tests%2Fui%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdlist.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -2,7 +2,7 @@\n #![feature(associated_type_defaults)]\n \n \n-#![warn(clippy)]\n+#![warn(linkedlist)]\n #![allow(dead_code, needless_pass_by_value)]\n \n extern crate alloc;"}, {"sha": "73dd8d02877675d38f067991f5fe5e04752f49f3", "filename": "tests/ui/double_comparison.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/tests%2Fui%2Fdouble_comparison.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/tests%2Fui%2Fdouble_comparison.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdouble_comparison.stderr?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -4,7 +4,7 @@ error: This binary expression can be simplified\n 4 |     if x == y || x < y {\n   |        ^^^^^^^^^^^^^^^ help: try: `x <= y`\n   |\n-  = note: #[deny(double_comparisons)] on by default\n+  = note: `-D double-comparisons` implied by `-D warnings`\n \n error: This binary expression can be simplified\n  --> $DIR/double_comparison.rs:7:8"}, {"sha": "d24fd925e6da44ce03778278668c155c65b2da1c", "filename": "tests/ui/infinite_loop.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/tests%2Fui%2Finfinite_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/tests%2Fui%2Finfinite_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finfinite_loop.stderr?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -4,7 +4,7 @@ error: Variable in the condition are not mutated in the loop body. This either l\n 14 |     while y < 10 {\n    |           ^^^^^^\n    |\n-   = note: `-D while-immutable-condition` implied by `-D warnings`\n+   = note: #[deny(while_immutable_condition)] on by default\n \n error: Variable in the condition are not mutated in the loop body. This either leads to an infinite or to a never running loop.\n   --> $DIR/infinite_loop.rs:19:11"}, {"sha": "f84207385265f56c4afa10574f4f17f851eb473a", "filename": "tests/ui/invalid_ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/tests%2Fui%2Finvalid_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/tests%2Fui%2Finvalid_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finvalid_ref.stderr?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -4,7 +4,7 @@ error: reference to zeroed memory\n 27 |     let ref_zero: &T = std::mem::zeroed();     // warning\n    |                        ^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D invalid-ref` implied by `-D warnings`\n+   = note: #[deny(invalid_ref)] on by default\n    = help: Creation of a null reference is undefined behavior; see https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n \n error: reference to zeroed memory"}, {"sha": "29c93e745b3e021688ac8b1e9fecb2d1c85372a6", "filename": "tests/ui/lint_pass.rs", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/411d9c76514356eee5c3788b7bd8136ed336c627/tests%2Fui%2Flint_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/411d9c76514356eee5c3788b7bd8136ed336c627/tests%2Fui%2Flint_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint_pass.rs?ref=411d9c76514356eee5c3788b7bd8136ed336c627", "patch": "@@ -1,24 +0,0 @@\n-\n-#![feature(rustc_private)]\n-#![feature(macro_vis_matcher)]\n-\n-#![warn(lint_without_lint_pass)]\n-\n-#[macro_use] extern crate rustc;\n-\n-use rustc::lint::{LintPass, LintArray};\n-\n-declare_lint! { GOOD_LINT, Warn, \"good lint\" }\n-declare_lint! { MISSING_LINT, Warn, \"missing lint\" }\n-\n-pub struct Pass;\n-\n-impl LintPass for Pass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array![GOOD_LINT]\n-    }\n-}\n-\n-fn main() {\n-    let _ = MISSING_LINT;\n-}"}, {"sha": "2f9a6813b96d097a1ac7a86fe4774e26130ccd3f", "filename": "tests/ui/lint_pass.stderr", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/411d9c76514356eee5c3788b7bd8136ed336c627/tests%2Fui%2Flint_pass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/411d9c76514356eee5c3788b7bd8136ed336c627/tests%2Fui%2Flint_pass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint_pass.stderr?ref=411d9c76514356eee5c3788b7bd8136ed336c627", "patch": "@@ -1,10 +0,0 @@\n-error: the lint `MISSING_LINT` is not added to any `LintPass`\n-  --> $DIR/lint_pass.rs:12:1\n-   |\n-12 | declare_lint! { MISSING_LINT, Warn, \"missing lint\" }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `-D lint-without-lint-pass` implied by `-D warnings`\n-\n-error: aborting due to previous error\n-"}, {"sha": "8b1ee1fdcd2df0cc5ae4a45344a07c79476e85db", "filename": "tests/ui/matches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/tests%2Fui%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/tests%2Fui%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatches.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -4,7 +4,7 @@\n \n #![warn(clippy)]\n #![allow(unused, if_let_redundant_pattern_matching)]\n-#![warn(single_match_else)]\n+#![warn(single_match_else, match_same_arms)]\n \n use std::borrow::Cow;\n "}, {"sha": "ab207eb32deb3480cb3425bc2d3b0f8ba059ba80", "filename": "tests/ui/matches.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/tests%2Fui%2Fmatches.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/tests%2Fui%2Fmatches.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatches.stderr?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -56,6 +56,14 @@ error: you seem to be trying to use match for destructuring a single pattern. Co\n 78 | |     };\n    | |_____^ help: try this: `if let Cow::Borrowed(..) = c { dummy() }`\n \n+error: this boolean expression can be simplified\n+   --> $DIR/matches.rs:117:11\n+    |\n+117 |     match test && test {\n+    |           ^^^^^^^^^^^^ help: try: `test`\n+    |\n+    = note: `-D nonminimal-bool` implied by `-D warnings`\n+\n error: you seem to be trying to match on a boolean expression\n   --> $DIR/matches.rs:96:5\n    |\n@@ -461,5 +469,5 @@ error: use as_mut() instead\n 329 | |     };\n     | |_____^ help: try this: `mut_owned.as_mut()`\n \n-error: aborting due to 37 previous errors\n+error: aborting due to 38 previous errors\n "}, {"sha": "65cac8ec4ff7351b4ee6d15cf40139b414428f1d", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -1,7 +1,7 @@\n \n #![feature(const_fn)]\n \n-#![warn(clippy, clippy_pedantic)]\n+#![warn(clippy, clippy_pedantic, option_unwrap_used)]\n #![allow(blacklisted_name, unused, print_stdout, non_ascii_literal, new_without_default,\n     new_without_default_derive, missing_docs_in_private_items, needless_pass_by_value)]\n "}, {"sha": "664be379e357942ae9ab36e34d2b4cfe2662d5f8", "filename": "tests/ui/never_loop.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/tests%2Fui%2Fnever_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/tests%2Fui%2Fnever_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnever_loop.stderr?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -10,7 +10,7 @@ error: this loop never actually loops\n 13 | |     }\n    | |_____^\n    |\n-   = note: `-D never-loop` implied by `-D warnings`\n+   = note: #[deny(never_loop)] on by default\n \n error: this loop never actually loops\n   --> $DIR/never_loop.rs:28:5"}, {"sha": "79c1030d48be8fac16a2899802e9b5d70600882a", "filename": "tests/ui/shadow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/tests%2Fui%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/tests%2Fui%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshadow.rs?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -1,7 +1,7 @@\n \n \n \n-#![warn(clippy, clippy_pedantic)]\n+#![warn(clippy, clippy_pedantic, shadow_same, shadow_reuse, shadow_unrelated)]\n #![allow(unused_parens, unused_variables, missing_docs_in_private_items)]\n \n fn id<T>(x: T) -> T { x }"}, {"sha": "8130b1cb31abeb86377001387a4d6e636b44a49b", "filename": "tests/ui/suspicious_arithmetic_impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/tests%2Fui%2Fsuspicious_arithmetic_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/tests%2Fui%2Fsuspicious_arithmetic_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuspicious_arithmetic_impl.stderr?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -12,7 +12,7 @@ error: Suspicious use of binary operator in `AddAssign` impl\n 20 |         *self = *self - other;\n    |                       ^\n    |\n-   = note: `-D suspicious-op-assign-impl` implied by `-D warnings`\n+   = note: #[deny(suspicious_op_assign_impl)] on by default\n \n error: aborting due to 2 previous errors\n "}, {"sha": "3c1ce9080229cc5b5c130cad57b25a6000338344", "filename": "tests/ui/unnecessary_clone.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/tests%2Fui%2Funnecessary_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/tests%2Fui%2Funnecessary_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_clone.stderr?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -62,7 +62,7 @@ error: using `clone` on a double-reference; this will copy the reference instead\n 55 |     let z: &Vec<_> = y.clone();\n    |                      ^^^^^^^^^\n    |\n-   = note: `-D clone-double-ref` implied by `-D warnings`\n+   = note: #[deny(clone_double_ref)] on by default\n help: try dereferencing it\n    |\n 55 |     let z: &Vec<_> = &(*y).clone();"}, {"sha": "f1788fc9ec516cc4659932abb7dfd942fa118998", "filename": "tests/ui/zero_div_zero.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/tests%2Fui%2Fzero_div_zero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/tests%2Fui%2Fzero_div_zero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fzero_div_zero.stderr?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -4,7 +4,7 @@ error: equal expressions as operands to `/`\n 7 |     let nan = 0.0 / 0.0;\n   |               ^^^^^^^^^\n   |\n-  = note: `-D eq-op` implied by `-D warnings`\n+  = note: #[deny(eq_op)] on by default\n \n error: constant division of 0.0 with 0.0 will always result in NaN\n  --> $DIR/zero_div_zero.rs:7:15"}, {"sha": "1fddcbdc3fad026b76ce2d50079ec6d1d2241f1a", "filename": "util/lintlib.py", "status": "modified", "additions": 53, "deletions": 29, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/util%2Flintlib.py", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/util%2Flintlib.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Flintlib.py?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -12,14 +12,27 @@\n \n lintname_re = re.compile(r'''pub\\s+([A-Z_][A-Z_0-9]*)''')\n level_re = re.compile(r'''(Forbid|Deny|Warn|Allow)''')\n+group_re = re.compile(r'''([a-z_][a-z_0-9]+)''')\n conf_re = re.compile(r'''define_Conf! {\\n([^}]*)\\n}''', re.MULTILINE)\n confvar_re = re.compile(\n     r'''/// Lint: (\\w+). (.*).*\\n\\s*\\([^,]+,\\s+\"([^\"]+)\",\\s+([^=\\)]+)=>\\s+(.*)\\),''', re.MULTILINE)\n \n+lint_levels = {\n+    \"correctness\": 'Deny',\n+    \"style\": 'Warn',\n+    \"complexity\": 'Warn',\n+    \"perf\": 'Warn',\n+    \"restriction\": 'Allow',\n+    \"pedantic\": 'Allow',\n+    \"nursery\": 'Allow',\n+}\n \n def parse_lints(lints, filepath):\n     last_comment = []\n     comment = True\n+    clippy = False\n+    deprecated = False\n+    name = \"\"\n \n     with open(filepath) as fp:\n         for line in fp:\n@@ -29,43 +42,54 @@ def parse_lints(lints, filepath):\n                 elif line.startswith(\"///\"):\n                     last_comment.append(line[3:])\n                 elif line.startswith(\"declare_lint!\"):\n+                    import sys\n+                    print \"don't use `declare_lint!` in clippy, use `declare_clippy_lint!` instead\"\n+                    sys.exit(42)\n+                elif line.startswith(\"declare_clippy_lint!\"):\n                     comment = False\n                     deprecated = False\n-                    restriction = False\n-                elif line.startswith(\"declare_restriction_lint!\"):\n-                    comment = False\n-                    deprecated = False\n-                    restriction = True\n+                    clippy = True\n+                    name = \"\"\n                 elif line.startswith(\"declare_deprecated_lint!\"):\n                     comment = False\n                     deprecated = True\n+                    clippy = False\n                 else:\n                     last_comment = []\n             if not comment:\n-                m = lintname_re.search(line)\n-                if m:\n-                    name = m.group(1).lower()\n-\n-                    if deprecated:\n-                        level = \"Deprecated\"\n-                    elif restriction:\n-                        level = \"Allow\"\n-                    else:\n-                        while True:\n-                            m = level_re.search(line)\n-                            if m:\n-                                level = m.group(0)\n-                                break\n-                            line = next(fp)\n-\n-                    log.info(\"found %s with level %s in %s\",\n-                             name, level, filepath)\n-                    lints.append(Lint(name, level, last_comment, filepath))\n-                    last_comment = []\n-                    comment = True\n-                if \"}\" in line:\n-                    log.warn(\"Warning: missing Lint-Name in %s\", filepath)\n-                    comment = True\n+                if name:\n+                    g = group_re.search(line)\n+                    if g:\n+                        group = g.group(1).lower()\n+                        level = lint_levels[group]\n+                        log.info(\"found %s with level %s in %s\",\n+                                name, level, filepath)\n+                        lints.append(Lint(name, level, last_comment, filepath, group))\n+                        last_comment = []\n+                        comment = True\n+                else:\n+                    m = lintname_re.search(line)\n+                    if m:\n+                        name = m.group(1).lower()\n+\n+                        if deprecated:\n+                            level = \"Deprecated\"\n+                        else:\n+                            while True:\n+                                m = level_re.search(line)\n+                                if m:\n+                                    level = m.group(0)\n+                                    break\n+                                line = next(fp)\n+                        if not clippy:\n+                            log.info(\"found %s with level %s in %s\",\n+                                    name, level, filepath)\n+                            lints.append(Lint(name, level, last_comment, filepath, \"deprecated\"))\n+                            last_comment = []\n+                            comment = True\n+                    if \"}\" in line:\n+                        log.warn(\"Warning: missing Lint-Name in %s\", filepath)\n+                        comment = True\n \n \n def parse_configs(path):"}, {"sha": "58caa5dac0d2a3d180f09e36693202d868a00eb0", "filename": "util/update_lints.py", "status": "modified", "additions": 52, "deletions": 43, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/a47734c41d5ebc73bf0b457cf8f9075841132c28/util%2Fupdate_lints.py", "raw_url": "https://github.com/rust-lang/rust/raw/a47734c41d5ebc73bf0b457cf8f9075841132c28/util%2Fupdate_lints.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fupdate_lints.py?ref=a47734c41d5ebc73bf0b457cf8f9075841132c28", "patch": "@@ -8,22 +8,16 @@\n import re\n import sys\n \n-declare_lint_re = re.compile(r'''\n-    declare_lint! \\s* [{(] \\s*\n-    pub \\s+ (?P<name>[A-Z_][A-Z_0-9]*) \\s*,\\s*\n-    (?P<level>Forbid|Deny|Warn|Allow) \\s*,\\s*\n-    \" (?P<desc>(?:[^\"\\\\]+|\\\\.)*) \" \\s* [})]\n-''', re.VERBOSE | re.DOTALL)\n-\n declare_deprecated_lint_re = re.compile(r'''\n     declare_deprecated_lint! \\s* [{(] \\s*\n     pub \\s+ (?P<name>[A-Z_][A-Z_0-9]*) \\s*,\\s*\n     \" (?P<desc>(?:[^\"\\\\]+|\\\\.)*) \" \\s* [})]\n ''', re.VERBOSE | re.DOTALL)\n \n-declare_restriction_lint_re = re.compile(r'''\n-    declare_restriction_lint! \\s* [{(] \\s*\n+declare_clippy_lint_re = re.compile(r'''\n+    declare_clippy_lint! \\s* [{(] \\s*\n     pub \\s+ (?P<name>[A-Z_][A-Z_0-9]*) \\s*,\\s*\n+    (?P<cat>[a-z_]+) \\s*,\\s*\n     \" (?P<desc>(?:[^\"\\\\]+|\\\\.)*) \" \\s* [})]\n ''', re.VERBOSE | re.DOTALL)\n \n@@ -32,32 +26,26 @@\n docs_link = 'https://rust-lang-nursery.github.io/rust-clippy/master/index.html'\n \n \n-def collect(lints, deprecated_lints, restriction_lints, fn):\n+def collect(deprecated_lints, clippy_lints, fn):\n     \"\"\"Collect all lints from a file.\n \n     Adds entries to the lints list as `(module, name, level, desc)`.\n     \"\"\"\n     with open(fn) as fp:\n         code = fp.read()\n-    for match in declare_lint_re.finditer(code):\n-        # remove \\-newline escapes from description string\n-        desc = nl_escape_re.sub('', match.group('desc'))\n-        lints.append((os.path.splitext(os.path.basename(fn))[0],\n-                      match.group('name').lower(),\n-                      match.group('level').lower(),\n-                      desc.replace('\\\\\"', '\"')))\n \n     for match in declare_deprecated_lint_re.finditer(code):\n         # remove \\-newline escapes from description string\n         desc = nl_escape_re.sub('', match.group('desc'))\n         deprecated_lints.append((os.path.splitext(os.path.basename(fn))[0],\n                                 match.group('name').lower(),\n                                 desc.replace('\\\\\"', '\"')))\n-\n-    for match in declare_restriction_lint_re.finditer(code):\n+    \n+    for match in declare_clippy_lint_re.finditer(code):\n         # remove \\-newline escapes from description string\n         desc = nl_escape_re.sub('', match.group('desc'))\n-        restriction_lints.append((os.path.splitext(os.path.basename(fn))[0],\n+        cat = match.group('cat')\n+        clippy_lints[cat].append((os.path.splitext(os.path.basename(fn))[0],\n                                   match.group('name').lower(),\n                                   \"allow\",\n                                   desc.replace('\\\\\"', '\"')))\n@@ -100,6 +88,8 @@ def replace_region(fn, region_start, region_end, callback,\n     with open(fn) as fp:\n         lines = list(fp)\n \n+    found = False\n+\n     # replace old region with new region\n     new_lines = []\n     in_old_region = False\n@@ -114,9 +104,13 @@ def replace_region(fn, region_start, region_end, callback,\n                 new_lines.append(line)\n             # old region starts here\n             in_old_region = True\n+            found = True\n         else:\n             new_lines.append(line)\n \n+    if not found:\n+        print \"regex \" + region_start + \" not found\"\n+\n     # write back to file\n     if write_back:\n         with open(fn, 'w') as fp:\n@@ -127,9 +121,16 @@ def replace_region(fn, region_start, region_end, callback,\n \n \n def main(print_only=False, check=False):\n-    lints = []\n     deprecated_lints = []\n-    restriction_lints = []\n+    clippy_lints = {\n+        \"correctness\": [],\n+        \"style\": [],\n+        \"complexity\": [],\n+        \"perf\": [],\n+        \"restriction\": [],\n+        \"pedantic\": [],\n+        \"nursery\": [],\n+    }\n \n     # check directory\n     if not os.path.isfile('clippy_lints/src/lib.rs'):\n@@ -139,7 +140,7 @@ def main(print_only=False, check=False):\n     # collect all lints from source files\n     for fn in os.listdir('clippy_lints/src'):\n         if fn.endswith('.rs'):\n-            collect(lints, deprecated_lints, restriction_lints,\n+            collect(deprecated_lints, clippy_lints,\n                     os.path.join('clippy_lints', 'src', fn))\n \n     # determine version\n@@ -152,16 +153,29 @@ def main(print_only=False, check=False):\n             print('Error: version not found in Cargo.toml!')\n             return\n \n+    all_lints = []\n+    clippy_lint_groups = [\n+        \"correctness\",\n+        \"style\",\n+        \"complexity\",\n+        \"perf\",\n+    ]\n+    clippy_lint_list = []\n+    for x in clippy_lint_groups:\n+        clippy_lint_list += clippy_lints[x]\n+    for _, value in clippy_lints.iteritems():\n+        all_lints += value\n+\n     if print_only:\n-        sys.stdout.writelines(gen_table(lints + restriction_lints))\n+        sys.stdout.writelines(gen_table(all_lints))\n         return\n \n     # update the lint counter in README.md\n     changed = replace_region(\n         'README.md',\n-        r'^\\[There are \\d+ lints included in this crate\\]\\(https://rust-lang-nursery.github.io/rust-clippy/master/index.html\\)$', \"\",\n-        lambda: ['[There are %d lints included in this crate](https://rust-lang-nursery.github.io/rust-clippy/master/index.html)\\n' %\n-                 (len(lints) + len(restriction_lints))],\n+        r'^\\[There are \\d+ lints included in this crate!\\]\\(https://rust-lang-nursery.github.io/rust-clippy/master/index.html\\)$', \"\",\n+        lambda: ['[There are %d lints included in this crate!](https://rust-lang-nursery.github.io/rust-clippy/master/index.html)\\n' %\n+                 (len(all_lints))],\n         write_back=not check)\n \n     # update the links in the CHANGELOG\n@@ -170,7 +184,7 @@ def main(print_only=False, check=False):\n         \"<!-- begin autogenerated links to wiki -->\",\n         \"<!-- end autogenerated links to wiki -->\",\n         lambda: [\"[`{0}`]: {1}#{0}\\n\".format(l[1], docs_link) for l in\n-                 sorted(lints + restriction_lints + deprecated_lints,\n+                 sorted(all_lints + deprecated_lints,\n                         key=lambda l: l[1])],\n         replace_start=False, write_back=not check)\n \n@@ -190,34 +204,29 @@ def main(print_only=False, check=False):\n     # update the `pub mod` list\n     changed |= replace_region(\n         'clippy_lints/src/lib.rs', r'begin lints modules', r'end lints modules',\n-        lambda: gen_mods(lints + restriction_lints),\n+        lambda: gen_mods(all_lints),\n         replace_start=False, write_back=not check)\n \n-    # same for \"clippy\" lint collection\n+    # same for \"clippy_*\" lint collections\n     changed |= replace_region(\n         'clippy_lints/src/lib.rs', r'reg.register_lint_group\\(\"clippy\"', r'\\]\\);',\n-        lambda: gen_group(lints, levels=('warn', 'deny')),\n+        lambda: gen_group(clippy_lint_list),\n         replace_start=False, write_back=not check)\n \n+    for key, value in clippy_lints.iteritems():\n+        # same for \"clippy_*\" lint collections\n+        changed |= replace_region(\n+            'clippy_lints/src/lib.rs', r'reg.register_lint_group\\(\"clippy_' + key + r'\"', r'\\]\\);',\n+            lambda: gen_group(value),\n+            replace_start=False, write_back=not check)\n+\n     # same for \"deprecated\" lint collection\n     changed |= replace_region(\n         'clippy_lints/src/lib.rs', r'let mut store', r'end deprecated lints',\n         lambda: gen_deprecated(deprecated_lints),\n         replace_start=False,\n         write_back=not check)\n \n-    # same for \"clippy_pedantic\" lint collection\n-    changed |= replace_region(\n-        'clippy_lints/src/lib.rs', r'reg.register_lint_group\\(\"clippy_pedantic\"', r'\\]\\);',\n-        lambda: gen_group(lints, levels=('allow',)),\n-        replace_start=False, write_back=not check)\n-\n-    # same for \"clippy_restrictions\" lint collection\n-    changed |= replace_region(\n-        'clippy_lints/src/lib.rs', r'reg.register_lint_group\\(\"clippy_restrictions\"',\n-        r'\\]\\);', lambda: gen_group(restriction_lints),\n-        replace_start=False, write_back=not check)\n-\n     if check and changed:\n         print('Please run util/update_lints.py to regenerate lints lists.')\n         return 1"}]}