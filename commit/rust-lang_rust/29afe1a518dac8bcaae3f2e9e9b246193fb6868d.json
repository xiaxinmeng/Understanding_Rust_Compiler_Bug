{"sha": "29afe1a518dac8bcaae3f2e9e9b246193fb6868d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5YWZlMWE1MThkYWM4YmNhYWUzZjJlOWU5YjI0NjE5M2ZiNjg2OGQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-29T21:17:23Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-29T21:21:39Z"}, "message": "Write metadata for sythesized name/vers items to the crate's link attr\n\nIf the crate doesn't specify it's name or version, the defaults need to be\nexported in the crate metadata", "tree": {"sha": "edd342c44c9111459e086507db773d52502ecd2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/edd342c44c9111459e086507db773d52502ecd2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29afe1a518dac8bcaae3f2e9e9b246193fb6868d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29afe1a518dac8bcaae3f2e9e9b246193fb6868d", "html_url": "https://github.com/rust-lang/rust/commit/29afe1a518dac8bcaae3f2e9e9b246193fb6868d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29afe1a518dac8bcaae3f2e9e9b246193fb6868d/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "308bc31f242d2c1e0e41f5d13a980315b5ce1afb", "url": "https://api.github.com/repos/rust-lang/rust/commits/308bc31f242d2c1e0e41f5d13a980315b5ce1afb", "html_url": "https://github.com/rust-lang/rust/commit/308bc31f242d2c1e0e41f5d13a980315b5ce1afb"}], "stats": {"total": 84, "additions": 83, "deletions": 1}, "files": [{"sha": "2927e77d4b13d8be0629f6aae8e2f13415a73570", "filename": "src/comp/metadata/encoder.rs", "status": "modified", "additions": 66, "deletions": 1, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/29afe1a518dac8bcaae3f2e9e9b246193fb6868d/src%2Fcomp%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29afe1a518dac8bcaae3f2e9e9b246193fb6868d/src%2Fcomp%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fencoder.rs?ref=29afe1a518dac8bcaae3f2e9e9b246193fb6868d", "patch": "@@ -13,6 +13,7 @@ import tags::*;\n import middle::trans::crate_ctxt;\n import middle::trans::node_id_type;\n import middle::ty;\n+import middle::attr;\n \n export def_to_str;\n export hash_path;\n@@ -457,12 +458,76 @@ fn encode_attributes(&ebml::writer ebml_w, &vec[attribute] attrs) {\n     ebml::end_tag(ebml_w);\n }\n \n+// So there's a special crate attribute called 'link' which defines the metadata\n+// that Rust cares about for linking crates. This attribute requires name and\n+// value attributes, so if the user didn't provide them we will throw them in\n+// anyway with default values.\n+fn synthesize_crate_attrs(&@crate_ctxt cx,\n+                          &@crate crate) -> vec[attribute] {\n+\n+    fn synthesize_link_attr(&@crate_ctxt cx,\n+                            &vec[@meta_item] items)\n+        -> attribute {\n+\n+        auto bogus_span = rec(lo = 0u, hi = 0u);\n+\n+        auto name_item_ = meta_name_value(\"name\", cx.link_meta.name);\n+        auto name_item = rec(node=name_item_,\n+                             span=bogus_span);\n+\n+        auto vers_item_ = meta_name_value(\"vers\", cx.link_meta.vers);\n+        auto vers_item = rec(node=vers_item_,\n+                             span=bogus_span);\n+\n+        auto other_items = {\n+            auto tmp = attr::remove_meta_items_by_name(items, \"name\");\n+            attr::remove_meta_items_by_name(tmp, \"vers\")\n+        };\n+\n+        auto meta_items = [@name_item] + [@vers_item] + other_items;\n+\n+        auto link_item_ = meta_list(\"link\", meta_items);\n+        auto link_item = rec(node=link_item_,\n+                             span=bogus_span);\n+\n+        auto attr_ = rec(style = attr_inner,\n+                         value = link_item);\n+        auto attr = rec(node=attr_,\n+                        span=bogus_span);\n+\n+        ret attr;\n+    }\n+\n+    let vec[attribute] attrs = [];\n+    auto found_link_attr = false;\n+    for (attribute attr in crate.node.attrs) {\n+        attrs += if (attr::get_attr_name(attr) != \"link\") {\n+            [attr]\n+        } else {\n+            alt (attr.node.value.node) {\n+                case (meta_list(?n, ?l)) {\n+                    found_link_attr = true;\n+                    [synthesize_link_attr(cx, l)]\n+                }\n+                case (_) { [attr] }\n+            }\n+        }\n+    }\n+\n+    if (!found_link_attr) {\n+        attrs += [synthesize_link_attr(cx, [])];\n+    }\n+\n+    ret attrs;\n+}\n+\n fn encode_metadata(&@crate_ctxt cx, &@crate crate) -> str {\n     auto string_w = io::string_writer();\n     auto buf_w = string_w.get_writer().get_buf_writer();\n     auto ebml_w = ebml::create_writer(buf_w);\n \n-    encode_attributes(ebml_w, crate.node.attrs);\n+    auto crate_attrs = synthesize_crate_attrs(cx, crate);\n+    encode_attributes(ebml_w, crate_attrs);\n     // Encode and index the paths.\n \n     ebml::start_tag(ebml_w, tag_paths);"}, {"sha": "152f81c5b7aa2c74ee448596edc8699c3f581feb", "filename": "src/comp/middle/attr.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/29afe1a518dac8bcaae3f2e9e9b246193fb6868d/src%2Fcomp%2Fmiddle%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29afe1a518dac8bcaae3f2e9e9b246193fb6868d/src%2Fcomp%2Fmiddle%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fattr.rs?ref=29afe1a518dac8bcaae3f2e9e9b246193fb6868d", "patch": "@@ -10,6 +10,8 @@ export find_attrs_by_name;\n export find_meta_items_by_name;\n export contains;\n export sort_meta_items;\n+export remove_meta_items_by_name;\n+export get_attr_name;\n \n // From a list of crate attributes get only the meta_items that impact crate\n // linkage\n@@ -138,6 +140,21 @@ fn sort_meta_items(&vec[@ast::meta_item] items) -> vec[@ast::meta_item] {\n     ret v2;\n }\n \n+fn remove_meta_items_by_name(&vec[@ast::meta_item] items,\n+                             str name) -> vec[@ast::meta_item] {\n+\n+    auto filter = bind fn(&@ast::meta_item item,\n+                          str name) -> option::t[@ast::meta_item] {\n+        if (get_meta_item_name(item) != name) {\n+            option::some(item)\n+        } else {\n+            option::none\n+        }\n+    } (_, name);\n+\n+    ret vec::filter_map(filter, items);\n+}\n+\n //\n // Local Variables:\n // mode: rust"}]}