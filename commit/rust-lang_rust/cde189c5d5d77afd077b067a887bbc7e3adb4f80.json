{"sha": "cde189c5d5d77afd077b067a887bbc7e3adb4f80", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkZTE4OWM1ZDVkNzdhZmQwNzdiMDY3YTg4N2JiYzdlM2FkYjRmODA=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-10-09T17:57:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-09T17:57:20Z"}, "message": "Merge #6188\n\n6188: Treat `ast::Name` in field patterns as use r=jonas-schievink a=jonas-schievink\n\nbors r+ :robot: \n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "604b171de5aed9d3c4eeb885929b80f60d32397c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/604b171de5aed9d3c4eeb885929b80f60d32397c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cde189c5d5d77afd077b067a887bbc7e3adb4f80", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfgKSACRBK7hj4Ov3rIwAAdHIIAIz1tYDh6I6mKJX2f6O3oh6i\nhnSzCA8KdxD1gHoqy/yeVcNe0+G/rzqJJeKVxt3PKlajm4LiXuOKWQz83edl1dPX\nG0hZXA4pl+yqG2bf1y3Sns+QmWe2uno1Om5Pds5/lDX6rY7rEDi05Yn90dZSHps5\nPviiF4i55YOLecXJd7FU5nVcXHa7Kk7LL8oWwYBVY4g06OvVzdh0H9bxsb8cpwkI\nfRcykQdlrn9dFh7Q5MEYVg5D5P4aArd6G5IE1HrkYJ3Bu302FPIYgjiWlBtDv9y8\nc1zOC8nYw/6z/pzauSUg9z50S9jYe/VtseBR/xV5KWJtpu51OTsfEBjhcy6lfPc=\n=I9vO\n-----END PGP SIGNATURE-----\n", "payload": "tree 604b171de5aed9d3c4eeb885929b80f60d32397c\nparent 95c498d913a2aec1b97ae3613290e7d7a104d0e4\nparent 210456aeaa44bb970bf4ce28eba3e8c6890bc38d\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1602266240 +0000\ncommitter GitHub <noreply@github.com> 1602266240 +0000\n\nMerge #6188\n\n6188: Treat `ast::Name` in field patterns as use r=jonas-schievink a=jonas-schievink\n\nbors r+ :robot: \n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cde189c5d5d77afd077b067a887bbc7e3adb4f80", "html_url": "https://github.com/rust-lang/rust/commit/cde189c5d5d77afd077b067a887bbc7e3adb4f80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cde189c5d5d77afd077b067a887bbc7e3adb4f80/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95c498d913a2aec1b97ae3613290e7d7a104d0e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/95c498d913a2aec1b97ae3613290e7d7a104d0e4", "html_url": "https://github.com/rust-lang/rust/commit/95c498d913a2aec1b97ae3613290e7d7a104d0e4"}, {"sha": "210456aeaa44bb970bf4ce28eba3e8c6890bc38d", "url": "https://api.github.com/repos/rust-lang/rust/commits/210456aeaa44bb970bf4ce28eba3e8c6890bc38d", "html_url": "https://github.com/rust-lang/rust/commit/210456aeaa44bb970bf4ce28eba3e8c6890bc38d"}], "stats": {"total": 162, "additions": 119, "deletions": 43}, "files": [{"sha": "571dd5452c7be542421006a6f17f111d3369b4d3", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/cde189c5d5d77afd077b067a887bbc7e3adb4f80/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cde189c5d5d77afd077b067a887bbc7e3adb4f80/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=cde189c5d5d77afd077b067a887bbc7e3adb4f80", "patch": "@@ -686,6 +686,52 @@ fn g() { f(); }\n         );\n     }\n \n+    #[test]\n+    fn test_find_all_refs_struct_pat() {\n+        check(\n+            r#\"\n+struct S {\n+    field<|>: u8,\n+}\n+\n+fn f(s: S) {\n+    match s {\n+        S { field } => {}\n+    }\n+}\n+\"#,\n+            expect![[r#\"\n+                field RECORD_FIELD FileId(0) 15..24 15..20 Other\n+\n+                FileId(0) 68..73 FieldShorthandForField Read\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_find_all_refs_enum_var_pat() {\n+        check(\n+            r#\"\n+enum En {\n+    Variant {\n+        field<|>: u8,\n+    }\n+}\n+\n+fn f(e: En) {\n+    match e {\n+        En::Variant { field } => {}\n+    }\n+}\n+\"#,\n+            expect![[r#\"\n+                field RECORD_FIELD FileId(0) 32..41 32..37 Other\n+\n+                FileId(0) 102..107 FieldShorthandForField Read\n+            \"#]],\n+        );\n+    }\n+\n     fn check(ra_fixture: &str, expect: Expect) {\n         check_with_scope(ra_fixture, None, expect)\n     }"}, {"sha": "8e3dcd99c4bc419ae92290c08ca0cdae673d8baf", "filename": "crates/ide_db/src/search.rs", "status": "modified", "additions": 73, "deletions": 43, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/cde189c5d5d77afd077b067a887bbc7e3adb4f80/crates%2Fide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cde189c5d5d77afd077b067a887bbc7e3adb4f80/crates%2Fide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsearch.rs?ref=cde189c5d5d77afd077b067a887bbc7e3adb4f80", "patch": "@@ -12,8 +12,9 @@ use once_cell::unsync::Lazy;\n use rustc_hash::FxHashMap;\n use syntax::{ast, match_ast, AstNode, TextRange, TextSize};\n \n+use crate::defs::NameClass;\n use crate::{\n-    defs::{classify_name_ref, Definition, NameRefClass},\n+    defs::{classify_name, classify_name_ref, Definition, NameRefClass},\n     RootDatabase,\n };\n \n@@ -226,9 +227,9 @@ impl<'a> FindUsages<'a> {\n \n         let search_scope = {\n             let base = self.def.search_scope(sema.db);\n-            match self.scope {\n+            match &self.scope {\n                 None => base,\n-                Some(scope) => base.intersection(&scope),\n+                Some(scope) => base.intersection(scope),\n             }\n         };\n \n@@ -251,54 +252,83 @@ impl<'a> FindUsages<'a> {\n                     continue;\n                 }\n \n-                let name_ref: ast::NameRef =\n-                    match sema.find_node_at_offset_with_descend(&tree, offset) {\n-                        Some(it) => it,\n-                        None => continue,\n-                    };\n-\n-                match classify_name_ref(&sema, &name_ref) {\n-                    Some(NameRefClass::Definition(def)) if &def == self.def => {\n-                        let kind = if is_record_lit_name_ref(&name_ref)\n-                            || is_call_expr_name_ref(&name_ref)\n-                        {\n-                            ReferenceKind::StructLiteral\n-                        } else {\n-                            ReferenceKind::Other\n-                        };\n-\n-                        let reference = Reference {\n-                            file_range: sema.original_range(name_ref.syntax()),\n-                            kind,\n-                            access: reference_access(&def, &name_ref),\n-                        };\n-                        if sink(reference) {\n+                match sema.find_node_at_offset_with_descend(&tree, offset) {\n+                    Some(name_ref) => {\n+                        if self.found_name_ref(&name_ref, sink) {\n                             return;\n                         }\n                     }\n-                    Some(NameRefClass::FieldShorthand { local, field }) => {\n-                        let reference = match self.def {\n-                            Definition::Field(_) if &field == self.def => Reference {\n-                                file_range: self.sema.original_range(name_ref.syntax()),\n-                                kind: ReferenceKind::FieldShorthandForField,\n-                                access: reference_access(&field, &name_ref),\n-                            },\n-                            Definition::Local(l) if &local == l => Reference {\n-                                file_range: self.sema.original_range(name_ref.syntax()),\n-                                kind: ReferenceKind::FieldShorthandForLocal,\n-                                access: reference_access(&Definition::Local(local), &name_ref),\n-                            },\n-                            _ => continue, // not a usage\n-                        };\n-                        if sink(reference) {\n-                            return;\n+                    None => match sema.find_node_at_offset_with_descend(&tree, offset) {\n+                        Some(name) => {\n+                            if self.found_name(&name, sink) {\n+                                return;\n+                            }\n                         }\n-                    }\n-                    _ => {} // not a usage\n+                        None => {}\n+                    },\n                 }\n             }\n         }\n     }\n+\n+    fn found_name_ref(\n+        &self,\n+        name_ref: &ast::NameRef,\n+        sink: &mut dyn FnMut(Reference) -> bool,\n+    ) -> bool {\n+        match classify_name_ref(self.sema, &name_ref) {\n+            Some(NameRefClass::Definition(def)) if &def == self.def => {\n+                let kind = if is_record_lit_name_ref(&name_ref) || is_call_expr_name_ref(&name_ref)\n+                {\n+                    ReferenceKind::StructLiteral\n+                } else {\n+                    ReferenceKind::Other\n+                };\n+\n+                let reference = Reference {\n+                    file_range: self.sema.original_range(name_ref.syntax()),\n+                    kind,\n+                    access: reference_access(&def, &name_ref),\n+                };\n+                sink(reference)\n+            }\n+            Some(NameRefClass::FieldShorthand { local, field }) => {\n+                let reference = match self.def {\n+                    Definition::Field(_) if &field == self.def => Reference {\n+                        file_range: self.sema.original_range(name_ref.syntax()),\n+                        kind: ReferenceKind::FieldShorthandForField,\n+                        access: reference_access(&field, &name_ref),\n+                    },\n+                    Definition::Local(l) if &local == l => Reference {\n+                        file_range: self.sema.original_range(name_ref.syntax()),\n+                        kind: ReferenceKind::FieldShorthandForLocal,\n+                        access: reference_access(&Definition::Local(local), &name_ref),\n+                    },\n+                    _ => return false, // not a usage\n+                };\n+                sink(reference)\n+            }\n+            _ => false, // not a usage\n+        }\n+    }\n+\n+    fn found_name(&self, name: &ast::Name, sink: &mut dyn FnMut(Reference) -> bool) -> bool {\n+        match classify_name(self.sema, name) {\n+            Some(NameClass::FieldShorthand { local: _, field }) => {\n+                let reference = match self.def {\n+                    Definition::Field(_) if &field == self.def => Reference {\n+                        file_range: self.sema.original_range(name.syntax()),\n+                        kind: ReferenceKind::FieldShorthandForField,\n+                        // FIXME: mutable patterns should have `Write` access\n+                        access: Some(ReferenceAccess::Read),\n+                    },\n+                    _ => return false, // not a usage\n+                };\n+                sink(reference)\n+            }\n+            _ => false, // not a usage\n+        }\n+    }\n }\n \n fn reference_access(def: &Definition, name_ref: &ast::NameRef) -> Option<ReferenceAccess> {"}]}