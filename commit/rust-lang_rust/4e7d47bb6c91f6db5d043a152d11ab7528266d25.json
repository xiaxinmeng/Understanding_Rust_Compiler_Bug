{"sha": "4e7d47bb6c91f6db5d043a152d11ab7528266d25", "node_id": "C_kwDOAAsO6NoAKDRlN2Q0N2JiNmM5MWY2ZGI1ZDA0M2ExNTJkMTFhYjc1MjgyNjZkMjU", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-01-29T20:10:41Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-02-01T12:11:03Z"}, "message": "Make dead code check a query.", "tree": {"sha": "6b2e6ee3b86790ba76e3c98fceb366e91c5dc4f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b2e6ee3b86790ba76e3c98fceb366e91c5dc4f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e7d47bb6c91f6db5d043a152d11ab7528266d25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e7d47bb6c91f6db5d043a152d11ab7528266d25", "html_url": "https://github.com/rust-lang/rust/commit/4e7d47bb6c91f6db5d043a152d11ab7528266d25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e7d47bb6c91f6db5d043a152d11ab7528266d25/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "312a7995e73e390646bc61920ffead7a640addc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/312a7995e73e390646bc61920ffead7a640addc6", "html_url": "https://github.com/rust-lang/rust/commit/312a7995e73e390646bc61920ffead7a640addc6"}], "stats": {"total": 95, "additions": 62, "deletions": 33}, "files": [{"sha": "7a3d77466c55f4a8636628d55e1fb84366a3ec6c", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4e7d47bb6c91f6db5d043a152d11ab7528266d25/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e7d47bb6c91f6db5d043a152d11ab7528266d25/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=4e7d47bb6c91f6db5d043a152d11ab7528266d25", "patch": "@@ -999,7 +999,8 @@ fn analysis(tcx: TyCtxt<'_>, (): ()) -> Result<()> {\n                         tcx.ensure().check_private_in_public(());\n                     },\n                     {\n-                        sess.time(\"death_checking\", || rustc_passes::dead::check_crate(tcx));\n+                        tcx.hir()\n+                            .par_for_each_module(|module| tcx.ensure().check_mod_deathness(module));\n                     },\n                     {\n                         sess.time(\"unused_lib_feature_checking\", || {"}, {"sha": "73128de9848e0e2ccc3a972fb481380835fbd445", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4e7d47bb6c91f6db5d043a152d11ab7528266d25/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e7d47bb6c91f6db5d043a152d11ab7528266d25/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=4e7d47bb6c91f6db5d043a152d11ab7528266d25", "patch": "@@ -750,6 +750,22 @@ rustc_queries! {\n         desc { |tcx| \"checking liveness of variables in {}\", describe_as_module(key, tcx) }\n     }\n \n+    /// Return the live symbols in the crate for dead code check.\n+    ///\n+    /// The second return value maps from ADTs to ignored derived traits (e.g. Debug and Clone) and\n+    /// their respective impl (i.e., part of the derive macro)\n+    query live_symbols_and_ignored_derived_traits(_: ()) -> (\n+        FxHashSet<LocalDefId>,\n+        FxHashMap<LocalDefId, Vec<(DefId, DefId)>>\n+    ) {\n+        storage(ArenaCacheSelector<'tcx>)\n+        desc { \"find live symbols in crate\" }\n+    }\n+\n+    query check_mod_deathness(key: LocalDefId) -> () {\n+        desc { |tcx| \"checking deathness of variables in {}\", describe_as_module(key, tcx) }\n+    }\n+\n     query check_mod_impl_wf(key: LocalDefId) -> () {\n         desc { |tcx| \"checking that impls are well-formed in {}\", describe_as_module(key, tcx) }\n     }"}, {"sha": "e7e56711b33c5298790980d12e78607ad595c89a", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 33, "deletions": 22, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/4e7d47bb6c91f6db5d043a152d11ab7528266d25/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e7d47bb6c91f6db5d043a152d11ab7528266d25/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=4e7d47bb6c91f6db5d043a152d11ab7528266d25", "patch": "@@ -13,6 +13,7 @@ use rustc_hir::{Node, PatKind, TyKind};\n use rustc_middle::hir::nested_filter;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::middle::privacy;\n+use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, DefIdTree, TyCtxt};\n use rustc_session::lint;\n use rustc_span::symbol::{sym, Symbol};\n@@ -52,7 +53,7 @@ struct MarkSymbolVisitor<'tcx> {\n     // maps from ADTs to ignored derived traits (e.g. Debug and Clone)\n     // and the span of their respective impl (i.e., part of the derive\n     // macro)\n-    ignored_derived_traits: FxHashMap<DefId, Vec<(Span, DefId)>>,\n+    ignored_derived_traits: FxHashMap<LocalDefId, Vec<(DefId, DefId)>>,\n }\n \n impl<'tcx> MarkSymbolVisitor<'tcx> {\n@@ -258,12 +259,11 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n                 if self.tcx.has_attr(trait_of, sym::rustc_trivial_field_reads) {\n                     let trait_ref = self.tcx.impl_trait_ref(impl_of).unwrap();\n                     if let ty::Adt(adt_def, _) = trait_ref.self_ty().kind() {\n-                        let impl_span = self.tcx.def_span(impl_of);\n-                        if let Some(v) = self.ignored_derived_traits.get_mut(&adt_def.did) {\n-                            v.push((impl_span, trait_of));\n-                        } else {\n+                        if let Some(adt_def_id) = adt_def.did.as_local() {\n                             self.ignored_derived_traits\n-                                .insert(adt_def.did, vec![(impl_span, trait_of)]);\n+                                .entry(adt_def_id)\n+                                .or_default()\n+                                .push((trait_of, impl_of));\n                         }\n                     }\n                     return true;\n@@ -563,8 +563,8 @@ impl<'v, 'tcx> ItemLikeVisitor<'v> for LifeSeeder<'tcx> {\n \n fn create_and_seed_worklist<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    access_levels: &privacy::AccessLevels,\n ) -> (Vec<LocalDefId>, FxHashMap<LocalDefId, LocalDefId>) {\n+    let access_levels = &tcx.privacy_access_levels(());\n     let worklist = access_levels\n         .map\n         .iter()\n@@ -584,11 +584,11 @@ fn create_and_seed_worklist<'tcx>(\n     (life_seeder.worklist, life_seeder.struct_constructors)\n }\n \n-fn find_live<'tcx>(\n+fn live_symbols_and_ignored_derived_traits<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    access_levels: &privacy::AccessLevels,\n-) -> (FxHashSet<LocalDefId>, FxHashMap<DefId, Vec<(Span, DefId)>>) {\n-    let (worklist, struct_constructors) = create_and_seed_worklist(tcx, access_levels);\n+    (): (),\n+) -> (FxHashSet<LocalDefId>, FxHashMap<LocalDefId, Vec<(DefId, DefId)>>) {\n+    let (worklist, struct_constructors) = create_and_seed_worklist(tcx);\n     let mut symbol_visitor = MarkSymbolVisitor {\n         worklist,\n         tcx,\n@@ -608,8 +608,8 @@ fn find_live<'tcx>(\n \n struct DeadVisitor<'tcx> {\n     tcx: TyCtxt<'tcx>,\n-    live_symbols: FxHashSet<LocalDefId>,\n-    ignored_derived_traits: FxHashMap<DefId, Vec<(Span, DefId)>>,\n+    live_symbols: &'tcx FxHashSet<LocalDefId>,\n+    ignored_derived_traits: &'tcx FxHashMap<LocalDefId, Vec<(DefId, DefId)>>,\n }\n \n impl<'tcx> DeadVisitor<'tcx> {\n@@ -682,12 +682,10 @@ impl<'tcx> DeadVisitor<'tcx> {\n                 let hir = self.tcx.hir();\n                 if let Some(encl_scope) = hir.get_enclosing_scope(id) {\n                     if let Some(encl_def_id) = hir.opt_local_def_id(encl_scope) {\n-                        if let Some(ign_traits) =\n-                            self.ignored_derived_traits.get(&encl_def_id.to_def_id())\n-                        {\n+                        if let Some(ign_traits) = self.ignored_derived_traits.get(&encl_def_id) {\n                             let traits_str = ign_traits\n                                 .iter()\n-                                .map(|(_, t)| format!(\"`{}`\", self.tcx.item_name(*t)))\n+                                .map(|(trait_id, _)| format!(\"`{}`\", self.tcx.item_name(*trait_id)))\n                                 .collect::<Vec<_>>()\n                                 .join(\" and \");\n                             let plural_s = pluralize!(ign_traits.len());\n@@ -703,7 +701,10 @@ impl<'tcx> DeadVisitor<'tcx> {\n                                 traits_str,\n                                 is_are\n                             );\n-                            let multispan = ign_traits.iter().map(|(s, _)| *s).collect::<Vec<_>>();\n+                            let multispan = ign_traits\n+                                .iter()\n+                                .map(|(_, impl_id)| self.tcx.def_span(*impl_id))\n+                                .collect::<Vec<_>>();\n                             err.span_note(multispan, &msg);\n                         }\n                     }\n@@ -761,6 +762,9 @@ impl<'tcx> Visitor<'tcx> for DeadVisitor<'tcx> {\n         }\n     }\n \n+    // This visitor should only visit a single module at a time.\n+    fn visit_mod(&mut self, _: &'tcx hir::Mod<'tcx>, _: Span, _: hir::HirId) {}\n+\n     fn visit_variant(\n         &mut self,\n         variant: &'tcx hir::Variant<'tcx>,\n@@ -836,9 +840,16 @@ impl<'tcx> Visitor<'tcx> for DeadVisitor<'tcx> {\n     }\n }\n \n-pub fn check_crate(tcx: TyCtxt<'_>) {\n-    let access_levels = &tcx.privacy_access_levels(());\n-    let (live_symbols, ignored_derived_traits) = find_live(tcx, access_levels);\n+fn check_mod_deathness(tcx: TyCtxt<'_>, module: LocalDefId) {\n+    let (live_symbols, ignored_derived_traits) = tcx.live_symbols_and_ignored_derived_traits(());\n     let mut visitor = DeadVisitor { tcx, live_symbols, ignored_derived_traits };\n-    tcx.hir().walk_toplevel_module(&mut visitor);\n+    let (module, _, module_id) = tcx.hir().get_module(module);\n+    // Do not use an ItemLikeVisitor since we may want to skip visiting some items\n+    // when a surrounding one is warned against or `_`.\n+    intravisit::walk_mod(&mut visitor, module, module_id);\n+}\n+\n+pub(crate) fn provide(providers: &mut Providers) {\n+    *providers =\n+        Providers { live_symbols_and_ignored_derived_traits, check_mod_deathness, ..*providers };\n }"}, {"sha": "554701ee90f9b67b924be3f90a998b89e716f11f", "filename": "compiler/rustc_passes/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4e7d47bb6c91f6db5d043a152d11ab7528266d25/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e7d47bb6c91f6db5d043a152d11ab7528266d25/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flib.rs?ref=4e7d47bb6c91f6db5d043a152d11ab7528266d25", "patch": "@@ -44,6 +44,7 @@ mod weak_lang_items;\n pub fn provide(providers: &mut Providers) {\n     check_attr::provide(providers);\n     check_const::provide(providers);\n+    dead::provide(providers);\n     diagnostic_items::provide(providers);\n     entry::provide(providers);\n     lang_items::provide(providers);"}, {"sha": "72e28e7940eb314aa9d169c3cdc52f3f2da1a750", "filename": "src/test/ui/lint/dead-code/lint-dead-code-1.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4e7d47bb6c91f6db5d043a152d11ab7528266d25/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e7d47bb6c91f6db5d043a152d11ab7528266d25/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-1.stderr?ref=4e7d47bb6c91f6db5d043a152d11ab7528266d25", "patch": "@@ -1,21 +1,15 @@\n-error: struct is never constructed: `Bar`\n-  --> $DIR/lint-dead-code-1.rs:12:16\n+error: static is never used: `priv_static`\n+  --> $DIR/lint-dead-code-1.rs:20:1\n    |\n-LL |     pub struct Bar;\n-   |                ^^^\n+LL | static priv_static: isize = 0;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the lint level is defined here\n   --> $DIR/lint-dead-code-1.rs:5:9\n    |\n LL | #![deny(dead_code)]\n    |         ^^^^^^^^^\n \n-error: static is never used: `priv_static`\n-  --> $DIR/lint-dead-code-1.rs:20:1\n-   |\n-LL | static priv_static: isize = 0;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error: constant is never used: `priv_const`\n   --> $DIR/lint-dead-code-1.rs:27:1\n    |\n@@ -64,5 +58,11 @@ error: function is never used: `baz`\n LL | fn baz() -> impl Copy {\n    |    ^^^\n \n+error: struct is never constructed: `Bar`\n+  --> $DIR/lint-dead-code-1.rs:12:16\n+   |\n+LL |     pub struct Bar;\n+   |                ^^^\n+\n error: aborting due to 10 previous errors\n "}]}