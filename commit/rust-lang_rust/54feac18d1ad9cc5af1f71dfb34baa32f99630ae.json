{"sha": "54feac18d1ad9cc5af1f71dfb34baa32f99630ae", "node_id": "C_kwDOAAsO6NoAKDU0ZmVhYzE4ZDFhZDljYzVhZjFmNzFkZmIzNGJhYTMyZjk5NjMwYWU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-07T23:39:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-07T23:39:12Z"}, "message": "Auto merge of #8958 - Alexendoo:simple_filter_map, r=giraffate\n\nLint simple expressions in `manual_filter_map`, `manual_find_map`\n\nchangelog: Lint simple expressions in [`manual_filter_map`], [`manual_find_map`]\n\nThe current comparison rules out `.find(|a| a.is_some()).map(|b| b.unwrap())` because `a` being a reference can effect more complicated expressions, this adds a simple check for that case and adds the necessary derefs\n\nThere's some overlap with `option_filter_map` so `lint_filter_some_map_unwrap` now returns a `bool` to indicate it linted", "tree": {"sha": "1c011cf4638df7923a0d85603abbdbf5a2a143e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c011cf4638df7923a0d85603abbdbf5a2a143e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54feac18d1ad9cc5af1f71dfb34baa32f99630ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54feac18d1ad9cc5af1f71dfb34baa32f99630ae", "html_url": "https://github.com/rust-lang/rust/commit/54feac18d1ad9cc5af1f71dfb34baa32f99630ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54feac18d1ad9cc5af1f71dfb34baa32f99630ae/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2058b927776201244aa903451674275ff17e1d15", "url": "https://api.github.com/repos/rust-lang/rust/commits/2058b927776201244aa903451674275ff17e1d15", "html_url": "https://github.com/rust-lang/rust/commit/2058b927776201244aa903451674275ff17e1d15"}, {"sha": "307b8cd82537b5ac46da2f04cced4e4362835757", "url": "https://api.github.com/repos/rust-lang/rust/commits/307b8cd82537b5ac46da2f04cced4e4362835757", "html_url": "https://github.com/rust-lang/rust/commit/307b8cd82537b5ac46da2f04cced4e4362835757"}], "stats": {"total": 513, "additions": 440, "deletions": 73}, "files": [{"sha": "b694a5a7948197fc24ef7e49ed723302c3706c68", "filename": "clippy_lints/src/methods/filter_map.rs", "status": "modified", "additions": 54, "deletions": 53, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/54feac18d1ad9cc5af1f71dfb34baa32f99630ae/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54feac18d1ad9cc5af1f71dfb34baa32f99630ae/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs?ref=54feac18d1ad9cc5af1f71dfb34baa32f99630ae", "patch": "@@ -8,6 +8,7 @@ use rustc_hir as hir;\n use rustc_hir::def::Res;\n use rustc_hir::{Expr, ExprKind, PatKind, PathSegment, QPath, UnOp};\n use rustc_lint::LateContext;\n+use rustc_middle::ty::adjustment::Adjust;\n use rustc_span::source_map::Span;\n use rustc_span::symbol::{sym, Symbol};\n use std::borrow::Cow;\n@@ -49,35 +50,18 @@ fn is_option_filter_map<'tcx>(cx: &LateContext<'tcx>, filter_arg: &hir::Expr<'_>\n     is_method(cx, map_arg, sym::unwrap) && is_method(cx, filter_arg, sym!(is_some))\n }\n \n-/// lint use of `filter().map()` for `Iterators`\n-fn lint_filter_some_map_unwrap(\n+/// is `filter(|x| x.is_some()).map(|x| x.unwrap())`\n+fn is_filter_some_map_unwrap(\n     cx: &LateContext<'_>,\n     expr: &hir::Expr<'_>,\n     filter_recv: &hir::Expr<'_>,\n     filter_arg: &hir::Expr<'_>,\n     map_arg: &hir::Expr<'_>,\n-    target_span: Span,\n-    methods_span: Span,\n-) {\n+) -> bool {\n     let iterator = is_trait_method(cx, expr, sym::Iterator);\n     let option = is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(filter_recv), sym::Option);\n-    if (iterator || option) && is_option_filter_map(cx, filter_arg, map_arg) {\n-        let msg = \"`filter` for `Some` followed by `unwrap`\";\n-        let help = \"consider using `flatten` instead\";\n-        let sugg = format!(\n-            \"{}\",\n-            reindent_multiline(Cow::Borrowed(\"flatten()\"), true, indent_of(cx, target_span),)\n-        );\n-        span_lint_and_sugg(\n-            cx,\n-            OPTION_FILTER_MAP,\n-            methods_span,\n-            msg,\n-            help,\n-            sugg,\n-            Applicability::MachineApplicable,\n-        );\n-    }\n+\n+    (iterator || option) && is_option_filter_map(cx, filter_arg, map_arg)\n }\n \n /// lint use of `filter().map()` or `find().map()` for `Iterators`\n@@ -93,15 +77,20 @@ pub(super) fn check<'tcx>(\n     map_span: Span,\n     is_find: bool,\n ) {\n-    lint_filter_some_map_unwrap(\n-        cx,\n-        expr,\n-        filter_recv,\n-        filter_arg,\n-        map_arg,\n-        map_span,\n-        filter_span.with_hi(expr.span.hi()),\n-    );\n+    if is_filter_some_map_unwrap(cx, expr, filter_recv, filter_arg, map_arg) {\n+        span_lint_and_sugg(\n+            cx,\n+            OPTION_FILTER_MAP,\n+            filter_span.with_hi(expr.span.hi()),\n+            \"`filter` for `Some` followed by `unwrap`\",\n+            \"consider using `flatten` instead\",\n+            reindent_multiline(Cow::Borrowed(\"flatten()\"), true, indent_of(cx, map_span)).into_owned(),\n+            Applicability::MachineApplicable,\n+        );\n+\n+        return;\n+    }\n+\n     if_chain! {\n             if is_trait_method(cx, map_recv, sym::Iterator);\n \n@@ -118,7 +107,7 @@ pub(super) fn check<'tcx>(\n             // closure ends with is_some() or is_ok()\n             if let PatKind::Binding(_, filter_param_id, _, None) = filter_pat.kind;\n             if let ExprKind::MethodCall(path, [filter_arg], _) = filter_body.value.kind;\n-            if let Some(opt_ty) = cx.typeck_results().expr_ty(filter_arg).ty_adt_def();\n+            if let Some(opt_ty) = cx.typeck_results().expr_ty(filter_arg).peel_refs().ty_adt_def();\n             if let Some(is_result) = if cx.tcx.is_diagnostic_item(sym::Option, opt_ty.did()) {\n                 Some(false)\n             } else if cx.tcx.is_diagnostic_item(sym::Result, opt_ty.did()) {\n@@ -137,6 +126,19 @@ pub(super) fn check<'tcx>(\n             if let ExprKind::MethodCall(seg, [map_arg, ..], _) = map_body.value.kind;\n             if matches!(seg.ident.name, sym::expect | sym::unwrap | sym::unwrap_or);\n \n+            // .filter(..).map(|y| f(y).copied().unwrap())\n+            //                     ~~~~\n+            let map_arg_peeled = match map_arg.kind {\n+                ExprKind::MethodCall(method, [original_arg], _) if acceptable_methods(method) => {\n+                    original_arg\n+                },\n+                _ => map_arg,\n+            };\n+\n+            // .filter(|x| x.is_some()).map(|y| y[.acceptable_method()].unwrap())\n+            let simple_equal = path_to_local_id(filter_arg, filter_param_id)\n+                && path_to_local_id(map_arg_peeled, map_param_id);\n+\n             let eq_fallback = |a: &Expr<'_>, b: &Expr<'_>| {\n                 // in `filter(|x| ..)`, replace `*x` with `x`\n                 let a_path = if_chain! {\n@@ -145,36 +147,35 @@ pub(super) fn check<'tcx>(\n                     then { expr_path } else { a }\n                 };\n                 // let the filter closure arg and the map closure arg be equal\n-                if_chain! {\n-                    if path_to_local_id(a_path, filter_param_id);\n-                    if path_to_local_id(b, map_param_id);\n-                    if cx.typeck_results().expr_ty_adjusted(a) == cx.typeck_results().expr_ty_adjusted(b);\n-                    then {\n-                        return true;\n-                    }\n-                }\n-                false\n-            };\n-\n-            if match map_arg.kind {\n-                ExprKind::MethodCall(method, [original_arg], _) => {\n-                    acceptable_methods(method)\n-                        && SpanlessEq::new(cx).expr_fallback(eq_fallback).eq_expr(filter_arg, original_arg)\n-                },\n-                _ => SpanlessEq::new(cx).expr_fallback(eq_fallback).eq_expr(filter_arg, map_arg)\n+                path_to_local_id(a_path, filter_param_id)\n+                    && path_to_local_id(b, map_param_id)\n+                    && cx.typeck_results().expr_ty_adjusted(a) == cx.typeck_results().expr_ty_adjusted(b)\n             };\n \n+            if simple_equal || SpanlessEq::new(cx).expr_fallback(eq_fallback).eq_expr(filter_arg, map_arg_peeled);\n             then {\n                 let span = filter_span.with_hi(expr.span.hi());\n                 let (filter_name, lint) = if is_find {\n                     (\"find\", MANUAL_FIND_MAP)\n                 } else {\n                     (\"filter\", MANUAL_FILTER_MAP)\n                 };\n-                let msg = format!(\"`{}(..).map(..)` can be simplified as `{0}_map(..)`\", filter_name);\n-                let to_opt = if is_result { \".ok()\" } else { \"\" };\n-                let sugg = format!(\"{}_map(|{}| {}{})\", filter_name, map_param_ident,\n-                    snippet(cx, map_arg.span, \"..\"), to_opt);\n+                let msg = format!(\"`{filter_name}(..).map(..)` can be simplified as `{filter_name}_map(..)`\");\n+                let (to_opt, deref) = if is_result {\n+                    (\".ok()\", String::new())\n+                } else {\n+                    let derefs = cx.typeck_results()\n+                        .expr_adjustments(map_arg)\n+                        .iter()\n+                        .filter(|adj| matches!(adj.kind, Adjust::Deref(_)))\n+                        .count();\n+\n+                    (\"\", \"*\".repeat(derefs))\n+                };\n+                let sugg = format!(\n+                    \"{filter_name}_map(|{map_param_ident}| {deref}{}{to_opt})\",\n+                    snippet(cx, map_arg.span, \"..\"),\n+                );\n                 span_lint_and_sugg(cx, lint, span, &msg, \"try\", sugg, Applicability::MachineApplicable);\n             }\n     }"}, {"sha": "4936dc9b2e0178885f4a160739fa33ddab95ccdb", "filename": "tests/ui/manual_filter_map.fixed", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/54feac18d1ad9cc5af1f71dfb34baa32f99630ae/tests%2Fui%2Fmanual_filter_map.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/54feac18d1ad9cc5af1f71dfb34baa32f99630ae/tests%2Fui%2Fmanual_filter_map.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_filter_map.fixed?ref=54feac18d1ad9cc5af1f71dfb34baa32f99630ae", "patch": "@@ -12,6 +12,32 @@ fn main() {\n \n     // is_ok(), unwrap_or()\n     let _ = (0..).filter_map(|a| to_res(a).ok());\n+\n+    let _ = (1..5)\n+        .filter_map(|y| *to_ref(to_opt(y)));\n+    let _ = (1..5)\n+        .filter_map(|y| *to_ref(to_opt(y)));\n+\n+    let _ = (1..5)\n+        .filter_map(|y| to_ref(to_res(y)).ok());\n+    let _ = (1..5)\n+        .filter_map(|y| to_ref(to_res(y)).ok());\n+}\n+\n+#[rustfmt::skip]\n+fn simple_equal() {\n+    iter::<Option<&u8>>().find_map(|x| x.cloned());\n+    iter::<&Option<&u8>>().find_map(|x| x.cloned());\n+    iter::<&Option<String>>().find_map(|x| x.as_deref());\n+    iter::<Option<&String>>().find_map(|y| to_ref(y).cloned());\n+\n+    iter::<Result<u8, ()>>().find_map(|x| x.ok());\n+    iter::<&Result<u8, ()>>().find_map(|x| x.ok());\n+    iter::<&&Result<u8, ()>>().find_map(|x| x.ok());\n+    iter::<Result<&u8, ()>>().find_map(|x| x.cloned().ok());\n+    iter::<&Result<&u8, ()>>().find_map(|x| x.cloned().ok());\n+    iter::<&Result<String, ()>>().find_map(|x| x.as_deref().ok());\n+    iter::<Result<&String, ()>>().find_map(|y| to_ref(y).cloned().ok());\n }\n \n fn no_lint() {\n@@ -28,6 +54,10 @@ fn no_lint() {\n         .map(|a| to_opt(a).unwrap());\n }\n \n+fn iter<T>() -> impl Iterator<Item = T> {\n+    std::iter::empty()\n+}\n+\n fn to_opt<T>(_: T) -> Option<T> {\n     unimplemented!()\n }\n@@ -36,6 +66,10 @@ fn to_res<T>(_: T) -> Result<T, ()> {\n     unimplemented!()\n }\n \n+fn to_ref<'a, T>(_: T) -> &'a T {\n+    unimplemented!()\n+}\n+\n struct Issue8920<'a> {\n     option_field: Option<String>,\n     result_field: Result<String, ()>,"}, {"sha": "8c67e827b4c35fe6512b8806ddea1bdaff5880d4", "filename": "tests/ui/manual_filter_map.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/54feac18d1ad9cc5af1f71dfb34baa32f99630ae/tests%2Fui%2Fmanual_filter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54feac18d1ad9cc5af1f71dfb34baa32f99630ae/tests%2Fui%2Fmanual_filter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_filter_map.rs?ref=54feac18d1ad9cc5af1f71dfb34baa32f99630ae", "patch": "@@ -12,6 +12,36 @@ fn main() {\n \n     // is_ok(), unwrap_or()\n     let _ = (0..).filter(|&n| to_res(n).is_ok()).map(|a| to_res(a).unwrap_or(1));\n+\n+    let _ = (1..5)\n+        .filter(|&x| to_ref(to_opt(x)).is_some())\n+        .map(|y| to_ref(to_opt(y)).unwrap());\n+    let _ = (1..5)\n+        .filter(|x| to_ref(to_opt(*x)).is_some())\n+        .map(|y| to_ref(to_opt(y)).unwrap());\n+\n+    let _ = (1..5)\n+        .filter(|&x| to_ref(to_res(x)).is_ok())\n+        .map(|y| to_ref(to_res(y)).unwrap());\n+    let _ = (1..5)\n+        .filter(|x| to_ref(to_res(*x)).is_ok())\n+        .map(|y| to_ref(to_res(y)).unwrap());\n+}\n+\n+#[rustfmt::skip]\n+fn simple_equal() {\n+    iter::<Option<&u8>>().find(|x| x.is_some()).map(|x| x.cloned().unwrap());\n+    iter::<&Option<&u8>>().find(|x| x.is_some()).map(|x| x.cloned().unwrap());\n+    iter::<&Option<String>>().find(|x| x.is_some()).map(|x| x.as_deref().unwrap());\n+    iter::<Option<&String>>().find(|&x| to_ref(x).is_some()).map(|y| to_ref(y).cloned().unwrap());\n+\n+    iter::<Result<u8, ()>>().find(|x| x.is_ok()).map(|x| x.unwrap());\n+    iter::<&Result<u8, ()>>().find(|x| x.is_ok()).map(|x| x.unwrap());\n+    iter::<&&Result<u8, ()>>().find(|x| x.is_ok()).map(|x| x.unwrap());\n+    iter::<Result<&u8, ()>>().find(|x| x.is_ok()).map(|x| x.cloned().unwrap());\n+    iter::<&Result<&u8, ()>>().find(|x| x.is_ok()).map(|x| x.cloned().unwrap());\n+    iter::<&Result<String, ()>>().find(|x| x.is_ok()).map(|x| x.as_deref().unwrap());\n+    iter::<Result<&String, ()>>().find(|&x| to_ref(x).is_ok()).map(|y| to_ref(y).cloned().unwrap());\n }\n \n fn no_lint() {\n@@ -28,6 +58,10 @@ fn no_lint() {\n         .map(|a| to_opt(a).unwrap());\n }\n \n+fn iter<T>() -> impl Iterator<Item = T> {\n+    std::iter::empty()\n+}\n+\n fn to_opt<T>(_: T) -> Option<T> {\n     unimplemented!()\n }\n@@ -36,6 +70,10 @@ fn to_res<T>(_: T) -> Result<T, ()> {\n     unimplemented!()\n }\n \n+fn to_ref<'a, T>(_: T) -> &'a T {\n+    unimplemented!()\n+}\n+\n struct Issue8920<'a> {\n     option_field: Option<String>,\n     result_field: Result<String, ()>,"}, {"sha": "6e5bbe8f2aaf577c6afab54e692d686d05769b47", "filename": "tests/ui/manual_filter_map.stderr", "status": "modified", "additions": 110, "deletions": 10, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/54feac18d1ad9cc5af1f71dfb34baa32f99630ae/tests%2Fui%2Fmanual_filter_map.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54feac18d1ad9cc5af1f71dfb34baa32f99630ae/tests%2Fui%2Fmanual_filter_map.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_filter_map.stderr?ref=54feac18d1ad9cc5af1f71dfb34baa32f99630ae", "patch": "@@ -19,76 +19,176 @@ LL |     let _ = (0..).filter(|&n| to_res(n).is_ok()).map(|a| to_res(a).unwrap_o\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `filter_map(|a| to_res(a).ok())`\n \n error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n-  --> $DIR/manual_filter_map.rs:54:10\n+  --> $DIR/manual_filter_map.rs:17:10\n+   |\n+LL |           .filter(|&x| to_ref(to_opt(x)).is_some())\n+   |  __________^\n+LL | |         .map(|y| to_ref(to_opt(y)).unwrap());\n+   | |____________________________________________^ help: try: `filter_map(|y| *to_ref(to_opt(y)))`\n+\n+error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n+  --> $DIR/manual_filter_map.rs:20:10\n+   |\n+LL |           .filter(|x| to_ref(to_opt(*x)).is_some())\n+   |  __________^\n+LL | |         .map(|y| to_ref(to_opt(y)).unwrap());\n+   | |____________________________________________^ help: try: `filter_map(|y| *to_ref(to_opt(y)))`\n+\n+error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n+  --> $DIR/manual_filter_map.rs:24:10\n+   |\n+LL |           .filter(|&x| to_ref(to_res(x)).is_ok())\n+   |  __________^\n+LL | |         .map(|y| to_ref(to_res(y)).unwrap());\n+   | |____________________________________________^ help: try: `filter_map(|y| to_ref(to_res(y)).ok())`\n+\n+error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n+  --> $DIR/manual_filter_map.rs:27:10\n+   |\n+LL |           .filter(|x| to_ref(to_res(*x)).is_ok())\n+   |  __________^\n+LL | |         .map(|y| to_ref(to_res(y)).unwrap());\n+   | |____________________________________________^ help: try: `filter_map(|y| to_ref(to_res(y)).ok())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_filter_map.rs:33:27\n+   |\n+LL |     iter::<Option<&u8>>().find(|x| x.is_some()).map(|x| x.cloned().unwrap());\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|x| x.cloned())`\n+   |\n+   = note: `-D clippy::manual-find-map` implied by `-D warnings`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_filter_map.rs:34:28\n+   |\n+LL |     iter::<&Option<&u8>>().find(|x| x.is_some()).map(|x| x.cloned().unwrap());\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|x| x.cloned())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_filter_map.rs:35:31\n+   |\n+LL |     iter::<&Option<String>>().find(|x| x.is_some()).map(|x| x.as_deref().unwrap());\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|x| x.as_deref())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_filter_map.rs:36:31\n+   |\n+LL |     iter::<Option<&String>>().find(|&x| to_ref(x).is_some()).map(|y| to_ref(y).cloned().unwrap());\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|y| to_ref(y).cloned())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_filter_map.rs:38:30\n+   |\n+LL |     iter::<Result<u8, ()>>().find(|x| x.is_ok()).map(|x| x.unwrap());\n+   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|x| x.ok())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_filter_map.rs:39:31\n+   |\n+LL |     iter::<&Result<u8, ()>>().find(|x| x.is_ok()).map(|x| x.unwrap());\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|x| x.ok())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_filter_map.rs:40:32\n+   |\n+LL |     iter::<&&Result<u8, ()>>().find(|x| x.is_ok()).map(|x| x.unwrap());\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|x| x.ok())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_filter_map.rs:41:31\n+   |\n+LL |     iter::<Result<&u8, ()>>().find(|x| x.is_ok()).map(|x| x.cloned().unwrap());\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|x| x.cloned().ok())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_filter_map.rs:42:32\n+   |\n+LL |     iter::<&Result<&u8, ()>>().find(|x| x.is_ok()).map(|x| x.cloned().unwrap());\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|x| x.cloned().ok())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_filter_map.rs:43:35\n+   |\n+LL |     iter::<&Result<String, ()>>().find(|x| x.is_ok()).map(|x| x.as_deref().unwrap());\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|x| x.as_deref().ok())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_filter_map.rs:44:35\n+   |\n+LL |     iter::<Result<&String, ()>>().find(|&x| to_ref(x).is_ok()).map(|y| to_ref(y).cloned().unwrap());\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|y| to_ref(y).cloned().ok())`\n+\n+error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n+  --> $DIR/manual_filter_map.rs:92:10\n    |\n LL |           .filter(|f| f.option_field.is_some())\n    |  __________^\n LL | |         .map(|f| f.option_field.clone().unwrap());\n    | |_________________________________________________^ help: try: `filter_map(|f| f.option_field.clone())`\n \n error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n-  --> $DIR/manual_filter_map.rs:59:10\n+  --> $DIR/manual_filter_map.rs:97:10\n    |\n LL |           .filter(|f| f.ref_field.is_some())\n    |  __________^\n LL | |         .map(|f| f.ref_field.cloned().unwrap());\n    | |_______________________________________________^ help: try: `filter_map(|f| f.ref_field.cloned())`\n \n error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n-  --> $DIR/manual_filter_map.rs:64:10\n+  --> $DIR/manual_filter_map.rs:102:10\n    |\n LL |           .filter(|f| f.ref_field.is_some())\n    |  __________^\n LL | |         .map(|f| f.ref_field.copied().unwrap());\n    | |_______________________________________________^ help: try: `filter_map(|f| f.ref_field.copied())`\n \n error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n-  --> $DIR/manual_filter_map.rs:69:10\n+  --> $DIR/manual_filter_map.rs:107:10\n    |\n LL |           .filter(|f| f.result_field.is_ok())\n    |  __________^\n LL | |         .map(|f| f.result_field.clone().unwrap());\n    | |_________________________________________________^ help: try: `filter_map(|f| f.result_field.clone().ok())`\n \n error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n-  --> $DIR/manual_filter_map.rs:74:10\n+  --> $DIR/manual_filter_map.rs:112:10\n    |\n LL |           .filter(|f| f.result_field.is_ok())\n    |  __________^\n LL | |         .map(|f| f.result_field.as_ref().unwrap());\n    | |__________________________________________________^ help: try: `filter_map(|f| f.result_field.as_ref().ok())`\n \n error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n-  --> $DIR/manual_filter_map.rs:79:10\n+  --> $DIR/manual_filter_map.rs:117:10\n    |\n LL |           .filter(|f| f.result_field.is_ok())\n    |  __________^\n LL | |         .map(|f| f.result_field.as_deref().unwrap());\n    | |____________________________________________________^ help: try: `filter_map(|f| f.result_field.as_deref().ok())`\n \n error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n-  --> $DIR/manual_filter_map.rs:84:10\n+  --> $DIR/manual_filter_map.rs:122:10\n    |\n LL |           .filter(|f| f.result_field.is_ok())\n    |  __________^\n LL | |         .map(|f| f.result_field.as_mut().unwrap());\n    | |__________________________________________________^ help: try: `filter_map(|f| f.result_field.as_mut().ok())`\n \n error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n-  --> $DIR/manual_filter_map.rs:89:10\n+  --> $DIR/manual_filter_map.rs:127:10\n    |\n LL |           .filter(|f| f.result_field.is_ok())\n    |  __________^\n LL | |         .map(|f| f.result_field.as_deref_mut().unwrap());\n    | |________________________________________________________^ help: try: `filter_map(|f| f.result_field.as_deref_mut().ok())`\n \n error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n-  --> $DIR/manual_filter_map.rs:94:10\n+  --> $DIR/manual_filter_map.rs:132:10\n    |\n LL |           .filter(|f| f.result_field.is_ok())\n    |  __________^\n LL | |         .map(|f| f.result_field.to_owned().unwrap());\n    | |____________________________________________________^ help: try: `filter_map(|f| f.result_field.to_owned().ok())`\n \n-error: aborting due to 12 previous errors\n+error: aborting due to 27 previous errors\n "}, {"sha": "54302beceff628171c4833ba1d3ead35bbfded5d", "filename": "tests/ui/manual_find_map.fixed", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/54feac18d1ad9cc5af1f71dfb34baa32f99630ae/tests%2Fui%2Fmanual_find_map.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/54feac18d1ad9cc5af1f71dfb34baa32f99630ae/tests%2Fui%2Fmanual_find_map.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_find_map.fixed?ref=54feac18d1ad9cc5af1f71dfb34baa32f99630ae", "patch": "@@ -12,6 +12,35 @@ fn main() {\n \n     // is_ok(), unwrap_or()\n     let _ = (0..).find_map(|a| to_res(a).ok());\n+\n+    let _ = (1..5)\n+        .find_map(|y| *to_ref(to_opt(y)));\n+    let _ = (1..5)\n+        .find_map(|y| *to_ref(to_opt(y)));\n+\n+    let _ = (1..5)\n+        .find_map(|y| to_ref(to_res(y)).ok());\n+    let _ = (1..5)\n+        .find_map(|y| to_ref(to_res(y)).ok());\n+}\n+\n+#[rustfmt::skip]\n+fn simple_equal() {\n+    iter::<Option<u8>>().find_map(|x| x);\n+    iter::<&Option<u8>>().find_map(|x| *x);\n+    iter::<&&Option<u8>>().find_map(|x| **x);\n+    iter::<Option<&u8>>().find_map(|x| x.cloned());\n+    iter::<&Option<&u8>>().find_map(|x| x.cloned());\n+    iter::<&Option<String>>().find_map(|x| x.as_deref());\n+    iter::<Option<&String>>().find_map(|y| to_ref(y).cloned());\n+\n+    iter::<Result<u8, ()>>().find_map(|x| x.ok());\n+    iter::<&Result<u8, ()>>().find_map(|x| x.ok());\n+    iter::<&&Result<u8, ()>>().find_map(|x| x.ok());\n+    iter::<Result<&u8, ()>>().find_map(|x| x.cloned().ok());\n+    iter::<&Result<&u8, ()>>().find_map(|x| x.cloned().ok());\n+    iter::<&Result<String, ()>>().find_map(|x| x.as_deref().ok());\n+    iter::<Result<&String, ()>>().find_map(|y| to_ref(y).cloned().ok());\n }\n \n fn no_lint() {\n@@ -28,6 +57,10 @@ fn no_lint() {\n         .map(|a| to_opt(a).unwrap());\n }\n \n+fn iter<T>() -> impl Iterator<Item = T> {\n+    std::iter::empty()\n+}\n+\n fn to_opt<T>(_: T) -> Option<T> {\n     unimplemented!()\n }\n@@ -36,6 +69,10 @@ fn to_res<T>(_: T) -> Result<T, ()> {\n     unimplemented!()\n }\n \n+fn to_ref<'a, T>(_: T) -> &'a T {\n+    unimplemented!()\n+}\n+\n struct Issue8920<'a> {\n     option_field: Option<String>,\n     result_field: Result<String, ()>,"}, {"sha": "afcc1825a9ac1c9170faa6813c6864f2f7ae6d0e", "filename": "tests/ui/manual_find_map.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/54feac18d1ad9cc5af1f71dfb34baa32f99630ae/tests%2Fui%2Fmanual_find_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54feac18d1ad9cc5af1f71dfb34baa32f99630ae/tests%2Fui%2Fmanual_find_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_find_map.rs?ref=54feac18d1ad9cc5af1f71dfb34baa32f99630ae", "patch": "@@ -12,6 +12,39 @@ fn main() {\n \n     // is_ok(), unwrap_or()\n     let _ = (0..).find(|&n| to_res(n).is_ok()).map(|a| to_res(a).unwrap_or(1));\n+\n+    let _ = (1..5)\n+        .find(|&x| to_ref(to_opt(x)).is_some())\n+        .map(|y| to_ref(to_opt(y)).unwrap());\n+    let _ = (1..5)\n+        .find(|x| to_ref(to_opt(*x)).is_some())\n+        .map(|y| to_ref(to_opt(y)).unwrap());\n+\n+    let _ = (1..5)\n+        .find(|&x| to_ref(to_res(x)).is_ok())\n+        .map(|y| to_ref(to_res(y)).unwrap());\n+    let _ = (1..5)\n+        .find(|x| to_ref(to_res(*x)).is_ok())\n+        .map(|y| to_ref(to_res(y)).unwrap());\n+}\n+\n+#[rustfmt::skip]\n+fn simple_equal() {\n+    iter::<Option<u8>>().find(|x| x.is_some()).map(|x| x.unwrap());\n+    iter::<&Option<u8>>().find(|x| x.is_some()).map(|x| x.unwrap());\n+    iter::<&&Option<u8>>().find(|x| x.is_some()).map(|x| x.unwrap());\n+    iter::<Option<&u8>>().find(|x| x.is_some()).map(|x| x.cloned().unwrap());\n+    iter::<&Option<&u8>>().find(|x| x.is_some()).map(|x| x.cloned().unwrap());\n+    iter::<&Option<String>>().find(|x| x.is_some()).map(|x| x.as_deref().unwrap());\n+    iter::<Option<&String>>().find(|&x| to_ref(x).is_some()).map(|y| to_ref(y).cloned().unwrap());\n+\n+    iter::<Result<u8, ()>>().find(|x| x.is_ok()).map(|x| x.unwrap());\n+    iter::<&Result<u8, ()>>().find(|x| x.is_ok()).map(|x| x.unwrap());\n+    iter::<&&Result<u8, ()>>().find(|x| x.is_ok()).map(|x| x.unwrap());\n+    iter::<Result<&u8, ()>>().find(|x| x.is_ok()).map(|x| x.cloned().unwrap());\n+    iter::<&Result<&u8, ()>>().find(|x| x.is_ok()).map(|x| x.cloned().unwrap());\n+    iter::<&Result<String, ()>>().find(|x| x.is_ok()).map(|x| x.as_deref().unwrap());\n+    iter::<Result<&String, ()>>().find(|&x| to_ref(x).is_ok()).map(|y| to_ref(y).cloned().unwrap());\n }\n \n fn no_lint() {\n@@ -28,6 +61,10 @@ fn no_lint() {\n         .map(|a| to_opt(a).unwrap());\n }\n \n+fn iter<T>() -> impl Iterator<Item = T> {\n+    std::iter::empty()\n+}\n+\n fn to_opt<T>(_: T) -> Option<T> {\n     unimplemented!()\n }\n@@ -36,6 +73,10 @@ fn to_res<T>(_: T) -> Result<T, ()> {\n     unimplemented!()\n }\n \n+fn to_ref<'a, T>(_: T) -> &'a T {\n+    unimplemented!()\n+}\n+\n struct Issue8920<'a> {\n     option_field: Option<String>,\n     result_field: Result<String, ()>,"}, {"sha": "c1ac499f7c6010c9ce5f764aef45d01204e38155", "filename": "tests/ui/manual_find_map.stderr", "status": "modified", "additions": 126, "deletions": 10, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/54feac18d1ad9cc5af1f71dfb34baa32f99630ae/tests%2Fui%2Fmanual_find_map.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54feac18d1ad9cc5af1f71dfb34baa32f99630ae/tests%2Fui%2Fmanual_find_map.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_find_map.stderr?ref=54feac18d1ad9cc5af1f71dfb34baa32f99630ae", "patch": "@@ -19,76 +19,192 @@ LL |     let _ = (0..).find(|&n| to_res(n).is_ok()).map(|a| to_res(a).unwrap_or(\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|a| to_res(a).ok())`\n \n error: `find(..).map(..)` can be simplified as `find_map(..)`\n-  --> $DIR/manual_find_map.rs:54:10\n+  --> $DIR/manual_find_map.rs:17:10\n+   |\n+LL |           .find(|&x| to_ref(to_opt(x)).is_some())\n+   |  __________^\n+LL | |         .map(|y| to_ref(to_opt(y)).unwrap());\n+   | |____________________________________________^ help: try: `find_map(|y| *to_ref(to_opt(y)))`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:20:10\n+   |\n+LL |           .find(|x| to_ref(to_opt(*x)).is_some())\n+   |  __________^\n+LL | |         .map(|y| to_ref(to_opt(y)).unwrap());\n+   | |____________________________________________^ help: try: `find_map(|y| *to_ref(to_opt(y)))`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:24:10\n+   |\n+LL |           .find(|&x| to_ref(to_res(x)).is_ok())\n+   |  __________^\n+LL | |         .map(|y| to_ref(to_res(y)).unwrap());\n+   | |____________________________________________^ help: try: `find_map(|y| to_ref(to_res(y)).ok())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:27:10\n+   |\n+LL |           .find(|x| to_ref(to_res(*x)).is_ok())\n+   |  __________^\n+LL | |         .map(|y| to_ref(to_res(y)).unwrap());\n+   | |____________________________________________^ help: try: `find_map(|y| to_ref(to_res(y)).ok())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:33:26\n+   |\n+LL |     iter::<Option<u8>>().find(|x| x.is_some()).map(|x| x.unwrap());\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|x| x)`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:34:27\n+   |\n+LL |     iter::<&Option<u8>>().find(|x| x.is_some()).map(|x| x.unwrap());\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|x| *x)`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:35:28\n+   |\n+LL |     iter::<&&Option<u8>>().find(|x| x.is_some()).map(|x| x.unwrap());\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|x| **x)`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:36:27\n+   |\n+LL |     iter::<Option<&u8>>().find(|x| x.is_some()).map(|x| x.cloned().unwrap());\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|x| x.cloned())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:37:28\n+   |\n+LL |     iter::<&Option<&u8>>().find(|x| x.is_some()).map(|x| x.cloned().unwrap());\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|x| x.cloned())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:38:31\n+   |\n+LL |     iter::<&Option<String>>().find(|x| x.is_some()).map(|x| x.as_deref().unwrap());\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|x| x.as_deref())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:39:31\n+   |\n+LL |     iter::<Option<&String>>().find(|&x| to_ref(x).is_some()).map(|y| to_ref(y).cloned().unwrap());\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|y| to_ref(y).cloned())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:41:30\n+   |\n+LL |     iter::<Result<u8, ()>>().find(|x| x.is_ok()).map(|x| x.unwrap());\n+   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|x| x.ok())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:42:31\n+   |\n+LL |     iter::<&Result<u8, ()>>().find(|x| x.is_ok()).map(|x| x.unwrap());\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|x| x.ok())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:43:32\n+   |\n+LL |     iter::<&&Result<u8, ()>>().find(|x| x.is_ok()).map(|x| x.unwrap());\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|x| x.ok())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:44:31\n+   |\n+LL |     iter::<Result<&u8, ()>>().find(|x| x.is_ok()).map(|x| x.cloned().unwrap());\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|x| x.cloned().ok())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:45:32\n+   |\n+LL |     iter::<&Result<&u8, ()>>().find(|x| x.is_ok()).map(|x| x.cloned().unwrap());\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|x| x.cloned().ok())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:46:35\n+   |\n+LL |     iter::<&Result<String, ()>>().find(|x| x.is_ok()).map(|x| x.as_deref().unwrap());\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|x| x.as_deref().ok())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:47:35\n+   |\n+LL |     iter::<Result<&String, ()>>().find(|&x| to_ref(x).is_ok()).map(|y| to_ref(y).cloned().unwrap());\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|y| to_ref(y).cloned().ok())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:95:10\n    |\n LL |           .find(|f| f.option_field.is_some())\n    |  __________^\n LL | |         .map(|f| f.option_field.clone().unwrap());\n    | |_________________________________________________^ help: try: `find_map(|f| f.option_field.clone())`\n \n error: `find(..).map(..)` can be simplified as `find_map(..)`\n-  --> $DIR/manual_find_map.rs:59:10\n+  --> $DIR/manual_find_map.rs:100:10\n    |\n LL |           .find(|f| f.ref_field.is_some())\n    |  __________^\n LL | |         .map(|f| f.ref_field.cloned().unwrap());\n    | |_______________________________________________^ help: try: `find_map(|f| f.ref_field.cloned())`\n \n error: `find(..).map(..)` can be simplified as `find_map(..)`\n-  --> $DIR/manual_find_map.rs:64:10\n+  --> $DIR/manual_find_map.rs:105:10\n    |\n LL |           .find(|f| f.ref_field.is_some())\n    |  __________^\n LL | |         .map(|f| f.ref_field.copied().unwrap());\n    | |_______________________________________________^ help: try: `find_map(|f| f.ref_field.copied())`\n \n error: `find(..).map(..)` can be simplified as `find_map(..)`\n-  --> $DIR/manual_find_map.rs:69:10\n+  --> $DIR/manual_find_map.rs:110:10\n    |\n LL |           .find(|f| f.result_field.is_ok())\n    |  __________^\n LL | |         .map(|f| f.result_field.clone().unwrap());\n    | |_________________________________________________^ help: try: `find_map(|f| f.result_field.clone().ok())`\n \n error: `find(..).map(..)` can be simplified as `find_map(..)`\n-  --> $DIR/manual_find_map.rs:74:10\n+  --> $DIR/manual_find_map.rs:115:10\n    |\n LL |           .find(|f| f.result_field.is_ok())\n    |  __________^\n LL | |         .map(|f| f.result_field.as_ref().unwrap());\n    | |__________________________________________________^ help: try: `find_map(|f| f.result_field.as_ref().ok())`\n \n error: `find(..).map(..)` can be simplified as `find_map(..)`\n-  --> $DIR/manual_find_map.rs:79:10\n+  --> $DIR/manual_find_map.rs:120:10\n    |\n LL |           .find(|f| f.result_field.is_ok())\n    |  __________^\n LL | |         .map(|f| f.result_field.as_deref().unwrap());\n    | |____________________________________________________^ help: try: `find_map(|f| f.result_field.as_deref().ok())`\n \n error: `find(..).map(..)` can be simplified as `find_map(..)`\n-  --> $DIR/manual_find_map.rs:84:10\n+  --> $DIR/manual_find_map.rs:125:10\n    |\n LL |           .find(|f| f.result_field.is_ok())\n    |  __________^\n LL | |         .map(|f| f.result_field.as_mut().unwrap());\n    | |__________________________________________________^ help: try: `find_map(|f| f.result_field.as_mut().ok())`\n \n error: `find(..).map(..)` can be simplified as `find_map(..)`\n-  --> $DIR/manual_find_map.rs:89:10\n+  --> $DIR/manual_find_map.rs:130:10\n    |\n LL |           .find(|f| f.result_field.is_ok())\n    |  __________^\n LL | |         .map(|f| f.result_field.as_deref_mut().unwrap());\n    | |________________________________________________________^ help: try: `find_map(|f| f.result_field.as_deref_mut().ok())`\n \n error: `find(..).map(..)` can be simplified as `find_map(..)`\n-  --> $DIR/manual_find_map.rs:94:10\n+  --> $DIR/manual_find_map.rs:135:10\n    |\n LL |           .find(|f| f.result_field.is_ok())\n    |  __________^\n LL | |         .map(|f| f.result_field.to_owned().unwrap());\n    | |____________________________________________________^ help: try: `find_map(|f| f.result_field.to_owned().ok())`\n \n-error: aborting due to 12 previous errors\n+error: aborting due to 30 previous errors\n "}]}