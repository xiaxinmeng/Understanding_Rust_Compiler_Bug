{"sha": "ce37f0a35559fb5396881f3d9a547f161b1e822d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlMzdmMGEzNTU1OWZiNTM5Njg4MWYzZDlhNTQ3ZjE2MWIxZTgyMmQ=", "commit": {"author": {"name": "Will Crichton", "email": "wcrichto@cs.stanford.edu", "date": "2021-08-26T18:45:25Z"}, "committer": {"name": "Will Crichton", "email": "wcrichto@cs.stanford.edu", "date": "2021-08-26T18:45:25Z"}, "message": "Add comments", "tree": {"sha": "6ae07adb4a27fec9d6de543cfcb4073d8fceb47f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ae07adb4a27fec9d6de543cfcb4073d8fceb47f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce37f0a35559fb5396881f3d9a547f161b1e822d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce37f0a35559fb5396881f3d9a547f161b1e822d", "html_url": "https://github.com/rust-lang/rust/commit/ce37f0a35559fb5396881f3d9a547f161b1e822d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce37f0a35559fb5396881f3d9a547f161b1e822d/comments", "author": {"login": "willcrichton", "id": 663326, "node_id": "MDQ6VXNlcjY2MzMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/663326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willcrichton", "html_url": "https://github.com/willcrichton", "followers_url": "https://api.github.com/users/willcrichton/followers", "following_url": "https://api.github.com/users/willcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/willcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/willcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willcrichton/subscriptions", "organizations_url": "https://api.github.com/users/willcrichton/orgs", "repos_url": "https://api.github.com/users/willcrichton/repos", "events_url": "https://api.github.com/users/willcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/willcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "willcrichton", "id": 663326, "node_id": "MDQ6VXNlcjY2MzMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/663326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willcrichton", "html_url": "https://github.com/willcrichton", "followers_url": "https://api.github.com/users/willcrichton/followers", "following_url": "https://api.github.com/users/willcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/willcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/willcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willcrichton/subscriptions", "organizations_url": "https://api.github.com/users/willcrichton/orgs", "repos_url": "https://api.github.com/users/willcrichton/repos", "events_url": "https://api.github.com/users/willcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/willcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d73a169f93748e963be068201b5c4eee1fe6c982", "url": "https://api.github.com/repos/rust-lang/rust/commits/d73a169f93748e963be068201b5c4eee1fe6c982", "html_url": "https://github.com/rust-lang/rust/commit/d73a169f93748e963be068201b5c4eee1fe6c982"}], "stats": {"total": 12, "additions": 12, "deletions": 0}, "files": [{"sha": "610421f8060a40a9e19e57432887294d3164b95d", "filename": "compiler/rustc_index/src/bit_set.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ce37f0a35559fb5396881f3d9a547f161b1e822d/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce37f0a35559fb5396881f3d9a547f161b1e822d/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs?ref=ce37f0a35559fb5396881f3d9a547f161b1e822d", "patch": "@@ -247,6 +247,8 @@ impl<T: Idx> BitRelations<BitSet<T>> for BitSet<T> {\n     }\n }\n \n+// Applies a function to mutate a bitset, and returns true if any\n+// of the applications return true\n fn sequential_update<T: Idx>(\n     mut self_update: impl FnMut(T) -> bool,\n     it: impl Iterator<Item = T>,\n@@ -258,6 +260,8 @@ fn sequential_update<T: Idx>(\n     changed\n }\n \n+// Optimization of intersection for SparseBitSet that's generic\n+// over the RHS\n fn sparse_intersect<T: Idx>(\n     set: &mut SparseBitSet<T>,\n     other_contains: impl Fn(&T) -> bool,\n@@ -267,6 +271,10 @@ fn sparse_intersect<T: Idx>(\n     set.elems.len() != size\n }\n \n+// Optimization of dense/sparse intersection. The resulting set is\n+// guaranteed to be at most the size of the sparse set, and hence can be\n+// represented as a sparse set. Therefore the sparse set is copied and filtered,\n+// then returned as the new set. \n fn dense_sparse_intersect<T: Idx>(\n     dense: &BitSet<T>,\n     sparse: &SparseBitSet<T>,\n@@ -303,6 +311,10 @@ impl<T: Idx> BitRelations<HybridBitSet<T>> for BitSet<T> {\n         match other {\n             HybridBitSet::Sparse(sparse) => {\n                 let (updated, changed) = dense_sparse_intersect(self, sparse);\n+\n+                // We can't directly assign the BitSet to the SparseBitSet, and \n+                // doing `*self = updated.to_dense()` would cause a drop / reallocation. Instead,\n+                // the BitSet is cleared and `updated` is copied into `self`.\n                 self.clear();\n                 for elem in updated.iter() {\n                     self.insert(*elem);"}]}