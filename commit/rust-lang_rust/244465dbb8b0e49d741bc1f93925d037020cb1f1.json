{"sha": "244465dbb8b0e49d741bc1f93925d037020cb1f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0NDQ2NWRiYjhiMGU0OWQ3NDFiYzFmOTM5MjVkMDM3MDIwY2IxZjE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-06-08T07:55:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-08T07:55:31Z"}, "message": "Rollup merge of #73001 - ilya-bobyr:master, r=dtolnay\n\nFree `default()` forwarding to `Default::default()`\n\nIt feels a bit redundant to have to say `Default::default()` every time I need a new value of a type that has a `Default` instance.\nEspecially so, compared to Haskell, where the same functionality is called `def`.\nProviding a free `default()` function that forwards to `Default::default()` seems to improve the situation.\nThe trait is still there, so if someone wants to be explicit and to say `Default::default()` - it still works, but if imported as `std::default::default;`, then the free function reduces typing and visual noise.", "tree": {"sha": "e85257ee148436d1fb8388c0e032dcfed719aebe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e85257ee148436d1fb8388c0e032dcfed719aebe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/244465dbb8b0e49d741bc1f93925d037020cb1f1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe3e70CRBK7hj4Ov3rIwAAdHIIADr73KMl3/bax0MaAGFcuv/6\nZ3b3WbTXr6n5EwajHsfswqqJR/MQPimPUB2CG0j8RLSEYatXgDOKqan72SndpuS2\niYi+WxazfAxXHaVMH7PebMe1DshWE8KNkfcMiaKAXn9fJq6FJ/LsDJQBWiegrFkb\nm7MXue3uzvfdXghujvqQGIeqSNLoFZINbG4Mx8aKV8LSwZ6E2BemJXc56sK04Nc7\nA9gACJans1ImZ/3/CXQluZDvepflzjhCjgl66xYT324hhru79GBjfWvmO+RBqEmr\nIngTKCIkS/TADSP56s6Lkd11q1xIvsoqgQ7CANHLpfADNmgLoA6NUYs/ddKEQR0=\n=c0Sv\n-----END PGP SIGNATURE-----\n", "payload": "tree e85257ee148436d1fb8388c0e032dcfed719aebe\nparent 824ea6bf2d883fd04ed826f1d09a20dc3ede11d0\nparent ebb8722ea7b184ade7015fd1094475a18e1198f7\nauthor Ralf Jung <post@ralfj.de> 1591602931 +0200\ncommitter GitHub <noreply@github.com> 1591602931 +0200\n\nRollup merge of #73001 - ilya-bobyr:master, r=dtolnay\n\nFree `default()` forwarding to `Default::default()`\n\nIt feels a bit redundant to have to say `Default::default()` every time I need a new value of a type that has a `Default` instance.\nEspecially so, compared to Haskell, where the same functionality is called `def`.\nProviding a free `default()` function that forwards to `Default::default()` seems to improve the situation.\nThe trait is still there, so if someone wants to be explicit and to say `Default::default()` - it still works, but if imported as `std::default::default;`, then the free function reduces typing and visual noise.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/244465dbb8b0e49d741bc1f93925d037020cb1f1", "html_url": "https://github.com/rust-lang/rust/commit/244465dbb8b0e49d741bc1f93925d037020cb1f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/244465dbb8b0e49d741bc1f93925d037020cb1f1/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "824ea6bf2d883fd04ed826f1d09a20dc3ede11d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/824ea6bf2d883fd04ed826f1d09a20dc3ede11d0", "html_url": "https://github.com/rust-lang/rust/commit/824ea6bf2d883fd04ed826f1d09a20dc3ede11d0"}, {"sha": "ebb8722ea7b184ade7015fd1094475a18e1198f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebb8722ea7b184ade7015fd1094475a18e1198f7", "html_url": "https://github.com/rust-lang/rust/commit/ebb8722ea7b184ade7015fd1094475a18e1198f7"}], "stats": {"total": 100, "additions": 99, "deletions": 1}, "files": [{"sha": "5dff73a94dd872c956aa1c231719290d5791271a", "filename": "src/doc/unstable-book/src/library-features/default-free-fn.md", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/244465dbb8b0e49d741bc1f93925d037020cb1f1/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fdefault-free-fn.md", "raw_url": "https://github.com/rust-lang/rust/raw/244465dbb8b0e49d741bc1f93925d037020cb1f1/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fdefault-free-fn.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fdefault-free-fn.md?ref=244465dbb8b0e49d741bc1f93925d037020cb1f1", "patch": "@@ -0,0 +1,45 @@\n+# `default_free_fn`\n+\n+The tracking issue for this feature is: [#73014]\n+\n+[#73014]: https://github.com/rust-lang/rust/issues/73014\n+\n+------------------------\n+\n+Adds a free `default()` function to the `std::default` module.  This function\n+just forwards to [`Default::default()`], but may remove repetition of the word\n+\"default\" from the call site.\n+\n+Here is an example:\n+\n+```rust\n+#![feature(default_free_fn)]\n+use std::default::default;\n+\n+#[derive(Default)]\n+struct AppConfig {\n+    foo: FooConfig,\n+    bar: BarConfig,\n+}\n+\n+#[derive(Default)]\n+struct FooConfig {\n+    foo: i32,\n+}\n+\n+#[derive(Default)]\n+struct BarConfig {\n+    bar: f32,\n+    baz: u8,\n+}\n+\n+fn main() {\n+    let options = AppConfig {\n+        foo: default(),\n+        bar: BarConfig {\n+            bar: 10.1,\n+            ..default()\n+        },\n+    };\n+}\n+```"}, {"sha": "9a8d65cd4e06b93e37e075f100a589b18e97eba5", "filename": "src/libcore/default.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/244465dbb8b0e49d741bc1f93925d037020cb1f1/src%2Flibcore%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244465dbb8b0e49d741bc1f93925d037020cb1f1/src%2Flibcore%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdefault.rs?ref=244465dbb8b0e49d741bc1f93925d037020cb1f1", "patch": "@@ -115,6 +115,50 @@ pub trait Default: Sized {\n     fn default() -> Self;\n }\n \n+/// Return the default value of a type according to the `Default` trait.\n+///\n+/// The type to return is inferred from context; this is equivalent to\n+/// `Default::default()` but shorter to type.\n+///\n+/// For example:\n+/// ```\n+/// #![feature(default_free_fn)]\n+///\n+/// use std::default::default;\n+///\n+/// #[derive(Default)]\n+/// struct AppConfig {\n+///     foo: FooConfig,\n+///     bar: BarConfig,\n+/// }\n+///\n+/// #[derive(Default)]\n+/// struct FooConfig {\n+///     foo: i32,\n+/// }\n+///\n+/// #[derive(Default)]\n+/// struct BarConfig {\n+///     bar: f32,\n+///     baz: u8,\n+/// }\n+///\n+/// fn main() {\n+///     let options = AppConfig {\n+///         foo: default(),\n+///         bar: BarConfig {\n+///             bar: 10.1,\n+///             ..default()\n+///         },\n+///     };\n+/// }\n+/// ```\n+#[unstable(feature = \"default_free_fn\", issue = \"73014\")]\n+#[inline]\n+pub fn default<T: Default>() -> T {\n+    Default::default()\n+}\n+\n /// Derive macro generating an impl of the trait `Default`.\n #[rustc_builtin_macro]\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]"}, {"sha": "b687f0b0af0ad90f60c98d9d0a6f44e182055bbf", "filename": "src/test/ui/resolve/issue-2356.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/244465dbb8b0e49d741bc1f93925d037020cb1f1/src%2Ftest%2Fui%2Fresolve%2Fissue-2356.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/244465dbb8b0e49d741bc1f93925d037020cb1f1/src%2Ftest%2Fui%2Fresolve%2Fissue-2356.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-2356.stderr?ref=244465dbb8b0e49d741bc1f93925d037020cb1f1", "patch": "@@ -14,7 +14,16 @@ error[E0425]: cannot find function `default` in this scope\n   --> $DIR/issue-2356.rs:31:5\n    |\n LL |     default();\n-   |     ^^^^^^^ help: try: `Self::default`\n+   |     ^^^^^^^\n+   |\n+help: try\n+   |\n+LL |     Self::default();\n+   |     ^^^^^^^^^^^^^\n+help: consider importing this function\n+   |\n+LL | use std::default::default;\n+   |\n \n error[E0425]: cannot find value `whiskers` in this scope\n   --> $DIR/issue-2356.rs:39:5"}]}