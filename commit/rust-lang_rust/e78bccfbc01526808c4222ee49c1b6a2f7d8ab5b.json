{"sha": "e78bccfbc01526808c4222ee49c1b6a2f7d8ab5b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3OGJjY2ZiYzAxNTI2ODA4YzQyMjJlZTQ5YzFiNmEyZjdkOGFiNWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-16T04:47:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-16T04:47:52Z"}, "message": "Auto merge of #85279 - DrChat:asm_powerpc64, r=Amanieu\n\nAdd asm!() support for PowerPC64\n\nI was anticipating this to be difficult so I didn't do it as part of #84732... but this was pretty easy to do \ud83d\udc40", "tree": {"sha": "a51df56e96724f8864b5c88172926ba97ed3ae17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a51df56e96724f8864b5c88172926ba97ed3ae17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e78bccfbc01526808c4222ee49c1b6a2f7d8ab5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e78bccfbc01526808c4222ee49c1b6a2f7d8ab5b", "html_url": "https://github.com/rust-lang/rust/commit/e78bccfbc01526808c4222ee49c1b6a2f7d8ab5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e78bccfbc01526808c4222ee49c1b6a2f7d8ab5b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d525d5028e0362c125f58fbcb538e0273a66560", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d525d5028e0362c125f58fbcb538e0273a66560", "html_url": "https://github.com/rust-lang/rust/commit/6d525d5028e0362c125f58fbcb538e0273a66560"}, {"sha": "69acee3ffe7b43161f3746c560c3b48e591d59d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/69acee3ffe7b43161f3746c560c3b48e591d59d8", "html_url": "https://github.com/rust-lang/rust/commit/69acee3ffe7b43161f3746c560c3b48e591d59d8"}], "stats": {"total": 54, "additions": 47, "deletions": 7}, "files": [{"sha": "0aef77129d8c6c818f269e39ff1d0fd2ed999bf3", "filename": "compiler/rustc_codegen_llvm/src/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e78bccfbc01526808c4222ee49c1b6a2f7d8ab5b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e78bccfbc01526808c4222ee49c1b6a2f7d8ab5b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs?ref=e78bccfbc01526808c4222ee49c1b6a2f7d8ab5b", "patch": "@@ -283,7 +283,7 @@ impl AsmBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                 }\n                 InlineAsmArch::RiscV32 | InlineAsmArch::RiscV64 => {}\n                 InlineAsmArch::Nvptx64 => {}\n-                InlineAsmArch::PowerPC => {}\n+                InlineAsmArch::PowerPC | InlineAsmArch::PowerPC64 => {}\n                 InlineAsmArch::Hexagon => {}\n                 InlineAsmArch::Mips | InlineAsmArch::Mips64 => {}\n                 InlineAsmArch::SpirV => {}"}, {"sha": "c2f6bb76295e27234306f2513644d200d4e7a92b", "filename": "compiler/rustc_target/src/asm/mod.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e78bccfbc01526808c4222ee49c1b6a2f7d8ab5b/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e78bccfbc01526808c4222ee49c1b6a2f7d8ab5b/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs?ref=e78bccfbc01526808c4222ee49c1b6a2f7d8ab5b", "patch": "@@ -184,6 +184,7 @@ pub enum InlineAsmArch {\n     Mips,\n     Mips64,\n     PowerPC,\n+    PowerPC64,\n     SpirV,\n     Wasm32,\n }\n@@ -201,6 +202,7 @@ impl FromStr for InlineAsmArch {\n             \"riscv64\" => Ok(Self::RiscV64),\n             \"nvptx64\" => Ok(Self::Nvptx64),\n             \"powerpc\" => Ok(Self::PowerPC),\n+            \"powerpc64\" => Ok(Self::PowerPC64),\n             \"hexagon\" => Ok(Self::Hexagon),\n             \"mips\" => Ok(Self::Mips),\n             \"mips64\" => Ok(Self::Mips64),\n@@ -290,7 +292,7 @@ impl InlineAsmReg {\n             InlineAsmArch::Nvptx64 => {\n                 Self::Nvptx(NvptxInlineAsmReg::parse(arch, has_feature, target, &name)?)\n             }\n-            InlineAsmArch::PowerPC => {\n+            InlineAsmArch::PowerPC | InlineAsmArch::PowerPC64 => {\n                 Self::PowerPC(PowerPCInlineAsmReg::parse(arch, has_feature, target, &name)?)\n             }\n             InlineAsmArch::Hexagon => {\n@@ -485,7 +487,9 @@ impl InlineAsmRegClass {\n                 Self::RiscV(RiscVInlineAsmRegClass::parse(arch, name)?)\n             }\n             InlineAsmArch::Nvptx64 => Self::Nvptx(NvptxInlineAsmRegClass::parse(arch, name)?),\n-            InlineAsmArch::PowerPC => Self::PowerPC(PowerPCInlineAsmRegClass::parse(arch, name)?),\n+            InlineAsmArch::PowerPC | InlineAsmArch::PowerPC64 => {\n+                Self::PowerPC(PowerPCInlineAsmRegClass::parse(arch, name)?)\n+            }\n             InlineAsmArch::Hexagon => Self::Hexagon(HexagonInlineAsmRegClass::parse(arch, name)?),\n             InlineAsmArch::Mips | InlineAsmArch::Mips64 => {\n                 Self::Mips(MipsInlineAsmRegClass::parse(arch, name)?)\n@@ -653,7 +657,7 @@ pub fn allocatable_registers(\n             nvptx::fill_reg_map(arch, has_feature, target, &mut map);\n             map\n         }\n-        InlineAsmArch::PowerPC => {\n+        InlineAsmArch::PowerPC | InlineAsmArch::PowerPC64 => {\n             let mut map = powerpc::regclass_map();\n             powerpc::fill_reg_map(arch, has_feature, target, &mut map);\n             map"}, {"sha": "42fc25c4ff565dafd1add85a27e09da27181d32c", "filename": "compiler/rustc_target/src/asm/powerpc.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e78bccfbc01526808c4222ee49c1b6a2f7d8ab5b/compiler%2Frustc_target%2Fsrc%2Fasm%2Fpowerpc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e78bccfbc01526808c4222ee49c1b6a2f7d8ab5b/compiler%2Frustc_target%2Fsrc%2Fasm%2Fpowerpc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fpowerpc.rs?ref=e78bccfbc01526808c4222ee49c1b6a2f7d8ab5b", "patch": "@@ -33,10 +33,16 @@ impl PowerPCInlineAsmRegClass {\n \n     pub fn supported_types(\n         self,\n-        _arch: InlineAsmArch,\n+        arch: InlineAsmArch,\n     ) -> &'static [(InlineAsmType, Option<&'static str>)] {\n         match self {\n-            Self::reg | Self::reg_nonzero => types! { _: I8, I16, I32; },\n+            Self::reg | Self::reg_nonzero => {\n+                if arch == InlineAsmArch::PowerPC {\n+                    types! { _: I8, I16, I32; }\n+                } else {\n+                    types! { _: I8, I16, I32, I64; }\n+                }\n+            }\n             Self::freg => types! { _: F32, F64; },\n         }\n     }"}, {"sha": "742e4ddaed6c96d2629c9dfb00e297440b48a47a", "filename": "src/test/assembly/asm/powerpc-types.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e78bccfbc01526808c4222ee49c1b6a2f7d8ab5b/src%2Ftest%2Fassembly%2Fasm%2Fpowerpc-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e78bccfbc01526808c4222ee49c1b6a2f7d8ab5b/src%2Ftest%2Fassembly%2Fasm%2Fpowerpc-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fpowerpc-types.rs?ref=e78bccfbc01526808c4222ee49c1b6a2f7d8ab5b", "patch": "@@ -1,6 +1,8 @@\n // min-llvm-version: 10.0.1\n+// revisions: powerpc powerpc64\n // assembly-output: emit-asm\n-// compile-flags: --target powerpc-unknown-linux-gnu\n+//[powerpc] compile-flags: --target powerpc-unknown-linux-gnu\n+//[powerpc64] compile-flags: --target powerpc64-unknown-linux-gnu\n // needs-llvm-components: powerpc\n \n #![feature(no_core, lang_items, rustc_attrs, repr_simd)]\n@@ -86,6 +88,13 @@ check!(reg_i16, i16, reg, \"mr\");\n // CHECK: #NO_APP\n check!(reg_i32, i32, reg, \"mr\");\n \n+// powerpc64-LABEL: reg_i64:\n+// powerpc64: #APP\n+// powerpc64: mr {{[0-9]+}}, {{[0-9]+}}\n+// powerpc64: #NO_APP\n+#[cfg(powerpc64)]\n+check!(reg_i64, i64, reg, \"mr\");\n+\n // CHECK-LABEL: reg_i8_nz:\n // CHECK: #APP\n // CHECK: mr {{[0-9]+}}, {{[0-9]+}}\n@@ -104,6 +113,13 @@ check!(reg_i16_nz, i16, reg_nonzero, \"mr\");\n // CHECK: #NO_APP\n check!(reg_i32_nz, i32, reg_nonzero, \"mr\");\n \n+// powerpc64-LABEL: reg_i64_nz:\n+// powerpc64: #APP\n+// powerpc64: mr {{[0-9]+}}, {{[0-9]+}}\n+// powerpc64: #NO_APP\n+#[cfg(powerpc64)]\n+check!(reg_i64_nz, i64, reg_nonzero, \"mr\");\n+\n // CHECK-LABEL: reg_f32:\n // CHECK: #APP\n // CHECK: fmr {{[0-9]+}}, {{[0-9]+}}\n@@ -134,6 +150,13 @@ check_reg!(reg_i16_r0, i16, \"0\", \"0\", \"mr\");\n // CHECK: #NO_APP\n check_reg!(reg_i32_r0, i32, \"0\", \"0\", \"mr\");\n \n+// powerpc64-LABEL: reg_i64_r0:\n+// powerpc64: #APP\n+// powerpc64: mr 0, 0\n+// powerpc64: #NO_APP\n+#[cfg(powerpc64)]\n+check_reg!(reg_i64_r0, i64, \"0\", \"0\", \"mr\");\n+\n // CHECK-LABEL: reg_i8_r18:\n // CHECK: #APP\n // CHECK: mr 18, 18\n@@ -152,6 +175,13 @@ check_reg!(reg_i16_r18, i16, \"18\", \"18\", \"mr\");\n // CHECK: #NO_APP\n check_reg!(reg_i32_r18, i32, \"18\", \"18\", \"mr\");\n \n+// powerpc64-LABEL: reg_i64_r18:\n+// powerpc64: #APP\n+// powerpc64: mr 18, 18\n+// powerpc64: #NO_APP\n+#[cfg(powerpc64)]\n+check_reg!(reg_i64_r18, i64, \"18\", \"18\", \"mr\");\n+\n // CHECK-LABEL: reg_f32_f0:\n // CHECK: #APP\n // CHECK: fmr 0, 0"}]}