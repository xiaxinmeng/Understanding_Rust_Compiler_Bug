{"sha": "50d2f302cbf512271eac3e6242f08e7d77e1a2f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwZDJmMzAyY2JmNTEyMjcxZWFjM2U2MjQyZjA4ZTdkNzdlMWEyZjM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-24T20:32:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-24T20:32:28Z"}, "message": "Rollup merge of #70234 - anp:tracked-std-traits, r=Amanieu\n\n#[track_caller] on core::ops::{Index, IndexMut}.\n\nApplies the attribute to `core::ops::Index(Mut)` and enough std internals to cover the [functions listed in \"tier 1\" in the original RFC](https://github.com/rust-lang/rfcs/blob/master/text/2091-inline-semantic.md#survey-of-panicking-standard-functions).\n\nSplit out from #69251 to allow separate assessment of perf impact.\n\nTo my knowledge, this is the last piece of implementing RFC 2091.\n\nTracking issue: https://github.com/rust-lang/rust/issues/47809", "tree": {"sha": "6e085ee24af62a4c6b50887205137270d6d19f3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e085ee24af62a4c6b50887205137270d6d19f3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50d2f302cbf512271eac3e6242f08e7d77e1a2f3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeem5cCRBK7hj4Ov3rIwAAdHIIACqM5H0jViC+tZZUZrYxuNMd\nrhIUF8Ig7Lu0Ua+X24foMA8xwUZIPV9K41KX4PxYZ0Eo/Ejtr+QYAfpMNRKS1Udg\no45Jl2dtG6sCpqmHWFbF65C5Lct7ue0wotBOXt64P+ylmDwW1UIEHhmh9aAERZDN\nnrGWYNAb56l9VGcBYyWdAYfjqH+eYpwk8KSsZXZT7krHQJRU7ecDTDAwDDOvPo4u\nQlmxOYPMN8t/u2ti3w/jlQ9OY12Bum0ireQxazQjLTM1Z6u5huhrGvJACYFNWo35\nrDVY6vAv+qDXQM0ZRJE1sFFV4z+mbtkqj9Xyp60m5bIhhblfJHRcOWqGbx1L1nk=\n=7tt8\n-----END PGP SIGNATURE-----\n", "payload": "tree 6e085ee24af62a4c6b50887205137270d6d19f3e\nparent 89feaf6d960c42fb56cbbd215005f6ec7249cad9\nparent a7ab7b136ee347e7b80523994a060e6784b3b219\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1585081948 +0100\ncommitter GitHub <noreply@github.com> 1585081948 +0100\n\nRollup merge of #70234 - anp:tracked-std-traits, r=Amanieu\n\n#[track_caller] on core::ops::{Index, IndexMut}.\n\nApplies the attribute to `core::ops::Index(Mut)` and enough std internals to cover the [functions listed in \"tier 1\" in the original RFC](https://github.com/rust-lang/rfcs/blob/master/text/2091-inline-semantic.md#survey-of-panicking-standard-functions).\n\nSplit out from #69251 to allow separate assessment of perf impact.\n\nTo my knowledge, this is the last piece of implementing RFC 2091.\n\nTracking issue: https://github.com/rust-lang/rust/issues/47809\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50d2f302cbf512271eac3e6242f08e7d77e1a2f3", "html_url": "https://github.com/rust-lang/rust/commit/50d2f302cbf512271eac3e6242f08e7d77e1a2f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50d2f302cbf512271eac3e6242f08e7d77e1a2f3/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89feaf6d960c42fb56cbbd215005f6ec7249cad9", "url": "https://api.github.com/repos/rust-lang/rust/commits/89feaf6d960c42fb56cbbd215005f6ec7249cad9", "html_url": "https://github.com/rust-lang/rust/commit/89feaf6d960c42fb56cbbd215005f6ec7249cad9"}, {"sha": "a7ab7b136ee347e7b80523994a060e6784b3b219", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7ab7b136ee347e7b80523994a060e6784b3b219", "html_url": "https://github.com/rust-lang/rust/commit/a7ab7b136ee347e7b80523994a060e6784b3b219"}], "stats": {"total": 32, "additions": 32, "deletions": 0}, "files": [{"sha": "64dd633f75d2b4b2badcaaf4c7c9df4839b5a0f6", "filename": "src/libcore/ops/index.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50d2f302cbf512271eac3e6242f08e7d77e1a2f3/src%2Flibcore%2Fops%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50d2f302cbf512271eac3e6242f08e7d77e1a2f3/src%2Flibcore%2Fops%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Findex.rs?ref=50d2f302cbf512271eac3e6242f08e7d77e1a2f3", "patch": "@@ -65,6 +65,7 @@ pub trait Index<Idx: ?Sized> {\n \n     /// Performs the indexing (`container[index]`) operation.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(not(bootstrap), track_caller)]\n     fn index(&self, index: Idx) -> &Self::Output;\n }\n \n@@ -166,5 +167,6 @@ see chapter in The Book <https://doc.rust-lang.org/book/ch08-02-strings.html#ind\n pub trait IndexMut<Idx: ?Sized>: Index<Idx> {\n     /// Performs the mutable indexing (`container[index]`) operation.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(not(bootstrap), track_caller)]\n     fn index_mut(&mut self, index: Idx) -> &mut Self::Output;\n }"}, {"sha": "2140a7be9efe8c05b2b1bb2b2ff63924e3962ae8", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/50d2f302cbf512271eac3e6242f08e7d77e1a2f3/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50d2f302cbf512271eac3e6242f08e7d77e1a2f3/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=50d2f302cbf512271eac3e6242f08e7d77e1a2f3", "patch": "@@ -2306,6 +2306,7 @@ impl<T> [T] {\n     /// assert_eq!(&bytes, b\"Hello, Wello!\");\n     /// ```\n     #[stable(feature = \"copy_within\", since = \"1.37.0\")]\n+    #[track_caller]\n     pub fn copy_within<R: ops::RangeBounds<usize>>(&mut self, src: R, dest: usize)\n     where\n         T: Copy,\n@@ -2721,18 +2722,21 @@ where\n \n #[inline(never)]\n #[cold]\n+#[track_caller]\n fn slice_index_len_fail(index: usize, len: usize) -> ! {\n     panic!(\"index {} out of range for slice of length {}\", index, len);\n }\n \n #[inline(never)]\n #[cold]\n+#[track_caller]\n fn slice_index_order_fail(index: usize, end: usize) -> ! {\n     panic!(\"slice index starts at {} but ends at {}\", index, end);\n }\n \n #[inline(never)]\n #[cold]\n+#[track_caller]\n fn slice_index_overflow_fail() -> ! {\n     panic!(\"attempted to index slice up to maximum usize\");\n }\n@@ -2804,11 +2808,13 @@ pub trait SliceIndex<T: ?Sized>: private_slice_index::Sealed {\n     /// Returns a shared reference to the output at this location, panicking\n     /// if out of bounds.\n     #[unstable(feature = \"slice_index_methods\", issue = \"none\")]\n+    #[cfg_attr(not(bootstrap), track_caller)]\n     fn index(self, slice: &T) -> &Self::Output;\n \n     /// Returns a mutable reference to the output at this location, panicking\n     /// if out of bounds.\n     #[unstable(feature = \"slice_index_methods\", issue = \"none\")]\n+    #[cfg_attr(not(bootstrap), track_caller)]\n     fn index_mut(self, slice: &mut T) -> &mut Self::Output;\n }\n "}, {"sha": "013ca182c13cd867210f9ab65061cb5eee734b2b", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50d2f302cbf512271eac3e6242f08e7d77e1a2f3/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50d2f302cbf512271eac3e6242f08e7d77e1a2f3/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=50d2f302cbf512271eac3e6242f08e7d77e1a2f3", "patch": "@@ -1794,6 +1794,7 @@ mod traits {\n \n     #[inline(never)]\n     #[cold]\n+    #[track_caller]\n     fn str_index_overflow_fail() -> ! {\n         panic!(\"attempted to index str up to maximum usize\");\n     }\n@@ -2185,6 +2186,7 @@ fn truncate_to_char_boundary(s: &str, mut max: usize) -> (bool, &str) {\n \n #[inline(never)]\n #[cold]\n+#[track_caller]\n fn slice_error_fail(s: &str, begin: usize, end: usize) -> ! {\n     const MAX_DISPLAY_LENGTH: usize = 256;\n     let (truncated, s_trunc) = truncate_to_char_boundary(s, MAX_DISPLAY_LENGTH);"}, {"sha": "35a2956ee26b8715b7bedd632a27f5c86dc5ab91", "filename": "src/test/ui/rfc-2091-track-caller/std-panic-locations.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/50d2f302cbf512271eac3e6242f08e7d77e1a2f3/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fstd-panic-locations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50d2f302cbf512271eac3e6242f08e7d77e1a2f3/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fstd-panic-locations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fstd-panic-locations.rs?ref=50d2f302cbf512271eac3e6242f08e7d77e1a2f3", "patch": "@@ -2,10 +2,14 @@\n // ignore-wasm32-bare compiled with panic=abort by default\n \n #![feature(option_expect_none, option_unwrap_none)]\n+#![allow(unconditional_panic)]\n \n //! Test that panic locations for `#[track_caller]` functions in std have the correct\n //! location reported.\n \n+use std::collections::{BTreeMap, HashMap, VecDeque};\n+use std::ops::{Index, IndexMut};\n+\n fn main() {\n     // inspect the `PanicInfo` we receive to ensure the right file is the source\n     std::panic::set_hook(Box::new(|info| {\n@@ -35,4 +39,22 @@ fn main() {\n     let fine: Result<(), ()> = Ok(());\n     assert_panicked(|| fine.unwrap_err());\n     assert_panicked(|| fine.expect_err(\"\"));\n+\n+    let mut small = [0]; // the implementation backing str, vec, etc\n+    assert_panicked(move || { small.index(1); });\n+    assert_panicked(move || { small[1]; });\n+    assert_panicked(move || { small.index_mut(1); });\n+    assert_panicked(move || { small[1] += 1; });\n+\n+    let sorted: BTreeMap<bool, bool> = Default::default();\n+    assert_panicked(|| { sorted.index(&false); });\n+    assert_panicked(|| { sorted[&false]; });\n+\n+    let unsorted: HashMap<bool, bool> = Default::default();\n+    assert_panicked(|| { unsorted.index(&false); });\n+    assert_panicked(|| { unsorted[&false]; });\n+\n+    let weirdo: VecDeque<()> = Default::default();\n+    assert_panicked(|| { weirdo.index(1); });\n+    assert_panicked(|| { weirdo[1]; });\n }"}]}