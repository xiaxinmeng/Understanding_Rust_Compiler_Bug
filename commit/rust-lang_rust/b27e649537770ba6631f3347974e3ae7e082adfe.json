{"sha": "b27e649537770ba6631f3347974e3ae7e082adfe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyN2U2NDk1Mzc3NzBiYTY2MzFmMzM0Nzk3NGUzYWU3ZTA4MmFkZmU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-16T14:17:07Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-25T08:56:47Z"}, "message": "add a lint against references to packed fields", "tree": {"sha": "ec0a3951fda5ac5407c65e326513f8d8b61d1cf8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec0a3951fda5ac5407c65e326513f8d8b61d1cf8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b27e649537770ba6631f3347974e3ae7e082adfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b27e649537770ba6631f3347974e3ae7e082adfe", "html_url": "https://github.com/rust-lang/rust/commit/b27e649537770ba6631f3347974e3ae7e082adfe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b27e649537770ba6631f3347974e3ae7e082adfe/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2679c38fc33b5f69ce3c502c81315aa889035191", "url": "https://api.github.com/repos/rust-lang/rust/commits/2679c38fc33b5f69ce3c502c81315aa889035191", "html_url": "https://github.com/rust-lang/rust/commit/2679c38fc33b5f69ce3c502c81315aa889035191"}], "stats": {"total": 129, "additions": 127, "deletions": 2}, "files": [{"sha": "9e07a4599f6869e40ba7be37174a7a9075711ff0", "filename": "src/librustc_mir/transform/check_packed_ref.rs", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/b27e649537770ba6631f3347974e3ae7e082adfe/src%2Flibrustc_mir%2Ftransform%2Fcheck_packed_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b27e649537770ba6631f3347974e3ae7e082adfe/src%2Flibrustc_mir%2Ftransform%2Fcheck_packed_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_packed_ref.rs?ref=b27e649537770ba6631f3347974e3ae7e082adfe", "patch": "@@ -0,0 +1,66 @@\n+use rustc_middle::mir::visit::{PlaceContext, Visitor};\n+use rustc_middle::mir::*;\n+use rustc_middle::ty::{self, TyCtxt};\n+use rustc_session::lint::builtin::PACKED_REFERENCES;\n+\n+use crate::transform::{MirPass, MirSource};\n+use crate::util;\n+\n+pub struct CheckPackedRef;\n+\n+impl<'tcx> MirPass<'tcx> for CheckPackedRef {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n+        let param_env = tcx.param_env(src.instance.def_id());\n+        let source_info = SourceInfo::outermost(body.span);\n+        let mut checker = PackedRefChecker { body, tcx, param_env, source_info };\n+        checker.visit_body(&body);\n+    }\n+}\n+\n+struct PackedRefChecker<'a, 'tcx> {\n+    body: &'a Body<'tcx>,\n+    tcx: TyCtxt<'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n+    source_info: SourceInfo,\n+}\n+\n+impl<'a, 'tcx> Visitor<'tcx> for PackedRefChecker<'a, 'tcx> {\n+    fn visit_terminator(&mut self, terminator: &Terminator<'tcx>, location: Location) {\n+        // Make sure we know where in the MIR we are.\n+        self.source_info = terminator.source_info;\n+        self.super_terminator(terminator, location);\n+    }\n+\n+    fn visit_statement(&mut self, statement: &Statement<'tcx>, location: Location) {\n+        // Make sure we know where in the MIR we are.\n+        self.source_info = statement.source_info;\n+        self.super_statement(statement, location);\n+    }\n+\n+    fn visit_place(&mut self, place: &Place<'tcx>, context: PlaceContext, _location: Location) {\n+        if context.is_borrow() {\n+            if util::is_disaligned(self.tcx, self.body, self.param_env, *place) {\n+                let source_info = self.source_info;\n+                let lint_root = self.body.source_scopes[source_info.scope]\n+                    .local_data\n+                    .as_ref()\n+                    .assert_crate_local()\n+                    .lint_root;\n+                self.tcx.struct_span_lint_hir(\n+                    PACKED_REFERENCES,\n+                    lint_root,\n+                    source_info.span,\n+                    |lint| {\n+                        lint.build(&format!(\"reference to packed field is not allowed\",))\n+                            .note(\n+                                \"fields of packed structs might be misaligned, and creating \\\n+                                a misaligned reference is undefined behavior (even if that \\\n+                                reference is never dereferenced)\",\n+                            )\n+                            .emit()\n+                    },\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "7d2f89036248063fc86ea3d715b78f163a5f7036", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b27e649537770ba6631f3347974e3ae7e082adfe/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b27e649537770ba6631f3347974e3ae7e082adfe/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=b27e649537770ba6631f3347974e3ae7e082adfe", "patch": "@@ -17,6 +17,7 @@ pub mod add_call_guards;\n pub mod add_moves_for_packed_drops;\n pub mod add_retag;\n pub mod check_consts;\n+pub mod check_packed_ref;\n pub mod check_unsafety;\n pub mod cleanup_post_borrowck;\n pub mod const_prop;\n@@ -211,10 +212,11 @@ fn mir_const_qualif(tcx: TyCtxt<'_>, def_id: DefId) -> ConstQualifs {\n     validator.qualifs_in_return_place()\n }\n \n+/// Make MIR ready for const evaluation. This is run on all MIR, not just on consts!\n fn mir_const(tcx: TyCtxt<'_>, def_id: DefId) -> Steal<Body<'_>> {\n     let def_id = def_id.expect_local();\n \n-    // Unsafety check uses the raw mir, so make sure it is run\n+    // Unsafety check uses the raw mir, so make sure it is run.\n     let _ = tcx.unsafety_check_result(def_id);\n \n     let mut body = tcx.mir_built(def_id).steal();\n@@ -230,6 +232,8 @@ fn mir_const(tcx: TyCtxt<'_>, def_id: DefId) -> Steal<Body<'_>> {\n         None,\n         MirPhase::Const,\n         &[&[\n+            // MIR-level lints.\n+            &check_packed_ref::CheckPackedRef,\n             // What we need to do constant evaluation.\n             &simplify::SimplifyCfg::new(\"initial\"),\n             &rustc_peek::SanityCheck,"}, {"sha": "0753e9e4b7325f478740c3b22285886d8756def3", "filename": "src/librustc_session/lint/builtin.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b27e649537770ba6631f3347974e3ae7e082adfe/src%2Flibrustc_session%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b27e649537770ba6631f3347974e3ae7e082adfe/src%2Flibrustc_session%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Flint%2Fbuiltin.rs?ref=b27e649537770ba6631f3347974e3ae7e082adfe", "patch": "@@ -216,10 +216,16 @@ declare_lint! {\n     \"lints that have been renamed or removed\"\n }\n \n+declare_lint! {\n+    pub PACKED_REFERENCES,\n+    Allow,\n+    \"detects unaligned references to fields of packed structs\",\n+}\n+\n declare_lint! {\n     pub SAFE_PACKED_BORROWS,\n     Warn,\n-    \"safe borrows of fields of packed structs were was erroneously allowed\",\n+    \"safe borrows of fields of packed structs were erroneously allowed\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #46043 <https://github.com/rust-lang/rust/issues/46043>\",\n         edition: None,\n@@ -545,6 +551,7 @@ declare_lint_pass! {\n         INVALID_TYPE_PARAM_DEFAULT,\n         CONST_ERR,\n         RENAMED_AND_REMOVED_LINTS,\n+        PACKED_REFERENCES,\n         SAFE_PACKED_BORROWS,\n         PATTERNS_IN_FNS_WITHOUT_BODY,\n         MISSING_FRAGMENT_SPECIFIER,"}, {"sha": "d588ffd212006775d45f1f884f9dea2c3d608cb4", "filename": "src/test/ui/lint/packed_reference.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b27e649537770ba6631f3347974e3ae7e082adfe/src%2Ftest%2Fui%2Flint%2Fpacked_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b27e649537770ba6631f3347974e3ae7e082adfe/src%2Ftest%2Fui%2Flint%2Fpacked_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fpacked_reference.rs?ref=b27e649537770ba6631f3347974e3ae7e082adfe", "patch": "@@ -0,0 +1,25 @@\n+#![deny(packed_references)]\n+\n+#[repr(packed)]\n+pub struct Good {\n+    data: &'static u32,\n+    data2: [&'static u32; 2],\n+    aligned: [u8; 32],\n+}\n+\n+#[repr(packed)]\n+pub struct JustArray {\n+    array: [u32],\n+}\n+\n+fn main() {\n+    unsafe {\n+        let good = Good { data: &0, data2: [&0, &0], aligned: [0; 32] };\n+\n+        let _ = &good.data; //~ ERROR reference to packed field\n+        let _ = &good.data2[0]; //~ ERROR reference to packed field\n+        let _ = &*good.data; // ok, behind a pointer\n+        let _ = &good.aligned; // ok, has align 1\n+        let _ = &good.aligned[2]; // ok, has align 1\n+    }\n+}"}, {"sha": "094fb4f34d3290c825a7ca0680dd767f1402cf8d", "filename": "src/test/ui/lint/packed_reference.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b27e649537770ba6631f3347974e3ae7e082adfe/src%2Ftest%2Fui%2Flint%2Fpacked_reference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b27e649537770ba6631f3347974e3ae7e082adfe/src%2Ftest%2Fui%2Flint%2Fpacked_reference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fpacked_reference.stderr?ref=b27e649537770ba6631f3347974e3ae7e082adfe", "patch": "@@ -0,0 +1,23 @@\n+error: reference to packed field is not allowed\n+  --> $DIR/packed_reference.rs:19:17\n+   |\n+LL |         let _ = &good.data;\n+   |                 ^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/packed_reference.rs:1:9\n+   |\n+LL | #![deny(packed_references)]\n+   |         ^^^^^^^^^^^^^^^^^\n+   = note: fields of packed structs might be misaligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+\n+error: reference to packed field is not allowed\n+  --> $DIR/packed_reference.rs:20:17\n+   |\n+LL |         let _ = &good.data2[0];\n+   |                 ^^^^^^^^^^^^^^\n+   |\n+   = note: fields of packed structs might be misaligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+\n+error: aborting due to 2 previous errors\n+"}]}