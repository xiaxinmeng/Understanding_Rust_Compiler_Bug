{"sha": "3ab21e5ee082ff1cc535f23d1be5f153cb80a985", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhYjIxZTVlZTA4MmZmMWNjNTM1ZjIzZDFiZTVmMTUzY2I4MGE5ODU=", "commit": {"author": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-08-18T00:13:11Z"}, "committer": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-08-18T00:16:23Z"}, "message": "Better type inference for chans and ports.", "tree": {"sha": "660373019d8287feb0bebfda5001b37c0152886d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/660373019d8287feb0bebfda5001b37c0152886d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ab21e5ee082ff1cc535f23d1be5f153cb80a985", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ab21e5ee082ff1cc535f23d1be5f153cb80a985", "html_url": "https://github.com/rust-lang/rust/commit/3ab21e5ee082ff1cc535f23d1be5f153cb80a985", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ab21e5ee082ff1cc535f23d1be5f153cb80a985/comments", "author": null, "committer": null, "parents": [{"sha": "f023f8209040554839dc7bc91d9f796a5ff7f247", "url": "https://api.github.com/repos/rust-lang/rust/commits/f023f8209040554839dc7bc91d9f796a5ff7f247", "html_url": "https://github.com/rust-lang/rust/commit/f023f8209040554839dc7bc91d9f796a5ff7f247"}], "stats": {"total": 124, "additions": 65, "deletions": 59}, "files": [{"sha": "615686a49e04303d1bdb40d548ea10011923053f", "filename": "src/lib/comm.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3ab21e5ee082ff1cc535f23d1be5f153cb80a985/src%2Flib%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab21e5ee082ff1cc535f23d1be5f153cb80a985/src%2Flib%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fcomm.rs?ref=3ab21e5ee082ff1cc535f23d1be5f153cb80a985", "patch": "@@ -6,7 +6,7 @@ import task::task_id;\n \n export _chan;\n export _port;\n-\n+export chan_handle;\n export mk_port;\n export send;\n export recv;\n@@ -32,22 +32,21 @@ native \"rust-intrinsic\" mod rusti {\n \n type port_id = int;\n \n-type chan<~T> = {\n-    task : task_id,\n-    port : port_id\n-};\n+type chan_handle<~T> = { task : task_id, port : port_id};\n+\n+tag chan<~T> { chan_t(chan_handle<T>); }\n type _chan<~T> = chan<T>;\n \n resource port_ptr(po: *rustrt::rust_port) {\n     rustrt::drop_port(po);\n     rustrt::del_port(po);\n }\n \n-type port<~T> = @port_ptr;\n+tag port<~T> { port_t(@port_ptr); }\n \n obj port_obj<~T>(raw_port : port<T>) {\n-    fn mk_chan() -> _chan<T> {\n-        chan::<T>(raw_port)\n+    fn mk_chan() -> chan<T> {\n+        chan(raw_port)\n     }\n \n     fn recv() -> T {\n@@ -60,21 +59,21 @@ fn mk_port<~T>() -> _port<T> {\n     ret port_obj::<T>(port::<T>());\n }\n \n-fn send<~T>(ch : chan<T>, data : -T) {\n+fn send<~T>(ch : &chan<T>, data : -T) {\n     rustrt::chan_id_send(ch.task, ch.port, data);\n }\n \n fn port<~T>() -> port<T> {\n-    @port_ptr(rustrt::new_port(sys::size_of::<T>()))\n+    port_t(@port_ptr(rustrt::new_port(sys::size_of::<T>())))\n }\n \n-fn recv<~T>(p : port<T>) -> T {\n-    ret rusti::recv(**p)\n+fn recv<~T>(p : &port<T>) -> T {\n+    ret rusti::recv(***p)\n }\n \n-fn chan<~T>(p : port<T>) -> chan<T> {\n-    {\n+fn chan<~T>(p : &port<T>) -> chan<T> {\n+    chan_t({\n         task: task::get_task_id(),\n-        port: rustrt::get_port_id(**p)\n-    }\n+        port: rustrt::get_port_id(***p)\n+    })\n }"}, {"sha": "9ed8e8ecdf04053dfdc1d79eefb4b5ae5fe5d1a6", "filename": "src/lib/task.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3ab21e5ee082ff1cc535f23d1be5f153cb80a985/src%2Flib%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab21e5ee082ff1cc535f23d1be5f153cb80a985/src%2Flib%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ftask.rs?ref=3ab21e5ee082ff1cc535f23d1be5f153cb80a985", "patch": "@@ -1,6 +1,5 @@\n import cast = unsafe::reinterpret_cast;\n import comm;\n-import comm::_chan;\n import option::some;\n import option::none;\n import option = option::t;\n@@ -33,7 +32,7 @@ native \"rust\" mod rustrt {\n type rust_task = {\n     id : task,\n     mutable notify_enabled : u8,\n-    mutable notify_chan : _chan<task_notification>,\n+    mutable notify_chan : comm::chan_handle<task_notification>,\n     ctx : task_context,\n     stack_ptr : *u8\n };\n@@ -76,14 +75,12 @@ tag task_notification {\n fn join(task_port : (task_id, comm::port<task_notification>))\n     -> task_result {\n     let (id, port) = task_port;\n-    while true {\n-        alt comm::recv::<task_notification>(port) {\n-          exit(_id, res) {\n-            if _id == id { ret res }\n-          }\n-        }\n+    alt comm::recv::<task_notification>(port) {\n+      exit(_id, res) {\n+        if _id == id { ret res }\n+        else { fail #fmt(\"join received id %d, expected %d\", _id, id) }\n+      }\n     }\n-    fail\n }\n \n fn join_id(t : task_id) -> task_result {\n@@ -108,7 +105,7 @@ fn spawn(thunk : -fn() -> ()) -> task {\n     spawn_inner(thunk, none)\n }\n \n-fn spawn_notify(thunk : -fn() -> (), notify : _chan<task_notification>)\n+fn spawn_notify(thunk : -fn() -> (), notify : comm::chan<task_notification>)\n     -> task {\n     spawn_inner(thunk, some(notify))\n }\n@@ -121,7 +118,7 @@ fn spawn_joinable(thunk : -fn()) -> (task_id, comm::port<task_notification>) {\n \n // FIXME: make this a fn~ once those are supported.\n fn spawn_inner(thunk : -fn() -> (),\n-               notify : option<_chan<task_notification>>)\n+               notify : option<comm::chan<task_notification>>)\n     -> task_id {\n     let id = rustrt::new_task();\n \n@@ -144,7 +141,7 @@ fn spawn_inner(thunk : -fn() -> (),\n     alt notify {\n       some(c) {\n         (**task_ptr).notify_enabled = 1u8;\n-        (**task_ptr).notify_chan = c;\n+        (**task_ptr).notify_chan = *c;\n       }\n       none {}\n     };"}, {"sha": "68df59be52167cbe61a6dfc7ab29da3afa7e40e5", "filename": "src/test/compiletest/procsrv.rs", "status": "modified", "additions": 18, "deletions": 24, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/3ab21e5ee082ff1cc535f23d1be5f153cb80a985/src%2Ftest%2Fcompiletest%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab21e5ee082ff1cc535f23d1be5f153cb80a985/src%2Ftest%2Fcompiletest%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompiletest%2Fprocsrv.rs?ref=3ab21e5ee082ff1cc535f23d1be5f153cb80a985", "patch": "@@ -14,10 +14,10 @@ import std::os;\n import std::run;\n import std::io;\n import std::str;\n-import std::comm::_chan;\n-import std::comm::mk_port;\n-import std::comm::_port;\n+import std::comm::chan;\n+import std::comm::port;\n import std::comm::send;\n+import std::comm::recv;\n \n export handle;\n export mk;\n@@ -26,27 +26,27 @@ export run;\n export close;\n export reqchan;\n \n-type reqchan = _chan<request>;\n+type reqchan = chan<request>;\n \n type handle = {task: option::t<task_id>, chan: reqchan};\n \n tag request {\n-    exec([u8], [u8], [[u8]], _chan<response>);\n+    exec([u8], [u8], [[u8]], chan<response>);\n     stop;\n }\n \n type response = {pid: int, infd: int, outfd: int, errfd: int};\n \n fn mk() -> handle {\n-    let setupport = mk_port();\n-    let task = task::_spawn(bind fn(setupchan: _chan<_chan<request>>) {\n-        let reqport = mk_port();\n-        let reqchan = reqport.mk_chan();\n+    let setupport = port();\n+    let task = task::spawn(bind fn(setupchan: chan<chan<request>>) {\n+        let reqport = port();\n+        let reqchan = chan(reqport);\n         send(setupchan, reqchan);\n         worker(reqport);\n-    } (setupport.mk_chan()));\n+    } (chan(setupport)));\n     ret {task: option::some(task),\n-         chan: setupport.recv()\n+         chan: recv(setupport)\n         };\n }\n \n@@ -60,13 +60,13 @@ fn close(handle: &handle) {\n fn run(handle: &handle, lib_path: &str,\n        prog: &str, args: &[str], input: &option::t<str>) ->\n {status: int, out: str, err: str} {\n-    let p = mk_port::<response>();\n-    let ch = p.mk_chan();\n+    let p = port();\n+    let ch = chan(p);\n     send(handle.chan, exec(str::bytes(lib_path),\n                            str::bytes(prog),\n                            clone_ivecstr(args),\n                            ch));\n-    let resp = p.recv();\n+    let resp = recv(p);\n \n     writeclose(resp.infd, input);\n     let output = readclose(resp.outfd);\n@@ -99,18 +99,12 @@ fn readclose(fd: int) -> str {\n     ret buf;\n }\n \n-fn worker(p: _port<request>) {\n+fn worker(p: port<request>) {\n \n     // FIXME (787): If we declare this inside of the while loop and then\n     // break out of it before it's ever initialized (i.e. we don't run\n-    // any tests), then the cleanups will puke, so we're initializing it\n-    // here with defaults.\n-    let execparms = {\n-        lib_path: \"\",\n-        prog: \"\",\n-        args: ~[],\n-        respchan: p.mk_chan()\n-    };\n+    // any tests), then the cleanups will puke.\n+    let execparms;\n \n     while true {\n         // FIXME: Sending strings across channels seems to still\n@@ -124,7 +118,7 @@ fn worker(p: _port<request>) {\n             // put the entire alt in another block to make sure the exec\n             // message goes out of scope. Seems like the scoping rules for\n             // the alt discriminant are wrong.\n-            alt p.recv() {\n+            alt recv(p) {\n               exec(lib_path, prog, args, respchan) {\n                 {\n                     lib_path: str::unsafe_from_bytes(lib_path),"}, {"sha": "5954ba530658a7b86a878c81cf99bbc4eb084725", "filename": "src/test/run-fail/port-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab21e5ee082ff1cc535f23d1be5f153cb80a985/src%2Ftest%2Frun-fail%2Fport-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab21e5ee082ff1cc535f23d1be5f153cb80a985/src%2Ftest%2Frun-fail%2Fport-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fport-type.rs?ref=3ab21e5ee082ff1cc535f23d1be5f153cb80a985", "patch": "@@ -4,7 +4,7 @@ import std::comm::_chan;\n import std::comm::mk_port;\n import std::comm::send;\n \n-fn echo<~T>(c: _chan<T>, oc: _chan<_chan<T>>) {\n+fn echo<~T>(c: &_chan<T>, oc: &_chan<_chan<T>>) {\n     // Tests that the type argument in port gets\n     // visited\n     let p = mk_port::<T>();"}, {"sha": "cfc358a9106665bdd2ba2d77e70c2a7ccbae5c47", "filename": "src/test/run-pass/send-type-inference.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3ab21e5ee082ff1cc535f23d1be5f153cb80a985/src%2Ftest%2Frun-pass%2Fsend-type-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab21e5ee082ff1cc535f23d1be5f153cb80a985/src%2Ftest%2Frun-pass%2Fsend-type-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend-type-inference.rs?ref=3ab21e5ee082ff1cc535f23d1be5f153cb80a985", "patch": "@@ -1,13 +1,13 @@\n use std;\n-import std::comm::_chan;\n+import std::comm::chan;\n import std::comm::send;\n-import std::comm::mk_port;\n+import std::comm::port;\n \n // tests that ctrl's type gets inferred properly\n-type command<K, V> = {key: K, val: V};\n+type command<~K, ~V> = {key: K, val: V};\n \n-fn cache_server<K, V>(c: _chan<_chan<command<K, V>>>) {\n-    let ctrl = mk_port::<_chan<command<K, V>>>();\n-    send(c, ctrl.mk_chan());\n+fn cache_server<~K, ~V>(c: &chan<chan<command<K, V>>>) {\n+    let ctrl = port();\n+    send(c, chan(ctrl));\n }\n fn main() { }"}, {"sha": "7d20042e8664d47b2c0f7a3658630f46f286557c", "filename": "src/test/stdtest/comm.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3ab21e5ee082ff1cc535f23d1be5f153cb80a985/src%2Ftest%2Fstdtest%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab21e5ee082ff1cc535f23d1be5f153cb80a985/src%2Ftest%2Fstdtest%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fcomm.rs?ref=3ab21e5ee082ff1cc535f23d1be5f153cb80a985", "patch": "@@ -25,3 +25,19 @@ fn send_recv_fn() {\n     comm::send(c, 42);\n     assert(comm::recv(p) == 42);\n }\n+\n+#[test]\n+fn send_recv_fn_infer() {\n+    let p = comm::port();\n+    let c = comm::chan(p);\n+    comm::send(c, 42);\n+    assert(comm::recv(p) == 42);\n+}\n+\n+#[test]\n+fn chan_chan() {\n+    let p = comm::port(), p2 = comm::port::<int>();\n+    let c = comm::chan(p);\n+    comm::send(c, comm::chan(p2));\n+    let c2 = comm::recv(p);\n+}"}]}