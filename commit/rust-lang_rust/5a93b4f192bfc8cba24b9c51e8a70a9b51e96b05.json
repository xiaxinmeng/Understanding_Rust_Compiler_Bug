{"sha": "5a93b4f192bfc8cba24b9c51e8a70a9b51e96b05", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhOTNiNGYxOTJiZmM4Y2JhMjRiOWM1MWU4YTcwYTliNTFlOTZiMDU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-05-13T04:39:26Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-05-15T01:29:12Z"}, "message": "libsemver: Remove all uses of `~str` from `libsemver`", "tree": {"sha": "62be32af653962dbc879b364434b8b3acb8df0d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62be32af653962dbc879b364434b8b3acb8df0d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a93b4f192bfc8cba24b9c51e8a70a9b51e96b05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a93b4f192bfc8cba24b9c51e8a70a9b51e96b05", "html_url": "https://github.com/rust-lang/rust/commit/5a93b4f192bfc8cba24b9c51e8a70a9b51e96b05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a93b4f192bfc8cba24b9c51e8a70a9b51e96b05/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30dbcf5f88b20db3ea1c70bb50cb37fa9364f1a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/30dbcf5f88b20db3ea1c70bb50cb37fa9364f1a9", "html_url": "https://github.com/rust-lang/rust/commit/30dbcf5f88b20db3ea1c70bb50cb37fa9364f1a9"}], "stats": {"total": 46, "additions": 25, "deletions": 21}, "files": [{"sha": "3035b305617879d6fa62300c1ad07be5417e9066", "filename": "src/libsemver/lib.rs", "status": "modified", "additions": 25, "deletions": 21, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/5a93b4f192bfc8cba24b9c51e8a70a9b51e96b05/src%2Flibsemver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a93b4f192bfc8cba24b9c51e8a70a9b51e96b05/src%2Flibsemver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsemver%2Flib.rs?ref=5a93b4f192bfc8cba24b9c51e8a70a9b51e96b05", "patch": "@@ -50,7 +50,7 @@ use std::strbuf::StrBuf;\n #[allow(missing_doc)]\n pub enum Identifier {\n     Numeric(uint),\n-    AlphaNumeric(~str)\n+    AlphaNumeric(StrBuf)\n }\n \n impl cmp::Ord for Identifier {\n@@ -158,7 +158,7 @@ impl cmp::Ord for Version {\n }\n \n fn take_nonempty_prefix<T:Iterator<char>>(rdr: &mut T, pred: |char| -> bool)\n-                        -> (~str, Option<char>) {\n+                        -> (StrBuf, Option<char>) {\n     let mut buf = StrBuf::new();\n     let mut ch = rdr.next();\n     loop {\n@@ -171,21 +171,21 @@ fn take_nonempty_prefix<T:Iterator<char>>(rdr: &mut T, pred: |char| -> bool)\n             }\n         }\n     }\n-    (buf.into_owned(), ch)\n+    (buf, ch)\n }\n \n fn take_num<T: Iterator<char>>(rdr: &mut T) -> Option<(uint, Option<char>)> {\n     let (s, ch) = take_nonempty_prefix(rdr, char::is_digit);\n-    match from_str::<uint>(s) {\n+    match from_str::<uint>(s.as_slice()) {\n         None => None,\n         Some(i) => Some((i, ch))\n     }\n }\n \n fn take_ident<T: Iterator<char>>(rdr: &mut T) -> Option<(Identifier, Option<char>)> {\n     let (s,ch) = take_nonempty_prefix(rdr, char::is_alphanumeric);\n-    if s.chars().all(char::is_digit) {\n-        match from_str::<uint>(s) {\n+    if s.as_slice().chars().all(char::is_digit) {\n+        match from_str::<uint>(s.as_slice()) {\n             None => None,\n             Some(i) => Some((Numeric(i), ch))\n         }\n@@ -308,52 +308,52 @@ fn test_parse() {\n         major: 1u,\n         minor: 2u,\n         patch: 3u,\n-        pre: vec!(AlphaNumeric(\"alpha1\".to_owned())),\n+        pre: vec!(AlphaNumeric(\"alpha1\".to_strbuf())),\n         build: vec!(),\n     }));\n     assert!(parse(\"  1.2.3-alpha1  \") == Some(Version {\n         major: 1u,\n         minor: 2u,\n         patch: 3u,\n-        pre: vec!(AlphaNumeric(\"alpha1\".to_owned())),\n+        pre: vec!(AlphaNumeric(\"alpha1\".to_strbuf())),\n         build: vec!()\n     }));\n     assert!(parse(\"1.2.3+build5\") == Some(Version {\n         major: 1u,\n         minor: 2u,\n         patch: 3u,\n         pre: vec!(),\n-        build: vec!(AlphaNumeric(\"build5\".to_owned()))\n+        build: vec!(AlphaNumeric(\"build5\".to_strbuf()))\n     }));\n     assert!(parse(\"  1.2.3+build5  \") == Some(Version {\n         major: 1u,\n         minor: 2u,\n         patch: 3u,\n         pre: vec!(),\n-        build: vec!(AlphaNumeric(\"build5\".to_owned()))\n+        build: vec!(AlphaNumeric(\"build5\".to_strbuf()))\n     }));\n     assert!(parse(\"1.2.3-alpha1+build5\") == Some(Version {\n         major: 1u,\n         minor: 2u,\n         patch: 3u,\n-        pre: vec!(AlphaNumeric(\"alpha1\".to_owned())),\n-        build: vec!(AlphaNumeric(\"build5\".to_owned()))\n+        pre: vec!(AlphaNumeric(\"alpha1\".to_strbuf())),\n+        build: vec!(AlphaNumeric(\"build5\".to_strbuf()))\n     }));\n     assert!(parse(\"  1.2.3-alpha1+build5  \") == Some(Version {\n         major: 1u,\n         minor: 2u,\n         patch: 3u,\n-        pre: vec!(AlphaNumeric(\"alpha1\".to_owned())),\n-        build: vec!(AlphaNumeric(\"build5\".to_owned()))\n+        pre: vec!(AlphaNumeric(\"alpha1\".to_strbuf())),\n+        build: vec!(AlphaNumeric(\"build5\".to_strbuf()))\n     }));\n     assert!(parse(\"1.2.3-1.alpha1.9+build5.7.3aedf  \") == Some(Version {\n         major: 1u,\n         minor: 2u,\n         patch: 3u,\n-        pre: vec!(Numeric(1),AlphaNumeric(\"alpha1\".to_owned()),Numeric(9)),\n-        build: vec!(AlphaNumeric(\"build5\".to_owned()),\n+        pre: vec!(Numeric(1),AlphaNumeric(\"alpha1\".to_strbuf()),Numeric(9)),\n+        build: vec!(AlphaNumeric(\"build5\".to_strbuf()),\n                  Numeric(7),\n-                 AlphaNumeric(\"3aedf\".to_owned()))\n+                 AlphaNumeric(\"3aedf\".to_strbuf()))\n     }));\n \n }\n@@ -377,10 +377,14 @@ fn test_ne() {\n \n #[test]\n fn test_show() {\n-    assert_eq!(format!(\"{}\", parse(\"1.2.3\").unwrap()), \"1.2.3\".to_owned());\n-    assert_eq!(format!(\"{}\", parse(\"1.2.3-alpha1\").unwrap()), \"1.2.3-alpha1\".to_owned());\n-    assert_eq!(format!(\"{}\", parse(\"1.2.3+build.42\").unwrap()), \"1.2.3+build.42\".to_owned());\n-    assert_eq!(format!(\"{}\", parse(\"1.2.3-alpha1+42\").unwrap()), \"1.2.3-alpha1+42\".to_owned());\n+    assert_eq!(format_strbuf!(\"{}\", parse(\"1.2.3\").unwrap()),\n+               \"1.2.3\".to_strbuf());\n+    assert_eq!(format_strbuf!(\"{}\", parse(\"1.2.3-alpha1\").unwrap()),\n+               \"1.2.3-alpha1\".to_strbuf());\n+    assert_eq!(format_strbuf!(\"{}\", parse(\"1.2.3+build.42\").unwrap()),\n+               \"1.2.3+build.42\".to_strbuf());\n+    assert_eq!(format_strbuf!(\"{}\", parse(\"1.2.3-alpha1+42\").unwrap()),\n+               \"1.2.3-alpha1+42\".to_strbuf());\n }\n \n #[test]"}]}