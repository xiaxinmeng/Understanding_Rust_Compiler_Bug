{"sha": "61de47dd259811e23fc85e3250974ba5b583e02b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxZGU0N2RkMjU5ODExZTIzZmM4NWUzMjUwOTc0YmE1YjU4M2UwMmI=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-11-18T09:43:50Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-12-10T13:03:25Z"}, "message": "sorted_map: make the impls of Index and get match ones from BTreeMap", "tree": {"sha": "17f9a679fbda4b71cf84bd372524f7b41f7fe75f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17f9a679fbda4b71cf84bd372524f7b41f7fe75f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61de47dd259811e23fc85e3250974ba5b583e02b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61de47dd259811e23fc85e3250974ba5b583e02b", "html_url": "https://github.com/rust-lang/rust/commit/61de47dd259811e23fc85e3250974ba5b583e02b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61de47dd259811e23fc85e3250974ba5b583e02b/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "875ce5f851c3773cea3fb4af8d9e771e3e68dbc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/875ce5f851c3773cea3fb4af8d9e771e3e68dbc5", "html_url": "https://github.com/rust-lang/rust/commit/875ce5f851c3773cea3fb4af8d9e771e3e68dbc5"}], "stats": {"total": 38, "additions": 26, "deletions": 12}, "files": [{"sha": "5f45f430183bcc9802dc91223bb436d38d4b2d24", "filename": "src/librustc_data_structures/sorted_map.rs", "status": "modified", "additions": 26, "deletions": 12, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/61de47dd259811e23fc85e3250974ba5b583e02b/src%2Flibrustc_data_structures%2Fsorted_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61de47dd259811e23fc85e3250974ba5b583e02b/src%2Flibrustc_data_structures%2Fsorted_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsorted_map.rs?ref=61de47dd259811e23fc85e3250974ba5b583e02b", "patch": "@@ -82,7 +82,10 @@ impl<K: Ord, V> SortedMap<K, V> {\n     }\n \n     #[inline]\n-    pub fn get(&self, key: &K) -> Option<&V> {\n+    pub fn get<Q>(&self, key: &Q) -> Option<&V>\n+        where K: Borrow<Q>,\n+              Q: Ord + ?Sized\n+    {\n         match self.lookup_index_for(key) {\n             Ok(index) => {\n                 unsafe {\n@@ -96,7 +99,10 @@ impl<K: Ord, V> SortedMap<K, V> {\n     }\n \n     #[inline]\n-    pub fn get_mut(&mut self, key: &K) -> Option<&mut V> {\n+    pub fn get_mut<Q>(&mut self, key: &Q) -> Option<&mut V>\n+        where K: Borrow<Q>,\n+              Q: Ord + ?Sized\n+    {\n         match self.lookup_index_for(key) {\n             Ok(index) => {\n                 unsafe {\n@@ -207,8 +213,11 @@ impl<K: Ord, V> SortedMap<K, V> {\n \n     /// Looks up the key in `self.data` via `slice::binary_search()`.\n     #[inline(always)]\n-    fn lookup_index_for(&self, key: &K) -> Result<usize, usize> {\n-        self.data.binary_search_by(|&(ref x, _)| x.cmp(key))\n+    fn lookup_index_for<Q>(&self, key: &Q) -> Result<usize, usize>\n+        where K: Borrow<Q>,\n+              Q: Ord + ?Sized\n+    {\n+        self.data.binary_search_by(|&(ref x, _)| x.borrow().cmp(key))\n     }\n \n     #[inline]\n@@ -257,18 +266,23 @@ impl<K: Ord, V> IntoIterator for SortedMap<K, V> {\n     }\n }\n \n-impl<K: Ord, V, Q: Borrow<K>> Index<Q> for SortedMap<K, V> {\n+impl<'a, K, Q, V> Index<&'a Q> for SortedMap<K, V>\n+    where K: Ord + Borrow<Q>,\n+          Q: Ord + ?Sized\n+{\n     type Output = V;\n-    fn index(&self, index: Q) -> &Self::Output {\n-        let k: &K = index.borrow();\n-        self.get(k).unwrap()\n+\n+    fn index(&self, key: &Q) -> &Self::Output {\n+        self.get(key).expect(\"no entry found for key\")\n     }\n }\n \n-impl<K: Ord, V, Q: Borrow<K>> IndexMut<Q> for SortedMap<K, V> {\n-    fn index_mut(&mut self, index: Q) -> &mut Self::Output {\n-        let k: &K = index.borrow();\n-        self.get_mut(k).unwrap()\n+impl<'a, K, Q, V> IndexMut<&'a Q> for SortedMap<K, V>\n+    where K: Ord + Borrow<Q>,\n+          Q: Ord + ?Sized\n+{\n+    fn index_mut(&mut self, key: &Q) -> &mut Self::Output {\n+        self.get_mut(key).expect(\"no entry found for key\")\n     }\n }\n "}]}