{"sha": "5bc286806023ef4d63bceec4ba703399ba9ee2f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViYzI4NjgwNjAyM2VmNGQ2M2JjZWVjNGJhNzAzMzk5YmE5ZWUyZjc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-02-03T21:38:48Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-03-25T10:44:14Z"}, "message": "make `const_expr_to_pat` fallible (but never have it actually fail)", "tree": {"sha": "17d96f6670588cb33d06577867214d2ff8697fb5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17d96f6670588cb33d06577867214d2ff8697fb5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5bc286806023ef4d63bceec4ba703399ba9ee2f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5bc286806023ef4d63bceec4ba703399ba9ee2f7", "html_url": "https://github.com/rust-lang/rust/commit/5bc286806023ef4d63bceec4ba703399ba9ee2f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5bc286806023ef4d63bceec4ba703399ba9ee2f7/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40deb279a87e640f799140e9f19b3e64623c30da", "url": "https://api.github.com/repos/rust-lang/rust/commits/40deb279a87e640f799140e9f19b3e64623c30da", "html_url": "https://github.com/rust-lang/rust/commit/40deb279a87e640f799140e9f19b3e64623c30da"}], "stats": {"total": 78, "additions": 52, "deletions": 26}, "files": [{"sha": "77b0995827808fdbbf7114960fe5908889f74e3c", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5bc286806023ef4d63bceec4ba703399ba9ee2f7/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bc286806023ef4d63bceec4ba703399ba9ee2f7/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=5bc286806023ef4d63bceec4ba703399ba9ee2f7", "patch": "@@ -478,15 +478,25 @@ impl<'a, 'tcx> Folder for StaticInliner<'a, 'tcx> {\n                     Some(Def::Const(did)) => {\n                         let substs = Some(self.tcx.node_id_item_substs(pat.id).substs);\n                         if let Some((const_expr, _)) = lookup_const_by_id(self.tcx, did, substs) {\n-                            const_expr_to_pat(self.tcx, const_expr, pat.span).map(|new_pat| {\n-\n-                                if let Some(ref mut renaming_map) = self.renaming_map {\n-                                    // Record any renamings we do here\n-                                    record_renamings(const_expr, &pat, renaming_map);\n+                            match const_expr_to_pat(self.tcx, const_expr, pat.span) {\n+                                Ok(new_pat) => {\n+                                    if let Some(ref mut map) = self.renaming_map {\n+                                        // Record any renamings we do here\n+                                        record_renamings(const_expr, &pat, map);\n+                                    }\n+                                    new_pat\n                                 }\n-\n-                                new_pat\n-                            })\n+                                Err(def_id) => {\n+                                    // TODO back-compat\n+                                    self.failed = true;\n+                                    self.tcx.sess.span_err(\n+                                        pat.span,\n+                                        &format!(\"constants of the type `{}` \\\n+                                                  cannot be used in patterns\",\n+                                                 self.tcx.item_path_str(def_id)));\n+                                    pat\n+                                }\n+                            }\n                         } else {\n                             self.failed = true;\n                             span_err!(self.tcx.sess, pat.span, E0158,"}, {"sha": "af1e9d60be44150e1adcd1155394df1589d5d9ff", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 25, "deletions": 15, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/5bc286806023ef4d63bceec4ba703399ba9ee2f7/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bc286806023ef4d63bceec4ba703399ba9ee2f7/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=5bc286806023ef4d63bceec4ba703399ba9ee2f7", "patch": "@@ -323,10 +323,13 @@ impl ConstVal {\n     }\n }\n \n-pub fn const_expr_to_pat(tcx: &TyCtxt, expr: &Expr, span: Span) -> P<hir::Pat> {\n+pub fn const_expr_to_pat(tcx: &ty::TyCtxt, expr: &Expr, span: Span)\n+                         -> Result<P<hir::Pat>, DefId> {\n     let pat = match expr.node {\n         hir::ExprTup(ref exprs) =>\n-            PatKind::Tup(exprs.iter().map(|expr| const_expr_to_pat(tcx, &expr, span)).collect()),\n+            PatKind::Tup(try!(exprs.iter()\n+                                   .map(|expr| const_expr_to_pat(tcx, &expr, span))\n+                                   .collect())),\n \n         hir::ExprCall(ref callee, ref args) => {\n             let def = *tcx.def_map.borrow().get(&callee.id).unwrap();\n@@ -336,31 +339,38 @@ pub fn const_expr_to_pat(tcx: &TyCtxt, expr: &Expr, span: Span) -> P<hir::Pat> {\n             let path = match def.full_def() {\n                 Def::Struct(def_id) => def_to_path(tcx, def_id),\n                 Def::Variant(_, variant_did) => def_to_path(tcx, variant_did),\n-                Def::Fn(..) => return P(hir::Pat {\n+                Def::Fn(..) => return Ok(P(hir::Pat {\n                     id: expr.id,\n                     node: PatKind::Lit(P(expr.clone())),\n                     span: span,\n-                }),\n+                })),\n                 _ => unreachable!()\n             };\n-            let pats = args.iter().map(|expr| const_expr_to_pat(tcx, &expr, span)).collect();\n+            let pats = try!(args.iter()\n+                                .map(|expr| const_expr_to_pat(tcx, &**expr, span))\n+                                .collect());\n             PatKind::TupleStruct(path, Some(pats))\n         }\n \n         hir::ExprStruct(ref path, ref fields, None) => {\n-            let field_pats = fields.iter().map(|field| codemap::Spanned {\n-                span: codemap::DUMMY_SP,\n-                node: hir::FieldPat {\n-                    name: field.name.node,\n-                    pat: const_expr_to_pat(tcx, &field.expr, span),\n-                    is_shorthand: false,\n-                },\n-            }).collect();\n+            let field_pats =\n+                try!(fields.iter()\n+                           .map(|field| Ok(codemap::Spanned {\n+                               span: codemap::DUMMY_SP,\n+                               node: hir::FieldPat {\n+                                   name: field.name.node,\n+                                   pat: try!(const_expr_to_pat(tcx, &field.expr, span)),\n+                                   is_shorthand: false,\n+                               },\n+                           }))\n+                           .collect());\n             PatKind::Struct(path.clone(), field_pats, false)\n         }\n \n         hir::ExprVec(ref exprs) => {\n-            let pats = exprs.iter().map(|expr| const_expr_to_pat(tcx, &expr, span)).collect();\n+            let pats = try!(exprs.iter()\n+                                 .map(|expr| const_expr_to_pat(tcx, &expr, span))\n+                                 .collect());\n             PatKind::Vec(pats, None, hir::HirVec::new())\n         }\n \n@@ -381,7 +391,7 @@ pub fn const_expr_to_pat(tcx: &TyCtxt, expr: &Expr, span: Span) -> P<hir::Pat> {\n \n         _ => PatKind::Lit(P(expr.clone()))\n     };\n-    P(hir::Pat { id: expr.id, node: pat, span: span })\n+    Ok(P(hir::Pat { id: expr.id, node: pat, span: span }))\n }\n \n pub fn eval_const_expr(tcx: &TyCtxt, e: &Expr) -> ConstVal {"}, {"sha": "bfb8d1c401aaac6e26ef2c9e194fcab285c6140e", "filename": "src/librustc_mir/hair/cx/pattern.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5bc286806023ef4d63bceec4ba703399ba9ee2f7/src%2Flibrustc_mir%2Fhair%2Fcx%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bc286806023ef4d63bceec4ba703399ba9ee2f7/src%2Flibrustc_mir%2Fhair%2Fcx%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fpattern.rs?ref=5bc286806023ef4d63bceec4ba703399ba9ee2f7", "patch": "@@ -90,9 +90,15 @@ impl<'patcx, 'cx, 'tcx> PatCx<'patcx, 'cx, 'tcx> {\n                         let substs = Some(self.cx.tcx.node_id_item_substs(pat.id).substs);\n                         match const_eval::lookup_const_by_id(self.cx.tcx, def_id, substs) {\n                             Some((const_expr, _const_ty)) => {\n-                                let pat = const_eval::const_expr_to_pat(self.cx.tcx, const_expr,\n-                                                                        pat.span);\n-                                return self.to_pattern(&pat);\n+                                match const_eval::const_expr_to_pat(self.cx.tcx,\n+                                                                    const_expr,\n+                                                                    pat.span) {\n+                                    Ok(pat) =>\n+                                        return self.to_pattern(&pat),\n+                                    Err(_) =>\n+                                        self.cx.tcx.sess.span_bug(\n+                                            pat.span, \"illegal constant\"),\n+                                }\n                             }\n                             None => {\n                                 self.cx.tcx.sess.span_bug("}]}