{"sha": "0ff7021dd372209c5380196ef7f979548c32bab0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmZjcwMjFkZDM3MjIwOWM1MzgwMTk2ZWY3Zjk3OTU0OGMzMmJhYjA=", "commit": {"author": {"name": "Masood Malekghassemi", "email": "atash@google.com", "date": "2016-02-11T08:03:37Z"}, "committer": {"name": "Masood Malekghassemi", "email": "atash@google.com", "date": "2016-02-11T08:03:37Z"}, "message": "Move FulfillmentContext out of InferCtxt", "tree": {"sha": "9caa453282d11f8049a5f2334c2ec0c3ecde5d43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9caa453282d11f8049a5f2334c2ec0c3ecde5d43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ff7021dd372209c5380196ef7f979548c32bab0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ff7021dd372209c5380196ef7f979548c32bab0", "html_url": "https://github.com/rust-lang/rust/commit/0ff7021dd372209c5380196ef7f979548c32bab0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ff7021dd372209c5380196ef7f979548c32bab0/comments", "author": {"login": "soltanmm-google", "id": 21180148, "node_id": "MDQ6VXNlcjIxMTgwMTQ4", "avatar_url": "https://avatars.githubusercontent.com/u/21180148?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soltanmm-google", "html_url": "https://github.com/soltanmm-google", "followers_url": "https://api.github.com/users/soltanmm-google/followers", "following_url": "https://api.github.com/users/soltanmm-google/following{/other_user}", "gists_url": "https://api.github.com/users/soltanmm-google/gists{/gist_id}", "starred_url": "https://api.github.com/users/soltanmm-google/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soltanmm-google/subscriptions", "organizations_url": "https://api.github.com/users/soltanmm-google/orgs", "repos_url": "https://api.github.com/users/soltanmm-google/repos", "events_url": "https://api.github.com/users/soltanmm-google/events{/privacy}", "received_events_url": "https://api.github.com/users/soltanmm-google/received_events", "type": "User", "site_admin": false}, "committer": {"login": "soltanmm-google", "id": 21180148, "node_id": "MDQ6VXNlcjIxMTgwMTQ4", "avatar_url": "https://avatars.githubusercontent.com/u/21180148?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soltanmm-google", "html_url": "https://github.com/soltanmm-google", "followers_url": "https://api.github.com/users/soltanmm-google/followers", "following_url": "https://api.github.com/users/soltanmm-google/following{/other_user}", "gists_url": "https://api.github.com/users/soltanmm-google/gists{/gist_id}", "starred_url": "https://api.github.com/users/soltanmm-google/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soltanmm-google/subscriptions", "organizations_url": "https://api.github.com/users/soltanmm-google/orgs", "repos_url": "https://api.github.com/users/soltanmm-google/repos", "events_url": "https://api.github.com/users/soltanmm-google/events{/privacy}", "received_events_url": "https://api.github.com/users/soltanmm-google/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc287a9b178b27cd50ef95902650b58a05441b92", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc287a9b178b27cd50ef95902650b58a05441b92", "html_url": "https://github.com/rust-lang/rust/commit/dc287a9b178b27cd50ef95902650b58a05441b92"}], "stats": {"total": 46, "additions": 22, "deletions": 24}, "files": [{"sha": "26ea5454693e1bd741051ca2c8d7edf46ce0881c", "filename": "src/librustc/middle/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0ff7021dd372209c5380196ef7f979548c32bab0/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ff7021dd372209c5380196ef7f979548c32bab0/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs?ref=0ff7021dd372209c5380196ef7f979548c32bab0", "patch": "@@ -88,8 +88,6 @@ pub struct InferCtxt<'a, 'tcx: 'a> {\n \n     pub parameter_environment: ty::ParameterEnvironment<'a, 'tcx>,\n \n-    pub fulfillment_cx: RefCell<traits::FulfillmentContext<'tcx>>,\n-\n     // the set of predicates on which errors have been reported, to\n     // avoid reporting the same error twice.\n     pub reported_trait_errors: RefCell<FnvHashSet<traits::TraitErrorKey<'tcx>>>,\n@@ -366,7 +364,6 @@ pub fn new_infer_ctxt<'a, 'tcx>(tcx: &'a ty::ctxt<'tcx>,\n         float_unification_table: RefCell::new(UnificationTable::new()),\n         region_vars: RegionVarBindings::new(tcx),\n         parameter_environment: param_env.unwrap_or(tcx.empty_parameter_environment()),\n-        fulfillment_cx: RefCell::new(traits::FulfillmentContext::new()),\n         reported_trait_errors: RefCell::new(FnvHashSet()),\n         normalize: false,\n         err_count_on_creation: tcx.sess.err_count()\n@@ -525,7 +522,7 @@ pub fn normalize_associated_type<'tcx,T>(tcx: &ty::ctxt<'tcx>, value: &T) -> T\n            result,\n            obligations);\n \n-    let mut fulfill_cx = infcx.fulfillment_cx.borrow_mut();\n+    let mut fulfill_cx = traits::FulfillmentContext::new();\n \n     for obligation in obligations {\n         fulfill_cx.register_predicate_obligation(&infcx, obligation);"}, {"sha": "27b293d9416e543e616e063d08b56a75873d03e2", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0ff7021dd372209c5380196ef7f979548c32bab0/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ff7021dd372209c5380196ef7f979548c32bab0/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=0ff7021dd372209c5380196ef7f979548c32bab0", "patch": "@@ -249,9 +249,9 @@ impl<'a, 'tcx> CheckCrateVisitor<'a, 'tcx> {\n         let ty = self.tcx.node_id_to_type(e.id);\n         let infcx = infer::new_infer_ctxt(self.tcx, &self.tcx.tables, None);\n         let cause = traits::ObligationCause::new(e.span, e.id, traits::SharedStatic);\n-        let mut fulfill_cx = infcx.fulfillment_cx.borrow_mut();\n-        fulfill_cx.register_builtin_bound(&infcx, ty, ty::BoundSync, cause);\n-        match fulfill_cx.select_all_or_error(&infcx) {\n+        let mut fulfillment_cx = traits::FulfillmentContext::new();\n+        fulfillment_cx.register_builtin_bound(&infcx, ty, ty::BoundSync, cause);\n+        match fulfillment_cx.select_all_or_error(&infcx) {\n             Ok(()) => { },\n             Err(ref errors) => {\n                 traits::report_fulfillment_errors(&infcx, errors);"}, {"sha": "eb54527b3733d3078e12049437c32f97e0fd58ac", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ff7021dd372209c5380196ef7f979548c32bab0/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ff7021dd372209c5380196ef7f979548c32bab0/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=0ff7021dd372209c5380196ef7f979548c32bab0", "patch": "@@ -1159,7 +1159,7 @@ pub fn fulfill_obligation<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     // Currently, we use a fulfillment context to completely resolve\n     // all nested obligations. This is because they can inform the\n     // inference of the impl's type parameters.\n-    let mut fulfill_cx = infcx.fulfillment_cx.borrow_mut();\n+    let mut fulfill_cx = traits::FulfillmentContext::new();\n     let vtable = selection.map(|predicate| {\n         fulfill_cx.register_predicate_obligation(&infcx, predicate);\n     });\n@@ -1188,7 +1188,7 @@ pub fn normalize_and_test_predicates<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     let tcx = ccx.tcx();\n     let infcx = infer::normalizing_infer_ctxt(tcx, &tcx.tables);\n     let mut selcx = traits::SelectionContext::new(&infcx);\n-    let mut fulfill_cx = infcx.fulfillment_cx.borrow_mut();\n+    let mut fulfill_cx = traits::FulfillmentContext::new();\n     let cause = traits::ObligationCause::dummy();\n     let traits::Normalized { value: predicates, obligations } =\n         traits::normalize(&mut selcx, cause.clone(), &predicates);"}, {"sha": "64e7dd5c4a391a35577f3c5fc190894c6fbe50e7", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ff7021dd372209c5380196ef7f979548c32bab0/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ff7021dd372209c5380196ef7f979548c32bab0/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=0ff7021dd372209c5380196ef7f979548c32bab0", "patch": "@@ -134,7 +134,7 @@ fn deduce_expectations_from_obligations<'a,'tcx>(\n     expected_vid: ty::TyVid)\n     -> (Option<ty::FnSig<'tcx>>, Option<ty::ClosureKind>)\n {\n-    let fulfillment_cx = fcx.inh.infcx.fulfillment_cx.borrow();\n+    let fulfillment_cx = fcx.inh.fulfillment_cx.borrow();\n     // Here `expected_ty` is known to be a type inference variable.\n \n     let expected_sig ="}, {"sha": "d674fa145dc9ace491fcbff26b438947e6736f27", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ff7021dd372209c5380196ef7f979548c32bab0/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ff7021dd372209c5380196ef7f979548c32bab0/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=0ff7021dd372209c5380196ef7f979548c32bab0", "patch": "@@ -43,7 +43,7 @@ pub fn compare_impl_method<'tcx>(tcx: &ty::ctxt<'tcx>,\n            impl_trait_ref);\n \n     let mut infcx = infer::new_infer_ctxt(tcx, &tcx.tables, None);\n-    let mut fulfillment_cx = infcx.fulfillment_cx.borrow_mut();\n+    let mut fulfillment_cx = traits::FulfillmentContext::new();\n \n     let trait_to_impl_substs = &impl_trait_ref.substs;\n \n@@ -417,7 +417,7 @@ pub fn compare_const_impl<'tcx>(tcx: &ty::ctxt<'tcx>,\n            impl_trait_ref);\n \n     let infcx = infer::new_infer_ctxt(tcx, &tcx.tables, None);\n-    let mut fulfillment_cx = infcx.fulfillment_cx.borrow_mut();\n+    let mut fulfillment_cx = traits::FulfillmentContext::new();\n \n     // The below is for the most part highly similar to the procedure\n     // for methods above. It is simpler in many respects, especially"}, {"sha": "9d39653375739531f56660c839397f1319d83fa6", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0ff7021dd372209c5380196ef7f979548c32bab0/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ff7021dd372209c5380196ef7f979548c32bab0/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=0ff7021dd372209c5380196ef7f979548c32bab0", "patch": "@@ -84,6 +84,7 @@ fn ensure_drop_params_and_item_params_correspond<'tcx>(\n \n     let impl_param_env = ty::ParameterEnvironment::for_item(tcx, self_type_node_id);\n     let infcx = infer::new_infer_ctxt(tcx, &tcx.tables, Some(impl_param_env));\n+    let mut fulfillment_cx = traits::FulfillmentContext::new();\n \n     let named_type = tcx.lookup_item_type(self_type_did).ty;\n     let named_type = named_type.subst(tcx, &infcx.parameter_environment.free_substs);\n@@ -105,7 +106,7 @@ fn ensure_drop_params_and_item_params_correspond<'tcx>(\n         return Err(());\n     }\n \n-    if let Err(ref errors) = infcx.fulfillment_cx.borrow_mut().select_all_or_error(&infcx) {\n+    if let Err(ref errors) = fulfillment_cx.select_all_or_error(&infcx) {\n         // this could be reached when we get lazy normalization\n         traits::report_fulfillment_errors(&infcx, errors);\n         return Err(());"}, {"sha": "b96bac4adf88dac785548ba4c730cb62b9704621", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0ff7021dd372209c5380196ef7f979548c32bab0/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ff7021dd372209c5380196ef7f979548c32bab0/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=0ff7021dd372209c5380196ef7f979548c32bab0", "patch": "@@ -161,6 +161,8 @@ pub struct Inherited<'a, 'tcx: 'a> {\n     infcx: infer::InferCtxt<'a, 'tcx>,\n     locals: RefCell<NodeMap<Ty<'tcx>>>,\n \n+    fulfillment_cx: RefCell<traits::FulfillmentContext<'tcx>>,\n+\n     tables: &'a RefCell<ty::Tables<'tcx>>,\n \n     // When we process a call like `c()` where `c` is a closure type,\n@@ -306,6 +308,7 @@ impl<'a, 'tcx> Inherited<'a, 'tcx> {\n \n         Inherited {\n             infcx: infer::new_infer_ctxt(tcx, tables, Some(param_env)),\n+            fulfillment_cx: RefCell::new(traits::FulfillmentContext::new()),\n             locals: RefCell::new(NodeMap()),\n             tables: tables,\n             deferred_call_resolutions: RefCell::new(DefIdMap()),\n@@ -320,9 +323,8 @@ impl<'a, 'tcx> Inherited<'a, 'tcx> {\n                                         -> T\n         where T : TypeFoldable<'tcx>\n     {\n-        let mut fulfillment_cx = self.infcx.fulfillment_cx.borrow_mut();\n         assoc::normalize_associated_types_in(&self.infcx,\n-                                             &mut fulfillment_cx,\n+                                             &mut self.fulfillment_cx.borrow_mut(),\n                                              span,\n                                              body_id,\n                                              value)\n@@ -1370,7 +1372,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                                  self.body_id,\n                                                  traits::ObligationCauseCode::MiscObligation);\n         self.inh\n-            .infcx\n             .fulfillment_cx\n             .borrow_mut()\n             .normalize_projection_type(self.infcx(),\n@@ -1505,7 +1506,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                   builtin_bound: ty::BuiltinBound,\n                                   cause: traits::ObligationCause<'tcx>)\n     {\n-        self.inh.infcx.fulfillment_cx.borrow_mut()\n+        self.inh.fulfillment_cx.borrow_mut()\n             .register_builtin_bound(self.infcx(), ty, builtin_bound, cause);\n     }\n \n@@ -1514,7 +1515,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     {\n         debug!(\"register_predicate({:?})\",\n                obligation);\n-        self.inh.infcx.fulfillment_cx\n+        self.inh.fulfillment_cx\n             .borrow_mut()\n             .register_predicate_obligation(self.infcx(), obligation);\n     }\n@@ -1646,7 +1647,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                       region: ty::Region,\n                                       cause: traits::ObligationCause<'tcx>)\n     {\n-        let mut fulfillment_cx = self.inh.infcx.fulfillment_cx.borrow_mut();\n+        let mut fulfillment_cx = self.inh.fulfillment_cx.borrow_mut();\n         fulfillment_cx.register_region_obligation(ty, region, cause);\n     }\n \n@@ -2003,7 +2004,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         self.select_all_obligations_and_apply_defaults();\n \n-        let mut fulfillment_cx = self.inh.infcx.fulfillment_cx.borrow_mut();\n+        let mut fulfillment_cx = self.inh.fulfillment_cx.borrow_mut();\n         match fulfillment_cx.select_all_or_error(self.infcx()) {\n             Ok(()) => { }\n             Err(errors) => { report_fulfillment_errors(self.infcx(), &errors); }\n@@ -2013,7 +2014,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// Select as many obligations as we can at present.\n     fn select_obligations_where_possible(&self) {\n         match\n-            self.inh.infcx.fulfillment_cx\n+            self.inh.fulfillment_cx\n             .borrow_mut()\n             .select_where_possible(self.infcx())\n         {"}, {"sha": "1acda6b23751279ac3acd7d8c5f0674fed9aad6d", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0ff7021dd372209c5380196ef7f979548c32bab0/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ff7021dd372209c5380196ef7f979548c32bab0/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=0ff7021dd372209c5380196ef7f979548c32bab0", "patch": "@@ -353,7 +353,6 @@ impl<'a, 'tcx> Rcx<'a, 'tcx> {\n         let region_obligations =\n             self.fcx\n                 .inh\n-                .infcx\n                 .fulfillment_cx\n                 .borrow()\n                 .region_obligations(node_id)\n@@ -369,7 +368,7 @@ impl<'a, 'tcx> Rcx<'a, 'tcx> {\n \n         // Processing the region obligations should not cause the list to grow further:\n         assert_eq!(region_obligations.len(),\n-                   self.fcx.inh.infcx.fulfillment_cx.borrow().region_obligations(node_id).len());\n+                   self.fcx.inh.fulfillment_cx.borrow().region_obligations(node_id).len());\n     }\n \n     fn code_to_origin(&self,"}, {"sha": "2dfbaab2844754f9a81841835ee4448d10f766a9", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ff7021dd372209c5380196ef7f979548c32bab0/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ff7021dd372209c5380196ef7f979548c32bab0/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=0ff7021dd372209c5380196ef7f979548c32bab0", "patch": "@@ -473,7 +473,7 @@ impl<'a, 'tcx> CoherenceChecker<'a, 'tcx> {\n                 }\n             };\n \n-            let mut fulfill_cx = infcx.fulfillment_cx.borrow_mut();\n+            let mut fulfill_cx = traits::FulfillmentContext::new();\n \n             // Register an obligation for `A: Trait<B>`.\n             let cause = traits::ObligationCause::misc(span, impl_node_id);"}]}