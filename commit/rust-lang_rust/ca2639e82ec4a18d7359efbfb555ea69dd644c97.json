{"sha": "ca2639e82ec4a18d7359efbfb555ea69dd644c97", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhMjYzOWU4MmVjNGExOGQ3MzU5ZWZiZmI1NTVlYTY5ZGQ2NDRjOTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-20T11:22:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-20T11:22:48Z"}, "message": "Auto merge of #55014 - ljedrz:lazyboye_unwraps, r=matthewjasper\n\nPrefer unwrap_or_else to unwrap_or in case of function calls/allocations\n\nThe contents of `unwrap_or` are evaluated eagerly, so it's not a good pick in case of function calls and allocations. This PR also changes a few `unwrap_or`s with `unwrap_or_default`.\n\nAn added bonus is that in some cases this change also reveals if the object it's called on is an `Option` or a `Result` (based on whether the closure takes an argument).", "tree": {"sha": "3dfa59589214b0157714150a785dd9cc4ccdc240", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3dfa59589214b0157714150a785dd9cc4ccdc240"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca2639e82ec4a18d7359efbfb555ea69dd644c97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca2639e82ec4a18d7359efbfb555ea69dd644c97", "html_url": "https://github.com/rust-lang/rust/commit/ca2639e82ec4a18d7359efbfb555ea69dd644c97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca2639e82ec4a18d7359efbfb555ea69dd644c97/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94273f4d8e463cac45486328294bb1c2bbc10170", "url": "https://api.github.com/repos/rust-lang/rust/commits/94273f4d8e463cac45486328294bb1c2bbc10170", "html_url": "https://github.com/rust-lang/rust/commit/94273f4d8e463cac45486328294bb1c2bbc10170"}, {"sha": "d28aed6dc45ffccc790469cb04f3f775ddb2283a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d28aed6dc45ffccc790469cb04f3f775ddb2283a", "html_url": "https://github.com/rust-lang/rust/commit/d28aed6dc45ffccc790469cb04f3f775ddb2283a"}], "stats": {"total": 111, "additions": 57, "deletions": 54}, "files": [{"sha": "851d18d92257a36cbc74a49eda185535f3761065", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=ca2639e82ec4a18d7359efbfb555ea69dd644c97", "patch": "@@ -430,7 +430,7 @@ impl Config {\n             }\n         }).unwrap_or_else(|| TomlConfig::default());\n \n-        let build = toml.build.clone().unwrap_or(Build::default());\n+        let build = toml.build.clone().unwrap_or_default();\n         // set by bootstrap.py\n         config.hosts.push(config.build.clone());\n         for host in build.host.iter() {\n@@ -524,7 +524,7 @@ impl Config {\n             set(&mut config.llvm_link_shared, llvm.link_shared);\n             config.llvm_targets = llvm.targets.clone();\n             config.llvm_experimental_targets = llvm.experimental_targets.clone()\n-                .unwrap_or(\"WebAssembly;RISCV\".to_string());\n+                .unwrap_or_else(|| \"WebAssembly;RISCV\".to_string());\n             config.llvm_link_jobs = llvm.link_jobs;\n             config.llvm_version_suffix = llvm.version_suffix.clone();\n             config.llvm_clang_cl = llvm.clang_cl.clone();"}, {"sha": "0cbb08023615ff782898543e4fef36c3bf57ca7f", "filename": "src/build_helper/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Fbuild_helper%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Fbuild_helper%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuild_helper%2Flib.rs?ref=ca2639e82ec4a18d7359efbfb555ea69dd644c97", "patch": "@@ -233,7 +233,8 @@ pub fn native_lib_boilerplate(\n     let src_dir = current_dir.join(\"..\").join(src_name);\n     rerun_if_changed_anything_in_dir(&src_dir);\n \n-    let out_dir = env::var_os(\"RUSTBUILD_NATIVE_DIR\").unwrap_or(env::var_os(\"OUT_DIR\").unwrap());\n+    let out_dir = env::var_os(\"RUSTBUILD_NATIVE_DIR\").unwrap_or_else(||\n+        env::var_os(\"OUT_DIR\").unwrap());\n     let out_dir = PathBuf::from(out_dir).join(out_name);\n     t!(fs::create_dir_all(&out_dir));\n     if link_name.contains('=') {"}, {"sha": "cce872927b147c2a86d58c2e153d33f287cfb1cd", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=ca2639e82ec4a18d7359efbfb555ea69dd644c97", "patch": "@@ -1598,7 +1598,7 @@ impl<'a> LoweringContext<'a> {\n \n         let resolution = self.resolver\n             .get_resolution(id)\n-            .unwrap_or(PathResolution::new(Def::Err));\n+            .unwrap_or_else(|| PathResolution::new(Def::Err));\n \n         let proj_start = p.segments.len() - resolution.unresolved_segments();\n         let path = P(hir::Path {"}, {"sha": "6a4f734674563cdd4d3dbdd60ff67b8cffede702", "filename": "src/librustc/lint/levels.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Flibrustc%2Flint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Flibrustc%2Flint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Flevels.rs?ref=ca2639e82ec4a18d7359efbfb555ea69dd644c97", "patch": "@@ -97,7 +97,7 @@ impl LintLevelSets {\n \n         // If `level` is none then we actually assume the default level for this\n         // lint.\n-        let mut level = level.unwrap_or(lint.default_level(sess));\n+        let mut level = level.unwrap_or_else(|| lint.default_level(sess));\n \n         // If we're about to issue a warning, check at the last minute for any\n         // directives against the warnings \"lint\". If, for example, there's an"}, {"sha": "5ac0c0d32dcdc01c8a8f7e1cd8525139e48ccda0", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=ca2639e82ec4a18d7359efbfb555ea69dd644c97", "patch": "@@ -519,7 +519,7 @@ impl LintBuffer {\n     }\n \n     pub fn take(&mut self, id: ast::NodeId) -> Vec<BufferedEarlyLint> {\n-        self.map.remove(&id).unwrap_or(Vec::new())\n+        self.map.remove(&id).unwrap_or_default()\n     }\n \n     pub fn get_any(&self) -> Option<&[BufferedEarlyLint]> {"}, {"sha": "50ca6ca78ab3aa5b81dd85670bf025e8101673e2", "filename": "src/librustc/traits/auto_trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fauto_trait.rs?ref=ca2639e82ec4a18d7359efbfb555ea69dd644c97", "patch": "@@ -498,8 +498,8 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                     panic!(\"Missing lifetime with name {:?} for {:?}\", name, region)\n                 )\n             )\n-            .unwrap_or(&\"'static\".to_owned())\n-            .clone()\n+            .cloned()\n+            .unwrap_or_else(|| \"'static\".to_owned())\n     }\n \n     // This is very similar to handle_lifetimes. However, instead of matching ty::Region's"}, {"sha": "dc0039926448c48e6dac87d11bef4ad6a5d93c3b", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=ca2639e82ec4a18d7359efbfb555ea69dd644c97", "patch": "@@ -352,7 +352,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         obligation: &PredicateObligation<'tcx>,\n     ) -> OnUnimplementedNote {\n         let def_id = self.impl_similar_to(trait_ref, obligation)\n-            .unwrap_or(trait_ref.def_id());\n+            .unwrap_or_else(|| trait_ref.def_id());\n         let trait_ref = *trait_ref.skip_binder();\n \n         let mut flags = vec![];\n@@ -639,7 +639,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                         let (post_message, pre_message) =\n                             self.get_parent_trait_ref(&obligation.cause.code)\n                                 .map(|t| (format!(\" in `{}`\", t), format!(\"within `{}`, \", t)))\n-                            .unwrap_or((String::new(), String::new()));\n+                            .unwrap_or_default();\n \n                         let OnUnimplementedNote { message, label, note }\n                             = self.on_unimplemented_note(trait_ref, obligation);"}, {"sha": "9f718cea58f5ebab67e1caeb327d8da4bfb92504", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=ca2639e82ec4a18d7359efbfb555ea69dd644c97", "patch": "@@ -551,7 +551,7 @@ impl<'tcx> TypeckTables<'tcx> {\n \n     pub fn node_substs(&self, id: hir::HirId) -> &'tcx Substs<'tcx> {\n         validate_hir_id_for_typeck_tables(self.local_id_root, id, false);\n-        self.node_substs.get(&id.local_id).cloned().unwrap_or(Substs::empty())\n+        self.node_substs.get(&id.local_id).cloned().unwrap_or_else(|| Substs::empty())\n     }\n \n     pub fn node_substs_opt(&self, id: hir::HirId) -> Option<&'tcx Substs<'tcx>> {"}, {"sha": "636720bf3c47c44a74d69530f0e4b76f1e9b69d4", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=ca2639e82ec4a18d7359efbfb555ea69dd644c97", "patch": "@@ -342,7 +342,7 @@ impl<'sess> OnDiskCache<'sess> {\n             &self.prev_diagnostics_index,\n             \"diagnostics\");\n \n-        diagnostics.unwrap_or(Vec::new())\n+        diagnostics.unwrap_or_default()\n     }\n \n     /// Store a diagnostic emitted during the current compilation session."}, {"sha": "f45b3728bc1b074aae9d7018d9f978656eb13b1d", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=ca2639e82ec4a18d7359efbfb555ea69dd644c97", "patch": "@@ -154,7 +154,7 @@ pub fn from_fn_attrs(\n     id: Option<DefId>,\n ) {\n     let codegen_fn_attrs = id.map(|id| cx.tcx.codegen_fn_attrs(id))\n-        .unwrap_or(CodegenFnAttrs::new());\n+        .unwrap_or_else(|| CodegenFnAttrs::new());\n \n     inline(cx, llfn, codegen_fn_attrs.inline);\n "}, {"sha": "9609cb0c1553b205319775ae8f6378a14c7d73ca", "filename": "src/librustc_codegen_llvm/back/rpath.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Flibrustc_codegen_llvm%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Flibrustc_codegen_llvm%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Frpath.rs?ref=ca2639e82ec4a18d7359efbfb555ea69dd644c97", "patch": "@@ -109,7 +109,7 @@ fn get_rpath_relative_to_output(config: &mut RPathConfig, lib: &Path) -> String\n     };\n \n     let cwd = env::current_dir().unwrap();\n-    let mut lib = fs::canonicalize(&cwd.join(lib)).unwrap_or(cwd.join(lib));\n+    let mut lib = fs::canonicalize(&cwd.join(lib)).unwrap_or_else(|_| cwd.join(lib));\n     lib.pop();\n     let mut output = cwd.join(&config.out_filename);\n     output.pop();"}, {"sha": "2a77f256e3a0cd4f93bf489dc94dce692633dff1", "filename": "src/librustc_codegen_llvm/llvm/archive_ro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Flibrustc_codegen_llvm%2Fllvm%2Farchive_ro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Flibrustc_codegen_llvm%2Fllvm%2Farchive_ro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Farchive_ro.rs?ref=ca2639e82ec4a18d7359efbfb555ea69dd644c97", "patch": "@@ -40,7 +40,7 @@ impl ArchiveRO {\n         return unsafe {\n             let s = path2cstr(dst);\n             let ar = super::LLVMRustOpenArchive(s.as_ptr()).ok_or_else(|| {\n-                super::last_error().unwrap_or(\"failed to open archive\".to_owned())\n+                super::last_error().unwrap_or_else(|| \"failed to open archive\".to_owned())\n             })?;\n             Ok(ArchiveRO { raw: ar })\n         };"}, {"sha": "b080c51c83a5b104e9cf95535f49c2f69ada2347", "filename": "src/librustc_codegen_llvm/llvm/diagnostic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Flibrustc_codegen_llvm%2Fllvm%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Flibrustc_codegen_llvm%2Fllvm%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fdiagnostic.rs?ref=ca2639e82ec4a18d7359efbfb555ea69dd644c97", "patch": "@@ -77,7 +77,7 @@ impl OptimizationDiagnostic<'ll> {\n             ).ok()\n         ).ok();\n \n-        let mut filename = filename.unwrap_or(String::new());\n+        let mut filename = filename.unwrap_or_default();\n         if filename.is_empty() {\n             filename.push_str(\"<unknown file>\");\n         }"}, {"sha": "2a1fbe6ace541285c9c4dbb8bd2acaea8156db64", "filename": "src/librustc_codegen_utils/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Flibrustc_codegen_utils%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Flibrustc_codegen_utils%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Flink.rs?ref=ca2639e82ec4a18d7359efbfb555ea69dd644c97", "patch": "@@ -103,7 +103,7 @@ pub fn filename_for_metadata(sess: &Session,\n     let libname = format!(\"{}{}\", crate_name, sess.opts.cg.extra_filename);\n \n     let out_filename = outputs.single_output_file.clone()\n-        .unwrap_or(outputs.out_directory.join(&format!(\"lib{}.rmeta\", libname)));\n+        .unwrap_or_else(|| outputs.out_directory.join(&format!(\"lib{}.rmeta\", libname)));\n \n     check_file_is_writeable(&out_filename, sess);\n "}, {"sha": "8020d596afd0f8f04e18822a633f570b9a848db0", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=ca2639e82ec4a18d7359efbfb555ea69dd644c97", "patch": "@@ -882,7 +882,7 @@ where\n         )\n     });\n \n-    let mut registry = registry.unwrap_or(Registry::new(sess, krate.span));\n+    let mut registry = registry.unwrap_or_else(|| Registry::new(sess, krate.span));\n \n     time(sess, \"plugin registration\", || {\n         if sess.features_untracked().rustc_diagnostic_macros {"}, {"sha": "f4289ea2d4b26e59b2d3ac2006edc7212d420b6c", "filename": "src/librustc_errors/diagnostic_builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic_builder.rs?ref=ca2639e82ec4a18d7359efbfb555ea69dd644c97", "patch": "@@ -128,7 +128,7 @@ impl<'a> DiagnosticBuilder<'a> {\n         message: &str,\n         span: Option<S>,\n     ) -> &mut Self {\n-        let span = span.map(|s| s.into()).unwrap_or(MultiSpan::new());\n+        let span = span.map(|s| s.into()).unwrap_or_else(|| MultiSpan::new());\n         self.diagnostic.sub(level, message, span, None);\n         self\n     }"}, {"sha": "a732446d5048139b6f7534caa8cc1c90ba1a9932", "filename": "src/librustc_metadata/locator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Flibrustc_metadata%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Flibrustc_metadata%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flocator.rs?ref=ca2639e82ec4a18d7359efbfb555ea69dd644c97", "patch": "@@ -678,7 +678,7 @@ impl<'a> Context<'a> {\n             if let Some((ref prev, _)) = ret {\n                 let sysroot = self.sess.sysroot();\n                 let sysroot = sysroot.canonicalize()\n-                                     .unwrap_or(sysroot.to_path_buf());\n+                                     .unwrap_or_else(|_| sysroot.to_path_buf());\n                 if prev.starts_with(&sysroot) {\n                     continue\n                 }"}, {"sha": "66f2e9291df8e3350c69a27130f17ef1dfd79ddd", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=ca2639e82ec4a18d7359efbfb555ea69dd644c97", "patch": "@@ -96,7 +96,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 span,\n                 desired_action.as_noun(),\n                 &self.describe_place_with_options(moved_place, IncludingDowncast(true))\n-                    .unwrap_or(\"_\".to_owned()),\n+                    .unwrap_or_else(|| \"_\".to_owned()),\n                 Origin::Mir,\n             );\n             err.span_label(span, format!(\"use of possibly uninitialized {}\", item_msg));\n@@ -260,7 +260,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n \n         let mut err = tcx.cannot_move_when_borrowed(\n             span,\n-            &self.describe_place(place).unwrap_or(\"_\".to_owned()),\n+            &self.describe_place(place).unwrap_or_else(|| \"_\".to_owned()),\n             Origin::Mir,\n         );\n         err.span_label(borrow_span, format!(\"borrow of {} occurs here\", borrow_msg));\n@@ -299,16 +299,16 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n \n         let mut err = tcx.cannot_use_when_mutably_borrowed(\n             span,\n-            &self.describe_place(place).unwrap_or(\"_\".to_owned()),\n+            &self.describe_place(place).unwrap_or_else(|| \"_\".to_owned()),\n             borrow_span,\n             &self.describe_place(&borrow.borrowed_place)\n-                .unwrap_or(\"_\".to_owned()),\n+                .unwrap_or_else(|| \"_\".to_owned()),\n             Origin::Mir,\n         );\n \n         borrow_spans.var_span_label(&mut err, {\n             let place = &borrow.borrowed_place;\n-            let desc_place = self.describe_place(place).unwrap_or(\"_\".to_owned());\n+            let desc_place = self.describe_place(place).unwrap_or_else(|| \"_\".to_owned());\n \n             format!(\"borrow occurs due to use of `{}`{}\", desc_place, borrow_spans.describe())\n         });\n@@ -337,7 +337,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             \"closure\"\n         };\n \n-        let desc_place = self.describe_place(place).unwrap_or(\"_\".to_owned());\n+        let desc_place = self.describe_place(place).unwrap_or_else(|| \"_\".to_owned());\n         let tcx = self.infcx.tcx;\n \n         let first_borrow_desc;\n@@ -490,7 +490,8 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             );\n         } else {\n             let borrow_place = &issued_borrow.borrowed_place;\n-            let borrow_place_desc = self.describe_place(borrow_place).unwrap_or(\"_\".to_owned());\n+            let borrow_place_desc = self.describe_place(borrow_place)\n+                                        .unwrap_or_else(|| \"_\".to_owned());\n             issued_spans.var_span_label(\n                 &mut err,\n                 format!(\n@@ -943,15 +944,15 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             tcx.cannot_mutate_in_match_guard(\n                 span,\n                 loan_span,\n-                &self.describe_place(place).unwrap_or(\"_\".to_owned()),\n+                &self.describe_place(place).unwrap_or_else(|| \"_\".to_owned()),\n                 \"assign\",\n                 Origin::Mir,\n             )\n         } else {\n             tcx.cannot_assign_to_borrowed(\n                 span,\n                 loan_span,\n-                &self.describe_place(place).unwrap_or(\"_\".to_owned()),\n+                &self.describe_place(place).unwrap_or_else(|| \"_\".to_owned()),\n                 Origin::Mir,\n             )\n         };"}, {"sha": "b71b131570d7b1133e322ada408936f56fbbdc28", "filename": "src/librustc_mir/borrow_check/mutability_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs?ref=ca2639e82ec4a18d7359efbfb555ea69dd644c97", "patch": "@@ -208,7 +208,7 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                     format!(\n                         \"mutable borrow occurs due to use of `{}` in closure\",\n                         // always Some() if the message is printed.\n-                        self.describe_place(access_place).unwrap_or(String::new()),\n+                        self.describe_place(access_place).unwrap_or_default(),\n                     )\n                 );\n                 borrow_span"}, {"sha": "e538524f33a10820de6cd5aaa913028c8daf6230", "filename": "src/librustc_mir/borrow_check/nll/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs?ref=ca2639e82ec4a18d7359efbfb555ea69dd644c97", "patch": "@@ -184,7 +184,7 @@ pub(in borrow_check) fn compute_regions<'cx, 'gcx, 'tcx>(\n \n         if infcx.tcx.sess.opts.debugging_opts.polonius {\n             let algorithm = env::var(\"POLONIUS_ALGORITHM\")\n-                .unwrap_or(String::from(\"DatafrogOpt\"));\n+                .unwrap_or_else(|_| String::from(\"DatafrogOpt\"));\n             let algorithm = Algorithm::from_str(&algorithm).unwrap();\n             debug!(\"compute_regions: using polonius algorithm {:?}\", algorithm);\n             Some(Rc::new(Output::compute("}, {"sha": "1504b694be19254994191bcf4cbf4d27f45fa3ff", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=ca2639e82ec4a18d7359efbfb555ea69dd644c97", "patch": "@@ -245,7 +245,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n         match dest_ty.sty {\n             // float -> uint\n             Uint(t) => {\n-                let width = t.bit_width().unwrap_or(self.pointer_size().bits() as usize);\n+                let width = t.bit_width().unwrap_or_else(|| self.pointer_size().bits() as usize);\n                 let v = match fty {\n                     FloatTy::F32 => Single::from_bits(bits).to_u128(width).value,\n                     FloatTy::F64 => Double::from_bits(bits).to_u128(width).value,\n@@ -255,7 +255,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n             },\n             // float -> int\n             Int(t) => {\n-                let width = t.bit_width().unwrap_or(self.pointer_size().bits() as usize);\n+                let width = t.bit_width().unwrap_or_else(|| self.pointer_size().bits() as usize);\n                 let v = match fty {\n                     FloatTy::F32 => Single::from_bits(bits).to_i128(width).value,\n                     FloatTy::F64 => Double::from_bits(bits).to_i128(width).value,"}, {"sha": "958d4e353c8990bffaaea20952388ac00fa42d1f", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=ca2639e82ec4a18d7359efbfb555ea69dd644c97", "patch": "@@ -482,7 +482,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n             source_info: terminator.source_info\n         };\n \n-        let unwind = unwind.unwrap_or(self.patch.resume_block());\n+        let unwind = unwind.unwrap_or_else(|| self.patch.resume_block());\n         let unwind = self.patch.new_block(BasicBlockData {\n             statements: vec![assign.clone()],\n             terminator: Some(Terminator {"}, {"sha": "5a7268c057bd8feca0aa0d1b798887228717f8f4", "filename": "src/librustc_mir/util/borrowck_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs?ref=ca2639e82ec4a18d7359efbfb555ea69dd644c97", "patch": "@@ -476,7 +476,7 @@ pub trait BorrowckErrors<'cx>: Sized + Copy {\n     ) -> DiagnosticBuilder<'cx> {\n         let moved_path = moved_path\n             .map(|mp| format!(\": `{}`\", mp))\n-            .unwrap_or(String::new());\n+            .unwrap_or_default();\n \n         let err = struct_span_err!(\n             self,"}, {"sha": "c217e9a6f4a6e0fd2f1d2dc3a6a385d9007a6871", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=ca2639e82ec4a18d7359efbfb555ea69dd644c97", "patch": "@@ -847,7 +847,7 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n     fn resolve_import(&mut self, directive: &'b ImportDirective<'b>) -> bool {\n         debug!(\"(resolving import for module) resolving import `{}::...` in `{}`\",\n                names_to_string(&directive.module_path[..]),\n-               module_to_string(self.current_module).unwrap_or(\"???\".to_string()));\n+               module_to_string(self.current_module).unwrap_or_else(|| \"???\".to_string()));\n \n         self.current_module = directive.parent;\n "}, {"sha": "97bdb9e5fa30ccc238ebc80b847cf9a1347bcc0b", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=ca2639e82ec4a18d7359efbfb555ea69dd644c97", "patch": "@@ -163,7 +163,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n                     .to_fingerprint()\n                     .as_value(),\n             },\n-            crate_root: crate_root.unwrap_or(\"<no source>\".to_owned()),\n+            crate_root: crate_root.unwrap_or_else(|| \"<no source>\".to_owned()),\n             external_crates: self.save_ctxt.get_external_crates(),\n             span: self.span_from_span(krate.span),\n         };\n@@ -650,7 +650,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n                         .iter()\n                         .enumerate()\n                         .map(|(i, f)| {\n-                            f.ident.map(|i| i.to_string()).unwrap_or(i.to_string())\n+                            f.ident.map(|i| i.to_string()).unwrap_or_else(|| i.to_string())\n                         })\n                         .collect::<Vec<_>>()\n                         .join(\", \");\n@@ -1030,7 +1030,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n                         .tables\n                         .node_id_to_type_opt(hir_id)\n                         .map(|t| t.to_string())\n-                        .unwrap_or(String::new());\n+                        .unwrap_or_default();\n                     value.push_str(\": \");\n                     value.push_str(&typ);\n \n@@ -1737,7 +1737,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> Visitor<'l> for DumpVisitor<'l, 'tc\n         let value = l.init\n             .as_ref()\n             .map(|i| self.span.snippet(i.span))\n-            .unwrap_or(String::new());\n+            .unwrap_or_default();\n         self.process_var_decl(&l.pat, value);\n \n         // Just walk the initialiser and type (don't want to walk the pattern again)."}, {"sha": "4b43a1a6270f86793b1f89ac1f71a935b4083dcc", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=ca2639e82ec4a18d7359efbfb555ea69dd644c97", "patch": "@@ -367,7 +367,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                                 .as_ref()\n                                 .and_then(|t| self.lookup_ref_id(t.ref_id))\n                                 .map(id_from_def_id)\n-                                .unwrap_or(null_id()),\n+                                .unwrap_or_else(|| null_id()),\n                         },\n                         Impl {\n                             id: impl_id,\n@@ -632,7 +632,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     ref_id: def_id\n                         .or(decl_id)\n                         .map(|id| id_from_def_id(id))\n-                        .unwrap_or(null_id()),\n+                        .unwrap_or_else(|| null_id()),\n                 }))\n             }\n             ast::ExprKind::Path(_, ref path) => {"}, {"sha": "5a63a2971e49deb7f9f159a1d92cd0075b19b90c", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=ca2639e82ec4a18d7359efbfb555ea69dd644c97", "patch": "@@ -174,7 +174,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                               .map(|arg| print::to_string(print::NO_ANN,\n                                                                           |s| s.print_expr(arg)))\n                                               .collect::<Vec<_>>()\n-                                              .join(\", \")).unwrap_or(\"...\".to_owned())));\n+                                              .join(\", \")).unwrap_or_else(|| \"...\".to_owned())));\n                     }\n                 }\n             }\n@@ -249,7 +249,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         match expr.node {\n                             hir::ExprKind::Lit(ref lit) => { // numeric literal\n                                 let snippet = tcx.sess.source_map().span_to_snippet(lit.span)\n-                                    .unwrap_or(\"<numeric literal>\".to_owned());\n+                                    .unwrap_or_else(|_| \"<numeric literal>\".to_owned());\n \n                                 err.span_suggestion_with_applicability(\n                                                     lit.span,"}, {"sha": "1c562859bb48d3edbca6b31bfbe3845271bf7225", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=ca2639e82ec4a18d7359efbfb555ea69dd644c97", "patch": "@@ -3133,7 +3133,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             Ok(formal_args.iter().map(|ty| {\n                 self.resolve_type_vars_if_possible(ty)\n             }).collect())\n-        }).unwrap_or(Vec::new());\n+        }).unwrap_or_default();\n         debug!(\"expected_inputs_for_expected_output(formal={:?} -> {:?}, expected={:?} -> {:?})\",\n                formal_args, formal_ret,\n                expect_args, expected_ret);\n@@ -4151,7 +4151,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     // [1]\n                     self.tcx.sess.delay_span_bug(body.span, \"no coercion, but loop may not break\");\n                 }\n-                ctxt.coerce.map(|c| c.complete(self)).unwrap_or(self.tcx.mk_unit())\n+                ctxt.coerce.map(|c| c.complete(self)).unwrap_or_else(|| self.tcx.mk_unit())\n             }\n             hir::ExprKind::Match(ref discrim, ref arms, match_src) => {\n                 self.check_match(expr, &discrim, arms, expected, match_src)"}, {"sha": "b3851d22841e8d946fe3c2657d4c0a2136322f4f", "filename": "src/libstd/build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Flibstd%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Flibstd%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbuild.rs?ref=ca2639e82ec4a18d7359efbfb555ea69dd644c97", "patch": "@@ -97,8 +97,8 @@ fn build_libbacktrace(target: &str) -> Result<(), ()> {\n         .file(\"../libbacktrace/sort.c\")\n         .file(\"../libbacktrace/state.c\");\n \n-    let any_debug = env::var(\"RUSTC_DEBUGINFO\").unwrap_or(String::new()) == \"true\" ||\n-        env::var(\"RUSTC_DEBUGINFO_LINES\").unwrap_or(String::new()) == \"true\";\n+    let any_debug = env::var(\"RUSTC_DEBUGINFO\").unwrap_or_default() == \"true\" ||\n+        env::var(\"RUSTC_DEBUGINFO_LINES\").unwrap_or_default() == \"true\";\n     build.debug(any_debug);\n \n     if target.contains(\"darwin\") {"}, {"sha": "a7c8ade66f08f17ed7f38c330e7be30e99b22db0", "filename": "src/libstd/sys/redox/args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Flibstd%2Fsys%2Fredox%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Flibstd%2Fsys%2Fredox%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fargs.rs?ref=ca2639e82ec4a18d7359efbfb555ea69dd644c97", "patch": "@@ -85,7 +85,7 @@ mod imp {\n     }\n \n     pub fn args() -> Args {\n-        let bytes = clone().unwrap_or(Vec::new());\n+        let bytes = clone().unwrap_or_default();\n         let v: Vec<OsString> = bytes.into_iter().map(|v| {\n             OsStringExt::from_vec(v)\n         }).collect();"}, {"sha": "7f1f9353c6d09613e6f406aa018e6d2d160d1bc1", "filename": "src/libstd/sys/unix/process/process_unix.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=ca2639e82ec4a18d7359efbfb555ea69dd644c97", "patch": "@@ -331,7 +331,7 @@ impl Command {\n             cvt(libc::posix_spawnattr_setflags(&mut attrs.0, flags as _))?;\n \n             let envp = envp.map(|c| c.as_ptr())\n-                .unwrap_or(*sys::os::environ() as *const _);\n+                .unwrap_or_else(|| *sys::os::environ() as *const _);\n             let ret = libc::posix_spawnp(\n                 &mut p.pid,\n                 self.get_argv()[0],"}, {"sha": "9c47589a0bd272f4899e0dc29421cee7abeb6044", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=ca2639e82ec4a18d7359efbfb555ea69dd644c97", "patch": "@@ -3228,7 +3228,7 @@ impl<'a> Parser<'a> {\n                         }));\n \n                         let expr_str = self.sess.source_map().span_to_snippet(expr.span)\n-                                                .unwrap_or(pprust::expr_to_string(&expr));\n+                                                .unwrap_or_else(|_| pprust::expr_to_string(&expr));\n                         err.span_suggestion_with_applicability(\n                             expr.span,\n                             &format!(\"try {} the cast value\", op_verb),"}, {"sha": "ce7708cc42e56d56cc7eb3c8fd1e15aafce10541", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=ca2639e82ec4a18d7359efbfb555ea69dd644c97", "patch": "@@ -3119,7 +3119,7 @@ impl<'a> State<'a> {\n             if cmnt.style != comments::Trailing { return Ok(()) }\n             let span_line = cm.lookup_char_pos(span.hi());\n             let comment_line = cm.lookup_char_pos(cmnt.pos);\n-            let next = next_pos.unwrap_or(cmnt.pos + BytePos(1));\n+            let next = next_pos.unwrap_or_else(|| cmnt.pos + BytePos(1));\n             if span.hi() < cmnt.pos && cmnt.pos < next && span_line.line == comment_line.line {\n                 self.print_comment(cmnt)?;\n             }"}, {"sha": "17586a442daa9b4de42755fa4dc0b3d414dfa9dd", "filename": "src/libsyntax/source_map.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Flibsyntax%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Flibsyntax%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsource_map.rs?ref=ca2639e82ec4a18d7359efbfb555ea69dd644c97", "patch": "@@ -937,7 +937,8 @@ impl SourceMap {\n                 } else {\n                     format!(\"{}<\", &snippet[..offset])\n                 };\n-                new_snippet.push_str(&self.span_to_snippet(span).unwrap_or(\"T\".to_string()));\n+                new_snippet.push_str(\n+                    &self.span_to_snippet(span).unwrap_or_else(|_| \"T\".to_string()));\n                 new_snippet.push('>');\n \n                 return Some((sugg_span, new_snippet));"}, {"sha": "29bd63d28c5ec823f0e00d7ca15c41cb81da553c", "filename": "src/libsyntax/tokenstream.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Flibsyntax%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Flibsyntax%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftokenstream.rs?ref=ca2639e82ec4a18d7359efbfb555ea69dd644c97", "patch": "@@ -606,7 +606,7 @@ impl Cursor {\n             CursorKind::JointTree(ref tree, _) => tree.clone().joint(),\n             CursorKind::Stream(ref cursor) => TokenStream::concat_rc_vec({\n                 cursor.stack.get(0).cloned().map(|(stream, _)| stream)\n-                    .unwrap_or(cursor.stream.clone())\n+                    .unwrap_or_else(|| cursor.stream.clone())\n             }),\n         }\n     }"}]}