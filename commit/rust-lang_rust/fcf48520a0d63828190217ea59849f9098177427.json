{"sha": "fcf48520a0d63828190217ea59849f9098177427", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjZjQ4NTIwYTBkNjM4MjgxOTAyMTdlYTU5ODQ5ZjkwOTgxNzc0Mjc=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-04-07T16:18:44Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-04-12T20:06:03Z"}, "message": "Add some new tests + Fix failing tests", "tree": {"sha": "0ff7de814d909557d33f8f25f8f15e5988d9b30e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ff7de814d909557d33f8f25f8f15e5988d9b30e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fcf48520a0d63828190217ea59849f9098177427", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fcf48520a0d63828190217ea59849f9098177427", "html_url": "https://github.com/rust-lang/rust/commit/fcf48520a0d63828190217ea59849f9098177427", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fcf48520a0d63828190217ea59849f9098177427/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3f8b8be6fd5986af33f26768394cea386b686b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3f8b8be6fd5986af33f26768394cea386b686b5", "html_url": "https://github.com/rust-lang/rust/commit/d3f8b8be6fd5986af33f26768394cea386b686b5"}], "stats": {"total": 247, "additions": 208, "deletions": 39}, "files": [{"sha": "9c939d0d2fbaddbe1f0e373c04ec325b384f5d53", "filename": "src/test/mir-opt/end_region_cyclic.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/fcf48520a0d63828190217ea59849f9098177427/src%2Ftest%2Fmir-opt%2Fend_region_cyclic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcf48520a0d63828190217ea59849f9098177427/src%2Ftest%2Fmir-opt%2Fend_region_cyclic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_cyclic.rs?ref=fcf48520a0d63828190217ea59849f9098177427", "patch": "@@ -40,29 +40,29 @@ fn query() -> bool { true }\n \n // END RUST SOURCE\n // START rustc.main.SimplifyCfg-qualify-consts.after.mir\n-// fn main() -> () {\n+// fn main() -> (){\n //     let mut _0: ();\n //     scope 1 {\n-//         let _2: S<'35_0rs>;\n+//         let _2: S<'36_0rs>;\n+//     }\n+//     scope 2 {\n //     }\n-//     ...\n //     let mut _1: ();\n-//     let mut _3: std::cell::Cell<std::option::Option<&'35_0rs S<'35_0rs>>>;\n-//     let mut _4: std::option::Option<&'35_0rs S<'35_0rs>>;\n+//     let mut _3: std::cell::Cell<std::option::Option<&'36_0rs S<'36_0rs>>>;\n+//     let mut _4: std::option::Option<&'36_0rs S<'36_0rs>>;\n //     let mut _5: ();\n-//     let mut _6: &'16s std::cell::Cell<std::option::Option<&'35_0rs S<'35_0rs>>>;\n-//     let mut _7: std::option::Option<&'35_0rs S<'35_0rs>>;\n-//     let mut _8: &'35_0rs S<'35_0rs>;\n-//     let mut _9: &'35_0rs S<'35_0rs>;\n+//     let mut _6: &'17s std::cell::Cell<std::option::Option<&'36_0rs S<'36_0rs>>>;\n+//     let mut _7: std::option::Option<&'36_0rs S<'36_0rs>>;\n+//     let mut _8: &'36_0rs S<'36_0rs>;\n+//     let mut _9: &'36_0rs S<'36_0rs>;\n //     let mut _10: ();\n //     let mut _11: bool;\n //     let mut _12: !;\n //     let mut _13: ();\n-//     let mut _14: &'33s std::cell::Cell<std::option::Option<&'35_0rs S<'35_0rs>>>;\n-//     let mut _15: std::option::Option<&'35_0rs S<'35_0rs>>;\n-//     let mut _16: &'35_0rs S<'35_0rs>;\n-//     let mut _17: &'35_0rs S<'35_0rs>;\n-//\n+//     let mut _14: &'34s std::cell::Cell<std::option::Option<&'36_0rs S<'36_0rs>>>;\n+//     let mut _15: std::option::Option<&'36_0rs S<'36_0rs>>;\n+//     let mut _16: &'36_0rs S<'36_0rs>;\n+//     let mut _17: &'36_0rs S<'36_0rs>;\n //     bb0: {\n //         goto -> bb1;\n //     }\n@@ -73,29 +73,29 @@ fn query() -> bool { true }\n //         StorageLive(_2);\n //         StorageLive(_3);\n //         StorageLive(_4);\n-//         _4 = std::option::Option<&'35_0rs S<'35_0rs>>::None;\n+//         _4 = std::option::Option<&'36_0rs S<'36_0rs>>::None;\n //         _3 = const <std::cell::Cell<T>>::new(move _4) -> [return: bb4, unwind: bb3];\n //     }\n //     bb3: {\n //         resume;\n //     }\n //     bb4: {\n //         StorageDead(_4);\n-//         _2 = S<'35_0rs> { r: move _3 };\n+//         _2 = S<'36_0rs> { r: move _3 };\n //         StorageDead(_3);\n //         StorageLive(_6);\n-//         _6 = &'16s (_2.0: std::cell::Cell<std::option::Option<&'35_0rs S<'35_0rs>>>);\n+//         _6 = &'17s (_2.0: std::cell::Cell<std::option::Option<&'36_0rs S<'36_0rs>>>);\n //         StorageLive(_7);\n //         StorageLive(_8);\n //         StorageLive(_9);\n-//         _9 = &'35_0rs _2;\n-//         _8 = &'35_0rs (*_9);\n-//         _7 = std::option::Option<&'35_0rs S<'35_0rs>>::Some(move _8,);\n+//         _9 = &'36_0rs _2;\n+//         _8 = &'36_0rs (*_9);\n+//         _7 = std::option::Option<&'36_0rs S<'36_0rs>>::Some(move _8,);\n //         StorageDead(_8);\n //         _5 = const <std::cell::Cell<T>>::set(move _6, move _7) -> [return: bb5, unwind: bb3];\n //     }\n //     bb5: {\n-//         EndRegion('16s);\n+//         EndRegion('17s);\n //         StorageDead(_7);\n //         StorageDead(_6);\n //         StorageDead(_9);\n@@ -108,31 +108,31 @@ fn query() -> bool { true }\n //     bb7: {\n //         _0 = ();\n //         StorageDead(_11);\n-//         EndRegion('35_0rs);\n+//         EndRegion('36_0rs);\n //         StorageDead(_2);\n //         return;\n //     }\n //     bb8: {\n //         _10 = ();\n //         StorageDead(_11);\n //         StorageLive(_14);\n-//         _14 = &'33s (_2.0: std::cell::Cell<std::option::Option<&'35_0rs S<'35_0rs>>>);\n+//         _14 = &'34s (_2.0: std::cell::Cell<std::option::Option<&'36_0rs S<'36_0rs>>>);\n //         StorageLive(_15);\n //         StorageLive(_16);\n //         StorageLive(_17);\n-//         _17 = &'35_0rs _2;\n-//         _16 = &'35_0rs (*_17);\n-//         _15 = std::option::Option<&'35_0rs S<'35_0rs>>::Some(move _16,);\n+//         _17 = &'36_0rs _2;\n+//         _16 = &'36_0rs (*_17);\n+//         _15 = std::option::Option<&'36_0rs S<'36_0rs>>::Some(move _16,);\n //         StorageDead(_16);\n //         _13 = const <std::cell::Cell<T>>::set(move _14, move _15) -> [return: bb9, unwind: bb3];\n //     }\n //     bb9: {\n-//         EndRegion('33s);\n+//         EndRegion('34s);\n //         StorageDead(_15);\n //         StorageDead(_14);\n //         StorageDead(_17);\n //         _1 = ();\n-//         EndRegion('35_0rs);\n+//         EndRegion('36_0rs);\n //         StorageDead(_2);\n //         goto -> bb1;\n //     }"}, {"sha": "79645bd36000a66cdfff2eadb8f4716631a71cbb", "filename": "src/test/mir-opt/validate_3.rs", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/fcf48520a0d63828190217ea59849f9098177427/src%2Ftest%2Fmir-opt%2Fvalidate_3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcf48520a0d63828190217ea59849f9098177427/src%2Ftest%2Fmir-opt%2Fvalidate_3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fvalidate_3.rs?ref=fcf48520a0d63828190217ea59849f9098177427", "patch": "@@ -29,34 +29,46 @@ fn main() {\n \n // END RUST SOURCE\n // START rustc.main.EraseRegions.after.mir\n-// fn main() -> () {\n-//     ...\n+// fn main() -> (){\n+//     let mut _0: ();\n+//     scope 1 {\n+//         let _1: Test;\n+//         scope 3 {\n+//             let _2: &ReErased Test;\n+//         }\n+//         scope 4 {\n+//         }\n+//     }\n+//     scope 2 {\n+//     }\n+//     let mut _3: ();\n+//     let mut _4: &ReErased i32;\n //     let mut _5: &ReErased i32;\n //     bb0: {\n //         StorageLive(_1);\n //         _1 = Test { x: const 0i32 };\n //         StorageLive(_2);\n-//         Validate(Suspend(ReScope(Remainder(BlockRemainder { block: ItemLocalId(19), first_statement_index: 3 }))), [_1: Test]);\n+//         Validate(Suspend(ReScope(Remainder(BlockRemainder { block: ItemLocalId(20), first_statement_index: 3 }))), [_1: Test]);\n //         _2 = &ReErased _1;\n-//         Validate(Acquire, [(*_2): Test/ReScope(Remainder(BlockRemainder { block: ItemLocalId(19), first_statement_index: 3 })) (imm)]);\n+//         Validate(Acquire, [(*_2): Test/ReScope(Remainder(BlockRemainder { block: ItemLocalId(20), first_statement_index: 3 })) (imm)]);\n //         StorageLive(_4);\n //         StorageLive(_5);\n-//         Validate(Suspend(ReScope(Node(ItemLocalId(17)))), [((*_2).0: i32): i32/ReScope(Remainder(BlockRemainder { block: ItemLocalId(19), first_statement_index: 3 })) (imm)]);\n+//         Validate(Suspend(ReScope(Node(ItemLocalId(18)))), [((*_2).0: i32): i32/ReScope(Remainder(BlockRemainder { block: ItemLocalId(20), first_statement_index: 3 })) (imm)]);\n //         _5 = &ReErased ((*_2).0: i32);\n-//         Validate(Acquire, [(*_5): i32/ReScope(Node(ItemLocalId(17))) (imm)]);\n-//         Validate(Suspend(ReScope(Node(ItemLocalId(17)))), [(*_5): i32/ReScope(Node(ItemLocalId(17))) (imm)]);\n+//         Validate(Acquire, [(*_5): i32/ReScope(Node(ItemLocalId(18))) (imm)]);\n+//         Validate(Suspend(ReScope(Node(ItemLocalId(18)))), [(*_5): i32/ReScope(Node(ItemLocalId(18))) (imm)]);\n //         _4 = &ReErased (*_5);\n-//         Validate(Acquire, [(*_4): i32/ReScope(Node(ItemLocalId(17))) (imm)]);\n-//         Validate(Release, [_3: (), _4: &ReScope(Node(ItemLocalId(17))) i32]);\n+//         Validate(Acquire, [(*_4): i32/ReScope(Node(ItemLocalId(18))) (imm)]);\n+//         Validate(Release, [_3: (), _4: &ReScope(Node(ItemLocalId(18))) i32]);\n //         _3 = const foo(move _4) -> bb1;\n //     }\n //     bb1: {\n //         Validate(Acquire, [_3: ()]);\n-//         EndRegion(ReScope(Node(ItemLocalId(17))));\n+//         EndRegion(ReScope(Node(ItemLocalId(18))));\n //         StorageDead(_4);\n //         StorageDead(_5);\n //         _0 = ();\n-//         EndRegion(ReScope(Remainder(BlockRemainder { block: ItemLocalId(19), first_statement_index: 3 })));\n+//         EndRegion(ReScope(Remainder(BlockRemainder { block: ItemLocalId(20), first_statement_index: 3 })));\n //         StorageDead(_2);\n //         StorageDead(_1);\n //         return;"}, {"sha": "c92bf55a72381a9849046356dd4a300d4e67290a", "filename": "src/test/ui/hygiene/fields-definition.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/fcf48520a0d63828190217ea59849f9098177427/src%2Ftest%2Fui%2Fhygiene%2Ffields-definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcf48520a0d63828190217ea59849f9098177427/src%2Ftest%2Fui%2Fhygiene%2Ffields-definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Ffields-definition.rs?ref=fcf48520a0d63828190217ea59849f9098177427", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(decl_macro)]\n+\n+macro modern($a: ident) {\n+    struct Modern {\n+        a: u8,\n+        $a: u8, // OK\n+    }\n+}\n+\n+macro_rules! legacy {\n+    ($a: ident) => {\n+        struct Legacy {\n+            a: u8,\n+            $a: u8, //~ ERROR field `a` is already declared\n+        }\n+    }\n+}\n+\n+modern!(a);\n+legacy!(a);\n+\n+fn main() {}"}, {"sha": "73f524b7d2a7f03e27e1e27c5fd908d4acff4e82", "filename": "src/test/ui/hygiene/fields-definition.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fcf48520a0d63828190217ea59849f9098177427/src%2Ftest%2Fui%2Fhygiene%2Ffields-definition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcf48520a0d63828190217ea59849f9098177427/src%2Ftest%2Fui%2Fhygiene%2Ffields-definition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Ffields-definition.stderr?ref=fcf48520a0d63828190217ea59849f9098177427", "patch": "@@ -0,0 +1,14 @@\n+error[E0124]: field `a` is already declared\n+  --> $DIR/fields-definition.rs:24:17\n+   |\n+LL |             a: u8,\n+   |             ----- `a` first declared here\n+LL |             $a: u8, //~ ERROR field `a` is already declared\n+   |                 ^^ field already declared\n+...\n+LL | legacy!(a);\n+   | ----------- in this macro invocation\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0124`."}, {"sha": "a6e3b2b2d8b474fbf5fdf474dfdbb855db6ac2f1", "filename": "src/test/ui/hygiene/fields-move.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/fcf48520a0d63828190217ea59849f9098177427/src%2Ftest%2Fui%2Fhygiene%2Ffields-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcf48520a0d63828190217ea59849f9098177427/src%2Ftest%2Fui%2Fhygiene%2Ffields-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Ffields-move.rs?ref=fcf48520a0d63828190217ea59849f9098177427", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// issue #46314\n+\n+#![feature(decl_macro)]\n+\n+#[derive(Debug)]\n+struct NonCopy(String);\n+\n+struct Foo {\n+    x: NonCopy,\n+}\n+\n+macro copy_modern($foo: ident) {\n+   $foo.x\n+}\n+\n+macro_rules! copy_legacy {\n+    ($foo: ident) => {\n+        $foo.x //~ ERROR use of moved value: `foo.x`\n+    }\n+}\n+\n+fn assert_two_copies(a: NonCopy, b: NonCopy) {\n+   println!(\"Got two copies: {:?}, {:?}\", a, b);\n+}\n+\n+fn main() {\n+    let foo = Foo { x: NonCopy(\"foo\".into()) };\n+    assert_two_copies(copy_modern!(foo), foo.x); //~ ERROR use of moved value: `foo.x`\n+    assert_two_copies(copy_legacy!(foo), foo.x); //~ ERROR use of moved value: `foo.x`\n+}"}, {"sha": "ba9de09f9d2f1f02c3f9384d6be4560e504e1a94", "filename": "src/test/ui/hygiene/fields-move.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/fcf48520a0d63828190217ea59849f9098177427/src%2Ftest%2Fui%2Fhygiene%2Ffields-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcf48520a0d63828190217ea59849f9098177427/src%2Ftest%2Fui%2Fhygiene%2Ffields-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Ffields-move.stderr?ref=fcf48520a0d63828190217ea59849f9098177427", "patch": "@@ -0,0 +1,39 @@\n+error[E0382]: use of moved value: `foo.x`\n+  --> $DIR/fields-move.rs:38:42\n+   |\n+LL |    $foo.x\n+   |    ------ value moved here\n+...\n+LL |     assert_two_copies(copy_modern!(foo), foo.x); //~ ERROR use of moved value: `foo.x`\n+   |                                          ^^^^^ value used here after move\n+   |\n+   = note: move occurs because `foo.x` has type `NonCopy`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `foo.x`\n+  --> $DIR/fields-move.rs:28:9\n+   |\n+LL |    $foo.x\n+   |    ------ value moved here\n+...\n+LL |         $foo.x //~ ERROR use of moved value: `foo.x`\n+   |         ^^^^^^ value used here after move\n+...\n+LL |     assert_two_copies(copy_legacy!(foo), foo.x); //~ ERROR use of moved value: `foo.x`\n+   |                       ----------------- in this macro invocation\n+   |\n+   = note: move occurs because `foo.x` has type `NonCopy`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `foo.x`\n+  --> $DIR/fields-move.rs:39:42\n+   |\n+LL |    $foo.x\n+   |    ------ value moved here\n+...\n+LL |     assert_two_copies(copy_legacy!(foo), foo.x); //~ ERROR use of moved value: `foo.x`\n+   |                                          ^^^^^ value used here after move\n+   |\n+   = note: move occurs because `foo.x` has type `NonCopy`, which does not implement the `Copy` trait\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "50ace39e70939cf88c222c4a00e0bfbec33dbf07", "filename": "src/test/ui/hygiene/fields-numeric-borrowck.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fcf48520a0d63828190217ea59849f9098177427/src%2Ftest%2Fui%2Fhygiene%2Ffields-numeric-borrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcf48520a0d63828190217ea59849f9098177427/src%2Ftest%2Fui%2Fhygiene%2Ffields-numeric-borrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Ffields-numeric-borrowck.rs?ref=fcf48520a0d63828190217ea59849f9098177427", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct S(u8);\n+\n+fn main() {\n+    let mut s = S(0);\n+    let borrow1 = &mut s.0;\n+    let S { 0: ref mut borrow2 } = s;\n+    //~^ ERROR cannot borrow `s.0` as mutable more than once at a time\n+}"}, {"sha": "ccd898fff27b7df54837f952fe4cf08810c431cf", "filename": "src/test/ui/hygiene/fields-numeric-borrowck.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fcf48520a0d63828190217ea59849f9098177427/src%2Ftest%2Fui%2Fhygiene%2Ffields-numeric-borrowck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcf48520a0d63828190217ea59849f9098177427/src%2Ftest%2Fui%2Fhygiene%2Ffields-numeric-borrowck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Ffields-numeric-borrowck.stderr?ref=fcf48520a0d63828190217ea59849f9098177427", "patch": "@@ -0,0 +1,14 @@\n+error[E0499]: cannot borrow `s.0` as mutable more than once at a time\n+  --> $DIR/fields-numeric-borrowck.rs:16:16\n+   |\n+LL |     let borrow1 = &mut s.0;\n+   |                        --- first mutable borrow occurs here\n+LL |     let S { 0: ref mut borrow2 } = s;\n+   |                ^^^^^^^^^^^^^^^ second mutable borrow occurs here\n+LL |     //~^ ERROR cannot borrow `s.0` as mutable more than once at a time\n+LL | }\n+   | - first borrow ends here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0499`."}]}