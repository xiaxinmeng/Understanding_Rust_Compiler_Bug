{"sha": "e70c695ab9a910f4079088c439a2efbf5ab9c447", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3MGM2OTVhYjlhOTEwZjQwNzkwODhjNDM5YTJlZmJmNWFiOWM0NDc=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-12-20T23:23:24Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-12-20T23:23:24Z"}, "message": "rustc: Use the passed-in tydescs for take and drop glue in parametric fns. Also fix a level-of-indirection problem with tydesc params.", "tree": {"sha": "e5754626e3b4afbb66f9dccded25cf32f7fe3f29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5754626e3b4afbb66f9dccded25cf32f7fe3f29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e70c695ab9a910f4079088c439a2efbf5ab9c447", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e70c695ab9a910f4079088c439a2efbf5ab9c447", "html_url": "https://github.com/rust-lang/rust/commit/e70c695ab9a910f4079088c439a2efbf5ab9c447", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e70c695ab9a910f4079088c439a2efbf5ab9c447/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "194d7844ea653442a1e713ad9ff79c3ce43209ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/194d7844ea653442a1e713ad9ff79c3ce43209ab", "html_url": "https://github.com/rust-lang/rust/commit/194d7844ea653442a1e713ad9ff79c3ce43209ab"}], "stats": {"total": 33, "additions": 27, "deletions": 6}, "files": [{"sha": "b9477e747960d8b2faef431481730a6a4b34fae7", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e70c695ab9a910f4079088c439a2efbf5ab9c447/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e70c695ab9a910f4079088c439a2efbf5ab9c447/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=e70c695ab9a910f4079088c439a2efbf5ab9c447", "patch": "@@ -293,7 +293,7 @@ fn type_of_fn(@crate_ctxt cx,\n     auto ty_param_count = typeck.count_ty_params(fn_ty);\n     auto i = 0u;\n     while (i < ty_param_count) {\n-        atys += T_tydesc();\n+        atys += T_ptr(T_tydesc());\n         i += 1u;\n     }\n \n@@ -578,15 +578,28 @@ fn trans_malloc(@block_ctxt cx, @typeck.ty t) -> result {\n // returns an LLVM ValueRef of that field from the tydesc, generating the\n // tydesc if necessary.\n fn field_of_tydesc(@block_ctxt cx, @typeck.ty ty, int field) -> ValueRef {\n-    auto tydesc = get_tydesc(cx.fcx.ccx, ty);\n+    auto tydesc = get_tydesc(cx, ty);\n     ret cx.build.GEP(tydesc, vec(C_int(0), C_int(field)));\n }\n \n-fn get_tydesc(@crate_ctxt cx, @typeck.ty ty) -> ValueRef {\n-    if (!cx.tydescs.contains_key(ty)) {\n-        make_tydesc(cx, ty);\n+fn get_tydesc(&@block_ctxt cx, @typeck.ty ty) -> ValueRef {\n+    // Is the supplied type a type param? If so, return the passed-in tydesc.\n+    alt (typeck.type_param(ty)) {\n+        case (some[ast.def_id](?id)) { ret cx.fcx.lltydescs.get(id); }\n+        case (none[ast.def_id])      { /* fall through */ }\n     }\n-    ret cx.tydescs.get(ty);\n+\n+    // Does it contain a type param? If so, generate a derived tydesc.\n+    if (typeck.count_ty_params(ty) > 0u) {\n+        log \"TODO: trans.get_tydesc(): generate a derived type descriptor\";\n+        fail;\n+    }\n+\n+    // Otherwise, generate a tydesc if necessary, and return it.\n+    if (!cx.fcx.ccx.tydescs.contains_key(ty)) {\n+        make_tydesc(cx.fcx.ccx, ty);\n+    }\n+    ret cx.fcx.ccx.tydescs.get(ty);\n }\n \n fn make_tydesc(@crate_ctxt cx, @typeck.ty ty) {"}, {"sha": "19f2c0c119193e3ac3a97ad19109a8c7a37ff2ec", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e70c695ab9a910f4079088c439a2efbf5ab9c447/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e70c695ab9a910f4079088c439a2efbf5ab9c447/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=e70c695ab9a910f4079088c439a2efbf5ab9c447", "patch": "@@ -954,6 +954,14 @@ fn type_is_signed(@ty t) -> bool {\n     fail;\n }\n \n+fn type_param(@ty t) -> option.t[ast.def_id] {\n+    alt (t.struct) {\n+        case (ty_param(?id)) { ret some[ast.def_id](id); }\n+        case (_)             { /* fall through */        }\n+    }\n+    ret none[ast.def_id];\n+}\n+\n fn plain_ty(&sty st) -> @ty {\n     ret @rec(struct=st, mut=ast.imm, cname=none[str]);\n }"}]}