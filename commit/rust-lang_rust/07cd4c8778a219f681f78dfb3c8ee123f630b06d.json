{"sha": "07cd4c8778a219f681f78dfb3c8ee123f630b06d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3Y2Q0Yzg3NzhhMjE5ZjY4MWY3OGRmYjNjOGVlMTIzZjYzMGIwNmQ=", "commit": {"author": {"name": "Denis Vasilik", "email": "contact@denisvasilik.com", "date": "2020-09-01T21:59:00Z"}, "committer": {"name": "Denis Vasilik", "email": "contact@denisvasilik.com", "date": "2020-09-01T21:59:00Z"}, "message": "Use intra-doc links", "tree": {"sha": "24c8297d7f85e33078501e1cd1bd3722dee74158", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24c8297d7f85e33078501e1cd1bd3722dee74158"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07cd4c8778a219f681f78dfb3c8ee123f630b06d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07cd4c8778a219f681f78dfb3c8ee123f630b06d", "html_url": "https://github.com/rust-lang/rust/commit/07cd4c8778a219f681f78dfb3c8ee123f630b06d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07cd4c8778a219f681f78dfb3c8ee123f630b06d/comments", "author": {"login": "denisvasilik", "id": 18697981, "node_id": "MDQ6VXNlcjE4Njk3OTgx", "avatar_url": "https://avatars.githubusercontent.com/u/18697981?v=4", "gravatar_id": "", "url": "https://api.github.com/users/denisvasilik", "html_url": "https://github.com/denisvasilik", "followers_url": "https://api.github.com/users/denisvasilik/followers", "following_url": "https://api.github.com/users/denisvasilik/following{/other_user}", "gists_url": "https://api.github.com/users/denisvasilik/gists{/gist_id}", "starred_url": "https://api.github.com/users/denisvasilik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/denisvasilik/subscriptions", "organizations_url": "https://api.github.com/users/denisvasilik/orgs", "repos_url": "https://api.github.com/users/denisvasilik/repos", "events_url": "https://api.github.com/users/denisvasilik/events{/privacy}", "received_events_url": "https://api.github.com/users/denisvasilik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "denisvasilik", "id": 18697981, "node_id": "MDQ6VXNlcjE4Njk3OTgx", "avatar_url": "https://avatars.githubusercontent.com/u/18697981?v=4", "gravatar_id": "", "url": "https://api.github.com/users/denisvasilik", "html_url": "https://github.com/denisvasilik", "followers_url": "https://api.github.com/users/denisvasilik/followers", "following_url": "https://api.github.com/users/denisvasilik/following{/other_user}", "gists_url": "https://api.github.com/users/denisvasilik/gists{/gist_id}", "starred_url": "https://api.github.com/users/denisvasilik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/denisvasilik/subscriptions", "organizations_url": "https://api.github.com/users/denisvasilik/orgs", "repos_url": "https://api.github.com/users/denisvasilik/repos", "events_url": "https://api.github.com/users/denisvasilik/events{/privacy}", "received_events_url": "https://api.github.com/users/denisvasilik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "118860a7e76daaac3564c7655d46ac65a14fc612", "url": "https://api.github.com/repos/rust-lang/rust/commits/118860a7e76daaac3564c7655d46ac65a14fc612", "html_url": "https://github.com/rust-lang/rust/commit/118860a7e76daaac3564c7655d46ac65a14fc612"}], "stats": {"total": 85, "additions": 35, "deletions": 50}, "files": [{"sha": "d26db581b5880c0405f6afba1c405929c5c4b472", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 35, "deletions": 50, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/07cd4c8778a219f681f78dfb3c8ee123f630b06d/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07cd4c8778a219f681f78dfb3c8ee123f630b06d/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=07cd4c8778a219f681f78dfb3c8ee123f630b06d", "patch": "@@ -22,8 +22,8 @@ fn _assert_is_object_safe(_: &dyn Iterator<Item = ()>) {}\n /// generally, please see the [module-level documentation]. In particular, you\n /// may want to know how to [implement `Iterator`][impl].\n ///\n-/// [module-level documentation]: index.html\n-/// [impl]: index.html#implementing-iterator\n+/// [module-level documentation]: crate::iter\n+/// [impl]: crate::iter#implementing-iterator\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_on_unimplemented(\n     on(\n@@ -107,8 +107,6 @@ pub trait Iterator {\n     /// again may or may not eventually start returning [`Some(Item)`] again at some\n     /// point.\n     ///\n-    /// [`Some(Item)`]: Some\n-    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -212,7 +210,7 @@ pub trait Iterator {\n     /// returning the number of times it saw [`Some`]. Note that [`next`] has to be\n     /// called at least once even if the iterator does not have any elements.\n     ///\n-    /// [`next`]: #tymethod.next\n+    /// [`next`]: Iterator::next\n     ///\n     /// # Overflow Behavior\n     ///\n@@ -449,9 +447,7 @@ pub trait Iterator {\n     /// }\n     /// ```\n     ///\n-    /// [`once`]: fn.once.html\n-    /// [`Iterator`]: trait.Iterator.html\n-    /// [`IntoIterator`]: trait.IntoIterator.html\n+    /// [`once`]: crate::iter::once\n     /// [`OsStr`]: ../../std/ffi/struct.OsStr.html\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -496,9 +492,6 @@ pub trait Iterator {\n     /// [`Iterator`] itself. For example, slices (`&[T]`) implement\n     /// [`IntoIterator`], and so can be passed to `zip()` directly:\n     ///\n-    /// [`IntoIterator`]: trait.IntoIterator.html\n-    /// [`Iterator`]: trait.Iterator.html\n-    ///\n     /// ```\n     /// let s1 = &[1, 2, 3];\n     /// let s2 = &[4, 5, 6];\n@@ -530,8 +523,8 @@ pub trait Iterator {\n     /// assert_eq!((2, 'o'), zipper[2]);\n     /// ```\n     ///\n-    /// [`enumerate`]: #method.enumerate\n-    /// [`next`]: #tymethod.next\n+    /// [`enumerate`]: Iterator::enumerate\n+    /// [`next`]: Iterator::next\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn zip<U>(self, other: U) -> Zip<Self, U::IntoIter>\n@@ -734,8 +727,8 @@ pub trait Iterator {\n     /// Why `filter_map` and not just [`filter`] and [`map`]? The key is in this\n     /// part:\n     ///\n-    /// [`filter`]: #method.filter\n-    /// [`map`]: #method.map\n+    /// [`filter`]: Iterator::filter\n+    /// [`map`]: Iterator::map\n     ///\n     /// > If the closure returns [`Some(element)`][`Some`], then that element is returned.\n     ///\n@@ -767,7 +760,6 @@ pub trait Iterator {\n     /// assert_eq!(iter.next(), None);\n     /// ```\n     ///\n-    /// [`Option<T>`]: Option\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn filter_map<B, F>(self, f: F) -> FilterMap<Self, F>\n@@ -802,7 +794,7 @@ pub trait Iterator {\n     ///\n     /// [`usize`]: type@usize\n     /// [`usize::MAX`]: crate::usize::MAX\n-    /// [`zip`]: #method.zip\n+    /// [`zip`]: Iterator::zip\n     ///\n     /// # Examples\n     ///\n@@ -837,8 +829,8 @@ pub trait Iterator {\n     /// anything other than fetching the next value) of the [`next`] method\n     /// will occur.\n     ///\n-    /// [`peek`]: crate::iter::Peekable::peek\n-    /// [`next`]: #tymethod.next\n+    /// [`peek`]: Peekable::peek\n+    /// [`next`]: Iterator::next\n     ///\n     /// # Examples\n     ///\n@@ -876,7 +868,7 @@ pub trait Iterator {\n \n     /// Creates an iterator that [`skip`]s elements based on a predicate.\n     ///\n-    /// [`skip`]: #method.skip\n+    /// [`skip`]: Iterator::skip\n     ///\n     /// `skip_while()` takes a closure as an argument. It will call this\n     /// closure on each element of the iterator, and ignore elements\n@@ -1043,8 +1035,8 @@ pub trait Iterator {\n     ///\n     /// Here's the same example, but with [`take_while`] and [`map`]:\n     ///\n-    /// [`take_while`]: #method.take_while\n-    /// [`map`]: #method.map\n+    /// [`take_while`]: Iterator::take_while\n+    /// [`map`]: Iterator::map\n     ///\n     /// ```\n     /// let a = [-1i32, 4, 0, 1];\n@@ -1104,7 +1096,7 @@ pub trait Iterator {\n     /// It is also not specified what this iterator returns after the first` None` is returned.\n     /// If you need fused iterator, use [`fuse`].\n     ///\n-    /// [`fuse`]: #method.fuse\n+    /// [`fuse`]: Iterator::fuse\n     #[inline]\n     #[unstable(feature = \"iter_map_while\", reason = \"recently added\", issue = \"68537\")]\n     fn map_while<B, P>(self, predicate: P) -> MapWhile<Self, P>\n@@ -1190,7 +1182,7 @@ pub trait Iterator {\n     /// An iterator adaptor similar to [`fold`] that holds internal state and\n     /// produces a new iterator.\n     ///\n-    /// [`fold`]: #method.fold\n+    /// [`fold`]: Iterator::fold\n     ///\n     /// `scan()` takes two arguments: an initial value which seeds the internal\n     /// state, and a closure with two arguments, the first being a mutable\n@@ -1246,8 +1238,8 @@ pub trait Iterator {\n     /// one item for each element, and `flat_map()`'s closure returns an\n     /// iterator for each element.\n     ///\n-    /// [`map`]: #method.map\n-    /// [`flatten`]: #method.flatten\n+    /// [`map`]: Iterator::map\n+    /// [`flatten`]: Iterator::flatten\n     ///\n     /// # Examples\n     ///\n@@ -1333,7 +1325,7 @@ pub trait Iterator {\n     /// two-dimensional and not one-dimensional. To get a one-dimensional\n     /// structure, you have to `flatten()` again.\n     ///\n-    /// [`flat_map()`]: #method.flat_map\n+    /// [`flat_map()`]: Iterator::flat_map\n     #[inline]\n     #[stable(feature = \"iterator_flatten\", since = \"1.29.0\")]\n     fn flatten(self) -> Flatten<Self>\n@@ -1350,8 +1342,6 @@ pub trait Iterator {\n     /// [`Some(T)`] again. `fuse()` adapts an iterator, ensuring that after a\n     /// [`None`] is given, it will always return [`None`] forever.\n     ///\n-    /// [`Some(T)`]: Some\n-    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -1640,7 +1630,7 @@ pub trait Iterator {\n     /// assert_eq!(Ok(vec![1, 3]), result);\n     /// ```\n     ///\n-    /// [`iter`]: #tymethod.next\n+    /// [`iter`]: Iterator::next\n     /// [`String`]: ../../std/string/struct.String.html\n     /// [`char`]: type@char\n     #[inline]\n@@ -1661,8 +1651,8 @@ pub trait Iterator {\n     ///\n     /// See also [`is_partitioned()`] and [`partition_in_place()`].\n     ///\n-    /// [`is_partitioned()`]: #method.is_partitioned\n-    /// [`partition_in_place()`]: #method.partition_in_place\n+    /// [`is_partitioned()`]: Iterator::is_partitioned\n+    /// [`partition_in_place()`]: Iterator::partition_in_place\n     ///\n     /// # Examples\n     ///\n@@ -1716,8 +1706,8 @@ pub trait Iterator {\n     ///\n     /// See also [`is_partitioned()`] and [`partition()`].\n     ///\n-    /// [`is_partitioned()`]: #method.is_partitioned\n-    /// [`partition()`]: #method.partition\n+    /// [`is_partitioned()`]: Iterator::is_partitioned\n+    /// [`partition()`]: Iterator::partition\n     ///\n     /// # Examples\n     ///\n@@ -1779,8 +1769,8 @@ pub trait Iterator {\n     ///\n     /// See also [`partition()`] and [`partition_in_place()`].\n     ///\n-    /// [`partition()`]: #method.partition\n-    /// [`partition_in_place()`]: #method.partition_in_place\n+    /// [`partition()`]: Iterator::partition\n+    /// [`partition_in_place()`]: Iterator::partition_in_place\n     ///\n     /// # Examples\n     ///\n@@ -1879,8 +1869,8 @@ pub trait Iterator {\n     /// This can also be thought of as the fallible form of [`for_each()`]\n     /// or as the stateless version of [`try_fold()`].\n     ///\n-    /// [`for_each()`]: #method.for_each\n-    /// [`try_fold()`]: #method.try_fold\n+    /// [`for_each()`]: Iterator::for_each\n+    /// [`try_fold()`]: Iterator::try_fold\n     ///\n     /// # Examples\n     ///\n@@ -2006,11 +1996,13 @@ pub trait Iterator {\n         accum\n     }\n \n-    /// The same as [`fold()`](#method.fold), but uses the first element in the\n+    /// The same as [`fold()`], but uses the first element in the\n     /// iterator as the initial value, folding every subsequent element into it.\n     /// If the iterator is empty, return `None`; otherwise, return the result\n     /// of the fold.\n     ///\n+    /// [`fold()`]: Iterator::fold\n+    ///\n     /// # Example\n     ///\n     /// Find the maximum value:\n@@ -2165,8 +2157,6 @@ pub trait Iterator {\n     /// argument is a double reference. You can see this effect in the\n     /// examples below, with `&&x`.\n     ///\n-    /// [`Some(element)`]: Some\n-    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -2311,7 +2301,6 @@ pub trait Iterator {\n     /// This function might panic if the iterator has more than `usize::MAX`\n     /// non-matching elements.\n     ///\n-    /// [`Some(index)`]: Some\n     /// [`usize::MAX`]: crate::usize::MAX\n     ///\n     /// # Examples\n@@ -2373,8 +2362,6 @@ pub trait Iterator {\n     /// `rposition()` is short-circuiting; in other words, it will stop\n     /// processing as soon as it finds a `true`.\n     ///\n-    /// [`Some(index)`]: Some\n-    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -2602,8 +2589,6 @@ pub trait Iterator {\n     /// This is only possible if the iterator has an end, so `rev()` only\n     /// works on [`DoubleEndedIterator`]s.\n     ///\n-    /// [`DoubleEndedIterator`]: trait.DoubleEndedIterator.html\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -2634,7 +2619,7 @@ pub trait Iterator {\n     ///\n     /// This function is, in some sense, the opposite of [`zip`].\n     ///\n-    /// [`zip`]: #method.zip\n+    /// [`zip`]: Iterator::zip\n     ///\n     /// # Examples\n     ///\n@@ -2713,7 +2698,7 @@ pub trait Iterator {\n     /// This is useful when you have an iterator over `&T`, but you need an\n     /// iterator over `T`.\n     ///\n-    /// [`clone`]: crate::clone::Clone::clone\n+    /// [`clone`]: Clone::clone\n     ///\n     /// # Examples\n     ///\n@@ -3197,7 +3182,7 @@ pub trait Iterator {\n     /// assert!(![0.0, 1.0, f32::NAN].iter().is_sorted_by(|a, b| a.partial_cmp(b)));\n     /// ```\n     ///\n-    /// [`is_sorted`]: #method.is_sorted\n+    /// [`is_sorted`]: Iterator::is_sorted\n     #[unstable(feature = \"is_sorted\", reason = \"new API\", issue = \"53485\")]\n     fn is_sorted_by<F>(mut self, mut compare: F) -> bool\n     where\n@@ -3226,7 +3211,7 @@ pub trait Iterator {\n     /// the elements, as determined by `f`. Apart from that, it's equivalent to [`is_sorted`]; see\n     /// its documentation for more information.\n     ///\n-    /// [`is_sorted`]: #method.is_sorted\n+    /// [`is_sorted`]: Iterator::is_sorted\n     ///\n     /// # Examples\n     ///"}]}