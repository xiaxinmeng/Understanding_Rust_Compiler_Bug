{"sha": "19f94d52b336a8535c6df1670ed6eb56c08acb55", "node_id": "C_kwDOAAsO6NoAKDE5Zjk0ZDUyYjMzNmE4NTM1YzZkZjE2NzBlZDZlYjU2YzA4YWNiNTU", "commit": {"author": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2022-05-27T23:36:05Z"}, "committer": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2022-05-27T23:36:05Z"}, "message": "remove `large_enum_variant` suggestion for `Copy` types", "tree": {"sha": "9af7d765fa2035f8b695fbae464da11a5ff3030e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9af7d765fa2035f8b695fbae464da11a5ff3030e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19f94d52b336a8535c6df1670ed6eb56c08acb55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19f94d52b336a8535c6df1670ed6eb56c08acb55", "html_url": "https://github.com/rust-lang/rust/commit/19f94d52b336a8535c6df1670ed6eb56c08acb55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19f94d52b336a8535c6df1670ed6eb56c08acb55/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1dd55471b4e95ab8dfc5e55e80a2a59f55817931", "url": "https://api.github.com/repos/rust-lang/rust/commits/1dd55471b4e95ab8dfc5e55e80a2a59f55817931", "html_url": "https://github.com/rust-lang/rust/commit/1dd55471b4e95ab8dfc5e55e80a2a59f55817931"}], "stats": {"total": 130, "additions": 99, "deletions": 31}, "files": [{"sha": "34b7cf67db1d2665b23c014db8c53db8fd901441", "filename": "clippy_lints/src/large_enum_variant.rs", "status": "modified", "additions": 36, "deletions": 30, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/19f94d52b336a8535c6df1670ed6eb56c08acb55/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19f94d52b336a8535c6df1670ed6eb56c08acb55/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_enum_variant.rs?ref=19f94d52b336a8535c6df1670ed6eb56c08acb55", "patch": "@@ -1,7 +1,7 @@\n //! lint when there is a large size difference between variants on an enum\n \n-use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::{diagnostics::span_lint_and_then, ty::is_copy};\n use rustc_errors::Applicability;\n use rustc_hir::{Item, ItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n@@ -132,37 +132,43 @@ impl<'tcx> LateLintPass<'tcx> for LargeEnumVariant {\n                         let fields = def.variants[variants_size[0].ind].data.fields();\n                         variants_size[0].fields_size.sort_by(|a, b| (a.size.cmp(&b.size)));\n                         let mut applicability = Applicability::MaybeIncorrect;\n-                        let sugg: Vec<(Span, String)> = variants_size[0]\n-                            .fields_size\n-                            .iter()\n-                            .rev()\n-                            .map_while(|val| {\n-                                if difference > self.maximum_size_difference_allowed {\n-                                    difference = difference.saturating_sub(val.size);\n-                                    Some((\n-                                        fields[val.ind].ty.span,\n-                                        format!(\n-                                            \"Box<{}>\",\n-                                            snippet_with_applicability(\n-                                                cx,\n-                                                fields[val.ind].ty.span,\n-                                                \"..\",\n-                                                &mut applicability\n-                                            )\n-                                            .into_owned()\n-                                        ),\n-                                    ))\n-                                } else {\n-                                    None\n-                                }\n-                            })\n-                            .collect();\n+                        if is_copy(cx, ty) {\n+                            diag.span_note(\n+                                item.ident.span,\n+                                \"boxing a variant would require the type no longer be `Copy`\",\n+                            );\n+                        } else {\n+                            let sugg: Vec<(Span, String)> = variants_size[0]\n+                                .fields_size\n+                                .iter()\n+                                .rev()\n+                                .map_while(|val| {\n+                                    if difference > self.maximum_size_difference_allowed {\n+                                        difference = difference.saturating_sub(val.size);\n+                                        Some((\n+                                            fields[val.ind].ty.span,\n+                                            format!(\n+                                                \"Box<{}>\",\n+                                                snippet_with_applicability(\n+                                                    cx,\n+                                                    fields[val.ind].ty.span,\n+                                                    \"..\",\n+                                                    &mut applicability\n+                                                )\n+                                                .into_owned()\n+                                            ),\n+                                        ))\n+                                    } else {\n+                                        None\n+                                    }\n+                                })\n+                                .collect();\n \n-                        if !sugg.is_empty() {\n-                            diag.multipart_suggestion(help_text, sugg, Applicability::MaybeIncorrect);\n-                            return;\n+                            if !sugg.is_empty() {\n+                                diag.multipart_suggestion(help_text, sugg, Applicability::MaybeIncorrect);\n+                                return;\n+                            }\n                         }\n-\n                         diag.span_help(def.variants[variants_size[0].ind].span, help_text);\n                     },\n                 );"}, {"sha": "42563383fedb50c5db1eb2318780829bc1a79d08", "filename": "tests/ui/large_enum_variant.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/19f94d52b336a8535c6df1670ed6eb56c08acb55/tests%2Fui%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19f94d52b336a8535c6df1670ed6eb56c08acb55/tests%2Fui%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_enum_variant.rs?ref=19f94d52b336a8535c6df1670ed6eb56c08acb55", "patch": "@@ -98,6 +98,24 @@ struct Struct2 {\n     a: [i32; 8000],\n }\n \n+#[derive(Copy, Clone)]\n+enum CopyableLargeEnum {\n+    A(bool),\n+    B([u128; 4000]),\n+}\n+\n+enum ManuallyCopyLargeEnum {\n+    A(bool),\n+    B([u128; 4000]),\n+}\n+\n+impl Clone for ManuallyCopyLargeEnum {\n+    fn clone(&self) -> Self {\n+        *self\n+    }\n+}\n+impl Copy for ManuallyCopyLargeEnum {}\n+\n fn main() {\n     large_enum_variant!();\n }"}, {"sha": "397d263ae9f950c30ada837835c4e3c0fab6e1c7", "filename": "tests/ui/large_enum_variant.stderr", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/19f94d52b336a8535c6df1670ed6eb56c08acb55/tests%2Fui%2Flarge_enum_variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19f94d52b336a8535c6df1670ed6eb56c08acb55/tests%2Fui%2Flarge_enum_variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_enum_variant.stderr?ref=19f94d52b336a8535c6df1670ed6eb56c08acb55", "patch": "@@ -127,5 +127,49 @@ help: consider boxing the large fields to reduce the total size of the enum\n LL |     B(Box<Struct2>),\n    |       ~~~~~~~~~~~~\n \n-error: aborting due to 8 previous errors\n+error: large size difference between variants\n+  --> $DIR/large_enum_variant.rs:104:5\n+   |\n+LL |     B([u128; 4000]),\n+   |     ^^^^^^^^^^^^^^^ this variant is 64000 bytes\n+   |\n+note: and the second-largest variant is 1 bytes:\n+  --> $DIR/large_enum_variant.rs:103:5\n+   |\n+LL |     A(bool),\n+   |     ^^^^^^^\n+note: boxing a variant would require the type no longer be `Copy`\n+  --> $DIR/large_enum_variant.rs:102:6\n+   |\n+LL | enum CopyableLargeEnum {\n+   |      ^^^^^^^^^^^^^^^^^\n+help: consider boxing the large fields to reduce the total size of the enum\n+  --> $DIR/large_enum_variant.rs:104:5\n+   |\n+LL |     B([u128; 4000]),\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: large size difference between variants\n+  --> $DIR/large_enum_variant.rs:109:5\n+   |\n+LL |     B([u128; 4000]),\n+   |     ^^^^^^^^^^^^^^^ this variant is 64000 bytes\n+   |\n+note: and the second-largest variant is 1 bytes:\n+  --> $DIR/large_enum_variant.rs:108:5\n+   |\n+LL |     A(bool),\n+   |     ^^^^^^^\n+note: boxing a variant would require the type no longer be `Copy`\n+  --> $DIR/large_enum_variant.rs:107:6\n+   |\n+LL | enum ManuallyCopyLargeEnum {\n+   |      ^^^^^^^^^^^^^^^^^^^^^\n+help: consider boxing the large fields to reduce the total size of the enum\n+  --> $DIR/large_enum_variant.rs:109:5\n+   |\n+LL |     B([u128; 4000]),\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: aborting due to 10 previous errors\n "}]}