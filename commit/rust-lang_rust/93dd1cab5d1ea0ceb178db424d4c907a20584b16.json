{"sha": "93dd1cab5d1ea0ceb178db424d4c907a20584b16", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzZGQxY2FiNWQxZWEwY2ViMTc4ZGI0MjRkNGM5MDdhMjA1ODRiMTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-13T22:58:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-13T22:58:04Z"}, "message": "Auto merge of #41919 - nrc:save-crate, r=eddyb\n\nInclude the crate's root module in save-analysis\n\nr? @eddyb", "tree": {"sha": "15ed2894e368535959cf276cccfea5f3334979b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15ed2894e368535959cf276cccfea5f3334979b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93dd1cab5d1ea0ceb178db424d4c907a20584b16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93dd1cab5d1ea0ceb178db424d4c907a20584b16", "html_url": "https://github.com/rust-lang/rust/commit/93dd1cab5d1ea0ceb178db424d4c907a20584b16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93dd1cab5d1ea0ceb178db424d4c907a20584b16/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "826d8f3850b37a23481dfcf4a899b5dfc82d22e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/826d8f3850b37a23481dfcf4a899b5dfc82d22e3", "html_url": "https://github.com/rust-lang/rust/commit/826d8f3850b37a23481dfcf4a899b5dfc82d22e3"}, {"sha": "fb7ba4772cdad24083fa73552425d4f91fd8be33", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb7ba4772cdad24083fa73552425d4f91fd8be33", "html_url": "https://github.com/rust-lang/rust/commit/fb7ba4772cdad24083fa73552425d4f91fd8be33"}], "stats": {"total": 53, "additions": 40, "deletions": 13}, "files": [{"sha": "60e671f1772e382e87841dca3fe0a888b657a064", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93dd1cab5d1ea0ceb178db424d4c907a20584b16/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93dd1cab5d1ea0ceb178db424d4c907a20584b16/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=93dd1cab5d1ea0ceb178db424d4c907a20584b16", "patch": "@@ -1055,7 +1055,7 @@ impl<'a> ast_visit::Visitor<'a> for EarlyContext<'a> {\n         run_lints!(self, check_ident, early_passes, sp, id);\n     }\n \n-    fn visit_mod(&mut self, m: &'a ast::Mod, s: Span, n: ast::NodeId) {\n+    fn visit_mod(&mut self, m: &'a ast::Mod, s: Span, _a: &[ast::Attribute], n: ast::NodeId) {\n         run_lints!(self, check_mod, early_passes, m, s, n);\n         ast_visit::walk_mod(self, m);\n         run_lints!(self, check_mod_post, early_passes, m, s, n);"}, {"sha": "29fac5463e557907073c8ea9c165f3b75af6f6c5", "filename": "src/librustc_passes/hir_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93dd1cab5d1ea0ceb178db424d4c907a20584b16/src%2Flibrustc_passes%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93dd1cab5d1ea0ceb178db424d4c907a20584b16/src%2Flibrustc_passes%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fhir_stats.rs?ref=93dd1cab5d1ea0ceb178db424d4c907a20584b16", "patch": "@@ -252,7 +252,7 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n \n impl<'v> ast_visit::Visitor<'v> for StatCollector<'v> {\n \n-    fn visit_mod(&mut self, m: &'v ast::Mod, _s: Span, _n: NodeId) {\n+    fn visit_mod(&mut self, m: &'v ast::Mod, _s: Span, _a: &[ast::Attribute], _n: NodeId) {\n         self.record(\"Mod\", Id::None, m);\n         ast_visit::walk_mod(self, m)\n     }"}, {"sha": "cac1a2e3c5af15a00160791226899cbf9f85a37d", "filename": "src/librustc_save_analysis/data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93dd1cab5d1ea0ceb178db424d4c907a20584b16/src%2Flibrustc_save_analysis%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93dd1cab5d1ea0ceb178db424d4c907a20584b16/src%2Flibrustc_save_analysis%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdata.rs?ref=93dd1cab5d1ea0ceb178db424d4c907a20584b16", "patch": "@@ -267,7 +267,7 @@ pub struct ModData {\n     pub items: Vec<NodeId>,\n     pub visibility: Visibility,\n     pub docs: String,\n-    pub sig: Signature,\n+    pub sig: Option<Signature>,\n     pub attributes: Vec<Attribute>,\n }\n "}, {"sha": "a95236e2a5072936710d1dcb4ac14adca87ec876", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/93dd1cab5d1ea0ceb178db424d4c907a20584b16/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93dd1cab5d1ea0ceb178db424d4c907a20584b16/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=93dd1cab5d1ea0ceb178db424d4c907a20584b16", "patch": "@@ -1211,6 +1211,31 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n }\n \n impl<'l, 'tcx: 'l, 'll, D: Dump +'ll> Visitor<'l> for DumpVisitor<'l, 'tcx, 'll, D> {\n+    fn visit_mod(&mut self, m: &'l ast::Mod, span: Span, attrs: &[ast::Attribute], id: NodeId) {\n+        // Since we handle explicit modules ourselves in visit_item, this should\n+        // only get called for the root module of a crate.\n+        assert_eq!(id, ast::CRATE_NODE_ID);\n+\n+        let qualname = format!(\"::{}\", self.tcx.node_path_str(id));\n+\n+        let cm = self.tcx.sess.codemap();\n+        let filename = cm.span_to_filename(span);\n+        self.dumper.mod_data(ModData {\n+            id: id,\n+            name: String::new(),\n+            qualname: qualname,\n+            span: span,\n+            scope: id,\n+            filename: filename,\n+            items: m.items.iter().map(|i| i.id).collect(),\n+            visibility: Visibility::Public,\n+            docs: docs_for_attrs(attrs),\n+            sig: None,\n+            attributes: attrs.to_owned(),\n+        }.lower(self.tcx));\n+        self.nest_scope(id, |v| visit::walk_mod(v, m));\n+    }\n+\n     fn visit_item(&mut self, item: &'l ast::Item) {\n         use syntax::ast::ItemKind::*;\n         self.process_macro_use(item.span, item.id);"}, {"sha": "02441a0587eb6a9ad2596ec72a411d7732ad829c", "filename": "src/librustc_save_analysis/external_data.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93dd1cab5d1ea0ceb178db424d4c907a20584b16/src%2Flibrustc_save_analysis%2Fexternal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93dd1cab5d1ea0ceb178db424d4c907a20584b16/src%2Flibrustc_save_analysis%2Fexternal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fexternal_data.rs?ref=93dd1cab5d1ea0ceb178db424d4c907a20584b16", "patch": "@@ -392,7 +392,7 @@ pub struct ModData {\n     pub items: Vec<DefId>,\n     pub visibility: Visibility,\n     pub docs: String,\n-    pub sig: Signature,\n+    pub sig: Option<Signature>,\n     pub attributes: Vec<Attribute>,\n }\n \n@@ -410,7 +410,7 @@ impl Lower for data::ModData {\n             items: self.items.into_iter().map(|id| make_def_id(id, &tcx.hir)).collect(),\n             visibility: self.visibility,\n             docs: self.docs,\n-            sig: self.sig.lower(tcx),\n+            sig: self.sig.map(|s| s.lower(tcx)),\n             attributes: self.attributes.lower(tcx),\n         }\n     }"}, {"sha": "49b14f5eca07261471085dc780b89824cbd2de50", "filename": "src/librustc_save_analysis/json_api_dumper.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93dd1cab5d1ea0ceb178db424d4c907a20584b16/src%2Flibrustc_save_analysis%2Fjson_api_dumper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93dd1cab5d1ea0ceb178db424d4c907a20584b16/src%2Flibrustc_save_analysis%2Fjson_api_dumper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fjson_api_dumper.rs?ref=93dd1cab5d1ea0ceb178db424d4c907a20584b16", "patch": "@@ -293,7 +293,7 @@ impl Into<Option<Def>> for ModData {\n                 parent: None,\n                 decl_id: None,\n                 docs: self.docs,\n-                sig: Some(self.sig.into()),\n+                sig: self.sig.map(|s| s.into()),\n                 attributes: vec![],\n             }),\n             _ => None,"}, {"sha": "eaa0c0825f0e9314282a95e13bee6f4b7218644a", "filename": "src/librustc_save_analysis/json_dumper.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93dd1cab5d1ea0ceb178db424d4c907a20584b16/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93dd1cab5d1ea0ceb178db424d4c907a20584b16/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fjson_dumper.rs?ref=93dd1cab5d1ea0ceb178db424d4c907a20584b16", "patch": "@@ -121,7 +121,7 @@ impl<'b, O: DumpOutput + 'b> Dump for JsonDumper<O> {\n             children: data.items.into_iter().map(|id| id_from_def_id(id)).collect(),\n             decl_id: None,\n             docs: data.docs,\n-            sig: Some(data.sig.into()),\n+            sig: data.sig.map(|s| s.into()),\n             attributes: data.attributes.into_iter().map(|a| a.into()).collect(),\n         };\n         if def.span.file_name.to_str().unwrap() != def.value {"}, {"sha": "5a8acf9abe1d015115a178758e5d479edca497c6", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93dd1cab5d1ea0ceb178db424d4c907a20584b16/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93dd1cab5d1ea0ceb178db424d4c907a20584b16/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=93dd1cab5d1ea0ceb178db424d4c907a20584b16", "patch": "@@ -258,7 +258,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     items: m.items.iter().map(|i| i.id).collect(),\n                     visibility: From::from(&item.vis),\n                     docs: docs_for_attrs(&item.attrs),\n-                    sig: self.sig_base(item),\n+                    sig: Some(self.sig_base(item)),\n                     attributes: item.attrs.clone(),\n                 }))\n             }"}, {"sha": "0a5d0c2e7fe010d54514fbcae37a727762cc32d2", "filename": "src/libsyntax/util/node_count.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93dd1cab5d1ea0ceb178db424d4c907a20584b16/src%2Flibsyntax%2Futil%2Fnode_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93dd1cab5d1ea0ceb178db424d4c907a20584b16/src%2Flibsyntax%2Futil%2Fnode_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fnode_count.rs?ref=93dd1cab5d1ea0ceb178db424d4c907a20584b16", "patch": "@@ -31,7 +31,7 @@ impl<'ast> Visitor<'ast> for NodeCounter {\n         self.count += 1;\n         walk_ident(self, span, ident);\n     }\n-    fn visit_mod(&mut self, m: &Mod, _s: Span, _n: NodeId) {\n+    fn visit_mod(&mut self, m: &Mod, _s: Span, _a: &[Attribute], _n: NodeId) {\n         self.count += 1;\n         walk_mod(self, m)\n     }"}, {"sha": "9288d95009c1de0822b4f3378ce9dd796cc8509e", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93dd1cab5d1ea0ceb178db424d4c907a20584b16/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93dd1cab5d1ea0ceb178db424d4c907a20584b16/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=93dd1cab5d1ea0ceb178db424d4c907a20584b16", "patch": "@@ -56,7 +56,9 @@ pub trait Visitor<'ast>: Sized {\n     fn visit_ident(&mut self, span: Span, ident: Ident) {\n         walk_ident(self, span, ident);\n     }\n-    fn visit_mod(&mut self, m: &'ast Mod, _s: Span, _n: NodeId) { walk_mod(self, m) }\n+    fn visit_mod(&mut self, m: &'ast Mod, _s: Span, _attrs: &[Attribute], _n: NodeId) {\n+        walk_mod(self, m);\n+    }\n     fn visit_foreign_item(&mut self, i: &'ast ForeignItem) { walk_foreign_item(self, i) }\n     fn visit_global_asm(&mut self, ga: &'ast GlobalAsm) { walk_global_asm(self, ga) }\n     fn visit_item(&mut self, i: &'ast Item) { walk_item(self, i) }\n@@ -172,7 +174,7 @@ pub fn walk_ident<'a, V: Visitor<'a>>(visitor: &mut V, span: Span, ident: Ident)\n }\n \n pub fn walk_crate<'a, V: Visitor<'a>>(visitor: &mut V, krate: &'a Crate) {\n-    visitor.visit_mod(&krate.module, krate.span, CRATE_NODE_ID);\n+    visitor.visit_mod(&krate.module, krate.span, &krate.attrs, CRATE_NODE_ID);\n     walk_list!(visitor, visit_attribute, &krate.attrs);\n }\n \n@@ -249,7 +251,7 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n                              item.id)\n         }\n         ItemKind::Mod(ref module) => {\n-            visitor.visit_mod(module, item.span, item.id)\n+            visitor.visit_mod(module, item.span, &item.attrs, item.id)\n         }\n         ItemKind::ForeignMod(ref foreign_module) => {\n             walk_list!(visitor, visit_foreign_item, &foreign_module.items);"}, {"sha": "6318abec69f06526c158e74da6454a12fa36b364", "filename": "src/libsyntax_ext/proc_macro_registrar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93dd1cab5d1ea0ceb178db424d4c907a20584b16/src%2Flibsyntax_ext%2Fproc_macro_registrar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93dd1cab5d1ea0ceb178db424d4c907a20584b16/src%2Flibsyntax_ext%2Fproc_macro_registrar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_registrar.rs?ref=93dd1cab5d1ea0ceb178db424d4c907a20584b16", "patch": "@@ -329,7 +329,7 @@ impl<'a> Visitor<'a> for CollectProcMacros<'a> {\n         visit::walk_item(self, item);\n     }\n \n-    fn visit_mod(&mut self, m: &'a ast::Mod, _s: Span, id: NodeId) {\n+    fn visit_mod(&mut self, m: &'a ast::Mod, _s: Span, _a: &[ast::Attribute], id: NodeId) {\n         let mut prev_in_root = self.in_root;\n         if id != ast::CRATE_NODE_ID {\n             prev_in_root = mem::replace(&mut self.in_root, false);"}]}