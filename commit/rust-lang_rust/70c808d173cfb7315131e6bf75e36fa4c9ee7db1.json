{"sha": "70c808d173cfb7315131e6bf75e36fa4c9ee7db1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwYzgwOGQxNzNjZmI3MzE1MTMxZTZiZjc1ZTM2ZmE0YzllZTdkYjE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-01-04T05:01:48Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-01-04T23:25:17Z"}, "message": "extend tester so that error msgs can be attached to lines", "tree": {"sha": "6555fe35e63ca00b2e3e91a1c5a025095f2c540d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6555fe35e63ca00b2e3e91a1c5a025095f2c540d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70c808d173cfb7315131e6bf75e36fa4c9ee7db1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70c808d173cfb7315131e6bf75e36fa4c9ee7db1", "html_url": "https://github.com/rust-lang/rust/commit/70c808d173cfb7315131e6bf75e36fa4c9ee7db1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70c808d173cfb7315131e6bf75e36fa4c9ee7db1/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3971b520bcdd556ff78120c77ffd13785e1c3695", "url": "https://api.github.com/repos/rust-lang/rust/commits/3971b520bcdd556ff78120c77ffd13785e1c3695", "html_url": "https://github.com/rust-lang/rust/commit/3971b520bcdd556ff78120c77ffd13785e1c3695"}], "stats": {"total": 128, "additions": 123, "deletions": 5}, "files": [{"sha": "a0deaeda26a010bd0769599a054ae2a12983a2c3", "filename": "src/compiletest/compiletest.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70c808d173cfb7315131e6bf75e36fa4c9ee7db1/src%2Fcompiletest%2Fcompiletest.rc", "raw_url": "https://github.com/rust-lang/rust/raw/70c808d173cfb7315131e6bf75e36fa4c9ee7db1/src%2Fcompiletest%2Fcompiletest.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rc?ref=70c808d173cfb7315131e6bf75e36fa4c9ee7db1", "patch": "@@ -5,11 +5,11 @@ mod util;\n mod header;\n mod runtest;\n mod common;\n+mod errors;\n \n // Local Variables:\n // fill-column: 78;\n // indent-tabs-mode: nil\n // c-basic-offset: 4\n // buffer-file-coding-system: utf-8-unix\n-// compile-command: \"make -k -C $RBUILD 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n // End:"}, {"sha": "c0d96fc514258445f97b0672a610965cb06dc749", "filename": "src/compiletest/errors.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/70c808d173cfb7315131e6bf75e36fa4c9ee7db1/src%2Fcompiletest%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70c808d173cfb7315131e6bf75e36fa4c9ee7db1/src%2Fcompiletest%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Ferrors.rs?ref=70c808d173cfb7315131e6bf75e36fa4c9ee7db1", "patch": "@@ -0,0 +1,54 @@\n+import option;\n+import str;\n+import std::io;\n+import std::fs;\n+\n+import common::config;\n+\n+export load_errors;\n+export expected_error;\n+\n+type expected_error = { line: uint, kind: str, msg: str };\n+\n+// Load any test directives embedded in the file\n+fn load_errors(testfile: str) -> [expected_error] {\n+    let error_patterns = [];\n+    let rdr = result::get(io::file_reader(testfile));\n+    let line_num = 1u;\n+    while !rdr.eof() {\n+        let ln = rdr.read_line();\n+        error_patterns += parse_expected(line_num, ln);\n+        line_num += 1u;\n+    }\n+    ret error_patterns;\n+}\n+\n+fn parse_expected(line_num: uint, line: str) -> [expected_error] {\n+    let error_tag = \"//!\";\n+    let idx0 = str::find(line, error_tag);\n+    if idx0 < 0 { ret []; }\n+    let idx = (idx0 as uint) + str::byte_len(error_tag);\n+\n+    // \"//!^^^ kind msg\" denotes a message expected\n+    // three lines above current line:\n+    let adjust_line = 0u;\n+    let len = str::byte_len(line);\n+    while idx < len && line[idx] == ('^' as u8) {\n+        adjust_line += 1u;\n+        idx += 1u;\n+    }\n+\n+    // Extract kind:\n+    while idx < len && line[idx] == (' ' as u8) { idx += 1u; }\n+    let start_kind = idx;\n+    while idx < len && line[idx] != (' ' as u8) { idx += 1u; }\n+    let kind = str::to_lower(str::slice(line, start_kind, idx));\n+\n+    // Extract msg:\n+    while idx < len && line[idx] == (' ' as u8) { idx += 1u; }\n+    let msg = str::slice(line, idx, len);\n+\n+    #debug(\"line=%u kind=%s msg=%s\", line_num - adjust_line, kind, msg);\n+\n+    ret [{line: line_num - adjust_line, kind: kind, msg: msg}];\n+}"}, {"sha": "3fc5fc4c75eba85293f9e8bc4c5ddd15694528f6", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 67, "deletions": 2, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/70c808d173cfb7315131e6bf75e36fa4c9ee7db1/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70c808d173cfb7315131e6bf75e36fa4c9ee7db1/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=70c808d173cfb7315131e6bf75e36fa4c9ee7db1", "patch": "@@ -42,7 +42,16 @@ fn run_cfail_test(cx: cx, props: test_props, testfile: str) {\n     }\n \n     check_correct_failure_status(procres);\n-    check_error_patterns(props, testfile, procres);\n+\n+    let expected_errors = errors::load_errors(testfile);\n+    if vec::is_not_empty(expected_errors) {\n+        if vec::is_not_empty(props.error_patterns) {\n+            fatal(\"both error pattern and expected errors specified\");\n+        }\n+        check_expected_errors(expected_errors, testfile, procres);\n+    } else {\n+        check_error_patterns(props, testfile, procres);\n+    }\n }\n \n fn run_rfail_test(cx: cx, props: test_props, testfile: str) {\n@@ -181,7 +190,9 @@ actual:\\n\\\n     }\n }\n \n-fn check_error_patterns(props: test_props, testfile: str, procres: procres) {\n+fn check_error_patterns(props: test_props,\n+                        testfile: str,\n+                        procres: procres) {\n     if vec::is_empty(props.error_patterns) {\n         fatal(\"no error pattern specified in \" + testfile);\n     }\n@@ -218,6 +229,60 @@ fn check_error_patterns(props: test_props, testfile: str, procres: procres) {\n     }\n }\n \n+fn check_expected_errors(expected_errors: [errors::expected_error],\n+                         testfile: str,\n+                         procres: procres) {\n+\n+    // true if we found the error in question\n+    let found_flags = vec::init_elt_mut(false, vec::len(expected_errors));\n+\n+    if procres.status == 0 {\n+        fatal(\"process did not return an error status\");\n+    }\n+\n+    // Scan and extract our error/warning messages,\n+    // which look like:\n+    //    filename:line1:col1: line2:col2: *error:* msg\n+    //    filename:line1:col1: line2:col2: *warning:* msg\n+    // where line1:col1: is the starting point, line2:col2:\n+    // is the ending point, and * represents ANSI color codes.\n+    for line: str in str::split(procres.stdout, '\\n' as u8) {\n+        let was_expected = false;\n+        vec::iteri(expected_errors) {|i, ee|\n+            if !found_flags[i] {\n+                let needle = #fmt(\"%s:%u:\", testfile, ee.line);\n+                #debug[\"needle=%s ee.kind=%s ee.msg=%s line=%s\",\n+                       needle, ee.kind, ee.msg, line];\n+                if (str::contains(line, needle) &&\n+                    str::contains(line, ee.kind) &&\n+                    str::contains(line, ee.msg)) {\n+                    found_flags[i] = true;\n+                    was_expected = true;\n+                }\n+            }\n+        }\n+\n+        // ignore this msg which gets printed at the end\n+        if str::contains(line, \"aborting due to previous errors\") {\n+            was_expected = true;\n+        }\n+\n+        if !was_expected && (str::contains(line, \"error\") ||\n+                             str::contains(line, \"warning\")) {\n+            fatal_procres(#fmt[\"unexpected error pattern '%s'!\", line],\n+                          procres);\n+        }\n+    }\n+\n+    uint::range(0u, vec::len(found_flags)) {|i|\n+        if !found_flags[i] {\n+            let ee = expected_errors[i];\n+            fatal_procres(#fmt[\"expected %s on line %u not found: %s\",\n+                               ee.kind, ee.line, ee.msg], procres);\n+        }\n+    }\n+}\n+\n type procargs = {prog: str, args: [str]};\n \n type procres = {status: int, stdout: str, stderr: str, cmdline: str};"}, {"sha": "bc1357372b025c790ffe571fc2533e22dd6685fc", "filename": "src/test/compile-fail/alt-join.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/70c808d173cfb7315131e6bf75e36fa4c9ee7db1/src%2Ftest%2Fcompile-fail%2Falt-join.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70c808d173cfb7315131e6bf75e36fa4c9ee7db1/src%2Ftest%2Fcompile-fail%2Falt-join.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Falt-join.rs?ref=70c808d173cfb7315131e6bf75e36fa4c9ee7db1", "patch": "@@ -1,4 +1,3 @@\n-// error-pattern:unresolved name\n // a good test that we merge paths correctly in the presence of a\n // variable that's used before it's declared\n \n@@ -7,6 +6,6 @@ fn my_fail() -> ! { fail; }\n fn main() {\n     alt true { false { my_fail(); } true { } }\n \n-    log(debug, x);\n+    log(debug, x); //! ERROR unresolved name: x\n     let x: int;\n }"}]}