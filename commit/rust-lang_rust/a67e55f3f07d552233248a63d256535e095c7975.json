{"sha": "a67e55f3f07d552233248a63d256535e095c7975", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2N2U1NWYzZjA3ZDU1MjIzMzI0OGE2M2QyNTY1MzVlMDk1Yzc5NzU=", "commit": {"author": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2015-08-13T06:15:42Z"}, "committer": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2015-08-13T06:15:42Z"}, "message": "lint messages: remove trailing period\n\nSince lint messages often are suffixed by \", #[warn(xxx)] on by default\"\nthis trailing period produces an ugly clash with the comma.", "tree": {"sha": "ac08f49dc73ea731add4bda6ebb69f38adc31784", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac08f49dc73ea731add4bda6ebb69f38adc31784"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a67e55f3f07d552233248a63d256535e095c7975", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a67e55f3f07d552233248a63d256535e095c7975", "html_url": "https://github.com/rust-lang/rust/commit/a67e55f3f07d552233248a63d256535e095c7975", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a67e55f3f07d552233248a63d256535e095c7975/comments", "author": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7aee04878f5228f15d94b04addadfa9fe5ccc307", "url": "https://api.github.com/repos/rust-lang/rust/commits/7aee04878f5228f15d94b04addadfa9fe5ccc307", "html_url": "https://github.com/rust-lang/rust/commit/7aee04878f5228f15d94b04addadfa9fe5ccc307"}], "stats": {"total": 38, "additions": 20, "deletions": 18}, "files": [{"sha": "377c7e66ebd6a9c572b1c9739c5615c9459793fc", "filename": "src/approx_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a67e55f3f07d552233248a63d256535e095c7975/src%2Fapprox_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a67e55f3f07d552233248a63d256535e095c7975/src%2Fapprox_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fapprox_const.rs?ref=a67e55f3f07d552233248a63d256535e095c7975", "patch": "@@ -53,7 +53,7 @@ fn check_known_consts(cx: &Context, span: Span, str: &str, module: &str) {\n         for &(constant, name) in KNOWN_CONSTS {\n             if within_epsilon(constant, value) {\n                 span_lint(cx, APPROX_CONSTANT, span, &format!(\n-                    \"approximate value of `{}::{}` found. Consider using it directly.\", module, &name));\n+                    \"approximate value of `{}::{}` found. Consider using it directly\", module, &name));\n             }\n         }\n     }"}, {"sha": "eda38419d4dc7758c831959f90ff8b93d870c38c", "filename": "src/eta_reduction.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a67e55f3f07d552233248a63d256535e095c7975/src%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a67e55f3f07d552233248a63d256535e095c7975/src%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feta_reduction.rs?ref=a67e55f3f07d552233248a63d256535e095c7975", "patch": "@@ -51,7 +51,7 @@ impl LintPass for EtaPass {\n                         }\n                     }\n                     span_lint(cx, REDUNDANT_CLOSURE, expr.span,\n-                                 &format!(\"redundant closure found. Consider using `{}` in its place.\",\n+                                 &format!(\"redundant closure found. Consider using `{}` in its place\",\n                                           expr_to_string(caller))[..])\n                 }\n             }"}, {"sha": "8c6940e3df4909e86350331e9f1bad0612ace715", "filename": "src/identity_op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a67e55f3f07d552233248a63d256535e095c7975/src%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a67e55f3f07d552233248a63d256535e095c7975/src%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fidentity_op.rs?ref=a67e55f3f07d552233248a63d256535e095c7975", "patch": "@@ -49,7 +49,7 @@ impl LintPass for IdentityOp {\n fn check(cx: &Context, e: &Expr, m: i8, span: Span, arg: Span) {\n     if have_lit(cx, e, m) {\n         span_lint(cx, IDENTITY_OP, span, &format!(\n-            \"the operation is ineffective. Consider reducing it to `{}`.\",\n+            \"the operation is ineffective. Consider reducing it to `{}`\",\n            snippet(cx, arg, \"..\")));\n     }\n }"}, {"sha": "da230c1d28a7c5dd7bbccf9e1a05438dbbca169e", "filename": "src/len_zero.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a67e55f3f07d552233248a63d256535e095c7975/src%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a67e55f3f07d552233248a63d256535e095c7975/src%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flen_zero.rs?ref=a67e55f3f07d552233248a63d256535e095c7975", "patch": "@@ -59,7 +59,7 @@ fn check_trait_items(cx: &Context, item: &Item, trait_items: &[P<TraitItem>]) {\n             if is_named_self(i, \"len\") {\n                 span_lint(cx, LEN_WITHOUT_IS_EMPTY, i.span,\n                           &format!(\"trait `{}` has a `.len(_: &Self)` method, but no \\\n-                                    `.is_empty(_: &Self)` method. Consider adding one.\",\n+                                    `.is_empty(_: &Self)` method. Consider adding one\",\n                                    item.ident.name));\n             }\n         };\n@@ -79,7 +79,7 @@ fn check_impl_items(cx: &Context, item: &Item, impl_items: &[P<ImplItem>]) {\n                 span_lint(cx, LEN_WITHOUT_IS_EMPTY,\n                           Span{ lo: s.lo, hi: s.lo, expn_id: s.expn_id },\n                           &format!(\"item `{}` has a `.len(_: &Self)` method, but no \\\n-                                    `.is_empty(_: &Self)` method. Consider adding one.\",\n+                                    `.is_empty(_: &Self)` method. Consider adding one\",\n                                    item.ident.name));\n                 return;\n             }"}, {"sha": "403845771a9ce69feacc725fab53270546b31266", "filename": "src/methods.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a67e55f3f07d552233248a63d256535e095c7975/src%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a67e55f3f07d552233248a63d256535e095c7975/src%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmethods.rs?ref=a67e55f3f07d552233248a63d256535e095c7975", "patch": "@@ -30,12 +30,12 @@ impl LintPass for MethodsPass {\n                         span_lint(cx, OPTION_UNWRAP_USED, expr.span,\n                                   \"used unwrap() on an Option value. If you don't want \\\n                                    to handle the None case gracefully, consider using\n-                                   expect() to provide a better panic message.\");\n+                                   expect() to provide a better panic message\");\n                     }\n                     else if match_def_path(cx, did.did, &[\"core\", \"result\", \"Result\"]) {\n                         span_lint(cx, RESULT_UNWRAP_USED, expr.span,\n                                   \"used unwrap() on a Result value. Graceful handling \\\n-                                   of Err values is preferred.\");\n+                                   of Err values is preferred\");\n                     }\n                 }\n             }"}, {"sha": "82754820f8babe5ab9ea589341cd508ae53cdf19", "filename": "src/misc.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a67e55f3f07d552233248a63d256535e095c7975/src%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a67e55f3f07d552233248a63d256535e095c7975/src%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmisc.rs?ref=a67e55f3f07d552233248a63d256535e095c7975", "patch": "@@ -129,7 +129,8 @@ impl LintPass for FloatCmp {\n             let op = cmp.node;\n             if (op == BiEq || op == BiNe) && (is_float(cx, left) || is_float(cx, right)) {\n                 span_lint(cx, FLOAT_CMP, expr.span, &format!(\n-                    \"{}-comparison of f32 or f64 detected. Consider changing this to `abs({} - {}) < epsilon` for some suitable value of epsilon.\",\n+                    \"{}-comparison of f32 or f64 detected. Consider changing this to \\\n+                     `abs({} - {}) < epsilon` for some suitable value of epsilon\",\n                     binop_to_string(op), snippet(cx, left.span, \"..\"),\n                     snippet(cx, right.span, \"..\")));\n             }\n@@ -160,7 +161,8 @@ impl LintPass for Precedence {\n         if let ExprBinary(Spanned { node: op, ..}, ref left, ref right) = expr.node {\n             if is_bit_op(op) && (is_arith_expr(left) || is_arith_expr(right)) {\n                 span_lint(cx, PRECEDENCE, expr.span,\n-                    \"operator precedence can trip the unwary. Consider adding parenthesis to the subexpression.\");\n+                    \"operator precedence can trip the unwary. Consider adding parenthesis \\\n+                     to the subexpression\");\n             }\n         }\n     }\n@@ -216,7 +218,7 @@ fn check_to_owned(cx: &Context, expr: &Expr, other_span: Span) {\n                 name == \"to_owned\" && is_str_arg(cx, args) {\n                     span_lint(cx, CMP_OWNED, expr.span, &format!(\n                         \"this creates an owned instance just for comparison. \\\n-                         Consider using `{}.as_slice()` to compare without allocation.\",\n+                         Consider using `{}.as_slice()` to compare without allocation\",\n                         snippet(cx, other_span, \"..\")))\n                 }\n         },\n@@ -226,7 +228,7 @@ fn check_to_owned(cx: &Context, expr: &Expr, other_span: Span) {\n                     match_path(path, &[\"String\", \"from\"]) {\n                         span_lint(cx, CMP_OWNED, expr.span, &format!(\n                             \"this creates an owned instance just for comparison. \\\n-                             Consider using `{}.as_slice()` to compare without allocation.\",\n+                             Consider using `{}.as_slice()` to compare without allocation\",\n                             snippet(cx, other_span, \"..\")))\n                     }\n             }"}, {"sha": "a2055bb655f1ddbcdf59347e1b4267844a94c639", "filename": "src/mut_mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a67e55f3f07d552233248a63d256535e095c7975/src%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a67e55f3f07d552233248a63d256535e095c7975/src%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmut_mut.rs?ref=a67e55f3f07d552233248a63d256535e095c7975", "patch": "@@ -46,7 +46,7 @@ fn check_expr_expd(cx: &Context, expr: &Expr, info: Option<&ExpnInfo>) {\n                 cx.tcx.expr_ty(e).sty {\n                     span_lint(cx, MUT_MUT, expr.span,\n                               \"this expression mutably borrows a mutable reference. \\\n-                               Consider reborrowing.\")\n+                               Consider reborrowing\")\n                 }\n         })\n     })"}, {"sha": "3868854c7a108ff7f0bd27e4a0217edf4d50fb3b", "filename": "src/ptr_arg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a67e55f3f07d552233248a63d256535e095c7975/src%2Fptr_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a67e55f3f07d552233248a63d256535e095c7975/src%2Fptr_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fptr_arg.rs?ref=a67e55f3f07d552233248a63d256535e095c7975", "patch": "@@ -61,9 +61,9 @@ fn check_ptr_subtype(cx: &Context, span: Span, ty: &Ty) {\n         &[\"String\"]).map_or((), |_| {\n             span_lint(cx, PTR_ARG, span,\n                       \"writing `&String` instead of `&str` involves a new object \\\n-                       where a slice will do. Consider changing the type to `&str`.\")\n+                       where a slice will do. Consider changing the type to `&str`\")\n         }), |_| span_lint(cx, PTR_ARG, span,\n                           \"writing `&Vec<_>` instead of \\\n                            `&[_]` involves one more reference and cannot be used with \\\n-                           non-Vec-based slices. Consider changing the type to `&[...]`.\"))\n+                           non-Vec-based slices. Consider changing the type to `&[...]`\"))\n }"}, {"sha": "afc444dd67f7f9b9aa760281a499bcc954716dae", "filename": "src/strings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a67e55f3f07d552233248a63d256535e095c7975/src%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a67e55f3f07d552233248a63d256535e095c7975/src%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstrings.rs?ref=a67e55f3f07d552233248a63d256535e095c7975", "patch": "@@ -30,7 +30,7 @@ impl LintPass for StringAdd {\n             if is_string(cx, target) && is_add(src, target) {\n                 span_lint(cx, STRING_ADD_ASSIGN, e.span,\n                     \"you assign the result of adding something to this string. \\\n-                    Consider using `String::push_str()` instead.\")\n+                    Consider using `String::push_str()` instead\")\n             }\n         }\n     }"}, {"sha": "c22d088ce5b88f6ff6657060cff512fcdfe7265f", "filename": "src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a67e55f3f07d552233248a63d256535e095c7975/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a67e55f3f07d552233248a63d256535e095c7975/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=a67e55f3f07d552233248a63d256535e095c7975", "patch": "@@ -90,7 +90,7 @@ fn check_let_unit(cx: &Context, decl: &Decl, info: Option<&ExpnInfo>) {\n         let bindtype = &cx.tcx.pat_ty(&*local.pat).sty;\n         if *bindtype == ty::TyTuple(vec![]) {\n             span_lint(cx, LET_UNIT_VALUE, decl.span, &format!(\n-                \"this let-binding has unit value. Consider omitting `let {} =`.\",\n+                \"this let-binding has unit value. Consider omitting `let {} =`\",\n                 snippet(cx, local.pat.span, \"..\")));\n         }\n     }"}, {"sha": "161e90d0f64e7fccba4dc7b646665e5c7f8b87da", "filename": "src/unicode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a67e55f3f07d552233248a63d256535e095c7975/src%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a67e55f3f07d552233248a63d256535e095c7975/src%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Funicode.rs?ref=a67e55f3f07d552233248a63d256535e095c7975", "patch": "@@ -27,11 +27,11 @@ fn check_str(cx: &Context, string: &str, span: Span) {\n     for (i, c) in string.char_indices() {\n         if c == '\\u{200B}' {\n             str_pos_lint(cx, ZERO_WIDTH_SPACE, span, i,\n-                         \"zero-width space detected. Consider using `\\\\u{200B}`.\");\n+                         \"zero-width space detected. Consider using `\\\\u{200B}`\");\n         }\n         if c as u32 > 0x7F {\n             str_pos_lint(cx, NON_ASCII_LITERAL, span, i, &format!(\n-                \"literal non-ASCII character detected. Consider using `\\\\u{{{:X}}}`.\", c as u32));\n+                \"literal non-ASCII character detected. Consider using `\\\\u{{{:X}}}`\", c as u32));\n         }\n     }\n }"}]}