{"sha": "d4a005bd03dd2ef229bb809d128f9b31c159c18e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0YTAwNWJkMDNkZDJlZjIyOWJiODA5ZDEyOGY5YjMxYzE1OWMxOGU=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-02-24T13:48:40Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-02-24T13:56:29Z"}, "message": "librustc{, codegen_ssa,infer,mir_build}: don't clone types that are copy", "tree": {"sha": "112465f9ea30d8ce757e2b4a3404695087ce115e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/112465f9ea30d8ce757e2b4a3404695087ce115e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4a005bd03dd2ef229bb809d128f9b31c159c18e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4a005bd03dd2ef229bb809d128f9b31c159c18e", "html_url": "https://github.com/rust-lang/rust/commit/d4a005bd03dd2ef229bb809d128f9b31c159c18e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4a005bd03dd2ef229bb809d128f9b31c159c18e/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ae4500eff740b5935fc24b23e3c4be9789caf37", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ae4500eff740b5935fc24b23e3c4be9789caf37", "html_url": "https://github.com/rust-lang/rust/commit/5ae4500eff740b5935fc24b23e3c4be9789caf37"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "c027d6f61b01f2d32e5520773a04331189b27e39", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4a005bd03dd2ef229bb809d128f9b31c159c18e/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4a005bd03dd2ef229bb809d128f9b31c159c18e/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=d4a005bd03dd2ef229bb809d128f9b31c159c18e", "patch": "@@ -1526,7 +1526,7 @@ impl<'tcx> GlobalCtxt<'tcx> {\n         ty::tls::with_related_context(tcx, |icx| {\n             let new_icx = ty::tls::ImplicitCtxt {\n                 tcx,\n-                query: icx.query.clone(),\n+                query: icx.query,\n                 diagnostics: icx.diagnostics,\n                 layout_depth: icx.layout_depth,\n                 task_deps: icx.task_deps,"}, {"sha": "d17ef3a6c9a8cce5ff7238ee985ac5c5c808e5a1", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4a005bd03dd2ef229bb809d128f9b31c159c18e/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4a005bd03dd2ef229bb809d128f9b31c159c18e/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=d4a005bd03dd2ef229bb809d128f9b31c159c18e", "patch": "@@ -1447,7 +1447,7 @@ impl<'tcx> ToPredicate<'tcx> for ConstnessAnd<TraitRef<'tcx>> {\n impl<'tcx> ToPredicate<'tcx> for ConstnessAnd<&TraitRef<'tcx>> {\n     fn to_predicate(&self) -> Predicate<'tcx> {\n         ty::Predicate::Trait(\n-            ty::Binder::dummy(ty::TraitPredicate { trait_ref: self.value.clone() }),\n+            ty::Binder::dummy(ty::TraitPredicate { trait_ref: *self.value }),\n             self.constness,\n         )\n     }"}, {"sha": "3394fed8402224ff98f0d7929c67065d93aedd25", "filename": "src/librustc/ty/query/job.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4a005bd03dd2ef229bb809d128f9b31c159c18e/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4a005bd03dd2ef229bb809d128f9b31c159c18e/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs?ref=d4a005bd03dd2ef229bb809d128f9b31c159c18e", "patch": "@@ -173,7 +173,7 @@ impl<'tcx> QueryLatch<'tcx> {\n                 return CycleError { usage, cycle };\n             }\n \n-            current_job = info.job.parent.clone();\n+            current_job = info.job.parent;\n         }\n \n         panic!(\"did not find a cycle\")"}, {"sha": "4248627dccaf23533f896c68a3d96bf55354e03d", "filename": "src/librustc_codegen_ssa/mir/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4a005bd03dd2ef229bb809d128f9b31c159c18e/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4a005bd03dd2ef229bb809d128f9b31c159c18e/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs?ref=d4a005bd03dd2ef229bb809d128f9b31c159c18e", "patch": "@@ -31,7 +31,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             _ => {\n                 let val = self.eval_mir_constant(constant)?;\n                 let ty = self.monomorphize(&constant.literal.ty);\n-                Ok(OperandRef::from_const(bx, val.clone(), ty))\n+                Ok(OperandRef::from_const(bx, val, ty))\n             }\n         }\n     }"}, {"sha": "fc9f3bb076745a6f076a8783d11e7aa0b7682cf6", "filename": "src/librustc_infer/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4a005bd03dd2ef229bb809d128f9b31c159c18e/src%2Flibrustc_infer%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4a005bd03dd2ef229bb809d128f9b31c159c18e/src%2Flibrustc_infer%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=d4a005bd03dd2ef229bb809d128f9b31c159c18e", "patch": "@@ -848,7 +848,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n         for upper_bound in &upper_bounds {\n             if let ty::RePlaceholder(p) = upper_bound.region {\n                 if node_universe.cannot_name(p.universe) {\n-                    let origin = self.var_infos[node_idx].origin.clone();\n+                    let origin = self.var_infos[node_idx].origin;\n                     errors.push(RegionResolutionError::UpperBoundUniverseConflict(\n                         node_idx,\n                         origin,"}, {"sha": "4583e244f493d7c904a7aa04aba91fcdac388d9c", "filename": "src/librustc_mir_build/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4a005bd03dd2ef229bb809d128f9b31c159c18e/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4a005bd03dd2ef229bb809d128f9b31c159c18e/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Finto.rs?ref=d4a005bd03dd2ef229bb809d128f9b31c159c18e", "patch": "@@ -376,7 +376,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     TerminatorKind::Yield {\n                         value,\n                         resume,\n-                        resume_arg: destination.clone(),\n+                        resume_arg: *destination,\n                         drop: cleanup,\n                     },\n                 );"}]}