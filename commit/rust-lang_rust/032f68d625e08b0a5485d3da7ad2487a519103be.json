{"sha": "032f68d625e08b0a5485d3da7ad2487a519103be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzMmY2OGQ2MjVlMDhiMGE1NDg1ZDNkYTdhZDI0ODdhNTE5MTAzYmU=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-11-11T21:40:09Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-11-26T20:32:27Z"}, "message": "Remove ForeignMod struct.", "tree": {"sha": "258c2ee77cb1478721c20ef1f11a88dd9078a3ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/258c2ee77cb1478721c20ef1f11a88dd9078a3ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/032f68d625e08b0a5485d3da7ad2487a519103be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/032f68d625e08b0a5485d3da7ad2487a519103be", "html_url": "https://github.com/rust-lang/rust/commit/032f68d625e08b0a5485d3da7ad2487a519103be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/032f68d625e08b0a5485d3da7ad2487a519103be/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "419a9186a4c8aeb2157298ea084a54c87ee2a653", "url": "https://api.github.com/repos/rust-lang/rust/commits/419a9186a4c8aeb2157298ea084a54c87ee2a653", "html_url": "https://github.com/rust-lang/rust/commit/419a9186a4c8aeb2157298ea084a54c87ee2a653"}], "stats": {"total": 154, "additions": 69, "deletions": 85}, "files": [{"sha": "0b704fd5fe63c4bbec29b66ce81f62bd8d8bf560", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/032f68d625e08b0a5485d3da7ad2487a519103be/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/032f68d625e08b0a5485d3da7ad2487a519103be/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=032f68d625e08b0a5485d3da7ad2487a519103be", "patch": "@@ -316,7 +316,12 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 })\n             }\n             ItemKind::Mod(ref m) => hir::ItemKind::Mod(self.lower_mod(m)),\n-            ItemKind::ForeignMod(ref nm) => hir::ItemKind::ForeignMod(self.lower_foreign_mod(nm)),\n+            ItemKind::ForeignMod(ref fm) => hir::ItemKind::ForeignMod {\n+                abi: fm.abi.map_or(abi::Abi::C, |abi| self.lower_abi(abi)),\n+                items: self\n+                    .arena\n+                    .alloc_from_iter(fm.items.iter().map(|x| self.lower_foreign_item_ref(x))),\n+            },\n             ItemKind::GlobalAsm(ref ga) => hir::ItemKind::GlobalAsm(self.lower_global_asm(ga)),\n             ItemKind::TyAlias(_, ref gen, _, Some(ref ty)) => {\n                 // We lower\n@@ -725,15 +730,6 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         }\n     }\n \n-    fn lower_foreign_mod(&mut self, fm: &ForeignMod) -> hir::ForeignMod<'hir> {\n-        hir::ForeignMod {\n-            abi: fm.abi.map_or(abi::Abi::C, |abi| self.lower_abi(abi)),\n-            items: self\n-                .arena\n-                .alloc_from_iter(fm.items.iter().map(|x| self.lower_foreign_item_ref(x))),\n-        }\n-    }\n-\n     fn lower_global_asm(&mut self, ga: &GlobalAsm) -> &'hir hir::GlobalAsm {\n         self.arena.alloc(hir::GlobalAsm { asm: ga.asm })\n     }"}, {"sha": "f217bbbb448521e7705f12137643088b52b6f844", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/032f68d625e08b0a5485d3da7ad2487a519103be/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/032f68d625e08b0a5485d3da7ad2487a519103be/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=032f68d625e08b0a5485d3da7ad2487a519103be", "patch": "@@ -2284,12 +2284,6 @@ pub struct Mod<'hir> {\n     pub item_ids: &'hir [ItemId],\n }\n \n-#[derive(Debug, HashStable_Generic)]\n-pub struct ForeignMod<'hir> {\n-    pub abi: Abi,\n-    pub items: &'hir [ForeignItemRef<'hir>],\n-}\n-\n #[derive(Encodable, Debug, HashStable_Generic)]\n pub struct GlobalAsm {\n     pub asm: Symbol,\n@@ -2536,7 +2530,7 @@ pub enum ItemKind<'hir> {\n     /// A module.\n     Mod(Mod<'hir>),\n     /// An external module, e.g. `extern { .. }`.\n-    ForeignMod(ForeignMod<'hir>),\n+    ForeignMod { abi: Abi, items: &'hir [ForeignItemRef<'hir>] },\n     /// Module-level inline assembly (from `global_asm!`).\n     GlobalAsm(&'hir GlobalAsm),\n     /// A type alias, e.g., `type Foo = Bar<u8>`."}, {"sha": "db0bc62502f2b553c5bc9b1d6e7172ff8de597b7", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/032f68d625e08b0a5485d3da7ad2487a519103be/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/032f68d625e08b0a5485d3da7ad2487a519103be/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=032f68d625e08b0a5485d3da7ad2487a519103be", "patch": "@@ -589,9 +589,9 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item<'v>) {\n             // `visit_mod()` takes care of visiting the `Item`'s `HirId`.\n             visitor.visit_mod(module, item.span, item.hir_id)\n         }\n-        ItemKind::ForeignMod(ref foreign_module) => {\n+        ItemKind::ForeignMod { abi: _, items } => {\n             visitor.visit_id(item.hir_id);\n-            walk_list!(visitor, visit_foreign_item_ref, foreign_module.items);\n+            walk_list!(visitor, visit_foreign_item_ref, items);\n         }\n         ItemKind::GlobalAsm(_) => {\n             visitor.visit_id(item.hir_id);"}, {"sha": "b870e4c6ead8369d613f5e19ad2a5a6186437448", "filename": "compiler/rustc_hir/src/target.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/032f68d625e08b0a5485d3da7ad2487a519103be/compiler%2Frustc_hir%2Fsrc%2Ftarget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/032f68d625e08b0a5485d3da7ad2487a519103be/compiler%2Frustc_hir%2Fsrc%2Ftarget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Ftarget.rs?ref=032f68d625e08b0a5485d3da7ad2487a519103be", "patch": "@@ -91,7 +91,7 @@ impl Target {\n             ItemKind::Const(..) => Target::Const,\n             ItemKind::Fn(..) => Target::Fn,\n             ItemKind::Mod(..) => Target::Mod,\n-            ItemKind::ForeignMod(..) => Target::ForeignMod,\n+            ItemKind::ForeignMod { .. } => Target::ForeignMod,\n             ItemKind::GlobalAsm(..) => Target::GlobalAsm,\n             ItemKind::TyAlias(..) => Target::TyAlias,\n             ItemKind::OpaqueTy(..) => Target::OpaqueTy,"}, {"sha": "25b09d76295f2951d24ccf000480652251c37372", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/032f68d625e08b0a5485d3da7ad2487a519103be/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/032f68d625e08b0a5485d3da7ad2487a519103be/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=032f68d625e08b0a5485d3da7ad2487a519103be", "patch": "@@ -352,13 +352,6 @@ impl<'a> State<'a> {\n         }\n     }\n \n-    pub fn print_foreign_mod(&mut self, nmod: &hir::ForeignMod<'_>, attrs: &[ast::Attribute]) {\n-        self.print_inner_attributes(attrs);\n-        for item in nmod.items {\n-            self.ann.nested(self, Nested::ForeignItem(item.id));\n-        }\n-    }\n-\n     pub fn print_opt_lifetime(&mut self, lifetime: &hir::Lifetime) {\n         if !lifetime.is_elided() {\n             self.print_lifetime(lifetime);\n@@ -647,11 +640,14 @@ impl<'a> State<'a> {\n                 self.print_mod(_mod, &item.attrs);\n                 self.bclose(item.span);\n             }\n-            hir::ItemKind::ForeignMod(ref nmod) => {\n+            hir::ItemKind::ForeignMod { abi, items } => {\n                 self.head(\"extern\");\n-                self.word_nbsp(nmod.abi.to_string());\n+                self.word_nbsp(abi.to_string());\n                 self.bopen();\n-                self.print_foreign_mod(nmod, &item.attrs);\n+                self.print_inner_attributes(item.attrs);\n+                for item in items {\n+                    self.ann.nested(self, Nested::ForeignItem(item.id));\n+                }\n                 self.bclose(item.span);\n             }\n             hir::ItemKind::GlobalAsm(ref ga) => {"}, {"sha": "e1c60050d943536bfd2d141709f92836cc95e782", "filename": "compiler/rustc_incremental/src/persist/dirty_clean.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/032f68d625e08b0a5485d3da7ad2487a519103be/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/032f68d625e08b0a5485d3da7ad2487a519103be/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs?ref=032f68d625e08b0a5485d3da7ad2487a519103be", "patch": "@@ -280,7 +280,7 @@ impl DirtyCleanVisitor<'tcx> {\n                     HirItem::Mod(..) => (\"ItemMod\", LABELS_HIR_ONLY),\n \n                     // // An external module\n-                    HirItem::ForeignMod(..) => (\"ItemForeignMod\", LABELS_HIR_ONLY),\n+                    HirItem::ForeignMod { .. } => (\"ItemForeignMod\", LABELS_HIR_ONLY),\n \n                     // Module-level inline assembly (from global_asm!)\n                     HirItem::GlobalAsm(..) => (\"ItemGlobalAsm\", LABELS_HIR_ONLY),"}, {"sha": "4785b6c379c228625f1c4863da9c24b9534f60c0", "filename": "compiler/rustc_metadata/src/foreign_modules.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/032f68d625e08b0a5485d3da7ad2487a519103be/compiler%2Frustc_metadata%2Fsrc%2Fforeign_modules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/032f68d625e08b0a5485d3da7ad2487a519103be/compiler%2Frustc_metadata%2Fsrc%2Fforeign_modules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fforeign_modules.rs?ref=032f68d625e08b0a5485d3da7ad2487a519103be", "patch": "@@ -16,16 +16,13 @@ struct Collector<'tcx> {\n \n impl ItemLikeVisitor<'tcx> for Collector<'tcx> {\n     fn visit_item(&mut self, it: &'tcx hir::Item<'tcx>) {\n-        let fm = match it.kind {\n-            hir::ItemKind::ForeignMod(ref fm) => fm,\n+        let items = match it.kind {\n+            hir::ItemKind::ForeignMod { items, .. } => items,\n             _ => return,\n         };\n \n-        let foreign_items = fm\n-            .items\n-            .iter()\n-            .map(|it| self.tcx.hir().local_def_id(it.id.hir_id).to_def_id())\n-            .collect();\n+        let foreign_items =\n+            items.iter().map(|it| self.tcx.hir().local_def_id(it.id.hir_id).to_def_id()).collect();\n         self.modules.push(ForeignModule {\n             foreign_items,\n             def_id: self.tcx.hir().local_def_id(it.hir_id).to_def_id(),"}, {"sha": "d088288c507677282727e841ab403ed611e600a4", "filename": "compiler/rustc_metadata/src/link_args.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/032f68d625e08b0a5485d3da7ad2487a519103be/compiler%2Frustc_metadata%2Fsrc%2Flink_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/032f68d625e08b0a5485d3da7ad2487a519103be/compiler%2Frustc_metadata%2Fsrc%2Flink_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flink_args.rs?ref=032f68d625e08b0a5485d3da7ad2487a519103be", "patch": "@@ -26,11 +26,11 @@ struct Collector<'tcx> {\n \n impl<'tcx> ItemLikeVisitor<'tcx> for Collector<'tcx> {\n     fn visit_item(&mut self, it: &'tcx hir::Item<'tcx>) {\n-        let fm = match it.kind {\n-            hir::ItemKind::ForeignMod(ref fm) => fm,\n+        let abi = match it.kind {\n+            hir::ItemKind::ForeignMod { abi, .. } => abi,\n             _ => return,\n         };\n-        if fm.abi == Abi::Rust || fm.abi == Abi::RustIntrinsic || fm.abi == Abi::PlatformIntrinsic {\n+        if abi == Abi::Rust || abi == Abi::RustIntrinsic || abi == Abi::PlatformIntrinsic {\n             return;\n         }\n "}, {"sha": "fe29f9d177f92c1a4fb5d2b4c5b28086e86de8b4", "filename": "compiler/rustc_metadata/src/native_libs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/032f68d625e08b0a5485d3da7ad2487a519103be/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/032f68d625e08b0a5485d3da7ad2487a519103be/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs?ref=032f68d625e08b0a5485d3da7ad2487a519103be", "patch": "@@ -33,12 +33,12 @@ struct Collector<'tcx> {\n \n impl ItemLikeVisitor<'tcx> for Collector<'tcx> {\n     fn visit_item(&mut self, it: &'tcx hir::Item<'tcx>) {\n-        let fm = match it.kind {\n-            hir::ItemKind::ForeignMod(ref fm) => fm,\n+        let abi = match it.kind {\n+            hir::ItemKind::ForeignMod { abi, .. } => abi,\n             _ => return,\n         };\n \n-        if fm.abi == Abi::Rust || fm.abi == Abi::RustIntrinsic || fm.abi == Abi::PlatformIntrinsic {\n+        if abi == Abi::Rust || abi == Abi::RustIntrinsic || abi == Abi::PlatformIntrinsic {\n             return;\n         }\n "}, {"sha": "070481a3e55faa92ec3d89afd35c93489cc5ad89", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/032f68d625e08b0a5485d3da7ad2487a519103be/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/032f68d625e08b0a5485d3da7ad2487a519103be/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=032f68d625e08b0a5485d3da7ad2487a519103be", "patch": "@@ -1225,7 +1225,7 @@ impl EncodeContext<'a, 'tcx> {\n             hir::ItemKind::Mod(ref m) => {\n                 return self.encode_info_for_mod(item.hir_id, m, &item.attrs);\n             }\n-            hir::ItemKind::ForeignMod(_) => EntryKind::ForeignMod,\n+            hir::ItemKind::ForeignMod{..} => EntryKind::ForeignMod,\n             hir::ItemKind::GlobalAsm(..) => EntryKind::GlobalAsm,\n             hir::ItemKind::TyAlias(..) => EntryKind::Type,\n             hir::ItemKind::OpaqueTy(..) => {\n@@ -1320,8 +1320,8 @@ impl EncodeContext<'a, 'tcx> {\n         record!(self.tables.expn_that_defined[def_id] <- self.tcx.expansion_that_defined(def_id));\n         // FIXME(eddyb) there should be a nicer way to do this.\n         match item.kind {\n-            hir::ItemKind::ForeignMod(ref fm) => record!(self.tables.children[def_id] <-\n-                fm.items\n+            hir::ItemKind::ForeignMod { items, .. } => record!(self.tables.children[def_id] <-\n+                items\n                     .iter()\n                     .map(|foreign_item| tcx.hir().local_def_id(\n                         foreign_item.id.hir_id).local_def_index)\n@@ -1836,7 +1836,7 @@ impl EncodeContext<'a, 'tcx> {\n             | hir::ItemKind::Const(..)\n             | hir::ItemKind::Fn(..)\n             | hir::ItemKind::Mod(..)\n-            | hir::ItemKind::ForeignMod(..)\n+            | hir::ItemKind::ForeignMod { .. }\n             | hir::ItemKind::GlobalAsm(..)\n             | hir::ItemKind::ExternCrate(..)\n             | hir::ItemKind::Use(..)"}, {"sha": "5e36362ec59167640ca168663d33cfbfa28aaa1c", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/032f68d625e08b0a5485d3da7ad2487a519103be/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/032f68d625e08b0a5485d3da7ad2487a519103be/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=032f68d625e08b0a5485d3da7ad2487a519103be", "patch": "@@ -205,7 +205,7 @@ impl<'hir> Map<'hir> {\n                 ItemKind::TraitAlias(..) => DefKind::TraitAlias,\n                 ItemKind::ExternCrate(_) => DefKind::ExternCrate,\n                 ItemKind::Use(..) => DefKind::Use,\n-                ItemKind::ForeignMod(..) => DefKind::ForeignMod,\n+                ItemKind::ForeignMod { .. } => DefKind::ForeignMod,\n                 ItemKind::GlobalAsm(..) => DefKind::GlobalAsm,\n                 ItemKind::Impl { .. } => DefKind::Impl,\n             },\n@@ -729,10 +729,11 @@ impl<'hir> Map<'hir> {\n         let parent = self.get_parent_item(hir_id);\n         if let Some(entry) = self.find_entry(parent) {\n             if let Entry {\n-                node: Node::Item(Item { kind: ItemKind::ForeignMod(ref nm), .. }), ..\n+                node: Node::Item(Item { kind: ItemKind::ForeignMod { abi, .. }, .. }),\n+                ..\n             } = entry\n             {\n-                return nm.abi;\n+                return *abi;\n             }\n         }\n         bug!(\"expected foreign mod or inlined parent, found {}\", self.node_to_string(parent))\n@@ -1045,7 +1046,7 @@ fn hir_id_to_string(map: &Map<'_>, id: HirId) -> String {\n                 ItemKind::Const(..) => \"const\",\n                 ItemKind::Fn(..) => \"fn\",\n                 ItemKind::Mod(..) => \"mod\",\n-                ItemKind::ForeignMod(..) => \"foreign mod\",\n+                ItemKind::ForeignMod { .. } => \"foreign mod\",\n                 ItemKind::GlobalAsm(..) => \"global asm\",\n                 ItemKind::TyAlias(..) => \"ty\",\n                 ItemKind::OpaqueTy(..) => \"opaque type\","}, {"sha": "6370ead97e798972cb9ef9886f5f7b2fa5398a9e", "filename": "compiler/rustc_mir/src/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/032f68d625e08b0a5485d3da7ad2487a519103be/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/032f68d625e08b0a5485d3da7ad2487a519103be/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs?ref=032f68d625e08b0a5485d3da7ad2487a519103be", "patch": "@@ -993,7 +993,7 @@ impl ItemLikeVisitor<'v> for RootCollector<'_, 'v> {\n         match item.kind {\n             hir::ItemKind::ExternCrate(..)\n             | hir::ItemKind::Use(..)\n-            | hir::ItemKind::ForeignMod(..)\n+            | hir::ItemKind::ForeignMod { .. }\n             | hir::ItemKind::TyAlias(..)\n             | hir::ItemKind::Trait(..)\n             | hir::ItemKind::TraitAlias(..)"}, {"sha": "b87b13cff8053a35e55b367854cbf0d4900a55ce", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/032f68d625e08b0a5485d3da7ad2487a519103be/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/032f68d625e08b0a5485d3da7ad2487a519103be/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=032f68d625e08b0a5485d3da7ad2487a519103be", "patch": "@@ -190,7 +190,7 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n \n                     intravisit::walk_item(self, &item);\n                 }\n-                hir::ItemKind::ForeignMod(..) => {}\n+                hir::ItemKind::ForeignMod { .. } => {}\n                 _ => {\n                     intravisit::walk_item(self, &item);\n                 }"}, {"sha": "761048869ea2268f13743b57167cfbe3b96145ce", "filename": "compiler/rustc_passes/src/reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/032f68d625e08b0a5485d3da7ad2487a519103be/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/032f68d625e08b0a5485d3da7ad2487a519103be/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Freachable.rs?ref=032f68d625e08b0a5485d3da7ad2487a519103be", "patch": "@@ -262,7 +262,7 @@ impl<'tcx> ReachableContext<'tcx> {\n                     | hir::ItemKind::TyAlias(..)\n                     | hir::ItemKind::Static(..)\n                     | hir::ItemKind::Mod(..)\n-                    | hir::ItemKind::ForeignMod(..)\n+                    | hir::ItemKind::ForeignMod { .. }\n                     | hir::ItemKind::Impl { .. }\n                     | hir::ItemKind::Trait(..)\n                     | hir::ItemKind::TraitAlias(..)"}, {"sha": "8fed17b465f1c2d846e23837401fe50688f78265", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/032f68d625e08b0a5485d3da7ad2487a519103be/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/032f68d625e08b0a5485d3da7ad2487a519103be/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=032f68d625e08b0a5485d3da7ad2487a519103be", "patch": "@@ -326,7 +326,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n             // they don't have their own stability. They still can be annotated as unstable\n             // and propagate this unstability to children, but this annotation is completely\n             // optional. They inherit stability from their parents when unannotated.\n-            hir::ItemKind::Impl { of_trait: None, .. } | hir::ItemKind::ForeignMod(..) => {\n+            hir::ItemKind::Impl { of_trait: None, .. } | hir::ItemKind::ForeignMod { .. } => {\n                 self.in_trait_impl = false;\n                 kind = AnnotationKind::Container;\n             }\n@@ -499,7 +499,7 @@ impl<'tcx> Visitor<'tcx> for MissingStabilityAnnotations<'tcx> {\n         // optional. They inherit stability from their parents when unannotated.\n         if !matches!(\n             i.kind,\n-            hir::ItemKind::Impl { of_trait: None, .. } | hir::ItemKind::ForeignMod(..)\n+            hir::ItemKind::Impl { of_trait: None, .. } | hir::ItemKind::ForeignMod{..}\n         ) {\n             self.check_missing_stability(i.hir_id, i.span);\n         }"}, {"sha": "4414bf57c6b7db5077c1e3a62565e447108c3a4d", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/032f68d625e08b0a5485d3da7ad2487a519103be/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/032f68d625e08b0a5485d3da7ad2487a519103be/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=032f68d625e08b0a5485d3da7ad2487a519103be", "patch": "@@ -592,7 +592,7 @@ impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n                 Option::<AccessLevel>::of_impl(item.hir_id, self.tcx, &self.access_levels)\n             }\n             // Foreign modules inherit level from parents.\n-            hir::ItemKind::ForeignMod(..) => self.prev_level,\n+            hir::ItemKind::ForeignMod { .. } => self.prev_level,\n             // Other `pub` items inherit levels from parents.\n             hir::ItemKind::Const(..)\n             | hir::ItemKind::Enum(..)\n@@ -654,8 +654,8 @@ impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n                     }\n                 }\n             }\n-            hir::ItemKind::ForeignMod(ref foreign_mod) => {\n-                for foreign_item in foreign_mod.items {\n+            hir::ItemKind::ForeignMod { items, .. } => {\n+                for foreign_item in items {\n                     if foreign_item.vis.node.is_pub() {\n                         self.update(foreign_item.id.hir_id, item_level);\n                     }\n@@ -770,8 +770,8 @@ impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n                 }\n             }\n             // Visit everything, but foreign items have their own levels.\n-            hir::ItemKind::ForeignMod(ref foreign_mod) => {\n-                for foreign_item in foreign_mod.items {\n+            hir::ItemKind::ForeignMod { items, .. } => {\n+                for foreign_item in items {\n                     let foreign_item_level = self.get(foreign_item.id.hir_id);\n                     if foreign_item_level.is_some() {\n                         self.reach(foreign_item.id.hir_id, foreign_item_level)\n@@ -1430,7 +1430,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n \n             // An `extern {}` doesn't introduce a new privacy\n             // namespace (the contents have their own privacies).\n-            hir::ItemKind::ForeignMod(_) => {}\n+            hir::ItemKind::ForeignMod { .. } => {}\n \n             hir::ItemKind::Trait(.., ref bounds, _) => {\n                 if !self.trait_is_public(item.hir_id) {\n@@ -1948,8 +1948,8 @@ impl<'a, 'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'a, 'tcx>\n                 }\n             }\n             // Subitems of foreign modules have their own publicity.\n-            hir::ItemKind::ForeignMod(ref foreign_mod) => {\n-                for foreign_item in foreign_mod.items {\n+            hir::ItemKind::ForeignMod { items, .. } => {\n+                for foreign_item in items {\n                     let vis = tcx.visibility(tcx.hir().local_def_id(foreign_item.id.hir_id));\n                     self.check(foreign_item.id.hir_id, vis).generics().predicates().ty();\n                 }"}, {"sha": "91edbebc05f3b9b027ebd59c9b9372d302d59143", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/032f68d625e08b0a5485d3da7ad2487a519103be/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/032f68d625e08b0a5485d3da7ad2487a519103be/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=032f68d625e08b0a5485d3da7ad2487a519103be", "patch": "@@ -388,7 +388,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n             hir::ItemKind::ExternCrate(_)\n             | hir::ItemKind::Use(..)\n             | hir::ItemKind::Mod(..)\n-            | hir::ItemKind::ForeignMod(..)\n+            | hir::ItemKind::ForeignMod { .. }\n             | hir::ItemKind::GlobalAsm(..) => {\n                 // These sorts of items have no lifetime parameters at all.\n                 intravisit::walk_item(self, item);"}, {"sha": "ff445d727fa34b4bacb6b08498f1581d472c9461", "filename": "compiler/rustc_save_analysis/src/sig.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/032f68d625e08b0a5485d3da7ad2487a519103be/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/032f68d625e08b0a5485d3da7ad2487a519103be/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs?ref=032f68d625e08b0a5485d3da7ad2487a519103be", "patch": "@@ -550,7 +550,7 @@ impl<'hir> Sig for hir::Item<'hir> {\n \n                 // FIXME where clause\n             }\n-            hir::ItemKind::ForeignMod(_) => Err(\"extern mod\"),\n+            hir::ItemKind::ForeignMod { .. } => Err(\"extern mod\"),\n             hir::ItemKind::GlobalAsm(_) => Err(\"global asm\"),\n             hir::ItemKind::ExternCrate(_) => Err(\"extern crate\"),\n             hir::ItemKind::OpaqueTy(..) => Err(\"opaque type\"),"}, {"sha": "19957e7d303cffe75fecaad3ab95ce373797b4b2", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/032f68d625e08b0a5485d3da7ad2487a519103be/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/032f68d625e08b0a5485d3da7ad2487a519103be/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=032f68d625e08b0a5485d3da7ad2487a519103be", "patch": "@@ -746,21 +746,21 @@ pub fn check_item_type<'tcx>(tcx: TyCtxt<'tcx>, it: &'tcx hir::Item<'tcx>) {\n             let generics = tcx.generics_of(def_id);\n             check_type_params_are_used(tcx, &generics, pty_ty);\n         }\n-        hir::ItemKind::ForeignMod(ref m) => {\n-            check_abi(tcx, it.span, m.abi);\n+        hir::ItemKind::ForeignMod { abi, items } => {\n+            check_abi(tcx, it.span, abi);\n \n-            if m.abi == Abi::RustIntrinsic {\n-                for item in m.items {\n+            if abi == Abi::RustIntrinsic {\n+                for item in items {\n                     let item = tcx.hir().foreign_item(item.id);\n                     intrinsic::check_intrinsic_type(tcx, item);\n                 }\n-            } else if m.abi == Abi::PlatformIntrinsic {\n-                for item in m.items {\n+            } else if abi == Abi::PlatformIntrinsic {\n+                for item in items {\n                     let item = tcx.hir().foreign_item(item.id);\n                     intrinsic::check_platform_intrinsic_type(tcx, item);\n                 }\n             } else {\n-                for item in m.items {\n+                for item in items {\n                     let def_id = tcx.hir().local_def_id(item.id.hir_id);\n                     let generics = tcx.generics_of(def_id);\n                     let own_counts = generics.own_counts();\n@@ -796,7 +796,7 @@ pub fn check_item_type<'tcx>(tcx: TyCtxt<'tcx>, it: &'tcx hir::Item<'tcx>) {\n                     let item = tcx.hir().foreign_item(item.id);\n                     match item.kind {\n                         hir::ForeignItemKind::Fn(ref fn_decl, _, _) => {\n-                            require_c_abi_if_c_variadic(tcx, fn_decl, m.abi, item.span);\n+                            require_c_abi_if_c_variadic(tcx, fn_decl, abi, item.span);\n                         }\n                         hir::ForeignItemKind::Static(..) => {\n                             check_static_inhabited(tcx, def_id, item.span);"}, {"sha": "c09f8cce5b44de9d8eb3bae178c27fb6ed9848fc", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/032f68d625e08b0a5485d3da7ad2487a519103be/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/032f68d625e08b0a5485d3da7ad2487a519103be/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=032f68d625e08b0a5485d3da7ad2487a519103be", "patch": "@@ -156,8 +156,8 @@ pub fn check_item_well_formed(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n         hir::ItemKind::Const(ref ty, ..) => {\n             check_item_type(tcx, item.hir_id, ty.span, false);\n         }\n-        hir::ItemKind::ForeignMod(ref module) => {\n-            for it in module.items.iter() {\n+        hir::ItemKind::ForeignMod { items, .. } => {\n+            for it in items.iter() {\n                 let it = tcx.hir().foreign_item(it.id);\n                 match it.kind {\n                     hir::ForeignItemKind::Fn(ref decl, ..) => {"}, {"sha": "0ff10abb60a357a5aff432be3631478bc1bca6cf", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/032f68d625e08b0a5485d3da7ad2487a519103be/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/032f68d625e08b0a5485d3da7ad2487a519103be/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=032f68d625e08b0a5485d3da7ad2487a519103be", "patch": "@@ -646,8 +646,8 @@ fn convert_item(tcx: TyCtxt<'_>, item_id: hir::HirId) {\n         | hir::ItemKind::Use(..)\n         | hir::ItemKind::Mod(_)\n         | hir::ItemKind::GlobalAsm(_) => {}\n-        hir::ItemKind::ForeignMod(ref foreign_mod) => {\n-            for item in foreign_mod.items {\n+        hir::ItemKind::ForeignMod { items, .. } => {\n+            for item in items {\n                 let item = tcx.hir().foreign_item(item.id);\n                 let def_id = tcx.hir().local_def_id(item.hir_id);\n                 tcx.ensure().generics_of(def_id);"}, {"sha": "88ba5788b05d191536865b4c5be74e33d1c5cff5", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/032f68d625e08b0a5485d3da7ad2487a519103be/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/032f68d625e08b0a5485d3da7ad2487a519103be/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=032f68d625e08b0a5485d3da7ad2487a519103be", "patch": "@@ -259,7 +259,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                 ItemKind::Trait(..)\n                 | ItemKind::TraitAlias(..)\n                 | ItemKind::Mod(..)\n-                | ItemKind::ForeignMod(..)\n+                | ItemKind::ForeignMod { .. }\n                 | ItemKind::GlobalAsm(..)\n                 | ItemKind::ExternCrate(..)\n                 | ItemKind::Use(..) => {"}, {"sha": "02152edbbc21c95a98b341e106d85feb0123df4b", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/032f68d625e08b0a5485d3da7ad2487a519103be/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/032f68d625e08b0a5485d3da7ad2487a519103be/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=032f68d625e08b0a5485d3da7ad2487a519103be", "patch": "@@ -240,8 +240,8 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         }\n \n         match item.kind {\n-            hir::ItemKind::ForeignMod(ref fm) => {\n-                for item in fm.items {\n+            hir::ItemKind::ForeignMod { items, .. } => {\n+                for item in items {\n                     let item = self.cx.tcx.hir().foreign_item(item.id);\n                     self.visit_foreign_item(item, None, om);\n                 }"}, {"sha": "4678f6872f37ce64887bab2d16fbab1639946850", "filename": "src/tools/clippy/clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/032f68d625e08b0a5485d3da7ad2487a519103be/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/032f68d625e08b0a5485d3da7ad2487a519103be/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_doc.rs?ref=032f68d625e08b0a5485d3da7ad2487a519103be", "patch": "@@ -147,7 +147,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n             hir::ItemKind::Union(..) => \"a union\",\n             hir::ItemKind::OpaqueTy(..) => \"an existential type\",\n             hir::ItemKind::ExternCrate(..)\n-            | hir::ItemKind::ForeignMod(..)\n+            | hir::ItemKind::ForeignMod { .. }\n             | hir::ItemKind::GlobalAsm(..)\n             | hir::ItemKind::Impl { .. }\n             | hir::ItemKind::Use(..) => return,"}, {"sha": "913d9daff46fd49a680f17ac9f2f207531660bba", "filename": "src/tools/clippy/clippy_lints/src/missing_inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/032f68d625e08b0a5485d3da7ad2487a519103be/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/032f68d625e08b0a5485d3da7ad2487a519103be/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_inline.rs?ref=032f68d625e08b0a5485d3da7ad2487a519103be", "patch": "@@ -125,7 +125,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingInline {\n             | hir::ItemKind::Union(..)\n             | hir::ItemKind::OpaqueTy(..)\n             | hir::ItemKind::ExternCrate(..)\n-            | hir::ItemKind::ForeignMod(..)\n+            | hir::ItemKind::ForeignMod { .. }\n             | hir::ItemKind::Impl { .. }\n             | hir::ItemKind::Use(..) => {},\n         };"}, {"sha": "8f0ef9150d4503824677526c68155c243d617b97", "filename": "src/tools/clippy/clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/032f68d625e08b0a5485d3da7ad2487a519103be/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/032f68d625e08b0a5485d3da7ad2487a519103be/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=032f68d625e08b0a5485d3da7ad2487a519103be", "patch": "@@ -395,7 +395,7 @@ fn print_item(cx: &LateContext<'_>, item: &hir::Item<'_>) {\n             println!(\"function of type {:#?}\", item_ty);\n         },\n         hir::ItemKind::Mod(..) => println!(\"module\"),\n-        hir::ItemKind::ForeignMod(ref fm) => println!(\"foreign module with abi: {}\", fm.abi),\n+        hir::ItemKind::ForeignMod { abi, .. } => println!(\"foreign module with abi: {}\", abi),\n         hir::ItemKind::GlobalAsm(ref asm) => println!(\"global asm: {:?}\", asm),\n         hir::ItemKind::TyAlias(..) => {\n             println!(\"type alias for {:?}\", cx.tcx.type_of(did));"}]}