{"sha": "5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7", "node_id": "C_kwDOAAsO6NoAKDVjZGFiM2E4ZGIxZGMyMzI2NzM3YzFhMWQ0OGU4MzhhOGI4ZTU1ZDc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-24T16:22:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-24T16:22:40Z"}, "message": "Auto merge of #96363 - matthiaskrgr:rollup-mthdja5, r=matthiaskrgr\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #94893 (diagnostics: regression test for `<usize as Iterator>::rev`)\n - #95504 (Add `x {check,build,doc} {compiler,library}` aliases.)\n - #96237 (compiletest: combine `--*-python` args)\n - #96303 (Improve bootstrap tests)\n - #96352 (Improve span for `consider adding an explicit lifetime bound` suggestions under NLL)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "5e545e5f2f3d0dccf7e4bd3d53cbea131700b7f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e545e5f2f3d0dccf7e4bd3d53cbea131700b7f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7", "html_url": "https://github.com/rust-lang/rust/commit/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8e59edbfa47ff38e23e6dedab6bedd3b41895e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8e59edbfa47ff38e23e6dedab6bedd3b41895e0", "html_url": "https://github.com/rust-lang/rust/commit/d8e59edbfa47ff38e23e6dedab6bedd3b41895e0"}, {"sha": "aef9eb50cdeef69245eb2ffc402fec4011d28ac0", "url": "https://api.github.com/repos/rust-lang/rust/commits/aef9eb50cdeef69245eb2ffc402fec4011d28ac0", "html_url": "https://github.com/rust-lang/rust/commit/aef9eb50cdeef69245eb2ffc402fec4011d28ac0"}], "stats": {"total": 687, "additions": 400, "deletions": 287}, "files": [{"sha": "fd78b483b75f25c24af7bcd60c5130591cdde612", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7", "patch": "@@ -4,6 +4,7 @@ use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed\n use rustc_infer::infer::{\n     error_reporting::nice_region_error::NiceRegionError,\n     error_reporting::unexpected_hidden_region_diagnostic, NllRegionVariableOrigin,\n+    RelateParamBound,\n };\n use rustc_middle::hir::place::PlaceBase;\n use rustc_middle::mir::{ConstraintCategory, ReturnConstraint};\n@@ -166,11 +167,14 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     let type_test_span = type_test.locations.span(&self.body);\n \n                     if let Some(lower_bound_region) = lower_bound_region {\n+                        let generic_ty = type_test.generic_kind.to_ty(self.infcx.tcx);\n+                        let origin = RelateParamBound(type_test_span, generic_ty, None);\n                         self.buffer_error(self.infcx.construct_generic_bound_failure(\n                             type_test_span,\n-                            None,\n+                            Some(origin),\n                             type_test.generic_kind,\n                             lower_bound_region,\n+                            self.body.source.def_id().as_local(),\n                         ));\n                     } else {\n                         // FIXME. We should handle this case better. It"}, {"sha": "f9273cc50b70a2b6a44b6c1630afb6e618170035", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 25, "deletions": 28, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7", "patch": "@@ -61,7 +61,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{pluralize, struct_span_err, Diagnostic, ErrorGuaranteed};\n use rustc_errors::{Applicability, DiagnosticBuilder, DiagnosticStyledString, MultiSpan};\n use rustc_hir as hir;\n-use rustc_hir::def_id::DefId;\n+use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::{Item, ItemKind, Node};\n use rustc_middle::dep_graph::DepContext;\n@@ -2285,7 +2285,9 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         bound_kind: GenericKind<'tcx>,\n         sub: Region<'tcx>,\n     ) {\n-        self.construct_generic_bound_failure(span, origin, bound_kind, sub).emit();\n+        let owner =\n+            self.in_progress_typeck_results.map(|typeck_results| typeck_results.borrow().hir_owner);\n+        self.construct_generic_bound_failure(span, origin, bound_kind, sub, owner).emit();\n     }\n \n     pub fn construct_generic_bound_failure(\n@@ -2294,31 +2296,29 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         origin: Option<SubregionOrigin<'tcx>>,\n         bound_kind: GenericKind<'tcx>,\n         sub: Region<'tcx>,\n+        owner: Option<LocalDefId>,\n     ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n         let hir = self.tcx.hir();\n         // Attempt to obtain the span of the parameter so we can\n         // suggest adding an explicit lifetime bound to it.\n-        let generics = self\n-            .in_progress_typeck_results\n-            .map(|typeck_results| typeck_results.borrow().hir_owner)\n-            .map(|owner| {\n-                let hir_id = hir.local_def_id_to_hir_id(owner);\n-                let parent_id = hir.get_parent_item(hir_id);\n-                (\n-                    // Parent item could be a `mod`, so we check the HIR before calling:\n-                    if let Some(Node::Item(Item {\n-                        kind: ItemKind::Trait(..) | ItemKind::Impl { .. },\n-                        ..\n-                    })) = hir.find_by_def_id(parent_id)\n-                    {\n-                        Some(self.tcx.generics_of(parent_id))\n-                    } else {\n-                        None\n-                    },\n-                    self.tcx.generics_of(owner.to_def_id()),\n-                    hir.span(hir_id),\n-                )\n-            });\n+        let generics = owner.map(|owner| {\n+            let hir_id = hir.local_def_id_to_hir_id(owner);\n+            let parent_id = hir.get_parent_item(hir_id);\n+            (\n+                // Parent item could be a `mod`, so we check the HIR before calling:\n+                if let Some(Node::Item(Item {\n+                    kind: ItemKind::Trait(..) | ItemKind::Impl { .. },\n+                    ..\n+                })) = hir.find_by_def_id(parent_id)\n+                {\n+                    Some(self.tcx.generics_of(parent_id))\n+                } else {\n+                    None\n+                },\n+                self.tcx.generics_of(owner.to_def_id()),\n+                hir.span(hir_id),\n+            )\n+        });\n \n         let span = match generics {\n             // This is to get around the trait identity obligation, that has a `DUMMY_SP` as signal\n@@ -2606,11 +2606,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     None,\n                 );\n                 if let Some(infer::RelateParamBound(_, t, _)) = origin {\n-                    let return_impl_trait = self\n-                        .in_progress_typeck_results\n-                        .map(|typeck_results| typeck_results.borrow().hir_owner)\n-                        .and_then(|owner| self.tcx.return_type_impl_trait(owner))\n-                        .is_some();\n+                    let return_impl_trait =\n+                        owner.and_then(|owner| self.tcx.return_type_impl_trait(owner)).is_some();\n                     let t = self.resolve_vars_if_possible(t);\n                     match t.kind() {\n                         // We've got:"}, {"sha": "3b6cd7564f08ae57e77365128feefc9908217ba3", "filename": "src/bootstrap/builder/tests.rs", "status": "modified", "additions": 107, "deletions": 119, "changes": 226, "blob_url": "https://github.com/rust-lang/rust/blob/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder%2Ftests.rs?ref=5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7", "patch": "@@ -7,6 +7,7 @@ fn configure(cmd: &str, host: &[&str], target: &[&str]) -> Config {\n     // don't save toolstates\n     config.save_toolstates = None;\n     config.dry_run = true;\n+    config.submodules = Some(false);\n     config.ninja_in_file = false;\n     // try to avoid spurious failures in dist where we create/delete each others file\n     // HACK: rather than pull in `tempdir`, use the one that cargo has conveniently created for us\n@@ -25,68 +26,102 @@ fn first<A, B>(v: Vec<(A, B)>) -> Vec<A> {\n     v.into_iter().map(|(a, _)| a).collect::<Vec<_>>()\n }\n \n+fn run_build(paths: &[PathBuf], config: Config) -> Cache {\n+    let kind = config.cmd.kind();\n+    let build = Build::new(config);\n+    let builder = Builder::new(&build);\n+    builder.run_step_descriptions(&Builder::get_step_descriptions(kind), paths);\n+    builder.cache\n+}\n+\n+#[test]\n+fn test_exclude() {\n+    let mut config = configure(\"test\", &[\"A\"], &[\"A\"]);\n+    config.exclude = vec![TaskPath::parse(\"src/tools/tidy\")];\n+    let cache = run_build(&[], config);\n+\n+    // Ensure we have really excluded tidy\n+    assert!(!cache.contains::<test::Tidy>());\n+\n+    // Ensure other tests are not affected.\n+    assert!(cache.contains::<test::RustdocUi>());\n+}\n+\n+#[test]\n+fn test_exclude_kind() {\n+    let path = PathBuf::from(\"src/tools/cargotest\");\n+    let exclude = TaskPath::parse(\"test::src/tools/cargotest\");\n+    assert_eq!(exclude, TaskPath { kind: Some(Kind::Test), path: path.clone() });\n+\n+    let mut config = configure(\"test\", &[\"A\"], &[\"A\"]);\n+    // Ensure our test is valid, and `test::Cargotest` would be run without the exclude.\n+    assert!(run_build(&[path.clone()], config.clone()).contains::<test::Cargotest>());\n+    // Ensure tests for cargotest are skipped.\n+    config.exclude = vec![exclude.clone()];\n+    assert!(!run_build(&[path.clone()], config).contains::<test::Cargotest>());\n+\n+    // Ensure builds for cargotest are not skipped.\n+    let mut config = configure(\"build\", &[\"A\"], &[\"A\"]);\n+    config.exclude = vec![exclude];\n+    assert!(run_build(&[path], config).contains::<tool::CargoTest>());\n+}\n+\n mod defaults {\n-    use super::{configure, first};\n+    use super::{configure, first, run_build};\n     use crate::builder::*;\n     use crate::Config;\n     use pretty_assertions::assert_eq;\n \n     #[test]\n     fn build_default() {\n-        let build = Build::new(configure(\"build\", &[\"A\"], &[\"A\"]));\n-        let mut builder = Builder::new(&build);\n-        builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Build), &[]);\n+        let mut cache = run_build(&[], configure(\"build\", &[\"A\"], &[\"A\"]));\n \n         let a = TargetSelection::from_user(\"A\");\n         assert_eq!(\n-            first(builder.cache.all::<compile::Std>()),\n+            first(cache.all::<compile::Std>()),\n             &[\n                 compile::Std { compiler: Compiler { host: a, stage: 0 }, target: a },\n                 compile::Std { compiler: Compiler { host: a, stage: 1 }, target: a },\n             ]\n         );\n-        assert!(!builder.cache.all::<compile::Assemble>().is_empty());\n+        assert!(!cache.all::<compile::Assemble>().is_empty());\n         // Make sure rustdoc is only built once.\n         assert_eq!(\n-            first(builder.cache.all::<tool::Rustdoc>()),\n+            first(cache.all::<tool::Rustdoc>()),\n             // Recall that rustdoc stages are off-by-one\n             // - this is the compiler it's _linked_ to, not built with.\n             &[tool::Rustdoc { compiler: Compiler { host: a, stage: 1 } }],\n         );\n         assert_eq!(\n-            first(builder.cache.all::<compile::Rustc>()),\n+            first(cache.all::<compile::Rustc>()),\n             &[compile::Rustc { compiler: Compiler { host: a, stage: 0 }, target: a },]\n         );\n     }\n \n     #[test]\n     fn build_stage_0() {\n         let config = Config { stage: 0, ..configure(\"build\", &[\"A\"], &[\"A\"]) };\n-        let build = Build::new(config);\n-        let mut builder = Builder::new(&build);\n-        builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Build), &[]);\n+        let mut cache = run_build(&[], config);\n \n         let a = TargetSelection::from_user(\"A\");\n         assert_eq!(\n-            first(builder.cache.all::<compile::Std>()),\n+            first(cache.all::<compile::Std>()),\n             &[compile::Std { compiler: Compiler { host: a, stage: 0 }, target: a },]\n         );\n-        assert!(!builder.cache.all::<compile::Assemble>().is_empty());\n+        assert!(!cache.all::<compile::Assemble>().is_empty());\n         assert_eq!(\n-            first(builder.cache.all::<tool::Rustdoc>()),\n+            first(cache.all::<tool::Rustdoc>()),\n             // This is the beta rustdoc.\n             // Add an assert here to make sure this is the only rustdoc built.\n             &[tool::Rustdoc { compiler: Compiler { host: a, stage: 0 } }],\n         );\n-        assert!(builder.cache.all::<compile::Rustc>().is_empty());\n+        assert!(cache.all::<compile::Rustc>().is_empty());\n     }\n \n     #[test]\n     fn build_cross_compile() {\n         let config = Config { stage: 1, ..configure(\"build\", &[\"A\", \"B\"], &[\"A\", \"B\"]) };\n-        let build = Build::new(config);\n-        let mut builder = Builder::new(&build);\n-        builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Build), &[]);\n+        let mut cache = run_build(&[], config);\n \n         let a = TargetSelection::from_user(\"A\");\n         let b = TargetSelection::from_user(\"B\");\n@@ -97,7 +132,7 @@ mod defaults {\n         // (since we're producing stage 1 libraries/binaries).  But currently\n         // rustbuild is just a bit buggy here; this should be fixed though.\n         assert_eq!(\n-            first(builder.cache.all::<compile::Std>()),\n+            first(cache.all::<compile::Std>()),\n             &[\n                 compile::Std { compiler: Compiler { host: a, stage: 0 }, target: a },\n                 compile::Std { compiler: Compiler { host: a, stage: 1 }, target: a },\n@@ -106,22 +141,22 @@ mod defaults {\n             ]\n         );\n         assert_eq!(\n-            first(builder.cache.all::<compile::Assemble>()),\n+            first(cache.all::<compile::Assemble>()),\n             &[\n                 compile::Assemble { target_compiler: Compiler { host: a, stage: 0 } },\n                 compile::Assemble { target_compiler: Compiler { host: a, stage: 1 } },\n                 compile::Assemble { target_compiler: Compiler { host: b, stage: 1 } },\n             ]\n         );\n         assert_eq!(\n-            first(builder.cache.all::<tool::Rustdoc>()),\n+            first(cache.all::<tool::Rustdoc>()),\n             &[\n                 tool::Rustdoc { compiler: Compiler { host: a, stage: 1 } },\n                 tool::Rustdoc { compiler: Compiler { host: b, stage: 1 } },\n             ],\n         );\n         assert_eq!(\n-            first(builder.cache.all::<compile::Rustc>()),\n+            first(cache.all::<compile::Rustc>()),\n             &[\n                 compile::Rustc { compiler: Compiler { host: a, stage: 0 }, target: a },\n                 compile::Rustc { compiler: Compiler { host: a, stage: 0 }, target: b },\n@@ -134,33 +169,28 @@ mod defaults {\n         let mut config = configure(\"doc\", &[\"A\"], &[\"A\"]);\n         config.compiler_docs = true;\n         config.cmd = Subcommand::Doc { paths: Vec::new(), open: false };\n-        let build = Build::new(config);\n-        let mut builder = Builder::new(&build);\n-        builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Doc), &[]);\n+        let mut cache = run_build(&[], config);\n         let a = TargetSelection::from_user(\"A\");\n \n         // error_index_generator uses stage 0 to share rustdoc artifacts with the\n         // rustdoc tool.\n+        assert_eq!(first(cache.all::<doc::ErrorIndex>()), &[doc::ErrorIndex { target: a },]);\n         assert_eq!(\n-            first(builder.cache.all::<doc::ErrorIndex>()),\n-            &[doc::ErrorIndex { target: a },]\n-        );\n-        assert_eq!(\n-            first(builder.cache.all::<tool::ErrorIndex>()),\n+            first(cache.all::<tool::ErrorIndex>()),\n             &[tool::ErrorIndex { compiler: Compiler { host: a, stage: 0 } }]\n         );\n         // docs should be built with the beta compiler, not with the stage0 artifacts.\n         // recall that rustdoc is off-by-one: `stage` is the compiler rustdoc is _linked_ to,\n         // not the one it was built by.\n         assert_eq!(\n-            first(builder.cache.all::<tool::Rustdoc>()),\n+            first(cache.all::<tool::Rustdoc>()),\n             &[tool::Rustdoc { compiler: Compiler { host: a, stage: 0 } },]\n         );\n     }\n }\n \n mod dist {\n-    use super::{first, Config};\n+    use super::{first, run_build, Config};\n     use crate::builder::*;\n     use pretty_assertions::assert_eq;\n \n@@ -170,94 +200,88 @@ mod dist {\n \n     #[test]\n     fn dist_baseline() {\n-        let build = Build::new(configure(&[\"A\"], &[\"A\"]));\n-        let mut builder = Builder::new(&build);\n-        builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Dist), &[]);\n+        let mut cache = run_build(&[], configure(&[\"A\"], &[\"A\"]));\n \n         let a = TargetSelection::from_user(\"A\");\n \n-        assert_eq!(first(builder.cache.all::<dist::Docs>()), &[dist::Docs { host: a },]);\n-        assert_eq!(first(builder.cache.all::<dist::Mingw>()), &[dist::Mingw { host: a },]);\n+        assert_eq!(first(cache.all::<dist::Docs>()), &[dist::Docs { host: a },]);\n+        assert_eq!(first(cache.all::<dist::Mingw>()), &[dist::Mingw { host: a },]);\n         assert_eq!(\n-            first(builder.cache.all::<dist::Rustc>()),\n+            first(cache.all::<dist::Rustc>()),\n             &[dist::Rustc { compiler: Compiler { host: a, stage: 2 } },]\n         );\n         assert_eq!(\n-            first(builder.cache.all::<dist::Std>()),\n+            first(cache.all::<dist::Std>()),\n             &[dist::Std { compiler: Compiler { host: a, stage: 1 }, target: a },]\n         );\n-        assert_eq!(first(builder.cache.all::<dist::Src>()), &[dist::Src]);\n+        assert_eq!(first(cache.all::<dist::Src>()), &[dist::Src]);\n         // Make sure rustdoc is only built once.\n         assert_eq!(\n-            first(builder.cache.all::<tool::Rustdoc>()),\n+            first(cache.all::<tool::Rustdoc>()),\n             &[tool::Rustdoc { compiler: Compiler { host: a, stage: 2 } },]\n         );\n     }\n \n     #[test]\n     fn dist_with_targets() {\n-        let build = Build::new(configure(&[\"A\"], &[\"A\", \"B\"]));\n-        let mut builder = Builder::new(&build);\n-        builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Dist), &[]);\n+        let mut cache = run_build(&[], configure(&[\"A\"], &[\"A\", \"B\"]));\n \n         let a = TargetSelection::from_user(\"A\");\n         let b = TargetSelection::from_user(\"B\");\n \n         assert_eq!(\n-            first(builder.cache.all::<dist::Docs>()),\n+            first(cache.all::<dist::Docs>()),\n             &[dist::Docs { host: a }, dist::Docs { host: b },]\n         );\n         assert_eq!(\n-            first(builder.cache.all::<dist::Mingw>()),\n+            first(cache.all::<dist::Mingw>()),\n             &[dist::Mingw { host: a }, dist::Mingw { host: b },]\n         );\n         assert_eq!(\n-            first(builder.cache.all::<dist::Rustc>()),\n+            first(cache.all::<dist::Rustc>()),\n             &[dist::Rustc { compiler: Compiler { host: a, stage: 2 } },]\n         );\n         assert_eq!(\n-            first(builder.cache.all::<dist::Std>()),\n+            first(cache.all::<dist::Std>()),\n             &[\n                 dist::Std { compiler: Compiler { host: a, stage: 1 }, target: a },\n                 dist::Std { compiler: Compiler { host: a, stage: 2 }, target: b },\n             ]\n         );\n-        assert_eq!(first(builder.cache.all::<dist::Src>()), &[dist::Src]);\n+        assert_eq!(first(cache.all::<dist::Src>()), &[dist::Src]);\n     }\n \n     #[test]\n     fn dist_with_hosts() {\n-        let build = Build::new(configure(&[\"A\", \"B\"], &[\"A\", \"B\"]));\n-        let mut builder = Builder::new(&build);\n-        builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Dist), &[]);\n+        let mut cache = run_build(&[], configure(&[\"A\", \"B\"], &[\"A\", \"B\"]));\n \n         let a = TargetSelection::from_user(\"A\");\n         let b = TargetSelection::from_user(\"B\");\n \n         assert_eq!(\n-            first(builder.cache.all::<dist::Docs>()),\n+            first(cache.all::<dist::Docs>()),\n             &[dist::Docs { host: a }, dist::Docs { host: b },]\n         );\n         assert_eq!(\n-            first(builder.cache.all::<dist::Mingw>()),\n+            first(cache.all::<dist::Mingw>()),\n             &[dist::Mingw { host: a }, dist::Mingw { host: b },]\n         );\n         assert_eq!(\n-            first(builder.cache.all::<dist::Rustc>()),\n+            first(cache.all::<dist::Rustc>()),\n             &[\n                 dist::Rustc { compiler: Compiler { host: a, stage: 2 } },\n                 dist::Rustc { compiler: Compiler { host: b, stage: 2 } },\n             ]\n         );\n         assert_eq!(\n-            first(builder.cache.all::<dist::Std>()),\n+            first(cache.all::<dist::Std>()),\n             &[\n                 dist::Std { compiler: Compiler { host: a, stage: 1 }, target: a },\n                 dist::Std { compiler: Compiler { host: a, stage: 1 }, target: b },\n             ]\n         );\n         assert_eq!(\n-            first(builder.cache.all::<compile::Std>()),\n+            first(cache.all::<compile::Std>()),\n             &[\n                 compile::Std { compiler: Compiler { host: a, stage: 0 }, target: a },\n                 compile::Std { compiler: Compiler { host: a, stage: 1 }, target: a },\n@@ -266,26 +290,25 @@ mod dist {\n                 compile::Std { compiler: Compiler { host: a, stage: 2 }, target: b },\n             ],\n         );\n-        assert_eq!(first(builder.cache.all::<dist::Src>()), &[dist::Src]);\n+        assert_eq!(first(cache.all::<dist::Src>()), &[dist::Src]);\n     }\n \n     #[test]\n     fn dist_only_cross_host() {\n         let a = TargetSelection::from_user(\"A\");\n         let b = TargetSelection::from_user(\"B\");\n-        let mut build = Build::new(configure(&[\"A\", \"B\"], &[\"A\", \"B\"]));\n-        build.config.docs = false;\n-        build.config.extended = true;\n-        build.hosts = vec![b];\n-        let mut builder = Builder::new(&build);\n-        builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Dist), &[]);\n+        let mut config = configure(&[\"A\", \"B\"], &[\"A\", \"B\"]);\n+        config.docs = false;\n+        config.extended = true;\n+        config.hosts = vec![b];\n+        let mut cache = run_build(&[], config);\n \n         assert_eq!(\n-            first(builder.cache.all::<dist::Rustc>()),\n+            first(cache.all::<dist::Rustc>()),\n             &[dist::Rustc { compiler: Compiler { host: b, stage: 2 } },]\n         );\n         assert_eq!(\n-            first(builder.cache.all::<compile::Rustc>()),\n+            first(cache.all::<compile::Rustc>()),\n             &[\n                 compile::Rustc { compiler: Compiler { host: a, stage: 0 }, target: a },\n                 compile::Rustc { compiler: Compiler { host: a, stage: 1 }, target: b },\n@@ -295,92 +318,86 @@ mod dist {\n \n     #[test]\n     fn dist_with_targets_and_hosts() {\n-        let build = Build::new(configure(&[\"A\", \"B\"], &[\"A\", \"B\", \"C\"]));\n-        let mut builder = Builder::new(&build);\n-        builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Dist), &[]);\n+        let mut cache = run_build(&[], configure(&[\"A\", \"B\"], &[\"A\", \"B\", \"C\"]));\n \n         let a = TargetSelection::from_user(\"A\");\n         let b = TargetSelection::from_user(\"B\");\n         let c = TargetSelection::from_user(\"C\");\n \n         assert_eq!(\n-            first(builder.cache.all::<dist::Docs>()),\n+            first(cache.all::<dist::Docs>()),\n             &[dist::Docs { host: a }, dist::Docs { host: b }, dist::Docs { host: c },]\n         );\n         assert_eq!(\n-            first(builder.cache.all::<dist::Mingw>()),\n+            first(cache.all::<dist::Mingw>()),\n             &[dist::Mingw { host: a }, dist::Mingw { host: b }, dist::Mingw { host: c },]\n         );\n         assert_eq!(\n-            first(builder.cache.all::<dist::Rustc>()),\n+            first(cache.all::<dist::Rustc>()),\n             &[\n                 dist::Rustc { compiler: Compiler { host: a, stage: 2 } },\n                 dist::Rustc { compiler: Compiler { host: b, stage: 2 } },\n             ]\n         );\n         assert_eq!(\n-            first(builder.cache.all::<dist::Std>()),\n+            first(cache.all::<dist::Std>()),\n             &[\n                 dist::Std { compiler: Compiler { host: a, stage: 1 }, target: a },\n                 dist::Std { compiler: Compiler { host: a, stage: 1 }, target: b },\n                 dist::Std { compiler: Compiler { host: a, stage: 2 }, target: c },\n             ]\n         );\n-        assert_eq!(first(builder.cache.all::<dist::Src>()), &[dist::Src]);\n+        assert_eq!(first(cache.all::<dist::Src>()), &[dist::Src]);\n     }\n \n     #[test]\n     fn dist_with_empty_host() {\n         let config = configure(&[], &[\"C\"]);\n-        let build = Build::new(config);\n-        let mut builder = Builder::new(&build);\n-        builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Dist), &[]);\n+        let mut cache = run_build(&[], config);\n \n         let a = TargetSelection::from_user(\"A\");\n         let c = TargetSelection::from_user(\"C\");\n \n-        assert_eq!(first(builder.cache.all::<dist::Docs>()), &[dist::Docs { host: c },]);\n-        assert_eq!(first(builder.cache.all::<dist::Mingw>()), &[dist::Mingw { host: c },]);\n+        assert_eq!(first(cache.all::<dist::Docs>()), &[dist::Docs { host: c },]);\n+        assert_eq!(first(cache.all::<dist::Mingw>()), &[dist::Mingw { host: c },]);\n         assert_eq!(\n-            first(builder.cache.all::<dist::Std>()),\n+            first(cache.all::<dist::Std>()),\n             &[dist::Std { compiler: Compiler { host: a, stage: 2 }, target: c },]\n         );\n     }\n \n     #[test]\n     fn dist_with_same_targets_and_hosts() {\n-        let build = Build::new(configure(&[\"A\", \"B\"], &[\"A\", \"B\"]));\n-        let mut builder = Builder::new(&build);\n-        builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Dist), &[]);\n+        let mut cache = run_build(&[], configure(&[\"A\", \"B\"], &[\"A\", \"B\"]));\n \n         let a = TargetSelection::from_user(\"A\");\n         let b = TargetSelection::from_user(\"B\");\n \n         assert_eq!(\n-            first(builder.cache.all::<dist::Docs>()),\n+            first(cache.all::<dist::Docs>()),\n             &[dist::Docs { host: a }, dist::Docs { host: b },]\n         );\n         assert_eq!(\n-            first(builder.cache.all::<dist::Mingw>()),\n+            first(cache.all::<dist::Mingw>()),\n             &[dist::Mingw { host: a }, dist::Mingw { host: b },]\n         );\n         assert_eq!(\n-            first(builder.cache.all::<dist::Rustc>()),\n+            first(cache.all::<dist::Rustc>()),\n             &[\n                 dist::Rustc { compiler: Compiler { host: a, stage: 2 } },\n                 dist::Rustc { compiler: Compiler { host: b, stage: 2 } },\n             ]\n         );\n         assert_eq!(\n-            first(builder.cache.all::<dist::Std>()),\n+            first(cache.all::<dist::Std>()),\n             &[\n                 dist::Std { compiler: Compiler { host: a, stage: 1 }, target: a },\n                 dist::Std { compiler: Compiler { host: a, stage: 1 }, target: b },\n             ]\n         );\n-        assert_eq!(first(builder.cache.all::<dist::Src>()), &[dist::Src]);\n+        assert_eq!(first(cache.all::<dist::Src>()), &[dist::Src]);\n         assert_eq!(\n-            first(builder.cache.all::<compile::Std>()),\n+            first(cache.all::<compile::Std>()),\n             &[\n                 compile::Std { compiler: Compiler { host: a, stage: 0 }, target: a },\n                 compile::Std { compiler: Compiler { host: a, stage: 1 }, target: a },\n@@ -390,7 +407,7 @@ mod dist {\n             ]\n         );\n         assert_eq!(\n-            first(builder.cache.all::<compile::Assemble>()),\n+            first(cache.all::<compile::Assemble>()),\n             &[\n                 compile::Assemble { target_compiler: Compiler { host: a, stage: 0 } },\n                 compile::Assemble { target_compiler: Compiler { host: a, stage: 1 } },\n@@ -514,35 +531,6 @@ mod dist {\n         );\n     }\n \n-    #[test]\n-    fn test_exclude() {\n-        let mut config = configure(&[\"A\"], &[\"A\"]);\n-        config.exclude = vec![TaskPath::parse(\"src/tools/tidy\")];\n-        config.cmd = Subcommand::Test {\n-            paths: Vec::new(),\n-            test_args: Vec::new(),\n-            rustc_args: Vec::new(),\n-            fail_fast: true,\n-            doc_tests: DocTests::No,\n-            bless: false,\n-            force_rerun: false,\n-            compare_mode: None,\n-            rustfix_coverage: false,\n-            pass: None,\n-            run: None,\n-        };\n-\n-        let build = Build::new(config);\n-        let builder = Builder::new(&build);\n-        builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Test), &[]);\n-\n-        // Ensure we have really excluded tidy\n-        assert!(!builder.cache.contains::<test::Tidy>());\n-\n-        // Ensure other tests are not affected.\n-        assert!(builder.cache.contains::<test::RustdocUi>());\n-    }\n-\n     #[test]\n     fn doc_ci() {\n         let mut config = configure(&[\"A\"], &[\"A\"]);"}, {"sha": "731ebc41bb9a00b075022cbf9eba827bdf189f71", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7", "patch": "@@ -64,7 +64,7 @@ impl Step for Std {\n     const DEFAULT: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.all_krates(\"test\")\n+        run.all_krates(\"test\").path(\"library\")\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n@@ -162,7 +162,7 @@ impl Step for Rustc {\n     const DEFAULT: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.all_krates(\"rustc-main\")\n+        run.all_krates(\"rustc-main\").path(\"compiler\")\n     }\n \n     fn make_run(run: RunConfig<'_>) {"}, {"sha": "a212c659b5c2b3a9931ab3b0690299d00388bc6a", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7", "patch": "@@ -43,7 +43,7 @@ impl Step for Std {\n         // When downloading stage1, the standard library has already been copied to the sysroot, so\n         // there's no need to rebuild it.\n         let download_rustc = run.builder.config.download_rustc;\n-        run.all_krates(\"test\").default_condition(!download_rustc)\n+        run.all_krates(\"test\").path(\"library\").default_condition(!download_rustc)\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n@@ -1047,7 +1047,7 @@ impl Step for Assemble {\n     const ONLY_HOSTS: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.path(\"compiler/rustc\")\n+        run.path(\"compiler/rustc\").path(\"compiler\")\n     }\n \n     fn make_run(run: RunConfig<'_>) {"}, {"sha": "1638d3ed3c2814fe19351268c733e540ea284002", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7", "patch": "@@ -41,6 +41,7 @@ macro_rules! check_ci_llvm {\n /// each field, see the corresponding fields in\n /// `config.toml.example`.\n #[derive(Default)]\n+#[cfg_attr(test, derive(Clone))]\n pub struct Config {\n     pub changelog_seen: Option<usize>,\n     pub ccache: Option<String>,\n@@ -330,6 +331,7 @@ impl PartialEq<&str> for TargetSelection {\n \n /// Per-target configuration stored in the global configuration structure.\n #[derive(Default)]\n+#[cfg_attr(test, derive(Clone))]\n pub struct Target {\n     /// Some(path to llvm-config) if using an external LLVM.\n     pub llvm_config: Option<PathBuf>,"}, {"sha": "fcef784d2d1fa3547379fac1cd135784f4ecc060", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7", "patch": "@@ -416,7 +416,7 @@ impl Step for Std {\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n         let builder = run.builder;\n-        run.all_krates(\"test\").default_condition(builder.config.docs)\n+        run.all_krates(\"test\").path(\"library\").default_condition(builder.config.docs)\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n@@ -477,11 +477,14 @@ impl Step for Std {\n             .iter()\n             .map(components_simplified)\n             .filter_map(|path| {\n-                if path.get(0) == Some(&\"library\") {\n+                if path.len() >= 2 && path.get(0) == Some(&\"library\") {\n+                    // single crate\n                     Some(path[1].to_owned())\n                 } else if !path.is_empty() {\n+                    // ??\n                     Some(path[0].to_owned())\n                 } else {\n+                    // all library crates\n                     None\n                 }\n             })"}, {"sha": "58571ea129c1940b68766ae64f5b78c9a78a19a7", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7", "patch": "@@ -14,6 +14,7 @@ use crate::setup::Profile;\n use crate::util::t;\n use crate::{Build, DocTests};\n \n+#[derive(Copy, Clone)]\n pub enum Color {\n     Always,\n     Never,\n@@ -79,6 +80,7 @@ pub struct Flags {\n     pub llvm_profile_generate: bool,\n }\n \n+#[cfg_attr(test, derive(Clone))]\n pub enum Subcommand {\n     Build {\n         paths: Vec<PathBuf>,\n@@ -668,6 +670,24 @@ Arguments:\n }\n \n impl Subcommand {\n+    pub fn kind(&self) -> Kind {\n+        match self {\n+            Subcommand::Bench { .. } => Kind::Bench,\n+            Subcommand::Build { .. } => Kind::Build,\n+            Subcommand::Check { .. } => Kind::Check,\n+            Subcommand::Clippy { .. } => Kind::Clippy,\n+            Subcommand::Doc { .. } => Kind::Doc,\n+            Subcommand::Fix { .. } => Kind::Fix,\n+            Subcommand::Format { .. } => Kind::Format,\n+            Subcommand::Test { .. } => Kind::Test,\n+            Subcommand::Clean { .. } => Kind::Clean,\n+            Subcommand::Dist { .. } => Kind::Dist,\n+            Subcommand::Install { .. } => Kind::Install,\n+            Subcommand::Run { .. } => Kind::Run,\n+            Subcommand::Setup { .. } => Kind::Setup,\n+        }\n+    }\n+\n     pub fn test_args(&self) -> Vec<&str> {\n         match *self {\n             Subcommand::Test { ref test_args, .. } | Subcommand::Bench { ref test_args, .. } => {"}, {"sha": "9c376602d283f35af052c956683ca63e5580a691", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7", "patch": "@@ -1400,9 +1400,7 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n         targetflags.extend(builder.lld_flags(target));\n         cmd.arg(\"--target-rustcflags\").arg(targetflags.join(\" \"));\n \n-        cmd.arg(\"--docck-python\").arg(builder.python());\n-\n-        cmd.arg(\"--lldb-python\").arg(builder.python());\n+        cmd.arg(\"--python\").arg(builder.python());\n \n         if let Some(ref gdb) = builder.config.gdb {\n             cmd.arg(\"--gdb\").arg(gdb);"}, {"sha": "0059f729bae2fcb947bf9a84733533a4eeca270d", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.nll.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr?ref=5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7", "patch": "@@ -82,10 +82,11 @@ LL | fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32\n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/must_outlive_least_region_or_bound.rs:41:5\n    |\n+LL | fn ty_param_wont_outlive_static<T:Debug>(x: T) -> impl Debug + 'static {\n+   |                                 -- help: consider adding an explicit lifetime bound...: `T: 'static +`\n+...\n LL |     x\n-   |     ^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'static`...\n+   |     ^ ...so that the type `T` will meet its required lifetime bounds\n \n error: aborting due to 9 previous errors\n "}, {"sha": "5328b077993c5ae2056c4c447e222467b492a56d", "filename": "src/test/ui/impl-trait/type_parameters_captured.nll.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.nll.stderr?ref=5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7", "patch": "@@ -1,10 +1,11 @@\n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/type_parameters_captured.rs:10:5\n    |\n+LL | fn foo<T>(x: T) -> impl Any + 'static {\n+   |        - help: consider adding an explicit lifetime bound...: `T: 'static`\n+...\n LL |     x\n-   |     ^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'static`...\n+   |     ^ ...so that the type `T` will meet its required lifetime bounds\n \n error: aborting due to previous error\n "}, {"sha": "422673b361a95b2ebcdd73de1a64b8f20b83033f", "filename": "src/test/ui/lifetimes/lifetime-errors/issue_74400.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fissue_74400.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fissue_74400.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fissue_74400.nll.stderr?ref=5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7", "patch": "@@ -1,10 +1,10 @@\n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/issue_74400.rs:12:5\n    |\n+LL | fn g<T>(data: &[T]) {\n+   |      - help: consider adding an explicit lifetime bound...: `T: 'static`\n LL |     f(data, identity)\n-   |     ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'static`...\n+   |     ^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error[E0308]: mismatched types\n   --> $DIR/issue_74400.rs:12:5"}, {"sha": "01bf9f48402466cd15cc2380de99709e76bdecf5", "filename": "src/test/ui/methods/issues/issue-90315.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-90315.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-90315.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-90315.rs?ref=5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7", "patch": "@@ -0,0 +1,7 @@\n+fn main() {\n+  let arr = &[0,1,2,3];\n+  for _i in 0..arr.len().rev() { //~ERROR not an iterator\n+     // The above error used to say \u201cthe method `rev` exists for type `usize`\u201d.\n+     // This regression test ensures it doesn't say that any more.\n+  }\n+}"}, {"sha": "c6a76c9e79018c12a20ad07fb7601d89f38838bb", "filename": "src/test/ui/methods/issues/issue-90315.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-90315.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-90315.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-90315.stderr?ref=5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7", "patch": "@@ -0,0 +1,13 @@\n+error[E0599]: `usize` is not an iterator\n+  --> $DIR/issue-90315.rs:3:26\n+   |\n+LL |   for _i in 0..arr.len().rev() {\n+   |                          ^^^ `usize` is not an iterator\n+   |\n+   = note: the following trait bounds were not satisfied:\n+           `usize: Iterator`\n+           which is required by `&mut usize: Iterator`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "b6856089a84f9f18abde1af4766d301da898b536", "filename": "src/test/ui/nll/closure-requirements/propagate-from-trait-match.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr?ref=5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7", "patch": "@@ -36,6 +36,9 @@ LL | | }\n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/propagate-from-trait-match.rs:32:36\n    |\n+LL |   fn supply<'a, T>(value: T)\n+   |                 - help: consider adding an explicit lifetime bound...: `T: 'a`\n+...\n LL |       establish_relationships(value, |value| {\n    |  ____________________________________^\n LL | |\n@@ -44,9 +47,7 @@ LL | |         // This function call requires that\n ...  |\n LL | |         require(value);\n LL | |     });\n-   | |_____^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'a`...\n+   | |_____^ ...so that the type `T` will meet its required lifetime bounds\n \n error: aborting due to previous error\n "}, {"sha": "3d4cfc1610a6690757a8768e2e3249b11974756d", "filename": "src/test/ui/nll/ty-outlives/impl-trait-outlives.stderr", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-outlives.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-outlives.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-outlives.stderr?ref=5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7", "patch": "@@ -1,18 +1,20 @@\n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/impl-trait-outlives.rs:11:5\n    |\n+LL | fn no_region<'a, T>(x: Box<T>) -> impl Debug + 'a\n+   |                  - help: consider adding an explicit lifetime bound...: `T: 'a`\n+...\n LL |     x\n-   |     ^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'a`...\n+   |     ^ ...so that the type `T` will meet its required lifetime bounds\n \n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/impl-trait-outlives.rs:26:5\n    |\n+LL | fn wrong_region<'a, 'b, T>(x: Box<T>) -> impl Debug + 'a\n+   |                         - help: consider adding an explicit lifetime bound...: `T: 'a`\n+...\n LL |     x\n-   |     ^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'a`...\n+   |     ^ ...so that the type `T` will meet its required lifetime bounds\n \n error: aborting due to 2 previous errors\n "}, {"sha": "cc5aa1eb11ec039c74e920ef179154efb7f0ca3c", "filename": "src/test/ui/nll/ty-outlives/projection-implied-bounds.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-implied-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-implied-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-implied-bounds.stderr?ref=5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7", "patch": "@@ -1,10 +1,10 @@\n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/projection-implied-bounds.rs:30:18\n    |\n+LL | fn generic2<T: Iterator>(value: T) {\n+   |             -- help: consider adding an explicit lifetime bound...: `T: 'static +`\n LL |     twice(value, |value_ref, item| invoke2(value_ref, item));\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'static`...\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error: aborting due to previous error\n "}, {"sha": "8fe25181da1a035c8a7572ee0cebd352861123f7", "filename": "src/test/ui/nll/ty-outlives/projection-no-regions-closure.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr?ref=5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7", "patch": "@@ -33,6 +33,7 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `<T as Iterator>::Item: 'a`...\n+   = note: ...so that the type `<T as Iterator>::Item` will meet its required lifetime bounds\n \n note: external requirements\n   --> $DIR/projection-no-regions-closure.rs:34:23\n@@ -96,6 +97,7 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `<T as Iterator>::Item: 'a`...\n+   = note: ...so that the type `<T as Iterator>::Item` will meet its required lifetime bounds\n \n note: external requirements\n   --> $DIR/projection-no-regions-closure.rs:52:23"}, {"sha": "e0ff544fe471333a384714d69ea6b372a1c765c3", "filename": "src/test/ui/nll/ty-outlives/projection-no-regions-fn.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-fn.stderr?ref=5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7", "patch": "@@ -5,6 +5,7 @@ LL |     Box::new(x.next())\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `<T as Iterator>::Item: 'a`...\n+   = note: ...so that the type `<T as Iterator>::Item` will meet its required lifetime bounds\n \n error[E0309]: the associated type `<T as Iterator>::Item` may not live long enough\n   --> $DIR/projection-no-regions-fn.rs:28:5\n@@ -13,6 +14,7 @@ LL |     Box::new(x.next())\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `<T as Iterator>::Item: 'a`...\n+   = note: ...so that the type `<T as Iterator>::Item` will meet its required lifetime bounds\n \n error: aborting due to 2 previous errors\n "}, {"sha": "62db6dd845a28165709c3960c5f6540ae74cdbe5", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-closure.stderr", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr?ref=5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7", "patch": "@@ -31,10 +31,11 @@ LL | | }\n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/projection-one-region-closure.rs:45:29\n    |\n+LL | fn no_relationships_late<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n+   |                                  - help: consider adding an explicit lifetime bound...: `T: 'a`\n+...\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'a`...\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error: lifetime may not live long enough\n   --> $DIR/projection-one-region-closure.rs:45:39\n@@ -81,10 +82,11 @@ LL | | }\n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/projection-one-region-closure.rs:56:29\n    |\n+LL | fn no_relationships_early<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n+   |                                   - help: consider adding an explicit lifetime bound...: `T: 'a`\n+...\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'a`...\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error: lifetime may not live long enough\n   --> $DIR/projection-one-region-closure.rs:56:39"}, {"sha": "1ee788b40ab9ea296f965e32b8d523dc5801c150", "filename": "src/test/ui/nll/ty-outlives/projection-two-region-trait-bound-closure.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr?ref=5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7", "patch": "@@ -34,6 +34,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `<T as Anything<ReEarlyBound(0, 'b), ReEarlyBound(1, 'c)>>::AssocType: 'a`...\n+   = note: ...so that the type `<T as Anything<ReEarlyBound(0, 'b), ReEarlyBound(1, 'c)>>::AssocType` will meet its required lifetime bounds\n \n note: external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:48:29\n@@ -70,6 +71,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `<T as Anything<ReEarlyBound(1, 'b), ReEarlyBound(2, 'c)>>::AssocType: 'a`...\n+   = note: ...so that the type `<T as Anything<ReEarlyBound(1, 'b), ReEarlyBound(2, 'c)>>::AssocType` will meet its required lifetime bounds\n \n note: external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:61:29"}, {"sha": "b4435fe06bccca5de87f1d50a99492fd9468cb19", "filename": "src/test/ui/nll/ty-outlives/projection-where-clause-env-wrong-bound.nll.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-bound.nll.stderr?ref=5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7", "patch": "@@ -5,6 +5,7 @@ LL |     bar::<T::Output>()\n    |     ^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `<T as MyTrait<'_>>::Output: 'a`...\n+   = note: ...so that the type `<T as MyTrait<'_>>::Output` will meet its required lifetime bounds\n \n error: aborting due to previous error\n "}, {"sha": "ddeaf3c1f9e8ca7947add0d32df76dcd5c13bcb2", "filename": "src/test/ui/nll/ty-outlives/projection-where-clause-env-wrong-lifetime.nll.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-lifetime.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-lifetime.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-lifetime.nll.stderr?ref=5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7", "patch": "@@ -5,6 +5,7 @@ LL |     bar::<<T as MyTrait<'a>>::Output>()\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `<T as MyTrait<'_>>::Output: 'a`...\n+   = note: ...so that the type `<T as MyTrait<'_>>::Output` will meet its required lifetime bounds\n \n error: aborting due to previous error\n "}, {"sha": "c51edb7868d7a8ef880c72ab02a77532cdae021f", "filename": "src/test/ui/nll/ty-outlives/projection-where-clause-none.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-none.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-none.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-none.stderr?ref=5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7", "patch": "@@ -1,10 +1,11 @@\n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/projection-where-clause-none.rs:16:5\n    |\n+LL | fn foo<'a, T>() -> &'a ()\n+   |            - help: consider adding an explicit lifetime bound...: `T: 'a`\n+...\n LL |     bar::<T::Output>()\n-   |     ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'a`...\n+   |     ^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error: aborting due to previous error\n "}, {"sha": "3e5e4868341edf613f176f1cf973fde0c61d3527", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-approximate-lower-bound.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr?ref=5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7", "patch": "@@ -52,10 +52,10 @@ LL | | }\n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/ty-param-closure-approximate-lower-bound.rs:29:24\n    |\n+LL | fn generic_fail<'a, T>(cell: Cell<&'a ()>, value: T) {\n+   |                     - help: consider adding an explicit lifetime bound...: `T: 'a`\n LL |     twice(cell, value, |a, b| invoke(a, b));\n-   |                        ^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'a`...\n+   |                        ^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error: aborting due to previous error\n "}, {"sha": "dc2f23b4fc8a33b8bcd4f4357b00fd5110334995", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-return-type.stderr", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr?ref=5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7", "patch": "@@ -29,18 +29,20 @@ LL | | }\n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/ty-param-closure-outlives-from-return-type.rs:26:23\n    |\n+LL | fn no_region<'a, T>(x: Box<T>) -> Box<dyn Debug + 'a>\n+   |                  - help: consider adding an explicit lifetime bound...: `T: 'a`\n+...\n LL |     with_signature(x, |y| y)\n-   |                       ^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'a`...\n+   |                       ^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/ty-param-closure-outlives-from-return-type.rs:41:5\n    |\n+LL | fn wrong_region<'a, 'b, T>(x: Box<T>) -> Box<Debug + 'a>\n+   |                         - help: consider adding an explicit lifetime bound...: `T: 'a`\n+...\n LL |     x\n-   |     ^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'a`...\n+   |     ^ ...so that the type `T` will meet its required lifetime bounds\n \n error: aborting due to 2 previous errors\n "}, {"sha": "e9f728c77b34b9d0420906052b5b6650c56bf6ed", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-where-clause.stderr", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr?ref=5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7", "patch": "@@ -37,6 +37,8 @@ LL | | }\n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:27:26\n    |\n+LL |   fn no_region<'a, T>(a: Cell<&'a ()>, b: T) {\n+   |                    - help: consider adding an explicit lifetime bound...: `T: 'a`\n LL |       with_signature(a, b, |x, y| {\n    |  __________________________^\n LL | |\n@@ -45,9 +47,7 @@ LL | |         // See `correct_region`, which explains the point of this\n ...  |\n LL | |         require(&x, &y)\n LL | |     })\n-   | |_____^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'a`...\n+   | |_____^ ...so that the type `T` will meet its required lifetime bounds\n \n note: external requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:43:26\n@@ -121,15 +121,16 @@ LL | | }\n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:64:26\n    |\n+LL |   fn wrong_region<'a, 'b, T>(a: Cell<&'a ()>, b: T)\n+   |                           - help: consider adding an explicit lifetime bound...: `T: 'a`\n+...\n LL |       with_signature(a, b, |x, y| {\n    |  __________________________^\n LL | |\n LL | |         // See `correct_region`\n LL | |         require(&x, &y)\n LL | |     })\n-   | |_____^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'a`...\n+   | |_____^ ...so that the type `T` will meet its required lifetime bounds\n \n note: external requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:77:26"}, {"sha": "a2e6a5d57cd6278891798e1640c6fd3f43268774", "filename": "src/test/ui/nll/ty-outlives/ty-param-fn-body.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn-body.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn-body.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn-body.stderr?ref=5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7", "patch": "@@ -1,10 +1,10 @@\n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/ty-param-fn-body.rs:19:5\n    |\n+LL | fn region_static<'a, T>(cell: Cell<&'a usize>, t: T) {\n+   |                      - help: consider adding an explicit lifetime bound...: `T: 'a`\n LL |     outlives(cell, t)\n-   |     ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'a`...\n+   |     ^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error: aborting due to previous error\n "}, {"sha": "fce360dd54bfb28d84ca2f2efc7bd9525c1eea90", "filename": "src/test/ui/nll/ty-outlives/ty-param-fn.stderr", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn.stderr?ref=5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7", "patch": "@@ -1,18 +1,20 @@\n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/ty-param-fn.rs:11:5\n    |\n+LL | fn no_region<'a, T>(x: Box<T>) -> Box<Debug + 'a>\n+   |                  - help: consider adding an explicit lifetime bound...: `T: 'a`\n+...\n LL |     x\n-   |     ^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'a`...\n+   |     ^ ...so that the type `T` will meet its required lifetime bounds\n \n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/ty-param-fn.rs:26:5\n    |\n+LL | fn wrong_region<'a, 'b, T>(x: Box<T>) -> Box<Debug + 'a>\n+   |                         - help: consider adding an explicit lifetime bound...: `T: 'a`\n+...\n LL |     x\n-   |     ^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'a`...\n+   |     ^ ...so that the type `T` will meet its required lifetime bounds\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f7dcaa9d97e7c83abfeacdd45494e64c036bda98", "filename": "src/test/ui/regions/regions-close-associated-type-into-object.nll.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftest%2Fui%2Fregions%2Fregions-close-associated-type-into-object.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftest%2Fui%2Fregions%2Fregions-close-associated-type-into-object.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-associated-type-into-object.nll.stderr?ref=5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7", "patch": "@@ -5,6 +5,7 @@ LL |     Box::new(item)\n    |     ^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `<T as Iter>::Item: 'static`...\n+   = note: ...so that the type `<T as Iter>::Item` will meet its required lifetime bounds\n \n error[E0310]: the associated type `<T as Iter>::Item` may not live long enough\n   --> $DIR/regions-close-associated-type-into-object.rs:22:5\n@@ -13,6 +14,7 @@ LL |     Box::new(item)\n    |     ^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `<T as Iter>::Item: 'static`...\n+   = note: ...so that the type `<T as Iter>::Item` will meet its required lifetime bounds\n \n error[E0309]: the associated type `<T as Iter>::Item` may not live long enough\n   --> $DIR/regions-close-associated-type-into-object.rs:28:5\n@@ -21,6 +23,7 @@ LL |     Box::new(item)\n    |     ^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `<T as Iter>::Item: 'a`...\n+   = note: ...so that the type `<T as Iter>::Item` will meet its required lifetime bounds\n \n error[E0309]: the associated type `<T as Iter>::Item` may not live long enough\n   --> $DIR/regions-close-associated-type-into-object.rs:35:5\n@@ -29,6 +32,7 @@ LL |     Box::new(item)\n    |     ^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `<T as Iter>::Item: 'a`...\n+   = note: ...so that the type `<T as Iter>::Item` will meet its required lifetime bounds\n \n error: aborting due to 4 previous errors\n "}, {"sha": "6a2429e51ecdad24b7f61046a63ca6f5cc9578b5", "filename": "src/test/ui/regions/regions-close-object-into-object-4.nll.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.nll.stderr?ref=5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7", "patch": "@@ -1,26 +1,26 @@\n error[E0310]: the parameter type `U` may not live long enough\n   --> $DIR/regions-close-object-into-object-4.rs:9:5\n    |\n+LL | fn i<'a, T, U>(v: Box<dyn A<U>+'a>) -> Box<dyn X + 'static> {\n+   |             - help: consider adding an explicit lifetime bound...: `U: 'static`\n LL |     Box::new(B(&*v)) as Box<dyn X>\n-   |     ^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `U: 'static`...\n+   |     ^^^^^^^^ ...so that the type `U` will meet its required lifetime bounds\n \n error[E0310]: the parameter type `U` may not live long enough\n   --> $DIR/regions-close-object-into-object-4.rs:9:5\n    |\n+LL | fn i<'a, T, U>(v: Box<dyn A<U>+'a>) -> Box<dyn X + 'static> {\n+   |             - help: consider adding an explicit lifetime bound...: `U: 'static`\n LL |     Box::new(B(&*v)) as Box<dyn X>\n-   |     ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `U: 'static`...\n+   |     ^^^^^^^^^^^^^^^^ ...so that the type `U` will meet its required lifetime bounds\n \n error[E0310]: the parameter type `U` may not live long enough\n   --> $DIR/regions-close-object-into-object-4.rs:9:5\n    |\n+LL | fn i<'a, T, U>(v: Box<dyn A<U>+'a>) -> Box<dyn X + 'static> {\n+   |             - help: consider adding an explicit lifetime bound...: `U: 'static`\n LL |     Box::new(B(&*v)) as Box<dyn X>\n-   |     ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `U: 'static`...\n+   |     ^^^^^^^^^^^^^^^^ ...so that the type `U` will meet its required lifetime bounds\n \n error: lifetime may not live long enough\n   --> $DIR/regions-close-object-into-object-4.rs:9:5\n@@ -42,10 +42,10 @@ LL |     Box::new(B(&*v)) as Box<dyn X>\n error[E0310]: the parameter type `U` may not live long enough\n   --> $DIR/regions-close-object-into-object-4.rs:9:14\n    |\n+LL | fn i<'a, T, U>(v: Box<dyn A<U>+'a>) -> Box<dyn X + 'static> {\n+   |             - help: consider adding an explicit lifetime bound...: `U: 'static`\n LL |     Box::new(B(&*v)) as Box<dyn X>\n-   |              ^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `U: 'static`...\n+   |              ^^^^^^ ...so that the type `U` will meet its required lifetime bounds\n \n error: aborting due to 6 previous errors\n "}, {"sha": "54302cc6dca2243a9234c667ab70db41d8144b29", "filename": "src/test/ui/regions/regions-close-object-into-object-5.nll.stderr", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.nll.stderr?ref=5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7", "patch": "@@ -1,26 +1,29 @@\n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-object-into-object-5.rs:17:5\n    |\n+LL | fn f<'a, T, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n+   |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n+LL |     // oh dear!\n LL |     Box::new(B(&*v)) as Box<dyn X>\n-   |     ^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'static`...\n+   |     ^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-object-into-object-5.rs:17:5\n    |\n+LL | fn f<'a, T, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n+   |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n+LL |     // oh dear!\n LL |     Box::new(B(&*v)) as Box<dyn X>\n-   |     ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'static`...\n+   |     ^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-object-into-object-5.rs:17:5\n    |\n+LL | fn f<'a, T, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n+   |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n+LL |     // oh dear!\n LL |     Box::new(B(&*v)) as Box<dyn X>\n-   |     ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'static`...\n+   |     ^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error[E0515]: cannot return value referencing local data `*v`\n   --> $DIR/regions-close-object-into-object-5.rs:17:5\n@@ -34,10 +37,11 @@ LL |     Box::new(B(&*v)) as Box<dyn X>\n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-object-into-object-5.rs:17:14\n    |\n+LL | fn f<'a, T, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n+   |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n+LL |     // oh dear!\n LL |     Box::new(B(&*v)) as Box<dyn X>\n-   |              ^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'static`...\n+   |              ^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error: aborting due to 5 previous errors\n "}, {"sha": "063c3b19a19cccc5bb96ea39e08196eb838a6295", "filename": "src/test/ui/regions/regions-close-over-type-parameter-1.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-1.nll.stderr?ref=5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7", "patch": "@@ -1,18 +1,18 @@\n error[E0310]: the parameter type `A` may not live long enough\n   --> $DIR/regions-close-over-type-parameter-1.rs:12:5\n    |\n+LL | fn make_object1<A: SomeTrait>(v: A) -> Box<dyn SomeTrait + 'static> {\n+   |                 -- help: consider adding an explicit lifetime bound...: `A: 'static +`\n LL |     Box::new(v) as Box<dyn SomeTrait + 'static>\n-   |     ^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `A: 'static`...\n+   |     ^^^^^^^^^^^ ...so that the type `A` will meet its required lifetime bounds\n \n error[E0309]: the parameter type `A` may not live long enough\n   --> $DIR/regions-close-over-type-parameter-1.rs:21:5\n    |\n+LL | fn make_object3<'a, 'b, A: SomeTrait + 'a>(v: A) -> Box<dyn SomeTrait + 'b> {\n+   |                         -- help: consider adding an explicit lifetime bound...: `A: 'b +`\n LL |     Box::new(v) as Box<dyn SomeTrait + 'b>\n-   |     ^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `A: 'b`...\n+   |     ^^^^^^^^^^^ ...so that the type `A` will meet its required lifetime bounds\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f0464e299bbec169dcafab57725ae04f9742efc0", "filename": "src/test/ui/regions/regions-close-param-into-object.nll.stderr", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftest%2Fui%2Fregions%2Fregions-close-param-into-object.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftest%2Fui%2Fregions%2Fregions-close-param-into-object.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-param-into-object.nll.stderr?ref=5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7", "patch": "@@ -1,34 +1,38 @@\n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-param-into-object.rs:6:5\n    |\n+LL | fn p1<T>(v: T) -> Box<dyn X + 'static>\n+   |       - help: consider adding an explicit lifetime bound...: `T: 'static`\n+...\n LL |     Box::new(v)\n-   |     ^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'static`...\n+   |     ^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-param-into-object.rs:12:5\n    |\n+LL | fn p2<T>(v: Box<T>) -> Box<dyn X + 'static>\n+   |       - help: consider adding an explicit lifetime bound...: `T: 'static`\n+...\n LL |     Box::new(v)\n-   |     ^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'static`...\n+   |     ^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-param-into-object.rs:18:5\n    |\n+LL | fn p3<'a,T>(v: T) -> Box<dyn X + 'a>\n+   |          - help: consider adding an explicit lifetime bound...: `T: 'a`\n+...\n LL |     Box::new(v)\n-   |     ^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'a`...\n+   |     ^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-param-into-object.rs:24:5\n    |\n+LL | fn p4<'a,T>(v: Box<T>) -> Box<dyn X + 'a>\n+   |          - help: consider adding an explicit lifetime bound...: `T: 'a`\n+...\n LL |     Box::new(v)\n-   |     ^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'a`...\n+   |     ^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error: aborting due to 4 previous errors\n "}, {"sha": "0e1db8acf1fae7dc80f65f14306d13a585b007fb", "filename": "src/test/ui/regions/regions-implied-bounds-projection-gap-1.nll.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-1.nll.stderr?ref=5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7", "patch": "@@ -1,10 +1,11 @@\n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/regions-implied-bounds-projection-gap-1.rs:16:5\n    |\n+LL | fn func<'x, T:Trait1<'x>>(t: &'x T::Foo)\n+   |             -- help: consider adding an explicit lifetime bound...: `T: 'x +`\n+LL | {\n LL |     wf::<&'x T>();\n-   |     ^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'x`...\n+   |     ^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error: aborting due to previous error\n "}, {"sha": "e88f79a3a8c54c2d5dbb0b6f35832528a9ebf1b3", "filename": "src/test/ui/regions/regions-infer-bound-from-trait-self.nll.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait-self.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait-self.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait-self.nll.stderr?ref=5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7", "patch": "@@ -5,6 +5,7 @@ LL |         check_bound(x, self)\n    |         ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `Self: 'a`...\n+   = note: ...so that the type `Self` will meet its required lifetime bounds\n \n error: aborting due to previous error\n "}, {"sha": "fe077499544048eb0399611dfc431ed06ffc3f81", "filename": "src/test/ui/regions/regions-infer-bound-from-trait.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait.nll.stderr?ref=5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7", "patch": "@@ -1,18 +1,18 @@\n error[E0309]: the parameter type `A` may not live long enough\n   --> $DIR/regions-infer-bound-from-trait.rs:33:5\n    |\n+LL | fn bar1<'a,A>(x: Inv<'a>, a: A) {\n+   |            - help: consider adding an explicit lifetime bound...: `A: 'a`\n LL |     check_bound(x, a)\n-   |     ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `A: 'a`...\n+   |     ^^^^^^^^^^^^^^^^^ ...so that the type `A` will meet its required lifetime bounds\n \n error[E0309]: the parameter type `A` may not live long enough\n   --> $DIR/regions-infer-bound-from-trait.rs:37:5\n    |\n+LL | fn bar2<'a,'b,A:Is<'b>>(x: Inv<'a>, y: Inv<'b>, a: A) {\n+   |               -- help: consider adding an explicit lifetime bound...: `A: 'a +`\n LL |     check_bound(x, a)\n-   |     ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `A: 'a`...\n+   |     ^^^^^^^^^^^^^^^^^ ...so that the type `A` will meet its required lifetime bounds\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d38d66c08853c44c3c5e40ac4971016ce5b92ebd", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature-2.nll.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.nll.stderr?ref=5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7", "patch": "@@ -1,6 +1,8 @@\n error[E0311]: the parameter type `T` may not live long enough\n   --> $DIR/missing-lifetimes-in-signature-2.rs:20:5\n    |\n+LL |   fn func<T: Test>(foo: &Foo, t: T) {\n+   |           -- help: consider adding an explicit lifetime bound...: `T: 'a +`\n LL | /     foo.bar(move |_| {\n LL | |\n LL | |         t.test();\n@@ -12,6 +14,14 @@ note: the parameter type `T` must be valid for the anonymous lifetime defined he\n    |\n LL | fn func<T: Test>(foo: &Foo, t: T) {\n    |                        ^^^\n+note: ...so that the type `T` will meet its required lifetime bounds\n+  --> $DIR/missing-lifetimes-in-signature-2.rs:20:5\n+   |\n+LL | /     foo.bar(move |_| {\n+LL | |\n+LL | |         t.test();\n+LL | |     });\n+   | |______^\n \n error: aborting due to previous error\n "}, {"sha": "4a18e0a4f8bbdae43586fa01289f3277e01df8f3", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature.nll.stderr", "status": "modified", "additions": 44, "deletions": 3, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.nll.stderr?ref=5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7", "patch": "@@ -26,6 +26,9 @@ LL | fn foo<G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n error[E0311]: the parameter type `G` may not live long enough\n   --> $DIR/missing-lifetimes-in-signature.rs:32:5\n    |\n+LL |   fn bar<G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n+   |          - help: consider adding an explicit lifetime bound...: `G: 'a`\n+...\n LL | /     move || {\n LL | |         *dest = g.get();\n LL | |     }\n@@ -36,10 +39,20 @@ note: the parameter type `G` must be valid for the anonymous lifetime defined he\n    |\n LL | fn bar<G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n    |                          ^^^^^^\n+note: ...so that the type `G` will meet its required lifetime bounds\n+  --> $DIR/missing-lifetimes-in-signature.rs:32:5\n+   |\n+LL | /     move || {\n+LL | |         *dest = g.get();\n+LL | |     }\n+   | |_____^\n \n error[E0311]: the parameter type `G` may not live long enough\n   --> $DIR/missing-lifetimes-in-signature.rs:55:5\n    |\n+LL |   fn qux<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n+   |              -- help: consider adding an explicit lifetime bound...: `G: 'b +`\n+...\n LL | /     move || {\n LL | |         *dest = g.get();\n LL | |     }\n@@ -50,10 +63,20 @@ note: the parameter type `G` must be valid for the anonymous lifetime defined he\n    |\n LL | fn qux<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n    |                                  ^^^^^^\n+note: ...so that the type `G` will meet its required lifetime bounds\n+  --> $DIR/missing-lifetimes-in-signature.rs:55:5\n+   |\n+LL | /     move || {\n+LL | |         *dest = g.get();\n+LL | |     }\n+   | |_____^\n \n error[E0311]: the parameter type `G` may not live long enough\n   --> $DIR/missing-lifetimes-in-signature.rs:65:9\n    |\n+LL |       fn qux<'b, G: Get<T> + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ {\n+   |                  -- help: consider adding an explicit lifetime bound...: `G: 'c +`\n+...\n LL | /         move || {\n LL | |             *dest = g.get();\n LL | |         }\n@@ -64,10 +87,20 @@ note: the parameter type `G` must be valid for the anonymous lifetime defined he\n    |\n LL |     fn qux<'b, G: Get<T> + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ {\n    |                                               ^^^^^^\n+note: ...so that the type `G` will meet its required lifetime bounds\n+  --> $DIR/missing-lifetimes-in-signature.rs:65:9\n+   |\n+LL | /         move || {\n+LL | |             *dest = g.get();\n+LL | |         }\n+   | |_________^\n \n error[E0311]: the parameter type `G` may not live long enough\n   --> $DIR/missing-lifetimes-in-signature.rs:77:5\n    |\n+LL |   fn bat<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ + 'a\n+   |              -- help: consider adding an explicit lifetime bound...: `G: 'b +`\n+...\n LL | /     move || {\n LL | |         *dest = g.get();\n LL | |     }\n@@ -78,6 +111,13 @@ note: the parameter type `G` must be valid for the anonymous lifetime defined he\n    |\n LL | fn bat<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ + 'a\n    |                                  ^^^^^^\n+note: ...so that the type `G` will meet its required lifetime bounds\n+  --> $DIR/missing-lifetimes-in-signature.rs:77:5\n+   |\n+LL | /     move || {\n+LL | |         *dest = g.get();\n+LL | |     }\n+   | |_____^\n \n error[E0621]: explicit lifetime required in the type of `dest`\n   --> $DIR/missing-lifetimes-in-signature.rs:77:5\n@@ -93,12 +133,13 @@ LL | |     }\n error[E0309]: the parameter type `G` may not live long enough\n   --> $DIR/missing-lifetimes-in-signature.rs:89:5\n    |\n+LL |   fn bak<'a, G, T>(g: G, dest: &'a mut T) -> impl FnOnce() + 'a\n+   |              - help: consider adding an explicit lifetime bound...: `G: 'a`\n+...\n LL | /     move || {\n LL | |         *dest = g.get();\n LL | |     }\n-   | |_____^\n-   |\n-   = help: consider adding an explicit lifetime bound `G: 'a`...\n+   | |_____^ ...so that the type `G` will meet its required lifetime bounds\n \n error: aborting due to 8 previous errors\n "}, {"sha": "72354eaaee14722238109e763ec54448bcef449f", "filename": "src/test/ui/suggestions/suggest-impl-trait-lifetime.nll.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.nll.stderr?ref=5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7", "patch": "@@ -1,10 +1,11 @@\n error[E0310]: the parameter type `impl Debug` may not live long enough\n   --> $DIR/suggest-impl-trait-lifetime.rs:7:5\n    |\n+LL | fn foo(d: impl Debug) {\n+   |           ---------- help: consider adding an explicit lifetime bound...: `impl Debug + 'static`\n+LL |\n LL |     bar(d);\n-   |     ^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `impl Debug: 'static`...\n+   |     ^^^^^^ ...so that the type `impl Debug` will meet its required lifetime bounds\n \n error: aborting due to previous error\n "}, {"sha": "a3b410c2cfb8c4946c53b40be46e6e828b4bf979", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.nll.stderr?ref=5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7", "patch": "@@ -19,10 +19,10 @@ LL | type WrongGeneric<T> = impl 'static;\n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/generic_type_does_not_live_long_enough.rs:18:5\n    |\n+LL | fn wrong_generic<T>(t: T) -> WrongGeneric<T> {\n+   |                  - help: consider adding an explicit lifetime bound...: `T: 'static`\n LL |     t\n-   |     ^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'static`...\n+   |     ^ ...so that the type `T` will meet its required lifetime bounds\n \n error: aborting due to 3 previous errors\n "}, {"sha": "2cb368c6881887cd6042740739bdfcbeb2c58fcd", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7", "patch": "@@ -198,11 +198,8 @@ pub struct Config {\n     /// The rust-demangler executable.\n     pub rust_demangler_path: Option<PathBuf>,\n \n-    /// The Python executable to use for LLDB.\n-    pub lldb_python: String,\n-\n-    /// The Python executable to use for htmldocck.\n-    pub docck_python: String,\n+    /// The Python executable to use for LLDB and htmldocck.\n+    pub python: String,\n \n     /// The jsondocck executable.\n     pub jsondocck_path: Option<String>,"}, {"sha": "a8fd4880f078250191547ae4c743c12e35f6630f", "filename": "src/tools/compiletest/src/header/tests.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs?ref=5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7", "patch": "@@ -43,8 +43,7 @@ fn config() -> Config {\n         \"--compile-lib-path=\",\n         \"--run-lib-path=\",\n         \"--rustc-path=\",\n-        \"--lldb-python=\",\n-        \"--docck-python=\",\n+        \"--python=\",\n         \"--jsondocck-path=\",\n         \"--src-base=\",\n         \"--build-base=\","}, {"sha": "f4e6c2a2bb288818bbad52cd3eaa7f4a89756dd1", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7", "patch": "@@ -61,8 +61,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         .reqopt(\"\", \"rustc-path\", \"path to rustc to use for compiling\", \"PATH\")\n         .optopt(\"\", \"rustdoc-path\", \"path to rustdoc to use for compiling\", \"PATH\")\n         .optopt(\"\", \"rust-demangler-path\", \"path to rust-demangler to use in tests\", \"PATH\")\n-        .reqopt(\"\", \"lldb-python\", \"path to python to use for doc tests\", \"PATH\")\n-        .reqopt(\"\", \"docck-python\", \"path to python to use for doc tests\", \"PATH\")\n+        .reqopt(\"\", \"python\", \"path to python to use for doc tests\", \"PATH\")\n         .optopt(\"\", \"jsondocck-path\", \"path to jsondocck to use for doc tests\", \"PATH\")\n         .optopt(\"\", \"valgrind-path\", \"path to Valgrind executable for Valgrind tests\", \"PROGRAM\")\n         .optflag(\"\", \"force-valgrind\", \"fail if Valgrind tests cannot be run under Valgrind\")\n@@ -222,8 +221,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         rustc_path: opt_path(matches, \"rustc-path\"),\n         rustdoc_path: matches.opt_str(\"rustdoc-path\").map(PathBuf::from),\n         rust_demangler_path: matches.opt_str(\"rust-demangler-path\").map(PathBuf::from),\n-        lldb_python: matches.opt_str(\"lldb-python\").unwrap(),\n-        docck_python: matches.opt_str(\"docck-python\").unwrap(),\n+        python: matches.opt_str(\"python\").unwrap(),\n         jsondocck_path: matches.opt_str(\"jsondocck-path\"),\n         valgrind_path: matches.opt_str(\"valgrind-path\"),\n         force_valgrind: matches.opt_present(\"force-valgrind\"),"}, {"sha": "aedddedac6184c5214f5aff405794b1b4185a9c2", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=5cdab3a8db1dc2326737c1a1d48e838a8b8e55d7", "patch": "@@ -179,7 +179,7 @@ pub fn compute_stamp_hash(config: &Config) -> String {\n         }\n \n         Some(Debugger::Lldb) => {\n-            config.lldb_python.hash(&mut hash);\n+            config.python.hash(&mut hash);\n             config.lldb_python_dir.hash(&mut hash);\n             env::var_os(\"PATH\").hash(&mut hash);\n             env::var_os(\"PYTHONPATH\").hash(&mut hash);\n@@ -1141,7 +1141,7 @@ impl<'test> TestCx<'test> {\n         // Prepare the lldb_batchmode which executes the debugger script\n         let lldb_script_path = rust_src_root.join(\"src/etc/lldb_batchmode.py\");\n         self.cmd2procres(\n-            Command::new(&self.config.lldb_python)\n+            Command::new(&self.config.python)\n                 .arg(&lldb_script_path)\n                 .arg(test_executable)\n                 .arg(debugger_script)\n@@ -2256,7 +2256,7 @@ impl<'test> TestCx<'test> {\n             self.check_rustdoc_test_option(proc_res);\n         } else {\n             let root = self.config.find_rust_src_root().unwrap();\n-            let mut cmd = Command::new(&self.config.docck_python);\n+            let mut cmd = Command::new(&self.config.python);\n             cmd.arg(root.join(\"src/etc/htmldocck.py\")).arg(&out_dir).arg(&self.testpaths.file);\n             if self.config.bless {\n                 cmd.arg(\"--bless\");\n@@ -2457,7 +2457,7 @@ impl<'test> TestCx<'test> {\n         let mut json_out = out_dir.join(self.testpaths.file.file_stem().unwrap());\n         json_out.set_extension(\"json\");\n         let res = self.cmd2procres(\n-            Command::new(&self.config.docck_python)\n+            Command::new(&self.config.python)\n                 .arg(root.join(\"src/etc/check_missing_items.py\"))\n                 .arg(&json_out),\n         );\n@@ -2852,7 +2852,7 @@ impl<'test> TestCx<'test> {\n             .stdout(Stdio::piped())\n             .stderr(Stdio::piped())\n             .env(\"TARGET\", &self.config.target)\n-            .env(\"PYTHON\", &self.config.docck_python)\n+            .env(\"PYTHON\", &self.config.python)\n             .env(\"S\", src_root)\n             .env(\"RUST_BUILD_STAGE\", &self.config.stage_id)\n             .env(\"RUSTC\", cwd.join(&self.config.rustc_path))"}]}