{"sha": "421ed946bfc52738dd13931cddb12c87b34e34b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyMWVkOTQ2YmZjNTI3MzhkZDEzOTMxY2RkYjEyYzg3YjM0ZTM0Yjk=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2019-05-18T08:51:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-18T08:51:25Z"}, "message": "Merge pull request #3558 from bash/unstable-tests\n\nAdd option to run a test only on nightly", "tree": {"sha": "4ff41b287cf983283a960cfbcd8d75d00db5a52a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ff41b287cf983283a960cfbcd8d75d00db5a52a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/421ed946bfc52738dd13931cddb12c87b34e34b9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc38eNCRBK7hj4Ov3rIwAAdHIIAENBXSTFM+cAW0TypNH+Z3Lp\n/gvpohtijzRL/KHnzTOOvwpAku00aAo3QtUogrMxfU1mF2OAdzy6I7XQMArfb9QL\nZS6SbNX9lCqHhHOv+7aV9mCHnqXk9cc7PD8N2C14a4scooqBhtuUcc/H2TGCSAat\nJPFhDyhJOxNAqcYqA6lwxs5b/Qmu7X+hVuKTnboA08nQrRA2JiqetKBQBDwbaHmy\n5Kc9Wwdl3b+2AkGlm93XNEe6U58DCJjKkA44RTevj81mTpPvqi/p5BzL1m+ji3mJ\nVkwF9U3svd8IH/RHY3Q+gNU3ju+2IfugahKHD6VDvOvU67DV0Pg1aGerD7I7pPc=\n=eR3E\n-----END PGP SIGNATURE-----\n", "payload": "tree 4ff41b287cf983283a960cfbcd8d75d00db5a52a\nparent e6d616e820ef67202c72c05084b503225868c0d8\nparent 8b57668c33cc8d62b48a25ff0453be4b351b5eeb\nauthor Seiichi Uchida <seuchida@gmail.com> 1558169485 +0900\ncommitter GitHub <noreply@github.com> 1558169485 +0900\n\nMerge pull request #3558 from bash/unstable-tests\n\nAdd option to run a test only on nightly"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/421ed946bfc52738dd13931cddb12c87b34e34b9", "html_url": "https://github.com/rust-lang/rust/commit/421ed946bfc52738dd13931cddb12c87b34e34b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/421ed946bfc52738dd13931cddb12c87b34e34b9/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6d616e820ef67202c72c05084b503225868c0d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6d616e820ef67202c72c05084b503225868c0d8", "html_url": "https://github.com/rust-lang/rust/commit/e6d616e820ef67202c72c05084b503225868c0d8"}, {"sha": "8b57668c33cc8d62b48a25ff0453be4b351b5eeb", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b57668c33cc8d62b48a25ff0453be4b351b5eeb", "html_url": "https://github.com/rust-lang/rust/commit/8b57668c33cc8d62b48a25ff0453be4b351b5eeb"}], "stats": {"total": 62, "additions": 38, "deletions": 24}, "files": [{"sha": "326d81b2113b4b07b6ce14058fb5740e91628b1e", "filename": "src/config/config_type.rs", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/421ed946bfc52738dd13931cddb12c87b34e34b9/src%2Fconfig%2Fconfig_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421ed946bfc52738dd13931cddb12c87b34e34b9/src%2Fconfig%2Fconfig_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fconfig_type.rs?ref=421ed946bfc52738dd13931cddb12c87b34e34b9", "patch": "@@ -50,22 +50,6 @@ impl ConfigType for IgnoreList {\n     }\n }\n \n-/// Checks if we're in a nightly build.\n-///\n-/// The environment variable `CFG_RELEASE_CHANNEL` is set during the rustc bootstrap\n-/// to \"stable\", \"beta\", or \"nightly\" depending on what toolchain is being built.\n-/// If we are being built as part of the stable or beta toolchains, we want\n-/// to disable unstable configuration options.\n-///\n-/// If we're being built by cargo (e.g., `cargo +nightly install rustfmt-nightly`),\n-/// `CFG_RELEASE_CHANNEL` is not set. As we only support being built against the\n-/// nightly compiler when installed from crates.io, default to nightly mode.\n-macro_rules! is_nightly_channel {\n-    () => {\n-        option_env!(\"CFG_RELEASE_CHANNEL\").map_or(true, |c| c == \"nightly\" || c == \"dev\")\n-    };\n-}\n-\n macro_rules! create_config {\n     ($($i:ident: $ty:ty, $def:expr, $stb:expr, $( $dstring:expr ),+ );+ $(;)*) => (\n         #[cfg(test)]\n@@ -159,7 +143,7 @@ macro_rules! create_config {\n                         self.$i.1 = true;\n                         self.$i.2 = val;\n                     } else {\n-                        if is_nightly_channel!() {\n+                        if crate::is_nightly_channel!() {\n                             self.$i.1 = true;\n                             self.$i.2 = val;\n                         } else {"}, {"sha": "88605079b7eec24f282a2143463a9db6e6d5efc5", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/421ed946bfc52738dd13931cddb12c87b34e34b9/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421ed946bfc52738dd13931cddb12c87b34e34b9/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=421ed946bfc52738dd13931cddb12c87b34e34b9", "patch": "@@ -40,6 +40,9 @@ pub use crate::rustfmt_diff::{ModifiedChunk, ModifiedLines};\n #[macro_use]\n mod utils;\n \n+#[macro_use]\n+mod release_channel;\n+\n mod attr;\n mod chains;\n pub(crate) mod checkstyle;"}, {"sha": "948247b3c9700e7732408be7d8f8ba367c1c53c0", "filename": "src/release_channel.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/421ed946bfc52738dd13931cddb12c87b34e34b9/src%2Frelease_channel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421ed946bfc52738dd13931cddb12c87b34e34b9/src%2Frelease_channel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frelease_channel.rs?ref=421ed946bfc52738dd13931cddb12c87b34e34b9", "patch": "@@ -0,0 +1,16 @@\n+/// Checks if we're in a nightly build.\n+///\n+/// The environment variable `CFG_RELEASE_CHANNEL` is set during the rustc bootstrap\n+/// to \"stable\", \"beta\", or \"nightly\" depending on what toolchain is being built.\n+/// If we are being built as part of the stable or beta toolchains, we want\n+/// to disable unstable configuration options.\n+///\n+/// If we're being built by cargo (e.g., `cargo +nightly install rustfmt-nightly`),\n+/// `CFG_RELEASE_CHANNEL` is not set. As we only support being built against the\n+/// nightly compiler when installed from crates.io, default to nightly mode.\n+#[macro_export]\n+macro_rules! is_nightly_channel {\n+    () => {\n+        option_env!(\"CFG_RELEASE_CHANNEL\").map_or(true, |c| c == \"nightly\" || c == \"dev\")\n+    };\n+}"}, {"sha": "68fd90a01cfd33804bcc98e1c786d2a48d33e04f", "filename": "src/test/mod.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/421ed946bfc52738dd13931cddb12c87b34e34b9/src%2Ftest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421ed946bfc52738dd13931cddb12c87b34e34b9/src%2Ftest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmod.rs?ref=421ed946bfc52738dd13931cddb12c87b34e34b9", "patch": "@@ -11,6 +11,7 @@ use std::thread;\n \n use crate::config::{Color, Config, EmitMode, FileName, NewlineStyle, ReportTactic};\n use crate::formatting::{ReportedErrors, SourceFile};\n+use crate::is_nightly_channel;\n use crate::rustfmt_diff::{make_diff, print_diff, DiffLine, Mismatch, ModifiedChunk, OutputWriter};\n use crate::source_file;\n use crate::{FormatReport, FormatReportFormatterBuilder, Input, Session};\n@@ -259,9 +260,9 @@ fn assert_output(source: &Path, expected_filename: &Path) {\n #[test]\n fn idempotence_tests() {\n     run_test_with(&TestSetting::default(), || {\n-        match option_env!(\"CFG_RELEASE_CHANNEL\") {\n-            None | Some(\"nightly\") => {}\n-            _ => return, // these tests require nightly\n+        // these tests require nightly\n+        if !is_nightly_channel!() {\n+            return;\n         }\n         // Get all files in the tests/target directory.\n         let files = get_test_files(Path::new(\"tests/target\"), true);\n@@ -277,9 +278,9 @@ fn idempotence_tests() {\n // no warnings are emitted.\n #[test]\n fn self_tests() {\n-    match option_env!(\"CFG_RELEASE_CHANNEL\") {\n-        None | Some(\"nightly\") => {}\n-        _ => return, // Issue-3443: these tests require nightly\n+    // Issue-3443: these tests require nightly\n+    if !is_nightly_channel!() {\n+        return;\n     }\n     let mut files = get_test_files(Path::new(\"tests\"), false);\n     let bin_directories = vec![\"cargo-fmt\", \"git-rustfmt\", \"bin\", \"format-diff\"];\n@@ -426,6 +427,16 @@ fn check_files(files: Vec<PathBuf>, opt_config: &Option<PathBuf>) -> (Vec<Format\n     let mut reports = vec![];\n \n     for file_name in files {\n+        let sig_comments = read_significant_comments(&file_name);\n+        if sig_comments.contains_key(\"unstable\") && !is_nightly_channel!() {\n+            debug!(\n+                \"Skipping '{}' because it requires unstable \\\n+                 features which are only available on nightly...\",\n+                file_name.display()\n+            );\n+            continue;\n+        }\n+\n         debug!(\"Testing '{}'...\", file_name.display());\n \n         match idempotent_check(&file_name, &opt_config) {\n@@ -485,7 +496,7 @@ fn read_config(filename: &Path) -> Config {\n     };\n \n     for (key, val) in &sig_comments {\n-        if key != \"target\" && key != \"config\" {\n+        if key != \"target\" && key != \"config\" && key != \"unstable\" {\n             config.override_value(key, val);\n             if config.is_default(key) {\n                 warn!(\"Default value {} used explicitly for {}\", val, key);"}]}