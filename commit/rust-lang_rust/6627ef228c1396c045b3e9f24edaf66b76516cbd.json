{"sha": "6627ef228c1396c045b3e9f24edaf66b76516cbd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2MjdlZjIyOGMxMzk2YzA0NWIzZTlmMjRlZGFmNjZiNzY1MTZjYmQ=", "commit": {"author": {"name": "Matthew", "email": "mjjasper1@gmail.com", "date": "2017-05-23T13:00:20Z"}, "committer": {"name": "Matthew", "email": "mjjasper1@gmail.com", "date": "2017-05-23T13:00:20Z"}, "message": "Stabilize in 1.19", "tree": {"sha": "fbead309f0165e668a895b2b33ce607aa0f4d2cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbead309f0165e668a895b2b33ce607aa0f4d2cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6627ef228c1396c045b3e9f24edaf66b76516cbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6627ef228c1396c045b3e9f24edaf66b76516cbd", "html_url": "https://github.com/rust-lang/rust/commit/6627ef228c1396c045b3e9f24edaf66b76516cbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6627ef228c1396c045b3e9f24edaf66b76516cbd/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "158b085f06a41004ebf36d87afa3548f8b60861a", "url": "https://api.github.com/repos/rust-lang/rust/commits/158b085f06a41004ebf36d87afa3548f8b60861a", "html_url": "https://github.com/rust-lang/rust/commit/158b085f06a41004ebf36d87afa3548f8b60861a"}, {"sha": "852b7cb91ed44f6cc77f855bd8281da4accbd2fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/852b7cb91ed44f6cc77f855bd8281da4accbd2fb", "html_url": "https://github.com/rust-lang/rust/commit/852b7cb91ed44f6cc77f855bd8281da4accbd2fb"}], "stats": {"total": 41523, "additions": 26942, "deletions": 14581}, "files": [{"sha": "1ef3c086a1c232566edfb66c4bcd2b3836542530", "filename": ".gitmodules", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/.gitmodules", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/.gitmodules", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitmodules?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -13,7 +13,7 @@\n \tpath = src/jemalloc\n \turl = https://github.com/rust-lang/jemalloc.git\n [submodule \"src/rust-installer\"]\n-\tpath = src/rust-installer\n+\tpath = src/tools/rust-installer\n \turl = https://github.com/rust-lang/rust-installer.git\n [submodule \"src/liblibc\"]\n \tpath = src/liblibc\n@@ -22,15 +22,14 @@\n \tpath = src/doc/nomicon\n \turl = https://github.com/rust-lang-nursery/nomicon.git\n [submodule \"src/tools/cargo\"]\n-\tpath = cargo\n+\tpath = src/tools/cargo\n \turl = https://github.com/rust-lang/cargo.git\n [submodule \"reference\"]\n \tpath = src/doc/reference\n \turl = https://github.com/rust-lang-nursery/reference.git\n [submodule \"book\"]\n \tpath = src/doc/book\n \turl = https://github.com/rust-lang/book.git\n-[submodule \"rls\"]\n-\tpath = rls\n+[submodule \"src/tools/rls\"]\n+\tpath = src/tools/rls\n \turl = https://github.com/rust-lang-nursery/rls.git\n-"}, {"sha": "ee5b6f257b555ec4d9f4a551544f6a27ad356aeb", "filename": ".mailmap", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/.mailmap", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/.mailmap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.mailmap?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -139,6 +139,7 @@ Margaret Meyerhofer <mmeyerho@andrew.cmu.edu> <mmeyerho@andrew>\n Mark Sinclair <mark.edward.x@gmail.com>\n Mark Sinclair <mark.edward.x@gmail.com> =Mark Sinclair <=125axel125@gmail.com>\n Markus Westerlind <marwes91@gmail.com> Markus <marwes91@gmail.com>\n+Martin Hafskjold Thoresen <martinhath@gmail.com>\n Matej Lach <matej.lach@gmail.com> Matej \u013dach <matej.lach@gmail.com>\n Matt Brubeck <mbrubeck@limpet.net> <mbrubeck@cs.hmc.edu>\n Matthew Auld <matthew.auld@intel.com>"}, {"sha": "190cb3380a18c633870f6c4d0f7baf677bf3d09a", "filename": ".travis.yml", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -54,7 +54,7 @@ matrix:\n     # version that we're using, 8.2, cannot compile LLVM for OSX 10.7.\n     - env: >\n         RUST_CHECK_TARGET=check\n-        RUST_CONFIGURE_ARGS=--build=x86_64-apple-darwin\n+        RUST_CONFIGURE_ARGS=\"--build=x86_64-apple-darwin --enable-sanitizers\"\n         SRC=.\n         RUSTC_RETRY_LINKER_ON_SEGFAULT=1\n         SCCACHE_ERROR_LOG=/tmp/sccache.log\n@@ -63,7 +63,7 @@ matrix:\n       os: osx\n       osx_image: xcode8.2\n       install: &osx_install_sccache >\n-        travis_retry curl -o /usr/local/bin/sccache https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-apple-darwin &&\n+        travis_retry curl -o /usr/local/bin/sccache https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-apple-darwin &&\n           chmod +x /usr/local/bin/sccache &&\n         travis_retry curl -o /usr/local/bin/stamp https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-17-stamp-x86_64-apple-darwin &&\n           chmod +x /usr/local/bin/stamp\n@@ -95,18 +95,24 @@ matrix:\n         MACOSX_DEPLOYMENT_TARGET=10.7\n       os: osx\n       osx_image: xcode7\n-      install: *osx_install_sccache\n+      install:\n+        - travis_retry brew update\n+        - travis_retry brew install xz\n+        - *osx_install_sccache\n     - env: >\n         RUST_CHECK_TARGET=dist\n-        RUST_CONFIGURE_ARGS=\"--target=aarch64-apple-ios,armv7-apple-ios,armv7s-apple-ios,i386-apple-ios,x86_64-apple-ios --enable-extended\"\n+        RUST_CONFIGURE_ARGS=\"--target=aarch64-apple-ios,armv7-apple-ios,armv7s-apple-ios,i386-apple-ios,x86_64-apple-ios --enable-extended --enable-sanitizers\"\n         SRC=.\n         DEPLOY=1\n         RUSTC_RETRY_LINKER_ON_SEGFAULT=1\n         SCCACHE_ERROR_LOG=/tmp/sccache.log\n         MACOSX_DEPLOYMENT_TARGET=10.7\n       os: osx\n       osx_image: xcode7\n-      install: *osx_install_sccache\n+      install:\n+        - travis_retry brew update\n+        - travis_retry brew install xz\n+        - *osx_install_sccache\n \n     # \"alternate\" deployments, these are \"nightlies\" but don't have assertions\n     # turned on, they're deployed to a different location primarily for projects\n@@ -123,7 +129,10 @@ matrix:\n         MACOSX_DEPLOYMENT_TARGET=10.7\n       os: osx\n       osx_image: xcode7\n-      install: *osx_install_sccache\n+      install:\n+        - travis_retry brew update\n+        - travis_retry brew install xz\n+        - *osx_install_sccache\n \n env:\n   global:\n@@ -185,7 +194,7 @@ after_failure:\n \n # Save tagged docker images we created and load them if they're available\n # Travis saves caches whether the build failed or not, nuke rustsrc if\n-# the failure was while updating it (as it may be in an bad state)\n+# the failure was while updating it (as it may be in a bad state)\n # https://github.com/travis-ci/travis-ci/issues/4472\n before_cache:\n   - docker history -q rust-ci |"}, {"sha": "8f121f8d6ed9b54434c5f1bb4e23a149a42381d6", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -177,7 +177,7 @@ python x.py test src/test/rustdoc\n python x.py build src/libcore --stage 0\n ```\n \n-You can explore the build system throught the various `--help` pages for each\n+You can explore the build system through the various `--help` pages for each\n subcommand. For example to learn more about a command you can run:\n \n ```"}, {"sha": "8f641792add66cf519096bf6db50f13aacbc266b", "filename": "RELEASES.md", "status": "modified", "additions": 514, "deletions": 512, "changes": 1026, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -1,3 +1,261 @@\n+Version 1.17.0 (2017-04-27)\n+===========================\n+\n+Language\n+--------\n+\n+* [The lifetime of statics and consts defaults to `'static`][39265]. [RFC 1623]\n+* [Fields of structs may be initialized without duplicating the field/variable\n+  names][39761]. [RFC 1682]\n+* [`Self` may be included in the `where` clause of `impls`][38864]. [RFC 1647]\n+* [When coercing to an unsized type lifetimes must be equal][40319]. That is,\n+  there is no subtyping between `T` and `U` when `T: Unsize<U>`. For example,\n+  coercing `&mut [&'a X; N]` to `&mut [&'b X]` requires `'a` be equal to\n+  `'b`. Soundness fix.\n+* [Values passed to the indexing operator, `[]`, automatically coerce][40166]\n+* [Static variables may contain references to other statics][40027]\n+\n+Compiler\n+--------\n+\n+* [Exit quickly on only `--emit dep-info`][40336]\n+* [Make `-C relocation-model` more correctly determine whether the linker\n+  creates a position-independent executable][40245]\n+* [Add `-C overflow-checks` to directly control whether integer overflow\n+  panics][40037]\n+* [The rustc type checker now checks items on demand instead of in a single\n+  in-order pass][40008]. This is mostly an internal refactoring in support of\n+  future work, including incremental type checking, but also resolves [RFC\n+  1647], allowing `Self` to appear in `impl` `where` clauses.\n+* [Optimize vtable loads][39995]\n+* [Turn off vectorization for Emscripten targets][39990]\n+* [Provide suggestions for unknown macros imported with `use`][39953]\n+* [Fix ICEs in path resolution][39939]\n+* [Strip exception handling code on Emscripten when `panic=abort`][39193]\n+* [Add clearer error message using `&str + &str`][39116]\n+\n+Stabilized APIs\n+---------------\n+\n+* [`Arc::into_raw`]\n+* [`Arc::from_raw`]\n+* [`Arc::ptr_eq`]\n+* [`Rc::into_raw`]\n+* [`Rc::from_raw`]\n+* [`Rc::ptr_eq`]\n+* [`Ordering::then`]\n+* [`Ordering::then_with`]\n+* [`BTreeMap::range`]\n+* [`BTreeMap::range_mut`]\n+* [`collections::Bound`]\n+* [`process::abort`]\n+* [`ptr::read_unaligned`]\n+* [`ptr::write_unaligned`]\n+* [`Result::expect_err`]\n+* [`Cell::swap`]\n+* [`Cell::replace`]\n+* [`Cell::into_inner`]\n+* [`Cell::take`]\n+\n+Libraries\n+---------\n+\n+* [`BTreeMap` and `BTreeSet` can iterate over ranges][27787]\n+* [`Cell` can store non-`Copy` types][39793]. [RFC 1651]\n+* [`String` implements `FromIterator<&char>`][40028]\n+* `Box` [implements][40009] a number of new conversions:\n+  `From<Box<str>> for String`,\n+  `From<Box<[T]>> for Vec<T>`,\n+  `From<Box<CStr>> for CString`,\n+  `From<Box<OsStr>> for OsString`,\n+  `From<Box<Path>> for PathBuf`,\n+  `Into<Box<str>> for String`,\n+  `Into<Box<[T]>> for Vec<T>`,\n+  `Into<Box<CStr>> for CString`,\n+  `Into<Box<OsStr>> for OsString`,\n+  `Into<Box<Path>> for PathBuf`,\n+  `Default for Box<str>`,\n+  `Default for Box<CStr>`,\n+  `Default for Box<OsStr>`,\n+  `From<&CStr> for Box<CStr>`,\n+  `From<&OsStr> for Box<OsStr>`,\n+  `From<&Path> for Box<Path>`\n+* [`ffi::FromBytesWithNulError` implements `Error` and `Display`][39960]\n+* [Specialize `PartialOrd<A> for [A] where A: Ord`][39642]\n+* [Slightly optimize `slice::sort`][39538]\n+* [Add `ToString` trait specialization for `Cow<'a, str>` and `String`][39440]\n+* [`Box<[T]>` implements `From<&[T]> where T: Copy`,\n+  `Box<str>` implements `From<&str>`][39438]\n+* [`IpAddr` implements `From` for various arrays. `SocketAddr` implements\n+  `From<(I, u16)> where I: Into<IpAddr>`][39372]\n+* [`format!` estimates the needed capacity before writing a string][39356]\n+* [Support unprivileged symlink creation in Windows][38921]\n+* [`PathBuf` implements `Default`][38764]\n+* [Implement `PartialEq<[A]>` for `VecDeque<A>`][38661]\n+* [`HashMap` resizes adaptively][38368] to guard against DOS attacks\n+  and poor hash functions.\n+\n+Cargo\n+-----\n+\n+* [Add `cargo check --all`][cargo/3731]\n+* [Add an option to ignore SSL revocation checking][cargo/3699]\n+* [Add `cargo run --package`][cargo/3691]\n+* [Add `required_features`][cargo/3667]\n+* [Assume `build.rs` is a build script][cargo/3664]\n+* [Find workspace via `workspace_root` link in containing member][cargo/3562]\n+\n+Misc\n+----\n+\n+* [Documentation is rendered with mdbook instead of the obsolete, in-tree\n+  `rustbook`][39633]\n+* [The \"Unstable Book\" documents nightly-only features][ubook]\n+* [Improve the style of the sidebar in rustdoc output][40265]\n+* [Configure build correctly on 64-bit CPU's with the armhf ABI][40261]\n+* [Fix MSP430 breakage due to `i128`][40257]\n+* [Preliminary Solaris/SPARCv9 support][39903]\n+* [`rustc` is linked statically on Windows MSVC targets][39837], allowing it to\n+  run without installing the MSVC runtime.\n+* [`rustdoc --test` includes file names in test names][39788]\n+* This release includes builds of `std` for `sparc64-unknown-linux-gnu`,\n+  `aarch64-unknown-linux-fuchsia`, and `x86_64-unknown-linux-fuchsia`.\n+* [Initial support for `aarch64-unknown-freebsd`][39491]\n+* [Initial support for `i686-unknown-netbsd`][39426]\n+* [This release no longer includes the old makefile build system][39431]. Rust\n+  is built with a custom build system, written in Rust, and with Cargo.\n+* [Add Debug implementations for libcollection structs][39002]\n+* [`TypeId` implements `PartialOrd` and `Ord`][38981]\n+* [`--test-threads=0` produces an error][38945]\n+* [`rustup` installs documentation by default][40526]\n+* [The Rust source includes NatVis visualizations][39843]. These can be used by\n+  WinDbg and Visual Studio to improve the debugging experience.\n+\n+Compatibility Notes\n+-------------------\n+\n+* [Rust 1.17 does not correctly detect the MSVC 2017 linker][38584]. As a\n+  workaround, either use MSVC 2015 or run vcvars.bat.\n+* [When coercing to an unsized type lifetimes must be equal][40319]. That is,\n+  disallow subtyping between `T` and `U` when `T: Unsize<U>`, e.g. coercing\n+  `&mut [&'a X; N]` to `&mut [&'b X]` requires `'a` be equal to `'b`. Soundness\n+  fix.\n+* [`format!` and `Display::to_string` panic if an underlying formatting\n+  implementation returns an error][40117]. Previously the error was silently\n+  ignored. It is incorrect for `write_fmt` to return an error when writing\n+  to a string.\n+* [In-tree crates are verified to be unstable][39851]. Previously, some minor\n+  crates were marked stable and could be accessed from the stable toolchain.\n+* [Rust git source no longer includes vendored crates][39728]. Those that need\n+  to build with vendored crates should build from release tarballs.\n+* [Fix inert attributes from `proc_macro_derives`][39572]\n+* [During crate resolution, rustc prefers a crate in the sysroot if two crates\n+  are otherwise identical][39518]. Unlikely to be encountered outside the Rust\n+  build system.\n+* [Fixed bugs around how type inference interacts with dead-code][39485]. The\n+  existing code generally ignores the type of dead-code unless a type-hint is\n+  provided; this can cause surprising inference interactions particularly around\n+  defaulting. The new code uniformly ignores the result type of dead-code.\n+* [Tuple-struct constructors with private fields are no longer visible][38932]\n+* [Lifetime parameters that do not appear in the arguments are now considered\n+  early-bound][38897], resolving a soundness bug (#[32330]). The\n+  `hr_lifetime_in_assoc_type` future-compatibility lint has been in effect since\n+  April of 2016.\n+* [rustdoc: fix doctests with non-feature crate attributes][38161]\n+* [Make transmuting from fn item types to pointer-sized types a hard\n+  error][34198]\n+\n+[27787]: https://github.com/rust-lang/rust/issues/27787\n+[32330]: https://github.com/rust-lang/rust/issues/32330\n+[34198]: https://github.com/rust-lang/rust/pull/34198\n+[38161]: https://github.com/rust-lang/rust/pull/38161\n+[38368]: https://github.com/rust-lang/rust/pull/38368\n+[38584]: https://github.com/rust-lang/rust/issues/38584\n+[38661]: https://github.com/rust-lang/rust/pull/38661\n+[38764]: https://github.com/rust-lang/rust/pull/38764\n+[38864]: https://github.com/rust-lang/rust/issues/38864\n+[38897]: https://github.com/rust-lang/rust/pull/38897\n+[38921]: https://github.com/rust-lang/rust/pull/38921\n+[38932]: https://github.com/rust-lang/rust/pull/38932\n+[38945]: https://github.com/rust-lang/rust/pull/38945\n+[38981]: https://github.com/rust-lang/rust/pull/38981\n+[39002]: https://github.com/rust-lang/rust/pull/39002\n+[39116]: https://github.com/rust-lang/rust/pull/39116\n+[39193]: https://github.com/rust-lang/rust/pull/39193\n+[39265]: https://github.com/rust-lang/rust/pull/39265\n+[39356]: https://github.com/rust-lang/rust/pull/39356\n+[39372]: https://github.com/rust-lang/rust/pull/39372\n+[39426]: https://github.com/rust-lang/rust/pull/39426\n+[39431]: https://github.com/rust-lang/rust/pull/39431\n+[39438]: https://github.com/rust-lang/rust/pull/39438\n+[39440]: https://github.com/rust-lang/rust/pull/39440\n+[39485]: https://github.com/rust-lang/rust/pull/39485\n+[39491]: https://github.com/rust-lang/rust/pull/39491\n+[39518]: https://github.com/rust-lang/rust/pull/39518\n+[39538]: https://github.com/rust-lang/rust/pull/39538\n+[39572]: https://github.com/rust-lang/rust/pull/39572\n+[39633]: https://github.com/rust-lang/rust/pull/39633\n+[39642]: https://github.com/rust-lang/rust/pull/39642\n+[39728]: https://github.com/rust-lang/rust/pull/39728\n+[39761]: https://github.com/rust-lang/rust/pull/39761\n+[39788]: https://github.com/rust-lang/rust/pull/39788\n+[39793]: https://github.com/rust-lang/rust/pull/39793\n+[39837]: https://github.com/rust-lang/rust/pull/39837\n+[39843]: https://github.com/rust-lang/rust/pull/39843\n+[39851]: https://github.com/rust-lang/rust/pull/39851\n+[39903]: https://github.com/rust-lang/rust/pull/39903\n+[39939]: https://github.com/rust-lang/rust/pull/39939\n+[39953]: https://github.com/rust-lang/rust/pull/39953\n+[39960]: https://github.com/rust-lang/rust/pull/39960\n+[39990]: https://github.com/rust-lang/rust/pull/39990\n+[39995]: https://github.com/rust-lang/rust/pull/39995\n+[40008]: https://github.com/rust-lang/rust/pull/40008\n+[40009]: https://github.com/rust-lang/rust/pull/40009\n+[40027]: https://github.com/rust-lang/rust/pull/40027\n+[40028]: https://github.com/rust-lang/rust/pull/40028\n+[40037]: https://github.com/rust-lang/rust/pull/40037\n+[40117]: https://github.com/rust-lang/rust/pull/40117\n+[40166]: https://github.com/rust-lang/rust/pull/40166\n+[40245]: https://github.com/rust-lang/rust/pull/40245\n+[40257]: https://github.com/rust-lang/rust/pull/40257\n+[40261]: https://github.com/rust-lang/rust/pull/40261\n+[40265]: https://github.com/rust-lang/rust/pull/40265\n+[40319]: https://github.com/rust-lang/rust/pull/40319\n+[40336]: https://github.com/rust-lang/rust/pull/40336\n+[40526]: https://github.com/rust-lang/rust/pull/40526\n+[RFC 1623]: https://github.com/rust-lang/rfcs/blob/master/text/1623-static.md\n+[RFC 1647]: https://github.com/rust-lang/rfcs/blob/master/text/1647-allow-self-in-where-clauses.md\n+[RFC 1651]: https://github.com/rust-lang/rfcs/blob/master/text/1651-movecell.md\n+[RFC 1682]: https://github.com/rust-lang/rfcs/blob/master/text/1682-field-init-shorthand.md\n+[`Arc::from_raw`]: https://doc.rust-lang.org/std/sync/struct.Arc.html#method.from_raw\n+[`Arc::into_raw`]: https://doc.rust-lang.org/std/sync/struct.Arc.html#method.into_raw\n+[`Arc::ptr_eq`]: https://doc.rust-lang.org/std/sync/struct.Arc.html#method.ptr_eq\n+[`BTreeMap::range_mut`]: https://doc.rust-lang.org/std/collections/btree_map/struct.BTreeMap.html#method.range_mut\n+[`BTreeMap::range`]: https://doc.rust-lang.org/std/collections/btree_map/struct.BTreeMap.html#method.range\n+[`Cell::into_inner`]: https://doc.rust-lang.org/std/cell/struct.Cell.html#method.into_inner\n+[`Cell::replace`]: https://doc.rust-lang.org/std/cell/struct.Cell.html#method.replace\n+[`Cell::swap`]: https://doc.rust-lang.org/std/cell/struct.Cell.html#method.swap\n+[`Cell::take`]: https://doc.rust-lang.org/std/cell/struct.Cell.html#method.take\n+[`Ordering::then_with`]: https://doc.rust-lang.org/std/cmp/enum.Ordering.html#method.then_with\n+[`Ordering::then`]: https://doc.rust-lang.org/std/cmp/enum.Ordering.html#method.then\n+[`Rc::from_raw`]: https://doc.rust-lang.org/std/rc/struct.Rc.html#method.from_raw\n+[`Rc::into_raw`]: https://doc.rust-lang.org/std/rc/struct.Rc.html#method.into_raw\n+[`Rc::ptr_eq`]: https://doc.rust-lang.org/std/rc/struct.Rc.html#method.ptr_eq\n+[`Result::expect_err`]: https://doc.rust-lang.org/std/result/enum.Result.html#method.expect_err\n+[`collections::Bound`]: https://doc.rust-lang.org/std/collections/enum.Bound.html\n+[`process::abort`]: https://doc.rust-lang.org/std/process/fn.abort.html\n+[`ptr::read_unaligned`]: https://doc.rust-lang.org/std/ptr/fn.read_unaligned.html\n+[`ptr::write_unaligned`]: https://doc.rust-lang.org/std/ptr/fn.write_unaligned.html\n+[cargo/3562]: https://github.com/rust-lang/cargo/pull/3562\n+[cargo/3664]: https://github.com/rust-lang/cargo/pull/3664\n+[cargo/3667]: https://github.com/rust-lang/cargo/pull/3667\n+[cargo/3691]: https://github.com/rust-lang/cargo/pull/3691\n+[cargo/3699]: https://github.com/rust-lang/cargo/pull/3699\n+[cargo/3731]: https://github.com/rust-lang/cargo/pull/3731\n+[mdbook]: https://crates.io/crates/mdbook\n+[ubook]: https://doc.rust-lang.org/unstable-book/\n+\n+\n Version 1.16.0 (2017-03-16)\n ===========================\n \n@@ -949,254 +1207,168 @@ Version 1.12.0 (2016-09-29)\n Highlights\n ----------\n \n-* [`rustc` translates code to LLVM IR via its own \"middle\" IR (MIR)]\n-  (https://github.com/rust-lang/rust/pull/34096).\n+* [`rustc` translates code to LLVM IR via its own \"middle\" IR (MIR)](https://github.com/rust-lang/rust/pull/34096).\n   This translation pass is far simpler than the previous AST->LLVM pass, and\n   creates opportunities to perform new optimizations directly on the MIR. It\n-  was previously described [on the Rust blog]\n-  (https://blog.rust-lang.org/2016/04/19/MIR.html).\n+  was previously described [on the Rust blog](https://blog.rust-lang.org/2016/04/19/MIR.html).\n * [`rustc` presents a new, more readable error format, along with\n-  machine-readable JSON error output for use by IDEs]\n-  (https://github.com/rust-lang/rust/pull/35401).\n+  machine-readable JSON error output for use by IDEs](https://github.com/rust-lang/rust/pull/35401).\n   Most common editors supporting Rust have been updated to work with it. It was\n-  previously described [on the Rust blog]\n-  (https://blog.rust-lang.org/2016/08/10/Shape-of-errors-to-come.html).\n+  previously described [on the Rust blog](https://blog.rust-lang.org/2016/08/10/Shape-of-errors-to-come.html).\n \n Compiler\n --------\n \n-* [`rustc` translates code to LLVM IR via its own \"middle\" IR (MIR)]\n-  (https://github.com/rust-lang/rust/pull/34096).\n+* [`rustc` translates code to LLVM IR via its own \"middle\" IR (MIR)](https://github.com/rust-lang/rust/pull/34096).\n   This translation pass is far simpler than the previous AST->LLVM pass, and\n   creates opportunities to perform new optimizations directly on the MIR. It\n-  was previously described [on the Rust blog]\n-  (https://blog.rust-lang.org/2016/04/19/MIR.html).\n+  was previously described [on the Rust blog](https://blog.rust-lang.org/2016/04/19/MIR.html).\n * [Print the Rust target name, not the LLVM target name, with\n-  `--print target-list`]\n-  (https://github.com/rust-lang/rust/pull/35489)\n+  `--print target-list`](https://github.com/rust-lang/rust/pull/35489)\n * [The computation of `TypeId` is correct in some cases where it was previously\n-  producing inconsistent results]\n-  (https://github.com/rust-lang/rust/pull/35267)\n-* [The `mips-unknown-linux-gnu` target uses hardware floating point by default]\n-  (https://github.com/rust-lang/rust/pull/34910)\n+  producing inconsistent results](https://github.com/rust-lang/rust/pull/35267)\n+* [The `mips-unknown-linux-gnu` target uses hardware floating point by default](https://github.com/rust-lang/rust/pull/34910)\n * [The `rustc` arguments, `--print target-cpus`, `--print target-features`,\n   `--print relocation-models`, and `--print code-models` print the available\n   options to the `-C target-cpu`, `-C target-feature`, `-C relocation-model` and\n-  `-C code-model` code generation arguments]\n-  (https://github.com/rust-lang/rust/pull/34845)\n+  `-C code-model` code generation arguments](https://github.com/rust-lang/rust/pull/34845)\n * [`rustc` supports three new MUSL targets on ARM: `arm-unknown-linux-musleabi`,\n-  `arm-unknown-linux-musleabihf`, and `armv7-unknown-linux-musleabihf`]\n-  (https://github.com/rust-lang/rust/pull/35060).\n+  `arm-unknown-linux-musleabihf`, and `armv7-unknown-linux-musleabihf`](https://github.com/rust-lang/rust/pull/35060).\n   These targets produce statically-linked binaries. There are no binary release\n   builds yet though.\n \n Diagnostics\n -----------\n \n * [`rustc` presents a new, more readable error format, along with\n-  machine-readable JSON error output for use by IDEs]\n-  (https://github.com/rust-lang/rust/pull/35401).\n+  machine-readable JSON error output for use by IDEs](https://github.com/rust-lang/rust/pull/35401).\n   Most common editors supporting Rust have been updated to work with it. It was\n-  previously described [on the Rust blog]\n-  (https://blog.rust-lang.org/2016/08/10/Shape-of-errors-to-come.html).\n+  previously described [on the Rust blog](https://blog.rust-lang.org/2016/08/10/Shape-of-errors-to-come.html).\n * [In error descriptions, references are now described in plain English,\n-  instead of as \"&-ptr\"]\n-  (https://github.com/rust-lang/rust/pull/35611)\n+  instead of as \"&-ptr\"](https://github.com/rust-lang/rust/pull/35611)\n * [In error type descriptions, unknown numeric types are named `{integer}` or\n-  `{float}` instead of `_`]\n-  (https://github.com/rust-lang/rust/pull/35080)\n-* [`rustc` emits a clearer error when inner attributes follow a doc comment]\n-  (https://github.com/rust-lang/rust/pull/34676)\n+  `{float}` instead of `_`](https://github.com/rust-lang/rust/pull/35080)\n+* [`rustc` emits a clearer error when inner attributes follow a doc comment](https://github.com/rust-lang/rust/pull/34676)\n \n Language\n --------\n \n-* [`macro_rules!` invocations can be made within `macro_rules!` invocations]\n-  (https://github.com/rust-lang/rust/pull/34925)\n-* [`macro_rules!` meta-variables are hygienic]\n-  (https://github.com/rust-lang/rust/pull/35453)\n+* [`macro_rules!` invocations can be made within `macro_rules!` invocations](https://github.com/rust-lang/rust/pull/34925)\n+* [`macro_rules!` meta-variables are hygienic](https://github.com/rust-lang/rust/pull/35453)\n * [`macro_rules!` `tt` matchers can be reparsed correctly, making them much more\n-  useful]\n-  (https://github.com/rust-lang/rust/pull/34908)\n+  useful](https://github.com/rust-lang/rust/pull/34908)\n * [`macro_rules!` `stmt` matchers correctly consume the entire contents when\n-  inside non-braces invocations]\n-  (https://github.com/rust-lang/rust/pull/34886)\n+  inside non-braces invocations](https://github.com/rust-lang/rust/pull/34886)\n * [Semicolons are properly required as statement delimeters inside\n-  `macro_rules!` invocations]\n-  (https://github.com/rust-lang/rust/pull/34660)\n-* [`cfg_attr` works on `path` attributes]\n-  (https://github.com/rust-lang/rust/pull/34546)\n+  `macro_rules!` invocations](https://github.com/rust-lang/rust/pull/34660)\n+* [`cfg_attr` works on `path` attributes](https://github.com/rust-lang/rust/pull/34546)\n \n Stabilized APIs\n ---------------\n \n-* [`Cell::as_ptr`]\n-  (https://doc.rust-lang.org/std/cell/struct.Cell.html#method.as_ptr)\n-* [`RefCell::as_ptr`]\n-  (https://doc.rust-lang.org/std/cell/struct.RefCell.html#method.as_ptr)\n-* [`IpAddr::is_unspecified`]\n-  (https://doc.rust-lang.org/std/net/enum.IpAddr.html#method.is_unspecified)\n-* [`IpAddr::is_loopback`]\n-  (https://doc.rust-lang.org/std/net/enum.IpAddr.html#method.is_loopback)\n-* [`IpAddr::is_multicast`]\n-  (https://doc.rust-lang.org/std/net/enum.IpAddr.html#method.is_multicast)\n-* [`Ipv4Addr::is_unspecified`]\n-  (https://doc.rust-lang.org/std/net/struct.Ipv4Addr.html#method.is_unspecified)\n-* [`Ipv6Addr::octets`]\n-  (https://doc.rust-lang.org/std/net/struct.Ipv6Addr.html#method.octets)\n-* [`LinkedList::contains`]\n-  (https://doc.rust-lang.org/std/collections/linked_list/struct.LinkedList.html#method.contains)\n-* [`VecDeque::contains`]\n-  (https://doc.rust-lang.org/std/collections/vec_deque/struct.VecDeque.html#method.contains)\n-* [`ExitStatusExt::from_raw`]\n-  (https://doc.rust-lang.org/std/os/unix/process/trait.ExitStatusExt.html#tymethod.from_raw).\n+* [`Cell::as_ptr`](https://doc.rust-lang.org/std/cell/struct.Cell.html#method.as_ptr)\n+* [`RefCell::as_ptr`](https://doc.rust-lang.org/std/cell/struct.RefCell.html#method.as_ptr)\n+* [`IpAddr::is_unspecified`](https://doc.rust-lang.org/std/net/enum.IpAddr.html#method.is_unspecified)\n+* [`IpAddr::is_loopback`](https://doc.rust-lang.org/std/net/enum.IpAddr.html#method.is_loopback)\n+* [`IpAddr::is_multicast`](https://doc.rust-lang.org/std/net/enum.IpAddr.html#method.is_multicast)\n+* [`Ipv4Addr::is_unspecified`](https://doc.rust-lang.org/std/net/struct.Ipv4Addr.html#method.is_unspecified)\n+* [`Ipv6Addr::octets`](https://doc.rust-lang.org/std/net/struct.Ipv6Addr.html#method.octets)\n+* [`LinkedList::contains`](https://doc.rust-lang.org/std/collections/linked_list/struct.LinkedList.html#method.contains)\n+* [`VecDeque::contains`](https://doc.rust-lang.org/std/collections/vec_deque/struct.VecDeque.html#method.contains)\n+* [`ExitStatusExt::from_raw`](https://doc.rust-lang.org/std/os/unix/process/trait.ExitStatusExt.html#tymethod.from_raw).\n   Both on Unix and Windows.\n-* [`Receiver::recv_timeout`]\n-  (https://doc.rust-lang.org/std/sync/mpsc/struct.Receiver.html#method.recv_timeout)\n-* [`RecvTimeoutError`]\n-  (https://doc.rust-lang.org/std/sync/mpsc/enum.RecvTimeoutError.html)\n-* [`BinaryHeap::peek_mut`]\n-  (https://doc.rust-lang.org/std/collections/binary_heap/struct.BinaryHeap.html#method.peek_mut)\n-* [`PeekMut`]\n-  (https://doc.rust-lang.org/std/collections/binary_heap/struct.PeekMut.html)\n-* [`iter::Product`]\n-  (https://doc.rust-lang.org/std/iter/trait.Product.html)\n-* [`iter::Sum`]\n-  (https://doc.rust-lang.org/std/iter/trait.Sum.html)\n-* [`OccupiedEntry::remove_entry`]\n-  (https://doc.rust-lang.org/std/collections/btree_map/struct.OccupiedEntry.html#method.remove_entry)\n-* [`VacantEntry::into_key`]\n-  (https://doc.rust-lang.org/std/collections/btree_map/struct.VacantEntry.html#method.into_key)\n+* [`Receiver::recv_timeout`](https://doc.rust-lang.org/std/sync/mpsc/struct.Receiver.html#method.recv_timeout)\n+* [`RecvTimeoutError`](https://doc.rust-lang.org/std/sync/mpsc/enum.RecvTimeoutError.html)\n+* [`BinaryHeap::peek_mut`](https://doc.rust-lang.org/std/collections/binary_heap/struct.BinaryHeap.html#method.peek_mut)\n+* [`PeekMut`](https://doc.rust-lang.org/std/collections/binary_heap/struct.PeekMut.html)\n+* [`iter::Product`](https://doc.rust-lang.org/std/iter/trait.Product.html)\n+* [`iter::Sum`](https://doc.rust-lang.org/std/iter/trait.Sum.html)\n+* [`OccupiedEntry::remove_entry`](https://doc.rust-lang.org/std/collections/btree_map/struct.OccupiedEntry.html#method.remove_entry)\n+* [`VacantEntry::into_key`](https://doc.rust-lang.org/std/collections/btree_map/struct.VacantEntry.html#method.into_key)\n \n Libraries\n ---------\n \n * [The `format!` macro and friends now allow a single argument to be formatted\n-  in multiple styles]\n-  (https://github.com/rust-lang/rust/pull/33642)\n+  in multiple styles](https://github.com/rust-lang/rust/pull/33642)\n * [The lifetime bounds on `[T]::binary_search_by` and\n-  `[T]::binary_search_by_key` have been adjusted to be more flexible]\n-  (https://github.com/rust-lang/rust/pull/34762)\n-* [`Option` implements `From` for its contained type]\n-  (https://github.com/rust-lang/rust/pull/34828)\n-* [`Cell`, `RefCell` and `UnsafeCell` implement `From` for their contained type]\n-  (https://github.com/rust-lang/rust/pull/35392)\n-* [`RwLock` panics if the reader count overflows]\n-  (https://github.com/rust-lang/rust/pull/35378)\n-* [`vec_deque::Drain`, `hash_map::Drain` and `hash_set::Drain` are covariant]\n-  (https://github.com/rust-lang/rust/pull/35354)\n-* [`vec::Drain` and `binary_heap::Drain` are covariant]\n-  (https://github.com/rust-lang/rust/pull/34951)\n-* [`Cow<str>` implements `FromIterator` for `char`, `&str` and `String`]\n-  (https://github.com/rust-lang/rust/pull/35064)\n-* [Sockets on Linux are correctly closed in subprocesses via `SOCK_CLOEXEC`]\n-  (https://github.com/rust-lang/rust/pull/34946)\n+  `[T]::binary_search_by_key` have been adjusted to be more flexible](https://github.com/rust-lang/rust/pull/34762)\n+* [`Option` implements `From` for its contained type](https://github.com/rust-lang/rust/pull/34828)\n+* [`Cell`, `RefCell` and `UnsafeCell` implement `From` for their contained type](https://github.com/rust-lang/rust/pull/35392)\n+* [`RwLock` panics if the reader count overflows](https://github.com/rust-lang/rust/pull/35378)\n+* [`vec_deque::Drain`, `hash_map::Drain` and `hash_set::Drain` are covariant](https://github.com/rust-lang/rust/pull/35354)\n+* [`vec::Drain` and `binary_heap::Drain` are covariant](https://github.com/rust-lang/rust/pull/34951)\n+* [`Cow<str>` implements `FromIterator` for `char`, `&str` and `String`](https://github.com/rust-lang/rust/pull/35064)\n+* [Sockets on Linux are correctly closed in subprocesses via `SOCK_CLOEXEC`](https://github.com/rust-lang/rust/pull/34946)\n * [`hash_map::Entry`, `hash_map::VacantEntry` and `hash_map::OccupiedEntry`\n-  implement `Debug`]\n-  (https://github.com/rust-lang/rust/pull/34937)\n+  implement `Debug`](https://github.com/rust-lang/rust/pull/34937)\n * [`btree_map::Entry`, `btree_map::VacantEntry` and `btree_map::OccupiedEntry`\n-  implement `Debug`]\n-  (https://github.com/rust-lang/rust/pull/34885)\n-* [`String` implements `AddAssign`]\n-  (https://github.com/rust-lang/rust/pull/34890)\n+  implement `Debug`](https://github.com/rust-lang/rust/pull/34885)\n+* [`String` implements `AddAssign`](https://github.com/rust-lang/rust/pull/34890)\n * [Variadic `extern fn` pointers implement the `Clone`, `PartialEq`, `Eq`,\n-  `PartialOrd`, `Ord`, `Hash`, `fmt::Pointer`, and `fmt::Debug` traits]\n-  (https://github.com/rust-lang/rust/pull/34879)\n-* [`FileType` implements `Debug`]\n-  (https://github.com/rust-lang/rust/pull/34757)\n-* [References to `Mutex` and `RwLock` are unwind-safe]\n-  (https://github.com/rust-lang/rust/pull/34756)\n+  `PartialOrd`, `Ord`, `Hash`, `fmt::Pointer`, and `fmt::Debug` traits](https://github.com/rust-lang/rust/pull/34879)\n+* [`FileType` implements `Debug`](https://github.com/rust-lang/rust/pull/34757)\n+* [References to `Mutex` and `RwLock` are unwind-safe](https://github.com/rust-lang/rust/pull/34756)\n * [`mpsc::sync_channel` `Receiver`s return any available message before\n-  reporting a disconnect]\n-  (https://github.com/rust-lang/rust/pull/34731)\n-* [Unicode definitions have been updated to 9.0]\n-  (https://github.com/rust-lang/rust/pull/34599)\n-* [`env` iterators implement `DoubleEndedIterator`]\n-  (https://github.com/rust-lang/rust/pull/33312)\n+  reporting a disconnect](https://github.com/rust-lang/rust/pull/34731)\n+* [Unicode definitions have been updated to 9.0](https://github.com/rust-lang/rust/pull/34599)\n+* [`env` iterators implement `DoubleEndedIterator`](https://github.com/rust-lang/rust/pull/33312)\n \n Cargo\n -----\n \n-* [Support local mirrors of registries]\n-  (https://github.com/rust-lang/cargo/pull/2857)\n-* [Add support for command aliases]\n-  (https://github.com/rust-lang/cargo/pull/2679)\n-* [Allow `opt-level=\"s\"` / `opt-level=\"z\"` in profile overrides]\n-  (https://github.com/rust-lang/cargo/pull/3007)\n-* [Make `cargo doc --open --target` work as expected]\n-  (https://github.com/rust-lang/cargo/pull/2988)\n-* [Speed up noop registry updates]\n-  (https://github.com/rust-lang/cargo/pull/2974)\n-* [Update OpenSSL]\n-  (https://github.com/rust-lang/cargo/pull/2971)\n-* [Fix `--panic=abort` with plugins]\n-  (https://github.com/rust-lang/cargo/pull/2954)\n-* [Always pass `-C metadata` to the compiler]\n-  (https://github.com/rust-lang/cargo/pull/2946)\n-* [Fix depending on git repos with workspaces]\n-  (https://github.com/rust-lang/cargo/pull/2938)\n-* [Add a `--lib` flag to `cargo new`]\n-  (https://github.com/rust-lang/cargo/pull/2921)\n-* [Add `http.cainfo` for custom certs]\n-  (https://github.com/rust-lang/cargo/pull/2917)\n-* [Indicate the compilation profile after compiling]\n-  (https://github.com/rust-lang/cargo/pull/2909)\n-* [Allow enabling features for dependencies with `--features`]\n-  (https://github.com/rust-lang/cargo/pull/2876)\n-* [Add `--jobs` flag to `cargo package`]\n-  (https://github.com/rust-lang/cargo/pull/2867)\n-* [Add `--dry-run` to `cargo publish`]\n-  (https://github.com/rust-lang/cargo/pull/2849)\n-* [Add support for `RUSTDOCFLAGS`]\n-  (https://github.com/rust-lang/cargo/pull/2794)\n+* [Support local mirrors of registries](https://github.com/rust-lang/cargo/pull/2857)\n+* [Add support for command aliases](https://github.com/rust-lang/cargo/pull/2679)\n+* [Allow `opt-level=\"s\"` / `opt-level=\"z\"` in profile overrides](https://github.com/rust-lang/cargo/pull/3007)\n+* [Make `cargo doc --open --target` work as expected](https://github.com/rust-lang/cargo/pull/2988)\n+* [Speed up noop registry updates](https://github.com/rust-lang/cargo/pull/2974)\n+* [Update OpenSSL](https://github.com/rust-lang/cargo/pull/2971)\n+* [Fix `--panic=abort` with plugins](https://github.com/rust-lang/cargo/pull/2954)\n+* [Always pass `-C metadata` to the compiler](https://github.com/rust-lang/cargo/pull/2946)\n+* [Fix depending on git repos with workspaces](https://github.com/rust-lang/cargo/pull/2938)\n+* [Add a `--lib` flag to `cargo new`](https://github.com/rust-lang/cargo/pull/2921)\n+* [Add `http.cainfo` for custom certs](https://github.com/rust-lang/cargo/pull/2917)\n+* [Indicate the compilation profile after compiling](https://github.com/rust-lang/cargo/pull/2909)\n+* [Allow enabling features for dependencies with `--features`](https://github.com/rust-lang/cargo/pull/2876)\n+* [Add `--jobs` flag to `cargo package`](https://github.com/rust-lang/cargo/pull/2867)\n+* [Add `--dry-run` to `cargo publish`](https://github.com/rust-lang/cargo/pull/2849)\n+* [Add support for `RUSTDOCFLAGS`](https://github.com/rust-lang/cargo/pull/2794)\n \n Performance\n -----------\n \n-* [`panic::catch_unwind` is more optimized]\n-  (https://github.com/rust-lang/rust/pull/35444)\n-* [`panic::catch_unwind` no longer accesses thread-local storage on entry]\n-  (https://github.com/rust-lang/rust/pull/34866)\n+* [`panic::catch_unwind` is more optimized](https://github.com/rust-lang/rust/pull/35444)\n+* [`panic::catch_unwind` no longer accesses thread-local storage on entry](https://github.com/rust-lang/rust/pull/34866)\n \n Tooling\n -------\n \n * [Test binaries now support a `--test-threads` argument to specify the number\n   of threads used to run tests, and which acts the same as the\n-  `RUST_TEST_THREADS` environment variable]\n-  (https://github.com/rust-lang/rust/pull/35414)  \n-* [The test runner now emits a warning when tests run over 60 seconds]\n-  (https://github.com/rust-lang/rust/pull/35405)\n-* [rustdoc: Fix methods in search results]\n-  (https://github.com/rust-lang/rust/pull/34752)\n-* [`rust-lldb` warns about unsupported versions of LLDB]\n-  (https://github.com/rust-lang/rust/pull/34646)\n+  `RUST_TEST_THREADS` environment variable](https://github.com/rust-lang/rust/pull/35414)  \n+* [The test runner now emits a warning when tests run over 60 seconds](https://github.com/rust-lang/rust/pull/35405)\n+* [rustdoc: Fix methods in search results](https://github.com/rust-lang/rust/pull/34752)\n+* [`rust-lldb` warns about unsupported versions of LLDB](https://github.com/rust-lang/rust/pull/34646)\n * [Rust releases now come with source packages that can be installed by rustup\n-  via `rustup component add rust-src`]\n-  (https://github.com/rust-lang/rust/pull/34366).\n+  via `rustup component add rust-src`](https://github.com/rust-lang/rust/pull/34366).\n   The resulting source code can be used by tools and IDES, located in the\n   sysroot under `lib/rustlib/src`.\n \n Misc\n ----\n \n-* [The compiler can now be built against LLVM 3.9]\n-  (https://github.com/rust-lang/rust/pull/35594)\n+* [The compiler can now be built against LLVM 3.9](https://github.com/rust-lang/rust/pull/35594)\n * Many minor improvements to the documentation.\n-* [The Rust exception handling \"personality\" routine is now written in Rust]\n-  (https://github.com/rust-lang/rust/pull/34832)\n+* [The Rust exception handling \"personality\" routine is now written in Rust](https://github.com/rust-lang/rust/pull/34832)\n \n Compatibility Notes\n -------------------\n \n * [When printing Windows `OsStr`s, unpaired surrogate codepoints are escaped\n-  with the lowercase format instead of the uppercase]\n-  (https://github.com/rust-lang/rust/pull/35084)\n+  with the lowercase format instead of the uppercase](https://github.com/rust-lang/rust/pull/35084)\n * [When formatting strings, if \"precision\" is specified, the \"fill\",\n-  \"align\" and \"width\" specifiers are no longer ignored]\n-  (https://github.com/rust-lang/rust/pull/34544)\n-* [The `Debug` impl for strings no longer escapes all non-ASCII characters]\n-  (https://github.com/rust-lang/rust/pull/34485)\n+  \"align\" and \"width\" specifiers are no longer ignored](https://github.com/rust-lang/rust/pull/34544)\n+* [The `Debug` impl for strings no longer escapes all non-ASCII characters](https://github.com/rust-lang/rust/pull/34485)\n \n \n Version 1.11.0 (2016-08-18)\n@@ -1205,142 +1377,92 @@ Version 1.11.0 (2016-08-18)\n Language\n --------\n \n-* [`cfg_attr` works on `path` attributes]\n-  (https://github.com/rust-lang/rust/pull/34546)\n-* [Support nested `cfg_attr` attributes]\n-  (https://github.com/rust-lang/rust/pull/34216)\n-* [Allow statement-generating braced macro invocations at the end of blocks]\n-  (https://github.com/rust-lang/rust/pull/34436)\n-* [Macros can be expanded inside of trait definitions]\n-  (https://github.com/rust-lang/rust/pull/34213)\n-* [`#[macro_use]` works properly when it is itself expanded from a macro]\n-  (https://github.com/rust-lang/rust/pull/34032)\n+* [`cfg_attr` works on `path` attributes](https://github.com/rust-lang/rust/pull/34546)\n+* [Support nested `cfg_attr` attributes](https://github.com/rust-lang/rust/pull/34216)\n+* [Allow statement-generating braced macro invocations at the end of blocks](https://github.com/rust-lang/rust/pull/34436)\n+* [Macros can be expanded inside of trait definitions](https://github.com/rust-lang/rust/pull/34213)\n+* [`#[macro_use]` works properly when it is itself expanded from a macro](https://github.com/rust-lang/rust/pull/34032)\n \n Stabilized APIs\n ---------------\n \n-* [`BinaryHeap::append`]\n-  (https://doc.rust-lang.org/std/collections/binary_heap/struct.BinaryHeap.html#method.append)\n-* [`BTreeMap::append`]\n-  (https://doc.rust-lang.org/std/collections/btree_map/struct.BTreeMap.html#method.append)\n-* [`BTreeMap::split_off`]\n-  (https://doc.rust-lang.org/std/collections/btree_map/struct.BTreeMap.html#method.split_off)\n-* [`BTreeSet::append`]\n-  (https://doc.rust-lang.org/std/collections/btree_set/struct.BTreeSet.html#method.append)\n-* [`BTreeSet::split_off`]\n-  (https://doc.rust-lang.org/std/collections/btree_set/struct.BTreeSet.html#method.split_off)\n-* [`f32::to_degrees`]\n-  (https://doc.rust-lang.org/std/primitive.f32.html#method.to_degrees)\n+* [`BinaryHeap::append`](https://doc.rust-lang.org/std/collections/binary_heap/struct.BinaryHeap.html#method.append)\n+* [`BTreeMap::append`](https://doc.rust-lang.org/std/collections/btree_map/struct.BTreeMap.html#method.append)\n+* [`BTreeMap::split_off`](https://doc.rust-lang.org/std/collections/btree_map/struct.BTreeMap.html#method.split_off)\n+* [`BTreeSet::append`](https://doc.rust-lang.org/std/collections/btree_set/struct.BTreeSet.html#method.append)\n+* [`BTreeSet::split_off`](https://doc.rust-lang.org/std/collections/btree_set/struct.BTreeSet.html#method.split_off)\n+* [`f32::to_degrees`](https://doc.rust-lang.org/std/primitive.f32.html#method.to_degrees)\n   (in libcore - previously stabilized in libstd)\n-* [`f32::to_radians`]\n-  (https://doc.rust-lang.org/std/primitive.f32.html#method.to_radians)\n+* [`f32::to_radians`](https://doc.rust-lang.org/std/primitive.f32.html#method.to_radians)\n   (in libcore - previously stabilized in libstd)\n-* [`f64::to_degrees`]\n-  (https://doc.rust-lang.org/std/primitive.f64.html#method.to_degrees)\n+* [`f64::to_degrees`](https://doc.rust-lang.org/std/primitive.f64.html#method.to_degrees)\n   (in libcore - previously stabilized in libstd)\n-* [`f64::to_radians`]\n-  (https://doc.rust-lang.org/std/primitive.f64.html#method.to_radians)\n+* [`f64::to_radians`](https://doc.rust-lang.org/std/primitive.f64.html#method.to_radians)\n   (in libcore - previously stabilized in libstd)\n-* [`Iterator::sum`]\n-  (https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.sum)\n-* [`Iterator::product`]\n-  (https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.sum)\n-* [`Cell::get_mut`]\n-  (https://doc.rust-lang.org/std/cell/struct.Cell.html#method.get_mut)\n-* [`RefCell::get_mut`]\n-  (https://doc.rust-lang.org/std/cell/struct.RefCell.html#method.get_mut)\n+* [`Iterator::sum`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.sum)\n+* [`Iterator::product`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.sum)\n+* [`Cell::get_mut`](https://doc.rust-lang.org/std/cell/struct.Cell.html#method.get_mut)\n+* [`RefCell::get_mut`](https://doc.rust-lang.org/std/cell/struct.RefCell.html#method.get_mut)\n \n Libraries\n ---------\n \n * [The `thread_local!` macro supports multiple definitions in a single\n-   invocation, and can apply attributes]\n-  (https://github.com/rust-lang/rust/pull/34077)\n-* [`Cow` implements `Default`]\n-  (https://github.com/rust-lang/rust/pull/34305)\n+   invocation, and can apply attributes](https://github.com/rust-lang/rust/pull/34077)\n+* [`Cow` implements `Default`](https://github.com/rust-lang/rust/pull/34305)\n * [`Wrapping` implements binary, octal, lower-hex and upper-hex\n-  `Display` formatting]\n-  (https://github.com/rust-lang/rust/pull/34190)\n-* [The range types implement `Hash`]\n-  (https://github.com/rust-lang/rust/pull/34180)\n-* [`lookup_host` ignores unknown address types]\n-  (https://github.com/rust-lang/rust/pull/34067)\n-* [`assert_eq!` accepts a custom error message, like `assert!` does]\n-  (https://github.com/rust-lang/rust/pull/33976)\n-* [The main thread is now called \"main\" instead of \"&lt;main&gt;\"]\n-  (https://github.com/rust-lang/rust/pull/33803)\n+  `Display` formatting](https://github.com/rust-lang/rust/pull/34190)\n+* [The range types implement `Hash`](https://github.com/rust-lang/rust/pull/34180)\n+* [`lookup_host` ignores unknown address types](https://github.com/rust-lang/rust/pull/34067)\n+* [`assert_eq!` accepts a custom error message, like `assert!` does](https://github.com/rust-lang/rust/pull/33976)\n+* [The main thread is now called \"main\" instead of \"&lt;main&gt;\"](https://github.com/rust-lang/rust/pull/33803)\n \n Cargo\n -----\n \n-* [Disallow specifying features of transitive deps]\n-  (https://github.com/rust-lang/cargo/pull/2821)\n-* [Add color support for Windows consoles]\n-  (https://github.com/rust-lang/cargo/pull/2804)\n-* [Fix `harness = false` on `[lib]` sections]\n-  (https://github.com/rust-lang/cargo/pull/2795)\n-* [Don't panic when `links` contains a '.']\n-  (https://github.com/rust-lang/cargo/pull/2787)\n-* [Build scripts can emit warnings]\n-  (https://github.com/rust-lang/cargo/pull/2630),\n+* [Disallow specifying features of transitive deps](https://github.com/rust-lang/cargo/pull/2821)\n+* [Add color support for Windows consoles](https://github.com/rust-lang/cargo/pull/2804)\n+* [Fix `harness = false` on `[lib]` sections](https://github.com/rust-lang/cargo/pull/2795)\n+* [Don't panic when `links` contains a '.'](https://github.com/rust-lang/cargo/pull/2787)\n+* [Build scripts can emit warnings](https://github.com/rust-lang/cargo/pull/2630),\n   and `-vv` prints warnings for all crates.\n-* [Ignore file locks on OS X NFS mounts]\n-  (https://github.com/rust-lang/cargo/pull/2720)\n-* [Don't warn about `package.metadata` keys]\n-  (https://github.com/rust-lang/cargo/pull/2668).\n+* [Ignore file locks on OS X NFS mounts](https://github.com/rust-lang/cargo/pull/2720)\n+* [Don't warn about `package.metadata` keys](https://github.com/rust-lang/cargo/pull/2668).\n   This provides room for expansion by arbitrary tools.\n-* [Add support for cdylib crate types]\n-  (https://github.com/rust-lang/cargo/pull/2741)\n-* [Prevent publishing crates when files are dirty]\n-  (https://github.com/rust-lang/cargo/pull/2781)\n-* [Don't fetch all crates on clean]\n-  (https://github.com/rust-lang/cargo/pull/2704)\n-* [Propagate --color option to rustc]\n-  (https://github.com/rust-lang/cargo/pull/2779)\n-* [Fix `cargo doc --open` on Windows]\n-  (https://github.com/rust-lang/cargo/pull/2780)\n-* [Improve autocompletion]\n-  (https://github.com/rust-lang/cargo/pull/2772)\n-* [Configure colors of stderr as well as stdout]\n-  (https://github.com/rust-lang/cargo/pull/2739)\n+* [Add support for cdylib crate types](https://github.com/rust-lang/cargo/pull/2741)\n+* [Prevent publishing crates when files are dirty](https://github.com/rust-lang/cargo/pull/2781)\n+* [Don't fetch all crates on clean](https://github.com/rust-lang/cargo/pull/2704)\n+* [Propagate --color option to rustc](https://github.com/rust-lang/cargo/pull/2779)\n+* [Fix `cargo doc --open` on Windows](https://github.com/rust-lang/cargo/pull/2780)\n+* [Improve autocompletion](https://github.com/rust-lang/cargo/pull/2772)\n+* [Configure colors of stderr as well as stdout](https://github.com/rust-lang/cargo/pull/2739)\n \n Performance\n -----------\n \n * [Caching projections speeds up type check dramatically for some\n-  workloads]\n-  (https://github.com/rust-lang/rust/pull/33816)\n-* [The default `HashMap` hasher is SipHash 1-3 instead of SipHash 2-4]\n-  (https://github.com/rust-lang/rust/pull/33940)\n+  workloads](https://github.com/rust-lang/rust/pull/33816)\n+* [The default `HashMap` hasher is SipHash 1-3 instead of SipHash 2-4](https://github.com/rust-lang/rust/pull/33940)\n   This hasher is faster, but is believed to provide sufficient\n   protection from collision attacks.\n-* [Comparison of `Ipv4Addr` is 10x faster]\n-  (https://github.com/rust-lang/rust/pull/33891)\n+* [Comparison of `Ipv4Addr` is 10x faster](https://github.com/rust-lang/rust/pull/33891)\n \n Rustdoc\n -------\n \n-* [Fix empty implementation section on some module pages]\n-  (https://github.com/rust-lang/rust/pull/34536)\n-* [Fix inlined renamed reexports in import lists]\n-  (https://github.com/rust-lang/rust/pull/34479)\n-* [Fix search result layout for enum variants and struct fields]\n-  (https://github.com/rust-lang/rust/pull/34477)\n-* [Fix issues with source links to external crates]\n-  (https://github.com/rust-lang/rust/pull/34387)\n-* [Fix redirect pages for renamed reexports]\n-  (https://github.com/rust-lang/rust/pull/34245)\n+* [Fix empty implementation section on some module pages](https://github.com/rust-lang/rust/pull/34536)\n+* [Fix inlined renamed reexports in import lists](https://github.com/rust-lang/rust/pull/34479)\n+* [Fix search result layout for enum variants and struct fields](https://github.com/rust-lang/rust/pull/34477)\n+* [Fix issues with source links to external crates](https://github.com/rust-lang/rust/pull/34387)\n+* [Fix redirect pages for renamed reexports](https://github.com/rust-lang/rust/pull/34245)\n \n Tooling\n -------\n \n-* [rustc is better at finding the MSVC toolchain]\n-  (https://github.com/rust-lang/rust/pull/34492)\n+* [rustc is better at finding the MSVC toolchain](https://github.com/rust-lang/rust/pull/34492)\n * [When emitting debug info, rustc emits frame pointers for closures,\n-  shims and glue, as it does for all other functions]\n-  (https://github.com/rust-lang/rust/pull/33909)\n-* [rust-lldb warns about unsupported versions of LLDB]\n-  (https://github.com/rust-lang/rust/pull/34646)\n+  shims and glue, as it does for all other functions](https://github.com/rust-lang/rust/pull/33909)\n+* [rust-lldb warns about unsupported versions of LLDB](https://github.com/rust-lang/rust/pull/34646)\n * Many more errors have been given error codes and extended\n   explanations\n * API documentation continues to be improved, with many new examples\n@@ -1349,30 +1471,22 @@ Misc\n ----\n \n * [rustc no longer hangs when dependencies recursively re-export\n-  submodules]\n-  (https://github.com/rust-lang/rust/pull/34542)\n-* [rustc requires LLVM 3.7+]\n-  (https://github.com/rust-lang/rust/pull/34104)\n+  submodules](https://github.com/rust-lang/rust/pull/34542)\n+* [rustc requires LLVM 3.7+](https://github.com/rust-lang/rust/pull/34104)\n * [The 'How Safe and Unsafe Interact' chapter of The Rustonomicon was\n-  rewritten]\n-  (https://github.com/rust-lang/rust/pull/33895)\n-* [rustc support 16-bit pointer sizes]\n-  (https://github.com/rust-lang/rust/pull/33460).\n+  rewritten](https://github.com/rust-lang/rust/pull/33895)\n+* [rustc support 16-bit pointer sizes](https://github.com/rust-lang/rust/pull/33460).\n   No targets use this yet, but it works toward AVR support.\n \n Compatibility Notes\n -------------------\n \n-* [`const`s and `static`s may not have unsized types]\n-  (https://github.com/rust-lang/rust/pull/34443)\n+* [`const`s and `static`s may not have unsized types](https://github.com/rust-lang/rust/pull/34443)\n * [The new follow-set rules that place restrictions on `macro_rules!`\n-  in order to ensure syntax forward-compatibility have been enabled]\n-  (https://github.com/rust-lang/rust/pull/33982)\n-  This was an [ammendment to RFC 550]\n-  (https://github.com/rust-lang/rfcs/pull/1384),\n+  in order to ensure syntax forward-compatibility have been enabled](https://github.com/rust-lang/rust/pull/33982)\n+  This was an [ammendment to RFC 550](https://github.com/rust-lang/rfcs/pull/1384),\n   and has been a warning since 1.10.\n-* [`cfg` attribute process has been refactored to fix various bugs]\n-  (https://github.com/rust-lang/rust/pull/33706).\n+* [`cfg` attribute process has been refactored to fix various bugs](https://github.com/rust-lang/rust/pull/33706).\n   This causes breakage in some corner cases.\n \n \n@@ -1383,21 +1497,15 @@ Language\n --------\n \n * [Allow `concat_idents!` in type positions as well as in expression\n-  positions]\n-  (https://github.com/rust-lang/rust/pull/33735).\n-* [`Copy` types are required to have a trivial implementation of `Clone`]\n-  (https://github.com/rust-lang/rust/pull/33420).\n+  positions](https://github.com/rust-lang/rust/pull/33735).\n+* [`Copy` types are required to have a trivial implementation of `Clone`](https://github.com/rust-lang/rust/pull/33420).\n   [RFC 1521](https://github.com/rust-lang/rfcs/blob/master/text/1521-copy-clone-semantics.md).\n-* [Single-variant enums support the `#[repr(..)]` attribute]\n-  (https://github.com/rust-lang/rust/pull/33355).\n-* [Fix `#[derive(RustcEncodable)]` in the presence of other `encode` methods]\n-  (https://github.com/rust-lang/rust/pull/32908).\n+* [Single-variant enums support the `#[repr(..)]` attribute](https://github.com/rust-lang/rust/pull/33355).\n+* [Fix `#[derive(RustcEncodable)]` in the presence of other `encode` methods](https://github.com/rust-lang/rust/pull/32908).\n * [`panic!` can be converted to a runtime abort with the\n-  `-C panic=abort` flag]\n-  (https://github.com/rust-lang/rust/pull/32900).\n+  `-C panic=abort` flag](https://github.com/rust-lang/rust/pull/32900).\n   [RFC 1513](https://github.com/rust-lang/rfcs/blob/master/text/1513-less-unwinding.md).\n-* [Add a new crate type, 'cdylib']\n-  (https://github.com/rust-lang/rust/pull/33553).\n+* [Add a new crate type, 'cdylib'](https://github.com/rust-lang/rust/pull/33553).\n   cdylibs are dynamic libraries suitable for loading by non-Rust hosts.\n   [RFC 1510](https://github.com/rust-lang/rfcs/blob/master/text/1510-rdylib.md).\n   Note that Cargo does not yet directly support cdylibs.\n@@ -1411,242 +1519,146 @@ Stabilized APIs\n * `os::windows::fs::OpenOptionsExt::attributes`\n * `os::windows::fs::OpenOptionsExt::security_qos_flags`\n * `os::unix::fs::OpenOptionsExt::custom_flags`\n-* [`sync::Weak::new`]\n-  (http://doc.rust-lang.org/alloc/arc/struct.Weak.html#method.new)\n+* [`sync::Weak::new`](http://doc.rust-lang.org/alloc/arc/struct.Weak.html#method.new)\n * `Default for sync::Weak`\n-* [`panic::set_hook`]\n-  (http://doc.rust-lang.org/std/panic/fn.set_hook.html)\n-* [`panic::take_hook`]\n-  (http://doc.rust-lang.org/std/panic/fn.take_hook.html)\n-* [`panic::PanicInfo`]\n-  (http://doc.rust-lang.org/std/panic/struct.PanicInfo.html)\n-* [`panic::PanicInfo::payload`]\n-  (http://doc.rust-lang.org/std/panic/struct.PanicInfo.html#method.payload)\n-* [`panic::PanicInfo::location`]\n-  (http://doc.rust-lang.org/std/panic/struct.PanicInfo.html#method.location)\n-* [`panic::Location`]\n-  (http://doc.rust-lang.org/std/panic/struct.Location.html)\n-* [`panic::Location::file`]\n-  (http://doc.rust-lang.org/std/panic/struct.Location.html#method.file)\n-* [`panic::Location::line`]\n-  (http://doc.rust-lang.org/std/panic/struct.Location.html#method.line)\n-* [`ffi::CStr::from_bytes_with_nul`]\n-  (http://doc.rust-lang.org/std/ffi/struct.CStr.html#method.from_bytes_with_nul)\n-* [`ffi::CStr::from_bytes_with_nul_unchecked`]\n-  (http://doc.rust-lang.org/std/ffi/struct.CStr.html#method.from_bytes_with_nul_unchecked)\n-* [`ffi::FromBytesWithNulError`]\n-  (http://doc.rust-lang.org/std/ffi/struct.FromBytesWithNulError.html)\n-* [`fs::Metadata::modified`]\n-  (http://doc.rust-lang.org/std/fs/struct.Metadata.html#method.modified)\n-* [`fs::Metadata::accessed`]\n-  (http://doc.rust-lang.org/std/fs/struct.Metadata.html#method.accessed)\n-* [`fs::Metadata::created`]\n-  (http://doc.rust-lang.org/std/fs/struct.Metadata.html#method.created)\n+* [`panic::set_hook`](http://doc.rust-lang.org/std/panic/fn.set_hook.html)\n+* [`panic::take_hook`](http://doc.rust-lang.org/std/panic/fn.take_hook.html)\n+* [`panic::PanicInfo`](http://doc.rust-lang.org/std/panic/struct.PanicInfo.html)\n+* [`panic::PanicInfo::payload`](http://doc.rust-lang.org/std/panic/struct.PanicInfo.html#method.payload)\n+* [`panic::PanicInfo::location`](http://doc.rust-lang.org/std/panic/struct.PanicInfo.html#method.location)\n+* [`panic::Location`](http://doc.rust-lang.org/std/panic/struct.Location.html)\n+* [`panic::Location::file`](http://doc.rust-lang.org/std/panic/struct.Location.html#method.file)\n+* [`panic::Location::line`](http://doc.rust-lang.org/std/panic/struct.Location.html#method.line)\n+* [`ffi::CStr::from_bytes_with_nul`](http://doc.rust-lang.org/std/ffi/struct.CStr.html#method.from_bytes_with_nul)\n+* [`ffi::CStr::from_bytes_with_nul_unchecked`](http://doc.rust-lang.org/std/ffi/struct.CStr.html#method.from_bytes_with_nul_unchecked)\n+* [`ffi::FromBytesWithNulError`](http://doc.rust-lang.org/std/ffi/struct.FromBytesWithNulError.html)\n+* [`fs::Metadata::modified`](http://doc.rust-lang.org/std/fs/struct.Metadata.html#method.modified)\n+* [`fs::Metadata::accessed`](http://doc.rust-lang.org/std/fs/struct.Metadata.html#method.accessed)\n+* [`fs::Metadata::created`](http://doc.rust-lang.org/std/fs/struct.Metadata.html#method.created)\n * `sync::atomic::Atomic{Usize,Isize,Bool,Ptr}::compare_exchange`\n * `sync::atomic::Atomic{Usize,Isize,Bool,Ptr}::compare_exchange_weak`\n * `collections::{btree,hash}_map::{Occupied,Vacant,}Entry::key`\n * `os::unix::net::{UnixStream, UnixListener, UnixDatagram, SocketAddr}`\n-* [`SocketAddr::is_unnamed`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.SocketAddr.html#method.is_unnamed)\n-* [`SocketAddr::as_pathname`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.SocketAddr.html#method.as_pathname)\n-* [`UnixStream::connect`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.connect)\n-* [`UnixStream::pair`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.pair)\n-* [`UnixStream::try_clone`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.try_clone)\n-* [`UnixStream::local_addr`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.local_addr)\n-* [`UnixStream::peer_addr`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.peer_addr)\n-* [`UnixStream::set_read_timeout`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.read_timeout)\n-* [`UnixStream::set_write_timeout`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.write_timeout)\n-* [`UnixStream::read_timeout`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.read_timeout)\n-* [`UnixStream::write_timeout`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.write_timeout)\n-* [`UnixStream::set_nonblocking`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.set_nonblocking)\n-* [`UnixStream::take_error`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.take_error)\n-* [`UnixStream::shutdown`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.shutdown)\n+* [`SocketAddr::is_unnamed`](http://doc.rust-lang.org/std/os/unix/net/struct.SocketAddr.html#method.is_unnamed)\n+* [`SocketAddr::as_pathname`](http://doc.rust-lang.org/std/os/unix/net/struct.SocketAddr.html#method.as_pathname)\n+* [`UnixStream::connect`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.connect)\n+* [`UnixStream::pair`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.pair)\n+* [`UnixStream::try_clone`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.try_clone)\n+* [`UnixStream::local_addr`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.local_addr)\n+* [`UnixStream::peer_addr`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.peer_addr)\n+* [`UnixStream::set_read_timeout`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.read_timeout)\n+* [`UnixStream::set_write_timeout`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.write_timeout)\n+* [`UnixStream::read_timeout`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.read_timeout)\n+* [`UnixStream::write_timeout`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.write_timeout)\n+* [`UnixStream::set_nonblocking`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.set_nonblocking)\n+* [`UnixStream::take_error`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.take_error)\n+* [`UnixStream::shutdown`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.shutdown)\n * Read/Write/RawFd impls for `UnixStream`\n-* [`UnixListener::bind`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.bind)\n-* [`UnixListener::accept`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.accept)\n-* [`UnixListener::try_clone`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.try_clone)\n-* [`UnixListener::local_addr`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.local_addr)\n-* [`UnixListener::set_nonblocking`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.set_nonblocking)\n-* [`UnixListener::take_error`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.take_error)\n-* [`UnixListener::incoming`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.incoming)\n+* [`UnixListener::bind`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.bind)\n+* [`UnixListener::accept`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.accept)\n+* [`UnixListener::try_clone`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.try_clone)\n+* [`UnixListener::local_addr`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.local_addr)\n+* [`UnixListener::set_nonblocking`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.set_nonblocking)\n+* [`UnixListener::take_error`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.take_error)\n+* [`UnixListener::incoming`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.incoming)\n * RawFd impls for `UnixListener`\n-* [`UnixDatagram::bind`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.bind)\n-* [`UnixDatagram::unbound`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.unbound)\n-* [`UnixDatagram::pair`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.pair)\n-* [`UnixDatagram::connect`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.connect)\n-* [`UnixDatagram::try_clone`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.try_clone)\n-* [`UnixDatagram::local_addr`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.local_addr)\n-* [`UnixDatagram::peer_addr`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.peer_addr)\n-* [`UnixDatagram::recv_from`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.recv_from)\n-* [`UnixDatagram::recv`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.recv)\n-* [`UnixDatagram::send_to`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.send_to)\n-* [`UnixDatagram::send`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.send)\n-* [`UnixDatagram::set_read_timeout`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.set_read_timeout)\n-* [`UnixDatagram::set_write_timeout`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.set_write_timeout)\n-* [`UnixDatagram::read_timeout`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.read_timeout)\n-* [`UnixDatagram::write_timeout`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.write_timeout)\n-* [`UnixDatagram::set_nonblocking`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.set_nonblocking)\n-* [`UnixDatagram::take_error`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.take_error)\n-* [`UnixDatagram::shutdown`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.shutdown)\n+* [`UnixDatagram::bind`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.bind)\n+* [`UnixDatagram::unbound`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.unbound)\n+* [`UnixDatagram::pair`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.pair)\n+* [`UnixDatagram::connect`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.connect)\n+* [`UnixDatagram::try_clone`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.try_clone)\n+* [`UnixDatagram::local_addr`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.local_addr)\n+* [`UnixDatagram::peer_addr`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.peer_addr)\n+* [`UnixDatagram::recv_from`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.recv_from)\n+* [`UnixDatagram::recv`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.recv)\n+* [`UnixDatagram::send_to`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.send_to)\n+* [`UnixDatagram::send`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.send)\n+* [`UnixDatagram::set_read_timeout`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.set_read_timeout)\n+* [`UnixDatagram::set_write_timeout`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.set_write_timeout)\n+* [`UnixDatagram::read_timeout`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.read_timeout)\n+* [`UnixDatagram::write_timeout`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.write_timeout)\n+* [`UnixDatagram::set_nonblocking`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.set_nonblocking)\n+* [`UnixDatagram::take_error`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.take_error)\n+* [`UnixDatagram::shutdown`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.shutdown)\n * RawFd impls for `UnixDatagram`\n * `{BTree,Hash}Map::values_mut`\n-* [`<[_]>::binary_search_by_key`]\n-  (http://doc.rust-lang.org/beta/std/primitive.slice.html#method.binary_search_by_key)\n+* [`<[_]>::binary_search_by_key`](http://doc.rust-lang.org/beta/std/primitive.slice.html#method.binary_search_by_key)\n \n Libraries\n ---------\n \n-* [The `abs_sub` method of floats is deprecated]\n-  (https://github.com/rust-lang/rust/pull/33664).\n+* [The `abs_sub` method of floats is deprecated](https://github.com/rust-lang/rust/pull/33664).\n   The semantics of this minor method are subtle and probably not what\n   most people want.\n-* [Add implementation of Ord for Cell<T> and RefCell<T> where T: Ord]\n-  (https://github.com/rust-lang/rust/pull/33306).\n+* [Add implementation of Ord for Cell<T> and RefCell<T> where T: Ord](https://github.com/rust-lang/rust/pull/33306).\n * [On Linux, if `HashMap`s can't be initialized with `getrandom` they\n   will fall back to `/dev/urandom` temporarily to avoid blocking\n-  during early boot]\n-  (https://github.com/rust-lang/rust/pull/33086).\n-* [Implemented negation for wrapping numerals]\n-  (https://github.com/rust-lang/rust/pull/33067).\n-* [Implement `Clone` for `binary_heap::IntoIter`]\n-  (https://github.com/rust-lang/rust/pull/33050).\n-* [Implement `Display` and `Hash` for `std::num::Wrapping`]\n-  (https://github.com/rust-lang/rust/pull/33023).\n-* [Add `Default` implementation for `&CStr`, `CString`]\n-  (https://github.com/rust-lang/rust/pull/32990).\n-* [Implement `From<Vec<T>>` and `Into<Vec<T>>` for `VecDeque<T>`]\n-  (https://github.com/rust-lang/rust/pull/32866).\n+  during early boot](https://github.com/rust-lang/rust/pull/33086).\n+* [Implemented negation for wrapping numerals](https://github.com/rust-lang/rust/pull/33067).\n+* [Implement `Clone` for `binary_heap::IntoIter`](https://github.com/rust-lang/rust/pull/33050).\n+* [Implement `Display` and `Hash` for `std::num::Wrapping`](https://github.com/rust-lang/rust/pull/33023).\n+* [Add `Default` implementation for `&CStr`, `CString`](https://github.com/rust-lang/rust/pull/32990).\n+* [Implement `From<Vec<T>>` and `Into<Vec<T>>` for `VecDeque<T>`](https://github.com/rust-lang/rust/pull/32866).\n * [Implement `Default` for `UnsafeCell`, `fmt::Error`, `Condvar`,\n-  `Mutex`, `RwLock`]\n-  (https://github.com/rust-lang/rust/pull/32785).\n+  `Mutex`, `RwLock`](https://github.com/rust-lang/rust/pull/32785).\n \n Cargo\n -----\n-* [Cargo.toml supports the `profile.*.panic` option]\n-  (https://github.com/rust-lang/cargo/pull/2687).\n+* [Cargo.toml supports the `profile.*.panic` option](https://github.com/rust-lang/cargo/pull/2687).\n   This controls the runtime behavior of the `panic!` macro\n   and can be either \"unwind\" (the default), or \"abort\".\n   [RFC 1513](https://github.com/rust-lang/rfcs/blob/master/text/1513-less-unwinding.md).\n-* [Don't throw away errors with `-p` arguments]\n-  (https://github.com/rust-lang/cargo/pull/2723).\n-* [Report status to stderr instead of stdout]\n-  (https://github.com/rust-lang/cargo/pull/2693).\n+* [Don't throw away errors with `-p` arguments](https://github.com/rust-lang/cargo/pull/2723).\n+* [Report status to stderr instead of stdout](https://github.com/rust-lang/cargo/pull/2693).\n * [Build scripts are passed a `CARGO_MANIFEST_LINKS` environment\n-  variable that corresponds to the `links` field of the manifest]\n-  (https://github.com/rust-lang/cargo/pull/2710).\n-* [Ban keywords from crate names]\n-  (https://github.com/rust-lang/cargo/pull/2707).\n-* [Canonicalize `CARGO_HOME` on Windows]\n-  (https://github.com/rust-lang/cargo/pull/2604).\n-* [Retry network requests]\n-  (https://github.com/rust-lang/cargo/pull/2396).\n+  variable that corresponds to the `links` field of the manifest](https://github.com/rust-lang/cargo/pull/2710).\n+* [Ban keywords from crate names](https://github.com/rust-lang/cargo/pull/2707).\n+* [Canonicalize `CARGO_HOME` on Windows](https://github.com/rust-lang/cargo/pull/2604).\n+* [Retry network requests](https://github.com/rust-lang/cargo/pull/2396).\n   By default they are retried twice, which can be customized with the\n   `net.retry` value in `.cargo/config`.\n-* [Don't print extra error info for failing subcommands]\n-  (https://github.com/rust-lang/cargo/pull/2674).\n-* [Add `--force` flag to `cargo install`]\n-  (https://github.com/rust-lang/cargo/pull/2405).\n-* [Don't use `flock` on NFS mounts]\n-  (https://github.com/rust-lang/cargo/pull/2623).\n-* [Prefer building `cargo install` artifacts in temporary directories]\n-  (https://github.com/rust-lang/cargo/pull/2610).\n+* [Don't print extra error info for failing subcommands](https://github.com/rust-lang/cargo/pull/2674).\n+* [Add `--force` flag to `cargo install`](https://github.com/rust-lang/cargo/pull/2405).\n+* [Don't use `flock` on NFS mounts](https://github.com/rust-lang/cargo/pull/2623).\n+* [Prefer building `cargo install` artifacts in temporary directories](https://github.com/rust-lang/cargo/pull/2610).\n   Makes it possible to install multiple crates in parallel.\n-* [Add `cargo test --doc`]\n-  (https://github.com/rust-lang/cargo/pull/2578).\n-* [Add `cargo --explain`]\n-  (https://github.com/rust-lang/cargo/pull/2551).\n-* [Don't print warnings when `-q` is passed]\n-  (https://github.com/rust-lang/cargo/pull/2576).\n-* [Add `cargo doc --lib` and `--bin`]\n-  (https://github.com/rust-lang/cargo/pull/2577).\n-* [Don't require build script output to be UTF-8]\n-  (https://github.com/rust-lang/cargo/pull/2560).\n-* [Correctly attempt multiple git usernames]\n-  (https://github.com/rust-lang/cargo/pull/2584).\n+* [Add `cargo test --doc`](https://github.com/rust-lang/cargo/pull/2578).\n+* [Add `cargo --explain`](https://github.com/rust-lang/cargo/pull/2551).\n+* [Don't print warnings when `-q` is passed](https://github.com/rust-lang/cargo/pull/2576).\n+* [Add `cargo doc --lib` and `--bin`](https://github.com/rust-lang/cargo/pull/2577).\n+* [Don't require build script output to be UTF-8](https://github.com/rust-lang/cargo/pull/2560).\n+* [Correctly attempt multiple git usernames](https://github.com/rust-lang/cargo/pull/2584).\n \n Performance\n -----------\n \n * [rustc memory usage was reduced by refactoring the context used for\n-  type checking]\n-  (https://github.com/rust-lang/rust/pull/33425).\n+  type checking](https://github.com/rust-lang/rust/pull/33425).\n * [Speed up creation of `HashMap`s by caching the random keys used\n-  to initialize the hash state]\n-  (https://github.com/rust-lang/rust/pull/33318).\n-* [The `find` implementation for `Chain` iterators is 2x faster]\n-  (https://github.com/rust-lang/rust/pull/33289).\n-* [Trait selection optimizations speed up type checking by 15%]\n-  (https://github.com/rust-lang/rust/pull/33138).\n-* [Efficient trie lookup for boolean Unicode properties]\n-  (https://github.com/rust-lang/rust/pull/33098).\n+  to initialize the hash state](https://github.com/rust-lang/rust/pull/33318).\n+* [The `find` implementation for `Chain` iterators is 2x faster](https://github.com/rust-lang/rust/pull/33289).\n+* [Trait selection optimizations speed up type checking by 15%](https://github.com/rust-lang/rust/pull/33138).\n+* [Efficient trie lookup for boolean Unicode properties](https://github.com/rust-lang/rust/pull/33098).\n   10x faster than the previous lookup tables.\n-* [Special case `#[derive(Copy, Clone)]` to avoid bloat]\n-  (https://github.com/rust-lang/rust/pull/31414).\n+* [Special case `#[derive(Copy, Clone)]` to avoid bloat](https://github.com/rust-lang/rust/pull/31414).\n \n Usability\n ---------\n \n * Many incremental improvements to documentation and rustdoc.\n-* [rustdoc: List blanket trait impls]\n-  (https://github.com/rust-lang/rust/pull/33514).\n-* [rustdoc: Clean up ABI rendering]\n-  (https://github.com/rust-lang/rust/pull/33151).\n-* [Indexing with the wrong type produces a more informative error]\n-  (https://github.com/rust-lang/rust/pull/33401).\n-* [Improve diagnostics for constants being used in irrefutable patterns]\n-  (https://github.com/rust-lang/rust/pull/33406).\n-* [When many method candidates are in scope limit the suggestions to 10]\n-  (https://github.com/rust-lang/rust/pull/33338).\n-* [Remove confusing suggestion when calling a `fn` type]\n-  (https://github.com/rust-lang/rust/pull/33325).\n-* [Do not suggest changing `&mut self` to `&mut mut self`]\n-  (https://github.com/rust-lang/rust/pull/33319).\n+* [rustdoc: List blanket trait impls](https://github.com/rust-lang/rust/pull/33514).\n+* [rustdoc: Clean up ABI rendering](https://github.com/rust-lang/rust/pull/33151).\n+* [Indexing with the wrong type produces a more informative error](https://github.com/rust-lang/rust/pull/33401).\n+* [Improve diagnostics for constants being used in irrefutable patterns](https://github.com/rust-lang/rust/pull/33406).\n+* [When many method candidates are in scope limit the suggestions to 10](https://github.com/rust-lang/rust/pull/33338).\n+* [Remove confusing suggestion when calling a `fn` type](https://github.com/rust-lang/rust/pull/33325).\n+* [Do not suggest changing `&mut self` to `&mut mut self`](https://github.com/rust-lang/rust/pull/33319).\n \n Misc\n ----\n \n-* [Update i686-linux-android features to match Android ABI]\n-  (https://github.com/rust-lang/rust/pull/33651).\n-* [Update aarch64-linux-android features to match Android ABI]\n-  (https://github.com/rust-lang/rust/pull/33500).\n+* [Update i686-linux-android features to match Android ABI](https://github.com/rust-lang/rust/pull/33651).\n+* [Update aarch64-linux-android features to match Android ABI](https://github.com/rust-lang/rust/pull/33500).\n * [`std` no longer prints backtraces on platforms where the running\n   module must be loaded with `env::current_exe`, which can't be relied\n   on](https://github.com/rust-lang/rust/pull/33554).\n@@ -1657,34 +1669,24 @@ Misc\n * [The `rust-gdb` and `rust-lldb` scripts are distributed on all\n   Unix platforms](https://github.com/rust-lang/rust/pull/32835).\n * [On Unix the runtime aborts by calling `libc::abort` instead of\n-  generating an illegal instruction]\n-  (https://github.com/rust-lang/rust/pull/31457).\n+  generating an illegal instruction](https://github.com/rust-lang/rust/pull/31457).\n * [Rust is now bootstrapped from the previous release of Rust,\n-  instead of a snapshot from an arbitrary commit]\n-  (https://github.com/rust-lang/rust/pull/32942).\n+  instead of a snapshot from an arbitrary commit](https://github.com/rust-lang/rust/pull/32942).\n \n Compatibility Notes\n -------------------\n \n-* [`AtomicBool` is now bool-sized, not word-sized]\n-  (https://github.com/rust-lang/rust/pull/33579).\n+* [`AtomicBool` is now bool-sized, not word-sized](https://github.com/rust-lang/rust/pull/33579).\n * [`target_env` for Linux ARM targets is just `gnu`, not\n-  `gnueabihf`, `gnueabi`, etc]\n-  (https://github.com/rust-lang/rust/pull/33403).\n-* [Consistently panic on overflow in `Duration::new`]\n-  (https://github.com/rust-lang/rust/pull/33072).\n-* [Change `String::truncate` to panic less]\n-  (https://github.com/rust-lang/rust/pull/32977).\n-* [Add `:block` to the follow set for `:ty` and `:path`]\n-  (https://github.com/rust-lang/rust/pull/32945).\n+  `gnueabihf`, `gnueabi`, etc](https://github.com/rust-lang/rust/pull/33403).\n+* [Consistently panic on overflow in `Duration::new`](https://github.com/rust-lang/rust/pull/33072).\n+* [Change `String::truncate` to panic less](https://github.com/rust-lang/rust/pull/32977).\n+* [Add `:block` to the follow set for `:ty` and `:path`](https://github.com/rust-lang/rust/pull/32945).\n   Affects how macros are parsed.\n-* [Fix macro hygiene bug]\n-  (https://github.com/rust-lang/rust/pull/32923).\n+* [Fix macro hygiene bug](https://github.com/rust-lang/rust/pull/32923).\n * [Feature-gated attributes on macro-generated macro invocations are\n-  now rejected]\n-  (https://github.com/rust-lang/rust/pull/32791).\n-* [Suppress fallback and ambiguity errors during type inference]\n-  (https://github.com/rust-lang/rust/pull/32258).\n+  now rejected](https://github.com/rust-lang/rust/pull/32791).\n+* [Suppress fallback and ambiguity errors during type inference](https://github.com/rust-lang/rust/pull/32258).\n   This caused some minor changes to type inference.\n \n "}, {"sha": "96de1d90f25e623319f3defd8e2e5e2c0cceb2fe", "filename": "appveyor.yml", "status": "modified", "additions": 38, "deletions": 34, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/appveyor.yml", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/appveyor.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/appveyor.yml?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -20,39 +20,28 @@ environment:\n \n   # 32/64-bit MinGW builds.\n   #\n-  # The MinGW builds unfortunately have to both download a custom toolchain and\n-  # avoid the one installed by AppVeyor by default. Interestingly, though, for\n-  # different reasons!\n+  # We are using MinGW with posix threads since LLVM does not compile with\n+  # the win32 threads version due to missing support for C++'s std::thread.\n   #\n-  # For 32-bit the installed gcc toolchain on AppVeyor uses the pthread\n-  # threading model. This is unfortunately not what we want, and if we compile\n-  # with it then there's lots of link errors in the standard library (undefined\n-  # references to pthread symbols).\n-  #\n-  # For 64-bit the installed gcc toolchain is currently 5.3.0 which\n-  # unfortunately segfaults on Windows with --enable-llvm-assertions (segfaults\n-  # in LLVM). See rust-lang/rust#28445 for more information, but to work around\n-  # this we go back in time to 4.9.2 specifically.\n+  # Instead of relying on the MinGW version installed on appveryor we download\n+  # and install one ourselves so we won't be surprised by changes to appveyor's\n+  # build image.\n   #\n   # Finally, note that the downloads below are all in the `rust-lang-ci` S3\n   # bucket, but they cleraly didn't originate there! The downloads originally\n   # came from the mingw-w64 SourceForge download site. Unfortunately\n   # SourceForge is notoriously flaky, so we mirror it on our own infrastructure.\n-  #\n-  # And as a final point of note, the 32-bit MinGW build using the makefiles do\n-  # *not* use debug assertions and llvm assertions. This is because they take\n-  # too long on appveyor and this is tested by rustbuild below.\n   - MSYS_BITS: 32\n-    RUST_CONFIGURE_ARGS: --build=i686-pc-windows-gnu --enable-ninja\n+    RUST_CONFIGURE_ARGS: --build=i686-pc-windows-gnu\n     SCRIPT: python x.py test\n     MINGW_URL: https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror\n-    MINGW_ARCHIVE: i686-6.2.0-release-win32-dwarf-rt_v5-rev1.7z\n+    MINGW_ARCHIVE: i686-6.3.0-release-posix-dwarf-rt_v5-rev2.7z\n     MINGW_DIR: mingw32\n   - MSYS_BITS: 64\n     SCRIPT: python x.py test\n-    RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-gnu --enable-ninja\n+    RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-gnu\n     MINGW_URL: https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror\n-    MINGW_ARCHIVE: x86_64-6.2.0-release-win32-seh-rt_v5-rev1.7z\n+    MINGW_ARCHIVE: x86_64-6.3.0-release-posix-seh-rt_v5-rev2.7z\n     MINGW_DIR: mingw64\n \n   # 32/64 bit MSVC and GNU deployment\n@@ -68,17 +57,17 @@ environment:\n     SCRIPT: python x.py dist\n     DEPLOY: 1\n   - MSYS_BITS: 32\n-    RUST_CONFIGURE_ARGS: --build=i686-pc-windows-gnu --enable-extended --enable-ninja\n+    RUST_CONFIGURE_ARGS: --build=i686-pc-windows-gnu --enable-extended\n     SCRIPT: python x.py dist\n     MINGW_URL: https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror\n-    MINGW_ARCHIVE: i686-6.2.0-release-win32-dwarf-rt_v5-rev1.7z\n+    MINGW_ARCHIVE: i686-6.3.0-release-posix-dwarf-rt_v5-rev2.7z\n     MINGW_DIR: mingw32\n     DEPLOY: 1\n   - MSYS_BITS: 64\n     SCRIPT: python x.py dist\n-    RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-gnu --enable-extended --enable-ninja\n+    RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-gnu --enable-extended\n     MINGW_URL: https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror\n-    MINGW_ARCHIVE: x86_64-6.2.0-release-win32-seh-rt_v5-rev1.7z\n+    MINGW_ARCHIVE: x86_64-6.3.0-release-posix-seh-rt_v5-rev2.7z\n     MINGW_DIR: mingw64\n     DEPLOY: 1\n \n@@ -107,6 +96,26 @@ install:\n   - if defined MINGW_URL 7z x -y %MINGW_ARCHIVE% > nul\n   - if defined MINGW_URL set PATH=%CD%\\%MINGW_DIR%\\bin;C:\\msys64\\usr\\bin;%PATH%\n \n+  # Here we do a pretty heinous thing which is to mangle the MinGW installation\n+  # we just had above. Currently, as of this writing, we're using MinGW-w64\n+  # builds of gcc, and that's currently at 6.3.0. We use 6.3.0 as it appears to\n+  # be the first version which contains a fix for #40546, builds randomly\n+  # failing during LLVM due to ar.exe/ranlib.exe failures.\n+  #\n+  # Unfortunately, though, 6.3.0 *also* is the first version of MinGW-w64 builds\n+  # to contain a regression in gdb (#40184). As a result if we were to use the\n+  # gdb provided (7.11.1) then we would fail all debuginfo tests.\n+  #\n+  # In order to fix spurious failures (pretty high priority) we use 6.3.0. To\n+  # avoid disabling gdb tests we download an *old* version of gdb, specifically\n+  # that found inside the 6.2.0 distribution. We then overwrite the 6.3.0 gdb\n+  # with the 6.2.0 gdb to get tests passing.\n+  #\n+  # Note that we don't literally overwrite the gdb.exe binary because it appears\n+  # to just use gdborig.exe, so that's the binary we deal with instead.\n+  - if defined MINGW_URL appveyor-retry appveyor DownloadFile %MINGW_URL%/2017-04-20-%MSYS_BITS%bit-gdborig.exe\n+  - if defined MINGW_URL mv 2017-04-20-%MSYS_BITS%bit-gdborig.exe %MINGW_DIR%\\bin\\gdborig.exe\n+\n   # Otherwise pull in the MinGW installed on appveyor\n   - if NOT defined MINGW_URL set PATH=C:\\msys64\\mingw%MSYS_BITS%\\bin;C:\\msys64\\usr\\bin;%PATH%\n \n@@ -115,25 +124,26 @@ install:\n   - set PATH=C:\\Python27;%PATH%\n \n   # Download and install sccache\n-  - appveyor-retry appveyor DownloadFile https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-pc-windows-msvc\n-  - mv 2017-04-04-sccache-x86_64-pc-windows-msvc sccache.exe\n+  - appveyor-retry appveyor DownloadFile https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-pc-windows-msvc\n+  - mv 2017-05-12-sccache-x86_64-pc-windows-msvc sccache.exe\n   - set PATH=%PATH%;%CD%\n \n   # Download and install ninja\n   #\n   # Note that this is originally from the github releases patch of Ninja\n   - appveyor-retry appveyor DownloadFile https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-15-ninja-win.zip\n   - 7z x 2017-03-15-ninja-win.zip\n+  - set RUST_CONFIGURE_ARGS=%RUST_CONFIGURE_ARGS% --enable-ninja\n   # - set PATH=%PATH%;%CD% -- this already happens above for sccache\n \n   # Install InnoSetup to get `iscc` used to produce installers\n   - appveyor-retry choco install -y InnoSetup\n   - set PATH=\"C:\\Program Files (x86)\\Inno Setup 5\";%PATH%\n \n   # Help debug some handle issues on AppVeyor\n-  - ps: Invoke-WebRequest -Uri https://download.sysinternals.com/files/Handle.zip -OutFile handle.zip\n+  - appveyor-retry appveyor DownloadFile https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-15-Handle.zip\n   - mkdir handle\n-  - ps: Expand-Archive handle.zip -dest handle\n+  - 7z x -ohandle 2017-05-15-Handle.zip\n   - set PATH=%PATH%;%CD%\\handle\n   - handle.exe -accepteula -help\n \n@@ -150,12 +160,6 @@ test_script:\n on_failure:\n   - cat %CD%\\sccache.log || exit 0\n \n-cache:\n-  - \"build/i686-pc-windows-msvc/llvm -> src/rustllvm/llvm-rebuild-trigger\"\n-  - \"build/x86_64-pc-windows-msvc/llvm -> src/rustllvm/llvm-rebuild-trigger\"\n-  - \"i686-pc-windows-msvc/llvm -> src/rustllvm/llvm-rebuild-trigger\"\n-  - \"x86_64-pc-windows-msvc/llvm -> src/rustllvm/llvm-rebuild-trigger\"\n-\n branches:\n   only:\n     - auto"}, {"sha": "8326a3683a9045d825e4fdc4021af340ee3b3755", "filename": "cargo", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo?ref=158b085f06a41004ebf36d87afa3548f8b60861a", "patch": "@@ -1 +0,0 @@\n-Subproject commit 8326a3683a9045d825e4fdc4021af340ee3b3755"}, {"sha": "af59d5b0bb88977d2c512af7fa1f1c096ed398ea", "filename": "configure", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/configure", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -510,7 +510,6 @@ valopt default-ar     \"ar\" \"the default ar\"\n opt_nosave manage-submodules 1 \"let the build manage the git submodules\"\n opt_nosave clang 0 \"prefer clang to gcc for building the runtime\"\n opt_nosave jemalloc 1 \"build liballoc with jemalloc\"\n-opt elf-tls 1 \"elf thread local storage on platforms where supported\"\n opt full-bootstrap 0 \"build three compilers instead of two\"\n opt extended 0 \"build an extended rust tool set\"\n \n@@ -520,6 +519,7 @@ valopt_nosave host \"${CFG_BUILD}\" \"GNUs ./configure syntax LLVM host triples\"\n valopt_nosave target \"${CFG_HOST}\" \"GNUs ./configure syntax LLVM target triples\"\n valopt_nosave mandir \"${CFG_PREFIX}/share/man\" \"install man pages in PATH\"\n valopt_nosave docdir \"${CFG_PREFIX}/share/doc/rust\" \"install documentation in PATH\"\n+valopt_nosave bindir \"${CFG_PREFIX}/bin\" \"install binaries\"\n \n # On Windows this determines root of the subtree for target libraries.\n # Host runtime libs always go to 'bin'.\n@@ -711,6 +711,7 @@ envopt LDFLAGS\n CFG_PREFIX=${CFG_PREFIX%/}\n CFG_MANDIR=${CFG_MANDIR%/}\n CFG_DOCDIR=${CFG_DOCDIR%/}\n+CFG_BINDIR=${CFG_BINDIR%/}\n CFG_HOST=\"$(echo $CFG_HOST | tr ',' ' ')\"\n CFG_TARGET=\"$(echo $CFG_TARGET | tr ',' ' ')\"\n \n@@ -751,6 +752,7 @@ putvar CFG_X86_64_LINUX_ANDROID_NDK\n putvar CFG_NACL_CROSS_PATH\n putvar CFG_MANDIR\n putvar CFG_DOCDIR\n+putvar CFG_BINDIR\n putvar CFG_USING_LIBCPP\n \n msg"}, {"sha": "6ecff95fdc3ee7ceed2b9b0cc1a3a64876860bce", "filename": "rls", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rls?ref=158b085f06a41004ebf36d87afa3548f8b60861a", "patch": "@@ -1 +0,0 @@\n-Subproject commit 6ecff95fdc3ee7ceed2b9b0cc1a3a64876860bce"}, {"sha": "804fd5807735f619c6cc62a7e01fd4665f3e2602", "filename": "src/Cargo.lock", "status": "modified", "additions": 1275, "deletions": 115, "changes": 1390, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -6,6 +6,23 @@ dependencies = [\n  \"libc 0.0.0\",\n ]\n \n+[[package]]\n+name = \"advapi32-sys\"\n+version = \"0.2.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"aho-corasick\"\n+version = \"0.5.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"memchr 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"aho-corasick\"\n version = \"0.6.3\"\n@@ -27,7 +44,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"build_helper 0.1.0\",\n  \"core 0.0.0\",\n- \"gcc 0.3.45 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.46 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.0.0\",\n ]\n \n@@ -49,20 +66,38 @@ name = \"arena\"\n version = \"0.0.0\"\n \n [[package]]\n-name = \"atty\"\n-version = \"0.2.2\"\n+name = \"backtrace\"\n+version = \"0.3.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n+ \"backtrace-sys 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cfg-if 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"dbghelp-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-demangle 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"backtrace-sys\"\n+version = \"0.1.10\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"gcc 0.3.46 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"bitflags\"\n version = \"0.5.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"bitflags\"\n+version = \"0.7.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"bitflags\"\n version = \"0.8.2\"\n@@ -73,21 +108,26 @@ name = \"bootstrap\"\n version = \"0.0.0\"\n dependencies = [\n  \"build_helper 0.1.0\",\n- \"cmake 0.1.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cmake 0.1.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"gcc 0.3.45 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.46 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"num_cpus 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-serialize 0.3.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num_cpus 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.1.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"bufstream\"\n+version = \"0.1.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"build-manifest\"\n version = \"0.1.0\"\n dependencies = [\n- \"rustc-serialize 0.3.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.1.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -98,31 +138,118 @@ dependencies = [\n  \"filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"cargo\"\n+version = \"0.20.0\"\n+source = \"git+https://github.com/rust-lang/cargo#2b32084293d8da63b48de56363a0f2e986ec3367\"\n+replace = \"cargo 0.20.0\"\n+\n+[[package]]\n+name = \"cargo\"\n+version = \"0.20.0\"\n+dependencies = [\n+ \"advapi32-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bufstream 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cargotest 0.1.0\",\n+ \"chrono 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"crates-io 0.9.0\",\n+ \"crossbeam 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"curl 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"docopt 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"env_logger 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"flate2 0.2.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"fs2 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"git2 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"git2-curl 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"glob 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"hamcrest 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libgit2-sys 0.6.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"miow 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num_cpus 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"openssl 0.9.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"psapi-sys 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"semver 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_ignored 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"shell-escape 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"tar 0.4.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"tempdir 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"term 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"toml 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"url 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"cargotest\"\n+version = \"0.1.0\"\n+dependencies = [\n+ \"bufstream 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cargo 0.20.0\",\n+ \"filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"flate2 0.2.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"git2 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"hamcrest 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"tar 0.4.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"tempdir 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"term 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"url 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"cargotest2\"\n version = \"0.1.0\"\n \n+[[package]]\n+name = \"cfg-if\"\n+version = \"0.1.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"chrono\"\n+version = \"0.3.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"num 0.1.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"time 0.1.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"clap\"\n-version = \"2.22.1\"\n+version = \"2.19.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"ansi_term 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"atty 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"bitflags 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"strsim 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bitflags 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"strsim 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"term_size 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"unicode-segmentation 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-segmentation 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-width 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"vec_map 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"vec_map 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"yaml-rust 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"cmake\"\n-version = \"0.1.22\"\n+version = \"0.1.23\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"gcc 0.3.45 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.46 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -140,28 +267,126 @@ version = \"0.0.0\"\n dependencies = [\n  \"build_helper 0.1.0\",\n  \"core 0.0.0\",\n- \"gcc 0.3.45 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.46 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"compiletest\"\n version = \"0.0.0\"\n dependencies = [\n+ \"diff 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"env_logger 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-serialize 0.3.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"core\"\n version = \"0.0.0\"\n \n+[[package]]\n+name = \"crates-io\"\n+version = \"0.9.0\"\n+dependencies = [\n+ \"curl 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"url 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"crossbeam\"\n+version = \"0.2.10\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"curl\"\n+version = \"0.4.6\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"curl-sys 0.3.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"openssl-probe 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"openssl-sys 0.9.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"curl-sys\"\n+version = \"0.3.11\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"gcc 0.3.46 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libz-sys 1.0.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"openssl-sys 0.9.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"pkg-config 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"dbghelp-sys\"\n+version = \"0.2.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"derive-new\"\n+version = \"0.3.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"quote 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.8.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"diff\"\n+version = \"0.1.10\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"docopt\"\n+version = \"0.7.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"lazy_static 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"strsim 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"dtoa\"\n version = \"0.4.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"either\"\n+version = \"1.1.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"enum_primitive\"\n+version = \"0.1.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"num-traits 0.1.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"env_logger\"\n+version = \"0.3.5\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 0.1.80 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"env_logger\"\n version = \"0.4.2\"\n@@ -171,6 +396,14 @@ dependencies = [\n  \"regex 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"error-chain\"\n+version = \"0.10.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"backtrace 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"error_index_generator\"\n version = \"0.0.0\"\n@@ -180,25 +413,58 @@ name = \"filetime\"\n version = \"0.1.10\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"flate\"\n version = \"0.0.0\"\n dependencies = [\n  \"build_helper 0.1.0\",\n- \"gcc 0.3.45 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.46 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"flate2\"\n+version = \"0.2.19\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"miniz-sys 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"fmt_macros\"\n version = \"0.0.0\"\n \n+[[package]]\n+name = \"foreign-types\"\n+version = \"0.2.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"fs2\"\n+version = \"0.4.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"gcc\"\n-version = \"0.3.45\"\n+version = \"0.3.46\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"gdi32-sys\"\n+version = \"0.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n \n [[package]]\n name = \"getopts\"\n@@ -209,22 +475,93 @@ name = \"getopts\"\n version = \"0.2.14\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"git2\"\n+version = \"0.6.5\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"bitflags 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libgit2-sys 0.6.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"openssl-probe 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"openssl-sys 0.9.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"url 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"git2-curl\"\n+version = \"0.7.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"curl 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"git2 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"url 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"glob\"\n+version = \"0.2.11\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"graphviz\"\n version = \"0.0.0\"\n \n+[[package]]\n+name = \"hamcrest\"\n+version = \"0.1.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"num 0.1.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 0.1.80 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"handlebars\"\n-version = \"0.25.2\"\n+version = \"0.25.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"lazy_static 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pest 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"quick-error 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quick-error 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-serialize 0.3.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_json 0.9.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 0.9.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"idna\"\n+version = \"0.1.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"matches 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-bidi 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-normalization 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"installer\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"clap 2.19.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"error-chain 0.10.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"flate2 0.2.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"tar 0.4.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"walkdir 1.0.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"xz2 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"itertools\"\n+version = \"0.5.10\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"either 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -241,9 +578,22 @@ dependencies = [\n  \"winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"languageserver-types\"\n+version = \"0.10.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"enum_primitive 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"url 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"url_serde 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"lazy_static\"\n-version = \"0.2.5\"\n+version = \"0.2.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -255,8 +605,45 @@ dependencies = [\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.21\"\n+version = \"0.2.22\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"libgit2-sys\"\n+version = \"0.6.10\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"cmake 0.1.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"curl-sys 0.3.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.46 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libssh2-sys 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libz-sys 1.0.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"openssl-sys 0.9.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"pkg-config 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"libssh2-sys\"\n+version = \"0.2.6\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"cmake 0.1.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libz-sys 1.0.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"openssl-sys 0.9.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"pkg-config 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"libz-sys\"\n+version = \"1.0.13\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"gcc 0.3.46 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"pkg-config 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n \n [[package]]\n name = \"linkchecker\"\n@@ -267,70 +654,233 @@ name = \"log\"\n version = \"0.3.7\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"lzma-sys\"\n+version = \"0.1.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.46 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"matches\"\n+version = \"0.1.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"mdbook\"\n-version = \"0.0.19\"\n+version = \"0.0.21\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"clap 2.22.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"clap 2.19.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"env_logger 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"handlebars 0.25.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"handlebars 0.25.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"open 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pulldown-cmark 0.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 0.9.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_json 0.9.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"toml 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 0.9.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 0.9.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"toml 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"memchr\"\n+version = \"0.1.11\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"memchr\"\n version = \"1.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n-name = \"num-traits\"\n-version = \"0.1.37\"\n+name = \"miniz-sys\"\n+version = \"0.1.9\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"gcc 0.3.46 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n \n [[package]]\n-name = \"num_cpus\"\n-version = \"0.2.13\"\n+name = \"miow\"\n+version = \"0.2.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"net2 0.2.29 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"ws2_32-sys 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n-name = \"open\"\n-version = \"1.2.0\"\n+name = \"multimap\"\n+version = \"0.3.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n-name = \"panic_abort\"\n-version = \"0.0.0\"\n+name = \"net2\"\n+version = \"0.2.29\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"core 0.0.0\",\n- \"libc 0.0.0\",\n+ \"cfg-if 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"ws2_32-sys 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n-name = \"panic_unwind\"\n-version = \"0.0.0\"\n+name = \"num\"\n+version = \"0.1.37\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"alloc 0.0.0\",\n- \"core 0.0.0\",\n- \"libc 0.0.0\",\n- \"unwind 0.0.0\",\n+ \"num-bigint 0.1.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num-complex 0.1.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num-integer 0.1.34 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num-iter 0.1.33 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num-rational 0.1.36 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num-traits 0.1.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n-name = \"pest\"\n-version = \"0.3.3\"\n+name = \"num-bigint\"\n+version = \"0.1.37\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"num-integer 0.1.34 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num-traits 0.1.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"num-complex\"\n+version = \"0.1.37\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"num-traits 0.1.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"num-integer\"\n+version = \"0.1.34\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"num-traits 0.1.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"num-iter\"\n+version = \"0.1.33\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"num-integer 0.1.34 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num-traits 0.1.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"num-rational\"\n+version = \"0.1.36\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"num-bigint 0.1.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num-integer 0.1.34 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num-traits 0.1.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"num-traits\"\n+version = \"0.1.37\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"num_cpus\"\n+version = \"1.4.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"open\"\n+version = \"1.2.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"openssl\"\n+version = \"0.9.12\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"bitflags 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"foreign-types 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"openssl-sys 0.9.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"openssl-probe\"\n+version = \"0.1.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"openssl-sys\"\n+version = \"0.9.12\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"gcc 0.3.46 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gdi32-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"pkg-config 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"user32-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"owning_ref\"\n+version = \"0.3.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"stable_deref_trait 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"panic_abort\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"core 0.0.0\",\n+ \"libc 0.0.0\",\n+]\n+\n+[[package]]\n+name = \"panic_unwind\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"alloc 0.0.0\",\n+ \"core 0.0.0\",\n+ \"libc 0.0.0\",\n+ \"unwind 0.0.0\",\n+]\n+\n+[[package]]\n+name = \"pest\"\n+version = \"0.3.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"pkg-config\"\n+version = \"0.3.9\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -349,6 +899,15 @@ dependencies = [\n  \"syntax_pos 0.0.0\",\n ]\n \n+[[package]]\n+name = \"psapi-sys\"\n+version = \"0.1.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"pulldown-cmark\"\n version = \"0.0.8\"\n@@ -367,25 +926,66 @@ dependencies = [\n ]\n \n [[package]]\n-name = \"qemu-test-client\"\n-version = \"0.1.0\"\n+name = \"quick-error\"\n+version = \"1.2.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n-name = \"qemu-test-server\"\n-version = \"0.1.0\"\n+name = \"quote\"\n+version = \"0.2.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n-name = \"quick-error\"\n-version = \"1.1.0\"\n+name = \"quote\"\n+version = \"0.3.15\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"racer\"\n+version = \"2.0.6\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"clap 2.19.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"env_logger 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syntex_errors 0.52.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syntex_syntax 0.52.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"toml 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"typed-arena 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"rand\"\n version = \"0.0.0\"\n dependencies = [\n  \"core 0.0.0\",\n ]\n \n+[[package]]\n+name = \"rand\"\n+version = \"0.3.15\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"redox_syscall\"\n+version = \"0.1.17\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"regex\"\n+version = \"0.1.80\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"aho-corasick 0.5.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"memchr 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex-syntax 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"thread_local 0.2.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"utf8-ranges 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"regex\"\n version = \"0.2.1\"\n@@ -398,34 +998,93 @@ dependencies = [\n  \"utf8-ranges 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"regex-syntax\"\n+version = \"0.3.9\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"regex-syntax\"\n version = \"0.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n-name = \"rls-data\"\n+name = \"remote-test-client\"\n+version = \"0.1.0\"\n+\n+[[package]]\n+name = \"remote-test-server\"\n+version = \"0.1.0\"\n+\n+[[package]]\n+name = \"rls\"\n version = \"0.1.0\"\n+dependencies = [\n+ \"cargo 0.20.0 (git+https://github.com/rust-lang/cargo)\",\n+ \"derive-new 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"env_logger 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"languageserver-types 0.10.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"racer 2.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rls-analysis 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rls-data 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rls-span 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rls-vfs 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustfmt 0.8.4 (git+https://github.com/rust-lang-nursery/rustfmt)\",\n+ \"serde 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"toml 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"url 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"url_serde 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"rls-analysis\"\n+version = \"0.2.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"derive-new 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rls-data 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rls-span 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"rls-data\"\n+version = \"0.3.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"rls-span 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-serialize 0.3.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rls-span 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rls-span\"\n-version = \"0.1.0\"\n+version = \"0.4.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"rls-vfs\"\n+version = \"0.3.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"rustc-serialize 0.3.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"racer 2.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rls-span 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustbook\"\n version = \"0.1.0\"\n dependencies = [\n- \"clap 2.22.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"mdbook 0.0.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"clap 2.19.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"mdbook 0.0.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -436,17 +1095,22 @@ dependencies = [\n  \"fmt_macros 0.0.0\",\n  \"graphviz 0.0.0\",\n  \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"owning_ref 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_back 0.0.0\",\n  \"rustc_bitflags 0.0.0\",\n  \"rustc_const_math 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\",\n- \"rustc_llvm 0.0.0\",\n  \"serialize 0.0.0\",\n  \"syntax 0.0.0\",\n  \"syntax_pos 0.0.0\",\n ]\n \n+[[package]]\n+name = \"rustc-demangle\"\n+version = \"0.1.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"rustc-main\"\n version = \"0.0.0\"\n@@ -458,7 +1122,7 @@ dependencies = [\n \n [[package]]\n name = \"rustc-serialize\"\n-version = \"0.3.23\"\n+version = \"0.3.24\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -467,7 +1131,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"alloc_system 0.0.0\",\n  \"build_helper 0.1.0\",\n- \"cmake 0.1.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cmake 0.1.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n ]\n \n@@ -546,7 +1210,6 @@ dependencies = [\n  \"rustc_errors 0.0.0\",\n  \"rustc_incremental 0.0.0\",\n  \"rustc_lint 0.0.0\",\n- \"rustc_llvm 0.0.0\",\n  \"rustc_metadata 0.0.0\",\n  \"rustc_mir 0.0.0\",\n  \"rustc_passes 0.0.0\",\n@@ -600,7 +1263,7 @@ name = \"rustc_llvm\"\n version = \"0.0.0\"\n dependencies = [\n  \"build_helper 0.1.0\",\n- \"gcc 0.3.45 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.46 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_bitflags 0.0.0\",\n ]\n \n@@ -610,7 +1273,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"alloc_system 0.0.0\",\n  \"build_helper 0.1.0\",\n- \"cmake 0.1.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cmake 0.1.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n ]\n \n@@ -620,13 +1283,13 @@ version = \"0.0.0\"\n dependencies = [\n  \"flate 0.0.0\",\n  \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"owning_ref 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"proc_macro 0.0.0\",\n  \"rustc 0.0.0\",\n  \"rustc_back 0.0.0\",\n  \"rustc_const_math 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\",\n- \"rustc_llvm 0.0.0\",\n  \"serialize 0.0.0\",\n  \"syntax 0.0.0\",\n  \"syntax_ext 0.0.0\",\n@@ -654,7 +1317,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"alloc_system 0.0.0\",\n  \"build_helper 0.1.0\",\n- \"cmake 0.1.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cmake 0.1.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n ]\n \n@@ -713,10 +1376,11 @@ name = \"rustc_save_analysis\"\n version = \"0.0.0\"\n dependencies = [\n  \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rls-data 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rls-span 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rls-data 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rls-span 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n- \"rustc-serialize 0.3.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc_typeck 0.0.0\",\n  \"syntax 0.0.0\",\n  \"syntax_pos 0.0.0\",\n ]\n@@ -727,6 +1391,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"flate 0.0.0\",\n  \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"owning_ref 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_back 0.0.0\",\n  \"rustc_bitflags 0.0.0\",\n@@ -747,7 +1412,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"alloc_system 0.0.0\",\n  \"build_helper 0.1.0\",\n- \"cmake 0.1.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cmake 0.1.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n ]\n \n@@ -775,7 +1440,7 @@ dependencies = [\n  \"arena 0.0.0\",\n  \"build_helper 0.1.0\",\n  \"env_logger 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"gcc 0.3.45 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.46 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pulldown-cmark 0.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n@@ -787,31 +1452,134 @@ dependencies = [\n  \"rustc_metadata 0.0.0\",\n  \"rustc_resolve 0.0.0\",\n  \"rustc_trans 0.0.0\",\n+ \"rustc_typeck 0.0.0\",\n  \"serialize 0.0.0\",\n  \"syntax 0.0.0\",\n  \"syntax_pos 0.0.0\",\n ]\n \n+[[package]]\n+name = \"rustfmt\"\n+version = \"0.8.4\"\n+source = \"git+https://github.com/rust-lang-nursery/rustfmt#bf9b3fa1d7cab2f7bd541539d397a92b4954ec96\"\n+dependencies = [\n+ \"diff 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"env_logger 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"itertools 0.5.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"multimap 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"strings 0.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syntex_errors 0.58.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syntex_syntax 0.58.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"term 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"toml 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-segmentation 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"walkdir 1.0.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"same-file\"\n+version = \"0.1.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"semver\"\n+version = \"0.6.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"semver-parser 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"semver-parser\"\n+version = \"0.7.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"serde\"\n+version = \"0.9.15\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"serde\"\n-version = \"0.9.11\"\n+version = \"1.0.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"serde_derive\"\n+version = \"1.0.6\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive_internals 0.15.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.11.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"serde_derive_internals\"\n+version = \"0.15.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"syn 0.11.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"synom 0.11.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"serde_ignored\"\n+version = \"0.0.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"serde 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"serde_json\"\n+version = \"0.9.10\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"dtoa 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"itoa 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num-traits 0.1.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 0.9.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"serde_json\"\n-version = \"0.9.9\"\n+version = \"1.0.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"dtoa 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"itoa 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num-traits 0.1.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 0.9.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"serialize\"\n version = \"0.0.0\"\n \n+[[package]]\n+name = \"shell-escape\"\n+version = \"0.1.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"stable_deref_trait\"\n+version = \"1.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"std\"\n version = \"0.0.0\"\n@@ -823,7 +1591,7 @@ dependencies = [\n  \"collections 0.0.0\",\n  \"compiler_builtins 0.0.0\",\n  \"core 0.0.0\",\n- \"gcc 0.3.45 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.46 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.0.0\",\n  \"panic_abort 0.0.0\",\n  \"panic_unwind 0.0.0\",\n@@ -843,17 +1611,57 @@ dependencies = [\n  \"core 0.0.0\",\n ]\n \n+[[package]]\n+name = \"strings\"\n+version = \"0.0.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"strsim\"\n+version = \"0.5.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"strsim\"\n version = \"0.6.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"syn\"\n+version = \"0.8.7\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"quote 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-xid 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"syn\"\n+version = \"0.11.11\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"synom 0.11.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-xid 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"synom\"\n+version = \"0.11.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"unicode-xid 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"syntax\"\n version = \"0.0.0\"\n dependencies = [\n+ \"bitflags 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc_bitflags 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\",\n  \"serialize 0.0.0\",\n@@ -879,17 +1687,113 @@ dependencies = [\n  \"serialize 0.0.0\",\n ]\n \n+[[package]]\n+name = \"syntex_errors\"\n+version = \"0.52.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syntex_pos 0.52.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"term 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-xid 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"syntex_errors\"\n+version = \"0.58.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syntex_pos 0.58.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"term 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-xid 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"syntex_pos\"\n+version = \"0.52.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"syntex_pos\"\n+version = \"0.58.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"syntex_syntax\"\n+version = \"0.52.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"bitflags 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syntex_errors 0.52.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syntex_pos 0.52.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"term 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-xid 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"syntex_syntax\"\n+version = \"0.58.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"bitflags 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syntex_errors 0.58.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syntex_pos 0.58.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-xid 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"tar\"\n+version = \"0.4.12\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"xattr 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"tempdir\"\n+version = \"0.3.5\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"rand 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"term\"\n version = \"0.0.0\"\n \n+[[package]]\n+name = \"term\"\n+version = \"0.4.5\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"term_size\"\n version = \"0.2.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -903,52 +1807,129 @@ dependencies = [\n \n [[package]]\n name = \"thread-id\"\n-version = \"3.0.0\"\n+version = \"2.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"thread-id\"\n+version = \"3.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"thread_local\"\n+version = \"0.2.7\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"thread-id 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"thread_local\"\n version = \"0.3.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"thread-id 3.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"thread-id 3.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unreachable 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"tidy\"\n version = \"0.1.0\"\n \n+[[package]]\n+name = \"time\"\n+version = \"0.1.37\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"redox_syscall 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"toml\"\n version = \"0.1.30\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"rustc-serialize 0.3.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"toml\"\n-version = \"0.3.1\"\n+version = \"0.2.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"serde 0.9.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"toml\"\n+version = \"0.3.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"serde 0.9.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"toml\"\n+version = \"0.4.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"serde 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"typed-arena\"\n+version = \"1.2.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"unicode-bidi\"\n+version = \"0.2.5\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"matches 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"unicode-normalization\"\n+version = \"0.1.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"unicode-segmentation\"\n-version = \"1.1.0\"\n+version = \"0.1.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"unicode-segmentation\"\n+version = \"1.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"unicode-width\"\n version = \"0.1.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"unicode-xid\"\n+version = \"0.0.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"unicode-xid\"\n+version = \"0.0.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"unreachable\"\n version = \"0.1.1\"\n@@ -957,21 +1938,63 @@ dependencies = [\n  \"void 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"url\"\n+version = \"1.4.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"idna 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"matches 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"url_serde\"\n+version = \"0.2.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"serde 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"url 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"user32-sys\"\n+version = \"0.2.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"utf8-ranges\"\n+version = \"0.1.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"utf8-ranges\"\n version = \"1.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"vec_map\"\n-version = \"0.7.0\"\n+version = \"0.6.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"void\"\n version = \"1.0.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"walkdir\"\n+version = \"1.0.7\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"same-file 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"winapi\"\n version = \"0.2.8\"\n@@ -982,52 +2005,189 @@ name = \"winapi-build\"\n version = \"0.1.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"ws2_32-sys\"\n+version = \"0.2.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"xattr\"\n+version = \"0.1.11\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"xz2\"\n+version = \"0.1.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"lzma-sys 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"yaml-rust\"\n+version = \"0.3.5\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [metadata]\n+\"checksum advapi32-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e06588080cb19d0acb6739808aafa5f26bfb2ca015b2b6370028b44cf7cb8a9a\"\n+\"checksum aho-corasick 0.5.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ca972c2ea5f742bfce5687b9aef75506a764f61d37f8f649047846a9686ddb66\"\n \"checksum aho-corasick 0.6.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"500909c4f87a9e52355b26626d890833e9e1d53ac566db76c36faa984b889699\"\n \"checksum ansi_term 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"23ac7c30002a5accbf7e8987d0632fa6de155b7c3d39d0067317a391e00a2ef6\"\n-\"checksum atty 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d912da0db7fa85514874458ca3651fe2cddace8d0b0505571dbdcd41ab490159\"\n+\"checksum backtrace 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f551bc2ddd53aea015d453ef0b635af89444afa5ed2405dd0b2062ad5d600d80\"\n+\"checksum backtrace-sys 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d192fd129132fbc97497c1f2ec2c2c5174e376b95f535199ef4fe0a293d33842\"\n \"checksum bitflags 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4f67931368edf3a9a51d29886d245f1c3db2f1ef0dcc9e35ff70341b78c10d23\"\n+\"checksum bitflags 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aad18937a628ec6abcd26d1489012cc0e18c21798210f491af69ded9b881106d\"\n \"checksum bitflags 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1370e9fc2a6ae53aea8b7a5110edbd08836ed87c88736dfabccade1c2b44bff4\"\n-\"checksum clap 2.22.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e17a4a72ffea176f77d6e2db609c6c919ef221f23862c9915e687fb54d833485\"\n-\"checksum cmake 0.1.22 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d18d68987ed4c516dcc3e7913659bfa4076f5182eea4a7e0038bb060953e76ac\"\n+\"checksum bufstream 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f2f382711e76b9de6c744cc00d0497baba02fb00a787f088c879f01d09468e32\"\n+\"checksum cargo 0.20.0 (git+https://github.com/rust-lang/cargo)\" = \"<none>\"\n+\"checksum cfg-if 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"de1e760d7b6535af4241fca8bd8adf68e2e7edacc6b29f5d399050c5e48cf88c\"\n+\"checksum chrono 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d9123be86fd2a8f627836c235ecdf331fdd067ecf7ac05aa1a68fbcf2429f056\"\n+\"checksum clap 2.19.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"95b78f3fe0fc94c13c731714363260e04b557a637166f33a4570d3189d642374\"\n+\"checksum cmake 0.1.23 (registry+https://github.com/rust-lang/crates.io-index)\" = \"92278eb79412c8f75cfc89e707a1bb3a6490b68f7f2e78d15c774f30fe701122\"\n+\"checksum crossbeam 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0c5ea215664ca264da8a9d9c3be80d2eaf30923c259d03e870388eb927508f97\"\n+\"checksum curl 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c90e1240ef340dd4027ade439e5c7c2064dd9dc652682117bd50d1486a3add7b\"\n+\"checksum curl-sys 0.3.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"23e7e544dc5e1ba42c4a4a678bd47985e84b9c3f4d3404c29700622a029db9c3\"\n+\"checksum dbghelp-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"97590ba53bcb8ac28279161ca943a924d1fd4a8fb3fa63302591647c4fc5b850\"\n+\"checksum derive-new 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"41be6ca3b99e0c0483fb2389685448f650459c3ecbe4e18d7705d8010ec4ab8e\"\n+\"checksum diff 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0a515461b6c8c08419850ced27bc29e86166dcdcde8fbe76f8b1f0589bb49472\"\n+\"checksum docopt 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ab32ea6e284d87987066f21a9e809a73c14720571ef34516f0890b3d355ccfd8\"\n \"checksum dtoa 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"80c8b71fd71146990a9742fc06dcbbde19161a267e0ad4e572c35162f4578c90\"\n+\"checksum either 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"18785c1ba806c258137c937e44ada9ee7e69a37e3c72077542cd2f069d78562a\"\n+\"checksum enum_primitive 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"be4551092f4d519593039259a9ed8daedf0da12e5109c5280338073eaeb81180\"\n+\"checksum env_logger 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"15abd780e45b3ea4f76b4e9a26ff4843258dd8a3eed2775a0e7368c2e7936c2f\"\n \"checksum env_logger 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e3856f1697098606fc6cb97a93de88ca3f3bc35bb878c725920e6e82ecf05e83\"\n+\"checksum error-chain 0.10.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d9435d864e017c3c6afeac1654189b06cdb491cf2ff73dbf0d73b0f292f42ff8\"\n \"checksum filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5363ab8e4139b8568a6237db5248646e5a8a2f89bd5ccb02092182b11fd3e922\"\n-\"checksum gcc 0.3.45 (registry+https://github.com/rust-lang/crates.io-index)\" = \"40899336fb50db0c78710f53e87afc54d8c7266fb76262fecc78ca1a7f09deae\"\n+\"checksum flate2 0.2.19 (registry+https://github.com/rust-lang/crates.io-index)\" = \"36df0166e856739905cd3d7e0b210fe818592211a008862599845e012d8d304c\"\n+\"checksum foreign-types 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3e4056b9bd47f8ac5ba12be771f77a0dae796d1bbaaf5fd0b9c2d38b69b8a29d\"\n+\"checksum fs2 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"34edaee07555859dc13ca387e6ae05686bb4d0364c95d649b6dab959511f4baf\"\n+\"checksum gcc 0.3.46 (registry+https://github.com/rust-lang/crates.io-index)\" = \"181e3cebba1d663bd92eb90e2da787e10597e027eb00de8d742b260a7850948f\"\n+\"checksum gdi32-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0912515a8ff24ba900422ecda800b52f4016a56251922d397c576bf92c690518\"\n \"checksum getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d9047cfbd08a437050b363d35ef160452c5fe8ea5187ae0a624708c91581d685\"\n-\"checksum handlebars 0.25.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"663e1728d8037fb0d4e13bcd1b1909fb5d913690a9929eb385922df157c2ff8f\"\n+\"checksum git2 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9de9df4358c17e448a778d90cd0272e1dab5eae30244502333fa2001c4e24357\"\n+\"checksum git2-curl 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"68676bc784bf0bef83278898929bf64a251e87c0340723d0b93fa096c9c5bf8e\"\n+\"checksum glob 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8be18de09a56b60ed0edf84bc9df007e30040691af7acd1c41874faac5895bfb\"\n+\"checksum hamcrest 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bf088f042a467089e9baa4972f57f9247e42a0cc549ba264c7a04fbb8ecb89d4\"\n+\"checksum handlebars 0.25.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"15bdf598fc3c2de40c6b340213028301c0d225eea55a2294e6cc148074e557a1\"\n+\"checksum idna 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6ac85ec3f80c8e4e99d9325521337e14ec7555c458a14e377d189659a427f375\"\n+\"checksum itertools 0.5.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4833d6978da405305126af4ac88569b5d71ff758581ce5a987dbfa3755f694fc\"\n \"checksum itoa 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"eb2f404fbc66fd9aac13e998248505e7ecb2ad8e44ab6388684c5fb11c6c251c\"\n \"checksum kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d\"\n-\"checksum lazy_static 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4732c563b9a21a406565c4747daa7b46742f082911ae4753f390dc9ec7ee1a97\"\n-\"checksum libc 0.2.21 (registry+https://github.com/rust-lang/crates.io-index)\" = \"88ee81885f9f04bff991e306fea7c1c60a5f0f9e409e99f6b40e3311a3363135\"\n+\"checksum languageserver-types 0.10.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"97c2985bfcbbcb0189cfa25e1c10c1ac7111df2b6214b652c690127aefdf4e5b\"\n+\"checksum lazy_static 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3b37545ab726dd833ec6420aaba8231c5b320814b9029ad585555d2a03e94fbf\"\n+\"checksum libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\" = \"babb8281da88cba992fa1f4ddec7d63ed96280a1a53ec9b919fd37b53d71e502\"\n+\"checksum libgit2-sys 0.6.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dd89dd7196d5fa35b659c3eaf3c1b14b9bd961bfd1a07dfca49adeb8a6aa3763\"\n+\"checksum libssh2-sys 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0db4ec23611747ef772db1c4d650f8bd762f07b461727ec998f953c614024b75\"\n+\"checksum libz-sys 1.0.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e5ee912a45d686d393d5ac87fac15ba0ba18daae14e8e7543c63ebf7fb7e970c\"\n \"checksum log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5141eca02775a762cc6cd564d8d2c50f67c0ea3a372cbf1c51592b3e029e10ad\"\n-\"checksum mdbook 0.0.19 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2598843aeda0c5bb2e8e4d714564f1c3fc40f7844157e34563bf96ae3866b56e\"\n+\"checksum lzma-sys 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fedff6a5cbb24494ec6ee4784e9ac5c187161fede04c7767d49bf87544013afa\"\n+\"checksum matches 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"efd7622e3022e1a6eaa602c4cea8912254e5582c9c692e9167714182244801b1\"\n+\"checksum mdbook 0.0.21 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f1e2e9d848514dcfad4195788d0d42ae5153a477c191d75d5b84fab10f222fbd\"\n+\"checksum memchr 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d8b629fb514376c675b98c1421e80b151d3817ac42d7c667717d282761418d20\"\n \"checksum memchr 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1dbccc0e46f1ea47b9f17e6d67c5a96bd27030519c519c9c91327e31275a47b4\"\n+\"checksum miniz-sys 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"28eaee17666671fa872e567547e8428e83308ebe5808cdf6a0e28397dbe2c726\"\n+\"checksum miow 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8c1f2f3b1cf331de6896aabf6e9d55dca90356cc9960cca7eaaf408a355ae919\"\n+\"checksum multimap 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9223f4774d08e06185e44e555b9a7561243d387bac49c78a6205c42d6975fbf2\"\n+\"checksum net2 0.2.29 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bc01404e7568680f1259aa5729539f221cb1e6d047a0d9053cab4be8a73b5d67\"\n+\"checksum num 0.1.37 (registry+https://github.com/rust-lang/crates.io-index)\" = \"98b15ba84e910ea7a1973bccd3df7b31ae282bf9d8bd2897779950c9b8303d40\"\n+\"checksum num-bigint 0.1.37 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ba6d838b16e56da1b6c383d065ff1ec3c7d7797f65a3e8f6ba7092fd87820bac\"\n+\"checksum num-complex 0.1.37 (registry+https://github.com/rust-lang/crates.io-index)\" = \"148eb324ca772230853418731ffdf13531738b50f89b30692a01fcdcb0a64677\"\n+\"checksum num-integer 0.1.34 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ef1a4bf6f9174aa5783a9b4cc892cacd11aebad6c69ad027a0b65c6ca5f8aa37\"\n+\"checksum num-iter 0.1.33 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f7d1891bd7b936f12349b7d1403761c8a0b85a18b148e9da4429d5d102c1a41e\"\n+\"checksum num-rational 0.1.36 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c2dc5ea04020a8f18318ae485c751f8cfa1c0e69dcf465c29ddaaa64a313cc44\"\n \"checksum num-traits 0.1.37 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e1cbfa3781f3fe73dc05321bed52a06d2d491eaa764c52335cf4399f046ece99\"\n-\"checksum num_cpus 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cee7e88156f3f9e19bdd598f8d6c9db7bf4078f99f8381f43a55b09648d1a6e3\"\n+\"checksum num_cpus 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ca313f1862c7ec3e0dfe8ace9fa91b1d9cb5c84ace3d00f5ec4216238e93c167\"\n \"checksum open 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3478ed1686bd1300c8a981a940abc92b06fac9cbef747f4c668d4e032ff7b842\"\n+\"checksum openssl 0.9.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bb5d1663b73d10c6a3eda53e2e9d0346f822394e7b858d7257718f65f61dfbe2\"\n+\"checksum openssl-probe 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d98df0270d404ccd3c050a41d579c52d1db15375168bb3471e04ec0f5f378daf\"\n+\"checksum openssl-sys 0.9.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3a5886d87d3e2a0d890bf62dc8944f5e3769a405f7e1e9ef6e517e47fd7a0897\"\n+\"checksum owning_ref 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cdf84f41639e037b484f93433aa3897863b561ed65c6e59c7073d7c561710f37\"\n \"checksum pest 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0a6dda33d67c26f0aac90d324ab2eb7239c819fc7b2552fe9faa4fe88441edc8\"\n+\"checksum pkg-config 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3a8b4c6b8165cd1a1cd4b9b120978131389f64bdaf456435caa41e630edba903\"\n+\"checksum psapi-sys 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"abcd5d1a07d360e29727f757a9decb3ce8bc6e0efa8969cfaad669a8317a2478\"\n \"checksum pulldown-cmark 0.0.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d9ab1e588ef8efd702c7ed9d2bd774db5e6f4d878bb5a1a9f371828fbdff6973\"\n \"checksum pulldown-cmark 0.0.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1058d7bb927ca067656537eec4e02c2b4b70eaaa129664c5b90c111e20326f41\"\n-\"checksum quick-error 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0aad603e8d7fb67da22dbdf1f4b826ce8829e406124109e73cf1b2454b93a71c\"\n+\"checksum quick-error 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3c36987d4978eb1be2e422b1e0423a557923a5c3e7e6f31d5699e9aafaefa469\"\n+\"checksum quote 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4c5cf478fe1006dbcc72567121d23dbdae5f1632386068c5c86ff4f645628504\"\n+\"checksum quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7a6e920b65c65f10b2ae65c831a81a073a89edd28c7cce89475bff467ab4167a\"\n+\"checksum racer 2.0.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b0d72b3afd67882adfca61d609fafb8d7aa5f9e814f12c32fcc6e171995920e8\"\n+\"checksum rand 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"022e0636ec2519ddae48154b028864bdce4eaf7d35226ab8e65c611be97b189d\"\n+\"checksum redox_syscall 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\" = \"29dbdfd4b9df8ab31dec47c6087b7b13cbf4a776f335e4de8efba8288dda075b\"\n+\"checksum regex 0.1.80 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4fd4ace6a8cf7860714a2c2280d6c1f7e6a413486c13298bbc86fd3da019402f\"\n \"checksum regex 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4278c17d0f6d62dfef0ab00028feb45bd7d2102843f80763474eeb1be8a10c01\"\n+\"checksum regex-syntax 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f9ec002c35e86791825ed294b50008eea9ddfc8def4420124fbc6b08db834957\"\n \"checksum regex-syntax 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2f9191b1f57603095f105d317e375d19b1c9c5c3185ea9633a99a6dcbed04457\"\n-\"checksum rls-data 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"af1dfff00189fd7b78edb9af131b0de703676c04fa8126aed77fd2c586775a4d\"\n-\"checksum rls-span 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8656f7b850ac85fb204ef94318c641bbb15a32766e12f9a589a23e4c0fbc38db\"\n-\"checksum rustc-serialize 0.3.23 (registry+https://github.com/rust-lang/crates.io-index)\" = \"684ce48436d6465300c9ea783b6b14c4361d6b8dcbb1375b486a69cc19e2dfb0\"\n-\"checksum serde 0.9.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a702319c807c016e51f672e5c77d6f0b46afddd744b5e437d6b8436b888b458f\"\n-\"checksum serde_json 0.9.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dbc45439552eb8fb86907a2c41c1fd0ef97458efb87ff7f878db466eb581824e\"\n+\"checksum rls-analysis 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a62d88c341375c6f3f8b2e18b9b364896e7d3e7aa916907de717d0267e116506\"\n+\"checksum rls-data 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fc4277ce3c57f456b11fe3145b181a844a25201bab5cbaa1978457e6e2f27d47\"\n+\"checksum rls-span 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5d7c7046dc6a92f2ae02ed302746db4382e75131b9ce20ce967259f6b5867a6a\"\n+\"checksum rls-vfs 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"986eada111517bcb5a7a75205b3f2b70c82e7766653cca61a23f5afce79bdb94\"\n+\"checksum rustc-demangle 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3058a43ada2c2d0b92b3ae38007a2d0fa5e9db971be260e0171408a4ff471c95\"\n+\"checksum rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dcf128d1287d2ea9d80910b5f1120d0b8eede3fbf1abe91c40d39ea7d51e6fda\"\n+\"checksum rustfmt 0.8.4 (git+https://github.com/rust-lang-nursery/rustfmt)\" = \"<none>\"\n+\"checksum same-file 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d931a44fdaa43b8637009e7632a02adc4f2b2e0733c08caa4cf00e8da4a117a7\"\n+\"checksum semver 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7a3186ec9e65071a2095434b1f5bb24838d4e8e130f584c790f6033c79943537\"\n+\"checksum semver-parser 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"388a1df253eca08550bef6c72392cfe7c30914bf41df5269b68cbd6ff8f570a3\"\n+\"checksum serde 0.9.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"34b623917345a631dc9608d5194cc206b3fe6c3554cd1c75b937e55e285254af\"\n+\"checksum serde 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"38a3db3a5757f68069aba764b793823ea9fb9717c42c016f8903f8add50f508a\"\n+\"checksum serde_derive 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e46ef71ee001a4279a4513e79a6ebbb59da3a4987bf77a6df2e5534cd6f21d82\"\n+\"checksum serde_derive_internals 0.15.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"021c338d22c7e30f957a6ab7e388cb6098499dda9fd4ba1661ee074ca7a180d1\"\n+\"checksum serde_ignored 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c10e798e4405d7dcec3658989e35ee6706f730a9ed7c1184d5ebd84317e82f46\"\n+\"checksum serde_json 0.9.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ad8bcf487be7d2e15d3d543f04312de991d631cfe1b43ea0ade69e6a8a5b16a1\"\n+\"checksum serde_json 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"48b04779552e92037212c3615370f6bd57a40ebba7f20e554ff9f55e41a69a7b\"\n+\"checksum shell-escape 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dd5cc96481d54583947bfe88bf30c23d53f883c6cd0145368b69989d97b84ef8\"\n+\"checksum stable_deref_trait 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"15132e0e364248108c5e2c02e3ab539be8d6f5d52a01ca9bbf27ed657316f02b\"\n+\"checksum strings 0.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"54f86446ab480b4f60782188f4f78886465c5793aee248cbb48b7fdc0d022420\"\n+\"checksum strsim 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"67f84c44fbb2f91db7fef94554e6b2ac05909c9c0b0bc23bb98d3a1aebfe7f7c\"\n \"checksum strsim 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b4d15c810519a91cf877e7e36e63fe068815c678181439f2f29e2562147c3694\"\n+\"checksum syn 0.11.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d3b891b9015c88c576343b9b3e41c2c11a51c219ef067b264bd9c8aa9b441dad\"\n+\"checksum syn 0.8.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6ae6fb0dcc9bd85f89a1a4adc0df2fd90c90c98849d61433983dd7a9df6363f7\"\n+\"checksum synom 0.11.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a393066ed9010ebaed60b9eafa373d4b1baac186dd7e008555b0f702b51945b6\"\n+\"checksum syntex_errors 0.52.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9e52bffe6202cfb67587784cf23e0ec5bf26d331eef4922a16d5c42e12aa1e9b\"\n+\"checksum syntex_errors 0.58.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"867cc5c2d7140ae7eaad2ae9e8bf39cb18a67ca651b7834f88d46ca98faadb9c\"\n+\"checksum syntex_pos 0.52.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"955ef4b16af4c468e4680d1497f873ff288f557d338180649e18f915af5e15ac\"\n+\"checksum syntex_pos 0.58.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"13ad4762fe52abc9f4008e85c4fb1b1fe3aa91ccb99ff4826a439c7c598e1047\"\n+\"checksum syntex_syntax 0.52.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"76a302e717e348aa372ff577791c3832395650073b8d8432f8b3cb170b34afde\"\n+\"checksum syntex_syntax 0.58.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6e0e4dbae163dd98989464c23dd503161b338790640e11537686f2ef0f25c791\"\n+\"checksum tar 0.4.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ab0ef9ead2fe0aa9e18475a96a207bfd5143f4124779ef7429503a8665416ce8\"\n+\"checksum tempdir 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"87974a6f5c1dfb344d733055601650059a3363de2a6104819293baff662132d6\"\n+\"checksum term 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d168af3930b369cfe245132550579d47dfd873d69470755a19c2c6568dbbd989\"\n \"checksum term_size 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"07b6c1ac5b3fffd75073276bca1ceed01f67a28537097a2a9539e116e50fb21a\"\n-\"checksum thread-id 3.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4437c97558c70d129e40629a5b385b3fb1ffac301e63941335e4d354081ec14a\"\n+\"checksum thread-id 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a9539db560102d1cef46b8b78ce737ff0bb64e7e18d35b2a5688f7d097d0ff03\"\n+\"checksum thread-id 3.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8df7875b676fddfadffd96deea3b1124e5ede707d4884248931077518cf1f773\"\n+\"checksum thread_local 0.2.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8576dbbfcaef9641452d5cf0df9b0e7eeab7694956dd33bb61515fb8f18cfdd5\"\n \"checksum thread_local 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c85048c6260d17cf486ceae3282d9fb6b90be220bf5b28c400f5485ffc29f0c7\"\n+\"checksum time 0.1.37 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ffd7ccbf969a892bf83f1e441126968a07a3941c24ff522a26af9f9f4585d1a3\"\n \"checksum toml 0.1.30 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0590d72182e50e879c4da3b11c6488dae18fccb1ae0c7a3eda18e16795844796\"\n-\"checksum toml 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3474f3c6eaf32eedb4f4a66a26214f020f828a6d96c37e38a35e3a379bbcfd11\"\n-\"checksum unicode-segmentation 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"18127285758f0e2c6cf325bb3f3d138a12fee27de4f23e146cd6a179f26c2cf3\"\n+\"checksum toml 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"736b60249cb25337bc196faa43ee12c705e426f3d55c214d73a4e7be06f92cb4\"\n+\"checksum toml 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bd86ad9ebee246fdedd610e0f6d0587b754a3d81438db930a244d0480ed7878f\"\n+\"checksum toml 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4cc5dbfb20a481e64b99eb7ae280859ec76730c7191570ba5edaa962394edb0a\"\n+\"checksum typed-arena 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8e2f9dc90da4f9d66ffc9ad3ead2c7d57582a26f4a3292d2ce7011bd29965100\"\n+\"checksum unicode-bidi 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d3a078ebdd62c0e71a709c3d53d2af693fe09fe93fbff8344aebe289b78f9032\"\n+\"checksum unicode-normalization 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e28fa37426fceeb5cf8f41ee273faa7c82c47dc8fba5853402841e665fcd86ff\"\n+\"checksum unicode-segmentation 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c3bc443ded17b11305ffffe6b37e2076f328a5a8cb6aa877b1b98f77699e98b5\"\n+\"checksum unicode-segmentation 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a8083c594e02b8ae1654ae26f0ade5158b119bd88ad0e8227a5d8fcd72407946\"\n \"checksum unicode-width 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bf3a113775714a22dcb774d8ea3655c53a32debae63a063acc00a91cc586245f\"\n+\"checksum unicode-xid 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"36dff09cafb4ec7c8cf0023eb0b686cb6ce65499116a12201c9e11840ca01beb\"\n+\"checksum unicode-xid 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8c1f860d7d29cf02cb2f3f359fd35991af3d30bac52c57d265a3c461074cb4dc\"\n \"checksum unreachable 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1f2ae5ddb18e1c92664717616dd9549dde73f539f01bd7b77c2edb2446bdff91\"\n+\"checksum url 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f5ba8a749fb4479b043733416c244fa9d1d3af3d7c23804944651c8a448cb87e\"\n+\"checksum url_serde 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"74e7d099f1ee52f823d4bdd60c93c3602043c728f5db3b97bdb548467f7bddea\"\n+\"checksum user32-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4ef4711d107b21b410a3a974b1204d9accc8b10dad75d8324b5d755de1617d47\"\n+\"checksum utf8-ranges 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a1ca13c08c41c9c3e04224ed9ff80461d97e121589ff27c753a16cb10830ae0f\"\n \"checksum utf8-ranges 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"662fab6525a98beff2921d7f61a39e7d59e0b425ebc7d0d9e66d316e55124122\"\n-\"checksum vec_map 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f8cdc8b93bd0198ed872357fb2e667f7125646b1762f16d60b2c96350d361897\"\n+\"checksum vec_map 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cac5efe5cb0fa14ec2f84f83c701c562ee63f6dcc680861b21d65c682adfb05f\"\n \"checksum void 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6a02e4885ed3bc0f2de90ea6dd45ebcbb66dacffe03547fadbb0eeae2770887d\"\n+\"checksum walkdir 1.0.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bb08f9e670fab86099470b97cd2b252d6527f0b3cc1401acdb595ffc9dd288ff\"\n \"checksum winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"167dc9d6949a9b857f3451275e911c3f44255842c1f7a76f33c55103a909087a\"\n \"checksum winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2d315eee3b34aca4797b2da6b13ed88266e6d612562a0c46390af8299fc699bc\"\n+\"checksum ws2_32-sys 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d59cefebd0c892fa2dd6de581e937301d8552cb44489cdff035c6187cb63fa5e\"\n+\"checksum xattr 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5f04de8a1346489a2f9e9bd8526b73d135ec554227b17568456e86aa35b6f3fc\"\n+\"checksum xz2 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e9510bdf100731599107c61f77daf46713a69a568f75458999c1f9dbf6ba25b0\"\n+\"checksum yaml-rust 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e66366e18dc58b46801afbf2ca7661a9f59cc8c5962c29892b6039b4f86fa992\""}, {"sha": "85a6df3573ae120f377870a59a5162b3188c809f", "filename": "src/Cargo.toml", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.toml?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -11,8 +11,11 @@ members = [\n   \"tools/rustbook\",\n   \"tools/tidy\",\n   \"tools/build-manifest\",\n-  \"tools/qemu-test-client\",\n-  \"tools/qemu-test-server\",\n+  \"tools/remote-test-client\",\n+  \"tools/remote-test-server\",\n+  \"tools/rust-installer\",\n+  \"tools/cargo\",\n+  \"tools/rls\",\n ]\n \n # Curiously, compiletest will segfault if compiled with opt-level=3 on 64-bit\n@@ -31,3 +34,6 @@ debug-assertions = false\n [profile.test]\n debug = false\n debug-assertions = false\n+\n+[replace]\n+\"https://github.com/rust-lang/cargo#0.20.0\" = { path = \"tools/cargo\" }"}, {"sha": "cc560e0172e3a3fa63a6e92e2bc873b028d49633", "filename": "src/bootstrap/Cargo.toml", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fbootstrap%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fbootstrap%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.toml?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -23,13 +23,18 @@ name = \"rustdoc\"\n path = \"bin/rustdoc.rs\"\n test = false\n \n+[[bin]]\n+name = \"sccache-plus-cl\"\n+path = \"bin/sccache-plus-cl.rs\"\n+test = false\n+\n [dependencies]\n build_helper = { path = \"../build_helper\" }\n-cmake = \"0.1.17\"\n+cmake = \"0.1.23\"\n filetime = \"0.1\"\n-num_cpus = \"0.2\"\n+num_cpus = \"1.0\"\n toml = \"0.1\"\n getopts = \"0.2\"\n rustc-serialize = \"0.3\"\n-gcc = \"0.3.38\"\n+gcc = \"0.3.46\"\n libc = \"0.2\""}, {"sha": "eb2cef133a34f2401b014f7a9b545bb7535845ab", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -38,7 +38,24 @@ use std::path::PathBuf;\n use std::process::{Command, ExitStatus};\n \n fn main() {\n-    let args = env::args_os().skip(1).collect::<Vec<_>>();\n+    let mut args = env::args_os().skip(1).collect::<Vec<_>>();\n+\n+    // Append metadata suffix for internal crates. See the corresponding entry\n+    // in bootstrap/lib.rs for details.\n+    if let Ok(s) = env::var(\"RUSTC_METADATA_SUFFIX\") {\n+        for i in 1..args.len() {\n+            // Dirty code for borrowing issues\n+            let mut new = None;\n+            if let Some(current_as_str) = args[i].to_str() {\n+                if (&*args[i - 1] == \"-C\" && current_as_str.starts_with(\"metadata\")) ||\n+                   current_as_str.starts_with(\"-Cmetadata\") {\n+                    new = Some(format!(\"{}-{}\", current_as_str, s));\n+                }\n+            }\n+            if let Some(new) = new { args[i] = new.into(); }\n+        }\n+    }\n+\n     // Detect whether or not we're a build script depending on whether --target\n     // is passed (a bit janky...)\n     let target = args.windows(2)\n@@ -194,6 +211,8 @@ fn main() {\n                 // do that we pass a weird flag to the compiler to get it to do\n                 // so. Note that this is definitely a hack, and we should likely\n                 // flesh out rpath support more fully in the future.\n+                //\n+                // FIXME: remove condition after next stage0\n                 if stage != \"0\" {\n                     cmd.arg(\"-Z\").arg(\"osx-rpath-install-name\");\n                 }\n@@ -218,6 +237,17 @@ fn main() {\n             cmd.arg(\"-Z\").arg(\"unstable-options\");\n             cmd.arg(\"-C\").arg(\"target-feature=+crt-static\");\n         }\n+\n+        // Force all crates compiled by this compiler to (a) be unstable and (b)\n+        // allow the `rustc_private` feature to link to other unstable crates\n+        // also in the sysroot.\n+        //\n+        // FIXME: remove condition after next stage0\n+        if env::var_os(\"RUSTC_FORCE_UNSTABLE\").is_some() {\n+            if stage != \"0\" {\n+                cmd.arg(\"-Z\").arg(\"force-unstable-if-unmarked\");\n+            }\n+        }\n     }\n \n     if verbose > 1 {"}, {"sha": "cf0c12749234c0bc7e19a91568ee3bf143419f04", "filename": "src/bootstrap/bin/sccache-plus-cl.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fbootstrap%2Fbin%2Fsccache-plus-cl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fbootstrap%2Fbin%2Fsccache-plus-cl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Fsccache-plus-cl.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern crate gcc;\n+\n+use std::env;\n+use std::process::{self, Command};\n+\n+fn main() {\n+    let target = env::var(\"SCCACHE_TARGET\").unwrap();\n+    // Locate the actual compiler that we're invoking\n+    env::remove_var(\"CC\");\n+    env::remove_var(\"CXX\");\n+    let mut cfg = gcc::Config::new();\n+    cfg.cargo_metadata(false)\n+       .out_dir(\"/\")\n+       .target(&target)\n+       .host(&target)\n+       .opt_level(0)\n+       .debug(false);\n+    let compiler = cfg.get_compiler();\n+\n+    // Invoke sccache with said compiler\n+    let sccache_path = env::var_os(\"SCCACHE_PATH\").unwrap();\n+    let mut cmd = Command::new(&sccache_path);\n+    cmd.arg(compiler.path());\n+    for &(ref k, ref v) in compiler.env() {\n+        cmd.env(k, v);\n+    }\n+    for arg in env::args().skip(1) {\n+        cmd.arg(arg);\n+    }\n+\n+    let status = cmd.status().expect(\"failed to spawn\");\n+    process::exit(status.code().unwrap_or(2))\n+}"}, {"sha": "bfba1a0dede24d50cb9929afb0a6d3b1d8b0ec61", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 117, "deletions": 29, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -14,6 +14,7 @@\n import datetime\n import hashlib\n import os\n+import re\n import shutil\n import subprocess\n import sys\n@@ -126,13 +127,13 @@ def unpack(tarball, dst, verbose=False, match=None):\n             shutil.move(tp, fp)\n     shutil.rmtree(os.path.join(dst, fname))\n \n-def run(args, verbose=False, exception=False):\n+def run(args, verbose=False, exception=False, cwd=None):\n     if verbose:\n         print(\"running: \" + ' '.join(args))\n     sys.stdout.flush()\n     # Use Popen here instead of call() as it apparently allows powershell on\n     # Windows to not lock up waiting for input presumably.\n-    ret = subprocess.Popen(args)\n+    ret = subprocess.Popen(args, cwd=cwd)\n     code = ret.wait()\n     if code != 0:\n         err = \"failed to run: \" + ' '.join(args)\n@@ -159,40 +160,41 @@ def format_build_time(duration):\n class RustBuild(object):\n     def download_stage0(self):\n         cache_dst = os.path.join(self.build_dir, \"cache\")\n-        rustc_cache = os.path.join(cache_dst, self.stage0_rustc_date())\n+        rustc_cache = os.path.join(cache_dst, self.stage0_date())\n         if not os.path.exists(rustc_cache):\n             os.makedirs(rustc_cache)\n \n-        channel = self.stage0_rustc_channel()\n+        rustc_channel = self.stage0_rustc_channel()\n+        cargo_channel = self.stage0_cargo_channel()\n \n         if self.rustc().startswith(self.bin_root()) and \\\n                 (not os.path.exists(self.rustc()) or self.rustc_out_of_date()):\n             self.print_what_it_means_to_bootstrap()\n             if os.path.exists(self.bin_root()):\n                 shutil.rmtree(self.bin_root())\n-            filename = \"rust-std-{}-{}.tar.gz\".format(channel, self.build)\n-            url = \"https://static.rust-lang.org/dist/\" + self.stage0_rustc_date()\n+            filename = \"rust-std-{}-{}.tar.gz\".format(rustc_channel, self.build)\n+            url = self._download_url + \"/dist/\" + self.stage0_date()\n             tarball = os.path.join(rustc_cache, filename)\n             if not os.path.exists(tarball):\n                 get(\"{}/{}\".format(url, filename), tarball, verbose=self.verbose)\n             unpack(tarball, self.bin_root(),\n                    match=\"rust-std-\" + self.build,\n                    verbose=self.verbose)\n \n-            filename = \"rustc-{}-{}.tar.gz\".format(channel, self.build)\n-            url = \"https://static.rust-lang.org/dist/\" + self.stage0_rustc_date()\n+            filename = \"rustc-{}-{}.tar.gz\".format(rustc_channel, self.build)\n+            url = self._download_url + \"/dist/\" + self.stage0_date()\n             tarball = os.path.join(rustc_cache, filename)\n             if not os.path.exists(tarball):\n                 get(\"{}/{}\".format(url, filename), tarball, verbose=self.verbose)\n             unpack(tarball, self.bin_root(), match=\"rustc\", verbose=self.verbose)\n             self.fix_executable(self.bin_root() + \"/bin/rustc\")\n             self.fix_executable(self.bin_root() + \"/bin/rustdoc\")\n             with open(self.rustc_stamp(), 'w') as f:\n-                f.write(self.stage0_rustc_date())\n+                f.write(self.stage0_date())\n \n             if \"pc-windows-gnu\" in self.build:\n-                filename = \"rust-mingw-{}-{}.tar.gz\".format(channel, self.build)\n-                url = \"https://static.rust-lang.org/dist/\" + self.stage0_rustc_date()\n+                filename = \"rust-mingw-{}-{}.tar.gz\".format(rustc_channel, self.build)\n+                url = self._download_url + \"/dist/\" + self.stage0_date()\n                 tarball = os.path.join(rustc_cache, filename)\n                 if not os.path.exists(tarball):\n                     get(\"{}/{}\".format(url, filename), tarball, verbose=self.verbose)\n@@ -201,15 +203,15 @@ def download_stage0(self):\n         if self.cargo().startswith(self.bin_root()) and \\\n                 (not os.path.exists(self.cargo()) or self.cargo_out_of_date()):\n             self.print_what_it_means_to_bootstrap()\n-            filename = \"cargo-{}-{}.tar.gz\".format(channel, self.build)\n-            url = \"https://static.rust-lang.org/dist/\" + self.stage0_rustc_date()\n+            filename = \"cargo-{}-{}.tar.gz\".format(cargo_channel, self.build)\n+            url = self._download_url + \"/dist/\" + self.stage0_date()\n             tarball = os.path.join(rustc_cache, filename)\n             if not os.path.exists(tarball):\n                 get(\"{}/{}\".format(url, filename), tarball, verbose=self.verbose)\n             unpack(tarball, self.bin_root(), match=\"cargo\", verbose=self.verbose)\n             self.fix_executable(self.bin_root() + \"/bin/cargo\")\n             with open(self.cargo_stamp(), 'w') as f:\n-                f.write(self.stage0_rustc_date())\n+                f.write(self.stage0_date())\n \n     def fix_executable(self, fname):\n         # If we're on NixOS we need to change the path to the dynamic loader\n@@ -264,12 +266,15 @@ def fix_executable(self, fname):\n             print(\"warning: failed to call patchelf: %s\" % e)\n             return\n \n-    def stage0_rustc_date(self):\n-        return self._rustc_date\n+    def stage0_date(self):\n+        return self._date\n \n     def stage0_rustc_channel(self):\n         return self._rustc_channel\n \n+    def stage0_cargo_channel(self):\n+        return self._cargo_channel\n+\n     def rustc_stamp(self):\n         return os.path.join(self.bin_root(), '.rustc-stamp')\n \n@@ -280,21 +285,23 @@ def rustc_out_of_date(self):\n         if not os.path.exists(self.rustc_stamp()) or self.clean:\n             return True\n         with open(self.rustc_stamp(), 'r') as f:\n-            return self.stage0_rustc_date() != f.read()\n+            return self.stage0_date() != f.read()\n \n     def cargo_out_of_date(self):\n         if not os.path.exists(self.cargo_stamp()) or self.clean:\n             return True\n         with open(self.cargo_stamp(), 'r') as f:\n-            return self.stage0_rustc_date() != f.read()\n+            return self.stage0_date() != f.read()\n \n     def bin_root(self):\n         return os.path.join(self.build_dir, self.build, \"stage0\")\n \n     def get_toml(self, key):\n         for line in self.config_toml.splitlines():\n-            if line.startswith(key + ' ='):\n-                return self.get_string(line)\n+            match = re.match(r'^{}\\s*=(.*)$'.format(key), line)\n+            if match is not None:\n+                value = match.group(1)\n+                return self.get_string(value) or value.strip()\n         return None\n \n     def get_mk(self, key):\n@@ -325,6 +332,8 @@ def rustc(self):\n \n     def get_string(self, line):\n         start = line.find('\"')\n+        if start == -1:\n+            return None\n         end = start + 1 + line[start + 1:].find('\"')\n         return line[start + 1:end]\n \n@@ -367,6 +376,9 @@ def build_bootstrap(self):\n         env[\"DYLD_LIBRARY_PATH\"] = os.path.join(self.bin_root(), \"lib\") + \\\n                                    (os.pathsep + env[\"DYLD_LIBRARY_PATH\"]) \\\n                                    if \"DYLD_LIBRARY_PATH\" in env else \"\"\n+        env[\"LIBRARY_PATH\"] = os.path.join(self.bin_root(), \"lib\") + \\\n+                                   (os.pathsep + env[\"LIBRARY_PATH\"]) \\\n+                                   if \"LIBRARY_PATH\" in env else \"\"\n         env[\"PATH\"] = os.path.join(self.bin_root(), \"bin\") + \\\n                       os.pathsep + env[\"PATH\"]\n         if not os.path.isfile(self.cargo()):\n@@ -379,12 +391,22 @@ def build_bootstrap(self):\n             args.append(\"--frozen\")\n         self.run(args, env)\n \n-    def run(self, args, env):\n-        proc = subprocess.Popen(args, env=env)\n+    def run(self, args, env=None, cwd=None):\n+        proc = subprocess.Popen(args, env=env, cwd=cwd)\n         ret = proc.wait()\n         if ret != 0:\n             sys.exit(ret)\n \n+    def output(self, args, env=None, cwd=None):\n+        default_encoding = sys.getdefaultencoding()\n+        proc = subprocess.Popen(args, stdout=subprocess.PIPE, env=env, cwd=cwd)\n+        (out, err) = proc.communicate()\n+        ret = proc.wait()\n+        if ret != 0:\n+            print(out)\n+            sys.exit(ret)\n+        return out.decode(default_encoding)\n+\n     def build_triple(self):\n         default_encoding = sys.getdefaultencoding()\n         config = self.get_toml('build')\n@@ -407,7 +429,11 @@ def build_triple(self):\n         # The goal here is to come up with the same triple as LLVM would,\n         # at least for the subset of platforms we're willing to target.\n         if ostype == 'Linux':\n-            ostype = 'unknown-linux-gnu'\n+            os_from_sp = subprocess.check_output(['uname', '-o']).strip().decode(default_encoding)\n+            if os_from_sp == 'Android':\n+                ostype = 'linux-android'\n+            else:\n+                ostype = 'unknown-linux-gnu'\n         elif ostype == 'FreeBSD':\n             ostype = 'unknown-freebsd'\n         elif ostype == 'DragonFly':\n@@ -464,15 +490,21 @@ def build_triple(self):\n             cputype = 'i686'\n         elif cputype in {'xscale', 'arm'}:\n             cputype = 'arm'\n+            if ostype == 'linux-android':\n+                ostype = 'linux-androideabi'\n         elif cputype == 'armv6l':\n             cputype = 'arm'\n-            ostype += 'eabihf'\n+            if ostype == 'linux-android':\n+                ostype = 'linux-androideabi'\n+            else:\n+                ostype += 'eabihf'\n         elif cputype in {'armv7l', 'armv8l'}:\n             cputype = 'armv7'\n-            ostype += 'eabihf'\n-        elif cputype == 'aarch64':\n-            cputype = 'aarch64'\n-        elif cputype == 'arm64':\n+            if ostype == 'linux-android':\n+                ostype = 'linux-androideabi'\n+            else:\n+                ostype += 'eabihf'\n+        elif cputype in {'aarch64', 'arm64'}:\n             cputype = 'aarch64'\n         elif cputype == 'mips':\n             if sys.byteorder == 'big':\n@@ -512,6 +544,54 @@ def build_triple(self):\n \n         return \"{}-{}\".format(cputype, ostype)\n \n+    def update_submodules(self):\n+        if (not os.path.exists(os.path.join(self.rust_root, \".git\"))) or \\\n+            self.get_toml('submodules') == \"false\" or \\\n+            self.get_mk('CFG_DISABLE_MANAGE_SUBMODULES') == \"1\":\n+            return\n+\n+        print('Updating submodules')\n+        output = self.output([\"git\", \"submodule\", \"status\"], cwd=self.rust_root)\n+        submodules = []\n+        for line in output.splitlines():\n+            # NOTE `git submodule status` output looks like this:\n+            #\n+            # -5066b7dcab7e700844b0e2ba71b8af9dc627a59b src/liblibc\n+            # +b37ef24aa82d2be3a3cc0fe89bf82292f4ca181c src/compiler-rt (remotes/origin/..)\n+            #  e058ca661692a8d01f8cf9d35939dfe3105ce968 src/jemalloc (3.6.0-533-ge058ca6)\n+            #\n+            # The first character can be '-', '+' or ' ' and denotes the\n+            # `State` of the submodule Right next to this character is the\n+            # SHA-1 of the submodule HEAD And after that comes the path to the\n+            # submodule\n+            path = line[1:].split(' ')[1]\n+            submodules.append([path, line[0]])\n+\n+        self.run([\"git\", \"submodule\", \"sync\"], cwd=self.rust_root)\n+\n+        for submod in submodules:\n+            path, status = submod\n+            if path.endswith('llvm') and \\\n+                (self.get_toml('llvm-config') or self.get_mk('CFG_LLVM_ROOT')):\n+                continue\n+            if path.endswith('jemalloc') and \\\n+                (self.get_toml('jemalloc') or self.get_mk('CFG_JEMALLOC_ROOT')):\n+                continue\n+            submod_path = os.path.join(self.rust_root, path)\n+\n+            if status == ' ':\n+                self.run([\"git\", \"reset\", \"--hard\"], cwd=submod_path)\n+                self.run([\"git\", \"clean\", \"-fdx\"], cwd=submod_path)\n+            elif status == '+':\n+                self.run([\"git\", \"submodule\", \"update\", path], cwd=self.rust_root)\n+                self.run([\"git\", \"reset\", \"--hard\"], cwd=submod_path)\n+                self.run([\"git\", \"clean\", \"-fdx\"], cwd=submod_path)\n+            elif status == '-':\n+                self.run([\"git\", \"submodule\", \"init\", path], cwd=self.rust_root)\n+                self.run([\"git\", \"submodule\", \"update\", path], cwd=self.rust_root)\n+            else:\n+                raise ValueError('unknown submodule status: ' + status)\n+\n def bootstrap():\n     parser = argparse.ArgumentParser(description='Build rust')\n     parser.add_argument('--config')\n@@ -572,7 +652,15 @@ def bootstrap():\n             shutil.rmtree('.cargo')\n \n     data = stage0_data(rb.rust_root)\n-    rb._rustc_channel, rb._rustc_date = data['rustc'].split('-', 1)\n+    rb._date = data['date']\n+    rb._rustc_channel = data['rustc']\n+    rb._cargo_channel = data['cargo']\n+    if 'dev' in data:\n+        rb._download_url = 'https://dev-static.rust-lang.org'\n+    else:\n+        rb._download_url = 'https://static.rust-lang.org'\n+\n+    rb.update_submodules()\n \n     # Fetch/build the bootstrap\n     rb.build = rb.build_triple()"}, {"sha": "1b9536fba357aa2f840fbaf7ead73a590aefbd78", "filename": "src/bootstrap/channel.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fbootstrap%2Fchannel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fbootstrap%2Fchannel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fchannel.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -23,7 +23,7 @@ use build_helper::output;\n use Build;\n \n // The version number\n-pub const CFG_RELEASE_NUM: &'static str = \"1.18.0\";\n+pub const CFG_RELEASE_NUM: &'static str = \"1.19.0\";\n \n // An optional number to put after the label, e.g. '.2' -> '-beta.2'\n // Be sure to make this starts with a dot to conform to semver pre-release"}, {"sha": "d24bb074cd374d13bb50ad7cc8ce670f090e65c6", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 78, "deletions": 125, "changes": 203, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -28,7 +28,7 @@ use {Build, Compiler, Mode};\n use dist;\n use util::{self, dylib_path, dylib_path_var, exe};\n \n-const ADB_TEST_DIR: &'static str = \"/data/tmp\";\n+const ADB_TEST_DIR: &'static str = \"/data/tmp/work\";\n \n /// The two modes of the test runner; tests or benchmarks.\n #[derive(Copy, Clone)]\n@@ -78,14 +78,6 @@ pub fn linkcheck(build: &Build, host: &str) {\n pub fn cargotest(build: &Build, stage: u32, host: &str) {\n     let ref compiler = Compiler::new(stage, host);\n \n-    // Configure PATH to find the right rustc. NB. we have to use PATH\n-    // and not RUSTC because the Cargo test suite has tests that will\n-    // fail if rustc is not spelled `rustc`.\n-    let path = build.sysroot(compiler).join(\"bin\");\n-    let old_path = ::std::env::var(\"PATH\").expect(\"\");\n-    let sep = if cfg!(windows) { \";\" } else {\":\" };\n-    let ref newpath = format!(\"{}{}{}\", path.display(), sep, old_path);\n-\n     // Note that this is a short, cryptic, and not scoped directory name. This\n     // is currently to minimize the length of path on Windows where we otherwise\n     // quickly run into path name limit constraints.\n@@ -95,9 +87,35 @@ pub fn cargotest(build: &Build, stage: u32, host: &str) {\n     let _time = util::timeit();\n     let mut cmd = Command::new(build.tool(&Compiler::new(0, host), \"cargotest\"));\n     build.prepare_tool_cmd(compiler, &mut cmd);\n-    build.run(cmd.env(\"PATH\", newpath)\n-                 .arg(&build.cargo)\n-                 .arg(&out_dir));\n+    build.run(cmd.arg(&build.cargo)\n+                 .arg(&out_dir)\n+                 .env(\"RUSTC\", build.compiler_path(compiler))\n+                 .env(\"RUSTDOC\", build.rustdoc(compiler)))\n+}\n+\n+/// Runs `cargo test` for `cargo` packaged with Rust.\n+pub fn cargo(build: &Build, stage: u32, host: &str) {\n+    let ref compiler = Compiler::new(stage, host);\n+\n+    // Configure PATH to find the right rustc. NB. we have to use PATH\n+    // and not RUSTC because the Cargo test suite has tests that will\n+    // fail if rustc is not spelled `rustc`.\n+    let path = build.sysroot(compiler).join(\"bin\");\n+    let old_path = ::std::env::var(\"PATH\").expect(\"\");\n+    let sep = if cfg!(windows) { \";\" } else {\":\" };\n+    let ref newpath = format!(\"{}{}{}\", path.display(), sep, old_path);\n+\n+    let mut cargo = build.cargo(compiler, Mode::Tool, host, \"test\");\n+    cargo.arg(\"--manifest-path\").arg(build.src.join(\"src/tools/cargo/Cargo.toml\"));\n+\n+    // Don't build tests dynamically, just a pain to work with\n+    cargo.env(\"RUSTC_NO_PREFER_DYNAMIC\", \"1\");\n+\n+    // Don't run cross-compile tests, we may not have cross-compiled libstd libs\n+    // available.\n+    cargo.env(\"CFG_DISABLE_CROSS_TESTS\", \"1\");\n+\n+    build.run(cargo.env(\"PATH\", newpath));\n }\n \n /// Runs the `tidy` tool as compiled in `stage` by the `host` compiler.\n@@ -225,10 +243,10 @@ pub fn compiletest(build: &Build,\n            .arg(\"--llvm-cxxflags\").arg(\"\");\n     }\n \n-    if build.qemu_rootfs(target).is_some() {\n-        cmd.arg(\"--qemu-test-client\")\n+    if build.remote_tested(target) {\n+        cmd.arg(\"--remote-test-client\")\n            .arg(build.tool(&Compiler::new(0, &build.config.build),\n-                           \"qemu-test-client\"));\n+                           \"remote-test-client\"));\n     }\n \n     // Running a C compiler on MSVC requires a few env vars to be set, to be\n@@ -427,9 +445,7 @@ pub fn krate(build: &Build,\n     dylib_path.insert(0, build.sysroot_libdir(&compiler, target));\n     cargo.env(dylib_path_var(), env::join_paths(&dylib_path).unwrap());\n \n-    if target.contains(\"android\") ||\n-       target.contains(\"emscripten\") ||\n-       build.qemu_rootfs(target).is_some() {\n+    if target.contains(\"emscripten\") || build.remote_tested(target) {\n         cargo.arg(\"--no-run\");\n     }\n \n@@ -441,75 +457,24 @@ pub fn krate(build: &Build,\n \n     let _time = util::timeit();\n \n-    if target.contains(\"android\") {\n-        build.run(&mut cargo);\n-        krate_android(build, &compiler, target, mode);\n-    } else if target.contains(\"emscripten\") {\n+    if target.contains(\"emscripten\") {\n         build.run(&mut cargo);\n         krate_emscripten(build, &compiler, target, mode);\n-    } else if build.qemu_rootfs(target).is_some() {\n+    } else if build.remote_tested(target) {\n         build.run(&mut cargo);\n-        krate_qemu(build, &compiler, target, mode);\n+        krate_remote(build, &compiler, target, mode);\n     } else {\n         cargo.args(&build.flags.cmd.test_args());\n         build.run(&mut cargo);\n     }\n }\n \n-fn krate_android(build: &Build,\n-                 compiler: &Compiler,\n-                 target: &str,\n-                 mode: Mode) {\n-    let mut tests = Vec::new();\n-    let out_dir = build.cargo_out(compiler, mode, target);\n-    find_tests(&out_dir, target, &mut tests);\n-    find_tests(&out_dir.join(\"deps\"), target, &mut tests);\n-\n-    for test in tests {\n-        build.run(Command::new(\"adb\").arg(\"push\").arg(&test).arg(ADB_TEST_DIR));\n-\n-        let test_file_name = test.file_name().unwrap().to_string_lossy();\n-        let log = format!(\"{}/check-stage{}-T-{}-H-{}-{}.log\",\n-                          ADB_TEST_DIR,\n-                          compiler.stage,\n-                          target,\n-                          compiler.host,\n-                          test_file_name);\n-        let quiet = if build.config.quiet_tests { \"--quiet\" } else { \"\" };\n-        let program = format!(\"(cd {dir}; \\\n-                                LD_LIBRARY_PATH=./{target} ./{test} \\\n-                                    --logfile {log} \\\n-                                    {quiet} \\\n-                                    {args})\",\n-                              dir = ADB_TEST_DIR,\n-                              target = target,\n-                              test = test_file_name,\n-                              log = log,\n-                              quiet = quiet,\n-                              args = build.flags.cmd.test_args().join(\" \"));\n-\n-        let output = output(Command::new(\"adb\").arg(\"shell\").arg(&program));\n-        println!(\"{}\", output);\n-\n-        t!(fs::create_dir_all(build.out.join(\"tmp\")));\n-        build.run(Command::new(\"adb\")\n-                          .arg(\"pull\")\n-                          .arg(&log)\n-                          .arg(build.out.join(\"tmp\")));\n-        build.run(Command::new(\"adb\").arg(\"shell\").arg(\"rm\").arg(&log));\n-        if !output.contains(\"result: ok\") {\n-            panic!(\"some tests failed\");\n-        }\n-    }\n-}\n-\n fn krate_emscripten(build: &Build,\n                     compiler: &Compiler,\n                     target: &str,\n                     mode: Mode) {\n     let mut tests = Vec::new();\n     let out_dir = build.cargo_out(compiler, mode, target);\n-    find_tests(&out_dir, target, &mut tests);\n     find_tests(&out_dir.join(\"deps\"), target, &mut tests);\n \n     for test in tests {\n@@ -525,17 +490,16 @@ fn krate_emscripten(build: &Build,\n     }\n }\n \n-fn krate_qemu(build: &Build,\n-              compiler: &Compiler,\n-              target: &str,\n-              mode: Mode) {\n+fn krate_remote(build: &Build,\n+                compiler: &Compiler,\n+                target: &str,\n+                mode: Mode) {\n     let mut tests = Vec::new();\n     let out_dir = build.cargo_out(compiler, mode, target);\n-    find_tests(&out_dir, target, &mut tests);\n     find_tests(&out_dir.join(\"deps\"), target, &mut tests);\n \n     let tool = build.tool(&Compiler::new(0, &build.config.build),\n-                          \"qemu-test-client\");\n+                          \"remote-test-client\");\n     for test in tests {\n         let mut cmd = Command::new(&tool);\n         cmd.arg(\"run\")\n@@ -548,7 +512,6 @@ fn krate_qemu(build: &Build,\n     }\n }\n \n-\n fn find_tests(dir: &Path,\n               target: &str,\n               dst: &mut Vec<PathBuf>) {\n@@ -566,60 +529,29 @@ fn find_tests(dir: &Path,\n     }\n }\n \n-pub fn emulator_copy_libs(build: &Build, compiler: &Compiler, target: &str) {\n-    if target.contains(\"android\") {\n-        android_copy_libs(build, compiler, target)\n-    } else if let Some(s) = build.qemu_rootfs(target) {\n-        qemu_copy_libs(build, compiler, target, s)\n-    }\n-}\n-\n-fn android_copy_libs(build: &Build, compiler: &Compiler, target: &str) {\n-    println!(\"Android copy libs to emulator ({})\", target);\n-    build.run(Command::new(\"adb\").arg(\"wait-for-device\"));\n-    build.run(Command::new(\"adb\").arg(\"remount\"));\n-    build.run(Command::new(\"adb\").args(&[\"shell\", \"rm\", \"-r\", ADB_TEST_DIR]));\n-    build.run(Command::new(\"adb\").args(&[\"shell\", \"mkdir\", ADB_TEST_DIR]));\n-    build.run(Command::new(\"adb\")\n-                      .arg(\"push\")\n-                      .arg(build.src.join(\"src/etc/adb_run_wrapper.sh\"))\n-                      .arg(ADB_TEST_DIR));\n-\n-    let target_dir = format!(\"{}/{}\", ADB_TEST_DIR, target);\n-    build.run(Command::new(\"adb\").args(&[\"shell\", \"mkdir\", &target_dir]));\n-\n-    for f in t!(build.sysroot_libdir(compiler, target).read_dir()) {\n-        let f = t!(f);\n-        let name = f.file_name().into_string().unwrap();\n-        if util::is_dylib(&name) {\n-            build.run(Command::new(\"adb\")\n-                              .arg(\"push\")\n-                              .arg(f.path())\n-                              .arg(&target_dir));\n-        }\n+pub fn remote_copy_libs(build: &Build, compiler: &Compiler, target: &str) {\n+    if !build.remote_tested(target) {\n+        return\n     }\n-}\n \n-fn qemu_copy_libs(build: &Build,\n-                  compiler: &Compiler,\n-                  target: &str,\n-                  rootfs: &Path) {\n-    println!(\"QEMU copy libs to emulator ({})\", target);\n-    assert!(target.starts_with(\"arm\"), \"only works with arm for now\");\n+    println!(\"REMOTE copy libs to emulator ({})\", target);\n     t!(fs::create_dir_all(build.out.join(\"tmp\")));\n \n-    // Copy our freshly compiled test server over to the rootfs\n     let server = build.cargo_out(compiler, Mode::Tool, target)\n-                      .join(exe(\"qemu-test-server\", target));\n-    t!(fs::copy(&server, rootfs.join(\"testd\")));\n+                      .join(exe(\"remote-test-server\", target));\n \n     // Spawn the emulator and wait for it to come online\n     let tool = build.tool(&Compiler::new(0, &build.config.build),\n-                          \"qemu-test-client\");\n-    build.run(Command::new(&tool)\n-                      .arg(\"spawn-emulator\")\n-                      .arg(rootfs)\n-                      .arg(build.out.join(\"tmp\")));\n+                          \"remote-test-client\");\n+    let mut cmd = Command::new(&tool);\n+    cmd.arg(\"spawn-emulator\")\n+       .arg(target)\n+       .arg(&server)\n+       .arg(build.out.join(\"tmp\"));\n+    if let Some(rootfs) = build.qemu_rootfs(target) {\n+        cmd.arg(rootfs);\n+    }\n+    build.run(&mut cmd);\n \n     // Push all our dylibs to the emulator\n     for f in t!(build.sysroot_libdir(compiler, target).read_dir()) {\n@@ -645,6 +577,7 @@ pub fn distcheck(build: &Build) {\n         return\n     }\n \n+    println!(\"Distcheck\");\n     let dir = build.out.join(\"tmp\").join(\"distcheck\");\n     let _ = fs::remove_dir_all(&dir);\n     t!(fs::create_dir_all(&dir));\n@@ -662,6 +595,26 @@ pub fn distcheck(build: &Build) {\n     build.run(Command::new(build_helper::make(&build.config.build))\n                      .arg(\"check\")\n                      .current_dir(&dir));\n+\n+    // Now make sure that rust-src has all of libstd's dependencies\n+    println!(\"Distcheck rust-src\");\n+    let dir = build.out.join(\"tmp\").join(\"distcheck-src\");\n+    let _ = fs::remove_dir_all(&dir);\n+    t!(fs::create_dir_all(&dir));\n+\n+    let mut cmd = Command::new(\"tar\");\n+    cmd.arg(\"-xzf\")\n+       .arg(dist::rust_src_installer(build))\n+       .arg(\"--strip-components=1\")\n+       .current_dir(&dir);\n+    build.run(&mut cmd);\n+\n+    let toml = dir.join(\"rust-src/lib/rustlib/src/rust/src/libstd/Cargo.toml\");\n+    build.run(Command::new(&build.cargo)\n+                     .arg(\"generate-lockfile\")\n+                     .arg(\"--manifest-path\")\n+                     .arg(&toml)\n+                     .current_dir(&dir));\n }\n \n /// Test the build system itself"}, {"sha": "c810a0e05d4d2c528b99e000eb2284632a191d50", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -115,6 +115,13 @@ pub fn std_link(build: &Build,\n     if target.contains(\"musl\") && !target.contains(\"mips\") {\n         copy_musl_third_party_objects(build, target, &libdir);\n     }\n+\n+    if build.config.sanitizers && compiler.stage != 0 && target == \"x86_64-apple-darwin\" {\n+        // The sanitizers are only built in stage1 or above, so the dylibs will\n+        // be missing in stage0 and causes panic. See the `std()` function above\n+        // for reason why the sanitizers are not built in stage0.\n+        copy_apple_sanitizer_dylibs(&build.native_dir(target), \"osx\", &libdir);\n+    }\n }\n \n /// Copies the crt(1,i,n).o startup objects\n@@ -126,6 +133,18 @@ fn copy_musl_third_party_objects(build: &Build, target: &str, into: &Path) {\n     }\n }\n \n+fn copy_apple_sanitizer_dylibs(native_dir: &Path, platform: &str, into: &Path) {\n+    for &sanitizer in &[\"asan\", \"tsan\"] {\n+        let filename = format!(\"libclang_rt.{}_{}_dynamic.dylib\", sanitizer, platform);\n+        let mut src_path = native_dir.join(sanitizer);\n+        src_path.push(\"build\");\n+        src_path.push(\"lib\");\n+        src_path.push(\"darwin\");\n+        src_path.push(&filename);\n+        copy(&src_path, &into.join(filename));\n+    }\n+}\n+\n /// Build and prepare startup objects like rsbegin.o and rsend.o\n ///\n /// These are primarily used on Windows right now for linking executables/dlls.\n@@ -442,10 +461,7 @@ pub fn tool(build: &Build, stage: u32, target: &str, tool: &str) {\n     let compiler = Compiler::new(stage, &build.config.build);\n \n     let mut cargo = build.cargo(&compiler, Mode::Tool, target, \"build\");\n-    let mut dir = build.src.join(tool);\n-    if !dir.exists() {\n-        dir = build.src.join(\"src/tools\").join(tool);\n-    }\n+    let dir = build.src.join(\"src/tools\").join(tool);\n     cargo.arg(\"--manifest-path\").arg(dir.join(\"Cargo.toml\"));\n \n     // We don't want to build tools dynamically as they'll be running across"}, {"sha": "abad216d89be48c78482ca82fb6d67ee016bf1c6", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -94,12 +94,15 @@ pub struct Config {\n     pub backtrace: bool, // support for RUST_BACKTRACE\n \n     // misc\n+    pub low_priority: bool,\n     pub channel: String,\n     pub quiet_tests: bool,\n     // Fallback musl-root for all targets\n     pub musl_root: Option<PathBuf>,\n     pub prefix: Option<PathBuf>,\n+    pub sysconfdir: Option<PathBuf>,\n     pub docdir: Option<PathBuf>,\n+    pub bindir: Option<PathBuf>,\n     pub libdir: Option<PathBuf>,\n     pub libdir_relative: Option<PathBuf>,\n     pub mandir: Option<PathBuf>,\n@@ -146,6 +149,7 @@ struct Build {\n     target: Vec<String>,\n     cargo: Option<String>,\n     rustc: Option<String>,\n+    low_priority: Option<bool>,\n     compiler_docs: Option<bool>,\n     docs: Option<bool>,\n     submodules: Option<bool>,\n@@ -165,9 +169,11 @@ struct Build {\n #[derive(RustcDecodable, Default, Clone)]\n struct Install {\n     prefix: Option<String>,\n-    mandir: Option<String>,\n+    sysconfdir: Option<String>,\n     docdir: Option<String>,\n+    bindir: Option<String>,\n     libdir: Option<String>,\n+    mandir: Option<String>,\n }\n \n /// TOML representation of how the LLVM build is configured.\n@@ -264,7 +270,7 @@ impl Config {\n             let table = match p.parse() {\n                 Some(table) => table,\n                 None => {\n-                    println!(\"failed to parse TOML configuration:\");\n+                    println!(\"failed to parse TOML configuration '{}':\", file.to_str().unwrap());\n                     for err in p.errors.iter() {\n                         let (loline, locol) = p.to_linecol(err.lo);\n                         let (hiline, hicol) = p.to_linecol(err.hi);\n@@ -302,6 +308,7 @@ impl Config {\n         config.nodejs = build.nodejs.map(PathBuf::from);\n         config.gdb = build.gdb.map(PathBuf::from);\n         config.python = build.python.map(PathBuf::from);\n+        set(&mut config.low_priority, build.low_priority);\n         set(&mut config.compiler_docs, build.compiler_docs);\n         set(&mut config.docs, build.docs);\n         set(&mut config.submodules, build.submodules);\n@@ -315,9 +322,11 @@ impl Config {\n \n         if let Some(ref install) = toml.install {\n             config.prefix = install.prefix.clone().map(PathBuf::from);\n-            config.mandir = install.mandir.clone().map(PathBuf::from);\n+            config.sysconfdir = install.sysconfdir.clone().map(PathBuf::from);\n             config.docdir = install.docdir.clone().map(PathBuf::from);\n+            config.bindir = install.bindir.clone().map(PathBuf::from);\n             config.libdir = install.libdir.clone().map(PathBuf::from);\n+            config.mandir = install.mandir.clone().map(PathBuf::from);\n         }\n \n         if let Some(ref llvm) = toml.llvm {\n@@ -523,9 +532,15 @@ impl Config {\n                 \"CFG_PREFIX\" => {\n                     self.prefix = Some(PathBuf::from(value));\n                 }\n+                \"CFG_SYSCONFDIR\" => {\n+                    self.sysconfdir = Some(PathBuf::from(value));\n+                }\n                 \"CFG_DOCDIR\" => {\n                     self.docdir = Some(PathBuf::from(value));\n                 }\n+                \"CFG_BINDIR\" => {\n+                    self.bindir = Some(PathBuf::from(value));\n+                }\n                 \"CFG_LIBDIR\" => {\n                     self.libdir = Some(PathBuf::from(value));\n                 }"}, {"sha": "95cca96f7fcc027f1143a2f0a79393f6a651f7de", "filename": "src/bootstrap/config.toml.example", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fbootstrap%2Fconfig.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fbootstrap%2Fconfig.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.toml.example?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -51,7 +51,7 @@\n # support. You'll need to write a target specification at least, and most\n # likely, teach rustc about the C ABI of the target. Get in touch with the\n # Rust team and file an issue if you need assistance in porting!\n-#targets = \"X86;ARM;AArch64;Mips;PowerPC;SystemZ;JSBackend;MSP430;Sparc;NVPTX\"\n+#targets = \"X86;ARM;AArch64;Mips;PowerPC;SystemZ;JSBackend;MSP430;Sparc;NVPTX;Hexagon\"\n \n # Cap the number of parallel linker invocations when compiling LLVM.\n # This can be useful when building LLVM with debug info, which significantly\n@@ -152,6 +152,10 @@\n # known-good version of OpenSSL, compile it, and link it to Cargo.\n #openssl-static = false\n \n+# Run the build with low priority, by setting the process group's \"nice\" value\n+# to +10 on Unix platforms, and by using a \"low priority\" job object on Windows.\n+#low-priority = false\n+\n # =============================================================================\n # General install configuration options\n # =============================================================================\n@@ -160,21 +164,31 @@\n # Instead of installing to /usr/local, install to this path instead.\n #prefix = \"/usr/local\"\n \n+# Where to install system configuration files\n+# If this is a relative path, it will get installed in `prefix` above\n+#sysconfdir = \"/etc\"\n+\n+# Where to install documentation in `prefix` above\n+#docdir = \"share/doc/rust\"\n+\n+# Where to install binaries in `prefix` above\n+#bindir = \"bin\"\n+\n # Where to install libraries in `prefix` above\n #libdir = \"lib\"\n \n # Where to install man pages in `prefix` above\n #mandir = \"share/man\"\n \n-# Where to install documentation in `prefix` above\n-#docdir = \"share/doc/rust\"\n-\n # =============================================================================\n # Options for compiling Rust code itself\n # =============================================================================\n [rust]\n \n # Whether or not to optimize the compiler and standard library\n+# Note: the slowness of the non optimized compiler compiling itself usually\n+#       outweighs the time gains in not doing optimizations, therefore a\n+#       full bootstrap takes much more time with optimize set to false.\n #optimize = true\n \n # Number of codegen units to use for each compiler invocation. A value of 0"}, {"sha": "511f2c9e80ec72e732caba01da7cbb468850745b", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 143, "deletions": 98, "changes": 241, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -26,12 +26,6 @@ use std::process::{Command, Stdio};\n \n use build_helper::output;\n \n-#[cfg(not(target_os = \"solaris\"))]\n-const SH_CMD: &'static str = \"sh\";\n-// On Solaris, sh is the historical bourne shell, not a POSIX shell, or bash.\n-#[cfg(target_os = \"solaris\")]\n-const SH_CMD: &'static str = \"bash\";\n-\n use {Build, Compiler, Mode};\n use channel;\n use util::{cp_r, libdir, is_dylib, cp_filtered, copy, exe};\n@@ -55,6 +49,10 @@ pub fn tmpdir(build: &Build) -> PathBuf {\n     build.out.join(\"tmp/dist\")\n }\n \n+fn rust_installer(build: &Build) -> Command {\n+    build.tool_cmd(&Compiler::new(0, &build.config.build), \"rust-installer\")\n+}\n+\n /// Builds the `rust-docs` installer component.\n ///\n /// Slurps up documentation from the `stage`'s `host`.\n@@ -74,14 +72,14 @@ pub fn docs(build: &Build, stage: u32, host: &str) {\n     let src = build.out.join(host).join(\"doc\");\n     cp_r(&src, &dst);\n \n-    let mut cmd = Command::new(SH_CMD);\n-    cmd.arg(sanitize_sh(&build.src.join(\"src/rust-installer/gen-installer.sh\")))\n+    let mut cmd = rust_installer(build);\n+    cmd.arg(\"generate\")\n        .arg(\"--product-name=Rust-Documentation\")\n        .arg(\"--rel-manifest-dir=rustlib\")\n        .arg(\"--success-message=Rust-documentation-is-installed.\")\n-       .arg(format!(\"--image-dir={}\", sanitize_sh(&image)))\n-       .arg(format!(\"--work-dir={}\", sanitize_sh(&tmpdir(build))))\n-       .arg(format!(\"--output-dir={}\", sanitize_sh(&distdir(build))))\n+       .arg(\"--image-dir\").arg(&image)\n+       .arg(\"--work-dir\").arg(&tmpdir(build))\n+       .arg(\"--output-dir\").arg(&distdir(build))\n        .arg(format!(\"--package-name={}-{}\", name, host))\n        .arg(\"--component-name=rust-docs\")\n        .arg(\"--legacy-manifest-dirs=rustlib,cargo\")\n@@ -124,14 +122,14 @@ pub fn mingw(build: &Build, host: &str) {\n        .arg(host);\n     build.run(&mut cmd);\n \n-    let mut cmd = Command::new(SH_CMD);\n-    cmd.arg(sanitize_sh(&build.src.join(\"src/rust-installer/gen-installer.sh\")))\n+    let mut cmd = rust_installer(build);\n+    cmd.arg(\"generate\")\n        .arg(\"--product-name=Rust-MinGW\")\n        .arg(\"--rel-manifest-dir=rustlib\")\n        .arg(\"--success-message=Rust-MinGW-is-installed.\")\n-       .arg(format!(\"--image-dir={}\", sanitize_sh(&image)))\n-       .arg(format!(\"--work-dir={}\", sanitize_sh(&tmpdir(build))))\n-       .arg(format!(\"--output-dir={}\", sanitize_sh(&distdir(build))))\n+       .arg(\"--image-dir\").arg(&image)\n+       .arg(\"--work-dir\").arg(&tmpdir(build))\n+       .arg(\"--output-dir\").arg(&distdir(build))\n        .arg(format!(\"--package-name={}-{}\", name, host))\n        .arg(\"--component-name=rust-mingw\")\n        .arg(\"--legacy-manifest-dirs=rustlib,cargo\");\n@@ -190,15 +188,15 @@ pub fn rustc(build: &Build, stage: u32, host: &str) {\n     }\n \n     // Finally, wrap everything up in a nice tarball!\n-    let mut cmd = Command::new(SH_CMD);\n-    cmd.arg(sanitize_sh(&build.src.join(\"src/rust-installer/gen-installer.sh\")))\n+    let mut cmd = rust_installer(build);\n+    cmd.arg(\"generate\")\n        .arg(\"--product-name=Rust\")\n        .arg(\"--rel-manifest-dir=rustlib\")\n        .arg(\"--success-message=Rust-is-ready-to-roll.\")\n-       .arg(format!(\"--image-dir={}\", sanitize_sh(&image)))\n-       .arg(format!(\"--work-dir={}\", sanitize_sh(&tmpdir(build))))\n-       .arg(format!(\"--output-dir={}\", sanitize_sh(&distdir(build))))\n-       .arg(format!(\"--non-installed-overlay={}\", sanitize_sh(&overlay)))\n+       .arg(\"--image-dir\").arg(&image)\n+       .arg(\"--work-dir\").arg(&tmpdir(build))\n+       .arg(\"--output-dir\").arg(&distdir(build))\n+       .arg(\"--non-installed-overlay\").arg(&overlay)\n        .arg(format!(\"--package-name={}-{}\", name, host))\n        .arg(\"--component-name=rustc\")\n        .arg(\"--legacy-manifest-dirs=rustlib,cargo\");\n@@ -254,7 +252,12 @@ pub fn debugger_scripts(build: &Build,\n         install(&build.src.join(\"src/etc/\").join(file), &dst, 0o644);\n     };\n     if host.contains(\"windows-msvc\") {\n-        // no debugger scripts\n+        // windbg debugger scripts\n+        install(&build.src.join(\"src/etc/rust-windbg.cmd\"), &sysroot.join(\"bin\"),\n+            0o755);\n+\n+        cp_debugger_script(\"natvis/libcore.natvis\");\n+        cp_debugger_script(\"natvis/libcollections.natvis\");\n     } else {\n         cp_debugger_script(\"debugger_pretty_printers_common.py\");\n \n@@ -295,26 +298,33 @@ pub fn std(build: &Build, compiler: &Compiler, target: &str) {\n     let src = build.sysroot(compiler).join(\"lib/rustlib\");\n     cp_r(&src.join(target), &dst);\n \n-    let mut cmd = Command::new(SH_CMD);\n-    cmd.arg(sanitize_sh(&build.src.join(\"src/rust-installer/gen-installer.sh\")))\n+    let mut cmd = rust_installer(build);\n+    cmd.arg(\"generate\")\n        .arg(\"--product-name=Rust\")\n        .arg(\"--rel-manifest-dir=rustlib\")\n        .arg(\"--success-message=std-is-standing-at-the-ready.\")\n-       .arg(format!(\"--image-dir={}\", sanitize_sh(&image)))\n-       .arg(format!(\"--work-dir={}\", sanitize_sh(&tmpdir(build))))\n-       .arg(format!(\"--output-dir={}\", sanitize_sh(&distdir(build))))\n+       .arg(\"--image-dir\").arg(&image)\n+       .arg(\"--work-dir\").arg(&tmpdir(build))\n+       .arg(\"--output-dir\").arg(&distdir(build))\n        .arg(format!(\"--package-name={}-{}\", name, target))\n        .arg(format!(\"--component-name=rust-std-{}\", target))\n        .arg(\"--legacy-manifest-dirs=rustlib,cargo\");\n     build.run(&mut cmd);\n     t!(fs::remove_dir_all(&image));\n }\n \n+/// The path to the complete rustc-src tarball\n pub fn rust_src_location(build: &Build) -> PathBuf {\n     let plain_name = format!(\"rustc-{}-src\", build.rust_package_vers());\n     distdir(build).join(&format!(\"{}.tar.gz\", plain_name))\n }\n \n+/// The path to the rust-src component installer\n+pub fn rust_src_installer(build: &Build) -> PathBuf {\n+    let name = pkgname(build, \"rust-src\");\n+    distdir(build).join(&format!(\"{}.tar.gz\", name))\n+}\n+\n /// Creates a tarball of save-analysis metadata, if available.\n pub fn analysis(build: &Build, compiler: &Compiler, target: &str) {\n     assert!(build.config.extended);\n@@ -344,14 +354,14 @@ pub fn analysis(build: &Build, compiler: &Compiler, target: &str) {\n     println!(\"image_src: {:?}, dst: {:?}\", image_src, dst);\n     cp_r(&image_src, &dst);\n \n-    let mut cmd = Command::new(SH_CMD);\n-    cmd.arg(sanitize_sh(&build.src.join(\"src/rust-installer/gen-installer.sh\")))\n+    let mut cmd = rust_installer(build);\n+    cmd.arg(\"generate\")\n        .arg(\"--product-name=Rust\")\n        .arg(\"--rel-manifest-dir=rustlib\")\n        .arg(\"--success-message=save-analysis-saved.\")\n-       .arg(format!(\"--image-dir={}\", sanitize_sh(&image)))\n-       .arg(format!(\"--work-dir={}\", sanitize_sh(&tmpdir(build))))\n-       .arg(format!(\"--output-dir={}\", sanitize_sh(&distdir(build))))\n+       .arg(\"--image-dir\").arg(&image)\n+       .arg(\"--work-dir\").arg(&tmpdir(build))\n+       .arg(\"--output-dir\").arg(&distdir(build))\n        .arg(format!(\"--package-name={}-{}\", name, target))\n        .arg(format!(\"--component-name=rust-analysis-{}\", target))\n        .arg(\"--legacy-manifest-dirs=rustlib,cargo\");\n@@ -369,13 +379,11 @@ pub fn rust_src(build: &Build) {\n \n     println!(\"Dist src\");\n \n-    let name = pkgname(build, \"rust-src\");\n-    let image = tmpdir(build).join(format!(\"{}-image\", name));\n-    let _ = fs::remove_dir_all(&image);\n-\n-    let dst = image.join(\"lib/rustlib/src\");\n-    let dst_src = dst.join(\"rust\");\n-    t!(fs::create_dir_all(&dst_src));\n+    // Make sure that the root folder of tarball has the correct name\n+    let plain_name = format!(\"rustc-{}-src\", build.rust_package_vers());\n+    let plain_dst_src = tmpdir(build).join(&plain_name);\n+    let _ = fs::remove_dir_all(&plain_dst_src);\n+    t!(fs::create_dir_all(&plain_dst_src));\n \n     // This is the set of root paths which will become part of the source package\n     let src_files = [\n@@ -391,8 +399,6 @@ pub fn rust_src(build: &Build) {\n     let src_dirs = [\n         \"man\",\n         \"src\",\n-        \"cargo\",\n-        \"rls\",\n     ];\n \n     let filter_fn = move |path: &Path| {\n@@ -424,13 +430,13 @@ pub fn rust_src(build: &Build) {\n \n     // Copy the directories using our filter\n     for item in &src_dirs {\n-        let dst = &dst_src.join(item);\n+        let dst = &plain_dst_src.join(item);\n         t!(fs::create_dir(dst));\n         cp_filtered(&build.src.join(item), dst, &filter_fn);\n     }\n     // Copy the files normally\n     for item in &src_files {\n-        copy(&build.src.join(item), &dst_src.join(item));\n+        copy(&build.src.join(item), &plain_dst_src.join(item));\n     }\n \n     // If we're building from git sources, we need to vendor a complete distribution.\n@@ -455,41 +461,81 @@ pub fn rust_src(build: &Build) {\n         // Vendor all Cargo dependencies\n         let mut cmd = Command::new(&build.cargo);\n         cmd.arg(\"vendor\")\n-           .current_dir(&dst_src.join(\"src\"));\n+           .current_dir(&plain_dst_src.join(\"src\"));\n         build.run(&mut cmd);\n     }\n \n+    // Create the version file\n+    write_file(&plain_dst_src.join(\"version\"), build.rust_version().as_bytes());\n+\n+    // Create plain source tarball\n+    let mut tarball = rust_src_location(build);\n+    tarball.set_extension(\"\"); // strip .gz\n+    tarball.set_extension(\"\"); // strip .tar\n+    if let Some(dir) = tarball.parent() {\n+        t!(fs::create_dir_all(dir));\n+    }\n+    let mut cmd = rust_installer(build);\n+    cmd.arg(\"tarball\")\n+       .arg(\"--input\").arg(&plain_name)\n+       .arg(\"--output\").arg(&tarball)\n+       .arg(\"--work-dir=.\")\n+       .current_dir(tmpdir(build));\n+    build.run(&mut cmd);\n+\n+\n+    let name = pkgname(build, \"rust-src\");\n+    let image = tmpdir(build).join(format!(\"{}-image\", name));\n+    let _ = fs::remove_dir_all(&image);\n+\n+    let dst = image.join(\"lib/rustlib/src\");\n+    let dst_src = dst.join(\"rust\");\n+    t!(fs::create_dir_all(&dst_src));\n+\n+    // This is the reduced set of paths which will become the rust-src component\n+    // (essentially libstd and all of its path dependencies)\n+    let std_src_dirs = [\n+        \"src/build_helper\",\n+        \"src/liballoc\",\n+        \"src/liballoc_jemalloc\",\n+        \"src/liballoc_system\",\n+        \"src/libcollections\",\n+        \"src/libcompiler_builtins\",\n+        \"src/libcore\",\n+        \"src/liblibc\",\n+        \"src/libpanic_abort\",\n+        \"src/libpanic_unwind\",\n+        \"src/librand\",\n+        \"src/librustc_asan\",\n+        \"src/librustc_lsan\",\n+        \"src/librustc_msan\",\n+        \"src/librustc_tsan\",\n+        \"src/libstd\",\n+        \"src/libstd_unicode\",\n+        \"src/libunwind\",\n+        \"src/rustc/libc_shim\",\n+    ];\n+\n+    for item in &std_src_dirs {\n+        let dst = &dst_src.join(item);\n+        t!(fs::create_dir_all(dst));\n+        cp_r(&plain_dst_src.join(item), dst);\n+    }\n+\n     // Create source tarball in rust-installer format\n-    let mut cmd = Command::new(SH_CMD);\n-    cmd.arg(sanitize_sh(&build.src.join(\"src/rust-installer/gen-installer.sh\")))\n+    let mut cmd = rust_installer(build);\n+    cmd.arg(\"generate\")\n        .arg(\"--product-name=Rust\")\n        .arg(\"--rel-manifest-dir=rustlib\")\n        .arg(\"--success-message=Awesome-Source.\")\n-       .arg(format!(\"--image-dir={}\", sanitize_sh(&image)))\n-       .arg(format!(\"--work-dir={}\", sanitize_sh(&tmpdir(build))))\n-       .arg(format!(\"--output-dir={}\", sanitize_sh(&distdir(build))))\n+       .arg(\"--image-dir\").arg(&image)\n+       .arg(\"--work-dir\").arg(&tmpdir(build))\n+       .arg(\"--output-dir\").arg(&distdir(build))\n        .arg(format!(\"--package-name={}\", name))\n        .arg(\"--component-name=rust-src\")\n        .arg(\"--legacy-manifest-dirs=rustlib,cargo\");\n     build.run(&mut cmd);\n \n-    // Rename directory, so that root folder of tarball has the correct name\n-    let plain_name = format!(\"rustc-{}-src\", build.rust_package_vers());\n-    let plain_dst_src = tmpdir(build).join(&plain_name);\n-    let _ = fs::remove_dir_all(&plain_dst_src);\n-    t!(fs::create_dir_all(&plain_dst_src));\n-    cp_r(&dst_src, &plain_dst_src);\n-\n-    // Create the version file\n-    write_file(&plain_dst_src.join(\"version\"), build.rust_version().as_bytes());\n-\n-    // Create plain source tarball\n-    let mut cmd = Command::new(\"tar\");\n-    cmd.arg(\"-czf\").arg(sanitize_sh(&rust_src_location(build)))\n-       .arg(&plain_name)\n-       .current_dir(tmpdir(build));\n-    build.run(&mut cmd);\n-\n     t!(fs::remove_dir_all(&image));\n     t!(fs::remove_dir_all(&plain_dst_src));\n }\n@@ -537,7 +583,7 @@ pub fn cargo(build: &Build, stage: u32, target: &str) {\n     println!(\"Dist cargo stage{} ({})\", stage, target);\n     let compiler = Compiler::new(stage, &build.config.build);\n \n-    let src = build.src.join(\"cargo\");\n+    let src = build.src.join(\"src/tools/cargo\");\n     let etc = src.join(\"src/etc\");\n     let release_num = build.release_num(\"cargo\");\n     let name = pkgname(build, \"cargo\");\n@@ -550,7 +596,7 @@ pub fn cargo(build: &Build, stage: u32, target: &str) {\n \n     // Prepare the image directory\n     t!(fs::create_dir_all(image.join(\"share/zsh/site-functions\")));\n-    t!(fs::create_dir_all(image.join(\"etc/bash_completions.d\")));\n+    t!(fs::create_dir_all(image.join(\"etc/bash_completion.d\")));\n     let cargo = build.cargo_out(&compiler, Mode::Tool, target)\n                      .join(exe(\"cargo\", target));\n     install(&cargo, &image.join(\"bin\"), 0o755);\n@@ -560,7 +606,7 @@ pub fn cargo(build: &Build, stage: u32, target: &str) {\n     }\n     install(&etc.join(\"_cargo\"), &image.join(\"share/zsh/site-functions\"), 0o644);\n     copy(&etc.join(\"cargo.bashcomp.sh\"),\n-         &image.join(\"etc/bash_completions.d/cargo\"));\n+         &image.join(\"etc/bash_completion.d/cargo\"));\n     let doc = image.join(\"share/doc/cargo\");\n     install(&src.join(\"README.md\"), &doc, 0o644);\n     install(&src.join(\"LICENSE-MIT\"), &doc, 0o644);\n@@ -578,15 +624,15 @@ pub fn cargo(build: &Build, stage: u32, target: &str) {\n     t!(t!(File::create(overlay.join(\"version\"))).write_all(version.as_bytes()));\n \n     // Generate the installer tarball\n-    let mut cmd = Command::new(\"sh\");\n-    cmd.arg(sanitize_sh(&build.src.join(\"src/rust-installer/gen-installer.sh\")))\n+    let mut cmd = rust_installer(build);\n+    cmd.arg(\"generate\")\n        .arg(\"--product-name=Rust\")\n        .arg(\"--rel-manifest-dir=rustlib\")\n        .arg(\"--success-message=Rust-is-ready-to-roll.\")\n-       .arg(format!(\"--image-dir={}\", sanitize_sh(&image)))\n-       .arg(format!(\"--work-dir={}\", sanitize_sh(&tmpdir(build))))\n-       .arg(format!(\"--output-dir={}\", sanitize_sh(&distdir(build))))\n-       .arg(format!(\"--non-installed-overlay={}\", sanitize_sh(&overlay)))\n+       .arg(\"--image-dir\").arg(&image)\n+       .arg(\"--work-dir\").arg(&tmpdir(build))\n+       .arg(\"--output-dir\").arg(&distdir(build))\n+       .arg(\"--non-installed-overlay\").arg(&overlay)\n        .arg(format!(\"--package-name={}-{}\", name, target))\n        .arg(\"--component-name=cargo\")\n        .arg(\"--legacy-manifest-dirs=rustlib,cargo\");\n@@ -598,7 +644,7 @@ pub fn rls(build: &Build, stage: u32, target: &str) {\n     println!(\"Dist RLS stage{} ({})\", stage, target);\n     let compiler = Compiler::new(stage, &build.config.build);\n \n-    let src = build.src.join(\"rls\");\n+    let src = build.src.join(\"src/tools/rls\");\n     let release_num = build.release_num(\"rls\");\n     let name = pkgname(build, \"rls\");\n     let version = build.rls_info.version(build, &release_num);\n@@ -627,15 +673,15 @@ pub fn rls(build: &Build, stage: u32, target: &str) {\n     t!(t!(File::create(overlay.join(\"version\"))).write_all(version.as_bytes()));\n \n     // Generate the installer tarball\n-    let mut cmd = Command::new(\"sh\");\n-    cmd.arg(sanitize_sh(&build.src.join(\"src/rust-installer/gen-installer.sh\")))\n+    let mut cmd = rust_installer(build);\n+    cmd.arg(\"generate\")\n        .arg(\"--product-name=Rust\")\n        .arg(\"--rel-manifest-dir=rustlib\")\n        .arg(\"--success-message=RLS-ready-to-serve.\")\n-       .arg(format!(\"--image-dir={}\", sanitize_sh(&image)))\n-       .arg(format!(\"--work-dir={}\", sanitize_sh(&tmpdir(build))))\n-       .arg(format!(\"--output-dir={}\", sanitize_sh(&distdir(build))))\n-       .arg(format!(\"--non-installed-overlay={}\", sanitize_sh(&overlay)))\n+       .arg(\"--image-dir\").arg(&image)\n+       .arg(\"--work-dir\").arg(&tmpdir(build))\n+       .arg(\"--output-dir\").arg(&distdir(build))\n+       .arg(\"--non-installed-overlay\").arg(&overlay)\n        .arg(format!(\"--package-name={}-{}\", name, target))\n        .arg(\"--component-name=rls\")\n        .arg(\"--legacy-manifest-dirs=rustlib,cargo\");\n@@ -686,29 +732,28 @@ pub fn extended(build: &Build, stage: u32, target: &str) {\n     // upgrades rustc was upgraded before rust-std. To avoid rustc clobbering\n     // the std files during uninstall. To do this ensure that rustc comes\n     // before rust-std in the list below.\n-    let mut input_tarballs = format!(\"{},{},{},{},{},{}\",\n-                                     sanitize_sh(&rustc_installer),\n-                                     sanitize_sh(&cargo_installer),\n-                                     sanitize_sh(&rls_installer),\n-                                     sanitize_sh(&analysis_installer),\n-                                     sanitize_sh(&docs_installer),\n-                                     sanitize_sh(&std_installer));\n+    let mut tarballs = vec![rustc_installer, cargo_installer, rls_installer,\n+                            analysis_installer, docs_installer, std_installer];\n     if target.contains(\"pc-windows-gnu\") {\n-        input_tarballs.push_str(\",\");\n-        input_tarballs.push_str(&sanitize_sh(&mingw_installer));\n+        tarballs.push(mingw_installer);\n+    }\n+    let mut input_tarballs = tarballs[0].as_os_str().to_owned();\n+    for tarball in &tarballs[1..] {\n+        input_tarballs.push(\",\");\n+        input_tarballs.push(tarball);\n     }\n \n-    let mut cmd = Command::new(SH_CMD);\n-    cmd.arg(sanitize_sh(&build.src.join(\"src/rust-installer/combine-installers.sh\")))\n+    let mut cmd = rust_installer(build);\n+    cmd.arg(\"combine\")\n        .arg(\"--product-name=Rust\")\n        .arg(\"--rel-manifest-dir=rustlib\")\n        .arg(\"--success-message=Rust-is-ready-to-roll.\")\n-       .arg(format!(\"--work-dir={}\", sanitize_sh(&work)))\n-       .arg(format!(\"--output-dir={}\", sanitize_sh(&distdir(build))))\n+       .arg(\"--work-dir\").arg(&work)\n+       .arg(\"--output-dir\").arg(&distdir(build))\n        .arg(format!(\"--package-name={}-{}\", pkgname(build, \"rust\"), target))\n        .arg(\"--legacy-manifest-dirs=rustlib,cargo\")\n-       .arg(format!(\"--input-tarballs={}\", input_tarballs))\n-       .arg(format!(\"--non-installed-overlay={}\", sanitize_sh(&overlay)));\n+       .arg(\"--input-tarballs\").arg(input_tarballs)\n+       .arg(\"--non-installed-overlay\").arg(&overlay);\n     build.run(&mut cmd);\n \n     let mut license = String::new();"}, {"sha": "dce0b1670e181612c25fb045b992e036154e3d99", "filename": "src/bootstrap/install.rs", "status": "modified", "additions": 99, "deletions": 48, "changes": 147, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fbootstrap%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fbootstrap%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Finstall.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -21,59 +21,110 @@ use std::process::Command;\n use Build;\n use dist::{sanitize_sh, tmpdir};\n \n-/// Installs everything.\n-pub fn install(build: &Build, stage: u32, host: &str) {\n-    let prefix_default = PathBuf::from(\"/usr/local\");\n-    let docdir_default = PathBuf::from(\"share/doc/rust\");\n-    let mandir_default = PathBuf::from(\"share/man\");\n-    let libdir_default = PathBuf::from(\"lib\");\n-    let prefix = build.config.prefix.as_ref().unwrap_or(&prefix_default);\n-    let docdir = build.config.docdir.as_ref().unwrap_or(&docdir_default);\n-    let libdir = build.config.libdir.as_ref().unwrap_or(&libdir_default);\n-    let mandir = build.config.mandir.as_ref().unwrap_or(&mandir_default);\n-\n-    let docdir = prefix.join(docdir);\n-    let libdir = prefix.join(libdir);\n-    let mandir = prefix.join(mandir);\n-\n-    let destdir = env::var_os(\"DESTDIR\").map(PathBuf::from);\n-\n-    let prefix = add_destdir(&prefix, &destdir);\n-    let docdir = add_destdir(&docdir, &destdir);\n-    let libdir = add_destdir(&libdir, &destdir);\n-    let mandir = add_destdir(&mandir, &destdir);\n-\n-    let empty_dir = build.out.join(\"tmp/empty_dir\");\n-    t!(fs::create_dir_all(&empty_dir));\n-    if build.config.docs {\n-        install_sh(&build, \"docs\", \"rust-docs\", stage, host, &prefix,\n-                   &docdir, &libdir, &mandir, &empty_dir);\n+pub struct Installer<'a> {\n+    build: &'a Build,\n+    prefix: PathBuf,\n+    sysconfdir: PathBuf,\n+    docdir: PathBuf,\n+    bindir: PathBuf,\n+    libdir: PathBuf,\n+    mandir: PathBuf,\n+}\n+\n+impl<'a> Installer<'a> {\n+    pub fn new(build: &'a Build) -> Installer<'a> {\n+        let prefix_default = PathBuf::from(\"/usr/local\");\n+        let sysconfdir_default = PathBuf::from(\"/etc\");\n+        let docdir_default = PathBuf::from(\"share/doc/rust\");\n+        let bindir_default = PathBuf::from(\"bin\");\n+        let libdir_default = PathBuf::from(\"lib\");\n+        let mandir_default = PathBuf::from(\"share/man\");\n+        let prefix = build.config.prefix.as_ref().unwrap_or(&prefix_default);\n+        let sysconfdir = build.config.sysconfdir.as_ref().unwrap_or(&sysconfdir_default);\n+        let docdir = build.config.docdir.as_ref().unwrap_or(&docdir_default);\n+        let bindir = build.config.bindir.as_ref().unwrap_or(&bindir_default);\n+        let libdir = build.config.libdir.as_ref().unwrap_or(&libdir_default);\n+        let mandir = build.config.mandir.as_ref().unwrap_or(&mandir_default);\n+\n+        let sysconfdir = prefix.join(sysconfdir);\n+        let docdir = prefix.join(docdir);\n+        let bindir = prefix.join(bindir);\n+        let libdir = prefix.join(libdir);\n+        let mandir = prefix.join(mandir);\n+\n+        let destdir = env::var_os(\"DESTDIR\").map(PathBuf::from);\n+\n+        let prefix = add_destdir(&prefix, &destdir);\n+        let sysconfdir = add_destdir(&sysconfdir, &destdir);\n+        let docdir = add_destdir(&docdir, &destdir);\n+        let bindir = add_destdir(&bindir, &destdir);\n+        let libdir = add_destdir(&libdir, &destdir);\n+        let mandir = add_destdir(&mandir, &destdir);\n+\n+        Installer {\n+            build,\n+            prefix,\n+            sysconfdir,\n+            docdir,\n+            bindir,\n+            libdir,\n+            mandir,\n+        }\n     }\n \n-    for target in build.config.target.iter() {\n-        install_sh(&build, \"std\", \"rust-std\", stage, target, &prefix,\n-                   &docdir, &libdir, &mandir, &empty_dir);\n+    /// Installs everything.\n+    pub fn install(&self, stage: u32, host: &str) {\n+        let empty_dir = self.build.out.join(\"tmp/empty_dir\");\n+        t!(fs::create_dir_all(&empty_dir));\n+\n+        if self.build.config.docs {\n+            self.install_sh(\"docs\", \"rust-docs\", &self.build.rust_package_vers(),\n+                            stage, Some(host), &empty_dir);\n+        }\n+\n+        for target in self.build.config.target.iter() {\n+            self.install_sh(\"std\", \"rust-std\", &self.build.rust_package_vers(),\n+                            stage, Some(target), &empty_dir);\n+        }\n+\n+        if self.build.config.extended {\n+            self.install_sh(\"cargo\", \"cargo\", &self.build.cargo_package_vers(),\n+                            stage, Some(host), &empty_dir);\n+            self.install_sh(\"rls\", \"rls\", &self.build.rls_package_vers(),\n+                            stage, Some(host), &empty_dir);\n+            self.install_sh(\"analysis\", \"rust-analysis\", &self.build.rust_package_vers(),\n+                            stage, Some(host), &empty_dir);\n+            self.install_sh(\"src\", \"rust-src\", &self.build.rust_package_vers(),\n+                            stage, None, &empty_dir);\n+        }\n+\n+        self.install_sh(\"rustc\", \"rustc\", &self.build.rust_package_vers(),\n+                        stage, Some(host), &empty_dir);\n+\n+        t!(fs::remove_dir_all(&empty_dir));\n     }\n \n-    install_sh(&build, \"rustc\", \"rustc\", stage, host, &prefix,\n-               &docdir, &libdir, &mandir, &empty_dir);\n-    t!(fs::remove_dir_all(&empty_dir));\n-}\n+    fn install_sh(&self, package: &str, name: &str, version: &str,\n+                  stage: u32, host: Option<&str>,  empty_dir: &Path) {\n+        println!(\"Install {} stage{} ({:?})\", package, stage, host);\n+        let package_name = if let Some(host) = host {\n+            format!(\"{}-{}-{}\", name, version, host)\n+        } else {\n+            format!(\"{}-{}\", name, version)\n+        };\n \n-fn install_sh(build: &Build, package: &str, name: &str, stage: u32, host: &str,\n-              prefix: &Path, docdir: &Path, libdir: &Path, mandir: &Path, empty_dir: &Path) {\n-    println!(\"Install {} stage{} ({})\", package, stage, host);\n-    let package_name = format!(\"{}-{}-{}\", name, build.rust_package_vers(), host);\n-\n-    let mut cmd = Command::new(\"sh\");\n-    cmd.current_dir(empty_dir)\n-       .arg(sanitize_sh(&tmpdir(build).join(&package_name).join(\"install.sh\")))\n-       .arg(format!(\"--prefix={}\", sanitize_sh(prefix)))\n-       .arg(format!(\"--docdir={}\", sanitize_sh(docdir)))\n-       .arg(format!(\"--libdir={}\", sanitize_sh(libdir)))\n-       .arg(format!(\"--mandir={}\", sanitize_sh(mandir)))\n-       .arg(\"--disable-ldconfig\");\n-    build.run(&mut cmd);\n+        let mut cmd = Command::new(\"sh\");\n+        cmd.current_dir(empty_dir)\n+           .arg(sanitize_sh(&tmpdir(self.build).join(&package_name).join(\"install.sh\")))\n+           .arg(format!(\"--prefix={}\", sanitize_sh(&self.prefix)))\n+           .arg(format!(\"--sysconfdir={}\", sanitize_sh(&self.sysconfdir)))\n+           .arg(format!(\"--docdir={}\", sanitize_sh(&self.docdir)))\n+           .arg(format!(\"--bindir={}\", sanitize_sh(&self.bindir)))\n+           .arg(format!(\"--libdir={}\", sanitize_sh(&self.libdir)))\n+           .arg(format!(\"--mandir={}\", sanitize_sh(&self.mandir)))\n+           .arg(\"--disable-ldconfig\");\n+        self.build.run(&mut cmd);\n+    }\n }\n \n fn add_destdir(path: &Path, destdir: &Option<PathBuf>) -> PathBuf {"}, {"sha": "72a5d1338b8d05b1067f36e7c9998e6a29b43fd8", "filename": "src/bootstrap/job.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fbootstrap%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fbootstrap%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fjob.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -42,6 +42,7 @@\n use std::env;\n use std::io;\n use std::mem;\n+use Build;\n \n type HANDLE = *mut u8;\n type BOOL = i32;\n@@ -60,8 +61,10 @@ const DUPLICATE_SAME_ACCESS: DWORD = 0x2;\n const PROCESS_DUP_HANDLE: DWORD = 0x40;\n const JobObjectExtendedLimitInformation: JOBOBJECTINFOCLASS = 9;\n const JOB_OBJECT_LIMIT_KILL_ON_JOB_CLOSE: DWORD = 0x2000;\n+const JOB_OBJECT_LIMIT_PRIORITY_CLASS: DWORD = 0x00000020;\n const SEM_FAILCRITICALERRORS: UINT = 0x0001;\n const SEM_NOGPFAULTERRORBOX: UINT = 0x0002;\n+const BELOW_NORMAL_PRIORITY_CLASS: DWORD = 0x00004000;\n \n extern \"system\" {\n     fn CreateJobObjectW(lpJobAttributes: *mut u8, lpName: *const u8) -> HANDLE;\n@@ -118,7 +121,7 @@ struct JOBOBJECT_BASIC_LIMIT_INFORMATION {\n     SchedulingClass: DWORD,\n }\n \n-pub unsafe fn setup() {\n+pub unsafe fn setup(build: &mut Build) {\n     // Tell Windows to not show any UI on errors (such as not finding a required dll\n     // during startup or terminating abnormally).  This is important for running tests,\n     // since some of them use abnormal termination by design.\n@@ -136,6 +139,10 @@ pub unsafe fn setup() {\n     // children will reside in the job by default.\n     let mut info = mem::zeroed::<JOBOBJECT_EXTENDED_LIMIT_INFORMATION>();\n     info.BasicLimitInformation.LimitFlags = JOB_OBJECT_LIMIT_KILL_ON_JOB_CLOSE;\n+    if build.config.low_priority {\n+        info.BasicLimitInformation.LimitFlags |= JOB_OBJECT_LIMIT_PRIORITY_CLASS;\n+        info.BasicLimitInformation.PriorityClass = BELOW_NORMAL_PRIORITY_CLASS;\n+    }\n     let r = SetInformationJobObject(job,\n                                     JobObjectExtendedLimitInformation,\n                                     &mut info as *mut _ as LPVOID,"}, {"sha": "665b9ee49c02d5597ed3261be23f344007c7da65", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 85, "deletions": 135, "changes": 220, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -76,13 +76,16 @@ extern crate num_cpus;\n extern crate rustc_serialize;\n extern crate toml;\n \n+#[cfg(unix)]\n+extern crate libc;\n+\n use std::cmp;\n use std::collections::HashMap;\n use std::env;\n use std::ffi::OsString;\n use std::fs::{self, File};\n use std::io::Read;\n-use std::path::{Component, PathBuf, Path};\n+use std::path::{PathBuf, Path};\n use std::process::Command;\n \n use build_helper::{run_silent, run_suppressed, output, mtime};\n@@ -108,9 +111,21 @@ pub mod util;\n #[cfg(windows)]\n mod job;\n \n-#[cfg(not(windows))]\n+#[cfg(unix)]\n mod job {\n-    pub unsafe fn setup() {}\n+    use libc;\n+\n+    pub unsafe fn setup(build: &mut ::Build) {\n+        if build.config.low_priority {\n+            libc::setpriority(libc::PRIO_PGRP as _, 0, 10);\n+        }\n+    }\n+}\n+\n+#[cfg(not(any(unix, windows)))]\n+mod job {\n+    pub unsafe fn setup(_build: &mut ::Build) {\n+    }\n }\n \n pub use config::Config;\n@@ -196,7 +211,7 @@ pub enum Mode {\n     /// output in the \"stageN-rustc\" directory.\n     Librustc,\n \n-    /// This cargo is going to some build tool, placing output in the\n+    /// This cargo is going to build some tool, placing output in the\n     /// \"stageN-tools\" directory.\n     Tool,\n }\n@@ -234,8 +249,8 @@ impl Build {\n             None => false,\n         };\n         let rust_info = channel::GitInfo::new(&src);\n-        let cargo_info = channel::GitInfo::new(&src.join(\"cargo\"));\n-        let rls_info = channel::GitInfo::new(&src.join(\"rls\"));\n+        let cargo_info = channel::GitInfo::new(&src.join(\"src/tools/cargo\"));\n+        let rls_info = channel::GitInfo::new(&src.join(\"src/tools/rls\"));\n         let src_is_git = src.join(\".git\").exists();\n \n         Build {\n@@ -263,7 +278,7 @@ impl Build {\n     /// Executes the entire build, as configured by the flags and configuration.\n     pub fn build(&mut self) {\n         unsafe {\n-            job::setup();\n+            job::setup(self);\n         }\n \n         if let Subcommand::Clean = self.flags.cmd {\n@@ -285,129 +300,12 @@ impl Build {\n             self.verbose(&format!(\"auto-detected local-rebuild {}\", local_release));\n             self.local_rebuild = true;\n         }\n-        self.verbose(\"updating submodules\");\n-        self.update_submodules();\n         self.verbose(\"learning about cargo\");\n         metadata::build(self);\n \n         step::run(self);\n     }\n \n-    /// Updates all git submodules that we have.\n-    ///\n-    /// This will detect if any submodules are out of date an run the necessary\n-    /// commands to sync them all with upstream.\n-    fn update_submodules(&self) {\n-        struct Submodule<'a> {\n-            path: &'a Path,\n-            state: State,\n-        }\n-\n-        enum State {\n-            // The submodule may have staged/unstaged changes\n-            MaybeDirty,\n-            // Or could be initialized but never updated\n-            NotInitialized,\n-            // The submodule, itself, has extra commits but those changes haven't been commited to\n-            // the (outer) git repository\n-            OutOfSync,\n-        }\n-\n-        if !self.src_is_git || !self.config.submodules {\n-            return\n-        }\n-        let git = || {\n-            let mut cmd = Command::new(\"git\");\n-            cmd.current_dir(&self.src);\n-            return cmd\n-        };\n-        let git_submodule = || {\n-            let mut cmd = Command::new(\"git\");\n-            cmd.current_dir(&self.src).arg(\"submodule\");\n-            return cmd\n-        };\n-\n-        // FIXME: this takes a seriously long time to execute on Windows and a\n-        //        nontrivial amount of time on Unix, we should have a better way\n-        //        of detecting whether we need to run all the submodule commands\n-        //        below.\n-        let out = output(git_submodule().arg(\"status\"));\n-        let mut submodules = vec![];\n-        for line in out.lines() {\n-            // NOTE `git submodule status` output looks like this:\n-            //\n-            // -5066b7dcab7e700844b0e2ba71b8af9dc627a59b src/liblibc\n-            // +b37ef24aa82d2be3a3cc0fe89bf82292f4ca181c src/compiler-rt (remotes/origin/..)\n-            //  e058ca661692a8d01f8cf9d35939dfe3105ce968 src/jemalloc (3.6.0-533-ge058ca6)\n-            //\n-            // The first character can be '-', '+' or ' ' and denotes the `State` of the submodule\n-            // Right next to this character is the SHA-1 of the submodule HEAD\n-            // And after that comes the path to the submodule\n-            let path = Path::new(line[1..].split(' ').skip(1).next().unwrap());\n-            let state = if line.starts_with('-') {\n-                State::NotInitialized\n-            } else if line.starts_with('+') {\n-                State::OutOfSync\n-            } else if line.starts_with(' ') {\n-                State::MaybeDirty\n-            } else {\n-                panic!(\"unexpected git submodule state: {:?}\", line.chars().next());\n-            };\n-\n-            submodules.push(Submodule { path: path, state: state })\n-        }\n-\n-        self.run(git_submodule().arg(\"sync\"));\n-\n-        for submodule in submodules {\n-            // If using llvm-root then don't touch the llvm submodule.\n-            if submodule.path.components().any(|c| c == Component::Normal(\"llvm\".as_ref())) &&\n-                self.config.target_config.get(&self.config.build)\n-                    .and_then(|c| c.llvm_config.as_ref()).is_some()\n-            {\n-                continue\n-            }\n-\n-            if submodule.path.components().any(|c| c == Component::Normal(\"jemalloc\".as_ref())) &&\n-                !self.config.use_jemalloc\n-            {\n-                continue\n-            }\n-\n-            // `submodule.path` is the relative path to a submodule (from the repository root)\n-            // `submodule_path` is the path to a submodule from the cwd\n-\n-            // use `submodule.path` when e.g. executing a submodule specific command from the\n-            // repository root\n-            // use `submodule_path` when e.g. executing a normal git command for the submodule\n-            // (set via `current_dir`)\n-            let submodule_path = self.src.join(submodule.path);\n-\n-            match submodule.state {\n-                State::MaybeDirty => {\n-                    // drop staged changes\n-                    self.run(git().current_dir(&submodule_path)\n-                                  .args(&[\"reset\", \"--hard\"]));\n-                    // drops unstaged changes\n-                    self.run(git().current_dir(&submodule_path)\n-                                  .args(&[\"clean\", \"-fdx\"]));\n-                },\n-                State::NotInitialized => {\n-                    self.run(git_submodule().arg(\"init\").arg(submodule.path));\n-                    self.run(git_submodule().arg(\"update\").arg(submodule.path));\n-                },\n-                State::OutOfSync => {\n-                    // drops submodule commits that weren't reported to the (outer) git repository\n-                    self.run(git_submodule().arg(\"update\").arg(submodule.path));\n-                    self.run(git().current_dir(&submodule_path)\n-                                  .args(&[\"reset\", \"--hard\"]));\n-                    self.run(git().current_dir(&submodule_path)\n-                                  .args(&[\"clean\", \"-fdx\"]));\n-                },\n-            }\n-        }\n-    }\n-\n     /// Clear out `dir` if `input` is newer.\n     ///\n     /// After this executes, it will also ensure that `dir` exists.\n@@ -475,11 +373,30 @@ impl Build {\n              .env(\"RUSTDOC_REAL\", self.rustdoc(compiler))\n              .env(\"RUSTC_FLAGS\", self.rustc_flags(target).join(\" \"));\n \n-        // Tools don't get debuginfo right now, e.g. cargo and rls don't get\n-        // compiled with debuginfo.\n         if mode != Mode::Tool {\n-             cargo.env(\"RUSTC_DEBUGINFO\", self.config.rust_debuginfo.to_string())\n-                  .env(\"RUSTC_DEBUGINFO_LINES\", self.config.rust_debuginfo_lines.to_string());\n+            // Tools don't get debuginfo right now, e.g. cargo and rls don't\n+            // get compiled with debuginfo.\n+            cargo.env(\"RUSTC_DEBUGINFO\", self.config.rust_debuginfo.to_string())\n+                 .env(\"RUSTC_DEBUGINFO_LINES\", self.config.rust_debuginfo_lines.to_string())\n+                 .env(\"RUSTC_FORCE_UNSTABLE\", \"1\");\n+\n+            // Currently the compiler depends on crates from crates.io, and\n+            // then other crates can depend on the compiler (e.g. proc-macro\n+            // crates). Let's say, for example that rustc itself depends on the\n+            // bitflags crate. If an external crate then depends on the\n+            // bitflags crate as well, we need to make sure they don't\n+            // conflict, even if they pick the same verison of bitflags. We'll\n+            // want to make sure that e.g. a plugin and rustc each get their\n+            // own copy of bitflags.\n+\n+            // Cargo ensures that this works in general through the -C metadata\n+            // flag. This flag will frob the symbols in the binary to make sure\n+            // they're different, even though the source code is the exact\n+            // same. To solve this problem for the compiler we extend Cargo's\n+            // already-passed -C metadata flag with our own. Our rustc.rs\n+            // wrapper around the actual rustc will detect -C metadata being\n+            // passed and frob it with this extra string we're passing in.\n+            cargo.env(\"RUSTC_METADATA_SUFFIX\", \"rustc\");\n         }\n \n         // Enable usage of unstable features\n@@ -507,7 +424,7 @@ impl Build {\n                  .env(\"RUSTC_SNAPSHOT_LIBDIR\", self.rustc_libdir(compiler));\n         }\n \n-        // There are two invariants we try must maintain:\n+        // There are two invariants we must maintain:\n         // * stable crates cannot depend on unstable crates (general Rust rule),\n         // * crates that end up in the sysroot must be unstable (rustbuild rule).\n         //\n@@ -521,15 +438,17 @@ impl Build {\n         // feature and opt-in to `rustc_private`.\n         //\n         // We can't always pass `rustbuild` because crates which are outside of\n-        // the comipiler, libs, and tests are stable and we don't want to make\n+        // the compiler, libs, and tests are stable and we don't want to make\n         // their deps unstable (since this would break the first invariant\n         // above).\n-        if mode != Mode::Tool {\n+        //\n+        // FIXME: remove this after next stage0\n+        if mode != Mode::Tool && stage == 0 {\n             cargo.env(\"RUSTBUILD_UNSTABLE\", \"1\");\n         }\n \n         // Ignore incremental modes except for stage0, since we're\n-        // not guaranteeing correctness acros builds if the compiler\n+        // not guaranteeing correctness across builds if the compiler\n         // is changing under your feet.`\n         if self.flags.incremental && compiler.stage == 0 {\n             let incr_dir = self.incremental_dir(compiler);\n@@ -557,7 +476,20 @@ impl Build {\n             cargo.env(\"RUSTC_SAVE_ANALYSIS\", \"api\".to_string());\n         }\n \n-        // Environment variables *required* needed throughout the build\n+        // When being built Cargo will at some point call `nmake.exe` on Windows\n+        // MSVC. Unfortunately `nmake` will read these two environment variables\n+        // below and try to intepret them. We're likely being run, however, from\n+        // MSYS `make` which uses the same variables.\n+        //\n+        // As a result, to prevent confusion and errors, we remove these\n+        // variables from our environment to prevent passing MSYS make flags to\n+        // nmake, causing it to blow up.\n+        if cfg!(target_env = \"msvc\") {\n+            cargo.env_remove(\"MAKE\");\n+            cargo.env_remove(\"MAKEFLAGS\");\n+        }\n+\n+        // Environment variables *required* throughout the build\n         //\n         // FIXME: should update code to not require this env var\n         cargo.env(\"CFG_COMPILER_HOST_TRIPLE\", target);\n@@ -715,7 +647,7 @@ impl Build {\n     }\n \n     /// Returns the root output directory for all Cargo output in a given stage,\n-    /// running a particular comipler, wehther or not we're building the\n+    /// running a particular compiler, wehther or not we're building the\n     /// standard library, and targeting the specified architecture.\n     fn cargo_out(&self,\n                  compiler: &Compiler,\n@@ -882,6 +814,13 @@ impl Build {\n         if target.contains(\"apple-darwin\") {\n             base.push(\"-stdlib=libc++\".into());\n         }\n+\n+        // Work around an apparently bad MinGW / GCC optimization,\n+        // See: http://lists.llvm.org/pipermail/cfe-dev/2016-December/051980.html\n+        // See: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=78936\n+        if target == \"i686-pc-windows-gnu\" {\n+            base.push(\"-fno-omit-frame-pointer\".into());\n+        }\n         return base\n     }\n \n@@ -925,6 +864,12 @@ impl Build {\n             .map(|p| &**p)\n     }\n \n+    /// Returns whether the target will be tested using the `remote-test-client`\n+    /// and `remote-test-server` binaries.\n+    fn remote_tested(&self, target: &str) -> bool {\n+        self.qemu_rootfs(target).is_some() || target.contains(\"android\")\n+    }\n+\n     /// Returns the root of the \"rootfs\" image that this target will be using,\n     /// if one was configured.\n     ///\n@@ -1028,6 +973,11 @@ impl Build {\n         self.package_vers(&self.release_num(\"cargo\"))\n     }\n \n+    /// Returns the value of `package_vers` above for rls\n+    fn rls_package_vers(&self) -> String {\n+        self.package_vers(&self.release_num(\"rls\"))\n+    }\n+\n     /// Returns the `version` string associated with this compiler for Rust\n     /// itself.\n     ///\n@@ -1040,7 +990,7 @@ impl Build {\n     /// Returns the `a.b.c` version that the given package is at.\n     fn release_num(&self, package: &str) -> String {\n         let mut toml = String::new();\n-        let toml_file_name = self.src.join(&format!(\"{}/Cargo.toml\", package));\n+        let toml_file_name = self.src.join(&format!(\"src/tools/{}/Cargo.toml\", package));\n         t!(t!(File::open(toml_file_name)).read_to_string(&mut toml));\n         for line in toml.lines() {\n             let prefix = \"version = \\\"\";"}, {"sha": "7b6b01655df585fc3f2a61c175c618177171de64", "filename": "src/bootstrap/metadata.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fbootstrap%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fbootstrap%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fmetadata.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -58,6 +58,7 @@ fn build_krate(build: &mut Build, krate: &str) {\n     // the dependency graph and what `-p` arguments there are.\n     let mut cargo = Command::new(&build.cargo);\n     cargo.arg(\"metadata\")\n+         .arg(\"--format-version\").arg(\"1\")\n          .arg(\"--manifest-path\").arg(build.src.join(krate).join(\"Cargo.toml\"));\n     let output = output(&mut cargo);\n     let output: Output = json::decode(&output).unwrap();"}, {"sha": "a5df741e2bfc83965d5f6fbc722fd90dd6c030bb", "filename": "src/bootstrap/mk/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fbootstrap%2Fmk%2FMakefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fbootstrap%2Fmk%2FMakefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fmk%2FMakefile.in?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -55,6 +55,7 @@ check:\n check-aux:\n \t$(Q)$(BOOTSTRAP) test \\\n \t\tsrc/tools/cargotest \\\n+\t\tcargo \\\n \t\tsrc/test/pretty \\\n \t\tsrc/test/run-pass/pretty \\\n \t\tsrc/test/run-fail/pretty \\"}, {"sha": "6cb1d1fc4bf05b47c14c968bd56f16e7da135faf", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 64, "deletions": 11, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -19,6 +19,7 @@\n //! ensure that they're always in place if needed.\n \n use std::env;\n+use std::ffi::OsString;\n use std::fs::{self, File};\n use std::io::{Read, Write};\n use std::path::Path;\n@@ -81,7 +82,7 @@ pub fn llvm(build: &Build, target: &str) {\n     // NOTE: remember to also update `config.toml.example` when changing the defaults!\n     let llvm_targets = match build.config.llvm_targets {\n         Some(ref s) => s,\n-        None => \"X86;ARM;AArch64;Mips;PowerPC;SystemZ;JSBackend;MSP430;Sparc;NVPTX\",\n+        None => \"X86;ARM;AArch64;Mips;PowerPC;SystemZ;JSBackend;MSP430;Sparc;NVPTX;Hexagon\",\n     };\n \n     let assertions = if build.config.llvm_assertions {\"ON\"} else {\"OFF\"};\n@@ -107,6 +108,7 @@ pub fn llvm(build: &Build, target: &str) {\n         cfg.define(\"LLVM_USE_CRT_DEBUG\", \"MT\");\n         cfg.define(\"LLVM_USE_CRT_RELEASE\", \"MT\");\n         cfg.define(\"LLVM_USE_CRT_RELWITHDEBINFO\", \"MT\");\n+        cfg.static_crt(true);\n     }\n \n     if target.starts_with(\"i686\") {\n@@ -129,22 +131,56 @@ pub fn llvm(build: &Build, target: &str) {\n            .define(\"LLVM_TABLEGEN\", &host);\n     }\n \n-    // MSVC handles compiler business itself\n-    if !target.contains(\"msvc\") {\n-        if let Some(ref ccache) = build.config.ccache {\n+    let sanitize_cc = |cc: &Path| {\n+        if target.contains(\"msvc\") {\n+            OsString::from(cc.to_str().unwrap().replace(\"\\\\\", \"/\"))\n+        } else {\n+            cc.as_os_str().to_owned()\n+        }\n+    };\n+\n+    let configure_compilers = |cfg: &mut cmake::Config| {\n+        // MSVC with CMake uses msbuild by default which doesn't respect these\n+        // vars that we'd otherwise configure. In that case we just skip this\n+        // entirely.\n+        if target.contains(\"msvc\") && !build.config.ninja {\n+            return\n+        }\n+\n+        let cc = build.cc(target);\n+        let cxx = build.cxx(target);\n+\n+        // Handle msvc + ninja + ccache specially (this is what the bots use)\n+        if target.contains(\"msvc\") &&\n+           build.config.ninja &&\n+           build.config.ccache.is_some() {\n+            let mut cc = env::current_exe().expect(\"failed to get cwd\");\n+            cc.set_file_name(\"sccache-plus-cl.exe\");\n+\n+           cfg.define(\"CMAKE_C_COMPILER\", sanitize_cc(&cc))\n+              .define(\"CMAKE_CXX_COMPILER\", sanitize_cc(&cc));\n+           cfg.env(\"SCCACHE_PATH\",\n+                   build.config.ccache.as_ref().unwrap())\n+              .env(\"SCCACHE_TARGET\", target);\n+\n+        // If ccache is configured we inform the build a little differently hwo\n+        // to invoke ccache while also invoking our compilers.\n+        } else if let Some(ref ccache) = build.config.ccache {\n            cfg.define(\"CMAKE_C_COMPILER\", ccache)\n-              .define(\"CMAKE_C_COMPILER_ARG1\", build.cc(target))\n+              .define(\"CMAKE_C_COMPILER_ARG1\", sanitize_cc(cc))\n               .define(\"CMAKE_CXX_COMPILER\", ccache)\n-              .define(\"CMAKE_CXX_COMPILER_ARG1\", build.cxx(target));\n+              .define(\"CMAKE_CXX_COMPILER_ARG1\", sanitize_cc(cxx));\n         } else {\n-           cfg.define(\"CMAKE_C_COMPILER\", build.cc(target))\n-              .define(\"CMAKE_CXX_COMPILER\", build.cxx(target));\n+           cfg.define(\"CMAKE_C_COMPILER\", sanitize_cc(cc))\n+              .define(\"CMAKE_CXX_COMPILER\", sanitize_cc(cxx));\n         }\n-        cfg.build_arg(\"-j\").build_arg(build.jobs().to_string());\n \n+        cfg.build_arg(\"-j\").build_arg(build.jobs().to_string());\n         cfg.define(\"CMAKE_C_FLAGS\", build.cflags(target).join(\" \"));\n         cfg.define(\"CMAKE_CXX_FLAGS\", build.cflags(target).join(\" \"));\n-    }\n+    };\n+\n+    configure_compilers(&mut cfg);\n \n     if env::var_os(\"SCCACHE_ERROR_LOG\").is_some() {\n         cfg.env(\"RUST_LOG\", \"sccache=info\");\n@@ -274,11 +310,15 @@ pub fn openssl(build: &Build, target: &str) {\n     configure.arg(\"no-ssl3\");\n \n     let os = match target {\n+        \"aarch64-linux-android\" => \"linux-aarch64\",\n         \"aarch64-unknown-linux-gnu\" => \"linux-aarch64\",\n+        \"arm-linux-androideabi\" => \"android\",\n         \"arm-unknown-linux-gnueabi\" => \"linux-armv4\",\n         \"arm-unknown-linux-gnueabihf\" => \"linux-armv4\",\n+        \"armv7-linux-androideabi\" => \"android-armv7\",\n         \"armv7-unknown-linux-gnueabihf\" => \"linux-armv4\",\n         \"i686-apple-darwin\" => \"darwin-i386-cc\",\n+        \"i686-linux-android\" => \"android-x86\",\n         \"i686-unknown-freebsd\" => \"BSD-x86-elf\",\n         \"i686-unknown-linux-gnu\" => \"linux-elf\",\n         \"i686-unknown-linux-musl\" => \"linux-elf\",\n@@ -291,6 +331,7 @@ pub fn openssl(build: &Build, target: &str) {\n         \"powerpc64le-unknown-linux-gnu\" => \"linux-ppc64le\",\n         \"s390x-unknown-linux-gnu\" => \"linux64-s390x\",\n         \"x86_64-apple-darwin\" => \"darwin64-x86_64-cc\",\n+        \"x86_64-linux-android\" => \"linux-x86_64\",\n         \"x86_64-unknown-freebsd\" => \"BSD-x86_64\",\n         \"x86_64-unknown-linux-gnu\" => \"linux-x86_64\",\n         \"x86_64-unknown-linux-musl\" => \"linux-x86_64\",\n@@ -302,11 +343,23 @@ pub fn openssl(build: &Build, target: &str) {\n     for flag in build.cflags(target) {\n         configure.arg(flag);\n     }\n+    // There is no specific os target for android aarch64 or x86_64,\n+    // so we need to pass some extra cflags\n+    if target == \"aarch64-linux-android\" || target == \"x86_64-linux-android\" {\n+        configure.arg(\"-mandroid\");\n+        configure.arg(\"-fomit-frame-pointer\");\n+    }\n+    // Make PIE binaries\n+    // Non-PIE linker support was removed in Lollipop\n+    // https://source.android.com/security/enhancements/enhancements50\n+    if target == \"i686-linux-android\" {\n+        configure.arg(\"no-asm\");\n+    }\n     configure.current_dir(&obj);\n     println!(\"Configuring openssl for {}\", target);\n     build.run_quiet(&mut configure);\n     println!(\"Building openssl for {}\", target);\n-    build.run_quiet(Command::new(\"make\").current_dir(&obj));\n+    build.run_quiet(Command::new(\"make\").arg(\"-j1\").current_dir(&obj));\n     println!(\"Installing openssl for {}\", target);\n     build.run_quiet(Command::new(\"make\").arg(\"install\").current_dir(&obj));\n "}, {"sha": "df6378a970bd4363a0a0065713ab1987adfdadd2", "filename": "src/bootstrap/sanity.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fbootstrap%2Fsanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fbootstrap%2Fsanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsanity.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -69,22 +69,21 @@ pub fn check(build: &mut Build) {\n         need_cmd(\"git\".as_ref());\n     }\n \n-    // We need cmake, but only if we're actually building LLVM\n-    for host in build.config.host.iter() {\n-        if let Some(config) = build.config.target_config.get(host) {\n-            if config.llvm_config.is_some() {\n-                continue\n-            }\n-        }\n+    // We need cmake, but only if we're actually building LLVM or sanitizers.\n+    let building_llvm = build.config.host.iter()\n+        .filter_map(|host| build.config.target_config.get(host))\n+        .any(|config| config.llvm_config.is_none());\n+    if building_llvm || build.config.sanitizers {\n         need_cmd(\"cmake\".as_ref());\n-        if build.config.ninja {\n-            // Some Linux distros rename `ninja` to `ninja-build`.\n-            // CMake can work with either binary name.\n-            if have_cmd(\"ninja-build\".as_ref()).is_none() {\n-                need_cmd(\"ninja\".as_ref());\n-            }\n+    }\n+\n+    // Ninja is currently only used for LLVM itself.\n+    if building_llvm && build.config.ninja {\n+        // Some Linux distros rename `ninja` to `ninja-build`.\n+        // CMake can work with either binary name.\n+        if have_cmd(\"ninja-build\".as_ref()).is_none() {\n+            need_cmd(\"ninja\".as_ref());\n         }\n-        break\n     }\n \n     if build.config.python.is_none() {"}, {"sha": "57915446e1d1aee8e94586284d7b2546abd5c8fb", "filename": "src/bootstrap/step.rs", "status": "modified", "additions": 57, "deletions": 29, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fbootstrap%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fbootstrap%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fstep.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -307,7 +307,7 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n                  .dep(|s| s.name(\"libtest\"))\n                  .dep(|s| s.name(\"tool-compiletest\").target(s.host).stage(0))\n                  .dep(|s| s.name(\"test-helpers\"))\n-                 .dep(|s| s.name(\"emulator-copy-libs\"))\n+                 .dep(|s| s.name(\"remote-copy-libs\"))\n                  .default(mode != \"pretty\") // pretty tests don't run everywhere\n                  .run(move |s| {\n                      check::compiletest(build, &s.compiler(), s.target, mode, dir)\n@@ -346,7 +346,7 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n              .dep(|s| s.name(\"tool-compiletest\").target(s.host).stage(0))\n              .dep(|s| s.name(\"test-helpers\"))\n              .dep(|s| s.name(\"debugger-scripts\"))\n-             .dep(|s| s.name(\"emulator-copy-libs\"))\n+             .dep(|s| s.name(\"remote-copy-libs\"))\n              .run(move |s| check::compiletest(build, &s.compiler(), s.target,\n                                          \"debuginfo-gdb\", \"debuginfo\"));\n         let mut rule = rules.test(\"check-debuginfo\", \"src/test/debuginfo\");\n@@ -400,14 +400,14 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n     for (krate, path, _default) in krates(\"std\") {\n         rules.test(&krate.test_step, path)\n              .dep(|s| s.name(\"libtest\"))\n-             .dep(|s| s.name(\"emulator-copy-libs\"))\n+             .dep(|s| s.name(\"remote-copy-libs\"))\n              .run(move |s| check::krate(build, &s.compiler(), s.target,\n                                         Mode::Libstd, TestKind::Test,\n                                         Some(&krate.name)));\n     }\n     rules.test(\"check-std-all\", \"path/to/nowhere\")\n          .dep(|s| s.name(\"libtest\"))\n-         .dep(|s| s.name(\"emulator-copy-libs\"))\n+         .dep(|s| s.name(\"remote-copy-libs\"))\n          .default(true)\n          .run(move |s| check::krate(build, &s.compiler(), s.target,\n                                     Mode::Libstd, TestKind::Test, None));\n@@ -416,44 +416,44 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n     for (krate, path, _default) in krates(\"std\") {\n         rules.bench(&krate.bench_step, path)\n              .dep(|s| s.name(\"libtest\"))\n-             .dep(|s| s.name(\"emulator-copy-libs\"))\n+             .dep(|s| s.name(\"remote-copy-libs\"))\n              .run(move |s| check::krate(build, &s.compiler(), s.target,\n                                         Mode::Libstd, TestKind::Bench,\n                                         Some(&krate.name)));\n     }\n     rules.bench(\"bench-std-all\", \"path/to/nowhere\")\n          .dep(|s| s.name(\"libtest\"))\n-         .dep(|s| s.name(\"emulator-copy-libs\"))\n+         .dep(|s| s.name(\"remote-copy-libs\"))\n          .default(true)\n          .run(move |s| check::krate(build, &s.compiler(), s.target,\n                                     Mode::Libstd, TestKind::Bench, None));\n \n     for (krate, path, _default) in krates(\"test\") {\n         rules.test(&krate.test_step, path)\n              .dep(|s| s.name(\"libtest\"))\n-             .dep(|s| s.name(\"emulator-copy-libs\"))\n+             .dep(|s| s.name(\"remote-copy-libs\"))\n              .run(move |s| check::krate(build, &s.compiler(), s.target,\n                                         Mode::Libtest, TestKind::Test,\n                                         Some(&krate.name)));\n     }\n     rules.test(\"check-test-all\", \"path/to/nowhere\")\n          .dep(|s| s.name(\"libtest\"))\n-         .dep(|s| s.name(\"emulator-copy-libs\"))\n+         .dep(|s| s.name(\"remote-copy-libs\"))\n          .default(true)\n          .run(move |s| check::krate(build, &s.compiler(), s.target,\n                                     Mode::Libtest, TestKind::Test, None));\n     for (krate, path, _default) in krates(\"rustc-main\") {\n         rules.test(&krate.test_step, path)\n              .dep(|s| s.name(\"librustc\"))\n-             .dep(|s| s.name(\"emulator-copy-libs\"))\n+             .dep(|s| s.name(\"remote-copy-libs\"))\n              .host(true)\n              .run(move |s| check::krate(build, &s.compiler(), s.target,\n                                         Mode::Librustc, TestKind::Test,\n                                         Some(&krate.name)));\n     }\n     rules.test(\"check-rustc-all\", \"path/to/nowhere\")\n          .dep(|s| s.name(\"librustc\"))\n-         .dep(|s| s.name(\"emulator-copy-libs\"))\n+         .dep(|s| s.name(\"remote-copy-libs\"))\n          .default(true)\n          .host(true)\n          .run(move |s| check::krate(build, &s.compiler(), s.target,\n@@ -470,6 +470,10 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n          .dep(|s| s.name(\"librustc\"))\n          .host(true)\n          .run(move |s| check::cargotest(build, s.stage, s.target));\n+    rules.test(\"check-cargo\", \"cargo\")\n+         .dep(|s| s.name(\"tool-cargo\"))\n+         .host(true)\n+         .run(move |s| check::cargo(build, s.stage, s.target));\n     rules.test(\"check-tidy\", \"src/tools/tidy\")\n          .dep(|s| s.name(\"tool-tidy\").stage(0))\n          .default(true)\n@@ -496,33 +500,33 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n     rules.build(\"openssl\", \"path/to/nowhere\")\n          .run(move |s| native::openssl(build, s.target));\n \n-    // Some test suites are run inside emulators, and most of our test binaries\n-    // are linked dynamically which means we need to ship the standard library\n-    // and such to the emulator ahead of time. This step represents this and is\n-    // a dependency of all test suites.\n+    // Some test suites are run inside emulators or on remote devices, and most\n+    // of our test binaries are linked dynamically which means we need to ship\n+    // the standard library and such to the emulator ahead of time. This step\n+    // represents this and is a dependency of all test suites.\n     //\n     // Most of the time this step is a noop (the `check::emulator_copy_libs`\n     // only does work if necessary). For some steps such as shipping data to\n     // QEMU we have to build our own tools so we've got conditional dependencies\n-    // on those programs as well. Note that the QEMU client is built for the\n-    // build target (us) and the server is built for the target.\n-    rules.test(\"emulator-copy-libs\", \"path/to/nowhere\")\n+    // on those programs as well. Note that the remote test client is built for\n+    // the build target (us) and the server is built for the target.\n+    rules.test(\"remote-copy-libs\", \"path/to/nowhere\")\n          .dep(|s| s.name(\"libtest\"))\n          .dep(move |s| {\n-             if build.qemu_rootfs(s.target).is_some() {\n-                s.name(\"tool-qemu-test-client\").target(s.host).stage(0)\n+             if build.remote_tested(s.target) {\n+                s.name(\"tool-remote-test-client\").target(s.host).stage(0)\n              } else {\n                  Step::noop()\n              }\n          })\n          .dep(move |s| {\n-             if build.qemu_rootfs(s.target).is_some() {\n-                s.name(\"tool-qemu-test-server\")\n+             if build.remote_tested(s.target) {\n+                s.name(\"tool-remote-test-server\")\n              } else {\n                  Step::noop()\n              }\n          })\n-         .run(move |s| check::emulator_copy_libs(build, &s.compiler(), s.target));\n+         .run(move |s| check::remote_copy_libs(build, &s.compiler(), s.target));\n \n     rules.test(\"check-bootstrap\", \"src/bootstrap\")\n          .default(true)\n@@ -562,15 +566,21 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n          .dep(|s| s.name(\"maybe-clean-tools\"))\n          .dep(|s| s.name(\"libstd-tool\"))\n          .run(move |s| compile::tool(build, s.stage, s.target, \"build-manifest\"));\n-    rules.build(\"tool-qemu-test-server\", \"src/tools/qemu-test-server\")\n+    rules.build(\"tool-remote-test-server\", \"src/tools/remote-test-server\")\n          .dep(|s| s.name(\"maybe-clean-tools\"))\n          .dep(|s| s.name(\"libstd-tool\"))\n-         .run(move |s| compile::tool(build, s.stage, s.target, \"qemu-test-server\"));\n-    rules.build(\"tool-qemu-test-client\", \"src/tools/qemu-test-client\")\n+         .run(move |s| compile::tool(build, s.stage, s.target, \"remote-test-server\"));\n+    rules.build(\"tool-remote-test-client\", \"src/tools/remote-test-client\")\n          .dep(|s| s.name(\"maybe-clean-tools\"))\n          .dep(|s| s.name(\"libstd-tool\"))\n-         .run(move |s| compile::tool(build, s.stage, s.target, \"qemu-test-client\"));\n-    rules.build(\"tool-cargo\", \"cargo\")\n+         .run(move |s| compile::tool(build, s.stage, s.target, \"remote-test-client\"));\n+    rules.build(\"tool-rust-installer\", \"src/tools/rust-installer\")\n+         .dep(|s| s.name(\"maybe-clean-tools\"))\n+         .dep(|s| s.name(\"libstd-tool\"))\n+         .run(move |s| compile::tool(build, s.stage, s.target, \"rust-installer\"));\n+    rules.build(\"tool-cargo\", \"src/tools/cargo\")\n+         .host(true)\n+         .default(build.config.extended)\n          .dep(|s| s.name(\"maybe-clean-tools\"))\n          .dep(|s| s.name(\"libstd-tool\"))\n          .dep(|s| s.stage(0).host(s.target).name(\"openssl\"))\n@@ -582,8 +592,9 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n               .host(&build.config.build)\n          })\n          .run(move |s| compile::tool(build, s.stage, s.target, \"cargo\"));\n-    rules.build(\"tool-rls\", \"rls\")\n+    rules.build(\"tool-rls\", \"src/tools/rls\")\n          .host(true)\n+         .default(build.config.extended)\n          .dep(|s| s.name(\"librustc-tool\"))\n          .dep(|s| s.stage(0).host(s.target).name(\"openssl\"))\n          .dep(move |s| {\n@@ -697,6 +708,7 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n          .host(true)\n          .only_host_build(true)\n          .default(true)\n+         .dep(move |s| tool_rust_installer(build, s))\n          .run(move |s| dist::rustc(build, s.stage, s.target));\n     rules.dist(\"dist-std\", \"src/libstd\")\n          .dep(move |s| {\n@@ -711,10 +723,12 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n          })\n          .default(true)\n          .only_host_build(true)\n+         .dep(move |s| tool_rust_installer(build, s))\n          .run(move |s| dist::std(build, &s.compiler(), s.target));\n     rules.dist(\"dist-mingw\", \"path/to/nowhere\")\n          .default(true)\n          .only_host_build(true)\n+         .dep(move |s| tool_rust_installer(build, s))\n          .run(move |s| {\n              if s.target.contains(\"pc-windows-gnu\") {\n                  dist::mingw(build, s.target)\n@@ -725,29 +739,34 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n          .host(true)\n          .only_build(true)\n          .only_host_build(true)\n+         .dep(move |s| tool_rust_installer(build, s))\n          .run(move |_| dist::rust_src(build));\n     rules.dist(\"dist-docs\", \"src/doc\")\n          .default(true)\n          .only_host_build(true)\n          .dep(|s| s.name(\"default:doc\"))\n+         .dep(move |s| tool_rust_installer(build, s))\n          .run(move |s| dist::docs(build, s.stage, s.target));\n     rules.dist(\"dist-analysis\", \"analysis\")\n          .default(build.config.extended)\n          .dep(|s| s.name(\"dist-std\"))\n          .only_host_build(true)\n+         .dep(move |s| tool_rust_installer(build, s))\n          .run(move |s| dist::analysis(build, &s.compiler(), s.target));\n     rules.dist(\"dist-rls\", \"rls\")\n          .host(true)\n          .only_host_build(true)\n          .dep(|s| s.name(\"tool-rls\"))\n+         .dep(move |s| tool_rust_installer(build, s))\n          .run(move |s| dist::rls(build, s.stage, s.target));\n     rules.dist(\"install\", \"path/to/nowhere\")\n          .dep(|s| s.name(\"default:dist\"))\n-         .run(move |s| install::install(build, s.stage, s.target));\n+         .run(move |s| install::Installer::new(build).install(s.stage, s.target));\n     rules.dist(\"dist-cargo\", \"cargo\")\n          .host(true)\n          .only_host_build(true)\n          .dep(|s| s.name(\"tool-cargo\"))\n+         .dep(move |s| tool_rust_installer(build, s))\n          .run(move |s| dist::cargo(build, s.stage, s.target));\n     rules.dist(\"dist-extended\", \"extended\")\n          .default(build.config.extended)\n@@ -760,6 +779,7 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n          .dep(|d| d.name(\"dist-cargo\"))\n          .dep(|d| d.name(\"dist-rls\"))\n          .dep(|d| d.name(\"dist-analysis\"))\n+         .dep(move |s| tool_rust_installer(build, s))\n          .run(move |s| dist::extended(build, s.stage, s.target));\n \n     rules.dist(\"dist-sign\", \"hash-and-sign\")\n@@ -771,6 +791,14 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n \n     rules.verify();\n     return rules;\n+\n+    /// Helper to depend on a stage0 build-only rust-installer tool.\n+    fn tool_rust_installer<'a>(build: &'a Build, step: &Step<'a>) -> Step<'a> {\n+        step.name(\"tool-rust-installer\")\n+            .host(&build.config.build)\n+            .target(&build.config.build)\n+            .stage(0)\n+    }\n }\n \n #[derive(PartialEq, Eq, Hash, Clone, Debug)]"}, {"sha": "e01c06b10fcd63097de8a14f8b5e2b0f525bccb3", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -139,6 +139,8 @@ pub fn dylib_path_var() -> &'static str {\n         \"PATH\"\n     } else if cfg!(target_os = \"macos\") {\n         \"DYLD_LIBRARY_PATH\"\n+    } else if cfg!(target_os = \"haiku\") {\n+        \"LIBRARY_PATH\"\n     } else {\n         \"LD_LIBRARY_PATH\"\n     }"}, {"sha": "da00b970da977e950bacdf275403c0a57e0e6ad7", "filename": "src/build_helper/lib.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fbuild_helper%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fbuild_helper%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuild_helper%2Flib.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -198,7 +198,11 @@ pub fn native_lib_boilerplate(src_name: &str,\n     let out_dir = env::var_os(\"RUSTBUILD_NATIVE_DIR\").unwrap_or(env::var_os(\"OUT_DIR\").unwrap());\n     let out_dir = PathBuf::from(out_dir).join(out_name);\n     t!(create_dir_racy(&out_dir));\n-    println!(\"cargo:rustc-link-lib=static={}\", link_name);\n+    if link_name.contains('=') {\n+        println!(\"cargo:rustc-link-lib={}\", link_name);\n+    } else {\n+        println!(\"cargo:rustc-link-lib=static={}\", link_name);\n+    }\n     println!(\"cargo:rustc-link-search=native={}\", out_dir.join(search_subdir).display());\n \n     let timestamp = out_dir.join(\"rustbuild.timestamp\");\n@@ -209,6 +213,21 @@ pub fn native_lib_boilerplate(src_name: &str,\n     }\n }\n \n+pub fn sanitizer_lib_boilerplate(sanitizer_name: &str) -> Result<NativeLibBoilerplate, ()> {\n+    let (link_name, search_path) = match &*env::var(\"TARGET\").unwrap() {\n+        \"x86_64-unknown-linux-gnu\" => (\n+            format!(\"clang_rt.{}-x86_64\", sanitizer_name),\n+            \"build/lib/linux\",\n+        ),\n+        \"x86_64-apple-darwin\" => (\n+            format!(\"dylib=clang_rt.{}_osx_dynamic\", sanitizer_name),\n+            \"build/lib/darwin\",\n+        ),\n+        _ => return Err(()),\n+    };\n+    native_lib_boilerplate(\"compiler-rt\", sanitizer_name, &link_name, search_path)\n+}\n+\n fn dir_up_to_date(src: &Path, threshold: &FileTime) -> bool {\n     t!(fs::read_dir(src)).map(|e| t!(e)).all(|e| {\n         let meta = t!(e.metadata());"}, {"sha": "627b5062df3334701e4a64c0995bb42ada55c2e0", "filename": "src/ci/docker/README.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2FREADME.md?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -16,6 +16,12 @@ for example:\n \n Images will output artifacts in an `obj` dir at the root of a repository.\n \n+## Filesystem layout\n+\n+- Each directory, excluding `scripts` and `disabled`, corresponds to a docker image\n+- `scripts` contains files shared by docker images\n+- `disabled` contains images that are not build travis\n+\n ## Cross toolchains\n \n A number of these images take quite a long time to compile as they're building"}, {"sha": "2a928c5ec7e894b4a1f331e879be3db19e15441d", "filename": "src/ci/docker/arm-android/Dockerfile", "status": "modified", "additions": 44, "deletions": 30, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Farm-android%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Farm-android%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Farm-android%2FDockerfile?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -1,46 +1,60 @@\n FROM ubuntu:16.04\n \n-RUN dpkg --add-architecture i386 && \\\n-    apt-get update && \\\n+RUN apt-get update && \\\n     apt-get install -y --no-install-recommends \\\n+  ca-certificates \\\n+  cmake \\\n+  curl \\\n+  file \\\n   g++ \\\n+  git \\\n+  libssl-dev \\\n   make \\\n-  file \\\n-  curl \\\n-  ca-certificates \\\n+  pkg-config \\\n   python2.7 \\\n-  git \\\n-  cmake \\\n-  unzip \\\n-  expect \\\n-  openjdk-9-jre-headless \\\n   sudo \\\n-  libstdc++6:i386 \\\n-  xz-utils \\\n-  libssl-dev \\\n-  pkg-config\n+  unzip \\\n+  xz-utils\n \n-WORKDIR /android/\n-ENV PATH=$PATH:/android/ndk-arm-9/bin:/android/sdk/tools:/android/sdk/platform-tools\n+# dumb-init\n+COPY scripts/dumb-init.sh /scripts/\n+RUN sh /scripts/dumb-init.sh\n \n-COPY install-ndk.sh install-sdk.sh accept-licenses.sh /android/\n-RUN sh /android/install-ndk.sh\n-RUN sh /android/install-sdk.sh\n+# ndk\n+COPY scripts/android-ndk.sh /scripts/\n+RUN . /scripts/android-ndk.sh && \\\n+    download_and_make_toolchain android-ndk-r13b-linux-x86_64.zip arm 9\n \n-RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\\n-    dpkg -i dumb-init_*.deb && \\\n-    rm dumb-init_*.deb\n+# sdk\n+RUN dpkg --add-architecture i386 && \\\n+    apt-get update && \\\n+    apt-get install -y --no-install-recommends \\\n+  libgl1-mesa-glx \\\n+  libpulse0 \\\n+  libstdc++6:i386 \\\n+  openjdk-9-jre-headless \\\n+  tzdata\n \n-COPY start-emulator.sh /android/\n+COPY scripts/android-sdk.sh /scripts/\n+RUN . /scripts/android-sdk.sh && \\\n+    download_and_create_avd tools_r25.2.5-linux.zip armeabi-v7a 18\n \n-ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\", \"/android/start-emulator.sh\"]\n+# env\n+ENV PATH=$PATH:/android/sdk/tools\n+ENV PATH=$PATH:/android/sdk/platform-tools\n \n-RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-02-24-sccache-x86_64-unknown-linux-gnu && \\\n-      chmod +x /usr/local/bin/sccache\n+ENV TARGETS=arm-linux-androideabi\n \n ENV RUST_CONFIGURE_ARGS \\\n-      --target=arm-linux-androideabi \\\n-      --arm-linux-androideabi-ndk=/android/ndk-arm-9\n+      --target=$TARGETS \\\n+      --arm-linux-androideabi-ndk=/android/ndk/arm-9\n+\n+ENV SCRIPT python2.7 ../x.py test --target $TARGETS\n+\n+# sccache\n+COPY scripts/sccache.sh /scripts/\n+RUN sh /scripts/sccache.sh\n \n-ENV SCRIPT python2.7 ../x.py test --target arm-linux-androideabi\n+# init\n+COPY scripts/android-start-emulator.sh /scripts/\n+ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\", \"/scripts/android-start-emulator.sh\"]"}, {"sha": "8d8f60a5ec2604606571cdb6a7d231d5754aa38f", "filename": "src/ci/docker/arm-android/accept-licenses.sh", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/158b085f06a41004ebf36d87afa3548f8b60861a/src%2Fci%2Fdocker%2Farm-android%2Faccept-licenses.sh", "raw_url": "https://github.com/rust-lang/rust/raw/158b085f06a41004ebf36d87afa3548f8b60861a/src%2Fci%2Fdocker%2Farm-android%2Faccept-licenses.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Farm-android%2Faccept-licenses.sh?ref=158b085f06a41004ebf36d87afa3548f8b60861a", "patch": "@@ -1,15 +0,0 @@\n-#!/usr/bin/expect -f\n-# ignore-license\n-\n-set timeout 1800\n-set cmd [lindex $argv 0]\n-set licenses [lindex $argv 1]\n-\n-spawn {*}$cmd\n-expect {\n-  \"Do you accept the license '*'*\" {\n-        exp_send \"y\\r\"\n-        exp_continue\n-  }\n-  eof\n-}"}, {"sha": "389ec062110e0e5681ef0d8385582e508afca44c", "filename": "src/ci/docker/arm-android/install-ndk.sh", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/158b085f06a41004ebf36d87afa3548f8b60861a/src%2Fci%2Fdocker%2Farm-android%2Finstall-ndk.sh", "raw_url": "https://github.com/rust-lang/rust/raw/158b085f06a41004ebf36d87afa3548f8b60861a/src%2Fci%2Fdocker%2Farm-android%2Finstall-ndk.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Farm-android%2Finstall-ndk.sh?ref=158b085f06a41004ebf36d87afa3548f8b60861a", "patch": "@@ -1,33 +0,0 @@\n-#!/bin/sh\n-# Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-set -ex\n-\n-cpgdb() {\n-  cp android-ndk-r11c/prebuilt/linux-x86_64/bin/gdb /android/$1/bin/$2-gdb\n-  cp android-ndk-r11c/prebuilt/linux-x86_64/bin/gdb-orig /android/$1/bin/gdb-orig\n-  cp -r android-ndk-r11c/prebuilt/linux-x86_64/share /android/$1/share\n-}\n-\n-# Prep the Android NDK\n-#\n-# See https://github.com/servo/servo/wiki/Building-for-Android\n-curl -O https://dl.google.com/android/repository/android-ndk-r11c-linux-x86_64.zip\n-unzip -q android-ndk-r11c-linux-x86_64.zip\n-bash android-ndk-r11c/build/tools/make-standalone-toolchain.sh \\\n-        --platform=android-9 \\\n-        --toolchain=arm-linux-androideabi-4.9 \\\n-        --install-dir=/android/ndk-arm-9 \\\n-        --ndk-dir=/android/android-ndk-r11c \\\n-        --arch=arm\n-cpgdb ndk-arm-9 arm-linux-androideabi\n-\n-rm -rf ./android-ndk-r11c-linux-x86_64.zip ./android-ndk-r11c"}, {"sha": "2db1d46ba2273e89cfdb655ba59ef427ba0974ba", "filename": "src/ci/docker/arm-android/install-sdk.sh", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/158b085f06a41004ebf36d87afa3548f8b60861a/src%2Fci%2Fdocker%2Farm-android%2Finstall-sdk.sh", "raw_url": "https://github.com/rust-lang/rust/raw/158b085f06a41004ebf36d87afa3548f8b60861a/src%2Fci%2Fdocker%2Farm-android%2Finstall-sdk.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Farm-android%2Finstall-sdk.sh?ref=158b085f06a41004ebf36d87afa3548f8b60861a", "patch": "@@ -1,33 +0,0 @@\n-#!/bin/sh\n-# Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-set -ex\n-\n-# Prep the SDK and emulator\n-#\n-# Note that the update process requires that we accept a bunch of licenses, and\n-# we can't just pipe `yes` into it for some reason, so we take the same strategy\n-# located in https://github.com/appunite/docker by just wrapping it in a script\n-# which apparently magically accepts the licenses.\n-\n-mkdir sdk\n-curl https://dl.google.com/android/android-sdk_r24.4-linux.tgz | \\\n-    tar xzf - -C sdk --strip-components=1\n-\n-filter=\"platform-tools,android-18\"\n-filter=\"$filter,sys-img-armeabi-v7a-android-18\"\n-\n-./accept-licenses.sh \"android - update sdk -a --no-ui --filter $filter\"\n-\n-echo \"no\" | android create avd \\\n-                --name arm-18 \\\n-                --target android-18 \\\n-                --abi armeabi-v7a"}, {"sha": "03e0b78ba89b3d83a8c3e2b6444aa0c7fe54b25d", "filename": "src/ci/docker/armhf-gnu/Dockerfile", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Farmhf-gnu%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Farmhf-gnu%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Farmhf-gnu%2FDockerfile?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -31,7 +31,7 @@ WORKDIR /build\n # The `vexpress_config` config file was a previously generated config file for\n # the kernel. This file was generated by running `make vexpress_defconfig`\n # followed by `make menuconfig` and then enabling the IPv6 protocol page.\n-COPY vexpress_config /build/.config\n+COPY armhf-gnu/vexpress_config /build/.config\n RUN curl https://cdn.kernel.org/pub/linux/kernel/v4.x/linux-4.4.42.tar.xz | \\\n       tar xJf - && \\\n       cd /build/linux-4.4.42 && \\\n@@ -63,18 +63,18 @@ RUN curl http://cdimage.ubuntu.com/ubuntu-base/releases/16.04/release/ubuntu-bas\n \n # Copy over our init script, which starts up our test server and also a few\n # other misc tasks.\n-COPY rcS rootfs/etc/init.d/rcS\n+COPY armhf-gnu/rcS rootfs/etc/init.d/rcS\n RUN chmod +x rootfs/etc/init.d/rcS\n \n # Helper to quickly fill the entropy pool in the kernel.\n-COPY addentropy.c /tmp/\n+COPY armhf-gnu/addentropy.c /tmp/\n RUN arm-linux-gnueabihf-gcc addentropy.c -o rootfs/addentropy -static\n \n # TODO: What is this?!\n RUN curl -O http://ftp.nl.debian.org/debian/dists/jessie/main/installer-armhf/current/images/device-tree/vexpress-v2p-ca15-tc1.dtb\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "7759d91e1bb635c41ba6b89a426616ebda65a293", "filename": "src/ci/docker/cross/Dockerfile", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fcross%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fcross%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fcross%2FDockerfile?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -22,7 +22,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   pkg-config\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\\n@@ -32,10 +32,10 @@ ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n \n WORKDIR /tmp\n \n-COPY build-rumprun.sh /tmp/\n+COPY cross/build-rumprun.sh /tmp/\n RUN ./build-rumprun.sh\n \n-COPY build-arm-musl.sh /tmp/\n+COPY cross/build-arm-musl.sh /tmp/\n RUN ./build-arm-musl.sh\n \n # originally from"}, {"sha": "918d2911ae28f5a5ba301294068740568e8a29e4", "filename": "src/ci/docker/disabled/dist-aarch64-android/Dockerfile", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fdisabled%2Fdist-aarch64-android%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fdisabled%2Fdist-aarch64-android%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdisabled%2Fdist-aarch64-android%2FDockerfile?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -0,0 +1,50 @@\n+FROM ubuntu:16.04\n+\n+RUN apt-get update && \\\n+    apt-get install -y --no-install-recommends \\\n+  ca-certificates \\\n+  cmake \\\n+  curl \\\n+  file \\\n+  g++ \\\n+  git \\\n+  libssl-dev \\\n+  make \\\n+  pkg-config \\\n+  python2.7 \\\n+  sudo \\\n+  unzip \\\n+  xz-utils\n+\n+# dumb-init\n+COPY scripts/dumb-init.sh /scripts/\n+RUN sh /scripts/dumb-init.sh\n+\n+# ndk\n+COPY scripts/android-ndk.sh /scripts/\n+RUN . /scripts/android-ndk.sh && \\\n+    download_and_make_toolchain android-ndk-r13b-linux-x86_64.zip arm64 21\n+\n+# env\n+ENV PATH=$PATH:/android/ndk/arm64-21/bin\n+\n+ENV DEP_Z_ROOT=/android/ndk/arm64-21/sysroot/usr/\n+\n+ENV HOSTS=aarch64-linux-android\n+\n+ENV RUST_CONFIGURE_ARGS \\\n+      --host=$HOSTS \\\n+      --target=$HOSTS \\\n+      --aarch64-linux-android-ndk=/android/ndk/arm64-21 \\\n+      --disable-rpath \\\n+      --enable-extended \\\n+      --enable-cargo-openssl-static\n+\n+ENV SCRIPT python2.7 ../x.py dist --target $HOSTS --host $HOSTS\n+\n+# sccache\n+COPY scripts/sccache.sh /scripts/\n+RUN sh /scripts/sccache.sh\n+\n+# init\n+ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]"}, {"sha": "aed82e6c13872d6a276aeddd974cb6e81654b769", "filename": "src/ci/docker/disabled/dist-armv7-android/Dockerfile", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fdisabled%2Fdist-armv7-android%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fdisabled%2Fdist-armv7-android%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdisabled%2Fdist-armv7-android%2FDockerfile?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -0,0 +1,68 @@\n+FROM ubuntu:16.04\n+\n+RUN apt-get update && \\\n+    apt-get install -y --no-install-recommends \\\n+  ca-certificates \\\n+  cmake \\\n+  curl \\\n+  file \\\n+  g++ \\\n+  git \\\n+  libssl-dev \\\n+  make \\\n+  pkg-config \\\n+  python2.7 \\\n+  sudo \\\n+  unzip \\\n+  xz-utils\n+\n+# dumb-init\n+COPY scripts/dumb-init.sh /scripts/\n+RUN sh /scripts/dumb-init.sh\n+\n+# ndk\n+COPY scripts/android-ndk.sh /scripts/\n+RUN . /scripts/android-ndk.sh && \\\n+    download_ndk android-ndk-r13b-linux-x86_64.zip && \\\n+    make_standalone_toolchain arm 9 && \\\n+    make_standalone_toolchain arm 21 && \\\n+    remove_ndk\n+\n+RUN chmod 777 /android/ndk && \\\n+    ln -s /android/ndk/arm-21 /android/ndk/arm\n+\n+# env\n+ENV PATH=$PATH:/android/ndk/arm-9/bin\n+\n+ENV DEP_Z_ROOT=/android/ndk/arm-9/sysroot/usr/\n+\n+ENV HOSTS=armv7-linux-androideabi\n+\n+ENV RUST_CONFIGURE_ARGS \\\n+      --host=$HOSTS \\\n+      --target=$HOSTS \\\n+      --armv7-linux-androideabi-ndk=/android/ndk/arm \\\n+      --disable-rpath \\\n+      --enable-extended \\\n+      --enable-cargo-openssl-static\n+\n+# We support api level 9, but api level 21 is required to build llvm. To\n+# overcome this problem we use a ndk with api level 21 to build llvm and then\n+# switch to a ndk with api level 9 to complete the build. When the linker is\n+# invoked there are missing symbols (like sigsetempty, not available with api\n+# level 9), the default linker behavior is to generate an error, to allow the\n+# build to finish we use --warn-unresolved-symbols. Note that the missing\n+# symbols does not affect std, only the compiler (llvm) and cargo (openssl).\n+ENV SCRIPT \\\n+  python2.7 ../x.py build src/llvm --host $HOSTS --target $HOSTS && \\\n+  (export RUSTFLAGS=\"\\\"-C link-arg=-Wl,--warn-unresolved-symbols\\\"\"; \\\n+    rm /android/ndk/arm && \\\n+    ln -s /android/ndk/arm-9 /android/ndk/arm && \\\n+    python2.7 ../x.py dist --host $HOSTS --target $HOSTS)\n+\n+# sccache\n+COPY scripts/sccache.sh /scripts/\n+RUN sh /scripts/sccache.sh\n+\n+# init\n+ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]"}, {"sha": "f012e869e7885fb4963e33f09bd616b9f64c7383", "filename": "src/ci/docker/disabled/dist-i686-android/Dockerfile", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fdisabled%2Fdist-i686-android%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fdisabled%2Fdist-i686-android%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdisabled%2Fdist-i686-android%2FDockerfile?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -0,0 +1,68 @@\n+FROM ubuntu:16.04\n+\n+RUN apt-get update && \\\n+    apt-get install -y --no-install-recommends \\\n+  ca-certificates \\\n+  cmake \\\n+  curl \\\n+  file \\\n+  g++ \\\n+  git \\\n+  libssl-dev \\\n+  make \\\n+  pkg-config \\\n+  python2.7 \\\n+  sudo \\\n+  unzip \\\n+  xz-utils\n+\n+# dumb-init\n+COPY scripts/dumb-init.sh /scripts/\n+RUN sh /scripts/dumb-init.sh\n+\n+# ndk\n+COPY scripts/android-ndk.sh /scripts/\n+RUN . /scripts/android-ndk.sh && \\\n+    download_ndk android-ndk-r13b-linux-x86_64.zip && \\\n+    make_standalone_toolchain x86 9 && \\\n+    make_standalone_toolchain x86 21 && \\\n+    remove_ndk\n+\n+RUN chmod 777 /android/ndk && \\\n+    ln -s /android/ndk/x86-21 /android/ndk/x86\n+\n+# env\n+ENV PATH=$PATH:/android/ndk/x86-9/bin\n+\n+ENV DEP_Z_ROOT=/android/ndk/x86-9/sysroot/usr/\n+\n+ENV HOSTS=i686-linux-android\n+\n+ENV RUST_CONFIGURE_ARGS \\\n+      --host=$HOSTS \\\n+      --target=$HOSTS \\\n+      --i686-linux-android-ndk=/android/ndk/x86 \\\n+      --disable-rpath \\\n+      --enable-extended \\\n+      --enable-cargo-openssl-static\n+\n+# We support api level 9, but api level 21 is required to build llvm. To\n+# overcome this problem we use a ndk with api level 21 to build llvm and then\n+# switch to a ndk with api level 9 to complete the build. When the linker is\n+# invoked there are missing symbols (like sigsetempty, not available with api\n+# level 9), the default linker behavior is to generate an error, to allow the\n+# build to finish we use --warn-unresolved-symbols. Note that the missing\n+# symbols does not affect std, only the compiler (llvm) and cargo (openssl).\n+ENV SCRIPT \\\n+  python2.7 ../x.py build src/llvm --host $HOSTS --target $HOSTS && \\\n+  (export RUSTFLAGS=\"\\\"-C link-arg=-Wl,--warn-unresolved-symbols\\\"\"; \\\n+    rm /android/ndk/x86 && \\\n+    ln -s /android/ndk/x86-9 /android/ndk/x86 && \\\n+    python2.7 ../x.py dist --host $HOSTS --target $HOSTS)\n+\n+# sccache\n+COPY scripts/sccache.sh /scripts/\n+RUN sh /scripts/sccache.sh\n+\n+# init\n+ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]"}, {"sha": "0c586452840f97afa0e098c8d3c85516bc9d5953", "filename": "src/ci/docker/disabled/dist-x86_64-android/Dockerfile", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fdisabled%2Fdist-x86_64-android%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fdisabled%2Fdist-x86_64-android%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdisabled%2Fdist-x86_64-android%2FDockerfile?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -0,0 +1,50 @@\n+FROM ubuntu:16.04\n+\n+RUN apt-get update && \\\n+    apt-get install -y --no-install-recommends \\\n+  ca-certificates \\\n+  cmake \\\n+  curl \\\n+  file \\\n+  g++ \\\n+  git \\\n+  libssl-dev \\\n+  make \\\n+  pkg-config \\\n+  python2.7 \\\n+  sudo \\\n+  unzip \\\n+  xz-utils\n+\n+# dumb-init\n+COPY scripts/dumb-init.sh /scripts/\n+RUN sh /scripts/dumb-init.sh\n+\n+# ndk\n+COPY scripts/android-ndk.sh /scripts/\n+RUN . /scripts/android-ndk.sh && \\\n+    download_and_make_toolchain android-ndk-r13b-linux-x86_64.zip x86_64 21\n+\n+# env\n+ENV PATH=$PATH:/android/ndk/x86_64-21/bin\n+\n+ENV DEP_Z_ROOT=/android/ndk/x86_64-21/sysroot/usr/\n+\n+ENV HOSTS=x86_64-linux-android\n+\n+ENV RUST_CONFIGURE_ARGS \\\n+      --host=$HOSTS \\\n+      --target=$HOSTS \\\n+      --x86_64-linux-android-ndk=/android/ndk/x86_64-21 \\\n+      --disable-rpath \\\n+      --enable-extended \\\n+      --enable-cargo-openssl-static\n+\n+ENV SCRIPT python2.7 ../x.py dist --target $HOSTS --host $HOSTS\n+\n+# sccache\n+COPY scripts/sccache.sh /scripts/\n+RUN sh /scripts/sccache.sh\n+\n+# init\n+ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]"}, {"sha": "0134a5407932ad08906e86e786fcaa5da3a05700", "filename": "src/ci/docker/dist-aarch64-linux/Dockerfile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fdist-aarch64-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fdist-aarch64-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-aarch64-linux%2FDockerfile?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -56,13 +56,13 @@ RUN mkdir /x-tools && chown rustbuild:rustbuild /x-tools\n USER rustbuild\n WORKDIR /tmp\n \n-COPY aarch64-linux-gnu.config build-toolchains.sh /tmp/\n+COPY dist-aarch64-linux/aarch64-linux-gnu.config dist-aarch64-linux/build-toolchains.sh /tmp/\n RUN ./build-toolchains.sh\n \n USER root\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n ENV PATH=$PATH:/x-tools/aarch64-unknown-linux-gnueabi/bin"}, {"sha": "31389dd148a8ae0cd23dc3f95f775226d4a5038f", "filename": "src/ci/docker/dist-android/Dockerfile", "status": "modified", "additions": 38, "deletions": 35, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fdist-android%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fdist-android%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-android%2FDockerfile?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -1,40 +1,36 @@\n FROM ubuntu:16.04\n \n-RUN dpkg --add-architecture i386 && \\\n-    apt-get update && \\\n+RUN apt-get update && \\\n     apt-get install -y --no-install-recommends \\\n+  ca-certificates \\\n+  cmake \\\n+  curl \\\n+  file \\\n   g++ \\\n+  git \\\n+  libssl-dev \\\n   make \\\n-  file \\\n-  curl \\\n-  ca-certificates \\\n+  pkg-config \\\n   python2.7 \\\n-  git \\\n-  cmake \\\n-  unzip \\\n-  expect \\\n-  openjdk-9-jre \\\n   sudo \\\n-  libstdc++6:i386 \\\n-  xz-utils \\\n-  libssl-dev \\\n-  pkg-config\n-\n-WORKDIR /android/\n-ENV PATH=$PATH:/android/ndk-arm-9/bin:/android/sdk/tools:/android/sdk/platform-tools\n-\n-COPY install-ndk.sh /android/\n-RUN sh /android/install-ndk.sh\n-\n-RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\\n-    dpkg -i dumb-init_*.deb && \\\n-    rm dumb-init_*.deb\n-ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n-\n-RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n-      chmod +x /usr/local/bin/sccache\n-\n+  unzip \\\n+  xz-utils\n+\n+# dumb-init\n+COPY scripts/dumb-init.sh /scripts/\n+RUN sh /scripts/dumb-init.sh\n+\n+# ndk\n+COPY scripts/android-ndk.sh /scripts/\n+RUN . /scripts/android-ndk.sh && \\\n+    download_ndk android-ndk-r13b-linux-x86_64.zip && \\\n+    make_standalone_toolchain arm 9 && \\\n+    make_standalone_toolchain x86 9 && \\\n+    make_standalone_toolchain arm64 21 && \\\n+    make_standalone_toolchain x86_64 21 && \\\n+    remove_ndk\n+\n+# env\n ENV TARGETS=arm-linux-androideabi\n ENV TARGETS=$TARGETS,armv7-linux-androideabi\n ENV TARGETS=$TARGETS,i686-linux-android\n@@ -44,10 +40,17 @@ ENV TARGETS=$TARGETS,x86_64-linux-android\n ENV RUST_CONFIGURE_ARGS \\\n       --target=$TARGETS \\\n       --enable-extended \\\n-      --arm-linux-androideabi-ndk=/android/ndk-arm-9 \\\n-      --armv7-linux-androideabi-ndk=/android/ndk-arm-9 \\\n-      --i686-linux-android-ndk=/android/ndk-x86-9 \\\n-      --aarch64-linux-android-ndk=/android/ndk-arm64-21 \\\n-      --x86_64-linux-android-ndk=/android/ndk-x86_64-21\n+      --arm-linux-androideabi-ndk=/android/ndk/arm-9 \\\n+      --armv7-linux-androideabi-ndk=/android/ndk/arm-9 \\\n+      --i686-linux-android-ndk=/android/ndk/x86-9 \\\n+      --aarch64-linux-android-ndk=/android/ndk/arm64-21 \\\n+      --x86_64-linux-android-ndk=/android/ndk/x86_64-21\n \n ENV SCRIPT python2.7 ../x.py dist --target $TARGETS\n+\n+# cache\n+COPY scripts/sccache.sh /scripts/\n+RUN sh /scripts/sccache.sh\n+\n+# init\n+ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]"}, {"sha": "d3a2d31754543c0b95c64861062e4367976bb2ac", "filename": "src/ci/docker/dist-android/install-ndk.sh", "status": "removed", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/158b085f06a41004ebf36d87afa3548f8b60861a/src%2Fci%2Fdocker%2Fdist-android%2Finstall-ndk.sh", "raw_url": "https://github.com/rust-lang/rust/raw/158b085f06a41004ebf36d87afa3548f8b60861a/src%2Fci%2Fdocker%2Fdist-android%2Finstall-ndk.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-android%2Finstall-ndk.sh?ref=158b085f06a41004ebf36d87afa3548f8b60861a", "patch": "@@ -1,44 +0,0 @@\n-#!/bin/sh\n-# Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-set -ex\n-\n-# Prep the Android NDK\n-#\n-# See https://github.com/servo/servo/wiki/Building-for-Android\n-curl -O https://dl.google.com/android/repository/android-ndk-r11c-linux-x86_64.zip\n-unzip -q android-ndk-r11c-linux-x86_64.zip\n-bash android-ndk-r11c/build/tools/make-standalone-toolchain.sh \\\n-        --platform=android-9 \\\n-        --toolchain=arm-linux-androideabi-4.9 \\\n-        --install-dir=/android/ndk-arm-9 \\\n-        --ndk-dir=/android/android-ndk-r11c \\\n-        --arch=arm\n-bash android-ndk-r11c/build/tools/make-standalone-toolchain.sh \\\n-        --platform=android-21 \\\n-        --toolchain=aarch64-linux-android-4.9 \\\n-        --install-dir=/android/ndk-arm64-21 \\\n-        --ndk-dir=/android/android-ndk-r11c \\\n-        --arch=arm64\n-bash android-ndk-r11c/build/tools/make-standalone-toolchain.sh \\\n-        --platform=android-9 \\\n-        --toolchain=x86-4.9 \\\n-        --install-dir=/android/ndk-x86-9 \\\n-        --ndk-dir=/android/android-ndk-r11c \\\n-        --arch=x86\n-bash android-ndk-r11c/build/tools/make-standalone-toolchain.sh \\\n-        --platform=android-21 \\\n-        --toolchain=x86_64-4.9 \\\n-        --install-dir=/android/ndk-x86_64-21 \\\n-        --ndk-dir=/android/android-ndk-r11c \\\n-        --arch=x86_64\n-\n-rm -rf ./android-ndk-r11c-linux-x86_64.zip ./android-ndk-r11c"}, {"sha": "862818a7c918250b43f6d7ac20287cd829520a3e", "filename": "src/ci/docker/dist-arm-linux/Dockerfile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fdist-arm-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fdist-arm-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-arm-linux%2FDockerfile?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -56,13 +56,13 @@ RUN mkdir /x-tools && chown rustbuild:rustbuild /x-tools\n USER rustbuild\n WORKDIR /tmp\n \n-COPY arm-linux-gnueabi.config build-toolchains.sh /tmp/\n+COPY dist-arm-linux/arm-linux-gnueabi.config dist-arm-linux/build-toolchains.sh /tmp/\n RUN ./build-toolchains.sh\n \n USER root\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n ENV PATH=$PATH:/x-tools/arm-unknown-linux-gnueabi/bin"}, {"sha": "7f1f91f844c771ba31c15fa22029ab6a5ddfecdf", "filename": "src/ci/docker/dist-armhf-linux/Dockerfile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fdist-armhf-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fdist-armhf-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-armhf-linux%2FDockerfile?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -56,13 +56,13 @@ RUN mkdir /x-tools && chown rustbuild:rustbuild /x-tools\n USER rustbuild\n WORKDIR /tmp\n \n-COPY arm-linux-gnueabihf.config build-toolchains.sh /tmp/\n+COPY dist-armhf-linux/arm-linux-gnueabihf.config dist-armhf-linux/build-toolchains.sh /tmp/\n RUN ./build-toolchains.sh\n \n USER root\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n ENV PATH=$PATH:/x-tools/arm-unknown-linux-gnueabihf/bin"}, {"sha": "030fd24ebcdd0c1daa5d69b724175d65c21c4933", "filename": "src/ci/docker/dist-armv7-linux/Dockerfile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fdist-armv7-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fdist-armv7-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-armv7-linux%2FDockerfile?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -56,13 +56,13 @@ RUN mkdir /x-tools && chown rustbuild:rustbuild /x-tools\n USER rustbuild\n WORKDIR /tmp\n \n-COPY build-toolchains.sh armv7-linux-gnueabihf.config /tmp/\n+COPY dist-armv7-linux/build-toolchains.sh dist-armv7-linux/armv7-linux-gnueabihf.config /tmp/\n RUN ./build-toolchains.sh\n \n USER root\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n ENV PATH=$PATH:/x-tools/armv7-unknown-linux-gnueabihf/bin"}, {"sha": "d1d9767d35e631c9c70f572b55a2ebc07f90a4ba", "filename": "src/ci/docker/dist-fuchsia/Dockerfile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fdist-fuchsia%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fdist-fuchsia%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-fuchsia%2FDockerfile?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -21,7 +21,7 @@ RUN curl -L https://cmake.org/files/v3.8/cmake-3.8.0-rc1-Linux-x86_64.tar.gz | \\\n       tar xzf - -C /usr/local --strip-components=1\n \n WORKDIR /tmp\n-COPY shared.sh build-toolchain.sh compiler-rt-dso-handle.patch /tmp/\n+COPY dist-fuchsia/shared.sh dist-fuchsia/build-toolchain.sh dist-fuchsia/compiler-rt-dso-handle.patch /tmp/\n RUN /tmp/build-toolchain.sh\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\\n@@ -30,7 +30,7 @@ RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-ini\n ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n ENV \\"}, {"sha": "805d238de1f9b5c78dcc4a9d7d281e07c38ca717", "filename": "src/ci/docker/dist-i586-gnu-i686-musl/Dockerfile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fdist-i586-gnu-i686-musl%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fdist-i586-gnu-i686-musl%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-i586-gnu-i686-musl%2FDockerfile?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -17,7 +17,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   pkg-config\n \n WORKDIR /build/\n-COPY musl-libunwind-patch.patch build-musl.sh /build/\n+COPY dist-i586-gnu-i686-musl/musl-libunwind-patch.patch dist-i586-gnu-i686-musl/build-musl.sh /build/\n RUN sh /build/build-musl.sh && rm -rf /build\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\\n@@ -26,7 +26,7 @@ RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-ini\n ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n ENV RUST_CONFIGURE_ARGS \\"}, {"sha": "9c4d43bfa92bc600899cc8acd0881bd343f4b2cb", "filename": "src/ci/docker/dist-i686-freebsd/Dockerfile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fdist-i686-freebsd%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fdist-i686-freebsd%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-i686-freebsd%2FDockerfile?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -16,7 +16,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   libssl-dev \\\n   pkg-config\n \n-COPY build-toolchain.sh /tmp/\n+COPY dist-i686-freebsd/build-toolchain.sh /tmp/\n RUN /tmp/build-toolchain.sh i686\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\\n@@ -25,7 +25,7 @@ RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-ini\n ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n ENV \\"}, {"sha": "a3c08e93ed158ce47175d05deef91f95bd5feaf5", "filename": "src/ci/docker/dist-i686-linux/Dockerfile", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fdist-i686-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fdist-i686-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-i686-linux%2FDockerfile?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -29,13 +29,13 @@ ENV PATH=/rustroot/bin:$PATH\n ENV LD_LIBRARY_PATH=/rustroot/lib64:/rustroot/lib\n ENV PKG_CONFIG_PATH=/rustroot/lib/pkgconfig\n WORKDIR /tmp\n-COPY shared.sh build-binutils.sh /tmp/\n+COPY dist-i686-linux/shared.sh dist-i686-linux/build-binutils.sh /tmp/\n \n # We need a build of openssl which supports SNI to download artifacts from\n # static.rust-lang.org. This'll be used to link into libcurl below (and used\n # later as well), so build a copy of OpenSSL with dynamic libraries into our\n # generic root.\n-COPY build-openssl.sh /tmp/\n+COPY dist-i686-linux/build-openssl.sh /tmp/\n RUN ./build-openssl.sh\n \n # The `curl` binary on CentOS doesn't support SNI which is needed for fetching\n@@ -44,7 +44,7 @@ RUN ./build-openssl.sh\n #\n # Note that we also disable a bunch of optional features of curl that we don't\n # really need.\n-COPY build-curl.sh /tmp/\n+COPY dist-i686-linux/build-curl.sh /tmp/\n RUN ./build-curl.sh\n \n # binutils < 2.22 has a bug where the 32-bit executables it generates\n@@ -54,26 +54,26 @@ RUN ./build-curl.sh\n RUN ./build-binutils.sh\n \n # Need a newer version of gcc than centos has to compile LLVM nowadays\n-COPY build-gcc.sh /tmp/\n+COPY dist-i686-linux/build-gcc.sh /tmp/\n RUN ./build-gcc.sh\n \n # CentOS 5.5 has Python 2.4 by default, but LLVM needs 2.7+\n-COPY build-python.sh /tmp/\n+COPY dist-i686-linux/build-python.sh /tmp/\n RUN ./build-python.sh\n \n # Apparently CentOS 5.5 desn't have `git` in yum, but we're gonna need it for\n # cloning, so download and build it here.\n-COPY build-git.sh /tmp/\n+COPY dist-i686-linux/build-git.sh /tmp/\n RUN ./build-git.sh\n \n # libssh2 (a dependency of Cargo) requires cmake 2.8.11 or higher but CentOS\n # only has 2.6.4, so build our own\n-COPY build-cmake.sh /tmp/\n+COPY dist-i686-linux/build-cmake.sh /tmp/\n RUN ./build-cmake.sh\n \n # for sanitizers, we need kernel headers files newer than the ones CentOS ships\n # with so we install newer ones here\n-COPY build-headers.sh /tmp/\n+COPY dist-i686-linux/build-headers.sh /tmp/\n RUN ./build-headers.sh\n \n RUN curl -Lo /rustroot/dumb-init \\\n@@ -82,7 +82,7 @@ RUN curl -Lo /rustroot/dumb-init \\\n ENTRYPOINT [\"/rustroot/dumb-init\", \"--\"]\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n ENV HOSTS=i686-unknown-linux-gnu"}, {"sha": "c23240f0c70f9a4475c587158781c7bae20819de", "filename": "src/ci/docker/dist-mips-linux/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fdist-mips-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fdist-mips-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-mips-linux%2FDockerfile?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -17,7 +17,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   pkg-config\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "415dca99d95ee1ec427b2fc526f391929309742c", "filename": "src/ci/docker/dist-mips64-linux/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fdist-mips64-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fdist-mips64-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-mips64-linux%2FDockerfile?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -17,7 +17,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   pkg-config\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "2aba5f615baba476103944d4856bf80b6eb699f9", "filename": "src/ci/docker/dist-mips64el-linux/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fdist-mips64el-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fdist-mips64el-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-mips64el-linux%2FDockerfile?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -17,7 +17,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   pkg-config\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "d15e3010863c464827b9916fbece7ea4d0b134c8", "filename": "src/ci/docker/dist-mipsel-linux/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fdist-mipsel-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fdist-mipsel-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-mipsel-linux%2FDockerfile?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -17,7 +17,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   pkg-config\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "0074665f34f7ed54f0ddff57da78bfa71dfbf89e", "filename": "src/ci/docker/dist-powerpc-linux/Dockerfile", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fdist-powerpc-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fdist-powerpc-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-powerpc-linux%2FDockerfile?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -56,14 +56,14 @@ RUN mkdir /x-tools && chown rustbuild:rustbuild /x-tools\n USER rustbuild\n WORKDIR /tmp\n \n-COPY patches/ /tmp/patches/\n-COPY powerpc-linux-gnu.config build-powerpc-toolchain.sh /tmp/\n+COPY dist-powerpc-linux/patches/ /tmp/patches/\n+COPY dist-powerpc-linux/powerpc-linux-gnu.config dist-powerpc-linux/build-powerpc-toolchain.sh /tmp/\n RUN ./build-powerpc-toolchain.sh\n \n USER root\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n ENV PATH=$PATH:/x-tools/powerpc-unknown-linux-gnu/bin"}, {"sha": "bd38ee0c111582a2f88dbf4f53d2ddb87b7eac57", "filename": "src/ci/docker/dist-powerpc64-linux/Dockerfile", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fdist-powerpc64-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fdist-powerpc64-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-powerpc64-linux%2FDockerfile?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -56,14 +56,14 @@ RUN mkdir /x-tools && chown rustbuild:rustbuild /x-tools\n USER rustbuild\n WORKDIR /tmp\n \n-COPY patches/ /tmp/patches/\n-COPY shared.sh powerpc64-linux-gnu.config build-powerpc64-toolchain.sh /tmp/\n+COPY dist-powerpc64-linux/patches/ /tmp/patches/\n+COPY dist-powerpc64-linux/shared.sh dist-powerpc64-linux/powerpc64-linux-gnu.config dist-powerpc64-linux/build-powerpc64-toolchain.sh /tmp/\n RUN ./build-powerpc64-toolchain.sh\n \n USER root\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n ENV PATH=$PATH:/x-tools/powerpc64-unknown-linux-gnu/bin"}, {"sha": "cbded156b4cbde53f26d4ce6508eaeeb9e74395b", "filename": "src/ci/docker/dist-powerpc64le-linux/Dockerfile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fdist-powerpc64le-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fdist-powerpc64le-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-powerpc64le-linux%2FDockerfile?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -59,11 +59,11 @@ WORKDIR /tmp\n USER root\n \n RUN apt-get install -y --no-install-recommends rpm2cpio cpio\n-COPY shared.sh build-powerpc64le-toolchain.sh /tmp/\n+COPY dist-powerpc64le-linux/shared.sh dist-powerpc64le-linux/build-powerpc64le-toolchain.sh /tmp/\n RUN ./build-powerpc64le-toolchain.sh\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n ENV \\"}, {"sha": "5c00287107aa3be399eda238a718a0050ec65b82", "filename": "src/ci/docker/dist-s390x-linux/Dockerfile", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fdist-s390x-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fdist-s390x-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-s390x-linux%2FDockerfile?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -56,14 +56,14 @@ RUN mkdir /x-tools && chown rustbuild:rustbuild /x-tools\n USER rustbuild\n WORKDIR /tmp\n \n-COPY patches/ /tmp/patches/\n-COPY s390x-linux-gnu.config build-s390x-toolchain.sh /tmp/\n+COPY dist-s390x-linux/patches/ /tmp/patches/\n+COPY dist-s390x-linux/s390x-linux-gnu.config dist-s390x-linux/build-s390x-toolchain.sh /tmp/\n RUN ./build-s390x-toolchain.sh\n \n USER root\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n ENV PATH=$PATH:/x-tools/s390x-ibm-linux-gnu/bin"}, {"sha": "a6c4eee5e812c5407e07fdce89ee73c4864e60de", "filename": "src/ci/docker/dist-x86_64-freebsd/Dockerfile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fdist-x86_64-freebsd%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fdist-x86_64-freebsd%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-freebsd%2FDockerfile?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -16,7 +16,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   libssl-dev \\\n   pkg-config\n \n-COPY build-toolchain.sh /tmp/\n+COPY dist-x86_64-freebsd/build-toolchain.sh /tmp/\n RUN /tmp/build-toolchain.sh x86_64\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\\n@@ -25,7 +25,7 @@ RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-ini\n ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n ENV \\"}, {"sha": "e2e42836dcdaf136786b7ad9b0194493d817cc83", "filename": "src/ci/docker/dist-x86_64-linux/Dockerfile", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2FDockerfile?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -29,13 +29,13 @@ ENV PATH=/rustroot/bin:$PATH\n ENV LD_LIBRARY_PATH=/rustroot/lib64:/rustroot/lib\n ENV PKG_CONFIG_PATH=/rustroot/lib/pkgconfig\n WORKDIR /tmp\n-COPY shared.sh build-binutils.sh /tmp/\n+COPY dist-x86_64-linux/shared.sh dist-x86_64-linux/build-binutils.sh /tmp/\n \n # We need a build of openssl which supports SNI to download artifacts from\n # static.rust-lang.org. This'll be used to link into libcurl below (and used\n # later as well), so build a copy of OpenSSL with dynamic libraries into our\n # generic root.\n-COPY build-openssl.sh /tmp/\n+COPY dist-x86_64-linux/build-openssl.sh /tmp/\n RUN ./build-openssl.sh\n \n # The `curl` binary on CentOS doesn't support SNI which is needed for fetching\n@@ -44,7 +44,7 @@ RUN ./build-openssl.sh\n #\n # Note that we also disable a bunch of optional features of curl that we don't\n # really need.\n-COPY build-curl.sh /tmp/\n+COPY dist-x86_64-linux/build-curl.sh /tmp/\n RUN ./build-curl.sh\n \n # binutils < 2.22 has a bug where the 32-bit executables it generates\n@@ -54,26 +54,26 @@ RUN ./build-curl.sh\n RUN ./build-binutils.sh\n \n # Need a newer version of gcc than centos has to compile LLVM nowadays\n-COPY build-gcc.sh /tmp/\n+COPY dist-x86_64-linux/build-gcc.sh /tmp/\n RUN ./build-gcc.sh\n \n # CentOS 5.5 has Python 2.4 by default, but LLVM needs 2.7+\n-COPY build-python.sh /tmp/\n+COPY dist-x86_64-linux/build-python.sh /tmp/\n RUN ./build-python.sh\n \n # Apparently CentOS 5.5 desn't have `git` in yum, but we're gonna need it for\n # cloning, so download and build it here.\n-COPY build-git.sh /tmp/\n+COPY dist-x86_64-linux/build-git.sh /tmp/\n RUN ./build-git.sh\n \n # libssh2 (a dependency of Cargo) requires cmake 2.8.11 or higher but CentOS\n # only has 2.6.4, so build our own\n-COPY build-cmake.sh /tmp/\n+COPY dist-x86_64-linux/build-cmake.sh /tmp/\n RUN ./build-cmake.sh\n \n # for sanitizers, we need kernel headers files newer than the ones CentOS ships\n # with so we install newer ones here\n-COPY build-headers.sh /tmp/\n+COPY dist-x86_64-linux/build-headers.sh /tmp/\n RUN ./build-headers.sh\n \n RUN curl -Lo /rustroot/dumb-init \\\n@@ -82,7 +82,7 @@ RUN curl -Lo /rustroot/dumb-init \\\n ENTRYPOINT [\"/rustroot/dumb-init\", \"--\"]\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n ENV HOSTS=x86_64-unknown-linux-gnu"}, {"sha": "2eea5ab1469728e210795b257e85ce33f2fb56db", "filename": "src/ci/docker/dist-x86_64-musl/Dockerfile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fdist-x86_64-musl%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fdist-x86_64-musl%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-musl%2FDockerfile?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -17,7 +17,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   pkg-config\n \n WORKDIR /build/\n-COPY build-musl.sh /build/\n+COPY dist-x86_64-musl/build-musl.sh /build/\n RUN sh /build/build-musl.sh && rm -rf /build\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\\n@@ -26,7 +26,7 @@ RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-ini\n ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n ENV RUST_CONFIGURE_ARGS \\"}, {"sha": "f76e6271f4c8c22eddfbb4eec38760f60570fac3", "filename": "src/ci/docker/dist-x86_64-netbsd/Dockerfile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fdist-x86_64-netbsd%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fdist-x86_64-netbsd%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-netbsd%2FDockerfile?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -56,13 +56,13 @@ RUN mkdir /x-tools && chown rustbuild:rustbuild /x-tools\n USER rustbuild\n WORKDIR /tmp\n \n-COPY build-netbsd-toolchain.sh /tmp/\n+COPY dist-x86_64-netbsd/build-netbsd-toolchain.sh /tmp/\n RUN ./build-netbsd-toolchain.sh\n \n USER root\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n ENV PATH=$PATH:/x-tools/x86_64-unknown-netbsd/bin"}, {"sha": "0f0e5b69c32cf787d2a2fafb6dacbd370bce6c7a", "filename": "src/ci/docker/emscripten/Dockerfile", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Femscripten%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Femscripten%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Femscripten%2FDockerfile?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -15,7 +15,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   lib32stdc++6\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\\n@@ -24,13 +24,13 @@ RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-ini\n ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n \n WORKDIR /tmp\n-COPY build-emscripten.sh /tmp/\n+COPY emscripten/build-emscripten.sh /tmp/\n RUN ./build-emscripten.sh\n ENV PATH=$PATH:/tmp/emsdk_portable\n-ENV PATH=$PATH:/tmp/emsdk_portable/clang/tag-e1.37.1/build_tag-e1.37.1_32/bin\n+ENV PATH=$PATH:/tmp/emsdk_portable/clang/tag-e1.37.10/build_tag-e1.37.10_32/bin\n ENV PATH=$PATH:/tmp/emsdk_portable/node/4.1.1_32bit/bin\n-ENV PATH=$PATH:/tmp/emsdk_portable/emscripten/tag-1.37.1\n-ENV EMSCRIPTEN=/tmp/emsdk_portable/emscripten/tag-1.37.1\n+ENV PATH=$PATH:/tmp/emsdk_portable/emscripten/tag-1.37.10\n+ENV EMSCRIPTEN=/tmp/emsdk_portable/emscripten/tag-1.37.10\n \n ENV RUST_CONFIGURE_ARGS --target=asmjs-unknown-emscripten\n "}, {"sha": "8d6a28f418bf955b8d75b049d33f49794630e538", "filename": "src/ci/docker/emscripten/build-emscripten.sh", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Femscripten%2Fbuild-emscripten.sh", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Femscripten%2Fbuild-emscripten.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Femscripten%2Fbuild-emscripten.sh?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -49,5 +49,5 @@ chmod 755 emsdk_portable\n \n source emsdk_portable/emsdk_env.sh\n hide_output emsdk update\n-hide_output emsdk install --build=Release sdk-tag-1.37.1-32bit\n-hide_output emsdk activate --build=Release sdk-tag-1.37.1-32bit\n+hide_output emsdk install --build=Release sdk-tag-1.37.10-32bit\n+hide_output emsdk activate --build=Release sdk-tag-1.37.10-32bit"}, {"sha": "076be8f429116581f088eb49f1e09d4452a27c29", "filename": "src/ci/docker/i686-gnu-nopt/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fi686-gnu-nopt%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fi686-gnu-nopt%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fi686-gnu-nopt%2FDockerfile?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -14,7 +14,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   xz-utils\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "5fac05735746761982775c05d14be3758701d1fe", "filename": "src/ci/docker/i686-gnu/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fi686-gnu%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fi686-gnu%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fi686-gnu%2FDockerfile?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -14,7 +14,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   xz-utils\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "bb9a860574dd2f175245cd6e8e97fc911d8787c7", "filename": "src/ci/docker/run.sh", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Frun.sh?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -21,11 +21,28 @@ root_dir=\"`dirname $src_dir`\"\n \n source \"$ci_dir/shared.sh\"\n \n-retry docker \\\n-  build \\\n-  --rm \\\n-  -t rust-ci \\\n-  \"`dirname \"$script\"`/$image\"\n+if [ -f \"$docker_dir/$image/Dockerfile\" ]; then\n+    retry docker \\\n+      build \\\n+      --rm \\\n+      -t rust-ci \\\n+      -f \"$docker_dir/$image/Dockerfile\" \\\n+      \"$docker_dir\"\n+elif [ -f \"$docker_dir/disabled/$image/Dockerfile\" ]; then\n+    if [ -n \"$TRAVIS_OS_NAME\" ]; then\n+        echo Cannot run disabled images on travis!\n+        exit 1\n+    fi\n+    retry docker \\\n+      build \\\n+      --rm \\\n+      -t rust-ci \\\n+      -f \"$docker_dir/disabled/$image/Dockerfile\" \\\n+      \"$docker_dir\"\n+else\n+    echo Invalid image: $image\n+    exit 1\n+fi\n \n objdir=$root_dir/obj\n "}, {"sha": "c3d83c087e52fee5a5ccec4206a6e936656d99f1", "filename": "src/ci/docker/scripts/android-ndk.sh", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fscripts%2Fandroid-ndk.sh", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fscripts%2Fandroid-ndk.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Fandroid-ndk.sh?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -0,0 +1,40 @@\n+# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+set -ex\n+\n+URL=https://dl.google.com/android/repository\n+\n+download_ndk() {\n+    mkdir -p /android/ndk\n+    cd /android/ndk\n+    curl -O $URL/$1\n+    unzip -q $1\n+    rm $1\n+    mv android-ndk-* ndk\n+}\n+\n+make_standalone_toolchain() {\n+    # See https://developer.android.com/ndk/guides/standalone_toolchain.htm\n+    python2.7 /android/ndk/ndk/build/tools/make_standalone_toolchain.py \\\n+        --install-dir /android/ndk/$1-$2 \\\n+        --arch $1 \\\n+        --api $2\n+}\n+\n+remove_ndk() {\n+    rm -rf /android/ndk/ndk\n+}\n+\n+download_and_make_toolchain() {\n+    download_ndk $1 && \\\n+    make_standalone_toolchain $2 $3 && \\\n+    remove_ndk\n+}"}, {"sha": "7d8110efedec936d2ac49c8813c0b445193f21d7", "filename": "src/ci/docker/scripts/android-sdk.sh", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fscripts%2Fandroid-sdk.sh", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fscripts%2Fandroid-sdk.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Fandroid-sdk.sh?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -0,0 +1,53 @@\n+# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+set -ex\n+\n+URL=https://dl.google.com/android/repository\n+\n+download_sdk() {\n+    mkdir -p /android/sdk\n+    cd /android/sdk\n+    curl -O $URL/$1\n+    unzip -q $1\n+    rm -rf $1\n+}\n+\n+download_sysimage() {\n+    # See https://developer.android.com/studio/tools/help/android.html\n+    abi=$1\n+    api=$2\n+\n+    filter=\"platform-tools,android-$api\"\n+    filter=\"$filter,sys-img-$abi-android-$api\"\n+\n+    # Keep printing yes to accept the licenses\n+    while true; do echo yes; sleep 10; done | \\\n+        /android/sdk/tools/android update sdk -a --no-ui \\\n+            --filter \"$filter\"\n+}\n+\n+create_avd() {\n+    # See https://developer.android.com/studio/tools/help/android.html\n+    abi=$1\n+    api=$2\n+\n+    echo no | \\\n+        /android/sdk/tools/android create avd \\\n+            --name $abi-$api \\\n+            --target android-$api \\\n+            --abi $abi\n+}\n+\n+download_and_create_avd() {\n+    download_sdk $1\n+    download_sysimage $2 $3\n+    create_avd $2 $3\n+}"}, {"sha": "cd3369d5eaddc7da93f844b4fa3fd7ceceee021f", "filename": "src/ci/docker/scripts/android-start-emulator.sh", "status": "renamed", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fscripts%2Fandroid-start-emulator.sh", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fscripts%2Fandroid-start-emulator.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Fandroid-start-emulator.sh?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -14,5 +14,12 @@ set -ex\n # Setting SHELL to a file instead on a symlink helps android\n # emulator identify the system\n export SHELL=/bin/bash\n-nohup nohup emulator @arm-18 -no-window -partition-size 2047 0<&- &>/dev/null &\n+\n+# Using the default qemu2 engine makes time::tests::since_epoch fails because\n+# the emulator date is set to unix epoch (in armeabi-v7a-18 image). Using\n+# classic engine the emulator starts with the current date and the tests run\n+# fine. If another image is used, this need to be evaluated again.\n+nohup nohup emulator @armeabi-v7a-18 \\\n+    -engine classic -no-window -partition-size 2047 0<&- &>/dev/null &\n+\n exec \"$@\"", "previous_filename": "src/ci/docker/arm-android/start-emulator.sh"}, {"sha": "839c390799278c98ef227d6c63b2f440e2cb421e", "filename": "src/ci/docker/scripts/dumb-init.sh", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fscripts%2Fdumb-init.sh", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fscripts%2Fdumb-init.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Fdumb-init.sh?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -0,0 +1,15 @@\n+# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+set -ex\n+\n+curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb\n+dpkg -i dumb-init_*.deb\n+rm dumb-init_*.deb"}, {"sha": "7a2befaf6715ff692a9c7d49409a6294c030d49a", "filename": "src/ci/docker/scripts/sccache.sh", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fscripts%2Fsccache.sh", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fscripts%2Fsccache.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Fsccache.sh?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -0,0 +1,16 @@\n+# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+set -ex\n+\n+curl -o /usr/local/bin/sccache \\\n+  https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl\n+\n+chmod +x /usr/local/bin/sccache"}, {"sha": "06c7c2824fd9d45b76b40d21e1f788d5a32affce", "filename": "src/ci/docker/x86_64-gnu-aux/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fx86_64-gnu-aux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fx86_64-gnu-aux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-aux%2FDockerfile?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -15,7 +15,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   pkg-config\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "6ea54ac4db3e7f2a8b384b2a869cbe19dff85695", "filename": "src/ci/docker/x86_64-gnu-debug/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fx86_64-gnu-debug%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fx86_64-gnu-debug%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-debug%2FDockerfile?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -14,7 +14,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   xz-utils\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "e24c660a8c36d804fe267d7a8f2ed0662e7cf660", "filename": "src/ci/docker/x86_64-gnu-distcheck/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fx86_64-gnu-distcheck%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fx86_64-gnu-distcheck%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-distcheck%2FDockerfile?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -16,7 +16,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   pkg-config\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "78035c7fe3d7f9410321bd7f89783b24f48cbc30", "filename": "src/ci/docker/x86_64-gnu-full-bootstrap/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fx86_64-gnu-full-bootstrap%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fx86_64-gnu-full-bootstrap%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-full-bootstrap%2FDockerfile?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -14,7 +14,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   xz-utils\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "0aaed64e384ed486e9dcaafa5e4737c3bf29897c", "filename": "src/ci/docker/x86_64-gnu-incremental/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fx86_64-gnu-incremental%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fx86_64-gnu-incremental%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-incremental%2FDockerfile?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -14,7 +14,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   xz-utils\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "7c136fa39bc8bb2accc5b5c0d1bd6dffcdf6e978", "filename": "src/ci/docker/x86_64-gnu-llvm-3.7/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fx86_64-gnu-llvm-3.7%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fx86_64-gnu-llvm-3.7%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-llvm-3.7%2FDockerfile?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -17,7 +17,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   xz-utils\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "4499736967cf49194a8c398d7b9a7b3968be804c", "filename": "src/ci/docker/x86_64-gnu-nopt/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fx86_64-gnu-nopt%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fx86_64-gnu-nopt%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-nopt%2FDockerfile?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -14,7 +14,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   xz-utils\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "de85e1ff36af8ca3f2e5515afc1427c6fd9a216f", "filename": "src/ci/docker/x86_64-gnu/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fx86_64-gnu%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fci%2Fdocker%2Fx86_64-gnu%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu%2FDockerfile?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -14,7 +14,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   xz-utils\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "c8a8767c56ad3d3f4eb45c87b95026936fb9aa35", "filename": "src/compiler-rt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiler-rt?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -1 +1 @@\n-Subproject commit d30da544a8afc5d78391dee270bdf40e74a215d3\n+Subproject commit c8a8767c56ad3d3f4eb45c87b95026936fb9aa35"}, {"sha": "97422981c53a00f7c3d6584d363443117f179fff", "filename": "src/doc/book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -1 +1 @@\n-Subproject commit ad7de198561b3a12217ea2da76d796d9c7fc0ed3\n+Subproject commit 97422981c53a00f7c3d6584d363443117f179fff"}, {"sha": "fd5b120e81faeceb8a0fd3e2898adeb5d24fead2", "filename": "src/doc/index.md", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fdoc%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fdoc%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Findex.md?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -32,16 +32,21 @@ nicknamed 'The Rust Bookshelf.'\n * [The Rustonomicon][nomicon] is your guidebook to the dark arts of unsafe Rust.\n * [The Reference][ref] is not a formal spec, but is more detailed and comprehensive than the book.\n \n+Initially, documentation lands in the Unstable Book, and then, as part of the\n+stabilization process, is moved into the Book, Nomicon, or Reference.\n+\n Another few words about the reference: it is guaranteed to be accurate, but not\n-complete. We now have a policy that all new features must be included in the\n-reference before stabilization; however, we are still back-filling things that\n-landed before then. That work is being tracked [here][38643].\n+complete. We have a policy that features must have documentation to be stabilized,\n+but we did not always have this policy, and so there are some stable things that\n+are not yet in the reference. We're working on back-filling things that landed\n+before this policy was put into place. That work is being tracked\n+[here][refchecklist].\n \n [Rust Learning]: https://github.com/ctjhoa/rust-learning\n [Docs.rs]: https://docs.rs/\n [api]: std/index.html\n [ref]: reference/index.html\n-[38643]: https://github.com/rust-lang/rust/issues/38643\n+[refchecklist]: https://github.com/rust-lang-nursery/reference/issues/9\n [err]: error-index.html\n [book]: book/index.html\n [nomicon]: nomicon/index.html"}, {"sha": "6fa139b1630a9bb95dcd60cfc90aff9c19e54580", "filename": "src/doc/nomicon", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -1 +1 @@\n-Subproject commit 616b98444ff4eb5260deee95ee3e090dfd98b947\n+Subproject commit 6fa139b1630a9bb95dcd60cfc90aff9c19e54580"}, {"sha": "f7a108dfa9e90b07821700c55d01f08a9adf005c", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -1 +1 @@\n-Subproject commit 6b0de90d87dda15e323ef24cdf7ed873ac5cf4d3\n+Subproject commit f7a108dfa9e90b07821700c55d01f08a9adf005c"}, {"sha": "323d49e46912001c9610ddf3357e1acb80a057e3", "filename": "src/doc/rustc-ux-guidelines.md", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fdoc%2Frustc-ux-guidelines.md", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fdoc%2Frustc-ux-guidelines.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc-ux-guidelines.md?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -1,14 +1,14 @@\n % Rustc UX guidelines\n \n Don't forget the user. Whether human or another program, such as an IDE, a\n-good user experience with the compiler goes a long way into making developer\n-lives better. We don't want users to be baffled by compiler output or\n+good user experience with the compiler goes a long way toward making developers'\n+lives better. We do not want users to be baffled by compiler output or\n learn arcane patterns to compile their program.\n \n ## Error, Warning, Help, Note Messages\n \n-When the compiler detects a problem, it can emit either an error, warning,\n-note, or help message.\n+When the compiler detects a problem, it can emit one of the following: an error, a warning,\n+a note, or a help message.\n \n An `error` is emitted when the compiler detects a problem that makes it unable\n  to compile the program, either because the program is invalid or the\n@@ -17,11 +17,11 @@ An `error` is emitted when the compiler detects a problem that makes it unable\n A `warning` is emitted when the compiler detects something odd about a\n program. For instance, dead code and unused `Result` values.\n \n-A `help` is emitted following either an `error` or `warning` giving extra\n+A `help` message is emitted following an `error` or `warning` to give additional\n information to the user about how to solve their problem.\n \n-A `note` is for identifying additional circumstances and parts of the code\n-that lead to a warning or error. For example, the borrow checker will note any\n+A `note` is emitted to identify additional circumstances and parts of the code\n+that caused the warning or error. For example, the borrow checker will note any\n previous conflicting borrows.\n \n * Write in plain simple English. If your message, when shown on a \u2013 possibly\n@@ -56,18 +56,22 @@ Error explanations are long form descriptions of error messages provided with\n the compiler. They are accessible via the `--explain` flag. Each explanation\n comes with an example of how to trigger it and advice on how to fix it.\n \n+Please read [RFC 1567](https://github.com/rust-lang/rfcs/blob/master/text/1567-long-error-codes-explanation-normalization.md)\n+for details on how to format and write long error codes.\n+\n * All of them are accessible [online](http://doc.rust-lang.org/error-index.html),\n   which are auto-generated from rustc source code in different places:\n   [librustc](https://github.com/rust-lang/rust/blob/master/src/librustc/diagnostics.rs),\n+  [libsyntax](https://github.com/rust-lang/rust/blob/master/src/libsyntax/diagnostics.rs),\n   [librustc_borrowck](https://github.com/rust-lang/rust/blob/master/src/librustc_borrowck/diagnostics.rs),\n   [librustc_const_eval](https://github.com/rust-lang/rust/blob/master/src/librustc_const_eval/diagnostics.rs),\n-  [librustc_lint](https://github.com/rust-lang/rust/blob/master/src/librustc_lint/types.rs),\n   [librustc_metadata](https://github.com/rust-lang/rust/blob/master/src/librustc_metadata/diagnostics.rs),\n   [librustc_mir](https://github.com/rust-lang/rust/blob/master/src/librustc_mir/diagnostics.rs),\n   [librustc_passes](https://github.com/rust-lang/rust/blob/master/src/librustc_passes/diagnostics.rs),\n   [librustc_privacy](https://github.com/rust-lang/rust/blob/master/src/librustc_privacy/diagnostics.rs),\n   [librustc_resolve](https://github.com/rust-lang/rust/blob/master/src/librustc_resolve/diagnostics.rs),\n   [librustc_trans](https://github.com/rust-lang/rust/blob/master/src/librustc_trans/diagnostics.rs),\n+  [librustc_plugin](https://github.com/rust-lang/rust/blob/master/src/librustc_plugin/diagnostics.rs),\n   [librustc_typeck](https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/diagnostics.rs).\n * Explanations have full markdown support. Use it, especially to highlight\n code with backticks.\n@@ -79,7 +83,7 @@ code with backticks.\n * Flags should be orthogonal to each other. For example, if we'd have a\n json-emitting variant of multiple actions `foo` and `bar`, an additional\n --json flag is better than adding `--foo-json` and `--bar-json`.\n-* Always give options a long descriptive name, if only for better\n+* Always give options a long descriptive name, if only for more\n understandable compiler scripts.\n * The `--verbose` flag is for adding verbose information to `rustc` output\n when not compiling a program. For example, using it with the `--version` flag"}, {"sha": "028f5c9ee5aafa0a9d7bbb44e51a7b14b4fc2687", "filename": "src/doc/unstable-book/src/SUMMARY.md", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -2,6 +2,7 @@\n \n - [Compiler flags](compiler-flags.md)\n     - [linker_flavor](compiler-flags/linker-flavor.md)\n+    - [remap_path_prefix](compiler-flags/remap-path-prefix.md)\n - [Language features](language-features.md)\n     - [abi_msp430_interrupt](language-features/abi-msp430-interrupt.md)\n     - [abi_ptx](language-features/abi-ptx.md)\n@@ -48,7 +49,6 @@\n     - [link_llvm_intrinsics](language-features/link-llvm-intrinsics.md)\n     - [linkage](language-features/linkage.md)\n     - [log_syntax](language-features/log-syntax.md)\n-    - [loop_break_value](language-features/loop-break-value.md)\n     - [macro_reexport](language-features/macro-reexport.md)\n     - [macro_vis_matcher](language-features/macro-vis-matcher.md)\n     - [main](language-features/main.md)\n@@ -102,7 +102,6 @@\n     - [alloc](library-features/alloc.md)\n     - [as_c_str](library-features/as-c-str.md)\n     - [ascii_ctype](library-features/ascii-ctype.md)\n-    - [binary_heap_peek_mut_pop](library-features/binary-heap-peek-mut-pop.md)\n     - [box_heap](library-features/box-heap.md)\n     - [c_void_variant](library-features/c-void-variant.md)\n     - [char_escape_debug](library-features/char-escape-debug.md)\n@@ -143,6 +142,7 @@\n     - [future_atomic_orderings](library-features/future-atomic-orderings.md)\n     - [get_type_id](library-features/get-type-id.md)\n     - [heap_api](library-features/heap-api.md)\n+    - [hint_core_should_pause](library-features/hint-core-should-pause.md)\n     - [i128](library-features/i128.md)\n     - [inclusive_range](library-features/inclusive-range.md)\n     - [integer_atomics](library-features/integer-atomics.md)\n@@ -159,6 +159,7 @@\n     - [linked_list_extras](library-features/linked-list-extras.md)\n     - [lookup_host](library-features/lookup-host.md)\n     - [manually_drop](library-features/manually-drop.md)\n+    - [more_io_inner_methods](library-features/more-io-inner-methods.md)\n     - [mpsc_select](library-features/mpsc-select.md)\n     - [n16](library-features/n16.md)\n     - [never_type_impls](library-features/never-type-impls.md)\n@@ -171,17 +172,14 @@\n     - [panic_abort](library-features/panic-abort.md)\n     - [panic_unwind](library-features/panic-unwind.md)\n     - [pattern](library-features/pattern.md)\n-    - [peek](library-features/peek.md)\n     - [placement_in](library-features/placement-in.md)\n     - [placement_new_protocol](library-features/placement-new-protocol.md)\n-    - [print](library-features/print.md)\n+    - [print_internals](library-features/print-internals.md)\n     - [proc_macro_internals](library-features/proc-macro-internals.md)\n-    - [process_try_wait](library-features/process-try-wait.md)\n     - [question_mark_carrier](library-features/question-mark-carrier.md)\n     - [rand](library-features/rand.md)\n     - [range_contains](library-features/range-contains.md)\n     - [raw](library-features/raw.md)\n-    - [retain_hash_collection](library-features/retain-hash-collection.md)\n     - [reverse_cmp_key](library-features/reverse-cmp-key.md)\n     - [rt](library-features/rt.md)\n     - [rustc_private](library-features/rustc-private.md)\n@@ -194,11 +192,13 @@\n     - [slice_rsplit](library-features/slice-rsplit.md)\n     - [sort_internals](library-features/sort-internals.md)\n     - [sort_unstable](library-features/sort-unstable.md)\n+    - [splice](library-features/splice.md)\n     - [step_by](library-features/step-by.md)\n     - [step_trait](library-features/step-trait.md)\n     - [str_checked_slicing](library-features/str-checked-slicing.md)\n     - [str_escape](library-features/str-escape.md)\n     - [str_internals](library-features/str-internals.md)\n+    - [str_box_extras](library-features/str-box-extras.md)\n     - [str_mut_extras](library-features/str-mut-extras.md)\n     - [test](library-features/test.md)\n     - [thread_id](library-features/thread-id.md)\n@@ -211,6 +211,7 @@\n     - [unique](library-features/unique.md)\n     - [unsize](library-features/unsize.md)\n     - [utf8_error_error_len](library-features/utf8-error-error-len.md)\n+    - [vec_resize_default](library-features/vec-resize-default.md)\n     - [vec_remove_item](library-features/vec-remove-item.md)\n     - [windows_c](library-features/windows-c.md)\n     - [windows_handle](library-features/windows-handle.md)"}, {"sha": "8ca04d253259258af86b8e2546cc28f943d8734d", "filename": "src/doc/unstable-book/src/compiler-flags/remap-path-prefix.md", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fremap-path-prefix.md", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fremap-path-prefix.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fremap-path-prefix.md?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -0,0 +1,37 @@\n+# `remap-path-prefix`\n+\n+The tracking issue for this feature is: [#41555](https://github.com/rust-lang/rust/issues/41555)\n+\n+------------------------\n+\n+The `-Z remap-path-prefix-from`, `-Z remap-path-prefix-to` commandline option\n+pair allows to replace prefixes of any file paths the compiler emits in various\n+places. This is useful for bringing debuginfo paths into a well-known form and\n+for achieving reproducible builds independent of the directory the compiler was\n+executed in. All paths emitted by the compiler are affected, including those in\n+error messages.\n+\n+In order to map all paths starting with `/home/foo/my-project/src` to\n+`/sources/my-project`, one would invoke the compiler as follows:\n+\n+```text\n+rustc -Zremap-path-prefix-from=\"/home/foo/my-project/src\" -Zremap-path-prefix-to=\"/sources/my-project\"\n+```\n+\n+Debuginfo for code from the file `/home/foo/my-project/src/foo/mod.rs`,\n+for example, would then point debuggers to `/sources/my-project/foo/mod.rs`\n+instead of the original file.\n+\n+The options can be specified multiple times when multiple prefixes should be\n+mapped:\n+\n+```text\n+rustc -Zremap-path-prefix-from=\"/home/foo/my-project/src\" \\\n+      -Zremap-path-prefix-to=\"/sources/my-project\" \\\n+      -Zremap-path-prefix-from=\"/home/foo/my-project/build-dir\" \\\n+      -Zremap-path-prefix-to=\"/stable-build-dir\"\n+```\n+\n+When the options are given multiple times, the nth `-from` will be matched up\n+with the nth `-to` and they can appear anywhere on the commandline. Mappings\n+specified later on the line will take precedence over earlier ones."}, {"sha": "e8256469b145078be9889c75600c86e64081012c", "filename": "src/doc/unstable-book/src/language-features/advanced-slice-patterns.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fadvanced-slice-patterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fadvanced-slice-patterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fadvanced-slice-patterns.md?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -4,7 +4,7 @@ The tracking issue for this feature is: [#23121]\n \n [#23121]: https://github.com/rust-lang/rust/issues/23121\n \n-See also [`slice_patterns`](slice-patterns.html).\n+See also [`slice_patterns`](language-features/slice-patterns.html).\n \n ------------------------\n "}, {"sha": "8deb8f462562063f67cac3e1bb1ac85621444ba7", "filename": "src/doc/unstable-book/src/language-features/asm.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fasm.md", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fasm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fasm.md?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -190,4 +190,4 @@ constraints, etc.\n [llvm-docs]: http://llvm.org/docs/LangRef.html#inline-assembler-expressions\n \n If you need more power and don't mind losing some of the niceties of\n-`asm!`, check out [global_asm](global_asm.html).\n+`asm!`, check out [global_asm](language-features/global_asm.html)."}, {"sha": "60741a74400d2e50007610ab1ed27b291d56ee0a", "filename": "src/doc/unstable-book/src/language-features/attr-literals.md", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fattr-literals.md", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fattr-literals.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fattr-literals.md?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -6,5 +6,25 @@ The tracking issue for this feature is: [#34981]\n \n ------------------------\n \n+At present, literals are only accepted as the value of a key-value pair in\n+attributes. What's more, only _string_ literals are accepted. This means that\n+literals can only appear in forms of `#[attr(name = \"value\")]` or\n+`#[attr = \"value\"]`.\n \n+The `attr_literals` unstable feature allows other types of literals to be used\n+in attributes. Here are some examples of attributes that can now be used with\n+this feature enabled:\n+\n++```rust,ignore\n++#[attr]\n++#[attr(true)]\n++#[attr(ident)]\n++#[attr(ident, 100, true, \"true\", ident = 100, ident = \"hello\", ident(100))]\n++#[attr(100)]\n++#[attr(enabled = true)]\n++#[enabled(true)]\n++#[attr(\"hello\")]\n++#[repr(C, align = 4)]\n++#[repr(C, align(4))]\n++```\n "}, {"sha": "0896627acae1b3203a39d1463bcae4d6e470fa19", "filename": "src/doc/unstable-book/src/language-features/box-patterns.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fbox-patterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fbox-patterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fbox-patterns.md?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -4,7 +4,7 @@ The tracking issue for this feature is: [#29641]\n \n [#29641]: https://github.com/rust-lang/rust/issues/29641\n \n-See also [`box_syntax`](box-syntax.html)\n+See also [`box_syntax`](language-features/box-syntax.html)\n \n ------------------------\n "}, {"sha": "50e59231a4df22d19608d91d470f54fceb645a83", "filename": "src/doc/unstable-book/src/language-features/box-syntax.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fbox-syntax.md", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fbox-syntax.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fbox-syntax.md?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -4,7 +4,7 @@ The tracking issue for this feature is: [#27779]\n \n [#27779]: https://github.com/rust-lang/rust/issues/27779\n \n-See also [`box_patterns`](box-patterns.html)\n+See also [`box_patterns`](language-features/box-patterns.html)\n \n ------------------------\n "}, {"sha": "fbd213dca569949fc8b9e38c20f3a2de10f2778e", "filename": "src/doc/unstable-book/src/language-features/catch-expr.md", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcatch-expr.md", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcatch-expr.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcatch-expr.md?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -5,3 +5,26 @@ The tracking issue for this feature is: [#31436]\n [#31436]: https://github.com/rust-lang/rust/issues/31436\n \n ------------------------\n+\n+The `catch_expr` feature adds support for a `catch` expression. The `catch`\n+expression creates a new scope one can use the `?` operator in.\n+\n+```rust\n+#![feature(catch_expr)]\n+\n+use std::num::ParseIntError;\n+\n+let result: Result<i32, ParseIntError> = do catch {\n+    Ok(\"1\".parse::<i32>()?\n+        + \"2\".parse::<i32>()?\n+        + \"3\".parse::<i32>()?)\n+};\n+assert_eq!(result, Ok(6));\n+\n+let result: Result<i32, ParseIntError> = do catch {\n+    Ok(\"1\".parse::<i32>()?\n+        + \"foo\".parse::<i32>()?\n+        + \"3\".parse::<i32>()?)\n+};\n+assert!(result.is_err());\n+```"}, {"sha": "f1ef74a63b513acedd4ff96396812640b451ac9b", "filename": "src/doc/unstable-book/src/language-features/global_asm.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fglobal_asm.md", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fglobal_asm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fglobal_asm.md?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -74,5 +74,5 @@ usages and placed the larger, single usage in the crate root.\n \n If you don't need quite as much power and flexibility as\n `global_asm!` provides, and you don't mind restricting your inline\n-assembly to `fn` bodies only, you might try the [asm](asm.html)\n-feature instead.\n+assembly to `fn` bodies only, you might try the\n+[asm](language-features/asm.html) feature instead."}, {"sha": "54d6e62ce4c526b088fbfb2d22940bddd35d4b57", "filename": "src/doc/unstable-book/src/language-features/loop-break-value.md", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/158b085f06a41004ebf36d87afa3548f8b60861a/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Floop-break-value.md", "raw_url": "https://github.com/rust-lang/rust/raw/158b085f06a41004ebf36d87afa3548f8b60861a/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Floop-break-value.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Floop-break-value.md?ref=158b085f06a41004ebf36d87afa3548f8b60861a", "patch": "@@ -1,10 +0,0 @@\n-# `loop_break_value`\n-\n-The tracking issue for this feature is: [#37339]\n-\n-[#37339]: https://github.com/rust-lang/rust/issues/37339\n-\n-------------------------\n-\n-\n-"}, {"sha": "9eea3fccbbc17e39ad591fb72f94893f0027d5f5", "filename": "src/doc/unstable-book/src/language-features/on-unimplemented.md", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fon-unimplemented.md", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fon-unimplemented.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fon-unimplemented.md?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -6,5 +6,42 @@ The tracking issue for this feature is: [#29628]\n \n ------------------------\n \n+The `on_unimplemented` feature provides the `#[rustc_on_unimplemented]`\n+attribute, which allows trait definitions to add specialized notes to error\n+messages when an implementation was expected but not found.\n \n+For example:\n+\n+```rust,compile_fail\n+#![feature(on_unimplemented)]\n+\n+#[rustc_on_unimplemented=\"a collection of type `{Self}` cannot be built from an \\\n+                          iterator over elements of type `{A}`\"]\n+trait MyIterator<A> {\n+    fn next(&mut self) -> A;\n+}\n+\n+fn iterate_chars<I: MyIterator<char>>(i: I) {\n+    // ...\n+}\n+\n+fn main() {\n+    iterate_chars(&[1, 2, 3][..]);\n+}\n+```\n+\n+When the user compiles this, they will see the following;\n+\n+```txt\n+error[E0277]: the trait bound `&[{integer}]: MyIterator<char>` is not satisfied\n+  --> <anon>:14:5\n+   |\n+14 |     iterate_chars(&[1, 2, 3][..]);\n+   |     ^^^^^^^^^^^^^ the trait `MyIterator<char>` is not implemented for `&[{integer}]`\n+   |\n+   = note: a collection of type `&[{integer}]` cannot be built from an iterator over elements of type `char`\n+   = note: required by `iterate_chars`\n+\n+error: aborting due to previous error\n+```\n "}, {"sha": "b16e2ac2d221c97941e4f4ba0c01b31781335bed", "filename": "src/doc/unstable-book/src/language-features/plugin-registrar.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin-registrar.md", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin-registrar.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin-registrar.md?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -8,6 +8,6 @@ This feature is part of \"compiler plugins.\" It will often be used with the\n [`plugin`] and `rustc_private` features as well. For more details, see\n their docs.\n \n-[`plugin`]: plugin.html\n+[`plugin`]: language-features/plugin.html\n \n ------------------------"}, {"sha": "4b8603e3c445045147c42de687955d1582c44e7d", "filename": "src/doc/unstable-book/src/language-features/plugin.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -8,7 +8,7 @@ The tracking issue for this feature is: [#29597]\n This feature is part of \"compiler plugins.\" It will often be used with the\n [`plugin_registrar`] and `rustc_private` features.\n \n-[`plugin_registrar`]: plugin-registrar.html\n+[`plugin_registrar`]: language-features/plugin-registrar.html\n \n ------------------------\n "}, {"sha": "1bd8c41629eea01712d001f940d2e797ee47138f", "filename": "src/doc/unstable-book/src/language-features/proc-macro.md", "status": "modified", "additions": 231, "deletions": 0, "changes": 231, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fproc-macro.md", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fproc-macro.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fproc-macro.md?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -6,5 +6,236 @@ The tracking issue for this feature is: [#38356]\n \n ------------------------\n \n+This feature flag guards the new procedural macro features as laid out by [RFC 1566], which alongside the now-stable \n+[custom derives], provide stabilizable alternatives to the compiler plugin API (which requires the use of \n+perma-unstable internal APIs) for programmatically modifying Rust code at compile-time.\n \n+The two new procedural macro kinds are:\n+ \n+* Function-like procedural macros which are invoked like regular declarative macros, and:\n \n+* Attribute-like procedural macros which can be applied to any item which built-in attributes can\n+be applied to, and which can take arguments in their invocation as well.\n+\n+Additionally, this feature flag implicitly enables the [`use_extern_macros`](language-features/use-extern-macros.html) feature,\n+which allows macros to be imported like any other item with `use` statements, as compared to \n+applying `#[macro_use]` to an `extern crate` declaration. It is important to note that procedural macros may\n+**only** be imported in this manner, and will throw an error otherwise.\n+\n+You **must** declare the `proc_macro` feature in both the crate declaring these new procedural macro kinds as well as \n+in any crates that use them.\n+\n+### Common Concepts\n+\n+As with custom derives, procedural macros may only be declared in crates of the `proc-macro` type, and must be public\n+functions. No other public items may be declared in `proc-macro` crates, but private items are fine.\n+\n+To declare your crate as a `proc-macro` crate, simply add:\n+\n+```toml\n+[lib]\n+proc-macro = true\n+```\n+\n+to your `Cargo.toml`. \n+\n+Unlike custom derives, however, the name of the function implementing the procedural macro is used directly as the \n+procedural macro's name, so choose carefully.\n+\n+Additionally, both new kinds of procedural macros return a `TokenStream` which *wholly* replaces the original \n+invocation and its input.\n+\n+#### Importing\n+\n+As referenced above, the new procedural macros are not meant to be imported via `#[macro_use]` and will throw an \n+error if they are. Instead, they are meant to be imported like any other item in Rust, with `use` statements:\n+\n+```rust,ignore\n+#![feature(proc_macro)]\n+\n+// Where `my_proc_macros` is some crate of type `proc_macro`\n+extern crate my_proc_macros;\n+\n+// And declares a `#[proc_macro] pub fn my_bang_macro()` at its root.\n+use my_proc_macros::my_bang_macro;\n+\n+fn main() {\n+    println!(\"{}\", my_bang_macro!());\n+}\n+```\n+\n+#### Error Reporting\n+\n+Any panics in a procedural macro implementation will be caught by the compiler and turned into an error message pointing \n+to the problematic invocation. Thus, it is important to make your panic messages as informative as possible: use \n+`Option::expect` instead of `Option::unwrap` and `Result::expect` instead of `Result::unwrap`, and inform the user of \n+the error condition as unambiguously as you can.\n+ \n+#### `TokenStream`\n+\n+The `proc_macro::TokenStream` type is hardcoded into the signatures of procedural macro functions for both input and \n+output. It is a wrapper around the compiler's internal representation for a given chunk of Rust code.\n+\n+### Function-like Procedural Macros\n+\n+These are procedural macros that are invoked like regular declarative macros. They are declared as public functions in \n+crates of the `proc_macro` type and using the `#[proc_macro]` attribute. The name of the declared function becomes the \n+name of the macro as it is to be imported and used. The function must be of the kind `fn(TokenStream) -> TokenStream` \n+where the sole argument is the input to the macro and the return type is the macro's output.\n+\n+This kind of macro can expand to anything that is valid for the context it is invoked in, including expressions and\n+statements, as well as items.\n+\n+**Note**: invocations of this kind of macro require a wrapping `[]`, `{}` or `()` like regular macros, but these do not \n+appear in the input, only the tokens between them. The tokens between the braces do not need to be valid Rust syntax.\n+\n+<span class=\"filename\">my_macro_crate/src/lib.rs</span>\n+\n+```rust,ignore\n+#![feature(proc_macro)]\n+\n+// This is always necessary to get the `TokenStream` typedef.\n+extern crate proc_macro;\n+\n+use proc_macro::TokenStream;\n+\n+#[proc_macro]\n+pub fn say_hello(_input: TokenStream) -> TokenStream {\n+    // This macro will accept any input because it ignores it. \n+    // To enforce correctness in macros which don't take input,\n+    // you may want to add `assert!(_input.to_string().is_empty());`.\n+    \"println!(\\\"Hello, world!\\\")\".parse().unwrap()\n+}\n+```\n+\n+<span class=\"filename\">my_macro_user/Cargo.toml</span>\n+\n+```toml\n+[dependencies]\n+my_macro_crate = { path = \"<relative path to my_macro_crate>\" }\n+```\n+\n+<span class=\"filename\">my_macro_user/src/lib.rs</span>\n+\n+```rust,ignore\n+#![feature(proc_macro)]\n+\n+extern crate my_macro_crate;\n+\n+use my_macro_crate::say_hello;\n+\n+fn main() {\n+    say_hello!();\n+}\n+```\n+\n+As expected, this prints `Hello, world!`.\n+\n+### Attribute-like Procedural Macros\n+\n+These are arguably the most powerful flavor of procedural macro as they can be applied anywhere attributes are allowed. \n+\n+They are declared as public functions in crates of the `proc-macro` type, using the `#[proc_macro_attribute]` attribute. \n+The name of the function becomes the name of the attribute as it is to be imported and used. The function must be of the \n+kind `fn(TokenStream, TokenStream) -> TokenStream` where:\n+\n+The first argument represents any metadata for the attribute (see [the reference chapter on attributes][refr-attr]). \n+Only the metadata itself will appear in this argument, for example:\n+ \n+ * `#[my_macro]` will get an empty string.\n+ * `#[my_macro = \"string\"]` will get `= \"string\"`.\n+ * `#[my_macro(ident)]` will get `(ident)`.\n+ * etc.\n+ \n+The second argument is the item that the attribute is applied to. It can be a function, a type definition, \n+an impl block, an `extern` block, or a module\u2014attribute invocations can take the inner form (`#![my_attr]`) \n+or outer form (`#[my_attr]`).\n+\n+The return type is the output of the macro which *wholly* replaces the item it was applied to. Thus, if your intention\n+is to merely modify an item, it *must* be copied to the output. The output must be an item; expressions, statements\n+and bare blocks are not allowed.\n+\n+There is no restriction on how many items an attribute-like procedural macro can emit as long as they are valid in \n+the given context.\n+\n+<span class=\"filename\">my_macro_crate/src/lib.rs</span>\n+\n+```rust,ignore\n+#![feature(proc_macro)]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::TokenStream;\n+\n+/// Adds a `/// ### Panics` docstring to the end of the input's documentation\n+///\n+/// Does not assert that its receiver is a function or method.\n+#[proc_macro_attribute]\n+pub fn panics_note(args: TokenStream, input: TokenStream) -> TokenStream {\n+    let args = args.to_string();\n+    let mut input = input.to_string();\n+\n+    assert!(args.starts_with(\"= \\\"\"), \"`#[panics_note]` requires an argument of the form \\\n+                                       `#[panics_note = \\\"panic note here\\\"]`\");\n+\n+    // Get just the bare note string\n+    let panics_note = args.trim_matches(&['=', ' ', '\"'][..]);\n+\n+    // The input will include all docstrings regardless of where the attribute is placed,\n+    // so we need to find the last index before the start of the item\n+    let insert_idx = idx_after_last_docstring(&input);\n+\n+    // And insert our `### Panics` note there so it always appears at the end of an item's docs\n+    input.insert_str(insert_idx, &format!(\"/// # Panics \\n/// {}\\n\", panics_note));\n+\n+    input.parse().unwrap()\n+}\n+\n+// `proc-macro` crates can contain any kind of private item still\n+fn idx_after_last_docstring(input: &str) -> usize {\n+    // Skip docstring lines to find the start of the item proper\n+    input.lines().skip_while(|line| line.trim_left().starts_with(\"///\")).next()\n+        // Find the index of the first non-docstring line in the input\n+        // Note: assumes this exact line is unique in the input\n+        .and_then(|line_after| input.find(line_after))\n+        // No docstrings in the input\n+        .unwrap_or(0)\n+}\n+```\n+\n+<span class=\"filename\">my_macro_user/Cargo.toml</span>\n+\n+```toml\n+[dependencies]\n+my_macro_crate = { path = \"<relative path to my_macro_crate>\" }\n+```\n+\n+<span class=\"filename\">my_macro_user/src/lib.rs</span>\n+\n+```rust,ignore\n+#![feature(proc_macro)]\n+\n+extern crate my_macro_crate;\n+\n+use my_macro_crate::panics_note;\n+\n+/// Do the `foo` thing.\n+#[panics_note = \"Always.\"]\n+pub fn foo() {\n+    panic!()\n+}\n+```\n+\n+Then the rendered documentation for `pub fn foo` will look like this:\n+\n+> `pub fn foo()`\n+> \n+> ----\n+> Do the `foo` thing.\n+> # Panics\n+> Always.\n+\n+[RFC 1566]: https://github.com/rust-lang/rfcs/blob/master/text/1566-proc-macros.md\n+[custom derives]: https://doc.rust-lang.org/book/procedural-macros.html\n+[rust-lang/rust#41430]: https://github.com/rust-lang/rust/issues/41430\n+[refr-attr]: https://doc.rust-lang.org/reference/attributes.html"}, {"sha": "69857297582da4068b9c3c464d818657c7ce6877", "filename": "src/doc/unstable-book/src/language-features/slice-patterns.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fslice-patterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fslice-patterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fslice-patterns.md?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -4,7 +4,8 @@ The tracking issue for this feature is: [#23121]\n \n [#23121]: https://github.com/rust-lang/rust/issues/23121\n \n-See also [`advanced_slice_patterns`](advanced-slice-patterns.html).\n+See also\n+[`advanced_slice_patterns`](language-features/advanced-slice-patterns.html).\n \n ------------------------\n "}, {"sha": "18ff838dd32b961743f14b03a95d13d0d14790f9", "filename": "src/doc/unstable-book/src/library-features/alloc-jemalloc.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Falloc-jemalloc.md", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Falloc-jemalloc.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Falloc-jemalloc.md?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -4,7 +4,7 @@ The tracking issue for this feature is: [#33082]\n \n [#33082]: https://github.com/rust-lang/rust/issues/33082\n \n-See also [`alloc_system`](alloc-system.html).\n+See also [`alloc_system`](library-features/alloc-system.html).\n \n ------------------------\n "}, {"sha": "1d261db6ba1b3f810a08aa3892837c99cdeaf280", "filename": "src/doc/unstable-book/src/library-features/alloc-system.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Falloc-system.md", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Falloc-system.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Falloc-system.md?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -4,7 +4,7 @@ The tracking issue for this feature is: [#33082]\n \n [#33082]: https://github.com/rust-lang/rust/issues/33082\n \n-See also [`alloc_jemalloc`](alloc-jemalloc.html).\n+See also [`alloc_jemalloc`](library-features/alloc-jemalloc.html).\n \n ------------------------\n "}, {"sha": "f3863ab2a2abb4f98d65648b503c8ac32f09d3bb", "filename": "src/doc/unstable-book/src/library-features/binary-heap-peek-mut-pop.md", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/158b085f06a41004ebf36d87afa3548f8b60861a/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fbinary-heap-peek-mut-pop.md", "raw_url": "https://github.com/rust-lang/rust/raw/158b085f06a41004ebf36d87afa3548f8b60861a/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fbinary-heap-peek-mut-pop.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fbinary-heap-peek-mut-pop.md?ref=158b085f06a41004ebf36d87afa3548f8b60861a", "patch": "@@ -1,7 +0,0 @@\n-# `binary_heap_peek_mut_pop`\n-\n-The tracking issue for this feature is: [#38863]\n-\n-[#38863]: https://github.com/rust-lang/rust/issues/38863\n-\n-------------------------"}, {"sha": "05e057be4932df41e80dfb9c52a3538e3ba1d8c5", "filename": "src/doc/unstable-book/src/library-features/hint-core-should-pause.md", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fhint-core-should-pause.md", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fhint-core-should-pause.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fhint-core-should-pause.md?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -0,0 +1,41 @@\n+# `hint_core_should_pause`\n+\n+The tracking issue for this feature is: [#41196]\n+\n+[#41196]: https://github.com/rust-lang/rust/issues/41196\n+\n+------------------------\n+\n+Many programs have spin loops like the following:\n+\n+```rust,no_run\n+use std::sync::atomic::{AtomicBool,Ordering};\n+\n+fn spin_loop(value: &AtomicBool) {\n+    loop {\n+        if value.load(Ordering::Acquire) {\n+             break;\n+        }\n+    }\n+}\n+```\n+\n+These programs can be improved in performance like so:\n+\n+```rust,no_run\n+#![feature(hint_core_should_pause)]\n+use std::sync::atomic;\n+use std::sync::atomic::{AtomicBool,Ordering};\n+\n+fn spin_loop(value: &AtomicBool) {\n+    loop {\n+        if value.load(Ordering::Acquire) {\n+             break;\n+        }\n+        atomic::hint_core_should_pause();\n+    }\n+}\n+```\n+\n+Further improvements could combine `hint_core_should_pause` with\n+exponential backoff or `std::thread::yield_now`."}, {"sha": "8467cb68862f7996cb8c6bc8a660d29e3a2fde56", "filename": "src/doc/unstable-book/src/library-features/iterator-step-by.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fiterator-step-by.md", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fiterator-step-by.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fiterator-step-by.md?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -0,0 +1,7 @@\n+# `iterator_step_by`\n+\n+The tracking issue for this feature is: [#27741]\n+\n+[#27741]: https://github.com/rust-lang/rust/issues/27741\n+\n+------------------------"}, {"sha": "c84f40e7ee551ffa53a4e3abb710f7cfef45432d", "filename": "src/doc/unstable-book/src/library-features/more-io-inner-methods.md", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fmore-io-inner-methods.md", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fmore-io-inner-methods.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fmore-io-inner-methods.md?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -0,0 +1,11 @@\n+# `more_io_inner_methods`\n+\n+The tracking issue for this feature is: [#41519]\n+\n+[#41519]: https://github.com/rust-lang/rust/issues/41519\n+\n+------------------------\n+\n+This feature enables several internal accessor methods on structures in\n+`std::io` including `Take::{get_ref, get_mut}` and `Chain::{into_inner, get_ref,\n+get_mut}`."}, {"sha": "10ae95695a2dbdd55aefc2142a63fe48cddf95df", "filename": "src/doc/unstable-book/src/library-features/needs-drop.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fneeds-drop.md", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fneeds-drop.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fneeds-drop.md?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -0,0 +1,7 @@\n+# `needs_drop`\n+\n+The tracking issue for this feature is: [#41890]\n+\n+[#41890]: https://github.com/rust-lang/rust/issues/41890\n+\n+------------------------"}, {"sha": "c42b4e995ec58179ca5b25e7efeb9258acf24a13", "filename": "src/doc/unstable-book/src/library-features/peek.md", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/158b085f06a41004ebf36d87afa3548f8b60861a/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fpeek.md", "raw_url": "https://github.com/rust-lang/rust/raw/158b085f06a41004ebf36d87afa3548f8b60861a/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fpeek.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fpeek.md?ref=158b085f06a41004ebf36d87afa3548f8b60861a", "patch": "@@ -1,7 +0,0 @@\n-# `peek`\n-\n-The tracking issue for this feature is: [#38980]\n-\n-[#38980]: https://github.com/rust-lang/rust/issues/38980\n-\n-------------------------"}, {"sha": "a68557872af553af9fcd3c508081b53a090fe365", "filename": "src/doc/unstable-book/src/library-features/print-internals.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fprint-internals.md", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fprint-internals.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fprint-internals.md?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -1,4 +1,4 @@\n-# `print`\n+# `print_internals`\n \n This feature is internal to the Rust compiler and is not intended for general use.\n ", "previous_filename": "src/doc/unstable-book/src/library-features/print.md"}, {"sha": "3593b6423495aa9fb5ee7c459bf72f20e5c2c5d6", "filename": "src/doc/unstable-book/src/library-features/process-try-wait.md", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/158b085f06a41004ebf36d87afa3548f8b60861a/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fprocess-try-wait.md", "raw_url": "https://github.com/rust-lang/rust/raw/158b085f06a41004ebf36d87afa3548f8b60861a/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fprocess-try-wait.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fprocess-try-wait.md?ref=158b085f06a41004ebf36d87afa3548f8b60861a", "patch": "@@ -1,7 +0,0 @@\n-# `process_try_wait`\n-\n-The tracking issue for this feature is: [#38903]\n-\n-[#38903]: https://github.com/rust-lang/rust/issues/38903\n-\n-------------------------"}, {"sha": "c9ba5acf02003a92ea3ebd017f3c35d0c521a329", "filename": "src/doc/unstable-book/src/library-features/retain-hash-collection.md", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/158b085f06a41004ebf36d87afa3548f8b60861a/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fretain-hash-collection.md", "raw_url": "https://github.com/rust-lang/rust/raw/158b085f06a41004ebf36d87afa3548f8b60861a/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fretain-hash-collection.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fretain-hash-collection.md?ref=158b085f06a41004ebf36d87afa3548f8b60861a", "patch": "@@ -1,7 +0,0 @@\n-# `retain_hash_collection`\n-\n-The tracking issue for this feature is: [#36648]\n-\n-[#36648]: https://github.com/rust-lang/rust/issues/36648\n-\n-------------------------"}, {"sha": "ca7f78a8f79e523c3048aeefec9aaebfa82421fe", "filename": "src/doc/unstable-book/src/library-features/splice.md", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fsplice.md", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fsplice.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fsplice.md?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -0,0 +1,24 @@\n+# `splice`\n+\n+The tracking issue for this feature is: [#32310]\n+\n+[#32310]: https://github.com/rust-lang/rust/issues/32310\n+\n+------------------------\n+\n+The `splice()` method on `Vec` and `String` allows you to replace a range\n+of values in a vector or string with another range of values, and returns\n+the replaced values.\n+\n+A simple example:\n+\n+```rust\n+#![feature(splice)]\n+let mut s = String::from(\"\u03b1 is alpha, \u03b2 is beta\");\n+let beta_offset = s.find('\u03b2').unwrap_or(s.len());\n+\n+// Replace the range up until the \u03b2 from the string\n+let t: String = s.splice(..beta_offset, \"\u0391 is capital alpha; \").collect();\n+assert_eq!(t, \"\u03b1 is alpha, \");\n+assert_eq!(s, \"\u0391 is capital alpha; \u03b2 is beta\");\n+```\n\\ No newline at end of file"}, {"sha": "d05dcafa84da9adf74d6c497d4648436c69895c6", "filename": "src/doc/unstable-book/src/library-features/str-box-extras.md", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fstr-box-extras.md", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fstr-box-extras.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fstr-box-extras.md?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -0,0 +1,9 @@\n+# `str_box_extras`\n+\n+The tracking issue for this feature is: [#str_box_extras]\n+\n+[#str_box_extras]: https://github.com/rust-lang/rust/issues/41119\n+\n+------------------------\n+\n+"}, {"sha": "5803d3215a54b93bbfbcbe84a2be995fa494b2bb", "filename": "src/doc/unstable-book/src/library-features/vec-resize-default.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fvec-resize-default.md", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fvec-resize-default.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fvec-resize-default.md?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -0,0 +1,7 @@\n+# `vec_resize_default`\n+\n+The tracking issue for this feature is: [#41758]\n+\n+[#41758]: https://github.com/rust-lang/rust/issues/41758\n+\n+------------------------"}, {"sha": "bd6c483156f8125df69f0f2753b0dbf5eed15487", "filename": "src/etc/adb_run_wrapper.sh", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/158b085f06a41004ebf36d87afa3548f8b60861a/src%2Fetc%2Fadb_run_wrapper.sh", "raw_url": "https://github.com/rust-lang/rust/raw/158b085f06a41004ebf36d87afa3548f8b60861a/src%2Fetc%2Fadb_run_wrapper.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fadb_run_wrapper.sh?ref=158b085f06a41004ebf36d87afa3548f8b60861a", "patch": "@@ -1,35 +0,0 @@\n-# Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-#\n-# ignore-tidy-linelength\n-#\n-# usage : adb_run_wrapper [test dir - where test executables exist] [test executable]\n-#\n-\n-TEST_PATH=$1\n-BIN_PATH=/system/bin\n-if [ -d \"$TEST_PATH\" ]\n-then\n-    shift\n-    RUN=$1\n-\n-    if [ ! -z \"$RUN\" ]\n-    then\n-        shift\n-\n-        # The length of binary path (i.e. ./$RUN) should be shorter than 128 characters.\n-        cd $TEST_PATH\n-        TEST_EXEC_ENV=22 LD_LIBRARY_PATH=$TEST_PATH PATH=$BIN_PATH:$TEST_PATH ./$RUN $@ 1>$TEST_PATH/$RUN.stdout 2>$TEST_PATH/$RUN.stderr\n-        L_RET=$?\n-\n-        echo $L_RET > $TEST_PATH/$RUN.exitcode\n-\n-    fi\n-fi"}, {"sha": "4699fefbb20e3b1ba63eee977ec575b341fc920a", "filename": "src/etc/make-win-dist.py", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fetc%2Fmake-win-dist.py", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fetc%2Fmake-win-dist.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fmake-win-dist.py?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -49,7 +49,8 @@ def make_win_dist(rust_root, plat_root, target_triple):\n         elif key == \"libraries\":\n             lib_path.extend(val.lstrip(' =').split(';'))\n \n-    target_tools = [\"gcc.exe\", \"ld.exe\", \"ar.exe\", \"dlltool.exe\"]\n+    target_tools = [\"gcc.exe\", \"ld.exe\", \"ar.exe\", \"dlltool.exe\",\n+                    \"libwinpthread-1.dll\"]\n \n     rustc_dlls = [\"libstdc++-6.dll\", \"libwinpthread-1.dll\"]\n     if target_triple.startswith(\"i686-\"):"}, {"sha": "a1897e6bf6100bd692a34e7f9899bdf5eee9afc6", "filename": "src/etc/platform-intrinsics/hexagon/hvx_v60.json", "status": "added", "additions": 1326, "deletions": 0, "changes": 1326, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fetc%2Fplatform-intrinsics%2Fhexagon%2Fhvx_v60.json", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fetc%2Fplatform-intrinsics%2Fhexagon%2Fhvx_v60.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Fhexagon%2Fhvx_v60.json?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -0,0 +1,1326 @@\n+{\n+    \"platform\": \"Q6_\",\n+    \"intrinsic_prefix\": \"\",\n+    \"llvm_prefix\": \"llvm.hexagon.V6.\",\n+    \"number_info\": {\n+        \"signed\": {\n+            \"kind\": \"s\",\n+            \"data_type\": { \"8\": \"b\", \"16\": \"h\", \"32\": \"w\" },\n+            \"data_type_plain\": { \"8\": \"b\", \"16\": \"h\", \"32\": \"w\" }\n+        },\n+        \"unsigned\": {\n+            \"kind\": \"u\",\n+            \"data_type\": { \"8\": \"ub\", \"16\": \"uh\", \"32\": \"uw\" },\n+            \"data_type_plain\": { \"8\": \"b\", \"16\": \"h\", \"32\": \"w\" }\n+        },\n+        \"float\": {\n+            \"kind\": \"f\",\n+            \"data_type\": { \"8\": \"b\", \"16\": \"h\", \"32\": \"w\" },\n+            \"data_type_plain\": { \"8\": \"b\", \"16\": \"h\", \"32\": \"w\" }\n+        }\n+    },\n+    \"width_info\": {\n+        \"64\": { \"width_b\": \"64\", \"width_suffix\": \"\" },\n+        \"128\": { \"width_b\": \"128\", \"width_suffix\": \".128B\" },\n+        \"512\": { \"width_b\": \"64\", \"width_suffix\": \"\" },\n+        \"1024\": { \"widthd_b\": \"64\", \"width_b\": \"128\", \"width_suffix\": \".128B\",  \"widthd_suffix\": \"\" },\n+        \"2048\": { \"widthd_b\": \"128\", \"widthd_suffix\": \".128B\" }\n+    },\n+    \"intrinsics\": [\n+        {\n+            \"intrinsic\": \"R_vextract{1.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"extractw{1.width_suffix}\",\n+            \"ret\": \"U32\",\n+            \"args\": [\"u32\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V_lo{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"lo{0.width_suffix}\",\n+            \"ret\": \"u32\",\n+            \"args\": [\"0d\"]\n+        },\n+        {\n+            \"intrinsic\": \"V_hi{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"hi{0.width_suffix}\",\n+            \"ret\": \"u32\",\n+            \"args\": [\"0d\"]\n+        },\n+        {\n+            \"intrinsic\": \"V_vsplat_R{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"lvsplat{1.data_type}{0.width_suffix}\",\n+            \"ret\": \"u32\",\n+            \"args\": [\"0S\"]\n+        },\n+        {\n+            \"intrinsic\": \"Q_and_QQ{0.width_b}\",\n+            \"width\": [64, 128],\n+            \"llvm\": \"pred.and{0.width_suffix}\",\n+            \"ret\": \"u32\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"Q_not_Q{0.width_b}\",\n+            \"width\": [64, 128],\n+            \"llvm\": \"pred.not{0.width_suffix}\",\n+            \"ret\": \"u32\",\n+            \"args\": [\"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"Q_or_QQ{0.width_b}\",\n+            \"width\": [64, 128],\n+            \"llvm\": \"pred.or{0.width_suffix}\",\n+            \"ret\": \"u32\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"Q_xor_QQ{0.width_b}\",\n+            \"width\": [64, 128],\n+            \"llvm\": \"pred.xor{0.width_suffix}\",\n+            \"ret\": \"u32\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vabsdiff_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vabsdiff{1.data_type}{0.width_suffix}\",\n+            \"ret\": \"u(8-16)\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vabsdiff_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vabsdiff{1.data_type}{0.width_suffix}\",\n+            \"ret\": \"u(16-32)\",\n+            \"args\": [\"0s\", \"0s\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vabs_V{1.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vabs{1.data_type}{0.width_suffix}\",\n+            \"ret\": \"s(16-32)\",\n+            \"args\": [\"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vabs_V{1.data_type}_sat{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vabs{1.data_type}.sat{0.width_suffix}\",\n+            \"ret\": \"s(16-32)\",\n+            \"args\": [\"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vadd_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vadd{0.data_type}{0.width_suffix}\",\n+            \"ret\": \"s(8-32)\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vadd_V{1.data_type}V{2.data_type}_sat{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vadd{0.data_type}sat{0.width_suffix}\",\n+            \"ret\": \"s(16-32)\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vadd_V{1.data_type}V{2.data_type}_sat{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vadd{0.data_type}sat{0.width_suffix}\",\n+            \"ret\": \"u(8-16)\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vadd_W{1.data_type}W{2.data_type}{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vadd{0.data_type}.dv{0.widthd_suffix}\",\n+            \"ret\": \"s(8-32)d\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vadd_W{1.data_type}W{2.data_type}_sat{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vadd{0.data_type}sat.dv{0.widthd_suffix}\",\n+            \"ret\": \"s(16-32)d\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vadd_W{1.data_type}W{2.data_type}_sat{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vadd{0.data_type}sat.dv{0.widthd_suffix}\",\n+            \"ret\": \"u(8-16)d\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V_valign_VVR{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"valignb{0.width_suffix}\",\n+            \"ret\": \"u8\",\n+            \"args\": [\"0\", \"0\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V_valign_VVI{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"valignbi{0.width_suffix}\",\n+            \"ret\": \"u8\",\n+            \"args\": [\"0\", \"0\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V_vlalign_VVR{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vlalignb{0.width_suffix}\",\n+            \"ret\": \"u8\",\n+            \"args\": [\"0\", \"0\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V_vlalign_VVI{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vlalignbi{0.width_suffix}\",\n+            \"ret\": \"u8\",\n+            \"args\": [\"0\", \"0\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V_vand_VV{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vand{0.width_suffix}\",\n+            \"ret\": \"u16\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V_vand_QR{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vandqrt{0.width_suffix}\",\n+            \"ret\": \"u8\",\n+            \"args\": [\"u32hhh\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V_vandor_VQR{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vandqrt.acc{0.width_suffix}\",\n+            \"ret\": \"u8\",\n+            \"args\": [\"0\", \"u32hhh\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"Q_vand_VR{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vandvrt{0.width_suffix}\",\n+            \"ret\": \"u32hhh\",\n+            \"args\": [\"u8\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"Q_vandor_QVR{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vandvrt{0.width_suffix}\",\n+            \"ret\": \"u32hhh\",\n+            \"args\": [\"0\", \"u8\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vasl_V{1.data_type}R{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vasl{0.data_type}{0.width_suffix}\",\n+            \"ret\": \"s(16-32)\",\n+            \"args\": [\"0\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vasl_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vasl{0.data_type}v{0.width_suffix}\",\n+            \"ret\": \"s(16-32)\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vaslacc_V{1.data_type}V{2.data_type}R{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vasl{0.data_type}.acc{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"0\", \"0\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vasr_V{1.data_type}R{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vasr{0.data_type}{0.width_suffix}\",\n+            \"ret\": \"s(16-32)\",\n+            \"args\": [\"0\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vasr_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vasr{0.data_type}v{0.width_suffix}\",\n+            \"ret\": \"s(16-32)\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vasracc_V{1.data_type}V{2.data_type}R{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vasr{0.data_type}.acc{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"0\", \"0\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vasr_V{1.data_type}V{2.data_type}R{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vasr{0.data_type}{1.data_type}{0.width_suffix}\",\n+            \"ret\": \"s16\",\n+            \"args\": [\"0hw\", \"0hw\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vasr_V{1.data_type}V{2.data_type}R_sat{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vasr{1.data_type}{0.data_type_plain}sat{0.width_suffix}\",\n+            \"ret\": \"i(8-16)\",\n+            \"args\": [\"0hws\", \"0hws\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vasr_V{1.data_type}V{2.data_type}R_rnd_sat{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vasr{1.data_type}{0.data_type_plain}rndsat{0.width_suffix}\",\n+            \"ret\": \"i(8-16)\",\n+            \"args\": [\"0hws\", \"0hws\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V_equals_V{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vassign{0.width_suffix}\",\n+            \"ret\": \"u32\",\n+            \"args\": [\"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"W_equals_W{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vassignp{0.widthd_suffix}\",\n+            \"ret\": \"u32d\",\n+            \"args\": [\"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vavg_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vavg{0.data_type}{0.width_suffix}\",\n+            \"ret\": \"s(16-32)\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vavg_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vavg{0.data_type}{0.width_suffix}\",\n+            \"ret\": \"u(8-16)\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vavg_V{1.data_type}V{2.data_type}_rnd{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vavgrnd{0.data_type}{0.width_suffix}\",\n+            \"ret\": \"s(16-32)\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vavg_V{1.data_type}V{2.data_type}_rnd{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vavgrnd{0.data_type}{0.width_suffix}\",\n+            \"ret\": \"u(8-16)\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vcl0_V{1.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vcl0{0.data_type_plain}{0.width_suffix}\",\n+            \"ret\": \"u(16-32)\",\n+            \"args\": [\"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"W_vcombine_VV{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vcombine{0.widthd_suffix}\",\n+            \"ret\": \"u8d\",\n+            \"args\": [\"0h\", \"0h\"]\n+        },\n+        {\n+            \"intrinsic\": \"V_vzero{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vd0{0.width_suffix}\",\n+            \"ret\": \"u32\",\n+            \"args\": []\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vdeal_V{1.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vdeal{1.data_type}{0.width_suffix}\",\n+            \"ret\": \"s(8-16)\",\n+            \"args\": [\"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vdeale_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vdeal{1.data_type}4w{0.width_suffix}\",\n+            \"ret\": \"s8\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"W_vdeal_VVR{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vdealvdd{0.widthd_suffix}\",\n+            \"ret\": \"u8d\",\n+            \"args\": [\"0h\", \"0h\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V_vdelta_VV{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vdelta{0.width_suffix}\",\n+            \"ret\": \"u8\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vdmpy_V{1.data_type}Rb{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vdmpybus{0.width_suffix}\",\n+            \"ret\": \"s16\",\n+            \"args\": [\"u8\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vdmpyacc_V{1.data_type}V{2.data_type}Rb{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vdmpybus.acc{0.width_suffix}\",\n+            \"ret\": \"s16\",\n+            \"args\": [\"s16\", \"u8\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vdmpy_W{1.data_type}Rb{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vdmpybus.dv{0.widthd_suffix}\",\n+            \"ret\": \"s16d\",\n+            \"args\": [\"u8d\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vdmpyacc_W{1.data_type}W{2.data_type}Rb{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vdmpybus.dv.acc{0.widthd_suffix}\",\n+            \"ret\": \"s16d\",\n+            \"args\": [\"s16d\", \"u8d\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vdmpy_V{1.data_type}Rb{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vdmpyhb{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"s16\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vdmpyacc_V{1.data_type}V{2.data_type}Rb{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vdmpyhb.acc{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"s32\", \"s16\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vdmpy_W{1.data_type}Rb{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vdmpyhb.dv{0.widthd_suffix}\",\n+            \"ret\": \"s32d\",\n+            \"args\": [\"s16d\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vdmpyacc_W{1.data_type}W{2.data_type}Rb{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vdmpyhb.dv.acc{0.widthd_suffix}\",\n+            \"ret\": \"s32d\",\n+            \"args\": [\"s32d\", \"s16d\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vdmpy_W{1.data_type}Rh_sat{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vdmpyhisat{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"0d\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vdmpy_V{1.data_type}Rh_sat{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vdmpyhsat{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"s16\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vdmpy_W{1.data_type}Ruh_sat{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vdmpyhsuisat{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"s16d\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vdmpy_V{1.data_type}Ruh_sat{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vdmpyhsusat{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"s16\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vdmpy_V{1.data_type}V{2.data_type}_sat{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vdmpyhvsat{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"s16\", \"s16\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vdmpyacc_V{1.data_type}W{2.data_type}Rh_sat{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vdmpyhisat_acc{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"0\", \"0d\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vdsad_W{1.data_type}Ruh{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vdsaduh{0.widthd_suffix}\",\n+            \"ret\": \"u32d\",\n+            \"args\": [\"u16d\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vdsadacc_W{1.data_type}W{2.data_type}Ruh{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vdsaduh.acc{0.widthd_suffix}\",\n+            \"ret\": \"u32d\",\n+            \"args\": [\"0\", \"u16d\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vdmpyacc_V{1.data_type}V{2.data_type}Rh_sat{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vdmpyhsat_acc{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"0\", \"s16\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vdmpyacc_V{1.data_type}W{2.data_type}Ruh_sat{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vdmpyhsuisat_acc{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"0\", \"s16d\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vdmpyacc_V{1.data_type}V{2.data_type}Ruh_sat{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vdmpyhsusat_acc{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"0\", \"s16\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vdmpyacc_V{1.data_type}V{2.data_type}V{3.data_type}_sat{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vdmpyhvsat_acc{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"0\", \"s16\", \"s16\"]\n+        },\n+        {\n+            \"intrinsic\": \"Q_vcmp_eq_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"veq{1.data_type}{0.width_suffix}\",\n+            \"ret\": \"u32hhh\",\n+            \"args\": [\"s(8-32)\", \"1\"]\n+        },\n+        {\n+            \"intrinsic\": \"Q_vcmp_eqand_QV{2.data_type}V{3.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"veq{2.data_type}.and{0.width_suffix}\",\n+            \"ret\": \"u32hhh\",\n+            \"args\": [\"0\", \"s(8-32)\", \"2\"]\n+        },\n+        {\n+            \"intrinsic\": \"Q_vcmp_eqor_QV{2.data_type}V{3.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"veq{2.data_type}.or{0.width_suffix}\",\n+            \"ret\": \"u32hhh\",\n+            \"args\": [\"0\", \"s(8-32)\", \"2\"]\n+        },\n+        {\n+            \"intrinsic\": \"Q_vcmp_eqxacc_QV{2.data_type}V{3.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"veq{2.data_type}.xor{0.width_suffix}\",\n+            \"ret\": \"u32hhh\",\n+            \"args\": [\"0\", \"s(8-32)\", \"2\"]\n+        },\n+        {\n+            \"intrinsic\": \"Q_vcmp_gt_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vgt{1.data_type}{0.width_suffix}\",\n+            \"ret\": \"u32hhh\",\n+            \"args\": [\"s(8-32)\", \"1\"]\n+        },\n+        {\n+            \"intrinsic\": \"Q_vcmp_gt_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vgt{1.data_type}{0.width_suffix}\",\n+            \"ret\": \"u32hhh\",\n+            \"args\": [\"u(8-16)\", \"1\"]\n+        },\n+        {\n+            \"intrinsic\": \"Q_vcmp_gtand_QV{2.data_type}V{3.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vgt{2.data_type}.and{0.width_suffix}\",\n+            \"ret\": \"u32hhh\",\n+            \"args\": [\"0\", \"s(8-32)\", \"2\"]\n+        },\n+        {\n+            \"intrinsic\": \"Q_vcmp_gtand_QV{2.data_type}V{3.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vgt{2.data_type}.and{0.width_suffix}\",\n+            \"ret\": \"u32hhh\",\n+            \"args\": [\"0\", \"u(8-16)\", \"2\"]\n+        },\n+        {\n+            \"intrinsic\": \"Q_vcmp_gtor_QV{2.data_type}V{3.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vgt{2.data_type}.or{0.width_suffix}\",\n+            \"ret\": \"u32hhh\",\n+            \"args\": [\"0\", \"s(8-32)\", \"2\"]\n+        },\n+        {\n+            \"intrinsic\": \"Q_vcmp_gtor_QV{2.data_type}V{3.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vgt{2.data_type}.or{0.width_suffix}\",\n+            \"ret\": \"u32hhh\",\n+            \"args\": [\"0\", \"u(8-16)\", \"2\"]\n+        },\n+        {\n+            \"intrinsic\": \"Q_vcmp_gtxacc_QV{2.data_type}V{3.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vgt{2.data_type}.xor{0.width_suffix}\",\n+            \"ret\": \"u32hhh\",\n+            \"args\": [\"0\", \"s(8-32)\", \"2\"]\n+        },\n+        {\n+            \"intrinsic\": \"Q_vcmp_gtxacc_QV{2.data_type}V{3.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vgt{2.data_type}.xor{0.width_suffix}\",\n+            \"ret\": \"u32hhh\",\n+            \"args\": [\"0\", \"u(8-16)\", \"2\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vinsert_V{1.data_type}R{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vinsertwr{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"S32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vlsr_V{1.data_type}R{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vlsr{0.data_type_plain}{0.width_suffix}\",\n+            \"ret\": \"u(16-32)\",\n+            \"args\": [\"0\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vlsr_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vlsr{0.data_type}v{0.width_suffix}\",\n+            \"ret\": \"s(16-32)\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vlut32_V{1.data_type}V{2.data_type}R{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vlutvv{0.data_type}{0.width_suffix}\",\n+            \"ret\": \"s8\",\n+            \"args\": [\"0\", \"0\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vlut16_V{1.data_type}V{2.data_type}R{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vlutvw{0.data_type}{0.widthd_suffix}\",\n+            \"ret\": \"s16d\",\n+            \"args\": [\"s8\", \"s16\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vlut32or_V{1.data_type}V{2.data_type}V{3.data_type}R{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vlutvv{0.data_type}.oracc{0.width_suffix}\",\n+            \"ret\": \"s8\",\n+            \"args\": [\"0\", \"0\", \"0\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vlut16or_W{1.data_type}V{2.data_type}V{3.data_type}R{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vlutvw{0.data_type}.oracc{0.widthd_suffix}\",\n+            \"ret\": \"s16d\",\n+            \"args\": [\"0\", \"s8\", \"s16\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vmax_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmax{0.data_type}{0.width_suffix}\",\n+            \"ret\": \"s(16-32)\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vmax_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmax{0.data_type}{0.width_suffix}\",\n+            \"ret\": \"u(8-16)\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vmin_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmin{0.data_type}{0.width_suffix}\",\n+            \"ret\": \"s(16-32)\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vmin_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmin{0.data_type}{0.width_suffix}\",\n+            \"ret\": \"u(8-16)\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vmpa_W{1.data_type}Rb{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpabus{0.widthd_suffix}\",\n+            \"ret\": \"s16d\",\n+            \"args\": [\"u8d\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vmpaacc_W{1.data_type}W{2.data_type}Rb{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpabus.acc{0.widthd_suffix}\",\n+            \"ret\": \"s16d\",\n+            \"args\": [\"0\", \"u8d\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vmpa_W{1.data_type}W{2.data_type}{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpab{1.kind}{2.kind}v{0.widthd_suffix}\",\n+            \"ret\": \"s16d\",\n+            \"args\": [\"u8d\", \"i8d\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vmpa_W{1.data_type}Rb{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpahb{0.widthd_suffix}\",\n+            \"ret\": \"s32d\",\n+            \"args\": [\"s16d\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vmpaacc_W{1.data_type}W{2.data_type}Rb{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpahb.acc{0.widthd_suffix}\",\n+            \"ret\": \"s32d\",\n+            \"args\": [\"0\", \"s16d\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vmpy_V{1.data_type}V{2.data_type}{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpy{1.data_type}us{0.widthd_suffix}\",\n+            \"ret\": \"s(16-32)d\",\n+            \"args\": [\"0n\", \"0nu\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vmpyacc_W{1.data_type}V{2.data_type}V{3.data_type}{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpy{2.data_type}us.acc{0.widthd_suffix}\",\n+            \"ret\": \"s(16-32)d\",\n+            \"args\": [\"0\", \"0n\", \"0nu\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vmpy_V{1.data_type}V{2.data_type}{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpybusv{0.widthd_suffix}\",\n+            \"ret\": \"s16d\",\n+            \"args\": [\"u8\", \"s8\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vmpyacc_W{1.data_type}V{2.data_type}V{3.data_type}{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpybusv.acc{0.widthd_suffix}\",\n+            \"ret\": \"s16d\",\n+            \"args\": [\"0\", \"0nu\", \"0n\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vmpy_V{1.data_type}V{2.data_type}{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpy{1.data_type}v{0.widthd_suffix}\",\n+            \"ret\": \"i(16-32)d\",\n+            \"args\": [\"0n\", \"0n\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vmpyacc_W{1.data_type}V{2.data_type}V{3.data_type}{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpy{2.data_type}v.acc{0.widthd_suffix}\",\n+            \"ret\": \"i(16-32)d\",\n+            \"args\": [\"0\", \"0n\", \"0n\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vmpye_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpyewuh{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"s32\", \"u16\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vmpy_V{1.data_type}R{1.data_type}{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpy{1.data_type}{0.widthd_suffix}\",\n+            \"ret\": \"i32d\",\n+            \"args\": [\"0n\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vmpyacc_W{1.data_type}V{2.data_type}R{2.data_type}_sat{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpy{2.data_type}sat.acc{0.widthd_suffix}\",\n+            \"ret\": \"s32d\",\n+            \"args\": [\"0\", \"0n\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vmpy_V{1.data_type}R{1.data_type}_s1_rnd_sat{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpy{1.data_type}srs{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"0nd\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vmpy_V{1.data_type}R{1.data_type}_s1_sat{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpy{1.data_type}ss{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"0nd\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vmpy_V{1.data_type}V{2.data_type}_s1_rnd_sat{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpy{1.data_type}vsrs{0.width_suffix}\",\n+            \"ret\": \"s16\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vmpyieo_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpyieo{1.data_type}{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"0nd\", \"0nd\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vmpyieacc_V{1.data_type}V{2.data_type}V{3.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpyie{2.data_type}{3.data_type}.acc{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"0\", \"0\", \"i16\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vmpyie_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpyie{1.data_type}{2.data_type}{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"0\", \"u16\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vmpyi_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpyi{1.data_type}{0.width_suffix}\",\n+            \"ret\": \"s16\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vmpyiacc_V{1.data_type}V{2.data_type}V{3.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpyi{1.data_type}.acc{0.width_suffix}\",\n+            \"ret\": \"s16\",\n+            \"args\": [\"0\", \"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vmpyi_V{1.data_type}Rb{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpyi{1.data_type}b{0.width_suffix}\",\n+            \"ret\": \"s(16-32)\",\n+            \"args\": [\"0\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vmpyiacc_V{1.data_type}V{2.data_type}Rb{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpyi{1.data_type}b.acc{0.width_suffix}\",\n+            \"ret\": \"s(16-32)\",\n+            \"args\": [\"0\", \"0\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vmpyi_V{1.data_type}Rh{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpyi{1.data_type}h{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"0\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vmpyiacc_V{1.data_type}V{2.data_type}Rh{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpyi{1.data_type}h.acc{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"0\", \"0\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vmpyi_V{1.data_type}Rub{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpyi{1.data_type}ub{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"0\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vmpyiacc_V{1.data_type}V{2.data_type}Rub{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpyi{1.data_type}ub.acc{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"0\", \"0\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vmpyo_V{1.data_type}V{2.data_type}_s1_sat{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpyo{1.data_type}{2.data_type}{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"0\", \"0nd\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vmpyo_V{1.data_type}V{2.data_type}_s1_rnd_sat{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpyo{1.data_type}{2.data_type}.rnd{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"0\", \"0nd\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vmpyo_V{1.data_type}V{2.data_type}_s1_rnd_sat_shift{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpyo{1.data_type}{2.data_type}.rnd.sacc{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"0\", \"0nd\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vmpyo_V{1.data_type}V{2.data_type}_s1_sat_shift{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpyo{1.data_type}{2.data_type}.sacc{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"0\", \"0nd\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vmpyio_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpyio{1.data_type}{2.data_type}{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"0\", \"0nd\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vmpy_V{1.data_type}R{1.data_type}{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpy{1.data_type}{0.widthd_suffix}\",\n+            \"ret\": \"u16d\",\n+            \"args\": [\"0n\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vmpyacc_W{1.data_type}V{2.data_type}R{2.data_type}{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpy{2.data_type}.acc{0.widthd_suffix}\",\n+            \"ret\": \"u(16-32)d\",\n+            \"args\": [\"0\", \"0n\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vmux_QVV{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmux{0.width_suffix}\",\n+            \"ret\": \"u32\",\n+            \"args\": [\"0hhh\", \"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vnavg_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vnavg{0.data_type}{0.width_suffix}\",\n+            \"ret\": \"i(16-32)\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vnavg_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vnavg{0.data_type}{0.width_suffix}\",\n+            \"ret\": \"u8\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vnormamt_V{1.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vnormamt{0.data_type}{0.width_suffix}\",\n+            \"ret\": \"s(16-32)\",\n+            \"args\": [\"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V_vnot_VV{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vnot{0.width_suffix}\",\n+            \"ret\": \"u16\",\n+            \"args\": [\"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V_vor_VV{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vor{0.width_suffix}\",\n+            \"ret\": \"u16\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vpacke_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vpack{1.data_type}e{0.width_suffix}\",\n+            \"ret\": \"s(8-16)\",\n+            \"args\": [\"0hw\", \"0hw\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vpacko_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vpack{1.data_type}o{0.width_suffix}\",\n+            \"ret\": \"s(8-16)\",\n+            \"args\": [\"0hw\", \"0hw\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vpack_V{1.data_type}V{2.data_type}_sat{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vpack{1.data_type}{0.data_type}.sat{0.width_suffix}\",\n+            \"ret\": \"i(8-16)\",\n+            \"args\": [\"0hws\", \"0hws\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vpopcount_V{1.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vpopcount{0.data_type}{0.width_suffix}\",\n+            \"ret\": \"s16\",\n+            \"args\": [\"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V_vrdelta_VV{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vrdelta{0.width_suffix}\",\n+            \"ret\": \"u8\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vrmpy_V{1.data_type}Rb{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vrmpybus{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"u8\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vrmpyacc_V{1.data_type}V{2.data_type}Rb{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vrmpybus.acc{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"0\", \"u8\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vrmpy_W{1.data_type}RbI{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vrmpybusi{0.widthd_suffix}\",\n+            \"ret\": \"s32d\",\n+            \"args\": [\"u8d\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vrmpyacc_W{1.data_type}W{2.data_type}RbI{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vrmpybusi.acc{0.widthd_suffix}\",\n+            \"ret\": \"s32d\",\n+            \"args\": [\"0\", \"u8d\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vrmpy_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vrmpybusv{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"u8\", \"s8\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vrmpyacc_V{1.data_type}V{2.data_type}V{3.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vrmpybusv.acc{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"0\", \"u8\", \"s8\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vrmpy_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vrmpy{1.data_type}v{0.width_suffix}\",\n+            \"ret\": \"i32\",\n+            \"args\": [\"0nndd\", \"0nndd\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vrmpyacc_V{1.data_type}V{2.data_type}V{3.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vrmpy{1.data_type}v.acc{0.width_suffix}\",\n+            \"ret\": \"i32\",\n+            \"args\": [\"0\", \"0nndd\", \"0nndd\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vrmpy_V{1.data_type}Rub{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vrmpyub{0.width_suffix}\",\n+            \"ret\": \"u32\",\n+            \"args\": [\"u8\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vrmpyacc_V{1.data_type}V{2.data_type}Rub{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vrmpyub.acc{0.width_suffix}\",\n+            \"ret\": \"u32\",\n+            \"args\": [\"0\", \"u8\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vrmpy_W{1.data_type}RubI{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vrmpyubi{0.widthd_suffix}\",\n+            \"ret\": \"u32d\",\n+            \"args\": [\"u8d\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vrmpyacc_W{1.data_type}W{2.data_type}RubI{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vrmpyubi.acc{0.widthd_suffix}\",\n+            \"ret\": \"u32d\",\n+            \"args\": [\"0\", \"u8d\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V_vror_VR{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vror{0.width_suffix}\",\n+            \"ret\": \"u8\",\n+            \"args\": [\"0\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vround_V{1.data_type}V{2.data_type}_sat{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vround{1.data_type}{0.data_type}{0.width_suffix}\",\n+            \"ret\": \"i(8-16)\",\n+            \"args\": [\"0hws\", \"0hws\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vrsad_W{1.data_type}RubI{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vrsadubi{0.widthd_suffix}\",\n+            \"ret\": \"u32d\",\n+            \"args\": [\"u8d\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vrsadacc_W{1.data_type}W{2.data_type}RubI{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vrsadubi.acc{0.widthd_suffix}\",\n+            \"ret\": \"u32d\",\n+            \"args\": [\"0\", \"u8d\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vsat_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vsat{1.data_type}{0.data_type}{0.width_suffix}\",\n+            \"ret\": \"u8\",\n+            \"args\": [\"0hws\", \"0hws\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vsat_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vsat{1.data_type}{0.data_type}{0.width_suffix}\",\n+            \"ret\": \"s16\",\n+            \"args\": [\"0hw\", \"0hw\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vsxt_V{1.data_type}{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vs{1.data_type}{0.widthd_suffix}\",\n+            \"ret\": \"s(16-32)d\",\n+            \"args\": [\"0n\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vzxt_V{1.data_type}{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vz{1.data_type_plain}{0.widthd_suffix}\",\n+            \"ret\": \"u(16-32)d\",\n+            \"args\": [\"0n\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_condacc_QV{2.data_type}V{3.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vadd{0.data_type}q{0.width_suffix}\",\n+            \"ret\": \"s(8-32)\",\n+            \"args\": [\"u32hhh\", \"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_condacc_QnV{2.data_type}V{3.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vadd{0.data_type}nq{0.width_suffix}\",\n+            \"ret\": \"s(8-32)\",\n+            \"args\": [\"u32hhh\", \"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_condnac_QV{2.data_type}V{3.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vsub{0.data_type}q{0.width_suffix}\",\n+            \"ret\": \"s(8-32)\",\n+            \"args\": [\"u32hhh\", \"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_condnac_QnV{2.data_type}V{3.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vsub{0.data_type}nq{0.width_suffix}\",\n+            \"ret\": \"s(8-32)\",\n+            \"args\": [\"u32hhh\", \"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vshuffe_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vshufe{1.data_type}{0.width_suffix}\",\n+            \"ret\": \"s16\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vshuffo_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vshufo{1.data_type}{0.width_suffix}\",\n+            \"ret\": \"s16\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vshuff_V{1.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vshuff{1.data_type}{0.width_suffix}\",\n+            \"ret\": \"s(8-16)\",\n+            \"args\": [\"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vshuffe_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vshuffe{1.data_type}{0.width_suffix}\",\n+            \"ret\": \"s8\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vshuffo_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vshuffo{1.data_type}{0.width_suffix}\",\n+            \"ret\": \"s8\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vshuffoe_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vshuffoe{1.data_type}{0.width_suffix}\",\n+            \"ret\": \"s(8-16)\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"W_vshuff_VVR{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vshufvvd{0.widthd_suffix}\",\n+            \"ret\": \"u8d\",\n+            \"args\": [\"0h\", \"0h\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vsub_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vsub{0.data_type}{0.width_suffix}\",\n+            \"ret\": \"s(8-32)\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vsub_V{1.data_type}V{2.data_type}_sat{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vsub{0.data_type}sat{0.width_suffix}\",\n+            \"ret\": \"s(16-32)\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vsub_V{1.data_type}V{2.data_type}_sat{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vsub{0.data_type}sat{0.width_suffix}\",\n+            \"ret\": \"u(8-16)\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vsub_W{1.data_type}W{2.data_type}{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vsub{0.data_type}.dv{0.widthd_suffix}\",\n+            \"ret\": \"s(8-32)d\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vsub_W{1.data_type}W{2.data_type}_sat{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vsub{0.data_type}sat.dv{0.widthd_suffix}\",\n+            \"ret\": \"s(16-32)d\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vsub_W{1.data_type}W{2.data_type}_sat{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vsub{0.data_type}sat.dv{0.widthd_suffix}\",\n+            \"ret\": \"u(8-16)d\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"W_vswap_QVV{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vswap{0.widthd_suffix}\",\n+            \"ret\": \"u8d\",\n+            \"args\": [\"u32hhh\", \"0h\", \"0h\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vtmpy_W{1.data_type}Rb{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vtmpyb{0.widthd_suffix}\",\n+            \"ret\": \"s16d\",\n+            \"args\": [\"0nd\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vtmpyacc_W{1.data_type}W{2.data_type}Rb{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vtmpyb.acc{0.widthd_suffix}\",\n+            \"ret\": \"s16d\",\n+            \"args\": [\"0\", \"0nd\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vtmpy_W{1.data_type}Rb{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vtmpybus{0.widthd_suffix}\",\n+            \"ret\": \"s16d\",\n+            \"args\": [\"u8d\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vtmpyacc_W{1.data_type}W{2.data_type}Rb{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vtmpybus.acc{0.widthd_suffix}\",\n+            \"ret\": \"s16d\",\n+            \"args\": [\"0\", \"u8d\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vtmpy_W{1.data_type}Rb{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vtmpyhb{0.widthd_suffix}\",\n+            \"ret\": \"s32d\",\n+            \"args\": [\"0nd\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vunpack_V{1.data_type}{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vunpack{1.data_type}{0.widthd_suffix}\",\n+            \"ret\": \"i(16-32)d\",\n+            \"args\": [\"0n\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vunpackoor_W{1.data_type}V{2.data_type}{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vunpacko{2.data_type}{0.widthd_suffix}\",\n+            \"ret\": \"s(16-32)d\",\n+            \"args\": [\"0\", \"0n\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vtmpyacc_W{1.data_type}W{2.data_type}Rb{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vtmpyhb.acc{0.widthd_suffix}\",\n+            \"ret\": \"s32d\",\n+            \"args\": [\"0\", \"0nd\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V_vxor_VV{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vxor{0.width_suffix}\",\n+            \"ret\": \"u16\",\n+            \"args\": [\"0\", \"0\"]\n+        }\n+    ]\n+}"}, {"sha": "4cdd6b9860996b8218a95fd9e2b33a33bd14a527", "filename": "src/etc/rust-windbg.cmd", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fetc%2Frust-windbg.cmd", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fetc%2Frust-windbg.cmd", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Frust-windbg.cmd?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -0,0 +1,18 @@\n+@echo off\n+setlocal\n+\n+REM Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+REM file at the top-level directory of this distribution and at\n+REM http://rust-lang.org/COPYRIGHT.\n+REM\n+REM Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+REM http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+REM <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+REM option. This file may not be copied, modified, or distributed\n+REM except according to those terms.\n+\n+for /f \"delims=\" %%i in ('rustc --print=sysroot') do set rustc_sysroot=%%i\n+\n+set rust_etc=%rustc_sysroot%\\lib\\rustlib\\etc\n+\n+windbg -c \".nvload %rust_etc%\\libcore.natvis;.nvload %rust_etc%\\libcollections.natvis;\" %*\n\\ No newline at end of file"}, {"sha": "3e4498759434f92723f6a9665fb1fa7bc6d9997c", "filename": "src/grammar/.gitignore", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fgrammar%2F.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fgrammar%2F.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2F.gitignore?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -1,4 +1,3 @@\n-verify\n *.class\n *.java\n *.tokens"}, {"sha": "83808108ff8325900f506e66c67677f8aeea960f", "filename": "src/grammar/README.md", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/158b085f06a41004ebf36d87afa3548f8b60861a/src%2Fgrammar%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/158b085f06a41004ebf36d87afa3548f8b60861a/src%2Fgrammar%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2FREADME.md?ref=158b085f06a41004ebf36d87afa3548f8b60861a", "patch": "@@ -1,33 +0,0 @@\n-# Reference grammar.\n-\n-Uses [antlr4](http://www.antlr.org/) and a custom Rust tool to compare\n-ASTs/token streams generated. You can use the `make check-lexer` target to\n-run all of the available tests.\n-\n-The build of the rust part is included with `make tidy` and can be run with `make check-build-lexer-verifier`.\n-\n-# Manual build\n-\n-To use manually, assuming antlr4 is installed at `/usr/share/java/antlr-complete.jar`:\n-\n-```\n-antlr4 RustLexer.g4\n-javac -classpath /usr/share/java/antlr-complete.jar *.java\n-rustc -O verify.rs\n-for file in ../*/**.rs; do\n-    echo $file;\n-    grun RustLexer tokens -tokens < \"$file\" | ./verify \"$file\" RustLexer.tokens || break\n-done\n-```\n-\n-Note that the `../*/**.rs` glob will match every `*.rs` file in the above\n-directory and all of its recursive children. This is a Zsh extension.\n-\n-\n-## Cleanup\n-\n-To cleanup you can use a command like this:\n-\n-```bash\n-rm -f verify *.class *.java *.tokens\n-```"}, {"sha": "a63fc59e50b07145a92b4a0ef9aac1d511dd8478", "filename": "src/grammar/RustLexer.g4", "status": "removed", "additions": 0, "deletions": 197, "changes": 197, "blob_url": "https://github.com/rust-lang/rust/blob/158b085f06a41004ebf36d87afa3548f8b60861a/src%2Fgrammar%2FRustLexer.g4", "raw_url": "https://github.com/rust-lang/rust/raw/158b085f06a41004ebf36d87afa3548f8b60861a/src%2Fgrammar%2FRustLexer.g4", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2FRustLexer.g4?ref=158b085f06a41004ebf36d87afa3548f8b60861a", "patch": "@@ -1,197 +0,0 @@\n-lexer grammar RustLexer;\n-\n-@lexer::members {\n-  public boolean is_at(int pos) {\n-    return _input.index() == pos;\n-  }\n-}\n-\n-\n-tokens {\n-    EQ, LT, LE, EQEQ, NE, GE, GT, ANDAND, OROR, NOT, TILDE, PLUS,\n-    MINUS, STAR, SLASH, PERCENT, CARET, AND, OR, SHL, SHR, BINOP,\n-    BINOPEQ, LARROW, AT, DOT, DOTDOT, DOTDOTDOT, COMMA, SEMI, COLON,\n-    MOD_SEP, RARROW, FAT_ARROW, LPAREN, RPAREN, LBRACKET, RBRACKET,\n-    LBRACE, RBRACE, POUND, DOLLAR, UNDERSCORE, LIT_CHAR, LIT_BYTE,\n-    LIT_INTEGER, LIT_FLOAT, LIT_STR, LIT_STR_RAW, LIT_BYTE_STR,\n-    LIT_BYTE_STR_RAW, QUESTION, IDENT, LIFETIME, WHITESPACE, DOC_COMMENT,\n-    COMMENT, SHEBANG, UTF8_BOM\n-}\n-\n-import xidstart , xidcontinue;\n-\n-\n-/* Expression-operator symbols */\n-\n-EQ      : '=' ;\n-LT      : '<' ;\n-LE      : '<=' ;\n-EQEQ    : '==' ;\n-NE      : '!=' ;\n-GE      : '>=' ;\n-GT      : '>' ;\n-ANDAND  : '&&' ;\n-OROR    : '||' ;\n-NOT     : '!' ;\n-TILDE   : '~' ;\n-PLUS    : '+' ;\n-MINUS   : '-' ;\n-STAR    : '*' ;\n-SLASH   : '/' ;\n-PERCENT : '%' ;\n-CARET   : '^' ;\n-AND     : '&' ;\n-OR      : '|' ;\n-SHL     : '<<' ;\n-SHR     : '>>' ;\n-LARROW  : '<-' ;\n-\n-BINOP\n-    : PLUS\n-    | SLASH\n-    | MINUS\n-    | STAR\n-    | PERCENT\n-    | CARET\n-    | AND\n-    | OR\n-    | SHL\n-    | SHR\n-    | LARROW\n-    ;\n-\n-BINOPEQ : BINOP EQ ;\n-\n-/* \"Structural symbols\" */\n-\n-AT         : '@' ;\n-DOT        : '.' ;\n-DOTDOT     : '..' ;\n-DOTDOTDOT  : '...' ;\n-COMMA      : ',' ;\n-SEMI       : ';' ;\n-COLON      : ':' ;\n-MOD_SEP    : '::' ;\n-RARROW     : '->' ;\n-FAT_ARROW  : '=>' ;\n-LPAREN     : '(' ;\n-RPAREN     : ')' ;\n-LBRACKET   : '[' ;\n-RBRACKET   : ']' ;\n-LBRACE     : '{' ;\n-RBRACE     : '}' ;\n-POUND      : '#';\n-DOLLAR     : '$' ;\n-UNDERSCORE : '_' ;\n-\n-// Literals\n-\n-fragment HEXIT\n-  : [0-9a-fA-F]\n-  ;\n-\n-fragment CHAR_ESCAPE\n-  : [nrt\\\\'\"0]\n-  | [xX] HEXIT HEXIT\n-  | 'u' HEXIT HEXIT HEXIT HEXIT\n-  | 'U' HEXIT HEXIT HEXIT HEXIT HEXIT HEXIT HEXIT HEXIT\n-  | 'u{' HEXIT '}'\n-  | 'u{' HEXIT HEXIT '}'\n-  | 'u{' HEXIT HEXIT HEXIT '}'\n-  | 'u{' HEXIT HEXIT HEXIT HEXIT '}'\n-  | 'u{' HEXIT HEXIT HEXIT HEXIT HEXIT '}'\n-  | 'u{' HEXIT HEXIT HEXIT HEXIT HEXIT HEXIT '}'\n-  ;\n-\n-fragment SUFFIX\n-  : IDENT\n-  ;\n-\n-fragment INTEGER_SUFFIX\n-  : { _input.LA(1) != 'e' && _input.LA(1) != 'E' }? SUFFIX\n-  ;\n-\n-LIT_CHAR\n-  : '\\'' ( '\\\\' CHAR_ESCAPE\n-         | ~[\\\\'\\n\\t\\r]\n-         | '\\ud800' .. '\\udbff' '\\udc00' .. '\\udfff'\n-         )\n-    '\\'' SUFFIX?\n-  ;\n-\n-LIT_BYTE\n-  : 'b\\'' ( '\\\\' ( [xX] HEXIT HEXIT\n-                 | [nrt\\\\'\"0] )\n-          | ~[\\\\'\\n\\t\\r] '\\udc00'..'\\udfff'?\n-          )\n-    '\\'' SUFFIX?\n-  ;\n-\n-LIT_INTEGER\n-\n-  : [0-9][0-9_]* INTEGER_SUFFIX?\n-  | '0b' [01_]+ INTEGER_SUFFIX?\n-  | '0o' [0-7_]+ INTEGER_SUFFIX?\n-  | '0x' [0-9a-fA-F_]+ INTEGER_SUFFIX?\n-  ;\n-\n-LIT_FLOAT\n-  : [0-9][0-9_]* ('.' {\n-        /* dot followed by another dot is a range, not a float */\n-        _input.LA(1) != '.' &&\n-        /* dot followed by an identifier is an integer with a function call, not a float */\n-        _input.LA(1) != '_' &&\n-        !(_input.LA(1) >= 'a' && _input.LA(1) <= 'z') &&\n-        !(_input.LA(1) >= 'A' && _input.LA(1) <= 'Z')\n-  }? | ('.' [0-9][0-9_]*)? ([eE] [-+]? [0-9][0-9_]*)? SUFFIX?)\n-  ;\n-\n-LIT_STR\n-  : '\"' ('\\\\\\n' | '\\\\\\r\\n' | '\\\\' CHAR_ESCAPE | .)*? '\"' SUFFIX?\n-  ;\n-\n-LIT_BYTE_STR : 'b' LIT_STR ;\n-LIT_BYTE_STR_RAW : 'b' LIT_STR_RAW ;\n-\n-/* this is a bit messy */\n-\n-fragment LIT_STR_RAW_INNER\n-  : '\"' .*? '\"'\n-  | LIT_STR_RAW_INNER2\n-  ;\n-\n-fragment LIT_STR_RAW_INNER2\n-  : POUND LIT_STR_RAW_INNER POUND\n-  ;\n-\n-LIT_STR_RAW\n-  : 'r' LIT_STR_RAW_INNER SUFFIX?\n-  ;\n-\n-\n-QUESTION : '?';\n-\n-IDENT : XID_Start XID_Continue* ;\n-\n-fragment QUESTION_IDENTIFIER : QUESTION? IDENT;\n-\n-LIFETIME : '\\'' IDENT ;\n-\n-WHITESPACE : [ \\r\\n\\t]+ ;\n-\n-UNDOC_COMMENT     : '////' ~[\\n]* -> type(COMMENT) ;\n-YESDOC_COMMENT    : '///' ~[\\r\\n]* -> type(DOC_COMMENT) ;\n-OUTER_DOC_COMMENT : '//!' ~[\\r\\n]* -> type(DOC_COMMENT) ;\n-LINE_COMMENT      : '//' ( ~[/\\n] ~[\\n]* )? -> type(COMMENT) ;\n-\n-DOC_BLOCK_COMMENT\n-  : ('/**' ~[*] | '/*!') (DOC_BLOCK_COMMENT | .)*? '*/' -> type(DOC_COMMENT)\n-  ;\n-\n-BLOCK_COMMENT : '/*' (BLOCK_COMMENT | .)*? '*/' -> type(COMMENT) ;\n-\n-/* these appear at the beginning of a file */\n-\n-SHEBANG : '#!' { is_at(2) && _input.LA(1) != '[' }? ~[\\r\\n]* -> type(SHEBANG) ;\n-\n-UTF8_BOM : '\\ufeff' { is_at(1) }? -> skip ;"}, {"sha": "70a8f6fca2e5c68c8fe6e043a2f76e4658e19b93", "filename": "src/grammar/check.sh", "status": "removed", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/158b085f06a41004ebf36d87afa3548f8b60861a/src%2Fgrammar%2Fcheck.sh", "raw_url": "https://github.com/rust-lang/rust/raw/158b085f06a41004ebf36d87afa3548f8b60861a/src%2Fgrammar%2Fcheck.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fcheck.sh?ref=158b085f06a41004ebf36d87afa3548f8b60861a", "patch": "@@ -1,52 +0,0 @@\n-#!/bin/sh\n-\n-# ignore-license\n-\n-# Run the reference lexer against libsyntax and compare the tokens and spans.\n-# If \"// ignore-lexer-test\" is present in the file, it will be ignored.\n-\n-\n-# Argument $1 is the file to check, $2 is the classpath to use, $3 is the path\n-# to the grun binary, $4 is the path to the verify binary, $5 is the path to\n-# RustLexer.tokens\n-if [ \"${VERBOSE}\" == \"1\" ]; then\n-    set -x\n-fi\n-\n-passed=0\n-failed=0\n-skipped=0\n-\n-check() {\n-    grep --silent \"// ignore-lexer-test\" \"$1\";\n-\n-    # if it is *not* found...\n-    if [ $? -eq 1 ]; then\n-        cd $2 # This `cd` is so java will pick up RustLexer.class. I could not\n-        # figure out how to wrangle the CLASSPATH, just adding build/grammar\n-        # did not seem to have any effect.\n-        if $3 RustLexer tokens -tokens < $1 | $4 $1 $5; then\n-            echo \"pass: $1\"\n-            passed=`expr $passed + 1`\n-        else\n-            echo \"fail: $1\"\n-            failed=`expr $failed + 1`\n-        fi\n-    else\n-        echo \"skip: $1\"\n-        skipped=`expr $skipped + 1`\n-    fi\n-}\n-\n-for file in $(find $1 -iname '*.rs' ! -path '*/test/compile-fail*'); do\n-    check \"$file\" $2 $3 $4 $5\n-done\n-\n-printf \"\\ntest result: \"\n-\n-if [ $failed -eq 0 ]; then\n-    printf \"ok. $passed passed; $failed failed; $skipped skipped\\n\\n\"\n-else\n-    printf \"failed. $passed passed; $failed failed; $skipped skipped\\n\\n\"\n-    exit 1\n-fi"}, {"sha": "c9fcdf7647b9cfa79e42164ca858d728a7685dd7", "filename": "src/grammar/parser-lalr.y", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fgrammar%2Fparser-lalr.y", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fgrammar%2Fparser-lalr.y", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fparser-lalr.y?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -89,6 +89,7 @@ extern char *yytext;\n %token TRAIT\n %token TYPE\n %token UNSAFE\n+%token DEFAULT\n %token USE\n %token WHILE\n %token CONTINUE\n@@ -534,6 +535,12 @@ maybe_unsafe\n | %empty { $$ = mk_none(); }\n ;\n \n+maybe_default_maybe_unsafe\n+: DEFAULT UNSAFE { $$ = mk_atom(\"DefaultUnsafe\"); }\n+| DEFAULT        { $$ = mk_atom(\"Default\"); }\n+|         UNSAFE { $$ = mk_atom(\"Unsafe\"); }\n+| %empty { $$ = mk_none(); }\n+\n trait_method\n : type_method { $$ = mk_node(\"Required\", 1, $1); }\n | method      { $$ = mk_node(\"Provided\", 1, $1); }\n@@ -588,27 +595,27 @@ impl_method\n // they are ambiguous with traits. We do the same here, regrettably,\n // by splitting ty into ty and ty_prim.\n item_impl\n-: maybe_unsafe IMPL generic_params ty_prim_sum maybe_where_clause '{' maybe_inner_attrs maybe_impl_items '}'\n+: maybe_default_maybe_unsafe IMPL generic_params ty_prim_sum maybe_where_clause '{' maybe_inner_attrs maybe_impl_items '}'\n {\n   $$ = mk_node(\"ItemImpl\", 6, $1, $3, $4, $5, $7, $8);\n }\n-| maybe_unsafe IMPL generic_params '(' ty ')' maybe_where_clause '{' maybe_inner_attrs maybe_impl_items '}'\n+| maybe_default_maybe_unsafe IMPL generic_params '(' ty ')' maybe_where_clause '{' maybe_inner_attrs maybe_impl_items '}'\n {\n   $$ = mk_node(\"ItemImpl\", 6, $1, $3, 5, $6, $9, $10);\n }\n-| maybe_unsafe IMPL generic_params trait_ref FOR ty_sum maybe_where_clause '{' maybe_inner_attrs maybe_impl_items '}'\n+| maybe_default_maybe_unsafe IMPL generic_params trait_ref FOR ty_sum maybe_where_clause '{' maybe_inner_attrs maybe_impl_items '}'\n {\n   $$ = mk_node(\"ItemImpl\", 6, $3, $4, $6, $7, $9, $10);\n }\n-| maybe_unsafe IMPL generic_params '!' trait_ref FOR ty_sum maybe_where_clause '{' maybe_inner_attrs maybe_impl_items '}'\n+| maybe_default_maybe_unsafe IMPL generic_params '!' trait_ref FOR ty_sum maybe_where_clause '{' maybe_inner_attrs maybe_impl_items '}'\n {\n   $$ = mk_node(\"ItemImplNeg\", 7, $1, $3, $5, $7, $8, $10, $11);\n }\n-| maybe_unsafe IMPL generic_params trait_ref FOR DOTDOT '{' '}'\n+| maybe_default_maybe_unsafe IMPL generic_params trait_ref FOR DOTDOT '{' '}'\n {\n   $$ = mk_node(\"ItemImplDefault\", 3, $1, $3, $4);\n }\n-| maybe_unsafe IMPL generic_params '!' trait_ref FOR DOTDOT '{' '}'\n+| maybe_default_maybe_unsafe IMPL generic_params '!' trait_ref FOR DOTDOT '{' '}'\n {\n   $$ = mk_node(\"ItemImplDefaultNeg\", 3, $1, $3, $4);\n }\n@@ -1935,4 +1942,4 @@ brackets_delimited_token_trees\n                $2,\n                mk_node(\"TTTok\", 1, mk_atom(\"]\")));\n }\n-;\n+;\n\\ No newline at end of file"}, {"sha": "bd28a63c5f4dfb947edce379ac569c3c1af43519", "filename": "src/grammar/verify.rs", "status": "removed", "additions": 0, "deletions": 361, "changes": 361, "blob_url": "https://github.com/rust-lang/rust/blob/158b085f06a41004ebf36d87afa3548f8b60861a/src%2Fgrammar%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/158b085f06a41004ebf36d87afa3548f8b60861a/src%2Fgrammar%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fverify.rs?ref=158b085f06a41004ebf36d87afa3548f8b60861a", "patch": "@@ -1,361 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(plugin, rustc_private)]\n-\n-extern crate syntax;\n-extern crate syntax_pos;\n-extern crate rustc;\n-\n-#[macro_use]\n-extern crate log;\n-\n-use std::collections::HashMap;\n-use std::env;\n-use std::fs::File;\n-use std::io::{BufRead, Read};\n-use std::path::Path;\n-\n-use syntax::parse::lexer;\n-use rustc::dep_graph::DepGraph;\n-use rustc::session::{self, config};\n-use rustc::middle::cstore::DummyCrateStore;\n-\n-use std::rc::Rc;\n-use syntax::ast;\n-use syntax::codemap;\n-use syntax::parse::token::{self, BinOpToken, DelimToken, Lit, Token};\n-use syntax::parse::lexer::TokenAndSpan;\n-use syntax_pos::Pos;\n-\n-use syntax::symbol::{Symbol, keywords};\n-\n-fn parse_token_list(file: &str) -> HashMap<String, token::Token> {\n-    fn id() -> token::Token {\n-        Token::Ident(ast::Ident::with_empty_ctxt(keywords::Invalid.name()))\n-    }\n-\n-    let mut res = HashMap::new();\n-\n-    res.insert(\"-1\".to_string(), Token::Eof);\n-\n-    for line in file.split('\\n') {\n-        let eq = match line.trim().rfind('=') {\n-            Some(val) => val,\n-            None => continue\n-        };\n-\n-        let val = &line[..eq];\n-        let num = &line[eq + 1..];\n-\n-        let tok = match val {\n-            \"SHR\"               => Token::BinOp(BinOpToken::Shr),\n-            \"DOLLAR\"            => Token::Dollar,\n-            \"LT\"                => Token::Lt,\n-            \"STAR\"              => Token::BinOp(BinOpToken::Star),\n-            \"FLOAT_SUFFIX\"      => id(),\n-            \"INT_SUFFIX\"        => id(),\n-            \"SHL\"               => Token::BinOp(BinOpToken::Shl),\n-            \"LBRACE\"            => Token::OpenDelim(DelimToken::Brace),\n-            \"RARROW\"            => Token::RArrow,\n-            \"LIT_STR\"           => Token::Literal(Lit::Str_(keywords::Invalid.name()), None),\n-            \"DOTDOT\"            => Token::DotDot,\n-            \"MOD_SEP\"           => Token::ModSep,\n-            \"DOTDOTDOT\"         => Token::DotDotDot,\n-            \"NOT\"               => Token::Not,\n-            \"AND\"               => Token::BinOp(BinOpToken::And),\n-            \"LPAREN\"            => Token::OpenDelim(DelimToken::Paren),\n-            \"ANDAND\"            => Token::AndAnd,\n-            \"AT\"                => Token::At,\n-            \"LBRACKET\"          => Token::OpenDelim(DelimToken::Bracket),\n-            \"LIT_STR_RAW\"       => Token::Literal(Lit::StrRaw(keywords::Invalid.name(), 0), None),\n-            \"RPAREN\"            => Token::CloseDelim(DelimToken::Paren),\n-            \"SLASH\"             => Token::BinOp(BinOpToken::Slash),\n-            \"COMMA\"             => Token::Comma,\n-            \"LIFETIME\"          => Token::Lifetime(\n-                                            ast::Ident::with_empty_ctxt(keywords::Invalid.name())),\n-            \"CARET\"             => Token::BinOp(BinOpToken::Caret),\n-            \"TILDE\"             => Token::Tilde,\n-            \"IDENT\"             => id(),\n-            \"PLUS\"              => Token::BinOp(BinOpToken::Plus),\n-            \"LIT_CHAR\"          => Token::Literal(Lit::Char(keywords::Invalid.name()), None),\n-            \"LIT_BYTE\"          => Token::Literal(Lit::Byte(keywords::Invalid.name()), None),\n-            \"EQ\"                => Token::Eq,\n-            \"RBRACKET\"          => Token::CloseDelim(DelimToken::Bracket),\n-            \"COMMENT\"           => Token::Comment,\n-            \"DOC_COMMENT\"       => Token::DocComment(keywords::Invalid.name()),\n-            \"DOT\"               => Token::Dot,\n-            \"EQEQ\"              => Token::EqEq,\n-            \"NE\"                => Token::Ne,\n-            \"GE\"                => Token::Ge,\n-            \"PERCENT\"           => Token::BinOp(BinOpToken::Percent),\n-            \"RBRACE\"            => Token::CloseDelim(DelimToken::Brace),\n-            \"BINOP\"             => Token::BinOp(BinOpToken::Plus),\n-            \"POUND\"             => Token::Pound,\n-            \"OROR\"              => Token::OrOr,\n-            \"LIT_INTEGER\"       => Token::Literal(Lit::Integer(keywords::Invalid.name()), None),\n-            \"BINOPEQ\"           => Token::BinOpEq(BinOpToken::Plus),\n-            \"LIT_FLOAT\"         => Token::Literal(Lit::Float(keywords::Invalid.name()), None),\n-            \"WHITESPACE\"        => Token::Whitespace,\n-            \"UNDERSCORE\"        => Token::Underscore,\n-            \"MINUS\"             => Token::BinOp(BinOpToken::Minus),\n-            \"SEMI\"              => Token::Semi,\n-            \"COLON\"             => Token::Colon,\n-            \"FAT_ARROW\"         => Token::FatArrow,\n-            \"OR\"                => Token::BinOp(BinOpToken::Or),\n-            \"GT\"                => Token::Gt,\n-            \"LE\"                => Token::Le,\n-            \"LIT_BINARY\"        => Token::Literal(Lit::ByteStr(keywords::Invalid.name()), None),\n-            \"LIT_BINARY_RAW\"    => Token::Literal(\n-                                            Lit::ByteStrRaw(keywords::Invalid.name(), 0), None),\n-            \"QUESTION\"          => Token::Question,\n-            \"SHEBANG\"           => Token::Shebang(keywords::Invalid.name()),\n-            _                   => continue,\n-        };\n-\n-        res.insert(num.to_string(), tok);\n-    }\n-\n-    debug!(\"Token map: {:?}\", res);\n-    res\n-}\n-\n-fn str_to_binop(s: &str) -> token::BinOpToken {\n-    match s {\n-        \"+\"     => BinOpToken::Plus,\n-        \"/\"     => BinOpToken::Slash,\n-        \"-\"     => BinOpToken::Minus,\n-        \"*\"     => BinOpToken::Star,\n-        \"%\"     => BinOpToken::Percent,\n-        \"^\"     => BinOpToken::Caret,\n-        \"&\"     => BinOpToken::And,\n-        \"|\"     => BinOpToken::Or,\n-        \"<<\"    => BinOpToken::Shl,\n-        \">>\"    => BinOpToken::Shr,\n-        _       => panic!(\"Bad binop str `{}`\", s),\n-    }\n-}\n-\n-/// Assuming a string/byte string literal, strip out the leading/trailing\n-/// hashes and surrounding quotes/raw/byte prefix.\n-fn fix(mut lit: &str) -> ast::Name {\n-    let prefix: Vec<char> = lit.chars().take(2).collect();\n-    if prefix[0] == 'r' {\n-        if prefix[1] == 'b' {\n-            lit = &lit[2..]\n-        } else {\n-            lit = &lit[1..];\n-        }\n-    } else if prefix[0] == 'b' {\n-        lit = &lit[1..];\n-    }\n-\n-    let leading_hashes = count(lit);\n-\n-    // +1/-1 to adjust for single quotes\n-    Symbol::intern(&lit[leading_hashes + 1..lit.len() - leading_hashes - 1])\n-}\n-\n-/// Assuming a char/byte literal, strip the 'b' prefix and the single quotes.\n-fn fixchar(mut lit: &str) -> ast::Name {\n-    let prefix = lit.chars().next().unwrap();\n-    if prefix == 'b' {\n-        lit = &lit[1..];\n-    }\n-\n-    Symbol::intern(&lit[1..lit.len() - 1])\n-}\n-\n-fn count(lit: &str) -> usize {\n-    lit.chars().take_while(|c| *c == '#').count()\n-}\n-\n-fn parse_antlr_token(s: &str, tokens: &HashMap<String, token::Token>, surrogate_pairs_pos: &[usize],\n-                     has_bom: bool)\n-                     -> TokenAndSpan {\n-    // old regex:\n-    // \\[@(?P<seq>\\d+),(?P<start>\\d+):(?P<end>\\d+)='(?P<content>.+?)',<(?P<toknum>-?\\d+)>,\\d+:\\d+]\n-    let start = s.find(\"[@\").unwrap();\n-    let comma = start + s[start..].find(\",\").unwrap();\n-    let colon = comma + s[comma..].find(\":\").unwrap();\n-    let content_start = colon + s[colon..].find(\"='\").unwrap();\n-    // Use rfind instead of find, because we don't want to stop at the content\n-    let content_end = content_start + s[content_start..].rfind(\"',<\").unwrap();\n-    let toknum_end = content_end + s[content_end..].find(\">,\").unwrap();\n-\n-    let start = &s[comma + 1 .. colon];\n-    let end = &s[colon + 1 .. content_start];\n-    let content = &s[content_start + 2 .. content_end];\n-    let toknum = &s[content_end + 3 .. toknum_end];\n-\n-    let not_found = format!(\"didn't find token {:?} in the map\", toknum);\n-    let proto_tok = tokens.get(toknum).expect(&not_found);\n-\n-    let nm = Symbol::intern(content);\n-\n-    debug!(\"What we got: content (`{}`), proto: {:?}\", content, proto_tok);\n-\n-    let real_tok = match *proto_tok {\n-        Token::BinOp(..)           => Token::BinOp(str_to_binop(content)),\n-        Token::BinOpEq(..)         => Token::BinOpEq(str_to_binop(&content[..content.len() - 1])),\n-        Token::Literal(Lit::Str_(..), n)      => Token::Literal(Lit::Str_(fix(content)), n),\n-        Token::Literal(Lit::StrRaw(..), n)    => Token::Literal(Lit::StrRaw(fix(content),\n-                                                                             count(content)), n),\n-        Token::Literal(Lit::Char(..), n)      => Token::Literal(Lit::Char(fixchar(content)), n),\n-        Token::Literal(Lit::Byte(..), n)      => Token::Literal(Lit::Byte(fixchar(content)), n),\n-        Token::DocComment(..)      => Token::DocComment(nm),\n-        Token::Literal(Lit::Integer(..), n)   => Token::Literal(Lit::Integer(nm), n),\n-        Token::Literal(Lit::Float(..), n)     => Token::Literal(Lit::Float(nm), n),\n-        Token::Literal(Lit::ByteStr(..), n)    => Token::Literal(Lit::ByteStr(nm), n),\n-        Token::Literal(Lit::ByteStrRaw(..), n) => Token::Literal(Lit::ByteStrRaw(fix(content),\n-                                                                                count(content)), n),\n-        Token::Ident(..)           => Token::Ident(ast::Ident::with_empty_ctxt(nm)),\n-        Token::Lifetime(..)        => Token::Lifetime(ast::Ident::with_empty_ctxt(nm)),\n-        ref t => t.clone()\n-    };\n-\n-    let start_offset = if real_tok == Token::Eof {\n-        1\n-    } else {\n-        0\n-    };\n-\n-    let offset = if has_bom { 1 } else { 0 };\n-\n-    let mut lo = start.parse::<u32>().unwrap() - start_offset - offset;\n-    let mut hi = end.parse::<u32>().unwrap() + 1 - offset;\n-\n-    // Adjust the span: For each surrogate pair already encountered, subtract one position.\n-    lo -= surrogate_pairs_pos.binary_search(&(lo as usize)).unwrap_or_else(|x| x) as u32;\n-    hi -= surrogate_pairs_pos.binary_search(&(hi as usize)).unwrap_or_else(|x| x) as u32;\n-\n-    let sp = syntax_pos::Span {\n-        lo: syntax_pos::BytePos(lo),\n-        hi: syntax_pos::BytePos(hi),\n-        expn_id: syntax_pos::NO_EXPANSION\n-    };\n-\n-    TokenAndSpan {\n-        tok: real_tok,\n-        sp: sp\n-    }\n-}\n-\n-fn tok_cmp(a: &token::Token, b: &token::Token) -> bool {\n-    match a {\n-        &Token::Ident(id) => match b {\n-                &Token::Ident(id2) => id == id2,\n-                _ => false\n-        },\n-        _ => a == b\n-    }\n-}\n-\n-fn span_cmp(antlr_sp: codemap::Span, rust_sp: codemap::Span, cm: &codemap::CodeMap) -> bool {\n-    antlr_sp.expn_id == rust_sp.expn_id &&\n-        antlr_sp.lo.to_usize() == cm.bytepos_to_file_charpos(rust_sp.lo).to_usize() &&\n-        antlr_sp.hi.to_usize() == cm.bytepos_to_file_charpos(rust_sp.hi).to_usize()\n-}\n-\n-fn main() {\n-    fn next(r: &mut lexer::StringReader) -> TokenAndSpan {\n-        use syntax::parse::lexer::Reader;\n-        r.next_token()\n-    }\n-\n-    let mut args = env::args().skip(1);\n-    let filename = args.next().unwrap();\n-    if filename.find(\"parse-fail\").is_some() {\n-        return;\n-    }\n-\n-    // Rust's lexer\n-    let mut code = String::new();\n-    File::open(&Path::new(&filename)).unwrap().read_to_string(&mut code).unwrap();\n-\n-    let surrogate_pairs_pos: Vec<usize> = code.chars().enumerate()\n-                                                     .filter(|&(_, c)| c as usize > 0xFFFF)\n-                                                     .map(|(n, _)| n)\n-                                                     .enumerate()\n-                                                     .map(|(x, n)| x + n)\n-                                                     .collect();\n-\n-    let has_bom = code.starts_with(\"\\u{feff}\");\n-\n-    debug!(\"Pairs: {:?}\", surrogate_pairs_pos);\n-\n-    let options = config::basic_options();\n-    let session = session::build_session(options, &DepGraph::new(false), None,\n-                                         syntax::errors::registry::Registry::new(&[]),\n-                                         Rc::new(DummyCrateStore));\n-    let filemap = session.parse_sess.codemap()\n-                         .new_filemap(\"<n/a>\".to_string(), None, code);\n-    let mut lexer = lexer::StringReader::new(session.diagnostic(), filemap);\n-    let cm = session.codemap();\n-\n-    // ANTLR\n-    let mut token_file = File::open(&Path::new(&args.next().unwrap())).unwrap();\n-    let mut token_list = String::new();\n-    token_file.read_to_string(&mut token_list).unwrap();\n-    let token_map = parse_token_list(&token_list);\n-\n-    let stdin = std::io::stdin();\n-    let lock = stdin.lock();\n-    let lines = lock.lines();\n-    let antlr_tokens = lines.map(|l| parse_antlr_token(l.unwrap().trim(),\n-                                                       &token_map,\n-                                                       &surrogate_pairs_pos,\n-                                                       has_bom));\n-\n-    for antlr_tok in antlr_tokens {\n-        let rustc_tok = next(&mut lexer);\n-        if rustc_tok.tok == Token::Eof && antlr_tok.tok == Token::Eof {\n-            continue\n-        }\n-\n-        assert!(span_cmp(antlr_tok.sp, rustc_tok.sp, cm), \"{:?} and {:?} have different spans\",\n-                rustc_tok,\n-                antlr_tok);\n-\n-        macro_rules! matches {\n-            ( $($x:pat),+ ) => (\n-                match rustc_tok.tok {\n-                    $($x => match antlr_tok.tok {\n-                        $x => {\n-                            if !tok_cmp(&rustc_tok.tok, &antlr_tok.tok) {\n-                                // FIXME #15677: needs more robust escaping in\n-                                // antlr\n-                                warn!(\"Different names for {:?} and {:?}\", rustc_tok, antlr_tok);\n-                            }\n-                        }\n-                        _ => panic!(\"{:?} is not {:?}\", antlr_tok, rustc_tok)\n-                    },)*\n-                    ref c => assert!(c == &antlr_tok.tok, \"{:?} is not {:?}\", antlr_tok, rustc_tok)\n-                }\n-            )\n-        }\n-\n-        matches!(\n-            Token::Literal(Lit::Byte(..), _),\n-            Token::Literal(Lit::Char(..), _),\n-            Token::Literal(Lit::Integer(..), _),\n-            Token::Literal(Lit::Float(..), _),\n-            Token::Literal(Lit::Str_(..), _),\n-            Token::Literal(Lit::StrRaw(..), _),\n-            Token::Literal(Lit::ByteStr(..), _),\n-            Token::Literal(Lit::ByteStrRaw(..), _),\n-            Token::Ident(..),\n-            Token::Lifetime(..),\n-            Token::Interpolated(..),\n-            Token::DocComment(..),\n-            Token::Shebang(..)\n-        );\n-    }\n-}"}, {"sha": "f3a1a3b40f99a382f17d8246b0f03c96eb7f49c3", "filename": "src/grammar/xidcontinue.g4", "status": "removed", "additions": 0, "deletions": 473, "changes": 473, "blob_url": "https://github.com/rust-lang/rust/blob/158b085f06a41004ebf36d87afa3548f8b60861a/src%2Fgrammar%2Fxidcontinue.g4", "raw_url": "https://github.com/rust-lang/rust/raw/158b085f06a41004ebf36d87afa3548f8b60861a/src%2Fgrammar%2Fxidcontinue.g4", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fxidcontinue.g4?ref=158b085f06a41004ebf36d87afa3548f8b60861a", "patch": "@@ -1,473 +0,0 @@\n-lexer grammar Xidcontinue;\n-\n-fragment XID_Continue:\n-      '\\u0030' .. '\\u0039'\n-    | '\\u0041' .. '\\u005a'\n-    | '\\u005f'\n-    | '\\u0061' .. '\\u007a'\n-    | '\\u00aa'\n-    | '\\u00b5'\n-    | '\\u00b7'\n-    | '\\u00ba'\n-    | '\\u00c0' .. '\\u00d6'\n-    | '\\u00d8' .. '\\u00f6'\n-    | '\\u00f8' .. '\\u0236'\n-    | '\\u0250' .. '\\u02c1'\n-    | '\\u02c6' .. '\\u02d1'\n-    | '\\u02e0' .. '\\u02e4'\n-    | '\\u02ee'\n-    | '\\u0300' .. '\\u0357'\n-    | '\\u035d' .. '\\u036f'\n-    | '\\u0386'\n-    | '\\u0388' .. '\\u038a'\n-    | '\\u038c'\n-    | '\\u038e' .. '\\u03a1'\n-    | '\\u03a3' .. '\\u03ce'\n-    | '\\u03d0' .. '\\u03f5'\n-    | '\\u03f7' .. '\\u03fb'\n-    | '\\u0400' .. '\\u0481'\n-    | '\\u0483' .. '\\u0486'\n-    | '\\u048a' .. '\\u04ce'\n-    | '\\u04d0' .. '\\u04f5'\n-    | '\\u04f8' .. '\\u04f9'\n-    | '\\u0500' .. '\\u050f'\n-    | '\\u0531' .. '\\u0556'\n-    | '\\u0559'\n-    | '\\u0561' .. '\\u0587'\n-    | '\\u0591' .. '\\u05a1'\n-    | '\\u05a3' .. '\\u05b9'\n-    | '\\u05bb' .. '\\u05bd'\n-    | '\\u05bf'\n-    | '\\u05c1' .. '\\u05c2'\n-    | '\\u05c4'\n-    | '\\u05d0' .. '\\u05ea'\n-    | '\\u05f0' .. '\\u05f2'\n-    | '\\u0610' .. '\\u0615'\n-    | '\\u0621' .. '\\u063a'\n-    | '\\u0640' .. '\\u0658'\n-    | '\\u0660' .. '\\u0669'\n-    | '\\u066e' .. '\\u06d3'\n-    | '\\u06d5' .. '\\u06dc'\n-    | '\\u06df' .. '\\u06e8'\n-    | '\\u06ea' .. '\\u06fc'\n-    | '\\u06ff'\n-    | '\\u0710' .. '\\u074a'\n-    | '\\u074d' .. '\\u074f'\n-    | '\\u0780' .. '\\u07b1'\n-    | '\\u0901' .. '\\u0939'\n-    | '\\u093c' .. '\\u094d'\n-    | '\\u0950' .. '\\u0954'\n-    | '\\u0958' .. '\\u0963'\n-    | '\\u0966' .. '\\u096f'\n-    | '\\u0981' .. '\\u0983'\n-    | '\\u0985' .. '\\u098c'\n-    | '\\u098f' .. '\\u0990'\n-    | '\\u0993' .. '\\u09a8'\n-    | '\\u09aa' .. '\\u09b0'\n-    | '\\u09b2'\n-    | '\\u09b6' .. '\\u09b9'\n-    | '\\u09bc' .. '\\u09c4'\n-    | '\\u09c7' .. '\\u09c8'\n-    | '\\u09cb' .. '\\u09cd'\n-    | '\\u09d7'\n-    | '\\u09dc' .. '\\u09dd'\n-    | '\\u09df' .. '\\u09e3'\n-    | '\\u09e6' .. '\\u09f1'\n-    | '\\u0a01' .. '\\u0a03'\n-    | '\\u0a05' .. '\\u0a0a'\n-    | '\\u0a0f' .. '\\u0a10'\n-    | '\\u0a13' .. '\\u0a28'\n-    | '\\u0a2a' .. '\\u0a30'\n-    | '\\u0a32' .. '\\u0a33'\n-    | '\\u0a35' .. '\\u0a36'\n-    | '\\u0a38' .. '\\u0a39'\n-    | '\\u0a3c'\n-    | '\\u0a3e' .. '\\u0a42'\n-    | '\\u0a47' .. '\\u0a48'\n-    | '\\u0a4b' .. '\\u0a4d'\n-    | '\\u0a59' .. '\\u0a5c'\n-    | '\\u0a5e'\n-    | '\\u0a66' .. '\\u0a74'\n-    | '\\u0a81' .. '\\u0a83'\n-    | '\\u0a85' .. '\\u0a8d'\n-    | '\\u0a8f' .. '\\u0a91'\n-    | '\\u0a93' .. '\\u0aa8'\n-    | '\\u0aaa' .. '\\u0ab0'\n-    | '\\u0ab2' .. '\\u0ab3'\n-    | '\\u0ab5' .. '\\u0ab9'\n-    | '\\u0abc' .. '\\u0ac5'\n-    | '\\u0ac7' .. '\\u0ac9'\n-    | '\\u0acb' .. '\\u0acd'\n-    | '\\u0ad0'\n-    | '\\u0ae0' .. '\\u0ae3'\n-    | '\\u0ae6' .. '\\u0aef'\n-    | '\\u0b01' .. '\\u0b03'\n-    | '\\u0b05' .. '\\u0b0c'\n-    | '\\u0b0f' .. '\\u0b10'\n-    | '\\u0b13' .. '\\u0b28'\n-    | '\\u0b2a' .. '\\u0b30'\n-    | '\\u0b32' .. '\\u0b33'\n-    | '\\u0b35' .. '\\u0b39'\n-    | '\\u0b3c' .. '\\u0b43'\n-    | '\\u0b47' .. '\\u0b48'\n-    | '\\u0b4b' .. '\\u0b4d'\n-    | '\\u0b56' .. '\\u0b57'\n-    | '\\u0b5c' .. '\\u0b5d'\n-    | '\\u0b5f' .. '\\u0b61'\n-    | '\\u0b66' .. '\\u0b6f'\n-    | '\\u0b71'\n-    | '\\u0b82' .. '\\u0b83'\n-    | '\\u0b85' .. '\\u0b8a'\n-    | '\\u0b8e' .. '\\u0b90'\n-    | '\\u0b92' .. '\\u0b95'\n-    | '\\u0b99' .. '\\u0b9a'\n-    | '\\u0b9c'\n-    | '\\u0b9e' .. '\\u0b9f'\n-    | '\\u0ba3' .. '\\u0ba4'\n-    | '\\u0ba8' .. '\\u0baa'\n-    | '\\u0bae' .. '\\u0bb5'\n-    | '\\u0bb7' .. '\\u0bb9'\n-    | '\\u0bbe' .. '\\u0bc2'\n-    | '\\u0bc6' .. '\\u0bc8'\n-    | '\\u0bca' .. '\\u0bcd'\n-    | '\\u0bd7'\n-    | '\\u0be7' .. '\\u0bef'\n-    | '\\u0c01' .. '\\u0c03'\n-    | '\\u0c05' .. '\\u0c0c'\n-    | '\\u0c0e' .. '\\u0c10'\n-    | '\\u0c12' .. '\\u0c28'\n-    | '\\u0c2a' .. '\\u0c33'\n-    | '\\u0c35' .. '\\u0c39'\n-    | '\\u0c3e' .. '\\u0c44'\n-    | '\\u0c46' .. '\\u0c48'\n-    | '\\u0c4a' .. '\\u0c4d'\n-    | '\\u0c55' .. '\\u0c56'\n-    | '\\u0c60' .. '\\u0c61'\n-    | '\\u0c66' .. '\\u0c6f'\n-    | '\\u0c82' .. '\\u0c83'\n-    | '\\u0c85' .. '\\u0c8c'\n-    | '\\u0c8e' .. '\\u0c90'\n-    | '\\u0c92' .. '\\u0ca8'\n-    | '\\u0caa' .. '\\u0cb3'\n-    | '\\u0cb5' .. '\\u0cb9'\n-    | '\\u0cbc' .. '\\u0cc4'\n-    | '\\u0cc6' .. '\\u0cc8'\n-    | '\\u0cca' .. '\\u0ccd'\n-    | '\\u0cd5' .. '\\u0cd6'\n-    | '\\u0cde'\n-    | '\\u0ce0' .. '\\u0ce1'\n-    | '\\u0ce6' .. '\\u0cef'\n-    | '\\u0d02' .. '\\u0d03'\n-    | '\\u0d05' .. '\\u0d0c'\n-    | '\\u0d0e' .. '\\u0d10'\n-    | '\\u0d12' .. '\\u0d28'\n-    | '\\u0d2a' .. '\\u0d39'\n-    | '\\u0d3e' .. '\\u0d43'\n-    | '\\u0d46' .. '\\u0d48'\n-    | '\\u0d4a' .. '\\u0d4d'\n-    | '\\u0d57'\n-    | '\\u0d60' .. '\\u0d61'\n-    | '\\u0d66' .. '\\u0d6f'\n-    | '\\u0d82' .. '\\u0d83'\n-    | '\\u0d85' .. '\\u0d96'\n-    | '\\u0d9a' .. '\\u0db1'\n-    | '\\u0db3' .. '\\u0dbb'\n-    | '\\u0dbd'\n-    | '\\u0dc0' .. '\\u0dc6'\n-    | '\\u0dca'\n-    | '\\u0dcf' .. '\\u0dd4'\n-    | '\\u0dd6'\n-    | '\\u0dd8' .. '\\u0ddf'\n-    | '\\u0df2' .. '\\u0df3'\n-    | '\\u0e01' .. '\\u0e3a'\n-    | '\\u0e40' .. '\\u0e4e'\n-    | '\\u0e50' .. '\\u0e59'\n-    | '\\u0e81' .. '\\u0e82'\n-    | '\\u0e84'\n-    | '\\u0e87' .. '\\u0e88'\n-    | '\\u0e8a'\n-    | '\\u0e8d'\n-    | '\\u0e94' .. '\\u0e97'\n-    | '\\u0e99' .. '\\u0e9f'\n-    | '\\u0ea1' .. '\\u0ea3'\n-    | '\\u0ea5'\n-    | '\\u0ea7'\n-    | '\\u0eaa' .. '\\u0eab'\n-    | '\\u0ead' .. '\\u0eb9'\n-    | '\\u0ebb' .. '\\u0ebd'\n-    | '\\u0ec0' .. '\\u0ec4'\n-    | '\\u0ec6'\n-    | '\\u0ec8' .. '\\u0ecd'\n-    | '\\u0ed0' .. '\\u0ed9'\n-    | '\\u0edc' .. '\\u0edd'\n-    | '\\u0f00'\n-    | '\\u0f18' .. '\\u0f19'\n-    | '\\u0f20' .. '\\u0f29'\n-    | '\\u0f35'\n-    | '\\u0f37'\n-    | '\\u0f39'\n-    | '\\u0f3e' .. '\\u0f47'\n-    | '\\u0f49' .. '\\u0f6a'\n-    | '\\u0f71' .. '\\u0f84'\n-    | '\\u0f86' .. '\\u0f8b'\n-    | '\\u0f90' .. '\\u0f97'\n-    | '\\u0f99' .. '\\u0fbc'\n-    | '\\u0fc6'\n-    | '\\u1000' .. '\\u1021'\n-    | '\\u1023' .. '\\u1027'\n-    | '\\u1029' .. '\\u102a'\n-    | '\\u102c' .. '\\u1032'\n-    | '\\u1036' .. '\\u1039'\n-    | '\\u1040' .. '\\u1049'\n-    | '\\u1050' .. '\\u1059'\n-    | '\\u10a0' .. '\\u10c5'\n-    | '\\u10d0' .. '\\u10f8'\n-    | '\\u1100' .. '\\u1159'\n-    | '\\u115f' .. '\\u11a2'\n-    | '\\u11a8' .. '\\u11f9'\n-    | '\\u1200' .. '\\u1206'\n-    | '\\u1208' .. '\\u1246'\n-    | '\\u1248'\n-    | '\\u124a' .. '\\u124d'\n-    | '\\u1250' .. '\\u1256'\n-    | '\\u1258'\n-    | '\\u125a' .. '\\u125d'\n-    | '\\u1260' .. '\\u1286'\n-    | '\\u1288'\n-    | '\\u128a' .. '\\u128d'\n-    | '\\u1290' .. '\\u12ae'\n-    | '\\u12b0'\n-    | '\\u12b2' .. '\\u12b5'\n-    | '\\u12b8' .. '\\u12be'\n-    | '\\u12c0'\n-    | '\\u12c2' .. '\\u12c5'\n-    | '\\u12c8' .. '\\u12ce'\n-    | '\\u12d0' .. '\\u12d6'\n-    | '\\u12d8' .. '\\u12ee'\n-    | '\\u12f0' .. '\\u130e'\n-    | '\\u1310'\n-    | '\\u1312' .. '\\u1315'\n-    | '\\u1318' .. '\\u131e'\n-    | '\\u1320' .. '\\u1346'\n-    | '\\u1348' .. '\\u135a'\n-    | '\\u1369' .. '\\u1371'\n-    | '\\u13a0' .. '\\u13f4'\n-    | '\\u1401' .. '\\u166c'\n-    | '\\u166f' .. '\\u1676'\n-    | '\\u1681' .. '\\u169a'\n-    | '\\u16a0' .. '\\u16ea'\n-    | '\\u16ee' .. '\\u16f0'\n-    | '\\u1700' .. '\\u170c'\n-    | '\\u170e' .. '\\u1714'\n-    | '\\u1720' .. '\\u1734'\n-    | '\\u1740' .. '\\u1753'\n-    | '\\u1760' .. '\\u176c'\n-    | '\\u176e' .. '\\u1770'\n-    | '\\u1772' .. '\\u1773'\n-    | '\\u1780' .. '\\u17b3'\n-    | '\\u17b6' .. '\\u17d3'\n-    | '\\u17d7'\n-    | '\\u17dc' .. '\\u17dd'\n-    | '\\u17e0' .. '\\u17e9'\n-    | '\\u180b' .. '\\u180d'\n-    | '\\u1810' .. '\\u1819'\n-    | '\\u1820' .. '\\u1877'\n-    | '\\u1880' .. '\\u18a9'\n-    | '\\u1900' .. '\\u191c'\n-    | '\\u1920' .. '\\u192b'\n-    | '\\u1930' .. '\\u193b'\n-    | '\\u1946' .. '\\u196d'\n-    | '\\u1970' .. '\\u1974'\n-    | '\\u1d00' .. '\\u1d6b'\n-    | '\\u1e00' .. '\\u1e9b'\n-    | '\\u1ea0' .. '\\u1ef9'\n-    | '\\u1f00' .. '\\u1f15'\n-    | '\\u1f18' .. '\\u1f1d'\n-    | '\\u1f20' .. '\\u1f45'\n-    | '\\u1f48' .. '\\u1f4d'\n-    | '\\u1f50' .. '\\u1f57'\n-    | '\\u1f59'\n-    | '\\u1f5b'\n-    | '\\u1f5d'\n-    | '\\u1f5f' .. '\\u1f7d'\n-    | '\\u1f80' .. '\\u1fb4'\n-    | '\\u1fb6' .. '\\u1fbc'\n-    | '\\u1fbe'\n-    | '\\u1fc2' .. '\\u1fc4'\n-    | '\\u1fc6' .. '\\u1fcc'\n-    | '\\u1fd0' .. '\\u1fd3'\n-    | '\\u1fd6' .. '\\u1fdb'\n-    | '\\u1fe0' .. '\\u1fec'\n-    | '\\u1ff2' .. '\\u1ff4'\n-    | '\\u1ff6' .. '\\u1ffc'\n-    | '\\u203f' .. '\\u2040'\n-    | '\\u2054'\n-    | '\\u2071'\n-    | '\\u207f'\n-    | '\\u20d0' .. '\\u20dc'\n-    | '\\u20e1'\n-    | '\\u20e5' .. '\\u20ea'\n-    | '\\u2102'\n-    | '\\u2107'\n-    | '\\u210a' .. '\\u2113'\n-    | '\\u2115'\n-    | '\\u2118' .. '\\u211d'\n-    | '\\u2124'\n-    | '\\u2126'\n-    | '\\u2128'\n-    | '\\u212a' .. '\\u2131'\n-    | '\\u2133' .. '\\u2139'\n-    | '\\u213d' .. '\\u213f'\n-    | '\\u2145' .. '\\u2149'\n-    | '\\u2160' .. '\\u2183'\n-    | '\\u3005' .. '\\u3007'\n-    | '\\u3021' .. '\\u302f'\n-    | '\\u3031' .. '\\u3035'\n-    | '\\u3038' .. '\\u303c'\n-    | '\\u3041' .. '\\u3096'\n-    | '\\u3099' .. '\\u309a'\n-    | '\\u309d' .. '\\u309f'\n-    | '\\u30a1' .. '\\u30ff'\n-    | '\\u3105' .. '\\u312c'\n-    | '\\u3131' .. '\\u318e'\n-    | '\\u31a0' .. '\\u31b7'\n-    | '\\u31f0' .. '\\u31ff'\n-    | '\\u3400' .. '\\u4db5'\n-    | '\\u4e00' .. '\\u9fa5'\n-    | '\\ua000' .. '\\ua48c'\n-    | '\\uac00' .. '\\ud7a3'\n-    | '\\uf900' .. '\\ufa2d'\n-    | '\\ufa30' .. '\\ufa6a'\n-    | '\\ufb00' .. '\\ufb06'\n-    | '\\ufb13' .. '\\ufb17'\n-    | '\\ufb1d' .. '\\ufb28'\n-    | '\\ufb2a' .. '\\ufb36'\n-    | '\\ufb38' .. '\\ufb3c'\n-    | '\\ufb3e'\n-    | '\\ufb40' .. '\\ufb41'\n-    | '\\ufb43' .. '\\ufb44'\n-    | '\\ufb46' .. '\\ufbb1'\n-    | '\\ufbd3' .. '\\ufc5d'\n-    | '\\ufc64' .. '\\ufd3d'\n-    | '\\ufd50' .. '\\ufd8f'\n-    | '\\ufd92' .. '\\ufdc7'\n-    | '\\ufdf0' .. '\\ufdf9'\n-    | '\\ufe00' .. '\\ufe0f'\n-    | '\\ufe20' .. '\\ufe23'\n-    | '\\ufe33' .. '\\ufe34'\n-    | '\\ufe4d' .. '\\ufe4f'\n-    | '\\ufe71'\n-    | '\\ufe73'\n-    | '\\ufe77'\n-    | '\\ufe79'\n-    | '\\ufe7b'\n-    | '\\ufe7d'\n-    | '\\ufe7f' .. '\\ufefc'\n-    | '\\uff10' .. '\\uff19'\n-    | '\\uff21' .. '\\uff3a'\n-    | '\\uff3f'\n-    | '\\uff41' .. '\\uff5a'\n-    | '\\uff65' .. '\\uffbe'\n-    | '\\uffc2' .. '\\uffc7'\n-    | '\\uffca' .. '\\uffcf'\n-    | '\\uffd2' .. '\\uffd7'\n-    | '\\uffda' .. '\\uffdc'\n-    | '\\ud800' '\\udc00' .. '\\udc0a'\n-    | '\\ud800' '\\udc0d' .. '\\udc25'\n-    | '\\ud800' '\\udc28' .. '\\udc39'\n-    | '\\ud800' '\\udc3c' .. '\\udc3c'\n-    | '\\ud800' '\\udc3f' .. '\\udc4c'\n-    | '\\ud800' '\\udc50' .. '\\udc5c'\n-    | '\\ud800' '\\udc80' .. '\\udcf9'\n-    | '\\ud800' '\\udf00' .. '\\udf1d'\n-    | '\\ud800' '\\udf30' .. '\\udf49'\n-    | '\\ud800' '\\udf80' .. '\\udf9c'\n-    | '\\ud801' '\\ue000' .. '\\ue09c'\n-    | '\\ud801' '\\ue0a0' .. '\\ue0a8'\n-    | '\\ud802' '\\ue400' .. '\\ue404'\n-    | '\\ud802' '\\u0808'\n-    | '\\ud802' '\\ue40a' .. '\\ue434'\n-    | '\\ud802' '\\ue437' .. '\\ue437'\n-    | '\\ud802' '\\u083c'\n-    | '\\ud802' '\\u083f'\n-    | '\\ud834' '\\uad65' .. '\\uad68'\n-    | '\\ud834' '\\uad6d' .. '\\uad71'\n-    | '\\ud834' '\\uad7b' .. '\\uad81'\n-    | '\\ud834' '\\uad85' .. '\\uad8a'\n-    | '\\ud834' '\\uadaa' .. '\\uadac'\n-    | '\\ud835' '\\ub000' .. '\\ub053'\n-    | '\\ud835' '\\ub056' .. '\\ub09b'\n-    | '\\ud835' '\\ub09e' .. '\\ub09e'\n-    | '\\ud835' '\\ud4a2'\n-    | '\\ud835' '\\ub0a5' .. '\\ub0a5'\n-    | '\\ud835' '\\ub0a9' .. '\\ub0ab'\n-    | '\\ud835' '\\ub0ae' .. '\\ub0b8'\n-    | '\\ud835' '\\ud4bb'\n-    | '\\ud835' '\\ub0bd' .. '\\ub0c2'\n-    | '\\ud835' '\\ub0c5' .. '\\ub104'\n-    | '\\ud835' '\\ub107' .. '\\ub109'\n-    | '\\ud835' '\\ub10d' .. '\\ub113'\n-    | '\\ud835' '\\ub116' .. '\\ub11b'\n-    | '\\ud835' '\\ub11e' .. '\\ub138'\n-    | '\\ud835' '\\ub13b' .. '\\ub13d'\n-    | '\\ud835' '\\ub140' .. '\\ub143'\n-    | '\\ud835' '\\ud546'\n-    | '\\ud835' '\\ub14a' .. '\\ub14f'\n-    | '\\ud835' '\\ub152' .. '\\ub2a2'\n-    | '\\ud835' '\\ub2a8' .. '\\ub2bf'\n-    | '\\ud835' '\\ub2c2' .. '\\ub2d9'\n-    | '\\ud835' '\\ub2dc' .. '\\ub2f9'\n-    | '\\ud835' '\\ub2fc' .. '\\ub313'\n-    | '\\ud835' '\\ub316' .. '\\ub333'\n-    | '\\ud835' '\\ub336' .. '\\ub34d'\n-    | '\\ud835' '\\ub350' .. '\\ub36d'\n-    | '\\ud835' '\\ub370' .. '\\ub387'\n-    | '\\ud835' '\\ub38a' .. '\\ub3a7'\n-    | '\\ud835' '\\ub3aa' .. '\\ub3c1'\n-    | '\\ud835' '\\ub3c4' .. '\\ub3c8'\n-    | '\\ud835' '\\ub3ce' .. '\\ub3fe'\n-    | '\\ud840' '\\udc00' .. '\\udffe'\n-    | '\\ud841' '\\ue000' .. '\\ue3fe'\n-    | '\\ud842' '\\ue400' .. '\\ue7fe'\n-    | '\\ud843' '\\ue800' .. '\\uebfe'\n-    | '\\ud844' '\\uec00' .. '\\ueffe'\n-    | '\\ud845' '\\uf000' .. '\\uf3fe'\n-    | '\\ud846' '\\uf400' .. '\\uf7fe'\n-    | '\\ud847' '\\uf800' .. '\\ufbfe'\n-    | '\\ud848' '\\ufc00' .. '\\ufffe'\n-    | '\\ud849' '\\u0000' .. '\\u03fe'\n-    | '\\ud84a' '\\u0400' .. '\\u07fe'\n-    | '\\ud84b' '\\u0800' .. '\\u0bfe'\n-    | '\\ud84c' '\\u0c00' .. '\\u0ffe'\n-    | '\\ud84d' '\\u1000' .. '\\u13fe'\n-    | '\\ud84e' '\\u1400' .. '\\u17fe'\n-    | '\\ud84f' '\\u1800' .. '\\u1bfe'\n-    | '\\ud850' '\\u1c00' .. '\\u1ffe'\n-    | '\\ud851' '\\u2000' .. '\\u23fe'\n-    | '\\ud852' '\\u2400' .. '\\u27fe'\n-    | '\\ud853' '\\u2800' .. '\\u2bfe'\n-    | '\\ud854' '\\u2c00' .. '\\u2ffe'\n-    | '\\ud855' '\\u3000' .. '\\u33fe'\n-    | '\\ud856' '\\u3400' .. '\\u37fe'\n-    | '\\ud857' '\\u3800' .. '\\u3bfe'\n-    | '\\ud858' '\\u3c00' .. '\\u3ffe'\n-    | '\\ud859' '\\u4000' .. '\\u43fe'\n-    | '\\ud85a' '\\u4400' .. '\\u47fe'\n-    | '\\ud85b' '\\u4800' .. '\\u4bfe'\n-    | '\\ud85c' '\\u4c00' .. '\\u4ffe'\n-    | '\\ud85d' '\\u5000' .. '\\u53fe'\n-    | '\\ud85e' '\\u5400' .. '\\u57fe'\n-    | '\\ud85f' '\\u5800' .. '\\u5bfe'\n-    | '\\ud860' '\\u5c00' .. '\\u5ffe'\n-    | '\\ud861' '\\u6000' .. '\\u63fe'\n-    | '\\ud862' '\\u6400' .. '\\u67fe'\n-    | '\\ud863' '\\u6800' .. '\\u6bfe'\n-    | '\\ud864' '\\u6c00' .. '\\u6ffe'\n-    | '\\ud865' '\\u7000' .. '\\u73fe'\n-    | '\\ud866' '\\u7400' .. '\\u77fe'\n-    | '\\ud867' '\\u7800' .. '\\u7bfe'\n-    | '\\ud868' '\\u7c00' .. '\\u7ffe'\n-    | '\\ud869' '\\u8000' .. '\\u82d5'\n-    | '\\ud87e' '\\ud400' .. '\\ud61c'\n-    | '\\udb40' '\\udd00' .. '\\uddee'\n-    ;"}, {"sha": "53fb50f4584d2d65eee0b77d8f9f090cc47abeed", "filename": "src/grammar/xidstart.g4", "status": "removed", "additions": 0, "deletions": 379, "changes": 379, "blob_url": "https://github.com/rust-lang/rust/blob/158b085f06a41004ebf36d87afa3548f8b60861a/src%2Fgrammar%2Fxidstart.g4", "raw_url": "https://github.com/rust-lang/rust/raw/158b085f06a41004ebf36d87afa3548f8b60861a/src%2Fgrammar%2Fxidstart.g4", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fxidstart.g4?ref=158b085f06a41004ebf36d87afa3548f8b60861a", "patch": "@@ -1,379 +0,0 @@\n-lexer grammar Xidstart;\n-\n-fragment XID_Start :\n-      '\\u0041' .. '\\u005a'\n-    | '_'\n-    | '\\u0061' .. '\\u007a'\n-    | '\\u00aa'\n-    | '\\u00b5'\n-    | '\\u00ba'\n-    | '\\u00c0' .. '\\u00d6'\n-    | '\\u00d8' .. '\\u00f6'\n-    | '\\u00f8' .. '\\u0236'\n-    | '\\u0250' .. '\\u02c1'\n-    | '\\u02c6' .. '\\u02d1'\n-    | '\\u02e0' .. '\\u02e4'\n-    | '\\u02ee'\n-    | '\\u0386'\n-    | '\\u0388' .. '\\u038a'\n-    | '\\u038c'\n-    | '\\u038e' .. '\\u03a1'\n-    | '\\u03a3' .. '\\u03ce'\n-    | '\\u03d0' .. '\\u03f5'\n-    | '\\u03f7' .. '\\u03fb'\n-    | '\\u0400' .. '\\u0481'\n-    | '\\u048a' .. '\\u04ce'\n-    | '\\u04d0' .. '\\u04f5'\n-    | '\\u04f8' .. '\\u04f9'\n-    | '\\u0500' .. '\\u050f'\n-    | '\\u0531' .. '\\u0556'\n-    | '\\u0559'\n-    | '\\u0561' .. '\\u0587'\n-    | '\\u05d0' .. '\\u05ea'\n-    | '\\u05f0' .. '\\u05f2'\n-    | '\\u0621' .. '\\u063a'\n-    | '\\u0640' .. '\\u064a'\n-    | '\\u066e' .. '\\u066f'\n-    | '\\u0671' .. '\\u06d3'\n-    | '\\u06d5'\n-    | '\\u06e5' .. '\\u06e6'\n-    | '\\u06ee' .. '\\u06ef'\n-    | '\\u06fa' .. '\\u06fc'\n-    | '\\u06ff'\n-    | '\\u0710'\n-    | '\\u0712' .. '\\u072f'\n-    | '\\u074d' .. '\\u074f'\n-    | '\\u0780' .. '\\u07a5'\n-    | '\\u07b1'\n-    | '\\u0904' .. '\\u0939'\n-    | '\\u093d'\n-    | '\\u0950'\n-    | '\\u0958' .. '\\u0961'\n-    | '\\u0985' .. '\\u098c'\n-    | '\\u098f' .. '\\u0990'\n-    | '\\u0993' .. '\\u09a8'\n-    | '\\u09aa' .. '\\u09b0'\n-    | '\\u09b2'\n-    | '\\u09b6' .. '\\u09b9'\n-    | '\\u09bd'\n-    | '\\u09dc' .. '\\u09dd'\n-    | '\\u09df' .. '\\u09e1'\n-    | '\\u09f0' .. '\\u09f1'\n-    | '\\u0a05' .. '\\u0a0a'\n-    | '\\u0a0f' .. '\\u0a10'\n-    | '\\u0a13' .. '\\u0a28'\n-    | '\\u0a2a' .. '\\u0a30'\n-    | '\\u0a32' .. '\\u0a33'\n-    | '\\u0a35' .. '\\u0a36'\n-    | '\\u0a38' .. '\\u0a39'\n-    | '\\u0a59' .. '\\u0a5c'\n-    | '\\u0a5e'\n-    | '\\u0a72' .. '\\u0a74'\n-    | '\\u0a85' .. '\\u0a8d'\n-    | '\\u0a8f' .. '\\u0a91'\n-    | '\\u0a93' .. '\\u0aa8'\n-    | '\\u0aaa' .. '\\u0ab0'\n-    | '\\u0ab2' .. '\\u0ab3'\n-    | '\\u0ab5' .. '\\u0ab9'\n-    | '\\u0abd'\n-    | '\\u0ad0'\n-    | '\\u0ae0' .. '\\u0ae1'\n-    | '\\u0b05' .. '\\u0b0c'\n-    | '\\u0b0f' .. '\\u0b10'\n-    | '\\u0b13' .. '\\u0b28'\n-    | '\\u0b2a' .. '\\u0b30'\n-    | '\\u0b32' .. '\\u0b33'\n-    | '\\u0b35' .. '\\u0b39'\n-    | '\\u0b3d'\n-    | '\\u0b5c' .. '\\u0b5d'\n-    | '\\u0b5f' .. '\\u0b61'\n-    | '\\u0b71'\n-    | '\\u0b83'\n-    | '\\u0b85' .. '\\u0b8a'\n-    | '\\u0b8e' .. '\\u0b90'\n-    | '\\u0b92' .. '\\u0b95'\n-    | '\\u0b99' .. '\\u0b9a'\n-    | '\\u0b9c'\n-    | '\\u0b9e' .. '\\u0b9f'\n-    | '\\u0ba3' .. '\\u0ba4'\n-    | '\\u0ba8' .. '\\u0baa'\n-    | '\\u0bae' .. '\\u0bb5'\n-    | '\\u0bb7' .. '\\u0bb9'\n-    | '\\u0c05' .. '\\u0c0c'\n-    | '\\u0c0e' .. '\\u0c10'\n-    | '\\u0c12' .. '\\u0c28'\n-    | '\\u0c2a' .. '\\u0c33'\n-    | '\\u0c35' .. '\\u0c39'\n-    | '\\u0c60' .. '\\u0c61'\n-    | '\\u0c85' .. '\\u0c8c'\n-    | '\\u0c8e' .. '\\u0c90'\n-    | '\\u0c92' .. '\\u0ca8'\n-    | '\\u0caa' .. '\\u0cb3'\n-    | '\\u0cb5' .. '\\u0cb9'\n-    | '\\u0cbd'\n-    | '\\u0cde'\n-    | '\\u0ce0' .. '\\u0ce1'\n-    | '\\u0d05' .. '\\u0d0c'\n-    | '\\u0d0e' .. '\\u0d10'\n-    | '\\u0d12' .. '\\u0d28'\n-    | '\\u0d2a' .. '\\u0d39'\n-    | '\\u0d60' .. '\\u0d61'\n-    | '\\u0d85' .. '\\u0d96'\n-    | '\\u0d9a' .. '\\u0db1'\n-    | '\\u0db3' .. '\\u0dbb'\n-    | '\\u0dbd'\n-    | '\\u0dc0' .. '\\u0dc6'\n-    | '\\u0e01' .. '\\u0e30'\n-    | '\\u0e32'\n-    | '\\u0e40' .. '\\u0e46'\n-    | '\\u0e81' .. '\\u0e82'\n-    | '\\u0e84'\n-    | '\\u0e87' .. '\\u0e88'\n-    | '\\u0e8a'\n-    | '\\u0e8d'\n-    | '\\u0e94' .. '\\u0e97'\n-    | '\\u0e99' .. '\\u0e9f'\n-    | '\\u0ea1' .. '\\u0ea3'\n-    | '\\u0ea5'\n-    | '\\u0ea7'\n-    | '\\u0eaa' .. '\\u0eab'\n-    | '\\u0ead' .. '\\u0eb0'\n-    | '\\u0eb2'\n-    | '\\u0ebd'\n-    | '\\u0ec0' .. '\\u0ec4'\n-    | '\\u0ec6'\n-    | '\\u0edc' .. '\\u0edd'\n-    | '\\u0f00'\n-    | '\\u0f40' .. '\\u0f47'\n-    | '\\u0f49' .. '\\u0f6a'\n-    | '\\u0f88' .. '\\u0f8b'\n-    | '\\u1000' .. '\\u1021'\n-    | '\\u1023' .. '\\u1027'\n-    | '\\u1029' .. '\\u102a'\n-    | '\\u1050' .. '\\u1055'\n-    | '\\u10a0' .. '\\u10c5'\n-    | '\\u10d0' .. '\\u10f8'\n-    | '\\u1100' .. '\\u1159'\n-    | '\\u115f' .. '\\u11a2'\n-    | '\\u11a8' .. '\\u11f9'\n-    | '\\u1200' .. '\\u1206'\n-    | '\\u1208' .. '\\u1246'\n-    | '\\u1248'\n-    | '\\u124a' .. '\\u124d'\n-    | '\\u1250' .. '\\u1256'\n-    | '\\u1258'\n-    | '\\u125a' .. '\\u125d'\n-    | '\\u1260' .. '\\u1286'\n-    | '\\u1288'\n-    | '\\u128a' .. '\\u128d'\n-    | '\\u1290' .. '\\u12ae'\n-    | '\\u12b0'\n-    | '\\u12b2' .. '\\u12b5'\n-    | '\\u12b8' .. '\\u12be'\n-    | '\\u12c0'\n-    | '\\u12c2' .. '\\u12c5'\n-    | '\\u12c8' .. '\\u12ce'\n-    | '\\u12d0' .. '\\u12d6'\n-    | '\\u12d8' .. '\\u12ee'\n-    | '\\u12f0' .. '\\u130e'\n-    | '\\u1310'\n-    | '\\u1312' .. '\\u1315'\n-    | '\\u1318' .. '\\u131e'\n-    | '\\u1320' .. '\\u1346'\n-    | '\\u1348' .. '\\u135a'\n-    | '\\u13a0' .. '\\u13f4'\n-    | '\\u1401' .. '\\u166c'\n-    | '\\u166f' .. '\\u1676'\n-    | '\\u1681' .. '\\u169a'\n-    | '\\u16a0' .. '\\u16ea'\n-    | '\\u16ee' .. '\\u16f0'\n-    | '\\u1700' .. '\\u170c'\n-    | '\\u170e' .. '\\u1711'\n-    | '\\u1720' .. '\\u1731'\n-    | '\\u1740' .. '\\u1751'\n-    | '\\u1760' .. '\\u176c'\n-    | '\\u176e' .. '\\u1770'\n-    | '\\u1780' .. '\\u17b3'\n-    | '\\u17d7'\n-    | '\\u17dc'\n-    | '\\u1820' .. '\\u1877'\n-    | '\\u1880' .. '\\u18a8'\n-    | '\\u1900' .. '\\u191c'\n-    | '\\u1950' .. '\\u196d'\n-    | '\\u1970' .. '\\u1974'\n-    | '\\u1d00' .. '\\u1d6b'\n-    | '\\u1e00' .. '\\u1e9b'\n-    | '\\u1ea0' .. '\\u1ef9'\n-    | '\\u1f00' .. '\\u1f15'\n-    | '\\u1f18' .. '\\u1f1d'\n-    | '\\u1f20' .. '\\u1f45'\n-    | '\\u1f48' .. '\\u1f4d'\n-    | '\\u1f50' .. '\\u1f57'\n-    | '\\u1f59'\n-    | '\\u1f5b'\n-    | '\\u1f5d'\n-    | '\\u1f5f' .. '\\u1f7d'\n-    | '\\u1f80' .. '\\u1fb4'\n-    | '\\u1fb6' .. '\\u1fbc'\n-    | '\\u1fbe'\n-    | '\\u1fc2' .. '\\u1fc4'\n-    | '\\u1fc6' .. '\\u1fcc'\n-    | '\\u1fd0' .. '\\u1fd3'\n-    | '\\u1fd6' .. '\\u1fdb'\n-    | '\\u1fe0' .. '\\u1fec'\n-    | '\\u1ff2' .. '\\u1ff4'\n-    | '\\u1ff6' .. '\\u1ffc'\n-    | '\\u2071'\n-    | '\\u207f'\n-    | '\\u2102'\n-    | '\\u2107'\n-    | '\\u210a' .. '\\u2113'\n-    | '\\u2115'\n-    | '\\u2118' .. '\\u211d'\n-    | '\\u2124'\n-    | '\\u2126'\n-    | '\\u2128'\n-    | '\\u212a' .. '\\u2131'\n-    | '\\u2133' .. '\\u2139'\n-    | '\\u213d' .. '\\u213f'\n-    | '\\u2145' .. '\\u2149'\n-    | '\\u2160' .. '\\u2183'\n-    | '\\u3005' .. '\\u3007'\n-    | '\\u3021' .. '\\u3029'\n-    | '\\u3031' .. '\\u3035'\n-    | '\\u3038' .. '\\u303c'\n-    | '\\u3041' .. '\\u3096'\n-    | '\\u309d' .. '\\u309f'\n-    | '\\u30a1' .. '\\u30fa'\n-    | '\\u30fc' .. '\\u30ff'\n-    | '\\u3105' .. '\\u312c'\n-    | '\\u3131' .. '\\u318e'\n-    | '\\u31a0' .. '\\u31b7'\n-    | '\\u31f0' .. '\\u31ff'\n-    | '\\u3400' .. '\\u4db5'\n-    | '\\u4e00' .. '\\u9fa5'\n-    | '\\ua000' .. '\\ua48c'\n-    | '\\uac00' .. '\\ud7a3'\n-    | '\\uf900' .. '\\ufa2d'\n-    | '\\ufa30' .. '\\ufa6a'\n-    | '\\ufb00' .. '\\ufb06'\n-    | '\\ufb13' .. '\\ufb17'\n-    | '\\ufb1d'\n-    | '\\ufb1f' .. '\\ufb28'\n-    | '\\ufb2a' .. '\\ufb36'\n-    | '\\ufb38' .. '\\ufb3c'\n-    | '\\ufb3e'\n-    | '\\ufb40' .. '\\ufb41'\n-    | '\\ufb43' .. '\\ufb44'\n-    | '\\ufb46' .. '\\ufbb1'\n-    | '\\ufbd3' .. '\\ufc5d'\n-    | '\\ufc64' .. '\\ufd3d'\n-    | '\\ufd50' .. '\\ufd8f'\n-    | '\\ufd92' .. '\\ufdc7'\n-    | '\\ufdf0' .. '\\ufdf9'\n-    | '\\ufe71'\n-    | '\\ufe73'\n-    | '\\ufe77'\n-    | '\\ufe79'\n-    | '\\ufe7b'\n-    | '\\ufe7d'\n-    | '\\ufe7f' .. '\\ufefc'\n-    | '\\uff21' .. '\\uff3a'\n-    | '\\uff41' .. '\\uff5a'\n-    | '\\uff66' .. '\\uff9d'\n-    | '\\uffa0' .. '\\uffbe'\n-    | '\\uffc2' .. '\\uffc7'\n-    | '\\uffca' .. '\\uffcf'\n-    | '\\uffd2' .. '\\uffd7'\n-    | '\\uffda' .. '\\uffdc'\n-    | '\\ud800' '\\udc00' .. '\\udc0a'\n-    | '\\ud800' '\\udc0d' .. '\\udc25'\n-    | '\\ud800' '\\udc28' .. '\\udc39'\n-    | '\\ud800' '\\udc3c' .. '\\udc3c'\n-    | '\\ud800' '\\udc3f' .. '\\udc4c'\n-    | '\\ud800' '\\udc50' .. '\\udc5c'\n-    | '\\ud800' '\\udc80' .. '\\udcf9'\n-    | '\\ud800' '\\udf00' .. '\\udf1d'\n-    | '\\ud800' '\\udf30' .. '\\udf49'\n-    | '\\ud800' '\\udf80' .. '\\udf9c'\n-    | '\\ud801' '\\ue000' .. '\\ue09c'\n-    | '\\ud802' '\\ue400' .. '\\ue404'\n-    | '\\ud802' '\\u0808'\n-    | '\\ud802' '\\ue40a' .. '\\ue434'\n-    | '\\ud802' '\\ue437' .. '\\ue437'\n-    | '\\ud802' '\\u083c'\n-    | '\\ud802' '\\u083f'\n-    | '\\ud835' '\\ub000' .. '\\ub053'\n-    | '\\ud835' '\\ub056' .. '\\ub09b'\n-    | '\\ud835' '\\ub09e' .. '\\ub09e'\n-    | '\\ud835' '\\ud4a2'\n-    | '\\ud835' '\\ub0a5' .. '\\ub0a5'\n-    | '\\ud835' '\\ub0a9' .. '\\ub0ab'\n-    | '\\ud835' '\\ub0ae' .. '\\ub0b8'\n-    | '\\ud835' '\\ud4bb'\n-    | '\\ud835' '\\ub0bd' .. '\\ub0c2'\n-    | '\\ud835' '\\ub0c5' .. '\\ub104'\n-    | '\\ud835' '\\ub107' .. '\\ub109'\n-    | '\\ud835' '\\ub10d' .. '\\ub113'\n-    | '\\ud835' '\\ub116' .. '\\ub11b'\n-    | '\\ud835' '\\ub11e' .. '\\ub138'\n-    | '\\ud835' '\\ub13b' .. '\\ub13d'\n-    | '\\ud835' '\\ub140' .. '\\ub143'\n-    | '\\ud835' '\\ud546'\n-    | '\\ud835' '\\ub14a' .. '\\ub14f'\n-    | '\\ud835' '\\ub152' .. '\\ub2a2'\n-    | '\\ud835' '\\ub2a8' .. '\\ub2bf'\n-    | '\\ud835' '\\ub2c2' .. '\\ub2d9'\n-    | '\\ud835' '\\ub2dc' .. '\\ub2f9'\n-    | '\\ud835' '\\ub2fc' .. '\\ub313'\n-    | '\\ud835' '\\ub316' .. '\\ub333'\n-    | '\\ud835' '\\ub336' .. '\\ub34d'\n-    | '\\ud835' '\\ub350' .. '\\ub36d'\n-    | '\\ud835' '\\ub370' .. '\\ub387'\n-    | '\\ud835' '\\ub38a' .. '\\ub3a7'\n-    | '\\ud835' '\\ub3aa' .. '\\ub3c1'\n-    | '\\ud835' '\\ub3c4' .. '\\ub3c8'\n-    | '\\ud840' '\\udc00' .. '\\udffe'\n-    | '\\ud841' '\\ue000' .. '\\ue3fe'\n-    | '\\ud842' '\\ue400' .. '\\ue7fe'\n-    | '\\ud843' '\\ue800' .. '\\uebfe'\n-    | '\\ud844' '\\uec00' .. '\\ueffe'\n-    | '\\ud845' '\\uf000' .. '\\uf3fe'\n-    | '\\ud846' '\\uf400' .. '\\uf7fe'\n-    | '\\ud847' '\\uf800' .. '\\ufbfe'\n-    | '\\ud848' '\\ufc00' .. '\\ufffe'\n-    | '\\ud849' '\\u0000' .. '\\u03fe'\n-    | '\\ud84a' '\\u0400' .. '\\u07fe'\n-    | '\\ud84b' '\\u0800' .. '\\u0bfe'\n-    | '\\ud84c' '\\u0c00' .. '\\u0ffe'\n-    | '\\ud84d' '\\u1000' .. '\\u13fe'\n-    | '\\ud84e' '\\u1400' .. '\\u17fe'\n-    | '\\ud84f' '\\u1800' .. '\\u1bfe'\n-    | '\\ud850' '\\u1c00' .. '\\u1ffe'\n-    | '\\ud851' '\\u2000' .. '\\u23fe'\n-    | '\\ud852' '\\u2400' .. '\\u27fe'\n-    | '\\ud853' '\\u2800' .. '\\u2bfe'\n-    | '\\ud854' '\\u2c00' .. '\\u2ffe'\n-    | '\\ud855' '\\u3000' .. '\\u33fe'\n-    | '\\ud856' '\\u3400' .. '\\u37fe'\n-    | '\\ud857' '\\u3800' .. '\\u3bfe'\n-    | '\\ud858' '\\u3c00' .. '\\u3ffe'\n-    | '\\ud859' '\\u4000' .. '\\u43fe'\n-    | '\\ud85a' '\\u4400' .. '\\u47fe'\n-    | '\\ud85b' '\\u4800' .. '\\u4bfe'\n-    | '\\ud85c' '\\u4c00' .. '\\u4ffe'\n-    | '\\ud85d' '\\u5000' .. '\\u53fe'\n-    | '\\ud85e' '\\u5400' .. '\\u57fe'\n-    | '\\ud85f' '\\u5800' .. '\\u5bfe'\n-    | '\\ud860' '\\u5c00' .. '\\u5ffe'\n-    | '\\ud861' '\\u6000' .. '\\u63fe'\n-    | '\\ud862' '\\u6400' .. '\\u67fe'\n-    | '\\ud863' '\\u6800' .. '\\u6bfe'\n-    | '\\ud864' '\\u6c00' .. '\\u6ffe'\n-    | '\\ud865' '\\u7000' .. '\\u73fe'\n-    | '\\ud866' '\\u7400' .. '\\u77fe'\n-    | '\\ud867' '\\u7800' .. '\\u7bfe'\n-    | '\\ud868' '\\u7c00' .. '\\u7ffe'\n-    | '\\ud869' '\\u8000' .. '\\u82d5'\n-    | '\\ud87e' '\\ud400' .. '\\ud61c'\n-    ;"}, {"sha": "3288e0659c08fb5006f6d6dd4b5675ed0c2c432a", "filename": "src/jemalloc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fjemalloc?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -1 +1 @@\n-Subproject commit 11bfb0dcf85f7aa92abd30524bb1e42e18d108c6\n+Subproject commit 3288e0659c08fb5006f6d6dd4b5675ed0c2c432a"}, {"sha": "27ecefe043b1e333b7788a4444c74ff519c35be3", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 53, "deletions": 28, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -54,16 +54,33 @@ const MAX_REFCOUNT: usize = (isize::MAX) as usize;\n /// exception. If you need to mutate through an `Arc`, use [`Mutex`][mutex],\n /// [`RwLock`][rwlock], or one of the [`Atomic`][atomic] types.\n ///\n-/// `Arc` uses atomic operations for reference counting, so `Arc`s can be\n-/// sent between threads. In other words, `Arc<T>` implements [`Send`]\n-/// as long as `T` implements [`Send`] and [`Sync`][sync]. The disadvantage is\n-/// that atomic operations are more expensive than ordinary memory accesses.\n-/// If you are not sharing reference-counted values between threads, consider\n-/// using [`rc::Rc`][`Rc`] for lower overhead. [`Rc`] is a safe default, because\n-/// the compiler will catch any attempt to send an [`Rc`] between threads.\n-/// However, a library might choose `Arc` in order to give library consumers\n+/// ## Thread Safety\n+///\n+/// Unlike [`Rc<T>`], `Arc<T>` uses atomic operations for its reference\n+/// counting  This means that it is thread-safe. The disadvantage is that\n+/// atomic operations are more expensive than ordinary memory accesses. If you\n+/// are not sharing reference-counted values between threads, consider using\n+/// [`Rc<T>`] for lower overhead. [`Rc<T>`] is a safe default, because the\n+/// compiler will catch any attempt to send an [`Rc<T>`] between threads.\n+/// However, a library might choose `Arc<T>` in order to give library consumers\n /// more flexibility.\n ///\n+/// `Arc<T>` will implement [`Send`] and [`Sync`] as long as the `T` implements\n+/// [`Send`] and [`Sync`]. Why can't you put a non-thread-safe type `T` in an\n+/// `Arc<T>` to make it thread-safe? This may be a bit counter-intuitive at\n+/// first: after all, isn't the point of `Arc<T>` thread safety? The key is\n+/// this: `Arc<T>` makes it thread safe to have multiple ownership of the same\n+/// data, but it  doesn't add thread safety to its data. Consider\n+/// `Arc<RefCell<T>>`. `RefCell<T>` isn't [`Sync`], and if `Arc<T>` was always\n+/// [`Send`], `Arc<RefCell<T>>` would be as well. But then we'd have a problem:\n+/// `RefCell<T>` is not thread safe; it keeps track of the borrowing count using\n+/// non-atomic operations.\n+///\n+/// In the end, this means that you may need to pair `Arc<T>` with some sort of\n+/// `std::sync` type, usually `Mutex<T>`.\n+///\n+/// ## Breaking cycles with `Weak`\n+///\n /// The [`downgrade`][downgrade] method can be used to create a non-owning\n /// [`Weak`][weak] pointer. A [`Weak`][weak] pointer can be [`upgrade`][upgrade]d\n /// to an `Arc`, but this will return [`None`] if the value has already been\n@@ -74,6 +91,8 @@ const MAX_REFCOUNT: usize = (isize::MAX) as usize;\n /// strong `Arc` pointers from parent nodes to children, and [`Weak`][weak]\n /// pointers from children back to their parents.\n ///\n+/// ## `Deref` behavior\n+///\n /// `Arc<T>` automatically dereferences to `T` (via the [`Deref`][deref] trait),\n /// so you can call `T`'s methods on a value of type `Arc<T>`. To avoid name\n /// clashes with `T`'s methods, the methods of `Arc<T>` itself are [associated\n@@ -91,13 +110,13 @@ const MAX_REFCOUNT: usize = (isize::MAX) as usize;\n ///\n /// [arc]: struct.Arc.html\n /// [weak]: struct.Weak.html\n-/// [`Rc`]: ../../std/rc/struct.Rc.html\n+/// [`Rc<T>`]: ../../std/rc/struct.Rc.html\n /// [clone]: ../../std/clone/trait.Clone.html#tymethod.clone\n /// [mutex]: ../../std/sync/struct.Mutex.html\n /// [rwlock]: ../../std/sync/struct.RwLock.html\n /// [atomic]: ../../std/sync/atomic/index.html\n /// [`Send`]: ../../std/marker/trait.Send.html\n-/// [sync]: ../../std/marker/trait.Sync.html\n+/// [`Sync`]: ../../std/marker/trait.Sync.html\n /// [deref]: ../../std/ops/trait.Deref.html\n /// [downgrade]: struct.Arc.html#method.downgrade\n /// [upgrade]: struct.Weak.html#method.upgrade\n@@ -277,8 +296,7 @@ impl<T> Arc<T> {\n         atomic::fence(Acquire);\n \n         unsafe {\n-            let ptr = *this.ptr;\n-            let elem = ptr::read(&(*ptr).data);\n+            let elem = ptr::read(&this.ptr.as_ref().data);\n \n             // Make a weak pointer to clean up the implicit strong-weak reference\n             let _weak = Weak { ptr: this.ptr };\n@@ -306,7 +324,7 @@ impl<T> Arc<T> {\n     /// ```\n     #[stable(feature = \"rc_raw\", since = \"1.17.0\")]\n     pub fn into_raw(this: Self) -> *const T {\n-        let ptr = unsafe { &(**this.ptr).data as *const _ };\n+        let ptr: *const T = &*this;\n         mem::forget(this);\n         ptr\n     }\n@@ -345,7 +363,7 @@ impl<T> Arc<T> {\n         // `data` field from the pointer.\n         let ptr = (ptr as *const u8).offset(-offset_of!(ArcInner<T>, data));\n         Arc {\n-            ptr: Shared::new(ptr as *const _),\n+            ptr: Shared::new(ptr as *mut u8 as *mut _),\n         }\n     }\n }\n@@ -452,17 +470,17 @@ impl<T: ?Sized> Arc<T> {\n         // `ArcInner` structure itself is `Sync` because the inner data is\n         // `Sync` as well, so we're ok loaning out an immutable pointer to these\n         // contents.\n-        unsafe { &**self.ptr }\n+        unsafe { self.ptr.as_ref() }\n     }\n \n     // Non-inlined part of `drop`.\n     #[inline(never)]\n     unsafe fn drop_slow(&mut self) {\n-        let ptr = self.ptr.as_mut_ptr();\n+        let ptr = self.ptr.as_ptr();\n \n         // Destroy the data at this time, even though we may not free the box\n         // allocation itself (there may still be weak pointers lying around).\n-        ptr::drop_in_place(&mut (*ptr).data);\n+        ptr::drop_in_place(&mut self.ptr.as_mut().data);\n \n         if self.inner().weak.fetch_sub(1, Release) == 1 {\n             atomic::fence(Acquire);\n@@ -488,9 +506,7 @@ impl<T: ?Sized> Arc<T> {\n     /// assert!(!Arc::ptr_eq(&five, &other_five));\n     /// ```\n     pub fn ptr_eq(this: &Self, other: &Self) -> bool {\n-        let this_ptr: *const ArcInner<T> = *this.ptr;\n-        let other_ptr: *const ArcInner<T> = *other.ptr;\n-        this_ptr == other_ptr\n+        this.ptr.as_ptr() == other.ptr.as_ptr()\n     }\n }\n \n@@ -621,7 +637,7 @@ impl<T: Clone> Arc<T> {\n                 // here (due to zeroing) because data is no longer accessed by\n                 // other threads (due to there being no more strong refs at this\n                 // point).\n-                let mut swap = Arc::new(ptr::read(&(**weak.ptr).data));\n+                let mut swap = Arc::new(ptr::read(&weak.ptr.as_ref().data));\n                 mem::swap(this, &mut swap);\n                 mem::forget(swap);\n             }\n@@ -634,8 +650,7 @@ impl<T: Clone> Arc<T> {\n         // As with `get_mut()`, the unsafety is ok because our reference was\n         // either unique to begin with, or became one upon cloning the contents.\n         unsafe {\n-            let inner = &mut *this.ptr.as_mut_ptr();\n-            &mut inner.data\n+            &mut this.ptr.as_mut().data\n         }\n     }\n }\n@@ -677,8 +692,7 @@ impl<T: ?Sized> Arc<T> {\n             // the Arc itself to be `mut`, so we're returning the only possible\n             // reference to the inner data.\n             unsafe {\n-                let inner = &mut *this.ptr.as_mut_ptr();\n-                Some(&mut inner.data)\n+                Some(&mut this.ptr.as_mut().data)\n             }\n         } else {\n             None\n@@ -767,7 +781,18 @@ unsafe impl<#[may_dangle] T: ?Sized> Drop for Arc<T> {\n         // > through this reference must obviously happened before), and an\n         // > \"acquire\" operation before deleting the object.\n         //\n+        // In particular, while the contents of an Arc are usually immutable, it's\n+        // possible to have interior writes to something like a Mutex<T>. Since a\n+        // Mutex is not acquired when it is deleted, we can't rely on its\n+        // synchronization logic to make writes in thread A visible to a destructor\n+        // running in thread B.\n+        //\n+        // Also note that the Acquire fence here could probably be replaced with an\n+        // Acquire load, which could improve performance in highly-contended\n+        // situations. See [2].\n+        //\n         // [1]: (www.boost.org/doc/libs/1_55_0/doc/html/atomic/usage_examples.html)\n+        // [2]: (https://github.com/rust-lang/rust/pull/41714)\n         atomic::fence(Acquire);\n \n         unsafe {\n@@ -867,7 +892,7 @@ impl<T: ?Sized> Weak<T> {\n     #[inline]\n     fn inner(&self) -> &ArcInner<T> {\n         // See comments above for why this is \"safe\"\n-        unsafe { &**self.ptr }\n+        unsafe { self.ptr.as_ref() }\n     }\n }\n \n@@ -951,7 +976,7 @@ impl<T: ?Sized> Drop for Weak<T> {\n     /// assert!(other_weak_foo.upgrade().is_none());\n     /// ```\n     fn drop(&mut self) {\n-        let ptr = *self.ptr;\n+        let ptr = self.ptr.as_ptr();\n \n         // If we find out that we were the last weak pointer, then its time to\n         // deallocate the data entirely. See the discussion in Arc::drop() about\n@@ -1132,7 +1157,7 @@ impl<T: ?Sized + fmt::Debug> fmt::Debug for Arc<T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> fmt::Pointer for Arc<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::Pointer::fmt(&*self.ptr, f)\n+        fmt::Pointer::fmt(&self.ptr, f)\n     }\n }\n "}, {"sha": "8a39be8fae8a5210452d4acdaf02a9dfff85f776", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -68,6 +68,7 @@ use core::ops::{CoerceUnsized, Deref, DerefMut};\n use core::ops::{BoxPlace, Boxed, InPlace, Place, Placer};\n use core::ptr::{self, Unique};\n use core::convert::From;\n+use str::from_boxed_utf8_unchecked;\n \n /// A value that represents the heap. This is the default place that the `box`\n /// keyword allocates into when no place is supplied.\n@@ -155,7 +156,7 @@ fn make_place<T>() -> IntermediateBox<T> {\n     let align = mem::align_of::<T>();\n \n     let p = if size == 0 {\n-        heap::EMPTY as *mut u8\n+        mem::align_of::<T>() as *mut u8\n     } else {\n         let p = unsafe { heap::allocate(size, align) };\n         if p.is_null() {\n@@ -320,8 +321,7 @@ impl<T> Default for Box<[T]> {\n #[stable(feature = \"default_box_extra\", since = \"1.17.0\")]\n impl Default for Box<str> {\n     fn default() -> Box<str> {\n-        let default: Box<[u8]> = Default::default();\n-        unsafe { mem::transmute(default) }\n+        unsafe { from_boxed_utf8_unchecked(Default::default()) }\n     }\n }\n \n@@ -366,7 +366,7 @@ impl Clone for Box<str> {\n         let buf = RawVec::with_capacity(len);\n         unsafe {\n             ptr::copy_nonoverlapping(self.as_ptr(), buf.ptr(), len);\n-            mem::transmute(buf.into_box()) // bytes to str ~magic\n+            from_boxed_utf8_unchecked(buf.into_box())\n         }\n     }\n }\n@@ -441,8 +441,16 @@ impl<'a, T: Copy> From<&'a [T]> for Box<[T]> {\n #[stable(feature = \"box_from_slice\", since = \"1.17.0\")]\n impl<'a> From<&'a str> for Box<str> {\n     fn from(s: &'a str) -> Box<str> {\n-        let boxed: Box<[u8]> = Box::from(s.as_bytes());\n-        unsafe { mem::transmute(boxed) }\n+        unsafe { from_boxed_utf8_unchecked(Box::from(s.as_bytes())) }\n+    }\n+}\n+\n+#[stable(feature = \"boxed_str_conv\", since = \"1.19.0\")]\n+impl From<Box<str>> for Box<[u8]> {\n+    fn from(s: Box<str>) -> Self {\n+        unsafe {\n+            mem::transmute(s)\n+        }\n     }\n }\n "}, {"sha": "5ff21c86483c80cbbef1ef02fe516cc425b5dab6", "filename": "src/liballoc/heap.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fliballoc%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fliballoc%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fheap.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -138,7 +138,9 @@ pub fn usable_size(size: usize, align: usize) -> usize {\n ///\n /// This preserves the non-null invariant for types like `Box<T>`. The address\n /// may overlap with non-zero-size memory allocations.\n-pub const EMPTY: *mut () = 0x1 as *mut ();\n+#[rustc_deprecated(since = \"1.19\", reason = \"Use Unique/Shared::empty() instead\")]\n+#[unstable(feature = \"heap_api\", issue = \"27700\")]\n+pub const EMPTY: *mut () = 1 as *mut ();\n \n /// The allocator for unique pointers.\n // This function must not unwind. If it does, MIR trans will fail.\n@@ -147,7 +149,7 @@ pub const EMPTY: *mut () = 0x1 as *mut ();\n #[inline]\n unsafe fn exchange_malloc(size: usize, align: usize) -> *mut u8 {\n     if size == 0 {\n-        EMPTY as *mut u8\n+        align as *mut u8\n     } else {\n         let ptr = allocate(size, align);\n         if ptr.is_null() {"}, {"sha": "418a084da67878ff2c375b78cdf7153f70ed051c", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -87,7 +87,6 @@\n #![feature(needs_allocator)]\n #![feature(optin_builtin_traits)]\n #![feature(placement_in_syntax)]\n-#![cfg_attr(stage0, feature(pub_restricted))]\n #![feature(shared)]\n #![feature(staged_api)]\n #![feature(unboxed_closures)]\n@@ -129,6 +128,8 @@ mod boxed_test;\n pub mod arc;\n pub mod rc;\n pub mod raw_vec;\n+#[unstable(feature = \"str_box_extras\", issue = \"41119\")]\n+pub mod str;\n pub mod oom;\n \n pub use oom::oom;"}, {"sha": "7edf07944ec50c812aead220f6e66b4c69402b6a", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -22,13 +22,13 @@ use core::cmp;\n /// involved. This type is excellent for building your own data structures like Vec and VecDeque.\n /// In particular:\n ///\n-/// * Produces heap::EMPTY on zero-sized types\n-/// * Produces heap::EMPTY on zero-length allocations\n+/// * Produces Unique::empty() on zero-sized types\n+/// * Produces Unique::empty() on zero-length allocations\n /// * Catches all overflows in capacity computations (promotes them to \"capacity overflow\" panics)\n /// * Guards against 32-bit systems allocating more than isize::MAX bytes\n /// * Guards against overflowing your length\n /// * Aborts on OOM\n-/// * Avoids freeing heap::EMPTY\n+/// * Avoids freeing Unique::empty()\n /// * Contains a ptr::Unique and thus endows the user with all related benefits\n ///\n /// This type does not in anyway inspect the memory that it manages. When dropped it *will*\n@@ -55,15 +55,13 @@ impl<T> RawVec<T> {\n     /// it makes a RawVec with capacity `usize::MAX`. Useful for implementing\n     /// delayed allocation.\n     pub fn new() -> Self {\n-        unsafe {\n-            // !0 is usize::MAX. This branch should be stripped at compile time.\n-            let cap = if mem::size_of::<T>() == 0 { !0 } else { 0 };\n+        // !0 is usize::MAX. This branch should be stripped at compile time.\n+        let cap = if mem::size_of::<T>() == 0 { !0 } else { 0 };\n \n-            // heap::EMPTY doubles as \"unallocated\" and \"zero-sized allocation\"\n-            RawVec {\n-                ptr: Unique::new(heap::EMPTY as *mut T),\n-                cap: cap,\n-            }\n+        // Unique::empty() doubles as \"unallocated\" and \"zero-sized allocation\"\n+        RawVec {\n+            ptr: Unique::empty(),\n+            cap: cap,\n         }\n     }\n \n@@ -101,7 +99,7 @@ impl<T> RawVec<T> {\n \n             // handles ZSTs and `cap = 0` alike\n             let ptr = if alloc_size == 0 {\n-                heap::EMPTY as *mut u8\n+                mem::align_of::<T>() as *mut u8\n             } else {\n                 let align = mem::align_of::<T>();\n                 let ptr = if zeroed {\n@@ -148,10 +146,10 @@ impl<T> RawVec<T> {\n \n impl<T> RawVec<T> {\n     /// Gets a raw pointer to the start of the allocation. Note that this is\n-    /// heap::EMPTY if `cap = 0` or T is zero-sized. In the former case, you must\n+    /// Unique::empty() if `cap = 0` or T is zero-sized. In the former case, you must\n     /// be careful.\n     pub fn ptr(&self) -> *mut T {\n-        *self.ptr\n+        self.ptr.as_ptr()\n     }\n \n     /// Gets the capacity of the allocation.\n@@ -563,7 +561,7 @@ unsafe impl<#[may_dangle] T> Drop for RawVec<T> {\n \n             let num_bytes = elem_size * self.cap;\n             unsafe {\n-                heap::deallocate(*self.ptr as *mut _, num_bytes, align);\n+                heap::deallocate(self.ptr() as *mut u8, num_bytes, align);\n             }\n         }\n     }"}, {"sha": "d6dbf77bfac770466ff3dfb8de43e83397d217fd", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 22, "deletions": 28, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -230,7 +230,7 @@ use core::cell::Cell;\n use core::cmp::Ordering;\n use core::fmt;\n use core::hash::{Hash, Hasher};\n-use core::intrinsics::{abort, assume};\n+use core::intrinsics::abort;\n use core::marker;\n use core::marker::Unsize;\n use core::mem::{self, align_of_val, forget, size_of, size_of_val, uninitialized};\n@@ -358,7 +358,7 @@ impl<T> Rc<T> {\n     /// ```\n     #[stable(feature = \"rc_raw\", since = \"1.17.0\")]\n     pub fn into_raw(this: Self) -> *const T {\n-        let ptr = unsafe { &mut (*this.ptr.as_mut_ptr()).value as *const _ };\n+        let ptr: *const T = &*this;\n         mem::forget(this);\n         ptr\n     }\n@@ -395,7 +395,11 @@ impl<T> Rc<T> {\n     pub unsafe fn from_raw(ptr: *const T) -> Self {\n         // To find the corresponding pointer to the `RcBox` we need to subtract the offset of the\n         // `value` field from the pointer.\n-        Rc { ptr: Shared::new((ptr as *const u8).offset(-offset_of!(RcBox<T>, value)) as *const _) }\n+\n+        let ptr = (ptr as *const u8).offset(-offset_of!(RcBox<T>, value));\n+        Rc {\n+            ptr: Shared::new(ptr as *mut u8 as *mut _)\n+        }\n     }\n }\n \n@@ -451,7 +455,7 @@ impl<T> Rc<[T]> {\n             // Free the original allocation without freeing its (moved) contents.\n             box_free(Box::into_raw(value));\n \n-            Rc { ptr: Shared::new(ptr as *const _) }\n+            Rc { ptr: Shared::new(ptr as *mut _) }\n         }\n     }\n }\n@@ -553,8 +557,9 @@ impl<T: ?Sized> Rc<T> {\n     #[stable(feature = \"rc_unique\", since = \"1.4.0\")]\n     pub fn get_mut(this: &mut Self) -> Option<&mut T> {\n         if Rc::is_unique(this) {\n-            let inner = unsafe { &mut *this.ptr.as_mut_ptr() };\n-            Some(&mut inner.value)\n+            unsafe {\n+                Some(&mut this.ptr.as_mut().value)\n+            }\n         } else {\n             None\n         }\n@@ -578,9 +583,7 @@ impl<T: ?Sized> Rc<T> {\n     /// assert!(!Rc::ptr_eq(&five, &other_five));\n     /// ```\n     pub fn ptr_eq(this: &Self, other: &Self) -> bool {\n-        let this_ptr: *const RcBox<T> = *this.ptr;\n-        let other_ptr: *const RcBox<T> = *other.ptr;\n-        this_ptr == other_ptr\n+        this.ptr.as_ptr() == other.ptr.as_ptr()\n     }\n }\n \n@@ -623,7 +626,7 @@ impl<T: Clone> Rc<T> {\n         } else if Rc::weak_count(this) != 0 {\n             // Can just steal the data, all that's left is Weaks\n             unsafe {\n-                let mut swap = Rc::new(ptr::read(&(**this.ptr).value));\n+                let mut swap = Rc::new(ptr::read(&this.ptr.as_ref().value));\n                 mem::swap(this, &mut swap);\n                 swap.dec_strong();\n                 // Remove implicit strong-weak ref (no need to craft a fake\n@@ -637,8 +640,9 @@ impl<T: Clone> Rc<T> {\n         // reference count is guaranteed to be 1 at this point, and we required\n         // the `Rc<T>` itself to be `mut`, so we're returning the only possible\n         // reference to the inner value.\n-        let inner = unsafe { &mut *this.ptr.as_mut_ptr() };\n-        &mut inner.value\n+        unsafe {\n+            &mut this.ptr.as_mut().value\n+        }\n     }\n }\n \n@@ -683,12 +687,12 @@ unsafe impl<#[may_dangle] T: ?Sized> Drop for Rc<T> {\n     /// ```\n     fn drop(&mut self) {\n         unsafe {\n-            let ptr = self.ptr.as_mut_ptr();\n+            let ptr = self.ptr.as_ptr();\n \n             self.dec_strong();\n             if self.strong() == 0 {\n                 // destroy the contained object\n-                ptr::drop_in_place(&mut (*ptr).value);\n+                ptr::drop_in_place(self.ptr.as_mut());\n \n                 // remove the implicit \"strong weak\" pointer now that we've\n                 // destroyed the contents.\n@@ -925,7 +929,7 @@ impl<T: ?Sized + fmt::Debug> fmt::Debug for Rc<T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> fmt::Pointer for Rc<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::Pointer::fmt(&*self.ptr, f)\n+        fmt::Pointer::fmt(&self.ptr, f)\n     }\n }\n \n@@ -1067,7 +1071,7 @@ impl<T: ?Sized> Drop for Weak<T> {\n     /// ```\n     fn drop(&mut self) {\n         unsafe {\n-            let ptr = *self.ptr;\n+            let ptr = self.ptr.as_ptr();\n \n             self.dec_weak();\n             // the weak count starts at 1, and will only go to zero if all\n@@ -1175,12 +1179,7 @@ impl<T: ?Sized> RcBoxPtr<T> for Rc<T> {\n     #[inline(always)]\n     fn inner(&self) -> &RcBox<T> {\n         unsafe {\n-            // Safe to assume this here, as if it weren't true, we'd be breaking\n-            // the contract anyway.\n-            // This allows the null check to be elided in the destructor if we\n-            // manipulated the reference count in the same function.\n-            assume(!(*(&self.ptr as *const _ as *const *const ())).is_null());\n-            &(**self.ptr)\n+            self.ptr.as_ref()\n         }\n     }\n }\n@@ -1189,12 +1188,7 @@ impl<T: ?Sized> RcBoxPtr<T> for Weak<T> {\n     #[inline(always)]\n     fn inner(&self) -> &RcBox<T> {\n         unsafe {\n-            // Safe to assume this here, as if it weren't true, we'd be breaking\n-            // the contract anyway.\n-            // This allows the null check to be elided in the destructor if we\n-            // manipulated the reference count in the same function.\n-            assume(!(*(&self.ptr as *const _ as *const *const ())).is_null());\n-            &(**self.ptr)\n+            self.ptr.as_ref()\n         }\n     }\n }"}, {"sha": "c87db16a0f417595c1bacc46c4b5df12c7d33ac7", "filename": "src/liballoc/str.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fliballoc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fliballoc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstr.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2012-2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Methods for dealing with boxed strings.\n+use core::mem;\n+\n+use boxed::Box;\n+\n+/// Converts a boxed slice of bytes to a boxed string slice without checking\n+/// that the string contains valid UTF-8.\n+#[unstable(feature = \"str_box_extras\", issue = \"41119\")]\n+pub unsafe fn from_boxed_utf8_unchecked(v: Box<[u8]>) -> Box<str> {\n+    mem::transmute(v)\n+}"}, {"sha": "859e414a6fe7c18afc9789b77c0bc304f2b2c9d4", "filename": "src/liballoc_jemalloc/build.rs", "status": "modified", "additions": 1, "deletions": 23, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fliballoc_jemalloc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Fliballoc_jemalloc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Fbuild.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -93,29 +93,7 @@ fn main() {\n        .env(\"AR\", &ar)\n        .env(\"RANLIB\", format!(\"{} s\", ar.display()));\n \n-    if target.contains(\"windows\") {\n-        // A bit of history here, this used to be --enable-lazy-lock added in\n-        // #14006 which was filed with jemalloc in jemalloc/jemalloc#83 which\n-        // was also reported to MinGW:\n-        //\n-        //  http://sourceforge.net/p/mingw-w64/bugs/395/\n-        //\n-        // When updating jemalloc to 4.0, however, it was found that binaries\n-        // would exit with the status code STATUS_RESOURCE_NOT_OWNED indicating\n-        // that a thread was unlocking a mutex it never locked. Disabling this\n-        // \"lazy lock\" option seems to fix the issue, but it was enabled by\n-        // default for MinGW targets in 13473c7 for jemalloc.\n-        //\n-        // As a result of all that, force disabling lazy lock on Windows, and\n-        // after reading some code it at least *appears* that the initialization\n-        // of mutexes is otherwise ok in jemalloc, so shouldn't cause problems\n-        // hopefully...\n-        //\n-        // tl;dr: make windows behave like other platforms by disabling lazy\n-        //        locking, but requires passing an option due to a historical\n-        //        default with jemalloc.\n-        cmd.arg(\"--disable-lazy-lock\");\n-    } else if target.contains(\"ios\") {\n+    if target.contains(\"ios\") {\n         cmd.arg(\"--disable-tls\");\n     } else if target.contains(\"android\") {\n         // We force android to have prefixed symbols because apparently"}, {"sha": "4338ac7fd022c362f1065147fad6ecc8eb445b67", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -19,7 +19,7 @@\n //! objects of a single type.\n \n #![crate_name = \"arena\"]\n-#![unstable(feature = \"rustc_private\", issue = \"27812\")]\n+#![cfg_attr(stage0, unstable(feature = \"rustc_private\", issue = \"27812\"))]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n@@ -31,9 +31,9 @@\n #![feature(alloc)]\n #![feature(core_intrinsics)]\n #![feature(dropck_eyepatch)]\n-#![feature(heap_api)]\n #![feature(generic_param_attrs)]\n-#![feature(staged_api)]\n+#![feature(needs_drop)]\n+#![cfg_attr(stage0, feature(staged_api))]\n #![cfg_attr(test, feature(test))]\n \n #![allow(deprecated)]\n@@ -48,7 +48,6 @@ use std::mem;\n use std::ptr;\n use std::slice;\n \n-use alloc::heap;\n use alloc::raw_vec::RawVec;\n \n /// An arena that can hold objects of only one type.\n@@ -84,7 +83,7 @@ impl<T> TypedArenaChunk<T> {\n     unsafe fn destroy(&mut self, len: usize) {\n         // The branch on needs_drop() is an -O1 performance optimization.\n         // Without the branch, dropping TypedArena<u8> takes linear time.\n-        if intrinsics::needs_drop::<T>() {\n+        if mem::needs_drop::<T>() {\n             let mut start = self.start();\n             // Destroy all allocated objects.\n             for _ in 0..len {\n@@ -140,7 +139,7 @@ impl<T> TypedArena<T> {\n         unsafe {\n             if mem::size_of::<T>() == 0 {\n                 self.ptr.set(intrinsics::arith_offset(self.ptr.get() as *mut u8, 1) as *mut T);\n-                let ptr = heap::EMPTY as *mut T;\n+                let ptr = mem::align_of::<T>() as *mut T;\n                 // Don't drop the object. This `write` is equivalent to `forget`.\n                 ptr::write(ptr, object);\n                 &mut *ptr\n@@ -352,7 +351,7 @@ impl DroplessArena {\n     #[inline]\n     pub fn alloc<T>(&self, object: T) -> &mut T {\n         unsafe {\n-            assert!(!intrinsics::needs_drop::<T>());\n+            assert!(!mem::needs_drop::<T>());\n             assert!(mem::size_of::<T>() != 0);\n \n             self.align_for::<T>();\n@@ -381,9 +380,7 @@ impl DroplessArena {\n     #[inline]\n     pub fn alloc_slice<T>(&self, slice: &[T]) -> &mut [T]\n         where T: Copy {\n-        unsafe {\n-            assert!(!intrinsics::needs_drop::<T>());\n-        }\n+        assert!(!mem::needs_drop::<T>());\n         assert!(mem::size_of::<T>() != 0);\n         assert!(slice.len() != 0);\n         self.align_for::<T>();"}, {"sha": "9f356e4b57912af410b56fcb4f4b7903a4c27c88", "filename": "src/libcollections/benches/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcollections%2Fbenches%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcollections%2Fbenches%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbenches%2Flib.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -10,7 +10,9 @@\n \n #![deny(warnings)]\n \n+#![feature(i128_type)]\n #![feature(rand)]\n+#![feature(repr_simd)]\n #![feature(sort_unstable)]\n #![feature(test)]\n "}, {"sha": "0079f2d01036cf76d5fa956a75ce7acdb0ec127f", "filename": "src/libcollections/benches/slice.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcollections%2Fbenches%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcollections%2Fbenches%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbenches%2Fslice.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -290,3 +290,28 @@ sort!(sort_unstable, sort_unstable_large_random, gen_random, 10000);\n sort!(sort_unstable, sort_unstable_large_big_random, gen_big_random, 10000);\n sort!(sort_unstable, sort_unstable_large_strings, gen_strings, 10000);\n sort_expensive!(sort_unstable_by, sort_unstable_large_random_expensive, gen_random, 10000);\n+\n+macro_rules! reverse {\n+    ($name:ident, $ty:ty, $f:expr) => {\n+        #[bench]\n+        fn $name(b: &mut Bencher) {\n+            // odd length and offset by 1 to be as unaligned as possible\n+            let n = 0xFFFFF;\n+            let mut v: Vec<_> =\n+                (0..1+(n / mem::size_of::<$ty>() as u64))\n+                .map($f)\n+                .collect();\n+            b.iter(|| black_box(&mut v[1..]).reverse());\n+            b.bytes = n;\n+        }\n+    }\n+}\n+\n+reverse!(reverse_u8, u8, |x| x as u8);\n+reverse!(reverse_u16, u16, |x| x as u16);\n+reverse!(reverse_u8x3, [u8;3], |x| [x as u8, (x>>8) as u8, (x>>16) as u8]);\n+reverse!(reverse_u32, u32, |x| x as u32);\n+reverse!(reverse_u64, u64, |x| x as u64);\n+reverse!(reverse_u128, u128, |x| x as u128);\n+#[repr(simd)] struct F64x4(f64, f64, f64, f64);\n+reverse!(reverse_simd_f64x4, F64x4, |x| { let x = x as f64; F64x4(x,x,x,x) });"}, {"sha": "fc4063fae927754353d5e736099f0a365b0dd2d7", "filename": "src/libcollections/benches/str.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcollections%2Fbenches%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcollections%2Fbenches%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbenches%2Fstr.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -195,30 +195,34 @@ fn bench_contains_equal(b: &mut Bencher) {\n     })\n }\n \n+\n macro_rules! make_test_inner {\n-    ($s:ident, $code:expr, $name:ident, $str:expr) => {\n+    ($s:ident, $code:expr, $name:ident, $str:expr, $iters:expr) => {\n         #[bench]\n         fn $name(bencher: &mut Bencher) {\n             let mut $s = $str;\n             black_box(&mut $s);\n-            bencher.iter(|| $code);\n+            bencher.iter(|| for _ in 0..$iters { black_box($code); });\n         }\n     }\n }\n \n macro_rules! make_test {\n     ($name:ident, $s:ident, $code:expr) => {\n+        make_test!($name, $s, $code, 1);\n+    };\n+    ($name:ident, $s:ident, $code:expr, $iters:expr) => {\n         mod $name {\n             use test::Bencher;\n             use test::black_box;\n \n             // Short strings: 65 bytes each\n             make_test_inner!($s, $code, short_ascii,\n-                \"Mary had a little lamb, Little lamb Mary had a littl lamb, lamb!\");\n+                \"Mary had a little lamb, Little lamb Mary had a littl lamb, lamb!\", $iters);\n             make_test_inner!($s, $code, short_mixed,\n-                \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam; Mary had a little lamb, Little lam!\");\n+                \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam; Mary had a little lamb, Little lam!\", $iters);\n             make_test_inner!($s, $code, short_pile_of_poo,\n-                \"\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9!\");\n+                \"\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9!\", $iters);\n             make_test_inner!($s, $code, long_lorem_ipsum,\"\\\n Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse quis lorem sit amet dolor \\\n ultricies condimentum. Praesent iaculis purus elit, ac malesuada quam malesuada in. Duis sed orci \\\n@@ -253,7 +257,7 @@ Nam lectus enim, dapibus non nisi tempor, consectetur convallis massa. Maecenas\n feugiat. Etiam quis mauris vel risus luctus mattis a a nunc. Nullam orci quam, imperdiet id \\\n vehicula in, porttitor ut nibh. Duis sagittis adipiscing nisl vitae congue. Donec mollis risus eu \\\n leo suscipit, varius porttitor nulla porta. Pellentesque ut sem nec nisi euismod vehicula. Nulla \\\n-malesuada sollicitudin quam eu fermentum!\");\n+malesuada sollicitudin quam eu fermentum!\", $iters);\n         }\n     }\n }\n@@ -288,6 +292,13 @@ make_test!(find_zzz_char, s, s.find('\\u{1F4A4}'));\n make_test!(rfind_zzz_char, s, s.rfind('\\u{1F4A4}'));\n make_test!(find_zzz_str, s, s.find(\"\\u{1F4A4}\"));\n \n+make_test!(starts_with_ascii_char, s, s.starts_with('/'), 1024);\n+make_test!(ends_with_ascii_char, s, s.ends_with('/'), 1024);\n+make_test!(starts_with_unichar, s, s.starts_with('\\u{1F4A4}'), 1024);\n+make_test!(ends_with_unichar, s, s.ends_with('\\u{1F4A4}'), 1024);\n+make_test!(starts_with_str, s, s.starts_with(\"\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\"), 1024);\n+make_test!(ends_with_str, s, s.ends_with(\"\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\"), 1024);\n+\n make_test!(split_space_char, s, s.split(' ').count());\n make_test!(split_terminator_space_char, s, s.split_terminator(' ').count());\n "}, {"sha": "4e9dea09f79a0d0a654e882a9699dc12f27b9ce7", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -268,7 +268,7 @@ impl<'a, T: Ord> DerefMut for PeekMut<'a, T> {\n \n impl<'a, T: Ord> PeekMut<'a, T> {\n     /// Removes the peeked value from the heap and returns it.\n-    #[unstable(feature = \"binary_heap_peek_mut_pop\", issue = \"38863\")]\n+    #[stable(feature = \"binary_heap_peek_mut_pop\", since = \"1.18.0\")]\n     pub fn pop(mut this: PeekMut<'a, T>) -> T {\n         let value = this.heap.pop().unwrap();\n         this.sift = false;"}, {"sha": "52cdd39d8f963c0666bcc26ba71765ad977c6917", "filename": "src/libcollections/btree/node.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fnode.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -152,12 +152,12 @@ impl<K, V> BoxedNode<K, V> {\n     }\n \n     unsafe fn from_ptr(ptr: NonZero<*const LeafNode<K, V>>) -> Self {\n-        BoxedNode { ptr: Unique::new(*ptr as *mut LeafNode<K, V>) }\n+        BoxedNode { ptr: Unique::new(ptr.get() as *mut LeafNode<K, V>) }\n     }\n \n     fn as_ptr(&self) -> NonZero<*const LeafNode<K, V>> {\n         unsafe {\n-            NonZero::new(*self.ptr as *const LeafNode<K, V>)\n+            NonZero::new(self.ptr.as_ptr())\n         }\n     }\n }\n@@ -241,7 +241,7 @@ impl<K, V> Root<K, V> {\n     pub fn pop_level(&mut self) {\n         debug_assert!(self.height > 0);\n \n-        let top = *self.node.ptr as *mut u8;\n+        let top = self.node.ptr.as_ptr() as *mut u8;\n \n         self.node = unsafe {\n             BoxedNode::from_ptr(self.as_mut()\n@@ -308,15 +308,15 @@ unsafe impl<K: Send, V: Send, Type> Send\n impl<BorrowType, K, V> NodeRef<BorrowType, K, V, marker::Internal> {\n     fn as_internal(&self) -> &InternalNode<K, V> {\n         unsafe {\n-            &*(*self.node as *const InternalNode<K, V>)\n+            &*(self.node.get() as *const InternalNode<K, V>)\n         }\n     }\n }\n \n impl<'a, K, V> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {\n     fn as_internal_mut(&mut self) -> &mut InternalNode<K, V> {\n         unsafe {\n-            &mut *(*self.node as *mut InternalNode<K, V>)\n+            &mut *(self.node.get() as *mut InternalNode<K, V>)\n         }\n     }\n }\n@@ -358,7 +358,7 @@ impl<BorrowType, K, V, Type> NodeRef<BorrowType, K, V, Type> {\n \n     fn as_leaf(&self) -> &LeafNode<K, V> {\n         unsafe {\n-            &**self.node\n+            &*self.node.get()\n         }\n     }\n \n@@ -510,7 +510,7 @@ impl<'a, K, V, Type> NodeRef<marker::Mut<'a>, K, V, Type> {\n \n     fn as_leaf_mut(&mut self) -> &mut LeafNode<K, V> {\n         unsafe {\n-            &mut *(*self.node as *mut LeafNode<K, V>)\n+            &mut *(self.node.get() as *mut LeafNode<K, V>)\n         }\n     }\n \n@@ -1253,13 +1253,13 @@ impl<'a, K, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::\n                 }\n \n                 heap::deallocate(\n-                    *right_node.node as *mut u8,\n+                    right_node.node.get() as *mut u8,\n                     mem::size_of::<InternalNode<K, V>>(),\n                     mem::align_of::<InternalNode<K, V>>()\n                 );\n             } else {\n                 heap::deallocate(\n-                    *right_node.node as *mut u8,\n+                    right_node.node.get() as *mut u8,\n                     mem::size_of::<LeafNode<K, V>>(),\n                     mem::align_of::<LeafNode<K, V>>()\n                 );"}, {"sha": "842f2f44fff9e8166652695f93e50fdfdf96ca9c", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -60,6 +60,7 @@\n #![feature(specialization)]\n #![feature(staged_api)]\n #![feature(str_internals)]\n+#![feature(str_box_extras)]\n #![feature(str_mut_extras)]\n #![feature(trusted_len)]\n #![feature(unicode)]"}, {"sha": "ae258083546f4fddcb52cbeb22920527de8f66a9", "filename": "src/libcollections/linked_list.rs", "status": "modified", "additions": 43, "deletions": 29, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flinked_list.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -161,7 +161,7 @@ impl<T> LinkedList<T> {\n \n             match self.head {\n                 None => self.tail = node,\n-                Some(head) => (*head.as_mut_ptr()).prev = node,\n+                Some(mut head) => head.as_mut().prev = node,\n             }\n \n             self.head = node;\n@@ -173,12 +173,12 @@ impl<T> LinkedList<T> {\n     #[inline]\n     fn pop_front_node(&mut self) -> Option<Box<Node<T>>> {\n         self.head.map(|node| unsafe {\n-            let node = Box::from_raw(node.as_mut_ptr());\n+            let node = Box::from_raw(node.as_ptr());\n             self.head = node.next;\n \n             match self.head {\n                 None => self.tail = None,\n-                Some(head) => (*head.as_mut_ptr()).prev = None,\n+                Some(mut head) => head.as_mut().prev = None,\n             }\n \n             self.len -= 1;\n@@ -196,7 +196,7 @@ impl<T> LinkedList<T> {\n \n             match self.tail {\n                 None => self.head = node,\n-                Some(tail) => (*tail.as_mut_ptr()).next = node,\n+                Some(mut tail) => tail.as_mut().next = node,\n             }\n \n             self.tail = node;\n@@ -208,12 +208,12 @@ impl<T> LinkedList<T> {\n     #[inline]\n     fn pop_back_node(&mut self) -> Option<Box<Node<T>>> {\n         self.tail.map(|node| unsafe {\n-            let node = Box::from_raw(node.as_mut_ptr());\n+            let node = Box::from_raw(node.as_ptr());\n             self.tail = node.prev;\n \n             match self.tail {\n                 None => self.head = None,\n-                Some(tail) => (*tail.as_mut_ptr()).next = None,\n+                Some(mut tail) => tail.as_mut().next = None,\n             }\n \n             self.len -= 1;\n@@ -285,11 +285,11 @@ impl<T> LinkedList<T> {\n     pub fn append(&mut self, other: &mut Self) {\n         match self.tail {\n             None => mem::swap(self, other),\n-            Some(tail) => {\n-                if let Some(other_head) = other.head.take() {\n+            Some(mut tail) => {\n+                if let Some(mut other_head) = other.head.take() {\n                     unsafe {\n-                        (*tail.as_mut_ptr()).next = Some(other_head);\n-                        (*other_head.as_mut_ptr()).prev = Some(tail);\n+                        tail.as_mut().next = Some(other_head);\n+                        other_head.as_mut().prev = Some(tail);\n                     }\n \n                     self.tail = other.tail.take();\n@@ -477,7 +477,9 @@ impl<T> LinkedList<T> {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn front(&self) -> Option<&T> {\n-        self.head.map(|node| unsafe { &(**node).element })\n+        unsafe {\n+            self.head.as_ref().map(|node| &node.as_ref().element)\n+        }\n     }\n \n     /// Provides a mutable reference to the front element, or `None` if the list\n@@ -503,7 +505,9 @@ impl<T> LinkedList<T> {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn front_mut(&mut self) -> Option<&mut T> {\n-        self.head.map(|node| unsafe { &mut (*node.as_mut_ptr()).element })\n+        unsafe {\n+            self.head.as_mut().map(|node| &mut node.as_mut().element)\n+        }\n     }\n \n     /// Provides a reference to the back element, or `None` if the list is\n@@ -523,7 +527,9 @@ impl<T> LinkedList<T> {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn back(&self) -> Option<&T> {\n-        self.tail.map(|node| unsafe { &(**node).element })\n+        unsafe {\n+            self.tail.as_ref().map(|node| &node.as_ref().element)\n+        }\n     }\n \n     /// Provides a mutable reference to the back element, or `None` if the list\n@@ -549,7 +555,9 @@ impl<T> LinkedList<T> {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn back_mut(&mut self) -> Option<&mut T> {\n-        self.tail.map(|node| unsafe { &mut (*node.as_mut_ptr()).element })\n+        unsafe {\n+            self.tail.as_mut().map(|node| &mut node.as_mut().element)\n+        }\n     }\n \n     /// Adds an element first in the list.\n@@ -694,9 +702,9 @@ impl<T> LinkedList<T> {\n         let second_part_head;\n \n         unsafe {\n-            second_part_head = (*split_node.unwrap().as_mut_ptr()).next.take();\n-            if let Some(head) = second_part_head {\n-                (*head.as_mut_ptr()).prev = None;\n+            second_part_head = split_node.unwrap().as_mut().next.take();\n+            if let Some(mut head) = second_part_head {\n+                head.as_mut().prev = None;\n             }\n         }\n \n@@ -788,7 +796,8 @@ impl<'a, T> Iterator for Iter<'a, T> {\n             None\n         } else {\n             self.head.map(|node| unsafe {\n-                let node = &**node;\n+                // Need an unbound lifetime to get 'a\n+                let node = &*node.as_ptr();\n                 self.len -= 1;\n                 self.head = node.next;\n                 &node.element\n@@ -810,7 +819,8 @@ impl<'a, T> DoubleEndedIterator for Iter<'a, T> {\n             None\n         } else {\n             self.tail.map(|node| unsafe {\n-                let node = &**node;\n+                // Need an unbound lifetime to get 'a\n+                let node = &*node.as_ptr();\n                 self.len -= 1;\n                 self.tail = node.prev;\n                 &node.element\n@@ -835,7 +845,8 @@ impl<'a, T> Iterator for IterMut<'a, T> {\n             None\n         } else {\n             self.head.map(|node| unsafe {\n-                let node = &mut *node.as_mut_ptr();\n+                // Need an unbound lifetime to get 'a\n+                let node = &mut *node.as_ptr();\n                 self.len -= 1;\n                 self.head = node.next;\n                 &mut node.element\n@@ -857,7 +868,8 @@ impl<'a, T> DoubleEndedIterator for IterMut<'a, T> {\n             None\n         } else {\n             self.tail.map(|node| unsafe {\n-                let node = &mut *node.as_mut_ptr();\n+                // Need an unbound lifetime to get 'a\n+                let node = &mut *node.as_ptr();\n                 self.len -= 1;\n                 self.tail = node.prev;\n                 &mut node.element\n@@ -903,8 +915,8 @@ impl<'a, T> IterMut<'a, T> {\n     pub fn insert_next(&mut self, element: T) {\n         match self.head {\n             None => self.list.push_back(element),\n-            Some(head) => unsafe {\n-                let prev = match (**head).prev {\n+            Some(mut head) => unsafe {\n+                let mut prev = match head.as_ref().prev {\n                     None => return self.list.push_front(element),\n                     Some(prev) => prev,\n                 };\n@@ -915,8 +927,8 @@ impl<'a, T> IterMut<'a, T> {\n                     element: element,\n                 })));\n \n-                (*prev.as_mut_ptr()).next = node;\n-                (*head.as_mut_ptr()).prev = node;\n+                prev.as_mut().next = node;\n+                head.as_mut().prev = node;\n \n                 self.list.len += 1;\n             },\n@@ -948,7 +960,9 @@ impl<'a, T> IterMut<'a, T> {\n         if self.len == 0 {\n             None\n         } else {\n-            self.head.map(|node| unsafe { &mut (*node.as_mut_ptr()).element })\n+            unsafe {\n+                self.head.as_mut().map(|node| &mut node.as_mut().element)\n+            }\n         }\n     }\n }\n@@ -1276,21 +1290,21 @@ mod tests {\n                     assert_eq!(0, list.len);\n                     return;\n                 }\n-                Some(node) => node_ptr = &**node,\n+                Some(node) => node_ptr = &*node.as_ptr(),\n             }\n             loop {\n                 match (last_ptr, node_ptr.prev) {\n                     (None, None) => {}\n                     (None, _) => panic!(\"prev link for head\"),\n                     (Some(p), Some(pptr)) => {\n-                        assert_eq!(p as *const Node<T>, *pptr as *const Node<T>);\n+                        assert_eq!(p as *const Node<T>, pptr.as_ptr() as *const Node<T>);\n                     }\n                     _ => panic!(\"prev link is none, not good\"),\n                 }\n                 match node_ptr.next {\n                     Some(next) => {\n                         last_ptr = Some(node_ptr);\n-                        node_ptr = &**next;\n+                        node_ptr = &*next.as_ptr();\n                         len += 1;\n                     }\n                     None => {"}, {"sha": "5696f5fe6a7ba80bdc6d15383dbd785db3547476", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -1341,6 +1341,9 @@ impl<T> [T] {\n     ///\n     /// The length of `src` must be the same as `self`.\n     ///\n+    /// If `src` implements `Copy`, it can be more performant to use\n+    /// [`copy_from_slice`].\n+    ///\n     /// # Panics\n     ///\n     /// This function will panic if the two slices have different lengths.\n@@ -1354,6 +1357,8 @@ impl<T> [T] {\n     /// dst.clone_from_slice(&src);\n     /// assert!(dst == [1, 2, 3]);\n     /// ```\n+    ///\n+    /// [`copy_from_slice`]: #method.copy_from_slice\n     #[stable(feature = \"clone_from_slice\", since = \"1.7.0\")]\n     pub fn clone_from_slice(&mut self, src: &[T]) where T: Clone {\n         core_slice::SliceExt::clone_from_slice(self, src)\n@@ -1363,6 +1368,8 @@ impl<T> [T] {\n     ///\n     /// The length of `src` must be the same as `self`.\n     ///\n+    /// If `src` does not implement `Copy`, use [`clone_from_slice`].\n+    ///\n     /// # Panics\n     ///\n     /// This function will panic if the two slices have different lengths.\n@@ -1376,6 +1383,8 @@ impl<T> [T] {\n     /// dst.copy_from_slice(&src);\n     /// assert_eq!(src, dst);\n     /// ```\n+    ///\n+    /// [`clone_from_slice`]: #method.clone_from_slice\n     #[stable(feature = \"copy_from_slice\", since = \"1.9.0\")]\n     pub fn copy_from_slice(&mut self, src: &[T]) where T: Copy {\n         core_slice::SliceExt::copy_from_slice(self, src)\n@@ -1401,6 +1410,9 @@ impl<T> [T] {\n \n     /// Converts `self` into a vector without clones or allocation.\n     ///\n+    /// The resulting vector can be converted back into a box via\n+    /// `Vec<T>`'s `into_boxed_slice` method.\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -1519,13 +1531,9 @@ impl<T: Clone> ToOwned for [T] {\n         self.to_vec()\n     }\n \n-    // HACK(japaric): with cfg(test) the inherent `[T]::to_vec`, which is required for this method\n-    // definition, is not available. Since we don't require this method for testing purposes, I'll\n-    // just stub it\n-    // NB see the slice::hack module in slice.rs for more information\n     #[cfg(test)]\n     fn to_owned(&self) -> Vec<T> {\n-        panic!(\"not available with cfg(test)\")\n+        hack::to_vec(self)\n     }\n \n     fn clone_into(&self, target: &mut Vec<T>) {"}, {"sha": "7e67befb700dbcd16a5039cf6bdb26716417744b", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 24, "deletions": 13, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -70,14 +70,17 @@ pub use core::str::{Matches, RMatches};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::str::{MatchIndices, RMatchIndices};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use core::str::{from_utf8, Chars, CharIndices, Bytes};\n+pub use core::str::{from_utf8, from_utf8_mut, Chars, CharIndices, Bytes};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::str::{from_utf8_unchecked, from_utf8_unchecked_mut, ParseBoolError};\n+#[unstable(feature = \"str_box_extras\", issue = \"41119\")]\n+pub use alloc::str::from_boxed_utf8_unchecked;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use std_unicode::str::SplitWhitespace;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::str::pattern;\n \n+\n #[unstable(feature = \"slice_concat_ext\",\n            reason = \"trait should not have to exist\",\n            issue = \"27747\")]\n@@ -173,18 +176,6 @@ impl<'a> Iterator for EncodeUtf16<'a> {\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<'a> FusedIterator for EncodeUtf16<'a> {}\n \n-// Return the initial codepoint accumulator for the first byte.\n-// The first byte is special, only want bottom 5 bits for width 2, 4 bits\n-// for width 3, and 3 bits for width 4\n-macro_rules! utf8_first_byte {\n-    ($byte:expr, $width:expr) => (($byte & (0x7F >> $width)) as u32)\n-}\n-\n-// return the value of $ch updated with continuation byte $byte\n-macro_rules! utf8_acc_cont_byte {\n-    ($ch:expr, $byte:expr) => (($ch << 6) | ($byte & 63) as u32)\n-}\n-\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Borrow<str> for String {\n     #[inline]\n@@ -822,6 +813,7 @@ impl str {\n     /// assert!(!bananas.contains(\"apples\"));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn contains<'a, P: Pattern<'a>>(&'a self, pat: P) -> bool {\n         core_str::StrExt::contains(self, pat)\n     }\n@@ -909,6 +901,7 @@ impl str {\n     /// assert_eq!(s.find(x), None);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn find<'a, P: Pattern<'a>>(&'a self, pat: P) -> Option<usize> {\n         core_str::StrExt::find(self, pat)\n     }\n@@ -953,6 +946,7 @@ impl str {\n     /// assert_eq!(s.rfind(x), None);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn rfind<'a, P: Pattern<'a>>(&'a self, pat: P) -> Option<usize>\n         where P::Searcher: ReverseSearcher<'a>\n     {\n@@ -1066,6 +1060,7 @@ impl str {\n     ///\n     /// [`split_whitespace`]: #method.split_whitespace\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn split<'a, P: Pattern<'a>>(&'a self, pat: P) -> Split<'a, P> {\n         core_str::StrExt::split(self, pat)\n     }\n@@ -1115,6 +1110,7 @@ impl str {\n     /// assert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn rsplit<'a, P: Pattern<'a>>(&'a self, pat: P) -> RSplit<'a, P>\n         where P::Searcher: ReverseSearcher<'a>\n     {\n@@ -1161,6 +1157,7 @@ impl str {\n     /// assert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn split_terminator<'a, P: Pattern<'a>>(&'a self, pat: P) -> SplitTerminator<'a, P> {\n         core_str::StrExt::split_terminator(self, pat)\n     }\n@@ -1204,6 +1201,7 @@ impl str {\n     /// assert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn rsplit_terminator<'a, P: Pattern<'a>>(&'a self, pat: P) -> RSplitTerminator<'a, P>\n         where P::Searcher: ReverseSearcher<'a>\n     {\n@@ -1256,6 +1254,7 @@ impl str {\n     /// assert_eq!(v, [\"abc\", \"defXghi\"]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn splitn<'a, P: Pattern<'a>>(&'a self, n: usize, pat: P) -> SplitN<'a, P> {\n         core_str::StrExt::splitn(self, n, pat)\n     }\n@@ -1303,6 +1302,7 @@ impl str {\n     /// assert_eq!(v, [\"ghi\", \"abc1def\"]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn rsplitn<'a, P: Pattern<'a>>(&'a self, n: usize, pat: P) -> RSplitN<'a, P>\n         where P::Searcher: ReverseSearcher<'a>\n     {\n@@ -1343,6 +1343,7 @@ impl str {\n     /// assert_eq!(v, [\"1\", \"2\", \"3\"]);\n     /// ```\n     #[stable(feature = \"str_matches\", since = \"1.2.0\")]\n+    #[inline]\n     pub fn matches<'a, P: Pattern<'a>>(&'a self, pat: P) -> Matches<'a, P> {\n         core_str::StrExt::matches(self, pat)\n     }\n@@ -1379,6 +1380,7 @@ impl str {\n     /// assert_eq!(v, [\"3\", \"2\", \"1\"]);\n     /// ```\n     #[stable(feature = \"str_matches\", since = \"1.2.0\")]\n+    #[inline]\n     pub fn rmatches<'a, P: Pattern<'a>>(&'a self, pat: P) -> RMatches<'a, P>\n         where P::Searcher: ReverseSearcher<'a>\n     {\n@@ -1424,6 +1426,7 @@ impl str {\n     /// assert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n     /// ```\n     #[stable(feature = \"str_match_indices\", since = \"1.5.0\")]\n+    #[inline]\n     pub fn match_indices<'a, P: Pattern<'a>>(&'a self, pat: P) -> MatchIndices<'a, P> {\n         core_str::StrExt::match_indices(self, pat)\n     }\n@@ -1466,6 +1469,7 @@ impl str {\n     /// assert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n     /// ```\n     #[stable(feature = \"str_match_indices\", since = \"1.5.0\")]\n+    #[inline]\n     pub fn rmatch_indices<'a, P: Pattern<'a>>(&'a self, pat: P) -> RMatchIndices<'a, P>\n         where P::Searcher: ReverseSearcher<'a>\n     {\n@@ -1715,6 +1719,12 @@ impl str {\n         core_str::StrExt::parse(self)\n     }\n \n+    /// Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n+    #[unstable(feature = \"str_box_extras\", issue = \"41119\")]\n+    pub fn into_boxed_bytes(self: Box<str>) -> Box<[u8]> {\n+        self.into()\n+    }\n+\n     /// Replaces all matches of a pattern with another string.\n     ///\n     /// `replace` creates a new [`String`], and copies the data from this string slice into it.\n@@ -1740,6 +1750,7 @@ impl str {\n     /// assert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn replace<'a, P: Pattern<'a>>(&'a self, from: P, to: &str) -> String {\n         let mut result = String::new();\n         let mut last_end = 0;"}, {"sha": "55f0e01548fee05a1e83a7a50349947491f8cb3a", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 152, "deletions": 10, "changes": 162, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -56,10 +56,11 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n+use alloc::str as alloc_str;\n+\n use core::fmt;\n use core::hash;\n use core::iter::{FromIterator, FusedIterator};\n-use core::mem;\n use core::ops::{self, Add, AddAssign, Index, IndexMut};\n use core::ptr;\n use core::str as core_str;\n@@ -1316,7 +1317,7 @@ impl String {\n         self.vec.clear()\n     }\n \n-    /// Create a draining iterator that removes the specified range in the string\n+    /// Creates a draining iterator that removes the specified range in the string\n     /// and yields the removed chars.\n     ///\n     /// Note: The element range is removed even if the iterator is not\n@@ -1382,6 +1383,71 @@ impl String {\n         }\n     }\n \n+    /// Creates a splicing iterator that removes the specified range in the string,\n+    /// replaces with the given string, and yields the removed chars.\n+    /// The given string doesn\u2019t need to be the same length as the range.\n+    ///\n+    /// Note: The element range is removed when the `Splice` is dropped,\n+    /// even if the iterator is not consumed until the end.\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if the starting point or end point do not lie on a [`char`]\n+    /// boundary, or if they're out of bounds.\n+    ///\n+    /// [`char`]: ../../std/primitive.char.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// #![feature(splice)]\n+    /// let mut s = String::from(\"\u03b1 is alpha, \u03b2 is beta\");\n+    /// let beta_offset = s.find('\u03b2').unwrap_or(s.len());\n+    ///\n+    /// // Replace the range up until the \u03b2 from the string\n+    /// let t: String = s.splice(..beta_offset, \"\u0391 is capital alpha; \").collect();\n+    /// assert_eq!(t, \"\u03b1 is alpha, \");\n+    /// assert_eq!(s, \"\u0391 is capital alpha; \u03b2 is beta\");\n+    /// ```\n+    #[unstable(feature = \"splice\", reason = \"recently added\", issue = \"32310\")]\n+    pub fn splice<'a, 'b, R>(&'a mut self, range: R, replace_with: &'b str) -> Splice<'a, 'b>\n+        where R: RangeArgument<usize>\n+    {\n+        // Memory safety\n+        //\n+        // The String version of Splice does not have the memory safety issues\n+        // of the vector version. The data is just plain bytes.\n+        // Because the range removal happens in Drop, if the Splice iterator is leaked,\n+        // the removal will not happen.\n+        let len = self.len();\n+        let start = match range.start() {\n+             Included(&n) => n,\n+             Excluded(&n) => n + 1,\n+             Unbounded => 0,\n+        };\n+        let end = match range.end() {\n+             Included(&n) => n + 1,\n+             Excluded(&n) => n,\n+             Unbounded => len,\n+        };\n+\n+        // Take out two simultaneous borrows. The &mut String won't be accessed\n+        // until iteration is over, in Drop.\n+        let self_ptr = self as *mut _;\n+        // slicing does the appropriate bounds checks\n+        let chars_iter = self[start..end].chars();\n+\n+        Splice {\n+            start: start,\n+            end: end,\n+            iter: chars_iter,\n+            string: self_ptr,\n+            replace_with: replace_with\n+        }\n+    }\n+\n     /// Converts this `String` into a `Box<str>`.\n     ///\n     /// This will drop any excess capacity.\n@@ -1398,7 +1464,7 @@ impl String {\n     #[stable(feature = \"box_str\", since = \"1.4.0\")]\n     pub fn into_boxed_str(self) -> Box<str> {\n         let slice = self.vec.into_boxed_slice();\n-        unsafe { mem::transmute::<Box<[u8]>, Box<str>>(slice) }\n+        unsafe { alloc_str::from_boxed_utf8_unchecked(slice) }\n     }\n }\n \n@@ -1538,6 +1604,15 @@ impl FromIterator<String> for String {\n     }\n }\n \n+#[stable(feature = \"herd_cows\", since = \"1.19.0\")]\n+impl<'a> FromIterator<Cow<'a, str>> for String {\n+    fn from_iter<I: IntoIterator<Item = Cow<'a, str>>>(iter: I) -> String {\n+        let mut buf = String::new();\n+        buf.extend(iter);\n+        buf\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Extend<char> for String {\n     fn extend<I: IntoIterator<Item = char>>(&mut self, iter: I) {\n@@ -1575,6 +1650,15 @@ impl Extend<String> for String {\n     }\n }\n \n+#[stable(feature = \"herd_cows\", since = \"1.19.0\")]\n+impl<'a> Extend<Cow<'a, str>> for String {\n+    fn extend<I: IntoIterator<Item = Cow<'a, str>>>(&mut self, iter: I) {\n+        for s in iter {\n+            self.push_str(&s)\n+        }\n+    }\n+}\n+\n /// A convenience impl that delegates to the impl for `&str`\n #[unstable(feature = \"pattern\",\n            reason = \"API not fully fleshed out and ready to be stabilized\",\n@@ -1785,28 +1869,28 @@ impl ops::Index<ops::RangeToInclusive<usize>> for String {\n     }\n }\n \n-#[stable(feature = \"derefmut_for_string\", since = \"1.2.0\")]\n+#[stable(feature = \"derefmut_for_string\", since = \"1.3.0\")]\n impl ops::IndexMut<ops::Range<usize>> for String {\n     #[inline]\n     fn index_mut(&mut self, index: ops::Range<usize>) -> &mut str {\n         &mut self[..][index]\n     }\n }\n-#[stable(feature = \"derefmut_for_string\", since = \"1.2.0\")]\n+#[stable(feature = \"derefmut_for_string\", since = \"1.3.0\")]\n impl ops::IndexMut<ops::RangeTo<usize>> for String {\n     #[inline]\n     fn index_mut(&mut self, index: ops::RangeTo<usize>) -> &mut str {\n         &mut self[..][index]\n     }\n }\n-#[stable(feature = \"derefmut_for_string\", since = \"1.2.0\")]\n+#[stable(feature = \"derefmut_for_string\", since = \"1.3.0\")]\n impl ops::IndexMut<ops::RangeFrom<usize>> for String {\n     #[inline]\n     fn index_mut(&mut self, index: ops::RangeFrom<usize>) -> &mut str {\n         &mut self[..][index]\n     }\n }\n-#[stable(feature = \"derefmut_for_string\", since = \"1.2.0\")]\n+#[stable(feature = \"derefmut_for_string\", since = \"1.3.0\")]\n impl ops::IndexMut<ops::RangeFull> for String {\n     #[inline]\n     fn index_mut(&mut self, _index: ops::RangeFull) -> &mut str {\n@@ -1838,7 +1922,7 @@ impl ops::Deref for String {\n     }\n }\n \n-#[stable(feature = \"derefmut_for_string\", since = \"1.2.0\")]\n+#[stable(feature = \"derefmut_for_string\", since = \"1.3.0\")]\n impl ops::DerefMut for String {\n     #[inline]\n     fn deref_mut(&mut self) -> &mut str {\n@@ -1996,14 +2080,14 @@ impl<'a> From<&'a str> for String {\n \n // note: test pulls in libstd, which causes errors here\n #[cfg(not(test))]\n-#[stable(feature = \"string_from_box\", since = \"1.17.0\")]\n+#[stable(feature = \"string_from_box\", since = \"1.18.0\")]\n impl From<Box<str>> for String {\n     fn from(s: Box<str>) -> String {\n         s.into_string()\n     }\n }\n \n-#[stable(feature = \"box_from_str\", since = \"1.17.0\")]\n+#[stable(feature = \"box_from_str\", since = \"1.18.0\")]\n impl Into<Box<str>> for String {\n     fn into(self) -> Box<str> {\n         self.into_boxed_str()\n@@ -2145,3 +2229,61 @@ impl<'a> DoubleEndedIterator for Drain<'a> {\n \n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<'a> FusedIterator for Drain<'a> {}\n+\n+/// A splicing iterator for `String`.\n+///\n+/// This struct is created by the [`splice()`] method on [`String`]. See its\n+/// documentation for more.\n+///\n+/// [`splice()`]: struct.String.html#method.splice\n+/// [`String`]: struct.String.html\n+#[derive(Debug)]\n+#[unstable(feature = \"splice\", reason = \"recently added\", issue = \"32310\")]\n+pub struct Splice<'a, 'b> {\n+    /// Will be used as &'a mut String in the destructor\n+    string: *mut String,\n+    /// Start of part to remove\n+    start: usize,\n+    /// End of part to remove\n+    end: usize,\n+    /// Current remaining range to remove\n+    iter: Chars<'a>,\n+    replace_with: &'b str,\n+}\n+\n+#[unstable(feature = \"splice\", reason = \"recently added\", issue = \"32310\")]\n+unsafe impl<'a, 'b> Sync for Splice<'a, 'b> {}\n+#[unstable(feature = \"splice\", reason = \"recently added\", issue = \"32310\")]\n+unsafe impl<'a, 'b> Send for Splice<'a, 'b> {}\n+\n+#[unstable(feature = \"splice\", reason = \"recently added\", issue = \"32310\")]\n+impl<'a, 'b> Drop for Splice<'a, 'b> {\n+    fn drop(&mut self) {\n+        unsafe {\n+            let vec = (*self.string).as_mut_vec();\n+            vec.splice(self.start..self.end, self.replace_with.bytes());\n+        }\n+    }\n+}\n+\n+#[unstable(feature = \"splice\", reason = \"recently added\", issue = \"32310\")]\n+impl<'a, 'b> Iterator for Splice<'a, 'b> {\n+    type Item = char;\n+\n+    #[inline]\n+    fn next(&mut self) -> Option<char> {\n+        self.iter.next()\n+    }\n+\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        self.iter.size_hint()\n+    }\n+}\n+\n+#[unstable(feature = \"splice\", reason = \"recently added\", issue = \"32310\")]\n+impl<'a, 'b> DoubleEndedIterator for Splice<'a, 'b> {\n+    #[inline]\n+    fn next_back(&mut self) -> Option<char> {\n+        self.iter.next_back()\n+    }\n+}"}, {"sha": "cda8c6d59987efc42e652802aaa7f82e1f9ceee7", "filename": "src/libcollections/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcollections%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcollections%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftests%2Flib.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -10,7 +10,6 @@\n \n #![deny(warnings)]\n \n-#![feature(binary_heap_peek_mut_pop)]\n #![feature(box_syntax)]\n #![feature(inclusive_range_syntax)]\n #![feature(collection_placement)]\n@@ -20,6 +19,7 @@\n #![feature(pattern)]\n #![feature(placement_in_syntax)]\n #![feature(rand)]\n+#![feature(splice)]\n #![feature(step_by)]\n #![feature(str_escape)]\n #![feature(test)]"}, {"sha": "1708f98b7ee47c2ab40ff0807fec183e09de2eea", "filename": "src/libcollections/tests/slice.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcollections%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcollections%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftests%2Fslice.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -379,6 +379,16 @@ fn test_reverse() {\n     let mut v3 = Vec::<i32>::new();\n     v3.reverse();\n     assert!(v3.is_empty());\n+\n+    // check the 1-byte-types path\n+    let mut v = (-50..51i8).collect::<Vec<_>>();\n+    v.reverse();\n+    assert_eq!(v, (-50..51i8).rev().collect::<Vec<_>>());\n+\n+    // check the 2-byte-types path\n+    let mut v = (-50..51i16).collect::<Vec<_>>();\n+    v.reverse();\n+    assert_eq!(v, (-50..51i16).rev().collect::<Vec<_>>());\n }\n \n #[test]"}, {"sha": "b1731b2a5dcaa486b8e189e97b88dbdf23b9e85f", "filename": "src/libcollections/tests/string.rs", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcollections%2Ftests%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcollections%2Ftests%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftests%2Fstring.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -419,6 +419,69 @@ fn test_drain() {\n     assert_eq!(t, \"\");\n }\n \n+#[test]\n+fn test_splice() {\n+    let mut s = \"Hello, world!\".to_owned();\n+    let t: String = s.splice(7..12, \"\u4e16\u754c\").collect();\n+    assert_eq!(s, \"Hello, \u4e16\u754c!\");\n+    assert_eq!(t, \"world\");\n+}\n+\n+#[test]\n+#[should_panic]\n+fn test_splice_char_boundary() {\n+    let mut s = \"Hello, \u4e16\u754c!\".to_owned();\n+    s.splice(..8, \"\");\n+}\n+\n+#[test]\n+fn test_splice_inclusive_range() {\n+    let mut v = String::from(\"12345\");\n+    let t: String = v.splice(2...3, \"789\").collect();\n+    assert_eq!(v, \"127895\");\n+    assert_eq!(t, \"34\");\n+    let t2: String = v.splice(1...2, \"A\").collect();\n+    assert_eq!(v, \"1A895\");\n+    assert_eq!(t2, \"27\");\n+}\n+\n+#[test]\n+#[should_panic]\n+fn test_splice_out_of_bounds() {\n+    let mut s = String::from(\"12345\");\n+    s.splice(5..6, \"789\");\n+}\n+\n+#[test]\n+#[should_panic]\n+fn test_splice_inclusive_out_of_bounds() {\n+    let mut s = String::from(\"12345\");\n+    s.splice(5...5, \"789\");\n+}\n+\n+#[test]\n+fn test_splice_empty() {\n+    let mut s = String::from(\"12345\");\n+    let t: String = s.splice(1..2, \"\").collect();\n+    assert_eq!(s, \"1345\");\n+    assert_eq!(t, \"2\");\n+}\n+\n+#[test]\n+fn test_splice_unbounded() {\n+    let mut s = String::from(\"12345\");\n+    let t: String = s.splice(.., \"\").collect();\n+    assert_eq!(s, \"\");\n+    assert_eq!(t, \"12345\");\n+}\n+\n+#[test]\n+fn test_splice_forget() {\n+    let mut s = String::from(\"12345\");\n+    ::std::mem::forget(s.splice(2..4, \"789\"));\n+    assert_eq!(s, \"12345\");\n+}\n+\n #[test]\n fn test_extend_ref() {\n     let mut a = \"foo\".to_string();"}, {"sha": "29f18274962fe04e6c3a517370c401d610f711ca", "filename": "src/libcollections/tests/vec.rs", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcollections%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcollections%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftests%2Fvec.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -579,6 +579,69 @@ fn test_drain_inclusive_out_of_bounds() {\n     v.drain(5...5);\n }\n \n+#[test]\n+fn test_splice() {\n+    let mut v = vec![1, 2, 3, 4, 5];\n+    let a = [10, 11, 12];\n+    v.splice(2..4, a.iter().cloned());\n+    assert_eq!(v, &[1, 2, 10, 11, 12, 5]);\n+    v.splice(1..3, Some(20));\n+    assert_eq!(v, &[1, 20, 11, 12, 5]);\n+}\n+\n+#[test]\n+fn test_splice_inclusive_range() {\n+    let mut v = vec![1, 2, 3, 4, 5];\n+    let a = [10, 11, 12];\n+    let t1: Vec<_> = v.splice(2...3, a.iter().cloned()).collect();\n+    assert_eq!(v, &[1, 2, 10, 11, 12, 5]);\n+    assert_eq!(t1, &[3, 4]);\n+    let t2: Vec<_> = v.splice(1...2, Some(20)).collect();\n+    assert_eq!(v, &[1, 20, 11, 12, 5]);\n+    assert_eq!(t2, &[2, 10]);\n+}\n+\n+#[test]\n+#[should_panic]\n+fn test_splice_out_of_bounds() {\n+    let mut v = vec![1, 2, 3, 4, 5];\n+    let a = [10, 11, 12];\n+    v.splice(5..6, a.iter().cloned());\n+}\n+\n+#[test]\n+#[should_panic]\n+fn test_splice_inclusive_out_of_bounds() {\n+    let mut v = vec![1, 2, 3, 4, 5];\n+    let a = [10, 11, 12];\n+    v.splice(5...5, a.iter().cloned());\n+}\n+\n+#[test]\n+fn test_splice_items_zero_sized() {\n+    let mut vec = vec![(), (), ()];\n+    let vec2 = vec![];\n+    let t: Vec<_> = vec.splice(1..2, vec2.iter().cloned()).collect();\n+    assert_eq!(vec, &[(), ()]);\n+    assert_eq!(t, &[()]);\n+}\n+\n+#[test]\n+fn test_splice_unbounded() {\n+    let mut vec = vec![1, 2, 3, 4, 5];\n+    let t: Vec<_> = vec.splice(.., None).collect();\n+    assert_eq!(vec, &[]);\n+    assert_eq!(t, &[1, 2, 3, 4, 5]);\n+}\n+\n+#[test]\n+fn test_splice_forget() {\n+    let mut v = vec![1, 2, 3, 4, 5];\n+    let a = [10, 11, 12];\n+    ::std::mem::forget(v.splice(2..4, a.iter().cloned()));\n+    assert_eq!(v, &[1, 2]);\n+}\n+\n #[test]\n fn test_into_boxed_slice() {\n     let xs = vec![1, 2, 3];"}, {"sha": "3ef8438bc0bd23c6cea5bd2a0fe41b42f3da0a4a", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 295, "deletions": 48, "changes": 343, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -67,7 +67,6 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use alloc::boxed::Box;\n-use alloc::heap::EMPTY;\n use alloc::raw_vec::RawVec;\n use borrow::ToOwned;\n use borrow::Cow;\n@@ -275,7 +274,9 @@ use Bound::{Excluded, Included, Unbounded};\n /// removed data to be erased for security purposes. Even if you drop a `Vec`, its\n /// buffer may simply be reused by another `Vec`. Even if you zero a `Vec`'s memory\n /// first, that may not actually happen because the optimizer does not consider\n-/// this a side-effect that must be preserved.\n+/// this a side-effect that must be preserved. There is one case which we will\n+/// not break, however: using `unsafe` code to write to the excess capacity,\n+/// and then increasing the length to match, is always valid.\n ///\n /// `Vec` does not currently guarantee the order in which elements are dropped\n /// (the order has changed in the past, and may change again).\n@@ -1057,13 +1058,13 @@ impl<T> Vec<T> {\n         self.len += count;\n     }\n \n-    /// Create a draining iterator that removes the specified range in the vector\n+    /// Creates a draining iterator that removes the specified range in the vector\n     /// and yields the removed items.\n     ///\n     /// Note 1: The element range is removed even if the iterator is only\n     /// partially consumed or not consumed at all.\n     ///\n-    /// Note 2: It is unspecified how many elements are removed from the vector,\n+    /// Note 2: It is unspecified how many elements are removed from the vector\n     /// if the `Drain` value is leaked.\n     ///\n     /// # Panics\n@@ -1147,7 +1148,8 @@ impl<T> Vec<T> {\n         self.truncate(0)\n     }\n \n-    /// Returns the number of elements in the vector.\n+    /// Returns the number of elements in the vector, also referred to\n+    /// as its 'length'.\n     ///\n     /// # Examples\n     ///\n@@ -1218,11 +1220,14 @@ impl<T> Vec<T> {\n }\n \n impl<T: Clone> Vec<T> {\n-    /// Resizes the `Vec` in-place so that `len()` is equal to `new_len`.\n+    /// Resizes the `Vec` in-place so that `len` is equal to `new_len`.\n     ///\n-    /// If `new_len` is greater than `len()`, the `Vec` is extended by the\n+    /// If `new_len` is greater than `len`, the `Vec` is extended by the\n     /// difference, with each additional slot filled with `value`.\n-    /// If `new_len` is less than `len()`, the `Vec` is simply truncated.\n+    /// If `new_len` is less than `len`, the `Vec` is simply truncated.\n+    ///\n+    /// This method requires `Clone` to clone the passed value. If you'd\n+    /// rather create a value with `Default` instead, see [`resize_default`].\n     ///\n     /// # Examples\n     ///\n@@ -1235,19 +1240,100 @@ impl<T: Clone> Vec<T> {\n     /// vec.resize(2, 0);\n     /// assert_eq!(vec, [1, 2]);\n     /// ```\n+    ///\n+    /// [`resize_default`]: #method.resize_default\n     #[stable(feature = \"vec_resize\", since = \"1.5.0\")]\n     pub fn resize(&mut self, new_len: usize, value: T) {\n         let len = self.len();\n \n         if new_len > len {\n-            self.extend_with_element(new_len - len, value);\n+            self.extend_with(new_len - len, ExtendElement(value))\n         } else {\n             self.truncate(new_len);\n         }\n     }\n \n-    /// Extend the vector by `n` additional clones of `value`.\n-    fn extend_with_element(&mut self, n: usize, value: T) {\n+    /// Clones and appends all elements in a slice to the `Vec`.\n+    ///\n+    /// Iterates over the slice `other`, clones each element, and then appends\n+    /// it to this `Vec`. The `other` vector is traversed in-order.\n+    ///\n+    /// Note that this function is same as `extend` except that it is\n+    /// specialized to work with slices instead. If and when Rust gets\n+    /// specialization this function will likely be deprecated (but still\n+    /// available).\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let mut vec = vec![1];\n+    /// vec.extend_from_slice(&[2, 3, 4]);\n+    /// assert_eq!(vec, [1, 2, 3, 4]);\n+    /// ```\n+    #[stable(feature = \"vec_extend_from_slice\", since = \"1.6.0\")]\n+    pub fn extend_from_slice(&mut self, other: &[T]) {\n+        self.spec_extend(other.iter())\n+    }\n+}\n+\n+impl<T: Default> Vec<T> {\n+    /// Resizes the `Vec` in-place so that `len` is equal to `new_len`.\n+    ///\n+    /// If `new_len` is greater than `len`, the `Vec` is extended by the\n+    /// difference, with each additional slot filled with `Default::default()`.\n+    /// If `new_len` is less than `len`, the `Vec` is simply truncated.\n+    ///\n+    /// This method uses `Default` to create new values on every push. If\n+    /// you'd rather `Clone` a given value, use [`resize`].\n+    ///\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(vec_resize_default)]\n+    ///\n+    /// let mut vec = vec![1, 2, 3];\n+    /// vec.resize_default(5);\n+    /// assert_eq!(vec, [1, 2, 3, 0, 0]);\n+    ///\n+    /// let mut vec = vec![1, 2, 3, 4];\n+    /// vec.resize_default(2);\n+    /// assert_eq!(vec, [1, 2]);\n+    /// ```\n+    ///\n+    /// [`resize`]: #method.resize\n+    #[unstable(feature = \"vec_resize_default\", issue = \"41758\")]\n+    pub fn resize_default(&mut self, new_len: usize) {\n+        let len = self.len();\n+\n+        if new_len > len {\n+            self.extend_with(new_len - len, ExtendDefault);\n+        } else {\n+            self.truncate(new_len);\n+        }\n+    }\n+}\n+\n+// This code generalises `extend_with_{element,default}`.\n+trait ExtendWith<T> {\n+    fn next(&self) -> T;\n+    fn last(self) -> T;\n+}\n+\n+struct ExtendElement<T>(T);\n+impl<T: Clone> ExtendWith<T> for ExtendElement<T> {\n+    fn next(&self) -> T { self.0.clone() }\n+    fn last(self) -> T { self.0 }\n+}\n+\n+struct ExtendDefault;\n+impl<T: Default> ExtendWith<T> for ExtendDefault {\n+    fn next(&self) -> T { Default::default() }\n+    fn last(self) -> T { Default::default() }\n+}\n+impl<T> Vec<T> {\n+    /// Extend the vector by `n` values, using the given generator.\n+    fn extend_with<E: ExtendWith<T>>(&mut self, n: usize, value: E) {\n         self.reserve(n);\n \n         unsafe {\n@@ -1259,43 +1345,21 @@ impl<T: Clone> Vec<T> {\n \n             // Write all elements except the last one\n             for _ in 1..n {\n-                ptr::write(ptr, value.clone());\n+                ptr::write(ptr, value.next());\n                 ptr = ptr.offset(1);\n-                // Increment the length in every step in case clone() panics\n+                // Increment the length in every step in case next() panics\n                 local_len.increment_len(1);\n             }\n \n             if n > 0 {\n                 // We can write the last element directly without cloning needlessly\n-                ptr::write(ptr, value);\n+                ptr::write(ptr, value.last());\n                 local_len.increment_len(1);\n             }\n \n             // len set by scope guard\n         }\n     }\n-\n-    /// Clones and appends all elements in a slice to the `Vec`.\n-    ///\n-    /// Iterates over the slice `other`, clones each element, and then appends\n-    /// it to this `Vec`. The `other` vector is traversed in-order.\n-    ///\n-    /// Note that this function is same as `extend` except that it is\n-    /// specialized to work with slices instead. If and when Rust gets\n-    /// specialization this function will likely be deprecated (but still\n-    /// available).\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// let mut vec = vec![1];\n-    /// vec.extend_from_slice(&[2, 3, 4]);\n-    /// assert_eq!(vec, [1, 2, 3, 4]);\n-    /// ```\n-    #[stable(feature = \"vec_extend_from_slice\", since = \"1.6.0\")]\n-    pub fn extend_from_slice(&mut self, other: &[T]) {\n-        self.spec_extend(other.iter())\n-    }\n }\n \n // Set the length of the vec when the `SetLenOnDrop` value goes out of scope.\n@@ -1387,7 +1451,7 @@ trait SpecFromElem: Sized {\n impl<T: Clone> SpecFromElem for T {\n     default fn from_elem(elem: Self, n: usize) -> Vec<Self> {\n         let mut v = Vec::with_capacity(n);\n-        v.extend_with_element(n, elem);\n+        v.extend_with(n, ExtendElement(elem));\n         v\n     }\n }\n@@ -1422,7 +1486,7 @@ macro_rules! impl_spec_from_elem {\n                     }\n                 }\n                 let mut v = Vec::with_capacity(n);\n-                v.extend_with_element(n, elem);\n+                v.extend_with(n, ExtendElement(elem));\n                 v\n             }\n         }\n@@ -1773,9 +1837,9 @@ impl<T> SpecExtend<T, IntoIter<T>> for Vec<T> {\n         // A common case is passing a vector into a function which immediately\n         // re-collects into a vector. We can short circuit this if the IntoIter\n         // has not been advanced at all.\n-        if *iterator.buf == iterator.ptr as *mut T {\n+        if iterator.buf.as_ptr() as *const _ == iterator.ptr {\n             unsafe {\n-                let vec = Vec::from_raw_parts(*iterator.buf as *mut T,\n+                let vec = Vec::from_raw_parts(iterator.buf.as_ptr(),\n                                               iterator.len(),\n                                               iterator.cap);\n                 mem::forget(iterator);\n@@ -1845,6 +1909,54 @@ impl<T> Vec<T> {\n             }\n         }\n     }\n+\n+    /// Creates a splicing iterator that replaces the specified range in the vector\n+    /// with the given `replace_with` iterator and yields the removed items.\n+    /// `replace_with` does not need to be the same length as `range`.\n+    ///\n+    /// Note 1: The element range is removed even if the iterator is not\n+    /// consumed until the end.\n+    ///\n+    /// Note 2: It is unspecified how many elements are removed from the vector,\n+    /// if the `Splice` value is leaked.\n+    ///\n+    /// Note 3: The input iterator `replace_with` is only consumed\n+    /// when the `Splice` value is dropped.\n+    ///\n+    /// Note 4: This is optimal if:\n+    ///\n+    /// * The tail (elements in the vector after `range`) is empty,\n+    /// * or `replace_with` yields fewer elements than `range`\u2019s length\n+    /// * or the lower bound of its `size_hint()` is exact.\n+    ///\n+    /// Otherwise, a temporary vector is allocated and the tail is moved twice.\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if the starting point is greater than the end point or if\n+    /// the end point is greater than the length of the vector.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(splice)]\n+    /// let mut v = vec![1, 2, 3];\n+    /// let new = [7, 8];\n+    /// let u: Vec<_> = v.splice(..2, new.iter().cloned()).collect();\n+    /// assert_eq!(v, &[7, 8, 3]);\n+    /// assert_eq!(u, &[1, 2]);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"splice\", reason = \"recently added\", issue = \"32310\")]\n+    pub fn splice<R, I>(&mut self, range: R, replace_with: I) -> Splice<I::IntoIter>\n+        where R: RangeArgument<usize>, I: IntoIterator<Item=T>\n+    {\n+        Splice {\n+            drain: self.drain(range),\n+            replace_with: replace_with.into_iter(),\n+        }\n+    }\n+\n }\n \n #[stable(feature = \"extend_ref\", since = \"1.2.0\")]\n@@ -1984,6 +2096,18 @@ impl<'a, T: Clone> From<&'a [T]> for Vec<T> {\n     }\n }\n \n+#[stable(feature = \"vec_from_mut\", since = \"1.19.0\")]\n+impl<'a, T: Clone> From<&'a mut [T]> for Vec<T> {\n+    #[cfg(not(test))]\n+    fn from(s: &'a mut [T]) -> Vec<T> {\n+        s.to_vec()\n+    }\n+    #[cfg(test)]\n+    fn from(s: &'a mut [T]) -> Vec<T> {\n+        ::slice::to_vec(s)\n+    }\n+}\n+\n #[stable(feature = \"vec_from_cow_slice\", since = \"1.14.0\")]\n impl<'a, T> From<Cow<'a, [T]>> for Vec<T> where [T]: ToOwned<Owned=Vec<T>> {\n     fn from(s: Cow<'a, [T]>) -> Vec<T> {\n@@ -1993,14 +2117,14 @@ impl<'a, T> From<Cow<'a, [T]>> for Vec<T> where [T]: ToOwned<Owned=Vec<T>> {\n \n // note: test pulls in libstd, which causes errors here\n #[cfg(not(test))]\n-#[stable(feature = \"vec_from_box\", since = \"1.17.0\")]\n+#[stable(feature = \"vec_from_box\", since = \"1.18.0\")]\n impl<T> From<Box<[T]>> for Vec<T> {\n     fn from(s: Box<[T]>) -> Vec<T> {\n         s.into_vec()\n     }\n }\n \n-#[stable(feature = \"box_from_vec\", since = \"1.17.0\")]\n+#[stable(feature = \"box_from_vec\", since = \"1.18.0\")]\n impl<T> Into<Box<[T]>> for Vec<T> {\n     fn into(self) -> Box<[T]> {\n         self.into_boxed_slice()\n@@ -2018,14 +2142,14 @@ impl<'a> From<&'a str> for Vec<u8> {\n // Clone-on-write\n ////////////////////////////////////////////////////////////////////////////////\n \n-#[stable(feature = \"cow_from_vec\", since = \"1.7.0\")]\n+#[stable(feature = \"cow_from_vec\", since = \"1.8.0\")]\n impl<'a, T: Clone> From<&'a [T]> for Cow<'a, [T]> {\n     fn from(s: &'a [T]) -> Cow<'a, [T]> {\n         Cow::Borrowed(s)\n     }\n }\n \n-#[stable(feature = \"cow_from_vec\", since = \"1.7.0\")]\n+#[stable(feature = \"cow_from_vec\", since = \"1.8.0\")]\n impl<'a, T: Clone> From<Vec<T>> for Cow<'a, [T]> {\n     fn from(v: Vec<T>) -> Cow<'a, [T]> {\n         Cow::Owned(v)\n@@ -2129,7 +2253,8 @@ impl<T> Iterator for IntoIter<T> {\n                     self.ptr = arith_offset(self.ptr as *const i8, 1) as *mut T;\n \n                     // Use a non-null pointer value\n-                    Some(ptr::read(EMPTY as *mut T))\n+                    // (self.ptr might be null because of wrapping)\n+                    Some(ptr::read(1 as *mut T))\n                 } else {\n                     let old = self.ptr;\n                     self.ptr = self.ptr.offset(1);\n@@ -2168,7 +2293,8 @@ impl<T> DoubleEndedIterator for IntoIter<T> {\n                     self.end = arith_offset(self.end as *const i8, -1) as *mut T;\n \n                     // Use a non-null pointer value\n-                    Some(ptr::read(EMPTY as *mut T))\n+                    // (self.end might be null because of wrapping)\n+                    Some(ptr::read(1 as *mut T))\n                 } else {\n                     self.end = self.end.offset(-1);\n \n@@ -2206,7 +2332,7 @@ unsafe impl<#[may_dangle] T> Drop for IntoIter<T> {\n         for _x in self.by_ref() {}\n \n         // RawVec handles deallocation\n-        let _ = unsafe { RawVec::from_raw_parts(self.buf.as_mut_ptr(), self.cap) };\n+        let _ = unsafe { RawVec::from_raw_parts(self.buf.as_ptr(), self.cap) };\n     }\n }\n \n@@ -2271,7 +2397,7 @@ impl<'a, T> Drop for Drain<'a, T> {\n \n         if self.tail_len > 0 {\n             unsafe {\n-                let source_vec = &mut *self.vec.as_mut_ptr();\n+                let source_vec = self.vec.as_mut();\n                 // memmove back untouched tail, update to new length\n                 let start = source_vec.len();\n                 let tail = self.tail_start;\n@@ -2344,3 +2470,124 @@ impl<'a, T> InPlace<T> for PlaceBack<'a, T> {\n         &mut *ptr\n     }\n }\n+\n+\n+/// A splicing iterator for `Vec`.\n+///\n+/// This struct is created by the [`splice()`] method on [`Vec`]. See its\n+/// documentation for more.\n+///\n+/// [`splice()`]: struct.Vec.html#method.splice\n+/// [`Vec`]: struct.Vec.html\n+#[derive(Debug)]\n+#[unstable(feature = \"splice\", reason = \"recently added\", issue = \"32310\")]\n+pub struct Splice<'a, I: Iterator + 'a> {\n+    drain: Drain<'a, I::Item>,\n+    replace_with: I,\n+}\n+\n+#[unstable(feature = \"splice\", reason = \"recently added\", issue = \"32310\")]\n+impl<'a, I: Iterator> Iterator for Splice<'a, I> {\n+    type Item = I::Item;\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        self.drain.next()\n+    }\n+\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        self.drain.size_hint()\n+    }\n+}\n+\n+#[unstable(feature = \"splice\", reason = \"recently added\", issue = \"32310\")]\n+impl<'a, I: Iterator> DoubleEndedIterator for Splice<'a, I> {\n+    fn next_back(&mut self) -> Option<Self::Item> {\n+        self.drain.next_back()\n+    }\n+}\n+\n+#[unstable(feature = \"splice\", reason = \"recently added\", issue = \"32310\")]\n+impl<'a, I: Iterator> ExactSizeIterator for Splice<'a, I> {}\n+\n+\n+#[unstable(feature = \"splice\", reason = \"recently added\", issue = \"32310\")]\n+impl<'a, I: Iterator> Drop for Splice<'a, I> {\n+    fn drop(&mut self) {\n+        // exhaust drain first\n+        while let Some(_) = self.drain.next() {}\n+\n+\n+        unsafe {\n+            if self.drain.tail_len == 0 {\n+                self.drain.vec.as_mut().extend(self.replace_with.by_ref());\n+                return\n+            }\n+\n+            // First fill the range left by drain().\n+            if !self.drain.fill(&mut self.replace_with) {\n+                return\n+            }\n+\n+            // There may be more elements. Use the lower bound as an estimate.\n+            // FIXME: Is the upper bound a better guess? Or something else?\n+            let (lower_bound, _upper_bound) = self.replace_with.size_hint();\n+            if lower_bound > 0  {\n+                self.drain.move_tail(lower_bound);\n+                if !self.drain.fill(&mut self.replace_with) {\n+                    return\n+                }\n+            }\n+\n+            // Collect any remaining elements.\n+            // This is a zero-length vector which does not allocate if `lower_bound` was exact.\n+            let mut collected = self.replace_with.by_ref().collect::<Vec<I::Item>>().into_iter();\n+            // Now we have an exact count.\n+            if collected.len() > 0 {\n+                self.drain.move_tail(collected.len());\n+                let filled = self.drain.fill(&mut collected);\n+                debug_assert!(filled);\n+                debug_assert_eq!(collected.len(), 0);\n+            }\n+        }\n+        // Let `Drain::drop` move the tail back if necessary and restore `vec.len`.\n+    }\n+}\n+\n+/// Private helper methods for `Splice::drop`\n+impl<'a, T> Drain<'a, T> {\n+    /// The range from `self.vec.len` to `self.tail_start` contains elements\n+    /// that have been moved out.\n+    /// Fill that range as much as possible with new elements from the `replace_with` iterator.\n+    /// Return whether we filled the entire range. (`replace_with.next()` didn\u2019t return `None`.)\n+    unsafe fn fill<I: Iterator<Item=T>>(&mut self, replace_with: &mut I) -> bool {\n+        let vec = self.vec.as_mut();\n+        let range_start = vec.len;\n+        let range_end = self.tail_start;\n+        let range_slice = slice::from_raw_parts_mut(\n+            vec.as_mut_ptr().offset(range_start as isize),\n+            range_end - range_start);\n+\n+        for place in range_slice {\n+            if let Some(new_item) = replace_with.next() {\n+                ptr::write(place, new_item);\n+                vec.len += 1;\n+            } else {\n+                return false\n+            }\n+        }\n+        true\n+    }\n+\n+    /// Make room for inserting more elements before the tail.\n+    unsafe fn move_tail(&mut self, extra_capacity: usize) {\n+        let vec = self.vec.as_mut();\n+        let used_capacity = self.tail_start + self.tail_len;\n+        vec.buf.reserve(used_capacity, extra_capacity);\n+\n+        let new_tail_start = self.tail_start + extra_capacity;\n+        let src = vec.as_ptr().offset(self.tail_start as isize);\n+        let dst = vec.as_mut_ptr().offset(new_tail_start as isize);\n+        ptr::copy(src, dst, self.tail_len);\n+        self.tail_start = new_tail_start;\n+    }\n+}"}, {"sha": "e826c9432b516133663c57c94a5624d7bd41fb0f", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -2160,7 +2160,7 @@ impl<'a, T: 'a> Drop for Drain<'a, T> {\n     fn drop(&mut self) {\n         for _ in self.by_ref() {}\n \n-        let source_deque = unsafe { &mut *self.deque.as_mut_ptr() };\n+        let source_deque = unsafe { self.deque.as_mut() };\n \n         // T = source_deque_tail; H = source_deque_head; t = drain_tail; h = drain_head\n         //"}, {"sha": "8fe79057bd81738bdca8054bcdf6331fc78f052a", "filename": "src/libcompiler_builtins/build.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcompiler_builtins%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcompiler_builtins%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcompiler_builtins%2Fbuild.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -293,6 +293,12 @@ fn main() {\n     }\n \n     if target.contains(\"arm\") && !target.contains(\"ios\") {\n+        // (At least) udivsi3.S is broken for Thumb 1 which our gcc uses by\n+        // default, we don't want Thumb 2 since it isn't supported on some\n+        // devices, so disable thumb entirely.\n+        // Upstream bug: https://bugs.llvm.org/show_bug.cgi?id=32492\n+        cfg.define(\"__ARM_ARCH_ISA_THUMB\", Some(\"0\"));\n+\n         sources.extend(&[\"arm/aeabi_cdcmp.S\",\n                          \"arm/aeabi_cdcmpeq_check_nan.c\",\n                          \"arm/aeabi_cfcmp.S\","}, {"sha": "7f3b98a1c7614f251452cd72df7dffe78096655e", "filename": "src/libcore/benches/num/flt2dec/mod.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcore%2Fbenches%2Fnum%2Fflt2dec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcore%2Fbenches%2Fnum%2Fflt2dec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Fnum%2Fflt2dec%2Fmod.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -13,6 +13,10 @@ mod strategy {\n     mod grisu;\n }\n \n+use std::f64;\n+use std::io::Write;\n+use std::vec::Vec;\n+use test::Bencher;\n use core::num::flt2dec::{decode, DecodableFloat, FullDecoded, Decoded};\n use core::num::flt2dec::MAX_SIG_DIGITS;\n \n@@ -22,3 +26,23 @@ pub fn decode_finite<T: DecodableFloat>(v: T) -> Decoded {\n         full_decoded => panic!(\"expected finite, got {:?} instead\", full_decoded)\n     }\n }\n+\n+#[bench]\n+fn bench_small_shortest(b: &mut Bencher) {\n+    let mut buf = Vec::with_capacity(20);\n+\n+    b.iter(|| {\n+        buf.clear();\n+        write!(&mut buf, \"{}\", 3.1415926f64).unwrap()\n+    });\n+}\n+\n+#[bench]\n+fn bench_big_shortest(b: &mut Bencher) {\n+    let mut buf = Vec::with_capacity(300);\n+\n+    b.iter(|| {\n+        buf.clear();\n+        write!(&mut buf, \"{}\", f64::MAX).unwrap()\n+    });\n+}"}, {"sha": "ea480f38947f982b9804ac8418be117ef6605e78", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -132,7 +132,6 @@\n //! use std::cell::Cell;\n //! use std::ptr::Shared;\n //! use std::intrinsics::abort;\n-//! use std::intrinsics::assume;\n //!\n //! struct Rc<T: ?Sized> {\n //!     ptr: Shared<RcBox<T>>\n@@ -171,8 +170,7 @@\n //! impl<T: ?Sized> RcBoxPtr<T> for Rc<T> {\n //!    fn inner(&self) -> &RcBox<T> {\n //!        unsafe {\n-//!            assume(!(*(&self.ptr as *const _ as *const *const ())).is_null());\n-//!            &(**self.ptr)\n+//!            self.ptr.as_ref()\n //!        }\n //!    }\n //! }\n@@ -725,6 +723,15 @@ impl<T: ?Sized> RefCell<T> {\n     /// This call borrows `RefCell` mutably (at compile-time) so there is no\n     /// need for dynamic checks.\n     ///\n+    /// However be cautious: this method expects `self` to be mutable, which is\n+    /// generally not the case when using a `RefCell`. Take a look at the\n+    /// [`borrow_mut`] method instead if `self` isn't mutable.\n+    ///\n+    /// Also, please be aware that this method is only for special circumstances and is usually\n+    /// not you want. In case of doubt, use [`borrow_mut`] instead.\n+    ///\n+    /// [`borrow_mut`]: #method.borrow_mut\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -1138,7 +1145,7 @@ impl<T: ?Sized> UnsafeCell<T> {\n     }\n }\n \n-#[stable(feature = \"unsafe_cell_default\", since = \"1.9.0\")]\n+#[stable(feature = \"unsafe_cell_default\", since = \"1.10.0\")]\n impl<T: Default> Default for UnsafeCell<T> {\n     /// Creates an `UnsafeCell`, with the `Default` value for T.\n     fn default() -> UnsafeCell<T> {"}, {"sha": "21c75ad3395113f6babecce7072eb8665030b326", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -276,7 +276,7 @@ pub trait Into<T>: Sized {\n pub trait From<T>: Sized {\n     /// Performs the conversion.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn from(T) -> Self;\n+    fn from(_: T) -> Self;\n }\n \n /// An attempted conversion that consumes `self`, which may or may not be"}, {"sha": "4825c2aa132640abc14c27cc5e2f7ce040ed3928", "filename": "src/libcore/fmt/float.rs", "status": "modified", "additions": 80, "deletions": 18, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcore%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcore%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Ffloat.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -9,8 +9,43 @@\n // except according to those terms.\n \n use fmt::{Formatter, Result, LowerExp, UpperExp, Display, Debug};\n+use mem;\n use num::flt2dec;\n \n+// Don't inline this so callers don't use the stack space this function\n+// requires unless they have to.\n+#[inline(never)]\n+fn float_to_decimal_common_exact<T>(fmt: &mut Formatter, num: &T,\n+                                    sign: flt2dec::Sign, precision: usize) -> Result\n+    where T: flt2dec::DecodableFloat\n+{\n+    unsafe {\n+        let mut buf: [u8; 1024] = mem::uninitialized(); // enough for f32 and f64\n+        let mut parts: [flt2dec::Part; 4] = mem::uninitialized();\n+        let formatted = flt2dec::to_exact_fixed_str(flt2dec::strategy::grisu::format_exact,\n+                                                    *num, sign, precision,\n+                                                    false, &mut buf, &mut parts);\n+        fmt.pad_formatted_parts(&formatted)\n+    }\n+}\n+\n+// Don't inline this so callers that call both this and the above won't wind\n+// up using the combined stack space of both functions in some cases.\n+#[inline(never)]\n+fn float_to_decimal_common_shortest<T>(fmt: &mut Formatter,\n+                                       num: &T, sign: flt2dec::Sign) -> Result\n+    where T: flt2dec::DecodableFloat\n+{\n+    unsafe {\n+        // enough for f32 and f64\n+        let mut buf: [u8; flt2dec::MAX_SIG_DIGITS] = mem::uninitialized();\n+        let mut parts: [flt2dec::Part; 4] = mem::uninitialized();\n+        let formatted = flt2dec::to_shortest_str(flt2dec::strategy::grisu::format_shortest,\n+                                                 *num, sign, 0, false, &mut buf, &mut parts);\n+        fmt.pad_formatted_parts(&formatted)\n+    }\n+}\n+\n // Common code of floating point Debug and Display.\n fn float_to_decimal_common<T>(fmt: &mut Formatter, num: &T, negative_zero: bool) -> Result\n     where T: flt2dec::DecodableFloat\n@@ -23,16 +58,48 @@ fn float_to_decimal_common<T>(fmt: &mut Formatter, num: &T, negative_zero: bool)\n         (true,  true)  => flt2dec::Sign::MinusPlusRaw,\n     };\n \n-    let mut buf = [0; 1024]; // enough for f32 and f64\n-    let mut parts = [flt2dec::Part::Zero(0); 16];\n-    let formatted = if let Some(precision) = fmt.precision {\n-        flt2dec::to_exact_fixed_str(flt2dec::strategy::grisu::format_exact, *num, sign,\n-                                    precision, false, &mut buf, &mut parts)\n+    if let Some(precision) = fmt.precision {\n+        float_to_decimal_common_exact(fmt, num, sign, precision)\n     } else {\n-        flt2dec::to_shortest_str(flt2dec::strategy::grisu::format_shortest, *num, sign,\n-                                 0, false, &mut buf, &mut parts)\n-    };\n-    fmt.pad_formatted_parts(&formatted)\n+        float_to_decimal_common_shortest(fmt, num, sign)\n+    }\n+}\n+\n+// Don't inline this so callers don't use the stack space this function\n+// requires unless they have to.\n+#[inline(never)]\n+fn float_to_exponential_common_exact<T>(fmt: &mut Formatter, num: &T,\n+                                        sign: flt2dec::Sign, precision: usize,\n+                                        upper: bool) -> Result\n+    where T: flt2dec::DecodableFloat\n+{\n+    unsafe {\n+        let mut buf: [u8; 1024] = mem::uninitialized(); // enough for f32 and f64\n+        let mut parts: [flt2dec::Part; 6] = mem::uninitialized();\n+        let formatted = flt2dec::to_exact_exp_str(flt2dec::strategy::grisu::format_exact,\n+                                                  *num, sign, precision,\n+                                                  upper, &mut buf, &mut parts);\n+        fmt.pad_formatted_parts(&formatted)\n+    }\n+}\n+\n+// Don't inline this so callers that call both this and the above won't wind\n+// up using the combined stack space of both functions in some cases.\n+#[inline(never)]\n+fn float_to_exponential_common_shortest<T>(fmt: &mut Formatter,\n+                                           num: &T, sign: flt2dec::Sign,\n+                                           upper: bool) -> Result\n+    where T: flt2dec::DecodableFloat\n+{\n+    unsafe {\n+        // enough for f32 and f64\n+        let mut buf: [u8; flt2dec::MAX_SIG_DIGITS] = mem::uninitialized();\n+        let mut parts: [flt2dec::Part; 6] = mem::uninitialized();\n+        let formatted = flt2dec::to_shortest_exp_str(flt2dec::strategy::grisu::format_shortest,\n+                                                     *num, sign, (0, 0), upper,\n+                                                     &mut buf, &mut parts);\n+        fmt.pad_formatted_parts(&formatted)\n+    }\n }\n \n // Common code of floating point LowerExp and UpperExp.\n@@ -45,17 +112,12 @@ fn float_to_exponential_common<T>(fmt: &mut Formatter, num: &T, upper: bool) ->\n         true  => flt2dec::Sign::MinusPlus,\n     };\n \n-    let mut buf = [0; 1024]; // enough for f32 and f64\n-    let mut parts = [flt2dec::Part::Zero(0); 16];\n-    let formatted = if let Some(precision) = fmt.precision {\n+    if let Some(precision) = fmt.precision {\n         // 1 integral digit + `precision` fractional digits = `precision + 1` total digits\n-        flt2dec::to_exact_exp_str(flt2dec::strategy::grisu::format_exact, *num, sign,\n-                                  precision + 1, upper, &mut buf, &mut parts)\n+        float_to_exponential_common_exact(fmt, num, sign, precision + 1, upper)\n     } else {\n-        flt2dec::to_shortest_exp_str(flt2dec::strategy::grisu::format_shortest, *num, sign,\n-                                     (0, 0), upper, &mut buf, &mut parts)\n-    };\n-    fmt.pad_formatted_parts(&formatted)\n+        float_to_exponential_common_shortest(fmt, num, sign, upper)\n+    }\n }\n \n macro_rules! floating {"}, {"sha": "db12496b6f320aac7ea3fac44bd8b57f59a45ef1", "filename": "src/libcore/hash/sip.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcore%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcore%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fsip.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -403,8 +403,8 @@ impl<S: Sip> Default for Hasher<S> {\n \n #[doc(hidden)]\n trait Sip {\n-    fn c_rounds(&mut State);\n-    fn d_rounds(&mut State);\n+    fn c_rounds(_: &mut State);\n+    fn d_rounds(_: &mut State);\n }\n \n #[derive(Debug, Clone, Default)]"}, {"sha": "9f1870e56d38af2d504c0fbfc64913163078a58a", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -46,7 +46,6 @@\n             issue = \"0\")]\n #![allow(missing_docs)]\n \n-#[cfg(not(stage0))]\n #[stable(feature = \"drop_in_place\", since = \"1.8.0\")]\n #[rustc_deprecated(reason = \"no longer an intrinsic - use `ptr::drop_in_place` directly\",\n                    since = \"1.18.0\")]\n@@ -645,27 +644,6 @@ extern \"rust-intrinsic\" {\n     pub fn size_of_val<T: ?Sized>(_: &T) -> usize;\n     pub fn min_align_of_val<T: ?Sized>(_: &T) -> usize;\n \n-    #[cfg(stage0)]\n-    /// Executes the destructor (if any) of the pointed-to value.\n-    ///\n-    /// This has two use cases:\n-    ///\n-    /// * It is *required* to use `drop_in_place` to drop unsized types like\n-    ///   trait objects, because they can't be read out onto the stack and\n-    ///   dropped normally.\n-    ///\n-    /// * It is friendlier to the optimizer to do this over `ptr::read` when\n-    ///   dropping manually allocated memory (e.g. when writing Box/Rc/Vec),\n-    ///   as the compiler doesn't need to prove that it's sound to elide the\n-    ///   copy.\n-    ///\n-    /// # Undefined Behavior\n-    ///\n-    /// This has all the same safety problems as `ptr::read` with respect to\n-    /// invalid pointers, types, and double drops.\n-    #[stable(feature = \"drop_in_place\", since = \"1.8.0\")]\n-    pub fn drop_in_place<T: ?Sized>(to_drop: *mut T);\n-\n     /// Gets a static string slice containing the name of a type.\n     pub fn type_name<T: ?Sized>() -> &'static str;\n \n@@ -1261,11 +1239,9 @@ extern \"rust-intrinsic\" {\n \n     /// Performs an unchecked left shift, resulting in undefined behavior when\n     /// y < 0 or y >= N, where N is the width of T in bits.\n-    #[cfg(not(stage0))]\n     pub fn unchecked_shl<T>(x: T, y: T) -> T;\n     /// Performs an unchecked right shift, resulting in undefined behavior when\n     /// y < 0 or y >= N, where N is the width of T in bits.\n-    #[cfg(not(stage0))]\n     pub fn unchecked_shr<T>(x: T, y: T) -> T;\n \n     /// Returns (a + b) mod 2<sup>N</sup>, where N is the width of T in bits."}, {"sha": "77cbdb98c830480ff55f4e245c51cbae4fd5ef87", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -11,7 +11,7 @@\n use cmp::Ordering;\n \n use super::{Chain, Cycle, Cloned, Enumerate, Filter, FilterMap, FlatMap, Fuse};\n-use super::{Inspect, Map, Peekable, Scan, Skip, SkipWhile, Take, TakeWhile, Rev};\n+use super::{Inspect, Map, Peekable, Scan, Skip, SkipWhile, StepBy, Take, TakeWhile, Rev};\n use super::{Zip, Sum, Product};\n use super::{ChainState, FromIterator, ZipImpl};\n \n@@ -119,7 +119,7 @@ pub trait Iterator {\n     /// // exactly wouldn't be possible without executing filter().\n     /// assert_eq!((0, Some(10)), iter.size_hint());\n     ///\n-    /// // Let's add one five more numbers with chain()\n+    /// // Let's add five more numbers with chain()\n     /// let iter = (0..10).filter(|x| x % 2 == 0).chain(15..20);\n     ///\n     /// // now both bounds are increased by five\n@@ -258,6 +258,39 @@ pub trait Iterator {\n         None\n     }\n \n+    /// Creates an iterator starting at the same point, but stepping by\n+    /// the given amount at each iteration.\n+    ///\n+    /// Note that it will always return the first element of the range,\n+    /// regardless of the step given.\n+    ///\n+    /// # Panics\n+    ///\n+    /// The method will panic if the given step is `0`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// #![feature(iterator_step_by)]\n+    /// let a = [0, 1, 2, 3, 4, 5];\n+    /// let mut iter = a.into_iter().step_by(2);\n+    ///\n+    /// assert_eq!(iter.next(), Some(&0));\n+    /// assert_eq!(iter.next(), Some(&2));\n+    /// assert_eq!(iter.next(), Some(&4));\n+    /// assert_eq!(iter.next(), None);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"iterator_step_by\",\n+               reason = \"unstable replacement of Range::step_by\",\n+               issue = \"27741\")]\n+    fn step_by(self, step: usize) -> StepBy<Self> where Self: Sized {\n+        assert!(step != 0);\n+        StepBy{iter: self, step: step - 1, first_take: true}\n+    }\n+\n     /// Takes two iterators and creates a new iterator over both in sequence.\n     ///\n     /// `chain()` will return a new iterator which will first iterate over\n@@ -629,8 +662,9 @@ pub trait Iterator {\n     ///\n     /// Note that the underlying iterator is still advanced when [`peek`] is\n     /// called for the first time: In order to retrieve the next element,\n-    /// [`next`] is called on the underlying iterator, hence any side effects of\n-    /// the [`next`] method will occur.\n+    /// [`next`] is called on the underlying iterator, hence any side effects (i.e.\n+    /// anything other than fetching the next value) of the [`next`] method\n+    /// will occur.\n     ///\n     /// [`peek`]: struct.Peekable.html#method.peek\n     /// [`next`]: ../../std/iter/trait.Iterator.html#tymethod.next"}, {"sha": "f9b818f5bff357dbac3615b396eb48e1a43305cf", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 37, "deletions": 2, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -313,7 +313,7 @@ pub use self::iterator::Iterator;\n pub use self::range::Step;\n #[unstable(feature = \"step_by\", reason = \"recent addition\",\n            issue = \"27741\")]\n-pub use self::range::StepBy;\n+pub use self::range::StepBy as DeprecatedStepBy;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::sources::{Repeat, repeat};\n@@ -520,6 +520,41 @@ impl<I> Iterator for Cycle<I> where I: Clone + Iterator {\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<I> FusedIterator for Cycle<I> where I: Clone + Iterator {}\n \n+/// An iterator that steps by n elements every iteration.\n+///\n+/// This `struct` is created by the [`step_by`] method on [`Iterator`]. See\n+/// its documentation for more.\n+///\n+/// [`step_by`]: trait.Iterator.html#method.step_by\n+/// [`Iterator`]: trait.Iterator.html\n+#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+#[unstable(feature = \"iterator_step_by\",\n+           reason = \"unstable replacement of Range::step_by\",\n+           issue = \"27741\")]\n+#[derive(Clone, Debug)]\n+pub struct StepBy<I> {\n+    iter: I,\n+    step: usize,\n+    first_take: bool,\n+}\n+\n+#[unstable(feature = \"iterator_step_by\",\n+           reason = \"unstable replacement of Range::step_by\",\n+           issue = \"27741\")]\n+impl<I> Iterator for StepBy<I> where I: Iterator {\n+    type Item = I::Item;\n+\n+    #[inline]\n+    fn next(&mut self) -> Option<Self::Item> {\n+        if self.first_take {\n+            self.first_take = false;\n+            self.iter.next()\n+        } else {\n+            self.iter.nth(self.step)\n+        }\n+    }\n+}\n+\n /// An iterator that strings two iterators together.\n ///\n /// This `struct` is created by the [`chain`] method on [`Iterator`]. See its\n@@ -1655,7 +1690,7 @@ impl<I> Iterator for Skip<I> where I: Iterator {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<I> ExactSizeIterator for Skip<I> where I: ExactSizeIterator {}\n \n-#[stable(feature = \"double_ended_skip_iterator\", since = \"1.8.0\")]\n+#[stable(feature = \"double_ended_skip_iterator\", since = \"1.9.0\")]\n impl<I> DoubleEndedIterator for Skip<I> where I: DoubleEndedIterator + ExactSizeIterator {\n     fn next_back(&mut self) -> Option<Self::Item> {\n         if self.len() > 0 {"}, {"sha": "bd831d638c0c4cc24e8573501345ab809c489477", "filename": "src/libcore/iter/range.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcore%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcore%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Frange.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -86,12 +86,12 @@ macro_rules! step_impl_unsigned {\n \n             #[inline]\n             fn replace_one(&mut self) -> Self {\n-                mem::replace(self, 0)\n+                mem::replace(self, 1)\n             }\n \n             #[inline]\n             fn replace_zero(&mut self) -> Self {\n-                mem::replace(self, 1)\n+                mem::replace(self, 0)\n             }\n \n             #[inline]\n@@ -157,12 +157,12 @@ macro_rules! step_impl_signed {\n \n             #[inline]\n             fn replace_one(&mut self) -> Self {\n-                mem::replace(self, 0)\n+                mem::replace(self, 1)\n             }\n \n             #[inline]\n             fn replace_zero(&mut self) -> Self {\n-                mem::replace(self, 1)\n+                mem::replace(self, 0)\n             }\n \n             #[inline]\n@@ -206,12 +206,12 @@ macro_rules! step_impl_no_between {\n \n             #[inline]\n             fn replace_one(&mut self) -> Self {\n-                mem::replace(self, 0)\n+                mem::replace(self, 1)\n             }\n \n             #[inline]\n             fn replace_zero(&mut self) -> Self {\n-                mem::replace(self, 1)\n+                mem::replace(self, 0)\n             }\n \n             #[inline]"}, {"sha": "b6ab1ecaf4e65643a88f325fadd305fe2428f0b1", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -104,10 +104,6 @@ mod macros;\n #[macro_use]\n mod internal_macros;\n \n-#[path = \"num/float_macros.rs\"]\n-#[macro_use]\n-mod float_macros;\n-\n #[path = \"num/int_macros.rs\"]\n #[macro_use]\n mod int_macros;"}, {"sha": "3f32db122351c2ddbeaf13d25741442b59d8d62b", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -559,7 +559,7 @@ mod impls {\n /// any `UnsafeCell` internally, but not through an indirection.\n /// This affects, for example, whether a `static` of that type is\n /// placed in read-only static memory or writable static memory.\n-#[cfg_attr(not(stage0), lang = \"freeze\")]\n+#[lang = \"freeze\"]\n unsafe trait Freeze {}\n \n unsafe impl Freeze for .. {}"}, {"sha": "18428d378e3d24fde213900059110830111ccd7e", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 53, "deletions": 1, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -40,7 +40,7 @@ pub use intrinsics::transmute;\n /// `forget` is not marked as `unsafe`, because Rust's safety guarantees\n /// do not include a guarantee that destructors will always run. For example,\n /// a program can create a reference cycle using [`Rc`][rc], or call\n-/// [`process:exit`][exit] to exit without running destructors. Thus, allowing\n+/// [`process::exit`][exit] to exit without running destructors. Thus, allowing\n /// `mem::forget` from safe code does not fundamentally change Rust's safety\n /// guarantees.\n ///\n@@ -302,6 +302,58 @@ pub fn align_of_val<T: ?Sized>(val: &T) -> usize {\n     unsafe { intrinsics::min_align_of_val(val) }\n }\n \n+/// Returns whether dropping values of type `T` matters.\n+///\n+/// This is purely an optimization hint, and may be implemented conservatively.\n+/// For instance, always returning `true` would be a valid implementation of\n+/// this function.\n+///\n+/// Low level implementations of things like collections, which need to manually\n+/// drop their data, should use this function to avoid unnecessarily\n+/// trying to drop all their contents when they are destroyed. This might not\n+/// make a difference in release builds (where a loop that has no side-effects\n+/// is easily detected and eliminated), but is often a big win for debug builds.\n+///\n+/// Note that `ptr::drop_in_place` already performs this check, so if your workload\n+/// can be reduced to some small number of drop_in_place calls, using this is\n+/// unnecessary. In particular note that you can drop_in_place a slice, and that\n+/// will do a single needs_drop check for all the values.\n+///\n+/// Types like Vec therefore just `drop_in_place(&mut self[..])` without using\n+/// needs_drop explicitly. Types like HashMap, on the other hand, have to drop\n+/// values one at a time and should use this API.\n+///\n+///\n+/// # Examples\n+///\n+/// Here's an example of how a collection might make use of needs_drop:\n+///\n+/// ```ignore\n+/// #![feature(needs_drop)]\n+/// use std::{mem, ptr};\n+///\n+/// pub struct MyCollection<T> { /* ... */ }\n+///\n+/// impl<T> Drop for MyCollection<T> {\n+///     fn drop(&mut self) {\n+///         unsafe {\n+///             // drop the data\n+///             if mem::needs_drop::<T>() {\n+///                 for x in self.iter_mut() {\n+///                     ptr::drop_in_place(x);\n+///                 }\n+///             }\n+///             self.free_buffer();\n+///         }\n+///     }\n+/// }\n+/// ```\n+#[inline]\n+#[unstable(feature = \"needs_drop\", issue = \"41890\")]\n+pub fn needs_drop<T>() -> bool {\n+    unsafe { intrinsics::needs_drop::<T>() }\n+}\n+\n /// Creates a value whose bytes are all zero.\n ///\n /// This has the same effect as allocating space with"}, {"sha": "d93085e96dbb2833910a6df764430669bc8a40d1", "filename": "src/libcore/nonzero.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcore%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcore%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnonzero.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -13,7 +13,7 @@\n             reason = \"needs an RFC to flesh out the design\",\n             issue = \"27730\")]\n \n-use ops::{CoerceUnsized, Deref};\n+use ops::CoerceUnsized;\n \n /// Unsafe trait to indicate what types are usable with the NonZero struct\n pub unsafe trait Zeroable {}\n@@ -46,15 +46,10 @@ impl<T: Zeroable> NonZero<T> {\n     pub const unsafe fn new(inner: T) -> NonZero<T> {\n         NonZero(inner)\n     }\n-}\n-\n-impl<T: Zeroable> Deref for NonZero<T> {\n-    type Target = T;\n \n-    #[inline]\n-    fn deref(&self) -> &T {\n-        let NonZero(ref inner) = *self;\n-        inner\n+    /// Gets the inner value.\n+    pub fn get(self) -> T {\n+        self.0\n     }\n }\n "}, {"sha": "74b9e7bf37d5110a754d51a532d2eef5e9ea8d00", "filename": "src/libcore/num/flt2dec/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -410,8 +410,8 @@ fn determine_sign(sign: Sign, decoded: &FullDecoded, negative: bool) -> &'static\n /// it will only print given digits and nothing else.\n ///\n /// The byte buffer should be at least `MAX_SIG_DIGITS` bytes long.\n-/// There should be at least 5 parts available, due to the worst case like\n-/// `[+][0.][0000][45][0000]` with `frac_digits = 10`.\n+/// There should be at least 4 parts available, due to the worst case like\n+/// `[+][0.][0000][2][0000]` with `frac_digits = 10`.\n pub fn to_shortest_str<'a, T, F>(mut format_shortest: F, v: T,\n                                  sign: Sign, frac_digits: usize, _upper: bool,\n                                  buf: &'a mut [u8], parts: &'a mut [Part<'a>]) -> Formatted<'a>\n@@ -465,8 +465,8 @@ pub fn to_shortest_str<'a, T, F>(mut format_shortest: F, v: T,\n /// cannot be in this range, avoiding any confusion.\n ///\n /// The byte buffer should be at least `MAX_SIG_DIGITS` bytes long.\n-/// There should be at least 7 parts available, due to the worst case like\n-/// `[+][1][.][2345][e][-][67]`.\n+/// There should be at least 6 parts available, due to the worst case like\n+/// `[+][1][.][2345][e][-][6]`.\n pub fn to_shortest_exp_str<'a, T, F>(mut format_shortest: F, v: T,\n                                      sign: Sign, dec_bounds: (i16, i16), upper: bool,\n                                      buf: &'a mut [u8], parts: &'a mut [Part<'a>]) -> Formatted<'a>\n@@ -544,8 +544,8 @@ fn estimate_max_buf_len(exp: i16) -> usize {\n /// The byte buffer should be at least `ndigits` bytes long unless `ndigits` is\n /// so large that only the fixed number of digits will be ever written.\n /// (The tipping point for `f64` is about 800, so 1000 bytes should be enough.)\n-/// There should be at least 7 parts available, due to the worst case like\n-/// `[+][1][.][2345][e][-][67]`.\n+/// There should be at least 6 parts available, due to the worst case like\n+/// `[+][1][.][2345][e][-][6]`.\n pub fn to_exact_exp_str<'a, T, F>(mut format_exact: F, v: T,\n                                   sign: Sign, ndigits: usize, upper: bool,\n                                   buf: &'a mut [u8], parts: &'a mut [Part<'a>]) -> Formatted<'a>\n@@ -600,8 +600,8 @@ pub fn to_exact_exp_str<'a, T, F>(mut format_exact: F, v: T,\n /// The byte buffer should be enough for the output unless `frac_digits` is\n /// so large that only the fixed number of digits will be ever written.\n /// (The tipping point for `f64` is about 800, and 1000 bytes should be enough.)\n-/// There should be at least 5 parts available, due to the worst case like\n-/// `[+][0.][0000][45][0000]` with `frac_digits = 10`.\n+/// There should be at least 4 parts available, due to the worst case like\n+/// `[+][0.][0000][2][0000]` with `frac_digits = 10`.\n pub fn to_exact_fixed_str<'a, T, F>(mut format_exact: F, v: T,\n                                     sign: Sign, frac_digits: usize, _upper: bool,\n                                     buf: &'a mut [u8], parts: &'a mut [Part<'a>]) -> Formatted<'a>"}, {"sha": "be093cca6a1b9b3ea851ecbac1448d1be72384bf", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 45, "deletions": 124, "changes": 169, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -96,13 +96,6 @@ pub mod dec2flt;\n pub mod bignum;\n pub mod diy_float;\n \n-macro_rules! checked_op {\n-    ($U:ty, $op:path, $x:expr, $y:expr) => {{\n-        let (result, overflowed) = unsafe { $op($x as $U, $y as $U) };\n-        if overflowed { None } else { Some(result as Self) }\n-    }}\n-}\n-\n // `Int` + `SignedInt` implemented for signed integers\n macro_rules! int_impl {\n     ($SelfT:ty, $ActualT:ident, $UnsignedT:ty, $BITS:expr,\n@@ -778,21 +771,12 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n         #[inline(always)]\n-        #[cfg(not(stage0))]\n         pub fn wrapping_shl(self, rhs: u32) -> Self {\n             unsafe {\n                 intrinsics::unchecked_shl(self, (rhs & ($BITS - 1)) as $SelfT)\n             }\n         }\n \n-        /// Stage 0\n-        #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n-        #[inline(always)]\n-        #[cfg(stage0)]\n-        pub fn wrapping_shl(self, rhs: u32) -> Self {\n-            self.overflowing_shl(rhs).0\n-        }\n-\n         /// Panic-free bitwise shift-right; yields `self >> mask(rhs)`,\n         /// where `mask` removes any high-order bits of `rhs` that\n         /// would cause the shift to exceed the bitwidth of the type.\n@@ -814,21 +798,12 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n         #[inline(always)]\n-        #[cfg(not(stage0))]\n         pub fn wrapping_shr(self, rhs: u32) -> Self {\n             unsafe {\n                 intrinsics::unchecked_shr(self, (rhs & ($BITS - 1)) as $SelfT)\n             }\n         }\n \n-        /// Stage 0\n-        #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n-        #[inline(always)]\n-        #[cfg(stage0)]\n-        pub fn wrapping_shr(self, rhs: u32) -> Self {\n-            self.overflowing_shr(rhs).0\n-        }\n-\n         /// Wrapping (modular) absolute value. Computes `self.abs()`,\n         /// wrapping around at the boundary of the type.\n         ///\n@@ -1039,19 +1014,10 @@ macro_rules! int_impl {\n         /// ```\n         #[inline]\n         #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-        #[cfg(not(stage0))]\n         pub fn overflowing_shl(self, rhs: u32) -> (Self, bool) {\n             (self.wrapping_shl(rhs), (rhs > ($BITS - 1)))\n         }\n \n-        /// Stage 0\n-        #[inline]\n-        #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-        #[cfg(stage0)]\n-        pub fn overflowing_shl(self, rhs: u32) -> (Self, bool) {\n-            (self << (rhs & ($BITS - 1)), (rhs > ($BITS - 1)))\n-        }\n-\n         /// Shifts self right by `rhs` bits.\n         ///\n         /// Returns a tuple of the shifted version of self along with a boolean\n@@ -1070,19 +1036,10 @@ macro_rules! int_impl {\n         /// ```\n         #[inline]\n         #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-        #[cfg(not(stage0))]\n         pub fn overflowing_shr(self, rhs: u32) -> (Self, bool) {\n             (self.wrapping_shr(rhs), (rhs > ($BITS - 1)))\n         }\n \n-        /// Stage 0\n-        #[inline]\n-        #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-        #[cfg(stage0)]\n-        pub fn overflowing_shr(self, rhs: u32) -> (Self, bool) {\n-            (self >> (rhs & ($BITS - 1)), (rhs > ($BITS - 1)))\n-        }\n-\n         /// Computes the absolute value of `self`.\n         ///\n         /// Returns a tuple of the absolute version of self along with a\n@@ -1946,21 +1903,12 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n         #[inline(always)]\n-        #[cfg(not(stage0))]\n         pub fn wrapping_shl(self, rhs: u32) -> Self {\n             unsafe {\n                 intrinsics::unchecked_shl(self, (rhs & ($BITS - 1)) as $SelfT)\n             }\n         }\n \n-        /// Stage 0\n-        #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n-        #[inline(always)]\n-        #[cfg(stage0)]\n-        pub fn wrapping_shl(self, rhs: u32) -> Self {\n-            self.overflowing_shl(rhs).0\n-        }\n-\n         /// Panic-free bitwise shift-right; yields `self >> mask(rhs)`,\n         /// where `mask` removes any high-order bits of `rhs` that\n         /// would cause the shift to exceed the bitwidth of the type.\n@@ -1982,21 +1930,12 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n         #[inline(always)]\n-        #[cfg(not(stage0))]\n         pub fn wrapping_shr(self, rhs: u32) -> Self {\n             unsafe {\n                 intrinsics::unchecked_shr(self, (rhs & ($BITS - 1)) as $SelfT)\n             }\n         }\n \n-        /// Stage 0\n-        #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n-        #[inline(always)]\n-        #[cfg(stage0)]\n-        pub fn wrapping_shr(self, rhs: u32) -> Self {\n-            self.overflowing_shr(rhs).0\n-        }\n-\n         /// Calculates `self` + `rhs`\n         ///\n         /// Returns a tuple of the addition along with a boolean indicating\n@@ -2160,19 +2099,10 @@ macro_rules! uint_impl {\n         /// ```\n         #[inline]\n         #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-        #[cfg(not(stage0))]\n         pub fn overflowing_shl(self, rhs: u32) -> (Self, bool) {\n             (self.wrapping_shl(rhs), (rhs > ($BITS - 1)))\n         }\n \n-        /// Stage 0\n-        #[inline]\n-        #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-        #[cfg(stage0)]\n-        pub fn overflowing_shl(self, rhs: u32) -> (Self, bool) {\n-            (self << (rhs & ($BITS - 1)), (rhs > ($BITS - 1)))\n-        }\n-\n         /// Shifts self right by `rhs` bits.\n         ///\n         /// Returns a tuple of the shifted version of self along with a boolean\n@@ -2191,20 +2121,11 @@ macro_rules! uint_impl {\n         /// ```\n         #[inline]\n         #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-        #[cfg(not(stage0))]\n         pub fn overflowing_shr(self, rhs: u32) -> (Self, bool) {\n             (self.wrapping_shr(rhs), (rhs > ($BITS - 1)))\n \n         }\n \n-        /// Stage 0\n-        #[inline]\n-        #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-        #[cfg(stage0)]\n-        pub fn overflowing_shr(self, rhs: u32) -> (Self, bool) {\n-            (self >> (rhs & ($BITS - 1)), (rhs > ($BITS - 1)))\n-        }\n-\n         /// Raises self to the power of `exp`, using exponentiation by squaring.\n         ///\n         /// # Examples\n@@ -2761,8 +2682,8 @@ pub use num::dec2flt::ParseFloatError;\n // Conversions T -> T are covered by a blanket impl and therefore excluded\n // Some conversions from and to usize/isize are not implemented due to portability concerns\n macro_rules! impl_from {\n-    ($Small: ty, $Large: ty) => {\n-        #[stable(feature = \"lossless_prim_conv\", since = \"1.5.0\")]\n+    ($Small: ty, $Large: ty, #[$attr:meta]) => {\n+        #[$attr]\n         impl From<$Small> for $Large {\n             #[inline]\n             fn from(small: $Small) -> $Large {\n@@ -2773,60 +2694,60 @@ macro_rules! impl_from {\n }\n \n // Unsigned -> Unsigned\n-impl_from! { u8, u16 }\n-impl_from! { u8, u32 }\n-impl_from! { u8, u64 }\n-impl_from! { u8, u128 }\n-impl_from! { u8, usize }\n-impl_from! { u16, u32 }\n-impl_from! { u16, u64 }\n-impl_from! { u16, u128 }\n-impl_from! { u32, u64 }\n-impl_from! { u32, u128 }\n-impl_from! { u64, u128 }\n+impl_from! { u8, u16, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n+impl_from! { u8, u32, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n+impl_from! { u8, u64, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n+impl_from! { u8, u128, #[unstable(feature = \"i128\", issue = \"35118\")] }\n+impl_from! { u8, usize, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n+impl_from! { u16, u32, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n+impl_from! { u16, u64, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n+impl_from! { u16, u128, #[unstable(feature = \"i128\", issue = \"35118\")] }\n+impl_from! { u32, u64, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n+impl_from! { u32, u128, #[unstable(feature = \"i128\", issue = \"35118\")] }\n+impl_from! { u64, u128, #[unstable(feature = \"i128\", issue = \"35118\")] }\n \n // Signed -> Signed\n-impl_from! { i8, i16 }\n-impl_from! { i8, i32 }\n-impl_from! { i8, i64 }\n-impl_from! { i8, i128 }\n-impl_from! { i8, isize }\n-impl_from! { i16, i32 }\n-impl_from! { i16, i64 }\n-impl_from! { i16, i128 }\n-impl_from! { i32, i64 }\n-impl_from! { i32, i128 }\n-impl_from! { i64, i128 }\n+impl_from! { i8, i16, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n+impl_from! { i8, i32, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n+impl_from! { i8, i64, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n+impl_from! { i8, i128, #[unstable(feature = \"i128\", issue = \"35118\")] }\n+impl_from! { i8, isize, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n+impl_from! { i16, i32, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n+impl_from! { i16, i64, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n+impl_from! { i16, i128, #[unstable(feature = \"i128\", issue = \"35118\")] }\n+impl_from! { i32, i64, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n+impl_from! { i32, i128, #[unstable(feature = \"i128\", issue = \"35118\")] }\n+impl_from! { i64, i128, #[unstable(feature = \"i128\", issue = \"35118\")] }\n \n // Unsigned -> Signed\n-impl_from! { u8, i16 }\n-impl_from! { u8, i32 }\n-impl_from! { u8, i64 }\n-impl_from! { u8, i128 }\n-impl_from! { u16, i32 }\n-impl_from! { u16, i64 }\n-impl_from! { u16, i128 }\n-impl_from! { u32, i64 }\n-impl_from! { u32, i128 }\n-impl_from! { u64, i128 }\n+impl_from! { u8, i16, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n+impl_from! { u8, i32, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n+impl_from! { u8, i64, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n+impl_from! { u8, i128, #[unstable(feature = \"i128\", issue = \"35118\")] }\n+impl_from! { u16, i32, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n+impl_from! { u16, i64, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n+impl_from! { u16, i128, #[unstable(feature = \"i128\", issue = \"35118\")] }\n+impl_from! { u32, i64, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n+impl_from! { u32, i128, #[unstable(feature = \"i128\", issue = \"35118\")] }\n+impl_from! { u64, i128, #[unstable(feature = \"i128\", issue = \"35118\")] }\n \n // Note: integers can only be represented with full precision in a float if\n // they fit in the significand, which is 24 bits in f32 and 53 bits in f64.\n // Lossy float conversions are not implemented at this time.\n \n // Signed -> Float\n-impl_from! { i8, f32 }\n-impl_from! { i8, f64 }\n-impl_from! { i16, f32 }\n-impl_from! { i16, f64 }\n-impl_from! { i32, f64 }\n+impl_from! { i8, f32, #[stable(feature = \"lossless_float_conv\", since = \"1.6.0\")] }\n+impl_from! { i8, f64, #[stable(feature = \"lossless_float_conv\", since = \"1.6.0\")] }\n+impl_from! { i16, f32, #[stable(feature = \"lossless_float_conv\", since = \"1.6.0\")] }\n+impl_from! { i16, f64, #[stable(feature = \"lossless_float_conv\", since = \"1.6.0\")] }\n+impl_from! { i32, f64, #[stable(feature = \"lossless_float_conv\", since = \"1.6.0\")] }\n \n // Unsigned -> Float\n-impl_from! { u8, f32 }\n-impl_from! { u8, f64 }\n-impl_from! { u16, f32 }\n-impl_from! { u16, f64 }\n-impl_from! { u32, f64 }\n+impl_from! { u8, f32, #[stable(feature = \"lossless_float_conv\", since = \"1.6.0\")] }\n+impl_from! { u8, f64, #[stable(feature = \"lossless_float_conv\", since = \"1.6.0\")] }\n+impl_from! { u16, f32, #[stable(feature = \"lossless_float_conv\", since = \"1.6.0\")] }\n+impl_from! { u16, f64, #[stable(feature = \"lossless_float_conv\", since = \"1.6.0\")] }\n+impl_from! { u32, f64, #[stable(feature = \"lossless_float_conv\", since = \"1.6.0\")] }\n \n // Float -> Float\n-impl_from! { f32, f64 }\n+impl_from! { f32, f64, #[stable(feature = \"lossless_float_conv\", since = \"1.6.0\")] }"}, {"sha": "6cc374b13b7b3042257f13190f47f0bf95bdbd08", "filename": "src/libcore/num/wrapping.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcore%2Fnum%2Fwrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcore%2Fnum%2Fwrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fwrapping.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -12,6 +12,7 @@ use super::Wrapping;\n \n use ops::*;\n \n+#[allow(unused_macros)]\n macro_rules! sh_impl_signed {\n     ($t:ident, $f:ident) => (\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "fc3af096b183880c4b3a61910e4fe5eae73e904d", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 39, "deletions": 2, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -235,6 +235,42 @@ pub trait Drop {\n /// }\n /// ```\n ///\n+/// Here is an example of the same `Point` struct implementing the `Add` trait\n+/// using generics.\n+///\n+/// ```\n+/// use std::ops::Add;\n+///\n+/// #[derive(Debug)]\n+/// struct Point<T> {\n+///     x: T,\n+///     y: T,\n+/// }\n+///\n+/// // Notice that the implementation uses the `Output` associated type\n+/// impl<T: Add<Output=T>> Add for Point<T> {\n+///     type Output = Point<T>;\n+///\n+///     fn add(self, other: Point<T>) -> Point<T> {\n+///         Point {\n+///             x: self.x + other.x,\n+///             y: self.y + other.y,\n+///         }\n+///     }\n+/// }\n+///\n+/// impl<T: PartialEq> PartialEq for Point<T> {\n+///     fn eq(&self, other: &Self) -> bool {\n+///         self.x == other.x && self.y == other.y\n+///     }\n+/// }\n+///\n+/// fn main() {\n+///     assert_eq!(Point { x: 1, y: 0 } + Point { x: 2, y: 3 },\n+///                Point { x: 3, y: 3 });\n+/// }\n+/// ```\n+///\n /// Note that `RHS = Self` by default, but this is not mandatory. For example,\n /// [std::time::SystemTime] implements `Add<Duration>`, which permits\n /// operations of the form `SystemTime = SystemTime + Duration`.\n@@ -763,6 +799,7 @@ macro_rules! neg_impl_numeric {\n     ($($t:ty)*) => { neg_impl_core!{ x => -x, $($t)*} }\n }\n \n+#[allow(unused_macros)]\n macro_rules! neg_impl_unsigned {\n     ($($t:ty)*) => {\n         neg_impl_core!{ x => {\n@@ -2878,10 +2915,10 @@ pub trait Carrier {\n     type Error;\n \n     /// Create a `Carrier` from a success value.\n-    fn from_success(Self::Success) -> Self;\n+    fn from_success(_: Self::Success) -> Self;\n \n     /// Create a `Carrier` from an error value.\n-    fn from_error(Self::Error) -> Self;\n+    fn from_error(_: Self::Error) -> Self;\n \n     /// Translate this `Carrier` to another implementation of `Carrier` with the\n     /// same associated types."}, {"sha": "e825acad4713e2a6973b242a0e5f11be102d266f", "filename": "src/libcore/option.rs", "status": "modified", "additions": 66, "deletions": 32, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -66,14 +66,14 @@\n //! not ([`None`]).\n //!\n //! ```\n-//! let optional: Option<Box<i32>> = None;\n-//! check_optional(&optional);\n+//! let optional = None;\n+//! check_optional(optional);\n //!\n-//! let optional: Option<Box<i32>> = Some(Box::new(9000));\n-//! check_optional(&optional);\n+//! let optional = Some(Box::new(9000));\n+//! check_optional(optional);\n //!\n-//! fn check_optional(optional: &Option<Box<i32>>) {\n-//!     match *optional {\n+//! fn check_optional(optional: Option<Box<i32>>) {\n+//!     match optional {\n //!         Some(ref p) => println!(\"has value {}\", p),\n //!         None => println!(\"has no value\"),\n //!     }\n@@ -174,7 +174,7 @@ impl<T> Option<T> {\n     // Querying the contained values\n     /////////////////////////////////////////////////////////////////////////\n \n-    /// Returns `true` if the option is a `Some` value.\n+    /// Returns `true` if the option is a [`Some`] value.\n     ///\n     /// # Examples\n     ///\n@@ -185,6 +185,8 @@ impl<T> Option<T> {\n     /// let x: Option<u32> = None;\n     /// assert_eq!(x.is_some(), false);\n     /// ```\n+    ///\n+    /// [`Some`]: #variant.Some\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn is_some(&self) -> bool {\n@@ -194,7 +196,7 @@ impl<T> Option<T> {\n         }\n     }\n \n-    /// Returns `true` if the option is a `None` value.\n+    /// Returns `true` if the option is a [`None`] value.\n     ///\n     /// # Examples\n     ///\n@@ -205,6 +207,8 @@ impl<T> Option<T> {\n     /// let x: Option<u32> = None;\n     /// assert_eq!(x.is_none(), true);\n     /// ```\n+    ///\n+    /// [`None`]: #variant.None\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn is_none(&self) -> bool {\n@@ -269,13 +273,14 @@ impl<T> Option<T> {\n     // Getting to contained values\n     /////////////////////////////////////////////////////////////////////////\n \n-    /// Unwraps an option, yielding the content of a `Some`.\n+    /// Unwraps an option, yielding the content of a [`Some`].\n     ///\n     /// # Panics\n     ///\n     /// Panics if the value is a [`None`] with a custom panic message provided by\n     /// `msg`.\n     ///\n+    /// [`Some`]: #variant.Some\n     /// [`None`]: #variant.None\n     ///\n     /// # Examples\n@@ -298,16 +303,17 @@ impl<T> Option<T> {\n         }\n     }\n \n-    /// Moves the value `v` out of the `Option<T>` if it is `Some(v)`.\n+    /// Moves the value `v` out of the `Option<T>` if it is [`Some(v)`].\n     ///\n     /// In general, because this function may panic, its use is discouraged.\n-    /// Instead, prefer to use pattern matching and handle the `None`\n+    /// Instead, prefer to use pattern matching and handle the [`None`]\n     /// case explicitly.\n     ///\n     /// # Panics\n     ///\n     /// Panics if the self value equals [`None`].\n     ///\n+    /// [`Some(v)`]: #variant.Some\n     /// [`None`]: #variant.None\n     ///\n     /// # Examples\n@@ -395,7 +401,9 @@ impl<T> Option<T> {\n     }\n \n     /// Applies a function to the contained value (if any),\n-    /// or returns a `default` (if not).\n+    /// or returns a [`default`][] (if not).\n+    ///\n+    /// [`default`]: ../default/trait.Default.html#tymethod.default\n     ///\n     /// # Examples\n     ///\n@@ -416,7 +424,9 @@ impl<T> Option<T> {\n     }\n \n     /// Applies a function to the contained value (if any),\n-    /// or computes a `default` (if not).\n+    /// or computes a [`default`][] (if not).\n+    ///\n+    /// [`default`]: ../default/trait.Default.html#tymethod.default\n     ///\n     /// # Examples\n     ///\n@@ -438,12 +448,14 @@ impl<T> Option<T> {\n         }\n     }\n \n-    /// Transforms the `Option<T>` into a [`Result<T, E>`], mapping `Some(v)` to\n-    /// [`Ok(v)`] and `None` to [`Err(err)`][Err].\n+    /// Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to\n+    /// [`Ok(v)`] and [`None`] to [`Err(err)`].\n     ///\n     /// [`Result<T, E>`]: ../../std/result/enum.Result.html\n     /// [`Ok(v)`]: ../../std/result/enum.Result.html#variant.Ok\n-    /// [Err]: ../../std/result/enum.Result.html#variant.Err\n+    /// [`Err(err)`]: ../../std/result/enum.Result.html#variant.Err\n+    /// [`None`]: #variant.None\n+    /// [`Some(v)`]: #variant.Some\n     ///\n     /// # Examples\n     ///\n@@ -463,12 +475,14 @@ impl<T> Option<T> {\n         }\n     }\n \n-    /// Transforms the `Option<T>` into a [`Result<T, E>`], mapping `Some(v)` to\n-    /// [`Ok(v)`] and `None` to [`Err(err())`][Err].\n+    /// Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to\n+    /// [`Ok(v)`] and [`None`] to [`Err(err())`].\n     ///\n     /// [`Result<T, E>`]: ../../std/result/enum.Result.html\n     /// [`Ok(v)`]: ../../std/result/enum.Result.html#variant.Ok\n-    /// [Err]: ../../std/result/enum.Result.html#variant.Err\n+    /// [`Err(err())`]: ../../std/result/enum.Result.html#variant.Err\n+    /// [`None`]: #variant.None\n+    /// [`Some(v)`]: #variant.Some\n     ///\n     /// # Examples\n     ///\n@@ -534,7 +548,9 @@ impl<T> Option<T> {\n     // Boolean operations on the values, eager and lazy\n     /////////////////////////////////////////////////////////////////////////\n \n-    /// Returns `None` if the option is `None`, otherwise returns `optb`.\n+    /// Returns [`None`] if the option is [`None`], otherwise returns `optb`.\n+    ///\n+    /// [`None`]: #variant.None\n     ///\n     /// # Examples\n     ///\n@@ -564,11 +580,13 @@ impl<T> Option<T> {\n         }\n     }\n \n-    /// Returns `None` if the option is `None`, otherwise calls `f` with the\n+    /// Returns [`None`] if the option is [`None`], otherwise calls `f` with the\n     /// wrapped value and returns the result.\n     ///\n     /// Some languages call this operation flatmap.\n     ///\n+    /// [`None`]: #variant.None\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -645,9 +663,11 @@ impl<T> Option<T> {\n     // Entry-like operations to insert if None and return a reference\n     /////////////////////////////////////////////////////////////////////////\n \n-    /// Inserts `v` into the option if it is `None`, then\n+    /// Inserts `v` into the option if it is [`None`], then\n     /// returns a mutable reference to the contained value.\n     ///\n+    /// [`None`]: #variant.None\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -678,9 +698,11 @@ impl<T> Option<T> {\n         }\n     }\n \n-    /// Inserts a value computed from `f` into the option if it is `None`, then\n+    /// Inserts a value computed from `f` into the option if it is [`None`], then\n     /// returns a mutable reference to the contained value.\n     ///\n+    /// [`None`]: #variant.None\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -715,7 +737,9 @@ impl<T> Option<T> {\n     // Misc\n     /////////////////////////////////////////////////////////////////////////\n \n-    /// Takes the value out of the option, leaving a `None` in its place.\n+    /// Takes the value out of the option, leaving a [`None`] in its place.\n+    ///\n+    /// [`None`]: #variant.None\n     ///\n     /// # Examples\n     ///\n@@ -757,16 +781,16 @@ impl<'a, T: Clone> Option<&'a T> {\n impl<T: Default> Option<T> {\n     /// Returns the contained value or a default\n     ///\n-    /// Consumes the `self` argument then, if `Some`, returns the contained\n-    /// value, otherwise if `None`, returns the default value for that\n+    /// Consumes the `self` argument then, if [`Some`], returns the contained\n+    /// value, otherwise if [`None`], returns the default value for that\n     /// type.\n     ///\n     /// # Examples\n     ///\n     /// Convert a string to an integer, turning poorly-formed strings\n-    /// into 0 (the default value for integers). `parse` converts\n-    /// a string to any other type that implements `FromStr`, returning\n-    /// `None` on error.\n+    /// into 0 (the default value for integers). [`parse`] converts\n+    /// a string to any other type that implements [`FromStr`], returning\n+    /// [`None`] on error.\n     ///\n     /// ```\n     /// let good_year_from_input = \"1909\";\n@@ -777,6 +801,11 @@ impl<T: Default> Option<T> {\n     /// assert_eq!(1909, good_year);\n     /// assert_eq!(0, bad_year);\n     /// ```\n+    ///\n+    /// [`Some`]: #variant.Some\n+    /// [`None`]: #variant.None\n+    /// [`parse`]: ../../std/primitive.str.html#method.parse\n+    /// [`FromStr`]: ../../std/str/trait.FromStr.html\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn unwrap_or_default(self) -> T {\n@@ -801,7 +830,9 @@ fn expect_failed(msg: &str) -> ! {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Default for Option<T> {\n-    /// Returns None.\n+    /// Returns [`None`].\n+    ///\n+    /// [`None`]: #variant.None\n     #[inline]\n     fn default() -> Option<T> { None }\n }\n@@ -1020,8 +1051,8 @@ unsafe impl<A> TrustedLen for IntoIter<A> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<A, V: FromIterator<A>> FromIterator<Option<A>> for Option<V> {\n-    /// Takes each element in the `Iterator`: if it is `None`, no further\n-    /// elements are taken, and the `None` is returned. Should no `None` occur, a\n+    /// Takes each element in the [`Iterator`]: if it is [`None`], no further\n+    /// elements are taken, and the [`None`] is returned. Should no [`None`] occur, a\n     /// container with the values of each `Option` is returned.\n     ///\n     /// Here is an example which increments every integer in a vector,\n@@ -1037,6 +1068,9 @@ impl<A, V: FromIterator<A>> FromIterator<Option<A>> for Option<V> {\n     /// ).collect();\n     /// assert!(res == Some(vec![2, 3]));\n     /// ```\n+    ///\n+    /// [`Iterator`]: ../iter/trait.Iterator.html\n+    /// [`None`]: enum.Option.html#variant.None\n     #[inline]\n     fn from_iter<I: IntoIterator<Item=Option<A>>>(iter: I) -> Option<V> {\n         // FIXME(#11084): This could be replaced with Iterator::scan when this"}, {"sha": "f89f86e18a149554d09dbf34f6f736ab22b93356", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 127, "deletions": 50, "changes": 177, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -17,7 +17,7 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use intrinsics;\n-use ops::{CoerceUnsized, Deref};\n+use ops::CoerceUnsized;\n use fmt;\n use hash;\n use marker::{PhantomData, Unsize};\n@@ -37,11 +37,6 @@ pub use intrinsics::copy;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use intrinsics::write_bytes;\n \n-#[cfg(stage0)]\n-#[stable(feature = \"drop_in_place\", since = \"1.8.0\")]\n-pub use intrinsics::drop_in_place;\n-\n-#[cfg(not(stage0))]\n /// Executes the destructor (if any) of the pointed-to value.\n ///\n /// This has two use cases:\n@@ -61,7 +56,6 @@ pub use intrinsics::drop_in_place;\n /// invalid pointers, types, and double drops.\n #[stable(feature = \"drop_in_place\", since = \"1.8.0\")]\n #[lang=\"drop_in_place\"]\n-#[inline]\n #[allow(unconditional_recursion)]\n pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n     // Code here does not matter - this is replaced by the\n@@ -962,13 +956,25 @@ impl<T: ?Sized> PartialOrd for *mut T {\n }\n \n /// A wrapper around a raw non-null `*mut T` that indicates that the possessor\n-/// of this wrapper owns the referent. This in turn implies that the\n-/// `Unique<T>` is `Send`/`Sync` if `T` is `Send`/`Sync`, unlike a raw\n-/// `*mut T` (which conveys no particular ownership semantics).  It\n-/// also implies that the referent of the pointer should not be\n-/// modified without a unique path to the `Unique` reference. Useful\n-/// for building abstractions like `Vec<T>` or `Box<T>`, which\n-/// internally use raw pointers to manage the memory that they own.\n+/// of this wrapper owns the referent. Useful for building abstractions like\n+/// `Box<T>`, `Vec<T>`, `String`, and `HashMap<K, V>`.\n+///\n+/// Unlike `*mut T`, `Unique<T>` behaves \"as if\" it were an instance of `T`.\n+/// It implements `Send`/`Sync` if `T` is `Send`/`Sync`. It also implies\n+/// the kind of strong aliasing guarantees an instance of `T` can expect:\n+/// the referent of the pointer should not be modified without a unique path to\n+/// its owning Unique.\n+///\n+/// If you're uncertain of whether it's correct to use `Unique` for your purposes,\n+/// consider using `Shared`, which has weaker semantics.\n+///\n+/// Unlike `*mut T`, the pointer must always be non-null, even if the pointer\n+/// is never dereferenced. This is so that enums may use this forbidden value\n+/// as a discriminant -- `Option<Unique<T>>` has the same size as `Unique<T>`.\n+/// However the pointer may still dangle if it isn't dereferenced.\n+///\n+/// Unlike `*mut T`, `Unique<T>` is covariant over `T`. This should always be correct\n+/// for any type which upholds Unique's aliasing requirements.\n #[allow(missing_debug_implementations)]\n #[unstable(feature = \"unique\", reason = \"needs an RFC to flesh out design\",\n            issue = \"27730\")]\n@@ -996,6 +1002,20 @@ unsafe impl<T: Send + ?Sized> Send for Unique<T> { }\n #[unstable(feature = \"unique\", issue = \"27730\")]\n unsafe impl<T: Sync + ?Sized> Sync for Unique<T> { }\n \n+#[unstable(feature = \"unique\", issue = \"27730\")]\n+impl<T: Sized> Unique<T> {\n+    /// Creates a new `Unique` that is dangling, but well-aligned.\n+    ///\n+    /// This is useful for initializing types which lazily allocate, like\n+    /// `Vec::new` does.\n+    pub fn empty() -> Self {\n+        unsafe {\n+            let ptr = mem::align_of::<T>() as *mut T;\n+            Unique::new(ptr)\n+        }\n+    }\n+}\n+\n #[unstable(feature = \"unique\", issue = \"27730\")]\n impl<T: ?Sized> Unique<T> {\n     /// Creates a new `Unique`.\n@@ -1007,41 +1027,72 @@ impl<T: ?Sized> Unique<T> {\n         Unique { pointer: NonZero::new(ptr), _marker: PhantomData }\n     }\n \n+    /// Acquires the underlying `*mut` pointer.\n+    pub fn as_ptr(self) -> *mut T {\n+        self.pointer.get() as *mut T\n+    }\n+\n     /// Dereferences the content.\n-    pub unsafe fn get(&self) -> &T {\n-        &**self.pointer\n+    ///\n+    /// The resulting lifetime is bound to self so this behaves \"as if\"\n+    /// it were actually an instance of T that is getting borrowed. If a longer\n+    /// (unbound) lifetime is needed, use `&*my_ptr.ptr()`.\n+    pub unsafe fn as_ref(&self) -> &T {\n+        &*self.as_ptr()\n     }\n \n     /// Mutably dereferences the content.\n-    pub unsafe fn get_mut(&mut self) -> &mut T {\n-        &mut ***self\n+    ///\n+    /// The resulting lifetime is bound to self so this behaves \"as if\"\n+    /// it were actually an instance of T that is getting borrowed. If a longer\n+    /// (unbound) lifetime is needed, use `&mut *my_ptr.ptr()`.\n+    pub unsafe fn as_mut(&mut self) -> &mut T {\n+        &mut *self.as_ptr()\n     }\n }\n \n-#[unstable(feature = \"unique\", issue = \"27730\")]\n-impl<T: ?Sized, U: ?Sized> CoerceUnsized<Unique<U>> for Unique<T> where T: Unsize<U> { }\n-\n-#[unstable(feature = \"unique\", issue= \"27730\")]\n-impl<T:?Sized> Deref for Unique<T> {\n-    type Target = *mut T;\n-\n-    #[inline]\n-    fn deref(&self) -> &*mut T {\n-        unsafe { mem::transmute(&*self.pointer) }\n+#[unstable(feature = \"shared\", issue = \"27730\")]\n+impl<T: ?Sized> Clone for Unique<T> {\n+    fn clone(&self) -> Self {\n+        *self\n     }\n }\n \n+#[unstable(feature = \"shared\", issue = \"27730\")]\n+impl<T: ?Sized> Copy for Unique<T> { }\n+\n+#[unstable(feature = \"unique\", issue = \"27730\")]\n+impl<T: ?Sized, U: ?Sized> CoerceUnsized<Unique<U>> for Unique<T> where T: Unsize<U> { }\n+\n #[unstable(feature = \"unique\", issue = \"27730\")]\n-impl<T> fmt::Pointer for Unique<T> {\n+impl<T: ?Sized> fmt::Pointer for Unique<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::Pointer::fmt(&*self.pointer, f)\n+        fmt::Pointer::fmt(&self.as_ptr(), f)\n     }\n }\n \n-/// A wrapper around a raw non-null `*mut T` that indicates that the possessor\n+/// A wrapper around a raw `*mut T` that indicates that the possessor\n /// of this wrapper has shared ownership of the referent. Useful for\n-/// building abstractions like `Rc<T>` or `Arc<T>`, which internally\n-/// use raw pointers to manage the memory that they own.\n+/// building abstractions like `Rc<T>`, `Arc<T>`, or doubly-linked lists, which\n+/// internally use aliased raw pointers to manage the memory that they own.\n+///\n+/// This is similar to `Unique`, except that it doesn't make any aliasing\n+/// guarantees, and doesn't derive Send and Sync. Note that unlike `&T`,\n+/// Shared has no special mutability requirements. Shared may mutate data\n+/// aliased by other Shared pointers. More precise rules require Rust to\n+/// develop an actual aliasing model.\n+///\n+/// Unlike `*mut T`, the pointer must always be non-null, even if the pointer\n+/// is never dereferenced. This is so that enums may use this forbidden value\n+/// as a discriminant -- `Option<Shared<T>>` has the same size as `Shared<T>`.\n+/// However the pointer may still dangle if it isn't dereferenced.\n+///\n+/// Unlike `*mut T`, `Shared<T>` is covariant over `T`. If this is incorrect\n+/// for your use case, you should include some PhantomData in your type to\n+/// provide invariance, such as `PhantomData<Cell<T>>` or `PhantomData<&'a mut T>`.\n+/// Usually this won't be necessary; covariance is correct for Rc, Arc, and LinkedList\n+/// because they provide a public API that follows the normal shared XOR mutable\n+/// rules of Rust.\n #[allow(missing_debug_implementations)]\n #[unstable(feature = \"shared\", reason = \"needs an RFC to flesh out design\",\n            issue = \"27730\")]\n@@ -1065,23 +1116,59 @@ impl<T: ?Sized> !Send for Shared<T> { }\n #[unstable(feature = \"shared\", issue = \"27730\")]\n impl<T: ?Sized> !Sync for Shared<T> { }\n \n+#[unstable(feature = \"shared\", issue = \"27730\")]\n+impl<T: Sized> Shared<T> {\n+    /// Creates a new `Shared` that is dangling, but well-aligned.\n+    ///\n+    /// This is useful for initializing types which lazily allocate, like\n+    /// `Vec::new` does.\n+    pub fn empty() -> Self {\n+        unsafe {\n+            let ptr = mem::align_of::<T>() as *mut T;\n+            Shared::new(ptr)\n+        }\n+    }\n+}\n+\n #[unstable(feature = \"shared\", issue = \"27730\")]\n impl<T: ?Sized> Shared<T> {\n     /// Creates a new `Shared`.\n     ///\n     /// # Safety\n     ///\n     /// `ptr` must be non-null.\n-    pub unsafe fn new(ptr: *const T) -> Self {\n+    pub unsafe fn new(ptr: *mut T) -> Self {\n         Shared { pointer: NonZero::new(ptr), _marker: PhantomData }\n     }\n-}\n \n-#[unstable(feature = \"shared\", issue = \"27730\")]\n-impl<T: ?Sized> Shared<T> {\n+    /// Acquires the underlying `*mut` pointer.\n+    pub fn as_ptr(self) -> *mut T {\n+        self.pointer.get() as *mut T\n+    }\n+\n+    /// Dereferences the content.\n+    ///\n+    /// The resulting lifetime is bound to self so this behaves \"as if\"\n+    /// it were actually an instance of T that is getting borrowed. If a longer\n+    /// (unbound) lifetime is needed, use `&*my_ptr.ptr()`.\n+    pub unsafe fn as_ref(&self) -> &T {\n+        &*self.as_ptr()\n+    }\n+\n+    /// Mutably dereferences the content.\n+    ///\n+    /// The resulting lifetime is bound to self so this behaves \"as if\"\n+    /// it were actually an instance of T that is getting borrowed. If a longer\n+    /// (unbound) lifetime is needed, use `&mut *my_ptr.ptr_mut()`.\n+    pub unsafe fn as_mut(&mut self) -> &mut T {\n+        &mut *self.as_ptr()\n+    }\n+\n     /// Acquires the underlying pointer as a `*mut` pointer.\n+    #[rustc_deprecated(since = \"1.19\", reason = \"renamed to `as_ptr` for ergonomics/consistency\")]\n+    #[unstable(feature = \"shared\", issue = \"27730\")]\n     pub unsafe fn as_mut_ptr(&self) -> *mut T {\n-        **self as _\n+        self.as_ptr()\n     }\n }\n \n@@ -1099,18 +1186,8 @@ impl<T: ?Sized> Copy for Shared<T> { }\n impl<T: ?Sized, U: ?Sized> CoerceUnsized<Shared<U>> for Shared<T> where T: Unsize<U> { }\n \n #[unstable(feature = \"shared\", issue = \"27730\")]\n-impl<T: ?Sized> Deref for Shared<T> {\n-    type Target = *const T;\n-\n-    #[inline]\n-    fn deref(&self) -> &*const T {\n-        unsafe { mem::transmute(&*self.pointer) }\n-    }\n-}\n-\n-#[unstable(feature = \"shared\", issue = \"27730\")]\n-impl<T> fmt::Pointer for Shared<T> {\n+impl<T: ?Sized> fmt::Pointer for Shared<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::Pointer::fmt(&*self.pointer, f)\n+        fmt::Pointer::fmt(&self.as_ptr(), f)\n     }\n }"}, {"sha": "24ebfeb62e2eec23eec5fe573fa01ed819ace068", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 56, "deletions": 3, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -539,6 +539,55 @@ impl<T> SliceExt for [T] {\n     fn reverse(&mut self) {\n         let mut i: usize = 0;\n         let ln = self.len();\n+\n+        // For very small types, all the individual reads in the normal\n+        // path perform poorly.  We can do better, given efficient unaligned\n+        // load/store, by loading a larger chunk and reversing a register.\n+\n+        // Ideally LLVM would do this for us, as it knows better than we do\n+        // whether unaligned reads are efficient (since that changes between\n+        // different ARM versions, for example) and what the best chunk size\n+        // would be.  Unfortunately, as of LLVM 4.0 (2017-05) it only unrolls\n+        // the loop, so we need to do this ourselves.  (Hypothesis: reverse\n+        // is troublesome because the sides can be aligned differently --\n+        // will be, when the length is odd -- so there's no way of emitting\n+        // pre- and postludes to use fully-aligned SIMD in the middle.)\n+\n+        let fast_unaligned =\n+            cfg!(any(target_arch = \"x86\", target_arch = \"x86_64\"));\n+\n+        if fast_unaligned && mem::size_of::<T>() == 1 {\n+            // Use the llvm.bswap intrinsic to reverse u8s in a usize\n+            let chunk = mem::size_of::<usize>();\n+            while i + chunk - 1 < ln / 2 {\n+                unsafe {\n+                    let pa: *mut T = self.get_unchecked_mut(i);\n+                    let pb: *mut T = self.get_unchecked_mut(ln - i - chunk);\n+                    let va = ptr::read_unaligned(pa as *mut usize);\n+                    let vb = ptr::read_unaligned(pb as *mut usize);\n+                    ptr::write_unaligned(pa as *mut usize, vb.swap_bytes());\n+                    ptr::write_unaligned(pb as *mut usize, va.swap_bytes());\n+                }\n+                i += chunk;\n+            }\n+        }\n+\n+        if fast_unaligned && mem::size_of::<T>() == 2 {\n+            // Use rotate-by-16 to reverse u16s in a u32\n+            let chunk = mem::size_of::<u32>() / 2;\n+            while i + chunk - 1 < ln / 2 {\n+                unsafe {\n+                    let pa: *mut T = self.get_unchecked_mut(i);\n+                    let pb: *mut T = self.get_unchecked_mut(ln - i - chunk);\n+                    let va = ptr::read_unaligned(pa as *mut u32);\n+                    let vb = ptr::read_unaligned(pb as *mut u32);\n+                    ptr::write_unaligned(pa as *mut u32, vb.rotate_left(16));\n+                    ptr::write_unaligned(pb as *mut u32, va.rotate_left(16));\n+                }\n+                i += chunk;\n+            }\n+        }\n+\n         while i < ln / 2 {\n             // Unsafe swap to avoid the bounds check in safe swap.\n             unsafe {\n@@ -1401,7 +1450,7 @@ impl<'a, T> Clone for Iter<'a, T> {\n     fn clone(&self) -> Iter<'a, T> { Iter { ptr: self.ptr, end: self.end, _marker: self._marker } }\n }\n \n-#[stable(feature = \"slice_iter_as_ref\", since = \"1.12.0\")]\n+#[stable(feature = \"slice_iter_as_ref\", since = \"1.13.0\")]\n impl<'a, T> AsRef<[T]> for Iter<'a, T> {\n     fn as_ref(&self) -> &[T] {\n         self.as_slice()\n@@ -2354,7 +2403,10 @@ impl<'a, T> FusedIterator for ChunksMut<'a, T> {}\n /// valid for `len` elements, nor whether the lifetime inferred is a suitable\n /// lifetime for the returned slice.\n ///\n-/// `p` must be non-null, even for zero-length slices.\n+/// `p` must be non-null, even for zero-length slices, because non-zero bits\n+/// are required to distinguish between a zero-length slice within `Some()`\n+/// from `None`. `p` can be a bogus non-dereferencable pointer, such as `0x1`,\n+/// for zero-length slices, though.\n ///\n /// # Caveat\n ///\n@@ -2387,7 +2439,8 @@ pub unsafe fn from_raw_parts<'a, T>(p: *const T, len: usize) -> &'a [T] {\n ///\n /// This function is unsafe for the same reasons as `from_raw_parts`, as well\n /// as not being able to provide a non-aliasing guarantee of the returned\n-/// mutable slice.\n+/// mutable slice. `p` must be non-null even for zero-length slices as with\n+/// `from_raw_parts`.\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub unsafe fn from_raw_parts_mut<'a, T>(p: *mut T, len: usize) -> &'a mut [T] {"}, {"sha": "7fb941c091fbc4fab90ed623b90ff54db4bb3142", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -319,7 +319,10 @@ pub fn from_utf8_mut(v: &mut [u8]) -> Result<&mut str, Utf8Error> {\n ///\n /// The data must be valid UTF-8\n ///\n-/// `p` must be non-null, even for zero-length str.\n+/// `p` must be non-null, even for zero-length strs, because non-zero bits\n+/// are required to distinguish between a zero-length str within `Some()`\n+/// from `None`. `p` can be a bogus non-dereferencable pointer, such as `0x1`,\n+/// for zero-length strs, though.\n ///\n /// # Caveat\n ///\n@@ -1594,7 +1597,7 @@ mod traits {\n     /// byte offset of a character (as defined by `is_char_boundary`).\n     /// Requires that `begin <= end` and `end <= len` where `len` is the\n     /// length of the string.\n-    #[stable(feature = \"derefmut_for_string\", since = \"1.2.0\")]\n+    #[stable(feature = \"derefmut_for_string\", since = \"1.3.0\")]\n     impl ops::IndexMut<ops::Range<usize>> for str {\n         #[inline]\n         fn index_mut(&mut self, index: ops::Range<usize>) -> &mut str {\n@@ -1629,7 +1632,7 @@ mod traits {\n     /// `end`.\n     ///\n     /// Equivalent to `&mut self[0 .. end]`.\n-    #[stable(feature = \"derefmut_for_string\", since = \"1.2.0\")]\n+    #[stable(feature = \"derefmut_for_string\", since = \"1.3.0\")]\n     impl ops::IndexMut<ops::RangeTo<usize>> for str {\n         #[inline]\n         fn index_mut(&mut self, index: ops::RangeTo<usize>) -> &mut str {\n@@ -1669,7 +1672,7 @@ mod traits {\n     /// to the end of the string.\n     ///\n     /// Equivalent to `&mut self[begin .. len]`.\n-    #[stable(feature = \"derefmut_for_string\", since = \"1.2.0\")]\n+    #[stable(feature = \"derefmut_for_string\", since = \"1.3.0\")]\n     impl ops::IndexMut<ops::RangeFrom<usize>> for str {\n         #[inline]\n         fn index_mut(&mut self, index: ops::RangeFrom<usize>) -> &mut str {\n@@ -1705,7 +1708,7 @@ mod traits {\n     /// never panic.\n     ///\n     /// Equivalent to `&mut self[0 .. len]`.\n-    #[stable(feature = \"derefmut_for_string\", since = \"1.2.0\")]\n+    #[stable(feature = \"derefmut_for_string\", since = \"1.3.0\")]\n     impl ops::IndexMut<ops::RangeFull> for str {\n         #[inline]\n         fn index_mut(&mut self, _index: ops::RangeFull) -> &mut str {"}, {"sha": "4918e37eb35f08a266122920a2def0a07bb2ea81", "filename": "src/libcore/str/pattern.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcore%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcore%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fpattern.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -429,7 +429,33 @@ impl<'a> DoubleEndedSearcher<'a> for CharSearcher<'a> {}\n \n /// Searches for chars that are equal to a given char\n impl<'a> Pattern<'a> for char {\n-    pattern_methods!(CharSearcher<'a>, CharEqPattern, CharSearcher);\n+    type Searcher = CharSearcher<'a>;\n+\n+    #[inline]\n+    fn into_searcher(self, haystack: &'a str) -> Self::Searcher {\n+        CharSearcher(CharEqPattern(self).into_searcher(haystack))\n+    }\n+\n+    #[inline]\n+    fn is_contained_in(self, haystack: &'a str) -> bool {\n+        if (self as u32) < 128 {\n+            haystack.as_bytes().contains(&(self as u8))\n+        } else {\n+            let mut buffer = [0u8; 4];\n+            self.encode_utf8(&mut buffer).is_contained_in(haystack)\n+        }\n+    }\n+\n+    #[inline]\n+    fn is_prefix_of(self, haystack: &'a str) -> bool {\n+        CharEqPattern(self).is_prefix_of(haystack)\n+    }\n+\n+    #[inline]\n+    fn is_suffix_of(self, haystack: &'a str) -> bool where Self::Searcher: ReverseSearcher<'a>\n+    {\n+        CharEqPattern(self).is_suffix_of(haystack)\n+    }\n }\n \n /////////////////////////////////////////////////////////////////////////////"}, {"sha": "d647a94a1efde0b26a361ad22a8089f75e5b7bc4", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 76, "deletions": 3, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -94,6 +94,29 @@ use intrinsics;\n use cell::UnsafeCell;\n use fmt;\n \n+/// Save power or switch hyperthreads in a busy-wait spin-loop.\n+///\n+/// This function is deliberately more primitive than\n+/// `std::thread::yield_now` and does not directly yield to the\n+/// system's scheduler.  In some cases it might be useful to use a\n+/// combination of both functions.  Careful benchmarking is advised.\n+///\n+/// On some platforms this function may not do anything at all.\n+#[inline]\n+#[unstable(feature = \"hint_core_should_pause\", issue = \"41196\")]\n+pub fn hint_core_should_pause()\n+{\n+    #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+    unsafe {\n+        asm!(\"pause\" ::: \"memory\" : \"volatile\");\n+    }\n+\n+    #[cfg(target_arch = \"aarch64\")]\n+    unsafe {\n+        asm!(\"yield\" ::: \"memory\" : \"volatile\");\n+    }\n+}\n+\n /// A boolean type which can be safely shared between threads.\n ///\n /// This type has the same in-memory representation as a `bool`.\n@@ -895,6 +918,7 @@ impl<T> AtomicPtr<T> {\n     }\n }\n \n+#[cfg(target_has_atomic = \"ptr\")]\n macro_rules! atomic_int {\n     ($stable:meta,\n      $stable_cxchg:meta,\n@@ -1550,12 +1574,30 @@ unsafe fn atomic_xor<T>(dst: *mut T, val: T, order: Ordering) -> T {\n \n /// An atomic fence.\n ///\n-/// A fence 'A' which has [`Release`] ordering semantics, synchronizes with a\n-/// fence 'B' with (at least) [`Acquire`] semantics, if and only if there exists\n-/// atomic operations X and Y, both operating on some atomic object 'M' such\n+/// Depending on the specified order, a fence prevents the compiler and CPU from\n+/// reordering certain types of memory operations around it.\n+/// That creates synchronizes-with relationships between it and atomic operations\n+/// or fences in other threads.\n+///\n+/// A fence 'A' which has (at least) [`Release`] ordering semantics, synchronizes\n+/// with a fence 'B' with (at least) [`Acquire`] semantics, if and only if there\n+/// exist operations X and Y, both operating on some atomic object 'M' such\n /// that A is sequenced before X, Y is synchronized before B and Y observes\n /// the change to M. This provides a happens-before dependence between A and B.\n ///\n+/// ```text\n+///     Thread 1                                          Thread 2\n+///\n+/// fence(Release);      A --------------\n+/// x.store(3, Relaxed); X ---------    |\n+///                                |    |\n+///                                |    |\n+///                                -------------> Y  if x.load(Relaxed) == 3 {\n+///                                     |-------> B      fence(Acquire);\n+///                                                      ...\n+///                                                  }\n+/// ```\n+///\n /// Atomic operations with [`Release`] or [`Acquire`] semantics can also synchronize\n /// with a fence.\n ///\n@@ -1569,6 +1611,37 @@ unsafe fn atomic_xor<T>(dst: *mut T, val: T, order: Ordering) -> T {\n ///\n /// Panics if `order` is [`Relaxed`].\n ///\n+/// # Examples\n+///\n+/// ```\n+/// use std::sync::atomic::AtomicBool;\n+/// use std::sync::atomic::fence;\n+/// use std::sync::atomic::Ordering;\n+///\n+/// // A mutual exclusion primitive based on spinlock.\n+/// pub struct Mutex {\n+///     flag: AtomicBool,\n+/// }\n+///\n+/// impl Mutex {\n+///     pub fn new() -> Mutex {\n+///         Mutex {\n+///             flag: AtomicBool::new(false),\n+///         }\n+///     }\n+///\n+///     pub fn lock(&self) {\n+///         while !self.flag.compare_and_swap(false, true, Ordering::Relaxed) {}\n+///         // This fence syncronizes-with store in `unlock`.\n+///         fence(Ordering::Acquire);\n+///     }\n+///\n+///     pub fn unlock(&self) {\n+///         self.flag.store(false, Ordering::Release);\n+///     }\n+/// }\n+/// ```\n+///\n /// [`Ordering`]: enum.Ordering.html\n /// [`Acquire`]: enum.Ordering.html#variant.Acquire\n /// [`SeqCst`]: enum.Ordering.html#variant.SeqCst"}, {"sha": "ad91ba9be58f210f87032b2b62e4f597c108cfe1", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -144,6 +144,33 @@ fn test_iterator_chain_find() {\n     assert_eq!(iter.next(), None);\n }\n \n+#[test]\n+fn test_iterator_step_by() {\n+    // Identity\n+    // Replace with (0..).step_by(1) after Range::step_by gets removed\n+    let mut it = Iterator::step_by((0..), 1).take(3);\n+    assert_eq!(it.next(), Some(0));\n+    assert_eq!(it.next(), Some(1));\n+    assert_eq!(it.next(), Some(2));\n+    assert_eq!(it.next(), None);\n+\n+    // Replace with (0..).step_by(3) after Range::step_by gets removed\n+    let mut it = Iterator::step_by((0..), 3).take(4);\n+    assert_eq!(it.next(), Some(0));\n+    assert_eq!(it.next(), Some(3));\n+    assert_eq!(it.next(), Some(6));\n+    assert_eq!(it.next(), Some(9));\n+    assert_eq!(it.next(), None);\n+}\n+\n+#[test]\n+#[should_panic]\n+fn test_iterator_step_by_zero() {\n+    // Replace with (0..).step_by(0) after Range::step_by gets removed\n+    let mut it = Iterator::step_by((0..), 0);\n+    it.next();\n+}\n+\n #[test]\n fn test_filter_map() {\n     let it = (0..).step_by(1).take(10)\n@@ -1082,3 +1109,41 @@ fn test_chain_fold() {\n     assert_eq!(&[2, 3, 1, 2, 0], &result[..]);\n }\n \n+#[test]\n+fn test_step_replace_unsigned() {\n+    let mut x = 4u32;\n+    let y = x.replace_zero();\n+    assert_eq!(x, 0);\n+    assert_eq!(y, 4);\n+\n+    x = 5;\n+    let y = x.replace_one();\n+    assert_eq!(x, 1);\n+    assert_eq!(y, 5);\n+}\n+\n+#[test]\n+fn test_step_replace_signed() {\n+    let mut x = 4i32;\n+    let y = x.replace_zero();\n+    assert_eq!(x, 0);\n+    assert_eq!(y, 4);\n+\n+    x = 5;\n+    let y = x.replace_one();\n+    assert_eq!(x, 1);\n+    assert_eq!(y, 5);\n+}\n+\n+#[test]\n+fn test_step_replace_no_between() {\n+    let mut x = 4u128;\n+    let y = x.replace_zero();\n+    assert_eq!(x, 0);\n+    assert_eq!(y, 4);\n+\n+    x = 5;\n+    let y = x.replace_one();\n+    assert_eq!(x, 1);\n+    assert_eq!(y, 5);\n+}"}, {"sha": "c52155ead4f0b2774fe73db9cb4f73048a475dc4", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -20,6 +20,8 @@\n #![feature(fixed_size_array)]\n #![feature(flt2dec)]\n #![feature(fmt_internals)]\n+#![feature(iterator_step_by)]\n+#![feature(i128_type)]\n #![feature(iter_rfind)]\n #![feature(libc)]\n #![feature(nonzero)]\n@@ -30,6 +32,7 @@\n #![feature(sort_internals)]\n #![feature(sort_unstable)]\n #![feature(step_by)]\n+#![feature(step_trait)]\n #![feature(test)]\n #![feature(try_from)]\n #![feature(unicode)]"}, {"sha": "588fffda35fca3dc20158d2b48dff128fcd21d2a", "filename": "src/libcore/tests/nonzero.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcore%2Ftests%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcore%2Ftests%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnonzero.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -31,12 +31,12 @@ fn test_match_on_nonzero_option() {\n         NonZero::new(42)\n     });\n     match a {\n-        Some(val) => assert_eq!(*val, 42),\n+        Some(val) => assert_eq!(val.get(), 42),\n         None => panic!(\"unexpected None while matching on Some(NonZero(_))\")\n     }\n \n     match unsafe { Some(NonZero::new(43)) } {\n-        Some(val) => assert_eq!(*val, 43),\n+        Some(val) => assert_eq!(val.get(), 43),\n         None => panic!(\"unexpected None while matching on Some(NonZero(_))\")\n     }\n }"}, {"sha": "e28dc6a6881fde06acd2fc3a3b97269643b0b020", "filename": "src/libcore/tests/ptr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcore%2Ftests%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibcore%2Ftests%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fptr.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -166,10 +166,10 @@ fn test_set_memory() {\n \n #[test]\n fn test_unsized_unique() {\n-    let xs: &mut [i32] = &mut [1, 2, 3];\n-    let ptr = unsafe { Unique::new(xs as *mut [i32]) };\n-    let ys = unsafe { &mut **ptr };\n-    let zs: &mut [i32] = &mut [1, 2, 3];\n+    let xs: &[i32] = &[1, 2, 3];\n+    let ptr = unsafe { Unique::new(xs as *const [i32] as *mut [i32]) };\n+    let ys = unsafe { ptr.as_ref() };\n+    let zs: &[i32] = &[1, 2, 3];\n     assert!(ys == zs);\n }\n "}, {"sha": "e0bea884f31c5a667245b373ffcc8744261f0fbb", "filename": "src/libflate/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibflate%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibflate%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibflate%2Flib.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -15,7 +15,7 @@\n //! [mz]: https://code.google.com/p/miniz/\n \n #![crate_name = \"flate\"]\n-#![unstable(feature = \"rustc_private\", issue = \"27812\")]\n+#![cfg_attr(stage0, unstable(feature = \"rustc_private\", issue = \"27812\"))]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n@@ -25,7 +25,7 @@\n #![deny(warnings)]\n \n #![feature(libc)]\n-#![feature(staged_api)]\n+#![cfg_attr(stage0, feature(staged_api))]\n #![feature(unique)]\n #![cfg_attr(test, feature(rand))]\n \n@@ -62,14 +62,14 @@ pub struct Bytes {\n impl Deref for Bytes {\n     type Target = [u8];\n     fn deref(&self) -> &[u8] {\n-        unsafe { slice::from_raw_parts(*self.ptr, self.len) }\n+        unsafe { slice::from_raw_parts(self.ptr.as_ptr(), self.len) }\n     }\n }\n \n impl Drop for Bytes {\n     fn drop(&mut self) {\n         unsafe {\n-            libc::free(*self.ptr as *mut _);\n+            libc::free(self.ptr.as_ptr() as *mut _);\n         }\n     }\n }"}, {"sha": "641a42b08188f8f64b9abfc3e8ee71e2dd798765", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -15,7 +15,7 @@\n //! generated instead.\n \n #![crate_name = \"fmt_macros\"]\n-#![unstable(feature = \"rustc_private\", issue = \"27812\")]\n+#![cfg_attr(stage0, unstable(feature = \"rustc_private\", issue = \"27812\"))]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n@@ -25,7 +25,7 @@\n        test(attr(deny(warnings))))]\n #![deny(warnings)]\n \n-#![feature(staged_api)]\n+#![cfg_attr(stage0, feature(staged_api))]\n #![feature(unicode)]\n \n pub use self::Piece::*;"}, {"sha": "c69c68ba59c011a65e6b3aaa873f4fdb690d584e", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -78,9 +78,9 @@\n //! ```\n \n #![crate_name = \"getopts\"]\n-#![unstable(feature = \"rustc_private\",\n+#![cfg_attr(stage0, unstable(feature = \"rustc_private\",\n             reason = \"use the crates.io `getopts` library instead\",\n-            issue = \"27812\")]\n+            issue = \"27812\"))]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n@@ -91,7 +91,7 @@\n \n #![deny(missing_docs)]\n #![deny(warnings)]\n-#![feature(staged_api)]\n+#![cfg_attr(stage0, feature(staged_api))]\n \n use self::Name::*;\n use self::HasArg::*;"}, {"sha": "2c6744e7c90533d7cf045c9fab97b9e294e3fb2c", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -284,8 +284,8 @@\n //! * [DOT language](http://www.graphviz.org/doc/info/lang.html)\n \n #![crate_name = \"graphviz\"]\n-#![unstable(feature = \"rustc_private\", issue = \"27812\")]\n-#![feature(staged_api)]\n+#![cfg_attr(stage0, unstable(feature = \"rustc_private\", issue = \"27812\"))]\n+#![cfg_attr(stage0, feature(staged_api))]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\","}, {"sha": "03562b0cb26a00f49d4eaf18ca3e49608110b0c8", "filename": "src/liblibc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -1 +1 @@\n-Subproject commit c34a802d1eb037b44c5252078c7270b5472e0f65\n+Subproject commit 03562b0cb26a00f49d4eaf18ca3e49608110b0c8"}, {"sha": "a7e90071ceae87386524cc92450d6f831341dbbf", "filename": "src/libpanic_unwind/windows.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibpanic_unwind%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibpanic_unwind%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fwindows.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -12,11 +12,11 @@\n #![allow(dead_code)]\n #![cfg(windows)]\n \n-use libc::{c_long, c_ulong, c_ulonglong, c_void};\n+use libc::{c_long, c_ulong, c_void};\n \n pub type DWORD = c_ulong;\n pub type LONG = c_long;\n-pub type ULONG_PTR = c_ulonglong;\n+pub type ULONG_PTR = usize;\n pub type LPVOID = *mut c_void;\n \n pub const EXCEPTION_MAXIMUM_PARAMETERS: usize = 15;"}, {"sha": "68c5d49591839216c8e4dec12b29b084ea7529d0", "filename": "src/libproc_macro_plugin/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibproc_macro_plugin%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibproc_macro_plugin%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro_plugin%2Flib.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -72,7 +72,7 @@\n //! }\n //! ```\n #![crate_name = \"proc_macro_plugin\"]\n-#![unstable(feature = \"rustc_private\", issue = \"27812\")]\n+#![cfg_attr(stage0, unstable(feature = \"rustc_private\", issue = \"27812\"))]\n #![feature(plugin_registrar)]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n@@ -81,9 +81,9 @@\n        html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![deny(warnings)]\n \n-#![feature(staged_api)]\n+#![cfg_attr(stage0, feature(staged_api))]\n #![feature(rustc_diagnostic_macros)]\n-#![feature(rustc_private)]\n+#![cfg_attr(stage0, feature(rustc_private))]\n \n extern crate rustc_plugin;\n extern crate syntax;"}, {"sha": "09675564291a248b4ded93dddccee6aa6371a73f", "filename": "src/libproc_macro_plugin/quote.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibproc_macro_plugin%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibproc_macro_plugin%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro_plugin%2Fquote.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -133,6 +133,14 @@ impl<'a> Quote for &'a str {\n     }\n }\n \n+impl Quote for usize {\n+    fn quote(&self) -> TokenStream {\n+        let integer_symbol = Symbol::intern(&self.to_string());\n+        TokenTree::Token(DUMMY_SP, Token::Literal(token::Lit::Integer(integer_symbol), None))\n+            .into()\n+    }\n+}\n+\n impl Quote for Ident {\n     fn quote(&self) -> TokenStream {\n         // FIXME(jseyfried) quote hygiene\n@@ -193,15 +201,17 @@ impl Quote for token::BinOpToken {\n impl Quote for Lit {\n     fn quote(&self) -> TokenStream {\n         macro_rules! gen_match {\n-            ($($i:ident),*) => {\n+            ($($i:ident),*; $($raw:ident),*) => {\n                 match *self {\n                     $( Lit::$i(lit) => quote!(::syntax::parse::token::Lit::$i((quote lit))), )*\n-                    _ => panic!(\"Unsupported literal\"),\n+                    $( Lit::$raw(lit, n) => {\n+                        quote!(::syntax::parse::token::Lit::$raw((quote lit), (quote n)))\n+                    })*\n                 }\n             }\n         }\n \n-        gen_match!(Byte, Char, Float, Str_, Integer, ByteStr)\n+        gen_match!(Byte, Char, Float, Str_, Integer, ByteStr; StrRaw, ByteStrRaw)\n     }\n }\n "}, {"sha": "67b9449981e0f02a4d24fa5adfb3928ec612665c", "filename": "src/librand/distributions/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrand%2Fdistributions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrand%2Fdistributions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fmod.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -53,7 +53,7 @@ pub trait Sample<Support> {\n // trait called `Sample` and the other should be `DependentSample`.\n pub trait IndependentSample<Support>: Sample<Support> {\n     /// Generate a random value.\n-    fn ind_sample<R: Rng>(&self, &mut R) -> Support;\n+    fn ind_sample<R: Rng>(&self, _: &mut R) -> Support;\n }\n \n /// A wrapper for generating types that implement `Rand` via the"}, {"sha": "ca05db15ffeb9d44078b71576c0a6af56d5a57cf", "filename": "src/librand/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -329,7 +329,7 @@ impl<'a, R: fmt::Debug> fmt::Debug for AsciiGenerator<'a, R> {\n /// the same stream of randomness multiple times.\n pub trait SeedableRng<Seed>: Rng {\n     /// Reseed an RNG with the given seed.\n-    fn reseed(&mut self, Seed);\n+    fn reseed(&mut self, _: Seed);\n \n     /// Create a new RNG with the given seed.\n     fn from_seed(seed: Seed) -> Self;"}, {"sha": "9d64f511914d6d3c2ec5b16a95a28886a2f3c8ba", "filename": "src/librustc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FCargo.toml?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -13,12 +13,12 @@ arena = { path = \"../libarena\" }\n fmt_macros = { path = \"../libfmt_macros\" }\n graphviz = { path = \"../libgraphviz\" }\n log = \"0.3\"\n+owning_ref = \"0.3.3\"\n rustc_back = { path = \"../librustc_back\" }\n rustc_bitflags = { path = \"../librustc_bitflags\" }\n rustc_const_math = { path = \"../librustc_const_math\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_errors = { path = \"../librustc_errors\" }\n-rustc_llvm = { path = \"../librustc_llvm\" }\n serialize = { path = \"../libserialize\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }"}, {"sha": "c1c195852f9492bddfe2406446ce1a4b78698b22", "filename": "src/librustc/cfg/construct.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fconstruct.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -10,14 +10,17 @@\n \n use rustc_data_structures::graph;\n use cfg::*;\n+use middle::region::CodeExtent;\n use ty::{self, TyCtxt};\n use syntax::ast;\n use syntax::ptr::P;\n \n use hir::{self, PatKind};\n+use hir::def_id::DefId;\n \n struct CFGBuilder<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    owner_def_id: DefId,\n     tables: &'a ty::TypeckTables<'tcx>,\n     graph: CFGGraph,\n     fn_exit: CFGIndex,\n@@ -52,10 +55,11 @@ pub fn construct<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     // Find the tables for this body.\n     let owner_def_id = tcx.hir.local_def_id(tcx.hir.body_owner(body.id()));\n-    let tables = tcx.item_tables(owner_def_id);\n+    let tables = tcx.typeck_tables_of(owner_def_id);\n \n     let mut cfg_builder = CFGBuilder {\n         tcx: tcx,\n+        owner_def_id,\n         tables: tables,\n         graph: graph,\n         fn_exit: fn_exit,\n@@ -583,11 +587,12 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n                         scope_id: ast::NodeId,\n                         to_index: CFGIndex) {\n         let mut data = CFGEdgeData { exiting_scopes: vec![] };\n-        let mut scope = self.tcx.region_maps.node_extent(from_expr.id);\n-        let target_scope = self.tcx.region_maps.node_extent(scope_id);\n+        let mut scope = CodeExtent::Misc(from_expr.id);\n+        let target_scope = CodeExtent::Misc(scope_id);\n+        let region_maps = self.tcx.region_maps(self.owner_def_id);\n         while scope != target_scope {\n-            data.exiting_scopes.push(scope.node_id(&self.tcx.region_maps));\n-            scope = self.tcx.region_maps.encl_scope(scope);\n+            data.exiting_scopes.push(scope.node_id());\n+            scope = region_maps.encl_scope(scope);\n         }\n         self.graph.add_edge(from_index, to_index, data);\n     }"}, {"sha": "15c4469b74694c98d3108c0002a9840329f6b53f", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 64, "deletions": 4, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -51,12 +51,15 @@ pub enum DepNode<D: Clone + Debug> {\n     // in an extern crate.\n     MetaData(D),\n \n+    // Represents some piece of metadata global to its crate.\n+    GlobalMetaData(D, GlobalMetaDataKind),\n+\n     // Represents some artifact that we save to disk. Note that these\n     // do not have a def-id as part of their identifier.\n     WorkProduct(Arc<WorkProductId>),\n \n     // Represents different phases in the compiler.\n-    RegionResolveCrate,\n+    RegionMaps(D),\n     Coherence,\n     Resolve,\n     CoherenceCheckTrait(D),\n@@ -76,10 +79,11 @@ pub enum DepNode<D: Clone + Debug> {\n     BorrowCheck(D),\n     RvalueCheck(D),\n     Reachability,\n+    MirKeys,\n     LateLintCheck,\n     TransCrateItem(D),\n-    TransInlinedItem(D),\n     TransWriteMetadata,\n+    CrateVariances,\n \n     // Nodes representing bits of computed IR in the tcx. Each shared\n     // table in the tcx (or elsewhere) maps to one of these\n@@ -88,6 +92,8 @@ pub enum DepNode<D: Clone + Debug> {\n     // predicates for an item wind up in `ItemSignature`).\n     AssociatedItems(D),\n     ItemSignature(D),\n+    ItemVarianceConstraints(D),\n+    ItemVariances(D),\n     IsForeignItem(D),\n     TypeParamPredicates((D, D)),\n     SizedConstraint(D),\n@@ -99,6 +105,9 @@ pub enum DepNode<D: Clone + Debug> {\n     TypeckTables(D),\n     UsedTraitImports(D),\n     ConstEval(D),\n+    SymbolName(D),\n+    SpecializationGraph(D),\n+    ObjectSafety(D),\n \n     // The set of impls for a given trait. Ultimately, it would be\n     // nice to get more fine-grained here (e.g., to include a\n@@ -109,6 +118,8 @@ pub enum DepNode<D: Clone + Debug> {\n     // than changes in the impl body.\n     TraitImpls(D),\n \n+    AllLocalTraitImpls,\n+\n     // Nodes representing caches. To properly handle a true cache, we\n     // don't use a DepTrackingMap, but rather we push a task node.\n     // Otherwise the write into the map would be incorrectly\n@@ -147,6 +158,20 @@ pub enum DepNode<D: Clone + Debug> {\n     // For proj. cache, we just keep a list of all def-ids, since it is\n     // not a hotspot.\n     ProjectionCache { def_ids: Vec<D> },\n+\n+    DescribeDef(D),\n+    DefSpan(D),\n+    Stability(D),\n+    Deprecation(D),\n+    ItemBodyNestedBodies(D),\n+    ConstIsRvaluePromotableToStatic(D),\n+    ImplParent(D),\n+    TraitOfItem(D),\n+    IsExportedSymbol(D),\n+    IsMirAvailable(D),\n+    ItemAttrs(D),\n+    FnArgNames(D),\n+    FileMap(D, Arc<String>),\n }\n \n impl<D: Clone + Debug> DepNode<D> {\n@@ -173,6 +198,7 @@ impl<D: Clone + Debug> DepNode<D> {\n             TransCrateItem,\n             AssociatedItems,\n             ItemSignature,\n+            ItemVariances,\n             IsForeignItem,\n             AssociatedItemDefIds,\n             InherentImpls,\n@@ -193,12 +219,13 @@ impl<D: Clone + Debug> DepNode<D> {\n             BorrowCheckKrate => Some(BorrowCheckKrate),\n             MirKrate => Some(MirKrate),\n             TypeckBodiesKrate => Some(TypeckBodiesKrate),\n-            RegionResolveCrate => Some(RegionResolveCrate),\n             Coherence => Some(Coherence),\n+            CrateVariances => Some(CrateVariances),\n             Resolve => Some(Resolve),\n             Variance => Some(Variance),\n             PrivacyAccessLevels(k) => Some(PrivacyAccessLevels(k)),\n             Reachability => Some(Reachability),\n+            MirKeys => Some(MirKeys),\n             LateLintCheck => Some(LateLintCheck),\n             TransWriteMetadata => Some(TransWriteMetadata),\n \n@@ -219,11 +246,13 @@ impl<D: Clone + Debug> DepNode<D> {\n                 def_ids.map(MirShim)\n             }\n             BorrowCheck(ref d) => op(d).map(BorrowCheck),\n+            RegionMaps(ref d) => op(d).map(RegionMaps),\n             RvalueCheck(ref d) => op(d).map(RvalueCheck),\n             TransCrateItem(ref d) => op(d).map(TransCrateItem),\n-            TransInlinedItem(ref d) => op(d).map(TransInlinedItem),\n             AssociatedItems(ref d) => op(d).map(AssociatedItems),\n             ItemSignature(ref d) => op(d).map(ItemSignature),\n+            ItemVariances(ref d) => op(d).map(ItemVariances),\n+            ItemVarianceConstraints(ref d) => op(d).map(ItemVarianceConstraints),\n             IsForeignItem(ref d) => op(d).map(IsForeignItem),\n             TypeParamPredicates((ref item, ref param)) => {\n                 Some(TypeParamPredicates((try_opt!(op(item)), try_opt!(op(param)))))\n@@ -236,7 +265,11 @@ impl<D: Clone + Debug> DepNode<D> {\n             TypeckTables(ref d) => op(d).map(TypeckTables),\n             UsedTraitImports(ref d) => op(d).map(UsedTraitImports),\n             ConstEval(ref d) => op(d).map(ConstEval),\n+            SymbolName(ref d) => op(d).map(SymbolName),\n+            SpecializationGraph(ref d) => op(d).map(SpecializationGraph),\n+            ObjectSafety(ref d) => op(d).map(ObjectSafety),\n             TraitImpls(ref d) => op(d).map(TraitImpls),\n+            AllLocalTraitImpls => Some(AllLocalTraitImpls),\n             TraitItems(ref d) => op(d).map(TraitItems),\n             ReprHints(ref d) => op(d).map(ReprHints),\n             TraitSelect { ref trait_def_id, ref input_def_id } => {\n@@ -251,6 +284,20 @@ impl<D: Clone + Debug> DepNode<D> {\n                 let def_ids: Option<Vec<E>> = def_ids.iter().map(op).collect();\n                 def_ids.map(|d| ProjectionCache { def_ids: d })\n             }\n+            DescribeDef(ref d) => op(d).map(DescribeDef),\n+            DefSpan(ref d) => op(d).map(DefSpan),\n+            Stability(ref d) => op(d).map(Stability),\n+            Deprecation(ref d) => op(d).map(Deprecation),\n+            ItemAttrs(ref d) => op(d).map(ItemAttrs),\n+            FnArgNames(ref d) => op(d).map(FnArgNames),\n+            ImplParent(ref d) => op(d).map(ImplParent),\n+            TraitOfItem(ref d) => op(d).map(TraitOfItem),\n+            IsExportedSymbol(ref d) => op(d).map(IsExportedSymbol),\n+            ItemBodyNestedBodies(ref d) => op(d).map(ItemBodyNestedBodies),\n+            ConstIsRvaluePromotableToStatic(ref d) => op(d).map(ConstIsRvaluePromotableToStatic),\n+            IsMirAvailable(ref d) => op(d).map(IsMirAvailable),\n+            GlobalMetaData(ref d, kind) => op(d).map(|d| GlobalMetaData(d, kind)),\n+            FileMap(ref d, ref file_name) => op(d).map(|d| FileMap(d, file_name.clone())),\n         }\n     }\n }\n@@ -262,3 +309,16 @@ impl<D: Clone + Debug> DepNode<D> {\n /// them even in the absence of a tcx.)\n #[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable)]\n pub struct WorkProductId(pub String);\n+\n+#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable)]\n+pub enum GlobalMetaDataKind {\n+    Krate,\n+    CrateDeps,\n+    DylibDependencyFormats,\n+    LangItems,\n+    LangItemsMissing,\n+    NativeLibraries,\n+    CodeMap,\n+    Impls,\n+    ExportedSymbols,\n+}"}, {"sha": "822b61df7a489ae7b2c11677b341343a46585fb6", "filename": "src/librustc/dep_graph/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fmod.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -18,16 +18,14 @@ mod raii;\n mod safe;\n mod shadow;\n mod thread;\n-mod visit;\n \n pub use self::dep_tracking_map::{DepTrackingMap, DepTrackingMapConfig};\n pub use self::dep_node::DepNode;\n pub use self::dep_node::WorkProductId;\n+pub use self::dep_node::GlobalMetaDataKind;\n pub use self::graph::DepGraph;\n pub use self::graph::WorkProduct;\n pub use self::query::DepGraphQuery;\n pub use self::safe::AssertDepGraphSafe;\n pub use self::safe::DepGraphSafe;\n-pub use self::visit::visit_all_bodies_in_krate;\n-pub use self::visit::visit_all_item_likes_in_krate;\n pub use self::raii::DepTask;"}, {"sha": "59dce6f6bb0975a83f35090a27ac576ef1fccc60", "filename": "src/librustc/dep_graph/safe.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fdep_graph%2Fsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fdep_graph%2Fsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fsafe.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -50,6 +50,12 @@ impl<A, B> DepGraphSafe for (A, B)\n {\n }\n \n+/// Shared ref to dep-graph-safe stuff should still be dep-graph-safe.\n+impl<'a, A> DepGraphSafe for &'a A\n+    where A: DepGraphSafe,\n+{\n+}\n+\n /// No data here! :)\n impl DepGraphSafe for () {\n }"}, {"sha": "93f6e3a83a0c2e7504e47a740cde99572db0c615", "filename": "src/librustc/dep_graph/visit.rs", "status": "removed", "additions": 0, "deletions": 89, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/158b085f06a41004ebf36d87afa3548f8b60861a/src%2Flibrustc%2Fdep_graph%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/158b085f06a41004ebf36d87afa3548f8b60861a/src%2Flibrustc%2Fdep_graph%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fvisit.rs?ref=158b085f06a41004ebf36d87afa3548f8b60861a", "patch": "@@ -1,89 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use hir;\n-use hir::def_id::DefId;\n-use hir::itemlikevisit::ItemLikeVisitor;\n-use ty::TyCtxt;\n-\n-use super::dep_node::DepNode;\n-\n-/// Visit all the items in the krate in some order. When visiting a\n-/// particular item, first create a dep-node by calling `dep_node_fn`\n-/// and push that onto the dep-graph stack of tasks, and also create a\n-/// read edge from the corresponding AST node. This is used in\n-/// compiler passes to automatically record the item that they are\n-/// working on.\n-pub fn visit_all_item_likes_in_krate<'a, 'tcx, V, F>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                                     mut dep_node_fn: F,\n-                                                     visitor: &mut V)\n-    where F: FnMut(DefId) -> DepNode<DefId>, V: ItemLikeVisitor<'tcx>\n-{\n-    struct TrackingVisitor<'visit, 'tcx: 'visit, F: 'visit, V: 'visit> {\n-        tcx: TyCtxt<'visit, 'tcx, 'tcx>,\n-        dep_node_fn: &'visit mut F,\n-        visitor: &'visit mut V,\n-    }\n-\n-    impl<'visit, 'tcx, F, V> ItemLikeVisitor<'tcx> for TrackingVisitor<'visit, 'tcx, F, V>\n-        where F: FnMut(DefId) -> DepNode<DefId>, V: ItemLikeVisitor<'tcx>\n-    {\n-        fn visit_item(&mut self, i: &'tcx hir::Item) {\n-            let item_def_id = self.tcx.hir.local_def_id(i.id);\n-            let task_id = (self.dep_node_fn)(item_def_id);\n-            let _task = self.tcx.dep_graph.in_task(task_id.clone());\n-            debug!(\"Started task {:?}\", task_id);\n-            self.tcx.dep_graph.read(DepNode::Hir(item_def_id));\n-            self.visitor.visit_item(i);\n-            debug!(\"Ended task {:?}\", task_id);\n-        }\n-\n-        fn visit_trait_item(&mut self, i: &'tcx hir::TraitItem) {\n-            let trait_item_def_id = self.tcx.hir.local_def_id(i.id);\n-            let task_id = (self.dep_node_fn)(trait_item_def_id);\n-            let _task = self.tcx.dep_graph.in_task(task_id.clone());\n-            debug!(\"Started task {:?}\", task_id);\n-            self.tcx.dep_graph.read(DepNode::Hir(trait_item_def_id));\n-            self.visitor.visit_trait_item(i);\n-            debug!(\"Ended task {:?}\", task_id);\n-        }\n-\n-        fn visit_impl_item(&mut self, i: &'tcx hir::ImplItem) {\n-            let impl_item_def_id = self.tcx.hir.local_def_id(i.id);\n-            let task_id = (self.dep_node_fn)(impl_item_def_id);\n-            let _task = self.tcx.dep_graph.in_task(task_id.clone());\n-            debug!(\"Started task {:?}\", task_id);\n-            self.tcx.dep_graph.read(DepNode::Hir(impl_item_def_id));\n-            self.visitor.visit_impl_item(i);\n-            debug!(\"Ended task {:?}\", task_id);\n-        }\n-    }\n-\n-    let krate = tcx.dep_graph.with_ignore(|| tcx.hir.krate());\n-    let mut tracking_visitor = TrackingVisitor {\n-        tcx: tcx,\n-        dep_node_fn: &mut dep_node_fn,\n-        visitor: visitor,\n-    };\n-    krate.visit_all_item_likes(&mut tracking_visitor)\n-}\n-\n-pub fn visit_all_bodies_in_krate<'a, 'tcx, C>(tcx: TyCtxt<'a, 'tcx, 'tcx>, callback: C)\n-    where C: Fn(/* body_owner */\n-                DefId,\n-                /* body id */\n-                hir::BodyId)\n-{\n-    let krate = tcx.hir.krate();\n-    for &body_id in &krate.body_ids {\n-        let body_owner_def_id = tcx.hir.body_owner_def_id(body_id);\n-        callback(body_owner_def_id, body_id);\n-    }\n-}"}, {"sha": "470dcb4bd61e10e431bf8e3392e3734c288081c7", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 82, "deletions": 6, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -409,6 +409,67 @@ RFC. It is, however, [currently unimplemented][iss15872].\n [iss15872]: https://github.com/rust-lang/rust/issues/15872\n \"##,\n \n+E0119: r##\"\n+There are conflicting trait implementations for the same type.\n+Example of erroneous code:\n+\n+```compile_fail,E0119\n+trait MyTrait {\n+    fn get(&self) -> usize;\n+}\n+\n+impl<T> MyTrait for T {\n+    fn get(&self) -> usize { 0 }\n+}\n+\n+struct Foo {\n+    value: usize\n+}\n+\n+impl MyTrait for Foo { // error: conflicting implementations of trait\n+                       //        `MyTrait` for type `Foo`\n+    fn get(&self) -> usize { self.value }\n+}\n+```\n+\n+When looking for the implementation for the trait, the compiler finds\n+both the `impl<T> MyTrait for T` where T is all types and the `impl\n+MyTrait for Foo`. Since a trait cannot be implemented multiple times,\n+this is an error. So, when you write:\n+\n+```\n+trait MyTrait {\n+    fn get(&self) -> usize;\n+}\n+\n+impl<T> MyTrait for T {\n+    fn get(&self) -> usize { 0 }\n+}\n+```\n+\n+This makes the trait implemented on all types in the scope. So if you\n+try to implement it on another one after that, the implementations will\n+conflict. Example:\n+\n+```\n+trait MyTrait {\n+    fn get(&self) -> usize;\n+}\n+\n+impl<T> MyTrait for T {\n+    fn get(&self) -> usize { 0 }\n+}\n+\n+struct Foo;\n+\n+fn main() {\n+    let f = Foo;\n+\n+    f.get(); // the trait is implemented so we can use it\n+}\n+```\n+\"##,\n+\n E0133: r##\"\n Unsafe code was used outside of an unsafe function or block.\n \n@@ -1049,18 +1110,19 @@ which expected that trait. This error typically occurs when working with\n `Fn`-based types. Erroneous code example:\n \n ```compile_fail,E0281\n-fn foo<F: Fn()>(x: F) { }\n+fn foo<F: Fn(usize)>(x: F) { }\n \n fn main() {\n-    // type mismatch: the type ... implements the trait `core::ops::Fn<(_,)>`,\n-    // but the trait `core::ops::Fn<()>` is required (expected (), found tuple\n+    // type mismatch: ... implements the trait `core::ops::Fn<(String,)>`,\n+    // but the trait `core::ops::Fn<(usize,)>` is required\n     // [E0281]\n-    foo(|y| { });\n+    foo(|y: String| { });\n }\n ```\n \n-The issue in this case is that `foo` is defined as accepting a `Fn` with no\n-arguments, but the closure we attempted to pass to it requires one argument.\n+The issue in this case is that `foo` is defined as accepting a `Fn` with one\n+argument of type `String`, but the closure we attempted to pass to it requires\n+one arguments of type `usize`.\n \"##,\n \n E0282: r##\"\n@@ -1807,6 +1869,20 @@ makes a difference in practice.)\n [rfc401]: https://github.com/rust-lang/rfcs/blob/master/text/0401-coercions.md\n \"##,\n \n+E0593: r##\"\n+You tried to supply an `Fn`-based type with an incorrect number of arguments\n+than what was expected. Erroneous code example:\n+\n+```compile_fail,E0593\n+fn foo<F: Fn()>(x: F) { }\n+\n+fn main() {\n+    // [E0593] closure takes 1 argument but 0 arguments are required\n+    foo(|y| { });\n+}\n+```\n+\"##,\n+\n }\n \n "}, {"sha": "f553c03d09bd680e683243f3bc57a1171640dd22", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -43,7 +43,7 @@ impl<'a> CheckAttrVisitor<'a> {\n     fn check_inline(&self, attr: &ast::Attribute, target: Target) {\n         if target != Target::Fn {\n             struct_span_err!(self.sess, attr.span, E0518, \"attribute should be applied to function\")\n-                .span_label(attr.span, &format!(\"requires a function\"))\n+                .span_label(attr.span, \"requires a function\")\n                 .emit();\n         }\n     }\n@@ -123,7 +123,7 @@ impl<'a> CheckAttrVisitor<'a> {\n                 _ => continue,\n             };\n             struct_span_err!(self.sess, attr.span, E0517, \"{}\", message)\n-                .span_label(attr.span, &format!(\"requires {}\", label))\n+                .span_label(attr.span, format!(\"requires {}\", label))\n                 .emit();\n         }\n         if conflicting_reprs > 1 {"}, {"sha": "47604b961ae4ac04f505fe9b013d504575cfaee6", "filename": "src/librustc/hir/def_id.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fhir%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fhir%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef_id.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -36,7 +36,10 @@ pub const LOCAL_CRATE: CrateNum = CrateNum(0);\n \n /// Virtual crate for builtin macros\n // FIXME(jseyfried): this is also used for custom derives until proc-macro crates get `CrateNum`s.\n-pub const BUILTIN_MACROS_CRATE: CrateNum = CrateNum(!0);\n+pub const BUILTIN_MACROS_CRATE: CrateNum = CrateNum(u32::MAX);\n+\n+/// A CrateNum value that indicates that something is wrong.\n+pub const INVALID_CRATE: CrateNum = CrateNum(u32::MAX - 1);\n \n impl CrateNum {\n     pub fn new(x: usize) -> CrateNum {"}, {"sha": "836d9775a3f69b7f5292897801ec0eb30b85310d", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -39,7 +39,7 @@ use syntax::codemap::Spanned;\n use syntax_pos::Span;\n use hir::*;\n use hir::def::Def;\n-use hir::map::Map;\n+use hir::map::{self, Map};\n use super::itemlikevisit::DeepVisitor;\n \n use std::cmp;\n@@ -88,7 +88,7 @@ pub enum NestedVisitorMap<'this, 'tcx: 'this> {\n     /// that are inside of an item-like.\n     ///\n     /// **This is the most common choice.** A very commmon pattern is\n-    /// to use `tcx.visit_all_item_likes_in_krate()` as an outer loop,\n+    /// to use `visit_all_item_likes()` as an outer loop,\n     /// and to have the visitor that visits the contents of each item\n     /// using this setting.\n     OnlyBodies(&'this Map<'tcx>),"}, {"sha": "ce1a34faf5ee8a850df8e9ec91ce463009c1c9ad", "filename": "src/librustc/hir/itemlikevisit.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fhir%2Fitemlikevisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fhir%2Fitemlikevisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fitemlikevisit.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -19,9 +19,8 @@ use super::intravisit::Visitor;\n ///\n /// 1. **Shallow visit**: Get a simple callback for every item (or item-like thing) in the HIR.\n ///    - Example: find all items with a `#[foo]` attribute on them.\n-///    - How: Implement `ItemLikeVisitor` and call `tcx.visit_all_item_likes_in_krate()`.\n+///    - How: Implement `ItemLikeVisitor` and call `tcx.hir.krate().visit_all_item_likes()`.\n ///    - Pro: Efficient; just walks the lists of item-like things, not the nodes themselves.\n-///    - Pro: Integrates well into dependency tracking.\n ///    - Con: Don't get information about nesting\n ///    - Con: Don't have methods for specific bits of HIR, like \"on\n ///      every expr, do this\".\n@@ -30,7 +29,7 @@ use super::intravisit::Visitor;\n ///    within one another.\n ///    - Example: Examine each expression to look for its type and do some check or other.\n ///    - How: Implement `intravisit::Visitor` and use\n-///      `tcx.visit_all_item_likes_in_krate(visitor.as_deep_visitor())`. Within\n+///      `tcx.hir.krate().visit_all_item_likes(visitor.as_deep_visitor())`. Within\n ///      your `intravisit::Visitor` impl, implement methods like\n ///      `visit_expr()`; don't forget to invoke\n ///      `intravisit::walk_visit_expr()` to keep walking the subparts."}, {"sha": "8f4dce5a78303d51d2c5850fd4fceb6af612df39", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -1326,7 +1326,13 @@ impl<'a> LoweringContext<'a> {\n                 hir::ItemDefaultImpl(self.lower_unsafety(unsafety),\n                                      trait_ref)\n             }\n-            ItemKind::Impl(unsafety, polarity, ref generics, ref ifce, ref ty, ref impl_items) => {\n+            ItemKind::Impl(unsafety,\n+                           polarity,\n+                           defaultness,\n+                           ref generics,\n+                           ref ifce,\n+                           ref ty,\n+                           ref impl_items) => {\n                 let new_impl_items = impl_items.iter()\n                                                .map(|item| self.lower_impl_item_ref(item))\n                                                .collect();\n@@ -1340,6 +1346,7 @@ impl<'a> LoweringContext<'a> {\n \n                 hir::ItemImpl(self.lower_unsafety(unsafety),\n                               self.lower_impl_polarity(polarity),\n+                              self.lower_defaultness(defaultness, true /* [1] */),\n                               self.lower_generics(generics),\n                               ifce,\n                               self.lower_ty(ty),\n@@ -1355,6 +1362,9 @@ impl<'a> LoweringContext<'a> {\n             }\n             ItemKind::MacroDef(..) | ItemKind::Mac(..) => panic!(\"Shouldn't still be around\"),\n         }\n+\n+        // [1] `defaultness.has_value()` is never called for an `impl`, always `true` in order to\n+        //     not cause an assertion failure inside the `lower_defaultness` function\n     }\n \n     fn lower_trait_item(&mut self, i: &TraitItem) -> hir::TraitItem {"}, {"sha": "9537b40b28a0bec7234ccf31c8aec309c0dd135b", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -16,6 +16,7 @@\n \n use hir;\n use hir::def_id::{CrateNum, DefId, DefIndex, LOCAL_CRATE, DefIndexAddressSpace};\n+use ich::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::stable_hasher::StableHasher;\n@@ -34,7 +35,7 @@ use util::nodemap::NodeMap;\n pub struct DefPathTable {\n     index_to_key: [Vec<DefKey>; 2],\n     key_to_index: FxHashMap<DefKey, DefIndex>,\n-    def_path_hashes: [Vec<u64>; 2],\n+    def_path_hashes: [Vec<Fingerprint>; 2],\n }\n \n // Unfortunately we have to provide a manual impl of Clone because of the\n@@ -55,7 +56,7 @@ impl DefPathTable {\n \n     fn allocate(&mut self,\n                 key: DefKey,\n-                def_path_hash: u64,\n+                def_path_hash: Fingerprint,\n                 address_space: DefIndexAddressSpace)\n                 -> DefIndex {\n         let index = {\n@@ -79,7 +80,7 @@ impl DefPathTable {\n     }\n \n     #[inline(always)]\n-    pub fn def_path_hash(&self, index: DefIndex) -> u64 {\n+    pub fn def_path_hash(&self, index: DefIndex) -> Fingerprint {\n         self.def_path_hashes[index.address_space().index()]\n                             [index.as_array_index()]\n     }\n@@ -146,8 +147,8 @@ impl Decodable for DefPathTable {\n         let index_to_key_lo: Vec<DefKey> = Decodable::decode(d)?;\n         let index_to_key_hi: Vec<DefKey> = Decodable::decode(d)?;\n \n-        let def_path_hashes_lo: Vec<u64> = Decodable::decode(d)?;\n-        let def_path_hashes_hi: Vec<u64> = Decodable::decode(d)?;\n+        let def_path_hashes_lo: Vec<Fingerprint> = Decodable::decode(d)?;\n+        let def_path_hashes_hi: Vec<Fingerprint> = Decodable::decode(d)?;\n \n         let index_to_key = [index_to_key_lo, index_to_key_hi];\n         let def_path_hashes = [def_path_hashes_lo, def_path_hashes_hi];\n@@ -210,7 +211,7 @@ pub struct DefKey {\n }\n \n impl DefKey {\n-    fn compute_stable_hash(&self, parent_hash: u64) -> u64 {\n+    fn compute_stable_hash(&self, parent_hash: Fingerprint) -> Fingerprint {\n         let mut hasher = StableHasher::new();\n \n         // We hash a 0u8 here to disambiguate between regular DefPath hashes,\n@@ -221,7 +222,7 @@ impl DefKey {\n         hasher.finish()\n     }\n \n-    fn root_parent_stable_hash(crate_name: &str, crate_disambiguator: &str) -> u64 {\n+    fn root_parent_stable_hash(crate_name: &str, crate_disambiguator: &str) -> Fingerprint {\n         let mut hasher = StableHasher::new();\n         // Disambiguate this from a regular DefPath hash,\n         // see compute_stable_hash() above.\n@@ -396,7 +397,7 @@ impl Definitions {\n     }\n \n     #[inline(always)]\n-    pub fn def_path_hash(&self, index: DefIndex) -> u64 {\n+    pub fn def_path_hash(&self, index: DefIndex) -> Fingerprint {\n         self.table.def_path_hash(index)\n     }\n "}, {"sha": "868730edfedda83b1d4d10ef586ca3f37b75dc58", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -442,27 +442,36 @@ impl<'hir> Map<'hir> {\n         self.local_def_id(self.body_owner(id))\n     }\n \n-    /// Given a body owner's id, returns the `BodyId` associated with it.\n-    pub fn body_owned_by(&self, id: NodeId) -> BodyId {\n+    /// Given a node id, returns the `BodyId` associated with it,\n+    /// if the node is a body owner, otherwise returns `None`.\n+    pub fn maybe_body_owned_by(&self, id: NodeId) -> Option<BodyId> {\n         if let Some(entry) = self.find_entry(id) {\n             if let Some(body_id) = entry.associated_body() {\n                 // For item-like things and closures, the associated\n                 // body has its own distinct id, and that is returned\n                 // by `associated_body`.\n-                body_id\n+                Some(body_id)\n             } else {\n                 // For some expressions, the expression is its own body.\n                 if let EntryExpr(_, expr) = entry {\n-                    BodyId { node_id: expr.id }\n+                    Some(BodyId { node_id: expr.id })\n                 } else {\n-                    span_bug!(self.span(id), \"id `{}` has no associated body\", id);\n+                    None\n                 }\n             }\n         } else {\n             bug!(\"no entry for id `{}`\", id)\n         }\n     }\n \n+    /// Given a body owner's id, returns the `BodyId` associated with it.\n+    pub fn body_owned_by(&self, id: NodeId) -> BodyId {\n+        self.maybe_body_owned_by(id).unwrap_or_else(|| {\n+            span_bug!(self.span(id), \"body_owned_by: {} has no associated body\",\n+                      self.node_to_string(id));\n+        })\n+    }\n+\n     pub fn ty_param_owner(&self, id: NodeId) -> NodeId {\n         match self.get(id) {\n             NodeItem(&Item { node: ItemTrait(..), .. }) => id,\n@@ -488,15 +497,15 @@ impl<'hir> Map<'hir> {\n     }\n \n     pub fn trait_impls(&self, trait_did: DefId) -> &'hir [NodeId] {\n-        self.dep_graph.read(DepNode::TraitImpls(trait_did));\n+        self.dep_graph.read(DepNode::AllLocalTraitImpls);\n \n         // NB: intentionally bypass `self.forest.krate()` so that we\n         // do not trigger a read of the whole krate here\n         self.forest.krate.trait_impls.get(&trait_did).map_or(&[], |xs| &xs[..])\n     }\n \n     pub fn trait_default_impl(&self, trait_did: DefId) -> Option<NodeId> {\n-        self.dep_graph.read(DepNode::TraitImpls(trait_did));\n+        self.dep_graph.read(DepNode::AllLocalTraitImpls);\n \n         // NB: intentionally bypass `self.forest.krate()` so that we\n         // do not trigger a read of the whole krate here"}, {"sha": "cb7f530b9952f779011e899b13dbde7fde04b977", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -1712,6 +1712,7 @@ pub enum Item_ {\n     /// An implementation, eg `impl<A> Trait for Foo { .. }`\n     ItemImpl(Unsafety,\n              ImplPolarity,\n+             Defaultness,\n              Generics,\n              Option<TraitRef>, // (optional) trait this impl implements\n              P<Ty>, // self"}, {"sha": "a78d5ce1c16d0995e38372b9f911fd80af70208b", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -678,12 +678,14 @@ impl<'a> State<'a> {\n             }\n             hir::ItemImpl(unsafety,\n                           polarity,\n+                          defaultness,\n                           ref generics,\n                           ref opt_trait,\n                           ref ty,\n                           ref impl_items) => {\n                 self.head(\"\")?;\n                 self.print_visibility(&item.vis)?;\n+                self.print_defaultness(defaultness)?;\n                 self.print_unsafety(unsafety)?;\n                 self.word_nbsp(\"impl\")?;\n \n@@ -820,6 +822,14 @@ impl<'a> State<'a> {\n         }\n     }\n \n+    pub fn print_defaultness(&mut self, defaultness: hir::Defaultness) -> io::Result<()> {\n+        match defaultness {\n+            hir::Defaultness::Default { .. } => self.word_nbsp(\"default\")?,\n+            hir::Defaultness::Final => (),\n+        }\n+        Ok(())\n+    }\n+\n     pub fn print_struct(&mut self,\n                         struct_def: &hir::VariantData,\n                         generics: &hir::Generics,\n@@ -931,11 +941,7 @@ impl<'a> State<'a> {\n         self.hardbreak_if_not_bol()?;\n         self.maybe_print_comment(ii.span.lo)?;\n         self.print_outer_attributes(&ii.attrs)?;\n-\n-        match ii.defaultness {\n-            hir::Defaultness::Default { .. } => self.word_nbsp(\"default\")?,\n-            hir::Defaultness::Final => (),\n-        }\n+        self.print_defaultness(ii.defaultness)?;\n \n         match ii.node {\n             hir::ImplItemKind::Const(ref ty, expr) => {"}, {"sha": "a6cfcb710edad6919ec68c2c32008f38c95681d7", "filename": "src/librustc/hir/svh.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fhir%2Fsvh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fhir%2Fsvh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fsvh.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -66,3 +66,7 @@ impl Decodable for Svh {\n          .map(Svh::new)\n     }\n }\n+\n+impl_stable_hash_for!(struct Svh {\n+    hash\n+});"}, {"sha": "b21c3a2b216000e4072b3e2b11dbcccc637c6345", "filename": "src/librustc/ich/caching_codemap_view.rs", "status": "modified", "additions": 32, "deletions": 3, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fich%2Fcaching_codemap_view.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fich%2Fcaching_codemap_view.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fcaching_codemap_view.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -8,10 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use ty::TyCtxt;\n+use dep_graph::{DepGraph, DepNode};\n+use hir::def_id::{DefId, CrateNum, CRATE_DEF_INDEX};\n+use rustc_data_structures::bitvec::BitVector;\n use std::rc::Rc;\n+use std::sync::Arc;\n use syntax::codemap::CodeMap;\n use syntax_pos::{BytePos, FileMap};\n+use ty::TyCtxt;\n \n #[derive(Clone)]\n struct CacheEntry {\n@@ -20,30 +24,37 @@ struct CacheEntry {\n     line_start: BytePos,\n     line_end: BytePos,\n     file: Rc<FileMap>,\n+    file_index: usize,\n }\n \n pub struct CachingCodemapView<'tcx> {\n     codemap: &'tcx CodeMap,\n     line_cache: [CacheEntry; 3],\n     time_stamp: usize,\n+    dep_graph: DepGraph,\n+    dep_tracking_reads: BitVector,\n }\n \n impl<'tcx> CachingCodemapView<'tcx> {\n     pub fn new<'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> CachingCodemapView<'tcx> {\n         let codemap = tcx.sess.codemap();\n-        let first_file = codemap.files.borrow()[0].clone();\n+        let files = codemap.files_untracked();\n+        let first_file = files[0].clone();\n         let entry = CacheEntry {\n             time_stamp: 0,\n             line_number: 0,\n             line_start: BytePos(0),\n             line_end: BytePos(0),\n             file: first_file,\n+            file_index: 0,\n         };\n \n         CachingCodemapView {\n+            dep_graph: tcx.dep_graph.clone(),\n             codemap: codemap,\n             line_cache: [entry.clone(), entry.clone(), entry.clone()],\n             time_stamp: 0,\n+            dep_tracking_reads: BitVector::new(files.len()),\n         }\n     }\n \n@@ -56,6 +67,10 @@ impl<'tcx> CachingCodemapView<'tcx> {\n         for cache_entry in self.line_cache.iter_mut() {\n             if pos >= cache_entry.line_start && pos < cache_entry.line_end {\n                 cache_entry.time_stamp = self.time_stamp;\n+                if self.dep_tracking_reads.insert(cache_entry.file_index) {\n+                    self.dep_graph.read(dep_node(cache_entry));\n+                }\n+\n                 return Some((cache_entry.file.clone(),\n                              cache_entry.line_number,\n                              pos - cache_entry.line_start));\n@@ -75,14 +90,15 @@ impl<'tcx> CachingCodemapView<'tcx> {\n         // If the entry doesn't point to the correct file, fix it up\n         if pos < cache_entry.file.start_pos || pos >= cache_entry.file.end_pos {\n             let file_valid;\n-            let files = self.codemap.files.borrow();\n+            let files = self.codemap.files_untracked();\n \n             if files.len() > 0 {\n                 let file_index = self.codemap.lookup_filemap_idx(pos);\n                 let file = files[file_index].clone();\n \n                 if pos >= file.start_pos && pos < file.end_pos {\n                     cache_entry.file = file;\n+                    cache_entry.file_index = file_index;\n                     file_valid = true;\n                 } else {\n                     file_valid = false;\n@@ -104,8 +120,21 @@ impl<'tcx> CachingCodemapView<'tcx> {\n         cache_entry.line_end = line_bounds.1;\n         cache_entry.time_stamp = self.time_stamp;\n \n+        if self.dep_tracking_reads.insert(cache_entry.file_index) {\n+            self.dep_graph.read(dep_node(cache_entry));\n+        }\n+\n         return Some((cache_entry.file.clone(),\n                      cache_entry.line_number,\n                      pos - cache_entry.line_start));\n     }\n }\n+\n+fn dep_node(cache_entry: &CacheEntry) -> DepNode<DefId> {\n+    let def_id = DefId {\n+        krate: CrateNum::from_u32(cache_entry.file.crate_of_origin),\n+        index: CRATE_DEF_INDEX,\n+    };\n+    let name = Arc::new(cache_entry.file.name.clone());\n+    DepNode::FileMap(def_id, name)\n+}"}, {"sha": "a947f6aeff709af0ebc9ec71a47658cc2988e084", "filename": "src/librustc/ich/fingerprint.rs", "status": "modified", "additions": 33, "deletions": 45, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fich%2Ffingerprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fich%2Ffingerprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Ffingerprint.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -10,87 +10,75 @@\n \n use rustc_serialize::{Encodable, Decodable, Encoder, Decoder};\n use rustc_data_structures::stable_hasher;\n-use rustc_data_structures::ToHex;\n-\n-const FINGERPRINT_LENGTH: usize = 16;\n+use std::mem;\n+use std::slice;\n \n #[derive(Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Clone, Copy)]\n-pub struct Fingerprint(pub [u8; FINGERPRINT_LENGTH]);\n+pub struct Fingerprint(u64, u64);\n \n impl Fingerprint {\n     #[inline]\n     pub fn zero() -> Fingerprint {\n-        Fingerprint([0; FINGERPRINT_LENGTH])\n+        Fingerprint(0, 0)\n     }\n \n+    #[inline]\n     pub fn from_smaller_hash(hash: u64) -> Fingerprint {\n-        let mut result = Fingerprint::zero();\n-        result.0[0] = (hash >>  0) as u8;\n-        result.0[1] = (hash >>  8) as u8;\n-        result.0[2] = (hash >> 16) as u8;\n-        result.0[3] = (hash >> 24) as u8;\n-        result.0[4] = (hash >> 32) as u8;\n-        result.0[5] = (hash >> 40) as u8;\n-        result.0[6] = (hash >> 48) as u8;\n-        result.0[7] = (hash >> 56) as u8;\n-        result\n+        Fingerprint(hash, hash)\n     }\n \n+    #[inline]\n     pub fn to_smaller_hash(&self) -> u64 {\n-        ((self.0[0] as u64) <<  0) |\n-        ((self.0[1] as u64) <<  8) |\n-        ((self.0[2] as u64) << 16) |\n-        ((self.0[3] as u64) << 24) |\n-        ((self.0[4] as u64) << 32) |\n-        ((self.0[5] as u64) << 40) |\n-        ((self.0[6] as u64) << 48) |\n-        ((self.0[7] as u64) << 56)\n+        self.0\n     }\n \n     pub fn to_hex(&self) -> String {\n-        self.0.to_hex()\n+        format!(\"{:x}{:x}\", self.0, self.1)\n     }\n }\n \n impl Encodable for Fingerprint {\n     #[inline]\n     fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n-        for &byte in &self.0 {\n-            s.emit_u8(byte)?;\n-        }\n-        Ok(())\n+        s.emit_u64(self.0.to_le())?;\n+        s.emit_u64(self.1.to_le())\n     }\n }\n \n impl Decodable for Fingerprint {\n     #[inline]\n     fn decode<D: Decoder>(d: &mut D) -> Result<Fingerprint, D::Error> {\n-        let mut result = Fingerprint([0u8; FINGERPRINT_LENGTH]);\n-        for byte in &mut result.0 {\n-            *byte = d.read_u8()?;\n-        }\n-        Ok(result)\n+        let _0 = u64::from_le(d.read_u64()?);\n+        let _1 = u64::from_le(d.read_u64()?);\n+        Ok(Fingerprint(_0, _1))\n     }\n }\n \n impl ::std::fmt::Display for Fingerprint {\n     fn fmt(&self, formatter: &mut ::std::fmt::Formatter) -> Result<(), ::std::fmt::Error> {\n-        for i in 0 .. self.0.len() {\n-            if i > 0 {\n-                write!(formatter, \"::\")?;\n-            }\n-\n-            write!(formatter, \"{}\", self.0[i])?;\n-        }\n-        Ok(())\n+        write!(formatter, \"{:x}-{:x}\", self.0, self.1)\n     }\n }\n \n-\n impl stable_hasher::StableHasherResult for Fingerprint {\n     fn finish(mut hasher: stable_hasher::StableHasher<Self>) -> Self {\n-        let mut fingerprint = Fingerprint::zero();\n-        fingerprint.0.copy_from_slice(hasher.finalize());\n-        fingerprint\n+        let hash_bytes: &[u8] = hasher.finalize();\n+\n+        assert!(hash_bytes.len() >= mem::size_of::<u64>() * 2);\n+        let hash_bytes: &[u64] = unsafe {\n+            slice::from_raw_parts(hash_bytes.as_ptr() as *const u64, 2)\n+        };\n+\n+        // The bytes returned bytes the Blake2B hasher are always little-endian.\n+        Fingerprint(u64::from_le(hash_bytes[0]), u64::from_le(hash_bytes[1]))\n+    }\n+}\n+\n+impl<CTX> stable_hasher::HashStable<CTX> for Fingerprint {\n+    #[inline]\n+    fn hash_stable<W: stable_hasher::StableHasherResult>(&self,\n+                                          _: &mut CTX,\n+                                          hasher: &mut stable_hasher::StableHasher<W>) {\n+        ::std::hash::Hash::hash(self, hasher);\n     }\n }"}, {"sha": "f25ec8ecd4d71beee729bf73ba0107d38cc38fa8", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -16,7 +16,7 @@ use ty;\n use util::nodemap::NodeMap;\n \n use std::hash as std_hash;\n-use std::collections::{HashMap, HashSet};\n+use std::collections::{HashMap, HashSet, BTreeMap};\n \n use syntax::ast;\n use syntax::attr;\n@@ -110,7 +110,7 @@ impl<'a, 'tcx: 'a> StableHashingContext<'a, 'tcx> {\n     }\n \n     #[inline]\n-    pub fn def_path_hash(&mut self, def_id: DefId) -> u64 {\n+    pub fn def_path_hash(&mut self, def_id: DefId) -> ich::Fingerprint {\n         self.tcx.def_path_hash(def_id)\n     }\n \n@@ -348,3 +348,25 @@ pub fn hash_stable_nodemap<'a, 'tcx, V, W>(hcx: &mut StableHashingContext<'a, 't\n         hcx.tcx.hir.definitions().node_to_hir_id(*node_id).local_id\n     });\n }\n+\n+\n+pub fn hash_stable_btreemap<'a, 'tcx, K, V, SK, F, W>(hcx: &mut StableHashingContext<'a, 'tcx>,\n+                                                      hasher: &mut StableHasher<W>,\n+                                                      map: &BTreeMap<K, V>,\n+                                                      extract_stable_key: F)\n+    where K: Eq + Ord,\n+          V: HashStable<StableHashingContext<'a, 'tcx>>,\n+          SK: HashStable<StableHashingContext<'a, 'tcx>> + Ord + Clone,\n+          F: Fn(&mut StableHashingContext<'a, 'tcx>, &K) -> SK,\n+          W: StableHasherResult,\n+{\n+    let mut keys: Vec<_> = map.keys()\n+                              .map(|k| (extract_stable_key(hcx, k), k))\n+                              .collect();\n+    keys.sort_unstable_by_key(|&(ref stable_key, _)| stable_key.clone());\n+    keys.len().hash_stable(hcx, hasher);\n+    for (stable_key, key) in keys {\n+        stable_key.hash_stable(hcx, hasher);\n+        map[key].hash_stable(hcx, hasher);\n+    }\n+}"}, {"sha": "e95dbdd15c5f0e1a285cc025d58d5ac628c22bd6", "filename": "src/librustc/ich/impls_cstore.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fich%2Fimpls_cstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fich%2Fimpls_cstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_cstore.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! This module contains `HashStable` implementations for various data types\n+//! from rustc::middle::cstore in no particular order.\n+\n+use middle;\n+\n+impl_stable_hash_for!(enum middle::cstore::DepKind {\n+    UnexportedMacrosOnly,\n+    MacrosOnly,\n+    Implicit,\n+    Explicit\n+});\n+\n+impl_stable_hash_for!(enum middle::cstore::NativeLibraryKind {\n+    NativeStatic,\n+    NativeStaticNobundle,\n+    NativeFramework,\n+    NativeUnknown\n+});\n+\n+impl_stable_hash_for!(struct middle::cstore::NativeLibrary {\n+    kind,\n+    name,\n+    cfg,\n+    foreign_items\n+});\n+\n+impl_stable_hash_for!(enum middle::cstore::LinkagePreference {\n+    RequireDynamic,\n+    RequireStatic\n+});"}, {"sha": "abc51601b6ecef814c2ea2e95da8e37739367521", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -933,7 +933,7 @@ impl_stable_hash_for!(enum hir::Item_ {\n     ItemUnion(variant_data, generics),\n     ItemTrait(unsafety, generics, bounds, item_refs),\n     ItemDefaultImpl(unsafety, trait_ref),\n-    ItemImpl(unsafety, impl_polarity, generics, trait_ref, ty, impl_item_refs)\n+    ItemImpl(unsafety, impl_polarity, impl_defaultness, generics, trait_ref, ty, impl_item_refs)\n });\n \n impl_stable_hash_for!(struct hir::TraitItemRef {\n@@ -1120,3 +1120,11 @@ impl_stable_hash_for!(struct hir::def::Export {\n     def,\n     span\n });\n+\n+impl<'a, 'tcx> HashStable<StableHashingContext<'a, 'tcx>> for ::middle::lang_items::LangItem {\n+    fn hash_stable<W: StableHasherResult>(&self,\n+                                          _: &mut StableHashingContext<'a, 'tcx>,\n+                                          hasher: &mut StableHasher<W>) {\n+        ::std::hash::Hash::hash(self, hasher);\n+    }\n+}"}, {"sha": "7138db01339f6a89489a6204526c24fb26c96b87", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 79, "deletions": 1, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -19,7 +19,9 @@ use std::mem;\n use syntax::ast;\n use syntax::parse::token;\n use syntax::tokenstream;\n-use syntax_pos::Span;\n+use syntax_pos::{Span, FileMap};\n+\n+use hir::def_id::{DefId, CrateNum, CRATE_DEF_INDEX};\n \n use rustc_data_structures::stable_hasher::{HashStable, StableHasher,\n                                            StableHasherResult};\n@@ -299,3 +301,79 @@ fn hash_token<'a, 'tcx, W: StableHasherResult>(token: &token::Token,\n         token::Token::Shebang(val) => val.hash_stable(hcx, hasher),\n     }\n }\n+\n+impl_stable_hash_for_spanned!(::syntax::ast::NestedMetaItemKind);\n+\n+impl_stable_hash_for!(enum ::syntax::ast::NestedMetaItemKind {\n+    MetaItem(meta_item),\n+    Literal(lit)\n+});\n+\n+impl_stable_hash_for!(struct ::syntax::ast::MetaItem {\n+    name,\n+    node,\n+    span\n+});\n+\n+impl_stable_hash_for!(enum ::syntax::ast::MetaItemKind {\n+    Word,\n+    List(nested_items),\n+    NameValue(lit)\n+});\n+\n+impl<'a, 'tcx> HashStable<StableHashingContext<'a, 'tcx>> for FileMap {\n+    fn hash_stable<W: StableHasherResult>(&self,\n+                                          hcx: &mut StableHashingContext<'a, 'tcx>,\n+                                          hasher: &mut StableHasher<W>) {\n+        let FileMap {\n+            ref name,\n+            name_was_remapped,\n+            crate_of_origin,\n+            // Do not hash the source as it is not encoded\n+            src: _,\n+            start_pos,\n+            end_pos: _,\n+            ref lines,\n+            ref multibyte_chars,\n+        } = *self;\n+\n+        name.hash_stable(hcx, hasher);\n+        name_was_remapped.hash_stable(hcx, hasher);\n+\n+        DefId {\n+            krate: CrateNum::from_u32(crate_of_origin),\n+            index: CRATE_DEF_INDEX,\n+        }.hash_stable(hcx, hasher);\n+\n+        // We only hash the relative position within this filemap\n+        let lines = lines.borrow();\n+        lines.len().hash_stable(hcx, hasher);\n+        for &line in lines.iter() {\n+            stable_byte_pos(line, start_pos).hash_stable(hcx, hasher);\n+        }\n+\n+        // We only hash the relative position within this filemap\n+        let multibyte_chars = multibyte_chars.borrow();\n+        multibyte_chars.len().hash_stable(hcx, hasher);\n+        for &char_pos in multibyte_chars.iter() {\n+            stable_multibyte_char(char_pos, start_pos).hash_stable(hcx, hasher);\n+        }\n+    }\n+}\n+\n+fn stable_byte_pos(pos: ::syntax_pos::BytePos,\n+                   filemap_start: ::syntax_pos::BytePos)\n+                   -> u32 {\n+    pos.0 - filemap_start.0\n+}\n+\n+fn stable_multibyte_char(mbc: ::syntax_pos::MultiByteChar,\n+                         filemap_start: ::syntax_pos::BytePos)\n+                         -> (u32, u32) {\n+    let ::syntax_pos::MultiByteChar {\n+        pos,\n+        bytes,\n+    } = mbc;\n+\n+    (pos.0 - filemap_start.0, bytes as u32)\n+}"}, {"sha": "3bbac8d6a64259ec513d70afbccb2dd5cc27c0b6", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 9, "deletions": 25, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -39,7 +39,7 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a, 'tcx>> for ty::subst::Kind<'t\n     }\n }\n \n-impl<'a, 'tcx> HashStable<StableHashingContext<'a, 'tcx>> for ty::Region {\n+impl<'a, 'tcx> HashStable<StableHashingContext<'a, 'tcx>> for ty::RegionKind {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a, 'tcx>,\n                                           hasher: &mut StableHasher<W>) {\n@@ -54,7 +54,8 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a, 'tcx>> for ty::Region {\n                 db.depth.hash_stable(hcx, hasher);\n                 i.hash_stable(hcx, hasher);\n             }\n-            ty::ReEarlyBound(ty::EarlyBoundRegion { index, name }) => {\n+            ty::ReEarlyBound(ty::EarlyBoundRegion { def_id, index, name }) => {\n+                def_id.hash_stable(hcx, hasher);\n                 index.hash_stable(hcx, hasher);\n                 name.hash_stable(hcx, hasher);\n             }\n@@ -409,11 +410,6 @@ impl_stable_hash_for!(enum ::middle::resolve_lifetime::Region {\n     Free(call_site_scope_data, decl)\n });\n \n-impl_stable_hash_for!(struct ::middle::region::CallSiteScopeData {\n-    fn_id,\n-    body_id\n-});\n-\n impl_stable_hash_for!(struct ty::DebruijnIndex {\n     depth\n });\n@@ -437,31 +433,19 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a, 'tcx>> for ::middle::region::\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a, 'tcx>,\n                                           hasher: &mut StableHasher<W>) {\n-        hcx.with_node_id_hashing_mode(NodeIdHashingMode::HashDefPath, |hcx| {\n-            hcx.tcx().region_maps.code_extent_data(*self).hash_stable(hcx, hasher);\n-        });\n-    }\n-}\n-\n-impl<'a, 'tcx> HashStable<StableHashingContext<'a, 'tcx>> for ::middle::region::CodeExtentData\n-{\n-    fn hash_stable<W: StableHasherResult>(&self,\n-                                          hcx: &mut StableHashingContext<'a, 'tcx>,\n-                                          hasher: &mut StableHasher<W>) {\n-        use middle::region::CodeExtentData;\n+        use middle::region::CodeExtent;\n \n         mem::discriminant(self).hash_stable(hcx, hasher);\n         match *self {\n-            CodeExtentData::Misc(node_id) |\n-            CodeExtentData::DestructionScope(node_id) => {\n+            CodeExtent::Misc(node_id) |\n+            CodeExtent::DestructionScope(node_id) => {\n                 node_id.hash_stable(hcx, hasher);\n             }\n-            CodeExtentData::CallSiteScope { fn_id, body_id } |\n-            CodeExtentData::ParameterScope { fn_id, body_id } => {\n-                fn_id.hash_stable(hcx, hasher);\n+            CodeExtent::CallSiteScope(body_id) |\n+            CodeExtent::ParameterScope(body_id) => {\n                 body_id.hash_stable(hcx, hasher);\n             }\n-            CodeExtentData::Remainder(block_remainder) => {\n+            CodeExtent::Remainder(block_remainder) => {\n                 block_remainder.hash_stable(hcx, hasher);\n             }\n         }"}, {"sha": "5b23809085053d09b2cf6a821a25140dc9315602", "filename": "src/librustc/ich/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fich%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fich%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fmod.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -13,12 +13,14 @@\n pub use self::fingerprint::Fingerprint;\n pub use self::caching_codemap_view::CachingCodemapView;\n pub use self::hcx::{StableHashingContext, NodeIdHashingMode, hash_stable_hashmap,\n-                    hash_stable_hashset, hash_stable_nodemap};\n+                    hash_stable_hashset, hash_stable_nodemap,\n+                    hash_stable_btreemap};\n mod fingerprint;\n mod caching_codemap_view;\n mod hcx;\n \n mod impls_const_math;\n+mod impls_cstore;\n mod impls_hir;\n mod impls_mir;\n mod impls_ty;"}, {"sha": "aabb6aff55140c4138efecfa741db1245b2e0e4b", "filename": "src/librustc/infer/combine.rs", "status": "modified", "additions": 162, "deletions": 49, "changes": 211, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcombine.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -39,12 +39,13 @@ use super::sub::Sub;\n use super::InferCtxt;\n use super::{MiscVariable, TypeTrace};\n \n+use hir::def_id::DefId;\n use ty::{IntType, UintType};\n use ty::{self, Ty, TyCtxt};\n use ty::error::TypeError;\n-use ty::fold::TypeFoldable;\n-use ty::relate::{RelateResult, TypeRelation};\n-use traits::PredicateObligations;\n+use ty::relate::{self, Relate, RelateResult, TypeRelation};\n+use ty::subst::Substs;\n+use traits::{Obligation, PredicateObligations};\n \n use syntax::ast;\n use syntax_pos::Span;\n@@ -207,11 +208,16 @@ impl<'infcx, 'gcx, 'tcx> CombineFields<'infcx, 'gcx, 'tcx> {\n         // `'?2` and `?3` are fresh region/type inference\n         // variables. (Down below, we will relate `a_ty <: b_ty`,\n         // adding constraints like `'x: '?2` and `?1 <: ?3`.)\n-        let b_ty = self.generalize(a_ty, b_vid, dir == EqTo)?;\n+        let Generalization { ty: b_ty, needs_wf } = self.generalize(a_ty, b_vid, dir)?;\n         debug!(\"instantiate(a_ty={:?}, dir={:?}, b_vid={:?}, generalized b_ty={:?})\",\n                a_ty, dir, b_vid, b_ty);\n         self.infcx.type_variables.borrow_mut().instantiate(b_vid, b_ty);\n \n+        if needs_wf {\n+            self.obligations.push(Obligation::new(self.trace.cause.clone(),\n+                                                  ty::Predicate::WellFormed(b_ty)));\n+        }\n+\n         // Finally, relate `b_ty` to `a_ty`, as described in previous comment.\n         //\n         // FIXME(#16847): This code is non-ideal because all these subtype\n@@ -230,50 +236,142 @@ impl<'infcx, 'gcx, 'tcx> CombineFields<'infcx, 'gcx, 'tcx> {\n \n     /// Attempts to generalize `ty` for the type variable `for_vid`.\n     /// This checks for cycle -- that is, whether the type `ty`\n-    /// references `for_vid`. If `is_eq_relation` is false, it will\n-    /// also replace all regions/unbound-type-variables with fresh\n-    /// variables. Returns `TyError` in the case of a cycle, `Ok`\n-    /// otherwise.\n+    /// references `for_vid`. The `dir` is the \"direction\" for which we\n+    /// a performing the generalization (i.e., are we producing a type\n+    /// that can be used as a supertype etc).\n     ///\n     /// Preconditions:\n     ///\n     /// - `for_vid` is a \"root vid\"\n     fn generalize(&self,\n                   ty: Ty<'tcx>,\n                   for_vid: ty::TyVid,\n-                  is_eq_relation: bool)\n-                  -> RelateResult<'tcx, Ty<'tcx>>\n+                  dir: RelationDir)\n+                  -> RelateResult<'tcx, Generalization<'tcx>>\n     {\n+        // Determine the ambient variance within which `ty` appears.\n+        // The surrounding equation is:\n+        //\n+        //     ty [op] ty2\n+        //\n+        // where `op` is either `==`, `<:`, or `:>`. This maps quite\n+        // naturally.\n+        let ambient_variance = match dir {\n+            RelationDir::EqTo => ty::Invariant,\n+            RelationDir::SubtypeOf => ty::Covariant,\n+            RelationDir::SupertypeOf => ty::Contravariant,\n+        };\n+\n         let mut generalize = Generalizer {\n             infcx: self.infcx,\n             span: self.trace.cause.span,\n             for_vid_sub_root: self.infcx.type_variables.borrow_mut().sub_root_var(for_vid),\n-            is_eq_relation: is_eq_relation,\n-            cycle_detected: false\n+            ambient_variance: ambient_variance,\n+            needs_wf: false,\n         };\n-        let u = ty.fold_with(&mut generalize);\n-        if generalize.cycle_detected {\n-            Err(TypeError::CyclicTy)\n-        } else {\n-            Ok(u)\n-        }\n+\n+        let ty = generalize.relate(&ty, &ty)?;\n+        let needs_wf = generalize.needs_wf;\n+        Ok(Generalization { ty, needs_wf })\n     }\n }\n \n struct Generalizer<'cx, 'gcx: 'cx+'tcx, 'tcx: 'cx> {\n     infcx: &'cx InferCtxt<'cx, 'gcx, 'tcx>,\n     span: Span,\n     for_vid_sub_root: ty::TyVid,\n-    is_eq_relation: bool,\n-    cycle_detected: bool,\n+    ambient_variance: ty::Variance,\n+    needs_wf: bool, // see the field `needs_wf` in `Generalization`\n }\n \n-impl<'cx, 'gcx, 'tcx> ty::fold::TypeFolder<'gcx, 'tcx> for Generalizer<'cx, 'gcx, 'tcx> {\n-    fn tcx<'a>(&'a self) -> TyCtxt<'a, 'gcx, 'tcx> {\n+/// Result from a generalization operation. This includes\n+/// not only the generalized type, but also a bool flag\n+/// indicating whether further WF checks are needed.q\n+struct Generalization<'tcx> {\n+    ty: Ty<'tcx>,\n+\n+    /// If true, then the generalized type may not be well-formed,\n+    /// even if the source type is well-formed, so we should add an\n+    /// additional check to enforce that it is. This arises in\n+    /// particular around 'bivariant' type parameters that are only\n+    /// constrained by a where-clause. As an example, imagine a type:\n+    ///\n+    ///     struct Foo<A, B> where A: Iterator<Item=B> {\n+    ///         data: A\n+    ///     }\n+    ///\n+    /// here, `A` will be covariant, but `B` is\n+    /// unconstrained. However, whatever it is, for `Foo` to be WF, it\n+    /// must be equal to `A::Item`. If we have an input `Foo<?A, ?B>`,\n+    /// then after generalization we will wind up with a type like\n+    /// `Foo<?C, ?D>`. When we enforce that `Foo<?A, ?B> <: Foo<?C,\n+    /// ?D>` (or `>:`), we will wind up with the requirement that `?A\n+    /// <: ?C`, but no particular relationship between `?B` and `?D`\n+    /// (after all, we do not know the variance of the normalized form\n+    /// of `A::Item` with respect to `A`). If we do nothing else, this\n+    /// may mean that `?D` goes unconstrained (as in #41677).  So, in\n+    /// this scenario where we create a new type variable in a\n+    /// bivariant context, we set the `needs_wf` flag to true. This\n+    /// will force the calling code to check that `WF(Foo<?C, ?D>)`\n+    /// holds, which in turn implies that `?C::Item == ?D`. So once\n+    /// `?C` is constrained, that should suffice to restrict `?D`.\n+    needs_wf: bool,\n+}\n+\n+impl<'cx, 'gcx, 'tcx> TypeRelation<'cx, 'gcx, 'tcx> for Generalizer<'cx, 'gcx, 'tcx> {\n+    fn tcx(&self) -> TyCtxt<'cx, 'gcx, 'tcx> {\n         self.infcx.tcx\n     }\n \n-    fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n+    fn tag(&self) -> &'static str {\n+        \"Generalizer\"\n+    }\n+\n+    fn a_is_expected(&self) -> bool {\n+        true\n+    }\n+\n+    fn binders<T>(&mut self, a: &ty::Binder<T>, b: &ty::Binder<T>)\n+                  -> RelateResult<'tcx, ty::Binder<T>>\n+        where T: Relate<'tcx>\n+    {\n+        Ok(ty::Binder(self.relate(a.skip_binder(), b.skip_binder())?))\n+    }\n+\n+    fn relate_item_substs(&mut self,\n+                          item_def_id: DefId,\n+                          a_subst: &'tcx Substs<'tcx>,\n+                          b_subst: &'tcx Substs<'tcx>)\n+                          -> RelateResult<'tcx, &'tcx Substs<'tcx>>\n+    {\n+        if self.ambient_variance == ty::Variance::Invariant {\n+            // Avoid fetching the variance if we are in an invariant\n+            // context; no need, and it can induce dependency cycles\n+            // (e.g. #41849).\n+            relate::relate_substs(self, None, a_subst, b_subst)\n+        } else {\n+            let opt_variances = self.tcx().variances_of(item_def_id);\n+            relate::relate_substs(self, Some(&opt_variances), a_subst, b_subst)\n+        }\n+    }\n+\n+    fn relate_with_variance<T: Relate<'tcx>>(&mut self,\n+                                             variance: ty::Variance,\n+                                             a: &T,\n+                                             b: &T)\n+                                             -> RelateResult<'tcx, T>\n+    {\n+        let old_ambient_variance = self.ambient_variance;\n+        self.ambient_variance = self.ambient_variance.xform(variance);\n+\n+        let result = self.relate(a, b);\n+        self.ambient_variance = old_ambient_variance;\n+        result\n+    }\n+\n+    fn tys(&mut self, t: Ty<'tcx>, t2: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> {\n+        assert_eq!(t, t2); // we are abusing TypeRelation here; both LHS and RHS ought to be ==\n+\n         // Check to see whether the type we are genealizing references\n         // any other type variable related to `vid` via\n         // subtyping. This is basically our \"occurs check\", preventing\n@@ -286,49 +384,62 @@ impl<'cx, 'gcx, 'tcx> ty::fold::TypeFolder<'gcx, 'tcx> for Generalizer<'cx, 'gcx\n                 if sub_vid == self.for_vid_sub_root {\n                     // If sub-roots are equal, then `for_vid` and\n                     // `vid` are related via subtyping.\n-                    self.cycle_detected = true;\n-                    self.tcx().types.err\n+                    return Err(TypeError::CyclicTy);\n                 } else {\n                     match variables.probe_root(vid) {\n                         Some(u) => {\n                             drop(variables);\n-                            self.fold_ty(u)\n+                            self.relate(&u, &u)\n                         }\n                         None => {\n-                            if !self.is_eq_relation {\n-                                let origin = variables.origin(vid);\n-                                let new_var_id = variables.new_var(false, origin, None);\n-                                let u = self.tcx().mk_var(new_var_id);\n-                                debug!(\"generalize: replacing original vid={:?} with new={:?}\",\n-                                       vid, u);\n-                                u\n-                            } else {\n-                                t\n+                            match self.ambient_variance {\n+                                // Invariant: no need to make a fresh type variable.\n+                                ty::Invariant => return Ok(t),\n+\n+                                // Bivariant: make a fresh var, but we\n+                                // may need a WF predicate. See\n+                                // comment on `needs_wf` field for\n+                                // more info.\n+                                ty::Bivariant => self.needs_wf = true,\n+\n+                                // Co/contravariant: this will be\n+                                // sufficiently constrained later on.\n+                                ty::Covariant | ty::Contravariant => (),\n                             }\n+\n+                            let origin = variables.origin(vid);\n+                            let new_var_id = variables.new_var(false, origin, None);\n+                            let u = self.tcx().mk_var(new_var_id);\n+                            debug!(\"generalize: replacing original vid={:?} with new={:?}\",\n+                                   vid, u);\n+                            return Ok(u);\n                         }\n                     }\n                 }\n             }\n+            ty::TyInfer(ty::IntVar(_)) |\n+            ty::TyInfer(ty::FloatVar(_)) => {\n+                // No matter what mode we are in,\n+                // integer/floating-point types must be equal to be\n+                // relatable.\n+                Ok(t)\n+            }\n             _ => {\n-                t.super_fold_with(self)\n+                relate::super_relate_tys(self, t, t)\n             }\n         }\n     }\n \n-    fn fold_region(&mut self, r: &'tcx ty::Region) -> &'tcx ty::Region {\n+    fn regions(&mut self, r: ty::Region<'tcx>, r2: ty::Region<'tcx>)\n+               -> RelateResult<'tcx, ty::Region<'tcx>> {\n+        assert_eq!(r, r2); // we are abusing TypeRelation here; both LHS and RHS ought to be ==\n+\n         match *r {\n             // Never make variables for regions bound within the type itself,\n             // nor for erased regions.\n             ty::ReLateBound(..) |\n-            ty::ReErased => { return r; }\n-\n-            // Early-bound regions should really have been substituted away before\n-            // we get to this point.\n-            ty::ReEarlyBound(..) => {\n-                span_bug!(\n-                    self.span,\n-                    \"Encountered early bound region when generalizing: {:?}\",\n-                    r);\n+            ty::ReErased => {\n+                return Ok(r);\n             }\n \n             // Always make a fresh region variable for skolemized regions;\n@@ -341,16 +452,18 @@ impl<'cx, 'gcx, 'tcx> ty::fold::TypeFolder<'gcx, 'tcx> for Generalizer<'cx, 'gcx\n             ty::ReStatic |\n             ty::ReScope(..) |\n             ty::ReVar(..) |\n+            ty::ReEarlyBound(..) |\n             ty::ReFree(..) => {\n-                if self.is_eq_relation {\n-                    return r;\n+                match self.ambient_variance {\n+                    ty::Invariant => return Ok(r),\n+                    ty::Bivariant | ty::Covariant | ty::Contravariant => (),\n                 }\n             }\n         }\n \n         // FIXME: This is non-ideal because we don't give a\n         // very descriptive origin for this region variable.\n-        self.infcx.next_region_var(MiscVariable(self.span))\n+        Ok(self.infcx.next_region_var(MiscVariable(self.span)))\n     }\n }\n "}, {"sha": "f9ffaee81f1573de6c636e685d0418c45f0e9e33", "filename": "src/librustc/infer/equate.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Finfer%2Fequate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Finfer%2Fequate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fequate.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -11,9 +11,12 @@\n use super::combine::{CombineFields, RelationDir};\n use super::{Subtype};\n \n+use hir::def_id::DefId;\n+\n use ty::{self, Ty, TyCtxt};\n use ty::TyVar;\n-use ty::relate::{Relate, RelateResult, TypeRelation};\n+use ty::subst::Substs;\n+use ty::relate::{self, Relate, RelateResult, TypeRelation};\n \n /// Ensures `a` is made equal to `b`. Returns `a` on success.\n pub struct Equate<'combine, 'infcx: 'combine, 'gcx: 'infcx+'tcx, 'tcx: 'infcx> {\n@@ -38,6 +41,22 @@ impl<'combine, 'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx>\n \n     fn a_is_expected(&self) -> bool { self.a_is_expected }\n \n+    fn relate_item_substs(&mut self,\n+                          _item_def_id: DefId,\n+                          a_subst: &'tcx Substs<'tcx>,\n+                          b_subst: &'tcx Substs<'tcx>)\n+                          -> RelateResult<'tcx, &'tcx Substs<'tcx>>\n+    {\n+        // NB: Once we are equating types, we don't care about\n+        // variance, so don't try to lookup the variance here. This\n+        // also avoids some cycles (e.g. #41849) since looking up\n+        // variance requires computing types which can require\n+        // performing trait matching (which then performs equality\n+        // unification).\n+\n+        relate::relate_substs(self, None, a_subst, b_subst)\n+    }\n+\n     fn relate_with_variance<T: Relate<'tcx>>(&mut self,\n                                              _: ty::Variance,\n                                              a: &T,\n@@ -78,8 +97,8 @@ impl<'combine, 'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx>\n         }\n     }\n \n-    fn regions(&mut self, a: &'tcx ty::Region, b: &'tcx ty::Region)\n-               -> RelateResult<'tcx, &'tcx ty::Region> {\n+    fn regions(&mut self, a: ty::Region<'tcx>, b: ty::Region<'tcx>)\n+               -> RelateResult<'tcx, ty::Region<'tcx>> {\n         debug!(\"{}.regions({:?}, {:?})\",\n                self.tag(),\n                a,"}, {"sha": "0515e1cc304356f738a5c009e7d266d2ac164b59", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 46, "deletions": 29, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -69,6 +69,7 @@ use traits::{ObligationCause, ObligationCauseCode};\n use ty::{self, TyCtxt, TypeFoldable};\n use ty::{Region, Issue32330};\n use ty::error::TypeError;\n+use syntax::ast::DUMMY_NODE_ID;\n use syntax_pos::{Pos, Span};\n use errors::{DiagnosticBuilder, DiagnosticStyledString};\n \n@@ -78,7 +79,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub fn note_and_explain_region(self,\n                                    err: &mut DiagnosticBuilder,\n                                    prefix: &str,\n-                                   region: &'tcx ty::Region,\n+                                   region: ty::Region<'tcx>,\n                                    suffix: &str) {\n         fn item_scope_tag(item: &hir::Item) -> &'static str {\n             match item.node {\n@@ -112,7 +113,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                                         heading: &str, span: Span)\n                                         -> (String, Option<Span>) {\n             let lo = tcx.sess.codemap().lookup_char_pos_adj(span.lo);\n-            (format!(\"the {} at {}:{}\", heading, lo.line, lo.col.to_usize()),\n+            (format!(\"the {} at {}:{}\", heading, lo.line, lo.col.to_usize() + 1),\n              Some(span))\n         }\n \n@@ -123,14 +124,14 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                     format!(\"{}unknown scope: {:?}{}.  Please report a bug.\",\n                             prefix, scope, suffix)\n                 };\n-                let span = match scope.span(&self.region_maps, &self.hir) {\n+                let span = match scope.span(&self.hir) {\n                     Some(s) => s,\n                     None => {\n                         err.note(&unknown_scope());\n                         return;\n                     }\n                 };\n-                let tag = match self.hir.find(scope.node_id(&self.region_maps)) {\n+                let tag = match self.hir.find(scope.node_id()) {\n                     Some(hir_map::NodeBlock(_)) => \"block\",\n                     Some(hir_map::NodeExpr(expr)) => match expr.node {\n                         hir::ExprCall(..) => \"call\",\n@@ -150,19 +151,19 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                         return;\n                     }\n                 };\n-                let scope_decorated_tag = match self.region_maps.code_extent_data(scope) {\n-                    region::CodeExtentData::Misc(_) => tag,\n-                    region::CodeExtentData::CallSiteScope { .. } => {\n+                let scope_decorated_tag = match scope {\n+                    region::CodeExtent::Misc(_) => tag,\n+                    region::CodeExtent::CallSiteScope(_) => {\n                         \"scope of call-site for function\"\n                     }\n-                    region::CodeExtentData::ParameterScope { .. } => {\n+                    region::CodeExtent::ParameterScope(_) => {\n                         \"scope of function body\"\n                     }\n-                    region::CodeExtentData::DestructionScope(_) => {\n+                    region::CodeExtent::DestructionScope(_) => {\n                         new_string = format!(\"destruction scope surrounding {}\", tag);\n                         &new_string[..]\n                     }\n-                    region::CodeExtentData::Remainder(r) => {\n+                    region::CodeExtent::Remainder(r) => {\n                         new_string = format!(\"block suffix following statement {}\",\n                                              r.first_statement_index);\n                         &new_string[..]\n@@ -171,19 +172,36 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 explain_span(self, scope_decorated_tag, span)\n             }\n \n-            ty::ReFree(ref fr) => {\n-                let prefix = match fr.bound_region {\n-                    ty::BrAnon(idx) => {\n-                        format!(\"the anonymous lifetime #{} defined on\", idx + 1)\n+            ty::ReEarlyBound(_) |\n+            ty::ReFree(_) => {\n+                let scope = match *region {\n+                    ty::ReEarlyBound(ref br) => {\n+                        self.parent_def_id(br.def_id).unwrap()\n                     }\n-                    ty::BrFresh(_) => \"an anonymous lifetime defined on\".to_owned(),\n-                    _ => {\n-                        format!(\"the lifetime {} as defined on\",\n-                                fr.bound_region)\n+                    ty::ReFree(ref fr) => fr.scope,\n+                    _ => bug!()\n+                };\n+                let prefix = match *region {\n+                    ty::ReEarlyBound(ref br) => {\n+                        format!(\"the lifetime {} as defined on\", br.name)\n+                    }\n+                    ty::ReFree(ref fr) => {\n+                        match fr.bound_region {\n+                            ty::BrAnon(idx) => {\n+                                format!(\"the anonymous lifetime #{} defined on\", idx + 1)\n+                            }\n+                            ty::BrFresh(_) => \"an anonymous lifetime defined on\".to_owned(),\n+                            _ => {\n+                                format!(\"the lifetime {} as defined on\",\n+                                        fr.bound_region)\n+                            }\n+                        }\n                     }\n+                    _ => bug!()\n                 };\n \n-                let node = fr.scope.node_id(&self.region_maps);\n+                let node = self.hir.as_local_node_id(scope)\n+                                   .unwrap_or(DUMMY_NODE_ID);\n                 let unknown;\n                 let tag = match self.hir.find(node) {\n                     Some(hir_map::NodeBlock(_)) |\n@@ -197,12 +215,12 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                     Some(_) => {\n                         unknown = format!(\"unexpected node ({}) for scope {:?}.  \\\n                                            Please report a bug.\",\n-                                          self.hir.node_to_string(node), fr.scope);\n+                                          self.hir.node_to_string(node), scope);\n                         &unknown\n                     }\n                     None => {\n                         unknown = format!(\"unknown node for scope {:?}.  \\\n-                                           Please report a bug.\", fr.scope);\n+                                           Please report a bug.\", scope);\n                         &unknown\n                     }\n                 };\n@@ -214,8 +232,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n             ty::ReEmpty => (\"the empty lifetime\".to_owned(), None),\n \n-            ty::ReEarlyBound(ref data) => (data.name.to_string(), None),\n-\n             // FIXME(#13998) ReSkolemized should probably print like\n             // ReFree rather than dumping Debug output on the user.\n             //\n@@ -515,7 +531,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                         values.1.push_normal(\"<\");\n                     }\n \n-                    fn lifetime_display(lifetime: &Region) -> String {\n+                    fn lifetime_display(lifetime: Region) -> String {\n                         let s = format!(\"{}\", lifetime);\n                         if s.is_empty() {\n                             \"'_\".to_string()\n@@ -666,9 +682,9 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             }\n         }\n \n-        diag.span_label(span, &terr);\n+        diag.span_label(span, terr.to_string());\n         if let Some((sp, msg)) = secondary_span {\n-            diag.span_label(sp, &msg);\n+            diag.span_label(sp, msg);\n         }\n \n         self.note_error_origin(diag, &cause);\n@@ -767,7 +783,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     fn report_generic_bound_failure(&self,\n                                     origin: SubregionOrigin<'tcx>,\n                                     bound_kind: GenericKind<'tcx>,\n-                                    sub: &'tcx Region)\n+                                    sub: Region<'tcx>)\n     {\n         // FIXME: it would be better to report the first error message\n         // with the span of the parameter itself, rather than the span\n@@ -795,6 +811,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         }\n \n         let mut err = match *sub {\n+            ty::ReEarlyBound(_) |\n             ty::ReFree(ty::FreeRegion {bound_region: ty::BrNamed(..), ..}) => {\n                 // Does the required lifetime have a nice name we can print?\n                 let mut err = struct_span_err!(self.tcx.sess,\n@@ -846,9 +863,9 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     fn report_sub_sup_conflict(&self,\n                                var_origin: RegionVariableOrigin,\n                                sub_origin: SubregionOrigin<'tcx>,\n-                               sub_region: &'tcx Region,\n+                               sub_region: Region<'tcx>,\n                                sup_origin: SubregionOrigin<'tcx>,\n-                               sup_region: &'tcx Region) {\n+                               sup_region: Region<'tcx>) {\n         let mut err = self.report_inference_failure(var_origin);\n \n         self.tcx.note_and_explain_region(&mut err,"}, {"sha": "963c14c48c82947d834ce678414af72817c5fcfc", "filename": "src/librustc/infer/error_reporting/note.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnote.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use infer::{self, InferCtxt, SubregionOrigin};\n-use ty::Region;\n+use ty::{self, Region};\n use ty::error::TypeError;\n use errors::DiagnosticBuilder;\n \n@@ -146,8 +146,8 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n \n     pub(super) fn report_concrete_failure(&self,\n                                           origin: SubregionOrigin<'tcx>,\n-                                          sub: &'tcx Region,\n-                                          sup: &'tcx Region)\n+                                          sub: Region<'tcx>,\n+                                          sup: Region<'tcx>)\n                                           -> DiagnosticBuilder<'tcx> {\n         match origin {\n             infer::Subtype(trace) => {\n@@ -262,7 +262,14 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                                \"the type `{}` does not fulfill the required \\\n                                                 lifetime\",\n                                                self.ty_to_string(ty));\n-                self.tcx.note_and_explain_region(&mut err, \"type must outlive \", sub, \"\");\n+                match *sub {\n+                    ty::ReStatic => {\n+                        self.tcx.note_and_explain_region(&mut err, \"type must satisfy \", sub, \"\")\n+                    }\n+                    _ => {\n+                        self.tcx.note_and_explain_region(&mut err, \"type must outlive \", sub, \"\")\n+                    }\n+                }\n                 err\n             }\n             infer::RelateRegionParamBound(span) => {"}, {"sha": "a0ef1f65f52eac661ca0000eaed6e99251194426", "filename": "src/librustc/infer/freshen.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ffreshen.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -83,15 +83,15 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for TypeFreshener<'a, 'gcx, 'tcx> {\n         self.infcx.tcx\n     }\n \n-    fn fold_region(&mut self, r: &'tcx ty::Region) -> &'tcx ty::Region {\n+    fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n         match *r {\n-            ty::ReEarlyBound(..) |\n             ty::ReLateBound(..) => {\n                 // leave bound regions alone\n                 r\n             }\n \n             ty::ReStatic |\n+            ty::ReEarlyBound(..) |\n             ty::ReFree(_) |\n             ty::ReScope(_) |\n             ty::ReVar(_) |"}, {"sha": "a8bc33f772d55f2c4ffa0005f05cede611cca50d", "filename": "src/librustc/infer/fudge.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Finfer%2Ffudge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Finfer%2Ffudge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ffudge.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -147,7 +147,7 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for RegionFudger<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    fn fold_region(&mut self, r: &'tcx ty::Region) -> &'tcx ty::Region {\n+    fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n         match *r {\n             ty::ReVar(v) if self.region_vars.contains(&v) => {\n                 self.infcx.next_region_var(self.origin.clone())"}, {"sha": "d7afeba7dc96b430531a5697cd7ba019b4e8908f", "filename": "src/librustc/infer/glb.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fglb.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -59,8 +59,8 @@ impl<'combine, 'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx>\n         lattice::super_lattice_tys(self, a, b)\n     }\n \n-    fn regions(&mut self, a: &'tcx ty::Region, b: &'tcx ty::Region)\n-               -> RelateResult<'tcx, &'tcx ty::Region> {\n+    fn regions(&mut self, a: ty::Region<'tcx>, b: ty::Region<'tcx>)\n+               -> RelateResult<'tcx, ty::Region<'tcx>> {\n         debug!(\"{}.regions({:?}, {:?})\",\n                self.tag(),\n                a,"}, {"sha": "dbbcc6cfbec6b0048cce15c8af31a37110873133", "filename": "src/librustc/infer/higher_ranked/mod.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -269,12 +269,12 @@ impl<'a, 'gcx, 'tcx> CombineFields<'a, 'gcx, 'tcx> {\n                                              snapshot: &CombinedSnapshot,\n                                              debruijn: ty::DebruijnIndex,\n                                              new_vars: &[ty::RegionVid],\n-                                             a_map: &FxHashMap<ty::BoundRegion, &'tcx ty::Region>,\n-                                             r0: &'tcx ty::Region)\n-                                             -> &'tcx ty::Region {\n+                                             a_map: &FxHashMap<ty::BoundRegion, ty::Region<'tcx>>,\n+                                             r0: ty::Region<'tcx>)\n+                                             -> ty::Region<'tcx> {\n             // Regions that pre-dated the LUB computation stay as they are.\n             if !is_var_in_set(new_vars, r0) {\n-                assert!(!r0.is_bound());\n+                assert!(!r0.is_late_bound());\n                 debug!(\"generalize_region(r0={:?}): not new variable\", r0);\n                 return r0;\n             }\n@@ -284,11 +284,11 @@ impl<'a, 'gcx, 'tcx> CombineFields<'a, 'gcx, 'tcx> {\n             // Variables created during LUB computation which are\n             // *related* to regions that pre-date the LUB computation\n             // stay as they are.\n-            if !tainted.iter().all(|r| is_var_in_set(new_vars, *r)) {\n+            if !tainted.iter().all(|&r| is_var_in_set(new_vars, r)) {\n                 debug!(\"generalize_region(r0={:?}): \\\n                         non-new-variables found in {:?}\",\n                        r0, tainted);\n-                assert!(!r0.is_bound());\n+                assert!(!r0.is_late_bound());\n                 return r0;\n             }\n \n@@ -365,13 +365,13 @@ impl<'a, 'gcx, 'tcx> CombineFields<'a, 'gcx, 'tcx> {\n                                              snapshot: &CombinedSnapshot,\n                                              debruijn: ty::DebruijnIndex,\n                                              new_vars: &[ty::RegionVid],\n-                                             a_map: &FxHashMap<ty::BoundRegion, &'tcx ty::Region>,\n+                                             a_map: &FxHashMap<ty::BoundRegion, ty::Region<'tcx>>,\n                                              a_vars: &[ty::RegionVid],\n                                              b_vars: &[ty::RegionVid],\n-                                             r0: &'tcx ty::Region)\n-                                             -> &'tcx ty::Region {\n+                                             r0: ty::Region<'tcx>)\n+                                             -> ty::Region<'tcx> {\n             if !is_var_in_set(new_vars, r0) {\n-                assert!(!r0.is_bound());\n+                assert!(!r0.is_late_bound());\n                 return r0;\n             }\n \n@@ -424,7 +424,7 @@ impl<'a, 'gcx, 'tcx> CombineFields<'a, 'gcx, 'tcx> {\n                 return rev_lookup(infcx, span, a_map, a_r.unwrap());\n             } else if a_r.is_none() && b_r.is_none() {\n                 // Not related to bound variables from either fn:\n-                assert!(!r0.is_bound());\n+                assert!(!r0.is_late_bound());\n                 return r0;\n             } else {\n                 // Other:\n@@ -434,8 +434,8 @@ impl<'a, 'gcx, 'tcx> CombineFields<'a, 'gcx, 'tcx> {\n \n         fn rev_lookup<'a, 'gcx, 'tcx>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n                                       span: Span,\n-                                      a_map: &FxHashMap<ty::BoundRegion, &'tcx ty::Region>,\n-                                      r: &'tcx ty::Region) -> &'tcx ty::Region\n+                                      a_map: &FxHashMap<ty::BoundRegion, ty::Region<'tcx>>,\n+                                      r: ty::Region<'tcx>) -> ty::Region<'tcx>\n         {\n             for (a_br, a_r) in a_map {\n                 if *a_r == r {\n@@ -450,14 +450,14 @@ impl<'a, 'gcx, 'tcx> CombineFields<'a, 'gcx, 'tcx> {\n \n         fn fresh_bound_variable<'a, 'gcx, 'tcx>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n                                                 debruijn: ty::DebruijnIndex)\n-                                                -> &'tcx ty::Region {\n+                                                -> ty::Region<'tcx> {\n             infcx.region_vars.new_bound(debruijn)\n         }\n     }\n }\n \n fn var_ids<'a, 'gcx, 'tcx>(fields: &CombineFields<'a, 'gcx, 'tcx>,\n-                           map: &FxHashMap<ty::BoundRegion, &'tcx ty::Region>)\n+                           map: &FxHashMap<ty::BoundRegion, ty::Region<'tcx>>)\n                            -> Vec<ty::RegionVid> {\n     map.iter()\n        .map(|(_, &r)| match *r {\n@@ -472,7 +472,7 @@ fn var_ids<'a, 'gcx, 'tcx>(fields: &CombineFields<'a, 'gcx, 'tcx>,\n        .collect()\n }\n \n-fn is_var_in_set(new_vars: &[ty::RegionVid], r: &ty::Region) -> bool {\n+fn is_var_in_set(new_vars: &[ty::RegionVid], r: ty::Region) -> bool {\n     match *r {\n         ty::ReVar(ref v) => new_vars.iter().any(|x| x == v),\n         _ => false\n@@ -484,7 +484,7 @@ fn fold_regions_in<'a, 'gcx, 'tcx, T, F>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                                          mut fldr: F)\n                                          -> T\n     where T: TypeFoldable<'tcx>,\n-          F: FnMut(&'tcx ty::Region, ty::DebruijnIndex) -> &'tcx ty::Region,\n+          F: FnMut(ty::Region<'tcx>, ty::DebruijnIndex) -> ty::Region<'tcx>,\n {\n     tcx.fold_regions(unbound_value, &mut false, |region, current_depth| {\n         // we should only be encountering \"escaping\" late-bound regions here,\n@@ -502,9 +502,9 @@ fn fold_regions_in<'a, 'gcx, 'tcx, T, F>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     fn tainted_regions(&self,\n                        snapshot: &CombinedSnapshot,\n-                       r: &'tcx ty::Region,\n+                       r: ty::Region<'tcx>,\n                        directions: TaintDirections)\n-                       -> FxHashSet<&'tcx ty::Region> {\n+                       -> FxHashSet<ty::Region<'tcx>> {\n         self.region_vars.tainted(&snapshot.region_vars_snapshot, r, directions)\n     }\n \n@@ -731,7 +731,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         // region back to the `ty::BoundRegion` that it originally\n         // represented. Because `leak_check` passed, we know that\n         // these taint sets are mutually disjoint.\n-        let inv_skol_map: FxHashMap<&'tcx ty::Region, ty::BoundRegion> =\n+        let inv_skol_map: FxHashMap<ty::Region<'tcx>, ty::BoundRegion> =\n             skol_map\n             .iter()\n             .flat_map(|(&skol_br, &skol)| {"}, {"sha": "04b470b29fc5e081b6127d850fe811c3b8ea08f2", "filename": "src/librustc/infer/lub.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flub.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -59,8 +59,8 @@ impl<'combine, 'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx>\n         lattice::super_lattice_tys(self, a, b)\n     }\n \n-    fn regions(&mut self, a: &'tcx ty::Region, b: &'tcx ty::Region)\n-               -> RelateResult<'tcx, &'tcx ty::Region> {\n+    fn regions(&mut self, a: ty::Region<'tcx>, b: ty::Region<'tcx>)\n+               -> RelateResult<'tcx, ty::Region<'tcx>> {\n         debug!(\"{}.regions({:?}, {:?})\",\n                self.tag(),\n                a,"}, {"sha": "1ecc277c7ca4d27dd407cfc9ff39b1f910c5ecdb", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -20,7 +20,8 @@ pub use self::region_inference::{GenericKind, VerifyBound};\n \n use hir::def_id::DefId;\n use hir;\n-use middle::free_region::FreeRegionMap;\n+use middle::free_region::{FreeRegionMap, RegionRelations};\n+use middle::region::RegionMaps;\n use middle::mem_categorization as mc;\n use middle::mem_categorization::McResult;\n use middle::lang_items;\n@@ -205,7 +206,7 @@ pub struct InferCtxt<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n \n /// A map returned by `skolemize_late_bound_regions()` indicating the skolemized\n /// region that each late-bound region was replaced with.\n-pub type SkolemizationMap<'tcx> = FxHashMap<ty::BoundRegion, &'tcx ty::Region>;\n+pub type SkolemizationMap<'tcx> = FxHashMap<ty::BoundRegion, ty::Region<'tcx>>;\n \n /// See `error_reporting` module for more details\n #[derive(Clone, Debug)]\n@@ -449,10 +450,10 @@ impl<'a, 'tcx> InferEnv<'a, 'tcx> for hir::BodyId {\n                 -> (Option<&'a ty::TypeckTables<'tcx>>,\n                     Option<ty::TypeckTables<'tcx>>,\n                     Option<ty::ParameterEnvironment<'tcx>>) {\n-        let item_id = tcx.hir.body_owner(self);\n-        (Some(tcx.item_tables(tcx.hir.local_def_id(item_id))),\n+        let def_id = tcx.hir.body_owner_def_id(self);\n+        (Some(tcx.typeck_tables_of(def_id)),\n          None,\n-         Some(ty::ParameterEnvironment::for_item(tcx, item_id)))\n+         Some(tcx.parameter_environment(def_id)))\n     }\n }\n \n@@ -1008,7 +1009,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn add_given(&self,\n-                     sub: ty::FreeRegion,\n+                     sub: ty::Region<'tcx>,\n                      sup: ty::RegionVid)\n     {\n         self.region_vars.add_given(sub, sup);\n@@ -1107,8 +1108,8 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n \n     pub fn sub_regions(&self,\n                        origin: SubregionOrigin<'tcx>,\n-                       a: &'tcx ty::Region,\n-                       b: &'tcx ty::Region) {\n+                       a: ty::Region<'tcx>,\n+                       b: ty::Region<'tcx>) {\n         debug!(\"sub_regions({:?} <: {:?})\", a, b);\n         self.region_vars.make_subregion(origin, a, b);\n     }\n@@ -1210,7 +1211,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn next_region_var(&self, origin: RegionVariableOrigin)\n-                           -> &'tcx ty::Region {\n+                           -> ty::Region<'tcx> {\n         self.tcx.mk_region(ty::ReVar(self.region_vars.new_region_var(origin)))\n     }\n \n@@ -1219,7 +1220,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     pub fn region_var_for_def(&self,\n                               span: Span,\n                               def: &ty::RegionParameterDef)\n-                              -> &'tcx ty::Region {\n+                              -> ty::Region<'tcx> {\n         self.next_region_var(EarlyBoundRegion(span, def.name, def.issue_32330))\n     }\n \n@@ -1237,7 +1238,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                             substs: &[Kind<'tcx>])\n                             -> Ty<'tcx> {\n         let default = if def.has_default {\n-            let default = self.tcx.item_type(def.def_id);\n+            let default = self.tcx.type_of(def.def_id);\n             Some(type_variable::Default {\n                 ty: default.subst_spanned(self.tcx, substs, Some(span)),\n                 origin_span: span,\n@@ -1270,7 +1271,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         })\n     }\n \n-    pub fn fresh_bound_region(&self, debruijn: ty::DebruijnIndex) -> &'tcx ty::Region {\n+    pub fn fresh_bound_region(&self, debruijn: ty::DebruijnIndex) -> ty::Region<'tcx> {\n         self.region_vars.new_bound(debruijn)\n     }\n \n@@ -1322,9 +1323,14 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn resolve_regions_and_report_errors(&self,\n-                                             free_regions: &FreeRegionMap,\n-                                             subject_node_id: ast::NodeId) {\n-        let errors = self.region_vars.resolve_regions(free_regions, subject_node_id);\n+                                             region_context: DefId,\n+                                             region_map: &RegionMaps,\n+                                             free_regions: &FreeRegionMap<'tcx>) {\n+        let region_rels = RegionRelations::new(self.tcx,\n+                                               region_context,\n+                                               region_map,\n+                                               free_regions);\n+        let errors = self.region_vars.resolve_regions(&region_rels);\n         if !self.is_tainted_by_errors() {\n             // As a heuristic, just skip reporting region errors\n             // altogether if other errors have been reported while\n@@ -1531,7 +1537,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         span: Span,\n         lbrct: LateBoundRegionConversionTime,\n         value: &ty::Binder<T>)\n-        -> (T, FxHashMap<ty::BoundRegion, &'tcx ty::Region>)\n+        -> (T, FxHashMap<ty::BoundRegion, ty::Region<'tcx>>)\n         where T : TypeFoldable<'tcx>\n     {\n         self.tcx.replace_late_bound_regions(\n@@ -1577,7 +1583,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     pub fn verify_generic_bound(&self,\n                                 origin: SubregionOrigin<'tcx>,\n                                 kind: GenericKind<'tcx>,\n-                                a: &'tcx ty::Region,\n+                                a: ty::Region<'tcx>,\n                                 bound: VerifyBound<'tcx>) {\n         debug!(\"verify_generic_bound({:?}, {:?} <: {:?})\",\n                kind,"}, {"sha": "cce253c1a1a43b8e77b73e5d5e66bf02e005d25b", "filename": "src/librustc/infer/region_inference/graphviz.rs", "status": "modified", "additions": 22, "deletions": 21, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Finfer%2Fregion_inference%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Finfer%2Fregion_inference%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_inference%2Fgraphviz.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -18,7 +18,9 @@\n /// For clarity, rename the graphviz crate locally to dot.\n use graphviz as dot;\n \n-use ty::{self, TyCtxt};\n+use hir::def_id::DefIndex;\n+use ty;\n+use middle::free_region::RegionRelations;\n use middle::region::CodeExtent;\n use super::Constraint;\n use infer::SubregionOrigin;\n@@ -32,7 +34,6 @@ use std::fs::File;\n use std::io;\n use std::io::prelude::*;\n use std::sync::atomic::{AtomicBool, Ordering};\n-use syntax::ast;\n \n fn print_help_message() {\n     println!(\"\\\n@@ -55,18 +56,18 @@ graphs will be printed.                                                     \\n\\\n \n pub fn maybe_print_constraints_for<'a, 'gcx, 'tcx>(\n     region_vars: &RegionVarBindings<'a, 'gcx, 'tcx>,\n-    subject_node: ast::NodeId)\n+    region_rels: &RegionRelations<'a, 'gcx, 'tcx>)\n {\n-    let tcx = region_vars.tcx;\n+    let context = region_rels.context;\n \n     if !region_vars.tcx.sess.opts.debugging_opts.print_region_graph {\n         return;\n     }\n \n     let requested_node = env::var(\"RUST_REGION_GRAPH_NODE\")\n-        .ok().and_then(|s| s.parse().map(ast::NodeId::new).ok());\n+        .ok().and_then(|s| s.parse().map(DefIndex::new).ok());\n \n-    if requested_node.is_some() && requested_node != Some(subject_node) {\n+    if requested_node.is_some() && requested_node != Some(context.index) {\n         return;\n     }\n \n@@ -98,7 +99,7 @@ pub fn maybe_print_constraints_for<'a, 'gcx, 'tcx>(\n             let mut new_str = String::new();\n             for c in output_template.chars() {\n                 if c == '%' {\n-                    new_str.push_str(&subject_node.to_string());\n+                    new_str.push_str(&context.index.as_usize().to_string());\n                 } else {\n                     new_str.push(c);\n                 }\n@@ -110,7 +111,7 @@ pub fn maybe_print_constraints_for<'a, 'gcx, 'tcx>(\n     };\n \n     let constraints = &*region_vars.constraints.borrow();\n-    match dump_region_constraints_to(tcx, constraints, &output_path) {\n+    match dump_region_constraints_to(region_rels, constraints, &output_path) {\n         Ok(()) => {}\n         Err(e) => {\n             let msg = format!(\"io error dumping region constraints: {}\", e);\n@@ -120,16 +121,16 @@ pub fn maybe_print_constraints_for<'a, 'gcx, 'tcx>(\n }\n \n struct ConstraintGraph<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n-    tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     graph_name: String,\n+    region_rels: &'a RegionRelations<'a, 'gcx, 'tcx>,\n     map: &'a FxHashMap<Constraint<'tcx>, SubregionOrigin<'tcx>>,\n     node_ids: FxHashMap<Node, usize>,\n }\n \n #[derive(Clone, Hash, PartialEq, Eq, Debug, Copy)]\n enum Node {\n     RegionVid(ty::RegionVid),\n-    Region(ty::Region),\n+    Region(ty::RegionKind),\n }\n \n // type Edge = Constraint;\n@@ -140,8 +141,8 @@ enum Edge<'tcx> {\n }\n \n impl<'a, 'gcx, 'tcx> ConstraintGraph<'a, 'gcx, 'tcx> {\n-    fn new(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-           name: String,\n+    fn new(name: String,\n+           region_rels: &'a RegionRelations<'a, 'gcx, 'tcx>,\n            map: &'a ConstraintMap<'tcx>)\n            -> ConstraintGraph<'a, 'gcx, 'tcx> {\n         let mut i = 0;\n@@ -159,17 +160,17 @@ impl<'a, 'gcx, 'tcx> ConstraintGraph<'a, 'gcx, 'tcx> {\n                 add_node(n2);\n             }\n \n-            tcx.region_maps.each_encl_scope(|sub, sup| {\n-                add_node(Node::Region(ty::ReScope(*sub)));\n-                add_node(Node::Region(ty::ReScope(*sup)));\n+            region_rels.region_maps.each_encl_scope(|sub, sup| {\n+                add_node(Node::Region(ty::ReScope(sub)));\n+                add_node(Node::Region(ty::ReScope(sup)));\n             });\n         }\n \n         ConstraintGraph {\n-            tcx: tcx,\n+            map,\n+            node_ids,\n+            region_rels,\n             graph_name: name,\n-            map: map,\n-            node_ids: node_ids,\n         }\n     }\n }\n@@ -245,7 +246,7 @@ impl<'a, 'gcx, 'tcx> dot::GraphWalk<'a> for ConstraintGraph<'a, 'gcx, 'tcx> {\n     fn edges(&self) -> dot::Edges<Edge<'tcx>> {\n         debug!(\"constraint graph has {} edges\", self.map.len());\n         let mut v: Vec<_> = self.map.keys().map(|e| Edge::Constraint(*e)).collect();\n-        self.tcx.region_maps.each_encl_scope(|sub, sup| v.push(Edge::EnclScope(*sub, *sup)));\n+        self.region_rels.region_maps.each_encl_scope(|sub, sup| v.push(Edge::EnclScope(sub, sup)));\n         debug!(\"region graph has {} edges\", v.len());\n         Cow::Owned(v)\n     }\n@@ -263,14 +264,14 @@ impl<'a, 'gcx, 'tcx> dot::GraphWalk<'a> for ConstraintGraph<'a, 'gcx, 'tcx> {\n \n pub type ConstraintMap<'tcx> = FxHashMap<Constraint<'tcx>, SubregionOrigin<'tcx>>;\n \n-fn dump_region_constraints_to<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+fn dump_region_constraints_to<'a, 'gcx, 'tcx>(region_rels: &RegionRelations<'a, 'gcx, 'tcx>,\n                                               map: &ConstraintMap<'tcx>,\n                                               path: &str)\n                                               -> io::Result<()> {\n     debug!(\"dump_region_constraints map (len: {}) path: {}\",\n            map.len(),\n            path);\n-    let g = ConstraintGraph::new(tcx, format!(\"region_constraints\"), map);\n+    let g = ConstraintGraph::new(format!(\"region_constraints\"), region_rels, map);\n     debug!(\"dump_region_constraints calling render\");\n     let mut v = Vec::new();\n     dot::render(&g, &mut v).unwrap();"}, {"sha": "2e3c2443544f649601743c9174465d7d2a1e5a54", "filename": "src/librustc/infer/region_inference/mod.rs", "status": "modified", "additions": 139, "deletions": 128, "changes": 267, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_inference%2Fmod.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -22,18 +22,16 @@ use super::unify_key;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::graph::{self, Direction, NodeIndex, OUTGOING};\n use rustc_data_structures::unify::{self, UnificationTable};\n-use middle::free_region::FreeRegionMap;\n+use middle::free_region::RegionRelations;\n use ty::{self, Ty, TyCtxt};\n use ty::{Region, RegionVid};\n use ty::{ReEmpty, ReStatic, ReFree, ReEarlyBound, ReErased};\n use ty::{ReLateBound, ReScope, ReVar, ReSkolemized, BrFresh};\n \n use std::cell::{Cell, RefCell};\n-use std::cmp::Ordering::{self, Less, Greater, Equal};\n use std::fmt;\n use std::mem;\n use std::u32;\n-use syntax::ast;\n \n mod graphviz;\n \n@@ -44,17 +42,17 @@ pub enum Constraint<'tcx> {\n     ConstrainVarSubVar(RegionVid, RegionVid),\n \n     // Concrete region is subregion of region variable\n-    ConstrainRegSubVar(&'tcx Region, RegionVid),\n+    ConstrainRegSubVar(Region<'tcx>, RegionVid),\n \n     // Region variable is subregion of concrete region. This does not\n     // directly affect inference, but instead is checked after\n     // inference is complete.\n-    ConstrainVarSubReg(RegionVid, &'tcx Region),\n+    ConstrainVarSubReg(RegionVid, Region<'tcx>),\n \n     // A constraint where neither side is a variable. This does not\n     // directly affect inference, but instead is checked after\n     // inference is complete.\n-    ConstrainRegSubReg(&'tcx Region, &'tcx Region),\n+    ConstrainRegSubReg(Region<'tcx>, Region<'tcx>),\n }\n \n // VerifyGenericBound(T, _, R, RS): The parameter type `T` (or\n@@ -66,7 +64,7 @@ pub enum Constraint<'tcx> {\n pub struct Verify<'tcx> {\n     kind: GenericKind<'tcx>,\n     origin: SubregionOrigin<'tcx>,\n-    region: &'tcx Region,\n+    region: Region<'tcx>,\n     bound: VerifyBound<'tcx>,\n }\n \n@@ -86,14 +84,14 @@ pub enum VerifyBound<'tcx> {\n     // Put another way, the subject value is known to outlive all\n     // regions in {R}, so if any of those outlives 'min, then the\n     // bound is met.\n-    AnyRegion(Vec<&'tcx Region>),\n+    AnyRegion(Vec<Region<'tcx>>),\n \n     // B = forall {R} --> all 'r in {R} must outlive 'min\n     //\n     // Put another way, the subject value is known to outlive some\n     // region in {R}, so if all of those outlives 'min, then the bound\n     // is met.\n-    AllRegions(Vec<&'tcx Region>),\n+    AllRegions(Vec<Region<'tcx>>),\n \n     // B = exists {B} --> 'min must meet some bound b in {B}\n     AnyBound(Vec<VerifyBound<'tcx>>),\n@@ -104,8 +102,8 @@ pub enum VerifyBound<'tcx> {\n \n #[derive(Copy, Clone, PartialEq, Eq, Hash)]\n pub struct TwoRegions<'tcx> {\n-    a: &'tcx Region,\n-    b: &'tcx Region,\n+    a: Region<'tcx>,\n+    b: Region<'tcx>,\n }\n \n #[derive(Copy, Clone, PartialEq)]\n@@ -128,7 +126,7 @@ pub enum UndoLogEntry<'tcx> {\n     AddVerify(usize),\n \n     /// We added the given `given`\n-    AddGiven(ty::FreeRegion, ty::RegionVid),\n+    AddGiven(Region<'tcx>, ty::RegionVid),\n \n     /// We added a GLB/LUB \"combinaton variable\"\n     AddCombination(CombineMapType, TwoRegions<'tcx>),\n@@ -153,13 +151,13 @@ pub enum RegionResolutionError<'tcx> {\n     /// `ConcreteFailure(o, a, b)`:\n     ///\n     /// `o` requires that `a <= b`, but this does not hold\n-    ConcreteFailure(SubregionOrigin<'tcx>, &'tcx Region, &'tcx Region),\n+    ConcreteFailure(SubregionOrigin<'tcx>, Region<'tcx>, Region<'tcx>),\n \n     /// `GenericBoundFailure(p, s, a)\n     ///\n     /// The parameter/associated-type `p` must be known to outlive the lifetime\n     /// `a` (but none of the known bounds are sufficient).\n-    GenericBoundFailure(SubregionOrigin<'tcx>, GenericKind<'tcx>, &'tcx Region),\n+    GenericBoundFailure(SubregionOrigin<'tcx>, GenericKind<'tcx>, Region<'tcx>),\n \n     /// `SubSupConflict(v, sub_origin, sub_r, sup_origin, sup_r)`:\n     ///\n@@ -168,14 +166,14 @@ pub enum RegionResolutionError<'tcx> {\n     /// `sub_r <= sup_r` does not hold.\n     SubSupConflict(RegionVariableOrigin,\n                    SubregionOrigin<'tcx>,\n-                   &'tcx Region,\n+                   Region<'tcx>,\n                    SubregionOrigin<'tcx>,\n-                   &'tcx Region),\n+                   Region<'tcx>),\n }\n \n #[derive(Clone, Debug)]\n pub enum ProcessedErrorOrigin<'tcx> {\n-    ConcreteFailure(SubregionOrigin<'tcx>, &'tcx Region, &'tcx Region),\n+    ConcreteFailure(SubregionOrigin<'tcx>, Region<'tcx>, Region<'tcx>),\n     VariableFailure(RegionVariableOrigin),\n }\n \n@@ -214,7 +212,7 @@ pub struct RegionVarBindings<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     // record the fact that `'a <= 'b` is implied by the fn signature,\n     // and then ignore the constraint when solving equations. This is\n     // a bit of a hack but seems to work.\n-    givens: RefCell<FxHashSet<(ty::FreeRegion, ty::RegionVid)>>,\n+    givens: RefCell<FxHashSet<(Region<'tcx>, ty::RegionVid)>>,\n \n     lubs: RefCell<CombineMap<'tcx>>,\n     glbs: RefCell<CombineMap<'tcx>>,\n@@ -271,12 +269,12 @@ impl TaintDirections {\n \n struct TaintSet<'tcx> {\n     directions: TaintDirections,\n-    regions: FxHashSet<&'tcx ty::Region>\n+    regions: FxHashSet<ty::Region<'tcx>>\n }\n \n impl<'a, 'gcx, 'tcx> TaintSet<'tcx> {\n     fn new(directions: TaintDirections,\n-           initial_region: &'tcx ty::Region)\n+           initial_region: ty::Region<'tcx>)\n            -> Self {\n         let mut regions = FxHashSet();\n         regions.insert(initial_region);\n@@ -310,8 +308,7 @@ impl<'a, 'gcx, 'tcx> TaintSet<'tcx> {\n                         self.add_edge(a, b);\n                     }\n                     &AddGiven(a, b) => {\n-                        self.add_edge(tcx.mk_region(ReFree(a)),\n-                                      tcx.mk_region(ReVar(b)));\n+                        self.add_edge(a, tcx.mk_region(ReVar(b)));\n                     }\n                     &AddVerify(i) => {\n                         verifys[i].bound.for_each_region(&mut |b| {\n@@ -328,7 +325,7 @@ impl<'a, 'gcx, 'tcx> TaintSet<'tcx> {\n         }\n     }\n \n-    fn into_set(self) -> FxHashSet<&'tcx ty::Region> {\n+    fn into_set(self) -> FxHashSet<ty::Region<'tcx>> {\n         self.regions\n     }\n \n@@ -337,8 +334,8 @@ impl<'a, 'gcx, 'tcx> TaintSet<'tcx> {\n     }\n \n     fn add_edge(&mut self,\n-                source: &'tcx ty::Region,\n-                target: &'tcx ty::Region) {\n+                source: ty::Region<'tcx>,\n+                target: ty::Region<'tcx>) {\n         if self.directions.incoming {\n             if self.regions.contains(&target) {\n                 self.regions.insert(source);\n@@ -499,7 +496,7 @@ impl<'a, 'gcx, 'tcx> RegionVarBindings<'a, 'gcx, 'tcx> {\n     /// it's just there to make it explicit which snapshot bounds the\n     /// skolemized region that results. It should always be the top-most snapshot.\n     pub fn push_skolemized(&self, br: ty::BoundRegion, snapshot: &RegionSnapshot)\n-                           -> &'tcx Region {\n+                           -> Region<'tcx> {\n         assert!(self.in_snapshot());\n         assert!(self.undo_log.borrow()[snapshot.length] == OpenSnapshot);\n \n@@ -513,7 +510,7 @@ impl<'a, 'gcx, 'tcx> RegionVarBindings<'a, 'gcx, 'tcx> {\n     /// completes to remove all trace of the skolemized regions\n     /// created in that time.\n     pub fn pop_skolemized(&self,\n-                          skols: &FxHashSet<&'tcx ty::Region>,\n+                          skols: &FxHashSet<ty::Region<'tcx>>,\n                           snapshot: &RegionSnapshot) {\n         debug!(\"pop_skolemized_regions(skols={:?})\", skols);\n \n@@ -567,7 +564,7 @@ impl<'a, 'gcx, 'tcx> RegionVarBindings<'a, 'gcx, 'tcx> {\n         self.skolemization_count.set(snapshot.skolemization_count);\n         return;\n \n-        fn kill_constraint<'tcx>(skols: &FxHashSet<&'tcx ty::Region>,\n+        fn kill_constraint<'tcx>(skols: &FxHashSet<ty::Region<'tcx>>,\n                                  undo_entry: &UndoLogEntry<'tcx>)\n                                  -> bool {\n             match undo_entry {\n@@ -596,7 +593,7 @@ impl<'a, 'gcx, 'tcx> RegionVarBindings<'a, 'gcx, 'tcx> {\n \n     }\n \n-    pub fn new_bound(&self, debruijn: ty::DebruijnIndex) -> &'tcx Region {\n+    pub fn new_bound(&self, debruijn: ty::DebruijnIndex) -> Region<'tcx> {\n         // Creates a fresh bound variable for use in GLB computations.\n         // See discussion of GLB computation in the large comment at\n         // the top of this file for more details.\n@@ -662,7 +659,7 @@ impl<'a, 'gcx, 'tcx> RegionVarBindings<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    pub fn add_given(&self, sub: ty::FreeRegion, sup: ty::RegionVid) {\n+    pub fn add_given(&self, sub: Region<'tcx>, sup: ty::RegionVid) {\n         // cannot add givens once regions are resolved\n         assert!(self.values_are_none());\n \n@@ -676,8 +673,8 @@ impl<'a, 'gcx, 'tcx> RegionVarBindings<'a, 'gcx, 'tcx> {\n \n     pub fn make_eqregion(&self,\n                          origin: SubregionOrigin<'tcx>,\n-                         sub: &'tcx Region,\n-                         sup: &'tcx Region) {\n+                         sub: Region<'tcx>,\n+                         sup: Region<'tcx>) {\n         if sub != sup {\n             // Eventually, it would be nice to add direct support for\n             // equating regions.\n@@ -692,8 +689,8 @@ impl<'a, 'gcx, 'tcx> RegionVarBindings<'a, 'gcx, 'tcx> {\n \n     pub fn make_subregion(&self,\n                           origin: SubregionOrigin<'tcx>,\n-                          sub: &'tcx Region,\n-                          sup: &'tcx Region) {\n+                          sub: Region<'tcx>,\n+                          sup: Region<'tcx>) {\n         // cannot add constraints once regions are resolved\n         assert!(self.values_are_none());\n \n@@ -703,9 +700,7 @@ impl<'a, 'gcx, 'tcx> RegionVarBindings<'a, 'gcx, 'tcx> {\n                origin);\n \n         match (sub, sup) {\n-            (&ReEarlyBound(..), _) |\n             (&ReLateBound(..), _) |\n-            (_, &ReEarlyBound(..)) |\n             (_, &ReLateBound(..)) => {\n                 span_bug!(origin.span(),\n                           \"cannot relate bound region: {:?} <= {:?}\",\n@@ -734,7 +729,7 @@ impl<'a, 'gcx, 'tcx> RegionVarBindings<'a, 'gcx, 'tcx> {\n     pub fn verify_generic_bound(&self,\n                                 origin: SubregionOrigin<'tcx>,\n                                 kind: GenericKind<'tcx>,\n-                                sub: &'tcx Region,\n+                                sub: Region<'tcx>,\n                                 bound: VerifyBound<'tcx>) {\n         self.add_verify(Verify {\n             kind: kind,\n@@ -746,9 +741,9 @@ impl<'a, 'gcx, 'tcx> RegionVarBindings<'a, 'gcx, 'tcx> {\n \n     pub fn lub_regions(&self,\n                        origin: SubregionOrigin<'tcx>,\n-                       a: &'tcx Region,\n-                       b: &'tcx Region)\n-                       -> &'tcx Region {\n+                       a: Region<'tcx>,\n+                       b: Region<'tcx>)\n+                       -> Region<'tcx> {\n         // cannot add constraints once regions are resolved\n         assert!(self.values_are_none());\n \n@@ -772,9 +767,9 @@ impl<'a, 'gcx, 'tcx> RegionVarBindings<'a, 'gcx, 'tcx> {\n \n     pub fn glb_regions(&self,\n                        origin: SubregionOrigin<'tcx>,\n-                       a: &'tcx Region,\n-                       b: &'tcx Region)\n-                       -> &'tcx Region {\n+                       a: Region<'tcx>,\n+                       b: Region<'tcx>)\n+                       -> Region<'tcx> {\n         // cannot add constraints once regions are resolved\n         assert!(self.values_are_none());\n \n@@ -796,7 +791,7 @@ impl<'a, 'gcx, 'tcx> RegionVarBindings<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    pub fn resolve_var(&self, rid: RegionVid) -> &'tcx ty::Region {\n+    pub fn resolve_var(&self, rid: RegionVid) -> ty::Region<'tcx> {\n         match *self.values.borrow() {\n             None => {\n                 span_bug!((*self.var_origins.borrow())[rid.index as usize].span(),\n@@ -811,7 +806,7 @@ impl<'a, 'gcx, 'tcx> RegionVarBindings<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    pub fn opportunistic_resolve_var(&self, rid: RegionVid) -> &'tcx ty::Region {\n+    pub fn opportunistic_resolve_var(&self, rid: RegionVid) -> ty::Region<'tcx> {\n         let vid = self.unification_table.borrow_mut().find_value(rid).min_vid;\n         self.tcx.mk_region(ty::ReVar(vid))\n     }\n@@ -825,12 +820,12 @@ impl<'a, 'gcx, 'tcx> RegionVarBindings<'a, 'gcx, 'tcx> {\n \n     pub fn combine_vars<F>(&self,\n                            t: CombineMapType,\n-                           a: &'tcx Region,\n-                           b: &'tcx Region,\n+                           a: Region<'tcx>,\n+                           b: Region<'tcx>,\n                            origin: SubregionOrigin<'tcx>,\n                            mut relate: F)\n-                           -> &'tcx Region\n-        where F: FnMut(&RegionVarBindings<'a, 'gcx, 'tcx>, &'tcx Region, &'tcx Region)\n+                           -> Region<'tcx>\n+        where F: FnMut(&RegionVarBindings<'a, 'gcx, 'tcx>, Region<'tcx>, Region<'tcx>)\n     {\n         let vars = TwoRegions { a: a, b: b };\n         if let Some(&c) = self.combine_map(t).borrow().get(&vars) {\n@@ -869,9 +864,9 @@ impl<'a, 'gcx, 'tcx> RegionVarBindings<'a, 'gcx, 'tcx> {\n     /// related to other regions.\n     pub fn tainted(&self,\n                    mark: &RegionSnapshot,\n-                   r0: &'tcx Region,\n+                   r0: Region<'tcx>,\n                    directions: TaintDirections)\n-                   -> FxHashSet<&'tcx ty::Region> {\n+                   -> FxHashSet<ty::Region<'tcx>> {\n         debug!(\"tainted(mark={:?}, r0={:?}, directions={:?})\",\n                mark, r0, directions);\n \n@@ -892,26 +887,23 @@ impl<'a, 'gcx, 'tcx> RegionVarBindings<'a, 'gcx, 'tcx> {\n     /// constraints, assuming such values can be found; if they cannot,\n     /// errors are reported.\n     pub fn resolve_regions(&self,\n-                           free_regions: &FreeRegionMap,\n-                           subject_node: ast::NodeId)\n+                           region_rels: &RegionRelations<'a, 'gcx, 'tcx>)\n                            -> Vec<RegionResolutionError<'tcx>> {\n         debug!(\"RegionVarBindings: resolve_regions()\");\n         let mut errors = vec![];\n-        let v = self.infer_variable_values(free_regions, &mut errors, subject_node);\n+        let v = self.infer_variable_values(region_rels, &mut errors);\n         *self.values.borrow_mut() = Some(v);\n         errors\n     }\n \n     fn lub_concrete_regions(&self,\n-                            free_regions: &FreeRegionMap,\n-                            a: &'tcx Region,\n-                            b: &'tcx Region)\n-                            -> &'tcx Region {\n+                            region_rels: &RegionRelations<'a, 'gcx, 'tcx>,\n+                            a: Region<'tcx>,\n+                            b: Region<'tcx>)\n+                            -> Region<'tcx> {\n         match (a, b) {\n             (&ReLateBound(..), _) |\n             (_, &ReLateBound(..)) |\n-            (&ReEarlyBound(..), _) |\n-            (_, &ReEarlyBound(..)) |\n             (&ReErased, _) |\n             (_, &ReErased) => {\n                 bug!(\"cannot relate region: LUB({:?}, {:?})\", a, b);\n@@ -933,35 +925,52 @@ impl<'a, 'gcx, 'tcx> RegionVarBindings<'a, 'gcx, 'tcx> {\n                           b);\n             }\n \n-            (&ReFree(fr), &ReScope(s_id)) |\n-            (&ReScope(s_id), &ReFree(fr)) => {\n+            (&ReEarlyBound(_), &ReScope(s_id)) |\n+            (&ReScope(s_id), &ReEarlyBound(_)) |\n+            (&ReFree(_), &ReScope(s_id)) |\n+            (&ReScope(s_id), &ReFree(_)) => {\n                 // A \"free\" region can be interpreted as \"some region\n-                // at least as big as the block fr.scope_id\".  So, we can\n+                // at least as big as fr.scope\".  So, we can\n                 // reasonably compare free regions and scopes:\n-                let r_id = self.tcx.region_maps.nearest_common_ancestor(fr.scope, s_id);\n-\n-                if r_id == fr.scope {\n-                    // if the free region's scope `fr.scope_id` is bigger than\n+                let fr_scope = match (a, b) {\n+                    (&ReEarlyBound(ref br), _) | (_, &ReEarlyBound(ref br)) => {\n+                        region_rels.region_maps.early_free_extent(self.tcx, br)\n+                    }\n+                    (&ReFree(ref fr), _) | (_, &ReFree(ref fr)) => {\n+                        region_rels.region_maps.free_extent(self.tcx, fr)\n+                    }\n+                    _ => bug!()\n+                };\n+                let r_id = region_rels.region_maps.nearest_common_ancestor(fr_scope, s_id);\n+                if r_id == fr_scope {\n+                    // if the free region's scope `fr.scope` is bigger than\n                     // the scope region `s_id`, then the LUB is the free\n                     // region itself:\n-                    self.tcx.mk_region(ReFree(fr))\n-                } else {\n-                    // otherwise, we don't know what the free region is,\n-                    // so we must conservatively say the LUB is static:\n-                    self.tcx.types.re_static\n+                    match (a, b) {\n+                        (_, &ReScope(_)) => return a,\n+                        (&ReScope(_), _) => return b,\n+                        _ => bug!()\n+                    }\n                 }\n+\n+                // otherwise, we don't know what the free region is,\n+                // so we must conservatively say the LUB is static:\n+                self.tcx.types.re_static\n             }\n \n             (&ReScope(a_id), &ReScope(b_id)) => {\n                 // The region corresponding to an outer block is a\n                 // subtype of the region corresponding to an inner\n                 // block.\n-                self.tcx.mk_region(ReScope(\n-                    self.tcx.region_maps.nearest_common_ancestor(a_id, b_id)))\n+                let lub = region_rels.region_maps.nearest_common_ancestor(a_id, b_id);\n+                self.tcx.mk_region(ReScope(lub))\n             }\n \n-            (&ReFree(a_fr), &ReFree(b_fr)) => {\n-                self.tcx.mk_region(free_regions.lub_free_regions(a_fr, b_fr))\n+            (&ReEarlyBound(_), &ReEarlyBound(_)) |\n+            (&ReFree(_), &ReEarlyBound(_)) |\n+            (&ReEarlyBound(_), &ReFree(_)) |\n+            (&ReFree(_), &ReFree(_)) => {\n+                region_rels.lub_free_regions(a, b)\n             }\n \n             // For these types, we cannot define any additional\n@@ -982,37 +991,36 @@ impl<'a, 'gcx, 'tcx> RegionVarBindings<'a, 'gcx, 'tcx> {\n \n #[derive(Copy, Clone, Debug)]\n pub enum VarValue<'tcx> {\n-    Value(&'tcx Region),\n+    Value(Region<'tcx>),\n     ErrorValue,\n }\n \n struct RegionAndOrigin<'tcx> {\n-    region: &'tcx Region,\n+    region: Region<'tcx>,\n     origin: SubregionOrigin<'tcx>,\n }\n \n type RegionGraph<'tcx> = graph::Graph<(), Constraint<'tcx>>;\n \n impl<'a, 'gcx, 'tcx> RegionVarBindings<'a, 'gcx, 'tcx> {\n     fn infer_variable_values(&self,\n-                             free_regions: &FreeRegionMap,\n-                             errors: &mut Vec<RegionResolutionError<'tcx>>,\n-                             subject: ast::NodeId)\n+                             region_rels: &RegionRelations<'a, 'gcx, 'tcx>,\n+                             errors: &mut Vec<RegionResolutionError<'tcx>>)\n                              -> Vec<VarValue<'tcx>> {\n         let mut var_data = self.construct_var_data();\n \n         // Dorky hack to cause `dump_constraints` to only get called\n         // if debug mode is enabled:\n-        debug!(\"----() End constraint listing (subject={}) {:?}---\",\n-               subject,\n-               self.dump_constraints(subject));\n-        graphviz::maybe_print_constraints_for(self, subject);\n+        debug!(\"----() End constraint listing (context={:?}) {:?}---\",\n+               region_rels.context,\n+               self.dump_constraints(region_rels));\n+        graphviz::maybe_print_constraints_for(self, region_rels);\n \n         let graph = self.construct_graph();\n         self.expand_givens(&graph);\n-        self.expansion(free_regions, &mut var_data);\n-        self.collect_errors(free_regions, &mut var_data, errors);\n-        self.collect_var_errors(free_regions, &var_data, &graph, errors);\n+        self.expansion(region_rels, &mut var_data);\n+        self.collect_errors(region_rels, &mut var_data, errors);\n+        self.collect_var_errors(region_rels, &var_data, &graph, errors);\n         var_data\n     }\n \n@@ -1022,9 +1030,9 @@ impl<'a, 'gcx, 'tcx> RegionVarBindings<'a, 'gcx, 'tcx> {\n             .collect()\n     }\n \n-    fn dump_constraints(&self, subject: ast::NodeId) {\n-        debug!(\"----() Start constraint listing (subject={}) ()----\",\n-               subject);\n+    fn dump_constraints(&self, free_regions: &RegionRelations<'a, 'gcx, 'tcx>) {\n+        debug!(\"----() Start constraint listing (context={:?}) ()----\",\n+               free_regions.context);\n         for (idx, (constraint, _)) in self.constraints.borrow().iter().enumerate() {\n             debug!(\"Constraint {} => {:?}\", idx, constraint);\n         }\n@@ -1043,33 +1051,35 @@ impl<'a, 'gcx, 'tcx> RegionVarBindings<'a, 'gcx, 'tcx> {\n \n         let mut givens = self.givens.borrow_mut();\n         let seeds: Vec<_> = givens.iter().cloned().collect();\n-        for (fr, vid) in seeds {\n+        for (r, vid) in seeds {\n             let seed_index = NodeIndex(vid.index as usize);\n             for succ_index in graph.depth_traverse(seed_index, OUTGOING) {\n                 let succ_index = succ_index.0 as u32;\n                 if succ_index < self.num_vars() {\n                     let succ_vid = RegionVid { index: succ_index };\n-                    givens.insert((fr, succ_vid));\n+                    givens.insert((r, succ_vid));\n                 }\n             }\n         }\n     }\n \n-    fn expansion(&self, free_regions: &FreeRegionMap, var_values: &mut [VarValue<'tcx>]) {\n+    fn expansion(&self,\n+                 region_rels: &RegionRelations<'a, 'gcx, 'tcx>,\n+                 var_values: &mut [VarValue<'tcx>]) {\n         self.iterate_until_fixed_point(\"Expansion\", |constraint, origin| {\n             debug!(\"expansion: constraint={:?} origin={:?}\",\n                    constraint, origin);\n             match *constraint {\n                 ConstrainRegSubVar(a_region, b_vid) => {\n                     let b_data = &mut var_values[b_vid.index as usize];\n-                    self.expand_node(free_regions, a_region, b_vid, b_data)\n+                    self.expand_node(region_rels, a_region, b_vid, b_data)\n                 }\n                 ConstrainVarSubVar(a_vid, b_vid) => {\n                     match var_values[a_vid.index as usize] {\n                         ErrorValue => false,\n                         Value(a_region) => {\n                             let b_node = &mut var_values[b_vid.index as usize];\n-                            self.expand_node(free_regions, a_region, b_vid, b_node)\n+                            self.expand_node(region_rels, a_region, b_vid, b_node)\n                         }\n                     }\n                 }\n@@ -1084,8 +1094,8 @@ impl<'a, 'gcx, 'tcx> RegionVarBindings<'a, 'gcx, 'tcx> {\n     }\n \n     fn expand_node(&self,\n-                   free_regions: &FreeRegionMap,\n-                   a_region: &'tcx Region,\n+                   region_rels: &RegionRelations<'a, 'gcx, 'tcx>,\n+                   a_region: Region<'tcx>,\n                    b_vid: RegionVid,\n                    b_data: &mut VarValue<'tcx>)\n                    -> bool {\n@@ -1096,8 +1106,9 @@ impl<'a, 'gcx, 'tcx> RegionVarBindings<'a, 'gcx, 'tcx> {\n \n         // Check if this relationship is implied by a given.\n         match *a_region {\n-            ty::ReFree(fr) => {\n-                if self.givens.borrow().contains(&(fr, b_vid)) {\n+            ty::ReEarlyBound(_) |\n+            ty::ReFree(_) => {\n+                if self.givens.borrow().contains(&(a_region, b_vid)) {\n                     debug!(\"given\");\n                     return false;\n                 }\n@@ -1107,7 +1118,7 @@ impl<'a, 'gcx, 'tcx> RegionVarBindings<'a, 'gcx, 'tcx> {\n \n         match *b_data {\n             Value(cur_region) => {\n-                let lub = self.lub_concrete_regions(free_regions, a_region, cur_region);\n+                let lub = self.lub_concrete_regions(region_rels, a_region, cur_region);\n                 if lub == cur_region {\n                     return false;\n                 }\n@@ -1131,7 +1142,7 @@ impl<'a, 'gcx, 'tcx> RegionVarBindings<'a, 'gcx, 'tcx> {\n     /// cases where the region cannot grow larger than a fixed point)\n     /// and check that they are satisfied.\n     fn collect_errors(&self,\n-                      free_regions: &FreeRegionMap,\n+                      region_rels: &RegionRelations<'a, 'gcx, 'tcx>,\n                       var_data: &mut Vec<VarValue<'tcx>>,\n                       errors: &mut Vec<RegionResolutionError<'tcx>>) {\n         let constraints = self.constraints.borrow();\n@@ -1145,7 +1156,7 @@ impl<'a, 'gcx, 'tcx> RegionVarBindings<'a, 'gcx, 'tcx> {\n                 }\n \n                 ConstrainRegSubReg(sub, sup) => {\n-                    if free_regions.is_subregion_of(self.tcx, sub, sup) {\n+                    if region_rels.is_subregion_of(sub, sup) {\n                         continue;\n                     }\n \n@@ -1173,7 +1184,7 @@ impl<'a, 'gcx, 'tcx> RegionVarBindings<'a, 'gcx, 'tcx> {\n                     // Do not report these errors immediately:\n                     // instead, set the variable value to error and\n                     // collect them later.\n-                    if !free_regions.is_subregion_of(self.tcx, a_region, b_region) {\n+                    if !region_rels.is_subregion_of(a_region, b_region) {\n                         debug!(\"collect_errors: region error at {:?}: \\\n                                 cannot verify that {:?}={:?} <= {:?}\",\n                                origin,\n@@ -1189,7 +1200,7 @@ impl<'a, 'gcx, 'tcx> RegionVarBindings<'a, 'gcx, 'tcx> {\n         for verify in self.verifys.borrow().iter() {\n             debug!(\"collect_errors: verify={:?}\", verify);\n             let sub = normalize(self.tcx, var_data, verify.region);\n-            if verify.bound.is_met(self.tcx, free_regions, var_data, sub) {\n+            if verify.bound.is_met(region_rels, var_data, sub) {\n                 continue;\n             }\n \n@@ -1208,7 +1219,7 @@ impl<'a, 'gcx, 'tcx> RegionVarBindings<'a, 'gcx, 'tcx> {\n     /// Go over the variables that were declared to be error variables\n     /// and create a `RegionResolutionError` for each of them.\n     fn collect_var_errors(&self,\n-                          free_regions: &FreeRegionMap,\n+                          region_rels: &RegionRelations<'a, 'gcx, 'tcx>,\n                           var_data: &[VarValue<'tcx>],\n                           graph: &RegionGraph<'tcx>,\n                           errors: &mut Vec<RegionResolutionError<'tcx>>) {\n@@ -1257,7 +1268,7 @@ impl<'a, 'gcx, 'tcx> RegionVarBindings<'a, 'gcx, 'tcx> {\n                        this portion of the code and think hard about it. =) */\n \n                     let node_vid = RegionVid { index: idx as u32 };\n-                    self.collect_error_for_expanding_node(free_regions,\n+                    self.collect_error_for_expanding_node(region_rels,\n                                                           graph,\n                                                           &mut dup_vec,\n                                                           node_vid,\n@@ -1310,7 +1321,7 @@ impl<'a, 'gcx, 'tcx> RegionVarBindings<'a, 'gcx, 'tcx> {\n     }\n \n     fn collect_error_for_expanding_node(&self,\n-                                        free_regions: &FreeRegionMap,\n+                                        region_rels: &RegionRelations<'a, 'gcx, 'tcx>,\n                                         graph: &RegionGraph<'tcx>,\n                                         dup_vec: &mut [u32],\n                                         node_idx: RegionVid,\n@@ -1333,20 +1344,19 @@ impl<'a, 'gcx, 'tcx> RegionVarBindings<'a, 'gcx, 'tcx> {\n         // We place free regions first because we are special casing\n         // SubSupConflict(ReFree, ReFree) when reporting error, and so\n         // the user will more likely get a specific suggestion.\n-        fn free_regions_first(a: &RegionAndOrigin, b: &RegionAndOrigin) -> Ordering {\n-            match (a.region, b.region) {\n-                (&ReFree(..), &ReFree(..)) => Equal,\n-                (&ReFree(..), _) => Less,\n-                (_, &ReFree(..)) => Greater,\n-                (..) => Equal,\n+        fn region_order_key(x: &RegionAndOrigin) -> u8 {\n+            match *x.region {\n+                ReEarlyBound(_) => 0,\n+                ReFree(_) => 1,\n+                _ => 2\n             }\n         }\n-        lower_bounds.sort_by(|a, b| free_regions_first(a, b));\n-        upper_bounds.sort_by(|a, b| free_regions_first(a, b));\n+        lower_bounds.sort_by_key(region_order_key);\n+        upper_bounds.sort_by_key(region_order_key);\n \n         for lower_bound in &lower_bounds {\n             for upper_bound in &upper_bounds {\n-                if !free_regions.is_subregion_of(self.tcx, lower_bound.region, upper_bound.region) {\n+                if !region_rels.is_subregion_of(lower_bound.region, upper_bound.region) {\n                     let origin = (*self.var_origins.borrow())[node_idx.index as usize].clone();\n                     debug!(\"region inference error at {:?} for {:?}: SubSupConflict sub: {:?} \\\n                             sup: {:?}\",\n@@ -1479,8 +1489,8 @@ impl<'a, 'gcx, 'tcx> RegionVarBindings<'a, 'gcx, 'tcx> {\n \n fn normalize<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                              values: &Vec<VarValue<'tcx>>,\n-                             r: &'tcx ty::Region)\n-                             -> &'tcx ty::Region {\n+                             r: ty::Region<'tcx>)\n+                             -> ty::Region<'tcx> {\n     match *r {\n         ty::ReVar(rid) => lookup(tcx, values, rid),\n         _ => r,\n@@ -1490,7 +1500,7 @@ fn normalize<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n fn lookup<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                           values: &Vec<VarValue<'tcx>>,\n                           rid: ty::RegionVid)\n-                          -> &'tcx ty::Region {\n+                          -> ty::Region<'tcx> {\n     match values[rid.index as usize] {\n         Value(r) => r,\n         ErrorValue => tcx.types.re_static, // Previously reported error.\n@@ -1538,7 +1548,7 @@ impl<'a, 'gcx, 'tcx> GenericKind<'tcx> {\n }\n \n impl<'a, 'gcx, 'tcx> VerifyBound<'tcx> {\n-    fn for_each_region(&self, f: &mut FnMut(&'tcx ty::Region)) {\n+    fn for_each_region(&self, f: &mut FnMut(ty::Region<'tcx>)) {\n         match self {\n             &VerifyBound::AnyRegion(ref rs) |\n             &VerifyBound::AllRegions(ref rs) => for &r in rs {\n@@ -1590,29 +1600,30 @@ impl<'a, 'gcx, 'tcx> VerifyBound<'tcx> {\n         }\n     }\n \n-    fn is_met(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-              free_regions: &FreeRegionMap,\n+    fn is_met(&self,\n+              region_rels: &RegionRelations<'a, 'gcx, 'tcx>,\n               var_values: &Vec<VarValue<'tcx>>,\n-              min: &'tcx ty::Region)\n+              min: ty::Region<'tcx>)\n               -> bool {\n+        let tcx = region_rels.tcx;\n         match self {\n             &VerifyBound::AnyRegion(ref rs) =>\n                 rs.iter()\n                   .map(|&r| normalize(tcx, var_values, r))\n-                  .any(|r| free_regions.is_subregion_of(tcx, min, r)),\n+                  .any(|r| region_rels.is_subregion_of(min, r)),\n \n             &VerifyBound::AllRegions(ref rs) =>\n                 rs.iter()\n                   .map(|&r| normalize(tcx, var_values, r))\n-                  .all(|r| free_regions.is_subregion_of(tcx, min, r)),\n+                  .all(|r| region_rels.is_subregion_of(min, r)),\n \n             &VerifyBound::AnyBound(ref bs) =>\n                 bs.iter()\n-                  .any(|b| b.is_met(tcx, free_regions, var_values, min)),\n+                  .any(|b| b.is_met(region_rels, var_values, min)),\n \n             &VerifyBound::AllBounds(ref bs) =>\n                 bs.iter()\n-                  .all(|b| b.is_met(tcx, free_regions, var_values, min)),\n+                  .all(|b| b.is_met(region_rels, var_values, min)),\n         }\n     }\n }"}, {"sha": "2e8b843d07b30e99e4dce0c3d754279b921118f3", "filename": "src/librustc/infer/resolve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fresolve.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -72,7 +72,7 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for OpportunisticTypeAndRegionResolv\n         }\n     }\n \n-    fn fold_region(&mut self, r: &'tcx ty::Region) -> &'tcx ty::Region {\n+    fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n         match *r {\n             ty::ReVar(rid) => self.infcx.region_vars.opportunistic_resolve_var(rid),\n             _ => r,\n@@ -138,7 +138,7 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for FullTypeResolver<'a, 'gcx, 'tcx>\n         }\n     }\n \n-    fn fold_region(&mut self, r: &'tcx ty::Region) -> &'tcx ty::Region {\n+    fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n         match *r {\n             ty::ReVar(rid) => self.infcx.region_vars.resolve_var(rid),\n             _ => r,"}, {"sha": "487195fdfae9f833bff88a645ab6691bbab8c6de", "filename": "src/librustc/infer/sub.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fsub.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -127,8 +127,8 @@ impl<'combine, 'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx>\n         }\n     }\n \n-    fn regions(&mut self, a: &'tcx ty::Region, b: &'tcx ty::Region)\n-               -> RelateResult<'tcx, &'tcx ty::Region> {\n+    fn regions(&mut self, a: ty::Region<'tcx>, b: ty::Region<'tcx>)\n+               -> RelateResult<'tcx, ty::Region<'tcx>> {\n         debug!(\"{}.regions({:?}, {:?}) self.cause={:?}\",\n                self.tag(), a, b, self.fields.cause);\n "}, {"sha": "2b4b5cc73337b7306dc5d6a9d3c3bda7ce9fd7a9", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -15,7 +15,6 @@\n //! This API is completely unstable and subject to change.\n \n #![crate_name = \"rustc\"]\n-#![unstable(feature = \"rustc_private\", issue = \"27812\")]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n@@ -31,27 +30,31 @@\n #![feature(core_intrinsics)]\n #![feature(i128_type)]\n #![feature(libc)]\n-#![feature(loop_break_value)]\n #![feature(never_type)]\n #![feature(nonzero)]\n-#![cfg_attr(stage0, feature(pub_restricted))]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n-#![feature(rustc_private)]\n #![feature(slice_patterns)]\n #![feature(specialization)]\n-#![feature(staged_api)]\n #![feature(unboxed_closures)]\n #![feature(discriminant_value)]\n #![feature(sort_unstable)]\n+#![feature(trace_macros)]\n+\n+#![cfg_attr(stage0, unstable(feature = \"rustc_private\", issue = \"27812\"))]\n+#![cfg_attr(stage0, feature(rustc_private))]\n+#![cfg_attr(stage0, feature(staged_api))]\n+#![cfg_attr(stage0, feature(loop_break_value))]\n+\n+#![recursion_limit=\"128\"]\n \n extern crate arena;\n extern crate core;\n extern crate fmt_macros;\n extern crate getopts;\n extern crate graphviz;\n extern crate libc;\n-extern crate rustc_llvm as llvm;\n+extern crate owning_ref;\n extern crate rustc_back;\n extern crate rustc_data_structures;\n extern crate serialize;"}, {"sha": "07140f71aebaa1b68253f71e3aef28372800d397", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -76,6 +76,12 @@ declare_lint! {\n     \"detects unreachable patterns\"\n }\n \n+declare_lint! {\n+    pub UNUSED_MACROS,\n+    Warn,\n+    \"detects macros that were not used\"\n+}\n+\n declare_lint! {\n     pub WARNINGS,\n     Warn,\n@@ -259,6 +265,7 @@ impl LintPass for HardwiredLints {\n             DEAD_CODE,\n             UNREACHABLE_CODE,\n             UNREACHABLE_PATTERNS,\n+            UNUSED_MACROS,\n             WARNINGS,\n             UNUSED_FEATURES,\n             STABLE_FEATURES,"}, {"sha": "9d5ba2c8f950101547a810d5ea2a398f044249f0", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -43,12 +43,13 @@ use std::fmt;\n use syntax::attr;\n use syntax::ast;\n use syntax::symbol::Symbol;\n-use syntax_pos::{DUMMY_SP, MultiSpan, Span};\n+use syntax_pos::{MultiSpan, Span};\n use errors::{self, Diagnostic, DiagnosticBuilder};\n use hir;\n use hir::def_id::LOCAL_CRATE;\n use hir::intravisit as hir_visit;\n use syntax::visit as ast_visit;\n+use syntax::tokenstream::ThinTokenStream;\n \n /// Information about the registered lints.\n ///\n@@ -680,12 +681,12 @@ pub trait LintContext<'tcx>: Sized {\n                                                             \"{}({}) overruled by outer forbid({})\",\n                                                             level.as_str(), lint_name,\n                                                             lint_name);\n-                    diag_builder.span_label(span, &format!(\"overruled by previous forbid\"));\n+                    diag_builder.span_label(span, \"overruled by previous forbid\");\n                     match now_source {\n                         LintSource::Default => &mut diag_builder,\n                         LintSource::Node(_, forbid_source_span) => {\n                             diag_builder.span_label(forbid_source_span,\n-                                                    &format!(\"`forbid` level set here\"))\n+                                                    \"`forbid` level set here\")\n                         },\n                         LintSource::CommandLine(_) => {\n                             diag_builder.note(\"`forbid` lint level was set on command line\")\n@@ -1055,7 +1056,7 @@ impl<'a> ast_visit::Visitor<'a> for EarlyContext<'a> {\n         run_lints!(self, check_ident, early_passes, sp, id);\n     }\n \n-    fn visit_mod(&mut self, m: &'a ast::Mod, s: Span, n: ast::NodeId) {\n+    fn visit_mod(&mut self, m: &'a ast::Mod, s: Span, _a: &[ast::Attribute], n: ast::NodeId) {\n         run_lints!(self, check_mod, early_passes, m, s, n);\n         ast_visit::walk_mod(self, m);\n         run_lints!(self, check_mod_post, early_passes, m, s, n);\n@@ -1125,6 +1126,13 @@ impl<'a> ast_visit::Visitor<'a> for EarlyContext<'a> {\n     fn visit_attribute(&mut self, attr: &'a ast::Attribute) {\n         run_lints!(self, check_attribute, early_passes, attr);\n     }\n+\n+    fn visit_mac_def(&mut self, _mac: &'a ThinTokenStream, id: ast::NodeId) {\n+        let lints = self.sess.lints.borrow_mut().take(id);\n+        for early_lint in lints {\n+            self.early_lint(&early_lint);\n+        }\n+    }\n }\n \n enum CheckLintNameResult {\n@@ -1234,7 +1242,7 @@ fn check_lint_name_cmdline(sess: &Session, lint_cx: &LintStore,\n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     let _task = tcx.dep_graph.in_task(DepNode::LateLintCheck);\n \n-    let access_levels = &ty::queries::privacy_access_levels::get(tcx, DUMMY_SP, LOCAL_CRATE);\n+    let access_levels = &tcx.privacy_access_levels(LOCAL_CRATE);\n \n     let krate = tcx.hir.krate();\n "}, {"sha": "3bbaf5c9299f8945e301378c874a15cd57473c52", "filename": "src/librustc/middle/const_val.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_val.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -14,7 +14,7 @@ pub use rustc_const_math::ConstInt;\n use hir;\n use hir::def::Def;\n use hir::def_id::DefId;\n-use ty::{self, TyCtxt};\n+use ty::TyCtxt;\n use ty::subst::Substs;\n use util::common::ErrorReported;\n use rustc_const_math::*;\n@@ -197,7 +197,7 @@ impl<'a, 'gcx, 'tcx> ConstEvalErr<'tcx> {\n     {\n         match self.description() {\n             ConstEvalErrDescription::Simple(message) => {\n-                diag.span_label(self.span, &message);\n+                diag.span_label(self.span, message);\n             }\n         }\n \n@@ -228,7 +228,7 @@ pub fn eval_length(tcx: TyCtxt,\n     let count_expr = &tcx.hir.body(count).value;\n     let count_def_id = tcx.hir.body_owner_def_id(count);\n     let substs = Substs::empty();\n-    match ty::queries::const_eval::get(tcx, count_expr.span, (count_def_id, substs)) {\n+    match tcx.at(count_expr.span).const_eval((count_def_id, substs)) {\n         Ok(Integral(Usize(count))) => {\n             let val = count.as_u64(tcx.sess.target.uint_type);\n             assert_eq!(val as usize as u64, val);"}, {"sha": "8ad1db7859566d41d26147eeb7777084321e5dd1", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 61, "deletions": 47, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -22,7 +22,8 @@\n // are *mostly* used as a part of that interface, but these should\n // probably get a better home if someone can find one.\n \n-use hir::def::{self, Def};\n+use hir::def;\n+use dep_graph::DepNode;\n use hir::def_id::{CrateNum, DefId, DefIndex};\n use hir::map as hir_map;\n use hir::map::definitions::{Definitions, DefKey, DisambiguatedDefPathData};\n@@ -35,11 +36,10 @@ use session::search_paths::PathKind;\n use util::nodemap::{NodeSet, DefIdMap};\n \n use std::any::Any;\n-use std::collections::BTreeMap;\n-use std::path::PathBuf;\n+use std::path::{Path, PathBuf};\n use std::rc::Rc;\n+use owning_ref::ErasedBoxRef;\n use syntax::ast;\n-use syntax::attr;\n use syntax::ext::base::SyntaxExtension;\n use syntax::symbol::Symbol;\n use syntax_pos::Span;\n@@ -163,7 +163,16 @@ pub struct ExternCrate {\n \n pub struct EncodedMetadata {\n     pub raw_data: Vec<u8>,\n-    pub hashes: Vec<EncodedMetadataHash>,\n+    pub hashes: EncodedMetadataHashes,\n+}\n+\n+impl EncodedMetadata {\n+    pub fn new() -> EncodedMetadata {\n+        EncodedMetadata {\n+            raw_data: Vec::new(),\n+            hashes: EncodedMetadataHashes::new(),\n+        }\n+    }\n }\n \n /// The hash for some metadata that (when saving) will be exported\n@@ -175,39 +184,70 @@ pub struct EncodedMetadataHash {\n     pub hash: ich::Fingerprint,\n }\n \n+/// The hash for some metadata that (when saving) will be exported\n+/// from this crate, or which (when importing) was exported by an\n+/// upstream crate.\n+#[derive(Debug, RustcEncodable, RustcDecodable, Clone)]\n+pub struct EncodedMetadataHashes {\n+    pub entry_hashes: Vec<EncodedMetadataHash>,\n+    pub global_hashes: Vec<(DepNode<()>, ich::Fingerprint)>,\n+}\n+\n+impl EncodedMetadataHashes {\n+    pub fn new() -> EncodedMetadataHashes {\n+        EncodedMetadataHashes {\n+            entry_hashes: Vec::new(),\n+            global_hashes: Vec::new(),\n+        }\n+    }\n+}\n+\n+/// The backend's way to give the crate store access to the metadata in a library.\n+/// Note that it returns the raw metadata bytes stored in the library file, whether\n+/// it is compressed, uncompressed, some weird mix, etc.\n+/// rmeta files are backend independent and not handled here.\n+///\n+/// At the time of this writing, there is only one backend and one way to store\n+/// metadata in library -- this trait just serves to decouple rustc_metadata from\n+/// the archive reader, which depends on LLVM.\n+pub trait MetadataLoader {\n+    fn get_rlib_metadata(&self,\n+                         target: &Target,\n+                         filename: &Path)\n+                         -> Result<ErasedBoxRef<[u8]>, String>;\n+    fn get_dylib_metadata(&self,\n+                          target: &Target,\n+                          filename: &Path)\n+                          -> Result<ErasedBoxRef<[u8]>, String>;\n+}\n+\n /// A store of Rust crates, through with their metadata\n /// can be accessed.\n pub trait CrateStore {\n     fn crate_data_as_rc_any(&self, krate: CrateNum) -> Rc<Any>;\n \n+    // access to the metadata loader\n+    fn metadata_loader(&self) -> &MetadataLoader;\n+\n     // item info\n-    fn describe_def(&self, def: DefId) -> Option<Def>;\n-    fn def_span(&self, sess: &Session, def: DefId) -> Span;\n-    fn stability(&self, def: DefId) -> Option<attr::Stability>;\n-    fn deprecation(&self, def: DefId) -> Option<attr::Deprecation>;\n     fn visibility(&self, def: DefId) -> ty::Visibility;\n     fn visible_parent_map<'a>(&'a self) -> ::std::cell::Ref<'a, DefIdMap<DefId>>;\n     fn item_generics_cloned(&self, def: DefId) -> ty::Generics;\n-    fn item_attrs(&self, def_id: DefId) -> Rc<[ast::Attribute]>;\n-    fn fn_arg_names(&self, did: DefId) -> Vec<ast::Name>;\n \n     // trait info\n     fn implementations_of_trait(&self, filter: Option<DefId>) -> Vec<DefId>;\n \n     // impl info\n-    fn impl_parent(&self, impl_def_id: DefId) -> Option<DefId>;\n+    fn impl_defaultness(&self, def: DefId) -> hir::Defaultness;\n \n     // trait/impl-item info\n-    fn trait_of_item(&self, def_id: DefId) -> Option<DefId>;\n     fn associated_item_cloned(&self, def: DefId) -> ty::AssociatedItem;\n \n     // flags\n     fn is_const_fn(&self, did: DefId) -> bool;\n     fn is_default_impl(&self, impl_did: DefId) -> bool;\n-    fn is_foreign_item(&self, did: DefId) -> bool;\n     fn is_dllimport_foreign_item(&self, def: DefId) -> bool;\n     fn is_statically_included_foreign_item(&self, def_id: DefId) -> bool;\n-    fn is_exported_symbol(&self, def_id: DefId) -> bool;\n \n     // crate metadata\n     fn dylib_dependency_formats(&self, cnum: CrateNum)\n@@ -216,7 +256,6 @@ pub trait CrateStore {\n     fn export_macros(&self, cnum: CrateNum);\n     fn lang_items(&self, cnum: CrateNum) -> Vec<(DefIndex, usize)>;\n     fn missing_lang_items(&self, cnum: CrateNum) -> Vec<lang_items::LangItem>;\n-    fn is_staged_api(&self, cnum: CrateNum) -> bool;\n     fn is_allocator(&self, cnum: CrateNum) -> bool;\n     fn is_panic_runtime(&self, cnum: CrateNum) -> bool;\n     fn is_compiler_builtins(&self, cnum: CrateNum) -> bool;\n@@ -243,18 +282,14 @@ pub trait CrateStore {\n                     -> Option<DefId>;\n     fn def_key(&self, def: DefId) -> DefKey;\n     fn def_path(&self, def: DefId) -> hir_map::DefPath;\n-    fn def_path_hash(&self, def: DefId) -> u64;\n+    fn def_path_hash(&self, def: DefId) -> ich::Fingerprint;\n     fn struct_field_names(&self, def: DefId) -> Vec<ast::Name>;\n     fn item_children(&self, did: DefId) -> Vec<def::Export>;\n     fn load_macro(&self, did: DefId, sess: &Session) -> LoadedMacro;\n \n     // misc. metadata\n     fn item_body<'a, 'tcx>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)\n                            -> &'tcx hir::Body;\n-    fn item_body_nested_bodies(&self, def: DefId) -> BTreeMap<hir::BodyId, hir::Body>;\n-    fn const_is_rvalue_promotable_to_static(&self, def: DefId) -> bool;\n-\n-    fn is_item_mir_available(&self, def: DefId) -> bool;\n \n     // This is basically a 1-based range of ints, which is a little\n     // silly - I may fix that.\n@@ -263,8 +298,6 @@ pub trait CrateStore {\n     fn used_link_args(&self) -> Vec<String>;\n \n     // utility functions\n-    fn metadata_filename(&self) -> &str;\n-    fn metadata_section_name(&self, target: &Target) -> &str;\n     fn used_crates(&self, prefer: LinkagePreference) -> Vec<(CrateNum, LibSource)>;\n     fn used_crate_source(&self, cnum: CrateNum) -> CrateSource;\n     fn extern_mod_stmt_cnum(&self, emod_id: ast::NodeId) -> Option<CrateNum>;\n@@ -312,37 +345,28 @@ impl CrateStore for DummyCrateStore {\n     fn crate_data_as_rc_any(&self, krate: CrateNum) -> Rc<Any>\n         { bug!(\"crate_data_as_rc_any\") }\n     // item info\n-    fn describe_def(&self, def: DefId) -> Option<Def> { bug!(\"describe_def\") }\n-    fn def_span(&self, sess: &Session, def: DefId) -> Span { bug!(\"def_span\") }\n-    fn stability(&self, def: DefId) -> Option<attr::Stability> { bug!(\"stability\") }\n-    fn deprecation(&self, def: DefId) -> Option<attr::Deprecation> { bug!(\"deprecation\") }\n     fn visibility(&self, def: DefId) -> ty::Visibility { bug!(\"visibility\") }\n     fn visible_parent_map<'a>(&'a self) -> ::std::cell::Ref<'a, DefIdMap<DefId>> {\n         bug!(\"visible_parent_map\")\n     }\n     fn item_generics_cloned(&self, def: DefId) -> ty::Generics\n         { bug!(\"item_generics_cloned\") }\n-    fn item_attrs(&self, def_id: DefId) -> Rc<[ast::Attribute]> { bug!(\"item_attrs\") }\n-    fn fn_arg_names(&self, did: DefId) -> Vec<ast::Name> { bug!(\"fn_arg_names\") }\n \n     // trait info\n     fn implementations_of_trait(&self, filter: Option<DefId>) -> Vec<DefId> { vec![] }\n \n     // impl info\n-    fn impl_parent(&self, def: DefId) -> Option<DefId> { bug!(\"impl_parent\") }\n+    fn impl_defaultness(&self, def: DefId) -> hir::Defaultness { bug!(\"impl_defaultness\") }\n \n     // trait/impl-item info\n-    fn trait_of_item(&self, def_id: DefId) -> Option<DefId> { bug!(\"trait_of_item\") }\n     fn associated_item_cloned(&self, def: DefId) -> ty::AssociatedItem\n         { bug!(\"associated_item_cloned\") }\n \n     // flags\n     fn is_const_fn(&self, did: DefId) -> bool { bug!(\"is_const_fn\") }\n     fn is_default_impl(&self, impl_did: DefId) -> bool { bug!(\"is_default_impl\") }\n-    fn is_foreign_item(&self, did: DefId) -> bool { bug!(\"is_foreign_item\") }\n     fn is_dllimport_foreign_item(&self, id: DefId) -> bool { false }\n     fn is_statically_included_foreign_item(&self, def_id: DefId) -> bool { false }\n-    fn is_exported_symbol(&self, def_id: DefId) -> bool { false }\n \n     // crate metadata\n     fn dylib_dependency_formats(&self, cnum: CrateNum)\n@@ -352,7 +376,6 @@ impl CrateStore for DummyCrateStore {\n         { bug!(\"lang_items\") }\n     fn missing_lang_items(&self, cnum: CrateNum) -> Vec<lang_items::LangItem>\n         { bug!(\"missing_lang_items\") }\n-    fn is_staged_api(&self, cnum: CrateNum) -> bool { bug!(\"is_staged_api\") }\n     fn dep_kind(&self, cnum: CrateNum) -> DepKind { bug!(\"is_explicitly_linked\") }\n     fn export_macros(&self, cnum: CrateNum) { bug!(\"export_macros\") }\n     fn is_allocator(&self, cnum: CrateNum) -> bool { bug!(\"is_allocator\") }\n@@ -391,7 +414,7 @@ impl CrateStore for DummyCrateStore {\n     fn def_path(&self, def: DefId) -> hir_map::DefPath {\n         bug!(\"relative_def_path\")\n     }\n-    fn def_path_hash(&self, def: DefId) -> u64 {\n+    fn def_path_hash(&self, def: DefId) -> ich::Fingerprint {\n         bug!(\"wa\")\n     }\n     fn struct_field_names(&self, def: DefId) -> Vec<ast::Name> { bug!(\"struct_field_names\") }\n@@ -403,16 +426,6 @@ impl CrateStore for DummyCrateStore {\n                            -> &'tcx hir::Body {\n         bug!(\"item_body\")\n     }\n-    fn item_body_nested_bodies(&self, def: DefId) -> BTreeMap<hir::BodyId, hir::Body> {\n-        bug!(\"item_body_nested_bodies\")\n-    }\n-    fn const_is_rvalue_promotable_to_static(&self, def: DefId) -> bool {\n-        bug!(\"const_is_rvalue_promotable_to_static\")\n-    }\n-\n-    fn is_item_mir_available(&self, def: DefId) -> bool {\n-        bug!(\"is_item_mir_available\")\n-    }\n \n     // This is basically a 1-based range of ints, which is a little\n     // silly - I may fix that.\n@@ -421,8 +434,6 @@ impl CrateStore for DummyCrateStore {\n     fn used_link_args(&self) -> Vec<String> { vec![] }\n \n     // utility functions\n-    fn metadata_filename(&self) -> &str { bug!(\"metadata_filename\") }\n-    fn metadata_section_name(&self, target: &Target) -> &str { bug!(\"metadata_section_name\") }\n     fn used_crates(&self, prefer: LinkagePreference) -> Vec<(CrateNum, LibSource)>\n         { vec![] }\n     fn used_crate_source(&self, cnum: CrateNum) -> CrateSource { bug!(\"used_crate_source\") }\n@@ -435,6 +446,9 @@ impl CrateStore for DummyCrateStore {\n         bug!(\"encode_metadata\")\n     }\n     fn metadata_encoding_version(&self) -> &[u8] { bug!(\"metadata_encoding_version\") }\n+\n+    // access to the metadata loader\n+    fn metadata_loader(&self) -> &MetadataLoader { bug!(\"metadata_loader\") }\n }\n \n pub trait CrateLoader {"}, {"sha": "84ead6506c85c16d9b54da4eb58a35a4b7ba0481", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -26,7 +26,6 @@ use util::nodemap::FxHashSet;\n \n use syntax::{ast, codemap};\n use syntax::attr;\n-use syntax::codemap::DUMMY_SP;\n use syntax_pos;\n \n // Any local node that may call something in its body block should be\n@@ -160,7 +159,7 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n                 match item.node {\n                     hir::ItemStruct(..) | hir::ItemUnion(..) => {\n                         let def_id = self.tcx.hir.local_def_id(item.id);\n-                        let def = self.tcx.lookup_adt_def(def_id);\n+                        let def = self.tcx.adt_def(def_id);\n                         self.struct_has_extern_repr = def.repr.c();\n \n                         intravisit::walk_item(self, &item);\n@@ -284,6 +283,12 @@ fn has_allow_dead_code_or_lang_attr(attrs: &[ast::Attribute]) -> bool {\n         return true;\n     }\n \n+    // #[used] also keeps the item alive forcefully,\n+    // e.g. for placing it in a specific section.\n+    if attr::contains_name(attrs, \"used\") {\n+        return true;\n+    }\n+\n     let dead_code = lint::builtin::DEAD_CODE.name_lower();\n     for attr in lint::gather_attrs(attrs) {\n         match attr {\n@@ -433,7 +438,7 @@ impl<'a, 'tcx> DeadVisitor<'a, 'tcx> {\n     }\n \n     fn should_warn_about_field(&mut self, field: &hir::StructField) -> bool {\n-        let field_type = self.tcx.item_type(self.tcx.hir.local_def_id(field.id));\n+        let field_type = self.tcx.type_of(self.tcx.hir.local_def_id(field.id));\n         let is_marker_field = match field_type.ty_to_def_id() {\n             Some(def_id) => self.tcx.lang_items.items().iter().any(|item| *item == Some(def_id)),\n             _ => false\n@@ -476,14 +481,13 @@ impl<'a, 'tcx> DeadVisitor<'a, 'tcx> {\n         // This is done to handle the case where, for example, the static\n         // method of a private type is used, but the type itself is never\n         // called directly.\n-        if let Some(impl_list) =\n-                self.tcx.maps.inherent_impls.borrow().get(&self.tcx.hir.local_def_id(id)) {\n-            for &impl_did in impl_list.iter() {\n-                for &item_did in &self.tcx.associated_item_def_ids(impl_did)[..] {\n-                    if let Some(item_node_id) = self.tcx.hir.as_local_node_id(item_did) {\n-                        if self.live_symbols.contains(&item_node_id) {\n-                            return true;\n-                        }\n+        let def_id = self.tcx.hir.local_def_id(id);\n+        let inherent_impls = self.tcx.inherent_impls(def_id);\n+        for &impl_did in inherent_impls.iter() {\n+            for &item_did in &self.tcx.associated_item_def_ids(impl_did)[..] {\n+                if let Some(item_node_id) = self.tcx.hir.as_local_node_id(item_did) {\n+                    if self.live_symbols.contains(&item_node_id) {\n+                        return true;\n                     }\n                 }\n             }\n@@ -593,7 +597,7 @@ impl<'a, 'tcx> Visitor<'tcx> for DeadVisitor<'a, 'tcx> {\n }\n \n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    let access_levels = &ty::queries::privacy_access_levels::get(tcx, DUMMY_SP, LOCAL_CRATE);\n+    let access_levels = &tcx.privacy_access_levels(LOCAL_CRATE);\n     let krate = tcx.hir.krate();\n     let live_symbols = find_live(tcx, access_levels, krate);\n     let mut visitor = DeadVisitor { tcx: tcx, live_symbols: live_symbols };"}, {"sha": "5360a86560d399235a660c877c47090fea23bf3f", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -74,7 +74,7 @@ impl<'a, 'tcx> EffectCheckVisitor<'a, 'tcx> {\n                     struct_span_err!(\n                         self.tcx.sess, span, E0133,\n                         \"{} requires unsafe function or block\", description)\n-                        .span_label(span, &description)\n+                        .span_label(span, description)\n                         .emit();\n                 }\n             }\n@@ -205,7 +205,7 @@ impl<'a, 'tcx> Visitor<'tcx> for EffectCheckVisitor<'a, 'tcx> {\n                     } else if match self.tcx.hir.get_if_local(def_id) {\n                         Some(hir::map::NodeForeignItem(..)) => true,\n                         Some(..) => false,\n-                        None => self.tcx.sess.cstore.is_foreign_item(def_id),\n+                        None => self.tcx.is_foreign_item(def_id),\n                     } {\n                         self.require_unsafe_ext(expr.id, expr.span, \"use of extern static\", true);\n                     }"}, {"sha": "24748b6cf65b8aab05159071a883fcd4821885b4", "filename": "src/librustc/middle/entry.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fmiddle%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fmiddle%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fentry.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -128,8 +128,8 @@ fn find_item(item: &Item, ctxt: &mut EntryContext, at_root: bool) {\n             } else {\n                 struct_span_err!(ctxt.session, item.span, E0137,\n                           \"multiple functions with a #[main] attribute\")\n-                .span_label(item.span, &format!(\"additional #[main] function\"))\n-                .span_label(ctxt.attr_main_fn.unwrap().1, &format!(\"first #[main] function\"))\n+                .span_label(item.span, \"additional #[main] function\")\n+                .span_label(ctxt.attr_main_fn.unwrap().1, \"first #[main] function\")\n                 .emit();\n             }\n         },\n@@ -141,8 +141,8 @@ fn find_item(item: &Item, ctxt: &mut EntryContext, at_root: bool) {\n                     ctxt.session, item.span, E0138,\n                     \"multiple 'start' functions\")\n                     .span_label(ctxt.start_fn.unwrap().1,\n-                                &format!(\"previous `start` function here\"))\n-                    .span_label(item.span, &format!(\"multiple `start` functions\"))\n+                                \"previous `start` function here\")\n+                    .span_label(item.span, \"multiple `start` functions\")\n                     .emit();\n             }\n         },"}, {"sha": "99b140f690a4848cda6ee003634a45f7cb321ed9", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -23,6 +23,7 @@ use hir::def::Def;\n use hir::def_id::{DefId};\n use infer::InferCtxt;\n use middle::mem_categorization as mc;\n+use middle::region::RegionMaps;\n use ty::{self, TyCtxt, adjustment};\n \n use hir::{self, PatKind};\n@@ -75,7 +76,7 @@ pub trait Delegate<'tcx> {\n               borrow_id: ast::NodeId,\n               borrow_span: Span,\n               cmt: mc::cmt<'tcx>,\n-              loan_region: &'tcx ty::Region,\n+              loan_region: ty::Region<'tcx>,\n               bk: ty::BorrowKind,\n               loan_cause: LoanCause);\n \n@@ -270,19 +271,24 @@ enum PassArgs {\n \n impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n     pub fn new(delegate: &'a mut (Delegate<'tcx>+'a),\n+               region_maps: &'a RegionMaps,\n                infcx: &'a InferCtxt<'a, 'gcx, 'tcx>)\n                -> Self\n     {\n-        ExprUseVisitor::with_options(delegate, infcx, mc::MemCategorizationOptions::default())\n+        ExprUseVisitor::with_options(delegate,\n+                                     infcx,\n+                                     region_maps,\n+                                     mc::MemCategorizationOptions::default())\n     }\n \n     pub fn with_options(delegate: &'a mut (Delegate<'tcx>+'a),\n                         infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,\n+                        region_maps: &'a RegionMaps,\n                         options: mc::MemCategorizationOptions)\n                -> Self\n     {\n         ExprUseVisitor {\n-            mc: mc::MemCategorizationContext::with_options(infcx, options),\n+            mc: mc::MemCategorizationContext::with_options(infcx, region_maps, options),\n             delegate: delegate\n         }\n     }\n@@ -347,7 +353,7 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n \n     fn borrow_expr(&mut self,\n                    expr: &hir::Expr,\n-                   r: &'tcx ty::Region,\n+                   r: ty::Region<'tcx>,\n                    bk: ty::BorrowKind,\n                    cause: LoanCause) {\n         debug!(\"borrow_expr(expr={:?}, r={:?}, bk={:?})\",\n@@ -998,7 +1004,7 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n                 Def::Variant(variant_did) |\n                 Def::VariantCtor(variant_did, ..) => {\n                     let enum_did = tcx.parent_def_id(variant_did).unwrap();\n-                    let downcast_cmt = if tcx.lookup_adt_def(enum_did).is_univariant() {\n+                    let downcast_cmt = if tcx.adt_def(enum_did).is_univariant() {\n                         cmt_pat\n                     } else {\n                         let cmt_pat_ty = cmt_pat.ty;"}, {"sha": "6a21bdc19e0915b2ade6bf1ebb69e59a0e9a8d92", "filename": "src/librustc/middle/free_region.rs", "status": "modified", "additions": 143, "deletions": 109, "changes": 252, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fmiddle%2Ffree_region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fmiddle%2Ffree_region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ffree_region.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -15,36 +15,137 @@\n //! `TransitiveRelation` type and use that to decide when one free\n //! region outlives another and so forth.\n \n-use ty::{self, TyCtxt, FreeRegion, Region};\n+use hir::def_id::DefId;\n+use middle::region::RegionMaps;\n+use ty::{self, Lift, TyCtxt, Region};\n use ty::wf::ImpliedBound;\n use rustc_data_structures::transitive_relation::TransitiveRelation;\n \n+/// Combines a `RegionMaps` (which governs relationships between\n+/// scopes) and a `FreeRegionMap` (which governs relationships between\n+/// free regions) to yield a complete relation between concrete\n+/// regions.\n+///\n+/// This stuff is a bit convoluted and should be refactored, but as we\n+/// move to NLL it'll all go away anyhow.\n+pub struct RegionRelations<'a, 'gcx: 'tcx, 'tcx: 'a> {\n+    pub tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+\n+    /// context used to fetch the region maps\n+    pub context: DefId,\n+\n+    /// region maps for the given context\n+    pub region_maps: &'a RegionMaps,\n+\n+    /// free-region relationships\n+    pub free_regions: &'a FreeRegionMap<'tcx>,\n+}\n+\n+impl<'a, 'gcx, 'tcx> RegionRelations<'a, 'gcx, 'tcx> {\n+    pub fn new(\n+        tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+        context: DefId,\n+        region_maps: &'a RegionMaps,\n+        free_regions: &'a FreeRegionMap<'tcx>,\n+    ) -> Self {\n+        Self {\n+            tcx,\n+            context,\n+            region_maps,\n+            free_regions,\n+        }\n+    }\n+\n+    /// Determines whether one region is a subregion of another.  This is intended to run *after\n+    /// inference* and sadly the logic is somewhat duplicated with the code in infer.rs.\n+    pub fn is_subregion_of(&self,\n+                           sub_region: ty::Region<'tcx>,\n+                           super_region: ty::Region<'tcx>)\n+                           -> bool {\n+        let result = sub_region == super_region || {\n+            match (sub_region, super_region) {\n+                (&ty::ReEmpty, _) |\n+                (_, &ty::ReStatic) =>\n+                    true,\n+\n+                (&ty::ReScope(sub_scope), &ty::ReScope(super_scope)) =>\n+                    self.region_maps.is_subscope_of(sub_scope, super_scope),\n+\n+                (&ty::ReScope(sub_scope), &ty::ReEarlyBound(ref br)) => {\n+                    let fr_scope = self.region_maps.early_free_extent(self.tcx, br);\n+                    self.region_maps.is_subscope_of(sub_scope, fr_scope)\n+                }\n+\n+                (&ty::ReScope(sub_scope), &ty::ReFree(ref fr)) => {\n+                    let fr_scope = self.region_maps.free_extent(self.tcx, fr);\n+                    self.region_maps.is_subscope_of(sub_scope, fr_scope)\n+                }\n+\n+                (&ty::ReEarlyBound(_), &ty::ReEarlyBound(_)) |\n+                (&ty::ReFree(_), &ty::ReEarlyBound(_)) |\n+                (&ty::ReEarlyBound(_), &ty::ReFree(_)) |\n+                (&ty::ReFree(_), &ty::ReFree(_)) =>\n+                    self.free_regions.relation.contains(&sub_region, &super_region),\n+\n+                _ =>\n+                    false,\n+            }\n+        };\n+        let result = result || self.is_static(super_region);\n+        debug!(\"is_subregion_of(sub_region={:?}, super_region={:?}) = {:?}\",\n+               sub_region, super_region, result);\n+        result\n+    }\n+\n+    /// Determines whether this free-region is required to be 'static\n+    fn is_static(&self, super_region: ty::Region<'tcx>) -> bool {\n+        debug!(\"is_static(super_region={:?})\", super_region);\n+        match *super_region {\n+            ty::ReStatic => true,\n+            ty::ReEarlyBound(_) | ty::ReFree(_) => {\n+                let re_static = self.tcx.mk_region(ty::ReStatic);\n+                self.free_regions.relation.contains(&re_static, &super_region)\n+            }\n+            _ => false\n+        }\n+    }\n+\n+    pub fn lub_free_regions(&self,\n+                            r_a: Region<'tcx>,\n+                            r_b: Region<'tcx>)\n+                            -> Region<'tcx> {\n+        self.free_regions.lub_free_regions(self.tcx, r_a, r_b)\n+    }\n+}\n+\n #[derive(Clone, RustcEncodable, RustcDecodable)]\n-pub struct FreeRegionMap {\n+pub struct FreeRegionMap<'tcx> {\n     // Stores the relation `a < b`, where `a` and `b` are regions.\n-    relation: TransitiveRelation<Region>\n+    //\n+    // Invariant: only free regions like `'x` or `'static` are stored\n+    // in this relation, not scopes.\n+    relation: TransitiveRelation<Region<'tcx>>\n }\n \n-impl FreeRegionMap {\n-    pub fn new() -> FreeRegionMap {\n+impl<'tcx> FreeRegionMap<'tcx> {\n+    pub fn new() -> Self {\n         FreeRegionMap { relation: TransitiveRelation::new() }\n     }\n \n     pub fn is_empty(&self) -> bool {\n         self.relation.is_empty()\n     }\n \n-    pub fn relate_free_regions_from_implied_bounds<'tcx>(&mut self,\n-                                                        implied_bounds: &[ImpliedBound<'tcx>])\n+    pub fn relate_free_regions_from_implied_bounds(&mut self,\n+                                                   implied_bounds: &[ImpliedBound<'tcx>])\n     {\n         debug!(\"relate_free_regions_from_implied_bounds()\");\n         for implied_bound in implied_bounds {\n             debug!(\"implied bound: {:?}\", implied_bound);\n             match *implied_bound {\n-                ImpliedBound::RegionSubRegion(&ty::ReFree(free_a), &ty::ReFree(free_b)) => {\n-                    self.relate_free_regions(free_a, free_b);\n+                ImpliedBound::RegionSubRegion(a, b) => {\n+                    self.relate_regions(a, b);\n                 }\n-                ImpliedBound::RegionSubRegion(..) |\n                 ImpliedBound::RegionSubParam(..) |\n                 ImpliedBound::RegionSubProjection(..) => {\n                 }\n@@ -53,7 +154,7 @@ impl FreeRegionMap {\n     }\n \n     pub fn relate_free_regions_from_predicates(&mut self,\n-                                               predicates: &[ty::Predicate]) {\n+                                               predicates: &[ty::Predicate<'tcx>]) {\n         debug!(\"relate_free_regions_from_predicates(predicates={:?})\", predicates);\n         for predicate in predicates {\n             match *predicate {\n@@ -68,120 +169,53 @@ impl FreeRegionMap {\n                     // No region bounds here\n                 }\n                 ty::Predicate::RegionOutlives(ty::Binder(ty::OutlivesPredicate(r_a, r_b))) => {\n-                    match (r_a, r_b) {\n-                        (&ty::ReStatic, &ty::ReFree(_)) => {},\n-                        (&ty::ReFree(fr_a), &ty::ReStatic) => self.relate_to_static(fr_a),\n-                        (&ty::ReFree(fr_a), &ty::ReFree(fr_b)) => {\n-                            // Record that `'a:'b`. Or, put another way, `'b <= 'a`.\n-                            self.relate_free_regions(fr_b, fr_a);\n-                        }\n-                        _ => {\n-                            // All named regions are instantiated with free regions.\n-                            bug!(\"record_region_bounds: non free region: {:?} / {:?}\",\n-                                 r_a,\n-                                 r_b);\n-                        }\n-                    }\n+                    self.relate_regions(r_b, r_a);\n                 }\n             }\n         }\n     }\n \n-    fn relate_to_static(&mut self, sup: FreeRegion) {\n-        self.relation.add(ty::ReStatic, ty::ReFree(sup));\n-    }\n-\n-    fn relate_free_regions(&mut self, sub: FreeRegion, sup: FreeRegion) {\n-        self.relation.add(ty::ReFree(sub), ty::ReFree(sup))\n-    }\n-\n-    /// Determines whether two free regions have a subregion relationship\n-    /// by walking the graph encoded in `map`.  Note that\n-    /// it is possible that `sub != sup` and `sub <= sup` and `sup <= sub`\n-    /// (that is, the user can give two different names to the same lifetime).\n-    pub fn sub_free_region(&self, sub: FreeRegion, sup: FreeRegion) -> bool {\n-        let result = sub == sup || {\n-            let sub = ty::ReFree(sub);\n-            let sup = ty::ReFree(sup);\n-            self.relation.contains(&sub, &sup) || self.relation.contains(&ty::ReStatic, &sup)\n-        };\n-        debug!(\"sub_free_region(sub={:?}, sup={:?}) = {:?}\", sub, sup, result);\n-        result\n+    // Record that `'sup:'sub`. Or, put another way, `'sub <= 'sup`.\n+    // (with the exception that `'static: 'x` is not notable)\n+    fn relate_regions(&mut self, sub: Region<'tcx>, sup: Region<'tcx>) {\n+        if (is_free(sub) || *sub == ty::ReStatic) && is_free(sup) {\n+            self.relation.add(sub, sup)\n+        }\n     }\n \n-    pub fn lub_free_regions(&self, fr_a: FreeRegion, fr_b: FreeRegion) -> Region {\n-        let r_a = ty::ReFree(fr_a);\n-        let r_b = ty::ReFree(fr_b);\n-        let result = if fr_a == fr_b { r_a } else {\n+    pub fn lub_free_regions<'a, 'gcx>(&self,\n+                                      tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+                                      r_a: Region<'tcx>,\n+                                      r_b: Region<'tcx>)\n+                                      -> Region<'tcx> {\n+        assert!(is_free(r_a));\n+        assert!(is_free(r_b));\n+        let result = if r_a == r_b { r_a } else {\n             match self.relation.postdom_upper_bound(&r_a, &r_b) {\n-                None => ty::ReStatic,\n+                None => tcx.mk_region(ty::ReStatic),\n                 Some(r) => *r,\n             }\n         };\n-        debug!(\"lub_free_regions(fr_a={:?}, fr_b={:?}) = {:?}\", fr_a, fr_b, result);\n-        result\n-    }\n-\n-    /// Determines whether one region is a subregion of another.  This is intended to run *after\n-    /// inference* and sadly the logic is somewhat duplicated with the code in infer.rs.\n-    pub fn is_subregion_of(&self,\n-                           tcx: TyCtxt,\n-                           sub_region: &ty::Region,\n-                           super_region: &ty::Region)\n-                           -> bool {\n-        let result = sub_region == super_region || {\n-            match (sub_region, super_region) {\n-                (&ty::ReEmpty, _) |\n-                (_, &ty::ReStatic) =>\n-                    true,\n-\n-                (&ty::ReScope(sub_scope), &ty::ReScope(super_scope)) =>\n-                    tcx.region_maps.is_subscope_of(sub_scope, super_scope),\n-\n-                (&ty::ReScope(sub_scope), &ty::ReFree(fr)) =>\n-                    tcx.region_maps.is_subscope_of(sub_scope, fr.scope) ||\n-                    self.is_static(fr),\n-\n-                (&ty::ReFree(sub_fr), &ty::ReFree(super_fr)) =>\n-                    self.sub_free_region(sub_fr, super_fr),\n-\n-                (&ty::ReStatic, &ty::ReFree(sup_fr)) =>\n-                    self.is_static(sup_fr),\n-\n-                _ =>\n-                    false,\n-            }\n-        };\n-        debug!(\"is_subregion_of(sub_region={:?}, super_region={:?}) = {:?}\",\n-               sub_region, super_region, result);\n+        debug!(\"lub_free_regions(r_a={:?}, r_b={:?}) = {:?}\", r_a, r_b, result);\n         result\n     }\n-\n-    /// Determines whether this free-region is required to be 'static\n-    pub fn is_static(&self, super_region: ty::FreeRegion) -> bool {\n-        debug!(\"is_static(super_region={:?})\", super_region);\n-        self.relation.contains(&ty::ReStatic, &ty::ReFree(super_region))\n-    }\n-}\n-\n-#[cfg(test)]\n-fn free_region(index: u32) -> FreeRegion {\n-    use middle::region::DUMMY_CODE_EXTENT;\n-    FreeRegion { scope: DUMMY_CODE_EXTENT,\n-                 bound_region: ty::BoundRegion::BrAnon(index) }\n }\n \n-#[test]\n-fn lub() {\n-    // a very VERY basic test, but see the tests in\n-    // TransitiveRelation, which are much more thorough.\n-    let frs: Vec<_> = (0..3).map(|i| free_region(i)).collect();\n-    let mut map = FreeRegionMap::new();\n-    map.relate_free_regions(frs[0], frs[2]);\n-    map.relate_free_regions(frs[1], frs[2]);\n-    assert_eq!(map.lub_free_regions(frs[0], frs[1]), ty::ReFree(frs[2]));\n+fn is_free(r: Region) -> bool {\n+    match *r {\n+        ty::ReEarlyBound(_) | ty::ReFree(_) => true,\n+        _ => false\n+    }\n }\n \n-impl_stable_hash_for!(struct FreeRegionMap {\n+impl_stable_hash_for!(struct FreeRegionMap<'tcx> {\n     relation\n });\n+\n+impl<'a, 'tcx> Lift<'tcx> for FreeRegionMap<'a> {\n+    type Lifted = FreeRegionMap<'tcx>;\n+    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<FreeRegionMap<'tcx>> {\n+        self.relation.maybe_map(|&fr| fr.lift_to_tcx(tcx))\n+                     .map(|relation| FreeRegionMap { relation })\n+    }\n+}"}, {"sha": "a759a9061f8428874475d8a2f61be1e8426d6057", "filename": "src/librustc/middle/intrinsicck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -66,7 +66,7 @@ fn unpack_option_like<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n impl<'a, 'gcx, 'tcx> ExprVisitor<'a, 'gcx, 'tcx> {\n     fn def_id_is_transmute(&self, def_id: DefId) -> bool {\n-        let intrinsic = match self.infcx.tcx.item_type(def_id).sty {\n+        let intrinsic = match self.infcx.tcx.type_of(def_id).sty {\n             ty::TyFnDef(.., bfty) => bfty.abi() == RustIntrinsic,\n             _ => return false\n         };\n@@ -92,7 +92,7 @@ impl<'a, 'gcx, 'tcx> ExprVisitor<'a, 'gcx, 'tcx> {\n                     struct_span_err!(self.infcx.tcx.sess, span, E0591,\n                                      \"`{}` is zero-sized and can't be transmuted to `{}`\",\n                                      from, to)\n-                        .span_note(span, &format!(\"cast with `as` to a pointer instead\"))\n+                        .span_note(span, \"cast with `as` to a pointer instead\")\n                         .emit();\n                     return;\n                 }\n@@ -126,7 +126,7 @@ impl<'a, 'gcx, 'tcx> ExprVisitor<'a, 'gcx, 'tcx> {\n                   from, skeleton_string(from, sk_from),\n                   to, skeleton_string(to, sk_to))\n             .span_label(span,\n-                &format!(\"transmuting between {} and {}\",\n+                format!(\"transmuting between {} and {}\",\n                     skeleton_string(from, sk_from),\n                     skeleton_string(to, sk_to)))\n             .emit();"}, {"sha": "ecd350d12736897799a3a78d6cfbbf01274db79a", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 2, "deletions": 51, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -96,9 +96,6 @@\n //!\n //! - `fallthrough_ln`: a live node that represents a fallthrough\n //!\n-//! - `no_ret_var`: a synthetic variable that is only 'read' from, the\n-//!   fallthrough node.  This allows us to detect functions where we fail\n-//!   to return explicitly.\n //! - `clean_exit_var`: a synthetic variable that is only 'read' from the\n //!   fallthrough node.  It is only live if the function could converge\n //!   via means other than an explicit `return` expression. That is, it is\n@@ -110,9 +107,7 @@ use self::LiveNodeKind::*;\n use self::VarKind::*;\n \n use hir::def::*;\n-use ty::{self, TyCtxt, ParameterEnvironment};\n-use traits::{self, Reveal};\n-use ty::subst::Subst;\n+use ty::{self, TyCtxt};\n use lint;\n use util::nodemap::NodeMap;\n \n@@ -256,7 +251,6 @@ struct LocalInfo {\n enum VarKind {\n     Arg(NodeId, ast::Name),\n     Local(LocalInfo),\n-    ImplicitRet,\n     CleanExit\n }\n \n@@ -313,7 +307,7 @@ impl<'a, 'tcx> IrMaps<'a, 'tcx> {\n             Local(LocalInfo { id: node_id, .. }) | Arg(node_id, _) => {\n                 self.variable_map.insert(node_id, v);\n             },\n-            ImplicitRet | CleanExit => {}\n+            CleanExit => {}\n         }\n \n         debug!(\"{:?} is {:?}\", v, vk);\n@@ -335,7 +329,6 @@ impl<'a, 'tcx> IrMaps<'a, 'tcx> {\n             Local(LocalInfo { name, .. }) | Arg(_, name) => {\n                 name.to_string()\n             },\n-            ImplicitRet => \"<implicit-ret>\".to_string(),\n             CleanExit => \"<clean-exit>\".to_string()\n         }\n     }\n@@ -382,7 +375,6 @@ fn visit_fn<'a, 'tcx: 'a>(ir: &mut IrMaps<'a, 'tcx>,\n \n     // check for various error conditions\n     lsets.visit_body(body);\n-    lsets.check_ret(id, sp, entry_ln, body);\n     lsets.warn_about_unused_args(body, entry_ln);\n }\n \n@@ -500,7 +492,6 @@ fn invalid_users() -> Users {\n struct Specials {\n     exit_ln: LiveNode,\n     fallthrough_ln: LiveNode,\n-    no_ret_var: Variable,\n     clean_exit_var: Variable\n }\n \n@@ -534,7 +525,6 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n         let specials = Specials {\n             exit_ln: ir.add_live_node(ExitNode),\n             fallthrough_ln: ir.add_live_node(ExitNode),\n-            no_ret_var: ir.add_variable(ImplicitRet),\n             clean_exit_var: ir.add_variable(CleanExit)\n         };\n \n@@ -1420,45 +1410,6 @@ fn check_expr<'a, 'tcx>(this: &mut Liveness<'a, 'tcx>, expr: &'tcx Expr) {\n }\n \n impl<'a, 'tcx> Liveness<'a, 'tcx> {\n-    fn check_ret(&self,\n-                 id: NodeId,\n-                 sp: Span,\n-                 entry_ln: LiveNode,\n-                 body: &hir::Body)\n-    {\n-        let fn_ty = self.ir.tcx.item_type(self.ir.tcx.hir.local_def_id(id));\n-        let fn_sig = match fn_ty.sty {\n-            ty::TyClosure(closure_def_id, substs) => {\n-                self.ir.tcx.closure_type(closure_def_id)\n-                    .subst(self.ir.tcx, substs.substs)\n-            }\n-            _ => fn_ty.fn_sig()\n-        };\n-\n-        let fn_ret = fn_sig.output();\n-\n-        // within the fn body, late-bound regions are liberated\n-        // and must outlive the *call-site* of the function.\n-        let fn_ret =\n-            self.ir.tcx.liberate_late_bound_regions(\n-                self.ir.tcx.region_maps.call_site_extent(id, body.value.id),\n-                &fn_ret);\n-\n-        if !fn_ret.is_never() && self.live_on_entry(entry_ln, self.s.no_ret_var).is_some() {\n-            let param_env = ParameterEnvironment::for_item(self.ir.tcx, id);\n-            let t_ret_subst = fn_ret.subst(self.ir.tcx, &param_env.free_substs);\n-            let is_nil = self.ir.tcx.infer_ctxt(param_env, Reveal::All).enter(|infcx| {\n-                let cause = traits::ObligationCause::dummy();\n-                traits::fully_normalize(&infcx, cause, &t_ret_subst).unwrap().is_nil()\n-            });\n-\n-            // for nil return types, it is ok to not return a value expl.\n-            if !is_nil {\n-                span_bug!(sp, \"not all control paths return a value\");\n-            }\n-        }\n-    }\n-\n     fn check_lvalue(&mut self, expr: &'tcx Expr) {\n         match expr.node {\n             hir::ExprPath(hir::QPath::Resolved(_, ref path)) => {"}, {"sha": "d0adf51d79e68675a59672003c9c96b4d31a54f6", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 30, "deletions": 29, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -70,6 +70,7 @@ pub use self::Note::*;\n \n use self::Aliasability::*;\n \n+use middle::region::RegionMaps;\n use hir::def_id::DefId;\n use hir::map as hir_map;\n use infer::InferCtxt;\n@@ -89,7 +90,7 @@ use std::rc::Rc;\n #[derive(Clone, PartialEq)]\n pub enum Categorization<'tcx> {\n     // temporary val, argument is its scope\n-    Rvalue(&'tcx ty::Region, &'tcx ty::Region),\n+    Rvalue(ty::Region<'tcx>, ty::Region<'tcx>),\n     StaticItem,\n     Upvar(Upvar),                          // upvar referenced by closure env\n     Local(ast::NodeId),                    // local variable\n@@ -114,13 +115,13 @@ pub enum PointerKind<'tcx> {\n     Unique,\n \n     /// `&T`\n-    BorrowedPtr(ty::BorrowKind, &'tcx ty::Region),\n+    BorrowedPtr(ty::BorrowKind, ty::Region<'tcx>),\n \n     /// `*T`\n     UnsafePtr(hir::Mutability),\n \n     /// Implicit deref of the `&T` that results from an overloaded index `[]`.\n-    Implicit(ty::BorrowKind, &'tcx ty::Region),\n+    Implicit(ty::BorrowKind, ty::Region<'tcx>),\n }\n \n // We use the term \"interior\" to mean \"something reachable from the\n@@ -286,9 +287,10 @@ impl ast_node for hir::Pat {\n     fn span(&self) -> Span { self.span }\n }\n \n-#[derive(Copy, Clone)]\n+#[derive(Clone)]\n pub struct MemCategorizationContext<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     pub infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,\n+    pub region_maps: &'a RegionMaps,\n     options: MemCategorizationOptions,\n }\n \n@@ -402,16 +404,22 @@ impl MutabilityCategory {\n }\n \n impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n-    pub fn new(infcx: &'a InferCtxt<'a, 'gcx, 'tcx>)\n+    /// Context should be the `DefId` we use to fetch region-maps.\n+    pub fn new(infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,\n+               region_maps: &'a RegionMaps)\n                -> MemCategorizationContext<'a, 'gcx, 'tcx> {\n-        MemCategorizationContext::with_options(infcx, MemCategorizationOptions::default())\n+        MemCategorizationContext::with_options(infcx,\n+                                               region_maps,\n+                                               MemCategorizationOptions::default())\n     }\n \n     pub fn with_options(infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,\n+                        region_maps: &'a RegionMaps,\n                         options: MemCategorizationOptions)\n                         -> MemCategorizationContext<'a, 'gcx, 'tcx> {\n         MemCategorizationContext {\n             infcx: infcx,\n+            region_maps: region_maps,\n             options: options,\n         }\n     }\n@@ -451,7 +459,10 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n                 // So peel off one-level, turning the &T into T.\n                 match base_ty.builtin_deref(false, ty::NoPreference) {\n                     Some(t) => t.ty,\n-                    None => { return Err(()); }\n+                    None => {\n+                        debug!(\"By-ref binding of non-derefable type {:?}\", base_ty);\n+                        return Err(());\n+                    }\n                 }\n             }\n             _ => base_ty,\n@@ -774,26 +785,12 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n                  cmt_result: cmt_<'tcx>)\n                  -> cmt_<'tcx>\n     {\n-        // Look up the node ID of the closure body so we can construct\n-        // a free region within it\n-        let fn_body_id = {\n-            let fn_expr = match self.tcx().hir.find(upvar_id.closure_expr_id) {\n-                Some(hir_map::NodeExpr(e)) => e,\n-                _ => bug!()\n-            };\n-\n-            match fn_expr.node {\n-                hir::ExprClosure(.., body_id, _) => body_id.node_id,\n-                _ => bug!()\n-            }\n-        };\n-\n         // Region of environment pointer\n         let env_region = self.tcx().mk_region(ty::ReFree(ty::FreeRegion {\n             // The environment of a closure is guaranteed to\n             // outlive any bindings introduced in the body of the\n             // closure itself.\n-            scope: self.tcx().region_maps.item_extent(fn_body_id),\n+            scope: self.tcx().hir.local_def_id(upvar_id.closure_expr_id),\n             bound_region: ty::BrEnv\n         }));\n \n@@ -839,10 +836,10 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n \n     /// Returns the lifetime of a temporary created by expr with id `id`.\n     /// This could be `'static` if `id` is part of a constant expression.\n-    pub fn temporary_scope(&self, id: ast::NodeId) -> (&'tcx ty::Region, &'tcx ty::Region)\n+    pub fn temporary_scope(&self, id: ast::NodeId) -> (ty::Region<'tcx>, ty::Region<'tcx>)\n     {\n         let (scope, old_scope) =\n-            self.tcx().region_maps.old_and_new_temporary_scope(id);\n+            self.region_maps.old_and_new_temporary_scope(id);\n         (self.tcx().mk_region(match scope {\n             Some(scope) => ty::ReScope(scope),\n             None => ty::ReStatic\n@@ -884,8 +881,8 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n     pub fn cat_rvalue(&self,\n                       cmt_id: ast::NodeId,\n                       span: Span,\n-                      temp_scope: &'tcx ty::Region,\n-                      old_temp_scope: &'tcx ty::Region,\n+                      temp_scope: ty::Region<'tcx>,\n+                      old_temp_scope: ty::Region<'tcx>,\n                       expr_ty: Ty<'tcx>) -> cmt<'tcx> {\n         let ret = Rc::new(cmt_ {\n             id:cmt_id,\n@@ -1039,6 +1036,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n                 match base_cmt.ty.builtin_index() {\n                     Some(ty) => (ty, ElementKind::VecElement),\n                     None => {\n+                        debug!(\"Explicit index of non-indexable type {:?}\", base_cmt);\n                         return Err(());\n                     }\n                 }\n@@ -1154,12 +1152,15 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n             PatKind::TupleStruct(hir::QPath::Resolved(_, ref path), ..) |\n             PatKind::Struct(hir::QPath::Resolved(_, ref path), ..) => {\n                 match path.def {\n-                    Def::Err => return Err(()),\n+                    Def::Err => {\n+                        debug!(\"access to unresolvable pattern {:?}\", pat);\n+                        return Err(())\n+                    }\n                     Def::Variant(variant_did) |\n                     Def::VariantCtor(variant_did, ..) => {\n                         // univariant enums do not need downcasts\n                         let enum_did = self.tcx().parent_def_id(variant_did).unwrap();\n-                        if !self.tcx().lookup_adt_def(enum_did).is_univariant() {\n+                        if !self.tcx().adt_def(enum_did).is_univariant() {\n                             self.cat_downcast(pat, cmt.clone(), cmt.ty, variant_did)\n                         } else {\n                             cmt\n@@ -1177,7 +1178,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n             let expected_len = match def {\n                 Def::VariantCtor(def_id, CtorKind::Fn) => {\n                     let enum_def = self.tcx().parent_def_id(def_id).unwrap();\n-                    self.tcx().lookup_adt_def(enum_def).variant_with_id(def_id).fields.len()\n+                    self.tcx().adt_def(enum_def).variant_with_id(def_id).fields.len()\n                 }\n                 Def::StructCtor(_, CtorKind::Fn) => {\n                     match self.pat_ty(&pat)?.sty {"}, {"sha": "939d7364d9e06bcedb839db9af70948b6342a8b8", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd", "patch": "@@ -28,7 +28,6 @@ use util::nodemap::{NodeSet, FxHashSet};\n use syntax::abi::Abi;\n use syntax::ast;\n use syntax::attr;\n-use syntax::codemap::DUMMY_SP;\n use hir;\n use hir::def_id::LOCAL_CRATE;\n use hir::intravisit::{Visitor, NestedVisitorMap};\n@@ -50,7 +49,7 @@ fn item_might_be_inlined(item: &hir::Item) -> bool {\n     }\n \n     match item.node {\n-        hir::ItemImpl(_, _, ref generics, ..) |\n+        hir::ItemImpl(_, _, _, ref generics, ..) |\n         hir::ItemFn(.., ref generics, _) => {\n             generics_require_inlining(generics)\n         }\n@@ -186,7 +185,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n                             // does too.\n                             let impl_node_id = self.tcx.hir.as_local_node_id(impl_did).unwrap();\n                             match self.tcx.hir.expect_item(impl_node_id).node {\n-                                hir::ItemImpl(_, _, ref generics, ..) => {\n+                                hir::ItemImpl(_, _, _, ref generics, ..) => {\n                                     generics_require_inlining(generics)\n                                 }\n                                 _ => false\n@@ -364,13 +363,13 @@ impl<'a, 'tcx: 'a> ItemLikeVisitor<'tcx> for CollectPrivateImplItemsVisitor<'a,\n }\n \n pub fn find_reachable<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Rc<NodeSet> {\n-    ty::queries::reachable_set::get(tcx, DUMMY_SP, LOCAL_CRATE)\n+    tcx.reachable_set(LOCAL_CRATE)\n }\n \n fn reachable_set<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, crate_num: CrateNum) -> Rc<NodeSet> {\n     debug_assert!(crate_num == LOCAL_CRATE);\n \n-    let access_levels = &ty::queries::privacy_access_levels::get(tcx, DUMMY_SP, LOCAL_CRATE);\n+    let access_levels = &tcx.privacy_access_levels(LOCAL_CRATE);\n \n     let any_library = tcx.sess.crate_types.borrow().iter().any(|ty| {\n         *ty == config::CrateTypeRlib || *ty == config::CrateTypeDylib ||"}, {"sha": "2d632e3feb5457de6b463f62e84160cb362f19ce", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd"}, {"sha": "7d7308d73bb048a2b5ed81d8e1166d4606e1788b", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd"}, {"sha": "d74877e355a7946c0d1bed885a397e2ce9b68908", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 62, "deletions": 27, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd"}, {"sha": "e8ed8bf104cc8892fd60416a4fe752abff12ea48", "filename": "src/librustc/mir/README.md", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fmir%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fmir%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2FREADME.md?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd"}, {"sha": "fe2ad498e99610635faf0a4889717dc7a7422904", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd"}, {"sha": "7bc1dc58c29d298ed84a42b603973487732efef2", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd"}, {"sha": "aa91123ef6952ac044781b2aac0369725292fd5e", "filename": "src/librustc/mir/transform.rs", "status": "modified", "additions": 90, "deletions": 97, "changes": 187, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fmir%2Ftransform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fmir%2Ftransform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftransform.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd"}, {"sha": "557fedadeba62155cb0a6cb1ce5767b68f76b35b", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd"}, {"sha": "7cb5f2510d5c7acdc363048165bca73f44d2d85d", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 61, "deletions": 75, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd"}, {"sha": "47b988a21b4c1d402628ff043556310704bd3b7c", "filename": "src/librustc/session/filesearch.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fsession%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fsession%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Ffilesearch.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd"}, {"sha": "814246330a4c2f7b8da5e640ebbb536c83910423", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 37, "deletions": 72, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd"}, {"sha": "3c7761c6cd3bcf338373f2a5c278e5af96666048", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 129, "deletions": 26, "changes": 155, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd"}, {"sha": "e8baaa7ffb26d01a59f705e28d7bc2ece9df2707", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd"}, {"sha": "1823373348badfb8ef177602d852f4ed29ff0217", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 38, "deletions": 14, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd"}, {"sha": "0e3a53129d157fe2af455cacd25a59597c87b22f", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 21, "deletions": 27, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd"}, {"sha": "d7911870f391a541dfd36297c3437999350603b1", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 91, "deletions": 130, "changes": 221, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd"}, {"sha": "cccc20e5b296bd692fdd23ec52144512fd942582", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd"}, {"sha": "0e5779f9d17935b291fc1d72aec74fd879166c0f", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 65, "deletions": 10, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd"}, {"sha": "87c98a0ef0ed6daf16839d7a96f712dd99bde1f4", "filename": "src/librustc/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd"}, {"sha": "3f5cf7eca53077bd48c8900e3093d33b3b9799b2", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 31, "deletions": 5, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd"}, {"sha": "f86c1cf0dd6aba156797dbee12c82d45786ac2a1", "filename": "src/librustc/ty/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fty%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fty%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2F_match.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd"}, {"sha": "385591e10f744c9052d3cfa8b37a178cd6c3a7b7", "filename": "src/librustc/ty/adjustment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fty%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fty%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fadjustment.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd"}, {"sha": "b9355c264b3ef49d85c7f1d392645d7b3c6ef3ee", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 70, "deletions": 49, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd"}, {"sha": "d6804976e84c540298976c5aac4578b362ab9f95", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd"}, {"sha": "686b99ba680942eb734f8c1578b7ca648d849eac", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd"}, {"sha": "6de3c018bda0ebe8223760d6d7eb282553712540", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 22, "deletions": 39, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd"}, {"sha": "7dca28df9da39ca006602d68ec229c133002bf5b", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd"}, {"sha": "16d5d1187fc8bf5de52ee2b6cd934f5e709f8896", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 36, "deletions": 14, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd"}, {"sha": "bd38a6c3fd39a6edad843f3053b95fe8b4325ea4", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd"}, {"sha": "85462bd9b1273ca2a40946ace10c0355abcb9212", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 473, "deletions": 81, "changes": 554, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd"}, {"sha": "359722ce96ec9786f0131c197805fac38806bfe7", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 262, "deletions": 419, "changes": 681, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd"}, {"sha": "ab1b1b3857d0035c81695027d48a439a2cc86813", "filename": "src/librustc/ty/outlives.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fty%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fty%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Foutlives.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd"}, {"sha": "bbe682e74bc04b6dcfe920808d1faae0df10b883", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 27, "deletions": 34, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd"}, {"sha": "0b0818888812f1700db4c8d4caf8b115b1e1ba3d", "filename": "src/librustc/ty/steal.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fty%2Fsteal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fty%2Fsteal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsteal.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd"}, {"sha": "53d516e581b2a153b05b94e0fb6078c774fc2eb6", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd"}, {"sha": "348d164af4190af2d12ba7592cdfb06bf8b8b0c7", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 57, "deletions": 39, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd"}, {"sha": "e23003bf772f2d284b33ad59ca63db7d16ddcd9d", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd"}, {"sha": "86774136bd6cbc0c07741dd3c83b22b4a8ee8395", "filename": "src/librustc/ty/trait_def.rs", "status": "modified", "additions": 142, "deletions": 252, "changes": 394, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ftrait_def.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd"}, {"sha": "c6c6a0e47003dbb40777d056b2ade638c6259eb7", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 47, "deletions": 31, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd"}, {"sha": "d0cbbaf2c10bf391b803f0a7ff6b4cbdd74c6c54", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd"}, {"sha": "17564671a1e364f45eed26442e33e6b9e8231b06", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd"}, {"sha": "8ca699339d36ecedca7a92a3e785b51fffb248bf", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd"}, {"sha": "3a80baa0485f56cf15b32243f61d960f340d2996", "filename": "src/librustc_asan/build.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc_asan%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc_asan%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_asan%2Fbuild.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd"}, {"sha": "e6f305c22b2d4f621a1b7ecc0c4ac2ddd8fb261a", "filename": "src/librustc_back/dynamic_lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc_back%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc_back%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fdynamic_lib.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd"}, {"sha": "69eabfe2ac0bf70c176f02e5fb23b59e1817142b", "filename": "src/librustc_back/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc_back%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc_back%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Flib.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd"}, {"sha": "6bfe90af2ca167e398cf64f3a660f1139e6616c2", "filename": "src/librustc_back/target/arm_linux_androideabi.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc_back%2Ftarget%2Farm_linux_androideabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc_back%2Ftarget%2Farm_linux_androideabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farm_linux_androideabi.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd"}, {"sha": "b49b1d1c2138ab43179f9db651dbaaed2ecccefd", "filename": "src/librustc_back/target/armv7_linux_androideabi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc_back%2Ftarget%2Farmv7_linux_androideabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc_back%2Ftarget%2Farmv7_linux_androideabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farmv7_linux_androideabi.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd"}, {"sha": "8e7f463563c38e947d1775cde793d35cfac86aa1", "filename": "src/librustc_back/target/haiku_base.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc_back%2Ftarget%2Fhaiku_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc_back%2Ftarget%2Fhaiku_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fhaiku_base.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd"}, {"sha": "23558d82883423266f399ad98173c0f78f8cb21a", "filename": "src/librustc_bitflags/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc_bitflags%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc_bitflags%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_bitflags%2Flib.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd"}, {"sha": "eeb5a3fb957fa481f7a2ad4dc15f80b77f529950", "filename": "src/librustc_borrowck/borrowck/check_loans.rs", "status": "modified", "additions": 34, "deletions": 36, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd"}, {"sha": "f193588dd7d6c605e77849de7abd94b2c249d2e2", "filename": "src/librustc_borrowck/borrowck/gather_loans/gather_moves.rs", "status": "modified", "additions": 69, "deletions": 6, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd"}, {"sha": "5fc5682a60b456c38ba9f22e5745839b3e3cd6b5", "filename": "src/librustc_borrowck/borrowck/gather_loans/lifetime.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Flifetime.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd"}, {"sha": "4cfee36359cd7576522dc4a871cbf339741b5d24", "filename": "src/librustc_borrowck/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd"}, {"sha": "1ee6d565d0d7debd0718f06e5382d62f7b3cc776", "filename": "src/librustc_borrowck/borrowck/gather_loans/move_error.rs", "status": "modified", "additions": 37, "deletions": 15, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627ef228c1396c045b3e9f24edaf66b76516cbd/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs?ref=6627ef228c1396c045b3e9f24edaf66b76516cbd"}]}