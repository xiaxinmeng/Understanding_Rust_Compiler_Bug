{"sha": "5fbb1354ce9c88c689cd11e127755f0cd3cf96af", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmYmIxMzU0Y2U5Yzg4YzY4OWNkMTFlMTI3NzU1ZjBjZDNjZjk2YWY=", "commit": {"author": {"name": "Albin Hedman", "email": "albin9604@gmail.com", "date": "2021-06-14T15:29:22Z"}, "committer": {"name": "Albin Hedman", "email": "albin9604@gmail.com", "date": "2021-06-27T10:05:16Z"}, "message": "Revert \"Revert effects of PRs 81167 and 83091.\"\n\nThis reverts commit 9d96b0ed8c0f37bc09e737e1ab5880e8f5dd43f2.", "tree": {"sha": "087913c8877cebbd66a71f770197685be51725fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/087913c8877cebbd66a71f770197685be51725fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5fbb1354ce9c88c689cd11e127755f0cd3cf96af", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEeQ9lb2ZjsXFBDRuFH1AezRu9cKcFAmDYTVwACgkQH1AezRu9\ncKfmExAAlx8F7OMpxzAOUXNJDryM1wNCB/s/Z9MuldTjWzchjetfxY7Vu9cmKwvb\np7GKs57rai1of2FY4hM9w/1Kbt/NxlECmI8fbBNzoXJK1bMWiBiZwzaphOCbcv3x\ntrX2QWu9/GXhe8oAM/2OO4XXQccRK/uov68cGboRg/NQSvJpPzmgHq4/MRcKtrk5\nP70ZUxPEhTJI7UBDYMoifiGIFsp8++28NkUhKHexkld2T4UwntvvjF5LE5KZs+Yv\nw0arLsKS7GffjZWdyqv7XCoEmV1+yazKp/zINrWExkKsYJxMXRiQuvv4bDFtAaiJ\n1T7K59dpq/I2nSOIfRwKapNv6y/cBu9lqgOxmTTxzXN74Q7G6zsT+Ii/j6ntqMpZ\niBDh4Y+XpoxpQHhPDjRiZPVDY/Xoqye+EyCocBRoMuOuhrgi5Q4Rn9ClvosOViix\nfmZ67PJnXc9SwnTo6h1j80MU238Ij6+gdXkfyPUGUUkwpdbRAb4icRFTyYbMdA0t\n6DLOghprCqv4KqcLJxy4vrv/7xXBEbNaYn4b+ZoBp4G8Qdp9J9mLKFLLB7DYCizY\nbYTvPX0VFE7VVLsAQpmlZ2lHO7hcSfgFPQCNcOQi+7necMtjF/M13ayLu/AdSvAP\nebkEddAyHlwumW64O6CRfMe9Z36Oj2xzh6Eh60G2WBd2GZ+n/oI=\n=QAKF\n-----END PGP SIGNATURE-----", "payload": "tree 087913c8877cebbd66a71f770197685be51725fe\nparent 543ab9964065dc2b4e47d7bff5e83c84519f265e\nauthor Albin Hedman <albin9604@gmail.com> 1623684562 +0200\ncommitter Albin Hedman <albin9604@gmail.com> 1624788316 +0200\n\nRevert \"Revert effects of PRs 81167 and 83091.\"\n\nThis reverts commit 9d96b0ed8c0f37bc09e737e1ab5880e8f5dd43f2.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5fbb1354ce9c88c689cd11e127755f0cd3cf96af", "html_url": "https://github.com/rust-lang/rust/commit/5fbb1354ce9c88c689cd11e127755f0cd3cf96af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5fbb1354ce9c88c689cd11e127755f0cd3cf96af/comments", "author": {"login": "usbalbin", "id": 10927717, "node_id": "MDQ6VXNlcjEwOTI3NzE3", "avatar_url": "https://avatars.githubusercontent.com/u/10927717?v=4", "gravatar_id": "", "url": "https://api.github.com/users/usbalbin", "html_url": "https://github.com/usbalbin", "followers_url": "https://api.github.com/users/usbalbin/followers", "following_url": "https://api.github.com/users/usbalbin/following{/other_user}", "gists_url": "https://api.github.com/users/usbalbin/gists{/gist_id}", "starred_url": "https://api.github.com/users/usbalbin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/usbalbin/subscriptions", "organizations_url": "https://api.github.com/users/usbalbin/orgs", "repos_url": "https://api.github.com/users/usbalbin/repos", "events_url": "https://api.github.com/users/usbalbin/events{/privacy}", "received_events_url": "https://api.github.com/users/usbalbin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "usbalbin", "id": 10927717, "node_id": "MDQ6VXNlcjEwOTI3NzE3", "avatar_url": "https://avatars.githubusercontent.com/u/10927717?v=4", "gravatar_id": "", "url": "https://api.github.com/users/usbalbin", "html_url": "https://github.com/usbalbin", "followers_url": "https://api.github.com/users/usbalbin/followers", "following_url": "https://api.github.com/users/usbalbin/following{/other_user}", "gists_url": "https://api.github.com/users/usbalbin/gists{/gist_id}", "starred_url": "https://api.github.com/users/usbalbin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/usbalbin/subscriptions", "organizations_url": "https://api.github.com/users/usbalbin/orgs", "repos_url": "https://api.github.com/users/usbalbin/repos", "events_url": "https://api.github.com/users/usbalbin/events{/privacy}", "received_events_url": "https://api.github.com/users/usbalbin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "543ab9964065dc2b4e47d7bff5e83c84519f265e", "url": "https://api.github.com/repos/rust-lang/rust/commits/543ab9964065dc2b4e47d7bff5e83c84519f265e", "html_url": "https://github.com/rust-lang/rust/commit/543ab9964065dc2b4e47d7bff5e83c84519f265e"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "5bf47c3951da22ff93397bf17e8abf315bf089c2", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fbb1354ce9c88c689cd11e127755f0cd3cf96af/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fbb1354ce9c88c689cd11e127755f0cd3cf96af/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=5fbb1354ce9c88c689cd11e127755f0cd3cf96af", "patch": "@@ -682,7 +682,8 @@ pub unsafe fn uninitialized<T>() -> T {\n /// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub fn swap<T>(x: &mut T, y: &mut T) {\n+#[rustc_const_unstable(feature = \"const_swap\", issue = \"83163\")]\n+pub const fn swap<T>(x: &mut T, y: &mut T) {\n     // SAFETY: the raw pointers have been created from safe mutable references satisfying all the\n     // constraints on `ptr::swap_nonoverlapping_one`\n     unsafe {\n@@ -812,7 +813,8 @@ pub fn take<T: Default>(dest: &mut T) -> T {\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[must_use = \"if you don't need the old value, you can just assign the new value directly\"]\n-pub fn replace<T>(dest: &mut T, src: T) -> T {\n+#[rustc_const_unstable(feature = \"const_replace\", issue = \"83164\")]\n+pub const fn replace<T>(dest: &mut T, src: T) -> T {\n     // SAFETY: We read from `dest` but directly write `src` into it afterwards,\n     // such that the old value is not duplicated. Nothing is dropped and\n     // nothing here can panic."}, {"sha": "af28c8be6dd71a1407e3a0fe6b9d30b14331160b", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5fbb1354ce9c88c689cd11e127755f0cd3cf96af/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fbb1354ce9c88c689cd11e127755f0cd3cf96af/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=5fbb1354ce9c88c689cd11e127755f0cd3cf96af", "patch": "@@ -430,7 +430,8 @@ pub const unsafe fn swap_nonoverlapping<T>(x: *mut T, y: *mut T, count: usize) {\n }\n \n #[inline]\n-pub(crate) unsafe fn swap_nonoverlapping_one<T>(x: *mut T, y: *mut T) {\n+#[rustc_const_unstable(feature = \"const_swap\", issue = \"83163\")]\n+pub(crate) const unsafe fn swap_nonoverlapping_one<T>(x: *mut T, y: *mut T) {\n     // NOTE(eddyb) SPIR-V's Logical addressing model doesn't allow for arbitrary\n     // reinterpretation of values as (chunkable) byte arrays, and the loop in the\n     // block optimization in `swap_nonoverlapping_bytes` is hard to rewrite back\n@@ -563,7 +564,8 @@ const unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {\n /// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub unsafe fn replace<T>(dst: *mut T, mut src: T) -> T {\n+#[rustc_const_unstable(feature = \"const_replace\", issue = \"83164\")]\n+pub const unsafe fn replace<T>(dst: *mut T, mut src: T) -> T {\n     // SAFETY: the caller must guarantee that `dst` is valid to be\n     // cast to a mutable reference (valid for writes, aligned, initialized),\n     // and cannot overlap `src` since `dst` must point to a distinct\n@@ -869,10 +871,12 @@ pub const unsafe fn read_unaligned<T>(src: *const T) -> T {\n /// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub unsafe fn write<T>(dst: *mut T, src: T) {\n+#[rustc_const_unstable(feature = \"const_ptr_write\", issue = \"none\")]\n+pub const unsafe fn write<T>(dst: *mut T, src: T) {\n     // We are calling the intrinsics directly to avoid function calls in the generated code\n     // as `intrinsics::copy_nonoverlapping` is a wrapper function.\n     extern \"rust-intrinsic\" {\n+        #[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"none\")]\n         fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);\n     }\n "}, {"sha": "750279ac0dbdc8e0d493122446e5725eab3098c5", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5fbb1354ce9c88c689cd11e127755f0cd3cf96af/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fbb1354ce9c88c689cd11e127755f0cd3cf96af/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=5fbb1354ce9c88c689cd11e127755f0cd3cf96af", "patch": "@@ -1002,8 +1002,9 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// [`ptr::write`]: crate::ptr::write()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n+    #[rustc_const_unstable(feature = \"const_ptr_write\", issue = \"none\")]\n     #[inline(always)]\n-    pub unsafe fn write(self, val: T)\n+    pub const unsafe fn write(self, val: T)\n     where\n         T: Sized,\n     {"}]}