{"sha": "f04eb37c7ea19bbd2cff12d15816873e0a46fc86", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwNGViMzdjN2VhMTliYmQyY2ZmMTJkMTU4MTY4NzNlMGE0NmZjODY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-10T07:52:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-10T07:52:52Z"}, "message": "auto merge of #6347 : cmr/rust/unknown_module_resolve_error, r=catamorphism\n\nThis improves error reporting for the following class of imports:\r\n\r\n```rust\r\nuse foo::bar;\r\n```\r\n\r\nWhere foo, the topmost module, is unresolved. It now results in:\r\n\r\n```text\r\n/tmp/foo.rs:1:4: 1:7 error: unresolved import.  perhapsyou forgot an 'extern mod foo'?\r\n/tmp/foo.rs:1 use foo::bar;\r\n                  ^~~\r\n/tmp/foo.rs:1:4: 1:12 error: failed to resolve import: foo::bar\r\n/tmp/foo.rs:1 use foo::bar;\r\n                  ^~~~~~~~\r\nerror: failed to resolve imports\r\nerror: aborting due to 3 previous errors\r\n```\r\n\r\nThis is the first of a series of changes I plan on making to unresolved name error messages.", "tree": {"sha": "3ea97645b871233c86ff8603e71c096a13d8a6af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ea97645b871233c86ff8603e71c096a13d8a6af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f04eb37c7ea19bbd2cff12d15816873e0a46fc86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f04eb37c7ea19bbd2cff12d15816873e0a46fc86", "html_url": "https://github.com/rust-lang/rust/commit/f04eb37c7ea19bbd2cff12d15816873e0a46fc86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f04eb37c7ea19bbd2cff12d15816873e0a46fc86/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e106cf2c2556be6bbcd9a93e5ef2a73b98f0e7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e106cf2c2556be6bbcd9a93e5ef2a73b98f0e7a", "html_url": "https://github.com/rust-lang/rust/commit/3e106cf2c2556be6bbcd9a93e5ef2a73b98f0e7a"}, {"sha": "9cbab89076c48bffd966303a1cf2856df2b00dcc", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cbab89076c48bffd966303a1cf2856df2b00dcc", "html_url": "https://github.com/rust-lang/rust/commit/9cbab89076c48bffd966303a1cf2856df2b00dcc"}], "stats": {"total": 26, "additions": 24, "deletions": 2}, "files": [{"sha": "3d4bd0256bcc678eb2c7985fcbb8f1b9b78b1baa", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f04eb37c7ea19bbd2cff12d15816873e0a46fc86/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f04eb37c7ea19bbd2cff12d15816873e0a46fc86/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=f04eb37c7ea19bbd2cff12d15816873e0a46fc86", "patch": "@@ -64,7 +64,7 @@ use syntax::attr::{attr_metas, contains_name, attrs_contains_name};\n use syntax::parse::token::ident_interner;\n use syntax::parse::token::special_idents;\n use syntax::print::pprust::path_to_str;\n-use syntax::codemap::{span, dummy_sp};\n+use syntax::codemap::{span, dummy_sp, BytePos};\n use syntax::visit::{default_visitor, mk_vt, Visitor, visit_block};\n use syntax::visit::{visit_crate, visit_expr, visit_expr_opt};\n use syntax::visit::{visit_foreign_item, visit_item};\n@@ -2482,6 +2482,16 @@ pub impl Resolver {\n                                               TypeNS,\n                                               name_search_type) {\n                 Failed => {\n+                    let segment_name = self.session.str_of(name);\n+                    let module_name = self.module_to_str(search_module);\n+                    if module_name == ~\"???\" {\n+                        self.session.span_err(span {lo: span.lo, hi: span.lo +\n+                                              BytePos(str::len(*segment_name)), expn_info:\n+                                              span.expn_info}, fmt!(\"unresolved import. maybe \\\n+                                                                    a missing 'extern mod %s'?\",\n+                                                                    *segment_name));\n+                        return Failed;\n+                    }\n                     self.session.span_err(span, ~\"unresolved name\");\n                     return Failed;\n                 }"}, {"sha": "71b319a27d073914b6e63f6d52cf0a76cf2de00f", "filename": "src/test/compile-fail/issue-1697.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f04eb37c7ea19bbd2cff12d15816873e0a46fc86/src%2Ftest%2Fcompile-fail%2Fissue-1697.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f04eb37c7ea19bbd2cff12d15816873e0a46fc86/src%2Ftest%2Fcompile-fail%2Fissue-1697.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1697.rs?ref=f04eb37c7ea19bbd2cff12d15816873e0a46fc86", "patch": "@@ -10,7 +10,7 @@\n \n // Testing that we don't fail abnormally after hitting the errors\n \n-use unresolved::*; //~ ERROR unresolved name\n+use unresolved::*; //~ ERROR unresolved import. maybe a missing\n //~^ ERROR failed to resolve import\n \n fn main() {"}, {"sha": "1bd3efeadcbba2687e97fa5c24aebac62172fe70", "filename": "src/test/compile-fail/unresolved-import.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f04eb37c7ea19bbd2cff12d15816873e0a46fc86/src%2Ftest%2Fcompile-fail%2Funresolved-import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f04eb37c7ea19bbd2cff12d15816873e0a46fc86/src%2Ftest%2Fcompile-fail%2Funresolved-import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funresolved-import.rs?ref=f04eb37c7ea19bbd2cff12d15816873e0a46fc86", "patch": "@@ -0,0 +1,12 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use foo::bar; //~ ERROR unresolved import. maybe a missing\n+              //~^ ERROR failed to resolve import"}]}