{"sha": "25ade6910c593f5cddf079c8ff7f16941dd3814a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1YWRlNjkxMGM1OTNmNWNkZGYwNzljOGZmN2YxNjk0MWRkMzgxNGE=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-03-29T22:32:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-29T22:32:22Z"}, "message": "Rollup merge of #83543 - camelid:lint-unknown-disambiguator, r=jyn514\n\nLint on unknown intra-doc link disambiguators", "tree": {"sha": "ac3cd464d5bacdbb9a16b684e36f5a06f3e2da3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac3cd464d5bacdbb9a16b684e36f5a06f3e2da3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25ade6910c593f5cddf079c8ff7f16941dd3814a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgYlV2CRBK7hj4Ov3rIwAAdHIIAFlXwnm3vwzF751luceDToY/\nYMddPM80nILweHuOcjo/0Vwm/9MrJvumd0e1xn7OqsycBRb+ZCQnBg3dShCU9okX\nUjSpr7osOscmxgNTPpOjN/dyezXHz96kg+nIPPFoEqXITPKzlk46OYyYP8MS927v\nkrV98uzAtA4Vbf7SgQyD5ZV8HP+U10iqs9ultTUYOGLxKNNThlFF2YVCQUtmq0rY\nvwi0E69tp3KYG3ghMcBJTdr5jHXJByku7VlBfMp0+egIS+yNCpcYHHF0a1gqxWNe\nnbK/ku08ogDmMYdsxORkCWFSDO2C6mV1X7AFas6uRk56wupC3HKGiQeVjOen70Y=\n=shxH\n-----END PGP SIGNATURE-----\n", "payload": "tree ac3cd464d5bacdbb9a16b684e36f5a06f3e2da3e\nparent 772582e19ef366e4be686bfcfd65667dc033fe3a\nparent 141df6f60e28c83711db5a2a94d5c4ff5e9aecaa\nauthor Dylan DPC <dylan.dpc@gmail.com> 1617057142 +0200\ncommitter GitHub <noreply@github.com> 1617057142 +0200\n\nRollup merge of #83543 - camelid:lint-unknown-disambiguator, r=jyn514\n\nLint on unknown intra-doc link disambiguators\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25ade6910c593f5cddf079c8ff7f16941dd3814a", "html_url": "https://github.com/rust-lang/rust/commit/25ade6910c593f5cddf079c8ff7f16941dd3814a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25ade6910c593f5cddf079c8ff7f16941dd3814a/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "772582e19ef366e4be686bfcfd65667dc033fe3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/772582e19ef366e4be686bfcfd65667dc033fe3a", "html_url": "https://github.com/rust-lang/rust/commit/772582e19ef366e4be686bfcfd65667dc033fe3a"}, {"sha": "141df6f60e28c83711db5a2a94d5c4ff5e9aecaa", "url": "https://api.github.com/repos/rust-lang/rust/commits/141df6f60e28c83711db5a2a94d5c4ff5e9aecaa", "html_url": "https://github.com/rust-lang/rust/commit/141df6f60e28c83711db5a2a94d5c4ff5e9aecaa"}], "stats": {"total": 149, "additions": 123, "deletions": 26}, "files": [{"sha": "c44514ed3cb83bc2dd4f37215bec1d2b9d721bc7", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/25ade6910c593f5cddf079c8ff7f16941dd3814a/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ade6910c593f5cddf079c8ff7f16941dd3814a/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=25ade6910c593f5cddf079c8ff7f16941dd3814a", "patch": "@@ -1162,6 +1162,7 @@ crate fn plain_text_summary(md: &str) -> String {\n     s\n }\n \n+#[derive(Debug)]\n crate struct MarkdownLink {\n     pub kind: LinkType,\n     pub link: String,"}, {"sha": "55978ca551b05bb2de8984c2e75b43ecdb93090f", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 64, "deletions": 26, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/25ade6910c593f5cddf079c8ff7f16941dd3814a/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ade6910c593f5cddf079c8ff7f16941dd3814a/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=25ade6910c593f5cddf079c8ff7f16941dd3814a", "patch": "@@ -950,6 +950,7 @@ impl LinkCollector<'_, '_> {\n         }\n \n         let link = ori_link.link.replace(\"`\", \"\");\n+        let no_backticks_range = range_between_backticks(&ori_link);\n         let parts = link.split('#').collect::<Vec<_>>();\n         let (link, extra_fragment) = if parts.len() > 2 {\n             // A valid link can't have multiple #'s\n@@ -973,10 +974,15 @@ impl LinkCollector<'_, '_> {\n         };\n \n         // Parse and strip the disambiguator from the link, if present.\n-        let (mut path_str, disambiguator) = if let Ok((d, path)) = Disambiguator::from_str(&link) {\n-            (path.trim(), Some(d))\n-        } else {\n-            (link.trim(), None)\n+        let (mut path_str, disambiguator) = match Disambiguator::from_str(&link) {\n+            Ok(Some((d, path))) => (path.trim(), Some(d)),\n+            Ok(None) => (link.trim(), None),\n+            Err((err_msg, relative_range)) => {\n+                let disambiguator_range = (no_backticks_range.start + relative_range.start)\n+                    ..(no_backticks_range.start + relative_range.end);\n+                disambiguator_error(self.cx, &item, dox, disambiguator_range, &err_msg);\n+                return None;\n+            }\n         };\n \n         if path_str.contains(|ch: char| !(ch.is_alphanumeric() || \":_<>, !*&;\".contains(ch))) {\n@@ -1488,6 +1494,27 @@ impl LinkCollector<'_, '_> {\n     }\n }\n \n+/// Get the section of a link between the backticks,\n+/// or the whole link if there aren't any backticks.\n+///\n+/// For example:\n+///\n+/// ```text\n+/// [`Foo`]\n+///   ^^^\n+/// ```\n+fn range_between_backticks(ori_link: &MarkdownLink) -> Range<usize> {\n+    let after_first_backtick_group = ori_link.link.bytes().position(|b| b != b'`').unwrap_or(0);\n+    let before_second_backtick_group = ori_link\n+        .link\n+        .bytes()\n+        .skip(after_first_backtick_group)\n+        .position(|b| b == b'`')\n+        .unwrap_or(ori_link.link.len());\n+    (ori_link.range.start + after_first_backtick_group)\n+        ..(ori_link.range.start + before_second_backtick_group)\n+}\n+\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n /// Disambiguators for a link.\n enum Disambiguator {\n@@ -1514,27 +1541,14 @@ impl Disambiguator {\n         }\n     }\n \n-    /// Given a link, parse and return `(disambiguator, path_str)`\n-    fn from_str(link: &str) -> Result<(Self, &str), ()> {\n+    /// Given a link, parse and return `(disambiguator, path_str)`.\n+    ///\n+    /// This returns `Ok(Some(...))` if a disambiguator was found,\n+    /// `Ok(None)` if no disambiguator was found, or `Err(...)`\n+    /// if there was a problem with the disambiguator.\n+    fn from_str(link: &str) -> Result<Option<(Self, &str)>, (String, Range<usize>)> {\n         use Disambiguator::{Kind, Namespace as NS, Primitive};\n \n-        let find_suffix = || {\n-            let suffixes = [\n-                (\"!()\", DefKind::Macro(MacroKind::Bang)),\n-                (\"()\", DefKind::Fn),\n-                (\"!\", DefKind::Macro(MacroKind::Bang)),\n-            ];\n-            for &(suffix, kind) in &suffixes {\n-                if let Some(link) = link.strip_suffix(suffix) {\n-                    // Avoid turning `!` or `()` into an empty string\n-                    if !link.is_empty() {\n-                        return Ok((Kind(kind), link));\n-                    }\n-                }\n-            }\n-            Err(())\n-        };\n-\n         if let Some(idx) = link.find('@') {\n             let (prefix, rest) = link.split_at(idx);\n             let d = match prefix {\n@@ -1551,11 +1565,24 @@ impl Disambiguator {\n                 \"value\" => NS(Namespace::ValueNS),\n                 \"macro\" => NS(Namespace::MacroNS),\n                 \"prim\" | \"primitive\" => Primitive,\n-                _ => return find_suffix(),\n+                _ => return Err((format!(\"unknown disambiguator `{}`\", prefix), 0..idx)),\n             };\n-            Ok((d, &rest[1..]))\n+            Ok(Some((d, &rest[1..])))\n         } else {\n-            find_suffix()\n+            let suffixes = [\n+                (\"!()\", DefKind::Macro(MacroKind::Bang)),\n+                (\"()\", DefKind::Fn),\n+                (\"!\", DefKind::Macro(MacroKind::Bang)),\n+            ];\n+            for &(suffix, kind) in &suffixes {\n+                if let Some(link) = link.strip_suffix(suffix) {\n+                    // Avoid turning `!` or `()` into an empty string\n+                    if !link.is_empty() {\n+                        return Ok(Some((Kind(kind), link)));\n+                    }\n+                }\n+            }\n+            Ok(None)\n         }\n     }\n \n@@ -1979,6 +2006,17 @@ fn anchor_failure(\n     });\n }\n \n+/// Report an error in the link disambiguator.\n+fn disambiguator_error(\n+    cx: &DocContext<'_>,\n+    item: &Item,\n+    dox: &str,\n+    link_range: Range<usize>,\n+    msg: &str,\n+) {\n+    report_diagnostic(cx.tcx, BROKEN_INTRA_DOC_LINKS, msg, item, dox, &link_range, |_diag, _sp| {});\n+}\n+\n /// Report an ambiguity error, where there were multiple possible resolutions.\n fn ambiguity_error(\n     cx: &DocContext<'_>,"}, {"sha": "925fc515a3e657f31df6f1b662c32dc2dfc57a4d", "filename": "src/test/rustdoc-ui/intra-doc/unknown-disambiguator.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/25ade6910c593f5cddf079c8ff7f16941dd3814a/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Funknown-disambiguator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ade6910c593f5cddf079c8ff7f16941dd3814a/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Funknown-disambiguator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Funknown-disambiguator.rs?ref=25ade6910c593f5cddf079c8ff7f16941dd3814a", "patch": "@@ -0,0 +1,13 @@\n+#![deny(warnings)]\n+\n+//! Linking to [foo@banana] and [`bar@banana!()`].\n+//~^ ERROR unknown disambiguator `foo`\n+//~| ERROR unknown disambiguator `bar`\n+//! And to [no disambiguator](@nectarine) and [another](@apricot!()).\n+//~^ ERROR unknown disambiguator ``\n+//~| ERROR unknown disambiguator ``\n+//! And with weird backticks: [``foo@hello``] [foo`@`hello].\n+//~^ ERROR unknown disambiguator `foo`\n+//~| ERROR unknown disambiguator `foo`\n+\n+fn main() {}"}, {"sha": "195aaca32a27d860b1a4ac9eecddaeec966e73f7", "filename": "src/test/rustdoc-ui/intra-doc/unknown-disambiguator.stderr", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/25ade6910c593f5cddf079c8ff7f16941dd3814a/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Funknown-disambiguator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25ade6910c593f5cddf079c8ff7f16941dd3814a/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Funknown-disambiguator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Funknown-disambiguator.stderr?ref=25ade6910c593f5cddf079c8ff7f16941dd3814a", "patch": "@@ -0,0 +1,45 @@\n+error: unknown disambiguator `foo`\n+  --> $DIR/unknown-disambiguator.rs:3:17\n+   |\n+LL | //! Linking to [foo@banana] and [`bar@banana!()`].\n+   |                 ^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/unknown-disambiguator.rs:1:9\n+   |\n+LL | #![deny(warnings)]\n+   |         ^^^^^^^^\n+   = note: `#[deny(rustdoc::broken_intra_doc_links)]` implied by `#[deny(warnings)]`\n+\n+error: unknown disambiguator `bar`\n+  --> $DIR/unknown-disambiguator.rs:3:35\n+   |\n+LL | //! Linking to [foo@banana] and [`bar@banana!()`].\n+   |                                   ^^^\n+\n+error: unknown disambiguator `foo`\n+  --> $DIR/unknown-disambiguator.rs:9:34\n+   |\n+LL | //! And with weird backticks: [``foo@hello``] [foo`@`hello].\n+   |                                  ^^^\n+\n+error: unknown disambiguator `foo`\n+  --> $DIR/unknown-disambiguator.rs:9:48\n+   |\n+LL | //! And with weird backticks: [``foo@hello``] [foo`@`hello].\n+   |                                                ^^^\n+\n+error: unknown disambiguator ``\n+  --> $DIR/unknown-disambiguator.rs:6:31\n+   |\n+LL | //! And to [no disambiguator](@nectarine) and [another](@apricot!()).\n+   |                               ^\n+\n+error: unknown disambiguator ``\n+  --> $DIR/unknown-disambiguator.rs:6:57\n+   |\n+LL | //! And to [no disambiguator](@nectarine) and [another](@apricot!()).\n+   |                                                         ^\n+\n+error: aborting due to 6 previous errors\n+"}]}