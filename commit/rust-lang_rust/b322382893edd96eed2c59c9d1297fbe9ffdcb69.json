{"sha": "b322382893edd96eed2c59c9d1297fbe9ffdcb69", "node_id": "C_kwDOAAsO6NoAKGIzMjIzODI4OTNlZGQ5NmVlZDJjNTljOWQxMjk3ZmJlOWZmZGNiNjk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-22T11:16:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-22T11:16:32Z"}, "message": "Rollup merge of #94208 - est31:let_else, r=Mark-Simulacrum\n\nAdd the let else tests found missing in the stabilization report\n\nIn the stabilization report of `let else`, in #93628, I found various cases which weren't tested. This PR adds them.", "tree": {"sha": "7d2b5edc24a7b9b01a939e466b424b8c14336227", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d2b5edc24a7b9b01a939e466b424b8c14336227"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b322382893edd96eed2c59c9d1297fbe9ffdcb69", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiFMYRCRBK7hj4Ov3rIwAAsc0IADmU7NruQLUl7S/QxznBspk4\nQevQqhytcRRug0LSQODJu8XpvDTGLsVjF8vJrdP5faouaqb8ppT9Z0hLggSfE2q6\npZi6uQiO8e3LzWd7mmZH+k3A8xnY4EwkHvxk1cb+VWMvcJ0+KPeawCFXjG0mygbG\nuIXRxAZ/bN8e0gR19igI0zQ7ABIjUW10VH60ZQbwh48mD4eAhajnMFOur0guaqLQ\nUnYmIaA9SCQVQ6pUyG16iA3BGYrhbDLeAn771R52b7RVrjLMd2L4PnGETBm7zl/m\nEb5mFYjAYl/AlnyZRtIc0spezEzxnL8KoCUHCTcznu+ZXpo9oxcMOw56gEylgGs=\n=As2Z\n-----END PGP SIGNATURE-----\n", "payload": "tree 7d2b5edc24a7b9b01a939e466b424b8c14336227\nparent 1177b30ac9286d05721c8e804867498629e28a6b\nparent 5bd71063b3810d977aa376d1e6dd7cec359330cc\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1645528592 +0100\ncommitter GitHub <noreply@github.com> 1645528592 +0100\n\nRollup merge of #94208 - est31:let_else, r=Mark-Simulacrum\n\nAdd the let else tests found missing in the stabilization report\n\nIn the stabilization report of `let else`, in #93628, I found various cases which weren't tested. This PR adds them.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b322382893edd96eed2c59c9d1297fbe9ffdcb69", "html_url": "https://github.com/rust-lang/rust/commit/b322382893edd96eed2c59c9d1297fbe9ffdcb69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b322382893edd96eed2c59c9d1297fbe9ffdcb69/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1177b30ac9286d05721c8e804867498629e28a6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1177b30ac9286d05721c8e804867498629e28a6b", "html_url": "https://github.com/rust-lang/rust/commit/1177b30ac9286d05721c8e804867498629e28a6b"}, {"sha": "5bd71063b3810d977aa376d1e6dd7cec359330cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bd71063b3810d977aa376d1e6dd7cec359330cc", "html_url": "https://github.com/rust-lang/rust/commit/5bd71063b3810d977aa376d1e6dd7cec359330cc"}], "stats": {"total": 104, "additions": 100, "deletions": 4}, "files": [{"sha": "39f4c9060fea539e82a3b6bbdbbc2a1af9481c7d", "filename": "src/test/ui/let-else/let-else-allow-in-expr.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b322382893edd96eed2c59c9d1297fbe9ffdcb69/src%2Ftest%2Fui%2Flet-else%2Flet-else-allow-in-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b322382893edd96eed2c59c9d1297fbe9ffdcb69/src%2Ftest%2Fui%2Flet-else%2Flet-else-allow-in-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-allow-in-expr.rs?ref=b322382893edd96eed2c59c9d1297fbe9ffdcb69", "patch": "@@ -0,0 +1,30 @@\n+#![feature(let_else)]\n+\n+#![deny(unused_variables)]\n+\n+fn main() {\n+    let Some(_): Option<u32> = ({\n+        let x = 1; //~ ERROR unused variable: `x`\n+        Some(1)\n+    }) else {\n+        return;\n+    };\n+\n+    #[allow(unused_variables)]\n+    let Some(_): Option<u32> = ({\n+        let x = 1;\n+        Some(1)\n+    }) else {\n+        return;\n+    };\n+\n+    let Some(_): Option<u32> = ({\n+        #[allow(unused_variables)]\n+        let x = 1;\n+        Some(1)\n+    }) else {\n+        return;\n+    };\n+\n+    let x = 1; //~ ERROR unused variable: `x`\n+}"}, {"sha": "e86bcbc850029ee1c1d404401778aa41331c3413", "filename": "src/test/ui/let-else/let-else-allow-in-expr.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b322382893edd96eed2c59c9d1297fbe9ffdcb69/src%2Ftest%2Fui%2Flet-else%2Flet-else-allow-in-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b322382893edd96eed2c59c9d1297fbe9ffdcb69/src%2Ftest%2Fui%2Flet-else%2Flet-else-allow-in-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-allow-in-expr.stderr?ref=b322382893edd96eed2c59c9d1297fbe9ffdcb69", "patch": "@@ -0,0 +1,20 @@\n+error: unused variable: `x`\n+  --> $DIR/let-else-allow-in-expr.rs:7:13\n+   |\n+LL |         let x = 1;\n+   |             ^ help: if this is intentional, prefix it with an underscore: `_x`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/let-else-allow-in-expr.rs:3:9\n+   |\n+LL | #![deny(unused_variables)]\n+   |         ^^^^^^^^^^^^^^^^\n+\n+error: unused variable: `x`\n+  --> $DIR/let-else-allow-in-expr.rs:29:9\n+   |\n+LL |     let x = 1;\n+   |         ^ help: if this is intentional, prefix it with an underscore: `_x`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "86ebacfa7b7d1e0660fb58c68414eebb2a4ba156", "filename": "src/test/ui/let-else/let-else-allow-unused.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b322382893edd96eed2c59c9d1297fbe9ffdcb69/src%2Ftest%2Fui%2Flet-else%2Flet-else-allow-unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b322382893edd96eed2c59c9d1297fbe9ffdcb69/src%2Ftest%2Fui%2Flet-else%2Flet-else-allow-unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-allow-unused.rs?ref=b322382893edd96eed2c59c9d1297fbe9ffdcb69", "patch": "@@ -1,4 +1,3 @@\n-// check-pass\n // issue #89807\n \n #![feature(let_else)]\n@@ -10,5 +9,7 @@ fn main() {\n     #[allow(unused)]\n     let banana = 1;\n     #[allow(unused)]\n-    let Some(chaenomeles) = value else { return }; // OK\n+    let Some(chaenomeles) = value.clone() else { return }; // OK\n+\n+    let Some(chaenomeles) = value else { return }; //~ ERROR unused variable: `chaenomeles`\n }"}, {"sha": "05b8a9169fb70633b2ae9f8211285ef1a997a0ac", "filename": "src/test/ui/let-else/let-else-allow-unused.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b322382893edd96eed2c59c9d1297fbe9ffdcb69/src%2Ftest%2Fui%2Flet-else%2Flet-else-allow-unused.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b322382893edd96eed2c59c9d1297fbe9ffdcb69/src%2Ftest%2Fui%2Flet-else%2Flet-else-allow-unused.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-allow-unused.stderr?ref=b322382893edd96eed2c59c9d1297fbe9ffdcb69", "patch": "@@ -0,0 +1,14 @@\n+error: unused variable: `chaenomeles`\n+  --> $DIR/let-else-allow-unused.rs:14:14\n+   |\n+LL |     let Some(chaenomeles) = value else { return };\n+   |              ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_chaenomeles`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/let-else-allow-unused.rs:5:8\n+   |\n+LL | #[deny(unused_variables)]\n+   |        ^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "9e32cbef742a2fefdb9c5d4a9d582ef1393dfb30", "filename": "src/test/ui/let-else/let-else-check.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b322382893edd96eed2c59c9d1297fbe9ffdcb69/src%2Ftest%2Fui%2Flet-else%2Flet-else-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b322382893edd96eed2c59c9d1297fbe9ffdcb69/src%2Ftest%2Fui%2Flet-else%2Flet-else-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-check.rs?ref=b322382893edd96eed2c59c9d1297fbe9ffdcb69", "patch": "@@ -10,5 +10,10 @@ fn main() {\n         return;\n     };\n \n+    let Some(_): Option<u32> = Some(Default::default()) else {\n+        let x = 1; //~ ERROR unused variable: `x`\n+        return;\n+    };\n+\n     let x = 1; //~ ERROR unused variable: `x`\n }"}, {"sha": "b3da412ec280eb46ec11672af0317bede1dd21b8", "filename": "src/test/ui/let-else/let-else-check.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b322382893edd96eed2c59c9d1297fbe9ffdcb69/src%2Ftest%2Fui%2Flet-else%2Flet-else-check.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b322382893edd96eed2c59c9d1297fbe9ffdcb69/src%2Ftest%2Fui%2Flet-else%2Flet-else-check.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-check.stderr?ref=b322382893edd96eed2c59c9d1297fbe9ffdcb69", "patch": "@@ -1,5 +1,5 @@\n error: unused variable: `x`\n-  --> $DIR/let-else-check.rs:13:9\n+  --> $DIR/let-else-check.rs:18:9\n    |\n LL |     let x = 1;\n    |         ^ help: if this is intentional, prefix it with an underscore: `_x`\n@@ -10,5 +10,11 @@ note: the lint level is defined here\n LL | #![deny(unused_variables)]\n    |         ^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error: unused variable: `x`\n+  --> $DIR/let-else-check.rs:14:13\n+   |\n+LL |         let x = 1;\n+   |             ^ help: if this is intentional, prefix it with an underscore: `_x`\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "4022656a8f53dbcebfc64ab715fb1cd39ada538c", "filename": "src/test/ui/let-else/let-else-slicing-error.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b322382893edd96eed2c59c9d1297fbe9ffdcb69/src%2Ftest%2Fui%2Flet-else%2Flet-else-slicing-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b322382893edd96eed2c59c9d1297fbe9ffdcb69/src%2Ftest%2Fui%2Flet-else%2Flet-else-slicing-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-slicing-error.rs?ref=b322382893edd96eed2c59c9d1297fbe9ffdcb69", "patch": "@@ -0,0 +1,9 @@\n+// issue #92069\n+#![feature(let_else)]\n+\n+fn main() {\n+    let nums = vec![5, 4, 3, 2, 1];\n+    let [x, y] = nums else { //~ ERROR expected an array or slice\n+        return;\n+    };\n+}"}, {"sha": "064025e0345b7c8ebb13a73680cd78403d16a91b", "filename": "src/test/ui/let-else/let-else-slicing-error.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b322382893edd96eed2c59c9d1297fbe9ffdcb69/src%2Ftest%2Fui%2Flet-else%2Flet-else-slicing-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b322382893edd96eed2c59c9d1297fbe9ffdcb69/src%2Ftest%2Fui%2Flet-else%2Flet-else-slicing-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-slicing-error.stderr?ref=b322382893edd96eed2c59c9d1297fbe9ffdcb69", "patch": "@@ -0,0 +1,11 @@\n+error[E0529]: expected an array or slice, found `Vec<{integer}>`\n+  --> $DIR/let-else-slicing-error.rs:6:9\n+   |\n+LL |     let [x, y] = nums else {\n+   |         ^^^^^^   ---- help: consider slicing here: `nums[..]`\n+   |         |\n+   |         pattern cannot match with input type `Vec<{integer}>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0529`."}]}