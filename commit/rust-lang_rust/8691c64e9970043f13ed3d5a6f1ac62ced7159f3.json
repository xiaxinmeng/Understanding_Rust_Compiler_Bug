{"sha": "8691c64e9970043f13ed3d5a6f1ac62ced7159f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2OTFjNjRlOTk3MDA0M2YxM2VkM2Q1YTZmMWFjNjJjZWQ3MTU5ZjM=", "commit": {"author": {"name": "Ingvar Stepanyan", "email": "me@rreverser.com", "date": "2018-02-04T12:09:03Z"}, "committer": {"name": "Ingvar Stepanyan", "email": "me@rreverser.com", "date": "2018-02-04T12:09:03Z"}, "message": "cargo run cargo-fmt\n\nReformat codebase with current version to pass self_tests (formats macros without repetitions).", "tree": {"sha": "a8e31142f13fa429c2b77246556991b34c5228d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8e31142f13fa429c2b77246556991b34c5228d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8691c64e9970043f13ed3d5a6f1ac62ced7159f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8691c64e9970043f13ed3d5a6f1ac62ced7159f3", "html_url": "https://github.com/rust-lang/rust/commit/8691c64e9970043f13ed3d5a6f1ac62ced7159f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8691c64e9970043f13ed3d5a6f1ac62ced7159f3/comments", "author": {"login": "RReverser", "id": 557590, "node_id": "MDQ6VXNlcjU1NzU5MA==", "avatar_url": "https://avatars.githubusercontent.com/u/557590?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RReverser", "html_url": "https://github.com/RReverser", "followers_url": "https://api.github.com/users/RReverser/followers", "following_url": "https://api.github.com/users/RReverser/following{/other_user}", "gists_url": "https://api.github.com/users/RReverser/gists{/gist_id}", "starred_url": "https://api.github.com/users/RReverser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RReverser/subscriptions", "organizations_url": "https://api.github.com/users/RReverser/orgs", "repos_url": "https://api.github.com/users/RReverser/repos", "events_url": "https://api.github.com/users/RReverser/events{/privacy}", "received_events_url": "https://api.github.com/users/RReverser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RReverser", "id": 557590, "node_id": "MDQ6VXNlcjU1NzU5MA==", "avatar_url": "https://avatars.githubusercontent.com/u/557590?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RReverser", "html_url": "https://github.com/RReverser", "followers_url": "https://api.github.com/users/RReverser/followers", "following_url": "https://api.github.com/users/RReverser/following{/other_user}", "gists_url": "https://api.github.com/users/RReverser/gists{/gist_id}", "starred_url": "https://api.github.com/users/RReverser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RReverser/subscriptions", "organizations_url": "https://api.github.com/users/RReverser/orgs", "repos_url": "https://api.github.com/users/RReverser/repos", "events_url": "https://api.github.com/users/RReverser/events{/privacy}", "received_events_url": "https://api.github.com/users/RReverser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8c154f05254cf09bf15a14fdfdadb4f50fb9e55", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8c154f05254cf09bf15a14fdfdadb4f50fb9e55", "html_url": "https://github.com/rust-lang/rust/commit/d8c154f05254cf09bf15a14fdfdadb4f50fb9e55"}], "stats": {"total": 66, "additions": 34, "deletions": 32}, "files": [{"sha": "cca1779a4a8d0fb6d2f8b04df06c65dbe0ff710f", "filename": "src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8691c64e9970043f13ed3d5a6f1ac62ced7159f3/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8691c64e9970043f13ed3d5a6f1ac62ced7159f3/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=8691c64e9970043f13ed3d5a6f1ac62ced7159f3", "patch": "@@ -36,7 +36,7 @@ macro_rules! is_nightly_channel {\n         option_env!(\"CFG_RELEASE_CHANNEL\")\n             .map(|c| c == \"nightly\")\n             .unwrap_or(true)\n-    }\n+    };\n }\n \n macro_rules! configuration_option_enum{"}, {"sha": "3abfe6239fd0136d77fea8d5c0b4b69c918f2419", "filename": "src/macros.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8691c64e9970043f13ed3d5a6f1ac62ced7159f3/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8691c64e9970043f13ed3d5a6f1ac62ced7159f3/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=8691c64e9970043f13ed3d5a6f1ac62ced7159f3", "patch": "@@ -33,7 +33,8 @@ use syntax::util::ThinVec;\n use codemap::SpanUtils;\n use comment::{contains_comment, remove_trailing_white_spaces, FindUncommented};\n use expr::{rewrite_array, rewrite_call_inner};\n-use lists::{itemize_list, write_list, DefinitiveListTactic, ListFormatting, SeparatorPlace, SeparatorTactic};\n+use lists::{itemize_list, write_list, DefinitiveListTactic, ListFormatting, SeparatorPlace,\n+            SeparatorTactic};\n use rewrite::{Rewrite, RewriteContext};\n use shape::{Indent, Shape};\n use utils::{format_visibility, mk_sp};\n@@ -102,7 +103,7 @@ fn parse_macro_arg(parser: &mut Parser) -> Option<MacroArg> {\n                     parser.sess.span_diagnostic.reset_err_count();\n                 }\n             }\n-        }\n+        };\n     }\n \n     parse_macro_arg!(Expr, parse_expr);\n@@ -312,8 +313,8 @@ pub fn rewrite_macro_def(\n \n     let arm_shape = if multi_branch_style {\n         shape\n-        .block_indent(context.config.tab_spaces())\n-        .with_max_width(context.config)\n+            .block_indent(context.config.tab_spaces())\n+            .with_max_width(context.config)\n     } else {\n         shape\n     };\n@@ -743,7 +744,12 @@ struct MacroBranch {\n }\n \n impl MacroBranch {\n-    fn rewrite(&self, context: &RewriteContext, shape: Shape, multi_branch_style: bool) -> Option<String> {\n+    fn rewrite(\n+        &self,\n+        context: &RewriteContext,\n+        shape: Shape,\n+        multi_branch_style: bool,\n+    ) -> Option<String> {\n         // Only attempt to format function-like macros.\n         if self.args_paren_kind != DelimToken::Paren {\n             // FIXME(#1539): implement for non-sugared macros.\n@@ -807,10 +813,7 @@ impl MacroBranch {\n         // FIXME: this could be *much* more efficient.\n         for (old, new) in &substs {\n             if old_body.find(new).is_some() {\n-                debug!(\n-                    \"rewrite_macro_def: bailing matching variable: `{}`\",\n-                    new\n-                );\n+                debug!(\"rewrite_macro_def: bailing matching variable: `{}`\", new);\n                 return None;\n             }\n             new_body = new_body.replace(new, old);"}, {"sha": "a431f3a544a6e39e23a30a9c89bf93013765e3c4", "filename": "src/spanned.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8691c64e9970043f13ed3d5a6f1ac62ced7159f3/src%2Fspanned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8691c64e9970043f13ed3d5a6f1ac62ced7159f3/src%2Fspanned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fspanned.rs?ref=8691c64e9970043f13ed3d5a6f1ac62ced7159f3", "patch": "@@ -20,32 +20,30 @@ pub trait Spanned {\n }\n \n macro_rules! span_with_attrs_lo_hi {\n-    ($this:ident, $lo:expr, $hi:expr) => {\n-        {\n-            let attrs = outer_attributes(&$this.attrs);\n-            if attrs.is_empty() {\n-                mk_sp($lo, $hi)\n-            } else {\n-                mk_sp(attrs[0].span.lo(), $hi)\n-            }\n+    ($this: ident, $lo: expr, $hi: expr) => {{\n+        let attrs = outer_attributes(&$this.attrs);\n+        if attrs.is_empty() {\n+            mk_sp($lo, $hi)\n+        } else {\n+            mk_sp(attrs[0].span.lo(), $hi)\n         }\n-    }\n+    }};\n }\n \n macro_rules! span_with_attrs {\n-    ($this:ident) => {\n+    ($this: ident) => {\n         span_with_attrs_lo_hi!($this, $this.span.lo(), $this.span.hi())\n-    }\n+    };\n }\n \n macro_rules! implement_spanned {\n-    ($this:ty) => {\n+    ($this: ty) => {\n         impl Spanned for $this {\n             fn span(&self) -> Span {\n                 span_with_attrs!(self)\n             }\n         }\n-    }\n+    };\n }\n \n // Implement `Spanned` for structs with `attrs` field."}, {"sha": "443dc6c7a05edc558131a1e2842b86a372babfce", "filename": "src/utils.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8691c64e9970043f13ed3d5a6f1ac62ced7159f3/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8691c64e9970043f13ed3d5a6f1ac62ced7159f3/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=8691c64e9970043f13ed3d5a6f1ac62ced7159f3", "patch": "@@ -342,9 +342,9 @@ macro_rules! msg {\n // For format_missing and last_pos, need to use the source callsite (if applicable).\n // Required as generated code spans aren't guaranteed to follow on from the last span.\n macro_rules! source {\n-    ($this:ident, $sp: expr) => {\n+    ($this: ident, $sp: expr) => {\n         $sp.source_callsite()\n-    }\n+    };\n }\n \n pub fn mk_sp(lo: BytePos, hi: BytePos) -> Span {\n@@ -353,28 +353,29 @@ pub fn mk_sp(lo: BytePos, hi: BytePos) -> Span {\n \n // Return true if the given span does not intersect with file lines.\n macro_rules! out_of_file_lines_range {\n-    ($self:ident, $span:expr) => {\n-        !$self.config\n+    ($self: ident, $span: expr) => {\n+        !$self\n+            .config\n             .file_lines()\n             .intersects(&$self.codemap.lookup_line_range($span))\n-    }\n+    };\n }\n \n macro_rules! skip_out_of_file_lines_range {\n-    ($self:ident, $span:expr) => {\n+    ($self: ident, $span: expr) => {\n         if out_of_file_lines_range!($self, $span) {\n             return None;\n         }\n-    }\n+    };\n }\n \n macro_rules! skip_out_of_file_lines_range_visitor {\n-    ($self:ident, $span:expr) => {\n+    ($self: ident, $span: expr) => {\n         if out_of_file_lines_range!($self, $span) {\n             $self.push_rewrite($span, None);\n             return;\n         }\n-    }\n+    };\n }\n \n // Wraps String in an Option. Returns Some when the string adheres to the"}]}