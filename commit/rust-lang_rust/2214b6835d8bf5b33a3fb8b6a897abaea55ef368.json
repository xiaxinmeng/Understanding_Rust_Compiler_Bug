{"sha": "2214b6835d8bf5b33a3fb8b6a897abaea55ef368", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyMTRiNjgzNWQ4YmY1YjMzYTNmYjhiNmE4OTdhYmFlYTU1ZWYzNjg=", "commit": {"author": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-04-15T21:35:46Z"}, "committer": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-04-15T21:41:14Z"}, "message": "Add a -S option for producing assembly. I will move more of it to\nrust once the necessary APIs are available in C.", "tree": {"sha": "d6209d2e1dca535f4e0e5225108a6b8cb876c266", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6209d2e1dca535f4e0e5225108a6b8cb876c266"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2214b6835d8bf5b33a3fb8b6a897abaea55ef368", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2214b6835d8bf5b33a3fb8b6a897abaea55ef368", "html_url": "https://github.com/rust-lang/rust/commit/2214b6835d8bf5b33a3fb8b6a897abaea55ef368", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2214b6835d8bf5b33a3fb8b6a897abaea55ef368/comments", "author": null, "committer": null, "parents": [{"sha": "790084ced18ca391c30d8e1045c04cbf2111499e", "url": "https://api.github.com/repos/rust-lang/rust/commits/790084ced18ca391c30d8e1045c04cbf2111499e", "html_url": "https://github.com/rust-lang/rust/commit/790084ced18ca391c30d8e1045c04cbf2111499e"}], "stats": {"total": 88, "additions": 68, "deletions": 20}, "files": [{"sha": "d6f6f6944c471cd062831bad86c6ed32c0216d13", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2214b6835d8bf5b33a3fb8b6a897abaea55ef368/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2214b6835d8bf5b33a3fb8b6a897abaea55ef368/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=2214b6835d8bf5b33a3fb8b6a897abaea55ef368", "patch": "@@ -60,12 +60,12 @@ impure fn compile_input(session.session sess,\n                         str input, str output,\n                         bool shared,\n                         bool optimize,\n-                        bool parse_only,\n+                        trans.output_type ot,\n                         vec[str] library_search_paths) {\n     auto def = tup(0, 0);\n     auto p = parser.new_parser(sess, env, def, input, 0u);\n     auto crate = parse_input(sess, p, input);\n-    if (parse_only) {ret;}\n+    if (ot == trans.output_type_none) {ret;}\n     crate = creader.read_crates(sess, crate, library_search_paths);\n     crate = resolve.resolve_crate(sess, crate);\n     capture.check_for_captures(sess, crate);\n@@ -74,7 +74,8 @@ impure fn compile_input(session.session sess,\n     auto type_cache = typeck_result._1;\n     // FIXME: uncomment once typestate_check works\n     // crate = typestate_check.check_crate(crate);\n-    trans.trans_crate(sess, crate, type_cache, output, shared, optimize);\n+    trans.trans_crate(sess, crate, type_cache, output, shared, optimize,\n+                      ot);\n }\n \n impure fn pretty_print_input(session.session sess,\n@@ -137,7 +138,7 @@ impure fn main(vec[str] args) {\n     let bool shared = false;\n     let bool pretty = false;\n     let bool ls = false;\n-    let bool parse_only = false;\n+    auto ot = trans.output_type_bitcode;\n     let bool glue = false;\n \n     // FIXME: Maybe we should support -O0, -O1, -Os, etc\n@@ -163,7 +164,9 @@ impure fn main(vec[str] args) {\n             } else if (_str.eq(arg, \"-ls\")) {\n                 ls = true;\n             } else if (_str.eq(arg, \"-parse-only\")) {\n-                parse_only = true;\n+                ot = trans.output_type_none;\n+            } else if (_str.eq(arg, \"-S\")) {\n+                ot = trans.output_type_assembly;\n             } else if (_str.eq(arg, \"-o\")) {\n                 if (i+1u < len) {\n                     output_file = some(args.(i+1u));\n@@ -207,10 +210,10 @@ impure fn main(vec[str] args) {\n     if (glue) {\n         alt (output_file) {\n             case (none[str]) {\n-                middle.trans.make_common_glue(\"glue.bc\", optimize);\n+                middle.trans.make_common_glue(\"glue.bc\", optimize, ot);\n             }\n             case (some[str](?s)) {\n-                middle.trans.make_common_glue(s, optimize);\n+                middle.trans.make_common_glue(s, optimize, ot);\n             }\n         }\n         ret;\n@@ -236,12 +239,12 @@ impure fn main(vec[str] args) {\n                         parts += vec(\".bc\");\n                         auto ofile = _str.concat(parts);\n                         compile_input(sess, env, ifile, ofile, shared,\n-                                      optimize, parse_only,\n+                                      optimize, ot,\n                                       library_search_paths);\n                     }\n                     case (some[str](?ofile)) {\n                         compile_input(sess, env, ifile, ofile, shared,\n-                                      optimize, parse_only,\n+                                      optimize, ot,\n                                       library_search_paths);\n                     }\n                 }"}, {"sha": "8d0910d54d9c9433847144d5b143b5e2cd39762e", "filename": "src/comp/lib/llvm.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2214b6835d8bf5b33a3fb8b6a897abaea55ef368/src%2Fcomp%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2214b6835d8bf5b33a3fb8b6a897abaea55ef368/src%2Fcomp%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Flib%2Fllvm.rs?ref=2214b6835d8bf5b33a3fb8b6a897abaea55ef368", "patch": "@@ -815,6 +815,9 @@ native mod llvm = llvm_lib {\n     fn LLVMRustCreateMemoryBufferWithContentsOfFile(sbuf Path) ->\n         MemoryBufferRef;\n \n+    fn LLVMRustWriteAssembly(PassManagerRef PM, ModuleRef M,\n+                             sbuf Triple, sbuf Output);\n+\n     /** Returns a string describing the last error caused by an LLVMRust*\n         call. */\n     fn LLVMRustGetLastError() -> sbuf;"}, {"sha": "187265e96d65bdf6adb4ca2ef64455082bf048d0", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/2214b6835d8bf5b33a3fb8b6a897abaea55ef368/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2214b6835d8bf5b33a3fb8b6a897abaea55ef368/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=2214b6835d8bf5b33a3fb8b6a897abaea55ef368", "patch": "@@ -6675,8 +6675,14 @@ fn trap(@block_ctxt bcx) {\n     let vec[ValueRef] v = vec();\n     bcx.build.Call(bcx.fcx.ccx.intrinsics.get(\"llvm.trap\"), v);\n }\n+tag output_type {\n+    output_type_none;\n+    output_type_bitcode;\n+    output_type_assembly;\n+}\n \n-fn run_passes(ModuleRef llmod, bool opt) {\n+fn run_passes(ModuleRef llmod, bool opt, str output,\n+              output_type ot) {\n     auto pm = mk_pass_manager();\n \n     // TODO: run the linter here also, once there are llvm-c bindings for it.\n@@ -6741,7 +6747,18 @@ fn run_passes(ModuleRef llmod, bool opt) {\n         llvm.LLVMAddConstantMergePass(pm.llpm);\n     }\n     llvm.LLVMAddVerifierPass(pm.llpm);\n+\n+    if (ot == output_type_assembly) {\n+        llvm.LLVMRustWriteAssembly(pm.llpm, llmod,\n+                                   _str.buf(x86.get_target_triple()),\n+                                   _str.buf(output));\n+        ret;\n+    }\n+\n     llvm.LLVMRunPassManager(pm.llpm, llmod);\n+\n+    llvm.LLVMWriteBitcodeToFile(llmod, _str.buf(output));\n+    llvm.LLVMDisposeModule(llmod);\n }\n \n fn decl_no_op_type_glue(ModuleRef llmod, type_names tn) -> ValueRef {\n@@ -7073,7 +7090,8 @@ fn make_glues(ModuleRef llmod, type_names tn) -> @glue_fns {\n              vec_append_glue = make_vec_append_glue(llmod, tn));\n }\n \n-fn make_common_glue(str output, bool optimize) {\n+fn make_common_glue(str output, bool optimize,\n+                    output_type ot) {\n     // FIXME: part of this is repetitive and is probably a good idea\n     // to autogen it, but things like the memcpy implementation are not\n     // and it might be better to just check in a .ll file.\n@@ -7099,15 +7117,12 @@ fn make_common_glue(str output, bool optimize) {\n \n     trans_exit_task_glue(glues, new_str_hash[ValueRef](), tn, llmod);\n \n-    run_passes(llmod, optimize);\n-\n-    llvm.LLVMWriteBitcodeToFile(llmod, _str.buf(output));\n-    llvm.LLVMDisposeModule(llmod);\n+    run_passes(llmod, optimize, output, ot);\n }\n \n fn trans_crate(session.session sess, @ast.crate crate,\n                &ty.type_cache type_cache, str output, bool shared,\n-               bool optimize) {\n+               bool optimize, output_type ot) {\n     auto llmod =\n         llvm.LLVMModuleCreateWithNameInContext(_str.buf(\"rust_out\"),\n                                                llvm.LLVMGetGlobalContext());\n@@ -7170,10 +7185,7 @@ fn trans_crate(session.session sess, @ast.crate crate,\n     // Translate the metadata.\n     middle.metadata.write_metadata(cx, crate);\n \n-    run_passes(llmod, optimize);\n-\n-    llvm.LLVMWriteBitcodeToFile(llmod, _str.buf(output));\n-    llvm.LLVMDisposeModule(llmod);\n+    run_passes(llmod, optimize, output, ot);\n }\n \n //"}, {"sha": "81b8cbc9e0c01224238a41357789ba03d54e6ba1", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2214b6835d8bf5b33a3fb8b6a897abaea55ef368/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/2214b6835d8bf5b33a3fb8b6a897abaea55ef368/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=2214b6835d8bf5b33a3fb8b6a897abaea55ef368", "patch": "@@ -12,10 +12,18 @@\n //\n //===----------------------------------------------------------------------===//\n \n+#include \"llvm/PassManager.h\"\n+#include \"llvm/ADT/Triple.h\"\n+#include \"llvm/Support/FormattedStream.h\"\n+#include \"llvm/Target/TargetMachine.h\"\n+#include \"llvm/Target/TargetSelect.h\"\n+#include \"llvm/Target/TargetRegistry.h\"\n #include \"llvm-c/Core.h\"\n #include \"llvm-c/Object.h\"\n #include <cstdlib>\n \n+using namespace llvm;\n+\n static char *LLVMRustError;\n \n extern \"C\" LLVMMemoryBufferRef\n@@ -33,3 +41,24 @@ extern \"C\" void LLVMAddBasicAliasAnalysisPass(LLVMPassManagerRef PM);\n \n void (*RustHackToFetchPassesO)(LLVMPassManagerRef PM) =\n   LLVMAddBasicAliasAnalysisPass;\n+\n+extern \"C\" void LLVMRustWriteAssembly(LLVMPassManagerRef PMR, LLVMModuleRef M,\n+                                      const char *triple, const char *path) {\n+  InitializeAllTargets();\n+  InitializeAllAsmPrinters();\n+  std::string Err;\n+  const Target *TheTarget = TargetRegistry::lookupTarget(triple, Err);\n+  std::string FeaturesStr;\n+  TargetMachine &Target = *TheTarget->createTargetMachine(triple, FeaturesStr);\n+  bool NoVerify = false;\n+  CodeGenOpt::Level OLvl = CodeGenOpt::Default;\n+  TargetMachine::CodeGenFileType  FileType = TargetMachine::CGFT_AssemblyFile;\n+  PassManager *PM = unwrap<PassManager>(PMR);\n+  std::string ErrorInfo;\n+  raw_fd_ostream OS(path, ErrorInfo,\n+                    raw_fd_ostream::F_Binary);\n+  formatted_raw_ostream FOS(OS);\n+  bool foo = Target.addPassesToEmitFile(*PM, FOS, FileType, OLvl, NoVerify);\n+  assert(!foo);\n+  PM->run(*unwrap(M));\n+}"}, {"sha": "f95bb90b0f38591dd6c3940acc4539d18a2b27ad", "filename": "src/rustllvm/rustllvm.def.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2214b6835d8bf5b33a3fb8b6a897abaea55ef368/src%2Frustllvm%2Frustllvm.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/2214b6835d8bf5b33a3fb8b6a897abaea55ef368/src%2Frustllvm%2Frustllvm.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.def.in?ref=2214b6835d8bf5b33a3fb8b6a897abaea55ef368", "patch": "@@ -1,4 +1,5 @@\n LLVMRustCreateMemoryBufferWithContentsOfFile\n+LLVMRustWriteAssembly\n LLVMRustGetLastError\n LLVMCreateObjectFile\n LLVMDisposeObjectFile"}]}