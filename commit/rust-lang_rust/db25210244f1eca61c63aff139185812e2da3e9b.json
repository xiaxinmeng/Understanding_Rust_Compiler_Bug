{"sha": "db25210244f1eca61c63aff139185812e2da3e9b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiMjUyMTAyNDRmMWVjYTYxYzYzYWZmMTM5MTg1ODEyZTJkYTNlOWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-20T03:04:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-20T03:04:28Z"}, "message": "auto merge of #5044 : thestinger/rust/range, r=pcwalton\n\nCloses #4924\r\n\r\nThere are some more `Load` calls that could use this, so it's not completely done yet.", "tree": {"sha": "2d3f1273725fa8d6e64a8f106243767278c180e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d3f1273725fa8d6e64a8f106243767278c180e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db25210244f1eca61c63aff139185812e2da3e9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db25210244f1eca61c63aff139185812e2da3e9b", "html_url": "https://github.com/rust-lang/rust/commit/db25210244f1eca61c63aff139185812e2da3e9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db25210244f1eca61c63aff139185812e2da3e9b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b88e4f3b9f5331a3159c754fa17f906a827ef6fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/b88e4f3b9f5331a3159c754fa17f906a827ef6fd", "html_url": "https://github.com/rust-lang/rust/commit/b88e4f3b9f5331a3159c754fa17f906a827ef6fd"}, {"sha": "fa6e3b49bf74dbfb18c7ac1996c8c054c5673f10", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa6e3b49bf74dbfb18c7ac1996c8c054c5673f10", "html_url": "https://github.com/rust-lang/rust/commit/fa6e3b49bf74dbfb18c7ac1996c8c054c5673f10"}], "stats": {"total": 59, "additions": 55, "deletions": 4}, "files": [{"sha": "694cfb94e962c394ad2c224e86c1b0d34efa85e5", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/db25210244f1eca61c63aff139185812e2da3e9b/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db25210244f1eca61c63aff139185812e2da3e9b/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=db25210244f1eca61c63aff139185812e2da3e9b", "patch": "@@ -184,6 +184,15 @@ pub enum FileType {\n     ObjectFile = 1\n }\n \n+pub enum Metadata {\n+    MD_dbg = 0,\n+    MD_tbaa = 1,\n+    MD_prof = 2,\n+    MD_fpmath = 3,\n+    MD_range = 4,\n+    MD_tbaa_struct = 5\n+}\n+\n // Opaque pointer types\n pub enum Module_opaque {}\n pub type ModuleRef = *Module_opaque;"}, {"sha": "962d5dbfbf0700c4b232cd5999c0e62b99b1a854", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/db25210244f1eca61c63aff139185812e2da3e9b/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db25210244f1eca61c63aff139185812e2da3e9b/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=db25210244f1eca61c63aff139185812e2da3e9b", "patch": "@@ -1361,13 +1361,29 @@ pub fn compile_submatch(bcx: block,\n     if opts.len() > 0u {\n         match opts[0] {\n             var(_, vdef) => {\n-                if (*ty::enum_variants(tcx, vdef.enm)).len() == 1u {\n+                let variants = ty::enum_variants(tcx, vdef.enm);\n+                if variants.len() == 1 {\n                     kind = single;\n                 } else {\n                     let enumptr =\n                         PointerCast(bcx, val, T_opaque_enum_ptr(ccx));\n                     let discrimptr = GEPi(bcx, enumptr, [0u, 0u]);\n-                    test_val = Load(bcx, discrimptr);\n+\n+\n+                    assert variants.len() > 1;\n+                    let min_discrim = do variants.foldr(0) |&x, y| {\n+                        int::min(x.disr_val, y)\n+                    };\n+                    let max_discrim = do variants.foldr(0) |&x, y| {\n+                        int::max(x.disr_val, y)\n+                    };\n+\n+                    test_val = LoadRangeAssert(bcx, discrimptr,\n+                                               min_discrim as c_ulonglong,\n+                                               (max_discrim + 1)\n+                                               as c_ulonglong,\n+                                               lib::llvm::True);\n+\n                     kind = switch;\n                 }\n             }"}, {"sha": "85e8be0987899f41966a652b48414ad8ec3e0684", "filename": "src/librustc/middle/trans/build.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/db25210244f1eca61c63aff139185812e2da3e9b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db25210244f1eca61c63aff139185812e2da3e9b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs?ref=db25210244f1eca61c63aff139185812e2da3e9b", "patch": "@@ -14,8 +14,9 @@ use lib::llvm::llvm;\n use lib::llvm::{CallConv, TypeKind, AtomicBinOp, AtomicOrdering};\n use lib::llvm::{Opcode, IntPredicate, RealPredicate, True, False};\n use lib::llvm::{ValueRef, TypeRef, BasicBlockRef, BuilderRef, ModuleRef};\n-use libc::{c_uint, c_int};\n+use libc::{c_uint, c_int, c_ulonglong};\n use middle::trans::common::*;\n+use middle::trans::machine::llsize_of_real;\n \n use core::cast::transmute;\n use core::cast;\n@@ -536,6 +537,25 @@ pub fn Load(cx: block, PointerVal: ValueRef) -> ValueRef {\n     }\n }\n \n+pub fn LoadRangeAssert(cx: block, PointerVal: ValueRef, lo: c_ulonglong,\n+                       hi: c_ulonglong, signed: lib::llvm::Bool) -> ValueRef {\n+    let value = Load(cx, PointerVal);\n+\n+    unsafe {\n+        let t = llvm::LLVMGetElementType(llvm::LLVMTypeOf(PointerVal));\n+        let min = llvm::LLVMConstInt(t, lo, signed);\n+        let max = llvm::LLVMConstInt(t, hi, signed);\n+\n+\n+        do vec::as_imm_buf([min, max]) |ptr, len| {\n+            llvm::LLVMSetMetadata(value, lib::llvm::MD_range as c_uint,\n+                                  llvm::LLVMMDNode(ptr, len as c_uint));\n+        }\n+    }\n+\n+    value\n+}\n+\n pub fn Store(cx: block, Val: ValueRef, Ptr: ValueRef) {\n     unsafe {\n         if cx.unreachable { return; }"}, {"sha": "9db06cea423f475344bbf30d15e092fb1db4baee", "filename": "src/librustc/middle/trans/datum.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/db25210244f1eca61c63aff139185812e2da3e9b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db25210244f1eca61c63aff139185812e2da3e9b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs?ref=db25210244f1eca61c63aff139185812e2da3e9b", "patch": "@@ -431,7 +431,13 @@ pub impl Datum {\n         } else {\n             match self.mode {\n                 ByValue => self.val,\n-                ByRef => Load(bcx, self.val)\n+                ByRef => {\n+                    if ty::type_is_bool(self.ty) {\n+                        LoadRangeAssert(bcx, self.val, 0, 2, lib::llvm::True)\n+                    } else {\n+                        Load(bcx, self.val)\n+                    }\n+                }\n             }\n         }\n     }"}]}