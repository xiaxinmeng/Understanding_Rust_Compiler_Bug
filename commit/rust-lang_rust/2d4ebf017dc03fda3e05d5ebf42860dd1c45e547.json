{"sha": "2d4ebf017dc03fda3e05d5ebf42860dd1c45e547", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkNGViZjAxN2RjMDNmZGEzZTA1ZDVlYmY0Mjg2MGRkMWM0NWU1NDc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-06T12:55:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-02-06T12:55:17Z"}, "message": "Merge pull request #610 from RalfJung/panic\n\nSupport panic_impl and atomic_nand", "tree": {"sha": "3851ed58689db26041c55135fce1bdc57dd6045d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3851ed58689db26041c55135fce1bdc57dd6045d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d4ebf017dc03fda3e05d5ebf42860dd1c45e547", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcWtk1CRBK7hj4Ov3rIwAAdHIIAAlpwV7veUrMYanybGMtVDix\nKq9qTvsHCfHFc8hKMXape2DS/9xv2rDmf2nh39hWIo7/O2i1TMd5xLD+gWT9MYhF\nYn0hTAHPLBIF0u4OQMezaERzs+mpE3dAHaVAMFRqPALPXQRRG0EP0DU5na61UalB\nLhC5xlXt0xVPbzywLOodtLrWsYyWbgVcBeCmwneJ8yYic78VeyvxfgJZS2BG45aK\noDkz+979iYPWtz/7ZhXT62Jd2Qu51NSCqSkpXoPEOWjd9q6rB3wpjgR4rAwvCuYH\nz/hD+eB8uRfOHxRAYaBEyVyNjL90wBc0ERUgI1PVaf2Dkr3RyielDGIru4K48PU=\n=2lyQ\n-----END PGP SIGNATURE-----\n", "payload": "tree 3851ed58689db26041c55135fce1bdc57dd6045d\nparent 9e0e2199171884c15f4806dbbaf85d033d04644e\nparent 48ac35f0727e1c660fa95012a941cf65de8b9443\nauthor Ralf Jung <post@ralfj.de> 1549457717 +0100\ncommitter GitHub <noreply@github.com> 1549457717 +0100\n\nMerge pull request #610 from RalfJung/panic\n\nSupport panic_impl and atomic_nand"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d4ebf017dc03fda3e05d5ebf42860dd1c45e547", "html_url": "https://github.com/rust-lang/rust/commit/2d4ebf017dc03fda3e05d5ebf42860dd1c45e547", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d4ebf017dc03fda3e05d5ebf42860dd1c45e547/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e0e2199171884c15f4806dbbaf85d033d04644e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e0e2199171884c15f4806dbbaf85d033d04644e", "html_url": "https://github.com/rust-lang/rust/commit/9e0e2199171884c15f4806dbbaf85d033d04644e"}, {"sha": "48ac35f0727e1c660fa95012a941cf65de8b9443", "url": "https://api.github.com/repos/rust-lang/rust/commits/48ac35f0727e1c660fa95012a941cf65de8b9443", "html_url": "https://github.com/rust-lang/rust/commit/48ac35f0727e1c660fa95012a941cf65de8b9443"}], "stats": {"total": 73, "additions": 53, "deletions": 20}, "files": [{"sha": "abb239ad7d62792d04a52a0ed066537eb45d9d57", "filename": "src/fn_call.rs", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2d4ebf017dc03fda3e05d5ebf42860dd1c45e547/src%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d4ebf017dc03fda3e05d5ebf42860dd1c45e547/src%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffn_call.rs?ref=2d4ebf017dc03fda3e05d5ebf42860dd1c45e547", "patch": "@@ -39,12 +39,7 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n         if this.tcx.is_foreign_item(instance.def_id()) {\n             // An external function that we cannot find MIR for, but we can still run enough\n             // of them to make miri viable.\n-            this.emulate_foreign_item(\n-                instance.def_id(),\n-                args,\n-                dest.unwrap(),\n-                ret.unwrap(),\n-            )?;\n+            this.emulate_foreign_item(instance.def_id(), args, dest, ret)?;\n             // `goto_block` already handled\n             return Ok(None);\n         }\n@@ -59,8 +54,8 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n         &mut self,\n         def_id: DefId,\n         args: &[OpTy<'tcx, Borrow>],\n-        dest: PlaceTy<'tcx, Borrow>,\n-        ret: mir::BasicBlock,\n+        dest: Option<PlaceTy<'tcx, Borrow>>,\n+        ret: Option<mir::BasicBlock>,\n     ) -> EvalResult<'tcx> {\n         let this = self.eval_context_mut();\n         let attrs = this.tcx.get_attrs(def_id);\n@@ -70,9 +65,23 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n         };\n         // Strip linker suffixes (seen on 32bit macOS)\n         let link_name = link_name.trim_end_matches(\"$UNIX2003\");\n-\n         let tcx = &{this.tcx.tcx};\n \n+        // first: functions that could diverge\n+        match &link_name[..] {\n+            \"__rust_start_panic\" | \"panic_impl\" => {\n+                return err!(MachineError(\"the evaluated program panicked\".to_string()));\n+            }\n+            _ => if dest.is_none() {\n+                return err!(Unimplemented(\n+                    format!(\"can't call diverging foreign function: {}\", link_name),\n+                ));\n+            }\n+        }\n+\n+        // now: functions that assume a ret and dest\n+        let dest = dest.expect(\"we already checked for a dest\");\n+        let ret = ret.expect(\"dest is Some but ret is None\");\n         match &link_name[..] {\n             \"malloc\" => {\n                 let size = this.read_scalar(args[0])?.to_usize(this)?;\n@@ -245,9 +254,6 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n                 return Ok(());\n             }\n \n-            \"__rust_start_panic\" =>\n-                return err!(MachineError(\"the evaluated program panicked\".to_string())),\n-\n             \"memcmp\" => {\n                 let left = this.read_scalar(args[0])?.not_undef()?;\n                 let right = this.read_scalar(args[1])?.not_undef()?;"}, {"sha": "b7c5d8d07c25581637b136d81f1239a7cc8d87ed", "filename": "src/intrinsic.rs", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2d4ebf017dc03fda3e05d5ebf42860dd1c45e547/src%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d4ebf017dc03fda3e05d5ebf42860dd1c45e547/src%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsic.rs?ref=2d4ebf017dc03fda3e05d5ebf42860dd1c45e547", "patch": "@@ -108,6 +108,11 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n             \"atomic_and_rel\" |\n             \"atomic_and_acqrel\" |\n             \"atomic_and_relaxed\" |\n+            \"atomic_nand\" |\n+            \"atomic_nand_acq\" |\n+            \"atomic_nand_rel\" |\n+            \"atomic_nand_acqrel\" |\n+            \"atomic_nand_relaxed\" |\n             \"atomic_xadd\" |\n             \"atomic_xadd_acq\" |\n             \"atomic_xadd_rel\" |\n@@ -125,16 +130,23 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n                 let rhs = this.read_immediate(args[1])?;\n                 let old = this.read_immediate(ptr.into())?;\n                 this.write_immediate(*old, dest)?; // old value is returned\n-                let op = match intrinsic_name.split('_').nth(1).unwrap() {\n-                    \"or\" => mir::BinOp::BitOr,\n-                    \"xor\" => mir::BinOp::BitXor,\n-                    \"and\" => mir::BinOp::BitAnd,\n-                    \"xadd\" => mir::BinOp::Add,\n-                    \"xsub\" => mir::BinOp::Sub,\n+                let (op, neg) = match intrinsic_name.split('_').nth(1).unwrap() {\n+                    \"or\" => (mir::BinOp::BitOr, false),\n+                    \"xor\" => (mir::BinOp::BitXor, false),\n+                    \"and\" => (mir::BinOp::BitAnd, false),\n+                    \"xadd\" => (mir::BinOp::Add, false),\n+                    \"xsub\" => (mir::BinOp::Sub, false),\n+                    \"nand\" => (mir::BinOp::BitAnd, true),\n                     _ => bug!(),\n                 };\n                 // Atomics wrap around on overflow.\n-                this.binop_ignore_overflow(op, old, rhs, ptr.into())?;\n+                let (val, _overflowed) = this.binary_op_imm(op, old, rhs)?;\n+                let val = if neg {\n+                    this.unary_op(mir::UnOp::Not, val, old.layout)?\n+                } else {\n+                    val\n+                };\n+                this.write_scalar(val, ptr.into())?;\n             }\n \n             \"breakpoint\" => unimplemented!(), // halt miri"}, {"sha": "1163c8708287cb51eb3f0df2ee47e8a9c069cce1", "filename": "tests/compile-fail/panic1.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d4ebf017dc03fda3e05d5ebf42860dd1c45e547/tests%2Fcompile-fail%2Fpanic1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d4ebf017dc03fda3e05d5ebf42860dd1c45e547/tests%2Fcompile-fail%2Fpanic1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpanic1.rs?ref=2d4ebf017dc03fda3e05d5ebf42860dd1c45e547", "patch": "@@ -1,5 +1,5 @@\n //error-pattern: the evaluated program panicked\n \n fn main() {\n-    assert_eq!(5, 6);\n+    std::panic!(\"panicking from libstd\");\n }", "previous_filename": "tests/compile-fail/panic.rs"}, {"sha": "e643e69224139592d09eccb11463b15c56af0f38", "filename": "tests/compile-fail/panic2.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2d4ebf017dc03fda3e05d5ebf42860dd1c45e547/tests%2Fcompile-fail%2Fpanic2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d4ebf017dc03fda3e05d5ebf42860dd1c45e547/tests%2Fcompile-fail%2Fpanic2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpanic2.rs?ref=2d4ebf017dc03fda3e05d5ebf42860dd1c45e547", "patch": "@@ -0,0 +1,5 @@\n+//error-pattern: the evaluated program panicked\n+\n+fn main() {\n+    std::panic!(\"{}-panicking from libstd\", 42);\n+}"}, {"sha": "b22f95d9c69d1431188682d82fab95e16f2e3ed6", "filename": "tests/compile-fail/panic3.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2d4ebf017dc03fda3e05d5ebf42860dd1c45e547/tests%2Fcompile-fail%2Fpanic3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d4ebf017dc03fda3e05d5ebf42860dd1c45e547/tests%2Fcompile-fail%2Fpanic3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpanic3.rs?ref=2d4ebf017dc03fda3e05d5ebf42860dd1c45e547", "patch": "@@ -0,0 +1,5 @@\n+//error-pattern: the evaluated program panicked\n+\n+fn main() {\n+    core::panic!(\"panicking from libcore\");\n+}"}, {"sha": "449e716e161cf7af647859be9836d8cd22848eee", "filename": "tests/compile-fail/panic4.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2d4ebf017dc03fda3e05d5ebf42860dd1c45e547/tests%2Fcompile-fail%2Fpanic4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d4ebf017dc03fda3e05d5ebf42860dd1c45e547/tests%2Fcompile-fail%2Fpanic4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpanic4.rs?ref=2d4ebf017dc03fda3e05d5ebf42860dd1c45e547", "patch": "@@ -0,0 +1,5 @@\n+//error-pattern: the evaluated program panicked\n+\n+fn main() {\n+    core::panic!(\"{}-panicking from libcore\", 42);\n+}"}]}