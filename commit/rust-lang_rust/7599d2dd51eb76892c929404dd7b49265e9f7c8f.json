{"sha": "7599d2dd51eb76892c929404dd7b49265e9f7c8f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1OTlkMmRkNTFlYjc2ODkyYzkyOTQwNGRkN2I0OTI2NWU5ZjdjOGY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-21T05:41:24Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-22T00:14:02Z"}, "message": "rustdoc: Implement astsrv in a dedicated task\n\nThis allows the srv type to be sendable so we can parallelize\nall the rustdoc passes", "tree": {"sha": "ce2352ba166a4c8ed257bc082505d8742dbc2176", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce2352ba166a4c8ed257bc082505d8742dbc2176"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7599d2dd51eb76892c929404dd7b49265e9f7c8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7599d2dd51eb76892c929404dd7b49265e9f7c8f", "html_url": "https://github.com/rust-lang/rust/commit/7599d2dd51eb76892c929404dd7b49265e9f7c8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7599d2dd51eb76892c929404dd7b49265e9f7c8f/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96e3031675aba427c1cff8967f2c1cbbcdb6b5ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/96e3031675aba427c1cff8967f2c1cbbcdb6b5ff", "html_url": "https://github.com/rust-lang/rust/commit/96e3031675aba427c1cff8967f2c1cbbcdb6b5ff"}], "stats": {"total": 77, "additions": 55, "deletions": 22}, "files": [{"sha": "60ba854a537b6d604d2a773a4fa9e6217bacb12b", "filename": "src/rustdoc/astsrv.rs", "status": "modified", "additions": 55, "deletions": 22, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/7599d2dd51eb76892c929404dd7b49265e9f7c8f/src%2Frustdoc%2Fastsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7599d2dd51eb76892c929404dd7b49265e9f7c8f/src%2Frustdoc%2Fastsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fastsrv.rs?ref=7599d2dd51eb76892c929404dd7b49265e9f7c8f", "patch": "@@ -21,7 +21,7 @@ import rustc::middle::resolve;\n \n export ctxt;\n export ctxt_handler;\n-export srv;\n+export srv::{};\n export from_str;\n export from_file;\n export exec;\n@@ -34,31 +34,71 @@ type ctxt = {\n \n type srv_owner<T> = fn(srv: srv) -> T;\n type ctxt_handler<T> = fn~(ctxt: ctxt) -> T;\n+type parser = fn~(session::session, str) -> @ast::crate;\n \n-type srv = {\n-    ctxt: ctxt\n+enum msg {\n+    handle_request(fn~(ctxt)),\n+    exit\n+}\n+\n+enum srv = {\n+    ch: comm::chan<msg>\n };\n \n fn from_str<T>(source: str, owner: srv_owner<T>) -> T {\n-    let (sess, ignore_errors) = build_session();\n+    run(owner, source, parse::from_str_sess)\n+}\n \n-    let srv = {\n-        ctxt: build_ctxt(sess, parse::from_str_sess(sess, source),\n-                         ignore_errors)\n-    };\n+fn from_file<T>(file: str, owner: srv_owner<T>) -> T {\n+    run(owner, file, parse::from_file_sess)\n+}\n+\n+fn run<T>(owner: srv_owner<T>, source: str, parse: parser) -> T {\n+\n+    let srv_ = srv({\n+        ch: task::spawn_listener {|po|\n+            act(po, source, parse);\n+        }\n+    });\n \n-    owner(srv)\n+    let res = owner(srv_);\n+    comm::send(srv_.ch, exit);\n+    ret res;\n }\n \n-fn from_file<T>(file: str, owner: srv_owner<T>) -> T {\n+fn act(po: comm::port<msg>, source: str, parse: parser) {\n     let (sess, ignore_errors) = build_session();\n \n-    let srv = {\n-        ctxt: build_ctxt(sess, parse::from_file_sess(sess, file),\n-                         ignore_errors)\n-    };\n+    let ctxt = build_ctxt(\n+        sess,\n+        parse(sess, source),\n+        ignore_errors\n+    );\n+\n+    let keep_going = true;\n+    while keep_going {\n+        alt comm::recv(po) {\n+          handle_request(f) {\n+            f(ctxt);\n+          }\n+          exit {\n+            keep_going = false;\n+          }\n+        }\n+    }\n+}\n \n-    owner(srv)\n+fn exec<T:send>(\n+    srv: srv,\n+    +f: fn~(ctxt: ctxt) -> T\n+) -> T {\n+    let po = comm::port();\n+    let ch = comm::chan(po);\n+    let msg = handle_request(fn~[move f](ctxt: ctxt) {\n+        comm::send(ch, f(ctxt))\n+    });\n+    comm::send(srv.ch, msg);\n+    comm::recv(po)\n }\n \n fn build_ctxt(sess: session::session, ast: @ast::crate,\n@@ -242,13 +282,6 @@ fn should_ignore_external_import_paths_that_dont_exist() {\n     from_str(source) {|_srv| }\n }\n \n-fn exec<T:send>(\n-    srv: srv,\n-    f: fn~(ctxt: ctxt) -> T\n-) -> T {\n-    f(srv.ctxt)\n-}\n-\n #[test]\n fn srv_should_return_request_result() {\n     let source = \"fn a() { }\";"}]}