{"sha": "c17be9ea110a1158e6a1ad131941ec6965ce6ac9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxN2JlOWVhMTEwYTExNThlNmExYWQxMzE5NDFlYzY5NjVjZTZhYzk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-11-11T14:52:46Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-11-17T18:44:21Z"}, "message": "move impl wf check so they occur earlier\n\nNeeded to keep coherence from freaking out.", "tree": {"sha": "79069fe3facf0fdafaa27416727124b5f81c89f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79069fe3facf0fdafaa27416727124b5f81c89f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c17be9ea110a1158e6a1ad131941ec6965ce6ac9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c17be9ea110a1158e6a1ad131941ec6965ce6ac9", "html_url": "https://github.com/rust-lang/rust/commit/c17be9ea110a1158e6a1ad131941ec6965ce6ac9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c17be9ea110a1158e6a1ad131941ec6965ce6ac9/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34c361cfb2e7aa3efffe8783d2c31afc9e43f040", "url": "https://api.github.com/repos/rust-lang/rust/commits/34c361cfb2e7aa3efffe8783d2c31afc9e43f040", "html_url": "https://github.com/rust-lang/rust/commit/34c361cfb2e7aa3efffe8783d2c31afc9e43f040"}], "stats": {"total": 161, "additions": 92, "deletions": 69}, "files": [{"sha": "7b33aa694a26e3386688ab9038a7a678f9a0c0f9", "filename": "src/librustc_typeck/check/impl_item_duplicate.rs", "status": "removed", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/34c361cfb2e7aa3efffe8783d2c31afc9e43f040/src%2Flibrustc_typeck%2Fcheck%2Fimpl_item_duplicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34c361cfb2e7aa3efffe8783d2c31afc9e43f040/src%2Flibrustc_typeck%2Fcheck%2Fimpl_item_duplicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fimpl_item_duplicate.rs?ref=34c361cfb2e7aa3efffe8783d2c31afc9e43f040", "patch": "@@ -1,46 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use rustc::hir;\n-use rustc_data_structures::fx::FxHashMap;\n-use std::collections::hash_map::Entry::{Occupied, Vacant};\n-\n-use CrateCtxt;\n-\n-/// Enforce that we do not have two items in an impl with the same name.\n-pub fn enforce_impl_items_are_distinct<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n-                                                 impl_item_refs: &[hir::ImplItemRef])\n-{\n-    let tcx = ccx.tcx;\n-    let mut seen_type_items = FxHashMap();\n-    let mut seen_value_items = FxHashMap();\n-    for &impl_item_ref in impl_item_refs {\n-        let impl_item = tcx.map.impl_item(impl_item_ref.id);\n-        let seen_items = match impl_item.node {\n-            hir::ImplItemKind::Type(_) => &mut seen_type_items,\n-            _                    => &mut seen_value_items,\n-        };\n-        match seen_items.entry(impl_item.name) {\n-            Occupied(entry) => {\n-                let mut err = struct_span_err!(tcx.sess, impl_item.span, E0201,\n-                                               \"duplicate definitions with name `{}`:\",\n-                                               impl_item.name);\n-                err.span_label(*entry.get(),\n-                               &format!(\"previous definition of `{}` here\",\n-                                        impl_item.name));\n-                err.span_label(impl_item.span, &format!(\"duplicate definition\"));\n-                err.emit();\n-            }\n-            Vacant(entry) => {\n-                entry.insert(impl_item.span);\n-            }\n-        }\n-    }\n-}"}, {"sha": "2197ecc10a18c614af5322d7e4f643c094c56102", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c17be9ea110a1158e6a1ad131941ec6965ce6ac9/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c17be9ea110a1158e6a1ad131941ec6965ce6ac9/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=c17be9ea110a1158e6a1ad131941ec6965ce6ac9", "patch": "@@ -143,8 +143,6 @@ mod closure;\n mod callee;\n mod compare_method;\n mod intrinsic;\n-mod impl_item_duplicate;\n-mod impl_parameters_used;\n mod op;\n \n /// closures defined within the function.  For example:\n@@ -817,7 +815,7 @@ pub fn check_item_type<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>, it: &'tcx hir::Item) {\n                             it.id);\n       }\n       hir::ItemFn(..) => {} // entirely within check_item_body\n-      hir::ItemImpl(_, _, ref hir_generics, _, _, ref impl_item_refs) => {\n+      hir::ItemImpl(.., ref impl_item_refs) => {\n           debug!(\"ItemImpl {} with id {}\", it.name, it.id);\n           let impl_def_id = ccx.tcx.map.local_def_id(it.id);\n           if let Some(impl_trait_ref) = ccx.tcx.impl_trait_ref(impl_def_id) {\n@@ -829,14 +827,6 @@ pub fn check_item_type<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>, it: &'tcx hir::Item) {\n               let trait_def_id = impl_trait_ref.def_id;\n               check_on_unimplemented(ccx, trait_def_id, it);\n           }\n-\n-          impl_parameters_used::enforce_impl_params_are_constrained(ccx,\n-                                                                    hir_generics,\n-                                                                    impl_def_id,\n-                                                                    impl_item_refs);\n-\n-          impl_item_duplicate::enforce_impl_items_are_distinct(ccx,\n-                                                               impl_item_refs);\n       }\n       hir::ItemTrait(..) => {\n         let def_id = ccx.tcx.map.local_def_id(it.id);"}, {"sha": "1572d04f68c19c5d89a536b3fa7440602ece5288", "filename": "src/librustc_typeck/impl_wf_check.rs", "status": "renamed", "additions": 85, "deletions": 11, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/c17be9ea110a1158e6a1ad131941ec6965ce6ac9/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c17be9ea110a1158e6a1ad131941ec6965ce6ac9/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check.rs?ref=c17be9ea110a1158e6a1ad131941ec6965ce6ac9", "patch": "@@ -8,11 +8,24 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+//! This pass enforces various \"well-formedness constraints\" on impls.\n+//! Logically, it is part of wfcheck -- but we do it early so that we\n+//! can stop compilation afterwards, since part of the trait matching\n+//! infrastructure gets very grumpy if these conditions don't hold. In\n+//! particular, if there are type parameters that are not part of the\n+//! impl, then coherence will report strange inference ambiguity\n+//! errors; if impls have duplicate items, we get misleading\n+//! specialization errors. These things can (and probably should) be\n+//! fixed, but for the moment it's easier to do these checks early.\n+\n use constrained_type_params as ctp;\n+use rustc::dep_graph::DepNode;\n use rustc::hir;\n+use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir::def_id::DefId;\n use rustc::ty;\n-use rustc::util::nodemap::FxHashSet;\n+use rustc::util::nodemap::{FxHashMap, FxHashSet};\n+use std::collections::hash_map::Entry::{Occupied, Vacant};\n \n use syntax_pos::Span;\n \n@@ -48,22 +61,52 @@ use CrateCtxt;\n /// impl<'a> Trait<Foo> for Bar { type X = &'a i32; }\n ///      ^ 'a is unused and appears in assoc type, error\n /// ```\n-pub fn enforce_impl_params_are_constrained<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n-                                                     impl_hir_generics: &hir::Generics,\n-                                                     impl_def_id: DefId,\n-                                                     impl_item_refs: &[hir::ImplItemRef])\n+pub fn impl_wf_check<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>) {\n+    // We will tag this as part of the WF check -- logically, it is,\n+    // but it's one that we must perform earlier than the rest of\n+    // WfCheck.\n+    ccx.tcx.visit_all_item_likes_in_krate(DepNode::WfCheck, &mut ImplWfCheck { ccx: ccx });\n+}\n+\n+struct ImplWfCheck<'a, 'tcx: 'a> {\n+    ccx: &'a CrateCtxt<'a, 'tcx>,\n+}\n+\n+impl<'a, 'tcx> ItemLikeVisitor<'tcx> for ImplWfCheck<'a, 'tcx> {\n+    fn visit_item(&mut self, item: &'tcx hir::Item) {\n+        match item.node {\n+            hir::ItemImpl(.., ref generics, _, _, ref impl_item_refs) => {\n+                let impl_def_id = self.ccx.tcx.map.local_def_id(item.id);\n+                enforce_impl_params_are_constrained(self.ccx,\n+                                                    generics,\n+                                                    impl_def_id,\n+                                                    impl_item_refs);\n+                enforce_impl_items_are_distinct(self.ccx, impl_item_refs);\n+            }\n+            _ => { }\n+        }\n+    }\n+\n+    fn visit_impl_item(&mut self, _impl_item: &'tcx hir::ImplItem) { }\n+}\n+\n+fn enforce_impl_params_are_constrained<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n+                                                 impl_hir_generics: &hir::Generics,\n+                                                 impl_def_id: DefId,\n+                                                 impl_item_refs: &[hir::ImplItemRef])\n {\n     // Every lifetime used in an associated type must be constrained.\n-    let impl_scheme = ccx.tcx.lookup_item_type(impl_def_id);\n-    let impl_predicates = ccx.tcx.lookup_predicates(impl_def_id);\n+    let impl_self_ty = ccx.tcx.item_type(impl_def_id);\n+    let impl_generics = ccx.tcx.item_generics(impl_def_id);\n+    let impl_predicates = ccx.tcx.item_predicates(impl_def_id);\n     let impl_trait_ref = ccx.tcx.impl_trait_ref(impl_def_id);\n \n-    let mut input_parameters = ctp::parameters_for_impl(impl_scheme.ty, impl_trait_ref);\n+    let mut input_parameters = ctp::parameters_for_impl(impl_self_ty, impl_trait_ref);\n     ctp::identify_constrained_type_params(\n         &impl_predicates.predicates.as_slice(), impl_trait_ref, &mut input_parameters);\n \n     // Disallow ANY unconstrained type parameters.\n-    for (ty_param, param) in impl_scheme.generics.types.iter().zip(&impl_hir_generics.ty_params) {\n+    for (ty_param, param) in impl_generics.types.iter().zip(&impl_hir_generics.ty_params) {\n         let param_ty = ty::ParamTy::for_def(ty_param);\n         if !input_parameters.contains(&ctp::Parameter::from(param_ty)) {\n             report_unused_parameter(ccx, param.span, \"type\", &param_ty.to_string());\n@@ -78,9 +121,9 @@ pub fn enforce_impl_params_are_constrained<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n             item.kind == ty::AssociatedKind::Type && item.has_value\n         })\n         .flat_map(|def_id| {\n-            ctp::parameters_for(&ccx.tcx.lookup_item_type(def_id).ty, true)\n+            ctp::parameters_for(&ccx.tcx.item_type(def_id), true)\n         }).collect();\n-    for (ty_lifetime, lifetime) in impl_scheme.generics.regions.iter()\n+    for (ty_lifetime, lifetime) in impl_generics.regions.iter()\n         .zip(&impl_hir_generics.lifetimes)\n     {\n         let param = ctp::Parameter::from(ty_lifetime.to_early_bound_region_data());\n@@ -127,3 +170,34 @@ fn report_unused_parameter(ccx: &CrateCtxt,\n         .span_label(span, &format!(\"unconstrained {} parameter\", kind))\n         .emit();\n }\n+\n+/// Enforce that we do not have two items in an impl with the same name.\n+fn enforce_impl_items_are_distinct<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n+                                             impl_item_refs: &[hir::ImplItemRef])\n+{\n+    let tcx = ccx.tcx;\n+    let mut seen_type_items = FxHashMap();\n+    let mut seen_value_items = FxHashMap();\n+    for impl_item_ref in impl_item_refs {\n+        let impl_item = tcx.map.impl_item(impl_item_ref.id);\n+        let seen_items = match impl_item.node {\n+            hir::ImplItemKind::Type(_) => &mut seen_type_items,\n+            _                    => &mut seen_value_items,\n+        };\n+        match seen_items.entry(impl_item.name) {\n+            Occupied(entry) => {\n+                let mut err = struct_span_err!(tcx.sess, impl_item.span, E0201,\n+                                               \"duplicate definitions with name `{}`:\",\n+                                               impl_item.name);\n+                err.span_label(*entry.get(),\n+                               &format!(\"previous definition of `{}` here\",\n+                                        impl_item.name));\n+                err.span_label(impl_item.span, &format!(\"duplicate definition\"));\n+                err.emit();\n+            }\n+            Vacant(entry) => {\n+                entry.insert(impl_item.span);\n+            }\n+        }\n+    }\n+}", "previous_filename": "src/librustc_typeck/check/impl_parameters_used.rs"}, {"sha": "f2e8bb2e96145483114af8853ec4eccb58a0ed7d", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c17be9ea110a1158e6a1ad131941ec6965ce6ac9/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c17be9ea110a1158e6a1ad131941ec6965ce6ac9/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=c17be9ea110a1158e6a1ad131941ec6965ce6ac9", "patch": "@@ -131,6 +131,7 @@ mod rscope;\n mod astconv;\n pub mod collect;\n mod constrained_type_params;\n+mod impl_wf_check;\n pub mod coherence;\n pub mod variance;\n \n@@ -334,6 +335,11 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>)\n     time(time_passes, \"variance inference\", ||\n          variance::infer_variance(tcx));\n \n+    tcx.sess.track_errors(|| {\n+        time(time_passes, \"impl wf inference\", ||\n+             impl_wf_check::impl_wf_check(&ccx));\n+    })?;\n+\n     tcx.sess.track_errors(|| {\n       time(time_passes, \"coherence checking\", ||\n           coherence::check_coherence(&ccx));"}, {"sha": "010cfb54c1ae91c3f160969400e4ebf7410cf608", "filename": "src/test/compile-fail/issue-3214.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c17be9ea110a1158e6a1ad131941ec6965ce6ac9/src%2Ftest%2Fcompile-fail%2Fissue-3214.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c17be9ea110a1158e6a1ad131941ec6965ce6ac9/src%2Ftest%2Fcompile-fail%2Fissue-3214.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3214.rs?ref=c17be9ea110a1158e6a1ad131941ec6965ce6ac9", "patch": "@@ -15,7 +15,6 @@ fn foo<T>() {\n \n     impl<T> Drop for foo<T> {\n         //~^ ERROR wrong number of type arguments\n-        //~^^ ERROR the type parameter `T` is not constrained\n         fn drop(&mut self) {}\n     }\n }"}]}