{"sha": "8dd3a71730161869d8da3694f3338042efa17d29", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkZDNhNzE3MzAxNjE4NjlkOGRhMzY5NGYzMzM4MDQyZWZhMTdkMjk=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-08-19T22:13:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-19T22:13:09Z"}, "message": "Merge #9955\n\n9955: fix: Rename fails on renaming definitions created by macros instead of renaming the macro invocation r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "86771438cb8cafa8cddcea0d6c1604eaed837afd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86771438cb8cafa8cddcea0d6c1604eaed837afd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8dd3a71730161869d8da3694f3338042efa17d29", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhHtd1CRBK7hj4Ov3rIwAA8f0IAH43GXALPVZamViK0j/vpWES\nWMPV5olDEk4ZTLsUgIp3x60C7y3SY33T//cHPVqOsaoyGLlUeR1rKH7C5Psu8QWg\n+pNYyTWlbCM68AE2Pliym/+Z+rBJOYZ6cbGDUHC2A0uaL9li/8mXMgAxRG3nbiUG\nJODrayJ3yOPhKnhFPBydmhcHQ6TZ1IS46v8Q4Ik1lojwwqbx3Tshwr2Ykbb38jPs\nuh5aof7F3Brmq+gvSSo52JFN8tlWy8nVj6OQxms7RMc+eRfcls3f9DhiSGu7pLgr\nY6nTij/Qjrn6u6JDZirbEA1/66/MPSvEkms5mCIrpefgnJ4wBMm6t4jvNJNg5bI=\n=9GK/\n-----END PGP SIGNATURE-----\n", "payload": "tree 86771438cb8cafa8cddcea0d6c1604eaed837afd\nparent 59aa0918662c62159ad591ed281dab026875fb04\nparent c67ecbebc4e764ff6616e6b1a6127b23eefb28d7\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1629411189 +0000\ncommitter GitHub <noreply@github.com> 1629411189 +0000\n\nMerge #9955\n\n9955: fix: Rename fails on renaming definitions created by macros instead of renaming the macro invocation r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8dd3a71730161869d8da3694f3338042efa17d29", "html_url": "https://github.com/rust-lang/rust/commit/8dd3a71730161869d8da3694f3338042efa17d29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8dd3a71730161869d8da3694f3338042efa17d29/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59aa0918662c62159ad591ed281dab026875fb04", "url": "https://api.github.com/repos/rust-lang/rust/commits/59aa0918662c62159ad591ed281dab026875fb04", "html_url": "https://github.com/rust-lang/rust/commit/59aa0918662c62159ad591ed281dab026875fb04"}, {"sha": "c67ecbebc4e764ff6616e6b1a6127b23eefb28d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/c67ecbebc4e764ff6616e6b1a6127b23eefb28d7", "html_url": "https://github.com/rust-lang/rust/commit/c67ecbebc4e764ff6616e6b1a6127b23eefb28d7"}], "stats": {"total": 128, "additions": 62, "deletions": 66}, "files": [{"sha": "1452ab08d9461fa79b5c31e5b1cf956dadf8d8c7", "filename": "crates/hir_expand/src/lib.rs", "status": "modified", "additions": 35, "deletions": 20, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/8dd3a71730161869d8da3694f3338042efa17d29/crates%2Fhir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dd3a71730161869d8da3694f3338042efa17d29/crates%2Fhir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Flib.rs?ref=8dd3a71730161869d8da3694f3338042efa17d29", "patch": "@@ -22,8 +22,7 @@ use either::Either;\n pub use mbe::{ExpandError, ExpandResult};\n pub use parser::FragmentKind;\n \n-use std::hash::Hash;\n-use std::sync::Arc;\n+use std::{hash::Hash, sync::Arc};\n \n use base_db::{impl_intern_key, salsa, CrateId, FileId, FileRange};\n use syntax::{\n@@ -32,11 +31,13 @@ use syntax::{\n     Direction, SyntaxNode, SyntaxToken, TextRange, TextSize,\n };\n \n-use crate::ast_id_map::FileAstId;\n-use crate::builtin_attr::BuiltinAttrExpander;\n-use crate::builtin_derive::BuiltinDeriveExpander;\n-use crate::builtin_macro::{BuiltinFnLikeExpander, EagerExpander};\n-use crate::proc_macro::ProcMacroExpander;\n+use crate::{\n+    ast_id_map::FileAstId,\n+    builtin_attr::BuiltinAttrExpander,\n+    builtin_derive::BuiltinDeriveExpander,\n+    builtin_macro::{BuiltinFnLikeExpander, EagerExpander},\n+    proc_macro::ProcMacroExpander,\n+};\n \n #[cfg(test)]\n mod test_db;\n@@ -210,12 +211,12 @@ impl MacroDefId {\n \n     pub fn ast_id(&self) -> Either<AstId<ast::Macro>, AstId<ast::Fn>> {\n         let id = match &self.kind {\n-            MacroDefKind::Declarative(id) => id,\n-            MacroDefKind::BuiltIn(_, id) => id,\n-            MacroDefKind::BuiltInAttr(_, id) => id,\n-            MacroDefKind::BuiltInDerive(_, id) => id,\n-            MacroDefKind::BuiltInEager(_, id) => id,\n             MacroDefKind::ProcMacro(.., id) => return Either::Right(*id),\n+            MacroDefKind::Declarative(id)\n+            | MacroDefKind::BuiltIn(_, id)\n+            | MacroDefKind::BuiltInAttr(_, id)\n+            | MacroDefKind::BuiltInDerive(_, id)\n+            | MacroDefKind::BuiltInEager(_, id) => id,\n         };\n         Either::Left(*id)\n     }\n@@ -464,15 +465,10 @@ impl InFile<SyntaxNode> {\n }\n \n impl<'a> InFile<&'a SyntaxNode> {\n+    /// Falls back to the macro call range if the node cannot be mapped up fully.\n     pub fn original_file_range(self, db: &dyn db::AstDatabase) -> FileRange {\n-        if let Some(range) = original_range_opt(db, self) {\n-            let original_file = range.file_id.original_file(db);\n-            if range.file_id == original_file.into() {\n-                return FileRange { file_id: original_file, range: range.value };\n-            }\n-\n-            log::error!(\"Fail to mapping up more for {:?}\", range);\n-            return FileRange { file_id: range.file_id.original_file(db), range: range.value };\n+        if let Some(res) = self.original_file_range_opt(db) {\n+            return res;\n         }\n \n         // Fall back to whole macro call.\n@@ -483,8 +479,27 @@ impl<'a> InFile<&'a SyntaxNode> {\n \n         let orig_file = node.file_id.original_file(db);\n         assert_eq!(node.file_id, orig_file.into());\n+\n         FileRange { file_id: orig_file, range: node.value.text_range() }\n     }\n+\n+    /// Attempts to map the syntax node back up its macro calls.\n+    pub fn original_file_range_opt(self, db: &dyn db::AstDatabase) -> Option<FileRange> {\n+        match original_range_opt(db, self) {\n+            Some(range) => {\n+                let original_file = range.file_id.original_file(db);\n+                if range.file_id != original_file.into() {\n+                    log::error!(\"Failed mapping up more for {:?}\", range);\n+                }\n+                Some(FileRange { file_id: original_file, range: range.value })\n+            }\n+            _ if !self.file_id.is_macro() => Some(FileRange {\n+                file_id: self.file_id.original_file(db),\n+                range: self.value.text_range(),\n+            }),\n+            _ => None,\n+        }\n+    }\n }\n \n fn original_range_opt("}, {"sha": "b8c14dc97b028d332f839065f3ab6baea970c2be", "filename": "crates/ide/src/display/navigation_target.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8dd3a71730161869d8da3694f3338042efa17d29/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dd3a71730161869d8da3694f3338042efa17d29/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=8dd3a71730161869d8da3694f3338042efa17d29", "patch": "@@ -143,8 +143,11 @@ impl NavigationTarget {\n         kind: SymbolKind,\n     ) -> NavigationTarget {\n         let name = node.value.name().map(|it| it.text().into()).unwrap_or_else(|| \"_\".into());\n-        let focus_range =\n-            node.value.name().map(|it| node.with_value(it.syntax()).original_file_range(db).range);\n+        let focus_range = node\n+            .value\n+            .name()\n+            .and_then(|it| node.with_value(it.syntax()).original_file_range_opt(db))\n+            .map(|it| it.range);\n         let frange = node.map(|it| it.syntax()).original_file_range(db);\n \n         NavigationTarget::from_syntax(frange.file_id, name, focus_range, frange.range, kind)"}, {"sha": "a4297a2fec5540783f6a2ba710687b632077eb2f", "filename": "crates/ide/src/rename.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8dd3a71730161869d8da3694f3338042efa17d29/crates%2Fide%2Fsrc%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dd3a71730161869d8da3694f3338042efa17d29/crates%2Fide%2Fsrc%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frename.rs?ref=8dd3a71730161869d8da3694f3338042efa17d29", "patch": "@@ -1869,20 +1869,15 @@ fn f() { <()>::BAR$0; }\"#,\n     }\n \n     #[test]\n-    fn macros_are_broken_lol() {\n-        cov_mark::check!(macros_are_broken_lol);\n+    fn defs_from_macros_arent_renamed() {\n         check(\n             \"lol\",\n             r#\"\n macro_rules! m { () => { fn f() {} } }\n m!();\n fn main() { f$0()  }\n \"#,\n-            r#\"\n-macro_rules! m { () => { fn f() {} } }\n-lol\n-fn main() { lol()  }\n-\"#,\n+            \"error: No identifier available to rename\",\n         )\n     }\n }"}, {"sha": "42f6ec5d9cf00191095fd3b37f9dc2bc7a7a095e", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8dd3a71730161869d8da3694f3338042efa17d29/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dd3a71730161869d8da3694f3338042efa17d29/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=8dd3a71730161869d8da3694f3338042efa17d29", "patch": "@@ -1446,7 +1446,6 @@ gen2!();\n                                 0,\n                             ),\n                             full_range: 228..236,\n-                            focus_range: 228..236,\n                             name: \"foo_test2\",\n                             kind: Function,\n                         },\n@@ -1467,7 +1466,6 @@ gen2!();\n                                 0,\n                             ),\n                             full_range: 218..225,\n-                            focus_range: 218..225,\n                             name: \"foo_test\",\n                             kind: Function,\n                         },\n@@ -1533,7 +1531,6 @@ foo!();\n                                 0,\n                             ),\n                             full_range: 210..217,\n-                            focus_range: 210..217,\n                             name: \"foo0\",\n                             kind: Function,\n                         },\n@@ -1554,7 +1551,6 @@ foo!();\n                                 0,\n                             ),\n                             full_range: 210..217,\n-                            focus_range: 210..217,\n                             name: \"foo1\",\n                             kind: Function,\n                         },\n@@ -1575,7 +1571,6 @@ foo!();\n                                 0,\n                             ),\n                             full_range: 210..217,\n-                            focus_range: 210..217,\n                             name: \"foo2\",\n                             kind: Function,\n                         },"}, {"sha": "a6f7c09af8be172123e42e2b5f50665fc64fdf77", "filename": "crates/ide_db/src/rename.rs", "status": "modified", "additions": 20, "deletions": 32, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/8dd3a71730161869d8da3694f3338042efa17d29/crates%2Fide_db%2Fsrc%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dd3a71730161869d8da3694f3338042efa17d29/crates%2Fide_db%2Fsrc%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Frename.rs?ref=8dd3a71730161869d8da3694f3338042efa17d29", "patch": "@@ -81,53 +81,42 @@ impl Definition {\n     /// `Definition`. Note that some definitions, like buitin types, can't be\n     /// renamed.\n     pub fn range_for_rename(self, sema: &Semantics<RootDatabase>) -> Option<FileRange> {\n-        // FIXME: the `original_file_range` calls here are wrong -- they never fail,\n-        // and _fall back_ to the entirety of the macro call. Such fall back is\n-        // incorrect for renames. The safe behavior would be to return an error for\n-        // such cases. The correct behavior would be to return an auxiliary list of\n-        // \"can't rename these occurrences in macros\" items, and then show some kind\n-        // of a dialog to the user. See:\n-        cov_mark::hit!(macros_are_broken_lol);\n-\n         let res = match self {\n             Definition::Macro(mac) => {\n                 let src = mac.source(sema.db)?;\n                 let name = match &src.value {\n                     Either::Left(it) => it.name()?,\n                     Either::Right(it) => it.name()?,\n                 };\n-                src.with_value(name.syntax()).original_file_range(sema.db)\n+                src.with_value(name.syntax()).original_file_range_opt(sema.db)\n             }\n             Definition::Field(field) => {\n                 let src = field.source(sema.db)?;\n-\n                 match &src.value {\n                     FieldSource::Named(record_field) => {\n                         let name = record_field.name()?;\n-                        src.with_value(name.syntax()).original_file_range(sema.db)\n-                    }\n-                    FieldSource::Pos(_) => {\n-                        return None;\n+                        src.with_value(name.syntax()).original_file_range_opt(sema.db)\n                     }\n+                    FieldSource::Pos(_) => None,\n                 }\n             }\n             Definition::ModuleDef(module_def) => match module_def {\n                 hir::ModuleDef::Module(module) => {\n                     let src = module.declaration_source(sema.db)?;\n                     let name = src.value.name()?;\n-                    src.with_value(name.syntax()).original_file_range(sema.db)\n+                    src.with_value(name.syntax()).original_file_range_opt(sema.db)\n                 }\n-                hir::ModuleDef::Function(it) => name_range(it, sema)?,\n+                hir::ModuleDef::Function(it) => name_range(it, sema),\n                 hir::ModuleDef::Adt(adt) => match adt {\n-                    hir::Adt::Struct(it) => name_range(it, sema)?,\n-                    hir::Adt::Union(it) => name_range(it, sema)?,\n-                    hir::Adt::Enum(it) => name_range(it, sema)?,\n+                    hir::Adt::Struct(it) => name_range(it, sema),\n+                    hir::Adt::Union(it) => name_range(it, sema),\n+                    hir::Adt::Enum(it) => name_range(it, sema),\n                 },\n-                hir::ModuleDef::Variant(it) => name_range(it, sema)?,\n-                hir::ModuleDef::Const(it) => name_range(it, sema)?,\n-                hir::ModuleDef::Static(it) => name_range(it, sema)?,\n-                hir::ModuleDef::Trait(it) => name_range(it, sema)?,\n-                hir::ModuleDef::TypeAlias(it) => name_range(it, sema)?,\n+                hir::ModuleDef::Variant(it) => name_range(it, sema),\n+                hir::ModuleDef::Const(it) => name_range(it, sema),\n+                hir::ModuleDef::Static(it) => name_range(it, sema),\n+                hir::ModuleDef::Trait(it) => name_range(it, sema),\n+                hir::ModuleDef::TypeAlias(it) => name_range(it, sema),\n                 hir::ModuleDef::BuiltinType(_) => return None,\n             },\n             Definition::SelfType(_) => return None,\n@@ -137,7 +126,7 @@ impl Definition {\n                     Either::Left(bind_pat) => bind_pat.name()?,\n                     Either::Right(_) => return None,\n                 };\n-                src.with_value(name.syntax()).original_file_range(sema.db)\n+                src.with_value(name.syntax()).original_file_range_opt(sema.db)\n             }\n             Definition::GenericParam(generic_param) => match generic_param {\n                 hir::GenericParam::TypeParam(type_param) => {\n@@ -146,22 +135,22 @@ impl Definition {\n                         Either::Left(type_param) => type_param.name()?,\n                         Either::Right(_trait) => return None,\n                     };\n-                    src.with_value(name.syntax()).original_file_range(sema.db)\n+                    src.with_value(name.syntax()).original_file_range_opt(sema.db)\n                 }\n                 hir::GenericParam::LifetimeParam(lifetime_param) => {\n                     let src = lifetime_param.source(sema.db)?;\n                     let lifetime = src.value.lifetime()?;\n-                    src.with_value(lifetime.syntax()).original_file_range(sema.db)\n+                    src.with_value(lifetime.syntax()).original_file_range_opt(sema.db)\n                 }\n-                hir::GenericParam::ConstParam(it) => name_range(it, sema)?,\n+                hir::GenericParam::ConstParam(it) => name_range(it, sema),\n             },\n             Definition::Label(label) => {\n                 let src = label.source(sema.db);\n                 let lifetime = src.value.lifetime()?;\n-                src.with_value(lifetime.syntax()).original_file_range(sema.db)\n+                src.with_value(lifetime.syntax()).original_file_range_opt(sema.db)\n             }\n         };\n-        return Some(res);\n+        return res;\n \n         fn name_range<D>(def: D, sema: &Semantics<RootDatabase>) -> Option<FileRange>\n         where\n@@ -170,8 +159,7 @@ impl Definition {\n         {\n             let src = def.source(sema.db)?;\n             let name = src.value.name()?;\n-            let res = src.with_value(name.syntax()).original_file_range(sema.db);\n-            Some(res)\n+            src.with_value(name.syntax()).original_file_range_opt(sema.db)\n         }\n     }\n }"}]}