{"sha": "691aeaad6c9ee3483f2851695379b348b8a92a43", "node_id": "C_kwDOAAsO6NoAKDY5MWFlYWFkNmM5ZWUzNDgzZjI4NTE2OTUzNzliMzQ4YjhhOTJhNDM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-10T09:12:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-10T09:12:06Z"}, "message": "Auto merge of #102875 - Dylan-DPC:rollup-zwcq8h9, r=Dylan-DPC\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #99696 (Uplift `clippy::for_loops_over_fallibles` lint into rustc)\n - #102055 (Move some tests to more reasonable directories)\n - #102786 (Remove tuple candidate, nothing special about it)\n - #102794 (Make tests capture the error printed by a Result return)\n - #102853 (Skip chained OpaqueCast when building captures.)\n - #102868 (Rename `AssocItemKind::TyAlias` to `AssocItemKind::Type`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "644a0f96f905d8e219e89cb7c06f1272e6731d56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/644a0f96f905d8e219e89cb7c06f1272e6731d56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/691aeaad6c9ee3483f2851695379b348b8a92a43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/691aeaad6c9ee3483f2851695379b348b8a92a43", "html_url": "https://github.com/rust-lang/rust/commit/691aeaad6c9ee3483f2851695379b348b8a92a43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/691aeaad6c9ee3483f2851695379b348b8a92a43/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8dfb40722da197e77a33a19eb9d3fd6512831341", "url": "https://api.github.com/repos/rust-lang/rust/commits/8dfb40722da197e77a33a19eb9d3fd6512831341", "html_url": "https://github.com/rust-lang/rust/commit/8dfb40722da197e77a33a19eb9d3fd6512831341"}, {"sha": "81b9d0b1d11d5a43c9d5ba1791040bbb597b7cdf", "url": "https://api.github.com/repos/rust-lang/rust/commits/81b9d0b1d11d5a43c9d5ba1791040bbb597b7cdf", "html_url": "https://github.com/rust-lang/rust/commit/81b9d0b1d11d5a43c9d5ba1791040bbb597b7cdf"}], "stats": {"total": 1099, "additions": 478, "deletions": 621}, "files": [{"sha": "340302766d2451b300285fd1607a3ed1a060b0ae", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/691aeaad6c9ee3483f2851695379b348b8a92a43/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691aeaad6c9ee3483f2851695379b348b8a92a43/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=691aeaad6c9ee3483f2851695379b348b8a92a43", "patch": "@@ -2953,7 +2953,7 @@ pub enum AssocItemKind {\n     /// An associated function.\n     Fn(Box<Fn>),\n     /// An associated type.\n-    TyAlias(Box<TyAlias>),\n+    Type(Box<TyAlias>),\n     /// A macro expanding to associated items.\n     MacCall(P<MacCall>),\n }\n@@ -2963,7 +2963,7 @@ impl AssocItemKind {\n         match *self {\n             Self::Const(defaultness, ..)\n             | Self::Fn(box Fn { defaultness, .. })\n-            | Self::TyAlias(box TyAlias { defaultness, .. }) => defaultness,\n+            | Self::Type(box TyAlias { defaultness, .. }) => defaultness,\n             Self::MacCall(..) => Defaultness::Final,\n         }\n     }\n@@ -2974,7 +2974,7 @@ impl From<AssocItemKind> for ItemKind {\n         match assoc_item_kind {\n             AssocItemKind::Const(a, b, c) => ItemKind::Const(a, b, c),\n             AssocItemKind::Fn(fn_kind) => ItemKind::Fn(fn_kind),\n-            AssocItemKind::TyAlias(ty_alias_kind) => ItemKind::TyAlias(ty_alias_kind),\n+            AssocItemKind::Type(ty_alias_kind) => ItemKind::TyAlias(ty_alias_kind),\n             AssocItemKind::MacCall(a) => ItemKind::MacCall(a),\n         }\n     }\n@@ -2987,7 +2987,7 @@ impl TryFrom<ItemKind> for AssocItemKind {\n         Ok(match item_kind {\n             ItemKind::Const(a, b, c) => AssocItemKind::Const(a, b, c),\n             ItemKind::Fn(fn_kind) => AssocItemKind::Fn(fn_kind),\n-            ItemKind::TyAlias(ty_alias_kind) => AssocItemKind::TyAlias(ty_alias_kind),\n+            ItemKind::TyAlias(ty_kind) => AssocItemKind::Type(ty_kind),\n             ItemKind::MacCall(a) => AssocItemKind::MacCall(a),\n             _ => return Err(item_kind),\n         })"}, {"sha": "25022a02f4bb7e4793e0c0b6d1e74711378f05f5", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/691aeaad6c9ee3483f2851695379b348b8a92a43/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691aeaad6c9ee3483f2851695379b348b8a92a43/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=691aeaad6c9ee3483f2851695379b348b8a92a43", "patch": "@@ -1106,7 +1106,7 @@ pub fn noop_flat_map_assoc_item<T: MutVisitor>(\n             visit_fn_sig(sig, visitor);\n             visit_opt(body, |body| visitor.visit_block(body));\n         }\n-        AssocItemKind::TyAlias(box TyAlias {\n+        AssocItemKind::Type(box TyAlias {\n             defaultness,\n             generics,\n             where_clauses,"}, {"sha": "e752cc7dc2dcd6ab34d398c8fd6f09670caccb12", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/691aeaad6c9ee3483f2851695379b348b8a92a43/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691aeaad6c9ee3483f2851695379b348b8a92a43/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=691aeaad6c9ee3483f2851695379b348b8a92a43", "patch": "@@ -244,14 +244,12 @@ pub trait Visitor<'ast>: Sized {\n \n #[macro_export]\n macro_rules! walk_list {\n-    ($visitor: expr, $method: ident, $list: expr) => {\n-        for elem in $list {\n-            $visitor.$method(elem)\n-        }\n-    };\n-    ($visitor: expr, $method: ident, $list: expr, $($extra_args: expr),*) => {\n-        for elem in $list {\n-            $visitor.$method(elem, $($extra_args,)*)\n+    ($visitor: expr, $method: ident, $list: expr $(, $($extra_args: expr),* )?) => {\n+        {\n+            #[cfg_attr(not(bootstrap), allow(for_loops_over_fallibles))]\n+            for elem in $list {\n+                $visitor.$method(elem $(, $($extra_args,)* )?)\n+            }\n         }\n     }\n }\n@@ -685,7 +683,7 @@ pub fn walk_assoc_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a AssocItem,\n             let kind = FnKind::Fn(FnCtxt::Assoc(ctxt), ident, sig, vis, generics, body.as_deref());\n             visitor.visit_fn(kind, span, id);\n         }\n-        AssocItemKind::TyAlias(box TyAlias { generics, bounds, ty, .. }) => {\n+        AssocItemKind::Type(box TyAlias { generics, bounds, ty, .. }) => {\n             visitor.visit_generics(generics);\n             walk_list!(visitor, visit_param_bound, bounds, BoundKind::Bound);\n             walk_list!(visitor, visit_ty, ty);"}, {"sha": "56d71aaa7d332c48ce46cd1ad37a3c9e129f577f", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/691aeaad6c9ee3483f2851695379b348b8a92a43/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691aeaad6c9ee3483f2851695379b348b8a92a43/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=691aeaad6c9ee3483f2851695379b348b8a92a43", "patch": "@@ -804,7 +804,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 );\n                 (generics, hir::TraitItemKind::Fn(sig, hir::TraitFn::Provided(body_id)), true)\n             }\n-            AssocItemKind::TyAlias(box TyAlias {\n+            AssocItemKind::Type(box TyAlias {\n                 ref generics,\n                 where_clauses,\n                 ref bounds,\n@@ -850,7 +850,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     fn lower_trait_item_ref(&mut self, i: &AssocItem) -> hir::TraitItemRef {\n         let kind = match &i.kind {\n             AssocItemKind::Const(..) => hir::AssocItemKind::Const,\n-            AssocItemKind::TyAlias(..) => hir::AssocItemKind::Type,\n+            AssocItemKind::Type(..) => hir::AssocItemKind::Type,\n             AssocItemKind::Fn(box Fn { sig, .. }) => {\n                 hir::AssocItemKind::Fn { has_self: sig.decl.has_self() }\n             }\n@@ -898,7 +898,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n                 (generics, hir::ImplItemKind::Fn(sig, body_id))\n             }\n-            AssocItemKind::TyAlias(box TyAlias { generics, where_clauses, ty, .. }) => {\n+            AssocItemKind::Type(box TyAlias { generics, where_clauses, ty, .. }) => {\n                 let mut generics = generics.clone();\n                 add_ty_alias_where_clause(&mut generics, *where_clauses, false);\n                 self.lower_generics(\n@@ -941,7 +941,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             span: self.lower_span(i.span),\n             kind: match &i.kind {\n                 AssocItemKind::Const(..) => hir::AssocItemKind::Const,\n-                AssocItemKind::TyAlias(..) => hir::AssocItemKind::Type,\n+                AssocItemKind::Type(..) => hir::AssocItemKind::Type,\n                 AssocItemKind::Fn(box Fn { sig, .. }) => {\n                     hir::AssocItemKind::Fn { has_self: sig.decl.has_self() }\n                 }"}, {"sha": "1a4c60087c3851417cda8d33784a6daeaf37589a", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/691aeaad6c9ee3483f2851695379b348b8a92a43/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691aeaad6c9ee3483f2851695379b348b8a92a43/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=691aeaad6c9ee3483f2851695379b348b8a92a43", "patch": "@@ -1556,7 +1556,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                         });\n                     }\n                 }\n-                AssocItemKind::TyAlias(box TyAlias {\n+                AssocItemKind::Type(box TyAlias {\n                     generics,\n                     where_clauses,\n                     where_predicates_split,\n@@ -1595,7 +1595,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         }\n \n         match item.kind {\n-            AssocItemKind::TyAlias(box TyAlias { ref generics, ref bounds, ref ty, .. })\n+            AssocItemKind::Type(box TyAlias { ref generics, ref bounds, ref ty, .. })\n                 if ctxt == AssocCtxt::Trait =>\n             {\n                 self.visit_vis(&item.vis);"}, {"sha": "0f11c1766528a004db5fc63a4b96441f8bd573b3", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/691aeaad6c9ee3483f2851695379b348b8a92a43/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691aeaad6c9ee3483f2851695379b348b8a92a43/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=691aeaad6c9ee3483f2851695379b348b8a92a43", "patch": "@@ -517,7 +517,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n     fn visit_assoc_item(&mut self, i: &'a ast::AssocItem, ctxt: AssocCtxt) {\n         let is_fn = match i.kind {\n             ast::AssocItemKind::Fn(_) => true,\n-            ast::AssocItemKind::TyAlias(box ast::TyAlias { ref ty, .. }) => {\n+            ast::AssocItemKind::Type(box ast::TyAlias { ref ty, .. }) => {\n                 if let (Some(_), AssocCtxt::Trait) = (ty, ctxt) {\n                     gate_feature_post!(\n                         &self,"}, {"sha": "159853c9e245984cb122bfac9191b84e685e3d99", "filename": "compiler/rustc_ast_pretty/src/pprust/state/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/691aeaad6c9ee3483f2851695379b348b8a92a43/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691aeaad6c9ee3483f2851695379b348b8a92a43/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs?ref=691aeaad6c9ee3483f2851695379b348b8a92a43", "patch": "@@ -516,7 +516,7 @@ impl<'a> State<'a> {\n             ast::AssocItemKind::Const(def, ty, body) => {\n                 self.print_item_const(ident, None, ty, body.as_deref(), vis, *def);\n             }\n-            ast::AssocItemKind::TyAlias(box ast::TyAlias {\n+            ast::AssocItemKind::Type(box ast::TyAlias {\n                 defaultness,\n                 generics,\n                 where_clauses,"}, {"sha": "16ee3aa89bb1237967b3a7a16e2c65bd447ca8de", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/691aeaad6c9ee3483f2851695379b348b8a92a43/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691aeaad6c9ee3483f2851695379b348b8a92a43/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=691aeaad6c9ee3483f2851695379b348b8a92a43", "patch": "@@ -566,7 +566,7 @@ impl<'a> TraitDef<'a> {\n                     tokens: None,\n                 },\n                 attrs: ast::AttrVec::new(),\n-                kind: ast::AssocItemKind::TyAlias(Box::new(ast::TyAlias {\n+                kind: ast::AssocItemKind::Type(Box::new(ast::TyAlias {\n                     defaultness: ast::Defaultness::Final,\n                     generics: Generics::default(),\n                     where_clauses: ("}, {"sha": "ed8d424e0c62d489f30906b770c0fd54d3eaced2", "filename": "compiler/rustc_lint/src/for_loops_over_fallibles.rs", "status": "added", "additions": 183, "deletions": 0, "changes": 183, "blob_url": "https://github.com/rust-lang/rust/blob/691aeaad6c9ee3483f2851695379b348b8a92a43/compiler%2Frustc_lint%2Fsrc%2Ffor_loops_over_fallibles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691aeaad6c9ee3483f2851695379b348b8a92a43/compiler%2Frustc_lint%2Fsrc%2Ffor_loops_over_fallibles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ffor_loops_over_fallibles.rs?ref=691aeaad6c9ee3483f2851695379b348b8a92a43", "patch": "@@ -0,0 +1,183 @@\n+use crate::{LateContext, LateLintPass, LintContext};\n+\n+use hir::{Expr, Pat};\n+use rustc_errors::{Applicability, DelayDm};\n+use rustc_hir as hir;\n+use rustc_infer::traits::TraitEngine;\n+use rustc_infer::{infer::TyCtxtInferExt, traits::ObligationCause};\n+use rustc_middle::ty::{self, List};\n+use rustc_span::{sym, Span};\n+use rustc_trait_selection::traits::TraitEngineExt;\n+\n+declare_lint! {\n+    /// The `for_loops_over_fallibles` lint checks for `for` loops over `Option` or `Result` values.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust\n+    /// let opt = Some(1);\n+    /// for x in opt { /* ... */}\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// Both `Option` and `Result` implement `IntoIterator` trait, which allows using them in a `for` loop.\n+    /// `for` loop over `Option` or `Result` will iterate either 0 (if the value is `None`/`Err(_)`)\n+    /// or 1 time (if the value is `Some(_)`/`Ok(_)`). This is not very useful and is more clearly expressed\n+    /// via `if let`.\n+    ///\n+    /// `for` loop can also be accidentally written with the intention to call a function multiple times,\n+    /// while the function returns `Some(_)`, in these cases `while let` loop should be used instead.\n+    ///\n+    /// The \"intended\" use of `IntoIterator` implementations for `Option` and `Result` is passing them to\n+    /// generic code that expects something implementing `IntoIterator`. For example using `.chain(option)`\n+    /// to optionally add a value to an iterator.\n+    pub FOR_LOOPS_OVER_FALLIBLES,\n+    Warn,\n+    \"for-looping over an `Option` or a `Result`, which is more clearly expressed as an `if let`\"\n+}\n+\n+declare_lint_pass!(ForLoopsOverFallibles => [FOR_LOOPS_OVER_FALLIBLES]);\n+\n+impl<'tcx> LateLintPass<'tcx> for ForLoopsOverFallibles {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n+        let Some((pat, arg)) = extract_for_loop(expr) else { return };\n+\n+        let ty = cx.typeck_results().expr_ty(arg);\n+\n+        let &ty::Adt(adt, substs) = ty.kind() else { return };\n+\n+        let (article, ty, var) = match adt.did() {\n+            did if cx.tcx.is_diagnostic_item(sym::Option, did) => (\"an\", \"Option\", \"Some\"),\n+            did if cx.tcx.is_diagnostic_item(sym::Result, did) => (\"a\", \"Result\", \"Ok\"),\n+            _ => return,\n+        };\n+\n+        let msg = DelayDm(|| {\n+            format!(\n+                \"for loop over {article} `{ty}`. This is more readably written as an `if let` statement\",\n+            )\n+        });\n+\n+        cx.struct_span_lint(FOR_LOOPS_OVER_FALLIBLES, arg.span, msg, |lint| {\n+            if let Some(recv) = extract_iterator_next_call(cx, arg)\n+            && let Ok(recv_snip) = cx.sess().source_map().span_to_snippet(recv.span)\n+            {\n+                lint.span_suggestion(\n+                    recv.span.between(arg.span.shrink_to_hi()),\n+                    format!(\"to iterate over `{recv_snip}` remove the call to `next`\"),\n+                    \".by_ref()\",\n+                    Applicability::MaybeIncorrect\n+                );\n+            } else {\n+                lint.multipart_suggestion_verbose(\n+                    format!(\"to check pattern in a loop use `while let`\"),\n+                    vec![\n+                        // NB can't use `until` here because `expr.span` and `pat.span` have different syntax contexts\n+                        (expr.span.with_hi(pat.span.lo()), format!(\"while let {var}(\")),\n+                        (pat.span.between(arg.span), format!(\") = \")),\n+                    ],\n+                    Applicability::MaybeIncorrect\n+                );\n+            }\n+\n+            if suggest_question_mark(cx, adt, substs, expr.span) {\n+                lint.span_suggestion(\n+                    arg.span.shrink_to_hi(),\n+                    \"consider unwrapping the `Result` with `?` to iterate over its contents\",\n+                    \"?\",\n+                    Applicability::MaybeIncorrect,\n+                );\n+            }\n+\n+            lint.multipart_suggestion_verbose(\n+                \"consider using `if let` to clear intent\",\n+                vec![\n+                    // NB can't use `until` here because `expr.span` and `pat.span` have different syntax contexts\n+                    (expr.span.with_hi(pat.span.lo()), format!(\"if let {var}(\")),\n+                    (pat.span.between(arg.span), format!(\") = \")),\n+                ],\n+                Applicability::MaybeIncorrect,\n+            )\n+        })\n+    }\n+}\n+\n+fn extract_for_loop<'tcx>(expr: &Expr<'tcx>) -> Option<(&'tcx Pat<'tcx>, &'tcx Expr<'tcx>)> {\n+    if let hir::ExprKind::DropTemps(e) = expr.kind\n+    && let hir::ExprKind::Match(iterexpr, [arm], hir::MatchSource::ForLoopDesugar) = e.kind\n+    && let hir::ExprKind::Call(_, [arg]) = iterexpr.kind\n+    && let hir::ExprKind::Loop(block, ..) = arm.body.kind\n+    && let [stmt] = block.stmts\n+    && let hir::StmtKind::Expr(e) = stmt.kind\n+    && let hir::ExprKind::Match(_, [_, some_arm], _) = e.kind\n+    && let hir::PatKind::Struct(_, [field], _) = some_arm.pat.kind\n+    {\n+        Some((field.pat, arg))\n+    } else {\n+        None\n+    }\n+}\n+\n+fn extract_iterator_next_call<'tcx>(\n+    cx: &LateContext<'_>,\n+    expr: &Expr<'tcx>,\n+) -> Option<&'tcx Expr<'tcx>> {\n+    // This won't work for `Iterator::next(iter)`, is this an issue?\n+    if let hir::ExprKind::MethodCall(_, recv, _, _) = expr.kind\n+    && cx.typeck_results().type_dependent_def_id(expr.hir_id) == cx.tcx.lang_items().next_fn()\n+    {\n+        Some(recv)\n+    } else {\n+        return None\n+    }\n+}\n+\n+fn suggest_question_mark<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    adt: ty::AdtDef<'tcx>,\n+    substs: &List<ty::GenericArg<'tcx>>,\n+    span: Span,\n+) -> bool {\n+    let Some(body_id) = cx.enclosing_body else { return false };\n+    let Some(into_iterator_did) = cx.tcx.get_diagnostic_item(sym::IntoIterator) else { return false };\n+\n+    if !cx.tcx.is_diagnostic_item(sym::Result, adt.did()) {\n+        return false;\n+    }\n+\n+    // Check that the function/closure/constant we are in has a `Result` type.\n+    // Otherwise suggesting using `?` may not be a good idea.\n+    {\n+        let ty = cx.typeck_results().expr_ty(&cx.tcx.hir().body(body_id).value);\n+        let ty::Adt(ret_adt, ..) = ty.kind() else { return false };\n+        if !cx.tcx.is_diagnostic_item(sym::Result, ret_adt.did()) {\n+            return false;\n+        }\n+    }\n+\n+    let ty = substs.type_at(0);\n+    let infcx = cx.tcx.infer_ctxt().build();\n+    let mut fulfill_cx = <dyn TraitEngine<'_>>::new(infcx.tcx);\n+\n+    let cause = ObligationCause::new(\n+        span,\n+        body_id.hir_id,\n+        rustc_infer::traits::ObligationCauseCode::MiscObligation,\n+    );\n+    fulfill_cx.register_bound(\n+        &infcx,\n+        ty::ParamEnv::empty(),\n+        // Erase any region vids from the type, which may not be resolved\n+        infcx.tcx.erase_regions(ty),\n+        into_iterator_did,\n+        cause,\n+    );\n+\n+    // Select all, including ambiguous predicates\n+    let errors = fulfill_cx.select_all_or_error(&infcx);\n+\n+    errors.is_empty()\n+}"}, {"sha": "fee6e080c4fc7c377145d63dc24faa77ebd36460", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/691aeaad6c9ee3483f2851695379b348b8a92a43/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691aeaad6c9ee3483f2851695379b348b8a92a43/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=691aeaad6c9ee3483f2851695379b348b8a92a43", "patch": "@@ -52,6 +52,7 @@ mod early;\n mod enum_intrinsics_non_enums;\n mod errors;\n mod expect;\n+mod for_loops_over_fallibles;\n pub mod hidden_unicode_codepoints;\n mod internal;\n mod late;\n@@ -86,6 +87,7 @@ use rustc_span::Span;\n use array_into_iter::ArrayIntoIter;\n use builtin::*;\n use enum_intrinsics_non_enums::EnumIntrinsicsNonEnums;\n+use for_loops_over_fallibles::*;\n use hidden_unicode_codepoints::*;\n use internal::*;\n use let_underscore::*;\n@@ -188,6 +190,7 @@ macro_rules! late_lint_mod_passes {\n         $macro!(\n             $args,\n             [\n+                ForLoopsOverFallibles: ForLoopsOverFallibles,\n                 HardwiredLints: HardwiredLints,\n                 ImproperCTypesDeclarations: ImproperCTypesDeclarations,\n                 ImproperCTypesDefinitions: ImproperCTypesDefinitions,"}, {"sha": "6b32e78b910dbf69477a4d6d1e4604fd233ef2bc", "filename": "compiler/rustc_lint/src/nonstandard_style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/691aeaad6c9ee3483f2851695379b348b8a92a43/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691aeaad6c9ee3483f2851695379b348b8a92a43/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs?ref=691aeaad6c9ee3483f2851695379b348b8a92a43", "patch": "@@ -187,7 +187,7 @@ impl EarlyLintPass for NonCamelCaseTypes {\n     }\n \n     fn check_trait_item(&mut self, cx: &EarlyContext<'_>, it: &ast::AssocItem) {\n-        if let ast::AssocItemKind::TyAlias(..) = it.kind {\n+        if let ast::AssocItemKind::Type(..) = it.kind {\n             self.check_case(cx, \"associated type\", &it.ident);\n         }\n     }"}, {"sha": "a635e0463e5f9e5399b2944a2707b86f99ef7481", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/691aeaad6c9ee3483f2851695379b348b8a92a43/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691aeaad6c9ee3483f2851695379b348b8a92a43/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=691aeaad6c9ee3483f2851695379b348b8a92a43", "patch": "@@ -664,10 +664,6 @@ pub enum ImplSource<'tcx, N> {\n \n     /// ImplSource for a `const Drop` implementation.\n     ConstDestruct(ImplSourceConstDestructData<N>),\n-\n-    /// ImplSource for a `std::marker::Tuple` implementation.\n-    /// This has no nested predicates ever, so no data.\n-    Tuple,\n }\n \n impl<'tcx, N> ImplSource<'tcx, N> {\n@@ -682,8 +678,7 @@ impl<'tcx, N> ImplSource<'tcx, N> {\n             ImplSource::Object(d) => d.nested,\n             ImplSource::FnPointer(d) => d.nested,\n             ImplSource::DiscriminantKind(ImplSourceDiscriminantKindData)\n-            | ImplSource::Pointee(ImplSourcePointeeData)\n-            | ImplSource::Tuple => Vec::new(),\n+            | ImplSource::Pointee(ImplSourcePointeeData) => vec![],\n             ImplSource::TraitAlias(d) => d.nested,\n             ImplSource::TraitUpcasting(d) => d.nested,\n             ImplSource::ConstDestruct(i) => i.nested,\n@@ -701,8 +696,7 @@ impl<'tcx, N> ImplSource<'tcx, N> {\n             ImplSource::Object(d) => &d.nested,\n             ImplSource::FnPointer(d) => &d.nested,\n             ImplSource::DiscriminantKind(ImplSourceDiscriminantKindData)\n-            | ImplSource::Pointee(ImplSourcePointeeData)\n-            | ImplSource::Tuple => &[],\n+            | ImplSource::Pointee(ImplSourcePointeeData) => &[],\n             ImplSource::TraitAlias(d) => &d.nested,\n             ImplSource::TraitUpcasting(d) => &d.nested,\n             ImplSource::ConstDestruct(i) => &i.nested,\n@@ -769,7 +763,6 @@ impl<'tcx, N> ImplSource<'tcx, N> {\n                     nested: i.nested.into_iter().map(f).collect(),\n                 })\n             }\n-            ImplSource::Tuple => ImplSource::Tuple,\n         }\n     }\n }"}, {"sha": "85ead3171e785fca3148a741506b37092df176ae", "filename": "compiler/rustc_middle/src/traits/select.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/691aeaad6c9ee3483f2851695379b348b8a92a43/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691aeaad6c9ee3483f2851695379b348b8a92a43/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs?ref=691aeaad6c9ee3483f2851695379b348b8a92a43", "patch": "@@ -161,9 +161,6 @@ pub enum SelectionCandidate<'tcx> {\n \n     /// Implementation of `const Destruct`, optionally from a custom `impl const Drop`.\n     ConstDestructCandidate(Option<DefId>),\n-\n-    /// Witnesses the fact that a type is a tuple.\n-    TupleCandidate,\n }\n \n /// The result of trait evaluation. The order is important"}, {"sha": "7fbd57ac7354aa2691dfec008de1a25618e355ea", "filename": "compiler/rustc_middle/src/traits/structural_impls.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/691aeaad6c9ee3483f2851695379b348b8a92a43/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691aeaad6c9ee3483f2851695379b348b8a92a43/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fstructural_impls.rs?ref=691aeaad6c9ee3483f2851695379b348b8a92a43", "patch": "@@ -34,8 +34,6 @@ impl<'tcx, N: fmt::Debug> fmt::Debug for traits::ImplSource<'tcx, N> {\n             super::ImplSource::TraitUpcasting(ref d) => write!(f, \"{:?}\", d),\n \n             super::ImplSource::ConstDestruct(ref d) => write!(f, \"{:?}\", d),\n-\n-            super::ImplSource::Tuple => write!(f, \"ImplSource::Tuple\"),\n         }\n     }\n }"}, {"sha": "396782d45d2891277e0d233afc149db6a693d35f", "filename": "compiler/rustc_mir_build/src/build/expr/as_place.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/691aeaad6c9ee3483f2851695379b348b8a92a43/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691aeaad6c9ee3483f2851695379b348b8a92a43/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs?ref=691aeaad6c9ee3483f2851695379b348b8a92a43", "patch": "@@ -17,6 +17,7 @@ use rustc_target::abi::VariantIdx;\n \n use rustc_index::vec::Idx;\n \n+use std::assert_matches::assert_matches;\n use std::iter;\n \n /// The \"outermost\" place that holds this value.\n@@ -232,22 +233,20 @@ fn strip_prefix<'tcx>(\n     projections: Vec<PlaceElem<'tcx>>,\n     prefix_projections: &[HirProjection<'tcx>],\n ) -> impl Iterator<Item = PlaceElem<'tcx>> {\n-    let mut iter = projections.into_iter();\n-    let mut next = || match iter.next()? {\n+    let mut iter = projections\n+        .into_iter()\n         // Filter out opaque casts, they are unnecessary in the prefix.\n-        ProjectionElem::OpaqueCast(..) => iter.next(),\n-        other => Some(other),\n-    };\n+        .filter(|elem| !matches!(elem, ProjectionElem::OpaqueCast(..)));\n     for projection in prefix_projections {\n         match projection.kind {\n             HirProjectionKind::Deref => {\n-                assert!(matches!(next(), Some(ProjectionElem::Deref)));\n+                assert_matches!(iter.next(), Some(ProjectionElem::Deref));\n             }\n             HirProjectionKind::Field(..) => {\n                 if base_ty.is_enum() {\n-                    assert!(matches!(next(), Some(ProjectionElem::Downcast(..))));\n+                    assert_matches!(iter.next(), Some(ProjectionElem::Downcast(..)));\n                 }\n-                assert!(matches!(next(), Some(ProjectionElem::Field(..))));\n+                assert_matches!(iter.next(), Some(ProjectionElem::Field(..)));\n             }\n             HirProjectionKind::Index | HirProjectionKind::Subslice => {\n                 bug!(\"unexpected projection kind: {:?}\", projection);"}, {"sha": "b53bd3d0710a6ad15c242d60d1d0633203aa3773", "filename": "compiler/rustc_mir_build/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/691aeaad6c9ee3483f2851695379b348b8a92a43/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691aeaad6c9ee3483f2851695379b348b8a92a43/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs?ref=691aeaad6c9ee3483f2851695379b348b8a92a43", "patch": "@@ -2,6 +2,7 @@\n //!\n //! This crate also contains the match exhaustiveness and usefulness checking.\n #![allow(rustc::potential_query_instability)]\n+#![feature(assert_matches)]\n #![feature(box_patterns)]\n #![feature(control_flow_enum)]\n #![feature(if_let_guard)]"}, {"sha": "33220fd2b395dd0c32de941878104d5728d91f50", "filename": "compiler/rustc_passes/src/hir_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/691aeaad6c9ee3483f2851695379b348b8a92a43/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691aeaad6c9ee3483f2851695379b348b8a92a43/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs?ref=691aeaad6c9ee3483f2851695379b348b8a92a43", "patch": "@@ -620,7 +620,7 @@ impl<'v> ast_visit::Visitor<'v> for StatCollector<'v> {\n     fn visit_assoc_item(&mut self, i: &'v ast::AssocItem, ctxt: ast_visit::AssocCtxt) {\n         record_variants!(\n             (self, i, i.kind, Id::None, ast, AssocItem, AssocItemKind),\n-            [Const, Fn, TyAlias, MacCall]\n+            [Const, Fn, Type, MacCall]\n         );\n         ast_visit::walk_assoc_item(self, i, ctxt);\n     }"}, {"sha": "c3d87b5b6af3c6300c9e3f0a8f5062bfbdd245d5", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/691aeaad6c9ee3483f2851695379b348b8a92a43/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691aeaad6c9ee3483f2851695379b348b8a92a43/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=691aeaad6c9ee3483f2851695379b348b8a92a43", "patch": "@@ -1425,7 +1425,7 @@ impl<'a, 'b> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b> {\n                     }\n                     (DefKind::AssocFn, ValueNS)\n                 }\n-                AssocItemKind::TyAlias(..) => (DefKind::AssocTy, TypeNS),\n+                AssocItemKind::Type(..) => (DefKind::AssocTy, TypeNS),\n                 AssocItemKind::MacCall(_) => bug!(), // handled above\n             };\n "}, {"sha": "d36e0f61d9161967b94106cb90bd59e63bb7a7ef", "filename": "compiler/rustc_resolve/src/def_collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/691aeaad6c9ee3483f2851695379b348b8a92a43/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691aeaad6c9ee3483f2851695379b348b8a92a43/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs?ref=691aeaad6c9ee3483f2851695379b348b8a92a43", "patch": "@@ -239,7 +239,7 @@ impl<'a, 'b> visit::Visitor<'a> for DefCollector<'a, 'b> {\n     fn visit_assoc_item(&mut self, i: &'a AssocItem, ctxt: visit::AssocCtxt) {\n         let def_data = match &i.kind {\n             AssocItemKind::Fn(..) | AssocItemKind::Const(..) => DefPathData::ValueNs(i.ident.name),\n-            AssocItemKind::TyAlias(..) => DefPathData::TypeNs(i.ident.name),\n+            AssocItemKind::Type(..) => DefPathData::TypeNs(i.ident.name),\n             AssocItemKind::MacCall(..) => return self.visit_macro_invoc(i.id),\n         };\n "}, {"sha": "989a827ef7d9f77fcc51df96062242d591a41799", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/691aeaad6c9ee3483f2851695379b348b8a92a43/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691aeaad6c9ee3483f2851695379b348b8a92a43/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=691aeaad6c9ee3483f2851695379b348b8a92a43", "patch": "@@ -2498,7 +2498,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 AssocItemKind::Fn(box Fn { generics, .. }) => {\n                     walk_assoc_item(self, generics, LifetimeBinderKind::Function, item);\n                 }\n-                AssocItemKind::TyAlias(box TyAlias { generics, .. }) => self\n+                AssocItemKind::Type(box TyAlias { generics, .. }) => self\n                     .with_lifetime_rib(LifetimeRibKind::AnonymousReportError, |this| {\n                         walk_assoc_item(this, generics, LifetimeBinderKind::Item, item)\n                     }),\n@@ -2694,8 +2694,8 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                     },\n                 );\n             }\n-            AssocItemKind::TyAlias(box TyAlias { generics, .. }) => {\n-                debug!(\"resolve_implementation AssocItemKind::TyAlias\");\n+            AssocItemKind::Type(box TyAlias { generics, .. }) => {\n+                debug!(\"resolve_implementation AssocItemKind::Type\");\n                 // We also need a new scope for the impl item type parameters.\n                 self.with_generic_param_rib(\n                     &generics.params,\n@@ -2770,7 +2770,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         let res = binding.res();\n         let Res::Def(def_kind, _) = res else { bug!() };\n         match (def_kind, kind) {\n-            (DefKind::AssocTy, AssocItemKind::TyAlias(..))\n+            (DefKind::AssocTy, AssocItemKind::Type(..))\n             | (DefKind::AssocFn, AssocItemKind::Fn(..))\n             | (DefKind::AssocConst, AssocItemKind::Const(..)) => {\n                 self.r.record_partial_res(id, PartialRes::new(res));\n@@ -2784,7 +2784,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         let (code, kind) = match kind {\n             AssocItemKind::Const(..) => (rustc_errors::error_code!(E0323), \"const\"),\n             AssocItemKind::Fn(..) => (rustc_errors::error_code!(E0324), \"method\"),\n-            AssocItemKind::TyAlias(..) => (rustc_errors::error_code!(E0325), \"type\"),\n+            AssocItemKind::Type(..) => (rustc_errors::error_code!(E0325), \"type\"),\n             AssocItemKind::MacCall(..) => span_bug!(span, \"unexpanded macro\"),\n         };\n         let trait_path = path_names_to_string(path);"}, {"sha": "c05f89a65755f8630c1573468522826d0879d49f", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/691aeaad6c9ee3483f2851695379b348b8a92a43/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691aeaad6c9ee3483f2851695379b348b8a92a43/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=691aeaad6c9ee3483f2851695379b348b8a92a43", "patch": "@@ -1482,7 +1482,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n             .filter(|(_, res)| match (kind, res) {\n                 (AssocItemKind::Const(..), Res::Def(DefKind::AssocConst, _)) => true,\n                 (AssocItemKind::Fn(_), Res::Def(DefKind::AssocFn, _)) => true,\n-                (AssocItemKind::TyAlias(..), Res::Def(DefKind::AssocTy, _)) => true,\n+                (AssocItemKind::Type(..), Res::Def(DefKind::AssocTy, _)) => true,\n                 _ => false,\n             })\n             .map(|(key, _)| key.ident.name)\n@@ -1546,7 +1546,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                             AssocSuggestion::MethodWithSelf\n                         }\n                         ast::AssocItemKind::Fn(..) => AssocSuggestion::AssocFn,\n-                        ast::AssocItemKind::TyAlias(..) => AssocSuggestion::AssocType,\n+                        ast::AssocItemKind::Type(..) => AssocSuggestion::AssocType,\n                         ast::AssocItemKind::MacCall(_) => continue,\n                     });\n                 }"}, {"sha": "e1485079487cf92fa8de25aa1ba74dad509de308", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/691aeaad6c9ee3483f2851695379b348b8a92a43/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691aeaad6c9ee3483f2851695379b348b8a92a43/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=691aeaad6c9ee3483f2851695379b348b8a92a43", "patch": "@@ -1750,8 +1750,7 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n             super::ImplSource::AutoImpl(..)\n             | super::ImplSource::Builtin(..)\n             | super::ImplSource::TraitUpcasting(_)\n-            | super::ImplSource::ConstDestruct(_)\n-            | super::ImplSource::Tuple => {\n+            | super::ImplSource::ConstDestruct(_) => {\n                 // These traits have no associated types.\n                 selcx.tcx().sess.delay_span_bug(\n                     obligation.cause.span,\n@@ -1829,8 +1828,7 @@ fn confirm_select_candidate<'cx, 'tcx>(\n         | super::ImplSource::Builtin(..)\n         | super::ImplSource::TraitUpcasting(_)\n         | super::ImplSource::TraitAlias(..)\n-        | super::ImplSource::ConstDestruct(_)\n-        | super::ImplSource::Tuple => {\n+        | super::ImplSource::ConstDestruct(_) => {\n             // we don't create Select candidates with this kind of resolution\n             span_bug!(\n                 obligation.cause.span,"}, {"sha": "4c5bc333961dc76345898a8a8284cf1a53cd7284", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/691aeaad6c9ee3483f2851695379b348b8a92a43/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691aeaad6c9ee3483f2851695379b348b8a92a43/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=691aeaad6c9ee3483f2851695379b348b8a92a43", "patch": "@@ -1021,7 +1021,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let self_ty = self.infcx().shallow_resolve(obligation.self_ty().skip_binder());\n         match self_ty.kind() {\n             ty::Tuple(_) => {\n-                candidates.vec.push(TupleCandidate);\n+                candidates.vec.push(BuiltinCandidate { has_nested: false });\n             }\n             ty::Infer(ty::TyVar(_)) => {\n                 candidates.ambiguous = true;"}, {"sha": "ed22058c6461563fad6277da42cea73e5dba3672", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/691aeaad6c9ee3483f2851695379b348b8a92a43/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691aeaad6c9ee3483f2851695379b348b8a92a43/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=691aeaad6c9ee3483f2851695379b348b8a92a43", "patch": "@@ -126,8 +126,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 let data = self.confirm_const_destruct_candidate(obligation, def_id)?;\n                 ImplSource::ConstDestruct(data)\n             }\n-\n-            TupleCandidate => ImplSource::Tuple,\n         };\n \n         if !obligation.predicate.is_const_if_const() {"}, {"sha": "3f445f9ca464bbc53e633a5437bee56bdc69596f", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/691aeaad6c9ee3483f2851695379b348b8a92a43/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691aeaad6c9ee3483f2851695379b348b8a92a43/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=691aeaad6c9ee3483f2851695379b348b8a92a43", "patch": "@@ -1562,7 +1562,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         };\n \n         // (*) Prefer `BuiltinCandidate { has_nested: false }`, `PointeeCandidate`,\n-        // `DiscriminantKindCandidate`, `ConstDestructCandidate`, and `TupleCandidate`\n+        // `DiscriminantKindCandidate`, `ConstDestructCandidate`\n         // to anything else.\n         //\n         // This is a fix for #53123 and prevents winnowing from accidentally extending the\n@@ -1583,17 +1583,15 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 BuiltinCandidate { has_nested: false }\n                 | DiscriminantKindCandidate\n                 | PointeeCandidate\n-                | ConstDestructCandidate(_)\n-                | TupleCandidate,\n+                | ConstDestructCandidate(_),\n                 _,\n             ) => true,\n             (\n                 _,\n                 BuiltinCandidate { has_nested: false }\n                 | DiscriminantKindCandidate\n                 | PointeeCandidate\n-                | ConstDestructCandidate(_)\n-                | TupleCandidate,\n+                | ConstDestructCandidate(_),\n             ) => false,\n \n             (ParamCandidate(other), ParamCandidate(victim)) => {"}, {"sha": "416c1ec510b0ead36a8bebdb0131fe92c386f280", "filename": "compiler/rustc_ty_utils/src/instance.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/691aeaad6c9ee3483f2851695379b348b8a92a43/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691aeaad6c9ee3483f2851695379b348b8a92a43/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs?ref=691aeaad6c9ee3483f2851695379b348b8a92a43", "patch": "@@ -267,8 +267,7 @@ fn resolve_associated_item<'tcx>(\n         | traits::ImplSource::DiscriminantKind(..)\n         | traits::ImplSource::Pointee(..)\n         | traits::ImplSource::TraitUpcasting(_)\n-        | traits::ImplSource::ConstDestruct(_)\n-        | traits::ImplSource::Tuple => None,\n+        | traits::ImplSource::ConstDestruct(_) => None,\n     })\n }\n "}, {"sha": "f36f7c268064f27e7b97cbfa1187803ec5811f66", "filename": "library/core/tests/option.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/691aeaad6c9ee3483f2851695379b348b8a92a43/library%2Fcore%2Ftests%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691aeaad6c9ee3483f2851695379b348b8a92a43/library%2Fcore%2Ftests%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Foption.rs?ref=691aeaad6c9ee3483f2851695379b348b8a92a43", "patch": "@@ -57,6 +57,7 @@ fn test_get_resource() {\n }\n \n #[test]\n+#[cfg_attr(not(bootstrap), allow(for_loops_over_fallibles))]\n fn test_option_dance() {\n     let x = Some(());\n     let mut y = Some(5);"}, {"sha": "cceef539b90c7bca0241e9c0861d38e3eda0f00e", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/691aeaad6c9ee3483f2851695379b348b8a92a43/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691aeaad6c9ee3483f2851695379b348b8a92a43/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=691aeaad6c9ee3483f2851695379b348b8a92a43", "patch": "@@ -262,6 +262,7 @@ use crate::sys_common::memchr;\n \n #[stable(feature = \"bufwriter_into_parts\", since = \"1.56.0\")]\n pub use self::buffered::WriterPanicked;\n+pub(crate) use self::stdio::attempt_print_to_stderr;\n #[unstable(feature = \"internal_output_capture\", issue = \"none\")]\n #[doc(no_inline, hidden)]\n pub use self::stdio::set_output_capture;"}, {"sha": "4ccb2bf3231f53a92bdfc70cd89c5c7ff291204c", "filename": "library/std/src/io/stdio.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/691aeaad6c9ee3483f2851695379b348b8a92a43/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691aeaad6c9ee3483f2851695379b348b8a92a43/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs?ref=691aeaad6c9ee3483f2851695379b348b8a92a43", "patch": "@@ -999,7 +999,18 @@ fn print_to<T>(args: fmt::Arguments<'_>, global_s: fn() -> T, label: &str)\n where\n     T: Write,\n {\n-    if OUTPUT_CAPTURE_USED.load(Ordering::Relaxed)\n+    if print_to_buffer_if_capture_used(args) {\n+        // Successfully wrote to capture buffer.\n+        return;\n+    }\n+\n+    if let Err(e) = global_s().write_fmt(args) {\n+        panic!(\"failed printing to {label}: {e}\");\n+    }\n+}\n+\n+fn print_to_buffer_if_capture_used(args: fmt::Arguments<'_>) -> bool {\n+    OUTPUT_CAPTURE_USED.load(Ordering::Relaxed)\n         && OUTPUT_CAPTURE.try_with(|s| {\n             // Note that we completely remove a local sink to write to in case\n             // our printing recursively panics/prints, so the recursive\n@@ -1009,14 +1020,19 @@ where\n                 s.set(Some(w));\n             })\n         }) == Ok(Some(()))\n-    {\n-        // Successfully wrote to capture buffer.\n+}\n+\n+/// Used by impl Termination for Result to print error after `main` or a test\n+/// has returned. Should avoid panicking, although we can't help it if one of\n+/// the Display impls inside args decides to.\n+pub(crate) fn attempt_print_to_stderr(args: fmt::Arguments<'_>) {\n+    if print_to_buffer_if_capture_used(args) {\n         return;\n     }\n \n-    if let Err(e) = global_s().write_fmt(args) {\n-        panic!(\"failed printing to {label}: {e}\");\n-    }\n+    // Ignore error if the write fails, for example because stderr is already\n+    // closed. There is not much point panicking at this point.\n+    let _ = stderr().write_fmt(args);\n }\n \n #[unstable("}, {"sha": "e08ea8f9a5fc9fde9d422d35fede1608e94fea3b", "filename": "library/std/src/process.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/691aeaad6c9ee3483f2851695379b348b8a92a43/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691aeaad6c9ee3483f2851695379b348b8a92a43/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=691aeaad6c9ee3483f2851695379b348b8a92a43", "patch": "@@ -2200,9 +2200,7 @@ impl<T: Termination, E: fmt::Debug> Termination for Result<T, E> {\n         match self {\n             Ok(val) => val.report(),\n             Err(err) => {\n-                // Ignore error if the write fails, for example because stderr is\n-                // already closed. There is not much point panicking at this point.\n-                let _ = writeln!(io::stderr(), \"Error: {err:?}\");\n+                io::attempt_print_to_stderr(format_args_nl!(\"Error: {err:?}\"));\n                 ExitCode::FAILURE\n             }\n         }"}, {"sha": "02ca02da8ed61b1f9276dd24e1ab615dcc01d123", "filename": "src/test/ui/async-await/issue-73541-3.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/691aeaad6c9ee3483f2851695379b348b8a92a43/src%2Ftest%2Fui%2Fasync-await%2Fissue-73541-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691aeaad6c9ee3483f2851695379b348b8a92a43/src%2Ftest%2Fui%2Fasync-await%2Fissue-73541-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-73541-3.rs?ref=691aeaad6c9ee3483f2851695379b348b8a92a43", "previous_filename": "src/test/ui/issues/issue-73541-3.rs"}, {"sha": "53487aaca998c4b4511369de5f35fc2b5ac3d2df", "filename": "src/test/ui/async-await/issue-73541-3.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/691aeaad6c9ee3483f2851695379b348b8a92a43/src%2Ftest%2Fui%2Fasync-await%2Fissue-73541-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/691aeaad6c9ee3483f2851695379b348b8a92a43/src%2Ftest%2Fui%2Fasync-await%2Fissue-73541-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-73541-3.stderr?ref=691aeaad6c9ee3483f2851695379b348b8a92a43", "previous_filename": "src/test/ui/issues/issue-73541-3.stderr"}, {"sha": "399a07cd3fcc893041158c34e703894ac1709d02", "filename": "src/test/ui/async-await/issue-73541.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/691aeaad6c9ee3483f2851695379b348b8a92a43/src%2Ftest%2Fui%2Fasync-await%2Fissue-73541.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691aeaad6c9ee3483f2851695379b348b8a92a43/src%2Ftest%2Fui%2Fasync-await%2Fissue-73541.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-73541.rs?ref=691aeaad6c9ee3483f2851695379b348b8a92a43", "previous_filename": "src/test/ui/issues/issue-73541.rs"}, {"sha": "4bb466ff16c58c653ba37d2469bd64c2040d6d5d", "filename": "src/test/ui/async-await/issue-73541.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/691aeaad6c9ee3483f2851695379b348b8a92a43/src%2Ftest%2Fui%2Fasync-await%2Fissue-73541.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/691aeaad6c9ee3483f2851695379b348b8a92a43/src%2Ftest%2Fui%2Fasync-await%2Fissue-73541.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-73541.stderr?ref=691aeaad6c9ee3483f2851695379b348b8a92a43", "previous_filename": "src/test/ui/issues/issue-73541.stderr"}, {"sha": "043bf06a1f521633faa266f71d3dc9c5d3704458", "filename": "src/test/ui/closures/issue-102089-multiple-opaque-cast.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/691aeaad6c9ee3483f2851695379b348b8a92a43/src%2Ftest%2Fui%2Fclosures%2Fissue-102089-multiple-opaque-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691aeaad6c9ee3483f2851695379b348b8a92a43/src%2Ftest%2Fui%2Fclosures%2Fissue-102089-multiple-opaque-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-102089-multiple-opaque-cast.rs?ref=691aeaad6c9ee3483f2851695379b348b8a92a43", "patch": "@@ -0,0 +1,17 @@\n+// edition:2021\n+// check-pass\n+\n+pub struct Example<'a, T> {\n+  a: T,\n+  b: &'a T,\n+}\n+\n+impl<'a, T> Example<'a, T> {\n+  pub fn error_trying_to_destructure_self_in_closure(self) {\n+    let closure = || {\n+      let Self { a, b } = self;\n+    };\n+  }\n+}\n+\n+fn main() {}"}, {"sha": "6a0fe7784fbcc37b8193d198ab9ed227d3b8a12d", "filename": "src/test/ui/drop/dropck_legal_cycles.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/691aeaad6c9ee3483f2851695379b348b8a92a43/src%2Ftest%2Fui%2Fdrop%2Fdropck_legal_cycles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691aeaad6c9ee3483f2851695379b348b8a92a43/src%2Ftest%2Fui%2Fdrop%2Fdropck_legal_cycles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Fdropck_legal_cycles.rs?ref=691aeaad6c9ee3483f2851695379b348b8a92a43", "patch": "@@ -1017,7 +1017,7 @@ impl<'a> Children<'a> for HM<'a> {\n         where C: Context + PrePost<Self>, Self: Sized\n     {\n         if let Some(ref hm) = self.contents.get() {\n-            for (k, v) in hm.iter().nth(index / 2) {\n+            if let Some((k, v)) = hm.iter().nth(index / 2) {\n                 [k, v][index % 2].descend_into_self(context);\n             }\n         }\n@@ -1032,7 +1032,7 @@ impl<'a> Children<'a> for VD<'a> {\n         where C: Context + PrePost<Self>, Self: Sized\n     {\n         if let Some(ref vd) = self.contents.get() {\n-            for r in vd.iter().nth(index) {\n+            if let Some(r) = vd.iter().nth(index) {\n                 r.descend_into_self(context);\n             }\n         }\n@@ -1047,7 +1047,7 @@ impl<'a> Children<'a> for VM<'a> {\n         where C: Context + PrePost<VM<'a>>\n     {\n         if let Some(ref vd) = self.contents.get() {\n-            for (_idx, r) in vd.iter().nth(index) {\n+            if let Some((_idx, r)) = vd.iter().nth(index) {\n                 r.descend_into_self(context);\n             }\n         }\n@@ -1062,7 +1062,7 @@ impl<'a> Children<'a> for LL<'a> {\n         where C: Context + PrePost<LL<'a>>\n     {\n         if let Some(ref ll) = self.contents.get() {\n-            for r in ll.iter().nth(index) {\n+            if let Some(r) = ll.iter().nth(index) {\n                 r.descend_into_self(context);\n             }\n         }\n@@ -1077,7 +1077,7 @@ impl<'a> Children<'a> for BH<'a> {\n         where C: Context + PrePost<BH<'a>>\n     {\n         if let Some(ref bh) = self.contents.get() {\n-            for r in bh.iter().nth(index) {\n+            if let Some(r) = bh.iter().nth(index) {\n                 r.descend_into_self(context);\n             }\n         }\n@@ -1092,7 +1092,7 @@ impl<'a> Children<'a> for BTM<'a> {\n         where C: Context + PrePost<BTM<'a>>\n     {\n         if let Some(ref bh) = self.contents.get() {\n-            for (k, v) in bh.iter().nth(index / 2) {\n+            if let Some((k, v)) = bh.iter().nth(index / 2) {\n                 [k, v][index % 2].descend_into_self(context);\n             }\n         }\n@@ -1107,7 +1107,7 @@ impl<'a> Children<'a> for BTS<'a> {\n         where C: Context + PrePost<BTS<'a>>\n     {\n         if let Some(ref bh) = self.contents.get() {\n-            for r in bh.iter().nth(index) {\n+            if let Some(r) = bh.iter().nth(index) {\n                 r.descend_into_self(context);\n             }\n         }"}, {"sha": "eea548c482ff2f9ffc08d61331b0dd873b8df9dc", "filename": "src/test/ui/issues/issue-30371.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/691aeaad6c9ee3483f2851695379b348b8a92a43/src%2Ftest%2Fui%2Fissues%2Fissue-30371.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691aeaad6c9ee3483f2851695379b348b8a92a43/src%2Ftest%2Fui%2Fissues%2Fissue-30371.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-30371.rs?ref=691aeaad6c9ee3483f2851695379b348b8a92a43", "patch": "@@ -1,5 +1,6 @@\n // run-pass\n #![allow(unreachable_code)]\n+#![allow(for_loops_over_fallibles)]\n #![deny(unused_variables)]\n \n fn main() {"}, {"sha": "88a449b85b86a5a37abfa348e958f01c09e9be95", "filename": "src/test/ui/issues/issue-3563-2.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8dfb40722da197e77a33a19eb9d3fd6512831341/src%2Ftest%2Fui%2Fissues%2Fissue-3563-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dfb40722da197e77a33a19eb9d3fd6512831341/src%2Ftest%2Fui%2Fissues%2Fissue-3563-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3563-2.rs?ref=8dfb40722da197e77a33a19eb9d3fd6512831341", "patch": "@@ -1,14 +0,0 @@\n-// check-pass\n-// pretty-expanded FIXME #23616\n-\n-trait Canvas {\n-    fn add_point(&self, point: &isize);\n-    fn add_points(&self, shapes: &[isize]) {\n-        for pt in shapes {\n-            self.add_point(pt)\n-        }\n-    }\n-\n-}\n-\n-pub fn main() {}"}, {"sha": "43d71c2e808a91d5c261aba452ad9808671f735f", "filename": "src/test/ui/lint/for_loop_over_fallibles.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/691aeaad6c9ee3483f2851695379b348b8a92a43/src%2Ftest%2Fui%2Flint%2Ffor_loop_over_fallibles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691aeaad6c9ee3483f2851695379b348b8a92a43/src%2Ftest%2Fui%2Flint%2Ffor_loop_over_fallibles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ffor_loop_over_fallibles.rs?ref=691aeaad6c9ee3483f2851695379b348b8a92a43", "patch": "@@ -0,0 +1,43 @@\n+// check-pass\n+\n+fn main() {\n+    // Common\n+    for _ in Some(1) {}\n+    //~^ WARN for loop over an `Option`. This is more readably written as an `if let` statement\n+    //~| HELP to check pattern in a loop use `while let`\n+    //~| HELP consider using `if let` to clear intent\n+    for _ in Ok::<_, ()>(1) {}\n+    //~^ WARN for loop over a `Result`. This is more readably written as an `if let` statement\n+    //~| HELP to check pattern in a loop use `while let`\n+    //~| HELP consider using `if let` to clear intent\n+\n+    // `Iterator::next` specific\n+    for _ in [0; 0].iter().next() {}\n+    //~^ WARN for loop over an `Option`. This is more readably written as an `if let` statement\n+    //~| HELP to iterate over `[0; 0].iter()` remove the call to `next`\n+    //~| HELP consider using `if let` to clear intent\n+\n+    // `Result<impl Iterator, _>`, but function doesn't return `Result`\n+    for _ in Ok::<_, ()>([0; 0].iter()) {}\n+    //~^ WARN for loop over a `Result`. This is more readably written as an `if let` statement\n+    //~| HELP to check pattern in a loop use `while let`\n+    //~| HELP consider using `if let` to clear intent\n+}\n+\n+fn _returns_result() -> Result<(), ()> {\n+    // `Result<impl Iterator, _>`\n+    for _ in Ok::<_, ()>([0; 0].iter()) {}\n+    //~^ WARN for loop over a `Result`. This is more readably written as an `if let` statement\n+    //~| HELP to check pattern in a loop use `while let`\n+    //~| HELP consider unwrapping the `Result` with `?` to iterate over its contents\n+    //~| HELP consider using `if let` to clear intent\n+\n+    // `Result<impl IntoIterator>`\n+    for _ in Ok::<_, ()>([0; 0]) {}\n+    //~^ WARN for loop over a `Result`. This is more readably written as an `if let` statement\n+    //~| HELP to check pattern in a loop use `while let`\n+    //~| HELP consider unwrapping the `Result` with `?` to iterate over its contents\n+    //~| HELP consider using `if let` to clear intent\n+\n+    Ok(())\n+}"}, {"sha": "96efdf85c490195fa84c51f3191990fe51f10c18", "filename": "src/test/ui/lint/for_loop_over_fallibles.stderr", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/691aeaad6c9ee3483f2851695379b348b8a92a43/src%2Ftest%2Fui%2Flint%2Ffor_loop_over_fallibles.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/691aeaad6c9ee3483f2851695379b348b8a92a43/src%2Ftest%2Fui%2Flint%2Ffor_loop_over_fallibles.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ffor_loop_over_fallibles.stderr?ref=691aeaad6c9ee3483f2851695379b348b8a92a43", "patch": "@@ -0,0 +1,101 @@\n+warning: for loop over an `Option`. This is more readably written as an `if let` statement\n+  --> $DIR/for_loop_over_fallibles.rs:5:14\n+   |\n+LL |     for _ in Some(1) {}\n+   |              ^^^^^^^\n+   |\n+   = note: `#[warn(for_loops_over_fallibles)]` on by default\n+help: to check pattern in a loop use `while let`\n+   |\n+LL |     while let Some(_) = Some(1) {}\n+   |     ~~~~~~~~~~~~~~~ ~~~\n+help: consider using `if let` to clear intent\n+   |\n+LL |     if let Some(_) = Some(1) {}\n+   |     ~~~~~~~~~~~~ ~~~\n+\n+warning: for loop over a `Result`. This is more readably written as an `if let` statement\n+  --> $DIR/for_loop_over_fallibles.rs:9:14\n+   |\n+LL |     for _ in Ok::<_, ()>(1) {}\n+   |              ^^^^^^^^^^^^^^\n+   |\n+help: to check pattern in a loop use `while let`\n+   |\n+LL |     while let Ok(_) = Ok::<_, ()>(1) {}\n+   |     ~~~~~~~~~~~~~ ~~~\n+help: consider using `if let` to clear intent\n+   |\n+LL |     if let Ok(_) = Ok::<_, ()>(1) {}\n+   |     ~~~~~~~~~~ ~~~\n+\n+warning: for loop over an `Option`. This is more readably written as an `if let` statement\n+  --> $DIR/for_loop_over_fallibles.rs:15:14\n+   |\n+LL |     for _ in [0; 0].iter().next() {}\n+   |              ^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: to iterate over `[0; 0].iter()` remove the call to `next`\n+   |\n+LL |     for _ in [0; 0].iter().by_ref() {}\n+   |                           ~~~~~~~~~\n+help: consider using `if let` to clear intent\n+   |\n+LL |     if let Some(_) = [0; 0].iter().next() {}\n+   |     ~~~~~~~~~~~~ ~~~\n+\n+warning: for loop over a `Result`. This is more readably written as an `if let` statement\n+  --> $DIR/for_loop_over_fallibles.rs:21:14\n+   |\n+LL |     for _ in Ok::<_, ()>([0; 0].iter()) {}\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: to check pattern in a loop use `while let`\n+   |\n+LL |     while let Ok(_) = Ok::<_, ()>([0; 0].iter()) {}\n+   |     ~~~~~~~~~~~~~ ~~~\n+help: consider using `if let` to clear intent\n+   |\n+LL |     if let Ok(_) = Ok::<_, ()>([0; 0].iter()) {}\n+   |     ~~~~~~~~~~ ~~~\n+\n+warning: for loop over a `Result`. This is more readably written as an `if let` statement\n+  --> $DIR/for_loop_over_fallibles.rs:29:14\n+   |\n+LL |     for _ in Ok::<_, ()>([0; 0].iter()) {}\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: to check pattern in a loop use `while let`\n+   |\n+LL |     while let Ok(_) = Ok::<_, ()>([0; 0].iter()) {}\n+   |     ~~~~~~~~~~~~~ ~~~\n+help: consider unwrapping the `Result` with `?` to iterate over its contents\n+   |\n+LL |     for _ in Ok::<_, ()>([0; 0].iter())? {}\n+   |                                        +\n+help: consider using `if let` to clear intent\n+   |\n+LL |     if let Ok(_) = Ok::<_, ()>([0; 0].iter()) {}\n+   |     ~~~~~~~~~~ ~~~\n+\n+warning: for loop over a `Result`. This is more readably written as an `if let` statement\n+  --> $DIR/for_loop_over_fallibles.rs:36:14\n+   |\n+LL |     for _ in Ok::<_, ()>([0; 0]) {}\n+   |              ^^^^^^^^^^^^^^^^^^^\n+   |\n+help: to check pattern in a loop use `while let`\n+   |\n+LL |     while let Ok(_) = Ok::<_, ()>([0; 0]) {}\n+   |     ~~~~~~~~~~~~~ ~~~\n+help: consider unwrapping the `Result` with `?` to iterate over its contents\n+   |\n+LL |     for _ in Ok::<_, ()>([0; 0])? {}\n+   |                                 +\n+help: consider using `if let` to clear intent\n+   |\n+LL |     if let Ok(_) = Ok::<_, ()>([0; 0]) {}\n+   |     ~~~~~~~~~~ ~~~\n+\n+warning: 6 warnings emitted\n+"}, {"sha": "eddd158aef0817d800679f6443fd4e11d14f7544", "filename": "src/test/ui/span/issue-7575.rs", "status": "removed", "additions": 0, "deletions": 75, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/8dfb40722da197e77a33a19eb9d3fd6512831341/src%2Ftest%2Fui%2Fspan%2Fissue-7575.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dfb40722da197e77a33a19eb9d3fd6512831341/src%2Ftest%2Fui%2Fspan%2Fissue-7575.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-7575.rs?ref=8dfb40722da197e77a33a19eb9d3fd6512831341", "patch": "@@ -1,75 +0,0 @@\n-// Test the mechanism for warning about possible missing `self` declarations.\n-trait CtxtFn {\n-    fn f8(self, _: usize) -> usize;\n-    fn f9(_: usize) -> usize;\n-}\n-\n-trait OtherTrait {\n-    fn f9(_: usize) -> usize;\n-}\n-\n-// Note: this trait is not implemented, but we can't really tell\n-// whether or not an impl would match anyhow without a self\n-// declaration to match against, so we wind up prisizeing it as a\n-// candidate. This seems not unreasonable -- perhaps the user meant to\n-// implement it, after all.\n-trait UnusedTrait {\n-    fn f9(_: usize) -> usize;\n-}\n-\n-impl CtxtFn for usize {\n-    fn f8(self, i: usize) -> usize {\n-        i * 4\n-    }\n-\n-    fn f9(i: usize) -> usize {\n-        i * 4\n-    }\n-}\n-\n-impl OtherTrait for usize {\n-    fn f9(i: usize) -> usize {\n-        i * 8\n-    }\n-}\n-\n-struct Myisize(isize);\n-\n-impl Myisize {\n-    fn fff(i: isize) -> isize {\n-        i\n-    }\n-}\n-\n-trait ManyImplTrait {\n-    fn is_str() -> bool {\n-        false\n-    }\n-}\n-\n-impl ManyImplTrait for String {\n-    fn is_str() -> bool {\n-        true\n-    }\n-}\n-\n-impl ManyImplTrait for usize {}\n-impl ManyImplTrait for isize {}\n-impl ManyImplTrait for char {}\n-impl ManyImplTrait for Myisize {}\n-\n-fn no_param_bound(u: usize, m: Myisize) -> usize {\n-    u.f8(42) + u.f9(342) + m.fff(42)\n-            //~^ ERROR no method named `f9` found\n-            //~| ERROR no method named `fff` found\n-\n-\n-}\n-\n-fn param_bound<T: ManyImplTrait>(t: T) -> bool {\n-    t.is_str()\n-    //~^ ERROR no method named `is_str` found\n-}\n-\n-fn main() {\n-}"}, {"sha": "4f30edb3f89d3d5e663d0a24b7373f3b5ed8979e", "filename": "src/test/ui/span/issue-7575.stderr", "status": "removed", "additions": 0, "deletions": 82, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/8dfb40722da197e77a33a19eb9d3fd6512831341/src%2Ftest%2Fui%2Fspan%2Fissue-7575.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8dfb40722da197e77a33a19eb9d3fd6512831341/src%2Ftest%2Fui%2Fspan%2Fissue-7575.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-7575.stderr?ref=8dfb40722da197e77a33a19eb9d3fd6512831341", "patch": "@@ -1,82 +0,0 @@\n-error[E0599]: no method named `f9` found for type `usize` in the current scope\n-  --> $DIR/issue-7575.rs:62:18\n-   |\n-LL |     u.f8(42) + u.f9(342) + m.fff(42)\n-   |                  ^^ this is an associated function, not a method\n-   |\n-   = note: found the following associated functions; to be used as methods, functions must have a `self` parameter\n-note: candidate #1 is defined in the trait `CtxtFn`\n-  --> $DIR/issue-7575.rs:4:5\n-   |\n-LL |     fn f9(_: usize) -> usize;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: candidate #2 is defined in the trait `OtherTrait`\n-  --> $DIR/issue-7575.rs:8:5\n-   |\n-LL |     fn f9(_: usize) -> usize;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: candidate #3 is defined in the trait `UnusedTrait`\n-  --> $DIR/issue-7575.rs:17:5\n-   |\n-LL |     fn f9(_: usize) -> usize;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: items from traits can only be used if the trait is implemented and in scope\n-   = note: the following traits define an item `f9`, perhaps you need to implement one of them:\n-           candidate #1: `CtxtFn`\n-           candidate #2: `OtherTrait`\n-           candidate #3: `UnusedTrait`\n-help: disambiguate the associated function for candidate #1\n-   |\n-LL |     u.f8(42) + <usize as CtxtFn>::f9(u, 342) + m.fff(42)\n-   |                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-help: disambiguate the associated function for candidate #2\n-   |\n-LL |     u.f8(42) + <usize as OtherTrait>::f9(u, 342) + m.fff(42)\n-   |                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-help: disambiguate the associated function for candidate #3\n-   |\n-LL |     u.f8(42) + <usize as UnusedTrait>::f9(u, 342) + m.fff(42)\n-   |                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-\n-error[E0599]: no method named `fff` found for struct `Myisize` in the current scope\n-  --> $DIR/issue-7575.rs:62:30\n-   |\n-LL | struct Myisize(isize);\n-   | -------------- method `fff` not found for this struct\n-...\n-LL |     u.f8(42) + u.f9(342) + m.fff(42)\n-   |                            --^^^\n-   |                            | |\n-   |                            | this is an associated function, not a method\n-   |                            help: use associated function syntax instead: `Myisize::fff`\n-   |\n-   = note: found the following associated functions; to be used as methods, functions must have a `self` parameter\n-note: the candidate is defined in an impl for the type `Myisize`\n-  --> $DIR/issue-7575.rs:39:5\n-   |\n-LL |     fn fff(i: isize) -> isize {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0599]: no method named `is_str` found for type parameter `T` in the current scope\n-  --> $DIR/issue-7575.rs:70:7\n-   |\n-LL | fn param_bound<T: ManyImplTrait>(t: T) -> bool {\n-   |                - method `is_str` not found for this type parameter\n-LL |     t.is_str()\n-   |       ^^^^^^ this is an associated function, not a method\n-   |\n-   = note: found the following associated functions; to be used as methods, functions must have a `self` parameter\n-note: the candidate is defined in the trait `ManyImplTrait`\n-  --> $DIR/issue-7575.rs:45:5\n-   |\n-LL |     fn is_str() -> bool {\n-   |     ^^^^^^^^^^^^^^^^^^^\n-   = help: items from traits can only be used if the type parameter is bounded by the trait\n-help: disambiguate the associated function for the candidate\n-   |\n-LL |     <T as ManyImplTrait>::is_str(t)\n-   |\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0599`."}, {"sha": "1521b692a7524908d1e481e81f29431d28fa5527", "filename": "src/test/ui/stats/hir-stats.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/691aeaad6c9ee3483f2851695379b348b8a92a43/src%2Ftest%2Fui%2Fstats%2Fhir-stats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/691aeaad6c9ee3483f2851695379b348b8a92a43/src%2Ftest%2Fui%2Fstats%2Fhir-stats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstats%2Fhir-stats.stderr?ref=691aeaad6c9ee3483f2851695379b348b8a92a43", "patch": "@@ -26,7 +26,7 @@ ast-stats-1 Block                    288 ( 3.4%)             6            48\n ast-stats-1 GenericBound             352 ( 4.2%)             4            88\n ast-stats-1 - Trait                    352 ( 4.2%)             4\n ast-stats-1 AssocItem                416 ( 4.9%)             4           104\n-ast-stats-1 - TyAlias                  208 ( 2.5%)             2\n+ast-stats-1 - Type                     208 ( 2.5%)             2\n ast-stats-1 - Fn                       208 ( 2.5%)             2\n ast-stats-1 GenericParam             480 ( 5.7%)             5            96\n ast-stats-1 PathSegment              720 ( 8.6%)            30            24\n@@ -84,7 +84,7 @@ ast-stats-2 Block                    288 ( 3.1%)             6            48\n ast-stats-2 GenericBound             352 ( 3.8%)             4            88\n ast-stats-2 - Trait                    352 ( 3.8%)             4\n ast-stats-2 AssocItem                416 ( 4.5%)             4           104\n-ast-stats-2 - TyAlias                  208 ( 2.3%)             2\n+ast-stats-2 - Type                     208 ( 2.3%)             2\n ast-stats-2 - Fn                       208 ( 2.3%)             2\n ast-stats-2 GenericParam             480 ( 5.2%)             5            96\n ast-stats-2 PathSegment              792 ( 8.7%)            33            24"}, {"sha": "55c26ccd2da4ac2263ed414ed457981ea5ac5225", "filename": "src/test/ui/traits/issue-43784-supertrait.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/691aeaad6c9ee3483f2851695379b348b8a92a43/src%2Ftest%2Fui%2Ftraits%2Fissue-43784-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691aeaad6c9ee3483f2851695379b348b8a92a43/src%2Ftest%2Fui%2Ftraits%2Fissue-43784-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-43784-supertrait.rs?ref=691aeaad6c9ee3483f2851695379b348b8a92a43", "previous_filename": "src/test/ui/issues/issue-43784-supertrait.rs"}, {"sha": "bb890cb99ee37a54f6a0c4ee2150443ac497bda9", "filename": "src/test/ui/traits/issue-43784-supertrait.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/691aeaad6c9ee3483f2851695379b348b8a92a43/src%2Ftest%2Fui%2Ftraits%2Fissue-43784-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/691aeaad6c9ee3483f2851695379b348b8a92a43/src%2Ftest%2Fui%2Ftraits%2Fissue-43784-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-43784-supertrait.stderr?ref=691aeaad6c9ee3483f2851695379b348b8a92a43", "previous_filename": "src/test/ui/issues/issue-43784-supertrait.stderr"}, {"sha": "fe1f0b56646cde331bafc0fa2c6f82fc6cf59072", "filename": "src/tools/clippy/clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/691aeaad6c9ee3483f2851695379b348b8a92a43/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691aeaad6c9ee3483f2851695379b348b8a92a43/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_all.rs?ref=691aeaad6c9ee3483f2851695379b348b8a92a43", "patch": "@@ -109,7 +109,6 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(loops::EMPTY_LOOP),\n     LintId::of(loops::EXPLICIT_COUNTER_LOOP),\n     LintId::of(loops::FOR_KV_MAP),\n-    LintId::of(loops::FOR_LOOPS_OVER_FALLIBLES),\n     LintId::of(loops::ITER_NEXT_LOOP),\n     LintId::of(loops::MANUAL_FIND),\n     LintId::of(loops::MANUAL_FLATTEN),"}, {"sha": "306cb6a61c94390c2f4d1c6db8067c2063f53728", "filename": "src/tools/clippy/clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/691aeaad6c9ee3483f2851695379b348b8a92a43/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691aeaad6c9ee3483f2851695379b348b8a92a43/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_lints.rs?ref=691aeaad6c9ee3483f2851695379b348b8a92a43", "patch": "@@ -227,7 +227,6 @@ store.register_lints(&[\n     loops::EXPLICIT_INTO_ITER_LOOP,\n     loops::EXPLICIT_ITER_LOOP,\n     loops::FOR_KV_MAP,\n-    loops::FOR_LOOPS_OVER_FALLIBLES,\n     loops::ITER_NEXT_LOOP,\n     loops::MANUAL_FIND,\n     loops::MANUAL_FLATTEN,"}, {"sha": "d6d95c95c85d2f7f065b97fceb2997521a2da61d", "filename": "src/tools/clippy/clippy_lints/src/lib.register_suspicious.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/691aeaad6c9ee3483f2851695379b348b8a92a43/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_suspicious.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691aeaad6c9ee3483f2851695379b348b8a92a43/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_suspicious.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_suspicious.rs?ref=691aeaad6c9ee3483f2851695379b348b8a92a43", "patch": "@@ -21,7 +21,6 @@ store.register_group(true, \"clippy::suspicious\", Some(\"clippy_suspicious\"), vec!\n     LintId::of(formatting::SUSPICIOUS_ELSE_FORMATTING),\n     LintId::of(formatting::SUSPICIOUS_UNARY_OP_FORMATTING),\n     LintId::of(loops::EMPTY_LOOP),\n-    LintId::of(loops::FOR_LOOPS_OVER_FALLIBLES),\n     LintId::of(loops::MUT_RANGE_BOUND),\n     LintId::of(methods::NO_EFFECT_REPLACE),\n     LintId::of(methods::SUSPICIOUS_MAP),"}, {"sha": "77de90fd7b94ac7fb196f388f21e29c097ba8e65", "filename": "src/tools/clippy/clippy_lints/src/loops/for_loops_over_fallibles.rs", "status": "removed", "additions": 0, "deletions": 65, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/8dfb40722da197e77a33a19eb9d3fd6512831341/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Ffor_loops_over_fallibles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dfb40722da197e77a33a19eb9d3fd6512831341/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Ffor_loops_over_fallibles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Ffor_loops_over_fallibles.rs?ref=8dfb40722da197e77a33a19eb9d3fd6512831341", "patch": "@@ -1,65 +0,0 @@\n-use super::FOR_LOOPS_OVER_FALLIBLES;\n-use clippy_utils::diagnostics::span_lint_and_help;\n-use clippy_utils::source::snippet;\n-use clippy_utils::ty::is_type_diagnostic_item;\n-use rustc_hir::{Expr, Pat};\n-use rustc_lint::LateContext;\n-use rustc_span::symbol::sym;\n-\n-/// Checks for `for` loops over `Option`s and `Result`s.\n-pub(super) fn check(cx: &LateContext<'_>, pat: &Pat<'_>, arg: &Expr<'_>, method_name: Option<&str>) {\n-    let ty = cx.typeck_results().expr_ty(arg);\n-    if is_type_diagnostic_item(cx, ty, sym::Option) {\n-        let help_string = if let Some(method_name) = method_name {\n-            format!(\n-                \"consider replacing `for {0} in {1}.{method_name}()` with `if let Some({0}) = {1}`\",\n-                snippet(cx, pat.span, \"_\"),\n-                snippet(cx, arg.span, \"_\")\n-            )\n-        } else {\n-            format!(\n-                \"consider replacing `for {0} in {1}` with `if let Some({0}) = {1}`\",\n-                snippet(cx, pat.span, \"_\"),\n-                snippet(cx, arg.span, \"_\")\n-            )\n-        };\n-        span_lint_and_help(\n-            cx,\n-            FOR_LOOPS_OVER_FALLIBLES,\n-            arg.span,\n-            &format!(\n-                \"for loop over `{0}`, which is an `Option`. This is more readably written as an \\\n-                `if let` statement\",\n-                snippet(cx, arg.span, \"_\")\n-            ),\n-            None,\n-            &help_string,\n-        );\n-    } else if is_type_diagnostic_item(cx, ty, sym::Result) {\n-        let help_string = if let Some(method_name) = method_name {\n-            format!(\n-                \"consider replacing `for {0} in {1}.{method_name}()` with `if let Ok({0}) = {1}`\",\n-                snippet(cx, pat.span, \"_\"),\n-                snippet(cx, arg.span, \"_\")\n-            )\n-        } else {\n-            format!(\n-                \"consider replacing `for {0} in {1}` with `if let Ok({0}) = {1}`\",\n-                snippet(cx, pat.span, \"_\"),\n-                snippet(cx, arg.span, \"_\")\n-            )\n-        };\n-        span_lint_and_help(\n-            cx,\n-            FOR_LOOPS_OVER_FALLIBLES,\n-            arg.span,\n-            &format!(\n-                \"for loop over `{0}`, which is a `Result`. This is more readably written as an \\\n-                `if let` statement\",\n-                snippet(cx, arg.span, \"_\")\n-            ),\n-            None,\n-            &help_string,\n-        );\n-    }\n-}"}, {"sha": "b8a263817d2971b218b922bdb55d090edcf30bce", "filename": "src/tools/clippy/clippy_lints/src/loops/iter_next_loop.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/691aeaad6c9ee3483f2851695379b348b8a92a43/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fiter_next_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691aeaad6c9ee3483f2851695379b348b8a92a43/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fiter_next_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fiter_next_loop.rs?ref=691aeaad6c9ee3483f2851695379b348b8a92a43", "patch": "@@ -5,7 +5,7 @@ use rustc_hir::Expr;\n use rustc_lint::LateContext;\n use rustc_span::sym;\n \n-pub(super) fn check(cx: &LateContext<'_>, arg: &Expr<'_>) -> bool {\n+pub(super) fn check(cx: &LateContext<'_>, arg: &Expr<'_>) {\n     if is_trait_method(cx, arg, sym::Iterator) {\n         span_lint(\n             cx,\n@@ -14,8 +14,5 @@ pub(super) fn check(cx: &LateContext<'_>, arg: &Expr<'_>) -> bool {\n             \"you are iterating over `Iterator::next()` which is an Option; this will compile but is \\\n             probably not what you want\",\n         );\n-        true\n-    } else {\n-        false\n     }\n }"}, {"sha": "bcf278d9c8339c374449c0168a885a139e98a74c", "filename": "src/tools/clippy/clippy_lints/src/loops/mod.rs", "status": "modified", "additions": 2, "deletions": 55, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/691aeaad6c9ee3483f2851695379b348b8a92a43/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691aeaad6c9ee3483f2851695379b348b8a92a43/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fmod.rs?ref=691aeaad6c9ee3483f2851695379b348b8a92a43", "patch": "@@ -3,7 +3,6 @@ mod explicit_counter_loop;\n mod explicit_into_iter_loop;\n mod explicit_iter_loop;\n mod for_kv_map;\n-mod for_loops_over_fallibles;\n mod iter_next_loop;\n mod manual_find;\n mod manual_flatten;\n@@ -173,49 +172,6 @@ declare_clippy_lint! {\n     \"for-looping over `_.next()` which is probably not intended\"\n }\n \n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Checks for `for` loops over `Option` or `Result` values.\n-    ///\n-    /// ### Why is this bad?\n-    /// Readability. This is more clearly expressed as an `if\n-    /// let`.\n-    ///\n-    /// ### Example\n-    /// ```rust\n-    /// # let opt = Some(1);\n-    /// # let res: Result<i32, std::io::Error> = Ok(1);\n-    /// for x in opt {\n-    ///     // ..\n-    /// }\n-    ///\n-    /// for x in &res {\n-    ///     // ..\n-    /// }\n-    ///\n-    /// for x in res.iter() {\n-    ///     // ..\n-    /// }\n-    /// ```\n-    ///\n-    /// Use instead:\n-    /// ```rust\n-    /// # let opt = Some(1);\n-    /// # let res: Result<i32, std::io::Error> = Ok(1);\n-    /// if let Some(x) = opt {\n-    ///     // ..\n-    /// }\n-    ///\n-    /// if let Ok(x) = res {\n-    ///     // ..\n-    /// }\n-    /// ```\n-    #[clippy::version = \"1.45.0\"]\n-    pub FOR_LOOPS_OVER_FALLIBLES,\n-    suspicious,\n-    \"for-looping over an `Option` or a `Result`, which is more clearly expressed as an `if let`\"\n-}\n-\n declare_clippy_lint! {\n     /// ### What it does\n     /// Detects `loop + match` combinations that are easier\n@@ -648,7 +604,6 @@ declare_lint_pass!(Loops => [\n     EXPLICIT_ITER_LOOP,\n     EXPLICIT_INTO_ITER_LOOP,\n     ITER_NEXT_LOOP,\n-    FOR_LOOPS_OVER_FALLIBLES,\n     WHILE_LET_LOOP,\n     NEEDLESS_COLLECT,\n     EXPLICIT_COUNTER_LOOP,\n@@ -739,30 +694,22 @@ fn check_for_loop<'tcx>(\n     manual_find::check(cx, pat, arg, body, span, expr);\n }\n \n-fn check_for_loop_arg(cx: &LateContext<'_>, pat: &Pat<'_>, arg: &Expr<'_>) {\n-    let mut next_loop_linted = false; // whether or not ITER_NEXT_LOOP lint was used\n-\n+fn check_for_loop_arg(cx: &LateContext<'_>, _: &Pat<'_>, arg: &Expr<'_>) {\n     if let ExprKind::MethodCall(method, self_arg, [], _) = arg.kind {\n         let method_name = method.ident.as_str();\n         // check for looping over x.iter() or x.iter_mut(), could use &x or &mut x\n         match method_name {\n             \"iter\" | \"iter_mut\" => {\n                 explicit_iter_loop::check(cx, self_arg, arg, method_name);\n-                for_loops_over_fallibles::check(cx, pat, self_arg, Some(method_name));\n             },\n             \"into_iter\" => {\n                 explicit_iter_loop::check(cx, self_arg, arg, method_name);\n                 explicit_into_iter_loop::check(cx, self_arg, arg);\n-                for_loops_over_fallibles::check(cx, pat, self_arg, Some(method_name));\n             },\n             \"next\" => {\n-                next_loop_linted = iter_next_loop::check(cx, arg);\n+                iter_next_loop::check(cx, arg);\n             },\n             _ => {},\n         }\n     }\n-\n-    if !next_loop_linted {\n-        for_loops_over_fallibles::check(cx, pat, arg, None);\n-    }\n }"}, {"sha": "76d6ad0b23e6a82ffb31259f35dac6356fe45977", "filename": "src/tools/clippy/clippy_lints/src/renamed_lints.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/691aeaad6c9ee3483f2851695379b348b8a92a43/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Frenamed_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691aeaad6c9ee3483f2851695379b348b8a92a43/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Frenamed_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Frenamed_lints.rs?ref=691aeaad6c9ee3483f2851695379b348b8a92a43", "patch": "@@ -11,8 +11,8 @@ pub static RENAMED_LINTS: &[(&str, &str)] = &[\n     (\"clippy::disallowed_method\", \"clippy::disallowed_methods\"),\n     (\"clippy::disallowed_type\", \"clippy::disallowed_types\"),\n     (\"clippy::eval_order_dependence\", \"clippy::mixed_read_write_in_expression\"),\n-    (\"clippy::for_loop_over_option\", \"clippy::for_loops_over_fallibles\"),\n-    (\"clippy::for_loop_over_result\", \"clippy::for_loops_over_fallibles\"),\n+    (\"clippy::for_loop_over_option\", \"for_loops_over_fallibles\"),\n+    (\"clippy::for_loop_over_result\", \"for_loops_over_fallibles\"),\n     (\"clippy::identity_conversion\", \"clippy::useless_conversion\"),\n     (\"clippy::if_let_some_result\", \"clippy::match_result_ok\"),\n     (\"clippy::logic_bug\", \"clippy::overly_complex_bool_expr\"),\n@@ -31,6 +31,7 @@ pub static RENAMED_LINTS: &[(&str, &str)] = &[\n     (\"clippy::to_string_in_display\", \"clippy::recursive_format_impl\"),\n     (\"clippy::zero_width_space\", \"clippy::invisible_characters\"),\n     (\"clippy::drop_bounds\", \"drop_bounds\"),\n+    (\"clippy::for_loops_over_fallibles\", \"for_loops_over_fallibles\"),\n     (\"clippy::into_iter_on_array\", \"array_into_iter\"),\n     (\"clippy::invalid_atomic_ordering\", \"invalid_atomic_ordering\"),\n     (\"clippy::invalid_ref\", \"invalid_value\"),"}, {"sha": "0133997560eae2120afcdc92060173576a4a7a03", "filename": "src/tools/clippy/clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/691aeaad6c9ee3483f2851695379b348b8a92a43/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691aeaad6c9ee3483f2851695379b348b8a92a43/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs?ref=691aeaad6c9ee3483f2851695379b348b8a92a43", "patch": "@@ -438,14 +438,14 @@ pub fn eq_assoc_item_kind(l: &AssocItemKind, r: &AssocItemKind) -> bool {\n             eq_defaultness(*ld, *rd) && eq_fn_sig(lf, rf) && eq_generics(lg, rg) && both(lb, rb, |l, r| eq_block(l, r))\n         },\n         (\n-            TyAlias(box ast::TyAlias {\n+            Type(box ast::TyAlias {\n                 defaultness: ld,\n                 generics: lg,\n                 bounds: lb,\n                 ty: lt,\n                 ..\n             }),\n-            TyAlias(box ast::TyAlias {\n+            Type(box ast::TyAlias {\n                 defaultness: rd,\n                 generics: rg,\n                 bounds: rb,"}, {"sha": "bd27bc7938f8ef5aeb0a02ab243f1dce20150240", "filename": "src/tools/clippy/src/docs.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/691aeaad6c9ee3483f2851695379b348b8a92a43/src%2Ftools%2Fclippy%2Fsrc%2Fdocs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691aeaad6c9ee3483f2851695379b348b8a92a43/src%2Ftools%2Fclippy%2Fsrc%2Fdocs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fsrc%2Fdocs.rs?ref=691aeaad6c9ee3483f2851695379b348b8a92a43", "patch": "@@ -170,7 +170,6 @@ docs! {\n     \"fn_to_numeric_cast_any\",\n     \"fn_to_numeric_cast_with_truncation\",\n     \"for_kv_map\",\n-    \"for_loops_over_fallibles\",\n     \"forget_copy\",\n     \"forget_non_drop\",\n     \"forget_ref\","}, {"sha": "c5a7508e45d40e58cef17a27e3f92a855dd0b398", "filename": "src/tools/clippy/src/docs/for_loops_over_fallibles.txt", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8dfb40722da197e77a33a19eb9d3fd6512831341/src%2Ftools%2Fclippy%2Fsrc%2Fdocs%2Ffor_loops_over_fallibles.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8dfb40722da197e77a33a19eb9d3fd6512831341/src%2Ftools%2Fclippy%2Fsrc%2Fdocs%2Ffor_loops_over_fallibles.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fsrc%2Fdocs%2Ffor_loops_over_fallibles.txt?ref=8dfb40722da197e77a33a19eb9d3fd6512831341", "patch": "@@ -1,32 +0,0 @@\n-### What it does\n-Checks for `for` loops over `Option` or `Result` values.\n-\n-### Why is this bad?\n-Readability. This is more clearly expressed as an `if\n-let`.\n-\n-### Example\n-```\n-for x in opt {\n-    // ..\n-}\n-\n-for x in &res {\n-    // ..\n-}\n-\n-for x in res.iter() {\n-    // ..\n-}\n-```\n-\n-Use instead:\n-```\n-if let Some(x) = opt {\n-    // ..\n-}\n-\n-if let Ok(x) = res {\n-    // ..\n-}\n-```\n\\ No newline at end of file"}, {"sha": "55fb3788a8b1a568c1e9b5d0c9be2327194f5238", "filename": "src/tools/clippy/tests/ui/for_loop_unfixable.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/691aeaad6c9ee3483f2851695379b348b8a92a43/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffor_loop_unfixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691aeaad6c9ee3483f2851695379b348b8a92a43/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffor_loop_unfixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffor_loop_unfixable.rs?ref=691aeaad6c9ee3483f2851695379b348b8a92a43", "patch": "@@ -8,6 +8,7 @@\n     clippy::for_kv_map\n )]\n #[allow(clippy::linkedlist, clippy::unnecessary_mut_passed, clippy::similar_names)]\n+#[allow(for_loops_over_fallibles)]\n fn main() {\n     let vec = vec![1, 2, 3, 4];\n "}, {"sha": "50a86eaa68f7dffe5e4f632aea276cf3463a49bb", "filename": "src/tools/clippy/tests/ui/for_loop_unfixable.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/691aeaad6c9ee3483f2851695379b348b8a92a43/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffor_loop_unfixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/691aeaad6c9ee3483f2851695379b348b8a92a43/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffor_loop_unfixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffor_loop_unfixable.stderr?ref=691aeaad6c9ee3483f2851695379b348b8a92a43", "patch": "@@ -1,5 +1,5 @@\n error: you are iterating over `Iterator::next()` which is an Option; this will compile but is probably not what you want\n-  --> $DIR/for_loop_unfixable.rs:14:15\n+  --> $DIR/for_loop_unfixable.rs:15:15\n    |\n LL |     for _v in vec.iter().next() {}\n    |               ^^^^^^^^^^^^^^^^^"}, {"sha": "4b2a9297d084eba02835154bcc81789962cb3f03", "filename": "src/tools/clippy/tests/ui/for_loops_over_fallibles.rs", "status": "removed", "additions": 0, "deletions": 73, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/8dfb40722da197e77a33a19eb9d3fd6512831341/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffor_loops_over_fallibles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dfb40722da197e77a33a19eb9d3fd6512831341/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffor_loops_over_fallibles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffor_loops_over_fallibles.rs?ref=8dfb40722da197e77a33a19eb9d3fd6512831341", "patch": "@@ -1,73 +0,0 @@\n-#![warn(clippy::for_loops_over_fallibles)]\n-#![allow(clippy::uninlined_format_args)]\n-\n-fn for_loops_over_fallibles() {\n-    let option = Some(1);\n-    let mut result = option.ok_or(\"x not found\");\n-    let v = vec![0, 1, 2];\n-\n-    // check over an `Option`\n-    for x in option {\n-        println!(\"{}\", x);\n-    }\n-\n-    // check over an `Option`\n-    for x in option.iter() {\n-        println!(\"{}\", x);\n-    }\n-\n-    // check over a `Result`\n-    for x in result {\n-        println!(\"{}\", x);\n-    }\n-\n-    // check over a `Result`\n-    for x in result.iter_mut() {\n-        println!(\"{}\", x);\n-    }\n-\n-    // check over a `Result`\n-    for x in result.into_iter() {\n-        println!(\"{}\", x);\n-    }\n-\n-    for x in option.ok_or(\"x not found\") {\n-        println!(\"{}\", x);\n-    }\n-\n-    // make sure LOOP_OVER_NEXT lint takes clippy::precedence when next() is the last call\n-    // in the chain\n-    for x in v.iter().next() {\n-        println!(\"{}\", x);\n-    }\n-\n-    // make sure we lint when next() is not the last call in the chain\n-    for x in v.iter().next().and(Some(0)) {\n-        println!(\"{}\", x);\n-    }\n-\n-    for x in v.iter().next().ok_or(\"x not found\") {\n-        println!(\"{}\", x);\n-    }\n-\n-    // check for false positives\n-\n-    // for loop false positive\n-    for x in v {\n-        println!(\"{}\", x);\n-    }\n-\n-    // while let false positive for Option\n-    while let Some(x) = option {\n-        println!(\"{}\", x);\n-        break;\n-    }\n-\n-    // while let false positive for Result\n-    while let Ok(x) = result {\n-        println!(\"{}\", x);\n-        break;\n-    }\n-}\n-\n-fn main() {}"}, {"sha": "f09adccabd1a8d15d25a36d937d02d61f2bbb025", "filename": "src/tools/clippy/tests/ui/for_loops_over_fallibles.stderr", "status": "removed", "additions": 0, "deletions": 95, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/8dfb40722da197e77a33a19eb9d3fd6512831341/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffor_loops_over_fallibles.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8dfb40722da197e77a33a19eb9d3fd6512831341/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffor_loops_over_fallibles.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffor_loops_over_fallibles.stderr?ref=8dfb40722da197e77a33a19eb9d3fd6512831341", "patch": "@@ -1,95 +0,0 @@\n-error: for loop over `option`, which is an `Option`. This is more readably written as an `if let` statement\n-  --> $DIR/for_loops_over_fallibles.rs:10:14\n-   |\n-LL |     for x in option {\n-   |              ^^^^^^\n-   |\n-   = help: consider replacing `for x in option` with `if let Some(x) = option`\n-   = note: `-D clippy::for-loops-over-fallibles` implied by `-D warnings`\n-\n-error: for loop over `option`, which is an `Option`. This is more readably written as an `if let` statement\n-  --> $DIR/for_loops_over_fallibles.rs:15:14\n-   |\n-LL |     for x in option.iter() {\n-   |              ^^^^^^\n-   |\n-   = help: consider replacing `for x in option.iter()` with `if let Some(x) = option`\n-\n-error: for loop over `result`, which is a `Result`. This is more readably written as an `if let` statement\n-  --> $DIR/for_loops_over_fallibles.rs:20:14\n-   |\n-LL |     for x in result {\n-   |              ^^^^^^\n-   |\n-   = help: consider replacing `for x in result` with `if let Ok(x) = result`\n-\n-error: for loop over `result`, which is a `Result`. This is more readably written as an `if let` statement\n-  --> $DIR/for_loops_over_fallibles.rs:25:14\n-   |\n-LL |     for x in result.iter_mut() {\n-   |              ^^^^^^\n-   |\n-   = help: consider replacing `for x in result.iter_mut()` with `if let Ok(x) = result`\n-\n-error: for loop over `result`, which is a `Result`. This is more readably written as an `if let` statement\n-  --> $DIR/for_loops_over_fallibles.rs:30:14\n-   |\n-LL |     for x in result.into_iter() {\n-   |              ^^^^^^\n-   |\n-   = help: consider replacing `for x in result.into_iter()` with `if let Ok(x) = result`\n-\n-error: for loop over `option.ok_or(\"x not found\")`, which is a `Result`. This is more readably written as an `if let` statement\n-  --> $DIR/for_loops_over_fallibles.rs:34:14\n-   |\n-LL |     for x in option.ok_or(\"x not found\") {\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider replacing `for x in option.ok_or(\"x not found\")` with `if let Ok(x) = option.ok_or(\"x not found\")`\n-\n-error: you are iterating over `Iterator::next()` which is an Option; this will compile but is probably not what you want\n-  --> $DIR/for_loops_over_fallibles.rs:40:14\n-   |\n-LL |     for x in v.iter().next() {\n-   |              ^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[deny(clippy::iter_next_loop)]` on by default\n-\n-error: for loop over `v.iter().next().and(Some(0))`, which is an `Option`. This is more readably written as an `if let` statement\n-  --> $DIR/for_loops_over_fallibles.rs:45:14\n-   |\n-LL |     for x in v.iter().next().and(Some(0)) {\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider replacing `for x in v.iter().next().and(Some(0))` with `if let Some(x) = v.iter().next().and(Some(0))`\n-\n-error: for loop over `v.iter().next().ok_or(\"x not found\")`, which is a `Result`. This is more readably written as an `if let` statement\n-  --> $DIR/for_loops_over_fallibles.rs:49:14\n-   |\n-LL |     for x in v.iter().next().ok_or(\"x not found\") {\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider replacing `for x in v.iter().next().ok_or(\"x not found\")` with `if let Ok(x) = v.iter().next().ok_or(\"x not found\")`\n-\n-error: this loop never actually loops\n-  --> $DIR/for_loops_over_fallibles.rs:61:5\n-   |\n-LL | /     while let Some(x) = option {\n-LL | |         println!(\"{}\", x);\n-LL | |         break;\n-LL | |     }\n-   | |_____^\n-   |\n-   = note: `#[deny(clippy::never_loop)]` on by default\n-\n-error: this loop never actually loops\n-  --> $DIR/for_loops_over_fallibles.rs:67:5\n-   |\n-LL | /     while let Ok(x) = result {\n-LL | |         println!(\"{}\", x);\n-LL | |         break;\n-LL | |     }\n-   | |_____^\n-\n-error: aborting due to 11 previous errors\n-"}, {"sha": "e12ea7ec14500f956a9b29ae3ce4fcec41da63cb", "filename": "src/tools/clippy/tests/ui/manual_map_option.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/691aeaad6c9ee3483f2851695379b348b8a92a43/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_map_option.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/691aeaad6c9ee3483f2851695379b348b8a92a43/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_map_option.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_map_option.fixed?ref=691aeaad6c9ee3483f2851695379b348b8a92a43", "patch": "@@ -7,7 +7,7 @@\n     clippy::unit_arg,\n     clippy::match_ref_pats,\n     clippy::redundant_pattern_matching,\n-    clippy::for_loops_over_fallibles,\n+    for_loops_over_fallibles,\n     dead_code\n )]\n "}, {"sha": "325a6db06c4e53a533348d41462e81dff808e09d", "filename": "src/tools/clippy/tests/ui/manual_map_option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/691aeaad6c9ee3483f2851695379b348b8a92a43/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_map_option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691aeaad6c9ee3483f2851695379b348b8a92a43/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_map_option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_map_option.rs?ref=691aeaad6c9ee3483f2851695379b348b8a92a43", "patch": "@@ -7,7 +7,7 @@\n     clippy::unit_arg,\n     clippy::match_ref_pats,\n     clippy::redundant_pattern_matching,\n-    clippy::for_loops_over_fallibles,\n+    for_loops_over_fallibles,\n     dead_code\n )]\n "}, {"sha": "8beae8dee08542e993e40136bfe0404fe8b5ff13", "filename": "src/tools/clippy/tests/ui/rename.fixed", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/691aeaad6c9ee3483f2851695379b348b8a92a43/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/691aeaad6c9ee3483f2851695379b348b8a92a43/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.fixed?ref=691aeaad6c9ee3483f2851695379b348b8a92a43", "patch": "@@ -12,7 +12,7 @@\n #![allow(clippy::disallowed_methods)]\n #![allow(clippy::disallowed_types)]\n #![allow(clippy::mixed_read_write_in_expression)]\n-#![allow(clippy::for_loops_over_fallibles)]\n+#![allow(for_loops_over_fallibles)]\n #![allow(clippy::useless_conversion)]\n #![allow(clippy::match_result_ok)]\n #![allow(clippy::overly_complex_bool_expr)]\n@@ -45,8 +45,8 @@\n #![warn(clippy::disallowed_methods)]\n #![warn(clippy::disallowed_types)]\n #![warn(clippy::mixed_read_write_in_expression)]\n-#![warn(clippy::for_loops_over_fallibles)]\n-#![warn(clippy::for_loops_over_fallibles)]\n+#![warn(for_loops_over_fallibles)]\n+#![warn(for_loops_over_fallibles)]\n #![warn(clippy::useless_conversion)]\n #![warn(clippy::match_result_ok)]\n #![warn(clippy::overly_complex_bool_expr)]\n@@ -65,6 +65,7 @@\n #![warn(clippy::recursive_format_impl)]\n #![warn(clippy::invisible_characters)]\n #![warn(drop_bounds)]\n+#![warn(for_loops_over_fallibles)]\n #![warn(array_into_iter)]\n #![warn(invalid_atomic_ordering)]\n #![warn(invalid_value)]"}, {"sha": "9e665047baaeb93e8c779239a0e61aba8a8d41c9", "filename": "src/tools/clippy/tests/ui/rename.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/691aeaad6c9ee3483f2851695379b348b8a92a43/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691aeaad6c9ee3483f2851695379b348b8a92a43/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.rs?ref=691aeaad6c9ee3483f2851695379b348b8a92a43", "patch": "@@ -12,7 +12,7 @@\n #![allow(clippy::disallowed_methods)]\n #![allow(clippy::disallowed_types)]\n #![allow(clippy::mixed_read_write_in_expression)]\n-#![allow(clippy::for_loops_over_fallibles)]\n+#![allow(for_loops_over_fallibles)]\n #![allow(clippy::useless_conversion)]\n #![allow(clippy::match_result_ok)]\n #![allow(clippy::overly_complex_bool_expr)]\n@@ -65,6 +65,7 @@\n #![warn(clippy::to_string_in_display)]\n #![warn(clippy::zero_width_space)]\n #![warn(clippy::drop_bounds)]\n+#![warn(clippy::for_loops_over_fallibles)]\n #![warn(clippy::into_iter_on_array)]\n #![warn(clippy::invalid_atomic_ordering)]\n #![warn(clippy::invalid_ref)]"}, {"sha": "63eb565185f07b31af72b755650758dcc6f5eeae", "filename": "src/tools/clippy/tests/ui/rename.stderr", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/691aeaad6c9ee3483f2851695379b348b8a92a43/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/691aeaad6c9ee3483f2851695379b348b8a92a43/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.stderr?ref=691aeaad6c9ee3483f2851695379b348b8a92a43", "patch": "@@ -54,17 +54,17 @@ error: lint `clippy::eval_order_dependence` has been renamed to `clippy::mixed_r\n LL | #![warn(clippy::eval_order_dependence)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::mixed_read_write_in_expression`\n \n-error: lint `clippy::for_loop_over_option` has been renamed to `clippy::for_loops_over_fallibles`\n+error: lint `clippy::for_loop_over_option` has been renamed to `for_loops_over_fallibles`\n   --> $DIR/rename.rs:48:9\n    |\n LL | #![warn(clippy::for_loop_over_option)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::for_loops_over_fallibles`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `for_loops_over_fallibles`\n \n-error: lint `clippy::for_loop_over_result` has been renamed to `clippy::for_loops_over_fallibles`\n+error: lint `clippy::for_loop_over_result` has been renamed to `for_loops_over_fallibles`\n   --> $DIR/rename.rs:49:9\n    |\n LL | #![warn(clippy::for_loop_over_result)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::for_loops_over_fallibles`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `for_loops_over_fallibles`\n \n error: lint `clippy::identity_conversion` has been renamed to `clippy::useless_conversion`\n   --> $DIR/rename.rs:50:9\n@@ -174,59 +174,65 @@ error: lint `clippy::drop_bounds` has been renamed to `drop_bounds`\n LL | #![warn(clippy::drop_bounds)]\n    |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `drop_bounds`\n \n-error: lint `clippy::into_iter_on_array` has been renamed to `array_into_iter`\n+error: lint `clippy::for_loops_over_fallibles` has been renamed to `for_loops_over_fallibles`\n   --> $DIR/rename.rs:68:9\n    |\n+LL | #![warn(clippy::for_loops_over_fallibles)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `for_loops_over_fallibles`\n+\n+error: lint `clippy::into_iter_on_array` has been renamed to `array_into_iter`\n+  --> $DIR/rename.rs:69:9\n+   |\n LL | #![warn(clippy::into_iter_on_array)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `array_into_iter`\n \n error: lint `clippy::invalid_atomic_ordering` has been renamed to `invalid_atomic_ordering`\n-  --> $DIR/rename.rs:69:9\n+  --> $DIR/rename.rs:70:9\n    |\n LL | #![warn(clippy::invalid_atomic_ordering)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `invalid_atomic_ordering`\n \n error: lint `clippy::invalid_ref` has been renamed to `invalid_value`\n-  --> $DIR/rename.rs:70:9\n+  --> $DIR/rename.rs:71:9\n    |\n LL | #![warn(clippy::invalid_ref)]\n    |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `invalid_value`\n \n error: lint `clippy::mem_discriminant_non_enum` has been renamed to `enum_intrinsics_non_enums`\n-  --> $DIR/rename.rs:71:9\n+  --> $DIR/rename.rs:72:9\n    |\n LL | #![warn(clippy::mem_discriminant_non_enum)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `enum_intrinsics_non_enums`\n \n error: lint `clippy::panic_params` has been renamed to `non_fmt_panics`\n-  --> $DIR/rename.rs:72:9\n+  --> $DIR/rename.rs:73:9\n    |\n LL | #![warn(clippy::panic_params)]\n    |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `non_fmt_panics`\n \n error: lint `clippy::positional_named_format_parameters` has been renamed to `named_arguments_used_positionally`\n-  --> $DIR/rename.rs:73:9\n+  --> $DIR/rename.rs:74:9\n    |\n LL | #![warn(clippy::positional_named_format_parameters)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `named_arguments_used_positionally`\n \n error: lint `clippy::temporary_cstring_as_ptr` has been renamed to `temporary_cstring_as_ptr`\n-  --> $DIR/rename.rs:74:9\n+  --> $DIR/rename.rs:75:9\n    |\n LL | #![warn(clippy::temporary_cstring_as_ptr)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `temporary_cstring_as_ptr`\n \n error: lint `clippy::unknown_clippy_lints` has been renamed to `unknown_lints`\n-  --> $DIR/rename.rs:75:9\n+  --> $DIR/rename.rs:76:9\n    |\n LL | #![warn(clippy::unknown_clippy_lints)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `unknown_lints`\n \n error: lint `clippy::unused_label` has been renamed to `unused_labels`\n-  --> $DIR/rename.rs:76:9\n+  --> $DIR/rename.rs:77:9\n    |\n LL | #![warn(clippy::unused_label)]\n    |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `unused_labels`\n \n-error: aborting due to 38 previous errors\n+error: aborting due to 39 previous errors\n "}, {"sha": "a2a73f0a5fb3a2d84862f9dbfc433ae7837c25b1", "filename": "src/tools/rustfmt/src/items.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/691aeaad6c9ee3483f2851695379b348b8a92a43/src%2Ftools%2Frustfmt%2Fsrc%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691aeaad6c9ee3483f2851695379b348b8a92a43/src%2Ftools%2Frustfmt%2Fsrc%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fitems.rs?ref=691aeaad6c9ee3483f2851695379b348b8a92a43", "patch": "@@ -594,7 +594,7 @@ impl<'a> FmtVisitor<'a> {\n             let both_type = |l: &TyOpt, r: &TyOpt| is_type(l) && is_type(r);\n             let both_opaque = |l: &TyOpt, r: &TyOpt| is_opaque(l) && is_opaque(r);\n             let need_empty_line = |a: &ast::AssocItemKind, b: &ast::AssocItemKind| match (a, b) {\n-                (TyAlias(lty), TyAlias(rty))\n+                (Type(lty), Type(rty))\n                     if both_type(&lty.ty, &rty.ty) || both_opaque(&lty.ty, &rty.ty) =>\n                 {\n                     false\n@@ -612,7 +612,7 @@ impl<'a> FmtVisitor<'a> {\n             }\n \n             buffer.sort_by(|(_, a), (_, b)| match (&a.kind, &b.kind) {\n-                (TyAlias(lty), TyAlias(rty))\n+                (Type(lty), Type(rty))\n                     if both_type(&lty.ty, &rty.ty) || both_opaque(&lty.ty, &rty.ty) =>\n                 {\n                     a.ident.as_str().cmp(b.ident.as_str())\n@@ -621,10 +621,10 @@ impl<'a> FmtVisitor<'a> {\n                     a.ident.as_str().cmp(b.ident.as_str())\n                 }\n                 (Fn(..), Fn(..)) => a.span.lo().cmp(&b.span.lo()),\n-                (TyAlias(ty), _) if is_type(&ty.ty) => Ordering::Less,\n-                (_, TyAlias(ty)) if is_type(&ty.ty) => Ordering::Greater,\n-                (TyAlias(..), _) => Ordering::Less,\n-                (_, TyAlias(..)) => Ordering::Greater,\n+                (Type(ty), _) if is_type(&ty.ty) => Ordering::Less,\n+                (_, Type(ty)) if is_type(&ty.ty) => Ordering::Greater,\n+                (Type(..), _) => Ordering::Less,\n+                (_, Type(..)) => Ordering::Greater,\n                 (Const(..), _) => Ordering::Less,\n                 (_, Const(..)) => Ordering::Greater,\n                 (MacCall(..), _) => Ordering::Less,"}, {"sha": "9c3cc7820d2991b64e807e1edf4129e3138e6c7e", "filename": "src/tools/rustfmt/src/visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/691aeaad6c9ee3483f2851695379b348b8a92a43/src%2Ftools%2Frustfmt%2Fsrc%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691aeaad6c9ee3483f2851695379b348b8a92a43/src%2Ftools%2Frustfmt%2Fsrc%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fvisitor.rs?ref=691aeaad6c9ee3483f2851695379b348b8a92a43", "patch": "@@ -660,7 +660,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                     self.push_rewrite(ai.span, rewrite);\n                 }\n             }\n-            (ast::AssocItemKind::TyAlias(ref ty_alias), _) => {\n+            (ast::AssocItemKind::Type(ref ty_alias), _) => {\n                 self.visit_ty_alias_kind(ty_alias, visitor_kind, ai.span);\n             }\n             (ast::AssocItemKind::MacCall(ref mac), _) => {"}, {"sha": "052abfdab5dd36c37a17626721da3f7acd02080e", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/691aeaad6c9ee3483f2851695379b348b8a92a43/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691aeaad6c9ee3483f2851695379b348b8a92a43/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=691aeaad6c9ee3483f2851695379b348b8a92a43", "patch": "@@ -7,8 +7,8 @@ use std::path::Path;\n \n const ENTRY_LIMIT: usize = 1000;\n // FIXME: The following limits should be reduced eventually.\n-const ROOT_ENTRY_LIMIT: usize = 968;\n-const ISSUES_ENTRY_LIMIT: usize = 2147;\n+const ROOT_ENTRY_LIMIT: usize = 950;\n+const ISSUES_ENTRY_LIMIT: usize = 2141;\n \n fn check_entries(path: &Path, bad: &mut bool) {\n     let dirs = walkdir::WalkDir::new(&path.join(\"test/ui\"))"}]}