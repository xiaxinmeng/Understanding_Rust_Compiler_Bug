{"sha": "2e20cae150429785d9357d5bd060c6b48e3c36ca", "node_id": "C_kwDOAAsO6NoAKDJlMjBjYWUxNTA0Mjk3ODVkOTM1N2Q1YmQwNjBjNmI0OGUzYzM2Y2E", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-03T15:56:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-03T15:56:55Z"}, "message": "Auto merge of #2319 - RalfJung:dont-touch-vtables, r=RalfJung\n\nfix retagging of vtable ptrs\n\nFixes a problem reported by `@saethlin` on [Zulip](https://rust-lang.zulipchat.com/#narrow/stream/269128-miri/topic/Stacked.20Borrows.20field.20retagging/near/288040048).", "tree": {"sha": "858afa5bef245dd9d2ff908a74405b2968ca5076", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/858afa5bef245dd9d2ff908a74405b2968ca5076"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e20cae150429785d9357d5bd060c6b48e3c36ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e20cae150429785d9357d5bd060c6b48e3c36ca", "html_url": "https://github.com/rust-lang/rust/commit/2e20cae150429785d9357d5bd060c6b48e3c36ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e20cae150429785d9357d5bd060c6b48e3c36ca/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d53314233d8b0851dadddb1f4ef0ed99a201d7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d53314233d8b0851dadddb1f4ef0ed99a201d7a", "html_url": "https://github.com/rust-lang/rust/commit/8d53314233d8b0851dadddb1f4ef0ed99a201d7a"}, {"sha": "a4e7e1e6b59e006d5b5599e2d6a181a77bf8ee04", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4e7e1e6b59e006d5b5599e2d6a181a77bf8ee04", "html_url": "https://github.com/rust-lang/rust/commit/a4e7e1e6b59e006d5b5599e2d6a181a77bf8ee04"}], "stats": {"total": 19, "additions": 19, "deletions": 0}, "files": [{"sha": "cc2ea0b76d87cc55d75d32dd1bd8a0fd1dc21a9d", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2e20cae150429785d9357d5bd060c6b48e3c36ca/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e20cae150429785d9357d5bd060c6b48e3c36ca/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=2e20cae150429785d9357d5bd060c6b48e3c36ca", "patch": "@@ -1039,6 +1039,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     let val = self.ecx.read_immediate(&place.into())?;\n                     let val = self.ecx.retag_reference(&val, mutbl, protector)?;\n                     self.ecx.write_immediate(*val, &place.into())?;\n+                } else if matches!(place.layout.ty.kind(), ty::RawPtr(..)) {\n+                    // Wide raw pointers *do* have fields and their types are strange.\n+                    // vtables have a type like `&[*const (); 3]` or so!\n+                    // Do *not* recurse into them.\n+                    // (No need to worry about wide references or boxes, those always \"qualify\".)\n                 } else {\n                     // Maybe we need to go deeper.\n                     self.walk_value(place)?;"}, {"sha": "b915a2ddf8f67b4ea59257603b4762060dca8cc7", "filename": "tests/pass/stacked-borrows/stacked-borrows.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2e20cae150429785d9357d5bd060c6b48e3c36ca/tests%2Fpass%2Fstacked-borrows%2Fstacked-borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e20cae150429785d9357d5bd060c6b48e3c36ca/tests%2Fpass%2Fstacked-borrows%2Fstacked-borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fstacked-borrows%2Fstacked-borrows.rs?ref=2e20cae150429785d9357d5bd060c6b48e3c36ca", "patch": "@@ -1,4 +1,5 @@\n // compile-flags: -Zmiri-retag-fields\n+#![feature(allocator_api)]\n use std::ptr;\n \n // Test various stacked-borrows-related things.\n@@ -17,6 +18,7 @@ fn main() {\n     raw_ref_to_part();\n     array_casts();\n     mut_below_shr();\n+    wide_raw_ptr_in_tuple();\n }\n \n // Make sure that reading from an `&mut` does, like reborrowing to `&`,\n@@ -205,3 +207,15 @@ fn mut_below_shr() {\n     let r = &**p;\n     let _val = *r;\n }\n+\n+fn wide_raw_ptr_in_tuple() {\n+    let mut x: Box<dyn std::any::Any> = Box::new(\"ouch\");\n+    let r = &mut *x as *mut dyn std::any::Any;\n+    // This triggers the visitor-based recursive retagging. It is *not* supposed to retag raw\n+    // pointers, but then the visitor might recurse into the \"fields\" of a wide raw pointer and\n+    // finds a reference (to a vtable) there that it wants to retag... and that would be Wrong.\n+    let pair = (r, &0);\n+    let r = unsafe { &mut *pair.0 };\n+    // Make sure the fn ptr part of the vtable is still fine.\n+    r.type_id();\n+}"}]}