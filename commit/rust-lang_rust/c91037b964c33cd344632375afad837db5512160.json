{"sha": "c91037b964c33cd344632375afad837db5512160", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5MTAzN2I5NjRjMzNjZDM0NDYzMjM3NWFmYWQ4MzdkYjU1MTIxNjA=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2016-11-06T19:45:27Z"}, "committer": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2016-11-29T12:04:27Z"}, "message": "Fix cross-crate associated constant evaluation", "tree": {"sha": "ca2f526c0b68c15aff9fed6f64b4a46f8cf5962e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca2f526c0b68c15aff9fed6f64b4a46f8cf5962e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c91037b964c33cd344632375afad837db5512160", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c91037b964c33cd344632375afad837db5512160", "html_url": "https://github.com/rust-lang/rust/commit/c91037b964c33cd344632375afad837db5512160", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c91037b964c33cd344632375afad837db5512160/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "936dbbce377157ac1042028da2ad8d6b8183c4de", "url": "https://api.github.com/repos/rust-lang/rust/commits/936dbbce377157ac1042028da2ad8d6b8183c4de", "html_url": "https://github.com/rust-lang/rust/commit/936dbbce377157ac1042028da2ad8d6b8183c4de"}], "stats": {"total": 115, "additions": 102, "deletions": 13}, "files": [{"sha": "fd986b6bbc5de1df89c763da44f113ccd0311aaa", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c91037b964c33cd344632375afad837db5512160/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c91037b964c33cd344632375afad837db5512160/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=c91037b964c33cd344632375afad837db5512160", "patch": "@@ -181,6 +181,7 @@ impl<'a> InlinedItemRef<'a> {\n     pub fn from_trait_item(def_id: DefId, item: &'a hir::TraitItem, _map: &hir_map::Map) -> InlinedItemRef<'a> {\n         let (body, kind) = match item.node {\n             hir::ConstTraitItem(ref ty, Some(ref body)) => (&**body, InlinedItemKindRef::Const(ty)),\n+            hir::ConstTraitItem(_, None) => bug!(\"InlinedItemRef::from_trait_item called for const without body\"),\n             _ => bug!(\"InlinedItemRef::from_trait_item wrong kind\")\n         };\n         InlinedItemRef {"}, {"sha": "ccdfb1e69a722086c18bc187a607d9ed45faa26e", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 30, "deletions": 12, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/c91037b964c33cd344632375afad837db5512160/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c91037b964c33cd344632375afad837db5512160/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=c91037b964c33cd344632375afad837db5512160", "patch": "@@ -102,14 +102,15 @@ pub fn lookup_const_by_id<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 _ => None\n             },\n             Some(ast_map::NodeTraitItem(ti)) => match ti.node {\n-                hir::ConstTraitItem(..) => {\n+                hir::ConstTraitItem(ref ty, ref expr_option) => {\n                     if let Some(substs) = substs {\n                         // If we have a trait item and the substitutions for it,\n                         // `resolve_trait_associated_const` will select an impl\n                         // or the default.\n                         let trait_id = tcx.map.get_parent(node_id);\n                         let trait_id = tcx.map.local_def_id(trait_id);\n-                        resolve_trait_associated_const(tcx, ti, trait_id, substs)\n+                        let default_value = expr_option.as_ref().map(|expr| (&**expr, tcx.ast_ty_to_prim_ty(ty)));\n+                        resolve_trait_associated_const(tcx, def_id, default_value, trait_id, substs)\n                     } else {\n                         // Technically, without knowing anything about the\n                         // expression that generates the obligation, we could\n@@ -145,6 +146,27 @@ pub fn lookup_const_by_id<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             }\n             _ => None\n         };\n+        let expr_ty = match tcx.sess.cstore.describe_def(def_id) {\n+            Some(Def::AssociatedConst(_)) => {\n+                let trait_id = tcx.sess.cstore.trait_of_item(def_id);\n+                // As mentioned in the comments above for in-crate\n+                // constants, we only try to find the expression for a\n+                // trait-associated const if the caller gives us the\n+                // substitutions for the reference to it.\n+                if let Some(trait_id) = trait_id {\n+                    used_substs = true;\n+\n+                    if let Some(substs) = substs {\n+                        resolve_trait_associated_const(tcx, def_id, expr_ty, trait_id, substs)\n+                    } else {\n+                        None\n+                    }\n+                } else {\n+                    expr_ty\n+                }\n+            }\n+            _ => expr_ty\n+        };\n         // If we used the substitutions, particularly to choose an impl\n         // of a trait-associated const, don't cache that, because the next\n         // lookup with the same def_id may yield a different result.\n@@ -1036,7 +1058,8 @@ fn infer<'a, 'tcx>(i: ConstInt,\n }\n \n fn resolve_trait_associated_const<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                                ti: &'tcx hir::TraitItem,\n+                                                trait_item_id: DefId,\n+                                                default_value: Option<(&'tcx Expr, Option<ty::Ty<'tcx>>)>,\n                                                 trait_id: DefId,\n                                                 rcvr_substs: &'tcx Substs<'tcx>)\n                                                 -> Option<(&'tcx Expr, Option<ty::Ty<'tcx>>)>\n@@ -1070,21 +1093,16 @@ fn resolve_trait_associated_const<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         // when constructing the inference context above.\n         match selection {\n             traits::VtableImpl(ref impl_data) => {\n+                let name = tcx.associated_item(trait_item_id).name;\n                 let ac = tcx.associated_items(impl_data.impl_def_id)\n-                    .find(|item| item.kind == ty::AssociatedKind::Const && item.name == ti.name);\n+                    .find(|item| item.kind == ty::AssociatedKind::Const && item.name == name);\n                 match ac {\n                     Some(ic) => lookup_const_by_id(tcx, ic.def_id, None),\n-                    None => match ti.node {\n-                        hir::ConstTraitItem(ref ty, Some(ref expr)) => {\n-                            Some((&*expr, tcx.ast_ty_to_prim_ty(ty)))\n-                        },\n-                        _ => None,\n-                    },\n+                    None => default_value,\n                 }\n             }\n             _ => {\n-            span_bug!(ti.span,\n-                      \"resolve_trait_associated_const: unexpected vtable type\")\n+                bug!(\"resolve_trait_associated_const: unexpected vtable type\")\n             }\n         }\n     })"}, {"sha": "878d06ea92709398d749b1f1b7f79edd29af86b4", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c91037b964c33cd344632375afad837db5512160/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c91037b964c33cd344632375afad837db5512160/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=c91037b964c33cd344632375afad837db5512160", "patch": "@@ -516,7 +516,9 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             generics: Some(self.encode_generics(def_id)),\n             predicates: Some(self.encode_predicates(def_id)),\n \n-            ast: if trait_item.kind == ty::AssociatedKind::Const {\n+            ast: if let hir::ConstTraitItem(_, Some(_)) = ast_item.node {\n+                // We only save the HIR for associated consts with bodies\n+                // (InlinedItemRef::from_trait_item panics otherwise)\n                 let trait_def_id = trait_item.container.id();\n                 Some(self.encode_inlined_item(InlinedItemRef::from_trait_item(trait_def_id, ast_item, &tcx.map)))\n             } else {"}, {"sha": "0b230df41469f0af3f1b3d1407c21cd049ca7428", "filename": "src/test/run-pass/associated-const-const-eval.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c91037b964c33cd344632375afad837db5512160/src%2Ftest%2Frun-pass%2Fassociated-const-const-eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c91037b964c33cd344632375afad837db5512160/src%2Ftest%2Frun-pass%2Fassociated-const-const-eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-const-const-eval.rs?ref=c91037b964c33cd344632375afad837db5512160", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(associated_consts)]\n+\n+trait Foo {\n+    const NUM: usize;\n+}\n+\n+impl Foo for i32 {\n+    const NUM: usize = 1;\n+}\n+\n+const FOO: usize = <i32 as Foo>::NUM;\n+\n+fn main() {\n+    assert_eq!(1, FOO);\n+\n+    match 1 {\n+        <i32 as Foo>::NUM => {},\n+        _ => assert!(false)\n+    }\n+}"}, {"sha": "7d31bb5b1a5e2dd7c0b4ec50986d3df296161aba", "filename": "src/test/run-pass/associated-const-cross-crate-const-eval.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c91037b964c33cd344632375afad837db5512160/src%2Ftest%2Frun-pass%2Fassociated-const-cross-crate-const-eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c91037b964c33cd344632375afad837db5512160/src%2Ftest%2Frun-pass%2Fassociated-const-cross-crate-const-eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-const-cross-crate-const-eval.rs?ref=c91037b964c33cd344632375afad837db5512160", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:associated-const-cc-lib.rs\n+\n+#![feature(associated_consts)]\n+\n+extern crate associated_const_cc_lib as foolib;\n+\n+pub struct LocalFoo;\n+\n+impl foolib::Foo for LocalFoo {\n+    const BAR: usize = 1;\n+}\n+\n+const FOO_1: usize = <foolib::FooNoDefault as foolib::Foo>::BAR;\n+const FOO_2: usize = <LocalFoo as foolib::Foo>::BAR;\n+const FOO_3: usize = foolib::InherentBar::BAR;\n+\n+fn main() {\n+    assert_eq!(0, FOO_1);\n+    assert_eq!(1, FOO_2);\n+    assert_eq!(3, FOO_3);\n+\n+    match 0 {\n+        <foolib::FooNoDefault as foolib::Foo>::BAR => {},\n+        <LocalFoo as foolib::Foo>::BAR => assert!(false),\n+        foolib::InherentBar::BAR => assert!(false),\n+        _ => assert!(false)\n+    }\n+}"}]}