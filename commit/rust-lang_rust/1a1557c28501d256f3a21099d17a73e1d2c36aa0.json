{"sha": "1a1557c28501d256f3a21099d17a73e1d2c36aa0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhMTU1N2MyODUwMWQyNTZmM2EyMTA5OWQxN2E3M2UxZDJjMzZhYTA=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-08-12T20:19:36Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-08-15T17:40:18Z"}, "message": "resolve: Add `ParentScope::default`, eliminate `dummy_parent_scope`\n\nRemove some unnecessary parameters from functions", "tree": {"sha": "6c7b329ba31c8c6a21054b70c9643bf92ba8204e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c7b329ba31c8c6a21054b70c9643bf92ba8204e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a1557c28501d256f3a21099d17a73e1d2c36aa0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a1557c28501d256f3a21099d17a73e1d2c36aa0", "html_url": "https://github.com/rust-lang/rust/commit/1a1557c28501d256f3a21099d17a73e1d2c36aa0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a1557c28501d256f3a21099d17a73e1d2c36aa0/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfbb60bf6d83fbcfcca1f2919131aa39fb997b53", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfbb60bf6d83fbcfcca1f2919131aa39fb997b53", "html_url": "https://github.com/rust-lang/rust/commit/cfbb60bf6d83fbcfcca1f2919131aa39fb997b53"}], "stats": {"total": 61, "additions": 31, "deletions": 30}, "files": [{"sha": "016ec55947aff4999ce16c9ceb6f02be789931d9", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1a1557c28501d256f3a21099d17a73e1d2c36aa0/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a1557c28501d256f3a21099d17a73e1d2c36aa0/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=1a1557c28501d256f3a21099d17a73e1d2c36aa0", "patch": "@@ -163,8 +163,8 @@ impl<'a> Resolver<'a> {\n         let def_id = module.def_id().unwrap();\n         for child in self.cstore.item_children_untracked(def_id, self.session) {\n             let child = child.map_id(|_| panic!(\"unexpected id\"));\n-            BuildReducedGraphVisitor { parent_scope: self.dummy_parent_scope(), r: self }\n-                .build_reduced_graph_for_external_crate_res(module, child);\n+            BuildReducedGraphVisitor { parent_scope: ParentScope::default(module), r: self }\n+                .build_reduced_graph_for_external_crate_res(child);\n         }\n         module.populated.set(true)\n     }\n@@ -706,7 +706,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                 self.r.define(parent, ident, TypeNS, (module, vis, sp, expansion));\n \n                 for variant in &(*enum_definition).variants {\n-                    self.build_reduced_graph_for_variant(variant, module, vis, expansion);\n+                    self.build_reduced_graph_for_variant(variant, module, vis);\n                 }\n             }\n \n@@ -797,8 +797,8 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n     fn build_reduced_graph_for_variant(&mut self,\n                                        variant: &Variant,\n                                        parent: Module<'a>,\n-                                       vis: ty::Visibility,\n-                                       expn_id: ExpnId) {\n+                                       vis: ty::Visibility) {\n+        let expn_id = self.parent_scope.expansion;\n         let ident = variant.ident;\n \n         // Define a name in the type namespace.\n@@ -861,11 +861,8 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n     }\n \n     /// Builds the reduced graph for a single item in an external crate.\n-    fn build_reduced_graph_for_external_crate_res(\n-        &mut self,\n-        parent: Module<'a>,\n-        child: Export<ast::NodeId>,\n-    ) {\n+    fn build_reduced_graph_for_external_crate_res(&mut self, child: Export<ast::NodeId>) {\n+        let parent = self.parent_scope.module;\n         let Export { ident, res, vis, span } = child;\n         // FIXME: We shouldn't create the gensym here, it should come from metadata,\n         // but metadata cannot encode gensyms currently, so we create it here."}, {"sha": "fbd9f1d48e5e69f1311b87faccb9b81ff6e7fbf7", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a1557c28501d256f3a21099d17a73e1d2c36aa0/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a1557c28501d256f3a21099d17a73e1d2c36aa0/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=1a1557c28501d256f3a21099d17a73e1d2c36aa0", "patch": "@@ -501,8 +501,8 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n     fn new(resolver: &'b mut Resolver<'a>) -> LateResolutionVisitor<'a, 'b> {\n         // During late resolution we only track the module component of the parent scope,\n         // although it may be useful to track other components as well for diagnostics.\n-        let parent_scope = resolver.dummy_parent_scope();\n         let graph_root = resolver.graph_root;\n+        let parent_scope = ParentScope::default(graph_root);\n         LateResolutionVisitor {\n             r: resolver,\n             parent_scope,"}, {"sha": "788252c55fc7dad88749d0d2589e4df67e4e0bca", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1a1557c28501d256f3a21099d17a73e1d2c36aa0/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a1557c28501d256f3a21099d17a73e1d2c36aa0/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=1a1557c28501d256f3a21099d17a73e1d2c36aa0", "patch": "@@ -130,6 +130,17 @@ pub struct ParentScope<'a> {\n     derives: Vec<ast::Path>,\n }\n \n+impl<'a> ParentScope<'a> {\n+    pub fn default(module: Module<'a>) -> ParentScope<'a> {\n+        ParentScope {\n+            module,\n+            expansion: ExpnId::root(),\n+            legacy: LegacyScope::Empty,\n+            derives: Vec::new(),\n+        }\n+    }\n+}\n+\n #[derive(Eq)]\n struct BindingError {\n     name: Name,\n@@ -799,7 +810,7 @@ pub struct Resolver<'a> {\n \n     pub definitions: Definitions,\n \n-    graph_root: Module<'a>,\n+    pub graph_root: Module<'a>,\n \n     prelude: Option<Module<'a>>,\n     pub extern_prelude: FxHashMap<Ident, ExternPreludeEntry<'a>>,\n@@ -995,7 +1006,7 @@ impl<'a> hir::lowering::Resolver for Resolver<'a> {\n             segments,\n         };\n \n-        let parent_scope = &self.dummy_parent_scope();\n+        let parent_scope = &ParentScope::default(self.graph_root);\n         let res = match self.resolve_ast_path(&path, ns, parent_scope) {\n             Ok(res) => res,\n             Err((span, error)) => {\n@@ -1069,7 +1080,7 @@ impl<'a> Resolver<'a> {\n \n         let mut invocations = FxHashMap::default();\n         invocations.insert(ExpnId::root(),\n-                           arenas.alloc_invocation_data(InvocationData::root(graph_root)));\n+                           arenas.alloc_invocation_data(InvocationData::default(graph_root)));\n \n         let mut macro_defs = FxHashMap::default();\n         macro_defs.insert(ExpnId::root(), root_def_id);\n@@ -2649,7 +2660,7 @@ impl<'a> Resolver<'a> {\n             let def_id = self.definitions.local_def_id(module_id);\n             self.module_map.get(&def_id).copied().unwrap_or(self.graph_root)\n         });\n-        let parent_scope = &ParentScope { module, ..self.dummy_parent_scope() };\n+        let parent_scope = &ParentScope::default(module);\n         let res = self.resolve_ast_path(&path, ns, parent_scope).map_err(|_| ())?;\n         Ok((path, res))\n     }"}, {"sha": "754983e3bd42c464bf4bb98f5965f10a60c3f6b8", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1a1557c28501d256f3a21099d17a73e1d2c36aa0/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a1557c28501d256f3a21099d17a73e1d2c36aa0/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=1a1557c28501d256f3a21099d17a73e1d2c36aa0", "patch": "@@ -43,9 +43,9 @@ pub struct InvocationData<'a> {\n }\n \n impl<'a> InvocationData<'a> {\n-    pub fn root(graph_root: Module<'a>) -> Self {\n+    pub fn default(module: Module<'a>) -> Self {\n         InvocationData {\n-            module: graph_root,\n+            module,\n             parent_legacy_scope: LegacyScope::Empty,\n             output_legacy_scope: Cell::new(None),\n         }\n@@ -120,17 +120,13 @@ impl<'a> base::Resolver for Resolver<'a> {\n     }\n \n     fn get_module_scope(&mut self, id: ast::NodeId) -> ExpnId {\n-        let span = DUMMY_SP.fresh_expansion(ExpnId::root(), ExpnInfo::default(\n+        let expn_id = ExpnId::fresh(ExpnId::root(), Some(ExpnInfo::default(\n             ExpnKind::Macro(MacroKind::Attr, sym::test_case), DUMMY_SP, self.session.edition()\n-        ));\n-        let expn_id = span.ctxt().outer_expn();\n+        )));\n         let module = self.module_map[&self.definitions.local_def_id(id)];\n+        let invocation_data = self.arenas.alloc_invocation_data(InvocationData::default(module));\n         self.definitions.set_invocation_parent(expn_id, module.def_id().unwrap().index);\n-        self.invocations.insert(expn_id, self.arenas.alloc_invocation_data(InvocationData {\n-            module,\n-            parent_legacy_scope: LegacyScope::Empty,\n-            output_legacy_scope: Cell::new(None),\n-        }));\n+        self.invocations.insert(expn_id, invocation_data);\n         expn_id\n     }\n \n@@ -251,10 +247,6 @@ impl<'a> base::Resolver for Resolver<'a> {\n }\n \n impl<'a> Resolver<'a> {\n-    pub fn dummy_parent_scope(&self) -> ParentScope<'a> {\n-        self.invoc_parent_scope(ExpnId::root(), Vec::new())\n-    }\n-\n     fn invoc_parent_scope(&self, invoc_id: ExpnId, derives: Vec<ast::Path>) -> ParentScope<'a> {\n         let invoc = self.invocations[&invoc_id];\n         ParentScope {"}, {"sha": "5767b5b3b46a527cb9908b73e72406cbd950334c", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1a1557c28501d256f3a21099d17a73e1d2c36aa0/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a1557c28501d256f3a21099d17a73e1d2c36aa0/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=1a1557c28501d256f3a21099d17a73e1d2c36aa0", "patch": "@@ -4,6 +4,7 @@ use rustc::hir::def_id::DefId;\n use rustc::hir;\n use rustc::lint as lint;\n use rustc::ty;\n+use rustc_resolve::ParentScope;\n use syntax;\n use syntax::ast::{self, Ident};\n use syntax::ext::base::SyntaxExtensionKind;\n@@ -431,7 +432,7 @@ fn macro_resolve(cx: &DocContext<'_>, path_str: &str) -> Option<Res> {\n     let path = ast::Path::from_ident(Ident::from_str(path_str));\n     cx.enter_resolver(|resolver| {\n         if let Ok((Some(ext), res)) = resolver.resolve_macro_path(\n-            &path, None, &resolver.dummy_parent_scope(), false, false\n+            &path, None, &ParentScope::default(resolver.graph_root), false, false\n         ) {\n             if let SyntaxExtensionKind::LegacyBang { .. } = ext.kind {\n                 return Some(res.map_id(|_| panic!(\"unexpected id\")));"}]}