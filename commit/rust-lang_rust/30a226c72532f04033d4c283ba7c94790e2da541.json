{"sha": "30a226c72532f04033d4c283ba7c94790e2da541", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwYTIyNmM3MjUzMmYwNDAzM2Q0YzI4M2JhN2M5NDc5MGUyZGE1NDE=", "commit": {"author": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2019-03-16T22:24:17Z"}, "committer": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2019-03-16T22:24:17Z"}, "message": "Move the primary assist fn to the top of the file", "tree": {"sha": "b60ae6575b9ca697a35788a4555c21c1d359b3c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b60ae6575b9ca697a35788a4555c21c1d359b3c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30a226c72532f04033d4c283ba7c94790e2da541", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30a226c72532f04033d4c283ba7c94790e2da541", "html_url": "https://github.com/rust-lang/rust/commit/30a226c72532f04033d4c283ba7c94790e2da541", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30a226c72532f04033d4c283ba7c94790e2da541/comments", "author": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b0b87f8deded258585d161c3077280e7d8112e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b0b87f8deded258585d161c3077280e7d8112e9", "html_url": "https://github.com/rust-lang/rust/commit/5b0b87f8deded258585d161c3077280e7d8112e9"}], "stats": {"total": 60, "additions": 30, "deletions": 30}, "files": [{"sha": "4435c4b5d4df857d3df2e849d686e4f2c1223564", "filename": "crates/ra_assists/src/add_missing_impl_members.rs", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/30a226c72532f04033d4c283ba7c94790e2da541/crates%2Fra_assists%2Fsrc%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30a226c72532f04033d4c283ba7c94790e2da541/crates%2Fra_assists%2Fsrc%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fadd_missing_impl_members.rs?ref=30a226c72532f04033d4c283ba7c94790e2da541", "patch": "@@ -9,36 +9,6 @@ use ra_fmt::{leading_indent, reindent};\n \n use itertools::Itertools;\n \n-/// Given an `ast::ImplBlock`, resolves the target trait (the one being\n-/// implemented) to a `ast::TraitDef`.\n-fn resolve_target_trait_def(\n-    db: &impl HirDatabase,\n-    resolver: &Resolver,\n-    impl_block: &ast::ImplBlock,\n-) -> Option<TreeArc<ast::TraitDef>> {\n-    let ast_path = impl_block.target_trait().map(AstNode::syntax).and_then(ast::PathType::cast)?;\n-    let hir_path = ast_path.path().and_then(hir::Path::from_ast)?;\n-\n-    match resolver.resolve_path(db, &hir_path).take_types() {\n-        Some(hir::Resolution::Def(hir::ModuleDef::Trait(def))) => Some(def.source(db).1),\n-        _ => None,\n-    }\n-}\n-\n-fn build_func_body(def: &ast::FnDef) -> String {\n-    let mut buf = String::new();\n-\n-    for child in def.syntax().children() {\n-        if child.kind() == SyntaxKind::SEMI {\n-            buf.push_str(\" { unimplemented!() }\")\n-        } else {\n-            child.text().push_to(&mut buf);\n-        }\n-    }\n-\n-    buf.trim_end().to_string()\n-}\n-\n pub(crate) fn add_missing_impl_members(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let impl_node = ctx.node_at_offset::<ast::ImplBlock>()?;\n     let impl_item_list = impl_node.item_list()?;\n@@ -113,6 +83,36 @@ pub(crate) fn add_missing_impl_members(mut ctx: AssistCtx<impl HirDatabase>) ->\n     ctx.build()\n }\n \n+/// Given an `ast::ImplBlock`, resolves the target trait (the one being\n+/// implemented) to a `ast::TraitDef`.\n+fn resolve_target_trait_def(\n+    db: &impl HirDatabase,\n+    resolver: &Resolver,\n+    impl_block: &ast::ImplBlock,\n+) -> Option<TreeArc<ast::TraitDef>> {\n+    let ast_path = impl_block.target_trait().map(AstNode::syntax).and_then(ast::PathType::cast)?;\n+    let hir_path = ast_path.path().and_then(hir::Path::from_ast)?;\n+\n+    match resolver.resolve_path(db, &hir_path).take_types() {\n+        Some(hir::Resolution::Def(hir::ModuleDef::Trait(def))) => Some(def.source(db).1),\n+        _ => None,\n+    }\n+}\n+\n+fn build_func_body(def: &ast::FnDef) -> String {\n+    let mut buf = String::new();\n+\n+    for child in def.syntax().children() {\n+        if child.kind() == SyntaxKind::SEMI {\n+            buf.push_str(\" { unimplemented!() }\")\n+        } else {\n+            child.text().push_to(&mut buf);\n+        }\n+    }\n+\n+    buf.trim_end().to_string()\n+}\n+\n #[cfg(test)]\n mod tests {\n     use super::*;"}]}