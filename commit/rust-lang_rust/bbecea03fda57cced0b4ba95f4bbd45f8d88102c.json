{"sha": "bbecea03fda57cced0b4ba95f4bbd45f8d88102c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiZWNlYTAzZmRhNTdjY2VkMGI0YmE5NWY0YmJkNDVmOGQ4ODEwMmM=", "commit": {"author": {"name": "Daniel McNab", "email": "36049421+DJMcNab@users.noreply.github.com", "date": "2021-03-08T16:37:52Z"}, "committer": {"name": "Daniel McNab", "email": "36049421+DJMcNab@users.noreply.github.com", "date": "2021-03-08T16:37:52Z"}, "message": "Revert \"Support disabling rustc build scripts\"\n\nThis reverts commit ddce6bb282764692d53b719bff4c37e3512d4556.", "tree": {"sha": "3061c3ecbb5cdfb3c302efb7cd536de356e8cff8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3061c3ecbb5cdfb3c302efb7cd536de356e8cff8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbecea03fda57cced0b4ba95f4bbd45f8d88102c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbecea03fda57cced0b4ba95f4bbd45f8d88102c", "html_url": "https://github.com/rust-lang/rust/commit/bbecea03fda57cced0b4ba95f4bbd45f8d88102c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbecea03fda57cced0b4ba95f4bbd45f8d88102c/comments", "author": {"login": "DJMcNab", "id": 36049421, "node_id": "MDQ6VXNlcjM2MDQ5NDIx", "avatar_url": "https://avatars.githubusercontent.com/u/36049421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DJMcNab", "html_url": "https://github.com/DJMcNab", "followers_url": "https://api.github.com/users/DJMcNab/followers", "following_url": "https://api.github.com/users/DJMcNab/following{/other_user}", "gists_url": "https://api.github.com/users/DJMcNab/gists{/gist_id}", "starred_url": "https://api.github.com/users/DJMcNab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DJMcNab/subscriptions", "organizations_url": "https://api.github.com/users/DJMcNab/orgs", "repos_url": "https://api.github.com/users/DJMcNab/repos", "events_url": "https://api.github.com/users/DJMcNab/events{/privacy}", "received_events_url": "https://api.github.com/users/DJMcNab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DJMcNab", "id": 36049421, "node_id": "MDQ6VXNlcjM2MDQ5NDIx", "avatar_url": "https://avatars.githubusercontent.com/u/36049421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DJMcNab", "html_url": "https://github.com/DJMcNab", "followers_url": "https://api.github.com/users/DJMcNab/followers", "following_url": "https://api.github.com/users/DJMcNab/following{/other_user}", "gists_url": "https://api.github.com/users/DJMcNab/gists{/gist_id}", "starred_url": "https://api.github.com/users/DJMcNab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DJMcNab/subscriptions", "organizations_url": "https://api.github.com/users/DJMcNab/orgs", "repos_url": "https://api.github.com/users/DJMcNab/repos", "events_url": "https://api.github.com/users/DJMcNab/events{/privacy}", "received_events_url": "https://api.github.com/users/DJMcNab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ddce6bb282764692d53b719bff4c37e3512d4556", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddce6bb282764692d53b719bff4c37e3512d4556", "html_url": "https://github.com/rust-lang/rust/commit/ddce6bb282764692d53b719bff4c37e3512d4556"}], "stats": {"total": 72, "additions": 12, "deletions": 60}, "files": [{"sha": "aa7a8ee520ece99f5a9b3abf3e8c4e7e3b8df4f9", "filename": "crates/project_model/src/workspace.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bbecea03fda57cced0b4ba95f4bbd45f8d88102c/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbecea03fda57cced0b4ba95f4bbd45f8d88102c/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fworkspace.rs?ref=bbecea03fda57cced0b4ba95f4bbd45f8d88102c", "patch": "@@ -274,19 +274,12 @@ impl ProjectWorkspace {\n         crate_graph\n     }\n \n-    pub fn collect_build_data_configs(\n-        &self,\n-        collector: &mut BuildDataCollector,\n-        for_private: bool,\n-    ) {\n+    pub fn collect_build_data_configs(&self, collector: &mut BuildDataCollector) {\n         match self {\n             ProjectWorkspace::Cargo { cargo, rustc, .. } => {\n                 collector.add_config(&cargo.workspace_root(), cargo.build_data_config().clone());\n-                if for_private {\n-                    if let Some(rustc) = rustc {\n-                        collector\n-                            .add_config(rustc.workspace_root(), rustc.build_data_config().clone());\n-                    }\n+                if let Some(rustc) = rustc {\n+                    collector.add_config(rustc.workspace_root(), rustc.build_data_config().clone());\n                 }\n             }\n             _ => {}"}, {"sha": "3bd7e678d3f53e653be7473309475501f73975f1", "filename": "crates/rust-analyzer/src/cli/analysis_bench.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bbecea03fda57cced0b4ba95f4bbd45f8d88102c/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbecea03fda57cced0b4ba95f4bbd45f8d88102c/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs?ref=bbecea03fda57cced0b4ba95f4bbd45f8d88102c", "patch": "@@ -68,9 +68,6 @@ impl BenchCmd {\n         let load_cargo_config = LoadCargoConfig {\n             load_out_dirs_from_check: self.load_output_dirs,\n             with_proc_macro: self.with_proc_macro,\n-            // This will currently never have rustcSource set, however if in\n-            // future it does this will handle that case\n-            run_rustc_build_scripts: true,\n         };\n         let (mut host, vfs, _proc_macro) =\n             load_workspace_at(&self.path, &cargo_config, &load_cargo_config, &|_| {})?;"}, {"sha": "ad0759bdad8c9a4168a04f7caa7658f0e920873c", "filename": "crates/rust-analyzer/src/cli/analysis_stats.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bbecea03fda57cced0b4ba95f4bbd45f8d88102c/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbecea03fda57cced0b4ba95f4bbd45f8d88102c/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs?ref=bbecea03fda57cced0b4ba95f4bbd45f8d88102c", "patch": "@@ -63,9 +63,6 @@ impl AnalysisStatsCmd {\n         let load_cargo_config = LoadCargoConfig {\n             load_out_dirs_from_check: self.load_output_dirs,\n             with_proc_macro: self.with_proc_macro,\n-            // This will currently never have rustcSource set, however if in\n-            // future it does this will handle that case\n-            run_rustc_build_scripts: true,\n         };\n         let (host, vfs, _proc_macro) =\n             load_workspace_at(&self.path, &cargo_config, &load_cargo_config, &|_| {})?;"}, {"sha": "8b985716b031a038285499f6266c9fa638b4b0fe", "filename": "crates/rust-analyzer/src/cli/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bbecea03fda57cced0b4ba95f4bbd45f8d88102c/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbecea03fda57cced0b4ba95f4bbd45f8d88102c/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs?ref=bbecea03fda57cced0b4ba95f4bbd45f8d88102c", "patch": "@@ -34,13 +34,7 @@ pub fn diagnostics(\n     with_proc_macro: bool,\n ) -> Result<()> {\n     let cargo_config = Default::default();\n-    let load_cargo_config = LoadCargoConfig {\n-        load_out_dirs_from_check,\n-        with_proc_macro,\n-        // This will currently never have rustcSource set, however if in\n-        // future it does this will handle that case\n-        run_rustc_build_scripts: true,\n-    };\n+    let load_cargo_config = LoadCargoConfig { load_out_dirs_from_check, with_proc_macro };\n     let (host, _vfs, _proc_macro) =\n         load_workspace_at(path, &cargo_config, &load_cargo_config, &|_| {})?;\n     let db = host.raw_database();"}, {"sha": "310c36904e0a0aa4a860daf32063df65f381a381", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bbecea03fda57cced0b4ba95f4bbd45f8d88102c/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbecea03fda57cced0b4ba95f4bbd45f8d88102c/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=bbecea03fda57cced0b4ba95f4bbd45f8d88102c", "patch": "@@ -14,7 +14,6 @@ use vfs::{loader::Handle, AbsPath, AbsPathBuf};\n use crate::reload::{ProjectFolders, SourceRootConfig};\n \n pub struct LoadCargoConfig {\n-    pub run_rustc_build_scripts: bool,\n     pub load_out_dirs_from_check: bool,\n     pub with_proc_macro: bool,\n }\n@@ -54,7 +53,7 @@ pub fn load_workspace(\n \n     let build_data = if config.load_out_dirs_from_check {\n         let mut collector = BuildDataCollector::default();\n-        ws.collect_build_data_configs(&mut collector, config.run_rustc_build_scripts);\n+        ws.collect_build_data_configs(&mut collector);\n         Some(collector.collect(progress)?)\n     } else {\n         None\n@@ -137,11 +136,8 @@ mod tests {\n     fn test_loading_rust_analyzer() -> Result<()> {\n         let path = Path::new(env!(\"CARGO_MANIFEST_DIR\")).parent().unwrap().parent().unwrap();\n         let cargo_config = Default::default();\n-        let load_cargo_config = LoadCargoConfig {\n-            load_out_dirs_from_check: false,\n-            with_proc_macro: false,\n-            run_rustc_build_scripts: false,\n-        };\n+        let load_cargo_config =\n+            LoadCargoConfig { load_out_dirs_from_check: false, with_proc_macro: false };\n         let (host, _vfs, _proc_macro) =\n             load_workspace_at(path, &cargo_config, &load_cargo_config, &|_| {})?;\n "}, {"sha": "79f426fff15a9381218d2e099bd4b8d334add1d7", "filename": "crates/rust-analyzer/src/cli/ssr.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bbecea03fda57cced0b4ba95f4bbd45f8d88102c/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fssr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbecea03fda57cced0b4ba95f4bbd45f8d88102c/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fssr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fssr.rs?ref=bbecea03fda57cced0b4ba95f4bbd45f8d88102c", "patch": "@@ -9,13 +9,8 @@ use ide_ssr::{MatchFinder, SsrPattern, SsrRule};\n pub fn apply_ssr_rules(rules: Vec<SsrRule>) -> Result<()> {\n     use ide_db::base_db::SourceDatabaseExt;\n     let cargo_config = Default::default();\n-    let load_cargo_config = LoadCargoConfig {\n-        load_out_dirs_from_check: true,\n-        with_proc_macro: true,\n-        // This will currently never have rustcSource set, however if in\n-        // future it does this will handle that case\n-        run_rustc_build_scripts: true,\n-    };\n+    let load_cargo_config =\n+        LoadCargoConfig { load_out_dirs_from_check: true, with_proc_macro: true };\n     let (host, vfs, _proc_macro) =\n         load_workspace_at(&std::env::current_dir()?, &cargo_config, &load_cargo_config, &|_| {})?;\n     let db = host.raw_database();\n@@ -41,13 +36,8 @@ pub fn search_for_patterns(patterns: Vec<SsrPattern>, debug_snippet: Option<Stri\n     use ide_db::base_db::SourceDatabaseExt;\n     use ide_db::symbol_index::SymbolsDatabase;\n     let cargo_config = Default::default();\n-    let load_cargo_config = LoadCargoConfig {\n-        load_out_dirs_from_check: true,\n-        with_proc_macro: true,\n-        // This will currently never have rustcSource set, however if in\n-        // future it does this will handle that case\n-        run_rustc_build_scripts: true,\n-    };\n+    let load_cargo_config =\n+        LoadCargoConfig { load_out_dirs_from_check: true, with_proc_macro: true };\n     let (host, _vfs, _proc_macro) =\n         load_workspace_at(&std::env::current_dir()?, &cargo_config, &load_cargo_config, &|_| {})?;\n     let db = host.raw_database();"}, {"sha": "3671367025059787e105ff5b348185e6ae133da0", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bbecea03fda57cced0b4ba95f4bbd45f8d88102c/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbecea03fda57cced0b4ba95f4bbd45f8d88102c/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=bbecea03fda57cced0b4ba95f4bbd45f8d88102c", "patch": "@@ -49,8 +49,6 @@ config_data! {\n         /// Run build scripts (`build.rs`) for more precise code analysis.\n         cargo_runBuildScripts |\n         cargo_loadOutDirsFromCheck: bool = \"false\",\n-        /// Disable running build scripts (`build.rs`) for the `rustc_private` crates in `rustcSource`.\n-        cargo_disableRustcBuildScripts: bool = \"false\",\n         /// Do not activate the `default` feature.\n         cargo_noDefaultFeatures: bool    = \"false\",\n         /// Compilation target (target triple).\n@@ -484,9 +482,6 @@ impl Config {\n     pub fn run_build_scripts(&self) -> bool {\n         self.data.cargo_runBuildScripts || self.data.procMacro_enable\n     }\n-    pub fn run_rustc_build_scripts(&self) -> bool {\n-        self.run_build_scripts() && !self.data.cargo_disableRustcBuildScripts\n-    }\n     pub fn cargo(&self) -> CargoConfig {\n         let rustc_source = self.data.rustcSource.as_ref().map(|rustc_src| {\n             if rustc_src == \"discover\" {"}, {"sha": "aa8504c3d5168cedf12404ffab8b0ac6d527a466", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bbecea03fda57cced0b4ba95f4bbd45f8d88102c/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbecea03fda57cced0b4ba95f4bbd45f8d88102c/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=bbecea03fda57cced0b4ba95f4bbd45f8d88102c", "patch": "@@ -340,10 +340,7 @@ impl GlobalState {\n         if self.config.run_build_scripts() && workspace_build_data.is_none() {\n             let mut collector = BuildDataCollector::default();\n             for ws in &workspaces {\n-                ws.collect_build_data_configs(\n-                    &mut collector,\n-                    self.config.run_rustc_build_scripts(),\n-                );\n+                ws.collect_build_data_configs(&mut collector);\n             }\n             self.fetch_build_data_request(collector)\n         }"}, {"sha": "1dbf2a611d6722b18d40fdfc8cec651ca916778f", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbecea03fda57cced0b4ba95f4bbd45f8d88102c/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/bbecea03fda57cced0b4ba95f4bbd45f8d88102c/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=bbecea03fda57cced0b4ba95f4bbd45f8d88102c", "patch": "@@ -12,8 +12,6 @@\n  List of features to activate.\n [[rust-analyzer.cargo.runBuildScripts]]rust-analyzer.cargo.runBuildScripts (default: `false`)::\n  Run build scripts (`build.rs`) for more precise code analysis.\n-[[rust-analyzer.cargo.disableRustcBuildScripts]]rust-analyzer.cargo.disableRustcBuildScripts (default: `false`)::\n- Disable running build scripts (`build.rs`) for the `rustc_private` crates in `rustcSource`.\n [[rust-analyzer.cargo.noDefaultFeatures]]rust-analyzer.cargo.noDefaultFeatures (default: `false`)::\n  Do not activate the `default` feature.\n [[rust-analyzer.cargo.target]]rust-analyzer.cargo.target (default: `null`)::"}, {"sha": "1987364bc02b8239384ef39164f60cdd23867029", "filename": "editors/code/package.json", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bbecea03fda57cced0b4ba95f4bbd45f8d88102c/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/bbecea03fda57cced0b4ba95f4bbd45f8d88102c/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=bbecea03fda57cced0b4ba95f4bbd45f8d88102c", "patch": "@@ -413,11 +413,6 @@\n                     \"default\": false,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.cargo.disableRustcBuildScripts\": {\n-                    \"markdownDescription\": \"Disable running build scripts (`build.rs`) for the `rustc_private` crates in `rustcSource`.\",\n-                    \"default\": false,\n-                    \"type\": \"boolean\"\n-                },\n                 \"rust-analyzer.cargo.noDefaultFeatures\": {\n                     \"markdownDescription\": \"Do not activate the `default` feature.\",\n                     \"default\": false,"}]}