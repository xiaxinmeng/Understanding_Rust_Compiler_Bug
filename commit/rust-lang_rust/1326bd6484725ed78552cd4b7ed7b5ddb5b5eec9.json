{"sha": "1326bd6484725ed78552cd4b7ed7b5ddb5b5eec9", "node_id": "C_kwDOAAsO6NoAKDEzMjZiZDY0ODQ3MjVlZDc4NTUyY2Q0YjdlZDdiNWRkYjViNWVlYzk", "commit": {"author": {"name": "worldeva", "email": "centraun@gmail.com", "date": "2021-08-24T20:45:46Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2021-12-31T15:31:13Z"}, "message": "Lock x.py build state\n\nPrevent spurious build failures and other bugs caused by parallel runs of\nx.py. We back the lock with sqlite, so that we have a cross-platform locking\nstrategy, and which can be done nearly first in the build process (from Python),\nwhich helps move the lock as early as possible.", "tree": {"sha": "dc6c33b99c9dd90dd34f4aa462a9b3c1d592adfa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc6c33b99c9dd90dd34f4aa462a9b3c1d592adfa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1326bd6484725ed78552cd4b7ed7b5ddb5b5eec9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1326bd6484725ed78552cd4b7ed7b5ddb5b5eec9", "html_url": "https://github.com/rust-lang/rust/commit/1326bd6484725ed78552cd4b7ed7b5ddb5b5eec9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1326bd6484725ed78552cd4b7ed7b5ddb5b5eec9/comments", "author": {"login": "worldeva", "id": 62271116, "node_id": "MDQ6VXNlcjYyMjcxMTE2", "avatar_url": "https://avatars.githubusercontent.com/u/62271116?v=4", "gravatar_id": "", "url": "https://api.github.com/users/worldeva", "html_url": "https://github.com/worldeva", "followers_url": "https://api.github.com/users/worldeva/followers", "following_url": "https://api.github.com/users/worldeva/following{/other_user}", "gists_url": "https://api.github.com/users/worldeva/gists{/gist_id}", "starred_url": "https://api.github.com/users/worldeva/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/worldeva/subscriptions", "organizations_url": "https://api.github.com/users/worldeva/orgs", "repos_url": "https://api.github.com/users/worldeva/repos", "events_url": "https://api.github.com/users/worldeva/events{/privacy}", "received_events_url": "https://api.github.com/users/worldeva/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "772d51f887fa407216860bf8ecf3f1a32fb795b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/772d51f887fa407216860bf8ecf3f1a32fb795b4", "html_url": "https://github.com/rust-lang/rust/commit/772d51f887fa407216860bf8ecf3f1a32fb795b4"}], "stats": {"total": 42, "additions": 42, "deletions": 0}, "files": [{"sha": "83ba58bc7bdd385d92de0c3c83a93e2f2fac46b2", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/1326bd6484725ed78552cd4b7ed7b5ddb5b5eec9/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/1326bd6484725ed78552cd4b7ed7b5ddb5b5eec9/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=1326bd6484725ed78552cd4b7ed7b5ddb5b5eec9", "patch": "@@ -15,6 +15,42 @@\n \n from time import time\n \n+# Acquire a lock on the build directory to make sure that\n+# we don't cause a race condition while building\n+# Lock is created in `build_dir/lock.db`\n+def acquire_lock(build_dir):\n+    try:\n+        import sqlite3\n+\n+        path = os.path.join(build_dir, \"lock.db\")\n+        try:\n+            con = sqlite3.Connection(path, timeout=0)\n+            curs = con.cursor()\n+            curs.execute(\"BEGIN EXCLUSIVE\")\n+            # The lock is released when the cursor is dropped\n+            return curs\n+        # If the database is busy then lock has already been acquired\n+        # so we wait for the lock.\n+        # We retry every quarter second so that execution is passed back to python\n+        # so that it can handle signals\n+        except sqlite3.OperationalError:\n+            del con\n+            del curs\n+            print(\"Waiting for lock on build directory\")\n+            con = sqlite3.Connection(path, timeout=0.25)\n+            curs = con.cursor()\n+            while True:\n+                try:\n+                    curs.execute(\"BEGIN EXCLUSIVE\")\n+                except sqlite3.OperationalError:\n+                    pass\n+            return curs\n+    except ImportError:\n+        print(\"warning: sqlite3 not available in python, skipping build directory lock\")\n+        print(\"please file an issue on rust-lang/rust\")\n+        print(\"this is not a problem for non-concurrent x.py invocations\")\n+        return None\n+\n def support_xz():\n     try:\n         with tempfile.NamedTemporaryFile(delete=False) as temp_file:\n@@ -1225,6 +1261,12 @@ def bootstrap(help_triggered):\n     build.set_dist_environment(data[\"dist_server\"])\n \n     build.build = args.build or build.build_triple()\n+\n+    # Acquire the lock before doing any build actions\n+    # The lock is released when `lock` is dropped\n+    if not os.path.exists(build.build_dir):\n+        os.makedirs(build.build_dir)\n+    lock = acquire_lock(build.build_dir)\n     build.update_submodules()\n \n     # Fetch/build the bootstrap"}]}