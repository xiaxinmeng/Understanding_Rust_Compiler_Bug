{"sha": "795b8153c05109bca309957b5a9f1e10ec7cbbe7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5NWI4MTUzYzA1MTA5YmNhMzA5OTU3YjVhOWYxZTEwZWM3Y2JiZTc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-07-05T20:48:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-05T20:48:10Z"}, "message": "Merge #9503\n\n9503: feat: make join lines behavior configurable r=matklad a=matklad\n\n![join_config](https://user-images.githubusercontent.com/1711539/124515923-4504e800-dde9-11eb-8d58-d97945a1a785.gif)\r\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "3cceb3b1dcbf95ae0859adfe9b48cbfc168665bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3cceb3b1dcbf95ae0859adfe9b48cbfc168665bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/795b8153c05109bca309957b5a9f1e10ec7cbbe7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg43AKCRBK7hj4Ov3rIwAAHwoIABS9pJdS5HHvFc7fNCzsExmv\nf/FvYJaEODVc+AP7FLvQVfEj0mLTWx4UHK2xDERhJeRPE7kTs15wG/No9/hUHs42\ny9hPj39Rpkpw7vxRmvsV2KaSO5OCV5wdIxf+qGhunTRqt+Bx8QDRT6DUyL31E55O\nqBYd959Jb4e36lFx+V813aVC4RBEB+lHYcjxThpDoiN5Vtkwa/SdxZrio/KkjZ0g\n/NL4E9x6gZWjyrfLquPc5F8nGPdgSIrpads8bdAhiJDsRh/9HHtzBhFWDMCTBIYb\nyT90H0qFxNl3ZXnHwPxTvslUcByBCN14iT+Zr6F+LCZ0v6QQfpsetHINoQkdu7c=\n=4G3d\n-----END PGP SIGNATURE-----\n", "payload": "tree 3cceb3b1dcbf95ae0859adfe9b48cbfc168665bf\nparent 91bfa4b154a9776a57f25071f03e68d4f9f5ef35\nparent b8a6ea5ab58f3b4d9c18f5d15d5115bc44a1d086\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1625518090 +0000\ncommitter GitHub <noreply@github.com> 1625518090 +0000\n\nMerge #9503\n\n9503: feat: make join lines behavior configurable r=matklad a=matklad\n\n![join_config](https://user-images.githubusercontent.com/1711539/124515923-4504e800-dde9-11eb-8d58-d97945a1a785.gif)\r\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/795b8153c05109bca309957b5a9f1e10ec7cbbe7", "html_url": "https://github.com/rust-lang/rust/commit/795b8153c05109bca309957b5a9f1e10ec7cbbe7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/795b8153c05109bca309957b5a9f1e10ec7cbbe7/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91bfa4b154a9776a57f25071f03e68d4f9f5ef35", "url": "https://api.github.com/repos/rust-lang/rust/commits/91bfa4b154a9776a57f25071f03e68d4f9f5ef35", "html_url": "https://github.com/rust-lang/rust/commit/91bfa4b154a9776a57f25071f03e68d4f9f5ef35"}, {"sha": "b8a6ea5ab58f3b4d9c18f5d15d5115bc44a1d086", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8a6ea5ab58f3b4d9c18f5d15d5115bc44a1d086", "html_url": "https://github.com/rust-lang/rust/commit/b8a6ea5ab58f3b4d9c18f5d15d5115bc44a1d086"}], "stats": {"total": 255, "additions": 171, "deletions": 84}, "files": [{"sha": "fd8ea8bf2e52992f6f5b566e835f2fd942586522", "filename": "crates/ide/src/join_lines.rs", "status": "modified", "additions": 113, "deletions": 73, "changes": 186, "blob_url": "https://github.com/rust-lang/rust/blob/795b8153c05109bca309957b5a9f1e10ec7cbbe7/crates%2Fide%2Fsrc%2Fjoin_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/795b8153c05109bca309957b5a9f1e10ec7cbbe7/crates%2Fide%2Fsrc%2Fjoin_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fjoin_lines.rs?ref=795b8153c05109bca309957b5a9f1e10ec7cbbe7", "patch": "@@ -12,18 +12,32 @@ use syntax::{\n \n use text_edit::{TextEdit, TextEditBuilder};\n \n+pub struct JoinLinesConfig {\n+    pub join_else_if: bool,\n+    pub remove_trailing_comma: bool,\n+    pub unwrap_trivial_blocks: bool,\n+}\n+\n // Feature: Join Lines\n //\n // Join selected lines into one, smartly fixing up whitespace, trailing commas, and braces.\n //\n+// See\n+// https://user-images.githubusercontent.com/1711539/124515923-4504e800-dde9-11eb-8d58-d97945a1a785.gif[this gif]\n+// for the cases handled specially by joined lines.\n+//\n // |===\n // | Editor  | Action Name\n //\n // | VS Code | **Rust Analyzer: Join lines**\n // |===\n //\n // image::https://user-images.githubusercontent.com/48062697/113020661-b6922200-917a-11eb-87c4-b75acc028f11.gif[]\n-pub(crate) fn join_lines(file: &SourceFile, range: TextRange) -> TextEdit {\n+pub(crate) fn join_lines(\n+    config: &JoinLinesConfig,\n+    file: &SourceFile,\n+    range: TextRange,\n+) -> TextEdit {\n     let range = if range.is_empty() {\n         let syntax = file.syntax();\n         let text = syntax.text().slice(range.start()..);\n@@ -40,15 +54,20 @@ pub(crate) fn join_lines(file: &SourceFile, range: TextRange) -> TextEdit {\n     match file.syntax().covering_element(range) {\n         NodeOrToken::Node(node) => {\n             for token in node.descendants_with_tokens().filter_map(|it| it.into_token()) {\n-                remove_newlines(&mut edit, &token, range)\n+                remove_newlines(config, &mut edit, &token, range)\n             }\n         }\n-        NodeOrToken::Token(token) => remove_newlines(&mut edit, &token, range),\n+        NodeOrToken::Token(token) => remove_newlines(config, &mut edit, &token, range),\n     };\n     edit.finish()\n }\n \n-fn remove_newlines(edit: &mut TextEditBuilder, token: &SyntaxToken, range: TextRange) {\n+fn remove_newlines(\n+    config: &JoinLinesConfig,\n+    edit: &mut TextEditBuilder,\n+    token: &SyntaxToken,\n+    range: TextRange,\n+) {\n     let intersection = match range.intersect(token.text_range()) {\n         Some(range) => range,\n         None => return,\n@@ -60,12 +79,17 @@ fn remove_newlines(edit: &mut TextEditBuilder, token: &SyntaxToken, range: TextR\n         let pos: TextSize = (pos as u32).into();\n         let offset = token.text_range().start() + range.start() + pos;\n         if !edit.invalidates_offset(offset) {\n-            remove_newline(edit, token, offset);\n+            remove_newline(config, edit, token, offset);\n         }\n     }\n }\n \n-fn remove_newline(edit: &mut TextEditBuilder, token: &SyntaxToken, offset: TextSize) {\n+fn remove_newline(\n+    config: &JoinLinesConfig,\n+    edit: &mut TextEditBuilder,\n+    token: &SyntaxToken,\n+    offset: TextSize,\n+) {\n     if token.kind() != WHITESPACE || token.text().bytes().filter(|&b| b == b'\\n').count() != 1 {\n         let n_spaces_after_line_break = {\n             let suff = &token.text()[TextRange::new(\n@@ -102,24 +126,66 @@ fn remove_newline(edit: &mut TextEditBuilder, token: &SyntaxToken, offset: TextS\n         _ => return,\n     };\n \n-    if is_trailing_comma(prev.kind(), next.kind()) {\n-        // Removes: trailing comma, newline (incl. surrounding whitespace)\n-        edit.delete(TextRange::new(prev.text_range().start(), token.text_range().end()));\n-        return;\n+    if config.remove_trailing_comma && prev.kind() == T![,] {\n+        match next.kind() {\n+            T![')'] | T![']'] => {\n+                // Removes: trailing comma, newline (incl. surrounding whitespace)\n+                edit.delete(TextRange::new(prev.text_range().start(), token.text_range().end()));\n+                return;\n+            }\n+            T!['}'] => {\n+                // Removes: comma, newline (incl. surrounding whitespace)\n+                let space = if let Some(left) = prev.prev_sibling_or_token() {\n+                    compute_ws(left.kind(), next.kind())\n+                } else {\n+                    \" \"\n+                };\n+                edit.replace(\n+                    TextRange::new(prev.text_range().start(), token.text_range().end()),\n+                    space.to_string(),\n+                );\n+                return;\n+            }\n+            _ => (),\n+        }\n     }\n \n-    if prev.kind() == T![,] && next.kind() == T!['}'] {\n-        // Removes: comma, newline (incl. surrounding whitespace)\n-        let space = if let Some(left) = prev.prev_sibling_or_token() {\n-            compute_ws(left.kind(), next.kind())\n-        } else {\n-            \" \"\n-        };\n-        edit.replace(\n-            TextRange::new(prev.text_range().start(), token.text_range().end()),\n-            space.to_string(),\n-        );\n-        return;\n+    if config.join_else_if {\n+        if let (Some(prev), Some(_next)) = (as_if_expr(&prev), as_if_expr(&next)) {\n+            match prev.else_token() {\n+                Some(_) => cov_mark::hit!(join_two_ifs_with_existing_else),\n+                None => {\n+                    cov_mark::hit!(join_two_ifs);\n+                    edit.replace(token.text_range(), \" else \".to_string());\n+                    return;\n+                }\n+            }\n+        }\n+    }\n+\n+    if config.unwrap_trivial_blocks {\n+        // Special case that turns something like:\n+        //\n+        // ```\n+        // my_function({$0\n+        //    <some-expr>\n+        // })\n+        // ```\n+        //\n+        // into `my_function(<some-expr>)`\n+        if join_single_expr_block(edit, token).is_some() {\n+            return;\n+        }\n+        // ditto for\n+        //\n+        // ```\n+        // use foo::{$0\n+        //    bar\n+        // };\n+        // ```\n+        if join_single_use_tree(edit, token).is_some() {\n+            return;\n+        }\n     }\n \n     if let (Some(_), Some(next)) = (\n@@ -134,40 +200,6 @@ fn remove_newline(edit: &mut TextEditBuilder, token: &SyntaxToken, offset: TextS\n         return;\n     }\n \n-    if let (Some(prev), Some(_next)) = (as_if_expr(&prev), as_if_expr(&next)) {\n-        match prev.else_token() {\n-            Some(_) => cov_mark::hit!(join_two_ifs_with_existing_else),\n-            None => {\n-                cov_mark::hit!(join_two_ifs);\n-                edit.replace(token.text_range(), \" else \".to_string());\n-                return;\n-            }\n-        }\n-    }\n-\n-    // Special case that turns something like:\n-    //\n-    // ```\n-    // my_function({$0\n-    //    <some-expr>\n-    // })\n-    // ```\n-    //\n-    // into `my_function(<some-expr>)`\n-    if join_single_expr_block(edit, token).is_some() {\n-        return;\n-    }\n-    // ditto for\n-    //\n-    // ```\n-    // use foo::{$0\n-    //    bar\n-    // };\n-    // ```\n-    if join_single_use_tree(edit, token).is_some() {\n-        return;\n-    }\n-\n     // Remove newline but add a computed amount of whitespace characters\n     edit.replace(token.text_range(), compute_ws(prev.kind(), next.kind()).to_string());\n }\n@@ -208,10 +240,6 @@ fn join_single_use_tree(edit: &mut TextEditBuilder, token: &SyntaxToken) -> Opti\n     Some(())\n }\n \n-fn is_trailing_comma(left: SyntaxKind, right: SyntaxKind) -> bool {\n-    matches!((left, right), (T![,], T![')'] | T![']']))\n-}\n-\n fn as_if_expr(element: &SyntaxElement) -> Option<ast::IfExpr> {\n     let mut node = element.as_node()?.clone();\n     if let Some(stmt) = ast::ExprStmt::cast(node.clone()) {\n@@ -251,11 +279,17 @@ mod tests {\n     use super::*;\n \n     fn check_join_lines(ra_fixture_before: &str, ra_fixture_after: &str) {\n+        let config = JoinLinesConfig {\n+            join_else_if: true,\n+            remove_trailing_comma: true,\n+            unwrap_trivial_blocks: true,\n+        };\n+\n         let (before_cursor_pos, before) = extract_offset(ra_fixture_before);\n         let file = SourceFile::parse(&before).ok().unwrap();\n \n         let range = TextRange::empty(before_cursor_pos);\n-        let result = join_lines(&file, range);\n+        let result = join_lines(&config, &file, range);\n \n         let actual = {\n             let mut actual = before;\n@@ -269,6 +303,24 @@ mod tests {\n         assert_eq_text!(ra_fixture_after, &actual);\n     }\n \n+    fn check_join_lines_sel(ra_fixture_before: &str, ra_fixture_after: &str) {\n+        let config = JoinLinesConfig {\n+            join_else_if: true,\n+            remove_trailing_comma: true,\n+            unwrap_trivial_blocks: true,\n+        };\n+\n+        let (sel, before) = extract_range(ra_fixture_before);\n+        let parse = SourceFile::parse(&before);\n+        let result = join_lines(&config, &parse.tree(), sel);\n+        let actual = {\n+            let mut actual = before;\n+            result.apply(&mut actual);\n+            actual\n+        };\n+        assert_eq_text!(ra_fixture_after, &actual);\n+    }\n+\n     #[test]\n     fn test_join_lines_comma() {\n         check_join_lines(\n@@ -657,18 +709,6 @@ fn foo() {\n         );\n     }\n \n-    fn check_join_lines_sel(ra_fixture_before: &str, ra_fixture_after: &str) {\n-        let (sel, before) = extract_range(ra_fixture_before);\n-        let parse = SourceFile::parse(&before);\n-        let result = join_lines(&parse.tree(), sel);\n-        let actual = {\n-            let mut actual = before;\n-            result.apply(&mut actual);\n-            actual\n-        };\n-        assert_eq_text!(ra_fixture_after, &actual);\n-    }\n-\n     #[test]\n     fn test_join_lines_selection_fn_args() {\n         check_join_lines_sel("}, {"sha": "83824e2cfab43e4ecd71ee43dac29e20c1197735", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/795b8153c05109bca309957b5a9f1e10ec7cbbe7/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/795b8153c05109bca309957b5a9f1e10ec7cbbe7/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=795b8153c05109bca309957b5a9f1e10ec7cbbe7", "patch": "@@ -57,12 +57,11 @@ mod view_item_tree;\n use std::sync::Arc;\n \n use cfg::CfgOptions;\n-\n-use ide_db::base_db::{\n-    salsa::{self, ParallelDatabase},\n-    Env, FileLoader, FileSet, SourceDatabase, VfsPath,\n-};\n use ide_db::{\n+    base_db::{\n+        salsa::{self, ParallelDatabase},\n+        Env, FileLoader, FileSet, SourceDatabase, VfsPath,\n+    },\n     symbol_index::{self, FileSymbol},\n     LineIndexDatabase,\n };\n@@ -80,6 +79,7 @@ pub use crate::{\n     highlight_related::HighlightedRange,\n     hover::{HoverAction, HoverConfig, HoverDocFormat, HoverGotoTypeData, HoverResult},\n     inlay_hints::{InlayHint, InlayHintsConfig, InlayKind},\n+    join_lines::JoinLinesConfig,\n     markup::Markup,\n     move_item::Direction,\n     prime_caches::PrimeCachesProgress,\n@@ -308,10 +308,10 @@ impl Analysis {\n \n     /// Returns an edit to remove all newlines in the range, cleaning up minor\n     /// stuff like trailing commas.\n-    pub fn join_lines(&self, frange: FileRange) -> Cancellable<TextEdit> {\n+    pub fn join_lines(&self, config: &JoinLinesConfig, frange: FileRange) -> Cancellable<TextEdit> {\n         self.with_db(|db| {\n             let parse = db.parse(frange.file_id);\n-            join_lines::join_lines(&parse.tree(), frange.range)\n+            join_lines::join_lines(&config, &parse.tree(), frange.range)\n         })\n     }\n "}, {"sha": "415ae708b063225b7e77551d26f2926297b92854", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/795b8153c05109bca309957b5a9f1e10ec7cbbe7/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/795b8153c05109bca309957b5a9f1e10ec7cbbe7/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=795b8153c05109bca309957b5a9f1e10ec7cbbe7", "patch": "@@ -12,7 +12,7 @@ use std::{ffi::OsString, iter, path::PathBuf};\n use flycheck::FlycheckConfig;\n use ide::{\n     AssistConfig, CompletionConfig, DiagnosticsConfig, HoverConfig, HoverDocFormat,\n-    InlayHintsConfig,\n+    InlayHintsConfig, JoinLinesConfig,\n };\n use ide_db::helpers::{\n     insert_use::{ImportGranularity, InsertUseConfig, PrefixKind},\n@@ -186,6 +186,13 @@ config_data! {\n         /// Whether to show inlay type hints for variables.\n         inlayHints_typeHints: bool          = \"true\",\n \n+        /// Join lines inserts else between consecutive ifs.\n+        joinLines_joinElseIf: bool = \"true\",\n+        /// Join lines removes trailing commas.\n+        joinLines_removeTrailingComma: bool = \"true\",\n+        /// Join lines unwraps trivial blocks.\n+        joinLines_unwrapTrivialBlock: bool = \"true\",\n+\n         /// Whether to show `Debug` lens. Only applies when\n         /// `#rust-analyzer.lens.enable#` is set.\n         lens_debug: bool            = \"true\",\n@@ -752,6 +759,13 @@ impl Config {\n             insert_use: self.insert_use_config(),\n         }\n     }\n+    pub fn join_lines(&self) -> JoinLinesConfig {\n+        JoinLinesConfig {\n+            join_else_if: self.data.joinLines_joinElseIf,\n+            remove_trailing_comma: self.data.joinLines_removeTrailingComma,\n+            unwrap_trivial_blocks: self.data.joinLines_unwrapTrivialBlock,\n+        }\n+    }\n     pub fn call_info_full(&self) -> bool {\n         self.data.callInfo_full\n     }"}, {"sha": "c1eff8c25cc388871a6f6299653aa81a3a9fb976", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/795b8153c05109bca309957b5a9f1e10ec7cbbe7/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/795b8153c05109bca309957b5a9f1e10ec7cbbe7/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=795b8153c05109bca309957b5a9f1e10ec7cbbe7", "patch": "@@ -233,21 +233,24 @@ pub(crate) fn handle_join_lines(\n     params: lsp_ext::JoinLinesParams,\n ) -> Result<Vec<lsp_types::TextEdit>> {\n     let _p = profile::span(\"handle_join_lines\");\n+\n+    let config = snap.config.join_lines();\n     let file_id = from_proto::file_id(&snap, &params.text_document.uri)?;\n     let line_index = snap.file_line_index(file_id)?;\n+\n     let mut res = TextEdit::default();\n     for range in params.ranges {\n         let range = from_proto::text_range(&line_index, range);\n-        let edit = snap.analysis.join_lines(FileRange { file_id, range })?;\n+        let edit = snap.analysis.join_lines(&config, FileRange { file_id, range })?;\n         match res.union(edit) {\n             Ok(()) => (),\n             Err(_edit) => {\n                 // just ignore overlapping edits\n             }\n         }\n     }\n-    let res = to_proto::text_edit_vec(&line_index, res);\n-    Ok(res)\n+\n+    Ok(to_proto::text_edit_vec(&line_index, res))\n }\n \n pub(crate) fn handle_on_enter("}, {"sha": "86d147ee8bccb5670de91b12ae12e5c0cbbbaec1", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/795b8153c05109bca309957b5a9f1e10ec7cbbe7/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/795b8153c05109bca309957b5a9f1e10ec7cbbe7/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=795b8153c05109bca309957b5a9f1e10ec7cbbe7", "patch": "@@ -281,6 +281,21 @@ site.\n --\n Whether to show inlay type hints for variables.\n --\n+[[rust-analyzer.joinLines.joinElseIf]]rust-analyzer.joinLines.joinElseIf (default: `true`)::\n++\n+--\n+Join lines inserts else between consecutive ifs.\n+--\n+[[rust-analyzer.joinLines.removeTrailingComma]]rust-analyzer.joinLines.removeTrailingComma (default: `true`)::\n++\n+--\n+Join lines removes trailing commas.\n+--\n+[[rust-analyzer.joinLines.unwrapTrivialBlock]]rust-analyzer.joinLines.unwrapTrivialBlock (default: `true`)::\n++\n+--\n+Join lines unwraps trivial blocks.\n+--\n [[rust-analyzer.lens.debug]]rust-analyzer.lens.debug (default: `true`)::\n +\n --"}, {"sha": "c83e1f9157f85ad71b32e75cfda520c44f42e1bf", "filename": "editors/code/package.json", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/795b8153c05109bca309957b5a9f1e10ec7cbbe7/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/795b8153c05109bca309957b5a9f1e10ec7cbbe7/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=795b8153c05109bca309957b5a9f1e10ec7cbbe7", "patch": "@@ -724,6 +724,21 @@\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n+                \"rust-analyzer.joinLines.joinElseIf\": {\n+                    \"markdownDescription\": \"Join lines inserts else between consecutive ifs.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n+                },\n+                \"rust-analyzer.joinLines.removeTrailingComma\": {\n+                    \"markdownDescription\": \"Join lines removes trailing commas.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n+                },\n+                \"rust-analyzer.joinLines.unwrapTrivialBlock\": {\n+                    \"markdownDescription\": \"Join lines unwraps trivial blocks.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n+                },\n                 \"rust-analyzer.lens.debug\": {\n                     \"markdownDescription\": \"Whether to show `Debug` lens. Only applies when\\n`#rust-analyzer.lens.enable#` is set.\",\n                     \"default\": true,"}]}