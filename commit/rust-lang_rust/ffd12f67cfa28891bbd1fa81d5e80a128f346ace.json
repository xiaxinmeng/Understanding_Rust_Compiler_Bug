{"sha": "ffd12f67cfa28891bbd1fa81d5e80a128f346ace", "node_id": "C_kwDOAAsO6NoAKGZmZDEyZjY3Y2ZhMjg4OTFiYmQxZmE4MWQ1ZTgwYTEyOGYzNDZhY2U", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-25T16:45:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-25T16:45:50Z"}, "message": "Auto merge of #2798 - LevitatingLion:master, r=oli-obk\n\nGet Miri working on ARM\n\n- Add a shim for `llvm.arm.hint`, which is required by `core::hint::spin_loop` on `arm` targets. The shim simply calls `yield_active_thread` on a YIELD hint, just like the shim for `llvm.aarch64.isb` that's already present.\n- Change the signature of `miri_host_to_target_path` to use `c_char` instead of `i8`, to make it compatible with `CStr` on targets where `c_char` is unsigned. The implementation of `miri_host_to_target_path` accesses the memory as bytes and does not need to be adjusted.\n- Enable ARM targets in CI. Specifically, `aarch64-unknown-linux-gnu` and `arm-unknown-linux-gnueabi` on the Linux host.\n\nSince all tests also pass for `aarch64-unknown-linux-gnu` I took the liberty of adding that target to CI as well.\n\nFixes #2791", "tree": {"sha": "ba6477a07768056a164047bf011e5e0ade8f7c8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba6477a07768056a164047bf011e5e0ade8f7c8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffd12f67cfa28891bbd1fa81d5e80a128f346ace", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffd12f67cfa28891bbd1fa81d5e80a128f346ace", "html_url": "https://github.com/rust-lang/rust/commit/ffd12f67cfa28891bbd1fa81d5e80a128f346ace", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffd12f67cfa28891bbd1fa81d5e80a128f346ace/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81490e15d4416722cbf127f7e5b8883fc8147446", "url": "https://api.github.com/repos/rust-lang/rust/commits/81490e15d4416722cbf127f7e5b8883fc8147446", "html_url": "https://github.com/rust-lang/rust/commit/81490e15d4416722cbf127f7e5b8883fc8147446"}, {"sha": "9cb27d260447c948ea4e5dd4a499722f07f7a36d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cb27d260447c948ea4e5dd4a499722f07f7a36d", "html_url": "https://github.com/rust-lang/rust/commit/9cb27d260447c948ea4e5dd4a499722f07f7a36d"}], "stats": {"total": 63, "additions": 46, "deletions": 17}, "files": [{"sha": "1086d0481c83556ef8a0af77171fbd19ded2da2d", "filename": "src/tools/miri/README.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ffd12f67cfa28891bbd1fa81d5e80a128f346ace/src%2Ftools%2Fmiri%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/ffd12f67cfa28891bbd1fa81d5e80a128f346ace/src%2Ftools%2Fmiri%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2FREADME.md?ref=ffd12f67cfa28891bbd1fa81d5e80a128f346ace", "patch": "@@ -213,7 +213,9 @@ degree documented below):\n - The best-supported target is `x86_64-unknown-linux-gnu`. Miri releases are\n   blocked on things working with this target. Most other Linux targets should\n   also work well; we do run the test suite on `i686-unknown-linux-gnu` as a\n-  32bit target and `mips64-unknown-linux-gnuabi64` as a big-endian target.\n+  32bit target and `mips64-unknown-linux-gnuabi64` as a big-endian target, as\n+  well as the ARM targets `aarch64-unknown-linux-gnu` and\n+  `arm-unknown-linux-gnueabi`.\n - `x86_64-apple-darwin` should work basically as well as Linux. We also test\n   `aarch64-apple-darwin`. However, we might ship Miri with a nightly even when\n   some features on these targets regress.\n@@ -590,7 +592,7 @@ extern \"Rust\" {\n     /// `out` must point to at least `out_size` many bytes, and the result will be stored there\n     /// with a null terminator.\n     /// Returns 0 if the `out` buffer was large enough, and the required size otherwise.\n-    fn miri_host_to_target_path(path: *const i8, out: *mut i8, out_size: usize) -> usize;\n+    fn miri_host_to_target_path(path: *const std::ffi::c_char, out: *mut std::ffi::c_char, out_size: usize) -> usize;\n }\n ```\n "}, {"sha": "60450d0981545ce731864c6b7455239fe2d452d1", "filename": "src/tools/miri/ci.sh", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffd12f67cfa28891bbd1fa81d5e80a128f346ace/src%2Ftools%2Fmiri%2Fci.sh", "raw_url": "https://github.com/rust-lang/rust/raw/ffd12f67cfa28891bbd1fa81d5e80a128f346ace/src%2Ftools%2Fmiri%2Fci.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fci.sh?ref=ffd12f67cfa28891bbd1fa81d5e80a128f346ace", "patch": "@@ -104,6 +104,7 @@ run_tests\n case $HOST_TARGET in\n   x86_64-unknown-linux-gnu)\n     MIRI_TEST_TARGET=i686-unknown-linux-gnu run_tests\n+    MIRI_TEST_TARGET=aarch64-unknown-linux-gnu run_tests\n     MIRI_TEST_TARGET=aarch64-apple-darwin run_tests\n     MIRI_TEST_TARGET=i686-pc-windows-msvc run_tests\n     MIRI_TEST_TARGET=x86_64-unknown-freebsd run_tests_minimal hello integer vec panic/panic concurrency/simple atomic data_race env/var\n@@ -118,6 +119,7 @@ case $HOST_TARGET in\n     MIRI_TEST_TARGET=x86_64-pc-windows-msvc run_tests\n     ;;\n   i686-pc-windows-msvc)\n+    MIRI_TEST_TARGET=arm-unknown-linux-gnueabi run_tests\n     MIRI_TEST_TARGET=x86_64-unknown-linux-gnu run_tests\n     MIRI_TEST_TARGET=x86_64-pc-windows-gnu run_tests\n     ;;"}, {"sha": "03275ed4ed163cbeb7f9837716a50a0071d6aba1", "filename": "src/tools/miri/src/shims/foreign_items.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ffd12f67cfa28891bbd1fa81d5e80a128f346ace/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffd12f67cfa28891bbd1fa81d5e80a128f346ace/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fforeign_items.rs?ref=ffd12f67cfa28891bbd1fa81d5e80a128f346ace", "patch": "@@ -885,6 +885,19 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                     }\n                 }\n             }\n+            \"llvm.arm.hint\" if this.tcx.sess.target.arch == \"arm\" => {\n+                let [arg] = this.check_shim(abi, Abi::Unadjusted, link_name, args)?;\n+                let arg = this.read_scalar(arg)?.to_i32()?;\n+                match arg {\n+                    // YIELD\n+                    1 => {\n+                        this.yield_active_thread();\n+                    }\n+                    _ => {\n+                        throw_unsup_format!(\"unsupported llvm.arm.hint argument {}\", arg);\n+                    }\n+                }\n+            }\n \n             // Platform-specific shims\n             _ =>"}, {"sha": "048577ef15a611f55fac354d7876fa1c81c94d16", "filename": "src/tools/miri/test-cargo-miri/src/main.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ffd12f67cfa28891bbd1fa81d5e80a128f346ace/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffd12f67cfa28891bbd1fa81d5e80a128f346ace/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Fsrc%2Fmain.rs?ref=ffd12f67cfa28891bbd1fa81d5e80a128f346ace", "patch": "@@ -23,16 +23,16 @@ fn main() {\n     // (We rely on the test runner to always disable isolation when passing no arguments.)\n     if std::env::args().len() <= 1 {\n         fn host_to_target_path(path: String) -> PathBuf {\n-            use std::ffi::{CStr, CString};\n+            use std::ffi::{c_char, CStr, CString};\n \n             let path = CString::new(path).unwrap();\n             let mut out = Vec::with_capacity(1024);\n \n             unsafe {\n                 extern \"Rust\" {\n                     fn miri_host_to_target_path(\n-                        path: *const i8,\n-                        out: *mut i8,\n+                        path: *const c_char,\n+                        out: *mut c_char,\n                         out_size: usize,\n                     ) -> usize;\n                 }"}, {"sha": "52161098788b50b4b41dac12edb9678e820e8e54", "filename": "src/tools/miri/test-cargo-miri/subcrate/main.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ffd12f67cfa28891bbd1fa81d5e80a128f346ace/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Fsubcrate%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffd12f67cfa28891bbd1fa81d5e80a128f346ace/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Fsubcrate%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Fsubcrate%2Fmain.rs?ref=ffd12f67cfa28891bbd1fa81d5e80a128f346ace", "patch": "@@ -5,16 +5,16 @@ fn main() {\n     println!(\"subcrate running\");\n \n     fn host_to_target_path(path: String) -> PathBuf {\n-        use std::ffi::{CStr, CString};\n+        use std::ffi::{c_char, CStr, CString};\n \n         let path = CString::new(path).unwrap();\n         let mut out = Vec::with_capacity(1024);\n \n         unsafe {\n             extern \"Rust\" {\n                 fn miri_host_to_target_path(\n-                    path: *const i8,\n-                    out: *mut i8,\n+                    path: *const c_char,\n+                    out: *mut c_char,\n                     out_size: usize,\n                 ) -> usize;\n             }"}, {"sha": "1681c721dc2e22ae912bb97d860eb288a937b71d", "filename": "src/tools/miri/test-cargo-miri/subcrate/test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ffd12f67cfa28891bbd1fa81d5e80a128f346ace/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Fsubcrate%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffd12f67cfa28891bbd1fa81d5e80a128f346ace/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Fsubcrate%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Fsubcrate%2Ftest.rs?ref=ffd12f67cfa28891bbd1fa81d5e80a128f346ace", "patch": "@@ -8,16 +8,16 @@ fn main() {\n     println!(\"subcrate testing\");\n \n     fn host_to_target_path(path: String) -> PathBuf {\n-        use std::ffi::{CStr, CString};\n+        use std::ffi::{c_char, CStr, CString};\n \n         let path = CString::new(path).unwrap();\n         let mut out = Vec::with_capacity(1024);\n \n         unsafe {\n             extern \"Rust\" {\n                 fn miri_host_to_target_path(\n-                    path: *const i8,\n-                    out: *mut i8,\n+                    path: *const c_char,\n+                    out: *mut c_char,\n                     out_size: usize,\n                 ) -> usize;\n             }"}, {"sha": "cd071a7f32ac1f0a913437f172bd0caf9c4f4fcf", "filename": "src/tools/miri/tests/pass-dep/shims/libc-fs.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ffd12f67cfa28891bbd1fa81d5e80a128f346ace/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Flibc-fs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffd12f67cfa28891bbd1fa81d5e80a128f346ace/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Flibc-fs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Flibc-fs.rs?ref=ffd12f67cfa28891bbd1fa81d5e80a128f346ace", "patch": "@@ -5,7 +5,7 @@\n #![feature(io_error_uncategorized)]\n \n use std::convert::TryInto;\n-use std::ffi::{CStr, CString};\n+use std::ffi::{c_char, CStr, CString};\n use std::fs::{canonicalize, remove_dir_all, remove_file, File};\n use std::io::{Error, ErrorKind, Write};\n use std::os::unix::ffi::OsStrExt;\n@@ -31,7 +31,11 @@ fn tmp() -> PathBuf {\n \n     unsafe {\n         extern \"Rust\" {\n-            fn miri_host_to_target_path(path: *const i8, out: *mut i8, out_size: usize) -> usize;\n+            fn miri_host_to_target_path(\n+                path: *const c_char,\n+                out: *mut c_char,\n+                out_size: usize,\n+            ) -> usize;\n         }\n         let ret = miri_host_to_target_path(path.as_ptr(), out.as_mut_ptr(), out.capacity());\n         assert_eq!(ret, 0);"}, {"sha": "98e1c3a0adb2ecef8e009918c4b5845661632bd9", "filename": "src/tools/miri/tests/pass-dep/shims/libc-misc.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ffd12f67cfa28891bbd1fa81d5e80a128f346ace/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Flibc-misc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffd12f67cfa28891bbd1fa81d5e80a128f346ace/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Flibc-misc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Flibc-misc.rs?ref=ffd12f67cfa28891bbd1fa81d5e80a128f346ace", "patch": "@@ -7,7 +7,7 @@ use std::os::unix::io::AsRawFd;\n use std::path::PathBuf;\n \n fn tmp() -> PathBuf {\n-    use std::ffi::{CStr, CString};\n+    use std::ffi::{c_char, CStr, CString};\n \n     let path = std::env::var(\"MIRI_TEMP\")\n         .unwrap_or_else(|_| std::env::temp_dir().into_os_string().into_string().unwrap());\n@@ -17,7 +17,11 @@ fn tmp() -> PathBuf {\n \n     unsafe {\n         extern \"Rust\" {\n-            fn miri_host_to_target_path(path: *const i8, out: *mut i8, out_size: usize) -> usize;\n+            fn miri_host_to_target_path(\n+                path: *const c_char,\n+                out: *mut c_char,\n+                out_size: usize,\n+            ) -> usize;\n         }\n         let ret = miri_host_to_target_path(path.as_ptr(), out.as_mut_ptr(), out.capacity());\n         assert_eq!(ret, 0);"}, {"sha": "7a9974f393895e44ddcbebbcd79db21014a4ce4f", "filename": "src/tools/miri/tests/pass/shims/fs.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ffd12f67cfa28891bbd1fa81d5e80a128f346ace/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffd12f67cfa28891bbd1fa81d5e80a128f346ace/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fshims%2Ffs.rs?ref=ffd12f67cfa28891bbd1fa81d5e80a128f346ace", "patch": "@@ -6,7 +6,7 @@\n #![feature(is_terminal)]\n \n use std::collections::HashMap;\n-use std::ffi::OsString;\n+use std::ffi::{c_char, OsString};\n use std::fs::{\n     canonicalize, create_dir, read_dir, read_link, remove_dir, remove_dir_all, remove_file, rename,\n     File, OpenOptions,\n@@ -39,7 +39,11 @@ fn host_to_target_path(path: String) -> PathBuf {\n \n     unsafe {\n         extern \"Rust\" {\n-            fn miri_host_to_target_path(path: *const i8, out: *mut i8, out_size: usize) -> usize;\n+            fn miri_host_to_target_path(\n+                path: *const c_char,\n+                out: *mut c_char,\n+                out_size: usize,\n+            ) -> usize;\n         }\n         let ret = miri_host_to_target_path(path.as_ptr(), out.as_mut_ptr(), out.capacity());\n         assert_eq!(ret, 0);"}]}