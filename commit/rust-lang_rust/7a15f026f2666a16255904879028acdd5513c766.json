{"sha": "7a15f026f2666a16255904879028acdd5513c766", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhMTVmMDI2ZjI2NjZhMTYyNTU5MDQ4NzkwMjhhY2RkNTUxM2M3NjY=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2020-11-05T20:38:09Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2020-11-16T19:26:49Z"}, "message": "linux: try to use libc getrandom to allow interposition\n\nWe'll try to use a weak `getrandom` symbol first, because that allows\nthings like `LD_PRELOAD` interposition. For example, perf measurements\nmight want to disable randomness to get reproducible results. If the\nweak symbol is not found, we fall back to a raw `SYS_getrandom` call.", "tree": {"sha": "3b2f577d4bd6fe18ecf89786721a8711cd58ff37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b2f577d4bd6fe18ecf89786721a8711cd58ff37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a15f026f2666a16255904879028acdd5513c766", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a15f026f2666a16255904879028acdd5513c766", "html_url": "https://github.com/rust-lang/rust/commit/7a15f026f2666a16255904879028acdd5513c766", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a15f026f2666a16255904879028acdd5513c766/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5230fbf76bafd86ee4376a0e26e551df8d17fec", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5230fbf76bafd86ee4376a0e26e551df8d17fec", "html_url": "https://github.com/rust-lang/rust/commit/f5230fbf76bafd86ee4376a0e26e551df8d17fec"}], "stats": {"total": 36, "additions": 31, "deletions": 5}, "files": [{"sha": "b563011913cff38fa2a493b450c5f072f7c256bc", "filename": "library/std/src/sys/unix/rand.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7a15f026f2666a16255904879028acdd5513c766/library%2Fstd%2Fsrc%2Fsys%2Funix%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a15f026f2666a16255904879028acdd5513c766/library%2Fstd%2Fsrc%2Fsys%2Funix%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Frand.rs?ref=7a15f026f2666a16255904879028acdd5513c766", "patch": "@@ -25,10 +25,19 @@ mod imp {\n     use crate::io::Read;\n \n     #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n-    fn getrandom(buf: &mut [u8]) -> libc::c_long {\n-        unsafe {\n-            libc::syscall(libc::SYS_getrandom, buf.as_mut_ptr(), buf.len(), libc::GRND_NONBLOCK)\n+    fn getrandom(buf: &mut [u8]) -> libc::ssize_t {\n+        // A weak symbol allows interposition, e.g. for perf measurements that want to\n+        // disable randomness for consistency. Otherwise, we'll try a raw syscall.\n+        // (`getrandom` was added in glibc 2.25, musl 1.1.20, android API level 28)\n+        weak_syscall! {\n+            fn getrandom(\n+                buffer: *mut libc::c_void,\n+                length: libc::size_t,\n+                flags: libc::c_uint\n+            ) -> libc::ssize_t\n         }\n+\n+        unsafe { getrandom(buf.as_mut_ptr().cast(), buf.len(), libc::GRND_NONBLOCK) }\n     }\n \n     #[cfg(not(any(target_os = \"linux\", target_os = \"android\")))]"}, {"sha": "3aa43858b92576894564b579f8a7d94175fd2a77", "filename": "library/std/src/sys/unix/weak.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7a15f026f2666a16255904879028acdd5513c766/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fweak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a15f026f2666a16255904879028acdd5513c766/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fweak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fweak.rs?ref=7a15f026f2666a16255904879028acdd5513c766", "patch": "@@ -66,7 +66,7 @@ unsafe fn fetch(name: &str) -> usize {\n     libc::dlsym(libc::RTLD_DEFAULT, name.as_ptr()) as usize\n }\n \n-#[cfg(not(target_os = \"linux\"))]\n+#[cfg(not(any(target_os = \"linux\", target_os = \"android\")))]\n macro_rules! syscall {\n     (fn $name:ident($($arg_name:ident: $t:ty),*) -> $ret:ty) => (\n         unsafe fn $name($($arg_name: $t),*) -> $ret {\n@@ -84,7 +84,7 @@ macro_rules! syscall {\n     )\n }\n \n-#[cfg(target_os = \"linux\")]\n+#[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n macro_rules! syscall {\n     (fn $name:ident($($arg_name:ident: $t:ty),*) -> $ret:ty) => (\n         unsafe fn $name($($arg_name:$t),*) -> $ret {\n@@ -99,3 +99,20 @@ macro_rules! syscall {\n         }\n     )\n }\n+\n+/// Use a weak symbol from libc when possible, allowing `LD_PRELOAD` interposition,\n+/// but if it's not found just use a raw syscall.\n+#[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n+macro_rules! weak_syscall {\n+    (fn $name:ident($($arg_name:ident: $t:ty),*) -> $ret:ty) => (\n+        unsafe fn $name($($arg_name:$t),*) -> $ret {\n+            weak! { fn $name($($t),*) -> $ret }\n+            if let Some(fun) = $name.get() {\n+                fun($($arg_name),*)\n+            } else {\n+                syscall! { fn $name($($arg_name:$t),*) -> $ret }\n+                $name($($arg_name),*)\n+            }\n+        }\n+    )\n+}"}]}