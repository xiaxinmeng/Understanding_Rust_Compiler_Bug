{"sha": "b21e9d52de543d0beb30a1043aa40a9015453d6f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyMWU5ZDUyZGU1NDNkMGJlYjMwYTEwNDNhYTQwYTkwMTU0NTNkNmY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-11-27T00:12:47Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-11-27T19:08:19Z"}, "message": "core: Add Clone trait", "tree": {"sha": "88d0dd1d147359aa15ec2ff868a685e48d88de0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88d0dd1d147359aa15ec2ff868a685e48d88de0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b21e9d52de543d0beb30a1043aa40a9015453d6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b21e9d52de543d0beb30a1043aa40a9015453d6f", "html_url": "https://github.com/rust-lang/rust/commit/b21e9d52de543d0beb30a1043aa40a9015453d6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b21e9d52de543d0beb30a1043aa40a9015453d6f/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c348e6e3832b1fd8282be696f76ac3c50115162", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c348e6e3832b1fd8282be696f76ac3c50115162", "html_url": "https://github.com/rust-lang/rust/commit/1c348e6e3832b1fd8282be696f76ac3c50115162"}], "stats": {"total": 90, "additions": 64, "deletions": 26}, "files": [{"sha": "8e180ff34140cd7e7afead0cadab6d28b2665e06", "filename": "src/libcore/clone.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b21e9d52de543d0beb30a1043aa40a9015453d6f/src%2Flibcore%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21e9d52de543d0beb30a1043aa40a9015453d6f/src%2Flibcore%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fclone.rs?ref=b21e9d52de543d0beb30a1043aa40a9015453d6f", "patch": "@@ -0,0 +1,10 @@\n+/**\n+Clonable types are copied with the clone method\n+*/\n+pub trait Clone {\n+    fn clone(&self) -> self;\n+}\n+\n+impl (): Clone {\n+    fn clone(&self) -> () { () }\n+}"}, {"sha": "5dbb0fcdb563d3c783a5db15c60df52e592b47c2", "filename": "src/libcore/core.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b21e9d52de543d0beb30a1043aa40a9015453d6f/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/b21e9d52de543d0beb30a1043aa40a9015453d6f/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=b21e9d52de543d0beb30a1043aa40a9015453d6f", "patch": "@@ -156,6 +156,7 @@ pub mod to_str;\n pub mod to_bytes;\n pub mod from_str;\n pub mod util;\n+pub mod clone;\n \n // Data structure modules\n "}, {"sha": "c9157a8d2542fc0c55f6badbc06cf0c656ed990b", "filename": "src/libcore/core.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b21e9d52de543d0beb30a1043aa40a9015453d6f/src%2Flibcore%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21e9d52de543d0beb30a1043aa40a9015453d6f/src%2Flibcore%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rs?ref=b21e9d52de543d0beb30a1043aa40a9015453d6f", "patch": "@@ -48,6 +48,10 @@ pub use coreops::ops::{BitXor};\n #[cfg(test)]\n pub use coreops::ops::{Shl, Shr, Index};\n \n+#[cfg(notest)]\n+pub use clone::Clone;\n+#[cfg(test)]\n+pub use coreops::clone::Clone;\n \n // Export the log levels as global constants. Higher levels mean\n // more-verbosity. Error is the bottom level, default logging level is"}, {"sha": "bf64065626709527c8bd172fb8ce3477654817d8", "filename": "src/libcore/private.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b21e9d52de543d0beb30a1043aa40a9015453d6f/src%2Flibcore%2Fprivate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21e9d52de543d0beb30a1043aa40a9015453d6f/src%2Flibcore%2Fprivate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprivate.rs?ref=b21e9d52de543d0beb30a1043aa40a9015453d6f", "patch": "@@ -509,12 +509,14 @@ pub fn exclusive<T:Send >(user_data: T) -> Exclusive<T> {\n     Exclusive { x: unsafe { shared_mutable_state(move data) } }\n }\n \n-impl<T: Send> Exclusive<T> {\n+impl<T: Send> Exclusive<T>: Clone {\n     // Duplicate an exclusive ARC, as std::arc::clone.\n-    fn clone() -> Exclusive<T> {\n+    fn clone(&self) -> Exclusive<T> {\n         Exclusive { x: unsafe { clone_shared_mutable_state(&self.x) } }\n     }\n+}\n \n+impl<T: Send> Exclusive<T> {\n     // Exactly like std::arc::mutex_arc,access(), but with the little_lock\n     // instead of a proper mutex. Same reason for being unsafe.\n     //"}, {"sha": "628d72f99c1e32c5ab6af1ecd84ed6c4263ce902", "filename": "src/libstd/arc.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b21e9d52de543d0beb30a1043aa40a9015453d6f/src%2Flibstd%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21e9d52de543d0beb30a1043aa40a9015453d6f/src%2Flibstd%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farc.rs?ref=b21e9d52de543d0beb30a1043aa40a9015453d6f", "patch": "@@ -103,6 +103,12 @@ fn unwrap<T: Const Send>(rc: ARC<T>) -> T {\n     unsafe { unwrap_shared_mutable_state(move x) }\n }\n \n+impl<T: Const Send> ARC<T>: Clone {\n+    fn clone(&self) -> ARC<T> {\n+        clone(self)\n+    }\n+}\n+\n /****************************************************************************\n  * Mutex protected ARC (unsafe)\n  ****************************************************************************/\n@@ -128,13 +134,16 @@ pub fn mutex_arc_with_condvars<T: Send>(user_data: T,\n     MutexARC { x: unsafe { shared_mutable_state(move data) } }\n }\n \n-impl<T: Send> &MutexARC<T> {\n+impl<T: Send> MutexARC<T>: Clone {\n     /// Duplicate a mutex-protected ARC, as arc::clone.\n-    fn clone() -> MutexARC<T> {\n+    fn clone(&self) -> MutexARC<T> {\n         // NB: Cloning the underlying mutex is not necessary. Its reference\n         // count would be exactly the same as the shared state's.\n         MutexARC { x: unsafe { clone_shared_mutable_state(&self.x) } }\n     }\n+}\n+\n+impl<T: Send> &MutexARC<T> {\n \n     /**\n      * Access the underlying mutable data with mutual exclusion from other\n@@ -265,13 +274,16 @@ pub fn rw_arc_with_condvars<T: Const Send>(user_data: T,\n     RWARC { x: unsafe { shared_mutable_state(move data) }, cant_nest: () }\n }\n \n-impl<T: Const Send> &RWARC<T> {\n+impl<T: Const Send> RWARC<T> {\n     /// Duplicate a rwlock-protected ARC, as arc::clone.\n-    fn clone() -> RWARC<T> {\n+    fn clone(&self) -> RWARC<T> {\n         RWARC { x: unsafe { clone_shared_mutable_state(&self.x) },\n                 cant_nest: () }\n     }\n \n+}\n+\n+impl<T: Const Send> &RWARC<T> {\n     /**\n      * Access the underlying data mutably. Locks the rwlock in write mode;\n      * other readers and writers will block."}, {"sha": "3c1fc9ee6cea497cf0839bfba716317c990a1837", "filename": "src/libstd/bitv.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b21e9d52de543d0beb30a1043aa40a9015453d6f/src%2Flibstd%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21e9d52de543d0beb30a1043aa40a9015453d6f/src%2Flibstd%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitv.rs?ref=b21e9d52de543d0beb30a1043aa40a9015453d6f", "patch": "@@ -290,22 +290,6 @@ impl Bitv {\n     #[inline(always)]\n     fn assign(v: &Bitv) -> bool { self.do_op(Assign, v) }\n \n-    /// Makes a copy of a bitvector\n-    #[inline(always)]\n-    fn clone() -> ~Bitv {\n-        ~match self.rep {\n-          Small(ref b) => {\n-            Bitv{nbits: self.nbits, rep: Small(~SmallBitv{bits: b.bits})}\n-          }\n-          Big(ref b) => {\n-            let st = to_mut(from_elem(self.nbits / uint_bits + 1, 0));\n-            let len = st.len();\n-            for uint::range(0, len) |i| { st[i] = b.storage[i]; };\n-            Bitv{nbits: self.nbits, rep: Big(~BigBitv{storage: move st})}\n-          }\n-        }\n-    }\n-\n     /// Retrieve the value at index `i`\n     #[inline(always)]\n     pure fn get(i: uint) -> bool {\n@@ -512,6 +496,25 @@ impl Bitv {\n \n }\n \n+impl Bitv: Clone {\n+    /// Makes a copy of a bitvector\n+    #[inline(always)]\n+    fn clone(&self) -> Bitv {\n+        match self.rep {\n+          Small(ref b) => {\n+            Bitv{nbits: self.nbits, rep: Small(~SmallBitv{bits: b.bits})}\n+          }\n+          Big(ref b) => {\n+            let st = to_mut(from_elem(self.nbits / uint_bits + 1, 0));\n+            let len = st.len();\n+            for uint::range(0, len) |i| { st[i] = b.storage[i]; };\n+            Bitv{nbits: self.nbits, rep: Big(~BigBitv{storage: move st})}\n+          }\n+        }\n+    }\n+\n+}\n+\n /**\n  * Transform a byte-vector into a bitv. Each byte becomes 8 bits,\n  * with the most significant bits of each byte coming first. Each"}, {"sha": "c288e4dc4d37d8b0b6bc1ac0b05e38a2c792d8cf", "filename": "src/libstd/sync.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b21e9d52de543d0beb30a1043aa40a9015453d6f/src%2Flibstd%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21e9d52de543d0beb30a1043aa40a9015453d6f/src%2Flibstd%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync.rs?ref=b21e9d52de543d0beb30a1043aa40a9015453d6f", "patch": "@@ -358,10 +358,14 @@ fn semaphore(count: int) -> Semaphore {\n     Semaphore { sem: new_sem(count, ()) }\n }\n \n-impl &Semaphore {\n+impl Semaphore: Clone {\n     /// Create a new handle to the semaphore.\n-    fn clone() -> Semaphore { Semaphore { sem: Sem((*self.sem).clone()) } }\n+    fn clone(&self) -> Semaphore {\n+        Semaphore { sem: Sem((*self.sem).clone()) }\n+    }\n+}\n \n+impl &Semaphore {\n     /**\n      * Acquire a resource represented by the semaphore. Blocks if necessary\n      * until resource(s) become available.\n@@ -404,10 +408,12 @@ pub fn mutex_with_condvars(num_condvars: uint) -> Mutex {\n     Mutex { sem: new_sem_and_signal(1, num_condvars) }\n }\n \n-impl &Mutex {\n+impl Mutex: Clone {\n     /// Create a new handle to the mutex.\n-    fn clone() -> Mutex { Mutex { sem: Sem((*self.sem).clone()) } }\n+    fn clone(&self) -> Mutex { Mutex { sem: Sem((*self.sem).clone()) } }\n+}\n \n+impl &Mutex {\n     /// Run a function with ownership of the mutex.\n     fn lock<U>(blk: fn() -> U) -> U { (&self.sem).access(blk) }\n "}]}