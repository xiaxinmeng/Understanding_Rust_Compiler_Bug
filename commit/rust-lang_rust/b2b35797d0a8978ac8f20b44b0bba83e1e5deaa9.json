{"sha": "b2b35797d0a8978ac8f20b44b0bba83e1e5deaa9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyYjM1Nzk3ZDBhODk3OGFjOGYyMGI0NGIwYmJhODNlMWU1ZGVhYTk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-23T20:19:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-23T20:19:22Z"}, "message": "Rollup merge of #65696 - varkor:nll-chalk-const-generics-issue, r=eddyb\n\nFix an issue with const inference variables sticking around under Chalk + NLL\n\nFixes https://github.com/rust-lang/rust/issues/65675.\nFixes https://github.com/rust-lang/rust/issues/62579.\n\nr? @eddyb\ncc @LukasKalbertodt @skinny121", "tree": {"sha": "a2a4b8b58f048bd2db034cfa3c6e514777934707", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2a4b8b58f048bd2db034cfa3c6e514777934707"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2b35797d0a8978ac8f20b44b0bba83e1e5deaa9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdsLXKCRBK7hj4Ov3rIwAAdHIIAKj/NaRWhnr2wk13fq/vD7KF\nQwFAxEktE0hq5QImi/ltNbK0N1HX4aW+aaCEVxIF5rTj5s95cRJLckFwxRalejB1\nDc3AGwMC1VKiiXy6TZYdNuB5YyFQp1rodZxqYv+B9ckmGVq2ZwpnQeKh7TZYv8Ii\ntgxn8VjuXLUtGEEEH+9qdjdlE1uowCQRJIcS9I8IgqwCxy7Y3wlaZBcoE7mNIpoU\nEzmlhcboZMBb0U7IbhE+O3iMvcj54E+64UoxdBpAhGSsDVlKoz4DRl0yfNR0N9F2\nJXC912Mtm2PnuS0z5v8WdOpV1QYSuySjTVnx5gtp3buEUsdN6UhcJ/w8IoRDjq8=\n=Q1Oz\n-----END PGP SIGNATURE-----\n", "payload": "tree a2a4b8b58f048bd2db034cfa3c6e514777934707\nparent ba9a9ebb2593c0b762995342cf200563f056f837\nparent 624e34a5d02d47b807bad3a81aa7ce0c088d2452\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1571861962 +0200\ncommitter GitHub <noreply@github.com> 1571861962 +0200\n\nRollup merge of #65696 - varkor:nll-chalk-const-generics-issue, r=eddyb\n\nFix an issue with const inference variables sticking around under Chalk + NLL\n\nFixes https://github.com/rust-lang/rust/issues/65675.\nFixes https://github.com/rust-lang/rust/issues/62579.\n\nr? @eddyb\ncc @LukasKalbertodt @skinny121\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2b35797d0a8978ac8f20b44b0bba83e1e5deaa9", "html_url": "https://github.com/rust-lang/rust/commit/b2b35797d0a8978ac8f20b44b0bba83e1e5deaa9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2b35797d0a8978ac8f20b44b0bba83e1e5deaa9/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba9a9ebb2593c0b762995342cf200563f056f837", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba9a9ebb2593c0b762995342cf200563f056f837", "html_url": "https://github.com/rust-lang/rust/commit/ba9a9ebb2593c0b762995342cf200563f056f837"}, {"sha": "624e34a5d02d47b807bad3a81aa7ce0c088d2452", "url": "https://api.github.com/repos/rust-lang/rust/commits/624e34a5d02d47b807bad3a81aa7ce0c088d2452", "html_url": "https://github.com/rust-lang/rust/commit/624e34a5d02d47b807bad3a81aa7ce0c088d2452"}], "stats": {"total": 128, "additions": 98, "deletions": 30}, "files": [{"sha": "51ae4e49493f7c17565b5224cc218f7f7086f487", "filename": "src/librustc/infer/combine.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b2b35797d0a8978ac8f20b44b0bba83e1e5deaa9/src%2Flibrustc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b35797d0a8978ac8f20b44b0bba83e1e5deaa9/src%2Flibrustc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcombine.rs?ref=b2b35797d0a8978ac8f20b44b0bba83e1e5deaa9", "patch": "@@ -494,7 +494,7 @@ impl TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n                 if sub_vid == self.for_vid_sub_root {\n                     // If sub-roots are equal, then `for_vid` and\n                     // `vid` are related via subtyping.\n-                    return Err(TypeError::CyclicTy(self.root_ty));\n+                    Err(TypeError::CyclicTy(self.root_ty))\n                 } else {\n                     match variables.probe(vid) {\n                         TypeVariableValue::Known { value: u } => {\n@@ -527,7 +527,7 @@ impl TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n                             let u = self.tcx().mk_ty_var(new_var_id);\n                             debug!(\"generalize: replacing original vid={:?} with new={:?}\",\n                                    vid, u);\n-                            return Ok(u);\n+                            Ok(u)\n                         }\n                     }\n                 }\n@@ -602,19 +602,26 @@ impl TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n     ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {\n         assert_eq!(c, c2); // we are abusing TypeRelation here; both LHS and RHS ought to be ==\n \n-        match c {\n-            ty::Const { val: ConstValue::Infer(InferConst::Var(vid)), .. } => {\n+        match c.val {\n+            ConstValue::Infer(InferConst::Var(vid)) => {\n                 let mut variable_table = self.infcx.const_unification_table.borrow_mut();\n-                match variable_table.probe_value(*vid).val.known() {\n-                    Some(u) => {\n-                        self.relate(&u, &u)\n+                let var_value = variable_table.probe_value(vid);\n+                match var_value.val {\n+                    ConstVariableValue::Known { value: u } => self.relate(&u, &u),\n+                    ConstVariableValue::Unknown { universe } => {\n+                        if self.for_universe.can_name(universe) {\n+                            Ok(c)\n+                        } else {\n+                            let new_var_id = variable_table.new_key(ConstVarValue {\n+                                origin: var_value.origin,\n+                                val: ConstVariableValue::Unknown { universe: self.for_universe },\n+                            });\n+                            Ok(self.tcx().mk_const_var(new_var_id, c.ty))\n+                        }\n                     }\n-                    None => Ok(c),\n                 }\n             }\n-            _ => {\n-                relate::super_relate_consts(self, c, c)\n-            }\n+            _ => relate::super_relate_consts(self, c, c),\n         }\n     }\n }"}, {"sha": "d6f76e9ee346c6f669308872cfae6a54f59e13f2", "filename": "src/librustc/infer/nll_relate/mod.rs", "status": "modified", "additions": 39, "deletions": 19, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/b2b35797d0a8978ac8f20b44b0bba83e1e5deaa9/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b35797d0a8978ac8f20b44b0bba83e1e5deaa9/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs?ref=b2b35797d0a8978ac8f20b44b0bba83e1e5deaa9", "patch": "@@ -27,7 +27,8 @@ use crate::ty::error::TypeError;\n use crate::ty::fold::{TypeFoldable, TypeVisitor};\n use crate::ty::relate::{self, Relate, RelateResult, TypeRelation};\n use crate::ty::subst::GenericArg;\n-use crate::ty::{self, Ty, TyCtxt};\n+use crate::ty::{self, Ty, TyCtxt, InferConst};\n+use crate::infer::{ConstVariableValue, ConstVarValue};\n use crate::mir::interpret::ConstValue;\n use rustc_data_structures::fx::FxHashMap;\n use std::fmt::Debug;\n@@ -324,7 +325,7 @@ where\n         let vid = pair.vid();\n         let value_ty = pair.value_ty();\n \n-        // FIXME -- this logic assumes invariance, but that is wrong.\n+        // FIXME(invariance) -- this logic assumes invariance, but that is wrong.\n         // This only presently applies to chalk integration, as NLL\n         // doesn't permit type variables to appear on both sides (and\n         // doesn't use lazy norm).\n@@ -616,15 +617,21 @@ where\n     fn consts(\n         &mut self,\n         a: &'tcx ty::Const<'tcx>,\n-        b: &'tcx ty::Const<'tcx>,\n+        mut b: &'tcx ty::Const<'tcx>,\n     ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {\n-        if let ty::Const { val: ConstValue::Bound(..), .. } = a {\n-            // FIXME(const_generics): I'm unsure how this branch should actually be handled,\n-            // so this is probably not correct.\n-            self.infcx.super_combine_consts(self, a, b)\n-        } else {\n-            debug!(\"consts(a={:?}, b={:?}, variance={:?})\", a, b, self.ambient_variance);\n-            relate::super_relate_consts(self, a, b)\n+        let a = self.infcx.shallow_resolve(a);\n+\n+        if !D::forbid_inference_vars() {\n+            b = self.infcx.shallow_resolve(b);\n+        }\n+\n+        match b.val {\n+            ConstValue::Infer(InferConst::Var(_)) if D::forbid_inference_vars() => {\n+                // Forbid inference variables in the RHS.\n+                bug!(\"unexpected inference var {:?}\", b)\n+            }\n+            // FIXME(invariance): see the related FIXME above.\n+            _ => self.infcx.super_combine_consts(self, a, b)\n         }\n     }\n \n@@ -991,15 +998,28 @@ where\n         a: &'tcx ty::Const<'tcx>,\n         _: &'tcx ty::Const<'tcx>,\n     ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {\n-        debug!(\"TypeGeneralizer::consts(a={:?})\", a);\n-\n-        if let ty::Const { val: ConstValue::Bound(..), .. } = a {\n-            bug!(\n-                \"unexpected inference variable encountered in NLL generalization: {:?}\",\n-                a\n-            );\n-        } else {\n-            relate::super_relate_consts(self, a, a)\n+        match a.val {\n+            ConstValue::Infer(InferConst::Var(_)) if D::forbid_inference_vars() => {\n+                bug!(\n+                    \"unexpected inference variable encountered in NLL generalization: {:?}\",\n+                    a\n+                );\n+            }\n+            ConstValue::Infer(InferConst::Var(vid)) => {\n+                let mut variable_table = self.infcx.const_unification_table.borrow_mut();\n+                let var_value = variable_table.probe_value(vid);\n+                match var_value.val.known() {\n+                    Some(u) => self.relate(&u, &u),\n+                    None => {\n+                        let new_var_id = variable_table.new_key(ConstVarValue {\n+                            origin: var_value.origin,\n+                            val: ConstVariableValue::Unknown { universe: self.universe },\n+                        });\n+                        Ok(self.tcx().mk_const_var(new_var_id, a.ty))\n+                    }\n+                }\n+            }\n+            _ => relate::super_relate_consts(self, a, a),\n         }\n     }\n "}, {"sha": "0ff7ddc41fe4c1c724e1e1b792ce908a55be583d", "filename": "src/test/ui/const-generics/issues/issue-62579-no-match.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b2b35797d0a8978ac8f20b44b0bba83e1e5deaa9/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62579-no-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b35797d0a8978ac8f20b44b0bba83e1e5deaa9/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62579-no-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62579-no-match.rs?ref=b2b35797d0a8978ac8f20b44b0bba83e1e5deaa9", "patch": "@@ -0,0 +1,15 @@\n+// run-pass\n+\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+#[derive(PartialEq, Eq)]\n+struct NoMatch;\n+\n+fn foo<const T: NoMatch>() -> bool {\n+    true\n+}\n+\n+fn main() {\n+    foo::<{NoMatch}>();\n+}"}, {"sha": "759d5fdeb4c16e5c2d2b60cecf30f74dddbdd1e6", "filename": "src/test/ui/const-generics/issues/issue-62579-no-match.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b2b35797d0a8978ac8f20b44b0bba83e1e5deaa9/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62579-no-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2b35797d0a8978ac8f20b44b0bba83e1e5deaa9/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62579-no-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62579-no-match.stderr?ref=b2b35797d0a8978ac8f20b44b0bba83e1e5deaa9", "patch": "@@ -0,0 +1,8 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/issue-62579-no-match.rs:3:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+"}, {"sha": "3ca527313f93f9f38c3acb8a1201e83e504f1314", "filename": "src/test/ui/const-generics/issues/issue-65675.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b2b35797d0a8978ac8f20b44b0bba83e1e5deaa9/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-65675.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b35797d0a8978ac8f20b44b0bba83e1e5deaa9/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-65675.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-65675.rs?ref=b2b35797d0a8978ac8f20b44b0bba83e1e5deaa9", "patch": "@@ -0,0 +1,10 @@\n+// run-pass\n+// compile-flags: -Z chalk\n+\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+pub struct Foo<T, const N: usize>([T; N]);\n+impl<T, const N: usize> Foo<T, {N}> {}\n+\n+fn main() {}"}, {"sha": "60b388e62783e9da22f85f155b03fb2db61a09b7", "filename": "src/test/ui/const-generics/issues/issue-65675.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b2b35797d0a8978ac8f20b44b0bba83e1e5deaa9/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-65675.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2b35797d0a8978ac8f20b44b0bba83e1e5deaa9/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-65675.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-65675.stderr?ref=b2b35797d0a8978ac8f20b44b0bba83e1e5deaa9", "patch": "@@ -0,0 +1,8 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/issue-65675.rs:4:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+"}]}