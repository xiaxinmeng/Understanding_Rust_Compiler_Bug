{"sha": "9c39b6c564745d4e316c16b6b8bf04675520253b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljMzliNmM1NjQ3NDVkNGUzMTZjMTZiNmI4YmYwNDY3NTUyMDI1M2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-20T23:15:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-20T23:15:48Z"}, "message": "auto merge of #17218 : iliekturtles/rust/2789-invalid-doc-comment, r=huonw\n\nDisplay an explicit message about items missing after sugared doc\r\ncomment attributes. References #2789.\r\n\r\n * I tried looking through `parser.rs` for an appropriate location for `expected_item_err` and ended up putting it just above the first use. Is there a better location?\r\n * Did I add enough test cases? Too many? Should I add more cases for the original error message?", "tree": {"sha": "b671da4c0a1310f381f8d796fe56fa1dae1cc5f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b671da4c0a1310f381f8d796fe56fa1dae1cc5f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c39b6c564745d4e316c16b6b8bf04675520253b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c39b6c564745d4e316c16b6b8bf04675520253b", "html_url": "https://github.com/rust-lang/rust/commit/9c39b6c564745d4e316c16b6b8bf04675520253b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c39b6c564745d4e316c16b6b8bf04675520253b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9100a8fe46a7b8c873926f9cad08a16af9490be0", "url": "https://api.github.com/repos/rust-lang/rust/commits/9100a8fe46a7b8c873926f9cad08a16af9490be0", "html_url": "https://github.com/rust-lang/rust/commit/9100a8fe46a7b8c873926f9cad08a16af9490be0"}, {"sha": "4a767007be4476c03bc409097a433c63c4243be8", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a767007be4476c03bc409097a433c63c4243be8", "html_url": "https://github.com/rust-lang/rust/commit/4a767007be4476c03bc409097a433c63c4243be8"}], "stats": {"total": 131, "additions": 120, "deletions": 11}, "files": [{"sha": "a5aa249738d8ce5148880bebec0de8993468fa7f", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/9c39b6c564745d4e316c16b6b8bf04675520253b/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c39b6c564745d4e316c16b6b8bf04675520253b/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=9c39b6c564745d4e316c16b6b8bf04675520253b", "patch": "@@ -3480,22 +3480,32 @@ impl<'a> Parser<'a> {\n         })\n     }\n \n+    /// Get an expected item after attributes error message.\n+    fn expected_item_err(attrs: &[Attribute]) -> &'static str {\n+        match attrs.last() {\n+            Some(&Attribute { node: ast::Attribute_ { is_sugared_doc: true, .. }, .. }) => {\n+                \"expected item after doc comment\"\n+            }\n+            _ => \"expected item after attributes\",\n+        }\n+    }\n+\n     /// Parse a statement. may include decl.\n     /// Precondition: any attributes are parsed already\n     pub fn parse_stmt(&mut self, item_attrs: Vec<Attribute>) -> P<Stmt> {\n         maybe_whole!(self, NtStmt);\n \n-        fn check_expected_item(p: &mut Parser, found_attrs: bool) {\n+        fn check_expected_item(p: &mut Parser, attrs: &[Attribute]) {\n             // If we have attributes then we should have an item\n-            if found_attrs {\n+            if !attrs.is_empty() {\n                 let last_span = p.last_span;\n-                p.span_err(last_span, \"expected item after attributes\");\n+                p.span_err(last_span, Parser::expected_item_err(attrs));\n             }\n         }\n \n         let lo = self.span.lo;\n         if self.is_keyword(keywords::Let) {\n-            check_expected_item(self, !item_attrs.is_empty());\n+            check_expected_item(self, item_attrs.as_slice());\n             self.expect_keyword(keywords::Let);\n             let decl = self.parse_let();\n             P(spanned(lo, decl.span.hi, StmtDecl(decl, ast::DUMMY_NODE_ID)))\n@@ -3504,7 +3514,7 @@ impl<'a> Parser<'a> {\n             && self.look_ahead(1, |t| *t == token::NOT) {\n             // it's a macro invocation:\n \n-            check_expected_item(self, !item_attrs.is_empty());\n+            check_expected_item(self, item_attrs.as_slice());\n \n             // Potential trouble: if we allow macros with paths instead of\n             // idents, we'd need to look ahead past the whole path here...\n@@ -3561,6 +3571,7 @@ impl<'a> Parser<'a> {\n \n         } else {\n             let found_attrs = !item_attrs.is_empty();\n+            let item_err = Parser::expected_item_err(item_attrs.as_slice());\n             match self.parse_item_or_view_item(item_attrs, false) {\n                 IoviItem(i) => {\n                     let hi = i.span.hi;\n@@ -3575,7 +3586,10 @@ impl<'a> Parser<'a> {\n                     self.fatal(\"foreign items are not allowed here\");\n                 }\n                 IoviNone(_) => {\n-                    check_expected_item(self, found_attrs);\n+                    if found_attrs {\n+                        let last_span = self.last_span;\n+                        self.span_err(last_span, item_err);\n+                    }\n \n                     // Remainder are line-expr stmts.\n                     let e = self.parse_expr_res(RestrictionStmtExpr);\n@@ -3653,7 +3667,8 @@ impl<'a> Parser<'a> {\n                 token::SEMI => {\n                     if !attributes_box.is_empty() {\n                         let last_span = self.last_span;\n-                        self.span_err(last_span, \"expected item after attributes\");\n+                        self.span_err(last_span,\n+                                      Parser::expected_item_err(attributes_box.as_slice()));\n                         attributes_box = Vec::new();\n                     }\n                     self.bump(); // empty\n@@ -3739,7 +3754,8 @@ impl<'a> Parser<'a> {\n \n         if !attributes_box.is_empty() {\n             let last_span = self.last_span;\n-            self.span_err(last_span, \"expected item after attributes\");\n+            self.span_err(last_span,\n+                          Parser::expected_item_err(attributes_box.as_slice()));\n         }\n \n         let hi = self.span.hi;\n@@ -4685,7 +4701,8 @@ impl<'a> Parser<'a> {\n         if first && attrs_remaining_len > 0u {\n             // We parsed attributes for the first item but didn't find it\n             let last_span = self.last_span;\n-            self.span_err(last_span, \"expected item after attributes\");\n+            self.span_err(last_span,\n+                          Parser::expected_item_err(attrs_remaining.as_slice()));\n         }\n \n         ast::Mod {\n@@ -4919,10 +4936,10 @@ impl<'a> Parser<'a> {\n             items: _,\n             foreign_items: foreign_items\n         } = self.parse_foreign_items(first_item_attrs, true);\n-        if ! attrs_remaining.is_empty() {\n+        if !attrs_remaining.is_empty() {\n             let last_span = self.last_span;\n             self.span_err(last_span,\n-                          \"expected item after attributes\");\n+                          Parser::expected_item_err(attrs_remaining.as_slice()));\n         }\n         assert!(self.token == token::RBRACE);\n         ast::ForeignMod {"}, {"sha": "7e8f41ba217d8205585ccdedbd1bc74e5256dfa9", "filename": "src/test/compile-fail/attr-before-eof.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9c39b6c564745d4e316c16b6b8bf04675520253b/src%2Ftest%2Fcompile-fail%2Fattr-before-eof.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c39b6c564745d4e316c16b6b8bf04675520253b/src%2Ftest%2Fcompile-fail%2Fattr-before-eof.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fattr-before-eof.rs?ref=9c39b6c564745d4e316c16b6b8bf04675520253b", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[deriving(Show)] //~ERROR expected item after attributes"}, {"sha": "adc060f513f9084e4dace5a8f89914fa6266ef6c", "filename": "src/test/compile-fail/doc-before-attr.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9c39b6c564745d4e316c16b6b8bf04675520253b/src%2Ftest%2Fcompile-fail%2Fdoc-before-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c39b6c564745d4e316c16b6b8bf04675520253b/src%2Ftest%2Fcompile-fail%2Fdoc-before-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdoc-before-attr.rs?ref=9c39b6c564745d4e316c16b6b8bf04675520253b", "patch": "@@ -0,0 +1,12 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+/// hi\n+#[deriving(Show)] //~ERROR expected item after attributes"}, {"sha": "e6dd4102462d5815e358320c4a0fafddfbd64d9d", "filename": "src/test/compile-fail/doc-before-eof.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9c39b6c564745d4e316c16b6b8bf04675520253b/src%2Ftest%2Fcompile-fail%2Fdoc-before-eof.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c39b6c564745d4e316c16b6b8bf04675520253b/src%2Ftest%2Fcompile-fail%2Fdoc-before-eof.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdoc-before-eof.rs?ref=9c39b6c564745d4e316c16b6b8bf04675520253b", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+/// hi //~ERROR expected item after doc comment"}, {"sha": "5afd1b2c6b8b977a49261135f5cafe38ee9f4e5d", "filename": "src/test/compile-fail/doc-before-extern-rbrace.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9c39b6c564745d4e316c16b6b8bf04675520253b/src%2Ftest%2Fcompile-fail%2Fdoc-before-extern-rbrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c39b6c564745d4e316c16b6b8bf04675520253b/src%2Ftest%2Fcompile-fail%2Fdoc-before-extern-rbrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdoc-before-extern-rbrace.rs?ref=9c39b6c564745d4e316c16b6b8bf04675520253b", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern {\n+    /// hi\n+}\n+//~^^ ERROR expected item after doc comment"}, {"sha": "8dc6c546500677fff964107e8dfe4aeafe6842a0", "filename": "src/test/compile-fail/doc-before-macro.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9c39b6c564745d4e316c16b6b8bf04675520253b/src%2Ftest%2Fcompile-fail%2Fdoc-before-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c39b6c564745d4e316c16b6b8bf04675520253b/src%2Ftest%2Fcompile-fail%2Fdoc-before-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdoc-before-macro.rs?ref=9c39b6c564745d4e316c16b6b8bf04675520253b", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    /// hi\n+    println!(\"hi\");\n+    //~^^ ERROR expected item after doc comment\n+}"}, {"sha": "6d05064277d4411dbed870b2188371530a769c14", "filename": "src/test/compile-fail/doc-before-rbrace.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9c39b6c564745d4e316c16b6b8bf04675520253b/src%2Ftest%2Fcompile-fail%2Fdoc-before-rbrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c39b6c564745d4e316c16b6b8bf04675520253b/src%2Ftest%2Fcompile-fail%2Fdoc-before-rbrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdoc-before-rbrace.rs?ref=9c39b6c564745d4e316c16b6b8bf04675520253b", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    println!(\"Hi\"); /// hi\n+    //~^ ERROR expected item after doc comment\n+}"}, {"sha": "8b0300edce0e8aaaf124b9e22a6c407bd7e69d22", "filename": "src/test/compile-fail/doc-before-semi.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9c39b6c564745d4e316c16b6b8bf04675520253b/src%2Ftest%2Fcompile-fail%2Fdoc-before-semi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c39b6c564745d4e316c16b6b8bf04675520253b/src%2Ftest%2Fcompile-fail%2Fdoc-before-semi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdoc-before-semi.rs?ref=9c39b6c564745d4e316c16b6b8bf04675520253b", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    /// hi\n+    ;\n+    //~^^ ERROR expected item after doc comment\n+}"}]}