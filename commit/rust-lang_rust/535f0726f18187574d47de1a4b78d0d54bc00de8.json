{"sha": "535f0726f18187574d47de1a4b78d0d54bc00de8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzNWYwNzI2ZjE4MTg3NTc0ZDQ3ZGUxYTRiNzhkMGQ1NGJjMDBkZTg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-08-31T16:15:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-31T16:15:44Z"}, "message": "Merge #10101\n\n10101: internal: reduce coupling r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "7d19808b7df75749f445a73e40cf07cbc40996a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d19808b7df75749f445a73e40cf07cbc40996a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/535f0726f18187574d47de1a4b78d0d54bc00de8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhLlWwCRBK7hj4Ov3rIwAAitwIACADM0iNi77o66kdQdJQMFxI\nP182Rc8hCSwtjp9fC0aqTbIMIhKIVYdTBjNIYe4Kj2c4PhLBLrHsyjJFO1/a64bM\nkhO5ImboEgDvLLRJZjb+u+M9KRGYBOeM1OY2mxdE6gMTkUA40cGBXDW5j+M9wDxp\nVMbwyPOlEnJ2YAotZ1I0yscp/5a2RWC6bO09B6eotgLpDM7IfVl79qRdDSFHNiev\nwCHOtW5z8SjUte+nClu1XyfLhiwoXpl8sRpxYtFLyJWIwcl+aGiwDCu9mMcCqcw4\nZWKyVVDJPZ+sMRH/zECW6TmzK14ikZ3Davt4jGoPZRe7s1SJ0hdQoxViYBTKk1k=\n=jl3P\n-----END PGP SIGNATURE-----\n", "payload": "tree 7d19808b7df75749f445a73e40cf07cbc40996a0\nparent e8f0f234c32ec06bc2eae76decee31c4126e39ff\nparent 81602f8a5df0e4be7e912479fdc3506c5e4d5ce5\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1630426544 +0000\ncommitter GitHub <noreply@github.com> 1630426544 +0000\n\nMerge #10101\n\n10101: internal: reduce coupling r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/535f0726f18187574d47de1a4b78d0d54bc00de8", "html_url": "https://github.com/rust-lang/rust/commit/535f0726f18187574d47de1a4b78d0d54bc00de8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/535f0726f18187574d47de1a4b78d0d54bc00de8/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8f0f234c32ec06bc2eae76decee31c4126e39ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8f0f234c32ec06bc2eae76decee31c4126e39ff", "html_url": "https://github.com/rust-lang/rust/commit/e8f0f234c32ec06bc2eae76decee31c4126e39ff"}, {"sha": "81602f8a5df0e4be7e912479fdc3506c5e4d5ce5", "url": "https://api.github.com/repos/rust-lang/rust/commits/81602f8a5df0e4be7e912479fdc3506c5e4d5ce5", "html_url": "https://github.com/rust-lang/rust/commit/81602f8a5df0e4be7e912479fdc3506c5e4d5ce5"}], "stats": {"total": 57, "additions": 25, "deletions": 32}, "files": [{"sha": "c3730d0bbd968ae4f9d022ec27d2e8470b90d862", "filename": "crates/base_db/src/input.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/535f0726f18187574d47de1a4b78d0d54bc00de8/crates%2Fbase_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/535f0726f18187574d47de1a4b78d0d54bc00de8/crates%2Fbase_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Finput.rs?ref=535f0726f18187574d47de1a4b78d0d54bc00de8", "patch": "@@ -11,7 +11,7 @@ use std::{fmt, iter::FromIterator, ops, panic::RefUnwindSafe, str::FromStr, sync\n use cfg::CfgOptions;\n use rustc_hash::{FxHashMap, FxHashSet};\n use syntax::SmolStr;\n-use tt::{ExpansionError, Subtree};\n+use tt::Subtree;\n use vfs::{file_set::FileSet, FileId, VfsPath};\n \n /// Files are grouped into source roots. A source root is a directory on the\n@@ -163,7 +163,13 @@ pub trait ProcMacroExpander: fmt::Debug + Send + Sync + RefUnwindSafe {\n         subtree: &Subtree,\n         attrs: Option<&Subtree>,\n         env: &Env,\n-    ) -> Result<Subtree, ExpansionError>;\n+    ) -> Result<Subtree, ProcMacroExpansionError>;\n+}\n+\n+pub enum ProcMacroExpansionError {\n+    Panic(String),\n+    /// Things like \"proc macro server was killed by OOM\".\n+    System(String),\n }\n \n #[derive(Debug, Clone)]"}, {"sha": "c34a3295404172270f84a5fe6b69b1eb6e890716", "filename": "crates/base_db/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/535f0726f18187574d47de1a4b78d0d54bc00de8/crates%2Fbase_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/535f0726f18187574d47de1a4b78d0d54bc00de8/crates%2Fbase_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Flib.rs?ref=535f0726f18187574d47de1a4b78d0d54bc00de8", "patch": "@@ -12,7 +12,8 @@ pub use crate::{\n     change::Change,\n     input::{\n         CrateData, CrateDisplayName, CrateGraph, CrateId, CrateName, Dependency, Edition, Env,\n-        ProcMacro, ProcMacroExpander, ProcMacroId, ProcMacroKind, SourceRoot, SourceRootId,\n+        ProcMacro, ProcMacroExpander, ProcMacroExpansionError, ProcMacroId, ProcMacroKind,\n+        SourceRoot, SourceRootId,\n     },\n };\n pub use salsa::{self, Cancelled};"}, {"sha": "e8e1d99e808ec8a621d63fcba256702449e4e8f5", "filename": "crates/hir_expand/src/proc_macro.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/535f0726f18187574d47de1a4b78d0d54bc00de8/crates%2Fhir_expand%2Fsrc%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/535f0726f18187574d47de1a4b78d0d54bc00de8/crates%2Fhir_expand%2Fsrc%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fproc_macro.rs?ref=535f0726f18187574d47de1a4b78d0d54bc00de8", "patch": "@@ -1,7 +1,7 @@\n //! Proc Macro Expander stub\n \n use crate::db::AstDatabase;\n-use base_db::{CrateId, ProcMacroId};\n+use base_db::{CrateId, ProcMacroExpansionError, ProcMacroId};\n use mbe::ExpandResult;\n \n #[derive(Debug, Clone, Copy, Eq, PartialEq, Hash)]\n@@ -42,7 +42,14 @@ impl ProcMacroExpander {\n                 // Proc macros have access to the environment variables of the invoking crate.\n                 let env = &krate_graph[calling_crate].env;\n \n-                proc_macro.expander.expand(tt, attr_arg, env).map_err(mbe::ExpandError::from).into()\n+                proc_macro\n+                    .expander\n+                    .expand(tt, attr_arg, env)\n+                    .map_err(|err| match err {\n+                        ProcMacroExpansionError::Panic(text) => mbe::ExpandError::Other(text),\n+                        ProcMacroExpansionError::System(text) => mbe::ExpandError::Other(text),\n+                    })\n+                    .into()\n             }\n             None => ExpandResult::only_err(mbe::ExpandError::UnresolvedProcMacro),\n         }"}, {"sha": "f490d75c3f40f27cb184104fd341297592197c64", "filename": "crates/mbe/src/lib.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/535f0726f18187574d47de1a4b78d0d54bc00de8/crates%2Fmbe%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/535f0726f18187574d47de1a4b78d0d54bc00de8/crates%2Fmbe%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Flib.rs?ref=535f0726f18187574d47de1a4b78d0d54bc00de8", "patch": "@@ -39,25 +39,18 @@ pub enum ExpandError {\n     UnexpectedToken,\n     BindingError(String),\n     ConversionError,\n-    ProcMacroError(tt::ExpansionError),\n+    // FXME: no way mbe should know about proc macros.\n     UnresolvedProcMacro,\n     Other(String),\n }\n \n-impl From<tt::ExpansionError> for ExpandError {\n-    fn from(it: tt::ExpansionError) -> Self {\n-        ExpandError::ProcMacroError(it)\n-    }\n-}\n-\n impl fmt::Display for ExpandError {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self {\n             ExpandError::NoMatchingRule => f.write_str(\"no rule matches input tokens\"),\n             ExpandError::UnexpectedToken => f.write_str(\"unexpected token in input\"),\n             ExpandError::BindingError(e) => f.write_str(e),\n             ExpandError::ConversionError => f.write_str(\"could not convert tokens\"),\n-            ExpandError::ProcMacroError(e) => e.fmt(f),\n             ExpandError::UnresolvedProcMacro => f.write_str(\"unresolved proc macro\"),\n             ExpandError::Other(e) => f.write_str(e),\n         }"}, {"sha": "2cb5eb46b25aaa4d43d1ffde5a9502dafd875629", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/535f0726f18187574d47de1a4b78d0d54bc00de8/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/535f0726f18187574d47de1a4b78d0d54bc00de8/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=535f0726f18187574d47de1a4b78d0d54bc00de8", "patch": "@@ -5,7 +5,8 @@ use flycheck::{FlycheckConfig, FlycheckHandle};\n use hir::db::DefDatabase;\n use ide::Change;\n use ide_db::base_db::{\n-    CrateGraph, Env, ProcMacro, ProcMacroExpander, ProcMacroKind, SourceRoot, VfsPath,\n+    CrateGraph, Env, ProcMacro, ProcMacroExpander, ProcMacroExpansionError, ProcMacroKind,\n+    SourceRoot, VfsPath,\n };\n use proc_macro_api::{MacroDylib, ProcMacroServer};\n use project_model::{ProjectWorkspace, WorkspaceBuildScripts};\n@@ -606,12 +607,12 @@ pub(crate) fn load_proc_macro(client: Option<&ProcMacroServer>, path: &AbsPath)\n             subtree: &tt::Subtree,\n             attrs: Option<&tt::Subtree>,\n             env: &Env,\n-        ) -> Result<tt::Subtree, tt::ExpansionError> {\n+        ) -> Result<tt::Subtree, ProcMacroExpansionError> {\n             let env = env.iter().map(|(k, v)| (k.to_string(), v.to_string())).collect();\n             match self.0.expand(subtree, attrs, env) {\n                 Ok(Ok(subtree)) => Ok(subtree),\n-                Ok(Err(err)) => Err(tt::ExpansionError::ExpansionError(err.0)),\n-                Err(err) => Err(tt::ExpansionError::Unknown(err.to_string())),\n+                Ok(Err(err)) => Err(ProcMacroExpansionError::Panic(err.0)),\n+                Err(err) => Err(ProcMacroExpansionError::System(err.to_string())),\n             }\n         }\n     }"}, {"sha": "f457881f2ebcb13c9c469dde038a9d35e50926f3", "filename": "crates/tt/src/lib.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/535f0726f18187574d47de1a4b78d0d54bc00de8/crates%2Ftt%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/535f0726f18187574d47de1a4b78d0d54bc00de8/crates%2Ftt%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftt%2Fsrc%2Flib.rs?ref=535f0726f18187574d47de1a4b78d0d54bc00de8", "patch": "@@ -274,18 +274,3 @@ impl Subtree {\n }\n \n pub mod buffer;\n-\n-#[derive(Debug, PartialEq, Eq, Clone)]\n-pub enum ExpansionError {\n-    Unknown(String),\n-    ExpansionError(String),\n-}\n-\n-impl fmt::Display for ExpansionError {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self {\n-            ExpansionError::Unknown(e) => e.fmt(f),\n-            ExpansionError::ExpansionError(e) => write!(f, \"proc macro returned error: {}\", e),\n-        }\n-    }\n-}"}]}