{"sha": "f307688bf44404b371b91b3b2a67048088695fe1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzMDc2ODhiZjQ0NDA0YjM3MWI5MWIzYjJhNjcwNDgwODg2OTVmZTE=", "commit": {"author": {"name": "Roy Frostig", "email": "rfrostig@mozilla.com", "date": "2010-08-11T23:06:45Z"}, "committer": {"name": "Roy Frostig", "email": "rfrostig@mozilla.com", "date": "2010-08-11T23:06:45Z"}, "message": "Add native vec[u8] to str converter.  Put in workaround for leak in str to vec[u8] converter.  Add testcase exercising both.  Drive-by fix a potential array-out-of-bounds write on rust_str buffers.", "tree": {"sha": "cfd89b43e614588ea7ee35eebd8f83eec3f5fedf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cfd89b43e614588ea7ee35eebd8f83eec3f5fedf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f307688bf44404b371b91b3b2a67048088695fe1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f307688bf44404b371b91b3b2a67048088695fe1", "html_url": "https://github.com/rust-lang/rust/commit/f307688bf44404b371b91b3b2a67048088695fe1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f307688bf44404b371b91b3b2a67048088695fe1/comments", "author": {"login": "froystig", "id": 123903, "node_id": "MDQ6VXNlcjEyMzkwMw==", "avatar_url": "https://avatars.githubusercontent.com/u/123903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/froystig", "html_url": "https://github.com/froystig", "followers_url": "https://api.github.com/users/froystig/followers", "following_url": "https://api.github.com/users/froystig/following{/other_user}", "gists_url": "https://api.github.com/users/froystig/gists{/gist_id}", "starred_url": "https://api.github.com/users/froystig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/froystig/subscriptions", "organizations_url": "https://api.github.com/users/froystig/orgs", "repos_url": "https://api.github.com/users/froystig/repos", "events_url": "https://api.github.com/users/froystig/events{/privacy}", "received_events_url": "https://api.github.com/users/froystig/received_events", "type": "User", "site_admin": false}, "committer": {"login": "froystig", "id": 123903, "node_id": "MDQ6VXNlcjEyMzkwMw==", "avatar_url": "https://avatars.githubusercontent.com/u/123903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/froystig", "html_url": "https://github.com/froystig", "followers_url": "https://api.github.com/users/froystig/followers", "following_url": "https://api.github.com/users/froystig/following{/other_user}", "gists_url": "https://api.github.com/users/froystig/gists{/gist_id}", "starred_url": "https://api.github.com/users/froystig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/froystig/subscriptions", "organizations_url": "https://api.github.com/users/froystig/orgs", "repos_url": "https://api.github.com/users/froystig/repos", "events_url": "https://api.github.com/users/froystig/events{/privacy}", "received_events_url": "https://api.github.com/users/froystig/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e02a2bcb5f8d3dfe03816fed53c51f0a5500f71", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e02a2bcb5f8d3dfe03816fed53c51f0a5500f71", "html_url": "https://github.com/rust-lang/rust/commit/8e02a2bcb5f8d3dfe03816fed53c51f0a5500f71"}], "stats": {"total": 164, "additions": 141, "deletions": 23}, "files": [{"sha": "2e8deb7b3f5de247f5cb99a9fb8a9636ec75e680", "filename": "src/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f307688bf44404b371b91b3b2a67048088695fe1/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/f307688bf44404b371b91b3b2a67048088695fe1/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=f307688bf44404b371b91b3b2a67048088695fe1", "patch": "@@ -477,6 +477,7 @@ TEST_XFAILS_LLVM := $(TASK_XFAILS) \\\n                       lib-deque.rs \\\n                       lib-map.rs \\\n                       lib-rand.rs \\\n+                      lib-vec-str-conversions.rs \\\n                       linear-for-loop.rs \\\n                       list.rs \\\n                       many.rs \\"}, {"sha": "807edf314bb1225ef23afcec1e7afa01b397fe4a", "filename": "src/lib/_str.rs", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f307688bf44404b371b91b3b2a67048088695fe1/src%2Flib%2F_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f307688bf44404b371b91b3b2a67048088695fe1/src%2Flib%2F_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2F_str.rs?ref=f307688bf44404b371b91b3b2a67048088695fe1", "patch": "@@ -1,10 +1,13 @@\n import rustrt.sbuf;\n \n+import std._vec.rustrt.vbuf;\n+\n native \"rust\" mod rustrt {\n   type sbuf;\n   fn str_buf(str s) -> sbuf;\n   fn str_byte_len(str s) -> uint;\n   fn str_alloc(uint n_bytes) -> str;\n+  fn str_from_vec(vec[u8] b) -> str;\n   fn refcount[T](str s) -> uint;\n }\n \n@@ -40,9 +43,33 @@ fn buf(str s) -> sbuf {\n   ret rustrt.str_buf(s);\n }\n \n-fn bytes(&str s) -> vec[u8] {\n-  fn ith(str s, uint i) -> u8 {\n-    ret s.(i);\n+fn bytes(str s) -> vec[u8] {\n+  /* FIXME (issue #58):\n+   * Should be...\n+   *\n+   *  fn ith(str s, uint i) -> u8 {\n+   *      ret s.(i);\n+   *  }\n+   *  ret _vec.init_fn[u8](bind ith(s, _), byte_len(s));\n+   *\n+   * but we do not correctly decrement refcount of s when\n+   * the binding dies, so we have to do this manually.\n+   */\n+  let uint n = _str.byte_len(s);\n+  let vec[u8] v = _vec.alloc[u8](n);\n+  let uint i = 0u;\n+  while (i < n) {\n+    v += vec(s.(i));\n+    i += 1u;\n   }\n-  ret _vec.init_fn[u8](bind ith(s, _), _str.byte_len(s));\n+  ret v;\n+}\n+\n+fn from_bytes(vec[u8] v) : is_utf8(v) -> str {\n+  ret rustrt.str_from_vec(v);\n+}\n+\n+fn refcount(str s) -> uint {\n+  // -1 because calling this function incremented the refcount.\n+  ret rustrt.refcount[u8](s) - 1u;\n }"}, {"sha": "64b587c0d2dbcfc7c4be388532e782b4d9bc271e", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 68, "deletions": 19, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/f307688bf44404b371b91b3b2a67048088695fe1/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/f307688bf44404b371b91b3b2a67048088695fe1/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=f307688bf44404b371b91b3b2a67048088695fe1", "patch": "@@ -2,19 +2,6 @@\n #include \"rust_internal.h\"\n \n /* Native builtins. */\n-extern \"C\" CDECL rust_str*\n-str_alloc(rust_task *task, size_t n_bytes)\n-{\n-    rust_dom *dom = task->dom;\n-    size_t alloc = next_power_of_two(sizeof(rust_str) + n_bytes);\n-    void *mem = dom->malloc(alloc);\n-    if (!mem) {\n-        task->fail(2);\n-        return NULL;\n-    }\n-    rust_str *st = new (mem) rust_str(dom, alloc, 1, (uint8_t const *)\"\");\n-    return st;\n-}\n \n extern \"C\" CDECL rust_str*\n last_os_error(rust_task *task) {\n@@ -109,6 +96,48 @@ vec_alloc(rust_task *task, type_desc *t, type_desc *elem_t, size_t n_elts)\n     return vec;\n }\n \n+extern \"C\" CDECL void *\n+vec_buf(rust_task *task, type_desc *ty, rust_vec *v, size_t offset)\n+{\n+    return (void *)&v->data[ty->size * offset];\n+}\n+\n+extern \"C\" CDECL size_t\n+vec_len(rust_task *task, type_desc *ty, rust_vec *v)\n+{\n+    return v->fill / ty->size;\n+}\n+\n+/* Helper for str_alloc and str_from_vec.  Returns NULL as failure. */\n+static rust_str *\n+str_alloc_with_data(rust_task *task,\n+                    size_t n_bytes,\n+                    size_t fill,\n+                    uint8_t const *d)\n+{\n+    rust_dom *dom = task->dom;\n+    size_t alloc = next_power_of_two(sizeof(rust_str) + n_bytes);\n+    void *mem = dom->malloc(alloc);\n+    if (!mem)\n+        return NULL;\n+    rust_str *st = new (mem) rust_str(dom, alloc, fill, d);\n+    return st;\n+}\n+\n+extern \"C\" CDECL rust_str*\n+str_alloc(rust_task *task, size_t n_bytes)\n+{\n+    rust_str *st = str_alloc_with_data(task,\n+                                       n_bytes + 1,  // +1 to fit at least \"\"\n+                                       1,\n+                                       (uint8_t const *)\"\");\n+    if (!st) {\n+        task->fail(2);\n+        return NULL;\n+    }\n+    return st;\n+}\n+\n extern \"C\" CDECL char const *\n str_buf(rust_task *task, rust_str *s)\n {\n@@ -121,17 +150,37 @@ str_byte_len(rust_task *task, rust_str *s)\n     return s->fill - 1;  // -1 for the '\\0' terminator.\n }\n \n-extern \"C\" CDECL void *\n-vec_buf(rust_task *task, type_desc *ty, rust_vec *v, size_t offset)\n+extern \"C\" CDECL rust_str *\n+str_from_vec(rust_task *task, rust_vec *v)\n {\n-    return (void *)&v->data[ty->size * offset];\n+    rust_str *st =\n+        str_alloc_with_data(task,\n+                            v->fill + 1,  // +1 to fit at least '\\0'\n+                            v->fill,\n+                            v->fill ? (uint8_t const *)v->data : NULL);\n+    if (!st) {\n+        task->fail(2);\n+        return NULL;\n+    }\n+    st->data[st->fill++] = '\\0';\n+    return st;\n }\n \n-extern \"C\" CDECL size_t\n-vec_len(rust_task *task, type_desc *ty, rust_vec *v)\n+/*\n+extern \"C\" CDECL rust_str*\n+str_alloc(rust_task *task, size_t n_bytes)\n {\n-    return v->fill / ty->size;\n+    rust_dom *dom = task->dom;\n+    size_t alloc = next_power_of_two(sizeof(rust_str) + n_bytes);\n+    void *mem = dom->malloc(alloc);\n+    if (!mem) {\n+        task->fail(2);\n+        return NULL;\n+    }\n+    rust_str *st = new (mem) rust_str(dom, alloc, 1, (uint8_t const *)\"\");\n+    return st;\n }\n+*/\n \n extern \"C\" CDECL void *\n rand_new(rust_task *task)"}, {"sha": "1d6b61a1900e3d630a56771fadc4cb36327db0e4", "filename": "src/test/run-pass/lib-vec-str-conversions.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/f307688bf44404b371b91b3b2a67048088695fe1/src%2Ftest%2Frun-pass%2Flib-vec-str-conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f307688bf44404b371b91b3b2a67048088695fe1/src%2Ftest%2Frun-pass%2Flib-vec-str-conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flib-vec-str-conversions.rs?ref=f307688bf44404b371b91b3b2a67048088695fe1", "patch": "@@ -0,0 +1,41 @@\n+// -*- rust -*-\n+\n+use std;\n+import std._str;\n+import std._vec;\n+\n+fn test_simple() {\n+  let str s1 = \"All mimsy were the borogoves\";\n+\n+  /*\n+   * FIXME from_bytes(vec[u8] v) has constraint is_utf(v), which is\n+   * unimplemented and thereby just fails.  This doesn't stop us from\n+   * using from_bytes for now since the constraint system isn't fully\n+   * working, but we should implement is_utf8 before that happens.\n+   */\n+\n+  let vec[u8] v = _str.bytes(s1);\n+  let str s2 = _str.from_bytes(v);\n+\n+  let uint i = 0u;\n+  let uint n1 = _str.byte_len(s1);\n+  let uint n2 = _vec.len[u8](v);\n+\n+  check (n1 == n2);\n+\n+  while (i < n1) {\n+    let u8 a = s1.(i);\n+    let u8 b = s2.(i);\n+    log a;\n+    log b;\n+    check (a == b);\n+    i += 1u;\n+  }\n+\n+  log \"refcnt is\";\n+  log _str.refcount(s1);\n+}\n+\n+fn main() {\n+  test_simple();\n+}"}]}