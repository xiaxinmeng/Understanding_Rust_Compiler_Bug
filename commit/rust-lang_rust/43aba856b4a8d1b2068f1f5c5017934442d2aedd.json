{"sha": "43aba856b4a8d1b2068f1f5c5017934442d2aedd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzYWJhODU2YjRhOGQxYjIwNjhmMWY1YzUwMTc5MzQ0NDJkMmFlZGQ=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-09-12T05:16:22Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-09-13T01:54:13Z"}, "message": "std: Remove Zero impl from vec\n\nVecs are not numeric types, so it doesn't make sense for them to\nimplement Zero.", "tree": {"sha": "5a3fa2f39d5ebbe444763e9b2a5d3330235a4437", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a3fa2f39d5ebbe444763e9b2a5d3330235a4437"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43aba856b4a8d1b2068f1f5c5017934442d2aedd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43aba856b4a8d1b2068f1f5c5017934442d2aedd", "html_url": "https://github.com/rust-lang/rust/commit/43aba856b4a8d1b2068f1f5c5017934442d2aedd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43aba856b4a8d1b2068f1f5c5017934442d2aedd/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0e123eb6e2c0a971dd4e9e2c49e2ceed0d73672", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0e123eb6e2c0a971dd4e9e2c49e2ceed0d73672", "html_url": "https://github.com/rust-lang/rust/commit/a0e123eb6e2c0a971dd4e9e2c49e2ceed0d73672"}], "stats": {"total": 32, "additions": 7, "deletions": 25}, "files": [{"sha": "47c3a07961444b90a20af13de4b8cb0533fcaa27", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 4, "deletions": 21, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/43aba856b4a8d1b2068f1f5c5017934442d2aedd/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43aba856b4a8d1b2068f1f5c5017934442d2aedd/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=43aba856b4a8d1b2068f1f5c5017934442d2aedd", "patch": "@@ -107,7 +107,7 @@ use cmp;\n use default::Default;\n use iter::*;\n use libc::c_void;\n-use num::{Integer, Zero, CheckedAdd, Saturating};\n+use num::{Integer, CheckedAdd, Saturating};\n use option::{None, Option, Some};\n use ptr::to_unsafe_ptr;\n use ptr;\n@@ -2250,22 +2250,6 @@ impl<A> Default for @[A] {\n     fn default() -> @[A] { @[] }\n }\n \n-// This works because every lifetime is a sub-lifetime of 'static\n-impl<'self, A> Zero for &'self [A] {\n-    fn zero() -> &'self [A] { &'self [] }\n-    fn is_zero(&self) -> bool { self.is_empty() }\n-}\n-\n-impl<A> Zero for ~[A] {\n-    fn zero() -> ~[A] { ~[] }\n-    fn is_zero(&self) -> bool { self.len() == 0 }\n-}\n-\n-impl<A> Zero for @[A] {\n-    fn zero() -> @[A] { @[] }\n-    fn is_zero(&self) -> bool { self.len() == 0 }\n-}\n-\n macro_rules! iterator {\n     /* FIXME: #4375 Cannot attach documentation/attributes to a macro generated struct.\n     (struct $name:ident -> $ptr:ty, $elem:ty) => {\n@@ -3602,13 +3586,12 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_vec_zero() {\n-        use num::Zero;\n+    fn test_vec_default() {\n+        use default::Default;\n         macro_rules! t (\n             ($ty:ty) => {{\n-                let v: $ty = Zero::zero();\n+                let v: $ty = Default::default();\n                 assert!(v.is_empty());\n-                assert!(v.is_zero());\n             }}\n         );\n "}, {"sha": "9d92e2400ef46789291b55104f21ac837b0e04ee", "filename": "src/test/run-pass/deriving-zero.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/43aba856b4a8d1b2068f1f5c5017934442d2aedd/src%2Ftest%2Frun-pass%2Fderiving-zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43aba856b4a8d1b2068f1f5c5017934442d2aedd/src%2Ftest%2Frun-pass%2Fderiving-zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-zero.rs?ref=43aba856b4a8d1b2068f1f5c5017934442d2aedd", "patch": "@@ -29,10 +29,9 @@ struct Lots {\n     e: char,\n     f: float,\n     g: (f32, char),\n-    h: ~[util::NonCopyable],\n-    i: @mut (int, int),\n-    j: bool,\n-    k: (),\n+    h: @mut (int, int),\n+    i: bool,\n+    j: (),\n }\n \n fn main() {"}]}