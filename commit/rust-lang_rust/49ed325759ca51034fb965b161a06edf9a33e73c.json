{"sha": "49ed325759ca51034fb965b161a06edf9a33e73c", "node_id": "C_kwDOAAsO6NoAKDQ5ZWQzMjU3NTljYTUxMDM0ZmI5NjViMTYxYTA2ZWRmOWEzM2U3M2M", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-31T05:58:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-31T05:58:02Z"}, "message": "Rollup merge of #101185 - compiler-errors:tweak-wf-locs, r=davidtwco\n\nTweak `WellFormedLoc`s a bit\n\nGives a bit tighter spans in returns and generic ty defaults", "tree": {"sha": "2a88229f6a91bb1741d22d923002d1b253346689", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a88229f6a91bb1741d22d923002d1b253346689"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49ed325759ca51034fb965b161a06edf9a33e73c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjDvhqCRBK7hj4Ov3rIwAAcisIAJk6PCT/ocW+n0UK6aHG1XMm\nJZnAOZDl3/eBndoOLmKuctaxYQlIsCpyenRVlwwjKnTvrsAkS2939f/vwtcPQsp/\nWMG0o3civSnq0WfFbPCeDR5AoO/zHT8R6wzv/eraRPUvyna9QlTJMn0jZcAPqqIZ\niuhgKmrVcFYfJdcNQqnVLjWSSjOQwGBk9vnYrZ0zRiOUG3yEH/ShiR07frYQFxS1\nxyV8sitfW+JDNsceHCQ7DTgu06rsxSW908FaO1WzJ06uk5Xl5rwfUPG77rsWw/TN\n522SI9Y+f5aTuS5oR6SLOMWC1GIlMVmrZM55I1KNfyeq4Zs2fcwdAJQOG8QOJ34=\n=WYhr\n-----END PGP SIGNATURE-----\n", "payload": "tree 2a88229f6a91bb1741d22d923002d1b253346689\nparent 0ed046f44dde49db03c2f5e43aca32fe62810008\nparent 5a4f7d4ad3e1124291b177af369023c3f181422e\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1661925482 +0200\ncommitter GitHub <noreply@github.com> 1661925482 +0200\n\nRollup merge of #101185 - compiler-errors:tweak-wf-locs, r=davidtwco\n\nTweak `WellFormedLoc`s a bit\n\nGives a bit tighter spans in returns and generic ty defaults\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49ed325759ca51034fb965b161a06edf9a33e73c", "html_url": "https://github.com/rust-lang/rust/commit/49ed325759ca51034fb965b161a06edf9a33e73c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49ed325759ca51034fb965b161a06edf9a33e73c/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ed046f44dde49db03c2f5e43aca32fe62810008", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ed046f44dde49db03c2f5e43aca32fe62810008", "html_url": "https://github.com/rust-lang/rust/commit/0ed046f44dde49db03c2f5e43aca32fe62810008"}, {"sha": "5a4f7d4ad3e1124291b177af369023c3f181422e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a4f7d4ad3e1124291b177af369023c3f181422e", "html_url": "https://github.com/rust-lang/rust/commit/5a4f7d4ad3e1124291b177af369023c3f181422e"}], "stats": {"total": 85, "additions": 52, "deletions": 33}, "files": [{"sha": "ba42453bd60e920286239085eeb96203479087a8", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/49ed325759ca51034fb965b161a06edf9a33e73c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ed325759ca51034fb965b161a06edf9a33e73c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=49ed325759ca51034fb965b161a06edf9a33e73c", "patch": "@@ -1262,7 +1262,11 @@ fn check_impl<'tcx>(\n             }\n             None => {\n                 let self_ty = tcx.type_of(item.def_id);\n-                let self_ty = wfcx.normalize(item.span, None, self_ty);\n+                let self_ty = wfcx.normalize(\n+                    item.span,\n+                    Some(WellFormedLoc::Ty(item.hir_id().expect_owner())),\n+                    self_ty,\n+                );\n                 wfcx.register_wf_obligation(\n                     ast_self_ty.span,\n                     Some(WellFormedLoc::Ty(item.hir_id().expect_owner())),\n@@ -1307,7 +1311,11 @@ fn check_where_clauses<'tcx>(wfcx: &WfCheckingCtxt<'_, 'tcx>, span: Span, def_id\n                     // parameter includes another (e.g., `<T, U = T>`). In those cases, we can't\n                     // be sure if it will error or not as user might always specify the other.\n                     if !ty.needs_subst() {\n-                        wfcx.register_wf_obligation(tcx.def_span(param.def_id), None, ty.into());\n+                        wfcx.register_wf_obligation(\n+                            tcx.def_span(param.def_id),\n+                            Some(WellFormedLoc::Ty(param.def_id.expect_local())),\n+                            ty.into(),\n+                        );\n                     }\n                 }\n             }\n@@ -1512,7 +1520,14 @@ fn check_fn_or_method<'tcx>(\n         );\n     }\n \n-    wfcx.register_wf_obligation(hir_decl.output.span(), None, sig.output().into());\n+    wfcx.register_wf_obligation(\n+        hir_decl.output.span(),\n+        Some(WellFormedLoc::Param {\n+            function: def_id,\n+            param_idx: sig.inputs().len().try_into().unwrap(),\n+        }),\n+        sig.output().into(),\n+    );\n \n     check_where_clauses(wfcx, span, def_id);\n }"}, {"sha": "7b080dc2942e06afb03b6642821be02055e5a6cc", "filename": "compiler/rustc_typeck/src/hir_wf_check.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49ed325759ca51034fb965b161a06edf9a33e73c/compiler%2Frustc_typeck%2Fsrc%2Fhir_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ed325759ca51034fb965b161a06edf9a33e73c/compiler%2Frustc_typeck%2Fsrc%2Fhir_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fhir_wf_check.rs?ref=49ed325759ca51034fb965b161a06edf9a33e73c", "patch": "@@ -140,6 +140,10 @@ fn diagnostic_hir_wf_check<'tcx>(\n             hir::Node::ForeignItem(ForeignItem {\n                 kind: ForeignItemKind::Static(ty, _), ..\n             }) => Some(*ty),\n+            hir::Node::GenericParam(hir::GenericParam {\n+                kind: hir::GenericParamKind::Type { default: Some(ty), .. },\n+                ..\n+            }) => Some(*ty),\n             ref node => bug!(\"Unexpected node {:?}\", node),\n         },\n         WellFormedLoc::Param { function: _, param_idx } => {"}, {"sha": "d76c697fe737d907019fdeeb7d2ddba4b01b8438", "filename": "src/test/ui/feature-gates/feature-gate-object_safe_for_dispatch.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/49ed325759ca51034fb965b161a06edf9a33e73c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49ed325759ca51034fb965b161a06edf9a33e73c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-object_safe_for_dispatch.stderr?ref=49ed325759ca51034fb965b161a06edf9a33e73c", "patch": "@@ -13,10 +13,10 @@ LL | trait NonObjectSafe1: Sized {}\n    |       this trait cannot be made into an object...\n \n error[E0038]: the trait `NonObjectSafe2` cannot be made into an object\n-  --> $DIR/feature-gate-object_safe_for_dispatch.rs:22:36\n+  --> $DIR/feature-gate-object_safe_for_dispatch.rs:22:45\n    |\n LL | fn return_non_object_safe_ref() -> &'static dyn NonObjectSafe2 {\n-   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ `NonObjectSafe2` cannot be made into an object\n+   |                                             ^^^^^^^^^^^^^^^^^^ `NonObjectSafe2` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/feature-gate-object_safe_for_dispatch.rs:7:8\n@@ -50,10 +50,10 @@ LL |     fn foo<T>(&self);\n    = help: consider moving `foo` to another trait\n \n error[E0038]: the trait `NonObjectSafe4` cannot be made into an object\n-  --> $DIR/feature-gate-object_safe_for_dispatch.rs:31:35\n+  --> $DIR/feature-gate-object_safe_for_dispatch.rs:31:47\n    |\n LL | fn return_non_object_safe_rc() -> std::rc::Rc<dyn NonObjectSafe4> {\n-   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `NonObjectSafe4` cannot be made into an object\n+   |                                               ^^^^^^^^^^^^^^^^^^ `NonObjectSafe4` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/feature-gate-object_safe_for_dispatch.rs:15:22"}, {"sha": "687dbe65e6c381405950d54d0b13db584eac5bc7", "filename": "src/test/ui/impl-trait/object-unsafe-trait-in-return-position-dyn-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49ed325759ca51034fb965b161a06edf9a33e73c/src%2Ftest%2Fui%2Fimpl-trait%2Fobject-unsafe-trait-in-return-position-dyn-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49ed325759ca51034fb965b161a06edf9a33e73c/src%2Ftest%2Fui%2Fimpl-trait%2Fobject-unsafe-trait-in-return-position-dyn-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fobject-unsafe-trait-in-return-position-dyn-trait.stderr?ref=49ed325759ca51034fb965b161a06edf9a33e73c", "patch": "@@ -21,10 +21,10 @@ LL |     fn foo() -> Self where Self: Sized;\n    |                      +++++++++++++++++\n \n error[E0038]: the trait `NotObjectSafe` cannot be made into an object\n-  --> $DIR/object-unsafe-trait-in-return-position-dyn-trait.rs:28:13\n+  --> $DIR/object-unsafe-trait-in-return-position-dyn-trait.rs:28:17\n    |\n LL | fn cat() -> Box<dyn NotObjectSafe> {\n-   |             ^^^^^^^^^^^^^^^^^^^^^^ `NotObjectSafe` cannot be made into an object\n+   |                 ^^^^^^^^^^^^^^^^^ `NotObjectSafe` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/object-unsafe-trait-in-return-position-dyn-trait.rs:3:8"}, {"sha": "5f94c9284ea6699c1443b8dfcf4cca166cae45b2", "filename": "src/test/ui/object-safety/object-safety-associated-consts.curr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49ed325759ca51034fb965b161a06edf9a33e73c/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49ed325759ca51034fb965b161a06edf9a33e73c/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.curr.stderr?ref=49ed325759ca51034fb965b161a06edf9a33e73c", "patch": "@@ -1,8 +1,8 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n-  --> $DIR/object-safety-associated-consts.rs:12:30\n+  --> $DIR/object-safety-associated-consts.rs:12:31\n    |\n LL | fn make_bar<T:Bar>(t: &T) -> &dyn Bar {\n-   |                              ^^^^^^^^ `Bar` cannot be made into an object\n+   |                               ^^^^^^^ `Bar` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/object-safety-associated-consts.rs:9:11"}, {"sha": "29ffb5448427d42ee4a0358728cc922b8640fb8b", "filename": "src/test/ui/object-safety/object-safety-bounds.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49ed325759ca51034fb965b161a06edf9a33e73c/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49ed325759ca51034fb965b161a06edf9a33e73c/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-bounds.stderr?ref=49ed325759ca51034fb965b161a06edf9a33e73c", "patch": "@@ -1,8 +1,8 @@\n error[E0038]: the trait `X` cannot be made into an object\n-  --> $DIR/object-safety-bounds.rs:7:11\n+  --> $DIR/object-safety-bounds.rs:7:15\n    |\n LL | fn f() -> Box<dyn X<U = u32>> {\n-   |           ^^^^^^^^^^^^^^^^^^^ `X` cannot be made into an object\n+   |               ^^^^^^^^^^^^^^ `X` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/object-safety-bounds.rs:4:13"}, {"sha": "45810375263978b9d7664b3d150c1af8789e151d", "filename": "src/test/ui/object-safety/object-safety-generics.curr.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/49ed325759ca51034fb965b161a06edf9a33e73c/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-generics.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49ed325759ca51034fb965b161a06edf9a33e73c/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-generics.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-generics.curr.stderr?ref=49ed325759ca51034fb965b161a06edf9a33e73c", "patch": "@@ -1,8 +1,8 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n-  --> $DIR/object-safety-generics.rs:18:30\n+  --> $DIR/object-safety-generics.rs:18:31\n    |\n LL | fn make_bar<T:Bar>(t: &T) -> &dyn Bar {\n-   |                              ^^^^^^^^ `Bar` cannot be made into an object\n+   |                               ^^^^^^^ `Bar` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/object-safety-generics.rs:10:8\n@@ -14,10 +14,10 @@ LL |     fn bar<T>(&self, t: T);\n    = help: consider moving `bar` to another trait\n \n error[E0038]: the trait `Bar` cannot be made into an object\n-  --> $DIR/object-safety-generics.rs:24:39\n+  --> $DIR/object-safety-generics.rs:24:40\n    |\n LL | fn make_bar_explicit<T:Bar>(t: &T) -> &dyn Bar {\n-   |                                       ^^^^^^^^ `Bar` cannot be made into an object\n+   |                                        ^^^^^^^ `Bar` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/object-safety-generics.rs:10:8"}, {"sha": "de430a89bf82b6ff7a985ee23590df1c3ecedf07", "filename": "src/test/ui/object-safety/object-safety-mentions-Self.curr.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/49ed325759ca51034fb965b161a06edf9a33e73c/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49ed325759ca51034fb965b161a06edf9a33e73c/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.curr.stderr?ref=49ed325759ca51034fb965b161a06edf9a33e73c", "patch": "@@ -1,8 +1,8 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n-  --> $DIR/object-safety-mentions-Self.rs:22:30\n+  --> $DIR/object-safety-mentions-Self.rs:22:31\n    |\n LL | fn make_bar<T:Bar>(t: &T) -> &dyn Bar {\n-   |                              ^^^^^^^^ `Bar` cannot be made into an object\n+   |                               ^^^^^^^ `Bar` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/object-safety-mentions-Self.rs:11:22\n@@ -14,10 +14,10 @@ LL |     fn bar(&self, x: &Self);\n    = help: consider moving `bar` to another trait\n \n error[E0038]: the trait `Baz` cannot be made into an object\n-  --> $DIR/object-safety-mentions-Self.rs:28:30\n+  --> $DIR/object-safety-mentions-Self.rs:28:31\n    |\n LL | fn make_baz<T:Baz>(t: &T) -> &dyn Baz {\n-   |                              ^^^^^^^^ `Baz` cannot be made into an object\n+   |                               ^^^^^^^ `Baz` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/object-safety-mentions-Self.rs:15:22"}, {"sha": "1b025229e543ee159e20be60d78f98415137c361", "filename": "src/test/ui/object-safety/object-safety-no-static.curr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49ed325759ca51034fb965b161a06edf9a33e73c/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-no-static.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49ed325759ca51034fb965b161a06edf9a33e73c/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-no-static.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-no-static.curr.stderr?ref=49ed325759ca51034fb965b161a06edf9a33e73c", "patch": "@@ -1,8 +1,8 @@\n error[E0038]: the trait `Foo` cannot be made into an object\n-  --> $DIR/object-safety-no-static.rs:12:18\n+  --> $DIR/object-safety-no-static.rs:12:22\n    |\n LL | fn diverges() -> Box<dyn Foo> {\n-   |                  ^^^^^^^^^^^^ `Foo` cannot be made into an object\n+   |                      ^^^^^^^ `Foo` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/object-safety-no-static.rs:9:8"}, {"sha": "b019264128e7668e926b564822291774e196f15b", "filename": "src/test/ui/object-safety/object-safety-sized-2.curr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49ed325759ca51034fb965b161a06edf9a33e73c/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized-2.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49ed325759ca51034fb965b161a06edf9a33e73c/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized-2.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized-2.curr.stderr?ref=49ed325759ca51034fb965b161a06edf9a33e73c", "patch": "@@ -1,8 +1,8 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n-  --> $DIR/object-safety-sized-2.rs:14:30\n+  --> $DIR/object-safety-sized-2.rs:14:31\n    |\n LL | fn make_bar<T:Bar>(t: &T) -> &dyn Bar {\n-   |                              ^^^^^^^^ `Bar` cannot be made into an object\n+   |                               ^^^^^^^ `Bar` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/object-safety-sized-2.rs:9:18"}, {"sha": "97481312142fb7959cb44bda0c7044c315658a0a", "filename": "src/test/ui/object-safety/object-safety-sized.curr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49ed325759ca51034fb965b161a06edf9a33e73c/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49ed325759ca51034fb965b161a06edf9a33e73c/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized.curr.stderr?ref=49ed325759ca51034fb965b161a06edf9a33e73c", "patch": "@@ -1,8 +1,8 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n-  --> $DIR/object-safety-sized.rs:12:30\n+  --> $DIR/object-safety-sized.rs:12:31\n    |\n LL | fn make_bar<T:Bar>(t: &T) -> &dyn Bar {\n-   |                              ^^^^^^^^ `Bar` cannot be made into an object\n+   |                               ^^^^^^^ `Bar` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/object-safety-sized.rs:8:13"}, {"sha": "cf77c057d46d4b5babce2b4b9e23d96f786982f6", "filename": "src/test/ui/type/type-check-defaults.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/49ed325759ca51034fb965b161a06edf9a33e73c/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49ed325759ca51034fb965b161a06edf9a33e73c/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr?ref=49ed325759ca51034fb965b161a06edf9a33e73c", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: a value of type `i32` cannot be built from an iterator over elements of type `i32`\n-  --> $DIR/type-check-defaults.rs:6:19\n+  --> $DIR/type-check-defaults.rs:6:23\n    |\n LL | struct WellFormed<Z = Foo<i32, i32>>(Z);\n-   |                   ^^^^^^^^^^^^^^^^^ value of type `i32` cannot be built from `std::iter::Iterator<Item=i32>`\n+   |                       ^^^^^^^^^^^^^ value of type `i32` cannot be built from `std::iter::Iterator<Item=i32>`\n    |\n    = help: the trait `FromIterator<i32>` is not implemented for `i32`\n note: required by a bound in `Foo`\n@@ -12,10 +12,10 @@ LL | struct Foo<T, U: FromIterator<T>>(T, U);\n    |                  ^^^^^^^^^^^^^^^ required by this bound in `Foo`\n \n error[E0277]: a value of type `i32` cannot be built from an iterator over elements of type `i32`\n-  --> $DIR/type-check-defaults.rs:8:27\n+  --> $DIR/type-check-defaults.rs:8:38\n    |\n LL | struct WellFormedNoBounds<Z:?Sized = Foo<i32, i32>>(Z);\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^^ value of type `i32` cannot be built from `std::iter::Iterator<Item=i32>`\n+   |                                      ^^^^^^^^^^^^^ value of type `i32` cannot be built from `std::iter::Iterator<Item=i32>`\n    |\n    = help: the trait `FromIterator<i32>` is not implemented for `i32`\n note: required by a bound in `Foo`"}, {"sha": "9bd3cc7711b84777124ca566bf7117162934c422", "filename": "src/test/ui/wf/wf-trait-fn-ret.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49ed325759ca51034fb965b161a06edf9a33e73c/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49ed325759ca51034fb965b161a06edf9a33e73c/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-ret.stderr?ref=49ed325759ca51034fb965b161a06edf9a33e73c", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `Self: Eq` is not satisfied\n-  --> $DIR/wf-trait-fn-ret.rs:10:22\n+  --> $DIR/wf-trait-fn-ret.rs:10:23\n    |\n LL |     fn bar(&self) -> &Bar<Self>;\n-   |                      ^^^^^^^^^^ the trait `Eq` is not implemented for `Self`\n+   |                       ^^^^^^^^^ the trait `Eq` is not implemented for `Self`\n    |\n note: required by a bound in `Bar`\n   --> $DIR/wf-trait-fn-ret.rs:7:14"}]}