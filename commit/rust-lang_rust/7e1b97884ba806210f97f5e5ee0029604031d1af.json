{"sha": "7e1b97884ba806210f97f5e5ee0029604031d1af", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlMWI5Nzg4NGJhODA2MjEwZjk3ZjVlNWVlMDAyOTYwNDAzMWQxYWY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-08-31T23:20:43Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-10T12:22:31Z"}, "message": "insert `AscribeUserType` for ascriptions", "tree": {"sha": "bc8fd1f73508c41b2ef22959ba5e5827d870068d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc8fd1f73508c41b2ef22959ba5e5827d870068d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e1b97884ba806210f97f5e5ee0029604031d1af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e1b97884ba806210f97f5e5ee0029604031d1af", "html_url": "https://github.com/rust-lang/rust/commit/7e1b97884ba806210f97f5e5ee0029604031d1af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e1b97884ba806210f97f5e5ee0029604031d1af/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd3cc9669acba363abdf4f1bf5744aea383ecc46", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd3cc9669acba363abdf4f1bf5744aea383ecc46", "html_url": "https://github.com/rust-lang/rust/commit/dd3cc9669acba363abdf4f1bf5744aea383ecc46"}], "stats": {"total": 145, "additions": 126, "deletions": 19}, "files": [{"sha": "b5b0f5a2aa033af9ec6a7a912d5dd698dbc5d259", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7e1b97884ba806210f97f5e5ee0029604031d1af/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1b97884ba806210f97f5e5ee0029604031d1af/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=7e1b97884ba806210f97f5e5ee0029604031d1af", "patch": "@@ -329,6 +329,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             }\n         }\n \n+        self.ascribe_types(block, &candidate.ascriptions);\n+\n         // now apply the bindings, which will also declare the variables\n         self.bind_matched_candidate_for_arm_body(block, &candidate.bindings);\n \n@@ -958,6 +960,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n         debug_assert!(candidate.match_pairs.is_empty());\n \n+        self.ascribe_types(block, &candidate.ascriptions);\n+\n         let arm_block = arm_blocks.blocks[candidate.arm_index];\n         let candidate_source_info = self.source_info(candidate.span);\n \n@@ -1169,6 +1173,28 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         }\n     }\n \n+    /// Append `AscribeUserType` statements onto the end of `block`\n+    /// for each ascription\n+    fn ascribe_types<'pat>(\n+        &mut self,\n+        block: BasicBlock,\n+        ascriptions: &[Ascription<'tcx>],\n+    ) {\n+        for ascription in ascriptions {\n+            let source_info = self.source_info(ascription.span);\n+            self.cfg.push(\n+                block,\n+                Statement {\n+                    source_info,\n+                    kind: StatementKind::AscribeUserType(\n+                        ascription.source.clone(),\n+                        ascription.user_ty,\n+                    ),\n+                },\n+            );\n+        }\n+    }\n+\n     // Only called when all_pat_vars_are_implicit_refs_within_guards,\n     // and thus all code/comments assume we are in that context.\n     fn bind_matched_candidate_for_guard("}, {"sha": "d2388c377fc02beb15df0bdd3bf595c2bcfb5b76", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-fn-body.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e1b97884ba806210f97f5e5ee0029604031d1af/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn-body.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e1b97884ba806210f97f5e5ee0029604031d1af/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn-body.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn-body.nll.stderr?ref=7e1b97884ba806210f97f5e5ee0029604031d1af", "patch": "@@ -1,24 +1,24 @@\n error: unsatisfied lifetime constraints\n-  --> $DIR/associated-types-project-from-hrtb-in-fn-body.rs:32:29\n+  --> $DIR/associated-types-project-from-hrtb-in-fn-body.rs:32:19\n    |\n LL | fn bar<'a, 'b, I : for<'x> Foo<&'x isize>>(\n    |        --  -- lifetime `'b` defined here\n    |        |\n    |        lifetime `'a` defined here\n ...\n LL |     let z: I::A = if cond { x } else { y };\n-   |                             ^ assignment requires that `'a` must outlive `'b`\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'b`\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/associated-types-project-from-hrtb-in-fn-body.rs:32:40\n+  --> $DIR/associated-types-project-from-hrtb-in-fn-body.rs:32:19\n    |\n LL | fn bar<'a, 'b, I : for<'x> Foo<&'x isize>>(\n    |        --  -- lifetime `'b` defined here\n    |        |\n    |        lifetime `'a` defined here\n ...\n LL |     let z: I::A = if cond { x } else { y };\n-   |                                        ^ assignment requires that `'b` must outlive `'a`\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'b` must outlive `'a`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "bedbc744dd3ce1d4fe7be8be4056ab0f2754c29c", "filename": "src/test/ui/borrowck/borrowck-access-permissions.ast.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e1b97884ba806210f97f5e5ee0029604031d1af/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-access-permissions.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e1b97884ba806210f97f5e5ee0029604031d1af/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-access-permissions.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-access-permissions.ast.nll.stderr?ref=7e1b97884ba806210f97f5e5ee0029604031d1af", "patch": "@@ -35,7 +35,7 @@ error[E0596]: cannot borrow `*ptr_x` as mutable, as it is behind a `*const` poin\n   --> $DIR/borrowck-access-permissions.rs:56:23\n    |\n LL |         let ptr_x : *const _ = &x;\n-   |                                -- help: consider changing this to be a mutable pointer: `&mut x`\n+   |             ----- help: consider changing this to be a mutable pointer: `*mut i32`\n ...\n LL |             let _y1 = &mut *ptr_x; //[ast]~ ERROR [E0596]\n    |                       ^^^^^^^^^^^ `ptr_x` is a `*const` pointer, so the data it refers to cannot be borrowed as mutable"}, {"sha": "bedbc744dd3ce1d4fe7be8be4056ab0f2754c29c", "filename": "src/test/ui/borrowck/borrowck-access-permissions.mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e1b97884ba806210f97f5e5ee0029604031d1af/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-access-permissions.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e1b97884ba806210f97f5e5ee0029604031d1af/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-access-permissions.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-access-permissions.mir.stderr?ref=7e1b97884ba806210f97f5e5ee0029604031d1af", "patch": "@@ -35,7 +35,7 @@ error[E0596]: cannot borrow `*ptr_x` as mutable, as it is behind a `*const` poin\n   --> $DIR/borrowck-access-permissions.rs:56:23\n    |\n LL |         let ptr_x : *const _ = &x;\n-   |                                -- help: consider changing this to be a mutable pointer: `&mut x`\n+   |             ----- help: consider changing this to be a mutable pointer: `*mut i32`\n ...\n LL |             let _y1 = &mut *ptr_x; //[ast]~ ERROR [E0596]\n    |                       ^^^^^^^^^^^ `ptr_x` is a `*const` pointer, so the data it refers to cannot be borrowed as mutable"}, {"sha": "f701ce187e3ce57f5a7e295cde2a3a1cb23e3d9a", "filename": "src/test/ui/consts/const-eval/dont_promote_unstable_const_fn.nll.stderr", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7e1b97884ba806210f97f5e5ee0029604031d1af/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdont_promote_unstable_const_fn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e1b97884ba806210f97f5e5ee0029604031d1af/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdont_promote_unstable_const_fn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdont_promote_unstable_const_fn.nll.stderr?ref=7e1b97884ba806210f97f5e5ee0029604031d1af", "patch": "@@ -6,6 +6,27 @@ LL | const fn bar() -> u32 { foo() } //~ ERROR `foo` is not yet stable as a cons\n    |\n    = help: in Nightly builds, add `#![feature(foo)]` to the crate attributes to enable\n \n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/dont_promote_unstable_const_fn.rs:28:28\n+   |\n+LL |     let _: &'static u32 = &foo(); //~ ERROR does not live long enough\n+   |                            ^^^^^ temporary value does not live long enough\n+LL | }\n+   | - temporary value only lives until here\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/dont_promote_unstable_const_fn.rs:32:28\n+   |\n+LL |     let _: &'static u32 = &meh(); //~ ERROR does not live long enough\n+   |                            ^^^^^ temporary value does not live long enough\n+LL |     let x: &'static _ = &std::time::Duration::from_millis(42).subsec_millis();\n+LL | }\n+   | - temporary value only lives until here\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n error[E0597]: borrowed value does not live long enough\n   --> $DIR/dont_promote_unstable_const_fn.rs:33:26\n    |\n@@ -17,6 +38,6 @@ LL | }\n    |\n    = note: borrowed value must be valid for the static lifetime...\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0597`."}, {"sha": "c1a46a2f1b560979f278444532822f3352b758dd", "filename": "src/test/ui/nll/relate_tys/hr-fn-aaa-as-aba.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7e1b97884ba806210f97f5e5ee0029604031d1af/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fhr-fn-aaa-as-aba.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1b97884ba806210f97f5e5ee0029604031d1af/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fhr-fn-aaa-as-aba.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fhr-fn-aaa-as-aba.rs?ref=7e1b97884ba806210f97f5e5ee0029604031d1af", "patch": "@@ -23,5 +23,6 @@ fn make_it() -> for<'a> fn(&'a u32, &'a u32) -> &'a u32 {\n fn main() {\n     let a: for<'a, 'b> fn(&'a u32, &'b u32) -> &'a u32 = make_it();\n     //~^ ERROR higher-ranked subtype error\n+    //~| ERROR higher-ranked subtype error\n     drop(a);\n }"}, {"sha": "bd5d1f44512a2ed335432bac10deb5660ac936ca", "filename": "src/test/ui/nll/relate_tys/hr-fn-aaa-as-aba.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e1b97884ba806210f97f5e5ee0029604031d1af/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fhr-fn-aaa-as-aba.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e1b97884ba806210f97f5e5ee0029604031d1af/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fhr-fn-aaa-as-aba.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fhr-fn-aaa-as-aba.stderr?ref=7e1b97884ba806210f97f5e5ee0029604031d1af", "patch": "@@ -4,5 +4,11 @@ error: higher-ranked subtype error\n LL |     let a: for<'a, 'b> fn(&'a u32, &'b u32) -> &'a u32 = make_it();\n    |                                                          ^^^^^^^^^\n \n-error: aborting due to previous error\n+error: higher-ranked subtype error\n+  --> $DIR/hr-fn-aaa-as-aba.rs:24:9\n+   |\n+LL |     let a: for<'a, 'b> fn(&'a u32, &'b u32) -> &'a u32 = make_it();\n+   |         ^\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "855f174f82a1276f97b7e3c228c8210b37576d76", "filename": "src/test/ui/nll/user-annotations/patterns.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7e1b97884ba806210f97f5e5ee0029604031d1af/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1b97884ba806210f97f5e5ee0029604031d1af/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpatterns.rs?ref=7e1b97884ba806210f97f5e5ee0029604031d1af", "patch": "@@ -0,0 +1,14 @@\n+// Test that various patterns also enforce types.\n+\n+#![feature(nll)]\n+\n+fn main() {\n+    let _: Vec<&'static String> = vec![&String::new()];\n+    //~^ ERROR borrowed value does not live long enough [E0597]\n+\n+    let (_, a): (Vec<&'static String>, _) = (vec![&String::new()], 44);\n+    //~^ ERROR borrowed value does not live long enough [E0597]\n+\n+    let (_a, b): (Vec<&'static String>, _) = (vec![&String::new()], 44);\n+    //~^ ERROR borrowed value does not live long enough [E0597]\n+}"}, {"sha": "f982362d0607b4fb81c929d287e41df6668cfb3b", "filename": "src/test/ui/nll/user-annotations/patterns.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/7e1b97884ba806210f97f5e5ee0029604031d1af/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpatterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e1b97884ba806210f97f5e5ee0029604031d1af/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpatterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpatterns.stderr?ref=7e1b97884ba806210f97f5e5ee0029604031d1af", "patch": "@@ -0,0 +1,33 @@\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/patterns.rs:6:41\n+   |\n+LL |     let _: Vec<&'static String> = vec![&String::new()];\n+   |                                         ^^^^^^^^^^^^^ - temporary value only lives until here\n+   |                                         |\n+   |                                         temporary value does not live long enough\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/patterns.rs:9:52\n+   |\n+LL |     let (_, a): (Vec<&'static String>, _) = (vec![&String::new()], 44);\n+   |                                                    ^^^^^^^^^^^^^      - temporary value only lives until here\n+   |                                                    |\n+   |                                                    temporary value does not live long enough\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/patterns.rs:12:53\n+   |\n+LL |     let (_a, b): (Vec<&'static String>, _) = (vec![&String::new()], 44);\n+   |                                                     ^^^^^^^^^^^^^      - temporary value only lives until here\n+   |                                                     |\n+   |                                                     temporary value does not live long enough\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "ed51cc38d5a6ca92c90cc31bafdd3c54a26a7f0a", "filename": "src/test/ui/regions/region-object-lifetime-in-coercion.nll.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7e1b97884ba806210f97f5e5ee0029604031d1af/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e1b97884ba806210f97f5e5ee0029604031d1af/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.nll.stderr?ref=7e1b97884ba806210f97f5e5ee0029604031d1af", "patch": "@@ -1,10 +1,11 @@\n error[E0621]: explicit lifetime required in the type of `v`\n-  --> $DIR/region-object-lifetime-in-coercion.rs:18:33\n+  --> $DIR/region-object-lifetime-in-coercion.rs:20:5\n    |\n LL | fn a(v: &[u8]) -> Box<Foo + 'static> {\n    |         ----- help: add explicit lifetime `'static` to the type of `v`: `&'static [u8]`\n-LL |     let x: Box<Foo + 'static> = Box::new(v);\n-   |                                 ^^^^^^^^^^^ lifetime `'static` required\n+...\n+LL |     x\n+   |     ^ lifetime `'static` required\n \n error[E0621]: explicit lifetime required in the type of `v`\n   --> $DIR/region-object-lifetime-in-coercion.rs:24:5"}, {"sha": "9678430060b2730828012b6759c9868b6458815d", "filename": "src/test/ui/slice-mut-2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e1b97884ba806210f97f5e5ee0029604031d1af/src%2Ftest%2Fui%2Fslice-mut-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e1b97884ba806210f97f5e5ee0029604031d1af/src%2Ftest%2Fui%2Fslice-mut-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fslice-mut-2.nll.stderr?ref=7e1b97884ba806210f97f5e5ee0029604031d1af", "patch": "@@ -2,7 +2,7 @@ error[E0596]: cannot borrow `*x` as mutable, as it is behind a `&` reference\n   --> $DIR/slice-mut-2.rs:17:18\n    |\n LL |     let x: &[isize] = &[1, 2, 3, 4, 5];\n-   |                       ---------------- help: consider changing this to be a mutable reference: `&mut [1, 2, 3, 4, 5]`\n+   |         - help: consider changing this to be a mutable reference: `&mut [isize]`\n ...\n LL |     let _ = &mut x[2..4]; //~ERROR cannot borrow immutable borrowed content `*x` as mutable\n    |                  ^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable"}, {"sha": "ebf56dc9835f4928842586f30424f8f2e8d83e43", "filename": "src/test/ui/try-block/try-block-bad-lifetime.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7e1b97884ba806210f97f5e5ee0029604031d1af/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e1b97884ba806210f97f5e5ee0029604031d1af/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-lifetime.stderr?ref=7e1b97884ba806210f97f5e5ee0029604031d1af", "patch": "@@ -1,13 +1,14 @@\n error[E0597]: `my_string` does not live long enough\n   --> $DIR/try-block-bad-lifetime.rs:25:33\n    |\n+LL |         let result: Result<(), &str> = try {\n+   |             ------ borrow later used here\n+LL |             let my_string = String::from(\"\");\n LL |             let my_str: & str = & my_string;\n    |                                 ^^^^^^^^^^^ borrowed value does not live long enough\n ...\n LL |         };\n    |         - `my_string` dropped here while still borrowed\n-LL |         do_something_with(result);\n-   |                           ------ borrow later used here\n \n error[E0506]: cannot assign to `i` because it is borrowed\n   --> $DIR/try-block-bad-lifetime.rs:39:13"}, {"sha": "a4527e793923f567f9966e56d52460a3e4e95142", "filename": "src/test/ui/unboxed-closures/unboxed-closures-failed-recursive-fn-1.nll.stderr", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7e1b97884ba806210f97f5e5ee0029604031d1af/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-failed-recursive-fn-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e1b97884ba806210f97f5e5ee0029604031d1af/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-failed-recursive-fn-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-failed-recursive-fn-1.nll.stderr?ref=7e1b97884ba806210f97f5e5ee0029604031d1af", "patch": "@@ -38,9 +38,12 @@ LL |         let g = factorial.as_ref().unwrap();\n    |                 ^^^^^^^^^ borrowed value does not live long enough\n ...\n LL | }\n-   | - `factorial` dropped here while still borrowed\n+   | -\n+   | |\n+   | `factorial` dropped here while still borrowed\n+   | borrow later used here, when `factorial` is dropped\n    |\n-   = note: borrowed value must be valid for the static lifetime...\n+   = note: values in a scope are dropped in the opposite order they are defined\n \n error[E0506]: cannot assign to `factorial` because it is borrowed\n   --> $DIR/unboxed-closures-failed-recursive-fn-1.rs:42:5\n@@ -52,9 +55,10 @@ LL |         let g = factorial.as_ref().unwrap();\n    |                 --------- borrow occurs due to use in closure\n ...\n LL |     factorial = Some(Box::new(f));\n-   |     ^^^^^^^^^ assignment to borrowed `factorial` occurs here\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n+   |     ^^^^^^^^^\n+   |     |\n+   |     assignment to borrowed `factorial` occurs here\n+   |     borrow later used here\n \n error: aborting due to 4 previous errors\n "}]}