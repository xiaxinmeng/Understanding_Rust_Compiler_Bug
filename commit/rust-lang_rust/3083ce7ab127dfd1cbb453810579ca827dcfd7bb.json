{"sha": "3083ce7ab127dfd1cbb453810579ca827dcfd7bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwODNjZTdhYjEyN2RmZDFjYmI0NTM4MTA1NzljYTgyN2RjZmQ3YmI=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-05-22T19:45:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-22T19:45:00Z"}, "message": "Rollup merge of #72453 - dtolnay:open, r=Mark-Simulacrum\n\nAdd flag to open docs:  x.py doc --open\n\nThis aligns with Cargo's flag `cargo doc --open`.\n\nTested with:\n\n```bash\n   # opens doc/index.html\nx.py doc --stage 0 --open\nx.py doc --stage 0 --open src/doc\n\n   # opens doc/book/index.html\nx.py doc --stage 0 --open src/doc/book\n\n   # opens doc/std/index.html\nx.py doc --stage 0 --open src/libstd\n\n   # opens doc/proc_macro/index.html\nx.py doc --stage 0 --open src/libproc_macro\n\n   # opens both\nx.py doc --stage 0 --open src/libstd src/libproc_macro\n```", "tree": {"sha": "ce8560682a5b1416b63b068651f426f0dccc07be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce8560682a5b1416b63b068651f426f0dccc07be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3083ce7ab127dfd1cbb453810579ca827dcfd7bb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeyCu8CRBK7hj4Ov3rIwAAdHIIAGkwwu2EDKPPfE8vn01c7Ij9\nNV0biN4EaKF1Fa0ITRdc92prT4HabFRzc2a5WmrJSOIfVFkOl+qRFCiSSixiN2JB\nMyvO27R9snMY+ZreFpqCOcFMQpUkao0o5YrS4o6ToAQtkfj19k+i43nnOG2Hsx6F\nRXTfHgV89a+uAJwGHfcPEJ5PH5Erg6Nd2cy0wtlzimLk7xrXX2fddqWtXcAKBH+t\nAQktBBagU7ADJnF597AgNpOrvGVztgoeIT2MkabNcOLu2k6bWVlFugzxE3TfTjDp\nr3lkA3A6RFqSVPjF6YVPosOwN1lJXcWsRCI6i72sVa5qYRbiTpaT3BAHkoiHGbI=\n=EkfM\n-----END PGP SIGNATURE-----\n", "payload": "tree ce8560682a5b1416b63b068651f426f0dccc07be\nparent 01adfe1bc370af0b16265fc6bebbeb9ffe7f459a\nparent 07b1de4e9a4a223840efd60475b86f815e84acfa\nauthor Dylan DPC <dylan.dpc@gmail.com> 1590176700 +0200\ncommitter GitHub <noreply@github.com> 1590176700 +0200\n\nRollup merge of #72453 - dtolnay:open, r=Mark-Simulacrum\n\nAdd flag to open docs:  x.py doc --open\n\nThis aligns with Cargo's flag `cargo doc --open`.\n\nTested with:\n\n```bash\n   # opens doc/index.html\nx.py doc --stage 0 --open\nx.py doc --stage 0 --open src/doc\n\n   # opens doc/book/index.html\nx.py doc --stage 0 --open src/doc/book\n\n   # opens doc/std/index.html\nx.py doc --stage 0 --open src/libstd\n\n   # opens doc/proc_macro/index.html\nx.py doc --stage 0 --open src/libproc_macro\n\n   # opens both\nx.py doc --stage 0 --open src/libstd src/libproc_macro\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3083ce7ab127dfd1cbb453810579ca827dcfd7bb", "html_url": "https://github.com/rust-lang/rust/commit/3083ce7ab127dfd1cbb453810579ca827dcfd7bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3083ce7ab127dfd1cbb453810579ca827dcfd7bb/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01adfe1bc370af0b16265fc6bebbeb9ffe7f459a", "url": "https://api.github.com/repos/rust-lang/rust/commits/01adfe1bc370af0b16265fc6bebbeb9ffe7f459a", "html_url": "https://github.com/rust-lang/rust/commit/01adfe1bc370af0b16265fc6bebbeb9ffe7f459a"}, {"sha": "07b1de4e9a4a223840efd60475b86f815e84acfa", "url": "https://api.github.com/repos/rust-lang/rust/commits/07b1de4e9a4a223840efd60475b86f815e84acfa", "html_url": "https://github.com/rust-lang/rust/commit/07b1de4e9a4a223840efd60475b86f815e84acfa"}], "stats": {"total": 77, "additions": 74, "deletions": 3}, "files": [{"sha": "b0b9e2c27df9c68981ea7732374a86bde77e6630", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3083ce7ab127dfd1cbb453810579ca827dcfd7bb/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/3083ce7ab127dfd1cbb453810579ca827dcfd7bb/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=3083ce7ab127dfd1cbb453810579ca827dcfd7bb", "patch": "@@ -213,6 +213,7 @@ dependencies = [\n  \"lazy_static 1.4.0\",\n  \"libc\",\n  \"num_cpus\",\n+ \"opener\",\n  \"pretty_assertions\",\n  \"serde\",\n  \"serde_json\","}, {"sha": "c4918d7f2e7146795f0d5fdf5ea485dc2d6386bc", "filename": "src/bootstrap/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3083ce7ab127dfd1cbb453810579ca827dcfd7bb/src%2Fbootstrap%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3083ce7ab127dfd1cbb453810579ca827dcfd7bb/src%2Fbootstrap%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.toml?ref=3083ce7ab127dfd1cbb453810579ca827dcfd7bb", "patch": "@@ -48,6 +48,7 @@ toml = \"0.5\"\n lazy_static = \"1.3.0\"\n time = \"0.1\"\n ignore = \"0.4.10\"\n+opener = \"0.4\"\n \n [target.'cfg(windows)'.dependencies.winapi]\n version = \"0.3\""}, {"sha": "5489b1bc66b64f6984fcfddecb845c73ab3c7e71", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3083ce7ab127dfd1cbb453810579ca827dcfd7bb/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3083ce7ab127dfd1cbb453810579ca827dcfd7bb/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=3083ce7ab127dfd1cbb453810579ca827dcfd7bb", "patch": "@@ -503,7 +503,7 @@ impl<'a> Builder<'a> {\n             Subcommand::Check { ref paths } => (Kind::Check, &paths[..]),\n             Subcommand::Clippy { ref paths } => (Kind::Clippy, &paths[..]),\n             Subcommand::Fix { ref paths } => (Kind::Fix, &paths[..]),\n-            Subcommand::Doc { ref paths } => (Kind::Doc, &paths[..]),\n+            Subcommand::Doc { ref paths, .. } => (Kind::Doc, &paths[..]),\n             Subcommand::Test { ref paths, .. } => (Kind::Test, &paths[..]),\n             Subcommand::Bench { ref paths, .. } => (Kind::Bench, &paths[..]),\n             Subcommand::Dist { ref paths } => (Kind::Dist, &paths[..]),"}, {"sha": "5c01c5e852c48caf781a96be2d71a6f0c10e767a", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 58, "deletions": 1, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/3083ce7ab127dfd1cbb453810579ca827dcfd7bb/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3083ce7ab127dfd1cbb453810579ca827dcfd7bb/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=3083ce7ab127dfd1cbb453810579ca827dcfd7bb", "patch": "@@ -70,6 +70,35 @@ book!(\n     RustdocBook, \"src/doc/rustdoc\", \"rustdoc\";\n );\n \n+fn open(builder: &Builder<'_>, path: impl AsRef<Path>) {\n+    if builder.config.dry_run || !builder.config.cmd.open() {\n+        return;\n+    }\n+\n+    let path = path.as_ref();\n+    builder.info(&format!(\"Opening doc {}\", path.display()));\n+    if let Err(err) = opener::open(path) {\n+        builder.info(&format!(\"{}\\n\", err));\n+    }\n+}\n+\n+// \"src/libstd\" -> [\"src\", \"libstd\"]\n+//\n+// Used for deciding whether a particular step is one requested by the user on\n+// the `x.py doc` command line, which determines whether `--open` will open that\n+// page.\n+fn components_simplified(path: &PathBuf) -> Vec<&str> {\n+    path.iter().map(|component| component.to_str().unwrap_or(\"???\")).collect()\n+}\n+\n+fn is_explicit_request(builder: &Builder<'_>, path: &str) -> bool {\n+    builder\n+        .paths\n+        .iter()\n+        .map(components_simplified)\n+        .any(|requested| requested.iter().copied().eq(path.split(\"/\")))\n+}\n+\n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct UnstableBook {\n     target: Interned<String>,\n@@ -200,6 +229,12 @@ impl Step for TheBook {\n \n             invoke_rustdoc(builder, compiler, target, path);\n         }\n+\n+        if is_explicit_request(builder, \"src/doc/book\") {\n+            let out = builder.doc_out(target);\n+            let index = out.join(\"book\").join(\"index.html\");\n+            open(builder, &index);\n+        }\n     }\n }\n \n@@ -338,6 +373,13 @@ impl Step for Standalone {\n             }\n             builder.run(&mut cmd);\n         }\n+\n+        // We open doc/index.html as the default if invoked as `x.py doc --open`\n+        // with no particular explicit doc requested (e.g. src/libcore).\n+        if builder.paths.is_empty() || is_explicit_request(builder, \"src/doc\") {\n+            let index = out.join(\"index.html\");\n+            open(builder, &index);\n+        }\n     }\n }\n \n@@ -418,10 +460,25 @@ impl Step for Std {\n \n             builder.run(&mut cargo.into());\n         };\n-        for krate in &[\"alloc\", \"core\", \"std\", \"proc_macro\", \"test\"] {\n+        let krates = [\"alloc\", \"core\", \"std\", \"proc_macro\", \"test\"];\n+        for krate in &krates {\n             run_cargo_rustdoc_for(krate);\n         }\n         builder.cp_r(&my_out, &out);\n+\n+        // Look for src/libstd, src/libcore etc in the `x.py doc` arguments and\n+        // open the corresponding rendered docs.\n+        for path in builder.paths.iter().map(components_simplified) {\n+            if path.get(0) == Some(&\"src\")\n+                && path.get(1).map_or(false, |dir| dir.starts_with(\"lib\"))\n+            {\n+                let requested_crate = &path[1][3..];\n+                if krates.contains(&requested_crate) {\n+                    let index = out.join(requested_crate).join(\"index.html\");\n+                    open(builder, &index);\n+                }\n+            }\n+        }\n     }\n }\n "}, {"sha": "cfaa43f397095c30a4cf4046f28ca2ac8f2d62d7", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3083ce7ab127dfd1cbb453810579ca827dcfd7bb/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3083ce7ab127dfd1cbb453810579ca827dcfd7bb/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=3083ce7ab127dfd1cbb453810579ca827dcfd7bb", "patch": "@@ -61,6 +61,7 @@ pub enum Subcommand {\n     },\n     Doc {\n         paths: Vec<PathBuf>,\n+        open: bool,\n     },\n     Test {\n         paths: Vec<PathBuf>,\n@@ -248,6 +249,9 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\",\n             \"bench\" => {\n                 opts.optmulti(\"\", \"test-args\", \"extra arguments\", \"ARGS\");\n             }\n+            \"doc\" => {\n+                opts.optflag(\"\", \"open\", \"open the docs in a browser\");\n+            }\n             \"clean\" => {\n                 opts.optflag(\"\", \"all\", \"clean all build artifacts\");\n             }\n@@ -404,6 +408,7 @@ Arguments:\n         ./x.py doc src/doc/book\n         ./x.py doc src/doc/nomicon\n         ./x.py doc src/doc/book src/libstd\n+        ./x.py doc src/libstd --open\n \n     If no arguments are passed then everything is documented:\n \n@@ -479,7 +484,7 @@ Arguments:\n                 },\n             },\n             \"bench\" => Subcommand::Bench { paths, test_args: matches.opt_strs(\"test-args\") },\n-            \"doc\" => Subcommand::Doc { paths },\n+            \"doc\" => Subcommand::Doc { paths, open: matches.opt_present(\"open\") },\n             \"clean\" => {\n                 if !paths.is_empty() {\n                     println!(\"\\nclean does not take a path argument\\n\");\n@@ -613,6 +618,13 @@ impl Subcommand {\n             _ => None,\n         }\n     }\n+\n+    pub fn open(&self) -> bool {\n+        match *self {\n+            Subcommand::Doc { open, .. } => open,\n+            _ => false,\n+        }\n+    }\n }\n \n fn split(s: &[String]) -> Vec<String> {"}]}