{"sha": "26222272080d179b4f0a5ffe057d07d7341de041", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2MjIyMjcyMDgwZDE3OWI0ZjBhNWZmZTA1N2QwN2Q3MzQxZGUwNDE=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-02-01T13:29:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-01T13:29:45Z"}, "message": "Rollup merge of #81598 - sivadeilra:windows_dll_imports_fix_x86, r=m-ou-se\n\nFix calling convention for CRT startup\n\nMy PR #81478 used the wrong calling convention for a set of\nfunctions that are called by the CRT. These functions need to use\n`extern \"C\"`.\n\nThis would only affect x86, which is the only target (that I know of)\nthat has multiple calling conventions.\n\n```@bors``` r? ```@m-ou-se```", "tree": {"sha": "6e456efda320ef70658fd1537e7c52c0ab658e41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e456efda320ef70658fd1537e7c52c0ab658e41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26222272080d179b4f0a5ffe057d07d7341de041", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgGAJKCRBK7hj4Ov3rIwAAdHIIAKqjdXMda9NT9pyJ4hdV2dlR\ntroLS82xsVq+pEb4NNFKZRHhO0i6NyGinWFtzKpBwRBNvObu9HbLfpN4X5XBr1D7\nF7Hx5Y/zADvPm5jYtdCaKJ4bJOXaz33FqPb7/j9+hDaSJKc+XW0LbN0pu5Hnwqdy\nIr+vCKyE5FXU4GnuASCy5hAsmSWsEjLupSuJF8avLDJXqtO0INbMlCtfUUoxtC2i\nt0e0c2S1RguJDOSj5kiydJ03x5z5Qs+DuZMyBPZMZlVrgKj8wDbApOahPlXY6GS6\n3XdxOaRBJOnei7x0kGqg/ha4E1XNC4q6reysCJ9lG12tsuLdSUr6IJPstXz0qhs=\n=PwuL\n-----END PGP SIGNATURE-----\n", "payload": "tree 6e456efda320ef70658fd1537e7c52c0ab658e41\nparent 52907cc23723379db208508b2d79828060f9db2c\nparent 3acd1a4f92013945667f025167cfccdcf6cd73e4\nauthor Jonas Schievink <jonasschievink@gmail.com> 1612186185 +0100\ncommitter GitHub <noreply@github.com> 1612186185 +0100\n\nRollup merge of #81598 - sivadeilra:windows_dll_imports_fix_x86, r=m-ou-se\n\nFix calling convention for CRT startup\n\nMy PR #81478 used the wrong calling convention for a set of\nfunctions that are called by the CRT. These functions need to use\n`extern \"C\"`.\n\nThis would only affect x86, which is the only target (that I know of)\nthat has multiple calling conventions.\n\n```@bors``` r? ```@m-ou-se```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26222272080d179b4f0a5ffe057d07d7341de041", "html_url": "https://github.com/rust-lang/rust/commit/26222272080d179b4f0a5ffe057d07d7341de041", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26222272080d179b4f0a5ffe057d07d7341de041/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52907cc23723379db208508b2d79828060f9db2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/52907cc23723379db208508b2d79828060f9db2c", "html_url": "https://github.com/rust-lang/rust/commit/52907cc23723379db208508b2d79828060f9db2c"}, {"sha": "3acd1a4f92013945667f025167cfccdcf6cd73e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/3acd1a4f92013945667f025167cfccdcf6cd73e4", "html_url": "https://github.com/rust-lang/rust/commit/3acd1a4f92013945667f025167cfccdcf6cd73e4"}], "stats": {"total": 22, "additions": 10, "deletions": 12}, "files": [{"sha": "cbd3366b189ed890a09e6647c5a0d3e5de0aef04", "filename": "library/std/src/sys/windows/compat.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/26222272080d179b4f0a5ffe057d07d7341de041/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fcompat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26222272080d179b4f0a5ffe057d07d7341de041/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fcompat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fcompat.rs?ref=26222272080d179b4f0a5ffe057d07d7341de041", "patch": "@@ -74,26 +74,24 @@ macro_rules! compat_fn {\n             /// used, and would remove it.\n             #[used]\n             #[link_section = \".CRT$XCU\"]\n-            static INIT_TABLE_ENTRY: fn() = init;\n+            static INIT_TABLE_ENTRY: unsafe extern \"C\" fn() = init;\n \n-            fn init() {\n+            unsafe extern \"C\" fn init() {\n                 // There is no locking here. This code is executed before main() is entered, and\n                 // is guaranteed to be single-threaded.\n                 //\n                 // DO NOT do anything interesting or complicated in this function! DO NOT call\n                 // any Rust functions or CRT functions, if those functions touch any global state,\n                 // because this function runs during global initialization. For example, DO NOT\n                 // do any dynamic allocation, don't call LoadLibrary, etc.\n-                unsafe {\n-                    let module_name: *const u8 = concat!($module, \"\\0\").as_ptr();\n-                    let symbol_name: *const u8 = concat!(stringify!($symbol), \"\\0\").as_ptr();\n-                    let module_handle = $crate::sys::c::GetModuleHandleA(module_name as *const i8);\n-                    if !module_handle.is_null() {\n-                        match $crate::sys::c::GetProcAddress(module_handle, symbol_name as *const i8) as usize {\n-                            0 => {}\n-                            n => {\n-                                PTR = Some(mem::transmute::<usize, F>(n));\n-                            }\n+                let module_name: *const u8 = concat!($module, \"\\0\").as_ptr();\n+                let symbol_name: *const u8 = concat!(stringify!($symbol), \"\\0\").as_ptr();\n+                let module_handle = $crate::sys::c::GetModuleHandleA(module_name as *const i8);\n+                if !module_handle.is_null() {\n+                    match $crate::sys::c::GetProcAddress(module_handle, symbol_name as *const i8) as usize {\n+                        0 => {}\n+                        n => {\n+                            PTR = Some(mem::transmute::<usize, F>(n));\n                         }\n                     }\n                 }"}]}