{"sha": "4ad272b282dc28c1366cf0516315f00b13d1621e", "node_id": "C_kwDOAAsO6NoAKDRhZDI3MmIyODJkYzI4YzEzNjZjZjA1MTYzMTVmMDBiMTNkMTYyMWU", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-02-06T20:15:39Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-02-11T20:45:51Z"}, "message": "implement tainted_by_errors in mir borrowck", "tree": {"sha": "57bf74f8c58574ef31e4169a145c41233c75be44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57bf74f8c58574ef31e4169a145c41233c75be44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ad272b282dc28c1366cf0516315f00b13d1621e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ad272b282dc28c1366cf0516315f00b13d1621e", "html_url": "https://github.com/rust-lang/rust/commit/4ad272b282dc28c1366cf0516315f00b13d1621e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ad272b282dc28c1366cf0516315f00b13d1621e/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6499c5e7fc173a3f55b7a3bd1e6a50e9edef782d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6499c5e7fc173a3f55b7a3bd1e6a50e9edef782d", "html_url": "https://github.com/rust-lang/rust/commit/6499c5e7fc173a3f55b7a3bd1e6a50e9edef782d"}], "stats": {"total": 120, "additions": 68, "deletions": 52}, "files": [{"sha": "ac9950241bfe3a7d2b558fcf5791b2266ea82a61", "filename": "compiler/rustc_borrowck/src/diagnostics/bound_region_errors.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4ad272b282dc28c1366cf0516315f00b13d1621e/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad272b282dc28c1366cf0516315f00b13d1621e/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs?ref=4ad272b282dc28c1366cf0516315f00b13d1621e", "patch": "@@ -55,7 +55,7 @@ impl<'tcx> UniverseInfo<'tcx> {\n                     found,\n                     TypeError::RegionsPlaceholderMismatch,\n                 );\n-                err.buffer(&mut mbcx.errors_buffer);\n+                mbcx.buffer_error(err);\n             }\n             UniverseInfoInner::TypeOp(ref type_op_info) => {\n                 type_op_info.report_error(mbcx, placeholder, error_element, cause);\n@@ -64,11 +64,9 @@ impl<'tcx> UniverseInfo<'tcx> {\n                 // FIXME: This error message isn't great, but it doesn't show\n                 // up in the existing UI tests. Consider investigating this\n                 // some more.\n-                mbcx.infcx\n-                    .tcx\n-                    .sess\n-                    .struct_span_err(cause.span, \"higher-ranked subtype error\")\n-                    .buffer(&mut mbcx.errors_buffer);\n+                mbcx.buffer_error(\n+                    mbcx.infcx.tcx.sess.struct_span_err(cause.span, \"higher-ranked subtype error\"),\n+                );\n             }\n         }\n     }\n@@ -149,7 +147,7 @@ trait TypeOpInfo<'tcx> {\n         {\n             adjusted\n         } else {\n-            self.fallback_error(tcx, cause.span).buffer(&mut mbcx.errors_buffer);\n+            mbcx.buffer_error(self.fallback_error(tcx, cause.span));\n             return;\n         };\n \n@@ -178,9 +176,9 @@ trait TypeOpInfo<'tcx> {\n         let nice_error = self.nice_error(tcx, cause, placeholder_region, error_region);\n \n         if let Some(nice_error) = nice_error {\n-            nice_error.buffer(&mut mbcx.errors_buffer);\n+            mbcx.buffer_error(nice_error);\n         } else {\n-            self.fallback_error(tcx, span).buffer(&mut mbcx.errors_buffer);\n+            mbcx.buffer_error(self.fallback_error(tcx, span));\n         }\n     }\n }"}, {"sha": "e32963faa7a4b6828c6e3392974e4dc3bf311a2c", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4ad272b282dc28c1366cf0516315f00b13d1621e/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad272b282dc28c1366cf0516315f00b13d1621e/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=4ad272b282dc28c1366cf0516315f00b13d1621e", "patch": "@@ -77,6 +77,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         if move_out_indices.is_empty() {\n             let root_place = PlaceRef { projection: &[], ..used_place };\n \n+            self.set_tainted_by_errors();\n             if !self.uninitialized_error_reported.insert(root_place) {\n                 debug!(\n                     \"report_use_of_moved_or_uninitialized place: error about {:?} suppressed\",\n@@ -104,7 +105,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 format!(\"{} occurs due to use{}\", desired_action.as_noun(), use_spans.describe()),\n             );\n \n-            err.buffer(&mut self.errors_buffer);\n+            self.buffer_error(err);\n         } else {\n             if let Some((reported_place, _)) = self.move_error_reported.get(&move_out_indices) {\n                 if self.prefixes(*reported_place, PrefixSet::All).any(|p| p == used_place) {\n@@ -216,6 +217,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                                     place_name, partially_str, loop_message\n                                 ),\n                             );\n+                            self.set_tainted_by_errors();\n                             if self.fn_self_span_reported.insert(fn_span) {\n                                 err.span_note(\n                                     // Check whether the source is accessible\n@@ -297,6 +299,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                             }\n                             // Avoid pointing to the same function in multiple different\n                             // error messages.\n+                            self.set_tainted_by_errors();\n                             if span != DUMMY_SP && self.fn_self_span_reported.insert(self_arg.span)\n                             {\n                                 err.span_note(\n@@ -449,6 +452,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 }\n             }\n \n+            self.set_tainted_by_errors();\n             if let Some((_, mut old_err)) =\n                 self.move_error_reported.insert(move_out_indices, (used_place, err))\n             {\n@@ -503,7 +507,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 Some(borrow_span),\n                 None,\n             );\n-        err.buffer(&mut self.errors_buffer);\n+        self.buffer_error(err);\n     }\n \n     pub(crate) fn report_use_while_mutably_borrowed(\n@@ -1012,6 +1016,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             return;\n         }\n \n+        self.set_tainted_by_errors();\n         self.access_place_error_reported.insert((\n             Place { local: root_place.local, projection: root_place_projection },\n             borrow_span,\n@@ -1021,7 +1026,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         if self.body.local_decls[borrowed_local].is_ref_to_thread_local() {\n             let err =\n                 self.report_thread_local_value_does_not_live_long_enough(drop_span, borrow_span);\n-            err.buffer(&mut self.errors_buffer);\n+            self.buffer_error(err);\n             return;\n         }\n \n@@ -1113,7 +1118,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             ),\n         };\n \n-        err.buffer(&mut self.errors_buffer);\n+        self.buffer_error(err);\n     }\n \n     fn report_local_value_does_not_live_long_enough(\n@@ -1295,7 +1300,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             None,\n         );\n \n-        err.buffer(&mut self.errors_buffer);\n+        self.buffer_error(err);\n     }\n \n     fn report_thread_local_value_does_not_live_long_enough(\n@@ -1810,7 +1815,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     loan.kind.describe_mutability(),\n                 );\n \n-                err.buffer(&mut self.errors_buffer);\n+                self.buffer_error(err);\n \n                 return;\n             }\n@@ -1836,7 +1841,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n         self.explain_deref_coercion(loan, &mut err);\n \n-        err.buffer(&mut self.errors_buffer);\n+        self.buffer_error(err);\n     }\n \n     fn explain_deref_coercion(&mut self, loan: &BorrowData<'tcx>, err: &mut DiagnosticBuilder<'_>) {\n@@ -1938,7 +1943,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             }\n         }\n         err.span_label(span, msg);\n-        err.buffer(&mut self.errors_buffer);\n+        self.buffer_error(err);\n     }\n \n     fn classify_drop_access_kind(&self, place: PlaceRef<'tcx>) -> StorageDeadOrDrop<'tcx> {"}, {"sha": "2934d921868a8ec76c96d8d0508c6d934fa3a2b0", "filename": "compiler/rustc_borrowck/src/diagnostics/move_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ad272b282dc28c1366cf0516315f00b13d1621e/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad272b282dc28c1366cf0516315f00b13d1621e/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs?ref=4ad272b282dc28c1366cf0516315f00b13d1621e", "patch": "@@ -264,7 +264,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         };\n \n         self.add_move_hints(error, &mut err, err_span);\n-        err.buffer(&mut self.errors_buffer);\n+        self.buffer_error(err);\n     }\n \n     fn report_cannot_move_from_static("}, {"sha": "5963904aa0b514e1f6b9fffb55833fd1fdd2b41e", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ad272b282dc28c1366cf0516315f00b13d1621e/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad272b282dc28c1366cf0516315f00b13d1621e/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=4ad272b282dc28c1366cf0516315f00b13d1621e", "patch": "@@ -626,7 +626,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             }\n         }\n \n-        err.buffer(&mut self.errors_buffer);\n+        self.buffer_error(err);\n     }\n \n     /// User cannot make signature of a trait mutable without changing the"}, {"sha": "21f00af5c0cef1bd3efecde471d2fbd20fc23a4b", "filename": "compiler/rustc_borrowck/src/diagnostics/outlives_suggestion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ad272b282dc28c1366cf0516315f00b13d1621e/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Foutlives_suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad272b282dc28c1366cf0516315f00b13d1621e/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Foutlives_suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Foutlives_suggestion.rs?ref=4ad272b282dc28c1366cf0516315f00b13d1621e", "patch": "@@ -256,6 +256,6 @@ impl OutlivesSuggestionBuilder {\n         diag.sort_span = mir_span.shrink_to_hi();\n \n         // Buffer the diagnostic\n-        diag.buffer(&mut mbcx.errors_buffer);\n+        mbcx.buffer_error(diag);\n     }\n }"}, {"sha": "31c977cc78d3a9a77e990c8ce8e07b1c79c92b24", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 14, "deletions": 21, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4ad272b282dc28c1366cf0516315f00b13d1621e/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad272b282dc28c1366cf0516315f00b13d1621e/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=4ad272b282dc28c1366cf0516315f00b13d1621e", "patch": "@@ -168,14 +168,12 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     let type_test_span = type_test.locations.span(&self.body);\n \n                     if let Some(lower_bound_region) = lower_bound_region {\n-                        self.infcx\n-                            .construct_generic_bound_failure(\n-                                type_test_span,\n-                                None,\n-                                type_test.generic_kind,\n-                                lower_bound_region,\n-                            )\n-                            .buffer(&mut self.errors_buffer);\n+                        self.buffer_error(self.infcx.construct_generic_bound_failure(\n+                            type_test_span,\n+                            None,\n+                            type_test.generic_kind,\n+                            lower_bound_region,\n+                        ));\n                     } else {\n                         // FIXME. We should handle this case better. It\n                         // indicates that we have e.g., some region variable\n@@ -186,27 +184,22 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                         // to report it; we could probably handle it by\n                         // iterating over the universal regions and reporting\n                         // an error that multiple bounds are required.\n-                        self.infcx\n-                            .tcx\n-                            .sess\n-                            .struct_span_err(\n-                                type_test_span,\n-                                &format!(\"`{}` does not live long enough\", type_test.generic_kind),\n-                            )\n-                            .buffer(&mut self.errors_buffer);\n+                        self.buffer_error(self.infcx.tcx.sess.struct_span_err(\n+                            type_test_span,\n+                            &format!(\"`{}` does not live long enough\", type_test.generic_kind),\n+                        ));\n                     }\n                 }\n \n                 RegionErrorKind::UnexpectedHiddenRegion { span, hidden_ty, member_region } => {\n                     let named_ty = self.regioncx.name_regions(self.infcx.tcx, hidden_ty);\n                     let named_region = self.regioncx.name_regions(self.infcx.tcx, member_region);\n-                    unexpected_hidden_region_diagnostic(\n+                    self.buffer_error(unexpected_hidden_region_diagnostic(\n                         self.infcx.tcx,\n                         span,\n                         named_ty,\n                         named_region,\n-                    )\n-                    .buffer(&mut self.errors_buffer);\n+                    ));\n                 }\n \n                 RegionErrorKind::BoundUniversalRegionError {\n@@ -285,7 +278,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         if let (Some(f), Some(o)) = (self.to_error_region(fr), self.to_error_region(outlived_fr)) {\n             let nice = NiceRegionError::new_from_span(self.infcx, cause.span, o, f);\n             if let Some(diag) = nice.try_report_from_nll() {\n-                diag.buffer(&mut self.errors_buffer);\n+                self.buffer_error(diag);\n                 return;\n             }\n         }\n@@ -375,7 +368,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             }\n         }\n \n-        diag.buffer(&mut self.errors_buffer);\n+        self.buffer_error(diag);\n     }\n \n     /// Report a specialized error when `FnMut` closures return a reference to a captured variable."}, {"sha": "4368a894f219eff2503b92e464b2bd84a95b7dcc", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 29, "deletions": 11, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4ad272b282dc28c1366cf0516315f00b13d1621e/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad272b282dc28c1366cf0516315f00b13d1621e/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=4ad272b282dc28c1366cf0516315f00b13d1621e", "patch": "@@ -313,6 +313,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n                 move_error_reported: BTreeMap::new(),\n                 uninitialized_error_reported: Default::default(),\n                 errors_buffer,\n+                tainted_by_errors: false,\n                 regioncx: regioncx.clone(),\n                 used_mut: Default::default(),\n                 used_mut_upvars: SmallVec::new(),\n@@ -346,6 +347,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n         move_error_reported: BTreeMap::new(),\n         uninitialized_error_reported: Default::default(),\n         errors_buffer,\n+        tainted_by_errors: false,\n         regioncx: Rc::clone(&regioncx),\n         used_mut: Default::default(),\n         used_mut_upvars: SmallVec::new(),\n@@ -398,7 +400,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n                 diag.message = initial_diag.styled_message().clone();\n                 diag.span = initial_diag.span.clone();\n \n-                diag.buffer(&mut mbcx.errors_buffer);\n+                mbcx.buffer_error(diag);\n             },\n         );\n         initial_diag.cancel();\n@@ -423,7 +425,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n     mbcx.gather_used_muts(temporary_used_locals, unused_mut_locals);\n \n     debug!(\"mbcx.used_mut: {:?}\", mbcx.used_mut);\n-    let used_mut = mbcx.used_mut;\n+    let used_mut = std::mem::take(&mut mbcx.used_mut);\n     for local in mbcx.body.mut_vars_and_args_iter().filter(|local| !used_mut.contains(local)) {\n         let local_decl = &mbcx.body.local_decls[local];\n         let lint_root = match &mbcx.body.source_scopes[local_decl.source_info.scope].local_data {\n@@ -461,8 +463,8 @@ fn do_mir_borrowck<'a, 'tcx>(\n     }\n \n     // Buffer any move errors that we collected and de-duplicated.\n-    for (_, (_, diag)) in mbcx.move_error_reported {\n-        diag.buffer(&mut mbcx.errors_buffer);\n+    for (_, (_, diag)) in std::mem::take(&mut mbcx.move_error_reported) {\n+        mbcx.buffer_error(diag);\n     }\n \n     if !mbcx.errors_buffer.is_empty() {\n@@ -477,6 +479,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n         concrete_opaque_types: opaque_type_values,\n         closure_requirements: opt_closure_req,\n         used_mut_upvars: mbcx.used_mut_upvars,\n+        tainted_by_errors: mbcx.tainted_by_errors,\n     };\n \n     let body_with_facts = if return_body_with_facts {\n@@ -573,6 +576,8 @@ struct MirBorrowckCtxt<'cx, 'tcx> {\n     uninitialized_error_reported: FxHashSet<PlaceRef<'tcx>>,\n     /// Errors to be reported buffer\n     errors_buffer: Vec<Diagnostic>,\n+    /// Set to true if we emit an error during borrowck\n+    tainted_by_errors: bool,\n     /// This field keeps track of all the local variables that are declared mut and are mutated.\n     /// Used for the warning issued by an unused mutable local variable.\n     used_mut: FxHashSet<Local>,\n@@ -1028,6 +1033,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         if conflict_error || mutability_error {\n             debug!(\"access_place: logging error place_span=`{:?}` kind=`{:?}`\", place_span, kind);\n \n+            self.set_tainted_by_errors();\n             self.access_place_error_reported.insert((place_span.0, place_span.1));\n         }\n     }\n@@ -1107,12 +1113,14 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     error_reported = true;\n                     match kind {\n                         ReadKind::Copy => {\n-                            this.report_use_while_mutably_borrowed(location, place_span, borrow)\n-                                .buffer(&mut this.errors_buffer);\n+                            let err = this\n+                                .report_use_while_mutably_borrowed(location, place_span, borrow);\n+                            this.buffer_error(err);\n                         }\n                         ReadKind::Borrow(bk) => {\n-                            this.report_conflicting_borrow(location, place_span, bk, borrow)\n-                                .buffer(&mut this.errors_buffer);\n+                            let err =\n+                                this.report_conflicting_borrow(location, place_span, bk, borrow);\n+                            this.buffer_error(err);\n                         }\n                     }\n                     Control::Break\n@@ -1162,8 +1170,9 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     error_reported = true;\n                     match kind {\n                         WriteKind::MutableBorrow(bk) => {\n-                            this.report_conflicting_borrow(location, place_span, bk, borrow)\n-                                .buffer(&mut this.errors_buffer);\n+                            let err =\n+                                this.report_conflicting_borrow(location, place_span, bk, borrow);\n+                            this.buffer_error(err);\n                         }\n                         WriteKind::StorageDeadOrDrop => this\n                             .report_borrowed_value_does_not_live_long_enough(\n@@ -1570,7 +1579,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 yield_span,\n             );\n \n-            err.buffer(&mut self.errors_buffer);\n+            self.buffer_error(err);\n         }\n     }\n \n@@ -2299,6 +2308,15 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     fn is_upvar_field_projection(&self, place_ref: PlaceRef<'tcx>) -> Option<Field> {\n         path_utils::is_upvar_field_projection(self.infcx.tcx, &self.upvars, place_ref, self.body())\n     }\n+\n+    pub fn buffer_error(&mut self, t: DiagnosticBuilder<'_>) {\n+        self.tainted_by_errors = true;\n+        t.buffer(&mut self.errors_buffer);\n+    }\n+\n+    pub fn set_tainted_by_errors(&mut self) {\n+        self.tainted_by_errors = true;\n+    }\n }\n \n /// The degree of overlap between 2 places for borrow-checking."}, {"sha": "ac505a6071ded05d27c6d0a22f66400facf26bd0", "filename": "compiler/rustc_borrowck/src/nll.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ad272b282dc28c1366cf0516315f00b13d1621e/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad272b282dc28c1366cf0516315f00b13d1621e/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs?ref=4ad272b282dc28c1366cf0516315f00b13d1621e", "patch": "@@ -418,6 +418,7 @@ pub(super) fn dump_annotation<'a, 'tcx>(\n         err.note(&format!(\"Inferred opaque type values:\\n{:#?}\", opaque_type_values));\n     }\n \n+    // FIXME(compiler-errors): Maybe we need to set tainted here\n     err.buffer(errors_buffer);\n }\n "}, {"sha": "b1aad01118ad4acad7de0dea2a5b548cfc5f0323", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ad272b282dc28c1366cf0516315f00b13d1621e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad272b282dc28c1366cf0516315f00b13d1621e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=4ad272b282dc28c1366cf0516315f00b13d1621e", "patch": "@@ -214,6 +214,7 @@ pub struct BorrowCheckResult<'tcx> {\n     pub concrete_opaque_types: VecMap<OpaqueTypeKey<'tcx>, Ty<'tcx>>,\n     pub closure_requirements: Option<ClosureRegionRequirements<'tcx>>,\n     pub used_mut_upvars: SmallVec<[Field; 8]>,\n+    pub tainted_by_errors: bool,\n }\n \n /// The result of the `mir_const_qualif` query."}]}