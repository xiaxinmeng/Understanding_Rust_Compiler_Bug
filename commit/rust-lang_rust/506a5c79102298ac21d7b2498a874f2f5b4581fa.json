{"sha": "506a5c79102298ac21d7b2498a874f2f5b4581fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwNmE1Yzc5MTAyMjk4YWMyMWQ3YjI0OThhODc0ZjJmNWI0NTgxZmE=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-08-29T10:24:23Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-08-29T10:26:20Z"}, "message": "Mir optimizations treat single variant enums as structs", "tree": {"sha": "29ee448ac8b20bc4a026a875778fc2d7bf1e438b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29ee448ac8b20bc4a026a875778fc2d7bf1e438b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/506a5c79102298ac21d7b2498a874f2f5b4581fa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlmlQUwACgkQpp+NIls6\n19mhzw//W0zaA5k4CAPj5SongCjilCWF7HamxgToyDdKzSec3L/F6kRqSko5DuUc\neKrcxwxOZLSqPnbw8HKyj1b1akbZru3wjzpqfPRtgk2yUnorLO3endmHbJVSq880\naDPU8Ukyv42ap0o9cweAXjryky3A/rcATQBf8bHIBdUdxcRPEa3jPqvvqUUpsW4n\nnJyOYRr9Foo1Witfjl6bMYyheJeqp+2pvxyTXWKHLGReeuaIhsQFhdbVxbgZy/pV\nF7LX3bW9gby46QFDTWyTcGO9UP6bAGn5BiY3GgKvRkXsvbNfGl9DTdH37lFlUXA3\nkunEy86leDxwvTX5PqwRx5u3J5sW7X+sTBdFvD0/I+gzj2twaQRe9CT1n7CFC9SU\nEbvl7iUGTSbj6cCjO1ahhRhHgx8F+M5JiBCrCyY1PDGYWaZMMCf8956wsTiOB4Pn\nXQs2J8SYZOa7cQ9IFaUz6ICp/xdW3meBBHP33SMjJUAeNBCOCaI4u47nZcyIFYkJ\nE/b+pMjfU1dpSVEghHmQfLfYVEuQPRs32Alh7d9hNH0ve7e0sioIVC99AW4XZpcv\nbJ0GwK7ewhWcN8lvVuTBpIRXY1tIa28PKssKMHqF1/yXp1kDdZ7wVjNr3lja6S5j\nhHm1rQpHaXhccKDfT5H3NOu/9yiaVE/Vzz2Op7cri68DVDQ+sMg=\n=QYjD\n-----END PGP SIGNATURE-----", "payload": "tree 29ee448ac8b20bc4a026a875778fc2d7bf1e438b\nparent 941fbf5ed27976ab761801a46734c147dd885635\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1504002263 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1504002380 +0200\n\nMir optimizations treat single variant enums as structs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/506a5c79102298ac21d7b2498a874f2f5b4581fa", "html_url": "https://github.com/rust-lang/rust/commit/506a5c79102298ac21d7b2498a874f2f5b4581fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/506a5c79102298ac21d7b2498a874f2f5b4581fa/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "941fbf5ed27976ab761801a46734c147dd885635", "url": "https://api.github.com/repos/rust-lang/rust/commits/941fbf5ed27976ab761801a46734c147dd885635", "html_url": "https://github.com/rust-lang/rust/commit/941fbf5ed27976ab761801a46734c147dd885635"}], "stats": {"total": 32, "additions": 32, "deletions": 0}, "files": [{"sha": "b123ad7fd0b65bcbe8d91a13fb3de1816b07d0aa", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/506a5c79102298ac21d7b2498a874f2f5b4581fa/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/506a5c79102298ac21d7b2498a874f2f5b4581fa/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=506a5c79102298ac21d7b2498a874f2f5b4581fa", "patch": "@@ -1138,6 +1138,11 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n                             packed: nonnull.packed,\n                         })\n                     }\n+                    // mir optimizations treat single variant enums as structs\n+                    General { .. } if adt_def.variants.len() == 1 => Ok(TyAndPacked {\n+                        ty: adt_def.variants[0].fields[field_index].ty(self.tcx, substs),\n+                        packed: false,\n+                    }),\n                     _ => {\n                         err!(Unimplemented(format!(\n                             \"get_field_ty can't handle enum type: {:?}, {:?}\",\n@@ -1211,6 +1216,8 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n             }\n             StructWrappedNullablePointer { ref nonnull, .. } => Ok(nonnull.offsets[field_index]),\n             UntaggedUnion { .. } => Ok(Size::from_bytes(0)),\n+            // mir optimizations treat single variant enums as structs\n+            General { ref variants, .. } if variants.len() == 1 => Ok(variants[0].offsets[field_index]),\n             _ => {\n                 let msg = format!(\n                     \"get_field_offset: can't handle type: {:?}, with layout: {:?}\","}, {"sha": "f26f5adfff9652d56ac9183607ea01b61501ea68", "filename": "src/librustc_mir/interpret/lvalue.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/506a5c79102298ac21d7b2498a874f2f5b4581fa/src%2Flibrustc_mir%2Finterpret%2Flvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/506a5c79102298ac21d7b2498a874f2f5b4581fa/src%2Flibrustc_mir%2Finterpret%2Flvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Flvalue.rs?ref=506a5c79102298ac21d7b2498a874f2f5b4581fa", "patch": "@@ -227,6 +227,11 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n         let (offset, packed) = match *base_layout {\n             Univariant { ref variant, .. } => (variant.offsets[field_index], variant.packed),\n \n+            // mir optimizations treat single variant enums as structs\n+            General { ref variants, .. } if variants.len() == 1 => {\n+                (variants[0].offsets[field_index], variants[0].packed)\n+            }\n+\n             General { ref variants, .. } => {\n                 let (_, base_extra) = base.to_ptr_extra_aligned();\n                 if let LvalueExtra::DowncastVariant(variant_idx) = base_extra {"}, {"sha": "7d804156576553419f09fe556c5f11c736939fe4", "filename": "tests/run-pass/issue-34571.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/506a5c79102298ac21d7b2498a874f2f5b4581fa/tests%2Frun-pass%2Fissue-34571.rs", "raw_url": "https://github.com/rust-lang/rust/raw/506a5c79102298ac21d7b2498a874f2f5b4581fa/tests%2Frun-pass%2Fissue-34571.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissue-34571.rs?ref=506a5c79102298ac21d7b2498a874f2f5b4581fa", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[repr(u8)]\n+enum Foo {\n+    Foo(u8),\n+}\n+\n+fn main() {\n+    match Foo::Foo(1) {\n+        _ => ()\n+    }\n+}"}]}