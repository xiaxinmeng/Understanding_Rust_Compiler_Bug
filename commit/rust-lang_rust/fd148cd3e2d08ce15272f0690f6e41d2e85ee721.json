{"sha": "fd148cd3e2d08ce15272f0690f6e41d2e85ee721", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkMTQ4Y2QzZTJkMDhjZTE1MjcyZjA2OTBmNmU0MWQyZTg1ZWU3MjE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-06-14T05:43:20Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-06-14T06:18:49Z"}, "message": "std::rt: Change the Task constructors to reflect a tree", "tree": {"sha": "80aa3c6252d68a5bf40117d4753e323a13695386", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80aa3c6252d68a5bf40117d4753e323a13695386"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd148cd3e2d08ce15272f0690f6e41d2e85ee721", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd148cd3e2d08ce15272f0690f6e41d2e85ee721", "html_url": "https://github.com/rust-lang/rust/commit/fd148cd3e2d08ce15272f0690f6e41d2e85ee721", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd148cd3e2d08ce15272f0690f6e41d2e85ee721/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abc3a8aa1e76f3ecc3930e20453a52681843cec0", "url": "https://api.github.com/repos/rust-lang/rust/commits/abc3a8aa1e76f3ecc3930e20453a52681843cec0", "html_url": "https://github.com/rust-lang/rust/commit/abc3a8aa1e76f3ecc3930e20453a52681843cec0"}], "stats": {"total": 107, "additions": 81, "deletions": 26}, "files": [{"sha": "a65b07fdbcf25b841aafb98e5a3ea3eb054842ea", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd148cd3e2d08ce15272f0690f6e41d2e85ee721/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd148cd3e2d08ce15272f0690f6e41d2e85ee721/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=fd148cd3e2d08ce15272f0690f6e41d2e85ee721", "patch": "@@ -167,7 +167,7 @@ pub fn start(_argc: int, _argv: **u8, crate_map: *u8, main: ~fn()) -> int {\n     let sleepers = SleeperList::new();\n     let mut sched = ~Scheduler::new(loop_, work_queue, sleepers);\n     sched.no_sleep = true;\n-    let main_task = ~Coroutine::new(&mut sched.stack_pool, main);\n+    let main_task = ~Coroutine::new_root(&mut sched.stack_pool, main);\n \n     sched.enqueue_task(main_task);\n     sched.run();\n@@ -241,7 +241,7 @@ fn test_context() {\n     do run_in_bare_thread {\n         assert_eq!(context(), GlobalContext);\n         let mut sched = ~new_test_uv_sched();\n-        let task = ~do Coroutine::new(&mut sched.stack_pool) {\n+        let task = ~do Coroutine::new_root(&mut sched.stack_pool) {\n             assert_eq!(context(), TaskContext);\n             let sched = Local::take::<Scheduler>();\n             do sched.deschedule_running_task_and_then() |sched, task| {"}, {"sha": "9abcc2ec3cc9233ef65406f8f9dd3ac28bf6dc47", "filename": "src/libstd/rt/sched.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/fd148cd3e2d08ce15272f0690f6e41d2e85ee721/src%2Flibstd%2Frt%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd148cd3e2d08ce15272f0690f6e41d2e85ee721/src%2Flibstd%2Frt%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fsched.rs?ref=fd148cd3e2d08ce15272f0690f6e41d2e85ee721", "patch": "@@ -518,8 +518,8 @@ impl SchedHandle {\n }\n \n pub impl Coroutine {\n-    fn new(stack_pool: &mut StackPool, start: ~fn()) -> Coroutine {\n-        Coroutine::with_task(stack_pool, ~Task::new(), start)\n+    fn new_root(stack_pool: &mut StackPool, start: ~fn()) -> Coroutine {\n+        Coroutine::with_task(stack_pool, ~Task::new_root(), start)\n     }\n \n     fn with_task(stack_pool: &mut StackPool,\n@@ -614,7 +614,7 @@ mod test {\n             let task_ran_ptr: *mut bool = &mut task_ran;\n \n             let mut sched = ~new_test_uv_sched();\n-            let task = ~do Coroutine::new(&mut sched.stack_pool) {\n+            let task = ~do Coroutine::new_root(&mut sched.stack_pool) {\n                 unsafe { *task_ran_ptr = true; }\n             };\n             sched.enqueue_task(task);\n@@ -632,7 +632,7 @@ mod test {\n \n             let mut sched = ~new_test_uv_sched();\n             for int::range(0, total) |_| {\n-                let task = ~do Coroutine::new(&mut sched.stack_pool) {\n+                let task = ~do Coroutine::new_root(&mut sched.stack_pool) {\n                     unsafe { *task_count_ptr = *task_count_ptr + 1; }\n                 };\n                 sched.enqueue_task(task);\n@@ -649,10 +649,10 @@ mod test {\n             let count_ptr: *mut int = &mut count;\n \n             let mut sched = ~new_test_uv_sched();\n-            let task1 = ~do Coroutine::new(&mut sched.stack_pool) {\n+            let task1 = ~do Coroutine::new_root(&mut sched.stack_pool) {\n                 unsafe { *count_ptr = *count_ptr + 1; }\n                 let mut sched = Local::take::<Scheduler>();\n-                let task2 = ~do Coroutine::new(&mut sched.stack_pool) {\n+                let task2 = ~do Coroutine::new_root(&mut sched.stack_pool) {\n                     unsafe { *count_ptr = *count_ptr + 1; }\n                 };\n                 // Context switch directly to the new task\n@@ -677,7 +677,7 @@ mod test {\n \n             let mut sched = ~new_test_uv_sched();\n \n-            let start_task = ~do Coroutine::new(&mut sched.stack_pool) {\n+            let start_task = ~do Coroutine::new_root(&mut sched.stack_pool) {\n                 run_task(count_ptr);\n             };\n             sched.enqueue_task(start_task);\n@@ -687,7 +687,7 @@ mod test {\n \n             fn run_task(count_ptr: *mut int) {\n                 do Local::borrow::<Scheduler> |sched| {\n-                    let task = ~do Coroutine::new(&mut sched.stack_pool) {\n+                    let task = ~do Coroutine::new_root(&mut sched.stack_pool) {\n                         unsafe {\n                             *count_ptr = *count_ptr + 1;\n                             if *count_ptr != MAX {\n@@ -705,7 +705,7 @@ mod test {\n     fn test_block_task() {\n         do run_in_bare_thread {\n             let mut sched = ~new_test_uv_sched();\n-            let task = ~do Coroutine::new(&mut sched.stack_pool) {\n+            let task = ~do Coroutine::new_root(&mut sched.stack_pool) {\n                 let sched = Local::take::<Scheduler>();\n                 assert!(sched.in_task_context());\n                 do sched.deschedule_running_task_and_then() |sched, task| {\n@@ -752,13 +752,13 @@ mod test {\n             let mut sched1 = ~new_test_uv_sched();\n             let handle1 = sched1.make_handle();\n             let handle1_cell = Cell(handle1);\n-            let task1 = ~do Coroutine::new(&mut sched1.stack_pool) {\n+            let task1 = ~do Coroutine::new_root(&mut sched1.stack_pool) {\n                 chan_cell.take().send(());\n             };\n             sched1.enqueue_task(task1);\n \n             let mut sched2 = ~new_test_uv_sched();\n-            let task2 = ~do Coroutine::new(&mut sched2.stack_pool) {\n+            let task2 = ~do Coroutine::new_root(&mut sched2.stack_pool) {\n                 port_cell.take().recv();\n                 // Release the other scheduler's handle so it can exit\n                 handle1_cell.take();"}, {"sha": "10b4672df05b30b58569ddb2bf9a5a42216a4ead", "filename": "src/libstd/rt/task.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fd148cd3e2d08ce15272f0690f6e41d2e85ee721/src%2Flibstd%2Frt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd148cd3e2d08ce15272f0690f6e41d2e85ee721/src%2Flibstd%2Frt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftask.rs?ref=fd148cd3e2d08ce15272f0690f6e41d2e85ee721", "patch": "@@ -37,7 +37,7 @@ pub struct Unwinder {\n }\n \n impl Task {\n-    pub fn new() -> Task {\n+    pub fn new_root() -> Task {\n         Task {\n             heap: LocalHeap::new(),\n             gc: GarbageCollector,\n@@ -48,7 +48,29 @@ impl Task {\n         }\n     }\n \n-    pub fn without_unwinding() -> Task {\n+    pub fn new_root_without_unwinding() -> Task {\n+        Task {\n+            heap: LocalHeap::new(),\n+            gc: GarbageCollector,\n+            storage: LocalStorage(ptr::null(), None),\n+            logger: StdErrLogger,\n+            unwinder: None,\n+            destroyed: false\n+        }\n+    }\n+\n+    pub fn new_child(&mut self) -> Task {\n+        Task {\n+            heap: LocalHeap::new(),\n+            gc: GarbageCollector,\n+            storage: LocalStorage(ptr::null(), None),\n+            logger: StdErrLogger,\n+            unwinder: Some(Unwinder { unwinding: false }),\n+            destroyed: false\n+        }\n+    }\n+\n+    pub fn new_child_without_unwinding(&mut self) -> Task {\n         Task {\n             heap: LocalHeap::new(),\n             gc: GarbageCollector,"}, {"sha": "4a4d498a26e75b70db80c825e7116ddc1d70e06e", "filename": "src/libstd/rt/test.rs", "status": "modified", "additions": 36, "deletions": 10, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/fd148cd3e2d08ce15272f0690f6e41d2e85ee721/src%2Flibstd%2Frt%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd148cd3e2d08ce15272f0690f6e41d2e85ee721/src%2Flibstd%2Frt%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftest.rs?ref=fd148cd3e2d08ce15272f0690f6e41d2e85ee721", "patch": "@@ -48,7 +48,7 @@ pub fn run_in_newsched_task(f: ~fn()) {\n     do run_in_bare_thread {\n         let mut sched = ~new_test_uv_sched();\n         let task = ~Coroutine::with_task(&mut sched.stack_pool,\n-                                         ~Task::without_unwinding(),\n+                                         ~Task::new_root_without_unwinding(),\n                                          f.take());\n         sched.enqueue_task(task);\n         sched.run();\n@@ -94,7 +94,7 @@ pub fn run_in_mt_newsched_task(f: ~fn()) {\n \n         let f_cell = Cell(f_cell.take());\n         let handles = Cell(handles);\n-        let main_task = ~do Coroutine::new(&mut scheds[0].stack_pool) {\n+        let main_task = ~do Coroutine::new_root(&mut scheds[0].stack_pool) {\n             f_cell.take()();\n \n             let mut handles = handles.take();\n@@ -132,9 +132,14 @@ pub fn run_in_mt_newsched_task(f: ~fn()) {\n pub fn spawntask(f: ~fn()) {\n     use super::sched::*;\n \n+    let mut task = None;\n+    do Local::borrow::<Task>() |running_task| {\n+        task = Some(~running_task.new_child_without_unwinding());\n+    }\n+\n     let mut sched = Local::take::<Scheduler>();\n     let task = ~Coroutine::with_task(&mut sched.stack_pool,\n-                                     ~Task::without_unwinding(),\n+                                     task.swap_unwrap(),\n                                      f);\n     sched.schedule_new_task(task);\n }\n@@ -143,9 +148,14 @@ pub fn spawntask(f: ~fn()) {\n pub fn spawntask_immediately(f: ~fn()) {\n     use super::sched::*;\n \n+    let mut task = None;\n+    do Local::borrow::<Task>() |running_task| {\n+        task = Some(~running_task.new_child_without_unwinding());\n+    }\n+\n     let mut sched = Local::take::<Scheduler>();\n     let task = ~Coroutine::with_task(&mut sched.stack_pool,\n-                                     ~Task::without_unwinding(),\n+                                     task.swap_unwrap(),\n                                      f);\n     do sched.switch_running_tasks_and_then(task) |sched, task| {\n         sched.enqueue_task(task);\n@@ -156,9 +166,14 @@ pub fn spawntask_immediately(f: ~fn()) {\n pub fn spawntask_later(f: ~fn()) {\n     use super::sched::*;\n \n+    let mut task = None;\n+    do Local::borrow::<Task>() |running_task| {\n+        task = Some(~running_task.new_child_without_unwinding());\n+    }\n+\n     let mut sched = Local::take::<Scheduler>();\n     let task = ~Coroutine::with_task(&mut sched.stack_pool,\n-                                     ~Task::without_unwinding(),\n+                                     task.swap_unwrap(),\n                                      f);\n \n     sched.enqueue_task(task);\n@@ -170,14 +185,19 @@ pub fn spawntask_random(f: ~fn()) {\n     use super::sched::*;\n     use rand::{Rand, rng};\n \n-    let mut rng = rng();\n-    let run_now: bool = Rand::rand(&mut rng);\n+    let mut task = None;\n+    do Local::borrow::<Task>() |running_task| {\n+        task = Some(~running_task.new_child_without_unwinding());\n+    }\n \n     let mut sched = Local::take::<Scheduler>();\n     let task = ~Coroutine::with_task(&mut sched.stack_pool,\n-                                     ~Task::without_unwinding(),\n+                                     task.swap_unwrap(),\n                                      f);\n \n+    let mut rng = rng();\n+    let run_now: bool = Rand::rand(&mut rng);\n+\n     if run_now {\n         do sched.switch_running_tasks_and_then(task) |sched, task| {\n             sched.enqueue_task(task);\n@@ -206,7 +226,7 @@ pub fn spawntask_try(f: ~fn()) -> Result<(), ()> {\n     do sched.deschedule_running_task_and_then() |sched, old_task| {\n         let old_task = Cell(old_task);\n         let f = f.take();\n-        let new_task = ~do Coroutine::new(&mut sched.stack_pool) {\n+        let new_task = ~do Coroutine::new_root(&mut sched.stack_pool) {\n             do (|| {\n                 (f.take())()\n             }).finally {\n@@ -229,11 +249,17 @@ pub fn spawntask_try(f: ~fn()) -> Result<(), ()> {\n pub fn spawntask_thread(f: ~fn()) -> Thread {\n     use rt::sched::*;\n \n+    let mut task = None;\n+    do Local::borrow::<Task>() |running_task| {\n+        task = Some(~running_task.new_child_without_unwinding());\n+    }\n+\n+    let task = Cell(task.swap_unwrap());\n     let f = Cell(f);\n     let thread = do Thread::start {\n         let mut sched = ~new_test_uv_sched();\n         let task = ~Coroutine::with_task(&mut sched.stack_pool,\n-                                         ~Task::without_unwinding(),\n+                                         task.take(),\n                                          f.take());\n         sched.enqueue_task(task);\n         sched.run();"}, {"sha": "a4fbec11d7233c40532d372b3a56146cab9ea430", "filename": "src/libstd/task/spawn.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fd148cd3e2d08ce15272f0690f6e41d2e85ee721/src%2Flibstd%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd148cd3e2d08ce15272f0690f6e41d2e85ee721/src%2Flibstd%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fspawn.rs?ref=fd148cd3e2d08ce15272f0690f6e41d2e85ee721", "patch": "@@ -91,6 +91,7 @@ use uint;\n use util;\n use unstable::sync::{Exclusive, exclusive};\n use rt::local::Local;\n+use rt::task::Task;\n \n #[cfg(test)] use task::default_task_opts;\n \n@@ -576,8 +577,14 @@ pub fn spawn_raw(opts: TaskOpts, f: ~fn()) {\n fn spawn_raw_newsched(_opts: TaskOpts, f: ~fn()) {\n     use rt::sched::*;\n \n+    let mut task = None;\n+    do Local::borrow::<Task>() |running_task| {\n+        task = Some(~running_task.new_child_without_unwinding());\n+    }\n+\n     let mut sched = Local::take::<Scheduler>();\n-    let task = ~Coroutine::new(&mut sched.stack_pool, f);\n+    let task = ~Coroutine::with_task(&mut sched.stack_pool,\n+                                     task.swap_unwrap(), f);\n     sched.schedule_new_task(task);\n }\n "}]}