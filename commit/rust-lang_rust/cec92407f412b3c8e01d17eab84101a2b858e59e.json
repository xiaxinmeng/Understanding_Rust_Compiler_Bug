{"sha": "cec92407f412b3c8e01d17eab84101a2b858e59e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlYzkyNDA3ZjQxMmIzYzhlMDFkMTdlYWI4NDEwMWEyYjg1OGU1OWU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-30T20:12:27Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-30T20:12:27Z"}, "message": "Don't crash on empty out_dirs with older cargos\n\ncloses #5125", "tree": {"sha": "5b84228ac444c9ef918ca21ff0ab5e01f9f77028", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b84228ac444c9ef918ca21ff0ab5e01f9f77028"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cec92407f412b3c8e01d17eab84101a2b858e59e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cec92407f412b3c8e01d17eab84101a2b858e59e", "html_url": "https://github.com/rust-lang/rust/commit/cec92407f412b3c8e01d17eab84101a2b858e59e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cec92407f412b3c8e01d17eab84101a2b858e59e/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bad0b9aa23d2e72366922ec00d50043db0bae338", "url": "https://api.github.com/repos/rust-lang/rust/commits/bad0b9aa23d2e72366922ec00d50043db0bae338", "html_url": "https://github.com/rust-lang/rust/commit/bad0b9aa23d2e72366922ec00d50043db0bae338"}], "stats": {"total": 17, "additions": 13, "deletions": 4}, "files": [{"sha": "47a1d393dbf47576616dad953ec83dfeca4c011d", "filename": "crates/ra_project_model/src/cargo_workspace.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cec92407f412b3c8e01d17eab84101a2b858e59e/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cec92407f412b3c8e01d17eab84101a2b858e59e/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs?ref=cec92407f412b3c8e01d17eab84101a2b858e59e", "patch": "@@ -1,6 +1,11 @@\n //! FIXME: write short doc here\n \n-use std::{ffi::OsStr, ops, path::Path, process::Command};\n+use std::{\n+    ffi::OsStr,\n+    ops,\n+    path::{Path, PathBuf},\n+    process::Command,\n+};\n \n use anyhow::{Context, Result};\n use cargo_metadata::{BuildScript, CargoOpt, Message, MetadataCommand, PackageId};\n@@ -308,9 +313,13 @@ pub fn load_extern_resources(\n         if let Ok(message) = message {\n             match message {\n                 Message::BuildScriptExecuted(BuildScript { package_id, out_dir, cfgs, .. }) => {\n-                    let out_dir = AbsPathBuf::assert(out_dir);\n-                    res.out_dirs.insert(package_id.clone(), out_dir);\n-                    res.cfgs.insert(package_id, cfgs);\n+                    // cargo_metadata crate returns default (empty) path for\n+                    // older cargos, which is not absolute, so work around that.\n+                    if out_dir != PathBuf::default() {\n+                        let out_dir = AbsPathBuf::assert(out_dir);\n+                        res.out_dirs.insert(package_id.clone(), out_dir);\n+                        res.cfgs.insert(package_id, cfgs);\n+                    }\n                 }\n                 Message::CompilerArtifact(message) => {\n                     if message.target.kind.contains(&\"proc-macro\".to_string()) {"}]}