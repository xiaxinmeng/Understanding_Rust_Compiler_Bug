{"sha": "c727edc0b73a78622409bbb15c8375280829f0a5", "node_id": "C_kwDOAAsO6NoAKGM3MjdlZGMwYjczYTc4NjIyNDA5YmJiMTVjODM3NTI4MDgyOWYwYTU", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-25T16:45:08Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-25T16:47:00Z"}, "message": "Remove some useless `ty::Binder::dummy` calls", "tree": {"sha": "99de7842663e4d41ccfbfcf87e8b3dd4b42d1c3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99de7842663e4d41ccfbfcf87e8b3dd4b42d1c3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c727edc0b73a78622409bbb15c8375280829f0a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c727edc0b73a78622409bbb15c8375280829f0a5", "html_url": "https://github.com/rust-lang/rust/commit/c727edc0b73a78622409bbb15c8375280829f0a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c727edc0b73a78622409bbb15c8375280829f0a5/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91d495fdf47cd199212d6d892a6246ddc629b8ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/91d495fdf47cd199212d6d892a6246ddc629b8ce", "html_url": "https://github.com/rust-lang/rust/commit/91d495fdf47cd199212d6d892a6246ddc629b8ce"}], "stats": {"total": 46, "additions": 14, "deletions": 32}, "files": [{"sha": "2f2b9997f97b8df97042e66779d6d80fdfa9aba1", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c727edc0b73a78622409bbb15c8375280829f0a5/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c727edc0b73a78622409bbb15c8375280829f0a5/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=c727edc0b73a78622409bbb15c8375280829f0a5", "patch": "@@ -1784,7 +1784,7 @@ fn receiver_is_implemented<'tcx>(\n     receiver_ty: Ty<'tcx>,\n ) -> bool {\n     let tcx = wfcx.tcx();\n-    let trait_ref = ty::Binder::dummy(ty::TraitRef::new(tcx, receiver_trait_def_id, [receiver_ty]));\n+    let trait_ref = ty::TraitRef::new(tcx, receiver_trait_def_id, [receiver_ty]);\n \n     let obligation = traits::Obligation::new(tcx, cause, wfcx.param_env, trait_ref);\n "}, {"sha": "de9d8fa53d11c1afa7a5241c81c061acaccf75f4", "filename": "compiler/rustc_hir_analysis/src/coherence/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c727edc0b73a78622409bbb15c8375280829f0a5/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c727edc0b73a78622409bbb15c8375280829f0a5/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=c727edc0b73a78622409bbb15c8375280829f0a5", "patch": "@@ -340,11 +340,11 @@ fn visit_implementation_of_dispatch_from_dyn(tcx: TyCtxt<'_>, impl_did: LocalDef\n                         tcx,\n                         cause.clone(),\n                         param_env,\n-                        ty::Binder::dummy(ty::TraitRef::new(\n+                        ty::TraitRef::new(\n                             tcx,\n                             dispatch_from_dyn_trait,\n                             [field.ty(tcx, substs_a), field.ty(tcx, substs_b)],\n-                        )),\n+                        ),\n                     ));\n                 }\n                 let errors = ocx.select_all_or_error();"}, {"sha": "eb21e3b204d6784eab7bfdcf70f16647b2c80aef", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c727edc0b73a78622409bbb15c8375280829f0a5/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c727edc0b73a78622409bbb15c8375280829f0a5/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=c727edc0b73a78622409bbb15c8375280829f0a5", "patch": "@@ -1096,10 +1096,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 self.tcx,\n                 self.misc(expr.span),\n                 self.param_env,\n-                ty::Binder::dummy(ty::TraitRef::new(self.tcx,\n+                ty::TraitRef::new(self.tcx,\n                     into_def_id,\n                     [expr_ty, expected_ty]\n-                )),\n+                ),\n             ))\n         {\n             let sugg = if expr.precedence().order() >= PREC_POSTFIX {\n@@ -1438,7 +1438,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             && !results.expr_adjustments(callee_expr).iter().any(|adj| matches!(adj.kind, ty::adjustment::Adjust::Deref(..)))\n             // Check that we're in fact trying to clone into the expected type\n             && self.can_coerce(*pointee_ty, expected_ty)\n-            && let trait_ref = ty::Binder::dummy(ty::TraitRef::new(self.tcx, clone_trait_did, [expected_ty]))\n+            && let trait_ref = ty::TraitRef::new(self.tcx, clone_trait_did, [expected_ty])\n             // And the expected type doesn't implement `Clone`\n             && !self.predicate_must_hold_considering_regions(&traits::Obligation::new(\n                 self.tcx,"}, {"sha": "7253b8d038b19d5816f25a1c687ce6b67f646be5", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals.rs", "status": "modified", "additions": 5, "deletions": 20, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c727edc0b73a78622409bbb15c8375280829f0a5/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c727edc0b73a78622409bbb15c8375280829f0a5/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs?ref=c727edc0b73a78622409bbb15c8375280829f0a5", "patch": "@@ -313,12 +313,8 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n         Self::consider_implied_clause(\n             ecx,\n             goal,\n-            ty::Binder::dummy(ty::TraitRef::new(\n-                tcx,\n-                goal.predicate.def_id(),\n-                [self_ty, generator.resume_ty()],\n-            ))\n-            .to_predicate(tcx),\n+            ty::TraitRef::new(tcx, goal.predicate.def_id(), [self_ty, generator.resume_ty()])\n+                .to_predicate(tcx),\n             // Technically, we need to check that the generator types are Sized,\n             // but that's already proven by the generator being WF.\n             [],\n@@ -363,10 +359,7 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n                         data.iter().map(|pred| goal.with(tcx, pred.with_self_ty(tcx, a_ty))),\n                     );\n                     // The type must be Sized to be unsized.\n-                    ecx.add_goal(goal.with(\n-                        tcx,\n-                        ty::Binder::dummy(ty::TraitRef::new(tcx, sized_def_id, [a_ty])),\n-                    ));\n+                    ecx.add_goal(goal.with(tcx, ty::TraitRef::new(tcx, sized_def_id, [a_ty])));\n                     // The type must outlive the lifetime of the `dyn` we're unsizing into.\n                     ecx.add_goal(\n                         goal.with(tcx, ty::Binder::dummy(ty::OutlivesPredicate(a_ty, region))),\n@@ -415,11 +408,7 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n                     ecx.eq(goal.param_env, unsized_a_ty, b_ty)?;\n                     ecx.add_goal(goal.with(\n                         tcx,\n-                        ty::Binder::dummy(ty::TraitRef::new(\n-                            tcx,\n-                            goal.predicate.def_id(),\n-                            [a_tail_ty, b_tail_ty],\n-                        )),\n+                        ty::TraitRef::new(tcx, goal.predicate.def_id(), [a_tail_ty, b_tail_ty]),\n                     ));\n                     ecx.evaluate_added_goals_and_make_canonical_response(Certainty::Yes)\n                 }\n@@ -438,11 +427,7 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n                     // Similar to ADTs, require that the rest of the fields are equal.\n                     ecx.add_goal(goal.with(\n                         tcx,\n-                        ty::Binder::dummy(ty::TraitRef::new(\n-                            tcx,\n-                            goal.predicate.def_id(),\n-                            [*a_last_ty, *b_last_ty],\n-                        )),\n+                        ty::TraitRef::new(tcx, goal.predicate.def_id(), [*a_last_ty, *b_last_ty]),\n                     ));\n                     ecx.evaluate_added_goals_and_make_canonical_response(Certainty::Yes)\n                 }"}, {"sha": "aae88199167b9f17d1b09964431f16c2db175a73", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c727edc0b73a78622409bbb15c8375280829f0a5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c727edc0b73a78622409bbb15c8375280829f0a5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=c727edc0b73a78622409bbb15c8375280829f0a5", "patch": "@@ -784,7 +784,7 @@ fn receiver_is_dispatchable<'tcx>(\n                 if param.index == 0 { unsized_self_ty.into() } else { tcx.mk_param_from_def(param) }\n             });\n \n-            ty::Binder::dummy(ty::TraitRef::new(tcx, trait_def_id, substs)).to_predicate(tcx)\n+            ty::TraitRef::new(tcx, trait_def_id, substs).to_predicate(tcx)\n         };\n \n         let caller_bounds =\n@@ -799,11 +799,8 @@ fn receiver_is_dispatchable<'tcx>(\n \n     // Receiver: DispatchFromDyn<Receiver[Self => U]>\n     let obligation = {\n-        let predicate = ty::Binder::dummy(ty::TraitRef::new(\n-            tcx,\n-            dispatch_from_dyn_did,\n-            [receiver_ty, unsized_receiver_ty],\n-        ));\n+        let predicate =\n+            ty::TraitRef::new(tcx, dispatch_from_dyn_did, [receiver_ty, unsized_receiver_ty]);\n \n         Obligation::new(tcx, ObligationCause::dummy(), param_env, predicate)\n     };"}]}