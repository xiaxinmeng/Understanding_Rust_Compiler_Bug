{"sha": "e73d3145f57817ff91468107fc8cad3c6d6616e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3M2QzMTQ1ZjU3ODE3ZmY5MTQ2ODEwN2ZjOGNhZDNjNmQ2NjE2ZTE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-08-01T01:33:45Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-08-01T01:33:45Z"}, "message": "fix AddValidation on methods", "tree": {"sha": "2a7e778f50ea3fe1b9e4ee499b6dad99320be2f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a7e778f50ea3fe1b9e4ee499b6dad99320be2f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e73d3145f57817ff91468107fc8cad3c6d6616e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e73d3145f57817ff91468107fc8cad3c6d6616e1", "html_url": "https://github.com/rust-lang/rust/commit/e73d3145f57817ff91468107fc8cad3c6d6616e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e73d3145f57817ff91468107fc8cad3c6d6616e1/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26ca0d1b3ac8046662e1a6d976c9fdfba2c118dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/26ca0d1b3ac8046662e1a6d976c9fdfba2c118dc", "html_url": "https://github.com/rust-lang/rust/commit/26ca0d1b3ac8046662e1a6d976c9fdfba2c118dc"}], "stats": {"total": 49, "additions": 29, "deletions": 20}, "files": [{"sha": "a3ec6af76034e49dee765b50b9d9b380ba2b6d55", "filename": "src/librustc_mir/transform/add_validation.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e73d3145f57817ff91468107fc8cad3c6d6616e1/src%2Flibrustc_mir%2Ftransform%2Fadd_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e73d3145f57817ff91468107fc8cad3c6d6616e1/src%2Flibrustc_mir%2Ftransform%2Fadd_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_validation.rs?ref=e73d3145f57817ff91468107fc8cad3c6d6616e1", "patch": "@@ -85,19 +85,25 @@ fn lval_context<'a, 'tcx, D>(\n /// Check if this function contains an unsafe block or is an unsafe function.\n fn fn_contains_unsafe<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, src: MirSource) -> bool {\n     use rustc::hir::intravisit::{self, Visitor};\n+    use rustc::hir::map::Node;\n \n     let fn_node_id = match src {\n         MirSource::Fn(node_id) => node_id,\n         _ => return false, // only functions can have unsafe\n     };\n-    let fn_item = tcx.hir.expect_item(fn_node_id);\n \n     struct FindUnsafe<'b, 'tcx> where 'tcx : 'b {\n         map: &'b hir::map::Map<'tcx>,\n         found_unsafe: bool,\n     }\n     let mut finder = FindUnsafe { map: &tcx.hir, found_unsafe: false };\n-    finder.visit_item(fn_item);\n+    // Run the visitor on the NodeId we got.  Seems like there is no uniform way to do that.\n+    match tcx.hir.find(fn_node_id) {\n+        Some(Node::NodeItem(item)) => finder.visit_item(item),\n+        Some(Node::NodeImplItem(item)) => finder.visit_impl_item(item),\n+        Some(_) | None =>\n+            bug!(\"Expected method or function, found {}\", tcx.hir.node_to_string(fn_node_id)),\n+    };\n \n     impl<'b, 'tcx> Visitor<'tcx> for FindUnsafe<'b, 'tcx> {\n         fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, 'tcx> {"}, {"sha": "c8ea2bc254470654e8eaf71860a6767ad75c14f7", "filename": "src/test/mir-opt/validate_1.rs", "status": "modified", "additions": 21, "deletions": 18, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/e73d3145f57817ff91468107fc8cad3c6d6616e1/src%2Ftest%2Fmir-opt%2Fvalidate_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e73d3145f57817ff91468107fc8cad3c6d6616e1/src%2Ftest%2Fmir-opt%2Fvalidate_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fvalidate_1.rs?ref=e73d3145f57817ff91468107fc8cad3c6d6616e1", "patch": "@@ -11,39 +11,42 @@\n // ignore-tidy-linelength\n // compile-flags: -Z verbose -Z mir-emit-validate=1\n \n-fn foo(_x: &mut i32) {}\n+struct Test;\n+\n+impl Test {\n+    // Make sure we run the pass on a method, not just on bare functions.\n+    fn foo(&self, _x: &mut i32) {}\n+}\n \n fn main() {\n     let mut x = 0;\n-    foo(&mut x);\n+    Test.foo(&mut x);\n }\n \n // END RUST SOURCE\n-// START rustc.node4.EraseRegions.after.mir\n-// fn foo(_1: &ReErased mut i32) -> () {\n+// START rustc.node10.EraseRegions.after.mir\n //     bb0: {\n-//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(3) => validate_1/8cd878b::foo[0] }, BrAnon(0)) mut i32]);\n+//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(5) => validate_1/8cd878b::{{impl}}[0]::foo[0] }, BrAnon(0)) Test, _2: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(5) => validate_1/8cd878b::{{impl}}[0]::foo[0] }, BrAnon(1)) mut i32]);\n //         return;\n //     }\n-// }\n-// END rustc.node4.EraseRegions.after.mir\n-// START rustc.node11.EraseRegions.after.mir\n+// END rustc.node10.EraseRegions.after.mir\n+// START rustc.node21.EraseRegions.after.mir\n // fn main() -> () {\n //     bb0: {\n-//         Validate(Suspend(ReScope(Misc(NodeId(20)))), [_1: i32]);\n-//         _4 = &ReErased mut _1;\n-//         Validate(Acquire, [(*_4): i32/ReScope(Misc(NodeId(20)))]);\n-//         Validate(Suspend(ReScope(Misc(NodeId(20)))), [(*_4): i32/ReScope(Misc(NodeId(20)))]);\n-//         _3 = &ReErased mut (*_4);\n-//         Validate(Acquire, [(*_3): i32/ReScope(Misc(NodeId(20)))]);\n-//         Validate(Release, [_3: &ReScope(Misc(NodeId(20))) mut i32]);\n-//         _2 = const foo(_3) -> bb1;\n+//         Validate(Suspend(ReScope(Misc(NodeId(30)))), [_1: i32]);\n+//         _6 = &ReErased mut _1;\n+//         Validate(Acquire, [(*_6): i32/ReScope(Misc(NodeId(30)))]);\n+//         Validate(Suspend(ReScope(Misc(NodeId(30)))), [(*_6): i32/ReScope(Misc(NodeId(30)))]);\n+//         _5 = &ReErased mut (*_6);\n+//         Validate(Acquire, [(*_5): i32/ReScope(Misc(NodeId(30)))]);\n+//         Validate(Release, [_3: &ReScope(Misc(NodeId(30))) Test, _5: &ReScope(Misc(NodeId(30))) mut i32]);\n+//         _2 = const Test::foo(_3, _5) -> bb1;\n //     }\n //\n //     bb1: {\n //         Validate(Acquire, [_2: ()]);\n-//         EndRegion(ReScope(Misc(NodeId(20))));\n+//         EndRegion(ReScope(Misc(NodeId(30))));\n //         return;\n //     }\n // }\n-// END rustc.node11.EraseRegions.after.mir\n+// END rustc.node21.EraseRegions.after.mir"}]}