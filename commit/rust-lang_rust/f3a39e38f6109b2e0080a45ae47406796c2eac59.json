{"sha": "f3a39e38f6109b2e0080a45ae47406796c2eac59", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzYTM5ZTM4ZjYxMDliMmUwMDgwYTQ1YWU0NzQwNjc5NmMyZWFjNTk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-09-22T11:36:46Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-10T07:51:16Z"}, "message": "tidy, oh tidy", "tree": {"sha": "42df4eaefa650c498a5d2907258a3c891195e9ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42df4eaefa650c498a5d2907258a3c891195e9ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3a39e38f6109b2e0080a45ae47406796c2eac59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3a39e38f6109b2e0080a45ae47406796c2eac59", "html_url": "https://github.com/rust-lang/rust/commit/f3a39e38f6109b2e0080a45ae47406796c2eac59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3a39e38f6109b2e0080a45ae47406796c2eac59/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e9f9329e3e2143b558a9ed80c220d5d01f6bd02", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e9f9329e3e2143b558a9ed80c220d5d01f6bd02", "html_url": "https://github.com/rust-lang/rust/commit/4e9f9329e3e2143b558a9ed80c220d5d01f6bd02"}], "stats": {"total": 20, "additions": 16, "deletions": 4}, "files": [{"sha": "a9fba995f0214af11e7011a290b623524c9aafe1", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f3a39e38f6109b2e0080a45ae47406796c2eac59/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3a39e38f6109b2e0080a45ae47406796c2eac59/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=f3a39e38f6109b2e0080a45ae47406796c2eac59", "patch": "@@ -230,7 +230,10 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n \n     /// Mark a storage as live, killing the previous content and returning it.\n     /// Remember to deallocate that!\n-    pub fn storage_live(&mut self, local: mir::Local) -> EvalResult<'tcx, LocalValue<M::PointerTag>> {\n+    pub fn storage_live(\n+        &mut self,\n+        local: mir::Local\n+    ) -> EvalResult<'tcx, LocalValue<M::PointerTag>> {\n         assert!(local != mir::RETURN_PLACE, \"Cannot make return place live\");\n         trace!(\"{:?} is now live\", local);\n \n@@ -519,7 +522,10 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n         Ok(())\n     }\n \n-    pub(super) fn deallocate_local(&mut self, local: LocalValue<M::PointerTag>) -> EvalResult<'tcx> {\n+    pub(super) fn deallocate_local(\n+        &mut self,\n+        local: LocalValue<M::PointerTag>,\n+    ) -> EvalResult<'tcx> {\n         // FIXME: should we tell the user that there was a local which was never written to?\n         if let LocalValue::Live(Operand::Indirect(MemPlace { ptr, .. })) = local {\n             trace!(\"deallocating local\");"}, {"sha": "2dc4b4112ae8fe071ee4bfa336a38e7a98293a8d", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f3a39e38f6109b2e0080a45ae47406796c2eac59/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3a39e38f6109b2e0080a45ae47406796c2eac59/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=f3a39e38f6109b2e0080a45ae47406796c2eac59", "patch": "@@ -557,7 +557,10 @@ impl\n \n     /// Compute a place.  You should only use this if you intend to write into this\n     /// place; for reading, a more efficient alternative is `eval_place_for_read`.\n-    pub fn eval_place(&mut self, mir_place: &mir::Place<'tcx>) -> EvalResult<'tcx, PlaceTy<'tcx, M::PointerTag>> {\n+    pub fn eval_place(\n+        &mut self,\n+        mir_place: &mir::Place<'tcx>\n+    ) -> EvalResult<'tcx, PlaceTy<'tcx, M::PointerTag>> {\n         use rustc::mir::Place::*;\n         let place = match *mir_place {\n             Local(mir::RETURN_PLACE) => PlaceTy {\n@@ -805,7 +808,10 @@ impl\n \n     /// Every place can be read from, so we can turm them into an operand\n     #[inline(always)]\n-    pub fn place_to_op(&self, place: PlaceTy<'tcx, M::PointerTag>) -> EvalResult<'tcx, OpTy<'tcx, M::PointerTag>> {\n+    pub fn place_to_op(\n+        &self,\n+        place: PlaceTy<'tcx, M::PointerTag>\n+    ) -> EvalResult<'tcx, OpTy<'tcx, M::PointerTag>> {\n         let op = match place.place {\n             Place::Ptr(mplace) => {\n                 Operand::Indirect(mplace)"}]}