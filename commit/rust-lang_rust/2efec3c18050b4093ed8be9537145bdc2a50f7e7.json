{"sha": "2efec3c18050b4093ed8be9537145bdc2a50f7e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlZmVjM2MxODA1MGI0MDkzZWQ4YmU5NTM3MTQ1YmRjMmE1MGY3ZTc=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2017-01-14T07:35:54Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2017-01-21T07:40:19Z"}, "message": "Improve `unused_extern_crate` warnings.", "tree": {"sha": "ec09fa9e43fe371a689c892f2e374b7611a301f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec09fa9e43fe371a689c892f2e374b7611a301f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2efec3c18050b4093ed8be9537145bdc2a50f7e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2efec3c18050b4093ed8be9537145bdc2a50f7e7", "html_url": "https://github.com/rust-lang/rust/commit/2efec3c18050b4093ed8be9537145bdc2a50f7e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2efec3c18050b4093ed8be9537145bdc2a50f7e7/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "633f38ae99b657f70e2aba135318178abc9fee16", "url": "https://api.github.com/repos/rust-lang/rust/commits/633f38ae99b657f70e2aba135318178abc9fee16", "html_url": "https://github.com/rust-lang/rust/commit/633f38ae99b657f70e2aba135318178abc9fee16"}], "stats": {"total": 72, "additions": 41, "deletions": 31}, "files": [{"sha": "0217aefc227c38fa69c367e8e080e9a889ac1b9c", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2efec3c18050b4093ed8be9537145bdc2a50f7e7/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2efec3c18050b4093ed8be9537145bdc2a50f7e7/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=2efec3c18050b4093ed8be9537145bdc2a50f7e7", "patch": "@@ -249,6 +249,8 @@ impl<'a> Resolver<'a> {\n                 // n.b. we don't need to look at the path option here, because cstore already did\n                 let crate_id = self.session.cstore.extern_mod_stmt_cnum(item.id).unwrap();\n                 let module = self.get_extern_crate_root(crate_id);\n+                self.populate_module_if_necessary(module);\n+                let used = self.process_legacy_macro_imports(item, module, expansion);\n                 let binding =\n                     (module, ty::Visibility::Public, sp, expansion).to_name_binding(self.arenas);\n                 let directive = self.arenas.alloc_import_directive(ImportDirective {\n@@ -260,11 +262,11 @@ impl<'a> Resolver<'a> {\n                     module_path: Vec::new(),\n                     vis: Cell::new(vis),\n                     expansion: expansion,\n+                    used: Cell::new(used),\n                 });\n+                self.potentially_unused_imports.push(directive);\n                 let imported_binding = self.import(binding, directive);\n                 self.define(parent, ident, TypeNS, imported_binding);\n-                self.populate_module_if_necessary(module);\n-                self.process_legacy_macro_imports(item, module, expansion);\n             }\n \n             ItemKind::Mod(..) if item.ident == keywords::Invalid.ident() => {} // Crate root\n@@ -522,7 +524,6 @@ impl<'a> Resolver<'a> {\n                            binding: &'a NameBinding<'a>,\n                            span: Span,\n                            allow_shadowing: bool) {\n-        self.used_crates.insert(binding.def().def_id().krate);\n         self.macro_names.insert(name);\n         if self.builtin_macros.insert(name, binding).is_some() && !allow_shadowing {\n             let msg = format!(\"`{}` is already in scope\", name);\n@@ -532,22 +533,23 @@ impl<'a> Resolver<'a> {\n         }\n     }\n \n-    fn process_legacy_macro_imports(&mut self, item: &Item, module: Module<'a>, expansion: Mark) {\n+    // This returns true if we should consider the underlying `extern crate` to be used.\n+    fn process_legacy_macro_imports(&mut self, item: &Item, module: Module<'a>, expansion: Mark)\n+                                    -> bool {\n         let allow_shadowing = expansion == Mark::root();\n         let legacy_imports = self.legacy_macro_imports(&item.attrs);\n-        let cnum = module.def_id().unwrap().krate;\n+        let mut used = legacy_imports != LegacyMacroImports::default();\n \n         // `#[macro_use]` and `#[macro_reexport]` are only allowed at the crate root.\n-        if self.current_module.parent.is_some() && legacy_imports != LegacyMacroImports::default() {\n+        if self.current_module.parent.is_some() && used {\n             span_err!(self.session, item.span, E0468,\n                       \"an `extern crate` loading macros must be at the crate root\");\n-        } else if !self.use_extern_macros &&\n-                  self.session.cstore.dep_kind(cnum).macros_only() &&\n-                  legacy_imports == LegacyMacroImports::default() {\n+        } else if !self.use_extern_macros && !used &&\n+                  self.session.cstore.dep_kind(module.def_id().unwrap().krate).macros_only() {\n             let msg = \"custom derive crates and `#[no_link]` crates have no effect without \\\n                        `#[macro_use]`\";\n             self.session.span_warn(item.span, msg);\n-            self.used_crates.insert(cnum); // Avoid the normal unused extern crate warning\n+            used = true; // Avoid the normal unused extern crate warning\n         }\n \n         if let Some(span) = legacy_imports.import_all {\n@@ -566,9 +568,7 @@ impl<'a> Resolver<'a> {\n             }\n         }\n         for (name, span) in legacy_imports.reexports {\n-            let krate = module.def_id().unwrap().krate;\n-            self.used_crates.insert(krate);\n-            self.session.cstore.export_macros(krate);\n+            self.session.cstore.export_macros(module.def_id().unwrap().krate);\n             let ident = Ident::with_empty_ctxt(name);\n             let result = self.resolve_ident_in_module(module, ident, MacroNS, false, None);\n             if let Ok(binding) = result {\n@@ -577,6 +577,7 @@ impl<'a> Resolver<'a> {\n                 span_err!(self.session, span, E0470, \"reexported macro not found\");\n             }\n         }\n+        used\n     }\n \n     // does this attribute list contain \"macro_use\"?"}, {"sha": "0e44f4556dd0871acdc10ed943ee817721c45fe9", "filename": "src/librustc_resolve/check_unused.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2efec3c18050b4093ed8be9537145bdc2a50f7e7/src%2Flibrustc_resolve%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2efec3c18050b4093ed8be9537145bdc2a50f7e7/src%2Flibrustc_resolve%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fcheck_unused.rs?ref=2efec3c18050b4093ed8be9537145bdc2a50f7e7", "patch": "@@ -22,8 +22,9 @@\n use std::ops::{Deref, DerefMut};\n \n use Resolver;\n+use resolve_imports::ImportDirectiveSubclass;\n \n-use rustc::lint;\n+use rustc::{lint, ty};\n use rustc::util::nodemap::NodeMap;\n use syntax::ast::{self, ViewPathGlob, ViewPathList, ViewPathSimple};\n use syntax::visit::{self, Visitor};\n@@ -86,16 +87,6 @@ impl<'a, 'b> Visitor<'a> for UnusedImportCheckVisitor<'a, 'b> {\n         }\n \n         match item.node {\n-            ast::ItemKind::ExternCrate(_) => {\n-                if let Some(crate_num) = self.session.cstore.extern_mod_stmt_cnum(item.id) {\n-                    if !self.used_crates.contains(&crate_num) {\n-                        self.session.add_lint(lint::builtin::UNUSED_EXTERN_CRATES,\n-                                              item.id,\n-                                              item.span,\n-                                              \"unused extern crate\".to_string());\n-                    }\n-                }\n-            }\n             ast::ItemKind::Use(ref p) => {\n                 match p.node {\n                     ViewPathSimple(..) => {\n@@ -124,6 +115,20 @@ impl<'a, 'b> Visitor<'a> for UnusedImportCheckVisitor<'a, 'b> {\n }\n \n pub fn check_crate(resolver: &mut Resolver, krate: &ast::Crate) {\n+    for directive in resolver.potentially_unused_imports.iter() {\n+        match directive.subclass {\n+            _ if directive.used.get() ||\n+                 directive.vis.get() == ty::Visibility::Public ||\n+                 directive.span.source_equal(&DUMMY_SP) => {}\n+            ImportDirectiveSubclass::ExternCrate => {\n+                let lint = lint::builtin::UNUSED_EXTERN_CRATES;\n+                let msg = \"unused extern crate\".to_string();\n+                resolver.session.add_lint(lint, directive.id, directive.span, msg);\n+            }\n+            _ => {}\n+        }\n+    }\n+\n     let mut visitor = UnusedImportCheckVisitor {\n         resolver: resolver,\n         unused_imports: NodeMap(),"}, {"sha": "8a206664a7d3af347f80915532115f5d036f1a04", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2efec3c18050b4093ed8be9537145bdc2a50f7e7/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2efec3c18050b4093ed8be9537145bdc2a50f7e7/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=2efec3c18050b4093ed8be9537145bdc2a50f7e7", "patch": "@@ -1099,7 +1099,6 @@ pub struct Resolver<'a> {\n     pub glob_map: GlobMap,\n \n     used_imports: FxHashSet<(NodeId, Namespace)>,\n-    used_crates: FxHashSet<CrateNum>,\n     pub maybe_unused_trait_imports: NodeSet,\n \n     privacy_errors: Vec<PrivacyError<'a>>,\n@@ -1130,6 +1129,8 @@ pub struct Resolver<'a> {\n \n     // A set of procedural macros imported by `#[macro_use]` that have already been warned about\n     warned_proc_macros: FxHashSet<Name>,\n+\n+    potentially_unused_imports: Vec<&'a ImportDirective<'a>>,\n }\n \n pub struct ResolverArenas<'a> {\n@@ -1279,7 +1280,6 @@ impl<'a> Resolver<'a> {\n             glob_map: NodeMap(),\n \n             used_imports: FxHashSet(),\n-            used_crates: FxHashSet(),\n             maybe_unused_trait_imports: NodeSet(),\n \n             privacy_errors: Vec::new(),\n@@ -1309,6 +1309,7 @@ impl<'a> Resolver<'a> {\n             whitelisted_legacy_custom_derives: Vec::new(),\n             proc_macro_enabled: features.proc_macro,\n             warned_proc_macros: FxHashSet(),\n+            potentially_unused_imports: Vec::new(),\n         }\n     }\n \n@@ -1354,15 +1355,11 @@ impl<'a> Resolver<'a> {\n \n     fn record_use(&mut self, ident: Ident, ns: Namespace, binding: &'a NameBinding<'a>, span: Span)\n                   -> bool /* true if an error was reported */ {\n-        // track extern crates for unused_extern_crate lint\n-        if let Some(DefId { krate, .. }) = binding.module().and_then(ModuleData::def_id) {\n-            self.used_crates.insert(krate);\n-        }\n-\n         match binding.kind {\n             NameBindingKind::Import { directive, binding, ref used, legacy_self_import }\n                     if !used.get() => {\n                 used.set(true);\n+                directive.used.set(true);\n                 if legacy_self_import {\n                     self.warn_legacy_self_import(directive);\n                     return false;"}, {"sha": "8d94fd86b175169f25b4cb82db5729523c3e4482", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2efec3c18050b4093ed8be9537145bdc2a50f7e7/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2efec3c18050b4093ed8be9537145bdc2a50f7e7/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=2efec3c18050b4093ed8be9537145bdc2a50f7e7", "patch": "@@ -62,6 +62,7 @@ pub struct ImportDirective<'a> {\n     pub span: Span,\n     pub vis: Cell<ty::Visibility>,\n     pub expansion: Mark,\n+    pub used: Cell<bool>,\n }\n \n impl<'a> ImportDirective<'a> {\n@@ -257,6 +258,7 @@ impl<'a> Resolver<'a> {\n             id: id,\n             vis: Cell::new(vis),\n             expansion: expansion,\n+            used: Cell::new(false),\n         });\n \n         self.indeterminate_imports.push(directive);"}, {"sha": "515e3b833d9f0901f836748c64f6f2288ded332f", "filename": "src/test/compile-fail/lint-unused-extern-crate.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2efec3c18050b4093ed8be9537145bdc2a50f7e7/src%2Ftest%2Fcompile-fail%2Flint-unused-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2efec3c18050b4093ed8be9537145bdc2a50f7e7/src%2Ftest%2Fcompile-fail%2Flint-unused-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-extern-crate.rs?ref=2efec3c18050b4093ed8be9537145bdc2a50f7e7", "patch": "@@ -33,6 +33,11 @@ use rand::isaac::IsaacRng;\n \n use other::*;\n \n+mod foo {\n+    // Test that this is unused even though an earler `extern crate rand` is used.\n+    extern crate rand; //~ ERROR unused extern crate\n+}\n+\n fn main() {\n     let x: collecs::vec::Vec<usize> = Vec::new();\n     let y = foo();"}]}