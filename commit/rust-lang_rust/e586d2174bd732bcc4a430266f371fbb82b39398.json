{"sha": "e586d2174bd732bcc4a430266f371fbb82b39398", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1ODZkMjE3NGJkNzMyYmNjNGE0MzAyNjZmMzcxZmJiODJiMzkzOTg=", "commit": {"author": {"name": "Christopher Serr", "email": "christopher.serr@gmail.com", "date": "2016-08-14T11:33:53Z"}, "committer": {"name": "Christopher Serr", "email": "christopher.serr@gmail.com", "date": "2016-08-14T11:33:53Z"}, "message": "Improve `No stdlib` and related Documentation", "tree": {"sha": "be3e04f9f47a2b96e5df5509c30a6edef6d24784", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be3e04f9f47a2b96e5df5509c30a6edef6d24784"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e586d2174bd732bcc4a430266f371fbb82b39398", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e586d2174bd732bcc4a430266f371fbb82b39398", "html_url": "https://github.com/rust-lang/rust/commit/e586d2174bd732bcc4a430266f371fbb82b39398", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e586d2174bd732bcc4a430266f371fbb82b39398/comments", "author": {"login": "CryZe", "id": 1451630, "node_id": "MDQ6VXNlcjE0NTE2MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1451630?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CryZe", "html_url": "https://github.com/CryZe", "followers_url": "https://api.github.com/users/CryZe/followers", "following_url": "https://api.github.com/users/CryZe/following{/other_user}", "gists_url": "https://api.github.com/users/CryZe/gists{/gist_id}", "starred_url": "https://api.github.com/users/CryZe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CryZe/subscriptions", "organizations_url": "https://api.github.com/users/CryZe/orgs", "repos_url": "https://api.github.com/users/CryZe/repos", "events_url": "https://api.github.com/users/CryZe/events{/privacy}", "received_events_url": "https://api.github.com/users/CryZe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CryZe", "id": 1451630, "node_id": "MDQ6VXNlcjE0NTE2MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1451630?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CryZe", "html_url": "https://github.com/CryZe", "followers_url": "https://api.github.com/users/CryZe/followers", "following_url": "https://api.github.com/users/CryZe/following{/other_user}", "gists_url": "https://api.github.com/users/CryZe/gists{/gist_id}", "starred_url": "https://api.github.com/users/CryZe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CryZe/subscriptions", "organizations_url": "https://api.github.com/users/CryZe/orgs", "repos_url": "https://api.github.com/users/CryZe/repos", "events_url": "https://api.github.com/users/CryZe/events{/privacy}", "received_events_url": "https://api.github.com/users/CryZe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eec30ea65792fd07826a931a9e0c5dfa3c050b2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/eec30ea65792fd07826a931a9e0c5dfa3c050b2f", "html_url": "https://github.com/rust-lang/rust/commit/eec30ea65792fd07826a931a9e0c5dfa3c050b2f"}], "stats": {"total": 46, "additions": 34, "deletions": 12}, "files": [{"sha": "de7dbab3f12ea665ffc2fbb5fad5bb038b0a77b1", "filename": "src/doc/book/lang-items.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e586d2174bd732bcc4a430266f371fbb82b39398/src%2Fdoc%2Fbook%2Flang-items.md", "raw_url": "https://github.com/rust-lang/rust/raw/e586d2174bd732bcc4a430266f371fbb82b39398/src%2Fdoc%2Fbook%2Flang-items.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Flang-items.md?ref=e586d2174bd732bcc4a430266f371fbb82b39398", "patch": "@@ -57,8 +57,8 @@ fn main(argc: isize, argv: *const *const u8) -> isize {\n     0\n }\n \n-#[lang = \"eh_personality\"] extern fn eh_personality() {}\n-#[lang = \"panic_fmt\"] fn panic_fmt() -> ! { loop {} }\n+#[lang = \"eh_personality\"] extern fn rust_eh_personality() {}\n+#[lang = \"panic_fmt\"] extern fn rust_begin_panic() -> ! { loop {} }\n # #[lang = \"eh_unwind_resume\"] extern fn rust_eh_unwind_resume() {}\n # #[no_mangle] pub extern fn rust_eh_register_frames () {}\n # #[no_mangle] pub extern fn rust_eh_unregister_frames () {}\n@@ -73,8 +73,8 @@ Other features provided by lang items include:\n   `==`, `<`, dereferencing (`*`) and `+` (etc.) operators are all\n   marked with lang items; those specific four are `eq`, `ord`,\n   `deref`, and `add` respectively.\n-- stack unwinding and general failure; the `eh_personality`, `fail`\n-  and `fail_bounds_checks` lang items.\n+- stack unwinding and general failure; the `eh_personality`,\n+  `eh_unwind_resume`, `fail` and `fail_bounds_checks` lang items.\n - the traits in `std::marker` used to indicate types of\n   various kinds; lang items `send`, `sync` and `copy`.\n - the marker types and variance indicators found in"}, {"sha": "2604ca8d4cab7a269ed4eeacca2ea9b4f6f0e7e5", "filename": "src/doc/book/no-stdlib.md", "status": "modified", "additions": 25, "deletions": 8, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e586d2174bd732bcc4a430266f371fbb82b39398/src%2Fdoc%2Fbook%2Fno-stdlib.md", "raw_url": "https://github.com/rust-lang/rust/raw/e586d2174bd732bcc4a430266f371fbb82b39398/src%2Fdoc%2Fbook%2Fno-stdlib.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fno-stdlib.md?ref=e586d2174bd732bcc4a430266f371fbb82b39398", "patch": "@@ -55,7 +55,13 @@ fn start(_argc: isize, _argv: *const *const u8) -> isize {\n // provided by libstd.\n #[lang = \"eh_personality\"]\n #[no_mangle]\n-pub extern fn eh_personality() {\n+pub extern fn rust_eh_personality() {\n+}\n+\n+// This function may be needed based on the compilation target.\n+#[lang = \"eh_unwind_resume\"]\n+#[no_mangle]\n+pub extern fn rust_eh_unwind_resume() {\n }\n \n #[lang = \"panic_fmt\"]\n@@ -87,12 +93,18 @@ pub extern fn main(_argc: i32, _argv: *const *const u8) -> i32 {\n     0\n }\n \n-// These functions and traits are used by the compiler, but not\n+// These functions are used by the compiler, but not\n // for a bare-bones hello world. These are normally\n // provided by libstd.\n #[lang = \"eh_personality\"]\n #[no_mangle]\n-pub extern fn eh_personality() {\n+pub extern fn rust_eh_personality() {\n+}\n+\n+// This function may be needed based on the compilation target.\n+#[lang = \"eh_unwind_resume\"]\n+#[no_mangle]\n+pub extern fn rust_eh_unwind_resume() {\n }\n \n #[lang = \"panic_fmt\"]\n@@ -104,23 +116,28 @@ pub extern fn rust_begin_panic(_msg: core::fmt::Arguments,\n }\n ```\n \n-## More about the langauge items\n+## More about the language items\n \n The compiler currently makes a few assumptions about symbols which are\n available in the executable to call. Normally these functions are provided by\n the standard library, but without it you must define your own. These symbols\n are called \"language items\", and they each have an internal name, and then a\n signature that an implementation must conform to.\n \n-The first of these two functions, `eh_personality`, is used by the failure\n+The first of these functions, `rust_eh_personality`, is used by the failure\n mechanisms of the compiler. This is often mapped to GCC's personality function\n (see the [libstd implementation][unwind] for more information), but crates\n which do not trigger a panic can be assured that this function is never\n-called. Both the language item and the symbol name are `eh_personality`.\n- \n+called. The language item's name is `eh_personality`.\n+\n [unwind]: https://github.com/rust-lang/rust/blob/master/src/libpanic_unwind/gcc.rs\n \n-The second function, `panic_fmt`, is also used by the failure mechanisms of the\n+The second function, `rust_begin_panic`, is also used by the failure mechanisms of the\n compiler. When a panic happens, this controls the message that's displayed on\n the screen. While the language item's name is `panic_fmt`, the symbol name is\n `rust_begin_panic`.\n+\n+A third function, `rust_eh_unwind_resume`, is also needed if the `custom_unwind_resume`\n+flag is set in the options of the compilation target. It allows customizing the\n+process of resuming unwind at the end of the landing pads. The language item's name\n+is `eh_unwind_resume`."}, {"sha": "4949e66de54c90759db48806b3cca107595e29b3", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e586d2174bd732bcc4a430266f371fbb82b39398/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e586d2174bd732bcc4a430266f371fbb82b39398/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=e586d2174bd732bcc4a430266f371fbb82b39398", "patch": "@@ -42,6 +42,11 @@\n //!   line. It is up to consumers of this core library to define this panic\n //!   function; it is only required to never return. This requires a `lang`\n //!   attribute named `panic_fmt`.\n+//!\n+//! * `rust_eh_personality` - is used by the failure mechanisms of the\n+//!    compiler. This is often mapped to GCC's personality function, but crates\n+//!    which do not trigger a panic can be assured that this function is never\n+//!    called. The `lang` attribute is called `eh_personality`.\n \n // Since libcore defines many fundamental lang items, all tests live in a\n // separate crate, libcoretest, to avoid bizarre issues."}]}