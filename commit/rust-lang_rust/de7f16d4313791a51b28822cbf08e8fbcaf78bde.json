{"sha": "de7f16d4313791a51b28822cbf08e8fbcaf78bde", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlN2YxNmQ0MzEzNzkxYTUxYjI4ODIyY2JmMDhlOGZiY2FmNzhiZGU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-23T02:30:56Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-27T15:53:45Z"}, "message": "check_match: extract common logic", "tree": {"sha": "58f1f2d6d49b02dc83e36718627ca1425fbd3cd5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58f1f2d6d49b02dc83e36718627ca1425fbd3cd5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de7f16d4313791a51b28822cbf08e8fbcaf78bde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de7f16d4313791a51b28822cbf08e8fbcaf78bde", "html_url": "https://github.com/rust-lang/rust/commit/de7f16d4313791a51b28822cbf08e8fbcaf78bde", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de7f16d4313791a51b28822cbf08e8fbcaf78bde/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a79d08fa57e1c257d647c9848e35defcb379c07", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a79d08fa57e1c257d647c9848e35defcb379c07", "html_url": "https://github.com/rust-lang/rust/commit/8a79d08fa57e1c257d647c9848e35defcb379c07"}], "stats": {"total": 13, "additions": 8, "deletions": 5}, "files": [{"sha": "08ed6b521b502d04a2356bdfa3202502a366d1c4", "filename": "src/librustc_mir_build/hair/pattern/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de7f16d4313791a51b28822cbf08e8fbcaf78bde/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7f16d4313791a51b28822cbf08e8fbcaf78bde/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs?ref=de7f16d4313791a51b28822cbf08e8fbcaf78bde", "patch": "@@ -586,7 +586,7 @@ impl<'a, 'tcx> MatchCheckCtxt<'a, 'tcx> {\n         tcx: TyCtxt<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n         module: DefId,\n-        f: impl for<'b> FnOnce(MatchCheckCtxt<'b, 'tcx>) -> R,\n+        f: impl FnOnce(MatchCheckCtxt<'_, 'tcx>) -> R,\n     ) -> R {\n         let pattern_arena = TypedArena::default();\n "}, {"sha": "82822f0c471a4d2be1a83acaeec5f464e3dc40de", "filename": "src/librustc_mir_build/hair/pattern/check_match.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/de7f16d4313791a51b28822cbf08e8fbcaf78bde/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7f16d4313791a51b28822cbf08e8fbcaf78bde/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs?ref=de7f16d4313791a51b28822cbf08e8fbcaf78bde", "patch": "@@ -140,6 +140,11 @@ impl<'tcx> MatchVisitor<'_, 'tcx> {\n         (pattern, pattern_ty)\n     }\n \n+    fn check_in_cx(&self, hir_id: HirId, f: impl FnOnce(MatchCheckCtxt<'_, 'tcx>)) {\n+        let module = self.tcx.hir().get_module_parent(hir_id);\n+        MatchCheckCtxt::create_and_enter(self.tcx, self.param_env, module, |cx| f(cx));\n+    }\n+\n     fn check_match(\n         &mut self,\n         scrut: &hir::Expr<'_>,\n@@ -151,8 +156,7 @@ impl<'tcx> MatchVisitor<'_, 'tcx> {\n             self.check_patterns(arm.guard.is_some(), &arm.pat);\n         }\n \n-        let module = self.tcx.hir().get_module_parent(scrut.hir_id);\n-        MatchCheckCtxt::create_and_enter(self.tcx, self.param_env, module, |ref mut cx| {\n+        self.check_in_cx(scrut.hir_id, |ref mut cx| {\n             let mut have_errors = false;\n \n             let inlined_arms: Vec<_> = arms\n@@ -180,8 +184,7 @@ impl<'tcx> MatchVisitor<'_, 'tcx> {\n     }\n \n     fn check_irrefutable(&self, pat: &'tcx Pat<'tcx>, origin: &str, sp: Option<Span>) {\n-        let module = self.tcx.hir().get_module_parent(pat.hir_id);\n-        MatchCheckCtxt::create_and_enter(self.tcx, self.param_env, module, |ref mut cx| {\n+        self.check_in_cx(pat.hir_id, |ref mut cx| {\n             let (pattern, pattern_ty) = self.lower_pattern(cx, pat, &mut false);\n             let pats: Matrix<'_, '_> = vec![PatStack::from_pattern(pattern)].into_iter().collect();\n "}]}