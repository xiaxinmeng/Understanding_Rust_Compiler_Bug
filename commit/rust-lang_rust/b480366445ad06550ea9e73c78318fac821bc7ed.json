{"sha": "b480366445ad06550ea9e73c78318fac821bc7ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0ODAzNjY0NDVhZDA2NTUwZWE5ZTczYzc4MzE4ZmFjODIxYmM3ZWQ=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-01-12T18:26:39Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-01-12T19:16:58Z"}, "message": "Rollup merge of #47343 - goffrie:master, r=jseyfried\n\nGlued tokens can themselves be joint.\n\nWhen gluing two tokens, the second of which is joint, the result should also be\njoint.\nThis fixes an issue with joining three `Dot` tokens to make a `DotDotDot` - the\nintermediate `DotDot` would not be joint and therefore we would not attempt to\nglue the last `Dot` token, yielding `.. .` instead of `...`.\n\nr? @jseyfried", "tree": {"sha": "1bcce085f14c9334e63c7ccef0e1957d86ec90dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1bcce085f14c9334e63c7ccef0e1957d86ec90dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b480366445ad06550ea9e73c78318fac821bc7ed", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlpZCaoACgkQ/vbIBR0O\nATxsdg//Qo2UPzgKgtUwa2j/3Kw+Iv4QJ2QM2N41vYt5mE2ETpF9hwKLYjuB68j5\n5k8S2qDjbauS8UdEa/5tF5mZVvWavIgpuU8lDmisRPBFwCbkZj4fc5UHKcrqjx2p\ny7GTe16b1YIpyfsp6yNwDM43BjfzpfxFJsGZHQn5VKHn7BrXidJKiUDFHv0qlhVN\n+gPbg0DEwkNA6MRkw/lnbIHeX6uVILGGkB5j8LndQFaAMFAH0ec4BCA06fbnbbSd\nshjhi1U24OarPFKgq7crGIfhosm6aAd/egacpA2vDKV4xDznVsgvozQmgawGDb19\nsPB8pQEtmsTXe/TJQX4i5Ohu3v6EM+6iCsHeQ2e552Nz7mj5zGATd071Q7SvyNNX\nCpJ5j68Q9qtdrHZA4egrikNlqXPXJk7wSYSpUtyXlpyF9cRtFdZl5+S1aOyVPm0c\ns7H24FyUEE2aNKvYddR1I2ZV0V4wTZtDhu8Q7VacImN/zNJ54/GZKBBeIjM6yDte\nXcWWl/Wk6U7EQEkGPaDKoLOpjWGZBu2FOPacAIJDBnzLTq+1JgY1i7z5j15C3ghv\nRulIhwegIsn2Z7nXUlft9FX7GHJFISTyMfFr2Xf1XYXj5lDy7aa/XA1AzEMRJ43r\nSsqsQClgbM/wBlGmzh4G1fvboddWMJfsu5gvdaat7pmARWiMkiY=\n=LbWj\n-----END PGP SIGNATURE-----", "payload": "tree 1bcce085f14c9334e63c7ccef0e1957d86ec90dd\nparent cf70a48ce4691b4d3a3b81acc7452e2da15d1979\nparent 2e0ad5af309c016986e6c81da181762e833c802f\nauthor kennytm <kennytm@gmail.com> 1515781599 +0800\ncommitter kennytm <kennytm@gmail.com> 1515784618 +0800\n\nRollup merge of #47343 - goffrie:master, r=jseyfried\n\nGlued tokens can themselves be joint.\n\nWhen gluing two tokens, the second of which is joint, the result should also be\njoint.\nThis fixes an issue with joining three `Dot` tokens to make a `DotDotDot` - the\nintermediate `DotDot` would not be joint and therefore we would not attempt to\nglue the last `Dot` token, yielding `.. .` instead of `...`.\n\nr? @jseyfried\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b480366445ad06550ea9e73c78318fac821bc7ed", "html_url": "https://github.com/rust-lang/rust/commit/b480366445ad06550ea9e73c78318fac821bc7ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b480366445ad06550ea9e73c78318fac821bc7ed/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf70a48ce4691b4d3a3b81acc7452e2da15d1979", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf70a48ce4691b4d3a3b81acc7452e2da15d1979", "html_url": "https://github.com/rust-lang/rust/commit/cf70a48ce4691b4d3a3b81acc7452e2da15d1979"}, {"sha": "2e0ad5af309c016986e6c81da181762e833c802f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e0ad5af309c016986e6c81da181762e833c802f", "html_url": "https://github.com/rust-lang/rust/commit/2e0ad5af309c016986e6c81da181762e833c802f"}], "stats": {"total": 30, "additions": 24, "deletions": 6}, "files": [{"sha": "ad04b6ab2b5599fbef1bea1f8ce8c5dffcb10cf0", "filename": "src/libsyntax/tokenstream.rs", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b480366445ad06550ea9e73c78318fac821bc7ed/src%2Flibsyntax%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b480366445ad06550ea9e73c78318fac821bc7ed/src%2Flibsyntax%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftokenstream.rs?ref=b480366445ad06550ea9e73c78318fac821bc7ed", "patch": "@@ -286,12 +286,12 @@ impl TokenStream {\n         TokenStream::concat(result)\n     }\n \n-    fn first_tree(&self) -> Option<TokenTree> {\n+    fn first_tree_and_joint(&self) -> Option<(TokenTree, bool)> {\n         match self.kind {\n             TokenStreamKind::Empty => None,\n-            TokenStreamKind::Tree(ref tree) |\n-            TokenStreamKind::JointTree(ref tree) => Some(tree.clone()),\n-            TokenStreamKind::Stream(ref stream) => stream.first().unwrap().first_tree(),\n+            TokenStreamKind::Tree(ref tree) => Some((tree.clone(), false)),\n+            TokenStreamKind::JointTree(ref tree) => Some((tree.clone(), true)),\n+            TokenStreamKind::Stream(ref stream) => stream.first().unwrap().first_tree_and_joint(),\n         }\n     }\n \n@@ -315,12 +315,18 @@ impl TokenStreamBuilder {\n         let stream = stream.into();\n         let last_tree_if_joint = self.0.last().and_then(TokenStream::last_tree_if_joint);\n         if let Some(TokenTree::Token(last_span, last_tok)) = last_tree_if_joint {\n-            if let Some(TokenTree::Token(span, tok)) = stream.first_tree() {\n+            if let Some((TokenTree::Token(span, tok), is_joint)) = stream.first_tree_and_joint() {\n                 if let Some(glued_tok) = last_tok.glue(tok) {\n                     let last_stream = self.0.pop().unwrap();\n                     self.push_all_but_last_tree(&last_stream);\n                     let glued_span = last_span.to(span);\n-                    self.0.push(TokenTree::Token(glued_span, glued_tok).into());\n+                    let glued_tt = TokenTree::Token(glued_span, glued_tok);\n+                    let glued_tokenstream = if is_joint {\n+                        glued_tt.joint()\n+                    } else {\n+                        glued_tt.into()\n+                    };\n+                    self.0.push(glued_tokenstream);\n                     self.push_all_but_first_tree(&stream);\n                     return\n                 }\n@@ -669,4 +675,16 @@ mod tests {\n         assert_eq!(test1.is_empty(), false);\n         assert_eq!(test2.is_empty(), false);\n     }\n+\n+    #[test]\n+    fn test_dotdotdot() {\n+        let mut builder = TokenStreamBuilder::new();\n+        builder.push(TokenTree::Token(sp(0, 1), Token::Dot).joint());\n+        builder.push(TokenTree::Token(sp(1, 2), Token::Dot).joint());\n+        builder.push(TokenTree::Token(sp(2, 3), Token::Dot));\n+        let stream = builder.build();\n+        assert!(stream.eq_unspanned(&string_to_ts(\"...\")));\n+        assert_eq!(stream.trees().count(), 1);\n+    }\n+\n }"}]}