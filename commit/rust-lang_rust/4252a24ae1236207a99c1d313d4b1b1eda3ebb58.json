{"sha": "4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyNTJhMjRhZTEyMzYyMDdhOTljMWQzMTNkNGIxYjFlZGEzZWJiNTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-30T22:41:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-30T22:41:40Z"}, "message": "auto merge of #10528 : alexcrichton/rust/static-linking-v2, r=pcwalton\n\nIn this series of commits, I've implemented static linking for rust. The scheme I implemented was the same as my [mailing list post](https://mail.mozilla.org/pipermail/rust-dev/2013-November/006686.html).\r\n\r\nThe commits have more details to the nitty gritty of what went on. I've rebased this on top of my native mutex pull request (#10479), but I imagine that it will land before this lands, I just wanted to pre-emptively get all the rebase conflicts out of the way (becuase this is reorganizing building librustrt as well).\r\n\r\nSome contentious points I want to make sure are all good:\r\n\r\n* I've added more \"compiler chooses a default\" behavior than I would like, I want to make sure that this is all very clearly outlined in the code, and if not I would like to remove behavior or make it clearer.\r\n* I want to make sure that the new \"fancy suite\" tests are ok (using make/python instead of another rust crate)\r\n\r\nIf we do indeed pursue this, I would be more than willing to write up a document describing how linking in rust works. I believe that this behavior should be very understandable, and the compiler should never hinder someone just because linking is a little fuzzy.", "tree": {"sha": "c0b36a1a14bf504be40acb188934e65497745848", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0b36a1a14bf504be40acb188934e65497745848"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "html_url": "https://github.com/rust-lang/rust/commit/4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfe46f788bd080fed67c63e7a04dad10468502b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfe46f788bd080fed67c63e7a04dad10468502b3", "html_url": "https://github.com/rust-lang/rust/commit/dfe46f788bd080fed67c63e7a04dad10468502b3"}, {"sha": "56e4c82a38cfb2bcf7de2d6323dab0073a70726d", "url": "https://api.github.com/repos/rust-lang/rust/commits/56e4c82a38cfb2bcf7de2d6323dab0073a70726d", "html_url": "https://github.com/rust-lang/rust/commit/56e4c82a38cfb2bcf7de2d6323dab0073a70726d"}], "stats": {"total": 2513, "additions": 1714, "deletions": 799}, "files": [{"sha": "b575312c03b407f52289f2c877f9e620c4e97eda", "filename": "Makefile.in", "status": "modified", "additions": 32, "deletions": 37, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -130,6 +130,14 @@ ifndef DEBUG_BORROWS\n   RUSTFLAGS_STAGE2 += -Z no-debug-borrows\n endif\n \n+# The executables crated during this compilation process have no need to include\n+# static copies of libstd and libextra. We also generate dynamic versions of all\n+# libraries, so in the interest of space, prefer dynamic linking throughout the\n+# compilation process.\n+RUSTFLAGS_STAGE1 += -Z prefer-dynamic\n+RUSTFLAGS_STAGE2 += -Z prefer-dynamic\n+RUSTFLAGS_STAGE3 += -Z prefer-dynamic\n+\n # platform-specific auto-configuration\n include $(CFG_SRC_DIR)mk/platform.mk\n \n@@ -214,7 +222,7 @@ GENERATED :=\n \n define DEF_LIBS\n \n-CFG_RUNTIME_$(1) :=$(call CFG_LIB_NAME_$(1),rustrt)\n+CFG_RUNTIME_$(1) :=$(call CFG_STATIC_LIB_NAME_$(1),rustrt)\n CFG_RUSTLLVM_$(1) :=$(call CFG_LIB_NAME_$(1),rustllvm)\n CFG_STDLIB_$(1) :=$(call CFG_LIB_NAME_$(1),std)\n CFG_EXTRALIB_$(1) :=$(call CFG_LIB_NAME_$(1),extra)\n@@ -239,6 +247,10 @@ LIBRUSTPKG_DSYM_GLOB_$(1) :=$(call CFG_LIB_DSYM_GLOB_$(1),rustpkg)\n LIBRUSTDOC_DSYM_GLOB_$(1) :=$(call CFG_LIB_DSYM_GLOB_$(1),rustdoc)\n LIBRUSTUV_DSYM_GLOB_$(1) :=$(call CFG_LIB_DSYM_GLOB_$(1),rustuv)\n \n+EXTRALIB_RGLOB_$(1) :=$(call CFG_RLIB_GLOB,extra)\n+STDLIB_RGLOB_$(1) :=$(call CFG_RLIB_GLOB,std)\n+LIBRUSTUV_RGLOB_$(1) :=$(call CFG_RLIB_GLOB,rustuv)\n+\n endef\n \n # $(1) is the path for directory to match against\n@@ -392,42 +404,25 @@ TBIN$(1)_T_$(2)_H_$(3) = $$(TROOT$(1)_T_$(2)_H_$(3))/bin\n TLIB$(1)_T_$(2)_H_$(3) = $$(TROOT$(1)_T_$(2)_H_$(3))/$$(CFG_LIBDIR)\n \n # The name of the standard and extra libraries used by rustc\n-ifdef CFG_DISABLE_SHAREDSTD\n-  HSTDLIB_DEFAULT$(1)_H_$(3) = \\\n-    $$(HLIB$(1)_H_$(3))/libstd.rlib\n-  TSTDLIB_DEFAULT$(1)_T_$(2)_H_$(3) = \\\n-    $$(TLIB$(1)_T_$(2)_H_$(3))/libstd.rlib\n-\n-  HEXTRALIB_DEFAULT$(1)_H_$(3) = \\\n-    $$(HLIB$(1)_H_$(3))/libextra.rlib\n-  TEXTRALIB_DEFAULT$(1)_T_$(2)_H_$(3) = \\\n-    $$(TLIB$(1)_T_$(2)_H_$(3))/libextra.rlib\n-\n-  HLIBRUSTC_DEFAULT$(1)_H_$(3) = \\\n-    $$(HLIB$(1)_H_$(3))/librustc.rlib\n-  TLIBRUSTC_DEFAULT$(1)_T_$(2)_H_$(3) = \\\n-    $$(TLIB$(1)_T_$(2)_H_$(3))/librustc.rlib\n-else\n-  HSTDLIB_DEFAULT$(1)_H_$(3) = \\\n-    $$(HLIB$(1)_H_$(3))/$(CFG_STDLIB_$(3))\n-  TSTDLIB_DEFAULT$(1)_T_$(2)_H_$(3) = \\\n-    $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_STDLIB_$(2))\n-\n-  HEXTRALIB_DEFAULT$(1)_H_$(3) = \\\n-    $$(HLIB$(1)_H_$(3))/$(CFG_EXTRALIB_$(3))\n-  TEXTRALIB_DEFAULT$(1)_T_$(2)_H_$(3) = \\\n-    $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_EXTRALIB_$(2))\n-\n-  HLIBRUSTC_DEFAULT$(1)_H_$(3) = \\\n-    $$(HLIB$(1)_H_$(3))/$(CFG_LIBRUSTC_$(3))\n-  TLIBRUSTC_DEFAULT$(1)_T_$(2)_H_$(3) = \\\n-    $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTC_$(2))\n-\n-  HLIBRUSTUV_DEFAULT$(1)_H_$(3) = \\\n-    $$(HLIB$(1)_H_$(3))/$(CFG_LIBRUSTUV_$(3))\n-  TLIBRUSTUV_DEFAULT$(1)_T_$(2)_H_$(3) = \\\n-    $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTUV_$(2))\n-endif\n+HSTDLIB_DEFAULT$(1)_H_$(3) = \\\n+  $$(HLIB$(1)_H_$(3))/$(CFG_STDLIB_$(3))\n+TSTDLIB_DEFAULT$(1)_T_$(2)_H_$(3) = \\\n+  $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_STDLIB_$(2))\n+\n+HEXTRALIB_DEFAULT$(1)_H_$(3) = \\\n+  $$(HLIB$(1)_H_$(3))/$(CFG_EXTRALIB_$(3))\n+TEXTRALIB_DEFAULT$(1)_T_$(2)_H_$(3) = \\\n+  $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_EXTRALIB_$(2))\n+\n+HLIBRUSTC_DEFAULT$(1)_H_$(3) = \\\n+  $$(HLIB$(1)_H_$(3))/$(CFG_LIBRUSTC_$(3))\n+TLIBRUSTC_DEFAULT$(1)_T_$(2)_H_$(3) = \\\n+  $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTC_$(2))\n+\n+HLIBRUSTUV_DEFAULT$(1)_H_$(3) = \\\n+  $$(HLIB$(1)_H_$(3))/$(CFG_LIBRUSTUV_$(3))\n+TLIBRUSTUV_DEFAULT$(1)_T_$(2)_H_$(3) = \\\n+  $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTUV_$(2))\n \n # Preqrequisites for using the stageN compiler\n HSREQ$(1)_H_$(3) = \\"}, {"sha": "074e522a20c2a09ee88ab53b1941281450b7c64c", "filename": "configure", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/configure", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -364,7 +364,6 @@ fi\n BOOL_OPTIONS=\"\"\n VAL_OPTIONS=\"\"\n \n-opt sharedstd 1 \"build libstd as a shared library\"\n opt valgrind 0 \"run tests with valgrind (memcheck by default)\"\n opt helgrind 0 \"run tests with helgrind instead of memcheck\"\n opt docs     1 \"build documentation\"\n@@ -398,7 +397,7 @@ valopt sysconfdir \"/etc\" \"install system configuration files\"\n valopt datadir \"${CFG_PREFIX}/share\" \"install data\"\n valopt infodir \"${CFG_PREFIX}/share/info\" \"install additional info\"\n valopt mandir \"${CFG_PREFIX}/share/man\" \"install man pages in PATH\"\n-valopt libdir \"${CFG_PREFIX}/lib\" \"install libraries\" \n+valopt libdir \"${CFG_PREFIX}/lib\" \"install libraries\"\n \n # Validate Options\n step_msg \"validating $CFG_SELF args\""}, {"sha": "969e40e632a158cf972cff38af942277b0ac071b", "filename": "doc/rust.md", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -1507,19 +1507,15 @@ an `abi` string, as shown here:\n extern \"stdcall\" { }\n ~~~~\n \n-The `link_name` attribute allows the name of the library to be specified.\n+The `link` attribute allows the name of the library to be specified. When\n+specified the compiler will attempt to link against the native library of the\n+specified name.\n \n ~~~~ {.xfail-test}\n-#[link_name = \"crypto\"]\n+#[link(name = \"crypto\")]\n extern { }\n ~~~~\n \n-The `nolink` attribute tells the Rust compiler\n-not to do any linking for the external block.\n-This is particularly useful for creating external blocks for libc,\n-which tends to not follow standard library naming conventions\n-and is linked to all Rust programs anyway.\n-\n The type of a function\n declared in an extern block\n is `extern \"abi\" fn(A1, ..., An) -> R`,"}, {"sha": "1994fec0990caf129ea4ca41838edb383a73b040", "filename": "mk/clean.mk", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/mk%2Fclean.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/mk%2Fclean.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fclean.mk?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -59,6 +59,7 @@ clean-generic-$(2)-$(1):\n \t$(Q)find $(1)/rustllvm \\\n \t         $(1)/rt \\\n \t\t $(1)/test \\\n+\t\t $(1)/stage* \\\n          -name '*.[odasS]' -o \\\n          -name '*.so' -o      \\\n          -name '*.dylib' -o   \\\n@@ -91,13 +92,16 @@ clean$(1)_H_$(2):\n \t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_LIBRUSTC_$(2))\n \t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_LIBSYNTAX_$(2))\n \t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(STDLIB_GLOB_$(2))\n+\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(STDLIB_RGLOB_$(2))\n \t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(EXTRALIB_GLOB_$(2))\n+\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(EXTRALIB_RGLOB_$(2))\n+\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(LIBRUSTUV_GLOB_$(2))\n+\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(LIBRUSTUV_RGLOB_$(2))\n \t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(LIBRUSTC_GLOB_$(2))\n \t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(LIBSYNTAX_GLOB_$(2))\n \t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(LIBRUSTPKG_GLOB_$(2))\n \t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(LIBRUSTDOC_GLOB_$(2))\n \t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_RUSTLLVM_$(2))\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/libstd.rlib\n \n endef\n \n@@ -122,14 +126,16 @@ clean$(1)_T_$(2)_H_$(3):\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTC_$(2))\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBSYNTAX_$(2))\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(STDLIB_GLOB_$(2))\n+\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(STDLIB_RGLOB_$(2))\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(EXTRALIB_GLOB_$(2))\n+\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(EXTRALIB_RGLOB_$(2))\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(LIBRUSTUV_GLOB_$(2))\n+\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(LIBRUSTUV_RGLOB_$(2))\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(LIBRUSTC_GLOB_$(2))\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(LIBSYNTAX_GLOB_$(2))\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(LIBRUSTPKG_GLOB_$(2))\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(LIBRUSTDOC_GLOB_$(2))\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_RUSTLLVM_$(2))\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/libstd.rlib\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/libmorestack.a\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/librun_pass_stage* # For unix\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/run_pass_stage* # For windows"}, {"sha": "7e8a3e8a6eb1497497e182aced1a08986f92cf4b", "filename": "mk/host.mk", "status": "modified", "additions": 10, "deletions": 25, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/mk%2Fhost.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/mk%2Fhost.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fhost.mk?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -50,7 +50,7 @@ $$(HLIB$(2)_H_$(4))/$(CFG_LIBRUSTC_$(4)): \\\n \t$$(call REMOVE_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBRUSTC_GLOB_$(4)),$$(notdir $$@))\n \t$$(Q)cp $$< $$@\n \t$$(Q)cp -R $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBRUSTC_GLOB_$(4)) \\\n-\t\t$(wildcard $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBRUSTC_DSYM_GLOB_$(4))) \\\n+\t\t$$(wildcard $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBRUSTC_DSYM_GLOB_$(4))) \\\n \t        $$(HLIB$(2)_H_$(4))\n \t$$(call LIST_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBRUSTC_GLOB_$(4)),$$(notdir $$@))\n \n@@ -82,6 +82,7 @@ $$(HLIB$(2)_H_$(4))/$(CFG_STDLIB_$(4)): \\\n \t| $$(HLIB$(2)_H_$(4))/\n \t@$$(call E, cp: $$@)\n \t$$(call REMOVE_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(STDLIB_GLOB_$(4)),$$(notdir $$@))\n+\t$$(call REMOVE_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(STDLIB_RGLOB_$(4)),$$(notdir $$@))\n \t$$(Q)cp $$< $$@\n # Subtle: We do not let the shell expand $$(STDLIB_DSYM_GLOB) directly rather\n # we use Make's $$(wildcard) facility. The reason is that, on mac, when using\n@@ -91,9 +92,11 @@ $$(HLIB$(2)_H_$(4))/$(CFG_STDLIB_$(4)): \\\n # Make instead expands the glob to nothing, which gives us the correct behavior.\n # (Copy .dsym file if it exists, but do nothing otherwise)\n \t$$(Q)cp -R $$(TLIB$(1)_T_$(4)_H_$(3))/$(STDLIB_GLOB_$(4)) \\\n+\t\t$$(wildcard $$(TLIB$(1)_T_$(4)_H_$(3))/$(STDLIB_RGLOB_$(4))) \\\n \t\t$$(wildcard $$(TLIB$(1)_T_$(4)_H_$(3))/$(STDLIB_DSYM_GLOB_$(4))) \\\n \t        $$(HLIB$(2)_H_$(4))\n \t$$(call LIST_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(STDLIB_GLOB_$(4)),$$(notdir $$@))\n+\t$$(call LIST_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(STDLIB_RGLOB_$(4)),$$(notdir $$@))\n \n $$(HLIB$(2)_H_$(4))/$(CFG_EXTRALIB_$(4)): \\\n \t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_EXTRALIB_$(4)) \\\n@@ -102,11 +105,14 @@ $$(HLIB$(2)_H_$(4))/$(CFG_EXTRALIB_$(4)): \\\n \t| $$(HLIB$(2)_H_$(4))/\n \t@$$(call E, cp: $$@)\n \t$$(call REMOVE_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(EXTRALIB_GLOB_$(4)),$$(notdir $$@))\n+\t$$(call REMOVE_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(EXTRALIB_RGLOB_$(4)),$$(notdir $$@))\n \t$$(Q)cp $$< $$@\n \t$$(Q)cp -R $$(TLIB$(1)_T_$(4)_H_$(3))/$(EXTRALIB_GLOB_$(4)) \\\n+\t\t$$(wildcard $$(TLIB$(1)_T_$(4)_H_$(3))/$(EXTRALIB_RGLOB_$(4))) \\\n \t\t$$(wildcard $$(TLIB$(1)_T_$(4)_H_$(3))/$(EXTRALIB_DSYM_GLOB_$(4))) \\\n \t        $$(HLIB$(2)_H_$(4))\n \t$$(call LIST_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(EXTRALIB_GLOB_$(4)),$$(notdir $$@))\n+\t$$(call LIST_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(EXTRALIB_RGLOB_$(4)),$$(notdir $$@))\n \n $$(HLIB$(2)_H_$(4))/$(CFG_LIBRUSTUV_$(4)): \\\n \t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUSTUV_$(4)) \\\n@@ -115,35 +121,14 @@ $$(HLIB$(2)_H_$(4))/$(CFG_LIBRUSTUV_$(4)): \\\n \t| $$(HLIB$(2)_H_$(4))/\n \t@$$(call E, cp: $$@)\n \t$$(call REMOVE_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBRUSTUV_GLOB_$(4)),$$(notdir $$@))\n+\t$$(call REMOVE_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBRUSTUV_RGLOB_$(4)),$$(notdir $$@))\n \t$$(Q)cp $$< $$@\n \t$$(Q)cp -R $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBRUSTUV_GLOB_$(4)) \\\n+\t\t$$(wildcard $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBRUSTUV_RGLOB_$(4))) \\\n \t\t$$(wildcard $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBRUSTUV_DSYM_GLOB_$(4))) \\\n \t        $$(HLIB$(2)_H_$(4))\n \t$$(call LIST_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBRUSTUV_GLOB_$(4)),$$(notdir $$@))\n-\n-$$(HLIB$(2)_H_$(4))/libstd.rlib: \\\n-\t$$(TLIB$(1)_T_$(4)_H_$(3))/libstd.rlib \\\n-\t$$(HLIB$(2)_H_$(4))/$$(CFG_RUNTIME_$(4)) \\\n-\t| $$(HLIB$(2)_H_$(4))/\n-\t@$$(call E, cp: $$@)\n-\t$$(Q)cp $$< $$@\n-\n-$$(HLIB$(2)_H_$(4))/libextra.rlib: \\\n-\t$$(TLIB$(1)_T_$(4)_H_$(3))/libextra.rlib \\\n-\t$$(HLIB$(2)_H_$(4))/libstd.rlib \\\n-\t$$(HLIB$(2)_H_$(4))/$$(CFG_RUNTIME_$(4)) \\\n-\t| $$(HLIB$(2)_H_$(4))/\n-\t@$$(call E, cp: $$@)\n-\t$$(Q)cp $$< $$@\n-\n-$$(HLIB$(2)_H_$(4))/librustc.rlib: \\\n-\t$$(TLIB$(1)_T_$(4)_H_$(3))/librustc.rlib \\\n-\t$$(HLIB$(2)_H_$(4))/libstd.rlib \\\n-\t$$(HLIB$(2)_H_$(4))/libextra.rlib \\\n-\t$$(HLIB$(2)_H_$(4))/$$(CFG_RUNTIME_$(4)) \\\n-\t| $$(HLIB$(2)_H_$(4))/\n-\t@$$(call E, cp: $$@)\n-\t$$(Q)cp $$< $$@\n+\t$$(call LIST_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBRUSTUV_RGLOB_$(4)),$$(notdir $$@))\n \n $$(HLIB$(2)_H_$(4))/$(CFG_RUSTLLVM_$(4)): \\\n \t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_RUSTLLVM_$(4)) \\"}, {"sha": "7d6c0ea5264268c742beb28e3d90d8dbcb0c2aec", "filename": "mk/install.mk", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/mk%2Finstall.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/mk%2Finstall.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Finstall.mk?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -88,7 +88,6 @@ install-target-$(1)-host-$(2): LIB_SOURCE_DIR=$$(TL$(1)$(2))\n install-target-$(1)-host-$(2): LIB_DESTIN_DIR=$$(PTL$(1)$(2))\n install-target-$(1)-host-$(2): $$(TSREQ$$(ISTAGE)_T_$(1)_H_$(2)) $$(SREQ$$(ISTAGE)_T_$(1)_H_$(2))\n \t$$(Q)$$(call MK_INSTALL_DIR,$$(PTL$(1)$(2)))\n-\t$$(Q)$$(call INSTALL_LIB,$$(CFG_RUNTIME_$(1)))\n \t$$(Q)$$(call INSTALL_LIB,$$(STDLIB_GLOB_$(1)))\n \t$$(Q)$$(call INSTALL_LIB,$$(EXTRALIB_GLOB_$(1)))\n \t$$(Q)$$(call INSTALL_LIB,$$(LIBRUSTUV_GLOB_$(1)))\n@@ -101,7 +100,6 @@ install-target-$(1)-host-$(2): LIB_SOURCE_DIR=$$(TL$(1)$(2))\n install-target-$(1)-host-$(2): LIB_DESTIN_DIR=$$(PTL$(1)$(2))\n install-target-$(1)-host-$(2): $$(CSREQ$$(ISTAGE)_T_$(1)_H_$(2))\n \t$$(Q)$$(call MK_INSTALL_DIR,$$(PTL$(1)$(2)))\n-\t$$(Q)$$(call INSTALL_LIB,$$(CFG_RUNTIME_$(1)))\n \t$$(Q)$$(call INSTALL_LIB,$$(CFG_RUSTLLVM_$(1)))\n \t$$(Q)$$(call INSTALL_LIB,$$(STDLIB_GLOB_$(1)))\n \t$$(Q)$$(call INSTALL_LIB,$$(EXTRALIB_GLOB_$(1)))\n@@ -144,13 +142,15 @@ install-host: $(CSREQ$(ISTAGE)_T_$(CFG_BUILD_)_H_$(CFG_BUILD_))\n \t$(Q)$(call INSTALL,$(HB2),$(PHB),rustpkg$(X_$(CFG_BUILD)))\n \t$(Q)$(call INSTALL,$(HB2),$(PHB),rustdoc$(X_$(CFG_BUILD)))\n \t$(Q)$(call INSTALL_LIB,$(STDLIB_GLOB_$(CFG_BUILD)))\n+\t$(Q)$(call INSTALL_LIB,$(STDLIB_RGLOB_$(CFG_BUILD)))\n \t$(Q)$(call INSTALL_LIB,$(EXTRALIB_GLOB_$(CFG_BUILD)))\n+\t$(Q)$(call INSTALL_LIB,$(EXTRALIB_RGLOB_$(CFG_BUILD)))\n \t$(Q)$(call INSTALL_LIB,$(LIBRUSTUV_GLOB_$(CFG_BUILD)))\n+\t$(Q)$(call INSTALL_LIB,$(LIBRUSTUV_RGLOB_$(CFG_BUILD)))\n \t$(Q)$(call INSTALL_LIB,$(LIBRUSTC_GLOB_$(CFG_BUILD)))\n \t$(Q)$(call INSTALL_LIB,$(LIBSYNTAX_GLOB_$(CFG_BUILD)))\n \t$(Q)$(call INSTALL_LIB,$(LIBRUSTPKG_GLOB_$(CFG_BUILD)))\n \t$(Q)$(call INSTALL_LIB,$(LIBRUSTDOC_GLOB_$(CFG_BUILD)))\n-\t$(Q)$(call INSTALL,$(HL),$(PHL),$(CFG_RUNTIME_$(CFG_BUILD)))\n \t$(Q)$(call INSTALL,$(HL),$(PHL),$(CFG_RUSTLLVM_$(CFG_BUILD)))\n \t$(Q)$(call INSTALL,$(S)/man,$(CFG_MANDIR)/man1,rustc.1)\n \t$(Q)$(call INSTALL,$(S)/man,$(CFG_MANDIR)/man1,rustdoc.1)\n@@ -167,11 +167,13 @@ uninstall:\n \t$(Q)rm -f $(PHB)/rustpkg$(X_$(CFG_BUILD))\n \t$(Q)rm -f $(PHB)/rustdoc$(X_$(CFG_BUILD))\n \t$(Q)rm -f $(PHL)/$(CFG_RUSTLLVM_$(CFG_BUILD))\n-\t$(Q)rm -f $(PHL)/$(CFG_RUNTIME_$(CFG_BUILD))\n \t$(Q)for i in \\\n           $(call HOST_LIB_FROM_HL_GLOB,$(STDLIB_GLOB_$(CFG_BUILD))) \\\n+          $(call HOST_LIB_FROM_HL_GLOB,$(STDLIB_RGLOB_$(CFG_BUILD))) \\\n           $(call HOST_LIB_FROM_HL_GLOB,$(EXTRALIB_GLOB_$(CFG_BUILD))) \\\n+          $(call HOST_LIB_FROM_HL_GLOB,$(EXTRALIB_RGLOB_$(CFG_BUILD))) \\\n           $(call HOST_LIB_FROM_HL_GLOB,$(LIBRUSTUV_GLOB_$(CFG_BUILD))) \\\n+          $(call HOST_LIB_FROM_HL_GLOB,$(LIBRUSTUV_RGLOB_$(CFG_BUILD))) \\\n           $(call HOST_LIB_FROM_HL_GLOB,$(LIBRUSTC_GLOB_$(CFG_BUILD))) \\\n           $(call HOST_LIB_FROM_HL_GLOB,$(LIBSYNTAX_GLOB_$(CFG_BUILD))) \\\n           $(call HOST_LIB_FROM_HL_GLOB,$(LIBRUSTPKG_GLOB_$(CFG_BUILD))) \\\n@@ -232,7 +234,6 @@ endif\n define INSTALL_RUNTIME_TARGET_N\n install-runtime-target-$(1)-host-$(2): $$(TSREQ$$(ISTAGE)_T_$(1)_H_$(2)) $$(SREQ$$(ISTAGE)_T_$(1)_H_$(2))\n \t$(Q)$(call ADB_SHELL,mkdir,$(CFG_RUNTIME_PUSH_DIR))\n-\t$(Q)$(call ADB_PUSH,$$(TL$(1)$(2))/$$(CFG_RUNTIME_$(1)),$(CFG_RUNTIME_PUSH_DIR))\n \t$(Q)$(call ADB_PUSH,$$(TL$(1)$(2))/$$(STDLIB_GLOB_$(1)),$(CFG_RUNTIME_PUSH_DIR))\n \t$(Q)$(call ADB_PUSH,$$(TL$(1)$(2))/$$(EXTRALIB_GLOB_$(1)),$(CFG_RUNTIME_PUSH_DIR))\n \t$(Q)$(call ADB_PUSH,$$(TL$(1)$(2))/$$(LIBRUSTUV_GLOB_$(1)),$(CFG_RUNTIME_PUSH_DIR))\n@@ -241,7 +242,6 @@ endef\n define INSTALL_RUNTIME_TARGET_CLEANUP_N\n install-runtime-target-$(1)-cleanup:\n \t$(Q)$(call ADB,remount)\n-\t$(Q)$(call ADB_SHELL,rm,$(CFG_RUNTIME_PUSH_DIR)/$(CFG_RUNTIME_$(1)))\n \t$(Q)$(call ADB_SHELL,rm,$(CFG_RUNTIME_PUSH_DIR)/$(STDLIB_GLOB_$(1)))\n \t$(Q)$(call ADB_SHELL,rm,$(CFG_RUNTIME_PUSH_DIR)/$(EXTRALIB_GLOB_$(1)))\n \t$(Q)$(call ADB_SHELL,rm,$(CFG_RUNTIME_PUSH_DIR)/$(LIBRUSTUV_GLOB_$(1)))"}, {"sha": "35d4279eaef97bb7f925e068b52da86bc1b47ce1", "filename": "mk/platform.mk", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/mk%2Fplatform.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/mk%2Fplatform.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fplatform.mk?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -138,6 +138,7 @@ endif\n endif\n endif\n \n+CFG_RLIB_GLOB=lib$(1)-*.rlib\n \n # x86_64-unknown-linux-gnu configuration\n CC_x86_64-unknown-linux-gnu=$(CC)"}, {"sha": "f27ed8714f471c12d0a800321a8b247bcaed065c", "filename": "mk/rt.mk", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -121,11 +121,9 @@ $$(RT_BUILD_DIR_$(1)_$(2))/arch/$$(HOST_$(1))/libmorestack.a: $$(MORESTACK_OBJS_\n \t@$$(call E, link: $$@)\n \t$$(Q)$(AR_$(1)) rcs $$@ $$^\n \n-$$(RT_BUILD_DIR_$(1)_$(2))/$(CFG_RUNTIME_$(1)): $$(RUNTIME_OBJS_$(1)_$(2)) $$(MKFILE_DEPS) \\\n-                        $$(RUNTIME_DEF_$(1)_$(2))\n+$$(RT_BUILD_DIR_$(1)_$(2))/$(CFG_RUNTIME_$(1)): $$(RUNTIME_OBJS_$(1)_$(2)) $$(MKFILE_DEPS)\n \t@$$(call E, link: $$@)\n-\t$$(Q)$$(call CFG_LINK_CXX_$(1),$$@, $$(RUNTIME_OBJS_$(1)_$(2)) \\\n-\t    $$(CFG_LIBUV_LINK_FLAGS_$(1)),$$(RUNTIME_DEF_$(1)_$(2)),$$(CFG_RUNTIME_$(1)))\n+\t$$(Q)$(AR_$(1)) rcs $$@ $$(RUNTIME_OBJS_$(1)_$(2))\n \n # These could go in rt.mk or rustllvm.mk, they're needed for both.\n "}, {"sha": "a8606cbdbcb658baa0368b9324ddd714aa17a1ff", "filename": "mk/target.mk", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/mk%2Ftarget.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/mk%2Ftarget.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftarget.mk?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -60,8 +60,10 @@ $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_STDLIB_$(2)): \\\n \t\t| $$(TLIB$(1)_T_$(2)_H_$(3))/\n \t@$$(call E, compile_and_link: $$@)\n \t$$(call REMOVE_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(STDLIB_GLOB_$(2)),$$(notdir $$@))\n+\t$$(call REMOVE_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(STDLIB_RGLOB_$(2)),$$(notdir $$@))\n \t$$(STAGE$(1)_T_$(2)_H_$(3)) $$(WFLAGS_ST$(1)) --out-dir $$(@D) $$< && touch $$@\n \t$$(call LIST_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(STDLIB_GLOB_$(2)),$$(notdir $$@))\n+\t$$(call LIST_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(STDLIB_RGLOB_$(2)),$$(notdir $$@))\n \n $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_EXTRALIB_$(2)): \\\n \t\t$$(EXTRALIB_CRATE) $$(EXTRALIB_INPUTS) \\\n@@ -70,8 +72,10 @@ $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_EXTRALIB_$(2)): \\\n \t\t| $$(TLIB$(1)_T_$(2)_H_$(3))/\n \t@$$(call E, compile_and_link: $$@)\n \t$$(call REMOVE_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(EXTRALIB_GLOB_$(2)),$$(notdir $$@))\n+\t$$(call REMOVE_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(EXTRALIB_RGLOB_$(2)),$$(notdir $$@))\n \t$$(STAGE$(1)_T_$(2)_H_$(3)) $$(WFLAGS_ST$(1)) --out-dir $$(@D) $$< && touch $$@\n \t$$(call LIST_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(EXTRALIB_GLOB_$(2)),$$(notdir $$@))\n+\t$$(call LIST_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(EXTRALIB_RGLOB_$(2)),$$(notdir $$@))\n \n $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTUV_$(2)): \\\n \t\t$$(LIBRUSTUV_CRATE) $$(LIBRUSTUV_INPUTS) \\\n@@ -82,11 +86,13 @@ $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTUV_$(2)): \\\n \t\t| $$(TLIB$(1)_T_$(2)_H_$(3))/\n \t@$$(call E, compile_and_link: $$@)\n \t$$(call REMOVE_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBRUSTUV_GLOB_$(2)),$$(notdir $$@))\n+\t$$(call REMOVE_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBRUSTUV_RGLOB_$(2)),$$(notdir $$@))\n \t$$(STAGE$(1)_T_$(2)_H_$(3)) $$(WFLAGS_ST$(1)) \\\n \t\t-L $$(UV_SUPPORT_DIR_$(2)) \\\n \t\t-L $$(dir $$(LIBUV_LIB_$(2))) \\\n \t\t--out-dir $$(@D) $$< && touch $$@\n \t$$(call LIST_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBRUSTUV_GLOB_$(2)),$$(notdir $$@))\n+\t$$(call LIST_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBRUSTUV_RGLOB_$(2)),$$(notdir $$@))\n \n $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBSYNTAX_$(3)): \\\n                 $$(LIBSYNTAX_CRATE) $$(LIBSYNTAX_INPUTS) \\"}, {"sha": "3b4a490f1adfc4cd857dbc9f698619babfdd846e", "filename": "mk/tests.mk", "status": "modified", "additions": 42, "deletions": 2, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -193,7 +193,7 @@ check-lite: cleantestlibs cleantmptestlogs \\\n \tcheck-stage2-std check-stage2-extra check-stage2-rpass \\\n \tcheck-stage2-rustuv \\\n \tcheck-stage2-rustpkg \\\n-\tcheck-stage2-rfail check-stage2-cfail\n+\tcheck-stage2-rfail check-stage2-cfail check-stage2-rmake\n \t$(Q)$(CFG_PYTHON) $(S)src/etc/check-summary.py tmp/*.log\n \n .PHONY: cleantmptestlogs cleantestlibs\n@@ -284,7 +284,8 @@ check-stage$(1)-T-$(2)-H-$(3)-exec:     \t\t\t\t\\\n \tcheck-stage$(1)-T-$(2)-H-$(3)-rfail-exec\t\t\t\\\n \tcheck-stage$(1)-T-$(2)-H-$(3)-cfail-exec\t\t\t\\\n \tcheck-stage$(1)-T-$(2)-H-$(3)-rpass-full-exec\t\t\t\\\n-        check-stage$(1)-T-$(2)-H-$(3)-crates-exec                      \\\n+\tcheck-stage$(1)-T-$(2)-H-$(3)-rmake-exec\t\t\t\\\n+        check-stage$(1)-T-$(2)-H-$(3)-crates-exec                       \\\n \tcheck-stage$(1)-T-$(2)-H-$(3)-bench-exec\t\t\t\\\n \tcheck-stage$(1)-T-$(2)-H-$(3)-debuginfo-exec \\\n \tcheck-stage$(1)-T-$(2)-H-$(3)-codegen-exec \\\n@@ -584,6 +585,10 @@ TEST_SREQ$(1)_T_$(2)_H_$(3) = \\\n # remove directive, if present, from CFG_RUSTC_FLAGS (issue #7898).\n CTEST_RUSTC_FLAGS := $$(subst --cfg ndebug,,$$(CFG_RUSTC_FLAGS))\n \n+# There's no need our entire test suite to take up gigabytes of space on disk\n+# including copies of libstd/libextra all over the place\n+CTEST_RUSTC_FLAGS := $$(CTEST_RUSTC_FLAGS) -Z prefer-dynamic\n+\n # The tests can not be optimized while the rest of the compiler is optimized, so\n # filter out the optimization (if any) from rustc and then figure out if we need\n # to be optimized\n@@ -766,6 +771,7 @@ TEST_GROUPS = \\\n \tcfail \\\n \tbench \\\n \tperf \\\n+\trmake \\\n \tdebuginfo \\\n \tcodegen \\\n \tdoc \\\n@@ -896,3 +902,37 @@ endef\n \n $(foreach host,$(CFG_HOST),\t\t\t\\\n  $(eval $(call DEF_CHECK_FAST_FOR_H,$(host))))\n+\n+RMAKE_TESTS := $(shell ls -d $(S)src/test/run-make/*/)\n+RMAKE_TESTS := $(RMAKE_TESTS:$(S)src/test/run-make/%/=%)\n+\n+define DEF_RMAKE_FOR_T_H\n+# $(1) the stage\n+# $(2) target triple\n+# $(3) host triple\n+\n+check-stage$(1)-T-$(2)-H-$(3)-rmake-exec: \\\n+\t\t$$(call TEST_OK_FILE,$(1),$(2),$(3),rmake)\n+\n+$$(call TEST_OK_FILE,$(1),$(2),$(3),rmake): \\\n+\t\t$$(RMAKE_TESTS:%=$(3)/test/run-make/%-$(1)-T-$(2)-H-$(3).ok)\n+\t@touch $$@\n+\n+$(3)/test/run-make/%-$(1)-T-$(2)-H-$(3).ok: \\\n+\t\t$(S)src/test/run-make/%/Makefile \\\n+\t\t$$(HBIN$(1)_H_$(3))/rustc$$(X_$(3))\n+\t@rm -rf $(3)/test/run-make/$$*\n+\t@mkdir -p $(3)/test/run-make/$$*\n+\t@echo maketest: $$*\n+\t$$(Q)python $(S)src/etc/maketest.py $$(dir $$<) \\\n+\t    $$(HBIN$(1)_H_$(3))/rustc$$(X_$(3)) \\\n+\t    $(3)/test/run-make/$$* \\\n+\t    \"$$(CC_$(3)) $$(CFG_GCCISH_CFLAGS_$(3))\"\n+\t@touch $$@\n+\n+endef\n+\n+$(foreach stage,$(STAGES), \\\n+ $(foreach target,$(CFG_TARGET), \\\n+  $(foreach host,$(CFG_HOST), \\\n+   $(eval $(call DEF_RMAKE_FOR_T_H,$(stage),$(target),$(host))))))"}, {"sha": "96c658e56864b2f3b3f2e6fc7a25cfc751936dd1", "filename": "src/etc/maketest.py", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Fetc%2Fmaketest.py", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Fetc%2Fmaketest.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fmaketest.py?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -0,0 +1,27 @@\n+# xfail-license\n+\n+import subprocess\n+import os\n+import sys\n+\n+os.putenv('RUSTC', os.path.abspath(sys.argv[2]))\n+os.putenv('TMPDIR', os.path.abspath(sys.argv[3]))\n+os.putenv('CC', sys.argv[4])\n+\n+proc = subprocess.Popen(['make', '-C', sys.argv[1]],\n+                        stdout = subprocess.PIPE,\n+                        stderr = subprocess.PIPE)\n+out, err = proc.communicate()\n+i = proc.wait()\n+\n+if i != 0:\n+\n+    print '----- ' + sys.argv[1] + \"\"\" --------------------\n+------ stdout ---------------------------------------------\n+\"\"\" + out + \"\"\"\n+------ stderr ---------------------------------------------\n+\"\"\" + err + \"\"\"\n+------        ---------------------------------------------\n+\"\"\"\n+    sys.exit(i)\n+"}, {"sha": "03ada0eef18331057b69642110b2eb9623f6d2ed", "filename": "src/etc/snapshot.py", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Fetc%2Fsnapshot.py", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Fetc%2Fsnapshot.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fsnapshot.py?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -31,31 +31,27 @@ def scrub(b):\n               \"lib/librustc-*.so\",\n               \"lib/libsyntax-*.so\",\n               \"lib/librustuv-*.so\",\n-              \"lib/librustrt.so\",\n               \"lib/librustllvm.so\"],\n     \"macos\": [\"bin/rustc\",\n               \"lib/libstd-*.dylib\",\n               \"lib/libextra-*.dylib\",\n               \"lib/librustc-*.dylib\",\n               \"lib/libsyntax-*.dylib\",\n               \"lib/librustuv-*.dylib\",\n-              \"lib/librustrt.dylib\",\n               \"lib/librustllvm.dylib\"],\n     \"winnt\": [\"bin/rustc.exe\",\n               \"bin/std-*.dll\",\n               \"bin/extra-*.dll\",\n               \"bin/rustc-*.dll\",\n               \"bin/syntax-*.dll\",\n               \"bin/rustuv-*.dll\",\n-              \"bin/rustrt.dll\",\n               \"bin/rustllvm.dll\"],\n     \"freebsd\": [\"bin/rustc\",\n                 \"lib/libstd-*.so\",\n                 \"lib/libextra-*.so\",\n                 \"lib/librustc-*.so\",\n                 \"lib/libsyntax-*.so\",\n                 \"lib/librustuv-*.so\",\n-                \"lib/librustrt.so\",\n                 \"lib/librustllvm.so\"]\n     }\n "}, {"sha": "a4a10ccfa73fa98067cf752ddc792750cf38b01d", "filename": "src/libextra/flate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibextra%2Fflate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibextra%2Fflate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fflate.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -23,7 +23,7 @@ use std::vec;\n pub mod rustrt {\n     use std::libc::{c_int, c_void, size_t};\n \n-    #[link_name = \"rustrt\"]\n+    #[link(name = \"rustrt\")]\n     extern {\n         pub fn tdefl_compress_mem_to_heap(psrc_buf: *c_void,\n                                           src_buf_len: size_t,"}, {"sha": "ce504d8bf6fcffc04f61ad8173d09fa9de2ed9eb", "filename": "src/libextra/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibextra%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibextra%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Flib.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -32,12 +32,15 @@ Rust extras are part of the standard Rust distribution.\n \n #[comment = \"Rust extras\"];\n #[license = \"MIT/ASL2\"];\n-#[crate_type = \"lib\"];\n+#[crate_type = \"lib\"]; // NOTE: remove after stage0 snapshot\n+#[crate_type = \"rlib\"];\n+#[crate_type = \"dylib\"];\n \n #[feature(macro_rules, globs, managed_boxes)];\n \n #[deny(non_camel_case_types)];\n #[deny(missing_doc)];\n+#[allow(attribute_usage)]; // NOTE: remove after the next snapshot\n \n use std::str::{StrSlice, OwnedStr};\n "}, {"sha": "9f5aaf3a426243940f29f6481b80febca7bde221", "filename": "src/librustc/back/archive.rs", "status": "added", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibrustc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibrustc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Farchive.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -0,0 +1,138 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! A helper class for dealing with static archives\n+\n+use driver::session::Session;\n+use metadata::filesearch;\n+\n+use std::io::fs;\n+use std::os;\n+use std::run::{ProcessOptions, Process, ProcessOutput};\n+use std::str;\n+use extra::tempfile::TempDir;\n+use syntax::abi;\n+\n+pub struct Archive {\n+    priv sess: Session,\n+    priv dst: Path,\n+}\n+\n+fn run_ar(sess: Session, args: &str, cwd: Option<&Path>,\n+        paths: &[&Path]) -> ProcessOutput {\n+    let ar = sess.opts.ar.clone().unwrap_or_else(|| ~\"ar\");\n+    let mut args = ~[args.to_owned()];\n+    let mut paths = paths.iter().map(|p| p.as_str().unwrap().to_owned());\n+    args.extend(&mut paths);\n+    let mut opts = ProcessOptions::new();\n+    opts.dir = cwd;\n+    debug!(\"{} {}\", ar, args.connect(\" \"));\n+    match cwd {\n+        Some(p) => { debug!(\"inside {}\", p.display()); }\n+        None => {}\n+    }\n+    let o = Process::new(ar, args.as_slice(), opts).finish_with_output();\n+    if !o.status.success() {\n+        sess.err(format!(\"{} failed with: {}\", ar, o.status));\n+        sess.note(format!(\"stdout ---\\n{}\", str::from_utf8(o.output)));\n+        sess.note(format!(\"stderr ---\\n{}\", str::from_utf8(o.error)));\n+        sess.abort_if_errors();\n+    }\n+    o\n+}\n+\n+impl Archive {\n+    /// Initializes a new static archive with the given object file\n+    pub fn create<'a>(sess: Session, dst: &'a Path,\n+                      initial_object: &'a Path) -> Archive {\n+        run_ar(sess, \"crus\", None, [dst, initial_object]);\n+        Archive { sess: sess, dst: dst.clone() }\n+    }\n+\n+    /// Opens an existing static archive\n+    pub fn open(sess: Session, dst: Path) -> Archive {\n+        assert!(dst.exists());\n+        Archive { sess: sess, dst: dst }\n+    }\n+\n+    /// Read a file in the archive\n+    pub fn read(&self, file: &str) -> ~[u8] {\n+        // Apparently if \"ar p\" is used on windows, it generates a corrupt file\n+        // which has bad headers and LLVM will immediately choke on it\n+        if cfg!(windows) && cfg!(windows) { // FIXME(#10734) double-and\n+            let loc = TempDir::new(\"rsar\").unwrap();\n+            let archive = os::make_absolute(&self.dst);\n+            run_ar(self.sess, \"x\", Some(loc.path()), [&archive,\n+                                                      &Path::init(file)]);\n+            fs::File::open(&loc.path().join(file)).read_to_end()\n+        } else {\n+            run_ar(self.sess, \"p\", None, [&self.dst, &Path::init(file)]).output\n+        }\n+    }\n+\n+    /// Adds all of the contents of a native library to this archive. This will\n+    /// search in the relevant locations for a library named `name`.\n+    pub fn add_native_library(&mut self, name: &str) {\n+        let location = self.find_library(name);\n+        self.add_archive(&location, name);\n+    }\n+\n+    /// Adds all of the contents of the rlib at the specified path to this\n+    /// archive.\n+    pub fn add_rlib(&mut self, rlib: &Path) {\n+        let name = rlib.filename_str().unwrap().split('-').next().unwrap();\n+        self.add_archive(rlib, name);\n+    }\n+\n+    fn add_archive(&mut self, archive: &Path, name: &str) {\n+        let loc = TempDir::new(\"rsar\").unwrap();\n+\n+        // First, extract the contents of the archive to a temporary directory\n+        let archive = os::make_absolute(archive);\n+        run_ar(self.sess, \"x\", Some(loc.path()), [&archive]);\n+\n+        // Next, we must rename all of the inputs to \"guaranteed unique names\".\n+        // The reason for this is that archives are keyed off the name of the\n+        // files, so if two files have the same name they will override one\n+        // another in the archive (bad).\n+        let files = fs::readdir(loc.path());\n+        let mut inputs = ~[];\n+        for file in files.iter() {\n+            let filename = file.filename_str().unwrap();\n+            let filename = format!(\"r-{}-{}\", name, filename);\n+            let new_filename = file.with_filename(filename);\n+            fs::rename(file, &new_filename);\n+            inputs.push(new_filename);\n+        }\n+\n+        // Finally, add all the renamed files to this archive\n+        let mut args = ~[&self.dst];\n+        args.extend(&mut inputs.iter());\n+        run_ar(self.sess, \"r\", None, args.as_slice());\n+    }\n+\n+    fn find_library(&self, name: &str) -> Path {\n+        let (prefix, ext) = match self.sess.targ_cfg.os {\n+            abi::OsWin32 => (\"\", \"lib\"), _ => (\"lib\", \"a\"),\n+        };\n+        let libname = format!(\"{}{}.{}\", prefix, name, ext);\n+\n+        let mut rustpath = filesearch::rust_path();\n+        rustpath.push(self.sess.filesearch.get_target_lib_path());\n+        let path = self.sess.opts.addl_lib_search_paths.iter();\n+        for path in path.chain(rustpath.iter()) {\n+            debug!(\"looking for {} inside {}\", name, path.display());\n+            let test = path.join(libname.clone());\n+            if test.exists() { return test }\n+        }\n+        self.sess.fatal(format!(\"could not find native static library `{}`, \\\n+                                 perhaps an -L flag is missing?\", name));\n+    }\n+}"}, {"sha": "c155f4bd15b899371e84b39e042badc1eccdc433", "filename": "src/librustc/back/arm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibrustc%2Fback%2Farm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibrustc%2Fback%2Farm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Farm.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -63,6 +63,6 @@ pub fn get_target_strs(target_triple: ~str, target_os: abi::Os) -> target_strs::\n \n         target_triple: target_triple,\n \n-        cc_args: ~[~\"-marm\"]\n+        cc_args: ~[~\"-marm\"],\n     };\n }"}, {"sha": "8119618da57dcda7f40214271d63c74217872a38", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 332, "deletions": 208, "changes": 540, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -9,14 +9,15 @@\n // except according to those terms.\n \n \n+use back::archive::Archive;\n use back::rpath;\n use driver::session::Session;\n use driver::session;\n use lib::llvm::llvm;\n use lib::llvm::ModuleRef;\n use lib;\n use metadata::common::LinkMeta;\n-use metadata::{encoder, cstore, filesearch};\n+use metadata::{encoder, cstore, filesearch, csearch};\n use middle::trans::context::CrateContext;\n use middle::trans::common::gensym_name;\n use middle::ty;\n@@ -30,7 +31,6 @@ use std::os::consts::{macos, freebsd, linux, android, win32};\n use std::ptr;\n use std::run;\n use std::str;\n-use std::vec;\n use std::io::fs;\n use syntax::abi;\n use syntax::ast;\n@@ -88,7 +88,6 @@ pub mod jit {\n     use driver::session::Session;\n     use lib::llvm::llvm;\n     use lib::llvm::{ModuleRef, ContextRef, ExecutionEngineRef};\n-    use metadata::cstore;\n \n     use std::c_str::ToCStr;\n     use std::cast;\n@@ -125,19 +124,6 @@ pub mod jit {\n             // core linked into rustc. We don't want that,\n             // incase the user wants to use an older extra library.\n \n-            let cstore = sess.cstore;\n-            let r = cstore::get_used_crate_files(cstore);\n-            for cratepath in r.iter() {\n-                debug!(\"linking: {}\", cratepath.display());\n-\n-                cratepath.with_c_str(|buf_t| {\n-                    if !llvm::LLVMRustLoadCrate(manager, buf_t) {\n-                        llvm_err(sess, ~\"Could not link\");\n-                    }\n-                    debug!(\"linked: {}\", cratepath.display());\n-                })\n-            }\n-\n             // We custom-build a JIT execution engine via some rust wrappers\n             // first. This wrappers takes ownership of the module passed in.\n             let ee = llvm::LLVMRustBuildJIT(manager, m, stacks);\n@@ -368,20 +354,20 @@ pub mod write {\n     }\n \n     pub fn run_assembler(sess: Session, assembly: &Path, object: &Path) {\n-        let cc_prog = super::get_cc_prog(sess);\n+        let cc = super::get_cc_prog(sess);\n \n         // FIXME (#9639): This needs to handle non-utf8 paths\n-        let cc_args = ~[\n+        let args = [\n             ~\"-c\",\n             ~\"-o\", object.as_str().unwrap().to_owned(),\n             assembly.as_str().unwrap().to_owned()];\n \n-        let prog = run::process_output(cc_prog, cc_args);\n+        debug!(\"{} {}\", cc, args.connect(\" \"));\n+        let prog = run::process_output(cc, args);\n \n         if !prog.status.success() {\n-            sess.err(format!(\"linking with `{}` failed: {}\", cc_prog, prog.status));\n-            sess.note(format!(\"{} arguments: {}\",\n-                        cc_prog, cc_args.connect(\" \")));\n+            sess.err(format!(\"linking with `{}` failed: {}\", cc, prog.status));\n+            sess.note(format!(\"{} arguments: {}\", cc, args.connect(\" \")));\n             sess.note(str::from_utf8(prog.error + prog.output));\n             sess.abort_if_errors();\n         }\n@@ -876,90 +862,71 @@ pub fn mangle_internal_name_by_path(ccx: &mut CrateContext, path: path) -> ~str\n     mangle(ccx.sess, path, None, None)\n }\n \n-\n-pub fn output_dll_filename(os: abi::Os, lm: LinkMeta) -> ~str {\n-    let (dll_prefix, dll_suffix) = match os {\n-        abi::OsWin32 => (win32::DLL_PREFIX, win32::DLL_SUFFIX),\n-        abi::OsMacos => (macos::DLL_PREFIX, macos::DLL_SUFFIX),\n-        abi::OsLinux => (linux::DLL_PREFIX, linux::DLL_SUFFIX),\n-        abi::OsAndroid => (android::DLL_PREFIX, android::DLL_SUFFIX),\n-        abi::OsFreebsd => (freebsd::DLL_PREFIX, freebsd::DLL_SUFFIX),\n-    };\n-    format!(\"{}{}-{}-{}{}\", dll_prefix, lm.name, lm.extras_hash, lm.vers, dll_suffix)\n+pub fn output_lib_filename(lm: LinkMeta) -> ~str {\n+    format!(\"{}-{}-{}\", lm.name, lm.extras_hash, lm.vers)\n }\n \n pub fn get_cc_prog(sess: Session) -> ~str {\n+    match sess.opts.linker {\n+        Some(ref linker) => return linker.to_owned(),\n+        None => {}\n+    }\n+\n     // In the future, FreeBSD will use clang as default compiler.\n     // It would be flexible to use cc (system's default C compiler)\n     // instead of hard-coded gcc.\n-    // For win32, there is no cc command, so we add a condition to make it use g++.\n-    // We use g++ rather than gcc because it automatically adds linker options required\n-    // for generation of dll modules that correctly register stack unwind tables.\n-    match sess.opts.linker {\n-        Some(ref linker) => linker.to_str(),\n-        None => match sess.targ_cfg.os {\n-            abi::OsAndroid =>\n-                match &sess.opts.android_cross_path {\n-                    &Some(ref path) => {\n-                        format!(\"{}/bin/arm-linux-androideabi-gcc\", *path)\n-                    }\n-                    &None => {\n-                        sess.fatal(\"need Android NDK path for linking \\\n-                                    (--android-cross-path)\")\n-                    }\n-                },\n-            abi::OsWin32 => ~\"g++\",\n-            _ => ~\"cc\"\n-        }\n+    // For win32, there is no cc command, so we add a condition to make it use\n+    // g++.  We use g++ rather than gcc because it automatically adds linker\n+    // options required for generation of dll modules that correctly register\n+    // stack unwind tables.\n+    match sess.targ_cfg.os {\n+        abi::OsAndroid => match sess.opts.android_cross_path {\n+            Some(ref path) => format!(\"{}/bin/arm-linux-androideabi-gcc\", *path),\n+            None => {\n+                sess.fatal(\"need Android NDK path for linking \\\n+                            (--android-cross-path)\")\n+            }\n+        },\n+        abi::OsWin32 => ~\"g++\",\n+        _ => ~\"cc\",\n     }\n }\n \n-// If the user wants an exe generated we need to invoke\n-// cc to link the object file with some libs\n+/// Perform the linkage portion of the compilation phase. This will generate all\n+/// of the requested outputs for this compilation session.\n pub fn link_binary(sess: Session,\n+                   crate_types: &[~str],\n                    obj_filename: &Path,\n                    out_filename: &Path,\n                    lm: LinkMeta) {\n-\n-    let cc_prog = get_cc_prog(sess);\n-    // The invocations of cc share some flags across platforms\n-\n-    let output = if *sess.building_library {\n-        let long_libname = output_dll_filename(sess.targ_cfg.os, lm);\n-        debug!(\"link_meta.name:  {}\", lm.name);\n-        debug!(\"long_libname: {}\", long_libname);\n-        debug!(\"out_filename: {}\", out_filename.display());\n-        let out_dirname = out_filename.dir_path();\n-        debug!(\"dirname(out_filename): {}\", out_dirname.display());\n-\n-        out_filename.with_filename(long_libname)\n+    let outputs = if sess.opts.test {\n+        // If we're generating a test executable, then ignore all other output\n+        // styles at all other locations\n+        ~[session::OutputExecutable]\n     } else {\n-        out_filename.clone()\n+        // Always generate whatever was specified on the command line, but also\n+        // look at what was in the crate file itself for generating output\n+        // formats.\n+        let mut outputs = sess.opts.outputs.clone();\n+        for ty in crate_types.iter() {\n+            if \"bin\" == *ty {\n+                outputs.push(session::OutputExecutable);\n+            } else if \"dylib\" == *ty || \"lib\" == *ty {\n+                outputs.push(session::OutputDylib);\n+            } else if \"rlib\" == *ty {\n+                outputs.push(session::OutputRlib);\n+            } else if \"staticlib\" == *ty {\n+                outputs.push(session::OutputStaticlib);\n+            }\n+        }\n+        if outputs.len() == 0 {\n+            outputs.push(session::OutputExecutable);\n+        }\n+        outputs\n     };\n \n-    debug!(\"output: {}\", output.display());\n-    let cc_args = link_args(sess, obj_filename, out_filename, lm);\n-    debug!(\"{} link args: {}\", cc_prog, cc_args.connect(\" \"));\n-    if (sess.opts.debugging_opts & session::print_link_args) != 0 {\n-        println!(\"{} link args: {}\", cc_prog, cc_args.connect(\" \"));\n-    }\n-\n-    // We run 'cc' here\n-    let prog = run::process_output(cc_prog, cc_args);\n-\n-    if !prog.status.success() {\n-        sess.err(format!(\"linking with `{}` failed: {}\", cc_prog, prog.status));\n-        sess.note(format!(\"{} arguments: {}\",\n-                    cc_prog, cc_args.connect(\" \")));\n-        sess.note(str::from_utf8(prog.error + prog.output));\n-        sess.abort_if_errors();\n-    }\n-\n-    // On OSX, debuggers needs this utility to get run to do some munging of the\n-    // symbols\n-    if sess.targ_cfg.os == abi::OsMacos && sess.opts.debuginfo {\n-        // FIXME (#9639): This needs to handle non-utf8 paths\n-        run::process_status(\"dsymutil\", [output.as_str().unwrap().to_owned()]);\n+    for output in outputs.move_iter() {\n+        link_binary_output(sess, output, obj_filename, out_filename, lm);\n     }\n \n     // Remove the temporary object file if we aren't saving temps\n@@ -971,174 +938,331 @@ pub fn link_binary(sess: Session,\n fn is_writeable(p: &Path) -> bool {\n     use std::io;\n \n-    !p.exists() ||\n-        (match io::result(|| p.stat()) {\n-            Err(..) => false,\n-            Ok(m) => m.perm & io::UserWrite == io::UserWrite\n-        })\n+    match io::result(|| p.stat()) {\n+        Err(..) => true,\n+        Ok(m) => m.perm & io::UserWrite == io::UserWrite\n+    }\n }\n \n-pub fn link_args(sess: Session,\n-                 obj_filename: &Path,\n-                 out_filename: &Path,\n-                 lm:LinkMeta) -> ~[~str] {\n-\n-    // Converts a library file-stem into a cc -l argument\n-    fn unlib(config: @session::config, stem: ~str) -> ~str {\n-        if stem.starts_with(\"lib\") &&\n-            config.os != abi::OsWin32 {\n-            stem.slice(3, stem.len()).to_owned()\n-        } else {\n-            stem\n+fn link_binary_output(sess: Session,\n+                      output: session::OutputStyle,\n+                      obj_filename: &Path,\n+                      out_filename: &Path,\n+                      lm: LinkMeta) {\n+    let libname = output_lib_filename(lm);\n+    let out_filename = match output {\n+        session::OutputRlib => {\n+            out_filename.with_filename(format!(\"lib{}.rlib\", libname))\n         }\n-    }\n-\n-\n-    let output = if *sess.building_library {\n-        let long_libname = output_dll_filename(sess.targ_cfg.os, lm);\n-        out_filename.with_filename(long_libname)\n-    } else {\n-        out_filename.clone()\n+        session::OutputDylib => {\n+            let (prefix, suffix) = match sess.targ_cfg.os {\n+                abi::OsWin32 => (win32::DLL_PREFIX, win32::DLL_SUFFIX),\n+                abi::OsMacos => (macos::DLL_PREFIX, macos::DLL_SUFFIX),\n+                abi::OsLinux => (linux::DLL_PREFIX, linux::DLL_SUFFIX),\n+                abi::OsAndroid => (android::DLL_PREFIX, android::DLL_SUFFIX),\n+                abi::OsFreebsd => (freebsd::DLL_PREFIX, freebsd::DLL_SUFFIX),\n+            };\n+            out_filename.with_filename(format!(\"{}{}{}\", prefix, libname, suffix))\n+        }\n+        session::OutputStaticlib => {\n+            out_filename.with_filename(format!(\"lib{}.a\", libname))\n+        }\n+        session::OutputExecutable => out_filename.clone(),\n     };\n \n     // Make sure the output and obj_filename are both writeable.\n     // Mac, FreeBSD, and Windows system linkers check this already --\n     // however, the Linux linker will happily overwrite a read-only file.\n     // We should be consistent.\n     let obj_is_writeable = is_writeable(obj_filename);\n-    let out_is_writeable = is_writeable(&output);\n+    let out_is_writeable = is_writeable(&out_filename);\n     if !out_is_writeable {\n         sess.fatal(format!(\"Output file {} is not writeable -- check its permissions.\",\n-                           output.display()));\n+                           out_filename.display()));\n     }\n     else if !obj_is_writeable {\n         sess.fatal(format!(\"Object file {} is not writeable -- check its permissions.\",\n                            obj_filename.display()));\n     }\n \n-    // The default library location, we need this to find the runtime.\n-    // The location of crates will be determined as needed.\n-    // FIXME (#9639): This needs to handle non-utf8 paths\n-    let lib_path = sess.filesearch.get_target_lib_path();\n-    let stage: ~str = ~\"-L\" + lib_path.as_str().unwrap();\n-\n-    let mut args = vec::append(~[stage], sess.targ_cfg.target_strs.cc_args);\n-\n-    // FIXME (#9639): This needs to handle non-utf8 paths\n-    args.push_all([\n-        ~\"-o\", output.as_str().unwrap().to_owned(),\n-        obj_filename.as_str().unwrap().to_owned()]);\n-\n-    let lib_cmd = match sess.targ_cfg.os {\n-        abi::OsMacos => ~\"-dynamiclib\",\n-        _ => ~\"-shared\"\n-    };\n+    match output {\n+        session::OutputRlib => {\n+            link_rlib(sess, obj_filename, &out_filename);\n+        }\n+        session::OutputStaticlib => {\n+            link_staticlib(sess, obj_filename, &out_filename);\n+        }\n+        session::OutputExecutable => {\n+            link_natively(sess, false, obj_filename, &out_filename);\n+        }\n+        session::OutputDylib => {\n+            link_natively(sess, true, obj_filename, &out_filename);\n+        }\n+    }\n+}\n \n-    // # Crate linking\n+// Create an 'rlib'\n+//\n+// An rlib in its current incarnation is essentially a renamed .a file. The\n+// rlib primarily contains the object file of the crate, but it also contains\n+// all of the object files from native libraries. This is done by unzipping\n+// native libraries and inserting all of the contents into this archive.\n+fn link_rlib(sess: Session, obj_filename: &Path,\n+             out_filename: &Path) -> Archive {\n+    let mut a = Archive::create(sess, out_filename, obj_filename);\n+    for &(ref l, kind) in cstore::get_used_libraries(sess.cstore).iter() {\n+        match kind {\n+            cstore::NativeStatic => {\n+                a.add_native_library(l.as_slice());\n+            }\n+            cstore::NativeUnknown => {}\n+        }\n+    }\n+    return a;\n+}\n \n-    let cstore = sess.cstore;\n-    let r = cstore::get_used_crate_files(cstore);\n-    // FIXME (#9639): This needs to handle non-utf8 paths\n-    for cratepath in r.iter() {\n-        if cratepath.extension_str() == Some(\"rlib\") {\n-            args.push(cratepath.as_str().unwrap().to_owned());\n-            continue;\n+// Create a static archive\n+//\n+// This is essentially the same thing as an rlib, but it also involves adding\n+// all of the upstream crates' objects into the the archive. This will slurp in\n+// all of the native libraries of upstream dependencies as well.\n+//\n+// Additionally, there's no way for us to link dynamic libraries, so we warn\n+// about all dynamic library dependencies that they're not linked in.\n+fn link_staticlib(sess: Session, obj_filename: &Path, out_filename: &Path) {\n+    let mut a = link_rlib(sess, obj_filename, out_filename);\n+    a.add_native_library(\"morestack\");\n+\n+    let crates = cstore::get_used_crates(sess.cstore, cstore::RequireStatic);\n+    for &(cnum, ref path) in crates.iter() {\n+        let p = match *path {\n+            Some(ref p) => p.clone(), None => {\n+                sess.err(format!(\"could not find rlib for: `{}`\",\n+                                 cstore::get_crate_data(sess.cstore, cnum).name));\n+                continue\n+            }\n+        };\n+        a.add_rlib(&p);\n+        let native_libs = csearch::get_native_libraries(sess.cstore, cnum);\n+        for lib in native_libs.iter() {\n+            sess.warn(format!(\"unlinked native library: {}\", *lib));\n         }\n-        let dir = cratepath.dirname_str().unwrap();\n-        if !dir.is_empty() { args.push(\"-L\" + dir); }\n-        let libarg = unlib(sess.targ_cfg, cratepath.filestem_str().unwrap().to_owned());\n-        args.push(\"-l\" + libarg);\n     }\n+}\n \n-    let ula = cstore::get_used_link_args(cstore);\n-    for arg in ula.iter() { args.push(arg.to_owned()); }\n+// Create a dynamic library or executable\n+//\n+// This will invoke the system linker/cc to create the resulting file. This\n+// links to all upstream files as well.\n+fn link_natively(sess: Session, dylib: bool, obj_filename: &Path,\n+                 out_filename: &Path) {\n+    // The invocations of cc share some flags across platforms\n+    let cc_prog = get_cc_prog(sess);\n+    let mut cc_args = sess.targ_cfg.target_strs.cc_args.clone();\n+    cc_args.push_all_move(link_args(sess, dylib, obj_filename, out_filename));\n+    if (sess.opts.debugging_opts & session::print_link_args) != 0 {\n+        println!(\"{} link args: {}\", cc_prog, cc_args.connect(\" \"));\n+    }\n \n-    // # Extern library linking\n+    // May have not found libraries in the right formats.\n+    sess.abort_if_errors();\n \n-    // User-supplied library search paths (-L on the cammand line) These are\n-    // the same paths used to find Rust crates, so some of them may have been\n-    // added already by the previous crate linking code. This only allows them\n-    // to be found at compile time so it is still entirely up to outside\n-    // forces to make sure that library can be found at runtime.\n+    // Invoke the system linker\n+    debug!(\"{} {}\", cc_prog, cc_args.connect(\" \"));\n+    let prog = run::process_output(cc_prog, cc_args);\n \n-    for path in sess.opts.addl_lib_search_paths.iter() {\n-        // FIXME (#9639): This needs to handle non-utf8 paths\n-        args.push(\"-L\" + path.as_str().unwrap().to_owned());\n+    if !prog.status.success() {\n+        sess.err(format!(\"linking with `{}` failed: {}\", cc_prog, prog.status));\n+        sess.note(format!(\"{} arguments: {}\", cc_prog, cc_args.connect(\" \")));\n+        sess.note(str::from_utf8(prog.error + prog.output));\n+        sess.abort_if_errors();\n     }\n \n-    let rustpath = filesearch::rust_path();\n-    for path in rustpath.iter() {\n+\n+    // On OSX, debuggers need this utility to get run to do some munging of\n+    // the symbols\n+    if sess.targ_cfg.os == abi::OsMacos && sess.opts.debuginfo {\n         // FIXME (#9639): This needs to handle non-utf8 paths\n-        args.push(\"-L\" + path.as_str().unwrap().to_owned());\n+        run::process_status(\"dsymutil\",\n+                            [out_filename.as_str().unwrap().to_owned()]);\n     }\n+}\n \n-    if sess.targ_cfg.os == abi::OsLinux {\n-        // GNU-style linkers will use this to omit linking to libraries which don't actually fulfill\n-        // any relocations, but only for libraries which follow this flag. Thus, use it before\n-        // specifing libraries to link to.\n-        args.push(~\"-Wl,--as-needed\");\n-    }\n+fn link_args(sess: Session,\n+             dylib: bool,\n+             obj_filename: &Path,\n+             out_filename: &Path) -> ~[~str] {\n \n-    // The names of the extern libraries\n-    let used_libs = cstore::get_used_libraries(cstore);\n-    for l in used_libs.iter() { args.push(~\"-l\" + *l); }\n+    // The default library location, we need this to find the runtime.\n+    // The location of crates will be determined as needed.\n+    // FIXME (#9639): This needs to handle non-utf8 paths\n+    let lib_path = sess.filesearch.get_target_lib_path();\n+    let stage: ~str = ~\"-L\" + lib_path.as_str().unwrap();\n \n-    if *sess.building_library {\n-        args.push(lib_cmd);\n+    let mut args = ~[stage];\n \n-        // On mac we need to tell the linker to let this library\n-        // be rpathed\n-        if sess.targ_cfg.os == abi::OsMacos {\n-            // FIXME (#9639): This needs to handle non-utf8 paths\n-            args.push(\"-Wl,-install_name,@rpath/\"\n-                      + output.filename_str().unwrap());\n-        }\n-    }\n+    // FIXME (#9639): This needs to handle non-utf8 paths\n+    args.push_all([\n+        ~\"-o\", out_filename.as_str().unwrap().to_owned(),\n+        obj_filename.as_str().unwrap().to_owned()]);\n \n-    // On linux librt and libdl are an indirect dependencies via rustrt,\n-    // and binutils 2.22+ won't add them automatically\n     if sess.targ_cfg.os == abi::OsLinux {\n-        // GNU-style linkers supports optimization with -O. --gc-sections removes metadata and\n-        // potentially other useful things, so don't include it. GNU ld doesn't need a numeric\n-        // argument, but other linkers do.\n-        if sess.opts.optimize == session::Default || sess.opts.optimize == session::Aggressive {\n+        // GNU-style linkers will use this to omit linking to libraries which\n+        // don't actually fulfill any relocations, but only for libraries which\n+        // follow this flag. Thus, use it before specifing libraries to link to.\n+        args.push(~\"-Wl,--as-needed\");\n+\n+        // GNU-style linkers support optimization with -O. --gc-sections\n+        // removes metadata and potentially other useful things, so don't\n+        // include it. GNU ld doesn't need a numeric argument, but other linkers\n+        // do.\n+        if sess.opts.optimize == session::Default ||\n+           sess.opts.optimize == session::Aggressive {\n             args.push(~\"-Wl,-O1\");\n         }\n+    }\n \n-        args.push_all([~\"-lrt\", ~\"-ldl\"]);\n+    add_upstream_rust_crates(&mut args, sess, dylib);\n+    add_local_native_libraries(&mut args, sess);\n \n-        // LLVM implements the `frem` instruction as a call to `fmod`,\n-        // which lives in libm. Similar to above, on some linuxes we\n-        // have to be explicit about linking to it. See #2510\n-        args.push(~\"-lm\");\n-    }\n-    else if sess.targ_cfg.os == abi::OsAndroid {\n-        args.push_all([~\"-ldl\", ~\"-llog\",  ~\"-lsupc++\", ~\"-lgnustl_shared\"]);\n-        args.push(~\"-lm\");\n+    // # Telling the linker what we're doing\n+\n+    if dylib {\n+        // On mac we need to tell the linker to let this library be rpathed\n+        if sess.targ_cfg.os == abi::OsMacos {\n+            args.push(~\"-dynamiclib\");\n+            args.push(~\"-Wl,-dylib\");\n+            // FIXME (#9639): This needs to handle non-utf8 paths\n+            args.push(~\"-Wl,-install_name,@rpath/\" +\n+                      out_filename.filename_str().unwrap());\n+        } else {\n+            args.push(~\"-shared\")\n+        }\n     }\n \n     if sess.targ_cfg.os == abi::OsFreebsd {\n-        args.push_all([~\"-pthread\", ~\"-lrt\",\n-                       ~\"-L/usr/local/lib\", ~\"-lexecinfo\",\n+        args.push_all([~\"-L/usr/local/lib\",\n                        ~\"-L/usr/local/lib/gcc46\",\n-                       ~\"-L/usr/local/lib/gcc44\", ~\"-lstdc++\",\n-                       ~\"-Wl,-z,origin\",\n-                       ~\"-Wl,-rpath,/usr/local/lib/gcc46\",\n-                       ~\"-Wl,-rpath,/usr/local/lib/gcc44\"]);\n+                       ~\"-L/usr/local/lib/gcc44\"]);\n     }\n \n     // Stack growth requires statically linking a __morestack function\n     args.push(~\"-lmorestack\");\n \n-    // Always want the runtime linked in\n-    args.push(~\"-lrustrt\");\n+    // FIXME (#2397): At some point we want to rpath our guesses as to\n+    // where extern libraries might live, based on the\n+    // addl_lib_search_paths\n+    args.push_all(rpath::get_rpath_flags(sess, out_filename));\n \n-    // FIXME (#2397): At some point we want to rpath our guesses as to where\n-    // extern libraries might live, based on the addl_lib_search_paths\n-    args.push_all(rpath::get_rpath_flags(sess, &output));\n-\n-    // Finally add all the linker arguments provided on the command line\n+    // Finally add all the linker arguments provided on the command line along\n+    // with any #[link_args] attributes found inside the crate\n     args.push_all(sess.opts.linker_args);\n-\n+    for arg in cstore::get_used_link_args(sess.cstore).iter() {\n+        args.push(arg.clone());\n+    }\n     return args;\n }\n+\n+// # Rust Crate linking\n+//\n+// Rust crates are not considered at all when creating an rlib output. All\n+// dependencies will be linked when producing the final output (instead of\n+// the intermediate rlib version)\n+fn add_upstream_rust_crates(args: &mut ~[~str], sess: Session,\n+                            dylib: bool) {\n+    // Converts a library file-stem into a cc -l argument\n+    fn unlib(config: @session::config, stem: &str) -> ~str {\n+        if stem.starts_with(\"lib\") &&\n+            config.os != abi::OsWin32 {\n+            stem.slice(3, stem.len()).to_owned()\n+        } else {\n+            stem.to_owned()\n+        }\n+    }\n+\n+    let cstore = sess.cstore;\n+    if !dylib && !sess.prefer_dynamic() {\n+        // With an executable, things get a little interesting. As a limitation\n+        // of the current implementation, we require that everything must be\n+        // static, or everything must be dynamic. The reasons for this are a\n+        // little subtle, but as with the above two cases, the goal is to\n+        // prevent duplicate copies of the same library showing up. For example,\n+        // a static immediate dependency might show up as an upstream dynamic\n+        // dependency and we currently have no way of knowing that. We know that\n+        // all dynamic libaries require dynamic dependencies (see above), so\n+        // it's satisfactory to include either all static libraries or all\n+        // dynamic libraries.\n+        let crates = cstore::get_used_crates(cstore,\n+                                             cstore::RequireStatic);\n+        if crates.iter().all(|&(_, ref p)| p.is_some()) {\n+            for &(cnum, ref path) in crates.iter() {\n+                let cratepath = path.clone().unwrap();\n+\n+                // If we're linking to the static version of the crate, then\n+                // we're mostly good to go. The caveat here is that we need to\n+                // pull in the static crate's native dependencies.\n+                args.push(cratepath.as_str().unwrap().to_owned());\n+\n+                let libs = csearch::get_native_libraries(sess.cstore, cnum);\n+                for lib in libs.iter() {\n+                    args.push(\"-l\" + *lib);\n+                }\n+            }\n+            return;\n+        }\n+    }\n+\n+    // This is a fallback of three different  cases of linking:\n+    //\n+    // * When creating a dynamic library, all inputs are required to be dynamic\n+    //   as well\n+    // * If an executable is created with a preference on dynamic linking, then\n+    //   this case is the fallback\n+    // * If an executable is being created, and one of the inputs is missing as\n+    //   a static library, then this is the fallback case.\n+    let crates = cstore::get_used_crates(cstore, cstore::RequireDynamic);\n+    for &(cnum, ref path) in crates.iter() {\n+        let cratepath = match *path {\n+            Some(ref p) => p.clone(),\n+            None => {\n+                sess.err(format!(\"could not find dynamic library for: `{}`\",\n+                                 cstore::get_crate_data(sess.cstore, cnum).name));\n+                return\n+            }\n+        };\n+        // Just need to tell the linker about where the library lives and what\n+        // its name is\n+        let dir = cratepath.dirname_str().unwrap();\n+        if !dir.is_empty() { args.push(\"-L\" + dir); }\n+        let libarg = unlib(sess.targ_cfg, cratepath.filestem_str().unwrap());\n+        args.push(\"-l\" + libarg);\n+    }\n+}\n+\n+// # Native library linking\n+//\n+// User-supplied library search paths (-L on the cammand line) These are\n+// the same paths used to find Rust crates, so some of them may have been\n+// added already by the previous crate linking code. This only allows them\n+// to be found at compile time so it is still entirely up to outside\n+// forces to make sure that library can be found at runtime.\n+//\n+// Also note that the native libraries linked here are only the ones located\n+// in the current crate. Upstream crates with native library dependencies\n+// may have their native library pulled in above.\n+fn add_local_native_libraries(args: &mut ~[~str], sess: Session) {\n+    for path in sess.opts.addl_lib_search_paths.iter() {\n+        // FIXME (#9639): This needs to handle non-utf8 paths\n+        args.push(\"-L\" + path.as_str().unwrap().to_owned());\n+    }\n+\n+    let rustpath = filesearch::rust_path();\n+    for path in rustpath.iter() {\n+        // FIXME (#9639): This needs to handle non-utf8 paths\n+        args.push(\"-L\" + path.as_str().unwrap().to_owned());\n+    }\n+\n+    for &(ref l, _) in cstore::get_used_libraries(sess.cstore).iter() {\n+        args.push(~\"-l\" + *l);\n+    }\n+}"}, {"sha": "ce716f6f94b3570e079ae24928f2b199a3616ca1", "filename": "src/librustc/back/mips.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibrustc%2Fback%2Fmips.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibrustc%2Fback%2Fmips.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Fmips.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -63,6 +63,6 @@ pub fn get_target_strs(target_triple: ~str, target_os: abi::Os) -> target_strs::\n \n         target_triple: target_triple,\n \n-        cc_args: ~[]\n+        cc_args: ~[],\n     };\n }"}, {"sha": "0853213a5294375f01a76910970b80ad537192f7", "filename": "src/librustc/back/rpath.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibrustc%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibrustc%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Frpath.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -21,27 +21,36 @@ fn not_win32(os: abi::Os) -> bool {\n   os != abi::OsWin32\n }\n \n-pub fn get_rpath_flags(sess: session::Session, out_filename: &Path)\n-                    -> ~[~str] {\n+pub fn get_rpath_flags(sess: session::Session, out_filename: &Path) -> ~[~str] {\n     let os = sess.targ_cfg.os;\n \n     // No rpath on windows\n     if os == abi::OsWin32 {\n         return ~[];\n     }\n \n+    let mut flags = ~[];\n+\n+    if sess.targ_cfg.os == abi::OsFreebsd {\n+        flags.push_all([~\"-Wl,-rpath,/usr/local/lib/gcc46\",\n+                        ~\"-Wl,-rpath,/usr/local/lib/gcc44\",\n+                        ~\"-Wl,-z,origin\"]);\n+    }\n+\n     debug!(\"preparing the RPATH!\");\n \n     let sysroot = sess.filesearch.sysroot();\n     let output = out_filename;\n-    let libs = cstore::get_used_crate_files(sess.cstore);\n+    let libs = cstore::get_used_crates(sess.cstore, cstore::RequireDynamic);\n+    let libs = libs.move_iter().filter_map(|(_, l)| l.map(|p| p.clone())).collect();\n     // We don't currently rpath extern libraries, but we know\n     // where rustrt is and we know every rust program needs it\n     let libs = vec::append_one(libs, get_sysroot_absolute_rt_lib(sess));\n \n     let rpaths = get_rpaths(os, sysroot, output, libs,\n                             sess.opts.target_triple);\n-    rpaths_to_flags(rpaths)\n+    flags.push_all(rpaths_to_flags(rpaths));\n+    flags\n }\n \n fn get_sysroot_absolute_rt_lib(sess: session::Session) -> Path {\n@@ -52,8 +61,11 @@ fn get_sysroot_absolute_rt_lib(sess: session::Session) -> Path {\n }\n \n pub fn rpaths_to_flags(rpaths: &[~str]) -> ~[~str] {\n-    // FIXME (#9639): This needs to handle non-utf8 paths\n-    rpaths.iter().map(|rpath| format!(\"-Wl,-rpath,{}\",*rpath)).collect()\n+    let mut ret = ~[];\n+    for rpath in rpaths.iter() {\n+        ret.push(\"-Wl,-rpath,\" + *rpath);\n+    }\n+    return ret;\n }\n \n fn get_rpaths(os: abi::Os,"}, {"sha": "8713323787825e3d4de0952577b16d086b2cc356", "filename": "src/librustc/back/target_strs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibrustc%2Fback%2Ftarget_strs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibrustc%2Fback%2Ftarget_strs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Ftarget_strs.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -14,5 +14,5 @@ pub struct t {\n     meta_sect_name: ~str,\n     data_layout: ~str,\n     target_triple: ~str,\n-    cc_args: ~[~str]\n+    cc_args: ~[~str],\n }"}, {"sha": "de0372b83b972453783381bcfd56ba85481c73cc", "filename": "src/librustc/back/x86.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibrustc%2Fback%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibrustc%2Fback%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Fx86.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -46,6 +46,6 @@ pub fn get_target_strs(target_triple: ~str, target_os: abi::Os) -> target_strs::\n \n         target_triple: target_triple,\n \n-        cc_args: ~[~\"-m32\"]\n+        cc_args: ~[~\"-m32\"],\n     };\n }"}, {"sha": "dce4de3dce3c10d593d232090213d9e58970e91b", "filename": "src/librustc/back/x86_64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibrustc%2Fback%2Fx86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibrustc%2Fback%2Fx86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Fx86_64.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -54,6 +54,6 @@ pub fn get_target_strs(target_triple: ~str, target_os: abi::Os) -> target_strs::\n \n         target_triple: target_triple,\n \n-        cc_args: ~[~\"-m64\"]\n+        cc_args: ~[~\"-m64\"],\n     };\n }"}, {"sha": "7d13cb2da6501eaf81c1201d228699266f0a8c88", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 46, "deletions": 39, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -11,7 +11,7 @@\n \n use back::link;\n use back::{arm, x86, x86_64, mips};\n-use driver::session::{Aggressive};\n+use driver::session::{Aggressive, OutputExecutable};\n use driver::session::{Session, Session_, No, Less, Default};\n use driver::session;\n use front;\n@@ -164,8 +164,11 @@ pub fn phase_2_configure_and_expand(sess: Session,\n                                     mut crate: ast::Crate) -> ast::Crate {\n     let time_passes = sess.time_passes();\n \n-    *sess.building_library = session::building_library(sess.opts.crate_type,\n-                                                       &crate, sess.opts.test);\n+    *sess.building_library = session::building_library(sess.opts, &crate);\n+    let want_exe = sess.opts.outputs.iter().any(|&o| o == OutputExecutable);\n+    if *sess.building_library && want_exe {\n+        sess.err(\"cannot build both a library and an executable\");\n+    }\n \n     time(time_passes, \"gated feature checking\", (), |_|\n          front::feature_gate::check_crate(sess, &crate));\n@@ -225,10 +228,8 @@ pub fn phase_3_run_analysis_passes(sess: Session,\n                        syntax::ast_map::map_crate(sess.diagnostic(), crate));\n \n     time(time_passes, \"external crate/lib resolution\", (), |_|\n-         creader::read_crates(sess.diagnostic(), crate, sess.cstore,\n-                              sess.filesearch,\n+         creader::read_crates(sess, crate,\n                               session::sess_os_to_meta_os(sess.targ_cfg.os),\n-                              sess.opts.is_static,\n                               token::get_ident_interner()));\n \n     let lang_items = time(time_passes, \"language item collection\", (), |_|\n@@ -330,7 +331,8 @@ pub fn phase_3_run_analysis_passes(sess: Session,\n pub struct CrateTranslation {\n     context: ContextRef,\n     module: ModuleRef,\n-    link: LinkMeta\n+    link: LinkMeta,\n+    crate_types: ~[~str],\n }\n \n /// Run the translation phase to LLVM, after which the AST and analysis can\n@@ -390,6 +392,7 @@ pub fn phase_6_link_output(sess: Session,\n                            outputs: &OutputFilenames) {\n     time(sess.time_passes(), \"linking\", (), |_|\n          link::link_binary(sess,\n+                           trans.crate_types,\n                            &outputs.obj_filename,\n                            &outputs.out_filename,\n                            trans.link));\n@@ -417,11 +420,6 @@ pub fn stop_after_phase_5(sess: Session) -> bool {\n         return true;\n     }\n \n-    if sess.opts.is_static && *sess.building_library {\n-        debug!(\"building static library, returning early from compile_input\");\n-        return true;\n-    }\n-\n     if sess.opts.jit {\n         debug!(\"running JIT, returning early from compile_input\");\n         return true;\n@@ -652,13 +650,21 @@ pub fn build_session_options(binary: @str,\n                              matches: &getopts::Matches,\n                              demitter: @diagnostic::Emitter)\n                              -> @session::options {\n-    let crate_type = if matches.opt_present(\"lib\") {\n-        session::lib_crate\n-    } else if matches.opt_present(\"bin\") {\n-        session::bin_crate\n-    } else {\n-        session::unknown_crate\n-    };\n+    let mut outputs = ~[];\n+    if matches.opt_present(\"rlib\") {\n+        outputs.push(session::OutputRlib)\n+    }\n+    if matches.opt_present(\"staticlib\") {\n+        outputs.push(session::OutputStaticlib)\n+    }\n+    // dynamic libraries are the \"compiler blesssed\" default library\n+    if matches.opt_present(\"dylib\") || matches.opt_present(\"lib\") {\n+        outputs.push(session::OutputDylib)\n+    }\n+    if matches.opt_present(\"bin\") {\n+        outputs.push(session::OutputExecutable)\n+    }\n+\n     let parse_only = matches.opt_present(\"parse-only\");\n     let no_trans = matches.opt_present(\"no-trans\");\n \n@@ -750,11 +756,10 @@ pub fn build_session_options(binary: @str,\n     let debuginfo = debugging_opts & session::debug_info != 0 ||\n         extra_debuginfo;\n \n-    let statik = debugging_opts & session::statik != 0;\n-\n     let addl_lib_search_paths = matches.opt_strs(\"L\").map(|s| {\n-      Path::init(s.as_slice())\n+        Path::init(s.as_slice())\n     }).move_iter().collect();\n+    let ar = matches.opt_str(\"ar\");\n     let linker = matches.opt_str(\"linker\");\n     let linker_args = matches.opt_strs(\"link-args\").flat_map( |a| {\n         a.split(' ').map(|arg| arg.to_owned()).collect()\n@@ -782,8 +787,7 @@ pub fn build_session_options(binary: @str,\n     };\n \n     let sopts = @session::options {\n-        crate_type: crate_type,\n-        is_static: statik,\n+        outputs: outputs,\n         gc: gc,\n         optimize: opt_level,\n         custom_passes: custom_passes,\n@@ -795,6 +799,7 @@ pub fn build_session_options(binary: @str,\n         jit: jit,\n         output_type: output_type,\n         addl_lib_search_paths: @mut addl_lib_search_paths,\n+        ar: ar,\n         linker: linker,\n         linker_args: linker_args,\n         maybe_sysroot: sysroot_opt,\n@@ -871,7 +876,6 @@ pub fn parse_pretty(sess: Session, name: &str) -> PpMode {\n // rustc command line options\n pub fn optgroups() -> ~[getopts::groups::OptGroup] {\n  ~[\n-  optflag(\"\",  \"bin\", \"Compile an executable crate (default)\"),\n   optflag(\"c\", \"\",    \"Compile and assemble, but do not link\"),\n   optmulti(\"\", \"cfg\", \"Configure the compilation\n                           environment\", \"SPEC\"),\n@@ -881,8 +885,13 @@ pub fn optgroups() -> ~[getopts::groups::OptGroup] {\n   optflag(\"h\", \"help\",\"Display this message\"),\n   optmulti(\"L\", \"\",   \"Add a directory to the library search path\",\n                               \"PATH\"),\n-  optflag(\"\",  \"lib\", \"Compile a library crate\"),\n+  optflag(\"\",  \"bin\", \"Compile an executable crate (default)\"),\n+  optflag(\"\",  \"lib\", \"Compile a rust library crate using the compiler's default\"),\n+  optflag(\"\",  \"rlib\", \"Compile a rust library crate as an rlib file\"),\n+  optflag(\"\",  \"staticlib\", \"Compile a static library crate\"),\n+  optflag(\"\",  \"dylib\", \"Compile a dynamic library crate\"),\n   optopt(\"\", \"linker\", \"Program to use for linking instead of the default.\", \"LINKER\"),\n+  optopt(\"\", \"ar\", \"Program to use for managing archives instead of the default.\", \"AR\"),\n   optmulti(\"\",  \"link-args\", \"FLAGS is a space-separated list of flags\n                             passed to the linker\", \"FLAGS\"),\n   optflag(\"\",  \"ls\",  \"List the symbols defined by a library crate\"),\n@@ -957,19 +966,16 @@ pub fn build_output_filenames(input: &input,\n     let obj_path;\n     let out_path;\n     let sopts = sess.opts;\n-    let stop_after_codegen =\n-        sopts.output_type != link::output_type_exe ||\n-            sopts.is_static && *sess.building_library;\n-\n-    let obj_suffix =\n-        match sopts.output_type {\n-          link::output_type_none => ~\"none\",\n-          link::output_type_bitcode => ~\"bc\",\n-          link::output_type_assembly => ~\"s\",\n-          link::output_type_llvm_assembly => ~\"ll\",\n-          // Object and exe output both use the '.o' extension here\n-          link::output_type_object | link::output_type_exe => ~\"o\"\n-        };\n+    let stop_after_codegen = sopts.output_type != link::output_type_exe;\n+\n+    let obj_suffix = match sopts.output_type {\n+        link::output_type_none => ~\"none\",\n+        link::output_type_bitcode => ~\"bc\",\n+        link::output_type_assembly => ~\"s\",\n+        link::output_type_llvm_assembly => ~\"ll\",\n+        // Object and exe output both use the '.o' extension here\n+        link::output_type_object | link::output_type_exe => ~\"o\"\n+    };\n \n     match *ofile {\n       None => {\n@@ -1047,6 +1053,7 @@ pub fn early_error(emitter: @diagnostic::Emitter, msg: &str) -> ! {\n \n pub fn list_metadata(sess: Session, path: &Path, out: @mut io::Writer) {\n     metadata::loader::list_file_metadata(\n+        sess,\n         token::get_ident_interner(),\n         session::sess_os_to_meta_os(sess.targ_cfg.os), path, out);\n }"}, {"sha": "e45ea533f7937bcbbbbe18f8c33d5d3534573963", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 37, "deletions": 112, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -13,7 +13,6 @@ use back::link;\n use back::target_strs;\n use back;\n use driver::driver::host_triple;\n-use driver::session;\n use metadata::filesearch;\n use metadata;\n use middle::lint;\n@@ -30,13 +29,6 @@ use syntax;\n \n use std::hashmap::{HashMap,HashSet};\n \n-#[deriving(Clone)]\n-pub enum crate_type {\n-    bin_crate,\n-    lib_crate,\n-    unknown_crate,\n-}\n-\n pub struct config {\n     os: abi::Os,\n     arch: abi::Architecture,\n@@ -66,16 +58,16 @@ pub static gc:                      uint = 1 << 17;\n pub static jit:                     uint = 1 << 18;\n pub static debug_info:              uint = 1 << 19;\n pub static extra_debug_info:        uint = 1 << 20;\n-pub static statik:                  uint = 1 << 21;\n-pub static print_link_args:         uint = 1 << 22;\n-pub static no_debug_borrows:        uint = 1 << 23;\n-pub static lint_llvm:               uint = 1 << 24;\n-pub static print_llvm_passes:       uint = 1 << 25;\n-pub static no_vectorize_loops:      uint = 1 << 26;\n-pub static no_vectorize_slp:        uint = 1 << 27;\n-pub static no_prepopulate_passes:   uint = 1 << 28;\n-pub static use_softfp:              uint = 1 << 29;\n-pub static gen_crate_map:           uint = 1 << 30;\n+pub static print_link_args:         uint = 1 << 21;\n+pub static no_debug_borrows:        uint = 1 << 22;\n+pub static lint_llvm:               uint = 1 << 23;\n+pub static print_llvm_passes:       uint = 1 << 24;\n+pub static no_vectorize_loops:      uint = 1 << 25;\n+pub static no_vectorize_slp:        uint = 1 << 26;\n+pub static no_prepopulate_passes:   uint = 1 << 27;\n+pub static use_softfp:              uint = 1 << 28;\n+pub static gen_crate_map:           uint = 1 << 29;\n+pub static prefer_dynamic:          uint = 1 << 30;\n \n pub fn debugging_opts_map() -> ~[(&'static str, &'static str, uint)] {\n     ~[(\"verbose\", \"in general, enable more debug printouts\", verbose),\n@@ -107,7 +99,6 @@ pub fn debugging_opts_map() -> ~[(&'static str, &'static str, uint)] {\n      (\"extra-debug-info\", \"Extra debugging info (experimental)\",\n       extra_debug_info),\n      (\"debug-info\", \"Produce debug info (experimental)\", debug_info),\n-     (\"static\", \"Use or produce static libraries or binaries (experimental)\", statik),\n      (\"no-debug-borrows\",\n       \"do not show where borrow checks fail\",\n       no_debug_borrows),\n@@ -129,6 +120,7 @@ pub fn debugging_opts_map() -> ~[(&'static str, &'static str, uint)] {\n       no_vectorize_slp),\n      (\"soft-float\", \"Generate software floating point library calls\", use_softfp),\n      (\"gen-crate-map\", \"Force generation of a toplevel crate map\", gen_crate_map),\n+     (\"prefer-dynamic\", \"Prefer dynamic linking to static linking\", prefer_dynamic),\n     ]\n }\n \n@@ -144,8 +136,8 @@ pub enum OptLevel {\n pub struct options {\n     // The crate config requested for the session, which may be combined\n     // with additional crate configurations during the compile process\n-    crate_type: crate_type,\n-    is_static: bool,\n+    outputs: ~[OutputStyle],\n+\n     gc: bool,\n     optimize: OptLevel,\n     custom_passes: ~[~str],\n@@ -159,6 +151,7 @@ pub struct options {\n     addl_lib_search_paths: @mut HashSet<Path>, // This is mutable for rustpkg, which\n                                                // updates search paths based on the\n                                                // parsed code\n+    ar: Option<~str>,\n     linker: Option<~str>,\n     linker_args: ~[~str],\n     maybe_sysroot: Option<@Path>,\n@@ -194,6 +187,14 @@ pub enum EntryFnType {\n     EntryNone,\n }\n \n+#[deriving(Eq, Clone)]\n+pub enum OutputStyle {\n+    OutputExecutable,\n+    OutputDylib,\n+    OutputRlib,\n+    OutputStaticlib,\n+}\n+\n pub struct Session_ {\n     targ_cfg: @config,\n     opts: @options,\n@@ -337,6 +338,9 @@ impl Session_ {\n     pub fn gen_crate_map(&self) -> bool {\n         self.debugging_opt(gen_crate_map)\n     }\n+    pub fn prefer_dynamic(&self) -> bool {\n+        self.debugging_opt(prefer_dynamic)\n+    }\n \n     // pointless function, now...\n     pub fn str_of(&self, id: ast::Ident) -> @str {\n@@ -357,8 +361,7 @@ impl Session_ {\n /// Some reasonable defaults\n pub fn basic_options() -> @options {\n     @options {\n-        crate_type: session::lib_crate,\n-        is_static: false,\n+        outputs: ~[],\n         gc: false,\n         optimize: No,\n         custom_passes: ~[],\n@@ -370,6 +373,7 @@ pub fn basic_options() -> @options {\n         jit: false,\n         output_type: link::output_type_exe,\n         addl_lib_search_paths: @mut HashSet::new(),\n+        ar: None,\n         linker: None,\n         linker_args: ~[],\n         maybe_sysroot: None,\n@@ -391,24 +395,17 @@ pub fn expect<T:Clone>(sess: Session, opt: Option<T>, msg: || -> ~str) -> T {\n     diagnostic::expect(sess.diagnostic(), opt, msg)\n }\n \n-pub fn building_library(req_crate_type: crate_type,\n-                        crate: &ast::Crate,\n-                        testing: bool) -> bool {\n-    match req_crate_type {\n-      bin_crate => false,\n-      lib_crate => true,\n-      unknown_crate => {\n-        if testing {\n-            false\n-        } else {\n-            match syntax::attr::first_attr_value_str_by_name(\n-                crate.attrs,\n-                \"crate_type\") {\n-              Some(s) => \"lib\" == s,\n-              _ => false\n-            }\n+pub fn building_library(options: &options, crate: &ast::Crate) -> bool {\n+    for output in options.outputs.iter() {\n+        match *output {\n+            OutputExecutable => {}\n+            OutputStaticlib | OutputDylib | OutputRlib => return true\n         }\n-      }\n+    }\n+    if options.test { return false }\n+    match syntax::attr::first_attr_value_str_by_name(crate.attrs, \"crate_type\") {\n+        Some(s) => \"lib\" == s || \"rlib\" == s || \"dylib\" == s || \"staticlib\" == s,\n+        _ => false\n     }\n }\n \n@@ -423,75 +420,3 @@ pub fn sess_os_to_meta_os(os: abi::Os) -> metadata::loader::Os {\n         abi::OsFreebsd => loader::OsFreebsd\n     }\n }\n-\n-#[cfg(test)]\n-mod test {\n-    use driver::session::{bin_crate, building_library, lib_crate};\n-    use driver::session::{unknown_crate};\n-\n-    use syntax::ast;\n-    use syntax::attr;\n-    use syntax::codemap;\n-\n-    fn make_crate_type_attr(t: @str) -> ast::Attribute {\n-        attr::mk_attr(attr::mk_name_value_item_str(@\"crate_type\", t))\n-    }\n-\n-    fn make_crate(with_bin: bool, with_lib: bool) -> @ast::Crate {\n-        let mut attrs = ~[];\n-        if with_bin {\n-            attrs.push(make_crate_type_attr(@\"bin\"));\n-        }\n-        if with_lib {\n-            attrs.push(make_crate_type_attr(@\"lib\"));\n-        }\n-        @ast::Crate {\n-            module: ast::_mod { view_items: ~[], items: ~[] },\n-            attrs: attrs,\n-            config: ~[],\n-            span: codemap::dummy_sp(),\n-        }\n-    }\n-\n-    #[test]\n-    fn bin_crate_type_attr_results_in_bin_output() {\n-        let crate = make_crate(true, false);\n-        assert!(!building_library(unknown_crate, crate, false));\n-    }\n-\n-    #[test]\n-    fn lib_crate_type_attr_results_in_lib_output() {\n-        let crate = make_crate(false, true);\n-        assert!(building_library(unknown_crate, crate, false));\n-    }\n-\n-    #[test]\n-    fn bin_option_overrides_lib_crate_type() {\n-        let crate = make_crate(false, true);\n-        assert!(!building_library(bin_crate, crate, false));\n-    }\n-\n-    #[test]\n-    fn lib_option_overrides_bin_crate_type() {\n-        let crate = make_crate(true, false);\n-        assert!(building_library(lib_crate, crate, false));\n-    }\n-\n-    #[test]\n-    fn bin_crate_type_is_default() {\n-        let crate = make_crate(false, false);\n-        assert!(!building_library(unknown_crate, crate, false));\n-    }\n-\n-    #[test]\n-    fn test_option_overrides_lib_crate_type() {\n-        let crate = make_crate(false, true);\n-        assert!(!building_library(unknown_crate, crate, true));\n-    }\n-\n-    #[test]\n-    fn test_option_does_not_override_requested_lib_type() {\n-        let crate = make_crate(false, false);\n-        assert!(building_library(lib_crate, crate, true));\n-    }\n-}"}, {"sha": "d18a8306812c96f3b1eaebfa0bd0e55304fda619", "filename": "src/librustc/front/feature_gate.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ffeature_gate.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -21,6 +21,7 @@\n use middle::lint;\n \n use syntax::ast;\n+use syntax::attr;\n use syntax::attr::AttrMetaMethods;\n use syntax::codemap::Span;\n use syntax::visit;\n@@ -41,6 +42,7 @@ static KNOWN_FEATURES: &'static [(&'static str, Status)] = &[\n     (\"managed_boxes\", Active),\n     (\"non_ascii_idents\", Active),\n     (\"thread_local\", Active),\n+    (\"link_args\", Active),\n \n     // These are used to test this portion of the compiler, they don't actually\n     // mean anything\n@@ -111,7 +113,8 @@ impl Visitor<()> for Context {\n \n     fn visit_item(&mut self, i: @ast::item, _:()) {\n         for attr in i.attrs.iter() {\n-            if \"thread_local\" == attr.name() {\n+            if \"thread_local\" == attr.name() &&\n+               cfg!(stage0, remove_this_on_next_snapshot) { // NOTE: snap rem\n                 self.gate_feature(\"thread_local\", i.span,\n                                   \"`#[thread_local]` is an experimental feature, and does not \\\n                                   currently handle destructors. There is no corresponding \\\n@@ -132,6 +135,16 @@ impl Visitor<()> for Context {\n                 }\n             }\n \n+            ast::item_foreign_mod(..) => {\n+                if attr::contains_name(i.attrs, \"link_args\") &&\n+                    cfg!(stage0, remove_this_on_next_snapshot) { // NOTE: snap\n+                    self.gate_feature(\"link_args\", i.span,\n+                                      \"the `link_args` attribute is not portable \\\n+                                       across platforms, it is recommended to \\\n+                                       use `#[link(name = \\\"foo\\\")]` instead\")\n+                }\n+            }\n+\n             _ => {}\n         }\n "}, {"sha": "e0073e7ce12e111890925667a09a290115a368bd", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -16,9 +16,11 @@\n \n #[comment = \"The Rust compiler\"];\n #[license = \"MIT/ASL2\"];\n-#[crate_type = \"lib\"];\n+#[crate_type = \"lib\"]; // NOTE: remove after stage0 snapshot\n+#[crate_type = \"dylib\"];\n \n #[feature(macro_rules, globs, struct_variant, managed_boxes)];\n+#[allow(attribute_usage)]; // NOTE: remove after the next snapshot\n \n extern mod extra;\n extern mod syntax;\n@@ -87,6 +89,7 @@ pub mod front {\n }\n \n pub mod back {\n+    pub mod archive;\n     pub mod link;\n     pub mod abi;\n     pub mod upcall;"}, {"sha": "5e5cc242358bf9bd9a2d9b288b4593bac0dba31a", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 37, "deletions": 27, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -14,7 +14,6 @@ use std::c_str::ToCStr;\n use std::hashmap::HashMap;\n use std::libc::{c_uint, c_ushort, c_void, free};\n use std::str::raw::from_c_str;\n-use std::option;\n \n use middle::trans::type_::Type;\n \n@@ -304,9 +303,16 @@ pub mod llvm {\n     use super::{ValueRef, TargetMachineRef, FileType};\n     use super::{CodeGenModel, RelocMode, CodeGenOptLevel};\n     use super::debuginfo::*;\n-    use std::libc::{c_char, c_int, c_longlong, c_ushort, c_uint, c_ulonglong};\n+    use std::libc::{c_char, c_int, c_longlong, c_ushort, c_uint, c_ulonglong,\n+                    size_t};\n \n+    #[cfg(stage0)]\n     #[link_args = \"-lrustllvm\"]\n+    extern {}\n+    #[cfg(not(stage0))] // if you're deleting this, put this on the block below\n+    #[link(name = \"rustllvm\")]\n+    extern {}\n+\n     extern {\n         /* Create and destroy contexts. */\n         pub fn LLVMContextCreate() -> ContextRef;\n@@ -1426,6 +1432,16 @@ pub mod llvm {\n             LLVMDisposeMemoryBuffer() to get rid of it. */\n         pub fn LLVMRustCreateMemoryBufferWithContentsOfFile(Path: *c_char)\n             -> MemoryBufferRef;\n+        /** Borrows the contents of the memory buffer (doesn't copy it) */\n+        pub fn LLVMCreateMemoryBufferWithMemoryRange(InputData: *c_char,\n+                                                     InputDataLength: size_t,\n+                                                     BufferName: *c_char,\n+                                                     RequiresNull: Bool)\n+            -> MemoryBufferRef;\n+        pub fn LLVMCreateMemoryBufferWithMemoryRangeCopy(InputData: *c_char,\n+                                                         InputDataLength: size_t,\n+                                                         BufferName: *c_char)\n+            -> MemoryBufferRef;\n \n         /** Returns a string describing the last error caused by an LLVMRust*\n             call. */\n@@ -1901,38 +1917,32 @@ pub fn mk_pass_manager() -> PassManager {\n \n /* Memory-managed interface to object files. */\n \n-pub struct object_file_res {\n-    ObjectFile: ObjectFileRef,\n+pub struct ObjectFile {\n+    llof: ObjectFileRef,\n }\n \n-impl Drop for object_file_res {\n-    fn drop(&mut self) {\n+impl ObjectFile {\n+    // This will take ownership of llmb\n+    pub fn new(llmb: MemoryBufferRef) -> Option<ObjectFile> {\n         unsafe {\n-            llvm::LLVMDisposeObjectFile(self.ObjectFile);\n+            let llof = llvm::LLVMCreateObjectFile(llmb);\n+            if llof as int == 0 {\n+                llvm::LLVMDisposeMemoryBuffer(llmb);\n+                return None\n+            }\n+\n+            Some(ObjectFile {\n+                llof: llof,\n+            })\n         }\n     }\n }\n \n-pub fn object_file_res(ObjFile: ObjectFileRef) -> object_file_res {\n-    object_file_res {\n-        ObjectFile: ObjFile\n-    }\n-}\n-\n-pub struct ObjectFile {\n-    llof: ObjectFileRef,\n-    dtor: @object_file_res\n-}\n-\n-pub fn mk_object_file(llmb: MemoryBufferRef) -> Option<ObjectFile> {\n-    unsafe {\n-        let llof = llvm::LLVMCreateObjectFile(llmb);\n-        if llof as int == 0 { return option::None::<ObjectFile>; }\n-\n-        option::Some(ObjectFile {\n-            llof: llof,\n-            dtor: @object_file_res(llof)\n-        })\n+impl Drop for ObjectFile {\n+    fn drop(&mut self) {\n+        unsafe {\n+            llvm::LLVMDisposeObjectFile(self.llof);\n+        }\n     }\n }\n "}, {"sha": "5ed1eac746c495e0ab627d8c748a84b738323cf3", "filename": "src/librustc/metadata/common.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcommon.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -197,6 +197,8 @@ pub static tag_region_param_def: uint = 0x100;\n pub static tag_region_param_def_ident: uint = 0x101;\n pub static tag_region_param_def_def_id: uint = 0x102;\n \n+pub static tag_native_libraries: uint = 0x103;\n+pub static tag_native_libraries_lib: uint = 0x104;\n \n pub struct LinkMeta {\n     name: @str,"}, {"sha": "9d28a5abed2258a3f6ef5c8a80d9e014122cd779", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 73, "deletions": 80, "changes": 153, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -10,10 +10,9 @@\n \n //! Validates all used crates and extern libraries and loads their metadata\n \n-\n+use driver::session::Session;\n use metadata::cstore;\n use metadata::decoder;\n-use metadata::filesearch::FileSearch;\n use metadata::loader;\n \n use std::hashmap::HashMap;\n@@ -29,19 +28,13 @@ use syntax::visit;\n \n // Traverses an AST, reading all the information about use'd crates and extern\n // libraries necessary for later resolving, typechecking, linking, etc.\n-pub fn read_crates(diag: @mut span_handler,\n+pub fn read_crates(sess: Session,\n                    crate: &ast::Crate,\n-                   cstore: @mut cstore::CStore,\n-                   filesearch: @FileSearch,\n                    os: loader::Os,\n-                   statik: bool,\n                    intr: @ident_interner) {\n     let e = @mut Env {\n-        diag: diag,\n-        filesearch: filesearch,\n-        cstore: cstore,\n+        sess: sess,\n         os: os,\n-        statik: statik,\n         crate_cache: @mut ~[],\n         next_crate_num: 1,\n         intr: intr\n@@ -50,7 +43,7 @@ pub fn read_crates(diag: @mut span_handler,\n     visit_crate(e, crate);\n     visit::walk_crate(&mut v, crate, ());\n     dump_crates(*e.crate_cache);\n-    warn_if_multiple_versions(e, diag, *e.crate_cache);\n+    warn_if_multiple_versions(e, sess.diagnostic(), *e.crate_cache);\n }\n \n struct ReadCrateVisitor { e:@mut Env }\n@@ -113,18 +106,15 @@ fn warn_if_multiple_versions(e: @mut Env,\n }\n \n struct Env {\n-    diag: @mut span_handler,\n-    filesearch: @FileSearch,\n-    cstore: @mut cstore::CStore,\n+    sess: Session,\n     os: loader::Os,\n-    statik: bool,\n     crate_cache: @mut ~[cache_entry],\n     next_crate_num: ast::CrateNum,\n     intr: @ident_interner\n }\n \n fn visit_crate(e: &Env, c: &ast::Crate) {\n-    let cstore = e.cstore;\n+    let cstore = e.sess.cstore;\n \n     for a in c.attrs.iter().filter(|m| \"link_args\" == m.name()) {\n         match a.value_str() {\n@@ -146,7 +136,7 @@ fn visit_view_item(e: @mut Env, i: &ast::view_item) {\n                   let p_path = Path::init(p);\n                   match p_path.filestem_str() {\n                       None|Some(\"\") =>\n-                          e.diag.span_bug(i.span, \"Bad package path in `extern mod` item\"),\n+                          e.sess.span_bug(i.span, \"Bad package path in `extern mod` item\"),\n                       Some(s) =>\n                           vec::append(\n                               ~[attr::mk_name_value_item_str(@\"package_id\", p),\n@@ -162,68 +152,70 @@ fn visit_view_item(e: @mut Env, i: &ast::view_item) {\n                                    meta_items,\n                                    @\"\",\n                                    i.span);\n-          cstore::add_extern_mod_stmt_cnum(e.cstore, id, cnum);\n+          cstore::add_extern_mod_stmt_cnum(e.sess.cstore, id, cnum);\n       }\n       _ => ()\n   }\n }\n \n fn visit_item(e: &Env, i: @ast::item) {\n     match i.node {\n-      ast::item_foreign_mod(ref fm) => {\n-        if fm.abis.is_rust() || fm.abis.is_intrinsic() {\n-            return;\n-        }\n-\n-        let cstore = e.cstore;\n-        let link_args = i.attrs.iter()\n-            .filter_map(|at| if \"link_args\" == at.name() {Some(at)} else {None})\n-            .collect::<~[&ast::Attribute]>();\n-\n-        // XXX: two whom it may concern, this was the old logic applied to the\n-        //      ast's extern mod blocks which had names (we used to allow\n-        //      \"extern mod foo\"). This code was never run for anonymous blocks,\n-        //      and we now only have anonymous blocks. We're still in the midst\n-        //      of figuring out what the exact operations we'd like to support\n-        //      when linking external modules, but I wanted to leave this logic\n-        //      here for the time beging to refer back to it\n-\n-        //let mut already_added = false;\n-        //let link_name = i.attrs.iter()\n-        //    .find(|at| \"link_name\" == at.name())\n-        //    .and_then(|at| at.value_str());\n+        ast::item_foreign_mod(ref fm) => {\n+            if fm.abis.is_rust() || fm.abis.is_intrinsic() {\n+                return;\n+            }\n \n-        //let foreign_name = match link_name {\n-        //        Some(nn) => {\n-        //            if nn.is_empty() {\n-        //                e.diag.span_fatal(\n-        //                    i.span,\n-        //                    \"empty #[link_name] not allowed; use \\\n-        //                     #[nolink].\");\n-        //            }\n-        //            nn\n-        //        }\n-        //        None => token::ident_to_str(&i.ident)\n-        //    };\n-        //if !attr::contains_name(i.attrs, \"nolink\") {\n-        //    already_added =\n-        //        !cstore::add_used_library(cstore, foreign_name);\n-        //}\n-        //if !link_args.is_empty() && already_added {\n-        //    e.diag.span_fatal(i.span, ~\"library '\" + foreign_name +\n-        //               \"' already added: can't specify link_args.\");\n-        //}\n+            // First, add all of the custom link_args attributes\n+            let cstore = e.sess.cstore;\n+            let link_args = i.attrs.iter()\n+                .filter_map(|at| if \"link_args\" == at.name() {Some(at)} else {None})\n+                .to_owned_vec();\n+            for m in link_args.iter() {\n+                match m.value_str() {\n+                    Some(linkarg) => {\n+                        cstore::add_used_link_args(cstore, linkarg);\n+                    }\n+                    None => { /* fallthrough */ }\n+                }\n+            }\n \n-        for m in link_args.iter() {\n-            match m.value_str() {\n-                Some(linkarg) => {\n-                    cstore::add_used_link_args(cstore, linkarg);\n+            // Next, process all of the #[link(..)]-style arguments\n+            let cstore = e.sess.cstore;\n+            let link_args = i.attrs.iter()\n+                .filter_map(|at| if \"link\" == at.name() {Some(at)} else {None})\n+                .to_owned_vec();\n+            for m in link_args.iter() {\n+                match m.meta_item_list() {\n+                    Some(items) => {\n+                        let kind = items.iter().find(|k| {\n+                            \"kind\" == k.name()\n+                        }).and_then(|a| a.value_str());\n+                        let kind = match kind {\n+                            Some(k) if \"static\" == k => cstore::NativeStatic,\n+                            Some(k) => {\n+                                e.sess.span_fatal(i.span,\n+                                    format!(\"unknown kind: `{}`\", k));\n+                            }\n+                            None => cstore::NativeUnknown\n+                        };\n+                        let n = items.iter().find(|n| {\n+                            \"name\" == n.name()\n+                        }).and_then(|a| a.value_str());\n+                        let n = match n {\n+                            Some(n) => n,\n+                            None => {\n+                                e.sess.span_fatal(i.span,\n+                                    \"#[link(...)] specified without \\\n+                                     `name = \\\"foo\\\"`\");\n+                            }\n+                        };\n+                        cstore::add_used_library(cstore, n.to_owned(), kind);\n+                    }\n+                    None => {}\n                 }\n-                None => { /* fallthrough */ }\n             }\n         }\n-      }\n-      _ => { }\n+        _ => { }\n     }\n }\n \n@@ -263,24 +255,21 @@ fn resolve_crate(e: @mut Env,\n     match existing_match(e, metas, hash) {\n       None => {\n         let load_ctxt = loader::Context {\n-            diag: e.diag,\n-            filesearch: e.filesearch,\n+            sess: e.sess,\n             span: span,\n             ident: ident,\n             metas: metas,\n             hash: hash,\n             os: e.os,\n-            is_static: e.statik,\n             intr: e.intr\n         };\n-        let (lident, ldata) = loader::load_library_crate(&load_ctxt);\n+        let loader::Library {\n+            dylib, rlib, metadata\n+        } = load_ctxt.load_library_crate();\n \n-        let cfilename = Path::init(lident);\n-        let cdata = ldata;\n-\n-        let attrs = decoder::get_crate_attributes(cdata);\n+        let attrs = decoder::get_crate_attributes(metadata);\n         let linkage_metas = attr::find_linkage_metas(attrs);\n-        let hash = decoder::get_crate_hash(cdata);\n+        let hash = decoder::get_crate_hash(metadata);\n \n         // Claim this crate number and cache it\n         let cnum = e.next_crate_num;\n@@ -293,7 +282,7 @@ fn resolve_crate(e: @mut Env,\n         e.next_crate_num += 1;\n \n         // Now resolve the crates referenced by this crate\n-        let cnum_map = resolve_crate_deps(e, cdata);\n+        let cnum_map = resolve_crate_deps(e, metadata);\n \n         let cname =\n             match attr::last_meta_item_value_str_by_name(load_ctxt.metas,\n@@ -303,14 +292,18 @@ fn resolve_crate(e: @mut Env,\n             };\n         let cmeta = @cstore::crate_metadata {\n             name: cname,\n-            data: cdata,\n+            data: metadata,\n             cnum_map: cnum_map,\n             cnum: cnum\n         };\n \n-        let cstore = e.cstore;\n+        let cstore = e.sess.cstore;\n         cstore::set_crate_data(cstore, cnum, cmeta);\n-        cstore::add_used_crate_file(cstore, &cfilename);\n+        cstore::add_used_crate_source(cstore, cstore::CrateSource {\n+            dylib: dylib,\n+            rlib: rlib,\n+            cnum: cnum,\n+        });\n         return cnum;\n       }\n       Some(cnum) => {"}, {"sha": "96250fd5ec81d761260cc3a13941eb2f8c223568", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -262,6 +262,12 @@ pub fn get_item_visibility(cstore: @mut cstore::CStore,\n     decoder::get_item_visibility(cdata, def_id.node)\n }\n \n+pub fn get_native_libraries(cstore: @mut cstore::CStore,\n+                            crate_num: ast::CrateNum) -> ~[~str] {\n+    let cdata = cstore::get_crate_data(cstore, crate_num);\n+    decoder::get_native_libraries(cdata)\n+}\n+\n pub fn each_impl(cstore: @mut cstore::CStore,\n                  crate_num: ast::CrateNum,\n                  callback: |ast::DefId|) {"}, {"sha": "50da84d389538666cf8a8ed89430d6b3928782d2", "filename": "src/librustc/metadata/cstore.rs", "status": "modified", "additions": 52, "deletions": 20, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcstore.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -34,12 +34,33 @@ pub struct crate_metadata {\n     cnum: ast::CrateNum\n }\n \n+#[deriving(Eq)]\n+pub enum LinkagePreference {\n+    RequireDynamic,\n+    RequireStatic,\n+}\n+\n+#[deriving(Eq)]\n+pub enum NativeLibaryKind {\n+    NativeStatic,\n+    NativeUnknown,\n+}\n+\n+// Where a crate came from on the local filesystem. One of these two options\n+// must be non-None.\n+#[deriving(Eq)]\n+pub struct CrateSource {\n+    dylib: Option<Path>,\n+    rlib: Option<Path>,\n+    cnum: ast::CrateNum,\n+}\n+\n pub struct CStore {\n     priv metas: HashMap <ast::CrateNum, @crate_metadata>,\n     priv extern_mod_crate_map: extern_mod_crate_map,\n-    priv used_crate_files: ~[Path],\n-    priv used_libraries: ~[@str],\n-    priv used_link_args: ~[@str],\n+    priv used_crate_sources: ~[CrateSource],\n+    priv used_libraries: ~[(~str, NativeLibaryKind)],\n+    priv used_link_args: ~[~str],\n     intr: @ident_interner\n }\n \n@@ -50,7 +71,7 @@ pub fn mk_cstore(intr: @ident_interner) -> CStore {\n     return CStore {\n         metas: HashMap::new(),\n         extern_mod_crate_map: HashMap::new(),\n-        used_crate_files: ~[],\n+        used_crate_sources: ~[],\n         used_libraries: ~[],\n         used_link_args: ~[],\n         intr: intr\n@@ -88,39 +109,50 @@ pub fn iter_crate_data(cstore: &CStore, i: |ast::CrateNum, @crate_metadata|) {\n     }\n }\n \n-pub fn add_used_crate_file(cstore: &mut CStore, lib: &Path) {\n-    if !cstore.used_crate_files.contains(lib) {\n-        cstore.used_crate_files.push((*lib).clone());\n+pub fn add_used_crate_source(cstore: &mut CStore, src: CrateSource) {\n+    if !cstore.used_crate_sources.contains(&src) {\n+        cstore.used_crate_sources.push(src);\n     }\n }\n \n-pub fn get_used_crate_files(cstore: &CStore) -> ~[Path] {\n-    // XXX(pcwalton): Bad copy.\n-    return cstore.used_crate_files.clone();\n+pub fn get_used_crate_sources<'a>(cstore: &'a CStore) -> &'a [CrateSource] {\n+    cstore.used_crate_sources.as_slice()\n+}\n+\n+pub fn get_used_crates(cstore: &CStore, prefer: LinkagePreference)\n+    -> ~[(ast::CrateNum, Option<Path>)]\n+{\n+    let mut ret = ~[];\n+    for src in cstore.used_crate_sources.iter() {\n+        ret.push((src.cnum, match prefer {\n+            RequireDynamic => src.dylib.clone(),\n+            RequireStatic => src.rlib.clone(),\n+        }));\n+    }\n+    return ret;\n }\n \n-pub fn add_used_library(cstore: &mut CStore, lib: @str) -> bool {\n+pub fn add_used_library(cstore: &mut CStore,\n+                        lib: ~str, kind: NativeLibaryKind) -> bool {\n     assert!(!lib.is_empty());\n \n-    if cstore.used_libraries.iter().any(|x| x == &lib) { return false; }\n-    cstore.used_libraries.push(lib);\n+    if cstore.used_libraries.iter().any(|&(ref x, _)| x == &lib) { return false; }\n+    cstore.used_libraries.push((lib, kind));\n     true\n }\n \n-pub fn get_used_libraries<'a>(cstore: &'a CStore) -> &'a [@str] {\n-    let slice: &'a [@str] = cstore.used_libraries;\n-    slice\n+pub fn get_used_libraries<'a>(cstore: &'a CStore) -> &'a [(~str, NativeLibaryKind)] {\n+    cstore.used_libraries.as_slice()\n }\n \n pub fn add_used_link_args(cstore: &mut CStore, args: &str) {\n     for s in args.split(' ') {\n-        cstore.used_link_args.push(s.to_managed());\n+        cstore.used_link_args.push(s.to_owned());\n     }\n }\n \n-pub fn get_used_link_args<'a>(cstore: &'a CStore) -> &'a [@str] {\n-    let slice: &'a [@str] = cstore.used_link_args;\n-    slice\n+pub fn get_used_link_args<'a>(cstore: &'a CStore) -> &'a [~str] {\n+    cstore.used_link_args.as_slice()\n }\n \n pub fn add_extern_mod_stmt_cnum(cstore: &mut CStore,"}, {"sha": "441f1620e4d8995d03071c2ed994b50f4bac2f12", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -1529,3 +1529,13 @@ pub fn get_trait_of_method(cdata: Cmd, id: ast::NodeId, tcx: ty::ctxt)\n     }\n }\n \n+\n+pub fn get_native_libraries(cdata: Cmd) -> ~[~str] {\n+    let libraries = reader::get_doc(reader::Doc(cdata.data), tag_native_libraries);\n+    let mut result = ~[];\n+    reader::tagged_docs(libraries, tag_native_libraries_lib, |lib_doc| {\n+        result.push(lib_doc.as_str());\n+        true\n+    });\n+    return result;\n+}"}, {"sha": "269054c6fd21fdb9509144f42b5aab2dd7823aa7", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -75,6 +75,7 @@ struct Stats {\n     attr_bytes: u64,\n     dep_bytes: u64,\n     lang_item_bytes: u64,\n+    native_lib_bytes: u64,\n     impl_bytes: u64,\n     misc_bytes: u64,\n     item_bytes: u64,\n@@ -1633,6 +1634,23 @@ fn encode_lang_items(ecx: &EncodeContext, ebml_w: &mut writer::Encoder) {\n     ebml_w.end_tag();   // tag_lang_items\n }\n \n+fn encode_native_libraries(ecx: &EncodeContext, ebml_w: &mut writer::Encoder) {\n+    ebml_w.start_tag(tag_native_libraries);\n+\n+    for &(ref lib, kind) in cstore::get_used_libraries(ecx.cstore).iter() {\n+        match kind {\n+            cstore::NativeStatic => {} // these libraries are not propagated\n+            cstore::NativeUnknown => {\n+                ebml_w.start_tag(tag_native_libraries_lib);\n+                ebml_w.writer.write(lib.as_bytes());\n+                ebml_w.end_tag();\n+            }\n+        }\n+    }\n+\n+    ebml_w.end_tag();\n+}\n+\n struct ImplVisitor<'self> {\n     ecx: &'self EncodeContext<'self>,\n     ebml_w: &'self mut writer::Encoder,\n@@ -1750,6 +1768,7 @@ pub fn encode_metadata(parms: EncodeParams, crate: &Crate) -> ~[u8] {\n         attr_bytes: 0,\n         dep_bytes: 0,\n         lang_item_bytes: 0,\n+        native_lib_bytes: 0,\n         impl_bytes: 0,\n         misc_bytes: 0,\n         item_bytes: 0,\n@@ -1806,6 +1825,11 @@ pub fn encode_metadata(parms: EncodeParams, crate: &Crate) -> ~[u8] {\n     encode_lang_items(&ecx, &mut ebml_w);\n     ecx.stats.lang_item_bytes = wr.tell() - i;\n \n+    // Encode the native libraries used\n+    i = wr.tell();\n+    encode_native_libraries(&ecx, &mut ebml_w);\n+    ecx.stats.native_lib_bytes = wr.tell() - i;\n+\n     // Encode the def IDs of impls, for coherence checking.\n     i = wr.tell();\n     encode_impls(&ecx, crate, &mut ebml_w);\n@@ -1842,6 +1866,7 @@ pub fn encode_metadata(parms: EncodeParams, crate: &Crate) -> ~[u8] {\n         println!(\" attribute bytes: {}\", ecx.stats.attr_bytes);\n         println!(\"       dep bytes: {}\", ecx.stats.dep_bytes);\n         println!(\" lang item bytes: {}\", ecx.stats.lang_item_bytes);\n+        println!(\"    native bytes: {}\", ecx.stats.native_lib_bytes);\n         println!(\"      impl bytes: {}\", ecx.stats.impl_bytes);\n         println!(\"      misc bytes: {}\", ecx.stats.misc_bytes);\n         println!(\"      item bytes: {}\", ecx.stats.item_bytes);"}, {"sha": "40fca0f42f1a27d8a629b6b3835b394ff12562b3", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 186, "deletions": 95, "changes": 281, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -10,11 +10,12 @@\n \n //! Finds crate binaries and loads their metadata\n \n-\n-use lib::llvm::{False, llvm, mk_object_file, mk_section_iter};\n+use back::archive::Archive;\n+use driver::session::Session;\n+use lib::llvm::{False, llvm, ObjectFile, mk_section_iter};\n use metadata::decoder;\n use metadata::encoder;\n-use metadata::filesearch::{FileSearch, FileMatch, FileMatches, FileDoesntMatch};\n+use metadata::filesearch::{FileMatches, FileDoesntMatch};\n use metadata::filesearch;\n use syntax::codemap::Span;\n use syntax::diagnostic::span_handler;\n@@ -26,6 +27,7 @@ use syntax::attr::AttrMetaMethods;\n use std::c_str::ToCStr;\n use std::cast;\n use std::io;\n+use std::libc;\n use std::num;\n use std::option;\n use std::os::consts::{macos, freebsd, linux, android, win32};\n@@ -43,103 +45,176 @@ pub enum Os {\n }\n \n pub struct Context {\n-    diag: @mut span_handler,\n-    filesearch: @FileSearch,\n+    sess: Session,\n     span: Span,\n     ident: @str,\n     metas: ~[@ast::MetaItem],\n     hash: @str,\n     os: Os,\n-    is_static: bool,\n     intr: @ident_interner\n }\n \n-pub fn load_library_crate(cx: &Context) -> (~str, @~[u8]) {\n-    match find_library_crate(cx) {\n-      Some(t) => t,\n-      None => {\n-        cx.diag.span_fatal(cx.span,\n-                           format!(\"can't find crate for `{}`\",\n-                                cx.ident));\n-      }\n-    }\n+pub struct Library {\n+    dylib: Option<Path>,\n+    rlib: Option<Path>,\n+    metadata: @~[u8],\n }\n \n-fn find_library_crate(cx: &Context) -> Option<(~str, @~[u8])> {\n-    attr::require_unique_names(cx.diag, cx.metas);\n-    find_library_crate_aux(cx, libname(cx), cx.filesearch)\n-}\n+impl Context {\n+    pub fn load_library_crate(&self) -> Library {\n+        match self.find_library_crate() {\n+            Some(t) => t,\n+            None => {\n+                self.sess.span_fatal(self.span,\n+                                     format!(\"can't find crate for `{}`\",\n+                                             self.ident));\n+            }\n+        }\n+    }\n \n-fn libname(cx: &Context) -> (~str, ~str) {\n-    if cx.is_static { return (~\"lib\", ~\".rlib\"); }\n-    let (dll_prefix, dll_suffix) = match cx.os {\n-        OsWin32 => (win32::DLL_PREFIX, win32::DLL_SUFFIX),\n-        OsMacos => (macos::DLL_PREFIX, macos::DLL_SUFFIX),\n-        OsLinux => (linux::DLL_PREFIX, linux::DLL_SUFFIX),\n-        OsAndroid => (android::DLL_PREFIX, android::DLL_SUFFIX),\n-        OsFreebsd => (freebsd::DLL_PREFIX, freebsd::DLL_SUFFIX),\n-    };\n+    fn find_library_crate(&self) -> Option<Library> {\n+        attr::require_unique_names(self.sess.diagnostic(), self.metas);\n+        let filesearch = self.sess.filesearch;\n+        let crate_name = crate_name_from_metas(self.metas);\n+        let (dyprefix, dysuffix) = self.dylibname();\n \n-    (dll_prefix.to_owned(), dll_suffix.to_owned())\n-}\n+        // want: crate_name.dir_part() + prefix + crate_name.file_part + \"-\"\n+        let dylib_prefix = format!(\"{}{}-\", dyprefix, crate_name);\n+        let rlib_prefix = format!(\"lib{}-\", crate_name);\n \n-fn find_library_crate_aux(\n-    cx: &Context,\n-    (prefix, suffix): (~str, ~str),\n-    filesearch: @filesearch::FileSearch\n-) -> Option<(~str, @~[u8])> {\n-    let crate_name = crate_name_from_metas(cx.metas);\n-    // want: crate_name.dir_part() + prefix + crate_name.file_part + \"-\"\n-    let prefix = format!(\"{}{}-\", prefix, crate_name);\n-    let mut matches = ~[];\n-    filesearch::search(filesearch, |path| -> FileMatch {\n-      // FIXME (#9639): This needs to handle non-utf8 paths\n-      let path_str = path.filename_str();\n-      match path_str {\n-          None => FileDoesntMatch,\n-          Some(path_str) =>\n-              if path_str.starts_with(prefix) && path_str.ends_with(suffix) {\n-                  debug!(\"{} is a candidate\", path.display());\n-                  match get_metadata_section(cx.os, path) {\n-                      Some(cvec) =>\n-                          if !crate_matches(cvec, cx.metas, cx.hash) {\n-                              debug!(\"skipping {}, metadata doesn't match\",\n-                                  path.display());\n-                              FileDoesntMatch\n-                          } else {\n-                              debug!(\"found {} with matching metadata\", path.display());\n-                              // FIXME (#9639): This needs to handle non-utf8 paths\n-                              matches.push((path.as_str().unwrap().to_owned(), cvec));\n-                              FileMatches\n-                          },\n-                      _ => {\n-                          debug!(\"could not load metadata for {}\", path.display());\n-                          FileDoesntMatch\n-                      }\n-                  }\n-               }\n-               else {\n-                   FileDoesntMatch\n-               }\n-      }\n-    });\n+        let mut matches = ~[];\n+        filesearch::search(filesearch, |path| {\n+            match path.filename_str() {\n+                None => FileDoesntMatch,\n+                Some(file) => {\n+                    let (candidate, existing) = if file.starts_with(rlib_prefix) &&\n+                                                   file.ends_with(\".rlib\") {\n+                        debug!(\"{} is an rlib candidate\", path.display());\n+                        (true, self.add_existing_rlib(matches, path, file))\n+                    } else if file.starts_with(dylib_prefix) &&\n+                              file.ends_with(dysuffix) {\n+                        debug!(\"{} is a dylib candidate\", path.display());\n+                        (true, self.add_existing_dylib(matches, path, file))\n+                    } else {\n+                        (false, false)\n+                    };\n+\n+                    if candidate && existing {\n+                        FileMatches\n+                    } else if candidate {\n+                        match get_metadata_section(self.sess, self.os, path,\n+                                                   crate_name) {\n+                            Some(cvec) =>\n+                                if crate_matches(cvec, self.metas, self.hash) {\n+                                    debug!(\"found {} with matching metadata\",\n+                                           path.display());\n+                                    let (rlib, dylib) = if file.ends_with(\".rlib\") {\n+                                        (Some(path.clone()), None)\n+                                    } else {\n+                                        (None, Some(path.clone()))\n+                                    };\n+                                    matches.push(Library {\n+                                        rlib: rlib,\n+                                        dylib: dylib,\n+                                        metadata: cvec,\n+                                    });\n+                                    FileMatches\n+                                } else {\n+                                    debug!(\"skipping {}, metadata doesn't match\",\n+                                           path.display());\n+                                    FileDoesntMatch\n+                                },\n+                                _ => {\n+                                    debug!(\"could not load metadata for {}\",\n+                                           path.display());\n+                                    FileDoesntMatch\n+                                }\n+                        }\n+                    } else {\n+                        FileDoesntMatch\n+                    }\n+                }\n+            }\n+        });\n \n-    match matches.len() {\n-        0 => None,\n-        1 => Some(matches[0]),\n-        _ => {\n-            cx.diag.span_err(\n-                    cx.span, format!(\"multiple matching crates for `{}`\", crate_name));\n-                cx.diag.handler().note(\"candidates:\");\n-                for pair in matches.iter() {\n-                    let ident = pair.first();\n-                    let data = pair.second();\n-                    cx.diag.handler().note(format!(\"path: {}\", ident));\n-                    let attrs = decoder::get_crate_attributes(data);\n-                    note_linkage_attrs(cx.intr, cx.diag, attrs);\n+        match matches.len() {\n+            0 => None,\n+            1 => Some(matches[0]),\n+            _ => {\n+                self.sess.span_err(self.span,\n+                    format!(\"multiple matching crates for `{}`\", crate_name));\n+                self.sess.note(\"candidates:\");\n+                for lib in matches.iter() {\n+                    match lib.dylib {\n+                        Some(ref p) => {\n+                            self.sess.note(format!(\"path: {}\", p.display()));\n+                        }\n+                        None => {}\n+                    }\n+                    match lib.rlib {\n+                        Some(ref p) => {\n+                            self.sess.note(format!(\"path: {}\", p.display()));\n+                        }\n+                        None => {}\n+                    }\n+                    let attrs = decoder::get_crate_attributes(lib.metadata);\n+                    note_linkage_attrs(self.intr, self.sess.diagnostic(), attrs);\n                 }\n-                cx.diag.handler().abort_if_errors();\n+                self.sess.abort_if_errors();\n                 None\n+            }\n+        }\n+    }\n+\n+    fn add_existing_rlib(&self, libs: &mut [Library],\n+                         path: &Path, file: &str) -> bool {\n+        let (prefix, suffix) = self.dylibname();\n+        let file = file.slice_from(3); // chop off 'lib'\n+        let file = file.slice_to(file.len() - 5); // chop off '.rlib'\n+        let file = format!(\"{}{}{}\", prefix, file, suffix);\n+\n+        for lib in libs.mut_iter() {\n+            match lib.dylib {\n+                Some(ref p) if p.filename_str() == Some(file.as_slice()) => {\n+                    assert!(lib.rlib.is_none()); // XXX: legit compiler error\n+                    lib.rlib = Some(path.clone());\n+                    return true;\n+                }\n+                Some(..) | None => {}\n+            }\n+        }\n+        return false;\n+    }\n+\n+    fn add_existing_dylib(&self, libs: &mut [Library],\n+                          path: &Path, file: &str) -> bool {\n+        let (prefix, suffix) = self.dylibname();\n+        let file = file.slice_from(prefix.len());\n+        let file = file.slice_to(file.len() - suffix.len());\n+        let file = format!(\"lib{}.rlib\", file);\n+\n+        for lib in libs.mut_iter() {\n+            match lib.rlib {\n+                Some(ref p) if p.filename_str() == Some(file.as_slice()) => {\n+                    assert!(lib.dylib.is_none()); // XXX: legit compiler error\n+                    lib.dylib = Some(path.clone());\n+                    return true;\n+                }\n+                Some(..) | None => {}\n+            }\n+        }\n+        return false;\n+    }\n+\n+    // Returns the corresponding (prefix, suffix) that files need to have for\n+    // dynamic libraries\n+    fn dylibname(&self) -> (&'static str, &'static str) {\n+        match self.os {\n+            OsWin32 => (win32::DLL_PREFIX, win32::DLL_SUFFIX),\n+            OsMacos => (macos::DLL_PREFIX, macos::DLL_SUFFIX),\n+            OsLinux => (linux::DLL_PREFIX, linux::DLL_SUFFIX),\n+            OsAndroid => (android::DLL_PREFIX, android::DLL_SUFFIX),\n+            OsFreebsd => (freebsd::DLL_PREFIX, freebsd::DLL_SUFFIX),\n         }\n     }\n }\n@@ -196,16 +271,26 @@ pub fn metadata_matches(extern_metas: &[@ast::MetaItem],\n     local_metas.iter().all(|needed| attr::contains(extern_metas, *needed))\n }\n \n-fn get_metadata_section(os: Os,\n-                        filename: &Path) -> Option<@~[u8]> {\n+fn get_metadata_section(sess: Session, os: Os, filename: &Path,\n+                        crate_name: &str) -> Option<@~[u8]> {\n     unsafe {\n-        let mb = filename.with_c_str(|buf| {\n-            llvm::LLVMRustCreateMemoryBufferWithContentsOfFile(buf)\n-        });\n-        if mb as int == 0 { return option::None::<@~[u8]>; }\n-        let of = match mk_object_file(mb) {\n-            option::Some(of) => of,\n-            _ => return option::None::<@~[u8]>\n+        let mb = if filename.filename_str().unwrap().ends_with(\".rlib\") {\n+            let archive = Archive::open(sess, filename.clone());\n+            let contents = archive.read(crate_name + \".o\");\n+            let ptr = vec::raw::to_ptr(contents);\n+            crate_name.with_c_str(|name| {\n+                llvm::LLVMCreateMemoryBufferWithMemoryRangeCopy(\n+                    ptr as *i8, contents.len() as libc::size_t, name)\n+            })\n+        } else {\n+            filename.with_c_str(|buf| {\n+                llvm::LLVMRustCreateMemoryBufferWithContentsOfFile(buf)\n+            })\n+        };\n+        if mb as int == 0 { return None }\n+        let of = match ObjectFile::new(mb) {\n+            Some(of) => of,\n+            _ => return None\n         };\n         let si = mk_section_iter(of.llof);\n         while llvm::LLVMIsSectionIteratorAtEnd(of.llof, si.llsi) == False {\n@@ -266,11 +351,17 @@ pub fn read_meta_section_name(os: Os) -> &'static str {\n }\n \n // A diagnostic function for dumping crate metadata to an output stream\n-pub fn list_file_metadata(intr: @ident_interner,\n+pub fn list_file_metadata(sess: Session,\n+                          intr: @ident_interner,\n                           os: Os,\n                           path: &Path,\n                           out: @mut io::Writer) {\n-    match get_metadata_section(os, path) {\n+    // guess the crate name from the pathname\n+    let crate_name = path.filename_str().unwrap();\n+    let crate_name = if crate_name.starts_with(\"lib\") {\n+        crate_name.slice_from(3) } else { crate_name };\n+    let crate_name = crate_name.split('-').next().unwrap();\n+    match get_metadata_section(sess, os, path, crate_name) {\n       option::Some(bytes) => decoder::list_crate_metadata(intr, bytes, out),\n       option::None => {\n         write!(out, \"could not find metadata in {}.\\n\", path.display())"}, {"sha": "1b2ae78c627bc19411ee806cbb5bcbeda16f248a", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -808,7 +808,7 @@ fn check_heap_item(cx: &Context, it: &ast::item) {\n }\n \n static crate_attrs: &'static [&'static str] = &[\n-    \"crate_type\", \"link\", \"feature\", \"no_uv\", \"no_main\", \"no_std\",\n+    \"crate_type\", \"feature\", \"no_uv\", \"no_main\", \"no_std\",\n     \"desc\", \"comment\", \"license\", \"copyright\", // not used in rustc now\n ];\n \n@@ -830,7 +830,7 @@ static other_attrs: &'static [&'static str] = &[\n     \"deprecated\", \"experimental\", \"unstable\", \"stable\", \"locked\", \"frozen\", //item stability\n     \"crate_map\", \"cfg\", \"doc\", \"export_name\", \"link_section\", \"no_freeze\",\n     \"no_mangle\", \"no_send\", \"static_assert\", \"unsafe_no_drop_flag\",\n-    \"packed\", \"simd\", \"repr\", \"deriving\", \"unsafe_destructor\",\n+    \"packed\", \"simd\", \"repr\", \"deriving\", \"unsafe_destructor\", \"link\",\n \n     //mod-level\n     \"path\", \"link_name\", \"link_args\", \"nolink\", \"macro_escape\", \"no_implicit_prelude\","}, {"sha": "deb4f00d7a02fb425249a1f658d0d43408545ac0", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 21, "deletions": 25, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -77,14 +77,14 @@ use extra::time;\n use extra::sort;\n use syntax::ast::Name;\n use syntax::ast_map::{path, path_elt_to_str, path_name, path_pretty_name};\n-use syntax::ast_util::{local_def};\n+use syntax::ast_util::{local_def, is_local};\n use syntax::attr;\n-use syntax::attr::AttrMetaMethods;\n use syntax::codemap::Span;\n use syntax::parse::token;\n use syntax::parse::token::{special_idents};\n use syntax::print::pprust::stmt_to_str;\n use syntax::{ast, ast_util, codemap, ast_map};\n+use syntax::attr::AttrMetaMethods;\n use syntax::abi::{X86, X86_64, Arm, Mips, Rust, RustIntrinsic, OsWin32, OsAndroid};\n use syntax::visit;\n use syntax::visit::Visitor;\n@@ -2996,7 +2996,7 @@ pub fn decl_crate_map(sess: session::Session, mapmeta: LinkMeta,\n     return map;\n }\n \n-pub fn fill_crate_map(ccx: &mut CrateContext, map: ValueRef) {\n+pub fn fill_crate_map(ccx: @mut CrateContext, map: ValueRef) {\n     let mut subcrates: ~[ValueRef] = ~[];\n     let mut i = 1;\n     let cstore = ccx.sess.cstore;\n@@ -3014,19 +3014,20 @@ pub fn fill_crate_map(ccx: &mut CrateContext, map: ValueRef) {\n         subcrates.push(p2i(ccx, cr));\n         i += 1;\n     }\n-    let event_loop_factory = if !*ccx.sess.building_library {\n-        match ccx.tcx.lang_items.event_loop_factory() {\n-            Some(did) => unsafe {\n+    let event_loop_factory = match ccx.tcx.lang_items.event_loop_factory() {\n+        Some(did) => unsafe {\n+            if is_local(did) {\n+                llvm::LLVMConstPointerCast(get_item_val(ccx, did.node),\n+                                           ccx.int_type.ptr_to().to_ref())\n+            } else {\n                 let name = csearch::get_symbol(ccx.sess.cstore, did);\n                 let global = name.with_c_str(|buf| {\n                     llvm::LLVMAddGlobal(ccx.llmod, ccx.int_type.to_ref(), buf)\n                 });\n                 global\n-            },\n-            None => C_null(ccx.int_type.ptr_to())\n-        }\n-    } else {\n-        C_null(ccx.int_type.ptr_to())\n+            }\n+        },\n+        None => C_null(ccx.int_type.ptr_to())\n     };\n     unsafe {\n         let maptype = Type::array(&ccx.int_type, subcrates.len() as u64);\n@@ -3106,18 +3107,6 @@ pub fn write_metadata(cx: &CrateContext, crate: &ast::Crate) {\n     }\n }\n \n-// Writes the current ABI version into the crate.\n-pub fn write_abi_version(ccx: &mut CrateContext) {\n-    unsafe {\n-        let llval = C_uint(ccx, abi::abi_version);\n-        let llglobal = \"rust_abi_version\".with_c_str(|buf| {\n-            llvm::LLVMAddGlobal(ccx.llmod, val_ty(llval).to_ref(), buf)\n-        });\n-        llvm::LLVMSetInitializer(llglobal, llval);\n-        llvm::LLVMSetGlobalConstant(llglobal, True);\n-    }\n-}\n-\n pub fn trans_crate(sess: session::Session,\n                    crate: ast::Crate,\n                    analysis: &CrateAnalysis,\n@@ -3177,7 +3166,6 @@ pub fn trans_crate(sess: session::Session,\n     }\n \n     glue::emit_tydescs(ccx);\n-    write_abi_version(ccx);\n     if ccx.sess.opts.debuginfo {\n         debuginfo::finalize(ccx);\n     }\n@@ -3217,10 +3205,18 @@ pub fn trans_crate(sess: session::Session,\n     let llcx = ccx.llcx;\n     let link_meta = ccx.link_meta;\n     let llmod = ccx.llmod;\n+    let crate_types = crate.attrs.iter().filter_map(|a| {\n+        if \"crate_type\" == a.name() {\n+            a.value_str()\n+        } else {\n+            None\n+        }\n+    }).map(|a| a.to_owned()).collect();\n \n     return CrateTranslation {\n         context: llcx,\n         module: llmod,\n-        link: link_meta\n+        link: link_meta,\n+        crate_types: crate_types,\n     };\n }"}, {"sha": "3dcc1dbebcab2d932bb5c2470e673fde9ea9d25a", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -67,7 +67,7 @@ struct buf {\n }\n \n // sundown FFI\n-#[link_args = \"-lsundown\"]\n+#[link(name = \"sundown\", kind = \"static\")]\n extern {\n     fn sdhtml_renderer(callbacks: *sd_callbacks,\n                        options_ptr: *html_renderopt,"}, {"sha": "7cab7846f15b85b95fc31c0701e14988c370e9b0", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -16,7 +16,8 @@\n \n #[desc = \"rustdoc, the Rust documentation extractor\"];\n #[license = \"MIT/ASL2\"];\n-#[crate_type = \"lib\"];\n+#[crate_type = \"lib\"]; // NOTE: remove after stage0 snapshot\n+#[crate_type = \"dylib\"];\n \n #[feature(globs, struct_variant, managed_boxes)];\n "}, {"sha": "157d8ba0105fce76649d8030557c7ec18c79c3fc", "filename": "src/librustpkg/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibrustpkg%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibrustpkg%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Flib.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -17,7 +17,8 @@\n        url = \"https://github.com/mozilla/rust/tree/master/src/librustpkg\")];\n \n #[license = \"MIT/ASL2\"];\n-#[crate_type = \"lib\"];\n+#[crate_type = \"lib\"]; // NOTE: remove after stage0 snapshot\n+#[crate_type = \"dylib\"];\n \n #[feature(globs, managed_boxes)];\n \n@@ -114,7 +115,7 @@ impl<'self> PkgScript<'self> {\n         let options = @session::options {\n             binary: binary,\n             maybe_sysroot: Some(@sysroot),\n-            crate_type: session::bin_crate,\n+            outputs: ~[session::OutputExecutable],\n             .. (*session::basic_options()).clone()\n         };\n         let input = driver::file_input(script.clone());"}, {"sha": "3b177b449d9109523d8d43e77a13ab741a2721fb", "filename": "src/librustpkg/tests.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibrustpkg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibrustpkg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftests.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -36,6 +36,7 @@ use path_util::{target_executable_in_workspace, target_test_in_workspace,\n                chmod_read_only, platform_library_name};\n use rustc::back::link::get_cc_prog;\n use rustc::metadata::filesearch::rust_path;\n+use rustc::driver::session;\n use rustc::driver::driver::{build_session, build_session_options, host_triple, optgroups};\n use syntax::diagnostic;\n use target::*;\n@@ -1829,10 +1830,11 @@ fn test_linker_build() {\n                                 @diagnostic::Emitter);\n     let test_sys = test_sysroot();\n     // FIXME (#9639): This needs to handle non-utf8 paths\n+    let cc = get_cc_prog(sess);\n     command_line_test([test_sys.as_str().unwrap().to_owned(),\n                        ~\"install\",\n                        ~\"--linker\",\n-                       get_cc_prog(sess),\n+                       cc,\n                        ~\"foo\"],\n                       workspace);\n     assert_executable_exists(workspace, \"foo\");"}, {"sha": "a8dbf145e533321b082413fd6168f23e64eeea6b", "filename": "src/librustpkg/util.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibrustpkg%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibrustpkg%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Futil.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -25,7 +25,6 @@ use syntax::visit::Visitor;\n use syntax::util::small_vector::SmallVector;\n use rustc::back::link::output_type_exe;\n use rustc::back::link;\n-use rustc::driver::session::{lib_crate, bin_crate};\n use context::{in_target, StopBefore, Link, Assemble, BuildContext};\n use package_id::PkgId;\n use package_source::PkgSrc;\n@@ -195,8 +194,8 @@ pub fn compile_input(context: &BuildContext,\n     debug!(\"compile_input's sysroot = {}\", csysroot.display());\n \n     let crate_type = match what {\n-        Lib => lib_crate,\n-        Test | Bench | Main => bin_crate\n+        Lib => session::OutputDylib,\n+        Test | Bench | Main => session::OutputExecutable,\n     };\n     let matches = getopts(debug_flags()\n                           + match what {\n@@ -239,7 +238,7 @@ pub fn compile_input(context: &BuildContext,\n     debug!(\"Output type = {:?}\", output_type);\n \n     let options = @session::options {\n-        crate_type: crate_type,\n+        outputs: ~[crate_type],\n         optimize: opt,\n         test: what == Test || what == Bench,\n         maybe_sysroot: Some(sysroot_to_use),"}, {"sha": "a43759a6da7b0f121dc4daeb67a74e752171bf04", "filename": "src/librustuv/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibrustuv%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibrustuv%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Flib.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -41,9 +41,12 @@ via `close` and `delete` methods.\n        url = \"https://github.com/mozilla/rust/tree/master/src/librustuv\")];\n \n #[license = \"MIT/ASL2\"];\n-#[crate_type = \"lib\"];\n+#[crate_type = \"lib\"]; // NOTE: remove after stage0 snapshot\n+#[crate_type = \"rlib\"];\n+#[crate_type = \"dylib\"];\n \n #[feature(macro_rules, globs)];\n+#[allow(attribute_usage)]; // NOTE: remove after the next snapshot\n \n use std::cast::transmute;\n use std::cast;"}, {"sha": "ca5c75122a6ef5d863c38aca8dc3ba1330360700", "filename": "src/librustuv/uvll.rs", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibrustuv%2Fuvll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibrustuv%2Fuvll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fuvll.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -524,8 +524,13 @@ pub unsafe fn guess_handle(handle: c_int) -> c_int {\n // second copies of everything. We obviously don't want this, so instead of\n // dying horribly during testing, we allow all of the test rustuv's references\n // to get resolved to the original rustuv crate.\n-#[link_args = \"-luv_support -luv\"]\n-#[cfg(not(test))]\n+#[cfg(not(test), not(stage0))]\n+#[link(name = \"uv_support\", kind = \"static\")]\n+#[link(name = \"uv\", kind = \"static\")]\n+extern {}\n+\n+#[cfg(not(test), stage0)]\n+#[link_args = \"-luv -luv_support\"]\n extern {}\n \n extern {\n@@ -717,12 +722,26 @@ extern {\n     pub fn uv_signal_stop(handle: *uv_signal_t) -> c_int;\n }\n \n-// libuv requires various system libraries to successfully link on some\n-// platforms\n-#[cfg(target_os = \"linux\")]\n+// various platform libraries required by libuv\n+#[cfg(not(stage0), not(target_os = \"android\"))]\n+#[link(name = \"pthread\")]\n+extern {}\n+#[cfg(stage0)]\n #[link_args = \"-lpthread\"]\n extern {}\n \n-#[cfg(target_os = \"win32\")]\n+#[cfg(target_os = \"win32\", not(stage0))]\n+#[link(name = \"ws2_32\")]\n+#[link(name = \"psapi\")]\n+#[link(name = \"iphlpapi\")]\n+extern {}\n+#[cfg(target_os = \"win32\", stage0)]\n #[link_args = \"-lws2_32 -lpsapi -liphlpapi\"]\n extern {}\n+\n+#[cfg(target_os = \"freebsd\", not(stage0))]\n+#[link(name = \"kvm\")]\n+extern {}\n+#[cfg(target_os = \"freebsd\", stage0)]\n+#[link_args = \"-lkvm\"]\n+extern {}"}, {"sha": "296091d26e693407afa2dea90f816b311bb51ed1", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -51,7 +51,9 @@\n \n #[comment = \"The Rust standard library\"];\n #[license = \"MIT/ASL2\"];\n-#[crate_type = \"lib\"];\n+#[crate_type = \"lib\"]; // NOTE: remove after stage0 snapshot\n+#[crate_type = \"rlib\"];\n+#[crate_type = \"dylib\"];\n \n #[doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk.png\",\n       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n@@ -64,6 +66,7 @@\n \n #[deny(non_camel_case_types)];\n #[deny(missing_doc)];\n+#[allow(attribute_usage)]; // NOTE: remove after the next snapshot\n \n // When testing libstd, bring in libuv as the I/O backend so tests can print\n // things and all of the std::io tests have an I/O interface to run on top\n@@ -79,15 +82,7 @@\n #[cfg(test)] pub use ops = realstd::ops;\n #[cfg(test)] pub use cmp = realstd::cmp;\n \n-// On Linux, link to the runtime with -lrt.\n-#[cfg(target_os = \"linux\")]\n-#[doc(hidden)]\n-pub mod linkhack {\n-    #[link_args=\"-lrustrt -lrt\"]\n-    #[link_args = \"-lpthread\"]\n-    extern {\n-    }\n-}\n+mod rtdeps;\n \n /* The Prelude. */\n "}, {"sha": "ba4f120f6269c266d29021ae7cbf44356eff3fe4", "filename": "src/libstd/rtdeps.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibstd%2Frtdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibstd%2Frtdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frtdeps.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -0,0 +1,54 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! This module contains the linkage attributes to all runtime dependencies of\n+//! the stndard library This varies per-platform, but these libraries are\n+//! necessary for running libstd.\n+\n+// All platforms need to link to rustrt\n+#[link(name = \"rustrt\", kind = \"static\")]\n+extern {}\n+\n+// LLVM implements the `frem` instruction as a call to `fmod`, which lives in\n+// libm. Hence, we must explicitly link to it.\n+//\n+// On linux librt and libdl are indirect dependencies via rustrt,\n+// and binutils 2.22+ won't add them automatically\n+#[cfg(target_os = \"linux\")]\n+#[link(name = \"rt\")]\n+#[link(name = \"dl\")]\n+#[link(name = \"m\")]\n+#[link(name = \"pthread\")]\n+#[link(name = \"stdc++\")]\n+extern {}\n+\n+#[cfg(target_os = \"android\")]\n+#[link(name = \"dl\")]\n+#[link(name = \"log\")]\n+#[link(name = \"supc++\")]\n+#[link(name = \"gnustl_shared\")]\n+#[link(name = \"m\")]\n+extern {}\n+\n+#[cfg(target_os = \"freebsd\")]\n+#[link(name = \"execinfo\")]\n+#[link(name = \"rt\")]\n+#[link(name = \"stdc++\")]\n+#[link(name = \"pthread\")]\n+extern {}\n+\n+#[cfg(target_os = \"macos\")]\n+#[link(name = \"pthread\")]\n+#[link(name = \"stdc++\")]\n+extern {}\n+\n+#[cfg(stage0)]\n+#[link_args = \"-lstdc++\"]\n+extern {}"}, {"sha": "7fd503a8d42942bbe83bfad68731353ffc996a3d", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -19,7 +19,8 @@\n        uuid = \"9311401b-d6ea-4cd9-a1d9-61f89499c645\")];\n \n #[license = \"MIT/ASL2\"];\n-#[crate_type = \"lib\"];\n+#[crate_type = \"lib\"]; // NOTE: remove after stage0 snapshot\n+#[crate_type = \"dylib\"];\n \n #[feature(macro_rules, globs, managed_boxes)];\n "}, {"sha": "2a3e687ee55551835127e4a11ccc795cf26b9614", "filename": "src/rt/rustrt.def.in", "status": "removed", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/dfe46f788bd080fed67c63e7a04dad10468502b3/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/dfe46f788bd080fed67c63e7a04dad10468502b3/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=dfe46f788bd080fed67c63e7a04dad10468502b3", "patch": "@@ -1,51 +0,0 @@\n-rust_dbg_abi_1\n-rust_dbg_abi_2\n-rust_dbg_static_mut\n-rust_dbg_static_mut_check_four\n-rust_get_time\n-rust_tzset\n-rust_gmtime\n-rust_localtime\n-rust_timegm\n-rust_mktime\n-rust_precise_time_ns\n-rust_list_dir_val\n-rust_list_dir_wfd_size\n-rust_list_dir_wfd_fp_buf\n-rust_unset_sigprocmask\n-rust_env_pairs\n-rust_win32_rand_acquire\n-rust_win32_rand_gen\n-rust_win32_rand_release\n-upcall_rust_personality\n-upcall_reset_stack_limit\n-rust_dbg_call\n-rust_dbg_do_nothing\n-tdefl_compress_mem_to_heap\n-tinfl_decompress_mem_to_heap\n-rust_swap_registers\n-rust_readdir\n-rust_opendir\n-rust_dbg_extern_identity_u32\n-rust_dbg_extern_identity_u64\n-rust_dbg_extern_identity_TwoU8s\n-rust_dbg_extern_identity_TwoU16s\n-rust_dbg_extern_identity_TwoU32s\n-rust_dbg_extern_identity_TwoU64s\n-rust_dbg_extern_identity_TwoDoubles\n-rust_dbg_extern_return_TwoU8s\n-rust_dbg_extern_return_TwoU16s\n-rust_dbg_extern_return_TwoU32s\n-rust_dbg_extern_return_TwoU64s\n-rust_dbg_extern_identity_double\n-rust_dbg_extern_identity_u8\n-rust_try\n-rust_begin_unwind\n-rust_valgrind_stack_register\n-rust_valgrind_stack_deregister\n-rust_running_on_valgrind\n-rust_get_num_cpus\n-rust_get_test_int\n-rust_pthread_mutex_t_size\n-rust_pthread_cond_t_size\n-rust_crit_section_size"}, {"sha": "069f29e909d4b2204ff10b388b3593929d460f9e", "filename": "src/rustllvm/rustllvm.def.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Frustllvm%2Frustllvm.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Frustllvm%2Frustllvm.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.def.in?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -630,3 +630,5 @@ LLVMAddReturnAttribute\n LLVMRemoveReturnAttribute\n LLVMTypeToString\n LLVMAddColdAttribute\n+LLVMCreateMemoryBufferWithMemoryRange\n+LLVMCreateMemoryBufferWithMemoryRangeCopy"}, {"sha": "01a90f1ad449b73e460dce483864dfe896fe33bc", "filename": "src/test/auxiliary/anon-extern-mod-cross-crate-1.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -8,14 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[link_name = \"rustrt\"];\n-#[link(name = \"anonexternmod\",\n-       vers = \"0.1\")];\n+#[link(name = \"anonexternmod\", vers = \"0.1\")];\n \n #[crate_type = \"lib\"];\n \n use std::libc;\n \n extern {\n+    #[link(name = \"rustrt\")]\n     pub fn rust_get_test_int() -> libc::intptr_t;\n }"}, {"sha": "89317a45171132d928abb22f6eb5cad8e658240c", "filename": "src/test/auxiliary/extern-crosscrate-source.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Fauxiliary%2Fextern-crosscrate-source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Fauxiliary%2Fextern-crosscrate-source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fextern-crosscrate-source.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -18,6 +18,7 @@ use std::libc;\n pub mod rustrt {\n     use std::libc;\n \n+    #[link(name = \"rustrt\")]\n     extern {\n         pub fn rust_dbg_call(cb: extern \"C\" fn(libc::uintptr_t) -> libc::uintptr_t,\n                              data: libc::uintptr_t)"}, {"sha": "4705d13cd968564e7b1192a227f07c85f9268d58", "filename": "src/test/auxiliary/foreign_lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Fauxiliary%2Fforeign_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Fauxiliary%2Fforeign_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fforeign_lib.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -13,6 +13,7 @@\n pub mod rustrt {\n     use std::libc;\n \n+    #[link(name = \"rustrt\")]\n     extern {\n         fn rust_get_test_int() -> libc::intptr_t;\n     }"}, {"sha": "7f466573da73087c0b72de342dd54fdadde6cdb4", "filename": "src/test/run-make/bootstrap-from-c-with-uvio/Makefile", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-uvio%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-uvio%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-uvio%2FMakefile?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -0,0 +1,9 @@\n+-include ../tools.mk\n+\n+all:\n+\t$(RUSTC) lib.rs -Z gen-crate-map\n+\tln -nsf $(call DYLIB,boot-*) $(call DYLIB,boot)\n+\t$(CC) main.c -o $(call RUN,main) -lboot -Wl,-rpath,$(TMPDIR)\n+\t$(call RUN,main)\n+\trm $(call DYLIB,boot)\n+\t$(call FAIL,main)"}, {"sha": "85941ec74a8da64a0f87b6b429e00796a49ce6f4", "filename": "src/test/run-make/bootstrap-from-c-with-uvio/lib.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-uvio%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-uvio%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-uvio%2Flib.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[link(package_id = \"boot\", name = \"boot\", vers = \"0.1\")];\n+#[crate_type = \"lib\"];\n+\n+extern mod rustuv; // pull in uvio\n+\n+use std::rt;\n+\n+#[no_mangle] // this needs to get called from C\n+pub extern \"C\" fn foo(argc: int, argv: **u8) -> int {\n+    do rt::start(argc, argv) {\n+        do spawn {\n+            println!(\"hello\");\n+        }\n+    }\n+}"}, {"sha": "1872c1ea43b1139cfaf90e728d6f11d8c07c2c52", "filename": "src/test/run-make/bootstrap-from-c-with-uvio/main.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-uvio%2Fmain.c", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-uvio%2Fmain.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-uvio%2Fmain.c?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// this is the rust entry point that we're going to call.\n+int foo(int argc, char *argv[]);\n+\n+int main(int argc, char *argv[]) {\n+  return foo(argc, argv);\n+}"}, {"sha": "2b2e5d56e92da29cf4b51e0821c714c8c75cfc93", "filename": "src/test/run-make/c-dynamic-dylib/Makefile", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fc-dynamic-dylib%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fc-dynamic-dylib%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-dynamic-dylib%2FMakefile?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -0,0 +1,14 @@\n+-include ../tools.mk\n+\n+# This hits an assertion in the linker on older versions of osx apparently\n+ifeq ($(shell uname),Darwin)\n+all:\n+\techo ignored\n+else\n+all: $(call DYLIB,cfoo)\n+\t$(RUSTC) foo.rs\n+\t$(RUSTC) bar.rs\n+\t$(call RUN,bar)\n+\trm $(TMPDIR)/$(call DYLIB_GLOB,cfoo)\n+\t$(call FAIL,bar)\n+endif"}, {"sha": "7c4aca1e02807885ec0f5a96d4b676de49616ce3", "filename": "src/test/run-make/c-dynamic-dylib/bar.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fc-dynamic-dylib%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fc-dynamic-dylib%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-dynamic-dylib%2Fbar.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -0,0 +1,5 @@\n+extern mod foo;\n+\n+fn main() {\n+    foo::rsfoo();\n+}"}, {"sha": "9fe07f82f9ed1495b13e4e4dcd2e092115b01b25", "filename": "src/test/run-make/c-dynamic-dylib/cfoo.c", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fc-dynamic-dylib%2Fcfoo.c", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fc-dynamic-dylib%2Fcfoo.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-dynamic-dylib%2Fcfoo.c?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -0,0 +1 @@\n+int foo() { return 0; }"}, {"sha": "0c4a6f7df4b3ccea6c08dce0136132bf6780926a", "filename": "src/test/run-make/c-dynamic-dylib/foo.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fc-dynamic-dylib%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fc-dynamic-dylib%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-dynamic-dylib%2Ffoo.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -0,0 +1,10 @@\n+#[crate_type = \"dylib\"];\n+\n+#[link(name = \"cfoo\")]\n+extern {\n+    fn foo();\n+}\n+\n+pub fn rsfoo() {\n+    unsafe { foo() }\n+}"}, {"sha": "18992703b2c8517a5df4b75ea4b5f54016f22360", "filename": "src/test/run-make/c-dynamic-rlib/Makefile", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fc-dynamic-rlib%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fc-dynamic-rlib%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-dynamic-rlib%2FMakefile?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -0,0 +1,14 @@\n+-include ../tools.mk\n+\n+# This hits an assertion in the linker on older versions of osx apparently\n+ifeq ($(shell uname),Darwin)\n+all:\n+\techo ignored\n+else\n+all: $(call DYLIB,cfoo)\n+\t$(RUSTC) foo.rs\n+\t$(RUSTC) bar.rs\n+\tLD_LIBRARY_PATH=$(TMPDIR) $(call RUN,bar)\n+\trm $(TMPDIR)/$(call DYLIB_GLOB,cfoo)\n+\t$(call FAIL,bar)\n+endif"}, {"sha": "7c4aca1e02807885ec0f5a96d4b676de49616ce3", "filename": "src/test/run-make/c-dynamic-rlib/bar.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fc-dynamic-rlib%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fc-dynamic-rlib%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-dynamic-rlib%2Fbar.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -0,0 +1,5 @@\n+extern mod foo;\n+\n+fn main() {\n+    foo::rsfoo();\n+}"}, {"sha": "9fe07f82f9ed1495b13e4e4dcd2e092115b01b25", "filename": "src/test/run-make/c-dynamic-rlib/cfoo.c", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fc-dynamic-rlib%2Fcfoo.c", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fc-dynamic-rlib%2Fcfoo.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-dynamic-rlib%2Fcfoo.c?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -0,0 +1 @@\n+int foo() { return 0; }"}, {"sha": "e64811af9c763db21b3c69552d5de14980ffe579", "filename": "src/test/run-make/c-dynamic-rlib/foo.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fc-dynamic-rlib%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fc-dynamic-rlib%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-dynamic-rlib%2Ffoo.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -0,0 +1,10 @@\n+#[crate_type = \"rlib\"];\n+\n+#[link(name = \"cfoo\")]\n+extern {\n+    fn foo();\n+}\n+\n+pub fn rsfoo() {\n+    unsafe { foo() }\n+}"}, {"sha": "fb57a08a8261c91dddb393fd50424f7500648172", "filename": "src/test/run-make/c-link-to-rust-dylib/Makefile", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fc-link-to-rust-dylib%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fc-link-to-rust-dylib%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-link-to-rust-dylib%2FMakefile?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -0,0 +1,9 @@\n+-include ../tools.mk\n+\n+all:\n+\t$(RUSTC) foo.rs\n+\tln -s $(call DYLIB,foo-*) $(call DYLIB,foo)\n+\t$(CC) bar.c -lfoo -o $(call RUN,bar) -Wl,-rpath,$(TMPDIR)\n+\t$(call RUN,bar)\n+\trm $(call DYLIB,foo)\n+\t$(call FAIL,bar)"}, {"sha": "bb4036b06e13b79a32ec78ae04db97590f54b2cc", "filename": "src/test/run-make/c-link-to-rust-dylib/bar.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fc-link-to-rust-dylib%2Fbar.c", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fc-link-to-rust-dylib%2Fbar.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-link-to-rust-dylib%2Fbar.c?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -0,0 +1,6 @@\n+void foo();\n+\n+int main() {\n+    foo();\n+    return 0;\n+}"}, {"sha": "6b6a786ef54a21eec2579c49ce787bbe1fbef7e3", "filename": "src/test/run-make/c-link-to-rust-dylib/foo.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fc-link-to-rust-dylib%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fc-link-to-rust-dylib%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-link-to-rust-dylib%2Ffoo.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -0,0 +1,4 @@\n+#[crate_type = \"dylib\"];\n+\n+#[no_mangle]\n+pub extern \"C\" fn foo() {}"}, {"sha": "a81f19d6eb36bdf550b208c463b790cb2a0dcfc7", "filename": "src/test/run-make/c-link-to-rust-staticlib/Makefile", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fc-link-to-rust-staticlib%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fc-link-to-rust-staticlib%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-link-to-rust-staticlib%2FMakefile?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -0,0 +1,13 @@\n+-include ../tools.mk\n+\n+ifneq ($(shell uname),Darwin)\n+\tEXTRAFLAGS := -lm -lrt -ldl -lpthread\n+endif\n+\n+all:\n+\t$(RUSTC) foo.rs -Z gen-crate-map\n+\tln -s $(call STATICLIB,foo-*) $(call STATICLIB,foo)\n+\t$(CC) bar.c -lfoo -o $(call RUN,bar) $(EXTRAFLAGS) -lstdc++ \n+\t$(call RUN,bar)\n+\trm $(call STATICLIB,foo*)\n+\t$(call RUN,bar)"}, {"sha": "bb4036b06e13b79a32ec78ae04db97590f54b2cc", "filename": "src/test/run-make/c-link-to-rust-staticlib/bar.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fc-link-to-rust-staticlib%2Fbar.c", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fc-link-to-rust-staticlib%2Fbar.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-link-to-rust-staticlib%2Fbar.c?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -0,0 +1,6 @@\n+void foo();\n+\n+int main() {\n+    foo();\n+    return 0;\n+}"}, {"sha": "3da09eb6bb6a87b0eca9600106ec86af9b37cd6c", "filename": "src/test/run-make/c-link-to-rust-staticlib/foo.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fc-link-to-rust-staticlib%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fc-link-to-rust-staticlib%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-link-to-rust-staticlib%2Ffoo.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -0,0 +1,4 @@\n+#[crate_type = \"staticlib\"];\n+\n+#[no_mangle]\n+pub extern \"C\" fn foo() {}"}, {"sha": "62d9c8e90f21a452c84f28ed0102f847e70c50b0", "filename": "src/test/run-make/c-static-dylib/Makefile", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fc-static-dylib%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fc-static-dylib%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-static-dylib%2FMakefile?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -0,0 +1,9 @@\n+-include ../tools.mk\n+\n+all: $(call STATICLIB,cfoo)\n+\t$(RUSTC) foo.rs\n+\t$(RUSTC) bar.rs\n+\trm $(TMPDIR)/$(call STATICLIB_GLOB,cfoo)\n+\t$(call RUN,bar)\n+\trm $(TMPDIR)/$(call DYLIB_GLOB,foo)\n+\t$(call FAIL,bar)"}, {"sha": "7c4aca1e02807885ec0f5a96d4b676de49616ce3", "filename": "src/test/run-make/c-static-dylib/bar.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fc-static-dylib%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fc-static-dylib%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-static-dylib%2Fbar.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -0,0 +1,5 @@\n+extern mod foo;\n+\n+fn main() {\n+    foo::rsfoo();\n+}"}, {"sha": "9fe07f82f9ed1495b13e4e4dcd2e092115b01b25", "filename": "src/test/run-make/c-static-dylib/cfoo.c", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fc-static-dylib%2Fcfoo.c", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fc-static-dylib%2Fcfoo.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-static-dylib%2Fcfoo.c?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -0,0 +1 @@\n+int foo() { return 0; }"}, {"sha": "0c4a6f7df4b3ccea6c08dce0136132bf6780926a", "filename": "src/test/run-make/c-static-dylib/foo.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fc-static-dylib%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fc-static-dylib%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-static-dylib%2Ffoo.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -0,0 +1,10 @@\n+#[crate_type = \"dylib\"];\n+\n+#[link(name = \"cfoo\")]\n+extern {\n+    fn foo();\n+}\n+\n+pub fn rsfoo() {\n+    unsafe { foo() }\n+}"}, {"sha": "09eb4b1249e53515279bd25cddd859b7da8d84ae", "filename": "src/test/run-make/c-static-rlib/Makefile", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fc-static-rlib%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fc-static-rlib%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-static-rlib%2FMakefile?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -0,0 +1,8 @@\n+-include ../tools.mk\n+\n+all: $(call STATICLIB,cfoo)\n+\t$(RUSTC) foo.rs\n+\t$(RUSTC) bar.rs\n+\trm $(TMPDIR)/$(call RLIB_GLOB,foo)\n+\trm $(TMPDIR)/$(call STATICLIB_GLOB,cfoo)\n+\t$(call RUN,bar)"}, {"sha": "7c4aca1e02807885ec0f5a96d4b676de49616ce3", "filename": "src/test/run-make/c-static-rlib/bar.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fc-static-rlib%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fc-static-rlib%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-static-rlib%2Fbar.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -0,0 +1,5 @@\n+extern mod foo;\n+\n+fn main() {\n+    foo::rsfoo();\n+}"}, {"sha": "9fe07f82f9ed1495b13e4e4dcd2e092115b01b25", "filename": "src/test/run-make/c-static-rlib/cfoo.c", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fc-static-rlib%2Fcfoo.c", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fc-static-rlib%2Fcfoo.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-static-rlib%2Fcfoo.c?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -0,0 +1 @@\n+int foo() { return 0; }"}, {"sha": "e64811af9c763db21b3c69552d5de14980ffe579", "filename": "src/test/run-make/c-static-rlib/foo.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fc-static-rlib%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fc-static-rlib%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-static-rlib%2Ffoo.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -0,0 +1,10 @@\n+#[crate_type = \"rlib\"];\n+\n+#[link(name = \"cfoo\")]\n+extern {\n+    fn foo();\n+}\n+\n+pub fn rsfoo() {\n+    unsafe { foo() }\n+}"}, {"sha": "e60e904240d188b410071832a1abb0dff77f4668", "filename": "src/test/run-make/dylib-chain/Makefile", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fdylib-chain%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fdylib-chain%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fdylib-chain%2FMakefile?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -0,0 +1,12 @@\n+-include ../tools.mk\n+\n+all:\n+\t$(RUSTC) m1.rs\n+\t$(RUSTC) m2.rs\n+\t$(RUSTC) m3.rs\n+\t$(RUSTC) m4.rs\n+\t$(call RUN,m4)\n+\trm $(TMPDIR)/$(call DYLIB_GLOB,m1)\n+\trm $(TMPDIR)/$(call DYLIB_GLOB,m2)\n+\trm $(TMPDIR)/$(call DYLIB_GLOB,m3)\n+\t$(call FAIL,m4)"}, {"sha": "69ea8dcecfc6b9d508190c324cd7b8e8ec1c83db", "filename": "src/test/run-make/dylib-chain/m1.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fdylib-chain%2Fm1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fdylib-chain%2Fm1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fdylib-chain%2Fm1.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -0,0 +1,2 @@\n+#[crate_type = \"dylib\"];\n+pub fn m1() {}"}, {"sha": "2f5d75a3872cf022a96dd58fd6e523244b406ed5", "filename": "src/test/run-make/dylib-chain/m2.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fdylib-chain%2Fm2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fdylib-chain%2Fm2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fdylib-chain%2Fm2.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -0,0 +1,4 @@\n+#[crate_type = \"dylib\"];\n+extern mod m1;\n+\n+pub fn m2() { m1::m1() }"}, {"sha": "cc4ff2cff74e16a0bacef0d5a92c4b49dea8b371", "filename": "src/test/run-make/dylib-chain/m3.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fdylib-chain%2Fm3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fdylib-chain%2Fm3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fdylib-chain%2Fm3.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -0,0 +1,4 @@\n+#[crate_type = \"dylib\"];\n+extern mod m2;\n+\n+pub fn m3() { m2::m2() }"}, {"sha": "c52d1f7fcbcd2be4fd16f04b87affd0b02811297", "filename": "src/test/run-make/dylib-chain/m4.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fdylib-chain%2Fm4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fdylib-chain%2Fm4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fdylib-chain%2Fm4.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -0,0 +1,3 @@\n+extern mod m3;\n+\n+fn main() { m3::m3() }"}, {"sha": "9ab2abca72952b0480d8ed73254e13e2be9f4b30", "filename": "src/test/run-make/mixing-deps/Makefile", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fmixing-deps%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fmixing-deps%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmixing-deps%2FMakefile?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -0,0 +1,7 @@\n+-include ../tools.mk\n+\n+all:\n+\t$(RUSTC) both.rs\n+\t$(RUSTC) dylib.rs -Z prefer-dynamic\n+\t$(RUSTC) prog.rs\n+\t$(call RUN,prog)"}, {"sha": "89d7b6452c9095fbf3d646f40206313644e65540", "filename": "src/test/run-make/mixing-deps/both.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fmixing-deps%2Fboth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fmixing-deps%2Fboth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmixing-deps%2Fboth.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -0,0 +1,4 @@\n+#[crate_type = \"rlib\"];\n+#[crate_type = \"dylib\"];\n+\n+pub static foo: int = 4;"}, {"sha": "130bc2fe8032a20877469be001f6bd4de28d70d5", "filename": "src/test/run-make/mixing-deps/dylib.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fmixing-deps%2Fdylib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fmixing-deps%2Fdylib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmixing-deps%2Fdylib.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -0,0 +1,6 @@\n+#[crate_type = \"dylib\"];\n+extern mod both;\n+\n+use std::cast;\n+\n+pub fn addr() -> uint { unsafe { cast::transmute(&both::foo) } }"}, {"sha": "da90f8731f42d457f5cec6727f3fd90525a3958b", "filename": "src/test/run-make/mixing-deps/prog.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fmixing-deps%2Fprog.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fmixing-deps%2Fprog.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmixing-deps%2Fprog.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -0,0 +1,9 @@\n+extern mod dylib;\n+extern mod both;\n+\n+use std::cast;\n+\n+fn main() {\n+    assert_eq!(unsafe { cast::transmute::<&int, uint>(&both::foo) },\n+               dylib::addr());\n+}"}, {"sha": "eb00c80139092eb7fb7e6d1ce9c28d694bc639d7", "filename": "src/test/run-make/mixing-libs/Makefile", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fmixing-libs%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fmixing-libs%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmixing-libs%2FMakefile?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -0,0 +1,9 @@\n+-include ../tools.mk\n+\n+all:\n+\t$(RUSTC) rlib.rs\n+\t$(RUSTC) dylib.rs && exit 1 || exit 0\n+\t$(RUSTC) rlib.rs --dylib\n+\t$(RUSTC) dylib.rs\n+\trm $(call DYLIB,rlib-*)\n+\t$(RUSTC) prog.rs && exit 1 || exit 0"}, {"sha": "9652cb2764120a1ad0f32b3cb0b940ce6f1a7410", "filename": "src/test/run-make/mixing-libs/dylib.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fmixing-libs%2Fdylib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fmixing-libs%2Fdylib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmixing-libs%2Fdylib.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -0,0 +1,4 @@\n+#[crate_type = \"dylib\"];\n+extern mod rlib;\n+\n+pub fn dylib() { rlib::rlib() }"}, {"sha": "ec67dea0ab01375dd27b90793c667c9c9b5d1204", "filename": "src/test/run-make/mixing-libs/prog.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fmixing-libs%2Fprog.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fmixing-libs%2Fprog.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmixing-libs%2Fprog.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -0,0 +1,7 @@\n+extern mod dylib;\n+extern mod rlib;\n+\n+fn main() {\n+    dylib::dylib();\n+    rlib::rlib();\n+}"}, {"sha": "32c322f3f59dda6f7aae1fd6d92371d515c29914", "filename": "src/test/run-make/mixing-libs/rlib.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fmixing-libs%2Frlib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fmixing-libs%2Frlib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmixing-libs%2Frlib.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -0,0 +1,2 @@\n+#[crate_type = \"rlib\"];\n+pub fn rlib() {}"}, {"sha": "8229547176a48be7750e24778e2dd4489a73a046", "filename": "src/test/run-make/prefer-dylib/Makefile", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fprefer-dylib%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fprefer-dylib%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fprefer-dylib%2FMakefile?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -0,0 +1,8 @@\n+-include ../tools.mk\n+\n+all:\n+\t$(RUSTC) bar.rs --dylib --rlib\n+\t$(RUSTC) foo.rs -Z prefer-dynamic\n+\t$(call RUN,foo)\n+\trm $(TMPDIR)/*bar*\n+\t$(call FAILS,foo)"}, {"sha": "c5c0bc606cd699cda9d339035a1ca95bff4a70f4", "filename": "src/test/run-make/prefer-dylib/bar.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fprefer-dylib%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fprefer-dylib%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fprefer-dylib%2Fbar.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -0,0 +1 @@\n+pub fn bar() {}"}, {"sha": "f86ef62a9feef2f9399450b7d3c4e13233c6de06", "filename": "src/test/run-make/prefer-dylib/foo.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fprefer-dylib%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fprefer-dylib%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fprefer-dylib%2Ffoo.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -0,0 +1,5 @@\n+extern mod bar;\n+\n+fn main() {\n+    bar::bar();\n+}"}, {"sha": "eedb70c4efdf025b8e81eea6aeaf1838ed9d041e", "filename": "src/test/run-make/prefer-rlib/Makefile", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fprefer-rlib%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fprefer-rlib%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fprefer-rlib%2FMakefile?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -0,0 +1,8 @@\n+-include ../tools.mk\n+\n+all:\n+\t$(RUSTC) bar.rs --dylib --rlib\n+\tls $(TMPDIR)/$(call RLIB_GLOB,bar)\n+\t$(RUSTC) foo.rs\n+\trm $(TMPDIR)/*bar*\n+\t$(call RUN,foo)"}, {"sha": "c5c0bc606cd699cda9d339035a1ca95bff4a70f4", "filename": "src/test/run-make/prefer-rlib/bar.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fprefer-rlib%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fprefer-rlib%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fprefer-rlib%2Fbar.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -0,0 +1 @@\n+pub fn bar() {}"}, {"sha": "f86ef62a9feef2f9399450b7d3c4e13233c6de06", "filename": "src/test/run-make/prefer-rlib/foo.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fprefer-rlib%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fprefer-rlib%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fprefer-rlib%2Ffoo.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -0,0 +1,5 @@\n+extern mod bar;\n+\n+fn main() {\n+    bar::bar();\n+}"}, {"sha": "30b6811a388cad6f463995fc0e1b77f1cc435aab", "filename": "src/test/run-make/rlib-chain/Makefile", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Frlib-chain%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Frlib-chain%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frlib-chain%2FMakefile?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -0,0 +1,10 @@\n+-include ../tools.mk\n+\n+all:\n+\t$(RUSTC) m1.rs\n+\t$(RUSTC) m2.rs\n+\t$(RUSTC) m3.rs\n+\t$(RUSTC) m4.rs\n+\t$(call RUN,m4)\n+\trm $(TMPDIR)/*lib\n+\t$(call RUN,m4)"}, {"sha": "1a244efd4dda4eb9004e3d7da959be1043b9a149", "filename": "src/test/run-make/rlib-chain/m1.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Frlib-chain%2Fm1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Frlib-chain%2Fm1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frlib-chain%2Fm1.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -0,0 +1,2 @@\n+#[crate_type = \"rlib\"];\n+pub fn m1() {}"}, {"sha": "96f771220838e338b4eacd4902001f6ed5ea6de4", "filename": "src/test/run-make/rlib-chain/m2.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Frlib-chain%2Fm2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Frlib-chain%2Fm2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frlib-chain%2Fm2.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -0,0 +1,4 @@\n+#[crate_type = \"rlib\"];\n+extern mod m1;\n+\n+pub fn m2() { m1::m1() }"}, {"sha": "cb8d75291605a8985aa40f4956070a08065ba277", "filename": "src/test/run-make/rlib-chain/m3.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Frlib-chain%2Fm3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Frlib-chain%2Fm3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frlib-chain%2Fm3.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -0,0 +1,4 @@\n+#[crate_type = \"rlib\"];\n+extern mod m2;\n+\n+pub fn m3() { m2::m2() }"}, {"sha": "c52d1f7fcbcd2be4fd16f04b87affd0b02811297", "filename": "src/test/run-make/rlib-chain/m4.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Frlib-chain%2Fm4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Frlib-chain%2Fm4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frlib-chain%2Fm4.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -0,0 +1,3 @@\n+extern mod m3;\n+\n+fn main() { m3::m3() }"}, {"sha": "d4f215c69f07e50a058d66d07997ccbbd0d4c411", "filename": "src/test/run-make/simple-dylib/Makefile", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fsimple-dylib%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fsimple-dylib%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsimple-dylib%2FMakefile?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -0,0 +1,5 @@\n+-include ../tools.mk\n+all:\n+\t$(RUSTC) bar.rs --dylib\n+\t$(RUSTC) foo.rs\n+\t$(call RUN,foo)"}, {"sha": "c5c0bc606cd699cda9d339035a1ca95bff4a70f4", "filename": "src/test/run-make/simple-dylib/bar.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fsimple-dylib%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fsimple-dylib%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsimple-dylib%2Fbar.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -0,0 +1 @@\n+pub fn bar() {}"}, {"sha": "f86ef62a9feef2f9399450b7d3c4e13233c6de06", "filename": "src/test/run-make/simple-dylib/foo.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fsimple-dylib%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fsimple-dylib%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsimple-dylib%2Ffoo.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -0,0 +1,5 @@\n+extern mod bar;\n+\n+fn main() {\n+    bar::bar();\n+}"}, {"sha": "e8909ef134bf5a6952ec8e999abca84e5cf8e5f8", "filename": "src/test/run-make/simple-rlib/Makefile", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fsimple-rlib%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fsimple-rlib%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsimple-rlib%2FMakefile?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -0,0 +1,5 @@\n+-include ../tools.mk\n+all:\n+\t$(RUSTC) bar.rs --rlib\n+\t$(RUSTC) foo.rs\n+\t$(call RUN,foo)"}, {"sha": "c5c0bc606cd699cda9d339035a1ca95bff4a70f4", "filename": "src/test/run-make/simple-rlib/bar.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fsimple-rlib%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fsimple-rlib%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsimple-rlib%2Fbar.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -0,0 +1 @@\n+pub fn bar() {}"}, {"sha": "f86ef62a9feef2f9399450b7d3c4e13233c6de06", "filename": "src/test/run-make/simple-rlib/foo.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fsimple-rlib%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fsimple-rlib%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsimple-rlib%2Ffoo.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -0,0 +1,5 @@\n+extern mod bar;\n+\n+fn main() {\n+    bar::bar();\n+}"}, {"sha": "cb0397442658df659765388617854b25dabf5d71", "filename": "src/test/run-make/static-unwinding/Makefile", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fstatic-unwinding%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fstatic-unwinding%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fstatic-unwinding%2FMakefile?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -0,0 +1,6 @@\n+-include ../tools.mk\n+\n+all:\n+\t$(RUSTC) lib.rs\n+\t$(RUSTC) main.rs\n+\t$(call RUN,main)"}, {"sha": "4e2cdb6c222165b1579eb70b91b29aa4395a5370", "filename": "src/test/run-make/static-unwinding/lib.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fstatic-unwinding%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fstatic-unwinding%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fstatic-unwinding%2Flib.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -0,0 +1,15 @@\n+#[crate_type = \"rlib\"];\n+\n+pub static mut statik: int = 0;\n+\n+struct A;\n+impl Drop for A {\n+    fn drop(&mut self) {\n+        unsafe { statik = 1; }\n+    }\n+}\n+\n+pub fn callback(f: ||) {\n+    let _a = A;\n+    f();\n+}"}, {"sha": "029933a819cc55195a195e8aad9ccc4891e2673f", "filename": "src/test/run-make/static-unwinding/main.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fstatic-unwinding%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Fstatic-unwinding%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fstatic-unwinding%2Fmain.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -0,0 +1,25 @@\n+extern mod lib;\n+\n+use std::task;\n+\n+static mut statik: int = 0;\n+\n+struct A;\n+impl Drop for A {\n+    fn drop(&mut self) {\n+        unsafe { statik = 1; }\n+    }\n+}\n+\n+fn main() {\n+    do task::try {\n+        let _a = A;\n+        lib::callback(|| fail!());\n+        1\n+    };\n+\n+    unsafe {\n+        assert!(lib::statik == 1);\n+        assert!(statik == 1);\n+    }\n+}"}, {"sha": "2d670cb873fb287065a817549a13538251b0b1cd", "filename": "src/test/run-make/tools.mk", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Ftools.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-make%2Ftools.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftools.mk?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -0,0 +1,27 @@\n+RUSTC := $(RUSTC) --out-dir $(TMPDIR) -L $(TMPDIR)\n+CC := $(CC) -L $(TMPDIR)\n+\n+RUN = $(TMPDIR)/$(1)\n+FAILS = $(TMPDIR)/$(1) && exit 1 || exit 0\n+\n+RLIB_GLOB = lib$(1)*.rlib\n+STATICLIB = $(TMPDIR)/lib$(1).a\n+STATICLIB_GLOB = lib$(1)*.a\n+\n+ifeq ($(shell uname),Darwin)\n+DYLIB_GLOB = lib$(1)*.dylib\n+DYLIB = $(TMPDIR)/lib$(1).dylib\n+else\n+DYLIB_GLOB = lib$(1)*.so\n+DYLIB = $(TMPDIR)/lib$(1).so\n+endif\n+\n+%.a: %.o\n+\tar crus $@ $<\n+%.dylib: %.o\n+\t$(CC) -dynamiclib -Wl,-dylib -o $@ $<\n+%.so: %.o\n+\t$(CC) -o $@ $< -shared\n+$(TMPDIR)/lib%.o: %.c\n+\t$(CC) -c -o $@ $<\n+"}, {"sha": "4c2e78db398452be7e20719fad04ef6798378aa7", "filename": "src/test/run-pass/anon-extern-mod-cross-crate-2.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-pass%2Fanon-extern-mod-cross-crate-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-pass%2Fanon-extern-mod-cross-crate-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fanon-extern-mod-cross-crate-2.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -9,11 +9,15 @@\n // except according to those terms.\n \n // xfail-fast\n+// xfail-pretty\n // aux-build:anon-extern-mod-cross-crate-1.rs\n extern mod anonexternmod;\n \n use anonexternmod::rust_get_test_int;\n \n+#[link(name = \"rustrt\")] // we have explicitly chosen to require this\n+extern {}\n+\n pub fn main() {\n     unsafe {\n         rust_get_test_int();"}, {"sha": "7e05bcc1fd2266f03fe16c0f2c3fd5ed3ff89792", "filename": "src/test/run-pass/anon-extern-mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-pass%2Fanon-extern-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-pass%2Fanon-extern-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fanon-extern-mod.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -10,7 +10,7 @@\n \n use std::libc;\n \n-#[link_name = \"rustrt\"]\n+#[link(name = \"rustrt\")]\n extern {\n     fn rust_get_test_int() -> libc::intptr_t;\n }"}, {"sha": "d590c35d9e2185600b860ff6f7b557ef64dd0b20", "filename": "src/test/run-pass/c-stack-as-value.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-pass%2Fc-stack-as-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-pass%2Fc-stack-as-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fc-stack-as-value.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -11,6 +11,7 @@\n mod rustrt {\n     use std::libc;\n \n+    #[link(name = \"rustrt\")]\n     extern {\n         pub fn rust_get_test_int() -> libc::intptr_t;\n     }"}, {"sha": "e3b727fafd3c823c43c07f7848f70dc4ce5fbdc3", "filename": "src/test/run-pass/extern-call-deep.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-pass%2Fextern-call-deep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-pass%2Fextern-call-deep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call-deep.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -13,6 +13,7 @@ use std::libc;\n mod rustrt {\n     use std::libc;\n \n+    #[link(name = \"rustrt\")]\n     extern {\n         pub fn rust_dbg_call(cb: extern \"C\" fn(libc::uintptr_t) -> libc::uintptr_t,\n                              data: libc::uintptr_t)"}, {"sha": "00ac0bfa118eb19763a092219d45b25d2f84bec8", "filename": "src/test/run-pass/extern-call-deep2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-pass%2Fextern-call-deep2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-pass%2Fextern-call-deep2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call-deep2.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -14,6 +14,7 @@ use std::task;\n mod rustrt {\n     use std::libc;\n \n+    #[link(name = \"rustrt\")]\n     extern {\n         pub fn rust_dbg_call(cb: extern \"C\" fn(libc::uintptr_t) -> libc::uintptr_t,\n                              data: libc::uintptr_t)"}, {"sha": "c49d589572cbedacd5897151d9ab262d851f2037", "filename": "src/test/run-pass/extern-call-indirect.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-pass%2Fextern-call-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-pass%2Fextern-call-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call-indirect.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -13,6 +13,7 @@ use std::libc;\n mod rustrt {\n     use std::libc;\n \n+    #[link(name = \"rustrt\")]\n     extern {\n         pub fn rust_dbg_call(cb: extern \"C\" fn(libc::uintptr_t) -> libc::uintptr_t,\n                              data: libc::uintptr_t)"}, {"sha": "0044f0f468f306a28b6507bfb10b37ce208cf10c", "filename": "src/test/run-pass/extern-call-scrub.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-pass%2Fextern-call-scrub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-pass%2Fextern-call-scrub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call-scrub.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -18,6 +18,7 @@ use std::task;\n mod rustrt {\n     use std::libc;\n \n+    #[link(name = \"rustrt\")]\n     extern {\n         pub fn rust_dbg_call(cb: extern \"C\" fn(libc::uintptr_t) -> libc::uintptr_t,\n                              data: libc::uintptr_t)"}, {"sha": "c224a2f1f0543fdefc40deb3cec69ce6f02ef115", "filename": "src/test/run-pass/extern-pass-TwoU16s.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU16s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU16s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU16s.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -18,6 +18,7 @@ struct TwoU16s {\n     one: u16, two: u16\n }\n \n+#[link(name = \"rustrt\")]\n extern {\n     pub fn rust_dbg_extern_identity_TwoU16s(v: TwoU16s) -> TwoU16s;\n }"}, {"sha": "592d42c65d1886bb3dad763730e3100714367678", "filename": "src/test/run-pass/extern-pass-TwoU32s.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU32s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU32s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU32s.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -16,6 +16,7 @@ struct TwoU32s {\n     one: u32, two: u32\n }\n \n+#[link(name = \"rustrt\")]\n extern {\n     pub fn rust_dbg_extern_identity_TwoU32s(v: TwoU32s) -> TwoU32s;\n }"}, {"sha": "d2520f32c7bd2c4fd5f0aea150660c242f5dee85", "filename": "src/test/run-pass/extern-pass-TwoU64s.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU64s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU64s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU64s.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -18,6 +18,7 @@ struct TwoU64s {\n     one: u64, two: u64\n }\n \n+#[link(name = \"rustrt\")]\n extern {\n     pub fn rust_dbg_extern_identity_TwoU64s(v: TwoU64s) -> TwoU64s;\n }"}, {"sha": "5548b8a7d3993bf1907aba808cbac9a79cee1c14", "filename": "src/test/run-pass/extern-pass-TwoU8s.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU8s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU8s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU8s.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -18,6 +18,7 @@ struct TwoU8s {\n     one: u8, two: u8\n }\n \n+#[link(name = \"rustrt\")]\n extern {\n     pub fn rust_dbg_extern_identity_TwoU8s(v: TwoU8s) -> TwoU8s;\n }"}, {"sha": "85d0463fe7252c3d57a388ccf10e14e65b4fea0e", "filename": "src/test/run-pass/extern-pass-char.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-pass%2Fextern-pass-char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-pass%2Fextern-pass-char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-char.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -10,6 +10,7 @@\n \n // Test a function that takes/returns a u8.\n \n+#[link(name = \"rustrt\")]\n extern {\n     pub fn rust_dbg_extern_identity_u8(v: u8) -> u8;\n }"}, {"sha": "2d35fe6043e8fc013cb2184c381d573f4ab7b4a7", "filename": "src/test/run-pass/extern-pass-double.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-pass%2Fextern-pass-double.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-pass%2Fextern-pass-double.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-double.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[link(name = \"rustrt\")]\n extern {\n     pub fn rust_dbg_extern_identity_double(v: f64) -> f64;\n }"}, {"sha": "5ff3353a8c085a4248940e4e351c98903239b260", "filename": "src/test/run-pass/extern-pass-u32.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-pass%2Fextern-pass-u32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-pass%2Fextern-pass-u32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-u32.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -10,6 +10,7 @@\n \n // Test a function that takes/returns a u32.\n \n+#[link(name = \"rustrt\")]\n extern {\n     pub fn rust_dbg_extern_identity_u32(v: u32) -> u32;\n }"}, {"sha": "b94c57a7a663d5b62982c17eccef05b3d21c9d06", "filename": "src/test/run-pass/extern-pass-u64.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-pass%2Fextern-pass-u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-pass%2Fextern-pass-u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-u64.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -10,6 +10,7 @@\n \n // Test a call to a function that takes/returns a u64.\n \n+#[link(name = \"rustrt\")]\n extern {\n     pub fn rust_dbg_extern_identity_u64(v: u64) -> u64;\n }"}, {"sha": "45efbbb278540bb9d2c6ce8c327498a4a3713bc1", "filename": "src/test/run-pass/extern-return-TwoU16s.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-pass%2Fextern-return-TwoU16s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-pass%2Fextern-return-TwoU16s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-return-TwoU16s.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -12,6 +12,7 @@ struct TwoU16s {\n     one: u16, two: u16\n }\n \n+#[link(name = \"rustrt\")]\n extern {\n     pub fn rust_dbg_extern_return_TwoU16s() -> TwoU16s;\n }"}, {"sha": "8258ee623ab229221f7694abd39dfcca696d07b8", "filename": "src/test/run-pass/extern-return-TwoU32s.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-pass%2Fextern-return-TwoU32s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-pass%2Fextern-return-TwoU32s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-return-TwoU32s.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -12,6 +12,7 @@ struct TwoU32s {\n     one: u32, two: u32\n }\n \n+#[link(name = \"rustrt\")]\n extern {\n     pub fn rust_dbg_extern_return_TwoU32s() -> TwoU32s;\n }"}, {"sha": "d8b051f57a92f428fa6c2a6c7100db1bf476557e", "filename": "src/test/run-pass/extern-return-TwoU64s.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-pass%2Fextern-return-TwoU64s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-pass%2Fextern-return-TwoU64s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-return-TwoU64s.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -14,6 +14,7 @@ struct TwoU64s {\n     one: u64, two: u64\n }\n \n+#[link(name = \"rustrt\")]\n extern {\n     pub fn rust_dbg_extern_return_TwoU64s() -> TwoU64s;\n }"}, {"sha": "99dbd93fb7d3ed3c6542f73ac7519098caf09ec7", "filename": "src/test/run-pass/extern-return-TwoU8s.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-pass%2Fextern-return-TwoU8s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-pass%2Fextern-return-TwoU8s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-return-TwoU8s.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -12,6 +12,7 @@ struct TwoU8s {\n     one: u8, two: u8\n }\n \n+#[link(name = \"rustrt\")]\n extern {\n     pub fn rust_dbg_extern_return_TwoU8s() -> TwoU8s;\n }"}, {"sha": "7c16ae74c4a91a1dc65c23a30a6adeeecc79ed61", "filename": "src/test/run-pass/extern-stress.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-pass%2Fextern-stress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-pass%2Fextern-stress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-stress.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -17,6 +17,7 @@ use std::task;\n mod rustrt {\n     use std::libc;\n \n+    #[link(name = \"rustrt\")]\n     extern {\n         pub fn rust_dbg_call(cb: extern \"C\" fn(libc::uintptr_t) -> libc::uintptr_t,\n                              data: libc::uintptr_t)"}, {"sha": "a4ac197ac6aed522f2dcc9ce575e3391b72b3874", "filename": "src/test/run-pass/extern-yield.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-pass%2Fextern-yield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-pass%2Fextern-yield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-yield.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -14,6 +14,7 @@ use std::task;\n mod rustrt {\n     use std::libc;\n \n+    #[link(name = \"rustrt\")]\n     extern {\n         pub fn rust_dbg_call(cb: extern \"C\" fn (libc::uintptr_t) -> libc::uintptr_t,\n                              data: libc::uintptr_t)"}, {"sha": "ee54423a97d7d6d998e4faeff5cf922cf1165565", "filename": "src/test/run-pass/foreign-call-no-runtime.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-pass%2Fforeign-call-no-runtime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-pass%2Fforeign-call-no-runtime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-call-no-runtime.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -2,6 +2,7 @@ use std::cast;\n use std::libc;\n use std::unstable::run_in_bare_thread;\n \n+#[link(name = \"rustrt\")]\n extern {\n     fn rust_dbg_call(cb: extern \"C\" fn(libc::uintptr_t),\n                      data: libc::uintptr_t) -> libc::uintptr_t;"}, {"sha": "260b1f272c234fdfac4ff018c09ac9c5c29d525c", "filename": "src/test/run-pass/foreign-dupe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-pass%2Fforeign-dupe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-pass%2Fforeign-dupe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-dupe.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -14,7 +14,7 @@\n mod rustrt1 {\n     use std::libc;\n \n-    #[link_name = \"rustrt\"]\n+    #[link(name = \"rustrt\")]\n     extern {\n         pub fn rust_get_test_int() -> libc::intptr_t;\n     }\n@@ -23,7 +23,7 @@ mod rustrt1 {\n mod rustrt2 {\n     use std::libc;\n \n-    #[link_name = \"rustrt\"]\n+    #[link(name = \"rustrt\")]\n     extern {\n         pub fn rust_get_test_int() -> libc::intptr_t;\n     }"}, {"sha": "eef45532265a38c84130ed86109c8574ca1ccbb8", "filename": "src/test/run-pass/foreign-no-abi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-pass%2Fforeign-no-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-pass%2Fforeign-no-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-no-abi.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -13,6 +13,7 @@\n mod rustrt {\n     use std::libc;\n \n+    #[link(name = \"rustrt\")]\n     extern {\n         pub fn rust_get_test_int() -> libc::intptr_t;\n     }"}, {"sha": "ec531d391e42283706b4d15e6b72e8455e491266", "filename": "src/test/run-pass/invoke-external-foreign.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-pass%2Finvoke-external-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-pass%2Finvoke-external-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finvoke-external-foreign.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // xfail-fast\n+// xfail-pretty\n // aux-build:foreign_lib.rs\n \n // The purpose of this test is to check that we can\n@@ -17,6 +18,9 @@\n \n extern mod foreign_lib;\n \n+#[link(name = \"rustrt\")] // we have explicitly chosen to require this\n+extern {}\n+\n pub fn main() {\n     unsafe {\n         let _foo = foreign_lib::rustrt::rust_get_test_int();"}, {"sha": "0afe01bf7edc8cea01d44ac0ac9a606c3266b8d2", "filename": "src/test/run-pass/static-mut-foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-pass%2Fstatic-mut-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-pass%2Fstatic-mut-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-mut-foreign.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -14,7 +14,7 @@\n \n use std::libc;\n \n-#[nolink]\n+#[link(name = \"rustrt\")]\n extern {\n     static mut rust_dbg_static_mut: libc::c_int;\n     pub fn rust_dbg_static_mut_check_four();"}, {"sha": "e2fe7a960163e12908554652d651032949a08880", "filename": "src/test/run-pass/struct-return.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-pass%2Fstruct-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252a24ae1236207a99c1d313d4b1b1eda3ebb58/src%2Ftest%2Frun-pass%2Fstruct-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-return.rs?ref=4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "patch": "@@ -16,7 +16,7 @@ pub struct Floats { a: f64, b: u8, c: f64 }\n mod rustrt {\n     use super::{Floats, Quad};\n \n-    #[nolink]\n+    #[link(name = \"rustrt\")]\n     extern {\n         pub fn rust_dbg_abi_1(q: Quad) -> Quad;\n         pub fn rust_dbg_abi_2(f: Floats) -> Floats;"}]}