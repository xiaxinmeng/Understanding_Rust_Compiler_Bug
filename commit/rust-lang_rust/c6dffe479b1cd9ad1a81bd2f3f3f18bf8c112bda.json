{"sha": "c6dffe479b1cd9ad1a81bd2f3f3f18bf8c112bda", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2ZGZmZTQ3OWIxY2Q5YWQxYTgxYmQyZjNmM2YxOGJmOGMxMTJiZGE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-08-25T17:02:28Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-08-25T17:26:45Z"}, "message": "Cleanup heavy tests", "tree": {"sha": "f36235847010714710ae16a36509e3efd36b1d43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f36235847010714710ae16a36509e3efd36b1d43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6dffe479b1cd9ad1a81bd2f3f3f18bf8c112bda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6dffe479b1cd9ad1a81bd2f3f3f18bf8c112bda", "html_url": "https://github.com/rust-lang/rust/commit/c6dffe479b1cd9ad1a81bd2f3f3f18bf8c112bda", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6dffe479b1cd9ad1a81bd2f3f3f18bf8c112bda/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6141e2706ae73450eea317b6326307b9c54f41b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/6141e2706ae73450eea317b6326307b9c54f41b6", "html_url": "https://github.com/rust-lang/rust/commit/6141e2706ae73450eea317b6326307b9c54f41b6"}], "stats": {"total": 79, "additions": 42, "deletions": 37}, "files": [{"sha": "0880d04253f570e3253f9c62359601733e329ef9", "filename": "crates/rust-analyzer/tests/rust-analyzer/main.rs", "status": "modified", "additions": 39, "deletions": 35, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/c6dffe479b1cd9ad1a81bd2f3f3f18bf8c112bda/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6dffe479b1cd9ad1a81bd2f3f3f18bf8c112bda/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fmain.rs?ref=c6dffe479b1cd9ad1a81bd2f3f3f18bf8c112bda", "patch": "@@ -39,7 +39,6 @@ fn completes_items_from_standard_library() {\n         return;\n     }\n \n-    let project_start = Instant::now();\n     let server = Project::with_fixture(\n         r#\"\n //- /Cargo.toml\n@@ -52,10 +51,9 @@ use std::collections::Spam;\n \"#,\n     )\n     .with_sysroot(true)\n-    .server();\n-    server.wait_until_workspace_is_loaded();\n-    eprintln!(\"loading took    {:?}\", project_start.elapsed());\n-    let completion_start = Instant::now();\n+    .server()\n+    .wait_until_workspace_is_loaded();\n+\n     let res = server.send_request::<Completion>(CompletionParams {\n         text_document_position: TextDocumentPositionParams::new(\n             server.doc_id(\"src/lib.rs\"),\n@@ -66,7 +64,6 @@ use std::collections::Spam;\n         work_done_progress_params: WorkDoneProgressParams::default(),\n     });\n     assert!(res.to_string().contains(\"HashMap\"));\n-    eprintln!(\"completion took {:?}\", completion_start.elapsed());\n }\n \n #[test]\n@@ -75,7 +72,8 @@ fn test_runnables_project() {\n         return;\n     }\n \n-    let code = r#\"\n+    let server = Project::with_fixture(\n+        r#\"\n //- /foo/Cargo.toml\n [package]\n name = \"foo\"\n@@ -95,11 +93,13 @@ version = \"0.0.0\"\n \n //- /bar/src/main.rs\n fn main() {}\n-\"#;\n-\n-    let server = Project::with_fixture(code).root(\"foo\").root(\"bar\").server();\n+\"#,\n+    )\n+    .root(\"foo\")\n+    .root(\"bar\")\n+    .server()\n+    .wait_until_workspace_is_loaded();\n \n-    server.wait_until_workspace_is_loaded();\n     server.request::<Runnables>(\n         RunnablesParams { text_document: server.doc_id(\"foo/tests/spam.rs\"), position: None },\n         json!([\n@@ -166,8 +166,8 @@ fn main() {\n \n pub use std::collections::HashMap;\n \"#,\n-    );\n-    server.wait_until_workspace_is_loaded();\n+    )\n+    .wait_until_workspace_is_loaded();\n \n     server.request::<Formatting>(\n         DocumentFormattingParams {\n@@ -224,8 +224,8 @@ fn main() {\n \n pub use std::collections::HashMap;\n \"#,\n-    );\n-    server.wait_until_workspace_is_loaded();\n+    )\n+    .wait_until_workspace_is_loaded();\n \n     server.request::<Formatting>(\n         DocumentFormattingParams {\n@@ -277,14 +277,14 @@ mod bar;\n \n fn main() {}\n \"#,\n-    );\n-    server.wait_until_workspace_is_loaded();\n-    let empty_context = || CodeActionContext { diagnostics: Vec::new(), only: None };\n+    )\n+    .wait_until_workspace_is_loaded();\n+\n     server.request::<CodeActionRequest>(\n         CodeActionParams {\n             text_document: server.doc_id(\"src/lib.rs\"),\n             range: Range::new(Position::new(0, 4), Position::new(0, 7)),\n-            context: empty_context(),\n+            context: CodeActionContext::default(),\n             partial_result_params: PartialResultParams::default(),\n             work_done_progress_params: WorkDoneProgressParams::default(),\n         },\n@@ -307,7 +307,7 @@ fn main() {}\n         CodeActionParams {\n             text_document: server.doc_id(\"src/lib.rs\"),\n             range: Range::new(Position::new(2, 4), Position::new(2, 7)),\n-            context: empty_context(),\n+            context: CodeActionContext::default(),\n             partial_result_params: PartialResultParams::default(),\n             work_done_progress_params: WorkDoneProgressParams::default(),\n         },\n@@ -348,15 +348,14 @@ fn main() {{}}\n         PROJECT = project.to_string(),\n     );\n \n-    let server = Project::with_fixture(&code).tmp_dir(tmp_dir).server();\n+    let server =\n+        Project::with_fixture(&code).tmp_dir(tmp_dir).server().wait_until_workspace_is_loaded();\n \n-    server.wait_until_workspace_is_loaded();\n-    let empty_context = || CodeActionContext { diagnostics: Vec::new(), only: None };\n     server.request::<CodeActionRequest>(\n         CodeActionParams {\n             text_document: server.doc_id(\"src/lib.rs\"),\n             range: Range::new(Position::new(0, 4), Position::new(0, 7)),\n-            context: empty_context(),\n+            context: CodeActionContext::default(),\n             partial_result_params: PartialResultParams::default(),\n             work_done_progress_params: WorkDoneProgressParams::default(),\n         },\n@@ -379,7 +378,7 @@ fn main() {{}}\n         CodeActionParams {\n             text_document: server.doc_id(\"src/lib.rs\"),\n             range: Range::new(Position::new(2, 4), Position::new(2, 7)),\n-            context: empty_context(),\n+            context: CodeActionContext::default(),\n             partial_result_params: PartialResultParams::default(),\n             work_done_progress_params: WorkDoneProgressParams::default(),\n         },\n@@ -412,9 +411,9 @@ fn main() {{}}\n         librs, libs\n     ))\n     .with_sysroot(true)\n-    .server();\n+    .server()\n+    .wait_until_workspace_is_loaded();\n \n-    server.wait_until_workspace_is_loaded();\n     for i in 0..10 {\n         server.notification::<DidOpenTextDocument>(DidOpenTextDocumentParams {\n             text_document: TextDocumentItem {\n@@ -425,7 +424,7 @@ fn main() {{}}\n             },\n         });\n     }\n-    let start = std::time::Instant::now();\n+    let start = Instant::now();\n     server.request::<OnEnter>(\n         TextDocumentPositionParams {\n             text_document: server.doc_id(\"src/m0.rs\"),\n@@ -461,8 +460,8 @@ version = \\\"0.0.0\\\"\n /// Some Docs\\r\\nfn main() {}\n \",\n     )\n-    .server();\n-    server.wait_until_workspace_is_loaded();\n+    .server()\n+    .wait_until_workspace_is_loaded();\n \n     server.request::<OnEnter>(\n         TextDocumentPositionParams {\n@@ -536,8 +535,9 @@ fn main() {\n     .with_config(|config| {\n         config.cargo.load_out_dirs_from_check = true;\n     })\n-    .server();\n-    server.wait_until_workspace_is_loaded();\n+    .server()\n+    .wait_until_workspace_is_loaded();\n+\n     let res = server.send_request::<HoverRequest>(HoverParams {\n         text_document_position_params: TextDocumentPositionParams::new(\n             server.doc_id(\"src/main.rs\"),\n@@ -546,6 +546,7 @@ fn main() {\n         work_done_progress_params: Default::default(),\n     });\n     assert!(res.to_string().contains(\"&str\"));\n+\n     let res = server.send_request::<HoverRequest>(HoverParams {\n         text_document_position_params: TextDocumentPositionParams::new(\n             server.doc_id(\"src/main.rs\"),\n@@ -554,6 +555,7 @@ fn main() {\n         work_done_progress_params: Default::default(),\n     });\n     assert!(res.to_string().contains(\"&str\"));\n+\n     server.request::<GotoTypeDefinition>(\n         GotoDefinitionParams {\n             text_document_position_params: TextDocumentPositionParams::new(\n@@ -579,6 +581,7 @@ fn main() {\n             \"targetUri\": \"file:///[..]src/main.rs\"\n         }]),\n     );\n+\n     server.request::<GotoTypeDefinition>(\n         GotoDefinitionParams {\n             text_document_position_params: TextDocumentPositionParams::new(\n@@ -611,6 +614,7 @@ fn resolve_proc_macro() {\n     if skip_slow_tests() {\n         return;\n     }\n+\n     let server = Project::with_fixture(\n         r###\"\n //- /foo/Cargo.toml\n@@ -679,16 +683,16 @@ pub fn foo(_input: TokenStream) -> TokenStream {\n     })\n     .root(\"foo\")\n     .root(\"bar\")\n-    .server();\n-    server.wait_until_workspace_is_loaded();\n+    .server()\n+    .wait_until_workspace_is_loaded();\n+\n     let res = server.send_request::<HoverRequest>(HoverParams {\n         text_document_position_params: TextDocumentPositionParams::new(\n             server.doc_id(\"foo/src/main.rs\"),\n             Position::new(7, 9),\n         ),\n         work_done_progress_params: Default::default(),\n     });\n-\n     let value = res.get(\"contents\").unwrap().get(\"value\").unwrap().to_string();\n     assert_eq!(value, r#\"\"\\n```rust\\nfoo::Bar\\n```\\n\\n```rust\\nfn bar()\\n```\"\"#)\n }"}, {"sha": "784cbda7932e277163668636073826542cb1f144", "filename": "crates/rust-analyzer/tests/rust-analyzer/support.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c6dffe479b1cd9ad1a81bd2f3f3f18bf8c112bda/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6dffe479b1cd9ad1a81bd2f3f3f18bf8c112bda/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fsupport.rs?ref=c6dffe479b1cd9ad1a81bd2f3f3f18bf8c112bda", "patch": "@@ -202,7 +202,7 @@ impl Server {\n         }\n         panic!(\"no response\");\n     }\n-    pub fn wait_until_workspace_is_loaded(&self) {\n+    pub fn wait_until_workspace_is_loaded(self) -> Server {\n         self.wait_for_message_cond(1, &|msg: &Message| match msg {\n             Message::Notification(n) if n.method == \"$/progress\" => {\n                 match n.clone().extract::<ProgressParams>(\"$/progress\").unwrap() {\n@@ -214,7 +214,8 @@ impl Server {\n                 }\n             }\n             _ => false,\n-        })\n+        });\n+        self\n     }\n     fn wait_for_message_cond(&self, n: usize, cond: &dyn Fn(&Message) -> bool) {\n         let mut total = 0;"}]}