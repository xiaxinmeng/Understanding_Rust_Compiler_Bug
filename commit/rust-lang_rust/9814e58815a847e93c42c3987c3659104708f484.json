{"sha": "9814e58815a847e93c42c3987c3659104708f484", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4MTRlNTg4MTVhODQ3ZTkzYzQyYzM5ODdjMzY1OTEwNDcwOGY0ODQ=", "commit": {"author": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-11-20T04:53:52Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-11-29T20:09:10Z"}, "message": "No longer parse the delimiters of the RHS of a macro as part of the expansion.", "tree": {"sha": "b8422587d1f00f5a5e3e60455cef7f443e3475c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8422587d1f00f5a5e3e60455cef7f443e3475c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9814e58815a847e93c42c3987c3659104708f484", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9814e58815a847e93c42c3987c3659104708f484", "html_url": "https://github.com/rust-lang/rust/commit/9814e58815a847e93c42c3987c3659104708f484", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9814e58815a847e93c42c3987c3659104708f484/comments", "author": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba354b1726988eca0d4a0b023c1bafd576b3570b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba354b1726988eca0d4a0b023c1bafd576b3570b", "html_url": "https://github.com/rust-lang/rust/commit/ba354b1726988eca0d4a0b023c1bafd576b3570b"}], "stats": {"total": 49, "additions": 28, "deletions": 21}, "files": [{"sha": "cdca6852dbb6248c212b5aa53aebe00cf5729f77", "filename": "src/libcore/hash.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9814e58815a847e93c42c3987c3659104708f484/src%2Flibcore%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9814e58815a847e93c42c3987c3659104708f484/src%2Flibcore%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash.rs?ref=9814e58815a847e93c42c3987c3659104708f484", "patch": "@@ -203,14 +203,14 @@ impl &SipState : io::Writer {\n \n         macro_rules! compress (\n             ($v0:expr, $v1:expr, $v2:expr, $v3:expr) =>\n-            {\n+            ({\n                 $v0 += $v1; $v1 = rotl!($v1, 13); $v1 ^= $v0;\n                 $v0 = rotl!($v0, 32);\n                 $v2 += $v3; $v3 = rotl!($v3, 16); $v3 ^= $v2;\n                 $v0 += $v3; $v3 = rotl!($v3, 21); $v3 ^= $v0;\n                 $v2 += $v1; $v1 = rotl!($v1, 17); $v1 ^= $v2;\n                 $v2 = rotl!($v2, 32);\n-            }\n+            })\n         );\n \n         let length = msg.len();"}, {"sha": "561732057cf3c5b049a556ba3124a671d2bb4fd3", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9814e58815a847e93c42c3987c3659104708f484/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9814e58815a847e93c42c3987c3659104708f484/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=9814e58815a847e93c42c3987c3659104708f484", "patch": "@@ -86,7 +86,7 @@ use option::unwrap;\n const SPIN_COUNT: uint = 0;\n \n macro_rules! move_it (\n-    { $x:expr } => { unsafe { let y = move *ptr::addr_of(&($x)); move y } }\n+    { $x:expr } => ( unsafe { let y = move *ptr::addr_of(&($x)); move y } )\n )\n \n #[doc(hidden)]"}, {"sha": "b4bea442e69cca434f8ea6fb8990a2866d5b5a67", "filename": "src/libcore/task/spawn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9814e58815a847e93c42c3987c3659104708f484/src%2Flibcore%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9814e58815a847e93c42c3987c3659104708f484/src%2Flibcore%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fspawn.rs?ref=9814e58815a847e93c42c3987c3659104708f484", "patch": "@@ -67,7 +67,7 @@ use rt::rust_task;\n use rt::rust_closure;\n \n macro_rules! move_it (\n-    { $x:expr } => { unsafe { let y = move *ptr::addr_of(&($x)); move y } }\n+    { $x:expr } => ( unsafe { let y = move *ptr::addr_of(&($x)); move y } )\n )\n \n type TaskSet = send_map::linear::LinearMap<*rust_task,()>;"}, {"sha": "03501521129b7ac0ef2ce30753aebddb63820387", "filename": "src/librustc/middle/trans/alt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9814e58815a847e93c42c3987c3659104708f484/src%2Flibrustc%2Fmiddle%2Ftrans%2Falt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9814e58815a847e93c42c3987c3659104708f484/src%2Flibrustc%2Fmiddle%2Ftrans%2Falt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Falt.rs?ref=9814e58815a847e93c42c3987c3659104708f484", "patch": "@@ -831,14 +831,14 @@ fn root_pats_as_necessary(bcx: block, m: &[@Match],\n // matches should fit that sort of pattern or NONE (however, some of the\n // matches may be wildcards like _ or identifiers).\n macro_rules! any_pat (\n-    ($m:expr, $pattern:pat) => {\n+    ($m:expr, $pattern:pat) => (\n         vec::any($m, |br| {\n             match br.pats[col].node {\n                 $pattern => true,\n                 _ => false\n             }\n         })\n-    }\n+    )\n )\n \n fn any_box_pat(m: &[@Match], col: uint) -> bool {"}, {"sha": "63885d5c2580bf65b77cb5a11df1106dab15fada", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9814e58815a847e93c42c3987c3659104708f484/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9814e58815a847e93c42c3987c3659104708f484/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=9814e58815a847e93c42c3987c3659104708f484", "patch": "@@ -81,12 +81,19 @@ fn add_new_extension(cx: ext_ctxt, sp: span, name: ident,\n                   success(named_matches) => {\n                     let rhs = match rhses[i] {\n                         // okay, what's your transcriber?\n-                      @matched_nonterminal(nt_tt(@tt)) => tt,\n-                      _ => cx.span_bug(sp, ~\"bad thing in rhs\")\n+                        @matched_nonterminal(nt_tt(@tt)) => {\n+                            match tt {\n+                                // cut off delimiters; don't parse 'em\n+                                tt_delim(tts) => tts.slice(1u,tts.len()-1u),\n+                                _ => cx.span_fatal(\n+                                    sp, ~\"macro rhs must be delimited\")\n+                            }\n+                        },\n+                        _ => cx.span_bug(sp, ~\"bad thing in rhs\")\n                     };\n                     // rhs has holes ( `$id` and `$(...)` that need filled)\n                     let trncbr = new_tt_reader(s_d, itr, Some(named_matches),\n-                                               ~[rhs]);\n+                                               rhs);\n                     let p = @Parser(cx.parse_sess(), cx.cfg(),\n                                     trncbr as reader);\n "}, {"sha": "4ccbdd0f8ed24b550a01f14ee8a256af295fc5c3", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9814e58815a847e93c42c3987c3659104708f484/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9814e58815a847e93c42c3987c3659104708f484/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=9814e58815a847e93c42c3987c3659104708f484", "patch": "@@ -120,7 +120,7 @@ enum view_item_parse_mode {\n The important thing is to make sure that lookahead doesn't balk\n at INTERPOLATED tokens */\n macro_rules! maybe_whole_expr (\n-    ($p:expr) => { match copy $p.token {\n+    ($p:expr) => ( match copy $p.token {\n       INTERPOLATED(token::nt_expr(e)) => {\n         $p.bump();\n         return e;\n@@ -131,33 +131,33 @@ macro_rules! maybe_whole_expr (\n                        expr_path(pt));\n       }\n       _ => ()\n-    }}\n+    })\n )\n \n macro_rules! maybe_whole (\n-    ($p:expr, $constructor:ident) => { match copy $p.token {\n+    ($p:expr, $constructor:ident) => ( match copy $p.token {\n       INTERPOLATED(token::$constructor(x)) => { $p.bump(); return x; }\n       _ => ()\n-    }} ;\n-    (deref $p:expr, $constructor:ident) => { match copy $p.token {\n+    }) ;\n+    (deref $p:expr, $constructor:ident) => ( match copy $p.token {\n       INTERPOLATED(token::$constructor(x)) => { $p.bump(); return *x; }\n       _ => ()\n-    }} ;\n-    (Some $p:expr, $constructor:ident) => { match copy $p.token {\n+    }) ;\n+    (Some $p:expr, $constructor:ident) => ( match copy $p.token {\n       INTERPOLATED(token::$constructor(x)) => { $p.bump(); return Some(x); }\n       _ => ()\n-    }} ;\n-    (iovi $p:expr, $constructor:ident) => { match copy $p.token {\n+    }) ;\n+    (iovi $p:expr, $constructor:ident) => ( match copy $p.token {\n       INTERPOLATED(token::$constructor(x)) => {\n         $p.bump();\n         return iovi_item(x);\n       }\n       _ => ()\n-    }} ;\n-    (pair_empty $p:expr, $constructor:ident) => { match copy $p.token {\n+    }) ;\n+    (pair_empty $p:expr, $constructor:ident) => ( match copy $p.token {\n       INTERPOLATED(token::$constructor(x)) => { $p.bump(); return (~[], x); }\n       _ => ()\n-    }}\n+    })\n \n )\n "}]}