{"sha": "8a57c736404abac81a6de20b0e90c19021e040b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhNTdjNzM2NDA0YWJhYzgxYTZkZTIwYjBlOTBjMTkwMjFlMDQwYjk=", "commit": {"author": {"name": "Jade", "email": "software@lfcode.ca", "date": "2021-06-01T23:16:59Z"}, "committer": {"name": "Jade", "email": "software@lfcode.ca", "date": "2021-06-07T04:51:17Z"}, "message": "feat: goto definition on an impl fn goes to that fn in the trait\n\ne.g. if you have a trait T and `impl T for S` for some struct, if you\ngoto definition on some function name inside the impl, it will go to the\ndefinition of that function inside the `trait T` block, rather than the\ncurrent behaviour of not going anywhere at all.", "tree": {"sha": "5ece2fcdc66cf91dd269ff0c64c2dc91ff216565", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ece2fcdc66cf91dd269ff0c64c2dc91ff216565"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a57c736404abac81a6de20b0e90c19021e040b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a57c736404abac81a6de20b0e90c19021e040b9", "html_url": "https://github.com/rust-lang/rust/commit/8a57c736404abac81a6de20b0e90c19021e040b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a57c736404abac81a6de20b0e90c19021e040b9/comments", "author": {"login": "lf-", "id": 6652840, "node_id": "MDQ6VXNlcjY2NTI4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6652840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lf-", "html_url": "https://github.com/lf-", "followers_url": "https://api.github.com/users/lf-/followers", "following_url": "https://api.github.com/users/lf-/following{/other_user}", "gists_url": "https://api.github.com/users/lf-/gists{/gist_id}", "starred_url": "https://api.github.com/users/lf-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lf-/subscriptions", "organizations_url": "https://api.github.com/users/lf-/orgs", "repos_url": "https://api.github.com/users/lf-/repos", "events_url": "https://api.github.com/users/lf-/events{/privacy}", "received_events_url": "https://api.github.com/users/lf-/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lf-", "id": 6652840, "node_id": "MDQ6VXNlcjY2NTI4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6652840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lf-", "html_url": "https://github.com/lf-", "followers_url": "https://api.github.com/users/lf-/followers", "following_url": "https://api.github.com/users/lf-/following{/other_user}", "gists_url": "https://api.github.com/users/lf-/gists{/gist_id}", "starred_url": "https://api.github.com/users/lf-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lf-/subscriptions", "organizations_url": "https://api.github.com/users/lf-/orgs", "repos_url": "https://api.github.com/users/lf-/repos", "events_url": "https://api.github.com/users/lf-/events{/privacy}", "received_events_url": "https://api.github.com/users/lf-/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13da28cc2bc1b59f7af817eca36927a71edb023c", "url": "https://api.github.com/repos/rust-lang/rust/commits/13da28cc2bc1b59f7af817eca36927a71edb023c", "html_url": "https://github.com/rust-lang/rust/commit/13da28cc2bc1b59f7af817eca36927a71edb023c"}], "stats": {"total": 60, "additions": 53, "deletions": 7}, "files": [{"sha": "c2b68a853016e91076ca7ccb7522d432bf2cf7e0", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8a57c736404abac81a6de20b0e90c19021e040b9/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a57c736404abac81a6de20b0e90c19021e040b9/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=8a57c736404abac81a6de20b0e90c19021e040b9", "patch": "@@ -50,7 +50,6 @@ use hir_def::{\n     per_ns::PerNs,\n     resolver::{HasResolver, Resolver},\n     src::HasSource as _,\n-    type_ref::TraitRef,\n     AdtId, AssocContainerId, AssocItemId, AssocItemLoc, AttrDefId, ConstId, ConstParamId,\n     DefWithBodyId, EnumId, FunctionId, GenericDefId, HasModule, ImplId, LifetimeParamId,\n     LocalEnumVariantId, LocalFieldId, Lookup, ModuleId, StaticId, StructId, TraitId, TypeAliasId,\n@@ -1797,9 +1796,11 @@ impl Impl {\n     }\n \n     // FIXME: the return type is wrong. This should be a hir version of\n-    // `TraitRef` (ie, resolved `TypeRef`).\n-    pub fn trait_(self, db: &dyn HirDatabase) -> Option<TraitRef> {\n-        db.impl_data(self.id).target_trait.as_deref().cloned()\n+    // `TraitRef` (to account for parameters and qualifiers)\n+    pub fn trait_(self, db: &dyn HirDatabase) -> Option<Trait> {\n+        let trait_ref = db.impl_trait(self.id)?.skip_binders().clone();\n+        let id = hir_ty::from_chalk_trait_id(trait_ref.trait_id);\n+        Some(Trait { id })\n     }\n \n     pub fn self_ty(self, db: &dyn HirDatabase) -> Type {"}, {"sha": "c236039f45deabb2cec335910b13f7b5919add99", "filename": "crates/ide/src/goto_definition.rs", "status": "modified", "additions": 48, "deletions": 3, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/8a57c736404abac81a6de20b0e90c19021e040b9/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a57c736404abac81a6de20b0e90c19021e040b9/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=8a57c736404abac81a6de20b0e90c19021e040b9", "patch": "@@ -1,10 +1,10 @@\n use std::convert::TryInto;\n \n use either::Either;\n-use hir::{InFile, Semantics};\n+use hir::{AsAssocItem, InFile, ModuleDef, Semantics};\n use ide_db::{\n     base_db::{AnchoredPath, FileId, FileLoader},\n-    defs::{NameClass, NameRefClass},\n+    defs::{Definition, NameClass, NameRefClass},\n     RootDatabase,\n };\n use syntax::{\n@@ -57,7 +57,8 @@ pub(crate) fn goto_definition(\n             },\n             ast::Name(name) => {\n                 let def = NameClass::classify(&sema, &name)?.referenced_or_defined(sema.db);\n-                def.try_to_nav(sema.db)\n+                try_find_trait_fn_definition(&sema.db, &def)\n+                    .or_else(|| def.try_to_nav(sema.db))\n             },\n             ast::Lifetime(lt) => if let Some(name_class) = NameClass::classify_lifetime(&sema, &lt) {\n                 let def = name_class.referenced_or_defined(sema.db);\n@@ -99,6 +100,32 @@ fn try_lookup_include_path(\n     })\n }\n \n+/// finds the trait definition of an impl'd function\n+/// e.g.\n+/// ```rust\n+/// trait A { fn a(); }\n+/// struct S;\n+/// impl A for S { fn a(); } // <-- on this function, will get the location of a() in the trait\n+/// ```\n+fn try_find_trait_fn_definition(db: &RootDatabase, def: &Definition) -> Option<NavigationTarget> {\n+    match def {\n+        Definition::ModuleDef(ModuleDef::Function(f)) => {\n+            let name = def.name(db)?;\n+            let assoc = f.as_assoc_item(db)?;\n+            let imp = match assoc.container(db) {\n+                hir::AssocItemContainer::Impl(imp) => imp,\n+                _ => return None,\n+            };\n+            let trait_ = imp.trait_(db)?;\n+            trait_\n+                .items(db)\n+                .iter()\n+                .find_map(|itm| (itm.name(db)? == name).then(|| itm.try_to_nav(db)).flatten())\n+        }\n+        _ => None,\n+    }\n+}\n+\n fn pick_best(tokens: TokenAtOffset<SyntaxToken>) -> Option<SyntaxToken> {\n     return tokens.max_by_key(priority);\n     fn priority(n: &SyntaxToken) -> usize {\n@@ -1259,6 +1286,24 @@ fn main() {\n //- /foo.txt\n // empty\n //^ file\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn goto_def_of_trait_impl_fn() {\n+        check(\n+            r#\"\n+trait Twait {\n+    fn a();\n+    // ^\n+}\n+\n+struct Stwuct;\n+\n+impl Twait for Stwuct {\n+    fn a$0();\n+}\n \"#,\n         );\n     }"}]}