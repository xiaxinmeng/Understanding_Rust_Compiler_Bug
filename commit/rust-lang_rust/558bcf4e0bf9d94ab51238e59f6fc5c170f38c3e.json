{"sha": "558bcf4e0bf9d94ab51238e59f6fc5c170f38c3e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1OGJjZjRlMGJmOWQ5NGFiNTEyMzhlNTlmNmZjNWMxNzBmMzhjM2U=", "commit": {"author": {"name": "Domantas Jadenkus", "email": "djadenkus@gmail.com", "date": "2021-02-16T21:43:21Z"}, "committer": {"name": "Domantas Jadenkus", "email": "djadenkus@gmail.com", "date": "2021-02-27T10:21:57Z"}, "message": "generate try_into instead of into", "tree": {"sha": "6efdc9d6ce4a1c9e8c886c1b3e70a17d6a19fe7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6efdc9d6ce4a1c9e8c886c1b3e70a17d6a19fe7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/558bcf4e0bf9d94ab51238e59f6fc5c170f38c3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/558bcf4e0bf9d94ab51238e59f6fc5c170f38c3e", "html_url": "https://github.com/rust-lang/rust/commit/558bcf4e0bf9d94ab51238e59f6fc5c170f38c3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/558bcf4e0bf9d94ab51238e59f6fc5c170f38c3e/comments", "author": {"login": "jDomantas", "id": 8329015, "node_id": "MDQ6VXNlcjgzMjkwMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8329015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jDomantas", "html_url": "https://github.com/jDomantas", "followers_url": "https://api.github.com/users/jDomantas/followers", "following_url": "https://api.github.com/users/jDomantas/following{/other_user}", "gists_url": "https://api.github.com/users/jDomantas/gists{/gist_id}", "starred_url": "https://api.github.com/users/jDomantas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jDomantas/subscriptions", "organizations_url": "https://api.github.com/users/jDomantas/orgs", "repos_url": "https://api.github.com/users/jDomantas/repos", "events_url": "https://api.github.com/users/jDomantas/events{/privacy}", "received_events_url": "https://api.github.com/users/jDomantas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jDomantas", "id": 8329015, "node_id": "MDQ6VXNlcjgzMjkwMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8329015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jDomantas", "html_url": "https://github.com/jDomantas", "followers_url": "https://api.github.com/users/jDomantas/followers", "following_url": "https://api.github.com/users/jDomantas/following{/other_user}", "gists_url": "https://api.github.com/users/jDomantas/gists{/gist_id}", "starred_url": "https://api.github.com/users/jDomantas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jDomantas/subscriptions", "organizations_url": "https://api.github.com/users/jDomantas/orgs", "repos_url": "https://api.github.com/users/jDomantas/repos", "events_url": "https://api.github.com/users/jDomantas/events{/privacy}", "received_events_url": "https://api.github.com/users/jDomantas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4b6cbe5b6b9c90b577da7788669b6b6995ae524", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4b6cbe5b6b9c90b577da7788669b6b6995ae524", "html_url": "https://github.com/rust-lang/rust/commit/d4b6cbe5b6b9c90b577da7788669b6b6995ae524"}], "stats": {"total": 168, "additions": 96, "deletions": 72}, "files": [{"sha": "871bcab50b0913d4011ebe01aa2b12ae7d7e8075", "filename": "crates/ide_assists/src/handlers/generate_enum_projection_method.rs", "status": "modified", "additions": 66, "deletions": 42, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/558bcf4e0bf9d94ab51238e59f6fc5c170f38c3e/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_enum_projection_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/558bcf4e0bf9d94ab51238e59f6fc5c170f38c3e/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_enum_projection_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_enum_projection_method.rs?ref=558bcf4e0bf9d94ab51238e59f6fc5c170f38c3e", "patch": "@@ -8,9 +8,9 @@ use crate::{\n     AssistContext, AssistId, AssistKind, Assists,\n };\n \n-// Assist: generate_enum_into_method\n+// Assist: generate_enum_try_into_method\n //\n-// Generate an `into_` method for an enum variant.\n+// Generate an `try_into_` method for an enum variant.\n //\n // ```\n // enum Value {\n@@ -26,23 +26,29 @@ use crate::{\n // }\n //\n // impl Value {\n-//     fn into_text(self) -> Option<String> {\n+//     fn try_into_text(self) -> Result<String, Self> {\n //         if let Self::Text(v) = self {\n-//             Some(v)\n+//             Ok(v)\n //         } else {\n-//             None\n+//             Err(self)\n //         }\n //     }\n // }\n // ```\n-pub(crate) fn generate_enum_into_method(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+pub(crate) fn generate_enum_try_into_method(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     generate_enum_projection_method(\n         acc,\n         ctx,\n-        \"generate_enum_into_method\",\n-        \"Generate an `into_` method for an enum variant\",\n-        \"into\",\n-        \"\",\n+        \"generate_enum_try_into_method\",\n+        \"Generate an `try_into_` method for an enum variant\",\n+        ProjectionProps {\n+            fn_name_prefix: \"try_into\",\n+            self_param: \"self\",\n+            return_prefix: \"Result<\",\n+            return_suffix: \", Self>\",\n+            happy_case: \"Ok\",\n+            sad_case: \"Err(self)\",\n+        },\n     )\n }\n \n@@ -79,18 +85,32 @@ pub(crate) fn generate_enum_as_method(acc: &mut Assists, ctx: &AssistContext) ->\n         ctx,\n         \"generate_enum_as_method\",\n         \"Generate an `as_` method for an enum variant\",\n-        \"as\",\n-        \"&\",\n+        ProjectionProps {\n+            fn_name_prefix: \"as\",\n+            self_param: \"&self\",\n+            return_prefix: \"Option<&\",\n+            return_suffix: \">\",\n+            happy_case: \"Some\",\n+            sad_case: \"None\",\n+        },\n     )\n }\n \n-pub(crate) fn generate_enum_projection_method(\n+struct ProjectionProps {\n+    fn_name_prefix: &'static str,\n+    self_param: &'static str,\n+    return_prefix: &'static str,\n+    return_suffix: &'static str,\n+    happy_case: &'static str,\n+    sad_case: &'static str,\n+}\n+\n+fn generate_enum_projection_method(\n     acc: &mut Assists,\n     ctx: &AssistContext,\n     assist_id: &'static str,\n     assist_description: &str,\n-    fn_name_prefix: &str,\n-    ref_prefix: &str,\n+    props: ProjectionProps,\n ) -> Option<()> {\n     let variant = ctx.find_node_at_offset::<ast::Variant>()?;\n     let variant_name = variant.name()?;\n@@ -112,7 +132,7 @@ pub(crate) fn generate_enum_projection_method(\n         ast::StructKind::Unit => return None,\n     };\n \n-    let fn_name = format!(\"{}_{}\", fn_name_prefix, &to_lower_snake_case(variant_name.text()));\n+    let fn_name = format!(\"{}_{}\", props.fn_name_prefix, &to_lower_snake_case(variant_name.text()));\n \n     // Return early if we've found an existing new fn\n     let impl_def = find_struct_impl(&ctx, &parent_enum, &fn_name)?;\n@@ -121,20 +141,24 @@ pub(crate) fn generate_enum_projection_method(\n     acc.add(AssistId(assist_id, AssistKind::Generate), assist_description, target, |builder| {\n         let vis = parent_enum.visibility().map_or(String::new(), |v| format!(\"{} \", v));\n         let method = format!(\n-            \"    {0}fn {1}({2}self) -> Option<{2}{3}> {{\n-        if let Self::{4}{5} = self {{\n-            Some({6})\n+            \"    {0}fn {1}({2}) -> {3}{4}{5} {{\n+        if let Self::{6}{7} = self {{\n+            {8}({9})\n         }} else {{\n-            None\n+            {10}\n         }}\n     }}\",\n             vis,\n             fn_name,\n-            ref_prefix,\n+            props.self_param,\n+            props.return_prefix,\n             field_type.syntax(),\n+            props.return_suffix,\n             variant_name,\n             pattern_suffix,\n+            props.happy_case,\n             bound_name,\n+            props.sad_case,\n         );\n \n         add_method_to_adt(builder, &parent_enum, impl_def, &method);\n@@ -148,9 +172,9 @@ mod tests {\n     use super::*;\n \n     #[test]\n-    fn test_generate_enum_into_tuple_variant() {\n+    fn test_generate_enum_try_into_tuple_variant() {\n         check_assist(\n-            generate_enum_into_method,\n+            generate_enum_try_into_method,\n             r#\"\n enum Value {\n     Number(i32),\n@@ -162,42 +186,42 @@ enum Value {\n }\n \n impl Value {\n-    fn into_text(self) -> Option<String> {\n+    fn try_into_text(self) -> Result<String, Self> {\n         if let Self::Text(v) = self {\n-            Some(v)\n+            Ok(v)\n         } else {\n-            None\n+            Err(self)\n         }\n     }\n }\"#,\n         );\n     }\n \n     #[test]\n-    fn test_generate_enum_into_already_implemented() {\n+    fn test_generate_enum_try_into_already_implemented() {\n         check_assist_not_applicable(\n-            generate_enum_into_method,\n+            generate_enum_try_into_method,\n             r#\"enum Value {\n     Number(i32),\n     Text(String)$0,\n }\n \n impl Value {\n-    fn into_text(self) -> Option<String> {\n+    fn try_into_text(self) -> Result<String, Self> {\n         if let Self::Text(v) = self {\n-            Some(v)\n+            Ok(v)\n         } else {\n-            None\n+            Err(self)\n         }\n     }\n }\"#,\n         );\n     }\n \n     #[test]\n-    fn test_generate_enum_into_unit_variant() {\n+    fn test_generate_enum_try_into_unit_variant() {\n         check_assist_not_applicable(\n-            generate_enum_into_method,\n+            generate_enum_try_into_method,\n             r#\"enum Value {\n     Number(i32),\n     Text(String),\n@@ -207,9 +231,9 @@ impl Value {\n     }\n \n     #[test]\n-    fn test_generate_enum_into_record_with_multiple_fields() {\n+    fn test_generate_enum_try_into_record_with_multiple_fields() {\n         check_assist_not_applicable(\n-            generate_enum_into_method,\n+            generate_enum_try_into_method,\n             r#\"enum Value {\n     Number(i32),\n     Text(String),\n@@ -219,9 +243,9 @@ impl Value {\n     }\n \n     #[test]\n-    fn test_generate_enum_into_tuple_with_multiple_fields() {\n+    fn test_generate_enum_try_into_tuple_with_multiple_fields() {\n         check_assist_not_applicable(\n-            generate_enum_into_method,\n+            generate_enum_try_into_method,\n             r#\"enum Value {\n     Number(i32),\n     Text(String, String)$0,\n@@ -230,9 +254,9 @@ impl Value {\n     }\n \n     #[test]\n-    fn test_generate_enum_into_record_variant() {\n+    fn test_generate_enum_try_into_record_variant() {\n         check_assist(\n-            generate_enum_into_method,\n+            generate_enum_try_into_method,\n             r#\"enum Value {\n     Number(i32),\n     Text { text: String }$0,\n@@ -243,11 +267,11 @@ impl Value {\n }\n \n impl Value {\n-    fn into_text(self) -> Option<String> {\n+    fn try_into_text(self) -> Result<String, Self> {\n         if let Self::Text { text } = self {\n-            Some(text)\n+            Ok(text)\n         } else {\n-            None\n+            Err(self)\n         }\n     }\n }\"#,"}, {"sha": "4c067d45113ecb465a973dcced091de499cb3bea", "filename": "crates/ide_assists/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/558bcf4e0bf9d94ab51238e59f6fc5c170f38c3e/crates%2Fide_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/558bcf4e0bf9d94ab51238e59f6fc5c170f38c3e/crates%2Fide_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Flib.rs?ref=558bcf4e0bf9d94ab51238e59f6fc5c170f38c3e", "patch": "@@ -191,7 +191,7 @@ mod handlers {\n             generate_default_from_enum_variant::generate_default_from_enum_variant,\n             generate_derive::generate_derive,\n             generate_enum_is_method::generate_enum_is_method,\n-            generate_enum_projection_method::generate_enum_into_method,\n+            generate_enum_projection_method::generate_enum_try_into_method,\n             generate_enum_projection_method::generate_enum_as_method,\n             generate_from_impl_for_enum::generate_from_impl_for_enum,\n             generate_function::generate_function,"}, {"sha": "7f6dbbccf20b2fe564b517690f57ecc28dd7c3a9", "filename": "crates/ide_assists/src/tests/generated.rs", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/558bcf4e0bf9d94ab51238e59f6fc5c170f38c3e/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/558bcf4e0bf9d94ab51238e59f6fc5c170f38c3e/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=558bcf4e0bf9d94ab51238e59f6fc5c170f38c3e", "patch": "@@ -511,35 +511,6 @@ impl Value {\n     )\n }\n \n-#[test]\n-fn doctest_generate_enum_into_method() {\n-    check_doc_test(\n-        \"generate_enum_into_method\",\n-        r#####\"\n-enum Value {\n- Number(i32),\n- Text(String)$0,\n-}\n-\"#####,\n-        r#####\"\n-enum Value {\n- Number(i32),\n- Text(String),\n-}\n-\n-impl Value {\n-    fn into_text(self) -> Option<String> {\n-        if let Self::Text(v) = self {\n-            Some(v)\n-        } else {\n-            None\n-        }\n-    }\n-}\n-\"#####,\n-    )\n-}\n-\n #[test]\n fn doctest_generate_enum_is_method() {\n     check_doc_test(\n@@ -568,6 +539,35 @@ impl Version {\n     )\n }\n \n+#[test]\n+fn doctest_generate_enum_try_into_method() {\n+    check_doc_test(\n+        \"generate_enum_try_into_method\",\n+        r#####\"\n+enum Value {\n+ Number(i32),\n+ Text(String)$0,\n+}\n+\"#####,\n+        r#####\"\n+enum Value {\n+ Number(i32),\n+ Text(String),\n+}\n+\n+impl Value {\n+    fn try_into_text(self) -> Result<String, Self> {\n+        if let Self::Text(v) = self {\n+            Ok(v)\n+        } else {\n+            Err(self)\n+        }\n+    }\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_generate_from_impl_for_enum() {\n     check_doc_test("}]}