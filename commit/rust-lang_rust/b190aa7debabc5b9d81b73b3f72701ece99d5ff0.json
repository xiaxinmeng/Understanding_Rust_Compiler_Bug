{"sha": "b190aa7debabc5b9d81b73b3f72701ece99d5ff0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxOTBhYTdkZWJhYmM1YjlkODFiNzNiM2Y3MjcwMWVjZTk5ZDVmZjA=", "commit": {"author": {"name": "Devon Hollowood", "email": "devonhollowood@gmail.com", "date": "2015-12-21T09:03:12Z"}, "committer": {"name": "Devon Hollowood", "email": "devonhollowood@gmail.com", "date": "2015-12-21T09:03:12Z"}, "message": "Implement #507\n\nMake `used_underscore_binding` lint compatible with MacroAttributes\nexpansions. TODO: Add a good test for this.", "tree": {"sha": "3554203896bd5fe9b7f6ae405f2740f6906e21ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3554203896bd5fe9b7f6ae405f2740f6906e21ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b190aa7debabc5b9d81b73b3f72701ece99d5ff0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b190aa7debabc5b9d81b73b3f72701ece99d5ff0", "html_url": "https://github.com/rust-lang/rust/commit/b190aa7debabc5b9d81b73b3f72701ece99d5ff0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b190aa7debabc5b9d81b73b3f72701ece99d5ff0/comments", "author": {"login": "devonhollowood", "id": 7864326, "node_id": "MDQ6VXNlcjc4NjQzMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/7864326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devonhollowood", "html_url": "https://github.com/devonhollowood", "followers_url": "https://api.github.com/users/devonhollowood/followers", "following_url": "https://api.github.com/users/devonhollowood/following{/other_user}", "gists_url": "https://api.github.com/users/devonhollowood/gists{/gist_id}", "starred_url": "https://api.github.com/users/devonhollowood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devonhollowood/subscriptions", "organizations_url": "https://api.github.com/users/devonhollowood/orgs", "repos_url": "https://api.github.com/users/devonhollowood/repos", "events_url": "https://api.github.com/users/devonhollowood/events{/privacy}", "received_events_url": "https://api.github.com/users/devonhollowood/received_events", "type": "User", "site_admin": false}, "committer": {"login": "devonhollowood", "id": 7864326, "node_id": "MDQ6VXNlcjc4NjQzMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/7864326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devonhollowood", "html_url": "https://github.com/devonhollowood", "followers_url": "https://api.github.com/users/devonhollowood/followers", "following_url": "https://api.github.com/users/devonhollowood/following{/other_user}", "gists_url": "https://api.github.com/users/devonhollowood/gists{/gist_id}", "starred_url": "https://api.github.com/users/devonhollowood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devonhollowood/subscriptions", "organizations_url": "https://api.github.com/users/devonhollowood/orgs", "repos_url": "https://api.github.com/users/devonhollowood/repos", "events_url": "https://api.github.com/users/devonhollowood/events{/privacy}", "received_events_url": "https://api.github.com/users/devonhollowood/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a32445aa7fdc7d38fdfeb23e07536ff11c860bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a32445aa7fdc7d38fdfeb23e07536ff11c860bc", "html_url": "https://github.com/rust-lang/rust/commit/4a32445aa7fdc7d38fdfeb23e07536ff11c860bc"}], "stats": {"total": 38, "additions": 31, "deletions": 7}, "files": [{"sha": "139dfde36815a71e82e1d2ba39445ff15482cc24", "filename": "src/misc.rs", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b190aa7debabc5b9d81b73b3f72701ece99d5ff0/src%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b190aa7debabc5b9d81b73b3f72701ece99d5ff0/src%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmisc.rs?ref=b190aa7debabc5b9d81b73b3f72701ece99d5ff0", "patch": "@@ -3,15 +3,15 @@ use syntax::ptr::P;\n use rustc_front::hir::*;\n use reexport::*;\n use rustc_front::util::{is_comparison_binop, binop_to_string};\n-use syntax::codemap::{Span, Spanned};\n+use syntax::codemap::{Span, Spanned, ExpnFormat};\n use rustc_front::intravisit::FnKind;\n use rustc::middle::ty;\n use rustc::middle::const_eval::ConstVal::Float;\n use rustc::middle::const_eval::eval_const_expr_partial;\n use rustc::middle::const_eval::EvalHint::ExprTypeChecked;\n \n use utils::{get_item_name, match_path, snippet, get_parent_expr, span_lint};\n-use utils::{span_help_and_lint, in_external_macro, walk_ptrs_ty, is_integer_literal};\n+use utils::{span_help_and_lint, walk_ptrs_ty, is_integer_literal};\n \n /// **What it does:** This lint checks for function arguments and let bindings denoted as `ref`. It is `Warn` by default.\n ///\n@@ -345,14 +345,17 @@ impl LintPass for UsedUnderscoreBinding {\n \n impl LateLintPass for UsedUnderscoreBinding {\n     fn check_expr(&mut self, cx: &LateContext, expr: &Expr) {\n+        if in_attributes_expansion(cx, expr) { // Don't lint things expanded by #[derive(...)], etc\n+            return;\n+        }\n         let needs_lint = match expr.node {\n             ExprPath(_, ref path) => {\n                 let ident = path.segments.last()\n                                 .expect(\"path should always have at least one segment\")\n                                 .identifier;\n                 ident.name.as_str().chars().next() == Some('_') //starts with '_'\n                 && ident.name.as_str().chars().skip(1).next() != Some('_') //doesn't start with \"__\"\n-                && ident.name != ident.unhygienic_name //not in macro\n+                && ident.name != ident.unhygienic_name //not in bang macro\n                 && is_used(cx, expr)\n             },\n             ExprField(_, spanned) => {\n@@ -362,9 +365,6 @@ impl LateLintPass for UsedUnderscoreBinding {\n             },\n             _ => false\n         };\n-        if in_external_macro(cx, expr.span) {\n-            return\n-        }\n         if needs_lint {\n             cx.span_lint(USED_UNDERSCORE_BINDING, expr.span,\n                          \"used binding which is prefixed with an underscore. A leading underscore \\\n@@ -373,6 +373,8 @@ impl LateLintPass for UsedUnderscoreBinding {\n     }\n }\n \n+/// Heuristic to see if an expression is used. Should be compatible with `unused_variables`'s idea\n+/// of what it means for an expression to be \"used\".\n fn is_used(cx: &LateContext, expr: &Expr) -> bool {\n     if let Some(ref parent) = get_parent_expr(cx, expr) {\n         match parent.node {\n@@ -385,3 +387,16 @@ fn is_used(cx: &LateContext, expr: &Expr) -> bool {\n         true\n     }\n }\n+\n+/// Test whether an expression is in a macro expansion (e.g. something generated by #[derive(...)]\n+/// or the like)\n+fn in_attributes_expansion(cx: &LateContext, expr: &Expr) -> bool {\n+    cx.sess().codemap().with_expn_info(expr.span.expn_id, |info_opt| {\n+        info_opt.map_or(false, |info| {\n+            match info.callee.format {\n+                ExpnFormat::MacroAttribute(_) => true,\n+                _ => false,\n+            }\n+        })\n+    })\n+}"}, {"sha": "fd1b3bfc162e7f3da9c41136cc29140e4192fe75", "filename": "tests/compile-fail/used_underscore_binding.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b190aa7debabc5b9d81b73b3f72701ece99d5ff0/tests%2Fcompile-fail%2Fused_underscore_binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b190aa7debabc5b9d81b73b3f72701ece99d5ff0/tests%2Fcompile-fail%2Fused_underscore_binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fused_underscore_binding.rs?ref=b190aa7debabc5b9d81b73b3f72701ece99d5ff0", "patch": "@@ -9,7 +9,15 @@ fn prefix_underscore(_foo: u32) -> u32 {\n \n /// Test that we lint even if the use is within a macro expansion\n fn in_macro(_foo: u32) {\n-    println!(\"{}\", _foo); // doesn't warn, nut should #507\n+    println!(\"{}\", _foo); //~ ERROR used binding which is prefixed with an underscore\n+}\n+\n+// TODO: This doesn't actually correctly test this. Need to find a #[derive(...)] which sets off\n+// the lint if the `in_attributes_expansion` test isn't there\n+/// Test that we do not lint for unused underscores in a MacroAttribute expansion\n+#[derive(Clone)]\n+struct MacroAttributesTest {\n+    _foo: u32,\n }\n \n // Struct for testing use of fields prefixed with an underscore\n@@ -68,6 +76,7 @@ fn non_variables() {\n \n fn main() {\n     let foo = 0u32;\n+    let _ = MacroAttributesTest{_foo: 0};\n     // tests of unused_underscore lint\n     let _ = prefix_underscore(foo);\n     in_macro(foo);"}]}