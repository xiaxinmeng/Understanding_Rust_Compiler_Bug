{"sha": "bbf0b159b7831b0d6d192e128fded04978931c64", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiZjBiMTU5Yjc4MzFiMGQ2ZDE5MmUxMjhmZGVkMDQ5Nzg5MzFjNjQ=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-15T15:56:29Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-15T16:11:42Z"}, "message": "Make core::sync::atomic::Ordering #[non_exhaustive]", "tree": {"sha": "03c6d7286f7ee7ce19d2161a691272183c0ec375", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03c6d7286f7ee7ce19d2161a691272183c0ec375"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbf0b159b7831b0d6d192e128fded04978931c64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbf0b159b7831b0d6d192e128fded04978931c64", "html_url": "https://github.com/rust-lang/rust/commit/bbf0b159b7831b0d6d192e128fded04978931c64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbf0b159b7831b0d6d192e128fded04978931c64/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5733050de780ae4d11e3a7af615df792fdf908e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5733050de780ae4d11e3a7af615df792fdf908e", "html_url": "https://github.com/rust-lang/rust/commit/a5733050de780ae4d11e3a7af615df792fdf908e"}], "stats": {"total": 26, "additions": 2, "deletions": 24}, "files": [{"sha": "e85bf1dfcad23c99116b2cd20497752a2f9991e2", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bbf0b159b7831b0d6d192e128fded04978931c64/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf0b159b7831b0d6d192e128fded04978931c64/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=bbf0b159b7831b0d6d192e128fded04978931c64", "patch": "@@ -120,6 +120,7 @@\n #![feature(const_slice_len)]\n #![feature(const_str_as_bytes)]\n #![feature(const_str_len)]\n+#![feature(non_exhaustive)]\n \n #[prelude_import]\n #[allow(unused)]"}, {"sha": "617e067e0787ed128a1e1217bdc9b6ae395bc575", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 1, "deletions": 24, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/bbf0b159b7831b0d6d192e128fded04978931c64/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf0b159b7831b0d6d192e128fded04978931c64/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=bbf0b159b7831b0d6d192e128fded04978931c64", "patch": "@@ -185,6 +185,7 @@ unsafe impl<T> Sync for AtomicPtr<T> {}\n /// [nomicon]: ../../../nomicon/atomics.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Copy, Clone, Debug)]\n+#[non_exhaustive]\n pub enum Ordering {\n     /// No ordering constraints, only atomic operations.\n     ///\n@@ -256,10 +257,6 @@ pub enum Ordering {\n     /// [`AcqRel`]: https://llvm.org/docs/Atomics.html#acquirerelease\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     SeqCst,\n-    // Prevent exhaustive matching to allow for future extension\n-    #[doc(hidden)]\n-    #[unstable(feature = \"future_atomic_orderings\", issue = \"0\")]\n-    __Nonexhaustive,\n }\n \n /// An [`AtomicBool`] initialized to `false`.\n@@ -1954,7 +1951,6 @@ fn strongest_failure_ordering(order: Ordering) -> Ordering {\n         SeqCst => SeqCst,\n         Acquire => Acquire,\n         AcqRel => Acquire,\n-        __Nonexhaustive => __Nonexhaustive,\n     }\n }\n \n@@ -1966,7 +1962,6 @@ unsafe fn atomic_store<T>(dst: *mut T, val: T, order: Ordering) {\n         SeqCst => intrinsics::atomic_store(dst, val),\n         Acquire => panic!(\"there is no such thing as an acquire store\"),\n         AcqRel => panic!(\"there is no such thing as an acquire/release store\"),\n-        __Nonexhaustive => panic!(\"invalid memory ordering\"),\n     }\n }\n \n@@ -1978,7 +1973,6 @@ unsafe fn atomic_load<T>(dst: *const T, order: Ordering) -> T {\n         SeqCst => intrinsics::atomic_load(dst),\n         Release => panic!(\"there is no such thing as a release load\"),\n         AcqRel => panic!(\"there is no such thing as an acquire/release load\"),\n-        __Nonexhaustive => panic!(\"invalid memory ordering\"),\n     }\n }\n \n@@ -1991,7 +1985,6 @@ unsafe fn atomic_swap<T>(dst: *mut T, val: T, order: Ordering) -> T {\n         AcqRel => intrinsics::atomic_xchg_acqrel(dst, val),\n         Relaxed => intrinsics::atomic_xchg_relaxed(dst, val),\n         SeqCst => intrinsics::atomic_xchg(dst, val),\n-        __Nonexhaustive => panic!(\"invalid memory ordering\"),\n     }\n }\n \n@@ -2004,7 +1997,6 @@ unsafe fn atomic_add<T>(dst: *mut T, val: T, order: Ordering) -> T {\n         AcqRel => intrinsics::atomic_xadd_acqrel(dst, val),\n         Relaxed => intrinsics::atomic_xadd_relaxed(dst, val),\n         SeqCst => intrinsics::atomic_xadd(dst, val),\n-        __Nonexhaustive => panic!(\"invalid memory ordering\"),\n     }\n }\n \n@@ -2017,7 +2009,6 @@ unsafe fn atomic_sub<T>(dst: *mut T, val: T, order: Ordering) -> T {\n         AcqRel => intrinsics::atomic_xsub_acqrel(dst, val),\n         Relaxed => intrinsics::atomic_xsub_relaxed(dst, val),\n         SeqCst => intrinsics::atomic_xsub(dst, val),\n-        __Nonexhaustive => panic!(\"invalid memory ordering\"),\n     }\n }\n \n@@ -2039,8 +2030,6 @@ unsafe fn atomic_compare_exchange<T>(dst: *mut T,\n         (AcqRel, Relaxed) => intrinsics::atomic_cxchg_acqrel_failrelaxed(dst, old, new),\n         (SeqCst, Relaxed) => intrinsics::atomic_cxchg_failrelaxed(dst, old, new),\n         (SeqCst, Acquire) => intrinsics::atomic_cxchg_failacq(dst, old, new),\n-        (__Nonexhaustive, _) => panic!(\"invalid memory ordering\"),\n-        (_, __Nonexhaustive) => panic!(\"invalid memory ordering\"),\n         (_, AcqRel) => panic!(\"there is no such thing as an acquire/release failure ordering\"),\n         (_, Release) => panic!(\"there is no such thing as a release failure ordering\"),\n         _ => panic!(\"a failure ordering can't be stronger than a success ordering\"),\n@@ -2065,8 +2054,6 @@ unsafe fn atomic_compare_exchange_weak<T>(dst: *mut T,\n         (AcqRel, Relaxed) => intrinsics::atomic_cxchgweak_acqrel_failrelaxed(dst, old, new),\n         (SeqCst, Relaxed) => intrinsics::atomic_cxchgweak_failrelaxed(dst, old, new),\n         (SeqCst, Acquire) => intrinsics::atomic_cxchgweak_failacq(dst, old, new),\n-        (__Nonexhaustive, _) => panic!(\"invalid memory ordering\"),\n-        (_, __Nonexhaustive) => panic!(\"invalid memory ordering\"),\n         (_, AcqRel) => panic!(\"there is no such thing as an acquire/release failure ordering\"),\n         (_, Release) => panic!(\"there is no such thing as a release failure ordering\"),\n         _ => panic!(\"a failure ordering can't be stronger than a success ordering\"),\n@@ -2082,7 +2069,6 @@ unsafe fn atomic_and<T>(dst: *mut T, val: T, order: Ordering) -> T {\n         AcqRel => intrinsics::atomic_and_acqrel(dst, val),\n         Relaxed => intrinsics::atomic_and_relaxed(dst, val),\n         SeqCst => intrinsics::atomic_and(dst, val),\n-        __Nonexhaustive => panic!(\"invalid memory ordering\"),\n     }\n }\n \n@@ -2094,7 +2080,6 @@ unsafe fn atomic_nand<T>(dst: *mut T, val: T, order: Ordering) -> T {\n         AcqRel => intrinsics::atomic_nand_acqrel(dst, val),\n         Relaxed => intrinsics::atomic_nand_relaxed(dst, val),\n         SeqCst => intrinsics::atomic_nand(dst, val),\n-        __Nonexhaustive => panic!(\"invalid memory ordering\"),\n     }\n }\n \n@@ -2106,7 +2091,6 @@ unsafe fn atomic_or<T>(dst: *mut T, val: T, order: Ordering) -> T {\n         AcqRel => intrinsics::atomic_or_acqrel(dst, val),\n         Relaxed => intrinsics::atomic_or_relaxed(dst, val),\n         SeqCst => intrinsics::atomic_or(dst, val),\n-        __Nonexhaustive => panic!(\"invalid memory ordering\"),\n     }\n }\n \n@@ -2118,7 +2102,6 @@ unsafe fn atomic_xor<T>(dst: *mut T, val: T, order: Ordering) -> T {\n         AcqRel => intrinsics::atomic_xor_acqrel(dst, val),\n         Relaxed => intrinsics::atomic_xor_relaxed(dst, val),\n         SeqCst => intrinsics::atomic_xor(dst, val),\n-        __Nonexhaustive => panic!(\"invalid memory ordering\"),\n     }\n }\n \n@@ -2131,7 +2114,6 @@ unsafe fn atomic_max<T>(dst: *mut T, val: T, order: Ordering) -> T {\n         AcqRel => intrinsics::atomic_max_acqrel(dst, val),\n         Relaxed => intrinsics::atomic_max_relaxed(dst, val),\n         SeqCst => intrinsics::atomic_max(dst, val),\n-        __Nonexhaustive => panic!(\"invalid memory ordering\"),\n     }\n }\n \n@@ -2144,7 +2126,6 @@ unsafe fn atomic_min<T>(dst: *mut T, val: T, order: Ordering) -> T {\n         AcqRel => intrinsics::atomic_min_acqrel(dst, val),\n         Relaxed => intrinsics::atomic_min_relaxed(dst, val),\n         SeqCst => intrinsics::atomic_min(dst, val),\n-        __Nonexhaustive => panic!(\"invalid memory ordering\"),\n     }\n }\n \n@@ -2157,7 +2138,6 @@ unsafe fn atomic_umax<T>(dst: *mut T, val: T, order: Ordering) -> T {\n         AcqRel => intrinsics::atomic_umax_acqrel(dst, val),\n         Relaxed => intrinsics::atomic_umax_relaxed(dst, val),\n         SeqCst => intrinsics::atomic_umax(dst, val),\n-        __Nonexhaustive => panic!(\"invalid memory ordering\"),\n     }\n }\n \n@@ -2170,7 +2150,6 @@ unsafe fn atomic_umin<T>(dst: *mut T, val: T, order: Ordering) -> T {\n         AcqRel => intrinsics::atomic_umin_acqrel(dst, val),\n         Relaxed => intrinsics::atomic_umin_relaxed(dst, val),\n         SeqCst => intrinsics::atomic_umin(dst, val),\n-        __Nonexhaustive => panic!(\"invalid memory ordering\"),\n     }\n }\n \n@@ -2260,7 +2239,6 @@ pub fn fence(order: Ordering) {\n             AcqRel => intrinsics::atomic_fence_acqrel(),\n             SeqCst => intrinsics::atomic_fence(),\n             Relaxed => panic!(\"there is no such thing as a relaxed fence\"),\n-            __Nonexhaustive => panic!(\"invalid memory ordering\"),\n         }\n     }\n }\n@@ -2350,7 +2328,6 @@ pub fn compiler_fence(order: Ordering) {\n             AcqRel => intrinsics::atomic_singlethreadfence_acqrel(),\n             SeqCst => intrinsics::atomic_singlethreadfence(),\n             Relaxed => panic!(\"there is no such thing as a relaxed compiler fence\"),\n-            __Nonexhaustive => panic!(\"invalid memory ordering\"),\n         }\n     }\n }"}]}