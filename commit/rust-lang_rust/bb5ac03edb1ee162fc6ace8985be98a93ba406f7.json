{"sha": "bb5ac03edb1ee162fc6ace8985be98a93ba406f7", "node_id": "C_kwDOAAsO6NoAKGJiNWFjMDNlZGIxZWUxNjJmYzZhY2U4OTg1YmU5OGE5M2JhNDA2Zjc", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2023-03-26T01:43:03Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2023-03-26T01:58:25Z"}, "message": "Refactor: `VariantIdx::from_u32(0)` -> `FIRST_VARIANT`\n\nSince structs are always `VariantIdx(0)`, there's a bunch of files where the only reason they had `VariantIdx` or `vec::Idx` imported at all was to get the first variant.\n\nSo this uses a constant for that, and adds some doc-comments to `VariantIdx` while I'm there, since it doesn't have any today.", "tree": {"sha": "4528a8f650d3e72182cc36fe9811561f205a2fe1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4528a8f650d3e72182cc36fe9811561f205a2fe1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb5ac03edb1ee162fc6ace8985be98a93ba406f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb5ac03edb1ee162fc6ace8985be98a93ba406f7", "html_url": "https://github.com/rust-lang/rust/commit/bb5ac03edb1ee162fc6ace8985be98a93ba406f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb5ac03edb1ee162fc6ace8985be98a93ba406f7/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ac6cc905e082e6f5af7138c6fff829a91cb146b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ac6cc905e082e6f5af7138c6fff829a91cb146b", "html_url": "https://github.com/rust-lang/rust/commit/7ac6cc905e082e6f5af7138c6fff829a91cb146b"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "1825fb8cb228840ebfa3555612881a5aac2f8803", "filename": "src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb5ac03edb1ee162fc6ace8985be98a93ba406f7/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb5ac03edb1ee162fc6ace8985be98a93ba406f7/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=bb5ac03edb1ee162fc6ace8985be98a93ba406f7", "patch": "@@ -785,7 +785,7 @@ fn codegen_stmt<'tcx>(\n                             let variant_dest = lval.downcast_variant(fx, variant_index);\n                             (variant_index, variant_dest, active_field_index)\n                         }\n-                        _ => (VariantIdx::from_u32(0), lval, None),\n+                        _ => (FIRST_VARIANT, lval, None),\n                     };\n                     if active_field_index.is_some() {\n                         assert_eq!(operands.len(), 1);"}, {"sha": "1bd03403f244b3c5b97f4f9e1d584a8a7c7e8ed0", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb5ac03edb1ee162fc6ace8985be98a93ba406f7/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb5ac03edb1ee162fc6ace8985be98a93ba406f7/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=bb5ac03edb1ee162fc6ace8985be98a93ba406f7", "patch": "@@ -86,7 +86,7 @@ mod prelude {\n         self, FloatTy, Instance, InstanceDef, IntTy, ParamEnv, Ty, TyCtxt, TypeAndMut,\n         TypeFoldable, TypeVisitableExt, UintTy,\n     };\n-    pub(crate) use rustc_target::abi::{Abi, Scalar, Size, VariantIdx};\n+    pub(crate) use rustc_target::abi::{Abi, Scalar, Size, VariantIdx, FIRST_VARIANT};\n \n     pub(crate) use rustc_data_structures::fx::FxHashMap;\n "}, {"sha": "93eefd92342d8f44f64f2b52e2b2361d8471c001", "filename": "src/unsize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb5ac03edb1ee162fc6ace8985be98a93ba406f7/src%2Funsize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb5ac03edb1ee162fc6ace8985be98a93ba406f7/src%2Funsize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Funsize.rs?ref=bb5ac03edb1ee162fc6ace8985be98a93ba406f7", "patch": "@@ -146,7 +146,7 @@ pub(crate) fn coerce_unsized_into<'tcx>(\n         (&ty::Adt(def_a, _), &ty::Adt(def_b, _)) => {\n             assert_eq!(def_a, def_b);\n \n-            for i in 0..def_a.variant(VariantIdx::new(0)).fields.len() {\n+            for i in 0..def_a.variant(FIRST_VARIANT).fields.len() {\n                 let src_f = src.value_field(fx, mir::Field::new(i));\n                 let dst_f = dst.place_field(fx, mir::Field::new(i));\n "}]}