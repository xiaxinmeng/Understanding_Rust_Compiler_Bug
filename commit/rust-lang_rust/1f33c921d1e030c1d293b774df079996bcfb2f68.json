{"sha": "1f33c921d1e030c1d293b774df079996bcfb2f68", "node_id": "C_kwDOAAsO6NoAKDFmMzNjOTIxZDFlMDMwYzFkMjkzYjc3NGRmMDc5OTk2YmNmYjJmNjg", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2022-05-17T00:24:53Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2022-05-17T00:24:53Z"}, "message": "Add a comment for covariant `Ref`", "tree": {"sha": "b9f8cf97d741d960e1c63fe28cd9e25818e44061", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9f8cf97d741d960e1c63fe28cd9e25818e44061"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f33c921d1e030c1d293b774df079996bcfb2f68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f33c921d1e030c1d293b774df079996bcfb2f68", "html_url": "https://github.com/rust-lang/rust/commit/1f33c921d1e030c1d293b774df079996bcfb2f68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f33c921d1e030c1d293b774df079996bcfb2f68/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e53fab55a0435be8bf4bf3ff9810ce2c73d5977", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e53fab55a0435be8bf4bf3ff9810ce2c73d5977", "html_url": "https://github.com/rust-lang/rust/commit/1e53fab55a0435be8bf4bf3ff9810ce2c73d5977"}], "stats": {"total": 3, "additions": 2, "deletions": 1}, "files": [{"sha": "5448ced803a09f6ca568aa7b1d314a738dc4725d", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f33c921d1e030c1d293b774df079996bcfb2f68/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f33c921d1e030c1d293b774df079996bcfb2f68/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=1f33c921d1e030c1d293b774df079996bcfb2f68", "patch": "@@ -1318,6 +1318,7 @@ impl Clone for BorrowRef<'_> {\n pub struct Ref<'b, T: ?Sized + 'b> {\n     // NB: we use a pointer instead of `&'b T` to avoid `noalias` violations, because a\n     // `Ref` argument doesn't hold immutability for its whole scope, only until it drops.\n+    // `NonNull` is also covariant over `T`, just like we would have with `&T`.\n     value: NonNull<T>,\n     borrow: BorrowRef<'b>,\n }\n@@ -1704,7 +1705,7 @@ pub struct RefMut<'b, T: ?Sized + 'b> {\n     // `RefMut` argument doesn't hold exclusivity for its whole scope, only until it drops.\n     value: NonNull<T>,\n     borrow: BorrowRefMut<'b>,\n-    // NonNull is covariant over T, so we need to reintroduce invariance.\n+    // `NonNull` is covariant over `T`, so we need to reintroduce invariance.\n     marker: PhantomData<&'b mut T>,\n }\n "}]}