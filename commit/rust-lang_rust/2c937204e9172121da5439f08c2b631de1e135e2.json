{"sha": "2c937204e9172121da5439f08c2b631de1e135e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjOTM3MjA0ZTkxNzIxMjFkYTU0MzlmMDhjMmI2MzFkZTFlMTM1ZTI=", "commit": {"author": {"name": "Carlo Teubner", "email": "carlo.teubner@gmail.com", "date": "2016-05-18T21:42:15Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-05-25T20:02:20Z"}, "message": "parser.rs: fix typos in comments", "tree": {"sha": "147cb2072510dc6cf4880534343b313ae41559f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/147cb2072510dc6cf4880534343b313ae41559f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c937204e9172121da5439f08c2b631de1e135e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c937204e9172121da5439f08c2b631de1e135e2", "html_url": "https://github.com/rust-lang/rust/commit/2c937204e9172121da5439f08c2b631de1e135e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c937204e9172121da5439f08c2b631de1e135e2/comments", "author": {"login": "c4rlo", "id": 435950, "node_id": "MDQ6VXNlcjQzNTk1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/435950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c4rlo", "html_url": "https://github.com/c4rlo", "followers_url": "https://api.github.com/users/c4rlo/followers", "following_url": "https://api.github.com/users/c4rlo/following{/other_user}", "gists_url": "https://api.github.com/users/c4rlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/c4rlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c4rlo/subscriptions", "organizations_url": "https://api.github.com/users/c4rlo/orgs", "repos_url": "https://api.github.com/users/c4rlo/repos", "events_url": "https://api.github.com/users/c4rlo/events{/privacy}", "received_events_url": "https://api.github.com/users/c4rlo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57ef015132ec09345b88d2ec20a9d9809b5d3dfc", "url": "https://api.github.com/repos/rust-lang/rust/commits/57ef015132ec09345b88d2ec20a9d9809b5d3dfc", "html_url": "https://github.com/rust-lang/rust/commit/57ef015132ec09345b88d2ec20a9d9809b5d3dfc"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "3a28632f07a7e55ec7953d250dc4c803debd0e62", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2c937204e9172121da5439f08c2b631de1e135e2/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c937204e9172121da5439f08c2b631de1e135e2/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=2c937204e9172121da5439f08c2b631de1e135e2", "patch": "@@ -2807,14 +2807,14 @@ impl<'a> Parser<'a> {\n                 let span = Span { hi: close_span.hi, ..pre_span };\n \n                 match self.token {\n-                    // Correct delmiter.\n+                    // Correct delimiter.\n                     token::CloseDelim(d) if d == delim => {\n                         self.open_braces.pop().unwrap();\n \n                         // Parse the close delimiter.\n                         self.bump();\n                     }\n-                    // Incorect delimiter.\n+                    // Incorrect delimiter.\n                     token::CloseDelim(other) => {\n                         let token_str = self.this_token_to_string();\n                         let mut err = self.diagnostic().struct_span_err(self.span,\n@@ -2829,9 +2829,9 @@ impl<'a> Parser<'a> {\n \n                         self.open_braces.pop().unwrap();\n \n-                        // If the incorrect delimter matches an earlier opening\n+                        // If the incorrect delimiter matches an earlier opening\n                         // delimiter, then don't consume it (it can be used to\n-                        // close the earlier one)Otherwise, consume it.\n+                        // close the earlier one). Otherwise, consume it.\n                         // E.g., we try to recover from:\n                         // fn foo() {\n                         //     bar(baz(\n@@ -2859,7 +2859,7 @@ impl<'a> Parser<'a> {\n                 // invariants: the current token is not a left-delimiter,\n                 // not an EOF, and not the desired right-delimiter (if\n                 // it were, parse_seq_to_before_end would have prevented\n-                // reaching this point.\n+                // reaching this point).\n                 maybe_whole!(deref self, NtTT);\n                 match self.token {\n                     token::CloseDelim(_) => {"}]}