{"sha": "a82ad2fed4b97daf757c34407bf2cde19a40cce3", "node_id": "C_kwDOAAsO6NoAKGE4MmFkMmZlZDRiOTdkYWY3NTdjMzQ0MDdiZjJjZGUxOWE0MGNjZTM", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-04-26T04:53:14Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-04-26T05:19:51Z"}, "message": "Derive `Type{Foldable,Visitable}` for `UserTypeProjection`.\n\nBecause the derived versions are good enough.", "tree": {"sha": "221e6ffc28ea433f5ba5e76ea59fade0d0a5e7a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/221e6ffc28ea433f5ba5e76ea59fade0d0a5e7a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a82ad2fed4b97daf757c34407bf2cde19a40cce3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a82ad2fed4b97daf757c34407bf2cde19a40cce3", "html_url": "https://github.com/rust-lang/rust/commit/a82ad2fed4b97daf757c34407bf2cde19a40cce3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a82ad2fed4b97daf757c34407bf2cde19a40cce3/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "671de6d62a21de60073d2e4d0f8ccfcd5ea826bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/671de6d62a21de60073d2e4d0f8ccfcd5ea826bd", "html_url": "https://github.com/rust-lang/rust/commit/671de6d62a21de60073d2e4d0f8ccfcd5ea826bd"}], "stats": {"total": 27, "additions": 3, "deletions": 24}, "files": [{"sha": "2490b17aac09b35f8c2602901aa406b7a45896bc", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 3, "deletions": 24, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a82ad2fed4b97daf757c34407bf2cde19a40cce3/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a82ad2fed4b97daf757c34407bf2cde19a40cce3/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=a82ad2fed4b97daf757c34407bf2cde19a40cce3", "patch": "@@ -9,7 +9,7 @@ use crate::mir::visit::MirVisitable;\n use crate::ty::codec::{TyDecoder, TyEncoder};\n use crate::ty::fold::{FallibleTypeFolder, TypeFoldable};\n use crate::ty::print::{FmtPrinter, Printer};\n-use crate::ty::visit::{TypeVisitable, TypeVisitableExt, TypeVisitor};\n+use crate::ty::visit::TypeVisitableExt;\n use crate::ty::{self, List, Ty, TyCtxt};\n use crate::ty::{AdtDef, InstanceDef, ScalarInt, UserTypeAnnotationIndex};\n use crate::ty::{GenericArg, InternalSubsts, SubstsRef};\n@@ -36,7 +36,7 @@ use either::Either;\n \n use std::borrow::Cow;\n use std::fmt::{self, Debug, Display, Formatter, Write};\n-use std::ops::{ControlFlow, Index, IndexMut};\n+use std::ops::{Index, IndexMut};\n use std::{iter, mem};\n \n pub use self::query::*;\n@@ -2722,6 +2722,7 @@ impl<'tcx> UserTypeProjections {\n ///   `field[0]` (aka `.0`), indicating that the type of `s` is\n ///   determined by finding the type of the `.0` field from `T`.\n #[derive(Clone, Debug, TyEncodable, TyDecodable, Hash, HashStable, PartialEq)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub struct UserTypeProjection {\n     pub base: UserTypeAnnotationIndex,\n     pub projs: Vec<ProjectionKind>,\n@@ -2765,28 +2766,6 @@ impl UserTypeProjection {\n     }\n }\n \n-impl<'tcx> TypeFoldable<TyCtxt<'tcx>> for UserTypeProjection {\n-    fn try_fold_with<F: FallibleTypeFolder<TyCtxt<'tcx>>>(\n-        self,\n-        folder: &mut F,\n-    ) -> Result<Self, F::Error> {\n-        Ok(UserTypeProjection {\n-            base: self.base.try_fold_with(folder)?,\n-            projs: self.projs.try_fold_with(folder)?,\n-        })\n-    }\n-}\n-\n-impl<'tcx> TypeVisitable<TyCtxt<'tcx>> for UserTypeProjection {\n-    fn visit_with<Vs: TypeVisitor<TyCtxt<'tcx>>>(\n-        &self,\n-        visitor: &mut Vs,\n-    ) -> ControlFlow<Vs::BreakTy> {\n-        self.base.visit_with(visitor)\n-        // Note: there's nothing in `self.proj` to visit.\n-    }\n-}\n-\n rustc_index::newtype_index! {\n     #[derive(HashStable)]\n     #[debug_format = \"promoted[{}]\"]"}]}