{"sha": "ddbeda130233c27d3a7ef2b1baa730614bc383d4", "node_id": "C_kwDOAAsO6NoAKGRkYmVkYTEzMDIzM2MyN2QzYTdlZjJiMWJhYTczMDYxNGJjMzgzZDQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-04-24T22:10:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-24T22:10:59Z"}, "message": "Rollup merge of #96090 - JakobDegen:mir-tests, r=nagisa\n\nImplement MIR opt unit tests\n\nThis implements rust-lang/compiler-team#502 .\n\nThere's not much to say here, this implementation does everything as proposed. I also added the flag to a bunch of existing tests (mostly those to which I could add it without causing huge diffs due to changes in line numbers). Summarizing the changes to test outputs:\n - Every time an `MirPatch` is created, it adds a cleanup block to the body if it did not exist already. If this block is unused (as is usually the case), it usually gets removed soon after by some pass calling `SimplifyCFG` for unrelated reasons (in many cases this cycle happens quite a few times for a single body). We now run `SimplifyCFG` less often, so those blocks end up in some of our outputs. I looked at changing `MirPatch` to not do this, but that seemed too complicated for this PR. I may still do that in a follow-up.\n - The `InstCombine` test had set `-C opt-level=0` in its flags and so there were no storage markers. I don't really see a good motivation for doing this, so bringing it back in line with what everything else does seems correct.\n - One of the `EarlyOtherwiseBranch` tests had `UnreachableProp` running on it. Preventing that kind of thing is the goal of this feature, so this seems fine.\n\nFor the remaining tests for which this feature might be useful, we can gradually migrate them as opportunities present themselves.\n\nIn terms of documentation, I plan on submitting a PR to the rustc dev guide in the near future documenting this and other recent changes to MIR. If there's any other places to update, do let me know\n\nr? `@nagisa`", "tree": {"sha": "ce178374f7464f710a9c8281a9b159d4cd62a88f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce178374f7464f710a9c8281a9b159d4cd62a88f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ddbeda130233c27d3a7ef2b1baa730614bc383d4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiZcrzCRBK7hj4Ov3rIwAAWvwIAClsHSEu5VQE6SjmgfT7ISDQ\nKByuVqODRFoqaI+NH0LvA2UYt25DRmB1thJNn+IuKLvnCyJmVdur1NV+gqDAyFNr\nclM5XjygBQS3t/zFgJwMIh/ai7drPtDDNlY60TWPyxfgqwnNwCs3JI1XT32kkA5w\nUVpRNxAYP/D1LEnCZEZHIecbnaqubpfGMfVg4w/pYc3O9Ng+0vloT8BEeB8rua6e\nhVfWJe1F53LK1hIty5GnsCmA4k+Eh/jos3vxr5b9tdrISDx0uIiiJ1zxKuNl9GLr\nwq+l5vMBuiDTMRX/Mqxjw4cde3rlbsI1osq2bx5MBAkIEsHU1hn0Gu6rr7N2GIk=\n=1v9r\n-----END PGP SIGNATURE-----\n", "payload": "tree ce178374f7464f710a9c8281a9b159d4cd62a88f\nparent 76aa9e5202070731aca982ab5d6922f211afd691\nparent 4534188d4ba3d4b7475c5f9e8b275ebec2b810e8\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1650838259 +0200\ncommitter GitHub <noreply@github.com> 1650838259 +0200\n\nRollup merge of #96090 - JakobDegen:mir-tests, r=nagisa\n\nImplement MIR opt unit tests\n\nThis implements rust-lang/compiler-team#502 .\n\nThere's not much to say here, this implementation does everything as proposed. I also added the flag to a bunch of existing tests (mostly those to which I could add it without causing huge diffs due to changes in line numbers). Summarizing the changes to test outputs:\n - Every time an `MirPatch` is created, it adds a cleanup block to the body if it did not exist already. If this block is unused (as is usually the case), it usually gets removed soon after by some pass calling `SimplifyCFG` for unrelated reasons (in many cases this cycle happens quite a few times for a single body). We now run `SimplifyCFG` less often, so those blocks end up in some of our outputs. I looked at changing `MirPatch` to not do this, but that seemed too complicated for this PR. I may still do that in a follow-up.\n - The `InstCombine` test had set `-C opt-level=0` in its flags and so there were no storage markers. I don't really see a good motivation for doing this, so bringing it back in line with what everything else does seems correct.\n - One of the `EarlyOtherwiseBranch` tests had `UnreachableProp` running on it. Preventing that kind of thing is the goal of this feature, so this seems fine.\n\nFor the remaining tests for which this feature might be useful, we can gradually migrate them as opportunities present themselves.\n\nIn terms of documentation, I plan on submitting a PR to the rustc dev guide in the near future documenting this and other recent changes to MIR. If there's any other places to update, do let me know\n\nr? `@nagisa`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ddbeda130233c27d3a7ef2b1baa730614bc383d4", "html_url": "https://github.com/rust-lang/rust/commit/ddbeda130233c27d3a7ef2b1baa730614bc383d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ddbeda130233c27d3a7ef2b1baa730614bc383d4/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76aa9e5202070731aca982ab5d6922f211afd691", "url": "https://api.github.com/repos/rust-lang/rust/commits/76aa9e5202070731aca982ab5d6922f211afd691", "html_url": "https://github.com/rust-lang/rust/commit/76aa9e5202070731aca982ab5d6922f211afd691"}, {"sha": "4534188d4ba3d4b7475c5f9e8b275ebec2b810e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/4534188d4ba3d4b7475c5f9e8b275ebec2b810e8", "html_url": "https://github.com/rust-lang/rust/commit/4534188d4ba3d4b7475c5f9e8b275ebec2b810e8"}], "stats": {"total": 210, "additions": 172, "deletions": 38}, "files": [{"sha": "1327bf6fcd427a9523213875f9ae02fec1fce78d", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ddbeda130233c27d3a7ef2b1baa730614bc383d4/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbeda130233c27d3a7ef2b1baa730614bc383d4/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=ddbeda130233c27d3a7ef2b1baa730614bc383d4", "patch": "@@ -752,6 +752,7 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(location_detail, LocationDetail { file: true, line: false, column: false });\n     tracked!(merge_functions, Some(MergeFunctions::Disabled));\n     tracked!(mir_emit_retag, true);\n+    tracked!(mir_enable_passes, vec![(\"DestProp\".to_string(), false)]);\n     tracked!(mir_opt_level, Some(4));\n     tracked!(move_size_limit, Some(4096));\n     tracked!(mutable_noalias, Some(true));"}, {"sha": "2380391d09a914042e3b83e77c740543c1077175", "filename": "compiler/rustc_mir_transform/src/pass_manager.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ddbeda130233c27d3a7ef2b1baa730614bc383d4/compiler%2Frustc_mir_transform%2Fsrc%2Fpass_manager.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbeda130233c27d3a7ef2b1baa730614bc383d4/compiler%2Frustc_mir_transform%2Fsrc%2Fpass_manager.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fpass_manager.rs?ref=ddbeda130233c27d3a7ef2b1baa730614bc383d4", "patch": "@@ -77,17 +77,30 @@ pub fn run_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>, passes: &[&dyn\n     let mut cnt = 0;\n \n     let validate = tcx.sess.opts.debugging_opts.validate_mir;\n+    let overridden_passes = &tcx.sess.opts.debugging_opts.mir_enable_passes;\n+    trace!(?overridden_passes);\n \n     if validate {\n         validate_body(tcx, body, format!(\"start of phase transition from {:?}\", start_phase));\n     }\n \n     for pass in passes {\n-        if !pass.is_enabled(&tcx.sess) {\n-            continue;\n-        }\n-\n         let name = pass.name();\n+\n+        if let Some((_, polarity)) = overridden_passes.iter().rev().find(|(s, _)| s == &*name) {\n+            trace!(\n+                pass = %name,\n+                \"{} as requested by flag\",\n+                if *polarity { \"Running\" } else { \"Not running\" },\n+            );\n+            if !polarity {\n+                continue;\n+            }\n+        } else {\n+            if !pass.is_enabled(&tcx.sess) {\n+                continue;\n+            }\n+        }\n         let dump_enabled = pass.is_mir_dump_enabled();\n \n         if dump_enabled {"}, {"sha": "96f50e57ac4d0efe779ec63c14fc44a3a1c1c2f0", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ddbeda130233c27d3a7ef2b1baa730614bc383d4/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbeda130233c27d3a7ef2b1baa730614bc383d4/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=ddbeda130233c27d3a7ef2b1baa730614bc383d4", "patch": "@@ -368,6 +368,8 @@ mod desc {\n     pub const parse_opt_langid: &str = \"a language identifier\";\n     pub const parse_opt_pathbuf: &str = \"a path\";\n     pub const parse_list: &str = \"a space-separated list of strings\";\n+    pub const parse_list_with_polarity: &str =\n+        \"a comma-separated list of strings, with elements beginning with + or -\";\n     pub const parse_opt_comma_list: &str = \"a comma-separated list of strings\";\n     pub const parse_number: &str = \"a number\";\n     pub const parse_opt_number: &str = parse_number;\n@@ -529,6 +531,19 @@ mod parse {\n         }\n     }\n \n+    crate fn parse_list_with_polarity(slot: &mut Vec<(String, bool)>, v: Option<&str>) -> bool {\n+        match v {\n+            Some(s) => {\n+                for s in s.split(\",\") {\n+                    let Some(pass_name) = s.strip_prefix(&['+', '-'][..]) else { return false };\n+                    slot.push((pass_name.to_string(), &s[..1] == \"+\"));\n+                }\n+                true\n+            }\n+            None => false,\n+        }\n+    }\n+\n     crate fn parse_location_detail(ld: &mut LocationDetail, v: Option<&str>) -> bool {\n         if let Some(v) = v {\n             ld.line = false;\n@@ -1318,6 +1333,10 @@ options! {\n     mir_emit_retag: bool = (false, parse_bool, [TRACKED],\n         \"emit Retagging MIR statements, interpreted e.g., by miri; implies -Zmir-opt-level=0 \\\n         (default: no)\"),\n+    mir_enable_passes: Vec<(String, bool)> = (Vec::new(), parse_list_with_polarity, [TRACKED],\n+        \"use like `-Zmir-enable-passes=+DestProp,-InstCombine`. Forces the specified passes to be \\\n+        enabled, overriding all other checks. Passes that are not specified are enabled or \\\n+        disabled by other flags as usual.\"),\n     mir_opt_level: Option<usize> = (None, parse_opt_number, [TRACKED],\n         \"MIR optimization level (0-4; default: 1 in non optimized builds and 2 in optimized builds)\"),\n     move_size_limit: Option<usize> = (None, parse_opt_number, [TRACKED],"}, {"sha": "7cc50a86e21e1d5ab813f4de454f456ca9403b93", "filename": "src/test/mir-opt/combine_clone_of_primitives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddbeda130233c27d3a7ef2b1baa730614bc383d4/src%2Ftest%2Fmir-opt%2Fcombine_clone_of_primitives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbeda130233c27d3a7ef2b1baa730614bc383d4/src%2Ftest%2Fmir-opt%2Fcombine_clone_of_primitives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcombine_clone_of_primitives.rs?ref=ddbeda130233c27d3a7ef2b1baa730614bc383d4", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -C opt-level=0 -Z inline_mir=no\n+// unit-test: InstCombine\n // ignore-wasm32 compiled with panic=abort by default\n \n // EMIT_MIR combine_clone_of_primitives.{impl#0}-clone.InstCombine.diff"}, {"sha": "fdc016a95d58e68738edefe4e7dc7f82455d8b88", "filename": "src/test/mir-opt/combine_clone_of_primitives.{impl#0}-clone.InstCombine.diff", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ddbeda130233c27d3a7ef2b1baa730614bc383d4/src%2Ftest%2Fmir-opt%2Fcombine_clone_of_primitives.%7Bimpl%230%7D-clone.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ddbeda130233c27d3a7ef2b1baa730614bc383d4/src%2Ftest%2Fmir-opt%2Fcombine_clone_of_primitives.%7Bimpl%230%7D-clone.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcombine_clone_of_primitives.%7Bimpl%230%7D-clone.InstCombine.diff?ref=ddbeda130233c27d3a7ef2b1baa730614bc383d4", "patch": "@@ -23,9 +23,15 @@\n       }\n   \n       bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n           _2 = &((*_1).0: T);              // scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n+          StorageLive(_3);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n           _3 = &((*_1).1: u64);            // scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n+          StorageLive(_4);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n           _4 = &((*_1).2: [f32; 3]);       // scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n+          StorageLive(_5);                 // scope 1 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n+          StorageLive(_6);                 // scope 1 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n+          StorageLive(_7);                 // scope 1 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n -         _7 = &(*_2);                     // scope 1 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n -         _6 = &(*_7);                     // scope 1 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n +         _7 = _2;                         // scope 1 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n@@ -37,6 +43,10 @@\n       }\n   \n       bb1: {\n+          StorageDead(_6);                 // scope 1 at $DIR/combine_clone_of_primitives.rs:8:8: 8:9\n+          StorageLive(_8);                 // scope 1 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n+          StorageLive(_9);                 // scope 1 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n+          StorageLive(_10);                // scope 1 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n -         _10 = &(*_3);                    // scope 1 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n -         _9 = &(*_10);                    // scope 1 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n -         _8 = <u64 as Clone>::clone(move _9) -> [return: bb2, unwind: bb4]; // scope 1 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n@@ -50,6 +60,10 @@\n       }\n   \n       bb2: {\n+          StorageDead(_9);                 // scope 1 at $DIR/combine_clone_of_primitives.rs:9:10: 9:11\n+          StorageLive(_11);                // scope 1 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n+          StorageLive(_12);                // scope 1 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n+          StorageLive(_13);                // scope 1 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n -         _13 = &(*_4);                    // scope 1 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n -         _12 = &(*_13);                   // scope 1 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n -         _11 = <[f32; 3] as Clone>::clone(move _12) -> [return: bb3, unwind: bb4]; // scope 1 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n@@ -63,10 +77,20 @@\n       }\n   \n       bb3: {\n+          StorageDead(_12);                // scope 1 at $DIR/combine_clone_of_primitives.rs:10:15: 10:16\n           Deinit(_0);                      // scope 1 at $DIR/combine_clone_of_primitives.rs:6:10: 6:15\n           (_0.0: T) = move _5;             // scope 1 at $DIR/combine_clone_of_primitives.rs:6:10: 6:15\n           (_0.1: u64) = move _8;           // scope 1 at $DIR/combine_clone_of_primitives.rs:6:10: 6:15\n           (_0.2: [f32; 3]) = move _11;     // scope 1 at $DIR/combine_clone_of_primitives.rs:6:10: 6:15\n+          StorageDead(_13);                // scope 1 at $DIR/combine_clone_of_primitives.rs:6:14: 6:15\n+          StorageDead(_11);                // scope 1 at $DIR/combine_clone_of_primitives.rs:6:14: 6:15\n+          StorageDead(_10);                // scope 1 at $DIR/combine_clone_of_primitives.rs:6:14: 6:15\n+          StorageDead(_8);                 // scope 1 at $DIR/combine_clone_of_primitives.rs:6:14: 6:15\n+          StorageDead(_7);                 // scope 1 at $DIR/combine_clone_of_primitives.rs:6:14: 6:15\n+          StorageDead(_5);                 // scope 1 at $DIR/combine_clone_of_primitives.rs:6:14: 6:15\n+          StorageDead(_4);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:6:14: 6:15\n+          StorageDead(_3);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:6:14: 6:15\n+          StorageDead(_2);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:6:14: 6:15\n           return;                          // scope 0 at $DIR/combine_clone_of_primitives.rs:6:15: 6:15\n       }\n   "}, {"sha": "038a1afc58bb6e44becf9780f93ee84489a895d3", "filename": "src/test/mir-opt/early_otherwise_branch.opt1.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ddbeda130233c27d3a7ef2b1baa730614bc383d4/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt1.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ddbeda130233c27d3a7ef2b1baa730614bc383d4/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt1.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt1.EarlyOtherwiseBranch.diff?ref=ddbeda130233c27d3a7ef2b1baa730614bc383d4", "patch": "@@ -68,8 +68,10 @@\n +     bb3: {\n           StorageDead(_3);                 // scope 0 at $DIR/early_otherwise_branch.rs:8:1: 8:2\n           return;                          // scope 0 at $DIR/early_otherwise_branch.rs:8:2: 8:2\n-+     }\n-+ \n+      }\n+  \n+-     bb5 (cleanup): {\n+-         resume;                          // scope 0 at $DIR/early_otherwise_branch.rs:3:1: 8:2\n +     bb4: {\n +         StorageDead(_11);                // scope 0 at $DIR/early_otherwise_branch.rs:4:5: 4:17\n +         switchInt(_7) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch.rs:4:5: 4:17"}, {"sha": "75549c1b3ddf276e0e5749c38637a160623f2761", "filename": "src/test/mir-opt/early_otherwise_branch.opt2.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ddbeda130233c27d3a7ef2b1baa730614bc383d4/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt2.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ddbeda130233c27d3a7ef2b1baa730614bc383d4/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt2.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt2.EarlyOtherwiseBranch.diff?ref=ddbeda130233c27d3a7ef2b1baa730614bc383d4", "patch": "@@ -32,7 +32,7 @@\n           StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch.rs:12:16: 12:17\n           StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch.rs:12:16: 12:17\n           _8 = discriminant((_3.0: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch.rs:12:11: 12:17\n--         switchInt(move _8) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb7]; // scope 0 at $DIR/early_otherwise_branch.rs:12:5: 12:17\n+-         switchInt(move _8) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch.rs:12:5: 12:17\n +         StorageLive(_11);                // scope 0 at $DIR/early_otherwise_branch.rs:12:5: 12:17\n +         _11 = discriminant((_3.1: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch.rs:12:5: 12:17\n +         StorageLive(_12);                // scope 0 at $DIR/early_otherwise_branch.rs:12:5: 12:17\n@@ -84,8 +84,8 @@\n           return;                          // scope 0 at $DIR/early_otherwise_branch.rs:17:2: 17:2\n       }\n   \n--     bb7: {\n--         unreachable;                     // scope 0 at $DIR/early_otherwise_branch.rs:15:14: 15:15\n+-     bb7 (cleanup): {\n+-         resume;                          // scope 0 at $DIR/early_otherwise_branch.rs:11:1: 17:2\n +     bb5: {\n +         StorageDead(_12);                // scope 0 at $DIR/early_otherwise_branch.rs:12:5: 12:17\n +         switchInt(_8) -> [0_isize: bb3, 1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch.rs:12:5: 12:17"}, {"sha": "30726d8621e1f98f63a6758829dcace56c9bd42b", "filename": "src/test/mir-opt/early_otherwise_branch.opt3.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ddbeda130233c27d3a7ef2b1baa730614bc383d4/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt3.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ddbeda130233c27d3a7ef2b1baa730614bc383d4/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt3.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt3.EarlyOtherwiseBranch.diff?ref=ddbeda130233c27d3a7ef2b1baa730614bc383d4", "patch": "@@ -68,8 +68,10 @@\n +     bb3: {\n           StorageDead(_3);                 // scope 0 at $DIR/early_otherwise_branch.rs:26:1: 26:2\n           return;                          // scope 0 at $DIR/early_otherwise_branch.rs:26:2: 26:2\n-+     }\n-+ \n+      }\n+  \n+-     bb5 (cleanup): {\n+-         resume;                          // scope 0 at $DIR/early_otherwise_branch.rs:21:1: 26:2\n +     bb4: {\n +         StorageDead(_11);                // scope 0 at $DIR/early_otherwise_branch.rs:22:5: 22:17\n +         switchInt(_7) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch.rs:22:5: 22:17"}, {"sha": "7be9fbd0326f65fbbca5d0e26afa540d4e51ca58", "filename": "src/test/mir-opt/early_otherwise_branch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddbeda130233c27d3a7ef2b1baa730614bc383d4/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbeda130233c27d3a7ef2b1baa730614bc383d4/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.rs?ref=ddbeda130233c27d3a7ef2b1baa730614bc383d4", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Z mir-opt-level=4 -Z unsound-mir-opts\n+// unit-test: EarlyOtherwiseBranch\n // EMIT_MIR early_otherwise_branch.opt1.EarlyOtherwiseBranch.diff\n fn opt1(x: Option<u32>, y: Option<u32>) -> u32 {\n     match (x, y) {"}, {"sha": "ddf26ad8ab323c5ef55aa6c48e61bf4165717ad5", "filename": "src/test/mir-opt/early_otherwise_branch_3_element_tuple.opt1.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ddbeda130233c27d3a7ef2b1baa730614bc383d4/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_3_element_tuple.opt1.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ddbeda130233c27d3a7ef2b1baa730614bc383d4/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_3_element_tuple.opt1.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_3_element_tuple.opt1.EarlyOtherwiseBranch.diff?ref=ddbeda130233c27d3a7ef2b1baa730614bc383d4", "patch": "@@ -90,8 +90,10 @@\n +     bb4: {\n           StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:9:1: 9:2\n           return;                          // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:9:2: 9:2\n-+     }\n-+ \n+      }\n+  \n+-     bb6 (cleanup): {\n+-         resume;                          // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:4:1: 9:2\n +     bb5: {\n +         StorageDead(_15);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:5: 5:20\n +         switchInt(_10) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:5: 5:20"}, {"sha": "76055e1330fa7c88beec278069d74d0b5e99f3ad", "filename": "src/test/mir-opt/early_otherwise_branch_3_element_tuple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddbeda130233c27d3a7ef2b1baa730614bc383d4/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_3_element_tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbeda130233c27d3a7ef2b1baa730614bc383d4/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_3_element_tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_3_element_tuple.rs?ref=ddbeda130233c27d3a7ef2b1baa730614bc383d4", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Z mir-opt-level=4 -Z unsound-mir-opts\n+// unit-test: EarlyOtherwiseBranch\n \n // EMIT_MIR early_otherwise_branch_3_element_tuple.opt1.EarlyOtherwiseBranch.diff\n fn opt1(x: Option<u32>, y: Option<u32>, z: Option<u32>) -> u32 {"}, {"sha": "4d2db490836d834ab49144e9fe12a3a87e80a6c1", "filename": "src/test/mir-opt/early_otherwise_branch_noopt.noopt1.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ddbeda130233c27d3a7ef2b1baa730614bc383d4/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_noopt.noopt1.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ddbeda130233c27d3a7ef2b1baa730614bc383d4/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_noopt.noopt1.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_noopt.noopt1.EarlyOtherwiseBranch.diff?ref=ddbeda130233c27d3a7ef2b1baa730614bc383d4", "patch": "@@ -38,54 +38,62 @@\n           StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:16: 8:17\n           StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:16: 8:17\n           _8 = discriminant((_3.0: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:11: 8:17\n-          switchInt(move _8) -> [0_isize: bb1, otherwise: bb3]; // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:5: 8:17\n+          switchInt(move _8) -> [0_isize: bb1, 1_isize: bb4, otherwise: bb3]; // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:5: 8:17\n       }\n   \n       bb1: {\n           _6 = discriminant((_3.1: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:11: 8:17\n-          switchInt(move _6) -> [0_isize: bb2, otherwise: bb6]; // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:5: 8:17\n+          switchInt(move _6) -> [0_isize: bb2, 1_isize: bb7, otherwise: bb3]; // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:5: 8:17\n       }\n   \n       bb2: {\n           _0 = const 3_u32;                // scope 0 at $DIR/early_otherwise_branch_noopt.rs:12:25: 12:26\n-          goto -> bb7;                     // scope 0 at $DIR/early_otherwise_branch_noopt.rs:12:25: 12:26\n+          goto -> bb8;                     // scope 0 at $DIR/early_otherwise_branch_noopt.rs:12:25: 12:26\n       }\n   \n       bb3: {\n-          _7 = discriminant((_3.1: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:11: 8:17\n-          switchInt(move _7) -> [0_isize: bb5, otherwise: bb4]; // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:5: 8:17\n+          unreachable;                     // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:11: 8:17\n       }\n   \n       bb4: {\n+          _7 = discriminant((_3.1: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:11: 8:17\n+          switchInt(move _7) -> [0_isize: bb6, 1_isize: bb5, otherwise: bb3]; // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:5: 8:17\n+      }\n+  \n+      bb5: {\n           StorageLive(_9);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:9:15: 9:16\n           _9 = (((_3.0: std::option::Option<u32>) as Some).0: u32); // scope 0 at $DIR/early_otherwise_branch_noopt.rs:9:15: 9:16\n           StorageLive(_10);                // scope 0 at $DIR/early_otherwise_branch_noopt.rs:9:24: 9:25\n           _10 = (((_3.1: std::option::Option<u32>) as Some).0: u32); // scope 0 at $DIR/early_otherwise_branch_noopt.rs:9:24: 9:25\n           _0 = const 0_u32;                // scope 1 at $DIR/early_otherwise_branch_noopt.rs:9:31: 9:32\n           StorageDead(_10);                // scope 0 at $DIR/early_otherwise_branch_noopt.rs:9:31: 9:32\n           StorageDead(_9);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:9:31: 9:32\n-          goto -> bb7;                     // scope 0 at $DIR/early_otherwise_branch_noopt.rs:9:31: 9:32\n+          goto -> bb8;                     // scope 0 at $DIR/early_otherwise_branch_noopt.rs:9:31: 9:32\n       }\n   \n-      bb5: {\n+      bb6: {\n           StorageLive(_11);                // scope 0 at $DIR/early_otherwise_branch_noopt.rs:10:15: 10:16\n           _11 = (((_3.0: std::option::Option<u32>) as Some).0: u32); // scope 0 at $DIR/early_otherwise_branch_noopt.rs:10:15: 10:16\n           _0 = const 1_u32;                // scope 2 at $DIR/early_otherwise_branch_noopt.rs:10:28: 10:29\n           StorageDead(_11);                // scope 0 at $DIR/early_otherwise_branch_noopt.rs:10:28: 10:29\n-          goto -> bb7;                     // scope 0 at $DIR/early_otherwise_branch_noopt.rs:10:28: 10:29\n+          goto -> bb8;                     // scope 0 at $DIR/early_otherwise_branch_noopt.rs:10:28: 10:29\n       }\n   \n-      bb6: {\n+      bb7: {\n           StorageLive(_12);                // scope 0 at $DIR/early_otherwise_branch_noopt.rs:11:21: 11:22\n           _12 = (((_3.1: std::option::Option<u32>) as Some).0: u32); // scope 0 at $DIR/early_otherwise_branch_noopt.rs:11:21: 11:22\n           _0 = const 2_u32;                // scope 3 at $DIR/early_otherwise_branch_noopt.rs:11:28: 11:29\n           StorageDead(_12);                // scope 0 at $DIR/early_otherwise_branch_noopt.rs:11:28: 11:29\n-          goto -> bb7;                     // scope 0 at $DIR/early_otherwise_branch_noopt.rs:11:28: 11:29\n+          goto -> bb8;                     // scope 0 at $DIR/early_otherwise_branch_noopt.rs:11:28: 11:29\n       }\n   \n-      bb7: {\n+      bb8: {\n           StorageDead(_3);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:14:1: 14:2\n           return;                          // scope 0 at $DIR/early_otherwise_branch_noopt.rs:14:2: 14:2\n       }\n+  \n+      bb9 (cleanup): {\n+          resume;                          // scope 0 at $DIR/early_otherwise_branch_noopt.rs:7:1: 14:2\n+      }\n   }\n   "}, {"sha": "ef766bbd4a651b6ff664af1f1f6a915c1774a350", "filename": "src/test/mir-opt/early_otherwise_branch_noopt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddbeda130233c27d3a7ef2b1baa730614bc383d4/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_noopt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbeda130233c27d3a7ef2b1baa730614bc383d4/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_noopt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_noopt.rs?ref=ddbeda130233c27d3a7ef2b1baa730614bc383d4", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Z mir-opt-level=4 -Zunsound-mir-opts\n+// unit-test: EarlyOtherwiseBranch\n \n // must not optimize as it does not follow the pattern of\n // left and right hand side being the same variant"}, {"sha": "92a719d997d6bea4738cf21a3adb84964124a0b0", "filename": "src/test/mir-opt/early_otherwise_branch_soundness.no_deref_ptr.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ddbeda130233c27d3a7ef2b1baa730614bc383d4/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_soundness.no_deref_ptr.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ddbeda130233c27d3a7ef2b1baa730614bc383d4/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_soundness.no_deref_ptr.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_soundness.no_deref_ptr.EarlyOtherwiseBranch.diff?ref=ddbeda130233c27d3a7ef2b1baa730614bc383d4", "patch": "@@ -19,7 +19,7 @@\n   \n       bb1: {\n           _0 = const 0_i32;                // scope 0 at $DIR/early_otherwise_branch_soundness.rs:25:14: 25:15\n-          return;                          // scope 0 at $DIR/early_otherwise_branch_soundness.rs:25:14: 25:15\n+          goto -> bb5;                     // scope 0 at $DIR/early_otherwise_branch_soundness.rs:25:14: 25:15\n       }\n   \n       bb2: {\n@@ -29,15 +29,23 @@\n   \n       bb3: {\n           _0 = const 0_i32;                // scope 0 at $DIR/early_otherwise_branch_soundness.rs:23:18: 23:19\n-          return;                          // scope 0 at $DIR/early_otherwise_branch_soundness.rs:23:18: 23:19\n+          goto -> bb5;                     // scope 0 at $DIR/early_otherwise_branch_soundness.rs:23:18: 23:19\n       }\n   \n       bb4: {\n           StorageLive(_5);                 // scope 0 at $DIR/early_otherwise_branch_soundness.rs:22:18: 22:19\n           _5 = (((*_2) as Some).0: i32);   // scope 0 at $DIR/early_otherwise_branch_soundness.rs:22:18: 22:19\n           _0 = _5;                         // scope 1 at $DIR/early_otherwise_branch_soundness.rs:22:24: 22:25\n           StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch_soundness.rs:22:24: 22:25\n-          return;                          // scope 0 at $DIR/early_otherwise_branch_soundness.rs:22:24: 22:25\n+          goto -> bb5;                     // scope 0 at $DIR/early_otherwise_branch_soundness.rs:22:24: 22:25\n+      }\n+  \n+      bb5: {\n+          return;                          // scope 0 at $DIR/early_otherwise_branch_soundness.rs:27:2: 27:2\n+      }\n+  \n+      bb6 (cleanup): {\n+          resume;                          // scope 0 at $DIR/early_otherwise_branch_soundness.rs:18:1: 27:2\n       }\n   }\n   "}, {"sha": "c43b32c7fc6e3d4b0503cc0f850c754187f2aa2d", "filename": "src/test/mir-opt/early_otherwise_branch_soundness.no_downcast.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ddbeda130233c27d3a7ef2b1baa730614bc383d4/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_soundness.no_downcast.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ddbeda130233c27d3a7ef2b1baa730614bc383d4/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_soundness.no_downcast.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_soundness.no_downcast.EarlyOtherwiseBranch.diff?ref=ddbeda130233c27d3a7ef2b1baa730614bc383d4", "patch": "@@ -19,12 +19,20 @@\n   \n       bb2: {\n           _0 = const 1_u32;                // scope 0 at $DIR/early_otherwise_branch_soundness.rs:13:38: 13:39\n-          return;                          // scope 0 at $DIR/early_otherwise_branch_soundness.rs:13:5: 13:52\n+          goto -> bb4;                     // scope 0 at $DIR/early_otherwise_branch_soundness.rs:13:5: 13:52\n       }\n   \n       bb3: {\n           _0 = const 2_u32;                // scope 0 at $DIR/early_otherwise_branch_soundness.rs:13:49: 13:50\n-          return;                          // scope 0 at $DIR/early_otherwise_branch_soundness.rs:13:5: 13:52\n+          goto -> bb4;                     // scope 0 at $DIR/early_otherwise_branch_soundness.rs:13:5: 13:52\n+      }\n+  \n+      bb4: {\n+          return;                          // scope 0 at $DIR/early_otherwise_branch_soundness.rs:14:2: 14:2\n+      }\n+  \n+      bb5 (cleanup): {\n+          resume;                          // scope 0 at $DIR/early_otherwise_branch_soundness.rs:12:1: 14:2\n       }\n   }\n   "}, {"sha": "cd458923245348dcfd013b31b74c96487146c6f4", "filename": "src/test/mir-opt/early_otherwise_branch_soundness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddbeda130233c27d3a7ef2b1baa730614bc383d4/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_soundness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbeda130233c27d3a7ef2b1baa730614bc383d4/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_soundness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_soundness.rs?ref=ddbeda130233c27d3a7ef2b1baa730614bc383d4", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Z mir-opt-level=4 -Zunsound-mir-opts\n+// unit-test: EarlyOtherwiseBranch\n \n // Tests various cases that the `early_otherwise_branch` opt should *not* optimize\n "}, {"sha": "398311e6bb8e2b9249f495287ea1ee858b7aed39", "filename": "src/test/mir-opt/if-condition-int.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddbeda130233c27d3a7ef2b1baa730614bc383d4/src%2Ftest%2Fmir-opt%2Fif-condition-int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbeda130233c27d3a7ef2b1baa730614bc383d4/src%2Ftest%2Fmir-opt%2Fif-condition-int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif-condition-int.rs?ref=ddbeda130233c27d3a7ef2b1baa730614bc383d4", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -O\n+// unit-test: SimplifyComparisonIntegral\n // EMIT_MIR if_condition_int.opt_u32.SimplifyComparisonIntegral.diff\n // EMIT_MIR if_condition_int.opt_negative.SimplifyComparisonIntegral.diff\n // EMIT_MIR if_condition_int.opt_char.SimplifyComparisonIntegral.diff"}, {"sha": "319a47367b3ab6bbc117a63f7fa3214bbbd14711", "filename": "src/test/mir-opt/if_condition_int.dont_opt_bool.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ddbeda130233c27d3a7ef2b1baa730614bc383d4/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_opt_bool.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ddbeda130233c27d3a7ef2b1baa730614bc383d4/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_opt_bool.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_opt_bool.SimplifyComparisonIntegral.diff?ref=ddbeda130233c27d3a7ef2b1baa730614bc383d4", "patch": "@@ -26,5 +26,9 @@\n           StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:17:25: 17:26\n           return;                          // scope 0 at $DIR/if-condition-int.rs:18:2: 18:2\n       }\n+  \n+      bb4 (cleanup): {\n+          resume;                          // scope 0 at $DIR/if-condition-int.rs:16:1: 18:2\n+      }\n   }\n   "}, {"sha": "98a6c83cbffae6da358335b4fc1915f87c0acc68", "filename": "src/test/mir-opt/if_condition_int.dont_opt_floats.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ddbeda130233c27d3a7ef2b1baa730614bc383d4/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_opt_floats.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ddbeda130233c27d3a7ef2b1baa730614bc383d4/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_opt_floats.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_opt_floats.SimplifyComparisonIntegral.diff?ref=ddbeda130233c27d3a7ef2b1baa730614bc383d4", "patch": "@@ -30,5 +30,9 @@\n           StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:53:34: 53:35\n           return;                          // scope 0 at $DIR/if-condition-int.rs:54:2: 54:2\n       }\n+  \n+      bb4 (cleanup): {\n+          resume;                          // scope 0 at $DIR/if-condition-int.rs:52:1: 54:2\n+      }\n   }\n   "}, {"sha": "4019021ede8d57bb6a54e43cd6c47e2162628de9", "filename": "src/test/mir-opt/if_condition_int.dont_remove_comparison.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ddbeda130233c27d3a7ef2b1baa730614bc383d4/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_remove_comparison.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ddbeda130233c27d3a7ef2b1baa730614bc383d4/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_remove_comparison.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_remove_comparison.SimplifyComparisonIntegral.diff?ref=ddbeda130233c27d3a7ef2b1baa730614bc383d4", "patch": "@@ -54,5 +54,9 @@\n           StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:49:1: 49:2\n           return;                          // scope 0 at $DIR/if-condition-int.rs:49:2: 49:2\n       }\n+  \n+      bb4 (cleanup): {\n+          resume;                          // scope 0 at $DIR/if-condition-int.rs:43:1: 49:2\n+      }\n   }\n   "}, {"sha": "d4f100e289f06d860a1f577feaea5de964729ed6", "filename": "src/test/mir-opt/if_condition_int.opt_char.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ddbeda130233c27d3a7ef2b1baa730614bc383d4/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_char.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ddbeda130233c27d3a7ef2b1baa730614bc383d4/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_char.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_char.SimplifyComparisonIntegral.diff?ref=ddbeda130233c27d3a7ef2b1baa730614bc383d4", "patch": "@@ -35,5 +35,9 @@\n           StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:21:32: 21:33\n           return;                          // scope 0 at $DIR/if-condition-int.rs:22:2: 22:2\n       }\n+  \n+      bb4 (cleanup): {\n+          resume;                          // scope 0 at $DIR/if-condition-int.rs:20:1: 22:2\n+      }\n   }\n   "}, {"sha": "06d2c666aeca69d17b4d6f51b5b9fac53840d681", "filename": "src/test/mir-opt/if_condition_int.opt_i8.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ddbeda130233c27d3a7ef2b1baa730614bc383d4/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_i8.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ddbeda130233c27d3a7ef2b1baa730614bc383d4/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_i8.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_i8.SimplifyComparisonIntegral.diff?ref=ddbeda130233c27d3a7ef2b1baa730614bc383d4", "patch": "@@ -35,5 +35,9 @@\n           StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:25:31: 25:32\n           return;                          // scope 0 at $DIR/if-condition-int.rs:26:2: 26:2\n       }\n+  \n+      bb4 (cleanup): {\n+          resume;                          // scope 0 at $DIR/if-condition-int.rs:24:1: 26:2\n+      }\n   }\n   "}, {"sha": "a7e4edf40a8d66686afa346b54efd17056bc54dd", "filename": "src/test/mir-opt/if_condition_int.opt_multiple_ifs.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ddbeda130233c27d3a7ef2b1baa730614bc383d4/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_multiple_ifs.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ddbeda130233c27d3a7ef2b1baa730614bc383d4/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_multiple_ifs.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_multiple_ifs.SimplifyComparisonIntegral.diff?ref=ddbeda130233c27d3a7ef2b1baa730614bc383d4", "patch": "@@ -61,5 +61,9 @@\n           StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:39:5: 39:6\n           return;                          // scope 0 at $DIR/if-condition-int.rs:40:2: 40:2\n       }\n+  \n+      bb7 (cleanup): {\n+          resume;                          // scope 0 at $DIR/if-condition-int.rs:32:1: 40:2\n+      }\n   }\n   "}, {"sha": "47f69b85e898c71256e46a7a03b4f686e4515457", "filename": "src/test/mir-opt/if_condition_int.opt_negative.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ddbeda130233c27d3a7ef2b1baa730614bc383d4/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_negative.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ddbeda130233c27d3a7ef2b1baa730614bc383d4/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_negative.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_negative.SimplifyComparisonIntegral.diff?ref=ddbeda130233c27d3a7ef2b1baa730614bc383d4", "patch": "@@ -35,5 +35,9 @@\n           StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:29:32: 29:33\n           return;                          // scope 0 at $DIR/if-condition-int.rs:30:2: 30:2\n       }\n+  \n+      bb4 (cleanup): {\n+          resume;                          // scope 0 at $DIR/if-condition-int.rs:28:1: 30:2\n+      }\n   }\n   "}, {"sha": "3920627d5248783f9edb5ea5a97a1b92bf273bb0", "filename": "src/test/mir-opt/if_condition_int.opt_u32.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ddbeda130233c27d3a7ef2b1baa730614bc383d4/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_u32.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ddbeda130233c27d3a7ef2b1baa730614bc383d4/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_u32.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_u32.SimplifyComparisonIntegral.diff?ref=ddbeda130233c27d3a7ef2b1baa730614bc383d4", "patch": "@@ -35,5 +35,9 @@\n           StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:12:31: 12:32\n           return;                          // scope 0 at $DIR/if-condition-int.rs:13:2: 13:2\n       }\n+  \n+      bb4 (cleanup): {\n+          resume;                          // scope 0 at $DIR/if-condition-int.rs:11:1: 13:2\n+      }\n   }\n   "}, {"sha": "12955aed1fbbe242b22061e33e0df6f5731cd49d", "filename": "src/test/mir-opt/lower_slice_len.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddbeda130233c27d3a7ef2b1baa730614bc383d4/src%2Ftest%2Fmir-opt%2Flower_slice_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbeda130233c27d3a7ef2b1baa730614bc383d4/src%2Ftest%2Fmir-opt%2Flower_slice_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_slice_len.rs?ref=ddbeda130233c27d3a7ef2b1baa730614bc383d4", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Z mir-opt-level=3\n+// unit-test: LowerSliceLenCalls\n \n // EMIT_MIR lower_slice_len.bound.LowerSliceLenCalls.diff\n pub fn bound(index: usize, slice: &[u8]) -> u8 {"}, {"sha": "5786ae62127054cbd56a2e507ba8b9da07befd86", "filename": "src/test/mir-opt/nrvo-simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddbeda130233c27d3a7ef2b1baa730614bc383d4/src%2Ftest%2Fmir-opt%2Fnrvo-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbeda130233c27d3a7ef2b1baa730614bc383d4/src%2Ftest%2Fmir-opt%2Fnrvo-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnrvo-simple.rs?ref=ddbeda130233c27d3a7ef2b1baa730614bc383d4", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmir-opt-level=1\n+// unit-test: RenameReturnPlace\n \n // EMIT_MIR nrvo_simple.nrvo.RenameReturnPlace.diff\n fn nrvo(init: fn(&mut [u8; 1024])) -> [u8; 1024] {"}, {"sha": "e07af6d5983112bb846139193059f86c0a8370a4", "filename": "src/test/mir-opt/nrvo_simple.nrvo.RenameReturnPlace.diff", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ddbeda130233c27d3a7ef2b1baa730614bc383d4/src%2Ftest%2Fmir-opt%2Fnrvo_simple.nrvo.RenameReturnPlace.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ddbeda130233c27d3a7ef2b1baa730614bc383d4/src%2Ftest%2Fmir-opt%2Fnrvo_simple.nrvo.RenameReturnPlace.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnrvo_simple.nrvo.RenameReturnPlace.diff?ref=ddbeda130233c27d3a7ef2b1baa730614bc383d4", "patch": "@@ -39,5 +39,9 @@\n -         StorageDead(_2);                 // scope 0 at $DIR/nrvo-simple.rs:8:1: 8:2\n           return;                          // scope 0 at $DIR/nrvo-simple.rs:8:2: 8:2\n       }\n+  \n+      bb2 (cleanup): {\n+          resume;                          // scope 0 at $DIR/nrvo-simple.rs:4:1: 8:2\n+      }\n   }\n   "}, {"sha": "e6f058569dbd8cf816823a087cf6c3b646fc9a1f", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ddbeda130233c27d3a7ef2b1baa730614bc383d4/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbeda130233c27d3a7ef2b1baa730614bc383d4/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=ddbeda130233c27d3a7ef2b1baa730614bc383d4", "patch": "@@ -157,6 +157,8 @@ pub struct TestProps {\n     pub should_ice: bool,\n     // If true, the stderr is expected to be different across bit-widths.\n     pub stderr_per_bitwidth: bool,\n+    // The MIR opt to unit test, if any\n+    pub mir_unit_test: Option<String>,\n }\n \n mod directives {\n@@ -189,6 +191,7 @@ mod directives {\n     pub const STDERR_PER_BITWIDTH: &'static str = \"stderr-per-bitwidth\";\n     pub const INCREMENTAL: &'static str = \"incremental\";\n     pub const KNOWN_BUG: &'static str = \"known-bug\";\n+    pub const MIR_UNIT_TEST: &'static str = \"unit-test\";\n     // This isn't a real directive, just one that is probably mistyped often\n     pub const INCORRECT_COMPILER_FLAGS: &'static str = \"compiler-flags\";\n }\n@@ -232,6 +235,7 @@ impl TestProps {\n             assembly_output: None,\n             should_ice: false,\n             stderr_per_bitwidth: false,\n+            mir_unit_test: None,\n         }\n     }\n \n@@ -392,6 +396,9 @@ impl TestProps {\n                 config.set_name_directive(ln, STDERR_PER_BITWIDTH, &mut self.stderr_per_bitwidth);\n                 config.set_name_directive(ln, INCREMENTAL, &mut self.incremental);\n                 config.set_name_directive(ln, KNOWN_BUG, &mut self.known_bug);\n+                config.set_name_value_directive(ln, MIR_UNIT_TEST, &mut self.mir_unit_test, |s| {\n+                    s.trim().to_string()\n+                });\n             });\n         }\n "}, {"sha": "6d94fe3ebb9cb53b76480ba6561e31dd203fe075", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ddbeda130233c27d3a7ef2b1baa730614bc383d4/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbeda130233c27d3a7ef2b1baa730614bc383d4/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=ddbeda130233c27d3a7ef2b1baa730614bc383d4", "patch": "@@ -1856,10 +1856,14 @@ impl<'test> TestCx<'test> {\n                 rustc.args(&[\n                     \"-Copt-level=1\",\n                     \"-Zdump-mir=all\",\n-                    \"-Zmir-opt-level=4\",\n                     \"-Zvalidate-mir\",\n                     \"-Zdump-mir-exclude-pass-number\",\n                 ]);\n+                if let Some(pass) = &self.props.mir_unit_test {\n+                    rustc.args(&[\"-Zmir-opt-level=0\", &format!(\"-Zmir-enable-passes=+{}\", pass)]);\n+                } else {\n+                    rustc.arg(\"-Zmir-opt-level=4\");\n+                }\n \n                 let mir_dump_dir = self.get_mir_dump_dir();\n                 let _ = fs::remove_dir_all(&mir_dump_dir);"}]}