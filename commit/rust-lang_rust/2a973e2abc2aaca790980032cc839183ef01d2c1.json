{"sha": "2a973e2abc2aaca790980032cc839183ef01d2c1", "node_id": "C_kwDOAAsO6NoAKDJhOTczZTJhYmMyYWFjYTc5MDk4MDAzMmNjODM5MTgzZWYwMWQyYzE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-04T08:42:40Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-10T23:42:50Z"}, "message": "explain doc comments in macros a bit", "tree": {"sha": "73a8dd7ecda214da2a83b8f8b312966146d4e06a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73a8dd7ecda214da2a83b8f8b312966146d4e06a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a973e2abc2aaca790980032cc839183ef01d2c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a973e2abc2aaca790980032cc839183ef01d2c1", "html_url": "https://github.com/rust-lang/rust/commit/2a973e2abc2aaca790980032cc839183ef01d2c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a973e2abc2aaca790980032cc839183ef01d2c1/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c396bb3b8a16b1f2762b7c6078dc3e023f6a2493", "url": "https://api.github.com/repos/rust-lang/rust/commits/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493", "html_url": "https://github.com/rust-lang/rust/commit/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493"}], "stats": {"total": 34, "additions": 29, "deletions": 5}, "files": [{"sha": "d2fae17a43bc38815d6951cebb7291e7c40e485a", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2a973e2abc2aaca790980032cc839183ef01d2c1/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a973e2abc2aaca790980032cc839183ef01d2c1/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=2a973e2abc2aaca790980032cc839183ef01d2c1", "patch": "@@ -14,7 +14,7 @@ use rustc_ast::{NodeId, DUMMY_NODE_ID};\n use rustc_ast_pretty::pprust;\n use rustc_attr::{self as attr, TransparencyError};\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder};\n+use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed};\n use rustc_feature::Features;\n use rustc_lint_defs::builtin::{\n     RUST_2021_INCOMPATIBLE_OR_PATTERNS, SEMICOLON_IN_EXPRESSIONS_FROM_MACROS,\n@@ -25,6 +25,7 @@ use rustc_session::parse::ParseSess;\n use rustc_session::Session;\n use rustc_span::edition::Edition;\n use rustc_span::hygiene::Transparency;\n+use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::{kw, sym, Ident, MacroRulesNormalizedIdent};\n use rustc_span::Span;\n \n@@ -345,7 +346,7 @@ fn expand_macro<'cx>(\n     if !def_span.is_dummy() && !cx.source_map().is_imported(def_span) {\n         err.span_label(cx.source_map().guess_head_span(def_span), \"when calling this macro\");\n     }\n-\n+    annotate_doc_comment(&mut err, sess.source_map(), span);\n     // Check whether there's a missing comma in this macro call, like `println!(\"{}\" a);`\n     if let Some((arg, comma_span)) = arg.add_comma() {\n         for lhs in lhses {\n@@ -453,7 +454,10 @@ pub fn compile_declarative_macro(\n         Failure(token, msg) => {\n             let s = parse_failure_msg(&token);\n             let sp = token.span.substitute_dummy(def.span);\n-            sess.parse_sess.span_diagnostic.struct_span_err(sp, &s).span_label(sp, msg).emit();\n+            let mut err = sess.parse_sess.span_diagnostic.struct_span_err(sp, &s);\n+            err.span_label(sp, msg);\n+            annotate_doc_comment(&mut err, sess.source_map(), sp);\n+            err.emit();\n             return dummy_syn_ext();\n         }\n         Error(sp, msg) => {\n@@ -590,6 +594,20 @@ pub fn compile_declarative_macro(\n     (mk_syn_ext(expander), rule_spans)\n }\n \n+fn annotate_doc_comment(\n+    err: &mut DiagnosticBuilder<'_, ErrorGuaranteed>,\n+    sm: &SourceMap,\n+    span: Span,\n+) {\n+    if let Ok(src) = sm.span_to_snippet(span) {\n+        if src.starts_with(\"///\") || src.starts_with(\"/**\") {\n+            err.span_label(span, \"outer doc comments expand to `#[doc = \\\"...\\\"]`, which is what this macro attempted to match\");\n+        } else if src.starts_with(\"//!\") || src.starts_with(\"/*!\") {\n+            err.span_label(span, \"inner doc comments expand to `#![doc = \\\"...\\\"]`, which is what this macro attempted to match\");\n+        }\n+    }\n+}\n+\n fn check_lhs_nt_follows(sess: &ParseSess, def: &ast::Item, lhs: &mbe::TokenTree) -> bool {\n     // lhs is going to be like TokenTree::Delimited(...), where the\n     // entire lhs is those tts. Or, it can be a \"bare sequence\", not wrapped in parens."}, {"sha": "0ebf3d52b637252979c8a5a59826901c589365ee", "filename": "src/test/ui/parser/macro/macro-doc-comments-1.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2a973e2abc2aaca790980032cc839183ef01d2c1/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-doc-comments-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a973e2abc2aaca790980032cc839183ef01d2c1/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-doc-comments-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-doc-comments-1.stderr?ref=2a973e2abc2aaca790980032cc839183ef01d2c1", "patch": "@@ -5,7 +5,10 @@ LL | macro_rules! outer {\n    | ------------------ when calling this macro\n ...\n LL |     //! Inner\n-   |     ^^^^^^^^^ no rules expected this token in macro call\n+   |     ^^^^^^^^^\n+   |     |\n+   |     no rules expected this token in macro call\n+   |     inner doc comments expand to `#![doc = \"...\"]`, which is what this macro attempted to match\n \n error: aborting due to previous error\n "}, {"sha": "346d865868d99078fdd54aecd88ac8b502ce848c", "filename": "src/test/ui/parser/macro/macro-doc-comments-2.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2a973e2abc2aaca790980032cc839183ef01d2c1/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-doc-comments-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a973e2abc2aaca790980032cc839183ef01d2c1/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-doc-comments-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-doc-comments-2.stderr?ref=2a973e2abc2aaca790980032cc839183ef01d2c1", "patch": "@@ -5,7 +5,10 @@ LL | macro_rules! inner {\n    | ------------------ when calling this macro\n ...\n LL |     /// Outer\n-   |     ^^^^^^^^^ no rules expected this token in macro call\n+   |     ^^^^^^^^^\n+   |     |\n+   |     no rules expected this token in macro call\n+   |     outer doc comments expand to `#[doc = \"...\"]`, which is what this macro attempted to match\n \n error: aborting due to previous error\n "}]}