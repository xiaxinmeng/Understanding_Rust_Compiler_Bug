{"sha": "d792183fdeea5623c7ec909d5aa2eccf9171582c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3OTIxODNmZGVlYTU2MjNjN2VjOTA5ZDVhYTJlY2NmOTE3MTU4MmM=", "commit": {"author": {"name": "Alex Burka", "email": "aburka@seas.upenn.edu", "date": "2016-01-13T06:26:36Z"}, "committer": {"name": "Alex Burka", "email": "aburka@seas.upenn.edu", "date": "2016-02-27T07:01:41Z"}, "message": "fallout from removing hir::ExprRange\n\nA whole bunch of stuff gets folded into struct handling! Plus, removes\nan ugly hack from trans and accidentally fixes a bug with constructing\nranges from references (see later commits with tests).", "tree": {"sha": "70b283460135593c3a479fcee34376d74d85dee5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70b283460135593c3a479fcee34376d74d85dee5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d792183fdeea5623c7ec909d5aa2eccf9171582c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d792183fdeea5623c7ec909d5aa2eccf9171582c", "html_url": "https://github.com/rust-lang/rust/commit/d792183fdeea5623c7ec909d5aa2eccf9171582c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d792183fdeea5623c7ec909d5aa2eccf9171582c/comments", "author": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "committer": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3312784518b9fa95e43f9a2d773acb0c083147a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3312784518b9fa95e43f9a2d773acb0c083147a", "html_url": "https://github.com/rust-lang/rust/commit/a3312784518b9fa95e43f9a2d773acb0c083147a"}], "stats": {"total": 220, "additions": 3, "deletions": 217}, "files": [{"sha": "4d955173e8040b56a1e523825c0949854849c08a", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d792183fdeea5623c7ec909d5aa2eccf9171582c/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d792183fdeea5623c7ec909d5aa2eccf9171582c/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=d792183fdeea5623c7ec909d5aa2eccf9171582c", "patch": "@@ -317,12 +317,6 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n                 self.call(expr, pred, &l, Some(&**r).into_iter())\n             }\n \n-            hir::ExprRange(ref start, ref end) => {\n-                let fields = start.as_ref().map(|e| &**e).into_iter()\n-                    .chain(end.as_ref().map(|e| &**e));\n-                self.straightline(expr, pred, fields)\n-            }\n-\n             hir::ExprUnary(_, ref e) if self.tcx.is_method_call(expr.id) => {\n                 self.call(expr, pred, &e, None::<hir::Expr>.iter())\n             }"}, {"sha": "48e9d73c9dbeaf64cdd2fadaebb4ecf1dd2dd02a", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d792183fdeea5623c7ec909d5aa2eccf9171582c/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d792183fdeea5623c7ec909d5aa2eccf9171582c/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=d792183fdeea5623c7ec909d5aa2eccf9171582c", "patch": "@@ -399,11 +399,6 @@ impl<'d,'t,'a,'tcx> ExprUseVisitor<'d,'t,'a,'tcx> {\n                 }\n             }\n \n-            hir::ExprRange(ref start, ref end) => {\n-                start.as_ref().map(|e| self.consume_expr(&e));\n-                end.as_ref().map(|e| self.consume_expr(&e));\n-            }\n-\n             hir::ExprCall(ref callee, ref args) => {    // callee(args)\n                 self.walk_callee(expr, &callee);\n                 self.consume_exprs(args);"}, {"sha": "8d7f49fdb9ca9fcd47e88207fb5ba08e7b195115", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d792183fdeea5623c7ec909d5aa2eccf9171582c/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d792183fdeea5623c7ec909d5aa2eccf9171582c/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=d792183fdeea5623c7ec909d5aa2eccf9171582c", "patch": "@@ -498,7 +498,7 @@ fn visit_expr(ir: &mut IrMaps, expr: &Expr) {\n       hir::ExprBlock(..) | hir::ExprAssign(..) | hir::ExprAssignOp(..) |\n       hir::ExprStruct(..) | hir::ExprRepeat(..) |\n       hir::ExprInlineAsm(..) | hir::ExprBox(..) |\n-      hir::ExprRange(..) | hir::ExprType(..) => {\n+      hir::ExprType(..) => {\n           intravisit::walk_expr(ir, expr);\n       }\n     }\n@@ -1154,11 +1154,6 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n             self.propagate_through_expr(&l, r_succ)\n           }\n \n-          hir::ExprRange(ref e1, ref e2) => {\n-            let succ = e2.as_ref().map_or(succ, |e| self.propagate_through_expr(&e, succ));\n-            e1.as_ref().map_or(succ, |e| self.propagate_through_expr(&e, succ))\n-          }\n-\n           hir::ExprBox(ref e) |\n           hir::ExprAddrOf(_, ref e) |\n           hir::ExprCast(ref e, _) |\n@@ -1446,7 +1441,7 @@ fn check_expr(this: &mut Liveness, expr: &Expr) {\n       hir::ExprBlock(..) | hir::ExprAddrOf(..) |\n       hir::ExprStruct(..) | hir::ExprRepeat(..) |\n       hir::ExprClosure(..) | hir::ExprPath(..) | hir::ExprBox(..) |\n-      hir::ExprRange(..) | hir::ExprType(..) => {\n+      hir::ExprType(..) => {\n         intravisit::walk_expr(this, expr);\n       }\n     }"}, {"sha": "c79c6d91e7f094e12f460b426b3fe4dc9efea658", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d792183fdeea5623c7ec909d5aa2eccf9171582c/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d792183fdeea5623c7ec909d5aa2eccf9171582c/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=d792183fdeea5623c7ec909d5aa2eccf9171582c", "patch": "@@ -526,7 +526,7 @@ impl<'t, 'a,'tcx> MemCategorizationContext<'t, 'a, 'tcx> {\n           hir::ExprAddrOf(..) | hir::ExprCall(..) |\n           hir::ExprAssign(..) | hir::ExprAssignOp(..) |\n           hir::ExprClosure(..) | hir::ExprRet(..) |\n-          hir::ExprUnary(..) | hir::ExprRange(..) |\n+          hir::ExprUnary(..) |\n           hir::ExprMethodCall(..) | hir::ExprCast(..) |\n           hir::ExprVec(..) | hir::ExprTup(..) | hir::ExprIf(..) |\n           hir::ExprBinary(..) | hir::ExprWhile(..) |"}, {"sha": "84b57585c6fab73ba73b435ace98c30f3deb5093", "filename": "src/librustc/middle/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d792183fdeea5623c7ec909d5aa2eccf9171582c/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d792183fdeea5623c7ec909d5aa2eccf9171582c/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs?ref=d792183fdeea5623c7ec909d5aa2eccf9171582c", "patch": "@@ -2002,7 +2002,6 @@ impl<'tcx> ctxt<'tcx> {\n             hir::ExprCall(..) |\n             hir::ExprMethodCall(..) |\n             hir::ExprStruct(..) |\n-            hir::ExprRange(..) |\n             hir::ExprTup(..) |\n             hir::ExprIf(..) |\n             hir::ExprMatch(..) |"}, {"sha": "b01b80b813399048d30ff41b2313d7113f198af1", "filename": "src/librustc_back/svh.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d792183fdeea5623c7ec909d5aa2eccf9171582c/src%2Flibrustc_back%2Fsvh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d792183fdeea5623c7ec909d5aa2eccf9171582c/src%2Flibrustc_back%2Fsvh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fsvh.rs?ref=d792183fdeea5623c7ec909d5aa2eccf9171582c", "patch": "@@ -243,7 +243,6 @@ mod svh_visitor {\n         SawExprAssign,\n         SawExprAssignOp(hir::BinOp_),\n         SawExprIndex,\n-        SawExprRange,\n         SawExprPath(Option<usize>),\n         SawExprAddrOf(hir::Mutability),\n         SawExprRet,\n@@ -275,7 +274,6 @@ mod svh_visitor {\n             ExprField(_, name)       => SawExprField(name.node.as_str()),\n             ExprTupField(_, id)      => SawExprTupField(id.node),\n             ExprIndex(..)            => SawExprIndex,\n-            ExprRange(..)            => SawExprRange,\n             ExprPath(ref qself, _)   => SawExprPath(qself.as_ref().map(|q| q.position)),\n             ExprAddrOf(m, _)         => SawExprAddrOf(m),\n             ExprBreak(id)            => SawExprBreak(id.map(|id| id.node.name.as_str())),"}, {"sha": "84d291e537520438b96aea5d594dc23f2ce3564e", "filename": "src/librustc_front/fold.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d792183fdeea5623c7ec909d5aa2eccf9171582c/src%2Flibrustc_front%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d792183fdeea5623c7ec909d5aa2eccf9171582c/src%2Flibrustc_front%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Ffold.rs?ref=d792183fdeea5623c7ec909d5aa2eccf9171582c", "patch": "@@ -1092,10 +1092,6 @@ pub fn noop_fold_expr<T: Folder>(Expr { id, node, span, attrs }: Expr, folder: &\n             ExprIndex(el, er) => {\n                 ExprIndex(folder.fold_expr(el), folder.fold_expr(er))\n             }\n-            ExprRange(e1, e2) => {\n-                ExprRange(e1.map(|x| folder.fold_expr(x)),\n-                          e2.map(|x| folder.fold_expr(x)))\n-            }\n             ExprPath(qself, path) => {\n                 let qself = qself.map(|QSelf { ty, position }| {\n                     QSelf {"}, {"sha": "a4423c3a9911964ae14fd50e42554ce192ae804f", "filename": "src/librustc_front/intravisit.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d792183fdeea5623c7ec909d5aa2eccf9171582c/src%2Flibrustc_front%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d792183fdeea5623c7ec909d5aa2eccf9171582c/src%2Flibrustc_front%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fintravisit.rs?ref=d792183fdeea5623c7ec909d5aa2eccf9171582c", "patch": "@@ -784,10 +784,6 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) {\n             visitor.visit_expr(main_expression);\n             visitor.visit_expr(index_expression)\n         }\n-        ExprRange(ref start, ref end) => {\n-            walk_list!(visitor, visit_expr, start);\n-            walk_list!(visitor, visit_expr, end);\n-        }\n         ExprPath(ref maybe_qself, ref path) => {\n             if let Some(ref qself) = *maybe_qself {\n                 visitor.visit_ty(&qself.ty);"}, {"sha": "d5931dcd14d8a369402802799c77a8ffbbf110fa", "filename": "src/librustc_front/print/pprust.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d792183fdeea5623c7ec909d5aa2eccf9171582c/src%2Flibrustc_front%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d792183fdeea5623c7ec909d5aa2eccf9171582c/src%2Flibrustc_front%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fprint%2Fpprust.rs?ref=d792183fdeea5623c7ec909d5aa2eccf9171582c", "patch": "@@ -1459,15 +1459,6 @@ impl<'a> State<'a> {\n                 try!(self.print_expr(&index));\n                 try!(word(&mut self.s, \"]\"));\n             }\n-            hir::ExprRange(ref start, ref end) => {\n-                if let &Some(ref e) = start {\n-                    try!(self.print_expr(&e));\n-                }\n-                try!(word(&mut self.s, \"..\"));\n-                if let &Some(ref e) = end {\n-                    try!(self.print_expr(&e));\n-                }\n-            }\n             hir::ExprPath(None, ref path) => {\n                 try!(self.print_path(path, true, 0))\n             }"}, {"sha": "cb54cadfcd16b4c6c7267b8d026ade1f59e5e9ce", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d792183fdeea5623c7ec909d5aa2eccf9171582c/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d792183fdeea5623c7ec909d5aa2eccf9171582c/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=d792183fdeea5623c7ec909d5aa2eccf9171582c", "patch": "@@ -22,7 +22,6 @@ use rustc::middle::ty::{self, VariantDef, Ty};\n use rustc::mir::repr::*;\n use rustc_front::hir;\n use rustc_front::util as hir_util;\n-use syntax::parse::token;\n use syntax::ptr::P;\n \n impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n@@ -324,38 +323,6 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n                 }\n             }\n \n-            hir::ExprRange(ref start, ref end) => {\n-                let range_ty = cx.tcx.expr_ty(self);\n-                let (adt_def, substs) = match range_ty.sty {\n-                    ty::TyStruct(adt_def, substs) => (adt_def, substs),\n-                    _ => {\n-                        cx.tcx.sess.span_bug(self.span, \"unexpanded ast\");\n-                    }\n-                };\n-\n-                let field_expr_ref = |s: &'tcx P<hir::Expr>, name: &str| {\n-                    let name = token::intern(name);\n-                    let index = adt_def.variants[0].index_of_field_named(name).unwrap();\n-                    FieldExprRef { name: Field::new(index), expr: s.to_ref() }\n-                };\n-\n-                let start_field = start.as_ref()\n-                                       .into_iter()\n-                                       .map(|s| field_expr_ref(s, \"start\"));\n-\n-                let end_field = end.as_ref()\n-                                   .into_iter()\n-                                   .map(|e| field_expr_ref(e, \"end\"));\n-\n-                ExprKind::Adt {\n-                    adt_def: adt_def,\n-                    variant_index: 0,\n-                    substs: substs,\n-                    fields: start_field.chain(end_field).collect(),\n-                    base: None,\n-                }\n-            }\n-\n             hir::ExprPath(..) => {\n                 convert_path_expr(cx, self)\n             }"}, {"sha": "f6e4f3191efc4ffceff1c7b366df70d5a3d040a7", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d792183fdeea5623c7ec909d5aa2eccf9171582c/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d792183fdeea5623c7ec909d5aa2eccf9171582c/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=d792183fdeea5623c7ec909d5aa2eccf9171582c", "patch": "@@ -747,9 +747,6 @@ fn check_expr<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>,\n         hir::ExprAgain(_) |\n         hir::ExprRet(_) |\n \n-        // Miscellaneous expressions that could be implemented.\n-        hir::ExprRange(..) |\n-\n         // Expressions with side-effects.\n         hir::ExprAssign(..) |\n         hir::ExprAssignOp(..) |"}, {"sha": "4ba103c0c0d08c7991aa24c9ec8a135407f43736", "filename": "src/librustc_trans/trans/debuginfo/create_scope_map.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d792183fdeea5623c7ec909d5aa2eccf9171582c/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fcreate_scope_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d792183fdeea5623c7ec909d5aa2eccf9171582c/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fcreate_scope_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fcreate_scope_map.rs?ref=d792183fdeea5623c7ec909d5aa2eccf9171582c", "patch": "@@ -346,11 +346,6 @@ fn walk_expr(cx: &CrateContext,\n             walk_expr(cx, &rhs, scope_stack, scope_map);\n         }\n \n-        hir::ExprRange(ref start, ref end) => {\n-            start.as_ref().map(|e| walk_expr(cx, &e, scope_stack, scope_map));\n-            end.as_ref().map(|e| walk_expr(cx, &e, scope_stack, scope_map));\n-        }\n-\n         hir::ExprVec(ref init_expressions) |\n         hir::ExprTup(ref init_expressions) => {\n             for ie in init_expressions {"}, {"sha": "ec6c2cdde593e29dbb4440e4e7e6ec5200869d51", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/d792183fdeea5623c7ec909d5aa2eccf9171582c/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d792183fdeea5623c7ec909d5aa2eccf9171582c/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=d792183fdeea5623c7ec909d5aa2eccf9171582c", "patch": "@@ -86,7 +86,6 @@ use rustc_front::hir;\n use syntax::{ast, codemap};\n use syntax::parse::token::InternedString;\n use syntax::ptr::P;\n-use syntax::parse::token;\n use std::mem;\n \n // Destinations\n@@ -1059,7 +1058,6 @@ fn trans_rvalue_dps_unadjusted<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                            -> Block<'blk, 'tcx> {\n     let _icx = push_ctxt(\"trans_rvalue_dps_unadjusted\");\n     let mut bcx = bcx;\n-    let tcx = bcx.tcx();\n \n     debuginfo::set_source_location(bcx.fcx, expr.id, expr.span);\n \n@@ -1088,59 +1086,6 @@ fn trans_rvalue_dps_unadjusted<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                          node_id_type(bcx, expr.id),\n                          dest)\n         }\n-        hir::ExprRange(ref start, ref end) => {\n-            // FIXME it is just not right that we are synthesising ast nodes in\n-            // trans. Shudder.\n-            fn make_field(field_name: &str, expr: P<hir::Expr>) -> hir::Field {\n-                hir::Field {\n-                    name: codemap::dummy_spanned(token::intern(field_name)),\n-                    expr: expr,\n-                    span: codemap::DUMMY_SP,\n-                }\n-            }\n-\n-            // A range just desugars into a struct.\n-            // Note that the type of the start and end may not be the same, but\n-            // they should only differ in their lifetime, which should not matter\n-            // in trans.\n-            let (did, fields, ty_params) = match (start, end) {\n-                (&Some(ref start), &Some(ref end)) => {\n-                    // Desugar to Range\n-                    let fields = vec![make_field(\"start\", start.clone()),\n-                                      make_field(\"end\", end.clone())];\n-                    (tcx.lang_items.range_struct(), fields, vec![node_id_type(bcx, start.id)])\n-                }\n-                (&Some(ref start), &None) => {\n-                    // Desugar to RangeFrom\n-                    let fields = vec![make_field(\"start\", start.clone())];\n-                    (tcx.lang_items.range_from_struct(), fields, vec![node_id_type(bcx, start.id)])\n-                }\n-                (&None, &Some(ref end)) => {\n-                    // Desugar to RangeTo\n-                    let fields = vec![make_field(\"end\", end.clone())];\n-                    (tcx.lang_items.range_to_struct(), fields, vec![node_id_type(bcx, end.id)])\n-                }\n-                _ => {\n-                    // Desugar to RangeFull\n-                    (tcx.lang_items.range_full_struct(), vec![], vec![])\n-                }\n-            };\n-\n-            if let Some(did) = did {\n-                let substs = Substs::new_type(ty_params, vec![]);\n-                trans_struct(bcx,\n-                             &fields,\n-                             None,\n-                             expr.span,\n-                             expr.id,\n-                             tcx.mk_struct(tcx.lookup_adt_def(did),\n-                                           tcx.mk_substs(substs)),\n-                             dest)\n-            } else {\n-                tcx.sess.span_bug(expr.span,\n-                                  \"No lang item for ranges (how did we get this far?)\")\n-            }\n-        }\n         hir::ExprTup(ref args) => {\n             let numbered_fields: Vec<(usize, &hir::Expr)> =\n                 args.iter().enumerate().map(|(i, arg)| (i, &**arg)).collect();\n@@ -2625,7 +2570,6 @@ fn expr_kind(tcx: &ty::ctxt, expr: &hir::Expr) -> ExprKind {\n         hir::ExprCall(..) |\n         hir::ExprMethodCall(..) |\n         hir::ExprStruct(..) |\n-        hir::ExprRange(..) |\n         hir::ExprTup(..) |\n         hir::ExprIf(..) |\n         hir::ExprMatch(..) |"}, {"sha": "0eb1d2ee2fda204b43bfec783d93b5b061c5f3a2", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 81, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/d792183fdeea5623c7ec909d5aa2eccf9171582c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d792183fdeea5623c7ec909d5aa2eccf9171582c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=d792183fdeea5623c7ec909d5aa2eccf9171582c", "patch": "@@ -3677,87 +3677,6 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n               }\n           }\n        }\n-       hir::ExprRange(ref start, ref end) => {\n-          let t_start = start.as_ref().map(|e| {\n-            check_expr(fcx, &e);\n-            fcx.expr_ty(&e)\n-          });\n-          let t_end = end.as_ref().map(|e| {\n-            check_expr(fcx, &e);\n-            fcx.expr_ty(&e)\n-          });\n-\n-          let idx_type = match (t_start, t_end) {\n-              (Some(ty), None) | (None, Some(ty)) => {\n-                  Some(ty)\n-              }\n-              (Some(t_start), Some(t_end)) if (t_start.references_error() ||\n-                                               t_end.references_error()) => {\n-                  Some(fcx.tcx().types.err)\n-              }\n-              (Some(t_start), Some(t_end)) => {\n-                  Some(infer::common_supertype(fcx.infcx(),\n-                                               TypeOrigin::RangeExpression(expr.span),\n-                                               true,\n-                                               t_start,\n-                                               t_end))\n-              }\n-              _ => None\n-          };\n-\n-          // Note that we don't check the type of start/end satisfy any\n-          // bounds because right now the range structs do not have any. If we add\n-          // some bounds, then we'll need to check `t_start` against them here.\n-\n-          let range_type = match idx_type {\n-            Some(idx_type) if idx_type.references_error() => {\n-                fcx.tcx().types.err\n-            }\n-            Some(idx_type) => {\n-                // Find the did from the appropriate lang item.\n-                let did = match (start, end) {\n-                    (&Some(_), &Some(_)) => tcx.lang_items.range_struct(),\n-                    (&Some(_), &None) => tcx.lang_items.range_from_struct(),\n-                    (&None, &Some(_)) => tcx.lang_items.range_to_struct(),\n-                    (&None, &None) => {\n-                        tcx.sess.span_bug(expr.span, \"full range should be dealt with above\")\n-                    }\n-                };\n-\n-                if let Some(did) = did {\n-                    let def = tcx.lookup_adt_def(did);\n-                    let predicates = tcx.lookup_predicates(did);\n-                    let substs = Substs::new_type(vec![idx_type], vec![]);\n-                    let bounds = fcx.instantiate_bounds(expr.span, &substs, &predicates);\n-                    fcx.add_obligations_for_parameters(\n-                        traits::ObligationCause::new(expr.span,\n-                                                     fcx.body_id,\n-                                                     traits::ItemObligation(did)),\n-                        &bounds);\n-\n-                    tcx.mk_struct(def, tcx.mk_substs(substs))\n-                } else {\n-                    span_err!(tcx.sess, expr.span, E0236, \"no lang item for range syntax\");\n-                    fcx.tcx().types.err\n-                }\n-            }\n-            None => {\n-                // Neither start nor end => RangeFull\n-                if let Some(did) = tcx.lang_items.range_full_struct() {\n-                    tcx.mk_struct(\n-                        tcx.lookup_adt_def(did),\n-                        tcx.mk_substs(Substs::empty())\n-                    )\n-                } else {\n-                    span_err!(tcx.sess, expr.span, E0237, \"no lang item for range syntax\");\n-                    fcx.tcx().types.err\n-                }\n-            }\n-          };\n-\n-          fcx.write_ty(id, range_type);\n-       }\n-\n     }\n \n     debug!(\"type of expr({}) {} is...\", expr.id,"}]}