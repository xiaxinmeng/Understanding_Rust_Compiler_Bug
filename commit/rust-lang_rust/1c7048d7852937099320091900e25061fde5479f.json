{"sha": "1c7048d7852937099320091900e25061fde5479f", "node_id": "C_kwDOAAsO6NoAKDFjNzA0OGQ3ODUyOTM3MDk5MzIwMDkxOTAwZTI1MDYxZmRlNTQ3OWY", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2023-03-07T14:40:55Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2023-03-12T21:24:36Z"}, "message": "Add utility macros to help with writing tests.", "tree": {"sha": "276f8545104968ce14a14f42ff8678748790fa50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/276f8545104968ce14a14f42ff8678748790fa50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c7048d7852937099320091900e25061fde5479f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c7048d7852937099320091900e25061fde5479f", "html_url": "https://github.com/rust-lang/rust/commit/1c7048d7852937099320091900e25061fde5479f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c7048d7852937099320091900e25061fde5479f/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0e2e7bdb4d7441fc8fd4f56795377ab85c82252", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0e2e7bdb4d7441fc8fd4f56795377ab85c82252", "html_url": "https://github.com/rust-lang/rust/commit/b0e2e7bdb4d7441fc8fd4f56795377ab85c82252"}], "stats": {"total": 2265, "additions": 1173, "deletions": 1092}, "files": [{"sha": "a4bf7fe18d5f46786a5b1f49bfcede671528bc25", "filename": "tests/ui/almost_complete_range.fixed", "status": "modified", "additions": 17, "deletions": 32, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Falmost_complete_range.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Falmost_complete_range.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Falmost_complete_range.fixed?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n // edition:2018\n-// aux-build:macro_rules.rs\n+// aux-build:proc_macros.rs\n \n #![feature(exclusive_range_pattern)]\n #![feature(stmt_expr_attributes)]\n@@ -9,33 +9,10 @@\n #![allow(clippy::needless_parens_on_range_literals)]\n #![allow(clippy::double_parens)]\n \n-#[macro_use]\n-extern crate macro_rules;\n-\n-macro_rules! a {\n-    () => {\n-        'a'\n-    };\n-}\n-macro_rules! A {\n-    () => {\n-        'A'\n-    };\n-}\n-macro_rules! zero {\n-    () => {\n-        '0'\n-    };\n-}\n-\n-macro_rules! b {\n-    () => {\n-        let _ = 'a'..='z';\n-        let _ = 'A'..='Z';\n-        let _ = '0'..='9';\n-    };\n-}\n+extern crate proc_macros;\n+use proc_macros::{external, inline_macros};\n \n+#[inline_macros]\n fn main() {\n     #[rustfmt::skip]\n     {\n@@ -56,9 +33,9 @@ fn main() {\n     let _ = b'B'..b'Z';\n     let _ = b'1'..b'9';\n \n-    let _ = a!()..='z';\n-    let _ = A!()..='Z';\n-    let _ = zero!()..='9';\n+    let _ = inline!('a')..='z';\n+    let _ = inline!('A')..='Z';\n+    let _ = inline!('0')..='9';\n \n     let _ = match 0u8 {\n         b'a'..=b'z' if true => 1,\n@@ -80,8 +57,16 @@ fn main() {\n         _ => 7,\n     };\n \n-    almost_complete_range!();\n-    b!();\n+    external!(\n+        let _ = 'a'..'z';\n+        let _ = 'A'..'Z';\n+        let _ = '0'..'9';\n+    );\n+    inline!(\n+        let _ = 'a'..='z';\n+        let _ = 'A'..='Z';\n+        let _ = '0'..='9';\n+    );\n }\n \n #[clippy::msrv = \"1.25\"]"}, {"sha": "8237c3a13611a36b1737dd5bd49478be8fd42bc3", "filename": "tests/ui/almost_complete_range.rs", "status": "modified", "additions": 17, "deletions": 32, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Falmost_complete_range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Falmost_complete_range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Falmost_complete_range.rs?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n // edition:2018\n-// aux-build:macro_rules.rs\n+// aux-build:proc_macros.rs\n \n #![feature(exclusive_range_pattern)]\n #![feature(stmt_expr_attributes)]\n@@ -9,33 +9,10 @@\n #![allow(clippy::needless_parens_on_range_literals)]\n #![allow(clippy::double_parens)]\n \n-#[macro_use]\n-extern crate macro_rules;\n-\n-macro_rules! a {\n-    () => {\n-        'a'\n-    };\n-}\n-macro_rules! A {\n-    () => {\n-        'A'\n-    };\n-}\n-macro_rules! zero {\n-    () => {\n-        '0'\n-    };\n-}\n-\n-macro_rules! b {\n-    () => {\n-        let _ = 'a'..'z';\n-        let _ = 'A'..'Z';\n-        let _ = '0'..'9';\n-    };\n-}\n+extern crate proc_macros;\n+use proc_macros::{external, inline_macros};\n \n+#[inline_macros]\n fn main() {\n     #[rustfmt::skip]\n     {\n@@ -56,9 +33,9 @@ fn main() {\n     let _ = b'B'..b'Z';\n     let _ = b'1'..b'9';\n \n-    let _ = a!()..'z';\n-    let _ = A!()..'Z';\n-    let _ = zero!()..'9';\n+    let _ = inline!('a')..'z';\n+    let _ = inline!('A')..'Z';\n+    let _ = inline!('0')..'9';\n \n     let _ = match 0u8 {\n         b'a'..b'z' if true => 1,\n@@ -80,8 +57,16 @@ fn main() {\n         _ => 7,\n     };\n \n-    almost_complete_range!();\n-    b!();\n+    external!(\n+        let _ = 'a'..'z';\n+        let _ = 'A'..'Z';\n+        let _ = '0'..'9';\n+    );\n+    inline!(\n+        let _ = 'a'..'z';\n+        let _ = 'A'..'Z';\n+        let _ = '0'..'9';\n+    );\n }\n \n #[clippy::msrv = \"1.25\"]"}, {"sha": "34521c13ab3ed4bfb0f34e2dff02f756a1027244", "filename": "tests/ui/almost_complete_range.stderr", "status": "modified", "additions": 42, "deletions": 51, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Falmost_complete_range.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Falmost_complete_range.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Falmost_complete_range.stderr?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,5 +1,5 @@\n error: almost complete ascii range\n-  --> $DIR/almost_complete_range.rs:42:17\n+  --> $DIR/almost_complete_range.rs:19:17\n    |\n LL |         let _ = ('a') ..'z';\n    |                 ^^^^^^--^^^\n@@ -9,222 +9,213 @@ LL |         let _ = ('a') ..'z';\n    = note: `-D clippy::almost-complete-range` implied by `-D warnings`\n \n error: almost complete ascii range\n-  --> $DIR/almost_complete_range.rs:43:17\n+  --> $DIR/almost_complete_range.rs:20:17\n    |\n LL |         let _ = 'A' .. ('Z');\n    |                 ^^^^--^^^^^^\n    |                     |\n    |                     help: use an inclusive range: `..=`\n \n error: almost complete ascii range\n-  --> $DIR/almost_complete_range.rs:44:17\n+  --> $DIR/almost_complete_range.rs:21:17\n    |\n LL |         let _ = ((('0'))) .. ('9');\n    |                 ^^^^^^^^^^--^^^^^^\n    |                           |\n    |                           help: use an inclusive range: `..=`\n \n error: almost complete ascii range\n-  --> $DIR/almost_complete_range.rs:51:13\n+  --> $DIR/almost_complete_range.rs:28:13\n    |\n LL |     let _ = (b'a')..(b'z');\n    |             ^^^^^^--^^^^^^\n    |                   |\n    |                   help: use an inclusive range: `..=`\n \n error: almost complete ascii range\n-  --> $DIR/almost_complete_range.rs:52:13\n+  --> $DIR/almost_complete_range.rs:29:13\n    |\n LL |     let _ = b'A'..b'Z';\n    |             ^^^^--^^^^\n    |                 |\n    |                 help: use an inclusive range: `..=`\n \n error: almost complete ascii range\n-  --> $DIR/almost_complete_range.rs:53:13\n+  --> $DIR/almost_complete_range.rs:30:13\n    |\n LL |     let _ = b'0'..b'9';\n    |             ^^^^--^^^^\n    |                 |\n    |                 help: use an inclusive range: `..=`\n \n error: almost complete ascii range\n-  --> $DIR/almost_complete_range.rs:59:13\n+  --> $DIR/almost_complete_range.rs:36:13\n    |\n-LL |     let _ = a!()..'z';\n-   |             ^^^^--^^^\n-   |                 |\n-   |                 help: use an inclusive range: `..=`\n+LL |     let _ = inline!('a')..'z';\n+   |             ^^^^^^^^^^^^--^^^\n+   |                         |\n+   |                         help: use an inclusive range: `..=`\n \n error: almost complete ascii range\n-  --> $DIR/almost_complete_range.rs:60:13\n+  --> $DIR/almost_complete_range.rs:37:13\n    |\n-LL |     let _ = A!()..'Z';\n-   |             ^^^^--^^^\n-   |                 |\n-   |                 help: use an inclusive range: `..=`\n+LL |     let _ = inline!('A')..'Z';\n+   |             ^^^^^^^^^^^^--^^^\n+   |                         |\n+   |                         help: use an inclusive range: `..=`\n \n error: almost complete ascii range\n-  --> $DIR/almost_complete_range.rs:61:13\n+  --> $DIR/almost_complete_range.rs:38:13\n    |\n-LL |     let _ = zero!()..'9';\n-   |             ^^^^^^^--^^^\n-   |                    |\n-   |                    help: use an inclusive range: `..=`\n+LL |     let _ = inline!('0')..'9';\n+   |             ^^^^^^^^^^^^--^^^\n+   |                         |\n+   |                         help: use an inclusive range: `..=`\n \n error: almost complete ascii range\n-  --> $DIR/almost_complete_range.rs:64:9\n+  --> $DIR/almost_complete_range.rs:41:9\n    |\n LL |         b'a'..b'z' if true => 1,\n    |         ^^^^--^^^^\n    |             |\n    |             help: use an inclusive range: `..=`\n \n error: almost complete ascii range\n-  --> $DIR/almost_complete_range.rs:65:9\n+  --> $DIR/almost_complete_range.rs:42:9\n    |\n LL |         b'A'..b'Z' if true => 2,\n    |         ^^^^--^^^^\n    |             |\n    |             help: use an inclusive range: `..=`\n \n error: almost complete ascii range\n-  --> $DIR/almost_complete_range.rs:66:9\n+  --> $DIR/almost_complete_range.rs:43:9\n    |\n LL |         b'0'..b'9' if true => 3,\n    |         ^^^^--^^^^\n    |             |\n    |             help: use an inclusive range: `..=`\n \n error: almost complete ascii range\n-  --> $DIR/almost_complete_range.rs:74:9\n+  --> $DIR/almost_complete_range.rs:51:9\n    |\n LL |         'a'..'z' if true => 1,\n    |         ^^^--^^^\n    |            |\n    |            help: use an inclusive range: `..=`\n \n error: almost complete ascii range\n-  --> $DIR/almost_complete_range.rs:75:9\n+  --> $DIR/almost_complete_range.rs:52:9\n    |\n LL |         'A'..'Z' if true => 2,\n    |         ^^^--^^^\n    |            |\n    |            help: use an inclusive range: `..=`\n \n error: almost complete ascii range\n-  --> $DIR/almost_complete_range.rs:76:9\n+  --> $DIR/almost_complete_range.rs:53:9\n    |\n LL |         '0'..'9' if true => 3,\n    |         ^^^--^^^\n    |            |\n    |            help: use an inclusive range: `..=`\n \n error: almost complete ascii range\n-  --> $DIR/almost_complete_range.rs:33:17\n+  --> $DIR/almost_complete_range.rs:66:17\n    |\n LL |         let _ = 'a'..'z';\n    |                 ^^^--^^^\n    |                    |\n    |                    help: use an inclusive range: `..=`\n-...\n-LL |     b!();\n-   |     ---- in this macro invocation\n    |\n-   = note: this error originates in the macro `b` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `__inline_mac_fn_main` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: almost complete ascii range\n-  --> $DIR/almost_complete_range.rs:34:17\n+  --> $DIR/almost_complete_range.rs:67:17\n    |\n LL |         let _ = 'A'..'Z';\n    |                 ^^^--^^^\n    |                    |\n    |                    help: use an inclusive range: `..=`\n-...\n-LL |     b!();\n-   |     ---- in this macro invocation\n    |\n-   = note: this error originates in the macro `b` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `__inline_mac_fn_main` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: almost complete ascii range\n-  --> $DIR/almost_complete_range.rs:35:17\n+  --> $DIR/almost_complete_range.rs:68:17\n    |\n LL |         let _ = '0'..'9';\n    |                 ^^^--^^^\n    |                    |\n    |                    help: use an inclusive range: `..=`\n-...\n-LL |     b!();\n-   |     ---- in this macro invocation\n    |\n-   = note: this error originates in the macro `b` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `__inline_mac_fn_main` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: almost complete ascii range\n-  --> $DIR/almost_complete_range.rs:90:9\n+  --> $DIR/almost_complete_range.rs:75:9\n    |\n LL |         'a'..'z' => 1,\n    |         ^^^--^^^\n    |            |\n    |            help: use an inclusive range: `...`\n \n error: almost complete ascii range\n-  --> $DIR/almost_complete_range.rs:91:9\n+  --> $DIR/almost_complete_range.rs:76:9\n    |\n LL |         'A'..'Z' => 2,\n    |         ^^^--^^^\n    |            |\n    |            help: use an inclusive range: `...`\n \n error: almost complete ascii range\n-  --> $DIR/almost_complete_range.rs:92:9\n+  --> $DIR/almost_complete_range.rs:77:9\n    |\n LL |         '0'..'9' => 3,\n    |         ^^^--^^^\n    |            |\n    |            help: use an inclusive range: `...`\n \n error: almost complete ascii range\n-  --> $DIR/almost_complete_range.rs:99:13\n+  --> $DIR/almost_complete_range.rs:84:13\n    |\n LL |     let _ = 'a'..'z';\n    |             ^^^--^^^\n    |                |\n    |                help: use an inclusive range: `..=`\n \n error: almost complete ascii range\n-  --> $DIR/almost_complete_range.rs:100:13\n+  --> $DIR/almost_complete_range.rs:85:13\n    |\n LL |     let _ = 'A'..'Z';\n    |             ^^^--^^^\n    |                |\n    |                help: use an inclusive range: `..=`\n \n error: almost complete ascii range\n-  --> $DIR/almost_complete_range.rs:101:13\n+  --> $DIR/almost_complete_range.rs:86:13\n    |\n LL |     let _ = '0'..'9';\n    |             ^^^--^^^\n    |                |\n    |                help: use an inclusive range: `..=`\n \n error: almost complete ascii range\n-  --> $DIR/almost_complete_range.rs:103:9\n+  --> $DIR/almost_complete_range.rs:88:9\n    |\n LL |         'a'..'z' => 1,\n    |         ^^^--^^^\n    |            |\n    |            help: use an inclusive range: `..=`\n \n error: almost complete ascii range\n-  --> $DIR/almost_complete_range.rs:104:9\n+  --> $DIR/almost_complete_range.rs:89:9\n    |\n LL |         'A'..'Z' => 1,\n    |         ^^^--^^^\n    |            |\n    |            help: use an inclusive range: `..=`\n \n error: almost complete ascii range\n-  --> $DIR/almost_complete_range.rs:105:9\n+  --> $DIR/almost_complete_range.rs:90:9\n    |\n LL |         '0'..'9' => 3,\n    |         ^^^--^^^"}, {"sha": "c50d4088b5ebb0d1414d31b275d52bc70ae11981", "filename": "tests/ui/as_conversions.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fas_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fas_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fas_conversions.rs?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,20 +1,15 @@\n-// aux-build:macro_rules.rs\n+// aux-build:proc_macros.rs\n \n #![warn(clippy::as_conversions)]\n #![allow(clippy::borrow_as_ptr)]\n \n-#[macro_use]\n-extern crate macro_rules;\n-\n-fn with_external_macro() {\n-    as_conv_with_arg!(0u32 as u64);\n-    as_conv!();\n-}\n+extern crate proc_macros;\n+use proc_macros::external;\n \n fn main() {\n     let i = 0u32 as u64;\n \n     let j = &i as *const u64 as *mut u64;\n \n-    with_external_macro();\n+    external!(0u32 as u64);\n }"}, {"sha": "54037a6499787cc63ad371ed7cb39574fa2c66d4", "filename": "tests/ui/as_conversions.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fas_conversions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fas_conversions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fas_conversions.stderr?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,5 +1,5 @@\n error: using a potentially dangerous silent `as` conversion\n-  --> $DIR/as_conversions.rs:15:13\n+  --> $DIR/as_conversions.rs:10:13\n    |\n LL |     let i = 0u32 as u64;\n    |             ^^^^^^^^^^^\n@@ -8,15 +8,15 @@ LL |     let i = 0u32 as u64;\n    = note: `-D clippy::as-conversions` implied by `-D warnings`\n \n error: using a potentially dangerous silent `as` conversion\n-  --> $DIR/as_conversions.rs:17:13\n+  --> $DIR/as_conversions.rs:12:13\n    |\n LL |     let j = &i as *const u64 as *mut u64;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a safe wrapper for this conversion\n \n error: using a potentially dangerous silent `as` conversion\n-  --> $DIR/as_conversions.rs:17:13\n+  --> $DIR/as_conversions.rs:12:13\n    |\n LL |     let j = &i as *const u64 as *mut u64;\n    |             ^^^^^^^^^^^^^^^^"}, {"sha": "3d917e3dc75e9211a5ca7f5a52de06d569792acb", "filename": "tests/ui/auxiliary/doc_unsafe_macros.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b0e2e7bdb4d7441fc8fd4f56795377ab85c82252/tests%2Fui%2Fauxiliary%2Fdoc_unsafe_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0e2e7bdb4d7441fc8fd4f56795377ab85c82252/tests%2Fui%2Fauxiliary%2Fdoc_unsafe_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Fdoc_unsafe_macros.rs?ref=b0e2e7bdb4d7441fc8fd4f56795377ab85c82252", "patch": "@@ -1,16 +0,0 @@\n-#[macro_export]\n-macro_rules! undocd_unsafe {\n-    () => {\n-        pub unsafe fn oy_vey() {\n-            unimplemented!();\n-        }\n-    };\n-}\n-#[macro_export]\n-macro_rules! undocd_safe {\n-    () => {\n-        pub fn vey_oy() {\n-            unimplemented!();\n-        }\n-    };\n-}"}, {"sha": "1eb77c531835a165f898ba04d35ab50b64ae05bb", "filename": "tests/ui/auxiliary/implicit_hasher_macros.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0e2e7bdb4d7441fc8fd4f56795377ab85c82252/tests%2Fui%2Fauxiliary%2Fimplicit_hasher_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0e2e7bdb4d7441fc8fd4f56795377ab85c82252/tests%2Fui%2Fauxiliary%2Fimplicit_hasher_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Fimplicit_hasher_macros.rs?ref=b0e2e7bdb4d7441fc8fd4f56795377ab85c82252", "patch": "@@ -1,6 +0,0 @@\n-#[macro_export]\n-macro_rules! implicit_hasher_fn {\n-    () => {\n-        pub fn f(input: &HashMap<u32, u32>) {}\n-    };\n-}"}, {"sha": "1dc92c1b92b6326c886837afe89975704df28013", "filename": "tests/ui/auxiliary/macro_rules.rs", "status": "modified", "additions": 0, "deletions": 141, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -2,21 +2,6 @@\n \n //! Used to test that certain lints don't trigger in imported external macros\n \n-#[macro_export]\n-macro_rules! foofoo {\n-    () => {\n-        loop {}\n-    };\n-}\n-\n-#[macro_export]\n-macro_rules! must_use_unit {\n-    () => {\n-        #[must_use]\n-        fn foo() {}\n-    };\n-}\n-\n #[macro_export]\n macro_rules! try_err {\n     () => {\n@@ -36,135 +21,9 @@ macro_rules! string_add {\n     };\n }\n \n-#[macro_export]\n-macro_rules! take_external {\n-    ($s:expr) => {\n-        std::mem::replace($s, Default::default())\n-    };\n-}\n-\n-#[macro_export]\n-macro_rules! option_env_unwrap_external {\n-    ($env: expr) => {\n-        option_env!($env).unwrap()\n-    };\n-    ($env: expr, $message: expr) => {\n-        option_env!($env).expect($message)\n-    };\n-}\n-\n-#[macro_export]\n-macro_rules! ref_arg_binding {\n-    () => {\n-        let ref _y = 42;\n-    };\n-}\n-\n-#[macro_export]\n-macro_rules! ref_arg_function {\n-    () => {\n-        fn fun_example(ref _x: usize) {}\n-    };\n-}\n-\n-#[macro_export]\n-macro_rules! as_conv_with_arg {\n-    (0u32 as u64) => {\n-        ()\n-    };\n-}\n-\n-#[macro_export]\n-macro_rules! as_conv {\n-    () => {\n-        0u32 as u64\n-    };\n-}\n-\n-#[macro_export]\n-macro_rules! large_enum_variant {\n-    () => {\n-        enum LargeEnumInMacro {\n-            A(i32),\n-            B([i32; 8000]),\n-        }\n-    };\n-}\n-\n-#[macro_export]\n-macro_rules! field_reassign_with_default {\n-    () => {\n-        #[derive(Default)]\n-        struct A {\n-            pub i: i32,\n-            pub j: i64,\n-        }\n-        fn lint() {\n-            let mut a: A = Default::default();\n-            a.i = 42;\n-            a;\n-        }\n-    };\n-}\n-\n-#[macro_export]\n-macro_rules! default_numeric_fallback {\n-    () => {\n-        let x = 22;\n-    };\n-}\n-\n #[macro_export]\n macro_rules! mut_mut {\n     () => {\n         let mut_mut_ty: &mut &mut u32 = &mut &mut 1u32;\n     };\n }\n-\n-#[macro_export]\n-macro_rules! ptr_as_ptr_cast {\n-    ($ptr: ident) => {\n-        $ptr as *const i32\n-    };\n-}\n-\n-#[macro_export]\n-macro_rules! manual_rem_euclid {\n-    () => {\n-        let value: i32 = 5;\n-        let _: i32 = ((value % 4) + 4) % 4;\n-    };\n-}\n-\n-#[macro_export]\n-macro_rules! equatable_if_let {\n-    ($a:ident) => {{ if let 2 = $a {} }};\n-}\n-\n-#[macro_export]\n-macro_rules! almost_complete_range {\n-    () => {\n-        let _ = 'a'..'z';\n-        let _ = 'A'..'Z';\n-        let _ = '0'..'9';\n-    };\n-}\n-\n-#[macro_export]\n-macro_rules! unsafe_macro {\n-    () => {\n-        unsafe {\n-            *core::ptr::null::<()>();\n-            *core::ptr::null::<()>();\n-        }\n-    };\n-}\n-\n-#[macro_export]\n-macro_rules! needless_lifetime {\n-    () => {\n-        fn needless_lifetime<'a>(x: &'a u8) -> &'a u8 {\n-            unimplemented!()\n-        }\n-    };\n-}"}, {"sha": "7ed8a28dbd935a91ad5b305f06f3b00f64532e57", "filename": "tests/ui/auxiliary/macro_use_helper.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fauxiliary%2Fmacro_use_helper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fauxiliary%2Fmacro_use_helper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Fmacro_use_helper.rs?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -13,7 +13,7 @@ pub mod inner {\n \n     // RE-EXPORT\n     // this will stick in `inner` module\n-    pub use macro_rules::foofoo;\n+    pub use macro_rules::mut_mut;\n     pub use macro_rules::try_err;\n \n     pub mod nested {"}, {"sha": "8ea631f2bbd420fd20795fde30cf81e1bd939d80", "filename": "tests/ui/auxiliary/proc_macro_with_span.rs", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b0e2e7bdb4d7441fc8fd4f56795377ab85c82252/tests%2Fui%2Fauxiliary%2Fproc_macro_with_span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0e2e7bdb4d7441fc8fd4f56795377ab85c82252/tests%2Fui%2Fauxiliary%2Fproc_macro_with_span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Fproc_macro_with_span.rs?ref=b0e2e7bdb4d7441fc8fd4f56795377ab85c82252", "patch": "@@ -1,32 +0,0 @@\n-// compile-flags: --emit=link\n-// no-prefer-dynamic\n-\n-#![crate_type = \"proc-macro\"]\n-\n-extern crate proc_macro;\n-\n-use proc_macro::{token_stream::IntoIter, Group, Span, TokenStream, TokenTree};\n-\n-#[proc_macro]\n-pub fn with_span(input: TokenStream) -> TokenStream {\n-    let mut iter = input.into_iter();\n-    let span = iter.next().unwrap().span();\n-    let mut res = TokenStream::new();\n-    write_with_span(span, iter, &mut res);\n-    res\n-}\n-\n-fn write_with_span(s: Span, input: IntoIter, out: &mut TokenStream) {\n-    for mut tt in input {\n-        if let TokenTree::Group(g) = tt {\n-            let mut stream = TokenStream::new();\n-            write_with_span(s, g.stream().into_iter(), &mut stream);\n-            let mut group = Group::new(g.delimiter(), stream);\n-            group.set_span(s);\n-            out.extend([TokenTree::Group(group)]);\n-        } else {\n-            tt.set_span(s);\n-            out.extend([tt]);\n-        }\n-    }\n-}"}, {"sha": "325be83a0d73d932520288dcb8fa0ab55e631060", "filename": "tests/ui/auxiliary/proc_macros.rs", "status": "added", "additions": 474, "deletions": 0, "changes": 474, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fauxiliary%2Fproc_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fauxiliary%2Fproc_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Fproc_macros.rs?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -0,0 +1,474 @@\n+// compile-flags: --emit=link\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+#![feature(let_chains)]\n+#![feature(proc_macro_span)]\n+#![allow(dead_code)]\n+\n+extern crate proc_macro;\n+\n+use core::mem;\n+use proc_macro::{\n+    token_stream::IntoIter,\n+    Delimiter::{self, Brace, Parenthesis},\n+    Group, Ident, Literal, Punct,\n+    Spacing::{self, Alone, Joint},\n+    Span, TokenStream, TokenTree as TT,\n+};\n+\n+type Result<T> = core::result::Result<T, TokenStream>;\n+\n+/// Make a `compile_error!` pointing to the given span.\n+fn make_error(msg: &str, span: Span) -> TokenStream {\n+    TokenStream::from_iter([\n+        TT::Ident(Ident::new(\"compile_error\", span)),\n+        TT::Punct(punct_with_span('!', Alone, span)),\n+        TT::Group({\n+            let mut msg = Literal::string(msg);\n+            msg.set_span(span);\n+            group_with_span(Parenthesis, TokenStream::from_iter([TT::Literal(msg)]), span)\n+        }),\n+    ])\n+}\n+\n+fn expect_tt<T>(tt: Option<TT>, f: impl FnOnce(TT) -> Option<T>, expected: &str, span: Span) -> Result<T> {\n+    match tt {\n+        None => Err(make_error(\n+            &format!(\"unexpected end of input, expected {expected}\"),\n+            span,\n+        )),\n+        Some(tt) => {\n+            let span = tt.span();\n+            match f(tt) {\n+                Some(x) => Ok(x),\n+                None => Err(make_error(&format!(\"unexpected token, expected {expected}\"), span)),\n+            }\n+        },\n+    }\n+}\n+\n+fn punct_with_span(c: char, spacing: Spacing, span: Span) -> Punct {\n+    let mut p = Punct::new(c, spacing);\n+    p.set_span(span);\n+    p\n+}\n+\n+fn group_with_span(delimiter: Delimiter, stream: TokenStream, span: Span) -> Group {\n+    let mut g = Group::new(delimiter, stream);\n+    g.set_span(span);\n+    g\n+}\n+\n+/// Token used to escape the following token from the macro's span rules.\n+const ESCAPE_CHAR: char = '$';\n+\n+/// Takes a single token followed by a sequence tokens. Returns the sequence of tokens with their\n+/// span set to that of the first token. Tokens may be escaped with either `#ident` or `#(tokens)`.\n+#[proc_macro]\n+pub fn with_span(input: TokenStream) -> TokenStream {\n+    let mut iter = input.into_iter();\n+    let span = iter.next().unwrap().span();\n+    let mut res = TokenStream::new();\n+    if let Err(e) = write_with_span(span, iter, &mut res) {\n+        e\n+    } else {\n+        res\n+    }\n+}\n+\n+/// Takes a sequence of tokens and return the tokens with the span set such that they appear to be\n+/// from an external macro. Tokens may be escaped with either `#ident` or `#(tokens)`.\n+#[proc_macro]\n+pub fn external(input: TokenStream) -> TokenStream {\n+    let mut res = TokenStream::new();\n+    if let Err(e) = write_with_span(Span::mixed_site(), input.into_iter(), &mut res) {\n+        e\n+    } else {\n+        res\n+    }\n+}\n+\n+/// Copies all the tokens, replacing all their spans with the given span. Tokens can be escaped\n+/// either by `#ident` or `#(tokens)`.\n+fn write_with_span(s: Span, mut input: IntoIter, out: &mut TokenStream) -> Result<()> {\n+    while let Some(tt) = input.next() {\n+        match tt {\n+            TT::Punct(p) if p.as_char() == ESCAPE_CHAR => {\n+                expect_tt(\n+                    input.next(),\n+                    |tt| match tt {\n+                        tt @ (TT::Ident(_) | TT::Literal(_)) => {\n+                            out.extend([tt]);\n+                            Some(())\n+                        },\n+                        TT::Punct(mut p) if p.as_char() == ESCAPE_CHAR => {\n+                            p.set_span(s);\n+                            out.extend([TT::Punct(p)]);\n+                            Some(())\n+                        },\n+                        TT::Group(g) if g.delimiter() == Parenthesis => {\n+                            out.extend([TT::Group(group_with_span(Delimiter::None, g.stream(), g.span()))]);\n+                            Some(())\n+                        },\n+                        _ => None,\n+                    },\n+                    \"an ident, a literal, or parenthesized tokens\",\n+                    p.span(),\n+                )?;\n+            },\n+            TT::Group(g) => {\n+                let mut stream = TokenStream::new();\n+                write_with_span(s, g.stream().into_iter(), &mut stream)?;\n+                out.extend([TT::Group(group_with_span(g.delimiter(), stream, s))]);\n+            },\n+            mut tt => {\n+                tt.set_span(s);\n+                out.extend([tt]);\n+            },\n+        }\n+    }\n+    Ok(())\n+}\n+\n+/// Within the item this attribute is attached to, an `inline!` macro is available which expands the\n+/// contained tokens as though they came from a macro expansion.\n+///\n+/// Within the `inline!` macro, any token preceded by `$` is passed as though it were an argument\n+/// with an automatically chosen fragment specifier. `$ident` will be passed as `ident`, `$1` or\n+/// `$\"literal\"` will be passed as `literal`, `$'lt` will be passed as `lifetime`, and `$(...)` will\n+/// pass the contained tokens as a `tt` sequence (the wrapping parenthesis are removed). If another\n+/// specifier is required it can be specified within parenthesis like `$(@expr ...)`. This will\n+/// expand the remaining tokens as a single argument.\n+///\n+/// Multiple `inline!` macros may be nested within each other. This will expand as nested macro\n+/// calls. However, any arguments will be passed as though they came from the outermost context.\n+#[proc_macro_attribute]\n+pub fn inline_macros(args: TokenStream, input: TokenStream) -> TokenStream {\n+    let mut args = args.into_iter();\n+    let mac_name = match args.next() {\n+        Some(TT::Ident(name)) => Some(name),\n+        Some(tt) => {\n+            return make_error(\n+                \"unexpected argument, expected either an ident or no arguments\",\n+                tt.span(),\n+            );\n+        },\n+        None => None,\n+    };\n+    if let Some(tt) = args.next() {\n+        return make_error(\n+            \"unexpected argument, expected either an ident or no arguments\",\n+            tt.span(),\n+        );\n+    };\n+\n+    let mac_name = if let Some(mac_name) = mac_name {\n+        Ident::new(&format!(\"__inline_mac_{mac_name}\"), Span::call_site())\n+    } else {\n+        let mut input = match LookaheadIter::new(input.clone().into_iter()) {\n+            Some(x) => x,\n+            None => return input,\n+        };\n+        loop {\n+            match input.next() {\n+                None => break Ident::new(\"__inline_mac\", Span::call_site()),\n+                Some(TT::Ident(kind)) => match &*kind.to_string() {\n+                    \"impl\" => break Ident::new(\"__inline_mac_impl\", Span::call_site()),\n+                    kind @ (\"struct\" | \"enum\" | \"union\" | \"fn\" | \"mod\" | \"trait\" | \"type\" | \"const\" | \"static\") => {\n+                        if let TT::Ident(name) = &input.tt {\n+                            break Ident::new(&format!(\"__inline_mac_{kind}_{name}\"), Span::call_site());\n+                        } else {\n+                            break Ident::new(&format!(\"__inline_mac_{kind}\"), Span::call_site());\n+                        }\n+                    },\n+                    _ => {},\n+                },\n+                _ => {},\n+            }\n+        }\n+    };\n+\n+    let mut expander = Expander::default();\n+    let mut mac = MacWriter::new(mac_name);\n+    if let Err(e) = expander.expand(input.into_iter(), &mut mac) {\n+        return e;\n+    }\n+    let mut out = TokenStream::new();\n+    mac.finish(&mut out);\n+    out.extend(expander.expn);\n+    out\n+}\n+\n+/// Wraps a `TokenStream` iterator with a single token lookahead.\n+struct LookaheadIter {\n+    tt: TT,\n+    iter: IntoIter,\n+}\n+impl LookaheadIter {\n+    fn new(mut iter: IntoIter) -> Option<Self> {\n+        iter.next().map(|tt| Self { tt, iter })\n+    }\n+\n+    /// Get's the lookahead token, replacing it with the next token in the stream.\n+    /// Note: If there isn't a next token, this will not return the lookahead token.\n+    fn next(&mut self) -> Option<TT> {\n+        self.iter.next().map(|tt| mem::replace(&mut self.tt, tt))\n+    }\n+}\n+\n+/// Builds the macro used to implement all the `inline!` macro calls.\n+struct MacWriter {\n+    name: Ident,\n+    macros: TokenStream,\n+    next_idx: usize,\n+}\n+impl MacWriter {\n+    fn new(name: Ident) -> Self {\n+        Self {\n+            name,\n+            macros: TokenStream::new(),\n+            next_idx: 0,\n+        }\n+    }\n+\n+    /// Inserts a new `inline!` call.\n+    fn insert(&mut self, name_span: Span, bang_span: Span, body: Group, expander: &mut Expander) -> Result<()> {\n+        let idx = self.next_idx;\n+        self.next_idx += 1;\n+\n+        let mut inner = Expander::for_arm(idx);\n+        inner.expand(body.stream().into_iter(), self)?;\n+        let new_arm = inner.arm.unwrap();\n+\n+        self.macros.extend([\n+            TT::Group(Group::new(Parenthesis, new_arm.args_def)),\n+            TT::Punct(Punct::new('=', Joint)),\n+            TT::Punct(Punct::new('>', Alone)),\n+            TT::Group(Group::new(Parenthesis, inner.expn)),\n+            TT::Punct(Punct::new(';', Alone)),\n+        ]);\n+\n+        expander.expn.extend([\n+            TT::Ident({\n+                let mut name = self.name.clone();\n+                name.set_span(name_span);\n+                name\n+            }),\n+            TT::Punct(punct_with_span('!', Alone, bang_span)),\n+        ]);\n+        let mut call_body = TokenStream::from_iter([TT::Literal(Literal::usize_unsuffixed(idx))]);\n+        if let Some(arm) = expander.arm.as_mut() {\n+            if !new_arm.args.is_empty() {\n+                arm.add_sub_args(new_arm.args, &mut call_body);\n+            }\n+        } else {\n+            call_body.extend(new_arm.args);\n+        }\n+        let mut g = Group::new(body.delimiter(), call_body);\n+        g.set_span(body.span());\n+        expander.expn.extend([TT::Group(g)]);\n+        Ok(())\n+    }\n+\n+    /// Creates the macro definition.\n+    fn finish(self, out: &mut TokenStream) {\n+        if self.next_idx != 0 {\n+            out.extend([\n+                TT::Ident(Ident::new(\"macro_rules\", Span::call_site())),\n+                TT::Punct(Punct::new('!', Alone)),\n+                TT::Ident(self.name),\n+                TT::Group(Group::new(Brace, self.macros)),\n+            ])\n+        }\n+    }\n+}\n+\n+struct MacroArm {\n+    args_def: TokenStream,\n+    args: Vec<TT>,\n+}\n+impl MacroArm {\n+    fn add_single_arg_def(&mut self, kind: &str, dollar_span: Span, arg_span: Span, out: &mut TokenStream) {\n+        let mut name = Ident::new(&format!(\"_{}\", self.args.len()), Span::call_site());\n+        self.args_def.extend([\n+            TT::Punct(Punct::new('$', Alone)),\n+            TT::Ident(name.clone()),\n+            TT::Punct(Punct::new(':', Alone)),\n+            TT::Ident(Ident::new(kind, Span::call_site())),\n+        ]);\n+        name.set_span(arg_span);\n+        out.extend([TT::Punct(punct_with_span('$', Alone, dollar_span)), TT::Ident(name)]);\n+    }\n+\n+    fn add_parenthesized_arg_def(&mut self, kind: Ident, dollar_span: Span, arg_span: Span, out: &mut TokenStream) {\n+        let mut name = Ident::new(&format!(\"_{}\", self.args.len()), Span::call_site());\n+        self.args_def.extend([TT::Group(Group::new(\n+            Parenthesis,\n+            TokenStream::from_iter([\n+                TT::Punct(Punct::new('$', Alone)),\n+                TT::Ident(name.clone()),\n+                TT::Punct(Punct::new(':', Alone)),\n+                TT::Ident(kind),\n+            ]),\n+        ))]);\n+        name.set_span(arg_span);\n+        out.extend([TT::Punct(punct_with_span('$', Alone, dollar_span)), TT::Ident(name)]);\n+    }\n+\n+    fn add_multi_arg_def(&mut self, dollar_span: Span, arg_span: Span, out: &mut TokenStream) {\n+        let mut name = Ident::new(&format!(\"_{}\", self.args.len()), Span::call_site());\n+        self.args_def.extend([TT::Group(Group::new(\n+            Parenthesis,\n+            TokenStream::from_iter([\n+                TT::Punct(Punct::new('$', Alone)),\n+                TT::Group(Group::new(\n+                    Parenthesis,\n+                    TokenStream::from_iter([\n+                        TT::Punct(Punct::new('$', Alone)),\n+                        TT::Ident(name.clone()),\n+                        TT::Punct(Punct::new(':', Alone)),\n+                        TT::Ident(Ident::new(\"tt\", Span::call_site())),\n+                    ]),\n+                )),\n+                TT::Punct(Punct::new('*', Alone)),\n+            ]),\n+        ))]);\n+        name.set_span(arg_span);\n+        out.extend([\n+            TT::Punct(punct_with_span('$', Alone, dollar_span)),\n+            TT::Group(group_with_span(\n+                Parenthesis,\n+                TokenStream::from_iter([TT::Punct(punct_with_span('$', Alone, dollar_span)), TT::Ident(name)]),\n+                dollar_span,\n+            )),\n+            TT::Punct(punct_with_span('*', Alone, dollar_span)),\n+        ]);\n+    }\n+\n+    fn add_arg(&mut self, dollar_span: Span, tt: TT, input: &mut IntoIter, out: &mut TokenStream) -> Result<()> {\n+        match tt {\n+            TT::Punct(p) if p.as_char() == ESCAPE_CHAR => out.extend([TT::Punct(p)]),\n+            TT::Punct(p) if p.as_char() == '\\'' && p.spacing() == Joint => {\n+                let lt_name = expect_tt(\n+                    input.next(),\n+                    |tt| match tt {\n+                        TT::Ident(x) => Some(x),\n+                        _ => None,\n+                    },\n+                    \"lifetime name\",\n+                    p.span(),\n+                )?;\n+                let arg_span = p.span().join(lt_name.span()).unwrap_or(p.span());\n+                self.add_single_arg_def(\"lifetime\", dollar_span, arg_span, out);\n+                self.args.extend([TT::Punct(p), TT::Ident(lt_name)]);\n+            },\n+            TT::Ident(x) => {\n+                self.add_single_arg_def(\"ident\", dollar_span, x.span(), out);\n+                self.args.push(TT::Ident(x));\n+            },\n+            TT::Literal(x) => {\n+                self.add_single_arg_def(\"literal\", dollar_span, x.span(), out);\n+                self.args.push(TT::Literal(x));\n+            },\n+            TT::Group(g) if g.delimiter() == Parenthesis => {\n+                let mut inner = g.stream().into_iter();\n+                if let Some(TT::Punct(p)) = inner.next()\n+                    && p.as_char() == '@'\n+                {\n+                    let kind = expect_tt(\n+                        inner.next(),\n+                        |tt| match tt {\n+                            TT::Ident(kind) => Some(kind),\n+                            _ => None,\n+                        },\n+                        \"a macro fragment specifier\",\n+                        p.span(),\n+                    )?;\n+                    self.add_parenthesized_arg_def(kind, dollar_span, g.span(), out);\n+                    self.args.push(TT::Group(group_with_span(Parenthesis, inner.collect(), g.span())))\n+                } else {\n+                    self.add_multi_arg_def(dollar_span, g.span(), out);\n+                    self.args.push(TT::Group(g));\n+                }\n+            },\n+            tt => return Err(make_error(\"unsupported escape\", tt.span())),\n+        };\n+        Ok(())\n+    }\n+\n+    fn add_sub_args(&mut self, args: Vec<TT>, out: &mut TokenStream) {\n+        self.add_multi_arg_def(Span::call_site(), Span::call_site(), out);\n+        self.args\n+            .extend([TT::Group(Group::new(Parenthesis, TokenStream::from_iter(args)))]);\n+    }\n+}\n+\n+#[derive(Default)]\n+struct Expander {\n+    arm: Option<MacroArm>,\n+    expn: TokenStream,\n+}\n+impl Expander {\n+    fn for_arm(idx: usize) -> Self {\n+        Self {\n+            arm: Some(MacroArm {\n+                args_def: TokenStream::from_iter([TT::Literal(Literal::usize_unsuffixed(idx))]),\n+                args: Vec::new(),\n+            }),\n+            expn: TokenStream::new(),\n+        }\n+    }\n+\n+    fn write_tt(&mut self, tt: TT, mac: &mut MacWriter) -> Result<()> {\n+        match tt {\n+            TT::Group(g) => {\n+                let outer = mem::take(&mut self.expn);\n+                self.expand(g.stream().into_iter(), mac)?;\n+                let inner = mem::replace(&mut self.expn, outer);\n+                self.expn\n+                    .extend([TT::Group(group_with_span(g.delimiter(), inner, g.span()))]);\n+            },\n+            tt => self.expn.extend([tt]),\n+        }\n+        Ok(())\n+    }\n+\n+    fn expand(&mut self, input: IntoIter, mac: &mut MacWriter) -> Result<()> {\n+        let Some(mut input) = LookaheadIter::new(input) else {\n+            return Ok(());\n+        };\n+        while let Some(tt) = input.next() {\n+            if let TT::Punct(p) = &tt\n+                && p.as_char() == ESCAPE_CHAR\n+                && let Some(arm) = self.arm.as_mut()\n+            {\n+                arm.add_arg(p.span(), mem::replace(&mut input.tt, tt), &mut input.iter, &mut self.expn)?;\n+                if input.next().is_none() {\n+                    return Ok(());\n+                }\n+            } else if let TT::Punct(p) = &input.tt\n+                && p.as_char() == '!'\n+                && let TT::Ident(name) = &tt\n+                && name.to_string() == \"inline\"\n+            {\n+                let g = expect_tt(\n+                    input.iter.next(),\n+                    |tt| match tt {\n+                        TT::Group(g) => Some(g),\n+                        _ => None,\n+                    },\n+                    \"macro arguments\",\n+                    p.span(),\n+                )?;\n+                mac.insert(name.span(), p.span(), g, self)?;\n+                if input.next().is_none() {\n+                    return Ok(());\n+                }\n+            } else {\n+                self.write_tt(tt, mac)?;\n+            }\n+        }\n+        self.write_tt(input.tt, mac)\n+    }\n+}"}, {"sha": "b03c21262c3bdfbb53321533c022604ae9ab5009", "filename": "tests/ui/borrow_interior_mutable_const/auxiliary/helper.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fborrow_interior_mutable_const%2Fauxiliary%2Fhelper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fborrow_interior_mutable_const%2Fauxiliary%2Fhelper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrow_interior_mutable_const%2Fauxiliary%2Fhelper.rs?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,5 +1,5 @@\n // this file solely exists to test constants defined in foreign crates.\n-// As the most common case is the `http` crate, it replicates `http::HeadewrName`'s structure.\n+// As the most common case is the `http` crate, it replicates `http::HeaderName`'s structure.\n \n #![allow(clippy::declare_interior_mutable_const)]\n #![allow(unused_tuple_struct_fields)]"}, {"sha": "1ab3570c907ce99c75929b1703e653bc06f8a851", "filename": "tests/ui/crashes/ice-10148.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fcrashes%2Fice-10148.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fcrashes%2Fice-10148.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-10148.rs?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,8 +1,8 @@\n-// aux-build:../../auxiliary/proc_macro_with_span.rs\n+// aux-build:../../auxiliary/proc_macros.rs\n \n-extern crate proc_macro_with_span;\n+extern crate proc_macros;\n \n-use proc_macro_with_span::with_span;\n+use proc_macros::with_span;\n \n fn main() {\n     println!(with_span!(\"\"something \"\"));"}, {"sha": "42c15d6a70b837ea66dac7b1998ce4de3b04e01c", "filename": "tests/ui/default_numeric_fallback_f64.fixed", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fdefault_numeric_fallback_f64.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fdefault_numeric_fallback_f64.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_numeric_fallback_f64.fixed?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-// aux-build:macro_rules.rs\n+// aux-build:proc_macros.rs\n \n #![warn(clippy::default_numeric_fallback)]\n #![allow(\n@@ -13,8 +13,8 @@\n     clippy::let_with_type_underscore\n )]\n \n-#[macro_use]\n-extern crate macro_rules;\n+extern crate proc_macros;\n+use proc_macros::{external, inline_macros};\n \n mod basic_expr {\n     fn test() {\n@@ -167,20 +167,17 @@ mod method_calls {\n }\n \n mod in_macro {\n-    macro_rules! internal_macro {\n-        () => {\n-            let x = 22.0_f64;\n-        };\n-    }\n+    use super::*;\n \n     // Should lint in internal macro.\n+    #[inline_macros]\n     fn internal() {\n-        internal_macro!();\n+        inline!(let x = 22.0_f64;);\n     }\n \n     // Should NOT lint in external macro.\n     fn external() {\n-        default_numeric_fallback!();\n+        external!(let x = 22.;);\n     }\n }\n "}, {"sha": "7da7ea254e98b4f95df55a9875f68e0664f54816", "filename": "tests/ui/default_numeric_fallback_f64.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fdefault_numeric_fallback_f64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fdefault_numeric_fallback_f64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_numeric_fallback_f64.rs?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-// aux-build:macro_rules.rs\n+// aux-build:proc_macros.rs\n \n #![warn(clippy::default_numeric_fallback)]\n #![allow(\n@@ -13,8 +13,8 @@\n     clippy::let_with_type_underscore\n )]\n \n-#[macro_use]\n-extern crate macro_rules;\n+extern crate proc_macros;\n+use proc_macros::{external, inline_macros};\n \n mod basic_expr {\n     fn test() {\n@@ -167,20 +167,17 @@ mod method_calls {\n }\n \n mod in_macro {\n-    macro_rules! internal_macro {\n-        () => {\n-            let x = 22.;\n-        };\n-    }\n+    use super::*;\n \n     // Should lint in internal macro.\n+    #[inline_macros]\n     fn internal() {\n-        internal_macro!();\n+        inline!(let x = 22.;);\n     }\n \n     // Should NOT lint in external macro.\n     fn external() {\n-        default_numeric_fallback!();\n+        external!(let x = 22.;);\n     }\n }\n "}, {"sha": "b949cd1d50b180b1e77e41b32ecbe7c88d40e38d", "filename": "tests/ui/default_numeric_fallback_f64.stderr", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fdefault_numeric_fallback_f64.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fdefault_numeric_fallback_f64.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_numeric_fallback_f64.stderr?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -139,15 +139,12 @@ LL |         s.generic_arg(1.);\n    |                       ^^ help: consider adding suffix: `1.0_f64`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_f64.rs:172:21\n+  --> $DIR/default_numeric_fallback_f64.rs:175:25\n    |\n-LL |             let x = 22.;\n-   |                     ^^^ help: consider adding suffix: `22.0_f64`\n-...\n-LL |         internal_macro!();\n-   |         ----------------- in this macro invocation\n+LL |         inline!(let x = 22.;);\n+   |                         ^^^ help: consider adding suffix: `22.0_f64`\n    |\n-   = note: this error originates in the macro `internal_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `__inline_mac_fn_internal` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 24 previous errors\n "}, {"sha": "b7485b73dcddd484f2f3626e7a005d05f92f0488", "filename": "tests/ui/default_numeric_fallback_i32.fixed", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fdefault_numeric_fallback_i32.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fdefault_numeric_fallback_i32.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_numeric_fallback_i32.fixed?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-// aux-build:macro_rules.rs\n+// aux-build:proc_macros.rs\n \n #![feature(lint_reasons)]\n #![warn(clippy::default_numeric_fallback)]\n@@ -13,8 +13,8 @@\n     clippy::let_with_type_underscore\n )]\n \n-#[macro_use]\n-extern crate macro_rules;\n+extern crate proc_macros;\n+use proc_macros::{external, inline_macros};\n \n mod basic_expr {\n     fn test() {\n@@ -168,20 +168,17 @@ mod method_calls {\n }\n \n mod in_macro {\n-    macro_rules! internal_macro {\n-        () => {\n-            let x = 22_i32;\n-        };\n-    }\n+    use super::*;\n \n     // Should lint in internal macro.\n+    #[inline_macros]\n     fn internal() {\n-        internal_macro!();\n+        inline!(let x = 22_i32;);\n     }\n \n     // Should NOT lint in external macro.\n     fn external() {\n-        default_numeric_fallback!();\n+        external!(let x = 22;);\n     }\n }\n "}, {"sha": "7307d31354ebdeae5d22cdb99358b6aaacd27783", "filename": "tests/ui/default_numeric_fallback_i32.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fdefault_numeric_fallback_i32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fdefault_numeric_fallback_i32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_numeric_fallback_i32.rs?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-// aux-build:macro_rules.rs\n+// aux-build:proc_macros.rs\n \n #![feature(lint_reasons)]\n #![warn(clippy::default_numeric_fallback)]\n@@ -13,8 +13,8 @@\n     clippy::let_with_type_underscore\n )]\n \n-#[macro_use]\n-extern crate macro_rules;\n+extern crate proc_macros;\n+use proc_macros::{external, inline_macros};\n \n mod basic_expr {\n     fn test() {\n@@ -168,20 +168,17 @@ mod method_calls {\n }\n \n mod in_macro {\n-    macro_rules! internal_macro {\n-        () => {\n-            let x = 22;\n-        };\n-    }\n+    use super::*;\n \n     // Should lint in internal macro.\n+    #[inline_macros]\n     fn internal() {\n-        internal_macro!();\n+        inline!(let x = 22;);\n     }\n \n     // Should NOT lint in external macro.\n     fn external() {\n-        default_numeric_fallback!();\n+        external!(let x = 22;);\n     }\n }\n "}, {"sha": "48cd28102ce4bb85169916a5a6515d904fecf87a", "filename": "tests/ui/default_numeric_fallback_i32.stderr", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fdefault_numeric_fallback_i32.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fdefault_numeric_fallback_i32.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_numeric_fallback_i32.stderr?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -151,15 +151,12 @@ LL |         s.generic_arg(1);\n    |                       ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:173:21\n+  --> $DIR/default_numeric_fallback_i32.rs:176:25\n    |\n-LL |             let x = 22;\n-   |                     ^^ help: consider adding suffix: `22_i32`\n-...\n-LL |         internal_macro!();\n-   |         ----------------- in this macro invocation\n+LL |         inline!(let x = 22;);\n+   |                         ^^ help: consider adding suffix: `22_i32`\n    |\n-   = note: this error originates in the macro `internal_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `__inline_mac_fn_internal` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 26 previous errors\n "}, {"sha": "7842ef3ec40c2577ec3d834f8179b058644c0112", "filename": "tests/ui/default_trait_access.fixed", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fdefault_trait_access.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fdefault_trait_access.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_trait_access.fixed?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,12 +1,12 @@\n // run-rustfix\n-// aux-build: proc_macro_with_span.rs\n+// aux-build: proc_macros.rs\n #![deny(clippy::default_trait_access)]\n #![allow(dead_code, unused_imports)]\n #![allow(clippy::uninlined_format_args)]\n \n-extern crate proc_macro_with_span;\n+extern crate proc_macros;\n \n-use proc_macro_with_span::with_span;\n+use proc_macros::with_span;\n use std::default;\n use std::default::Default as D2;\n use std::string;"}, {"sha": "cbb3e59c970ebb7831765de28fb441889b719a05", "filename": "tests/ui/default_trait_access.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fdefault_trait_access.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fdefault_trait_access.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_trait_access.rs?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,12 +1,12 @@\n // run-rustfix\n-// aux-build: proc_macro_with_span.rs\n+// aux-build: proc_macros.rs\n #![deny(clippy::default_trait_access)]\n #![allow(dead_code, unused_imports)]\n #![allow(clippy::uninlined_format_args)]\n \n-extern crate proc_macro_with_span;\n+extern crate proc_macros;\n \n-use proc_macro_with_span::with_span;\n+use proc_macros::with_span;\n use std::default;\n use std::default::Default as D2;\n use std::string;"}, {"sha": "ca5c03304c7f29992ef3dc83cf557ec9fe83d46f", "filename": "tests/ui/deref_addrof.fixed", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fderef_addrof.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fderef_addrof.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderef_addrof.fixed?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,7 +1,12 @@\n // run-rustfix\n+// aux-build:proc_macros.rs\n+\n #![allow(clippy::return_self_not_must_use)]\n #![warn(clippy::deref_addrof)]\n \n+extern crate proc_macros;\n+use proc_macros::inline_macros;\n+\n fn get_number() -> usize {\n     10\n }\n@@ -41,28 +46,15 @@ fn main() {\n     let _ = unsafe { *core::ptr::addr_of!(a) };\n }\n \n-#[rustfmt::skip]\n-macro_rules! m {\n-    ($visitor: expr) => {\n-        $visitor\n-    };\n-}\n-\n-#[rustfmt::skip]\n-macro_rules! m_mut {\n-    ($visitor: expr) => {\n-        $visitor\n-    };\n-}\n-\n #[derive(Copy, Clone)]\n pub struct S;\n+#[inline_macros]\n impl S {\n     pub fn f(&self) -> &Self {\n-        m!(self)\n+        inline!($(@expr self))\n     }\n     #[allow(unused_mut)] // mut will be unused, once the macro is fixed\n     pub fn f_mut(mut self) -> Self {\n-        m_mut!(self)\n+        inline!($(@expr self))\n     }\n }"}, {"sha": "3db5fafe94499f97c256c7f370941150d26ac79f", "filename": "tests/ui/deref_addrof.rs", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fderef_addrof.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fderef_addrof.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderef_addrof.rs?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,7 +1,12 @@\n // run-rustfix\n+// aux-build:proc_macros.rs\n+\n #![allow(clippy::return_self_not_must_use)]\n #![warn(clippy::deref_addrof)]\n \n+extern crate proc_macros;\n+use proc_macros::inline_macros;\n+\n fn get_number() -> usize {\n     10\n }\n@@ -41,28 +46,15 @@ fn main() {\n     let _ = unsafe { *core::ptr::addr_of!(a) };\n }\n \n-#[rustfmt::skip]\n-macro_rules! m {\n-    ($visitor: expr) => {\n-        *& $visitor\n-    };\n-}\n-\n-#[rustfmt::skip]\n-macro_rules! m_mut {\n-    ($visitor: expr) => {\n-        *& mut $visitor\n-    };\n-}\n-\n #[derive(Copy, Clone)]\n pub struct S;\n+#[inline_macros]\n impl S {\n     pub fn f(&self) -> &Self {\n-        m!(self)\n+        inline!(*& $(@expr self))\n     }\n     #[allow(unused_mut)] // mut will be unused, once the macro is fixed\n     pub fn f_mut(mut self) -> Self {\n-        m_mut!(self)\n+        inline!(*&mut $(@expr self))\n     }\n }"}, {"sha": "e0287522fc56fa8c35834cb8ec8568fb39da1e12", "filename": "tests/ui/deref_addrof.stderr", "status": "modified", "additions": 16, "deletions": 22, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fderef_addrof.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fderef_addrof.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderef_addrof.stderr?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,74 +1,68 @@\n error: immediately dereferencing a reference\n-  --> $DIR/deref_addrof.rs:19:13\n+  --> $DIR/deref_addrof.rs:24:13\n    |\n LL |     let b = *&a;\n    |             ^^^ help: try this: `a`\n    |\n    = note: `-D clippy::deref-addrof` implied by `-D warnings`\n \n error: immediately dereferencing a reference\n-  --> $DIR/deref_addrof.rs:21:13\n+  --> $DIR/deref_addrof.rs:26:13\n    |\n LL |     let b = *&get_number();\n    |             ^^^^^^^^^^^^^^ help: try this: `get_number()`\n \n error: immediately dereferencing a reference\n-  --> $DIR/deref_addrof.rs:26:13\n+  --> $DIR/deref_addrof.rs:31:13\n    |\n LL |     let b = *&bytes[1..2][0];\n    |             ^^^^^^^^^^^^^^^^ help: try this: `bytes[1..2][0]`\n \n error: immediately dereferencing a reference\n-  --> $DIR/deref_addrof.rs:30:13\n+  --> $DIR/deref_addrof.rs:35:13\n    |\n LL |     let b = *&(a);\n    |             ^^^^^ help: try this: `(a)`\n \n error: immediately dereferencing a reference\n-  --> $DIR/deref_addrof.rs:32:13\n+  --> $DIR/deref_addrof.rs:37:13\n    |\n LL |     let b = *(&a);\n    |             ^^^^^ help: try this: `a`\n \n error: immediately dereferencing a reference\n-  --> $DIR/deref_addrof.rs:35:13\n+  --> $DIR/deref_addrof.rs:40:13\n    |\n LL |     let b = *((&a));\n    |             ^^^^^^^ help: try this: `a`\n \n error: immediately dereferencing a reference\n-  --> $DIR/deref_addrof.rs:37:13\n+  --> $DIR/deref_addrof.rs:42:13\n    |\n LL |     let b = *&&a;\n    |             ^^^^ help: try this: `&a`\n \n error: immediately dereferencing a reference\n-  --> $DIR/deref_addrof.rs:39:14\n+  --> $DIR/deref_addrof.rs:44:14\n    |\n LL |     let b = **&aref;\n    |              ^^^^^^ help: try this: `aref`\n \n error: immediately dereferencing a reference\n-  --> $DIR/deref_addrof.rs:47:9\n+  --> $DIR/deref_addrof.rs:54:17\n    |\n-LL |         *& $visitor\n-   |         ^^^^^^^^^^^ help: try this: `$visitor`\n-...\n-LL |         m!(self)\n-   |         -------- in this macro invocation\n+LL |         inline!(*& $(@expr self))\n+   |                 ^^^^^^^^^^^^^^^^ help: try this: `$(@expr self)`\n    |\n-   = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `__inline_mac_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: immediately dereferencing a reference\n-  --> $DIR/deref_addrof.rs:54:9\n+  --> $DIR/deref_addrof.rs:58:17\n    |\n-LL |         *& mut $visitor\n-   |         ^^^^^^^^^^^^^^^ help: try this: `$visitor`\n-...\n-LL |         m_mut!(self)\n-   |         ------------ in this macro invocation\n+LL |         inline!(*&mut $(@expr self))\n+   |                 ^^^^^^^^^^^^^^^^^^^ help: try this: `$(@expr self)`\n    |\n-   = note: this error originates in the macro `m_mut` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `__inline_mac_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 10 previous errors\n "}, {"sha": "57c0be3f51e1bed7146497199406647f7ac59220", "filename": "tests/ui/deref_addrof_macro.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fderef_addrof_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fderef_addrof_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderef_addrof_macro.rs?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,10 +1,13 @@\n-macro_rules! m {\n-    ($($x:tt),*) => { &[$(($x, stringify!(x)),)*] };\n-}\n+// aux-build:proc_macros.rs\n+\n+#![warn(clippy::deref_addrof)]\n+\n+extern crate proc_macros;\n \n-#[warn(clippy::deref_addrof)]\n-fn f() -> [(i32, &'static str); 3] {\n-    *m![1, 2, 3] // should be fine\n+#[proc_macros::inline_macros]\n+fn f() -> i32 {\n+    // should be fine\n+    *inline!(&$1)\n }\n \n fn main() {}"}, {"sha": "30674ce3708e741ec4f6646e3c9f89504dce831f", "filename": "tests/ui/doc_unsafe.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fdoc_unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fdoc_unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc_unsafe.rs?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,9 +1,9 @@\n-// aux-build:doc_unsafe_macros.rs\n+// aux-build:proc_macros.rs\n \n #![allow(clippy::let_unit_value)]\n \n-#[macro_use]\n-extern crate doc_unsafe_macros;\n+extern crate proc_macros;\n+use proc_macros::external;\n \n /// This is not sufficiently documented\n pub unsafe fn destroy_the_planet() {\n@@ -105,7 +105,11 @@ macro_rules! very_unsafe {\n very_unsafe!();\n \n // we don't lint code from external macros\n-undocd_unsafe!();\n+external! {\n+    pub unsafe fn oy_vey() {\n+        unimplemented!();\n+    }\n+}\n \n fn main() {\n     unsafe {"}, {"sha": "6a8e6b550c13f0395b355c71f56b1e170a768064", "filename": "tests/ui/empty_loop.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fempty_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fempty_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fempty_loop.rs?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,9 +1,9 @@\n-// aux-build:macro_rules.rs\n+// aux-build:proc_macros.rs\n \n #![warn(clippy::empty_loop)]\n \n-#[macro_use]\n-extern crate macro_rules;\n+extern crate proc_macros;\n+use proc_macros::{external, inline_macros};\n \n fn should_trigger() {\n     loop {}\n@@ -16,6 +16,7 @@ fn should_trigger() {\n     }\n }\n \n+#[inline_macros]\n fn should_not_trigger() {\n     loop {\n         panic!(\"This is fine\")\n@@ -38,14 +39,10 @@ fn should_not_trigger() {\n     loop {}\n \n     // We don't lint loops inside macros\n-    macro_rules! foo {\n-        () => {\n-            loop {}\n-        };\n-    }\n+    inline!(loop {});\n \n     // We don't lint external macros\n-    foofoo!()\n+    external!(loop {});\n }\n \n fn main() {}"}, {"sha": "007702ab550bf13b7793c8c5ac12daf0ece11b6d", "filename": "tests/ui/equatable_if_let.fixed", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fequatable_if_let.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fequatable_if_let.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fequatable_if_let.fixed?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,11 +1,11 @@\n // run-rustfix\n-// aux-build:macro_rules.rs\n+// aux-build:proc_macros.rs\n \n #![allow(unused_variables, dead_code, clippy::derive_partial_eq_without_eq)]\n #![warn(clippy::equatable_if_let)]\n \n-#[macro_use]\n-extern crate macro_rules;\n+extern crate proc_macros;\n+use proc_macros::{external, inline_macros};\n \n use std::cmp::Ordering;\n \n@@ -44,6 +44,7 @@ impl PartialEq for NotStructuralEq {\n     }\n }\n \n+#[inline_macros]\n fn main() {\n     let a = 2;\n     let b = 3;\n@@ -78,14 +79,9 @@ fn main() {\n     if Some(g) == Some(NotStructuralEq::A) {}\n     if matches!(h, NoPartialEqStruct { a: 2, b: false }) {}\n \n-    macro_rules! m1 {\n-        (x) => {\n-            \"abc\"\n-        };\n-    }\n-    if \"abc\" == m1!(x) {\n+    if \"abc\" == inline!(\"abc\") {\n         println!(\"OK\");\n     }\n \n-    equatable_if_let!(a);\n+    external!({ if let 2 = $a {} });\n }"}, {"sha": "3bda7977645b3308151efa8c3d7c41e39b22faf5", "filename": "tests/ui/equatable_if_let.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fequatable_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fequatable_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fequatable_if_let.rs?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,11 +1,11 @@\n // run-rustfix\n-// aux-build:macro_rules.rs\n+// aux-build:proc_macros.rs\n \n #![allow(unused_variables, dead_code, clippy::derive_partial_eq_without_eq)]\n #![warn(clippy::equatable_if_let)]\n \n-#[macro_use]\n-extern crate macro_rules;\n+extern crate proc_macros;\n+use proc_macros::{external, inline_macros};\n \n use std::cmp::Ordering;\n \n@@ -44,6 +44,7 @@ impl PartialEq for NotStructuralEq {\n     }\n }\n \n+#[inline_macros]\n fn main() {\n     let a = 2;\n     let b = 3;\n@@ -78,14 +79,9 @@ fn main() {\n     if let Some(NotStructuralEq::A) = Some(g) {}\n     if let NoPartialEqStruct { a: 2, b: false } = h {}\n \n-    macro_rules! m1 {\n-        (x) => {\n-            \"abc\"\n-        };\n-    }\n-    if let m1!(x) = \"abc\" {\n+    if let inline!(\"abc\") = \"abc\" {\n         println!(\"OK\");\n     }\n \n-    equatable_if_let!(a);\n+    external!({ if let 2 = $a {} });\n }"}, {"sha": "a72d87bb7ba96f3cfd424fea8add153ad7a0a5be", "filename": "tests/ui/equatable_if_let.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fequatable_if_let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fequatable_if_let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fequatable_if_let.stderr?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,88 +1,88 @@\n error: this pattern matching can be expressed using equality\n-  --> $DIR/equatable_if_let.rs:59:8\n+  --> $DIR/equatable_if_let.rs:60:8\n    |\n LL |     if let 2 = a {}\n    |        ^^^^^^^^^ help: try: `a == 2`\n    |\n    = note: `-D clippy::equatable-if-let` implied by `-D warnings`\n \n error: this pattern matching can be expressed using equality\n-  --> $DIR/equatable_if_let.rs:60:8\n+  --> $DIR/equatable_if_let.rs:61:8\n    |\n LL |     if let Ordering::Greater = a.cmp(&b) {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `a.cmp(&b) == Ordering::Greater`\n \n error: this pattern matching can be expressed using equality\n-  --> $DIR/equatable_if_let.rs:61:8\n+  --> $DIR/equatable_if_let.rs:62:8\n    |\n LL |     if let Some(2) = c {}\n    |        ^^^^^^^^^^^^^^^ help: try: `c == Some(2)`\n \n error: this pattern matching can be expressed using equality\n-  --> $DIR/equatable_if_let.rs:62:8\n+  --> $DIR/equatable_if_let.rs:63:8\n    |\n LL |     if let Struct { a: 2, b: false } = d {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `d == (Struct { a: 2, b: false })`\n \n error: this pattern matching can be expressed using equality\n-  --> $DIR/equatable_if_let.rs:63:8\n+  --> $DIR/equatable_if_let.rs:64:8\n    |\n LL |     if let Enum::TupleVariant(32, 64) = e {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `e == Enum::TupleVariant(32, 64)`\n \n error: this pattern matching can be expressed using equality\n-  --> $DIR/equatable_if_let.rs:64:8\n+  --> $DIR/equatable_if_let.rs:65:8\n    |\n LL |     if let Enum::RecordVariant { a: 64, b: 32 } = e {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `e == (Enum::RecordVariant { a: 64, b: 32 })`\n \n error: this pattern matching can be expressed using equality\n-  --> $DIR/equatable_if_let.rs:65:8\n+  --> $DIR/equatable_if_let.rs:66:8\n    |\n LL |     if let Enum::UnitVariant = e {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `e == Enum::UnitVariant`\n \n error: this pattern matching can be expressed using equality\n-  --> $DIR/equatable_if_let.rs:66:8\n+  --> $DIR/equatable_if_let.rs:67:8\n    |\n LL |     if let (Enum::UnitVariant, &Struct { a: 2, b: false }) = (e, &d) {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `(e, &d) == (Enum::UnitVariant, &Struct { a: 2, b: false })`\n \n error: this pattern matching can be expressed using `matches!`\n-  --> $DIR/equatable_if_let.rs:75:8\n+  --> $DIR/equatable_if_let.rs:76:8\n    |\n LL |     if let NotPartialEq::A = f {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `matches!(f, NotPartialEq::A)`\n \n error: this pattern matching can be expressed using equality\n-  --> $DIR/equatable_if_let.rs:76:8\n+  --> $DIR/equatable_if_let.rs:77:8\n    |\n LL |     if let NotStructuralEq::A = g {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `g == NotStructuralEq::A`\n \n error: this pattern matching can be expressed using `matches!`\n-  --> $DIR/equatable_if_let.rs:77:8\n+  --> $DIR/equatable_if_let.rs:78:8\n    |\n LL |     if let Some(NotPartialEq::A) = Some(f) {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `matches!(Some(f), Some(NotPartialEq::A))`\n \n error: this pattern matching can be expressed using equality\n-  --> $DIR/equatable_if_let.rs:78:8\n+  --> $DIR/equatable_if_let.rs:79:8\n    |\n LL |     if let Some(NotStructuralEq::A) = Some(g) {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Some(g) == Some(NotStructuralEq::A)`\n \n error: this pattern matching can be expressed using `matches!`\n-  --> $DIR/equatable_if_let.rs:79:8\n+  --> $DIR/equatable_if_let.rs:80:8\n    |\n LL |     if let NoPartialEqStruct { a: 2, b: false } = h {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `matches!(h, NoPartialEqStruct { a: 2, b: false })`\n \n error: this pattern matching can be expressed using equality\n-  --> $DIR/equatable_if_let.rs:86:8\n+  --> $DIR/equatable_if_let.rs:82:8\n    |\n-LL |     if let m1!(x) = \"abc\" {\n-   |        ^^^^^^^^^^^^^^^^^^ help: try: `\"abc\" == m1!(x)`\n+LL |     if let inline!(\"abc\") = \"abc\" {\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `\"abc\" == inline!(\"abc\")`\n \n error: aborting due to 14 previous errors\n "}, {"sha": "0e208b3ed0e15fa0a4ac080df92b7c7430ff3155", "filename": "tests/ui/field_reassign_with_default.rs", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Ffield_reassign_with_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Ffield_reassign_with_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffield_reassign_with_default.rs?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,12 +1,12 @@\n // aux-build:proc_macro_derive.rs\n-// aux-build:macro_rules.rs\n+// aux-build:proc_macros.rs\n \n #![warn(clippy::field_reassign_with_default)]\n \n #[macro_use]\n extern crate proc_macro_derive;\n-#[macro_use]\n-extern crate macro_rules;\n+extern crate proc_macros;\n+use proc_macros::{external, inline_macros};\n \n // Don't lint on derives that derive `Default`\n // See https://github.com/rust-lang/rust-clippy/issues/6545\n@@ -36,14 +36,6 @@ struct D {\n     b: Option<i32>,\n }\n \n-macro_rules! m {\n-    ($key:ident: $value:tt) => {{\n-        let mut data = $crate::D::default();\n-        data.$key = Some($value);\n-        data\n-    }};\n-}\n-\n /// Implements .next() that returns a different number each time.\n struct SideEffect(i32);\n \n@@ -57,6 +49,7 @@ impl SideEffect {\n     }\n }\n \n+#[inline_macros]\n fn main() {\n     // wrong, produces first error in stderr\n     let mut a: A = Default::default();\n@@ -150,7 +143,18 @@ fn main() {\n     a.i = vec![1];\n \n     // Don't lint in external macros\n-    field_reassign_with_default!();\n+    external! {\n+        #[derive(Default)]\n+        struct A {\n+            pub i: i32,\n+            pub j: i64,\n+        }\n+        fn lint() {\n+            let mut a: A = Default::default();\n+            a.i = 42;\n+            a;\n+        }\n+    }\n \n     // be sure suggestion is correct with generics\n     let mut a: Wrapper<bool> = Default::default();\n@@ -160,9 +164,11 @@ fn main() {\n     a.i = 42;\n \n     // Don't lint in macros\n-    m! {\n-        a: 42\n-    };\n+    inline!(\n+        let mut data = $crate::D::default();\n+        data.$a = Some($42);\n+        data\n+    );\n }\n \n mod m {"}, {"sha": "da74f9ef9f7eebc4e77f5fb5723c95cb9bc0c229", "filename": "tests/ui/field_reassign_with_default.stderr", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Ffield_reassign_with_default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Ffield_reassign_with_default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffield_reassign_with_default.stderr?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,132 +1,132 @@\n error: field assignment outside of initializer for an instance created with Default::default()\n-  --> $DIR/field_reassign_with_default.rs:63:5\n+  --> $DIR/field_reassign_with_default.rs:56:5\n    |\n LL |     a.i = 42;\n    |     ^^^^^^^^^\n    |\n note: consider initializing the variable with `main::A { i: 42, ..Default::default() }` and removing relevant reassignments\n-  --> $DIR/field_reassign_with_default.rs:62:5\n+  --> $DIR/field_reassign_with_default.rs:55:5\n    |\n LL |     let mut a: A = Default::default();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: `-D clippy::field-reassign-with-default` implied by `-D warnings`\n \n error: field assignment outside of initializer for an instance created with Default::default()\n-  --> $DIR/field_reassign_with_default.rs:103:5\n+  --> $DIR/field_reassign_with_default.rs:96:5\n    |\n LL |     a.j = 43;\n    |     ^^^^^^^^^\n    |\n note: consider initializing the variable with `main::A { j: 43, i: 42 }` and removing relevant reassignments\n-  --> $DIR/field_reassign_with_default.rs:102:5\n+  --> $DIR/field_reassign_with_default.rs:95:5\n    |\n LL |     let mut a: A = Default::default();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: field assignment outside of initializer for an instance created with Default::default()\n-  --> $DIR/field_reassign_with_default.rs:108:5\n+  --> $DIR/field_reassign_with_default.rs:101:5\n    |\n LL |     a.i = 42;\n    |     ^^^^^^^^^\n    |\n note: consider initializing the variable with `main::A { i: 42, j: 44 }` and removing relevant reassignments\n-  --> $DIR/field_reassign_with_default.rs:107:5\n+  --> $DIR/field_reassign_with_default.rs:100:5\n    |\n LL |     let mut a: A = Default::default();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: field assignment outside of initializer for an instance created with Default::default()\n-  --> $DIR/field_reassign_with_default.rs:114:5\n+  --> $DIR/field_reassign_with_default.rs:107:5\n    |\n LL |     a.i = 42;\n    |     ^^^^^^^^^\n    |\n note: consider initializing the variable with `main::A { i: 42, ..Default::default() }` and removing relevant reassignments\n-  --> $DIR/field_reassign_with_default.rs:113:5\n+  --> $DIR/field_reassign_with_default.rs:106:5\n    |\n LL |     let mut a = A::default();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: field assignment outside of initializer for an instance created with Default::default()\n-  --> $DIR/field_reassign_with_default.rs:124:5\n+  --> $DIR/field_reassign_with_default.rs:117:5\n    |\n LL |     a.i = Default::default();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: consider initializing the variable with `main::A { i: Default::default(), ..Default::default() }` and removing relevant reassignments\n-  --> $DIR/field_reassign_with_default.rs:123:5\n+  --> $DIR/field_reassign_with_default.rs:116:5\n    |\n LL |     let mut a: A = Default::default();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: field assignment outside of initializer for an instance created with Default::default()\n-  --> $DIR/field_reassign_with_default.rs:128:5\n+  --> $DIR/field_reassign_with_default.rs:121:5\n    |\n LL |     a.i = Default::default();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: consider initializing the variable with `main::A { i: Default::default(), j: 45 }` and removing relevant reassignments\n-  --> $DIR/field_reassign_with_default.rs:127:5\n+  --> $DIR/field_reassign_with_default.rs:120:5\n    |\n LL |     let mut a: A = Default::default();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: field assignment outside of initializer for an instance created with Default::default()\n-  --> $DIR/field_reassign_with_default.rs:150:5\n+  --> $DIR/field_reassign_with_default.rs:143:5\n    |\n LL |     a.i = vec![1];\n    |     ^^^^^^^^^^^^^^\n    |\n note: consider initializing the variable with `C { i: vec![1], ..Default::default() }` and removing relevant reassignments\n-  --> $DIR/field_reassign_with_default.rs:149:5\n+  --> $DIR/field_reassign_with_default.rs:142:5\n    |\n LL |     let mut a: C = C::default();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: field assignment outside of initializer for an instance created with Default::default()\n-  --> $DIR/field_reassign_with_default.rs:157:5\n+  --> $DIR/field_reassign_with_default.rs:161:5\n    |\n LL |     a.i = true;\n    |     ^^^^^^^^^^^\n    |\n note: consider initializing the variable with `Wrapper::<bool> { i: true }` and removing relevant reassignments\n-  --> $DIR/field_reassign_with_default.rs:156:5\n+  --> $DIR/field_reassign_with_default.rs:160:5\n    |\n LL |     let mut a: Wrapper<bool> = Default::default();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: field assignment outside of initializer for an instance created with Default::default()\n-  --> $DIR/field_reassign_with_default.rs:160:5\n+  --> $DIR/field_reassign_with_default.rs:164:5\n    |\n LL |     a.i = 42;\n    |     ^^^^^^^^^\n    |\n note: consider initializing the variable with `WrapperMulti::<i32, i64> { i: 42, ..Default::default() }` and removing relevant reassignments\n-  --> $DIR/field_reassign_with_default.rs:159:5\n+  --> $DIR/field_reassign_with_default.rs:163:5\n    |\n LL |     let mut a: WrapperMulti<i32, i64> = Default::default();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: field assignment outside of initializer for an instance created with Default::default()\n-  --> $DIR/field_reassign_with_default.rs:229:13\n+  --> $DIR/field_reassign_with_default.rs:235:13\n    |\n LL |             f.name = name.len();\n    |             ^^^^^^^^^^^^^^^^^^^^\n    |\n note: consider initializing the variable with `issue6312::ImplDropAllCopy { name: name.len(), ..Default::default() }` and removing relevant reassignments\n-  --> $DIR/field_reassign_with_default.rs:228:13\n+  --> $DIR/field_reassign_with_default.rs:234:13\n    |\n LL |             let mut f = ImplDropAllCopy::default();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: field assignment outside of initializer for an instance created with Default::default()\n-  --> $DIR/field_reassign_with_default.rs:245:13\n+  --> $DIR/field_reassign_with_default.rs:251:13\n    |\n LL |             f.name = name.len();\n    |             ^^^^^^^^^^^^^^^^^^^^\n    |\n note: consider initializing the variable with `issue6312::NoDropAllCopy { name: name.len(), ..Default::default() }` and removing relevant reassignments\n-  --> $DIR/field_reassign_with_default.rs:244:13\n+  --> $DIR/field_reassign_with_default.rs:250:13\n    |\n LL |             let mut f = NoDropAllCopy::default();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "35d08a07bc3fe6ea70bec4490a34075444b5fdc6", "filename": "tests/ui/implicit_hasher.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fimplicit_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fimplicit_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_hasher.rs?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,9 +1,11 @@\n-// aux-build:implicit_hasher_macros.rs\n+// aux-build:proc_macros.rs\n+\n #![deny(clippy::implicit_hasher)]\n #![allow(unused)]\n \n #[macro_use]\n-extern crate implicit_hasher_macros;\n+extern crate proc_macros;\n+use proc_macros::external;\n \n use std::cmp::Eq;\n use std::collections::{HashMap, HashSet};\n@@ -68,22 +70,19 @@ impl<S: BuildHasher + Default> Foo<i64> for HashSet<String, S> {\n \n pub fn foo(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>) {}\n \n-macro_rules! gen {\n-    (impl) => {\n+#[proc_macros::inline_macros]\n+pub mod gen {\n+    use super::*;\n+    inline! {\n         impl<K: Hash + Eq, V> Foo<u8> for HashMap<K, V> {\n             fn make() -> (Self, Self) {\n                 (HashMap::new(), HashMap::with_capacity(10))\n             }\n         }\n-    };\n \n-    (fn $name:ident) => {\n-        pub fn $name(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>) {}\n-    };\n+        pub fn bar(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>) {}\n+    }\n }\n-#[rustfmt::skip]\n-gen!(impl);\n-gen!(fn bar);\n \n // When the macro is in a different file, the suggestion spans can't be combined properly\n // and should not cause an ICE\n@@ -94,7 +93,9 @@ pub mod test_macro;\n __implicit_hasher_test_macro!(impl<K, V> for HashMap<K, V> where V: test_macro::A);\n \n // #4260\n-implicit_hasher_fn!();\n+external! {\n+    pub fn f(input: &HashMap<u32, u32>) {}\n+}\n \n // #7712\n pub async fn election_vote(_data: HashMap<i32, i32>) {}"}, {"sha": "83b46de2eb5e322b412e3c1004e06c1ede443ecc", "filename": "tests/ui/implicit_hasher.stderr", "status": "modified", "additions": 23, "deletions": 32, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fimplicit_hasher.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fimplicit_hasher.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_hasher.stderr?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,11 +1,11 @@\n error: impl for `HashMap` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:16:35\n+  --> $DIR/implicit_hasher.rs:18:35\n    |\n LL | impl<K: Hash + Eq, V> Foo<i8> for HashMap<K, V> {\n    |                                   ^^^^^^^^^^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/implicit_hasher.rs:2:9\n+  --> $DIR/implicit_hasher.rs:3:9\n    |\n LL | #![deny(clippy::implicit_hasher)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -19,7 +19,7 @@ LL |         (HashMap::default(), HashMap::with_capacity_and_hasher(10, Default:\n    |          ~~~~~~~~~~~~~~~~~~  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: impl for `HashMap` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:25:36\n+  --> $DIR/implicit_hasher.rs:27:36\n    |\n LL | impl<K: Hash + Eq, V> Foo<i8> for (HashMap<K, V>,) {\n    |                                    ^^^^^^^^^^^^^\n@@ -34,7 +34,7 @@ LL |         ((HashMap::default(),), (HashMap::with_capacity_and_hasher(10, Defa\n    |           ~~~~~~~~~~~~~~~~~~     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: impl for `HashMap` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:30:19\n+  --> $DIR/implicit_hasher.rs:32:19\n    |\n LL | impl Foo<i16> for HashMap<String, String> {\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -49,7 +49,7 @@ LL |         (HashMap::default(), HashMap::with_capacity_and_hasher(10, Default:\n    |          ~~~~~~~~~~~~~~~~~~  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: impl for `HashSet` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:47:32\n+  --> $DIR/implicit_hasher.rs:49:32\n    |\n LL | impl<T: Hash + Eq> Foo<i8> for HashSet<T> {\n    |                                ^^^^^^^^^^\n@@ -64,7 +64,7 @@ LL |         (HashSet::default(), HashSet::with_capacity_and_hasher(10, Default:\n    |          ~~~~~~~~~~~~~~~~~~  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: impl for `HashSet` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:52:19\n+  --> $DIR/implicit_hasher.rs:54:19\n    |\n LL | impl Foo<i16> for HashSet<String> {\n    |                   ^^^^^^^^^^^^^^^\n@@ -79,7 +79,7 @@ LL |         (HashSet::default(), HashSet::with_capacity_and_hasher(10, Default:\n    |          ~~~~~~~~~~~~~~~~~~  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: parameter of type `HashMap` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:69:23\n+  --> $DIR/implicit_hasher.rs:71:23\n    |\n LL | pub fn foo(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>) {}\n    |                       ^^^^^^^^^^^^^^^^^\n@@ -90,7 +90,7 @@ LL | pub fn foo<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i32, S>, _s\n    |           +++++++++++++++++++++++++++++            ~~~~~~~~~~~~~~~~~~~~\n \n error: parameter of type `HashSet` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:69:53\n+  --> $DIR/implicit_hasher.rs:71:53\n    |\n LL | pub fn foo(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>) {}\n    |                                                     ^^^^^^^^^^^^\n@@ -101,15 +101,12 @@ LL | pub fn foo<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i32>, _set:\n    |           +++++++++++++++++++++++++++++                                          ~~~~~~~~~~~~~~~\n \n error: impl for `HashMap` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:73:43\n+  --> $DIR/implicit_hasher.rs:77:43\n    |\n LL |         impl<K: Hash + Eq, V> Foo<u8> for HashMap<K, V> {\n    |                                           ^^^^^^^^^^^^^\n-...\n-LL | gen!(impl);\n-   | ---------- in this macro invocation\n    |\n-   = note: this error originates in the macro `gen` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `__inline_mac_mod_gen` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider adding a type parameter\n    |\n LL |         impl<K: Hash + Eq, V, S: ::std::hash::BuildHasher + Default> Foo<u8> for HashMap<K, V, S> {\n@@ -120,37 +117,31 @@ LL |                 (HashMap::default(), HashMap::with_capacity_and_hasher(10,\n    |                  ~~~~~~~~~~~~~~~~~~  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: parameter of type `HashMap` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:81:33\n+  --> $DIR/implicit_hasher.rs:83:31\n    |\n-LL |         pub fn $name(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>) {}\n-   |                                 ^^^^^^^^^^^^^^^^^\n-...\n-LL | gen!(fn bar);\n-   | ------------ in this macro invocation\n+LL |         pub fn bar(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>) {}\n+   |                               ^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in the macro `gen` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `__inline_mac_mod_gen` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider adding a type parameter\n    |\n-LL |         pub fn $name<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i32, S>, _set: &mut HashSet<i32>) {}\n-   |                     +++++++++++++++++++++++++++++            ~~~~~~~~~~~~~~~~~~~~\n+LL |         pub fn bar<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i32, S>, _set: &mut HashSet<i32>) {}\n+   |                   +++++++++++++++++++++++++++++            ~~~~~~~~~~~~~~~~~~~~\n \n error: parameter of type `HashSet` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:81:63\n+  --> $DIR/implicit_hasher.rs:83:61\n    |\n-LL |         pub fn $name(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>) {}\n-   |                                                               ^^^^^^^^^^^^\n-...\n-LL | gen!(fn bar);\n-   | ------------ in this macro invocation\n+LL |         pub fn bar(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>) {}\n+   |                                                             ^^^^^^^^^^^^\n    |\n-   = note: this error originates in the macro `gen` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `__inline_mac_mod_gen` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider adding a type parameter\n    |\n-LL |         pub fn $name<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32, S>) {}\n-   |                     +++++++++++++++++++++++++++++                                          ~~~~~~~~~~~~~~~\n+LL |         pub fn bar<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32, S>) {}\n+   |                   +++++++++++++++++++++++++++++                                          ~~~~~~~~~~~~~~~\n \n error: parameter of type `HashMap` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:100:35\n+  --> $DIR/implicit_hasher.rs:101:35\n    |\n LL | pub async fn election_vote(_data: HashMap<i32, i32>) {}\n    |                                   ^^^^^^^^^^^^^^^^^"}, {"sha": "5aaa00f85172408d2ad539c27a95cd45cdfda50c", "filename": "tests/ui/inconsistent_struct_constructor.fixed", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Finconsistent_struct_constructor.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Finconsistent_struct_constructor.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finconsistent_struct_constructor.fixed?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,29 +1,25 @@\n // run-rustfix\n+// aux-build:proc_macros.rs\n+\n #![warn(clippy::inconsistent_struct_constructor)]\n #![allow(clippy::redundant_field_names)]\n #![allow(clippy::unnecessary_operation)]\n #![allow(clippy::no_effect)]\n #![allow(dead_code)]\n \n+extern crate proc_macros;\n+\n #[derive(Default)]\n struct Foo {\n     x: i32,\n     y: i32,\n     z: i32,\n }\n \n-macro_rules! new_foo {\n-    () => {\n-        let x = 1;\n-        let y = 1;\n-        let z = 1;\n-        Foo { y, x, z }\n-    };\n-}\n-\n mod without_base {\n     use super::Foo;\n \n+    #[proc_macros::inline_macros]\n     fn test() {\n         let x = 1;\n         let y = 1;\n@@ -34,7 +30,12 @@ mod without_base {\n \n         // Should NOT lint.\n         // issue #7069.\n-        new_foo!();\n+        inline!({\n+            let x = 1;\n+            let y = 1;\n+            let z = 1;\n+            Foo { y, x, z }\n+        });\n \n         // Should NOT lint because the order is the same as in the definition.\n         Foo { x, y, z };"}, {"sha": "2b2dd7f59a4dab71dbf3962027434b9d4bf4b49d", "filename": "tests/ui/inconsistent_struct_constructor.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Finconsistent_struct_constructor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Finconsistent_struct_constructor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finconsistent_struct_constructor.rs?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,29 +1,25 @@\n // run-rustfix\n+// aux-build:proc_macros.rs\n+\n #![warn(clippy::inconsistent_struct_constructor)]\n #![allow(clippy::redundant_field_names)]\n #![allow(clippy::unnecessary_operation)]\n #![allow(clippy::no_effect)]\n #![allow(dead_code)]\n \n+extern crate proc_macros;\n+\n #[derive(Default)]\n struct Foo {\n     x: i32,\n     y: i32,\n     z: i32,\n }\n \n-macro_rules! new_foo {\n-    () => {\n-        let x = 1;\n-        let y = 1;\n-        let z = 1;\n-        Foo { y, x, z }\n-    };\n-}\n-\n mod without_base {\n     use super::Foo;\n \n+    #[proc_macros::inline_macros]\n     fn test() {\n         let x = 1;\n         let y = 1;\n@@ -34,7 +30,12 @@ mod without_base {\n \n         // Should NOT lint.\n         // issue #7069.\n-        new_foo!();\n+        inline!({\n+            let x = 1;\n+            let y = 1;\n+            let z = 1;\n+            Foo { y, x, z }\n+        });\n \n         // Should NOT lint because the order is the same as in the definition.\n         Foo { x, y, z };"}, {"sha": "785a6dc9d53adc21c81d78481f767890afe7dee7", "filename": "tests/ui/inconsistent_struct_constructor.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Finconsistent_struct_constructor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Finconsistent_struct_constructor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finconsistent_struct_constructor.stderr?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,13 +1,13 @@\n error: struct constructor field order is inconsistent with struct definition field order\n-  --> $DIR/inconsistent_struct_constructor.rs:33:9\n+  --> $DIR/inconsistent_struct_constructor.rs:29:9\n    |\n LL |         Foo { y, x, z };\n    |         ^^^^^^^^^^^^^^^ help: try: `Foo { x, y, z }`\n    |\n    = note: `-D clippy::inconsistent-struct-constructor` implied by `-D warnings`\n \n error: struct constructor field order is inconsistent with struct definition field order\n-  --> $DIR/inconsistent_struct_constructor.rs:55:9\n+  --> $DIR/inconsistent_struct_constructor.rs:56:9\n    |\n LL | /         Foo {\n LL | |             z,"}, {"sha": "f09f8ae0ccc35eb40f7bf4ae4168c81af5116df6", "filename": "tests/ui/large_enum_variant.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_enum_variant.rs?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,11 +1,11 @@\n-// aux-build:macro_rules.rs\n+// aux-build:proc_macros.rs\n \n #![allow(dead_code)]\n #![allow(unused_variables)]\n #![warn(clippy::large_enum_variant)]\n \n-#[macro_use]\n-extern crate macro_rules;\n+extern crate proc_macros;\n+use proc_macros::external;\n \n enum LargeEnum {\n     A(i32),\n@@ -155,5 +155,10 @@ enum LargeEnumOfConst {\n }\n \n fn main() {\n-    large_enum_variant!();\n+    external!(\n+        enum LargeEnumInMacro {\n+            A(i32),\n+            B([i32; 8000]),\n+        }\n+    );\n }"}, {"sha": "15f7a099a7de5834ea8ce111d5eb0f2a492d259f", "filename": "tests/ui/macro_use_imports.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fmacro_use_imports.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fmacro_use_imports.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacro_use_imports.fixed?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -20,7 +20,7 @@ mod a {\n     use mac;\n     use mini_mac::ClippyMiniMacroTest;\n     use mini_mac;\n-    use mac::{inner::foofoo, inner::try_err};\n+    use mac::{inner::mut_mut, inner::try_err};\n     use mac::inner;\n     use mac::inner::nested::string_add;\n     use mac::inner::nested;\n@@ -36,7 +36,7 @@ mod a {\n         let v: ty_macro!() = Vec::default();\n \n         inner::try_err!();\n-        inner::foofoo!();\n+        inner::mut_mut!();\n         nested::string_add!();\n     }\n }"}, {"sha": "b1a287332949019d7b13fe8ca22740a50cae3522", "filename": "tests/ui/macro_use_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fmacro_use_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fmacro_use_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacro_use_imports.rs?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -36,7 +36,7 @@ mod a {\n         let v: ty_macro!() = Vec::default();\n \n         inner::try_err!();\n-        inner::foofoo!();\n+        inner::mut_mut!();\n         nested::string_add!();\n     }\n }"}, {"sha": "68d558dede054ec7039fa7056eddaba2718886b9", "filename": "tests/ui/macro_use_imports.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fmacro_use_imports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fmacro_use_imports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacro_use_imports.stderr?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -16,7 +16,7 @@ error: `macro_use` attributes are no longer needed in the Rust 2018 edition\n   --> $DIR/macro_use_imports.rs:23:5\n    |\n LL |     #[macro_use]\n-   |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mac::{inner::foofoo, inner::try_err};`\n+   |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mac::{inner::mut_mut, inner::try_err};`\n \n error: `macro_use` attributes are no longer needed in the Rust 2018 edition\n   --> $DIR/macro_use_imports.rs:19:5"}, {"sha": "5aac5af26db566228d997f8ef3080927c1e461ff", "filename": "tests/ui/macro_use_imports_expect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fmacro_use_imports_expect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fmacro_use_imports_expect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacro_use_imports_expect.rs?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -39,7 +39,7 @@ mod a {\n         let v: ty_macro!() = Vec::default();\n \n         inner::try_err!();\n-        inner::foofoo!();\n+        inner::mut_mut!();\n         nested::string_add!();\n     }\n }"}, {"sha": "1f6df1b0a86549318fab4113f9a9eefab781cc42", "filename": "tests/ui/manual_rem_euclid.fixed", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fmanual_rem_euclid.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fmanual_rem_euclid.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_rem_euclid.fixed?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,19 +1,13 @@\n // run-rustfix\n-// aux-build:macro_rules.rs\n+// aux-build:proc_macros.rs\n \n #![warn(clippy::manual_rem_euclid)]\n #![allow(clippy::let_with_type_underscore)]\n \n-#[macro_use]\n-extern crate macro_rules;\n-\n-macro_rules! internal_rem_euclid {\n-    () => {\n-        let value: i32 = 5;\n-        let _: i32 = value.rem_euclid(4);\n-    };\n-}\n+extern crate proc_macros;\n+use proc_macros::{external, inline_macros};\n \n+#[inline_macros]\n fn main() {\n     let value: i32 = 5;\n \n@@ -39,10 +33,16 @@ fn main() {\n     let _: i32 = ((4 % value) + 4) % 4;\n \n     // Lint in internal macros\n-    internal_rem_euclid!();\n+    inline!(\n+        let value: i32 = 5;\n+        let _: i32 = value.rem_euclid(4);\n+    );\n \n     // Do not lint in external macros\n-    manual_rem_euclid!();\n+    external!(\n+        let value: i32 = 5;\n+        let _: i32 = ((value % 4) + 4) % 4;\n+    );\n }\n \n // Should lint for params too"}, {"sha": "b275e8a38d21e540f2ac7a02e6720e9ff943180f", "filename": "tests/ui/manual_rem_euclid.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fmanual_rem_euclid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fmanual_rem_euclid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_rem_euclid.rs?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,19 +1,13 @@\n // run-rustfix\n-// aux-build:macro_rules.rs\n+// aux-build:proc_macros.rs\n \n #![warn(clippy::manual_rem_euclid)]\n #![allow(clippy::let_with_type_underscore)]\n \n-#[macro_use]\n-extern crate macro_rules;\n-\n-macro_rules! internal_rem_euclid {\n-    () => {\n-        let value: i32 = 5;\n-        let _: i32 = ((value % 4) + 4) % 4;\n-    };\n-}\n+extern crate proc_macros;\n+use proc_macros::{external, inline_macros};\n \n+#[inline_macros]\n fn main() {\n     let value: i32 = 5;\n \n@@ -39,10 +33,16 @@ fn main() {\n     let _: i32 = ((4 % value) + 4) % 4;\n \n     // Lint in internal macros\n-    internal_rem_euclid!();\n+    inline!(\n+        let value: i32 = 5;\n+        let _: i32 = ((value % 4) + 4) % 4;\n+    );\n \n     // Do not lint in external macros\n-    manual_rem_euclid!();\n+    external!(\n+        let value: i32 = 5;\n+        let _: i32 = ((value % 4) + 4) % 4;\n+    );\n }\n \n // Should lint for params too"}, {"sha": "a43707f89c49e69765da409cd423e1ac16690ce9", "filename": "tests/ui/manual_rem_euclid.stderr", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fmanual_rem_euclid.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fmanual_rem_euclid.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_rem_euclid.stderr?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,45 +1,42 @@\n error: manual `rem_euclid` implementation\n-  --> $DIR/manual_rem_euclid.rs:20:18\n+  --> $DIR/manual_rem_euclid.rs:14:18\n    |\n LL |     let _: i32 = ((value % 4) + 4) % 4;\n    |                  ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `value.rem_euclid(4)`\n    |\n    = note: `-D clippy::manual-rem-euclid` implied by `-D warnings`\n \n error: manual `rem_euclid` implementation\n-  --> $DIR/manual_rem_euclid.rs:21:18\n+  --> $DIR/manual_rem_euclid.rs:15:18\n    |\n LL |     let _: i32 = (4 + (value % 4)) % 4;\n    |                  ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `value.rem_euclid(4)`\n \n error: manual `rem_euclid` implementation\n-  --> $DIR/manual_rem_euclid.rs:22:18\n+  --> $DIR/manual_rem_euclid.rs:16:18\n    |\n LL |     let _: i32 = (value % 4 + 4) % 4;\n    |                  ^^^^^^^^^^^^^^^^^^^ help: consider using: `value.rem_euclid(4)`\n \n error: manual `rem_euclid` implementation\n-  --> $DIR/manual_rem_euclid.rs:23:18\n+  --> $DIR/manual_rem_euclid.rs:17:18\n    |\n LL |     let _: i32 = (4 + value % 4) % 4;\n    |                  ^^^^^^^^^^^^^^^^^^^ help: consider using: `value.rem_euclid(4)`\n \n error: manual `rem_euclid` implementation\n-  --> $DIR/manual_rem_euclid.rs:24:22\n+  --> $DIR/manual_rem_euclid.rs:18:22\n    |\n LL |     let _: i32 = 1 + (4 + value % 4) % 4;\n    |                      ^^^^^^^^^^^^^^^^^^^ help: consider using: `value.rem_euclid(4)`\n \n error: manual `rem_euclid` implementation\n-  --> $DIR/manual_rem_euclid.rs:13:22\n+  --> $DIR/manual_rem_euclid.rs:38:22\n    |\n LL |         let _: i32 = ((value % 4) + 4) % 4;\n    |                      ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `value.rem_euclid(4)`\n-...\n-LL |     internal_rem_euclid!();\n-   |     ---------------------- in this macro invocation\n    |\n-   = note: this error originates in the macro `internal_rem_euclid` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `__inline_mac_fn_main` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: manual `rem_euclid` implementation\n   --> $DIR/manual_rem_euclid.rs:50:5"}, {"sha": "3932e7d00c19dd09b8b3c0e078cac0ad38ec20c6", "filename": "tests/ui/mem_replace_macro.rs", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fmem_replace_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fmem_replace_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_replace_macro.rs?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,21 +1,12 @@\n-// aux-build:macro_rules.rs\n+// aux-build:proc_macros.rs\n #![warn(clippy::mem_replace_with_default)]\n \n-#[macro_use]\n-extern crate macro_rules;\n-\n-macro_rules! take {\n-    ($s:expr) => {\n-        std::mem::replace($s, Default::default())\n-    };\n-}\n-\n-fn replace_with_default() {\n-    let s = &mut String::from(\"foo\");\n-    take!(s);\n-    take_external!(s);\n-}\n+extern crate proc_macros;\n+use proc_macros::{external, inline_macros};\n \n+#[inline_macros]\n fn main() {\n-    replace_with_default();\n+    let s = &mut String::from(\"foo\");\n+    inline!(std::mem::replace($s, Default::default()));\n+    external!(std::mem::replace($s, Default::default()));\n }"}, {"sha": "35dda93da3d03d9ecc28b482bd2f26fbbe213dd3", "filename": "tests/ui/mem_replace_macro.stderr", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fmem_replace_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fmem_replace_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_replace_macro.stderr?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,14 +1,11 @@\n error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n-  --> $DIR/mem_replace_macro.rs:9:9\n+  --> $DIR/mem_replace_macro.rs:10:13\n    |\n-LL |         std::mem::replace($s, Default::default())\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-...\n-LL |     take!(s);\n-   |     -------- in this macro invocation\n+LL |     inline!(std::mem::replace($s, Default::default()));\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::mem-replace-with-default` implied by `-D warnings`\n-   = note: this error originates in the macro `take` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `__inline_mac_fn_main` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "e6f88c6e622cbd968db481d445d276478e894e84", "filename": "tests/ui/missing_const_for_fn/cant_be_const.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.rs?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -3,15 +3,15 @@\n //! The .stderr output of this test should be empty. Otherwise it's a bug somewhere.\n \n // aux-build:helper.rs\n-// aux-build:../../auxiliary/proc_macro_with_span.rs\n+// aux-build:../../auxiliary/proc_macros.rs\n \n #![warn(clippy::missing_const_for_fn)]\n #![feature(start)]\n \n extern crate helper;\n-extern crate proc_macro_with_span;\n+extern crate proc_macros;\n \n-use proc_macro_with_span::with_span;\n+use proc_macros::with_span;\n \n struct Game;\n "}, {"sha": "5752048949ca452d820a72a511b246dae3ee27dd", "filename": "tests/ui/missing_doc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_doc.rs?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,5 +1,5 @@\n // needs-asm-support\n-// aux-build: proc_macro_with_span.rs\n+// aux-build: proc_macros.rs\n \n #![warn(clippy::missing_docs_in_private_items)]\n // When denying at the crate level, be sure to not get random warnings from the\n@@ -8,9 +8,9 @@\n //! Some garbage docs for the crate here\n #![doc = \"More garbage\"]\n \n-extern crate proc_macro_with_span;\n+extern crate proc_macros;\n \n-use proc_macro_with_span::with_span;\n+use proc_macros::with_span;\n use std::arch::global_asm;\n \n type Typedef = String;"}, {"sha": "e2d49b0907d5792d4b6d67932e9152b2a0f17f43", "filename": "tests/ui/missing_doc_impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fmissing_doc_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fmissing_doc_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_doc_impl.rs?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,4 +1,4 @@\n-// aux-build: proc_macro_with_span.rs\n+// aux-build: proc_macros.rs\n \n #![warn(clippy::missing_docs_in_private_items)]\n #![allow(dead_code)]\n@@ -7,8 +7,8 @@\n //! Some garbage docs for the crate here\n #![doc = \"More garbage\"]\n \n-extern crate proc_macro_with_span;\n-use proc_macro_with_span::with_span;\n+extern crate proc_macros;\n+use proc_macros::with_span;\n \n struct Foo {\n     a: isize,"}, {"sha": "9a47d7c56ed1e410715e6878050c7706e14e9a48", "filename": "tests/ui/mistyped_literal_suffix.fixed", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fmistyped_literal_suffix.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fmistyped_literal_suffix.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmistyped_literal_suffix.fixed?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-// aux-build: proc_macro_with_span.rs\n+// aux-build: proc_macros.rs\n \n #![allow(\n     dead_code,\n@@ -10,8 +10,8 @@\n     clippy::unusual_byte_groupings\n )]\n \n-extern crate proc_macro_with_span;\n-use proc_macro_with_span::with_span;\n+extern crate proc_macros;\n+use proc_macros::with_span;\n \n fn main() {\n     let fail14 = 2_i32;"}, {"sha": "04261cba55aa4d1bf1d5fd12fa24778a27b57fb7", "filename": "tests/ui/mistyped_literal_suffix.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fmistyped_literal_suffix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fmistyped_literal_suffix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmistyped_literal_suffix.rs?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-// aux-build: proc_macro_with_span.rs\n+// aux-build: proc_macros.rs\n \n #![allow(\n     dead_code,\n@@ -10,8 +10,8 @@\n     clippy::unusual_byte_groupings\n )]\n \n-extern crate proc_macro_with_span;\n-use proc_macro_with_span::with_span;\n+extern crate proc_macros;\n+use proc_macros::with_span;\n \n fn main() {\n     let fail14 = 2_32;"}, {"sha": "9082f1675a8759cf8eac494ca09adaa1eae1a79f", "filename": "tests/ui/multiple_unsafe_ops_per_block.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fmultiple_unsafe_ops_per_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fmultiple_unsafe_ops_per_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmultiple_unsafe_ops_per_block.rs?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,12 +1,12 @@\n-// aux-build:macro_rules.rs\n+// aux-build:proc_macros.rs\n #![allow(unused)]\n #![allow(deref_nullptr)]\n #![allow(clippy::unnecessary_operation)]\n #![allow(clippy::drop_copy)]\n #![warn(clippy::multiple_unsafe_ops_per_block)]\n \n-#[macro_use]\n-extern crate macro_rules;\n+extern crate proc_macros;\n+use proc_macros::external;\n \n use core::arch::asm;\n \n@@ -113,7 +113,10 @@ unsafe fn read_char_good(ptr: *const u8) -> char {\n \n // no lint\n fn issue10259() {\n-    unsafe_macro!();\n+    external!(unsafe {\n+        *core::ptr::null::<()>();\n+        *core::ptr::null::<()>();\n+    });\n }\n \n fn _fn_ptr(x: unsafe fn()) {"}, {"sha": "badc284ec423e9b61b59efcbc31040f35822be2e", "filename": "tests/ui/multiple_unsafe_ops_per_block.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fmultiple_unsafe_ops_per_block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fmultiple_unsafe_ops_per_block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmultiple_unsafe_ops_per_block.stderr?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -126,7 +126,7 @@ LL |     unsafe { char::from_u32_unchecked(*ptr.cast::<u32>()) }\n    |                                       ^^^^^^^^^^^^^^^^^^\n \n error: this `unsafe` block contains 2 unsafe operations, expected only one\n-  --> $DIR/multiple_unsafe_ops_per_block.rs:120:5\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:123:5\n    |\n LL | /     unsafe {\n LL | |         x();\n@@ -135,18 +135,18 @@ LL | |     }\n    | |_____^\n    |\n note: unsafe function call occurs here\n-  --> $DIR/multiple_unsafe_ops_per_block.rs:121:9\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:124:9\n    |\n LL |         x();\n    |         ^^^\n note: unsafe function call occurs here\n-  --> $DIR/multiple_unsafe_ops_per_block.rs:122:9\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:125:9\n    |\n LL |         x();\n    |         ^^^\n \n error: this `unsafe` block contains 2 unsafe operations, expected only one\n-  --> $DIR/multiple_unsafe_ops_per_block.rs:131:9\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:134:9\n    |\n LL | /         unsafe {\n LL | |             T::X();\n@@ -155,18 +155,18 @@ LL | |         }\n    | |_________^\n    |\n note: unsafe function call occurs here\n-  --> $DIR/multiple_unsafe_ops_per_block.rs:132:13\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:135:13\n    |\n LL |             T::X();\n    |             ^^^^^^\n note: unsafe function call occurs here\n-  --> $DIR/multiple_unsafe_ops_per_block.rs:133:13\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:136:13\n    |\n LL |             T::X();\n    |             ^^^^^^\n \n error: this `unsafe` block contains 2 unsafe operations, expected only one\n-  --> $DIR/multiple_unsafe_ops_per_block.rs:141:5\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:144:5\n    |\n LL | /     unsafe {\n LL | |         x.0();\n@@ -175,12 +175,12 @@ LL | |     }\n    | |_____^\n    |\n note: unsafe function call occurs here\n-  --> $DIR/multiple_unsafe_ops_per_block.rs:142:9\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:145:9\n    |\n LL |         x.0();\n    |         ^^^^^\n note: unsafe function call occurs here\n-  --> $DIR/multiple_unsafe_ops_per_block.rs:143:9\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:146:9\n    |\n LL |         x.0();\n    |         ^^^^^"}, {"sha": "b7d375ff80e117d2e864ce337f81d605262e0372", "filename": "tests/ui/must_use_unit.fixed", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fmust_use_unit.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fmust_use_unit.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmust_use_unit.fixed?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,11 +1,11 @@\n //run-rustfix\n-// aux-build:macro_rules.rs\n+// aux-build:proc_macros.rs\n \n #![warn(clippy::must_use_unit)]\n #![allow(clippy::unused_unit)]\n \n-#[macro_use]\n-extern crate macro_rules;\n+extern crate proc_macros;\n+use proc_macros::external;\n \n \n pub fn must_use_default() {}\n@@ -22,5 +22,8 @@ fn main() {\n     must_use_with_note();\n \n     // We should not lint in external macros\n-    must_use_unit!();\n+    external!(\n+        #[must_use]\n+        fn foo() {}\n+    );\n }"}, {"sha": "74d6b4ca865cde4fe83e48784024dff269f3cf9b", "filename": "tests/ui/must_use_unit.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fmust_use_unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fmust_use_unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmust_use_unit.rs?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,11 +1,11 @@\n //run-rustfix\n-// aux-build:macro_rules.rs\n+// aux-build:proc_macros.rs\n \n #![warn(clippy::must_use_unit)]\n #![allow(clippy::unused_unit)]\n \n-#[macro_use]\n-extern crate macro_rules;\n+extern crate proc_macros;\n+use proc_macros::external;\n \n #[must_use]\n pub fn must_use_default() {}\n@@ -22,5 +22,8 @@ fn main() {\n     must_use_with_note();\n \n     // We should not lint in external macros\n-    must_use_unit!();\n+    external!(\n+        #[must_use]\n+        fn foo() {}\n+    );\n }"}, {"sha": "06bb085442a793b328f8887a99bfc7d8519e8444", "filename": "tests/ui/mut_mut.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_mut.rs?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,10 +1,10 @@\n-// aux-build:macro_rules.rs\n+// aux-build:proc_macros.rs\n #![warn(clippy::mut_mut)]\n #![allow(unused)]\n #![allow(clippy::no_effect, clippy::uninlined_format_args, clippy::unnecessary_operation)]\n \n-#[macro_use]\n-extern crate macro_rules;\n+extern crate proc_macros;\n+use proc_macros::{external, inline_macros};\n \n fn fun(x: &mut &mut u32) -> bool {\n     **x > 0\n@@ -21,6 +21,7 @@ macro_rules! mut_ptr {\n }\n \n #[allow(unused_mut, unused_variables)]\n+#[inline_macros]\n fn main() {\n     let mut x = &mut &mut 1u32;\n     {\n@@ -37,7 +38,7 @@ fn main() {\n         ***y + **x;\n     }\n \n-    let mut z = mut_ptr!(&mut 3u32);\n+    let mut z = inline!(&mut $(&mut 3u32));\n }\n \n fn issue939() {\n@@ -55,7 +56,7 @@ fn issue939() {\n \n fn issue6922() {\n     // do not lint from an external macro\n-    mut_mut!();\n+    external!(let mut_mut_ty: &mut &mut u32 = &mut &mut 1u32;);\n }\n \n mod issue9035 {"}, {"sha": "93b857eb207480398c4e6494dd1a52458063b6fa", "filename": "tests/ui/mut_mut.stderr", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fmut_mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fmut_mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_mut.stderr?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -7,54 +7,51 @@ LL | fn fun(x: &mut &mut u32) -> bool {\n    = note: `-D clippy::mut-mut` implied by `-D warnings`\n \n error: generally you want to avoid `&mut &mut _` if possible\n-  --> $DIR/mut_mut.rs:25:17\n+  --> $DIR/mut_mut.rs:26:17\n    |\n LL |     let mut x = &mut &mut 1u32;\n    |                 ^^^^^^^^^^^^^^\n \n error: generally you want to avoid `&mut &mut _` if possible\n-  --> $DIR/mut_mut.rs:19:9\n+  --> $DIR/mut_mut.rs:41:25\n    |\n-LL |         &mut $p\n-   |         ^^^^^^^\n-...\n-LL |     let mut z = mut_ptr!(&mut 3u32);\n-   |                 ------------------- in this macro invocation\n+LL |     let mut z = inline!(&mut $(&mut 3u32));\n+   |                         ^\n    |\n-   = note: this error originates in the macro `mut_ptr` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `__inline_mac_fn_main` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: this expression mutably borrows a mutable reference. Consider reborrowing\n-  --> $DIR/mut_mut.rs:27:21\n+  --> $DIR/mut_mut.rs:28:21\n    |\n LL |         let mut y = &mut x;\n    |                     ^^^^^^\n \n error: generally you want to avoid `&mut &mut _` if possible\n-  --> $DIR/mut_mut.rs:31:32\n+  --> $DIR/mut_mut.rs:32:32\n    |\n LL |         let y: &mut &mut u32 = &mut &mut 2;\n    |                                ^^^^^^^^^^^\n \n error: generally you want to avoid `&mut &mut _` if possible\n-  --> $DIR/mut_mut.rs:31:16\n+  --> $DIR/mut_mut.rs:32:16\n    |\n LL |         let y: &mut &mut u32 = &mut &mut 2;\n    |                ^^^^^^^^^^^^^\n \n error: generally you want to avoid `&mut &mut _` if possible\n-  --> $DIR/mut_mut.rs:36:37\n+  --> $DIR/mut_mut.rs:37:37\n    |\n LL |         let y: &mut &mut &mut u32 = &mut &mut &mut 2;\n    |                                     ^^^^^^^^^^^^^^^^\n \n error: generally you want to avoid `&mut &mut _` if possible\n-  --> $DIR/mut_mut.rs:36:16\n+  --> $DIR/mut_mut.rs:37:16\n    |\n LL |         let y: &mut &mut &mut u32 = &mut &mut &mut 2;\n    |                ^^^^^^^^^^^^^^^^^^\n \n error: generally you want to avoid `&mut &mut _` if possible\n-  --> $DIR/mut_mut.rs:36:21\n+  --> $DIR/mut_mut.rs:37:21\n    |\n LL |         let y: &mut &mut &mut u32 = &mut &mut &mut 2;\n    |                     ^^^^^^^^^^^^^"}, {"sha": "86d899bb46c361bc2856f1ffc18c24249470d2ea", "filename": "tests/ui/needless_late_init.fixed", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fneedless_late_init.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fneedless_late_init.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_late_init.fixed?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,4 +1,5 @@\n // run-rustfix\n+// aux-build:proc_macros.rs\n #![feature(let_chains)]\n #![allow(unused)]\n #![allow(\n@@ -10,6 +11,8 @@\n     clippy::uninlined_format_args\n )]\n \n+extern crate proc_macros;\n+\n use std::collections::{BTreeMap, BTreeSet, HashMap, HashSet};\n use std::rc::Rc;\n \n@@ -138,6 +141,7 @@ const fn in_const() -> &'static str {\n     a\n }\n \n+#[proc_macros::inline_macros]\n fn does_not_lint() {\n     let z;\n     if false {\n@@ -195,35 +199,27 @@ fn does_not_lint() {\n     }\n     y = 3;\n \n-    macro_rules! assign {\n-        ($i:ident) => {\n-            $i = 1;\n-        };\n-    }\n     let x;\n-    assign!(x);\n+    inline!($x = 1;);\n \n     let x;\n     if true {\n-        assign!(x);\n+        inline!($x = 1;);\n     } else {\n         x = 2;\n     }\n \n-    macro_rules! in_macro {\n-        () => {\n-            let x;\n-            x = 1;\n+    inline!({\n+        let x;\n+        x = 1;\n \n-            let x;\n-            if true {\n-                x = 1;\n-            } else {\n-                x = 2;\n-            }\n-        };\n-    }\n-    in_macro!();\n+        let x;\n+        if true {\n+            x = 1;\n+        } else {\n+            x = 2;\n+        }\n+    });\n \n     // ignore if-lets - https://github.com/rust-lang/rust-clippy/issues/8613\n     let x;"}, {"sha": "969afb38edf2ea1c2a5d36e8737104cfc4283efb", "filename": "tests/ui/needless_late_init.rs", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fneedless_late_init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fneedless_late_init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_late_init.rs?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,4 +1,5 @@\n // run-rustfix\n+// aux-build:proc_macros.rs\n #![feature(let_chains)]\n #![allow(unused)]\n #![allow(\n@@ -10,6 +11,8 @@\n     clippy::uninlined_format_args\n )]\n \n+extern crate proc_macros;\n+\n use std::collections::{BTreeMap, BTreeSet, HashMap, HashSet};\n use std::rc::Rc;\n \n@@ -138,6 +141,7 @@ const fn in_const() -> &'static str {\n     a\n }\n \n+#[proc_macros::inline_macros]\n fn does_not_lint() {\n     let z;\n     if false {\n@@ -195,35 +199,27 @@ fn does_not_lint() {\n     }\n     y = 3;\n \n-    macro_rules! assign {\n-        ($i:ident) => {\n-            $i = 1;\n-        };\n-    }\n     let x;\n-    assign!(x);\n+    inline!($x = 1;);\n \n     let x;\n     if true {\n-        assign!(x);\n+        inline!($x = 1;);\n     } else {\n         x = 2;\n     }\n \n-    macro_rules! in_macro {\n-        () => {\n-            let x;\n-            x = 1;\n+    inline!({\n+        let x;\n+        x = 1;\n \n-            let x;\n-            if true {\n-                x = 1;\n-            } else {\n-                x = 2;\n-            }\n-        };\n-    }\n-    in_macro!();\n+        let x;\n+        if true {\n+            x = 1;\n+        } else {\n+            x = 2;\n+        }\n+    });\n \n     // ignore if-lets - https://github.com/rust-lang/rust-clippy/issues/8613\n     let x;"}, {"sha": "eff782f8bf1049be24fe76399290cc81aaa1090a", "filename": "tests/ui/needless_late_init.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fneedless_late_init.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fneedless_late_init.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_late_init.stderr?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,5 +1,5 @@\n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:24:5\n+  --> $DIR/needless_late_init.rs:27:5\n    |\n LL |     let a;\n    |     ^^^^^^ created here\n@@ -13,7 +13,7 @@ LL |     let a = \"zero\";\n    |     ~~~~~\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:27:5\n+  --> $DIR/needless_late_init.rs:30:5\n    |\n LL |     let b;\n    |     ^^^^^^ created here\n@@ -27,7 +27,7 @@ LL |     let b = 1;\n    |     ~~~~~\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:28:5\n+  --> $DIR/needless_late_init.rs:31:5\n    |\n LL |     let c;\n    |     ^^^^^^ created here\n@@ -41,7 +41,7 @@ LL |     let c = 2;\n    |     ~~~~~\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:32:5\n+  --> $DIR/needless_late_init.rs:35:5\n    |\n LL |     let d: usize;\n    |     ^^^^^^^^^^^^^ created here\n@@ -54,7 +54,7 @@ LL |     let d: usize = 1;\n    |     ~~~~~~~~~~~~\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:35:5\n+  --> $DIR/needless_late_init.rs:38:5\n    |\n LL |     let e;\n    |     ^^^^^^ created here\n@@ -67,7 +67,7 @@ LL |     let e = format!(\"{}\", d);\n    |     ~~~~~\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:40:5\n+  --> $DIR/needless_late_init.rs:43:5\n    |\n LL |     let a;\n    |     ^^^^^^\n@@ -88,7 +88,7 @@ LL |     };\n    |      +\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:49:5\n+  --> $DIR/needless_late_init.rs:52:5\n    |\n LL |     let b;\n    |     ^^^^^^\n@@ -109,7 +109,7 @@ LL |     };\n    |      +\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:56:5\n+  --> $DIR/needless_late_init.rs:59:5\n    |\n LL |     let d;\n    |     ^^^^^^\n@@ -130,7 +130,7 @@ LL |     };\n    |      +\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:64:5\n+  --> $DIR/needless_late_init.rs:67:5\n    |\n LL |     let e;\n    |     ^^^^^^\n@@ -151,7 +151,7 @@ LL |     };\n    |      +\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:71:5\n+  --> $DIR/needless_late_init.rs:74:5\n    |\n LL |     let f;\n    |     ^^^^^^\n@@ -167,7 +167,7 @@ LL +         1 => \"three\",\n    |\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:77:5\n+  --> $DIR/needless_late_init.rs:80:5\n    |\n LL |     let g: usize;\n    |     ^^^^^^^^^^^^^\n@@ -187,7 +187,7 @@ LL |     };\n    |      +\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:85:5\n+  --> $DIR/needless_late_init.rs:88:5\n    |\n LL |     let x;\n    |     ^^^^^^ created here\n@@ -201,7 +201,7 @@ LL |     let x = 1;\n    |     ~~~~~\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:89:5\n+  --> $DIR/needless_late_init.rs:92:5\n    |\n LL |     let x;\n    |     ^^^^^^ created here\n@@ -215,7 +215,7 @@ LL |     let x = SignificantDrop;\n    |     ~~~~~\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:93:5\n+  --> $DIR/needless_late_init.rs:96:5\n    |\n LL |     let x;\n    |     ^^^^^^ created here\n@@ -229,7 +229,7 @@ LL |     let x = SignificantDrop;\n    |     ~~~~~\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:112:5\n+  --> $DIR/needless_late_init.rs:115:5\n    |\n LL |     let a;\n    |     ^^^^^^\n@@ -250,7 +250,7 @@ LL |     };\n    |      +\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:129:5\n+  --> $DIR/needless_late_init.rs:132:5\n    |\n LL |     let a;\n    |     ^^^^^^"}, {"sha": "e6ead69d148e8dc49c8df3739d4f0176cd3bf385", "filename": "tests/ui/needless_lifetimes.fixed", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fneedless_lifetimes.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fneedless_lifetimes.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_lifetimes.fixed?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-// aux-build:macro_rules.rs\n+// aux-build:proc_macros.rs\n \n #![warn(clippy::needless_lifetimes)]\n #![allow(\n@@ -12,8 +12,8 @@\n     clippy::get_first\n )]\n \n-#[macro_use]\n-extern crate macro_rules;\n+extern crate proc_macros;\n+use proc_macros::inline_macros;\n \n fn distinct_lifetimes(_x: &u8, _y: &u8, _z: u8) {}\n \n@@ -502,30 +502,29 @@ mod pr_9743_output_lifetime_checks {\n     }\n }\n \n+#[inline_macros]\n mod in_macro {\n-    macro_rules! local_one_input_macro {\n-        () => {\n-            fn one_input(x: &u8) -> &u8 {\n-                unimplemented!()\n-            }\n-        };\n-    }\n+    use proc_macros::external;\n \n     // lint local macro expands to function with needless lifetimes\n-    local_one_input_macro!();\n+    inline! {\n+        fn one_input(x: &u8) -> &u8 {\n+            unimplemented!()\n+        }\n+    }\n \n     // no lint on external macro\n-    macro_rules::needless_lifetime!();\n-\n-    macro_rules! expanded_lifetime {\n-        ($l:lifetime) => {\n-            fn f<$l>(arg: &$l str) -> &$l str {\n-                arg\n-            }\n+    external! {\n+        fn needless_lifetime<'a>(x: &'a u8) -> &'a u8 {\n+            unimplemented!()\n         }\n     }\n \n-    expanded_lifetime!('a);\n+    inline! {\n+        fn f<$'a>(arg: &$'a str) -> &$'a str {\n+            arg\n+        }\n+    }\n }\n \n mod issue5787 {"}, {"sha": "06eb430506f9f74222dd24b9196211c6c7729572", "filename": "tests/ui/needless_lifetimes.rs", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fneedless_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fneedless_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_lifetimes.rs?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-// aux-build:macro_rules.rs\n+// aux-build:proc_macros.rs\n \n #![warn(clippy::needless_lifetimes)]\n #![allow(\n@@ -12,8 +12,8 @@\n     clippy::get_first\n )]\n \n-#[macro_use]\n-extern crate macro_rules;\n+extern crate proc_macros;\n+use proc_macros::inline_macros;\n \n fn distinct_lifetimes<'a, 'b>(_x: &'a u8, _y: &'b u8, _z: u8) {}\n \n@@ -502,30 +502,29 @@ mod pr_9743_output_lifetime_checks {\n     }\n }\n \n+#[inline_macros]\n mod in_macro {\n-    macro_rules! local_one_input_macro {\n-        () => {\n-            fn one_input<'a>(x: &'a u8) -> &'a u8 {\n-                unimplemented!()\n-            }\n-        };\n-    }\n+    use proc_macros::external;\n \n     // lint local macro expands to function with needless lifetimes\n-    local_one_input_macro!();\n+    inline! {\n+        fn one_input<'a>(x: &'a u8) -> &'a u8 {\n+            unimplemented!()\n+        }\n+    }\n \n     // no lint on external macro\n-    macro_rules::needless_lifetime!();\n-\n-    macro_rules! expanded_lifetime {\n-        ($l:lifetime) => {\n-            fn f<$l>(arg: &$l str) -> &$l str {\n-                arg\n-            }\n+    external! {\n+        fn needless_lifetime<'a>(x: &'a u8) -> &'a u8 {\n+            unimplemented!()\n         }\n     }\n \n-    expanded_lifetime!('a);\n+    inline! {\n+        fn f<$'a>(arg: &$'a str) -> &$'a str {\n+            arg\n+        }\n+    }\n }\n \n mod issue5787 {"}, {"sha": "86acc4e00469ff5a4c946d61c0b3707575a81271", "filename": "tests/ui/needless_lifetimes.stderr", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fneedless_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fneedless_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_lifetimes.stderr?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -540,19 +540,16 @@ LL +     fn multiple_inputs_output_not_elided<'b>(x: &u8, y: &'b u8, z: &'b u8)\n    |\n \n error: the following explicit lifetimes could be elided: 'a\n-  --> $DIR/needless_lifetimes.rs:508:13\n+  --> $DIR/needless_lifetimes.rs:511:9\n    |\n-LL |             fn one_input<'a>(x: &'a u8) -> &'a u8 {\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-...\n-LL |     local_one_input_macro!();\n-   |     ------------------------ in this macro invocation\n+LL |         fn one_input<'a>(x: &'a u8) -> &'a u8 {\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in the macro `local_one_input_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `__inline_mac_mod_in_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: elide the lifetimes\n    |\n-LL -             fn one_input<'a>(x: &'a u8) -> &'a u8 {\n-LL +             fn one_input(x: &u8) -> &u8 {\n+LL -         fn one_input<'a>(x: &'a u8) -> &'a u8 {\n+LL +         fn one_input(x: &u8) -> &u8 {\n    |\n \n error: aborting due to 46 previous errors"}, {"sha": "9a56cf40d8a771134a59620656acc0307610d8a0", "filename": "tests/ui/option_env_unwrap.rs", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Foption_env_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Foption_env_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_env_unwrap.rs?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,24 +1,16 @@\n-// aux-build:macro_rules.rs\n+// aux-build:proc_macros.rs\n #![warn(clippy::option_env_unwrap)]\n #![allow(clippy::map_flatten)]\n \n-#[macro_use]\n-extern crate macro_rules;\n-\n-macro_rules! option_env_unwrap {\n-    ($env: expr) => {\n-        option_env!($env).unwrap()\n-    };\n-    ($env: expr, $message: expr) => {\n-        option_env!($env).expect($message)\n-    };\n-}\n+extern crate proc_macros;\n+use proc_macros::{external, inline_macros};\n \n+#[inline_macros]\n fn main() {\n     let _ = option_env!(\"PATH\").unwrap();\n     let _ = option_env!(\"PATH\").expect(\"environment variable PATH isn't set\");\n-    let _ = option_env_unwrap!(\"PATH\");\n-    let _ = option_env_unwrap!(\"PATH\", \"environment variable PATH isn't set\");\n-    let _ = option_env_unwrap_external!(\"PATH\");\n-    let _ = option_env_unwrap_external!(\"PATH\", \"environment variable PATH isn't set\");\n+    let _ = inline!(option_env!($\"PATH\").unwrap());\n+    let _ = inline!(option_env!($\"PATH\").expect($\"environment variable PATH isn't set\"));\n+    let _ = external!(option_env!($\"PATH\").unwrap());\n+    let _ = external!(option_env!($\"PATH\").expect($\"environment variable PATH isn't set\"));\n }"}, {"sha": "7bba62686eecf7111ae5e1297aaaa7b792ceb8a3", "filename": "tests/ui/option_env_unwrap.stderr", "status": "modified", "additions": 18, "deletions": 24, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Foption_env_unwrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Foption_env_unwrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_env_unwrap.stderr?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,5 +1,5 @@\n error: this will panic at run-time if the environment variable doesn't exist at compile-time\n-  --> $DIR/option_env_unwrap.rs:18:13\n+  --> $DIR/option_env_unwrap.rs:10:13\n    |\n LL |     let _ = option_env!(\"PATH\").unwrap();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -8,54 +8,48 @@ LL |     let _ = option_env!(\"PATH\").unwrap();\n    = note: `-D clippy::option-env-unwrap` implied by `-D warnings`\n \n error: this will panic at run-time if the environment variable doesn't exist at compile-time\n-  --> $DIR/option_env_unwrap.rs:19:13\n+  --> $DIR/option_env_unwrap.rs:11:13\n    |\n LL |     let _ = option_env!(\"PATH\").expect(\"environment variable PATH isn't set\");\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using the `env!` macro instead\n \n error: this will panic at run-time if the environment variable doesn't exist at compile-time\n-  --> $DIR/option_env_unwrap.rs:10:9\n+  --> $DIR/option_env_unwrap.rs:12:21\n    |\n-LL |         option_env!($env).unwrap()\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-...\n-LL |     let _ = option_env_unwrap!(\"PATH\");\n-   |             -------------------------- in this macro invocation\n+LL |     let _ = inline!(option_env!($\"PATH\").unwrap());\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using the `env!` macro instead\n-   = note: this error originates in the macro `option_env_unwrap` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `__inline_mac_fn_main` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: this will panic at run-time if the environment variable doesn't exist at compile-time\n-  --> $DIR/option_env_unwrap.rs:13:9\n+  --> $DIR/option_env_unwrap.rs:13:21\n    |\n-LL |         option_env!($env).expect($message)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-...\n-LL |     let _ = option_env_unwrap!(\"PATH\", \"environment variable PATH isn't set\");\n-   |             ----------------------------------------------------------------- in this macro invocation\n+LL |     let _ = inline!(option_env!($\"PATH\").expect($\"environment variable PATH isn't set\"));\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using the `env!` macro instead\n-   = note: this error originates in the macro `option_env_unwrap` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `__inline_mac_fn_main` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: this will panic at run-time if the environment variable doesn't exist at compile-time\n-  --> $DIR/option_env_unwrap.rs:22:13\n+  --> $DIR/option_env_unwrap.rs:14:13\n    |\n-LL |     let _ = option_env_unwrap_external!(\"PATH\");\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     let _ = external!(option_env!($\"PATH\").unwrap());\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using the `env!` macro instead\n-   = note: this error originates in the macro `option_env_unwrap_external` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `external` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: this will panic at run-time if the environment variable doesn't exist at compile-time\n-  --> $DIR/option_env_unwrap.rs:23:13\n+  --> $DIR/option_env_unwrap.rs:15:13\n    |\n-LL |     let _ = option_env_unwrap_external!(\"PATH\", \"environment variable PATH isn't set\");\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     let _ = external!(option_env!($\"PATH\").expect($\"environment variable PATH isn't set\"));\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using the `env!` macro instead\n-   = note: this error originates in the macro `option_env_unwrap_external` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `external` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 6 previous errors\n "}, {"sha": "ee7b998a0b2f3137be667ed74f2b8c8fc22f48ce", "filename": "tests/ui/ptr_as_ptr.fixed", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fptr_as_ptr.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fptr_as_ptr.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_as_ptr.fixed?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,16 +1,12 @@\n // run-rustfix\n-// aux-build:macro_rules.rs\n+// aux-build:proc_macros.rs\n \n #![warn(clippy::ptr_as_ptr)]\n \n-extern crate macro_rules;\n-\n-macro_rules! cast_it {\n-    ($ptr: ident) => {\n-        $ptr.cast::<i32>()\n-    };\n-}\n+extern crate proc_macros;\n+use proc_macros::{external, inline_macros};\n \n+#[inline_macros]\n fn main() {\n     let ptr: *const u32 = &42_u32;\n     let mut_ptr: *mut u32 = &mut 42_u32;\n@@ -38,10 +34,10 @@ fn main() {\n     let _: *mut i32 = mut_ptr.cast();\n \n     // Make sure the lint is triggered inside a macro\n-    let _ = cast_it!(ptr);\n+    let _ = inline!($ptr.cast::<i32>());\n \n     // Do not lint inside macros from external crates\n-    let _ = macro_rules::ptr_as_ptr_cast!(ptr);\n+    let _ = external!($ptr as *const i32);\n }\n \n #[clippy::msrv = \"1.37\"]"}, {"sha": "c88329ce4eccd440a99215705df392cea417cdc4", "filename": "tests/ui/ptr_as_ptr.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fptr_as_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fptr_as_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_as_ptr.rs?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,16 +1,12 @@\n // run-rustfix\n-// aux-build:macro_rules.rs\n+// aux-build:proc_macros.rs\n \n #![warn(clippy::ptr_as_ptr)]\n \n-extern crate macro_rules;\n-\n-macro_rules! cast_it {\n-    ($ptr: ident) => {\n-        $ptr as *const i32\n-    };\n-}\n+extern crate proc_macros;\n+use proc_macros::{external, inline_macros};\n \n+#[inline_macros]\n fn main() {\n     let ptr: *const u32 = &42_u32;\n     let mut_ptr: *mut u32 = &mut 42_u32;\n@@ -38,10 +34,10 @@ fn main() {\n     let _: *mut i32 = mut_ptr as _;\n \n     // Make sure the lint is triggered inside a macro\n-    let _ = cast_it!(ptr);\n+    let _ = inline!($ptr as *const i32);\n \n     // Do not lint inside macros from external crates\n-    let _ = macro_rules::ptr_as_ptr_cast!(ptr);\n+    let _ = external!($ptr as *const i32);\n }\n \n #[clippy::msrv = \"1.37\"]"}, {"sha": "78d733994ac691c56b844fb1e2d2e77051428b43", "filename": "tests/ui/ptr_as_ptr.stderr", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fptr_as_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fptr_as_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_as_ptr.stderr?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,54 +1,51 @@\n error: `as` casting between raw pointers without changing its mutability\n-  --> $DIR/ptr_as_ptr.rs:18:13\n+  --> $DIR/ptr_as_ptr.rs:14:13\n    |\n LL |     let _ = ptr as *const i32;\n    |             ^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `ptr.cast::<i32>()`\n    |\n    = note: `-D clippy::ptr-as-ptr` implied by `-D warnings`\n \n error: `as` casting between raw pointers without changing its mutability\n-  --> $DIR/ptr_as_ptr.rs:19:13\n+  --> $DIR/ptr_as_ptr.rs:15:13\n    |\n LL |     let _ = mut_ptr as *mut i32;\n    |             ^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `mut_ptr.cast::<i32>()`\n \n error: `as` casting between raw pointers without changing its mutability\n-  --> $DIR/ptr_as_ptr.rs:24:17\n+  --> $DIR/ptr_as_ptr.rs:20:17\n    |\n LL |         let _ = *ptr_ptr as *const i32;\n    |                 ^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(*ptr_ptr).cast::<i32>()`\n \n error: `as` casting between raw pointers without changing its mutability\n-  --> $DIR/ptr_as_ptr.rs:37:25\n+  --> $DIR/ptr_as_ptr.rs:33:25\n    |\n LL |     let _: *const i32 = ptr as *const _;\n    |                         ^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `ptr.cast()`\n \n error: `as` casting between raw pointers without changing its mutability\n-  --> $DIR/ptr_as_ptr.rs:38:23\n+  --> $DIR/ptr_as_ptr.rs:34:23\n    |\n LL |     let _: *mut i32 = mut_ptr as _;\n    |                       ^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `mut_ptr.cast()`\n \n error: `as` casting between raw pointers without changing its mutability\n-  --> $DIR/ptr_as_ptr.rs:10:9\n+  --> $DIR/ptr_as_ptr.rs:37:21\n    |\n-LL |         $ptr as *const i32\n-   |         ^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `$ptr.cast::<i32>()`\n-...\n-LL |     let _ = cast_it!(ptr);\n-   |             ------------- in this macro invocation\n+LL |     let _ = inline!($ptr as *const i32);\n+   |                     ^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `$ptr.cast::<i32>()`\n    |\n-   = note: this error originates in the macro `cast_it` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `__inline_mac_fn_main` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `as` casting between raw pointers without changing its mutability\n-  --> $DIR/ptr_as_ptr.rs:62:13\n+  --> $DIR/ptr_as_ptr.rs:58:13\n    |\n LL |     let _ = ptr as *const i32;\n    |             ^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `ptr.cast::<i32>()`\n \n error: `as` casting between raw pointers without changing its mutability\n-  --> $DIR/ptr_as_ptr.rs:63:13\n+  --> $DIR/ptr_as_ptr.rs:59:13\n    |\n LL |     let _ = mut_ptr as *mut i32;\n    |             ^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `mut_ptr.cast::<i32>()`"}, {"sha": "3c86f41f3a6e7e237412b18363b4cdf4851beb7e", "filename": "tests/ui/single_match_else.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fsingle_match_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fsingle_match_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_match_else.rs?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,9 +1,9 @@\n-// aux-build: proc_macro_with_span.rs\n+// aux-build: proc_macros.rs\n #![warn(clippy::single_match_else)]\n #![allow(clippy::needless_return, clippy::no_effect, clippy::uninlined_format_args)]\n \n-extern crate proc_macro_with_span;\n-use proc_macro_with_span::with_span;\n+extern crate proc_macros;\n+use proc_macros::with_span;\n \n enum ExprNode {\n     ExprAddrOf,"}, {"sha": "20edbe31fa9e7ef0c52930e20a2b0c26eb82687d", "filename": "tests/ui/string_add.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fstring_add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Fstring_add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_add.rs?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,7 +1,7 @@\n-// aux-build:macro_rules.rs\n+// aux-build:proc_macros.rs\n \n-#[macro_use]\n-extern crate macro_rules;\n+extern crate proc_macros;\n+use proc_macros::external;\n \n #[warn(clippy::string_add)]\n #[allow(clippy::string_add_assign, unused)]\n@@ -22,5 +22,8 @@ fn main() {\n     x = x + 1;\n     assert_eq!(2, x);\n \n-    string_add!();\n+    external!({\n+        let y = \"\".to_owned();\n+        let z = y + \"...\";\n+    });\n }"}, {"sha": "174c858a47d1f98b1703fb7ea4cfae763ff7ad91", "filename": "tests/ui/toplevel_ref_arg.fixed", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Ftoplevel_ref_arg.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Ftoplevel_ref_arg.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftoplevel_ref_arg.fixed?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,17 +1,12 @@\n // run-rustfix\n-// aux-build:macro_rules.rs\n+// aux-build:proc_macros.rs\n #![warn(clippy::toplevel_ref_arg)]\n-#![allow(clippy::uninlined_format_args)]\n+#![allow(clippy::uninlined_format_args, unused)]\n \n-#[macro_use]\n-extern crate macro_rules;\n-\n-macro_rules! gen_binding {\n-    () => {\n-        let _y = &42;\n-    };\n-}\n+extern crate proc_macros;\n+use proc_macros::{external, inline_macros};\n \n+#[inline_macros]\n fn main() {\n     // Closures should not warn\n     let y = |ref x| println!(\"{:?}\", x);\n@@ -38,13 +33,8 @@ fn main() {\n     for ref _x in 0..10 {}\n \n     // lint in macro\n-    #[allow(unused)]\n-    {\n-        gen_binding!();\n-    }\n+    inline!(let _y = &42;);\n \n     // do not lint in external macro\n-    {\n-        ref_arg_binding!();\n-    }\n+    external!(let ref _y = 42;);\n }"}, {"sha": "4b81a06112fe23cf62459e304e06389129f3da52", "filename": "tests/ui/toplevel_ref_arg.rs", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Ftoplevel_ref_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Ftoplevel_ref_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftoplevel_ref_arg.rs?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,17 +1,12 @@\n // run-rustfix\n-// aux-build:macro_rules.rs\n+// aux-build:proc_macros.rs\n #![warn(clippy::toplevel_ref_arg)]\n-#![allow(clippy::uninlined_format_args)]\n+#![allow(clippy::uninlined_format_args, unused)]\n \n-#[macro_use]\n-extern crate macro_rules;\n-\n-macro_rules! gen_binding {\n-    () => {\n-        let ref _y = 42;\n-    };\n-}\n+extern crate proc_macros;\n+use proc_macros::{external, inline_macros};\n \n+#[inline_macros]\n fn main() {\n     // Closures should not warn\n     let y = |ref x| println!(\"{:?}\", x);\n@@ -38,13 +33,8 @@ fn main() {\n     for ref _x in 0..10 {}\n \n     // lint in macro\n-    #[allow(unused)]\n-    {\n-        gen_binding!();\n-    }\n+    inline!(let ref _y = 42;);\n \n     // do not lint in external macro\n-    {\n-        ref_arg_binding!();\n-    }\n+    external!(let ref _y = 42;);\n }"}, {"sha": "407c2d9fcd33bd757d23c0357ea2049b69091a71", "filename": "tests/ui/toplevel_ref_arg.stderr", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Ftoplevel_ref_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Ftoplevel_ref_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftoplevel_ref_arg.stderr?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,45 +1,42 @@\n error: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead\n-  --> $DIR/toplevel_ref_arg.rs:20:9\n+  --> $DIR/toplevel_ref_arg.rs:15:9\n    |\n LL |     let ref _x = 1;\n    |     ----^^^^^^----- help: try: `let _x = &1;`\n    |\n    = note: `-D clippy::toplevel-ref-arg` implied by `-D warnings`\n \n error: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead\n-  --> $DIR/toplevel_ref_arg.rs:22:9\n+  --> $DIR/toplevel_ref_arg.rs:17:9\n    |\n LL |     let ref _y: (&_, u8) = (&1, 2);\n    |     ----^^^^^^--------------------- help: try: `let _y: &(&_, u8) = &(&1, 2);`\n \n error: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead\n-  --> $DIR/toplevel_ref_arg.rs:24:9\n+  --> $DIR/toplevel_ref_arg.rs:19:9\n    |\n LL |     let ref _z = 1 + 2;\n    |     ----^^^^^^--------- help: try: `let _z = &(1 + 2);`\n \n error: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead\n-  --> $DIR/toplevel_ref_arg.rs:26:9\n+  --> $DIR/toplevel_ref_arg.rs:21:9\n    |\n LL |     let ref mut _z = 1 + 2;\n    |     ----^^^^^^^^^^--------- help: try: `let _z = &mut (1 + 2);`\n \n error: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead\n-  --> $DIR/toplevel_ref_arg.rs:31:9\n+  --> $DIR/toplevel_ref_arg.rs:26:9\n    |\n LL |     let ref _x = vec![1, 2, 3];\n    |     ----^^^^^^----------------- help: try: `let _x = &vec![1, 2, 3];`\n \n error: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead\n-  --> $DIR/toplevel_ref_arg.rs:11:13\n+  --> $DIR/toplevel_ref_arg.rs:36:17\n    |\n-LL |         let ref _y = 42;\n-   |         ----^^^^^^------ help: try: `let _y = &42;`\n-...\n-LL |         gen_binding!();\n-   |         -------------- in this macro invocation\n+LL |     inline!(let ref _y = 42;);\n+   |             ----^^^^^^------ help: try: `let _y = &42;`\n    |\n-   = note: this error originates in the macro `gen_binding` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `__inline_mac_fn_main` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 6 previous errors\n "}, {"sha": "2047593e7e4b81d7c5b330b037aaf4fd32c8e1ff", "filename": "tests/ui/toplevel_ref_arg_non_rustfix.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Ftoplevel_ref_arg_non_rustfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Ftoplevel_ref_arg_non_rustfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftoplevel_ref_arg_non_rustfix.rs?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,33 +1,27 @@\n-// aux-build:macro_rules.rs\n+// aux-build:proc_macros.rs\n \n #![warn(clippy::toplevel_ref_arg)]\n #![allow(unused)]\n \n-#[macro_use]\n-extern crate macro_rules;\n+extern crate proc_macros;\n+use proc_macros::{external, inline_macros};\n \n fn the_answer(ref mut x: u8) {\n     *x = 42;\n }\n \n-macro_rules! gen_function {\n-    () => {\n-        fn fun_example(ref _x: usize) {}\n-    };\n-}\n-\n+#[inline_macros]\n fn main() {\n     let mut x = 0;\n     the_answer(x);\n \n     // lint in macro\n-    #[allow(unused)]\n-    {\n-        gen_function!();\n+    inline! {\n+        fn fun_example(ref _x: usize) {}\n     }\n \n     // do not lint in external macro\n-    {\n-        ref_arg_function!();\n+    external! {\n+        fn fun_example2(ref _x: usize) {}\n     }\n }"}, {"sha": "7307bd599d9ba03ed19f45011572ed8e8a73703c", "filename": "tests/ui/toplevel_ref_arg_non_rustfix.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Ftoplevel_ref_arg_non_rustfix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Ftoplevel_ref_arg_non_rustfix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftoplevel_ref_arg_non_rustfix.stderr?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -7,15 +7,12 @@ LL | fn the_answer(ref mut x: u8) {\n    = note: `-D clippy::toplevel-ref-arg` implied by `-D warnings`\n \n error: `ref` directly on a function argument is ignored. Consider using a reference type instead\n-  --> $DIR/toplevel_ref_arg_non_rustfix.rs:15:24\n+  --> $DIR/toplevel_ref_arg_non_rustfix.rs:20:24\n    |\n LL |         fn fun_example(ref _x: usize) {}\n    |                        ^^^^^^\n-...\n-LL |         gen_function!();\n-   |         --------------- in this macro invocation\n    |\n-   = note: this error originates in the macro `gen_function` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `__inline_mac_fn_main` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "dc497b1690f542e372a1277199c48d160b160176", "filename": "tests/ui/try_err.fixed", "status": "modified", "additions": 23, "deletions": 42, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Ftry_err.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Ftry_err.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftry_err.fixed?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,11 +1,11 @@\n // run-rustfix\n-// aux-build:macro_rules.rs\n+// aux-build:proc_macros.rs\n \n #![deny(clippy::try_err)]\n #![allow(clippy::unnecessary_wraps, clippy::needless_question_mark)]\n \n-#[macro_use]\n-extern crate macro_rules;\n+extern crate proc_macros;\n+use proc_macros::{external, inline_macros};\n \n use std::io;\n use std::task::Poll;\n@@ -79,36 +79,22 @@ fn nested_error() -> Result<i32, i32> {\n     Ok(1)\n }\n \n-// Bad suggestion when in macro (see #6242)\n-macro_rules! try_validation {\n-    ($e: expr) => {{\n-        match $e {\n+#[inline_macros]\n+fn calling_macro() -> Result<i32, i32> {\n+    // macro\n+    inline!(\n+        match $(Ok::<_, i32>(5)) {\n             Ok(_) => 0,\n             Err(_) => return Err(1),\n         }\n-    }};\n-}\n-\n-macro_rules! ret_one {\n-    () => {\n-        1\n-    };\n-}\n-\n-macro_rules! try_validation_in_macro {\n-    ($e: expr) => {{\n-        match $e {\n+    );\n+    // `Err` arg is another macro\n+    inline!(\n+        match $(Ok::<_, i32>(5)) {\n             Ok(_) => 0,\n-            Err(_) => return Err(ret_one!()),\n+            Err(_) => return Err(inline!(1)),\n         }\n-    }};\n-}\n-\n-fn calling_macro() -> Result<i32, i32> {\n-    // macro\n-    try_validation!(Ok::<_, i32>(5));\n-    // `Err` arg is another macro\n-    try_validation_in_macro!(Ok::<_, i32>(5));\n+    );\n     Ok(5)\n }\n \n@@ -121,24 +107,19 @@ fn main() {\n     calling_macro().unwrap();\n \n     // We don't want to lint in external macros\n-    try_err!();\n-}\n-\n-macro_rules! bar {\n-    () => {\n-        String::from(\"aasdfasdfasdfa\")\n-    };\n-}\n-\n-macro_rules! foo {\n-    () => {\n-        bar!()\n-    };\n+    external! {\n+        pub fn try_err_fn() -> Result<i32, i32> {\n+            let err: i32 = 1;\n+            // To avoid warnings during rustfix\n+            if true { Err(err)? } else { Ok(2) }\n+        }\n+    }\n }\n \n+#[inline_macros]\n pub fn macro_inside(fail: bool) -> Result<i32, String> {\n     if fail {\n-        return Err(foo!());\n+        return Err(inline!(inline!(String::from(\"aasdfasdfasdfa\"))));\n     }\n     Ok(0)\n }"}, {"sha": "86aeb75cd96a50c47f386abb1411ec457b95c767", "filename": "tests/ui/try_err.rs", "status": "modified", "additions": 23, "deletions": 42, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Ftry_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Ftry_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftry_err.rs?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,11 +1,11 @@\n // run-rustfix\n-// aux-build:macro_rules.rs\n+// aux-build:proc_macros.rs\n \n #![deny(clippy::try_err)]\n #![allow(clippy::unnecessary_wraps, clippy::needless_question_mark)]\n \n-#[macro_use]\n-extern crate macro_rules;\n+extern crate proc_macros;\n+use proc_macros::{external, inline_macros};\n \n use std::io;\n use std::task::Poll;\n@@ -79,36 +79,22 @@ fn nested_error() -> Result<i32, i32> {\n     Ok(1)\n }\n \n-// Bad suggestion when in macro (see #6242)\n-macro_rules! try_validation {\n-    ($e: expr) => {{\n-        match $e {\n+#[inline_macros]\n+fn calling_macro() -> Result<i32, i32> {\n+    // macro\n+    inline!(\n+        match $(Ok::<_, i32>(5)) {\n             Ok(_) => 0,\n             Err(_) => Err(1)?,\n         }\n-    }};\n-}\n-\n-macro_rules! ret_one {\n-    () => {\n-        1\n-    };\n-}\n-\n-macro_rules! try_validation_in_macro {\n-    ($e: expr) => {{\n-        match $e {\n+    );\n+    // `Err` arg is another macro\n+    inline!(\n+        match $(Ok::<_, i32>(5)) {\n             Ok(_) => 0,\n-            Err(_) => Err(ret_one!())?,\n+            Err(_) => Err(inline!(1))?,\n         }\n-    }};\n-}\n-\n-fn calling_macro() -> Result<i32, i32> {\n-    // macro\n-    try_validation!(Ok::<_, i32>(5));\n-    // `Err` arg is another macro\n-    try_validation_in_macro!(Ok::<_, i32>(5));\n+    );\n     Ok(5)\n }\n \n@@ -121,24 +107,19 @@ fn main() {\n     calling_macro().unwrap();\n \n     // We don't want to lint in external macros\n-    try_err!();\n-}\n-\n-macro_rules! bar {\n-    () => {\n-        String::from(\"aasdfasdfasdfa\")\n-    };\n-}\n-\n-macro_rules! foo {\n-    () => {\n-        bar!()\n-    };\n+    external! {\n+        pub fn try_err_fn() -> Result<i32, i32> {\n+            let err: i32 = 1;\n+            // To avoid warnings during rustfix\n+            if true { Err(err)? } else { Ok(2) }\n+        }\n+    }\n }\n \n+#[inline_macros]\n pub fn macro_inside(fail: bool) -> Result<i32, String> {\n     if fail {\n-        Err(foo!())?;\n+        Err(inline!(inline!(String::from(\"aasdfasdfasdfa\"))))?;\n     }\n     Ok(0)\n }"}, {"sha": "4ad0e2e56a4d35ec616ddba8899ff083c051a889", "filename": "tests/ui/try_err.stderr", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Ftry_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Ftry_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftry_err.stderr?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -29,53 +29,47 @@ LL |                 Err(err)?;\n    |                 ^^^^^^^^^ help: try this: `return Err(err.into())`\n \n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:87:23\n+  --> $DIR/try_err.rs:88:23\n    |\n LL |             Err(_) => Err(1)?,\n    |                       ^^^^^^^ help: try this: `return Err(1)`\n-...\n-LL |     try_validation!(Ok::<_, i32>(5));\n-   |     -------------------------------- in this macro invocation\n    |\n-   = note: this error originates in the macro `try_validation` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `__inline_mac_fn_calling_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:102:23\n+  --> $DIR/try_err.rs:95:23\n    |\n-LL |             Err(_) => Err(ret_one!())?,\n-   |                       ^^^^^^^^^^^^^^^^ help: try this: `return Err(ret_one!())`\n-...\n-LL |     try_validation_in_macro!(Ok::<_, i32>(5));\n-   |     ----------------------------------------- in this macro invocation\n+LL |             Err(_) => Err(inline!(1))?,\n+   |                       ^^^^^^^^^^^^^^^^ help: try this: `return Err(inline!(1))`\n    |\n-   = note: this error originates in the macro `try_validation_in_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `__inline_mac_fn_calling_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:141:9\n+  --> $DIR/try_err.rs:122:9\n    |\n-LL |         Err(foo!())?;\n-   |         ^^^^^^^^^^^^ help: try this: `return Err(foo!())`\n+LL |         Err(inline!(inline!(String::from(\"aasdfasdfasdfa\"))))?;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `return Err(inline!(inline!(String::from(\"aasdfasdfasdfa\"))))`\n \n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:148:9\n+  --> $DIR/try_err.rs:129:9\n    |\n LL |         Err(io::ErrorKind::WriteZero)?\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `return Poll::Ready(Err(io::ErrorKind::WriteZero.into()))`\n \n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:150:9\n+  --> $DIR/try_err.rs:131:9\n    |\n LL |         Err(io::Error::new(io::ErrorKind::InvalidInput, \"error\"))?\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `return Poll::Ready(Err(io::Error::new(io::ErrorKind::InvalidInput, \"error\")))`\n \n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:158:9\n+  --> $DIR/try_err.rs:139:9\n    |\n LL |         Err(io::ErrorKind::NotFound)?\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `return Poll::Ready(Some(Err(io::ErrorKind::NotFound.into())))`\n \n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:167:16\n+  --> $DIR/try_err.rs:148:16\n    |\n LL |         return Err(42)?;\n    |                ^^^^^^^^ help: try this: `Err(42)`"}, {"sha": "1475d781c673400150808848d4c6ac4261e3e618", "filename": "tests/ui/uninlined_format_args.fixed", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Funinlined_format_args.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Funinlined_format_args.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinlined_format_args.fixed?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,11 +1,11 @@\n-// aux-build:proc_macro_with_span.rs\n+// aux-build:proc_macros.rs\n // run-rustfix\n #![warn(clippy::uninlined_format_args)]\n #![allow(named_arguments_used_positionally, unused_imports, unused_macros, unused_variables)]\n #![allow(clippy::eq_op, clippy::format_in_format_args, clippy::print_literal)]\n \n-extern crate proc_macro_with_span;\n-use proc_macro_with_span::with_span;\n+extern crate proc_macros;\n+use proc_macros::with_span;\n \n macro_rules! no_param_str {\n     () => {"}, {"sha": "835afac393fae088e17222d931a4314e4959d07d", "filename": "tests/ui/uninlined_format_args.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Funinlined_format_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Funinlined_format_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinlined_format_args.rs?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,11 +1,11 @@\n-// aux-build:proc_macro_with_span.rs\n+// aux-build:proc_macros.rs\n // run-rustfix\n #![warn(clippy::uninlined_format_args)]\n #![allow(named_arguments_used_positionally, unused_imports, unused_macros, unused_variables)]\n #![allow(clippy::eq_op, clippy::format_in_format_args, clippy::print_literal)]\n \n-extern crate proc_macro_with_span;\n-use proc_macro_with_span::with_span;\n+extern crate proc_macros;\n+use proc_macros::with_span;\n \n macro_rules! no_param_str {\n     () => {"}, {"sha": "674ae4f1df97e023b82d30ad23cbcec13fad4971", "filename": "tests/ui/unit_arg.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Funit_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Funit_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_arg.rs?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,4 +1,4 @@\n-// aux-build: proc_macro_with_span.rs\n+// aux-build: proc_macros.rs\n #![warn(clippy::unit_arg)]\n #![allow(unused_must_use, unused_variables)]\n #![allow(\n@@ -13,9 +13,9 @@\n     clippy::unused_unit\n )]\n \n-extern crate proc_macro_with_span;\n+extern crate proc_macros;\n \n-use proc_macro_with_span::with_span;\n+use proc_macros::with_span;\n use std::fmt::Debug;\n \n fn foo<T: Debug>(t: T) {"}, {"sha": "3b93800f8b7501eea47b337dc1ce1127e008c74f", "filename": "tests/ui/unnecessary_lazy_eval.fixed", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Funnecessary_lazy_eval.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Funnecessary_lazy_eval.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_lazy_eval.fixed?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,12 +1,12 @@\n // run-rustfix\n-// aux-build: proc_macro_with_span.rs\n+// aux-build: proc_macros.rs\n #![warn(clippy::unnecessary_lazy_evaluations)]\n #![allow(clippy::redundant_closure)]\n #![allow(clippy::bind_instead_of_map)]\n #![allow(clippy::map_identity)]\n \n-extern crate proc_macro_with_span;\n-use proc_macro_with_span::with_span;\n+extern crate proc_macros;\n+use proc_macros::with_span;\n \n struct Deep(Option<usize>);\n "}, {"sha": "2851c0c519049a8b04cbe22e86abbba6da5d6800", "filename": "tests/ui/unnecessary_lazy_eval.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Funnecessary_lazy_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Funnecessary_lazy_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_lazy_eval.rs?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,12 +1,12 @@\n // run-rustfix\n-// aux-build: proc_macro_with_span.rs\n+// aux-build: proc_macros.rs\n #![warn(clippy::unnecessary_lazy_evaluations)]\n #![allow(clippy::redundant_closure)]\n #![allow(clippy::bind_instead_of_map)]\n #![allow(clippy::map_identity)]\n \n-extern crate proc_macro_with_span;\n-use proc_macro_with_span::with_span;\n+extern crate proc_macros;\n+use proc_macros::with_span;\n \n struct Deep(Option<usize>);\n "}, {"sha": "431093ab36969342d6bb527b363ee7d5ab555d39", "filename": "tests/ui/unnecessary_unsafety_doc.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Funnecessary_unsafety_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Funnecessary_unsafety_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_unsafety_doc.rs?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -1,10 +1,10 @@\n-// aux-build:doc_unsafe_macros.rs\n+// aux-build:proc_macros.rs\n \n #![allow(clippy::let_unit_value)]\n #![warn(clippy::unnecessary_safety_doc)]\n \n-#[macro_use]\n-extern crate doc_unsafe_macros;\n+extern crate proc_macros;\n+use proc_macros::external;\n \n /// This is has no safety section, and does not need one either\n pub fn destroy_the_planet() {\n@@ -129,7 +129,11 @@ macro_rules! very_safe {\n very_safe!();\n \n // we don't lint code from external macros\n-undocd_safe!();\n+external!(\n+    pub fn vey_oy() {\n+        unimplemented!();\n+    }\n+);\n \n fn main() {}\n "}, {"sha": "b0f20fdac5fa4d221f8e87ac2fab1e06fd896396", "filename": "tests/ui/unnecessary_unsafety_doc.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Funnecessary_unsafety_doc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c7048d7852937099320091900e25061fde5479f/tests%2Fui%2Funnecessary_unsafety_doc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_unsafety_doc.stderr?ref=1c7048d7852937099320091900e25061fde5479f", "patch": "@@ -42,7 +42,7 @@ LL | very_safe!();\n    = note: this error originates in the macro `very_safe` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: docs for safe trait have unnecessary `# Safety` section\n-  --> $DIR/unnecessary_unsafety_doc.rs:147:1\n+  --> $DIR/unnecessary_unsafety_doc.rs:151:1\n    |\n LL | pub trait DocumentedSafeTraitWithImplementationHeader {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}]}