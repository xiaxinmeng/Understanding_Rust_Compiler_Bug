{"sha": "aac421b1351d6c6dddb37a92a33d929b79ed1d70", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhYzQyMWIxMzUxZDZjNmRkZGIzN2E5MmEzM2Q5MjliNzllZDFkNzA=", "commit": {"author": {"name": "kjeremy", "email": "kjeremy@gmail.com", "date": "2019-03-06T16:39:11Z"}, "committer": {"name": "kjeremy", "email": "kjeremy@gmail.com", "date": "2019-03-06T16:39:11Z"}, "message": "Hover for associated items in patterns", "tree": {"sha": "72dd9a37f8da8bdd98a4e4dce47cff85883cd2d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72dd9a37f8da8bdd98a4e4dce47cff85883cd2d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aac421b1351d6c6dddb37a92a33d929b79ed1d70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aac421b1351d6c6dddb37a92a33d929b79ed1d70", "html_url": "https://github.com/rust-lang/rust/commit/aac421b1351d6c6dddb37a92a33d929b79ed1d70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aac421b1351d6c6dddb37a92a33d929b79ed1d70/comments", "author": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1a1d20e067c25fb80fbab43b2956b6747a8dd3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1a1d20e067c25fb80fbab43b2956b6747a8dd3c", "html_url": "https://github.com/rust-lang/rust/commit/b1a1d20e067c25fb80fbab43b2956b6747a8dd3c"}], "stats": {"total": 65, "additions": 56, "deletions": 9}, "files": [{"sha": "74c718e724fd2367a974a614fb1c6b6931db15a5", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aac421b1351d6c6dddb37a92a33d929b79ed1d70/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aac421b1351d6c6dddb37a92a33d929b79ed1d70/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=aac421b1351d6c6dddb37a92a33d929b79ed1d70", "patch": "@@ -60,7 +60,7 @@ pub use self::{\n     impl_block::{ImplBlock, ImplItem},\n     docs::{Docs, Documentation},\n     adt::AdtDef,\n-    expr::{ExprScopes, ScopesWithSourceMap, ScopeEntryWithSyntax},\n+    expr::{ExprScopes, ScopesWithSourceMap, ScopeEntryWithSyntax, Pat},\n     resolve::{Resolver, Resolution},\n };\n "}, {"sha": "286ade0a48e1ccaa9db9946dea25cb18631b440e", "filename": "crates/ra_ide_api/src/goto_definition.rs", "status": "modified", "additions": 32, "deletions": 8, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/aac421b1351d6c6dddb37a92a33d929b79ed1d70/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aac421b1351d6c6dddb37a92a33d929b79ed1d70/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs?ref=aac421b1351d6c6dddb37a92a33d929b79ed1d70", "patch": "@@ -5,7 +5,7 @@ use ra_syntax::{\n     SyntaxNode,\n };\n use test_utils::tested_by;\n-use hir::Resolution;\n+use hir::{Pat, Resolution};\n \n use crate::{FilePosition, NavigationTarget, db::RootDatabase, RangeInfo};\n \n@@ -100,6 +100,7 @@ pub(crate) fn reference_definition(\n             }\n         }\n     }\n+\n     // Try name resolution\n     let resolver = hir::source_binder::resolver_for_node(db, file_id, name_ref.syntax());\n     if let Some(path) =\n@@ -126,19 +127,42 @@ pub(crate) fn reference_definition(\n             None => {\n                 // If we failed to resolve then check associated items\n                 if let Some(function) = function {\n-                    // Should we do this above and then grab path from the PathExpr?\n+                    // Resolve associated item for path expressions\n                     if let Some(path_expr) =\n                         name_ref.syntax().ancestors().find_map(ast::PathExpr::cast)\n                     {\n                         let infer_result = function.infer(db);\n                         let source_map = function.body_source_map(db);\n-                        let expr = ast::Expr::cast(path_expr.syntax()).unwrap();\n \n-                        if let Some(res) = source_map\n-                            .node_expr(expr)\n-                            .and_then(|it| infer_result.assoc_resolutions_for_expr(it.into()))\n-                        {\n-                            return Exact(NavigationTarget::from_impl_item(db, res));\n+                        if let Some(expr) = ast::Expr::cast(path_expr.syntax()) {\n+                            if let Some(res) = source_map\n+                                .node_expr(expr)\n+                                .and_then(|it| infer_result.assoc_resolutions_for_expr(it.into()))\n+                            {\n+                                return Exact(NavigationTarget::from_impl_item(db, res));\n+                            }\n+                        }\n+                    }\n+\n+                    // Resolve associated item for path patterns\n+                    if let Some(path_pat) =\n+                        name_ref.syntax().ancestors().find_map(ast::PathPat::cast)\n+                    {\n+                        let infer_result = function.infer(db);\n+\n+                        if let Some(p) = path_pat.path().and_then(hir::Path::from_ast) {\n+                            if let Some(pat_id) =\n+                                function.body(db).pats().find_map(|(pat_id, pat)| match pat {\n+                                    Pat::Path(ref path) if *path == p => Some(pat_id),\n+                                    _ => None,\n+                                })\n+                            {\n+                                if let Some(res) =\n+                                    infer_result.assoc_resolutions_for_pat(pat_id.into())\n+                                {\n+                                    return Exact(NavigationTarget::from_impl_item(db, res));\n+                                }\n+                            }\n                         }\n                     }\n                 }"}, {"sha": "638c24e3198434ab1fd38bba3c277a12779abe9f", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/aac421b1351d6c6dddb37a92a33d929b79ed1d70/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aac421b1351d6c6dddb37a92a33d929b79ed1d70/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=aac421b1351d6c6dddb37a92a33d929b79ed1d70", "patch": "@@ -534,4 +534,27 @@ mod tests {\n         assert_eq!(trim_markup_opt(hover.info.first()), Some(\"fn new() -> Thing\"));\n         assert_eq!(hover.info.is_exact(), true);\n     }\n+\n+    #[test]\n+    fn test_hover_infer_associated_const_in_pattern() {\n+        let (analysis, position) = single_file_with_position(\n+            \"\n+            struct X;\n+            impl X {\n+                const C: u32 = 1;\n+            }\n+\n+            fn main() {\n+                match 1 {\n+                    X::C<|> => {},\n+                    2 => {},\n+                    _ => {}\n+                };\n+            }\n+            \",\n+        );\n+        let hover = analysis.hover(position).unwrap().unwrap();\n+        assert_eq!(trim_markup_opt(hover.info.first()), Some(\"const C: u32\"));\n+        assert_eq!(hover.info.is_exact(), true);\n+    }\n }"}]}