{"sha": "7d0132ae90757af425a26a3d69c4d579b9b110a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkMDEzMmFlOTA3NTdhZjQyNWEyNmEzZDY5YzRkNTc5YjliMTEwYTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-20T11:19:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-20T11:19:31Z"}, "message": "Auto merge of #84363 - Dylan-DPC:rollup-ink2wyq, r=Dylan-DPC\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #84337 (Clarify the difference between insert and get_or_insert)\n - #84340 (rustdoc: Show nag box on IE11)\n - #84345 (Remove comment about doc hack.)\n - #84347 (rustdoc: Simplify some document functions)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "12ba1095f48caae00d76645b5f1da1dd5b8a84dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12ba1095f48caae00d76645b5f1da1dd5b8a84dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d0132ae90757af425a26a3d69c4d579b9b110a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d0132ae90757af425a26a3d69c4d579b9b110a6", "html_url": "https://github.com/rust-lang/rust/commit/7d0132ae90757af425a26a3d69c4d579b9b110a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d0132ae90757af425a26a3d69c4d579b9b110a6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6af1e632a974b78b62895e8cb918b889cf613882", "url": "https://api.github.com/repos/rust-lang/rust/commits/6af1e632a974b78b62895e8cb918b889cf613882", "html_url": "https://github.com/rust-lang/rust/commit/6af1e632a974b78b62895e8cb918b889cf613882"}, {"sha": "868de80ac2455b983cb90f2f9970b5992f177770", "url": "https://api.github.com/repos/rust-lang/rust/commits/868de80ac2455b983cb90f2f9970b5992f177770", "html_url": "https://github.com/rust-lang/rust/commit/868de80ac2455b983cb90f2f9970b5992f177770"}], "stats": {"total": 133, "additions": 48, "deletions": 85}, "files": [{"sha": "1c68abaf79d2355ece2f4f4e0ce56f192b65b14b", "filename": "library/core/src/option.rs", "status": "modified", "additions": 35, "deletions": 29, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/7d0132ae90757af425a26a3d69c4d579b9b110a6/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d0132ae90757af425a26a3d69c4d579b9b110a6/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=7d0132ae90757af425a26a3d69c4d579b9b110a6", "patch": "@@ -594,34 +594,6 @@ impl<T> Option<T> {\n         }\n     }\n \n-    /// Inserts `value` into the option then returns a mutable reference to it.\n-    ///\n-    /// If the option already contains a value, the old value is dropped.\n-    ///\n-    /// # Example\n-    ///\n-    /// ```\n-    /// let mut opt = None;\n-    /// let val = opt.insert(1);\n-    /// assert_eq!(*val, 1);\n-    /// assert_eq!(opt.unwrap(), 1);\n-    /// let val = opt.insert(2);\n-    /// assert_eq!(*val, 2);\n-    /// *val = 3;\n-    /// assert_eq!(opt.unwrap(), 3);\n-    /// ```\n-    #[inline]\n-    #[stable(feature = \"option_insert\", since = \"1.53.0\")]\n-    pub fn insert(&mut self, value: T) -> &mut T {\n-        *self = Some(value);\n-\n-        match self {\n-            Some(v) => v,\n-            // SAFETY: the code above just filled the option\n-            None => unsafe { hint::unreachable_unchecked() },\n-        }\n-    }\n-\n     /////////////////////////////////////////////////////////////////////////\n     // Iterator constructors\n     /////////////////////////////////////////////////////////////////////////\n@@ -849,12 +821,46 @@ impl<T> Option<T> {\n     }\n \n     /////////////////////////////////////////////////////////////////////////\n-    // Entry-like operations to insert if None and return a reference\n+    // Entry-like operations to insert a value and return a reference\n     /////////////////////////////////////////////////////////////////////////\n \n+    /// Inserts `value` into the option then returns a mutable reference to it.\n+    ///\n+    /// If the option already contains a value, the old value is dropped.\n+    ///\n+    /// See also [`Option::get_or_insert`], which doesn't update the value if\n+    /// the option already contains [`Some`].\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// let mut opt = None;\n+    /// let val = opt.insert(1);\n+    /// assert_eq!(*val, 1);\n+    /// assert_eq!(opt.unwrap(), 1);\n+    /// let val = opt.insert(2);\n+    /// assert_eq!(*val, 2);\n+    /// *val = 3;\n+    /// assert_eq!(opt.unwrap(), 3);\n+    /// ```\n+    #[inline]\n+    #[stable(feature = \"option_insert\", since = \"1.53.0\")]\n+    pub fn insert(&mut self, value: T) -> &mut T {\n+        *self = Some(value);\n+\n+        match self {\n+            Some(v) => v,\n+            // SAFETY: the code above just filled the option\n+            None => unsafe { hint::unreachable_unchecked() },\n+        }\n+    }\n+\n     /// Inserts `value` into the option if it is [`None`], then\n     /// returns a mutable reference to the contained value.\n     ///\n+    /// See also [`Option::insert`], which updates the value even if\n+    /// the option already contains [`Some`].\n+    ///\n     /// # Examples\n     ///\n     /// ```"}, {"sha": "87f8cf160e0018c24807b9f736734520187f7fe7", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7d0132ae90757af425a26a3d69c4d579b9b110a6/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d0132ae90757af425a26a3d69c4d579b9b110a6/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=7d0132ae90757af425a26a3d69c4d579b9b110a6", "patch": "@@ -461,15 +461,6 @@ impl Step for Std {\n         // create correct links between crates because rustdoc depends on the\n         // existence of the output directories to know if it should be a local\n         // or remote link.\n-        //\n-        // There's also a mild hack here where we build the first crate in this\n-        // list, core, twice. This is currently necessary to make sure that\n-        // cargo's cached rustc/rustdoc versions are up to date which means\n-        // cargo won't delete the out_dir we create for the stampfile.\n-        // Essentially any crate could go into the first slot here as it's\n-        // output directory will be deleted by us (as cargo will purge the stamp\n-        // file during the first slot's run), and core is relatively fast to\n-        // build so works OK to fill this 'dummy' slot.\n         let krates = [\"core\", \"alloc\", \"std\", \"proc_macro\", \"test\"];\n         for krate in &krates {\n             run_cargo_rustdoc_for(krate);"}, {"sha": "dc29add9333141ac7b1b7bac92b20a0f4f05dcfd", "filename": "src/librustdoc/html/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d0132ae90757af425a26a3d69c4d579b9b110a6/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d0132ae90757af425a26a3d69c4d579b9b110a6/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flayout.rs?ref=7d0132ae90757af425a26a3d69c4d579b9b110a6", "patch": "@@ -68,7 +68,7 @@ crate fn render<T: Print, S: Print>(\n     </style>\\\n </head>\\\n <body class=\\\"rustdoc {css_class}\\\">\\\n-    <!--[if lte IE 8]>\\\n+    <!--[if lte IE 11]>\\\n     <div class=\\\"warning\\\">\\\n         This old browser is unsupported and will most likely display funky \\\n         things.\\"}, {"sha": "d773f37ad90a3b6af995773effc68ea32d020db9", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 11, "deletions": 45, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/7d0132ae90757af425a26a3d69c4d579b9b110a6/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d0132ae90757af425a26a3d69c4d579b9b110a6/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=7d0132ae90757af425a26a3d69c4d579b9b110a6", "patch": "@@ -509,7 +509,7 @@ fn document(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, parent: Option\n         info!(\"Documenting {}\", name);\n     }\n     document_item_info(w, cx, item, false, parent);\n-    document_full(w, item, cx, \"\", false);\n+    document_full(w, item, cx, false);\n }\n \n /// Render md_text as markdown.\n@@ -518,15 +518,13 @@ fn render_markdown(\n     cx: &Context<'_>,\n     md_text: &str,\n     links: Vec<RenderedLink>,\n-    prefix: &str,\n     is_hidden: bool,\n ) {\n     let mut ids = cx.id_map.borrow_mut();\n     write!(\n         w,\n-        \"<div class=\\\"docblock{}\\\">{}{}</div>\",\n+        \"<div class=\\\"docblock{}\\\">{}</div>\",\n         if is_hidden { \" hidden\" } else { \"\" },\n-        prefix,\n         Markdown(\n             md_text,\n             &links,\n@@ -546,12 +544,11 @@ fn document_short(\n     item: &clean::Item,\n     cx: &Context<'_>,\n     link: AssocItemLink<'_>,\n-    prefix: &str,\n     is_hidden: bool,\n-    parent: Option<&clean::Item>,\n+    parent: &clean::Item,\n     show_def_docs: bool,\n ) {\n-    document_item_info(w, cx, item, is_hidden, parent);\n+    document_item_info(w, cx, item, is_hidden, Some(parent));\n     if !show_def_docs {\n         return;\n     }\n@@ -570,39 +567,17 @@ fn document_short(\n \n         write!(\n             w,\n-            \"<div class='docblock{}'>{}{}</div>\",\n+            \"<div class='docblock{}'>{}</div>\",\n             if is_hidden { \" hidden\" } else { \"\" },\n-            prefix,\n             summary_html,\n         );\n-    } else if !prefix.is_empty() {\n-        write!(\n-            w,\n-            \"<div class=\\\"docblock{}\\\">{}</div>\",\n-            if is_hidden { \" hidden\" } else { \"\" },\n-            prefix\n-        );\n     }\n }\n \n-fn document_full(\n-    w: &mut Buffer,\n-    item: &clean::Item,\n-    cx: &Context<'_>,\n-    prefix: &str,\n-    is_hidden: bool,\n-) {\n+fn document_full(w: &mut Buffer, item: &clean::Item, cx: &Context<'_>, is_hidden: bool) {\n     if let Some(s) = cx.shared.maybe_collapsed_doc_value(item) {\n         debug!(\"Doc block: =====\\n{}\\n=====\", s);\n-        render_markdown(w, cx, &*s, item.links(cx), prefix, is_hidden);\n-    } else if !prefix.is_empty() {\n-        if is_hidden {\n-            w.write_str(\"<div class=\\\"docblock hidden\\\">\");\n-        } else {\n-            w.write_str(\"<div class=\\\"docblock\\\">\");\n-        }\n-        w.write_str(prefix);\n-        w.write_str(\"</div>\");\n+        render_markdown(w, cx, &s, item.links(cx), is_hidden);\n     }\n }\n \n@@ -1547,30 +1522,21 @@ fn render_impl(\n                         // because impls can't have a stability.\n                         if item.doc_value().is_some() {\n                             document_item_info(w, cx, it, is_hidden, Some(parent));\n-                            document_full(w, item, cx, \"\", is_hidden);\n+                            document_full(w, item, cx, is_hidden);\n                         } else {\n                             // In case the item isn't documented,\n                             // provide short documentation from the trait.\n-                            document_short(\n-                                w,\n-                                it,\n-                                cx,\n-                                link,\n-                                \"\",\n-                                is_hidden,\n-                                Some(parent),\n-                                show_def_docs,\n-                            );\n+                            document_short(w, it, cx, link, is_hidden, parent, show_def_docs);\n                         }\n                     }\n                 } else {\n                     document_item_info(w, cx, item, is_hidden, Some(parent));\n                     if show_def_docs {\n-                        document_full(w, item, cx, \"\", is_hidden);\n+                        document_full(w, item, cx, is_hidden);\n                     }\n                 }\n             } else {\n-                document_short(w, item, cx, link, \"\", is_hidden, Some(parent), show_def_docs);\n+                document_short(w, item, cx, link, is_hidden, parent, show_def_docs);\n             }\n         }\n     }"}, {"sha": "be8d0a5996f9dcca99e80499cfe7a9cd34b6c214", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d0132ae90757af425a26a3d69c4d579b9b110a6/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/7d0132ae90757af425a26a3d69c4d579b9b110a6/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=7d0132ae90757af425a26a3d69c4d579b9b110a6", "patch": "@@ -1281,7 +1281,7 @@ function hideThemeButtonState() {\n         if (currentType) {\n             currentType = currentType.getElementsByClassName(\"rust\")[0];\n             if (currentType) {\n-                currentType.classList.forEach(function(item) {\n+                onEachLazy(currentType.classList, function(item) {\n                     if (item !== \"main\") {\n                         className = item;\n                         return true;"}]}