{"sha": "706be5ba1f65ede0ffe095df8fa79706cbb562c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwNmJlNWJhMWY2NWVkZTBmZmUwOTVkZjhmYTc5NzA2Y2JiNTYyYzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-02-05T23:14:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-02-05T23:14:28Z"}, "message": "Auto merge of #21619 - brson:featureck-tidy, r=alexcrichton\n\nBuilds on my [feature staging PR](https://github.com/rust-lang/rust/pull/21248) to clean up the tidy scripts a bit, and make them much faster (6s vs ~40s).\r\n\r\nAdds make rules 'tidy-basic', 'tidy-binaries', 'tidy-errors' and 'tidy-features'.\r\n\r\nThis is the output of `make tidy` here:\r\n\r\n```\r\ncfg: version 1.0.0-dev (a8c878d41 2015-01-25 01:49:14 -0800)\r\ncfg: build triple x86_64-unknown-linux-gnu\r\ncfg: host triples x86_64-unknown-linux-gnu\r\ncfg: target triples x86_64-unknown-linux-gnu\r\ncfg: host for x86_64-unknown-linux-gnu is x86_64\r\ncfg: os for x86_64-unknown-linux-gnu is unknown-linux-gnu\r\ncfg: good valgrind for x86_64-unknown-linux-gnu is 1\r\ncfg: using CC=gcc (CFG_CC)\r\ncfg: enabling valgrind run-pass tests (CFG_ENABLE_VALGRIND_RPASS)\r\ncfg: valgrind-rpass command set to \"/usr/bin/valgrind\" --error-exitcode=100 --soname-synonyms=somalloc=NONE --quiet --suppressions=/home/brian/dev/rust3/src/etc/x86.supp  --tool=memcheck --leak-check=full\r\ncfg: no lualatex found, deferring to xelatex\r\ncfg: no xelatex found, deferring to pdflatex\r\ncfg: no pdflatex found, disabling LaTeX docs\r\ncfg: no pandoc found, omitting PDF and EPUB docs\r\ncfg: including test rules\r\ncfg: javac not available, skipping lexer test...\r\ncheck: formatting\r\n\r\n* linted .rs files: 4948\r\n* linted .py files: 27\r\n* linted .js files: 2\r\n* linted .sh files: 5\r\n* linted .pl files: 0\r\n* linted .c files: 28\r\n* linted .h files: 3\r\n* other linted files: 0\r\n* total lines of code: 481217\r\n* total non-blank lines of code: 423682\r\n\r\ncheck: binaries\r\ncheck: extended errors\r\n\r\n* 249 error codes\r\n* highest error code: E0315\r\n\r\ncheck: feature sanity\r\n\r\n* advanced_slice_patterns         lang    unstable    None    \r\n* alloc                           lib     unstable    None    \r\n* asm                             lang    unstable    None    \r\n* associated_types                lang    stable      1.0.0   \r\n* box_syntax                      lang    unstable    None    \r\n* collections                     lib     unstable    None    \r\n* concat_idents                   lang    unstable    None    \r\n* core                            lib     unstable    None    \r\n* default_type_params             lang    stable      1.0.0   \r\n* globs                           lang    stable      1.0.0   \r\n* hash                            lib     unstable    None    \r\n* if_let                          lang    stable      1.0.0   \r\n* import_shadowing                lang    unstable    None    \r\n* int_uint                        lang    unstable    None    \r\n* intrinsics                      lang    unstable    None    \r\n* io                              lib     unstable    None    \r\n* issue_5723_bootstrap            lang    stable      1.0.0   \r\n* lang_items                      lang    unstable    None    \r\n* link_args                       lang    unstable    None    \r\n* link_llvm_intrinsics            lang    unstable    None    \r\n* linkage                         lang    unstable    None    \r\n* log_syntax                      lang    unstable    None    \r\n* macro_rules                     lang    stable      1.0.0   \r\n* main                            lang    unstable    None    \r\n* managed_boxes                   lang    unstable    None    \r\n* non_ascii_idents                lang    unstable    None    \r\n* old_impl_check                  lang    unstable    None    \r\n* old_orphan_check                lang    unstable    None    \r\n* on_unimplemented                lang    unstable    None    \r\n* opt_out_copy                    lang    unstable    None    \r\n* optin_builtin_traits            lang    unstable    None    \r\n* os                              lib     unstable    None    \r\n* path                            lib     unstable    None    \r\n* phase                           lang    unstable    None    \r\n* plugin                          lang    unstable    None    \r\n* plugin_registrar                lang    unstable    None    \r\n* quad_precision_float            lang    unstable    None    \r\n* quote                           lang    unstable    None    \r\n* rand                            lib     unstable    None    \r\n* rust1                           lib     stable      1.0.0   \r\n* rustc_diagnostic_macros         lang    unstable    None    \r\n* rustc_private                   lib     unstable    None    \r\n* rustdoc                         lib     unstable    None    \r\n* simd                            lang    unstable    None    \r\n* simd_ffi                        lang    unstable    None    \r\n* slicing_syntax                  lang    unstable    None    \r\n* staged_api                      lang    unstable    None    \r\n* start                           lang    unstable    None    \r\n* std_misc                        lib     unstable    None    \r\n* struct_inherit                  lang    unstable    None    \r\n* struct_variant                  lang    stable      1.0.0   \r\n* test                            lib     unstable    None    \r\n* test_accepted_feature           lang    stable      1.0.0   \r\n* test_removed_feature            lang    unstable    None    \r\n* thread_local                    lang    unstable    None    \r\n* trace_macros                    lang    unstable    None    \r\n* tuple_indexing                  lang    stable      1.0.0   \r\n* unboxed_closures                lang    unstable    None    \r\n* unicode                         lib     unstable    None    \r\n* unsafe_destructor               lang    unstable    None    \r\n* visible_private_types           lang    unstable    None    \r\n* while_let                       lang    stable      1.0.0   \r\n```\r\n\r\nThere's a lot of informational output now, which comes after things like 'NOTE's.", "tree": {"sha": "b571352662cebc7bf0fa72973ec4606c21c45990", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b571352662cebc7bf0fa72973ec4606c21c45990"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/706be5ba1f65ede0ffe095df8fa79706cbb562c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/706be5ba1f65ede0ffe095df8fa79706cbb562c8", "html_url": "https://github.com/rust-lang/rust/commit/706be5ba1f65ede0ffe095df8fa79706cbb562c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/706be5ba1f65ede0ffe095df8fa79706cbb562c8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99f6206c4ea9ecaf61feb39521db5dd72cb717b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/99f6206c4ea9ecaf61feb39521db5dd72cb717b0", "html_url": "https://github.com/rust-lang/rust/commit/99f6206c4ea9ecaf61feb39521db5dd72cb717b0"}, {"sha": "d0e82a68a9bf32eff2509e9f2579c5aa0fc61e92", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0e82a68a9bf32eff2509e9f2579c5aa0fc61e92", "html_url": "https://github.com/rust-lang/rust/commit/d0e82a68a9bf32eff2509e9f2579c5aa0fc61e92"}], "stats": {"total": 325, "additions": 205, "deletions": 120}, "files": [{"sha": "a760155bbd91aeeee3a961599f7a7cf86c4b331a", "filename": "Makefile.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/706be5ba1f65ede0ffe095df8fa79706cbb562c8/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/706be5ba1f65ede0ffe095df8fa79706cbb562c8/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=706be5ba1f65ede0ffe095df8fa79706cbb562c8", "patch": "@@ -59,6 +59,9 @@\n #   * check-stage$(stage)-$(crate) - Test a crate in a specific stage\n #   * check-stage$(stage)-{rpass,rfail,cfail,rmake,...} - Run tests in src/test/\n #   * check-stage1-T-$(target)-H-$(host) - Run cross-compiled-tests\n+#   * tidy-basic - show file / line stats\n+#   * tidy-errors - show the highest rustc error code\n+#   * tidy-features - show the status of language and lib features\n #\n # Then mix in some of these environment variables to harness the\n # ultimate power of The Rust Build System."}, {"sha": "a6b201a2b7bdfc7bd1a7c259bc7068ae6053fe90", "filename": "mk/main.mk", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/706be5ba1f65ede0ffe095df8fa79706cbb562c8/mk%2Fmain.mk", "raw_url": "https://github.com/rust-lang/rust/raw/706be5ba1f65ede0ffe095df8fa79706cbb562c8/mk%2Fmain.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fmain.mk?ref=706be5ba1f65ede0ffe095df8fa79706cbb562c8", "patch": "@@ -72,6 +72,7 @@ endif\n # numbers and dots here\n CFG_VERSION_WIN = $(CFG_RELEASE_NUM)\n \n+CFG_INFO := $(info cfg: version $(CFG_VERSION))\n \n ######################################################################\n # More configuration\n@@ -179,6 +180,7 @@ endif\n \n ifndef CFG_DISABLE_VALGRIND_RPASS\n   $(info cfg: enabling valgrind run-pass tests (CFG_ENABLE_VALGRIND_RPASS))\n+  $(info cfg: valgrind-rpass command set to $(CFG_VALGRIND))\n   CFG_VALGRIND_RPASS :=$(CFG_VALGRIND)\n else\n   CFG_VALGRIND_RPASS :="}, {"sha": "8728d816034894fd92ebee4a18e5a87714248fb4", "filename": "mk/tests.mk", "status": "modified", "additions": 23, "deletions": 51, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/706be5ba1f65ede0ffe095df8fa79706cbb562c8/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/706be5ba1f65ede0ffe095df8fa79706cbb562c8/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=706be5ba1f65ede0ffe095df8fa79706cbb562c8", "patch": "@@ -162,7 +162,8 @@ $(foreach file,$(wildcard $(S)src/doc/trpl/*.md), \\\n ######################################################################\n \n # The main testing target. Tests lots of stuff.\n-check: cleantmptestlogs cleantestlibs check-notidy tidy\n+check: cleantmptestlogs cleantestlibs all check-stage2 tidy\n+\t$(Q)$(CFG_PYTHON) $(S)src/etc/check-summary.py tmp/*.log\n \n # As above but don't bother running tidy.\n check-notidy: cleantmptestlogs cleantestlibs all check-stage2\n@@ -235,57 +236,24 @@ cleantestlibs:\n ######################################################################\n \n ifdef CFG_NOTIDY\n+.PHONY: tidy\n tidy:\n else\n \n-ALL_CS := $(wildcard $(S)src/rt/*.cpp \\\n-                     $(S)src/rt/*/*.cpp \\\n-                     $(S)src/rt/*/*/*.cpp \\\n-                     $(S)src/rustllvm/*.cpp)\n-ALL_CS := $(filter-out $(S)src/rt/miniz.cpp \\\n-\t\t       $(wildcard $(S)src/rt/hoedown/src/*.c) \\\n-\t\t       $(wildcard $(S)src/rt/hoedown/bin/*.c) \\\n-\t,$(ALL_CS))\n-ALL_HS := $(wildcard $(S)src/rt/*.h \\\n-                     $(S)src/rt/*/*.h \\\n-                     $(S)src/rt/*/*/*.h \\\n-                     $(S)src/rustllvm/*.h)\n-ALL_HS := $(filter-out $(S)src/rt/valgrind/valgrind.h \\\n-                       $(S)src/rt/valgrind/memcheck.h \\\n-                       $(S)src/rt/msvc/typeof.h \\\n-                       $(S)src/rt/msvc/stdint.h \\\n-                       $(S)src/rt/msvc/inttypes.h \\\n-\t\t       $(wildcard $(S)src/rt/hoedown/src/*.h) \\\n-\t\t       $(wildcard $(S)src/rt/hoedown/bin/*.h) \\\n-\t,$(ALL_HS))\n-\n # Run the tidy script in multiple parts to avoid huge 'echo' commands\n-tidy:\n+.PHONY: tidy\n+tidy: tidy-basic tidy-binaries tidy-errors tidy-features\n+\n+endif\n+\n+.PHONY: tidy-basic\n+tidy-basic:\n \t\t@$(call E, check: formatting)\n-\t\t$(Q)find $(S)src -name '*.r[sc]' \\\n-\t\t    -and -not -regex '^$(S)src/jemalloc.*' \\\n-\t\t    -and -not -regex '^$(S)src/libuv.*' \\\n-\t\t    -and -not -regex '^$(S)src/llvm.*' \\\n-\t\t    -and -not -regex '^$(S)src/gyp.*' \\\n-\t\t    -and -not -regex '^$(S)src/libbacktrace.*' \\\n-\t\t    -print0 \\\n-\t\t| xargs -0 -n 10 $(CFG_PYTHON) $(S)src/etc/tidy.py\n-\t\t$(Q)find $(S)src/etc -name '*.py' \\\n-\t\t| xargs -n 10 $(CFG_PYTHON) $(S)src/etc/tidy.py\n-\t\t$(Q)find $(S)src/doc -name '*.js' \\\n-\t\t| xargs -n 10 $(CFG_PYTHON) $(S)src/etc/tidy.py\n-\t\t$(Q)find $(S)src/etc -name '*.sh' \\\n-\t\t| xargs -n 10 $(CFG_PYTHON) $(S)src/etc/tidy.py\n-\t\t$(Q)find $(S)src/etc -name '*.pl' \\\n-\t\t| xargs -n 10 $(CFG_PYTHON) $(S)src/etc/tidy.py\n-\t\t$(Q)find $(S)src/etc -name '*.c' \\\n-\t\t| xargs -n 10 $(CFG_PYTHON) $(S)src/etc/tidy.py\n-\t\t$(Q)find $(S)src/etc -name '*.h' \\\n-\t\t| xargs -n 10 $(CFG_PYTHON) $(S)src/etc/tidy.py\n-\t\t$(Q)echo $(ALL_CS) \\\n-\t\t| xargs -n 10 $(CFG_PYTHON) $(S)src/etc/tidy.py\n-\t\t$(Q)echo $(ALL_HS) \\\n-\t\t| xargs -n 10 $(CFG_PYTHON) $(S)src/etc/tidy.py\n+\t\t$(Q) $(CFG_PYTHON) $(S)src/etc/tidy.py $(S)src/\n+\n+.PHONY: tidy-binaries\n+tidy-binaries:\n+\t\t@$(call E, check: binaries)\n \t\t$(Q)find $(S)src -type f -perm +a+x \\\n \t\t    -not -name '*.rs' -and -not -name '*.py' \\\n \t\t    -and -not -name '*.sh' \\\n@@ -300,11 +268,16 @@ tidy:\n \t\t| grep '^$(S)src/libbacktrace' -v \\\n \t\t| grep '^$(S)src/rust-installer' -v \\\n \t\t| xargs $(CFG_PYTHON) $(S)src/etc/check-binaries.py\n-\t\t$(Q) $(CFG_PYTHON) $(S)src/etc/errorck.py $(S)src/\n-\t\t$(Q) $(CFG_PYTHON) $(S)src/etc/featureck.py $(S)src/\n \n+.PHONY: tidy-errors\n+tidy-errors:\n+\t\t@$(call E, check: extended errors)\n+\t\t$(Q) $(CFG_PYTHON) $(S)src/etc/errorck.py $(S)src/\n \n-endif\n+.PHONY: tidy-features\n+tidy-features:\n+\t\t@$(call E, check: feature sanity)\n+\t\t$(Q) $(CFG_PYTHON) $(S)src/etc/featureck.py $(S)src/\n \n \n ######################################################################\n@@ -639,7 +612,6 @@ CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3) := \\\n \n ifdef CFG_VALGRIND_RPASS\n ifdef GOOD_VALGRIND_$(2)\n-$(info cfg: valgrind-path set to $(CFG_VALGRIND_RPASS))\n CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3) += --valgrind-path \"$(CFG_VALGRIND_RPASS)\"\n endif\n endif"}, {"sha": "7b11504f3cd8023b63c4948f7bb2a97f15f54b27", "filename": "src/etc/errorck.py", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/706be5ba1f65ede0ffe095df8fa79706cbb562c8/src%2Fetc%2Ferrorck.py", "raw_url": "https://github.com/rust-lang/rust/raw/706be5ba1f65ede0ffe095df8fa79706cbb562c8/src%2Fetc%2Ferrorck.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Ferrorck.py?ref=706be5ba1f65ede0ffe095df8fa79706cbb562c8", "patch": "@@ -15,6 +15,10 @@\n import os\n import re\n \n+if len(sys.argv) < 2:\n+    print \"usage: errorck.py <src-dir>\"\n+    sys.exit(1)\n+\n src_dir = sys.argv[1]\n errcode_map = {}\n error_re = re.compile(\"(E\\d\\d\\d\\d)\")\n@@ -54,8 +58,10 @@\n             print(\"{1}: {2}\\n{3}\".format(*entry))\n         errors = True\n \n-print(\"{0} error codes\".format(len(errcode_map)))\n-print(\"highest error code: \" + max(all_errors))\n+print\n+print(\"* {0} error codes\".format(len(errcode_map)))\n+print(\"* highest error code: \" + max(all_errors))\n+print\n \n if errors:\n     sys.exit(1)"}, {"sha": "df4ea998fefc2b330ae2d0d0afcae0eb56275a1c", "filename": "src/etc/featureck.py", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/706be5ba1f65ede0ffe095df8fa79706cbb562c8/src%2Fetc%2Ffeatureck.py", "raw_url": "https://github.com/rust-lang/rust/raw/706be5ba1f65ede0ffe095df8fa79706cbb562c8/src%2Fetc%2Ffeatureck.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Ffeatureck.py?ref=706be5ba1f65ede0ffe095df8fa79706cbb562c8", "patch": "@@ -20,6 +20,10 @@\n \n import sys, os, re\n \n+if len(sys.argv) < 2:\n+    print \"usage: featurkck.py <src-dir>\"\n+    sys.exit(1)\n+\n src_dir = sys.argv[1]\n \n # Features that are allowed to exist in both the language and the library\n@@ -234,10 +238,8 @@\n \n lines.sort()\n \n-print\n-print \"Rust feature summary:\"\n print\n for line in lines:\n-    print line\n+    print \"* \" + line\n print\n "}, {"sha": "889b2c95a7ea88c5a740c8a4bfda2e607801d006", "filename": "src/etc/licenseck.py", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/706be5ba1f65ede0ffe095df8fa79706cbb562c8/src%2Fetc%2Flicenseck.py", "raw_url": "https://github.com/rust-lang/rust/raw/706be5ba1f65ede0ffe095df8fa79706cbb562c8/src%2Fetc%2Flicenseck.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Flicenseck.py?ref=706be5ba1f65ede0ffe095df8fa79706cbb562c8", "patch": "@@ -22,11 +22,6 @@\n \\\\1 except according to those terms.\"\"\")\n \n exceptions = [\n-    \"rt/rust_android_dummy.cpp\", # BSD, chromium\n-    \"rt/rust_android_dummy.h\", # BSD, chromium\n-    \"rt/isaac/randport.cpp\", # public domain\n-    \"rt/isaac/rand.h\", # public domain\n-    \"rt/isaac/standard.h\", # public domain\n     \"libstd/sync/mpsc/mpsc_queue.rs\", # BSD\n     \"libstd/sync/mpsc/spsc_queue.rs\", # BSD\n     \"test/bench/shootout-binarytrees.rs\", # BSD"}, {"sha": "fd3309dce12cbd01e1c573e05beeddb096a7c2f1", "filename": "src/etc/tidy.py", "status": "modified", "additions": 127, "deletions": 50, "changes": 177, "blob_url": "https://github.com/rust-lang/rust/blob/706be5ba1f65ede0ffe095df8fa79706cbb562c8/src%2Fetc%2Ftidy.py", "raw_url": "https://github.com/rust-lang/rust/raw/706be5ba1f65ede0ffe095df8fa79706cbb562c8/src%2Fetc%2Ftidy.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Ftidy.py?ref=706be5ba1f65ede0ffe095df8fa79706cbb562c8", "patch": "@@ -51,78 +51,155 @@ def do_license_check(name, contents):\n     if not check_license(name, contents):\n         report_error_name_no(name, 1, \"incorrect license\")\n \n-\n-file_names = [s for s in sys.argv[1:] if (not s.endswith(\"_gen.rs\"))\n-                                     and (not \".#\" in s)]\n-\n current_name = \"\"\n current_contents = \"\"\n check_tab = True\n check_cr = True\n check_linelength = True\n \n+if len(sys.argv) < 2:\n+    print \"usage: tidy.py <src-dir>\"\n+    sys.exit(1)\n+\n+src_dir = sys.argv[1]\n \n try:\n-    for line in fileinput.input(file_names,\n+    count_lines = 0\n+    count_non_blank_lines = 0\n+\n+    interesting_files = ['.rs', '.py', '.js', '.sh', '.c', '.h']\n+\n+    file_counts = {ext: 0 for ext in interesting_files}\n+    file_counts['other'] = 0\n+\n+    def update_counts(current_name):\n+        global file_counts\n+        _, ext = os.path.splitext(current_name)\n+\n+        if ext in file_counts:\n+            file_counts[ext] += 1\n+        else:\n+            file_counts['other'] += 1\n+\n+    all_paths = set()\n+\n+    for (dirpath, dirnames, filenames) in os.walk(src_dir):\n+\n+        # Skip some third-party directories\n+        skippable_dirs = {\n+            'src/jemalloc',\n+            'src/llvm',\n+            'src/gyp',\n+            'src/libbacktrace',\n+            'src/libuv',\n+            'src/compiler-rt',\n+            'src/rt/hoedown',\n+            'src/rustllvm',\n+            'src/rt/valgrind',\n+            'src/rt/msvc',\n+            'src/rust-installer'\n+        }\n+\n+        if any(d in dirpath for d in skippable_dirs):\n+            continue\n+\n+        def interesting_file(f):\n+            if \"miniz.c\" in f \\\n+            or \"jquery\" in f \\\n+            or \"rust_android_dummy\" in f:\n+                return False\n+\n+            return any(os.path.splitext(f)[1] == ext for ext in interesting_files)\n+\n+        file_names = [os.path.join(dirpath, f) for f in filenames\n+                      if interesting_file(f)\n+                      and not f.endswith(\"_gen.rs\")\n+                      and not \".#\" is f]\n+\n+        if not file_names:\n+            continue\n+\n+        for line in fileinput.input(file_names,\n                                 openhook=fileinput.hook_encoded(\"utf-8\")):\n \n-        if \"tidy.py\" not in fileinput.filename():\n+            filename = fileinput.filename()\n+\n+            if \"tidy.py\" not in filename:\n+                if \"TODO\" in line:\n+                    report_err(\"TODO is deprecated; use FIXME\")\n+                match = re.match(r'^.*/(\\*|/!?)\\s*XXX', line)\n+                if match:\n+                    report_err(\"XXX is no longer necessary, use FIXME\")\n+                match = re.match(r'^.*//\\s*(NOTE.*)$', line)\n+                if match and \"TRAVIS\" not in os.environ:\n+                    m = match.group(1)\n+                    if \"snap\" in m.lower():\n+                        report_warn(match.group(1))\n+                match = re.match(r'^.*//\\s*SNAP\\s+(\\w+)', line)\n+                if match:\n+                    hsh = match.group(1)\n+                    date, rev = snapshot.curr_snapshot_rev()\n+                    if not hsh.startswith(rev):\n+                        report_err(\"snapshot out of date (\" + date\n+                            + \"): \" + line)\n+                else:\n+                    if \"SNAP\" in line:\n+                        report_warn(\"unmatched SNAP line: \" + line)\n+\n             if cr_flag in line:\n                 check_cr = False\n             if tab_flag in line:\n                 check_tab = False\n             if linelength_flag in line:\n                 check_linelength = False\n-            if \"TODO\" in line:\n-                report_err(\"TODO is deprecated; use FIXME\")\n-            match = re.match(r'^.*/(\\*|/!?)\\s*XXX', line)\n-            if match:\n-                report_err(\"XXX is no longer necessary, use FIXME\")\n-            match = re.match(r'^.*//\\s*(NOTE.*)$', line)\n-            if match and \"TRAVIS\" not in os.environ:\n-                m = match.group(1)\n-                if \"snap\" in m.lower():\n-                    report_warn(match.group(1))\n-            match = re.match(r'^.*//\\s*SNAP\\s+(\\w+)', line)\n-            if match:\n-                hsh = match.group(1)\n-                date, rev = snapshot.curr_snapshot_rev()\n-                if not hsh.startswith(rev):\n-                    report_err(\"snapshot out of date (\" + date\n-                               + \"): \" + line)\n-            else:\n-                if \"SNAP\" in line:\n-                    report_warn(\"unmatched SNAP line: \" + line)\n-\n-        if check_tab and ('\\t' in line and\n-                          \"Makefile\" not in fileinput.filename()):\n-            report_err(\"tab character\")\n-        if check_cr and not autocrlf and '\\r' in line:\n-            report_err(\"CR character\")\n-        if line.endswith(\" \\n\") or line.endswith(\"\\t\\n\"):\n-            report_err(\"trailing whitespace\")\n-        line_len = len(line)-2 if autocrlf else len(line)-1\n-\n-        if check_linelength and line_len > cols:\n-            report_err(\"line longer than %d chars\" % cols)\n-\n-        if fileinput.isfirstline() and current_name != \"\":\n-            do_license_check(current_name, current_contents)\n-\n-        if fileinput.isfirstline():\n-            current_name = fileinput.filename()\n-            current_contents = \"\"\n-            check_cr = True\n-            check_tab = True\n-            check_linelength = True\n-\n-        current_contents += line\n+\n+            if check_tab and ('\\t' in line and\n+                              \"Makefile\" not in filename):\n+                report_err(\"tab character\")\n+            if check_cr and not autocrlf and '\\r' in line:\n+                report_err(\"CR character\")\n+            if line.endswith(\" \\n\") or line.endswith(\"\\t\\n\"):\n+                report_err(\"trailing whitespace\")\n+            line_len = len(line)-2 if autocrlf else len(line)-1\n+\n+            if check_linelength and line_len > cols:\n+                report_err(\"line longer than %d chars\" % cols)\n+\n+            if fileinput.isfirstline():\n+                # This happens at the end of each file except the last.\n+                if current_name != \"\":\n+                    update_counts(current_name)\n+                    assert len(current_contents) > 0\n+                    do_license_check(current_name, current_contents)\n+\n+                current_name = filename\n+                current_contents = \"\"\n+                check_cr = True\n+                check_tab = True\n+                check_linelength = True\n+\n+            # Put a reasonable limit on the amount of header data we use for\n+            # the licenseck\n+            if len(current_contents) < 1000:\n+                current_contents += line\n+\n+            count_lines += 1\n+            if line.strip():\n+                count_non_blank_lines += 1\n \n     if current_name != \"\":\n+        update_counts(current_name)\n+        assert len(current_contents) > 0\n         do_license_check(current_name, current_contents)\n \n except UnicodeDecodeError as e:\n     report_err(\"UTF-8 decoding error \" + str(e))\n \n+print\n+for ext in file_counts:\n+    print \"* linted \" + str(file_counts[ext]) + \" \" + ext + \" files\"\n+print \"* total lines of code: \" + str(count_lines)\n+print \"* total non-blank lines of code: \" + str(count_non_blank_lines)\n+print\n \n sys.exit(err)"}, {"sha": "b5be3daa13e1d01b4f294f61b81b94f42dc1011f", "filename": "src/grammar/check.sh", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/706be5ba1f65ede0ffe095df8fa79706cbb562c8/src%2Fgrammar%2Fcheck.sh", "raw_url": "https://github.com/rust-lang/rust/raw/706be5ba1f65ede0ffe095df8fa79706cbb562c8/src%2Fgrammar%2Fcheck.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fcheck.sh?ref=706be5ba1f65ede0ffe095df8fa79706cbb562c8", "patch": "@@ -1,5 +1,7 @@\n #!/bin/sh\n \n+# ignore-license\n+\n # Run the reference lexer against libsyntax and compare the tokens and spans.\n # If \"// ignore-lexer-test\" is present in the file, it will be ignored.\n "}, {"sha": "16babd4194e4d73815dd03eb8e9e6270441fb25e", "filename": "src/grammar/testparser.py", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/706be5ba1f65ede0ffe095df8fa79706cbb562c8/src%2Fgrammar%2Ftestparser.py", "raw_url": "https://github.com/rust-lang/rust/raw/706be5ba1f65ede0ffe095df8fa79706cbb562c8/src%2Fgrammar%2Ftestparser.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Ftestparser.py?ref=706be5ba1f65ede0ffe095df8fa79706cbb562c8", "patch": "@@ -9,6 +9,9 @@\n # <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n # option. This file may not be copied, modified, or distributed\n # except according to those terms.\n+\n+# ignore-tidy-linelength\n+\n import sys\n \n import os"}, {"sha": "6bf86f527390ff97b9a933933501faaa497446fb", "filename": "src/rt/rust_builtin.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/706be5ba1f65ede0ffe095df8fa79706cbb562c8/src%2Frt%2Frust_builtin.c", "raw_url": "https://github.com/rust-lang/rust/raw/706be5ba1f65ede0ffe095df8fa79706cbb562c8/src%2Frt%2Frust_builtin.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.c?ref=706be5ba1f65ede0ffe095df8fa79706cbb562c8", "patch": "@@ -47,7 +47,8 @@ extern char **environ;\n #endif\n #endif\n \n-#if defined(__FreeBSD__) || defined(__linux__) || defined(__ANDROID__) || defined(__DragonFly__) || defined(__OpenBSD__)\n+#if defined(__FreeBSD__) || defined(__linux__) || defined(__ANDROID__) \\\n+  || defined(__DragonFly__) || defined(__OpenBSD__)\n extern char **environ;\n #endif\n \n@@ -235,7 +236,7 @@ const char * rust_load_self() {\n \n         /* get realpath if possible */\n         if ((argv[0] != NULL) && ((*argv[0] == '.') || (*argv[0] == '/')\n-\t\t\t\t|| (strstr(argv[0], \"/\") != NULL)))\n+                                || (strstr(argv[0], \"/\") != NULL)))\n \n             self = realpath(argv[0], NULL);\n         else"}, {"sha": "113717a776a99f8f533c6d77622170a747568e35", "filename": "src/test/run-make/c-dynamic-dylib/cfoo.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/706be5ba1f65ede0ffe095df8fa79706cbb562c8/src%2Ftest%2Frun-make%2Fc-dynamic-dylib%2Fcfoo.c", "raw_url": "https://github.com/rust-lang/rust/raw/706be5ba1f65ede0ffe095df8fa79706cbb562c8/src%2Ftest%2Frun-make%2Fc-dynamic-dylib%2Fcfoo.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-dynamic-dylib%2Fcfoo.c?ref=706be5ba1f65ede0ffe095df8fa79706cbb562c8", "patch": "@@ -1 +1,2 @@\n+// ignore-license\n int foo() { return 0; }"}, {"sha": "113717a776a99f8f533c6d77622170a747568e35", "filename": "src/test/run-make/c-dynamic-rlib/cfoo.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/706be5ba1f65ede0ffe095df8fa79706cbb562c8/src%2Ftest%2Frun-make%2Fc-dynamic-rlib%2Fcfoo.c", "raw_url": "https://github.com/rust-lang/rust/raw/706be5ba1f65ede0ffe095df8fa79706cbb562c8/src%2Ftest%2Frun-make%2Fc-dynamic-rlib%2Fcfoo.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-dynamic-rlib%2Fcfoo.c?ref=706be5ba1f65ede0ffe095df8fa79706cbb562c8", "patch": "@@ -1 +1,2 @@\n+// ignore-license\n int foo() { return 0; }"}, {"sha": "5729d411c5bcd9a974e321a4a535e0b08c7dfc0b", "filename": "src/test/run-make/c-link-to-rust-dylib/bar.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/706be5ba1f65ede0ffe095df8fa79706cbb562c8/src%2Ftest%2Frun-make%2Fc-link-to-rust-dylib%2Fbar.c", "raw_url": "https://github.com/rust-lang/rust/raw/706be5ba1f65ede0ffe095df8fa79706cbb562c8/src%2Ftest%2Frun-make%2Fc-link-to-rust-dylib%2Fbar.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-link-to-rust-dylib%2Fbar.c?ref=706be5ba1f65ede0ffe095df8fa79706cbb562c8", "patch": "@@ -1,3 +1,4 @@\n+// ignore-license\n void foo();\n \n int main() {"}, {"sha": "5729d411c5bcd9a974e321a4a535e0b08c7dfc0b", "filename": "src/test/run-make/c-link-to-rust-staticlib/bar.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/706be5ba1f65ede0ffe095df8fa79706cbb562c8/src%2Ftest%2Frun-make%2Fc-link-to-rust-staticlib%2Fbar.c", "raw_url": "https://github.com/rust-lang/rust/raw/706be5ba1f65ede0ffe095df8fa79706cbb562c8/src%2Ftest%2Frun-make%2Fc-link-to-rust-staticlib%2Fbar.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-link-to-rust-staticlib%2Fbar.c?ref=706be5ba1f65ede0ffe095df8fa79706cbb562c8", "patch": "@@ -1,3 +1,4 @@\n+// ignore-license\n void foo();\n \n int main() {"}, {"sha": "113717a776a99f8f533c6d77622170a747568e35", "filename": "src/test/run-make/c-static-dylib/cfoo.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/706be5ba1f65ede0ffe095df8fa79706cbb562c8/src%2Ftest%2Frun-make%2Fc-static-dylib%2Fcfoo.c", "raw_url": "https://github.com/rust-lang/rust/raw/706be5ba1f65ede0ffe095df8fa79706cbb562c8/src%2Ftest%2Frun-make%2Fc-static-dylib%2Fcfoo.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-static-dylib%2Fcfoo.c?ref=706be5ba1f65ede0ffe095df8fa79706cbb562c8", "patch": "@@ -1 +1,2 @@\n+// ignore-license\n int foo() { return 0; }"}, {"sha": "113717a776a99f8f533c6d77622170a747568e35", "filename": "src/test/run-make/c-static-rlib/cfoo.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/706be5ba1f65ede0ffe095df8fa79706cbb562c8/src%2Ftest%2Frun-make%2Fc-static-rlib%2Fcfoo.c", "raw_url": "https://github.com/rust-lang/rust/raw/706be5ba1f65ede0ffe095df8fa79706cbb562c8/src%2Ftest%2Frun-make%2Fc-static-rlib%2Fcfoo.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-static-rlib%2Fcfoo.c?ref=706be5ba1f65ede0ffe095df8fa79706cbb562c8", "patch": "@@ -1 +1,2 @@\n+// ignore-license\n int foo() { return 0; }"}, {"sha": "f9faef64afc41a519832a2372d48e7cea401fad4", "filename": "src/test/run-make/extern-fn-generic/test.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/706be5ba1f65ede0ffe095df8fa79706cbb562c8/src%2Ftest%2Frun-make%2Fextern-fn-generic%2Ftest.c", "raw_url": "https://github.com/rust-lang/rust/raw/706be5ba1f65ede0ffe095df8fa79706cbb562c8/src%2Ftest%2Frun-make%2Fextern-fn-generic%2Ftest.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-fn-generic%2Ftest.c?ref=706be5ba1f65ede0ffe095df8fa79706cbb562c8", "patch": "@@ -1,16 +1,17 @@\n+// ignore-license\n #include <stdint.h>\n \n typedef struct TestStruct {\n-\tuint8_t x;\n-\tint32_t y;\n+        uint8_t x;\n+        int32_t y;\n } TestStruct;\n \n typedef int callback(TestStruct s);\n \n uint32_t call(callback *c) {\n-\tTestStruct s;\n-\ts.x = 'a';\n-\ts.y = 3;\n+        TestStruct s;\n+        s.x = 'a';\n+        s.y = 3;\n \n-\treturn c(s);\n+        return c(s);\n }"}, {"sha": "1a9855dedec490f85bcec3c5efc8212d19f44fb6", "filename": "src/test/run-make/extern-fn-mangle/test.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/706be5ba1f65ede0ffe095df8fa79706cbb562c8/src%2Ftest%2Frun-make%2Fextern-fn-mangle%2Ftest.c", "raw_url": "https://github.com/rust-lang/rust/raw/706be5ba1f65ede0ffe095df8fa79706cbb562c8/src%2Ftest%2Frun-make%2Fextern-fn-mangle%2Ftest.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-fn-mangle%2Ftest.c?ref=706be5ba1f65ede0ffe095df8fa79706cbb562c8", "patch": "@@ -1,8 +1,9 @@\n+// ignore-license\n #include <stdint.h>\n \n uint32_t foo();\n uint32_t bar();\n \n uint32_t add() {\n-\treturn foo() + bar();\n+        return foo() + bar();\n }"}, {"sha": "121e48e84e46fd8ba2fbbbbf1eb32c99f4859a37", "filename": "src/test/run-make/extern-fn-with-packed-struct/test.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/706be5ba1f65ede0ffe095df8fa79706cbb562c8/src%2Ftest%2Frun-make%2Fextern-fn-with-packed-struct%2Ftest.c", "raw_url": "https://github.com/rust-lang/rust/raw/706be5ba1f65ede0ffe095df8fa79706cbb562c8/src%2Ftest%2Frun-make%2Fextern-fn-with-packed-struct%2Ftest.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-fn-with-packed-struct%2Ftest.c?ref=706be5ba1f65ede0ffe095df8fa79706cbb562c8", "patch": "@@ -1,3 +1,4 @@\n+// ignore-license\n // Pragma needed cause of gcc bug on windows: http://gcc.gnu.org/bugzilla/show_bug.cgi?id=52991\n #pragma pack(1)\n struct __attribute__((packed)) Foo {"}, {"sha": "8c87c230693d1d0d490d2028ac9b302f2c0d12f3", "filename": "src/test/run-make/extern-fn-with-union/test.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/706be5ba1f65ede0ffe095df8fa79706cbb562c8/src%2Ftest%2Frun-make%2Fextern-fn-with-union%2Ftest.c", "raw_url": "https://github.com/rust-lang/rust/raw/706be5ba1f65ede0ffe095df8fa79706cbb562c8/src%2Ftest%2Frun-make%2Fextern-fn-with-union%2Ftest.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-fn-with-union%2Ftest.c?ref=706be5ba1f65ede0ffe095df8fa79706cbb562c8", "patch": "@@ -1,3 +1,4 @@\n+// ignore-license\n #include <stdio.h>\n #include <stdint.h>\n "}, {"sha": "c761f029effbec56ea1bf0e5a7690eb3f3baa57c", "filename": "src/test/run-make/interdependent-c-libraries/bar.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/706be5ba1f65ede0ffe095df8fa79706cbb562c8/src%2Ftest%2Frun-make%2Finterdependent-c-libraries%2Fbar.c", "raw_url": "https://github.com/rust-lang/rust/raw/706be5ba1f65ede0ffe095df8fa79706cbb562c8/src%2Ftest%2Frun-make%2Finterdependent-c-libraries%2Fbar.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Finterdependent-c-libraries%2Fbar.c?ref=706be5ba1f65ede0ffe095df8fa79706cbb562c8", "patch": "@@ -1,3 +1,4 @@\n+// ignore-license\n void foo();\n \n void bar() { foo(); }"}, {"sha": "2895ad473bf966158015a0295e161767b673f29a", "filename": "src/test/run-make/interdependent-c-libraries/foo.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/706be5ba1f65ede0ffe095df8fa79706cbb562c8/src%2Ftest%2Frun-make%2Finterdependent-c-libraries%2Ffoo.c", "raw_url": "https://github.com/rust-lang/rust/raw/706be5ba1f65ede0ffe095df8fa79706cbb562c8/src%2Ftest%2Frun-make%2Finterdependent-c-libraries%2Ffoo.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Finterdependent-c-libraries%2Ffoo.c?ref=706be5ba1f65ede0ffe095df8fa79706cbb562c8", "patch": "@@ -1 +1,2 @@\n+// ignore-license\n void foo() {}"}, {"sha": "186a0046e80ac2dc6a9c56a245a247f80946083e", "filename": "src/test/run-make/issue-12446/foo.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/706be5ba1f65ede0ffe095df8fa79706cbb562c8/src%2Ftest%2Frun-make%2Fissue-12446%2Ffoo.c", "raw_url": "https://github.com/rust-lang/rust/raw/706be5ba1f65ede0ffe095df8fa79706cbb562c8/src%2Ftest%2Frun-make%2Fissue-12446%2Ffoo.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-12446%2Ffoo.c?ref=706be5ba1f65ede0ffe095df8fa79706cbb562c8", "patch": "@@ -1 +1,2 @@\n+// ignore-license\n void some_c_symbol() {}"}, {"sha": "2895ad473bf966158015a0295e161767b673f29a", "filename": "src/test/run-make/issue-15460/foo.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/706be5ba1f65ede0ffe095df8fa79706cbb562c8/src%2Ftest%2Frun-make%2Fissue-15460%2Ffoo.c", "raw_url": "https://github.com/rust-lang/rust/raw/706be5ba1f65ede0ffe095df8fa79706cbb562c8/src%2Ftest%2Frun-make%2Fissue-15460%2Ffoo.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-15460%2Ffoo.c?ref=706be5ba1f65ede0ffe095df8fa79706cbb562c8", "patch": "@@ -1 +1,2 @@\n+// ignore-license\n void foo() {}"}, {"sha": "a595939f92e8ceaed80490e0752c7472df873c63", "filename": "src/test/run-make/link-path-order/correct.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/706be5ba1f65ede0ffe095df8fa79706cbb562c8/src%2Ftest%2Frun-make%2Flink-path-order%2Fcorrect.c", "raw_url": "https://github.com/rust-lang/rust/raw/706be5ba1f65ede0ffe095df8fa79706cbb562c8/src%2Ftest%2Frun-make%2Flink-path-order%2Fcorrect.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flink-path-order%2Fcorrect.c?ref=706be5ba1f65ede0ffe095df8fa79706cbb562c8", "patch": "@@ -1 +1,2 @@\n+// ignore-license\n int should_return_one() { return 1; }"}, {"sha": "c53e7e3c48c058cdf12cf54043aa94e4882d71ec", "filename": "src/test/run-make/link-path-order/wrong.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/706be5ba1f65ede0ffe095df8fa79706cbb562c8/src%2Ftest%2Frun-make%2Flink-path-order%2Fwrong.c", "raw_url": "https://github.com/rust-lang/rust/raw/706be5ba1f65ede0ffe095df8fa79706cbb562c8/src%2Ftest%2Frun-make%2Flink-path-order%2Fwrong.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flink-path-order%2Fwrong.c?ref=706be5ba1f65ede0ffe095df8fa79706cbb562c8", "patch": "@@ -1 +1,2 @@\n+// ignore-license\n int should_return_one() { return 0; }"}, {"sha": "d7d33ea12e8061544e43400232159f3fe500ecf8", "filename": "src/test/run-make/linkage-attr-on-static/foo.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/706be5ba1f65ede0ffe095df8fa79706cbb562c8/src%2Ftest%2Frun-make%2Flinkage-attr-on-static%2Ffoo.c", "raw_url": "https://github.com/rust-lang/rust/raw/706be5ba1f65ede0ffe095df8fa79706cbb562c8/src%2Ftest%2Frun-make%2Flinkage-attr-on-static%2Ffoo.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flinkage-attr-on-static%2Ffoo.c?ref=706be5ba1f65ede0ffe095df8fa79706cbb562c8", "patch": "@@ -1,3 +1,4 @@\n+// ignore-license\n #include <stdint.h>\n \n extern int32_t BAZ;"}, {"sha": "5729d411c5bcd9a974e321a4a535e0b08c7dfc0b", "filename": "src/test/run-make/lto-smoke-c/bar.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/706be5ba1f65ede0ffe095df8fa79706cbb562c8/src%2Ftest%2Frun-make%2Flto-smoke-c%2Fbar.c", "raw_url": "https://github.com/rust-lang/rust/raw/706be5ba1f65ede0ffe095df8fa79706cbb562c8/src%2Ftest%2Frun-make%2Flto-smoke-c%2Fbar.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flto-smoke-c%2Fbar.c?ref=706be5ba1f65ede0ffe095df8fa79706cbb562c8", "patch": "@@ -1,3 +1,4 @@\n+// ignore-license\n void foo();\n \n int main() {"}, {"sha": "3c167b45af98d47cac41dffb772ea7a054f83c94", "filename": "src/test/run-make/manual-link/bar.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/706be5ba1f65ede0ffe095df8fa79706cbb562c8/src%2Ftest%2Frun-make%2Fmanual-link%2Fbar.c", "raw_url": "https://github.com/rust-lang/rust/raw/706be5ba1f65ede0ffe095df8fa79706cbb562c8/src%2Ftest%2Frun-make%2Fmanual-link%2Fbar.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmanual-link%2Fbar.c?ref=706be5ba1f65ede0ffe095df8fa79706cbb562c8", "patch": "@@ -1 +1,2 @@\n+// ignore-license\n void bar() {}"}, {"sha": "3c167b45af98d47cac41dffb772ea7a054f83c94", "filename": "src/test/run-make/manual-link/foo.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/706be5ba1f65ede0ffe095df8fa79706cbb562c8/src%2Ftest%2Frun-make%2Fmanual-link%2Ffoo.c", "raw_url": "https://github.com/rust-lang/rust/raw/706be5ba1f65ede0ffe095df8fa79706cbb562c8/src%2Ftest%2Frun-make%2Fmanual-link%2Ffoo.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmanual-link%2Ffoo.c?ref=706be5ba1f65ede0ffe095df8fa79706cbb562c8", "patch": "@@ -1 +1,2 @@\n+// ignore-license\n void bar() {}"}, {"sha": "a7b02a2f10b635341d9dc9f3239a4f39fa3b6c60", "filename": "src/test/run-make/no-duplicate-libs/bar.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/706be5ba1f65ede0ffe095df8fa79706cbb562c8/src%2Ftest%2Frun-make%2Fno-duplicate-libs%2Fbar.c", "raw_url": "https://github.com/rust-lang/rust/raw/706be5ba1f65ede0ffe095df8fa79706cbb562c8/src%2Ftest%2Frun-make%2Fno-duplicate-libs%2Fbar.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fno-duplicate-libs%2Fbar.c?ref=706be5ba1f65ede0ffe095df8fa79706cbb562c8", "patch": "@@ -1,3 +1,4 @@\n+// ignore-license\n extern void foo();\n \n void bar() { foo(); }"}, {"sha": "2895ad473bf966158015a0295e161767b673f29a", "filename": "src/test/run-make/no-duplicate-libs/foo.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/706be5ba1f65ede0ffe095df8fa79706cbb562c8/src%2Ftest%2Frun-make%2Fno-duplicate-libs%2Ffoo.c", "raw_url": "https://github.com/rust-lang/rust/raw/706be5ba1f65ede0ffe095df8fa79706cbb562c8/src%2Ftest%2Frun-make%2Fno-duplicate-libs%2Ffoo.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fno-duplicate-libs%2Ffoo.c?ref=706be5ba1f65ede0ffe095df8fa79706cbb562c8", "patch": "@@ -1 +1,2 @@\n+// ignore-license\n void foo() {}"}]}