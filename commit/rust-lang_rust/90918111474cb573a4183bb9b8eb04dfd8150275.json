{"sha": "90918111474cb573a4183bb9b8eb04dfd8150275", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwOTE4MTExNDc0Y2I1NzNhNDE4M2JiOWI4ZWIwNGRmZDgxNTAyNzU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-23T22:53:54Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-23T22:53:54Z"}, "message": "use Wake trait for async-fn driver", "tree": {"sha": "cf0a79e3fa1c427da99630ba7ef76d955a064fc9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf0a79e3fa1c427da99630ba7ef76d955a064fc9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90918111474cb573a4183bb9b8eb04dfd8150275", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90918111474cb573a4183bb9b8eb04dfd8150275", "html_url": "https://github.com/rust-lang/rust/commit/90918111474cb573a4183bb9b8eb04dfd8150275", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90918111474cb573a4183bb9b8eb04dfd8150275/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "284067cc15f5254b6b0391c1c93de8f34a8a4e8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/284067cc15f5254b6b0391c1c93de8f34a8a4e8c", "html_url": "https://github.com/rust-lang/rust/commit/284067cc15f5254b6b0391c1c93de8f34a8a4e8c"}], "stats": {"total": 29, "additions": 10, "deletions": 19}, "files": [{"sha": "b0a9791233437c2efaf64122aa26380ff9bb3c4f", "filename": "tests/run-pass/async-fn.rs", "status": "modified", "additions": 10, "deletions": 19, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/90918111474cb573a4183bb9b8eb04dfd8150275/tests%2Frun-pass%2Fasync-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90918111474cb573a4183bb9b8eb04dfd8150275/tests%2Frun-pass%2Fasync-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fasync-fn.rs?ref=90918111474cb573a4183bb9b8eb04dfd8150275", "patch": "@@ -1,7 +1,9 @@\n #![feature(never_type)]\n+#![feature(wake_trait)]\n \n-use std::{future::Future, pin::Pin, task::Poll, ptr};\n-use std::task::{Waker, RawWaker, RawWakerVTable, Context};\n+use std::{future::Future, pin::Pin, task::Poll};\n+use std::task::{Wake, Waker, Context};\n+use std::sync::Arc;\n \n // See if we can run a basic `async fn`\n pub async fn foo(x: &u32, y: u32) -> u32 {\n@@ -47,25 +49,14 @@ async fn partial_init(x: u32) -> u32 {\n }\n \n fn run_fut(mut fut: impl Future<Output=u32>, output: u32) {\n-    fn raw_waker_clone(_this: *const ()) -> RawWaker {\n-        panic!(\"unimplemented\");\n+    struct MyWaker;\n+    impl Wake for MyWaker {\n+        fn wake(self: Arc<Self>) {\n+            unimplemented!()\n+        }\n     }\n-    fn raw_waker_wake(_this: *const ()) {\n-        panic!(\"unimplemented\");\n-    }\n-    fn raw_waker_wake_by_ref(_this: *const ()) {\n-        panic!(\"unimplemented\");\n-    }\n-    fn raw_waker_drop(_this: *const ()) {}\n-\n-    static RAW_WAKER: RawWakerVTable = RawWakerVTable::new(\n-        raw_waker_clone,\n-        raw_waker_wake,\n-        raw_waker_wake_by_ref,\n-        raw_waker_drop,\n-    );\n \n-    let waker = unsafe { Waker::from_raw(RawWaker::new(ptr::null(), &RAW_WAKER)) };\n+    let waker = Waker::from(Arc::new(MyWaker));\n     let mut context = Context::from_waker(&waker);\n     assert_eq!(unsafe { Pin::new_unchecked(&mut fut) }.poll(&mut context), Poll::Ready(output));\n }"}]}