{"sha": "fedd320cf284ec5d489e62bf809277cedd9f60ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlZGQzMjBjZjI4NGVjNWQ0ODllNjJiZjgwOTI3N2NlZGQ5ZjYwYWM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-15T12:45:48Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-15T12:45:48Z"}, "message": "check_canceled does not return Result", "tree": {"sha": "ba684c9ce0161079026b47b17d933d8c845476e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba684c9ce0161079026b47b17d933d8c845476e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fedd320cf284ec5d489e62bf809277cedd9f60ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fedd320cf284ec5d489e62bf809277cedd9f60ac", "html_url": "https://github.com/rust-lang/rust/commit/fedd320cf284ec5d489e62bf809277cedd9f60ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fedd320cf284ec5d489e62bf809277cedd9f60ac/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd45697e5396d4a6ac8e838e1f4f510c960b9c43", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd45697e5396d4a6ac8e838e1f4f510c960b9c43", "html_url": "https://github.com/rust-lang/rust/commit/dd45697e5396d4a6ac8e838e1f4f510c960b9c43"}], "stats": {"total": 26, "additions": 19, "deletions": 7}, "files": [{"sha": "8473fc050370cb35f11c46b718151f383c2f19bd", "filename": "crates/ra_db/src/lib.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fedd320cf284ec5d489e62bf809277cedd9f60ac/crates%2Fra_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedd320cf284ec5d489e62bf809277cedd9f60ac/crates%2Fra_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Flib.rs?ref=fedd320cf284ec5d489e62bf809277cedd9f60ac", "patch": "@@ -21,11 +21,23 @@ pub use crate::{\n };\n \n pub trait BaseDatabase: salsa::Database + panic::RefUnwindSafe {\n-    fn check_canceled(&self) -> Cancelable<()> {\n+    /// Aborts current query if there are pending changes.\n+    ///\n+    /// rust-analyzer needs to be able to answer semantic questions about the\n+    /// code while the code is being modified. A common problem is that a\n+    /// long-running query is being calculated when a new change arrives.\n+    ///\n+    /// We can't just apply the change immediately: this will cause the pending\n+    /// query to see inconsistent state (it will observe an absence of\n+    /// repeatable read). So what we do is we **cancel** all pending queries\n+    /// before applying the change.\n+    ///\n+    /// We implement cancellation by panicking with a special value and catching\n+    /// it on the API boundary. Salsa explicitly supports this use-case.\n+    fn check_canceled(&self) {\n         if self.salsa_runtime().is_current_revision_canceled() {\n             Canceled::throw()\n         }\n-        Ok(())\n     }\n \n     fn catch_canceled<F: FnOnce(&Self) -> T + panic::UnwindSafe, T>("}, {"sha": "fd5a92c5b0e209fd41a834cafa6d688098fc88fa", "filename": "crates/ra_hir/src/module_tree.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fedd320cf284ec5d489e62bf809277cedd9f60ac/crates%2Fra_hir%2Fsrc%2Fmodule_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedd320cf284ec5d489e62bf809277cedd9f60ac/crates%2Fra_hir%2Fsrc%2Fmodule_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmodule_tree.rs?ref=fedd320cf284ec5d489e62bf809277cedd9f60ac", "patch": "@@ -42,7 +42,7 @@ impl Submodule {\n         db: &impl HirDatabase,\n         source: SourceItemId,\n     ) -> Cancelable<Arc<Vec<Submodule>>> {\n-        db.check_canceled()?;\n+        db.check_canceled();\n         let file_id = source.file_id;\n         let file_items = db.file_items(file_id);\n         let module_source = ModuleSource::from_source_item_id(db, source);\n@@ -117,7 +117,7 @@ impl ModuleTree {\n         db: &impl HirDatabase,\n         source_root: SourceRootId,\n     ) -> Cancelable<Arc<ModuleTree>> {\n-        db.check_canceled()?;\n+        db.check_canceled();\n         let res = create_module_tree(db, source_root);\n         Ok(Arc::new(res?))\n     }"}, {"sha": "edb3b1e641dd383af3909eebc24ce6d939ae7c94", "filename": "crates/ra_hir/src/nameres.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fedd320cf284ec5d489e62bf809277cedd9f60ac/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedd320cf284ec5d489e62bf809277cedd9f60ac/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres.rs?ref=fedd320cf284ec5d489e62bf809277cedd9f60ac", "patch": "@@ -327,7 +327,7 @@ where\n         loop {\n             let processed_imports_count = self.processed_imports.len();\n             for &module_id in self.input.keys() {\n-                self.db.check_canceled()?;\n+                self.db.check_canceled();\n                 self.resolve_imports(module_id)?;\n             }\n             if processed_imports_count == self.processed_imports.len() {"}, {"sha": "03787bd89f77e1ef3c60c97fdddd380a51335ae8", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fedd320cf284ec5d489e62bf809277cedd9f60ac/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedd320cf284ec5d489e62bf809277cedd9f60ac/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=fedd320cf284ec5d489e62bf809277cedd9f60ac", "patch": "@@ -1203,7 +1203,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n }\n \n pub fn infer(db: &impl HirDatabase, def_id: DefId) -> Cancelable<Arc<InferenceResult>> {\n-    db.check_canceled()?;\n+    db.check_canceled();\n     let function = Function::new(def_id); // TODO: consts also need inference\n     let body = function.body(db)?;\n     let scopes = db.fn_scopes(def_id)?;"}, {"sha": "b7a3a35503ba425cd042a3b103aa2aed55f24c8a", "filename": "crates/ra_ide_api/src/symbol_index.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fedd320cf284ec5d489e62bf809277cedd9f60ac/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedd320cf284ec5d489e62bf809277cedd9f60ac/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs?ref=fedd320cf284ec5d489e62bf809277cedd9f60ac", "patch": "@@ -54,7 +54,7 @@ salsa::query_group! {\n }\n \n fn file_symbols(db: &impl SymbolsDatabase, file_id: FileId) -> Cancelable<Arc<SymbolIndex>> {\n-    db.check_canceled()?;\n+    db.check_canceled();\n     let source_file = db.source_file(file_id);\n     let mut symbols = source_file\n         .syntax()"}]}