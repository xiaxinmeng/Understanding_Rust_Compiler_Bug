{"sha": "4082cd95a8de6c8244e9b44908f9859e75acdeea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwODJjZDk1YThkZTZjODI0NGU5YjQ0OTA4Zjk4NTllNzVhY2RlZWE=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-08-25T19:58:03Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-09-05T14:07:16Z"}, "message": "Allow ast passes to create hygienic spans", "tree": {"sha": "f4a1a17db0cdd7dd70efc59f0acbb5bb0ade4f44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4a1a17db0cdd7dd70efc59f0acbb5bb0ade4f44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4082cd95a8de6c8244e9b44908f9859e75acdeea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4082cd95a8de6c8244e9b44908f9859e75acdeea", "html_url": "https://github.com/rust-lang/rust/commit/4082cd95a8de6c8244e9b44908f9859e75acdeea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4082cd95a8de6c8244e9b44908f9859e75acdeea/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0133941f47b039d652f5d9f2617b7d3884298515", "url": "https://api.github.com/repos/rust-lang/rust/commits/0133941f47b039d652f5d9f2617b7d3884298515", "html_url": "https://github.com/rust-lang/rust/commit/0133941f47b039d652f5d9f2617b7d3884298515"}], "stats": {"total": 76, "additions": 72, "deletions": 4}, "files": [{"sha": "5a3b768301ce06f717fda8f94f9cc3814f6c9b31", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4082cd95a8de6c8244e9b44908f9859e75acdeea/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4082cd95a8de6c8244e9b44908f9859e75acdeea/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=4082cd95a8de6c8244e9b44908f9859e75acdeea", "patch": "@@ -126,7 +126,8 @@ impl<'a> Resolver<'a> {\n     crate fn macro_def_scope(&mut self, expn_id: ExpnId) -> Module<'a> {\n         let def_id = match self.macro_defs.get(&expn_id) {\n             Some(def_id) => *def_id,\n-            None => return self.graph_root,\n+            None => return self.ast_transform_scopes.get(&expn_id)\n+                .unwrap_or(&self.graph_root),\n         };\n         if let Some(id) = self.definitions.as_local_node_id(def_id) {\n             self.local_macro_def_scopes[&id]"}, {"sha": "b12bf4521e098052dd024ef78ae5c9348ecb85a7", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4082cd95a8de6c8244e9b44908f9859e75acdeea/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4082cd95a8de6c8244e9b44908f9859e75acdeea/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=4082cd95a8de6c8244e9b44908f9859e75acdeea", "patch": "@@ -879,6 +879,10 @@ pub struct Resolver<'a> {\n     /// There will be an anonymous module created around `g` with the ID of the\n     /// entry block for `f`.\n     block_map: NodeMap<Module<'a>>,\n+    /// A fake module that contains no definition and no prelude. Used so that\n+    /// some AST passes can generate identifiers that only resolve to local or\n+    /// language items.\n+    empty_module: Module<'a>,\n     module_map: FxHashMap<DefId, Module<'a>>,\n     extern_module_map: FxHashMap<(DefId, bool /* MacrosOnly? */), Module<'a>>,\n     binding_parent_modules: FxHashMap<PtrKey<'a, NameBinding<'a>>, Module<'a>>,\n@@ -913,6 +917,7 @@ pub struct Resolver<'a> {\n     non_macro_attrs: [Lrc<SyntaxExtension>; 2],\n     macro_defs: FxHashMap<ExpnId, DefId>,\n     local_macro_def_scopes: FxHashMap<NodeId, Module<'a>>,\n+    ast_transform_scopes: FxHashMap<ExpnId, Module<'a>>,\n     unused_macros: NodeMap<Span>,\n     proc_macro_stubs: NodeSet,\n     /// Traces collected during macro resolution and validated when it's complete.\n@@ -1080,6 +1085,21 @@ impl<'a> Resolver<'a> {\n             no_implicit_prelude: attr::contains_name(&krate.attrs, sym::no_implicit_prelude),\n             ..ModuleData::new(None, root_module_kind, root_def_id, ExpnId::root(), krate.span)\n         });\n+        let empty_module_kind = ModuleKind::Def(\n+            DefKind::Mod,\n+            root_def_id,\n+            kw::Invalid,\n+        );\n+        let empty_module = arenas.alloc_module(ModuleData {\n+            no_implicit_prelude: true,\n+            ..ModuleData::new(\n+                Some(graph_root),\n+                empty_module_kind,\n+                root_def_id,\n+                ExpnId::root(),\n+                DUMMY_SP,\n+            )\n+        });\n         let mut module_map = FxHashMap::default();\n         module_map.insert(DefId::local(CRATE_DEF_INDEX), graph_root);\n \n@@ -1139,10 +1159,12 @@ impl<'a> Resolver<'a> {\n             label_res_map: Default::default(),\n             export_map: FxHashMap::default(),\n             trait_map: Default::default(),\n+            empty_module,\n             module_map,\n             block_map: Default::default(),\n             extern_module_map: FxHashMap::default(),\n             binding_parent_modules: FxHashMap::default(),\n+            ast_transform_scopes: FxHashMap::default(),\n \n             glob_map: Default::default(),\n "}, {"sha": "fe7eae91945f76c5fedd0c38b8724de767c3fee0", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 38, "deletions": 1, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/4082cd95a8de6c8244e9b44908f9859e75acdeea/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4082cd95a8de6c8244e9b44908f9859e75acdeea/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=4082cd95a8de6c8244e9b44908f9859e75acdeea", "patch": "@@ -8,6 +8,7 @@ use crate::{ModuleOrUniformRoot, KNOWN_TOOLS};\n use crate::Namespace::*;\n use crate::resolve_imports::ImportResolver;\n use rustc::hir::def::{self, DefKind, NonMacroAttrKind};\n+use rustc::hir::def_id;\n use rustc::middle::stability;\n use rustc::{ty, lint, span_bug};\n use syntax::ast::{self, NodeId, Ident};\n@@ -16,7 +17,7 @@ use syntax::edition::Edition;\n use syntax::ext::base::{self, Indeterminate, SpecialDerives};\n use syntax::ext::base::{MacroKind, SyntaxExtension};\n use syntax::ext::expand::{AstFragment, Invocation, InvocationKind};\n-use syntax::ext::hygiene::{self, ExpnId, ExpnData, ExpnKind};\n+use syntax::ext::hygiene::{self, ExpnId, ExpnData, ExpnKind, Transparency};\n use syntax::ext::tt::macro_rules;\n use syntax::feature_gate::{emit_feature_err, is_builtin_attr_name};\n use syntax::feature_gate::GateIssue;\n@@ -25,6 +26,7 @@ use syntax_pos::{Span, DUMMY_SP};\n \n use std::{mem, ptr};\n use rustc_data_structures::sync::Lrc;\n+use syntax_pos::hygiene::AstPass;\n \n type Res = def::Res<NodeId>;\n \n@@ -136,6 +138,41 @@ impl<'a> base::Resolver for Resolver<'a> {\n         }\n     }\n \n+    // Create a Span with modern hygiene with a definition site of the provided\n+    // module, or a fake empty `#[no_implicit_prelude]` module if no module is\n+    // provided.\n+    fn span_for_ast_pass(\n+        &mut self,\n+        base_span: Span,\n+        pass: AstPass,\n+        features: &[Symbol],\n+        parent_module_id: Option<NodeId>,\n+    ) -> Span {\n+        let span = base_span.fresh_expansion_with_transparency(\n+            ExpnData::allow_unstable(\n+                ExpnKind::AstPass(pass),\n+                base_span,\n+                self.session.edition(),\n+                features.into(),\n+            ),\n+            Transparency::Opaque,\n+        );\n+        let expn_id = span.ctxt().outer_expn();\n+        let parent_scope = if let Some(module_id) = parent_module_id {\n+            let parent_def_id = self.definitions.local_def_id(module_id);\n+            self.definitions.add_parent_module_of_macro_def(expn_id, parent_def_id);\n+            self.module_map[&parent_def_id]\n+        } else {\n+            self.definitions.add_parent_module_of_macro_def(\n+                expn_id,\n+                def_id::DefId::local(def_id::CRATE_DEF_INDEX),\n+            );\n+            self.empty_module\n+        };\n+        self.ast_transform_scopes.insert(expn_id, parent_scope);\n+        span\n+    }\n+\n     fn resolve_imports(&mut self) {\n         ImportResolver { r: self }.resolve_imports()\n     }"}, {"sha": "3d274af99083c5302aae13d9bc5bdbe35d14ecdf", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4082cd95a8de6c8244e9b44908f9859e75acdeea/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4082cd95a8de6c8244e9b44908f9859e75acdeea/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=4082cd95a8de6c8244e9b44908f9859e75acdeea", "patch": "@@ -15,7 +15,7 @@ use crate::tokenstream::{self, TokenStream, TokenTree};\n use errors::{DiagnosticBuilder, DiagnosticId};\n use smallvec::{smallvec, SmallVec};\n use syntax_pos::{FileName, Span, MultiSpan, DUMMY_SP};\n-use syntax_pos::hygiene::{ExpnData, ExpnKind};\n+use syntax_pos::hygiene::{AstPass, ExpnData, ExpnKind};\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::{self, Lrc};\n@@ -660,6 +660,14 @@ pub trait Resolver {\n                                             extra_placeholders: &[NodeId]);\n     fn register_builtin_macro(&mut self, ident: ast::Ident, ext: SyntaxExtension);\n \n+    fn span_for_ast_pass(\n+        &mut self,\n+        span: Span,\n+        pass: AstPass,\n+        features: &[Symbol],\n+        parent_module_id: Option<NodeId>,\n+    ) -> Span;\n+\n     fn resolve_imports(&mut self);\n \n     fn resolve_macro_invocation("}, {"sha": "99afe57ef54972fae3e62415d135aa8ef7eb2e47", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4082cd95a8de6c8244e9b44908f9859e75acdeea/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4082cd95a8de6c8244e9b44908f9859e75acdeea/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=4082cd95a8de6c8244e9b44908f9859e75acdeea", "patch": "@@ -550,7 +550,7 @@ impl Span {\n     /// The returned span belongs to the created expansion and has the new properties,\n     /// but its location is inherited from the current span.\n     pub fn fresh_expansion(self, expn_data: ExpnData) -> Span {\n-        self.fresh_expansion_with_transparency(expn_data, Transparency::SemiTransparent)\n+        self.fresh_expansion_with_transparency(expn_data, Transparency::Transparent)\n     }\n \n     pub fn fresh_expansion_with_transparency("}]}