{"sha": "8f89108533690afe964799d8f514956ec8b72377", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmODkxMDg1MzM2OTBhZmU5NjQ3OTlkOGY1MTQ5NTZlYzhiNzIzNzc=", "commit": {"author": {"name": "Takayuki Nakata", "email": "f.seasons017@gmail.com", "date": "2020-11-09T13:14:11Z"}, "committer": {"name": "Takayuki Nakata", "email": "f.seasons017@gmail.com", "date": "2020-11-12T14:29:16Z"}, "message": "Fix FP in indirect `needless_collect` when used multiple times", "tree": {"sha": "ea441ed415d36e15dce5d98b517d3b301fb753a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea441ed415d36e15dce5d98b517d3b301fb753a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f89108533690afe964799d8f514956ec8b72377", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f89108533690afe964799d8f514956ec8b72377", "html_url": "https://github.com/rust-lang/rust/commit/8f89108533690afe964799d8f514956ec8b72377", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f89108533690afe964799d8f514956ec8b72377/comments", "author": {"login": "giraffate", "id": 17407489, "node_id": "MDQ6VXNlcjE3NDA3NDg5", "avatar_url": "https://avatars.githubusercontent.com/u/17407489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/giraffate", "html_url": "https://github.com/giraffate", "followers_url": "https://api.github.com/users/giraffate/followers", "following_url": "https://api.github.com/users/giraffate/following{/other_user}", "gists_url": "https://api.github.com/users/giraffate/gists{/gist_id}", "starred_url": "https://api.github.com/users/giraffate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/giraffate/subscriptions", "organizations_url": "https://api.github.com/users/giraffate/orgs", "repos_url": "https://api.github.com/users/giraffate/repos", "events_url": "https://api.github.com/users/giraffate/events{/privacy}", "received_events_url": "https://api.github.com/users/giraffate/received_events", "type": "User", "site_admin": false}, "committer": {"login": "giraffate", "id": 17407489, "node_id": "MDQ6VXNlcjE3NDA3NDg5", "avatar_url": "https://avatars.githubusercontent.com/u/17407489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/giraffate", "html_url": "https://github.com/giraffate", "followers_url": "https://api.github.com/users/giraffate/followers", "following_url": "https://api.github.com/users/giraffate/following{/other_user}", "gists_url": "https://api.github.com/users/giraffate/gists{/gist_id}", "starred_url": "https://api.github.com/users/giraffate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/giraffate/subscriptions", "organizations_url": "https://api.github.com/users/giraffate/orgs", "repos_url": "https://api.github.com/users/giraffate/repos", "events_url": "https://api.github.com/users/giraffate/events{/privacy}", "received_events_url": "https://api.github.com/users/giraffate/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd13a3585627c6854121bff22d071e69ada2aa48", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd13a3585627c6854121bff22d071e69ada2aa48", "html_url": "https://github.com/rust-lang/rust/commit/bd13a3585627c6854121bff22d071e69ada2aa48"}], "stats": {"total": 54, "additions": 53, "deletions": 1}, "files": [{"sha": "143cbea55370baf3f3771b8774478877e8d14518", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8f89108533690afe964799d8f514956ec8b72377/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f89108533690afe964799d8f514956ec8b72377/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=8f89108533690afe964799d8f514956ec8b72377", "patch": "@@ -2950,7 +2950,7 @@ fn check_needless_collect_indirect_usage<'tcx>(expr: &'tcx Expr<'_>, cx: &LateCo\n         for ref stmt in block.stmts {\n             if_chain! {\n                 if let StmtKind::Local(\n-                    Local { pat: Pat { kind: PatKind::Binding(_, _, ident, .. ), .. },\n+                    Local { pat: Pat { hir_id: pat_id, kind: PatKind::Binding(_, _, ident, .. ), .. },\n                     init: Some(ref init_expr), .. }\n                 ) = stmt.kind;\n                 if let ExprKind::MethodCall(ref method_name, _, &[ref iter_source], ..) = init_expr.kind;\n@@ -2964,6 +2964,16 @@ fn check_needless_collect_indirect_usage<'tcx>(expr: &'tcx Expr<'_>, cx: &LateCo\n                 if let Some(iter_calls) = detect_iter_and_into_iters(block, *ident);\n                 if iter_calls.len() == 1;\n                 then {\n+                    let mut used_count_visitor = UsedCountVisitor {\n+                        cx,\n+                        id: *pat_id,\n+                        count: 0,\n+                    };\n+                    walk_block(&mut used_count_visitor, block);\n+                    if used_count_visitor.count > 1 {\n+                        return;\n+                    }\n+\n                     // Suggest replacing iter_call with iter_replacement, and removing stmt\n                     let iter_call = &iter_calls[0];\n                     span_lint_and_then(\n@@ -3087,6 +3097,28 @@ impl<'tcx> Visitor<'tcx> for IterFunctionVisitor {\n     }\n }\n \n+struct UsedCountVisitor<'a, 'tcx> {\n+    cx: &'a LateContext<'tcx>,\n+    id: HirId,\n+    count: usize,\n+}\n+\n+impl<'a, 'tcx> Visitor<'tcx> for UsedCountVisitor<'a, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n+        if same_var(self.cx, expr, self.id) {\n+            self.count += 1;\n+        } else {\n+            walk_expr(self, expr);\n+        }\n+    }\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::OnlyBodies(self.cx.tcx.hir())\n+    }\n+}\n+\n /// Detect the occurrences of calls to `iter` or `into_iter` for the\n /// given identifier\n fn detect_iter_and_into_iters<'tcx>(block: &'tcx Block<'tcx>, identifier: Ident) -> Option<Vec<IterFunction>> {"}, {"sha": "0918a6868ab4b08c4958f4975209012c24faa09f", "filename": "tests/ui/needless_collect_indirect.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8f89108533690afe964799d8f514956ec8b72377/tests%2Fui%2Fneedless_collect_indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f89108533690afe964799d8f514956ec8b72377/tests%2Fui%2Fneedless_collect_indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_collect_indirect.rs?ref=8f89108533690afe964799d8f514956ec8b72377", "patch": "@@ -22,4 +22,24 @@ fn main() {\n     let sample = vec![a.clone(), \"b\".to_string(), \"c\".to_string()];\n     let non_copy_contains = sample.into_iter().collect::<Vec<_>>();\n     non_copy_contains.contains(&a);\n+\n+    // Fix #5991\n+    let vec_a = vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n+    let vec_b = vec_a.iter().collect::<Vec<_>>();\n+    if vec_b.len() > 3 {}\n+    let other_vec = vec![1, 3, 12, 4, 16, 2];\n+    let we_got_the_same_numbers = other_vec.iter().filter(|item| vec_b.contains(item)).collect::<Vec<_>>();\n+\n+    // Fix #6297\n+    let sample = [1; 5];\n+    let multiple_indirect = sample.iter().collect::<Vec<_>>();\n+    let sample2 = vec![2, 3];\n+    if multiple_indirect.is_empty() {\n+        // do something\n+    } else {\n+        let found = sample2\n+            .iter()\n+            .filter(|i| multiple_indirect.iter().any(|s| **s % **i == 0))\n+            .collect::<Vec<_>>();\n+    }\n }"}]}