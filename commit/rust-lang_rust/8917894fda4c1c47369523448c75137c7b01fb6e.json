{"sha": "8917894fda4c1c47369523448c75137c7b01fb6e", "node_id": "C_kwDOAAsO6NoAKDg5MTc4OTRmZGE0YzFjNDczNjk1MjM0NDhjNzUxMzdjN2IwMWZiNmU", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-17T06:48:09Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-21T02:35:11Z"}, "message": "Targeted fixes addressing erroneous suggestions", "tree": {"sha": "5ea84e8d731cb9a8acf62c8451b7babf0a4f2b81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ea84e8d731cb9a8acf62c8451b7babf0a4f2b81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8917894fda4c1c47369523448c75137c7b01fb6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8917894fda4c1c47369523448c75137c7b01fb6e", "html_url": "https://github.com/rust-lang/rust/commit/8917894fda4c1c47369523448c75137c7b01fb6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8917894fda4c1c47369523448c75137c7b01fb6e/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6848ba2665d10380f259addbd9f60d0ab8d3542a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6848ba2665d10380f259addbd9f60d0ab8d3542a", "html_url": "https://github.com/rust-lang/rust/commit/6848ba2665d10380f259addbd9f60d0ab8d3542a"}], "stats": {"total": 68, "additions": 29, "deletions": 39}, "files": [{"sha": "4561ab0bfe403abdd6be29b3188679ff6a8bffa4", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/8917894fda4c1c47369523448c75137c7b01fb6e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8917894fda4c1c47369523448c75137c7b01fb6e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=8917894fda4c1c47369523448c75137c7b01fb6e", "patch": "@@ -671,11 +671,16 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         trait_pred: ty::PolyTraitPredicate<'tcx>,\n     ) -> bool {\n         // It only make sense when suggesting dereferences for arguments\n-        let ObligationCauseCode::FunctionArgumentObligation { arg_hir_id, .. } = obligation.cause.code() else {\n-            return false;\n-        };\n-        let param_env = obligation.param_env;\n-        let body_id = obligation.cause.body_id;\n+        let ObligationCauseCode::FunctionArgumentObligation { arg_hir_id, .. } = obligation.cause.code()\n+            else { return false; };\n+        let Some(typeck_results) = self.in_progress_typeck_results\n+            else { return false; };\n+        let typeck_results = typeck_results.borrow();\n+        let hir::Node::Expr(expr) = self.tcx.hir().get(*arg_hir_id)\n+            else { return false; };\n+        let Some(arg_ty) = typeck_results.expr_ty_adjusted_opt(expr)\n+            else { return false; };\n+\n         let span = obligation.cause.span;\n         let mut real_trait_pred = trait_pred;\n         let mut code = obligation.cause.code();\n@@ -687,18 +692,30 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n             // Skipping binder here, remapping below\n             let real_ty = real_trait_pred.self_ty().skip_binder();\n+            if self.can_eq(obligation.param_env, real_ty, arg_ty).is_err() {\n+                continue;\n+            }\n \n             if let ty::Ref(region, base_ty, mutbl) = *real_ty.kind() {\n-                let mut autoderef = Autoderef::new(self, param_env, body_id, span, base_ty, span);\n+                let mut autoderef = Autoderef::new(\n+                    self,\n+                    obligation.param_env,\n+                    obligation.cause.body_id,\n+                    span,\n+                    base_ty,\n+                    span,\n+                );\n                 if let Some(steps) = autoderef.find_map(|(ty, steps)| {\n                     // Re-add the `&`\n                     let ty = self.tcx.mk_ref(region, TypeAndMut { ty, mutbl });\n \n                     // Remapping bound vars here\n                     let real_trait_pred_and_ty =\n                         real_trait_pred.map_bound(|inner_trait_pred| (inner_trait_pred, ty));\n-                    let obligation = self\n-                        .mk_trait_obligation_with_new_self_ty(param_env, real_trait_pred_and_ty);\n+                    let obligation = self.mk_trait_obligation_with_new_self_ty(\n+                        obligation.param_env,\n+                        real_trait_pred_and_ty,\n+                    );\n                     Some(steps).filter(|_| self.predicate_may_hold(&obligation))\n                 }) {\n                     if steps > 0 {\n@@ -727,7 +744,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     let real_trait_pred_and_base_ty =\n                         real_trait_pred.map_bound(|inner_trait_pred| (inner_trait_pred, base_ty));\n                     let obligation = self.mk_trait_obligation_with_new_self_ty(\n-                        param_env,\n+                        obligation.param_env,\n                         real_trait_pred_and_base_ty,\n                     );\n                     if self.predicate_may_hold(&obligation) {\n@@ -855,6 +872,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             _ => return false,\n         };\n         if matches!(obligation.cause.code(), ObligationCauseCode::FunctionArgumentObligation { .. })\n+            && obligation.cause.span.can_be_used_for_suggestions()\n         {\n             // When the obligation error has been ensured to have been caused by\n             // an argument, the `obligation.cause.span` points at the expression"}, {"sha": "68303b842088ecadca31671af29cf1e884c719e6", "filename": "src/test/ui/binop/issue-77910-1.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8917894fda4c1c47369523448c75137c7b01fb6e/src%2Ftest%2Fui%2Fbinop%2Fissue-77910-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8917894fda4c1c47369523448c75137c7b01fb6e/src%2Ftest%2Fui%2Fbinop%2Fissue-77910-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fissue-77910-1.stderr?ref=8917894fda4c1c47369523448c75137c7b01fb6e", "patch": "@@ -19,12 +19,8 @@ LL |     assert_eq!(foo, y);\n    |     ^^^^^^^^^^^^^^^^^^ `for<'r> fn(&'r i32) -> &'r i32 {foo}` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n    = help: the trait `Debug` is not implemented for `for<'r> fn(&'r i32) -> &'r i32 {foo}`\n+   = help: use parentheses to call the function: `foo(s)`\n    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n-help: use parentheses to call the function\n-  --> $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-   |\n-LL |                     $crate::panicking::assert_failed(kind, &*left_val(s), &*right_val, $crate::option::Option::None);\n-   |                                                                      +++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "a2ca06b4e6e1aa7917d8a5a1864ea51d6238a08b", "filename": "src/test/ui/closures/closure-move-sync.stderr", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8917894fda4c1c47369523448c75137c7b01fb6e/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8917894fda4c1c47369523448c75137c7b01fb6e/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.stderr?ref=8917894fda4c1c47369523448c75137c7b01fb6e", "patch": "@@ -22,10 +22,6 @@ note: required by a bound in `spawn`\n    |\n LL |     F: Send + 'static,\n    |        ^^^^ required by this bound in `spawn`\n-help: consider dereferencing here\n-   |\n-LL |     let t = thread::spawn(*|| {\n-   |                           +\n \n error[E0277]: `Sender<()>` cannot be shared between threads safely\n   --> $DIR/closure-move-sync.rs:18:19\n@@ -47,10 +43,6 @@ note: required by a bound in `spawn`\n    |\n LL |     F: Send + 'static,\n    |        ^^^^ required by this bound in `spawn`\n-help: consider dereferencing here\n-   |\n-LL |     thread::spawn(*|| tx.send(()).unwrap());\n-   |                   +\n \n error: aborting due to 2 previous errors\n "}, {"sha": "a821c57b923a097bdb4770b167e6c568a6acbd51", "filename": "src/test/ui/generator/not-send-sync.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8917894fda4c1c47369523448c75137c7b01fb6e/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8917894fda4c1c47369523448c75137c7b01fb6e/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr?ref=8917894fda4c1c47369523448c75137c7b01fb6e", "patch": "@@ -23,10 +23,6 @@ note: required by a bound in `assert_send`\n    |\n LL |     fn assert_send<T: Send>(_: T) {}\n    |                       ^^^^ required by this bound in `assert_send`\n-help: consider dereferencing here\n-   |\n-LL |     assert_send(*|| {\n-   |                 +\n \n error: generator cannot be shared between threads safely\n   --> $DIR/not-send-sync.rs:9:17"}, {"sha": "909e49c38b8d18e42e7ba3f56f5e242788b6aa10", "filename": "src/test/ui/generator/print/generator-print-verbose-2.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8917894fda4c1c47369523448c75137c7b01fb6e/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8917894fda4c1c47369523448c75137c7b01fb6e/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.stderr?ref=8917894fda4c1c47369523448c75137c7b01fb6e", "patch": "@@ -23,10 +23,6 @@ note: required by a bound in `assert_send`\n    |\n LL |     fn assert_send<T: Send>(_: T) {}\n    |                       ^^^^ required by this bound in `assert_send`\n-help: consider dereferencing here\n-   |\n-LL |     assert_send(*|| {\n-   |                 +\n \n error: generator cannot be shared between threads safely\n   --> $DIR/generator-print-verbose-2.rs:12:17"}, {"sha": "94f41c92598866d4aaef7e8a1162a7de304aa3c9", "filename": "src/test/ui/interior-mutability/interior-mutability.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8917894fda4c1c47369523448c75137c7b01fb6e/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8917894fda4c1c47369523448c75137c7b01fb6e/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr?ref=8917894fda4c1c47369523448c75137c7b01fb6e", "patch": "@@ -19,10 +19,6 @@ note: required by a bound in `catch_unwind`\n    |\n LL | pub fn catch_unwind<F: FnOnce() -> R + UnwindSafe, R>(f: F) -> Result<R> {\n    |                                        ^^^^^^^^^^ required by this bound in `catch_unwind`\n-help: consider dereferencing here\n-   |\n-LL |     catch_unwind(*|| { x.set(23); });\n-   |                  +\n \n error: aborting due to previous error\n "}, {"sha": "c6e6ea1e096af76068f6be6627d27cd95e66cd24", "filename": "src/test/ui/issues/issue-70724-add_type_neq_err_label-unwrap.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8917894fda4c1c47369523448c75137c7b01fb6e/src%2Ftest%2Fui%2Fissues%2Fissue-70724-add_type_neq_err_label-unwrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8917894fda4c1c47369523448c75137c7b01fb6e/src%2Ftest%2Fui%2Fissues%2Fissue-70724-add_type_neq_err_label-unwrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-70724-add_type_neq_err_label-unwrap.stderr?ref=8917894fda4c1c47369523448c75137c7b01fb6e", "patch": "@@ -34,12 +34,8 @@ LL |     assert_eq!(a, 0);\n    |     ^^^^^^^^^^^^^^^^ `fn() -> i32 {a}` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n    = help: the trait `Debug` is not implemented for `fn() -> i32 {a}`\n+   = help: use parentheses to call the function: `a()`\n    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n-help: use parentheses to call the function\n-  --> $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-   |\n-LL |                     $crate::panicking::assert_failed(kind, &*left_val(), &*right_val, $crate::option::Option::None);\n-   |                                                                      ++\n \n error: aborting due to 3 previous errors\n "}]}