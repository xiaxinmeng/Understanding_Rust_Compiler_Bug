{"sha": "bfdba2dbcceb33e0738949e9f4d6635f689baf1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmZGJhMmRiY2NlYjMzZTA3Mzg5NDllOWY0ZDY2MzVmNjg5YmFmMWI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-12-17T00:34:20Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-12-17T00:35:19Z"}, "message": "rustc: Translate parametric function signatures into task + type parameters + formal arguments", "tree": {"sha": "636784b5a2386843c51df82988d5041438d8b6dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/636784b5a2386843c51df82988d5041438d8b6dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bfdba2dbcceb33e0738949e9f4d6635f689baf1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bfdba2dbcceb33e0738949e9f4d6635f689baf1b", "html_url": "https://github.com/rust-lang/rust/commit/bfdba2dbcceb33e0738949e9f4d6635f689baf1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bfdba2dbcceb33e0738949e9f4d6635f689baf1b/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31f0642da3519985e69235be6cc30fc3f574ba95", "url": "https://api.github.com/repos/rust-lang/rust/commits/31f0642da3519985e69235be6cc30fc3f574ba95", "html_url": "https://github.com/rust-lang/rust/commit/31f0642da3519985e69235be6cc30fc3f574ba95"}], "stats": {"total": 52, "additions": 52, "deletions": 0}, "files": [{"sha": "8b094ffcca8bed9bfde65839893602bcf19037a4", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/bfdba2dbcceb33e0738949e9f4d6635f689baf1b/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfdba2dbcceb33e0738949e9f4d6635f689baf1b/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=bfdba2dbcceb33e0738949e9f4d6635f689baf1b", "patch": "@@ -214,6 +214,21 @@ fn T_task() -> TypeRef {\n                      ));\n }\n \n+fn T_tydesc() -> TypeRef {\n+    auto pvoid = T_ptr(T_i8());\n+    auto glue_fn_ty = T_ptr(T_fn(vec(T_taskptr(), pvoid), T_void()));\n+    ret T_struct(vec(pvoid,             // first_param\n+                     T_int(),           // size\n+                     T_int(),           // align\n+                     glue_fn_ty,        // copy_glue_off\n+                     glue_fn_ty,        // drop_glue_off\n+                     glue_fn_ty,        // free_glue_off\n+                     glue_fn_ty,        // sever_glue_off\n+                     glue_fn_ty,        // mark_glue_off\n+                     glue_fn_ty,        // obj_drop_glue_off\n+                     glue_fn_ty));      // is_stateful\n+}\n+\n fn T_array(TypeRef t, uint n) -> TypeRef {\n     ret llvm.LLVMArrayType(t, n);\n }\n@@ -271,6 +286,15 @@ fn type_of_fn(@crate_ctxt cx,\n               vec[typeck.arg] inputs,\n               @typeck.ty output) -> TypeRef {\n     let vec[TypeRef] atys = vec(T_taskptr());\n+\n+    auto fn_ty = typeck.plain_ty(typeck.ty_fn(inputs, output));\n+    auto ty_param_count = typeck.count_ty_params(fn_ty);\n+    auto i = 0u;\n+    while (i < ty_param_count) {\n+        atys += T_tydesc();\n+        i += 1u;\n+    }\n+\n     for (typeck.arg arg in inputs) {\n         let TypeRef t = type_of(cx, arg.ty);\n         alt (arg.mode) {\n@@ -2614,6 +2638,7 @@ fn trans_exit_task_glue(@crate_ctxt cx) {\n fn create_typedefs(@crate_ctxt cx) {\n     llvm.LLVMAddTypeName(cx.llmod, _str.buf(\"rust_crate\"), T_crate());\n     llvm.LLVMAddTypeName(cx.llmod, _str.buf(\"rust_task\"), T_task());\n+    llvm.LLVMAddTypeName(cx.llmod, _str.buf(\"rust_tydesc\"), T_tydesc());\n }\n \n fn crate_constant(@crate_ctxt cx) -> ValueRef {"}, {"sha": "b318ce33b631cff1442e704cfe2b3be88f53925a", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/bfdba2dbcceb33e0738949e9f4d6635f689baf1b/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfdba2dbcceb33e0738949e9f4d6635f689baf1b/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=bfdba2dbcceb33e0738949e9f4d6635f689baf1b", "patch": "@@ -942,6 +942,33 @@ fn ann_to_type(&ast.ann ann) -> @ty {\n     }\n }\n \n+fn count_ty_params(@ty t) -> uint {\n+    state obj ty_param_counter(@mutable vec[ast.def_id] param_ids) {\n+        fn fold_simple_ty(@ty t) -> @ty {\n+            alt (t.struct) {\n+                case (ty_param(?param_id)) {\n+                    for (ast.def_id other_param_id in *param_ids) {\n+                        if (param_id._0 == other_param_id._0 &&\n+                                param_id._1 == other_param_id._1) {\n+                            ret t;\n+                        }\n+                    }\n+                    *param_ids += vec(param_id);\n+                }\n+                case (_) { /* fall through */ }\n+            }\n+            ret t;\n+        }\n+    }\n+  \n+    let vec[ast.def_id] param_ids_inner = vec();\n+    let @mutable vec[ast.def_id] param_ids = @mutable param_ids_inner;\n+    fold_ty(ty_param_counter(param_ids), t);\n+    ret _vec.len[ast.def_id](*param_ids);\n+}\n+\n+// Type accessors for AST nodes\n+\n fn stmt_ty(@ast.stmt s) -> @ty {\n     alt (s.node) {\n         case (ast.stmt_expr(?e)) {"}]}