{"sha": "ecb646477b422de89996acce0c2ba08ce082349a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjYjY0NjQ3N2I0MjJkZTg5OTk2YWNjZTBjMmJhMDhjZTA4MjM0OWE=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-08-29T01:25:41Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-08-29T01:25:41Z"}, "message": "Add lint modes for uses of @ and ~ pointers, in general.", "tree": {"sha": "5a638cfdda065f2d81471e8244a87cf4299a20de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a638cfdda065f2d81471e8244a87cf4299a20de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ecb646477b422de89996acce0c2ba08ce082349a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ecb646477b422de89996acce0c2ba08ce082349a", "html_url": "https://github.com/rust-lang/rust/commit/ecb646477b422de89996acce0c2ba08ce082349a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ecb646477b422de89996acce0c2ba08ce082349a/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b769e296803f578d99654e9fc271c4109e50ab75", "url": "https://api.github.com/repos/rust-lang/rust/commits/b769e296803f578d99654e9fc271c4109e50ab75", "html_url": "https://github.com/rust-lang/rust/commit/b769e296803f578d99654e9fc271c4109e50ab75"}], "stats": {"total": 120, "additions": 119, "deletions": 1}, "files": [{"sha": "ed7ac7e85ce5cf42c501d27a02d2b372d8daa6c6", "filename": "src/rustc/middle/lint.rs", "status": "modified", "additions": 86, "deletions": 1, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/ecb646477b422de89996acce0c2ba08ce082349a/src%2Frustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecb646477b422de89996acce0c2ba08ce082349a/src%2Frustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flint.rs?ref=ecb646477b422de89996acce0c2ba08ce082349a", "patch": "@@ -1,7 +1,7 @@\n import driver::session;\n import driver::session::session;\n import middle::ty;\n-import syntax::{ast, visit};\n+import syntax::{ast, ast_util, visit};\n import syntax::attr;\n import syntax::codemap::span;\n import std::map::{map,hashmap,int_hash,hash_from_strs};\n@@ -54,6 +54,10 @@ enum lint {\n     deprecated_pattern,\n     non_camel_case_types,\n \n+    managed_heap_memory,\n+    owned_heap_memory,\n+    heap_memory,\n+\n     // FIXME(#3266)--make liveness warnings lintable\n     // unused_variable,\n     // dead_assignment\n@@ -140,6 +144,21 @@ fn get_lint_dict() -> lint_dict {\n            desc: ~\"types, variants and traits must have camel case names\",\n            default: allow}),\n \n+        (~\"managed_heap_memory\",\n+         @{lint: managed_heap_memory,\n+           desc: ~\"use of managed (@ type) heap memory\",\n+           default: allow}),\n+\n+        (~\"owned_heap_memory\",\n+         @{lint: owned_heap_memory,\n+           desc: ~\"use of owned (~ type) heap memory\",\n+           default: allow}),\n+\n+        (~\"heap_memory\",\n+         @{lint: heap_memory,\n+           desc: ~\"use of any (~ type or @ type) heap memory\",\n+           default: allow}),\n+\n         /* FIXME(#3266)--make liveness warnings lintable\n         (~\"unused_variable\",\n          @{lint: unused_variable,\n@@ -348,6 +367,7 @@ fn check_item(i: @ast::item, cx: ty::ctxt) {\n     check_item_while_true(cx, i);\n     check_item_path_statement(cx, i);\n     check_item_non_camel_case_types(cx, i);\n+    check_item_heap(cx, i);\n }\n \n // Take a visitor, and modify it so that it will not proceed past subitems.\n@@ -428,6 +448,71 @@ fn check_item_ctypes(cx: ty::ctxt, it: @ast::item) {\n     }\n }\n \n+fn check_item_heap(cx: ty::ctxt, it: @ast::item) {\n+\n+    fn check_type_for_lint(cx: ty::ctxt, lint: lint,\n+                           node: ast::node_id,\n+                           item: ast::node_id,\n+                           span: span, ty: ty::t) {\n+\n+        if get_lint_settings_level(cx.sess.lint_settings,\n+                                   lint, node, item) != allow {\n+            let mut n_box = 0;\n+            let mut n_uniq = 0;\n+            ty::fold_ty(cx, ty, |t| {\n+                match ty::get(t).struct {\n+                  ty::ty_box(_) => n_box += 1,\n+                  ty::ty_uniq(_) => n_uniq += 1,\n+                  _ => ()\n+                };\n+                t\n+            });\n+\n+            if (n_uniq > 0 && lint != managed_heap_memory) {\n+                let s = ty_to_str(cx, ty);\n+                let m = ~\"type uses owned (~ type) pointers: \" + s;\n+                cx.sess.span_lint(lint, node, item, span, m);\n+            }\n+\n+            if (n_box > 0 && lint != owned_heap_memory) {\n+                let s = ty_to_str(cx, ty);\n+                let m = ~\"type uses managed (@ type) pointers: \" + s;\n+                cx.sess.span_lint(lint, node, item, span, m);\n+            }\n+        }\n+    }\n+\n+    fn check_type(cx: ty::ctxt,\n+                  node: ast::node_id,\n+                  item: ast::node_id,\n+                  span: span, ty: ty::t) {\n+            for [managed_heap_memory,\n+                 owned_heap_memory,\n+                 heap_memory].each |lint| {\n+                check_type_for_lint(cx, lint, node, item, span, ty);\n+            }\n+    }\n+\n+    match it.node {\n+      ast::item_fn(*) |\n+      ast::item_ty(*) |\n+      ast::item_enum(*) |\n+      ast::item_class(*) |\n+      ast::item_trait(*) => check_type(cx, it.id, it.id, it.span,\n+                                       ty::node_id_to_type(cx, it.id)),\n+      _ => ()\n+    }\n+\n+    let visit = item_stopping_visitor(visit::mk_simple_visitor(@{\n+        visit_expr: fn@(e: @ast::expr) {\n+            let ty = ty::expr_ty(cx, e);\n+            check_type(cx, e.id, it.id, e.span, ty);\n+        }\n+        with *visit::default_simple_visitor()\n+    }));\n+    visit::visit_item(it, (), visit);\n+}\n+\n fn check_item_path_statement(cx: ty::ctxt, it: @ast::item) {\n     let visit = item_stopping_visitor(visit::mk_simple_visitor(@{\n         visit_stmt: fn@(s: @ast::stmt) {"}, {"sha": "cc29e75d64a7ea4b03294ede1c1dd9a6486e27e9", "filename": "src/test/compile-fail/lint-heap-memory.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ecb646477b422de89996acce0c2ba08ce082349a/src%2Ftest%2Fcompile-fail%2Flint-heap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecb646477b422de89996acce0c2ba08ce082349a/src%2Ftest%2Fcompile-fail%2Flint-heap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-heap-memory.rs?ref=ecb646477b422de89996acce0c2ba08ce082349a", "patch": "@@ -0,0 +1,11 @@\n+#[forbid(heap_memory)];\n+\n+type foo = { //~ ERROR type uses managed\n+    x: @int\n+};\n+\n+fn main() {\n+    let _x : { x : ~int } = {x : ~10};\n+    //~^ ERROR type uses owned\n+    //~^^ ERROR type uses owned\n+}"}, {"sha": "bfefc476e634086411896f60852c28b20b27b7a9", "filename": "src/test/compile-fail/lint-managed-heap-memory.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ecb646477b422de89996acce0c2ba08ce082349a/src%2Ftest%2Fcompile-fail%2Flint-managed-heap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecb646477b422de89996acce0c2ba08ce082349a/src%2Ftest%2Fcompile-fail%2Flint-managed-heap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-managed-heap-memory.rs?ref=ecb646477b422de89996acce0c2ba08ce082349a", "patch": "@@ -0,0 +1,11 @@\n+#[forbid(managed_heap_memory)];\n+\n+type foo = { //~ ERROR type uses managed\n+    x: @int\n+};\n+\n+fn main() {\n+    let _x : foo = {x : @10};\n+    //~^ ERROR type uses managed\n+    //~^^ ERROR type uses managed\n+}"}, {"sha": "7c00a3f18b33cc00d127cc20c084a00091273262", "filename": "src/test/compile-fail/lint-owned-heap-memory.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ecb646477b422de89996acce0c2ba08ce082349a/src%2Ftest%2Fcompile-fail%2Flint-owned-heap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecb646477b422de89996acce0c2ba08ce082349a/src%2Ftest%2Fcompile-fail%2Flint-owned-heap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-owned-heap-memory.rs?ref=ecb646477b422de89996acce0c2ba08ce082349a", "patch": "@@ -0,0 +1,11 @@\n+#[forbid(owned_heap_memory)];\n+\n+type foo = { //~ ERROR type uses owned\n+    x: ~int\n+};\n+\n+fn main() {\n+    let _x : foo = {x : ~10};\n+    //~^ ERROR type uses owned\n+    //~^^ ERROR type uses owned\n+}"}]}