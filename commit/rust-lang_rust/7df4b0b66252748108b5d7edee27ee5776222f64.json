{"sha": "7df4b0b66252748108b5d7edee27ee5776222f64", "node_id": "C_kwDOAAsO6NoAKDdkZjRiMGI2NjI1Mjc0ODEwOGI1ZDdlZGVlMjdlZTU3NzYyMjJmNjQ", "commit": {"author": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2022-11-05T23:06:58Z"}, "committer": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2022-11-05T23:07:57Z"}, "message": "Rebase and update test", "tree": {"sha": "79392a5143e4f760089daf3fd69fb99003a0bcf0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79392a5143e4f760089daf3fd69fb99003a0bcf0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7df4b0b66252748108b5d7edee27ee5776222f64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7df4b0b66252748108b5d7edee27ee5776222f64", "html_url": "https://github.com/rust-lang/rust/commit/7df4b0b66252748108b5d7edee27ee5776222f64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7df4b0b66252748108b5d7edee27ee5776222f64/comments", "author": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e38c8a750de95f66a6792c0cfe6fb25b8c5260a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e38c8a750de95f66a6792c0cfe6fb25b8c5260a", "html_url": "https://github.com/rust-lang/rust/commit/7e38c8a750de95f66a6792c0cfe6fb25b8c5260a"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "22007d5eb6834801f4f87304ecd06a945394b570", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7df4b0b66252748108b5d7edee27ee5776222f64/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7df4b0b66252748108b5d7edee27ee5776222f64/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=7df4b0b66252748108b5d7edee27ee5776222f64", "patch": "@@ -399,7 +399,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 if static_candidates.len() == 1 {\n                     let mut has_unsuggestable_args = false;\n                     let ty_str = if let Some(CandidateSource::Impl(impl_did)) =\n-                    static_candidates.get(0)\n+                        static_candidates.get(0)\n                     {\n                         // When the \"method\" is resolved through dereferencing, we really want the\n                         // original type that has the associated function for accurate suggestions.\n@@ -453,7 +453,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         self.ty_to_value_string(actual.peel_refs())\n                     };\n                     if let SelfSource::MethodCall(_) = source {\n-                        let first_arg = if let Some(CandidateSource::Impl(impl_did)) = static_sources.get(0) &&\n+                        let first_arg = if let Some(CandidateSource::Impl(impl_did)) = static_candidates.get(0) &&\n                             let Some(assoc) = self.associated_value(*impl_did, item_name) {\n                             let sig = self.tcx.fn_sig(assoc.def_id);\n                             if let Some(first) = sig.inputs().skip_binder().get(0) {"}, {"sha": "b17c4dc5dfb50998df9cca962e3023e696215420", "filename": "src/test/ui/suggestions/issue-102354.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7df4b0b66252748108b5d7edee27ee5776222f64/src%2Ftest%2Fui%2Fsuggestions%2Fissue-102354.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7df4b0b66252748108b5d7edee27ee5776222f64/src%2Ftest%2Fui%2Fsuggestions%2Fissue-102354.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-102354.stderr?ref=7df4b0b66252748108b5d7edee27ee5776222f64", "patch": "@@ -13,7 +13,7 @@ LL |     fn func() {}\n help: use associated function syntax instead\n    |\n LL |     i32::func();\n-   |     ~~~~~~~~~\n+   |     ~~~~~~~~~~~\n help: disambiguate the associated function for the candidate\n    |\n LL |     <i32 as Trait>::func(x);"}]}