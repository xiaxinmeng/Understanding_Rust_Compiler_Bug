{"sha": "c110329f25bf8c3103e5c5298775468df80c3517", "node_id": "C_kwDOAAsO6NoAKGMxMTAzMjlmMjViZjhjMzEwM2U1YzUyOTg3NzU0NjhkZjgwYzM1MTc", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2022-02-09T14:16:57Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2022-08-23T08:12:58Z"}, "message": "Remove custom frame info registration on i686-pc-windows-gnu\n\nThe indirection is no longer needed since we always link to libgcc\neven when the panic_abort runtime is used. Instead we can just call\nthe libgcc functions directly.", "tree": {"sha": "5188e1d2b7527c8ed352d2e98d2c6406347d7e3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5188e1d2b7527c8ed352d2e98d2c6406347d7e3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c110329f25bf8c3103e5c5298775468df80c3517", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c110329f25bf8c3103e5c5298775468df80c3517", "html_url": "https://github.com/rust-lang/rust/commit/c110329f25bf8c3103e5c5298775468df80c3517", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c110329f25bf8c3103e5c5298775468df80c3517/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ff087669438ec406fd3abc99bd1b85b6fbe156a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ff087669438ec406fd3abc99bd1b85b6fbe156a", "html_url": "https://github.com/rust-lang/rust/commit/5ff087669438ec406fd3abc99bd1b85b6fbe156a"}], "stats": {"total": 65, "additions": 14, "deletions": 51}, "files": [{"sha": "7cce14be4fd7acf87ffe92ab77b3c8d1fa0d194f", "filename": "library/panic_abort/src/lib.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c110329f25bf8c3103e5c5298775468df80c3517/library%2Fpanic_abort%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c110329f25bf8c3103e5c5298775468df80c3517/library%2Fpanic_abort%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_abort%2Fsrc%2Flib.rs?ref=c110329f25bf8c3103e5c5298775468df80c3517", "patch": "@@ -123,13 +123,4 @@ pub mod personalities {\n     #[allow(non_upper_case_globals)]\n     #[cfg(target_os = \"emscripten\")]\n     static rust_eh_catch_typeinfo: [usize; 2] = [0; 2];\n-\n-    // These two are called by our startup objects on i686-pc-windows-gnu, but\n-    // they don't need to do anything so the bodies are nops.\n-    #[rustc_std_internal_symbol]\n-    #[cfg(all(target_os = \"windows\", target_env = \"gnu\", target_arch = \"x86\"))]\n-    pub extern \"C\" fn rust_eh_register_frames() {}\n-    #[rustc_std_internal_symbol]\n-    #[cfg(all(target_os = \"windows\", target_env = \"gnu\", target_arch = \"x86\"))]\n-    pub extern \"C\" fn rust_eh_unregister_frames() {}\n }"}, {"sha": "261404e8795fce31722240d700fc722485fe2047", "filename": "library/panic_unwind/src/gcc.rs", "status": "modified", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c110329f25bf8c3103e5c5298775468df80c3517/library%2Fpanic_unwind%2Fsrc%2Fgcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c110329f25bf8c3103e5c5298775468df80c3517/library%2Fpanic_unwind%2Fsrc%2Fgcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_unwind%2Fsrc%2Fgcc.rs?ref=c110329f25bf8c3103e5c5298775468df80c3517", "patch": "@@ -87,37 +87,3 @@ fn rust_exception_class() -> uw::_Unwind_Exception_Class {\n     // M O Z \\0  R U S T -- vendor, language\n     0x4d4f5a_00_52555354\n }\n-\n-// Frame unwind info registration\n-//\n-// Each module's image contains a frame unwind info section (usually\n-// \".eh_frame\").  When a module is loaded/unloaded into the process, the\n-// unwinder must be informed about the location of this section in memory. The\n-// methods of achieving that vary by the platform.  On some (e.g., Linux), the\n-// unwinder can discover unwind info sections on its own (by dynamically\n-// enumerating currently loaded modules via the dl_iterate_phdr() API and\n-// finding their \".eh_frame\" sections); Others, like Windows, require modules\n-// to actively register their unwind info sections via unwinder API.\n-//\n-// This module defines two symbols which are referenced and called from\n-// rsbegin.rs to register our information with the GCC runtime. The\n-// implementation of stack unwinding is (for now) deferred to libgcc_eh, however\n-// Rust crates use these Rust-specific entry points to avoid potential clashes\n-// with any GCC runtime.\n-#[cfg(all(target_os = \"windows\", target_arch = \"x86\", target_env = \"gnu\"))]\n-pub mod eh_frame_registry {\n-    extern \"C\" {\n-        fn __register_frame_info(eh_frame_begin: *const u8, object: *mut u8);\n-        fn __deregister_frame_info(eh_frame_begin: *const u8, object: *mut u8);\n-    }\n-\n-    #[rustc_std_internal_symbol]\n-    pub unsafe extern \"C\" fn rust_eh_register_frames(eh_frame_begin: *const u8, object: *mut u8) {\n-        __register_frame_info(eh_frame_begin, object);\n-    }\n-\n-    #[rustc_std_internal_symbol]\n-    pub unsafe extern \"C\" fn rust_eh_unregister_frames(eh_frame_begin: *const u8, object: *mut u8) {\n-        __deregister_frame_info(eh_frame_begin, object);\n-    }\n-}"}, {"sha": "1eb4f378904a9894efcddba25f6138e5aac883c9", "filename": "library/panic_unwind/src/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c110329f25bf8c3103e5c5298775468df80c3517/library%2Fpanic_unwind%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c110329f25bf8c3103e5c5298775468df80c3517/library%2Fpanic_unwind%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_unwind%2Fsrc%2Flib.rs?ref=c110329f25bf8c3103e5c5298775468df80c3517", "patch": "@@ -52,9 +52,6 @@ cfg_if::cfg_if! {\n         all(target_family = \"unix\", not(target_os = \"espidf\")),\n         all(target_vendor = \"fortanix\", target_env = \"sgx\"),\n     ))] {\n-        // Rust runtime's startup objects depend on these symbols, so make them public.\n-        #[cfg(all(target_os=\"windows\", target_arch = \"x86\", target_env=\"gnu\"))]\n-        pub use real_imp::eh_frame_registry::*;\n         #[path = \"gcc.rs\"]\n         mod real_imp;\n     } else {"}, {"sha": "1df0c897053800a3636a440da1e1c5f2f98a205f", "filename": "library/rtstartup/rsbegin.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c110329f25bf8c3103e5c5298775468df80c3517/library%2Frtstartup%2Frsbegin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c110329f25bf8c3103e5c5298775468df80c3517/library%2Frtstartup%2Frsbegin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Frtstartup%2Frsbegin.rs?ref=c110329f25bf8c3103e5c5298775468df80c3517", "patch": "@@ -35,6 +35,16 @@ pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n     drop_in_place(to_drop);\n }\n \n+// Frame unwind info registration\n+//\n+// Each module's image contains a frame unwind info section (usually\n+// \".eh_frame\").  When a module is loaded/unloaded into the process, the\n+// unwinder must be informed about the location of this section in memory. The\n+// methods of achieving that vary by the platform.  On some (e.g., Linux), the\n+// unwinder can discover unwind info sections on its own (by dynamically\n+// enumerating currently loaded modules via the dl_iterate_phdr() API and\n+// finding their \".eh_frame\" sections); Others, like Windows, require modules\n+// to actively register their unwind info sections via unwinder API.\n #[cfg(all(target_os = \"windows\", target_arch = \"x86\", target_env = \"gnu\"))]\n pub mod eh_frames {\n     #[no_mangle]\n@@ -62,20 +72,19 @@ pub mod eh_frames {\n     }\n \n     // Unwind info registration/deregistration routines.\n-    // See the docs of libpanic_unwind.\n     extern \"C\" {\n-        fn rust_eh_register_frames(eh_frame_begin: *const u8, object: *mut u8);\n-        fn rust_eh_unregister_frames(eh_frame_begin: *const u8, object: *mut u8);\n+        fn __register_frame_info(eh_frame_begin: *const u8, object: *mut u8);\n+        fn __deregister_frame_info(eh_frame_begin: *const u8, object: *mut u8);\n     }\n \n     unsafe extern \"C\" fn init() {\n         // register unwind info on module startup\n-        rust_eh_register_frames(&__EH_FRAME_BEGIN__ as *const u8, &mut OBJ as *mut _ as *mut u8);\n+        __register_frame_info(&__EH_FRAME_BEGIN__ as *const u8, &mut OBJ as *mut _ as *mut u8);\n     }\n \n     unsafe extern \"C\" fn uninit() {\n         // unregister on shutdown\n-        rust_eh_unregister_frames(&__EH_FRAME_BEGIN__ as *const u8, &mut OBJ as *mut _ as *mut u8);\n+        __deregister_frame_info(&__EH_FRAME_BEGIN__ as *const u8, &mut OBJ as *mut _ as *mut u8);\n     }\n \n     // MinGW-specific init/uninit routine registration"}]}