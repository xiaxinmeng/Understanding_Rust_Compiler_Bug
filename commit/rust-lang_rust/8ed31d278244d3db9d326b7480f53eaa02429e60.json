{"sha": "8ed31d278244d3db9d326b7480f53eaa02429e60", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlZDMxZDI3ODI0NGQzZGI5ZDMyNmI3NDgwZjUzZWFhMDI0MjllNjA=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-11-01T10:53:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-01T10:53:36Z"}, "message": "Rollup merge of #78602 - RalfJung:raw-ptr-aliasing-issues, r=m-ou-se\n\nfix various aliasing issues in the standard library\n\nThis fixes various cases where the standard library either used raw pointers after they were already invalidated by using the original reference again, or created raw pointers for one element of a slice and used it to access neighboring elements.", "tree": {"sha": "aaa78631fa13e3c90ac809595eeec843b21b23af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aaa78631fa13e3c90ac809595eeec843b21b23af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ed31d278244d3db9d326b7480f53eaa02429e60", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfnpOwCRBK7hj4Ov3rIwAAdHIIAB/ou0C7y2sYvxrsNRNWUcJQ\numKYUQwA/oeTwStyzpyILW6y4fIkJGGyfvhLRgs/FyDOB7hTvyaP9lWt6pVTHmhZ\nKeti+RfEQaq5FB6MDI0OlFnGYHbskIRp5ACpG+j4VQh2OJ5i8FdrFo+7bQhb5+Vy\nUnjCyfpGw14qIoIucM5J6LOmKc7B7XGx/KzfL+3E0mKxmTeW6CQdYxf+yBVt2NSF\nCrltZLvwC7AgJGUQFHHOhEyJXlefMwErLkrhHdpwU67fp9A4PL3qKOYc9fcTtYp8\nd1uT/gYTidGm9KoTypAIecQ/V50HzIeIKupW+Qz0gosZJC0ItUlI3aiNNpZ26cM=\n=BOkS\n-----END PGP SIGNATURE-----\n", "payload": "tree aaa78631fa13e3c90ac809595eeec843b21b23af\nparent f281a76f838161a5e95fd0bba82847feb0a29435\nparent 9749eb72af8f817fd72c0a7cdad324a9baa8b635\nauthor Mara Bos <m-ou.se@m-ou.se> 1604228016 +0100\ncommitter GitHub <noreply@github.com> 1604228016 +0100\n\nRollup merge of #78602 - RalfJung:raw-ptr-aliasing-issues, r=m-ou-se\n\nfix various aliasing issues in the standard library\n\nThis fixes various cases where the standard library either used raw pointers after they were already invalidated by using the original reference again, or created raw pointers for one element of a slice and used it to access neighboring elements.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ed31d278244d3db9d326b7480f53eaa02429e60", "html_url": "https://github.com/rust-lang/rust/commit/8ed31d278244d3db9d326b7480f53eaa02429e60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ed31d278244d3db9d326b7480f53eaa02429e60/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f281a76f838161a5e95fd0bba82847feb0a29435", "url": "https://api.github.com/repos/rust-lang/rust/commits/f281a76f838161a5e95fd0bba82847feb0a29435", "html_url": "https://github.com/rust-lang/rust/commit/f281a76f838161a5e95fd0bba82847feb0a29435"}, {"sha": "9749eb72af8f817fd72c0a7cdad324a9baa8b635", "url": "https://api.github.com/repos/rust-lang/rust/commits/9749eb72af8f817fd72c0a7cdad324a9baa8b635", "html_url": "https://github.com/rust-lang/rust/commit/9749eb72af8f817fd72c0a7cdad324a9baa8b635"}], "stats": {"total": 26, "additions": 17, "deletions": 9}, "files": [{"sha": "b67c72d7136a67e13ba993993723976124efded5", "filename": "library/alloc/src/collections/binary_heap.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8ed31d278244d3db9d326b7480f53eaa02429e60/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ed31d278244d3db9d326b7480f53eaa02429e60/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs?ref=8ed31d278244d3db9d326b7480f53eaa02429e60", "patch": "@@ -1036,8 +1036,9 @@ impl<'a, T> Hole<'a, T> {\n         debug_assert!(index != self.pos);\n         debug_assert!(index < self.data.len());\n         unsafe {\n-            let index_ptr: *const _ = self.data.get_unchecked(index);\n-            let hole_ptr = self.data.get_unchecked_mut(self.pos);\n+            let ptr = self.data.as_mut_ptr();\n+            let index_ptr: *const _ = ptr.add(index);\n+            let hole_ptr = ptr.add(self.pos);\n             ptr::copy_nonoverlapping(index_ptr, hole_ptr, 1);\n         }\n         self.pos = index;"}, {"sha": "7a98210995ec75b4272199dd934f959f0f0c7fad", "filename": "library/core/src/fmt/num.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8ed31d278244d3db9d326b7480f53eaa02429e60/library%2Fcore%2Fsrc%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ed31d278244d3db9d326b7480f53eaa02429e60/library%2Fcore%2Fsrc%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fnum.rs?ref=8ed31d278244d3db9d326b7480f53eaa02429e60", "patch": "@@ -595,7 +595,6 @@ fn fmt_u128(n: u128, is_nonnegative: bool, f: &mut fmt::Formatter<'_>) -> fmt::R\n     // 2^128 is about 3*10^38, so 39 gives an extra byte of space\n     let mut buf = [MaybeUninit::<u8>::uninit(); 39];\n     let mut curr = buf.len() as isize;\n-    let buf_ptr = MaybeUninit::slice_as_mut_ptr(&mut buf);\n \n     let (n, rem) = udiv_1e19(n);\n     parse_u64_into(rem, &mut buf, &mut curr);\n@@ -606,7 +605,11 @@ fn fmt_u128(n: u128, is_nonnegative: bool, f: &mut fmt::Formatter<'_>) -> fmt::R\n         // SAFETY: Guaranteed that we wrote at most 19 bytes, and there must be space\n         // remaining since it has length 39\n         unsafe {\n-            ptr::write_bytes(buf_ptr.offset(target), b'0', (curr - target) as usize);\n+            ptr::write_bytes(\n+                MaybeUninit::slice_as_mut_ptr(&mut buf).offset(target),\n+                b'0',\n+                (curr - target) as usize,\n+            );\n         }\n         curr = target;\n \n@@ -615,6 +618,9 @@ fn fmt_u128(n: u128, is_nonnegative: bool, f: &mut fmt::Formatter<'_>) -> fmt::R\n         // Should this following branch be annotated with unlikely?\n         if n != 0 {\n             let target = (buf.len() - 38) as isize;\n+            // The raw `buf_ptr` pointer is only valid until `buf` is used the next time,\n+            // buf `buf` is not used in this scope so we are good.\n+            let buf_ptr = MaybeUninit::slice_as_mut_ptr(&mut buf);\n             // SAFETY: At this point we wrote at most 38 bytes, pad up to that point,\n             // There can only be at most 1 digit remaining.\n             unsafe {\n@@ -629,7 +635,7 @@ fn fmt_u128(n: u128, is_nonnegative: bool, f: &mut fmt::Formatter<'_>) -> fmt::R\n     // UTF-8 since `DEC_DIGITS_LUT` is\n     let buf_slice = unsafe {\n         str::from_utf8_unchecked(slice::from_raw_parts(\n-            buf_ptr.offset(curr),\n+            MaybeUninit::slice_as_mut_ptr(&mut buf).offset(curr),\n             buf.len() - curr as usize,\n         ))\n     };"}, {"sha": "6178b0af137e8c4cd1fc9121cb52ce06ce5246ad", "filename": "library/core/src/hash/sip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ed31d278244d3db9d326b7480f53eaa02429e60/library%2Fcore%2Fsrc%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ed31d278244d3db9d326b7480f53eaa02429e60/library%2Fcore%2Fsrc%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhash%2Fsip.rs?ref=8ed31d278244d3db9d326b7480f53eaa02429e60", "patch": "@@ -111,7 +111,7 @@ macro_rules! load_int_le {\n         debug_assert!($i + mem::size_of::<$int_ty>() <= $buf.len());\n         let mut data = 0 as $int_ty;\n         ptr::copy_nonoverlapping(\n-            $buf.get_unchecked($i),\n+            $buf.as_ptr().add($i),\n             &mut data as *mut _ as *mut u8,\n             mem::size_of::<$int_ty>(),\n         );"}, {"sha": "660b7db70be928ebebd5fcb5a36b98cc506044f3", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ed31d278244d3db9d326b7480f53eaa02429e60/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ed31d278244d3db9d326b7480f53eaa02429e60/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=8ed31d278244d3db9d326b7480f53eaa02429e60", "patch": "@@ -842,13 +842,13 @@ impl<T> MaybeUninit<T> {\n     #[unstable(feature = \"maybe_uninit_slice\", issue = \"63569\")]\n     #[inline(always)]\n     pub fn slice_as_ptr(this: &[MaybeUninit<T>]) -> *const T {\n-        this as *const [MaybeUninit<T>] as *const T\n+        this.as_ptr() as *const T\n     }\n \n     /// Gets a mutable pointer to the first element of the array.\n     #[unstable(feature = \"maybe_uninit_slice\", issue = \"63569\")]\n     #[inline(always)]\n     pub fn slice_as_mut_ptr(this: &mut [MaybeUninit<T>]) -> *mut T {\n-        this as *mut [MaybeUninit<T>] as *mut T\n+        this.as_mut_ptr() as *mut T\n     }\n }"}, {"sha": "f1ab302d30e1e70c558b6b53a9f6bbe6fcef7661", "filename": "library/std/src/sys/unix/thread.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ed31d278244d3db9d326b7480f53eaa02429e60/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ed31d278244d3db9d326b7480f53eaa02429e60/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs?ref=8ed31d278244d3db9d326b7480f53eaa02429e60", "patch": "@@ -178,7 +178,8 @@ impl Thread {\n                     tv_nsec: nsecs,\n                 };\n                 secs -= ts.tv_sec as u64;\n-                if libc::nanosleep(&ts, &mut ts) == -1 {\n+                let ts_ptr = &mut ts as *mut _;\n+                if libc::nanosleep(ts_ptr, ts_ptr) == -1 {\n                     assert_eq!(os::errno(), libc::EINTR);\n                     secs += ts.tv_sec as u64;\n                     nsecs = ts.tv_nsec;"}]}