{"sha": "68cbb46913e42782a30e6127c0e9e3920d918b03", "node_id": "C_kwDOAAsO6NoAKDY4Y2JiNDY5MTNlNDI3ODJhMzBlNjEyN2MwZTllMzkyMGQ5MThiMDM", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2022-01-12T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2022-01-12T17:51:31Z"}, "message": "Remove deprecated LLVM-style inline assembly", "tree": {"sha": "3cb9f1f22635062c2d978776f57fa6883b564f4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3cb9f1f22635062c2d978776f57fa6883b564f4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68cbb46913e42782a30e6127c0e9e3920d918b03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68cbb46913e42782a30e6127c0e9e3920d918b03", "html_url": "https://github.com/rust-lang/rust/commit/68cbb46913e42782a30e6127c0e9e3920d918b03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68cbb46913e42782a30e6127c0e9e3920d918b03/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09afd649694e1e1189c8c40da8237a0960a61095", "url": "https://api.github.com/repos/rust-lang/rust/commits/09afd649694e1e1189c8c40da8237a0960a61095", "html_url": "https://github.com/rust-lang/rust/commit/09afd649694e1e1189c8c40da8237a0960a61095"}], "stats": {"total": 12, "additions": 0, "deletions": 12}, "files": [{"sha": "d620b24e0677ac114adf8ec0ce86127c1ff7f92a", "filename": "src/asm.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/68cbb46913e42782a30e6127c0e9e3920d918b03/src%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68cbb46913e42782a30e6127c0e9e3920d918b03/src%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fasm.rs?ref=68cbb46913e42782a30e6127c0e9e3920d918b03", "patch": "@@ -4,7 +4,6 @@ use rustc_codegen_ssa::mir::operand::OperandValue;\n use rustc_codegen_ssa::mir::place::PlaceRef;\n use rustc_codegen_ssa::traits::{AsmBuilderMethods, AsmMethods, BaseTypeMethods, BuilderMethods, GlobalAsmOperandRef, InlineAsmOperandRef};\n \n-use rustc_hir::LlvmInlineAsmInner;\n use rustc_middle::{bug, ty::Instance};\n use rustc_span::{Span, Symbol};\n use rustc_target::asm::*;\n@@ -106,17 +105,6 @@ enum ConstraintOrRegister {\n \n \n impl<'a, 'gcc, 'tcx> AsmBuilderMethods<'tcx> for Builder<'a, 'gcc, 'tcx> {\n-    fn codegen_llvm_inline_asm(&mut self, _ia: &LlvmInlineAsmInner, _outputs: Vec<PlaceRef<'tcx, RValue<'gcc>>>, _inputs: Vec<RValue<'gcc>>, span: Span) -> bool {\n-        self.sess().struct_span_err(span, \"GCC backend does not support `llvm_asm!`\")\n-            .help(\"consider using the `asm!` macro instead\")\n-            .emit();\n-\n-        // We return `true` even if we've failed to generate the asm\n-        // because we want to suppress the \"malformed inline assembly\" error\n-        // generated by the frontend.\n-        true\n-    }\n-\n     fn codegen_inline_asm(&mut self, template: &[InlineAsmTemplatePiece], rust_operands: &[InlineAsmOperandRef<'tcx, Self>], options: InlineAsmOptions, span: &[Span], _instance: Instance<'_>, _dest_catch_funclet: Option<(Self::BasicBlock, Self::BasicBlock, Option<&Self::Funclet>)>) {\n         if options.contains(InlineAsmOptions::MAY_UNWIND) {\n             self.sess()"}]}