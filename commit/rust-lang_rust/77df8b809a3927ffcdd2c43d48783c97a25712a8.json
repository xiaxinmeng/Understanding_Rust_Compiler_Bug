{"sha": "77df8b809a3927ffcdd2c43d48783c97a25712a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3ZGY4YjgwOWEzOTI3ZmZjZGQyYzQzZDQ4NzgzYzk3YTI1NzEyYTg=", "commit": {"author": {"name": "Do Nhat Minh", "email": "mrordinaire@gmail.com", "date": "2013-08-22T09:41:33Z"}, "committer": {"name": "Do Nhat Minh", "email": "mrordinaire@gmail.com", "date": "2013-08-23T02:26:37Z"}, "message": "removed os::set_args, closing #8325\nremoved pub on real_args, changed test to use args", "tree": {"sha": "3fb75f66e5cc730842093b4cca0610c4eea9b4ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3fb75f66e5cc730842093b4cca0610c4eea9b4ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77df8b809a3927ffcdd2c43d48783c97a25712a8", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77df8b809a3927ffcdd2c43d48783c97a25712a8", "html_url": "https://github.com/rust-lang/rust/commit/77df8b809a3927ffcdd2c43d48783c97a25712a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77df8b809a3927ffcdd2c43d48783c97a25712a8/comments", "author": null, "committer": null, "parents": [{"sha": "f858452391c63bfbf46678c4ea9fd584adf1c28e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f858452391c63bfbf46678c4ea9fd584adf1c28e", "html_url": "https://github.com/rust-lang/rust/commit/f858452391c63bfbf46678c4ea9fd584adf1c28e"}], "stats": {"total": 75, "additions": 35, "deletions": 40}, "files": [{"sha": "a20e864e2922eb784320b2359a679b6c7f57ec46", "filename": "src/librust/rust.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/77df8b809a3927ffcdd2c43d48783c97a25712a8/src%2Flibrust%2Frust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77df8b809a3927ffcdd2c43d48783c97a25712a8/src%2Flibrust%2Frust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrust%2Frust.rs?ref=77df8b809a3927ffcdd2c43d48783c97a25712a8", "patch": "@@ -45,7 +45,7 @@ impl ValidUsage {\n \n enum Action {\n     Call(extern \"Rust\" fn(args: &[~str]) -> ValidUsage),\n-    CallMain(&'static str, extern \"Rust\" fn()),\n+    CallMain(&'static str, extern \"Rust\" fn(&[~str])),\n }\n \n enum UsageSource<'self> {\n@@ -69,7 +69,7 @@ static NUM_OF_COMMANDS: uint = 7;\n static COMMANDS: [Command<'static>, .. NUM_OF_COMMANDS] = [\n     Command{\n         cmd: \"build\",\n-        action: CallMain(\"rustc\", rustc::main),\n+        action: CallMain(\"rustc\", rustc::main_args),\n         usage_line: \"compile rust source files\",\n         usage_full: UsgCall(rustc_help),\n     },\n@@ -95,19 +95,19 @@ static COMMANDS: [Command<'static>, .. NUM_OF_COMMANDS] = [\n     },\n     Command{\n         cmd: \"doc\",\n-        action: CallMain(\"rustdoc\", rustdoc::main),\n+        action: CallMain(\"rustdoc\", rustdoc::main_args),\n         usage_line: \"generate documentation from doc comments\",\n         usage_full: UsgCall(rustdoc::config::usage),\n     },\n     Command{\n         cmd: \"pkg\",\n-        action: CallMain(\"rustpkg\", rustpkg::main),\n+        action: CallMain(\"rustpkg\", rustpkg::main_args),\n         usage_line: \"download, build, install rust packages\",\n         usage_full: UsgCall(rustpkg::usage::general),\n     },\n     Command{\n         cmd: \"sketch\",\n-        action: CallMain(\"rusti\", rusti::main),\n+        action: CallMain(\"rusti\", rusti::main_args),\n         usage_line: \"run a rust interpreter\",\n         usage_full: UsgStr(\"\\nUsage:\\trusti\"),\n     },\n@@ -164,7 +164,7 @@ fn cmd_test(args: &[~str]) -> ValidUsage {\n         [ref filename] => {\n             let test_exec = Path(*filename).filestem().unwrap() + \"test~\";\n             invoke(\"rustc\", &[~\"--test\", filename.to_owned(),\n-                              ~\"-o\", test_exec.to_owned()], rustc::main);\n+                              ~\"-o\", test_exec.to_owned()], rustc::main_args);\n             let exit_code = run::process_status(~\"./\" + test_exec, []);\n             Valid(exit_code)\n         }\n@@ -177,19 +177,18 @@ fn cmd_run(args: &[~str]) -> ValidUsage {\n         [ref filename, ..prog_args] => {\n             let exec = Path(*filename).filestem().unwrap() + \"~\";\n             invoke(\"rustc\", &[filename.to_owned(), ~\"-o\", exec.to_owned()],\n-                   rustc::main);\n+                   rustc::main_args);\n             let exit_code = run::process_status(~\"./\"+exec, prog_args);\n             Valid(exit_code)\n         }\n         _ => Invalid\n     }\n }\n \n-fn invoke(prog: &str, args: &[~str], f: &fn()) {\n+fn invoke(prog: &str, args: &[~str], f: &fn(&[~str])) {\n     let mut osargs = ~[prog.to_owned()];\n     osargs.push_all_move(args.to_owned());\n-    os::set_args(osargs);\n-    f();\n+    f(osargs);\n }\n \n fn do_command(command: &Command, args: &[~str]) -> ValidUsage {"}, {"sha": "33407c91bcc23b1a7a034cb305514b5b83dcde2e", "filename": "src/librustc/rustc.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/77df8b809a3927ffcdd2c43d48783c97a25712a8/src%2Flibrustc%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77df8b809a3927ffcdd2c43d48783c97a25712a8/src%2Flibrustc%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rs?ref=77df8b809a3927ffcdd2c43d48783c97a25712a8", "patch": "@@ -191,11 +191,11 @@ pub fn describe_debug_flags() {\n     }\n }\n \n-pub fn run_compiler(args: &~[~str], demitter: diagnostic::Emitter) {\n+pub fn run_compiler(args: &[~str], demitter: diagnostic::Emitter) {\n     // Don't display log spew by default. Can override with RUST_LOG.\n     ::std::logging::console_off();\n \n-    let mut args = (*args).clone();\n+    let mut args = args.to_owned();\n     let binary = args.shift().to_managed();\n \n     if args.is_empty() { usage(binary); return; }\n@@ -381,7 +381,12 @@ pub fn monitor(f: ~fn(diagnostic::Emitter)) {\n \n pub fn main() {\n     let args = os::args();\n+    main_args(args);\n+}\n+\n+pub fn main_args(args: &[~str]) {\n+    let owned_args = args.to_owned();\n     do monitor |demitter| {\n-        run_compiler(&args, demitter);\n+        run_compiler(owned_args, demitter);\n     }\n }"}, {"sha": "a55fa6bc3f7e961b1d28c3c2cb9ced3c702de28e", "filename": "src/librustdoc/rustdoc.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/77df8b809a3927ffcdd2c43d48783c97a25712a8/src%2Flibrustdoc%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77df8b809a3927ffcdd2c43d48783c97a25712a8/src%2Flibrustdoc%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Frustdoc.rs?ref=77df8b809a3927ffcdd2c43d48783c97a25712a8", "patch": "@@ -59,7 +59,10 @@ pub mod prune_private_pass;\n \n pub fn main() {\n     let args = os::args();\n+    main_args(args);\n+}\n \n+pub fn main_args(args: &[~str]) {\n     if args.iter().any(|x| \"-h\" == *x) || args.iter().any(|x| \"--help\" == *x) {\n         config::usage();\n         return;"}, {"sha": "4e4f6e3682b4a729647eba55b3c880697feb353e", "filename": "src/librusti/rusti.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/77df8b809a3927ffcdd2c43d48783c97a25712a8/src%2Flibrusti%2Frusti.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77df8b809a3927ffcdd2c43d48783c97a25712a8/src%2Flibrusti%2Frusti.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Frusti.rs?ref=77df8b809a3927ffcdd2c43d48783c97a25712a8", "patch": "@@ -498,9 +498,13 @@ pub fn run_line(repl: &mut Repl, input: @io::Reader, out: @io::Writer, line: ~st\n }\n \n pub fn main() {\n+    let args = os::args();\n+    main_args(args);\n+}\n+\n+pub fn main_args(args: &[~str]) {\n     #[fixed_stack_segment]; #[inline(never)];\n \n-    let args = os::args();\n     let input = io::stdin();\n     let out = io::stdout();\n     let mut repl = Repl {"}, {"sha": "f5dc17851e5ccfca90696e771cf3ddafea019972", "filename": "src/librustpkg/rustpkg.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/77df8b809a3927ffcdd2c43d48783c97a25712a8/src%2Flibrustpkg%2Frustpkg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77df8b809a3927ffcdd2c43d48783c97a25712a8/src%2Flibrustpkg%2Frustpkg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Frustpkg.rs?ref=77df8b809a3927ffcdd2c43d48783c97a25712a8", "patch": "@@ -466,8 +466,11 @@ impl CtxMethods for Ctx {\n \n pub fn main() {\n     io::println(\"WARNING: The Rust package manager is experimental and may be unstable\");\n-\n     let args = os::args();\n+    main_args(args);\n+}\n+\n+pub fn main_args(args: &[~str]) {\n     let opts = ~[getopts::optflag(\"h\"), getopts::optflag(\"help\"),\n                  getopts::optflag(\"j\"), getopts::optflag(\"json\"),\n                  getopts::optmulti(\"c\"), getopts::optmulti(\"cfg\")];"}, {"sha": "391c7f550797b66deace1af8494664a308dab934", "filename": "src/libstd/os.rs", "status": "modified", "additions": 6, "deletions": 25, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/77df8b809a3927ffcdd2c43d48783c97a25712a8/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77df8b809a3927ffcdd2c43d48783c97a25712a8/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=77df8b809a3927ffcdd2c43d48783c97a25712a8", "patch": "@@ -36,7 +36,6 @@ use iterator::range;\n use libc;\n use libc::{c_char, c_void, c_int, size_t};\n use libc::FILE;\n-use local_data;\n use option::{Some, None};\n use os;\n use prelude::*;\n@@ -1188,7 +1187,7 @@ unsafe fn load_argc_and_argv(argc: c_int, argv: **c_char) -> ~[~str] {\n  * Returns a list of the command line arguments.\n  */\n #[cfg(target_os = \"macos\")]\n-pub fn real_args() -> ~[~str] {\n+fn real_args() -> ~[~str] {\n     #[fixed_stack_segment]; #[inline(never)];\n \n     unsafe {\n@@ -1201,7 +1200,7 @@ pub fn real_args() -> ~[~str] {\n #[cfg(target_os = \"linux\")]\n #[cfg(target_os = \"android\")]\n #[cfg(target_os = \"freebsd\")]\n-pub fn real_args() -> ~[~str] {\n+fn real_args() -> ~[~str] {\n     use rt;\n \n     match rt::args::clone() {\n@@ -1211,7 +1210,7 @@ pub fn real_args() -> ~[~str] {\n }\n \n #[cfg(windows)]\n-pub fn real_args() -> ~[~str] {\n+fn real_args() -> ~[~str] {\n     #[fixed_stack_segment]; #[inline(never)];\n \n     let mut nArgs: c_int = 0;\n@@ -1261,28 +1260,10 @@ struct OverriddenArgs {\n     val: ~[~str]\n }\n \n-static overridden_arg_key: local_data::Key<@OverriddenArgs> = &local_data::Key;\n-\n /// Returns the arguments which this program was started with (normally passed\n /// via the command line).\n-///\n-/// The return value of the function can be changed by invoking the\n-/// `os::set_args` function.\n pub fn args() -> ~[~str] {\n-    match local_data::get(overridden_arg_key, |k| k.map(|&k| *k)) {\n-        None => real_args(),\n-        Some(args) => args.val.clone()\n-    }\n-}\n-\n-/// For the current task, overrides the task-local cache of the arguments this\n-/// program had when it started. These new arguments are only available to the\n-/// current task via the `os::args` method.\n-pub fn set_args(new_args: ~[~str]) {\n-    let overridden_args = @OverriddenArgs {\n-        val: new_args.clone()\n-    };\n-    local_data::set(overridden_arg_key, overridden_args);\n+    real_args()\n }\n \n // FIXME #6100 we should really use an internal implementation of this - using\n@@ -1770,7 +1751,7 @@ mod tests {\n     use libc;\n     use option::Some;\n     use option;\n-    use os::{env, getcwd, getenv, make_absolute, real_args};\n+    use os::{env, getcwd, getenv, make_absolute, args};\n     use os::{remove_file, setenv, unsetenv};\n     use os;\n     use path::Path;\n@@ -1788,7 +1769,7 @@ mod tests {\n \n     #[test]\n     pub fn test_args() {\n-        let a = real_args();\n+        let a = args();\n         assert!(a.len() >= 1);\n     }\n "}]}