{"sha": "71a4a661359dbe92493f7321f8b3677dec734df9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxYTRhNjYxMzU5ZGJlOTI0OTNmNzMyMWY4YjM2NzdkZWM3MzRkZjk=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-10-18T11:45:17Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-10-18T11:54:35Z"}, "message": "Add a math module to the standard lib\n\nI need some rudimentary stdlib stuff for the tutorial.\n\nCloses #1042", "tree": {"sha": "80f11403baf33494ce2919c1f24dbdb35ccc3544", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80f11403baf33494ce2919c1f24dbdb35ccc3544"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71a4a661359dbe92493f7321f8b3677dec734df9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71a4a661359dbe92493f7321f8b3677dec734df9", "html_url": "https://github.com/rust-lang/rust/commit/71a4a661359dbe92493f7321f8b3677dec734df9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71a4a661359dbe92493f7321f8b3677dec734df9/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9d0782b5f782a72d895f103afc643e51e7f38ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9d0782b5f782a72d895f103afc643e51e7f38ae", "html_url": "https://github.com/rust-lang/rust/commit/d9d0782b5f782a72d895f103afc643e51e7f38ae"}], "stats": {"total": 93, "additions": 72, "deletions": 21}, "files": [{"sha": "c8b3c67bfa084d21e9866ae7c96aa8f26ec26526", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71a4a661359dbe92493f7321f8b3677dec734df9/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a4a661359dbe92493f7321f8b3677dec734df9/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=71a4a661359dbe92493f7321f8b3677dec734df9", "patch": "@@ -1305,17 +1305,17 @@ fn valid_range_bounds(l1: @ast::lit, l2: @ast::lit) -> bool {\n         let s2 = lit_as_float(l2);\n         let f1 = std::float::from_str(s1);\n         let f2 = std::float::from_str(s2);\n-        ret *util::common::min(f1, f2) == f1\n+        ret std::math::min(f1, f2) == f1\n       }\n       ast::lit_uint(_) | ast::lit_char(_) {\n         let u1 = lit_as_uint(l1);\n         let u2 = lit_as_uint(l2);\n-        ret *util::common::min(u1, u2) == u1\n+        ret std::math::min(u1, u2) == u1\n       }\n       _ {\n         let i1 = lit_as_int(l1);\n         let i2 = lit_as_int(l2);\n-        ret *util::common::min(i1, i2) == i1\n+        ret std::math::min(i1, i2) == i1\n       }\n     }\n }"}, {"sha": "88ee0bc8f32943d4b0cf05739b13bff1e6e3ac2a", "filename": "src/comp/util/common.rs", "status": "modified", "additions": 11, "deletions": 18, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/71a4a661359dbe92493f7321f8b3677dec734df9/src%2Fcomp%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a4a661359dbe92493f7321f8b3677dec734df9/src%2Fcomp%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Fcommon.rs?ref=71a4a661359dbe92493f7321f8b3677dec734df9", "patch": "@@ -1,4 +1,5 @@\n import std::{str, map, uint, int, option};\n+import std::math::{max, min};\n import std::map::hashmap;\n import std::option::{none, some};\n import syntax::ast;\n@@ -131,53 +132,45 @@ fn lit_in_range(l: @ast::lit, m1: @ast::lit, m2: @ast::lit) -> bool {\n       irange(i1, i2) {\n         alt l.node {\n           ast::lit_int(i3) | ast::lit_mach_int(_, i3) {\n-            i3 >= *min(i1, i2) && i3 <= *max(i1, i2)\n+            i3 >= min(i1, i2) && i3 <= max(i1, i2)\n           }\n           _ { fail }\n         }\n       }\n       urange(u1, u2) {\n         alt l.node {\n           ast::lit_uint(u3) {\n-            u3 >= *min(u1, u2) && u3 <= *max(u1, u2)\n+            u3 >= min(u1, u2) && u3 <= max(u1, u2)\n           }\n           _ { fail }\n         }\n       }\n       crange(c1, c2) {\n         alt l.node {\n           ast::lit_char(c3) {\n-            (c3 as uint) >= *min(c1 as uint, c2 as uint) &&\n-            (c3 as uint) <= *max(c1 as uint, c2 as uint)\n+            (c3 as uint) >= min(c1 as uint, c2 as uint) &&\n+            (c3 as uint) <= max(c1 as uint, c2 as uint)\n           }\n           _ { fail }\n         }\n       }\n       frange(f1, f2) {\n         alt l.node {\n           ast::lit_float(f3) | ast::lit_mach_float(_, f3) {\n-            std::float::from_str(f3) >= *min(f1, f2) &&\n-            std::float::from_str(f3) <= *max(f1, f2)\n+            std::float::from_str(f3) >= min(f1, f2) &&\n+            std::float::from_str(f3) <= max(f1, f2)\n           }\n           _ { fail }\n         }\n       }\n     }\n }\n \n-fn min<@T>(x: T, y: T) -> @T {\n-    ret @(if x > y { y } else { x });\n-}\n-\n-fn max<@T>(x: T, y: T) -> @T {\n-    ret @(if x > y { x } else { y });\n-}\n-\n fn ranges_overlap<@T>(a1: T, a2: T, b1: T, b2: T) -> bool {\n-    let min1 = *min(a1, a2);\n-    let max1 = *max(a1, a2);\n-    let min2 = *min(b1, b2);\n-    let max2 = *max(b1, b2);\n+    let min1 = min(a1, a2);\n+    let max1 = max(a1, a2);\n+    let min2 = min(b1, b2);\n+    let max2 = max(b1, b2);\n     ret (min1 >= min2 && max1 <= max2) || (min1 <= min2 && max1 >= min2) ||\n         (min1 >= min2 && min1 <= max2) || (max1 >= min2 && max1 <= max2);\n }"}, {"sha": "1d95e1d26072cc62058fab9284bb0160844d22de", "filename": "src/lib/math.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/71a4a661359dbe92493f7321f8b3677dec734df9/src%2Flib%2Fmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a4a661359dbe92493f7321f8b3677dec734df9/src%2Flib%2Fmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fmath.rs?ref=71a4a661359dbe92493f7321f8b3677dec734df9", "patch": "@@ -0,0 +1,22 @@\n+native \"llvm\" mod llvm {\n+    fn sqrt(n: float) -> float = \"sqrt.f64\";\n+    fn sin(n: float) -> float = \"sin.f64\";\n+    fn asin(n: float) -> float = \"asin.f64\";\n+    fn cos(n: float) -> float = \"cos.f64\";\n+    fn acos(n: float) -> float = \"acos.f64\";\n+    fn tan(n: float) -> float = \"tan.f64\";\n+    fn atan(n: float) -> float = \"atan.f64\";\n+}\n+\n+fn sqrt(x: float) -> float { llvm::sqrt(x) }\n+fn sin(x: float) -> float { llvm::sin(x) }\n+fn cos(x: float) -> float { llvm::cos(x) }\n+fn tan(x: float) -> float { llvm::tan(x) }\n+fn asin(x: float) -> float { llvm::asin(x) }\n+fn acos(x: float) -> float { llvm::acos(x) }\n+fn atan(x: float) -> float { llvm::atan(x) }\n+\n+const pi: float = 3.141592653589793;\n+\n+fn min<@T>(x: T, y: T) -> T { x < y ? x : y }\n+fn max<@T>(x: T, y: T) -> T { x < y ? y : x }"}, {"sha": "89b47685d8a35dc4b71e42d70ebc22a5dbb0e38e", "filename": "src/lib/std.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/71a4a661359dbe92493f7321f8b3677dec734df9/src%2Flib%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/71a4a661359dbe92493f7321f8b3677dec734df9/src%2Flib%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fstd.rc?ref=71a4a661359dbe92493f7321f8b3677dec734df9", "patch": "@@ -97,6 +97,7 @@ mod ptr;\n mod test;\n mod unsafe;\n mod term;\n+mod math;\n \n #[cfg(unicode)]\n mod unicode;"}, {"sha": "413f3377653b0a99a56e8ac0fa4859101274bd27", "filename": "src/test/stdtest/math.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/71a4a661359dbe92493f7321f8b3677dec734df9/src%2Ftest%2Fstdtest%2Fmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a4a661359dbe92493f7321f8b3677dec734df9/src%2Ftest%2Fstdtest%2Fmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fmath.rs?ref=71a4a661359dbe92493f7321f8b3677dec734df9", "patch": "@@ -0,0 +1,34 @@\n+use std;\n+import std::math::*;\n+\n+#[test]\n+fn test_sqrt() {\n+    assert sqrt(9.0) == 3.0;\n+    assert sqrt(4.0) == 2.0;\n+    assert sqrt(1.0) == 1.0;\n+    assert sqrt(0.0) == 0.0;\n+}\n+\n+#[test]\n+fn test_max_min() {\n+    assert max(0, 1) == 1;\n+    assert min(0, 1) == 0;\n+    assert max(0, -1) == 0;\n+    assert min(0, -1) == -1;\n+    assert max(0.0, 1.0) == 1.0;\n+    assert min(0.0, 1.0) == 0.0;\n+}\n+\n+#[test]\n+fn test_angle() {\n+    fn angle(vec: (float, float)) -> float {\n+        alt vec {\n+          (0f, y) when y < 0f { 1.5 * std::math::pi }\n+          (0f, y) { 0.5 * std::math::pi }\n+          (x, y) { std::math::atan(y / x) }\n+        }\n+    }\n+    assert angle((1f, 0f)) == 0f;\n+    assert angle((1f, 1f)) == 0.25 * pi;\n+    assert angle((0f, 1f)) == 0.5 * pi;\n+}"}, {"sha": "b2b7522c2e1995de8c556994015c8d75cb54a54e", "filename": "src/test/stdtest/stdtest.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/71a4a661359dbe92493f7321f8b3677dec734df9/src%2Ftest%2Fstdtest%2Fstdtest.rc", "raw_url": "https://github.com/rust-lang/rust/raw/71a4a661359dbe92493f7321f8b3677dec734df9/src%2Ftest%2Fstdtest%2Fstdtest.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fstdtest.rc?ref=71a4a661359dbe92493f7321f8b3677dec734df9", "patch": "@@ -30,6 +30,7 @@ mod task;\n mod test;\n mod uint;\n mod float;\n+mod math;\n \n // Local Variables:\n // mode: rust"}]}