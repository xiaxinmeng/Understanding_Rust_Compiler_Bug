{"sha": "1d834550d54e4c5211f03f877c1756425f24be98", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkODM0NTUwZDU0ZTRjNTIxMWYwM2Y4NzdjMTc1NjQyNWYyNGJlOTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-08T06:52:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-08T06:52:27Z"}, "message": "Auto merge of #55366 - Amanieu:stable_layout, r=Amanieu\n\nAdd tracking issue for Layout methods (and some API changes)\n\nThese methods are already useful when used with the stable global allocator API (stabilized in #51241).\n\n```rust\npub fn align_to(&self, align: usize) -> Result<Layout, LayoutErr>;\npub fn padding_needed_for(&self, align: usize) -> usize;\npub fn repeat(&self, n: usize) -> Result<(Layout, usize), LayoutErr>;\npub fn extend(&self, next: Layout) -> Result<(Layout, usize), LayoutErr>;\npub fn repeat_packed(&self, n: usize) -> Result<Layout, LayoutErr>;\npub fn extend_packed(&self, next: Layout) -> Result<Layout, LayoutErr>;\npub fn array<T>(n: usize) -> Result<Layout, LayoutErr>;\n```\n\ncc #32838\n\nr? @SimonSapin", "tree": {"sha": "95eaf84270dfacd46dc105b9ca33c4befe1915a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95eaf84270dfacd46dc105b9ca33c4befe1915a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d834550d54e4c5211f03f877c1756425f24be98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d834550d54e4c5211f03f877c1756425f24be98", "html_url": "https://github.com/rust-lang/rust/commit/1d834550d54e4c5211f03f877c1756425f24be98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d834550d54e4c5211f03f877c1756425f24be98/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c304fb0cf7328b570b5696c9b486268a0828563", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c304fb0cf7328b570b5696c9b486268a0828563", "html_url": "https://github.com/rust-lang/rust/commit/9c304fb0cf7328b570b5696c9b486268a0828563"}, {"sha": "02d50de63e50423c9cbaf3daa46dde6c9c5c9dba", "url": "https://api.github.com/repos/rust-lang/rust/commits/02d50de63e50423c9cbaf3daa46dde6c9c5c9dba", "html_url": "https://github.com/rust-lang/rust/commit/02d50de63e50423c9cbaf3daa46dde6c9c5c9dba"}], "stats": {"total": 42, "additions": 18, "deletions": 24}, "files": [{"sha": "abacc62c8562b0e594477a96904b292cfd7518a6", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -119,6 +119,7 @@\n #![feature(const_vec_new)]\n #![feature(slice_partition_dedup)]\n #![feature(maybe_uninit)]\n+#![feature(alloc_layout_extra)]\n \n // Allow testing this library\n "}, {"sha": "113a85abecbef4613163b79d0056cde77513faf8", "filename": "src/libcore/alloc.rs", "status": "modified", "additions": 16, "deletions": 24, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Flibcore%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Flibcore%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Falloc.rs?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -164,15 +164,13 @@ impl Layout {\n     /// alignment. In other words, if `K` has size 16, `K.align_to(32)`\n     /// will *still* have size 16.\n     ///\n-    /// # Panics\n-    ///\n-    /// Panics if the combination of `self.size()` and the given `align`\n-    /// violates the conditions listed in\n+    /// Returns an error if the combination of `self.size()` and the given\n+    /// `align` violates the conditions listed in\n     /// [`Layout::from_size_align`](#method.from_size_align).\n-    #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n+    #[unstable(feature = \"alloc_layout_extra\", issue = \"55724\")]\n     #[inline]\n-    pub fn align_to(&self, align: usize) -> Self {\n-        Layout::from_size_align(self.size(), cmp::max(self.align(), align)).unwrap()\n+    pub fn align_to(&self, align: usize) -> Result<Self, LayoutErr> {\n+        Layout::from_size_align(self.size(), cmp::max(self.align(), align))\n     }\n \n     /// Returns the amount of padding we must insert after `self`\n@@ -191,7 +189,7 @@ impl Layout {\n     /// to be less than or equal to the alignment of the starting\n     /// address for the whole allocated block of memory. One way to\n     /// satisfy this constraint is to ensure `align <= self.align()`.\n-    #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n+    #[unstable(feature = \"alloc_layout_extra\", issue = \"55724\")]\n     #[inline]\n     pub fn padding_needed_for(&self, align: usize) -> usize {\n         let len = self.size();\n@@ -228,7 +226,7 @@ impl Layout {\n     /// of each element in the array.\n     ///\n     /// On arithmetic overflow, returns `LayoutErr`.\n-    #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n+    #[unstable(feature = \"alloc_layout_extra\", issue = \"55724\")]\n     #[inline]\n     pub fn repeat(&self, n: usize) -> Result<(Self, usize), LayoutErr> {\n         let padded_size = self.size().checked_add(self.padding_needed_for(self.align()))\n@@ -248,13 +246,16 @@ impl Layout {\n     /// will be properly aligned. Note that the result layout will\n     /// satisfy the alignment properties of both `self` and `next`.\n     ///\n+    /// The resulting layout will be the same as that of a C struct containing\n+    /// two fields with the layouts of `self` and `next`, in that order.\n+    ///\n     /// Returns `Some((k, offset))`, where `k` is layout of the concatenated\n     /// record and `offset` is the relative location, in bytes, of the\n     /// start of the `next` embedded within the concatenated record\n     /// (assuming that the record itself starts at offset 0).\n     ///\n     /// On arithmetic overflow, returns `LayoutErr`.\n-    #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n+    #[unstable(feature = \"alloc_layout_extra\", issue = \"55724\")]\n     #[inline]\n     pub fn extend(&self, next: Self) -> Result<(Self, usize), LayoutErr> {\n         let new_align = cmp::max(self.align(), next.align());\n@@ -281,7 +282,7 @@ impl Layout {\n     /// aligned.\n     ///\n     /// On arithmetic overflow, returns `LayoutErr`.\n-    #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n+    #[unstable(feature = \"alloc_layout_extra\", issue = \"55724\")]\n     #[inline]\n     pub fn repeat_packed(&self, n: usize) -> Result<Self, LayoutErr> {\n         let size = self.size().checked_mul(n).ok_or(LayoutErr { private: () })?;\n@@ -293,29 +294,20 @@ impl Layout {\n     /// padding is inserted, the alignment of `next` is irrelevant,\n     /// and is not incorporated *at all* into the resulting layout.\n     ///\n-    /// Returns `(k, offset)`, where `k` is layout of the concatenated\n-    /// record and `offset` is the relative location, in bytes, of the\n-    /// start of the `next` embedded within the concatenated record\n-    /// (assuming that the record itself starts at offset 0).\n-    ///\n-    /// (The `offset` is always the same as `self.size()`; we use this\n-    ///  signature out of convenience in matching the signature of\n-    ///  `extend`.)\n-    ///\n     /// On arithmetic overflow, returns `LayoutErr`.\n-    #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n+    #[unstable(feature = \"alloc_layout_extra\", issue = \"55724\")]\n     #[inline]\n-    pub fn extend_packed(&self, next: Self) -> Result<(Self, usize), LayoutErr> {\n+    pub fn extend_packed(&self, next: Self) -> Result<Self, LayoutErr> {\n         let new_size = self.size().checked_add(next.size())\n             .ok_or(LayoutErr { private: () })?;\n         let layout = Layout::from_size_align(new_size, self.align())?;\n-        Ok((layout, self.size()))\n+        Ok(layout)\n     }\n \n     /// Creates a layout describing the record for a `[T; n]`.\n     ///\n     /// On arithmetic overflow, returns `LayoutErr`.\n-    #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n+    #[unstable(feature = \"alloc_layout_extra\", issue = \"55724\")]\n     #[inline]\n     pub fn array<T>(n: usize) -> Result<Self, LayoutErr> {\n         Layout::new::<T>()"}, {"sha": "f27beb0b46cafd9fe47b98bc909fb962b4ffac61", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -310,6 +310,7 @@\n #![feature(doc_keyword)]\n #![feature(panic_info_message)]\n #![feature(non_exhaustive)]\n+#![feature(alloc_layout_extra)]\n \n #![default_lib_allocator]\n "}]}