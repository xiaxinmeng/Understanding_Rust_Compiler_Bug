{"sha": "2c5c35bdae374b655489477280906b76fffc6a2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjNWMzNWJkYWUzNzRiNjU1NDg5NDc3MjgwOTA2Yjc2ZmZmYzZhMmE=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2019-08-09T20:34:14Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2019-08-09T20:34:14Z"}, "message": "Always set the runnable name", "tree": {"sha": "f83e82ab5b291cdadff0ed461ebb64050737de11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f83e82ab5b291cdadff0ed461ebb64050737de11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c5c35bdae374b655489477280906b76fffc6a2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c5c35bdae374b655489477280906b76fffc6a2a", "html_url": "https://github.com/rust-lang/rust/commit/2c5c35bdae374b655489477280906b76fffc6a2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c5c35bdae374b655489477280906b76fffc6a2a/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "726535a44e2b5d6a6efb1b220edf7b82cdf27d32", "url": "https://api.github.com/repos/rust-lang/rust/commits/726535a44e2b5d6a6efb1b220edf7b82cdf27d32", "html_url": "https://github.com/rust-lang/rust/commit/726535a44e2b5d6a6efb1b220edf7b82cdf27d32"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "4ac051c96381a7babfa84c7cf5b21a63f7a8f5e2", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2c5c35bdae374b655489477280906b76fffc6a2a/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c5c35bdae374b655489477280906b76fffc6a2a/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=2c5c35bdae374b655489477280906b76fffc6a2a", "patch": "@@ -325,13 +325,7 @@ pub fn handle_runnables(\n                 continue;\n             }\n         }\n-        let label = match &runnable.kind {\n-            RunnableKind::Test { name } => format!(\"test {}\", name),\n-            RunnableKind::TestMod { path } => format!(\"test-mod {}\", path),\n-            RunnableKind::Bench { name } => format!(\"bench {}\", name),\n-            RunnableKind::Bin => \"run binary\".to_string(),\n-        };\n-        res.push(to_lsp_runnable(&world, file_id, runnable, label)?);\n+        res.push(to_lsp_runnable(&world, file_id, runnable)?);\n     }\n     let mut check_args = vec![\"check\".to_string()];\n     let label;\n@@ -686,12 +680,13 @@ pub fn handle_code_lens(\n             RunnableKind::Test { .. } | RunnableKind::TestMod { .. } => \"\u25b6\ufe0fRun Test\",\n             RunnableKind::Bench { .. } => \"Run Bench\",\n             RunnableKind::Bin => \"Run\",\n-        };\n-        let r = to_lsp_runnable(&world, file_id, runnable, title.to_string())?;\n+        }\n+        .to_string();\n+        let r = to_lsp_runnable(&world, file_id, runnable)?;\n         let lens = CodeLens {\n             range: r.range,\n             command: Some(Command {\n-                title: title.to_string(),\n+                title,\n                 command: \"rust-analyzer.runSingle\".into(),\n                 arguments: Some(vec![to_value(r).unwrap()]),\n             }),\n@@ -830,10 +825,15 @@ fn to_lsp_runnable(\n     world: &WorldSnapshot,\n     file_id: FileId,\n     runnable: Runnable,\n-    label: String,\n ) -> Result<req::Runnable> {\n     let args = runnable_args(world, file_id, &runnable.kind)?;\n     let line_index = world.analysis().file_line_index(file_id)?;\n+    let label = match &runnable.kind {\n+        RunnableKind::Test { name } => format!(\"test {}\", name),\n+        RunnableKind::TestMod { path } => format!(\"test-mod {}\", path),\n+        RunnableKind::Bench { name } => format!(\"bench {}\", name),\n+        RunnableKind::Bin => \"run binary\".to_string(),\n+    };\n     Ok(req::Runnable {\n         range: runnable.range.conv_with(&line_index),\n         label,"}]}