{"sha": "24b74b27443192f6d440be10f7aa0617d8003fab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0Yjc0YjI3NDQzMTkyZjZkNDQwYmUxMGY3YWEwNjE3ZDgwMDNmYWI=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-10-16T09:14:10Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-10-16T09:14:10Z"}, "message": "end return statements and void expressions with a semicolon", "tree": {"sha": "5922a65ac6f82fcadea2b50cf6424632948241cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5922a65ac6f82fcadea2b50cf6424632948241cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24b74b27443192f6d440be10f7aa0617d8003fab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24b74b27443192f6d440be10f7aa0617d8003fab", "html_url": "https://github.com/rust-lang/rust/commit/24b74b27443192f6d440be10f7aa0617d8003fab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24b74b27443192f6d440be10f7aa0617d8003fab/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa81576023ef0538608b62f5bf343ff9caf1163b", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa81576023ef0538608b62f5bf343ff9caf1163b", "html_url": "https://github.com/rust-lang/rust/commit/fa81576023ef0538608b62f5bf343ff9caf1163b"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "163a8b91f4c4ff90c7e0f61479b8fc3bb92a839b", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/24b74b27443192f6d440be10f7aa0617d8003fab/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24b74b27443192f6d440be10f7aa0617d8003fab/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=24b74b27443192f6d440be10f7aa0617d8003fab", "patch": "@@ -164,7 +164,7 @@ impl TypeMap<'ll, 'tcx> {\n                                       type_: Ty<'tcx>) -> UniqueTypeId {\n         // Let's see if we already have something in the cache\n         if let Some(unique_type_id) = self.type_to_unique_id.get(&type_).cloned() {\n-            return unique_type_id\n+            return unique_type_id;\n         }\n         // if not, generate one\n \n@@ -290,7 +290,7 @@ macro_rules! return_if_metadata_created_in_meantime {\n             .borrow()\n             .find_metadata_for_unique_id($unique_type_id)\n         {\n-            return MetadataCreationResult::new(metadata, true)\n+            return MetadataCreationResult::new(metadata, true);\n         }\n     )\n }\n@@ -552,7 +552,7 @@ pub fn type_metadata(\n                     .borrow()\n                     .find_metadata_for_unique_id(unique_type_id)\n                 {\n-                    return Err(metadata)\n+                    return Err(metadata);\n                 }\n \n                 Ok(MetadataCreationResult::new(pointer_type_metadata(cx, t, pointee_metadata),\n@@ -612,7 +612,7 @@ pub fn type_metadata(\n                .borrow()\n                .find_metadata_for_unique_id(unique_type_id)\n             {\n-                return metadata\n+                return metadata;\n             }\n \n             // This is actually a function pointer, so wrap it in pointer DI\n@@ -1477,7 +1477,7 @@ fn prepare_enum_metadata(\n     };\n \n     if let (&layout::Abi::Scalar(_), Some(discr)) = (&layout.abi, discriminant_type_metadata) {\n-        return FinalMetadata(discr)\n+        return FinalMetadata(discr);\n     }\n \n     let (enum_type_size, enum_type_align) = layout.size_and_align();"}, {"sha": "60ebcb888166ff96bb0193f05edf153b7551d9c5", "filename": "src/librustc_codegen_llvm/debuginfo/source_loc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24b74b27443192f6d440be10f7aa0617d8003fab/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fsource_loc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24b74b27443192f6d440be10f7aa0617d8003fab/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fsource_loc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fsource_loc.rs?ref=24b74b27443192f6d440be10f7aa0617d8003fab", "patch": "@@ -57,7 +57,7 @@ pub fn set_source_location(\n /// first real statement/expression of the function is codegened.\n pub fn start_emitting_source_locations(dbg_context: &FunctionDebugContext<'ll>) {\n     if let FunctionDebugContext::RegularContext(ref data) = *dbg_context {\n-        data.source_locations_enabled.set(true)\n+        data.source_locations_enabled.set(true);\n     }\n }\n "}]}