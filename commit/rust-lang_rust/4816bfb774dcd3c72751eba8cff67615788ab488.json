{"sha": "4816bfb774dcd3c72751eba8cff67615788ab488", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4MTZiZmI3NzRkY2QzYzcyNzUxZWJhOGNmZjY3NjE1Nzg4YWI0ODg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-12T12:02:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-02-12T12:02:49Z"}, "message": "Merge pull request #629 from RalfJung/rename\n\nRename things away from 'Shr'", "tree": {"sha": "996a0345bbaff12c4d8483ea09b2b6e8fd6dfa42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/996a0345bbaff12c4d8483ea09b2b6e8fd6dfa42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4816bfb774dcd3c72751eba8cff67615788ab488", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcYrXpCRBK7hj4Ov3rIwAAdHIIAIZvmrmkdnJNZBUy5JaiRzFQ\nTDwmydc228dDKoMBI1gw2qjaurPK/sX16/HZtm7sSkDaeykQ9H1MvPCxm+azGzsv\nqy+SZIfhZdr3XOUvTi3WKjj7t/n/cIZ/AAzBbmQHVJ3CYPjp0dCytCrlHOAXsUTA\nSLnak8sOHVlj7bhpqt+5CWtayWb9Yu6iqPgHiLeIOC60tntvj7z4W6ZgKOpioAxh\nEtWmPCMWeacgG/mMADjEIExDnD6XQTUsVq43ViM2Tja/u1hX9pQVfchJrHUGRGWn\nnGp5swmqfeqY7za8PkmaShpZxsLV6Lew1LxNOUiuZZQw8KQW/5VgwV/VYOu+qko=\n=25RP\n-----END PGP SIGNATURE-----\n", "payload": "tree 996a0345bbaff12c4d8483ea09b2b6e8fd6dfa42\nparent 258cc493ef3951ed5451e75110f6ea27c04f170f\nparent fd6bd5ba4b55da0c7056d91ed3cae85bb2029b95\nauthor Ralf Jung <post@ralfj.de> 1549972969 +0100\ncommitter GitHub <noreply@github.com> 1549972969 +0100\n\nMerge pull request #629 from RalfJung/rename\n\nRename things away from 'Shr'"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4816bfb774dcd3c72751eba8cff67615788ab488", "html_url": "https://github.com/rust-lang/rust/commit/4816bfb774dcd3c72751eba8cff67615788ab488", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4816bfb774dcd3c72751eba8cff67615788ab488/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "258cc493ef3951ed5451e75110f6ea27c04f170f", "url": "https://api.github.com/repos/rust-lang/rust/commits/258cc493ef3951ed5451e75110f6ea27c04f170f", "html_url": "https://github.com/rust-lang/rust/commit/258cc493ef3951ed5451e75110f6ea27c04f170f"}, {"sha": "fd6bd5ba4b55da0c7056d91ed3cae85bb2029b95", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd6bd5ba4b55da0c7056d91ed3cae85bb2029b95", "html_url": "https://github.com/rust-lang/rust/commit/fd6bd5ba4b55da0c7056d91ed3cae85bb2029b95"}], "stats": {"total": 106, "additions": 53, "deletions": 53}, "files": [{"sha": "a52e115323c6ff98ae90b53f3d887ef1eb0ac049", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/4816bfb774dcd3c72751eba8cff67615788ab488/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4816bfb774dcd3c72751eba8cff67615788ab488/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=4816bfb774dcd3c72751eba8cff67615788ab488", "patch": "@@ -21,19 +21,19 @@ pub type CallId = u64;\n pub enum Borrow {\n     /// A unique (mutable) reference.\n     Uniq(Timestamp),\n-    /// A shared reference.  This is also used by raw pointers, which do not track details\n+    /// An aliasing reference.  This is also used by raw pointers, which do not track details\n     /// of how or when they were created, hence the timestamp is optional.\n     /// Shr(Some(_)) does NOT mean that the destination of this reference is frozen;\n     /// that depends on the type!  Only those parts outside of an `UnsafeCell` are actually\n     /// frozen.\n-    Shr(Option<Timestamp>),\n+    Alias(Option<Timestamp>),\n }\n \n impl Borrow {\n     #[inline(always)]\n-    pub fn is_shared(self) -> bool {\n+    pub fn is_aliasing(self) -> bool {\n         match self {\n-            Borrow::Shr(_) => true,\n+            Borrow::Alias(_) => true,\n             _ => false,\n         }\n     }\n@@ -49,7 +49,7 @@ impl Borrow {\n \n impl Default for Borrow {\n     fn default() -> Self {\n-        Borrow::Shr(None)\n+        Borrow::Alias(None)\n     }\n }\n \n@@ -58,10 +58,9 @@ impl Default for Borrow {\n pub enum BorStackItem {\n     /// Indicates the unique reference that may mutate.\n     Uniq(Timestamp),\n-    /// Indicates that the location has been shared.  Used for raw pointers, but\n-    /// also for shared references.  The latter *additionally* get frozen\n-    /// when there is no `UnsafeCell`.\n-    Shr,\n+    /// Indicates that the location has been mutably shared.  Used for raw pointers as\n+    /// well as for unfrozen shared references.\n+    Raw,\n     /// A barrier, tracking the function it belongs to by its index on the call stack\n     FnBarrier(CallId)\n }\n@@ -186,19 +185,19 @@ impl<'tcx> Stack {\n         kind: RefKind,\n     ) -> Result<Option<usize>, String> {\n         // Exclude unique ref with frozen tag.\n-        if let (RefKind::Unique, Borrow::Shr(Some(_))) = (kind, bor) {\n+        if let (RefKind::Unique, Borrow::Alias(Some(_))) = (kind, bor) {\n             return Err(format!(\"Encountered mutable reference with frozen tag ({:?})\", bor));\n         }\n         // Checks related to freezing\n         match bor {\n-            Borrow::Shr(Some(bor_t)) if kind == RefKind::Frozen => {\n+            Borrow::Alias(Some(bor_t)) if kind == RefKind::Frozen => {\n                 // We need the location to be frozen. This ensures F3.\n                 let frozen = self.frozen_since.map_or(false, |itm_t| itm_t <= bor_t);\n                 return if frozen { Ok(None) } else {\n                     Err(format!(\"Location is not frozen long enough\"))\n                 }\n             }\n-            Borrow::Shr(_) if self.frozen_since.is_some() => {\n+            Borrow::Alias(_) if self.frozen_since.is_some() => {\n                 return Ok(None) // Shared deref to frozen location, looking good\n             }\n             _ => {} // Not sufficient, go on looking.\n@@ -210,8 +209,8 @@ impl<'tcx> Stack {\n                     // Found matching unique item.  This satisfies U3.\n                     return Ok(Some(idx))\n                 }\n-                (BorStackItem::Shr, Borrow::Shr(_)) => {\n-                    // Found matching shared/raw item.\n+                (BorStackItem::Raw, Borrow::Alias(_)) => {\n+                    // Found matching aliasing/raw item.\n                     return Ok(Some(idx))\n                 }\n                 // Go on looking.  We ignore barriers!  When an `&mut` and an `&` alias,\n@@ -221,7 +220,7 @@ impl<'tcx> Stack {\n             }\n         }\n         // If we got here, we did not find our item.  We have to error to satisfy U3.\n-        Err(format!(\"Borrow being dereferenced ({:?}) does not exist on the stack\", bor))\n+        Err(format!(\"Borrow being dereferenced ({:?}) does not exist on the borrow stack\", bor))\n     }\n \n     /// Perform an actual memory access using `bor`.  We do not know any types here\n@@ -258,14 +257,15 @@ impl<'tcx> Stack {\n                 (BorStackItem::Uniq(itm_t), Borrow::Uniq(bor_t)) if itm_t == bor_t => {\n                     // Found matching unique item.  Continue after the match.\n                 }\n-                (BorStackItem::Shr, _) if kind == AccessKind::Read => {\n-                    // When reading, everything can use a shared item!\n+                (BorStackItem::Raw, _) if kind == AccessKind::Read => {\n+                    // When reading, everything can use a raw item!\n                     // We do not want to do this when writing: Writing to an `&mut`\n                     // should reaffirm its exclusivity (i.e., make sure it is\n-                    // on top of the stack).  Continue after the match.\n+                    // on top of the stack).\n+                    // Continue after the match.\n                 }\n-                (BorStackItem::Shr, Borrow::Shr(_)) => {\n-                    // Found matching shared item.  Continue after the match.\n+                (BorStackItem::Raw, Borrow::Alias(_)) => {\n+                    // Found matching raw item.  Continue after the match.\n                 }\n                 _ => {\n                     // Pop this, go on.  This ensures U2.\n@@ -294,7 +294,7 @@ impl<'tcx> Stack {\n         }\n         // If we got here, we did not find our item.\n         err!(MachineError(format!(\n-            \"Borrow being accessed ({:?}) does not exist on the stack\",\n+            \"Borrow being accessed ({:?}) does not exist on the borrow stack\",\n             bor\n         )))\n     }\n@@ -309,7 +309,7 @@ impl<'tcx> Stack {\n         // of access (like writing through raw pointers) is permitted.\n         if kind == RefKind::Frozen {\n             let bor_t = match bor {\n-                Borrow::Shr(Some(t)) => t,\n+                Borrow::Alias(Some(t)) => t,\n                 _ => bug!(\"Creating illegal borrow {:?} for frozen ref\", bor),\n             };\n             // It is possible that we already are frozen (e.g. if we just pushed a barrier,\n@@ -328,12 +328,12 @@ impl<'tcx> Stack {\n         // Push new item to the stack.\n         let itm = match bor {\n             Borrow::Uniq(t) => BorStackItem::Uniq(t),\n-            Borrow::Shr(_) => BorStackItem::Shr,\n+            Borrow::Alias(_) => BorStackItem::Raw,\n         };\n         if *self.borrows.last().unwrap() == itm {\n             // This is just an optimization, no functional change: Avoid stacking\n             // multiple `Shr` on top of each other.\n-            assert!(bor.is_shared());\n+            assert!(bor.is_aliasing());\n             trace!(\"create: Sharing a shared location is a NOP\");\n         } else {\n             // This ensures U1.\n@@ -440,7 +440,7 @@ impl<'tcx> Stacks {\n                     _ => false,\n                 };\n             if bor_redundant {\n-                assert!(new_bor.is_shared(), \"A unique reborrow can never be redundant\");\n+                assert!(new_bor.is_aliasing(), \"A unique reborrow can never be redundant\");\n                 trace!(\"reborrow is redundant\");\n                 continue;\n             }\n@@ -465,7 +465,7 @@ impl AllocationExtra<Borrow, MemoryState> for Stacks {\n     #[inline(always)]\n     fn memory_allocated<'tcx>(size: Size, extra: &MemoryState) -> Self {\n         let stack = Stack {\n-            borrows: vec![BorStackItem::Shr],\n+            borrows: vec![BorStackItem::Raw],\n             frozen_since: None,\n         };\n         Stacks {\n@@ -511,7 +511,7 @@ impl<'tcx> Stacks {\n     ) {\n         for stack in self.stacks.get_mut().iter_mut(Size::ZERO, size) {\n             assert!(stack.borrows.len() == 1);\n-            assert_eq!(stack.borrows.pop().unwrap(), BorStackItem::Shr);\n+            assert_eq!(stack.borrows.pop().unwrap(), BorStackItem::Raw);\n             stack.borrows.push(itm);\n         }\n     }\n@@ -536,7 +536,7 @@ trait EvalContextPrivExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n         let alloc = this.memory().get(ptr.alloc_id)?;\n         alloc.check_bounds(this, ptr, size)?;\n         // Update the stacks.\n-        if let Borrow::Shr(Some(_)) = new_bor {\n+        if let Borrow::Alias(Some(_)) = new_bor {\n             // Reference that cares about freezing. We need a frozen-sensitive reborrow.\n             this.visit_freeze_sensitive(place, size, |cur_ptr, size, frozen| {\n                 let kind = if frozen { RefKind::Frozen } else { RefKind::Raw };\n@@ -574,7 +574,7 @@ trait EvalContextPrivExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n         let time = this.machine.stacked_borrows.increment_clock();\n         let new_bor = match mutbl {\n             Some(MutMutable) => Borrow::Uniq(time),\n-            Some(MutImmutable) => Borrow::Shr(Some(time)),\n+            Some(MutImmutable) => Borrow::Alias(Some(time)),\n             None => Borrow::default(),\n         };\n \n@@ -586,7 +586,7 @@ trait EvalContextPrivExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n             assert!(mutbl == Some(MutMutable), \"two-phase shared borrows make no sense\");\n             // We immediately share it, to allow read accesses\n             let two_phase_time = this.machine.stacked_borrows.increment_clock();\n-            let two_phase_bor = Borrow::Shr(Some(two_phase_time));\n+            let two_phase_bor = Borrow::Alias(Some(two_phase_time));\n             this.reborrow(new_place, size, /*fn_barrier*/false, two_phase_bor)?;\n         }\n \n@@ -651,7 +651,7 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n         let alloc = this.memory().get(ptr.alloc_id)?;\n         alloc.check_bounds(this, ptr, size)?;\n         // If we got here, we do some checking, *but* we leave the tag unchanged.\n-        if let Borrow::Shr(Some(_)) = ptr.tag {\n+        if let Borrow::Alias(Some(_)) = ptr.tag {\n             assert_eq!(mutability, Some(MutImmutable));\n             // We need a frozen-sensitive check\n             this.visit_freeze_sensitive(place, size, |cur_ptr, size, frozen| {"}, {"sha": "30f5921202c3ffb02b76fc126ee06bf03fcf21da", "filename": "tests/compile-fail/stacked_borrows/alias_through_mutation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4816bfb774dcd3c72751eba8cff67615788ab488/tests%2Fcompile-fail%2Fstacked_borrows%2Falias_through_mutation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4816bfb774dcd3c72751eba8cff67615788ab488/tests%2Fcompile-fail%2Fstacked_borrows%2Falias_through_mutation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Falias_through_mutation.rs?ref=4816bfb774dcd3c72751eba8cff67615788ab488", "patch": "@@ -9,5 +9,5 @@ fn main() {\n     retarget(&mut target_alias, target);\n     // now `target_alias` points to the same thing as `target`\n     *target = 13;\n-    let _val = *target_alias; //~ ERROR does not exist on the stack\n+    let _val = *target_alias; //~ ERROR does not exist on the borrow stack\n }"}, {"sha": "e3c59d1566142f6255dea8ea5addf2316564ea82", "filename": "tests/compile-fail/stacked_borrows/aliasing_mut3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4816bfb774dcd3c72751eba8cff67615788ab488/tests%2Fcompile-fail%2Fstacked_borrows%2Faliasing_mut3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4816bfb774dcd3c72751eba8cff67615788ab488/tests%2Fcompile-fail%2Fstacked_borrows%2Faliasing_mut3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Faliasing_mut3.rs?ref=4816bfb774dcd3c72751eba8cff67615788ab488", "patch": "@@ -1,6 +1,6 @@\n use std::mem;\n \n-pub fn safe(_x: &mut i32, _y: &i32) {} //~ ERROR does not exist on the stack\n+pub fn safe(_x: &mut i32, _y: &i32) {} //~ ERROR does not exist on the borrow stack\n \n fn main() {\n     let mut x = 0;"}, {"sha": "481915faed0401260af9e9a76a0004b1bbc250ac", "filename": "tests/compile-fail/stacked_borrows/box_exclusive_violation1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4816bfb774dcd3c72751eba8cff67615788ab488/tests%2Fcompile-fail%2Fstacked_borrows%2Fbox_exclusive_violation1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4816bfb774dcd3c72751eba8cff67615788ab488/tests%2Fcompile-fail%2Fstacked_borrows%2Fbox_exclusive_violation1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fbox_exclusive_violation1.rs?ref=4816bfb774dcd3c72751eba8cff67615788ab488", "patch": "@@ -8,7 +8,7 @@ fn demo_mut_advanced_unique(mut our: Box<i32>) -> i32 {\n   unknown_code_2();\n \n   // We know this will return 5\n-  *our //~ ERROR does not exist on the stack\n+  *our //~ ERROR does not exist on the borrow stack\n }\n \n // Now comes the evil context"}, {"sha": "98d4e6f22965dd24353bafe66f7e9ac430cbd394", "filename": "tests/compile-fail/stacked_borrows/buggy_as_mut_slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4816bfb774dcd3c72751eba8cff67615788ab488/tests%2Fcompile-fail%2Fstacked_borrows%2Fbuggy_as_mut_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4816bfb774dcd3c72751eba8cff67615788ab488/tests%2Fcompile-fail%2Fstacked_borrows%2Fbuggy_as_mut_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fbuggy_as_mut_slice.rs?ref=4816bfb774dcd3c72751eba8cff67615788ab488", "patch": "@@ -13,5 +13,5 @@ fn main() {\n     let v1 = safe::as_mut_slice(&v);\n     let _v2 = safe::as_mut_slice(&v);\n     v1[1] = 5;\n-    //~^ ERROR does not exist on the stack\n+    //~^ ERROR does not exist on the borrow stack\n }"}, {"sha": "42f345f55144cd8a718d71fc860892d381d6397c", "filename": "tests/compile-fail/stacked_borrows/buggy_split_at_mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4816bfb774dcd3c72751eba8cff67615788ab488/tests%2Fcompile-fail%2Fstacked_borrows%2Fbuggy_split_at_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4816bfb774dcd3c72751eba8cff67615788ab488/tests%2Fcompile-fail%2Fstacked_borrows%2Fbuggy_split_at_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fbuggy_split_at_mut.rs?ref=4816bfb774dcd3c72751eba8cff67615788ab488", "patch": "@@ -9,7 +9,7 @@ mod safe {\n             assert!(mid <= len);\n \n             (from_raw_parts_mut(ptr, len - mid), // BUG: should be \"mid\" instead of \"len - mid\"\n-            //~^ ERROR does not exist on the stack\n+            //~^ ERROR does not exist on the borrow stack\n             from_raw_parts_mut(ptr.offset(mid as isize), len - mid))\n         }\n     }"}, {"sha": "0181f739a899d5d6478c371767ee236e47534553", "filename": "tests/compile-fail/stacked_borrows/illegal_read1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4816bfb774dcd3c72751eba8cff67615788ab488/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4816bfb774dcd3c72751eba8cff67615788ab488/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read1.rs?ref=4816bfb774dcd3c72751eba8cff67615788ab488", "patch": "@@ -7,7 +7,7 @@ fn main() {\n     let xref = unsafe { &mut *xraw }; // derived from raw, so using raw is still okay...\n     callee(xraw);\n     let _val = *xref; // ...but any use of raw will invalidate our ref.\n-    //~^ ERROR: does not exist on the stack\n+    //~^ ERROR: does not exist on the borrow stack\n }\n \n fn callee(xraw: *mut i32) {"}, {"sha": "b55fe1c6c88a443b113fd3ff9f117ba0e86f543e", "filename": "tests/compile-fail/stacked_borrows/illegal_read2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4816bfb774dcd3c72751eba8cff67615788ab488/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4816bfb774dcd3c72751eba8cff67615788ab488/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read2.rs?ref=4816bfb774dcd3c72751eba8cff67615788ab488", "patch": "@@ -7,7 +7,7 @@ fn main() {\n     let xref = unsafe { &mut *xraw }; // derived from raw, so using raw is still okay...\n     callee(xraw);\n     let _val = *xref; // ...but any use of raw will invalidate our ref.\n-    //~^ ERROR: does not exist on the stack\n+    //~^ ERROR: does not exist on the borrow stack\n }\n \n fn callee(xraw: *mut i32) {"}, {"sha": "9da4ca09606e73e3347532871688c10cb2aa9632", "filename": "tests/compile-fail/stacked_borrows/illegal_read3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4816bfb774dcd3c72751eba8cff67615788ab488/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4816bfb774dcd3c72751eba8cff67615788ab488/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read3.rs?ref=4816bfb774dcd3c72751eba8cff67615788ab488", "patch": "@@ -13,7 +13,7 @@ fn main() {\n     let xref2 = &mut *xref1; // derived from xref1, so using raw is still okay...\n     callee(xref1_sneaky);\n     let _val = *xref2; // ...but any use of it will invalidate our ref.\n-    //~^ ERROR: does not exist on the stack\n+    //~^ ERROR: does not exist on the borrow stack\n }\n \n fn callee(xref1: usize) {"}, {"sha": "bb889de8f839eb7fdc07b16e369a50a4f3291dc5", "filename": "tests/compile-fail/stacked_borrows/illegal_read4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4816bfb774dcd3c72751eba8cff67615788ab488/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4816bfb774dcd3c72751eba8cff67615788ab488/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read4.rs?ref=4816bfb774dcd3c72751eba8cff67615788ab488", "patch": "@@ -5,5 +5,5 @@ fn main() {\n     let xraw = xref1 as *mut _;\n     let xref2 = unsafe { &mut *xraw };\n     let _val = unsafe { *xraw }; // use the raw again, this invalidates xref2 *even* with the special read except for uniq refs\n-    let _illegal = *xref2; //~ ERROR does not exist on the stack\n+    let _illegal = *xref2; //~ ERROR does not exist on the borrow stack\n }"}, {"sha": "5f800e754a5d02749346efbd0f0e5d9302cd6aeb", "filename": "tests/compile-fail/stacked_borrows/illegal_read5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4816bfb774dcd3c72751eba8cff67615788ab488/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4816bfb774dcd3c72751eba8cff67615788ab488/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read5.rs?ref=4816bfb774dcd3c72751eba8cff67615788ab488", "patch": "@@ -12,5 +12,5 @@ fn main() {\n     let _val = *xref; // we can even still use our mutable reference\n     mem::forget(unsafe { ptr::read(xshr) }); // but after reading through the shared ref\n     let _val = *xref; // the mutable one is dead and gone\n-    //~^ ERROR does not exist on the stack\n+    //~^ ERROR does not exist on the borrow stack\n }"}, {"sha": "affa21c7625ead98ae207921dc55d799ca4545f1", "filename": "tests/compile-fail/stacked_borrows/illegal_write2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4816bfb774dcd3c72751eba8cff67615788ab488/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4816bfb774dcd3c72751eba8cff67615788ab488/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write2.rs?ref=4816bfb774dcd3c72751eba8cff67615788ab488", "patch": "@@ -3,6 +3,6 @@ fn main() {\n     let target2 = target as *mut _;\n     drop(&mut *target); // reborrow\n     // Now make sure our ref is still the only one.\n-    unsafe { *target2 = 13; } //~ ERROR does not exist on the stack\n+    unsafe { *target2 = 13; } //~ ERROR does not exist on the borrow stack\n     let _val = *target;\n }"}, {"sha": "dc4edcc3a5b4496c5e0424ba68905379f2f52368", "filename": "tests/compile-fail/stacked_borrows/illegal_write3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4816bfb774dcd3c72751eba8cff67615788ab488/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4816bfb774dcd3c72751eba8cff67615788ab488/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write3.rs?ref=4816bfb774dcd3c72751eba8cff67615788ab488", "patch": "@@ -3,6 +3,6 @@ fn main() {\n     // Make sure raw ptr with raw tag cannot mutate frozen location without breaking the shared ref.\n     let r#ref = &target; // freeze\n     let ptr = r#ref as *const _ as *mut _; // raw ptr, with raw tag\n-    unsafe { *ptr = 42; } //~ ERROR does not exist on the stack\n+    unsafe { *ptr = 42; } //~ ERROR does not exist on the borrow stack\n     let _val = *r#ref;\n }"}, {"sha": "af57221260ce893750beecef0161092edc22676f", "filename": "tests/compile-fail/stacked_borrows/illegal_write5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4816bfb774dcd3c72751eba8cff67615788ab488/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4816bfb774dcd3c72751eba8cff67615788ab488/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write5.rs?ref=4816bfb774dcd3c72751eba8cff67615788ab488", "patch": "@@ -7,7 +7,7 @@ fn main() {\n     let xref = unsafe { &mut *xraw }; // derived from raw, so using raw is still okay...\n     callee(xraw);\n     let _val = *xref; // ...but any use of raw will invalidate our ref.\n-    //~^ ERROR: does not exist on the stack\n+    //~^ ERROR: does not exist on the borrow stack\n }\n \n fn callee(xraw: *mut i32) {"}, {"sha": "f2e4b36f85cc242234914854df72397a0b8eedea", "filename": "tests/compile-fail/stacked_borrows/load_invalid_mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4816bfb774dcd3c72751eba8cff67615788ab488/tests%2Fcompile-fail%2Fstacked_borrows%2Fload_invalid_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4816bfb774dcd3c72751eba8cff67615788ab488/tests%2Fcompile-fail%2Fstacked_borrows%2Fload_invalid_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fload_invalid_mut.rs?ref=4816bfb774dcd3c72751eba8cff67615788ab488", "patch": "@@ -5,5 +5,5 @@ fn main() {\n     let xref = unsafe { &mut *xraw };\n     let xref_in_mem = Box::new(xref);\n     let _val = unsafe { *xraw }; // invalidate xref\n-    let _val = *xref_in_mem; //~ ERROR does not exist on the stack\n+    let _val = *xref_in_mem; //~ ERROR does not exist on the borrow stack\n }"}, {"sha": "ba36e43e0c5d4c39ab960bdc0bc0c9d2f2ce8aa2", "filename": "tests/compile-fail/stacked_borrows/outdated_local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4816bfb774dcd3c72751eba8cff67615788ab488/tests%2Fcompile-fail%2Fstacked_borrows%2Foutdated_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4816bfb774dcd3c72751eba8cff67615788ab488/tests%2Fcompile-fail%2Fstacked_borrows%2Foutdated_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Foutdated_local.rs?ref=4816bfb774dcd3c72751eba8cff67615788ab488", "patch": "@@ -3,7 +3,7 @@ fn main() {\n     let y: *const i32 = &x;\n     x = 1; // this invalidates y by reactivating the lowermost uniq borrow for this local\n \n-    assert_eq!(unsafe { *y }, 1); //~ ERROR does not exist on the stack\n+    assert_eq!(unsafe { *y }, 1); //~ ERROR does not exist on the borrow stack\n \n     assert_eq!(x, 1);\n }"}, {"sha": "b239237f019928e4a22209fba51a97859f143128", "filename": "tests/compile-fail/stacked_borrows/pass_invalid_mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4816bfb774dcd3c72751eba8cff67615788ab488/tests%2Fcompile-fail%2Fstacked_borrows%2Fpass_invalid_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4816bfb774dcd3c72751eba8cff67615788ab488/tests%2Fcompile-fail%2Fstacked_borrows%2Fpass_invalid_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fpass_invalid_mut.rs?ref=4816bfb774dcd3c72751eba8cff67615788ab488", "patch": "@@ -6,5 +6,5 @@ fn main() {\n     let xraw = x as *mut _;\n     let xref = unsafe { &mut *xraw };\n     let _val = unsafe { *xraw }; // invalidate xref\n-    foo(xref); //~ ERROR does not exist on the stack\n+    foo(xref); //~ ERROR does not exist on the borrow stack\n }"}, {"sha": "a8207d58e99b23dccaf4a144175b61c8c96ab8d4", "filename": "tests/compile-fail/stacked_borrows/pointer_smuggling.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4816bfb774dcd3c72751eba8cff67615788ab488/tests%2Fcompile-fail%2Fstacked_borrows%2Fpointer_smuggling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4816bfb774dcd3c72751eba8cff67615788ab488/tests%2Fcompile-fail%2Fstacked_borrows%2Fpointer_smuggling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fpointer_smuggling.rs?ref=4816bfb774dcd3c72751eba8cff67615788ab488", "patch": "@@ -8,7 +8,7 @@ fn fun1(x: &mut u8) {\n \n fn fun2() {\n     // Now we use a pointer we are not allowed to use\n-    let _x = unsafe { *PTR }; //~ ERROR does not exist on the stack\n+    let _x = unsafe { *PTR }; //~ ERROR does not exist on the borrow stack\n }\n \n fn main() {"}, {"sha": "31f8a4e33afd906a77efb2d6ee58622d374bdc59", "filename": "tests/compile-fail/stacked_borrows/return_invalid_mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4816bfb774dcd3c72751eba8cff67615788ab488/tests%2Fcompile-fail%2Fstacked_borrows%2Freturn_invalid_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4816bfb774dcd3c72751eba8cff67615788ab488/tests%2Fcompile-fail%2Fstacked_borrows%2Freturn_invalid_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Freturn_invalid_mut.rs?ref=4816bfb774dcd3c72751eba8cff67615788ab488", "patch": "@@ -3,7 +3,7 @@ fn foo(x: &mut (i32, i32)) -> &mut i32 {\n     let xraw = x as *mut (i32, i32);\n     let ret = unsafe { &mut (*xraw).1 };\n     let _val = unsafe { *xraw }; // invalidate xref\n-    ret //~ ERROR does not exist on the stack\n+    ret //~ ERROR does not exist on the borrow stack\n }\n \n fn main() {"}, {"sha": "750d507d6f660150f7ef96d20cbd2dea93768e59", "filename": "tests/compile-fail/stacked_borrows/return_invalid_mut_option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4816bfb774dcd3c72751eba8cff67615788ab488/tests%2Fcompile-fail%2Fstacked_borrows%2Freturn_invalid_mut_option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4816bfb774dcd3c72751eba8cff67615788ab488/tests%2Fcompile-fail%2Fstacked_borrows%2Freturn_invalid_mut_option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Freturn_invalid_mut_option.rs?ref=4816bfb774dcd3c72751eba8cff67615788ab488", "patch": "@@ -3,7 +3,7 @@ fn foo(x: &mut (i32, i32)) -> Option<&mut i32> {\n     let xraw = x as *mut (i32, i32);\n     let ret = Some(unsafe { &mut (*xraw).1 });\n     let _val = unsafe { *xraw }; // invalidate xref\n-    ret //~ ERROR does not exist on the stack\n+    ret //~ ERROR does not exist on the borrow stack\n }\n \n fn main() {"}, {"sha": "bb712e9e486cd6d977edaa4cafe5b5e18c2f24d3", "filename": "tests/compile-fail/stacked_borrows/return_invalid_mut_tuple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4816bfb774dcd3c72751eba8cff67615788ab488/tests%2Fcompile-fail%2Fstacked_borrows%2Freturn_invalid_mut_tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4816bfb774dcd3c72751eba8cff67615788ab488/tests%2Fcompile-fail%2Fstacked_borrows%2Freturn_invalid_mut_tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Freturn_invalid_mut_tuple.rs?ref=4816bfb774dcd3c72751eba8cff67615788ab488", "patch": "@@ -3,7 +3,7 @@ fn foo(x: &mut (i32, i32)) -> (&mut i32,) {\n     let xraw = x as *mut (i32, i32);\n     let ret = (unsafe { &mut (*xraw).1 },);\n     let _val = unsafe { *xraw }; // invalidate xref\n-    ret //~ ERROR does not exist on the stack\n+    ret //~ ERROR does not exist on the borrow stack\n }\n \n fn main() {"}, {"sha": "45ada88977788968f3f15be18ed4cae423f02ae1", "filename": "tests/compile-fail/stacked_borrows/transmute-is-no-escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4816bfb774dcd3c72751eba8cff67615788ab488/tests%2Fcompile-fail%2Fstacked_borrows%2Ftransmute-is-no-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4816bfb774dcd3c72751eba8cff67615788ab488/tests%2Fcompile-fail%2Fstacked_borrows%2Ftransmute-is-no-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Ftransmute-is-no-escape.rs?ref=4816bfb774dcd3c72751eba8cff67615788ab488", "patch": "@@ -10,5 +10,5 @@ fn main() {\n     let _raw: *mut i32 = unsafe { mem::transmute(&mut x[0]) };\n     // `raw` still carries a tag, so we get another pointer to the same location that does not carry a tag\n     let raw = (&mut x[1] as *mut i32).wrapping_offset(-1);\n-    unsafe { *raw = 13; } //~ ERROR does not exist on the stack\n+    unsafe { *raw = 13; } //~ ERROR does not exist on the borrow stack\n }"}, {"sha": "1db14ea7eda545e6f0bc72162fb05e5516a07452", "filename": "tests/compile-fail/stacked_borrows/unescaped_local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4816bfb774dcd3c72751eba8cff67615788ab488/tests%2Fcompile-fail%2Fstacked_borrows%2Funescaped_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4816bfb774dcd3c72751eba8cff67615788ab488/tests%2Fcompile-fail%2Fstacked_borrows%2Funescaped_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Funescaped_local.rs?ref=4816bfb774dcd3c72751eba8cff67615788ab488", "patch": "@@ -4,5 +4,5 @@ fn main() {\n     let mut x = 42;\n     let raw = &mut x as *mut i32 as usize as *mut i32;\n     let _ptr = &mut x;\n-    unsafe { *raw = 13; } //~ ERROR does not exist on the stack\n+    unsafe { *raw = 13; } //~ ERROR does not exist on the borrow stack\n }"}]}