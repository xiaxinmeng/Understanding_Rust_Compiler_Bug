{"sha": "c441b8aca5f572a4a677b8243d2507a636afa819", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0NDFiOGFjYTVmNTcyYTRhNjc3YjgyNDNkMjUwN2E2MzZhZmE4MTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-10T07:02:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-10T07:02:38Z"}, "message": "Auto merge of #60585 - sunfishcode:wasm32-wasi, r=alexcrichton\n\nOmit the vendor component in the WASI triple\n\nThis renames wasm32-unknown-wasi to wasm32-wasi, omitting the vendor\ncomponent. This follows aarch64-linux-android, x86_64-fuchsia, and others in\nomitting the vendor field, which has the advantage of aligning with the\n[multiarch tuple](https://wiki.debian.org/Multiarch/Tuples), and of being\nless noisy.\n\nr? @alexcrichton", "tree": {"sha": "e2b42b266175578b2ca960ee983025c09dbd0b0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2b42b266175578b2ca960ee983025c09dbd0b0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c441b8aca5f572a4a677b8243d2507a636afa819", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c441b8aca5f572a4a677b8243d2507a636afa819", "html_url": "https://github.com/rust-lang/rust/commit/c441b8aca5f572a4a677b8243d2507a636afa819", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c441b8aca5f572a4a677b8243d2507a636afa819/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "407536e38db4c7ebd33288db450703a7588e0a9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/407536e38db4c7ebd33288db450703a7588e0a9d", "html_url": "https://github.com/rust-lang/rust/commit/407536e38db4c7ebd33288db450703a7588e0a9d"}, {"sha": "1fe3ce1c42b8125f4f93dd3c3a5d5eed8c0cb651", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fe3ce1c42b8125f4f93dd3c3a5d5eed8c0cb651", "html_url": "https://github.com/rust-lang/rust/commit/1fe3ce1c42b8125f4f93dd3c3a5d5eed8c0cb651"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "556625b531d1c96b397062fd4360446978cf0069", "filename": "config.toml.example", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c441b8aca5f572a4a677b8243d2507a636afa819/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/c441b8aca5f572a4a677b8243d2507a636afa819/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=c441b8aca5f572a4a677b8243d2507a636afa819", "patch": "@@ -480,7 +480,7 @@\n # linked binaries\n #musl-root = \"...\"\n \n-# The root location of the `wasm32-unknown-wasi` sysroot.\n+# The root location of the `wasm32-wasi` sysroot.\n #wasi-root = \"...\"\n \n # Used in testing for configuring where the QEMU images are located, you"}, {"sha": "869ee9883c1009e4c0d6f3e07276caf1308bdd87", "filename": "src/ci/docker/dist-various-2/Dockerfile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c441b8aca5f572a4a677b8243d2507a636afa819/src%2Fci%2Fdocker%2Fdist-various-2%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/c441b8aca5f572a4a677b8243d2507a636afa819/src%2Fci%2Fdocker%2Fdist-various-2%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-various-2%2FDockerfile?ref=c441b8aca5f572a4a677b8243d2507a636afa819", "patch": "@@ -75,7 +75,7 @@ ENV TARGETS=x86_64-fuchsia\n ENV TARGETS=$TARGETS,aarch64-fuchsia\n ENV TARGETS=$TARGETS,sparcv9-sun-solaris\n ENV TARGETS=$TARGETS,wasm32-unknown-unknown\n-ENV TARGETS=$TARGETS,wasm32-unknown-wasi\n+ENV TARGETS=$TARGETS,wasm32-wasi\n ENV TARGETS=$TARGETS,x86_64-sun-solaris\n ENV TARGETS=$TARGETS,x86_64-unknown-linux-gnux32\n ENV TARGETS=$TARGETS,x86_64-unknown-cloudabi\n@@ -85,5 +85,5 @@ ENV TARGETS=$TARGETS,nvptx64-nvidia-cuda\n ENV X86_FORTANIX_SGX_LIBS=\"/x86_64-fortanix-unknown-sgx/lib/\"\n \n ENV RUST_CONFIGURE_ARGS --enable-extended --enable-lld --disable-docs \\\n-  --set target.wasm32-unknown-wasi.wasi-root=/wasm32-unknown-wasi\n+  --set target.wasm32-wasi.wasi-root=/wasm32-wasi\n ENV SCRIPT python2.7 ../x.py dist --target $TARGETS"}, {"sha": "98d6df043baca1ef609ba00e1d4b39218fc2620e", "filename": "src/ci/docker/dist-various-2/build-wasi-toolchain.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c441b8aca5f572a4a677b8243d2507a636afa819/src%2Fci%2Fdocker%2Fdist-various-2%2Fbuild-wasi-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/c441b8aca5f572a4a677b8243d2507a636afa819/src%2Fci%2Fdocker%2Fdist-various-2%2Fbuild-wasi-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-various-2%2Fbuild-wasi-toolchain.sh?ref=c441b8aca5f572a4a677b8243d2507a636afa819", "patch": "@@ -13,7 +13,7 @@ git clone https://github.com/CraneStation/wasi-sysroot\n \n cd wasi-sysroot\n git reset --hard e5f14be38362f1ab83302895a6e74b2ffd0e2302\n-make -j$(nproc) INSTALL_DIR=/wasm32-unknown-wasi install\n+make -j$(nproc) INSTALL_DIR=/wasm32-wasi install\n \n cd ..\n rm -rf reference-sysroot-wasi"}, {"sha": "b30a4fe76a2da848ba48cf90493eab686fbad1e4", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c441b8aca5f572a4a677b8243d2507a636afa819/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c441b8aca5f572a4a677b8243d2507a636afa819/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=c441b8aca5f572a4a677b8243d2507a636afa819", "patch": "@@ -444,7 +444,7 @@ supported_targets! {\n     (\"asmjs-unknown-emscripten\", asmjs_unknown_emscripten),\n     (\"wasm32-unknown-emscripten\", wasm32_unknown_emscripten),\n     (\"wasm32-unknown-unknown\", wasm32_unknown_unknown),\n-    (\"wasm32-unknown-wasi\", wasm32_unknown_wasi),\n+    (\"wasm32-wasi\", wasm32_wasi),\n     (\"wasm32-experimental-emscripten\", wasm32_experimental_emscripten),\n \n     (\"thumbv6m-none-eabi\", thumbv6m_none_eabi),"}, {"sha": "bb33493a7733368311e59380522eab34bc878594", "filename": "src/librustc_target/spec/wasm32_wasi.rs", "status": "renamed", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c441b8aca5f572a4a677b8243d2507a636afa819/src%2Flibrustc_target%2Fspec%2Fwasm32_wasi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c441b8aca5f572a4a677b8243d2507a636afa819/src%2Flibrustc_target%2Fspec%2Fwasm32_wasi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwasm32_wasi.rs?ref=c441b8aca5f572a4a677b8243d2507a636afa819", "patch": "@@ -1,4 +1,4 @@\n-//! The `wasm32-unknown-wasi` target is a new and still (as of March 2019)\n+//! The `wasm32-wasi` target is a new and still (as of April 2019) an\n //! experimental target. The definition in this file is likely to be tweaked\n //! over time and shouldn't be relied on too much.\n //!\n@@ -13,14 +13,14 @@\n //! serve two use cases here with this target:\n //!\n //! * First, we want Rust usage of the target to be as hassle-free as possible,\n-//!   ideally avoiding the need to configure and install a local\n-//!   wasm32-unknown-wasi toolchain.\n+//!   ideally avoiding the need to configure and install a local wasm32-wasi\n+//!   toolchain.\n //!\n //! * Second, one of the primary use cases of LLVM's new wasm backend and the\n //!   wasm support in LLD is that any compiled language can interoperate with\n-//!   any other. To that the `wasm32-unknown-wasi` target is the first with a\n-//!   viable C standard library and sysroot common definition, so we want Rust\n-//!   and C/C++ code to interoperate when compiled to `wasm32-unknown-unknown`.\n+//!   any other. To that the `wasm32-wasi` target is the first with a viable C\n+//!   standard library and sysroot common definition, so we want Rust and C/C++\n+//!   code to interoperate when compiled to `wasm32-unknown-unknown`.\n //!\n //! You'll note, however, that the two goals above are somewhat at odds with one\n //! another. To attempt to solve both use cases in one go we define a target\n@@ -39,8 +39,8 @@\n //! necessary.\n //!\n //! All in all, by default, no external dependencies are required. You can\n-//! compile `wasm32-unknown-wasi` binaries straight out of the box. You can't,\n-//! however, reliably interoperate with C code in this mode (yet).\n+//! compile `wasm32-wasi` binaries straight out of the box. You can't, however,\n+//! reliably interoperate with C code in this mode (yet).\n //!\n //! ## Interop with C required\n //!\n@@ -53,17 +53,17 @@\n //!\n //! 2. If you're using rustc to build a linked artifact then you'll need to\n //!    specify `-C linker` to a `clang` binary that supports\n-//!    `wasm32-unknown-wasi` and is configured with the `wasm32-unknown-wasi`\n-//!    sysroot. This will cause Rust code to be linked against the libc.a that\n-//!    the specified `clang` provides.\n+//!    `wasm32-wasi` and is configured with the `wasm32-wasi` sysroot. This\n+//!    will cause Rust code to be linked against the libc.a that the specified\n+//!    `clang` provides.\n //!\n //! 3. If you're building a staticlib and integrating Rust code elsewhere, then\n //!    compiling with `-C target-feature=-crt-static` is all you need to do.\n //!\n //! You can configure the linker via Cargo using the\n-//! `CARGO_TARGET_WASM32_UNKNOWN_WASI_LINKER` env var. Be sure to also set\n-//! `CC_wasm32-unknown-wasi` if any crates in the dependency graph are using\n-//! the `cc` crate.\n+//! `CARGO_TARGET_WASM32_WASI_LINKER` env var. Be sure to also set\n+//! `CC_wasm32-wasi` if any crates in the dependency graph are using the `cc`\n+//! crate.\n //!\n //! ## Remember, this is all in flux\n //!\n@@ -82,7 +82,7 @@ pub fn target() -> Result<Target, String> {\n         .pre_link_args\n         .entry(LinkerFlavor::Gcc)\n         .or_insert(Vec::new())\n-        .push(\"--target=wasm32-unknown-wasi\".to_string());\n+        .push(\"--target=wasm32-wasi\".to_string());\n \n     // When generating an executable be sure to put the startup object at the\n     // front so the main function is correctly hooked up.\n@@ -98,13 +98,13 @@ pub fn target() -> Result<Target, String> {\n     options.crt_static_respected = true;\n \n     Ok(Target {\n-        llvm_target: \"wasm32-unknown-wasi\".to_string(),\n+        llvm_target: \"wasm32-wasi\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n         target_os: \"wasi\".to_string(),\n         target_env: String::new(),\n-        target_vendor: \"unknown\".to_string(),\n+        target_vendor: String::new(),\n         data_layout: \"e-m:e-p:32:32-i64:64-n32:64-S128\".to_string(),\n         arch: \"wasm32\".to_string(),\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Wasm),", "previous_filename": "src/librustc_target/spec/wasm32_unknown_wasi.rs"}, {"sha": "5efd51b65c14abf78ce3701402d046366ffdb109", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c441b8aca5f572a4a677b8243d2507a636afa819/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c441b8aca5f572a4a677b8243d2507a636afa819/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=c441b8aca5f572a4a677b8243d2507a636afa819", "patch": "@@ -108,7 +108,7 @@ static TARGETS: &[&str] = &[\n     \"thumbv8m.main-none-eabihf\",\n     \"wasm32-unknown-emscripten\",\n     \"wasm32-unknown-unknown\",\n-    \"wasm32-unknown-wasi\",\n+    \"wasm32-wasi\",\n     \"x86_64-apple-darwin\",\n     \"x86_64-apple-ios\",\n     \"x86_64-fortanix-unknown-sgx\","}]}