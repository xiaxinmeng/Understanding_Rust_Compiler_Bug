{"sha": "9ce2c51c4677865da469e61d22602752c39679da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljZTJjNTFjNDY3Nzg2NWRhNDY5ZTYxZDIyNjAyNzUyYzM5Njc5ZGE=", "commit": {"author": {"name": "Felix Raimundo", "email": "felix.raimundo@telecom-paristech.fr", "date": "2014-09-17T22:35:26Z"}, "committer": {"name": "Felix Raimundo", "email": "felix.raimundo@telecom-paristech.fr", "date": "2014-09-17T22:35:26Z"}, "message": "Document that CStrings live in the libc heap\n\nInsists on the fact that the memory is managed by malloc\nand not jemalloc\nCloses #17067", "tree": {"sha": "d13d6f11f98e1b773db108f6134d2c282fc855dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d13d6f11f98e1b773db108f6134d2c282fc855dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ce2c51c4677865da469e61d22602752c39679da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ce2c51c4677865da469e61d22602752c39679da", "html_url": "https://github.com/rust-lang/rust/commit/9ce2c51c4677865da469e61d22602752c39679da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ce2c51c4677865da469e61d22602752c39679da/comments", "author": null, "committer": null, "parents": [{"sha": "06e85fd1e2c337ba6fa760e0195bd05c855e4b60", "url": "https://api.github.com/repos/rust-lang/rust/commits/06e85fd1e2c337ba6fa760e0195bd05c855e4b60", "html_url": "https://github.com/rust-lang/rust/commit/06e85fd1e2c337ba6fa760e0195bd05c855e4b60"}], "stats": {"total": 15, "additions": 11, "deletions": 4}, "files": [{"sha": "2390dcff3af71c19c26f42b5eb143bba0aff42ea", "filename": "src/librustrt/c_str.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9ce2c51c4677865da469e61d22602752c39679da/src%2Flibrustrt%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ce2c51c4677865da469e61d22602752c39679da/src%2Flibrustrt%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Fc_str.rs?ref=9ce2c51c4677865da469e61d22602752c39679da", "patch": "@@ -36,6 +36,11 @@ not tied to the lifetime of the original string/data buffer). If C strings are\n heavily used in applications, then caching may be advisable to prevent\n unnecessary amounts of allocations.\n \n+Be carefull to remember that the memory is managed by libc's malloc and not\n+by jemalloc which is the 'normal' rust memory allocator.\n+That means that the CString pointers should only be freed with \n+alloc::libc_heap::malloc_raw if you intend to do that on your own.\n+\n An example of creating and using a C string would be:\n \n ```rust\n@@ -91,8 +96,8 @@ pub struct CString {\n \n impl Clone for CString {\n     /// Clone this CString into a new, uniquely owned CString. For safety\n-    /// reasons, this is always a deep clone, rather than the usual shallow\n-    /// clone.\n+    /// reasons, this is always a deep clone with the memory allocated\n+    /// with libc's malloc, rather than the usual shallow clone.\n     fn clone(&self) -> CString {\n         let len = self.len() + 1;\n         let buf = unsafe { malloc_raw(len) } as *mut libc::c_char;\n@@ -131,7 +136,8 @@ impl<S: hash::Writer> hash::Hash<S> for CString {\n }\n \n impl CString {\n-    /// Create a C String from a pointer.\n+    /// Create a C String from a pointer, with memory managed by libc's malloc,\n+    /// so do not call it with a pointer allocated by jemalloc.\n     ///\n     ///# Failure\n     ///\n@@ -265,7 +271,8 @@ impl CString {\n     /// forgotten, meaning that the backing allocation of this\n     /// `CString` is not automatically freed if it owns the\n     /// allocation. In this case, a user of `.unwrap()` should ensure\n-    /// the allocation is freed, to avoid leaking memory.\n+    /// the allocation is freed, to avoid leaking memory. You have to\n+    /// use libc's memory allocator in this case.\n     ///\n     /// Prefer `.as_ptr()` when just retrieving a pointer to the\n     /// string data, as that does not relinquish ownership."}]}