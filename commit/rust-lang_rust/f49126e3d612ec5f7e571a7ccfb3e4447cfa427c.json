{"sha": "f49126e3d612ec5f7e571a7ccfb3e4447cfa427c", "node_id": "C_kwDOAAsO6NoAKGY0OTEyNmUzZDYxMmVjNWY3ZTU3MWE3Y2NmYjNlNDQ0N2NmYTQyN2M", "commit": {"author": {"name": "Jakob Degen", "email": "jakob.e.degen@gmail.com", "date": "2023-01-09T02:23:13Z"}, "committer": {"name": "Jakob Degen", "email": "jakob.e.degen@gmail.com", "date": "2023-01-16T22:51:33Z"}, "message": "Document wf constraints on control flow in cleanup blocks\n\nAlso fixes a bug in dominator computation", "tree": {"sha": "7fd525ea22beed96bdb2d98a3cb4c0a0472beb9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7fd525ea22beed96bdb2d98a3cb4c0a0472beb9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f49126e3d612ec5f7e571a7ccfb3e4447cfa427c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f49126e3d612ec5f7e571a7ccfb3e4447cfa427c", "html_url": "https://github.com/rust-lang/rust/commit/f49126e3d612ec5f7e571a7ccfb3e4447cfa427c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f49126e3d612ec5f7e571a7ccfb3e4447cfa427c/comments", "author": {"login": "JakobDegen", "id": 51179609, "node_id": "MDQ6VXNlcjUxMTc5NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/51179609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JakobDegen", "html_url": "https://github.com/JakobDegen", "followers_url": "https://api.github.com/users/JakobDegen/followers", "following_url": "https://api.github.com/users/JakobDegen/following{/other_user}", "gists_url": "https://api.github.com/users/JakobDegen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JakobDegen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JakobDegen/subscriptions", "organizations_url": "https://api.github.com/users/JakobDegen/orgs", "repos_url": "https://api.github.com/users/JakobDegen/repos", "events_url": "https://api.github.com/users/JakobDegen/events{/privacy}", "received_events_url": "https://api.github.com/users/JakobDegen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JakobDegen", "id": 51179609, "node_id": "MDQ6VXNlcjUxMTc5NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/51179609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JakobDegen", "html_url": "https://github.com/JakobDegen", "followers_url": "https://api.github.com/users/JakobDegen/followers", "following_url": "https://api.github.com/users/JakobDegen/following{/other_user}", "gists_url": "https://api.github.com/users/JakobDegen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JakobDegen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JakobDegen/subscriptions", "organizations_url": "https://api.github.com/users/JakobDegen/orgs", "repos_url": "https://api.github.com/users/JakobDegen/repos", "events_url": "https://api.github.com/users/JakobDegen/events{/privacy}", "received_events_url": "https://api.github.com/users/JakobDegen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4781233a77e879e49cb5ce3c98d2abba6a6ade7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4781233a77e879e49cb5ce3c98d2abba6a6ade7a", "html_url": "https://github.com/rust-lang/rust/commit/4781233a77e879e49cb5ce3c98d2abba6a6ade7a"}], "stats": {"total": 74, "additions": 68, "deletions": 6}, "files": [{"sha": "9f429d3a7d9842680e6ccbaf5b13423443a52b49", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 57, "deletions": 5, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/f49126e3d612ec5f7e571a7ccfb3e4447cfa427c/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f49126e3d612ec5f7e571a7ccfb3e4447cfa427c/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=f49126e3d612ec5f7e571a7ccfb3e4447cfa427c", "patch": "@@ -1,6 +1,8 @@\n //! Validates the MIR to ensure that invariants are upheld.\n \n-use rustc_data_structures::fx::FxHashSet;\n+use std::collections::hash_map::Entry;\n+\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_index::bit_set::BitSet;\n use rustc_infer::traits::Reveal;\n use rustc_middle::mir::interpret::Scalar;\n@@ -18,7 +20,7 @@ use rustc_mir_dataflow::storage::always_storage_live_locals;\n use rustc_mir_dataflow::{Analysis, ResultsCursor};\n use rustc_target::abi::{Size, VariantIdx};\n \n-#[derive(Copy, Clone, Debug)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n enum EdgeKind {\n     Unwind,\n     Normal,\n@@ -57,7 +59,7 @@ impl<'tcx> MirPass<'tcx> for Validator {\n             .iterate_to_fixpoint()\n             .into_results_cursor(body);\n \n-        TypeChecker {\n+        let mut checker = TypeChecker {\n             when: &self.when,\n             body,\n             tcx,\n@@ -67,8 +69,9 @@ impl<'tcx> MirPass<'tcx> for Validator {\n             storage_liveness,\n             place_cache: Vec::new(),\n             value_cache: Vec::new(),\n-        }\n-        .visit_body(body);\n+        };\n+        checker.visit_body(body);\n+        checker.check_cleanup_control_flow();\n     }\n }\n \n@@ -134,6 +137,55 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         }\n     }\n \n+    fn check_cleanup_control_flow(&self) {\n+        let doms = self.body.basic_blocks.dominators();\n+        let mut post_contract_node = FxHashMap::default();\n+        let mut get_post_contract_node = |mut bb| {\n+            if let Some(res) = post_contract_node.get(&bb) {\n+                return *res;\n+            }\n+            let mut dom_path = vec![];\n+            while self.body.basic_blocks[bb].is_cleanup {\n+                dom_path.push(bb);\n+                bb = doms.immediate_dominator(bb);\n+            }\n+            let root = *dom_path.last().unwrap();\n+            for bb in dom_path {\n+                post_contract_node.insert(bb, root);\n+            }\n+            root\n+        };\n+\n+        let mut parent = FxHashMap::default();\n+        for (bb, bb_data) in self.body.basic_blocks.iter_enumerated() {\n+            if !bb_data.is_cleanup || !self.reachable_blocks.contains(bb) {\n+                continue;\n+            }\n+            let bb = get_post_contract_node(bb);\n+            for s in bb_data.terminator().successors() {\n+                let s = get_post_contract_node(s);\n+                if s == bb {\n+                    continue;\n+                }\n+                match parent.entry(bb) {\n+                    Entry::Vacant(e) => {\n+                        e.insert(s);\n+                    }\n+                    Entry::Occupied(e) if s != *e.get() => self.fail(\n+                        Location { block: bb, statement_index: 0 },\n+                        format!(\n+                            \"Cleanup control flow violation: The blocks dominated by {:?} have edges to both {:?} and {:?}\",\n+                            bb,\n+                            s,\n+                            *e.get()\n+                        )\n+                    ),\n+                    Entry::Occupied(_) => (),\n+                }\n+            }\n+        }\n+    }\n+\n     /// Check if src can be assigned into dest.\n     /// This is not precise, it will accept some incorrect assignments.\n     fn mir_assign_valid_types(&self, src: Ty<'tcx>, dest: Ty<'tcx>) -> bool {"}, {"sha": "07b1ace2189459c27c0f5d7b37307d46aeec543a", "filename": "compiler/rustc_data_structures/src/graph/dominators/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f49126e3d612ec5f7e571a7ccfb3e4447cfa427c/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fdominators%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f49126e3d612ec5f7e571a7ccfb3e4447cfa427c/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fdominators%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fdominators%2Fmod.rs?ref=f49126e3d612ec5f7e571a7ccfb3e4447cfa427c", "patch": "@@ -135,7 +135,10 @@ pub fn dominators<G: ControlFlowGraph>(graph: G) -> Dominators<G::Node> {\n         // This loop computes the semi[w] for w.\n         semi[w] = w;\n         for v in graph.predecessors(pre_order_to_real[w]) {\n-            let v = real_to_pre_order[v].unwrap();\n+            // Reachable vertices may have unreachable predecessors, so ignore any of them\n+            let Some(v) = real_to_pre_order[v] else {\n+                continue\n+            };\n \n             // eval returns a vertex x from which semi[x] is minimum among\n             // vertices semi[v] +> x *> v."}, {"sha": "0c395cae5665c1da977893629d967d4fd33fe7a8", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f49126e3d612ec5f7e571a7ccfb3e4447cfa427c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f49126e3d612ec5f7e571a7ccfb3e4447cfa427c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=f49126e3d612ec5f7e571a7ccfb3e4447cfa427c", "patch": "@@ -512,6 +512,13 @@ pub struct CopyNonOverlapping<'tcx> {\n ///     must also be `cleanup`. This is a part of the type system and checked statically, so it is\n ///     still an error to have such an edge in the CFG even if it's known that it won't be taken at\n ///     runtime.\n+///  4. The induced subgraph on cleanup blocks must look roughly like an upside down tree. This is\n+///     necessary to ensure that landing pad information can be correctly codegened. More precisely:\n+///\n+///     Begin with the standard control flow graph `G`. Modify `G` as follows: for any two cleanup\n+///     vertices `u` and `v` such that `u` dominates `v`, contract `u` and `v` into a single vertex,\n+///     deleting self edges and duplicate edges in the process. The cleanup blocks of the resulting\n+///     graph must form an inverted forest.\n #[derive(Clone, TyEncodable, TyDecodable, Hash, HashStable, PartialEq, TypeFoldable, TypeVisitable)]\n pub enum TerminatorKind<'tcx> {\n     /// Block has one successor; we continue execution there."}]}