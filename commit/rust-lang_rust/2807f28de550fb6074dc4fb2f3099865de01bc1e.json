{"sha": "2807f28de550fb6074dc4fb2f3099865de01bc1e", "node_id": "C_kwDOAAsO6NoAKDI4MDdmMjhkZTU1MGZiNjA3NGRjNGZiMmYzMDk5ODY1ZGUwMWJjMWU", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-06-20T12:56:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-20T12:56:39Z"}, "message": "Rollup merge of #97150 - ChrisDenton:stdio-create_pipe, r=m-ou-se\n\n`Stdio::makes_pipe`\n\nWrappers around `std::process::Command` may want to be able to override pipe creation. However, [`std::process::Stdio`](https://doc.rust-lang.org/std/process/struct.Stdio.html) is opaque so there's no way to tell if `Command` was told to create new pipes or not.\n\nThis is in some ways a more generic (and cross-platform) alternative to #97149. However, unlike that feature, this comes with the price of the user needing to actually create their own pipes rather than reusing the std one. So I think it stands (or not) on its own.\n\n# Example\n\n```rust\n#![feature(stdio_makes_pipe)]\nuse std::process::Stdio;\n\nlet io = Stdio::piped();\nassert_eq!(io.makes_pipe(), true);\n```", "tree": {"sha": "d802ff7aad133ce915f938b71f199cc564e7ae47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d802ff7aad133ce915f938b71f199cc564e7ae47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2807f28de550fb6074dc4fb2f3099865de01bc1e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJisG6HCRBK7hj4Ov3rIwAAUrcIAE6LxH7i7tHCgkWcHNpHEKfh\nSECuO+YK+Gyc33BtnS9SiXA/+uCZttSO2kmi+mWt1zQ2RjeI0X+Aor4EJNpBwjuG\nEp9s3/W5B1ROEZNgw+JXnKdjD347eHFBa4Q4hf2bH4v4Z7/gchz0JbvB2bK9KYo9\nJCg+xcRVjyyXdyX1Xt+iq4IkLa+ChTvJ5NtSB6mtZNPLbp8bNT+Nu/G0iHmNLIBX\nJmKfhz2ukEPfZIxlzxgmQT4ZNLoJuuxtrkJJ9SJogICRCqQ7OdT8yMDgLOmjjwUg\nahIsYF6497Zzlwn7pqqPt8VgOEGVcdoxKDXcv3gmWp92XsZKtL2hgWn8Rsi7nPI=\n=dmhP\n-----END PGP SIGNATURE-----\n", "payload": "tree d802ff7aad133ce915f938b71f199cc564e7ae47\nparent 85f1de20e76001db54d64ee0c3f9fec797075938\nparent 8b93147f7e1805a8910f0d593aacf87f539a1280\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1655729799 +0200\ncommitter GitHub <noreply@github.com> 1655729799 +0200\n\nRollup merge of #97150 - ChrisDenton:stdio-create_pipe, r=m-ou-se\n\n`Stdio::makes_pipe`\n\nWrappers around `std::process::Command` may want to be able to override pipe creation. However, [`std::process::Stdio`](https://doc.rust-lang.org/std/process/struct.Stdio.html) is opaque so there's no way to tell if `Command` was told to create new pipes or not.\n\nThis is in some ways a more generic (and cross-platform) alternative to #97149. However, unlike that feature, this comes with the price of the user needing to actually create their own pipes rather than reusing the std one. So I think it stands (or not) on its own.\n\n# Example\n\n```rust\n#![feature(stdio_makes_pipe)]\nuse std::process::Stdio;\n\nlet io = Stdio::piped();\nassert_eq!(io.makes_pipe(), true);\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2807f28de550fb6074dc4fb2f3099865de01bc1e", "html_url": "https://github.com/rust-lang/rust/commit/2807f28de550fb6074dc4fb2f3099865de01bc1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2807f28de550fb6074dc4fb2f3099865de01bc1e/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85f1de20e76001db54d64ee0c3f9fec797075938", "url": "https://api.github.com/repos/rust-lang/rust/commits/85f1de20e76001db54d64ee0c3f9fec797075938", "html_url": "https://github.com/rust-lang/rust/commit/85f1de20e76001db54d64ee0c3f9fec797075938"}, {"sha": "8b93147f7e1805a8910f0d593aacf87f539a1280", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b93147f7e1805a8910f0d593aacf87f539a1280", "html_url": "https://github.com/rust-lang/rust/commit/8b93147f7e1805a8910f0d593aacf87f539a1280"}], "stats": {"total": 16, "additions": 16, "deletions": 0}, "files": [{"sha": "ab1a1e6c76fa4566c02aea580114d673e64150d8", "filename": "library/std/src/process.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2807f28de550fb6074dc4fb2f3099865de01bc1e/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2807f28de550fb6074dc4fb2f3099865de01bc1e/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=2807f28de550fb6074dc4fb2f3099865de01bc1e", "patch": "@@ -1273,6 +1273,22 @@ impl Stdio {\n     pub fn null() -> Stdio {\n         Stdio(imp::Stdio::Null)\n     }\n+\n+    /// Returns `true` if this requires [`Command`] to create a new pipe.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// #![feature(stdio_makes_pipe)]\n+    /// use std::process::Stdio;\n+    ///\n+    /// let io = Stdio::piped();\n+    /// assert_eq!(io.makes_pipe(), true);\n+    /// ```\n+    #[unstable(feature = \"stdio_makes_pipe\", issue = \"98288\")]\n+    pub fn makes_pipe(&self) -> bool {\n+        matches!(self.0, imp::Stdio::MakePipe)\n+    }\n }\n \n impl FromInner<imp::Stdio> for Stdio {"}]}