{"sha": "ff88b59e58a03dc142e80f35f4ce6177e07ad8ba", "node_id": "C_kwDOAAsO6NoAKGZmODhiNTllNThhMDNkYzE0MmU4MGYzNWY0Y2U2MTc3ZTA3YWQ4YmE", "commit": {"author": {"name": "zredb", "email": "zredb@163.com", "date": "2022-01-10T02:44:18Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-01-17T12:41:59Z"}, "message": "fix #90187", "tree": {"sha": "cbcaa10624a50affe7459a5624bd0e7d7fb76823", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbcaa10624a50affe7459a5624bd0e7d7fb76823"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff88b59e58a03dc142e80f35f4ce6177e07ad8ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff88b59e58a03dc142e80f35f4ce6177e07ad8ba", "html_url": "https://github.com/rust-lang/rust/commit/ff88b59e58a03dc142e80f35f4ce6177e07ad8ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff88b59e58a03dc142e80f35f4ce6177e07ad8ba/comments", "author": {"login": "zredb", "id": 8102504, "node_id": "MDQ6VXNlcjgxMDI1MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8102504?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zredb", "html_url": "https://github.com/zredb", "followers_url": "https://api.github.com/users/zredb/followers", "following_url": "https://api.github.com/users/zredb/following{/other_user}", "gists_url": "https://api.github.com/users/zredb/gists{/gist_id}", "starred_url": "https://api.github.com/users/zredb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zredb/subscriptions", "organizations_url": "https://api.github.com/users/zredb/orgs", "repos_url": "https://api.github.com/users/zredb/repos", "events_url": "https://api.github.com/users/zredb/events{/privacy}", "received_events_url": "https://api.github.com/users/zredb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b13a5bf3c4d66ce375f5978c2c2233f9714b721e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b13a5bf3c4d66ce375f5978c2c2233f9714b721e", "html_url": "https://github.com/rust-lang/rust/commit/b13a5bf3c4d66ce375f5978c2c2233f9714b721e"}], "stats": {"total": 32, "additions": 15, "deletions": 17}, "files": [{"sha": "53159709586c6826987c39284ba1d4756ed43cc1", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff88b59e58a03dc142e80f35f4ce6177e07ad8ba/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff88b59e58a03dc142e80f35f4ce6177e07ad8ba/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=ff88b59e58a03dc142e80f35f4ce6177e07ad8ba", "patch": "@@ -303,7 +303,7 @@ impl<'a, 'tcx> DocFolder for CacheBuilder<'a, 'tcx> {\n                             desc,\n                             parent,\n                             parent_idx: None,\n-                            search_type: get_function_type_for_search(&item, self.tcx),\n+                            search_type: get_function_type_for_search(&item, self.tcx, self.cache),\n                             aliases: item.attrs.get_doc_aliases(),\n                         });\n                     }"}, {"sha": "0b6eeb51825024ad5b26c4f3549e76ab5a8a2eef", "filename": "src/librustdoc/html/render/search_index.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ff88b59e58a03dc142e80f35f4ce6177e07ad8ba/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff88b59e58a03dc142e80f35f4ce6177e07ad8ba/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs?ref=ff88b59e58a03dc142e80f35f4ce6177e07ad8ba", "patch": "@@ -33,7 +33,7 @@ crate fn build_index<'tcx>(krate: &clean::Crate, cache: &mut Cache, tcx: TyCtxt<\n                 desc,\n                 parent: Some(did),\n                 parent_idx: None,\n-                search_type: get_function_type_for_search(item, tcx),\n+                search_type: get_function_type_for_search(item, tcx, &cache),\n                 aliases: item.attrs.get_doc_aliases(),\n             });\n         }\n@@ -188,11 +188,12 @@ crate fn build_index<'tcx>(krate: &clean::Crate, cache: &mut Cache, tcx: TyCtxt<\n crate fn get_function_type_for_search<'tcx>(\n     item: &clean::Item,\n     tcx: TyCtxt<'tcx>,\n+    cache: &Cache,\n ) -> Option<IndexItemFunctionType> {\n     let (mut inputs, mut output) = match *item.kind {\n-        clean::FunctionItem(ref f) => get_fn_inputs_and_outputs(f, tcx),\n-        clean::MethodItem(ref m, _) => get_fn_inputs_and_outputs(m, tcx),\n-        clean::TyMethodItem(ref m) => get_fn_inputs_and_outputs(m, tcx),\n+        clean::FunctionItem(ref f) => get_fn_inputs_and_outputs(f, tcx, cache),\n+        clean::MethodItem(ref m, _) => get_fn_inputs_and_outputs(m, tcx, cache),\n+        clean::TyMethodItem(ref m) => get_fn_inputs_and_outputs(m, tcx, cache),\n         _ => return None,\n     };\n \n@@ -311,7 +312,7 @@ fn add_generics_and_bounds_as_types<'tcx>(\n             // We remove the name of the full generic because we have no use for it.\n             index_ty.name = Some(String::new());\n             res.push(TypeWithKind::from((index_ty, ItemType::Generic)));\n-        } else if let Some(kind) = ty.def_id_no_primitives().map(|did| tcx.def_kind(did).into()) {\n+        } else if let Some(kind) = ty.def_id(cache).map(|did| tcx.def_kind(did).into()) {\n             res.push(TypeWithKind::from((index_ty, kind)));\n         } else if ty.is_primitive() {\n             // This is a primitive, let's store it as such.\n@@ -330,9 +331,7 @@ fn add_generics_and_bounds_as_types<'tcx>(\n     if let Type::Generic(arg_s) = *arg {\n         // First we check if the bounds are in a `where` predicate...\n         if let Some(where_pred) = generics.where_predicates.iter().find(|g| match g {\n-            WherePredicate::BoundPredicate { ty, .. } => {\n-                ty.def_id_no_primitives() == arg.def_id_no_primitives()\n-            }\n+            WherePredicate::BoundPredicate { ty, .. } => ty.def_id(cache) == arg.def_id(cache),\n             _ => false,\n         }) {\n             let mut ty_generics = Vec::new();\n@@ -397,6 +396,7 @@ fn add_generics_and_bounds_as_types<'tcx>(\n fn get_fn_inputs_and_outputs<'tcx>(\n     func: &Function,\n     tcx: TyCtxt<'tcx>,\n+    cache: &Cache,\n ) -> (Vec<TypeWithKind>, Vec<TypeWithKind>) {\n     let decl = &func.decl;\n     let generics = &func.generics;\n@@ -411,8 +411,7 @@ fn get_fn_inputs_and_outputs<'tcx>(\n         if !args.is_empty() {\n             all_types.extend(args);\n         } else {\n-            if let Some(kind) = arg.type_.def_id_no_primitives().map(|did| tcx.def_kind(did).into())\n-            {\n+            if let Some(kind) = arg.type_.def_id(cache).map(|did| tcx.def_kind(did).into()) {\n                 all_types.push(TypeWithKind::from((get_index_type(&arg.type_, vec![]), kind)));\n             }\n         }\n@@ -423,9 +422,7 @@ fn get_fn_inputs_and_outputs<'tcx>(\n         FnRetTy::Return(ref return_type) => {\n             add_generics_and_bounds_as_types(generics, return_type, tcx, 0, &mut ret_types);\n             if ret_types.is_empty() {\n-                if let Some(kind) =\n-                    return_type.def_id_no_primitives().map(|did| tcx.def_kind(did).into())\n-                {\n+                if let Some(kind) = return_type.def_id(cache).map(|did| tcx.def_kind(did).into()) {\n                     ret_types.push(TypeWithKind::from((get_index_type(return_type, vec![]), kind)));\n                 }\n             }"}, {"sha": "fd52d93cb382bed27c35decefb62344e65f9f6c6", "filename": "src/librustdoc/passes/collect_trait_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff88b59e58a03dc142e80f35f4ce6177e07ad8ba/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff88b59e58a03dc142e80f35f4ce6177e07ad8ba/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs?ref=ff88b59e58a03dc142e80f35f4ce6177e07ad8ba", "patch": "@@ -102,7 +102,7 @@ crate fn collect_trait_impls(mut krate: Crate, cx: &mut DocContext<'_>) -> Crate\n                 } else if let Some(did) = target.def_id(&cx.cache) {\n                     cleaner.items.insert(did.into());\n                 }\n-                if let Some(for_did) = for_.def_id_no_primitives() {\n+                if let Some(for_did) = for_.def_id(&cx.cache) {\n                     if type_did_to_deref_target.insert(for_did, target).is_none() {\n                         // Since only the `DefId` portion of the `Type` instances is known to be same for both the\n                         // `Deref` target type and the impl for type positions, this map of types is keyed by\n@@ -216,7 +216,7 @@ impl BadImplStripper {\n             true\n         } else if let Some(prim) = ty.primitive_type() {\n             self.prims.contains(&prim)\n-        } else if let Some(did) = ty.def_id_no_primitives() {\n+        } else if let Some(did) = ty.def_id(&cx.cache) {\n             is_deref || self.keep_impl_with_def_id(did.into())\n         } else {\n             false"}, {"sha": "ed0b2c0a5d725cee458ffc9767d38b54f7546747", "filename": "src/librustdoc/passes/stripper.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ff88b59e58a03dc142e80f35f4ce6177e07ad8ba/src%2Flibrustdoc%2Fpasses%2Fstripper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff88b59e58a03dc142e80f35f4ce6177e07ad8ba/src%2Flibrustdoc%2Fpasses%2Fstripper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstripper.rs?ref=ff88b59e58a03dc142e80f35f4ce6177e07ad8ba", "patch": "@@ -118,6 +118,7 @@ impl<'a> DocFolder for Stripper<'a> {\n /// This stripper discards all impls which reference stripped items\n crate struct ImplStripper<'a> {\n     crate retained: &'a ItemIdSet,\n+    crate cache: &'a Cache,\n }\n \n impl<'a> DocFolder for ImplStripper<'a> {\n@@ -127,7 +128,7 @@ impl<'a> DocFolder for ImplStripper<'a> {\n             if imp.trait_.is_none() && imp.items.is_empty() {\n                 return None;\n             }\n-            if let Some(did) = imp.for_.def_id_no_primitives() {\n+            if let Some(did) = imp.for_.def_id(self.cache) {\n                 if did.is_local() && !imp.for_.is_assoc_ty() && !self.retained.contains(&did.into())\n                 {\n                     debug!(\"ImplStripper: impl item for stripped type; removing\");"}]}