{"sha": "0e64ce7c5e6c15655ba99c1cbd7f3fe4f6125eb8", "node_id": "C_kwDOAAsO6NoAKDBlNjRjZTdjNWU2YzE1NjU1YmE5OWMxY2JkN2YzZmU0ZjYxMjVlYjg", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-03-05T21:37:39Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-03-08T14:40:37Z"}, "message": "Do not track span in ConstProp.", "tree": {"sha": "3e181d6b8f31a37b9f90f7abcf9c25f896ee9115", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e181d6b8f31a37b9f90f7abcf9c25f896ee9115"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e64ce7c5e6c15655ba99c1cbd7f3fe4f6125eb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e64ce7c5e6c15655ba99c1cbd7f3fe4f6125eb8", "html_url": "https://github.com/rust-lang/rust/commit/0e64ce7c5e6c15655ba99c1cbd7f3fe4f6125eb8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e64ce7c5e6c15655ba99c1cbd7f3fe4f6125eb8/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2247cd664368acc07529a498388ab78eed93c431", "url": "https://api.github.com/repos/rust-lang/rust/commits/2247cd664368acc07529a498388ab78eed93c431", "html_url": "https://github.com/rust-lang/rust/commit/2247cd664368acc07529a498388ab78eed93c431"}], "stats": {"total": 49, "additions": 14, "deletions": 35}, "files": [{"sha": "afc5f08b2d2b03f13580538f8c2d9abe72153481", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 9, "deletions": 30, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/0e64ce7c5e6c15655ba99c1cbd7f3fe4f6125eb8/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e64ce7c5e6c15655ba99c1cbd7f3fe4f6125eb8/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=0e64ce7c5e6c15655ba99c1cbd7f3fe4f6125eb8", "patch": "@@ -17,7 +17,7 @@ use rustc_middle::mir::*;\n use rustc_middle::ty::layout::{LayoutError, LayoutOf, LayoutOfHelpers, TyAndLayout};\n use rustc_middle::ty::InternalSubsts;\n use rustc_middle::ty::{self, ConstKind, Instance, ParamEnv, Ty, TyCtxt, TypeVisitableExt};\n-use rustc_span::{def_id::DefId, Span};\n+use rustc_span::{def_id::DefId, Span, DUMMY_SP};\n use rustc_target::abi::{self, Align, HasDataLayout, Size, TargetDataLayout};\n use rustc_target::spec::abi::Abi as CallAbi;\n use rustc_trait_selection::traits;\n@@ -328,9 +328,6 @@ struct ConstPropagator<'mir, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     param_env: ParamEnv<'tcx>,\n     local_decls: &'mir IndexVec<Local, LocalDecl<'tcx>>,\n-    // Because we have `MutVisitor` we can't obtain the `SourceInfo` from a `Location`. So we store\n-    // the last known `SourceInfo` here and just keep revisiting it.\n-    source_info: Option<SourceInfo>,\n }\n \n impl<'tcx> LayoutOfHelpers<'tcx> for ConstPropagator<'_, 'tcx> {\n@@ -411,13 +408,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         )\n         .expect(\"failed to push initial stack frame\");\n \n-        ConstPropagator {\n-            ecx,\n-            tcx,\n-            param_env,\n-            local_decls: &dummy_body.local_decls,\n-            source_info: None,\n-        }\n+        ConstPropagator { ecx, tcx, param_env, local_decls: &dummy_body.local_decls }\n     }\n \n     fn get_const(&self, place: Place<'tcx>) -> Option<OpTy<'tcx>> {\n@@ -495,7 +486,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                         *operand = self.operand_from_scalar(\n                             scalar,\n                             value.layout.ty,\n-                            self.source_info.unwrap().span,\n+                            DUMMY_SP,\n                         );\n                     }\n                 }\n@@ -629,12 +620,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         }))\n     }\n \n-    fn replace_with_const(\n-        &mut self,\n-        rval: &mut Rvalue<'tcx>,\n-        value: &OpTy<'tcx>,\n-        source_info: SourceInfo,\n-    ) {\n+    fn replace_with_const(&mut self, rval: &mut Rvalue<'tcx>, value: &OpTy<'tcx>) {\n         if let Rvalue::Use(Operand::Constant(c)) = rval {\n             match c.literal {\n                 ConstantKind::Ty(c) if matches!(c.kind(), ConstKind::Unevaluated(..)) => {}\n@@ -664,11 +650,8 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         if let Some(Right(imm)) = imm {\n             match *imm {\n                 interpret::Immediate::Scalar(scalar) => {\n-                    *rval = Rvalue::Use(self.operand_from_scalar(\n-                        scalar,\n-                        value.layout.ty,\n-                        source_info.span,\n-                    ));\n+                    *rval =\n+                        Rvalue::Use(self.operand_from_scalar(scalar, value.layout.ty, DUMMY_SP));\n                 }\n                 Immediate::ScalarPair(..) => {\n                     // Found a value represented as a pair. For now only do const-prop if the type\n@@ -701,7 +684,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                                 let const_val = ConstValue::ByRef { alloc, offset: Size::ZERO };\n                                 let literal = ConstantKind::Val(const_val, ty);\n                                 *rval = Rvalue::Use(Operand::Constant(Box::new(Constant {\n-                                    span: source_info.span,\n+                                    span: DUMMY_SP,\n                                     user_ty: None,\n                                     literal,\n                                 })));\n@@ -894,8 +877,6 @@ impl<'tcx> MutVisitor<'tcx> for ConstPropagator<'_, 'tcx> {\n \n     fn visit_statement(&mut self, statement: &mut Statement<'tcx>, location: Location) {\n         trace!(\"visit_statement: {:?}\", statement);\n-        let source_info = statement.source_info;\n-        self.source_info = Some(source_info);\n         match statement.kind {\n             StatementKind::Assign(box (place, ref mut rval)) => {\n                 let can_const_prop = self.ecx.machine.can_const_prop[place.local];\n@@ -905,7 +886,7 @@ impl<'tcx> MutVisitor<'tcx> for ConstPropagator<'_, 'tcx> {\n                     // consists solely of uninitialized memory (so it doesn't capture any locals).\n                     if let Some(ref value) = self.get_const(place) && self.should_const_prop(value) {\n                         trace!(\"replacing {:?} with {:?}\", rval, value);\n-                        self.replace_with_const(rval, value, source_info);\n+                        self.replace_with_const(rval, value);\n                         if can_const_prop == ConstPropMode::FullConstProp\n                             || can_const_prop == ConstPropMode::OnlyInsideOwnBlock\n                         {\n@@ -977,8 +958,6 @@ impl<'tcx> MutVisitor<'tcx> for ConstPropagator<'_, 'tcx> {\n     }\n \n     fn visit_terminator(&mut self, terminator: &mut Terminator<'tcx>, location: Location) {\n-        let source_info = terminator.source_info;\n-        self.source_info = Some(source_info);\n         self.super_terminator(terminator, location);\n \n         match &mut terminator.kind {\n@@ -991,7 +970,7 @@ impl<'tcx> MutVisitor<'tcx> for ConstPropagator<'_, 'tcx> {\n                     *cond = self.operand_from_scalar(\n                         value_const,\n                         self.tcx.types.bool,\n-                        source_info.span,\n+                        DUMMY_SP,\n                     );\n                 }\n             }"}, {"sha": "6d8738aa61aaa4e7cb713b244501139d5bcd0955", "filename": "tests/mir-opt/const_prop/discriminant.main.ConstProp.64bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e64ce7c5e6c15655ba99c1cbd7f3fe4f6125eb8/tests%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0e64ce7c5e6c15655ba99c1cbd7f3fe4f6125eb8/tests%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.64bit.diff?ref=0e64ce7c5e6c15655ba99c1cbd7f3fe4f6125eb8", "patch": "@@ -22,7 +22,7 @@\n -         switchInt(move _4) -> [1: bb1, otherwise: bb3]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n +         _3 = const Option::<bool>::Some(true); // scope 2 at $DIR/discriminant.rs:+1:34: +1:44\n +                                          // mir::Constant\n-+                                          // + span: $DIR/discriminant.rs:12:34: 12:44\n++                                          // + span: no-location\n +                                          // + literal: Const { ty: Option<bool>, val: Value(Scalar(0x01)) }\n +         _4 = const 1_isize;              // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n +         switchInt(const 1_isize) -> [1: bb1, otherwise: bb3]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31"}, {"sha": "a38c1de2a7833f72ebf1c9ac540a8be443186ba6", "filename": "tests/mir-opt/const_prop/invalid_constant.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e64ce7c5e6c15655ba99c1cbd7f3fe4f6125eb8/tests%2Fmir-opt%2Fconst_prop%2Finvalid_constant.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0e64ce7c5e6c15655ba99c1cbd7f3fe4f6125eb8/tests%2Fmir-opt%2Fconst_prop%2Finvalid_constant.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Finvalid_constant.main.ConstProp.diff?ref=0e64ce7c5e6c15655ba99c1cbd7f3fe4f6125eb8", "patch": "@@ -44,11 +44,11 @@\n -         _3 = [move _4];                  // scope 1 at $DIR/invalid_constant.rs:+13:24: +13:60\n +         _4 = const Scalar(0x00000004): E; // scope 4 at $DIR/invalid_constant.rs:+13:34: +13:57\n +                                          // mir::Constant\n-+                                          // + span: $DIR/invalid_constant.rs:28:34: 28:57\n++                                          // + span: no-location\n +                                          // + literal: Const { ty: E, val: Value(Scalar(0x00000004)) }\n +         _3 = [const Scalar(0x00000004): E]; // scope 1 at $DIR/invalid_constant.rs:+13:24: +13:60\n +                                          // mir::Constant\n-+                                          // + span: $DIR/invalid_constant.rs:28:24: 28:60\n++                                          // + span: no-location\n +                                          // + literal: Const { ty: E, val: Value(Scalar(0x00000004)) }\n           StorageDead(_4);                 // scope 1 at $DIR/invalid_constant.rs:+13:59: +13:60\n           StorageDead(_5);                 // scope 1 at $DIR/invalid_constant.rs:+13:60: +13:61"}, {"sha": "ec063294856c8cae24b9b3a9326d3ec6e6167312", "filename": "tests/mir-opt/funky_arms.float_to_exponential_common.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e64ce7c5e6c15655ba99c1cbd7f3fe4f6125eb8/tests%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0e64ce7c5e6c15655ba99c1cbd7f3fe4f6125eb8/tests%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff?ref=0e64ce7c5e6c15655ba99c1cbd7f3fe4f6125eb8", "patch": "@@ -54,7 +54,7 @@\n -         _6 = MinusPlus;                  // scope 1 at $DIR/funky_arms.rs:+10:17: +10:41\n +         _6 = const MinusPlus;            // scope 1 at $DIR/funky_arms.rs:+10:17: +10:41\n +                                          // mir::Constant\n-+                                          // + span: $DIR/funky_arms.rs:21:17: 21:41\n++                                          // + span: no-location\n +                                          // + literal: Const { ty: Sign, val: Value(Scalar(0x01)) }\n           goto -> bb4;                     // scope 1 at $DIR/funky_arms.rs:+10:17: +10:41\n       }\n@@ -63,7 +63,7 @@\n -         _6 = Minus;                      // scope 1 at $DIR/funky_arms.rs:+9:18: +9:38\n +         _6 = const Minus;                // scope 1 at $DIR/funky_arms.rs:+9:18: +9:38\n +                                          // mir::Constant\n-+                                          // + span: $DIR/funky_arms.rs:20:18: 20:38\n++                                          // + span: no-location\n +                                          // + literal: Const { ty: Sign, val: Value(Scalar(0x00)) }\n           goto -> bb4;                     // scope 1 at $DIR/funky_arms.rs:+9:18: +9:38\n       }"}]}