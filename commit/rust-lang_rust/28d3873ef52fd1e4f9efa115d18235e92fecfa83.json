{"sha": "28d3873ef52fd1e4f9efa115d18235e92fecfa83", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4ZDM4NzNlZjUyZmQxZTRmOWVmYTExNWQxODIzNWU5MmZlY2ZhODM=", "commit": {"author": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2021-06-19T18:14:05Z"}, "committer": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2021-06-25T09:36:22Z"}, "message": "Do not spawn blacklisted_name lint in test context\n\nFix detecting of the 'test' attribute\n\nUpdate UI test to actually check that warning is not triggered in the test code\n\nFix approach for detecting the test module\n\nAdd nested test case\n\nRemove code duplication by extracting 'is_test_module_or_function' into 'clippy_utils'\n\nCleanup the code", "tree": {"sha": "0e7245159e423c9ff17f35c3ee0cdbf5befcb800", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e7245159e423c9ff17f35c3ee0cdbf5befcb800"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28d3873ef52fd1e4f9efa115d18235e92fecfa83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28d3873ef52fd1e4f9efa115d18235e92fecfa83", "html_url": "https://github.com/rust-lang/rust/commit/28d3873ef52fd1e4f9efa115d18235e92fecfa83", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28d3873ef52fd1e4f9efa115d18235e92fecfa83/comments", "author": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7869e625572702d4f0a5d92735631c6260484335", "url": "https://api.github.com/repos/rust-lang/rust/commits/7869e625572702d4f0a5d92735631c6260484335", "html_url": "https://github.com/rust-lang/rust/commit/7869e625572702d4f0a5d92735631c6260484335"}], "stats": {"total": 67, "additions": 56, "deletions": 11}, "files": [{"sha": "8eb94f3c28e447943dcbc5702085a4c1bba9614e", "filename": "clippy_lints/src/blacklisted_name.rs", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/28d3873ef52fd1e4f9efa115d18235e92fecfa83/clippy_lints%2Fsrc%2Fblacklisted_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28d3873ef52fd1e4f9efa115d18235e92fecfa83/clippy_lints%2Fsrc%2Fblacklisted_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fblacklisted_name.rs?ref=28d3873ef52fd1e4f9efa115d18235e92fecfa83", "patch": "@@ -1,6 +1,6 @@\n-use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::{diagnostics::span_lint, is_test_module_or_function};\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_hir::{Pat, PatKind};\n+use rustc_hir::{Item, Pat, PatKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n@@ -25,18 +25,37 @@ declare_clippy_lint! {\n #[derive(Clone, Debug)]\n pub struct BlacklistedName {\n     blacklist: FxHashSet<String>,\n+    test_modules_deep: u32,\n }\n \n impl BlacklistedName {\n     pub fn new(blacklist: FxHashSet<String>) -> Self {\n-        Self { blacklist }\n+        Self {\n+            blacklist,\n+            test_modules_deep: 0,\n+        }\n+    }\n+\n+    fn in_test_module(&self) -> bool {\n+        self.test_modules_deep != 0\n     }\n }\n \n impl_lint_pass!(BlacklistedName => [BLACKLISTED_NAME]);\n \n impl<'tcx> LateLintPass<'tcx> for BlacklistedName {\n+    fn check_item(&mut self, cx: &LateContext<'_>, item: &Item<'_>) {\n+        if is_test_module_or_function(cx.tcx, item) {\n+            self.test_modules_deep = self.test_modules_deep.saturating_add(1);\n+        }\n+    }\n+\n     fn check_pat(&mut self, cx: &LateContext<'tcx>, pat: &'tcx Pat<'_>) {\n+        // Check whether we are under the `test` attribute.\n+        if self.in_test_module() {\n+            return;\n+        }\n+\n         if let PatKind::Binding(.., ident, _) = pat.kind {\n             if self.blacklist.contains(&ident.name.to_string()) {\n                 span_lint(\n@@ -48,4 +67,10 @@ impl<'tcx> LateLintPass<'tcx> for BlacklistedName {\n             }\n         }\n     }\n+\n+    fn check_item_post(&mut self, cx: &LateContext<'_>, item: &Item<'_>) {\n+        if is_test_module_or_function(cx.tcx, item) {\n+            self.test_modules_deep = self.test_modules_deep.saturating_sub(1);\n+        }\n+    }\n }"}, {"sha": "520586b3a1f426e093a18dc1a4dafd10739c7e3f", "filename": "clippy_lints/src/wildcard_imports.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/28d3873ef52fd1e4f9efa115d18235e92fecfa83/clippy_lints%2Fsrc%2Fwildcard_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28d3873ef52fd1e4f9efa115d18235e92fecfa83/clippy_lints%2Fsrc%2Fwildcard_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwildcard_imports.rs?ref=28d3873ef52fd1e4f9efa115d18235e92fecfa83", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::in_macro;\n use clippy_utils::source::{snippet, snippet_with_applicability};\n+use clippy_utils::{in_macro, is_test_module_or_function};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{\n@@ -106,7 +106,7 @@ impl_lint_pass!(WildcardImports => [ENUM_GLOB_USE, WILDCARD_IMPORTS]);\n \n impl LateLintPass<'_> for WildcardImports {\n     fn check_item(&mut self, cx: &LateContext<'_>, item: &Item<'_>) {\n-        if is_test_module_or_function(item) {\n+        if is_test_module_or_function(cx.tcx, item) {\n             self.test_modules_deep = self.test_modules_deep.saturating_add(1);\n         }\n         if item.vis.node.is_pub() || item.vis.node.is_pub_restricted() {\n@@ -183,8 +183,8 @@ impl LateLintPass<'_> for WildcardImports {\n         }\n     }\n \n-    fn check_item_post(&mut self, _: &LateContext<'_>, item: &Item<'_>) {\n-        if is_test_module_or_function(item) {\n+    fn check_item_post(&mut self, cx: &LateContext<'_>, item: &Item<'_>) {\n+        if is_test_module_or_function(cx.tcx, item) {\n             self.test_modules_deep = self.test_modules_deep.saturating_sub(1);\n         }\n     }\n@@ -208,7 +208,3 @@ fn is_prelude_import(segments: &[PathSegment<'_>]) -> bool {\n fn is_super_only_import(segments: &[PathSegment<'_>]) -> bool {\n     segments.len() == 1 && segments[0].ident.name == kw::Super\n }\n-\n-fn is_test_module_or_function(item: &Item<'_>) -> bool {\n-    matches!(item.kind, ItemKind::Mod(..)) && item.ident.name.as_str().contains(\"test\")\n-}"}, {"sha": "ef4854afc83cedeabf594430b3a2ad0d24ac5990", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/28d3873ef52fd1e4f9efa115d18235e92fecfa83/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28d3873ef52fd1e4f9efa115d18235e92fecfa83/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=28d3873ef52fd1e4f9efa115d18235e92fecfa83", "patch": "@@ -1727,3 +1727,15 @@ pub fn is_hir_ty_cfg_dependant(cx: &LateContext<'_>, ty: &hir::Ty<'_>) -> bool {\n         }\n     }\n }\n+\n+/// Checks whether item either has `test` attribute applied, or\n+/// is a module with `test` in its name.\n+pub fn is_test_module_or_function(tcx: TyCtxt<'_>, item: &Item<'_>) -> bool {\n+    if let Some(def_id) = tcx.hir().opt_local_def_id(item.hir_id()) {\n+        if tcx.has_attr(def_id.to_def_id(), sym::test) {\n+            return true;\n+        }\n+    }\n+\n+    matches!(item.kind, ItemKind::Mod(..)) && item.ident.name.as_str().contains(\"test\")\n+}"}, {"sha": "57d7139fef5683d7652d5a7c968b25326564fd6a", "filename": "tests/ui/blacklisted_name.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/28d3873ef52fd1e4f9efa115d18235e92fecfa83/tests%2Fui%2Fblacklisted_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28d3873ef52fd1e4f9efa115d18235e92fecfa83/tests%2Fui%2Fblacklisted_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblacklisted_name.rs?ref=28d3873ef52fd1e4f9efa115d18235e92fecfa83", "patch": "@@ -43,3 +43,15 @@ fn issue_1647_ref_mut() {\n     let ref mut baz = 0;\n     if let Some(ref mut quux) = Some(42) {}\n }\n+\n+mod tests {\n+    fn issue_7305() {\n+        // `blackisted_name` lint should not be triggered inside of the test code.\n+        let foo = 0;\n+\n+        // Check that even in nested functions warning is still not triggere.\n+        fn nested() {\n+            let foo = 0;\n+        }\n+    }\n+}"}]}