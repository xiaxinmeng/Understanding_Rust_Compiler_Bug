{"sha": "3ca7c225e5e2c907393e7e87660509cf877bffc8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjYTdjMjI1ZTVlMmM5MDczOTNlN2U4NzY2MDUwOWNmODc3YmZmYzg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-03-21T12:34:18Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-03-26T19:39:12Z"}, "message": "Stop writing directly to the final type/method/vtable sidetables from astconv\nand from typeck, which is verboten.  We are supposed to write inference results\ninto the FnCtxt and then these get copied over in writeback.  Add assertions\nthat no inference by-products are added to this table.\n\nFixes #3888\nFixes #4036\nFixes #4492", "tree": {"sha": "e61bee7544f8ffcbb64c16f3006904b7463a0d9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e61bee7544f8ffcbb64c16f3006904b7463a0d9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ca7c225e5e2c907393e7e87660509cf877bffc8", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ca7c225e5e2c907393e7e87660509cf877bffc8", "html_url": "https://github.com/rust-lang/rust/commit/3ca7c225e5e2c907393e7e87660509cf877bffc8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ca7c225e5e2c907393e7e87660509cf877bffc8/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f2783d5151cb8e9ee3aa9ab591b65847042cf1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f2783d5151cb8e9ee3aa9ab591b65847042cf1b", "html_url": "https://github.com/rust-lang/rust/commit/6f2783d5151cb8e9ee3aa9ab591b65847042cf1b"}], "stats": {"total": 179, "additions": 137, "deletions": 42}, "files": [{"sha": "1a5b01feb0aff9ec8826250f97282c1d1e562504", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ca7c225e5e2c907393e7e87660509cf877bffc8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ca7c225e5e2c907393e7e87660509cf877bffc8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=3ca7c225e5e2c907393e7e87660509cf877bffc8", "patch": "@@ -1581,6 +1581,8 @@ pub fn new_fn_ctxt_w_id(ccx: @CrateContext,\n                         param_substs: Option<@param_substs>,\n                         sp: Option<span>) -> fn_ctxt\n {\n+    for param_substs.each |p| { p.validate(); }\n+\n     debug!(\"new_fn_ctxt_w_id(path=%s, id=%?, impl_id=%?, \\\n             param_substs=%s\",\n            path_str(ccx.sess, path),"}, {"sha": "8c5729637ac594f4ad5b673b5203aef6429c6bf5", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ca7c225e5e2c907393e7e87660509cf877bffc8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ca7c225e5e2c907393e7e87660509cf877bffc8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=3ca7c225e5e2c907393e7e87660509cf877bffc8", "patch": "@@ -228,6 +228,8 @@ pub fn trans_fn_ref_with_vtables(\n            vtables);\n     let _indenter = indenter();\n \n+    fail_unless!(type_params.all(|t| !ty::type_needs_infer(*t)));\n+\n     // Polytype of the function item (may have type params)\n     let fn_tpt = ty::lookup_item_type(tcx, def_id);\n "}, {"sha": "bcdfc7cf95b4934f6993811d56703efc2b465c3e", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3ca7c225e5e2c907393e7e87660509cf877bffc8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ca7c225e5e2c907393e7e87660509cf877bffc8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=3ca7c225e5e2c907393e7e87660509cf877bffc8", "patch": "@@ -250,6 +250,13 @@ pub struct param_substs {\n     self_ty: Option<ty::t>\n }\n \n+pub impl param_substs {\n+    fn validate(&self) {\n+        for self.tys.each |t| { fail_unless!(!ty::type_needs_infer(*t)); }\n+        for self.self_ty.each |t| { fail_unless!(!ty::type_needs_infer(*t)); }\n+    }\n+}\n+\n pub fn param_substs_to_str(tcx: ty::ctxt, substs: &param_substs) -> ~str {\n     fmt!(\"param_substs {tys:%?, vtables:%?, bounds:%?}\",\n          substs.tys.map(|t| ty_to_str(tcx, *t)),\n@@ -1372,6 +1379,13 @@ pub fn expr_ty_adjusted(bcx: block, ex: @ast::expr) -> ty::t {\n pub fn node_id_type_params(bcx: block, id: ast::node_id) -> ~[ty::t] {\n     let tcx = bcx.tcx();\n     let params = ty::node_id_to_type_params(tcx, id);\n+\n+    if !params.all(|t| !ty::type_needs_infer(*t)) {\n+        bcx.sess().bug(\n+            fmt!(\"Type parameters for node %d include inference types: %s\",\n+                 id, str::connect(params.map(|t| bcx.ty_to_str(*t)), \",\")));\n+    }\n+\n     match bcx.fcx.param_substs {\n       Some(substs) => {\n         do vec::map(params) |t| {"}, {"sha": "b49bdbba426370378eff0ba9c38549f8351b67ac", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3ca7c225e5e2c907393e7e87660509cf877bffc8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ca7c225e5e2c907393e7e87660509cf877bffc8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=3ca7c225e5e2c907393e7e87660509cf877bffc8", "patch": "@@ -327,6 +327,7 @@ pub fn trans_static_method_callee(bcx: block,\n \n     match vtbls[bound_index] {\n         typeck::vtable_static(impl_did, ref rcvr_substs, rcvr_origins) => {\n+            fail_unless!(rcvr_substs.all(|t| !ty::type_needs_infer(*t)));\n \n             let mth_id = method_with_name(bcx.ccx(), impl_did, mname);\n             let callee_substs = combine_impl_and_methods_tps("}, {"sha": "67bba3e0bd98923b852b6ae1b3531c02b8bad1ef", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3ca7c225e5e2c907393e7e87660509cf877bffc8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ca7c225e5e2c907393e7e87660509cf877bffc8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=3ca7c225e5e2c907393e7e87660509cf877bffc8", "patch": "@@ -47,6 +47,7 @@ pub fn monomorphic_fn(ccx: @CrateContext,\n                       impl_did_opt: Option<ast::def_id>,\n                       ref_id: Option<ast::node_id>) ->\n                       (ValueRef, bool) {\n+    fail_unless!(real_substs.all(|t| !ty::type_needs_infer(*t)));\n     let _icx = ccx.insn_ctxt(\"monomorphic_fn\");\n     let mut must_cast = false;\n     let substs = vec::map(real_substs, |t| {"}, {"sha": "5d69ab5766d7d28f59e1cfa21a5fa1d1fcbf5230", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3ca7c225e5e2c907393e7e87660509cf877bffc8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ca7c225e5e2c907393e7e87660509cf877bffc8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=3ca7c225e5e2c907393e7e87660509cf877bffc8", "patch": "@@ -60,7 +60,7 @@ use middle::ty::{ty_param_substs_and_ty};\n use middle::ty;\n use middle::typeck::rscope::{in_binding_rscope};\n use middle::typeck::rscope::{region_scope, type_rscope, RegionError};\n-use middle::typeck::{CrateCtxt, write_substs_to_tcx, write_ty_to_tcx};\n+use middle::typeck::{CrateCtxt};\n \n use core::result;\n use core::vec;\n@@ -186,19 +186,15 @@ pub fn ast_path_to_ty<AC:AstConv,RS:region_scope + Copy + Durable>(\n         self: &AC,\n         rscope: &RS,\n         did: ast::def_id,\n-        path: @ast::path,\n-        path_id: ast::node_id)\n-     -> ty_param_substs_and_ty {\n+        path: @ast::path)\n+     -> ty_param_substs_and_ty\n+{\n     // Look up the polytype of the item and then substitute the provided types\n     // for any type/region parameters.\n-    let tcx = self.tcx();\n     let ty::ty_param_substs_and_ty {\n         substs: substs,\n         ty: ty\n     } = ast_path_to_substs_and_ty(self, rscope, did, path);\n-    write_ty_to_tcx(tcx, path_id, ty);\n-    write_substs_to_tcx(tcx, path_id, /*bad*/copy substs.tps);\n-\n     ty_param_substs_and_ty { substs: substs, ty: ty }\n }\n \n@@ -368,7 +364,7 @@ pub fn ast_ty_to_ty<AC:AstConv, RS:region_scope + Copy + Durable>(\n         };\n         match a_def {\n           ast::def_ty(did) | ast::def_struct(did) => {\n-            ast_path_to_ty(self, rscope, did, path, id).ty\n+            ast_path_to_ty(self, rscope, did, path).ty\n           }\n           ast::def_prim_ty(nty) => {\n             match nty {"}, {"sha": "e216f9266e910419d4eb1e809fabd6244ff1cb43", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3ca7c225e5e2c907393e7e87660509cf877bffc8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ca7c225e5e2c907393e7e87660509cf877bffc8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=3ca7c225e5e2c907393e7e87660509cf877bffc8", "patch": "@@ -104,6 +104,7 @@ use middle::typeck::rscope::{RegionError};\n use middle::typeck::rscope::{in_binding_rscope, region_scope, type_rscope};\n use middle::typeck::rscope;\n use middle::typeck::{isr_alist, lookup_def_ccx, method_map_entry};\n+use middle::typeck::{method_map, vtable_map};\n use middle::typeck::{method_origin, method_self, method_trait, no_params};\n use middle::typeck::{require_same_types};\n use util::common::{block_query, indenter, loop_query};\n@@ -160,9 +161,13 @@ pub struct SelfInfo {\n pub struct inherited {\n     infcx: @mut infer::InferCtxt,\n     locals: HashMap<ast::node_id, ty::t>,\n+\n+    // Temporary tables:\n     node_types: HashMap<ast::node_id, ty::t>,\n     node_type_substs: HashMap<ast::node_id, ty::substs>,\n-    adjustments: HashMap<ast::node_id, @ty::AutoAdjustment>\n+    adjustments: HashMap<ast::node_id, @ty::AutoAdjustment>,\n+    method_map: method_map,\n+    vtable_map: vtable_map,\n }\n \n pub enum FnKind {\n@@ -220,7 +225,9 @@ pub fn blank_inherited(ccx: @mut CrateCtxt) -> @inherited {\n         locals: HashMap(),\n         node_types: oldmap::HashMap(),\n         node_type_substs: oldmap::HashMap(),\n-        adjustments: oldmap::HashMap()\n+        adjustments: oldmap::HashMap(),\n+        method_map: oldmap::HashMap(),\n+        vtable_map: oldmap::HashMap(),\n     }\n }\n \n@@ -1357,7 +1364,7 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n                              CheckTraitsAndInherentMethods,\n                              AutoderefReceiver) {\n             Some(ref entry) => {\n-                let method_map = fcx.ccx.method_map;\n+                let method_map = fcx.inh.method_map;\n                 method_map.insert(expr.id, (*entry));\n             }\n             None => {\n@@ -1429,7 +1436,7 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n                              deref_args, CheckTraitsOnly, autoderef_receiver) {\n             Some(ref origin) => {\n                 let method_ty = fcx.node_ty(op_ex.callee_id);\n-                let method_map = fcx.ccx.method_map;\n+                let method_map = fcx.inh.method_map;\n                 method_map.insert(op_ex.id, *origin);\n                 check_call_inner(fcx, op_ex.span,\n                                  op_ex.id, method_ty,"}, {"sha": "fa0d9e81c2debf9bbd5989a88a4d9a5f84db8081", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ca7c225e5e2c907393e7e87660509cf877bffc8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ca7c225e5e2c907393e7e87660509cf877bffc8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=3ca7c225e5e2c907393e7e87660509cf877bffc8", "patch": "@@ -215,7 +215,7 @@ pub fn visit_expr(expr: @ast::expr, &&rcx: @mut Rcx, v: rvt) {\n             // `constrain_auto_ref()` on all exprs.  But that causes a\n             // lot of spurious errors because of how the region\n             // hierarchy is setup.\n-            if rcx.fcx.ccx.method_map.contains_key(&callee.id) {\n+            if rcx.fcx.inh.method_map.contains_key(&callee.id) {\n                 match callee.node {\n                     ast::expr_field(base, _, _) => {\n                         constrain_auto_ref(rcx, base);\n@@ -713,7 +713,7 @@ pub mod guarantor {\n             ast::expr_repeat(*) |\n             ast::expr_vec(*) => {\n                 fail_unless!(!ty::expr_is_lval(\n-                    rcx.fcx.tcx(), rcx.fcx.ccx.method_map, expr));\n+                    rcx.fcx.tcx(), rcx.fcx.inh.method_map, expr));\n                 None\n             }\n         }\n@@ -765,7 +765,7 @@ pub mod guarantor {\n         let _i = ::util::common::indenter();\n \n         let guarantor = {\n-            if rcx.fcx.ccx.method_map.contains_key(&expr.id) {\n+            if rcx.fcx.inh.method_map.contains_key(&expr.id) {\n                 None\n             } else {\n                 guarantor(rcx, expr)"}, {"sha": "6dfe34191d3c59a02f4c1acc44ccd0582548c96c", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3ca7c225e5e2c907393e7e87660509cf877bffc8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ca7c225e5e2c907393e7e87660509cf877bffc8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=3ca7c225e5e2c907393e7e87660509cf877bffc8", "patch": "@@ -486,13 +486,12 @@ pub fn connect_trait_tps(vcx: &VtableContext,\n     }\n }\n \n-pub fn insert_vtables(ccx: @mut CrateCtxt,\n+pub fn insert_vtables(fcx: @mut FnCtxt,\n                       callee_id: ast::node_id,\n                       vtables: vtable_res) {\n     debug!(\"insert_vtables(callee_id=%d, vtables=%?)\",\n-           callee_id, vtables.map(|v| v.to_str(ccx.tcx)));\n-    let vtable_map = ccx.vtable_map;\n-    vtable_map.insert(callee_id, vtables);\n+           callee_id, vtables.map(|v| v.to_str(fcx.tcx())));\n+    fcx.inh.vtable_map.insert(callee_id, vtables);\n }\n \n pub fn location_info_for_expr(expr: @ast::expr) -> LocationInfo {\n@@ -529,8 +528,7 @@ pub fn early_resolve_expr(ex: @ast::expr,\n                 let vtbls = lookup_vtables(&vcx, &location_info_for_expr(ex),\n                                            item_ty.bounds, substs, is_early);\n                 if !is_early {\n-                    let vtable_map = cx.vtable_map;\n-                    vtable_map.insert(ex.id, vtbls);\n+                    insert_vtables(fcx, ex.id, vtbls);\n                 }\n             }\n           }\n@@ -543,10 +541,10 @@ pub fn early_resolve_expr(ex: @ast::expr,\n       }\n \n       // Must resolve bounds on methods with bounded params\n-      ast::expr_field(*) | ast::expr_binary(*) |\n+      ast::expr_binary(*) |\n       ast::expr_unary(*) | ast::expr_assign_op(*) |\n       ast::expr_index(*) | ast::expr_method_call(*) => {\n-        match ty::method_call_bounds(cx.tcx, cx.method_map, ex.id) {\n+        match ty::method_call_bounds(cx.tcx, fcx.inh.method_map, ex.id) {\n           Some(bounds) => {\n             if has_trait_bounds(/*bad*/copy *bounds) {\n                 let callee_id = match ex.node {\n@@ -559,7 +557,7 @@ pub fn early_resolve_expr(ex: @ast::expr,\n                 let vtbls = lookup_vtables(&vcx, &location_info_for_expr(ex),\n                                            bounds, &substs, is_early);\n                 if !is_early {\n-                    insert_vtables(cx, callee_id, vtbls);\n+                    insert_vtables(fcx, callee_id, vtbls);\n                 }\n             }\n           }\n@@ -599,10 +597,7 @@ pub fn early_resolve_expr(ex: @ast::expr,\n                                   // vtable (that is: \"ex has vtable\n                                   // <vtable>\")\n                                   if !is_early {\n-                                      let vtable_map =\n-                                          cx.vtable_map;\n-                                      vtable_map.insert(ex.id,\n-                                                        @~[vtable]);\n+                                      insert_vtables(fcx, ex.id, @~[vtable]);\n                                   }\n                               }\n                               None => {"}, {"sha": "53b0275f95debc776f5a87312819a3fd36c9d5f3", "filename": "src/librustc/middle/typeck/check/writeback.rs", "status": "modified", "additions": 52, "deletions": 10, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/3ca7c225e5e2c907393e7e87660509cf877bffc8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ca7c225e5e2c907393e7e87660509cf877bffc8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs?ref=3ca7c225e5e2c907393e7e87660509cf877bffc8", "patch": "@@ -21,7 +21,8 @@ use middle::typeck::check::{FnCtxt, SelfInfo};\n use middle::typeck::infer::{force_all, resolve_all, resolve_region};\n use middle::typeck::infer::{resolve_type};\n use middle::typeck::infer;\n-use middle::typeck::method_map_entry;\n+use middle::typeck::{method_map_entry};\n+use middle::typeck::{vtable_origin, vtable_static, vtable_param};\n use middle::typeck::{vtable_param, write_substs_to_tcx};\n use middle::typeck::{write_ty_to_tcx};\n use util::ppaux;\n@@ -51,21 +52,60 @@ fn resolve_type_vars_in_type(fcx: @mut FnCtxt, sp: span, typ: ty::t)\n     }\n }\n \n+fn resolve_type_vars_in_types(fcx: @mut FnCtxt, sp: span, tys: &[ty::t])\n+                          -> ~[ty::t] {\n+    tys.map(|t| {\n+        match resolve_type_vars_in_type(fcx, sp, *t) {\n+            Some(t1) => t1,\n+            None => ty::mk_err(fcx.ccx.tcx)\n+        }\n+    })\n+}\n+\n fn resolve_method_map_entry(fcx: @mut FnCtxt, sp: span, id: ast::node_id) {\n     // Resolve any method map entry\n-    match fcx.ccx.method_map.find(&id) {\n+    match fcx.inh.method_map.find(&id) {\n         None => {}\n         Some(ref mme) => {\n             for resolve_type_vars_in_type(fcx, sp, mme.self_arg.ty).each |t| {\n                 let method_map = fcx.ccx.method_map;\n-                method_map.insert(id,\n-                                  method_map_entry {\n-                                    self_arg: arg {\n-                                        mode: mme.self_arg.mode,\n-                                        ty: *t\n-                                    },\n-                                    .. *mme\n-                                  });\n+                let new_entry = method_map_entry {\n+                    self_arg: arg {mode: mme.self_arg.mode, ty: *t },\n+                    ..*mme\n+                };\n+                debug!(\"writeback::resolve_method_map_entry(id=%?, \\\n+                        new_entry=%?)\",\n+                       id, new_entry);\n+                method_map.insert(id, new_entry);\n+            }\n+        }\n+    }\n+}\n+\n+fn resolve_vtable_map_entry(fcx: @mut FnCtxt, sp: span, id: ast::node_id) {\n+    // Resolve any method map entry\n+    match fcx.inh.vtable_map.find(&id) {\n+        None => {}\n+        Some(origins) => {\n+            let r_origins = @origins.map(|o| resolve_origin(fcx, sp, o));\n+            let vtable_map = fcx.ccx.vtable_map;\n+            vtable_map.insert(id, r_origins);\n+            debug!(\"writeback::resolve_vtable_map_entry(id=%d, vtables=%?)\",\n+                   id, r_origins.map(|v| v.to_str(fcx.tcx())));\n+        }\n+    }\n+\n+    fn resolve_origin(fcx: @mut FnCtxt,\n+                      sp: span,\n+                      origin: &vtable_origin) -> vtable_origin {\n+        match origin {\n+            &vtable_static(def_id, ref tys, origins) => {\n+                let r_tys = resolve_type_vars_in_types(fcx, sp, *tys);\n+                let r_origins = @origins.map(|o| resolve_origin(fcx, sp, o));\n+                vtable_static(def_id, r_tys, r_origins)\n+            }\n+            &vtable_param(n, b) => {\n+                vtable_param(n, b)\n             }\n         }\n     }\n@@ -185,6 +225,8 @@ fn visit_expr(e: @ast::expr, &&wbcx: @mut WbCtxt, v: wb_vt) {\n     resolve_type_vars_for_node(wbcx, e.span, e.id);\n     resolve_method_map_entry(wbcx.fcx, e.span, e.id);\n     resolve_method_map_entry(wbcx.fcx, e.span, e.callee_id);\n+    resolve_vtable_map_entry(wbcx.fcx, e.span, e.id);\n+    resolve_vtable_map_entry(wbcx.fcx, e.span, e.callee_id);\n     match e.node {\n       ast::expr_fn_block(ref decl, _) => {\n           for vec::each(decl.inputs) |input| {"}, {"sha": "a74ea5dff8ba02185b14171eaf4af2b60ae097ab", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3ca7c225e5e2c907393e7e87660509cf877bffc8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ca7c225e5e2c907393e7e87660509cf877bffc8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=3ca7c225e5e2c907393e7e87660509cf877bffc8", "patch": "@@ -42,7 +42,8 @@ use middle::typeck::astconv;\n use middle::typeck::infer;\n use middle::typeck::rscope::*;\n use middle::typeck::rscope;\n-use middle::typeck::{CrateCtxt, lookup_def_tcx, no_params, write_ty_to_tcx};\n+use middle::typeck::{CrateCtxt, lookup_def_tcx, no_params, write_ty_to_tcx,\n+                     write_tpt_to_tcx};\n use util::common::{indenter, pluralize};\n use util::ppaux;\n \n@@ -807,8 +808,10 @@ pub fn instantiate_trait_ref(ccx: &CrateCtxt, t: @ast::trait_ref,\n \n     match lookup_def_tcx(ccx.tcx, t.path.span, t.ref_id) {\n       ast::def_ty(t_id) => {\n-        let tpt = astconv::ast_path_to_ty(ccx, &rscope, t_id, t.path,\n-                                          t.ref_id);\n+        let tpt = astconv::ast_path_to_ty(ccx, &rscope, t_id, t.path);\n+\n+        write_tpt_to_tcx(ccx.tcx, t.ref_id, &tpt);\n+\n         match ty::get(tpt.ty).sty {\n            ty::ty_trait(*) => {\n               (t_id, tpt)"}, {"sha": "a5265deafdde981a6afe05fbaa4e4c0fb38f6027", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3ca7c225e5e2c907393e7e87660509cf877bffc8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ca7c225e5e2c907393e7e87660509cf877bffc8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=3ca7c225e5e2c907393e7e87660509cf877bffc8", "patch": "@@ -142,6 +142,7 @@ pub enum vtable_origin {\n       vtable_res is the vtable itself\n      */\n     vtable_static(ast::def_id, ~[ty::t], vtable_res),\n+\n     /*\n       Dynamic vtable, comes from a parameter that has a bound on it:\n       fn foo<T:quux,baz,bar>(a: T) -- a's vtable would have a\n@@ -184,6 +185,7 @@ pub struct CrateCtxt {\n // Functions that write types into the node type table\n pub fn write_ty_to_tcx(tcx: ty::ctxt, node_id: ast::node_id, ty: ty::t) {\n     debug!(\"write_ty_to_tcx(%d, %s)\", node_id, ppaux::ty_to_str(tcx, ty));\n+    fail_unless!(!ty::type_needs_infer(ty));\n     tcx.node_types.insert(node_id as uint, ty);\n }\n pub fn write_substs_to_tcx(tcx: ty::ctxt,\n@@ -192,9 +194,18 @@ pub fn write_substs_to_tcx(tcx: ty::ctxt,\n     if substs.len() > 0u {\n         debug!(\"write_substs_to_tcx(%d, %?)\", node_id,\n                substs.map(|t| ppaux::ty_to_str(tcx, *t)));\n+        fail_unless!(substs.all(|t| !ty::type_needs_infer(*t)));\n         tcx.node_type_substs.insert(node_id, substs);\n     }\n }\n+pub fn write_tpt_to_tcx(tcx: ty::ctxt,\n+                        node_id: ast::node_id,\n+                        tpt: &ty::ty_param_substs_and_ty) {\n+    write_ty_to_tcx(tcx, node_id, tpt.ty);\n+    if !tpt.substs.tps.is_empty() {\n+        write_substs_to_tcx(tcx, node_id, copy tpt.substs.tps);\n+    }\n+}\n \n pub fn lookup_def_tcx(tcx: ty::ctxt, sp: span, id: ast::node_id) -> ast::def {\n     match tcx.def_map.find(&id) {"}, {"sha": "f24875cbf8e0b0c17d9fa57413564dcd06aa2c37", "filename": "src/test/run-pass/issue-4036.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3ca7c225e5e2c907393e7e87660509cf877bffc8/src%2Ftest%2Frun-pass%2Fissue-4036.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ca7c225e5e2c907393e7e87660509cf877bffc8/src%2Ftest%2Frun-pass%2Fissue-4036.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4036.rs?ref=3ca7c225e5e2c907393e7e87660509cf877bffc8", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Issue #4036: Test for an issue that arose around fixing up type inference\n+// byproducts in vtable records.\n+\n+extern mod std;\n+use self::std::json;\n+use self::std::serialize;\n+\n+pub fn main() {\n+    let json = json::from_str(\"[1]\").unwrap();\n+    let _x: ~[int] = serialize::Decodable::decode(&json::Decoder(json));\n+}"}]}