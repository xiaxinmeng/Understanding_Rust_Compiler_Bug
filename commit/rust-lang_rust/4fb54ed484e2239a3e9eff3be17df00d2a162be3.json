{"sha": "4fb54ed484e2239a3e9eff3be17df00d2a162be3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmYjU0ZWQ0ODRlMjIzOWEzZTllZmYzYmUxN2RmMDBkMmExNjJiZTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-14T10:37:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-14T10:37:36Z"}, "message": "Auto merge of #73089 - tmiasko:musl-1.1.24, r=kennytm\n\nUpdate musl to 1.1.24\n\nRelease notes since previous version 1.1.22:\n\n## 1.1.23 release notes\n\n### new features:\n- riscv64 port\n- configure now allows customizing AR and RANLIB vars\n- header-level support for new linux features in 5.1\n\n### major internal changes:\n- removed extern __syscall; syscall header code is now fully self-contained\n\n### performance:\n- new math library implementation for log/exp/pow\n- aarch64 dynamic tlsdesc function is streamlined\n\n### compatibility & conformance:\n- O_TTY_INIT is now defined\n- sys/types.h no longer pollutes namespace with sys/sysmacros.h in any profile\n- powerpc asm is now compatible with clang internal assembler\n\n### changes for new POSIX interpretations:\n- fgetwc now sets stream error indicator on encoding errors\n- fmemopen no longer rejects 0 size\n\n### bugs fixed:\n- static TLS for shared libraries was allocated wrong on \"Variant I\" archs\n- crash in dladdr reading through uninitialized pointer on non-match\n- sigaltstack wrongly errored out on invalid ss_size when doing SS_DISABLE\n- getdents function misbehaved with buffer length larger than INT_MAX\n- set*id could deadlock after fork from multithreaded process\n\n### arch-specfic bugs fixed:\n- s390x SO_PEERSEC definition was wrong\n- passing of 64-bit syscall arguments was broken on microblaze\n- posix_fadvise was broken on mips due to missing 7-arg syscall support\n- vrregset_t layout and member naming was wrong on powerpc64\n\n## 1.1.24 release notes\n\n### new features:\n- GLOB_TILDE extension to glob\n- non-stub catgets localization API, using netbsd binary catalog format\n- posix_spawn file actions for [f]chdir (extension, pending future standard)\n- secure_getenv function (extension)\n- copy_file_range syscall wrapper (Linux extension)\n- header-level support for new linux features in 5.2\n\n### performance:\n- new fast path for lrint (generic C version) on 32-bit archs\n\n### major internal changes:\n- functions involving time are overhauled to be time64-ready in 32-bit archs\n- x32 uses the new time64 code paths to replace nasty hacks in syscall glue\n\n### compatibility & conformance:\n- support for powerpc[64] unaligned relocation types\n- powerpc[64] and sh sys/user.h no longer clash with kernel asm/ptrace.h\n- select no longer modifies timeout on failure (or at all)\n- mips64 stat results are no longer limited to 32-bit time range\n- optreset (BSD extension) now has a public declaration\n- support for clang inconsistencies in wchar_t type vs some 32-bit archs\n- mips r6 syscall asm no longer has invalid lo/hi register clobbers\n- vestigial asm declarations of __tls_get_new are removed (broke some tooling)\n- riscv64 mcontext_t mismatch glibc's member naming is corrected\n\n### bugs fixed:\n- glob failed to match broken symlinks consistently\n- invalid use of interposed calloc to allocate initial TLS\n- various dlsym symbol resolution logic errors\n- semctl with SEM_STAT_ANY didn't work\n- pthread_create with explicit scheduling was subject to priority inversion\n- pthread_create failure path had data race for thread count\n- timer_create with SIGEV_THREAD notification had data race getting timer id\n- wide printf family failed to support l modifier for float formats\n\n### arch-specific bugs fixed:\n- x87 floating point stack imbalance in math asm (i386-only CVE-2019-14697)\n- x32 clock_adjtime, getrusage, wait3, wait4 produced junk (struct mismatches)\n- lseek broken on x32 and mipsn32 with large file offsets\n- riscv64 atomics weren't compiler barriers\n- riscv64 atomics had broken asm constraints (missing earlyclobber flag)\n- arm clone() was broken when compiled as thumb if start function returned\n- mipsr6 setjmp/longjmp did not preserve fpu register state correctly\n\nFixes #71099.", "tree": {"sha": "574136b61233e0319e3949823b3abde6e92ec278", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/574136b61233e0319e3949823b3abde6e92ec278"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fb54ed484e2239a3e9eff3be17df00d2a162be3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fb54ed484e2239a3e9eff3be17df00d2a162be3", "html_url": "https://github.com/rust-lang/rust/commit/4fb54ed484e2239a3e9eff3be17df00d2a162be3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fb54ed484e2239a3e9eff3be17df00d2a162be3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10326d804e42022dee3de11e7a55b94028450f53", "url": "https://api.github.com/repos/rust-lang/rust/commits/10326d804e42022dee3de11e7a55b94028450f53", "html_url": "https://github.com/rust-lang/rust/commit/10326d804e42022dee3de11e7a55b94028450f53"}, {"sha": "9d01cd1df63766b249b6f68d128858713f9dc41f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d01cd1df63766b249b6f68d128858713f9dc41f", "html_url": "https://github.com/rust-lang/rust/commit/9d01cd1df63766b249b6f68d128858713f9dc41f"}], "stats": {"total": 12, "additions": 7, "deletions": 5}, "files": [{"sha": "1ae412340cb114e09c675b2ad92521d108a0526e", "filename": "src/ci/docker/scripts/musl-toolchain.sh", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4fb54ed484e2239a3e9eff3be17df00d2a162be3/src%2Fci%2Fdocker%2Fscripts%2Fmusl-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/4fb54ed484e2239a3e9eff3be17df00d2a162be3/src%2Fci%2Fdocker%2Fscripts%2Fmusl-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Fmusl-toolchain.sh?ref=4fb54ed484e2239a3e9eff3be17df00d2a162be3", "patch": "@@ -3,7 +3,7 @@\n #\n # Versions of the toolchain components are configurable in `musl-cross-make/Makefile` and\n # musl unlike GLIBC is forward compatible so upgrading it shouldn't break old distributions.\n-# Right now we have: Binutils 2.27, GCC 6.4.0, musl 1.1.22.\n+# Right now we have: Binutils 2.31.1, GCC 9.2.0, musl 1.1.24.\n set -ex\n \n hide_output() {\n@@ -33,11 +33,13 @@ shift\n # Apparently applying `-fPIC` everywhere allows them to link successfully.\n export CFLAGS=\"-fPIC $CFLAGS\"\n \n-git clone https://github.com/richfelker/musl-cross-make -b v0.9.8\n+git clone https://github.com/richfelker/musl-cross-make # -b v0.9.9\n cd musl-cross-make\n+# A few commits ahead of v0.9.9 to include the cowpatch fix:\n+git checkout a54eb56f33f255dfca60be045f12a5cfaf5a72a9\n \n-hide_output make -j$(nproc) TARGET=$TARGET\n-hide_output make install TARGET=$TARGET OUTPUT=$OUTPUT\n+hide_output make -j$(nproc) TARGET=$TARGET MUSL_VER=1.1.24\n+hide_output make install TARGET=$TARGET MUSL_VER=1.1.24 OUTPUT=$OUTPUT\n \n cd -\n "}, {"sha": "58393a5719a10d4854eaf7ce5aa151c3608df13a", "filename": "src/ci/docker/scripts/musl.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fb54ed484e2239a3e9eff3be17df00d2a162be3/src%2Fci%2Fdocker%2Fscripts%2Fmusl.sh", "raw_url": "https://github.com/rust-lang/rust/raw/4fb54ed484e2239a3e9eff3be17df00d2a162be3/src%2Fci%2Fdocker%2Fscripts%2Fmusl.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Fmusl.sh?ref=4fb54ed484e2239a3e9eff3be17df00d2a162be3", "patch": "@@ -24,7 +24,7 @@ shift\n # Apparently applying `-fPIC` everywhere allows them to link successfully.\n export CFLAGS=\"-fPIC $CFLAGS\"\n \n-MUSL=musl-1.1.22\n+MUSL=musl-1.1.24\n \n # may have been downloaded in a previous run\n if [ ! -d $MUSL ]; then"}]}