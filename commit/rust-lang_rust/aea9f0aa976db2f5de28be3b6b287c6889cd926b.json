{"sha": "aea9f0aa976db2f5de28be3b6b287c6889cd926b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlYTlmMGFhOTc2ZGIyZjVkZTI4YmUzYjZiMjg3YzY4ODljZDkyNmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-14T23:00:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-14T23:00:50Z"}, "message": "Auto merge of #57607 - Centril:rollup, r=Centril\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #57043 (Fix poor worst case performance of set intersection)\n - #57480 (Clean up and fix a bug in query plumbing)\n - #57481 (provide suggestion for invalid boolean cast)\n - #57540 (Modify some parser diagnostics to continue evaluating beyond the parser)\n - #57570 (Querify local `plugin_registrar_fn` and `proc_macro_decls_static`)\n - #57572 (Unaccept `extern_in_paths`)\n - #57585 (Recover from item trailing semicolon)\n - #57589 (Add a debug_assert to Vec::set_len)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "1f45e79c5694619f8b0ea8a4652abce5a2c49a52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f45e79c5694619f8b0ea8a4652abce5a2c49a52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aea9f0aa976db2f5de28be3b6b287c6889cd926b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aea9f0aa976db2f5de28be3b6b287c6889cd926b", "html_url": "https://github.com/rust-lang/rust/commit/aea9f0aa976db2f5de28be3b6b287c6889cd926b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aea9f0aa976db2f5de28be3b6b287c6889cd926b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03acbd71c977cd63ce5f39ba9b6fe9ffd578785a", "url": "https://api.github.com/repos/rust-lang/rust/commits/03acbd71c977cd63ce5f39ba9b6fe9ffd578785a", "html_url": "https://github.com/rust-lang/rust/commit/03acbd71c977cd63ce5f39ba9b6fe9ffd578785a"}, {"sha": "8a62e393b8fba95e989020f2efbf846ca02113f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a62e393b8fba95e989020f2efbf846ca02113f9", "html_url": "https://github.com/rust-lang/rust/commit/8a62e393b8fba95e989020f2efbf846ca02113f9"}], "stats": {"total": 1211, "additions": 715, "deletions": 496}, "files": [{"sha": "9979d7742291e50f35e6ce7cf2a1ea2cb89d4d27", "filename": "src/doc/unstable-book/src/language-features/extern-in-paths.md", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/03acbd71c977cd63ce5f39ba9b6fe9ffd578785a/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fextern-in-paths.md", "raw_url": "https://github.com/rust-lang/rust/raw/03acbd71c977cd63ce5f39ba9b6fe9ffd578785a/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fextern-in-paths.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fextern-in-paths.md?ref=03acbd71c977cd63ce5f39ba9b6fe9ffd578785a", "patch": "@@ -1,40 +0,0 @@\n-# `extern_in_paths`\n-\n-The tracking issue for this feature is: [#44660]\n-\n-[#44660]: https://github.com/rust-lang/rust/issues/44660\n-\n-------------------------\n-\n-The `extern_in_paths` feature allows to refer to names from other crates \"inline\", without\n-introducing `extern crate` items, using keyword `extern`.\n-\n-For example, `extern::my_crat::a::b` will resolve to path `a::b` in crate `my_crate`.\n-\n-Absolute paths on 2018 edition (e.g. `::my_crate::a::b`) provide the same effect\n-and resolve to extern crates (built-in or passed with `--extern`).\n-\n-```rust,ignore\n-#![feature(extern_in_paths)]\n-\n-// Suppose we have a dependency crate `xcrate` available through `Cargo.toml`, or `--extern`\n-// options, or standard Rust distribution, or some other means.\n-\n-use extern::xcrate::Z;\n-\n-fn f() {\n-    use extern::xcrate;\n-    use extern::xcrate as ycrate;\n-    let s = xcrate::S;\n-    assert_eq!(format!(\"{:?}\", s), \"S\");\n-    let z = ycrate::Z;\n-    assert_eq!(format!(\"{:?}\", z), \"Z\");\n-}\n-\n-fn main() {\n-    let s = extern::xcrate::S;\n-    assert_eq!(format!(\"{:?}\", s), \"S\");\n-    let z = Z;\n-    assert_eq!(format!(\"{:?}\", z), \"Z\");\n-}\n-```"}, {"sha": "ba3b3dfbfc2e16313aa58aa09d20ea05a8795547", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -819,6 +819,8 @@ impl<T> Vec<T> {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub unsafe fn set_len(&mut self, new_len: usize) {\n+        debug_assert!(new_len <= self.capacity());\n+\n         self.len = new_len;\n     }\n "}, {"sha": "9168bbf907f1e151659f2b6f06cd6859687eef70", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -140,7 +140,7 @@ pub enum ExternCrateSource {\n     ),\n     // Crate is loaded by `use`.\n     Use,\n-    /// Crate is implicitly loaded by an absolute or an `extern::` path.\n+    /// Crate is implicitly loaded by an absolute path.\n     Path,\n }\n "}, {"sha": "7363b8b3a78fa89aedf9288ddee6b78489fa3615", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -69,8 +69,6 @@ pub struct Session {\n     pub parse_sess: ParseSess,\n     /// For a library crate, this is always none\n     pub entry_fn: Once<Option<(NodeId, Span, config::EntryFnType)>>,\n-    pub plugin_registrar_fn: Once<Option<ast::NodeId>>,\n-    pub proc_macro_decls_static: Once<Option<ast::NodeId>>,\n     pub sysroot: PathBuf,\n     /// The name of the root source file of the crate, in the local file system.\n     /// `None` means that there is no source file.\n@@ -1177,8 +1175,6 @@ pub fn build_session_(\n         parse_sess: p_s,\n         // For a library crate, this is always none\n         entry_fn: Once::new(),\n-        plugin_registrar_fn: Once::new(),\n-        proc_macro_decls_static: Once::new(),\n         sysroot,\n         local_crate_source_file,\n         working_dir,"}, {"sha": "562cd75a75ff4ac423027ac787ac136114f3bc06", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -402,7 +402,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         // expensive for some DepKinds.\n         if !self.dep_graph.is_fully_enabled() {\n             let null_dep_node = DepNode::new_no_params(::dep_graph::DepKind::Null);\n-            return self.force_query_with_job::<Q>(key, job, null_dep_node).map(|(v, _)| v);\n+            return Ok(self.force_query_with_job::<Q>(key, job, null_dep_node).0);\n         }\n \n         let dep_node = Q::to_dep_node(self, &key);\n@@ -436,20 +436,18 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n         if !dep_node.kind.is_input() {\n             if let Some(dep_node_index) = self.try_mark_green_and_read(&dep_node) {\n-                return self.load_from_disk_and_cache_in_memory::<Q>(key,\n-                                                                    job,\n-                                                                    dep_node_index,\n-                                                                    &dep_node)\n+                return Ok(self.load_from_disk_and_cache_in_memory::<Q>(\n+                    key,\n+                    job,\n+                    dep_node_index,\n+                    &dep_node\n+                ))\n             }\n         }\n \n-        match self.force_query_with_job::<Q>(key, job, dep_node) {\n-            Ok((result, dep_node_index)) => {\n-                self.dep_graph.read_index(dep_node_index);\n-                Ok(result)\n-            }\n-            Err(e) => Err(e)\n-        }\n+        let (result, dep_node_index) = self.force_query_with_job::<Q>(key, job, dep_node);\n+        self.dep_graph.read_index(dep_node_index);\n+        Ok(result)\n     }\n \n     fn load_from_disk_and_cache_in_memory<Q: QueryDescription<'gcx>>(\n@@ -458,7 +456,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         job: JobOwner<'a, 'gcx, Q>,\n         dep_node_index: DepNodeIndex,\n         dep_node: &DepNode\n-    ) -> Result<Q::Value, Box<CycleError<'gcx>>>\n+    ) -> Q::Value\n     {\n         // Note this function can be called concurrently from the same query\n         // We must ensure that this is handled correctly\n@@ -523,7 +521,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n         job.complete(&result, dep_node_index);\n \n-        Ok(result)\n+        result\n     }\n \n     #[inline(never)]\n@@ -563,7 +561,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         key: Q::Key,\n         job: JobOwner<'_, 'gcx, Q>,\n         dep_node: DepNode)\n-    -> Result<(Q::Value, DepNodeIndex), Box<CycleError<'gcx>>> {\n+    -> (Q::Value, DepNodeIndex) {\n         // If the following assertion triggers, it can have two reasons:\n         // 1. Something is wrong with DepNode creation, either here or\n         //    in DepGraph::try_mark_green()\n@@ -610,7 +608,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n         job.complete(&result, dep_node_index);\n \n-        Ok((result, dep_node_index))\n+        (result, dep_node_index)\n     }\n \n     /// Ensure that either this query has all green inputs or been executed.\n@@ -657,11 +655,14 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         // Ensure that only one of them runs the query\n         let job = match JobOwner::try_get(self, span, &key) {\n             TryGetJob::NotYetStarted(job) => job,\n-            TryGetJob::JobCompleted(_) => return,\n+            TryGetJob::JobCompleted(result) => {\n+                if let Err(e) = result {\n+                    self.report_cycle(e).emit();\n+                }\n+                return\n+            }\n         };\n-        if let Err(e) = self.force_query_with_job::<Q>(key, job, dep_node) {\n-            self.report_cycle(e).emit();\n-        }\n+        self.force_query_with_job::<Q>(key, job, dep_node);\n     }\n \n     pub(super) fn try_get_query<Q: QueryDescription<'gcx>>("}, {"sha": "bf69089a254a4feb0e9f19e42269e684d77a79ba", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -147,14 +147,12 @@ fn reachable_non_generics_provider<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         })\n         .collect();\n \n-    if let Some(id) = *tcx.sess.proc_macro_decls_static.get() {\n-        let def_id = tcx.hir().local_def_id(id);\n-        reachable_non_generics.insert(def_id, SymbolExportLevel::C);\n+    if let Some(id) = tcx.proc_macro_decls_static(LOCAL_CRATE) {\n+        reachable_non_generics.insert(id, SymbolExportLevel::C);\n     }\n \n-    if let Some(id) = *tcx.sess.plugin_registrar_fn.get() {\n-        let def_id = tcx.hir().local_def_id(id);\n-        reachable_non_generics.insert(def_id, SymbolExportLevel::C);\n+    if let Some(id) = tcx.plugin_registrar_fn(LOCAL_CRATE) {\n+        reachable_non_generics.insert(id, SymbolExportLevel::C);\n     }\n \n     Lrc::new(reachable_non_generics)"}, {"sha": "9267f14f2423456e7de2dc19a023d10b2b55a271", "filename": "src/librustc_codegen_utils/symbol_names.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -242,12 +242,12 @@ fn compute_symbol_name<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, instance: Instance\n \n     let node_id = tcx.hir().as_local_node_id(def_id);\n \n-    if let Some(id) = node_id {\n-        if *tcx.sess.plugin_registrar_fn.get() == Some(id) {\n+    if def_id.is_local() {\n+        if tcx.plugin_registrar_fn(LOCAL_CRATE) == Some(def_id) {\n             let disambiguator = tcx.sess.local_crate_disambiguator();\n             return tcx.sess.generate_plugin_registrar_symbol(disambiguator);\n         }\n-        if *tcx.sess.proc_macro_decls_static.get() == Some(id) {\n+        if tcx.proc_macro_decls_static(LOCAL_CRATE) == Some(def_id) {\n             let disambiguator = tcx.sess.local_crate_disambiguator();\n             return tcx.sess.generate_proc_macro_decls_symbol(disambiguator);\n         }"}, {"sha": "3b7de37ae4b3f3f474dd6ea9c1b076f28f480b0d", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -1158,6 +1158,8 @@ where\n }\n \n pub fn default_provide(providers: &mut ty::query::Providers) {\n+    proc_macro_decls::provide(providers);\n+    plugin::build::provide(providers);\n     hir::provide(providers);\n     borrowck::provide(providers);\n     mir::provide(providers);\n@@ -1212,13 +1214,6 @@ where\n         middle::entry::find_entry_point(sess, &hir_map, name)\n     });\n \n-    sess.plugin_registrar_fn\n-        .set(time(sess, \"looking for plugin registrar\", || {\n-            plugin::build::find_plugin_registrar(sess.diagnostic(), &hir_map)\n-        }));\n-    sess.proc_macro_decls_static\n-        .set(proc_macro_decls::find(&hir_map));\n-\n     let mut local_providers = ty::query::Providers::default();\n     default_provide(&mut local_providers);\n     codegen_backend.provide(&mut local_providers);\n@@ -1248,6 +1243,14 @@ where\n             // tcx available.\n             time(sess, \"dep graph tcx init\", || rustc_incremental::dep_graph_tcx_init(tcx));\n \n+            time(sess, \"looking for plugin registrar\", || {\n+                plugin::build::find_plugin_registrar(tcx)\n+            });\n+\n+            time(sess, \"looking for derive registrar\", || {\n+                proc_macro_decls::find(tcx)\n+            });\n+\n             time(sess, \"loop checking\", || loops::check_crate(tcx));\n \n             time(sess, \"attribute checking\", || {"}, {"sha": "093d15b7e3c577c4c9212bf4b1b658ff21057708", "filename": "src/librustc_driver/proc_macro_decls.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Flibrustc_driver%2Fproc_macro_decls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Flibrustc_driver%2Fproc_macro_decls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fproc_macro_decls.rs?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -1,15 +1,25 @@\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n-use rustc::hir::map::Map;\n+use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc::hir;\n+use rustc::ty::TyCtxt;\n+use rustc::ty::query::Providers;\n use syntax::ast;\n use syntax::attr;\n \n-pub fn find(hir_map: &Map) -> Option<ast::NodeId> {\n-    let krate = hir_map.krate();\n+pub fn find<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>) -> Option<DefId> {\n+    tcx.proc_macro_decls_static(LOCAL_CRATE)\n+}\n+\n+fn proc_macro_decls_static<'tcx>(\n+    tcx: TyCtxt<'_, 'tcx, 'tcx>,\n+    cnum: CrateNum,\n+) -> Option<DefId> {\n+    assert_eq!(cnum, LOCAL_CRATE);\n \n     let mut finder = Finder { decls: None };\n-    krate.visit_all_item_likes(&mut finder);\n-    finder.decls\n+    tcx.hir().krate().visit_all_item_likes(&mut finder);\n+\n+    finder.decls.map(|id| tcx.hir().local_def_id(id))\n }\n \n struct Finder {\n@@ -30,3 +40,9 @@ impl<'v> ItemLikeVisitor<'v> for Finder {\n     }\n }\n \n+pub(crate) fn provide(providers: &mut Providers<'_>) {\n+    *providers = Providers {\n+        proc_macro_decls_static,\n+        ..*providers\n+    };\n+}"}, {"sha": "72bcf8edfdd2183585be10f7d3da9e9c9217c55c", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -19,7 +19,7 @@\n //! a `pub fn new()`.\n \n use rustc::hir::def::Def;\n-use rustc::hir::def_id::DefId;\n+use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::ty::{self, Ty};\n use hir::Node;\n use util::nodemap::NodeSet;\n@@ -860,7 +860,7 @@ impl LintPass for PluginAsLibrary {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for PluginAsLibrary {\n     fn check_item(&mut self, cx: &LateContext, it: &hir::Item) {\n-        if cx.sess().plugin_registrar_fn.get().is_some() {\n+        if cx.tcx.plugin_registrar_fn(LOCAL_CRATE).is_some() {\n             // We're compiling a plugin; it's fine to link other plugins.\n             return;\n         }"}, {"sha": "2de1637fb0d9d11e24e47757a8305d6f3d975af8", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -482,13 +482,10 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             has_global_allocator: has_global_allocator,\n             has_panic_handler: has_panic_handler,\n             has_default_lib_allocator: has_default_lib_allocator,\n-            plugin_registrar_fn: tcx.sess\n-                .plugin_registrar_fn\n-                .get()\n-                .map(|id| tcx.hir().local_def_id(id).index),\n+            plugin_registrar_fn: tcx.plugin_registrar_fn(LOCAL_CRATE).map(|id| id.index),\n             proc_macro_decls_static: if is_proc_macro {\n-                let id = tcx.sess.proc_macro_decls_static.get().unwrap();\n-                Some(tcx.hir().local_def_id(id).index)\n+                let id = tcx.proc_macro_decls_static(LOCAL_CRATE).unwrap();\n+                Some(id.index)\n             } else {\n                 None\n             },"}, {"sha": "46c452668c3c8b509f6e26a6ce383b4de969527a", "filename": "src/librustc_plugin/build.rs", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Flibrustc_plugin%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Flibrustc_plugin%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fbuild.rs?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -2,11 +2,12 @@\n \n use syntax::ast;\n use syntax::attr;\n-use errors;\n use syntax_pos::Span;\n-use rustc::hir::map::Map;\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir;\n+use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n+use rustc::ty::TyCtxt;\n+use rustc::ty::query::Providers;\n \n struct RegistrarFinder {\n     registrars: Vec<(ast::NodeId, Span)> ,\n@@ -30,21 +31,27 @@ impl<'v> ItemLikeVisitor<'v> for RegistrarFinder {\n }\n \n /// Find the function marked with `#[plugin_registrar]`, if any.\n-pub fn find_plugin_registrar(diagnostic: &errors::Handler,\n-                             hir_map: &Map)\n-                             -> Option<ast::NodeId> {\n-    let krate = hir_map.krate();\n+pub fn find_plugin_registrar<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>) -> Option<DefId> {\n+    tcx.plugin_registrar_fn(LOCAL_CRATE)\n+}\n+\n+fn plugin_registrar_fn<'tcx>(\n+    tcx: TyCtxt<'_, 'tcx, 'tcx>,\n+    cnum: CrateNum,\n+) -> Option<DefId> {\n+    assert_eq!(cnum, LOCAL_CRATE);\n \n     let mut finder = RegistrarFinder { registrars: Vec::new() };\n-    krate.visit_all_item_likes(&mut finder);\n+    tcx.hir().krate().visit_all_item_likes(&mut finder);\n \n     match finder.registrars.len() {\n         0 => None,\n         1 => {\n             let (node_id, _) = finder.registrars.pop().unwrap();\n-            Some(node_id)\n+            Some(tcx.hir().local_def_id(node_id))\n         },\n         _ => {\n+            let diagnostic = tcx.sess.diagnostic();\n             let mut e = diagnostic.struct_err(\"multiple plugin registration functions found\");\n             for &(_, span) in &finder.registrars {\n                 e.span_note(span, \"one is here\");\n@@ -55,3 +62,11 @@ pub fn find_plugin_registrar(diagnostic: &errors::Handler,\n         }\n     }\n }\n+\n+\n+pub fn provide(providers: &mut Providers<'_>) {\n+    *providers = Providers {\n+        plugin_registrar_fn,\n+        ..*providers\n+    };\n+}"}, {"sha": "a25009ccfb49cc4dbc18cf6bf2261adcdebceb5c", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -1015,7 +1015,7 @@ enum ModuleOrUniformRoot<'a> {\n     CrateRootAndExternPrelude,\n \n     /// Virtual module that denotes resolution in extern prelude.\n-    /// Used for paths starting with `::` on 2018 edition or `extern::`.\n+    /// Used for paths starting with `::` on 2018 edition.\n     ExternPrelude,\n \n     /// Virtual module that denotes resolution in current scope.\n@@ -3836,8 +3836,7 @@ impl<'a> Resolver<'a> {\n                             self.resolve_self(&mut ctxt, self.current_module)));\n                         continue;\n                     }\n-                    if name == keywords::Extern.name() ||\n-                       name == keywords::PathRoot.name() && ident.span.rust_2018() {\n+                    if name == keywords::PathRoot.name() && ident.span.rust_2018() {\n                         module = Some(ModuleOrUniformRoot::ExternPrelude);\n                         continue;\n                     }\n@@ -4004,8 +4003,8 @@ impl<'a> Resolver<'a> {\n         };\n \n         // We're only interested in `use` paths which should start with\n-        // `{{root}}` or `extern` currently.\n-        if first_name != keywords::Extern.name() && first_name != keywords::PathRoot.name() {\n+        // `{{root}}` currently.\n+        if first_name != keywords::PathRoot.name() {\n             return\n         }\n "}, {"sha": "3f185ba194903f068cd8e7571b18239f8bc30c8d", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -257,10 +257,28 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n                     .emit();\n             }\n             CastError::CastToBool => {\n-                struct_span_err!(fcx.tcx.sess, self.span, E0054, \"cannot cast as `bool`\")\n-                    .span_label(self.span, \"unsupported cast\")\n-                    .help(\"compare with zero instead\")\n-                    .emit();\n+                let mut err =\n+                    struct_span_err!(fcx.tcx.sess, self.span, E0054, \"cannot cast as `bool`\");\n+\n+                if self.expr_ty.is_numeric() {\n+                    match fcx.tcx.sess.source_map().span_to_snippet(self.expr.span) {\n+                        Ok(snippet) => {\n+                            err.span_suggestion_with_applicability(\n+                                self.span,\n+                                \"compare with zero instead\",\n+                                format!(\"{} != 0\", snippet),\n+                                Applicability::MachineApplicable,\n+                            );\n+                        }\n+                        Err(_) => {\n+                            err.span_help(self.span, \"compare with zero instead\");\n+                        }\n+                    }\n+                } else {\n+                    err.span_label(self.span, \"unsupported cast\");\n+                }\n+\n+                err.emit();\n             }\n             CastError::CastToChar => {\n                 type_error_struct!(fcx.tcx.sess, self.span, self.expr_ty, E0604,"}, {"sha": "c55dd049ec60fd15ca924349e78042f31cd3ae85", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 60, "deletions": 7, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -410,9 +410,16 @@ impl<T, S> HashSet<T, S>\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn intersection<'a>(&'a self, other: &'a HashSet<T, S>) -> Intersection<'a, T, S> {\n-        Intersection {\n-            iter: self.iter(),\n-            other,\n+        if self.len() <= other.len() {\n+            Intersection {\n+                iter: self.iter(),\n+                other,\n+            }\n+        } else {\n+            Intersection {\n+                iter: other.iter(),\n+                other: self,\n+            }\n         }\n     }\n \n@@ -436,7 +443,15 @@ impl<T, S> HashSet<T, S>\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn union<'a>(&'a self, other: &'a HashSet<T, S>) -> Union<'a, T, S> {\n-        Union { iter: self.iter().chain(other.difference(self)) }\n+        if self.len() <= other.len() {\n+            Union {\n+                iter: self.iter().chain(other.difference(self)),\n+            }\n+        } else {\n+            Union {\n+                iter: other.iter().chain(self.difference(other)),\n+            }\n+        }\n     }\n \n     /// Returns the number of elements in the set.\n@@ -584,7 +599,11 @@ impl<T, S> HashSet<T, S>\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn is_disjoint(&self, other: &HashSet<T, S>) -> bool {\n-        self.iter().all(|v| !other.contains(v))\n+        if self.len() <= other.len() {\n+            self.iter().all(|v| !other.contains(v))\n+        } else {\n+            other.iter().all(|v| !self.contains(v))\n+        }\n     }\n \n     /// Returns `true` if the set is a subset of another,\n@@ -1494,6 +1513,7 @@ mod test_set {\n     fn test_intersection() {\n         let mut a = HashSet::new();\n         let mut b = HashSet::new();\n+        assert!(a.intersection(&b).next().is_none());\n \n         assert!(a.insert(11));\n         assert!(a.insert(1));\n@@ -1518,6 +1538,22 @@ mod test_set {\n             i += 1\n         }\n         assert_eq!(i, expected.len());\n+\n+        assert!(a.insert(9)); // make a bigger than b\n+\n+        i = 0;\n+        for x in a.intersection(&b) {\n+            assert!(expected.contains(x));\n+            i += 1\n+        }\n+        assert_eq!(i, expected.len());\n+\n+        i = 0;\n+        for x in b.intersection(&a) {\n+            assert!(expected.contains(x));\n+            i += 1\n+        }\n+        assert_eq!(i, expected.len());\n     }\n \n     #[test]\n@@ -1573,11 +1609,11 @@ mod test_set {\n     fn test_union() {\n         let mut a = HashSet::new();\n         let mut b = HashSet::new();\n+        assert!(a.union(&b).next().is_none());\n+        assert!(b.union(&a).next().is_none());\n \n         assert!(a.insert(1));\n         assert!(a.insert(3));\n-        assert!(a.insert(5));\n-        assert!(a.insert(9));\n         assert!(a.insert(11));\n         assert!(a.insert(16));\n         assert!(a.insert(19));\n@@ -1597,6 +1633,23 @@ mod test_set {\n             i += 1\n         }\n         assert_eq!(i, expected.len());\n+\n+        assert!(a.insert(9)); // make a bigger than b\n+        assert!(a.insert(5));\n+\n+        i = 0;\n+        for x in a.union(&b) {\n+            assert!(expected.contains(x));\n+            i += 1\n+        }\n+        assert_eq!(i, expected.len());\n+\n+        i = 0;\n+        for x in b.union(&a) {\n+            assert!(expected.contains(x));\n+            i += 1\n+        }\n+        assert_eq!(i, expected.len());\n     }\n \n     #[test]"}, {"sha": "ed278e834cbc7adee9b03ce9f9669ef33555e04b", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 5, "deletions": 24, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -25,9 +25,9 @@ use syntax_pos::{Span, DUMMY_SP};\n use errors::{DiagnosticBuilder, Handler};\n use visit::{self, FnKind, Visitor};\n use parse::ParseSess;\n-use symbol::{keywords, Symbol};\n+use symbol::Symbol;\n \n-use std::{env};\n+use std::env;\n \n macro_rules! set {\n     ($field: ident) => {{\n@@ -372,9 +372,6 @@ declare_features! (\n     // Generic associated types (RFC 1598)\n     (active, generic_associated_types, \"1.23.0\", Some(44265), None),\n \n-    // `extern` in paths\n-    (active, extern_in_paths, \"1.23.0\", Some(55600), None),\n-\n     // Infer static outlives requirements (RFC 2093).\n     (active, infer_static_outlives_requirements, \"1.26.0\", Some(54185), None),\n \n@@ -503,6 +500,9 @@ declare_features! (\n     // Allows the use of `#[derive(Anything)]` as sugar for `#[derive_Anything]`.\n     (removed, custom_derive, \"1.0.0\", Some(29644), None,\n      Some(\"subsumed by `#[proc_macro_derive]`\")),\n+    // Paths of the form: `extern::foo::bar`\n+    (removed, extern_in_paths, \"1.33.0\", Some(55600), None,\n+     Some(\"subsumed by `::foo::bar` paths\")),\n );\n \n declare_features! (\n@@ -1827,25 +1827,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n         visit::walk_impl_item(self, ii);\n     }\n \n-    fn visit_path(&mut self, path: &'a ast::Path, _id: NodeId) {\n-        for segment in &path.segments {\n-            // Identifiers we are going to check could come from a legacy macro (e.g., `#[test]`).\n-            // For such macros identifiers must have empty context, because this context is\n-            // used during name resolution and produced names must be unhygienic for compatibility.\n-            // On the other hand, we need the actual non-empty context for feature gate checking\n-            // because it's hygienic even for legacy macros. As previously stated, such context\n-            // cannot be kept in identifiers, so it's kept in paths instead and we take it from\n-            // there while keeping location info from the ident span.\n-            let span = segment.ident.span.with_ctxt(path.span.ctxt());\n-            if segment.ident.name == keywords::Extern.name() {\n-                gate_feature_post!(&self, extern_in_paths, span,\n-                                   \"`extern` in paths is experimental\");\n-            }\n-        }\n-\n-        visit::walk_path(self, path);\n-    }\n-\n     fn visit_vis(&mut self, vis: &'a ast::Visibility) {\n         if let ast::VisibilityKind::Crate(ast::CrateSugar::JustCrate) = vis.node {\n             gate_feature_post!(&self, crate_visibility_modifier, vis.span,"}, {"sha": "0e1c3b4b61f3a86f6793811abe6360da20855821", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -299,7 +299,7 @@ impl<'a> StringReader<'a> {\n \n     /// Report a lexical error with a given span.\n     fn err_span(&self, sp: Span, m: &str) {\n-        self.sess.span_diagnostic.span_err(sp, m)\n+        self.sess.span_diagnostic.struct_span_err(sp, m).emit();\n     }\n \n "}, {"sha": "ea205530ca5ccb2dfdc8c35752203cd5e26cfcbb", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -520,6 +520,7 @@ fn filtered_float_lit(data: Symbol, suffix: Option<Symbol>, diag: Option<(Span,\n                 } else {\n                     let msg = format!(\"invalid suffix `{}` for float literal\", suf);\n                     diag.struct_span_err(span, &msg)\n+                        .span_label(span, format!(\"invalid suffix `{}`\", suf))\n                         .help(\"valid suffixes are `f32` and `f64`\")\n                         .emit();\n                 }\n@@ -673,7 +674,11 @@ fn integer_lit(s: &str, suffix: Option<Symbol>, diag: Option<(Span, &Handler)>)\n                 _ => None,\n             };\n             if let Some(err) = err {\n-                err!(diag, |span, diag| diag.span_err(span, err));\n+                err!(diag, |span, diag| {\n+                    diag.struct_span_err(span, err)\n+                        .span_label(span, \"not supported\")\n+                        .emit();\n+                });\n             }\n             return filtered_float_lit(Symbol::intern(s), Some(suf), diag)\n         }\n@@ -712,6 +717,7 @@ fn integer_lit(s: &str, suffix: Option<Symbol>, diag: Option<(Span, &Handler)>)\n                     } else {\n                         let msg = format!(\"invalid suffix `{}` for numeric literal\", suf);\n                         diag.struct_span_err(span, &msg)\n+                            .span_label(span, format!(\"invalid suffix `{}`\", suf))\n                             .help(\"the suffix must be one of the integral types \\\n                                    (`u32`, `isize`, etc)\")\n                             .emit();"}, {"sha": "823c786bded2677964a6719c1d9b53c4741d6736", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 152, "deletions": 63, "changes": 215, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -1012,7 +1012,10 @@ impl<'a> Parser<'a> {\n                 if text.is_empty() {\n                     self.span_bug(sp, \"found empty literal suffix in Some\")\n                 }\n-                self.span_err(sp, &format!(\"{} with a suffix is invalid\", kind));\n+                let msg = format!(\"{} with a suffix is invalid\", kind);\n+                self.struct_span_err(sp, &msg)\n+                    .span_label(sp, msg)\n+                    .emit();\n             }\n         }\n     }\n@@ -1299,7 +1302,7 @@ impl<'a> Parser<'a> {\n     fn token_is_bare_fn_keyword(&mut self) -> bool {\n         self.check_keyword(keywords::Fn) ||\n             self.check_keyword(keywords::Unsafe) ||\n-            self.check_keyword(keywords::Extern) && self.is_extern_non_path()\n+            self.check_keyword(keywords::Extern)\n     }\n \n     /// parse a `TyKind::BareFn` type:\n@@ -1768,9 +1771,11 @@ impl<'a> Parser<'a> {\n             Mutability::Immutable\n         } else {\n             let span = self.prev_span;\n-            self.span_err(span,\n-                          \"expected mut or const in raw pointer type (use \\\n-                           `*mut T` or `*const T` as appropriate)\");\n+            let msg = \"expected mut or const in raw pointer type\";\n+            self.struct_span_err(span, msg)\n+                .span_label(span, msg)\n+                .help(\"use `*mut T` or `*const T` as appropriate\")\n+                .emit();\n             Mutability::Immutable\n         };\n         let t = self.parse_ty_no_plus()?;\n@@ -3815,8 +3820,12 @@ impl<'a> Parser<'a> {\n                     ddpos = Some(fields.len());\n                 } else {\n                     // Emit a friendly error, ignore `..` and continue parsing\n-                    self.span_err(self.prev_span,\n-                                  \"`..` can only be used once per tuple or tuple struct pattern\");\n+                    self.struct_span_err(\n+                        self.prev_span,\n+                        \"`..` can only be used once per tuple or tuple struct pattern\",\n+                    )\n+                        .span_label(self.prev_span, \"can only be used once per pattern\")\n+                        .emit();\n                 }\n             } else if !self.check(&token::CloseDelim(token::Paren)) {\n                 fields.push(self.parse_pat(None)?);\n@@ -3832,7 +3841,10 @@ impl<'a> Parser<'a> {\n \n         if ddpos == Some(fields.len()) && trailing_comma {\n             // `..` needs to be followed by `)` or `, pat`, `..,)` is disallowed.\n-            self.span_err(self.prev_span, \"trailing comma is not permitted after `..`\");\n+            let msg = \"trailing comma is not permitted after `..`\";\n+            self.struct_span_err(self.prev_span, msg)\n+                .span_label(self.prev_span, msg)\n+                .emit();\n         }\n \n         Ok((fields, ddpos, trailing_comma))\n@@ -4605,10 +4617,6 @@ impl<'a> Parser<'a> {\n         self.token.is_keyword(keywords::Crate) && self.look_ahead(1, |t| t != &token::ModSep)\n     }\n \n-    fn is_extern_non_path(&self) -> bool {\n-        self.token.is_keyword(keywords::Extern) && self.look_ahead(1, |t| t != &token::ModSep)\n-    }\n-\n     fn is_existential_type_decl(&self) -> bool {\n         self.token.is_keyword(keywords::Existential) &&\n         self.look_ahead(1, |t| t.is_keyword(keywords::Type))\n@@ -4712,12 +4720,10 @@ impl<'a> Parser<'a> {\n         // like a path (1 token), but it fact not a path.\n         // `union::b::c` - path, `union U { ... }` - not a path.\n         // `crate::b::c` - path, `crate struct S;` - not a path.\n-        // `extern::b::c` - path, `extern crate c;` - not a path.\n         } else if self.token.is_path_start() &&\n                   !self.token.is_qpath_start() &&\n                   !self.is_union_item() &&\n                   !self.is_crate_vis() &&\n-                  !self.is_extern_non_path() &&\n                   !self.is_existential_type_decl() &&\n                   !self.is_auto_trait_item() {\n             let pth = self.parse_path(PathStyle::Expr)?;\n@@ -5256,8 +5262,12 @@ impl<'a> Parser<'a> {\n                 // Check for trailing attributes and stop parsing.\n                 if !attrs.is_empty() {\n                     let param_kind = if seen_ty_param.is_some() { \"type\" } else { \"lifetime\" };\n-                    self.span_err(attrs[0].span,\n-                        &format!(\"trailing attribute after {} parameters\", param_kind));\n+                    self.struct_span_err(\n+                        attrs[0].span,\n+                        &format!(\"trailing attribute after {} parameters\", param_kind),\n+                    )\n+                    .span_label(attrs[0].span, \"attributes must go before parameters\")\n+                    .emit();\n                 }\n                 break\n             }\n@@ -5315,39 +5325,62 @@ impl<'a> Parser<'a> {\n \n     /// Parses (possibly empty) list of lifetime and type arguments and associated type bindings,\n     /// possibly including trailing comma.\n-    fn parse_generic_args(&mut self)\n-                          -> PResult<'a, (Vec<GenericArg>, Vec<TypeBinding>)> {\n+    fn parse_generic_args(&mut self) -> PResult<'a, (Vec<GenericArg>, Vec<TypeBinding>)> {\n         let mut args = Vec::new();\n         let mut bindings = Vec::new();\n         let mut seen_type = false;\n         let mut seen_binding = false;\n+        let mut first_type_or_binding_span: Option<Span> = None;\n+        let mut bad_lifetime_pos = vec![];\n+        let mut last_comma_span = None;\n+        let mut suggestions = vec![];\n         loop {\n             if self.check_lifetime() && self.look_ahead(1, |t| !t.is_like_plus()) {\n                 // Parse lifetime argument.\n                 args.push(GenericArg::Lifetime(self.expect_lifetime()));\n                 if seen_type || seen_binding {\n-                    self.span_err(self.prev_span,\n-                        \"lifetime parameters must be declared prior to type parameters\");\n+                    let remove_sp = last_comma_span.unwrap_or(self.prev_span).to(self.prev_span);\n+                    bad_lifetime_pos.push(self.prev_span);\n+                    if let Ok(snippet) = self.sess.source_map().span_to_snippet(self.prev_span) {\n+                        suggestions.push((remove_sp, String::new()));\n+                        suggestions.push((\n+                            first_type_or_binding_span.unwrap().shrink_to_lo(),\n+                            format!(\"{}, \", snippet)));\n+                    }\n                 }\n             } else if self.check_ident() && self.look_ahead(1, |t| t == &token::Eq) {\n                 // Parse associated type binding.\n                 let lo = self.span;\n                 let ident = self.parse_ident()?;\n                 self.bump();\n                 let ty = self.parse_ty()?;\n+                let span = lo.to(self.prev_span);\n                 bindings.push(TypeBinding {\n                     id: ast::DUMMY_NODE_ID,\n                     ident,\n                     ty,\n-                    span: lo.to(self.prev_span),\n+                    span,\n                 });\n                 seen_binding = true;\n+                if first_type_or_binding_span.is_none() {\n+                    first_type_or_binding_span = Some(span);\n+                }\n             } else if self.check_type() {\n                 // Parse type argument.\n                 let ty_param = self.parse_ty()?;\n                 if seen_binding {\n-                    self.span_err(ty_param.span,\n-                        \"type parameters must be declared prior to associated type bindings\");\n+                    self.struct_span_err(\n+                        ty_param.span,\n+                        \"type parameters must be declared prior to associated type bindings\"\n+                    )\n+                        .span_label(\n+                            ty_param.span,\n+                            \"must be declared prior to associated type bindings\",\n+                        )\n+                        .emit();\n+                }\n+                if first_type_or_binding_span.is_none() {\n+                    first_type_or_binding_span = Some(ty_param.span);\n                 }\n                 args.push(GenericArg::Type(ty_param));\n                 seen_type = true;\n@@ -5357,8 +5390,30 @@ impl<'a> Parser<'a> {\n \n             if !self.eat(&token::Comma) {\n                 break\n+            } else {\n+                last_comma_span = Some(self.prev_span);\n             }\n         }\n+        if !bad_lifetime_pos.is_empty() {\n+            let mut err = self.struct_span_err(\n+                bad_lifetime_pos.clone(),\n+                \"lifetime parameters must be declared prior to type parameters\"\n+            );\n+            for sp in &bad_lifetime_pos {\n+                err.span_label(*sp, \"must be declared prior to type parameters\");\n+            }\n+            if !suggestions.is_empty() {\n+                err.multipart_suggestion_with_applicability(\n+                    &format!(\n+                        \"move the lifetime parameter{} prior to the first type parameter\",\n+                        if bad_lifetime_pos.len() > 1 { \"s\" } else { \"\" },\n+                    ),\n+                    suggestions,\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+            err.emit();\n+        }\n         Ok((args, bindings))\n     }\n \n@@ -5386,8 +5441,12 @@ impl<'a> Parser<'a> {\n         // change we parse those generics now, but report an error.\n         if self.choose_generics_over_qpath() {\n             let generics = self.parse_generics()?;\n-            self.span_err(generics.span,\n-                          \"generic parameters on `where` clauses are reserved for future use\");\n+            self.struct_span_err(\n+                generics.span,\n+                \"generic parameters on `where` clauses are reserved for future use\",\n+            )\n+                .span_label(generics.span, \"currently unsupported\")\n+                .emit();\n         }\n \n         loop {\n@@ -5587,15 +5646,20 @@ impl<'a> Parser<'a> {\n                 // *mut self\n                 // *not_self\n                 // Emit special error for `self` cases.\n+                let msg = \"cannot pass `self` by raw pointer\";\n                 (if isolated_self(self, 1) {\n                     self.bump();\n-                    self.span_err(self.span, \"cannot pass `self` by raw pointer\");\n+                    self.struct_span_err(self.span, msg)\n+                        .span_label(self.span, msg)\n+                        .emit();\n                     SelfKind::Value(Mutability::Immutable)\n                 } else if self.look_ahead(1, |t| t.is_mutability()) &&\n                           isolated_self(self, 2) {\n                     self.bump();\n                     self.bump();\n-                    self.span_err(self.span, \"cannot pass `self` by raw pointer\");\n+                    self.struct_span_err(self.span, msg)\n+                        .span_label(self.span, msg)\n+                        .emit();\n                     SelfKind::Value(Mutability::Immutable)\n                 } else {\n                     return Ok(None);\n@@ -5932,7 +5996,10 @@ impl<'a> Parser<'a> {\n             tps.where_clause = self.parse_where_clause()?;\n             self.expect(&token::Semi)?;\n             if unsafety != Unsafety::Normal {\n-                self.span_err(self.prev_span, \"trait aliases cannot be unsafe\");\n+                let msg = \"trait aliases cannot be unsafe\";\n+                self.struct_span_err(self.prev_span, msg)\n+                    .span_label(self.prev_span, msg)\n+                    .emit();\n             }\n             Ok((ident, ItemKind::TraitAlias(tps, bounds), None))\n         } else {\n@@ -6048,7 +6115,13 @@ impl<'a> Parser<'a> {\n             Some(ty_second) => {\n                 // impl Trait for Type\n                 if !has_for {\n-                    self.span_err(missing_for_span, \"missing `for` in a trait impl\");\n+                    self.struct_span_err(missing_for_span, \"missing `for` in a trait impl\")\n+                        .span_suggestion_short_with_applicability(\n+                            missing_for_span,\n+                            \"add `for` here\",\n+                            \" for \".to_string(),\n+                            Applicability::MachineApplicable,\n+                        ).emit();\n                 }\n \n                 let ty_first = ty_first.into_inner();\n@@ -6409,41 +6482,52 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n+    fn maybe_consume_incorrect_semicolon(&mut self, items: &[P<Item>]) -> bool {\n+        if self.eat(&token::Semi) {\n+            let mut err = self.struct_span_err(self.prev_span, \"expected item, found `;`\");\n+            err.span_suggestion_short_with_applicability(\n+                self.prev_span,\n+                \"remove this semicolon\",\n+                String::new(),\n+                Applicability::MachineApplicable,\n+            );\n+            if !items.is_empty() {\n+                let previous_item = &items[items.len()-1];\n+                let previous_item_kind_name = match previous_item.node {\n+                    // say \"braced struct\" because tuple-structs and\n+                    // braceless-empty-struct declarations do take a semicolon\n+                    ItemKind::Struct(..) => Some(\"braced struct\"),\n+                    ItemKind::Enum(..) => Some(\"enum\"),\n+                    ItemKind::Trait(..) => Some(\"trait\"),\n+                    ItemKind::Union(..) => Some(\"union\"),\n+                    _ => None,\n+                };\n+                if let Some(name) = previous_item_kind_name {\n+                    err.help(&format!(\"{} declarations are not followed by a semicolon\", name));\n+                }\n+            }\n+            err.emit();\n+            true\n+        } else {\n+            false\n+        }\n+    }\n+\n     /// Given a termination token, parse all of the items in a module\n     fn parse_mod_items(&mut self, term: &token::Token, inner_lo: Span) -> PResult<'a, Mod> {\n         let mut items = vec![];\n         while let Some(item) = self.parse_item()? {\n             items.push(item);\n+            self.maybe_consume_incorrect_semicolon(&items);\n         }\n \n         if !self.eat(term) {\n             let token_str = self.this_token_descr();\n-            let mut err = self.fatal(&format!(\"expected item, found {}\", token_str));\n-            if self.token == token::Semi {\n-                let msg = \"consider removing this semicolon\";\n-                err.span_suggestion_short_with_applicability(\n-                    self.span, msg, String::new(), Applicability::MachineApplicable\n-                );\n-                if !items.is_empty() {  // Issue #51603\n-                    let previous_item = &items[items.len()-1];\n-                    let previous_item_kind_name = match previous_item.node {\n-                        // say \"braced struct\" because tuple-structs and\n-                        // braceless-empty-struct declarations do take a semicolon\n-                        ItemKind::Struct(..) => Some(\"braced struct\"),\n-                        ItemKind::Enum(..) => Some(\"enum\"),\n-                        ItemKind::Trait(..) => Some(\"trait\"),\n-                        ItemKind::Union(..) => Some(\"union\"),\n-                        _ => None,\n-                    };\n-                    if let Some(name) = previous_item_kind_name {\n-                        err.help(&format!(\"{} declarations are not followed by a semicolon\",\n-                                          name));\n-                    }\n-                }\n-            } else {\n+            if !self.maybe_consume_incorrect_semicolon(&items) {\n+                let mut err = self.fatal(&format!(\"expected item, found {}\", token_str));\n                 err.span_label(self.span, \"expected item\");\n+                return Err(err);\n             }\n-            return Err(err);\n         }\n \n         let hi = if self.span.is_dummy() {\n@@ -6939,7 +7023,7 @@ impl<'a> Parser<'a> {\n     fn parse_enum_def(&mut self, _generics: &ast::Generics) -> PResult<'a, EnumDef> {\n         let mut variants = Vec::new();\n         let mut all_nullary = true;\n-        let mut any_disr = None;\n+        let mut any_disr = vec![];\n         while self.token != token::CloseDelim(token::Brace) {\n             let variant_attrs = self.parse_outer_attributes()?;\n             let vlo = self.span;\n@@ -6961,7 +7045,9 @@ impl<'a> Parser<'a> {\n                     id: ast::DUMMY_NODE_ID,\n                     value: self.parse_expr()?,\n                 });\n-                any_disr = disr_expr.as_ref().map(|c| c.value.span);\n+                if let Some(sp) = disr_expr.as_ref().map(|c| c.value.span) {\n+                    any_disr.push(sp);\n+                }\n                 struct_def = VariantData::Unit(ast::DUMMY_NODE_ID);\n             } else {\n                 struct_def = VariantData::Unit(ast::DUMMY_NODE_ID);\n@@ -6978,11 +7064,15 @@ impl<'a> Parser<'a> {\n             if !self.eat(&token::Comma) { break; }\n         }\n         self.expect(&token::CloseDelim(token::Brace))?;\n-        match any_disr {\n-            Some(disr_span) if !all_nullary =>\n-                self.span_err(disr_span,\n-                    \"discriminator values can only be used with a field-less enum\"),\n-            _ => ()\n+        if !any_disr.is_empty() && !all_nullary {\n+            let mut err =self.struct_span_err(\n+                any_disr.clone(),\n+                \"discriminator values can only be used with a field-less enum\",\n+            );\n+            for sp in any_disr {\n+                err.span_label(sp, \"only valid in field-less enums\");\n+            }\n+            err.emit();\n         }\n \n         Ok(ast::EnumDef { variants })\n@@ -7113,8 +7203,7 @@ impl<'a> Parser<'a> {\n             return Ok(Some(item));\n         }\n \n-        if self.check_keyword(keywords::Extern) && self.is_extern_non_path() {\n-            self.bump(); // `extern`\n+        if self.eat_keyword(keywords::Extern) {\n             if self.eat_keyword(keywords::Crate) {\n                 return Ok(Some(self.parse_item_extern_crate(lo, visibility, attrs)?));\n             }\n@@ -7623,7 +7712,7 @@ impl<'a> Parser<'a> {\n     fn parse_assoc_macro_invoc(&mut self, item_kind: &str, vis: Option<&Visibility>,\n                                at_end: &mut bool) -> PResult<'a, Option<Mac>>\n     {\n-        if self.token.is_path_start() && !self.is_extern_non_path() {\n+        if self.token.is_path_start() {\n             let prev_span = self.prev_span;\n             let lo = self.span;\n             let pth = self.parse_path(PathStyle::Mod)?;"}, {"sha": "e741b79bd4c45ec394500ea0c5309c1ec026afab", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -478,7 +478,6 @@ impl Ident {\n         self.name == keywords::Super.name() ||\n         self.name == keywords::SelfLower.name() ||\n         self.name == keywords::SelfUpper.name() ||\n-        self.name == keywords::Extern.name() ||\n         self.name == keywords::Crate.name() ||\n         self.name == keywords::PathRoot.name() ||\n         self.name == keywords::DollarCrate.name()"}, {"sha": "bf98fcd10cfded12e1d90b126115ef1a58272a2f", "filename": "src/test/run-make-fulldeps/save-analysis-rfc2126/Makefile", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Frun-make-fulldeps%2Fsave-analysis-rfc2126%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Frun-make-fulldeps%2Fsave-analysis-rfc2126%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsave-analysis-rfc2126%2FMakefile?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -1,12 +1,9 @@\n -include ../tools.mk\n \n-all: extern_absolute_paths.rs extern_in_paths.rs krate2\n+all: extern_absolute_paths.rs krate2\n \t$(RUSTC) extern_absolute_paths.rs -Zsave-analysis --edition=2018 \\\n \t\t-Z unstable-options --extern krate2\n \tcat $(TMPDIR)/save-analysis/extern_absolute_paths.json | \"$(PYTHON)\" validate_json.py\n-\t$(RUSTC) extern_in_paths.rs -Zsave-analysis --edition=2018 \\\n-\t\t-Z unstable-options --extern krate2\n-\tcat $(TMPDIR)/save-analysis/extern_in_paths.json | \"$(PYTHON)\" validate_json.py\n \n krate2: krate2.rs\n \t$(RUSTC) $<"}, {"sha": "299b96621ac32be85012e814513540a6963d188c", "filename": "src/test/run-make-fulldeps/save-analysis-rfc2126/extern_in_paths.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/03acbd71c977cd63ce5f39ba9b6fe9ffd578785a/src%2Ftest%2Frun-make-fulldeps%2Fsave-analysis-rfc2126%2Fextern_in_paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03acbd71c977cd63ce5f39ba9b6fe9ffd578785a/src%2Ftest%2Frun-make-fulldeps%2Fsave-analysis-rfc2126%2Fextern_in_paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsave-analysis-rfc2126%2Fextern_in_paths.rs?ref=03acbd71c977cd63ce5f39ba9b6fe9ffd578785a", "patch": "@@ -1,7 +0,0 @@\n-#![feature(extern_in_paths)]\n-\n-use extern::krate2;\n-\n-fn main() {\n-    extern::krate2::hello();\n-}"}, {"sha": "165a753c8a434160524e2af7a42367062688e583", "filename": "src/test/run-pass/rfcs/rfc-2126-extern-absolute-paths/extern.rs", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/03acbd71c977cd63ce5f39ba9b6fe9ffd578785a/src%2Ftest%2Frun-pass%2Frfcs%2Frfc-2126-extern-absolute-paths%2Fextern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03acbd71c977cd63ce5f39ba9b6fe9ffd578785a/src%2Ftest%2Frun-pass%2Frfcs%2Frfc-2126-extern-absolute-paths%2Fextern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfcs%2Frfc-2126-extern-absolute-paths%2Fextern.rs?ref=03acbd71c977cd63ce5f39ba9b6fe9ffd578785a", "patch": "@@ -1,28 +0,0 @@\n-// run-pass\n-#![allow(dead_code)]\n-// aux-build:xcrate.rs\n-// compile-flags:--extern xcrate\n-\n-#![feature(extern_in_paths)]\n-\n-use extern::xcrate::Z;\n-\n-type A = extern::xcrate::S;\n-type B = for<'a> extern::xcrate::Tr<'a>;\n-\n-fn f() {\n-    use extern::xcrate;\n-    use extern::xcrate as ycrate;\n-    let s = xcrate::S;\n-    assert_eq!(format!(\"{:?}\", s), \"S\");\n-    let z = ycrate::Z;\n-    assert_eq!(format!(\"{:?}\", z), \"Z\");\n-}\n-\n-fn main() {\n-    let s = extern::xcrate::S;\n-    assert_eq!(format!(\"{:?}\", s), \"S\");\n-    let z = Z;\n-    assert_eq!(format!(\"{:?}\", z), \"Z\");\n-    assert_eq!(A {}, extern::xcrate::S {});\n-}"}, {"sha": "c4c0cee5ccc31fb938a9cb4d3a9b38d289cb0988", "filename": "src/test/ui/attrs-with-no-formal-in-generics/attrs-with-no-formal-in-generics-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-1.stderr?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -2,7 +2,7 @@ error: trailing attribute after lifetime parameters\n   --> $DIR/attrs-with-no-formal-in-generics-1.rs:9:25\n    |\n LL | impl<#[rustc_1] 'a, 'b, #[oops]> RefIntPair<'a, 'b> {\n-   |                         ^^^^^^^\n+   |                         ^^^^^^^ attributes must go before parameters\n \n error: aborting due to previous error\n "}, {"sha": "9099d74ce1be9e846a9d49b4ad192a8b3cceb970", "filename": "src/test/ui/attrs-with-no-formal-in-generics/attrs-with-no-formal-in-generics-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-2.stderr?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -2,7 +2,7 @@ error: trailing attribute after type parameters\n   --> $DIR/attrs-with-no-formal-in-generics-2.rs:9:35\n    |\n LL | impl<#[rustc_1] 'a, #[rustc_2] T, #[oops]> RefAny<'a, T> {}\n-   |                                   ^^^^^^^\n+   |                                   ^^^^^^^ attributes must go before parameters\n \n error: aborting due to previous error\n "}, {"sha": "e9f908d479f649ac7efbbe98d37f306773336732", "filename": "src/test/ui/attrs-with-no-formal-in-generics/attrs-with-no-formal-in-generics-3.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-3.rs?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -5,12 +5,8 @@\n struct RefIntPair<'a, 'b>(&'a u32, &'b u32);\n \n fn hof_lt<Q>(_: Q)\n-    where Q: for <#[rustc_1] 'a, 'b, #[oops]> Fn(RefIntPair<'a,'b>) -> &'b u32\n+    where Q: for <#[allow(unused)] 'a, 'b, #[oops]> Fn(RefIntPair<'a,'b>) -> &'b u32\n     //~^ ERROR trailing attribute after lifetime parameters\n-{\n+{}\n \n-}\n-\n-fn main() {\n-\n-}\n+fn main() {}"}, {"sha": "452f0ea5e1753406aa2ebaa7e6a2561e7039fe01", "filename": "src/test/ui/attrs-with-no-formal-in-generics/attrs-with-no-formal-in-generics-3.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-3.stderr?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -1,8 +1,8 @@\n error: trailing attribute after lifetime parameters\n-  --> $DIR/attrs-with-no-formal-in-generics-3.rs:8:38\n+  --> $DIR/attrs-with-no-formal-in-generics-3.rs:8:44\n    |\n-LL |     where Q: for <#[rustc_1] 'a, 'b, #[oops]> Fn(RefIntPair<'a,'b>) -> &'b u32\n-   |                                      ^^^^^^^\n+LL |     where Q: for <#[allow(unused)] 'a, 'b, #[oops]> Fn(RefIntPair<'a,'b>) -> &'b u32\n+   |                                            ^^^^^^^ attributes must go before parameters\n \n error: aborting due to previous error\n "}, {"sha": "8130f4dedc9aa80c94c2d3b9f0e601c87a4fa18d", "filename": "src/test/ui/cast/cast-as-bool.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fcast%2Fcast-as-bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fcast%2Fcast-as-bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fcast-as-bool.rs?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -1,4 +1,9 @@\n fn main() {\n-    let u = 5 as bool;\n-    //~^ ERROR cannot cast as `bool`\n+    let u = 5 as bool; //~ ERROR cannot cast as `bool`\n+                       //~| HELP compare with zero instead\n+                       //~| SUGGESTION 5 != 0\n+    let t = (1 + 2) as bool; //~ ERROR cannot cast as `bool`\n+                             //~| HELP compare with zero instead\n+                             //~| SUGGESTION (1 + 2) != 0\n+    let v = \"hello\" as bool; //~ ERROR cannot cast as `bool`\n }"}, {"sha": "6099a4195b329b9f99c03121d87616a14d2a14e7", "filename": "src/test/ui/cast/cast-as-bool.stderr", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fcast%2Fcast-as-bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fcast%2Fcast-as-bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fcast-as-bool.stderr?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -1,11 +1,21 @@\n error[E0054]: cannot cast as `bool`\n   --> $DIR/cast-as-bool.rs:2:13\n    |\n-LL |     let u = 5 as bool;\n-   |             ^^^^^^^^^ unsupported cast\n+LL |     let u = 5 as bool; //~ ERROR cannot cast as `bool`\n+   |             ^^^^^^^^^ help: compare with zero instead: `5 != 0`\n+\n+error[E0054]: cannot cast as `bool`\n+  --> $DIR/cast-as-bool.rs:5:13\n+   |\n+LL |     let t = (1 + 2) as bool; //~ ERROR cannot cast as `bool`\n+   |             ^^^^^^^^^^^^^^^ help: compare with zero instead: `(1 + 2) != 0`\n+\n+error[E0054]: cannot cast as `bool`\n+  --> $DIR/cast-as-bool.rs:8:13\n    |\n-   = help: compare with zero instead\n+LL |     let v = \"hello\" as bool; //~ ERROR cannot cast as `bool`\n+   |             ^^^^^^^^^^^^^^^ unsupported cast\n \n-error: aborting due to previous error\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0054`."}, {"sha": "52f6af78a9be5f00f893910254297b2bf1141ca8", "filename": "src/test/ui/cast/cast-rfc0401-2.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fcast%2Fcast-rfc0401-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fcast%2Fcast-rfc0401-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fcast-rfc0401-2.stderr?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -2,9 +2,7 @@ error[E0054]: cannot cast as `bool`\n   --> $DIR/cast-rfc0401-2.rs:6:13\n    |\n LL |     let _ = 3 as bool;\n-   |             ^^^^^^^^^ unsupported cast\n-   |\n-   = help: compare with zero instead\n+   |             ^^^^^^^^^ help: compare with zero instead: `3 != 0`\n \n error: aborting due to previous error\n "}, {"sha": "cce32fa2944077ab23431769a2bb0ded4e77c6ca", "filename": "src/test/ui/error-codes/E0054.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Ferror-codes%2FE0054.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Ferror-codes%2FE0054.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0054.stderr?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -2,9 +2,7 @@ error[E0054]: cannot cast as `bool`\n   --> $DIR/E0054.rs:3:24\n    |\n LL |     let x_is_nonzero = x as bool; //~ ERROR E0054\n-   |                        ^^^^^^^^^ unsupported cast\n-   |\n-   = help: compare with zero instead\n+   |                        ^^^^^^^^^ help: compare with zero instead: `x != 0`\n \n error: aborting due to previous error\n "}, {"sha": "ff6504e9688e590edbfdeb771cc775bd6eaed532", "filename": "src/test/ui/error-festival.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Ferror-festival.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Ferror-festival.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-festival.stderr?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -52,9 +52,7 @@ error[E0054]: cannot cast as `bool`\n   --> $DIR/error-festival.rs:33:24\n    |\n LL |     let x_is_nonzero = x as bool;\n-   |                        ^^^^^^^^^ unsupported cast\n-   |\n-   = help: compare with zero instead\n+   |                        ^^^^^^^^^ help: compare with zero instead: `x != 0`\n \n error[E0606]: casting `&u8` as `u32` is invalid\n   --> $DIR/error-festival.rs:37:18"}, {"sha": "2d23d13d2472bdd6a597d364ea031b2089bf8aef", "filename": "src/test/ui/feature-gates/feature-gate-extern_in_paths.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/03acbd71c977cd63ce5f39ba9b6fe9ffd578785a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_in_paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03acbd71c977cd63ce5f39ba9b6fe9ffd578785a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_in_paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_in_paths.rs?ref=03acbd71c977cd63ce5f39ba9b6fe9ffd578785a", "patch": "@@ -1,5 +0,0 @@\n-struct S;\n-\n-fn main() {\n-    let _ = extern::std::vec::Vec::new(); //~ ERROR `extern` in paths is experimental\n-}"}, {"sha": "6b5963b8559af3edcca4c40e99eb1bdb8f4db622", "filename": "src/test/ui/feature-gates/feature-gate-extern_in_paths.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/03acbd71c977cd63ce5f39ba9b6fe9ffd578785a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_in_paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03acbd71c977cd63ce5f39ba9b6fe9ffd578785a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_in_paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_in_paths.stderr?ref=03acbd71c977cd63ce5f39ba9b6fe9ffd578785a", "patch": "@@ -1,11 +0,0 @@\n-error[E0658]: `extern` in paths is experimental (see issue #55600)\n-  --> $DIR/feature-gate-extern_in_paths.rs:4:13\n-   |\n-LL |     let _ = extern::std::vec::Vec::new(); //~ ERROR `extern` in paths is experimental\n-   |             ^^^^^^\n-   |\n-   = help: add #![feature(extern_in_paths)] to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "9dfd61fdf3f20516ee339a95e0d3a40d4a779bfd", "filename": "src/test/ui/issues/issue-46186.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fissues%2Fissue-46186.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fissues%2Fissue-46186.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46186.rs?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -1,5 +1,6 @@\n struct Struct {\n     a: usize,\n-}; //~ ERROR expected item, found `;`\n+};\n+//~^ ERROR expected item, found `;`\n \n fn main() {}"}, {"sha": "eb0dbb8aa41b8faf464134c1f61acc1ff2d6a3d4", "filename": "src/test/ui/issues/issue-46186.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fissues%2Fissue-46186.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fissues%2Fissue-46186.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46186.stderr?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -1,8 +1,8 @@\n error: expected item, found `;`\n   --> $DIR/issue-46186.rs:3:2\n    |\n-LL | }; //~ ERROR expected item, found `;`\n-   |  ^ help: consider removing this semicolon\n+LL | };\n+   |  ^ help: remove this semicolon\n    |\n    = help: braced struct declarations are not followed by a semicolon\n "}, {"sha": "a5f05d2824eb88714f9437dabbcc3a455abe1732", "filename": "src/test/ui/issues/issue-49040.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fissues%2Fissue-49040.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fissues%2Fissue-49040.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-49040.rs?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -1,2 +1,2 @@\n #![allow(unused_variables)]; //~ ERROR expected item, found `;`\n-fn main() {}\n+fn foo() {}"}, {"sha": "12e78e2f3bc958ab12eff530bb140dea42ad66d7", "filename": "src/test/ui/issues/issue-49040.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fissues%2Fissue-49040.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fissues%2Fissue-49040.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-49040.stderr?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -2,7 +2,12 @@ error: expected item, found `;`\n   --> $DIR/issue-49040.rs:1:28\n    |\n LL | #![allow(unused_variables)]; //~ ERROR expected item, found `;`\n-   |                            ^ help: consider removing this semicolon\n+   |                            ^ help: remove this semicolon\n \n-error: aborting due to previous error\n+error[E0601]: `main` function not found in crate `issue_49040`\n+   |\n+   = note: consider adding a `main` function to `$DIR/issue-49040.rs`\n+\n+error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0601`."}, {"sha": "b738eb4c703504b114b0e37f155e00a0ace1fe6f", "filename": "src/test/ui/keyword/extern/keyword-extern-as-identifier-expr.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-expr.rs?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -0,0 +1,3 @@\n+fn main() {\n+    let s = extern::foo::Bar; //~ ERROR expected expression, found keyword `extern`\n+}"}, {"sha": "150fc88e7efc2867fbc90227f423e688574a83d8", "filename": "src/test/ui/keyword/extern/keyword-extern-as-identifier-expr.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-expr.stderr?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -0,0 +1,8 @@\n+error: expected expression, found keyword `extern`\n+  --> $DIR/keyword-extern-as-identifier-expr.rs:2:13\n+   |\n+LL |     let s = extern::foo::Bar; //~ ERROR expected expression, found keyword `extern`\n+   |             ^^^^^^ expected expression\n+\n+error: aborting due to previous error\n+"}, {"sha": "f9b6bad7c2552046c9e16e0d36a6500d17aadff4", "filename": "src/test/ui/keyword/extern/keyword-extern-as-identifier-pat.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-pat.rs?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -0,0 +1,3 @@\n+fn main() {\n+    let extern = 0; //~ ERROR expected pattern, found keyword `extern`\n+}"}, {"sha": "426b4eef0569c9cc0b8fae8ff9df55561aa50871", "filename": "src/test/ui/keyword/extern/keyword-extern-as-identifier-pat.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-pat.stderr?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -0,0 +1,8 @@\n+error: expected pattern, found keyword `extern`\n+  --> $DIR/keyword-extern-as-identifier-pat.rs:2:9\n+   |\n+LL |     let extern = 0; //~ ERROR expected pattern, found keyword `extern`\n+   |         ^^^^^^ expected pattern\n+\n+error: aborting due to previous error\n+"}, {"sha": "3845a9aa017cedb58294f8adb15c4414e8c7d499", "filename": "src/test/ui/keyword/extern/keyword-extern-as-identifier-type.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-type.rs?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -0,0 +1,3 @@\n+type A = extern::foo::bar; //~ ERROR expected `fn`, found `::`\n+\n+fn main() {}"}, {"sha": "97b641fbea55770e10d16e348fea75b52f81f356", "filename": "src/test/ui/keyword/extern/keyword-extern-as-identifier-type.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-type.stderr?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -0,0 +1,8 @@\n+error: expected `fn`, found `::`\n+  --> $DIR/keyword-extern-as-identifier-type.rs:1:16\n+   |\n+LL | type A = extern::foo::bar; //~ ERROR expected `fn`, found `::`\n+   |                ^^ expected `fn` here\n+\n+error: aborting due to previous error\n+"}, {"sha": "b07de3e341c41b486184b3c8827f51affc4dd8a3", "filename": "src/test/ui/keyword/extern/keyword-extern-as-identifier-use.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-use.rs?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -0,0 +1,3 @@\n+use extern::foo; //~ ERROR expected identifier, found keyword `extern`\n+\n+fn main() {}"}, {"sha": "31b575a92e0c86a0c389f33171882a5751467769", "filename": "src/test/ui/keyword/extern/keyword-extern-as-identifier-use.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-use.stderr?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -0,0 +1,12 @@\n+error: expected identifier, found keyword `extern`\n+  --> $DIR/keyword-extern-as-identifier-use.rs:1:5\n+   |\n+LL | use extern::foo; //~ ERROR expected identifier, found keyword `extern`\n+   |     ^^^^^^ expected identifier, found keyword\n+help: you can escape reserved keywords to use them as identifiers\n+   |\n+LL | use r#extern::foo; //~ ERROR expected identifier, found keyword `extern`\n+   |     ^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "6775290a26bd5a1325e44947e32e7841f8c22513", "filename": "src/test/ui/keyword/keyword-extern-as-identifier.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/03acbd71c977cd63ce5f39ba9b6fe9ffd578785a/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-extern-as-identifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03acbd71c977cd63ce5f39ba9b6fe9ffd578785a/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-extern-as-identifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-extern-as-identifier.rs?ref=03acbd71c977cd63ce5f39ba9b6fe9ffd578785a", "patch": "@@ -1,5 +0,0 @@\n-#![feature(extern_in_paths)]\n-\n-fn main() {\n-    let extern = 0; //~ ERROR cannot find unit struct/variant or constant `extern` in this scope\n-}"}, {"sha": "ef2a4b3ff3c3017b19b7ca2c1e92468f0b3e2306", "filename": "src/test/ui/keyword/keyword-extern-as-identifier.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/03acbd71c977cd63ce5f39ba9b6fe9ffd578785a/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-extern-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03acbd71c977cd63ce5f39ba9b6fe9ffd578785a/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-extern-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-extern-as-identifier.stderr?ref=03acbd71c977cd63ce5f39ba9b6fe9ffd578785a", "patch": "@@ -1,9 +0,0 @@\n-error[E0531]: cannot find unit struct/variant or constant `extern` in this scope\n-  --> $DIR/keyword-extern-as-identifier.rs:4:9\n-   |\n-LL |     let extern = 0; //~ ERROR cannot find unit struct/variant or constant `extern` in this scope\n-   |         ^^^^^^ not found in this scope\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0531`."}, {"sha": "76091f2d09ed4ec2fd2ee2f172e23e01356d096d", "filename": "src/test/ui/mismatched_types/cast-rfc0401.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -90,17 +90,13 @@ error[E0054]: cannot cast as `bool`\n   --> $DIR/cast-rfc0401.rs:39:13\n    |\n LL |     let _ = 3_i32 as bool; //~ ERROR cannot cast\n-   |             ^^^^^^^^^^^^^ unsupported cast\n-   |\n-   = help: compare with zero instead\n+   |             ^^^^^^^^^^^^^ help: compare with zero instead: `3_i32 != 0`\n \n error[E0054]: cannot cast as `bool`\n   --> $DIR/cast-rfc0401.rs:40:13\n    |\n LL |     let _ = E::A as bool; //~ ERROR cannot cast\n    |             ^^^^^^^^^^^^ unsupported cast\n-   |\n-   = help: compare with zero instead\n \n error[E0604]: only `u8` can be cast as `char`, not `u32`\n   --> $DIR/cast-rfc0401.rs:41:13"}, {"sha": "c54b72a3585d11726fa62712179f1a36cede3e63", "filename": "src/test/ui/old-suffixes-are-really-forbidden.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fold-suffixes-are-really-forbidden.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fold-suffixes-are-really-forbidden.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fold-suffixes-are-really-forbidden.stderr?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -2,15 +2,15 @@ error: invalid suffix `is` for numeric literal\n   --> $DIR/old-suffixes-are-really-forbidden.rs:2:13\n    |\n LL |     let a = 1_is; //~ ERROR invalid suffix\n-   |             ^^^^\n+   |             ^^^^ invalid suffix `is`\n    |\n    = help: the suffix must be one of the integral types (`u32`, `isize`, etc)\n \n error: invalid suffix `us` for numeric literal\n   --> $DIR/old-suffixes-are-really-forbidden.rs:3:13\n    |\n LL |     let b = 2_us; //~ ERROR invalid suffix\n-   |             ^^^^\n+   |             ^^^^ invalid suffix `us`\n    |\n    = help: the suffix must be one of the integral types (`u32`, `isize`, etc)\n "}, {"sha": "608c5fda2482aa490a6a71ff008299f5ca3bfce2", "filename": "src/test/ui/parser/bad-lit-suffixes.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fparser%2Fbad-lit-suffixes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fparser%2Fbad-lit-suffixes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbad-lit-suffixes.stderr?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -2,49 +2,49 @@ error: ABI spec with a suffix is invalid\n   --> $DIR/bad-lit-suffixes.rs:5:5\n    |\n LL |     \"C\"suffix //~ ERROR ABI spec with a suffix is invalid\n-   |     ^^^^^^^^^\n+   |     ^^^^^^^^^ ABI spec with a suffix is invalid\n \n error: ABI spec with a suffix is invalid\n   --> $DIR/bad-lit-suffixes.rs:9:5\n    |\n LL |     \"C\"suffix //~ ERROR ABI spec with a suffix is invalid\n-   |     ^^^^^^^^^\n+   |     ^^^^^^^^^ ABI spec with a suffix is invalid\n \n error: string literal with a suffix is invalid\n   --> $DIR/bad-lit-suffixes.rs:13:5\n    |\n LL |     \"\"suffix; //~ ERROR string literal with a suffix is invalid\n-   |     ^^^^^^^^\n+   |     ^^^^^^^^ string literal with a suffix is invalid\n \n error: byte string literal with a suffix is invalid\n   --> $DIR/bad-lit-suffixes.rs:14:5\n    |\n LL |     b\"\"suffix; //~ ERROR byte string literal with a suffix is invalid\n-   |     ^^^^^^^^^\n+   |     ^^^^^^^^^ byte string literal with a suffix is invalid\n \n error: string literal with a suffix is invalid\n   --> $DIR/bad-lit-suffixes.rs:15:5\n    |\n LL |     r#\"\"#suffix; //~ ERROR string literal with a suffix is invalid\n-   |     ^^^^^^^^^^^\n+   |     ^^^^^^^^^^^ string literal with a suffix is invalid\n \n error: byte string literal with a suffix is invalid\n   --> $DIR/bad-lit-suffixes.rs:16:5\n    |\n LL |     br#\"\"#suffix; //~ ERROR byte string literal with a suffix is invalid\n-   |     ^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^ byte string literal with a suffix is invalid\n \n error: char literal with a suffix is invalid\n   --> $DIR/bad-lit-suffixes.rs:17:5\n    |\n LL |     'a'suffix; //~ ERROR char literal with a suffix is invalid\n-   |     ^^^^^^^^^\n+   |     ^^^^^^^^^ char literal with a suffix is invalid\n \n error: byte literal with a suffix is invalid\n   --> $DIR/bad-lit-suffixes.rs:18:5\n    |\n LL |     b'a'suffix; //~ ERROR byte literal with a suffix is invalid\n-   |     ^^^^^^^^^^\n+   |     ^^^^^^^^^^ byte literal with a suffix is invalid\n \n error: invalid width `1024` for integer literal\n   --> $DIR/bad-lit-suffixes.rs:20:5\n@@ -82,31 +82,31 @@ error: invalid suffix `suffix` for numeric literal\n   --> $DIR/bad-lit-suffixes.rs:25:5\n    |\n LL |     1234suffix; //~ ERROR invalid suffix `suffix` for numeric literal\n-   |     ^^^^^^^^^^\n+   |     ^^^^^^^^^^ invalid suffix `suffix`\n    |\n    = help: the suffix must be one of the integral types (`u32`, `isize`, etc)\n \n error: invalid suffix `suffix` for numeric literal\n   --> $DIR/bad-lit-suffixes.rs:26:5\n    |\n LL |     0b101suffix; //~ ERROR invalid suffix `suffix` for numeric literal\n-   |     ^^^^^^^^^^^\n+   |     ^^^^^^^^^^^ invalid suffix `suffix`\n    |\n    = help: the suffix must be one of the integral types (`u32`, `isize`, etc)\n \n error: invalid suffix `suffix` for float literal\n   --> $DIR/bad-lit-suffixes.rs:27:5\n    |\n LL |     1.0suffix; //~ ERROR invalid suffix `suffix` for float literal\n-   |     ^^^^^^^^^\n+   |     ^^^^^^^^^ invalid suffix `suffix`\n    |\n    = help: valid suffixes are `f32` and `f64`\n \n error: invalid suffix `suffix` for float literal\n   --> $DIR/bad-lit-suffixes.rs:28:5\n    |\n LL |     1.0e10suffix; //~ ERROR invalid suffix `suffix` for float literal\n-   |     ^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^ invalid suffix `suffix`\n    |\n    = help: valid suffixes are `f32` and `f64`\n "}, {"sha": "59e5e0c5d31db6fa0b91d199bc9387febfce7b54", "filename": "src/test/ui/parser/bad-pointer-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fparser%2Fbad-pointer-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fparser%2Fbad-pointer-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbad-pointer-type.rs?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -1,5 +1,5 @@\n fn foo(_: *()) {\n-    //~^ expected mut or const in raw pointer type (use `*mut T` or `*const T` as appropriate)\n+    //~^ ERROR expected mut or const in raw pointer type\n }\n \n fn main() {}"}, {"sha": "e18c220affe6ebd2947cdef1d5cf5189aef3e153", "filename": "src/test/ui/parser/bad-pointer-type.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fparser%2Fbad-pointer-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fparser%2Fbad-pointer-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbad-pointer-type.stderr?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -1,8 +1,10 @@\n-error: expected mut or const in raw pointer type (use `*mut T` or `*const T` as appropriate)\n+error: expected mut or const in raw pointer type\n   --> $DIR/bad-pointer-type.rs:1:11\n    |\n LL | fn foo(_: *()) {\n-   |           ^\n+   |           ^ expected mut or const in raw pointer type\n+   |\n+   = help: use `*mut T` or `*const T` as appropriate\n \n error: aborting due to previous error\n "}, {"sha": "353f5e21ee64192992aa66cb8935e36a435db7a8", "filename": "src/test/ui/parser/impl-parsing.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fparser%2Fimpl-parsing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fparser%2Fimpl-parsing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fimpl-parsing.stderr?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -2,13 +2,13 @@ error: missing `for` in a trait impl\n   --> $DIR/impl-parsing.rs:6:11\n    |\n LL | impl Trait Type {} //~ ERROR missing `for` in a trait impl\n-   |           ^\n+   |           ^ help: add `for` here\n \n error: missing `for` in a trait impl\n   --> $DIR/impl-parsing.rs:7:11\n    |\n LL | impl Trait .. {} //~ ERROR missing `for` in a trait impl\n-   |           ^\n+   |           ^ help: add `for` here\n \n error: expected a trait, found type\n   --> $DIR/impl-parsing.rs:8:6"}, {"sha": "17b9b766b21816f75d23d2d2c0698e35f1253ea1", "filename": "src/test/ui/parser/issue-14303-fncall.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fncall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fncall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fncall.rs?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -1,6 +1,17 @@\n-fn main() {\n-    (0..4)\n-    .map(|x| x * 2)\n-    .collect::<Vec<'a, usize, 'b>>()\n-    //~^ ERROR lifetime parameters must be declared prior to type parameters\n+// can't run rustfix because it doesn't handle multipart suggestions correctly\n+// compile-flags: -Zborrowck=mir\n+// we need the above to avoid ast borrowck failure in recovered code\n+\n+struct S<'a, T> {\n+    a: &'a T,\n+    b: &'a T,\n }\n+\n+fn foo<'a, 'b>(start: &'a usize, end: &'a usize) {\n+    let _x = (*start..*end)\n+        .map(|x| S { a: start, b: end })\n+        .collect::<Vec<S<_, 'a>>>();\n+        //~^ ERROR lifetime parameters must be declared prior to type parameters\n+}\n+\n+fn main() {}"}, {"sha": "2a7364915949efd3dbbeb3569b9f404543b929dd", "filename": "src/test/ui/parser/issue-14303-fncall.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fncall.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fncall.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fncall.stderr?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -1,8 +1,12 @@\n error: lifetime parameters must be declared prior to type parameters\n-  --> $DIR/issue-14303-fncall.rs:4:31\n+  --> $DIR/issue-14303-fncall.rs:13:29\n    |\n-LL |     .collect::<Vec<'a, usize, 'b>>()\n-   |                               ^^\n+LL |         .collect::<Vec<S<_, 'a>>>();\n+   |                             ^^ must be declared prior to type parameters\n+help: move the lifetime parameter prior to the first type parameter\n+   |\n+LL |         .collect::<Vec<S<'a, _>>>();\n+   |                          ^^^ --\n \n error: aborting due to previous error\n "}, {"sha": "a08c89f3437b4be1c97fd7dc65d26077f1fdf808", "filename": "src/test/ui/parser/issue-14303-path.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fparser%2Fissue-14303-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fparser%2Fissue-14303-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-14303-path.rs?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -1,4 +1,13 @@\n-fn bar<'a, T>(x: mymodule::X<'a, T, 'b, 'c>) {}\n+mod foo {\n+    pub struct X<'a, 'b, 'c, T> {\n+        a: &'a str,\n+        b: &'b str,\n+        c: &'c str,\n+        t: T,\n+    }\n+}\n+\n+fn bar<'a, 'b, 'c, T>(x: foo::X<'a, T, 'b, 'c>) {}\n //~^ ERROR lifetime parameters must be declared prior to type parameters\n \n fn main() {}"}, {"sha": "fb4fb32e11e50021d11fdf0841ec59a09d1ac0a1", "filename": "src/test/ui/parser/issue-14303-path.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fparser%2Fissue-14303-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fparser%2Fissue-14303-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-14303-path.stderr?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -1,8 +1,14 @@\n error: lifetime parameters must be declared prior to type parameters\n-  --> $DIR/issue-14303-path.rs:1:37\n+  --> $DIR/issue-14303-path.rs:10:40\n    |\n-LL | fn bar<'a, T>(x: mymodule::X<'a, T, 'b, 'c>) {}\n-   |                                     ^^\n+LL | fn bar<'a, 'b, 'c, T>(x: foo::X<'a, T, 'b, 'c>) {}\n+   |                                        ^^  ^^ must be declared prior to type parameters\n+   |                                        |\n+   |                                        must be declared prior to type parameters\n+help: move the lifetime parameters prior to the first type parameter\n+   |\n+LL | fn bar<'a, 'b, 'c, T>(x: foo::X<'a, 'b, 'c, T>) {}\n+   |                                     ^^^ ^^^ --\n \n error: aborting due to previous error\n "}, {"sha": "04cd43d0b10714af5d02205711dbf05ea34b29e8", "filename": "src/test/ui/parser/issue-17383.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fparser%2Fissue-17383.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fparser%2Fissue-17383.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-17383.rs?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -1,8 +1,7 @@\n enum X {\n-    A =\n-        b'a' //~ ERROR discriminator values can only be used with a field-less enum\n-    ,\n-    B(isize)\n+    A = 3,\n+    //~^ ERROR discriminator values can only be used with a field-less enum\n+    B(usize)\n }\n \n fn main() {}"}, {"sha": "57caa3372a629dc076a17a7cc51f0e015c4f54ef", "filename": "src/test/ui/parser/issue-17383.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fparser%2Fissue-17383.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fparser%2Fissue-17383.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-17383.stderr?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -1,8 +1,8 @@\n error: discriminator values can only be used with a field-less enum\n-  --> $DIR/issue-17383.rs:3:9\n+  --> $DIR/issue-17383.rs:2:9\n    |\n-LL |         b'a' //~ ERROR discriminator values can only be used with a field-less enum\n-   |         ^^^^\n+LL |     A = 3,\n+   |         ^ only valid in field-less enums\n \n error: aborting due to previous error\n "}, {"sha": "3c34b0d8febbcc3193074819cdec00a39f57b6d5", "filename": "src/test/ui/parser/issue-1802-1.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fparser%2Fissue-1802-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fparser%2Fissue-1802-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-1802-1.rs?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -1,4 +1,7 @@\n-// error-pattern:no valid digits found for number\n+fn log(a: i32, b: i32) {}\n+\n fn main() {\n+    let error = 42;\n     log(error, 0b);\n+    //~^ ERROR no valid digits found for number\n }"}, {"sha": "b7d003df56b71ea11e69ea5c0b256dbb00310559", "filename": "src/test/ui/parser/issue-1802-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fparser%2Fissue-1802-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fparser%2Fissue-1802-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-1802-1.stderr?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -1,5 +1,5 @@\n error: no valid digits found for number\n-  --> $DIR/issue-1802-1.rs:3:16\n+  --> $DIR/issue-1802-1.rs:5:16\n    |\n LL |     log(error, 0b);\n    |                ^^"}, {"sha": "3c34b0d8febbcc3193074819cdec00a39f57b6d5", "filename": "src/test/ui/parser/issue-1802-2.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fparser%2Fissue-1802-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fparser%2Fissue-1802-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-1802-2.rs?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -1,4 +1,7 @@\n-// error-pattern:no valid digits found for number\n+fn log(a: i32, b: i32) {}\n+\n fn main() {\n-    log(error, 0b_usize);\n+    let error = 42;\n+    log(error, 0b);\n+    //~^ ERROR no valid digits found for number\n }"}, {"sha": "8491dd07cb788aad2e3b7d983be0400b4b78b41a", "filename": "src/test/ui/parser/issue-1802-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fparser%2Fissue-1802-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fparser%2Fissue-1802-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-1802-2.stderr?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -1,8 +1,8 @@\n error: no valid digits found for number\n-  --> $DIR/issue-1802-2.rs:3:16\n+  --> $DIR/issue-1802-2.rs:5:16\n    |\n-LL |     log(error, 0b_usize);\n-   |                ^^^\n+LL |     log(error, 0b);\n+   |                ^^\n \n error: aborting due to previous error\n "}, {"sha": "d619688e10183d03ca870456e1f1cb783d3b18c9", "filename": "src/test/ui/parser/issue-27255.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fparser%2Fissue-27255.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fparser%2Fissue-27255.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-27255.rs?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -1,3 +1,10 @@\n-impl A .. {} //~ ERROR\n+trait A {}\n+\n+impl A .. {}\n+//~^ ERROR missing `for` in a trait impl\n+//~| ERROR `impl Trait for .. {}` is an obsolete syntax\n+\n+impl A      usize {}\n+//~^ ERROR missing `for` in a trait impl\n \n fn main() {}"}, {"sha": "391a23556c4e07fcd600814950b9b328f9719cc8", "filename": "src/test/ui/parser/issue-27255.stderr", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fparser%2Fissue-27255.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fparser%2Fissue-27255.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-27255.stderr?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -1,8 +1,22 @@\n error: missing `for` in a trait impl\n-  --> $DIR/issue-27255.rs:1:7\n+  --> $DIR/issue-27255.rs:3:7\n    |\n-LL | impl A .. {} //~ ERROR\n-   |       ^\n+LL | impl A .. {}\n+   |       ^ help: add `for` here\n \n-error: aborting due to previous error\n+error: missing `for` in a trait impl\n+  --> $DIR/issue-27255.rs:7:7\n+   |\n+LL | impl A      usize {}\n+   |       ^^^^^^ help: add `for` here\n+\n+error: `impl Trait for .. {}` is an obsolete syntax\n+  --> $DIR/issue-27255.rs:3:1\n+   |\n+LL | impl A .. {}\n+   | ^^^^^^^^^^^^\n+   |\n+   = help: use `auto trait Trait {}` instead\n+\n+error: aborting due to 3 previous errors\n "}, {"sha": "a889513eaee520b84ae590e2ee69c6da0b8f9085", "filename": "src/test/ui/parser/issue-32214.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fparser%2Fissue-32214.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fparser%2Fissue-32214.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-32214.stderr?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -2,7 +2,7 @@ error: type parameters must be declared prior to associated type bindings\n   --> $DIR/issue-32214.rs:5:34\n    |\n LL | pub fn test<W, I: Trait<Item=(), W> >() {}\n-   |                                  ^\n+   |                                  ^ must be declared prior to associated type bindings\n \n error: aborting due to previous error\n "}, {"sha": "1fa23b8b73c9e3e941ecca75dda1167695d77fba", "filename": "src/test/ui/parser/lex-bad-numeric-literals.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fparser%2Flex-bad-numeric-literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fparser%2Flex-bad-numeric-literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bad-numeric-literals.stderr?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -110,7 +110,7 @@ error: octal float literal is not supported\n   --> $DIR/lex-bad-numeric-literals.rs:5:5\n    |\n LL |     0o2f32; //~ ERROR: octal float literal is not supported\n-   |     ^^^^^^\n+   |     ^^^^^^ not supported\n \n error: int literal is too large\n   --> $DIR/lex-bad-numeric-literals.rs:16:5\n@@ -128,13 +128,13 @@ error: octal float literal is not supported\n   --> $DIR/lex-bad-numeric-literals.rs:23:5\n    |\n LL |     0o123f64; //~ ERROR: octal float literal is not supported\n-   |     ^^^^^^^^\n+   |     ^^^^^^^^ not supported\n \n error: binary float literal is not supported\n   --> $DIR/lex-bad-numeric-literals.rs:25:5\n    |\n LL |     0b101f64; //~ ERROR: binary float literal is not supported\n-   |     ^^^^^^^^\n+   |     ^^^^^^^^ not supported\n \n error: aborting due to 23 previous errors\n "}, {"sha": "a42d2cbc442f0c89b6bed838cd662825cc84ddbc", "filename": "src/test/ui/parser/no-binary-float-literal.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fparser%2Fno-binary-float-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fparser%2Fno-binary-float-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fno-binary-float-literal.rs?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -1,7 +1,8 @@\n-// error-pattern:binary float literal is not supported\n-\n fn main() {\n     0b101010f64;\n+    //~^ ERROR binary float literal is not supported\n     0b101.010;\n+    //~^ ERROR binary float literal is not supported\n     0b101p4f64;\n+    //~^ ERROR invalid suffix `p4f64` for numeric literal\n }"}, {"sha": "21f415bcfb0003b22a24dbf8684d7cfdb53489c1", "filename": "src/test/ui/parser/no-binary-float-literal.stderr", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fparser%2Fno-binary-float-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fparser%2Fno-binary-float-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fno-binary-float-literal.stderr?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -1,8 +1,22 @@\n error: binary float literal is not supported\n-  --> $DIR/no-binary-float-literal.rs:5:5\n+  --> $DIR/no-binary-float-literal.rs:4:5\n    |\n LL |     0b101.010;\n    |     ^^^^^^^^^\n \n-error: aborting due to previous error\n+error: binary float literal is not supported\n+  --> $DIR/no-binary-float-literal.rs:2:5\n+   |\n+LL |     0b101010f64;\n+   |     ^^^^^^^^^^^ not supported\n+\n+error: invalid suffix `p4f64` for numeric literal\n+  --> $DIR/no-binary-float-literal.rs:6:5\n+   |\n+LL |     0b101p4f64;\n+   |     ^^^^^^^^^^ invalid suffix `p4f64`\n+   |\n+   = help: the suffix must be one of the integral types (`u32`, `isize`, etc)\n+\n+error: aborting due to 3 previous errors\n "}, {"sha": "bf11dee08338e91184dbdc198b44c48c11417dc5", "filename": "src/test/ui/parser/no-hex-float-literal.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fparser%2Fno-hex-float-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fparser%2Fno-hex-float-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fno-hex-float-literal.rs?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -1,7 +1,9 @@\n-// error-pattern:hexadecimal float literal is not supported\n-\n fn main() {\n     0xABC.Df;\n+    //~^ ERROR `{integer}` is a primitive type and therefore doesn't have fields\n     0x567.89;\n+    //~^ ERROR hexadecimal float literal is not supported\n     0xDEAD.BEEFp-2f;\n+    //~^ ERROR invalid suffix `f` for float literal\n+    //~| ERROR `{integer}` is a primitive type and therefore doesn't have fields\n }"}, {"sha": "258ab06d5ee2f2940c7ef45405be18782cfbeb49", "filename": "src/test/ui/parser/no-hex-float-literal.stderr", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fparser%2Fno-hex-float-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fparser%2Fno-hex-float-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fno-hex-float-literal.stderr?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -1,8 +1,29 @@\n error: hexadecimal float literal is not supported\n-  --> $DIR/no-hex-float-literal.rs:5:5\n+  --> $DIR/no-hex-float-literal.rs:4:5\n    |\n LL |     0x567.89;\n    |     ^^^^^^^^\n \n-error: aborting due to previous error\n+error: invalid suffix `f` for float literal\n+  --> $DIR/no-hex-float-literal.rs:6:18\n+   |\n+LL |     0xDEAD.BEEFp-2f;\n+   |                  ^^ invalid suffix `f`\n+   |\n+   = help: valid suffixes are `f32` and `f64`\n+\n+error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n+  --> $DIR/no-hex-float-literal.rs:2:11\n+   |\n+LL |     0xABC.Df;\n+   |           ^^\n+\n+error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n+  --> $DIR/no-hex-float-literal.rs:6:12\n+   |\n+LL |     0xDEAD.BEEFp-2f;\n+   |            ^^^^^\n+\n+error: aborting due to 4 previous errors\n \n+For more information about this error, try `rustc --explain E0610`."}, {"sha": "84779b09dc7c6ae68081c28386ffdc45e9072a4b", "filename": "src/test/ui/parser/no-unsafe-self.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fparser%2Fno-unsafe-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fparser%2Fno-unsafe-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fno-unsafe-self.stderr?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -2,37 +2,37 @@ error: cannot pass `self` by raw pointer\n   --> $DIR/no-unsafe-self.rs:4:17\n    |\n LL |     fn foo(*mut self); //~ ERROR cannot pass `self` by raw pointer\n-   |                 ^^^^\n+   |                 ^^^^ cannot pass `self` by raw pointer\n \n error: cannot pass `self` by raw pointer\n   --> $DIR/no-unsafe-self.rs:5:19\n    |\n LL |     fn baz(*const self); //~ ERROR cannot pass `self` by raw pointer\n-   |                   ^^^^\n+   |                   ^^^^ cannot pass `self` by raw pointer\n \n error: cannot pass `self` by raw pointer\n   --> $DIR/no-unsafe-self.rs:6:13\n    |\n LL |     fn bar(*self); //~ ERROR cannot pass `self` by raw pointer\n-   |             ^^^^\n+   |             ^^^^ cannot pass `self` by raw pointer\n \n error: cannot pass `self` by raw pointer\n   --> $DIR/no-unsafe-self.rs:11:17\n    |\n LL |     fn foo(*mut self) { } //~ ERROR cannot pass `self` by raw pointer\n-   |                 ^^^^\n+   |                 ^^^^ cannot pass `self` by raw pointer\n \n error: cannot pass `self` by raw pointer\n   --> $DIR/no-unsafe-self.rs:12:19\n    |\n LL |     fn baz(*const self) { } //~ ERROR cannot pass `self` by raw pointer\n-   |                   ^^^^\n+   |                   ^^^^ cannot pass `self` by raw pointer\n \n error: cannot pass `self` by raw pointer\n   --> $DIR/no-unsafe-self.rs:13:13\n    |\n LL |     fn bar(*self) { } //~ ERROR cannot pass `self` by raw pointer\n-   |             ^^^^\n+   |             ^^^^ cannot pass `self` by raw pointer\n \n error: aborting due to 6 previous errors\n "}, {"sha": "fd25499381a2849df1801e7b5733a52ff5bddf86", "filename": "src/test/ui/parser/pat-tuple-2.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-2.rs?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -1,5 +1,6 @@\n fn main() {\n-    match 0 {\n-        (pat, ..,) => {} //~ ERROR trailing comma is not permitted after `..`\n+    match (0, 1, 2) {\n+        (pat, ..,) => {}\n+        //~^ ERROR trailing comma is not permitted after `..`\n     }\n }"}, {"sha": "c3a5c39a8e32ac8e5953d180c76324a8037f30f0", "filename": "src/test/ui/parser/pat-tuple-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-2.stderr?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -1,8 +1,8 @@\n error: trailing comma is not permitted after `..`\n   --> $DIR/pat-tuple-2.rs:3:17\n    |\n-LL |         (pat, ..,) => {} //~ ERROR trailing comma is not permitted after `..`\n-   |                 ^\n+LL |         (pat, ..,) => {}\n+   |                 ^ trailing comma is not permitted after `..`\n \n error: aborting due to previous error\n "}, {"sha": "e1e975d3c3ea04b3a7d3a42b434d2a9f998ce65e", "filename": "src/test/ui/parser/pat-tuple-3.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-3.rs?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -1,5 +1,6 @@\n fn main() {\n-    match 0 {\n-        (.., pat, ..) => {} //~ ERROR `..` can only be used once per tuple or tuple struct pattern\n+    match (0, 1, 2) {\n+        (.., pat, ..) => {}\n+        //~^ ERROR `..` can only be used once per tuple or tuple struct pattern\n     }\n }"}, {"sha": "0ad7d27b94e541fed59b3572b2e326703d67595a", "filename": "src/test/ui/parser/pat-tuple-3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-3.stderr?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -1,8 +1,8 @@\n error: `..` can only be used once per tuple or tuple struct pattern\n   --> $DIR/pat-tuple-3.rs:3:19\n    |\n-LL |         (.., pat, ..) => {} //~ ERROR `..` can only be used once per tuple or tuple struct pattern\n-   |                   ^^\n+LL |         (.., pat, ..) => {}\n+   |                   ^^ can only be used once per pattern\n \n error: aborting due to previous error\n "}, {"sha": "83a3b727982b5401e648ab537302ba7ad03dc6a7", "filename": "src/test/ui/parser/tag-variant-disr-non-nullary.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fparser%2Ftag-variant-disr-non-nullary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fparser%2Ftag-variant-disr-non-nullary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftag-variant-disr-non-nullary.rs?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -1,12 +1,11 @@\n-//error-pattern: discriminator values can only be used with a field-less enum\n-\n-enum color {\n-    red = 0xff0000,\n-    green = 0x00ff00,\n-    blue = 0x0000ff,\n-    black = 0x000000,\n-    white = 0xffffff,\n-    other (str),\n+enum Color {\n+    Red = 0xff0000,\n+    //~^ ERROR discriminator values can only be used with a field-less enum\n+    Green = 0x00ff00,\n+    Blue = 0x0000ff,\n+    Black = 0x000000,\n+    White = 0xffffff,\n+    Other(usize),\n }\n \n fn main() {}"}, {"sha": "cc6312b45455155a216143df3cccfd1d9849ca93", "filename": "src/test/ui/parser/tag-variant-disr-non-nullary.stderr", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fparser%2Ftag-variant-disr-non-nullary.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fparser%2Ftag-variant-disr-non-nullary.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftag-variant-disr-non-nullary.stderr?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -1,8 +1,17 @@\n error: discriminator values can only be used with a field-less enum\n-  --> $DIR/tag-variant-disr-non-nullary.rs:8:13\n+  --> $DIR/tag-variant-disr-non-nullary.rs:2:11\n    |\n-LL |     white = 0xffffff,\n-   |             ^^^^^^^^\n+LL |     Red = 0xff0000,\n+   |           ^^^^^^^^ only valid in field-less enums\n+LL |     //~^ ERROR discriminator values can only be used with a field-less enum\n+LL |     Green = 0x00ff00,\n+   |             ^^^^^^^^ only valid in field-less enums\n+LL |     Blue = 0x0000ff,\n+   |            ^^^^^^^^ only valid in field-less enums\n+LL |     Black = 0x000000,\n+   |             ^^^^^^^^ only valid in field-less enums\n+LL |     White = 0xffffff,\n+   |             ^^^^^^^^ only valid in field-less enums\n \n error: aborting due to previous error\n "}, {"sha": "3ca45f1889c9ccdb6e2ec9eeced793245b16ee23", "filename": "src/test/ui/parser/where_with_bound.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fparser%2Fwhere_with_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fparser%2Fwhere_with_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fwhere_with_bound.rs?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -1,4 +1,5 @@\n fn foo<T>() where <T>::Item: ToString, T: Iterator { }\n //~^ ERROR generic parameters on `where` clauses are reserved for future use\n+//~| ERROR cannot find type `Item` in the crate root\n \n fn main() {}"}, {"sha": "ff98b3f5fed6121aeabf2d803bf5e39a03a6abda", "filename": "src/test/ui/parser/where_with_bound.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fparser%2Fwhere_with_bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fparser%2Fwhere_with_bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fwhere_with_bound.stderr?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -2,7 +2,14 @@ error: generic parameters on `where` clauses are reserved for future use\n   --> $DIR/where_with_bound.rs:1:19\n    |\n LL | fn foo<T>() where <T>::Item: ToString, T: Iterator { }\n-   |                   ^^^\n+   |                   ^^^ currently unsupported\n \n-error: aborting due to previous error\n+error[E0412]: cannot find type `Item` in the crate root\n+  --> $DIR/where_with_bound.rs:1:24\n+   |\n+LL | fn foo<T>() where <T>::Item: ToString, T: Iterator { }\n+   |                        ^^^^ not found in the crate root\n+\n+error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0412`."}, {"sha": "c4d444764457749349cde3fa58e13125656f32a7", "filename": "src/test/ui/rfc-2126-extern-in-paths/auxiliary/xcrate.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/03acbd71c977cd63ce5f39ba9b6fe9ffd578785a/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fauxiliary%2Fxcrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03acbd71c977cd63ce5f39ba9b6fe9ffd578785a/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fauxiliary%2Fxcrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fauxiliary%2Fxcrate.rs?ref=03acbd71c977cd63ce5f39ba9b6fe9ffd578785a", "patch": "@@ -1,5 +0,0 @@\n-#[derive(Debug)]\n-pub struct S;\n-\n-#[derive(Debug)]\n-pub struct Z;"}, {"sha": "5e5e6c6eebfad087d20d73d23fe104d193648d65", "filename": "src/test/ui/rfc-2126-extern-in-paths/non-existent-1.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/03acbd71c977cd63ce5f39ba9b6fe9ffd578785a/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fnon-existent-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03acbd71c977cd63ce5f39ba9b6fe9ffd578785a/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fnon-existent-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fnon-existent-1.rs?ref=03acbd71c977cd63ce5f39ba9b6fe9ffd578785a", "patch": "@@ -1,5 +0,0 @@\n-#![feature(extern_in_paths)]\n-\n-use extern::xcrate::S; //~ ERROR unresolved import `extern::xcrate`\n-\n-fn main() {}"}, {"sha": "5b7528c2ed9aa031d6730d3691cbb977fd7ab5ba", "filename": "src/test/ui/rfc-2126-extern-in-paths/non-existent-1.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/03acbd71c977cd63ce5f39ba9b6fe9ffd578785a/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fnon-existent-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03acbd71c977cd63ce5f39ba9b6fe9ffd578785a/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fnon-existent-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fnon-existent-1.stderr?ref=03acbd71c977cd63ce5f39ba9b6fe9ffd578785a", "patch": "@@ -1,9 +0,0 @@\n-error[E0432]: unresolved import `extern::xcrate`\n-  --> $DIR/non-existent-1.rs:3:13\n-   |\n-LL | use extern::xcrate::S; //~ ERROR unresolved import `extern::xcrate`\n-   |             ^^^^^^ could not find `xcrate` in `extern`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0432`."}, {"sha": "0f26eef5d7e1b4bd00ddf2ae544e0ccf76b6f9b9", "filename": "src/test/ui/rfc-2126-extern-in-paths/non-existent-2.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/03acbd71c977cd63ce5f39ba9b6fe9ffd578785a/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fnon-existent-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03acbd71c977cd63ce5f39ba9b6fe9ffd578785a/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fnon-existent-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fnon-existent-2.rs?ref=03acbd71c977cd63ce5f39ba9b6fe9ffd578785a", "patch": "@@ -1,6 +0,0 @@\n-#![feature(extern_in_paths)]\n-\n-fn main() {\n-    let s = extern::xcrate::S;\n-    //~^ ERROR failed to resolve: could not find `xcrate` in `extern`\n-}"}, {"sha": "21c2a0c14d60180712e80090787f64945a4a4f68", "filename": "src/test/ui/rfc-2126-extern-in-paths/non-existent-2.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/03acbd71c977cd63ce5f39ba9b6fe9ffd578785a/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fnon-existent-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03acbd71c977cd63ce5f39ba9b6fe9ffd578785a/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fnon-existent-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fnon-existent-2.stderr?ref=03acbd71c977cd63ce5f39ba9b6fe9ffd578785a", "patch": "@@ -1,9 +0,0 @@\n-error[E0433]: failed to resolve: could not find `xcrate` in `extern`\n-  --> $DIR/non-existent-2.rs:4:21\n-   |\n-LL |     let s = extern::xcrate::S;\n-   |                     ^^^^^^ could not find `xcrate` in `extern`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0433`."}, {"sha": "1875fb99fe893562792bdc174da54a0b535dc6e7", "filename": "src/test/ui/rfc-2126-extern-in-paths/non-existent-3.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/03acbd71c977cd63ce5f39ba9b6fe9ffd578785a/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fnon-existent-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03acbd71c977cd63ce5f39ba9b6fe9ffd578785a/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fnon-existent-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fnon-existent-3.rs?ref=03acbd71c977cd63ce5f39ba9b6fe9ffd578785a", "patch": "@@ -1,5 +0,0 @@\n-#![feature(extern_in_paths)]\n-\n-use extern::ycrate; //~ ERROR unresolved import `extern::ycrate`\n-\n-fn main() {}"}, {"sha": "e2e7df648c62cd568b7e85e95215850ef589397e", "filename": "src/test/ui/rfc-2126-extern-in-paths/non-existent-3.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/03acbd71c977cd63ce5f39ba9b6fe9ffd578785a/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fnon-existent-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03acbd71c977cd63ce5f39ba9b6fe9ffd578785a/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fnon-existent-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fnon-existent-3.stderr?ref=03acbd71c977cd63ce5f39ba9b6fe9ffd578785a", "patch": "@@ -1,9 +0,0 @@\n-error[E0432]: unresolved import `extern::ycrate`\n-  --> $DIR/non-existent-3.rs:3:5\n-   |\n-LL | use extern::ycrate; //~ ERROR unresolved import `extern::ycrate`\n-   |     ^^^^^^^^^^^^^^ no `ycrate` external crate\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0432`."}, {"sha": "1d5af1e9d8636e2a862ccf5fd59c08ba2f1ee2ba", "filename": "src/test/ui/rfc-2126-extern-in-paths/single-segment.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/03acbd71c977cd63ce5f39ba9b6fe9ffd578785a/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fsingle-segment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03acbd71c977cd63ce5f39ba9b6fe9ffd578785a/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fsingle-segment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fsingle-segment.rs?ref=03acbd71c977cd63ce5f39ba9b6fe9ffd578785a", "patch": "@@ -1,13 +0,0 @@\n-// aux-build:xcrate.rs\n-// compile-flags:--extern xcrate\n-\n-#![feature(extern_in_paths)]\n-\n-use extern; //~ ERROR unresolved import `extern`\n-            //~^ NOTE no `extern` in the root\n-use extern::*; //~ ERROR cannot glob-import all possible crates\n-\n-fn main() {\n-    let s = extern::xcrate; //~ ERROR expected value, found module `extern::xcrate`\n-                            //~^ NOTE not a value\n-}"}, {"sha": "2d8ecd48d4825feb0629c69cee8cf2d9f892c822", "filename": "src/test/ui/rfc-2126-extern-in-paths/single-segment.stderr", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/03acbd71c977cd63ce5f39ba9b6fe9ffd578785a/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fsingle-segment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03acbd71c977cd63ce5f39ba9b6fe9ffd578785a/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fsingle-segment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fsingle-segment.stderr?ref=03acbd71c977cd63ce5f39ba9b6fe9ffd578785a", "patch": "@@ -1,22 +0,0 @@\n-error: cannot glob-import all possible crates\n-  --> $DIR/single-segment.rs:8:5\n-   |\n-LL | use extern::*; //~ ERROR cannot glob-import all possible crates\n-   |     ^^^^^^^^^\n-\n-error[E0432]: unresolved import `extern`\n-  --> $DIR/single-segment.rs:6:5\n-   |\n-LL | use extern; //~ ERROR unresolved import `extern`\n-   |     ^^^^^^ no `extern` in the root\n-\n-error[E0423]: expected value, found module `extern::xcrate`\n-  --> $DIR/single-segment.rs:11:13\n-   |\n-LL |     let s = extern::xcrate; //~ ERROR expected value, found module `extern::xcrate`\n-   |             ^^^^^^^^^^^^^^ not a value\n-\n-error: aborting due to 3 previous errors\n-\n-Some errors occurred: E0423, E0432.\n-For more information about an error, try `rustc --explain E0423`."}, {"sha": "82935af0a81d221df375c446921d7433cec024a7", "filename": "src/test/ui/suggestions/recover-from-semicolon-trailing-item.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fsuggestions%2Frecover-from-semicolon-trailing-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fsuggestions%2Frecover-from-semicolon-trailing-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Frecover-from-semicolon-trailing-item.rs?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -0,0 +1,16 @@\n+// verify that after encountering a semicolon after an item the parser recovers\n+mod M {};\n+//~^ ERROR expected item, found `;`\n+struct S {};\n+//~^ ERROR expected item, found `;`\n+fn foo(a: usize) {};\n+//~^ ERROR expected item, found `;`\n+fn main() {\n+    struct X {};  // ok\n+    let _: usize = S {};\n+    //~^ ERROR mismatched types\n+    let _: usize = X {};\n+    //~^ ERROR mismatched types\n+    foo(\"\");\n+    //~^ ERROR mismatched types\n+}"}, {"sha": "9a47a1efb752afe5b4fbe89d27907a84158483e5", "filename": "src/test/ui/suggestions/recover-from-semicolon-trailing-item.stderr", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fsuggestions%2Frecover-from-semicolon-trailing-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Fsuggestions%2Frecover-from-semicolon-trailing-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Frecover-from-semicolon-trailing-item.stderr?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -0,0 +1,50 @@\n+error: expected item, found `;`\n+  --> $DIR/recover-from-semicolon-trailing-item.rs:2:9\n+   |\n+LL | mod M {};\n+   |         ^ help: remove this semicolon\n+\n+error: expected item, found `;`\n+  --> $DIR/recover-from-semicolon-trailing-item.rs:4:12\n+   |\n+LL | struct S {};\n+   |            ^ help: remove this semicolon\n+   |\n+   = help: braced struct declarations are not followed by a semicolon\n+\n+error: expected item, found `;`\n+  --> $DIR/recover-from-semicolon-trailing-item.rs:6:20\n+   |\n+LL | fn foo(a: usize) {};\n+   |                    ^ help: remove this semicolon\n+\n+error[E0308]: mismatched types\n+  --> $DIR/recover-from-semicolon-trailing-item.rs:10:20\n+   |\n+LL |     let _: usize = S {};\n+   |                    ^^^^ expected usize, found struct `S`\n+   |\n+   = note: expected type `usize`\n+              found type `S`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/recover-from-semicolon-trailing-item.rs:12:20\n+   |\n+LL |     let _: usize = X {};\n+   |                    ^^^^ expected usize, found struct `main::X`\n+   |\n+   = note: expected type `usize`\n+              found type `main::X`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/recover-from-semicolon-trailing-item.rs:14:9\n+   |\n+LL |     foo(\"\");\n+   |         ^^ expected usize, found reference\n+   |\n+   = note: expected type `usize`\n+              found type `&'static str`\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "a12429c868ed028d414575a5d567a27bd5967208", "filename": "src/test/ui/traits/trait-object-vs-lifetime.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-vs-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-vs-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-vs-lifetime.rs?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -1,8 +1,6 @@\n // A few contrived examples where lifetime should (or should not) be parsed as an object type.\n // Lifetimes parsed as types are still rejected later by semantic checks.\n \n-// compile-flags: -Z continue-parse-after-error\n-\n struct S<'a, T>(&'a u8, T);\n \n fn main() {"}, {"sha": "4cc96bae5cd171b4f0b51dc3f2fb3551e2a591fc", "filename": "src/test/ui/traits/trait-object-vs-lifetime.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-vs-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-vs-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-vs-lifetime.stderr?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -1,29 +1,33 @@\n error: lifetime parameters must be declared prior to type parameters\n-  --> $DIR/trait-object-vs-lifetime.rs:16:25\n+  --> $DIR/trait-object-vs-lifetime.rs:14:25\n    |\n LL |     let _: S<'static +, 'static>;\n-   |                         ^^^^^^^\n+   |                         ^^^^^^^ must be declared prior to type parameters\n+help: move the lifetime parameter prior to the first type parameter\n+   |\n+LL |     let _: S<'static, 'static +>;\n+   |              ^^^^^^^^         --\n \n error[E0224]: at least one non-builtin trait is required for an object type\n-  --> $DIR/trait-object-vs-lifetime.rs:11:23\n+  --> $DIR/trait-object-vs-lifetime.rs:9:23\n    |\n LL |     let _: S<'static, 'static +>;\n    |                       ^^^^^^^^^\n \n error[E0107]: wrong number of lifetime arguments: expected 1, found 2\n-  --> $DIR/trait-object-vs-lifetime.rs:13:23\n+  --> $DIR/trait-object-vs-lifetime.rs:11:23\n    |\n LL |     let _: S<'static, 'static>;\n    |                       ^^^^^^^ unexpected lifetime argument\n \n error[E0107]: wrong number of type arguments: expected 1, found 0\n-  --> $DIR/trait-object-vs-lifetime.rs:13:12\n+  --> $DIR/trait-object-vs-lifetime.rs:11:12\n    |\n LL |     let _: S<'static, 'static>;\n    |            ^^^^^^^^^^^^^^^^^^^ expected 1 type argument\n \n error[E0224]: at least one non-builtin trait is required for an object type\n-  --> $DIR/trait-object-vs-lifetime.rs:16:14\n+  --> $DIR/trait-object-vs-lifetime.rs:14:14\n    |\n LL |     let _: S<'static +, 'static>;\n    |              ^^^^^^^^^"}]}