{"sha": "a73edc09448ac5b8f9a8a08c8c654db315d54abc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3M2VkYzA5NDQ4YWM1YjhmOWE4YTA4YzhjNjU0ZGIzMTVkNTRhYmM=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2017-06-01T04:22:15Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2017-06-01T05:06:45Z"}, "message": "add tests and fixes", "tree": {"sha": "c6744d5f8f25f6753b2db5b460a513f1d681d0bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6744d5f8f25f6753b2db5b460a513f1d681d0bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a73edc09448ac5b8f9a8a08c8c654db315d54abc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a73edc09448ac5b8f9a8a08c8c654db315d54abc", "html_url": "https://github.com/rust-lang/rust/commit/a73edc09448ac5b8f9a8a08c8c654db315d54abc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a73edc09448ac5b8f9a8a08c8c654db315d54abc/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20728fb0d0d163ee7a390aa8c99b66089bb82d21", "url": "https://api.github.com/repos/rust-lang/rust/commits/20728fb0d0d163ee7a390aa8c99b66089bb82d21", "html_url": "https://github.com/rust-lang/rust/commit/20728fb0d0d163ee7a390aa8c99b66089bb82d21"}], "stats": {"total": 256, "additions": 212, "deletions": 44}, "files": [{"sha": "6a0e8b70fd66e07de3ca3e627c6c52f15f043ad5", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a73edc09448ac5b8f9a8a08c8c654db315d54abc/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a73edc09448ac5b8f9a8a08c8c654db315d54abc/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=a73edc09448ac5b8f9a8a08c8c654db315d54abc", "patch": "@@ -330,6 +330,18 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n         if let Some((pat, arg, body)) = higher::for_loop(expr) {\n             check_for_loop(cx, pat, arg, body, expr);\n         }\n+\n+        // check for never_loop\n+        match expr.node {\n+            ExprWhile(_, ref block, _) |\n+            ExprLoop(ref block, _, _) => {\n+                if never_loop(block, &expr.id) {\n+                    span_lint(cx, NEVER_LOOP, expr.span, \"this loop never actually loops\");\n+                }\n+            },\n+            _ => (),\n+        }\n+\n         // check for `loop { if let {} else break }` that could be `while let`\n         // (also matches an explicit \"match\" instead of \"if let\")\n         // (even if the \"match\" or \"if let\" is used for declaration)\n@@ -342,9 +354,6 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                           \"empty `loop {}` detected. You may want to either use `panic!()` or add \\\n                            `std::thread::sleep(..);` to the loop body.\");\n             }\n-            if never_loop(block, &expr.id) {\n-                span_lint(cx, NEVER_LOOP, expr.span, \"this loop never actually loops\");\n-            }\n \n             // extract the expression from the first statement (if any) in a block\n             let inner_stmt_expr = extract_expr_from_first_stmt(block);\n@@ -456,14 +465,17 @@ fn contains_continue_expr(expr: &Expr, dest: &NodeId) -> bool {\n         ExprTupField(ref e, _) |\n         ExprAddrOf(_, ref e) |\n         ExprRepeat(ref e, _) => contains_continue_expr(e, dest),\n+        ExprArray(ref es) |\n+        ExprMethodCall(_, _, ref es) |\n+        ExprTup(ref es) => es.iter().any(|e| contains_continue_expr(e, dest)),\n+        ExprCall(ref e, ref es) => contains_continue_expr(e, dest) || es.iter().any(|e| contains_continue_expr(e, dest)),\n         ExprBinary(_, ref e1, ref e2) |\n         ExprAssign(ref e1, ref e2) |\n         ExprAssignOp(_, ref e1, ref e2) |\n         ExprIndex(ref e1, ref e2) => [e1, e2].iter().any(|e| contains_continue_expr(e, dest)),\n-        ExprArray(ref es) |\n-        ExprTup(ref es) |\n-        ExprMethodCall(_, _, ref es) => es.iter().any(|e| contains_continue_expr(e, dest)),\n-        ExprCall(ref e, ref es) => contains_continue_expr(e, dest) || es.iter().any(|e| contains_continue_expr(e, dest)),\n+        ExprIf(ref e, ref e2, ref e3) => [e, e2].iter().chain(e3.as_ref().iter()).any(|e| contains_continue_expr(e, dest)),\n+        ExprWhile(ref e, ref b, _) => contains_continue_expr(e, dest) || contains_continue_block(b, dest),\n+        ExprMatch(ref e, ref arms, _) => contains_continue_expr(e, dest) || arms.iter().any(|a| contains_continue_expr(&a.body, dest)),\n         ExprBlock(ref block) => contains_continue_block(block, dest),\n         ExprStruct(_, _, ref base) => base.as_ref().map_or(false, |e| contains_continue_expr(e, dest)),\n         ExprAgain(d) => d.target_id.opt_id().map_or(false, |id| id == *dest),\n@@ -501,8 +513,8 @@ fn loop_exit_expr(expr: &Expr) -> bool {\n         ExprTupField(ref e, _) |\n         ExprAddrOf(_, ref e) |\n         ExprRepeat(ref e, _) => loop_exit_expr(e),\n-        ExprMethodCall(_, _, ref es) => es.iter().any(|e| loop_exit_expr(e)),\n         ExprArray(ref es) |\n+        ExprMethodCall(_, _, ref es) |\n         ExprTup(ref es) => es.iter().any(|e| loop_exit_expr(e)),\n         ExprCall(ref e, ref es) => loop_exit_expr(e) || es.iter().any(|e| loop_exit_expr(e)),\n         ExprBinary(_, ref e1, ref e2) |"}, {"sha": "bd4f1bc8ee5d5efb39d5006dc6864960844da888", "filename": "clippy_tests/examples/for_loop.stderr", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a73edc09448ac5b8f9a8a08c8c654db315d54abc/clippy_tests%2Fexamples%2Ffor_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a73edc09448ac5b8f9a8a08c8c654db315d54abc/clippy_tests%2Fexamples%2Ffor_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_tests%2Fexamples%2Ffor_loop.stderr?ref=a73edc09448ac5b8f9a8a08c8c654db315d54abc", "patch": "@@ -53,6 +53,28 @@ error: for loop over `v.iter().next().ok_or(\"x not found\")`, which is a `Result`\n    = note: `-D for-loop-over-result` implied by `-D warnings`\n    = help: consider replacing `for x in v.iter().next().ok_or(\"x not found\")` with `if let Ok(x) = v.iter().next().ok_or(\"x not found\")`\n \n+error: this loop never actually loops\n+  --> for_loop.rs:52:5\n+   |\n+52 | /     while let Some(x) = option {\n+53 | |         println!(\"{}\", x);\n+54 | |         break;\n+55 | |     }\n+   | |_____^\n+   |\n+   = note: `-D never-loop` implied by `-D warnings`\n+\n+error: this loop never actually loops\n+  --> for_loop.rs:58:5\n+   |\n+58 | /     while let Ok(x) = result {\n+59 | |         println!(\"{}\", x);\n+60 | |         break;\n+61 | |     }\n+   | |_____^\n+   |\n+   = note: `-D never-loop` implied by `-D warnings`\n+\n error: the loop variable `i` is only used to index `vec`.\n   --> for_loop.rs:84:5\n    |"}, {"sha": "981331a1d6bde52bb4917b5f640951addb98a9dc", "filename": "clippy_tests/examples/never_loop.rs", "status": "modified", "additions": 86, "deletions": 25, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/a73edc09448ac5b8f9a8a08c8c654db315d54abc/clippy_tests%2Fexamples%2Fnever_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a73edc09448ac5b8f9a8a08c8c654db315d54abc/clippy_tests%2Fexamples%2Fnever_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_tests%2Fexamples%2Fnever_loop.rs?ref=a73edc09448ac5b8f9a8a08c8c654db315d54abc", "patch": "@@ -1,57 +1,118 @@\n #![feature(plugin)]\n #![plugin(clippy)]\n+#![allow(single_match, unused_assignments, unused_variables)]\n \n-#![warn(never_loop)]\n-#![allow(single_match, while_true)]\n-\n-fn break_stmt() {\n-    loop {\n+fn test1() {\n+    let mut x = 0;\n+    loop { // never_loop\n+        x += 1;\n+        if x == 1 {\n+            return\n+        }\n         break;\n     }\n }\n \n-fn conditional_break() {\n-    let mut x = 5;\n+fn test2() {\n+    let mut x = 0;\n     loop {\n-        x -= 1;\n+        x += 1;\n         if x == 1 {\n             break\n         }\n     }\n }\n \n-fn nested_loop() {\n-    loop {\n-        while true {\n-            break\n-        }\n+fn test3() {\n+    let mut x = 0;\n+    loop { // never loops\n+        x += 1;\n         break\n     }\n }\n \n-fn if_false() {\n-    let x = 1;\n+fn test4() {\n+    let mut x = 1;\n     loop {\n-        if x == 1 {\n-            return\n+        x += 1;\n+        match x {\n+            5 => return,\n+            _ => (),\n         }\n     }\n }\n \n-fn match_false() {\n-    let x = 1;\n+fn test5() {\n+    let i = 0;\n+\tloop { // never loops\n+        while i == 0 { // never loops\n+            break\n+        }\n+        return\n+\t}\n+}\n+\n+fn test6() {\n+    let mut x = 0;\n+    'outer: loop { // never loops\n+        x += 1;\n+\t\tloop { // never loops\n+            if x == 5 { break }\n+\t\t\tcontinue 'outer\n+\t\t}\n+\t\treturn\n+\t}\n+}\n+\n+fn test7() {\n+    let mut x = 0;\n     loop {\n+        x += 1;\n         match x {\n-            1 => return,\n+            1 => continue,\n             _ => (),\n         }\n+        return\n+    }\n+}\n+\n+fn test8() {\n+    let mut x = 0;\n+    loop {\n+        x += 1;\n+        match x {\n+            5 => return,\n+            _ => continue,\n+        }\n+    }\n+}\n+\n+fn test9() {\n+    let x = Some(1);\n+    while let Some(y) = x { // never loops\n+        return\n+    }\n+}\n+\n+fn test10() {\n+    for x in 0..10 { // never loops\n+        match x {\n+            1 => break,\n+            _ => return,\n+        }\n     }\n }\n \n fn main() {\n-    break_stmt();\n-    conditional_break();\n-    nested_loop();\n-    if_false();\n-    match_false();\n+    test1();\n+    test2();\n+    test3();\n+    test4();\n+    test5();\n+    test6();\n+    test7();\n+    test8();\n+    test9();\n+    test10();\n }\n+"}, {"sha": "1ad1ca8de89c7e59cce66955af690dd2e3237a97", "filename": "clippy_tests/examples/never_loop.stderr", "status": "modified", "additions": 84, "deletions": 11, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/a73edc09448ac5b8f9a8a08c8c654db315d54abc/clippy_tests%2Fexamples%2Fnever_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a73edc09448ac5b8f9a8a08c8c654db315d54abc/clippy_tests%2Fexamples%2Fnever_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_tests%2Fexamples%2Fnever_loop.stderr?ref=a73edc09448ac5b8f9a8a08c8c654db315d54abc", "patch": "@@ -1,26 +1,99 @@\n error: this loop never actually loops\n-  --> never_loop.rs:8:5\n+  --> never_loop.rs:7:5\n    |\n-8  | /     loop {\n-9  | |         break;\n-10 | |     }\n+7  | /     loop { // never_loop\n+8  | |         x += 1;\n+9  | |         if x == 1 {\n+10 | |             return\n+11 | |         }\n+12 | |         break;\n+13 | |     }\n    | |_____^\n    |\n    = note: `-D never-loop` implied by `-D warnings`\n \n error: this loop never actually loops\n-  --> never_loop.rs:24:5\n+  --> never_loop.rs:28:5\n    |\n-24 | /     loop {\n-25 | |         while true {\n-26 | |             break\n-27 | |         }\n-28 | |         break\n-29 | |     }\n+28 | /     loop { // never loops\n+29 | |         x += 1;\n+30 | |         break\n+31 | |     }\n    | |_____^\n    |\n    = note: `-D never-loop` implied by `-D warnings`\n \n+error: this loop never actually loops\n+  --> never_loop.rs:47:2\n+   |\n+47 | / \tloop { // never loops\n+48 | | \t       while i == 0 { // never loops\n+49 | | \t           break\n+50 | | \t       }\n+51 | | \t       return\n+52 | | \t}\n+   | |__^\n+   |\n+   = note: `-D never-loop` implied by `-D warnings`\n+\n+error: this loop never actually loops\n+  --> never_loop.rs:48:9\n+   |\n+48 | /         while i == 0 { // never loops\n+49 | |             break\n+50 | |         }\n+   | |_________^\n+   |\n+   = note: `-D never-loop` implied by `-D warnings`\n+\n+error: this loop never actually loops\n+  --> never_loop.rs:57:5\n+   |\n+57 | /     'outer: loop { // never loops\n+58 | |         x += 1;\n+59 | | \t\tloop { // never loops\n+60 | |             if x == 5 { break }\n+...  |\n+63 | | \t\treturn\n+64 | | \t}\n+   | |__^\n+   |\n+   = note: `-D never-loop` implied by `-D warnings`\n+\n+error: this loop never actually loops\n+  --> never_loop.rs:59:3\n+   |\n+59 | / \t\tloop { // never loops\n+60 | | \t\t          if x == 5 { break }\n+61 | | \t\t\tcontinue 'outer\n+62 | | \t\t}\n+   | |___^\n+   |\n+   = note: `-D never-loop` implied by `-D warnings`\n+\n+error: this loop never actually loops\n+  --> never_loop.rs:92:5\n+   |\n+92 | /     while let Some(y) = x { // never loops\n+93 | |         return\n+94 | |     }\n+   | |_____^\n+   |\n+   = note: `-D never-loop` implied by `-D warnings`\n+\n+error: this loop never actually loops\n+   --> never_loop.rs:98:5\n+    |\n+98  | /     for x in 0..10 { // never loops\n+99  | |         match x {\n+100 | |             1 => break,\n+101 | |             _ => return,\n+102 | |         }\n+103 | |     }\n+    | |_____^\n+    |\n+    = note: `-D never-loop` implied by `-D warnings`\n+\n error: aborting due to previous error(s)\n \n error: Could not compile `clippy_tests`."}]}