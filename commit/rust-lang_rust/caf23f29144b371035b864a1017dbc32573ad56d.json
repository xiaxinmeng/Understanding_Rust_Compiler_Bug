{"sha": "caf23f29144b371035b864a1017dbc32573ad56d", "node_id": "C_kwDOAAsO6NoAKGNhZjIzZjI5MTQ0YjM3MTAzNWI4NjRhMTAxN2RiYzMyNTczYWQ1NmQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-11T16:34:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-11T16:34:49Z"}, "message": "Auto merge of #12745 - jonas-schievink:metavar-exprs, r=jonas-schievink\n\nfeat: Implement `ignore`  and `index` metavar expression\n\nPart of https://github.com/rust-lang/rust-analyzer/issues/11952\n\nFixes https://github.com/rust-lang/rust-analyzer/issues/12675", "tree": {"sha": "fb862cc920bca222083f8423ec47a2be19b70c87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb862cc920bca222083f8423ec47a2be19b70c87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/caf23f29144b371035b864a1017dbc32573ad56d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/caf23f29144b371035b864a1017dbc32573ad56d", "html_url": "https://github.com/rust-lang/rust/commit/caf23f29144b371035b864a1017dbc32573ad56d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/caf23f29144b371035b864a1017dbc32573ad56d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7bb9327ada696acf281cedf50320660e038930a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7bb9327ada696acf281cedf50320660e038930a", "html_url": "https://github.com/rust-lang/rust/commit/f7bb9327ada696acf281cedf50320660e038930a"}, {"sha": "df66eb74ab008df203d6d470d824857b08f0e57a", "url": "https://api.github.com/repos/rust-lang/rust/commits/df66eb74ab008df203d6d470d824857b08f0e57a", "html_url": "https://github.com/rust-lang/rust/commit/df66eb74ab008df203d6d470d824857b08f0e57a"}], "stats": {"total": 113, "additions": 108, "deletions": 5}, "files": [{"sha": "30d39d52f385edf72de443fdf88dac010224ab73", "filename": "crates/hir-def/src/macro_expansion_tests/mbe.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/caf23f29144b371035b864a1017dbc32573ad56d/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caf23f29144b371035b864a1017dbc32573ad56d/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs?ref=caf23f29144b371035b864a1017dbc32573ad56d", "patch": "@@ -1612,3 +1612,21 @@ impl Foo {\n \"#]],\n     )\n }\n+\n+#[test]\n+fn test_metavar_exprs() {\n+    check(\n+        r#\"\n+macro_rules! m {\n+    ( $( $t:tt )* ) => ( $( ${ignore(t)} -${index()} )-* );\n+}\n+const _: i32 = m!(a b c);\n+    \"#,\n+        expect![[r#\"\n+macro_rules! m {\n+    ( $( $t:tt )* ) => ( $( ${ignore(t)} -${index()} )-* );\n+}\n+const _: i32 = -0--1--2;\n+    \"#]],\n+    );\n+}"}, {"sha": "8aff784087c30189383b9c92e4ec0c2544c774fa", "filename": "crates/hir-def/src/macro_expansion_tests/mbe/meta_syntax.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/caf23f29144b371035b864a1017dbc32573ad56d/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fmeta_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caf23f29144b371035b864a1017dbc32573ad56d/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fmeta_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fmeta_syntax.rs?ref=caf23f29144b371035b864a1017dbc32573ad56d", "patch": "@@ -16,7 +16,9 @@ macro_rules! m {\n     ($($i:ident)*) => ($_);\n     ($($true:ident)*) => ($true);\n     ($($false:ident)*) => ($false);\n+    (double_dollar) => ($$);\n     ($) => (m!($););\n+    ($($t:tt)*) => ($( ${ignore(t)} ${index()} )-*);\n }\n m!($);\n \"#,\n@@ -29,7 +31,9 @@ macro_rules! m {\n     ($($i:ident)*) => ($_);\n     ($($true:ident)*) => ($true);\n     ($($false:ident)*) => ($false);\n+    (double_dollar) => ($$);\n     ($) => (m!($););\n+    ($($t:tt)*) => ($( ${ignore(t)} ${index()} )-*);\n }\n m!($);\n \"#]],\n@@ -59,6 +63,8 @@ f3!();\n \n macro_rules! m1 { ($$i) => () }\n m1!();\n+macro_rules! m2 { () => ( ${invalid()} ) }\n+m2!();\n \"#,\n         expect![[r#\"\n macro_rules! i1 { invalid }\n@@ -80,6 +86,8 @@ macro_rules! f3 { ($i:_) => () }\n \n macro_rules! m1 { ($$i) => () }\n /* error: invalid macro definition: `$$` is not allowed on the pattern side */\n+macro_rules! m2 { () => ( ${invalid()} ) }\n+/* error: invalid macro definition: invalid metavariable expression */\n \"#]],\n     )\n }"}, {"sha": "ac691578d88738bc6ee7e686603a5f88a715aa7d", "filename": "crates/mbe/src/benchmark.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/caf23f29144b371035b864a1017dbc32573ad56d/crates%2Fmbe%2Fsrc%2Fbenchmark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caf23f29144b371035b864a1017dbc32573ad56d/crates%2Fmbe%2Fsrc%2Fbenchmark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fbenchmark.rs?ref=caf23f29144b371035b864a1017dbc32573ad56d", "patch": "@@ -179,6 +179,7 @@ fn invocation_fixtures(rules: &FxHashMap<String, DeclarativeMacro>) -> Vec<(Stri\n                 });\n                 parent.token_trees.push(subtree.into());\n             }\n+            Op::Ignore { .. } | Op::Index { .. } => {}\n         };\n \n         // Simple linear congruential generator for determistic result"}, {"sha": "3b857ad794df5ec3b3bd367a35d8976d45b74306", "filename": "crates/mbe/src/expander/matcher.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caf23f29144b371035b864a1017dbc32573ad56d/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caf23f29144b371035b864a1017dbc32573ad56d/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs?ref=caf23f29144b371035b864a1017dbc32573ad56d", "patch": "@@ -502,6 +502,7 @@ fn match_loop_inner<'t>(\n                 }\n                 try_push!(next_items, item);\n             }\n+            OpDelimited::Op(Op::Ignore { .. } | Op::Index { .. }) => {}\n             OpDelimited::Open => {\n                 if matches!(src.clone().next(), Some(tt::TokenTree::Subtree(..))) {\n                     item.dot.next();\n@@ -747,6 +748,7 @@ fn collect_vars(collector_fun: &mut impl FnMut(SmolStr), pattern: &MetaTemplate)\n             Op::Leaf(_) => (),\n             Op::Subtree { tokens, .. } => collect_vars(collector_fun, tokens),\n             Op::Repeat { tokens, .. } => collect_vars(collector_fun, tokens),\n+            Op::Ignore { .. } | Op::Index { .. } => {}\n         }\n     }\n }"}, {"sha": "93d29b6ffe96245ef43fff2233b6edb2b525a615", "filename": "crates/mbe/src/expander/transcriber.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/caf23f29144b371035b864a1017dbc32573ad56d/crates%2Fmbe%2Fsrc%2Fexpander%2Ftranscriber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caf23f29144b371035b864a1017dbc32573ad56d/crates%2Fmbe%2Fsrc%2Fexpander%2Ftranscriber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fexpander%2Ftranscriber.rs?ref=caf23f29144b371035b864a1017dbc32573ad56d", "patch": "@@ -103,6 +103,23 @@ fn expand_subtree(\n                 err = err.or(e);\n                 push_fragment(arena, fragment)\n             }\n+            Op::Ignore { name, id } => {\n+                // Expand the variable, but ignore the result. This registers the repetition count.\n+                expand_var(ctx, name, *id);\n+            }\n+            Op::Index { depth } => {\n+                let index = ctx\n+                    .nesting\n+                    .get(ctx.nesting.len() - 1 - (*depth as usize))\n+                    .map_or(0, |nest| nest.idx);\n+                arena.push(\n+                    tt::Leaf::Literal(tt::Literal {\n+                        text: index.to_string().into(),\n+                        id: tt::TokenId::unspecified(),\n+                    })\n+                    .into(),\n+                );\n+            }\n         }\n     }\n     // drain the elements added in this instance of expand_subtree"}, {"sha": "df3872b3e6ab5a0ec000a28ae20e412e8e599dfa", "filename": "crates/mbe/src/parser.rs", "status": "modified", "additions": 55, "deletions": 5, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/caf23f29144b371035b864a1017dbc32573ad56d/crates%2Fmbe%2Fsrc%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caf23f29144b371035b864a1017dbc32573ad56d/crates%2Fmbe%2Fsrc%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fparser.rs?ref=caf23f29144b371035b864a1017dbc32573ad56d", "patch": "@@ -51,6 +51,8 @@ impl MetaTemplate {\n #[derive(Clone, Debug, PartialEq, Eq)]\n pub(crate) enum Op {\n     Var { name: SmolStr, kind: Option<SmolStr>, id: tt::TokenId },\n+    Ignore { name: SmolStr, id: tt::TokenId },\n+    Index { depth: u32 },\n     Repeat { tokens: MetaTemplate, kind: RepeatKind, separator: Option<Separator> },\n     Leaf(tt::Leaf),\n     Subtree { tokens: MetaTemplate, delimiter: Option<tt::Delimiter> },\n@@ -113,11 +115,30 @@ fn next_op<'a>(first: &tt::TokenTree, src: &mut TtIter<'a>, mode: Mode) -> Resul\n                 Some(it) => it,\n             };\n             match second {\n-                tt::TokenTree::Subtree(subtree) => {\n-                    let (separator, kind) = parse_repeat(src)?;\n-                    let tokens = MetaTemplate::parse(subtree, mode)?;\n-                    Op::Repeat { tokens, separator, kind }\n-                }\n+                tt::TokenTree::Subtree(subtree) => match subtree.delimiter_kind() {\n+                    Some(tt::DelimiterKind::Parenthesis) => {\n+                        let (separator, kind) = parse_repeat(src)?;\n+                        let tokens = MetaTemplate::parse(subtree, mode)?;\n+                        Op::Repeat { tokens, separator, kind }\n+                    }\n+                    Some(tt::DelimiterKind::Brace) => match mode {\n+                        Mode::Template => {\n+                            parse_metavar_expr(&mut TtIter::new(subtree)).map_err(|()| {\n+                                ParseError::unexpected(\"invalid metavariable expression\")\n+                            })?\n+                        }\n+                        Mode::Pattern => {\n+                            return Err(ParseError::unexpected(\n+                                \"`${}` metavariable expressions are not allowed in matchers\",\n+                            ))\n+                        }\n+                    },\n+                    _ => {\n+                        return Err(ParseError::expected(\n+                            \"expected `$()` repetition or `${}` expression\",\n+                        ))\n+                    }\n+                },\n                 tt::TokenTree::Leaf(leaf) => match leaf {\n                     tt::Leaf::Ident(ident) if ident.text == \"crate\" => {\n                         // We simply produce identifier `$crate` here. And it will be resolved when lowering ast to Path.\n@@ -209,3 +230,32 @@ fn parse_repeat(src: &mut TtIter) -> Result<(Option<Separator>, RepeatKind), Par\n     }\n     Err(ParseError::InvalidRepeat)\n }\n+\n+fn parse_metavar_expr(src: &mut TtIter) -> Result<Op, ()> {\n+    let func = src.expect_ident()?;\n+    let args = src.expect_subtree()?;\n+\n+    if args.delimiter_kind() != Some(tt::DelimiterKind::Parenthesis) {\n+        return Err(());\n+    }\n+\n+    let mut args = TtIter::new(args);\n+\n+    let op = match &*func.text {\n+        \"ignore\" => {\n+            let ident = args.expect_ident()?;\n+            Op::Ignore { name: ident.text.clone(), id: ident.id }\n+        }\n+        \"index\" => {\n+            let depth = if args.len() == 0 { 0 } else { args.expect_u32_literal()? };\n+            Op::Index { depth }\n+        }\n+        _ => return Err(()),\n+    };\n+\n+    if args.next().is_some() {\n+        return Err(());\n+    }\n+\n+    Ok(op)\n+}"}, {"sha": "7aceb676c749e9e711dccb77acc98df444884c90", "filename": "crates/mbe/src/tt_iter.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/caf23f29144b371035b864a1017dbc32573ad56d/crates%2Fmbe%2Fsrc%2Ftt_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caf23f29144b371035b864a1017dbc32573ad56d/crates%2Fmbe%2Fsrc%2Ftt_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Ftt_iter.rs?ref=caf23f29144b371035b864a1017dbc32573ad56d", "patch": "@@ -73,6 +73,13 @@ impl<'a> TtIter<'a> {\n         }\n     }\n \n+    pub(crate) fn expect_u32_literal(&mut self) -> Result<u32, ()> {\n+        match self.expect_literal()? {\n+            tt::Leaf::Literal(lit) => lit.text.parse().map_err(drop),\n+            _ => Err(()),\n+        }\n+    }\n+\n     pub(crate) fn expect_punct(&mut self) -> Result<&'a tt::Punct, ()> {\n         match self.expect_leaf()? {\n             tt::Leaf::Punct(it) => Ok(it),"}]}