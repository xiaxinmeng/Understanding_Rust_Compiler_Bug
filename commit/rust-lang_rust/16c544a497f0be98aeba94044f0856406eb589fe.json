{"sha": "16c544a497f0be98aeba94044f0856406eb589fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2YzU0NGE0OTdmMGJlOThhZWJhOTQwNDRmMDg1NjQwNmViNTg5ZmU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-01-05T14:46:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-05T14:46:47Z"}, "message": "Merge #7171\n\n7171: Emit diagnostics for unresolved item-level macros r=jonas-schievink a=jonas-schievink\n\nWe have been emitting macro *expansion* errors for macro calls in item position, as well as expansion and resolution errors for macro calls in bodies. This fills in the last gap, which is *resolution* errors for macro calls in item position (ie. those that name resolution cares about).\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "a2e1f9d026b1a87fe79e755bc03856f78b5a1fd0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2e1f9d026b1a87fe79e755bc03856f78b5a1fd0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16c544a497f0be98aeba94044f0856406eb589fe", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf9HvXCRBK7hj4Ov3rIwAAdHIIAAZdJAeZNyv3NUvXHI54F8W0\nLUi5wsBaDql+dfkJNk6hT0wLQT/Tt3rMnRZ8Th7PiWdnLSuLNKpGNur0USkwusGq\nNR6lxUBXGxbL+IbBhlmZ1Q7LaxaXNbvxp81ZmmOy5UN3yKyM/szOJzUGldhS9HBx\no3OW0aM5Bms808MdI1jRzRrTwTjl20e3pHlbz6cjGe1gfHWTlaRwNAaWaKITApC9\ne89QKXdyLNW5AF2vj0trjU/1RkK6wtdziGISrS/gGcUKtEsn3VO9z9mTo2urDbm0\ndp0vPvOBrTEJOYvnlUOZdSarqdqWAJYgke1RjX8eoSaqVVZ96opEaAA1I0f5ZFQ=\n=Q8JY\n-----END PGP SIGNATURE-----\n", "payload": "tree a2e1f9d026b1a87fe79e755bc03856f78b5a1fd0\nparent c8d3d5694be065ffb1d52bc33e098ff610693097\nparent 3cb7c8b548883ed8dcf589193df058dcda0a5c64\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1609858007 +0000\ncommitter GitHub <noreply@github.com> 1609858007 +0000\n\nMerge #7171\n\n7171: Emit diagnostics for unresolved item-level macros r=jonas-schievink a=jonas-schievink\n\nWe have been emitting macro *expansion* errors for macro calls in item position, as well as expansion and resolution errors for macro calls in bodies. This fills in the last gap, which is *resolution* errors for macro calls in item position (ie. those that name resolution cares about).\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16c544a497f0be98aeba94044f0856406eb589fe", "html_url": "https://github.com/rust-lang/rust/commit/16c544a497f0be98aeba94044f0856406eb589fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16c544a497f0be98aeba94044f0856406eb589fe/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8d3d5694be065ffb1d52bc33e098ff610693097", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8d3d5694be065ffb1d52bc33e098ff610693097", "html_url": "https://github.com/rust-lang/rust/commit/c8d3d5694be065ffb1d52bc33e098ff610693097"}, {"sha": "3cb7c8b548883ed8dcf589193df058dcda0a5c64", "url": "https://api.github.com/repos/rust-lang/rust/commits/3cb7c8b548883ed8dcf589193df058dcda0a5c64", "html_url": "https://github.com/rust-lang/rust/commit/3cb7c8b548883ed8dcf589193df058dcda0a5c64"}], "stats": {"total": 33, "additions": 32, "deletions": 1}, "files": [{"sha": "77017e4ea97e3e5f7d338fb0695db08c79b222c2", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/16c544a497f0be98aeba94044f0856406eb589fe/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16c544a497f0be98aeba94044f0856406eb589fe/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=16c544a497f0be98aeba94044f0856406eb589fe", "patch": "@@ -13,7 +13,7 @@ use hir_expand::{\n     builtin_macro::find_builtin_macro,\n     name::{AsName, Name},\n     proc_macro::ProcMacroExpander,\n-    HirFileId, MacroCallId, MacroDefId, MacroDefKind,\n+    HirFileId, MacroCallId, MacroCallKind, MacroDefId, MacroDefKind,\n };\n use hir_expand::{InFile, MacroCallLoc};\n use rustc_hash::{FxHashMap, FxHashSet};\n@@ -860,6 +860,37 @@ impl DefCollector<'_> {\n     }\n \n     fn finish(mut self) -> CrateDefMap {\n+        // Emit diagnostics for all remaining unexpanded macros.\n+\n+        for directive in &self.unexpanded_macros {\n+            let mut error = None;\n+            directive.ast_id.as_call_id_with_errors(\n+                self.db,\n+                self.def_map.krate,\n+                |path| {\n+                    let resolved_res = self.def_map.resolve_path_fp_with_macro(\n+                        self.db,\n+                        ResolveMode::Other,\n+                        directive.module_id,\n+                        &path,\n+                        BuiltinShadowMode::Module,\n+                    );\n+                    resolved_res.resolved_def.take_macros()\n+                },\n+                &mut |e| {\n+                    error.get_or_insert(e);\n+                },\n+            );\n+\n+            if let Some(err) = error {\n+                self.def_map.diagnostics.push(DefDiagnostic::macro_error(\n+                    directive.module_id,\n+                    MacroCallKind::FnLike(directive.ast_id.ast_id),\n+                    err.to_string(),\n+                ));\n+            }\n+        }\n+\n         // Emit diagnostics for all remaining unresolved imports.\n \n         // We'd like to avoid emitting a diagnostics avalanche when some `extern crate` doesn't"}]}