{"sha": "58e26243a7d7efa8e37703fb6dca95652c79f848", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4ZTI2MjQzYTdkN2VmYThlMzc3MDNmYjZkY2E5NTY1MmM3OWY4NDg=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-11-21T23:51:11Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-11-27T02:13:54Z"}, "message": "syntax: Add a hack to support the int-template pattern", "tree": {"sha": "d9a3159063b0e604054aae0dbc1c1d1700523e64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9a3159063b0e604054aae0dbc1c1d1700523e64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58e26243a7d7efa8e37703fb6dca95652c79f848", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58e26243a7d7efa8e37703fb6dca95652c79f848", "html_url": "https://github.com/rust-lang/rust/commit/58e26243a7d7efa8e37703fb6dca95652c79f848", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58e26243a7d7efa8e37703fb6dca95652c79f848/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de0268b693ad1ff0f319d189b081c26576b7d535", "url": "https://api.github.com/repos/rust-lang/rust/commits/de0268b693ad1ff0f319d189b081c26576b7d535", "html_url": "https://github.com/rust-lang/rust/commit/de0268b693ad1ff0f319d189b081c26576b7d535"}], "stats": {"total": 83, "additions": 74, "deletions": 9}, "files": [{"sha": "cdfd8a9bceccde7699c27568fd8a35f1b670c489", "filename": "src/libsyntax/parse/eval.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/58e26243a7d7efa8e37703fb6dca95652c79f848/src%2Flibsyntax%2Fparse%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e26243a7d7efa8e37703fb6dca95652c79f848/src%2Flibsyntax%2Fparse%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Feval.rs?ref=58e26243a7d7efa8e37703fb6dca95652c79f848", "patch": "@@ -5,6 +5,7 @@ use codemap::span;\n \n export eval_crate_directives_to_mod;\n export eval_src_mod;\n+export eval_src_mod_from_path;\n \n type ctx =\n     @{sess: parse::parse_sess,\n@@ -84,15 +85,23 @@ fn cdir_path_opt(default: ~str, attrs: ~[ast::attribute]) -> ~str {\n     }\n }\n \n-fn eval_src_mod(cx: ctx, prefix: &Path, id: ast::ident,\n+fn eval_src_mod(cx: ctx, prefix: &Path,\n                 outer_attrs: ~[ast::attribute],\n-                sp: span) -> (ast::item_, ~[ast::attribute]) {\n+                id: ast::ident, sp: span\n+               ) -> (ast::item_, ~[ast::attribute]) {\n     let file_path = Path(cdir_path_opt(\n         cx.sess.interner.get(id) + ~\".rs\", outer_attrs));\n-    let full_path = if file_path.is_absolute {\n-        copy file_path\n+    eval_src_mod_from_path(cx, prefix, &file_path, outer_attrs, sp)\n+}\n+\n+fn eval_src_mod_from_path(cx: ctx, prefix: &Path, path: &Path,\n+                          outer_attrs: ~[ast::attribute],\n+                          sp: span\n+                         ) -> (ast::item_, ~[ast::attribute]) {\n+    let full_path = if path.is_absolute {\n+        copy *path\n     } else {\n-        prefix.push_many(file_path.components)\n+        prefix.push_many(path.components)\n     };\n     let p0 =\n         new_sub_parser_from_file(cx.sess, cx.cfg,\n@@ -121,7 +130,7 @@ fn eval_crate_directive(cx: ctx, cdir: @ast::crate_directive, prefix: &Path,\n                         items: &mut ~[@ast::item]) {\n     match cdir.node {\n       ast::cdir_src_mod(vis, id, attrs) => {\n-        let (m, mod_attrs) = eval_src_mod(cx, prefix, id, attrs, cdir.span);\n+        let (m, mod_attrs) = eval_src_mod(cx, prefix, attrs, id, cdir.span);\n         let i = mk_item(cx, cdir.span.lo, cdir.span.hi,\n                            /* FIXME (#2543) */ copy id,\n                            m, vis, mod_attrs);"}, {"sha": "2f32b8436afeb33afb37e984b9c967d3051ee288", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 38, "deletions": 3, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/58e26243a7d7efa8e37703fb6dca95652c79f848/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e26243a7d7efa8e37703fb6dca95652c79f848/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=58e26243a7d7efa8e37703fb6dca95652c79f848", "patch": "@@ -2963,7 +2963,7 @@ impl Parser {\n     fn parse_item_mod(outer_attrs: ~[ast::attribute]) -> item_info {\n         let id_span = self.span;\n         let id = self.parse_ident();\n-        if self.token == token::SEMI {\n+        let info_ = if self.token == token::SEMI {\n             self.bump();\n             // This mod is in an external file. Let's go get it!\n             let eval_ctx = @{\n@@ -2972,15 +2972,50 @@ impl Parser {\n             };\n             let prefix = Path(self.sess.cm.span_to_filename(copy self.span));\n             let prefix = prefix.dir_path();\n-            let (m, attrs) = eval::eval_src_mod(eval_ctx, &prefix, id,\n-                                                outer_attrs, id_span);\n+            let (m, attrs) = eval::eval_src_mod(eval_ctx, &prefix,\n+                                                outer_attrs,\n+                                                id, id_span);\n             (id, m, Some(move attrs))\n         } else {\n             self.expect(token::LBRACE);\n             let inner_attrs = self.parse_inner_attrs_and_next();\n             let m = self.parse_mod_items(token::RBRACE, inner_attrs.next);\n             self.expect(token::RBRACE);\n             (id, item_mod(m), Some(inner_attrs.inner))\n+        };\n+\n+        // XXX: Transitionary hack to do the template work inside core\n+        // (int-template, iter-trait). If there's a 'merge' attribute\n+        // on the mod, then we'll go and suck in another file and merge\n+        // its contents\n+        match ::attr::first_attr_value_str_by_name(outer_attrs, ~\"merge\") {\n+            Some(path) => {\n+                let eval_ctx = @{\n+                    sess: self.sess,\n+                    cfg: self.cfg\n+                };\n+                let prefix = Path(self.sess.cm.span_to_filename(copy self.span));\n+                let prefix = prefix.dir_path();\n+                let path = Path(path);\n+                let (new_mod_item, new_attrs) = eval::eval_src_mod_from_path(\n+                    eval_ctx, &prefix, &path, ~[], id_span);\n+\n+                let (main_id, main_mod_item, main_attrs) = info_;\n+                let main_attrs = main_attrs.get();\n+\n+                let (main_mod, new_mod) = match (main_mod_item, new_mod_item) {\n+                    (item_mod(m), item_mod(n)) => (m, n),\n+                    _ => self.bug(~\"parsed mod item should be mod\")\n+                };\n+                let merged_mod = {\n+                    view_items: main_mod.view_items + new_mod.view_items,\n+                    items: main_mod.items + new_mod.items\n+                };\n+\n+                let merged_attrs = main_attrs + new_attrs;\n+                (main_id, item_mod(merged_mod), Some(merged_attrs))\n+            }\n+            None => info_\n         }\n     }\n "}, {"sha": "d61c6383ee53d8059a3706c01b19da7ca181a813", "filename": "src/test/run-pass/mod-merge-hack-inst.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/58e26243a7d7efa8e37703fb6dca95652c79f848/src%2Ftest%2Frun-pass%2Fmod-merge-hack-inst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e26243a7d7efa8e37703fb6dca95652c79f848/src%2Ftest%2Frun-pass%2Fmod-merge-hack-inst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmod-merge-hack-inst.rs?ref=58e26243a7d7efa8e37703fb6dca95652c79f848", "patch": "@@ -0,0 +1,6 @@\n+// xfail-test not a test. used by mod-merge-hack.rs\n+\n+mod inst {\n+    pub type T = i32;\n+    pub const bits: uint = 32;\n+}"}, {"sha": "a659d8b0e5f6f6ad376d171e27b547878f9c9cc5", "filename": "src/test/run-pass/mod-merge-hack-template.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/58e26243a7d7efa8e37703fb6dca95652c79f848/src%2Ftest%2Frun-pass%2Fmod-merge-hack-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e26243a7d7efa8e37703fb6dca95652c79f848/src%2Ftest%2Frun-pass%2Fmod-merge-hack-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmod-merge-hack-template.rs?ref=58e26243a7d7efa8e37703fb6dca95652c79f848", "patch": "@@ -0,0 +1,6 @@\n+// xfail-test not a test. used by mod-merge-hack.rs\n+\n+use T = inst::T;\n+\n+pub const bits: uint = inst::bits;\n+pub pure fn min(x: T, y: T) -> T { if x < y { x } else { y } }"}, {"sha": "c6e0901779b0b7eecd1a73f933a257b909b5c9f0", "filename": "src/test/run-pass/mod-merge-hack.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/58e26243a7d7efa8e37703fb6dca95652c79f848/src%2Ftest%2Frun-pass%2Fmod-merge-hack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e26243a7d7efa8e37703fb6dca95652c79f848/src%2Ftest%2Frun-pass%2Fmod-merge-hack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmod-merge-hack.rs?ref=58e26243a7d7efa8e37703fb6dca95652c79f848", "patch": "@@ -0,0 +1,9 @@\n+// xfail-pretty\n+#[path = \"mod-merge-hack-template.rs\"]\n+#[merge = \"mod-merge-hack-inst.rs\"]\n+mod myint32;\n+\n+fn main() {\n+    assert myint32::bits == 32;\n+    assert myint32::min(10, 20) == 10;\n+}\n\\ No newline at end of file"}]}