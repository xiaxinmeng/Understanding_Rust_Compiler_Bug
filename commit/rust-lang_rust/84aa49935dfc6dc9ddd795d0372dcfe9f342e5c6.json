{"sha": "84aa49935dfc6dc9ddd795d0372dcfe9f342e5c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0YWE0OTkzNWRmYzZkYzlkZGQ3OTVkMDM3MmRjZmU5ZjM0MmU1YzY=", "commit": {"author": {"name": "Philipp Krones", "email": "uwdkn@student.kit.edu", "date": "2018-08-14T11:04:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-08-14T11:04:48Z"}, "message": "Merge pull request #3026 from dwijnand/fxhash\n\nAdd an internal lint for FxHashMap/FxHashSet", "tree": {"sha": "3b3c891a2aa64655608f3809632b393a2fd9ab2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b3c891a2aa64655608f3809632b393a2fd9ab2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84aa49935dfc6dc9ddd795d0372dcfe9f342e5c6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbcrdQCRBK7hj4Ov3rIwAAdHIIAH2i3bluNcvn57scUuXGi7BE\nbPw1H+q0v9ZL47LeXX3E+EdL2EJ6qBzeUGSrNk+3+M1hRzqD737qgL5kmRVC8Olk\ntJzMmDJFflvgtJDuxSkxjUaPd+C9hD35tpOnD6BcTi3kfhfkw/fxC/WsN43acA2/\nl6jz1UwPuoJS28McwnVby2JDoVEANAEScOkfOERBnb18Qp7ocSTc+ebgBykwixNq\nRMHUPOpJylVQ+X/kd0IAulZmcQGIbk97eZSqjpCNkKiewPvL8TOk+vB5P4Qt5aMD\nwV9pmds9k97t/5bZsZncW6isCMAZyAO4+rY6rCJgdC20dSrjANrKNfh7mNXbd28=\n=q54/\n-----END PGP SIGNATURE-----\n", "payload": "tree 3b3c891a2aa64655608f3809632b393a2fd9ab2c\nparent 72b8c9b21189bfa0c5dcdf5489d8b4ba70188283\nparent 22ff5a3ef11202b6c21462d8d7dfbeeae31a12ed\nauthor Philipp Krones <uwdkn@student.kit.edu> 1534244688 +0200\ncommitter GitHub <noreply@github.com> 1534244688 +0200\n\nMerge pull request #3026 from dwijnand/fxhash\n\nAdd an internal lint for FxHashMap/FxHashSet"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84aa49935dfc6dc9ddd795d0372dcfe9f342e5c6", "html_url": "https://github.com/rust-lang/rust/commit/84aa49935dfc6dc9ddd795d0372dcfe9f342e5c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84aa49935dfc6dc9ddd795d0372dcfe9f342e5c6/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72b8c9b21189bfa0c5dcdf5489d8b4ba70188283", "url": "https://api.github.com/repos/rust-lang/rust/commits/72b8c9b21189bfa0c5dcdf5489d8b4ba70188283", "html_url": "https://github.com/rust-lang/rust/commit/72b8c9b21189bfa0c5dcdf5489d8b4ba70188283"}, {"sha": "22ff5a3ef11202b6c21462d8d7dfbeeae31a12ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/22ff5a3ef11202b6c21462d8d7dfbeeae31a12ed", "html_url": "https://github.com/rust-lang/rust/commit/22ff5a3ef11202b6c21462d8d7dfbeeae31a12ed"}], "stats": {"total": 106, "additions": 104, "deletions": 2}, "files": [{"sha": "9776287cc75951ae8bff4a73e7a0135b608aedb3", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84aa49935dfc6dc9ddd795d0372dcfe9f342e5c6/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84aa49935dfc6dc9ddd795d0372dcfe9f342e5c6/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=84aa49935dfc6dc9ddd795d0372dcfe9f342e5c6", "patch": "@@ -266,6 +266,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>) {\n     reg.register_late_lint_pass(box serde_api::Serde);\n     reg.register_early_lint_pass(box utils::internal_lints::Clippy);\n     reg.register_late_lint_pass(box utils::internal_lints::LintWithoutLintPass::default());\n+    reg.register_early_lint_pass(box utils::internal_lints::DefaultHashTypes::default());\n     reg.register_late_lint_pass(box utils::inspector::Pass);\n     reg.register_late_lint_pass(box utils::author::Pass);\n     reg.register_late_lint_pass(box types::TypePass);\n@@ -467,6 +468,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>) {\n     reg.register_lint_group(\"clippy_internal\", vec![\n         utils::internal_lints::CLIPPY_LINTS_INTERNAL,\n         utils::internal_lints::LINT_WITHOUT_LINT_PASS,\n+        utils::internal_lints::DEFAULT_HASH_TYPES,\n     ]);\n \n     reg.register_lint_group(\"clippy\", vec!["}, {"sha": "260ced14cb4366a5af87ce988bc5c9a761a53d10", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 46, "deletions": 2, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/84aa49935dfc6dc9ddd795d0372dcfe9f342e5c6/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84aa49935dfc6dc9ddd795d0372dcfe9f342e5c6/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=84aa49935dfc6dc9ddd795d0372dcfe9f342e5c6", "patch": "@@ -3,9 +3,10 @@ use rustc::{declare_lint, lint_array};\n use rustc::hir::*;\n use rustc::hir;\n use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n-use crate::utils::{match_qpath, paths, span_lint};\n+use rustc_data_structures::fx::FxHashMap;\n+use crate::utils::{match_qpath, paths, span_lint, span_lint_and_sugg};\n use syntax::symbol::LocalInternedString;\n-use syntax::ast::{Crate as AstCrate, ItemKind, Name};\n+use syntax::ast::{Crate as AstCrate, Ident, ItemKind, Name};\n use syntax::codemap::Span;\n use std::collections::{HashMap, HashSet};\n \n@@ -54,6 +55,18 @@ declare_clippy_lint! {\n }\n \n \n+/// **What it does:** Checks for the presence of the default hash types \"HashMap\" or \"HashSet\"\n+/// and recommends the FxHash* variants.\n+///\n+/// **Why is this bad?** The FxHash variants have better performance\n+/// and we don't need any collision prevention in clippy.\n+declare_clippy_lint! {\n+    pub DEFAULT_HASH_TYPES,\n+    internal,\n+    \"forbid HashMap and HashSet and suggest the FxHash* variants\"\n+}\n+\n+\n #[derive(Copy, Clone)]\n pub struct Clippy;\n \n@@ -207,3 +220,34 @@ impl<'a, 'tcx: 'a> Visitor<'tcx> for LintCollector<'a, 'tcx> {\n         NestedVisitorMap::All(&self.cx.tcx.hir)\n     }\n }\n+\n+\n+\n+pub struct DefaultHashTypes {\n+    map: FxHashMap<String, String>,\n+}\n+\n+impl DefaultHashTypes {\n+    pub fn default() -> Self {\n+        let mut map = FxHashMap::default();\n+        map.insert(\"HashMap\".to_owned(), \"FxHashMap\".to_owned());\n+        map.insert(\"HashSet\".to_owned(), \"FxHashSet\".to_owned());\n+        Self { map }\n+    }\n+}\n+\n+impl LintPass for DefaultHashTypes {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(DEFAULT_HASH_TYPES)\n+    }\n+}\n+\n+impl EarlyLintPass for DefaultHashTypes {\n+    fn check_ident(&mut self, cx: &EarlyContext<'_>, ident: Ident) {\n+        let ident_string = ident.to_string();\n+        if let Some(replace) = self.map.get(&ident_string) {\n+            let msg = format!(\"Prefer {} over {}, it has better performance and we don't need any collision prevention in clippy\", replace, ident_string);\n+            span_lint_and_sugg(cx, DEFAULT_HASH_TYPES, ident.span, &msg, \"use\", replace.to_owned());\n+        }\n+    }\n+}"}, {"sha": "c6ed9436a51efe5f1318b0594943b0c4d87bf53f", "filename": "tests/ui/fxhash.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/84aa49935dfc6dc9ddd795d0372dcfe9f342e5c6/tests%2Fui%2Ffxhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84aa49935dfc6dc9ddd795d0372dcfe9f342e5c6/tests%2Fui%2Ffxhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffxhash.rs?ref=84aa49935dfc6dc9ddd795d0372dcfe9f342e5c6", "patch": "@@ -0,0 +1,16 @@\n+#![warn(default_hash_types)]\n+#![feature(rustc_private)]\n+\n+extern crate rustc_data_structures;\n+\n+use std::collections::{HashMap, HashSet};\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+\n+fn main() {\n+    let _map: HashMap<String, String> = HashMap::default();\n+    let _set: HashSet<String> = HashSet::default();\n+\n+    // test that the lint doesn't also match the Fx variants themselves \ud83d\ude02\n+    let _fx_map: FxHashMap<String, String> = FxHashMap::default();\n+    let _fx_set: FxHashSet<String> = FxHashSet::default();\n+}"}, {"sha": "5e90f84f1db0d5ed7b6e8afbdcfe678e99a2aa9a", "filename": "tests/ui/fxhash.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/84aa49935dfc6dc9ddd795d0372dcfe9f342e5c6/tests%2Fui%2Ffxhash.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84aa49935dfc6dc9ddd795d0372dcfe9f342e5c6/tests%2Fui%2Ffxhash.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffxhash.stderr?ref=84aa49935dfc6dc9ddd795d0372dcfe9f342e5c6", "patch": "@@ -0,0 +1,40 @@\n+error: Prefer FxHashMap over HashMap, it has better performance and we don't need any collision prevention in clippy\n+ --> $DIR/fxhash.rs:6:24\n+  |\n+6 | use std::collections::{HashMap, HashSet};\n+  |                        ^^^^^^^ help: use: `FxHashMap`\n+  |\n+  = note: `-D default-hash-types` implied by `-D warnings`\n+\n+error: Prefer FxHashSet over HashSet, it has better performance and we don't need any collision prevention in clippy\n+ --> $DIR/fxhash.rs:6:33\n+  |\n+6 | use std::collections::{HashMap, HashSet};\n+  |                                 ^^^^^^^ help: use: `FxHashSet`\n+\n+error: Prefer FxHashMap over HashMap, it has better performance and we don't need any collision prevention in clippy\n+  --> $DIR/fxhash.rs:10:15\n+   |\n+10 |     let _map: HashMap<String, String> = HashMap::default();\n+   |               ^^^^^^^ help: use: `FxHashMap`\n+\n+error: Prefer FxHashMap over HashMap, it has better performance and we don't need any collision prevention in clippy\n+  --> $DIR/fxhash.rs:10:41\n+   |\n+10 |     let _map: HashMap<String, String> = HashMap::default();\n+   |                                         ^^^^^^^ help: use: `FxHashMap`\n+\n+error: Prefer FxHashSet over HashSet, it has better performance and we don't need any collision prevention in clippy\n+  --> $DIR/fxhash.rs:11:15\n+   |\n+11 |     let _set: HashSet<String> = HashSet::default();\n+   |               ^^^^^^^ help: use: `FxHashSet`\n+\n+error: Prefer FxHashSet over HashSet, it has better performance and we don't need any collision prevention in clippy\n+  --> $DIR/fxhash.rs:11:33\n+   |\n+11 |     let _set: HashSet<String> = HashSet::default();\n+   |                                 ^^^^^^^ help: use: `FxHashSet`\n+\n+error: aborting due to 6 previous errors\n+"}]}