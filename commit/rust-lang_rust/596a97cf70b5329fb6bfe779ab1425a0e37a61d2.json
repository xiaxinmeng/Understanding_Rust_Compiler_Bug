{"sha": "596a97cf70b5329fb6bfe779ab1425a0e37a61d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5NmE5N2NmNzBiNTMyOWZiNmJmZTc3OWFiMTQyNWEwZTM3YTYxZDI=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-01-26T19:35:30Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-01-26T19:35:30Z"}, "message": "Teach typeck to handle obj item names when used as type names, not just constructor calls.", "tree": {"sha": "00bbb948db05f0246ac06627cbea8d4e10644f56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00bbb948db05f0246ac06627cbea8d4e10644f56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/596a97cf70b5329fb6bfe779ab1425a0e37a61d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/596a97cf70b5329fb6bfe779ab1425a0e37a61d2", "html_url": "https://github.com/rust-lang/rust/commit/596a97cf70b5329fb6bfe779ab1425a0e37a61d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/596a97cf70b5329fb6bfe779ab1425a0e37a61d2/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70c129f79b42f6020b2342e81bf96a0c701ee9e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/70c129f79b42f6020b2342e81bf96a0c701ee9e2", "html_url": "https://github.com/rust-lang/rust/commit/70c129f79b42f6020b2342e81bf96a0c701ee9e2"}], "stats": {"total": 65, "additions": 47, "deletions": 18}, "files": [{"sha": "e21e72a9e63eee1bbfadde3ed99dab1123317b3b", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 47, "deletions": 18, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/596a97cf70b5329fb6bfe779ab1425a0e37a61d2/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/596a97cf70b5329fb6bfe779ab1425a0e37a61d2/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=596a97cf70b5329fb6bfe779ab1425a0e37a61d2", "patch": "@@ -98,6 +98,24 @@ fn ast_ty_to_ty(ty_getter getter, &@ast.ty ast_ty) -> @ty.t {\n         ret ty.fold_ty(replacer, t);\n     }\n \n+    fn instantiate(ty_getter getter, ast.def_id id,\n+                   vec[@ast.ty] args) -> @ty.t {\n+        // TODO: maybe record cname chains so we can do\n+        // \"foo = int\" like OCaml?\n+        auto ty_and_params = getter(id);\n+        auto params = ty_and_params.params;\n+        auto num_type_args = _vec.len[@ast.ty](args);\n+        check(num_type_args == _vec.len[ast.ty_param](params));\n+\n+        auto param_map = common.new_def_hash[@ty.t]();\n+        for each (uint i in _uint.range(0u, num_type_args)) {\n+            auto arg = args.(i);\n+            auto param = params.(i);\n+            param_map.insert(param.id, ast_ty_to_ty(getter, arg));\n+        }\n+        ret replace_type_params(ty_and_params.ty, param_map);\n+    }\n+\n     auto mut = ast.imm;\n     auto sty;\n     auto cname = none[str];\n@@ -137,22 +155,10 @@ fn ast_ty_to_ty(ty_getter getter, &@ast.ty ast_ty) -> @ty.t {\n             check (def != none[ast.def]);\n             alt (option.get[ast.def](def)) {\n                 case (ast.def_ty(?id)) {\n-                    // TODO: maybe record cname chains so we can do\n-                    // \"foo = int\" like OCaml?\n-                    auto ty_and_params = getter(id);\n-                    auto params = ty_and_params.params;\n-                    auto num_type_params = _vec.len[@ast.ty](path.node.types);\n-                    check(num_type_params == _vec.len[ast.ty_param](params));\n-\n-                    auto param_map = common.new_def_hash[@ty.t]();\n-                    for each (uint i in _uint.range(0u, num_type_params)) {\n-                        auto x = path.node.types.(i);\n-                        auto y = params.(i);\n-                        param_map.insert(y.id, ast_ty_to_ty(getter, x));\n-                    }\n-\n-                    sty = replace_type_params(ty_and_params.ty,\n-                                              param_map).struct;\n+                    sty = instantiate(getter, id, path.node.types).struct;\n+                }\n+                case (ast.def_obj(?id))     {\n+                    sty = instantiate(getter, id, path.node.types).struct;\n                 }\n                 case (ast.def_ty_arg(?id))  { sty = ty.ty_param(id); }\n                 case (_)                    { fail; }\n@@ -190,11 +196,21 @@ fn ast_ty_to_ty(ty_getter getter, &@ast.ty ast_ty) -> @ty.t {\n // ast_ty_to_ty.\n fn ast_ty_to_ty_crate(@crate_ctxt ccx, &@ast.ty ast_ty) -> @ty.t {\n     fn getter(@crate_ctxt ccx, ast.def_id id) -> ty_and_params {\n-        check (ccx.item_types.contains_key(id));\n         check (ccx.item_items.contains_key(id));\n-        auto ty = ccx.item_types.get(id);\n+        check (ccx.item_types.contains_key(id));\n         auto item = ccx.item_items.get(id);\n+        auto ty = ccx.item_types.get(id);\n         auto params = ty_params_of_item(item);\n+\n+        alt (item.node) {\n+            case (ast.item_obj(_,_,_,_,_)) {\n+                // An obj used as a type name refers to the output type of the\n+                // item (constructor).\n+                ty = middle.ty.ty_fn_ret(ty);\n+            }\n+            case (_) { }\n+        }\n+\n         ret rec(params = params, ty = ty);\n     }\n     auto f = bind getter(ccx, _);\n@@ -243,6 +259,16 @@ fn collect_item_types(session.session sess, @ast.crate crate)\n         auto item = id_to_ty_item.get(id);\n         auto ty = ty_of_item(id_to_ty_item, item_to_ty, item);\n         auto params = ty_params_of_item(item);\n+\n+        alt (item.node) {\n+            case (ast.item_obj(_,_,_,_,_)) {\n+                // An obj used as a type name refers to the output type of the\n+                // item (constructor).\n+                ty = middle.ty.ty_fn_ret(ty);\n+            }\n+            case (_) { }\n+        }\n+\n         ret rec(params = params, ty = ty);\n     }\n \n@@ -400,6 +426,9 @@ fn collect_item_types(session.session sess, @ast.crate crate)\n             case (ast.item_tag(_, _, _, ?def_id)) {\n                 id_to_ty_item.insert(def_id, i);\n             }\n+            case (ast.item_obj(_, _, _, ?def_id, _)) {\n+                id_to_ty_item.insert(def_id, i);\n+            }\n             case (_) { /* empty */ }\n         }\n         ret id_to_ty_item;"}]}