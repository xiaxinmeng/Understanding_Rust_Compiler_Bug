{"sha": "a2b28be3f8f2920d39c9c87fef968d3885753ba4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyYjI4YmUzZjhmMjkyMGQzOWM5Yzg3ZmVmOTY4ZDM4ODU3NTNiYTQ=", "commit": {"author": {"name": "Clar Charr", "email": "clar@charr.xyz", "date": "2017-03-10T17:10:26Z"}, "committer": {"name": "Clar Charr", "email": "clar@charr.xyz", "date": "2017-04-09T23:13:54Z"}, "message": "Reduce str transmutes, add mut versions of methods.", "tree": {"sha": "79223c615a438bc59d919d9d151f4e257767443c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79223c615a438bc59d919d9d151f4e257767443c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2b28be3f8f2920d39c9c87fef968d3885753ba4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2b28be3f8f2920d39c9c87fef968d3885753ba4", "html_url": "https://github.com/rust-lang/rust/commit/a2b28be3f8f2920d39c9c87fef968d3885753ba4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2b28be3f8f2920d39c9c87fef968d3885753ba4/comments", "author": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa332c901575da70ac7a612609a26b752b1adc65", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa332c901575da70ac7a612609a26b752b1adc65", "html_url": "https://github.com/rust-lang/rust/commit/fa332c901575da70ac7a612609a26b752b1adc65"}], "stats": {"total": 71, "additions": 57, "deletions": 14}, "files": [{"sha": "c077568d96e1ba738f010ae646a1c689b12e6edb", "filename": "src/doc/unstable-book/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a2b28be3f8f2920d39c9c87fef968d3885753ba4/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/a2b28be3f8f2920d39c9c87fef968d3885753ba4/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md?ref=a2b28be3f8f2920d39c9c87fef968d3885753ba4", "patch": "@@ -187,6 +187,7 @@\n - [str_checked_slicing](str-checked-slicing.md)\n - [str_escape](str-escape.md)\n - [str_internals](str-internals.md)\n+- [str_mut_extras](str-mut-extras.md)\n - [struct_field_attributes](struct-field-attributes.md)\n - [structural_match](structural-match.md)\n - [target_feature](target-feature.md)"}, {"sha": "df4f35832cdc1e0dde69bf7d3797de39f8d5e70f", "filename": "src/doc/unstable-book/src/str-mut-extras.md", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a2b28be3f8f2920d39c9c87fef968d3885753ba4/src%2Fdoc%2Funstable-book%2Fsrc%2Fstr-mut-extras.md", "raw_url": "https://github.com/rust-lang/rust/raw/a2b28be3f8f2920d39c9c87fef968d3885753ba4/src%2Fdoc%2Funstable-book%2Fsrc%2Fstr-mut-extras.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fstr-mut-extras.md?ref=a2b28be3f8f2920d39c9c87fef968d3885753ba4", "patch": "@@ -0,0 +1,8 @@\n+# `str_mut_extras`\n+\n+The tracking issue for this feature is: [#str_mut_extras]\n+\n+[#str_mut_extras]: https://github.com/rust-lang/rust/issues/41119\n+\n+------------------------\n+"}, {"sha": "b485f900094f02441e253b5579bf5cdc94a4681b", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a2b28be3f8f2920d39c9c87fef968d3885753ba4/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2b28be3f8f2920d39c9c87fef968d3885753ba4/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=a2b28be3f8f2920d39c9c87fef968d3885753ba4", "patch": "@@ -57,6 +57,7 @@\n #![feature(specialization)]\n #![feature(staged_api)]\n #![feature(str_internals)]\n+#![feature(str_mut_extras)]\n #![feature(trusted_len)]\n #![feature(unicode)]\n #![feature(unique)]"}, {"sha": "d04f414250ade9ee8a70f00a6e571fda980b481d", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a2b28be3f8f2920d39c9c87fef968d3885753ba4/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2b28be3f8f2920d39c9c87fef968d3885753ba4/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=a2b28be3f8f2920d39c9c87fef968d3885753ba4", "patch": "@@ -72,7 +72,7 @@ pub use core::str::{MatchIndices, RMatchIndices};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::str::{from_utf8, Chars, CharIndices, Bytes};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use core::str::{from_utf8_unchecked, ParseBoolError};\n+pub use core::str::{from_utf8_unchecked, from_utf8_unchecked_mut, ParseBoolError};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use std_unicode::str::SplitWhitespace;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -294,6 +294,13 @@ impl str {\n         core_str::StrExt::as_bytes(self)\n     }\n \n+    /// Converts a mutable string slice to a mutable byte slice.\n+    #[unstable(feature = \"str_mut_extras\", issue = \"41119\")]\n+    #[inline(always)]\n+    pub unsafe fn as_bytes_mut(&mut self) -> &mut [u8] {\n+        core_str::StrExt::as_bytes_mut(self)\n+    }\n+\n     /// Converts a string slice to a raw pointer.\n     ///\n     /// As string slices are a slice of bytes, the raw pointer points to a"}, {"sha": "7d9d7276201bd1ed3f85c5ef2e22b3470a5fb377", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2b28be3f8f2920d39c9c87fef968d3885753ba4/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2b28be3f8f2920d39c9c87fef968d3885753ba4/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=a2b28be3f8f2920d39c9c87fef968d3885753ba4", "patch": "@@ -1790,7 +1790,7 @@ impl ops::IndexMut<ops::RangeFrom<usize>> for String {\n impl ops::IndexMut<ops::RangeFull> for String {\n     #[inline]\n     fn index_mut(&mut self, _index: ops::RangeFull) -> &mut str {\n-        unsafe { mem::transmute(&mut *self.vec) }\n+        unsafe { str::from_utf8_unchecked_mut(&mut *self.vec) }\n     }\n }\n #[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n@@ -1822,7 +1822,7 @@ impl ops::Deref for String {\n impl ops::DerefMut for String {\n     #[inline]\n     fn deref_mut(&mut self) -> &mut str {\n-        unsafe { mem::transmute(&mut *self.vec) }\n+        unsafe { str::from_utf8_unchecked_mut(&mut *self.vec) }\n     }\n }\n "}, {"sha": "98268e3813fac1897e8d7dd66bff9903ecf8dc2d", "filename": "src/libcore/char.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a2b28be3f8f2920d39c9c87fef968d3885753ba4/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2b28be3f8f2920d39c9c87fef968d3885753ba4/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=a2b28be3f8f2920d39c9c87fef968d3885753ba4", "patch": "@@ -19,6 +19,7 @@ use char_private::is_printable;\n use convert::TryFrom;\n use fmt::{self, Write};\n use slice;\n+use str::from_utf8_unchecked_mut;\n use iter::FusedIterator;\n use mem::transmute;\n \n@@ -448,7 +449,7 @@ impl CharExt for char {\n                     code,\n                     dst.len())\n             };\n-            transmute(slice::from_raw_parts_mut(dst.as_mut_ptr(), len))\n+            from_utf8_unchecked_mut(dst.get_unchecked_mut(..len))\n         }\n     }\n "}, {"sha": "2ceef54ffed6a6ddd37535419ca26ab4043e6ab1", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 32, "deletions": 7, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/a2b28be3f8f2920d39c9c87fef968d3885753ba4/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2b28be3f8f2920d39c9c87fef968d3885753ba4/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=a2b28be3f8f2920d39c9c87fef968d3885753ba4", "patch": "@@ -21,8 +21,8 @@ use char;\n use convert::TryFrom;\n use fmt;\n use iter::{Map, Cloned, FusedIterator};\n-use mem;\n use slice::{self, SliceIndex};\n+use mem;\n \n pub mod pattern;\n \n@@ -300,6 +300,13 @@ pub fn from_utf8(v: &[u8]) -> Result<&str, Utf8Error> {\n     Ok(unsafe { from_utf8_unchecked(v) })\n }\n \n+/// Converts a mutable slice of bytes to a mutable string slice.\n+#[unstable(feature = \"str_mut_extras\", issue = \"41119\")]\n+pub fn from_utf8_mut(v: &mut [u8]) -> Result<&mut str, Utf8Error> {\n+    run_utf8_validation(v)?;\n+    Ok(unsafe { from_utf8_unchecked_mut(v) })\n+}\n+\n /// Forms a str from a pointer and a length.\n ///\n /// The `len` argument is the number of bytes in the string.\n@@ -325,7 +332,7 @@ pub fn from_utf8(v: &[u8]) -> Result<&str, Utf8Error> {\n /// str is returned.\n ///\n unsafe fn from_raw_parts_mut<'a>(p: *mut u8, len: usize) -> &'a mut str {\n-    mem::transmute::<&mut [u8], &mut str>(slice::from_raw_parts_mut(p, len))\n+    from_utf8_unchecked_mut(slice::from_raw_parts_mut(p, len))\n }\n \n /// Converts a slice of bytes to a string slice without checking\n@@ -365,6 +372,18 @@ pub unsafe fn from_utf8_unchecked(v: &[u8]) -> &str {\n     mem::transmute(v)\n }\n \n+/// Converts a slice of bytes to a string slice without checking\n+/// that the string contains valid UTF-8; mutable version.\n+///\n+/// See the immutable version, [`from_utf8_unchecked()`][fromutf8], for more information.\n+///\n+/// [fromutf8]: fn.from_utf8_unchecked.html\n+#[inline(always)]\n+#[unstable(feature = \"str_mut_extras\", issue = \"41119\")]\n+pub unsafe fn from_utf8_unchecked_mut(v: &mut [u8]) -> &mut str {\n+    mem::transmute(v)\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Display for Utf8Error {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n@@ -1474,7 +1493,6 @@ Section: Trait implementations\n mod traits {\n     use cmp::Ordering;\n     use ops;\n-    use mem;\n     use slice::{self, SliceIndex};\n     use str::eq_slice;\n \n@@ -1811,7 +1829,7 @@ mod traits {\n         unsafe fn get_unchecked_mut(self, slice: &mut str) -> &mut Self::Output {\n             let ptr = slice.as_ptr().offset(self.start as isize);\n             let len = self.end - self.start;\n-            mem::transmute(slice::from_raw_parts_mut(ptr as *mut u8, len))\n+            super::from_utf8_unchecked_mut(slice::from_raw_parts_mut(ptr as *mut u8, len))\n         }\n         #[inline]\n         fn index(self, slice: &str) -> &Self::Output {\n@@ -1859,7 +1877,7 @@ mod traits {\n         #[inline]\n         unsafe fn get_unchecked_mut(self, slice: &mut str) -> &mut Self::Output {\n             let ptr = slice.as_ptr();\n-            mem::transmute(slice::from_raw_parts_mut(ptr as *mut u8, self.end))\n+            super::from_utf8_unchecked_mut(slice::from_raw_parts_mut(ptr as *mut u8, self.end))\n         }\n         #[inline]\n         fn index(self, slice: &str) -> &Self::Output {\n@@ -1905,7 +1923,7 @@ mod traits {\n         unsafe fn get_unchecked_mut(self, slice: &mut str) -> &mut Self::Output {\n             let ptr = slice.as_ptr().offset(self.start as isize);\n             let len = slice.len() - self.start;\n-            mem::transmute(slice::from_raw_parts_mut(ptr as *mut u8, len))\n+            super::from_utf8_unchecked_mut(slice::from_raw_parts_mut(ptr as *mut u8, len))\n         }\n         #[inline]\n         fn index(self, slice: &str) -> &Self::Output {\n@@ -1998,7 +2016,7 @@ mod traits {\n         #[inline]\n         unsafe fn get_unchecked_mut(self, slice: &mut str) -> &mut Self::Output {\n             let ptr = slice.as_ptr();\n-            mem::transmute(slice::from_raw_parts_mut(ptr as *mut u8, self.end + 1))\n+            super::from_utf8_unchecked_mut(slice::from_raw_parts_mut(ptr as *mut u8, self.end + 1))\n         }\n         #[inline]\n         fn index(self, slice: &str) -> &Self::Output {\n@@ -2096,6 +2114,8 @@ pub trait StrExt {\n     fn is_char_boundary(&self, index: usize) -> bool;\n     #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn as_bytes(&self) -> &[u8];\n+    #[unstable(feature = \"str_mut_extras\", issue = \"0\")]\n+    unsafe fn as_bytes_mut(&mut self) -> &mut [u8];\n     #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn find<'a, P: Pattern<'a>>(&'a self, pat: P) -> Option<usize>;\n     #[stable(feature = \"core\", since = \"1.6.0\")]\n@@ -2373,6 +2393,11 @@ impl StrExt for str {\n         unsafe { mem::transmute(self) }\n     }\n \n+    #[inline]\n+    unsafe fn as_bytes_mut(&mut self) -> &mut [u8] {\n+        mem::transmute(self)\n+    }\n+\n     fn find<'a, P: Pattern<'a>>(&'a self, pat: P) -> Option<usize> {\n         pat.into_searcher(self).next_match().map(|(i, _)| i)\n     }"}, {"sha": "4e3781ecafab5b008c82c2c3d5562f6fd50bbb89", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a2b28be3f8f2920d39c9c87fef968d3885753ba4/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2b28be3f8f2920d39c9c87fef968d3885753ba4/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=a2b28be3f8f2920d39c9c87fef968d3885753ba4", "patch": "@@ -27,7 +27,6 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use fmt;\n-use mem;\n use ops::Range;\n use iter::FusedIterator;\n \n@@ -599,12 +598,12 @@ impl AsciiExt for str {\n     }\n \n     fn make_ascii_uppercase(&mut self) {\n-        let me: &mut [u8] = unsafe { mem::transmute(self) };\n+        let me = unsafe { self.as_bytes_mut() };\n         me.make_ascii_uppercase()\n     }\n \n     fn make_ascii_lowercase(&mut self) {\n-        let me: &mut [u8] = unsafe { mem::transmute(self) };\n+        let me = unsafe { self.as_bytes_mut() };\n         me.make_ascii_lowercase()\n     }\n "}, {"sha": "6299a9070ae03bd22bc9f1e34e50fe6d70887288", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a2b28be3f8f2920d39c9c87fef968d3885753ba4/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2b28be3f8f2920d39c9c87fef968d3885753ba4/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=a2b28be3f8f2920d39c9c87fef968d3885753ba4", "patch": "@@ -296,6 +296,7 @@\n #![feature(stmt_expr_attributes)]\n #![feature(str_char)]\n #![feature(str_internals)]\n+#![feature(str_mut_extras)]\n #![feature(str_utf16)]\n #![feature(test, rustc_private)]\n #![feature(thread_local)]"}]}