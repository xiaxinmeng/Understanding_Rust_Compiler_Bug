{"sha": "df7f1374d7a3bdf5a17c069e932d1f2f26ef000d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmN2YxMzc0ZDdhM2JkZjVhMTdjMDY5ZTkzMmQxZjJmMjZlZjAwMGQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-19T00:53:23Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T21:01:23Z"}, "message": "librustc: De-`@mut` `item_symbols`", "tree": {"sha": "20c2c5ba8e0f373a8d59bf12265be4da446ac9b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20c2c5ba8e0f373a8d59bf12265be4da446ac9b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df7f1374d7a3bdf5a17c069e932d1f2f26ef000d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df7f1374d7a3bdf5a17c069e932d1f2f26ef000d", "html_url": "https://github.com/rust-lang/rust/commit/df7f1374d7a3bdf5a17c069e932d1f2f26ef000d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df7f1374d7a3bdf5a17c069e932d1f2f26ef000d/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "610096d8c80275726183919a96a1f0c886acdb0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/610096d8c80275726183919a96a1f0c886acdb0e", "html_url": "https://github.com/rust-lang/rust/commit/610096d8c80275726183919a96a1f0c886acdb0e"}], "stats": {"total": 31, "additions": 21, "deletions": 10}, "files": [{"sha": "193b53bcfc2d15c00ff70c4396cb43fe4e913dab", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/df7f1374d7a3bdf5a17c069e932d1f2f26ef000d/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df7f1374d7a3bdf5a17c069e932d1f2f26ef000d/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=df7f1374d7a3bdf5a17c069e932d1f2f26ef000d", "patch": "@@ -22,6 +22,7 @@ use middle::typeck;\n use middle;\n \n use std::cast;\n+use std::cell::RefCell;\n use std::hashmap::{HashMap, HashSet};\n use std::io::mem::MemWriter;\n use std::io::{Writer, Seek, Decorator};\n@@ -59,7 +60,7 @@ pub struct EncodeParams<'a> {\n     diag: @mut span_handler,\n     tcx: ty::ctxt,\n     reexports2: middle::resolve::ExportMap2,\n-    item_symbols: &'a HashMap<ast::NodeId, ~str>,\n+    item_symbols: &'a RefCell<HashMap<ast::NodeId, ~str>>,\n     discrim_symbols: &'a HashMap<ast::NodeId, @str>,\n     non_inlineable_statics: &'a HashSet<ast::NodeId>,\n     link_meta: &'a LinkMeta,\n@@ -89,7 +90,7 @@ pub struct EncodeContext<'a> {\n     tcx: ty::ctxt,\n     stats: @mut Stats,\n     reexports2: middle::resolve::ExportMap2,\n-    item_symbols: &'a HashMap<ast::NodeId, ~str>,\n+    item_symbols: &'a RefCell<HashMap<ast::NodeId, ~str>>,\n     discrim_symbols: &'a HashMap<ast::NodeId, @str>,\n     non_inlineable_statics: &'a HashSet<ast::NodeId>,\n     link_meta: &'a LinkMeta,\n@@ -283,7 +284,8 @@ fn encode_symbol(ecx: &EncodeContext,\n                  ebml_w: &mut writer::Encoder,\n                  id: NodeId) {\n     ebml_w.start_tag(tag_items_data_item_symbol);\n-    match ecx.item_symbols.find(&id) {\n+    let item_symbols = ecx.item_symbols.borrow();\n+    match item_symbols.get().find(&id) {\n         Some(x) => {\n             debug!(\"encode_symbol(id={:?}, str={})\", id, *x);\n             ebml_w.writer.write(x.as_bytes());\n@@ -763,7 +765,8 @@ fn encode_info_for_struct_ctor(ecx: &EncodeContext,\n     encode_path(ecx, ebml_w, path, ast_map::path_name(name));\n     encode_parent_item(ebml_w, local_def(struct_id));\n \n-    if ecx.item_symbols.contains_key(&ctor_id) {\n+    let item_symbols = ecx.item_symbols.borrow();\n+    if item_symbols.get().contains_key(&ctor_id) {\n         encode_symbol(ecx, ebml_w, ctor_id);\n     }\n "}, {"sha": "f9293063a4124d0a1407b76e4e0dcb25fa0ea250", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/df7f1374d7a3bdf5a17c069e932d1f2f26ef000d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df7f1374d7a3bdf5a17c069e932d1f2f26ef000d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=df7f1374d7a3bdf5a17c069e932d1f2f26ef000d", "patch": "@@ -2289,7 +2289,10 @@ pub fn trans_mod(ccx: @mut CrateContext, m: &ast::_mod) {\n \n fn finish_register_fn(ccx: @mut CrateContext, sp: Span, sym: ~str, node_id: ast::NodeId,\n                       llfn: ValueRef) {\n-    ccx.item_symbols.insert(node_id, sym);\n+    {\n+        let mut item_symbols = ccx.item_symbols.borrow_mut();\n+        item_symbols.get().insert(node_id, sym);\n+    }\n \n     if !ccx.reachable.contains(&node_id) {\n         lib::llvm::SetLinkage(llfn, lib::llvm::InternalLinkage);\n@@ -2537,7 +2540,10 @@ pub fn get_item_val(ccx: @mut CrateContext, id: ast::NodeId) -> ValueRef {\n                                     debug!(\"{} not inlined\", sym);\n                                     ccx.non_inlineable_statics.insert(id);\n                                 }\n-                                ccx.item_symbols.insert(i.id, sym);\n+\n+                                let mut item_symbols = ccx.item_symbols\n+                                                          .borrow_mut();\n+                                item_symbols.get().insert(i.id, sym);\n                                 g\n                             }\n                         }\n@@ -3195,7 +3201,8 @@ pub fn trans_crate(sess: session::Session,\n     let link_meta = ccx.link_meta.clone();\n     let llmod = ccx.llmod;\n     let mut reachable = ccx.reachable.iter().filter_map(|id| {\n-        ccx.item_symbols.find(id).map(|s| s.to_owned())\n+        let item_symbols = ccx.item_symbols.borrow();\n+        item_symbols.get().find(id).map(|s| s.to_owned())\n     }).to_owned_vec();\n \n     // Make sure that some other crucial symbols are not eliminated from the"}, {"sha": "2cb563a00601debb9ff5137b619db1c2c2210de7", "filename": "src/librustc/middle/trans/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df7f1374d7a3bdf5a17c069e932d1f2f26ef000d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df7f1374d7a3bdf5a17c069e932d1f2f26ef000d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs?ref=df7f1374d7a3bdf5a17c069e932d1f2f26ef000d", "patch": "@@ -50,7 +50,7 @@ pub struct CrateContext {\n      item_vals: RefCell<HashMap<ast::NodeId, ValueRef>>,\n      exp_map2: resolve::ExportMap2,\n      reachable: @mut HashSet<ast::NodeId>,\n-     item_symbols: HashMap<ast::NodeId, ~str>,\n+     item_symbols: RefCell<HashMap<ast::NodeId, ~str>>,\n      link_meta: LinkMeta,\n      enum_sizes: HashMap<ty::t, uint>,\n      discrims: HashMap<ast::DefId, ValueRef>,\n@@ -190,7 +190,7 @@ impl CrateContext {\n                   item_vals: RefCell::new(HashMap::new()),\n                   exp_map2: emap2,\n                   reachable: reachable,\n-                  item_symbols: HashMap::new(),\n+                  item_symbols: RefCell::new(HashMap::new()),\n                   link_meta: link_meta,\n                   enum_sizes: HashMap::new(),\n                   discrims: HashMap::new(),"}, {"sha": "50f6427dd0515c741b0e3968788717325d9fea64", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df7f1374d7a3bdf5a17c069e932d1f2f26ef000d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df7f1374d7a3bdf5a17c069e932d1f2f26ef000d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=df7f1374d7a3bdf5a17c069e932d1f2f26ef000d", "patch": "@@ -360,7 +360,8 @@ pub fn trans_foreign_mod(ccx: @mut CrateContext,\n         }\n \n         let lname = link_name(ccx, foreign_item);\n-        ccx.item_symbols.insert(foreign_item.id, lname.to_owned());\n+        let mut item_symbols = ccx.item_symbols.borrow_mut();\n+        item_symbols.get().insert(foreign_item.id, lname.to_owned());\n     }\n }\n "}]}