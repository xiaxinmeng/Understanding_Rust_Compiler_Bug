{"sha": "b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5ZDBlYTk1YzhkODczMTAyNjJmNmY2Y2I4OGMxNmY2ZDNkMzIzY2M=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2020-09-19T00:14:27Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2020-09-27T23:21:01Z"}, "message": "[mir-opt] Introduce a new flag to enable experimental/unsound mir opts", "tree": {"sha": "eca75f5b5e680d178c067119172c7a3175cad3c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eca75f5b5e680d178c067119172c7a3175cad3c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc", "html_url": "https://github.com/rust-lang/rust/commit/b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f7a1cbfd3b55daee191247770627afab09eece2", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f7a1cbfd3b55daee191247770627afab09eece2", "html_url": "https://github.com/rust-lang/rust/commit/7f7a1cbfd3b55daee191247770627afab09eece2"}], "stats": {"total": 756, "additions": 397, "deletions": 359}, "files": [{"sha": "74194467b38c53f571495c5d203b79cc9647adf7", "filename": "compiler/rustc_mir/src/transform/copy_prop.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcopy_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcopy_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcopy_prop.rs?ref=b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc", "patch": "@@ -31,9 +31,11 @@ pub struct CopyPropagation;\n \n impl<'tcx> MirPass<'tcx> for CopyPropagation {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, _source: MirSource<'tcx>, body: &mut Body<'tcx>) {\n+        let opts = &tcx.sess.opts.debugging_opts;\n         // We only run when the MIR optimization level is > 1.\n         // This avoids a slow pass, and messing up debug info.\n-        if tcx.sess.opts.debugging_opts.mir_opt_level <= 1 {\n+        // FIXME(76740): This optimization is buggy and can cause unsoundness.\n+        if opts.mir_opt_level <= 1 || !opts.unsound_mir_opts {\n             return;\n         }\n "}, {"sha": "712c9cb87c9d5d3f91a676d28021b0a2782a0c3f", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc", "patch": "@@ -1115,6 +1115,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         `hir,typed` (HIR with types for each node),\n         `hir-tree` (dump the raw HIR),\n         `mir` (the MIR), or `mir-cfg` (graphviz formatted MIR)\"),\n+    unsound_mir_opts: bool = (false, parse_bool, [TRACKED],\n+        \"enable unsound and buggy MIR optimizations (default: no)\"),\n     unstable_options: bool = (false, parse_bool, [UNTRACKED],\n         \"adds unstable command line options to rustc interface (default: no)\"),\n     use_ctors_section: Option<bool> = (None, parse_opt_bool, [TRACKED],"}, {"sha": "8283ec73d0f07c3e89377e3e4134d34933607310", "filename": "src/test/mir-opt/copy_propagation.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc/src%2Ftest%2Fmir-opt%2Fcopy_propagation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc/src%2Ftest%2Fmir-opt%2Fcopy_propagation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcopy_propagation.rs?ref=b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc", "patch": "@@ -1,3 +1,4 @@\n+// compile-flags: -Zunsound-mir-opts\n // EMIT_MIR copy_propagation.test.CopyPropagation.diff\n \n fn test(x: u32) -> u32 {"}, {"sha": "152d159063052f45d4bd552cce606a4bb88ab787", "filename": "src/test/mir-opt/copy_propagation.test.CopyPropagation.diff", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc/src%2Ftest%2Fmir-opt%2Fcopy_propagation.test.CopyPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc/src%2Ftest%2Fmir-opt%2Fcopy_propagation.test.CopyPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcopy_propagation.test.CopyPropagation.diff?ref=b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc", "patch": "@@ -2,19 +2,19 @@\n + // MIR for `test` after CopyPropagation\n   \n   fn test(_1: u32) -> u32 {\n-      debug x => _1;                       // in scope 0 at $DIR/copy_propagation.rs:3:9: 3:10\n-      let mut _0: u32;                     // return place in scope 0 at $DIR/copy_propagation.rs:3:20: 3:23\n-      let _2: u32;                         // in scope 0 at $DIR/copy_propagation.rs:4:9: 4:10\n+      debug x => _1;                       // in scope 0 at $DIR/copy_propagation.rs:4:9: 4:10\n+      let mut _0: u32;                     // return place in scope 0 at $DIR/copy_propagation.rs:4:20: 4:23\n+      let _2: u32;                         // in scope 0 at $DIR/copy_propagation.rs:5:9: 5:10\n       scope 1 {\n-          debug y => _0;                   // in scope 1 at $DIR/copy_propagation.rs:4:9: 4:10\n+          debug y => _0;                   // in scope 1 at $DIR/copy_propagation.rs:5:9: 5:10\n       }\n   \n       bb0: {\n-          nop;                             // scope 0 at $DIR/copy_propagation.rs:4:9: 4:10\n-          _0 = _1;                         // scope 0 at $DIR/copy_propagation.rs:4:13: 4:14\n-          nop;                             // scope 1 at $DIR/copy_propagation.rs:5:5: 5:6\n-          nop;                             // scope 0 at $DIR/copy_propagation.rs:6:1: 6:2\n-          return;                          // scope 0 at $DIR/copy_propagation.rs:6:2: 6:2\n+          nop;                             // scope 0 at $DIR/copy_propagation.rs:5:9: 5:10\n+          _0 = _1;                         // scope 0 at $DIR/copy_propagation.rs:5:13: 5:14\n+          nop;                             // scope 1 at $DIR/copy_propagation.rs:6:5: 6:6\n+          nop;                             // scope 0 at $DIR/copy_propagation.rs:7:1: 7:2\n+          return;                          // scope 0 at $DIR/copy_propagation.rs:7:2: 7:2\n       }\n   }\n   "}, {"sha": "98a275c18acdc8cc02beeae3f38204f28b5e7695", "filename": "src/test/mir-opt/early_otherwise_branch_68867.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.rs?ref=b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc", "patch": "@@ -1,5 +1,5 @@\n // ignore-tidy-linelength\n-// compile-flags: -Z mir-opt-level=3\n+// compile-flags: -Z mir-opt-level=3 -Zunsound-mir-opts\n \n // example from #68867\n type CSSFloat = f32;"}, {"sha": "feac14eccd85fc4a6d23854473b9f17899dc987c", "filename": "src/test/mir-opt/inline/inline-any-operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc/src%2Ftest%2Fmir-opt%2Finline%2Finline-any-operand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc/src%2Ftest%2Fmir-opt%2Finline%2Finline-any-operand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-any-operand.rs?ref=b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Z span_free_formats\n+// compile-flags: -Z span_free_formats -Zunsound-mir-opts\n \n // Tests that MIR inliner works for any operand\n "}, {"sha": "d76bc33f52e7dc10aa9d5c56d7f95df6ef50b020", "filename": "src/test/mir-opt/inline/inline-closure-borrows-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc/src%2Ftest%2Fmir-opt%2Finline%2Finline-closure-borrows-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc/src%2Ftest%2Fmir-opt%2Finline%2Finline-closure-borrows-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-closure-borrows-arg.rs?ref=b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Z span_free_formats\n+// compile-flags: -Z span_free_formats -Zunsound-mir-opts\n \n // Tests that MIR inliner can handle closure arguments,\n // even when (#45894)"}, {"sha": "9626ba123aadb9d3f7ebe16cda6bd7ccf0418c53", "filename": "src/test/mir-opt/inline/inline-trait-method_2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc/src%2Ftest%2Fmir-opt%2Finline%2Finline-trait-method_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc/src%2Ftest%2Fmir-opt%2Finline%2Finline-trait-method_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-trait-method_2.rs?ref=b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Z span_free_formats -Z mir-opt-level=3\n+// compile-flags: -Z span_free_formats -Z mir-opt-level=3 -Zunsound-mir-opts\n \n // EMIT_MIR inline_trait_method_2.test2.Inline.after.mir\n fn test2(x: &dyn X) -> bool {"}, {"sha": "ef7c73068faf685ecce261979e4788e29aa8c1a2", "filename": "src/test/mir-opt/issue_73223.main.PreCodegen.32bit.diff", "status": "modified", "additions": 111, "deletions": 96, "changes": 207, "blob_url": "https://github.com/rust-lang/rust/blob/b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff?ref=b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc", "patch": "@@ -3,176 +3,191 @@\n   \n   fn main() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/issue-73223.rs:1:11: 1:11\n-      let mut _1: std::option::Option<i32>; // in scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n-      let _2: i32;                         // in scope 0 at $DIR/issue-73223.rs:3:14: 3:15\n-      let mut _4: (&i32, &i32);            // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _7: bool;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _8: bool;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _9: i32;                     // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _10: &std::fmt::Arguments;   // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n-      let _11: std::fmt::Arguments;        // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n-      let mut _12: &[std::fmt::ArgumentV1; 2]; // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n-      let _13: [std::fmt::ArgumentV1; 2];  // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n-      let mut _14: (&&i32, &&i32);         // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n-      let _15: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _16: &&i32;                  // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _17: std::fmt::ArgumentV1;   // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n-      let mut _18: std::fmt::ArgumentV1;   // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n+      let _1: i32;                         // in scope 0 at $DIR/issue-73223.rs:2:9: 2:14\n+      let mut _2: std::option::Option<i32>; // in scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n+      let _3: i32;                         // in scope 0 at $DIR/issue-73223.rs:3:14: 3:15\n+      let mut _5: (&i32, &i32);            // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _6: &i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _9: bool;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _10: bool;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _11: i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _12: &std::fmt::Arguments;   // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n+      let _13: std::fmt::Arguments;        // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n+      let mut _14: &[&str; 3];             // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _15: &[std::fmt::ArgumentV1; 2]; // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n+      let _16: [std::fmt::ArgumentV1; 2];  // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n+      let mut _17: (&&i32, &&i32);         // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n+      let _18: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _19: &&i32;                  // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let _20: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _21: std::fmt::ArgumentV1;   // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n+      let mut _22: std::fmt::ArgumentV1;   // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n       scope 1 {\n-          debug split => _2;               // in scope 1 at $DIR/issue-73223.rs:2:9: 2:14\n-          let _3: std::option::Option<i32>; // in scope 1 at $DIR/issue-73223.rs:7:9: 7:14\n+          debug split => _1;               // in scope 1 at $DIR/issue-73223.rs:2:9: 2:14\n+          let _4: std::option::Option<i32>; // in scope 1 at $DIR/issue-73223.rs:7:9: 7:14\n           scope 3 {\n-              debug _prev => _3;           // in scope 3 at $DIR/issue-73223.rs:7:9: 7:14\n-              let _5: &i32;                // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-              let _6: &i32;                // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+              debug _prev => _4;           // in scope 3 at $DIR/issue-73223.rs:7:9: 7:14\n+              let _7: &i32;                // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+              let _8: &i32;                // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n               scope 4 {\n-                  debug left_val => _5;    // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                  debug right_val => _6;   // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                  debug left_val => _7;    // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                  debug right_val => _8;   // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                   scope 5 {\n-                      debug arg0 => _21;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                      debug arg1 => _24;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                      debug arg0 => _25;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                      debug arg1 => _28;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                       scope 6 {\n-                          debug x => _21;  // in scope 6 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                          debug f => _20;  // in scope 6 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                          let mut _19: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/std/src/macros.rs:LL:COL\n-                          let mut _20: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/std/src/macros.rs:LL:COL\n-                          let mut _21: &&i32; // in scope 6 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                          debug x => _25;  // in scope 6 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+                          debug f => _24;  // in scope 6 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+                          let mut _23: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                          let mut _24: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                          let mut _25: &&i32; // in scope 6 at $SRC_DIR/std/src/macros.rs:LL:COL\n                       }\n                       scope 8 {\n-                          debug x => _24;  // in scope 8 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                          debug f => _23;  // in scope 8 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                          let mut _22: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/std/src/macros.rs:LL:COL\n-                          let mut _23: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/std/src/macros.rs:LL:COL\n-                          let mut _24: &&i32; // in scope 8 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                          debug x => _28;  // in scope 8 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+                          debug f => _27;  // in scope 8 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+                          let mut _26: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                          let mut _27: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                          let mut _28: &&i32; // in scope 8 at $SRC_DIR/std/src/macros.rs:LL:COL\n                       }\n                   }\n                   scope 10 {\n-                      debug pieces => _25; // in scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                      debug args => _27;   // in scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                      let mut _25: &[&str]; // in scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n-                      let mut _26: std::option::Option<&[std::fmt::rt::v1::Argument]>; // in scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n-                      let mut _27: &[std::fmt::ArgumentV1]; // in scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                      debug pieces => _29; // in scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+                      debug args => _31;   // in scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+                      let mut _29: &[&str]; // in scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                      let mut _30: std::option::Option<&[std::fmt::rt::v1::Argument]>; // in scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                      let mut _31: &[std::fmt::ArgumentV1]; // in scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n                   }\n               }\n           }\n       }\n       scope 2 {\n-          debug v => _2;                   // in scope 2 at $DIR/issue-73223.rs:3:14: 3:15\n+          debug v => _3;                   // in scope 2 at $DIR/issue-73223.rs:3:14: 3:15\n       }\n       scope 7 {\n       }\n       scope 9 {\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n-          ((_1 as Some).0: i32) = const 1_i32; // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n-          discriminant(_1) = 1;            // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n-          _2 = ((_1 as Some).0: i32);      // scope 0 at $DIR/issue-73223.rs:3:14: 3:15\n-          StorageDead(_1);                 // scope 0 at $DIR/issue-73223.rs:5:6: 5:7\n-          ((_3 as Some).0: i32) = _2;      // scope 1 at $DIR/issue-73223.rs:7:22: 7:27\n-          discriminant(_3) = 1;            // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n-          (_4.0: &i32) = &_2;              // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          (_4.1: &i32) = const main::promoted[1]; // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_1);                 // scope 0 at $DIR/issue-73223.rs:2:9: 2:14\n+          StorageLive(_2);                 // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n+          ((_2 as Some).0: i32) = const 1_i32; // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n+          discriminant(_2) = 1;            // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n+          StorageLive(_3);                 // scope 0 at $DIR/issue-73223.rs:3:14: 3:15\n+          _3 = ((_2 as Some).0: i32);      // scope 0 at $DIR/issue-73223.rs:3:14: 3:15\n+          _1 = _3;                         // scope 2 at $DIR/issue-73223.rs:3:20: 3:21\n+          StorageDead(_3);                 // scope 0 at $DIR/issue-73223.rs:3:20: 3:21\n+          StorageDead(_2);                 // scope 0 at $DIR/issue-73223.rs:5:6: 5:7\n+          ((_4 as Some).0: i32) = _1;      // scope 1 at $DIR/issue-73223.rs:7:22: 7:27\n+          discriminant(_4) = 1;            // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n+          (_5.0: &i32) = &_1;              // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _6 = const main::promoted[1];    // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // ty::Const\n                                            // + ty: &i32\n                                            // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[1]))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[1])) }\n-          StorageLive(_5);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _5 = (_4.0: &i32);               // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _6 = (_4.1: &i32);               // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_7);                 // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_8);                 // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          (_5.1: &i32) = move _6;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_7);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _7 = (_5.0: &i32);               // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _8 = (_5.1: &i32);               // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_9);                 // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _9 = (*_5);                      // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _8 = Eq(move _9, const 1_i32);   // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_9);                 // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _7 = Not(move _8);               // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_8);                 // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          switchInt(_7) -> [false: bb1, otherwise: bb2]; // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_10);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_11);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _11 = (*_7);                     // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _10 = Eq(move _11, const 1_i32); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_11);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _9 = Not(move _10);              // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_10);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          switchInt(_9) -> [false: bb1, otherwise: bb2]; // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       }\n   \n       bb1: {\n-          StorageDead(_7);                 // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_5);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_9);                 // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_7);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _0 = const ();                   // scope 0 at $DIR/issue-73223.rs:1:11: 9:2\n+          StorageDead(_1);                 // scope 0 at $DIR/issue-73223.rs:9:1: 9:2\n           return;                          // scope 0 at $DIR/issue-73223.rs:9:2: 9:2\n       }\n   \n       bb2: {\n-          StorageLive(_11);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n-          _25 = const main::promoted[0] as &[&str] (Pointer(Unsize)); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_13);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          _14 = const main::promoted[0];   // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // ty::Const\n                                            // + ty: &[&str; 3]\n                                            // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: &[&str; 3], val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[0])) }\n-          StorageLive(_13);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n-          StorageLive(_15);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _15 = _5;                        // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          (_14.0: &&i32) = &_15;           // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_16);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _16 = &_6;                       // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          (_14.1: &&i32) = move _16;       // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n-          StorageDead(_16);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n-          _21 = (_14.0: &&i32);            // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _24 = (_14.1: &&i32);            // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _20 = <&i32 as Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _29 = move _14 as &[&str] (Pointer(Unsize)); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_16);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageLive(_18);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _18 = _7;                        // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          (_17.0: &&i32) = &_18;           // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_19);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_20);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _20 = _8;                        // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _19 = &_20;                      // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          (_17.1: &&i32) = move _19;       // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageDead(_19);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          _25 = (_17.0: &&i32);            // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _28 = (_17.1: &&i32);            // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _24 = <&i32 as Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n-          StorageLive(_19);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          _19 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _20) -> bb3; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          StorageLive(_23);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          _23 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _24) -> bb3; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb3: {\n-          (_17.0: &core::fmt::Opaque) = transmute::<&&i32, &core::fmt::Opaque>(move _21) -> bb4; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          (_21.0: &core::fmt::Opaque) = transmute::<&&i32, &core::fmt::Opaque>(move _25) -> bb4; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb4: {\n-          (_17.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _19; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          StorageDead(_19);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          _23 = <&i32 as Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          (_21.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _23; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          StorageDead(_23);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          _27 = <&i32 as Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n-          StorageLive(_22);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          _22 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _23) -> bb5; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          StorageLive(_26);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          _26 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _27) -> bb5; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb5: {\n-          (_18.0: &core::fmt::Opaque) = transmute::<&&i32, &core::fmt::Opaque>(move _24) -> bb6; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          (_22.0: &core::fmt::Opaque) = transmute::<&&i32, &core::fmt::Opaque>(move _28) -> bb6; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb6: {\n-          (_18.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _22; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          StorageDead(_22);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          _13 = [move _17, move _18];      // scope 5 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          (_22.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _26; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          StorageDead(_26);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          _16 = [move _21, move _22];      // scope 5 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          _15 = &_16;                      // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          _31 = move _15 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageLive(_30);                // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          discriminant(_30) = 0;           // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          (_13.0: &[&str]) = move _29;     // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          (_13.1: std::option::Option<&[std::fmt::rt::v1::Argument]>) = move _30; // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          (_13.2: &[std::fmt::ArgumentV1]) = move _31; // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          StorageDead(_30);                // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           _12 = &_13;                      // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n-          _27 = move _12 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n-          StorageLive(_26);                // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          discriminant(_26) = 0;           // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          (_11.0: &[&str]) = move _25;     // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          (_11.1: std::option::Option<&[std::fmt::rt::v1::Argument]>) = move _26; // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          (_11.2: &[std::fmt::ArgumentV1]) = move _27; // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          StorageDead(_26);                // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          _10 = &_11;                      // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n-          begin_panic_fmt(move _10);       // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          begin_panic_fmt(move _12);       // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's> fn(&'r std::fmt::Arguments<'s>) -> ! {std::rt::begin_panic_fmt}, val: Value(Scalar(<ZST>)) }"}, {"sha": "ef7c73068faf685ecce261979e4788e29aa8c1a2", "filename": "src/test/mir-opt/issue_73223.main.PreCodegen.64bit.diff", "status": "modified", "additions": 111, "deletions": 96, "changes": 207, "blob_url": "https://github.com/rust-lang/rust/blob/b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff?ref=b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc", "patch": "@@ -3,176 +3,191 @@\n   \n   fn main() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/issue-73223.rs:1:11: 1:11\n-      let mut _1: std::option::Option<i32>; // in scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n-      let _2: i32;                         // in scope 0 at $DIR/issue-73223.rs:3:14: 3:15\n-      let mut _4: (&i32, &i32);            // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _7: bool;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _8: bool;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _9: i32;                     // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _10: &std::fmt::Arguments;   // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n-      let _11: std::fmt::Arguments;        // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n-      let mut _12: &[std::fmt::ArgumentV1; 2]; // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n-      let _13: [std::fmt::ArgumentV1; 2];  // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n-      let mut _14: (&&i32, &&i32);         // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n-      let _15: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _16: &&i32;                  // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _17: std::fmt::ArgumentV1;   // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n-      let mut _18: std::fmt::ArgumentV1;   // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n+      let _1: i32;                         // in scope 0 at $DIR/issue-73223.rs:2:9: 2:14\n+      let mut _2: std::option::Option<i32>; // in scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n+      let _3: i32;                         // in scope 0 at $DIR/issue-73223.rs:3:14: 3:15\n+      let mut _5: (&i32, &i32);            // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _6: &i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _9: bool;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _10: bool;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _11: i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _12: &std::fmt::Arguments;   // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n+      let _13: std::fmt::Arguments;        // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n+      let mut _14: &[&str; 3];             // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _15: &[std::fmt::ArgumentV1; 2]; // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n+      let _16: [std::fmt::ArgumentV1; 2];  // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n+      let mut _17: (&&i32, &&i32);         // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n+      let _18: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _19: &&i32;                  // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let _20: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _21: std::fmt::ArgumentV1;   // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n+      let mut _22: std::fmt::ArgumentV1;   // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n       scope 1 {\n-          debug split => _2;               // in scope 1 at $DIR/issue-73223.rs:2:9: 2:14\n-          let _3: std::option::Option<i32>; // in scope 1 at $DIR/issue-73223.rs:7:9: 7:14\n+          debug split => _1;               // in scope 1 at $DIR/issue-73223.rs:2:9: 2:14\n+          let _4: std::option::Option<i32>; // in scope 1 at $DIR/issue-73223.rs:7:9: 7:14\n           scope 3 {\n-              debug _prev => _3;           // in scope 3 at $DIR/issue-73223.rs:7:9: 7:14\n-              let _5: &i32;                // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-              let _6: &i32;                // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+              debug _prev => _4;           // in scope 3 at $DIR/issue-73223.rs:7:9: 7:14\n+              let _7: &i32;                // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+              let _8: &i32;                // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n               scope 4 {\n-                  debug left_val => _5;    // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                  debug right_val => _6;   // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                  debug left_val => _7;    // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                  debug right_val => _8;   // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                   scope 5 {\n-                      debug arg0 => _21;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                      debug arg1 => _24;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                      debug arg0 => _25;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                      debug arg1 => _28;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                       scope 6 {\n-                          debug x => _21;  // in scope 6 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                          debug f => _20;  // in scope 6 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                          let mut _19: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/std/src/macros.rs:LL:COL\n-                          let mut _20: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/std/src/macros.rs:LL:COL\n-                          let mut _21: &&i32; // in scope 6 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                          debug x => _25;  // in scope 6 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+                          debug f => _24;  // in scope 6 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+                          let mut _23: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                          let mut _24: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                          let mut _25: &&i32; // in scope 6 at $SRC_DIR/std/src/macros.rs:LL:COL\n                       }\n                       scope 8 {\n-                          debug x => _24;  // in scope 8 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                          debug f => _23;  // in scope 8 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                          let mut _22: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/std/src/macros.rs:LL:COL\n-                          let mut _23: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/std/src/macros.rs:LL:COL\n-                          let mut _24: &&i32; // in scope 8 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                          debug x => _28;  // in scope 8 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+                          debug f => _27;  // in scope 8 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+                          let mut _26: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                          let mut _27: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                          let mut _28: &&i32; // in scope 8 at $SRC_DIR/std/src/macros.rs:LL:COL\n                       }\n                   }\n                   scope 10 {\n-                      debug pieces => _25; // in scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                      debug args => _27;   // in scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                      let mut _25: &[&str]; // in scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n-                      let mut _26: std::option::Option<&[std::fmt::rt::v1::Argument]>; // in scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n-                      let mut _27: &[std::fmt::ArgumentV1]; // in scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                      debug pieces => _29; // in scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+                      debug args => _31;   // in scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+                      let mut _29: &[&str]; // in scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                      let mut _30: std::option::Option<&[std::fmt::rt::v1::Argument]>; // in scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                      let mut _31: &[std::fmt::ArgumentV1]; // in scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n                   }\n               }\n           }\n       }\n       scope 2 {\n-          debug v => _2;                   // in scope 2 at $DIR/issue-73223.rs:3:14: 3:15\n+          debug v => _3;                   // in scope 2 at $DIR/issue-73223.rs:3:14: 3:15\n       }\n       scope 7 {\n       }\n       scope 9 {\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n-          ((_1 as Some).0: i32) = const 1_i32; // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n-          discriminant(_1) = 1;            // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n-          _2 = ((_1 as Some).0: i32);      // scope 0 at $DIR/issue-73223.rs:3:14: 3:15\n-          StorageDead(_1);                 // scope 0 at $DIR/issue-73223.rs:5:6: 5:7\n-          ((_3 as Some).0: i32) = _2;      // scope 1 at $DIR/issue-73223.rs:7:22: 7:27\n-          discriminant(_3) = 1;            // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n-          (_4.0: &i32) = &_2;              // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          (_4.1: &i32) = const main::promoted[1]; // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_1);                 // scope 0 at $DIR/issue-73223.rs:2:9: 2:14\n+          StorageLive(_2);                 // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n+          ((_2 as Some).0: i32) = const 1_i32; // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n+          discriminant(_2) = 1;            // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n+          StorageLive(_3);                 // scope 0 at $DIR/issue-73223.rs:3:14: 3:15\n+          _3 = ((_2 as Some).0: i32);      // scope 0 at $DIR/issue-73223.rs:3:14: 3:15\n+          _1 = _3;                         // scope 2 at $DIR/issue-73223.rs:3:20: 3:21\n+          StorageDead(_3);                 // scope 0 at $DIR/issue-73223.rs:3:20: 3:21\n+          StorageDead(_2);                 // scope 0 at $DIR/issue-73223.rs:5:6: 5:7\n+          ((_4 as Some).0: i32) = _1;      // scope 1 at $DIR/issue-73223.rs:7:22: 7:27\n+          discriminant(_4) = 1;            // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n+          (_5.0: &i32) = &_1;              // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _6 = const main::promoted[1];    // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // ty::Const\n                                            // + ty: &i32\n                                            // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[1]))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[1])) }\n-          StorageLive(_5);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _5 = (_4.0: &i32);               // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _6 = (_4.1: &i32);               // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_7);                 // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_8);                 // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          (_5.1: &i32) = move _6;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_7);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _7 = (_5.0: &i32);               // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _8 = (_5.1: &i32);               // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_9);                 // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _9 = (*_5);                      // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _8 = Eq(move _9, const 1_i32);   // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_9);                 // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _7 = Not(move _8);               // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_8);                 // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          switchInt(_7) -> [false: bb1, otherwise: bb2]; // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_10);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_11);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _11 = (*_7);                     // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _10 = Eq(move _11, const 1_i32); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_11);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _9 = Not(move _10);              // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_10);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          switchInt(_9) -> [false: bb1, otherwise: bb2]; // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       }\n   \n       bb1: {\n-          StorageDead(_7);                 // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_5);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_9);                 // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_7);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _0 = const ();                   // scope 0 at $DIR/issue-73223.rs:1:11: 9:2\n+          StorageDead(_1);                 // scope 0 at $DIR/issue-73223.rs:9:1: 9:2\n           return;                          // scope 0 at $DIR/issue-73223.rs:9:2: 9:2\n       }\n   \n       bb2: {\n-          StorageLive(_11);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n-          _25 = const main::promoted[0] as &[&str] (Pointer(Unsize)); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_13);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          _14 = const main::promoted[0];   // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // ty::Const\n                                            // + ty: &[&str; 3]\n                                            // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: &[&str; 3], val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[0])) }\n-          StorageLive(_13);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n-          StorageLive(_15);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _15 = _5;                        // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          (_14.0: &&i32) = &_15;           // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_16);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _16 = &_6;                       // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          (_14.1: &&i32) = move _16;       // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n-          StorageDead(_16);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n-          _21 = (_14.0: &&i32);            // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _24 = (_14.1: &&i32);            // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _20 = <&i32 as Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _29 = move _14 as &[&str] (Pointer(Unsize)); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_16);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageLive(_18);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _18 = _7;                        // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          (_17.0: &&i32) = &_18;           // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_19);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_20);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _20 = _8;                        // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _19 = &_20;                      // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          (_17.1: &&i32) = move _19;       // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageDead(_19);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          _25 = (_17.0: &&i32);            // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _28 = (_17.1: &&i32);            // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _24 = <&i32 as Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n-          StorageLive(_19);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          _19 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _20) -> bb3; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          StorageLive(_23);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          _23 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _24) -> bb3; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb3: {\n-          (_17.0: &core::fmt::Opaque) = transmute::<&&i32, &core::fmt::Opaque>(move _21) -> bb4; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          (_21.0: &core::fmt::Opaque) = transmute::<&&i32, &core::fmt::Opaque>(move _25) -> bb4; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb4: {\n-          (_17.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _19; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          StorageDead(_19);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          _23 = <&i32 as Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          (_21.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _23; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          StorageDead(_23);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          _27 = <&i32 as Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n-          StorageLive(_22);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          _22 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _23) -> bb5; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          StorageLive(_26);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          _26 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _27) -> bb5; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb5: {\n-          (_18.0: &core::fmt::Opaque) = transmute::<&&i32, &core::fmt::Opaque>(move _24) -> bb6; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          (_22.0: &core::fmt::Opaque) = transmute::<&&i32, &core::fmt::Opaque>(move _28) -> bb6; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb6: {\n-          (_18.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _22; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          StorageDead(_22);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          _13 = [move _17, move _18];      // scope 5 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          (_22.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _26; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          StorageDead(_26);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          _16 = [move _21, move _22];      // scope 5 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          _15 = &_16;                      // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          _31 = move _15 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageLive(_30);                // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          discriminant(_30) = 0;           // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          (_13.0: &[&str]) = move _29;     // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          (_13.1: std::option::Option<&[std::fmt::rt::v1::Argument]>) = move _30; // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          (_13.2: &[std::fmt::ArgumentV1]) = move _31; // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          StorageDead(_30);                // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           _12 = &_13;                      // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n-          _27 = move _12 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n-          StorageLive(_26);                // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          discriminant(_26) = 0;           // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          (_11.0: &[&str]) = move _25;     // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          (_11.1: std::option::Option<&[std::fmt::rt::v1::Argument]>) = move _26; // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          (_11.2: &[std::fmt::ArgumentV1]) = move _27; // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          StorageDead(_26);                // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          _10 = &_11;                      // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n-          begin_panic_fmt(move _10);       // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          begin_panic_fmt(move _12);       // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's> fn(&'r std::fmt::Arguments<'s>) -> ! {std::rt::begin_panic_fmt}, val: Value(Scalar(<ZST>)) }"}, {"sha": "22b18b107701e8bccc5d5e144dc3c676a77e2d57", "filename": "src/test/mir-opt/nrvo-simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc/src%2Ftest%2Fmir-opt%2Fnrvo-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc/src%2Ftest%2Fmir-opt%2Fnrvo-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnrvo-simple.rs?ref=b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmir-opt-level=1\n+// compile-flags: -Zmir-opt-level=1 -Zunsound-mir-opts\n \n // EMIT_MIR nrvo_simple.nrvo.RenameReturnPlace.diff\n fn nrvo(init: fn(&mut [u8; 1024])) -> [u8; 1024] {"}, {"sha": "84f57deccf7e0fa810dbe1039d5e2da91b1b9cc7", "filename": "src/test/mir-opt/simplify-locals-removes-unused-discriminant-reads.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads.rs?ref=b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc", "patch": "@@ -1,3 +1,5 @@\n+// compile-flags: -Zunsound-mir-opts\n+\n fn map(x: Option<Box<()>>) -> Option<Box<()>> {\n     match x {\n         None => None,"}, {"sha": "760fb747f7229aac41b6abb9cb2db08c3720c3fe", "filename": "src/test/mir-opt/simplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.32bit.diff", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.32bit.diff?ref=b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc", "patch": "@@ -2,25 +2,25 @@\n + // MIR for `map` after SimplifyLocals\n   \n   fn map(_1: Option<Box<()>>) -> Option<Box<()>> {\n-      debug x => _1;                       // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:1:8: 1:9\n-      let mut _0: std::option::Option<std::boxed::Box<()>>; // return place in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:1:31: 1:46\n--     let mut _2: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n--     let _3: std::boxed::Box<()>;         // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:14: 4:15\n--     let mut _4: std::boxed::Box<()>;     // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:25: 4:26\n--     let mut _5: bool;                    // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:1: 6:2\n--     let mut _6: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:1: 6:2\n--     let mut _7: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:1: 6:2\n+      debug x => _1;                       // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:8: 3:9\n+      let mut _0: std::option::Option<std::boxed::Box<()>>; // return place in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:31: 3:46\n+-     let mut _2: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:5:9: 5:13\n+-     let _3: std::boxed::Box<()>;         // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:14: 6:15\n+-     let mut _4: std::boxed::Box<()>;     // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:25: 6:26\n+-     let mut _5: bool;                    // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:8:1: 8:2\n+-     let mut _6: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:8:1: 8:2\n+-     let mut _7: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:8:1: 8:2\n       scope 1 {\n-          debug x => ((_0 as Some).0: std::boxed::Box<()>); // in scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:14: 4:15\n+          debug x => ((_0 as Some).0: std::boxed::Box<()>); // in scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:14: 6:15\n       }\n   \n       bb0: {\n--         _5 = const false;                // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n--         _5 = const true;                 // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n--         _2 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n-          _0 = move _1;                    // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:20: 4:27\n--         _6 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:1: 6:2\n-          return;                          // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:2: 6:2\n+-         _5 = const false;                // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:5:9: 5:13\n+-         _5 = const true;                 // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:5:9: 5:13\n+-         _2 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:5:9: 5:13\n+          _0 = move _1;                    // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:20: 6:27\n+-         _6 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:8:1: 8:2\n+          return;                          // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:8:2: 8:2\n       }\n   }\n   "}, {"sha": "760fb747f7229aac41b6abb9cb2db08c3720c3fe", "filename": "src/test/mir-opt/simplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.64bit.diff", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.64bit.diff?ref=b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc", "patch": "@@ -2,25 +2,25 @@\n + // MIR for `map` after SimplifyLocals\n   \n   fn map(_1: Option<Box<()>>) -> Option<Box<()>> {\n-      debug x => _1;                       // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:1:8: 1:9\n-      let mut _0: std::option::Option<std::boxed::Box<()>>; // return place in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:1:31: 1:46\n--     let mut _2: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n--     let _3: std::boxed::Box<()>;         // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:14: 4:15\n--     let mut _4: std::boxed::Box<()>;     // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:25: 4:26\n--     let mut _5: bool;                    // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:1: 6:2\n--     let mut _6: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:1: 6:2\n--     let mut _7: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:1: 6:2\n+      debug x => _1;                       // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:8: 3:9\n+      let mut _0: std::option::Option<std::boxed::Box<()>>; // return place in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:31: 3:46\n+-     let mut _2: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:5:9: 5:13\n+-     let _3: std::boxed::Box<()>;         // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:14: 6:15\n+-     let mut _4: std::boxed::Box<()>;     // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:25: 6:26\n+-     let mut _5: bool;                    // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:8:1: 8:2\n+-     let mut _6: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:8:1: 8:2\n+-     let mut _7: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:8:1: 8:2\n       scope 1 {\n-          debug x => ((_0 as Some).0: std::boxed::Box<()>); // in scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:14: 4:15\n+          debug x => ((_0 as Some).0: std::boxed::Box<()>); // in scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:14: 6:15\n       }\n   \n       bb0: {\n--         _5 = const false;                // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n--         _5 = const true;                 // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n--         _2 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n-          _0 = move _1;                    // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:20: 4:27\n--         _6 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:1: 6:2\n-          return;                          // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:2: 6:2\n+-         _5 = const false;                // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:5:9: 5:13\n+-         _5 = const true;                 // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:5:9: 5:13\n+-         _2 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:5:9: 5:13\n+          _0 = move _1;                    // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:20: 6:27\n+-         _6 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:8:1: 8:2\n+          return;                          // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:8:2: 8:2\n       }\n   }\n   "}, {"sha": "eb307de20744a7c63dffc368842c01c9940e61b9", "filename": "src/test/mir-opt/simplify_try.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc/src%2Ftest%2Fmir-opt%2Fsimplify_try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc/src%2Ftest%2Fmir-opt%2Fsimplify_try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.rs?ref=b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc", "patch": "@@ -1,3 +1,4 @@\n+// compile-flags: -Zunsound-mir-opts\n // EMIT_MIR simplify_try.try_identity.SimplifyArmIdentity.diff\n // EMIT_MIR simplify_try.try_identity.SimplifyBranchSame.after.mir\n // EMIT_MIR simplify_try.try_identity.SimplifyLocals.after.mir"}, {"sha": "b3a2b6fbf76b20aceca0aa21474acfe60232368d", "filename": "src/test/mir-opt/simplify_try.try_identity.DestinationPropagation.diff", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.DestinationPropagation.diff?ref=b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc", "patch": "@@ -2,35 +2,35 @@\n + // MIR for `try_identity` after DestinationPropagation\n   \n   fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i32> {\n-      debug x => _1;                       // in scope 0 at $DIR/simplify_try.rs:6:17: 6:18\n-      let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:6:41: 6:57\n-      let _2: u32;                         // in scope 0 at $DIR/simplify_try.rs:7:9: 7:10\n-      let mut _3: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:7:13: 7:15\n-      let mut _4: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:7:13: 7:14\n-      let mut _5: isize;                   // in scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n-      let _6: i32;                         // in scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n-      let mut _7: !;                       // in scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n-      let mut _8: i32;                     // in scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n-      let mut _9: i32;                     // in scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n-      let _10: u32;                        // in scope 0 at $DIR/simplify_try.rs:7:13: 7:15\n-      let mut _11: u32;                    // in scope 0 at $DIR/simplify_try.rs:8:8: 8:9\n+      debug x => _1;                       // in scope 0 at $DIR/simplify_try.rs:7:17: 7:18\n+      let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:7:41: 7:57\n+      let _2: u32;                         // in scope 0 at $DIR/simplify_try.rs:8:9: 8:10\n+      let mut _3: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:8:13: 8:15\n+      let mut _4: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n+      let mut _5: isize;                   // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n+      let _6: i32;                         // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n+      let mut _7: !;                       // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n+      let mut _8: i32;                     // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n+      let mut _9: i32;                     // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n+      let _10: u32;                        // in scope 0 at $DIR/simplify_try.rs:8:13: 8:15\n+      let mut _11: u32;                    // in scope 0 at $DIR/simplify_try.rs:9:8: 9:9\n       scope 1 {\n-          debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:7:9: 7:10\n+          debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:8:9: 8:10\n       }\n       scope 2 {\n-          debug err => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:7:14: 7:15\n+          debug err => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:8:14: 8:15\n           scope 3 {\n               scope 7 {\n                   debug t => ((_0 as Err).0: i32); // in scope 7 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n               }\n               scope 8 {\n                   debug v => ((_0 as Err).0: i32); // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-                  let mut _12: i32;        // in scope 8 at $DIR/simplify_try.rs:7:14: 7:15\n+                  let mut _12: i32;        // in scope 8 at $DIR/simplify_try.rs:8:14: 8:15\n               }\n           }\n       }\n       scope 4 {\n-          debug val => ((_0 as Ok).0: u32); // in scope 4 at $DIR/simplify_try.rs:7:13: 7:15\n+          debug val => ((_0 as Ok).0: u32); // in scope 4 at $DIR/simplify_try.rs:8:13: 8:15\n           scope 5 {\n           }\n       }\n@@ -40,33 +40,33 @@\n       }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/simplify_try.rs:7:9: 7:10\n--         StorageLive(_3);                 // scope 0 at $DIR/simplify_try.rs:7:13: 7:15\n--         StorageLive(_4);                 // scope 0 at $DIR/simplify_try.rs:7:13: 7:14\n--         _4 = _1;                         // scope 0 at $DIR/simplify_try.rs:7:13: 7:14\n+          StorageLive(_2);                 // scope 0 at $DIR/simplify_try.rs:8:9: 8:10\n+-         StorageLive(_3);                 // scope 0 at $DIR/simplify_try.rs:8:13: 8:15\n+-         StorageLive(_4);                 // scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n+-         _4 = _1;                         // scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n -         _3 = move _4;                    // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n--         StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n--         _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n-+         nop;                             // scope 0 at $DIR/simplify_try.rs:7:13: 7:15\n-+         nop;                             // scope 0 at $DIR/simplify_try.rs:7:13: 7:14\n-+         _0 = _1;                         // scope 0 at $DIR/simplify_try.rs:7:13: 7:14\n+-         StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n+-         _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n++         nop;                             // scope 0 at $DIR/simplify_try.rs:8:13: 8:15\n++         nop;                             // scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n++         _0 = _1;                         // scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n +         nop;                             // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-+         nop;                             // scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n-+         _5 = discriminant(_0);           // scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n-          goto -> bb1;                     // scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n++         nop;                             // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n++         _5 = discriminant(_0);           // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n+          goto -> bb1;                     // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n       }\n   \n       bb1: {\n--         _0 = move _3;                    // scope 1 at $DIR/simplify_try.rs:8:5: 8:10\n--         StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:7:15: 7:16\n-+         nop;                             // scope 1 at $DIR/simplify_try.rs:8:5: 8:10\n-+         nop;                             // scope 0 at $DIR/simplify_try.rs:7:15: 7:16\n-          StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:9:1: 9:2\n-          goto -> bb2;                     // scope 0 at $DIR/simplify_try.rs:9:2: 9:2\n+-         _0 = move _3;                    // scope 1 at $DIR/simplify_try.rs:9:5: 9:10\n+-         StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:8:15: 8:16\n++         nop;                             // scope 1 at $DIR/simplify_try.rs:9:5: 9:10\n++         nop;                             // scope 0 at $DIR/simplify_try.rs:8:15: 8:16\n+          StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:10:1: 10:2\n+          goto -> bb2;                     // scope 0 at $DIR/simplify_try.rs:10:2: 10:2\n       }\n   \n       bb2: {\n-          return;                          // scope 0 at $DIR/simplify_try.rs:9:2: 9:2\n+          return;                          // scope 0 at $DIR/simplify_try.rs:10:2: 10:2\n       }\n   }\n   "}, {"sha": "14a4318c1bc6f58cf16ace92fd8cfdbe84137655", "filename": "src/test/mir-opt/simplify_try.try_identity.SimplifyArmIdentity.diff", "status": "modified", "additions": 51, "deletions": 51, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyArmIdentity.diff?ref=b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc", "patch": "@@ -2,25 +2,25 @@\n + // MIR for `try_identity` after SimplifyArmIdentity\n   \n   fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i32> {\n-      debug x => _1;                       // in scope 0 at $DIR/simplify_try.rs:6:17: 6:18\n-      let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:6:41: 6:57\n-      let _2: u32;                         // in scope 0 at $DIR/simplify_try.rs:7:9: 7:10\n-      let mut _3: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:7:13: 7:15\n-      let mut _4: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:7:13: 7:14\n-      let mut _5: isize;                   // in scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n-      let _6: i32;                         // in scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n-      let mut _7: !;                       // in scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n-      let mut _8: i32;                     // in scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n-      let mut _9: i32;                     // in scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n-      let _10: u32;                        // in scope 0 at $DIR/simplify_try.rs:7:13: 7:15\n-      let mut _11: u32;                    // in scope 0 at $DIR/simplify_try.rs:8:8: 8:9\n+      debug x => _1;                       // in scope 0 at $DIR/simplify_try.rs:7:17: 7:18\n+      let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:7:41: 7:57\n+      let _2: u32;                         // in scope 0 at $DIR/simplify_try.rs:8:9: 8:10\n+      let mut _3: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:8:13: 8:15\n+      let mut _4: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n+      let mut _5: isize;                   // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n+      let _6: i32;                         // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n+      let mut _7: !;                       // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n+      let mut _8: i32;                     // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n+      let mut _9: i32;                     // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n+      let _10: u32;                        // in scope 0 at $DIR/simplify_try.rs:8:13: 8:15\n+      let mut _11: u32;                    // in scope 0 at $DIR/simplify_try.rs:9:8: 9:9\n       scope 1 {\n--         debug y => _2;                   // in scope 1 at $DIR/simplify_try.rs:7:9: 7:10\n-+         debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:7:9: 7:10\n+-         debug y => _2;                   // in scope 1 at $DIR/simplify_try.rs:8:9: 8:10\n++         debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:8:9: 8:10\n       }\n       scope 2 {\n--         debug err => _6;                 // in scope 2 at $DIR/simplify_try.rs:7:14: 7:15\n-+         debug err => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:7:14: 7:15\n+-         debug err => _6;                 // in scope 2 at $DIR/simplify_try.rs:8:14: 8:15\n++         debug err => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:8:14: 8:15\n           scope 3 {\n               scope 7 {\n -                 debug t => _9;           // in scope 7 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n@@ -29,13 +29,13 @@\n               scope 8 {\n -                 debug v => _8;           // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n +                 debug v => ((_0 as Err).0: i32); // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-                  let mut _12: i32;        // in scope 8 at $DIR/simplify_try.rs:7:14: 7:15\n+                  let mut _12: i32;        // in scope 8 at $DIR/simplify_try.rs:8:14: 8:15\n               }\n           }\n       }\n       scope 4 {\n--         debug val => _10;                // in scope 4 at $DIR/simplify_try.rs:7:13: 7:15\n-+         debug val => ((_0 as Ok).0: u32); // in scope 4 at $DIR/simplify_try.rs:7:13: 7:15\n+-         debug val => _10;                // in scope 4 at $DIR/simplify_try.rs:8:13: 8:15\n++         debug val => ((_0 as Ok).0: u32); // in scope 4 at $DIR/simplify_try.rs:8:13: 8:15\n           scope 5 {\n           }\n       }\n@@ -44,55 +44,55 @@\n       }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/simplify_try.rs:7:9: 7:10\n-          StorageLive(_3);                 // scope 0 at $DIR/simplify_try.rs:7:13: 7:15\n-          StorageLive(_4);                 // scope 0 at $DIR/simplify_try.rs:7:13: 7:14\n-          _4 = _1;                         // scope 0 at $DIR/simplify_try.rs:7:13: 7:14\n+          StorageLive(_2);                 // scope 0 at $DIR/simplify_try.rs:8:9: 8:10\n+          StorageLive(_3);                 // scope 0 at $DIR/simplify_try.rs:8:13: 8:15\n+          StorageLive(_4);                 // scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n+          _4 = _1;                         // scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n           _3 = move _4;                    // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n-          _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n-          switchInt(move _5) -> [0_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n+          StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n+          _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n+          switchInt(move _5) -> [0_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n       }\n   \n       bb1: {\n--         StorageLive(_10);                // scope 0 at $DIR/simplify_try.rs:7:13: 7:15\n--         _10 = ((_3 as Ok).0: u32);       // scope 0 at $DIR/simplify_try.rs:7:13: 7:15\n--         _2 = _10;                        // scope 5 at $DIR/simplify_try.rs:7:13: 7:15\n--         StorageDead(_10);                // scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n-+         _0 = move _3;                    // scope 1 at $DIR/simplify_try.rs:8:5: 8:10\n-          StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:7:15: 7:16\n--         StorageLive(_11);                // scope 1 at $DIR/simplify_try.rs:8:8: 8:9\n--         _11 = _2;                        // scope 1 at $DIR/simplify_try.rs:8:8: 8:9\n--         ((_0 as Ok).0: u32) = move _11;  // scope 1 at $DIR/simplify_try.rs:8:5: 8:10\n--         discriminant(_0) = 0;            // scope 1 at $DIR/simplify_try.rs:8:5: 8:10\n--         StorageDead(_11);                // scope 1 at $DIR/simplify_try.rs:8:9: 8:10\n-          StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:9:1: 9:2\n-          goto -> bb3;                     // scope 0 at $DIR/simplify_try.rs:9:2: 9:2\n+-         StorageLive(_10);                // scope 0 at $DIR/simplify_try.rs:8:13: 8:15\n+-         _10 = ((_3 as Ok).0: u32);       // scope 0 at $DIR/simplify_try.rs:8:13: 8:15\n+-         _2 = _10;                        // scope 5 at $DIR/simplify_try.rs:8:13: 8:15\n+-         StorageDead(_10);                // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n++         _0 = move _3;                    // scope 1 at $DIR/simplify_try.rs:9:5: 9:10\n+          StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:8:15: 8:16\n+-         StorageLive(_11);                // scope 1 at $DIR/simplify_try.rs:9:8: 9:9\n+-         _11 = _2;                        // scope 1 at $DIR/simplify_try.rs:9:8: 9:9\n+-         ((_0 as Ok).0: u32) = move _11;  // scope 1 at $DIR/simplify_try.rs:9:5: 9:10\n+-         discriminant(_0) = 0;            // scope 1 at $DIR/simplify_try.rs:9:5: 9:10\n+-         StorageDead(_11);                // scope 1 at $DIR/simplify_try.rs:9:9: 9:10\n+          StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:10:1: 10:2\n+          goto -> bb3;                     // scope 0 at $DIR/simplify_try.rs:10:2: 10:2\n       }\n   \n       bb2: {\n--         StorageLive(_6);                 // scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n--         _6 = ((_3 as Err).0: i32);       // scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n--         StorageLive(_8);                 // scope 3 at $DIR/simplify_try.rs:7:14: 7:15\n--         StorageLive(_9);                 // scope 3 at $DIR/simplify_try.rs:7:14: 7:15\n--         _9 = _6;                         // scope 3 at $DIR/simplify_try.rs:7:14: 7:15\n+-         StorageLive(_6);                 // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n+-         _6 = ((_3 as Err).0: i32);       // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n+-         StorageLive(_8);                 // scope 3 at $DIR/simplify_try.rs:8:14: 8:15\n+-         StorageLive(_9);                 // scope 3 at $DIR/simplify_try.rs:8:14: 8:15\n+-         _9 = _6;                         // scope 3 at $DIR/simplify_try.rs:8:14: 8:15\n -         _8 = move _9;                    // scope 7 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n--         StorageDead(_9);                 // scope 3 at $DIR/simplify_try.rs:7:14: 7:15\n+-         StorageDead(_9);                 // scope 3 at $DIR/simplify_try.rs:8:14: 8:15\n -         StorageLive(_12);                // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n -         _12 = move _8;                   // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n -         ((_0 as Err).0: i32) = move _12; // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n -         discriminant(_0) = 1;            // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n -         StorageDead(_12);                // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n--         StorageDead(_8);                 // scope 3 at $DIR/simplify_try.rs:7:14: 7:15\n--         StorageDead(_6);                 // scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n+-         StorageDead(_8);                 // scope 3 at $DIR/simplify_try.rs:8:14: 8:15\n+-         StorageDead(_6);                 // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n +         _0 = move _3;                    // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:7:15: 7:16\n-          StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:9:1: 9:2\n-          goto -> bb3;                     // scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n+          StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:8:15: 8:16\n+          StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:10:1: 10:2\n+          goto -> bb3;                     // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n       }\n   \n       bb3: {\n-          return;                          // scope 0 at $DIR/simplify_try.rs:9:2: 9:2\n+          return;                          // scope 0 at $DIR/simplify_try.rs:10:2: 10:2\n       }\n   }\n   "}, {"sha": "0ae89b855ba28d33d0a136bfc357825d1ae3bcf9", "filename": "src/test/mir-opt/simplify_try.try_identity.SimplifyBranchSame.after.mir", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyBranchSame.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyBranchSame.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyBranchSame.after.mir?ref=b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc", "patch": "@@ -1,35 +1,35 @@\n // MIR for `try_identity` after SimplifyBranchSame\n \n fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i32> {\n-    debug x => _1;                       // in scope 0 at $DIR/simplify_try.rs:6:17: 6:18\n-    let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:6:41: 6:57\n-    let _2: u32;                         // in scope 0 at $DIR/simplify_try.rs:7:9: 7:10\n-    let mut _3: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:7:13: 7:15\n-    let mut _4: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:7:13: 7:14\n-    let mut _5: isize;                   // in scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n-    let _6: i32;                         // in scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n-    let mut _7: !;                       // in scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n-    let mut _8: i32;                     // in scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n-    let mut _9: i32;                     // in scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n-    let _10: u32;                        // in scope 0 at $DIR/simplify_try.rs:7:13: 7:15\n-    let mut _11: u32;                    // in scope 0 at $DIR/simplify_try.rs:8:8: 8:9\n+    debug x => _1;                       // in scope 0 at $DIR/simplify_try.rs:7:17: 7:18\n+    let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:7:41: 7:57\n+    let _2: u32;                         // in scope 0 at $DIR/simplify_try.rs:8:9: 8:10\n+    let mut _3: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:8:13: 8:15\n+    let mut _4: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n+    let mut _5: isize;                   // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n+    let _6: i32;                         // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n+    let mut _7: !;                       // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n+    let mut _8: i32;                     // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n+    let mut _9: i32;                     // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n+    let _10: u32;                        // in scope 0 at $DIR/simplify_try.rs:8:13: 8:15\n+    let mut _11: u32;                    // in scope 0 at $DIR/simplify_try.rs:9:8: 9:9\n     scope 1 {\n-        debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:7:9: 7:10\n+        debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:8:9: 8:10\n     }\n     scope 2 {\n-        debug err => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:7:14: 7:15\n+        debug err => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:8:14: 8:15\n         scope 3 {\n             scope 7 {\n                 debug t => ((_0 as Err).0: i32); // in scope 7 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n             }\n             scope 8 {\n                 debug v => ((_0 as Err).0: i32); // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-                let mut _12: i32;        // in scope 8 at $DIR/simplify_try.rs:7:14: 7:15\n+                let mut _12: i32;        // in scope 8 at $DIR/simplify_try.rs:8:14: 8:15\n             }\n         }\n     }\n     scope 4 {\n-        debug val => ((_0 as Ok).0: u32); // in scope 4 at $DIR/simplify_try.rs:7:13: 7:15\n+        debug val => ((_0 as Ok).0: u32); // in scope 4 at $DIR/simplify_try.rs:8:13: 8:15\n         scope 5 {\n         }\n     }\n@@ -38,24 +38,24 @@ fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i\n     }\n \n     bb0: {\n-        StorageLive(_2);                 // scope 0 at $DIR/simplify_try.rs:7:9: 7:10\n-        StorageLive(_3);                 // scope 0 at $DIR/simplify_try.rs:7:13: 7:15\n-        StorageLive(_4);                 // scope 0 at $DIR/simplify_try.rs:7:13: 7:14\n-        _4 = _1;                         // scope 0 at $DIR/simplify_try.rs:7:13: 7:14\n+        StorageLive(_2);                 // scope 0 at $DIR/simplify_try.rs:8:9: 8:10\n+        StorageLive(_3);                 // scope 0 at $DIR/simplify_try.rs:8:13: 8:15\n+        StorageLive(_4);                 // scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n+        _4 = _1;                         // scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n         _3 = move _4;                    // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-        StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n-        _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n-        goto -> bb1;                     // scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n+        StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n+        _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n+        goto -> bb1;                     // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n     }\n \n     bb1: {\n-        _0 = move _3;                    // scope 1 at $DIR/simplify_try.rs:8:5: 8:10\n-        StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:7:15: 7:16\n-        StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:9:1: 9:2\n-        goto -> bb2;                     // scope 0 at $DIR/simplify_try.rs:9:2: 9:2\n+        _0 = move _3;                    // scope 1 at $DIR/simplify_try.rs:9:5: 9:10\n+        StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:8:15: 8:16\n+        StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:10:1: 10:2\n+        goto -> bb2;                     // scope 0 at $DIR/simplify_try.rs:10:2: 10:2\n     }\n \n     bb2: {\n-        return;                          // scope 0 at $DIR/simplify_try.rs:9:2: 9:2\n+        return;                          // scope 0 at $DIR/simplify_try.rs:10:2: 10:2\n     }\n }"}, {"sha": "508f2705d07016b85a11526fd199fa7cbc61fcff", "filename": "src/test/mir-opt/simplify_try.try_identity.SimplifyLocals.after.mir", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyLocals.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyLocals.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyLocals.after.mir?ref=b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc", "patch": "@@ -1,13 +1,13 @@\n // MIR for `try_identity` after SimplifyLocals\n \n fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i32> {\n-    debug x => _1;                       // in scope 0 at $DIR/simplify_try.rs:6:17: 6:18\n-    let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:6:41: 6:57\n+    debug x => _1;                       // in scope 0 at $DIR/simplify_try.rs:7:17: 7:18\n+    let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:7:41: 7:57\n     scope 1 {\n-        debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:7:9: 7:10\n+        debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:8:9: 8:10\n     }\n     scope 2 {\n-        debug err => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:7:14: 7:15\n+        debug err => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:8:14: 8:15\n         scope 3 {\n             scope 7 {\n                 debug t => ((_0 as Err).0: i32); // in scope 7 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n@@ -18,7 +18,7 @@ fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i\n         }\n     }\n     scope 4 {\n-        debug val => ((_0 as Ok).0: u32); // in scope 4 at $DIR/simplify_try.rs:7:13: 7:15\n+        debug val => ((_0 as Ok).0: u32); // in scope 4 at $DIR/simplify_try.rs:8:13: 8:15\n         scope 5 {\n         }\n     }\n@@ -27,7 +27,7 @@ fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i\n     }\n \n     bb0: {\n-        _0 = _1;                         // scope 0 at $DIR/simplify_try.rs:7:13: 7:14\n-        return;                          // scope 0 at $DIR/simplify_try.rs:9:2: 9:2\n+        _0 = _1;                         // scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n+        return;                          // scope 0 at $DIR/simplify_try.rs:10:2: 10:2\n     }\n }"}, {"sha": "90999a3e5564b5f6935654908693517c524a7a8c", "filename": "src/test/ui/mir/issue-76740-copy-propagation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc/src%2Ftest%2Fui%2Fmir%2Fissue-76740-copy-propagation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc/src%2Ftest%2Fui%2Fmir%2Fissue-76740-copy-propagation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-76740-copy-propagation.rs?ref=b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc", "patch": "@@ -1,5 +1,5 @@\n // Regression test for issue #76740.\n-// run-fail FIXME: change to run-pass once #76899 lands\n+// run-pass\n // compile-flags: -Zmir-opt-level=3\n \n #[derive(Copy, Clone)]"}]}