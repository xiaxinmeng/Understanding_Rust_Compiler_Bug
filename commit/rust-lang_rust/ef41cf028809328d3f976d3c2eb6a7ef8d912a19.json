{"sha": "ef41cf028809328d3f976d3c2eb6a7ef8d912a19", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmNDFjZjAyODgwOTMyOGQzZjk3NmQzYzJlYjZhN2VmOGQ5MTJhMTk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-06-29T21:35:10Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-07-04T01:06:29Z"}, "message": "Compile stage0 tools with the raw bootstrap compiler\n\nThis commit updates the stage0 build of tools to use the libraries of the stage0\ncompiler instead of the compiled libraries by the stage0 compiler. This should\nenable us to avoid any stage0 hacks (like missing SIMD).", "tree": {"sha": "6565dd03934020c49b66f70e049e16449141490a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6565dd03934020c49b66f70e049e16449141490a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef41cf028809328d3f976d3c2eb6a7ef8d912a19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef41cf028809328d3f976d3c2eb6a7ef8d912a19", "html_url": "https://github.com/rust-lang/rust/commit/ef41cf028809328d3f976d3c2eb6a7ef8d912a19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef41cf028809328d3f976d3c2eb6a7ef8d912a19/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb97bb50d1da7b7cafdaf83797f3514279f80421", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb97bb50d1da7b7cafdaf83797f3514279f80421", "html_url": "https://github.com/rust-lang/rust/commit/fb97bb50d1da7b7cafdaf83797f3514279f80421"}], "stats": {"total": 102, "additions": 73, "deletions": 29}, "files": [{"sha": "fad0a553802a27e200faad6983ffa18835e29cea", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ef41cf028809328d3f976d3c2eb6a7ef8d912a19/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef41cf028809328d3f976d3c2eb6a7ef8d912a19/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=ef41cf028809328d3f976d3c2eb6a7ef8d912a19", "patch": "@@ -769,6 +769,22 @@ impl<'a> Builder<'a> {\n \n         let want_rustdoc = self.doc_tests != DocTests::No;\n \n+        // We synthetically interpret a stage0 compiler used to build tools as a\n+        // \"raw\" compiler in that it's the exact snapshot we download. Normally\n+        // the stage0 build means it uses libraries build by the stage0\n+        // compiler, but for tools we just use the precompiled libraries that\n+        // we've downloaded\n+        let use_snapshot = mode == Mode::ToolBootstrap;\n+        assert!(!use_snapshot || stage == 0);\n+\n+        let maybe_sysroot = self.sysroot(compiler);\n+        let sysroot = if use_snapshot {\n+            self.rustc_snapshot_sysroot()\n+        } else {\n+            &maybe_sysroot\n+        };\n+        let libdir = sysroot.join(libdir(&compiler.host));\n+\n         // Customize the compiler we're running. Specify the compiler to cargo\n         // as our shim and then pass it some various options used to configure\n         // how the actual compiler itself is called.\n@@ -784,8 +800,8 @@ impl<'a> Builder<'a> {\n                 \"RUSTC_DEBUG_ASSERTIONS\",\n                 self.config.rust_debug_assertions.to_string(),\n             )\n-            .env(\"RUSTC_SYSROOT\", self.sysroot(compiler))\n-            .env(\"RUSTC_LIBDIR\", self.rustc_libdir(compiler))\n+            .env(\"RUSTC_SYSROOT\", &sysroot)\n+            .env(\"RUSTC_LIBDIR\", &libdir)\n             .env(\"RUSTC_RPATH\", self.config.rust_rpath.to_string())\n             .env(\"RUSTDOC\", self.out.join(\"bootstrap/debug/rustdoc\"))\n             .env(\n@@ -809,7 +825,7 @@ impl<'a> Builder<'a> {\n             cargo.env(\"RUSTC_ERROR_FORMAT\", error_format);\n         }\n         if cmd != \"build\" && cmd != \"check\" && want_rustdoc {\n-            cargo.env(\"RUSTDOC_LIBDIR\", self.sysroot_libdir(compiler, self.config.build));\n+            cargo.env(\"RUSTDOC_LIBDIR\", &libdir);\n         }\n \n         if mode.is_tool() {"}, {"sha": "39c5c8328315a860617a46d04f93ed215dbac6fd", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ef41cf028809328d3f976d3c2eb6a7ef8d912a19/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef41cf028809328d3f976d3c2eb6a7ef8d912a19/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=ef41cf028809328d3f976d3c2eb6a7ef8d912a19", "patch": "@@ -273,5 +273,6 @@ fn codegen_backend_stamp(builder: &Builder,\n /// Cargo's output path for rustdoc in a given stage, compiled by a particular\n /// compiler for the specified target.\n pub fn rustdoc_stamp(builder: &Builder, compiler: Compiler, target: Interned<String>) -> PathBuf {\n-    builder.cargo_out(compiler, Mode::ToolRustc, target).join(\".rustdoc-check.stamp\")\n+    builder.cargo_out(compiler, Mode::ToolRustc, target)\n+        .join(\".rustdoc-check.stamp\")\n }"}, {"sha": "398730a10b96368c0df8276da813e8745ab89e9f", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef41cf028809328d3f976d3c2eb6a7ef8d912a19/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef41cf028809328d3f976d3c2eb6a7ef8d912a19/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=ef41cf028809328d3f976d3c2eb6a7ef8d912a19", "patch": "@@ -957,7 +957,7 @@ impl Step for PlainSourceTarball {\n             if !has_cargo_vendor {\n                 let mut cmd = builder.cargo(\n                     builder.compiler(0, builder.config.build),\n-                    Mode::ToolRustc,\n+                    Mode::ToolBootstrap,\n                     builder.config.build,\n                     \"install\"\n                 );"}, {"sha": "f71cb119b77fea2dcb1be6b6ac819ed2503d3f33", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ef41cf028809328d3f976d3c2eb6a7ef8d912a19/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef41cf028809328d3f976d3c2eb6a7ef8d912a19/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=ef41cf028809328d3f976d3c2eb6a7ef8d912a19", "patch": "@@ -799,14 +799,22 @@ impl Step for Rustdoc {\n         builder.ensure(tool::Rustdoc { host: compiler.host });\n \n         // Symlink compiler docs to the output directory of rustdoc documentation.\n-        let out_dir = builder.stage_out(compiler, Mode::ToolRustc).join(target).join(\"doc\");\n+        let out_dir = builder.stage_out(compiler, Mode::ToolRustc)\n+            .join(target)\n+            .join(\"doc\");\n         t!(fs::create_dir_all(&out_dir));\n         builder.clear_if_dirty(&out, &rustdoc);\n         t!(symlink_dir_force(&builder.config, &out, &out_dir));\n \n         // Build cargo command.\n         let mut cargo = prepare_tool_cargo(\n-            builder, compiler, Mode::ToolRustc, target, \"doc\", \"src/tools/rustdoc\");\n+            builder,\n+            compiler,\n+            Mode::ToolRustc,\n+            target,\n+            \"doc\",\n+            \"src/tools/rustdoc\",\n+        );\n \n         cargo.env(\"RUSTDOCFLAGS\", \"--document-private-items\");\n         builder.run(&mut cargo);"}, {"sha": "ed2482aeea0e9d29340343022ab87d211efae4fc", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ef41cf028809328d3f976d3c2eb6a7ef8d912a19/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef41cf028809328d3f976d3c2eb6a7ef8d912a19/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=ef41cf028809328d3f976d3c2eb6a7ef8d912a19", "patch": "@@ -328,16 +328,22 @@ pub enum Mode {\n     /// Build codegen libraries, placing output in the \"stageN-codegen\" directory\n     Codegen,\n \n-    /// Build some tools, placing output in the \"stageN-tools\" directory.\n-    ToolStd,\n-    ToolTest,\n+    /// Build some tools, placing output in the \"stageN-tools\" directory. The\n+    /// \"other\" here is for miscellaneous sets of tools that are built using the\n+    /// bootstrap compiler in its entirety (target libraries and all).\n+    /// Typically these tools compile with stable Rust.\n+    ToolBootstrap,\n+\n+    /// Compile a tool which uses all libraries we compile (up to rustc).\n+    /// Doesn't use the stage0 compiler libraries like \"other\", and includes\n+    /// tools like rustdoc, cargo, rls, etc.\n     ToolRustc,\n }\n \n impl Mode {\n     pub fn is_tool(&self) -> bool {\n         match self {\n-            Mode::ToolStd | Mode::ToolTest | Mode::ToolRustc => true,\n+            Mode::ToolBootstrap | Mode::ToolRustc => true,\n             _ => false\n         }\n     }\n@@ -547,7 +553,8 @@ impl Build {\n             Mode::Test => \"-test\",\n             Mode::Codegen => \"-rustc\",\n             Mode::Rustc => \"-rustc\",\n-            Mode::ToolStd | Mode::ToolTest | Mode::ToolRustc => \"-tools\",\n+            Mode::ToolBootstrap => \"-bootstrap-tools\",\n+            Mode::ToolRustc => \"-tools\",\n         };\n         self.out.join(&*compiler.host)\n                 .join(format!(\"stage{}{}\", compiler.stage, suffix))\n@@ -656,8 +663,12 @@ impl Build {\n \n     /// Returns the libdir of the snapshot compiler.\n     fn rustc_snapshot_libdir(&self) -> PathBuf {\n+        self.rustc_snapshot_sysroot().join(libdir(&self.config.build))\n+    }\n+\n+    /// Returns the sysroot of the snapshot compiler.\n+    fn rustc_snapshot_sysroot(&self) -> &Path {\n         self.initial_rustc.parent().unwrap().parent().unwrap()\n-            .join(libdir(&self.config.build))\n     }\n \n     /// Runs a command, printing out nice contextual information if it fails."}, {"sha": "6254f98165665630550f7c68dbf88be360cb6dab", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ef41cf028809328d3f976d3c2eb6a7ef8d912a19/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef41cf028809328d3f976d3c2eb6a7ef8d912a19/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=ef41cf028809328d3f976d3c2eb6a7ef8d912a19", "patch": "@@ -1806,7 +1806,10 @@ impl Step for RemoteCopyLibs {\n         builder.info(&format!(\"REMOTE copy libs to emulator ({})\", target));\n         t!(fs::create_dir_all(builder.out.join(\"tmp\")));\n \n-        let server = builder.ensure(tool::RemoteTestServer { compiler, target });\n+        let server = builder.ensure(tool::RemoteTestServer {\n+            compiler: compiler.with_stage(0),\n+            target,\n+        });\n \n         // Spawn the emulator and wait for it to come online\n         let tool = builder.tool_exe(Tool::RemoteTestClient);"}, {"sha": "e98e3745fdaa88dab5d575dc0623446f08167769", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ef41cf028809328d3f976d3c2eb6a7ef8d912a19/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef41cf028809328d3f976d3c2eb6a7ef8d912a19/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=ef41cf028809328d3f976d3c2eb6a7ef8d912a19", "patch": "@@ -104,9 +104,10 @@ impl Step for ToolBuild {\n         let is_ext_tool = self.is_ext_tool;\n \n         match self.mode {\n-            Mode::ToolStd => builder.ensure(compile::Std { compiler, target }),\n-            Mode::ToolTest => builder.ensure(compile::Test { compiler, target }),\n-            Mode::ToolRustc => builder.ensure(compile::Rustc { compiler, target }),\n+            Mode::ToolRustc => {\n+                builder.ensure(compile::Rustc { compiler, target })\n+            }\n+            Mode::ToolBootstrap => {} // uses downloaded stage0 compiler libs\n             _ => panic!(\"unexpected Mode for tool build\")\n         }\n \n@@ -341,17 +342,17 @@ macro_rules! tool {\n }\n \n tool!(\n-    Rustbook, \"src/tools/rustbook\", \"rustbook\", Mode::ToolRustc;\n+    Rustbook, \"src/tools/rustbook\", \"rustbook\", Mode::ToolBootstrap;\n     ErrorIndex, \"src/tools/error_index_generator\", \"error_index_generator\", Mode::ToolRustc;\n-    UnstableBookGen, \"src/tools/unstable-book-gen\", \"unstable-book-gen\", Mode::ToolStd;\n-    Tidy, \"src/tools/tidy\", \"tidy\", Mode::ToolStd;\n-    Linkchecker, \"src/tools/linkchecker\", \"linkchecker\", Mode::ToolStd;\n-    CargoTest, \"src/tools/cargotest\", \"cargotest\", Mode::ToolStd;\n-    Compiletest, \"src/tools/compiletest\", \"compiletest\", Mode::ToolTest, llvm_tools = true;\n-    BuildManifest, \"src/tools/build-manifest\", \"build-manifest\", Mode::ToolStd;\n-    RemoteTestClient, \"src/tools/remote-test-client\", \"remote-test-client\", Mode::ToolStd;\n-    RustInstaller, \"src/tools/rust-installer\", \"fabricate\", Mode::ToolStd;\n-    RustdocTheme, \"src/tools/rustdoc-themes\", \"rustdoc-themes\", Mode::ToolStd;\n+    UnstableBookGen, \"src/tools/unstable-book-gen\", \"unstable-book-gen\", Mode::ToolBootstrap;\n+    Tidy, \"src/tools/tidy\", \"tidy\", Mode::ToolBootstrap;\n+    Linkchecker, \"src/tools/linkchecker\", \"linkchecker\", Mode::ToolBootstrap;\n+    CargoTest, \"src/tools/cargotest\", \"cargotest\", Mode::ToolBootstrap;\n+    Compiletest, \"src/tools/compiletest\", \"compiletest\", Mode::ToolBootstrap, llvm_tools = true;\n+    BuildManifest, \"src/tools/build-manifest\", \"build-manifest\", Mode::ToolBootstrap;\n+    RemoteTestClient, \"src/tools/remote-test-client\", \"remote-test-client\", Mode::ToolBootstrap;\n+    RustInstaller, \"src/tools/rust-installer\", \"fabricate\", Mode::ToolBootstrap;\n+    RustdocTheme, \"src/tools/rustdoc-themes\", \"rustdoc-themes\", Mode::ToolBootstrap;\n );\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n@@ -379,7 +380,7 @@ impl Step for RemoteTestServer {\n             compiler: self.compiler,\n             target: self.target,\n             tool: \"remote-test-server\",\n-            mode: Mode::ToolStd,\n+            mode: Mode::ToolBootstrap,\n             path: \"src/tools/remote-test-server\",\n             is_ext_tool: false,\n             extra_features: Vec::new(),\n@@ -604,7 +605,11 @@ impl<'a> Builder<'a> {\n     fn prepare_tool_cmd(&self, compiler: Compiler, tool: Tool, cmd: &mut Command) {\n         let host = &compiler.host;\n         let mut lib_paths: Vec<PathBuf> = vec![\n-            PathBuf::from(&self.sysroot_libdir(compiler, compiler.host)),\n+            if compiler.stage == 0 {\n+                self.build.rustc_snapshot_libdir()\n+            } else {\n+                PathBuf::from(&self.sysroot_libdir(compiler, compiler.host))\n+            },\n             self.cargo_out(compiler, tool.get_mode(), *host).join(\"deps\"),\n         ];\n "}]}