{"sha": "ec7f1d5248fe1cee904a6d8af094167ded779781", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjN2YxZDUyNDhmZTFjZWU5MDRhNmQ4YWYwOTQxNjdkZWQ3Nzk3ODE=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-06-02T04:53:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-06-02T04:53:52Z"}, "message": "Fix typo", "tree": {"sha": "5bd91ae2fb5528d029170aec3dd7227ee999a843", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bd91ae2fb5528d029170aec3dd7227ee999a843"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec7f1d5248fe1cee904a6d8af094167ded779781", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec7f1d5248fe1cee904a6d8af094167ded779781", "html_url": "https://github.com/rust-lang/rust/commit/ec7f1d5248fe1cee904a6d8af094167ded779781", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec7f1d5248fe1cee904a6d8af094167ded779781/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd7735b722cc5de7c217012818de355f427d0bb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd7735b722cc5de7c217012818de355f427d0bb5", "html_url": "https://github.com/rust-lang/rust/commit/dd7735b722cc5de7c217012818de355f427d0bb5"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "24a1df51f4361fd3d836cd31d6db2c398bdbc20c", "filename": "src/step.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f1d5248fe1cee904a6d8af094167ded779781/src%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f1d5248fe1cee904a6d8af094167ded779781/src%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstep.rs?ref=ec7f1d5248fe1cee904a6d8af094167ded779781", "patch": "@@ -130,7 +130,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             StorageLive(ref lvalue) | StorageDead(ref lvalue)=> {\n                 let (frame, local) = match self.eval_lvalue(lvalue)? {\n                     Lvalue::Local{ frame, local, field: None } if self.stack.len() == frame+1 => (frame, local),\n-                    _ => return Err(EvalError::Unimplemented(\"Stroage annotations must refer to locals of the topmost stack frame.\".to_owned())) // FIXME maybe this should get its own error type\n+                    _ => return Err(EvalError::Unimplemented(\"Storage annotations must refer to locals of the topmost stack frame.\".to_owned())) // FIXME maybe this should get its own error type\n                 };\n                 let old_val = match stmt.kind {\n                     StorageLive(_) => self.stack[frame].storage_live(local)?,"}]}