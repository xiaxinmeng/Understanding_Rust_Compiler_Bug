{"sha": "af791bb8f4a9b93c701aa11fd05759d96898cee2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmNzkxYmI4ZjRhOWI5M2M3MDFhYTExZmQwNTc1OWQ5Njg5OGNlZTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-05T16:36:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-05T16:36:18Z"}, "message": "Auto merge of #55451 - estebank:arg-doc, r=pnkfelix\n\nCustom diagnostic when trying to doc comment argument\n\nWhen writing\n\n```\npub fn f(\n    /// Comment\n    id: u8,\n) {}\n```\n\nProduce a targeted diagnostic\n\n```\nerror: documentation comments cannot be applied to method arguments\n  --> $DIR/fn-arg-doc-comment.rs:2:5\n   |\nLL |     /// Comment\n   |     ^^^^^^^^^^^ doc comments are not allowed here\n```\n\nFix #54801.", "tree": {"sha": "bb9b4f0ef0637ecb7396dc037cd5ae54d25be5dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb9b4f0ef0637ecb7396dc037cd5ae54d25be5dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af791bb8f4a9b93c701aa11fd05759d96898cee2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af791bb8f4a9b93c701aa11fd05759d96898cee2", "html_url": "https://github.com/rust-lang/rust/commit/af791bb8f4a9b93c701aa11fd05759d96898cee2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af791bb8f4a9b93c701aa11fd05759d96898cee2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6cfc6033955dd2685dfa7baeec6f6bc3bfdfe2f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cfc6033955dd2685dfa7baeec6f6bc3bfdfe2f1", "html_url": "https://github.com/rust-lang/rust/commit/6cfc6033955dd2685dfa7baeec6f6bc3bfdfe2f1"}, {"sha": "adb96ec64b8d5e8cff191315668a5bfe0480909c", "url": "https://api.github.com/repos/rust-lang/rust/commits/adb96ec64b8d5e8cff191315668a5bfe0480909c", "html_url": "https://github.com/rust-lang/rust/commit/adb96ec64b8d5e8cff191315668a5bfe0480909c"}], "stats": {"total": 220, "additions": 187, "deletions": 33}, "files": [{"sha": "cc8af70a050c9d127588da4155d32ea2b1550c21", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af791bb8f4a9b93c701aa11fd05759d96898cee2/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af791bb8f4a9b93c701aa11fd05759d96898cee2/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=af791bb8f4a9b93c701aa11fd05759d96898cee2", "patch": "@@ -1032,7 +1032,7 @@ impl<'a> Parser<'a> {\n                 }\n             },\n             AstFragmentKind::Ty => AstFragment::Ty(self.parse_ty()?),\n-            AstFragmentKind::Pat => AstFragment::Pat(self.parse_pat()?),\n+            AstFragmentKind::Pat => AstFragment::Pat(self.parse_pat(None)?),\n         })\n     }\n "}, {"sha": "37800a334c6daf7ca4d54efe97e76ef9fb902426", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af791bb8f4a9b93c701aa11fd05759d96898cee2/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af791bb8f4a9b93c701aa11fd05759d96898cee2/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=af791bb8f4a9b93c701aa11fd05759d96898cee2", "patch": "@@ -419,7 +419,7 @@ pub fn parse_item_panic(parser: &mut Parser) -> Option<P<Item>> {\n }\n \n pub fn parse_pat_panic(parser: &mut Parser) -> P<Pat> {\n-    panictry!(parser.parse_pat())\n+    panictry!(parser.parse_pat(None))\n }\n \n pub fn parse_arm_panic(parser: &mut Parser) -> Arm {"}, {"sha": "06c1d58070e21fe3524dcc9463e51cbb2e3c7d2a", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af791bb8f4a9b93c701aa11fd05759d96898cee2/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af791bb8f4a9b93c701aa11fd05759d96898cee2/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=af791bb8f4a9b93c701aa11fd05759d96898cee2", "patch": "@@ -888,7 +888,7 @@ fn parse_nt<'a>(p: &mut Parser<'a>, sp: Span, name: &str) -> Nonterminal {\n                 FatalError.raise();\n             }\n         },\n-        \"pat\" => token::NtPat(panictry!(p.parse_pat())),\n+        \"pat\" => token::NtPat(panictry!(p.parse_pat(None))),\n         \"expr\" => token::NtExpr(panictry!(p.parse_expr())),\n         \"literal\" => token::NtLiteral(panictry!(p.parse_literal_maybe_minus())),\n         \"ty\" => token::NtTy(panictry!(p.parse_ty())),"}, {"sha": "7e29eaae4e856ea67671694658fad910063d5366", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 61, "deletions": 16, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/af791bb8f4a9b93c701aa11fd05759d96898cee2/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af791bb8f4a9b93c701aa11fd05759d96898cee2/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=af791bb8f4a9b93c701aa11fd05759d96898cee2", "patch": "@@ -1790,6 +1790,35 @@ impl<'a> Parser<'a> {\n         self.look_ahead(offset + 1, |t| t == &token::Colon)\n     }\n \n+    /// Skip unexpected attributes and doc comments in this position and emit an appropriate error.\n+    fn eat_incorrect_doc_comment(&mut self, applied_to: &str) {\n+        if let token::DocComment(_) = self.token {\n+            let mut err = self.diagnostic().struct_span_err(\n+                self.span,\n+                &format!(\"documentation comments cannot be applied to {}\", applied_to),\n+            );\n+            err.span_label(self.span, \"doc comments are not allowed here\");\n+            err.emit();\n+            self.bump();\n+        } else if self.token == token::Pound && self.look_ahead(1, |t| {\n+            *t == token::OpenDelim(token::Bracket)\n+        }) {\n+            let lo = self.span;\n+            // Skip every token until next possible arg.\n+            while self.token != token::CloseDelim(token::Bracket) {\n+                self.bump();\n+            }\n+            let sp = lo.to(self.span);\n+            self.bump();\n+            let mut err = self.diagnostic().struct_span_err(\n+                sp,\n+                &format!(\"attributes cannot be applied to {}\", applied_to),\n+            );\n+            err.span_label(sp, \"attributes are not allowed here\");\n+            err.emit();\n+        }\n+    }\n+\n     /// This version of parse arg doesn't necessarily require\n     /// identifier names.\n     fn parse_arg_general(&mut self, require_name: bool) -> PResult<'a, Arg> {\n@@ -1798,7 +1827,8 @@ impl<'a> Parser<'a> {\n         let (pat, ty) = if require_name || self.is_named_argument() {\n             debug!(\"parse_arg_general parse_pat (require_name:{})\",\n                    require_name);\n-            let pat = self.parse_pat()?;\n+            self.eat_incorrect_doc_comment(\"method arguments\");\n+            let pat = self.parse_pat(Some(\"argument name\"))?;\n \n             if let Err(mut err) = self.expect(&token::Colon) {\n                 // If we find a pattern followed by an identifier, it could be an (incorrect)\n@@ -1820,10 +1850,12 @@ impl<'a> Parser<'a> {\n                 return Err(err);\n             }\n \n+            self.eat_incorrect_doc_comment(\"a method argument's type\");\n             (pat, self.parse_ty()?)\n         } else {\n             debug!(\"parse_arg_general ident_to_pat\");\n             let parser_snapshot_before_ty = self.clone();\n+            self.eat_incorrect_doc_comment(\"a method argument's type\");\n             let mut ty = self.parse_ty();\n             if ty.is_ok() && self.token == token::Colon {\n                 // This wasn't actually a type, but a pattern looking like a type,\n@@ -1845,7 +1877,7 @@ impl<'a> Parser<'a> {\n                     // Recover from attempting to parse the argument as a type without pattern.\n                     err.cancel();\n                     mem::replace(self, parser_snapshot_before_ty);\n-                    let pat = self.parse_pat()?;\n+                    let pat = self.parse_pat(Some(\"argument name\"))?;\n                     self.expect(&token::Colon)?;\n                     let ty = self.parse_ty()?;\n \n@@ -1883,7 +1915,7 @@ impl<'a> Parser<'a> {\n \n     /// Parse an argument in a lambda header e.g. |arg, arg|\n     fn parse_fn_block_arg(&mut self) -> PResult<'a, Arg> {\n-        let pat = self.parse_pat()?;\n+        let pat = self.parse_pat(Some(\"argument name\"))?;\n         let t = if self.eat(&token::Colon) {\n             self.parse_ty()?\n         } else {\n@@ -2440,7 +2472,11 @@ impl<'a> Parser<'a> {\n                     return Ok(self.mk_expr(lo.to(hi), ex, attrs));\n                 }\n                 if self.eat_keyword(keywords::Match) {\n-                    return self.parse_match_expr(attrs);\n+                    let match_sp = self.prev_span;\n+                    return self.parse_match_expr(attrs).map_err(|mut err| {\n+                        err.span_label(match_sp, \"while parsing this match expression\");\n+                        err\n+                    });\n                 }\n                 if self.eat_keyword(keywords::Unsafe) {\n                     return self.parse_block_expr(\n@@ -3746,7 +3782,7 @@ impl<'a> Parser<'a> {\n                                   \"`..` can only be used once per tuple or tuple struct pattern\");\n                 }\n             } else if !self.check(&token::CloseDelim(token::Paren)) {\n-                fields.push(self.parse_pat()?);\n+                fields.push(self.parse_pat(None)?);\n             } else {\n                 break\n             }\n@@ -3802,7 +3838,7 @@ impl<'a> Parser<'a> {\n                 }\n             }\n \n-            let subpat = self.parse_pat()?;\n+            let subpat = self.parse_pat(None)?;\n             if before_slice && self.eat(&token::DotDot) {\n                 slice = Some(subpat);\n                 before_slice = false;\n@@ -3827,7 +3863,7 @@ impl<'a> Parser<'a> {\n             // Parsing a pattern of the form \"fieldname: pat\"\n             let fieldname = self.parse_field_name()?;\n             self.bump();\n-            let pat = self.parse_pat()?;\n+            let pat = self.parse_pat(None)?;\n             hi = pat.span;\n             (pat, fieldname, false)\n         } else {\n@@ -4029,7 +4065,7 @@ impl<'a> Parser<'a> {\n     /// \"top-level\" patterns in a match arm, `for` loop, `let`, &c. (in contrast\n     /// to subpatterns within such).\n     fn parse_top_level_pat(&mut self) -> PResult<'a, P<Pat>> {\n-        let pat = self.parse_pat()?;\n+        let pat = self.parse_pat(None)?;\n         if self.token == token::Comma {\n             // An unexpected comma after a top-level pattern is a clue that the\n             // user (perhaps more accustomed to some other language) forgot the\n@@ -4061,13 +4097,17 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parse a pattern.\n-    pub fn parse_pat(&mut self) -> PResult<'a, P<Pat>> {\n-        self.parse_pat_with_range_pat(true)\n+    pub fn parse_pat(&mut self, expected: Option<&'static str>) -> PResult<'a, P<Pat>> {\n+        self.parse_pat_with_range_pat(true, expected)\n     }\n \n     /// Parse a pattern, with a setting whether modern range patterns e.g. `a..=b`, `a..b` are\n     /// allowed.\n-    fn parse_pat_with_range_pat(&mut self, allow_range_pat: bool) -> PResult<'a, P<Pat>> {\n+    fn parse_pat_with_range_pat(\n+        &mut self,\n+        allow_range_pat: bool,\n+        expected: Option<&'static str>,\n+    ) -> PResult<'a, P<Pat>> {\n         maybe_whole!(self, NtPat, |x| x);\n \n         let lo = self.span;\n@@ -4083,7 +4123,7 @@ impl<'a> Parser<'a> {\n                     err.span_label(self.span, \"unexpected lifetime\");\n                     return Err(err);\n                 }\n-                let subpat = self.parse_pat_with_range_pat(false)?;\n+                let subpat = self.parse_pat_with_range_pat(false, expected)?;\n                 pat = PatKind::Ref(subpat, mutbl);\n             }\n             token::OpenDelim(token::Paren) => {\n@@ -4129,7 +4169,7 @@ impl<'a> Parser<'a> {\n                 pat = self.parse_pat_ident(BindingMode::ByRef(mutbl))?;\n             } else if self.eat_keyword(keywords::Box) {\n                 // Parse box pat\n-                let subpat = self.parse_pat_with_range_pat(false)?;\n+                let subpat = self.parse_pat_with_range_pat(false, None)?;\n                 pat = PatKind::Box(subpat);\n             } else if self.token.is_ident() && !self.token.is_reserved_ident() &&\n                       self.parse_as_ident() {\n@@ -4229,9 +4269,14 @@ impl<'a> Parser<'a> {\n                     }\n                     Err(mut err) => {\n                         self.cancel(&mut err);\n-                        let msg = format!(\"expected pattern, found {}\", self.this_token_descr());\n+                        let expected = expected.unwrap_or(\"pattern\");\n+                        let msg = format!(\n+                            \"expected {}, found {}\",\n+                            expected,\n+                            self.this_token_descr(),\n+                        );\n                         let mut err = self.fatal(&msg);\n-                        err.span_label(self.span, \"expected pattern\");\n+                        err.span_label(self.span, format!(\"expected {}\", expected));\n                         return Err(err);\n                     }\n                 }\n@@ -4275,7 +4320,7 @@ impl<'a> Parser<'a> {\n                        -> PResult<'a, PatKind> {\n         let ident = self.parse_ident()?;\n         let sub = if self.eat(&token::At) {\n-            Some(self.parse_pat()?)\n+            Some(self.parse_pat(Some(\"binding pattern\"))?)\n         } else {\n             None\n         };"}, {"sha": "98e9272e6d8e50c06816aff3301c8d1fdb6ffc41", "filename": "src/libsyntax/util/parser_testing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af791bb8f4a9b93c701aa11fd05759d96898cee2/src%2Flibsyntax%2Futil%2Fparser_testing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af791bb8f4a9b93c701aa11fd05759d96898cee2/src%2Flibsyntax%2Futil%2Fparser_testing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fparser_testing.rs?ref=af791bb8f4a9b93c701aa11fd05759d96898cee2", "patch": "@@ -68,7 +68,7 @@ pub fn string_to_item (source_str : String) -> Option<P<ast::Item>> {\n pub fn string_to_pat(source_str: String) -> P<ast::Pat> {\n     let ps = ParseSess::new(FilePathMapping::empty());\n     with_error_checking_parse(source_str, &ps, |p| {\n-        p.parse_pat()\n+        p.parse_pat(None)\n     })\n }\n "}, {"sha": "02fa541d6a4d6ffb487778be59e4cac63357b0b5", "filename": "src/test/ui/label/label_break_value_illegal_uses.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af791bb8f4a9b93c701aa11fd05759d96898cee2/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_illegal_uses.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af791bb8f4a9b93c701aa11fd05759d96898cee2/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_illegal_uses.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_illegal_uses.stderr?ref=af791bb8f4a9b93c701aa11fd05759d96898cee2", "patch": "@@ -27,7 +27,9 @@ error: expected one of `.`, `?`, `{`, or an operator, found `'b`\n   --> $DIR/label_break_value_illegal_uses.rs:28:17\n    |\n LL |     match false 'b: {} //~ ERROR expected one of `.`, `?`, `{`, or an operator\n-   |                 ^^ expected one of `.`, `?`, `{`, or an operator here\n+   |     -----       ^^ expected one of `.`, `?`, `{`, or an operator here\n+   |     |\n+   |     while parsing this match expression\n \n error: aborting due to 4 previous errors\n "}, {"sha": "22af94b62845233eb6e3ec3690c2132272eff194", "filename": "src/test/ui/parser/fn-arg-doc-comment.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/af791bb8f4a9b93c701aa11fd05759d96898cee2/src%2Ftest%2Fui%2Fparser%2Ffn-arg-doc-comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af791bb8f4a9b93c701aa11fd05759d96898cee2/src%2Ftest%2Fui%2Fparser%2Ffn-arg-doc-comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-arg-doc-comment.rs?ref=af791bb8f4a9b93c701aa11fd05759d96898cee2", "patch": "@@ -0,0 +1,37 @@\n+pub fn f(\n+    /// Comment\n+    //~^ ERROR documentation comments cannot be applied to method arguments\n+    //~| NOTE doc comments are not allowed here\n+    id: u8,\n+    /// Other\n+    //~^ ERROR documentation comments cannot be applied to method arguments\n+    //~| NOTE doc comments are not allowed here\n+    a: u8,\n+) {}\n+\n+fn foo(#[allow(dead_code)] id: i32) {}\n+//~^ ERROR attributes cannot be applied to method arguments\n+//~| NOTE attributes are not allowed here\n+\n+fn bar(id: #[allow(dead_code)] i32) {}\n+//~^ ERROR attributes cannot be applied to a method argument's type\n+//~| NOTE attributes are not allowed here\n+\n+fn main() {\n+    // verify that the parser recovered and properly typechecked the args\n+    f(\"\", \"\");\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected u8, found reference\n+    //~| NOTE expected\n+    //~| ERROR mismatched types\n+    //~| NOTE expected u8, found reference\n+    //~| NOTE expected\n+    foo(\"\");\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected i32, found reference\n+    //~| NOTE expected\n+    bar(\"\");\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected i32, found reference\n+    //~| NOTE expected\n+}"}, {"sha": "73a24eebb3f12cc76e38b4cef83651c2d1378ce8", "filename": "src/test/ui/parser/fn-arg-doc-comment.stderr", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/af791bb8f4a9b93c701aa11fd05759d96898cee2/src%2Ftest%2Fui%2Fparser%2Ffn-arg-doc-comment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af791bb8f4a9b93c701aa11fd05759d96898cee2/src%2Ftest%2Fui%2Fparser%2Ffn-arg-doc-comment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-arg-doc-comment.stderr?ref=af791bb8f4a9b93c701aa11fd05759d96898cee2", "patch": "@@ -0,0 +1,63 @@\n+error: documentation comments cannot be applied to method arguments\n+  --> $DIR/fn-arg-doc-comment.rs:2:5\n+   |\n+LL |     /// Comment\n+   |     ^^^^^^^^^^^ doc comments are not allowed here\n+\n+error: documentation comments cannot be applied to method arguments\n+  --> $DIR/fn-arg-doc-comment.rs:6:5\n+   |\n+LL |     /// Other\n+   |     ^^^^^^^^^ doc comments are not allowed here\n+\n+error: attributes cannot be applied to method arguments\n+  --> $DIR/fn-arg-doc-comment.rs:12:8\n+   |\n+LL | fn foo(#[allow(dead_code)] id: i32) {}\n+   |        ^^^^^^^^^^^^^^^^^^^ attributes are not allowed here\n+\n+error: attributes cannot be applied to a method argument's type\n+  --> $DIR/fn-arg-doc-comment.rs:16:12\n+   |\n+LL | fn bar(id: #[allow(dead_code)] i32) {}\n+   |            ^^^^^^^^^^^^^^^^^^^ attributes are not allowed here\n+\n+error[E0308]: mismatched types\n+  --> $DIR/fn-arg-doc-comment.rs:22:7\n+   |\n+LL |     f(\"\", \"\");\n+   |       ^^ expected u8, found reference\n+   |\n+   = note: expected type `u8`\n+              found type `&'static str`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/fn-arg-doc-comment.rs:22:11\n+   |\n+LL |     f(\"\", \"\");\n+   |           ^^ expected u8, found reference\n+   |\n+   = note: expected type `u8`\n+              found type `&'static str`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/fn-arg-doc-comment.rs:29:9\n+   |\n+LL |     foo(\"\");\n+   |         ^^ expected i32, found reference\n+   |\n+   = note: expected type `i32`\n+              found type `&'static str`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/fn-arg-doc-comment.rs:33:9\n+   |\n+LL |     bar(\"\");\n+   |         ^^ expected i32, found reference\n+   |\n+   = note: expected type `i32`\n+              found type `&'static str`\n+\n+error: aborting due to 8 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "7c3b84a5185d3323912cf1a7073196eaef079e2b", "filename": "src/test/ui/parser/issue-33413.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/af791bb8f4a9b93c701aa11fd05759d96898cee2/src%2Ftest%2Fui%2Fparser%2Fissue-33413.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af791bb8f4a9b93c701aa11fd05759d96898cee2/src%2Ftest%2Fui%2Fparser%2Fissue-33413.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-33413.rs?ref=af791bb8f4a9b93c701aa11fd05759d96898cee2", "patch": "@@ -11,5 +11,6 @@\n // compile-flags: -Z parse-only\n \n impl S {\n-    fn f(*, a: u8) -> u8 {} //~ ERROR expected pattern, found `*`\n+    fn f(*, a: u8) -> u8 {}\n+    //~^ ERROR expected argument name, found `*`\n }"}, {"sha": "e0d69e596f24e62b3bb0d7774673ca0f81974874", "filename": "src/test/ui/parser/issue-33413.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/af791bb8f4a9b93c701aa11fd05759d96898cee2/src%2Ftest%2Fui%2Fparser%2Fissue-33413.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af791bb8f4a9b93c701aa11fd05759d96898cee2/src%2Ftest%2Fui%2Fparser%2Fissue-33413.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-33413.stderr?ref=af791bb8f4a9b93c701aa11fd05759d96898cee2", "patch": "@@ -1,8 +1,8 @@\n-error: expected pattern, found `*`\n+error: expected argument name, found `*`\n   --> $DIR/issue-33413.rs:14:10\n    |\n-LL |     fn f(*, a: u8) -> u8 {} //~ ERROR expected pattern, found `*`\n-   |          ^ expected pattern\n+LL |     fn f(*, a: u8) -> u8 {}\n+   |          ^ expected argument name\n \n error: aborting due to previous error\n "}, {"sha": "014dba3d4d0e743cc73385ddd5972fc035af863d", "filename": "src/test/ui/parser/match-refactor-to-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af791bb8f4a9b93c701aa11fd05759d96898cee2/src%2Ftest%2Fui%2Fparser%2Fmatch-refactor-to-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af791bb8f4a9b93c701aa11fd05759d96898cee2/src%2Ftest%2Fui%2Fparser%2Fmatch-refactor-to-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmatch-refactor-to-expr.rs?ref=af791bb8f4a9b93c701aa11fd05759d96898cee2", "patch": "@@ -12,7 +12,7 @@\n \n fn main() {\n     let foo =\n-        match\n+        match //~ NOTE while parsing this match expression\n         Some(4).unwrap_or_else(5)\n         //~^ NOTE expected one of `.`, `?`, `{`, or an operator here\n         ; //~ NOTE unexpected token"}, {"sha": "2ffbddd570ff6e95b9752d319a066393968f319b", "filename": "src/test/ui/parser/match-refactor-to-expr.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/af791bb8f4a9b93c701aa11fd05759d96898cee2/src%2Ftest%2Fui%2Fparser%2Fmatch-refactor-to-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af791bb8f4a9b93c701aa11fd05759d96898cee2/src%2Ftest%2Fui%2Fparser%2Fmatch-refactor-to-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmatch-refactor-to-expr.stderr?ref=af791bb8f4a9b93c701aa11fd05759d96898cee2", "patch": "@@ -1,8 +1,11 @@\n error: expected one of `.`, `?`, `{`, or an operator, found `;`\n   --> $DIR/match-refactor-to-expr.rs:18:9\n    |\n-LL |         match\n-   |         ----- help: try removing this `match`\n+LL |         match //~ NOTE while parsing this match expression\n+   |         -----\n+   |         |\n+   |         while parsing this match expression\n+   |         help: try removing this `match`\n LL |         Some(4).unwrap_or_else(5)\n    |                                  - expected one of `.`, `?`, `{`, or an operator here\n LL |         //~^ NOTE expected one of `.`, `?`, `{`, or an operator here"}, {"sha": "c2f87d8afce0e948a15e6e37bf0f24e34c0c1a85", "filename": "src/test/ui/parser/removed-syntax-mode.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/af791bb8f4a9b93c701aa11fd05759d96898cee2/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af791bb8f4a9b93c701aa11fd05759d96898cee2/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-mode.rs?ref=af791bb8f4a9b93c701aa11fd05759d96898cee2", "patch": "@@ -10,4 +10,5 @@\n \n // compile-flags: -Z parse-only\n \n-fn f(+x: isize) {} //~ ERROR expected pattern, found `+`\n+fn f(+x: isize) {}\n+//~^ ERROR expected argument name, found `+`"}, {"sha": "7ad88471d5a9a13b8ad167302fb899135601a38e", "filename": "src/test/ui/parser/removed-syntax-mode.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/af791bb8f4a9b93c701aa11fd05759d96898cee2/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-mode.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af791bb8f4a9b93c701aa11fd05759d96898cee2/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-mode.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-mode.stderr?ref=af791bb8f4a9b93c701aa11fd05759d96898cee2", "patch": "@@ -1,8 +1,8 @@\n-error: expected pattern, found `+`\n+error: expected argument name, found `+`\n   --> $DIR/removed-syntax-mode.rs:13:6\n    |\n-LL | fn f(+x: isize) {} //~ ERROR expected pattern, found `+`\n-   |      ^ expected pattern\n+LL | fn f(+x: isize) {}\n+   |      ^ expected argument name\n \n error: aborting due to previous error\n "}, {"sha": "c9b43000877cfbd63580b23bafc5d654fe69922f", "filename": "src/test/ui/try-block/try-block-in-match.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af791bb8f4a9b93c701aa11fd05759d96898cee2/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af791bb8f4a9b93c701aa11fd05759d96898cee2/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-match.stderr?ref=af791bb8f4a9b93c701aa11fd05759d96898cee2", "patch": "@@ -2,7 +2,9 @@ error: expected expression, found reserved keyword `try`\n   --> $DIR/try-block-in-match.rs:16:11\n    |\n LL |     match try { false } { _ => {} } //~ ERROR expected expression, found reserved keyword `try`\n-   |           ^^^ expected expression\n+   |     ----- ^^^ expected expression\n+   |     |\n+   |     while parsing this match expression\n \n error: aborting due to previous error\n "}]}