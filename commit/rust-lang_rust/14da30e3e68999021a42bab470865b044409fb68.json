{"sha": "14da30e3e68999021a42bab470865b044409fb68", "node_id": "C_kwDOAAsO6NoAKDE0ZGEzMGUzZTY4OTk5MDIxYTQyYmFiNDcwODY1YjA0NDQwOWZiNjg", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-05-16T14:23:52Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-05-16T14:23:52Z"}, "message": "Split some logic from a loop into a separate function", "tree": {"sha": "ba7ae21ecd0531e26d166aa2149f7169c003d2d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba7ae21ecd0531e26d166aa2149f7169c003d2d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14da30e3e68999021a42bab470865b044409fb68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14da30e3e68999021a42bab470865b044409fb68", "html_url": "https://github.com/rust-lang/rust/commit/14da30e3e68999021a42bab470865b044409fb68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14da30e3e68999021a42bab470865b044409fb68/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "340e708634e7cc560c04e27b91297ff04f897683", "url": "https://api.github.com/repos/rust-lang/rust/commits/340e708634e7cc560c04e27b91297ff04f897683", "html_url": "https://github.com/rust-lang/rust/commit/340e708634e7cc560c04e27b91297ff04f897683"}], "stats": {"total": 43, "additions": 26, "deletions": 17}, "files": [{"sha": "ec468f428528e5bc917d1674883c4f7d420cc3aa", "filename": "compiler/rustc_infer/src/infer/canonical/query_response.rs", "status": "modified", "additions": 26, "deletions": 17, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/14da30e3e68999021a42bab470865b044409fb68/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14da30e3e68999021a42bab470865b044409fb68/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=14da30e3e68999021a42bab470865b044409fb68", "patch": "@@ -547,25 +547,34 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n     ) -> impl Iterator<Item = PredicateObligation<'tcx>> + 'a + Captures<'tcx> {\n         unsubstituted_region_constraints.iter().map(move |&constraint| {\n             let predicate = substitute_value(self.tcx, result_subst, constraint);\n-            let ty::OutlivesPredicate(k1, r2) = predicate.skip_binder();\n+            self.query_outlives_constraint_to_obligation(predicate, cause.clone(), param_env)\n+        })\n+    }\n \n-            let atom = match k1.unpack() {\n-                GenericArgKind::Lifetime(r1) => {\n-                    ty::PredicateKind::RegionOutlives(ty::OutlivesPredicate(r1, r2))\n-                }\n-                GenericArgKind::Type(t1) => {\n-                    ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(t1, r2))\n-                }\n-                GenericArgKind::Const(..) => {\n-                    // Consts cannot outlive one another, so we don't expect to\n-                    // encounter this branch.\n-                    span_bug!(cause.span, \"unexpected const outlives {:?}\", constraint);\n-                }\n-            };\n-            let predicate = predicate.rebind(atom).to_predicate(self.tcx);\n+    pub fn query_outlives_constraint_to_obligation(\n+        &self,\n+        predicate: QueryOutlivesConstraint<'tcx>,\n+        cause: ObligationCause<'tcx>,\n+        param_env: ty::ParamEnv<'tcx>,\n+    ) -> Obligation<'tcx, ty::Predicate<'tcx>> {\n+        let ty::OutlivesPredicate(k1, r2) = predicate.skip_binder();\n \n-            Obligation::new(cause.clone(), param_env, predicate)\n-        })\n+        let atom = match k1.unpack() {\n+            GenericArgKind::Lifetime(r1) => {\n+                ty::PredicateKind::RegionOutlives(ty::OutlivesPredicate(r1, r2))\n+            }\n+            GenericArgKind::Type(t1) => {\n+                ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(t1, r2))\n+            }\n+            GenericArgKind::Const(..) => {\n+                // Consts cannot outlive one another, so we don't expect to\n+                // encounter this branch.\n+                span_bug!(cause.span, \"unexpected const outlives {:?}\", predicate);\n+            }\n+        };\n+        let predicate = predicate.rebind(atom).to_predicate(self.tcx);\n+\n+        Obligation::new(cause, param_env, predicate)\n     }\n \n     /// Given two sets of values for the same set of canonical variables, unify them."}]}