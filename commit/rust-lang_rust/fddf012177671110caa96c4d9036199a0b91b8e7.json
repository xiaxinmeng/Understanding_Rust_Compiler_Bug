{"sha": "fddf012177671110caa96c4d9036199a0b91b8e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkZGYwMTIxNzc2NzExMTBjYWE5NmM0ZDkwMzYxOTlhMGI5MWI4ZTc=", "commit": {"author": {"name": "Lionel Foxcroft", "email": "lionelf329@gmail.com", "date": "2021-06-04T05:27:19Z"}, "committer": {"name": "Lionel Foxcroft", "email": "lionelf329@gmail.com", "date": "2021-06-07T20:50:08Z"}, "message": "Clarify documentation of slice sorting methods", "tree": {"sha": "aeeb11f1851ab792a4ef521268ef0b21deb28c03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aeeb11f1851ab792a4ef521268ef0b21deb28c03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fddf012177671110caa96c4d9036199a0b91b8e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fddf012177671110caa96c4d9036199a0b91b8e7", "html_url": "https://github.com/rust-lang/rust/commit/fddf012177671110caa96c4d9036199a0b91b8e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fddf012177671110caa96c4d9036199a0b91b8e7/comments", "author": {"login": "Lionelf329", "id": 33435217, "node_id": "MDQ6VXNlcjMzNDM1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/33435217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lionelf329", "html_url": "https://github.com/Lionelf329", "followers_url": "https://api.github.com/users/Lionelf329/followers", "following_url": "https://api.github.com/users/Lionelf329/following{/other_user}", "gists_url": "https://api.github.com/users/Lionelf329/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lionelf329/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lionelf329/subscriptions", "organizations_url": "https://api.github.com/users/Lionelf329/orgs", "repos_url": "https://api.github.com/users/Lionelf329/repos", "events_url": "https://api.github.com/users/Lionelf329/events{/privacy}", "received_events_url": "https://api.github.com/users/Lionelf329/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Lionelf329", "id": 33435217, "node_id": "MDQ6VXNlcjMzNDM1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/33435217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lionelf329", "html_url": "https://github.com/Lionelf329", "followers_url": "https://api.github.com/users/Lionelf329/followers", "following_url": "https://api.github.com/users/Lionelf329/following{/other_user}", "gists_url": "https://api.github.com/users/Lionelf329/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lionelf329/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lionelf329/subscriptions", "organizations_url": "https://api.github.com/users/Lionelf329/orgs", "repos_url": "https://api.github.com/users/Lionelf329/repos", "events_url": "https://api.github.com/users/Lionelf329/events{/privacy}", "received_events_url": "https://api.github.com/users/Lionelf329/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c82bb293c83877b52380d0d7a181a011fb70603", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c82bb293c83877b52380d0d7a181a011fb70603", "html_url": "https://github.com/rust-lang/rust/commit/1c82bb293c83877b52380d0d7a181a011fb70603"}], "stats": {"total": 24, "additions": 15, "deletions": 9}, "files": [{"sha": "0e5c5ee726e54f4ca07d734a330cd95653287a6d", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fddf012177671110caa96c4d9036199a0b91b8e7/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fddf012177671110caa96c4d9036199a0b91b8e7/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=fddf012177671110caa96c4d9036199a0b91b8e7", "patch": "@@ -2100,9 +2100,11 @@ impl<T> [T] {\n     ///\n     /// If the value is found then [`Result::Ok`] is returned, containing the\n     /// index of the matching element. If there are multiple matches, then any\n-    /// one of the matches could be returned. If the value is not found then\n-    /// [`Result::Err`] is returned, containing the index where a matching\n-    /// element could be inserted while maintaining sorted order.\n+    /// one of the matches could be returned. The index is chosen\n+    /// deterministically, but is subject to change in future versions of Rust.\n+    /// If the value is not found then [`Result::Err`] is returned, containing\n+    /// the index where a matching element could be inserted while maintaining\n+    /// sorted order.\n     ///\n     /// See also [`binary_search_by`], [`binary_search_by_key`], and [`partition_point`].\n     ///\n@@ -2153,9 +2155,11 @@ impl<T> [T] {\n     ///\n     /// If the value is found then [`Result::Ok`] is returned, containing the\n     /// index of the matching element. If there are multiple matches, then any\n-    /// one of the matches could be returned. If the value is not found then\n-    /// [`Result::Err`] is returned, containing the index where a matching\n-    /// element could be inserted while maintaining sorted order.\n+    /// one of the matches could be returned. The index is chosen\n+    /// deterministically, but is subject to change in future versions of Rust.\n+    /// If the value is not found then [`Result::Err`] is returned, containing\n+    /// the index where a matching element could be inserted while maintaining\n+    /// sorted order.\n     ///\n     /// See also [`binary_search`], [`binary_search_by_key`], and [`partition_point`].\n     ///\n@@ -2224,9 +2228,11 @@ impl<T> [T] {\n     ///\n     /// If the value is found then [`Result::Ok`] is returned, containing the\n     /// index of the matching element. If there are multiple matches, then any\n-    /// one of the matches could be returned. If the value is not found then\n-    /// [`Result::Err`] is returned, containing the index where a matching\n-    /// element could be inserted while maintaining sorted order.\n+    /// one of the matches could be returned. The index is chosen\n+    /// deterministically, but is subject to change in future versions of Rust.\n+    /// If the value is not found then [`Result::Err`] is returned, containing\n+    /// the index where a matching element could be inserted while maintaining\n+    /// sorted order.\n     ///\n     /// See also [`binary_search`], [`binary_search_by`], and [`partition_point`].\n     ///"}]}