{"sha": "0aa0043141004d9a3cfc94b46c78eaa789158b80", "node_id": "C_kwDOAAsO6NoAKDBhYTAwNDMxNDEwMDRkOWEzY2ZjOTRiNDZjNzhlYWE3ODkxNThiODA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-18T11:04:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-18T11:04:24Z"}, "message": "Rollup merge of #109287 - scottmcm:hash-slice-size-of-val, r=oli-obk\n\nUse `size_of_val` instead of manual calculation\n\nVery minor thing that I happened to notice in passing, but it's both shorter and [means it gets `mul nsw`](https://rust.godbolt.org/z/Y9KxYETv5), so why not.", "tree": {"sha": "385cc4425265e21a6b7746c5bee6636d4ac906f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/385cc4425265e21a6b7746c5bee6636d4ac906f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0aa0043141004d9a3cfc94b46c78eaa789158b80", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkFZq4CRBK7hj4Ov3rIwAAQVMIADur1R2+QR+ModbDKUVMMMeC\nld8uSA944IOVxNaXEX/yCVocspFjOuODpiJRHehuKPqXi/7cHKiihCQra5gVH1Wu\noBm2u5MWnuYi9Gt4Sg7DT6DXifjayzeQrCTO9eGu75xTHKWGpMBO9vS7MetgOOW9\nHBXxbGZq2WFd+U4nrZHPWhZvofFtKRHMLCMaCMwyCwbWKv1KdjEhLcb/H/dOKGKk\nu3NiivhiLp8320vx3ZABILHOWkqr9W4dLwh8MOIZP2r3BfezwOdJ5rqvVl4hc6gV\ngM6eeyxPqSG5+BAHWonLL05yQQ/TD+O6h1Qt/mouO46bL/exLqgybsXT9lcZkHE=\n=1kTT\n-----END PGP SIGNATURE-----\n", "payload": "tree 385cc4425265e21a6b7746c5bee6636d4ac906f9\nparent e81a07268b233ec6940b65444a6c32ceef28ce10\nparent 35088797aec481a9549d5d495b27ce9f1e3a39dd\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1679137464 +0100\ncommitter GitHub <noreply@github.com> 1679137464 +0100\n\nRollup merge of #109287 - scottmcm:hash-slice-size-of-val, r=oli-obk\n\nUse `size_of_val` instead of manual calculation\n\nVery minor thing that I happened to notice in passing, but it's both shorter and [means it gets `mul nsw`](https://rust.godbolt.org/z/Y9KxYETv5), so why not.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0aa0043141004d9a3cfc94b46c78eaa789158b80", "html_url": "https://github.com/rust-lang/rust/commit/0aa0043141004d9a3cfc94b46c78eaa789158b80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0aa0043141004d9a3cfc94b46c78eaa789158b80/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e81a07268b233ec6940b65444a6c32ceef28ce10", "url": "https://api.github.com/repos/rust-lang/rust/commits/e81a07268b233ec6940b65444a6c32ceef28ce10", "html_url": "https://github.com/rust-lang/rust/commit/e81a07268b233ec6940b65444a6c32ceef28ce10"}, {"sha": "35088797aec481a9549d5d495b27ce9f1e3a39dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/35088797aec481a9549d5d495b27ce9f1e3a39dd", "html_url": "https://github.com/rust-lang/rust/commit/35088797aec481a9549d5d495b27ce9f1e3a39dd"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "c34f1dbf8569da79ebbfdb083e20f68f95745de2", "filename": "compiler/rustc_codegen_ssa/src/glue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa0043141004d9a3cfc94b46c78eaa789158b80/compiler%2Frustc_codegen_ssa%2Fsrc%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa0043141004d9a3cfc94b46c78eaa789158b80/compiler%2Frustc_codegen_ssa%2Fsrc%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fglue.rs?ref=0aa0043141004d9a3cfc94b46c78eaa789158b80", "patch": "@@ -46,7 +46,7 @@ pub fn size_and_align_of_dst<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n                 // NOTE: ideally, we want the effects of both `unchecked_smul` and `unchecked_umul`\n                 // (resulting in `mul nsw nuw` in LLVM IR), since we know that the multiplication\n                 // cannot signed wrap, and that both operands are non-negative. But at the time of writing,\n-                // `BuilderMethods` can't do this, and it doesn't seem to enable any further optimizations.\n+                // the `LLVM-C` binding can't do this, and it doesn't seem to enable any further optimizations.\n                 bx.unchecked_smul(info.unwrap(), bx.const_usize(unit.size.bytes())),\n                 bx.const_usize(unit.align.abi.bytes()),\n             )"}, {"sha": "4e7bae7bcb05a53f6df970701c59c02c8eb365a7", "filename": "library/core/src/hash/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa0043141004d9a3cfc94b46c78eaa789158b80/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa0043141004d9a3cfc94b46c78eaa789158b80/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs?ref=0aa0043141004d9a3cfc94b46c78eaa789158b80", "patch": "@@ -834,7 +834,7 @@ mod impls {\n \n                 #[inline]\n                 fn hash_slice<H: ~const Hasher>(data: &[$ty], state: &mut H) {\n-                    let newlen = data.len() * mem::size_of::<$ty>();\n+                    let newlen = mem::size_of_val(data);\n                     let ptr = data.as_ptr() as *const u8;\n                     // SAFETY: `ptr` is valid and aligned, as this macro is only used\n                     // for numeric primitives which have no padding. The new slice only"}]}