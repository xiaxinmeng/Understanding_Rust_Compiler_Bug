{"sha": "32037a5696272f1c34f3692dcdc59b4ada91bdc7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyMDM3YTU2OTYyNzJmMWMzNGYzNjkyZGNkYzU5YjRhZGE5MWJkYzc=", "commit": {"author": {"name": "Ulrik Sverdrup", "email": "root@localhost", "date": "2015-06-06T12:26:40Z"}, "committer": {"name": "Ulrik Sverdrup", "email": "root@localhost", "date": "2015-06-06T18:05:39Z"}, "message": "linked_list: Add Rawlink::from", "tree": {"sha": "8b9d702bb101150c713a08bc5eaf2357b28a878f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b9d702bb101150c713a08bc5eaf2357b28a878f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32037a5696272f1c34f3692dcdc59b4ada91bdc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32037a5696272f1c34f3692dcdc59b4ada91bdc7", "html_url": "https://github.com/rust-lang/rust/commit/32037a5696272f1c34f3692dcdc59b4ada91bdc7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32037a5696272f1c34f3692dcdc59b4ada91bdc7/comments", "author": {"login": "invalid-email-address", "id": 148100, "node_id": "MDQ6VXNlcjE0ODEwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/148100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/invalid-email-address", "html_url": "https://github.com/invalid-email-address", "followers_url": "https://api.github.com/users/invalid-email-address/followers", "following_url": "https://api.github.com/users/invalid-email-address/following{/other_user}", "gists_url": "https://api.github.com/users/invalid-email-address/gists{/gist_id}", "starred_url": "https://api.github.com/users/invalid-email-address/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/invalid-email-address/subscriptions", "organizations_url": "https://api.github.com/users/invalid-email-address/orgs", "repos_url": "https://api.github.com/users/invalid-email-address/repos", "events_url": "https://api.github.com/users/invalid-email-address/events{/privacy}", "received_events_url": "https://api.github.com/users/invalid-email-address/received_events", "type": "User", "site_admin": false}, "committer": {"login": "invalid-email-address", "id": 148100, "node_id": "MDQ6VXNlcjE0ODEwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/148100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/invalid-email-address", "html_url": "https://github.com/invalid-email-address", "followers_url": "https://api.github.com/users/invalid-email-address/followers", "following_url": "https://api.github.com/users/invalid-email-address/following{/other_user}", "gists_url": "https://api.github.com/users/invalid-email-address/gists{/gist_id}", "starred_url": "https://api.github.com/users/invalid-email-address/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/invalid-email-address/subscriptions", "organizations_url": "https://api.github.com/users/invalid-email-address/orgs", "repos_url": "https://api.github.com/users/invalid-email-address/repos", "events_url": "https://api.github.com/users/invalid-email-address/events{/privacy}", "received_events_url": "https://api.github.com/users/invalid-email-address/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16cefab795d37c289fe3df2e824fdf65307c6c58", "url": "https://api.github.com/repos/rust-lang/rust/commits/16cefab795d37c289fe3df2e824fdf65307c6c58", "html_url": "https://github.com/rust-lang/rust/commit/16cefab795d37c289fe3df2e824fdf65307c6c58"}], "stats": {"total": 26, "additions": 14, "deletions": 12}, "files": [{"sha": "980fe00f1e5b4e1b4c65fc59b2ea2c76a2fbc39e", "filename": "src/libcollections/linked_list.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/32037a5696272f1c34f3692dcdc59b4ada91bdc7/src%2Flibcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32037a5696272f1c34f3692dcdc59b4ada91bdc7/src%2Flibcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flinked_list.rs?ref=32037a5696272f1c34f3692dcdc59b4ada91bdc7", "patch": "@@ -129,6 +129,15 @@ impl<T> Rawlink<T> {\n     }\n }\n \n+impl<'a, T> From<&'a mut Link<T>> for Rawlink<Node<T>> {\n+    fn from(node: &'a mut Link<T>) -> Self {\n+        match node.as_mut() {\n+            None => Rawlink::none(),\n+            Some(ptr) => Rawlink::some(ptr),\n+        }\n+    }\n+}\n+\n impl<T> Clone for Rawlink<T> {\n     #[inline]\n     fn clone(&self) -> Rawlink<T> {\n@@ -165,8 +174,8 @@ impl<T> LinkedList<T> {\n     fn push_front_node(&mut self, mut new_head: Box<Node<T>>) {\n         match self.list_head {\n             None => {\n-                self.list_tail = Rawlink::some(&mut *new_head);\n                 self.list_head = link_no_prev(new_head);\n+                self.list_tail = Rawlink::from(&mut self.list_head);\n             }\n             Some(ref mut head) => {\n                 new_head.prev = Rawlink::none();\n@@ -197,8 +206,8 @@ impl<T> LinkedList<T> {\n         match unsafe { self.list_tail.resolve_mut() } {\n             None => return self.push_front_node(new_tail),\n             Some(tail) => {\n-                self.list_tail = Rawlink::some(&mut *new_tail);\n                 tail.set_next(new_tail);\n+                self.list_tail = Rawlink::from(&mut tail.next);\n             }\n         }\n         self.length += 1;\n@@ -297,13 +306,9 @@ impl<T> LinkedList<T> {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn iter_mut(&mut self) -> IterMut<T> {\n-        let head_raw = match self.list_head {\n-            Some(ref mut h) => Rawlink::some(&mut **h),\n-            None => Rawlink::none(),\n-        };\n-        IterMut{\n+        IterMut {\n             nelem: self.len(),\n-            head: head_raw,\n+            head: Rawlink::from(&mut self.list_head),\n             tail: self.list_tail,\n             list: self\n         }\n@@ -717,10 +722,7 @@ impl<'a, A> Iterator for IterMut<'a, A> {\n         unsafe {\n             self.head.resolve_mut().map(|next| {\n                 self.nelem -= 1;\n-                self.head = match next.next {\n-                    Some(ref mut node) => Rawlink::some(&mut **node),\n-                    None => Rawlink::none(),\n-                };\n+                self.head = Rawlink::from(&mut next.next);\n                 &mut next.value\n             })\n         }"}]}