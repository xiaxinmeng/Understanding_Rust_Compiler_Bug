{"sha": "0f34e0dabb1251de6769576105a0cd34d6a1db44", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmMzRlMGRhYmIxMjUxZGU2NzY5NTc2MTA1YTBjZDM0ZDZhMWRiNDQ=", "commit": {"author": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2019-01-11T16:53:47Z"}, "committer": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2019-01-11T16:54:57Z"}, "message": "Add fmt benchmarks", "tree": {"sha": "97cc66727bfd891cd84234dbd47cdd8d74cbb3df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97cc66727bfd891cd84234dbd47cdd8d74cbb3df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f34e0dabb1251de6769576105a0cd34d6a1db44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f34e0dabb1251de6769576105a0cd34d6a1db44", "html_url": "https://github.com/rust-lang/rust/commit/0f34e0dabb1251de6769576105a0cd34d6a1db44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f34e0dabb1251de6769576105a0cd34d6a1db44/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88f19a774f2187c1295c78fe7fffabf007f71dbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/88f19a774f2187c1295c78fe7fffabf007f71dbf", "html_url": "https://github.com/rust-lang/rust/commit/88f19a774f2187c1295c78fe7fffabf007f71dbf"}], "stats": {"total": 111, "additions": 111, "deletions": 0}, "files": [{"sha": "92f10c760c6d2cc63fefb8e37d79f9ff1ce59774", "filename": "src/libcore/benches/fmt.rs", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/0f34e0dabb1251de6769576105a0cd34d6a1db44/src%2Flibcore%2Fbenches%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f34e0dabb1251de6769576105a0cd34d6a1db44/src%2Flibcore%2Fbenches%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Ffmt.rs?ref=0f34e0dabb1251de6769576105a0cd34d6a1db44", "patch": "@@ -0,0 +1,110 @@\n+use std::io::{self, Write as IoWrite};\n+use std::fmt::{self, Write as FmtWrite};\n+use test::Bencher;\n+\n+#[bench]\n+fn write_vec_value(bh: &mut Bencher) {\n+    bh.iter(|| {\n+        let mut mem = Vec::new();\n+        for _ in 0..1000 {\n+            mem.write_all(\"abc\".as_bytes()).unwrap();\n+        }\n+    });\n+}\n+\n+#[bench]\n+fn write_vec_ref(bh: &mut Bencher) {\n+    bh.iter(|| {\n+        let mut mem = Vec::new();\n+        let wr = &mut mem as &mut dyn io::Write;\n+        for _ in 0..1000 {\n+            wr.write_all(\"abc\".as_bytes()).unwrap();\n+        }\n+    });\n+}\n+\n+#[bench]\n+fn write_vec_macro1(bh: &mut Bencher) {\n+    bh.iter(|| {\n+        let mut mem = Vec::new();\n+        let wr = &mut mem as &mut dyn io::Write;\n+        for _ in 0..1000 {\n+            write!(wr, \"abc\").unwrap();\n+        }\n+    });\n+}\n+\n+#[bench]\n+fn write_vec_macro2(bh: &mut Bencher) {\n+    bh.iter(|| {\n+        let mut mem = Vec::new();\n+        let wr = &mut mem as &mut dyn io::Write;\n+        for _ in 0..1000 {\n+            write!(wr, \"{}\", \"abc\").unwrap();\n+        }\n+    });\n+}\n+\n+#[bench]\n+fn write_vec_macro_debug(bh: &mut Bencher) {\n+    bh.iter(|| {\n+        let mut mem = Vec::new();\n+        let wr = &mut mem as &mut dyn io::Write;\n+        for _ in 0..1000 {\n+            write!(wr, \"{:?}\", \"\u2603\").unwrap();\n+        }\n+    });\n+}\n+\n+#[bench]\n+fn write_str_value(bh: &mut Bencher) {\n+    bh.iter(|| {\n+        let mut mem = String::new();\n+        for _ in 0..1000 {\n+            mem.write_str(\"abc\").unwrap();\n+        }\n+    });\n+}\n+\n+#[bench]\n+fn write_str_ref(bh: &mut Bencher) {\n+    bh.iter(|| {\n+        let mut mem = String::new();\n+        let wr = &mut mem as &mut dyn fmt::Write;\n+        for _ in 0..1000 {\n+            wr.write_str(\"abc\").unwrap();\n+        }\n+    });\n+}\n+\n+#[bench]\n+fn write_str_macro1(bh: &mut Bencher) {\n+    bh.iter(|| {\n+        let mut mem = String::new();\n+        for _ in 0..1000 {\n+            write!(mem, \"abc\").unwrap();\n+        }\n+    });\n+}\n+\n+#[bench]\n+fn write_str_macro2(bh: &mut Bencher) {\n+    bh.iter(|| {\n+        let mut mem = String::new();\n+        let wr = &mut mem as &mut dyn fmt::Write;\n+        for _ in 0..1000 {\n+            write!(wr, \"{}\", \"abc\").unwrap();\n+        }\n+    });\n+}\n+\n+#[bench]\n+fn write_str_macro_debug(bh: &mut Bencher) {\n+    bh.iter(|| {\n+        let mut mem = String::new();\n+        let wr = &mut mem as &mut dyn fmt::Write;\n+        for _ in 0..1000 {\n+            write!(wr, \"{:?}\", \"\u2603\").unwrap();\n+        }\n+    });\n+}"}, {"sha": "48572af611a5b79a2a8dcdf660289c0c304a28e5", "filename": "src/libcore/benches/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f34e0dabb1251de6769576105a0cd34d6a1db44/src%2Flibcore%2Fbenches%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f34e0dabb1251de6769576105a0cd34d6a1db44/src%2Flibcore%2Fbenches%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Flib.rs?ref=0f34e0dabb1251de6769576105a0cd34d6a1db44", "patch": "@@ -11,3 +11,4 @@ mod iter;\n mod num;\n mod ops;\n mod slice;\n+mod fmt;"}]}