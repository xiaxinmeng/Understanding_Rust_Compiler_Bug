{"sha": "7de6ed06a528db8f34ca3e75ded9d77ab9ba8b9a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkZTZlZDA2YTUyOGRiOGYzNGNhM2U3NWRlZDlkNzdhYjliYThiOWE=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-06-14T10:25:14Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-06-20T11:23:23Z"}, "message": "Rename TraitTyParamBound to ParamBound::Trait", "tree": {"sha": "5144b7b2af8a4e1476fb04d2abe58fdfaf4fb63b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5144b7b2af8a4e1476fb04d2abe58fdfaf4fb63b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7de6ed06a528db8f34ca3e75ded9d77ab9ba8b9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7de6ed06a528db8f34ca3e75ded9d77ab9ba8b9a", "html_url": "https://github.com/rust-lang/rust/commit/7de6ed06a528db8f34ca3e75ded9d77ab9ba8b9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7de6ed06a528db8f34ca3e75ded9d77ab9ba8b9a/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8bc3a35576dd4e2f02b9d34fe5ed241288b5bfbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/8bc3a35576dd4e2f02b9d34fe5ed241288b5bfbe", "html_url": "https://github.com/rust-lang/rust/commit/8bc3a35576dd4e2f02b9d34fe5ed241288b5bfbe"}], "stats": {"total": 121, "additions": 57, "deletions": 64}, "files": [{"sha": "a66650aa161f24b938589b823888ea7ff6fbd503", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7de6ed06a528db8f34ca3e75ded9d77ab9ba8b9a/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7de6ed06a528db8f34ca3e75ded9d77ab9ba8b9a/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=7de6ed06a528db8f34ca3e75ded9d77ab9ba8b9a", "patch": "@@ -733,10 +733,10 @@ pub fn walk_foreign_item<'v, V: Visitor<'v>>(visitor: &mut V, foreign_item: &'v\n \n pub fn walk_param_bound<'v, V: Visitor<'v>>(visitor: &mut V, bound: &'v ParamBound) {\n     match *bound {\n-        TraitTyParamBound(ref typ, modifier) => {\n+        ParamBound::Trait(ref typ, modifier) => {\n             visitor.visit_poly_trait_ref(typ, modifier);\n         }\n-        Outlives(ref lifetime) => visitor.visit_lifetime(lifetime),\n+        ParamBound::Outlives(ref lifetime) => visitor.visit_lifetime(lifetime),\n     }\n }\n "}, {"sha": "2a231448490030189cf1c82f9733e0d55ad71954", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7de6ed06a528db8f34ca3e75ded9d77ab9ba8b9a/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7de6ed06a528db8f34ca3e75ded9d77ab9ba8b9a/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=7de6ed06a528db8f34ca3e75ded9d77ab9ba8b9a", "patch": "@@ -1108,10 +1108,10 @@ impl<'a> LoweringContext<'a> {\n                 let bounds = bounds\n                     .iter()\n                     .filter_map(|bound| match *bound {\n-                        TraitTyParamBound(ref ty, TraitBoundModifier::None) => {\n+                        Trait(ref ty, TraitBoundModifier::None) => {\n                             Some(self.lower_poly_trait_ref(ty, itctx))\n                         }\n-                        TraitTyParamBound(_, TraitBoundModifier::Maybe) => None,\n+                        Trait(_, TraitBoundModifier::Maybe) => None,\n                         Outlives(ref lifetime) => {\n                             if lifetime_bound.is_none() {\n                                 lifetime_bound = Some(self.lower_lifetime(lifetime));\n@@ -1875,12 +1875,12 @@ impl<'a> LoweringContext<'a> {\n         itctx: ImplTraitContext,\n     ) -> hir::ParamBound {\n         match *tpb {\n-            TraitTyParamBound(ref ty, modifier) => hir::TraitTyParamBound(\n+            ParamBound::Trait(ref ty, modifier) => hir::ParamBound::Trait(\n                 self.lower_poly_trait_ref(ty, itctx),\n                 self.lower_trait_bound_modifier(modifier),\n             ),\n-            Outlives(ref lifetime) => {\n-                hir::Outlives(self.lower_lifetime(lifetime))\n+            ParamBound::Outlives(ref lifetime) => {\n+                hir::ParamBound::Outlives(self.lower_lifetime(lifetime))\n             }\n         }\n     }\n@@ -2010,7 +2010,7 @@ impl<'a> LoweringContext<'a> {\n         for pred in &generics.where_clause.predicates {\n             if let WherePredicate::BoundPredicate(ref bound_pred) = *pred {\n                 'next_bound: for bound in &bound_pred.bounds {\n-                    if let TraitTyParamBound(_, TraitBoundModifier::Maybe) = *bound {\n+                    if let ParamBound::Trait(_, TraitBoundModifier::Maybe) = *bound {\n                         let report_error = |this: &mut Self| {\n                             this.diagnostic().span_err(\n                                 bound_pred.bounded_ty.span,\n@@ -2095,7 +2095,7 @@ impl<'a> LoweringContext<'a> {\n                                 .filter_map(|bound| match *bound {\n                                     // Ignore `?Trait` bounds.\n                                     // Tthey were copied into type parameters already.\n-                                    TraitTyParamBound(_, TraitBoundModifier::Maybe) => None,\n+                                    ParamBound::Trait(_, TraitBoundModifier::Maybe) => None,\n                                     _ => Some(this.lower_param_bound(\n                                         bound,\n                                         ImplTraitContext::Disallowed,"}, {"sha": "974d287cd9731badf0caa905c3c0dcd8a9bd1b2e", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7de6ed06a528db8f34ca3e75ded9d77ab9ba8b9a/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7de6ed06a528db8f34ca3e75ded9d77ab9ba8b9a/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=7de6ed06a528db8f34ca3e75ded9d77ab9ba8b9a", "patch": "@@ -22,7 +22,6 @@ pub use self::Mutability::*;\n pub use self::PrimTy::*;\n pub use self::Stmt_::*;\n pub use self::Ty_::*;\n-pub use self::ParamBound::*;\n pub use self::UnOp::*;\n pub use self::UnsafeSource::*;\n pub use self::Visibility::{Public, Inherited};\n@@ -445,15 +444,15 @@ pub enum TraitBoundModifier {\n /// detects Copy, Send and Sync.\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum ParamBound {\n-    TraitTyParamBound(PolyTraitRef, TraitBoundModifier),\n+    Trait(PolyTraitRef, TraitBoundModifier),\n     Outlives(Lifetime),\n }\n \n impl ParamBound {\n     pub fn span(&self) -> Span {\n         match self {\n-            &TraitTyParamBound(ref t, ..) => t.span,\n-            &Outlives(ref l) => l.span,\n+            &ParamBound::Trait(ref t, ..) => t.span,\n+            &ParamBound::Outlives(ref l) => l.span,\n         }\n     }\n }"}, {"sha": "b6fd136255421e3bf1875efbf0e05e1f14cbd0ce", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7de6ed06a528db8f34ca3e75ded9d77ab9ba8b9a/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7de6ed06a528db8f34ca3e75ded9d77ab9ba8b9a/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=7de6ed06a528db8f34ca3e75ded9d77ab9ba8b9a", "patch": "@@ -24,7 +24,7 @@ use syntax::util::parser::{self, AssocOp, Fixity};\n use syntax_pos::{self, BytePos, FileName};\n \n use hir;\n-use hir::{PatKind, Outlives, TraitTyParamBound, TraitBoundModifier, RangeEnd};\n+use hir::{PatKind, ParamBound, TraitBoundModifier, RangeEnd};\n use hir::{GenericParam, GenericParamKind, GenericArg};\n \n use std::cell::Cell;\n@@ -740,7 +740,7 @@ impl<'a> State<'a> {\n                 self.print_generic_params(&generics.params)?;\n                 let mut real_bounds = Vec::with_capacity(bounds.len());\n                 for b in bounds.iter() {\n-                    if let TraitTyParamBound(ref ptr, hir::TraitBoundModifier::Maybe) = *b {\n+                    if let ParamBound::Trait(ref ptr, hir::TraitBoundModifier::Maybe) = *b {\n                         self.s.space()?;\n                         self.word_space(\"for ?\")?;\n                         self.print_trait_ref(&ptr.trait_ref)?;\n@@ -766,7 +766,7 @@ impl<'a> State<'a> {\n                 let mut real_bounds = Vec::with_capacity(bounds.len());\n                 // FIXME(durka) this seems to be some quite outdated syntax\n                 for b in bounds.iter() {\n-                    if let TraitTyParamBound(ref ptr, hir::TraitBoundModifier::Maybe) = *b {\n+                    if let ParamBound::Trait(ref ptr, hir::TraitBoundModifier::Maybe) = *b {\n                         self.s.space()?;\n                         self.word_space(\"for ?\")?;\n                         self.print_trait_ref(&ptr.trait_ref)?;\n@@ -2086,13 +2086,13 @@ impl<'a> State<'a> {\n                 }\n \n                 match bound {\n-                    TraitTyParamBound(tref, modifier) => {\n+                    ParamBound::Trait(tref, modifier) => {\n                         if modifier == &TraitBoundModifier::Maybe {\n                             self.s.word(\"?\")?;\n                         }\n                         self.print_poly_trait_ref(tref)?;\n                     }\n-                    Outlives(lt) => {\n+                    ParamBound::Outlives(lt) => {\n                         self.print_lifetime(lt)?;\n                     }\n                 }\n@@ -2121,7 +2121,7 @@ impl<'a> State<'a> {\n                 let mut sep = \":\";\n                 for bound in &param.bounds {\n                     match bound {\n-                        hir::ParamBound::Outlives(lt) => {\n+                        ParamBound::Outlives(lt) => {\n                             self.s.word(sep)?;\n                             self.print_lifetime(lt)?;\n                             sep = \"+\";\n@@ -2181,7 +2181,7 @@ impl<'a> State<'a> {\n \n                     for (i, bound) in bounds.iter().enumerate() {\n                         match bound {\n-                            hir::ParamBound::Outlives(lt) => {\n+                            ParamBound::Outlives(lt) => {\n                                 self.print_lifetime(lt)?;\n                             }\n                             _ => bug!(),"}, {"sha": "ec55a05822cacbddd36d834e976db6d2334dcb33", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7de6ed06a528db8f34ca3e75ded9d77ab9ba8b9a/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7de6ed06a528db8f34ca3e75ded9d77ab9ba8b9a/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=7de6ed06a528db8f34ca3e75ded9d77ab9ba8b9a", "patch": "@@ -189,7 +189,7 @@ impl_stable_hash_for!(struct hir::GenericArgs {\n });\n \n impl_stable_hash_for!(enum hir::ParamBound {\n-    TraitTyParamBound(poly_trait_ref, trait_bound_modifier),\n+    Trait(poly_trait_ref, trait_bound_modifier),\n     Outlives(lifetime)\n });\n "}, {"sha": "14c782308a801226af744ff4f209129760dcabb5", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7de6ed06a528db8f34ca3e75ded9d77ab9ba8b9a/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7de6ed06a528db8f34ca3e75ded9d77ab9ba8b9a/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=7de6ed06a528db8f34ca3e75ded9d77ab9ba8b9a", "patch": "@@ -1256,7 +1256,7 @@ fn object_lifetime_defaults_for_item(\n ) -> Vec<ObjectLifetimeDefault> {\n     fn add_bounds(set: &mut Set1<hir::LifetimeName>, bounds: &[hir::ParamBound]) {\n         for bound in bounds {\n-            if let hir::Outlives(ref lifetime) = *bound {\n+            if let hir::ParamBound::Outlives(ref lifetime) = *bound {\n                 set.insert(lifetime.name);\n             }\n         }"}, {"sha": "bdfe1d50e26869f61cfbe303f716062554d503d4", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7de6ed06a528db8f34ca3e75ded9d77ab9ba8b9a/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7de6ed06a528db8f34ca3e75ded9d77ab9ba8b9a/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=7de6ed06a528db8f34ca3e75ded9d77ab9ba8b9a", "patch": "@@ -101,7 +101,7 @@ impl<'a> AstValidator<'a> {\n \n     fn no_questions_in_bounds(&self, bounds: &ParamBounds, where_: &str, is_trait: bool) {\n         for bound in bounds {\n-            if let TraitTyParamBound(ref poly, TraitBoundModifier::Maybe) = *bound {\n+            if let Trait(ref poly, TraitBoundModifier::Maybe) = *bound {\n                 let mut err = self.err_handler().struct_span_err(poly.span,\n                                     &format!(\"`?Trait` is not permitted in {}\", where_));\n                 if is_trait {\n@@ -203,7 +203,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             }\n             TyKind::ImplTrait(ref bounds) => {\n                 if !bounds.iter()\n-                          .any(|b| if let TraitTyParamBound(..) = *b { true } else { false }) {\n+                          .any(|b| if let Trait(..) = *b { true } else { false }) {\n                     self.err_handler().span_err(ty.span, \"at least one trait must be specified\");\n                 }\n             }"}, {"sha": "68b5a925ef3a0bb652a0c44eb29832891a454d1c", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7de6ed06a528db8f34ca3e75ded9d77ab9ba8b9a/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7de6ed06a528db8f34ca3e75ded9d77ab9ba8b9a/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=7de6ed06a528db8f34ca3e75ded9d77ab9ba8b9a", "patch": "@@ -1039,7 +1039,7 @@ impl<'a, 'tcx> ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n \n     fn check_ty_param_bound(&mut self,\n                             ty_param_bound: &hir::ParamBound) {\n-        if let hir::TraitTyParamBound(ref trait_ref, _) = *ty_param_bound {\n+        if let hir::ParamBound::Trait(ref trait_ref, _) = *ty_param_bound {\n             if self.path_is_private_type(&trait_ref.trait_ref.path) {\n                 self.old_error_set.insert(trait_ref.trait_ref.ref_id);\n             }"}, {"sha": "1373ee94587a577ae7a3991fe3138665cc8eb0a0", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7de6ed06a528db8f34ca3e75ded9d77ab9ba8b9a/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7de6ed06a528db8f34ca3e75ded9d77ab9ba8b9a/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=7de6ed06a528db8f34ca3e75ded9d77ab9ba8b9a", "patch": "@@ -761,7 +761,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n         // super-traits\n         for super_bound in trait_refs.iter() {\n             let trait_ref = match *super_bound {\n-                ast::TraitTyParamBound(ref trait_ref, _) => trait_ref,\n+                ast::Trait(ref trait_ref, _) => trait_ref,\n                 ast::Outlives(..) => {\n                     continue;\n                 }\n@@ -1489,7 +1489,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> Visitor<'l> for DumpVisitor<'l, 'tc\n             ast::GenericParamKind::Lifetime { .. } => {}\n             ast::GenericParamKind::Type { ref default, .. } => {\n                 for bound in &param.bounds {\n-                    if let ast::TraitTyParamBound(ref trait_ref, _) = *bound {\n+                    if let ast::Trait(ref trait_ref, _) = *bound {\n                         self.process_path(trait_ref.trait_ref.ref_id, &trait_ref.trait_ref.path)\n                     }\n                 }"}, {"sha": "f578d4f1ae6ab489ca9f6e75637b0cfa98cbdb40", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 9, "deletions": 17, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7de6ed06a528db8f34ca3e75ded9d77ab9ba8b9a/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7de6ed06a528db8f34ca3e75ded9d77ab9ba8b9a/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=7de6ed06a528db8f34ca3e75ded9d77ab9ba8b9a", "patch": "@@ -1257,7 +1257,7 @@ fn is_unsized<'gcx: 'tcx, 'tcx>(astconv: &AstConv<'gcx, 'tcx>,\n     // Try to find an unbound in bounds.\n     let mut unbound = None;\n     for ab in ast_bounds {\n-        if let &hir::TraitTyParamBound(ref ptr, hir::TraitBoundModifier::Maybe) = ab  {\n+        if let &hir::ParamBound::Trait(ref ptr, hir::TraitBoundModifier::Maybe) = ab  {\n             if unbound.is_none() {\n                 unbound = Some(ptr.trait_ref.clone());\n             } else {\n@@ -1482,7 +1482,7 @@ pub fn explicit_predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n                 for bound in bound_pred.bounds.iter() {\n                     match bound {\n-                        &hir::ParamBound::TraitTyParamBound(ref poly_trait_ref, _) => {\n+                        &hir::ParamBound::Trait(ref poly_trait_ref, _) => {\n                             let mut projections = Vec::new();\n \n                             let trait_ref =\n@@ -1591,22 +1591,16 @@ pub fn compute_bounds<'gcx: 'tcx, 'tcx>(astconv: &AstConv<'gcx, 'tcx>,\n     let mut trait_bounds = vec![];\n     for ast_bound in ast_bounds {\n         match *ast_bound {\n-            hir::TraitTyParamBound(ref b, hir::TraitBoundModifier::None) => {\n-                trait_bounds.push(b);\n-            }\n-            hir::TraitTyParamBound(_, hir::TraitBoundModifier::Maybe) => {}\n-            hir::Outlives(ref l) => {\n-                region_bounds.push(l);\n-            }\n+            hir::ParamBound::Trait(ref b, hir::TraitBoundModifier::None) => trait_bounds.push(b),\n+            hir::ParamBound::Trait(_, hir::TraitBoundModifier::Maybe) => {}\n+            hir::ParamBound::Outlives(ref l) => region_bounds.push(l),\n         }\n     }\n \n     let mut projection_bounds = vec![];\n \n     let mut trait_bounds: Vec<_> = trait_bounds.iter().map(|&bound| {\n-        astconv.instantiate_poly_trait_ref(bound,\n-                                           param_ty,\n-                                           &mut projection_bounds)\n+        astconv.instantiate_poly_trait_ref(bound, param_ty, &mut projection_bounds)\n     }).collect();\n \n     let region_bounds = region_bounds.into_iter().map(|r| {\n@@ -1640,7 +1634,7 @@ fn predicates_from_bound<'tcx>(astconv: &AstConv<'tcx, 'tcx>,\n                                -> Vec<ty::Predicate<'tcx>>\n {\n     match *bound {\n-        hir::TraitTyParamBound(ref tr, hir::TraitBoundModifier::None) => {\n+        hir::ParamBound::Trait(ref tr, hir::TraitBoundModifier::None) => {\n             let mut projections = Vec::new();\n             let pred = astconv.instantiate_poly_trait_ref(tr,\n                                                           param_ty,\n@@ -1650,14 +1644,12 @@ fn predicates_from_bound<'tcx>(astconv: &AstConv<'tcx, 'tcx>,\n                        .chain(Some(pred.to_predicate()))\n                        .collect()\n         }\n-        hir::Outlives(ref lifetime) => {\n+        hir::ParamBound::Outlives(ref lifetime) => {\n             let region = astconv.ast_region_to_region(lifetime, None);\n             let pred = ty::Binder::bind(ty::OutlivesPredicate(param_ty, region));\n             vec![ty::Predicate::TypeOutlives(pred)]\n         }\n-        hir::TraitTyParamBound(_, hir::TraitBoundModifier::Maybe) => {\n-            Vec::new()\n-        }\n+        hir::ParamBound::Trait(_, hir::TraitBoundModifier::Maybe) => vec![],\n     }\n }\n "}, {"sha": "7f9500d21f0189af51af25bd1b694029acff7fa6", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7de6ed06a528db8f34ca3e75ded9d77ab9ba8b9a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7de6ed06a528db8f34ca3e75ded9d77ab9ba8b9a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=7de6ed06a528db8f34ca3e75ded9d77ab9ba8b9a", "patch": "@@ -1510,8 +1510,8 @@ impl ParamBound {\n impl Clean<ParamBound> for hir::ParamBound {\n     fn clean(&self, cx: &DocContext) -> ParamBound {\n         match *self {\n-            hir::Outlives(lt) => Outlives(lt.clean(cx)),\n-            hir::TraitTyParamBound(ref t, modifier) => TraitBound(t.clean(cx), modifier),\n+            hir::ParamBound::Outlives(lt) => Outlives(lt.clean(cx)),\n+            hir::ParamBound::Trait(ref t, modifier) => TraitBound(t.clean(cx), modifier),\n         }\n     }\n }\n@@ -1624,7 +1624,7 @@ impl<'tcx> Clean<Option<Vec<ParamBound>>> for Substs<'tcx> {\n     fn clean(&self, cx: &DocContext) -> Option<Vec<ParamBound>> {\n         let mut v = Vec::new();\n         v.extend(self.regions().filter_map(|r| r.clean(cx))\n-                     .map(Outlives));\n+                     .map(ParamBound::Outlives));\n         v.extend(self.types().map(|t| TraitBound(PolyTrait {\n             trait_: t.clean(cx),\n             generic_params: Vec::new(),\n@@ -3080,7 +3080,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                     inline::record_extern_fqn(cx, did, TypeKind::Trait);\n \n                     let mut typarams = vec![];\n-                    reg.clean(cx).map(|b| typarams.push(Outlives(b)));\n+                    reg.clean(cx).map(|b| typarams.push(ParamBound::Outlives(b)));\n                     for did in obj.auto_traits() {\n                         let empty = cx.tcx.intern_substs(&[]);\n                         let path = external_path(cx, &cx.tcx.item_name(did).as_str(),\n@@ -3137,7 +3137,9 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                         tr\n                     } else if let ty::Predicate::TypeOutlives(pred) = *predicate {\n                         // these should turn up at the end\n-                        pred.skip_binder().1.clean(cx).map(|r| regions.push(Outlives(r)));\n+                        pred.skip_binder().1.clean(cx).map(|r| {\n+                            regions.push(ParamBound::Outlives(r))\n+                        });\n                         return None;\n                     } else {\n                         return None;"}, {"sha": "6fe90025ff8e5afdab86ab3c68797ca73b09e7ec", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7de6ed06a528db8f34ca3e75ded9d77ab9ba8b9a/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7de6ed06a528db8f34ca3e75ded9d77ab9ba8b9a/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=7de6ed06a528db8f34ca3e75ded9d77ab9ba8b9a", "patch": "@@ -283,14 +283,14 @@ pub enum TraitBoundModifier {\n /// detects Copy, Send and Sync.\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum ParamBound {\n-    TraitTyParamBound(PolyTraitRef, TraitBoundModifier),\n+    Trait(PolyTraitRef, TraitBoundModifier),\n     Outlives(Lifetime)\n }\n \n impl ParamBound {\n     pub fn span(&self) -> Span {\n         match self {\n-            &TraitTyParamBound(ref t, ..) => t.span,\n+            &Trait(ref t, ..) => t.span,\n             &Outlives(ref l) => l.ident.span,\n         }\n     }\n@@ -930,7 +930,7 @@ impl Expr {\n     fn to_bound(&self) -> Option<ParamBound> {\n         match &self.node {\n             ExprKind::Path(None, path) =>\n-                Some(TraitTyParamBound(PolyTraitRef::new(Vec::new(), path.clone(), self.span),\n+                Some(Trait(PolyTraitRef::new(Vec::new(), path.clone(), self.span),\n                                        TraitBoundModifier::None)),\n             _ => None,\n         }"}, {"sha": "28bfb1ff81110d35f7f42fb330f95147be1b2c90", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7de6ed06a528db8f34ca3e75ded9d77ab9ba8b9a/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7de6ed06a528db8f34ca3e75ded9d77ab9ba8b9a/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=7de6ed06a528db8f34ca3e75ded9d77ab9ba8b9a", "patch": "@@ -465,7 +465,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     }\n \n     fn ty_param_bound(&self, path: ast::Path) -> ast::ParamBound {\n-        ast::TraitTyParamBound(self.poly_trait_ref(path.span, path), ast::TraitBoundModifier::None)\n+        ast::Trait(self.poly_trait_ref(path.span, path), ast::TraitBoundModifier::None)\n     }\n \n     fn lifetime(&self, span: Span, ident: ast::Ident) -> ast::Lifetime {"}, {"sha": "290607a702b171a69c0d9d21a138d534d7e8b473", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7de6ed06a528db8f34ca3e75ded9d77ab9ba8b9a/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7de6ed06a528db8f34ca3e75ded9d77ab9ba8b9a/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=7de6ed06a528db8f34ca3e75ded9d77ab9ba8b9a", "patch": "@@ -678,8 +678,8 @@ pub fn noop_fold_fn_decl<T: Folder>(decl: P<FnDecl>, fld: &mut T) -> P<FnDecl> {\n \n pub fn noop_fold_param_bound<T>(pb: ParamBound, fld: &mut T) -> ParamBound where T: Folder {\n     match pb {\n-        TraitTyParamBound(ty, modifier) => {\n-            TraitTyParamBound(fld.fold_poly_trait_ref(ty), modifier)\n+        Trait(ty, modifier) => {\n+            Trait(fld.fold_poly_trait_ref(ty), modifier)\n         }\n         Outlives(lifetime) => Outlives(noop_fold_lifetime(lifetime, fld)),\n     }"}, {"sha": "75eefb844321c9322774d6d1bee77d841e4f687e", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7de6ed06a528db8f34ca3e75ded9d77ab9ba8b9a/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7de6ed06a528db8f34ca3e75ded9d77ab9ba8b9a/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=7de6ed06a528db8f34ca3e75ded9d77ab9ba8b9a", "patch": "@@ -10,7 +10,7 @@\n \n use rustc_target::spec::abi::{self, Abi};\n use ast::{AngleBracketedArgs, ParenthesizedArgData, AttrStyle, BareFnTy};\n-use ast::{Outlives, TraitTyParamBound, TraitBoundModifier};\n+use ast::{Outlives, Trait, TraitBoundModifier};\n use ast::Unsafety;\n use ast::{Mod, AnonConst, Arg, Arm, Attribute, BindingMode, TraitItemKind};\n use ast::Block;\n@@ -1444,7 +1444,7 @@ impl<'a> Parser<'a> {\n                     TyKind::TraitObject(ref bounds, TraitObjectSyntax::None)\n                             if maybe_bounds && bounds.len() == 1 && !trailing_plus => {\n                         let path = match bounds[0] {\n-                            TraitTyParamBound(ref pt, ..) => pt.trait_ref.path.clone(),\n+                            Trait(ref pt, ..) => pt.trait_ref.path.clone(),\n                             _ => self.bug(\"unexpected lifetime bound\"),\n                         };\n                         self.parse_remaining_bounds(Vec::new(), path, lo, true)?\n@@ -1566,7 +1566,7 @@ impl<'a> Parser<'a> {\n     fn parse_remaining_bounds(&mut self, generic_params: Vec<GenericParam>, path: ast::Path,\n                               lo: Span, parse_plus: bool) -> PResult<'a, TyKind> {\n         let poly_trait_ref = PolyTraitRef::new(generic_params, path, lo.to(self.prev_span));\n-        let mut bounds = vec![TraitTyParamBound(poly_trait_ref, TraitBoundModifier::None)];\n+        let mut bounds = vec![Trait(poly_trait_ref, TraitBoundModifier::None)];\n         if parse_plus {\n             self.eat_plus(); // `+`, or `+=` gets split and `+` is discarded\n             bounds.append(&mut self.parse_ty_param_bounds()?);\n@@ -4770,7 +4770,7 @@ impl<'a> Parser<'a> {\n                     } else {\n                         TraitBoundModifier::None\n                     };\n-                    bounds.push(TraitTyParamBound(poly_trait, modifier));\n+                    bounds.push(Trait(poly_trait, modifier));\n                 }\n             } else {\n                 break"}, {"sha": "38229fa499876b5f78d82291aad8349e1e4cef20", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7de6ed06a528db8f34ca3e75ded9d77ab9ba8b9a/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7de6ed06a528db8f34ca3e75ded9d77ab9ba8b9a/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=7de6ed06a528db8f34ca3e75ded9d77ab9ba8b9a", "patch": "@@ -12,7 +12,7 @@ pub use self::AnnNode::*;\n \n use rustc_target::spec::abi::{self, Abi};\n use ast::{self, BlockCheckMode, PatKind, RangeEnd, RangeSyntax};\n-use ast::{SelfKind, Outlives, TraitTyParamBound, TraitBoundModifier};\n+use ast::{SelfKind, Outlives, Trait, TraitBoundModifier};\n use ast::{Attribute, MacDelimiter, GenericArg};\n use util::parser::{self, AssocOp, Fixity};\n use attr;\n@@ -1364,7 +1364,7 @@ impl<'a> State<'a> {\n                 self.print_generic_params(&generics.params)?;\n                 let mut real_bounds = Vec::with_capacity(bounds.len());\n                 for b in bounds.iter() {\n-                    if let TraitTyParamBound(ref ptr, ast::TraitBoundModifier::Maybe) = *b {\n+                    if let Trait(ref ptr, ast::TraitBoundModifier::Maybe) = *b {\n                         self.s.space()?;\n                         self.word_space(\"for ?\")?;\n                         self.print_trait_ref(&ptr.trait_ref)?;\n@@ -1390,7 +1390,7 @@ impl<'a> State<'a> {\n                 let mut real_bounds = Vec::with_capacity(bounds.len());\n                 // FIXME(durka) this seems to be some quite outdated syntax\n                 for b in bounds.iter() {\n-                    if let TraitTyParamBound(ref ptr, ast::TraitBoundModifier::Maybe) = *b {\n+                    if let Trait(ref ptr, ast::TraitBoundModifier::Maybe) = *b {\n                         self.s.space()?;\n                         self.word_space(\"for ?\")?;\n                         self.print_trait_ref(&ptr.trait_ref)?;\n@@ -2826,7 +2826,7 @@ impl<'a> State<'a> {\n                 }\n \n                 match bound {\n-                    TraitTyParamBound(tref, modifier) => {\n+                    Trait(tref, modifier) => {\n                         if modifier == &TraitBoundModifier::Maybe {\n                             self.s.word(\"?\")?;\n                         }"}, {"sha": "6beaabd03de71316ad5da78d2175584a67e58b71", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7de6ed06a528db8f34ca3e75ded9d77ab9ba8b9a/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7de6ed06a528db8f34ca3e75ded9d77ab9ba8b9a/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=7de6ed06a528db8f34ca3e75ded9d77ab9ba8b9a", "patch": "@@ -481,7 +481,7 @@ pub fn walk_global_asm<'a, V: Visitor<'a>>(_: &mut V, _: &'a GlobalAsm) {\n \n pub fn walk_param_bound<'a, V: Visitor<'a>>(visitor: &mut V, bound: &'a ParamBound) {\n     match *bound {\n-        TraitTyParamBound(ref typ, ref modifier) => {\n+        Trait(ref typ, ref modifier) => {\n             visitor.visit_poly_trait_ref(typ, modifier);\n         }\n         Outlives(ref lifetime) => {"}]}