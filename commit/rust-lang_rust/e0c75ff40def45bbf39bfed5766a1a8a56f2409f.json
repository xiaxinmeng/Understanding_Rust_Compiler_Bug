{"sha": "e0c75ff40def45bbf39bfed5766a1a8a56f2409f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwYzc1ZmY0MGRlZjQ1YmJmMzliZmVkNTc2NmExYThhNTZmMjQwOWY=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-12-19T10:31:35Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-03-15T11:25:10Z"}, "message": "rustc: rename item_path to def_path (except the module in ty).", "tree": {"sha": "2481a8ecd209948f09dcd09f1e012a968c1bd88c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2481a8ecd209948f09dcd09f1e012a968c1bd88c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0c75ff40def45bbf39bfed5766a1a8a56f2409f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0c75ff40def45bbf39bfed5766a1a8a56f2409f", "html_url": "https://github.com/rust-lang/rust/commit/e0c75ff40def45bbf39bfed5766a1a8a56f2409f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1af5a77a00225bec61c0ae7218031123364b619", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1af5a77a00225bec61c0ae7218031123364b619", "html_url": "https://github.com/rust-lang/rust/commit/f1af5a77a00225bec61c0ae7218031123364b619"}], "stats": {"total": 348, "additions": 174, "deletions": 174}, "files": [{"sha": "eb75e624d34b2982ebff060f9ed42d609de36548", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=e0c75ff40def45bbf39bfed5766a1a8a56f2409f", "patch": "@@ -724,7 +724,7 @@ impl<'a, 'gcx: 'tcx + 'a, 'tcx: 'a> DepNodeParams<'a, 'gcx, 'tcx> for DefId {\n     }\n \n     fn to_debug_str(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> String {\n-        tcx.item_path_str(*self)\n+        tcx.def_path_str(*self)\n     }\n }\n \n@@ -736,7 +736,7 @@ impl<'a, 'gcx: 'tcx + 'a, 'tcx: 'a> DepNodeParams<'a, 'gcx, 'tcx> for DefIndex {\n     }\n \n     fn to_debug_str(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> String {\n-        tcx.item_path_str(DefId::local(*self))\n+        tcx.def_path_str(DefId::local(*self))\n     }\n }\n "}, {"sha": "397843fd75afa1d7f118af8002f58bb9e5608727", "filename": "src/librustc/hir/def_id.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc%2Fhir%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc%2Fhir%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef_id.rs?ref=e0c75ff40def45bbf39bfed5766a1a8a56f2409f", "patch": "@@ -249,7 +249,7 @@ impl DefId {\n         if self.is_local() && self.index == CRATE_DEF_INDEX {\n             format!(\"top-level module\")\n         } else {\n-            format!(\"module `{}`\", tcx.item_path_str(*self))\n+            format!(\"module `{}`\", tcx.def_path_str(*self))\n         }\n     }\n }"}, {"sha": "2a638853992f3c39fb12db58b4794bacacce4407", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=e0c75ff40def45bbf39bfed5766a1a8a56f2409f", "patch": "@@ -448,10 +448,10 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             // Only external crates, if either is from a local\n             // module we could have false positives\n             if !(did1.is_local() || did2.is_local()) && did1.krate != did2.krate {\n-                let exp_path = self.tcx.item_path_str(did1);\n-                let found_path = self.tcx.item_path_str(did2);\n-                let exp_abs_path = self.tcx.absolute_item_path_str(did1);\n-                let found_abs_path = self.tcx.absolute_item_path_str(did2);\n+                let exp_path = self.tcx.def_path_str(did1);\n+                let found_path = self.tcx.def_path_str(did2);\n+                let exp_abs_path = self.tcx.absolute_def_path_str(did1);\n+                let found_abs_path = self.tcx.absolute_def_path_str(did2);\n                 // We compare strings because DefPath can be different\n                 // for imported and non-imported crates\n                 if exp_path == found_path || exp_abs_path == found_abs_path {\n@@ -658,7 +658,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 return Some(());\n             }\n             if let &ty::Adt(def, _) = &ta.sty {\n-                let path_ = self.tcx.item_path_str(def.did.clone());\n+                let path_ = self.tcx.def_path_str(def.did.clone());\n                 if path_ == other_path {\n                     self.highlight_outer(&mut t1_out, &mut t2_out, path, sub, i, &other_ty);\n                     return Some(());\n@@ -757,8 +757,8 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 let sub_no_defaults_1 = self.strip_generic_default_params(def1.did, sub1);\n                 let sub_no_defaults_2 = self.strip_generic_default_params(def2.did, sub2);\n                 let mut values = (DiagnosticStyledString::new(), DiagnosticStyledString::new());\n-                let path1 = self.tcx.item_path_str(def1.did.clone());\n-                let path2 = self.tcx.item_path_str(def2.did.clone());\n+                let path1 = self.tcx.def_path_str(def1.did.clone());\n+                let path2 = self.tcx.def_path_str(def2.did.clone());\n                 if def1.did == def2.did {\n                     // Easy case. Replace same types with `_` to shorten the output and highlight\n                     // the differing ones.\n@@ -1013,7 +1013,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                             if exp_is_struct && &exp_found.expected == ret_ty.skip_binder() {\n                                 let message = format!(\n                                     \"did you mean `{}(/* fields */)`?\",\n-                                    self.tcx.item_path_str(def_id)\n+                                    self.tcx.def_path_str(def_id)\n                                 );\n                                 diag.span_label(span, message);\n                             }"}, {"sha": "189ecf53e0e8496dd3537deee41ac52e95476ce1", "filename": "src/librustc/infer/error_reporting/nice_region_error/placeholder_error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs?ref=e0c75ff40def45bbf39bfed5766a1a8a56f2409f", "patch": "@@ -193,15 +193,15 @@ impl NiceRegionError<'me, 'gcx, 'tcx> {\n             cause.span(&self.tcx()),\n             &format!(\n                 \"implementation of `{}` is not general enough\",\n-                self.tcx().item_path_str(trait_def_id),\n+                self.tcx().def_path_str(trait_def_id),\n             ),\n         );\n \n         match cause.code {\n             ObligationCauseCode::ItemObligation(def_id) => {\n                 err.note(&format!(\n                     \"Due to a where-clause on `{}`,\",\n-                    self.tcx().item_path_str(def_id),\n+                    self.tcx().def_path_str(def_id),\n                 ));\n             }\n             _ => (),"}, {"sha": "0a2a375e1b2c154e37fedad45e0c4853581b7baf", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=e0c75ff40def45bbf39bfed5766a1a8a56f2409f", "patch": "@@ -593,7 +593,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                                .map_or(false, |parent_depr| parent_depr.same_origin(&depr_entry));\n \n                 if !skip {\n-                    let path = self.item_path_str(def_id);\n+                    let path = self.def_path_str(def_id);\n                     let message = format!(\"use of deprecated item '{}'\", path);\n                     lint_deprecated(def_id,\n                                     id,\n@@ -620,7 +620,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         if let Some(id) = id {\n             if let Some(stability) = stability {\n                 if let Some(depr) = &stability.rustc_depr {\n-                    let path = self.item_path_str(def_id);\n+                    let path = self.def_path_str(def_id);\n                     if deprecation_in_effect(&depr.since.as_str()) {\n                         let message = format!(\"use of deprecated item '{}'\", path);\n                         lint_deprecated(def_id,"}, {"sha": "ea3668cec1544128d957d71f6dc6b18c25a9411e", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=e0c75ff40def45bbf39bfed5766a1a8a56f2409f", "patch": "@@ -2062,7 +2062,7 @@ impl<'tcx> Debug for Place<'tcx> {\n             Base(PlaceBase::Static(box self::Static { def_id, ty })) => write!(\n                 fmt,\n                 \"({}: {:?})\",\n-                ty::tls::with(|tcx| tcx.item_path_str(def_id)),\n+                ty::tls::with(|tcx| tcx.def_path_str(def_id)),\n                 ty\n             ),\n             Base(PlaceBase::Promoted(ref promoted)) => write!(\n@@ -2731,7 +2731,7 @@ pub fn fmt_const_val(f: &mut impl Write, const_val: ty::Const<'_>) -> fmt::Resul\n     }\n     // print function definitions\n     if let FnDef(did, _) = ty.sty {\n-        return write!(f, \"{}\", item_path_str(did));\n+        return write!(f, \"{}\", def_path_str(did));\n     }\n     // print string literals\n     if let ConstValue::Slice(ptr, len) = value {\n@@ -2756,8 +2756,8 @@ pub fn fmt_const_val(f: &mut impl Write, const_val: ty::Const<'_>) -> fmt::Resul\n     write!(f, \"{:?}:{}\", value, ty)\n }\n \n-fn item_path_str(def_id: DefId) -> String {\n-    ty::tls::with(|tcx| tcx.item_path_str(def_id))\n+fn def_path_str(def_id: DefId) -> String {\n+    ty::tls::with(|tcx| tcx.def_path_str(def_id))\n }\n \n impl<'tcx> graph::DirectedGraph for Mir<'tcx> {"}, {"sha": "6c8fe0875b60c232a0cac7db751294a696901cfb", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=e0c75ff40def45bbf39bfed5766a1a8a56f2409f", "patch": "@@ -1285,11 +1285,11 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         let span = self.sess.source_map().def_span(span);\n         let mut err = struct_span_err!(self.sess, span, E0072,\n                                        \"recursive type `{}` has infinite size\",\n-                                       self.item_path_str(type_def_id));\n+                                       self.def_path_str(type_def_id));\n         err.span_label(span, \"recursive type has infinite size\");\n         err.help(&format!(\"insert indirection (e.g., a `Box`, `Rc`, or `&`) \\\n                            at some point to make `{}` representable\",\n-                          self.item_path_str(type_def_id)));\n+                          self.def_path_str(type_def_id)));\n         err\n     }\n \n@@ -1299,7 +1299,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                                       violations: Vec<ObjectSafetyViolation>)\n                                       -> DiagnosticBuilder<'tcx>\n     {\n-        let trait_str = self.item_path_str(trait_def_id);\n+        let trait_str = self.def_path_str(trait_def_id);\n         let span = self.sess.source_map().def_span(span);\n         let mut err = struct_span_err!(\n             self.sess, span, E0038,\n@@ -1524,7 +1524,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                   region, object_ty));\n             }\n             ObligationCauseCode::ItemObligation(item_def_id) => {\n-                let item_name = tcx.item_path_str(item_def_id);\n+                let item_name = tcx.def_path_str(item_def_id);\n                 let msg = format!(\"required by `{}`\", item_name);\n \n                 if let Some(sp) = tcx.hir().span_if_local(item_def_id) {"}, {"sha": "78c80b48ee80d9756f6b15ada676db838c25e650", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=e0c75ff40def45bbf39bfed5766a1a8a56f2409f", "patch": "@@ -650,7 +650,7 @@ pub fn type_known_to_meet_bound_modulo_regions<'a, 'gcx, 'tcx>(\n ) -> bool {\n     debug!(\"type_known_to_meet_bound_modulo_regions(ty={:?}, bound={:?})\",\n            ty,\n-           infcx.tcx.item_path_str(def_id));\n+           infcx.tcx.def_path_str(def_id));\n \n     let trait_ref = ty::TraitRef {\n         def_id,\n@@ -665,7 +665,7 @@ pub fn type_known_to_meet_bound_modulo_regions<'a, 'gcx, 'tcx>(\n \n     let result = infcx.predicate_must_hold_modulo_regions(&obligation);\n     debug!(\"type_known_to_meet_ty={:?} bound={} => {:?}\",\n-           ty, infcx.tcx.item_path_str(def_id), result);\n+           ty, infcx.tcx.def_path_str(def_id), result);\n \n     if result && (ty.has_infer_types() || ty.has_closure_types()) {\n         // Because of inference \"guessing\", selection can sometimes claim\n@@ -692,13 +692,13 @@ pub fn type_known_to_meet_bound_modulo_regions<'a, 'gcx, 'tcx>(\n             Ok(()) => {\n                 debug!(\"type_known_to_meet_bound_modulo_regions: ty={:?} bound={} success\",\n                        ty,\n-                       infcx.tcx.item_path_str(def_id));\n+                       infcx.tcx.def_path_str(def_id));\n                 true\n             }\n             Err(e) => {\n                 debug!(\"type_known_to_meet_bound_modulo_regions: ty={:?} bound={} errors={:?}\",\n                        ty,\n-                       infcx.tcx.item_path_str(def_id),\n+                       infcx.tcx.def_path_str(def_id),\n                        e);\n                 false\n             }"}, {"sha": "1c8ea5c7b9c5b0dd437301f536a24c15e19472f9", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=e0c75ff40def45bbf39bfed5766a1a8a56f2409f", "patch": "@@ -133,7 +133,7 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n                         hir::CRATE_HIR_ID,\n                         *span,\n                         &format!(\"the trait `{}` cannot be made into an object\",\n-                                 self.item_path_str(trait_def_id)),\n+                                 self.def_path_str(trait_def_id)),\n                         &violation.error_msg());\n                     false\n                 } else {"}, {"sha": "fc0058a1df5ffebc19bd4be54718ed7e5ef40d51", "filename": "src/librustc/traits/on_unimplemented.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs?ref=e0c75ff40def45bbf39bfed5766a1a8a56f2409f", "patch": "@@ -276,7 +276,7 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedFormatString {\n                   -> String\n     {\n         let name = tcx.item_name(trait_ref.def_id);\n-        let trait_str = tcx.item_path_str(trait_ref.def_id);\n+        let trait_str = tcx.def_path_str(trait_ref.def_id);\n         let generics = tcx.generics_of(trait_ref.def_id);\n         let generic_map = generics.params.iter().filter_map(|param| {\n             let value = match param.kind {"}, {"sha": "ab6acc662131b4663c57c06978cb2eeafa531ae2", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=e0c75ff40def45bbf39bfed5766a1a8a56f2409f", "patch": "@@ -1549,7 +1549,7 @@ fn assoc_ty_def<'cx, 'gcx, 'tcx>(\n         // should have failed in astconv.\n         bug!(\"No associated type `{}` for {}\",\n              assoc_ty_name,\n-             tcx.item_path_str(impl_def_id))\n+             tcx.def_path_str(impl_def_id))\n     }\n }\n "}, {"sha": "342a6204d7fe4a5b0aed6569d14f066cdcab6f8e", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=e0c75ff40def45bbf39bfed5766a1a8a56f2409f", "patch": "@@ -125,9 +125,9 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n             Traits(values) => ty::tls::with(|tcx| {\n                 report_maybe_different(f,\n                                        &format!(\"trait `{}`\",\n-                                                tcx.item_path_str(values.expected)),\n+                                                tcx.def_path_str(values.expected)),\n                                        &format!(\"trait `{}`\",\n-                                                tcx.item_path_str(values.found)))\n+                                                tcx.def_path_str(values.found)))\n             }),\n             IntMismatch(ref values) => {\n                 write!(f, \"expected `{:?}`, found `{:?}`\",\n@@ -146,8 +146,8 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n             }\n             ProjectionMismatched(ref values) => ty::tls::with(|tcx| {\n                 write!(f, \"expected {}, found {}\",\n-                       tcx.item_path_str(values.expected),\n-                       tcx.item_path_str(values.found))\n+                       tcx.def_path_str(values.expected),\n+                       tcx.def_path_str(values.found))\n             }),\n             ProjectionBoundsLength(ref values) => {\n                 write!(f, \"expected {} associated type bindings, found {}\",\n@@ -169,8 +169,8 @@ impl<'a, 'gcx, 'lcx, 'tcx> ty::TyS<'tcx> {\n             ty::Uint(_) | ty::Float(_) | ty::Str | ty::Never => self.to_string().into(),\n             ty::Tuple(ref tys) if tys.is_empty() => self.to_string().into(),\n \n-            ty::Adt(def, _) => format!(\"{} `{}`\", def.descr(), tcx.item_path_str(def.did)).into(),\n-            ty::Foreign(def_id) => format!(\"extern type `{}`\", tcx.item_path_str(def_id)).into(),\n+            ty::Adt(def, _) => format!(\"{} `{}`\", def.descr(), tcx.def_path_str(def.did)).into(),\n+            ty::Foreign(def_id) => format!(\"extern type `{}`\", tcx.def_path_str(def_id)).into(),\n             ty::Array(_, n) => match n {\n                 ty::LazyConst::Evaluated(n) => match n.assert_usize(tcx) {\n                     Some(n) => format!(\"array of {} elements\", n).into(),\n@@ -199,7 +199,7 @@ impl<'a, 'gcx, 'lcx, 'tcx> ty::TyS<'tcx> {\n             ty::FnPtr(_) => \"fn pointer\".into(),\n             ty::Dynamic(ref inner, ..) => {\n                 if let Some(principal) = inner.principal() {\n-                    format!(\"trait {}\", tcx.item_path_str(principal.def_id())).into()\n+                    format!(\"trait {}\", tcx.def_path_str(principal.def_id())).into()\n                 } else {\n                     \"trait\".into()\n                 }"}, {"sha": "9f34f475eff6b15ebf7bf87746eb1eeeca212f54", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=e0c75ff40def45bbf39bfed5766a1a8a56f2409f", "patch": "@@ -16,7 +16,7 @@ thread_local! {\n     static SHOULD_PREFIX_WITH_CRATE: Cell<bool> = Cell::new(false);\n }\n \n-/// Enforces that item_path_str always returns an absolute path and\n+/// Enforces that def_path_str always returns an absolute path and\n /// also enables \"type-based\" impl paths. This is used when building\n /// symbols that contain types, where we want the crate name to be\n /// part of the symbol.\n@@ -56,7 +56,7 @@ pub fn with_crate_prefix<F: FnOnce() -> R, R>(f: F) -> R {\n }\n \n impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n-    // HACK(eddyb) get rid of `item_path_str` and/or pass `Namespace` explicitly always\n+    // HACK(eddyb) get rid of `def_path_str` and/or pass `Namespace` explicitly always\n     // (but also some things just print a `DefId` generally so maybe we need this?)\n     fn guess_def_namespace(self, def_id: DefId) -> Namespace {\n         match self.def_key(def_id).disambiguated_data.data {\n@@ -76,52 +76,52 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     /// Returns a string identifying this `DefId`. This string is\n     /// suitable for user output. It is relative to the current crate\n     /// root, unless with_forced_absolute_paths was used.\n-    pub fn item_path_str_with_substs_and_ns(\n+    pub fn def_path_str_with_substs_and_ns(\n         self,\n         def_id: DefId,\n         substs: Option<SubstsRef<'tcx>>,\n         ns: Namespace,\n     ) -> String {\n-        debug!(\"item_path_str: def_id={:?}, substs={:?}, ns={:?}\", def_id, substs, ns);\n+        debug!(\"def_path_str: def_id={:?}, substs={:?}, ns={:?}\", def_id, substs, ns);\n         if FORCE_ABSOLUTE.with(|force| force.get()) {\n-            PrintCx::new(self, AbsolutePathPrinter).print_item_path(def_id, substs, ns)\n+            PrintCx::new(self, AbsolutePathPrinter).print_def_path(def_id, substs, ns)\n         } else {\n-            PrintCx::new(self, LocalPathPrinter).print_item_path(def_id, substs, ns)\n+            PrintCx::new(self, LocalPathPrinter).print_def_path(def_id, substs, ns)\n         }\n     }\n \n     /// Returns a string identifying this def-id. This string is\n     /// suitable for user output. It is relative to the current crate\n     /// root, unless with_forced_absolute_paths was used.\n-    pub fn item_path_str(self, def_id: DefId) -> String {\n+    pub fn def_path_str(self, def_id: DefId) -> String {\n         let ns = self.guess_def_namespace(def_id);\n-        self.item_path_str_with_substs_and_ns(def_id, None, ns)\n+        self.def_path_str_with_substs_and_ns(def_id, None, ns)\n     }\n \n     /// Returns a string identifying this local node-id.\n     pub fn node_path_str(self, id: ast::NodeId) -> String {\n-        self.item_path_str(self.hir().local_def_id(id))\n+        self.def_path_str(self.hir().local_def_id(id))\n     }\n \n     /// Returns a string identifying this def-id. This string is\n     /// suitable for user output. It always begins with a crate identifier.\n-    pub fn absolute_item_path_str(self, def_id: DefId) -> String {\n-        debug!(\"absolute_item_path_str: def_id={:?}\", def_id);\n+    pub fn absolute_def_path_str(self, def_id: DefId) -> String {\n+        debug!(\"absolute_def_path_str: def_id={:?}\", def_id);\n         let ns = self.guess_def_namespace(def_id);\n-        PrintCx::new(self, AbsolutePathPrinter).print_item_path(def_id, None, ns)\n+        PrintCx::new(self, AbsolutePathPrinter).print_def_path(def_id, None, ns)\n     }\n }\n \n impl<P: ItemPathPrinter> PrintCx<'a, 'gcx, 'tcx, P> {\n-    pub fn default_print_item_path(\n+    pub fn default_print_def_path(\n         &mut self,\n         def_id: DefId,\n         substs: Option<SubstsRef<'tcx>>,\n         ns: Namespace,\n     ) -> P::Path {\n-        debug!(\"default_print_item_path: def_id={:?}, substs={:?}, ns={:?}\", def_id, substs, ns);\n+        debug!(\"default_print_def_path: def_id={:?}, substs={:?}, ns={:?}\", def_id, substs, ns);\n         let key = self.tcx.def_key(def_id);\n-        debug!(\"default_print_item_path: key={:?}\", key);\n+        debug!(\"default_print_def_path: key={:?}\", key);\n         match key.disambiguated_data.data {\n             DefPathData::CrateRoot => {\n                 assert!(key.parent.is_none());\n@@ -155,13 +155,13 @@ impl<P: ItemPathPrinter> PrintCx<'a, 'gcx, 'tcx, P> {\n             data @ DefPathData::ImplTrait |\n             data @ DefPathData::GlobalMetaData(..) => {\n                 let parent_did = self.tcx.parent(def_id).unwrap();\n-                let path = self.print_item_path(parent_did, None, ns);\n+                let path = self.print_def_path(parent_did, None, ns);\n                 self.path_append(path, &data.as_interned_str().as_symbol().as_str())\n             },\n \n             DefPathData::StructCtor => { // present `X` instead of `X::{{constructor}}`\n                 let parent_def_id = self.tcx.parent(def_id).unwrap();\n-                self.print_item_path(parent_def_id, substs, ns)\n+                self.print_def_path(parent_def_id, substs, ns)\n             }\n         }\n     }\n@@ -202,7 +202,7 @@ impl<P: ItemPathPrinter> PrintCx<'a, 'gcx, 'tcx, P> {\n             // If the impl is not co-located with either self-type or\n             // trait-type, then fallback to a format that identifies\n             // the module more clearly.\n-            let path = self.print_item_path(parent_def_id, None, ns);\n+            let path = self.print_def_path(parent_def_id, None, ns);\n             if let Some(trait_ref) = impl_trait_ref {\n                 return self.path_append(path, &format!(\"<impl {} for {}>\", trait_ref, self_ty));\n             } else {\n@@ -224,13 +224,13 @@ impl<P: ItemPathPrinter> PrintCx<'a, 'gcx, 'tcx, P> {\n         match self_ty.sty {\n             ty::Adt(adt_def, substs) => {\n                 // FIXME(eddyb) this should recurse to build the path piecewise.\n-                // self.print_item_path(adt_def.did, Some(substs), ns)\n+                // self.print_def_path(adt_def.did, Some(substs), ns)\n                 let mut s = String::new();\n                 crate::util::ppaux::parameterized(&mut s, adt_def.did, substs, ns).unwrap();\n                 self.path_impl(&s)\n             }\n \n-            ty::Foreign(did) => self.print_item_path(did, None, ns),\n+            ty::Foreign(did) => self.print_def_path(did, None, ns),\n \n             ty::Bool |\n             ty::Char |\n@@ -301,13 +301,13 @@ pub fn characteristic_def_id_of_type(ty: Ty<'_>) -> Option<DefId> {\n pub trait ItemPathPrinter: Sized {\n     type Path;\n \n-    fn print_item_path(\n+    fn print_def_path(\n         self: &mut PrintCx<'_, '_, 'tcx, Self>,\n         def_id: DefId,\n         substs: Option<SubstsRef<'tcx>>,\n         ns: Namespace,\n     ) -> Self::Path {\n-        self.default_print_item_path(def_id, substs, ns)\n+        self.default_print_def_path(def_id, substs, ns)\n     }\n     fn print_impl_path(\n         self: &mut PrintCx<'_, '_, 'tcx, Self>,\n@@ -357,12 +357,12 @@ impl LocalPathPrinter {\n     /// If possible, this returns a global path resolving to `def_id` that is visible\n     /// from at least one local module and returns true. If the crate defining `def_id` is\n     /// declared with an `extern crate`, the path is guaranteed to use the `extern crate`.\n-    fn try_print_visible_item_path(\n+    fn try_print_visible_def_path(\n         self: &mut PrintCx<'_, '_, '_, Self>,\n         def_id: DefId,\n         ns: Namespace,\n     ) -> Option<<Self as ItemPathPrinter>::Path> {\n-        debug!(\"try_print_visible_item_path: def_id={:?}\", def_id);\n+        debug!(\"try_print_visible_def_path: def_id={:?}\", def_id);\n \n         // If `def_id` is a direct or injected extern crate, return the\n         // path to the crate followed by the path to the item within the crate.\n@@ -390,9 +390,9 @@ impl LocalPathPrinter {\n                     span,\n                     ..\n                 }) => {\n-                    debug!(\"try_print_visible_item_path: def_id={:?}\", def_id);\n+                    debug!(\"try_print_visible_def_path: def_id={:?}\", def_id);\n                     let path = if !span.is_dummy() {\n-                        self.print_item_path(def_id, None, ns)\n+                        self.print_def_path(def_id, None, ns)\n                     } else {\n                         self.path_crate(cnum)\n                     };\n@@ -412,7 +412,7 @@ impl LocalPathPrinter {\n         let visible_parent_map = self.tcx.visible_parent_map(LOCAL_CRATE);\n \n         let mut cur_def_key = self.tcx.def_key(def_id);\n-        debug!(\"try_print_visible_item_path: cur_def_key={:?}\", cur_def_key);\n+        debug!(\"try_print_visible_def_path: cur_def_key={:?}\", cur_def_key);\n \n         // For a UnitStruct or TupleStruct we want the name of its parent rather than <unnamed>.\n         if let DefPathData::StructCtor = cur_def_key.disambiguated_data.data {\n@@ -425,12 +425,12 @@ impl LocalPathPrinter {\n         }\n \n         let visible_parent = visible_parent_map.get(&def_id).cloned()?;\n-        let path = self.try_print_visible_item_path(visible_parent, ns)?;\n+        let path = self.try_print_visible_def_path(visible_parent, ns)?;\n         let actual_parent = self.tcx.parent(def_id);\n \n         let data = cur_def_key.disambiguated_data.data;\n         debug!(\n-            \"try_print_visible_item_path: data={:?} visible_parent={:?} actual_parent={:?}\",\n+            \"try_print_visible_def_path: data={:?} visible_parent={:?} actual_parent={:?}\",\n             data, visible_parent, actual_parent,\n         );\n \n@@ -485,22 +485,22 @@ impl LocalPathPrinter {\n                 })\n             },\n         };\n-        debug!(\"try_print_visible_item_path: symbol={:?}\", symbol);\n+        debug!(\"try_print_visible_def_path: symbol={:?}\", symbol);\n         Some(self.path_append(path, &symbol))\n     }\n }\n \n impl ItemPathPrinter for LocalPathPrinter {\n     type Path = String;\n \n-    fn print_item_path(\n+    fn print_def_path(\n         self: &mut PrintCx<'_, '_, 'tcx, Self>,\n         def_id: DefId,\n         substs: Option<SubstsRef<'tcx>>,\n         ns: Namespace,\n     ) -> Self::Path {\n-        self.try_print_visible_item_path(def_id, ns)\n-            .unwrap_or_else(|| self.default_print_item_path(def_id, substs, ns))\n+        self.try_print_visible_def_path(def_id, ns)\n+            .unwrap_or_else(|| self.default_print_def_path(def_id, substs, ns))\n     }\n     fn print_impl_path(\n         self: &mut PrintCx<'_, '_, 'tcx, Self>,\n@@ -522,7 +522,7 @@ impl ItemPathPrinter for LocalPathPrinter {\n             // only occur very early in the compiler pipeline.\n             // FIXME(eddyb) this should just be using `tcx.def_span(impl_def_id)`\n             let parent_def_id = self.tcx.parent(impl_def_id).unwrap();\n-            let path = self.print_item_path(parent_def_id, None, ns);\n+            let path = self.print_def_path(parent_def_id, None, ns);\n             let span = self.tcx.def_span(impl_def_id);\n             return self.path_append(path, &format!(\"<impl at {:?}>\", span));\n         }"}, {"sha": "4f933bf0d538dfbb6fa3211d81bf7c04611b408f", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=e0c75ff40def45bbf39bfed5766a1a8a56f2409f", "patch": "@@ -2056,7 +2056,7 @@ impl ReprOptions {\n         }\n \n         // This is here instead of layout because the choice must make it into metadata.\n-        if !tcx.consider_optimizing(|| format!(\"Reorder fields of {:?}\", tcx.item_path_str(did))) {\n+        if !tcx.consider_optimizing(|| format!(\"Reorder fields of {:?}\", tcx.def_path_str(did))) {\n             flags.insert(ReprFlags::IS_LINEAR);\n         }\n         ReprOptions { int: size, align: max_align, pack: min_pack, flags: flags }"}, {"sha": "395b288df141e11410998d712d061e22ed730053", "filename": "src/librustc/ty/query/config.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs?ref=e0c75ff40def45bbf39bfed5766a1a8a56f2409f", "patch": "@@ -71,7 +71,7 @@ pub(super) trait QueryDescription<'tcx>: QueryAccessors<'tcx> {\n impl<'tcx, M: QueryAccessors<'tcx, Key=DefId>> QueryDescription<'tcx> for M {\n     default fn describe(tcx: TyCtxt<'_, '_, '_>, def_id: DefId) -> Cow<'static, str> {\n         if !tcx.sess.verbose() {\n-            format!(\"processing `{}`\", tcx.item_path_str(def_id)).into()\n+            format!(\"processing `{}`\", tcx.def_path_str(def_id)).into()\n         } else {\n             let name = unsafe { ::std::intrinsics::type_name::<M>() };\n             format!(\"processing {:?} with query `{}`\", def_id, name).into()\n@@ -301,7 +301,7 @@ impl<'tcx> QueryDescription<'tcx> for queries::layout_raw<'tcx> {\n impl<'tcx> QueryDescription<'tcx> for queries::super_predicates_of<'tcx> {\n     fn describe(tcx: TyCtxt<'_, '_, '_>, def_id: DefId) -> Cow<'static, str> {\n         format!(\"computing the supertraits of `{}`\",\n-                tcx.item_path_str(def_id)).into()\n+                tcx.def_path_str(def_id)).into()\n     }\n }\n \n@@ -322,7 +322,7 @@ impl<'tcx> QueryDescription<'tcx> for queries::type_param_predicates<'tcx> {\n impl<'tcx> QueryDescription<'tcx> for queries::coherent_trait<'tcx> {\n     fn describe(tcx: TyCtxt<'_, '_, '_>, def_id: DefId) -> Cow<'static, str> {\n         format!(\"coherence checking all impls of trait `{}`\",\n-                tcx.item_path_str(def_id)).into()\n+                tcx.def_path_str(def_id)).into()\n     }\n }\n \n@@ -359,7 +359,7 @@ impl<'tcx> QueryDescription<'tcx> for queries::inferred_outlives_crate<'tcx> {\n impl<'tcx> QueryDescription<'tcx> for queries::mir_shims<'tcx> {\n     fn describe(tcx: TyCtxt<'_, '_, '_>, def: ty::InstanceDef<'tcx>) -> Cow<'static, str> {\n         format!(\"generating MIR shim for `{}`\",\n-                tcx.item_path_str(def.def_id())).into()\n+                tcx.def_path_str(def.def_id())).into()\n     }\n }\n \n@@ -394,7 +394,7 @@ impl<'tcx> QueryDescription<'tcx> for queries::const_eval<'tcx> {\n     ) -> Cow<'static, str> {\n         format!(\n             \"const-evaluating + checking `{}`\",\n-            tcx.item_path_str(key.value.instance.def.def_id()),\n+            tcx.def_path_str(key.value.instance.def.def_id()),\n         ).into()\n     }\n \n@@ -415,7 +415,7 @@ impl<'tcx> QueryDescription<'tcx> for queries::const_eval_raw<'tcx> {\n     fn describe(tcx: TyCtxt<'_, '_, '_>, key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>)\n         -> Cow<'static, str>\n     {\n-        format!(\"const-evaluating `{}`\", tcx.item_path_str(key.value.instance.def.def_id())).into()\n+        format!(\"const-evaluating `{}`\", tcx.def_path_str(key.value.instance.def.def_id())).into()\n     }\n \n     #[inline]\n@@ -513,7 +513,7 @@ impl<'tcx> QueryDescription<'tcx> for queries::trait_of_item<'tcx> {\n impl<'tcx> QueryDescription<'tcx> for queries::const_is_rvalue_promotable_to_static<'tcx> {\n     fn describe(tcx: TyCtxt<'_, '_, '_>, def_id: DefId) -> Cow<'static, str> {\n         format!(\"const checking if rvalue is promotable to static `{}`\",\n-            tcx.item_path_str(def_id)).into()\n+            tcx.def_path_str(def_id)).into()\n     }\n \n     #[inline]\n@@ -532,21 +532,21 @@ impl<'tcx> QueryDescription<'tcx> for queries::const_is_rvalue_promotable_to_sta\n impl<'tcx> QueryDescription<'tcx> for queries::rvalue_promotable_map<'tcx> {\n     fn describe(tcx: TyCtxt<'_, '_, '_>, def_id: DefId) -> Cow<'static, str> {\n         format!(\"checking which parts of `{}` are promotable to static\",\n-                tcx.item_path_str(def_id)).into()\n+                tcx.def_path_str(def_id)).into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::is_mir_available<'tcx> {\n     fn describe(tcx: TyCtxt<'_, '_, '_>, def_id: DefId) -> Cow<'static, str> {\n         format!(\"checking if item is mir available: `{}`\",\n-                tcx.item_path_str(def_id)).into()\n+                tcx.def_path_str(def_id)).into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::codegen_fulfill_obligation<'tcx> {\n     fn describe(tcx: TyCtxt<'_, '_, '_>,\n                 key: (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>)) -> Cow<'static, str> {\n-        format!(\"checking if `{}` fulfills its obligations\", tcx.item_path_str(key.1.def_id()))\n+        format!(\"checking if `{}` fulfills its obligations\", tcx.def_path_str(key.1.def_id()))\n             .into()\n     }\n \n@@ -565,19 +565,19 @@ impl<'tcx> QueryDescription<'tcx> for queries::codegen_fulfill_obligation<'tcx>\n \n impl<'tcx> QueryDescription<'tcx> for queries::trait_impls_of<'tcx> {\n     fn describe(tcx: TyCtxt<'_, '_, '_>, def_id: DefId) -> Cow<'static, str> {\n-        format!(\"trait impls of `{}`\", tcx.item_path_str(def_id)).into()\n+        format!(\"trait impls of `{}`\", tcx.def_path_str(def_id)).into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::is_object_safe<'tcx> {\n     fn describe(tcx: TyCtxt<'_, '_, '_>, def_id: DefId) -> Cow<'static, str> {\n-        format!(\"determine object safety of trait `{}`\", tcx.item_path_str(def_id)).into()\n+        format!(\"determine object safety of trait `{}`\", tcx.def_path_str(def_id)).into()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::is_const_fn_raw<'tcx> {\n     fn describe(tcx: TyCtxt<'_, '_, '_>, def_id: DefId) -> Cow<'static, str> {\n-        format!(\"checking if item is const fn: `{}`\", tcx.item_path_str(def_id)).into()\n+        format!(\"checking if item is const fn: `{}`\", tcx.def_path_str(def_id)).into()\n     }\n }\n \n@@ -883,7 +883,7 @@ impl<'tcx> QueryDescription<'tcx> for queries::output_filenames<'tcx> {\n \n impl<'tcx> QueryDescription<'tcx> for queries::vtable_methods<'tcx> {\n     fn describe(tcx: TyCtxt<'_, '_, '_>, key: ty::PolyTraitRef<'tcx> ) -> Cow<'static, str> {\n-        format!(\"finding all methods for trait {}\", tcx.item_path_str(key.def_id())).into()\n+        format!(\"finding all methods for trait {}\", tcx.def_path_str(key.def_id())).into()\n     }\n }\n \n@@ -927,7 +927,7 @@ impl<'tcx> QueryDescription<'tcx> for queries::optimized_mir<'tcx> {\n \n impl<'tcx> QueryDescription<'tcx> for queries::substitute_normalize_and_test_predicates<'tcx> {\n     fn describe(tcx: TyCtxt<'_, '_, '_>, key: (DefId, SubstsRef<'tcx>)) -> Cow<'static, str> {\n-        format!(\"testing substituted normalized predicates:`{}`\", tcx.item_path_str(key.0)).into()\n+        format!(\"testing substituted normalized predicates:`{}`\", tcx.def_path_str(key.0)).into()\n     }\n }\n \n@@ -945,7 +945,7 @@ impl<'tcx> QueryDescription<'tcx> for queries::target_features_whitelist<'tcx> {\n \n impl<'tcx> QueryDescription<'tcx> for queries::instance_def_size_estimate<'tcx> {\n     fn describe(tcx: TyCtxt<'_, '_, '_>, def: ty::InstanceDef<'tcx>) -> Cow<'static, str> {\n-        format!(\"estimating size for `{}`\", tcx.item_path_str(def.def_id())).into()\n+        format!(\"estimating size for `{}`\", tcx.def_path_str(def.def_id())).into()\n     }\n }\n "}, {"sha": "cf92ab2f2ff4791885e493541e79766d42fd1163", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=e0c75ff40def45bbf39bfed5766a1a8a56f2409f", "patch": "@@ -320,7 +320,7 @@ impl<F: fmt::Write> PrintCx<'a, 'gcx, 'tcx, FmtPrinter<F>> {\n             // FIXME(eddyb) recurse through printing a path via `self`, instead\n             // instead of using the `tcx` method that produces a `String`.\n             print!(self, write(\"{}\",\n-                self.tcx.item_path_str_with_substs_and_ns(def_id, Some(substs), ns)))?;\n+                self.tcx.def_path_str_with_substs_and_ns(def_id, Some(substs), ns)))?;\n \n             // For impls, the above call already prints relevant generics args.\n             if let DefPathData::Impl = key.disambiguated_data.data {\n@@ -515,7 +515,7 @@ define_print! {\n                     if let Tuple(ref args) = principal.substs.type_at(0).sty {\n                         let mut projections = self.projection_bounds();\n                         if let (Some(proj), None) = (projections.next(), projections.next()) {\n-                            print!(cx, write(\"{}\", cx.tcx.item_path_str(principal.def_id)))?;\n+                            print!(cx, write(\"{}\", cx.tcx.def_path_str(principal.def_id)))?;\n                             cx.fn_sig(args, false, proj.ty)?;\n                             resugared_principal = true;\n                         }\n@@ -538,7 +538,7 @@ define_print! {\n \n             // Builtin bounds.\n             let mut auto_traits: Vec<_> = self.auto_traits().map(|did| {\n-                cx.tcx.item_path_str(did)\n+                cx.tcx.def_path_str(did)\n             }).collect();\n \n             // The auto traits come ordered by `DefPathHash`. While\n@@ -582,15 +582,15 @@ impl fmt::Debug for ty::GenericParamDef {\n impl fmt::Debug for ty::TraitDef {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         PrintCx::with(FmtPrinter { fmt: f }, |cx| {\n-            print!(cx, write(\"{}\", cx.tcx.item_path_str(self.def_id)))\n+            print!(cx, write(\"{}\", cx.tcx.def_path_str(self.def_id)))\n         })\n     }\n }\n \n impl fmt::Debug for ty::AdtDef {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         PrintCx::with(FmtPrinter { fmt: f }, |cx| {\n-            print!(cx, write(\"{}\", cx.tcx.item_path_str(self.did)))\n+            print!(cx, write(\"{}\", cx.tcx.def_path_str(self.did)))\n         })\n     }\n }\n@@ -1513,11 +1513,11 @@ define_print! {\n                 ty::Predicate::WellFormed(ty) => print!(cx, print(ty), write(\" well-formed\")),\n                 ty::Predicate::ObjectSafe(trait_def_id) => {\n                     print!(cx, write(\"the trait `{}` is object-safe\",\n-                        cx.tcx.item_path_str(trait_def_id)))\n+                        cx.tcx.def_path_str(trait_def_id)))\n                 }\n                 ty::Predicate::ClosureKind(closure_def_id, _closure_substs, kind) => {\n                     print!(cx, write(\"the closure `{}` implements the trait `{}`\",\n-                           cx.tcx.item_path_str(closure_def_id), kind))\n+                           cx.tcx.def_path_str(closure_def_id), kind))\n                 }\n                 ty::Predicate::ConstEvaluatable(def_id, substs) => {\n                     print!(cx, write(\"the constant `\"))?;"}, {"sha": "01bfe5d5af70697e5bb902df86122675247c5565", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=e0c75ff40def45bbf39bfed5766a1a8a56f2409f", "patch": "@@ -1406,7 +1406,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                 out.push('(');\n                 self.append_loan_path_to_string(&lp_base, out);\n                 out.push_str(DOWNCAST_PRINTED_OPERATOR);\n-                out.push_str(&self.tcx.item_path_str(variant_def_id));\n+                out.push_str(&self.tcx.def_path_str(variant_def_id));\n                 out.push(')');\n             }\n \n@@ -1443,7 +1443,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                 out.push('(');\n                 self.append_autoderefd_loan_path_to_string(&lp_base, out);\n                 out.push_str(DOWNCAST_PRINTED_OPERATOR);\n-                out.push_str(&self.tcx.item_path_str(variant_def_id));\n+                out.push_str(&self.tcx.def_path_str(variant_def_id));\n                 out.push(')');\n             }\n \n@@ -1523,7 +1523,7 @@ impl<'tcx> fmt::Debug for LoanPath<'tcx> {\n \n             LpDowncast(ref lp, variant_def_id) => {\n                 let variant_str = if variant_def_id.is_local() {\n-                    ty::tls::with(|tcx| tcx.item_path_str(variant_def_id))\n+                    ty::tls::with(|tcx| tcx.def_path_str(variant_def_id))\n                 } else {\n                     format!(\"{:?}\", variant_def_id)\n                 };\n@@ -1558,7 +1558,7 @@ impl<'tcx> fmt::Display for LoanPath<'tcx> {\n \n             LpDowncast(ref lp, variant_def_id) => {\n                 let variant_str = if variant_def_id.is_local() {\n-                    ty::tls::with(|tcx| tcx.item_path_str(variant_def_id))\n+                    ty::tls::with(|tcx| tcx.def_path_str(variant_def_id))\n                 } else {\n                     format!(\"{:?}\", variant_def_id)\n                 };"}, {"sha": "1417cbf12655801acf7f4921c6f639cd8b1dc591", "filename": "src/librustc_codegen_utils/symbol_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs?ref=e0c75ff40def45bbf39bfed5766a1a8a56f2409f", "patch": "@@ -227,7 +227,7 @@ fn get_symbol_hash<'a, 'tcx>(\n fn def_symbol_name<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> ty::SymbolName {\n     item_path::with_forced_absolute_paths(|| {\n         PrintCx::new(tcx, SymbolPathPrinter)\n-            .print_item_path(def_id, None, Namespace::ValueNS)\n+            .print_def_path(def_id, None, Namespace::ValueNS)\n             .into_interned()\n     })\n }"}, {"sha": "6a2b6f1321b88a9420fed6add0f5e1965b7686d1", "filename": "src/librustc_codegen_utils/symbol_names_test.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc_codegen_utils%2Fsymbol_names_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc_codegen_utils%2Fsymbol_names_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names_test.rs?ref=e0c75ff40def45bbf39bfed5766a1a8a56f2409f", "patch": "@@ -1,7 +1,7 @@\n //! Walks the crate looking for items/impl-items/trait-items that have\n-//! either a `rustc_symbol_name` or `rustc_item_path` attribute and\n+//! either a `rustc_symbol_name` or `rustc_def_path` attribute and\n //! generates an error giving, respectively, the symbol name or\n-//! item-path. This is used for unit testing the code that generates\n+//! def-path. This is used for unit testing the code that generates\n //! paths etc in all kinds of annoying scenarios.\n \n use rustc::hir;\n@@ -10,7 +10,7 @@ use rustc::ty::TyCtxt;\n use rustc_mir::monomorphize::Instance;\n \n const SYMBOL_NAME: &'static str = \"rustc_symbol_name\";\n-const ITEM_PATH: &'static str = \"rustc_item_path\";\n+const DEF_PATH: &'static str = \"rustc_def_path\";\n \n pub fn report_symbol_names<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     // if the `rustc_attrs` feature is not enabled, then the\n@@ -41,9 +41,9 @@ impl<'a, 'tcx> SymbolNamesTest<'a, 'tcx> {\n                 let instance = Instance::mono(tcx, def_id);\n                 let name = self.tcx.symbol_name(instance);\n                 tcx.sess.span_err(attr.span, &format!(\"symbol-name({})\", name));\n-            } else if attr.check_name(ITEM_PATH) {\n-                let path = tcx.item_path_str(def_id);\n-                tcx.sess.span_err(attr.span, &format!(\"item-path({})\", path));\n+            } else if attr.check_name(DEF_PATH) {\n+                let path = tcx.def_path_str(def_id);\n+                tcx.sess.span_err(attr.span, &format!(\"def-path({})\", path));\n             }\n \n             // (*) The formatting of `tag({})` is chosen so that tests can elect"}, {"sha": "9fe9a60b9aaa97885d12779d62c1019b23347d49", "filename": "src/librustc_incremental/assert_dep_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_dep_graph.rs?ref=e0c75ff40def45bbf39bfed5766a1a8a56f2409f", "patch": "@@ -206,7 +206,7 @@ fn check_paths<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 tcx.sess.span_err(\n                     target_span,\n                     &format!(\"no path from `{}` to `{}`\",\n-                             tcx.item_path_str(source_def_id),\n+                             tcx.def_path_str(source_def_id),\n                              target_pass));\n             } else {\n                 tcx.sess.span_err("}, {"sha": "633e61a0034ab075c7a179edbb11143ccc2db429", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=e0c75ff40def45bbf39bfed5766a1a8a56f2409f", "patch": "@@ -463,7 +463,7 @@ impl<'a, 'tcx> DirtyCleanVisitor<'a, 'tcx> {\n         if let Some(def_id) = dep_node.extract_def_id(self.tcx) {\n             format!(\"{:?}({})\",\n                     dep_node.kind,\n-                    self.tcx.item_path_str(def_id))\n+                    self.tcx.def_path_str(def_id))\n         } else {\n             format!(\"{:?}({:?})\", dep_node.kind, dep_node.hash)\n         }"}, {"sha": "7d61547527f76d6f8953652963b6720c311b8237", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=e0c75ff40def45bbf39bfed5766a1a8a56f2409f", "patch": "@@ -182,7 +182,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n             for attr in cx.tcx.get_attrs(def_id).iter() {\n                 if attr.check_name(\"must_use\") {\n                     let msg = format!(\"unused {}`{}`{} that must be used\",\n-                        descr_pre_path, cx.tcx.item_path_str(def_id), descr_post_path);\n+                        descr_pre_path, cx.tcx.def_path_str(def_id), descr_post_path);\n                     let mut err = cx.struct_span_lint(UNUSED_MUST_USE, sp, &msg);\n                     // check for #[must_use = \"...\"]\n                     if let Some(note) = attr.value_str() {"}, {"sha": "0f0811b562ea3a8aa5198e56ad7fa0c2104748d1", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=e0c75ff40def45bbf39bfed5766a1a8a56f2409f", "patch": "@@ -68,7 +68,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n \n fn mir_borrowck<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> BorrowCheckResult<'tcx> {\n     let input_mir = tcx.mir_validated(def_id);\n-    debug!(\"run query mir_borrowck: {}\", tcx.item_path_str(def_id));\n+    debug!(\"run query mir_borrowck: {}\", tcx.def_path_str(def_id));\n \n     let mut return_early;\n "}, {"sha": "dfa5af444d37ec76be09ddd0b2dd3ea3f5f42b65", "filename": "src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs?ref=e0c75ff40def45bbf39bfed5766a1a8a56f2409f", "patch": "@@ -93,7 +93,7 @@ impl BorrowExplanation {\n                     // simplify output by reporting just the ADT name.\n                     ty::Adt(adt, _substs) if adt.has_dtor(tcx) && !adt.is_box() => (\n                         \"`Drop` code\",\n-                        format!(\"type `{}`\", tcx.item_path_str(adt.did)),\n+                        format!(\"type `{}`\", tcx.def_path_str(adt.did)),\n                     ),\n \n                     // Otherwise, just report the whole type (and use"}, {"sha": "e6005142b85ef80aaa884f01b99ee7e069f6f98d", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=e0c75ff40def45bbf39bfed5766a1a8a56f2409f", "patch": "@@ -142,7 +142,7 @@ fn eval_body_using_ecx<'mir, 'tcx>(\n     assert!(!layout.is_unsized());\n     let ret = ecx.allocate(layout, MemoryKind::Stack);\n \n-    let name = ty::tls::with(|tcx| tcx.item_path_str(cid.instance.def_id()));\n+    let name = ty::tls::with(|tcx| tcx.def_path_str(cid.instance.def_id()));\n     let prom = cid.promoted.map_or(String::new(), |p| format!(\"::promoted[{:?}]\", p));\n     trace!(\"eval_body_using_ecx: pushing stack frame for global: {}{}\", name, prom);\n     assert!(mir.arg_count == 0);"}, {"sha": "49967df08891b3c4f77d372e2d7dd635ef27606f", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=e0c75ff40def45bbf39bfed5766a1a8a56f2409f", "patch": "@@ -319,7 +319,7 @@ fn check_for_bindings_named_same_as_variants(cx: &MatchVisitor<'_, '_>, pat: &Pa\n                     if edef.is_enum() && edef.variants.iter().any(|variant| {\n                         variant.ident == ident && variant.ctor_kind == CtorKind::Const\n                     }) {\n-                        let ty_path = cx.tcx.item_path_str(edef.did);\n+                        let ty_path = cx.tcx.def_path_str(edef.did);\n                         let mut err = struct_span_warn!(cx.tcx.sess, p.span, E0170,\n                             \"pattern binding `{}` is named the same as one \\\n                             of the variants of the type `{}`\","}, {"sha": "ad7b45d89453acb390b794ac8d314286d0f1db89", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=e0c75ff40def45bbf39bfed5766a1a8a56f2409f", "patch": "@@ -969,8 +969,8 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n             ty::Adt(adt_def, _) if !self.tcx.has_attr(adt_def.did, \"structural_match\") => {\n                 let msg = format!(\"to use a constant of type `{}` in a pattern, \\\n                                     `{}` must be annotated with `#[derive(PartialEq, Eq)]`\",\n-                                    self.tcx.item_path_str(adt_def.did),\n-                                    self.tcx.item_path_str(adt_def.did));\n+                                    self.tcx.def_path_str(adt_def.did),\n+                                    self.tcx.def_path_str(adt_def.did));\n                 self.tcx.sess.span_err(span, &msg);\n                 PatternKind::Wild\n             }"}, {"sha": "d92ab0c517956b65ae89a51676c39555db1160f6", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=e0c75ff40def45bbf39bfed5766a1a8a56f2409f", "patch": "@@ -283,7 +283,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n             ty::InstanceDef::Item(def_id) => if self.tcx.is_mir_available(did) {\n                 Ok(self.tcx.optimized_mir(did))\n             } else {\n-                err!(NoMirFor(self.tcx.item_path_str(def_id)))\n+                err!(NoMirFor(self.tcx.def_path_str(def_id)))\n             },\n             _ => Ok(self.tcx.instance_mir(instance)),\n         }"}, {"sha": "001a61959c2dd75caf3a97626b38c475e6dfa211", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=e0c75ff40def45bbf39bfed5766a1a8a56f2409f", "patch": "@@ -1253,7 +1253,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n                                     if !self.span.allows_unstable(&feature.as_str()) {\n                                         let mut err = self.tcx.sess.struct_span_err(self.span,\n                                             &format!(\"`{}` is not yet stable as a const fn\",\n-                                                    self.tcx.item_path_str(def_id)));\n+                                                    self.tcx.def_path_str(def_id)));\n                                         if nightly_options::is_nightly_build() {\n                                             help!(&mut err,\n                                                   \"add `#![feature({})]` to the \\"}, {"sha": "f9f8abbe6c06519874cea41b4ae164dda1431480", "filename": "src/librustc_mir/transform/rustc_peek.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs?ref=e0c75ff40def45bbf39bfed5766a1a8a56f2409f", "patch": "@@ -29,10 +29,10 @@ impl MirPass for SanityCheck {\n         let def_id = src.def_id();\n         let id = tcx.hir().as_local_hir_id(def_id).unwrap();\n         if !tcx.has_attr(def_id, \"rustc_mir\") {\n-            debug!(\"skipping rustc_peek::SanityCheck on {}\", tcx.item_path_str(def_id));\n+            debug!(\"skipping rustc_peek::SanityCheck on {}\", tcx.def_path_str(def_id));\n             return;\n         } else {\n-            debug!(\"running rustc_peek::SanityCheck on {}\", tcx.item_path_str(def_id));\n+            debug!(\"running rustc_peek::SanityCheck on {}\", tcx.def_path_str(def_id));\n         }\n \n         let attributes = tcx.get_attrs(def_id);"}, {"sha": "69a2adcfce026e2587e2392af894103ed707acae", "filename": "src/librustc_mir/util/graphviz.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs?ref=e0c75ff40def45bbf39bfed5766a1a8a56f2409f", "patch": "@@ -127,7 +127,7 @@ fn write_graph_label<'a, 'gcx, 'tcx, W: Write>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                                                mir: &Mir<'_>,\n                                                w: &mut W)\n                                                -> io::Result<()> {\n-    write!(w, \"    label=<fn {}(\", dot::escape_html(&tcx.item_path_str(def_id)))?;\n+    write!(w, \"    label=<fn {}(\", dot::escape_html(&tcx.def_path_str(def_id)))?;\n \n     // fn argument types.\n     for (i, arg) in mir.args_iter().enumerate() {"}, {"sha": "200089530c1528d05fc3bd4ed4840f52065a06ea", "filename": "src/librustc_mir/util/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fliveness.rs?ref=e0c75ff40def45bbf39bfed5766a1a8a56f2409f", "patch": "@@ -267,7 +267,7 @@ pub fn dump_mir<'a, 'tcx>(\n     }\n     let node_path = item_path::with_forced_impl_filename_line(|| {\n         // see notes on #41697 below\n-        tcx.item_path_str(source.def_id())\n+        tcx.def_path_str(source.def_id())\n     });\n     dump_matched_mir_node(tcx, pass_name, &node_path, source, mir, result);\n }"}, {"sha": "12d4e90c7c002fbce651861aa6f7e918d00ec622", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=e0c75ff40def45bbf39bfed5766a1a8a56f2409f", "patch": "@@ -80,7 +80,7 @@ pub fn dump_mir<'a, 'gcx, 'tcx, F>(\n \n     let node_path = item_path::with_forced_impl_filename_line(|| {\n         // see notes on #41697 below\n-        tcx.item_path_str(source.def_id())\n+        tcx.def_path_str(source.def_id())\n     });\n     dump_matched_mir_node(\n         tcx,\n@@ -105,7 +105,7 @@ pub fn dump_enabled<'a, 'gcx, 'tcx>(\n     };\n     let node_path = item_path::with_forced_impl_filename_line(|| {\n         // see notes on #41697 below\n-        tcx.item_path_str(source.def_id())\n+        tcx.def_path_str(source.def_id())\n     });\n     filters.split('|').any(|or_filter| {\n         or_filter.split('&').all(|and_filter| {\n@@ -115,7 +115,7 @@ pub fn dump_enabled<'a, 'gcx, 'tcx>(\n }\n \n // #41697 -- we use `with_forced_impl_filename_line()` because\n-// `item_path_str()` would otherwise trigger `type_of`, and this can\n+// `def_path_str()` would otherwise trigger `type_of`, and this can\n // run while we are already attempting to evaluate `type_of`.\n \n fn dump_matched_mir_node<'a, 'gcx, 'tcx, F>(\n@@ -614,7 +614,7 @@ fn write_mir_sig(\n \n     item_path::with_forced_impl_filename_line(|| {\n         // see notes on #41697 elsewhere\n-        write!(w, \"{}\", tcx.item_path_str(src.def_id()))\n+        write!(w, \" {}\", tcx.def_path_str(src.def_id()))\n     })?;\n \n     if src.promoted.is_none() && is_function {"}, {"sha": "5065c1de97bee27b7c860198b4ef4efe896246d8", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=e0c75ff40def45bbf39bfed5766a1a8a56f2409f", "patch": "@@ -816,7 +816,7 @@ impl<'a, 'tcx> NamePrivacyVisitor<'a, 'tcx> {\n         let def_id = self.tcx.adjust_ident(ident, def.did, current_hir).1;\n         if !def.is_enum() && !field.vis.is_accessible_from(def_id, self.tcx) {\n             struct_span_err!(self.tcx.sess, span, E0451, \"field `{}` of {} `{}` is private\",\n-                             field.ident, def.variant_descr(), self.tcx.item_path_str(def.did))\n+                             field.ident, def.variant_descr(), self.tcx.def_path_str(def.did))\n                 .span_label(span, format!(\"field `{}` is private\", field.ident))\n                 .emit();\n         }"}, {"sha": "97b9db34ed525149feb94d30b651076d20c1d6b9", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=e0c75ff40def45bbf39bfed5766a1a8a56f2409f", "patch": "@@ -411,7 +411,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                             if let Some(def_id) = trait_id {\n                                 // A method in a trait impl.\n                                 qualname.push_str(\" as \");\n-                                qualname.push_str(&self.tcx.item_path_str(def_id));\n+                                qualname.push_str(&self.tcx.def_path_str(def_id));\n                                 self.tcx\n                                     .associated_items(def_id)\n                                     .find(|item| item.ident.name == ident.name)\n@@ -451,7 +451,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                         }\n \n                         (\n-                            format!(\"::{}\", self.tcx.item_path_str(def_id)),\n+                            format!(\"::{}\", self.tcx.def_path_str(def_id)),\n                             Some(def_id),\n                             None,\n                             docs,"}, {"sha": "9ca75566b4280ce7f75e0e7b7450979a479fa326", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=e0c75ff40def45bbf39bfed5766a1a8a56f2409f", "patch": "@@ -922,7 +922,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n                                      \"the value of the associated type `{}` (from the trait `{}`) \\\n                                       is already specified\",\n                                      binding.item_name,\n-                                     tcx.item_path_str(assoc_ty.container.id()))\n+                                     tcx.def_path_str(assoc_ty.container.id()))\n                         .span_label(binding.span, \"re-bound here\")\n                         .span_label(*prev_span, format!(\"`{}` bound here first\", binding.item_name))\n                         .emit();\n@@ -1071,7 +1071,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n                 format!(\n                     \"`{}` (from the trait `{}`)\",\n                     assoc_item.ident,\n-                    tcx.item_path_str(trait_def_id),\n+                    tcx.def_path_str(trait_def_id),\n                 )\n             }).collect::<Vec<_>>().join(\", \");\n             let mut err = struct_span_err!(\n@@ -1459,7 +1459,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n         let self_ty = if let Some(ty) = opt_self_ty {\n             ty\n         } else {\n-            let path_str = tcx.item_path_str(trait_def_id);\n+            let path_str = tcx.def_path_str(trait_def_id);\n             self.report_ambiguous_associated_type(span,\n                                                   \"Type\",\n                                                   &path_str,"}, {"sha": "c6b66393dd2f1e2733cc72c03fcf6dcc901fccc8", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=e0c75ff40def45bbf39bfed5766a1a8a56f2409f", "patch": "@@ -1001,13 +1001,13 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n                                            E0026,\n                                            \"{} `{}` does not have {}\",\n                                            kind_name,\n-                                           tcx.item_path_str(variant.did),\n+                                           tcx.def_path_str(variant.did),\n                                            field_names);\n             if let Some((span, ident)) = inexistent_fields.last() {\n                 err.span_label(*span,\n                                format!(\"{} `{}` does not have {} field{}\",\n                                        kind_name,\n-                                       tcx.item_path_str(variant.did),\n+                                       tcx.def_path_str(variant.did),\n                                        t,\n                                        plural));\n                 if plural == \"\" {"}, {"sha": "e6e5c46c473d54abb7ae5a6d84b2eb47ea3862e4", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=e0c75ff40def45bbf39bfed5766a1a8a56f2409f", "patch": "@@ -719,7 +719,7 @@ fn compare_number_of_method_arguments<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                         trait `{}` has {}\",\n                                        trait_m.ident,\n                                        potentially_plural_count(impl_number_args, \"parameter\"),\n-                                       tcx.item_path_str(trait_m.def_id),\n+                                       tcx.def_path_str(trait_m.def_id),\n                                        trait_number_args);\n         if let Some(trait_span) = trait_span {\n             err.span_label(trait_span, format!(\"trait requires {}\","}, {"sha": "3a7308d09172e6581402db7d77fd0eecba619a29", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=e0c75ff40def45bbf39bfed5766a1a8a56f2409f", "patch": "@@ -130,7 +130,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         let sole_field = &variant.fields[0];\n                         let sole_field_ty = sole_field.ty(self.tcx, substs);\n                         if self.can_coerce(expr_ty, sole_field_ty) {\n-                            let variant_path = self.tcx.item_path_str(variant.did);\n+                            let variant_path = self.tcx.def_path_str(variant.did);\n                             // FIXME #56861: DRYer prelude filtering\n                             Some(variant_path.trim_start_matches(\"std::prelude::v1::\").to_string())\n                         } else {"}, {"sha": "1f0ab3abb283617346f34d9a8905876088f682e2", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=e0c75ff40def45bbf39bfed5766a1a8a56f2409f", "patch": "@@ -1195,15 +1195,15 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n         // `report_method_error()`.\n         diag.help(&format!(\n             \"call with fully qualified syntax `{}(...)` to keep using the current method\",\n-            self.tcx.item_path_str(stable_pick.item.def_id),\n+            self.tcx.def_path_str(stable_pick.item.def_id),\n         ));\n \n         if nightly_options::is_nightly_build() {\n             for (candidate, feature) in unstable_candidates {\n                 diag.help(&format!(\n                     \"add #![feature({})] to the crate attributes to enable `{}`\",\n                     feature,\n-                    self.tcx.item_path_str(candidate.item.def_id),\n+                    self.tcx.def_path_str(candidate.item.def_id),\n                 ));\n             }\n         }"}, {"sha": "f784a720b19c42a7dbb1a3f270ff4e74b2077aa2", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=e0c75ff40def45bbf39bfed5766a1a8a56f2409f", "patch": "@@ -102,7 +102,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             None => String::new(),\n                             Some(trait_ref) => {\n                                 format!(\" of the trait `{}`\",\n-                                        self.tcx.item_path_str(trait_ref.def_id))\n+                                        self.tcx.def_path_str(trait_ref.def_id))\n                             }\n                         };\n \n@@ -135,16 +135,16 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                        item_span,\n                                        \"candidate #{} is defined in the trait `{}`\",\n                                        idx + 1,\n-                                       self.tcx.item_path_str(trait_did));\n+                                       self.tcx.def_path_str(trait_did));\n                         } else {\n                             span_note!(err,\n                                        item_span,\n                                        \"the candidate is defined in the trait `{}`\",\n-                                       self.tcx.item_path_str(trait_did));\n+                                       self.tcx.def_path_str(trait_did));\n                         }\n                         err.help(&format!(\"to disambiguate the method call, write `{}::{}({}{})` \\\n                                           instead\",\n-                                          self.tcx.item_path_str(trait_did),\n+                                          self.tcx.def_path_str(trait_did),\n                                           item_name,\n                                           if rcvr_ty.is_region_ptr() && args.is_some() {\n                                               if rcvr_ty.is_mutable_pointer() {\n@@ -516,7 +516,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 };\n                 format!(\n                     \"use {};\\n{}\",\n-                    with_crate_prefix(|| self.tcx.item_path_str(*did)),\n+                    with_crate_prefix(|| self.tcx.def_path_str(*did)),\n                     additional_newline\n                 )\n             });\n@@ -530,14 +530,14 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         &format!(\n                             \"\\ncandidate #{}: `use {};`\",\n                             i + 1,\n-                            with_crate_prefix(|| self.tcx.item_path_str(*trait_did))\n+                            with_crate_prefix(|| self.tcx.def_path_str(*trait_did))\n                         )\n                     );\n                 } else {\n                     msg.push_str(\n                         &format!(\n                             \"\\n`use {};`\",\n-                            with_crate_prefix(|| self.tcx.item_path_str(*trait_did))\n+                            with_crate_prefix(|| self.tcx.def_path_str(*trait_did))\n                         )\n                     );\n                 }\n@@ -638,7 +638,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             for (i, trait_info) in candidates.iter().enumerate() {\n                 msg.push_str(&format!(\"\\ncandidate #{}: `{}`\",\n                                       i + 1,\n-                                      self.tcx.item_path_str(trait_info.def_id)));\n+                                      self.tcx.def_path_str(trait_info.def_id)));\n             }\n             err.note(&msg[..]);\n         }"}, {"sha": "1383bf28113d8196acbed18e8fbf49c2410c65e4", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=e0c75ff40def45bbf39bfed5766a1a8a56f2409f", "patch": "@@ -1328,7 +1328,7 @@ pub fn check_item_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, it: &'tcx hir::Ite\n     debug!(\n         \"check_item_type(it.hir_id={}, it.name={})\",\n         it.hir_id,\n-        tcx.item_path_str(tcx.hir().local_def_id_from_hir_id(it.hir_id))\n+        tcx.def_path_str(tcx.hir().local_def_id_from_hir_id(it.hir_id))\n     );\n     let _indenter = indenter();\n     match it.node {\n@@ -3534,7 +3534,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         autoderef.unambiguous_final_ty(self);\n \n         if let Some((did, field_ty)) = private_candidate {\n-            let struct_path = self.tcx().item_path_str(did);\n+            let struct_path = self.tcx().def_path_str(did);\n             let mut err = struct_span_err!(self.tcx().sess, expr.span, E0616,\n                                            \"field `{}` of struct `{}` is private\",\n                                            field, struct_path);"}, {"sha": "1f7e05de18bcf07ff09de6fed0704cc06c86b7dd", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=e0c75ff40def45bbf39bfed5766a1a8a56f2409f", "patch": "@@ -68,7 +68,7 @@ pub fn check_item_well_formed<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: Def\n \n     debug!(\"check_item_well_formed(it.hir_id={:?}, it.name={})\",\n            item.hir_id,\n-           tcx.item_path_str(def_id));\n+           tcx.def_path_str(def_id));\n \n     match item.node {\n         // Right now we check that every default trait implementation\n@@ -976,7 +976,7 @@ fn report_bivariance<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     if let Some(def_id) = suggested_marker_id {\n         err.help(&format!(\"consider removing `{}` or using a marker such as `{}`\",\n                           param_name,\n-                          tcx.item_path_str(def_id)));\n+                          tcx.def_path_str(def_id)));\n     }\n     err.emit();\n }"}, {"sha": "a2b01e3843ff2d43d2361969c389603ac1cd45d7", "filename": "src/librustc_typeck/coherence/builtin.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs?ref=e0c75ff40def45bbf39bfed5766a1a8a56f2409f", "patch": "@@ -198,8 +198,8 @@ fn visit_implementation_of_dispatch_from_dyn<'a, 'tcx>(\n                     if def_a.is_struct() && def_b.is_struct() =>\n                 {\n                     if def_a != def_b {\n-                        let source_path = tcx.item_path_str(def_a.did);\n-                        let target_path = tcx.item_path_str(def_b.did);\n+                        let source_path = tcx.def_path_str(def_a.did);\n+                        let target_path = tcx.def_path_str(def_b.did);\n \n                         create_err(\n                             &format!(\n@@ -388,8 +388,8 @@ pub fn coerce_unsized_info<'a, 'gcx>(gcx: TyCtxt<'a, 'gcx, 'gcx>,\n             (&ty::Adt(def_a, substs_a), &ty::Adt(def_b, substs_b)) if def_a.is_struct() &&\n                                                                       def_b.is_struct() => {\n                 if def_a != def_b {\n-                    let source_path = gcx.item_path_str(def_a.did);\n-                    let target_path = gcx.item_path_str(def_b.did);\n+                    let source_path = gcx.def_path_str(def_a.did);\n+                    let target_path = gcx.def_path_str(def_b.did);\n                     span_err!(gcx.sess,\n                               span,\n                               E0377,"}, {"sha": "a5452b4db2a2081538f6657284993e1549ba5fcb", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=e0c75ff40def45bbf39bfed5766a1a8a56f2409f", "patch": "@@ -28,7 +28,7 @@ fn check_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, node_id: ast::NodeId) {\n     if let Some(trait_ref) = tcx.impl_trait_ref(impl_def_id) {\n         debug!(\"(checking implementation) adding impl for trait '{:?}', item '{}'\",\n                trait_ref,\n-               tcx.item_path_str(impl_def_id));\n+               tcx.def_path_str(impl_def_id));\n \n         // Skip impls where one of the self type is an error type.\n         // This occurs with e.g., resolve failures (#30589).\n@@ -204,10 +204,10 @@ fn check_impl_overlap<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, node_id: ast::NodeI\n                                      E0371,\n                                      \"the object type `{}` automatically implements the trait `{}`\",\n                                      trait_ref.self_ty(),\n-                                     tcx.item_path_str(trait_def_id))\n+                                     tcx.def_path_str(trait_def_id))\n                         .span_label(sp, format!(\"`{}` automatically implements trait `{}`\",\n                                                 trait_ref.self_ty(),\n-                                                tcx.item_path_str(trait_def_id)))\n+                                                tcx.def_path_str(trait_def_id)))\n                         .emit();\n                 }\n             }"}, {"sha": "7e1c38e051542298eec8eb6c877a6059bb4f7edc", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=e0c75ff40def45bbf39bfed5766a1a8a56f2409f", "patch": "@@ -121,15 +121,15 @@ impl<'cx, 'tcx, 'v> ItemLikeVisitor<'v> for OrphanChecker<'cx, 'tcx> {\n                                 format!(\"cross-crate traits with a default impl, like `{}`, \\\n                                          can only be implemented for a struct/enum type \\\n                                          defined in the current crate\",\n-                                        self.tcx.item_path_str(trait_def_id)),\n+                                        self.tcx.def_path_str(trait_def_id)),\n                                 \"can't implement cross-crate trait for type in another crate\"\n                             ))\n                         }\n                     }\n                     _ => {\n                         Some((format!(\"cross-crate traits with a default impl, like `{}`, can \\\n                                        only be implemented for a struct/enum type, not `{}`\",\n-                                      self.tcx.item_path_str(trait_def_id),\n+                                      self.tcx.def_path_str(trait_def_id),\n                                       self_ty),\n                               \"can't implement cross-crate trait with a default impl for \\\n                                non-struct/enum type\"))"}, {"sha": "c18f9fd102f1093980b26fbc179a61122c3d7e5f", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=e0c75ff40def45bbf39bfed5766a1a8a56f2409f", "patch": "@@ -131,7 +131,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n \n     fn build_constraints_for_item(&mut self, def_id: DefId) {\n         let tcx = self.tcx();\n-        debug!(\"build_constraints_for_item({})\", tcx.item_path_str(def_id));\n+        debug!(\"build_constraints_for_item({})\", tcx.def_path_str(def_id));\n \n         // Skip items with no generics - there's nothing to infer in them.\n         if tcx.generics_of(def_id).count() == 0 {"}, {"sha": "08d165b82b1db80c934de57085e9ab7fb9b51e7c", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=e0c75ff40def45bbf39bfed5766a1a8a56f2409f", "patch": "@@ -4250,7 +4250,7 @@ where F: Fn(DefId) -> Def {\n     }\n \n     let names = PrintCx::new(tcx, AbsolutePathPrinter)\n-        .print_item_path(def_id, None, Namespace::TypeNS);\n+        .print_def_path(def_id, None, Namespace::TypeNS);\n \n     hir::Path {\n         span: DUMMY_SP,"}, {"sha": "b2982629fe6b2f9cf51847f456fd4564927ecf2f", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=e0c75ff40def45bbf39bfed5766a1a8a56f2409f", "patch": "@@ -1042,7 +1042,7 @@ pub const BUILTIN_ATTRIBUTES: &[(&str, AttributeType, AttributeTemplate, Attribu\n                                              \"rustc_attrs\",\n                                              \"internal rustc attributes will never be stable\",\n                                              cfg_fn!(rustc_attrs))),\n-    (\"rustc_item_path\", Whitelisted, template!(Word), Gated(Stability::Unstable,\n+    (\"rustc_def_path\", Whitelisted, template!(Word), Gated(Stability::Unstable,\n                                            \"rustc_attrs\",\n                                            \"internal rustc attributes will never be stable\",\n                                            cfg_fn!(rustc_attrs))),"}, {"sha": "5a461d61482546f65e1b121418ec474f5eed64a7", "filename": "src/test/mir-opt/issue-41697.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Ftest%2Fmir-opt%2Fissue-41697.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Ftest%2Fmir-opt%2Fissue-41697.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-41697.rs?ref=e0c75ff40def45bbf39bfed5766a1a8a56f2409f", "patch": "@@ -1,7 +1,7 @@\n // Regression test for #41697. Using dump-mir was triggering\n // artificial cycles: during type-checking, we had to get the MIR for\n // the constant expressions in `[u8; 2]`, which in turn would trigger\n-// an attempt to get the item-path, which in turn would request the\n+// an attempt to get the def-path, which in turn would request the\n // types of the impl, which would trigger a cycle. We suppressed this\n // cycle now by forcing mir-dump to avoid asking for types of an impl.\n "}, {"sha": "086b903b973b0b017dc7c437379a03ee6793bda1", "filename": "src/test/ui/symbol-names/basic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.rs?ref=e0c75ff40def45bbf39bfed5766a1a8a56f2409f", "patch": "@@ -1,6 +1,6 @@\n #![feature(rustc_attrs)]\n \n #[rustc_symbol_name] //~ ERROR _ZN5basic4main\n-#[rustc_item_path] //~ ERROR item-path(main)\n+#[rustc_def_path] //~ ERROR def-path(main)\n fn main() {\n }"}, {"sha": "6ddd93d632e151d1710b1d3419653d2fa7509f38", "filename": "src/test/ui/symbol-names/basic.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.stderr?ref=e0c75ff40def45bbf39bfed5766a1a8a56f2409f", "patch": "@@ -4,11 +4,11 @@ error: symbol-name(_ZN5basic4main17h08bcaf310214ed52E)\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: item-path(main)\n+error: def-path(main)\n   --> $DIR/basic.rs:4:1\n    |\n-LL | #[rustc_item_path]\n-   | ^^^^^^^^^^^^^^^^^^\n+LL | #[rustc_def_path]\n+   | ^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "992527017fb7c0f3a3149496cf2cc6a96c751949", "filename": "src/test/ui/symbol-names/impl1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.rs?ref=e0c75ff40def45bbf39bfed5766a1a8a56f2409f", "patch": "@@ -6,7 +6,7 @@ mod foo {\n \n     impl Foo {\n         #[rustc_symbol_name] //~ ERROR _ZN15impl1..foo..Foo3bar\n-        #[rustc_item_path] //~ ERROR item-path(foo::Foo::bar)\n+        #[rustc_def_path] //~ ERROR def-path(foo::Foo::bar)\n         fn bar() { }\n     }\n }\n@@ -16,7 +16,7 @@ mod bar {\n \n     impl Foo {\n         #[rustc_symbol_name] //~ ERROR _ZN5impl13bar33_$LT$impl$u20$impl1..foo..Foo$GT$3baz\n-        #[rustc_item_path] //~ ERROR item-path(bar::<impl foo::Foo>::baz)\n+        #[rustc_def_path] //~ ERROR def-path(bar::<impl foo::Foo>::baz)\n         fn baz() { }\n     }\n }"}, {"sha": "d225c53e4927a9b6e79d4b435407afc35d554238", "filename": "src/test/ui/symbol-names/impl1.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e0c75ff40def45bbf39bfed5766a1a8a56f2409f/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.stderr?ref=e0c75ff40def45bbf39bfed5766a1a8a56f2409f", "patch": "@@ -4,23 +4,23 @@ error: symbol-name(_ZN15impl1..foo..Foo3bar17hc487d6ec13fe9124E)\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: item-path(foo::Foo::bar)\n+error: def-path(foo::Foo::bar)\n   --> $DIR/impl1.rs:9:9\n    |\n-LL |         #[rustc_item_path]\n-   |         ^^^^^^^^^^^^^^^^^^\n+LL |         #[rustc_def_path]\n+   |         ^^^^^^^^^^^^^^^^^\n \n error: symbol-name(_ZN5impl13bar33_$LT$impl$u20$impl1..foo..Foo$GT$3baz17h38577281258e1527E)\n   --> $DIR/impl1.rs:18:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: item-path(bar::<impl foo::Foo>::baz)\n+error: def-path(bar::<impl foo::Foo>::baz)\n   --> $DIR/impl1.rs:19:9\n    |\n-LL |         #[rustc_item_path]\n-   |         ^^^^^^^^^^^^^^^^^^\n+LL |         #[rustc_def_path]\n+   |         ^^^^^^^^^^^^^^^^^\n \n error: aborting due to 4 previous errors\n "}]}