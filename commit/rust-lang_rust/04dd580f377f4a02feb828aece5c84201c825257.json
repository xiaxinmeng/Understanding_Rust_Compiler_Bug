{"sha": "04dd580f377f4a02feb828aece5c84201c825257", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0ZGQ1ODBmMzc3ZjRhMDJmZWI4MjhhZWNlNWM4NDIwMWM4MjUyNTc=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2019-09-25T17:46:14Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2019-09-25T21:45:18Z"}, "message": "unnecessary_clone: split rustfixable lint out into separate test", "tree": {"sha": "b3313408b36a39d53f7745c4d3f4504d9a56ff15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3313408b36a39d53f7745c4d3f4504d9a56ff15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04dd580f377f4a02feb828aece5c84201c825257", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04dd580f377f4a02feb828aece5c84201c825257", "html_url": "https://github.com/rust-lang/rust/commit/04dd580f377f4a02feb828aece5c84201c825257", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04dd580f377f4a02feb828aece5c84201c825257/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "363e382f5b3b7129927795b2e02e6a2069264ffe", "url": "https://api.github.com/repos/rust-lang/rust/commits/363e382f5b3b7129927795b2e02e6a2069264ffe", "html_url": "https://github.com/rust-lang/rust/commit/363e382f5b3b7129927795b2e02e6a2069264ffe"}], "stats": {"total": 124, "additions": 77, "deletions": 47}, "files": [{"sha": "2773227e26bcaa0be55b82eb4abbedcdb8816829", "filename": "tests/ui/iter_cloned_collect.fixed", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/04dd580f377f4a02feb828aece5c84201c825257/tests%2Fui%2Fiter_cloned_collect.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/04dd580f377f4a02feb828aece5c84201c825257/tests%2Fui%2Fiter_cloned_collect.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_cloned_collect.fixed?ref=04dd580f377f4a02feb828aece5c84201c825257", "patch": "@@ -0,0 +1,22 @@\n+// run-rustfix\n+\n+#![allow(unused)]\n+\n+use std::collections::HashSet;\n+use std::collections::VecDeque;\n+\n+fn main() {\n+    let v = [1, 2, 3, 4, 5];\n+    let v2: Vec<isize> = v.to_vec();\n+    let v3: HashSet<isize> = v.iter().cloned().collect();\n+    let v4: VecDeque<isize> = v.iter().cloned().collect();\n+\n+    // Handle macro expansion in suggestion\n+    let _: Vec<isize> = vec![1, 2, 3].to_vec();\n+\n+    // Issue #3704\n+    unsafe {\n+        let _: Vec<u8> = std::ffi::CStr::from_ptr(std::ptr::null())\n+            .to_bytes().to_vec();\n+    }\n+}"}, {"sha": "60a4eac23c79f61650593f77063d69d40a3605c3", "filename": "tests/ui/iter_cloned_collect.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/04dd580f377f4a02feb828aece5c84201c825257/tests%2Fui%2Fiter_cloned_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04dd580f377f4a02feb828aece5c84201c825257/tests%2Fui%2Fiter_cloned_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_cloned_collect.rs?ref=04dd580f377f4a02feb828aece5c84201c825257", "patch": "@@ -0,0 +1,25 @@\n+// run-rustfix\n+\n+#![allow(unused)]\n+\n+use std::collections::HashSet;\n+use std::collections::VecDeque;\n+\n+fn main() {\n+    let v = [1, 2, 3, 4, 5];\n+    let v2: Vec<isize> = v.iter().cloned().collect();\n+    let v3: HashSet<isize> = v.iter().cloned().collect();\n+    let v4: VecDeque<isize> = v.iter().cloned().collect();\n+\n+    // Handle macro expansion in suggestion\n+    let _: Vec<isize> = vec![1, 2, 3].iter().cloned().collect();\n+\n+    // Issue #3704\n+    unsafe {\n+        let _: Vec<u8> = std::ffi::CStr::from_ptr(std::ptr::null())\n+            .to_bytes()\n+            .iter()\n+            .cloned()\n+            .collect();\n+    }\n+}"}, {"sha": "b90a1e6c9196733db6f63a23f2e48a2e0dfe136e", "filename": "tests/ui/iter_cloned_collect.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/04dd580f377f4a02feb828aece5c84201c825257/tests%2Fui%2Fiter_cloned_collect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/04dd580f377f4a02feb828aece5c84201c825257/tests%2Fui%2Fiter_cloned_collect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_cloned_collect.stderr?ref=04dd580f377f4a02feb828aece5c84201c825257", "patch": "@@ -0,0 +1,26 @@\n+error: called `iter().cloned().collect()` on a slice to create a `Vec`. Calling `to_vec()` is both faster and more readable\n+  --> $DIR/iter_cloned_collect.rs:10:27\n+   |\n+LL |     let v2: Vec<isize> = v.iter().cloned().collect();\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.to_vec()`\n+   |\n+   = note: `-D clippy::iter-cloned-collect` implied by `-D warnings`\n+\n+error: called `iter().cloned().collect()` on a slice to create a `Vec`. Calling `to_vec()` is both faster and more readable\n+  --> $DIR/iter_cloned_collect.rs:15:38\n+   |\n+LL |     let _: Vec<isize> = vec![1, 2, 3].iter().cloned().collect();\n+   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.to_vec()`\n+\n+error: called `iter().cloned().collect()` on a slice to create a `Vec`. Calling `to_vec()` is both faster and more readable\n+  --> $DIR/iter_cloned_collect.rs:20:24\n+   |\n+LL |               .to_bytes()\n+   |  ________________________^\n+LL | |             .iter()\n+LL | |             .cloned()\n+LL | |             .collect();\n+   | |______________________^ help: try: `.to_vec()`\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "a0a50fee1808f69ac41eb25087bb8b011194f898", "filename": "tests/ui/unnecessary_clone.rs", "status": "modified", "additions": 2, "deletions": 21, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/04dd580f377f4a02feb828aece5c84201c825257/tests%2Fui%2Funnecessary_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04dd580f377f4a02feb828aece5c84201c825257/tests%2Fui%2Funnecessary_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_clone.rs?ref=04dd580f377f4a02feb828aece5c84201c825257", "patch": "@@ -1,9 +1,9 @@\n+// does not test any rustfixable lints\n+\n #![warn(clippy::clone_on_ref_ptr)]\n #![allow(unused)]\n \n use std::cell::RefCell;\n-use std::collections::HashSet;\n-use std::collections::VecDeque;\n use std::rc::{self, Rc};\n use std::sync::{self, Arc};\n \n@@ -66,25 +66,6 @@ fn clone_on_double_ref() {\n     println!(\"{:p} {:p}\", *y, z);\n }\n \n-fn iter_clone_collect() {\n-    let v = [1, 2, 3, 4, 5];\n-    let v2: Vec<isize> = v.iter().cloned().collect();\n-    let v3: HashSet<isize> = v.iter().cloned().collect();\n-    let v4: VecDeque<isize> = v.iter().cloned().collect();\n-\n-    // Handle macro expansion in suggestion\n-    let _: Vec<isize> = vec![1, 2, 3].iter().cloned().collect();\n-\n-    // Issue #3704\n-    unsafe {\n-        let _: Vec<u8> = std::ffi::CStr::from_ptr(std::ptr::null())\n-            .to_bytes()\n-            .iter()\n-            .cloned()\n-            .collect();\n-    }\n-}\n-\n mod many_derefs {\n     struct A;\n     struct B;"}, {"sha": "7ed1df8d703e1c11fd4d2d0dc0e07f3e7a6a72c4", "filename": "tests/ui/unnecessary_clone.stderr", "status": "modified", "additions": 2, "deletions": 26, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/04dd580f377f4a02feb828aece5c84201c825257/tests%2Fui%2Funnecessary_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/04dd580f377f4a02feb828aece5c84201c825257/tests%2Fui%2Funnecessary_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_clone.stderr?ref=04dd580f377f4a02feb828aece5c84201c825257", "patch": "@@ -78,35 +78,11 @@ help: or try being explicit about what type to clone\n LL |     let z: &Vec<_> = &std::vec::Vec<i32>::clone(y);\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: called `iter().cloned().collect()` on a slice to create a `Vec`. Calling `to_vec()` is both faster and more readable\n-  --> $DIR/unnecessary_clone.rs:71:27\n-   |\n-LL |     let v2: Vec<isize> = v.iter().cloned().collect();\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.to_vec()`\n-   |\n-   = note: `-D clippy::iter-cloned-collect` implied by `-D warnings`\n-\n-error: called `iter().cloned().collect()` on a slice to create a `Vec`. Calling `to_vec()` is both faster and more readable\n-  --> $DIR/unnecessary_clone.rs:76:38\n-   |\n-LL |     let _: Vec<isize> = vec![1, 2, 3].iter().cloned().collect();\n-   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.to_vec()`\n-\n-error: called `iter().cloned().collect()` on a slice to create a `Vec`. Calling `to_vec()` is both faster and more readable\n-  --> $DIR/unnecessary_clone.rs:81:24\n-   |\n-LL |               .to_bytes()\n-   |  ________________________^\n-LL | |             .iter()\n-LL | |             .cloned()\n-LL | |             .collect();\n-   | |______________________^ help: try: `.to_vec()`\n-\n error: using `clone` on a `Copy` type\n-  --> $DIR/unnecessary_clone.rs:119:20\n+  --> $DIR/unnecessary_clone.rs:100:20\n    |\n LL |         let _: E = a.clone();\n    |                    ^^^^^^^^^ help: try dereferencing it: `*****a`\n \n-error: aborting due to 15 previous errors\n+error: aborting due to 12 previous errors\n "}]}