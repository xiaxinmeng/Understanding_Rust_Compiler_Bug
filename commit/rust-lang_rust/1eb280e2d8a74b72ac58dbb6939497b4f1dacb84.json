{"sha": "1eb280e2d8a74b72ac58dbb6939497b4f1dacb84", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlYjI4MGUyZDhhNzRiNzJhYzU4ZGJiNjkzOTQ5N2I0ZjFkYWNiODQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-25T21:18:47Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-27T17:48:07Z"}, "message": "Remove unpretty=flowgraph.", "tree": {"sha": "0648fc3241eeee46236a730c7f47410cbdbd05d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0648fc3241eeee46236a730c7f47410cbdbd05d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1eb280e2d8a74b72ac58dbb6939497b4f1dacb84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1eb280e2d8a74b72ac58dbb6939497b4f1dacb84", "html_url": "https://github.com/rust-lang/rust/commit/1eb280e2d8a74b72ac58dbb6939497b4f1dacb84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1eb280e2d8a74b72ac58dbb6939497b4f1dacb84/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "463b19790b1e23a220f2e2e5902a37f00793a3b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/463b19790b1e23a220f2e2e5902a37f00793a3b0", "html_url": "https://github.com/rust-lang/rust/commit/463b19790b1e23a220f2e2e5902a37f00793a3b0"}], "stats": {"total": 196, "additions": 14, "deletions": 182}, "files": [{"sha": "b4fe550067a1fa7639d58ab1b5605dbbf5fb958d", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1eb280e2d8a74b72ac58dbb6939497b4f1dacb84/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eb280e2d8a74b72ac58dbb6939497b4f1dacb84/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=1eb280e2d8a74b72ac58dbb6939497b4f1dacb84", "patch": "@@ -1268,14 +1268,6 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n     save_analysis: bool = (false, parse_bool, [UNTRACKED],\n         \"write syntax and type analysis (in JSON format) information, in \\\n          addition to normal output\"),\n-    flowgraph_print_loans: bool = (false, parse_bool, [UNTRACKED],\n-        \"include loan analysis data in -Z unpretty flowgraph output\"),\n-    flowgraph_print_moves: bool = (false, parse_bool, [UNTRACKED],\n-        \"include move analysis data in -Z unpretty flowgraph output\"),\n-    flowgraph_print_assigns: bool = (false, parse_bool, [UNTRACKED],\n-        \"include assignment analysis data in -Z unpretty flowgraph output\"),\n-    flowgraph_print_all: bool = (false, parse_bool, [UNTRACKED],\n-        \"include all dataflow analysis data in -Z unpretty flowgraph output\"),\n     print_region_graph: bool = (false, parse_bool, [UNTRACKED],\n         \"prints region inference graph. \\\n          Use with RUST_REGION_GRAPH=help for more info\"),\n@@ -1424,8 +1416,6 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         valid types are any of the types for `--pretty`, as well as:\n         `expanded`, `expanded,identified`,\n         `expanded,hygiene` (with internal representations),\n-        `flowgraph=<nodeid>` (graphviz formatted flowgraph for node),\n-        `flowgraph,unlabelled=<nodeid>` (unlabelled graphviz formatted flowgraph for node),\n         `everybody_loops` (all function bodies replaced with `loop {}`),\n         `hir` (the HIR), `hir,identified`,\n         `hir,typed` (HIR with types for each node),"}, {"sha": "c117418f63699bd1863b742a879ed789cf638e62", "filename": "src/librustc/session/config/tests.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1eb280e2d8a74b72ac58dbb6939497b4f1dacb84/src%2Flibrustc%2Fsession%2Fconfig%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eb280e2d8a74b72ac58dbb6939497b4f1dacb84/src%2Flibrustc%2Fsession%2Fconfig%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig%2Ftests.rs?ref=1eb280e2d8a74b72ac58dbb6939497b4f1dacb84", "patch": "@@ -589,14 +589,6 @@ fn test_debugging_options_tracking_hash() {\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n     opts.debugging_opts.save_analysis = true;\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-    opts.debugging_opts.flowgraph_print_loans = true;\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-    opts.debugging_opts.flowgraph_print_moves = true;\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-    opts.debugging_opts.flowgraph_print_assigns = true;\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-    opts.debugging_opts.flowgraph_print_all = true;\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n     opts.debugging_opts.print_region_graph = true;\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n     opts.debugging_opts.parse_only = true;"}, {"sha": "3382b70b35b2d16b5a4022b42c2e43f4c17f99ee", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 14, "deletions": 164, "changes": 178, "blob_url": "https://github.com/rust-lang/rust/blob/1eb280e2d8a74b72ac58dbb6939497b4f1dacb84/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eb280e2d8a74b72ac58dbb6939497b4f1dacb84/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=1eb280e2d8a74b72ac58dbb6939497b4f1dacb84", "patch": "@@ -2,29 +2,23 @@\n \n use rustc::hir;\n use rustc::hir::map as hir_map;\n-use rustc::hir::map::blocks;\n use rustc::hir::print as pprust_hir;\n use rustc::hir::def_id::LOCAL_CRATE;\n use rustc::session::Session;\n use rustc::session::config::Input;\n use rustc::ty::{self, TyCtxt};\n use rustc::util::common::ErrorReported;\n use rustc_interface::util::ReplaceBodyWithLoop;\n-use rustc_ast_borrowck as borrowck;\n-use rustc_ast_borrowck::graphviz as borrowck_dot;\n-use rustc_ast_borrowck::cfg::{self, graphviz::LabelledCFG};\n use rustc_mir::util::{write_mir_pretty, write_mir_graphviz};\n \n use syntax::ast;\n use syntax::mut_visit::MutVisitor;\n use syntax::print::{pprust};\n use syntax_pos::FileName;\n \n-use graphviz as dot;\n-\n use std::cell::Cell;\n use std::fs::File;\n-use std::io::{self, Write};\n+use std::io::Write;\n use std::option;\n use std::path::Path;\n use std::str::FromStr;\n@@ -48,21 +42,11 @@ pub enum PpSourceMode {\n     PpmTyped,\n }\n \n-#[derive(Copy, Clone, PartialEq, Debug)]\n-pub enum PpFlowGraphMode {\n-    Default,\n-    /// Drops the labels from the edges in the flowgraph output. This\n-    /// is mostly for use in the -Z unpretty flowgraph run-make tests,\n-    /// since the labels are largely uninteresting in those cases and\n-    /// have become a pain to maintain.\n-    UnlabelledEdges,\n-}\n #[derive(Copy, Clone, PartialEq, Debug)]\n pub enum PpMode {\n     PpmSource(PpSourceMode),\n     PpmHir(PpSourceMode),\n     PpmHirTree(PpSourceMode),\n-    PpmFlowGraph(PpFlowGraphMode),\n     PpmMir,\n     PpmMirCFG,\n }\n@@ -80,15 +64,14 @@ impl PpMode {\n             PpmHir(_) |\n             PpmHirTree(_) |\n             PpmMir |\n-            PpmMirCFG |\n-            PpmFlowGraph(_) => true,\n+            PpmMirCFG => true,\n             PpmSource(PpmTyped) => panic!(\"invalid state\"),\n         }\n     }\n \n     pub fn needs_analysis(&self) -> bool {\n         match *self {\n-            PpmMir | PpmMirCFG | PpmFlowGraph(_) => true,\n+            PpmMir | PpmMirCFG => true,\n             _ => false,\n         }\n     }\n@@ -114,15 +97,13 @@ pub fn parse_pretty(sess: &Session,\n         (\"hir-tree\", true) => PpmHirTree(PpmNormal),\n         (\"mir\", true) => PpmMir,\n         (\"mir-cfg\", true) => PpmMirCFG,\n-        (\"flowgraph\", true) => PpmFlowGraph(PpFlowGraphMode::Default),\n-        (\"flowgraph,unlabelled\", true) => PpmFlowGraph(PpFlowGraphMode::UnlabelledEdges),\n         _ => {\n             if extended {\n                 sess.fatal(&format!(\"argument to `unpretty` must be one of `normal`, \\\n-                                     `expanded`, `flowgraph[,unlabelled]=<nodeid>`, \\\n-                                     `identified`, `expanded,identified`, `everybody_loops`, \\\n-                                     `hir`, `hir,identified`, `hir,typed`, `hir-tree`, \\\n-                                     `mir` or `mir-cfg`; got {}\",\n+                                     `expanded`, `identified`, `expanded,identified`, \\\n+                                     `everybody_loops`, `hir`, `hir,identified`, \\\n+                                     `hir,typed`, `hir-tree`, `mir` or `mir-cfg`; \\\n+                                     got {}\",\n                                     name));\n             } else {\n                 sess.fatal(&format!(\"argument to `pretty` must be one of `normal`, `expanded`, \\\n@@ -501,24 +482,6 @@ impl<'a, 'tcx> pprust_hir::PpAnn for TypedAnnotation<'a, 'tcx> {\n     }\n }\n \n-fn gather_flowgraph_variants(sess: &Session) -> Vec<borrowck_dot::Variant> {\n-    let print_loans = sess.opts.debugging_opts.flowgraph_print_loans;\n-    let print_moves = sess.opts.debugging_opts.flowgraph_print_moves;\n-    let print_assigns = sess.opts.debugging_opts.flowgraph_print_assigns;\n-    let print_all = sess.opts.debugging_opts.flowgraph_print_all;\n-    let mut variants = Vec::new();\n-    if print_all || print_loans {\n-        variants.push(borrowck_dot::Loans);\n-    }\n-    if print_all || print_moves {\n-        variants.push(borrowck_dot::Moves);\n-    }\n-    if print_all || print_assigns {\n-        variants.push(borrowck_dot::Assigns);\n-    }\n-    variants\n-}\n-\n #[derive(Clone, Debug)]\n pub enum UserIdentifiedItem {\n     ItemViaNode(ast::NodeId),\n@@ -609,81 +572,6 @@ impl UserIdentifiedItem {\n     }\n }\n \n-fn print_flowgraph<'tcx, W: Write>(\n-    variants: Vec<borrowck_dot::Variant>,\n-    tcx: TyCtxt<'tcx>,\n-    code: blocks::Code<'tcx>,\n-    mode: PpFlowGraphMode,\n-    mut out: W,\n-) -> io::Result<()> {\n-    let body_id = match code {\n-        blocks::Code::Expr(expr) => {\n-            // Find the function this expression is from.\n-            let mut hir_id = expr.hir_id;\n-            loop {\n-                let node = tcx.hir().get(hir_id);\n-                if let Some(n) = hir::map::blocks::FnLikeNode::from_node(node) {\n-                    break n.body();\n-                }\n-                let parent = tcx.hir().get_parent_node(hir_id);\n-                assert_ne!(hir_id, parent);\n-                hir_id = parent;\n-            }\n-        }\n-        blocks::Code::FnLike(fn_like) => fn_like.body(),\n-    };\n-    let body = tcx.hir().body(body_id);\n-    let cfg = cfg::CFG::new(tcx, &body);\n-    let labelled_edges = mode != PpFlowGraphMode::UnlabelledEdges;\n-    let hir_id = code.id();\n-    // We have to disassemble the hir_id because name must be ASCII\n-    // alphanumeric. This does not appear in the rendered graph, so it does not\n-    // have to be user friendly.\n-    let name = format!(\n-        \"hir_id_{}_{}\",\n-        hir_id.owner.index(),\n-        hir_id.local_id.index(),\n-    );\n-    let lcfg = LabelledCFG {\n-        tcx,\n-        cfg: &cfg,\n-        name,\n-        labelled_edges,\n-    };\n-\n-    match code {\n-        _ if variants.is_empty() => {\n-            let r = dot::render(&lcfg, &mut out);\n-            return expand_err_details(r);\n-        }\n-        blocks::Code::Expr(_) => {\n-            tcx.sess.err(\"--pretty flowgraph with -Z flowgraph-print annotations requires \\\n-                          fn-like node id.\");\n-            return Ok(());\n-        }\n-        blocks::Code::FnLike(fn_like) => {\n-            let (bccx, analysis_data) =\n-                borrowck::build_borrowck_dataflow_data_for_fn(tcx, fn_like.body(), &cfg);\n-\n-            let lcfg = borrowck_dot::DataflowLabeller {\n-                inner: lcfg,\n-                variants,\n-                borrowck_ctxt: &bccx,\n-                analysis_data: &analysis_data,\n-            };\n-            let r = dot::render(&lcfg, &mut out);\n-            return expand_err_details(r);\n-        }\n-    }\n-\n-    fn expand_err_details(r: io::Result<()>) -> io::Result<()> {\n-        r.map_err(|ioerr| {\n-            io::Error::new(io::ErrorKind::Other,\n-                           format!(\"graphviz::render failed: {}\", ioerr))\n-        })\n-    }\n-}\n-\n pub fn visit_crate(sess: &Session, krate: &mut ast::Crate, ppm: PpMode) {\n     if let PpmSource(PpmEveryBodyLoops) = ppm {\n         ReplaceBodyWithLoop::new(sess).visit_crate(krate);\n@@ -872,55 +760,17 @@ fn print_with_analysis(\n \n     tcx.analysis(LOCAL_CRATE)?;\n \n-    let mut print = || match ppm {\n+    match ppm {\n         PpmMir | PpmMirCFG => {\n-            if let Some(nodeid) = nodeid {\n-                let def_id = tcx.hir().local_def_id_from_node_id(nodeid);\n-                match ppm {\n-                    PpmMir => write_mir_pretty(tcx, Some(def_id), &mut out),\n-                    PpmMirCFG => write_mir_graphviz(tcx, Some(def_id), &mut out),\n-                    _ => unreachable!(),\n-                }?;\n-            } else {\n-                match ppm {\n-                    PpmMir => write_mir_pretty(tcx, None, &mut out),\n-                    PpmMirCFG => write_mir_graphviz(tcx, None, &mut out),\n-                    _ => unreachable!(),\n-                }?;\n-            }\n-            Ok(())\n-        }\n-        PpmFlowGraph(mode) => {\n-            let nodeid =\n-                nodeid.expect(\"`pretty flowgraph=..` needs NodeId (int) or unique path \\\n-                                suffix (b::c::d)\");\n-            let hir_id = tcx.hir().node_to_hir_id(nodeid);\n-            let node = tcx.hir().find(hir_id).unwrap_or_else(|| {\n-                tcx.sess.fatal(&format!(\"`--pretty=flowgraph` couldn't find ID: {}\", nodeid))\n-            });\n-\n-            match blocks::Code::from_node(&tcx.hir(), hir_id) {\n-                Some(code) => {\n-                    let variants = gather_flowgraph_variants(tcx.sess);\n-\n-                    let out: &mut dyn Write = &mut out;\n-\n-                    print_flowgraph(variants, tcx, code, mode, out)\n-                }\n-                None => {\n-                    let message = format!(\"`--pretty=flowgraph` needs block, fn, or method; \\\n-                                            got {:?}\",\n-                                            node);\n-\n-                    let hir_id = tcx.hir().node_to_hir_id(nodeid);\n-                    tcx.sess.span_fatal(tcx.hir().span(hir_id), &message)\n-                }\n+            let def_id = nodeid.map(|nid| tcx.hir().local_def_id_from_node_id(nid));\n+            match ppm {\n+                PpmMir => write_mir_pretty(tcx, def_id, &mut out),\n+                PpmMirCFG => write_mir_graphviz(tcx, def_id, &mut out),\n+                _ => unreachable!(),\n             }\n         }\n         _ => unreachable!(),\n-    };\n-\n-    print().unwrap();\n+    }.unwrap();\n \n     write_output(out, ofile);\n "}]}