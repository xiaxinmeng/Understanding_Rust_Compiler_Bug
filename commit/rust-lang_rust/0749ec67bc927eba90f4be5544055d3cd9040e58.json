{"sha": "0749ec67bc927eba90f4be5544055d3cd9040e58", "node_id": "C_kwDOAAsO6NoAKDA3NDllYzY3YmM5MjdlYmE5MGY0YmU1NTQ0MDU1ZDNjZDkwNDBlNTg", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-03-23T19:47:19Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-03-24T23:03:54Z"}, "message": "resolve: Do not build expensive suggestions if they are not actually used\n\nAlso remove a redundant parameter from `fn resolve_path(_with_ribs)`, `crate_lint: CrateLint` is a more detailed version of `record_used: bool` with `CrateLint::No` meaning `false` and anything else meaning `true`.", "tree": {"sha": "df280b79a257a516ddc13f4ea4c5af98a1816766", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df280b79a257a516ddc13f4ea4c5af98a1816766"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0749ec67bc927eba90f4be5544055d3cd9040e58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0749ec67bc927eba90f4be5544055d3cd9040e58", "html_url": "https://github.com/rust-lang/rust/commit/0749ec67bc927eba90f4be5544055d3cd9040e58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0749ec67bc927eba90f4be5544055d3cd9040e58/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63b8f01bb5ca277e7df8d7efe094ed4244c1790c", "url": "https://api.github.com/repos/rust-lang/rust/commits/63b8f01bb5ca277e7df8d7efe094ed4244c1790c", "html_url": "https://github.com/rust-lang/rust/commit/63b8f01bb5ca277e7df8d7efe094ed4244c1790c"}], "stats": {"total": 679, "additions": 234, "deletions": 445}, "files": [{"sha": "924e2d43785dea022daeffe09421e9164c780028", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0749ec67bc927eba90f4be5544055d3cd9040e58/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0749ec67bc927eba90f4be5544055d3cd9040e58/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=0749ec67bc927eba90f4be5544055d3cd9040e58", "patch": "@@ -296,9 +296,8 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                     &segments,\n                     Some(TypeNS),\n                     parent_scope,\n-                    !speculative,\n                     path.span,\n-                    CrateLint::SimplePath(id),\n+                    if speculative { CrateLint::No } else { CrateLint::SimplePath(id) },\n                 ) {\n                     PathResult::Module(ModuleOrUniformRoot::Module(module)) => {\n                         let res = module.res().expect(\"visibility resolved to unnamed block\");"}, {"sha": "e678ac9d518f5cc1a5241f1c8fa019dba9d62434", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0749ec67bc927eba90f4be5544055d3cd9040e58/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0749ec67bc927eba90f4be5544055d3cd9040e58/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=0749ec67bc927eba90f4be5544055d3cd9040e58", "patch": "@@ -1426,7 +1426,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n     ) -> Option<(Vec<Segment>, Vec<String>)> {\n         // Replace first ident with `self` and check if that is valid.\n         path[0].ident.name = kw::SelfLower;\n-        let result = self.r.resolve_path(&path, None, parent_scope, false, span, CrateLint::No);\n+        let result = self.r.resolve_path(&path, None, parent_scope, span, CrateLint::No);\n         debug!(\"make_missing_self_suggestion: path={:?} result={:?}\", path, result);\n         if let PathResult::Module(..) = result { Some((path, Vec::new())) } else { None }\n     }\n@@ -1446,7 +1446,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n     ) -> Option<(Vec<Segment>, Vec<String>)> {\n         // Replace first ident with `crate` and check if that is valid.\n         path[0].ident.name = kw::Crate;\n-        let result = self.r.resolve_path(&path, None, parent_scope, false, span, CrateLint::No);\n+        let result = self.r.resolve_path(&path, None, parent_scope, span, CrateLint::No);\n         debug!(\"make_missing_crate_suggestion:  path={:?} result={:?}\", path, result);\n         if let PathResult::Module(..) = result {\n             Some((\n@@ -1478,7 +1478,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n     ) -> Option<(Vec<Segment>, Vec<String>)> {\n         // Replace first ident with `crate` and check if that is valid.\n         path[0].ident.name = kw::Super;\n-        let result = self.r.resolve_path(&path, None, parent_scope, false, span, CrateLint::No);\n+        let result = self.r.resolve_path(&path, None, parent_scope, span, CrateLint::No);\n         debug!(\"make_missing_super_suggestion:  path={:?} result={:?}\", path, result);\n         if let PathResult::Module(..) = result { Some((path, Vec::new())) } else { None }\n     }\n@@ -1513,7 +1513,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n         for name in extern_crate_names.into_iter() {\n             // Replace first ident with a crate name and check if that is valid.\n             path[0].ident.name = name;\n-            let result = self.r.resolve_path(&path, None, parent_scope, false, span, CrateLint::No);\n+            let result = self.r.resolve_path(&path, None, parent_scope, span, CrateLint::No);\n             debug!(\n                 \"make_external_crate_suggestion: name={:?} path={:?} result={:?}\",\n                 name, path, result"}, {"sha": "87c06559ccaa7a6da35f2dc2687ab82e93ee1608", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0749ec67bc927eba90f4be5544055d3cd9040e58/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0749ec67bc927eba90f4be5544055d3cd9040e58/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=0749ec67bc927eba90f4be5544055d3cd9040e58", "patch": "@@ -123,10 +123,6 @@ impl<'a> Import<'a> {\n             _ => false,\n         }\n     }\n-\n-    crate fn crate_lint(&self) -> CrateLint {\n-        CrateLint::UsePath { root_id: self.root_id, root_span: self.root_span }\n-    }\n }\n \n #[derive(Clone, Default, Debug)]\n@@ -791,9 +787,8 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                 &import.module_path,\n                 None,\n                 &import.parent_scope,\n-                false,\n                 import.span,\n-                import.crate_lint(),\n+                CrateLint::No,\n             );\n             import.vis.set(orig_vis);\n \n@@ -887,13 +882,14 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n             _ => None,\n         };\n         let prev_ambiguity_errors_len = self.r.ambiguity_errors.len();\n+        let crate_lint =\n+            CrateLint::UsePath { root_id: import.root_id, root_span: import.root_span };\n         let path_res = self.r.resolve_path(\n             &import.module_path,\n             None,\n             &import.parent_scope,\n-            true,\n             import.span,\n-            import.crate_lint(),\n+            crate_lint,\n         );\n         let no_ambiguity = self.r.ambiguity_errors.len() == prev_ambiguity_errors_len;\n         if let Some(orig_unusable_binding) = orig_unusable_binding {\n@@ -982,7 +978,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                     let mut full_path = import.module_path.clone();\n                     full_path.push(Segment::from_ident(Ident::empty()));\n                     self.r.lint_if_path_starts_with_module(\n-                        import.crate_lint(),\n+                        crate_lint,\n                         &full_path,\n                         import.span,\n                         None,\n@@ -1254,7 +1250,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n             self.r.per_ns(|this, ns| {\n                 if let Ok(binding) = source_bindings[ns].get() {\n                     this.lint_if_path_starts_with_module(\n-                        import.crate_lint(),\n+                        crate_lint,\n                         &full_path,\n                         import.span,\n                         Some(binding),"}, {"sha": "511dc285cb4f477db011f992eb483e8714750e0b", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 7, "deletions": 23, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0749ec67bc927eba90f4be5544055d3cd9040e58/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0749ec67bc927eba90f4be5544055d3cd9040e58/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=0749ec67bc927eba90f4be5544055d3cd9040e58", "patch": "@@ -768,15 +768,13 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         &mut self,\n         path: &[Segment],\n         opt_ns: Option<Namespace>, // `None` indicates a module path in import\n-        record_used: bool,\n         path_span: Span,\n         crate_lint: CrateLint,\n     ) -> PathResult<'a> {\n         self.r.resolve_path_with_ribs(\n             path,\n             opt_ns,\n             &self.parent_scope,\n-            record_used,\n             path_span,\n             crate_lint,\n             Some(&self.ribs),\n@@ -1253,18 +1251,9 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 PathSource::Trait(AliasPossibility::No),\n                 CrateLint::SimplePath(trait_ref.ref_id),\n             );\n-            let res = res.base_res();\n-            if res != Res::Err {\n-                if let PathResult::Module(ModuleOrUniformRoot::Module(module)) = self.resolve_path(\n-                    &path,\n-                    Some(TypeNS),\n-                    true,\n-                    trait_ref.path.span,\n-                    CrateLint::SimplePath(trait_ref.ref_id),\n-                ) {\n-                    new_id = Some(res.def_id());\n-                    new_val = Some((module, trait_ref.clone()));\n-                }\n+            if let Some(def_id) = res.base_res().opt_def_id() {\n+                new_id = Some(def_id);\n+                new_val = Some((self.r.expect_module(def_id), trait_ref.clone()));\n             }\n         }\n         let original_trait_ref = replace(&mut self.current_trait_ref, new_val);\n@@ -2026,6 +2015,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             None\n         };\n \n+        assert_ne!(crate_lint, CrateLint::No);\n         let partial_res = match self.resolve_qpath_anywhere(\n             id,\n             qself,\n@@ -2060,7 +2050,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                     std_path.push(Segment::from_ident(Ident::with_dummy_span(sym::std)));\n                     std_path.extend(path);\n                     if let PathResult::Module(_) | PathResult::NonModule(_) =\n-                        self.resolve_path(&std_path, Some(ns), false, span, CrateLint::No)\n+                        self.resolve_path(&std_path, Some(ns), span, CrateLint::No)\n                     {\n                         // Check if we wrote `str::from_utf8` instead of `std::str::from_utf8`\n                         let item_span =\n@@ -2228,7 +2218,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             )));\n         }\n \n-        let result = match self.resolve_path(&path, Some(ns), true, span, crate_lint) {\n+        let result = match self.resolve_path(&path, Some(ns), span, crate_lint) {\n             PathResult::NonModule(path_res) => path_res,\n             PathResult::Module(ModuleOrUniformRoot::Module(module)) if !module.is_normal() => {\n                 PartialRes::new(module.res().unwrap())\n@@ -2268,13 +2258,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             && path[0].ident.name != kw::DollarCrate\n         {\n             let unqualified_result = {\n-                match self.resolve_path(\n-                    &[*path.last().unwrap()],\n-                    Some(ns),\n-                    false,\n-                    span,\n-                    CrateLint::No,\n-                ) {\n+                match self.resolve_path(&[*path.last().unwrap()], Some(ns), span, CrateLint::No) {\n                     PathResult::NonModule(path_res) => path_res.base_res(),\n                     PathResult::Module(ModuleOrUniformRoot::Module(module)) => {\n                         module.res().unwrap()"}, {"sha": "3c6caa795377199c29989696c989b9352a485dcf", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0749ec67bc927eba90f4be5544055d3cd9040e58/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0749ec67bc927eba90f4be5544055d3cd9040e58/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=0749ec67bc927eba90f4be5544055d3cd9040e58", "patch": "@@ -188,7 +188,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n             } else {\n                 let mod_path = &path[..path.len() - 1];\n                 let mod_prefix =\n-                    match self.resolve_path(mod_path, Some(TypeNS), false, span, CrateLint::No) {\n+                    match self.resolve_path(mod_path, Some(TypeNS), span, CrateLint::No) {\n                         PathResult::Module(ModuleOrUniformRoot::Module(module)) => module.res(),\n                         _ => None,\n                     }\n@@ -648,7 +648,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         if let crate::PathSource::TraitItem(_) = source {\n             let mod_path = &path[..path.len() - 1];\n             if let PathResult::Module(ModuleOrUniformRoot::Module(module)) =\n-                self.resolve_path(mod_path, None, false, span, CrateLint::No)\n+                self.resolve_path(mod_path, None, span, CrateLint::No)\n             {\n                 let resolutions = self.r.resolutions(module).borrow();\n                 let targets: Vec<_> =\n@@ -1384,7 +1384,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n             // Search in module.\n             let mod_path = &path[..path.len() - 1];\n             if let PathResult::Module(ModuleOrUniformRoot::Module(module)) =\n-                self.resolve_path(mod_path, Some(TypeNS), false, span, CrateLint::No)\n+                self.resolve_path(mod_path, Some(TypeNS), span, CrateLint::No)\n             {\n                 self.r.add_module_candidates(module, &mut names, &filter_fn);\n             }"}, {"sha": "5a87dede54e362554e61d58b624a923be999e897", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 192, "deletions": 209, "changes": 401, "blob_url": "https://github.com/rust-lang/rust/blob/0749ec67bc927eba90f4be5544055d3cd9040e58/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0749ec67bc927eba90f4be5544055d3cd9040e58/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=0749ec67bc927eba90f4be5544055d3cd9040e58", "patch": "@@ -449,6 +449,19 @@ enum PathResult<'a> {\n     },\n }\n \n+impl<'a> PathResult<'a> {\n+    fn failed(\n+        span: Span,\n+        is_error_from_last_segment: bool,\n+        record_used: bool,\n+        label_and_suggestion: impl FnOnce() -> (String, Option<Suggestion>),\n+    ) -> PathResult<'a> {\n+        let (label, suggestion) =\n+            if record_used { label_and_suggestion() } else { (String::new(), None) };\n+        PathResult::Failed { span, label, suggestion, is_error_from_last_segment }\n+    }\n+}\n+\n #[derive(Debug)]\n enum ModuleKind {\n     /// An anonymous module; e.g., just a block.\n@@ -2206,39 +2219,29 @@ impl<'a> Resolver<'a> {\n         path: &[Segment],\n         opt_ns: Option<Namespace>, // `None` indicates a module path in import\n         parent_scope: &ParentScope<'a>,\n-        record_used: bool,\n         path_span: Span,\n         crate_lint: CrateLint,\n     ) -> PathResult<'a> {\n-        self.resolve_path_with_ribs(\n-            path,\n-            opt_ns,\n-            parent_scope,\n-            record_used,\n-            path_span,\n-            crate_lint,\n-            None,\n-        )\n+        self.resolve_path_with_ribs(path, opt_ns, parent_scope, path_span, crate_lint, None)\n     }\n \n     fn resolve_path_with_ribs(\n         &mut self,\n         path: &[Segment],\n         opt_ns: Option<Namespace>, // `None` indicates a module path in import\n         parent_scope: &ParentScope<'a>,\n-        record_used: bool,\n         path_span: Span,\n         crate_lint: CrateLint,\n         ribs: Option<&PerNS<Vec<Rib<'a>>>>,\n     ) -> PathResult<'a> {\n+        let record_used = crate_lint != CrateLint::No;\n         let mut module = None;\n         let mut allow_super = true;\n         let mut second_binding = None;\n \n         debug!(\n-            \"resolve_path(path={:?}, opt_ns={:?}, record_used={:?}, \\\n-             path_span={:?}, crate_lint={:?})\",\n-            path, opt_ns, record_used, path_span, crate_lint,\n+            \"resolve_path(path={:?}, opt_ns={:?}, path_span={:?}, crate_lint={:?})\",\n+            path, opt_ns, path_span, crate_lint,\n         );\n \n         for (i, &Segment { ident, id, has_generic_args: _ }) in path.iter().enumerate() {\n@@ -2278,13 +2281,9 @@ impl<'a> Resolver<'a> {\n                             continue;\n                         }\n                     }\n-                    let msg = \"there are too many leading `super` keywords\".to_string();\n-                    return PathResult::Failed {\n-                        span: ident.span,\n-                        label: msg,\n-                        suggestion: None,\n-                        is_error_from_last_segment: false,\n-                    };\n+                    return PathResult::failed(ident.span, false, record_used, || {\n+                        (\"there are too many leading `super` keywords\".to_string(), None)\n+                    });\n                 }\n                 if i == 0 {\n                     if name == kw::SelfLower {\n@@ -2313,22 +2312,19 @@ impl<'a> Resolver<'a> {\n \n             // Report special messages for path segment keywords in wrong positions.\n             if ident.is_path_segment_keyword() && i != 0 {\n-                let name_str = if name == kw::PathRoot {\n-                    \"crate root\".to_string()\n-                } else {\n-                    format!(\"`{}`\", name)\n-                };\n-                let label = if i == 1 && path[0].ident.name == kw::PathRoot {\n-                    format!(\"global paths cannot start with {}\", name_str)\n-                } else {\n-                    format!(\"{} in paths can only be used in start position\", name_str)\n-                };\n-                return PathResult::Failed {\n-                    span: ident.span,\n-                    label,\n-                    suggestion: None,\n-                    is_error_from_last_segment: false,\n-                };\n+                return PathResult::failed(ident.span, false, record_used, || {\n+                    let name_str = if name == kw::PathRoot {\n+                        \"crate root\".to_string()\n+                    } else {\n+                        format!(\"`{}`\", name)\n+                    };\n+                    let label = if i == 1 && path[0].ident.name == kw::PathRoot {\n+                        format!(\"global paths cannot start with {}\", name_str)\n+                    } else {\n+                        format!(\"{} in paths can only be used in start position\", name_str)\n+                    };\n+                    (label, None)\n+                });\n             }\n \n             enum FindBindingResult<'a> {\n@@ -2356,16 +2352,11 @@ impl<'a> Resolver<'a> {\n                         path_span,\n                     )\n                 } else {\n-                    let record_used_id = if record_used {\n-                        crate_lint.node_id().or(Some(CRATE_NODE_ID))\n-                    } else {\n-                        None\n-                    };\n                     match this.resolve_ident_in_lexical_scope(\n                         ident,\n                         ns,\n                         parent_scope,\n-                        record_used_id,\n+                        crate_lint.node_id(),\n                         path_span,\n                         &ribs.unwrap()[ns],\n                     ) {\n@@ -2425,19 +2416,14 @@ impl<'a> Resolver<'a> {\n                             path.len() - i - 1,\n                         ));\n                     } else {\n-                        let label = format!(\n-                            \"`{}` is {} {}, not a module\",\n-                            ident,\n-                            res.article(),\n-                            res.descr(),\n-                        );\n-\n-                        return PathResult::Failed {\n-                            span: ident.span,\n-                            label,\n-                            suggestion: None,\n-                            is_error_from_last_segment: is_last,\n-                        };\n+                        return PathResult::failed(ident.span, is_last, record_used, || {\n+                            let label = format!(\n+                                \"`{ident}` is {} {}, not a module\",\n+                                res.article(),\n+                                res.descr()\n+                            );\n+                            (label, None)\n+                        });\n                     }\n                 }\n                 Err(Undetermined) => return PathResult::Indeterminate,\n@@ -2450,171 +2436,169 @@ impl<'a> Resolver<'a> {\n                             ));\n                         }\n                     }\n-                    let module_res = match module {\n-                        Some(ModuleOrUniformRoot::Module(module)) => module.res(),\n-                        _ => None,\n-                    };\n-                    let (label, suggestion) = if module_res == self.graph_root.res() {\n-                        let is_mod = |res| matches!(res, Res::Def(DefKind::Mod, _));\n-                        // Don't look up import candidates if this is a speculative resolve\n-                        let mut candidates = if record_used {\n-                            self.lookup_import_candidates(ident, TypeNS, parent_scope, is_mod)\n-                        } else {\n-                            Vec::new()\n-                        };\n-                        candidates.sort_by_cached_key(|c| {\n-                            (c.path.segments.len(), pprust::path_to_string(&c.path))\n-                        });\n-                        if let Some(candidate) = candidates.get(0) {\n-                            (\n-                                String::from(\"unresolved import\"),\n-                                Some((\n-                                    vec![(ident.span, pprust::path_to_string(&candidate.path))],\n-                                    String::from(\"a similar path exists\"),\n-                                    Applicability::MaybeIncorrect,\n-                                )),\n-                            )\n-                        } else if self.session.edition() == Edition::Edition2015 {\n-                            (format!(\"maybe a missing crate `{}`?\", ident), None)\n-                        } else {\n-                            (format!(\"could not find `{}` in the crate root\", ident), None)\n-                        }\n-                    } else if i == 0 {\n-                        if ident\n-                            .name\n-                            .as_str()\n-                            .chars()\n-                            .next()\n-                            .map_or(false, |c| c.is_ascii_uppercase())\n-                        {\n-                            // Check whether the name refers to an item in the value namespace.\n-                            let suggestion = if ribs.is_some() {\n-                                let match_span = match self.resolve_ident_in_lexical_scope(\n-                                    ident,\n-                                    ValueNS,\n-                                    parent_scope,\n-                                    None,\n-                                    path_span,\n-                                    &ribs.unwrap()[ValueNS],\n-                                ) {\n-                                    // Name matches a local variable. For example:\n-                                    // ```\n-                                    // fn f() {\n-                                    //     let Foo: &str = \"\";\n-                                    //     println!(\"{}\", Foo::Bar); // Name refers to local\n-                                    //                               // variable `Foo`.\n-                                    // }\n-                                    // ```\n-                                    Some(LexicalScopeBinding::Res(Res::Local(id))) => {\n-                                        Some(*self.pat_span_map.get(&id).unwrap())\n-                                    }\n \n-                                    // Name matches item from a local name binding\n-                                    // created by `use` declaration. For example:\n-                                    // ```\n-                                    // pub Foo: &str = \"\";\n-                                    //\n-                                    // mod submod {\n-                                    //     use super::Foo;\n-                                    //     println!(\"{}\", Foo::Bar); // Name refers to local\n-                                    //                               // binding `Foo`.\n-                                    // }\n-                                    // ```\n-                                    Some(LexicalScopeBinding::Item(name_binding)) => {\n-                                        Some(name_binding.span)\n-                                    }\n-                                    _ => None,\n-                                };\n-\n-                                if let Some(span) = match_span {\n+                    return PathResult::failed(ident.span, is_last, record_used, || {\n+                        let module_res = match module {\n+                            Some(ModuleOrUniformRoot::Module(module)) => module.res(),\n+                            _ => None,\n+                        };\n+                        if module_res == self.graph_root.res() {\n+                            let is_mod = |res| matches!(res, Res::Def(DefKind::Mod, _));\n+                            let mut candidates =\n+                                self.lookup_import_candidates(ident, TypeNS, parent_scope, is_mod);\n+                            candidates.sort_by_cached_key(|c| {\n+                                (c.path.segments.len(), pprust::path_to_string(&c.path))\n+                            });\n+                            if let Some(candidate) = candidates.get(0) {\n+                                (\n+                                    String::from(\"unresolved import\"),\n                                     Some((\n-                                        vec![(span, String::from(\"\"))],\n-                                        format!(\"`{}` is defined here, but is not a type\", ident),\n+                                        vec![(ident.span, pprust::path_to_string(&candidate.path))],\n+                                        String::from(\"a similar path exists\"),\n                                         Applicability::MaybeIncorrect,\n-                                    ))\n-                                } else {\n-                                    None\n-                                }\n+                                    )),\n+                                )\n+                            } else if self.session.edition() == Edition::Edition2015 {\n+                                (format!(\"maybe a missing crate `{}`?\", ident), None)\n                             } else {\n-                                None\n-                            };\n+                                (format!(\"could not find `{}` in the crate root\", ident), None)\n+                            }\n+                        } else if i == 0 {\n+                            if ident\n+                                .name\n+                                .as_str()\n+                                .chars()\n+                                .next()\n+                                .map_or(false, |c| c.is_ascii_uppercase())\n+                            {\n+                                // Check whether the name refers to an item in the value namespace.\n+                                let suggestion = if ribs.is_some() {\n+                                    let match_span = match self.resolve_ident_in_lexical_scope(\n+                                        ident,\n+                                        ValueNS,\n+                                        parent_scope,\n+                                        None,\n+                                        path_span,\n+                                        &ribs.unwrap()[ValueNS],\n+                                    ) {\n+                                        // Name matches a local variable. For example:\n+                                        // ```\n+                                        // fn f() {\n+                                        //     let Foo: &str = \"\";\n+                                        //     println!(\"{}\", Foo::Bar); // Name refers to local\n+                                        //                               // variable `Foo`.\n+                                        // }\n+                                        // ```\n+                                        Some(LexicalScopeBinding::Res(Res::Local(id))) => {\n+                                            Some(*self.pat_span_map.get(&id).unwrap())\n+                                        }\n+\n+                                        // Name matches item from a local name binding\n+                                        // created by `use` declaration. For example:\n+                                        // ```\n+                                        // pub Foo: &str = \"\";\n+                                        //\n+                                        // mod submod {\n+                                        //     use super::Foo;\n+                                        //     println!(\"{}\", Foo::Bar); // Name refers to local\n+                                        //                               // binding `Foo`.\n+                                        // }\n+                                        // ```\n+                                        Some(LexicalScopeBinding::Item(name_binding)) => {\n+                                            Some(name_binding.span)\n+                                        }\n+                                        _ => None,\n+                                    };\n \n-                            (format!(\"use of undeclared type `{}`\", ident), suggestion)\n-                        } else {\n-                            (\n-                                format!(\"use of undeclared crate or module `{}`\", ident),\n-                                if ident.name == sym::alloc {\n-                                    Some((\n-                                        vec![],\n-                                        String::from(\n-                                            \"add `extern crate alloc` to use the `alloc` crate\",\n-                                        ),\n-                                        Applicability::MaybeIncorrect,\n-                                    ))\n+                                    if let Some(span) = match_span {\n+                                        Some((\n+                                            vec![(span, String::from(\"\"))],\n+                                            format!(\n+                                                \"`{}` is defined here, but is not a type\",\n+                                                ident\n+                                            ),\n+                                            Applicability::MaybeIncorrect,\n+                                        ))\n+                                    } else {\n+                                        None\n+                                    }\n                                 } else {\n-                                    self.find_similarly_named_module_or_crate(\n-                                        ident.name,\n-                                        &parent_scope.module,\n-                                    )\n-                                    .map(|sugg| {\n-                                        (\n-                                            vec![(ident.span, sugg.to_string())],\n+                                    None\n+                                };\n+\n+                                (format!(\"use of undeclared type `{}`\", ident), suggestion)\n+                            } else {\n+                                (\n+                                    format!(\"use of undeclared crate or module `{}`\", ident),\n+                                    if ident.name == sym::alloc {\n+                                        Some((\n+                                            vec![],\n                                             String::from(\n-                                                \"there is a crate or module with a similar name\",\n+                                                \"add `extern crate alloc` to use the `alloc` crate\",\n                                             ),\n                                             Applicability::MaybeIncorrect,\n+                                        ))\n+                                    } else {\n+                                        self.find_similarly_named_module_or_crate(\n+                                            ident.name,\n+                                            &parent_scope.module,\n                                         )\n-                                    })\n-                                },\n-                            )\n-                        }\n-                    } else {\n-                        let parent = path[i - 1].ident.name;\n-                        let parent = match parent {\n-                            // ::foo is mounted at the crate root for 2015, and is the extern\n-                            // prelude for 2018+\n-                            kw::PathRoot if self.session.edition() > Edition::Edition2015 => {\n-                                \"the list of imported crates\".to_owned()\n-                            }\n-                            kw::PathRoot | kw::Crate => \"the crate root\".to_owned(),\n-                            _ => {\n-                                format!(\"`{}`\", parent)\n+                                        .map(|sugg| {\n+                                            (\n+                                                vec![(ident.span, sugg.to_string())],\n+                                                String::from(\n+                                                    \"there is a crate or module with a similar name\",\n+                                                ),\n+                                                Applicability::MaybeIncorrect,\n+                                            )\n+                                        })\n+                                    },\n+                                )\n                             }\n-                        };\n-\n-                        let mut msg = format!(\"could not find `{}` in {}\", ident, parent);\n-                        if ns == TypeNS || ns == ValueNS {\n-                            let ns_to_try = if ns == TypeNS { ValueNS } else { TypeNS };\n-                            if let FindBindingResult::Binding(Ok(binding)) =\n-                                find_binding_in_ns(self, ns_to_try)\n-                            {\n-                                let mut found = |what| {\n-                                    msg = format!(\n-                                        \"expected {}, found {} `{}` in {}\",\n-                                        ns.descr(),\n-                                        what,\n-                                        ident,\n-                                        parent\n-                                    )\n-                                };\n-                                if binding.module().is_some() {\n-                                    found(\"module\")\n-                                } else {\n-                                    match binding.res() {\n-                                        def::Res::<NodeId>::Def(kind, id) => found(kind.descr(id)),\n-                                        _ => found(ns_to_try.descr()),\n-                                    }\n+                        } else {\n+                            let parent = path[i - 1].ident.name;\n+                            let parent = match parent {\n+                                // ::foo is mounted at the crate root for 2015, and is the extern\n+                                // prelude for 2018+\n+                                kw::PathRoot if self.session.edition() > Edition::Edition2015 => {\n+                                    \"the list of imported crates\".to_owned()\n+                                }\n+                                kw::PathRoot | kw::Crate => \"the crate root\".to_owned(),\n+                                _ => {\n+                                    format!(\"`{}`\", parent)\n                                 }\n                             };\n+\n+                            let mut msg = format!(\"could not find `{}` in {}\", ident, parent);\n+                            if ns == TypeNS || ns == ValueNS {\n+                                let ns_to_try = if ns == TypeNS { ValueNS } else { TypeNS };\n+                                if let FindBindingResult::Binding(Ok(binding)) =\n+                                    find_binding_in_ns(self, ns_to_try)\n+                                {\n+                                    let mut found = |what| {\n+                                        msg = format!(\n+                                            \"expected {}, found {} `{}` in {}\",\n+                                            ns.descr(),\n+                                            what,\n+                                            ident,\n+                                            parent\n+                                        )\n+                                    };\n+                                    if binding.module().is_some() {\n+                                        found(\"module\")\n+                                    } else {\n+                                        match binding.res() {\n+                                            def::Res::<NodeId>::Def(kind, id) => {\n+                                                found(kind.descr(id))\n+                                            }\n+                                            _ => found(ns_to_try.descr()),\n+                                        }\n+                                    }\n+                                };\n+                            }\n+                            (msg, None)\n                         }\n-                        (msg, None)\n-                    };\n-                    return PathResult::Failed {\n-                        span: ident.span,\n-                        label,\n-                        suggestion,\n-                        is_error_from_last_segment: is_last,\n-                    };\n+                    });\n                 }\n             }\n         }\n@@ -3374,7 +3358,6 @@ impl<'a> Resolver<'a> {\n             &Segment::from_path(path),\n             Some(ns),\n             parent_scope,\n-            false,\n             path.span,\n             CrateLint::No,\n         ) {\n@@ -3543,7 +3526,7 @@ fn module_to_string(module: Module<'_>) -> Option<String> {\n     Some(names_to_string(&names))\n }\n \n-#[derive(Copy, Clone, Debug)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n enum CrateLint {\n     /// Do not issue the lint.\n     No,"}, {"sha": "d30aed71e23e8c896016cfbb7ea1e1ceee2c0b3a", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0749ec67bc927eba90f4be5544055d3cd9040e58/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0749ec67bc927eba90f4be5544055d3cd9040e58/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=0749ec67bc927eba90f4be5544055d3cd9040e58", "patch": "@@ -415,7 +415,7 @@ impl<'a> ResolverExpand for Resolver<'a> {\n \n         let mut indeterminate = false;\n         for ns in [TypeNS, ValueNS, MacroNS].iter().copied() {\n-            match self.resolve_path(path, Some(ns), &parent_scope, false, span, CrateLint::No) {\n+            match self.resolve_path(path, Some(ns), &parent_scope, span, CrateLint::No) {\n                 PathResult::Module(ModuleOrUniformRoot::Module(_)) => return Ok(true),\n                 PathResult::NonModule(partial_res) if partial_res.unresolved_segments() == 0 => {\n                     return Ok(true);\n@@ -579,7 +579,6 @@ impl<'a> Resolver<'a> {\n                 &path,\n                 Some(MacroNS),\n                 parent_scope,\n-                false,\n                 path_span,\n                 CrateLint::No,\n             ) {\n@@ -1033,9 +1032,8 @@ impl<'a> Resolver<'a> {\n                 &path,\n                 Some(MacroNS),\n                 &parent_scope,\n-                true,\n                 path_span,\n-                CrateLint::No,\n+                CrateLint::SimplePath(ast::CRATE_NODE_ID),\n             ) {\n                 PathResult::NonModule(path_res) if path_res.unresolved_segments() == 0 => {\n                     let res = path_res.base_res();"}, {"sha": "5786ed7b1d533fea151b82679a397ac20f337a94", "filename": "src/test/ui/rust-2018/edition-lint-nested-empty-paths.fixed", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0749ec67bc927eba90f4be5544055d3cd9040e58/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-empty-paths.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0749ec67bc927eba90f4be5544055d3cd9040e58/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-empty-paths.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-empty-paths.fixed?ref=0749ec67bc927eba90f4be5544055d3cd9040e58", "patch": "@@ -17,28 +17,18 @@ crate mod foo {\n use crate::foo::{bar::{baz::{}}};\n //~^ ERROR absolute paths must start with\n //~| WARN this is accepted in the current edition\n-//~| ERROR absolute paths must start with\n-//~| WARN this is accepted in the current edition\n \n use crate::foo::{bar::{XX, baz::{}}};\n //~^ ERROR absolute paths must start with\n //~| WARN this is accepted in the current edition\n //~| ERROR absolute paths must start with\n //~| WARN this is accepted in the current edition\n-//~| ERROR absolute paths must start with\n-//~| WARN this is accepted in the current edition\n-//~| ERROR absolute paths must start with\n-//~| WARN this is accepted in the current edition\n \n use crate::foo::{bar::{baz::{}, baz1::{}}};\n //~^ ERROR absolute paths must start with\n //~| WARN this is accepted in the current edition\n //~| ERROR absolute paths must start with\n //~| WARN this is accepted in the current edition\n-//~| ERROR absolute paths must start with\n-//~| WARN this is accepted in the current edition\n-//~| ERROR absolute paths must start with\n-//~| WARN this is accepted in the current edition\n \n fn main() {\n }"}, {"sha": "b7c86088c75ed30db248c63fb12925ed8ff6d53f", "filename": "src/test/ui/rust-2018/edition-lint-nested-empty-paths.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0749ec67bc927eba90f4be5544055d3cd9040e58/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-empty-paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0749ec67bc927eba90f4be5544055d3cd9040e58/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-empty-paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-empty-paths.rs?ref=0749ec67bc927eba90f4be5544055d3cd9040e58", "patch": "@@ -17,28 +17,18 @@ crate mod foo {\n use foo::{bar::{baz::{}}};\n //~^ ERROR absolute paths must start with\n //~| WARN this is accepted in the current edition\n-//~| ERROR absolute paths must start with\n-//~| WARN this is accepted in the current edition\n \n use foo::{bar::{XX, baz::{}}};\n //~^ ERROR absolute paths must start with\n //~| WARN this is accepted in the current edition\n //~| ERROR absolute paths must start with\n //~| WARN this is accepted in the current edition\n-//~| ERROR absolute paths must start with\n-//~| WARN this is accepted in the current edition\n-//~| ERROR absolute paths must start with\n-//~| WARN this is accepted in the current edition\n \n use foo::{bar::{baz::{}, baz1::{}}};\n //~^ ERROR absolute paths must start with\n //~| WARN this is accepted in the current edition\n //~| ERROR absolute paths must start with\n //~| WARN this is accepted in the current edition\n-//~| ERROR absolute paths must start with\n-//~| WARN this is accepted in the current edition\n-//~| ERROR absolute paths must start with\n-//~| WARN this is accepted in the current edition\n \n fn main() {\n }"}, {"sha": "e47c320f78f09a10a251a9cf60f9e6c0b38db3d2", "filename": "src/test/ui/rust-2018/edition-lint-nested-empty-paths.stderr", "status": "modified", "additions": 5, "deletions": 50, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/0749ec67bc927eba90f4be5544055d3cd9040e58/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-empty-paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0749ec67bc927eba90f4be5544055d3cd9040e58/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-empty-paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-empty-paths.stderr?ref=0749ec67bc927eba90f4be5544055d3cd9040e58", "patch": "@@ -13,16 +13,7 @@ LL | #![deny(absolute_paths_not_starting_with_crate)]\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n-  --> $DIR/edition-lint-nested-empty-paths.rs:17:5\n-   |\n-LL | use foo::{bar::{baz::{}}};\n-   |     ^^^^^^^^^^^^^^^^^^^^^ help: use `crate`: `crate::foo::{bar::{baz::{}}}`\n-   |\n-   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n-   = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n-\n-error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n-  --> $DIR/edition-lint-nested-empty-paths.rs:23:5\n+  --> $DIR/edition-lint-nested-empty-paths.rs:21:5\n    |\n LL | use foo::{bar::{XX, baz::{}}};\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `crate`: `crate::foo::{bar::{XX, baz::{}}}`\n@@ -31,7 +22,7 @@ LL | use foo::{bar::{XX, baz::{}}};\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n-  --> $DIR/edition-lint-nested-empty-paths.rs:23:5\n+  --> $DIR/edition-lint-nested-empty-paths.rs:21:5\n    |\n LL | use foo::{bar::{XX, baz::{}}};\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `crate`: `crate::foo::{bar::{XX, baz::{}}}`\n@@ -40,43 +31,7 @@ LL | use foo::{bar::{XX, baz::{}}};\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n-  --> $DIR/edition-lint-nested-empty-paths.rs:23:5\n-   |\n-LL | use foo::{bar::{XX, baz::{}}};\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `crate`: `crate::foo::{bar::{XX, baz::{}}}`\n-   |\n-   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n-   = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n-\n-error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n-  --> $DIR/edition-lint-nested-empty-paths.rs:23:5\n-   |\n-LL | use foo::{bar::{XX, baz::{}}};\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `crate`: `crate::foo::{bar::{XX, baz::{}}}`\n-   |\n-   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n-   = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n-\n-error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n-  --> $DIR/edition-lint-nested-empty-paths.rs:33:5\n-   |\n-LL | use foo::{bar::{baz::{}, baz1::{}}};\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `crate`: `crate::foo::{bar::{baz::{}, baz1::{}}}`\n-   |\n-   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n-   = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n-\n-error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n-  --> $DIR/edition-lint-nested-empty-paths.rs:33:5\n-   |\n-LL | use foo::{bar::{baz::{}, baz1::{}}};\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `crate`: `crate::foo::{bar::{baz::{}, baz1::{}}}`\n-   |\n-   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n-   = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n-\n-error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n-  --> $DIR/edition-lint-nested-empty-paths.rs:33:5\n+  --> $DIR/edition-lint-nested-empty-paths.rs:27:5\n    |\n LL | use foo::{bar::{baz::{}, baz1::{}}};\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `crate`: `crate::foo::{bar::{baz::{}, baz1::{}}}`\n@@ -85,13 +40,13 @@ LL | use foo::{bar::{baz::{}, baz1::{}}};\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n-  --> $DIR/edition-lint-nested-empty-paths.rs:33:5\n+  --> $DIR/edition-lint-nested-empty-paths.rs:27:5\n    |\n LL | use foo::{bar::{baz::{}, baz1::{}}};\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `crate`: `crate::foo::{bar::{baz::{}, baz1::{}}}`\n    |\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n-error: aborting due to 10 previous errors\n+error: aborting due to 5 previous errors\n "}, {"sha": "c4546f8c82129514f1e6355a492a73709ea6c2e7", "filename": "src/test/ui/rust-2018/edition-lint-nested-paths.fixed", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0749ec67bc927eba90f4be5544055d3cd9040e58/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-paths.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0749ec67bc927eba90f4be5544055d3cd9040e58/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-paths.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-paths.fixed?ref=0749ec67bc927eba90f4be5544055d3cd9040e58", "patch": "@@ -8,10 +8,6 @@ use crate::foo::{a, b};\n //~| this is accepted in the current edition\n //~| ERROR absolute paths must start with\n //~| this is accepted in the current edition\n-//~| ERROR absolute paths must start with\n-//~| this is accepted in the current edition\n-//~| ERROR absolute paths must start with\n-//~| this is accepted in the current edition\n \n mod foo {\n     crate fn a() {}\n@@ -29,8 +25,6 @@ fn main() {\n         //~| this is accepted in the current edition\n         //~| ERROR absolute paths must start with\n         //~| this is accepted in the current edition\n-        //~| ERROR absolute paths must start with\n-        //~| this is accepted in the current edition\n         x::a();\n         c();\n     }"}, {"sha": "a7e34e407a382c7b0f215d34e2bca3bf61d50e8c", "filename": "src/test/ui/rust-2018/edition-lint-nested-paths.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0749ec67bc927eba90f4be5544055d3cd9040e58/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0749ec67bc927eba90f4be5544055d3cd9040e58/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-paths.rs?ref=0749ec67bc927eba90f4be5544055d3cd9040e58", "patch": "@@ -8,10 +8,6 @@ use foo::{a, b};\n //~| this is accepted in the current edition\n //~| ERROR absolute paths must start with\n //~| this is accepted in the current edition\n-//~| ERROR absolute paths must start with\n-//~| this is accepted in the current edition\n-//~| ERROR absolute paths must start with\n-//~| this is accepted in the current edition\n \n mod foo {\n     crate fn a() {}\n@@ -29,8 +25,6 @@ fn main() {\n         //~| this is accepted in the current edition\n         //~| ERROR absolute paths must start with\n         //~| this is accepted in the current edition\n-        //~| ERROR absolute paths must start with\n-        //~| this is accepted in the current edition\n         x::a();\n         c();\n     }"}, {"sha": "24b17f212eb15bd4ce409935b849d6bb1159030e", "filename": "src/test/ui/rust-2018/edition-lint-nested-paths.stderr", "status": "modified", "additions": 3, "deletions": 30, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/0749ec67bc927eba90f4be5544055d3cd9040e58/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0749ec67bc927eba90f4be5544055d3cd9040e58/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-paths.stderr?ref=0749ec67bc927eba90f4be5544055d3cd9040e58", "patch": "@@ -22,34 +22,7 @@ LL | use foo::{a, b};\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n-  --> $DIR/edition-lint-nested-paths.rs:6:5\n-   |\n-LL | use foo::{a, b};\n-   |     ^^^^^^^^^^^ help: use `crate`: `crate::foo::{a, b}`\n-   |\n-   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n-   = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n-\n-error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n-  --> $DIR/edition-lint-nested-paths.rs:6:5\n-   |\n-LL | use foo::{a, b};\n-   |     ^^^^^^^^^^^ help: use `crate`: `crate::foo::{a, b}`\n-   |\n-   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n-   = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n-\n-error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n-  --> $DIR/edition-lint-nested-paths.rs:27:13\n-   |\n-LL |         use foo::{self as x, c};\n-   |             ^^^^^^^^^^^^^^^^^^^ help: use `crate`: `crate::foo::{self as x, c}`\n-   |\n-   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n-   = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n-\n-error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n-  --> $DIR/edition-lint-nested-paths.rs:27:13\n+  --> $DIR/edition-lint-nested-paths.rs:23:13\n    |\n LL |         use foo::{self as x, c};\n    |             ^^^^^^^^^^^^^^^^^^^ help: use `crate`: `crate::foo::{self as x, c}`\n@@ -58,13 +31,13 @@ LL |         use foo::{self as x, c};\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n-  --> $DIR/edition-lint-nested-paths.rs:27:13\n+  --> $DIR/edition-lint-nested-paths.rs:23:13\n    |\n LL |         use foo::{self as x, c};\n    |             ^^^^^^^^^^^^^^^^^^^ help: use `crate`: `crate::foo::{self as x, c}`\n    |\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 4 previous errors\n "}, {"sha": "47f82c51daeaaaa65cf31c6a9b1ce34536e38a80", "filename": "src/test/ui/rust-2018/edition-lint-paths.fixed", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0749ec67bc927eba90f4be5544055d3cd9040e58/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0749ec67bc927eba90f4be5544055d3cd9040e58/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths.fixed?ref=0749ec67bc927eba90f4be5544055d3cd9040e58", "patch": "@@ -12,8 +12,6 @@ pub mod foo {\n     use crate::bar::Bar;\n     //~^ ERROR absolute\n     //~| WARN this is accepted in the current edition\n-    //~| ERROR absolute\n-    //~| WARN this is accepted in the current edition\n \n     use super::bar::Bar2;\n     use crate::bar::Bar3;\n@@ -42,8 +40,6 @@ pub mod foo {\n use crate::bar::Bar;\n //~^ ERROR absolute\n //~| WARN this is accepted in the current edition\n-//~| ERROR absolute\n-//~| WARN this is accepted in the current edition\n \n pub mod bar {\n     use edition_lint_paths as foo;\n@@ -61,8 +57,6 @@ mod baz {\n impl crate::foo::SomeTrait for u32 {}\n //~^ ERROR absolute\n //~| WARN this is accepted in the current edition\n-//~| ERROR absolute\n-//~| WARN this is accepted in the current edition\n \n fn main() {\n     let x = crate::bar::Bar;"}, {"sha": "e278983da4a9041ababda4b8897e1b3b3cda3857", "filename": "src/test/ui/rust-2018/edition-lint-paths.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0749ec67bc927eba90f4be5544055d3cd9040e58/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0749ec67bc927eba90f4be5544055d3cd9040e58/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths.rs?ref=0749ec67bc927eba90f4be5544055d3cd9040e58", "patch": "@@ -12,8 +12,6 @@ pub mod foo {\n     use bar::Bar;\n     //~^ ERROR absolute\n     //~| WARN this is accepted in the current edition\n-    //~| ERROR absolute\n-    //~| WARN this is accepted in the current edition\n \n     use super::bar::Bar2;\n     use crate::bar::Bar3;\n@@ -42,8 +40,6 @@ pub mod foo {\n use bar::Bar;\n //~^ ERROR absolute\n //~| WARN this is accepted in the current edition\n-//~| ERROR absolute\n-//~| WARN this is accepted in the current edition\n \n pub mod bar {\n     use edition_lint_paths as foo;\n@@ -61,8 +57,6 @@ mod baz {\n impl ::foo::SomeTrait for u32 {}\n //~^ ERROR absolute\n //~| WARN this is accepted in the current edition\n-//~| ERROR absolute\n-//~| WARN this is accepted in the current edition\n \n fn main() {\n     let x = ::bar::Bar;"}, {"sha": "1ded8cd3694c053317c6ec34564158b821742550", "filename": "src/test/ui/rust-2018/edition-lint-paths.stderr", "status": "modified", "additions": 9, "deletions": 36, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/0749ec67bc927eba90f4be5544055d3cd9040e58/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0749ec67bc927eba90f4be5544055d3cd9040e58/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths.stderr?ref=0749ec67bc927eba90f4be5544055d3cd9040e58", "patch": "@@ -13,16 +13,7 @@ LL | #![deny(absolute_paths_not_starting_with_crate)]\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n-  --> $DIR/edition-lint-paths.rs:12:9\n-   |\n-LL |     use bar::Bar;\n-   |         ^^^^^^^^ help: use `crate`: `crate::bar::Bar`\n-   |\n-   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n-   = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n-\n-error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n-  --> $DIR/edition-lint-paths.rs:21:9\n+  --> $DIR/edition-lint-paths.rs:19:9\n    |\n LL |     use bar;\n    |         ^^^ help: use `crate`: `crate::bar`\n@@ -31,7 +22,7 @@ LL |     use bar;\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n-  --> $DIR/edition-lint-paths.rs:27:9\n+  --> $DIR/edition-lint-paths.rs:25:9\n    |\n LL |     use {main, Bar as SomethingElse};\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `crate`: `crate::{main, Bar as SomethingElse}`\n@@ -40,7 +31,7 @@ LL |     use {main, Bar as SomethingElse};\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n-  --> $DIR/edition-lint-paths.rs:27:9\n+  --> $DIR/edition-lint-paths.rs:25:9\n    |\n LL |     use {main, Bar as SomethingElse};\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `crate`: `crate::{main, Bar as SomethingElse}`\n@@ -49,7 +40,7 @@ LL |     use {main, Bar as SomethingElse};\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n-  --> $DIR/edition-lint-paths.rs:27:9\n+  --> $DIR/edition-lint-paths.rs:25:9\n    |\n LL |     use {main, Bar as SomethingElse};\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `crate`: `crate::{main, Bar as SomethingElse}`\n@@ -58,7 +49,7 @@ LL |     use {main, Bar as SomethingElse};\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n-  --> $DIR/edition-lint-paths.rs:42:5\n+  --> $DIR/edition-lint-paths.rs:40:5\n    |\n LL | use bar::Bar;\n    |     ^^^^^^^^ help: use `crate`: `crate::bar::Bar`\n@@ -67,16 +58,7 @@ LL | use bar::Bar;\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n-  --> $DIR/edition-lint-paths.rs:42:5\n-   |\n-LL | use bar::Bar;\n-   |     ^^^^^^^^ help: use `crate`: `crate::bar::Bar`\n-   |\n-   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n-   = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n-\n-error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n-  --> $DIR/edition-lint-paths.rs:56:9\n+  --> $DIR/edition-lint-paths.rs:52:9\n    |\n LL |     use *;\n    |         ^ help: use `crate`: `crate::*`\n@@ -85,16 +67,7 @@ LL |     use *;\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n-  --> $DIR/edition-lint-paths.rs:61:6\n-   |\n-LL | impl ::foo::SomeTrait for u32 {}\n-   |      ^^^^^^^^^^^^^^^^ help: use `crate`: `crate::foo::SomeTrait`\n-   |\n-   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n-   = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n-\n-error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n-  --> $DIR/edition-lint-paths.rs:61:6\n+  --> $DIR/edition-lint-paths.rs:57:6\n    |\n LL | impl ::foo::SomeTrait for u32 {}\n    |      ^^^^^^^^^^^^^^^^ help: use `crate`: `crate::foo::SomeTrait`\n@@ -103,13 +76,13 @@ LL | impl ::foo::SomeTrait for u32 {}\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n-  --> $DIR/edition-lint-paths.rs:68:13\n+  --> $DIR/edition-lint-paths.rs:62:13\n    |\n LL |     let x = ::bar::Bar;\n    |             ^^^^^^^^^^ help: use `crate`: `crate::bar::Bar`\n    |\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n-error: aborting due to 12 previous errors\n+error: aborting due to 9 previous errors\n "}, {"sha": "ea832ef3e7d70b52387367238f5eef453ef73303", "filename": "src/test/ui/rust-2018/extern-crate-rename.fixed", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0749ec67bc927eba90f4be5544055d3cd9040e58/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-rename.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0749ec67bc927eba90f4be5544055d3cd9040e58/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-rename.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-rename.fixed?ref=0749ec67bc927eba90f4be5544055d3cd9040e58", "patch": "@@ -12,8 +12,6 @@ extern crate edition_lint_paths as my_crate;\n use crate::my_crate::foo;\n //~^ ERROR absolute paths must start\n //~| WARNING this is accepted in the current edition\n-//~| ERROR absolute paths must start\n-//~| WARNING this is accepted in the current edition\n \n fn main() {\n     foo();"}, {"sha": "b1f617dd8847844b6f74eb4509ab1b5d2b0efb20", "filename": "src/test/ui/rust-2018/extern-crate-rename.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0749ec67bc927eba90f4be5544055d3cd9040e58/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-rename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0749ec67bc927eba90f4be5544055d3cd9040e58/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-rename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-rename.rs?ref=0749ec67bc927eba90f4be5544055d3cd9040e58", "patch": "@@ -12,8 +12,6 @@ extern crate edition_lint_paths as my_crate;\n use my_crate::foo;\n //~^ ERROR absolute paths must start\n //~| WARNING this is accepted in the current edition\n-//~| ERROR absolute paths must start\n-//~| WARNING this is accepted in the current edition\n \n fn main() {\n     foo();"}, {"sha": "4bccbc51223f3b5c9ca2fb809d433ff8e920a162", "filename": "src/test/ui/rust-2018/extern-crate-rename.stderr", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0749ec67bc927eba90f4be5544055d3cd9040e58/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-rename.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0749ec67bc927eba90f4be5544055d3cd9040e58/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-rename.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-rename.stderr?ref=0749ec67bc927eba90f4be5544055d3cd9040e58", "patch": "@@ -12,14 +12,5 @@ LL | #![deny(absolute_paths_not_starting_with_crate)]\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n-error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n-  --> $DIR/extern-crate-rename.rs:12:5\n-   |\n-LL | use my_crate::foo;\n-   |     ^^^^^^^^^^^^^ help: use `crate`: `crate::my_crate::foo`\n-   |\n-   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n-   = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}, {"sha": "9b0b0dd8ee1d43f810691719bb340c9b3da11f37", "filename": "src/test/ui/rust-2018/extern-crate-submod.fixed", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0749ec67bc927eba90f4be5544055d3cd9040e58/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-submod.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0749ec67bc927eba90f4be5544055d3cd9040e58/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-submod.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-submod.fixed?ref=0749ec67bc927eba90f4be5544055d3cd9040e58", "patch": "@@ -19,9 +19,6 @@ mod m {\n use crate::m::edition_lint_paths::foo;\n //~^ ERROR absolute paths must start\n //~| WARNING this is accepted in the current edition\n-//~| ERROR absolute paths must start\n-//~| WARNING this is accepted in the current edition\n-\n \n fn main() {\n     foo();"}, {"sha": "dfce9128c51148494f86cd73af5fc9506ee0f42b", "filename": "src/test/ui/rust-2018/extern-crate-submod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0749ec67bc927eba90f4be5544055d3cd9040e58/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-submod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0749ec67bc927eba90f4be5544055d3cd9040e58/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-submod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-submod.rs?ref=0749ec67bc927eba90f4be5544055d3cd9040e58", "patch": "@@ -19,9 +19,6 @@ mod m {\n use m::edition_lint_paths::foo;\n //~^ ERROR absolute paths must start\n //~| WARNING this is accepted in the current edition\n-//~| ERROR absolute paths must start\n-//~| WARNING this is accepted in the current edition\n-\n \n fn main() {\n     foo();"}, {"sha": "3c75319aedaedfc320dc904d13bab8f1528ec851", "filename": "src/test/ui/rust-2018/extern-crate-submod.stderr", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0749ec67bc927eba90f4be5544055d3cd9040e58/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-submod.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0749ec67bc927eba90f4be5544055d3cd9040e58/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-submod.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-submod.stderr?ref=0749ec67bc927eba90f4be5544055d3cd9040e58", "patch": "@@ -12,14 +12,5 @@ LL | #![deny(absolute_paths_not_starting_with_crate)]\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n-error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n-  --> $DIR/extern-crate-submod.rs:19:5\n-   |\n-LL | use m::edition_lint_paths::foo;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `crate`: `crate::m::edition_lint_paths::foo`\n-   |\n-   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n-   = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}]}