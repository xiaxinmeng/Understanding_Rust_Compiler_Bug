{"sha": "cbf8ad4a40425b9a82ff5e0eb43cbd9c36366f53", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiZjhhZDRhNDA0MjViOWE4MmZmNWUwZWI0M2NiZDljMzYzNjZmNTM=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-04-01T06:26:05Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-04-10T12:40:26Z"}, "message": "Make Session.crate_types thread-safe", "tree": {"sha": "b407b30451760caef45b8a414d609d6e00ffc5b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b407b30451760caef45b8a414d609d6e00ffc5b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cbf8ad4a40425b9a82ff5e0eb43cbd9c36366f53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cbf8ad4a40425b9a82ff5e0eb43cbd9c36366f53", "html_url": "https://github.com/rust-lang/rust/commit/cbf8ad4a40425b9a82ff5e0eb43cbd9c36366f53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cbf8ad4a40425b9a82ff5e0eb43cbd9c36366f53/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "046af1c71060018547f4f5102622378b060cdbba", "url": "https://api.github.com/repos/rust-lang/rust/commits/046af1c71060018547f4f5102622378b060cdbba", "html_url": "https://github.com/rust-lang/rust/commit/046af1c71060018547f4f5102622378b060cdbba"}], "stats": {"total": 32, "additions": 18, "deletions": 14}, "files": [{"sha": "499c45e28fe804574301f0aa391563386ebea5f0", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cbf8ad4a40425b9a82ff5e0eb43cbd9c36366f53/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf8ad4a40425b9a82ff5e0eb43cbd9c36366f53/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=cbf8ad4a40425b9a82ff5e0eb43cbd9c36366f53", "patch": "@@ -92,7 +92,7 @@ pub struct Session {\n     pub one_time_diagnostics: RefCell<FxHashSet<(DiagnosticMessageId, Option<Span>, String)>>,\n     pub plugin_llvm_passes: OneThread<RefCell<Vec<String>>>,\n     pub plugin_attributes: OneThread<RefCell<Vec<(String, AttributeType)>>>,\n-    pub crate_types: RefCell<Vec<config::CrateType>>,\n+    pub crate_types: Once<Vec<config::CrateType>>,\n     pub dependency_formats: RefCell<dependency_format::Dependencies>,\n     /// The crate_disambiguator is constructed out of all the `-C metadata`\n     /// arguments passed to the compiler. Its value together with the crate-name\n@@ -1096,7 +1096,7 @@ pub fn build_session_(\n         one_time_diagnostics: RefCell::new(FxHashSet()),\n         plugin_llvm_passes: OneThread::new(RefCell::new(Vec::new())),\n         plugin_attributes: OneThread::new(RefCell::new(Vec::new())),\n-        crate_types: RefCell::new(Vec::new()),\n+        crate_types: Once::new(),\n         dependency_formats: RefCell::new(FxHashMap()),\n         crate_disambiguator: Once::new(),\n         features: Once::new(),"}, {"sha": "4071b804def6c4f77f72be1b54f3ec4d816e7187", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cbf8ad4a40425b9a82ff5e0eb43cbd9c36366f53/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf8ad4a40425b9a82ff5e0eb43cbd9c36366f53/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=cbf8ad4a40425b9a82ff5e0eb43cbd9c36366f53", "patch": "@@ -652,7 +652,8 @@ pub fn phase_2_configure_and_expand_inner<'a, F>(sess: &'a Session,\n     // these need to be set \"early\" so that expansion sees `quote` if enabled.\n     sess.init_features(features);\n \n-    *sess.crate_types.borrow_mut() = collect_crate_types(sess, &krate.attrs);\n+    let crate_types = collect_crate_types(sess, &krate.attrs);\n+    sess.crate_types.set(crate_types);\n \n     let disambiguator = compute_crate_disambiguator(sess);\n     sess.crate_disambiguator.set(disambiguator);"}, {"sha": "f501b1739eb9c6437882e1bd4d86442215364654", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cbf8ad4a40425b9a82ff5e0eb43cbd9c36366f53/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf8ad4a40425b9a82ff5e0eb43cbd9c36366f53/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=cbf8ad4a40425b9a82ff5e0eb43cbd9c36366f53", "patch": "@@ -154,13 +154,16 @@ fn get_llvm_opt_size(optimize: config::OptLevel) -> llvm::CodeGenOptSize {\n     }\n }\n \n-pub fn create_target_machine(sess: &Session) -> TargetMachineRef {\n-    target_machine_factory(sess)().unwrap_or_else(|err| {\n+pub fn create_target_machine(sess: &Session, find_features: bool) -> TargetMachineRef {\n+    target_machine_factory(sess, find_features)().unwrap_or_else(|err| {\n         llvm_err(sess.diagnostic(), err).raise()\n     })\n }\n \n-pub fn target_machine_factory(sess: &Session)\n+// If find_features is true this won't access `sess.crate_types` by assuming\n+// that `is_pie_binary` is false. When we discover LLVM target features\n+// `sess.crate_types` is uninitialized so we cannot access it.\n+pub fn target_machine_factory(sess: &Session, find_features: bool)\n     -> Arc<Fn() -> Result<TargetMachineRef, String> + Send + Sync>\n {\n     let reloc_model = get_reloc_model(sess);\n@@ -201,7 +204,7 @@ pub fn target_machine_factory(sess: &Session)\n     };\n     let cpu = CString::new(cpu.as_bytes()).unwrap();\n     let features = CString::new(target_feature(sess).as_bytes()).unwrap();\n-    let is_pie_binary = is_pie_binary(sess);\n+    let is_pie_binary = !find_features && is_pie_binary(sess);\n     let trap_unreachable = sess.target.target.options.trap_unreachable;\n \n     Arc::new(move || {\n@@ -1510,7 +1513,7 @@ fn start_executing_work(tcx: TyCtxt,\n         regular_module_config: modules_config,\n         metadata_module_config: metadata_config,\n         allocator_module_config: allocator_config,\n-        tm_factory: target_machine_factory(tcx.sess),\n+        tm_factory: target_machine_factory(tcx.sess, false),\n         total_cgus,\n         msvc_imps_needed: msvc_imps_needed(tcx),\n         target_pointer_width: tcx.sess.target.target.target_pointer_width.clone(),"}, {"sha": "c2d94a17f03dd828a7834ca9fca76cb8f57b651d", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cbf8ad4a40425b9a82ff5e0eb43cbd9c36366f53/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf8ad4a40425b9a82ff5e0eb43cbd9c36366f53/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=cbf8ad4a40425b9a82ff5e0eb43cbd9c36366f53", "patch": "@@ -737,7 +737,7 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         source: ModuleSource::Translated(ModuleLlvm {\n             llcx: metadata_llcx,\n             llmod: metadata_llmod,\n-            tm: create_target_machine(tcx.sess),\n+            tm: create_target_machine(tcx.sess, false),\n         }),\n         kind: ModuleKind::Metadata,\n     };\n@@ -803,7 +803,7 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             let modules = ModuleLlvm {\n                 llmod,\n                 llcx,\n-                tm: create_target_machine(tcx.sess),\n+                tm: create_target_machine(tcx.sess, false),\n             };\n             time(tcx.sess, \"write allocator module\", || {\n                 allocator::trans(tcx, &modules, kind)\n@@ -1260,7 +1260,7 @@ fn compile_codegen_unit<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             let llvm_module = ModuleLlvm {\n                 llcx: cx.llcx,\n                 llmod: cx.llmod,\n-                tm: create_target_machine(cx.sess()),\n+                tm: create_target_machine(cx.sess(), false),\n             };\n \n             ModuleTranslation {"}, {"sha": "fe8a7052bdff7b471e510968ee705781847c7465", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbf8ad4a40425b9a82ff5e0eb43cbd9c36366f53/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf8ad4a40425b9a82ff5e0eb43cbd9c36366f53/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=cbf8ad4a40425b9a82ff5e0eb43cbd9c36366f53", "patch": "@@ -162,7 +162,7 @@ pub unsafe fn create_context_and_module(sess: &Session, mod_name: &str) -> (Cont\n \n     // Ensure the data-layout values hardcoded remain the defaults.\n     if sess.target.target.options.is_builtin {\n-        let tm = ::back::write::create_target_machine(sess);\n+        let tm = ::back::write::create_target_machine(sess, false);\n         llvm::LLVMRustSetDataLayoutFromTargetMachine(llmod, tm);\n         llvm::LLVMRustDisposeTargetMachine(tm);\n "}, {"sha": "85952ea7796907a797682b176bd6d46fa32ea06e", "filename": "src/librustc_trans/llvm_util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cbf8ad4a40425b9a82ff5e0eb43cbd9c36366f53/src%2Flibrustc_trans%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf8ad4a40425b9a82ff5e0eb43cbd9c36366f53/src%2Flibrustc_trans%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fllvm_util.rs?ref=cbf8ad4a40425b9a82ff5e0eb43cbd9c36366f53", "patch": "@@ -140,7 +140,7 @@ pub fn to_llvm_feature<'a>(sess: &Session, s: &'a str) -> &'a str {\n }\n \n pub fn target_features(sess: &Session) -> Vec<Symbol> {\n-    let target_machine = create_target_machine(sess);\n+    let target_machine = create_target_machine(sess, true);\n     target_feature_whitelist(sess)\n         .iter()\n         .filter(|feature| {\n@@ -178,7 +178,7 @@ pub fn print_passes() {\n \n pub(crate) fn print(req: PrintRequest, sess: &Session) {\n     require_inited();\n-    let tm = create_target_machine(sess);\n+    let tm = create_target_machine(sess, true);\n     unsafe {\n         match req {\n             PrintRequest::TargetCPUs => llvm::LLVMRustPrintTargetCPUs(tm),"}]}