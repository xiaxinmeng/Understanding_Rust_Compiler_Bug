{"sha": "b985399831b26e253e49e2e32fed1f657c8ca525", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5ODUzOTk4MzFiMjZlMjUzZTQ5ZTJlMzJmZWQxZjY1N2M4Y2E1MjU=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-02-06T08:52:08Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-03-08T07:34:16Z"}, "message": "Reduce code duplication", "tree": {"sha": "27e8fea43bbcbb5ca487203b2d196e31cd55f789", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27e8fea43bbcbb5ca487203b2d196e31cd55f789"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b985399831b26e253e49e2e32fed1f657c8ca525", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlqg53gACgkQpp+NIls6\n19kocw//RBFrsKOalwfdhVj/9NVP5uHgMoh+FnKXIQwQGPV/1X3EZm82qyecJJR/\n6xobf76/KrVtsRUh0ZFjyddKsKHfgf4qdCl5I1XrGlFhmkBfbgUguC8eC1R8oyrY\nd2C01Ath2uXDnktcYdcF9G6NGyDKJ7OKEPcuu+b3YgMJkYj/zGKVw10Ej/kfJDys\nBEzAExyfJFVz0dxk5BXzVmlEG0NehJkVq+yaeUTRVyjE7mP/M4gnGz7JYxyr+m7o\nbe2Gv/ezuXpAfFR3xp5vHzidXlA9FXBTaFhy72q0ZynKyJfsz/InJ86mX0Ghc0hP\nsRTO0zR8DK19JXv9MzD0g8vL4m4AC0VTqM4xzI8CQYSVmUYKPQ1D0bIgOJ6WC4o/\ncox6ii8hYpyqRAyGIewOtowpLBvg2P3knbBaoDA/LWUHeQ+7t5Ujtjum5W3tVDKP\n8y72x2fNBVC1Y8F/W43796HvOap5P3amLCTM03u5uOsoYes6RSnkvq7FXoJqusob\nZFSRVCizjfwjHtY5FQGcWCJ52KGledJAYiCyt4A/Rfa1nBf5BzC7+g7awm/dXiEF\nVSOFsnELjSXW2NvDuNYaU5vB9RtlXNL3GXuxR+Yy7hD/oqrAlsTnndLpRFE741SH\n8QFmSmaDBrL5Bn0yL7vwhWBtJGiuBSf/bzn2ZuZEvrGH+PWl3UM=\n=lOSM\n-----END PGP SIGNATURE-----", "payload": "tree 27e8fea43bbcbb5ca487203b2d196e31cd55f789\nparent 3c663d06075489e8290905da74b6306cc9c3f0e8\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1517907128 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1520494456 +0100\n\nReduce code duplication\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b985399831b26e253e49e2e32fed1f657c8ca525", "html_url": "https://github.com/rust-lang/rust/commit/b985399831b26e253e49e2e32fed1f657c8ca525", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b985399831b26e253e49e2e32fed1f657c8ca525/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c663d06075489e8290905da74b6306cc9c3f0e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c663d06075489e8290905da74b6306cc9c3f0e8", "html_url": "https://github.com/rust-lang/rust/commit/3c663d06075489e8290905da74b6306cc9c3f0e8"}], "stats": {"total": 98, "additions": 32, "deletions": 66}, "files": [{"sha": "d5dde0164fb5db2457efe3f46add40122fcb44be", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 32, "deletions": 66, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/b985399831b26e253e49e2e32fed1f657c8ca525/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b985399831b26e253e49e2e32fed1f657c8ca525/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=b985399831b26e253e49e2e32fed1f657c8ca525", "patch": "@@ -775,6 +775,26 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n         span: Span,\n     ) -> Pattern<'tcx> {\n         debug!(\"const_to_pat: cv={:#?}\", cv);\n+        let adt_subpattern = |i, variant_opt| {\n+            let field = Field::new(i);\n+            let val = match cv.val {\n+                ConstVal::Value(miri) => const_val_field(\n+                    self.tcx, self.param_env, instance, span,\n+                    variant_opt, field, miri, cv.ty,\n+                ).unwrap(),\n+                _ => bug!(\"{:#?} is not a valid adt\", cv),\n+            };\n+            self.const_to_pat(instance, val, id, span)\n+        };\n+        let adt_subpatterns = |n, variant_opt| {\n+            (0..n).map(|i| {\n+                let field = Field::new(i);\n+                FieldPattern {\n+                    field,\n+                    pattern: adt_subpattern(i, variant_opt),\n+                }\n+            }).collect::<Vec<_>>()\n+        };\n         let kind = match cv.ty.sty {\n             ty::TyFloat(_) => {\n                 let id = self.tcx.hir.hir_to_node_id(id);\n@@ -811,91 +831,37 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                             .discriminants(self.tcx)\n                             .position(|var| var.val == discr)\n                             .unwrap();\n+                        let subpatterns = adt_subpatterns(\n+                            adt_def.variants[variant_index].fields.len(),\n+                            Some(variant_index),\n+                        );\n                         PatternKind::Variant {\n                             adt_def,\n                             substs,\n                             variant_index,\n-                            subpatterns: adt_def\n-                                .variants[variant_index]\n-                                .fields\n-                                .iter()\n-                                .enumerate()\n-                                .map(|(i, _)| {\n-                                let field = Field::new(i);\n-                                let val = match cv.val {\n-                                    ConstVal::Value(miri) => const_val_field(\n-                                        self.tcx, self.param_env, instance, span,\n-                                        Some(variant_index), field, miri, cv.ty,\n-                                    ).unwrap(),\n-                                    _ => bug!(\"{:#?} is not a valid tuple\", cv),\n-                                };\n-                                FieldPattern {\n-                                    field,\n-                                    pattern: self.const_to_pat(instance, val, id, span),\n-                                }\n-                            }).collect(),\n+                            subpatterns,\n                         }\n                     },\n-                    _ => return Pattern {\n-                        span,\n-                        ty: cv.ty,\n-                        kind: Box::new(PatternKind::Constant {\n-                            value: cv,\n-                        }),\n+                    ConstVal::Unevaluated(..) =>\n+                        span_bug!(span, \"{:#?} is not a valid enum constant\", cv),\n                     }\n-                }\n             },\n             ty::TyAdt(adt_def, _) => {\n                 let struct_var = adt_def.non_enum_variant();\n                 PatternKind::Leaf {\n-                    subpatterns: struct_var.fields.iter().enumerate().map(|(i, _)| {\n-                        let field = Field::new(i);\n-                        let val = match cv.val {\n-                            ConstVal::Value(miri) => const_val_field(\n-                                self.tcx, self.param_env, instance, span,\n-                                None, field, miri, cv.ty,\n-                            ).unwrap(),\n-                            _ => bug!(\"{:#?} is not a valid tuple\", cv),\n-                        };\n-                        FieldPattern {\n-                            field,\n-                            pattern: self.const_to_pat(instance, val, id, span),\n+                    subpatterns: adt_subpatterns(struct_var.fields.len(), None),\n                         }\n-                    }).collect()\n                 }\n-            }\n             ty::TyTuple(fields, _) => {\n                 PatternKind::Leaf {\n-                    subpatterns: (0..fields.len()).map(|i| {\n-                        let field = Field::new(i);\n-                        let val = match cv.val {\n-                            ConstVal::Value(miri) => const_val_field(\n-                                self.tcx, self.param_env, instance, span,\n-                                None, field, miri, cv.ty,\n-                            ).unwrap(),\n-                            _ => bug!(\"{:#?} is not a valid tuple\", cv),\n-                        };\n-                        FieldPattern {\n-                            field,\n-                            pattern: self.const_to_pat(instance, val, id, span),\n-                        }\n-                    }).collect()\n+                    subpatterns: adt_subpatterns(fields.len(), None),\n                 }\n             }\n             ty::TyArray(_, n) => {\n                 PatternKind::Array {\n-                    prefix: (0..n.val.unwrap_u64()).map(|i| {\n-                        let i = i as usize;\n-                        let field = Field::new(i);\n-                        let val = match cv.val {\n-                            ConstVal::Value(miri) => const_val_field(\n-                                self.tcx, self.param_env, instance, span,\n-                                None, field, miri, cv.ty,\n-                            ).unwrap(),\n-                            _ => bug!(\"{:#?} is not a valid tuple\", cv),\n-                        };\n-                        self.const_to_pat(instance, val, id, span)\n-                    }).collect(),\n+                    prefix: (0..n.val.unwrap_u64())\n+                        .map(|i| adt_subpattern(i as usize, None))\n+                        .collect(),\n                     slice: None,\n                     suffix: Vec::new(),\n                 }"}]}