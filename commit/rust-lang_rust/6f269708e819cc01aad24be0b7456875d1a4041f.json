{"sha": "6f269708e819cc01aad24be0b7456875d1a4041f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmMjY5NzA4ZTgxOWNjMDFhYWQyNGJlMGI3NDU2ODc1ZDFhNDA0MWY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-07-12T18:13:43Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-07-12T18:13:43Z"}, "message": "internal: get rid of a call to slow O(N) visibility_of function\n\nInstead of inferring module's declared visibility by looking at the\nscope of its parent, let's just remeber the declared visibility in the\nDefMap.", "tree": {"sha": "adfe74b49b824281fa8cd1c4a09628ff2fa0b187", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/adfe74b49b824281fa8cd1c4a09628ff2fa0b187"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f269708e819cc01aad24be0b7456875d1a4041f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f269708e819cc01aad24be0b7456875d1a4041f", "html_url": "https://github.com/rust-lang/rust/commit/6f269708e819cc01aad24be0b7456875d1a4041f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f269708e819cc01aad24be0b7456875d1a4041f/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8d19fedb8b2dc23703f9860eb39383422d92ae3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8d19fedb8b2dc23703f9860eb39383422d92ae3", "html_url": "https://github.com/rust-lang/rust/commit/c8d19fedb8b2dc23703f9860eb39383422d92ae3"}], "stats": {"total": 42, "additions": 29, "deletions": 13}, "files": [{"sha": "9c74d8c5f744f755a22d163330341e1cad051a4b", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6f269708e819cc01aad24be0b7456875d1a4041f/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f269708e819cc01aad24be0b7456875d1a4041f/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=6f269708e819cc01aad24be0b7456875d1a4041f", "patch": "@@ -430,8 +430,16 @@ impl Module {\n             .collect()\n     }\n \n+    pub fn visibility(self, db: &dyn HirDatabase) -> Visibility {\n+        let def_map = self.id.def_map(db.upcast());\n+        let module_data = &def_map[self.id.local_id];\n+        module_data.visibility\n+    }\n+\n     pub fn visibility_of(self, db: &dyn HirDatabase, def: &ModuleDef) -> Option<Visibility> {\n-        self.id.def_map(db.upcast())[self.id.local_id].scope.visibility_of((*def).into())\n+        let def_map = self.id.def_map(db.upcast());\n+        let module_data = &def_map[self.id.local_id];\n+        module_data.scope.visibility_of((*def).into())\n     }\n \n     pub fn diagnostics(self, db: &dyn HirDatabase, acc: &mut Vec<AnyDiagnostic>) {"}, {"sha": "cd314c8c9ae3cc0f9edcaf4a42094a3bf1760fc7", "filename": "crates/hir_def/src/nameres.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6f269708e819cc01aad24be0b7456875d1a4041f/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f269708e819cc01aad24be0b7456875d1a4041f/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres.rs?ref=6f269708e819cc01aad24be0b7456875d1a4041f", "patch": "@@ -72,6 +72,7 @@ use crate::{\n     nameres::{diagnostics::DefDiagnostic, path_resolution::ResolveMode},\n     path::ModPath,\n     per_ns::PerNs,\n+    visibility::Visibility,\n     AstId, BlockId, BlockLoc, LocalModuleId, ModuleDefId, ModuleId,\n };\n \n@@ -192,12 +193,14 @@ impl ModuleOrigin {\n \n #[derive(Debug, PartialEq, Eq)]\n pub struct ModuleData {\n+    /// Where does this module come from?\n+    pub origin: ModuleOrigin,\n+    /// Declared visibility of this module.\n+    pub visibility: Visibility,\n+\n     pub parent: Option<LocalModuleId>,\n     pub children: FxHashMap<Name, LocalModuleId>,\n     pub scope: ItemScope,\n-\n-    /// Where does this module come from?\n-    pub origin: ModuleOrigin,\n }\n \n impl DefMap {\n@@ -243,7 +246,15 @@ impl DefMap {\n \n     fn empty(krate: CrateId, edition: Edition, root_module_origin: ModuleOrigin) -> DefMap {\n         let mut modules: Arena<ModuleData> = Arena::default();\n-        let root = modules.alloc(ModuleData::new(root_module_origin));\n+\n+        let local_id = LocalModuleId::from_raw(la_arena::RawIdx::from(0));\n+        // NB: we use `None` as block here, which would be wrong for implicit\n+        // modules declared by blocks with items. At the moment, we don't use\n+        // this visibility for anything outside IDE, so that's probably OK.\n+        let visibility = Visibility::Module(ModuleId { krate, local_id, block: None });\n+        let root = modules.alloc(ModuleData::new(root_module_origin, visibility));\n+        assert_eq!(local_id, root);\n+\n         DefMap {\n             _c: Count::new(),\n             block: None,\n@@ -448,12 +459,13 @@ impl DefMap {\n }\n \n impl ModuleData {\n-    pub(crate) fn new(origin: ModuleOrigin) -> Self {\n+    pub(crate) fn new(origin: ModuleOrigin, visibility: Visibility) -> Self {\n         ModuleData {\n+            origin,\n+            visibility,\n             parent: None,\n             children: FxHashMap::default(),\n             scope: ItemScope::default(),\n-            origin,\n         }\n     }\n "}, {"sha": "79452bba548f2e12cec2956193e1bc040890ea32", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f269708e819cc01aad24be0b7456875d1a4041f/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f269708e819cc01aad24be0b7456875d1a4041f/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=6f269708e819cc01aad24be0b7456875d1a4041f", "patch": "@@ -1629,7 +1629,7 @@ impl ModCollector<'_, '_> {\n                 ModuleOrigin::File { declaration, definition, is_mod_rs }\n             }\n         };\n-        let res = modules.alloc(ModuleData::new(origin));\n+        let res = modules.alloc(ModuleData::new(origin, vis));\n         modules[res].parent = Some(self.module_id);\n         for (name, mac) in modules[self.module_id].scope.collect_legacy_macros() {\n             modules[res].scope.define_legacy_macro(name, mac)"}, {"sha": "b638e35112649db134eac58bd8bbf033a5fe1ba5", "filename": "crates/ide_db/src/defs.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f269708e819cc01aad24be0b7456875d1a4041f/crates%2Fide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f269708e819cc01aad24be0b7456875d1a4041f/crates%2Fide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fdefs.rs?ref=6f269708e819cc01aad24be0b7456875d1a4041f", "patch": "@@ -45,11 +45,7 @@ impl Definition {\n         match self {\n             Definition::Field(sf) => Some(sf.visibility(db)),\n             Definition::ModuleDef(def) => match def {\n-                ModuleDef::Module(it) => {\n-                    // FIXME: should work like other cases here.\n-                    let parent = it.parent(db)?;\n-                    parent.visibility_of(db, def)\n-                }\n+                ModuleDef::Module(it) => Some(it.visibility(db)),\n                 ModuleDef::Function(it) => Some(it.visibility(db)),\n                 ModuleDef::Adt(it) => Some(it.visibility(db)),\n                 ModuleDef::Const(it) => Some(it.visibility(db)),"}]}