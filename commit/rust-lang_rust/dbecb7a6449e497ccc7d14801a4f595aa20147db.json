{"sha": "dbecb7a6449e497ccc7d14801a4f595aa20147db", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiZWNiN2E2NDQ5ZTQ5N2NjYzdkMTQ4MDFhNGY1OTVhYTIwMTQ3ZGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-07T00:28:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-07T00:28:26Z"}, "message": "Auto merge of #54782 - pnkfelix:issue-54556-semi-on-tail-diagnostic, r=nikomatsakis\n\nNLL: temps in block tail expression diagnostic\n\nThis change adds a diagnostic that explains when temporaries in a block tail expression live longer than block local variables that they borrow, and attempts to suggest turning the tail expresion into a statement (either by adding a semicolon at the end, when its result value is clearly unused, or by introducing a `let`-binding for the result value and then returning that).\n\nFix #54556", "tree": {"sha": "5f71e166eefb787cdcf9b2a76b8eed468d909d5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f71e166eefb787cdcf9b2a76b8eed468d909d5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbecb7a6449e497ccc7d14801a4f595aa20147db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbecb7a6449e497ccc7d14801a4f595aa20147db", "html_url": "https://github.com/rust-lang/rust/commit/dbecb7a6449e497ccc7d14801a4f595aa20147db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbecb7a6449e497ccc7d14801a4f595aa20147db/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4efdc04a5d687fce7a63ca339e5c74d8c51e40d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/4efdc04a5d687fce7a63ca339e5c74d8c51e40d2", "html_url": "https://github.com/rust-lang/rust/commit/4efdc04a5d687fce7a63ca339e5c74d8c51e40d2"}, {"sha": "704877f2ad7e3424a5c0286aed8697ba498fb234", "url": "https://api.github.com/repos/rust-lang/rust/commits/704877f2ad7e3424a5c0286aed8697ba498fb234", "html_url": "https://github.com/rust-lang/rust/commit/704877f2ad7e3424a5c0286aed8697ba498fb234"}], "stats": {"total": 1099, "additions": 958, "deletions": 141}, "files": [{"sha": "9312349ee405528d6db4a5fad114f29a5841e4c3", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=dbecb7a6449e497ccc7d14801a4f595aa20147db", "patch": "@@ -29,6 +29,7 @@ impl_stable_hash_for!(struct mir::LocalDecl<'tcx> {\n     source_info,\n     visibility_scope,\n     internal,\n+    is_block_tail,\n     is_user_variable\n });\n impl_stable_hash_for!(struct mir::UpvarDecl { debug_name, var_hir_id, by_ref, mutability });"}, {"sha": "2ae06e9ab0de79affb0a60c7c38dde9cbe217045", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 42, "deletions": 3, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=dbecb7a6449e497ccc7d14801a4f595aa20147db", "patch": "@@ -638,6 +638,26 @@ mod binding_form_impl {\n     }\n }\n \n+/// `BlockTailInfo` is attached to the `LocalDecl` for temporaries\n+/// created during evaluation of expressions in a block tail\n+/// expression; that is, a block like `{ STMT_1; STMT_2; EXPR }`.\n+///\n+/// It is used to improve diagnostics when such temporaries are\n+/// involved in borrow_check errors, e.g. explanations of where the\n+/// temporaries come from, when their destructors are run, and/or how\n+/// one might revise the code to satisfy the borrow checker's rules.\n+#[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n+pub struct BlockTailInfo {\n+    /// If `true`, then the value resulting from evaluating this tail\n+    /// expression is ignored by the block's expression context.\n+    ///\n+    /// Examples include `{ ...; tail };` and `let _ = { ...; tail };`\n+    /// but not e.g. `let _x = { ...; tail };`\n+    pub tail_result_is_ignored: bool,\n+}\n+\n+impl_stable_hash_for!(struct BlockTailInfo { tail_result_is_ignored });\n+\n /// A MIR local.\n ///\n /// This can be a binding declared by the user, a temporary inserted by the compiler, a function\n@@ -677,6 +697,12 @@ pub struct LocalDecl<'tcx> {\n     /// generator.\n     pub internal: bool,\n \n+    /// If this local is a temporary and `is_block_tail` is `Some`,\n+    /// then it is a temporary created for evaluation of some\n+    /// subexpression of some block's tail expression (with no\n+    /// intervening statement context).\n+    pub is_block_tail: Option<BlockTailInfo>,\n+\n     /// Type of this local.\n     pub ty: Ty<'tcx>,\n \n@@ -825,10 +851,19 @@ impl<'tcx> LocalDecl<'tcx> {\n         Self::new_local(ty, Mutability::Mut, false, span)\n     }\n \n-    /// Create a new immutable `LocalDecl` for a temporary.\n+    /// Converts `self` into same `LocalDecl` except tagged as immutable.\n+    #[inline]\n+    pub fn immutable(mut self) -> Self {\n+        self.mutability = Mutability::Not;\n+        self\n+    }\n+\n+    /// Converts `self` into same `LocalDecl` except tagged as internal temporary.\n     #[inline]\n-    pub fn new_immutable_temp(ty: Ty<'tcx>, span: Span) -> Self {\n-        Self::new_local(ty, Mutability::Not, false, span)\n+    pub fn block_tail(mut self, info: BlockTailInfo) -> Self {\n+        assert!(self.is_block_tail.is_none());\n+        self.is_block_tail = Some(info);\n+        self\n     }\n \n     /// Create a new `LocalDecl` for a internal temporary.\n@@ -856,6 +891,7 @@ impl<'tcx> LocalDecl<'tcx> {\n             visibility_scope: OUTERMOST_SOURCE_SCOPE,\n             internal,\n             is_user_variable: None,\n+            is_block_tail: None,\n         }\n     }\n \n@@ -874,6 +910,7 @@ impl<'tcx> LocalDecl<'tcx> {\n             },\n             visibility_scope: OUTERMOST_SOURCE_SCOPE,\n             internal: false,\n+            is_block_tail: None,\n             name: None, // FIXME maybe we do want some name here?\n             is_user_variable: None,\n         }\n@@ -2668,6 +2705,7 @@ pub enum ClosureOutlivesSubject<'tcx> {\n  */\n \n CloneTypeFoldableAndLiftImpls! {\n+    BlockTailInfo,\n     Mutability,\n     SourceInfo,\n     UpvarDecl,\n@@ -2711,6 +2749,7 @@ BraceStructTypeFoldableImpl! {\n         user_ty,\n         name,\n         source_info,\n+        is_block_tail,\n         visibility_scope,\n     }\n }"}, {"sha": "7d8227053b373c3aa23ccdb6edf3150da8f66142", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=dbecb7a6449e497ccc7d14801a4f595aa20147db", "patch": "@@ -728,6 +728,7 @@ macro_rules! make_mir_visitor {\n                     ref $($mutability)* visibility_scope,\n                     internal: _,\n                     is_user_variable: _,\n+                    is_block_tail: _,\n                 } = *local_decl;\n \n                 self.visit_ty(ty, TyContext::LocalDecl {"}, {"sha": "53a190efb58355b484c19f6dee7be91fc8cf8a28", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=dbecb7a6449e497ccc7d14801a4f595aa20147db", "patch": "@@ -262,7 +262,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         move_spans.var_span_label(&mut err, \"move occurs due to use in closure\");\n \n         self.explain_why_borrow_contains_point(context, borrow, None)\n-            .emit(self.infcx.tcx, &mut err, String::new());\n+            .add_explanation_to_diagnostic(self.infcx.tcx, self.mir, &mut err, \"\");\n         err.buffer(&mut self.errors_buffer);\n     }\n \n@@ -299,7 +299,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         });\n \n         self.explain_why_borrow_contains_point(context, borrow, None)\n-            .emit(self.infcx.tcx, &mut err, String::new());\n+            .add_explanation_to_diagnostic(self.infcx.tcx, self.mir, &mut err, \"\");\n         err.buffer(&mut self.errors_buffer);\n     }\n \n@@ -483,7 +483,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         }\n \n         self.explain_why_borrow_contains_point(context, issued_borrow, None)\n-            .emit(self.infcx.tcx, &mut err, first_borrow_desc.to_string());\n+            .add_explanation_to_diagnostic(self.infcx.tcx, self.mir, &mut err, first_borrow_desc);\n \n         err.buffer(&mut self.errors_buffer);\n     }\n@@ -638,7 +638,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n \n             if let BorrowExplanation::MustBeValidFor(..) = explanation {\n             } else {\n-                explanation.emit(self.infcx.tcx, &mut err, String::new());\n+                explanation.add_explanation_to_diagnostic(self.infcx.tcx, self.mir, &mut err, \"\");\n             }\n         } else {\n             err.span_label(borrow_span, \"borrowed value does not live long enough\");\n@@ -649,7 +649,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n \n             borrow_spans.args_span_label(&mut err, \"value captured here\");\n \n-            explanation.emit(self.infcx.tcx, &mut err, String::new());\n+            explanation.add_explanation_to_diagnostic(self.infcx.tcx, self.mir, &mut err, \"\");\n         }\n \n         err\n@@ -709,7 +709,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             _ => {}\n         }\n \n-        explanation.emit(self.infcx.tcx, &mut err, String::new());\n+        explanation.add_explanation_to_diagnostic(self.infcx.tcx, self.mir, &mut err, \"\");\n \n         err.buffer(&mut self.errors_buffer);\n     }\n@@ -770,13 +770,13 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         match explanation {\n             BorrowExplanation::UsedLater(..)\n             | BorrowExplanation::UsedLaterInLoop(..)\n-            | BorrowExplanation::UsedLaterWhenDropped(..) => {\n+            | BorrowExplanation::UsedLaterWhenDropped { .. } => {\n                 // Only give this note and suggestion if it could be relevant.\n                 err.note(\"consider using a `let` binding to create a longer lived value\");\n             }\n             _ => {}\n         }\n-        explanation.emit(self.infcx.tcx, &mut err, String::new());\n+        explanation.add_explanation_to_diagnostic(self.infcx.tcx, self.mir, &mut err, \"\");\n \n         borrow_spans.args_span_label(&mut err, \"value captured here\");\n \n@@ -913,7 +913,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         loan_spans.var_span_label(&mut err, \"borrow occurs due to use in closure\");\n \n         self.explain_why_borrow_contains_point(context, loan, None)\n-            .emit(self.infcx.tcx, &mut err, String::new());\n+            .add_explanation_to_diagnostic(self.infcx.tcx, self.mir, &mut err, \"\");\n \n         err.buffer(&mut self.errors_buffer);\n     }"}, {"sha": "e55469436abf0a72b08541f9d4097ae143a4a30c", "filename": "src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs", "status": "modified", "additions": 109, "deletions": 54, "changes": 163, "blob_url": "https://github.com/rust-lang/rust/blob/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs?ref=dbecb7a6449e497ccc7d14801a4f595aa20147db", "patch": "@@ -12,18 +12,22 @@ use borrow_check::borrow_set::BorrowData;\n use borrow_check::error_reporting::UseSpans;\n use borrow_check::nll::region_infer::Cause;\n use borrow_check::{Context, MirBorrowckCtxt, WriteKind};\n-use rustc::ty::{Region, TyCtxt};\n-use rustc::mir::{FakeReadCause, Location, Operand, Place, StatementKind, TerminatorKind};\n+use rustc::ty::{self, Region, TyCtxt};\n+use rustc::mir::{FakeReadCause, Local, Location, Mir, Operand};\n+use rustc::mir::{Place, StatementKind, TerminatorKind};\n use rustc_errors::DiagnosticBuilder;\n use syntax_pos::Span;\n-use syntax_pos::symbol::Symbol;\n \n mod find_use;\n \n pub(in borrow_check) enum BorrowExplanation<'tcx> {\n     UsedLater(LaterUseKind, Span),\n     UsedLaterInLoop(LaterUseKind, Span),\n-    UsedLaterWhenDropped(Span, Symbol, bool),\n+    UsedLaterWhenDropped {\n+        drop_loc: Location,\n+        dropped_local: Local,\n+        should_note_order: bool,\n+    },\n     MustBeValidFor(Region<'tcx>),\n     Unexplained,\n }\n@@ -37,54 +41,108 @@ pub(in borrow_check) enum LaterUseKind {\n }\n \n impl<'tcx> BorrowExplanation<'tcx> {\n-    pub(in borrow_check) fn emit<'cx, 'gcx>(\n+    pub(in borrow_check) fn add_explanation_to_diagnostic<'cx, 'gcx>(\n         &self,\n         tcx: TyCtxt<'cx, 'gcx, 'tcx>,\n+        mir: &Mir<'tcx>,\n         err: &mut DiagnosticBuilder<'_>,\n-        borrow_desc: String,\n+        borrow_desc: &str,\n     ) {\n         match *self {\n             BorrowExplanation::UsedLater(later_use_kind, var_or_use_span) => {\n-                let message = borrow_desc + match later_use_kind {\n+                let message = match later_use_kind {\n                     LaterUseKind::ClosureCapture => \"borrow later captured here by closure\",\n                     LaterUseKind::Call =>  \"borrow later used by call\",\n                     LaterUseKind::FakeLetRead => \"borrow later stored here\",\n                     LaterUseKind::Other => \"borrow later used here\",\n                 };\n-                err.span_label(var_or_use_span, message);\n+                err.span_label(var_or_use_span, format!(\"{}{}\", borrow_desc, message));\n             },\n             BorrowExplanation::UsedLaterInLoop(later_use_kind, var_or_use_span) => {\n-                let message = borrow_desc + match later_use_kind {\n+                let message = match later_use_kind {\n                     LaterUseKind::ClosureCapture => {\n                         \"borrow captured here by closure, in later iteration of loop\"\n                     },\n                     LaterUseKind::Call =>  \"borrow used by call, in later iteration of loop\",\n                     LaterUseKind::FakeLetRead => \"borrow later stored here\",\n                     LaterUseKind::Other => \"borrow used here, in later iteration of loop\",\n                 };\n-                err.span_label(var_or_use_span, message);\n+                err.span_label(var_or_use_span, format!(\"{}{}\", borrow_desc, message));\n             },\n-            BorrowExplanation::UsedLaterWhenDropped(span, local_name, should_note_order) => {\n-                err.span_label(\n-                    span,\n-                    format!(\n-                        \"{}borrow later used here, when `{}` is dropped\",\n-                        borrow_desc,\n-                        local_name,\n-                    ),\n-                );\n+            BorrowExplanation::UsedLaterWhenDropped { drop_loc, dropped_local,\n+                                                      should_note_order } =>\n+            {\n+                let local_decl = &mir.local_decls[dropped_local];\n+                let (dtor_desc, type_desc) = match local_decl.ty.sty {\n+                    // If type is an ADT that implements Drop, then\n+                    // simplify output by reporting just the ADT name.\n+                    ty::Adt(adt, _substs) if adt.has_dtor(tcx) && !adt.is_box() =>\n+                        (\"`Drop` code\", format!(\"type `{}`\", tcx.item_path_str(adt.did))),\n+\n+                    // Otherwise, just report the whole type (and use\n+                    // the intentionally fuzzy phrase \"destructor\")\n+                    ty::Closure(..) =>\n+                        (\"destructor\", format!(\"closure\")),\n+                    ty::Generator(..) =>\n+                        (\"destructor\", format!(\"generator\")),\n+\n+                    _ => (\"destructor\", format!(\"type `{}`\", local_decl.ty)),\n+                };\n+\n+                match local_decl.name {\n+                    Some(local_name) => {\n+                        let message =\n+                            format!(\"{B}borrow might be used here, when `{LOC}` is dropped \\\n+                                     and runs the {DTOR} for {TYPE}\",\n+                                    B=borrow_desc, LOC=local_name, TYPE=type_desc, DTOR=dtor_desc);\n+                        err.span_label(mir.source_info(drop_loc).span, message);\n+\n+                        if should_note_order {\n+                            err.note(\n+                                \"values in a scope are dropped \\\n+                                 in the opposite order they are defined\",\n+                            );\n+                        }\n+                    }\n+                    None => {\n+                        err.span_label(local_decl.source_info.span,\n+                                       format!(\"a temporary with access to the {B}borrow \\\n+                                                is created here ...\",\n+                                               B=borrow_desc));\n+                        let message =\n+                            format!(\"... and the {B}borrow might be used here, \\\n+                                     when that temporary is dropped \\\n+                                     and runs the {DTOR} for {TYPE}\",\n+                                    B=borrow_desc, TYPE=type_desc, DTOR=dtor_desc);\n+                        err.span_label(mir.source_info(drop_loc).span, message);\n+\n+                        if let Some(info) = &local_decl.is_block_tail {\n+                            // FIXME: use span_suggestion instead, highlighting the\n+                            // whole block tail expression.\n+                            let msg = if info.tail_result_is_ignored {\n+                                \"The temporary is part of an expression at the end of a block. \\\n+                                 Consider adding semicolon after the expression so its temporaries \\\n+                                 are dropped sooner, before the local variables declared by the \\\n+                                 block are dropped.\"\n+                            } else {\n+                                \"The temporary is part of an expression at the end of a block. \\\n+                                 Consider forcing this temporary to be dropped sooner, before \\\n+                                 the block's local variables are dropped. \\\n+                                 For example, you could save the expression's value in a new \\\n+                                 local variable `x` and then make `x` be the expression \\\n+                                 at the end of the block.\"\n+                            };\n \n-                if should_note_order {\n-                    err.note(\n-                        \"values in a scope are dropped \\\n-                         in the opposite order they are defined\",\n-                    );\n+                            err.note(msg);\n+                        }\n+                    }\n                 }\n-            },\n+            }\n+\n             BorrowExplanation::MustBeValidFor(region) => {\n                 tcx.note_and_explain_free_region(\n                     err,\n-                    &(borrow_desc + \"borrowed value must be valid for \"),\n+                    &format!(\"{}{}\", borrow_desc, \"borrowed value must be valid for \"),\n                     region,\n                     \"...\",\n                 );\n@@ -95,7 +153,7 @@ impl<'tcx> BorrowExplanation<'tcx> {\n }\n \n impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n-    /// Adds annotations to `err` explaining *why* the borrow contains the\n+    /// Returns structured explanation for *why* the borrow contains the\n     /// point from `context`. This is key for the \"3-point errors\"\n     /// [described in the NLL RFC][d].\n     ///\n@@ -106,7 +164,6 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n     /// - `kind_place`: if Some, this describes the statement that triggered the error.\n     ///   - first half is the kind of write, if any, being performed\n     ///   - second half is the place being accessed\n-    /// - `err`: where the error annotations are going to be added\n     ///\n     /// [d]: https://rust-lang.github.io/rfcs/2094-nll.html#leveraging-intuition-framing-errors-in-terms-of-points\n     pub(in borrow_check) fn explain_why_borrow_contains_point(\n@@ -116,8 +173,8 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         kind_place: Option<(WriteKind, &Place<'tcx>)>,\n     ) -> BorrowExplanation<'tcx> {\n         debug!(\n-            \"find_why_borrow_contains_point(context={:?}, borrow={:?})\",\n-            context, borrow,\n+            \"explain_why_borrow_contains_point(context={:?}, borrow={:?}, kind_place={:?})\",\n+            context, borrow, kind_place\n         );\n \n         let regioncx = &self.nonlexical_regioncx;\n@@ -154,32 +211,30 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 }\n             }\n \n-            Some(Cause::DropVar(local, location)) => match &mir.local_decls[local].name {\n-                Some(local_name) => {\n-                    let mut should_note_order = false;\n-                    if let Some((WriteKind::StorageDeadOrDrop, place)) = kind_place {\n-                        if let Place::Local(borrowed_local) = place {\n-                            let dropped_local_scope = mir.local_decls[local].visibility_scope;\n-                            let borrowed_local_scope =\n-                                mir.local_decls[*borrowed_local].visibility_scope;\n+             Some(Cause::DropVar(local, location)) => {\n+                 let mut should_note_order = false;\n+                 if mir.local_decls[local].name.is_some() {\n+                     if let Some((WriteKind::StorageDeadOrDrop, place)) = kind_place {\n+                         if let Place::Local(borrowed_local) = place {\n+                             let dropped_local_scope = mir.local_decls[local].visibility_scope;\n+                             let borrowed_local_scope =\n+                                 mir.local_decls[*borrowed_local].visibility_scope;\n \n-                            if mir.is_sub_scope(borrowed_local_scope, dropped_local_scope)\n-                                && local != *borrowed_local\n-                            {\n-                                should_note_order = true;\n-                            }\n-                        }\n-                    }\n-\n-                    BorrowExplanation::UsedLaterWhenDropped(\n-                        mir.source_info(location).span,\n-                        *local_name,\n-                        should_note_order\n-                    )\n-                },\n+                             if mir.is_sub_scope(borrowed_local_scope, dropped_local_scope)\n+                                 && local != *borrowed_local\n+                             {\n+                                 should_note_order = true;\n+                             }\n+                         }\n+                     }\n+                 }\n \n-                None => BorrowExplanation::Unexplained,\n-            },\n+                 BorrowExplanation::UsedLaterWhenDropped {\n+                     drop_loc: location,\n+                     dropped_local: local,\n+                     should_note_order,\n+                 }\n+            }\n \n             None => if let Some(region) = regioncx.to_error_region(region_sub) {\n                 BorrowExplanation::MustBeValidFor(region)"}, {"sha": "b754d63f7183bbb990e53394ea858db3d482d723", "filename": "src/librustc_mir/build/block.rs", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fblock.rs?ref=dbecb7a6449e497ccc7d14801a4f595aa20147db", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use build::{BlockAnd, BlockAndExtension, Builder};\n+use build::{BlockAnd, BlockAndExtension, BlockFrame, Builder};\n use build::ForGuard::OutsideGuard;\n use build::matches::ArmHasGuard;\n use hair::*;\n@@ -93,6 +93,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             let Stmt { kind, opt_destruction_scope } = this.hir.mirror(stmt);\n             match kind {\n                 StmtKind::Expr { scope, expr } => {\n+                    this.block_context.push(BlockFrame::Statement { ignores_expr_result: true });\n                     unpack!(block = this.in_opt_scope(\n                         opt_destruction_scope.map(|de|(de, source_info)), block, |this| {\n                             let si = (scope, source_info);\n@@ -109,6 +110,13 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     initializer,\n                     lint_level\n                 } => {\n+                    let ignores_expr_result = if let PatternKind::Wild = *pattern.kind {\n+                        true\n+                    } else {\n+                        false\n+                    };\n+                    this.block_context.push(BlockFrame::Statement { ignores_expr_result });\n+\n                     // Enter the remainder scope, i.e. the bindings' destruction scope.\n                     this.push_scope((remainder_scope, source_info));\n                     let_scope_stack.push(remainder_scope);\n@@ -155,19 +163,40 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     }\n                 }\n             }\n+\n+            let popped = this.block_context.pop();\n+            assert!(popped.map_or(false, |bf|bf.is_statement()));\n         }\n+\n         // Then, the block may have an optional trailing expression which is a \u201creturn\u201d value\n-        // of the block.\n+        // of the block, which is stored into `destination`.\n+        let tcx = this.hir.tcx();\n+        let destination_ty = destination.ty(&this.local_decls, tcx).to_ty(tcx);\n         if let Some(expr) = expr {\n+            let tail_result_is_ignored = destination_ty.is_unit() ||\n+                match this.block_context.last() {\n+                    // no context: conservatively assume result is read\n+                    None => false,\n+\n+                    // sub-expression: block result feeds into some computation\n+                    Some(BlockFrame::SubExpr) => false,\n+\n+                    // otherwise: use accumualated is_ignored state.\n+                    Some(BlockFrame::TailExpr { tail_result_is_ignored: ignored }) |\n+                    Some(BlockFrame::Statement { ignores_expr_result: ignored }) => *ignored,\n+                };\n+            this.block_context.push(BlockFrame::TailExpr { tail_result_is_ignored });\n+\n             unpack!(block = this.into(destination, block, expr));\n+            let popped = this.block_context.pop();\n+\n+            assert!(popped.map_or(false, |bf|bf.is_tail_expr()));\n         } else {\n             // If a block has no trailing expression, then it is given an implicit return type.\n             // This return type is usually `()`, unless the block is diverging, in which case the\n             // return type is `!`. For the unit type, we need to actually return the unit, but in\n             // the case of `!`, no return value is required, as the block will never return.\n-            let tcx = this.hir.tcx();\n-            let ty = destination.ty(&this.local_decls, tcx).to_ty(tcx);\n-            if ty.is_unit() {\n+            if destination_ty.is_unit() {\n                 // We only want to assign an implicit `()` as the return value of the block if the\n                 // block does not diverge. (Otherwise, we may try to assign a unit to a `!`-type.)\n                 this.cfg.push_assign_unit(block, source_info, destination);"}, {"sha": "e0bf02c6739e3839354feeb79a8f375b0ec87629", "filename": "src/librustc_mir/build/expr/as_temp.rs", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs?ref=dbecb7a6449e497ccc7d14801a4f595aa20147db", "patch": "@@ -10,7 +10,7 @@\n \n //! See docs in build/expr/mod.rs\n \n-use build::{BlockAnd, BlockAndExtension, Builder};\n+use build::{BlockAnd, BlockAndExtension, BlockFrame, Builder};\n use hair::*;\n use rustc::middle::region;\n use rustc::mir::*;\n@@ -59,14 +59,30 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         }\n \n         let expr_ty = expr.ty;\n-        let temp = if mutability == Mutability::Not {\n-            this.local_decls\n-                .push(LocalDecl::new_immutable_temp(expr_ty, expr_span))\n-        } else {\n-            this.local_decls\n-                .push(LocalDecl::new_temp(expr_ty, expr_span))\n-        };\n+        let temp = {\n+            let mut local_decl = LocalDecl::new_temp(expr_ty, expr_span);\n+            if mutability == Mutability::Not {\n+                local_decl = local_decl.immutable();\n+            }\n+\n+            debug!(\"creating temp {:?} with block_context: {:?}\", local_decl, this.block_context);\n+            // Find out whether this temp is being created within the\n+            // tail expression of a block whose result is ignored.\n+            for bf in this.block_context.iter().rev() {\n+                match bf {\n+                    BlockFrame::SubExpr => continue,\n+                    BlockFrame::Statement { .. } => break,\n+                    &BlockFrame::TailExpr { tail_result_is_ignored } => {\n+                        local_decl = local_decl.block_tail(BlockTailInfo {\n+                            tail_result_is_ignored\n+                        });\n+                        break;\n+                    }\n+                }\n+            }\n \n+            this.local_decls.push(local_decl)\n+        };\n         if !expr_ty.is_never() {\n             this.cfg.push(\n                 block,"}, {"sha": "4f5ed34a46133622488aca3670bc13b646621b0a", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=dbecb7a6449e497ccc7d14801a4f595aa20147db", "patch": "@@ -11,7 +11,7 @@\n //! See docs in build/expr/mod.rs\n \n use build::expr::category::{Category, RvalueFunc};\n-use build::{BlockAnd, BlockAndExtension, Builder};\n+use build::{BlockAnd, BlockAndExtension, BlockFrame, Builder};\n use hair::*;\n use rustc::mir::*;\n use rustc::ty;\n@@ -39,7 +39,17 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         let expr_span = expr.span;\n         let source_info = this.source_info(expr_span);\n \n-        match expr.kind {\n+        let expr_is_block_or_scope = match expr.kind {\n+            ExprKind::Block { .. } => true,\n+            ExprKind::Scope { .. } => true,\n+            _ => false,\n+        };\n+\n+        if !expr_is_block_or_scope {\n+            this.block_context.push(BlockFrame::SubExpr);\n+        }\n+\n+        let block_and = match expr.kind {\n             ExprKind::Scope {\n                 region_scope,\n                 lint_level,\n@@ -302,6 +312,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                         visibility_scope: source_info.scope,\n                         internal: true,\n                         is_user_variable: None,\n+                        is_block_tail: None,\n                     });\n                     let ptr_temp = Place::Local(ptr_temp);\n                     let block = unpack!(this.into(&ptr_temp, block, ptr));\n@@ -414,6 +425,13 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     .push_assign(block, source_info, destination, rvalue);\n                 block.unit()\n             }\n+        };\n+\n+        if !expr_is_block_or_scope {\n+            let popped = this.block_context.pop();\n+            assert!(popped.is_some());\n         }\n+\n+        block_and\n     }\n }"}, {"sha": "d2b39f088b65e8c401ae5a35dd01214a82d6acaa", "filename": "src/librustc_mir/build/expr/stmt.rs", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs?ref=dbecb7a6449e497ccc7d14801a4f595aa20147db", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use build::scope::BreakableScope;\n-use build::{BlockAnd, BlockAndExtension, Builder};\n+use build::{BlockAnd, BlockAndExtension, BlockFrame, Builder};\n use hair::*;\n use rustc::mir::*;\n \n@@ -20,6 +20,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         let source_info = this.source_info(expr.span);\n         // Handle a number of expressions that don't need a destination at all. This\n         // avoids needing a mountain of temporary `()` variables.\n+        let expr2 = expr.clone();\n         match expr.kind {\n             ExprKind::Scope {\n                 region_scope,\n@@ -40,19 +41,23 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 // is better for borrowck interaction with overloaded\n                 // operators like x[j] = x[i].\n \n+                debug!(\"stmt_expr Assign block_context.push(SubExpr) : {:?}\", expr2);\n+                this.block_context.push(BlockFrame::SubExpr);\n+\n                 // Generate better code for things that don't need to be\n                 // dropped.\n                 if this.hir.needs_drop(lhs.ty) {\n                     let rhs = unpack!(block = this.as_local_operand(block, rhs));\n                     let lhs = unpack!(block = this.as_place(block, lhs));\n                     unpack!(block = this.build_drop_and_replace(block, lhs_span, lhs, rhs));\n-                    block.unit()\n                 } else {\n                     let rhs = unpack!(block = this.as_local_rvalue(block, rhs));\n                     let lhs = unpack!(block = this.as_place(block, lhs));\n                     this.cfg.push_assign(block, source_info, &lhs, rhs);\n-                    block.unit()\n                 }\n+\n+                this.block_context.pop();\n+                block.unit()\n             }\n             ExprKind::AssignOp { op, lhs, rhs } => {\n                 // FIXME(#28160) there is an interesting semantics\n@@ -66,6 +71,9 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 let lhs = this.hir.mirror(lhs);\n                 let lhs_ty = lhs.ty;\n \n+                debug!(\"stmt_expr AssignOp block_context.push(SubExpr) : {:?}\", expr2);\n+                this.block_context.push(BlockFrame::SubExpr);\n+\n                 // As above, RTL.\n                 let rhs = unpack!(block = this.as_local_operand(block, rhs));\n                 let lhs = unpack!(block = this.as_place(block, lhs));\n@@ -85,6 +93,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 );\n                 this.cfg.push_assign(block, source_info, &lhs, result);\n \n+                this.block_context.pop();\n                 block.unit()\n             }\n             ExprKind::Continue { label } => {\n@@ -114,7 +123,10 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     (break_block, region_scope, break_destination.clone())\n                 };\n                 if let Some(value) = value {\n-                    unpack!(block = this.into(&destination, block, value))\n+                    debug!(\"stmt_expr Break val block_context.push(SubExpr) : {:?}\", expr2);\n+                    this.block_context.push(BlockFrame::SubExpr);\n+                    unpack!(block = this.into(&destination, block, value));\n+                    this.block_context.pop();\n                 } else {\n                     this.cfg.push_assign_unit(block, source_info, &destination)\n                 }\n@@ -123,7 +135,13 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             }\n             ExprKind::Return { value } => {\n                 block = match value {\n-                    Some(value) => unpack!(this.into(&Place::Local(RETURN_PLACE), block, value)),\n+                    Some(value) => {\n+                        debug!(\"stmt_expr Return val block_context.push(SubExpr) : {:?}\", expr2);\n+                        this.block_context.push(BlockFrame::SubExpr);\n+                        let result = unpack!(this.into(&Place::Local(RETURN_PLACE), block, value));\n+                        this.block_context.pop();\n+                        result\n+                    }\n                     None => {\n                         this.cfg\n                             .push_assign_unit(block, source_info, &Place::Local(RETURN_PLACE));\n@@ -140,6 +158,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 outputs,\n                 inputs,\n             } => {\n+                debug!(\"stmt_expr InlineAsm block_context.push(SubExpr) : {:?}\", expr2);\n+                this.block_context.push(BlockFrame::SubExpr);\n                 let outputs = outputs\n                     .into_iter()\n                     .map(|output| unpack!(block = this.as_place(block, output)))\n@@ -161,6 +181,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                         },\n                     },\n                 );\n+                this.block_context.pop();\n                 block.unit()\n             }\n             _ => {"}, {"sha": "656c78a46ed78c84d75ce5366cdc21c004fec938", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=dbecb7a6449e497ccc7d14801a4f595aa20147db", "patch": "@@ -1485,6 +1485,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             source_info,\n             visibility_scope,\n             internal: false,\n+            is_block_tail: None,\n             is_user_variable: Some(ClearCrossCrate::Set(BindingForm::Var(VarBindingForm {\n                 binding_mode,\n                 // hypothetically, `visit_bindings` could try to unzip\n@@ -1518,6 +1519,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 visibility_scope,\n                 // FIXME: should these secretly injected ref_for_guard's be marked as `internal`?\n                 internal: false,\n+                is_block_tail: None,\n                 is_user_variable: Some(ClearCrossCrate::Set(BindingForm::RefForGuard)),\n             });\n             LocalsForNode::ForGuard {"}, {"sha": "9e78932bffea6d638b3b5b4594af01997f50dccf", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=dbecb7a6449e497ccc7d14801a4f595aa20147db", "patch": "@@ -281,6 +281,57 @@ fn liberated_closure_env_ty<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     tcx.liberate_late_bound_regions(closure_def_id, &closure_env_ty)\n }\n \n+#[derive(Debug, PartialEq, Eq)]\n+pub enum BlockFrame {\n+    /// Evaluation is currently within a statement.\n+    ///\n+    /// Examples include:\n+    ///  1. `EXPR;`\n+    ///  2. `let _ = EXPR;`\n+    ///  3. `let x = EXPR;`\n+    Statement {\n+        /// If true, then statement discards result from evaluating\n+        /// the expression (such as examples 1 and 2 above).\n+        ignores_expr_result: bool\n+    },\n+\n+    /// Evaluation is currently within the tail expression of a block.\n+    ///\n+    /// Example: `{ STMT_1; STMT_2; EXPR }`\n+    TailExpr {\n+        /// If true, then the surrounding context of the block ignores\n+        /// the result of evaluating the block's tail expression.\n+        ///\n+        /// Example: `let _ = { STMT_1; EXPR };`\n+        tail_result_is_ignored: bool\n+    },\n+\n+    /// Generic mark meaning that the block occurred as a subexpression\n+    /// where the result might be used.\n+    ///\n+    /// Examples: `foo(EXPR)`, `match EXPR { ... }`\n+    SubExpr,\n+}\n+\n+impl BlockFrame {\n+    fn is_tail_expr(&self) -> bool {\n+        match *self {\n+            BlockFrame::TailExpr { .. } => true,\n+\n+            BlockFrame::Statement { .. } |\n+            BlockFrame::SubExpr => false,\n+        }\n+    }\n+    fn is_statement(&self) -> bool {\n+        match *self {\n+            BlockFrame::Statement { .. } => true,\n+\n+            BlockFrame::TailExpr { .. } |\n+            BlockFrame::SubExpr => false,\n+        }\n+    }\n+ }\n+\n struct Builder<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     hir: Cx<'a, 'gcx, 'tcx>,\n     cfg: CFG<'tcx>,\n@@ -292,6 +343,20 @@ struct Builder<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     /// see the `scope` module for more details\n     scopes: Vec<scope::Scope<'tcx>>,\n \n+    /// the block-context: each time we build the code within an hair::Block,\n+    /// we push a frame here tracking whether we are building a statement or\n+    /// if we are pushing the tail expression of the block. This is used to\n+    /// embed information in generated temps about whether they were created\n+    /// for a block tail expression or not.\n+    ///\n+    /// It would be great if we could fold this into `self.scopes`\n+    /// somehow; but right now I think that is very tightly tied to\n+    /// the code generation in ways that we cannot (or should not)\n+    /// start just throwing new entries onto that vector in order to\n+    /// distinguish the context of EXPR1 from the context of EXPR2 in\n+    /// `{ STMTS; EXPR1 } + EXPR2`\n+    block_context: Vec<BlockFrame>,\n+\n     /// The current unsafe block in scope, even if it is hidden by\n     /// a PushUnsafeBlock\n     unpushed_unsafe: Safety,\n@@ -695,6 +760,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             fn_span: span,\n             arg_count,\n             scopes: vec![],\n+            block_context: vec![],\n             source_scopes: IndexVec::new(),\n             source_scope: OUTERMOST_SOURCE_SCOPE,\n             source_scope_local_data: IndexVec::new(),\n@@ -781,6 +847,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 name,\n                 internal: false,\n                 is_user_variable: None,\n+                is_block_tail: None,\n             });\n         }\n "}, {"sha": "4b26094b9fc2843748c3bd33acaebce31a17e62d", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=dbecb7a6449e497ccc7d14801a4f595aa20147db", "patch": "@@ -148,6 +148,7 @@ fn temp_decl(mutability: Mutability, ty: Ty, span: Span) -> LocalDecl {\n         visibility_scope: source_info.scope,\n         internal: false,\n         is_user_variable: None,\n+        is_block_tail: None,\n     }\n }\n "}, {"sha": "c2ae6832cc09f9f2c80fb038ef4c5760c8135e0b", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=dbecb7a6449e497ccc7d14801a4f595aa20147db", "patch": "@@ -308,6 +308,7 @@ fn replace_result_variable<'tcx>(\n         source_info,\n         visibility_scope: source_info.scope,\n         internal: false,\n+        is_block_tail: None,\n         is_user_variable: None,\n     };\n     let new_ret_local = Local::new(mir.local_decls.len());\n@@ -662,6 +663,7 @@ fn create_generator_drop_shim<'a, 'tcx>(\n         source_info,\n         visibility_scope: source_info.scope,\n         internal: false,\n+        is_block_tail: None,\n         is_user_variable: None,\n     };\n \n@@ -679,6 +681,7 @@ fn create_generator_drop_shim<'a, 'tcx>(\n         source_info,\n         visibility_scope: source_info.scope,\n         internal: false,\n+        is_block_tail: None,\n         is_user_variable: None,\n     };\n "}, {"sha": "e0b7fc4eb905451ccc32be5023b989ad6d616176", "filename": "src/test/ui/dropck/dropck-eyepatch-extern-crate.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.nll.stderr?ref=dbecb7a6449e497ccc7d14801a4f595aa20147db", "patch": "@@ -8,7 +8,7 @@ LL | }\n    | -\n    | |\n    | `c_shortest` dropped here while still borrowed\n-   | borrow later used here, when `dt` is dropped\n+   | borrow might be used here, when `dt` is dropped and runs the `Drop` code for type `other::Dt`\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n "}, {"sha": "97c1caa87f5c5e9d997397335f842ef4ab4c0fe8", "filename": "src/test/ui/dropck/dropck-eyepatch-reorder.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.nll.stderr?ref=dbecb7a6449e497ccc7d14801a4f595aa20147db", "patch": "@@ -8,7 +8,7 @@ LL | }\n    | -\n    | |\n    | `c_shortest` dropped here while still borrowed\n-   | borrow later used here, when `dt` is dropped\n+   | borrow might be used here, when `dt` is dropped and runs the `Drop` code for type `Dt`\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n "}, {"sha": "4a6e42ef94a85dad316386acce2d4f4802bd03db", "filename": "src/test/ui/dropck/dropck-eyepatch.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.nll.stderr?ref=dbecb7a6449e497ccc7d14801a4f595aa20147db", "patch": "@@ -8,7 +8,7 @@ LL | }\n    | -\n    | |\n    | `c_shortest` dropped here while still borrowed\n-   | borrow later used here, when `dt` is dropped\n+   | borrow might be used here, when `dt` is dropped and runs the `Drop` code for type `Dt`\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n "}, {"sha": "b828a16756101d27f9ed66cdccabbb85013e5209", "filename": "src/test/ui/dropck/dropck-union.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fdropck%2Fdropck-union.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fdropck%2Fdropck-union.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-union.nll.stderr?ref=dbecb7a6449e497ccc7d14801a4f595aa20147db", "patch": "@@ -7,7 +7,7 @@ LL | }\n    | -\n    | |\n    | `v` dropped here while still borrowed\n-   | borrow later used here, when `v` is dropped\n+   | borrow might be used here, when `v` is dropped and runs the `Drop` code for type `Wrap`\n \n error: aborting due to previous error\n "}, {"sha": "54a46f612b9ed645be11e7a1c7c787b842a1c7f3", "filename": "src/test/ui/error-codes/E0597.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Ferror-codes%2FE0597.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Ferror-codes%2FE0597.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0597.nll.stderr?ref=dbecb7a6449e497ccc7d14801a4f595aa20147db", "patch": "@@ -8,7 +8,7 @@ LL | }\n    | -\n    | |\n    | `y` dropped here while still borrowed\n-   | borrow later used here, when `x` is dropped\n+   | borrow might be used here, when `x` is dropped and runs the `Drop` code for type `Foo`\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n "}, {"sha": "9d1a52a8335433845b91259c589bdfd71f62c432", "filename": "src/test/ui/generator/borrowing.nll.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.nll.stderr?ref=dbecb7a6449e497ccc7d14801a4f595aa20147db", "patch": "@@ -2,10 +2,17 @@ error[E0597]: `a` does not live long enough\n   --> $DIR/borrowing.rs:18:18\n    |\n LL |         unsafe { (|| yield &a).resume() }\n-   |                  ^^^^^^^^^^^^^ borrowed value does not live long enough\n+   |                  ^^^^^^^^^^^^^\n+   |                  |\n+   |                  borrowed value does not live long enough\n+   |                  a temporary with access to the borrow is created here ...\n LL |         //~^ ERROR: `a` does not live long enough\n LL |     };\n-   |     - `a` dropped here while still borrowed\n+   |     -- ... and the borrow might be used here, when that temporary is dropped and runs the destructor for generator\n+   |     |\n+   |     `a` dropped here while still borrowed\n+   |\n+   = note: The temporary is part of an expression at the end of a block. Consider forcing this temporary to be dropped sooner, before the block's local variables are dropped. For example, you could save the expression's value in a new local variable `x` and then make `x` be the expression at the end of the block.\n \n error[E0597]: `a` does not live long enough\n   --> $DIR/borrowing.rs:24:9"}, {"sha": "2b95a5caf6da07b7667785355da936cd3eadb029", "filename": "src/test/ui/generator/dropck.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fgenerator%2Fdropck.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fgenerator%2Fdropck.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fdropck.nll.stderr?ref=dbecb7a6449e497ccc7d14801a4f595aa20147db", "patch": "@@ -8,7 +8,7 @@ LL | }\n    | -\n    | |\n    | `*cell` dropped here while still borrowed\n-   | borrow later used here, when `gen` is dropped\n+   | borrow might be used here, when `gen` is dropped and runs the destructor for generator\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n \n@@ -27,7 +27,7 @@ LL |   }\n    |   -\n    |   |\n    |   `ref_` dropped here while still borrowed\n-   |   borrow later used here, when `gen` is dropped\n+   |   borrow might be used here, when `gen` is dropped and runs the destructor for generator\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n "}, {"sha": "023021eccb9312fdfab048c54a3e3918db4b4dd5", "filename": "src/test/ui/issues/issue-18783.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fissues%2Fissue-18783.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fissues%2Fissue-18783.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18783.nll.stderr?ref=dbecb7a6449e497ccc7d14801a4f595aa20147db", "patch": "@@ -11,7 +11,7 @@ LL |     c.push(Box::new(|| y = 0));\n    |                     second mutable borrow occurs here\n LL | //~^ ERROR cannot borrow `y` as mutable more than once at a time\n LL | }\n-   | - first borrow later used here, when `c` is dropped\n+   | - first borrow might be used here, when `c` is dropped and runs the destructor for type `std::cell::RefCell<std::vec::Vec<std::boxed::Box<dyn std::ops::FnMut()>>>`\n \n error[E0499]: cannot borrow `y` as mutable more than once at a time\n   --> $DIR/issue-18783.rs:26:29\n@@ -26,7 +26,7 @@ LL |     Push::push(&c, Box::new(|| y = 0));\n    |                             second mutable borrow occurs here\n LL | //~^ ERROR cannot borrow `y` as mutable more than once at a time\n LL | }\n-   | - first borrow later used here, when `c` is dropped\n+   | - first borrow might be used here, when `c` is dropped and runs the destructor for type `std::cell::RefCell<std::vec::Vec<std::boxed::Box<dyn std::ops::FnMut()>>>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "116cb3be6b50ce4f098e637ae49dcd1cffdcfe80", "filename": "src/test/ui/issues/issue-47646.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fissues%2Fissue-47646.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fissues%2Fissue-47646.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47646.stderr?ref=dbecb7a6449e497ccc7d14801a4f595aa20147db", "patch": "@@ -3,9 +3,15 @@ error[E0502]: cannot borrow `heap` as immutable because it is also borrowed as m\n    |\n LL |     let borrow = heap.peek_mut();\n    |                  ---- mutable borrow occurs here\n-...\n+LL | \n+LL |     match (borrow, ()) {\n+   |           ------------ a temporary with access to the mutable borrow is created here ...\n+LL |         (Some(_), ()) => {\n LL |             println!(\"{:?}\", heap); //~ ERROR cannot borrow `heap` as immutable\n    |                              ^^^^ immutable borrow occurs here\n+...\n+LL |     };\n+   |      - ... and the mutable borrow might be used here, when that temporary is dropped and runs the destructor for type `(std::option::Option<std::collections::binary_heap::PeekMut<'_, i32>>, ())`\n \n error: aborting due to previous error\n "}, {"sha": "60862d0f22952ad4004d5cda200c105761377bbb", "filename": "src/test/ui/nll/drop-no-may-dangle.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fnll%2Fdrop-no-may-dangle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fnll%2Fdrop-no-may-dangle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fdrop-no-may-dangle.stderr?ref=dbecb7a6449e497ccc7d14801a4f595aa20147db", "patch": "@@ -8,7 +8,7 @@ LL |         v[0] += 1; //~ ERROR cannot assign to `v[..]` because it is borrowe\n    |         ^^^^^^^^^ assignment to borrowed `v[..]` occurs here\n ...\n LL | }\n-   | - borrow later used here, when `p` is dropped\n+   | - borrow might be used here, when `p` is dropped and runs the `Drop` code for type `WrapMayNotDangle`\n \n error[E0506]: cannot assign to `v[..]` because it is borrowed\n   --> $DIR/drop-no-may-dangle.rs:33:5\n@@ -19,7 +19,7 @@ LL |     let p: WrapMayNotDangle<&usize> = WrapMayNotDangle { value: &v[0] };\n LL |     v[0] += 1; //~ ERROR cannot assign to `v[..]` because it is borrowed\n    |     ^^^^^^^^^ assignment to borrowed `v[..]` occurs here\n LL | }\n-   | - borrow later used here, when `p` is dropped\n+   | - borrow might be used here, when `p` is dropped and runs the `Drop` code for type `WrapMayNotDangle`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f5738968746ee66a5687df782cf751fda6fd3ea7", "filename": "src/test/ui/nll/issue-21114-ebfull.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fnll%2Fissue-21114-ebfull.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fnll%2Fissue-21114-ebfull.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-21114-ebfull.rs?ref=dbecb7a6449e497ccc7d14801a4f595aa20147db", "patch": "@@ -0,0 +1,20 @@\n+// (this works, but only in NLL)\n+// compile-pass\n+#![feature(nll)]\n+\n+use std::collections::HashMap;\n+use std::sync::Mutex;\n+\n+fn i_used_to_be_able_to(foo: &Mutex<HashMap<usize, usize>>) -> Vec<(usize, usize)> {\n+    let mut foo = foo.lock().unwrap();\n+\n+    foo.drain().collect()\n+}\n+\n+fn but_after_nightly_update_now_i_gotta(foo: &Mutex<HashMap<usize, usize>>) -> Vec<(usize, usize)> {\n+    let mut foo = foo.lock().unwrap();\n+\n+    return foo.drain().collect();\n+}\n+\n+fn main() {}"}, {"sha": "2add951b70bc0a6f867a6d13272dbd50e5aa157c", "filename": "src/test/ui/nll/issue-21114-kixunil.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fnll%2Fissue-21114-kixunil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fnll%2Fissue-21114-kixunil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-21114-kixunil.rs?ref=dbecb7a6449e497ccc7d14801a4f595aa20147db", "patch": "@@ -0,0 +1,19 @@\n+// (this works, but only in NLL)\n+// compile-pass\n+#![feature(nll)]\n+\n+fn from_stdin(min: u64) -> Vec<u64> {\n+    use std::io::BufRead;\n+\n+    let stdin = std::io::stdin();\n+    let stdin = stdin.lock();\n+\n+    stdin.lines()\n+        .map(Result::unwrap)\n+        .map(|val| val.parse())\n+        .map(Result::unwrap)\n+        .filter(|val| *val >= min)\n+        .collect()\n+}\n+\n+fn main() {}"}, {"sha": "40cd04de5ecc14919d9525590538e2d4fb01b5ce", "filename": "src/test/ui/nll/issue-54556-niconii.nll.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fnll%2Fissue-54556-niconii.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fnll%2Fissue-54556-niconii.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54556-niconii.nll.stderr?ref=dbecb7a6449e497ccc7d14801a4f595aa20147db", "patch": "@@ -0,0 +1,20 @@\n+error[E0597]: `counter` does not live long enough\n+  --> $DIR/issue-54556-niconii.rs:22:20\n+   |\n+LL |     if let Ok(_) = counter.lock() { }\n+   |                    ^^^^^^^-------\n+   |                    |\n+   |                    borrowed value does not live long enough\n+   |                    a temporary with access to the borrow is created here ...\n+...\n+LL | }\n+   | -\n+   | |\n+   | `counter` dropped here while still borrowed\n+   | ... and the borrow might be used here, when that temporary is dropped and runs the destructor for type `std::result::Result<MutexGuard<'_>, ()>`\n+   |\n+   = note: The temporary is part of an expression at the end of a block. Consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped.\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "49b063f44f427a3ae963d97762ad7d4e7ba13965", "filename": "src/test/ui/nll/issue-54556-niconii.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fnll%2Fissue-54556-niconii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fnll%2Fissue-54556-niconii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54556-niconii.rs?ref=dbecb7a6449e497ccc7d14801a4f595aa20147db", "patch": "@@ -0,0 +1,31 @@\n+// This is a reduction of a concrete test illustrating a case that was\n+// annoying to Rust developer niconii (see comment thread on #21114).\n+//\n+// With resolving issue #54556, pnkfelix hopes that the new diagnostic\n+// output produced by NLL helps to *explain* the semantic significance\n+// of temp drop order, and thus why inserting a semi-colon after the\n+// `if let` expression in `main` works.\n+\n+struct Mutex;\n+struct MutexGuard<'a>(&'a Mutex);\n+\n+impl Drop for Mutex { fn drop(&mut self) { println!(\"Mutex::drop\"); } }\n+impl<'a> Drop for MutexGuard<'a> { fn drop(&mut self) { println!(\"MutexGuard::drop\");  } }\n+\n+impl Mutex {\n+    fn lock(&self) -> Result<MutexGuard, ()> { Ok(MutexGuard(self)) }\n+}\n+\n+fn main() {\n+    let counter = Mutex;\n+\n+    if let Ok(_) = counter.lock() { }\n+\n+    // With this code as written, the dynamic semantics here implies\n+    // that `Mutex::drop` for `counter` runs *before*\n+    // `MutexGuard::drop`, which would be unsound since `MutexGuard`\n+    // still has a reference to `counter`.\n+    //\n+    // The goal of #54556 is to explain that within a compiler\n+    // diagnostic.\n+}"}, {"sha": "2d0de26ab309a00c7768cb945a718c0b8cbb32c0", "filename": "src/test/ui/nll/issue-54556-niconii.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fnll%2Fissue-54556-niconii.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fnll%2Fissue-54556-niconii.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54556-niconii.stderr?ref=dbecb7a6449e497ccc7d14801a4f595aa20147db", "patch": "@@ -0,0 +1,14 @@\n+error[E0597]: `counter` does not live long enough\n+  --> $DIR/issue-54556-niconii.rs:22:20\n+   |\n+LL |     if let Ok(_) = counter.lock() { }\n+   |                    ^^^^^^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | - `counter` dropped here while still borrowed\n+   |\n+   = note: values in a scope are dropped in the opposite order they are created\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "0bf76485eef2ae505f08be843462b7feda9425ef", "filename": "src/test/ui/nll/issue-54556-stephaneyfx.nll.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fnll%2Fissue-54556-stephaneyfx.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fnll%2Fissue-54556-stephaneyfx.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54556-stephaneyfx.nll.stderr?ref=dbecb7a6449e497ccc7d14801a4f595aa20147db", "patch": "@@ -0,0 +1,19 @@\n+error[E0597]: `stmt` does not live long enough\n+  --> $DIR/issue-54556-stephaneyfx.rs:27:21\n+   |\n+LL |     let rows = Rows(&stmt);\n+   |                     ^^^^^ borrowed value does not live long enough\n+LL |     rows.map(|row| row).next()\n+   |     ------------------- a temporary with access to the borrow is created here ...\n+...\n+LL | }\n+   | -\n+   | |\n+   | `stmt` dropped here while still borrowed\n+   | ... and the borrow might be used here, when that temporary is dropped and runs the destructor for type `std::iter::Map<Rows<'_>, [closure@$DIR/issue-54556-stephaneyfx.rs:28:14: 28:23]>`\n+   |\n+   = note: The temporary is part of an expression at the end of a block. Consider forcing this temporary to be dropped sooner, before the block's local variables are dropped. For example, you could save the expression's value in a new local variable `x` and then make `x` be the expression at the end of the block.\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "10a4e21497c73321f4dabfc157372322fdf2f14e", "filename": "src/test/ui/nll/issue-54556-stephaneyfx.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fnll%2Fissue-54556-stephaneyfx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fnll%2Fissue-54556-stephaneyfx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54556-stephaneyfx.rs?ref=dbecb7a6449e497ccc7d14801a4f595aa20147db", "patch": "@@ -0,0 +1,35 @@\n+// This is a reduction of a concrete test illustrating a case that was\n+// annoying to Rust developer stephaneyfx (see issue #46413).\n+//\n+// With resolving issue #54556, pnkfelix hopes that the new diagnostic\n+// output produced by NLL helps to *explain* the semantic significance\n+// of temp drop order, and thus why storing the result in `x` and then\n+// returning `x` works.\n+\n+pub struct Statement;\n+\n+pub struct Rows<'stmt>(&'stmt Statement);\n+\n+impl<'stmt> Drop for Rows<'stmt> {\n+    fn drop(&mut self) {}\n+}\n+\n+impl<'stmt> Iterator for Rows<'stmt> {\n+    type Item = String;\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        None\n+    }\n+}\n+\n+fn get_names() -> Option<String> {\n+    let stmt = Statement;\n+    let rows = Rows(&stmt);\n+    rows.map(|row| row).next()\n+    // let x = rows.map(|row| row).next();\n+    // x\n+    //\n+    // Removing the map works too as does removing the Drop impl.\n+}\n+\n+fn main() {}"}, {"sha": "4e581a516b2d3651dc401a9b1b12b2294ae4b853", "filename": "src/test/ui/nll/issue-54556-stephaneyfx.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fnll%2Fissue-54556-stephaneyfx.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fnll%2Fissue-54556-stephaneyfx.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54556-stephaneyfx.stderr?ref=dbecb7a6449e497ccc7d14801a4f595aa20147db", "patch": "@@ -0,0 +1,14 @@\n+error[E0597]: `stmt` does not live long enough\n+  --> $DIR/issue-54556-stephaneyfx.rs:27:22\n+   |\n+LL |     let rows = Rows(&stmt);\n+   |                      ^^^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | - `stmt` dropped here while still borrowed\n+   |\n+   = note: values in a scope are dropped in the opposite order they are created\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "513dca7950af92ef170f22acddb4196a0c151c51", "filename": "src/test/ui/nll/issue-54556-temps-in-tail-diagnostic.nll.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fnll%2Fissue-54556-temps-in-tail-diagnostic.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fnll%2Fissue-54556-temps-in-tail-diagnostic.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54556-temps-in-tail-diagnostic.nll.stderr?ref=dbecb7a6449e497ccc7d14801a4f595aa20147db", "patch": "@@ -0,0 +1,19 @@\n+error[E0597]: `_thing1` does not live long enough\n+  --> $DIR/issue-54556-temps-in-tail-diagnostic.rs:5:11\n+   |\n+LL |         D(&_thing1).end()\n+   |         --^^^^^^^^-\n+   |         | |\n+   |         | borrowed value does not live long enough\n+   |         a temporary with access to the borrow is created here ...\n+LL |     }\n+   |     - `_thing1` dropped here while still borrowed\n+LL | \n+LL |     ;\n+   |     - ... and the borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `D`\n+   |\n+   = note: The temporary is part of an expression at the end of a block. Consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped.\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "63b04333de4be25199f1a3882696681d56e531e0", "filename": "src/test/ui/nll/issue-54556-temps-in-tail-diagnostic.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fnll%2Fissue-54556-temps-in-tail-diagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fnll%2Fissue-54556-temps-in-tail-diagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54556-temps-in-tail-diagnostic.rs?ref=dbecb7a6449e497ccc7d14801a4f595aa20147db", "patch": "@@ -0,0 +1,23 @@\n+fn main() {\n+    {\n+        let mut _thing1 = D(Box::new(\"thing1\"));\n+        // D(\"other\").next(&_thing1).end()\n+        D(&_thing1).end()\n+    }\n+\n+    ;\n+}\n+\n+#[derive(Debug)]\n+struct D<T: std::fmt::Debug>(T);\n+\n+impl<T: std::fmt::Debug>  Drop for D<T> {\n+    fn drop(&mut self) {\n+        println!(\"dropping {:?})\", self);\n+    }\n+}\n+\n+impl<T: std::fmt::Debug> D<T> {\n+    fn next<U: std::fmt::Debug>(&self, _other: U) -> D<U> { D(_other) }\n+    fn end(&self) { }\n+}"}, {"sha": "a74970f71182a77cfb3719d1e6d4467a9610aa32", "filename": "src/test/ui/nll/issue-54556-temps-in-tail-diagnostic.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fnll%2Fissue-54556-temps-in-tail-diagnostic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fnll%2Fissue-54556-temps-in-tail-diagnostic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54556-temps-in-tail-diagnostic.stderr?ref=dbecb7a6449e497ccc7d14801a4f595aa20147db", "patch": "@@ -0,0 +1,14 @@\n+error[E0597]: `_thing1` does not live long enough\n+  --> $DIR/issue-54556-temps-in-tail-diagnostic.rs:5:12\n+   |\n+LL |         D(&_thing1).end()\n+   |            ^^^^^^^ borrowed value does not live long enough\n+LL |     }\n+   |     - `_thing1` dropped here while still borrowed\n+LL | \n+LL |     ;\n+   |     - borrowed value needs to live until here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "9911fc9729190a08b256dd1e31f55dd2872a8ae7", "filename": "src/test/ui/nll/issue-54556-used-vs-unused-tails.nll.stderr", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fnll%2Fissue-54556-used-vs-unused-tails.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fnll%2Fissue-54556-used-vs-unused-tails.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54556-used-vs-unused-tails.nll.stderr?ref=dbecb7a6449e497ccc7d14801a4f595aa20147db", "patch": "@@ -0,0 +1,113 @@\n+error[E0597]: `_t1` does not live long enough\n+  --> $DIR/issue-54556-used-vs-unused-tails.rs:10:55\n+   |\n+LL |     {              let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end()    } ; // suggest `;`\n+   |                                                     --^^^^-          - - ... and the borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `D`\n+   |                                                     | |              |\n+   |                                                     | |              `_t1` dropped here while still borrowed\n+   |                                                     | borrowed value does not live long enough\n+   |                                                     a temporary with access to the borrow is created here ...\n+   |\n+   = note: The temporary is part of an expression at the end of a block. Consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped.\n+\n+error[E0597]: `_t1` does not live long enough\n+  --> $DIR/issue-54556-used-vs-unused-tails.rs:12:55\n+   |\n+LL |     {            { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end() }  } ; // suggest `;`\n+   |                                                     --^^^^-       -    - ... and the borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `D`\n+   |                                                     | |           |\n+   |                                                     | |           `_t1` dropped here while still borrowed\n+   |                                                     | borrowed value does not live long enough\n+   |                                                     a temporary with access to the borrow is created here ...\n+   |\n+   = note: The temporary is part of an expression at the end of a block. Consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped.\n+\n+error[E0597]: `_t1` does not live long enough\n+  --> $DIR/issue-54556-used-vs-unused-tails.rs:14:55\n+   |\n+LL |     {            { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end() }; }   // suggest `;`\n+   |                                                     --^^^^-       -- ... and the borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `D`\n+   |                                                     | |           |\n+   |                                                     | |           `_t1` dropped here while still borrowed\n+   |                                                     | borrowed value does not live long enough\n+   |                                                     a temporary with access to the borrow is created here ...\n+   |\n+   = note: The temporary is part of an expression at the end of a block. Consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped.\n+\n+error[E0597]: `_t1` does not live long enough\n+  --> $DIR/issue-54556-used-vs-unused-tails.rs:16:55\n+   |\n+LL |     let _ =      { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end()    } ; // suggest `;`\n+   |                                                     --^^^^-          - - ... and the borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `D`\n+   |                                                     | |              |\n+   |                                                     | |              `_t1` dropped here while still borrowed\n+   |                                                     | borrowed value does not live long enough\n+   |                                                     a temporary with access to the borrow is created here ...\n+   |\n+   = note: The temporary is part of an expression at the end of a block. Consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped.\n+\n+error[E0597]: `_t1` does not live long enough\n+  --> $DIR/issue-54556-used-vs-unused-tails.rs:18:55\n+   |\n+LL |     let _u =     { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).unit()   } ; // suggest `;`\n+   |                                                     --^^^^-          - - ... and the borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `D`\n+   |                                                     | |              |\n+   |                                                     | |              `_t1` dropped here while still borrowed\n+   |                                                     | borrowed value does not live long enough\n+   |                                                     a temporary with access to the borrow is created here ...\n+   |\n+   = note: The temporary is part of an expression at the end of a block. Consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped.\n+\n+error[E0597]: `_t1` does not live long enough\n+  --> $DIR/issue-54556-used-vs-unused-tails.rs:20:55\n+   |\n+LL |     let _x =     { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end()    } ; // `let x = ...; x`\n+   |                                                     --^^^^-          - - ... and the borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `D`\n+   |                                                     | |              |\n+   |                                                     | |              `_t1` dropped here while still borrowed\n+   |                                                     | borrowed value does not live long enough\n+   |                                                     a temporary with access to the borrow is created here ...\n+   |\n+   = note: The temporary is part of an expression at the end of a block. Consider forcing this temporary to be dropped sooner, before the block's local variables are dropped. For example, you could save the expression's value in a new local variable `x` and then make `x` be the expression at the end of the block.\n+\n+error[E0597]: `_t1` does not live long enough\n+  --> $DIR/issue-54556-used-vs-unused-tails.rs:24:55\n+   |\n+LL |     _y =         { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end() } ; // `let x = ...; x`\n+   |                                                     --^^^^-       - - ... and the borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `D`\n+   |                                                     | |           |\n+   |                                                     | |           `_t1` dropped here while still borrowed\n+   |                                                     | borrowed value does not live long enough\n+   |                                                     a temporary with access to the borrow is created here ...\n+   |\n+   = note: The temporary is part of an expression at the end of a block. Consider forcing this temporary to be dropped sooner, before the block's local variables are dropped. For example, you could save the expression's value in a new local variable `x` and then make `x` be the expression at the end of the block.\n+\n+error[E0597]: `_t1` does not live long enough\n+  --> $DIR/issue-54556-used-vs-unused-tails.rs:30:55\n+   |\n+LL | fn f_local_ref() { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).unit()   }  // suggest `;`\n+   |                                                     --^^^^-          -\n+   |                                                     | |              |\n+   |                                                     | |              `_t1` dropped here while still borrowed\n+   |                                                     | |              ... and the borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `D`\n+   |                                                     | borrowed value does not live long enough\n+   |                                                     a temporary with access to the borrow is created here ...\n+   |\n+   = note: The temporary is part of an expression at the end of a block. Consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped.\n+\n+error[E0597]: `_t1` does not live long enough\n+  --> $DIR/issue-54556-used-vs-unused-tails.rs:32:55\n+   |\n+LL | fn f() -> String { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end()   }   // `let x = ...; x`\n+   |                                                     --^^^^-         -\n+   |                                                     | |             |\n+   |                                                     | |             `_t1` dropped here while still borrowed\n+   |                                                     | |             ... and the borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `D`\n+   |                                                     | borrowed value does not live long enough\n+   |                                                     a temporary with access to the borrow is created here ...\n+   |\n+   = note: The temporary is part of an expression at the end of a block. Consider forcing this temporary to be dropped sooner, before the block's local variables are dropped. For example, you could save the expression's value in a new local variable `x` and then make `x` be the expression at the end of the block.\n+\n+error: aborting due to 9 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "64e4f75724aada39c867190435cb2d57bc07f4c5", "filename": "src/test/ui/nll/issue-54556-used-vs-unused-tails.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fnll%2Fissue-54556-used-vs-unused-tails.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fnll%2Fissue-54556-used-vs-unused-tails.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54556-used-vs-unused-tails.rs?ref=dbecb7a6449e497ccc7d14801a4f595aa20147db", "patch": "@@ -0,0 +1,48 @@\n+// Ths test case is exploring the space of how blocs with tail\n+// expressions and statements can be composed, trying to keep each\n+// case on one line so that we can compare them via a vertical scan\n+// with the human eye.\n+\n+// Each comment on the right side of the line is summarizing the\n+// expected suggestion from the diagnostic for issue #54556.\n+\n+fn main() {\n+    {              let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end()    } ; // suggest `;`\n+\n+    {            { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end() }  } ; // suggest `;`\n+\n+    {            { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end() }; }   // suggest `;`\n+\n+    let _ =      { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end()    } ; // suggest `;`\n+\n+    let _u =     { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).unit()   } ; // suggest `;`\n+\n+    let _x =     { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end()    } ; // `let x = ...; x`\n+    let _x =     { let mut _t1 = D(Box::new(\"t1\")); let x = D(&_t1).end(); x } ; // no error\n+\n+    let mut _y;\n+    _y =         { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end() } ; // `let x = ...; x`\n+    _y =         { let mut _t1 = D(Box::new(\"t1\")); let x = D(&_t1).end(); x } ; // no error\n+}\n+\n+fn f_param_ref(_t1: D<Box<&'static str>>) {         D(&_t1).unit()   }  // no error\n+\n+fn f_local_ref() { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).unit()   }  // suggest `;`\n+\n+fn f() -> String { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end()   }   // `let x = ...; x`\n+\n+\n+#[derive(Debug)]\n+struct D<T: std::fmt::Debug>(T);\n+\n+impl<T: std::fmt::Debug>  Drop for D<T> {\n+    fn drop(&mut self) {\n+        println!(\"dropping {:?})\", self);\n+    }\n+}\n+\n+impl<T: std::fmt::Debug> D<T> {\n+    fn next<U: std::fmt::Debug>(&self, _other: U) -> D<U> { D(_other) }\n+    fn end(&self) -> String { format!(\"End({:?})\", self.0) }\n+    fn unit(&self) { }\n+}"}, {"sha": "c75707b2aee172d9167cf8c790e26112f641e8de", "filename": "src/test/ui/nll/issue-54556-used-vs-unused-tails.stderr", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fnll%2Fissue-54556-used-vs-unused-tails.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fnll%2Fissue-54556-used-vs-unused-tails.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54556-used-vs-unused-tails.stderr?ref=dbecb7a6449e497ccc7d14801a4f595aa20147db", "patch": "@@ -0,0 +1,86 @@\n+error[E0597]: `_t1` does not live long enough\n+  --> $DIR/issue-54556-used-vs-unused-tails.rs:10:56\n+   |\n+LL |     {              let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end()    } ; // suggest `;`\n+   |                                                        ^^^           - - borrowed value needs to live until here\n+   |                                                        |             |\n+   |                                                        |             `_t1` dropped here while still borrowed\n+   |                                                        borrowed value does not live long enough\n+\n+error[E0597]: `_t1` does not live long enough\n+  --> $DIR/issue-54556-used-vs-unused-tails.rs:12:56\n+   |\n+LL |     {            { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end() }  } ; // suggest `;`\n+   |                                                        ^^^        -    - borrowed value needs to live until here\n+   |                                                        |          |\n+   |                                                        |          `_t1` dropped here while still borrowed\n+   |                                                        borrowed value does not live long enough\n+\n+error[E0597]: `_t1` does not live long enough\n+  --> $DIR/issue-54556-used-vs-unused-tails.rs:14:56\n+   |\n+LL |     {            { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end() }; }   // suggest `;`\n+   |                                                        ^^^        -- borrowed value needs to live until here\n+   |                                                        |          |\n+   |                                                        |          `_t1` dropped here while still borrowed\n+   |                                                        borrowed value does not live long enough\n+\n+error[E0597]: `_t1` does not live long enough\n+  --> $DIR/issue-54556-used-vs-unused-tails.rs:16:56\n+   |\n+LL |     let _ =      { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end()    } ; // suggest `;`\n+   |                                                        ^^^           - - borrowed value needs to live until here\n+   |                                                        |             |\n+   |                                                        |             `_t1` dropped here while still borrowed\n+   |                                                        borrowed value does not live long enough\n+\n+error[E0597]: `_t1` does not live long enough\n+  --> $DIR/issue-54556-used-vs-unused-tails.rs:18:56\n+   |\n+LL |     let _u =     { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).unit()   } ; // suggest `;`\n+   |                                                        ^^^           - - borrowed value needs to live until here\n+   |                                                        |             |\n+   |                                                        |             `_t1` dropped here while still borrowed\n+   |                                                        borrowed value does not live long enough\n+\n+error[E0597]: `_t1` does not live long enough\n+  --> $DIR/issue-54556-used-vs-unused-tails.rs:20:56\n+   |\n+LL |     let _x =     { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end()    } ; // `let x = ...; x`\n+   |                                                        ^^^           - - borrowed value needs to live until here\n+   |                                                        |             |\n+   |                                                        |             `_t1` dropped here while still borrowed\n+   |                                                        borrowed value does not live long enough\n+\n+error[E0597]: `_t1` does not live long enough\n+  --> $DIR/issue-54556-used-vs-unused-tails.rs:24:56\n+   |\n+LL |     _y =         { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end() } ; // `let x = ...; x`\n+   |                                                        ^^^        - - borrowed value needs to live until here\n+   |                                                        |          |\n+   |                                                        |          `_t1` dropped here while still borrowed\n+   |                                                        borrowed value does not live long enough\n+\n+error[E0597]: `_t1` does not live long enough\n+  --> $DIR/issue-54556-used-vs-unused-tails.rs:30:56\n+   |\n+LL | fn f_local_ref() { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).unit()   }  // suggest `;`\n+   |                                                        ^^^           - `_t1` dropped here while still borrowed\n+   |                                                        |\n+   |                                                        borrowed value does not live long enough\n+   |\n+   = note: values in a scope are dropped in the opposite order they are created\n+\n+error[E0597]: `_t1` does not live long enough\n+  --> $DIR/issue-54556-used-vs-unused-tails.rs:32:56\n+   |\n+LL | fn f() -> String { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end()   }   // `let x = ...; x`\n+   |                                                        ^^^          - `_t1` dropped here while still borrowed\n+   |                                                        |\n+   |                                                        borrowed value does not live long enough\n+   |\n+   = note: values in a scope are dropped in the opposite order they are created\n+\n+error: aborting due to 9 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "a13e59fa48b5cc984e82e24fb751b081cd412be7", "filename": "src/test/ui/nll/issue-54556-wrap-it-up.nll.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fnll%2Fissue-54556-wrap-it-up.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fnll%2Fissue-54556-wrap-it-up.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54556-wrap-it-up.nll.stderr?ref=dbecb7a6449e497ccc7d14801a4f595aa20147db", "patch": "@@ -0,0 +1,14 @@\n+error[E0506]: cannot assign to `x` because it is borrowed\n+  --> $DIR/issue-54556-wrap-it-up.rs:27:5\n+   |\n+LL |     let wrap = Wrap { p: &mut x };\n+   |                          ------ borrow of `x` occurs here\n+...\n+LL |     x = 1; //~ ERROR cannot assign to `x` because it is borrowed [E0506]\n+   |     ^^^^^ assignment to borrowed `x` occurs here\n+LL | }\n+   | - borrow might be used here, when `foo` is dropped and runs the destructor for type `Foo<'_>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0506`."}, {"sha": "11dbef0d8646098d83b6c8b480baf8ac4b73f75b", "filename": "src/test/ui/nll/issue-54556-wrap-it-up.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fnll%2Fissue-54556-wrap-it-up.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fnll%2Fissue-54556-wrap-it-up.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54556-wrap-it-up.rs?ref=dbecb7a6449e497ccc7d14801a4f595aa20147db", "patch": "@@ -0,0 +1,28 @@\n+// This is testing how the diagnostic from issue #54556 behaves when\n+// the destructor code is attached to a place held in a field of the\n+// temporary being dropped.\n+//\n+// Eventually it would be nice if the diagnostic would actually report\n+// that specific place and its type that implements the `Drop` trait.\n+// But for the short term, it is acceptable to just print out the\n+// whole type of the temporary.\n+\n+#![allow(warnings)]\n+\n+struct Wrap<'p> { p: &'p mut i32 }\n+\n+impl<'p> Drop for Wrap<'p> {\n+    fn drop(&mut self) {\n+        *self.p += 1;\n+    }\n+}\n+\n+struct Foo<'p> { a: String, b: Wrap<'p> }\n+\n+fn main() {\n+    let mut x = 0;\n+    let wrap = Wrap { p: &mut x };\n+    let s = String::from(\"str\");\n+    let foo = Foo { a: s, b: wrap };\n+    x = 1; //~ ERROR cannot assign to `x` because it is borrowed [E0506]\n+}"}, {"sha": "a0c19b96387980796b68a28e174b035d259bd790", "filename": "src/test/ui/nll/issue-54556-wrap-it-up.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fnll%2Fissue-54556-wrap-it-up.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fnll%2Fissue-54556-wrap-it-up.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54556-wrap-it-up.stderr?ref=dbecb7a6449e497ccc7d14801a4f595aa20147db", "patch": "@@ -0,0 +1,12 @@\n+error[E0506]: cannot assign to `x` because it is borrowed\n+  --> $DIR/issue-54556-wrap-it-up.rs:27:5\n+   |\n+LL |     let wrap = Wrap { p: &mut x };\n+   |                               - borrow of `x` occurs here\n+...\n+LL |     x = 1; //~ ERROR cannot assign to `x` because it is borrowed [E0506]\n+   |     ^^^^^ assignment to borrowed `x` occurs here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0506`."}, {"sha": "fc5417ac80c44377608f12cab1895e5f788435aa", "filename": "src/test/ui/nll/maybe-initialized-drop-implicit-fragment-drop.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-implicit-fragment-drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-implicit-fragment-drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-implicit-fragment-drop.stderr?ref=dbecb7a6449e497ccc7d14801a4f595aa20147db", "patch": "@@ -8,7 +8,7 @@ LL |     x = 1; //~ ERROR cannot assign to `x` because it is borrowed [E0506]\n    |     ^^^^^ assignment to borrowed `x` occurs here\n LL |     // FIXME ^ Should not error in the future with implicit dtors, only manually implemented ones\n LL | }\n-   | - borrow later used here, when `foo` is dropped\n+   | - borrow might be used here, when `foo` is dropped and runs the destructor for type `Foo<'_>`\n \n error: aborting due to previous error\n "}, {"sha": "6ae026fb169b068e817d0e9ef9d79ab907ca75fe", "filename": "src/test/ui/nll/maybe-initialized-drop-with-fragment.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-with-fragment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-with-fragment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-with-fragment.stderr?ref=dbecb7a6449e497ccc7d14801a4f595aa20147db", "patch": "@@ -7,7 +7,7 @@ LL |     let wrap = Wrap { p: &mut x };\n LL |     x = 1; //~ ERROR cannot assign to `x` because it is borrowed [E0506]\n    |     ^^^^^ assignment to borrowed `x` occurs here\n LL | }\n-   | - borrow later used here, when `foo` is dropped\n+   | - borrow might be used here, when `foo` is dropped and runs the destructor for type `Foo<'_>`\n \n error: aborting due to previous error\n "}, {"sha": "dd16e9a0e840cad997c5c911f27dbb54c93f9a90", "filename": "src/test/ui/nll/maybe-initialized-drop-with-uninitialized-fragments.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-with-uninitialized-fragments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-with-uninitialized-fragments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-with-uninitialized-fragments.stderr?ref=dbecb7a6449e497ccc7d14801a4f595aa20147db", "patch": "@@ -8,7 +8,7 @@ LL |     x = 1; //~ ERROR cannot assign to `x` because it is borrowed [E0506]\n    |     ^^^^^ assignment to borrowed `x` occurs here\n LL |     // FIXME ^ This currently errors and it should not.\n LL | }\n-   | - borrow later used here, when `foo` is dropped\n+   | - borrow might be used here, when `foo` is dropped and runs the destructor for type `Foo<'_>`\n \n error: aborting due to previous error\n "}, {"sha": "e8f427826ba33a65630a30c870d5d3cfc712e81f", "filename": "src/test/ui/nll/maybe-initialized-drop.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop.stderr?ref=dbecb7a6449e497ccc7d14801a4f595aa20147db", "patch": "@@ -6,7 +6,7 @@ LL |     let wrap = Wrap { p: &mut x };\n LL |     x = 1; //~ ERROR cannot assign to `x` because it is borrowed [E0506]\n    |     ^^^^^ assignment to borrowed `x` occurs here\n LL | }\n-   | - borrow later used here, when `wrap` is dropped\n+   | - borrow might be used here, when `wrap` is dropped and runs the `Drop` code for type `Wrap`\n \n error: aborting due to previous error\n "}, {"sha": "99a839f76d33cf87eceed63eafa1da4f6e361f15", "filename": "src/test/ui/span/destructor-restrictions.nll.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fspan%2Fdestructor-restrictions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fspan%2Fdestructor-restrictions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdestructor-restrictions.nll.stderr?ref=dbecb7a6449e497ccc7d14801a4f595aa20147db", "patch": "@@ -2,9 +2,16 @@ error[E0597]: `*a` does not live long enough\n   --> $DIR/destructor-restrictions.rs:18:10\n    |\n LL |         *a.borrow() + 1\n-   |          ^ borrowed value does not live long enough\n+   |          ^---------\n+   |          |\n+   |          borrowed value does not live long enough\n+   |          a temporary with access to the borrow is created here ...\n LL |     }; //~^ ERROR `*a` does not live long enough\n-   |     - `*a` dropped here while still borrowed\n+   |     -- ... and the borrow might be used here, when that temporary is dropped and runs the destructor for type `std::cell::Ref<'_, i32>`\n+   |     |\n+   |     `*a` dropped here while still borrowed\n+   |\n+   = note: The temporary is part of an expression at the end of a block. Consider forcing this temporary to be dropped sooner, before the block's local variables are dropped. For example, you could save the expression's value in a new local variable `x` and then make `x` be the expression at the end of the block.\n \n error: aborting due to previous error\n "}, {"sha": "52d4007f3f8f6cd84df7ce1a33ee4e5b5e294347", "filename": "src/test/ui/span/dropck-object-cycle.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fspan%2Fdropck-object-cycle.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fspan%2Fdropck-object-cycle.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck-object-cycle.nll.stderr?ref=dbecb7a6449e497ccc7d14801a4f595aa20147db", "patch": "@@ -8,7 +8,7 @@ LL | }\n    | -\n    | |\n    | `*m` dropped here while still borrowed\n-   | borrow later used here, when `m` is dropped\n+   | borrow might be used here, when `m` is dropped and runs the destructor for type `std::boxed::Box<dyn Trait<'_>>`\n \n error: aborting due to previous error\n "}, {"sha": "32abfd81f53a6a281b90537621e4d4fd32563ab0", "filename": "src/test/ui/span/dropck_arr_cycle_checked.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fspan%2Fdropck_arr_cycle_checked.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fspan%2Fdropck_arr_cycle_checked.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck_arr_cycle_checked.nll.stderr?ref=dbecb7a6449e497ccc7d14801a4f595aa20147db", "patch": "@@ -8,7 +8,7 @@ LL | }\n    | -\n    | |\n    | `b2` dropped here while still borrowed\n-   | borrow later used here, when `b1` is dropped\n+   | borrow might be used here, when `b1` is dropped and runs the destructor for type `B<'_>`\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n \n@@ -22,7 +22,7 @@ LL | }\n    | -\n    | |\n    | `b3` dropped here while still borrowed\n-   | borrow later used here, when `b1` is dropped\n+   | borrow might be used here, when `b1` is dropped and runs the destructor for type `B<'_>`\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n \n@@ -36,7 +36,7 @@ LL | }\n    | -\n    | |\n    | `b1` dropped here while still borrowed\n-   | borrow later used here, when `b1` is dropped\n+   | borrow might be used here, when `b1` is dropped and runs the destructor for type `B<'_>`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "0c5c49c80de5d412f95be002e67379b41a8ee4d0", "filename": "src/test/ui/span/dropck_direct_cycle_with_drop.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fspan%2Fdropck_direct_cycle_with_drop.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fspan%2Fdropck_direct_cycle_with_drop.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck_direct_cycle_with_drop.nll.stderr?ref=dbecb7a6449e497ccc7d14801a4f595aa20147db", "patch": "@@ -8,7 +8,7 @@ LL | }\n    | -\n    | |\n    | `d2` dropped here while still borrowed\n-   | borrow later used here, when `d1` is dropped\n+   | borrow might be used here, when `d1` is dropped and runs the `Drop` code for type `D`\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n \n@@ -22,7 +22,7 @@ LL | }\n    | -\n    | |\n    | `d1` dropped here while still borrowed\n-   | borrow later used here, when `d1` is dropped\n+   | borrow might be used here, when `d1` is dropped and runs the `Drop` code for type `D`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "fb68262b0ae2a0e6b7059d3a0a7829b2f0e06a0e", "filename": "src/test/ui/span/dropck_misc_variants.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fspan%2Fdropck_misc_variants.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fspan%2Fdropck_misc_variants.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck_misc_variants.nll.stderr?ref=dbecb7a6449e497ccc7d14801a4f595aa20147db", "patch": "@@ -7,7 +7,7 @@ LL | }\n    | -\n    | |\n    | `bomb` dropped here while still borrowed\n-   | borrow later used here, when `_w` is dropped\n+   | borrow might be used here, when `_w` is dropped and runs the destructor for type `Wrap<&[&str]>`\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n \n@@ -21,7 +21,7 @@ LL | }\n    | -\n    | |\n    | `v` dropped here while still borrowed\n-   | borrow later used here, when `_w` is dropped\n+   | borrow might be used here, when `_w` is dropped and runs the destructor for closure\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n "}, {"sha": "ad62936b870c849f39d731bb87971b5f27af62bb", "filename": "src/test/ui/span/dropck_vec_cycle_checked.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.nll.stderr?ref=dbecb7a6449e497ccc7d14801a4f595aa20147db", "patch": "@@ -8,7 +8,7 @@ LL | }\n    | -\n    | |\n    | `c2` dropped here while still borrowed\n-   | borrow later used here, when `c1` is dropped\n+   | borrow might be used here, when `c1` is dropped and runs the destructor for type `C<'_>`\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n \n@@ -22,7 +22,7 @@ LL | }\n    | -\n    | |\n    | `c3` dropped here while still borrowed\n-   | borrow later used here, when `c1` is dropped\n+   | borrow might be used here, when `c1` is dropped and runs the destructor for type `C<'_>`\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n \n@@ -36,7 +36,7 @@ LL | }\n    | -\n    | |\n    | `c1` dropped here while still borrowed\n-   | borrow later used here, when `c1` is dropped\n+   | borrow might be used here, when `c1` is dropped and runs the destructor for type `C<'_>`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "9e82884b95440f9a03be65136a8d0229778f418b", "filename": "src/test/ui/span/issue-23338-locals-die-before-temps-of-body.nll.stderr", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fspan%2Fissue-23338-locals-die-before-temps-of-body.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fspan%2Fissue-23338-locals-die-before-temps-of-body.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-23338-locals-die-before-temps-of-body.nll.stderr?ref=dbecb7a6449e497ccc7d14801a4f595aa20147db", "patch": "@@ -2,17 +2,32 @@ error[E0597]: `y` does not live long enough\n   --> $DIR/issue-23338-locals-die-before-temps-of-body.rs:20:5\n    |\n LL |     y.borrow().clone()\n-   |     ^ borrowed value does not live long enough\n+   |     ^---------\n+   |     |\n+   |     borrowed value does not live long enough\n+   |     a temporary with access to the borrow is created here ...\n LL | }\n-   | - `y` dropped here while still borrowed\n+   | -\n+   | |\n+   | `y` dropped here while still borrowed\n+   | ... and the borrow might be used here, when that temporary is dropped and runs the destructor for type `std::cell::Ref<'_, std::string::String>`\n+   |\n+   = note: The temporary is part of an expression at the end of a block. Consider forcing this temporary to be dropped sooner, before the block's local variables are dropped. For example, you could save the expression's value in a new local variable `x` and then make `x` be the expression at the end of the block.\n \n error[E0597]: `y` does not live long enough\n   --> $DIR/issue-23338-locals-die-before-temps-of-body.rs:27:9\n    |\n LL |         y.borrow().clone()\n-   |         ^ borrowed value does not live long enough\n+   |         ^---------\n+   |         |\n+   |         borrowed value does not live long enough\n+   |         a temporary with access to the borrow is created here ...\n LL |     };\n-   |     - `y` dropped here while still borrowed\n+   |     -- ... and the borrow might be used here, when that temporary is dropped and runs the destructor for type `std::cell::Ref<'_, std::string::String>`\n+   |     |\n+   |     `y` dropped here while still borrowed\n+   |\n+   = note: The temporary is part of an expression at the end of a block. Consider forcing this temporary to be dropped sooner, before the block's local variables are dropped. For example, you could save the expression's value in a new local variable `x` and then make `x` be the expression at the end of the block.\n \n error: aborting due to 2 previous errors\n "}, {"sha": "fb995990f167ba1fb3451ffa968d5116c8709458", "filename": "src/test/ui/span/issue-24805-dropck-child-has-items-via-parent.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-child-has-items-via-parent.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-child-has-items-via-parent.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-child-has-items-via-parent.nll.stderr?ref=dbecb7a6449e497ccc7d14801a4f595aa20147db", "patch": "@@ -8,7 +8,7 @@ LL | }\n    | -\n    | |\n    | `d1` dropped here while still borrowed\n-   | borrow later used here, when `_d` is dropped\n+   | borrow might be used here, when `_d` is dropped and runs the `Drop` code for type `D_Child`\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n "}, {"sha": "5eaff66e72ea22974bb1f4985d08263cf3d41207", "filename": "src/test/ui/span/issue-24805-dropck-trait-has-items.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-trait-has-items.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-trait-has-items.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-trait-has-items.nll.stderr?ref=dbecb7a6449e497ccc7d14801a4f595aa20147db", "patch": "@@ -7,7 +7,7 @@ LL | }\n    | -\n    | |\n    | `d1` dropped here while still borrowed\n-   | borrow later used here, when `_d` is dropped\n+   | borrow might be used here, when `_d` is dropped and runs the `Drop` code for type `D_HasSelfMethod`\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n \n@@ -20,7 +20,7 @@ LL | }\n    | -\n    | |\n    | `d1` dropped here while still borrowed\n-   | borrow later used here, when `_d` is dropped\n+   | borrow might be used here, when `_d` is dropped and runs the `Drop` code for type `D_HasMethodWithSelfArg`\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n \n@@ -33,7 +33,7 @@ LL | }\n    | -\n    | |\n    | `d1` dropped here while still borrowed\n-   | borrow later used here, when `_d` is dropped\n+   | borrow might be used here, when `_d` is dropped and runs the `Drop` code for type `D_HasType`\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n "}, {"sha": "26c74b653a11b592db92c3f97b2ae6d1267bb125", "filename": "src/test/ui/span/issue-24895-copy-clone-dropck.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fspan%2Fissue-24895-copy-clone-dropck.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fspan%2Fissue-24895-copy-clone-dropck.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24895-copy-clone-dropck.nll.stderr?ref=dbecb7a6449e497ccc7d14801a4f595aa20147db", "patch": "@@ -7,7 +7,7 @@ LL | }\n    | -\n    | |\n    | `d1` dropped here while still borrowed\n-   | borrow later used here, when `d2` is dropped\n+   | borrow might be used here, when `d2` is dropped and runs the `Drop` code for type `D`\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n "}, {"sha": "9801f92ce64469f96c3b7f2e537678114e558433", "filename": "src/test/ui/span/issue-25199.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fspan%2Fissue-25199.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fspan%2Fissue-25199.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-25199.nll.stderr?ref=dbecb7a6449e497ccc7d14801a4f595aa20147db", "patch": "@@ -8,7 +8,7 @@ LL | }\n    | -\n    | |\n    | `container` dropped here while still borrowed\n-   | borrow later used here, when `container` is dropped\n+   | borrow might be used here, when `container` is dropped and runs the destructor for type `Container<'_>`\n \n error: aborting due to previous error\n "}, {"sha": "79d9dab17769b1589689e0a172012635d9805389", "filename": "src/test/ui/span/issue-26656.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fspan%2Fissue-26656.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fspan%2Fissue-26656.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-26656.nll.stderr?ref=dbecb7a6449e497ccc7d14801a4f595aa20147db", "patch": "@@ -7,7 +7,7 @@ LL | }\n    | -\n    | |\n    | `ticking` dropped here while still borrowed\n-   | borrow later used here, when `zook` is dropped\n+   | borrow might be used here, when `zook` is dropped and runs the `Drop` code for type `Zook`\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n "}, {"sha": "77bb311c61a403766de36f96a7375ce40f3833bd", "filename": "src/test/ui/span/issue-29106.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fspan%2Fissue-29106.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fspan%2Fissue-29106.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-29106.nll.stderr?ref=dbecb7a6449e497ccc7d14801a4f595aa20147db", "patch": "@@ -7,7 +7,7 @@ LL |     }\n    |     -\n    |     |\n    |     `x` dropped here while still borrowed\n-   |     borrow later used here, when `y` is dropped\n+   |     borrow might be used here, when `y` is dropped and runs the `Drop` code for type `std::sync::Arc`\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n \n@@ -20,7 +20,7 @@ LL |     }\n    |     -\n    |     |\n    |     `x` dropped here while still borrowed\n-   |     borrow later used here, when `y` is dropped\n+   |     borrow might be used here, when `y` is dropped and runs the `Drop` code for type `std::rc::Rc`\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n "}, {"sha": "bc3a31b843fbce661a8936647e7554afcc4e3084", "filename": "src/test/ui/span/issue28498-reject-ex1.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-ex1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-ex1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-ex1.nll.stderr?ref=dbecb7a6449e497ccc7d14801a4f595aa20147db", "patch": "@@ -8,7 +8,7 @@ LL | }\n    | -\n    | |\n    | here, drop of `foo` needs exclusive access to `foo.data`, because the type `Foo<Concrete<'_>>` implements the `Drop` trait\n-   | borrow later used here, when `foo` is dropped\n+   | borrow might be used here, when `foo` is dropped and runs the `Drop` code for type `Foo`\n    |\n    = note: consider using a `let` binding to create a longer lived value\n "}, {"sha": "21508303afc2105e7172abe380d58e82d254f4d1", "filename": "src/test/ui/span/issue28498-reject-lifetime-param.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-lifetime-param.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-lifetime-param.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-lifetime-param.nll.stderr?ref=dbecb7a6449e497ccc7d14801a4f595aa20147db", "patch": "@@ -8,7 +8,7 @@ LL | }\n    | -\n    | |\n    | `first_dropped` dropped here while still borrowed\n-   | borrow later used here, when `foo1` is dropped\n+   | borrow might be used here, when `foo1` is dropped and runs the `Drop` code for type `Foo`\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n "}, {"sha": "752f96988db0ef7e6e24e6a58bda1f77ad7ff66a", "filename": "src/test/ui/span/issue28498-reject-passed-to-fn.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-passed-to-fn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-passed-to-fn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-passed-to-fn.nll.stderr?ref=dbecb7a6449e497ccc7d14801a4f595aa20147db", "patch": "@@ -8,7 +8,7 @@ LL | }\n    | -\n    | |\n    | `first_dropped` dropped here while still borrowed\n-   | borrow later used here, when `foo1` is dropped\n+   | borrow might be used here, when `foo1` is dropped and runs the `Drop` code for type `Foo`\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n "}, {"sha": "7bf55c8e9973d10179a848b2dcecfd849234cb15", "filename": "src/test/ui/span/issue28498-reject-trait-bound.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-trait-bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-trait-bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-trait-bound.nll.stderr?ref=dbecb7a6449e497ccc7d14801a4f595aa20147db", "patch": "@@ -8,7 +8,7 @@ LL | }\n    | -\n    | |\n    | `first_dropped` dropped here while still borrowed\n-   | borrow later used here, when `foo1` is dropped\n+   | borrow might be used here, when `foo1` is dropped and runs the `Drop` code for type `Foo`\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n "}, {"sha": "fd789e79e9133438cc8abf39f5e7f80faf892d17", "filename": "src/test/ui/span/regions-close-over-borrowed-ref-in-obj.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-borrowed-ref-in-obj.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-borrowed-ref-in-obj.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-borrowed-ref-in-obj.nll.stderr?ref=dbecb7a6449e497ccc7d14801a4f595aa20147db", "patch": "@@ -7,7 +7,7 @@ LL |         let ss: &isize = &id(1);\n LL |     }\n    |     - temporary value is freed at the end of this statement\n LL | }\n-   | - borrow later used here, when `blah` is dropped\n+   | - borrow might be used here, when `blah` is dropped and runs the destructor for type `std::boxed::Box<dyn Foo>`\n    |\n    = note: consider using a `let` binding to create a longer lived value\n "}, {"sha": "c17f502b77902a11d0507bf90364998e128bf862", "filename": "src/test/ui/span/send-is-not-static-std-sync.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync.nll.stderr?ref=dbecb7a6449e497ccc7d14801a4f595aa20147db", "patch": "@@ -62,7 +62,7 @@ LL |     }\n    |     - `z` dropped here while still borrowed\n ...\n LL | }\n-   | - borrow later used here, when `tx` is dropped\n+   | - borrow might be used here, when `tx` is dropped and runs the `Drop` code for type `std::sync::mpsc::Sender`\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n "}, {"sha": "7ad7a1b0bcdb7ef5bd729a89dd4ee643788e8fcd", "filename": "src/test/ui/span/vec-must-not-hide-type-from-dropck.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fspan%2Fvec-must-not-hide-type-from-dropck.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fspan%2Fvec-must-not-hide-type-from-dropck.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fvec-must-not-hide-type-from-dropck.nll.stderr?ref=dbecb7a6449e497ccc7d14801a4f595aa20147db", "patch": "@@ -8,7 +8,7 @@ LL | }\n    | -\n    | |\n    | `c2` dropped here while still borrowed\n-   | borrow later used here, when `c1` is dropped\n+   | borrow might be used here, when `c1` is dropped and runs the destructor for type `C<'_>`\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n \n@@ -22,7 +22,7 @@ LL | }\n    | -\n    | |\n    | `c1` dropped here while still borrowed\n-   | borrow later used here, when `c1` is dropped\n+   | borrow might be used here, when `c1` is dropped and runs the destructor for type `C<'_>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "562544c79165dd33bacfb73689e73a5e373f397e", "filename": "src/test/ui/span/vec_refs_data_with_early_death.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fspan%2Fvec_refs_data_with_early_death.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Fspan%2Fvec_refs_data_with_early_death.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fvec_refs_data_with_early_death.nll.stderr?ref=dbecb7a6449e497ccc7d14801a4f595aa20147db", "patch": "@@ -8,7 +8,7 @@ LL | }\n    | -\n    | |\n    | `x` dropped here while still borrowed\n-   | borrow later used here, when `v` is dropped\n+   | borrow might be used here, when `v` is dropped and runs the `Drop` code for type `Bag`\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n \n@@ -22,7 +22,7 @@ LL | }\n    | -\n    | |\n    | `y` dropped here while still borrowed\n-   | borrow later used here, when `v` is dropped\n+   | borrow might be used here, when `v` is dropped and runs the `Drop` code for type `Bag`\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n "}, {"sha": "ad01f84cd2c142c06c7f8f72ccf512a04cff495e", "filename": "src/test/ui/unboxed-closures/unboxed-closures-failed-recursive-fn-1.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-failed-recursive-fn-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbecb7a6449e497ccc7d14801a4f595aa20147db/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-failed-recursive-fn-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-failed-recursive-fn-1.nll.stderr?ref=dbecb7a6449e497ccc7d14801a4f595aa20147db", "patch": "@@ -10,7 +10,7 @@ LL | }\n    | -\n    | |\n    | `factorial` dropped here while still borrowed\n-   | borrow later used here, when `factorial` is dropped\n+   | borrow might be used here, when `factorial` is dropped and runs the destructor for type `std::option::Option<std::boxed::Box<dyn std::ops::Fn(u32) -> u32>>`\n \n error[E0506]: cannot assign to `factorial` because it is borrowed\n   --> $DIR/unboxed-closures-failed-recursive-fn-1.rs:30:5"}]}