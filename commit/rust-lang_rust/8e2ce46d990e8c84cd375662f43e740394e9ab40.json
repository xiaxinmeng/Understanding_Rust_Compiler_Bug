{"sha": "8e2ce46d990e8c84cd375662f43e740394e9ab40", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlMmNlNDZkOTkwZThjODRjZDM3NTY2MmY0M2U3NDAzOTRlOWFiNDA=", "commit": {"author": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2015-07-05T07:49:36Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2015-07-05T08:01:30Z"}, "message": "collections: vec_deque: rename \"ringbuf\" to \"VecDeque\" in doc comments", "tree": {"sha": "e27abfdeb1dc28211f324e58688acb02c02e42be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e27abfdeb1dc28211f324e58688acb02c02e42be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e2ce46d990e8c84cd375662f43e740394e9ab40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e2ce46d990e8c84cd375662f43e740394e9ab40", "html_url": "https://github.com/rust-lang/rust/commit/8e2ce46d990e8c84cd375662f43e740394e9ab40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e2ce46d990e8c84cd375662f43e740394e9ab40/comments", "author": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "281cfb93abf2f590c9c33003ecc3f6416d0f8ebe", "url": "https://api.github.com/repos/rust-lang/rust/commits/281cfb93abf2f590c9c33003ecc3f6416d0f8ebe", "html_url": "https://github.com/rust-lang/rust/commit/281cfb93abf2f590c9c33003ecc3f6416d0f8ebe"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "5d2065ecb9744b7ff98bf8abc5d9fcdbb62817d6", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8e2ce46d990e8c84cd375662f43e740394e9ab40/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e2ce46d990e8c84cd375662f43e740394e9ab40/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=8e2ce46d990e8c84cd375662f43e740394e9ab40", "patch": "@@ -43,7 +43,7 @@ pub struct VecDeque<T> {\n     // tail and head are pointers into the buffer. Tail always points\n     // to the first element that could be read, Head always points\n     // to where data should be written.\n-    // If tail == head the buffer is empty. The length of the ringbuf\n+    // If tail == head the buffer is empty. The length of the ringbuffer\n     // is defined as the distance between the two.\n \n     tail: usize,\n@@ -309,7 +309,7 @@ impl<T> VecDeque<T> {\n     }\n \n     /// Reserves capacity for at least `additional` more elements to be inserted in the given\n-    /// `Ringbuf`. The collection may reserve more space to avoid frequent reallocations.\n+    /// `VecDeque`. The collection may reserve more space to avoid frequent reallocations.\n     ///\n     /// # Panics\n     ///\n@@ -385,10 +385,10 @@ impl<T> VecDeque<T> {\n         }\n     }\n \n-    /// Shrinks the capacity of the ringbuf as much as possible.\n+    /// Shrinks the capacity of the `VecDeque` as much as possible.\n     ///\n     /// It will drop down as close as possible to the length but the allocator may still inform the\n-    /// ringbuf that there is space for a few more elements.\n+    /// `VecDeque` that there is space for a few more elements.\n     ///\n     /// # Examples\n     ///\n@@ -404,7 +404,7 @@ impl<T> VecDeque<T> {\n     /// ```\n     pub fn shrink_to_fit(&mut self) {\n         // +1 since the ringbuffer always leaves one space empty\n-        // len + 1 can't overflow for an existing, well-formed ringbuf.\n+        // len + 1 can't overflow for an existing, well-formed ringbuffer.\n         let target_cap = cmp::max(self.len() + 1, MINIMUM_CAPACITY + 1).next_power_of_two();\n         if target_cap < self.cap {\n             // There are three cases of interest:\n@@ -472,9 +472,9 @@ impl<T> VecDeque<T> {\n         }\n     }\n \n-    /// Shortens a ringbuf, dropping excess elements from the back.\n+    /// Shortens a `VecDeque`, dropping excess elements from the back.\n     ///\n-    /// If `len` is greater than the ringbuf's current length, this has no\n+    /// If `len` is greater than the `VecDeque`'s current length, this has no\n     /// effect.\n     ///\n     /// # Examples\n@@ -858,8 +858,8 @@ impl<T> VecDeque<T> {\n         self.tail <= self.head\n     }\n \n-    /// Removes an element from anywhere in the ringbuf and returns it, replacing it with the last\n-    /// element.\n+    /// Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\n+    /// last element.\n     ///\n     /// This does not preserve ordering, but is O(1).\n     ///\n@@ -892,7 +892,7 @@ impl<T> VecDeque<T> {\n         self.pop_back()\n     }\n \n-    /// Removes an element from anywhere in the ringbuf and returns it,\n+    /// Removes an element from anywhere in the `VecDeque` and returns it,\n     /// replacing it with the first element.\n     ///\n     /// This does not preserve ordering, but is O(1).\n@@ -926,13 +926,13 @@ impl<T> VecDeque<T> {\n         self.pop_front()\n     }\n \n-    /// Inserts an element at position `i` within the ringbuf. Whichever\n+    /// Inserts an element at position `i` within the `VecDeque`. Whichever\n     /// end is closer to the insertion point will be moved to make room,\n     /// and all the affected elements will be moved to new positions.\n     ///\n     /// # Panics\n     ///\n-    /// Panics if `i` is greater than ringbuf's length\n+    /// Panics if `i` is greater than `VecDeque`'s length\n     ///\n     /// # Examples\n     /// ```\n@@ -1132,7 +1132,7 @@ impl<T> VecDeque<T> {\n         }\n     }\n \n-    /// Removes and returns the element at position `i` from the ringbuf.\n+    /// Removes and returns the element at position `i` from the `VecDeque`.\n     /// Whichever end is closer to the removal point will be moved to make\n     /// room, and all the affected elements will be moved to new positions.\n     /// Returns `None` if `i` is out of bounds.\n@@ -1428,7 +1428,7 @@ impl<T> VecDeque<T> {\n }\n \n impl<T: Clone> VecDeque<T> {\n-    /// Modifies the ringbuf in-place so that `len()` is equal to new_len,\n+    /// Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\n     /// either by removing excess elements or by appending copies of a value to the back.\n     ///\n     /// # Examples"}]}