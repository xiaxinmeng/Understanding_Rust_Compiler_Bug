{"sha": "11fa1764ee4819aa674ca861c5e9a8fafd7a59e6", "node_id": "C_kwDOAAsO6NoAKDExZmExNzY0ZWU0ODE5YWE2NzRjYTg2MWM1ZTlhOGZhZmQ3YTU5ZTY", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2023-05-29T19:29:36Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2023-05-29T20:19:47Z"}, "message": "Make `TrustedStep` require `Copy`\n\nAll the implementations of the trait already are `Copy`, and this seems to be enough to simplify the implementations enough to make the MIR inliner willing to inline basics like `Range::next`.", "tree": {"sha": "049d2d0190b382df2a2c8a944d01ef92bb5f981f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/049d2d0190b382df2a2c8a944d01ef92bb5f981f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11fa1764ee4819aa674ca861c5e9a8fafd7a59e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11fa1764ee4819aa674ca861c5e9a8fafd7a59e6", "html_url": "https://github.com/rust-lang/rust/commit/11fa1764ee4819aa674ca861c5e9a8fafd7a59e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11fa1764ee4819aa674ca861c5e9a8fafd7a59e6/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc0943d2eebf139e7e509882b803f77bfd25656d", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc0943d2eebf139e7e509882b803f77bfd25656d", "html_url": "https://github.com/rust-lang/rust/commit/dc0943d2eebf139e7e509882b803f77bfd25656d"}], "stats": {"total": 187, "additions": 142, "deletions": 45}, "files": [{"sha": "462f7170a55b39ba0f382818b4c8432186c6f2e4", "filename": "library/core/src/iter/range.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/11fa1764ee4819aa674ca861c5e9a8fafd7a59e6/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11fa1764ee4819aa674ca861c5e9a8fafd7a59e6/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Frange.rs?ref=11fa1764ee4819aa674ca861c5e9a8fafd7a59e6", "patch": "@@ -619,25 +619,26 @@ impl<T: TrustedStep> RangeIteratorImpl for ops::Range<T> {\n     #[inline]\n     fn spec_next(&mut self) -> Option<T> {\n         if self.start < self.end {\n+            let old = self.start;\n             // SAFETY: just checked precondition\n-            let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };\n-            Some(mem::replace(&mut self.start, n))\n+            self.start = unsafe { Step::forward_unchecked(old, 1) };\n+            Some(old)\n         } else {\n             None\n         }\n     }\n \n     #[inline]\n     fn spec_nth(&mut self, n: usize) -> Option<T> {\n-        if let Some(plus_n) = Step::forward_checked(self.start.clone(), n) {\n+        if let Some(plus_n) = Step::forward_checked(self.start, n) {\n             if plus_n < self.end {\n                 // SAFETY: just checked precondition\n-                self.start = unsafe { Step::forward_unchecked(plus_n.clone(), 1) };\n+                self.start = unsafe { Step::forward_unchecked(plus_n, 1) };\n                 return Some(plus_n);\n             }\n         }\n \n-        self.start = self.end.clone();\n+        self.start = self.end;\n         None\n     }\n \n@@ -655,7 +656,7 @@ impl<T: TrustedStep> RangeIteratorImpl for ops::Range<T> {\n         // then steps_between either returns a bound to which we clamp or returns None which\n         // together with the initial inequality implies more than usize::MAX steps.\n         // Otherwise 0 is returned which always safe to use.\n-        self.start = unsafe { Step::forward_unchecked(self.start.clone(), taken) };\n+        self.start = unsafe { Step::forward_unchecked(self.start, taken) };\n \n         NonZeroUsize::new(n - taken).map_or(Ok(()), Err)\n     }\n@@ -664,24 +665,24 @@ impl<T: TrustedStep> RangeIteratorImpl for ops::Range<T> {\n     fn spec_next_back(&mut self) -> Option<T> {\n         if self.start < self.end {\n             // SAFETY: just checked precondition\n-            self.end = unsafe { Step::backward_unchecked(self.end.clone(), 1) };\n-            Some(self.end.clone())\n+            self.end = unsafe { Step::backward_unchecked(self.end, 1) };\n+            Some(self.end)\n         } else {\n             None\n         }\n     }\n \n     #[inline]\n     fn spec_nth_back(&mut self, n: usize) -> Option<T> {\n-        if let Some(minus_n) = Step::backward_checked(self.end.clone(), n) {\n+        if let Some(minus_n) = Step::backward_checked(self.end, n) {\n             if minus_n > self.start {\n                 // SAFETY: just checked precondition\n                 self.end = unsafe { Step::backward_unchecked(minus_n, 1) };\n-                return Some(self.end.clone());\n+                return Some(self.end);\n             }\n         }\n \n-        self.end = self.start.clone();\n+        self.end = self.start;\n         None\n     }\n \n@@ -696,7 +697,7 @@ impl<T: TrustedStep> RangeIteratorImpl for ops::Range<T> {\n         let taken = available.min(n);\n \n         // SAFETY: same as the spec_advance_by() implementation\n-        self.end = unsafe { Step::backward_unchecked(self.end.clone(), taken) };\n+        self.end = unsafe { Step::backward_unchecked(self.end, taken) };\n \n         NonZeroUsize::new(n - taken).map_or(Ok(()), Err)\n     }"}, {"sha": "c21a2aac1c9a697a4b0d0314bb3f916120d147d2", "filename": "library/core/src/iter/traits/marker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11fa1764ee4819aa674ca861c5e9a8fafd7a59e6/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11fa1764ee4819aa674ca861c5e9a8fafd7a59e6/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fmarker.rs?ref=11fa1764ee4819aa674ca861c5e9a8fafd7a59e6", "patch": "@@ -86,4 +86,4 @@ pub unsafe trait InPlaceIterable: Iterator {}\n /// for details. Consumers are free to rely on the invariants in unsafe code.\n #[unstable(feature = \"trusted_step\", issue = \"85731\")]\n #[rustc_specialization_trait]\n-pub unsafe trait TrustedStep: Step {}\n+pub unsafe trait TrustedStep: Step + Copy {}"}, {"sha": "693939e75f4f41028632982ea44fd2e04e40e019", "filename": "tests/mir-opt/pre-codegen/range_iter.forward_loop.PreCodegen.after.mir", "status": "modified", "additions": 78, "deletions": 30, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/11fa1764ee4819aa674ca861c5e9a8fafd7a59e6/tests%2Fmir-opt%2Fpre-codegen%2Frange_iter.forward_loop.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11fa1764ee4819aa674ca861c5e9a8fafd7a59e6/tests%2Fmir-opt%2Fpre-codegen%2Frange_iter.forward_loop.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Frange_iter.forward_loop.PreCodegen.after.mir?ref=11fa1764ee4819aa674ca861c5e9a8fafd7a59e6", "patch": "@@ -8,19 +8,32 @@ fn forward_loop(_1: u32, _2: u32, _3: impl Fn(u32)) -> () {\n     let mut _4: std::ops::Range<u32>;    // in scope 0 at $DIR/range_iter.rs:+1:14: +1:24\n     let mut _5: std::ops::Range<u32>;    // in scope 0 at $DIR/range_iter.rs:+1:14: +1:24\n     let mut _6: &mut std::ops::Range<u32>; // in scope 0 at $DIR/range_iter.rs:+1:14: +1:24\n-    let mut _7: std::option::Option<u32>; // in scope 0 at $DIR/range_iter.rs:+1:14: +1:24\n-    let mut _8: isize;                   // in scope 0 at $DIR/range_iter.rs:+1:5: +3:6\n-    let mut _10: &impl Fn(u32);          // in scope 0 at $DIR/range_iter.rs:+2:9: +2:10\n-    let mut _11: (u32,);                 // in scope 0 at $DIR/range_iter.rs:+2:9: +2:13\n-    let _12: ();                         // in scope 0 at $DIR/range_iter.rs:+1:14: +1:24\n+    let mut _10: std::option::Option<u32>; // in scope 0 at $DIR/range_iter.rs:+1:14: +1:24\n+    let mut _13: isize;                  // in scope 0 at $DIR/range_iter.rs:+1:5: +3:6\n+    let mut _15: &impl Fn(u32);          // in scope 0 at $DIR/range_iter.rs:+2:9: +2:10\n+    let mut _16: (u32,);                 // in scope 0 at $DIR/range_iter.rs:+2:9: +2:13\n+    let _17: ();                         // in scope 0 at $DIR/range_iter.rs:+1:14: +1:24\n     scope 1 {\n         debug iter => _5;                // in scope 1 at $DIR/range_iter.rs:+1:14: +1:24\n-        let _9: u32;                     // in scope 1 at $DIR/range_iter.rs:+1:9: +1:10\n+        let _14: u32;                    // in scope 1 at $DIR/range_iter.rs:+1:9: +1:10\n         scope 2 {\n-            debug x => _9;               // in scope 2 at $DIR/range_iter.rs:+1:9: +1:10\n+            debug x => _14;              // in scope 2 at $DIR/range_iter.rs:+1:9: +1:10\n         }\n         scope 4 (inlined iter::range::<impl Iterator for std::ops::Range<u32>>::next) { // at $DIR/range_iter.rs:21:14: 21:24\n             debug self => _6;            // in scope 4 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+            scope 5 (inlined <std::ops::Range<u32> as iter::range::RangeIteratorImpl>::spec_next) { // at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                debug self => _6;        // in scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                let mut _7: &u32;        // in scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                let mut _8: &u32;        // in scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                let mut _9: bool;        // in scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                let _11: u32;            // in scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                let mut _12: u32;        // in scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                scope 6 {\n+                    debug old => _11;    // in scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                    scope 7 {\n+                    }\n+                }\n+            }\n         }\n     }\n     scope 3 (inlined <std::ops::Range<u32> as IntoIterator>::into_iter) { // at $DIR/range_iter.rs:21:14: 21:24\n@@ -35,57 +48,92 @@ fn forward_loop(_1: u32, _2: u32, _3: impl Fn(u32)) -> () {\n     }\n \n     bb1: {\n-        StorageLive(_7);                 // scope 1 at $DIR/range_iter.rs:+1:14: +1:24\n+        StorageLive(_10);                // scope 1 at $DIR/range_iter.rs:+1:14: +1:24\n         _6 = &mut _5;                    // scope 1 at $DIR/range_iter.rs:+1:14: +1:24\n-        _7 = <std::ops::Range<u32> as iter::range::RangeIteratorImpl>::spec_next(_6) -> [return: bb2, unwind: bb8]; // scope 4 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageLive(_11);                // scope 4 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageLive(_9);                 // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageLive(_7);                 // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        _7 = &((*_6).0: u32);            // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageLive(_8);                 // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        _8 = &((*_6).1: u32);            // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        _9 = <u32 as PartialOrd>::lt(move _7, move _8) -> [return: bb2, unwind: bb12]; // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/iter/range.rs:LL:COL\n-                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<u32>) -> Option<<std::ops::Range<u32> as iter::range::RangeIteratorImpl>::Item> {<std::ops::Range<u32> as iter::range::RangeIteratorImpl>::spec_next}, val: Value(<ZST>) }\n+                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u32, &'b u32) -> bool {<u32 as PartialOrd>::lt}, val: Value(<ZST>) }\n     }\n \n     bb2: {\n-        _8 = discriminant(_7);           // scope 1 at $DIR/range_iter.rs:+1:14: +1:24\n-        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb7]; // scope 1 at $DIR/range_iter.rs:+1:14: +1:24\n+        StorageDead(_8);                 // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageDead(_7);                 // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        switchInt(move _9) -> [0: bb3, otherwise: bb4]; // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n     }\n \n     bb3: {\n-        StorageDead(_7);                 // scope 1 at $DIR/range_iter.rs:+3:5: +3:6\n-        StorageDead(_5);                 // scope 0 at $DIR/range_iter.rs:+3:5: +3:6\n-        drop(_3) -> bb4;                 // scope 0 at $DIR/range_iter.rs:+4:1: +4:2\n+        _10 = Option::<u32>::None;       // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        goto -> bb6;                     // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n     }\n \n     bb4: {\n-        return;                          // scope 0 at $DIR/range_iter.rs:+4:2: +4:2\n+        _11 = ((*_6).0: u32);            // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageLive(_12);                // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        _12 = <u32 as Step>::forward_unchecked(_11, const 1_usize) -> [return: bb5, unwind: bb12]; // scope 7 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                                         // mir::Constant\n+                                         // + span: $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                                         // + literal: Const { ty: unsafe fn(u32, usize) -> u32 {<u32 as Step>::forward_unchecked}, val: Value(<ZST>) }\n     }\n \n     bb5: {\n-        _9 = ((_7 as Some).0: u32);      // scope 1 at $DIR/range_iter.rs:+1:9: +1:10\n-        StorageLive(_10);                // scope 2 at $DIR/range_iter.rs:+2:9: +2:10\n-        _10 = &_3;                       // scope 2 at $DIR/range_iter.rs:+2:9: +2:10\n-        StorageLive(_11);                // scope 2 at $DIR/range_iter.rs:+2:9: +2:13\n-        _11 = (_9,);                     // scope 2 at $DIR/range_iter.rs:+2:9: +2:13\n-        _12 = <impl Fn(u32) as Fn<(u32,)>>::call(move _10, move _11) -> [return: bb6, unwind: bb8]; // scope 2 at $DIR/range_iter.rs:+2:9: +2:13\n+        ((*_6).0: u32) = move _12;       // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageDead(_12);                // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        _10 = Option::<u32>::Some(_11);  // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        goto -> bb6;                     // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+    }\n+\n+    bb6: {\n+        StorageDead(_9);                 // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageDead(_11);                // scope 4 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        _13 = discriminant(_10);         // scope 1 at $DIR/range_iter.rs:+1:14: +1:24\n+        switchInt(move _13) -> [0: bb7, 1: bb9, otherwise: bb11]; // scope 1 at $DIR/range_iter.rs:+1:14: +1:24\n+    }\n+\n+    bb7: {\n+        StorageDead(_10);                // scope 1 at $DIR/range_iter.rs:+3:5: +3:6\n+        StorageDead(_5);                 // scope 0 at $DIR/range_iter.rs:+3:5: +3:6\n+        drop(_3) -> bb8;                 // scope 0 at $DIR/range_iter.rs:+4:1: +4:2\n+    }\n+\n+    bb8: {\n+        return;                          // scope 0 at $DIR/range_iter.rs:+4:2: +4:2\n+    }\n+\n+    bb9: {\n+        _14 = ((_10 as Some).0: u32);    // scope 1 at $DIR/range_iter.rs:+1:9: +1:10\n+        StorageLive(_15);                // scope 2 at $DIR/range_iter.rs:+2:9: +2:10\n+        _15 = &_3;                       // scope 2 at $DIR/range_iter.rs:+2:9: +2:10\n+        StorageLive(_16);                // scope 2 at $DIR/range_iter.rs:+2:9: +2:13\n+        _16 = (_14,);                    // scope 2 at $DIR/range_iter.rs:+2:9: +2:13\n+        _17 = <impl Fn(u32) as Fn<(u32,)>>::call(move _15, move _16) -> [return: bb10, unwind: bb12]; // scope 2 at $DIR/range_iter.rs:+2:9: +2:13\n                                          // mir::Constant\n                                          // + span: $DIR/range_iter.rs:22:9: 22:10\n                                          // + literal: Const { ty: for<'a> extern \"rust-call\" fn(&'a impl Fn(u32), (u32,)) -> <impl Fn(u32) as FnOnce<(u32,)>>::Output {<impl Fn(u32) as Fn<(u32,)>>::call}, val: Value(<ZST>) }\n     }\n \n-    bb6: {\n-        StorageDead(_11);                // scope 2 at $DIR/range_iter.rs:+2:12: +2:13\n-        StorageDead(_10);                // scope 2 at $DIR/range_iter.rs:+2:12: +2:13\n-        StorageDead(_7);                 // scope 1 at $DIR/range_iter.rs:+3:5: +3:6\n+    bb10: {\n+        StorageDead(_16);                // scope 2 at $DIR/range_iter.rs:+2:12: +2:13\n+        StorageDead(_15);                // scope 2 at $DIR/range_iter.rs:+2:12: +2:13\n+        StorageDead(_10);                // scope 1 at $DIR/range_iter.rs:+3:5: +3:6\n         goto -> bb1;                     // scope 1 at $DIR/range_iter.rs:+1:5: +3:6\n     }\n \n-    bb7: {\n+    bb11: {\n         unreachable;                     // scope 1 at $DIR/range_iter.rs:+1:14: +1:24\n     }\n \n-    bb8 (cleanup): {\n-        drop(_3) -> [return: bb9, unwind terminate]; // scope 0 at $DIR/range_iter.rs:+4:1: +4:2\n+    bb12 (cleanup): {\n+        drop(_3) -> [return: bb13, unwind terminate]; // scope 0 at $DIR/range_iter.rs:+4:1: +4:2\n     }\n \n-    bb9 (cleanup): {\n+    bb13 (cleanup): {\n         resume;                          // scope 0 at $DIR/range_iter.rs:+0:1: +4:2\n     }\n }"}, {"sha": "668ec31c6c134954be98d0790414031a141f1336", "filename": "tests/mir-opt/pre-codegen/range_iter.range_iter_next.PreCodegen.after.mir", "status": "modified", "additions": 50, "deletions": 2, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/11fa1764ee4819aa674ca861c5e9a8fafd7a59e6/tests%2Fmir-opt%2Fpre-codegen%2Frange_iter.range_iter_next.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11fa1764ee4819aa674ca861c5e9a8fafd7a59e6/tests%2Fmir-opt%2Fpre-codegen%2Frange_iter.range_iter_next.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Frange_iter.range_iter_next.PreCodegen.after.mir?ref=11fa1764ee4819aa674ca861c5e9a8fafd7a59e6", "patch": "@@ -5,16 +5,64 @@ fn range_iter_next(_1: &mut std::ops::Range<u32>) -> Option<u32> {\n     let mut _0: std::option::Option<u32>; // return place in scope 0 at $DIR/range_iter.rs:+0:48: +0:59\n     scope 1 (inlined iter::range::<impl Iterator for std::ops::Range<u32>>::next) { // at $DIR/range_iter.rs:11:8: 11:14\n         debug self => _1;                // in scope 1 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        scope 2 (inlined <std::ops::Range<u32> as iter::range::RangeIteratorImpl>::spec_next) { // at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+            debug self => _1;            // in scope 2 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+            let mut _2: &u32;            // in scope 2 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+            let mut _3: &u32;            // in scope 2 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+            let mut _4: bool;            // in scope 2 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+            let _5: u32;                 // in scope 2 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+            let mut _6: u32;             // in scope 2 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+            scope 3 {\n+                debug old => _5;         // in scope 3 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                scope 4 {\n+                }\n+            }\n+        }\n     }\n \n     bb0: {\n-        _0 = <std::ops::Range<u32> as iter::range::RangeIteratorImpl>::spec_next(_1) -> bb1; // scope 1 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageLive(_5);                 // scope 1 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageLive(_4);                 // scope 2 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageLive(_2);                 // scope 2 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        _2 = &((*_1).0: u32);            // scope 2 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageLive(_3);                 // scope 2 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        _3 = &((*_1).1: u32);            // scope 2 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        _4 = <u32 as PartialOrd>::lt(move _2, move _3) -> bb1; // scope 2 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/iter/range.rs:LL:COL\n-                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<u32>) -> Option<<std::ops::Range<u32> as iter::range::RangeIteratorImpl>::Item> {<std::ops::Range<u32> as iter::range::RangeIteratorImpl>::spec_next}, val: Value(<ZST>) }\n+                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u32, &'b u32) -> bool {<u32 as PartialOrd>::lt}, val: Value(<ZST>) }\n     }\n \n     bb1: {\n+        StorageDead(_3);                 // scope 2 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageDead(_2);                 // scope 2 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        switchInt(move _4) -> [0: bb2, otherwise: bb3]; // scope 2 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+    }\n+\n+    bb2: {\n+        _0 = Option::<u32>::None;        // scope 2 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        goto -> bb5;                     // scope 2 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+    }\n+\n+    bb3: {\n+        _5 = ((*_1).0: u32);             // scope 2 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageLive(_6);                 // scope 3 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        _6 = <u32 as Step>::forward_unchecked(_5, const 1_usize) -> bb4; // scope 4 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                                         // mir::Constant\n+                                         // + span: $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                                         // + literal: Const { ty: unsafe fn(u32, usize) -> u32 {<u32 as Step>::forward_unchecked}, val: Value(<ZST>) }\n+    }\n+\n+    bb4: {\n+        ((*_1).0: u32) = move _6;        // scope 3 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageDead(_6);                 // scope 3 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        _0 = Option::<u32>::Some(_5);    // scope 3 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        goto -> bb5;                     // scope 2 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+    }\n+\n+    bb5: {\n+        StorageDead(_4);                 // scope 2 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageDead(_5);                 // scope 1 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n         return;                          // scope 0 at $DIR/range_iter.rs:+2:2: +2:2\n     }\n }"}]}