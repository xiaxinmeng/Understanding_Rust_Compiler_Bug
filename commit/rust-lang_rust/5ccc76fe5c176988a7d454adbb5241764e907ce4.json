{"sha": "5ccc76fe5c176988a7d454adbb5241764e907ce4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjY2M3NmZlNWMxNzY5ODhhN2Q0NTRhZGJiNTI0MTc2NGU5MDdjZTQ=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-11-13T05:03:16Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-11-13T11:20:44Z"}, "message": "Rollup merge of #55870 - waywardmonkeys:typo-fixes, r=wesleywiser\n\nFix typos.", "tree": {"sha": "e3c6e12f2da5fabc9afa3aaf40bce0aff2733d2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3c6e12f2da5fabc9afa3aaf40bce0aff2733d2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ccc76fe5c176988a7d454adbb5241764e907ce4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlvqs4wACgkQ/vbIBR0O\nATzUgQ//csrt/PZtxX15ZxMgtQX+bPYCdS9SAFEmY3Gu+1hoGsiTbRq0Bb4HGdEW\nJk9qz+sOJhZrNIAFw5hcBUAy8vgoT2vL3km2gP/0BDNTpcgAZN3A+hccCA8CHNe/\n8C/KNQ3GY5NBmp46FqNDyuQb3RwU6Y1Lw8OJ81vpyDQc9aiHX39l+MWPzxpvEKXt\ngGSrHjPFK05M7ifhsSFVOdBycZiyguxpWroYnJseNZhBBfZVshhKt5aSO8zpru1p\nbH8DxqjgrPDJEbBhOF3jjckPVj/CO0i9Nh4GfUHUIeXXpcjgRAgIe4nJEtMGP0ag\nH3C49Bqhw9h3FroLFzTuKQDhJl+/Vmvl8UT0CQzqgsNXMLvQbXXOyw6Yw3AyOl+R\nUMX7liVGUQTwb7y8D1swV8DIyjzjJfslkLkLhiNyV1IynjuvnQ8ShIHVqUBM8uJ1\ntG4l677XlQ6AAYkxNyjCct0XXncLLymoG5ds3R3xYI330SlIoknAqAoYoFxE8o+4\n6KLedhzA/5pEihle4t8cBeQXkWnQUCUlz8uoXGyNkVB0OMurylId2xIt8mbGUr0r\nXNW4pOTkl4TcwZY7CU424sdaGYSi8YfK+Itvbg8wEoKV/c1tW9je9GBXNcTb9nrO\nrd24l2yt0RFhinnrfOHOxEETTzxGdKuebItKvBwNrf5tLh6gKts=\n=/4yc\n-----END PGP SIGNATURE-----", "payload": "tree e3c6e12f2da5fabc9afa3aaf40bce0aff2733d2c\nparent 910289c9da9f8daa8f89bac5c06dc06d3bcad201\nparent a62af858e003e4077f5f4554c3235a4c82636b7e\nauthor kennytm <kennytm@gmail.com> 1542085396 +0800\ncommitter kennytm <kennytm@gmail.com> 1542108044 +0800\n\nRollup merge of #55870 - waywardmonkeys:typo-fixes, r=wesleywiser\n\nFix typos.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ccc76fe5c176988a7d454adbb5241764e907ce4", "html_url": "https://github.com/rust-lang/rust/commit/5ccc76fe5c176988a7d454adbb5241764e907ce4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ccc76fe5c176988a7d454adbb5241764e907ce4/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "910289c9da9f8daa8f89bac5c06dc06d3bcad201", "url": "https://api.github.com/repos/rust-lang/rust/commits/910289c9da9f8daa8f89bac5c06dc06d3bcad201", "html_url": "https://github.com/rust-lang/rust/commit/910289c9da9f8daa8f89bac5c06dc06d3bcad201"}, {"sha": "a62af858e003e4077f5f4554c3235a4c82636b7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a62af858e003e4077f5f4554c3235a4c82636b7e", "html_url": "https://github.com/rust-lang/rust/commit/a62af858e003e4077f5f4554c3235a4c82636b7e"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "c8689f7814086c927f87aaff77454cca2a6ee420", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ccc76fe5c176988a7d454adbb5241764e907ce4/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ccc76fe5c176988a7d454adbb5241764e907ce4/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=5ccc76fe5c176988a7d454adbb5241764e907ce4", "patch": "@@ -203,7 +203,7 @@ impl Step for StdLink {\n \n     /// Link all libstd rlibs/dylibs into the sysroot location.\n     ///\n-    /// Links those artifacts generated by `compiler` to a the `stage` compiler's\n+    /// Links those artifacts generated by `compiler` to the `stage` compiler's\n     /// sysroot for the specified `host` and `target`.\n     ///\n     /// Note that this assumes that `compiler` has already generated the libstd"}, {"sha": "b0220c84ef2fa78216a1e20a967c993003789bda", "filename": "src/etc/lldb_batchmode.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ccc76fe5c176988a7d454adbb5241764e907ce4/src%2Fetc%2Flldb_batchmode.py", "raw_url": "https://github.com/rust-lang/rust/raw/5ccc76fe5c176988a7d454adbb5241764e907ce4/src%2Fetc%2Flldb_batchmode.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Flldb_batchmode.py?ref=5ccc76fe5c176988a7d454adbb5241764e907ce4", "patch": "@@ -12,7 +12,7 @@\n # containing LLDB commands (one command per line), this script will execute the commands one after\n # the other.\n # LLDB also has the -s and -S commandline options which also execute a list of commands from a text\n-# file. However, this command are execute `immediately`: a the command of a `run` or `continue`\n+# file. However, this command are execute `immediately`: the command of a `run` or `continue`\n # command will be executed immediately after the `run` or `continue`, without waiting for the next\n # breakpoint to be hit. This a command sequence like the following will not yield reliable results:\n #"}, {"sha": "a316093825ad75db5082612a33049346c27bcdd8", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ccc76fe5c176988a7d454adbb5241764e907ce4/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ccc76fe5c176988a7d454adbb5241764e907ce4/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=5ccc76fe5c176988a7d454adbb5241764e907ce4", "patch": "@@ -1896,7 +1896,7 @@ mod traits {\n         #[inline]\n         fn index_mut(self, slice: &mut str) -> &mut Self::Output {\n             // is_char_boundary checks that the index is in [0, .len()]\n-            // canot reuse `get` as above, because of NLL trouble\n+            // cannot reuse `get` as above, because of NLL trouble\n             if self.start <= self.end &&\n                slice.is_char_boundary(self.start) &&\n                slice.is_char_boundary(self.end) {"}, {"sha": "0114f9e9321e1878e54b0f96a7195665d4eeab52", "filename": "src/librustc/infer/outlives/obligations.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ccc76fe5c176988a7d454adbb5241764e907ce4/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ccc76fe5c176988a7d454adbb5241764e907ce4/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs?ref=5ccc76fe5c176988a7d454adbb5241764e907ce4", "patch": "@@ -132,7 +132,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n     ///\n     /// See the `region_obligations` field of `InferCtxt` for some\n     /// comments about how this function fits into the overall expected\n-    /// flow of the the inferencer. The key point is that it is\n+    /// flow of the inferencer. The key point is that it is\n     /// invoked after all type-inference variables have been bound --\n     /// towards the end of regionck. This also ensures that the\n     /// region-bound-pairs are available (see comments above regarding"}, {"sha": "73800074cc7e88a18c5992d9976d99eacaaaf04d", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ccc76fe5c176988a7d454adbb5241764e907ce4/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ccc76fe5c176988a7d454adbb5241764e907ce4/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=5ccc76fe5c176988a7d454adbb5241764e907ce4", "patch": "@@ -2611,7 +2611,7 @@ pub fn fmt_const_val(f: &mut impl Write, const_val: &ty::Const<'_>) -> fmt::Resu\n             _ => {}\n         }\n     }\n-    // print function definitons\n+    // print function definitions\n     if let FnDef(did, _) = ty.sty {\n         return write!(f, \"{}\", item_path_str(did));\n     }"}, {"sha": "f3a0b7de903744eed856192dda2a88f301c05295", "filename": "src/librustc/mir/traversal.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ccc76fe5c176988a7d454adbb5241764e907ce4/src%2Flibrustc%2Fmir%2Ftraversal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ccc76fe5c176988a7d454adbb5241764e907ce4/src%2Flibrustc%2Fmir%2Ftraversal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftraversal.rs?ref=5ccc76fe5c176988a7d454adbb5241764e907ce4", "patch": "@@ -142,7 +142,7 @@ impl<'a, 'tcx> Postorder<'a, 'tcx> {\n         //\n         // It does the actual traversal of the graph, while the `next` method on the iterator\n         // just pops off of the stack. `visit_stack` is a stack containing pairs of nodes and\n-        // iterators over the sucessors of those nodes. Each iteration attempts to get the next\n+        // iterators over the successors of those nodes. Each iteration attempts to get the next\n         // node from the top of the stack, then pushes that node and an iterator over the\n         // successors to the top of the stack. This loop only grows `visit_stack`, stopping when\n         // we reach a child that has no children that we haven't already visited.\n@@ -163,7 +163,7 @@ impl<'a, 'tcx> Postorder<'a, 'tcx> {\n         // The state of the stack starts out with just the root node (`A` in this case);\n         //     [(A, [B, C])]\n         //\n-        // When the first call to `traverse_sucessor` happens, the following happens:\n+        // When the first call to `traverse_successor` happens, the following happens:\n         //\n         //     [(B, [D]),  // `B` taken from the successors of `A`, pushed to the\n         //                 // top of the stack along with the successors of `B`"}, {"sha": "efee39a1d63f95070fd2d1b8f256a512cd379688", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ccc76fe5c176988a7d454adbb5241764e907ce4/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ccc76fe5c176988a7d454adbb5241764e907ce4/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=5ccc76fe5c176988a7d454adbb5241764e907ce4", "patch": "@@ -100,7 +100,7 @@ pub(super) struct JobOwner<'a, 'tcx: 'a, Q: QueryDescription<'tcx> + 'a> {\n }\n \n impl<'a, 'tcx, Q: QueryDescription<'tcx>> JobOwner<'a, 'tcx, Q> {\n-    /// Either gets a JobOwner corresponding the the query, allowing us to\n+    /// Either gets a JobOwner corresponding the query, allowing us to\n     /// start executing the query, or it returns with the result of the query.\n     /// If the query is executing elsewhere, this will wait for it.\n     /// If the query panicked, this will silently panic.\n@@ -314,7 +314,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     /// Try to read a node index for the node dep_node.\n     /// A node will have an index, when it's already been marked green, or when we can mark it\n     /// green. This function will mark the current task as a reader of the specified node, when\n-    /// the a node index can be found for that node.\n+    /// a node index can be found for that node.\n     pub(super) fn try_mark_green_and_read(self, dep_node: &DepNode) -> Option<DepNodeIndex> {\n         match self.dep_graph.node_color(dep_node) {\n             Some(DepNodeColor::Green(dep_node_index)) => {"}, {"sha": "adcb9857ee3c259f6e2f44e61970a314a204ee55", "filename": "src/librustc_apfloat/ieee.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ccc76fe5c176988a7d454adbb5241764e907ce4/src%2Flibrustc_apfloat%2Fieee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ccc76fe5c176988a7d454adbb5241764e907ce4/src%2Flibrustc_apfloat%2Fieee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_apfloat%2Fieee.rs?ref=5ccc76fe5c176988a7d454adbb5241764e907ce4", "patch": "@@ -895,7 +895,7 @@ impl<S: Semantics> Float for IeeeFloat<S> {\n             }\n \n             // The intermediate result of the multiplication has \"2 * S::PRECISION\"\n-            // signicant bit; adjust the addend to be consistent with mul result.\n+            // significant bit; adjust the addend to be consistent with mul result.\n             let mut ext_addend_sig = [addend.sig[0], 0];\n \n             // Extend the addend significand to ext_precision - 1. This guarantees\n@@ -920,7 +920,7 @@ impl<S: Semantics> Float for IeeeFloat<S> {\n \n         // Convert the result having \"2 * S::PRECISION\" significant-bits back to the one\n         // having \"S::PRECISION\" significant-bits. First, move the radix point from\n-        // poision \"2*S::PRECISION - 1\" to \"S::PRECISION - 1\". The exponent need to be\n+        // position \"2*S::PRECISION - 1\" to \"S::PRECISION - 1\". The exponent need to be\n         // adjusted by \"2*S::PRECISION - 1\" - \"S::PRECISION - 1\" = \"S::PRECISION\".\n         self.exp -= S::PRECISION as ExpInt + 1;\n "}, {"sha": "267d7e0d54b637c267054d7336401dcf0d61a3f3", "filename": "src/librustc_codegen_llvm/llvm_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ccc76fe5c176988a7d454adbb5241764e907ce4/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ccc76fe5c176988a7d454adbb5241764e907ce4/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs?ref=5ccc76fe5c176988a7d454adbb5241764e907ce4", "patch": "@@ -184,7 +184,7 @@ const WASM_WHITELIST: &[(&str, Option<&str>)] = &[\n ];\n \n /// When rustdoc is running, provide a list of all known features so that all their respective\n-/// primtives may be documented.\n+/// primitives may be documented.\n ///\n /// IMPORTANT: If you're adding another whitelist to the above lists, make sure to add it to this\n /// iterator!"}, {"sha": "e9ac92da684352a21b89c83594f73e356351129a", "filename": "src/librustc_codegen_utils/linker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ccc76fe5c176988a7d454adbb5241764e907ce4/src%2Flibrustc_codegen_utils%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ccc76fe5c176988a7d454adbb5241764e907ce4/src%2Flibrustc_codegen_utils%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Flinker.rs?ref=5ccc76fe5c176988a7d454adbb5241764e907ce4", "patch": "@@ -613,7 +613,7 @@ impl<'a> Linker for MsvcLinker<'a> {\n         // from the CodeView line tables in the object files.\n         self.cmd.arg(\"/DEBUG\");\n \n-        // This will cause the Microsoft linker to embed .natvis info into the the PDB file\n+        // This will cause the Microsoft linker to embed .natvis info into the PDB file\n         let sysroot = self.sess.sysroot();\n         let natvis_dir_path = sysroot.join(\"lib\\\\rustlib\\\\etc\");\n         if let Ok(natvis_dir) = fs::read_dir(&natvis_dir_path) {"}, {"sha": "2a8a0baf571b04475d654067ba82b23ae584c2e0", "filename": "src/librustc_incremental/persist/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ccc76fe5c176988a7d454adbb5241764e907ce4/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ccc76fe5c176988a7d454adbb5241764e907ce4/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs?ref=5ccc76fe5c176988a7d454adbb5241764e907ce4", "patch": "@@ -490,7 +490,7 @@ fn create_dir(sess: &Session, path: &Path, dir_tag: &str) -> Result<(),()> {\n     }\n }\n \n-/// Allocate a the lock-file and lock it.\n+/// Allocate the lock-file and lock it.\n fn lock_directory(sess: &Session,\n                   session_dir: &Path)\n                   -> Result<(flock::Lock, PathBuf), ()> {"}, {"sha": "b3e159dd84457c14b2a35ca5d7821a84024195eb", "filename": "src/librustc_mir/borrow_check/location.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ccc76fe5c176988a7d454adbb5241764e907ce4/src%2Flibrustc_mir%2Fborrow_check%2Flocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ccc76fe5c176988a7d454adbb5241764e907ce4/src%2Flibrustc_mir%2Fborrow_check%2Flocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Flocation.rs?ref=5ccc76fe5c176988a7d454adbb5241764e907ce4", "patch": "@@ -11,7 +11,7 @@\n use rustc::mir::{BasicBlock, Location, Mir};\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n \n-/// Maps between a MIR Location, which identifies the a particular\n+/// Maps between a MIR Location, which identifies a particular\n /// statement within a basic block, to a \"rich location\", which\n /// identifies at a finer granularity. In particular, we distinguish\n /// the *start* of a statement and the *mid-point*. The mid-point is"}, {"sha": "2b7ef38d3edf940bfd4298619a703229eeb99dcf", "filename": "src/librustc_mir/borrow_check/nll/region_infer/values.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ccc76fe5c176988a7d454adbb5241764e907ce4/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ccc76fe5c176988a7d454adbb5241764e907ce4/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs?ref=5ccc76fe5c176988a7d454adbb5241764e907ce4", "patch": "@@ -112,7 +112,7 @@ impl RegionValueElements {\n         } = self.to_location(index);\n         if statement_index == 0 {\n             // If this is a basic block head, then the predecessors are\n-            // the the terminators of other basic blocks\n+            // the terminators of other basic blocks\n             stack.extend(\n                 mir.predecessors_for(block)\n                     .iter()"}, {"sha": "091af449095aab80ef0876465dba968cdc1ab423", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ccc76fe5c176988a7d454adbb5241764e907ce4/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ccc76fe5c176988a7d454adbb5241764e907ce4/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=5ccc76fe5c176988a7d454adbb5241764e907ce4", "patch": "@@ -548,7 +548,7 @@ pub struct FnCtxt<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     /// current expression. As each subpart is processed, they may set\n     /// the flag to `Always` etc.  Finally, at the end, we take the\n     /// result and \"union\" it with the original value, so that when we\n-    /// return the flag indicates if any subpart of the the parent\n+    /// return the flag indicates if any subpart of the parent\n     /// expression (up to and including this part) has diverged.  So,\n     /// if you read it after evaluating a subexpression `X`, the value\n     /// you get indicates whether any subexpression that was"}, {"sha": "f31d80acbfa4ef217b30586a553021142ce5b50d", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ccc76fe5c176988a7d454adbb5241764e907ce4/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ccc76fe5c176988a7d454adbb5241764e907ce4/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=5ccc76fe5c176988a7d454adbb5241764e907ce4", "patch": "@@ -122,7 +122,7 @@ impl<'tt> TokenTreeOrTokenTreeSlice<'tt> {\n         }\n     }\n \n-    /// The the `index`-th token tree of `self`.\n+    /// The `index`-th token tree of `self`.\n     fn get_tt(&self, index: usize) -> TokenTree {\n         match *self {\n             TtSeq(ref v) => v[index].clone(),"}, {"sha": "218486748315d6bf88da9b88757233d9a0b1d726", "filename": "src/libsyntax/ext/tt/quoted.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ccc76fe5c176988a7d454adbb5241764e907ce4/src%2Flibsyntax%2Fext%2Ftt%2Fquoted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ccc76fe5c176988a7d454adbb5241764e907ce4/src%2Flibsyntax%2Fext%2Ftt%2Fquoted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fquoted.rs?ref=5ccc76fe5c176988a7d454adbb5241764e907ce4", "patch": "@@ -496,7 +496,7 @@ where\n                         return (None, KleeneOp::ZeroOrMore);\n                     }\n \n-                    // #2 is a Kleene op, which is the the only valid option\n+                    // #2 is a Kleene op, which is the only valid option\n                     Ok(Ok((op, _))) => {\n                         // Warn that `?` as a separator will be deprecated\n                         sess.buffer_lint("}, {"sha": "e519d48ac1d4d98fee30da05119d8534fce44902", "filename": "src/test/run-pass-fulldeps/dropck_tarena_sound_drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ccc76fe5c176988a7d454adbb5241764e907ce4/src%2Ftest%2Frun-pass-fulldeps%2Fdropck_tarena_sound_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ccc76fe5c176988a7d454adbb5241764e907ce4/src%2Ftest%2Frun-pass-fulldeps%2Fdropck_tarena_sound_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fdropck_tarena_sound_drop.rs?ref=5ccc76fe5c176988a7d454adbb5241764e907ce4", "patch": "@@ -31,7 +31,7 @@ struct CheckId<T:HasId> { v: T }\n // In the code below, the impl of HasId for `&'a usize` does not\n // actually access the borrowed data, but the point is that the\n // interface to CheckId does not (and cannot) know that, and therefore\n-// when encountering the a value V of type CheckId<S>, we must\n+// when encountering a value V of type CheckId<S>, we must\n // conservatively force the type S to strictly outlive V.\n impl<T:HasId> Drop for CheckId<T> {\n     fn drop(&mut self) {"}, {"sha": "c23b43dfff706e5d91fd1056a08600ce90c1c665", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-proc_macro_derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ccc76fe5c176988a7d454adbb5241764e907ce4/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-proc_macro_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ccc76fe5c176988a7d454adbb5241764e907ce4/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-proc_macro_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-proc_macro_derive.rs?ref=5ccc76fe5c176988a7d454adbb5241764e907ce4", "patch": "@@ -13,7 +13,7 @@\n // not descend further into the mod for other occurrences of the same\n // error.\n //\n-// This file sits on its own because the the \"weird\" occurrences here\n+// This file sits on its own because the \"weird\" occurrences here\n // signal errors, making it incompatible with the \"warnings only\"\n // nature of issue-43106-gating-of-builtin-attrs.rs\n "}, {"sha": "ed2114b653015806cbf948b7209473f9d466a2bb", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ccc76fe5c176988a7d454adbb5241764e907ce4/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ccc76fe5c176988a7d454adbb5241764e907ce4/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=5ccc76fe5c176988a7d454adbb5241764e907ce4", "patch": "@@ -490,7 +490,7 @@ impl TestProps {\n             }\n \n             if !self.compile_pass {\n-                // run-pass implies must_compile_sucessfully\n+                // run-pass implies must_compile_successfully\n                 self.compile_pass = config.parse_compile_pass(ln) || self.run_pass;\n             }\n "}]}