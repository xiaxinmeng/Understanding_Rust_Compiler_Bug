{"sha": "fdef3848a01c4567abd326043b797f6bdc3f3e76", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkZWYzODQ4YTAxYzQ1NjdhYmQzMjYwNDNiNzk3ZjZiZGMzZjNlNzY=", "commit": {"author": {"name": "Vitaly _Vi Shukela", "email": "vi0oss@gmail.com", "date": "2018-11-29T21:06:10Z"}, "committer": {"name": "Vitaly _Vi Shukela", "email": "vi0oss@gmail.com", "date": "2018-11-29T21:56:41Z"}, "message": "Add libstd and libcore Cargo features \"panic_immediate_abort\"\n\nIt stop asserts and panics from libstd to automatically\ninclude string output and formatting code.\n\nUse case: developing static executables smaller than 50 kilobytes,\nwhere usual formatting code is excessive while keeping debuggability\nin debug mode.\n\nMay resolve #54981.", "tree": {"sha": "2e00c6d19977a4ba5f3ce5569fb229a9920dc387", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e00c6d19977a4ba5f3ce5569fb229a9920dc387"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fdef3848a01c4567abd326043b797f6bdc3f3e76", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABEIAB0WIQQzEHnM5f9ubG8rMBnAlyIdbgPfaAUCXABgmQAKCRDAlyIdbgPf\naEobAP9g93dQ2hQUw+zpGskW+ZX46pSNJZuqjh6/CDXtUzsBQQD+Poh1z7Bf4dv4\nDKxMebdSYkIISi5ckuL8X4btiI+lA2E=\n=8dqY\n-----END PGP SIGNATURE-----", "payload": "tree 2e00c6d19977a4ba5f3ce5569fb229a9920dc387\nparent f1e2fa8f0469aac1ea69dd5b6164e1d198d57934\nauthor Vitaly _Vi Shukela <vi0oss@gmail.com> 1543525570 +0300\ncommitter Vitaly _Vi Shukela <vi0oss@gmail.com> 1543528601 +0300\n\nAdd libstd and libcore Cargo features \"panic_immediate_abort\"\n\nIt stop asserts and panics from libstd to automatically\ninclude string output and formatting code.\n\nUse case: developing static executables smaller than 50 kilobytes,\nwhere usual formatting code is excessive while keeping debuggability\nin debug mode.\n\nMay resolve #54981.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fdef3848a01c4567abd326043b797f6bdc3f3e76", "html_url": "https://github.com/rust-lang/rust/commit/fdef3848a01c4567abd326043b797f6bdc3f3e76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fdef3848a01c4567abd326043b797f6bdc3f3e76/comments", "author": {"login": "vi", "id": 173219, "node_id": "MDQ6VXNlcjE3MzIxOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/173219?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vi", "html_url": "https://github.com/vi", "followers_url": "https://api.github.com/users/vi/followers", "following_url": "https://api.github.com/users/vi/following{/other_user}", "gists_url": "https://api.github.com/users/vi/gists{/gist_id}", "starred_url": "https://api.github.com/users/vi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vi/subscriptions", "organizations_url": "https://api.github.com/users/vi/orgs", "repos_url": "https://api.github.com/users/vi/repos", "events_url": "https://api.github.com/users/vi/events{/privacy}", "received_events_url": "https://api.github.com/users/vi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vi", "id": 173219, "node_id": "MDQ6VXNlcjE3MzIxOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/173219?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vi", "html_url": "https://github.com/vi", "followers_url": "https://api.github.com/users/vi/followers", "following_url": "https://api.github.com/users/vi/following{/other_user}", "gists_url": "https://api.github.com/users/vi/gists{/gist_id}", "starred_url": "https://api.github.com/users/vi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vi/subscriptions", "organizations_url": "https://api.github.com/users/vi/orgs", "repos_url": "https://api.github.com/users/vi/repos", "events_url": "https://api.github.com/users/vi/events{/privacy}", "received_events_url": "https://api.github.com/users/vi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1e2fa8f0469aac1ea69dd5b6164e1d198d57934", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1e2fa8f0469aac1ea69dd5b6164e1d198d57934", "html_url": "https://github.com/rust-lang/rust/commit/f1e2fa8f0469aac1ea69dd5b6164e1d198d57934"}], "stats": {"total": 48, "additions": 43, "deletions": 5}, "files": [{"sha": "7fd61f07d5e7f64fad114813541003baeee4b859", "filename": "src/libcore/Cargo.toml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fdef3848a01c4567abd326043b797f6bdc3f3e76/src%2Flibcore%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/fdef3848a01c4567abd326043b797f6bdc3f3e76/src%2Flibcore%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2FCargo.toml?ref=fdef3848a01c4567abd326043b797f6bdc3f3e76", "patch": "@@ -21,3 +21,7 @@ path = \"../libcore/benches/lib.rs\"\n \n [dev-dependencies]\n rand = \"0.5\"\n+\n+[features]\n+# Make panics and failed asserts immediately abort without formatting any message\n+panic_immediate_abort = []"}, {"sha": "67c0b6ada9055d328042f01e19a234b523887961", "filename": "src/libcore/panicking.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fdef3848a01c4567abd326043b797f6bdc3f3e76/src%2Flibcore%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdef3848a01c4567abd326043b797f6bdc3f3e76/src%2Flibcore%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanicking.rs?ref=fdef3848a01c4567abd326043b797f6bdc3f3e76", "patch": "@@ -39,9 +39,15 @@\n use fmt;\n use panic::{Location, PanicInfo};\n \n-#[cold] #[inline(never)] // this is the slow path, always\n+#[cold]\n+// inline(never) is required even in panic_immediate_abort mode, lest linker error\n+#[inline(never)]\n #[lang = \"panic\"]\n pub fn panic(expr_file_line_col: &(&'static str, &'static str, u32, u32)) -> ! {\n+    if cfg!(feature = \"panic_immediate_abort\") {\n+        unsafe { super::intrinsics::abort() }\n+    };\n+\n     // Use Arguments::new_v1 instead of format_args!(\"{}\", expr) to potentially\n     // reduce size overhead. The format_args! macro uses str's Display trait to\n     // write expr, which calls Formatter::pad, which must accommodate string\n@@ -52,16 +58,28 @@ pub fn panic(expr_file_line_col: &(&'static str, &'static str, u32, u32)) -> ! {\n     panic_fmt(fmt::Arguments::new_v1(&[expr], &[]), &(file, line, col))\n }\n \n-#[cold] #[inline(never)]\n+#[cold]\n+// inline(never) is required even in panic_immediate_abort mode, lest linker error\n+#[inline(never)]\n #[lang = \"panic_bounds_check\"]\n fn panic_bounds_check(file_line_col: &(&'static str, u32, u32),\n                      index: usize, len: usize) -> ! {\n+    if cfg!(feature = \"panic_immediate_abort\") {\n+        unsafe { super::intrinsics::abort() }\n+    };\n+\n     panic_fmt(format_args!(\"index out of bounds: the len is {} but the index is {}\",\n                            len, index), file_line_col)\n }\n \n-#[cold] #[inline(never)]\n+#[cold]\n+#[cfg_attr(not(feature=\"panic_immediate_abort\"),inline(never))]\n+#[cfg_attr(    feature=\"panic_immediate_abort\" ,inline)]\n pub fn panic_fmt(fmt: fmt::Arguments, file_line_col: &(&'static str, u32, u32)) -> ! {\n+    if cfg!(feature = \"panic_immediate_abort\") {\n+        unsafe { super::intrinsics::abort() }\n+    };\n+\n     // NOTE This function never crosses the FFI boundary; it's a Rust-to-Rust call\n     #[allow(improper_ctypes)] // PanicInfo contains a trait object which is not FFI safe\n     extern \"Rust\" {"}, {"sha": "c1446218367e474e6d577445fcf1fb4796cf9150", "filename": "src/libstd/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fdef3848a01c4567abd326043b797f6bdc3f3e76/src%2Flibstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/fdef3848a01c4567abd326043b797f6bdc3f3e76/src%2Flibstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2FCargo.toml?ref=fdef3848a01c4567abd326043b797f6bdc3f3e76", "patch": "@@ -47,6 +47,9 @@ backtrace = []\n panic-unwind = [\"panic_unwind\"]\n profiler = [\"profiler_builtins\"]\n \n+# Make panics and failed asserts immediately abort without formatting any message\n+panic_immediate_abort = [\"core/panic_immediate_abort\"]\n+\n # An off-by-default feature which enables a linux-syscall-like ABI for libstd to\n # interoperate with the host environment. Currently not well documented and\n # requires rebuilding the standard library to use it."}, {"sha": "29a0b3feefdfabd77af7573cc97cdc7af3cd5591", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fdef3848a01c4567abd326043b797f6bdc3f3e76/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdef3848a01c4567abd326043b797f6bdc3f3e76/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=fdef3848a01c4567abd326043b797f6bdc3f3e76", "patch": "@@ -334,9 +334,15 @@ pub fn rust_begin_panic(info: &PanicInfo) -> ! {\n #[unstable(feature = \"libstd_sys_internals\",\n            reason = \"used by the panic! macro\",\n            issue = \"0\")]\n-#[inline(never)] #[cold]\n+#[cold]\n+#[cfg_attr(not(feature=\"panic_immediate_abort\"),inline(never))]\n+#[cfg_attr(    feature=\"panic_immediate_abort\" ,inline)]\n pub fn begin_panic_fmt(msg: &fmt::Arguments,\n                        file_line_col: &(&'static str, u32, u32)) -> ! {\n+    if cfg!(feature = \"panic_immediate_abort\") {\n+        unsafe { intrinsics::abort() }\n+    };\n+\n     let (file, line, col) = *file_line_col;\n     let info = PanicInfo::internal_constructor(\n         Some(msg),\n@@ -398,8 +404,15 @@ fn continue_panic_fmt(info: &PanicInfo) -> ! {\n            reason = \"used by the panic! macro\",\n            issue = \"0\")]\n #[cfg_attr(not(test), lang = \"begin_panic\")]\n-#[inline(never)] #[cold] // avoid code bloat at the call sites as much as possible\n+// avoid code bloat at the call sites as much as possible\n+// inline(never) is required even in panic_immediate_abort mode, lest linker error\n+#[inline(never)]\n+#[cold]\n pub fn begin_panic<M: Any + Send>(msg: M, file_line_col: &(&'static str, u32, u32)) -> ! {\n+    if cfg!(feature = \"panic_immediate_abort\") {\n+        unsafe { intrinsics::abort() }\n+    };\n+\n     // Note that this should be the only allocation performed in this code path.\n     // Currently this means that panic!() on OOM will invoke this code path,\n     // but then again we're not really ready for panic on OOM anyway. If"}]}