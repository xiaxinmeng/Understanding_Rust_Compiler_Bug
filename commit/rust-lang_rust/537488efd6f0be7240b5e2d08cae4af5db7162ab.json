{"sha": "537488efd6f0be7240b5e2d08cae4af5db7162ab", "node_id": "C_kwDOAAsO6NoAKDUzNzQ4OGVmZDZmMGJlNzI0MGI1ZTJkMDhjYWU0YWY1ZGI3MTYyYWI", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-11-25T19:35:27Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-11-29T15:01:58Z"}, "message": "Make inferred_outlives_crate return Clause", "tree": {"sha": "ccd01f180e00fa75b4629ca81b1244b532a7f1fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ccd01f180e00fa75b4629ca81b1244b532a7f1fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/537488efd6f0be7240b5e2d08cae4af5db7162ab", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmOGHucACgkQgTGiTgx5\n768bQw//bdEGIX//1SSwaEye2NFxR3TkrQPqqvVevuAZeTFDNrBYcPTbB9uLnpkN\nXxKaDvv+IFxFUchP863x0vLzqiIQAZAXSLSVIt6fwwKlw/Fub+oNM6KvF0zOFOGD\neJHW1N2Z9H2vQwwHg+mIinD/r9B1PQpuYQoF5WsReUGTYA8MpRKj2r3jVGXRJvFW\nWDqmQOZt/TdmLEIX4hiZo+Nc7O4ulH4lcVgOAtH1pXN5nysx/MsAi20nHPPX7pVf\nO+HGDfvzgjjduWRH0xxssnmkn7sCpM3hNPkQq7PjNMj/yOCEAp7YQ0lqZTkoBa6y\nJCCULsdj6g0ZeYd9G4W2uay656D3IL68M+RSBZUwBK+3FrSrOI7XnTV7OhACxgyD\nyXCJwnGsKZ5x+WAjt3kwzyakJbyYOnDNTjOrBirQ31xSvXq4z9Mf458eDlMWS+iz\nCfwN4IBkVa3gfVrNIQKgDYX+xci6wEgdo9nPgdnjLFlJjS78tsUHFCx8zFZtGPXk\n0WNzBpOOEbEHm0dbbLXl8al9iCpuBBN57CnCenlWiJsnujCqWqw6/L+TPFHlYyaw\nvW8fGJo4yrm+egjBFue6nPFccfCNtUKV3HYAdujfygyAM8/R3gpadvHHq6XzvNS3\nXgrQUl5MrciWgqWttbMTW5tMsLujiu/jBWO5/caIz7myjE8p2ms=\n=v2WN\n-----END PGP SIGNATURE-----", "payload": "tree ccd01f180e00fa75b4629ca81b1244b532a7f1fe\nparent c372b1470109547e37dcc29ffd4723ac9f66f15d\nauthor Santiago Pastorino <spastorino@gmail.com> 1669404927 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1669734118 -0300\n\nMake inferred_outlives_crate return Clause\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/537488efd6f0be7240b5e2d08cae4af5db7162ab", "html_url": "https://github.com/rust-lang/rust/commit/537488efd6f0be7240b5e2d08cae4af5db7162ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/537488efd6f0be7240b5e2d08cae4af5db7162ab/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c372b1470109547e37dcc29ffd4723ac9f66f15d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c372b1470109547e37dcc29ffd4723ac9f66f15d", "html_url": "https://github.com/rust-lang/rust/commit/c372b1470109547e37dcc29ffd4723ac9f66f15d"}], "stats": {"total": 88, "additions": 49, "deletions": 39}, "files": [{"sha": "d623e726139442891d173b04829e287ede2cdc82", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/537488efd6f0be7240b5e2d08cae4af5db7162ab/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/537488efd6f0be7240b5e2d08cae4af5db7162ab/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=537488efd6f0be7240b5e2d08cae4af5db7162ab", "patch": "@@ -33,7 +33,7 @@ use rustc_middle::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs}\n use rustc_middle::mir::mono::Linkage;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::util::{Discr, IntTypeExt};\n-use rustc_middle::ty::{self, AdtKind, Const, DefIdTree, IsSuggestable, Ty, TyCtxt};\n+use rustc_middle::ty::{self, AdtKind, Const, DefIdTree, IsSuggestable, ToPredicate, Ty, TyCtxt};\n use rustc_session::lint;\n use rustc_session::parse::feature_err;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n@@ -1366,12 +1366,14 @@ fn predicates_defined_on(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicate\n             \"predicates_defined_on: inferred_outlives_of({:?}) = {:?}\",\n             def_id, inferred_outlives,\n         );\n+        let inferred_outlives_iter =\n+            inferred_outlives.iter().map(|(clause, span)| ((*clause).to_predicate(tcx), *span));\n         if result.predicates.is_empty() {\n-            result.predicates = inferred_outlives;\n+            result.predicates = tcx.arena.alloc_from_iter(inferred_outlives_iter);\n         } else {\n-            result.predicates = tcx\n-                .arena\n-                .alloc_from_iter(result.predicates.iter().chain(inferred_outlives).copied());\n+            result.predicates = tcx.arena.alloc_from_iter(\n+                result.predicates.into_iter().copied().chain(inferred_outlives_iter),\n+            );\n         }\n     }\n "}, {"sha": "81fe32000d3079450050b0937075c5f20bcdfae2", "filename": "compiler/rustc_hir_analysis/src/outlives/mod.rs", "status": "modified", "additions": 8, "deletions": 18, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/537488efd6f0be7240b5e2d08cae4af5db7162ab/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/537488efd6f0be7240b5e2d08cae4af5db7162ab/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fmod.rs?ref=537488efd6f0be7240b5e2d08cae4af5db7162ab", "patch": "@@ -3,7 +3,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::subst::GenericArgKind;\n-use rustc_middle::ty::{self, CratePredicatesMap, ToPredicate, TyCtxt};\n+use rustc_middle::ty::{self, CratePredicatesMap, TyCtxt};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n \n@@ -17,7 +17,7 @@ pub fn provide(providers: &mut Providers) {\n     *providers = Providers { inferred_outlives_of, inferred_outlives_crate, ..*providers };\n }\n \n-fn inferred_outlives_of(tcx: TyCtxt<'_>, item_def_id: DefId) -> &[(ty::Predicate<'_>, Span)] {\n+fn inferred_outlives_of(tcx: TyCtxt<'_>, item_def_id: DefId) -> &[(ty::Clause<'_>, Span)] {\n     let id = tcx.hir().local_def_id_to_hir_id(item_def_id.expect_local());\n \n     if matches!(tcx.def_kind(item_def_id), hir::def::DefKind::AnonConst) && tcx.lazy_normalization()\n@@ -50,12 +50,10 @@ fn inferred_outlives_of(tcx: TyCtxt<'_>, item_def_id: DefId) -> &[(ty::Predicate\n                 if tcx.has_attr(item_def_id, sym::rustc_outlives) {\n                     let mut pred: Vec<String> = predicates\n                         .iter()\n-                        .map(|(out_pred, _)| match out_pred.kind().skip_binder() {\n-                            ty::PredicateKind::Clause(ty::Clause::RegionOutlives(p)) => {\n-                                p.to_string()\n-                            }\n-                            ty::PredicateKind::Clause(ty::Clause::TypeOutlives(p)) => p.to_string(),\n-                            err => bug!(\"unexpected predicate {:?}\", err),\n+                        .map(|(out_pred, _)| match out_pred {\n+                            ty::Clause::RegionOutlives(p) => p.to_string(),\n+                            ty::Clause::TypeOutlives(p) => p.to_string(),\n+                            err => bug!(\"unexpected clause {:?}\", err),\n                         })\n                         .collect();\n                     pred.sort();\n@@ -103,19 +101,11 @@ fn inferred_outlives_crate(tcx: TyCtxt<'_>, (): ()) -> CratePredicatesMap<'_> {\n                 |(ty::OutlivesPredicate(kind1, region2), &span)| {\n                     match kind1.unpack() {\n                         GenericArgKind::Type(ty1) => Some((\n-                            ty::Binder::dummy(ty::PredicateKind::Clause(ty::Clause::TypeOutlives(\n-                                ty::OutlivesPredicate(ty1, *region2),\n-                            )))\n-                            .to_predicate(tcx),\n+                            ty::Clause::TypeOutlives(ty::OutlivesPredicate(ty1, *region2)),\n                             span,\n                         )),\n                         GenericArgKind::Lifetime(region1) => Some((\n-                            ty::Binder::dummy(ty::PredicateKind::Clause(\n-                                ty::Clause::RegionOutlives(ty::OutlivesPredicate(\n-                                    region1, *region2,\n-                                )),\n-                            ))\n-                            .to_predicate(tcx),\n+                            ty::Clause::RegionOutlives(ty::OutlivesPredicate(region1, *region2)),\n                             span,\n                         )),\n                         GenericArgKind::Const(_) => {"}, {"sha": "825093384fba7f4688948e4f1eb963decf7fc9e3", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/537488efd6f0be7240b5e2d08cae4af5db7162ab/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/537488efd6f0be7240b5e2d08cae4af5db7162ab/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=537488efd6f0be7240b5e2d08cae4af5db7162ab", "patch": "@@ -2046,16 +2046,13 @@ declare_lint_pass!(ExplicitOutlivesRequirements => [EXPLICIT_OUTLIVES_REQUIREMEN\n \n impl ExplicitOutlivesRequirements {\n     fn lifetimes_outliving_lifetime<'tcx>(\n-        inferred_outlives: &'tcx [(ty::Predicate<'tcx>, Span)],\n+        inferred_outlives: &'tcx [(ty::Clause<'tcx>, Span)],\n         def_id: DefId,\n     ) -> Vec<ty::Region<'tcx>> {\n         inferred_outlives\n             .iter()\n-            .filter_map(|(pred, _)| match pred.kind().skip_binder() {\n-                ty::PredicateKind::Clause(ty::Clause::RegionOutlives(ty::OutlivesPredicate(\n-                    a,\n-                    b,\n-                ))) => match *a {\n+            .filter_map(|(clause, _)| match *clause {\n+                ty::Clause::RegionOutlives(ty::OutlivesPredicate(a, b)) => match *a {\n                     ty::ReEarlyBound(ebr) if ebr.def_id == def_id => Some(b),\n                     _ => None,\n                 },\n@@ -2065,16 +2062,15 @@ impl ExplicitOutlivesRequirements {\n     }\n \n     fn lifetimes_outliving_type<'tcx>(\n-        inferred_outlives: &'tcx [(ty::Predicate<'tcx>, Span)],\n+        inferred_outlives: &'tcx [(ty::Clause<'tcx>, Span)],\n         index: u32,\n     ) -> Vec<ty::Region<'tcx>> {\n         inferred_outlives\n             .iter()\n-            .filter_map(|(pred, _)| match pred.kind().skip_binder() {\n-                ty::PredicateKind::Clause(ty::Clause::TypeOutlives(ty::OutlivesPredicate(\n-                    a,\n-                    b,\n-                ))) => a.is_param(index).then_some(b),\n+            .filter_map(|(clause, _)| match *clause {\n+                ty::Clause::TypeOutlives(ty::OutlivesPredicate(a, b)) => {\n+                    a.is_param(index).then_some(b)\n+                }\n                 _ => None,\n             })\n             .collect()"}, {"sha": "6b60577c9023fff91ffa1fa29675a9523afa3be3", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/537488efd6f0be7240b5e2d08cae4af5db7162ab/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/537488efd6f0be7240b5e2d08cae4af5db7162ab/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=537488efd6f0be7240b5e2d08cae4af5db7162ab", "patch": "@@ -353,7 +353,7 @@ define_tables! {\n     explicit_predicates_of: Table<DefIndex, LazyValue<ty::GenericPredicates<'static>>>,\n     generics_of: Table<DefIndex, LazyValue<ty::Generics>>,\n     // As an optimization, a missing entry indicates an empty `&[]`.\n-    inferred_outlives_of: Table<DefIndex, LazyArray<(ty::Predicate<'static>, Span)>>,\n+    inferred_outlives_of: Table<DefIndex, LazyArray<(ty::Clause<'static>, Span)>>,\n     super_predicates_of: Table<DefIndex, LazyValue<ty::GenericPredicates<'static>>>,\n     type_of: Table<DefIndex, LazyValue<Ty<'static>>>,\n     variances_of: Table<DefIndex, LazyArray<ty::Variance>>,"}, {"sha": "e1220320eea1b5732808dea43d0644f1e48565e9", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/537488efd6f0be7240b5e2d08cae4af5db7162ab/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/537488efd6f0be7240b5e2d08cae4af5db7162ab/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=537488efd6f0be7240b5e2d08cae4af5db7162ab", "patch": "@@ -562,7 +562,7 @@ rustc_queries! {\n \n     /// Returns the inferred outlives predicates (e.g., for `struct\n     /// Foo<'a, T> { x: &'a T }`, this would return `T: 'a`).\n-    query inferred_outlives_of(key: DefId) -> &'tcx [(ty::Predicate<'tcx>, Span)] {\n+    query inferred_outlives_of(key: DefId) -> &'tcx [(ty::Clause<'tcx>, Span)] {\n         desc { |tcx| \"computing inferred outlives predicates of `{}`\", tcx.def_path_str(key) }\n         cache_on_disk_if { key.is_local() }\n         separate_provide_extern"}, {"sha": "75f2d45eadb81dbdea74246cedd6188b6002b6eb", "filename": "compiler/rustc_middle/src/ty/codec.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/537488efd6f0be7240b5e2d08cae4af5db7162ab/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/537488efd6f0be7240b5e2d08cae4af5db7162ab/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs?ref=537488efd6f0be7240b5e2d08cae4af5db7162ab", "patch": "@@ -345,6 +345,14 @@ impl<'tcx, D: TyDecoder<I = TyCtxt<'tcx>>> RefDecodable<'tcx, D>\n     }\n }\n \n+impl<'tcx, D: TyDecoder<I = TyCtxt<'tcx>>> RefDecodable<'tcx, D> for [(ty::Clause<'tcx>, Span)] {\n+    fn decode(decoder: &mut D) -> &'tcx Self {\n+        decoder.interner().arena.alloc_from_iter(\n+            (0..decoder.read_usize()).map(|_| Decodable::decode(decoder)).collect::<Vec<_>>(),\n+        )\n+    }\n+}\n+\n impl<'tcx, D: TyDecoder<I = TyCtxt<'tcx>>> RefDecodable<'tcx, D>\n     for ty::List<ty::BoundVariableKind>\n {"}, {"sha": "7be9fee3b0cf663eae9fb5f5bd4405c811303ecc", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/537488efd6f0be7240b5e2d08cae4af5db7162ab/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/537488efd6f0be7240b5e2d08cae4af5db7162ab/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=537488efd6f0be7240b5e2d08cae4af5db7162ab", "patch": "@@ -734,7 +734,7 @@ pub struct CratePredicatesMap<'tcx> {\n     /// For each struct with outlive bounds, maps to a vector of the\n     /// predicate of its outlive bounds. If an item has no outlives\n     /// bounds, it will have no entry.\n-    pub predicates: FxHashMap<DefId, &'tcx [(Predicate<'tcx>, Span)]>,\n+    pub predicates: FxHashMap<DefId, &'tcx [(Clause<'tcx>, Span)]>,\n }\n \n impl<'tcx> Predicate<'tcx> {\n@@ -1167,6 +1167,13 @@ impl<'tcx> ToPredicate<'tcx, Predicate<'tcx>> for Binder<'tcx, PredicateKind<'tc\n     }\n }\n \n+impl<'tcx> ToPredicate<'tcx, Predicate<'tcx>> for Clause<'tcx> {\n+    #[inline(always)]\n+    fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n+        tcx.mk_predicate(ty::Binder::dummy(ty::PredicateKind::Clause(self)))\n+    }\n+}\n+\n impl<'tcx> ToPredicate<'tcx, Predicate<'tcx>> for Binder<'tcx, TraitRef<'tcx>> {\n     #[inline(always)]\n     fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {"}, {"sha": "c7d6c6abd1c22ebe153c37ae240e8f572058eee3", "filename": "compiler/rustc_middle/src/ty/parameterized.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/537488efd6f0be7240b5e2d08cae4af5db7162ab/compiler%2Frustc_middle%2Fsrc%2Fty%2Fparameterized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/537488efd6f0be7240b5e2d08cae4af5db7162ab/compiler%2Frustc_middle%2Fsrc%2Fty%2Fparameterized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fparameterized.rs?ref=537488efd6f0be7240b5e2d08cae4af5db7162ab", "patch": "@@ -5,7 +5,7 @@ use rustc_index::vec::{Idx, IndexVec};\n use crate::middle::exported_symbols::ExportedSymbol;\n use crate::mir::Body;\n use crate::ty::{\n-    self, Const, FnSig, GeneratorDiagnosticData, GenericPredicates, Predicate, TraitRef, Ty,\n+    self, Clause, Const, FnSig, GeneratorDiagnosticData, GenericPredicates, Predicate, TraitRef, Ty,\n };\n \n pub trait ParameterizedOverTcx: 'static {\n@@ -121,6 +121,7 @@ parameterized_over_tcx! {\n     TraitRef,\n     Const,\n     Predicate,\n+    Clause,\n     GeneratorDiagnosticData,\n     Body,\n     ExportedSymbol,"}, {"sha": "ac9653b90071cdacd01923cd3bb2c6c42479be14", "filename": "compiler/rustc_query_impl/src/on_disk_cache.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/537488efd6f0be7240b5e2d08cae4af5db7162ab/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/537488efd6f0be7240b5e2d08cae4af5db7162ab/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs?ref=537488efd6f0be7240b5e2d08cae4af5db7162ab", "patch": "@@ -818,6 +818,12 @@ impl<'a, 'tcx> Decodable<CacheDecoder<'a, 'tcx>> for &'tcx [(ty::Predicate<'tcx>\n     }\n }\n \n+impl<'a, 'tcx> Decodable<CacheDecoder<'a, 'tcx>> for &'tcx [(ty::Clause<'tcx>, Span)] {\n+    fn decode(d: &mut CacheDecoder<'a, 'tcx>) -> Self {\n+        RefDecodable::decode(d)\n+    }\n+}\n+\n impl<'a, 'tcx> Decodable<CacheDecoder<'a, 'tcx>> for &'tcx [rustc_ast::InlineAsmTemplatePiece] {\n     fn decode(d: &mut CacheDecoder<'a, 'tcx>) -> Self {\n         RefDecodable::decode(d)"}]}