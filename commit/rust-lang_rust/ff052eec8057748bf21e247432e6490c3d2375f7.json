{"sha": "ff052eec8057748bf21e247432e6490c3d2375f7", "node_id": "C_kwDOAAsO6NoAKGZmMDUyZWVjODA1Nzc0OGJmMjFlMjQ3NDMyZTY0OTBjM2QyMzc1Zjc", "commit": {"author": {"name": "Jacob Pratt", "email": "jacob@jhpratt.dev", "date": "2023-02-18T00:13:50Z"}, "committer": {"name": "Jacob Pratt", "email": "jacob@jhpratt.dev", "date": "2023-02-19T03:46:03Z"}, "message": "Use restricted Damerau-Levenshtein algorithm", "tree": {"sha": "77063e13877788e23145c9a71673e9c3401c546e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77063e13877788e23145c9a71673e9c3401c546e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff052eec8057748bf21e247432e6490c3d2375f7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE/zgjfWsP96DbtCNLbi5VxfmrskcFAmPxm3sACgkQbi5Vxfmr\nskcl8Q/+K2MklFRSxz6msf63Y8bWrTRZQTwkYFauQQCLnEg5c4uvSGQqaZusWwzZ\nzH5BsR5mSPW3vMml2v38Ei3UgUDpNQyd9mtuACTEvtzWOiFeLn3NvGJ0tGIVXMRp\n/MQZ5hoQBWgvmgSqY4huak9qhG3Ycgj30pC7f3QK1kigaGjoeVv4N+EXZ/nuC0b1\nJ32N9dYw6IrzSAWGndshzWxfKdeoTMwBON7orVhy/V9zkGbpoUEwKJrwAIBxIBu7\nokQoG6SX+b2SD7SMMHosSS6fkuAyzNtlVxy8gHARVTO/rTcsxqG5Lm4e7h6dbKv4\ne3xoTNGCNUU1W0IjINys5m8V2smPEo3ZKPGWdMuNDepLrYD890hU4mJ7sPVLfv/A\n1V8PjXPxJWEuy+1aijcvk+RAl0udd9nwfrLKtbcQQHq7EjIy6K1KRQtNoycTPBdw\n6V54zzzYcWlMh0/tg3s4Rln5eFs1UNGEeIDM9dnNVaFCLYrA2GFClq1xrSLKiKXY\nEUxFc2Q32JF5LF/Vcn244xJt0uxIZPOTYPbue+OLegX8kAqYvzcChG0T+nzTOrB7\n+ikh3XRgEer+usdiAsW5vxnOSiMDuglulTVpDo93W5ANGSEi+DrjhspD4ej8dvIr\nrCmhShMj3EC2U76oPBVS/gRSSPGRBAZlw1DoJX4LTX1XP8tuMQo=\n=XBT9\n-----END PGP SIGNATURE-----", "payload": "tree 77063e13877788e23145c9a71673e9c3401c546e\nparent 231bcd131d109d41e5705f48b9c5a6e70c98ff80\nauthor Jacob Pratt <jacob@jhpratt.dev> 1676679230 +0000\ncommitter Jacob Pratt <jacob@jhpratt.dev> 1676778363 +0000\n\nUse restricted Damerau-Levenshtein algorithm\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff052eec8057748bf21e247432e6490c3d2375f7", "html_url": "https://github.com/rust-lang/rust/commit/ff052eec8057748bf21e247432e6490c3d2375f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff052eec8057748bf21e247432e6490c3d2375f7/comments", "author": {"login": "jhpratt", "id": 3161395, "node_id": "MDQ6VXNlcjMxNjEzOTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3161395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhpratt", "html_url": "https://github.com/jhpratt", "followers_url": "https://api.github.com/users/jhpratt/followers", "following_url": "https://api.github.com/users/jhpratt/following{/other_user}", "gists_url": "https://api.github.com/users/jhpratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhpratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhpratt/subscriptions", "organizations_url": "https://api.github.com/users/jhpratt/orgs", "repos_url": "https://api.github.com/users/jhpratt/repos", "events_url": "https://api.github.com/users/jhpratt/events{/privacy}", "received_events_url": "https://api.github.com/users/jhpratt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jhpratt", "id": 3161395, "node_id": "MDQ6VXNlcjMxNjEzOTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3161395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhpratt", "html_url": "https://github.com/jhpratt", "followers_url": "https://api.github.com/users/jhpratt/followers", "following_url": "https://api.github.com/users/jhpratt/following{/other_user}", "gists_url": "https://api.github.com/users/jhpratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhpratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhpratt/subscriptions", "organizations_url": "https://api.github.com/users/jhpratt/orgs", "repos_url": "https://api.github.com/users/jhpratt/repos", "events_url": "https://api.github.com/users/jhpratt/events{/privacy}", "received_events_url": "https://api.github.com/users/jhpratt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "231bcd131d109d41e5705f48b9c5a6e70c98ff80", "url": "https://api.github.com/repos/rust-lang/rust/commits/231bcd131d109d41e5705f48b9c5a6e70c98ff80", "html_url": "https://github.com/rust-lang/rust/commit/231bcd131d109d41e5705f48b9c5a6e70c98ff80"}], "stats": {"total": 101, "additions": 76, "deletions": 25}, "files": [{"sha": "87ab1adc30d1100303ad99e01876eaf50cf36fa8", "filename": "compiler/rustc_span/src/lev_distance.rs", "status": "modified", "additions": 72, "deletions": 24, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/ff052eec8057748bf21e247432e6490c3d2375f7/compiler%2Frustc_span%2Fsrc%2Flev_distance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff052eec8057748bf21e247432e6490c3d2375f7/compiler%2Frustc_span%2Fsrc%2Flev_distance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flev_distance.rs?ref=ff052eec8057748bf21e247432e6490c3d2375f7", "patch": "@@ -1,49 +1,97 @@\n-//! Levenshtein distances.\n+//! Damerau-Levenshtein distances.\n //!\n-//! The [Levenshtein distance] is a metric for measuring the difference between two strings.\n+//! The [Damerau-Levenshtein distance] is a metric for measuring the difference between two strings.\n+//! This implementation is a restricted version of the algorithm, as it does not permit modifying\n+//! characters that have already been transposed.\n //!\n-//! [Levenshtein distance]: https://en.wikipedia.org/wiki/Levenshtein_distance\n+//! [Damerau-Levenshtein distance]: https://en.wikipedia.org/wiki/Damerau%E2%80%93Levenshtein_distance\n \n use crate::symbol::Symbol;\n-use std::cmp;\n+use std::{cmp, mem};\n \n #[cfg(test)]\n mod tests;\n \n-/// Finds the Levenshtein distance between two strings.\n+/// Finds the restricted Damerau-Levenshtein distance between two strings. Characters that have\n+/// already been transposed may not be modified.\n ///\n /// Returns None if the distance exceeds the limit.\n pub fn lev_distance(a: &str, b: &str, limit: usize) -> Option<usize> {\n-    let n = a.chars().count();\n-    let m = b.chars().count();\n-    let min_dist = if n < m { m - n } else { n - m };\n+    let mut a = &a.chars().collect::<Vec<_>>()[..];\n+    let mut b = &b.chars().collect::<Vec<_>>()[..];\n \n+    // Ensure that `b` is the shorter string, minimizing memory use.\n+    if a.len() < b.len() {\n+        mem::swap(&mut a, &mut b);\n+    }\n+\n+    let min_dist = a.len() - b.len();\n+    // If we know the limit will be exceeded, we can return early.\n     if min_dist > limit {\n         return None;\n     }\n-    if n == 0 || m == 0 {\n-        return (min_dist <= limit).then_some(min_dist);\n-    }\n \n-    let mut dcol: Vec<_> = (0..=m).collect();\n+    // Strip common prefix.\n+    while let Some(((b_char, b_rest), (a_char, a_rest))) = b.split_first().zip(a.split_first())\n+        && a_char == b_char\n+    {\n+        a = a_rest;\n+        b = b_rest;\n+    }\n+    // Strip common suffix.\n+    while let Some(((b_char, b_rest), (a_char, a_rest))) = b.split_last().zip(a.split_last())\n+        && a_char == b_char\n+    {\n+        a = a_rest;\n+        b = b_rest;\n+    }\n \n-    for (i, sc) in a.chars().enumerate() {\n-        let mut current = i;\n-        dcol[0] = current + 1;\n+    // If either string is empty, the distance is the length of the other.\n+    // We know that `b` is the shorter string, so we don't need to check `a`.\n+    if b.len() == 0 {\n+        return Some(min_dist);\n+    }\n \n-        for (j, tc) in b.chars().enumerate() {\n-            let next = dcol[j + 1];\n-            if sc == tc {\n-                dcol[j + 1] = current;\n-            } else {\n-                dcol[j + 1] = cmp::min(current, next);\n-                dcol[j + 1] = cmp::min(dcol[j + 1], dcol[j]) + 1;\n+    let mut prev_prev = vec![usize::MAX; b.len() + 1];\n+    let mut prev = (0..=b.len()).collect::<Vec<_>>();\n+    let mut current = vec![0; b.len() + 1];\n+\n+    // row by row\n+    for i in 1..=a.len() {\n+        current[0] = i;\n+        let a_idx = i - 1;\n+\n+        // column by column\n+        for j in 1..=b.len() {\n+            let b_idx = j - 1;\n+\n+            // There is no cost to substitute a character with itself.\n+            let substitution_cost = if a[a_idx] == b[b_idx] { 0 } else { 1 };\n+\n+            current[j] = cmp::min(\n+                // deletion\n+                prev[j] + 1,\n+                cmp::min(\n+                    // insertion\n+                    current[j - 1] + 1,\n+                    // substitution\n+                    prev[j - 1] + substitution_cost,\n+                ),\n+            );\n+\n+            if (i > 1) && (j > 1) && (a[a_idx] == b[b_idx - 1]) && (a[a_idx - 1] == b[b_idx]) {\n+                // transposition\n+                current[j] = cmp::min(current[j], prev_prev[j - 2] + 1);\n             }\n-            current = next;\n         }\n+\n+        // Rotate the buffers, reusing the memory.\n+        [prev_prev, prev, current] = [prev, current, prev_prev];\n     }\n \n-    (dcol[m] <= limit).then_some(dcol[m])\n+    // `prev` because we already rotated the buffers.\n+    let distance = prev[b.len()];\n+    (distance <= limit).then_some(distance)\n }\n \n /// Provides a word similarity score between two words that accounts for substrings being more"}, {"sha": "4335db3823fc64ce8071cd53d523568f33e39f0b", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ff052eec8057748bf21e247432e6490c3d2375f7/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff052eec8057748bf21e247432e6490c3d2375f7/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=ff052eec8057748bf21e247432e6490c3d2375f7", "patch": "@@ -19,6 +19,7 @@\n #![feature(negative_impls)]\n #![feature(min_specialization)]\n #![feature(rustc_attrs)]\n+#![feature(let_chains)]\n #![deny(rustc::untranslatable_diagnostic)]\n #![deny(rustc::diagnostic_outside_of_impl)]\n "}, {"sha": "83383ea61a4ab20a20ccd66be9220d394e384589", "filename": "tests/ui/check-cfg/invalid-cfg-value.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff052eec8057748bf21e247432e6490c3d2375f7/tests%2Fui%2Fcheck-cfg%2Finvalid-cfg-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff052eec8057748bf21e247432e6490c3d2375f7/tests%2Fui%2Fcheck-cfg%2Finvalid-cfg-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcheck-cfg%2Finvalid-cfg-value.stderr?ref=ff052eec8057748bf21e247432e6490c3d2375f7", "patch": "@@ -2,7 +2,9 @@ warning: unexpected `cfg` condition value\n   --> $DIR/invalid-cfg-value.rs:7:7\n    |\n LL | #[cfg(feature = \"sedre\")]\n-   |       ^^^^^^^^^^^^^^^^^\n+   |       ^^^^^^^^^^-------\n+   |                 |\n+   |                 help: did you mean: `\"serde\"`\n    |\n    = note: expected values for `feature` are: full, serde\n    = note: `#[warn(unexpected_cfgs)]` on by default"}]}