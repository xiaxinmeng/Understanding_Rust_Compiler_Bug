{"sha": "0c14551fe55ff009fd1dc178e5c5463a72fa4f71", "node_id": "C_kwDOAAsO6NoAKDBjMTQ1NTFmZTU1ZmYwMDlmZDFkYzE3OGU1YzU0NjNhNzJmYTRmNzE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-11-30T06:00:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-30T06:00:30Z"}, "message": "Rollup merge of #104697 - dingxiangfei2009:fix-euv-control-flow, r=oli-obk\n\nRestore control flow on error in EUV\n\ncc `@Nilstrieb`\n\nFix #104649\n\nSince #98574 refactored a piece of scrutinee memory categorization out as a subroutine, there is a subtle change in handling match arms especially when the categorization process faults and bails. In the correct case, it is not supposed to continue to process the arms any more. This PR restores the original control flow in EUV.\n\nI promise to add a compile-fail test to demonstrate that this indeed fixes the issue after coming back from a nap.", "tree": {"sha": "7df78696fadd2c85ce8dd5a3af77432acf09f0f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7df78696fadd2c85ce8dd5a3af77432acf09f0f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c14551fe55ff009fd1dc178e5c5463a72fa4f71", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjhvF+CRBK7hj4Ov3rIwAAIH4IAInddI71U5axXvf8SIjkLdpl\nh1AZqvZBrVVzgtvgh3cBuA4hrm2yhL8V0SEE89l/JcYEa9aos9yzJuXavQ7e6RCZ\nyc3QWBqy/a//DObBmdaT0dH2vLYcvVJ7BmGHWtxSa2TJvEXwjaqyrT3WVqSup5M3\nNKuO/47zRx6U/wKn9OhNT5tAAK5rVH2uKdK1SBinLbZjsxMFkRCt3xGYG0BpKyks\nskisQKjLRzWfj8G6RfGBhzIWRvxo6p734nyONMyB/SEDhHYpb9MJ00fAIGvaJlPL\nJ24tPq+l/BEvhGbzwYOM5JWR34OM2ssIYzOOYv79xwKF/99++7URoDJXppYdWG4=\n=z02B\n-----END PGP SIGNATURE-----\n", "payload": "tree 7df78696fadd2c85ce8dd5a3af77432acf09f0f0\nparent d38a99078cd3c4dadac1ba8b729ea77e8d1d5a82\nparent 9cd12cdf788e3bc46ff72ec7f77448316cfa64c3\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1669788030 +0100\ncommitter GitHub <noreply@github.com> 1669788030 +0100\n\nRollup merge of #104697 - dingxiangfei2009:fix-euv-control-flow, r=oli-obk\n\nRestore control flow on error in EUV\n\ncc `@Nilstrieb`\n\nFix #104649\n\nSince #98574 refactored a piece of scrutinee memory categorization out as a subroutine, there is a subtle change in handling match arms especially when the categorization process faults and bails. In the correct case, it is not supposed to continue to process the arms any more. This PR restores the original control flow in EUV.\n\nI promise to add a compile-fail test to demonstrate that this indeed fixes the issue after coming back from a nap.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c14551fe55ff009fd1dc178e5c5463a72fa4f71", "html_url": "https://github.com/rust-lang/rust/commit/0c14551fe55ff009fd1dc178e5c5463a72fa4f71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c14551fe55ff009fd1dc178e5c5463a72fa4f71/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d38a99078cd3c4dadac1ba8b729ea77e8d1d5a82", "url": "https://api.github.com/repos/rust-lang/rust/commits/d38a99078cd3c4dadac1ba8b729ea77e8d1d5a82", "html_url": "https://github.com/rust-lang/rust/commit/d38a99078cd3c4dadac1ba8b729ea77e8d1d5a82"}, {"sha": "9cd12cdf788e3bc46ff72ec7f77448316cfa64c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cd12cdf788e3bc46ff72ec7f77448316cfa64c3", "html_url": "https://github.com/rust-lang/rust/commit/9cd12cdf788e3bc46ff72ec7f77448316cfa64c3"}], "stats": {"total": 65, "additions": 58, "deletions": 7}, "files": [{"sha": "e5e798f4b933f2ec18ae1dc5bdc8c4e6bd411cbe", "filename": "compiler/rustc_hir_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0c14551fe55ff009fd1dc178e5c5463a72fa4f71/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c14551fe55ff009fd1dc178e5c5463a72fa4f71/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=0c14551fe55ff009fd1dc178e5c5463a72fa4f71", "patch": "@@ -252,11 +252,11 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n \n             hir::ExprKind::Match(ref discr, arms, _) => {\n                 let discr_place = return_if_err!(self.mc.cat_expr(discr));\n-                self.maybe_read_scrutinee(\n+                return_if_err!(self.maybe_read_scrutinee(\n                     discr,\n                     discr_place.clone(),\n                     arms.iter().map(|arm| arm.pat),\n-                );\n+                ));\n \n                 // treatment of the discriminant is handled while walking the arms.\n                 for arm in arms {\n@@ -390,15 +390,15 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n         discr: &Expr<'_>,\n         discr_place: PlaceWithHirId<'tcx>,\n         pats: impl Iterator<Item = &'t hir::Pat<'t>>,\n-    ) {\n+    ) -> Result<(), ()> {\n         // Matching should not always be considered a use of the place, hence\n         // discr does not necessarily need to be borrowed.\n         // We only want to borrow discr if the pattern contain something other\n         // than wildcards.\n         let ExprUseVisitor { ref mc, body_owner: _, delegate: _ } = *self;\n         let mut needs_to_be_read = false;\n         for pat in pats {\n-            return_if_err!(mc.cat_pattern(discr_place.clone(), pat, |place, pat| {\n+            mc.cat_pattern(discr_place.clone(), pat, |place, pat| {\n                 match &pat.kind {\n                     PatKind::Binding(.., opt_sub_pat) => {\n                         // If the opt_sub_pat is None, than the binding does not count as\n@@ -453,7 +453,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                         // examined\n                     }\n                 }\n-            }));\n+            })?\n         }\n \n         if needs_to_be_read {\n@@ -474,6 +474,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n             // that the discriminant has been initialized.\n             self.walk_expr(discr);\n         }\n+        Ok(())\n     }\n \n     fn walk_local<F>(\n@@ -490,7 +491,11 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n         f(self);\n         if let Some(els) = els {\n             // borrowing because we need to test the discriminant\n-            self.maybe_read_scrutinee(expr, expr_place.clone(), from_ref(pat).iter());\n+            return_if_err!(self.maybe_read_scrutinee(\n+                expr,\n+                expr_place.clone(),\n+                from_ref(pat).iter()\n+            ));\n             self.walk_block(els)\n         }\n         self.walk_irrefutable_pat(&expr_place, &pat);"}, {"sha": "0f46972019e522f7cd9f312c36958a8e5885d658", "filename": "compiler/rustc_hir_typeck/src/upvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c14551fe55ff009fd1dc178e5c5463a72fa4f71/compiler%2Frustc_hir_typeck%2Fsrc%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c14551fe55ff009fd1dc178e5c5463a72fa4f71/compiler%2Frustc_hir_typeck%2Fsrc%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fupvar.rs?ref=0c14551fe55ff009fd1dc178e5c5463a72fa4f71", "patch": "@@ -2168,7 +2168,7 @@ fn determine_place_ancestry_relation<'tcx>(\n     place_a: &Place<'tcx>,\n     place_b: &Place<'tcx>,\n ) -> PlaceAncestryRelation {\n-    // If Place A and Place B, don't start off from the same root variable, they are divergent.\n+    // If Place A and Place B don't start off from the same root variable, they are divergent.\n     if place_a.base != place_b.base {\n         return PlaceAncestryRelation::Divergent;\n     }"}, {"sha": "4637b884d445d877044b8b858bb91854b015f215", "filename": "src/test/ui/inference/issue-104649.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0c14551fe55ff009fd1dc178e5c5463a72fa4f71/src%2Ftest%2Fui%2Finference%2Fissue-104649.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c14551fe55ff009fd1dc178e5c5463a72fa4f71/src%2Ftest%2Fui%2Finference%2Fissue-104649.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fissue-104649.rs?ref=0c14551fe55ff009fd1dc178e5c5463a72fa4f71", "patch": "@@ -0,0 +1,32 @@\n+type Result<T, E = Error> = ::std::result::Result<T, E>;\n+struct Error;\n+\n+trait ForEach {\n+    type Input;\n+    fn for_each<F, U>(self, f: F)\n+    where\n+        F: FnOnce(Self::Input) -> U;\n+}\n+\n+impl<T> ForEach for A<T> {\n+    type Input = T;\n+    fn for_each<F, U>(self, f: F)\n+    where\n+        F: FnOnce(Self::Input) -> U,\n+    {\n+        todo!()\n+    }\n+}\n+\n+struct A<T>(T);\n+\n+fn main() {\n+    let a = A(Result::Ok(Result::Ok(()))); //~ ERROR type annotations needed\n+    a.for_each(|a: Result<_>| {\n+        let f = || match a {\n+            Ok(Ok(a)) => {}\n+            Ok(Err(a)) => {}\n+            Err(a) => {}\n+        };\n+    });\n+}"}, {"sha": "4962b21f9fdb4c9c475067f2d11edcf77b9c81d3", "filename": "src/test/ui/inference/issue-104649.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0c14551fe55ff009fd1dc178e5c5463a72fa4f71/src%2Ftest%2Fui%2Finference%2Fissue-104649.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c14551fe55ff009fd1dc178e5c5463a72fa4f71/src%2Ftest%2Fui%2Finference%2Fissue-104649.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fissue-104649.stderr?ref=0c14551fe55ff009fd1dc178e5c5463a72fa4f71", "patch": "@@ -0,0 +1,14 @@\n+error[E0282]: type annotations needed for `A<std::result::Result<std::result::Result<(), E>, Error>>`\n+  --> $DIR/issue-104649.rs:24:9\n+   |\n+LL |     let a = A(Result::Ok(Result::Ok(())));\n+   |         ^\n+   |\n+help: consider giving `a` an explicit type, where the type for type parameter `E` is specified\n+   |\n+LL |     let a: A<std::result::Result<std::result::Result<(), E>, Error>> = A(Result::Ok(Result::Ok(())));\n+   |          +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}]}