{"sha": "3d01fc186a039ea1d995e6c5d6a9847861c4ce0a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkMDFmYzE4NmEwMzllYTFkOTk1ZTZjNWQ2YTk4NDc4NjFjNGNlMGE=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-11-19T00:35:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-19T00:35:09Z"}, "message": "Merge pull request #3177 from kestred/kstenerson/preserve-brace-leading-ws\n\nFormat brace-delimited macros with a space after the name", "tree": {"sha": "33b3b301deb43b669f7f7273ef233877f31b5723", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33b3b301deb43b669f7f7273ef233877f31b5723"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d01fc186a039ea1d995e6c5d6a9847861c4ce0a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb8gU9CRBK7hj4Ov3rIwAAdHIIAFr7vuZpQV8256C4Utbd5XaC\nyOgR01Y5e3jC+h55fARvfrKXFrhuQXdPj9PhVEMIxE/E0royTQ551xY/Q/D1eaA/\nEuTsT0iKfl8nQ2fWhAWRXfkN6p6Sbg6D9U/fbaUVdHIxjlyDrK6UeNHSW3sdS2uu\nUD50Zb3lkCD37LvPwWQu52ZOl/67HatlN5nda6f8Du4JfymVtjy634M52E2bOyf0\ngBBQ0szVr4dbnxhDsKWyVz+dz2fQVVgafh5VyS1HETlgVeigqQ4LnkfS2QlTa7U6\nkHkZC+A783TzL+xomDNBgu5dDbjVOEXkgY9r+OCbLn9OMaH1T8S33EeU20DDm1s=\n=5LdO\n-----END PGP SIGNATURE-----\n", "payload": "tree 33b3b301deb43b669f7f7273ef233877f31b5723\nparent 1dd54e67a11c133b16d7ed6185e1b71961668803\nparent bc5124e01609d86d23c9c7b3d83d7133a9f12449\nauthor Nick Cameron <nrc@ncameron.org> 1542587709 +1300\ncommitter GitHub <noreply@github.com> 1542587709 +1300\n\nMerge pull request #3177 from kestred/kstenerson/preserve-brace-leading-ws\n\nFormat brace-delimited macros with a space after the name"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d01fc186a039ea1d995e6c5d6a9847861c4ce0a", "html_url": "https://github.com/rust-lang/rust/commit/3d01fc186a039ea1d995e6c5d6a9847861c4ce0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d01fc186a039ea1d995e6c5d6a9847861c4ce0a/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1dd54e67a11c133b16d7ed6185e1b71961668803", "url": "https://api.github.com/repos/rust-lang/rust/commits/1dd54e67a11c133b16d7ed6185e1b71961668803", "html_url": "https://github.com/rust-lang/rust/commit/1dd54e67a11c133b16d7ed6185e1b71961668803"}, {"sha": "bc5124e01609d86d23c9c7b3d83d7133a9f12449", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc5124e01609d86d23c9c7b3d83d7133a9f12449", "html_url": "https://github.com/rust-lang/rust/commit/bc5124e01609d86d23c9c7b3d83d7133a9f12449"}], "stats": {"total": 47, "additions": 28, "deletions": 19}, "files": [{"sha": "53afccb53ecbaef0d6bf92c5401534164fe150ba", "filename": "src/macros.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3d01fc186a039ea1d995e6c5d6a9847861c4ce0a/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d01fc186a039ea1d995e6c5d6a9847861c4ce0a/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=3d01fc186a039ea1d995e6c5d6a9847861c4ce0a", "patch": "@@ -256,7 +256,7 @@ pub fn rewrite_macro_inner(\n             }\n             DelimToken::Paren => Some(format!(\"{}()\", macro_name)),\n             DelimToken::Bracket => Some(format!(\"{}[]\", macro_name)),\n-            DelimToken::Brace => Some(format!(\"{}{{}}\", macro_name)),\n+            DelimToken::Brace => Some(format!(\"{} {{}}\", macro_name)),\n             _ => unreachable!(),\n         };\n     }\n@@ -416,8 +416,15 @@ pub fn rewrite_macro_inner(\n             }\n         }\n         DelimToken::Brace => {\n-            // Skip macro invocations with braces, for now.\n-            trim_left_preserve_layout(context.snippet(mac.span), shape.indent, &context.config)\n+            // For macro invocations with braces, always put a space between\n+            // the `macro_name!` and `{ /* macro_body */ }` but skip modifying\n+            // anything in between the braces (for now).\n+            let snippet = context.snippet(mac.span);\n+            let macro_raw = snippet.split_at(snippet.find('!')? + 1).1.trim_start();\n+            match trim_left_preserve_layout(macro_raw, &shape.indent, &context.config) {\n+                Some(macro_body) => Some(format!(\"{} {}\", macro_name, macro_body)),\n+                None => Some(format!(\"{} {}\", macro_name, macro_raw)),\n+            }\n         }\n         _ => unreachable!(),\n     }"}, {"sha": "07934255bacd4c08bec3792b16a83260caa0644e", "filename": "tests/source/macros.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3d01fc186a039ea1d995e6c5d6a9847861c4ce0a/tests%2Fsource%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d01fc186a039ea1d995e6c5d6a9847861c4ce0a/tests%2Fsource%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fmacros.rs?ref=3d01fc186a039ea1d995e6c5d6a9847861c4ce0a", "patch": "@@ -4,7 +4,7 @@ itemmacro!(this, is.now() .formatted(yay));\n \n itemmacro!(really, long.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbb() .is.formatted());\n \n-itemmacro!{this, is.bracket().formatted()}\n+itemmacro!{this, is.brace().formatted()}\n \n peg_file!   modname  (\"mygrammarfile.rustpeg\");\n \n@@ -106,6 +106,7 @@ fn main() {\n \n impl X {\n     empty_invoc!{}\n+    empty_invoc! {}\n }\n \n fn issue_1279() {"}, {"sha": "274614f83e2af426318c7878f7c5709db303d2d9", "filename": "tests/target/issue-2917/packed_simd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d01fc186a039ea1d995e6c5d6a9847861c4ce0a/tests%2Ftarget%2Fissue-2917%2Fpacked_simd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d01fc186a039ea1d995e6c5d6a9847861c4ce0a/tests%2Ftarget%2Fissue-2917%2Fpacked_simd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-2917%2Fpacked_simd.rs?ref=3d01fc186a039ea1d995e6c5d6a9847861c4ce0a", "patch": "@@ -31,7 +31,7 @@ macro_rules! impl_from_vector {\n         }\n         */\n \n-        test_if!{\n+        test_if! {\n             $test_tt:\n             interpolate_idents! {\n                 mod [$id _from_ $source] {"}, {"sha": "3625e0a5f5c1b76ec72637264e3ec3932a560c5b", "filename": "tests/target/lazy_static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d01fc186a039ea1d995e6c5d6a9847861c4ce0a/tests%2Ftarget%2Flazy_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d01fc186a039ea1d995e6c5d6a9847861c4ce0a/tests%2Ftarget%2Flazy_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Flazy_static.rs?ref=3d01fc186a039ea1d995e6c5d6a9847861c4ce0a", "patch": "@@ -10,7 +10,7 @@ lazy_static! {\n // We need to be able to format `lazy_static!` without known syntax.\n lazy_static!(xxx, yyyy, zzzzz);\n \n-lazy_static!{}\n+lazy_static! {}\n \n // #2354\n lazy_static! {"}, {"sha": "061d1746422bed8247520b10d41d47b0aa617209", "filename": "tests/target/macros.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3d01fc186a039ea1d995e6c5d6a9847861c4ce0a/tests%2Ftarget%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d01fc186a039ea1d995e6c5d6a9847861c4ce0a/tests%2Ftarget%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmacros.rs?ref=3d01fc186a039ea1d995e6c5d6a9847861c4ce0a", "patch": "@@ -9,7 +9,7 @@ itemmacro!(\n         .formatted()\n );\n \n-itemmacro!{this, is.bracket().formatted()}\n+itemmacro! {this, is.brace().formatted()}\n \n peg_file! modname(\"mygrammarfile.rustpeg\");\n \n@@ -94,7 +94,7 @@ fn main() {\n \n     foo(makro!(1, 3));\n \n-    hamkaas!{ () };\n+    hamkaas! { () };\n \n     macrowithbraces! {dont,    format, me}\n \n@@ -104,11 +104,11 @@ fn main() {\n \n     some_macro![];\n \n-    some_macro!{\n+    some_macro! {\n         // comment\n     };\n \n-    some_macro!{\n+    some_macro! {\n         // comment\n     };\n \n@@ -131,7 +131,8 @@ fn main() {\n }\n \n impl X {\n-    empty_invoc!{}\n+    empty_invoc! {}\n+    empty_invoc! {}\n }\n \n fn issue_1279() {\n@@ -949,7 +950,7 @@ macro_rules! m {\n     };\n }\n fn foo() {\n-    f!{r#\"\n+    f! {r#\"\n             test\n        \"#};\n }"}, {"sha": "31c09550aaf345e0256c027a56c0503c9a249147", "filename": "tests/target/match.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3d01fc186a039ea1d995e6c5d6a9847861c4ce0a/tests%2Ftarget%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d01fc186a039ea1d995e6c5d6a9847861c4ce0a/tests%2Ftarget%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmatch.rs?ref=3d01fc186a039ea1d995e6c5d6a9847861c4ce0a", "patch": "@@ -204,19 +204,19 @@ fn issue355() {\n             vec![3; 4]\n         }\n         // Funky bracketing styles\n-        t => println!{\"a\", b},\n+        t => println! {\"a\", b},\n         u => vec![1, 2],\n         v => vec![3; 4],\n         w => println![\"a\", b],\n         x => vec![1, 2],\n         y => vec![3; 4],\n         // Brackets with comments\n-        tc => println!{\"a\", b}, // comment\n-        uc => vec![1, 2],       // comment\n-        vc => vec![3; 4],       // comment\n-        wc => println![\"a\", b], // comment\n-        xc => vec![1, 2],       // comment\n-        yc => vec![3; 4],       // comment\n+        tc => println! {\"a\", b}, // comment\n+        uc => vec![1, 2],        // comment\n+        vc => vec![3; 4],        // comment\n+        wc => println![\"a\", b],  // comment\n+        xc => vec![1, 2],        // comment\n+        yc => vec![3; 4],        // comment\n         yd => looooooooooooooooooooooooooooooooooooooooooooooooooooooooong_func(\n             aaaaaaaaaa, bbbbbbbbbb, cccccccccc, dddddddddd,\n         ),"}]}