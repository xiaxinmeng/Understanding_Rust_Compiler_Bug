{"sha": "7ea589d7b413c068443cda8ad3f24fe9a50cb07a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlYTU4OWQ3YjQxM2MwNjg0NDNjZGE4YWQzZjI0ZmU5YTUwY2IwN2E=", "commit": {"author": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2015-10-05T17:26:14Z"}, "committer": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2015-10-05T17:26:14Z"}, "message": "Merge pull request #403 from marcusklaas/casts\n\nFormat casts, indices and repeated elements", "tree": {"sha": "374a013087f00a1f91c4f90433e47bf24ce4a928", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/374a013087f00a1f91c4f90433e47bf24ce4a928"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ea589d7b413c068443cda8ad3f24fe9a50cb07a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ea589d7b413c068443cda8ad3f24fe9a50cb07a", "html_url": "https://github.com/rust-lang/rust/commit/7ea589d7b413c068443cda8ad3f24fe9a50cb07a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ea589d7b413c068443cda8ad3f24fe9a50cb07a/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "251af6e1616e468cc0733110110e48500be6c252", "url": "https://api.github.com/repos/rust-lang/rust/commits/251af6e1616e468cc0733110110e48500be6c252", "html_url": "https://github.com/rust-lang/rust/commit/251af6e1616e468cc0733110110e48500be6c252"}, {"sha": "d0be26b383e052c47aff0507cbef99ec01e5ba8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0be26b383e052c47aff0507cbef99ec01e5ba8a", "html_url": "https://github.com/rust-lang/rust/commit/d0be26b383e052c47aff0507cbef99ec01e5ba8a"}], "stats": {"total": 171, "additions": 124, "deletions": 47}, "files": [{"sha": "fcb2ae1ff055cf4b7896080644e5f6406ec8b3bb", "filename": "src/expr.rs", "status": "modified", "additions": 71, "deletions": 43, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/7ea589d7b413c068443cda8ad3f24fe9a50cb07a/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ea589d7b413c068443cda8ad3f24fe9a50cb07a/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=7ea589d7b413c068443cda8ad3f24fe9a50cb07a", "patch": "@@ -111,15 +111,6 @@ impl Rewrite for ast::Expr {\n                                 offset,\n                                 true)\n             }\n-            // We reformat it ourselves because rustc gives us a bad span\n-            // for ranges, see rust#27162\n-            ast::Expr_::ExprRange(ref left, ref right) => {\n-                rewrite_range(context,\n-                              left.as_ref().map(|e| &**e),\n-                              right.as_ref().map(|e| &**e),\n-                              width,\n-                              offset)\n-            }\n             ast::Expr_::ExprMatch(ref cond, ref arms, _) => {\n                 rewrite_match(context, cond, arms, width, offset, self.span)\n             }\n@@ -177,15 +168,40 @@ impl Rewrite for ast::Expr {\n                 rewrite_unary_prefix(context, \"box \", expr, width, offset)\n             }\n             ast::Expr_::ExprAddrOf(mutability, ref expr) => {\n-                rewrite_expr_addrof(context, mutability, &expr, width, offset)\n+                rewrite_expr_addrof(context, mutability, expr, width, offset)\n+            }\n+            ast::Expr_::ExprCast(ref expr, ref ty) => {\n+                rewrite_pair(&**expr, &**ty, \"\", \" as \", \"\", context, width, offset)\n+            }\n+            ast::Expr_::ExprIndex(ref expr, ref index) => {\n+                rewrite_pair(&**expr, &**index, \"\", \"[\", \"]\", context, width, offset)\n+            }\n+            ast::Expr_::ExprRepeat(ref expr, ref repeats) => {\n+                rewrite_pair(&**expr, &**repeats, \"[\", \"; \", \"]\", context, width, offset)\n+            }\n+            ast::Expr_::ExprRange(Some(ref lhs), Some(ref rhs)) => {\n+                rewrite_pair(&**lhs, &**rhs, \"\", \"..\", \"\", context, width, offset)\n+            }\n+            ast::Expr_::ExprRange(None, Some(ref rhs)) => {\n+                rewrite_unary_prefix(context, \"..\", &**rhs, width, offset)\n+            }\n+            ast::Expr_::ExprRange(Some(ref lhs), None) => {\n+                Some(format!(\"{}..\",\n+                             try_opt!(lhs.rewrite(context,\n+                                                  try_opt!(width.checked_sub(2)),\n+                                                  offset))))\n+            }\n+            ast::Expr_::ExprRange(None, None) => {\n+                if width >= 2 {\n+                    Some(\"..\".into())\n+                } else {\n+                    None\n+                }\n             }\n             // We do not format these expressions yet, but they should still\n             // satisfy our width restrictions.\n             ast::Expr_::ExprInPlace(..) |\n-            ast::Expr_::ExprCast(..) |\n-            ast::Expr_::ExprIndex(..) |\n-            ast::Expr_::ExprInlineAsm(..) |\n-            ast::Expr_::ExprRepeat(..) => {\n+            ast::Expr_::ExprInlineAsm(..) => {\n                 wrap_str(context.snippet(self.span),\n                          context.config.max_width,\n                          width,\n@@ -195,6 +211,45 @@ impl Rewrite for ast::Expr {\n     }\n }\n \n+fn rewrite_pair<LHS, RHS>(lhs: &LHS,\n+                          rhs: &RHS,\n+                          prefix: &str,\n+                          infix: &str,\n+                          suffix: &str,\n+                          context: &RewriteContext,\n+                          width: usize,\n+                          offset: Indent)\n+                          -> Option<String>\n+    where LHS: Rewrite,\n+          RHS: Rewrite\n+{\n+    let max_width = try_opt!(width.checked_sub(prefix.len() + infix.len() + suffix.len()));\n+\n+    binary_search(1,\n+                  max_width,\n+                  |lhs_budget| {\n+                      let lhs_offset = offset + prefix.len();\n+                      let lhs_str = match lhs.rewrite(context, lhs_budget, lhs_offset) {\n+                          Some(result) => result,\n+                          None => return Err(Ordering::Greater),\n+                      };\n+\n+                      let last_line_width = last_line_width(&lhs_str);\n+                      let rhs_budget = match max_width.checked_sub(last_line_width) {\n+                          Some(b) => b,\n+                          None => return Err(Ordering::Less),\n+                      };\n+                      let rhs_indent = offset + last_line_width + prefix.len() + infix.len();\n+\n+                      let rhs_str = match rhs.rewrite(context, rhs_budget, rhs_indent) {\n+                          Some(result) => result,\n+                          None => return Err(Ordering::Less),\n+                      };\n+\n+                      Ok(format!(\"{}{}{}{}{}\", prefix, lhs_str, infix, rhs_str, suffix))\n+                  })\n+}\n+\n pub fn rewrite_array<'a, I>(expr_iter: I,\n                             span: Span,\n                             context: &RewriteContext,\n@@ -537,33 +592,6 @@ fn rewrite_label(label: Option<ast::Ident>) -> String {\n     }\n }\n \n-// FIXME: this doesn't play well with line breaks\n-fn rewrite_range(context: &RewriteContext,\n-                 left: Option<&ast::Expr>,\n-                 right: Option<&ast::Expr>,\n-                 width: usize,\n-                 offset: Indent)\n-                 -> Option<String> {\n-    let left_string = match left {\n-        Some(expr) => {\n-            // 2 = ..\n-            let max_width = try_opt!(width.checked_sub(2));\n-            try_opt!(expr.rewrite(context, max_width, offset))\n-        }\n-        None => String::new(),\n-    };\n-\n-    let right_string = match right {\n-        Some(expr) => {\n-            let max_width = try_opt!(width.checked_sub(left_string.len() + 2));\n-            try_opt!(expr.rewrite(context, max_width, offset + 2 + left_string.len()))\n-        }\n-        None => String::new(),\n-    };\n-\n-    Some(format!(\"{}..{}\", left_string, right_string))\n-}\n-\n // Rewrites if-else blocks. If let Some(_) = pat, the expression is\n // treated as an if-let-else expression.\n fn rewrite_if_else(context: &RewriteContext,\n@@ -690,7 +718,7 @@ fn rewrite_match_arm_comment(context: &RewriteContext,\n                              -> Option<String> {\n     // The leading \",\" is not part of the arm-comment\n     let missed_str = match missed_str.find_uncommented(\",\") {\n-        Some(n) => &missed_str[n+1..],\n+        Some(n) => &missed_str[n + 1..],\n         None => &missed_str[..],\n     };\n \n@@ -750,7 +778,7 @@ fn rewrite_match(context: &RewriteContext,\n         let missed_str = if i == 0 {\n             context.snippet(mk_sp(open_brace_pos, arm_start_pos(arm)))\n         } else {\n-            context.snippet(mk_sp(arm_end_pos(&arms[i-1]), arm_start_pos(arm)))\n+            context.snippet(mk_sp(arm_end_pos(&arms[i - 1]), arm_start_pos(arm)))\n         };\n         let comment = try_opt!(rewrite_match_arm_comment(context,\n                                                          &missed_str,"}, {"sha": "827b528771ef757fe0e1b6d4bfaa5316646e1e17", "filename": "src/items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ea589d7b413c068443cda8ad3f24fe9a50cb07a/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ea589d7b413c068443cda8ad3f24fe9a50cb07a/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=7ea589d7b413c068443cda8ad3f24fe9a50cb07a", "patch": "@@ -476,7 +476,7 @@ impl<'a> FmtVisitor<'a> {\n             };\n \n             let more_items = itemize_list(self.codemap,\n-                                          args[min_args-1..].iter(),\n+                                          args[min_args - 1..].iter(),\n                                           \")\",\n                                           |arg| span_lo_for_arg(arg),\n                                           |arg| arg.ty.span.hi,"}, {"sha": "9a169c15ce183a39f0c788bb920e377c9783fba7", "filename": "src/lists.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ea589d7b413c068443cda8ad3f24fe9a50cb07a/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ea589d7b413c068443cda8ad3f24fe9a50cb07a/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=7ea589d7b413c068443cda8ad3f24fe9a50cb07a", "patch": "@@ -379,7 +379,7 @@ impl<'a, T, I, F1, F2, F3> Iterator for ListItems<'a, I, F1, F2, F3>\n                 // because of the way we divide pre- and post- comments.\n \n                 // Everything from the separator to the next item.\n-                let test_snippet = &post_snippet[comment_end-1..];\n+                let test_snippet = &post_snippet[comment_end - 1..];\n                 let first_newline = test_snippet.find('\\n').unwrap_or(test_snippet.len());\n                 // From the end of the first line of comments.\n                 let test_snippet = &test_snippet[first_newline..];"}, {"sha": "5c5565c65969e25acd99ab5c918df42de49c73f5", "filename": "src/missed_spans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ea589d7b413c068443cda8ad3f24fe9a50cb07a/src%2Fmissed_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ea589d7b413c068443cda8ad3f24fe9a50cb07a/src%2Fmissed_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmissed_spans.rs?ref=7ea589d7b413c068443cda8ad3f24fe9a50cb07a", "patch": "@@ -78,7 +78,7 @@ impl<'a> FmtVisitor<'a> {\n                     self.buffer.push_str(&snippet[line_start..lw]);\n                     self.buffer.push_str(\"\\n\");\n                 } else {\n-                    self.buffer.push_str(&snippet[line_start..i+1]);\n+                    self.buffer.push_str(&snippet[line_start..i + 1]);\n                 }\n \n                 line_start = i + 1;"}, {"sha": "21dc2cde2a5a65cd44fc035cfd1141b45d6a266e", "filename": "src/visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ea589d7b413c068443cda8ad3f24fe9a50cb07a/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ea589d7b413c068443cda8ad3f24fe9a50cb07a/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=7ea589d7b413c068443cda8ad3f24fe9a50cb07a", "patch": "@@ -407,7 +407,7 @@ impl<'a> Rewrite for [ast::Attribute] {\n             let a_str = context.snippet(a.span);\n \n             if i > 0 {\n-                let comment = context.snippet(codemap::mk_sp(self[i-1].span.hi, a.span.lo));\n+                let comment = context.snippet(codemap::mk_sp(self[i - 1].span.hi, a.span.lo));\n                 // This particular horror show is to preserve line breaks in between doc\n                 // comments. An alternative would be to force such line breaks to start\n                 // with the usual doc comment token."}, {"sha": "45f688693f6d03dae6d63383f4847e3200f038a4", "filename": "tests/source/expr.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7ea589d7b413c068443cda8ad3f24fe9a50cb07a/tests%2Fsource%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ea589d7b413c068443cda8ad3f24fe9a50cb07a/tests%2Fsource%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fexpr.rs?ref=7ea589d7b413c068443cda8ad3f24fe9a50cb07a", "patch": "@@ -184,3 +184,26 @@ fn addrof() {\n     &    mut(aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa+bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb);\n     &    (aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa+bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb);\n }\n+\n+fn casts() {\n+    fn unpack(packed: u32) -> [u16; 2] {\n+        [\n+            (packed >> 16) as u16,\n+            (packed >>  0) as u16,\n+        ]\n+    }\n+\n+    let some_trait_xxx = xxxxxxxxxxx + xxxxxxxxxxxxx\n+        as SomeTraitXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;\n+    let slightly_longer_trait = yyyyyyyyy + yyyyyyyyyyy as SomeTraitYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY;\n+}\n+\n+fn indices() {\n+    let x = (aaaaaaaaaaaaaaaaaaaaaaaaaaaa+bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb+cccccccccccccccc) [ x + y + z ];\n+    let y = (aaaaaaaaaaaaaaaaaaaaaaaaaaaa + bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb + cccccccccccccccc)[ xxxxx + yyyyy + zzzzz ];\n+}\n+\n+fn repeats() {\n+    let x = [aaaaaaaaaaaaaaaaaaaaaaaaaaaa+bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb+cccccccccccccccc; x + y + z ];\n+    let y = [aaaaaaaaaaaaaaaaaaaaaaaaaaaa + bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb + cccccccccccccccc; xxxxx + yyyyy + zzzzz ];\n+}"}, {"sha": "6fe472c114e36e2d4f55ac4971a9a99838a1aa3f", "filename": "tests/target/expr.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7ea589d7b413c068443cda8ad3f24fe9a50cb07a/tests%2Ftarget%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ea589d7b413c068443cda8ad3f24fe9a50cb07a/tests%2Ftarget%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fexpr.rs?ref=7ea589d7b413c068443cda8ad3f24fe9a50cb07a", "patch": "@@ -198,3 +198,29 @@ fn addrof() {\n     &(aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa +\n       bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb);\n }\n+\n+fn casts() {\n+    fn unpack(packed: u32) -> [u16; 2] {\n+        [(packed >> 16) as u16, (packed >> 0) as u16]\n+    }\n+\n+    let some_trait_xxx = xxxxxxxxxxx + xxxxxxxxxxxxx as SomeTraitXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;\n+    let slightly_longer_trait = yyyyyyyyy +\n+                                yyyyyyyyyyy as SomeTraitYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY;\n+}\n+\n+fn indices() {\n+    let x = (aaaaaaaaaaaaaaaaaaaaaaaaaaaa + bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb + cccccccccccccccc)[x +\n+                                                                                                y +\n+                                                                                                z];\n+    let y = (aaaaaaaaaaaaaaaaaaaaaaaaaaaa + bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb +\n+             cccccccccccccccc)[xxxxx + yyyyy + zzzzz];\n+}\n+\n+fn repeats() {\n+    let x = [aaaaaaaaaaaaaaaaaaaaaaaaaaaa + bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb + cccccccccccccccc; x +\n+                                                                                                y +\n+                                                                                                z];\n+    let y = [aaaaaaaaaaaaaaaaaaaaaaaaaaaa + bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb +\n+             cccccccccccccccc; xxxxx + yyyyy + zzzzz];\n+}"}]}