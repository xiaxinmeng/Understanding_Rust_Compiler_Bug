{"sha": "c2d44b2286ecf84103e2c66237f578212cd9d8fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyZDQ0YjIyODZlY2Y4NDEwM2UyYzY2MjM3ZjU3ODIxMmNkOWQ4ZmU=", "commit": {"author": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2018-07-01T05:08:27Z"}, "committer": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2018-07-01T05:48:05Z"}, "message": "in which the private/restricted-in-public error messaging gets specific\n\nApril 2016's Issue #33174 called out the E0446 diagnostics as\nconfusing. While adding the name of the restricted type to the message\n(548e681f) clarified matters somewhat, Esteban K\u00fcber pointed out that we\ncould stand to place a secondary span on the restricted type.\n\nHere, we differentiate between crate-visible, truly private, and\notherwise restricted types, and place a secondary span specifically on\nthe visibility modifier of the restricted type's declaration (which we\ncan do now that HIR visibilities have spans!).\n\nAt long last, this resolves #33174.", "tree": {"sha": "33b09018beaa22f2cfcb029bb1144d99db704d2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33b09018beaa22f2cfcb029bb1144d99db704d2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2d44b2286ecf84103e2c66237f578212cd9d8fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2d44b2286ecf84103e2c66237f578212cd9d8fe", "html_url": "https://github.com/rust-lang/rust/commit/c2d44b2286ecf84103e2c66237f578212cd9d8fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2d44b2286ecf84103e2c66237f578212cd9d8fe/comments", "author": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d1cbb018e7643e9e8d1d25b8b7de8a2b0671f2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d1cbb018e7643e9e8d1d25b8b7de8a2b0671f2d", "html_url": "https://github.com/rust-lang/rust/commit/8d1cbb018e7643e9e8d1d25b8b7de8a2b0671f2d"}], "stats": {"total": 90, "additions": 84, "deletions": 6}, "files": [{"sha": "dafb89be5fdaf1618a2a43a1e2114e68c0bd634b", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c2d44b2286ecf84103e2c66237f578212cd9d8fe/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2d44b2286ecf84103e2c66237f578212cd9d8fe/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=c2d44b2286ecf84103e2c66237f578212cd9d8fe", "patch": "@@ -1456,29 +1456,36 @@ impl<'a, 'tcx: 'a> TypeVisitor<'tcx> for SearchInterfaceForPrivateItemsVisitor<'\n         if let Some(def_id) = ty_def_id {\n             // Non-local means public (private items can't leave their crate, modulo bugs)\n             if let Some(node_id) = self.tcx.hir.as_local_node_id(def_id) {\n-                let vis = match self.tcx.hir.find(node_id) {\n+                let hir_vis = match self.tcx.hir.find(node_id) {\n                     Some(hir::map::NodeItem(item)) => &item.vis,\n                     Some(hir::map::NodeForeignItem(item)) => &item.vis,\n                     _ => bug!(\"expected item of foreign item\"),\n                 };\n \n-                let vis = ty::Visibility::from_hir(vis, node_id, self.tcx);\n+                let vis = ty::Visibility::from_hir(hir_vis, node_id, self.tcx);\n \n                 if !vis.is_at_least(self.min_visibility, self.tcx) {\n                     self.min_visibility = vis;\n                 }\n                 if !vis.is_at_least(self.required_visibility, self.tcx) {\n+                    let vis_adj = match hir_vis.node {\n+                        hir::VisibilityCrate(_) => \"crate-visible\",\n+                        hir::VisibilityRestricted { .. } => \"restricted\",\n+                        _ => \"private\"\n+                    };\n+\n                     if self.has_pub_restricted || self.has_old_errors || self.in_assoc_ty {\n                         let mut err = struct_span_err!(self.tcx.sess, self.span, E0446,\n-                            \"private type `{}` in public interface\", ty);\n-                        err.span_label(self.span, \"can't leak private type\");\n+                            \"{} type `{}` in public interface\", vis_adj, ty);\n+                        err.span_label(self.span, format!(\"can't leak {} type\", vis_adj));\n+                        err.span_label(hir_vis.span, format!(\"`{}` declared as {}\", ty, vis_adj));\n                         err.emit();\n                     } else {\n                         self.tcx.lint_node(lint::builtin::PRIVATE_IN_PUBLIC,\n                                            node_id,\n                                            self.span,\n-                                           &format!(\"private type `{}` in public \\\n-                                                     interface (error E0446)\", ty));\n+                                           &format!(\"{} type `{}` in public \\\n+                                                     interface (error E0446)\", vis_adj, ty));\n                     }\n                 }\n             }"}, {"sha": "6c7f3785464f9e97d3fbf8100c816c1dc105501a", "filename": "src/test/ui/error-codes/E0446.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c2d44b2286ecf84103e2c66237f578212cd9d8fe/src%2Ftest%2Fui%2Ferror-codes%2FE0446.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2d44b2286ecf84103e2c66237f578212cd9d8fe/src%2Ftest%2Fui%2Ferror-codes%2FE0446.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0446.stderr?ref=c2d44b2286ecf84103e2c66237f578212cd9d8fe", "patch": "@@ -1,6 +1,9 @@\n error[E0446]: private type `Foo::Bar` in public interface\n   --> $DIR/E0446.rs:14:5\n    |\n+LL |       struct Bar(u32);\n+   |       - `Foo::Bar` declared as private\n+LL | \n LL | /     pub fn bar() -> Bar { //~ ERROR E0446\n LL | |         Bar(0)\n LL | |     }"}, {"sha": "ec3f48f0347d34988f07a45a0427a1314799a02c", "filename": "src/test/ui/pub/issue-33174-restricted-type-in-public-interface.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c2d44b2286ecf84103e2c66237f578212cd9d8fe/src%2Ftest%2Fui%2Fpub%2Fissue-33174-restricted-type-in-public-interface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2d44b2286ecf84103e2c66237f578212cd9d8fe/src%2Ftest%2Fui%2Fpub%2Fissue-33174-restricted-type-in-public-interface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fissue-33174-restricted-type-in-public-interface.rs?ref=c2d44b2286ecf84103e2c66237f578212cd9d8fe", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(non_camel_case_types)]  // genus is always capitalized\n+\n+pub(crate) struct Snail;\n+//~^ NOTE `Snail` declared as crate-visible\n+\n+mod sea {\n+    pub(super) struct Turtle;\n+    //~^ NOTE `sea::Turtle` declared as restricted\n+}\n+\n+struct Tortoise;\n+//~^ NOTE `Tortoise` declared as private\n+\n+pub struct Shell<T> {\n+    pub(crate) creature: T,\n+}\n+\n+pub type Helix_pomatia = Shell<Snail>;\n+//~^ ERROR crate-visible type `Snail` in public interface\n+//~| NOTE can't leak crate-visible type\n+pub type Dermochelys_coriacea = Shell<sea::Turtle>;\n+//~^ ERROR restricted type `sea::Turtle` in public interface\n+//~| NOTE can't leak restricted type\n+pub type Testudo_graeca = Shell<Tortoise>;\n+//~^ ERROR private type `Tortoise` in public interface\n+//~| NOTE can't leak private type\n+\n+fn main() {}"}, {"sha": "b35a12f999c8dccd18e0b4605176a9fc7674dc13", "filename": "src/test/ui/pub/issue-33174-restricted-type-in-public-interface.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c2d44b2286ecf84103e2c66237f578212cd9d8fe/src%2Ftest%2Fui%2Fpub%2Fissue-33174-restricted-type-in-public-interface.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2d44b2286ecf84103e2c66237f578212cd9d8fe/src%2Ftest%2Fui%2Fpub%2Fissue-33174-restricted-type-in-public-interface.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fissue-33174-restricted-type-in-public-interface.stderr?ref=c2d44b2286ecf84103e2c66237f578212cd9d8fe", "patch": "@@ -0,0 +1,30 @@\n+error[E0446]: crate-visible type `Snail` in public interface\n+  --> $DIR/issue-33174-restricted-type-in-public-interface.rs:28:1\n+   |\n+LL | pub(crate) struct Snail;\n+   | ---------- `Snail` declared as crate-visible\n+...\n+LL | pub type Helix_pomatia = Shell<Snail>;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak crate-visible type\n+\n+error[E0446]: restricted type `sea::Turtle` in public interface\n+  --> $DIR/issue-33174-restricted-type-in-public-interface.rs:31:1\n+   |\n+LL |     pub(super) struct Turtle;\n+   |     ---------- `sea::Turtle` declared as restricted\n+...\n+LL | pub type Dermochelys_coriacea = Shell<sea::Turtle>;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak restricted type\n+\n+error[E0446]: private type `Tortoise` in public interface\n+  --> $DIR/issue-33174-restricted-type-in-public-interface.rs:34:1\n+   |\n+LL | struct Tortoise;\n+   | - `Tortoise` declared as private\n+...\n+LL | pub type Testudo_graeca = Shell<Tortoise>;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak private type\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0446`."}]}