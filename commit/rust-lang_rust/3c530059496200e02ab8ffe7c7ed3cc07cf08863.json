{"sha": "3c530059496200e02ab8ffe7c7ed3cc07cf08863", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjNTMwMDU5NDk2MjAwZTAyYWI4ZmZlN2M3ZWQzY2MwN2NmMDg4NjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-17T01:42:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-17T01:42:03Z"}, "message": "Auto merge of #85178 - cjgillot:local-crate, r=oli-obk\n\nRemove CrateNum parameter for queries that only work on local crate\n\nThe pervasive `CrateNum` parameter is a remnant of the multi-crate rustc idea.\n\nUsing `()` as query key in those cases avoids having to worry about the validity of the query key.", "tree": {"sha": "c2d0f0d5dce693875cedadb1796521e009c1f3f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2d0f0d5dce693875cedadb1796521e009c1f3f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c530059496200e02ab8ffe7c7ed3cc07cf08863", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c530059496200e02ab8ffe7c7ed3cc07cf08863", "html_url": "https://github.com/rust-lang/rust/commit/3c530059496200e02ab8ffe7c7ed3cc07cf08863", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c530059496200e02ab8ffe7c7ed3cc07cf08863/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5da29cf8f45f831e52c1e027eea73f3937c810d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5da29cf8f45f831e52c1e027eea73f3937c810d", "html_url": "https://github.com/rust-lang/rust/commit/a5da29cf8f45f831e52c1e027eea73f3937c810d"}, {"sha": "915d7663076ffc8a0633ed2ee47ce80e4dcdac19", "url": "https://api.github.com/repos/rust-lang/rust/commits/915d7663076ffc8a0633ed2ee47ce80e4dcdac19", "html_url": "https://github.com/rust-lang/rust/commit/915d7663076ffc8a0633ed2ee47ce80e4dcdac19"}], "stats": {"total": 21, "additions": 10, "deletions": 11}, "files": [{"sha": "357a9f2daf746e67e4f9bdea0e38a37637251e27", "filename": "src/allocator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c530059496200e02ab8ffe7c7ed3cc07cf08863/src%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c530059496200e02ab8ffe7c7ed3cc07cf08863/src%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fallocator.rs?ref=3c530059496200e02ab8ffe7c7ed3cc07cf08863", "patch": "@@ -13,7 +13,7 @@ pub(crate) fn codegen(\n     module: &mut impl Module,\n     unwind_context: &mut UnwindContext,\n ) -> bool {\n-    let any_dynamic_crate = tcx.dependency_formats(LOCAL_CRATE).iter().any(|(_, list)| {\n+    let any_dynamic_crate = tcx.dependency_formats(()).iter().any(|(_, list)| {\n         use rustc_middle::middle::dependency_format::Linkage;\n         list.iter().any(|&linkage| linkage == Linkage::Dynamic)\n     });"}, {"sha": "24d933728db693b804325b232d664f33b65f77d0", "filename": "src/driver/aot.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3c530059496200e02ab8ffe7c7ed3cc07cf08863/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c530059496200e02ab8ffe7c7ed3cc07cf08863/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=3c530059496200e02ab8ffe7c7ed3cc07cf08863", "patch": "@@ -42,7 +42,7 @@ fn emit_module(\n \n     unwind_context.emit(&mut product);\n \n-    let tmp_file = tcx.output_filenames(LOCAL_CRATE).temp_path(OutputType::Object, Some(&name));\n+    let tmp_file = tcx.output_filenames(()).temp_path(OutputType::Object, Some(&name));\n     let obj = product.object.write().unwrap();\n     if let Err(err) = std::fs::write(&tmp_file, obj) {\n         tcx.sess.fatal(&format!(\"error writing object file: {}\", err));\n@@ -74,7 +74,7 @@ fn reuse_workproduct_for_cgu(\n     let work_product = cgu.work_product(tcx);\n     if let Some(saved_file) = &work_product.saved_file {\n         let obj_out = tcx\n-            .output_filenames(LOCAL_CRATE)\n+            .output_filenames(())\n             .temp_path(OutputType::Object, Some(&cgu.name().as_str()));\n         object = Some(obj_out.clone());\n         let source_file = rustc_incremental::in_incr_comp_dir(&incr_comp_session_dir, &saved_file);\n@@ -190,7 +190,7 @@ pub(crate) fn run_aot(\n     let mut work_products = FxHashMap::default();\n \n     let cgus = if tcx.sess.opts.output_types.should_codegen() {\n-        tcx.collect_and_partition_mono_items(LOCAL_CRATE).1\n+        tcx.collect_and_partition_mono_items(()).1\n     } else {\n         // If only `--emit metadata` is used, we shouldn't perform any codegen.\n         // Also `tcx.collect_and_partition_mono_items` may panic in that case.\n@@ -276,7 +276,7 @@ pub(crate) fn run_aot(\n                 .to_string();\n \n             let tmp_file = tcx\n-                .output_filenames(LOCAL_CRATE)\n+                .output_filenames(())\n                 .temp_path(OutputType::Metadata, Some(&metadata_cgu_name));\n \n             let obj = crate::backend::with_object(tcx.sess, &metadata_cgu_name, |object| {\n@@ -353,7 +353,7 @@ fn codegen_global_asm(tcx: TyCtxt<'_>, cgu_name: &str, global_asm: &str) {\n         .join(\"\\n\");\n \n     let output_object_file =\n-        tcx.output_filenames(LOCAL_CRATE).temp_path(OutputType::Object, Some(cgu_name));\n+        tcx.output_filenames(()).temp_path(OutputType::Object, Some(cgu_name));\n \n     // Assemble `global_asm`\n     let global_asm_object_file = add_file_stem_postfix(output_object_file.clone(), \".asm\");"}, {"sha": "632e86da736ab235530d52e7d25512fefe83b590", "filename": "src/driver/jit.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3c530059496200e02ab8ffe7c7ed3cc07cf08863/src%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c530059496200e02ab8ffe7c7ed3cc07cf08863/src%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fjit.rs?ref=3c530059496200e02ab8ffe7c7ed3cc07cf08863", "patch": "@@ -8,7 +8,6 @@ use std::os::raw::{c_char, c_int};\n use cranelift_codegen::binemit::{NullStackMapSink, NullTrapSink};\n use rustc_codegen_ssa::CrateInfo;\n use rustc_middle::mir::mono::MonoItem;\n-use rustc_session::config::EntryFnType;\n \n use cranelift_jit::{JITBuilder, JITModule};\n \n@@ -66,7 +65,7 @@ pub(crate) fn run_jit(tcx: TyCtxt<'_>, backend_config: BackendConfig) -> ! {\n         matches!(backend_config.codegen_mode, CodegenMode::JitLazy),\n     );\n \n-    let (_, cgus) = tcx.collect_and_partition_mono_items(LOCAL_CRATE);\n+    let (_, cgus) = tcx.collect_and_partition_mono_items(());\n     let mono_items = cgus\n         .iter()\n         .map(|cgu| cgu.items_in_deterministic_order(tcx).into_iter())\n@@ -179,7 +178,7 @@ fn load_imported_symbols_for_jit(tcx: TyCtxt<'_>) -> Vec<(String, *const u8)> {\n     let mut dylib_paths = Vec::new();\n \n     let crate_info = CrateInfo::new(tcx);\n-    let formats = tcx.dependency_formats(LOCAL_CRATE);\n+    let formats = tcx.dependency_formats(());\n     let data = &formats\n         .iter()\n         .find(|(crate_type, _data)| *crate_type == rustc_session::config::CrateType::Executable)"}, {"sha": "d1958c5f96b86b7be79f1a2c1129e4e57a82f1a6", "filename": "src/main_shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c530059496200e02ab8ffe7c7ed3cc07cf08863/src%2Fmain_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c530059496200e02ab8ffe7c7ed3cc07cf08863/src%2Fmain_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain_shim.rs?ref=3c530059496200e02ab8ffe7c7ed3cc07cf08863", "patch": "@@ -15,7 +15,7 @@ pub(crate) fn maybe_create_entry_wrapper(\n     unwind_context: &mut UnwindContext,\n     is_jit: bool,\n ) {\n-    let (main_def_id, is_main_fn) = match tcx.entry_fn(LOCAL_CRATE) {\n+    let (main_def_id, is_main_fn) = match tcx.entry_fn(()) {\n         Some((def_id, entry_ty)) => (\n             def_id,\n             match entry_ty {"}, {"sha": "cd8c5b516083611ee316c93c816c523d29863fa3", "filename": "src/pretty_clif.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c530059496200e02ab8ffe7c7ed3cc07cf08863/src%2Fpretty_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c530059496200e02ab8ffe7c7ed3cc07cf08863/src%2Fpretty_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpretty_clif.rs?ref=3c530059496200e02ab8ffe7c7ed3cc07cf08863", "patch": "@@ -214,7 +214,7 @@ pub(crate) fn write_ir_file(\n         return;\n     }\n \n-    let clif_output_dir = tcx.output_filenames(LOCAL_CRATE).with_extension(\"clif\");\n+    let clif_output_dir = tcx.output_filenames(()).with_extension(\"clif\");\n \n     match std::fs::create_dir(&clif_output_dir) {\n         Ok(()) => {}"}]}