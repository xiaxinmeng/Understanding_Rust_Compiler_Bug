{"sha": "bd6bef8cfa851728a300f77066de3542ccea9362", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkNmJlZjhjZmE4NTE3MjhhMzAwZjc3MDY2ZGUzNTQyY2NlYTkzNjI=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-12-10T12:49:59Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-12-10T12:49:59Z"}, "message": "Move macro check to is_block_closure_forced()", "tree": {"sha": "72bdd619e56949c8e444b06b420201268babc5fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72bdd619e56949c8e444b06b420201268babc5fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd6bef8cfa851728a300f77066de3542ccea9362", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd6bef8cfa851728a300f77066de3542ccea9362", "html_url": "https://github.com/rust-lang/rust/commit/bd6bef8cfa851728a300f77066de3542ccea9362", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd6bef8cfa851728a300f77066de3542ccea9362/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "812fc4ca560261c76c9b988be8c2aa9242c50431", "url": "https://api.github.com/repos/rust-lang/rust/commits/812fc4ca560261c76c9b988be8c2aa9242c50431", "html_url": "https://github.com/rust-lang/rust/commit/812fc4ca560261c76c9b988be8c2aa9242c50431"}], "stats": {"total": 23, "additions": 14, "deletions": 9}, "files": [{"sha": "05e121560f96fa5f7b4f0ee1243682e3c3c5928d", "filename": "src/closures.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bd6bef8cfa851728a300f77066de3542ccea9362/src%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd6bef8cfa851728a300f77066de3542ccea9362/src%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fclosures.rs?ref=bd6bef8cfa851728a300f77066de3542ccea9362", "patch": "@@ -81,7 +81,7 @@ fn try_rewrite_without_block(\n ) -> Option<String> {\n     let expr = get_inner_expr(expr, prefix, context);\n \n-    if is_block_closure_forced(expr) {\n+    if is_block_closure_forced(context, expr) {\n         rewrite_closure_with_block(expr, prefix, context, shape)\n     } else {\n         rewrite_closure_expr(expr, prefix, context, body_shape)\n@@ -107,7 +107,7 @@ fn get_inner_expr<'a>(\n \n // Figure out if a block is necessary.\n fn needs_block(block: &ast::Block, prefix: &str, context: &RewriteContext) -> bool {\n-    is_unsafe_block(block) || block.stmts.len() > 1 || context.inside_macro\n+    is_unsafe_block(block) || block.stmts.len() > 1\n         || block_contains_comment(block, context.codemap) || prefix.contains('\\n')\n }\n \n@@ -272,15 +272,11 @@ pub fn rewrite_last_closure(\n         if prefix.contains('\\n') {\n             return None;\n         }\n-        // If we are inside macro, we do not want to add or remove block from closure body.\n-        if context.inside_macro {\n-            return expr.rewrite(context, shape);\n-        }\n \n         let body_shape = shape.offset_left(extra_offset)?;\n \n         // We force to use block for the body of the closure for certain kinds of expressions.\n-        if is_block_closure_forced(body) {\n+        if is_block_closure_forced(context, body) {\n             return rewrite_closure_with_block(body, &prefix, context, body_shape).and_then(\n                 |body_str| {\n                     // If the expression can fit in a single line, we need not force block closure.\n@@ -332,7 +328,16 @@ where\n         .count() > 1\n }\n \n-fn is_block_closure_forced(expr: &ast::Expr) -> bool {\n+fn is_block_closure_forced(context: &RewriteContext, expr: &ast::Expr) -> bool {\n+    // If we are inside macro, we do not want to add or remove block from closure body.\n+    if context.inside_macro {\n+        false\n+    } else {\n+        is_block_closure_forced_inner(expr)\n+    }\n+}\n+\n+fn is_block_closure_forced_inner(expr: &ast::Expr) -> bool {\n     match expr.node {\n         ast::ExprKind::If(..)\n         | ast::ExprKind::IfLet(..)\n@@ -344,7 +349,7 @@ fn is_block_closure_forced(expr: &ast::Expr) -> bool {\n         | ast::ExprKind::Box(ref expr)\n         | ast::ExprKind::Try(ref expr)\n         | ast::ExprKind::Unary(_, ref expr)\n-        | ast::ExprKind::Cast(ref expr, _) => is_block_closure_forced(expr),\n+        | ast::ExprKind::Cast(ref expr, _) => is_block_closure_forced_inner(expr),\n         _ => false,\n     }\n }"}]}