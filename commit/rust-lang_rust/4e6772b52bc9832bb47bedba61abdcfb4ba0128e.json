{"sha": "4e6772b52bc9832bb47bedba61abdcfb4ba0128e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlNjc3MmI1MmJjOTgzMmJiNDdiZWRiYTYxYWJkY2ZiNGJhMDEyOGU=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-30T12:07:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-30T12:07:52Z"}, "message": "Rollup merge of #71205 - NeoRaider:check_attr, r=jonas-schievink\n\nrustc: fix check_attr() for methods, closures and foreign functions\n\nThis fixes an issue that previously turned up for methods in https://github.com/rust-lang/rust/pull/69274, but also exists for closures and foreign function: `check_attr` does not call `codegen_fn_attrs()` for these types when it should, meaning that incorrectly used function attributes are not diagnosed without codegen.\n\nThe issue affects our UI tests, as they run with `--emit=metadata` by default, but as it turns out, this is not the only case: Function attributes are not checked on any dead code without this fix!\n\nThis makes the fix a **breaking change**. The following very silly Rust programs compiles fine on stable Rust when it should not, which is fixed by this PR.\n```rust\nfn main() {\n    #[target_feature(enable = \"sse2\")]\n    || {};\n}\n```\n\nI assume any real-world program which may trigger this issue would at least emit a dead code warning, but of course that is no guarantee that such code does not exist...\n\nFixes #70307", "tree": {"sha": "490b2013b130114b20396cefc0f1f89057e7c556", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/490b2013b130114b20396cefc0f1f89057e7c556"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e6772b52bc9832bb47bedba61abdcfb4ba0128e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeqr+YCRBK7hj4Ov3rIwAAdHIIAC/E0CLk9kv+r96mJy3RXJ/l\nP0lL0sFo+uTf5dwYGAMMjEoiuG5wrVDulLxOIuDdv0xljGk3MGFzhfk4tFVJFCo1\nhWpiebTihk9lYfFX2W7QVcHDSC3eP9I7zmJXwlCgsvtZtgfvY/oTXek3x2iu8AWb\n0DTg5FsibIBB0Nm/lhgJyPqXVEdqJPs7pL+v95+Wk4vzA2ik08KsysGrpTMEHsIg\nDfXlGgw6l6wcGyvIptTR6gojOUJ5AsMBpJwcNiuvltgs71M5qf/j6t8Pc6yiB2kk\ntp1KHK7gh31jsg4+HIys+sLCtXBGmKlUC6QvhKasx1D/FHtFT0d6vLBHoHYOzag=\n=bpnM\n-----END PGP SIGNATURE-----\n", "payload": "tree 490b2013b130114b20396cefc0f1f89057e7c556\nparent bf459752d41a93eb6df0e9513de4ef807883a80c\nparent 6c700dc11c72993d5fa5905355a69c6524e960d3\nauthor Dylan DPC <dylan.dpc@gmail.com> 1588248472 +0200\ncommitter GitHub <noreply@github.com> 1588248472 +0200\n\nRollup merge of #71205 - NeoRaider:check_attr, r=jonas-schievink\n\nrustc: fix check_attr() for methods, closures and foreign functions\n\nThis fixes an issue that previously turned up for methods in https://github.com/rust-lang/rust/pull/69274, but also exists for closures and foreign function: `check_attr` does not call `codegen_fn_attrs()` for these types when it should, meaning that incorrectly used function attributes are not diagnosed without codegen.\n\nThe issue affects our UI tests, as they run with `--emit=metadata` by default, but as it turns out, this is not the only case: Function attributes are not checked on any dead code without this fix!\n\nThis makes the fix a **breaking change**. The following very silly Rust programs compiles fine on stable Rust when it should not, which is fixed by this PR.\n```rust\nfn main() {\n    #[target_feature(enable = \"sse2\")]\n    || {};\n}\n```\n\nI assume any real-world program which may trigger this issue would at least emit a dead code warning, but of course that is no guarantee that such code does not exist...\n\nFixes #70307\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e6772b52bc9832bb47bedba61abdcfb4ba0128e", "html_url": "https://github.com/rust-lang/rust/commit/4e6772b52bc9832bb47bedba61abdcfb4ba0128e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e6772b52bc9832bb47bedba61abdcfb4ba0128e/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf459752d41a93eb6df0e9513de4ef807883a80c", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf459752d41a93eb6df0e9513de4ef807883a80c", "html_url": "https://github.com/rust-lang/rust/commit/bf459752d41a93eb6df0e9513de4ef807883a80c"}, {"sha": "6c700dc11c72993d5fa5905355a69c6524e960d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c700dc11c72993d5fa5905355a69c6524e960d3", "html_url": "https://github.com/rust-lang/rust/commit/6c700dc11c72993d5fa5905355a69c6524e960d3"}], "stats": {"total": 146, "additions": 124, "deletions": 22}, "files": [{"sha": "0fb715f450477c718fce36608123c54bbc2915ee", "filename": "src/librustc_passes/check_attr.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4e6772b52bc9832bb47bedba61abdcfb4ba0128e/src%2Flibrustc_passes%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e6772b52bc9832bb47bedba61abdcfb4ba0128e/src%2Flibrustc_passes%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fcheck_attr.rs?ref=4e6772b52bc9832bb47bedba61abdcfb4ba0128e", "patch": "@@ -76,7 +76,7 @@ impl CheckAttrVisitor<'tcx> {\n             return;\n         }\n \n-        if target == Target::Fn {\n+        if matches!(target, Target::Fn | Target::Method(_) | Target::ForeignFn) {\n             self.tcx.codegen_fn_attrs(self.tcx.hir().local_def_id(hir_id));\n         }\n \n@@ -389,6 +389,9 @@ impl CheckAttrVisitor<'tcx> {\n                 );\n             }\n         }\n+        if target == Target::Closure {\n+            self.tcx.codegen_fn_attrs(self.tcx.hir().local_def_id(expr.hir_id));\n+        }\n     }\n \n     fn check_used(&self, attrs: &'hir [Attribute], target: Target) {"}, {"sha": "eecf2046ccbeaf45624054f2e4ccb2db740dbdd6", "filename": "src/test/ui/feature-gates/feature-gate-unboxed-closures-manual-impls.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e6772b52bc9832bb47bedba61abdcfb4ba0128e/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures-manual-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e6772b52bc9832bb47bedba61abdcfb4ba0128e/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures-manual-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures-manual-impls.rs?ref=4e6772b52bc9832bb47bedba61abdcfb4ba0128e", "patch": "@@ -8,24 +8,28 @@\n struct Foo;\n impl Fn<()> for Foo {\n //~^ ERROR the precise format of `Fn`-family traits' type parameters is subject to change\n+//~| ERROR manual implementations of `Fn` are experimental\n     extern \"rust-call\" fn call(self, args: ()) -> () {}\n     //~^ ERROR rust-call ABI is subject to change\n }\n struct Foo1;\n impl FnOnce() for Foo1 {\n //~^ ERROR associated type bindings are not allowed here\n+//~| ERROR manual implementations of `FnOnce` are experimental\n     extern \"rust-call\" fn call_once(self, args: ()) -> () {}\n     //~^ ERROR rust-call ABI is subject to change\n }\n struct Bar;\n impl FnMut<()> for Bar {\n //~^ ERROR the precise format of `Fn`-family traits' type parameters is subject to change\n+//~| ERROR manual implementations of `FnMut` are experimental\n     extern \"rust-call\" fn call_mut(&self, args: ()) -> () {}\n     //~^ ERROR rust-call ABI is subject to change\n }\n struct Baz;\n impl FnOnce<()> for Baz {\n //~^ ERROR the precise format of `Fn`-family traits' type parameters is subject to change\n+//~| ERROR manual implementations of `FnOnce` are experimental\n     extern \"rust-call\" fn call_once(&self, args: ()) -> () {}\n     //~^ ERROR rust-call ABI is subject to change\n }"}, {"sha": "22a1ce306188971b98c90c42c8fe8802697fd6b1", "filename": "src/test/ui/feature-gates/feature-gate-unboxed-closures-manual-impls.stderr", "status": "modified", "additions": 40, "deletions": 8, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/4e6772b52bc9832bb47bedba61abdcfb4ba0128e/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures-manual-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e6772b52bc9832bb47bedba61abdcfb4ba0128e/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures-manual-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures-manual-impls.stderr?ref=4e6772b52bc9832bb47bedba61abdcfb4ba0128e", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:11:12\n+  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:12:12\n    |\n LL |     extern \"rust-call\" fn call(self, args: ()) -> () {}\n    |            ^^^^^^^^^^^\n@@ -8,7 +8,7 @@ LL |     extern \"rust-call\" fn call(self, args: ()) -> () {}\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:17:12\n+  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:19:12\n    |\n LL |     extern \"rust-call\" fn call_once(self, args: ()) -> () {}\n    |            ^^^^^^^^^^^\n@@ -17,7 +17,7 @@ LL |     extern \"rust-call\" fn call_once(self, args: ()) -> () {}\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:23:12\n+  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:26:12\n    |\n LL |     extern \"rust-call\" fn call_mut(&self, args: ()) -> () {}\n    |            ^^^^^^^^^^^\n@@ -26,7 +26,7 @@ LL |     extern \"rust-call\" fn call_mut(&self, args: ()) -> () {}\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:29:12\n+  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:33:12\n    |\n LL |     extern \"rust-call\" fn call_once(&self, args: ()) -> () {}\n    |            ^^^^^^^^^^^\n@@ -44,13 +44,13 @@ LL | impl Fn<()> for Foo {\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0229]: associated type bindings are not allowed here\n-  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:15:6\n+  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:16:6\n    |\n LL | impl FnOnce() for Foo1 {\n    |      ^^^^^^^^ associated type not allowed here\n \n error[E0658]: the precise format of `Fn`-family traits' type parameters is subject to change\n-  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:21:6\n+  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:23:6\n    |\n LL | impl FnMut<()> for Bar {\n    |      ^^^^^^^^^ help: use parenthetical notation instead: `FnMut() -> ()`\n@@ -59,15 +59,47 @@ LL | impl FnMut<()> for Bar {\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: the precise format of `Fn`-family traits' type parameters is subject to change\n-  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:27:6\n+  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:30:6\n    |\n LL | impl FnOnce<()> for Baz {\n    |      ^^^^^^^^^^ help: use parenthetical notation instead: `FnOnce() -> ()`\n    |\n    = note: see issue #29625 <https://github.com/rust-lang/rust/issues/29625> for more information\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n-error: aborting due to 8 previous errors\n+error[E0183]: manual implementations of `Fn` are experimental\n+  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:9:1\n+   |\n+LL | impl Fn<()> for Foo {\n+   | ^^^^^^^^^^^^^^^^^^^ manual implementations of `Fn` are experimental\n+   |\n+   = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n+\n+error[E0183]: manual implementations of `FnMut` are experimental\n+  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:23:1\n+   |\n+LL | impl FnMut<()> for Bar {\n+   | ^^^^^^^^^^^^^^^^^^^^^^ manual implementations of `FnMut` are experimental\n+   |\n+   = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n+\n+error[E0183]: manual implementations of `FnOnce` are experimental\n+  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:16:1\n+   |\n+LL | impl FnOnce() for Foo1 {\n+   | ^^^^^^^^^^^^^^^^^^^^^^ manual implementations of `FnOnce` are experimental\n+   |\n+   = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n+\n+error[E0183]: manual implementations of `FnOnce` are experimental\n+  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:30:1\n+   |\n+LL | impl FnOnce<()> for Baz {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^ manual implementations of `FnOnce` are experimental\n+   |\n+   = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n+\n+error: aborting due to 12 previous errors\n \n Some errors have detailed explanations: E0229, E0658.\n For more information about an error, try `rustc --explain E0229`."}, {"sha": "ebc5a2536f672b509c756fad5c34393927f9d7d6", "filename": "src/test/ui/feature-gates/feature-gate-unboxed-closures.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4e6772b52bc9832bb47bedba61abdcfb4ba0128e/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e6772b52bc9832bb47bedba61abdcfb4ba0128e/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures.rs?ref=4e6772b52bc9832bb47bedba61abdcfb4ba0128e", "patch": "@@ -4,6 +4,7 @@ struct Test;\n \n impl FnOnce<(u32, u32)> for Test {\n //~^ ERROR the precise format of `Fn`-family traits' type parameters is subject to change\n+//~| ERROR manual implementations of `FnOnce` are experimental\n     type Output = u32;\n \n     extern \"rust-call\" fn call_once(self, (a, b): (u32, u32)) -> u32 {"}, {"sha": "2c8915d0ac3346e43bdf9d794d8785fd918b80ac", "filename": "src/test/ui/feature-gates/feature-gate-unboxed-closures.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4e6772b52bc9832bb47bedba61abdcfb4ba0128e/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e6772b52bc9832bb47bedba61abdcfb4ba0128e/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures.stderr?ref=4e6772b52bc9832bb47bedba61abdcfb4ba0128e", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-unboxed-closures.rs:9:12\n+  --> $DIR/feature-gate-unboxed-closures.rs:10:12\n    |\n LL |     extern \"rust-call\" fn call_once(self, (a, b): (u32, u32)) -> u32 {\n    |            ^^^^^^^^^^^\n@@ -16,6 +16,14 @@ LL | impl FnOnce<(u32, u32)> for Test {\n    = note: see issue #29625 <https://github.com/rust-lang/rust/issues/29625> for more information\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n-error: aborting due to 2 previous errors\n+error[E0183]: manual implementations of `FnOnce` are experimental\n+  --> $DIR/feature-gate-unboxed-closures.rs:5:1\n+   |\n+LL | impl FnOnce<(u32, u32)> for Test {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ manual implementations of `FnOnce` are experimental\n+   |\n+   = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n+\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "030677c879fb516cf0507e0cafd28c3e8799a0d2", "filename": "src/test/ui/issues/issue-3214.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4e6772b52bc9832bb47bedba61abdcfb4ba0128e/src%2Ftest%2Fui%2Fissues%2Fissue-3214.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e6772b52bc9832bb47bedba61abdcfb4ba0128e/src%2Ftest%2Fui%2Fissues%2Fissue-3214.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3214.rs?ref=4e6772b52bc9832bb47bedba61abdcfb4ba0128e", "patch": "@@ -1,10 +1,13 @@\n+// ignore-tidy-linelength\n+\n fn foo<T>() {\n     struct Foo {\n         x: T, //~ ERROR can't use generic parameters from outer function\n     }\n \n     impl<T> Drop for Foo<T> {\n         //~^ ERROR wrong number of type arguments\n+        //~| ERROR the type parameter `T` is not constrained by the impl trait, self type, or predicates\n         fn drop(&mut self) {}\n     }\n }"}, {"sha": "30bc6cb115ffc08a7f3beff28d73ffa53956aaa5", "filename": "src/test/ui/issues/issue-3214.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4e6772b52bc9832bb47bedba61abdcfb4ba0128e/src%2Ftest%2Fui%2Fissues%2Fissue-3214.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e6772b52bc9832bb47bedba61abdcfb4ba0128e/src%2Ftest%2Fui%2Fissues%2Fissue-3214.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3214.stderr?ref=4e6772b52bc9832bb47bedba61abdcfb4ba0128e", "patch": "@@ -1,5 +1,5 @@\n error[E0401]: can't use generic parameters from outer function\n-  --> $DIR/issue-3214.rs:3:12\n+  --> $DIR/issue-3214.rs:5:12\n    |\n LL | fn foo<T>() {\n    |    --- - type parameter from outer function\n@@ -10,12 +10,18 @@ LL |         x: T,\n    |            ^ use of generic parameter from outer function\n \n error[E0107]: wrong number of type arguments: expected 0, found 1\n-  --> $DIR/issue-3214.rs:6:26\n+  --> $DIR/issue-3214.rs:8:26\n    |\n LL |     impl<T> Drop for Foo<T> {\n    |                          ^ unexpected type argument\n \n-error: aborting due to 2 previous errors\n+error[E0207]: the type parameter `T` is not constrained by the impl trait, self type, or predicates\n+  --> $DIR/issue-3214.rs:8:10\n+   |\n+LL |     impl<T> Drop for Foo<T> {\n+   |          ^ unconstrained type parameter\n+\n+error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0107, E0401.\n+Some errors have detailed explanations: E0107, E0207, E0401.\n For more information about an error, try `rustc --explain E0107`."}, {"sha": "bc70f8ffec2b288982c762941bd1b8a4543f711f", "filename": "src/test/ui/macros/issue-68060.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e6772b52bc9832bb47bedba61abdcfb4ba0128e/src%2Ftest%2Fui%2Fmacros%2Fissue-68060.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e6772b52bc9832bb47bedba61abdcfb4ba0128e/src%2Ftest%2Fui%2Fmacros%2Fissue-68060.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-68060.rs?ref=4e6772b52bc9832bb47bedba61abdcfb4ba0128e", "patch": "@@ -1,5 +1,3 @@\n-// build-fail\n-\n #![feature(track_caller)]\n \n fn main() {"}, {"sha": "3ea49e614e6337ba186d77cab71876efbdb8dc23", "filename": "src/test/ui/macros/issue-68060.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e6772b52bc9832bb47bedba61abdcfb4ba0128e/src%2Ftest%2Fui%2Fmacros%2Fissue-68060.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e6772b52bc9832bb47bedba61abdcfb4ba0128e/src%2Ftest%2Fui%2Fmacros%2Fissue-68060.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-68060.stderr?ref=4e6772b52bc9832bb47bedba61abdcfb4ba0128e", "patch": "@@ -1,5 +1,5 @@\n error: `#[target_feature(..)]` can only be applied to `unsafe` functions\n-  --> $DIR/issue-68060.rs:8:13\n+  --> $DIR/issue-68060.rs:6:13\n    |\n LL |             #[target_feature(enable = \"\")]\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can only be applied to `unsafe` functions\n@@ -8,13 +8,13 @@ LL |             |_| (),\n    |             ------ not an `unsafe` function\n \n error: the feature named `` is not valid for this target\n-  --> $DIR/issue-68060.rs:8:30\n+  --> $DIR/issue-68060.rs:6:30\n    |\n LL |             #[target_feature(enable = \"\")]\n    |                              ^^^^^^^^^^^ `` is not valid for this target\n \n error[E0737]: `#[track_caller]` requires Rust ABI\n-  --> $DIR/issue-68060.rs:11:13\n+  --> $DIR/issue-68060.rs:9:13\n    |\n LL |             #[track_caller]\n    |             ^^^^^^^^^^^^^^^"}, {"sha": "1145f7786c78be36d5b10af8bd4c6428edd96d79", "filename": "src/test/ui/rfc-2091-track-caller/error-with-invalid-abi.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e6772b52bc9832bb47bedba61abdcfb4ba0128e/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-invalid-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e6772b52bc9832bb47bedba61abdcfb4ba0128e/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-invalid-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-invalid-abi.rs?ref=4e6772b52bc9832bb47bedba61abdcfb4ba0128e", "patch": "@@ -4,4 +4,10 @@\n extern \"C\" fn f() {}\n //~^^ ERROR `#[track_caller]` requires Rust ABI\n \n+extern \"C\" {\n+    #[track_caller]\n+    fn g();\n+    //~^^ ERROR `#[track_caller]` requires Rust ABI\n+}\n+\n fn main() {}"}, {"sha": "e08c52fabd6b771e36f176481165b62c5e1e7b50", "filename": "src/test/ui/rfc-2091-track-caller/error-with-invalid-abi.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4e6772b52bc9832bb47bedba61abdcfb4ba0128e/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-invalid-abi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e6772b52bc9832bb47bedba61abdcfb4ba0128e/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-invalid-abi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-invalid-abi.stderr?ref=4e6772b52bc9832bb47bedba61abdcfb4ba0128e", "patch": "@@ -4,6 +4,12 @@ error[E0737]: `#[track_caller]` requires Rust ABI\n LL | #[track_caller]\n    | ^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error[E0737]: `#[track_caller]` requires Rust ABI\n+  --> $DIR/error-with-invalid-abi.rs:8:5\n+   |\n+LL |     #[track_caller]\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0737`."}, {"sha": "19c8c3dd4886b11e43c8458b4b33d08c63111789", "filename": "src/test/ui/target-feature/invalid-attribute.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4e6772b52bc9832bb47bedba61abdcfb4ba0128e/src%2Ftest%2Fui%2Ftarget-feature%2Finvalid-attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e6772b52bc9832bb47bedba61abdcfb4ba0128e/src%2Ftest%2Fui%2Ftarget-feature%2Finvalid-attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Finvalid-attribute.rs?ref=4e6772b52bc9832bb47bedba61abdcfb4ba0128e", "patch": "@@ -65,9 +65,26 @@ trait Baz { }\n #[target_feature(enable = \"sse2\")]\n unsafe fn test() {}\n \n+trait Quux {\n+    fn foo();\n+}\n+\n+impl Quux for Foo {\n+    #[target_feature(enable = \"sse2\")]\n+    //~^ ERROR `#[target_feature(..)]` can only be applied to `unsafe` functions\n+    //~| NOTE can only be applied to `unsafe` functions\n+    fn foo() {}\n+    //~^ NOTE not an `unsafe` function\n+}\n+\n fn main() {\n     unsafe {\n         foo();\n         bar();\n     }\n+    #[target_feature(enable = \"sse2\")]\n+    //~^ ERROR `#[target_feature(..)]` can only be applied to `unsafe` functions\n+    //~| NOTE can only be applied to `unsafe` functions\n+    || {};\n+    //~^ NOTE not an `unsafe` function\n }"}, {"sha": "76273d66ac2cf2df4747c87672ae05f49912f649", "filename": "src/test/ui/target-feature/invalid-attribute.stderr", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4e6772b52bc9832bb47bedba61abdcfb4ba0128e/src%2Ftest%2Fui%2Ftarget-feature%2Finvalid-attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e6772b52bc9832bb47bedba61abdcfb4ba0128e/src%2Ftest%2Fui%2Ftarget-feature%2Finvalid-attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Finvalid-attribute.stderr?ref=4e6772b52bc9832bb47bedba61abdcfb4ba0128e", "patch": "@@ -91,5 +91,23 @@ error: cannot use `#[inline(always)]` with `#[target_feature]`\n LL | #[inline(always)]\n    | ^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 12 previous errors\n+error: `#[target_feature(..)]` can only be applied to `unsafe` functions\n+  --> $DIR/invalid-attribute.rs:85:5\n+   |\n+LL |     #[target_feature(enable = \"sse2\")]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can only be applied to `unsafe` functions\n+...\n+LL |     || {};\n+   |     ----- not an `unsafe` function\n+\n+error: `#[target_feature(..)]` can only be applied to `unsafe` functions\n+  --> $DIR/invalid-attribute.rs:73:5\n+   |\n+LL |     #[target_feature(enable = \"sse2\")]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can only be applied to `unsafe` functions\n+...\n+LL |     fn foo() {}\n+   |     ----------- not an `unsafe` function\n+\n+error: aborting due to 14 previous errors\n "}]}