{"sha": "e7f4a9bb465fd7694d9a25c56a7c8eebf73893d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3ZjRhOWJiNDY1ZmQ3Njk0ZDlhMjVjNTZhN2M4ZWViZjczODkzZDE=", "commit": {"author": {"name": "Laurent Mazare", "email": "mazare@google.com", "date": "2017-11-20T07:47:28Z"}, "committer": {"name": "Laurent Mazare", "email": "mazare@google.com", "date": "2017-11-20T07:47:28Z"}, "message": "Fix for the new nightly version.", "tree": {"sha": "320ea756602f1e14d2cfe9c5a84b86a9a2d72a9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/320ea756602f1e14d2cfe9c5a84b86a9a2d72a9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7f4a9bb465fd7694d9a25c56a7c8eebf73893d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7f4a9bb465fd7694d9a25c56a7c8eebf73893d1", "html_url": "https://github.com/rust-lang/rust/commit/e7f4a9bb465fd7694d9a25c56a7c8eebf73893d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7f4a9bb465fd7694d9a25c56a7c8eebf73893d1/comments", "author": {"login": "LaurentMazare", "id": 1041292, "node_id": "MDQ6VXNlcjEwNDEyOTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1041292?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LaurentMazare", "html_url": "https://github.com/LaurentMazare", "followers_url": "https://api.github.com/users/LaurentMazare/followers", "following_url": "https://api.github.com/users/LaurentMazare/following{/other_user}", "gists_url": "https://api.github.com/users/LaurentMazare/gists{/gist_id}", "starred_url": "https://api.github.com/users/LaurentMazare/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LaurentMazare/subscriptions", "organizations_url": "https://api.github.com/users/LaurentMazare/orgs", "repos_url": "https://api.github.com/users/LaurentMazare/repos", "events_url": "https://api.github.com/users/LaurentMazare/events{/privacy}", "received_events_url": "https://api.github.com/users/LaurentMazare/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LaurentMazare", "id": 1041292, "node_id": "MDQ6VXNlcjEwNDEyOTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1041292?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LaurentMazare", "html_url": "https://github.com/LaurentMazare", "followers_url": "https://api.github.com/users/LaurentMazare/followers", "following_url": "https://api.github.com/users/LaurentMazare/following{/other_user}", "gists_url": "https://api.github.com/users/LaurentMazare/gists{/gist_id}", "starred_url": "https://api.github.com/users/LaurentMazare/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LaurentMazare/subscriptions", "organizations_url": "https://api.github.com/users/LaurentMazare/orgs", "repos_url": "https://api.github.com/users/LaurentMazare/repos", "events_url": "https://api.github.com/users/LaurentMazare/events{/privacy}", "received_events_url": "https://api.github.com/users/LaurentMazare/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41a6d015ff6d7fb778b96dec0426223a7f1b4e44", "url": "https://api.github.com/repos/rust-lang/rust/commits/41a6d015ff6d7fb778b96dec0426223a7f1b4e44", "html_url": "https://github.com/rust-lang/rust/commit/41a6d015ff6d7fb778b96dec0426223a7f1b4e44"}], "stats": {"total": 64, "additions": 0, "deletions": 64}, "files": [{"sha": "6367ba0348c77ed3c0ab52d55ec78303b79302b5", "filename": "tests/ui/booleans.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e7f4a9bb465fd7694d9a25c56a7c8eebf73893d1/tests%2Fui%2Fbooleans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7f4a9bb465fd7694d9a25c56a7c8eebf73893d1/tests%2Fui%2Fbooleans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbooleans.stderr?ref=e7f4a9bb465fd7694d9a25c56a7c8eebf73893d1", "patch": "@@ -72,7 +72,6 @@ error: this boolean expression can be simplified\n    |\n 34 |     let _ = a == b && c == 5 && a == b;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n help: try\n    |\n 34 |     let _ = a == b && c == 5;\n@@ -85,7 +84,6 @@ error: this boolean expression can be simplified\n    |\n 35 |     let _ = a == b && c == 5 && b == a;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n help: try\n    |\n 35 |     let _ = a == b && c == 5;\n@@ -122,7 +120,6 @@ error: this boolean expression can be simplified\n    |\n 39 |     let _ = a != b || !(a != b || c == d);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n help: try\n    |\n 39 |     let _ = c != d || a != b;"}, {"sha": "bc10afcedb38a59b9e91670ca766e4bd3a2a2626", "filename": "tests/ui/collapsible_if.stderr", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e7f4a9bb465fd7694d9a25c56a7c8eebf73893d1/tests%2Fui%2Fcollapsible_if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7f4a9bb465fd7694d9a25c56a7c8eebf73893d1/tests%2Fui%2Fcollapsible_if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_if.stderr?ref=e7f4a9bb465fd7694d9a25c56a7c8eebf73893d1", "patch": "@@ -25,7 +25,6 @@ error: this if statement can be collapsed\n 17 | |         }\n 18 | |     }\n    | |_____^\n-   |\n help: try\n    |\n 14 |     if (x == \"hello\" || x == \"world\") && (y == \"world\" || y == \"hello\") {\n@@ -42,7 +41,6 @@ error: this if statement can be collapsed\n 23 | |         }\n 24 | |     }\n    | |_____^\n-   |\n help: try\n    |\n 20 |     if x == \"hello\" && x == \"world\" && (y == \"world\" || y == \"hello\") {\n@@ -59,7 +57,6 @@ error: this if statement can be collapsed\n 29 | |         }\n 30 | |     }\n    | |_____^\n-   |\n help: try\n    |\n 26 |     if (x == \"hello\" || x == \"world\") && y == \"world\" && y == \"hello\" {\n@@ -76,7 +73,6 @@ error: this if statement can be collapsed\n 35 | |         }\n 36 | |     }\n    | |_____^\n-   |\n help: try\n    |\n 32 |     if x == \"hello\" && x == \"world\" && y == \"world\" && y == \"hello\" {\n@@ -93,7 +89,6 @@ error: this if statement can be collapsed\n 41 | |         }\n 42 | |     }\n    | |_____^\n-   |\n help: try\n    |\n 38 |     if 42 == 1337 && 'a' != 'A' {\n@@ -111,7 +106,6 @@ error: this `else { if .. }` block can be collapsed\n 50 | |         }\n 51 | |     }\n    | |_____^\n-   |\n help: try\n    |\n 47 |     } else if y == \"world\" {\n@@ -129,7 +123,6 @@ error: this `else { if .. }` block can be collapsed\n 58 | |         }\n 59 | |     }\n    | |_____^\n-   |\n help: try\n    |\n 55 |     } else if let Some(42) = Some(42) {\n@@ -149,7 +142,6 @@ error: this `else { if .. }` block can be collapsed\n 69 | |         }\n 70 | |     }\n    | |_____^\n-   |\n help: try\n    |\n 63 |     } else if y == \"world\" {\n@@ -172,7 +164,6 @@ error: this `else { if .. }` block can be collapsed\n 80 | |         }\n 81 | |     }\n    | |_____^\n-   |\n help: try\n    |\n 74 |     } else if let Some(42) = Some(42) {\n@@ -195,7 +186,6 @@ error: this `else { if .. }` block can be collapsed\n 91 | |         }\n 92 | |     }\n    | |_____^\n-   |\n help: try\n    |\n 85 |     } else if let Some(42) = Some(42) {\n@@ -218,7 +208,6 @@ error: this `else { if .. }` block can be collapsed\n 102 | |         }\n 103 | |     }\n     | |_____^\n-    |\n help: try\n     |\n 96  |     } else if x == \"hello\" {\n@@ -241,7 +230,6 @@ error: this `else { if .. }` block can be collapsed\n 113 | |         }\n 114 | |     }\n     | |_____^\n-    |\n help: try\n     |\n 107 |     } else if let Some(42) = Some(42) {"}, {"sha": "b09350970fc6cec546b5341dc6b8c8c7403f5bc3", "filename": "tests/ui/for_loop.stderr", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e7f4a9bb465fd7694d9a25c56a7c8eebf73893d1/tests%2Fui%2Ffor_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7f4a9bb465fd7694d9a25c56a7c8eebf73893d1/tests%2Fui%2Ffor_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop.stderr?ref=e7f4a9bb465fd7694d9a25c56a7c8eebf73893d1", "patch": "@@ -91,7 +91,6 @@ error: the loop variable `i` is only used to index `vec`.\n 96 | |         let _ = vec[i];\n 97 | |     }\n    | |_____^\n-   |\n help: consider using an iterator\n    |\n 95 |     for <item> in &vec {\n@@ -104,7 +103,6 @@ error: the loop variable `j` is only used to index `STATIC`.\n 101 | |         println!(\"{:?}\", STATIC[j]);\n 102 | |     }\n     | |_____^\n-    |\n help: consider using an iterator\n     |\n 100 |     for <item> in STATIC.iter().take(4) {\n@@ -117,7 +115,6 @@ error: the loop variable `j` is only used to index `CONST`.\n 105 | |         println!(\"{:?}\", CONST[j]);\n 106 | |     }\n     | |_____^\n-    |\n help: consider using an iterator\n     |\n 104 |     for <item> in CONST.iter().take(4) {\n@@ -130,7 +127,6 @@ error: the loop variable `i` is used to index `vec`\n 109 | |         println!(\"{} {}\", vec[i], i);\n 110 | |     }\n     | |_____^\n-    |\n help: consider using an iterator\n     |\n 108 |     for (i, <item>) in vec.iter().enumerate() {\n@@ -143,7 +139,6 @@ error: the loop variable `i` is only used to index `vec2`.\n 117 | |         println!(\"{}\", vec2[i]);\n 118 | |     }\n     | |_____^\n-    |\n help: consider using an iterator\n     |\n 116 |     for <item> in vec2.iter().take(vec.len()) {\n@@ -156,7 +151,6 @@ error: the loop variable `i` is only used to index `vec`.\n 121 | |         println!(\"{}\", vec[i]);\n 122 | |     }\n     | |_____^\n-    |\n help: consider using an iterator\n     |\n 120 |     for <item> in vec.iter().skip(5) {\n@@ -169,7 +163,6 @@ error: the loop variable `i` is only used to index `vec`.\n 125 | |         println!(\"{}\", vec[i]);\n 126 | |     }\n     | |_____^\n-    |\n help: consider using an iterator\n     |\n 124 |     for <item> in vec.iter().take(MAX_LEN) {\n@@ -182,7 +175,6 @@ error: the loop variable `i` is only used to index `vec`.\n 129 | |         println!(\"{}\", vec[i]);\n 130 | |     }\n     | |_____^\n-    |\n help: consider using an iterator\n     |\n 128 |     for <item> in vec.iter().take(MAX_LEN + 1) {\n@@ -195,7 +187,6 @@ error: the loop variable `i` is only used to index `vec`.\n 133 | |         println!(\"{}\", vec[i]);\n 134 | |     }\n     | |_____^\n-    |\n help: consider using an iterator\n     |\n 132 |     for <item> in vec.iter().take(10).skip(5) {\n@@ -208,7 +199,6 @@ error: the loop variable `i` is only used to index `vec`.\n 137 | |         println!(\"{}\", vec[i]);\n 138 | |     }\n     | |_____^\n-    |\n help: consider using an iterator\n     |\n 136 |     for <item> in vec.iter().take(10 + 1).skip(5) {\n@@ -221,7 +211,6 @@ error: the loop variable `i` is used to index `vec`\n 141 | |         println!(\"{} {}\", vec[i], i);\n 142 | |     }\n     | |_____^\n-    |\n help: consider using an iterator\n     |\n 140 |     for (i, <item>) in vec.iter().enumerate().skip(5) {\n@@ -234,7 +223,6 @@ error: the loop variable `i` is used to index `vec`\n 145 | |         println!(\"{} {}\", vec[i], i);\n 146 | |     }\n     | |_____^\n-    |\n help: consider using an iterator\n     |\n 144 |     for (i, <item>) in vec.iter().enumerate().take(10).skip(5) {\n@@ -261,7 +249,6 @@ error: this range is empty so this for loop will never run\n 153 | |         println!(\"{}\", i);\n 154 | |     }\n     | |_____^\n-    |\n help: consider using the following if you are attempting to iterate over this range in reverse\n     |\n 152 |     for i in (0...10).rev() {\n@@ -274,7 +261,6 @@ error: this range is empty so this for loop will never run\n 157 | |         println!(\"{}\", i);\n 158 | |     }\n     | |_____^\n-    |\n help: consider using the following if you are attempting to iterate over this range in reverse\n     |\n 156 |     for i in (0..MAX_LEN).rev() {\n@@ -295,7 +281,6 @@ error: this range is empty so this for loop will never run\n 186 | |         println!(\"{}\", i);\n 187 | |     }\n     | |_____^\n-    |\n help: consider using the following if you are attempting to iterate over this range in reverse\n     |\n 185 |     for i in (5 + 4..10).rev() {\n@@ -308,7 +293,6 @@ error: this range is empty so this for loop will never run\n 190 | |         println!(\"{}\", i);\n 191 | |     }\n     | |_____^\n-    |\n help: consider using the following if you are attempting to iterate over this range in reverse\n     |\n 189 |     for i in ((3 - 1)..(5 + 2)).rev() {\n@@ -460,7 +444,6 @@ error: you seem to want to iterate on a map's values\n 394 | |         // `in *m.values()` as we used to\n 395 | |     }\n     | |_____^\n-    |\n help: use the corresponding method\n     |\n 390 |     for v in (*m).values() {\n@@ -473,7 +456,6 @@ error: you seem to want to iterate on a map's values\n 399 | |         let _v = v;\n 400 | |     }\n     | |_____^\n-    |\n help: use the corresponding method\n     |\n 398 |     for v in m.values_mut() {\n@@ -486,7 +468,6 @@ error: you seem to want to iterate on a map's values\n 404 | |         let _v = v;\n 405 | |     }\n     | |_____^\n-    |\n help: use the corresponding method\n     |\n 403 |     for v in (*m).values_mut() {\n@@ -499,7 +480,6 @@ error: you seem to want to iterate on a map's keys\n 410 | |         let _k = k;\n 411 | |     }\n     | |_____^\n-    |\n help: use the corresponding method\n     |\n 409 |     for k in rm.keys() {\n@@ -555,7 +535,6 @@ error: it looks like you're manually copying between slices\n 497 | |         dst2[i + 500] = src[i]\n 498 | |     }\n     | |_____^\n-    |\n help: try replacing the loop by\n     |\n 495 |     dst[10..256].clone_from_slice(&src[(10 - 5)..(256 - 5)])"}, {"sha": "aaa1e37ca82edf4972154b238536f9b276326c4f", "filename": "tests/ui/implicit_hasher.stderr", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e7f4a9bb465fd7694d9a25c56a7c8eebf73893d1/tests%2Fui%2Fimplicit_hasher.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7f4a9bb465fd7694d9a25c56a7c8eebf73893d1/tests%2Fui%2Fimplicit_hasher.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_hasher.stderr?ref=e7f4a9bb465fd7694d9a25c56a7c8eebf73893d1", "patch": "@@ -19,7 +19,6 @@ error: impl for `HashMap` should be generalized over different hashers\n    |\n 20 | impl<K: Hash + Eq, V> Foo<i8> for (HashMap<K, V>,) {\n    |                                    ^^^^^^^^^^^^^\n-   |\n help: consider adding a type parameter\n    |\n 20 | impl<K: Hash + Eq, V, S: ::std::hash::BuildHasher + Default> Foo<i8> for (HashMap<K, V, S>,) {\n@@ -34,7 +33,6 @@ error: impl for `HashMap` should be generalized over different hashers\n    |\n 25 | impl Foo<i16> for HashMap<String, String> {\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n help: consider adding a type parameter\n    |\n 25 | impl<S: ::std::hash::BuildHasher + Default> Foo<i16> for HashMap<String, String, S> {\n@@ -49,7 +47,6 @@ error: impl for `HashSet` should be generalized over different hashers\n    |\n 43 | impl<T: Hash + Eq> Foo<i8> for HashSet<T> {\n    |                                ^^^^^^^^^^\n-   |\n help: consider adding a type parameter\n    |\n 43 | impl<T: Hash + Eq, S: ::std::hash::BuildHasher + Default> Foo<i8> for HashSet<T, S> {\n@@ -64,7 +61,6 @@ error: impl for `HashSet` should be generalized over different hashers\n    |\n 48 | impl Foo<i16> for HashSet<String> {\n    |                   ^^^^^^^^^^^^^^^\n-   |\n help: consider adding a type parameter\n    |\n 48 | impl<S: ::std::hash::BuildHasher + Default> Foo<i16> for HashSet<String, S> {\n@@ -79,7 +75,6 @@ error: parameter of type `HashMap` should be generalized over different hashers\n    |\n 65 | pub fn foo(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>) {\n    |                       ^^^^^^^^^^^^^^^^^\n-   |\n help: consider adding a type parameter\n    |\n 65 | pub fn foo<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i32, S>, _set: &mut HashSet<i32>) {\n@@ -90,7 +85,6 @@ error: parameter of type `HashSet` should be generalized over different hashers\n    |\n 65 | pub fn foo(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>) {\n    |                                                     ^^^^^^^^^^^^\n-   |\n help: consider adding a type parameter\n    |\n 65 | pub fn foo<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32, S>) {\n@@ -104,7 +98,6 @@ error: impl for `HashMap` should be generalized over different hashers\n ...\n 83 | gen!(impl);\n    | ----------- in this macro invocation\n-   |\n help: consider adding a type parameter\n    |\n 70 |         impl<K: Hash + Eq, V, S: ::std::hash::BuildHasher + Default> Foo<u8> for HashMap<K, V, S> {\n@@ -122,7 +115,6 @@ error: parameter of type `HashMap` should be generalized over different hashers\n ...\n 84 | gen!(fn bar);\n    | ------------- in this macro invocation\n-   |\n help: consider adding a type parameter\n    |\n 78 |         pub fn $name<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i32, S>, _set: &mut HashSet<i32>) {\n@@ -136,7 +128,6 @@ error: parameter of type `HashSet` should be generalized over different hashers\n ...\n 84 | gen!(fn bar);\n    | ------------- in this macro invocation\n-   |\n help: consider adding a type parameter\n    |\n 78 |         pub fn $name<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32, S>) {"}, {"sha": "69a8621fb162d29298932ae3570905efcfef2b4c", "filename": "tests/ui/int_plus_one.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e7f4a9bb465fd7694d9a25c56a7c8eebf73893d1/tests%2Fui%2Fint_plus_one.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7f4a9bb465fd7694d9a25c56a7c8eebf73893d1/tests%2Fui%2Fint_plus_one.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fint_plus_one.stderr?ref=e7f4a9bb465fd7694d9a25c56a7c8eebf73893d1", "patch": "@@ -15,7 +15,6 @@ error: Unnecessary `>= y + 1` or `x - 1 >=`\n    |\n 11 |     y + 1 <= x;\n    |     ^^^^^^^^^^\n-   |\n help: change `>= y + 1` to `> y` as shown\n    |\n 11 |     y < x;\n@@ -26,7 +25,6 @@ error: Unnecessary `>= y + 1` or `x - 1 >=`\n    |\n 13 |     x - 1 >= y;\n    |     ^^^^^^^^^^\n-   |\n help: change `>= y + 1` to `> y` as shown\n    |\n 13 |     x > y;\n@@ -37,7 +35,6 @@ error: Unnecessary `>= y + 1` or `x - 1 >=`\n    |\n 14 |     y <= x - 1;\n    |     ^^^^^^^^^^\n-   |\n help: change `>= y + 1` to `> y` as shown\n    |\n 14 |     y < x;"}, {"sha": "5c6aac7d4ee689e3370b4d3c971e82aa3e8eabcc", "filename": "tests/ui/large_enum_variant.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7f4a9bb465fd7694d9a25c56a7c8eebf73893d1/tests%2Fui%2Flarge_enum_variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7f4a9bb465fd7694d9a25c56a7c8eebf73893d1/tests%2Fui%2Flarge_enum_variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_enum_variant.stderr?ref=e7f4a9bb465fd7694d9a25c56a7c8eebf73893d1", "patch": "@@ -27,7 +27,6 @@ error: large size difference between variants\n    |\n 34 |     ContainingLargeEnum(LargeEnum),\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n help: consider boxing the large fields to reduce the total size of the enum\n    |\n 34 |     ContainingLargeEnum(Box<LargeEnum>),\n@@ -62,7 +61,6 @@ error: large size difference between variants\n    |\n 49 |     StructLikeLarge2 { x: [i32; 8000] },\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n help: consider boxing the large fields to reduce the total size of the enum\n    |\n 49 |     StructLikeLarge2 { x: Box<[i32; 8000]> },"}, {"sha": "bcb9dbd136b45e0e5351943e79da3353b30f6212", "filename": "tests/ui/literals.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e7f4a9bb465fd7694d9a25c56a7c8eebf73893d1/tests%2Fui%2Fliterals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7f4a9bb465fd7694d9a25c56a7c8eebf73893d1/tests%2Fui%2Fliterals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fliterals.stderr?ref=e7f4a9bb465fd7694d9a25c56a7c8eebf73893d1", "patch": "@@ -77,7 +77,6 @@ error: this is a decimal constant\n    |\n 30 |     let fail8 = 0123;\n    |                 ^^^^\n-   |\n help: if you mean to use a decimal constant, remove the `0` to remove confusion\n    |\n 30 |     let fail8 = 123;"}, {"sha": "e44a4dd789419b534aa112af09de495588785187", "filename": "tests/ui/matches.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7f4a9bb465fd7694d9a25c56a7c8eebf73893d1/tests%2Fui%2Fmatches.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7f4a9bb465fd7694d9a25c56a7c8eebf73893d1/tests%2Fui%2Fmatches.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatches.stderr?ref=e7f4a9bb465fd7694d9a25c56a7c8eebf73893d1", "patch": "@@ -143,7 +143,6 @@ error: you don't need to add `&` to all patterns\n 150 | |         _ => println!(\"none\"),\n 151 | |     }\n     | |_____^\n-    |\n help: instead of prefixing all patterns with `&`, you can dereference the expression\n     |\n 148 |     match *tup { .. }\n@@ -165,7 +164,6 @@ error: you don't need to add `&` to all patterns\n 166 | |         println!(\"none\");\n 167 | |     }\n     | |_____^\n-    |\n help: instead of prefixing all patterns with `&`, you can dereference the expression\n     |\n 165 |     if let .. = *a { .. }"}, {"sha": "65d8b82da1400b87ce2500494de5029f08fe9d64", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e7f4a9bb465fd7694d9a25c56a7c8eebf73893d1/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7f4a9bb465fd7694d9a25c56a7c8eebf73893d1/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=e7f4a9bb465fd7694d9a25c56a7c8eebf73893d1", "patch": "@@ -212,7 +212,6 @@ error: called `map_or(None, f)` on an Option value. This can be done more direct\n 151 | |                        }\n 152 | |                 );\n     | |_________________^\n-    |\n help: try using and_then instead\n     |\n 149 |     let _ = opt.and_then(|x| {"}, {"sha": "2ca96b127e5f2def1716f3e837eadfddaf276d15", "filename": "tests/ui/needless_pass_by_value.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7f4a9bb465fd7694d9a25c56a7c8eebf73893d1/tests%2Fui%2Fneedless_pass_by_value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7f4a9bb465fd7694d9a25c56a7c8eebf73893d1/tests%2Fui%2Fneedless_pass_by_value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_pass_by_value.stderr?ref=e7f4a9bb465fd7694d9a25c56a7c8eebf73893d1", "patch": "@@ -29,7 +29,6 @@ error: this argument is passed by value, but not consumed in the function body\n    |\n 44 | fn test_match(x: Option<Option<String>>, y: Option<Option<String>>) {\n    |                  ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n help: consider taking a reference instead\n    |\n 44 | fn test_match(x: &Option<Option<String>>, y: Option<Option<String>>) {\n@@ -47,7 +46,6 @@ error: this argument is passed by value, but not consumed in the function body\n    |\n 57 | fn test_destructure(x: Wrapper, y: Wrapper, z: Wrapper) {\n    |                                    ^^^^^^^\n-   |\n help: consider taking a reference instead\n    |\n 57 | fn test_destructure(x: Wrapper, y: &Wrapper, z: Wrapper) {\n@@ -73,7 +71,6 @@ error: this argument is passed by value, but not consumed in the function body\n    |\n 75 | fn issue_2114(s: String, t: String, u: Vec<i32>, v: Vec<i32>) {\n    |                             ^^^^^^\n-   |\n help: consider changing the type to\n    |\n 75 | fn issue_2114(s: String, t: &str, u: Vec<i32>, v: Vec<i32>) {\n@@ -94,7 +91,6 @@ error: this argument is passed by value, but not consumed in the function body\n    |\n 75 | fn issue_2114(s: String, t: String, u: Vec<i32>, v: Vec<i32>) {\n    |                                                     ^^^^^^^^\n-   |\n help: consider changing the type to\n    |\n 75 | fn issue_2114(s: String, t: String, u: Vec<i32>, v: &[i32]) {"}, {"sha": "af78b370a123ab85e2a38f702ad868aa4f0dd67a", "filename": "tests/ui/needless_range_loop.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7f4a9bb465fd7694d9a25c56a7c8eebf73893d1/tests%2Fui%2Fneedless_range_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7f4a9bb465fd7694d9a25c56a7c8eebf73893d1/tests%2Fui%2Fneedless_range_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_range_loop.stderr?ref=e7f4a9bb465fd7694d9a25c56a7c8eebf73893d1", "patch": "@@ -19,7 +19,6 @@ error: the loop variable `i` is only used to index `ms`.\n 30 | |         ms[i] *= 2;\n 31 | |     }\n    | |_____^\n-   |\n help: consider using an iterator\n    |\n 29 |     for <item> in &mut ms {\n@@ -33,7 +32,6 @@ error: the loop variable `i` is only used to index `ms`.\n 37 | |         *x *= 2;\n 38 | |     }\n    | |_____^\n-   |\n help: consider using an iterator\n    |\n 35 |     for <item> in &mut ms {"}, {"sha": "1f14b13306fb8f6c0965cd72fc268a30305ec3bb", "filename": "tests/ui/new_without_default.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e7f4a9bb465fd7694d9a25c56a7c8eebf73893d1/tests%2Fui%2Fnew_without_default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7f4a9bb465fd7694d9a25c56a7c8eebf73893d1/tests%2Fui%2Fnew_without_default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_without_default.stderr?ref=e7f4a9bb465fd7694d9a25c56a7c8eebf73893d1", "patch": "@@ -15,7 +15,6 @@ error: you should consider deriving a `Default` implementation for `Bar`\n    |\n 16 |     pub fn new() -> Self { Bar }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n help: try this\n    |\n 13 | #[derive(Default)]"}, {"sha": "4fbf73183c432754bc76c56b39f3bad94d30aa08", "filename": "tests/ui/ptr_arg.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e7f4a9bb465fd7694d9a25c56a7c8eebf73893d1/tests%2Fui%2Fptr_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7f4a9bb465fd7694d9a25c56a7c8eebf73893d1/tests%2Fui%2Fptr_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_arg.stderr?ref=e7f4a9bb465fd7694d9a25c56a7c8eebf73893d1", "patch": "@@ -23,7 +23,6 @@ error: writing `&Vec<_>` instead of `&[_]` involves one more reference and canno\n    |\n 40 | fn cloned(x: &Vec<u8>) -> Vec<u8> {\n    |              ^^^^^^^^\n-   |\n help: change this to\n    |\n 40 | fn cloned(x: &[u8]) -> Vec<u8> {\n@@ -42,7 +41,6 @@ error: writing `&String` instead of `&str` involves a new object where a slice w\n    |\n 49 | fn str_cloned(x: &String) -> String {\n    |                  ^^^^^^^\n-   |\n help: change this to\n    |\n 49 | fn str_cloned(x: &str) -> String {\n@@ -65,7 +63,6 @@ error: writing `&String` instead of `&str` involves a new object where a slice w\n    |\n 59 | fn false_positive_capacity(x: &Vec<u8>, y: &String) {\n    |                                            ^^^^^^^\n-   |\n help: change this to\n    |\n 59 | fn false_positive_capacity(x: &Vec<u8>, y: &str) {"}]}