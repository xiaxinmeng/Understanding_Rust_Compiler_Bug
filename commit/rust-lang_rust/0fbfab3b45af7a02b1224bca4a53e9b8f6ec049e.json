{"sha": "0fbfab3b45af7a02b1224bca4a53e9b8f6ec049e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmYmZhYjNiNDVhZjdhMDJiMTIyNGJjYTRhNTNlOWI4ZjZlYzA0OWU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-17T11:13:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-17T11:13:54Z"}, "message": "Merge #8059\n\n8059: Move doc-comment highlight injection from AST to HIR r=matklad,jonas-schievink a=Veykril\n\nFixes #5016\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "6ba39c051e758d64c75948716d599a9a2a427ee3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ba39c051e758d64c75948716d599a9a2a427ee3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0fbfab3b45af7a02b1224bca4a53e9b8f6ec049e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgUeRyCRBK7hj4Ov3rIwAAdHIIAKgDGlzHCZ3732uYe/vzUrah\n8eWLEwpqIoxydnyKWQK95MGvE/uzWR/Xn9vnhNDF6D3CuZAyjIavJhrwtp+1TI/I\njbXzGk1h0kEewEmOp5CiwXEhb3Ki0LOshVz7fnad/QgAa/ai6ne5fQT8KoCGY+13\nQXfFi1rkIaf0l16jeor1M/eUHf62/vU0mWPxpDk8aPljMlvg9ZCgjeTsfhBgAq/l\nsZrqLKydvlwq0tALuX/Am9S27SsLb4a+vm8gCkONgEc8gEAFGKMg+4hDaS7n3h/n\nCpPGo/xPQcYrRItl9SouRU3ABt3ZXMEQU62DIL4lELXT6ZtCMdiQYbUy6rsZRsg=\n=oNoZ\n-----END PGP SIGNATURE-----\n", "payload": "tree 6ba39c051e758d64c75948716d599a9a2a427ee3\nparent f7fbea509f1e5f840e715c912ee38aa997d1bfbc\nparent cdfb5c353f09138540ae66a2eb80a6a81802bbd6\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1615979634 +0000\ncommitter GitHub <noreply@github.com> 1615979634 +0000\n\nMerge #8059\n\n8059: Move doc-comment highlight injection from AST to HIR r=matklad,jonas-schievink a=Veykril\n\nFixes #5016\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0fbfab3b45af7a02b1224bca4a53e9b8f6ec049e", "html_url": "https://github.com/rust-lang/rust/commit/0fbfab3b45af7a02b1224bca4a53e9b8f6ec049e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0fbfab3b45af7a02b1224bca4a53e9b8f6ec049e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7fbea509f1e5f840e715c912ee38aa997d1bfbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7fbea509f1e5f840e715c912ee38aa997d1bfbc", "html_url": "https://github.com/rust-lang/rust/commit/f7fbea509f1e5f840e715c912ee38aa997d1bfbc"}, {"sha": "cdfb5c353f09138540ae66a2eb80a6a81802bbd6", "url": "https://api.github.com/repos/rust-lang/rust/commits/cdfb5c353f09138540ae66a2eb80a6a81802bbd6", "html_url": "https://github.com/rust-lang/rust/commit/cdfb5c353f09138540ae66a2eb80a6a81802bbd6"}], "stats": {"total": 232, "additions": 205, "deletions": 27}, "files": [{"sha": "dab8da7bbf23631ba3028e007b940d5b2187601b", "filename": "crates/hir/src/attrs.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0fbfab3b45af7a02b1224bca4a53e9b8f6ec049e/crates%2Fhir%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fbfab3b45af7a02b1224bca4a53e9b8f6ec049e/crates%2Fhir%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fattrs.rs?ref=0fbfab3b45af7a02b1224bca4a53e9b8f6ec049e", "patch": "@@ -11,8 +11,8 @@ use hir_ty::db::HirDatabase;\n use syntax::ast;\n \n use crate::{\n-    Adt, Const, ConstParam, Enum, Field, Function, GenericParam, LifetimeParam, MacroDef, Module,\n-    ModuleDef, Static, Struct, Trait, TypeAlias, TypeParam, Union, Variant,\n+    Adt, Const, ConstParam, Enum, Field, Function, GenericParam, Impl, LifetimeParam, MacroDef,\n+    Module, ModuleDef, Static, Struct, Trait, TypeAlias, TypeParam, Union, Variant,\n };\n \n pub trait HasAttrs {\n@@ -64,6 +64,7 @@ impl_has_attrs![\n     (Adt, AdtId),\n     (Module, ModuleId),\n     (GenericParam, GenericParamId),\n+    (Impl, ImplId),\n ];\n \n macro_rules! impl_has_attrs_enum {"}, {"sha": "b41a36a781c02479f8ff18ca028199e1c641acd3", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fbfab3b45af7a02b1224bca4a53e9b8f6ec049e/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fbfab3b45af7a02b1224bca4a53e9b8f6ec049e/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=0fbfab3b45af7a02b1224bca4a53e9b8f6ec049e", "patch": "@@ -89,7 +89,7 @@ pub use crate::{\n pub use {\n     hir_def::{\n         adt::StructKind,\n-        attr::{Attrs, Documentation},\n+        attr::{Attr, Attrs, Documentation},\n         body::scope::ExprScopes,\n         find_path::PrefixKind,\n         import_map,"}, {"sha": "e0eb2a66d0df58720a626d2c584e02dbbeecf452", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0fbfab3b45af7a02b1224bca4a53e9b8f6ec049e/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fbfab3b45af7a02b1224bca4a53e9b8f6ec049e/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=0fbfab3b45af7a02b1224bca4a53e9b8f6ec049e", "patch": "@@ -752,6 +752,7 @@ macro_rules! to_def_impls {\n \n to_def_impls![\n     (crate::Module, ast::Module, module_to_def),\n+    (crate::Module, ast::SourceFile, source_file_to_def),\n     (crate::Struct, ast::Struct, struct_to_def),\n     (crate::Enum, ast::Enum, enum_to_def),\n     (crate::Union, ast::Union, union_to_def),"}, {"sha": "c6ad5ecb5fb7fd558a0d8a718e6fd8a87b37bec1", "filename": "crates/hir/src/semantics/source_to_def.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0fbfab3b45af7a02b1224bca4a53e9b8f6ec049e/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fbfab3b45af7a02b1224bca4a53e9b8f6ec049e/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs?ref=0fbfab3b45af7a02b1224bca4a53e9b8f6ec049e", "patch": "@@ -71,6 +71,12 @@ impl SourceToDefCtx<'_, '_> {\n         Some(def_map.module_id(child_id))\n     }\n \n+    pub(super) fn source_file_to_def(&mut self, src: InFile<ast::SourceFile>) -> Option<ModuleId> {\n+        let _p = profile::span(\"source_file_to_def\");\n+        let file_id = src.file_id.original_file(self.db.upcast());\n+        self.file_to_def(file_id).get(0).copied()\n+    }\n+\n     pub(super) fn trait_to_def(&mut self, src: InFile<ast::Trait>) -> Option<TraitId> {\n         self.to_def(src, keys::TRAIT)\n     }"}, {"sha": "7ba53ee5c6c49ac55eb56dff07625a50e66c8097", "filename": "crates/hir_def/src/attr.rs", "status": "modified", "additions": 39, "deletions": 6, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/0fbfab3b45af7a02b1224bca4a53e9b8f6ec049e/crates%2Fhir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fbfab3b45af7a02b1224bca4a53e9b8f6ec049e/crates%2Fhir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fattr.rs?ref=0fbfab3b45af7a02b1224bca4a53e9b8f6ec049e", "patch": "@@ -136,16 +136,15 @@ impl RawAttrs {\n         let new_attrs = self\n             .iter()\n             .flat_map(|attr| -> SmallVec<[_; 1]> {\n-                let attr = attr.clone();\n                 let is_cfg_attr =\n                     attr.path.as_ident().map_or(false, |name| *name == hir_expand::name![cfg_attr]);\n                 if !is_cfg_attr {\n-                    return smallvec![attr];\n+                    return smallvec![attr.clone()];\n                 }\n \n                 let subtree = match &attr.input {\n                     Some(AttrInput::TokenTree(it)) => it,\n-                    _ => return smallvec![attr],\n+                    _ => return smallvec![attr.clone()],\n                 };\n \n                 // Input subtree is: `(cfg, $(attr),+)`\n@@ -157,11 +156,13 @@ impl RawAttrs {\n                 let cfg = parts.next().unwrap();\n                 let cfg = Subtree { delimiter: subtree.delimiter, token_trees: cfg.to_vec() };\n                 let cfg = CfgExpr::parse(&cfg);\n+                let index = attr.index;\n                 let attrs = parts.filter(|a| !a.is_empty()).filter_map(|attr| {\n                     let tree = Subtree { delimiter: None, token_trees: attr.to_vec() };\n                     let attr = ast::Attr::parse(&format!(\"#[{}]\", tree)).ok()?;\n-                    let hygiene = Hygiene::new_unhygienic(); // FIXME\n-                    Attr::from_src(attr, &hygiene)\n+                    // FIXME hygiene\n+                    let hygiene = Hygiene::new_unhygienic();\n+                    Attr::from_src(attr, &hygiene).map(|attr| Attr { index, ..attr })\n                 });\n \n                 let cfg_options = &crate_graph[krate].cfg_options;\n@@ -293,6 +294,13 @@ impl Attrs {\n         Arc::new(res)\n     }\n \n+    /// Constructs a map that maps the lowered `Attr`s in this `Attrs` back to its original syntax nodes.\n+    ///\n+    /// `owner` must be the original owner of the attributes.\n+    pub fn source_map(&self, owner: &dyn AttrsOwner) -> AttrSourceMap {\n+        AttrSourceMap { attrs: collect_attrs(owner).collect() }\n+    }\n+\n     pub fn by_key(&self, key: &'static str) -> AttrQuery<'_> {\n         AttrQuery { attrs: self, key }\n     }\n@@ -365,6 +373,24 @@ fn inner_attributes(\n     Some((attrs, docs))\n }\n \n+pub struct AttrSourceMap {\n+    attrs: Vec<Either<ast::Attr, ast::Comment>>,\n+}\n+\n+impl AttrSourceMap {\n+    /// Maps the lowered `Attr` back to its original syntax node.\n+    ///\n+    /// `attr` must come from the `owner` used for AttrSourceMap\n+    ///\n+    /// Note that the returned syntax node might be a `#[cfg_attr]`, or a doc comment, instead of\n+    /// the attribute represented by `Attr`.\n+    pub fn source_of(&self, attr: &Attr) -> &Either<ast::Attr, ast::Comment> {\n+        self.attrs\n+            .get(attr.index as usize)\n+            .unwrap_or_else(|| panic!(\"cannot find `Attr` at index {}\", attr.index))\n+    }\n+}\n+\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct Attr {\n     index: u32,\n@@ -448,6 +474,13 @@ impl Attr {\n             _ => None,\n         }\n     }\n+\n+    pub fn string_value(&self) -> Option<&SmolStr> {\n+        match self.input.as_ref()? {\n+            AttrInput::Literal(it) => Some(it),\n+            _ => None,\n+        }\n+    }\n }\n \n #[derive(Debug, Clone, Copy)]\n@@ -475,7 +508,7 @@ impl<'a> AttrQuery<'a> {\n         self.attrs().next().is_some()\n     }\n \n-    pub(crate) fn attrs(self) -> impl Iterator<Item = &'a Attr> {\n+    pub fn attrs(self) -> impl Iterator<Item = &'a Attr> {\n         let key = self.key;\n         self.attrs\n             .iter()"}, {"sha": "ba3447b3a3ebd40f359a1bcb0b23a828dc58311e", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fbfab3b45af7a02b1224bca4a53e9b8f6ec049e/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fbfab3b45af7a02b1224bca4a53e9b8f6ec049e/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=0fbfab3b45af7a02b1224bca4a53e9b8f6ec049e", "patch": "@@ -150,7 +150,7 @@ fn traverse(\n             WalkEvent::Enter(it) => it,\n             WalkEvent::Leave(it) => {\n                 if let Some(node) = it.as_node() {\n-                    inject::doc_comment(hl, node);\n+                    inject::doc_comment(hl, sema, node);\n                 }\n                 continue;\n             }"}, {"sha": "d57ce402745c5d7cf8195331761ec09e72b16f50", "filename": "crates/ide/src/syntax_highlighting/inject.rs", "status": "modified", "additions": 120, "deletions": 15, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/0fbfab3b45af7a02b1224bca4a53e9b8f6ec049e/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fbfab3b45af7a02b1224bca4a53e9b8f6ec049e/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs?ref=0fbfab3b45af7a02b1224bca4a53e9b8f6ec049e", "patch": "@@ -1,8 +1,12 @@\n //! \"Recursive\" Syntax highlighting for code in doctests and fixtures.\n \n-use hir::Semantics;\n+use either::Either;\n+use hir::{HasAttrs, Semantics};\n use ide_db::call_info::ActiveParameter;\n-use syntax::{ast, AstToken, SyntaxNode, SyntaxToken, TextRange, TextSize};\n+use syntax::{\n+    ast::{self, AstNode, AttrsOwner, DocCommentsOwner},\n+    match_ast, AstToken, NodeOrToken, SyntaxNode, SyntaxToken, TextRange, TextSize,\n+};\n \n use crate::{Analysis, HlMod, HlRange, HlTag, RootDatabase};\n \n@@ -81,16 +85,75 @@ const RUSTDOC_FENCE_TOKENS: &[&'static str] = &[\n     \"edition2021\",\n ];\n \n+// Basically an owned dyn AttrsOwner without extra Boxing\n+struct AttrsOwnerNode {\n+    node: SyntaxNode,\n+}\n+\n+impl AttrsOwnerNode {\n+    fn new<N: DocCommentsOwner>(node: N) -> Self {\n+        AttrsOwnerNode { node: node.syntax().clone() }\n+    }\n+}\n+\n+impl AttrsOwner for AttrsOwnerNode {}\n+impl AstNode for AttrsOwnerNode {\n+    fn can_cast(_: syntax::SyntaxKind) -> bool\n+    where\n+        Self: Sized,\n+    {\n+        false\n+    }\n+    fn cast(_: SyntaxNode) -> Option<Self>\n+    where\n+        Self: Sized,\n+    {\n+        None\n+    }\n+    fn syntax(&self) -> &SyntaxNode {\n+        &self.node\n+    }\n+}\n+\n+fn doc_attributes<'node>(\n+    sema: &Semantics<RootDatabase>,\n+    node: &'node SyntaxNode,\n+) -> Option<(AttrsOwnerNode, hir::Attrs)> {\n+    match_ast! {\n+        match node {\n+            ast::SourceFile(it) => sema.to_def(&it).map(|def| (AttrsOwnerNode::new(it), def.attrs(sema.db))),\n+            ast::Fn(it) => sema.to_def(&it).map(|def| (AttrsOwnerNode::new(it), def.attrs(sema.db))),\n+            ast::Struct(it) => sema.to_def(&it).map(|def| (AttrsOwnerNode::new(it), def.attrs(sema.db))),\n+            ast::Union(it) => sema.to_def(&it).map(|def| (AttrsOwnerNode::new(it), def.attrs(sema.db))),\n+            ast::RecordField(it) => sema.to_def(&it).map(|def| (AttrsOwnerNode::new(it), def.attrs(sema.db))),\n+            ast::TupleField(it) => sema.to_def(&it).map(|def| (AttrsOwnerNode::new(it), def.attrs(sema.db))),\n+            ast::Enum(it) => sema.to_def(&it).map(|def| (AttrsOwnerNode::new(it), def.attrs(sema.db))),\n+            ast::Variant(it) => sema.to_def(&it).map(|def| (AttrsOwnerNode::new(it), def.attrs(sema.db))),\n+            ast::Trait(it) => sema.to_def(&it).map(|def| (AttrsOwnerNode::new(it), def.attrs(sema.db))),\n+            ast::Module(it) => sema.to_def(&it).map(|def| (AttrsOwnerNode::new(it), def.attrs(sema.db))),\n+            ast::Static(it) => sema.to_def(&it).map(|def| (AttrsOwnerNode::new(it), def.attrs(sema.db))),\n+            ast::Const(it) => sema.to_def(&it).map(|def| (AttrsOwnerNode::new(it), def.attrs(sema.db))),\n+            ast::TypeAlias(it) => sema.to_def(&it).map(|def| (AttrsOwnerNode::new(it), def.attrs(sema.db))),\n+            ast::Impl(it) => sema.to_def(&it).map(|def| (AttrsOwnerNode::new(it), def.attrs(sema.db))),\n+            ast::MacroRules(it) => sema.to_def(&it).map(|def| (AttrsOwnerNode::new(it), def.attrs(sema.db))),\n+            // ast::MacroDef(it) => sema.to_def(&it).map(|def| (Box::new(it) as _, def.attrs(sema.db))),\n+            // ast::Use(it) => sema.to_def(&it).map(|def| (Box::new(it) as _, def.attrs(sema.db))),\n+            _ => return None\n+        }\n+    }\n+}\n+\n /// Injection of syntax highlighting of doctests.\n-pub(super) fn doc_comment(hl: &mut Highlights, node: &SyntaxNode) {\n-    let doc_comments = node\n-        .children_with_tokens()\n-        .filter_map(|it| it.into_token().and_then(ast::Comment::cast))\n-        .filter(|it| it.kind().doc.is_some());\n+pub(super) fn doc_comment(hl: &mut Highlights, sema: &Semantics<RootDatabase>, node: &SyntaxNode) {\n+    let (owner, attributes) = match doc_attributes(sema, node) {\n+        Some(it) => it,\n+        None => return,\n+    };\n \n-    if !doc_comments.clone().any(|it| it.text().contains(RUSTDOC_FENCE)) {\n+    if attributes.docs().map_or(true, |docs| !String::from(docs).contains(RUSTDOC_FENCE)) {\n         return;\n     }\n+    let attrs_source_map = attributes.source_map(&owner);\n \n     let mut inj = Injector::default();\n     inj.add_unmapped(\"fn doctest() {\\n\");\n@@ -101,12 +164,33 @@ pub(super) fn doc_comment(hl: &mut Highlights, node: &SyntaxNode) {\n     // Replace the original, line-spanning comment ranges by new, only comment-prefix\n     // spanning comment ranges.\n     let mut new_comments = Vec::new();\n-    for comment in doc_comments {\n-        match comment.text().find(RUSTDOC_FENCE) {\n+    let mut string;\n+    for attr in attributes.by_key(\"doc\").attrs() {\n+        let src = attrs_source_map.source_of(&attr);\n+        let (line, range, prefix) = match &src {\n+            Either::Left(it) => {\n+                string = match find_doc_string_in_attr(attr, it) {\n+                    Some(it) => it,\n+                    None => continue,\n+                };\n+                let text_range = string.syntax().text_range();\n+                let text_range = TextRange::new(\n+                    text_range.start() + TextSize::from(1),\n+                    text_range.end() - TextSize::from(1),\n+                );\n+                let text = string.text();\n+                (&text[1..text.len() - 1], text_range, \"\")\n+            }\n+            Either::Right(comment) => {\n+                (comment.text(), comment.syntax().text_range(), comment.prefix())\n+            }\n+        };\n+\n+        match line.find(RUSTDOC_FENCE) {\n             Some(idx) => {\n                 is_codeblock = !is_codeblock;\n                 // Check whether code is rust by inspecting fence guards\n-                let guards = &comment.text()[idx + RUSTDOC_FENCE.len()..];\n+                let guards = &line[idx + RUSTDOC_FENCE.len()..];\n                 let is_rust =\n                     guards.split(',').all(|sub| RUSTDOC_FENCE_TOKENS.contains(&sub.trim()));\n                 is_doctest = is_codeblock && is_rust;\n@@ -116,10 +200,7 @@ pub(super) fn doc_comment(hl: &mut Highlights, node: &SyntaxNode) {\n             None => (),\n         }\n \n-        let line: &str = comment.text();\n-        let range = comment.syntax().text_range();\n-\n-        let mut pos = TextSize::of(comment.prefix());\n+        let mut pos = TextSize::of(prefix);\n         // whitespace after comment is ignored\n         if let Some(ws) = line[pos.into()..].chars().next().filter(|c| c.is_whitespace()) {\n             pos += TextSize::of(ws);\n@@ -156,3 +237,27 @@ pub(super) fn doc_comment(hl: &mut Highlights, node: &SyntaxNode) {\n         });\n     }\n }\n+\n+fn find_doc_string_in_attr(attr: &hir::Attr, it: &ast::Attr) -> Option<ast::String> {\n+    match it.literal() {\n+        // #[doc = lit]\n+        Some(lit) => match lit.kind() {\n+            ast::LiteralKind::String(it) => Some(it),\n+            _ => None,\n+        },\n+        // #[cfg_attr(..., doc = \"\", ...)]\n+        None => {\n+            // We gotta hunt the string token manually here\n+            let text = attr.string_value()?;\n+            // FIXME: We just pick the first string literal that has the same text as the doc attribute\n+            // This means technically we might highlight the wrong one\n+            it.syntax()\n+                .descendants_with_tokens()\n+                .filter_map(NodeOrToken::into_token)\n+                .filter_map(ast::String::cast)\n+                .find(|string| {\n+                    string.text().get(1..string.text().len() - 1).map_or(false, |it| it == text)\n+                })\n+        }\n+    }\n+}"}, {"sha": "45817faf960d7ef2773a58fcd70ab101520b13f9", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_doctest.html", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0fbfab3b45af7a02b1224bca4a53e9b8f6ec049e/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html", "raw_url": "https://github.com/rust-lang/rust/raw/0fbfab3b45af7a02b1224bca4a53e9b8f6ec049e/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html?ref=0fbfab3b45af7a02b1224bca4a53e9b8f6ec049e", "patch": "@@ -105,4 +105,20 @@\n     <span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>expr<span class=\"colon\">:</span>expr<span class=\"parenthesis\">)</span> <span class=\"operator\">=</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span>\n         <span class=\"punctuation\">$</span>expr\n     <span class=\"brace\">}</span>\n-<span class=\"brace\">}</span></code></pre>\n\\ No newline at end of file\n+<span class=\"brace\">}</span>\n+\n+<span class=\"comment documentation\">/// ```rust</span>\n+<span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"none injected\"> </span><span class=\"punctuation injected\">_</span><span class=\"none injected\"> </span><span class=\"operator injected\">=</span><span class=\"none injected\"> </span><span class=\"function injected\">example</span><span class=\"parenthesis injected\">(</span><span class=\"operator injected\">&</span><span class=\"bracket injected\">[</span><span class=\"numeric_literal injected\">1</span><span class=\"comma injected\">,</span><span class=\"none injected\"> </span><span class=\"numeric_literal injected\">2</span><span class=\"comma injected\">,</span><span class=\"none injected\"> </span><span class=\"numeric_literal injected\">3</span><span class=\"bracket injected\">]</span><span class=\"parenthesis injected\">)</span><span class=\"semicolon injected\">;</span>\n+<span class=\"comment documentation\">/// ```</span>\n+<span class=\"comment documentation\">///</span>\n+<span class=\"comment documentation\">/// ```</span>\n+<span class=\"comment documentation\">/// </span><span class=\"keyword control injected\">loop</span><span class=\"none injected\"> </span><span class=\"brace injected\">{</span><span class=\"brace injected\">}</span>\n+<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"function attribute\">cfg_attr</span><span class=\"parenthesis attribute\">(</span><span class=\"attribute attribute\">not</span><span class=\"parenthesis attribute\">(</span><span class=\"attribute attribute\">feature </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"false\"</span><span class=\"parenthesis attribute\">)</span><span class=\"comma attribute\">,</span><span class=\"attribute attribute\"> doc </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"</span><span class=\"keyword control injected\">loop</span><span class=\"none injected\"> </span><span class=\"brace injected\">{</span><span class=\"brace injected\">}</span><span class=\"string_literal attribute\">\"</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute attribute\">]</span>\n+<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"function attribute\">doc</span><span class=\"attribute attribute\"> </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"</span><span class=\"keyword control injected\">loop</span><span class=\"none injected\"> </span><span class=\"brace injected\">{</span><span class=\"brace injected\">}</span><span class=\"string_literal attribute\">\"</span><span class=\"attribute attribute\">]</span>\n+<span class=\"comment documentation\">/// ```</span>\n+<span class=\"comment documentation\">///</span>\n+<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"function attribute\">cfg_attr</span><span class=\"parenthesis attribute\">(</span><span class=\"attribute attribute\">feature </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"alloc\"</span><span class=\"comma attribute\">,</span><span class=\"attribute attribute\"> doc </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"```rust\"</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute attribute\">]</span>\n+<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"function attribute\">cfg_attr</span><span class=\"parenthesis attribute\">(</span><span class=\"attribute attribute\">not</span><span class=\"parenthesis attribute\">(</span><span class=\"attribute attribute\">feature </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"alloc\"</span><span class=\"parenthesis attribute\">)</span><span class=\"comma attribute\">,</span><span class=\"attribute attribute\"> doc </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"```ignore\"</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute attribute\">]</span>\n+<span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"none injected\"> </span><span class=\"punctuation injected\">_</span><span class=\"none injected\"> </span><span class=\"operator injected\">=</span><span class=\"none injected\"> </span><span class=\"function injected\">example</span><span class=\"parenthesis injected\">(</span><span class=\"operator injected\">&</span><span class=\"none injected\">alloc::</span><span class=\"macro injected\">vec!</span><span class=\"bracket injected\">[</span><span class=\"numeric_literal injected\">1</span><span class=\"comma injected\">,</span><span class=\"none injected\"> </span><span class=\"numeric_literal injected\">2</span><span class=\"comma injected\">,</span><span class=\"none injected\"> </span><span class=\"numeric_literal injected\">3</span><span class=\"bracket injected\">]</span><span class=\"parenthesis injected\">)</span><span class=\"semicolon injected\">;</span>\n+<span class=\"comment documentation\">/// ```</span>\n+<span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function declaration\">mix_and_match</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span></code></pre>\n\\ No newline at end of file"}, {"sha": "a5ef2d29be1b837c5c4928a7b4cc3771a4cb5fa3", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0fbfab3b45af7a02b1224bca4a53e9b8f6ec049e/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fbfab3b45af7a02b1224bca4a53e9b8f6ec049e/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=0fbfab3b45af7a02b1224bca4a53e9b8f6ec049e", "patch": "@@ -541,6 +541,22 @@ macro_rules! noop {\n         $expr\n     }\n }\n+\n+/// ```rust\n+/// let _ = example(&[1, 2, 3]);\n+/// ```\n+///\n+/// ```\n+/// loop {}\n+#[cfg_attr(not(feature = \"false\"), doc = \"loop {}\")]\n+#[doc = \"loop {}\"]\n+/// ```\n+///\n+#[cfg_attr(feature = \"alloc\", doc = \"```rust\")]\n+#[cfg_attr(not(feature = \"alloc\"), doc = \"```ignore\")]\n+/// let _ = example(&alloc::vec![1, 2, 3]);\n+/// ```\n+pub fn mix_and_match() {}\n \"#\n         .trim(),\n         expect_file![\"./test_data/highlight_doctest.html\"],"}, {"sha": "96d4cc9971874021ed3a8adb923cee4f493e0b85", "filename": "crates/syntax/src/ast/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fbfab3b45af7a02b1224bca4a53e9b8f6ec049e/crates%2Fsyntax%2Fsrc%2Fast%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fbfab3b45af7a02b1224bca4a53e9b8f6ec049e/crates%2Fsyntax%2Fsrc%2Fast%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Ftraits.rs?ref=0fbfab3b45af7a02b1224bca4a53e9b8f6ec049e", "patch": "@@ -72,7 +72,7 @@ pub trait AttrsOwner: AstNode {\n     }\n }\n \n-pub trait DocCommentsOwner: AstNode {\n+pub trait DocCommentsOwner: AttrsOwner {\n     fn doc_comments(&self) -> CommentIter {\n         CommentIter { iter: self.syntax().children_with_tokens() }\n     }"}]}