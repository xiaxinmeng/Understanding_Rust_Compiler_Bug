{"sha": "00ccd6ba4272c487c62b06544219ee150307482a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwY2NkNmJhNDI3MmM0ODdjNjJiMDY1NDQyMTllZTE1MDMwNzQ4MmE=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2011-08-04T23:22:00Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-09T22:53:26Z"}, "message": "Remove support for the ivec T[] syntax.", "tree": {"sha": "1aaa4ea4d9040e2f357defc3c99359689281468b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1aaa4ea4d9040e2f357defc3c99359689281468b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00ccd6ba4272c487c62b06544219ee150307482a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00ccd6ba4272c487c62b06544219ee150307482a", "html_url": "https://github.com/rust-lang/rust/commit/00ccd6ba4272c487c62b06544219ee150307482a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00ccd6ba4272c487c62b06544219ee150307482a/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "491ed7f12c2c9adf186599ac5294cb24825ad36b", "url": "https://api.github.com/repos/rust-lang/rust/commits/491ed7f12c2c9adf186599ac5294cb24825ad36b", "html_url": "https://github.com/rust-lang/rust/commit/491ed7f12c2c9adf186599ac5294cb24825ad36b"}], "stats": {"total": 51, "additions": 16, "deletions": 35}, "files": [{"sha": "b23388f290d9b8b2dc761d4dc2c0a2af13b1c003", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00ccd6ba4272c487c62b06544219ee150307482a/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00ccd6ba4272c487c62b06544219ee150307482a/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=00ccd6ba4272c487c62b06544219ee150307482a", "patch": "@@ -6886,7 +6886,7 @@ fn vtbl_mthd_lteq(a: &vtbl_mthd, b: &vtbl_mthd) -> bool {\n // Used by create_vtbl to filter a list of methods to remove the ones that we\n // don't need forwarding slots for.\n fn filtering_fn(cx: @local_ctxt, m: &vtbl_mthd,\n-                addtl_meths: (@ast::method)[]) ->\n+                addtl_meths: [@ast::method]) ->\n     option::t[vtbl_mthd] {\n \n     // Since m is a fwding_mthd, and we're checking to see if it's in"}, {"sha": "2033e181fe7bc44688cdb600bbf11e5c98ec634d", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 15, "deletions": 34, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/00ccd6ba4272c487c62b06544219ee150307482a/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00ccd6ba4272c487c62b06544219ee150307482a/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=00ccd6ba4272c487c62b06544219ee150307482a", "patch": "@@ -429,42 +429,23 @@ fn parse_ty_postfix(orig_t: ast::ty_, p: &parser) -> @ast::ty {\n         // This is explicit type parameter instantiation.\n         p.bump();\n \n-        let mut;\n-        if eat_word(p, \"mutable\") {\n-            if p.peek() == token::QUES {\n-                p.bump();\n-                mut = ast::maybe_mut;\n-            } else { mut = ast::mut; }\n-        } else { mut = ast::imm; }\n-\n-        if mut == ast::imm && p.peek() != token::RBRACKET {\n-            // This is explicit type parameter instantiation.\n-            let seq =\n-                parse_seq_to_end(token::RBRACKET, some(token::COMMA),\n-                                 parse_ty, p);\n-\n+        let seq =\n+            parse_seq_to_end(token::RBRACKET, some(token::COMMA),\n+                             parse_ty, p);\n \n-            alt orig_t {\n-              ast::ty_path(pth, ann) {\n-                let hi = p.get_hi_pos();\n-                ret @spanned(lo, hi,\n-                             ast::ty_path(spanned(lo, hi,\n-                                                  {global: pth.node.global,\n-                                                   idents: pth.node.idents,\n-                                                   types: seq}), ann));\n-              }\n-              _ {\n-                p.fatal(\"type parameter instantiation only allowed for \" +\n-                            \"paths\");\n-              }\n-            }\n+        alt orig_t {\n+          ast::ty_path(pth, ann) {\n+            let hi = p.get_hi_pos();\n+            ret @spanned(lo, hi,\n+                         ast::ty_path(spanned(lo, hi,\n+                                              {global: pth.node.global,\n+                                               idents: pth.node.idents,\n+                                               types: seq}), ann));\n+          }\n+          _ {\n+            p.fatal(\"type parameter instantiation only allowed for paths\");\n+          }\n         }\n-\n-        expect(p, token::RBRACKET);\n-        let hi = p.get_hi_pos();\n-        // FIXME: spans are probably wrong\n-        let t = ast::ty_ivec({ty: @spanned(lo, hi, orig_t), mut: mut});\n-        ret parse_ty_postfix(t, p);\n     }\n     ret @spanned(lo, p.get_lo_pos(), orig_t);\n }"}]}