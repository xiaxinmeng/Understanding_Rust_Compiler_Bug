{"sha": "ebde8cfa618756ee615cb543c832b53653ce2977", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViZGU4Y2ZhNjE4NzU2ZWU2MTVjYjU0M2M4MzJiNTM2NTNjZTI5Nzc=", "commit": {"author": {"name": "John Schmidt", "email": "john.schmidt.h@gmail.com", "date": "2014-06-15T17:04:55Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-06-17T01:16:01Z"}, "message": "Change prints: @T -> Gc<T> , ~T -> Box<T>\n\nFixes #14915", "tree": {"sha": "8239a99107ff091870c0a197dfecd0d8eacf9848", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8239a99107ff091870c0a197dfecd0d8eacf9848"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ebde8cfa618756ee615cb543c832b53653ce2977", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ebde8cfa618756ee615cb543c832b53653ce2977", "html_url": "https://github.com/rust-lang/rust/commit/ebde8cfa618756ee615cb543c832b53653ce2977", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ebde8cfa618756ee615cb543c832b53653ce2977/comments", "author": {"login": "schmee", "id": 3405586, "node_id": "MDQ6VXNlcjM0MDU1ODY=", "avatar_url": "https://avatars.githubusercontent.com/u/3405586?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schmee", "html_url": "https://github.com/schmee", "followers_url": "https://api.github.com/users/schmee/followers", "following_url": "https://api.github.com/users/schmee/following{/other_user}", "gists_url": "https://api.github.com/users/schmee/gists{/gist_id}", "starred_url": "https://api.github.com/users/schmee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schmee/subscriptions", "organizations_url": "https://api.github.com/users/schmee/orgs", "repos_url": "https://api.github.com/users/schmee/repos", "events_url": "https://api.github.com/users/schmee/events{/privacy}", "received_events_url": "https://api.github.com/users/schmee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9945052e64737a21a7d9a6cb337bda1a4eed3e0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9945052e64737a21a7d9a6cb337bda1a4eed3e0a", "html_url": "https://github.com/rust-lang/rust/commit/9945052e64737a21a7d9a6cb337bda1a4eed3e0a"}], "stats": {"total": 35, "additions": 28, "deletions": 7}, "files": [{"sha": "ac8ca05f8d0162935091903d113a38967eefc4c9", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebde8cfa618756ee615cb543c832b53653ce2977/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebde8cfa618756ee615cb543c832b53653ce2977/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=ebde8cfa618756ee615cb543c832b53653ce2977", "patch": "@@ -351,8 +351,8 @@ pub fn ty_to_str(cx: &ctxt, typ: t) -> String {\n       ty_uint(t) => ast_util::uint_ty_to_str(t, None,\n                                              ast_util::AutoSuffix).to_string(),\n       ty_float(t) => ast_util::float_ty_to_str(t).to_string(),\n-      ty_box(typ) => format!(\"@{}\", ty_to_str(cx, typ)),\n-      ty_uniq(typ) => format!(\"~{}\", ty_to_str(cx, typ)),\n+      ty_box(typ) => format!(\"Gc<{}>\", ty_to_str(cx, typ)),\n+      ty_uniq(typ) => format!(\"Box<{}>\", ty_to_str(cx, typ)),\n       ty_ptr(ref tm) => format!(\"*{}\", mt_to_str(cx, tm)),\n       ty_rptr(r, ref tm) => {\n           let mut buf = region_ptr_to_str(cx, r);"}, {"sha": "dd928bfa9d4408afce8c4342c8db8afcd70f3311", "filename": "src/test/compile-fail/autoderef-full-lval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebde8cfa618756ee615cb543c832b53653ce2977/src%2Ftest%2Fcompile-fail%2Fautoderef-full-lval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebde8cfa618756ee615cb543c832b53653ce2977/src%2Ftest%2Fcompile-fail%2Fautoderef-full-lval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fautoderef-full-lval.rs?ref=ebde8cfa618756ee615cb543c832b53653ce2977", "patch": "@@ -26,13 +26,13 @@ struct fish {\n fn main() {\n     let a: clam = clam{x: box(GC) 1, y: box(GC) 2};\n     let b: clam = clam{x: box(GC) 10, y: box(GC) 20};\n-    let z: int = a.x + b.y; //~ ERROR binary operation `+` cannot be applied to type `@int`\n+    let z: int = a.x + b.y; //~ ERROR binary operation `+` cannot be applied to type `Gc<int>`\n     println!(\"{:?}\", z);\n     assert_eq!(z, 21);\n     let forty: fish = fish{a: box(GC) 40};\n     let two: fish = fish{a: box(GC) 2};\n     let answer: int = forty.a + two.a;\n-    //~^ ERROR binary operation `+` cannot be applied to type `@int`\n+    //~^ ERROR binary operation `+` cannot be applied to type `Gc<int>`\n     println!(\"{:?}\", answer);\n     assert_eq!(answer, 42);\n }"}, {"sha": "e24830907d3bcc06c982b6696c8f9fc5adf9e856", "filename": "src/test/compile-fail/issue-14915.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ebde8cfa618756ee615cb543c832b53653ce2977/src%2Ftest%2Fcompile-fail%2Fissue-14915.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebde8cfa618756ee615cb543c832b53653ce2977/src%2Ftest%2Fcompile-fail%2Fissue-14915.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14915.rs?ref=ebde8cfa618756ee615cb543c832b53653ce2977", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::gc::{GC,Gc};\n+\n+fn main() {\n+    let x: Box<int> = box 0;\n+    let y: Gc<int> = box (GC) 0;\n+\n+    println!(\"{}\", x + 1); //~ ERROR binary operation `+` cannot be applied to type `Box<int>`\n+    //~^ ERROR cannot determine a type for this bounded type parameter: unconstrained type\n+    println!(\"{}\", y + 1);\n+    //~^ ERROR binary operation `+` cannot be applied to type `Gc<int>`\n+}"}, {"sha": "ea332c1e252338078e6669435cc3618adb97ffa3", "filename": "src/test/compile-fail/issue-7013.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebde8cfa618756ee615cb543c832b53653ce2977/src%2Ftest%2Fcompile-fail%2Fissue-7013.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebde8cfa618756ee615cb543c832b53653ce2977/src%2Ftest%2Fcompile-fail%2Fissue-7013.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7013.rs?ref=ebde8cfa618756ee615cb543c832b53653ce2977", "patch": "@@ -32,7 +32,7 @@ struct A {\n \n fn main() {\n     let a = A {v: box B{v: None} as Box<Foo+Send>};\n-    //~^ ERROR cannot pack type `~B`, which does not fulfill `Send`\n+    //~^ ERROR cannot pack type `Box<B>`, which does not fulfill `Send`\n     let v = Rc::new(RefCell::new(a));\n     let w = v.clone();\n     let b = &*v;"}, {"sha": "b644d98926cdd56ceed725aa07f52545d985244b", "filename": "src/test/compile-fail/issue-7061.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebde8cfa618756ee615cb543c832b53653ce2977/src%2Ftest%2Fcompile-fail%2Fissue-7061.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebde8cfa618756ee615cb543c832b53653ce2977/src%2Ftest%2Fcompile-fail%2Fissue-7061.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7061.rs?ref=ebde8cfa618756ee615cb543c832b53653ce2977", "patch": "@@ -16,7 +16,7 @@ struct BarStruct;\n \n impl<'a> BarStruct {\n     fn foo(&'a mut self) -> Gc<BarStruct> { self }\n-    //~^ ERROR: error: mismatched types: expected `@BarStruct` but found `&'a mut BarStruct\n+    //~^ ERROR: error: mismatched types: expected `Gc<BarStruct>` but found `&'a mut BarStruct\n }\n \n fn main() {}"}, {"sha": "ea2e6feba5757e4e5dd66031c2ed3007a3d5ea07", "filename": "src/test/compile-fail/regions-infer-paramd-indirect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebde8cfa618756ee615cb543c832b53653ce2977/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebde8cfa618756ee615cb543c832b53653ce2977/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-indirect.rs?ref=ebde8cfa618756ee615cb543c832b53653ce2977", "patch": "@@ -33,7 +33,7 @@ impl<'a> set_f<'a> for c<'a> {\n     }\n \n     fn set_f_bad(&self, b: Gc<b>) {\n-        self.f = b; //~ ERROR mismatched types: expected `@@&'a int` but found `@@&int`\n+        self.f = b; //~ ERROR mismatched types: expected `Gc<Gc<&'a int>>` but found `Gc<Gc<&int>>`\n         //~^ ERROR cannot infer\n     }\n }"}]}