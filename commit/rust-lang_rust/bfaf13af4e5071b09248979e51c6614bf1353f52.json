{"sha": "bfaf13af4e5071b09248979e51c6614bf1353f52", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmYWYxM2FmNGU1MDcxYjA5MjQ4OTc5ZTUxYzY2MTRiZjEzNTNmNTI=", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-03-15T23:05:45Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-08-26T09:00:30Z"}, "message": "make unevaluated const substs optional", "tree": {"sha": "930c166e6495f44e0c5e1adb9d962c094d7c1b41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/930c166e6495f44e0c5e1adb9d962c094d7c1b41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bfaf13af4e5071b09248979e51c6614bf1353f52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bfaf13af4e5071b09248979e51c6614bf1353f52", "html_url": "https://github.com/rust-lang/rust/commit/bfaf13af4e5071b09248979e51c6614bf1353f52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bfaf13af4e5071b09248979e51c6614bf1353f52/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4b606fd1703fb54bf75f064482312a67beb4a7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4b606fd1703fb54bf75f064482312a67beb4a7b", "html_url": "https://github.com/rust-lang/rust/commit/f4b606fd1703fb54bf75f064482312a67beb4a7b"}], "stats": {"total": 422, "additions": 234, "deletions": 188}, "files": [{"sha": "424a0d742d12b56c29b4b40339faedb7d6b204dd", "filename": "compiler/rustc_codegen_cranelift/src/constant.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs?ref=bfaf13af4e5071b09248979e51c6614bf1353f52", "patch": "@@ -129,13 +129,13 @@ pub(crate) fn codegen_constant<'tcx>(\n     };\n     let const_val = match const_.val {\n         ConstKind::Value(const_val) => const_val,\n-        ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted })\n-            if fx.tcx.is_static(def.did) =>\n+        ConstKind::Unevaluated(uv)\n+            if fx.tcx.is_static(uv.def.did) =>\n         {\n-            assert!(substs.is_empty());\n-            assert!(promoted.is_none());\n+            assert!(uv.substs(fx.tcx).is_empty());\n+            assert!(uv.promoted.is_none());\n \n-            return codegen_static_ref(fx, def.did, fx.layout_of(const_.ty)).to_cvalue(fx);\n+            return codegen_static_ref(fx, uv.def.did, fx.layout_of(const_.ty)).to_cvalue(fx);\n         }\n         ConstKind::Unevaluated(unevaluated) => {\n             match fx.tcx.const_eval_resolve(ParamEnv::reveal_all(), unevaluated, None) {"}, {"sha": "4fb3d4bdfe1cb31bd412b7dfcf9844e172c5d05f", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=bfaf13af4e5071b09248979e51c6614bf1353f52", "patch": "@@ -742,10 +742,9 @@ impl TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n                     }\n                 }\n             }\n-            ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted })\n-                if self.tcx().lazy_normalization() =>\n-            {\n-                assert_eq!(promoted, None);\n+            ty::ConstKind::Unevaluated(uv) if self.tcx().lazy_normalization() => {\n+                assert_eq!(uv.promoted, None);\n+                let substs = uv.substs(self.tcx());\n                 let substs = self.relate_with_variance(\n                     ty::Variance::Invariant,\n                     ty::VarianceDiagInfo::default(),\n@@ -754,7 +753,7 @@ impl TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n                 )?;\n                 Ok(self.tcx().mk_const(ty::Const {\n                     ty: c.ty,\n-                    val: ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }),\n+                    val: ty::ConstKind::Unevaluated(ty::Unevaluated::new(uv.def, substs)),\n                 }))\n             }\n             _ => relate::super_relate_consts(self, c, c),\n@@ -976,10 +975,9 @@ impl TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {\n                     }\n                 }\n             }\n-            ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted })\n-                if self.tcx().lazy_normalization() =>\n-            {\n-                assert_eq!(promoted, None);\n+            ty::ConstKind::Unevaluated(uv) if self.tcx().lazy_normalization() => {\n+                assert_eq!(uv.promoted, None);\n+                let substs = uv.substs(self.tcx());\n                 let substs = self.relate_with_variance(\n                     ty::Variance::Invariant,\n                     ty::VarianceDiagInfo::default(),\n@@ -988,7 +986,7 @@ impl TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {\n                 )?;\n                 Ok(self.tcx().mk_const(ty::Const {\n                     ty: c.ty,\n-                    val: ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }),\n+                    val: ty::ConstKind::Unevaluated(ty::Unevaluated::new(uv.def, substs)),\n                 }))\n             }\n             _ => relate::super_relate_consts(self, c, c),"}, {"sha": "299dcf5f17a872150da795d97e390630a2206df3", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=bfaf13af4e5071b09248979e51c6614bf1353f52", "patch": "@@ -1537,8 +1537,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         }\n \n         impl<'tcx> ty::fold::TypeVisitor<'tcx> for OpaqueTypesVisitor<'tcx> {\n-            fn tcx_for_anon_const_substs<'a>(&'a self) -> TyCtxt<'tcx> {\n-                self.tcx\n+            fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n+                Some(self.tcx)\n             }\n \n             fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {"}, {"sha": "81059fbcb10511265061f17010f237c9bdbf9229", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=bfaf13af4e5071b09248979e51c6614bf1353f52", "patch": "@@ -479,8 +479,10 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n pub(super) struct TraitObjectVisitor(pub(super) FxHashSet<DefId>);\n \n impl<'tcx> TypeVisitor<'tcx> for TraitObjectVisitor {\n-    fn tcx_for_anon_const_substs<'a>(&'a self) -> TyCtxt<'tcx> {\n-        bug!(\"tcx_for_anon_const_substs called for TraitObjectVisitor\");\n+    fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n+        // The default anon const substs cannot include\n+        // trait objects, so we don't have to bother looking.\n+        None\n     }\n \n     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {"}, {"sha": "155abf4ef83d5e1ec983ece808591652dfb1c911", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=bfaf13af4e5071b09248979e51c6614bf1353f52", "patch": "@@ -679,7 +679,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         b: ty::Unevaluated<'tcx>,\n     ) -> bool {\n         let canonical = self.canonicalize_query(\n-            ((a.def, a.substs), (b.def, b.substs)),\n+            ((a.def, a.substs(self.tcx)), (b.def, b.substs(self.tcx))),\n             &mut OriginalQueryValues::default(),\n         );\n         debug!(\"canonical consts: {:?}\", &canonical.value);\n@@ -1592,16 +1592,16 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     pub fn const_eval_resolve(\n         &self,\n         param_env: ty::ParamEnv<'tcx>,\n-        ty::Unevaluated { def, substs, promoted }: ty::Unevaluated<'tcx>,\n+        unevaluated: ty::Unevaluated<'tcx>,\n         span: Option<Span>,\n     ) -> EvalToConstValueResult<'tcx> {\n         let mut original_values = OriginalQueryValues::default();\n-        let canonical = self.canonicalize_query((param_env, substs), &mut original_values);\n+        let canonical = self.canonicalize_query((param_env, unevaluated), &mut original_values);\n \n-        let (param_env, substs) = canonical.value;\n+        let (param_env, unevaluated) = canonical.value;\n         // The return value is the evaluated value which doesn't contain any reference to inference\n         // variables, thus we don't need to substitute back the original values.\n-        self.tcx.const_eval_resolve(param_env, ty::Unevaluated { def, substs, promoted }, span)\n+        self.tcx.const_eval_resolve(param_env, unevaluated, span)\n     }\n \n     /// If `typ` is a type variable of some kind, resolve it one level"}, {"sha": "c211d8e94a68b1b05b2ba0f8bedb276c57d0f2ae", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=bfaf13af4e5071b09248979e51c6614bf1353f52", "patch": "@@ -766,8 +766,8 @@ struct ScopeInstantiator<'me, 'tcx> {\n }\n \n impl<'me, 'tcx> TypeVisitor<'tcx> for ScopeInstantiator<'me, 'tcx> {\n-    fn tcx_for_anon_const_substs<'a>(&'a self) -> TyCtxt<'tcx> {\n-        self.tcx\n+    fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n+        Some(self.tcx)\n     }\n \n     fn visit_binder<T: TypeFoldable<'tcx>>("}, {"sha": "4b08c2eb9c19eee7d3bf9cc9327553a17d82518c", "filename": "compiler/rustc_infer/src/infer/resolve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs?ref=bfaf13af4e5071b09248979e51c6614bf1353f52", "patch": "@@ -127,8 +127,8 @@ impl<'a, 'tcx> UnresolvedTypeFinder<'a, 'tcx> {\n impl<'a, 'tcx> TypeVisitor<'tcx> for UnresolvedTypeFinder<'a, 'tcx> {\n     type BreakTy = (Ty<'tcx>, Option<Span>);\n \n-    fn tcx_for_anon_const_substs(&self) -> TyCtxt<'tcx> {\n-        self.infcx.tcx\n+    fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n+        Some(self.infcx.tcx)\n     }\n \n     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {"}, {"sha": "5d25578163976b75f6e2abcd0043a6ef2cb72f31", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=bfaf13af4e5071b09248979e51c6614bf1353f52", "patch": "@@ -1160,8 +1160,8 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n \n         impl<'a, 'tcx> ty::fold::TypeVisitor<'tcx> for ProhibitOpaqueTypes<'a, 'tcx> {\n             type BreakTy = Ty<'tcx>;\n-            fn tcx_for_anon_const_substs(&self) -> TyCtxt<'tcx> {\n-                self.cx.tcx\n+            fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n+                Some(self.cx.tcx)\n             }\n \n             fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {"}, {"sha": "c63613ae3af29b097ea4a562f0c9bd5505869746", "filename": "compiler/rustc_middle/src/mir/interpret/queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs?ref=bfaf13af4e5071b09248979e51c6614bf1353f52", "patch": "@@ -38,7 +38,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         ct: ty::Unevaluated<'tcx>,\n         span: Option<Span>,\n     ) -> EvalToConstValueResult<'tcx> {\n-        match ty::Instance::resolve_opt_const_arg(self, param_env, ct.def, ct.substs) {\n+        match ty::Instance::resolve_opt_const_arg(self, param_env, ct.def, ct.substs(self)) {\n             Ok(Some(instance)) => {\n                 let cid = GlobalId { instance, promoted: ct.promoted };\n                 self.const_eval_global_id(param_env, cid, span)"}, {"sha": "737b1108f50a6aa6899de112905119cc5ad1e5c4", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=bfaf13af4e5071b09248979e51c6614bf1353f52", "patch": "@@ -114,6 +114,10 @@ rustc_queries! {\n         desc { |tcx| \"compute const default for a given parameter `{}`\", tcx.def_path_str(param)  }\n     }\n \n+    query default_anon_const_substs(key: DefId) -> SubstsRef<'tcx> {\n+        desc { |tcx| \"computing the default generic arguments for `{}`\", tcx.def_path_str(key) }\n+    }\n+\n     /// Records the type of every item.\n     query type_of(key: DefId) -> Ty<'tcx> {\n         desc { |tcx| \"computing type of `{}`\", tcx.def_path_str(key) }"}, {"sha": "869b2ab9dbcbc5a02495d8b515f6963ad1f10e6c", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=bfaf13af4e5071b09248979e51c6614bf1353f52", "patch": "@@ -1,6 +1,5 @@\n use crate::mir::interpret::ConstValue;\n use crate::mir::interpret::{LitToConstInput, Scalar};\n-use crate::ty::subst::InternalSubsts;\n use crate::ty::{self, Ty, TyCtxt};\n use crate::ty::{ParamEnv, ParamEnvAnd};\n use rustc_errors::ErrorReported;\n@@ -100,7 +99,7 @@ impl<'tcx> Const<'tcx> {\n             }\n             _ => ty::ConstKind::Unevaluated(ty::Unevaluated {\n                 def: def.to_global(),\n-                substs: InternalSubsts::identity_for_item(tcx, def.did.to_def_id()),\n+                substs_: None,\n                 promoted: None,\n             }),\n         };"}, {"sha": "ab2c57ac605b79f0abdd306c82b952cb7319c2e9", "filename": "compiler/rustc_middle/src/ty/consts/kind.rs", "status": "modified", "additions": 27, "deletions": 11, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs?ref=bfaf13af4e5071b09248979e51c6614bf1353f52", "patch": "@@ -16,10 +16,23 @@ use super::ScalarInt;\n #[derive(Hash, HashStable)]\n pub struct Unevaluated<'tcx> {\n     pub def: ty::WithOptConstParam<DefId>,\n-    pub substs: SubstsRef<'tcx>,\n+    pub substs_: Option<SubstsRef<'tcx>>,\n     pub promoted: Option<Promoted>,\n }\n \n+impl<'tcx> Unevaluated<'tcx> {\n+    pub fn new(def: ty::WithOptConstParam<DefId>, substs: SubstsRef<'tcx>) -> Unevaluated<'tcx> {\n+        Unevaluated { def, substs_: Some(substs), promoted: None }\n+    }\n+\n+    pub fn substs(self, tcx: TyCtxt<'tcx>) -> SubstsRef<'tcx> {\n+        self.substs_.unwrap_or_else(|| {\n+            debug_assert_eq!(self.promoted, None);\n+            tcx.default_anon_const_substs(self.def.did)\n+        })\n+    }\n+}\n+\n /// Represents a constant in Rust.\n #[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, TyEncodable, TyDecodable)]\n #[derive(Hash, HashStable)]\n@@ -109,7 +122,7 @@ impl<'tcx> ConstKind<'tcx> {\n         tcx: TyCtxt<'tcx>,\n         param_env: ParamEnv<'tcx>,\n     ) -> Option<Result<ConstValue<'tcx>, ErrorReported>> {\n-        if let ConstKind::Unevaluated(Unevaluated { def, substs, promoted }) = self {\n+        if let ConstKind::Unevaluated(unevaluated) = self {\n             use crate::mir::interpret::ErrorHandled;\n \n             // HACK(eddyb) this erases lifetimes even though `const_eval_resolve`\n@@ -118,29 +131,32 @@ impl<'tcx> ConstKind<'tcx> {\n             // Note that we erase regions *before* calling `with_reveal_all_normalized`,\n             // so that we don't try to invoke this query with\n             // any region variables.\n-            let param_env_and_substs = tcx\n+            let param_env_and = tcx\n                 .erase_regions(param_env)\n                 .with_reveal_all_normalized(tcx)\n-                .and(tcx.erase_regions(substs));\n+                .and(tcx.erase_regions(unevaluated));\n \n             // HACK(eddyb) when the query key would contain inference variables,\n             // attempt using identity substs and `ParamEnv` instead, that will succeed\n             // when the expression doesn't depend on any parameters.\n             // FIXME(eddyb, skinny121) pass `InferCtxt` into here when it's available, so that\n             // we can call `infcx.const_eval_resolve` which handles inference variables.\n-            let param_env_and_substs = if param_env_and_substs.needs_infer() {\n-                tcx.param_env(def.did).and(InternalSubsts::identity_for_item(tcx, def.did))\n+            let param_env_and = if param_env_and.needs_infer() {\n+                tcx.param_env(unevaluated.def.did).and(ty::Unevaluated {\n+                    def: unevaluated.def,\n+                    substs_: Some(InternalSubsts::identity_for_item(tcx, unevaluated.def.did)),\n+                    promoted: unevaluated.promoted,\n+                })\n             } else {\n-                param_env_and_substs\n+                param_env_and\n             };\n \n             // FIXME(eddyb) maybe the `const_eval_*` methods should take\n-            // `ty::ParamEnvAnd<SubstsRef>` instead of having them separate.\n-            let (param_env, substs) = param_env_and_substs.into_parts();\n+            // `ty::ParamEnvAnd` instead of having them separate.\n+            let (param_env, unevaluated) = param_env_and.into_parts();\n             // try to resolve e.g. associated constants to their definition on an impl, and then\n             // evaluate the const.\n-            match tcx.const_eval_resolve(param_env, ty::Unevaluated { def, substs, promoted }, None)\n-            {\n+            match tcx.const_eval_resolve(param_env, unevaluated, None) {\n                 // NOTE(eddyb) `val` contains no lifetimes/types/consts,\n                 // and we use the original type, so nothing from `substs`\n                 // (which may be identity substs, see above),"}, {"sha": "89cba4aab8365ee2d1334a1351eeedef30262cb1", "filename": "compiler/rustc_middle/src/ty/flags.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs?ref=bfaf13af4e5071b09248979e51c6614bf1353f52", "patch": "@@ -305,7 +305,8 @@ impl FlagComputation {\n     }\n \n     fn add_unevaluated_const(&mut self, ct: ty::Unevaluated<'tcx>) {\n-        self.add_substs(ct.substs);\n+        // TODO\n+        self.add_substs(ct.substs_.unwrap());\n         self.add_flags(TypeFlags::HAS_CT_PROJECTION);\n     }\n "}, {"sha": "6e70e8ddaed809e4c55d22dada1a510feb9b56e8", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 22, "deletions": 13, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=bfaf13af4e5071b09248979e51c6614bf1353f52", "patch": "@@ -192,9 +192,11 @@ pub trait TypeVisitor<'tcx>: Sized {\n     /// Supplies the `tcx` for an unevaluated anonymous constant in case its default substs\n     /// are not yet supplied.\n     ///\n-    /// Visitors which do not look into these substs may leave this unimplemented, so be\n-    /// careful when calling this method elsewhere.\n-    fn tcx_for_anon_const_substs<'a>(&'a self) -> TyCtxt<'tcx>;\n+    /// Visitors which do not look into these substs may return `None` here, in which case\n+    /// `super_visit_with` completely skips the default substs. Incorrectly returning\n+    /// `None` can very quickly lead to ICE or other critical bugs, so be careful and\n+    /// try to return an actual `tcx` if at all possible.\n+    fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>>;\n \n     fn visit_binder<T: TypeFoldable<'tcx>>(\n         &mut self,\n@@ -336,8 +338,8 @@ impl<'tcx> TyCtxt<'tcx> {\n         {\n             type BreakTy = ();\n \n-            fn tcx_for_anon_const_substs(&self) -> TyCtxt<'tcx> {\n-                self.tcx\n+            fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n+                Some(self.tcx)\n             }\n \n             fn visit_binder<T: TypeFoldable<'tcx>>(\n@@ -788,8 +790,9 @@ impl<'tcx> ValidateBoundVars<'tcx> {\n impl<'tcx> TypeVisitor<'tcx> for ValidateBoundVars<'tcx> {\n     type BreakTy = ();\n \n-    fn tcx_for_anon_const_substs(&self) -> TyCtxt<'tcx> {\n-        bug!(\"default anon const substs can't contain bound vars\");\n+    fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n+        // Anonymous constants do not contain bound vars in their substs by default.\n+        None\n     }\n \n     fn visit_binder<T: TypeFoldable<'tcx>>(\n@@ -1006,8 +1009,9 @@ struct HasEscapingVarsVisitor {\n impl<'tcx> TypeVisitor<'tcx> for HasEscapingVarsVisitor {\n     type BreakTy = FoundEscapingVars;\n \n-    fn tcx_for_anon_const_substs(&self) -> TyCtxt<'tcx> {\n-        bug!(\"tcx_for_anon_const_substs called for HasEscpaingVarsVisitor\");\n+    fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n+        // Anonymous constants do not contain bound vars in their substs by default.\n+        None\n     }\n \n     fn visit_binder<T: TypeFoldable<'tcx>>(\n@@ -1080,8 +1084,13 @@ struct HasTypeFlagsVisitor {\n \n impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n     type BreakTy = FoundFlags;\n-    fn tcx_for_anon_const_substs(&self) -> TyCtxt<'tcx> {\n-        bug!(\"tcx_for_anon_const_substs called for HasTypeFlagsVisitor\");\n+    fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n+        // TypeFlagsVisitor must not look into the default anon const substs\n+        // as that would cause cycle errors, but we do care about them for\n+        // some flags.\n+        //\n+        // We therefore have to be very careful here.\n+        None\n     }\n \n     #[inline]\n@@ -1164,8 +1173,8 @@ impl LateBoundRegionsCollector<'tcx> {\n }\n \n impl<'tcx> TypeVisitor<'tcx> for LateBoundRegionsCollector<'tcx> {\n-    fn tcx_for_anon_const_substs(&self) -> TyCtxt<'tcx> {\n-        self.tcx\n+    fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n+        Some(self.tcx)\n     }\n \n     fn visit_binder<T: TypeFoldable<'tcx>>("}, {"sha": "1322236309616744411b98c94b013b470f5fc0ce", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 21, "deletions": 22, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=bfaf13af4e5071b09248979e51c6614bf1353f52", "patch": "@@ -927,29 +927,28 @@ pub trait PrettyPrinter<'tcx>:\n         }\n \n         match ct.val {\n-            ty::ConstKind::Unevaluated(ty::Unevaluated {\n-                def,\n-                substs,\n-                promoted: Some(promoted),\n-            }) => {\n-                p!(print_value_path(def.did, substs));\n-                p!(write(\"::{:?}\", promoted));\n-            }\n-            ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted: None }) => {\n-                match self.tcx().def_kind(def.did) {\n-                    DefKind::Static | DefKind::Const | DefKind::AssocConst => {\n-                        p!(print_value_path(def.did, substs))\n-                    }\n-                    _ => {\n-                        if def.is_local() {\n-                            let span = self.tcx().def_span(def.did);\n-                            if let Ok(snip) = self.tcx().sess.source_map().span_to_snippet(span) {\n-                                p!(write(\"{}\", snip))\n+            ty::ConstKind::Unevaluated(uv) => {\n+                if let Some(promoted) = uv.promoted {\n+                    let substs = uv.substs_.unwrap();\n+                    p!(print_value_path(uv.def.did, substs));\n+                    p!(write(\"::{:?}\", promoted));\n+                } else {\n+                    let tcx = self.tcx();\n+                    match tcx.def_kind(uv.def.did) {\n+                        DefKind::Static | DefKind::Const | DefKind::AssocConst => {\n+                            p!(print_value_path(uv.def.did, uv.substs(tcx)))\n+                        }\n+                        _ => {\n+                            if uv.def.is_local() {\n+                                let span = tcx.def_span(uv.def.did);\n+                                if let Ok(snip) = tcx.sess.source_map().span_to_snippet(span) {\n+                                    p!(write(\"{}\", snip))\n+                                } else {\n+                                    print_underscore!()\n+                                }\n                             } else {\n                                 print_underscore!()\n                             }\n-                        } else {\n-                            print_underscore!()\n                         }\n                     }\n                 }\n@@ -2025,8 +2024,8 @@ impl<F: fmt::Write> FmtPrinter<'_, 'tcx, F> {\n         impl<'tcx> ty::fold::TypeVisitor<'tcx> for LateBoundRegionNameCollector<'_, 'tcx> {\n             type BreakTy = ();\n \n-            fn tcx_for_anon_const_substs(&self) -> TyCtxt<'tcx> {\n-                self.tcx\n+            fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n+                Some(self.tcx)\n             }\n \n             fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {"}, {"sha": "c978e1de38deaae01bcda95c7eedfe678cd42cbc", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=bfaf13af4e5071b09248979e51c6614bf1353f52", "patch": "@@ -579,7 +579,7 @@ pub fn super_relate_consts<R: TypeRelation<'tcx>>(\n         (ty::ConstKind::Unevaluated(au), ty::ConstKind::Unevaluated(bu))\n             if tcx.features().const_evaluatable_checked =>\n         {\n-            tcx.try_unify_abstract_consts(((au.def, au.substs), (bu.def, bu.substs)))\n+            tcx.try_unify_abstract_consts(((au.def, au.substs(tcx)), (bu.def, bu.substs(tcx))))\n         }\n \n         // While this is slightly incorrect, it shouldn't matter for `min_const_generics`\n@@ -591,13 +591,13 @@ pub fn super_relate_consts<R: TypeRelation<'tcx>>(\n             let substs = relation.relate_with_variance(\n                 ty::Variance::Invariant,\n                 ty::VarianceDiagInfo::default(),\n-                au.substs,\n-                bu.substs,\n+                au.substs(tcx),\n+                bu.substs(tcx),\n             )?;\n             return Ok(tcx.mk_const(ty::Const {\n                 val: ty::ConstKind::Unevaluated(ty::Unevaluated {\n                     def: au.def,\n-                    substs,\n+                    substs_: Some(substs),\n                     promoted: au.promoted,\n                 }),\n                 ty: a.ty,"}, {"sha": "fe7d46240cb87dab44acab7541d63fe53f66dd19", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=bfaf13af4e5071b09248979e51c6614bf1353f52", "patch": "@@ -1046,13 +1046,7 @@ impl<'tcx> TypeFoldable<'tcx> for ty::ConstKind<'tcx> {\n         match self {\n             ty::ConstKind::Infer(ic) => ty::ConstKind::Infer(ic.fold_with(folder)),\n             ty::ConstKind::Param(p) => ty::ConstKind::Param(p.fold_with(folder)),\n-            ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }) => {\n-                ty::ConstKind::Unevaluated(ty::Unevaluated {\n-                    def,\n-                    substs: substs.fold_with(folder),\n-                    promoted,\n-                })\n-            }\n+            ty::ConstKind::Unevaluated(uv) => ty::ConstKind::Unevaluated(uv.fold_with(folder)),\n             ty::ConstKind::Value(_)\n             | ty::ConstKind::Bound(..)\n             | ty::ConstKind::Placeholder(..)\n@@ -1064,7 +1058,7 @@ impl<'tcx> TypeFoldable<'tcx> for ty::ConstKind<'tcx> {\n         match *self {\n             ty::ConstKind::Infer(ic) => ic.visit_with(visitor),\n             ty::ConstKind::Param(p) => p.visit_with(visitor),\n-            ty::ConstKind::Unevaluated(ct) => ct.substs.visit_with(visitor),\n+            ty::ConstKind::Unevaluated(uv) => uv.visit_with(visitor),\n             ty::ConstKind::Value(_)\n             | ty::ConstKind::Bound(..)\n             | ty::ConstKind::Placeholder(_)\n@@ -1082,3 +1076,24 @@ impl<'tcx> TypeFoldable<'tcx> for InferConst<'tcx> {\n         ControlFlow::CONTINUE\n     }\n }\n+\n+impl<'tcx> TypeFoldable<'tcx> for ty::Unevaluated<'tcx> {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(self, folder: &mut F) -> Self {\n+        ty::Unevaluated {\n+            def: self.def,\n+            substs_: Some(self.substs(folder.tcx()).fold_with(folder)),\n+            promoted: self.promoted,\n+        }\n+    }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+        if let Some(tcx) = visitor.tcx_for_anon_const_substs() {\n+            self.substs(tcx).visit_with(visitor)\n+        } else if let Some(substs) = self.substs_ {\n+            substs.visit_with(visitor)\n+        } else {\n+            debug!(\"ignoring default substs of `{:?}`\", self.def);\n+            ControlFlow::CONTINUE\n+        }\n+    }\n+}"}, {"sha": "c9fc97f0aaf980a489d9e96ff3caf964b6ae5c0e", "filename": "compiler/rustc_middle/src/ty/walk.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs?ref=bfaf13af4e5071b09248979e51c6614bf1353f52", "patch": "@@ -196,7 +196,8 @@ fn push_inner<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent: GenericArg<'tcx>)\n                 | ty::ConstKind::Error(_) => {}\n \n                 ty::ConstKind::Unevaluated(ct) => {\n-                    stack.extend(ct.substs.iter().rev());\n+                    // TODO\n+                    stack.extend(ct.substs_.unwrap().iter().rev());\n                 }\n             }\n         }"}, {"sha": "639bcb8fa94efb7f3768665349a0508e5b703efe", "filename": "compiler/rustc_mir/src/borrow_check/type_check/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=bfaf13af4e5071b09248979e51c6614bf1353f52", "patch": "@@ -377,8 +377,8 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'tcx> {\n                 },\n                 _ => None,\n             };\n-            if let Some(ty::Unevaluated { def, substs, promoted }) = maybe_uneval {\n-                if let Some(promoted) = promoted {\n+            if let Some(uv) = maybe_uneval {\n+                if let Some(promoted) = uv.promoted {\n                     let check_err = |verifier: &mut TypeVerifier<'a, 'b, 'tcx>,\n                                      promoted: &Body<'tcx>,\n                                      ty,\n@@ -413,8 +413,8 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'tcx> {\n                         ConstraintCategory::Boring,\n                         self.cx.param_env.and(type_op::ascribe_user_type::AscribeUserType::new(\n                             constant.literal.ty(),\n-                            def.did,\n-                            UserSubsts { substs, user_self_ty: None },\n+                            uv.def.did,\n+                            UserSubsts { substs: uv.substs(self.tcx()), user_self_ty: None },\n                         )),\n                     ) {\n                         span_mirbug!("}, {"sha": "403dc1b4793d0b539d51e447ec3e47f10d9d4568", "filename": "compiler/rustc_mir/src/interpret/operand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs?ref=bfaf13af4e5071b09248979e51c6614bf1353f52", "patch": "@@ -555,9 +555,9 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         match val.val {\n             ty::ConstKind::Param(_) | ty::ConstKind::Bound(..) => throw_inval!(TooGeneric),\n             ty::ConstKind::Error(_) => throw_inval!(AlreadyReported(ErrorReported)),\n-            ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }) => {\n-                let instance = self.resolve(def, substs)?;\n-                Ok(self.eval_to_allocation(GlobalId { instance, promoted })?.into())\n+            ty::ConstKind::Unevaluated(uv) => {\n+                let instance = self.resolve(uv.def, uv.substs(*self.tcx))?;\n+                Ok(self.eval_to_allocation(GlobalId { instance, promoted: uv.promoted })?.into())\n             }\n             ty::ConstKind::Infer(..) | ty::ConstKind::Placeholder(..) => {\n                 span_bug!(self.cur_span(), \"const_to_op: Unexpected ConstKind {:?}\", val)"}, {"sha": "b9d6e002e2db1ddffe14e609f208a811185b1bd2", "filename": "compiler/rustc_mir/src/interpret/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Futil.rs?ref=bfaf13af4e5071b09248979e51c6614bf1353f52", "patch": "@@ -21,8 +21,8 @@ where\n     impl<'tcx> TypeVisitor<'tcx> for UsedParamsNeedSubstVisitor<'tcx> {\n         type BreakTy = FoundParam;\n \n-        fn tcx_for_anon_const_substs(&self) -> TyCtxt<'tcx> {\n-            self.tcx\n+        fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n+            Some(self.tcx)\n         }\n \n         fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {"}, {"sha": "b086053a0c10e0ac13071a2a9c0d12917748cd36", "filename": "compiler/rustc_mir/src/monomorphize/polymorphize.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpolymorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpolymorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpolymorphize.rs?ref=bfaf13af4e5071b09248979e51c6614bf1353f52", "patch": "@@ -283,8 +283,8 @@ impl<'a, 'tcx> Visitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> TypeVisitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n-    fn tcx_for_anon_const_substs(&self) -> TyCtxt<'tcx> {\n-        self.tcx\n+    fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n+        Some(self.tcx)\n     }\n     #[instrument(skip(self))]\n     fn visit_const(&mut self, c: &'tcx Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n@@ -298,7 +298,7 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n                 self.unused_parameters.clear(param.index);\n                 ControlFlow::CONTINUE\n             }\n-            ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs: _, promoted: Some(p)})\n+            ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs_: _, promoted: Some(p)})\n                 // Avoid considering `T` unused when constants are of the form:\n                 //   `<Self as Foo<T>>::foo::promoted[p]`\n                 if self.def_id == def.did && !self.tcx.generics_of(def.did).has_self =>\n@@ -309,10 +309,10 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n                 self.visit_body(&promoted[p]);\n                 ControlFlow::CONTINUE\n             }\n-            ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted: None })\n-                if self.tcx.def_kind(def.did) == DefKind::AnonConst =>\n+            ty::ConstKind::Unevaluated(uv)\n+                if self.tcx.def_kind(uv.def.did) == DefKind::AnonConst =>\n             {\n-                self.visit_child_body(def.did, substs);\n+                self.visit_child_body(uv.def.did, uv.substs(self.tcx));\n                 ControlFlow::CONTINUE\n             }\n             _ => c.super_visit_with(self),\n@@ -357,8 +357,8 @@ struct HasUsedGenericParams<'a, 'tcx> {\n impl<'a, 'tcx> TypeVisitor<'tcx> for HasUsedGenericParams<'a, 'tcx> {\n     type BreakTy = ();\n \n-    fn tcx_for_anon_const_substs(&self) -> TyCtxt<'tcx> {\n-        self.tcx\n+    fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n+        Some(self.tcx)\n     }\n \n     #[instrument(skip(self))]"}, {"sha": "413a9638eb37b172717d4473f48079215170cf72", "filename": "compiler/rustc_mir/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=bfaf13af4e5071b09248979e51c6614bf1353f52", "patch": "@@ -247,7 +247,7 @@ where\n \n     // Check the qualifs of the value of `const` items.\n     if let Some(ct) = constant.literal.const_for_ty() {\n-        if let ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs: _, promoted }) = ct.val {\n+        if let ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs_: _, promoted }) = ct.val {\n             assert!(promoted.is_none());\n             // Don't peek inside trait associated constants.\n             if cx.tcx.trait_of_item(def.did).is_none() {"}, {"sha": "98581f76821b21a981d7b617e717d56261724a35", "filename": "compiler/rustc_mir/src/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs?ref=bfaf13af4e5071b09248979e51c6614bf1353f52", "patch": "@@ -483,7 +483,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                             // Promoteds must lint and not error as the user didn't ask for them\n                             ConstKind::Unevaluated(ty::Unevaluated {\n                                 def: _,\n-                                substs: _,\n+                                substs_: _,\n                                 promoted: Some(_),\n                             }) => true,\n                             // Out of backwards compatibility we cannot report hard errors in unused"}, {"sha": "14c9b3b0d479f4aec9bebac718b0f7495ea691e0", "filename": "compiler/rustc_mir/src/transform/promote_consts.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=bfaf13af4e5071b09248979e51c6614bf1353f52", "patch": "@@ -859,13 +859,17 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                             ty,\n                             val: ty::ConstKind::Unevaluated(ty::Unevaluated {\n                                 def,\n-                                substs: InternalSubsts::for_item(tcx, def.did, |param, _| {\n-                                    if let ty::GenericParamDefKind::Lifetime = param.kind {\n-                                        tcx.lifetimes.re_erased.into()\n-                                    } else {\n-                                        tcx.mk_param_from_def(param)\n-                                    }\n-                                }),\n+                                substs_: Some(InternalSubsts::for_item(\n+                                    tcx,\n+                                    def.did,\n+                                    |param, _| {\n+                                        if let ty::GenericParamDefKind::Lifetime = param.kind {\n+                                            tcx.lifetimes.re_erased.into()\n+                                        } else {\n+                                            tcx.mk_param_from_def(param)\n+                                        }\n+                                    },\n+                                )),\n                                 promoted: Some(promoted_id),\n                             }),\n                         })"}, {"sha": "92591db668ce9b7a6f0e9b74ec0b8b48133f648c", "filename": "compiler/rustc_mir/src/util/pretty.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs?ref=bfaf13af4e5071b09248979e51c6614bf1353f52", "patch": "@@ -475,7 +475,7 @@ impl Visitor<'tcx> for ExtraComments<'tcx> {\n                 ty::ConstKind::Unevaluated(uv) => format!(\n                     \"Unevaluated({}, {:?}, {:?})\",\n                     self.tcx.def_path_str(uv.def.did),\n-                    uv.substs,\n+                    uv.substs(self.tcx),\n                     uv.promoted\n                 ),\n                 ty::ConstKind::Value(val) => format!(\"Value({:?})\", val),\n@@ -682,8 +682,10 @@ pub fn write_allocations<'tcx>(\n     }\n     struct CollectAllocIds(BTreeSet<AllocId>);\n     impl<'tcx> TypeVisitor<'tcx> for CollectAllocIds {\n-        fn tcx_for_anon_const_substs(&self) -> TyCtxt<'tcx> {\n-            bug!(\"tcx_for_anon_const_substs called for CollectAllocIds\")\n+        fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n+            // `AllocId`s are only inside of `ConstKind::Value` which\n+            // can't be part of the anon const default substs.\n+            None\n         }\n \n         fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {"}, {"sha": "9106f1d2342a4cf088258bab8d1ad35a56a949ad", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=bfaf13af4e5071b09248979e51c6614bf1353f52", "patch": "@@ -693,11 +693,10 @@ impl<'tcx> Cx<'tcx> {\n                                 // and not the beginning of discriminants (which is always `0`)\n                                 let substs = InternalSubsts::identity_for_item(self.tcx(), did);\n                                 let lhs = ty::Const {\n-                                    val: ty::ConstKind::Unevaluated(ty::Unevaluated {\n-                                        def: ty::WithOptConstParam::unknown(did),\n+                                    val: ty::ConstKind::Unevaluated(ty::Unevaluated::new(\n+                                        ty::WithOptConstParam::unknown(did),\n                                         substs,\n-                                        promoted: None,\n-                                    }),\n+                                    )),\n                                     ty: var_ty,\n                                 };\n                                 let lhs = self.thir.exprs.push(mk_const(self.tcx().mk_const(lhs)));\n@@ -889,11 +888,10 @@ impl<'tcx> Cx<'tcx> {\n                 debug!(\"convert_path_expr: (const) user_ty={:?}\", user_ty);\n                 ExprKind::Literal {\n                     literal: self.tcx.mk_const(ty::Const {\n-                        val: ty::ConstKind::Unevaluated(ty::Unevaluated {\n-                            def: ty::WithOptConstParam::unknown(def_id),\n+                        val: ty::ConstKind::Unevaluated(ty::Unevaluated::new(\n+                            ty::WithOptConstParam::unknown(def_id),\n                             substs,\n-                            promoted: None,\n-                        }),\n+                        )),\n                         ty: self.typeck_results().node_type(expr.hir_id),\n                     }),\n                     user_ty,"}, {"sha": "fb223d8fa7518b9b9f1f4a7db17526a7845c130b", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=bfaf13af4e5071b09248979e51c6614bf1353f52", "patch": "@@ -179,8 +179,8 @@ where\n {\n     type BreakTy = V::BreakTy;\n \n-    fn tcx_for_anon_const_substs(&self) -> TyCtxt<'tcx> {\n-        self.def_id_visitor.tcx()\n+    fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n+        Some(self.def_id_visitor.tcx())\n     }\n \n     fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<V::BreakTy> {"}, {"sha": "f89ca0fed036453c6962e3008a159c18222aebc5", "filename": "compiler/rustc_trait_selection/src/opaque_types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs?ref=bfaf13af4e5071b09248979e51c6614bf1353f52", "patch": "@@ -558,8 +558,8 @@ impl<'tcx, OP> TypeVisitor<'tcx> for ConstrainOpaqueTypeRegionVisitor<'tcx, OP>\n where\n     OP: FnMut(ty::Region<'tcx>),\n {\n-    fn tcx_for_anon_const_substs<'a>(&'a self) -> TyCtxt<'tcx> {\n-        self.tcx\n+    fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n+        Some(self.tcx)\n     }\n \n     fn visit_binder<T: TypeFoldable<'tcx>>("}, {"sha": "2f1e7e9d509b416dc2609c0cfc0a6ec9ff2e28cd", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=bfaf13af4e5071b09248979e51c6614bf1353f52", "patch": "@@ -155,11 +155,8 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n     // and hopefully soon change this to an error.\n     //\n     // See #74595 for more details about this.\n-    let concrete = infcx.const_eval_resolve(\n-        param_env,\n-        ty::Unevaluated { def, substs, promoted: None },\n-        Some(span),\n-    );\n+    let concrete =\n+        infcx.const_eval_resolve(param_env, ty::Unevaluated::new(def, substs), Some(span));\n \n     if concrete.is_ok() && substs.has_param_types_or_consts() {\n         match infcx.tcx.def_kind(def.did) {\n@@ -217,9 +214,7 @@ impl AbstractConst<'tcx> {\n         ct: &ty::Const<'tcx>,\n     ) -> Result<Option<AbstractConst<'tcx>>, ErrorReported> {\n         match ct.val {\n-            ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted: _ }) => {\n-                AbstractConst::new(tcx, def, substs)\n-            }\n+            ty::ConstKind::Unevaluated(uv) => AbstractConst::new(tcx, uv.def, uv.substs(tcx)),\n             ty::ConstKind::Error(_) => Err(ErrorReported),\n             _ => Ok(None),\n         }"}, {"sha": "903912c3361ed4033c437697bde2b0124a0aaf2c", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=bfaf13af4e5071b09248979e51c6614bf1353f52", "patch": "@@ -570,7 +570,8 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n \n                 ty::PredicateKind::ConstEquate(c1, c2) => {\n                     debug!(?c1, ?c2, \"equating consts\");\n-                    if self.selcx.tcx().features().const_evaluatable_checked {\n+                    let tcx = self.selcx.tcx();\n+                    if tcx.features().const_evaluatable_checked {\n                         // FIXME: we probably should only try to unify abstract constants\n                         // if the constants depend on generic parameters.\n                         //\n@@ -597,7 +598,7 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n                                 Err(ErrorHandled::TooGeneric) => {\n                                     stalled_on.extend(\n                                         unevaluated\n-                                            .substs\n+                                            .substs(tcx)\n                                             .iter()\n                                             .filter_map(TyOrConstInferVar::maybe_from_generic_arg),\n                                     );"}, {"sha": "01bad14c8fa971f4e82e24c2059f7c587886cef4", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=bfaf13af4e5071b09248979e51c6614bf1353f52", "patch": "@@ -771,8 +771,8 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeFoldable<'tcx>>(\n \n     impl<'tcx> TypeVisitor<'tcx> for IllegalSelfTypeVisitor<'tcx> {\n         type BreakTy = ();\n-        fn tcx_for_anon_const_substs<'a>(&'a self) -> TyCtxt<'tcx> {\n-            self.tcx\n+        fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n+            Some(self.tcx)\n         }\n \n         fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {"}, {"sha": "ac8bab0cf36a77913ab3c5a5cd57de7e6ac9b478", "filename": "compiler/rustc_trait_selection/src/traits/structural_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs?ref=bfaf13af4e5071b09248979e51c6614bf1353f52", "patch": "@@ -130,8 +130,8 @@ impl Search<'a, 'tcx> {\n \n impl<'a, 'tcx> TypeVisitor<'tcx> for Search<'a, 'tcx> {\n     type BreakTy = NonStructuralMatchTy<'tcx>;\n-    fn tcx_for_anon_const_substs(&self) -> TyCtxt<'tcx> {\n-        self.tcx()\n+    fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n+        Some(self.tcx())\n     }\n \n     fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {"}, {"sha": "e44576061322c317949b9e0595f1f52765da2f40", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=bfaf13af4e5071b09248979e51c6614bf1353f52", "patch": "@@ -435,13 +435,14 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n \n                 GenericArgKind::Const(constant) => {\n                     match constant.val {\n-                        ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }) => {\n-                            assert!(promoted.is_none());\n+                        ty::ConstKind::Unevaluated(uv) => {\n+                            assert!(uv.promoted.is_none());\n+                            let substs = uv.substs(self.tcx());\n \n-                            let obligations = self.nominal_obligations(def.did, substs);\n+                            let obligations = self.nominal_obligations(uv.def.did, substs);\n                             self.out.extend(obligations);\n \n-                            let predicate = ty::PredicateKind::ConstEvaluatable(def, substs)\n+                            let predicate = ty::PredicateKind::ConstEvaluatable(uv.def, substs)\n                                 .to_predicate(self.tcx());\n                             let cause = self.cause(traits::MiscObligation);\n                             self.out.push(traits::Obligation::with_depth("}, {"sha": "1d4196e574782622ef60bedabf932a003acf0ae1", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=bfaf13af4e5071b09248979e51c6614bf1353f52", "patch": "@@ -854,8 +854,8 @@ impl<'tcx> BoundVarsCollector<'tcx> {\n }\n \n impl<'tcx> TypeVisitor<'tcx> for BoundVarsCollector<'tcx> {\n-    fn tcx_for_anon_const_substs(&self) -> TyCtxt<'tcx> {\n-        self.tcx\n+    fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n+        Some(self.tcx)\n     }\n \n     fn visit_binder<T: TypeFoldable<'tcx>>(\n@@ -1076,8 +1076,9 @@ impl PlaceholdersCollector {\n }\n \n impl<'tcx> TypeVisitor<'tcx> for PlaceholdersCollector {\n-    fn tcx_for_anon_const_substs(&self) -> TyCtxt<'tcx> {\n-        bug!(\"tcx_for_anon_const_substs called for PlaceholdersCollector\");\n+    fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n+        // Anon const substs do not contain placeholders by default.\n+        None\n     }\n \n     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {"}, {"sha": "b00d2ab35617f5d8986357ffe9c13d4a9ba545d9", "filename": "compiler/rustc_ty_utils/src/instance.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs?ref=bfaf13af4e5071b09248979e51c6614bf1353f52", "patch": "@@ -54,8 +54,9 @@ impl<'tcx> BoundVarsCollector<'tcx> {\n impl<'tcx> TypeVisitor<'tcx> for BoundVarsCollector<'tcx> {\n     type BreakTy = ();\n \n-    fn tcx_for_anon_const_substs(&self) -> TyCtxt<'tcx> {\n-        bug!(\"default anon const substs can't be bound vars\");\n+    fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n+        // Anon const substs do not contain bound vars by default.\n+        None\n     }\n     fn visit_binder<T: TypeFoldable<'tcx>>(\n         &mut self,"}, {"sha": "649574fe195742ce17803a4ef8626988f949001c", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=bfaf13af4e5071b09248979e51c6614bf1353f52", "patch": "@@ -473,8 +473,8 @@ pub(super) fn check_opaque_for_inheriting_lifetimes(\n     struct FindParentLifetimeVisitor<'tcx>(TyCtxt<'tcx>, &'tcx ty::Generics);\n     impl<'tcx> ty::fold::TypeVisitor<'tcx> for FindParentLifetimeVisitor<'tcx> {\n         type BreakTy = FoundParentLifetime;\n-        fn tcx_for_anon_const_substs(&self) -> TyCtxt<'tcx> {\n-            self.0\n+        fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n+            Some(self.0)\n         }\n \n         fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n@@ -510,8 +510,8 @@ pub(super) fn check_opaque_for_inheriting_lifetimes(\n \n     impl<'tcx> ty::fold::TypeVisitor<'tcx> for ProhibitOpaqueVisitor<'tcx> {\n         type BreakTy = Ty<'tcx>;\n-        fn tcx_for_anon_const_substs(&self) -> TyCtxt<'tcx> {\n-            self.tcx\n+        fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n+            Some(self.tcx)\n         }\n \n         fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n@@ -1584,10 +1584,11 @@ fn opaque_type_cycle_error(tcx: TyCtxt<'tcx>, def_id: LocalDefId, span: Span) {\n                 .filter_map(|e| typeck_results.node_type_opt(e.hir_id).map(|t| (e.span, t)))\n                 .filter(|(_, ty)| !matches!(ty.kind(), ty::Never))\n             {\n-                struct VisitTypes(Vec<DefId>);\n-                impl<'tcx> ty::fold::TypeVisitor<'tcx> for VisitTypes {\n-                    fn tcx_for_anon_const_substs(&self) -> TyCtxt<'tcx> {\n-                        bug!(\"tcx_for_anon_const_substs called for VisitTypes\");\n+                struct OpaqueTypeCollector(Vec<DefId>);\n+                impl<'tcx> ty::fold::TypeVisitor<'tcx> for OpaqueTypeCollector {\n+                    fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n+                        // Default anon const substs cannot contain opaque types.\n+                        None\n                     }\n                     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n                         match *t.kind() {\n@@ -1599,7 +1600,7 @@ fn opaque_type_cycle_error(tcx: TyCtxt<'tcx>, def_id: LocalDefId, span: Span) {\n                         }\n                     }\n                 }\n-                let mut visitor = VisitTypes(vec![]);\n+                let mut visitor = OpaqueTypeCollector(vec![]);\n                 ty.visit_with(&mut visitor);\n                 for def_id in visitor.0 {\n                     let ty_span = tcx.def_span(def_id);"}, {"sha": "9b495fba1975d01824abb7bb3095de2458d9c289", "filename": "compiler/rustc_typeck/src/check/op.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs?ref=bfaf13af4e5071b09248979e51c6614bf1353f52", "patch": "@@ -1006,8 +1006,8 @@ fn suggest_constraining_param(\n struct TypeParamVisitor<'tcx>(TyCtxt<'tcx>, Vec<Ty<'tcx>>);\n \n impl<'tcx> TypeVisitor<'tcx> for TypeParamVisitor<'tcx> {\n-    fn tcx_for_anon_const_substs(&self) -> TyCtxt<'tcx> {\n-        self.0\n+    fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n+        Some(self.0)\n     }\n     fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         if let ty::Param(_) = ty.kind() {"}, {"sha": "0d121b9da8762f1e5772517008da58ac6ba836a9", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=bfaf13af4e5071b09248979e51c6614bf1353f52", "patch": "@@ -831,8 +831,8 @@ fn check_where_clauses<'tcx, 'fcx>(\n             }\n             impl<'tcx> ty::fold::TypeVisitor<'tcx> for CountParams<'tcx> {\n                 type BreakTy = ();\n-                fn tcx_for_anon_const_substs(&self) -> TyCtxt<'tcx> {\n-                    self.tcx\n+                fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n+                    Some(self.tcx)\n                 }\n \n                 fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {"}, {"sha": "a5a402bc26a8f65ddc4d7274a12d53f33eadbf3e", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=bfaf13af4e5071b09248979e51c6614bf1353f52", "patch": "@@ -68,6 +68,7 @@ fn collect_mod_item_types(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n pub fn provide(providers: &mut Providers) {\n     *providers = Providers {\n         opt_const_param_of: type_of::opt_const_param_of,\n+        default_anon_const_substs: type_of::default_anon_const_substs,\n         type_of: type_of::type_of,\n         item_bounds: item_bounds::item_bounds,\n         explicit_item_bounds: item_bounds::explicit_item_bounds,\n@@ -2355,7 +2356,8 @@ fn const_evaluatable_predicates_of<'tcx>(\n                 assert_eq!(uv.promoted, None);\n                 let span = self.tcx.hir().span(c.hir_id);\n                 self.preds.insert((\n-                    ty::PredicateKind::ConstEvaluatable(uv.def, uv.substs).to_predicate(self.tcx),\n+                    ty::PredicateKind::ConstEvaluatable(uv.def, uv.substs(self.tcx))\n+                        .to_predicate(self.tcx),\n                     span,\n                 ));\n             }"}, {"sha": "98f5f73b7bec611af20dc683231f25bcc7eb6446", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=bfaf13af4e5071b09248979e51c6614bf1353f52", "patch": "@@ -7,7 +7,7 @@ use rustc_hir::intravisit;\n use rustc_hir::intravisit::Visitor;\n use rustc_hir::{HirId, Node};\n use rustc_middle::hir::map::Map;\n-use rustc_middle::ty::subst::{GenericArgKind, InternalSubsts};\n+use rustc_middle::ty::subst::{GenericArgKind, InternalSubsts, SubstsRef};\n use rustc_middle::ty::util::IntTypeExt;\n use rustc_middle::ty::{self, DefIdTree, Ty, TyCtxt, TypeFoldable, TypeFolder};\n use rustc_span::symbol::Ident;\n@@ -274,6 +274,10 @@ fn get_path_containing_arg_in_pat<'hir>(\n     arg_path\n }\n \n+pub(super) fn default_anon_const_substs(tcx: TyCtxt<'_>, def_id: DefId) -> SubstsRef<'_> {\n+    InternalSubsts::identity_for_item(tcx, def_id)\n+}\n+\n pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n     let def_id = def_id.expect_local();\n     use rustc_hir::*;"}, {"sha": "9b6f0be47caf5898e480540d4ffa14d2954a57f6", "filename": "compiler/rustc_typeck/src/constrained_generic_params.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_typeck%2Fsrc%2Fconstrained_generic_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfaf13af4e5071b09248979e51c6614bf1353f52/compiler%2Frustc_typeck%2Fsrc%2Fconstrained_generic_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fconstrained_generic_params.rs?ref=bfaf13af4e5071b09248979e51c6614bf1353f52", "patch": "@@ -60,8 +60,8 @@ struct ParameterCollector<'tcx> {\n }\n \n impl<'tcx> TypeVisitor<'tcx> for ParameterCollector<'tcx> {\n-    fn tcx_for_anon_const_substs(&self) -> TyCtxt<'tcx> {\n-        self.tcx\n+    fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n+        Some(self.tcx)\n     }\n \n     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {"}, {"sha": "bdfe3ffc13f1362be2168f2d58851e9d234ad57b", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfaf13af4e5071b09248979e51c6614bf1353f52/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfaf13af4e5071b09248979e51c6614bf1353f52/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=bfaf13af4e5071b09248979e51c6614bf1353f52", "patch": "@@ -287,7 +287,7 @@ crate fn name_from_pat(p: &hir::Pat<'_>) -> Symbol {\n \n crate fn print_const(cx: &DocContext<'_>, n: &'tcx ty::Const<'_>) -> String {\n     match n.val {\n-        ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs: _, promoted }) => {\n+        ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs_: _, promoted }) => {\n             let mut s = if let Some(def) = def.as_local() {\n                 let hir_id = cx.tcx.hir().local_def_id_to_hir_id(def.did);\n                 print_const_expr(cx.tcx, cx.tcx.hir().body_owned_by(hir_id))"}, {"sha": "2a85a67fa099cac9355d26e61ca5bdada9387994", "filename": "src/tools/clippy/clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bfaf13af4e5071b09248979e51c6614bf1353f52/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfaf13af4e5071b09248979e51c6614bf1353f52/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=bfaf13af4e5071b09248979e51c6614bf1353f52", "patch": "@@ -187,11 +187,7 @@ fn is_value_unfrozen_expr<'tcx>(cx: &LateContext<'tcx>, hir_id: HirId, def_id: D\n \n     let result = cx.tcx.const_eval_resolve(\n         cx.param_env,\n-        ty::Unevaluated {\n-            def: ty::WithOptConstParam::unknown(def_id),\n-            substs,\n-            promoted: None,\n-        },\n+        ty::Unevaluated::new(ty::WithOptConstParam::unknown(def_id), substs),\n         None,\n     );\n     is_value_unfrozen_raw(cx, result, ty)"}, {"sha": "f5e43264a5c69809b4dfc04d00d93b4b2f0886ee", "filename": "src/tools/clippy/clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bfaf13af4e5071b09248979e51c6614bf1353f52/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfaf13af4e5071b09248979e51c6614bf1353f52/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs?ref=bfaf13af4e5071b09248979e51c6614bf1353f52", "patch": "@@ -705,8 +705,8 @@ struct ContainsRegion<'tcx>(TyCtxt<'tcx>);\n \n impl<'tcx> TypeVisitor<'tcx> for ContainsRegion<'tcx> {\n     type BreakTy = ();\n-    fn tcx_for_anon_const_substs(&self) -> TyCtxt<'tcx> {\n-        self.0\n+    fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n+        Some(self.0)\n     }\n \n     fn visit_region(&mut self, _: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {"}, {"sha": "8bf31807d55d1441d74e503a42e29334aee365f0", "filename": "src/tools/clippy/clippy_utils/src/consts.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bfaf13af4e5071b09248979e51c6614bf1353f52/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfaf13af4e5071b09248979e51c6614bf1353f52/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs?ref=bfaf13af4e5071b09248979e51c6614bf1353f52", "patch": "@@ -346,11 +346,7 @@ impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n                     .tcx\n                     .const_eval_resolve(\n                         self.param_env,\n-                        ty::Unevaluated {\n-                            def: ty::WithOptConstParam::unknown(def_id),\n-                            substs,\n-                            promoted: None,\n-                        },\n+                        ty::Unevaluated::new(ty::WithOptConstParam::unknown(def_id), substs),\n                         None,\n                     )\n                     .ok()"}]}