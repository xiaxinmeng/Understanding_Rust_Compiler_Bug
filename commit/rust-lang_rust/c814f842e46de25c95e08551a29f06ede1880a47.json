{"sha": "c814f842e46de25c95e08551a29f06ede1880a47", "node_id": "C_kwDOAAsO6NoAKGM4MTRmODQyZTQ2ZGUyNWM5NWUwODU1MWEyOWYwNmVkZTE4ODBhNDc", "commit": {"author": {"name": "Mark Drobnak", "email": "mark.drobnak@gmail.com", "date": "2022-06-08T02:57:15Z"}, "committer": {"name": "Mark Drobnak", "email": "mark.drobnak@gmail.com", "date": "2022-06-14T03:45:26Z"}, "message": "Use a private type definition to reduce cfg noise\n\nI checked with t-libs to make sure this is OK to do on stable functions:\nhttps://rust-lang.zulipchat.com/#narrow/stream/219381-t-libs/topic/Replacing.20std.20function.20arg.20type.20with.20private.20type.20def.3F", "tree": {"sha": "d7421aa8871511221faa3740403f1b756adfb1c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7421aa8871511221faa3740403f1b756adfb1c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c814f842e46de25c95e08551a29f06ede1880a47", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEEJn5ZTY8tfNoIJXFiR6Ez87+dA9MFAmKoBFYACgkQR6Ez87+d\nA9Ml2gf9FYPP93TOM41SyinhkBVNNxzwt3YIVYKPTvnFHj2e1gVwVeiPil/JmdmH\nLev7zLyx4KDFKq71mg3GE0ym3Kh/T8nf61ZqBruzS3SbHtJSURgmbAg1ReEZFJ9p\nxAv6+Nx2Un7adcsN13IA3K1JCPomX/ldzN1GYjVSm3A5xD/ITBJ2XLwEM2pNPCkM\nfX3DHOtj76l+ZaNmbHq0Y4Z4VjeB2lHZtA7jnbXuP1pLS8JDm5RUTYRPZY0Ac0sc\nGfNSdI8Q8+yrP73S0Hs4mB6XFNH6f/q6Mwwh68WWOZeoqIhX2N8F4LnEh8nFM0OV\noocQBp4GvPh/oEOHwdRcl3APo8dh/Q==\n=eAIh\n-----END PGP SIGNATURE-----", "payload": "tree d7421aa8871511221faa3740403f1b756adfb1c3\nparent 5d5039e1b80862b4561a5199d57053f1ef027035\nauthor Mark Drobnak <mark.drobnak@gmail.com> 1654657035 -0700\ncommitter Mark Drobnak <mark.drobnak@gmail.com> 1655178326 -0700\n\nUse a private type definition to reduce cfg noise\n\nI checked with t-libs to make sure this is OK to do on stable functions:\nhttps://rust-lang.zulipchat.com/#narrow/stream/219381-t-libs/topic/Replacing.20std.20function.20arg.20type.20with.20private.20type.20def.3F\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c814f842e46de25c95e08551a29f06ede1880a47", "html_url": "https://github.com/rust-lang/rust/commit/c814f842e46de25c95e08551a29f06ede1880a47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c814f842e46de25c95e08551a29f06ede1880a47/comments", "author": {"login": "AzureMarker", "id": 4417660, "node_id": "MDQ6VXNlcjQ0MTc2NjA=", "avatar_url": "https://avatars.githubusercontent.com/u/4417660?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AzureMarker", "html_url": "https://github.com/AzureMarker", "followers_url": "https://api.github.com/users/AzureMarker/followers", "following_url": "https://api.github.com/users/AzureMarker/following{/other_user}", "gists_url": "https://api.github.com/users/AzureMarker/gists{/gist_id}", "starred_url": "https://api.github.com/users/AzureMarker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AzureMarker/subscriptions", "organizations_url": "https://api.github.com/users/AzureMarker/orgs", "repos_url": "https://api.github.com/users/AzureMarker/repos", "events_url": "https://api.github.com/users/AzureMarker/events{/privacy}", "received_events_url": "https://api.github.com/users/AzureMarker/received_events", "type": "User", "site_admin": false}, "committer": {"login": "AzureMarker", "id": 4417660, "node_id": "MDQ6VXNlcjQ0MTc2NjA=", "avatar_url": "https://avatars.githubusercontent.com/u/4417660?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AzureMarker", "html_url": "https://github.com/AzureMarker", "followers_url": "https://api.github.com/users/AzureMarker/followers", "following_url": "https://api.github.com/users/AzureMarker/following{/other_user}", "gists_url": "https://api.github.com/users/AzureMarker/gists{/gist_id}", "starred_url": "https://api.github.com/users/AzureMarker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AzureMarker/subscriptions", "organizations_url": "https://api.github.com/users/AzureMarker/orgs", "repos_url": "https://api.github.com/users/AzureMarker/repos", "events_url": "https://api.github.com/users/AzureMarker/events{/privacy}", "received_events_url": "https://api.github.com/users/AzureMarker/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d5039e1b80862b4561a5199d57053f1ef027035", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d5039e1b80862b4561a5199d57053f1ef027035", "html_url": "https://github.com/rust-lang/rust/commit/5d5039e1b80862b4561a5199d57053f1ef027035"}], "stats": {"total": 52, "additions": 16, "deletions": 36}, "files": [{"sha": "df33976098fb498f585efcdc53917b3afa522522", "filename": "library/std/src/os/unix/process.rs", "status": "modified", "additions": 16, "deletions": 36, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/c814f842e46de25c95e08551a29f06ede1880a47/library%2Fstd%2Fsrc%2Fos%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c814f842e46de25c95e08551a29f06ede1880a47/library%2Fstd%2Fsrc%2Fos%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fprocess.rs?ref=c814f842e46de25c95e08551a29f06ede1880a47", "patch": "@@ -12,6 +12,16 @@ use crate::sealed::Sealed;\n use crate::sys;\n use crate::sys_common::{AsInner, AsInnerMut, FromInner, IntoInner};\n \n+#[cfg(not(any(target_os = \"vxworks\", target_os = \"espidf\", target_os = \"horizon\")))]\n+type UserId = u32;\n+#[cfg(not(any(target_os = \"vxworks\", target_os = \"espidf\", target_os = \"horizon\")))]\n+type GroupId = u32;\n+\n+#[cfg(any(target_os = \"vxworks\", target_os = \"espidf\", target_os = \"horizon\"))]\n+type UserId = u16;\n+#[cfg(any(target_os = \"vxworks\", target_os = \"espidf\", target_os = \"horizon\"))]\n+type GroupId = u16;\n+\n /// Unix-specific extensions to the [`process::Command`] builder.\n ///\n /// This trait is sealed: it cannot be implemented outside the standard library.\n@@ -22,32 +32,17 @@ pub trait CommandExt: Sealed {\n     /// `setuid` call in the child process. Failure in the `setuid`\n     /// call will cause the spawn to fail.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn uid(\n-        &mut self,\n-        #[cfg(not(any(target_os = \"vxworks\", target_os = \"espidf\", target_os = \"horizon\")))]\n-        id: u32,\n-        #[cfg(any(target_os = \"vxworks\", target_os = \"espidf\", target_os = \"horizon\"))] id: u16,\n-    ) -> &mut process::Command;\n+    fn uid(&mut self, id: UserId) -> &mut process::Command;\n \n     /// Similar to `uid`, but sets the group ID of the child process. This has\n     /// the same semantics as the `uid` field.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn gid(\n-        &mut self,\n-        #[cfg(not(any(target_os = \"vxworks\", target_os = \"espidf\", target_os = \"horizon\")))]\n-        id: u32,\n-        #[cfg(any(target_os = \"vxworks\", target_os = \"espidf\", target_os = \"horizon\"))] id: u16,\n-    ) -> &mut process::Command;\n+    fn gid(&mut self, id: GroupId) -> &mut process::Command;\n \n     /// Sets the supplementary group IDs for the calling process. Translates to\n     /// a `setgroups` call in the child process.\n     #[unstable(feature = \"setgroups\", issue = \"90747\")]\n-    fn groups(\n-        &mut self,\n-        #[cfg(not(any(target_os = \"vxworks\", target_os = \"espidf\", target_os = \"horizon\")))] groups: &[u32],\n-        #[cfg(any(target_os = \"vxworks\", target_os = \"espidf\", target_os = \"horizon\"))]\n-        groups: &[u16],\n-    ) -> &mut process::Command;\n+    fn groups(&mut self, groups: &[GroupId]) -> &mut process::Command;\n \n     /// Schedules a closure to be run just before the `exec` function is\n     /// invoked.\n@@ -161,32 +156,17 @@ pub trait CommandExt: Sealed {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl CommandExt for process::Command {\n-    fn uid(\n-        &mut self,\n-        #[cfg(not(any(target_os = \"vxworks\", target_os = \"espidf\", target_os = \"horizon\")))]\n-        id: u32,\n-        #[cfg(any(target_os = \"vxworks\", target_os = \"espidf\", target_os = \"horizon\"))] id: u16,\n-    ) -> &mut process::Command {\n+    fn uid(&mut self, id: UserId) -> &mut process::Command {\n         self.as_inner_mut().uid(id);\n         self\n     }\n \n-    fn gid(\n-        &mut self,\n-        #[cfg(not(any(target_os = \"vxworks\", target_os = \"espidf\", target_os = \"horizon\")))]\n-        id: u32,\n-        #[cfg(any(target_os = \"vxworks\", target_os = \"espidf\", target_os = \"horizon\"))] id: u16,\n-    ) -> &mut process::Command {\n+    fn gid(&mut self, id: GroupId) -> &mut process::Command {\n         self.as_inner_mut().gid(id);\n         self\n     }\n \n-    fn groups(\n-        &mut self,\n-        #[cfg(not(any(target_os = \"vxworks\", target_os = \"espidf\", target_os = \"horizon\")))] groups: &[u32],\n-        #[cfg(any(target_os = \"vxworks\", target_os = \"espidf\", target_os = \"horizon\"))]\n-        groups: &[u16],\n-    ) -> &mut process::Command {\n+    fn groups(&mut self, groups: &[GroupId]) -> &mut process::Command {\n         self.as_inner_mut().groups(groups);\n         self\n     }"}]}