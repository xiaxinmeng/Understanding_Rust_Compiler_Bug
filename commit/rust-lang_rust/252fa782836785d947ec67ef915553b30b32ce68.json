{"sha": "252fa782836785d947ec67ef915553b30b32ce68", "node_id": "C_kwDOAAsO6NoAKDI1MmZhNzgyODM2Nzg1ZDk0N2VjNjdlZjkxNTU1M2IzMGIzMmNlNjg", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-19T19:06:14Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-19T23:46:09Z"}, "message": "Only expect a GAT const arg", "tree": {"sha": "036b05f8fb9a82c26504f4a37df7ac597949e76e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/036b05f8fb9a82c26504f4a37df7ac597949e76e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/252fa782836785d947ec67ef915553b30b32ce68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/252fa782836785d947ec67ef915553b30b32ce68", "html_url": "https://github.com/rust-lang/rust/commit/252fa782836785d947ec67ef915553b30b32ce68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/252fa782836785d947ec67ef915553b30b32ce68/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab9bb3ea368b2412531a3e8c07ba73d1dd690134", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab9bb3ea368b2412531a3e8c07ba73d1dd690134", "html_url": "https://github.com/rust-lang/rust/commit/ab9bb3ea368b2412531a3e8c07ba73d1dd690134"}], "stats": {"total": 44, "additions": 39, "deletions": 5}, "files": [{"sha": "a8e59715b7529d42cf6a6a8a89ffa1f1b5e39ccf", "filename": "compiler/rustc_hir_analysis/src/collect/type_of.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/252fa782836785d947ec67ef915553b30b32ce68/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/252fa782836785d947ec67ef915553b30b32ce68/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs?ref=252fa782836785d947ec67ef915553b30b32ce68", "patch": "@@ -475,7 +475,9 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::EarlyBinder<Ty<'_>>\n                         def_id.to_def_id(),\n                     );\n                     if let Some(assoc_item) = assoc_item {\n-                        tcx.type_of(assoc_item.def_id).subst_identity()\n+                        tcx.type_of(assoc_item.def_id)\n+                            .no_bound_vars()\n+                            .expect(\"const parameter types cannot be generic\")\n                     } else {\n                         // FIXME(associated_const_equality): add a useful error message here.\n                         tcx.ty_error_with_message(\n@@ -517,15 +519,18 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::EarlyBinder<Ty<'_>>\n                         },\n                         def_id.to_def_id(),\n                     );\n-                    if let Some(param)\n-                        = assoc_item.map(|item| &tcx.generics_of(item.def_id).params[idx]).filter(|param| param.kind.is_ty_or_const())\n+                    if let Some(assoc_item) = assoc_item\n+                        && let param = &tcx.generics_of(assoc_item.def_id).params[idx]\n+                        && matches!(param.kind, ty::GenericParamDefKind::Const { .. })\n                     {\n-                        tcx.type_of(param.def_id).subst_identity()\n+                        tcx.type_of(param.def_id)\n+                            .no_bound_vars()\n+                            .expect(\"const parameter types cannot be generic\")\n                     } else {\n                         // FIXME(associated_const_equality): add a useful error message here.\n                         tcx.ty_error_with_message(\n                             DUMMY_SP,\n-                            \"Could not find associated const on trait\",\n+                            \"Could not find const param on associated item\",\n                         )\n                     }\n                 }"}, {"sha": "734a37862940f05badaae18ecfb6232f24b8258d", "filename": "tests/ui/const-generics/generic_const_exprs/mismatched-gat-subst-kind.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/252fa782836785d947ec67ef915553b30b32ce68/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fmismatched-gat-subst-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/252fa782836785d947ec67ef915553b30b32ce68/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fmismatched-gat-subst-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fmismatched-gat-subst-kind.rs?ref=252fa782836785d947ec67ef915553b30b32ce68", "patch": "@@ -0,0 +1,11 @@\n+#![feature(generic_const_exprs)]\n+//~^ WARN the feature `generic_const_exprs` is incomplete\n+\n+trait B {\n+    type U<T>;\n+}\n+\n+fn f<T: B<U<1i32> = ()>>() {}\n+//~^ ERROR constant provided when a type was expected\n+\n+fn main() {}"}, {"sha": "8b6eb5b75940f052edd9252e2d6758d590800a9b", "filename": "tests/ui/const-generics/generic_const_exprs/mismatched-gat-subst-kind.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/252fa782836785d947ec67ef915553b30b32ce68/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fmismatched-gat-subst-kind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/252fa782836785d947ec67ef915553b30b32ce68/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fmismatched-gat-subst-kind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fmismatched-gat-subst-kind.stderr?ref=252fa782836785d947ec67ef915553b30b32ce68", "patch": "@@ -0,0 +1,18 @@\n+warning: the feature `generic_const_exprs` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/mismatched-gat-subst-kind.rs:1:12\n+   |\n+LL | #![feature(generic_const_exprs)]\n+   |            ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0747]: constant provided when a type was expected\n+  --> $DIR/mismatched-gat-subst-kind.rs:8:13\n+   |\n+LL | fn f<T: B<U<1i32> = ()>>() {}\n+   |             ^^^^\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0747`."}]}