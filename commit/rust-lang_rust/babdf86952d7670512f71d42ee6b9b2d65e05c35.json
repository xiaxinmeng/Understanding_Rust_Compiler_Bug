{"sha": "babdf86952d7670512f71d42ee6b9b2d65e05c35", "node_id": "C_kwDOAAsO6NoAKGJhYmRmODY5NTJkNzY3MDUxMmY3MWQ0MmVlNmI5YjJkNjVlMDVjMzU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-02T20:22:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-02T20:22:49Z"}, "message": "Rollup merge of #105162 - compiler-errors:fn-sig-arity, r=cjgillot\n\nProperly synthesize `FnSig` value during cycle\n\nGet the arity correct when creating a `FnSig` type during `tcx.fn_sig` cycle recovery\n\nFixes #105152", "tree": {"sha": "ea924014465fe1840374a71f8e9511a2165ded9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea924014465fe1840374a71f8e9511a2165ded9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/babdf86952d7670512f71d42ee6b9b2d65e05c35", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjil6ZCRBK7hj4Ov3rIwAAZs8IAF2CadgRo7wtFE9CewarynIA\nUwLRhEPnF6gacTY5outK8ImU/YcLMrrYK4pkXirKqkwY/aexQ6A7wxxMNF3k7tHN\nx1Y4awnUCiLXfW4MBHjrJIPIWbQqAGr81hipZhzfLkKeQUCpxyh9FsT2KFtXI7Yg\nb5nKArXGKQf6kH/1U0kLen8zpMNmUhLUikR9q6fnzVhW4h/0mwkv1YuxSnOsqrET\nbRsriClLTxV9t03v23Ru3z814ytB+IEEZjj99reVXu5MZEnsmNfQO8nuOw6MvjyF\niKNnsNHI6rmLtkvpqV3Oz9I6AvShhOd48gPtT0D8Ef0JfRjN0xxuzADsqRQ9C3M=\n=ls06\n-----END PGP SIGNATURE-----\n", "payload": "tree ea924014465fe1840374a71f8e9511a2165ded9e\nparent de0d18a85e33a0d4ce10e82c26ebdb1ecedf3a14\nparent 5809a0591d34b75b8fd3ffcf6bfdd19fec2a80d7\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1670012569 +0100\ncommitter GitHub <noreply@github.com> 1670012569 +0100\n\nRollup merge of #105162 - compiler-errors:fn-sig-arity, r=cjgillot\n\nProperly synthesize `FnSig` value during cycle\n\nGet the arity correct when creating a `FnSig` type during `tcx.fn_sig` cycle recovery\n\nFixes #105152\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/babdf86952d7670512f71d42ee6b9b2d65e05c35", "html_url": "https://github.com/rust-lang/rust/commit/babdf86952d7670512f71d42ee6b9b2d65e05c35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/babdf86952d7670512f71d42ee6b9b2d65e05c35/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de0d18a85e33a0d4ce10e82c26ebdb1ecedf3a14", "url": "https://api.github.com/repos/rust-lang/rust/commits/de0d18a85e33a0d4ce10e82c26ebdb1ecedf3a14", "html_url": "https://github.com/rust-lang/rust/commit/de0d18a85e33a0d4ce10e82c26ebdb1ecedf3a14"}, {"sha": "5809a0591d34b75b8fd3ffcf6bfdd19fec2a80d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/5809a0591d34b75b8fd3ffcf6bfdd19fec2a80d7", "html_url": "https://github.com/rust-lang/rust/commit/5809a0591d34b75b8fd3ffcf6bfdd19fec2a80d7"}], "stats": {"total": 37, "additions": 32, "deletions": 5}, "files": [{"sha": "70b98e59a8beab34f6e801b412526d6d5ac15aed", "filename": "compiler/rustc_middle/src/values.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/babdf86952d7670512f71d42ee6b9b2d65e05c35/compiler%2Frustc_middle%2Fsrc%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/babdf86952d7670512f71d42ee6b9b2d65e05c35/compiler%2Frustc_middle%2Fsrc%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fvalues.rs?ref=babdf86952d7670512f71d42ee6b9b2d65e05c35", "patch": "@@ -32,13 +32,23 @@ impl<'tcx> Value<TyCtxt<'tcx>> for ty::SymbolName<'_> {\n }\n \n impl<'tcx> Value<TyCtxt<'tcx>> for ty::Binder<'_, ty::FnSig<'_>> {\n-    fn from_cycle_error(tcx: TyCtxt<'tcx>, _: &[QueryInfo]) -> Self {\n+    fn from_cycle_error(tcx: TyCtxt<'tcx>, stack: &[QueryInfo]) -> Self {\n         let err = tcx.ty_error();\n-        // FIXME(compiler-errors): It would be nice if we could get the\n-        // query key, so we could at least generate a fn signature that\n-        // has the right arity.\n+\n+        let arity = if let Some(frame) = stack.get(0)\n+            && frame.query.name == \"fn_sig\"\n+            && let Some(def_id) = frame.query.def_id\n+            && let Some(node) = tcx.hir().get_if_local(def_id)\n+            && let Some(sig) = node.fn_sig()\n+        {\n+            sig.decl.inputs.len() + sig.decl.implicit_self.has_implicit_self() as usize\n+        } else {\n+            tcx.sess.abort_if_errors();\n+            unreachable!()\n+        };\n+\n         let fn_sig = ty::Binder::dummy(tcx.mk_fn_sig(\n-            [].into_iter(),\n+            std::iter::repeat(err).take(arity),\n             err,\n             false,\n             rustc_hir::Unsafety::Normal,"}, {"sha": "7a9b8469c9e19ebfdffa471c6b834f976e6b5c52", "filename": "src/test/ui/query-system/fn-sig-cycle-arity.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/babdf86952d7670512f71d42ee6b9b2d65e05c35/src%2Ftest%2Fui%2Fquery-system%2Ffn-sig-cycle-arity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/babdf86952d7670512f71d42ee6b9b2d65e05c35/src%2Ftest%2Fui%2Fquery-system%2Ffn-sig-cycle-arity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fquery-system%2Ffn-sig-cycle-arity.rs?ref=babdf86952d7670512f71d42ee6b9b2d65e05c35", "patch": "@@ -0,0 +1,8 @@\n+trait Dancer {\n+    fn dance(&self) -> _ {\n+        //~^ ERROR the placeholder `_` is not allowed within types on item signatures for return types\n+        self.dance()\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "67e0c2545515eb402f7dd479034a44a1c39146d8", "filename": "src/test/ui/query-system/fn-sig-cycle-arity.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/babdf86952d7670512f71d42ee6b9b2d65e05c35/src%2Ftest%2Fui%2Fquery-system%2Ffn-sig-cycle-arity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/babdf86952d7670512f71d42ee6b9b2d65e05c35/src%2Ftest%2Fui%2Fquery-system%2Ffn-sig-cycle-arity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fquery-system%2Ffn-sig-cycle-arity.stderr?ref=babdf86952d7670512f71d42ee6b9b2d65e05c35", "patch": "@@ -0,0 +1,9 @@\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for return types\n+  --> $DIR/fn-sig-cycle-arity.rs:2:24\n+   |\n+LL |     fn dance(&self) -> _ {\n+   |                        ^ not allowed in type signatures\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0121`."}]}