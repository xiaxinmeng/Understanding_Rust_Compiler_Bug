{"sha": "89652d66c9bd430e9c59bf5167f30c2016ae1e09", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5NjUyZDY2YzliZDQzMGU5YzU5YmY1MTY3ZjMwYzIwMTZhZTFlMDk=", "commit": {"author": {"name": "Dan Gohman", "email": "sunfish@mozilla.com", "date": "2017-11-10T20:52:06Z"}, "committer": {"name": "Dan Gohman", "email": "sunfish@mozilla.com", "date": "2017-11-10T20:52:06Z"}, "message": "Fix a spello.", "tree": {"sha": "f7648d70b2468baebbea2c1ff189dc162c7b7f6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7648d70b2468baebbea2c1ff189dc162c7b7f6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89652d66c9bd430e9c59bf5167f30c2016ae1e09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89652d66c9bd430e9c59bf5167f30c2016ae1e09", "html_url": "https://github.com/rust-lang/rust/commit/89652d66c9bd430e9c59bf5167f30c2016ae1e09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89652d66c9bd430e9c59bf5167f30c2016ae1e09/comments", "author": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9f0e88f19b691cd3e69be997c4ec75ea14c1db3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9f0e88f19b691cd3e69be997c4ec75ea14c1db3", "html_url": "https://github.com/rust-lang/rust/commit/d9f0e88f19b691cd3e69be997c4ec75ea14c1db3"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "a04092cb5f92da5d50dd6ce0f4698b1d9dd1e448", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89652d66c9bd430e9c59bf5167f30c2016ae1e09/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/89652d66c9bd430e9c59bf5167f30c2016ae1e09/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=89652d66c9bd430e9c59bf5167f30c2016ae1e09", "patch": "@@ -401,7 +401,7 @@ extern \"C\" LLVMTargetMachineRef LLVMRustCreateTargetMachine(\n   // Tell LLVM to translate `unreachable` into an explicit trap instruction.\n   // This limits the extent of possible undefined behavior in some cases, as it\n   // prevents control flow from \"falling through\" into whatever code happens to\n-  // be layed out next in memory.\n+  // be laid out next in memory.\n   Options.TrapUnreachable = true;\n \n   TargetMachine *TM = TheTarget->createTargetMachine("}]}