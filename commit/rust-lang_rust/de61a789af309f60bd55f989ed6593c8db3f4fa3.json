{"sha": "de61a789af309f60bd55f989ed6593c8db3f4fa3", "node_id": "C_kwDOAAsO6NoAKGRlNjFhNzg5YWYzMDlmNjBiZDU1Zjk4OWVkNjU5M2M4ZGIzZjRmYTM", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-03-23T16:31:26Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-03-23T16:31:26Z"}, "message": "Use Cow to reduce numbers of memory clone", "tree": {"sha": "d3a482b222377023287078787992fc06a6b5094a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3a482b222377023287078787992fc06a6b5094a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de61a789af309f60bd55f989ed6593c8db3f4fa3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de61a789af309f60bd55f989ed6593c8db3f4fa3", "html_url": "https://github.com/rust-lang/rust/commit/de61a789af309f60bd55f989ed6593c8db3f4fa3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de61a789af309f60bd55f989ed6593c8db3f4fa3/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8c342c07276e5b1864780ac70b55b52afa3ed60", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8c342c07276e5b1864780ac70b55b52afa3ed60", "html_url": "https://github.com/rust-lang/rust/commit/c8c342c07276e5b1864780ac70b55b52afa3ed60"}], "stats": {"total": 68, "additions": 39, "deletions": 29}, "files": [{"sha": "dd4e652de06a944b8ec2afea3c516340eba0cb29", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 29, "deletions": 25, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/de61a789af309f60bd55f989ed6593c8db3f4fa3/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de61a789af309f60bd55f989ed6593c8db3f4fa3/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=de61a789af309f60bd55f989ed6593c8db3f4fa3", "patch": "@@ -32,6 +32,7 @@ use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{self, ExpnKind};\n \n use std::assert_matches::assert_matches;\n+use std::borrow::Cow;\n use std::collections::hash_map::Entry;\n use std::collections::BTreeMap;\n use std::default::Default;\n@@ -2171,26 +2172,25 @@ fn get_all_import_attributes<'hir>(\n     target_def_id: LocalDefId,\n     is_inline: bool,\n     mut prev_import: LocalDefId,\n-) -> Vec<(ast::Attribute, Option<DefId>)> {\n-    let mut attributes: Vec<(ast::Attribute, Option<DefId>)> = Vec::new();\n+) -> Vec<(Cow<'hir, ast::Attribute>, Option<DefId>)> {\n+    let mut attributes: Vec<(Cow<'hir, ast::Attribute>, Option<DefId>)> = Vec::new();\n     let mut first = true;\n     let hir_map = cx.tcx.hir();\n     let mut visitor = OneLevelVisitor::new(hir_map, target_def_id);\n     let mut visited = FxHashSet::default();\n-    let mut import_attrs = Vec::new();\n \n     // If the item is an import and has at least a path with two parts, we go into it.\n     while let hir::ItemKind::Use(path, _) = item.kind && visited.insert(item.hir_id()) {\n         let import_parent = cx.tcx.opt_local_parent(prev_import).map(|def_id| def_id.to_def_id());\n         if first {\n             // This is the \"original\" reexport so we get all its attributes without filtering them.\n-            attributes = hir_map.attrs(item.hir_id()).iter().cloned().map(|attr| (attr, import_parent)).collect::<Vec<_>>();\n+            attributes = hir_map.attrs(item.hir_id())\n+                .iter()\n+                .map(|attr| (Cow::Borrowed(attr), import_parent))\n+                .collect::<Vec<_>>();\n             first = false;\n         } else {\n-            add_without_unwanted_attributes(&mut import_attrs, hir_map.attrs(item.hir_id()), is_inline);\n-            for attr in import_attrs.drain(..) {\n-                attributes.push((attr, import_parent));\n-            }\n+            add_without_unwanted_attributes(&mut attributes, hir_map.attrs(item.hir_id()), is_inline, import_parent);\n         }\n \n         if let Some(i) = visitor.find_target(cx.tcx, item.owner_id.def_id.to_def_id(), path) {\n@@ -2246,17 +2246,24 @@ fn filter_tokens_from_list(\n /// * `doc(inline)`\n /// * `doc(no_inline)`\n /// * `doc(hidden)`\n-fn add_without_unwanted_attributes(\n-    attrs: &mut Vec<ast::Attribute>,\n-    new_attrs: &[ast::Attribute],\n+fn add_without_unwanted_attributes<'hir>(\n+    attrs: &mut Vec<(Cow<'hir, ast::Attribute>, Option<DefId>)>,\n+    new_attrs: &'hir [ast::Attribute],\n     is_inline: bool,\n+    import_parent: Option<DefId>,\n ) {\n     // If it's not `#[doc(inline)]`, we don't want all attributes, otherwise we keep everything.\n     if !is_inline {\n-        attrs.extend_from_slice(new_attrs);\n+        for attr in new_attrs {\n+            attrs.push((Cow::Borrowed(attr), import_parent));\n+        }\n         return;\n     }\n     for attr in new_attrs {\n+        if matches!(attr.kind, ast::AttrKind::DocComment(..)) {\n+            attrs.push((Cow::Borrowed(attr), import_parent));\n+            continue;\n+        }\n         let mut attr = attr.clone();\n         match attr.kind {\n             ast::AttrKind::Normal(ref mut normal) => {\n@@ -2283,18 +2290,15 @@ fn add_without_unwanted_attributes(\n                                     )\n                                 });\n                             args.tokens = TokenStream::new(tokens);\n-                            attrs.push(attr);\n+                            attrs.push((Cow::Owned(attr), import_parent));\n                         }\n                         ast::AttrArgs::Empty | ast::AttrArgs::Eq(..) => {\n-                            attrs.push(attr);\n-                            continue;\n+                            attrs.push((Cow::Owned(attr), import_parent));\n                         }\n                     }\n                 }\n             }\n-            ast::AttrKind::DocComment(..) => {\n-                attrs.push(attr);\n-            }\n+            _ => unreachable!(),\n         }\n     }\n }\n@@ -2397,23 +2401,23 @@ fn clean_maybe_renamed_item<'tcx>(\n                 import_id,\n             );\n \n-            let mut target_attrs = Vec::new();\n             add_without_unwanted_attributes(\n-                &mut target_attrs,\n+                &mut attrs,\n                 inline::load_attrs(cx, def_id),\n                 is_inline,\n+                None\n             );\n-            for attr in target_attrs.into_iter() {\n-                attrs.push((attr, None));\n-            }\n             attrs\n         } else {\n             // We only keep the item's attributes.\n-            inline::load_attrs(cx, def_id).iter().cloned().map(|attr| (attr, None)).collect::<Vec<_>>()\n+            inline::load_attrs(cx, def_id).iter().map(|attr| (Cow::Borrowed(attr), None)).collect::<Vec<_>>()\n         };\n \n         let cfg = attrs.cfg(cx.tcx, &cx.cache.hidden_cfg);\n-        let attrs = Attributes::from_ast_iter(attrs.iter().map(|(attr, did)| (attr, *did)), false);\n+        let attrs = Attributes::from_ast_iter(attrs.iter().map(|(attr, did)| match attr {\n+            Cow::Borrowed(attr) => (*attr, *did),\n+            Cow::Owned(attr) => (attr, *did)\n+        }), false);\n \n         let mut item =\n             Item::from_def_id_and_attrs_and_parts(def_id, Some(name), kind, Box::new(attrs), cfg);"}, {"sha": "3e7e311cfc52e547475f5be1a0d225b90b6cf44a", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/de61a789af309f60bd55f989ed6593c8db3f4fa3/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de61a789af309f60bd55f989ed6593c8db3f4fa3/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=de61a789af309f60bd55f989ed6593c8db3f4fa3", "patch": "@@ -1,3 +1,4 @@\n+use std::borrow::Cow;\n use std::cell::RefCell;\n use std::default::Default;\n use std::hash::Hash;\n@@ -985,9 +986,11 @@ impl AttributesExt for [ast::Attribute] {\n     }\n }\n \n-impl AttributesExt for [(ast::Attribute, Option<DefId>)] {\n-    type AttributeIterator<'a> = impl Iterator<Item = ast::NestedMetaItem> + 'a;\n-    type Attributes<'a> = impl Iterator<Item = &'a ast::Attribute> + 'a;\n+impl AttributesExt for [(Cow<'_, ast::Attribute>, Option<DefId>)] {\n+    type AttributeIterator<'a> = impl Iterator<Item = ast::NestedMetaItem> + 'a\n+        where Self: 'a;\n+    type Attributes<'a> = impl Iterator<Item = &'a ast::Attribute> + 'a\n+        where Self: 'a;\n \n     fn lists<'a>(&'a self, name: Symbol) -> Self::AttributeIterator<'a> {\n         AttributesExt::iter(self)\n@@ -997,7 +1000,10 @@ impl AttributesExt for [(ast::Attribute, Option<DefId>)] {\n     }\n \n     fn iter<'a>(&'a self) -> Self::Attributes<'a> {\n-        self.into_iter().map(|(attr, _)| attr)\n+        self.into_iter().map(move |(attr, _)| match attr {\n+            Cow::Borrowed(attr) => *attr,\n+            Cow::Owned(attr) => attr,\n+        })\n     }\n }\n "}]}