{"sha": "70dcfd634ea6abe06a6f8c40ca3d294fb0802670", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwZGNmZDYzNGVhNmFiZTA2YTZmOGM0MGNhM2QyOTRmYjA4MDI2NzA=", "commit": {"author": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2016-10-08T23:06:55Z"}, "committer": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2016-10-09T08:49:05Z"}, "message": "Use `try_into` and move some functions", "tree": {"sha": "54e53785cd3f3b5e49dd1aa9ba1a4cfc91be4b4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54e53785cd3f3b5e49dd1aa9ba1a4cfc91be4b4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70dcfd634ea6abe06a6f8c40ca3d294fb0802670", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70dcfd634ea6abe06a6f8c40ca3d294fb0802670", "html_url": "https://github.com/rust-lang/rust/commit/70dcfd634ea6abe06a6f8c40ca3d294fb0802670", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70dcfd634ea6abe06a6f8c40ca3d294fb0802670/comments", "author": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f352f0eec010ff2814ca27ac0e5a84cd533f2918", "url": "https://api.github.com/repos/rust-lang/rust/commits/f352f0eec010ff2814ca27ac0e5a84cd533f2918", "html_url": "https://github.com/rust-lang/rust/commit/f352f0eec010ff2814ca27ac0e5a84cd533f2918"}], "stats": {"total": 66, "additions": 37, "deletions": 29}, "files": [{"sha": "a4272a9f5223b4a66d06c79acd57997e87862e19", "filename": "src/libstd/sys/unix/android.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/70dcfd634ea6abe06a6f8c40ca3d294fb0802670/src%2Flibstd%2Fsys%2Funix%2Fandroid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70dcfd634ea6abe06a6f8c40ca3d294fb0802670/src%2Flibstd%2Fsys%2Funix%2Fandroid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fandroid.rs?ref=70dcfd634ea6abe06a6f8c40ca3d294fb0802670", "patch": "@@ -31,6 +31,7 @@\n use libc::{c_int, c_void, sighandler_t, size_t, ssize_t};\n use libc::{ftruncate, pread, pwrite};\n \n+use convert::TryInto;\n use io;\n use super::{cvt, cvt_r};\n \n@@ -121,11 +122,11 @@ pub unsafe fn cvt_pread64(fd: c_int, buf: *mut c_void, count: size_t, offset: i6\n     weak!(fn pread64(c_int, *mut c_void, size_t, i64) -> ssize_t);\n     unsafe {\n         pread64.get().map(|f| cvt(f(fd, buf, count, offset))).unwrap_or_else(|| {\n-            if offset as u64 > i32::max_value() as u64 {\n+            if let Ok(o) = offset.try_into() {\n+                cvt(pread(fd, buf, count, o))\n+            } else {\n                 Err(io::Error::new(io::Error::InvalidInput,\n                                    \"cannot pread >2GB\"))\n-            } else {\n-                cvt(pread(fd, buf, count, offset as i32))\n             }\n         })\n     }\n@@ -137,11 +138,11 @@ pub unsafe fn cvt_pwrite64(fd: c_int, buf: *const c_void, count: size_t, offset:\n     weak!(fn pwrite64(c_int, *const c_void, size_t, i64) -> ssize_t);\n     unsafe {\n         pwrite64.get().map(|f| cvt(f(fd, buf, count, offset))).unwrap_or_else(|| {\n-            if offset as u64 > i32::max_value() as u64 {\n+            if let Ok(o) = offset.try_into() {\n+                cvt(pwrite(fd, buf, count, o))\n+            } else {\n                 Err(io::Error::new(io::Error::InvalidInput,\n                                    \"cannot pwrite >2GB\"))\n-            } else {\n-                cvt(pwrite(fd, buf, count, offset as i32))\n             }\n         })\n     }"}, {"sha": "41bb96fed16cbcdde027568c572b9d52c4cd2b39", "filename": "src/libstd/sys/unix/fd.rs", "status": "modified", "additions": 30, "deletions": 23, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/70dcfd634ea6abe06a6f8c40ca3d294fb0802670/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70dcfd634ea6abe06a6f8c40ca3d294fb0802670/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffd.rs?ref=70dcfd634ea6abe06a6f8c40ca3d294fb0802670", "patch": "@@ -18,27 +18,6 @@ use sys::cvt;\n use sys_common::AsInner;\n use sys_common::io::read_to_end_uninitialized;\n \n-#[cfg(target_os = \"android\")]\n-use super::android::{cvt_pread64, cvt_pwrite64};\n-#[cfg(any(target_os = \"linux\", target_os = \"emscripten\"))]\n-use libc::{pread64, pwrite64, off64_t, ssize_t};\n-#[cfg(not(any(target_os = \"linux\", target_os = \"emscripten\", target_os = \"android\")))]\n-use libc::{pread as pread64, pwrite as pwrite64, off_t as off64_t, ssize_t};\n-\n-#[cfg(not(target_os = \"android\"))]\n-unsafe fn cvt_pread64(fd: c_int, buf: *mut c_void, count: size_t, offset: off64_t)\n-    -> io::Result<ssize_t>\n-{\n-    cvt(pread64(fd, buf, count, offset))\n-}\n-\n-#[cfg(not(target_os = \"android\"))]\n-unsafe fn cvt_pwrite64(fd: c_int, buf: *const c_void, count: size_t, offset: off64_t)\n-    -> io::Result<ssize_t>\n-{\n-    cvt(pwrite64(fd, buf, count, offset))\n-}\n-\n pub struct FileDesc {\n     fd: c_int,\n }\n@@ -72,11 +51,25 @@ impl FileDesc {\n     }\n \n     pub fn read_at(&self, buf: &mut [u8], offset: u64) -> io::Result<usize> {\n+        #[cfg(target_os = \"android\")]\n+        use super::android::cvt_pread64;\n+\n+        #[cfg(not(target_os = \"android\"))]\n+        unsafe fn cvt_pread64(fd: c_int, buf: *mut c_void, count: usize, offset: i64)\n+            -> io::Result<isize>\n+        {\n+            #[cfg(any(target_os = \"linux\", target_os = \"emscripten\"))]\n+            use libc::pread64;\n+            #[cfg(not(any(target_os = \"linux\", target_os = \"emscripten\")))]\n+            use libc::pread as pread64;\n+            cvt(pread64(fd, buf, count, offset))\n+        }\n+\n         unsafe {\n             cvt_pread64(self.fd,\n                         buf.as_mut_ptr() as *mut c_void,\n                         buf.len(),\n-                        offset as off64_t)\n+                        offset as i64)\n                 .map(|n| n as usize)\n         }\n     }\n@@ -91,11 +84,25 @@ impl FileDesc {\n     }\n \n     pub fn write_at(&self, buf: &[u8], offset: u64) -> io::Result<usize> {\n+        #[cfg(target_os = \"android\")]\n+        use super::android::cvt_pwrite64;\n+\n+        #[cfg(not(target_os = \"android\"))]\n+        unsafe fn cvt_pwrite64(fd: c_int, buf: *const c_void, count: usize, offset: i64)\n+            -> io::Result<isize>\n+        {\n+            #[cfg(any(target_os = \"linux\", target_os = \"emscripten\"))]\n+            use libc::pwrite64;\n+            #[cfg(not(any(target_os = \"linux\", target_os = \"emscripten\")))]\n+            use libc::pwrite as pwrite64;\n+            cvt(pwrite64(fd, buf, count, offset))\n+        }\n+\n         unsafe {\n             cvt_pwrite64(self.fd,\n                          buf.as_ptr() as *const c_void,\n                          buf.len(),\n-                         offset as off64_t)\n+                         offset as i64)\n                 .map(|n| n as usize)\n         }\n     }"}]}