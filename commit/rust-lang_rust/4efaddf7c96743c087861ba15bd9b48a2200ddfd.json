{"sha": "4efaddf7c96743c087861ba15bd9b48a2200ddfd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlZmFkZGY3Yzk2NzQzYzA4Nzg2MWJhMTViZDliNDhhMjIwMGRkZmQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-05T05:03:03Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-13T01:24:34Z"}, "message": "Start restructuring to support generalized where clauses etc.", "tree": {"sha": "6381e7829ecb5fb7b9ff617b671e99f49200fd69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6381e7829ecb5fb7b9ff617b671e99f49200fd69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4efaddf7c96743c087861ba15bd9b48a2200ddfd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4efaddf7c96743c087861ba15bd9b48a2200ddfd", "html_url": "https://github.com/rust-lang/rust/commit/4efaddf7c96743c087861ba15bd9b48a2200ddfd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4efaddf7c96743c087861ba15bd9b48a2200ddfd/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ffc111889e93bcd38222d9d74a70fdc26a78fcb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffc111889e93bcd38222d9d74a70fdc26a78fcb5", "html_url": "https://github.com/rust-lang/rust/commit/ffc111889e93bcd38222d9d74a70fdc26a78fcb5"}], "stats": {"total": 225, "additions": 112, "deletions": 113}, "files": [{"sha": "7ce9893afc8b1cf5b3b1145f2ea44bd1c5a7dbf1", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4efaddf7c96743c087861ba15bd9b48a2200ddfd/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4efaddf7c96743c087861ba15bd9b48a2200ddfd/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=4efaddf7c96743c087861ba15bd9b48a2200ddfd", "patch": "@@ -21,7 +21,6 @@ use middle::def;\n use middle::lang_items;\n use middle::resolve;\n use middle::ty;\n-use middle::subst::VecPerParamSpace;\n \n use rbml;\n use rbml::reader;\n@@ -250,9 +249,8 @@ pub fn get_field_type<'tcx>(tcx: &ty::ctxt<'tcx>, class_id: ast::DefId,\n         });\n     let ty = decoder::item_type(def, the_field, tcx, &*cdata);\n     ty::Polytype {\n-        generics: ty::Generics {types: VecPerParamSpace::empty(),\n-                                regions: VecPerParamSpace::empty()},\n-        ty: ty\n+        generics: ty::Generics::empty(),\n+        ty: ty,\n     }\n }\n "}, {"sha": "8c2fbc078e2e80681fcf9e886a8ae4b0166d3946", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4efaddf7c96743c087861ba15bd9b48a2200ddfd/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4efaddf7c96743c087861ba15bd9b48a2200ddfd/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=4efaddf7c96743c087861ba15bd9b48a2200ddfd", "patch": "@@ -1553,7 +1553,7 @@ impl<'a, 'tcx> rbml_decoder_decoder_helpers<'tcx> for reader::Decoder<'a> {\n                             this.read_struct_field(\"regions\", 1, |this| {\n                                 Ok(this.read_vec_per_param_space(\n                                     |this| Decodable::decode(this).unwrap()))\n-                            }).unwrap()\n+                            }).unwrap(),\n                         })\n                     })\n                 }).unwrap(),"}, {"sha": "f6428efc4e4e7f9e9908677e3f66b6c6c667945b", "filename": "src/librustc/middle/traits/fulfill.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4efaddf7c96743c087861ba15bd9b48a2200ddfd/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4efaddf7c96743c087861ba15bd9b48a2200ddfd/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs?ref=4efaddf7c96743c087861ba15bd9b48a2200ddfd", "patch": "@@ -16,7 +16,7 @@ use std::rc::Rc;\n use util::ppaux::Repr;\n \n use super::CodeAmbiguity;\n-use super::Obligation;\n+use super::TraitObligation;\n use super::FulfillmentError;\n use super::CodeSelectionError;\n use super::select::SelectionContext;\n@@ -41,7 +41,7 @@ pub struct FulfillmentContext<'tcx> {\n \n     // A list of all obligations that have been registered with this\n     // fulfillment context.\n-    trait_obligations: Vec<Obligation<'tcx>>,\n+    trait_obligations: Vec<TraitObligation<'tcx>>,\n \n     // Remembers the count of trait obligations that we have already\n     // attempted to select. This is used to avoid repeating work\n@@ -60,7 +60,7 @@ impl<'tcx> FulfillmentContext<'tcx> {\n \n     pub fn register_obligation(&mut self,\n                                tcx: &ty::ctxt<'tcx>,\n-                               obligation: Obligation<'tcx>)\n+                               obligation: TraitObligation<'tcx>)\n     {\n         if self.duplicate_set.insert(obligation.trait_ref.clone()) {\n             debug!(\"register_obligation({})\", obligation.repr(tcx));\n@@ -117,7 +117,7 @@ impl<'tcx> FulfillmentContext<'tcx> {\n         self.select(&mut selcx, false)\n     }\n \n-    pub fn pending_trait_obligations(&self) -> &[Obligation<'tcx>] {\n+    pub fn pending_trait_obligations(&self) -> &[TraitObligation<'tcx>] {\n         self.trait_obligations[]\n     }\n "}, {"sha": "1505fe7561b609351ced435ae39ca0e7c465ab2a", "filename": "src/librustc/middle/traits/mod.rs", "status": "modified", "additions": 23, "deletions": 18, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/4efaddf7c96743c087861ba15bd9b48a2200ddfd/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4efaddf7c96743c087861ba15bd9b48a2200ddfd/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs?ref=4efaddf7c96743c087861ba15bd9b48a2200ddfd", "patch": "@@ -47,22 +47,22 @@ mod util;\n /// provides the required vtable, or else finding a bound that is in\n /// scope. The eventual result is usually a `Selection` (defined below).\n #[deriving(Clone)]\n-pub struct Obligation<'tcx> {\n+pub struct Obligation<'tcx, T> {\n     pub cause: ObligationCause<'tcx>,\n     pub recursion_depth: uint,\n-    pub trait_ref: Rc<ty::TraitRef<'tcx>>,\n+    pub trait_ref: T,\n }\n \n+pub type TraitObligation<'tcx> = Obligation<'tcx, Rc<ty::TraitRef<'tcx>>>;\n+\n /// Why did we incur this obligation? Used for error reporting.\n-#[deriving(Clone)]\n+#[deriving(Copy, Clone)]\n pub struct ObligationCause<'tcx> {\n     pub span: Span,\n     pub code: ObligationCauseCode<'tcx>\n }\n \n-impl<'tcx> Copy for ObligationCause<'tcx> {}\n-\n-#[deriving(Clone)]\n+#[deriving(Copy, Clone)]\n pub enum ObligationCauseCode<'tcx> {\n     /// Not well classified or should be obvious from span.\n     MiscObligation,\n@@ -95,11 +95,11 @@ pub enum ObligationCauseCode<'tcx> {\n     ObjectSized,\n }\n \n-pub type Obligations<'tcx> = subst::VecPerParamSpace<Obligation<'tcx>>;\n+pub type Obligations<'tcx, O> = subst::VecPerParamSpace<Obligation<'tcx, O>>;\n \n-impl<'tcx> Copy for ObligationCauseCode<'tcx> {}\n+pub type TraitObligations<'tcx> = subst::VecPerParamSpace<TraitObligation<'tcx>>;\n \n-pub type Selection<'tcx> = Vtable<'tcx, Obligation<'tcx>>;\n+pub type Selection<'tcx> = Vtable<'tcx, TraitObligation<'tcx>>;\n \n #[deriving(Clone,Show)]\n pub enum SelectionError<'tcx> {\n@@ -109,7 +109,7 @@ pub enum SelectionError<'tcx> {\n }\n \n pub struct FulfillmentError<'tcx> {\n-    pub obligation: Obligation<'tcx>,\n+    pub obligation: TraitObligation<'tcx>,\n     pub code: FulfillmentErrorCode<'tcx>\n }\n \n@@ -230,7 +230,7 @@ pub fn select_inherent_impl<'a,'tcx>(infcx: &InferCtxt<'a,'tcx>,\n                                      impl_def_id: ast::DefId,\n                                      self_ty: Ty<'tcx>)\n                                      -> SelectionResult<'tcx,\n-                                            VtableImplData<'tcx, Obligation<'tcx>>>\n+                                            VtableImplData<'tcx, TraitObligation<'tcx>>>\n {\n     // This routine is only suitable for inherent impls. This is\n     // because it does not attempt to unify the output type parameters\n@@ -279,7 +279,7 @@ pub fn obligations_for_generics<'tcx>(tcx: &ty::ctxt<'tcx>,\n                                       cause: ObligationCause<'tcx>,\n                                       generic_bounds: &ty::GenericBounds<'tcx>,\n                                       type_substs: &subst::VecPerParamSpace<Ty<'tcx>>)\n-                                      -> subst::VecPerParamSpace<Obligation<'tcx>>\n+                                      -> subst::VecPerParamSpace<TraitObligation<'tcx>>\n {\n     util::obligations_for_generics(tcx, cause, 0, generic_bounds, type_substs)\n }\n@@ -288,23 +288,27 @@ pub fn obligation_for_builtin_bound<'tcx>(tcx: &ty::ctxt<'tcx>,\n                                           cause: ObligationCause<'tcx>,\n                                           source_ty: Ty<'tcx>,\n                                           builtin_bound: ty::BuiltinBound)\n-                                          -> Result<Obligation<'tcx>, ErrorReported>\n+                                          -> Result<TraitObligation<'tcx>, ErrorReported>\n {\n     util::obligation_for_builtin_bound(tcx, cause, builtin_bound, 0, source_ty)\n }\n \n-impl<'tcx> Obligation<'tcx> {\n-    pub fn new(cause: ObligationCause<'tcx>, trait_ref: Rc<ty::TraitRef<'tcx>>)\n-               -> Obligation<'tcx> {\n+impl<'tcx,O> Obligation<'tcx,O> {\n+    pub fn new(cause: ObligationCause<'tcx>,\n+               trait_ref: O)\n+               -> Obligation<'tcx, O>\n+    {\n         Obligation { cause: cause,\n                      recursion_depth: 0,\n                      trait_ref: trait_ref }\n     }\n \n-    pub fn misc(span: Span, trait_ref: Rc<ty::TraitRef<'tcx>>) -> Obligation<'tcx> {\n+    pub fn misc(span: Span, trait_ref: O) -> Obligation<'tcx, O> {\n         Obligation::new(ObligationCause::misc(span), trait_ref)\n     }\n+}\n \n+impl<'tcx> Obligation<'tcx,Rc<ty::TraitRef<'tcx>>> {\n     pub fn self_ty(&self) -> Ty<'tcx> {\n         self.trait_ref.self_ty()\n     }\n@@ -406,7 +410,8 @@ impl<N> VtableBuiltinData<N> {\n }\n \n impl<'tcx> FulfillmentError<'tcx> {\n-    fn new(obligation: Obligation<'tcx>, code: FulfillmentErrorCode<'tcx>)\n+    fn new(obligation: TraitObligation<'tcx>,\n+           code: FulfillmentErrorCode<'tcx>)\n            -> FulfillmentError<'tcx>\n     {\n         FulfillmentError { obligation: obligation, code: code }"}, {"sha": "90fc663e8296c9350c66ae832b433992902d8da2", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 52, "deletions": 50, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/4efaddf7c96743c087861ba15bd9b48a2200ddfd/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4efaddf7c96743c087861ba15bd9b48a2200ddfd/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=4efaddf7c96743c087861ba15bd9b48a2200ddfd", "patch": "@@ -17,7 +17,7 @@ use self::Candidate::*;\n use self::BuiltinBoundConditions::*;\n use self::EvaluationResult::*;\n \n-use super::{Obligation, ObligationCause};\n+use super::{TraitObligation, ObligationCause};\n use super::{SelectionError, Unimplemented, Overflow,\n             OutputTypeParameterMismatch};\n use super::{Selection};\n@@ -70,14 +70,14 @@ pub struct SelectionContext<'cx, 'tcx:'cx> {\n }\n \n // A stack that walks back up the stack frame.\n-struct ObligationStack<'prev, 'tcx: 'prev> {\n-    obligation: &'prev Obligation<'tcx>,\n+struct TraitObligationStack<'prev, 'tcx: 'prev> {\n+    obligation: &'prev TraitObligation<'tcx>,\n \n     /// Trait ref from `obligation` but skolemized with the\n     /// selection-context's skolemizer. Used to check for recursion.\n     skol_trait_ref: Rc<ty::TraitRef<'tcx>>,\n \n-    previous: Option<&'prev ObligationStack<'prev, 'tcx>>\n+    previous: Option<&'prev TraitObligationStack<'prev, 'tcx>>\n }\n \n #[deriving(Clone)]\n@@ -213,7 +213,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     /// Evaluates whether the obligation can be satisfied. Returns an indication of whether the\n     /// obligation can be satisfied and, if so, by what means. Never affects surrounding typing\n     /// environment.\n-    pub fn select(&mut self, obligation: &Obligation<'tcx>)\n+    pub fn select(&mut self, obligation: &TraitObligation<'tcx>)\n                   -> SelectionResult<'tcx, Selection<'tcx>> {\n         debug!(\"select({})\", obligation.repr(self.tcx()));\n         assert!(!obligation.trait_ref.has_escaping_regions());\n@@ -229,7 +229,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                                 impl_def_id: ast::DefId,\n                                 obligation_cause: ObligationCause<'tcx>,\n                                 obligation_self_ty: Ty<'tcx>)\n-                                -> SelectionResult<'tcx, VtableImplData<'tcx, Obligation<'tcx>>>\n+                                -> SelectionResult<'tcx, VtableImplData<'tcx, TraitObligation<'tcx>>>\n     {\n         debug!(\"select_inherent_impl(impl_def_id={}, obligation_self_ty={})\",\n                impl_def_id.repr(self.tcx()),\n@@ -260,7 +260,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n     /// Evaluates whether the obligation `obligation` can be satisfied (by any means).\n     pub fn evaluate_obligation(&mut self,\n-                               obligation: &Obligation<'tcx>)\n+                               obligation: &TraitObligation<'tcx>)\n                                -> bool\n     {\n         debug!(\"evaluate_obligation({})\",\n@@ -273,7 +273,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n     fn evaluate_builtin_bound_recursively<'o>(&mut self,\n                                               bound: ty::BuiltinBound,\n-                                              previous_stack: &ObligationStack<'o, 'tcx>,\n+                                              previous_stack: &TraitObligationStack<'o, 'tcx>,\n                                               ty: Ty<'tcx>)\n                                               -> EvaluationResult<'tcx>\n     {\n@@ -296,8 +296,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     }\n \n     fn evaluate_obligation_recursively<'o>(&mut self,\n-                                           previous_stack: Option<&ObligationStack<'o, 'tcx>>,\n-                                           obligation: &Obligation<'tcx>)\n+                                           previous_stack: Option<&TraitObligationStack<'o, 'tcx>>,\n+                                           obligation: &TraitObligation<'tcx>)\n                                            -> EvaluationResult<'tcx>\n     {\n         debug!(\"evaluate_obligation_recursively({})\",\n@@ -312,7 +312,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     }\n \n     fn evaluate_stack<'o>(&mut self,\n-                          stack: &ObligationStack<'o, 'tcx>)\n+                          stack: &TraitObligationStack<'o, 'tcx>)\n                           -> EvaluationResult<'tcx>\n     {\n         // In intercrate mode, whenever any of the types are unbound,\n@@ -392,7 +392,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     /// `obligation_self_ty`. This can be used either for trait or inherent impls.\n     pub fn evaluate_impl(&mut self,\n                          impl_def_id: ast::DefId,\n-                         obligation: &Obligation<'tcx>)\n+                         obligation: &TraitObligation<'tcx>)\n                          -> bool\n     {\n         debug!(\"evaluate_impl(impl_def_id={}, obligation={})\",\n@@ -423,7 +423,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     // candidates. See `doc.rs` and the `Candidate` type for more details.\n \n     fn candidate_from_obligation<'o>(&mut self,\n-                                     stack: &ObligationStack<'o, 'tcx>)\n+                                     stack: &TraitObligationStack<'o, 'tcx>)\n                                      -> SelectionResult<'tcx, Candidate<'tcx>>\n     {\n         // Watch out for overflow. This intentionally bypasses (and does\n@@ -466,7 +466,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     }\n \n     fn candidate_from_obligation_no_cache<'o>(&mut self,\n-                                              stack: &ObligationStack<'o, 'tcx>)\n+                                              stack: &TraitObligationStack<'o, 'tcx>)\n                                               -> SelectionResult<'tcx, Candidate<'tcx>>\n     {\n         if ty::type_is_error(stack.obligation.self_ty()) {\n@@ -626,12 +626,12 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     }\n \n     fn assemble_candidates<'o>(&mut self,\n-                               stack: &ObligationStack<'o, 'tcx>)\n+                               stack: &TraitObligationStack<'o, 'tcx>)\n                                -> Result<CandidateSet<'tcx>, SelectionError<'tcx>>\n     {\n         // Check for overflow.\n \n-        let ObligationStack { obligation, .. } = *stack;\n+        let TraitObligationStack { obligation, .. } = *stack;\n \n         let mut candidates = CandidateSet {\n             vec: Vec::new(),\n@@ -682,7 +682,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     ///\n     /// Never affects inference environment.\n     fn assemble_candidates_from_caller_bounds(&mut self,\n-                                              obligation: &Obligation<'tcx>,\n+                                              obligation: &TraitObligation<'tcx>,\n                                               candidates: &mut CandidateSet<'tcx>)\n                                               -> Result<(),SelectionError<'tcx>>\n     {\n@@ -720,7 +720,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     /// parameters and hence do not affect whether this trait is a match or not. They will be\n     /// unified during the confirmation step.\n     fn assemble_unboxed_closure_candidates(&mut self,\n-                                           obligation: &Obligation<'tcx>,\n+                                           obligation: &TraitObligation<'tcx>,\n                                            candidates: &mut CandidateSet<'tcx>)\n                                            -> Result<(),SelectionError<'tcx>>\n     {\n@@ -762,7 +762,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n     /// Implement one of the `Fn()` family for a fn pointer.\n     fn assemble_fn_pointer_candidates(&mut self,\n-                                      obligation: &Obligation<'tcx>,\n+                                      obligation: &TraitObligation<'tcx>,\n                                       candidates: &mut CandidateSet<'tcx>)\n                                       -> Result<(),SelectionError<'tcx>>\n     {\n@@ -800,7 +800,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n     /// Search for impls that might apply to `obligation`.\n     fn assemble_candidates_from_impls(&mut self,\n-                                      obligation: &Obligation<'tcx>,\n+                                      obligation: &TraitObligation<'tcx>,\n                                       candidates: &mut CandidateSet<'tcx>)\n                                       -> Result<(), SelectionError<'tcx>>\n     {\n@@ -831,7 +831,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     /// obligations are met. Returns true if `candidate` remains viable after this further\n     /// scrutiny.\n     fn winnow_candidate<'o>(&mut self,\n-                            stack: &ObligationStack<'o, 'tcx>,\n+                            stack: &TraitObligationStack<'o, 'tcx>,\n                             candidate: &Candidate<'tcx>)\n                             -> EvaluationResult<'tcx>\n     {\n@@ -846,7 +846,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     }\n \n     fn winnow_selection<'o>(&mut self,\n-                            stack: Option<&ObligationStack<'o, 'tcx>>,\n+                            stack: Option<&TraitObligationStack<'o, 'tcx>>,\n                             selection: Selection<'tcx>)\n                             -> EvaluationResult<'tcx>\n     {\n@@ -885,7 +885,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     /// essentially harmless.  See issue #18453 for more details of\n     /// a case where doing the opposite caused us harm.\n     fn candidate_should_be_dropped_in_favor_of<'o>(&mut self,\n-                                                   stack: &ObligationStack<'o, 'tcx>,\n+                                                   stack: &TraitObligationStack<'o, 'tcx>,\n                                                    candidate_i: &Candidate<'tcx>,\n                                                    candidate_j: &Candidate<'tcx>)\n                                                    -> bool\n@@ -928,7 +928,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n     fn assemble_builtin_bound_candidates<'o>(&mut self,\n                                              bound: ty::BuiltinBound,\n-                                             stack: &ObligationStack<'o, 'tcx>,\n+                                             stack: &TraitObligationStack<'o, 'tcx>,\n                                              candidates: &mut CandidateSet<'tcx>)\n                                              -> Result<(),SelectionError<'tcx>>\n     {\n@@ -1300,7 +1300,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     // type error.  See `doc.rs` for more details.\n \n     fn confirm_candidate(&mut self,\n-                         obligation: &Obligation<'tcx>,\n+                         obligation: &TraitObligation<'tcx>,\n                          candidate: Candidate<'tcx>)\n                          -> Result<Selection<'tcx>,SelectionError<'tcx>>\n     {\n@@ -1343,7 +1343,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     }\n \n     fn confirm_param_candidate(&mut self,\n-                               obligation: &Obligation<'tcx>,\n+                               obligation: &TraitObligation<'tcx>,\n                                param: VtableParamData<'tcx>)\n                                -> Result<VtableParamData<'tcx>,\n                                          SelectionError<'tcx>>\n@@ -1359,9 +1359,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     }\n \n     fn confirm_builtin_candidate(&mut self,\n-                                 obligation: &Obligation<'tcx>,\n+                                 obligation: &TraitObligation<'tcx>,\n                                  bound: ty::BuiltinBound)\n-                                 -> Result<VtableBuiltinData<Obligation<'tcx>>,\n+                                 -> Result<VtableBuiltinData<TraitObligation<'tcx>>,\n                                            SelectionError<'tcx>>\n     {\n         debug!(\"confirm_builtin_candidate({})\",\n@@ -1379,10 +1379,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     }\n \n     fn vtable_builtin_data(&mut self,\n-                           obligation: &Obligation<'tcx>,\n+                           obligation: &TraitObligation<'tcx>,\n                            bound: ty::BuiltinBound,\n                            nested: Vec<Ty<'tcx>>)\n-                           -> VtableBuiltinData<Obligation<'tcx>>\n+                           -> VtableBuiltinData<TraitObligation<'tcx>>\n     {\n         let obligations = nested.iter().map(|&t| {\n             util::obligation_for_builtin_bound(\n@@ -1402,9 +1402,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     }\n \n     fn confirm_impl_candidate(&mut self,\n-                              obligation: &Obligation<'tcx>,\n+                              obligation: &TraitObligation<'tcx>,\n                               impl_def_id: ast::DefId)\n-                              -> Result<VtableImplData<'tcx, Obligation<'tcx>>,\n+                              -> Result<VtableImplData<'tcx, TraitObligation<'tcx>>,\n                                         SelectionError<'tcx>>\n     {\n         debug!(\"confirm_impl_candidate({},{})\",\n@@ -1422,7 +1422,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                    substs: Substs<'tcx>,\n                    cause: ObligationCause<'tcx>,\n                    recursion_depth: uint)\n-                   -> VtableImplData<'tcx, Obligation<'tcx>>\n+                   -> VtableImplData<'tcx, TraitObligation<'tcx>>\n     {\n         let impl_obligations =\n             self.impl_obligations(cause,\n@@ -1435,7 +1435,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     }\n \n     fn confirm_fn_pointer_candidate(&mut self,\n-                                    obligation: &Obligation<'tcx>)\n+                                    obligation: &TraitObligation<'tcx>)\n                                     -> Result<ty::Ty<'tcx>,SelectionError<'tcx>>\n     {\n         debug!(\"confirm_fn_pointer_candidate({})\",\n@@ -1480,7 +1480,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     }\n \n     fn confirm_unboxed_closure_candidate(&mut self,\n-                                         obligation: &Obligation<'tcx>,\n+                                         obligation: &TraitObligation<'tcx>,\n                                          closure_def_id: ast::DefId,\n                                          substs: &Substs<'tcx>)\n                                          -> Result<(),SelectionError<'tcx>>\n@@ -1531,7 +1531,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n     fn rematch_impl(&mut self,\n                     impl_def_id: ast::DefId,\n-                    obligation: &Obligation<'tcx>)\n+                    obligation: &TraitObligation<'tcx>)\n                     -> Substs<'tcx>\n     {\n         match self.match_impl(impl_def_id, obligation) {\n@@ -1550,7 +1550,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n     fn match_impl(&mut self,\n                   impl_def_id: ast::DefId,\n-                  obligation: &Obligation<'tcx>)\n+                  obligation: &TraitObligation<'tcx>)\n                   -> Result<Substs<'tcx>, ()>\n     {\n         let impl_trait_ref = ty::impl_trait_ref(self.tcx(),\n@@ -1577,7 +1577,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     }\n \n     fn fast_reject_trait_refs(&mut self,\n-                              obligation: &Obligation,\n+                              obligation: &TraitObligation,\n                               impl_trait_ref: &ty::TraitRef)\n                               -> bool\n     {\n@@ -1600,7 +1600,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     }\n \n     fn match_trait_refs(&mut self,\n-                        obligation: &Obligation<'tcx>,\n+                        obligation: &TraitObligation<'tcx>,\n                         trait_ref: Rc<ty::TraitRef<'tcx>>)\n                         -> Result<(),()>\n     {\n@@ -1762,13 +1762,13 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     // Miscellany\n \n     fn push_stack<'o,'s:'o>(&mut self,\n-                            previous_stack: Option<&'s ObligationStack<'s, 'tcx>>,\n-                            obligation: &'o Obligation<'tcx>)\n-                            -> ObligationStack<'o, 'tcx>\n+                            previous_stack: Option<&'s TraitObligationStack<'s, 'tcx>>,\n+                            obligation: &'o TraitObligation<'tcx>)\n+                            -> TraitObligationStack<'o, 'tcx>\n     {\n         let skol_trait_ref = obligation.trait_ref.fold_with(&mut self.skolemizer);\n \n-        ObligationStack {\n+        TraitObligationStack {\n             obligation: obligation,\n             skol_trait_ref: skol_trait_ref,\n             previous: previous_stack.map(|p| p), // FIXME variance\n@@ -1790,7 +1790,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                         recursion_depth: uint,\n                         impl_def_id: ast::DefId,\n                         impl_substs: &Substs<'tcx>)\n-                        -> VecPerParamSpace<Obligation<'tcx>>\n+                        -> VecPerParamSpace<TraitObligation<'tcx>>\n     {\n         let impl_generics = ty::lookup_item_type(self.tcx(), impl_def_id).generics;\n         let bounds = impl_generics.to_bounds(self.tcx(), impl_substs);\n@@ -1840,14 +1840,16 @@ impl<'tcx> SelectionCache<'tcx> {\n     }\n }\n \n-impl<'o, 'tcx> ObligationStack<'o, 'tcx> {\n-    fn iter(&self) -> Option<&ObligationStack<'o, 'tcx>> {\n+impl<'o, 'tcx> TraitObligationStack<'o, 'tcx> {\n+    fn iter(&self) -> Option<&TraitObligationStack<'o, 'tcx>> {\n         Some(self)\n     }\n }\n \n-impl<'o, 'tcx> Iterator<&'o ObligationStack<'o, 'tcx>> for Option<&'o ObligationStack<'o, 'tcx>> {\n-    fn next(&mut self) -> Option<&'o ObligationStack<'o, 'tcx>> {\n+impl<'o, 'tcx> Iterator<&'o TraitObligationStack<'o,'tcx>>\n+           for Option<&'o TraitObligationStack<'o, 'tcx>>\n+{\n+    fn next(&mut self) -> Option<&'o TraitObligationStack<'o, 'tcx>> {\n         match *self {\n             Some(o) => {\n                 *self = o.previous;\n@@ -1860,9 +1862,9 @@ impl<'o, 'tcx> Iterator<&'o ObligationStack<'o, 'tcx>> for Option<&'o Obligation\n     }\n }\n \n-impl<'o, 'tcx> Repr<'tcx> for ObligationStack<'o, 'tcx> {\n+impl<'o, 'tcx> Repr<'tcx> for TraitObligationStack<'o, 'tcx> {\n     fn repr(&self, tcx: &ty::ctxt<'tcx>) -> String {\n-        format!(\"ObligationStack({})\",\n+        format!(\"TraitObligationStack({})\",\n                 self.obligation.repr(tcx))\n     }\n }"}, {"sha": "9ffa5b76a9932cf9ef3b98a8af0fda432e52229c", "filename": "src/librustc/middle/traits/util.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4efaddf7c96743c087861ba15bd9b48a2200ddfd/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4efaddf7c96743c087861ba15bd9b48a2200ddfd/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs?ref=4efaddf7c96743c087861ba15bd9b48a2200ddfd", "patch": "@@ -21,7 +21,7 @@ use syntax::codemap::Span;\n use util::common::ErrorReported;\n use util::ppaux::Repr;\n \n-use super::{Obligation, ObligationCause, VtableImpl,\n+use super::{Obligation, ObligationCause, TraitObligation, VtableImpl,\n             VtableParam, VtableParamData, VtableImplData};\n \n ///////////////////////////////////////////////////////////////////////////\n@@ -181,7 +181,7 @@ pub fn obligations_for_generics<'tcx>(tcx: &ty::ctxt<'tcx>,\n                                       recursion_depth: uint,\n                                       generic_bounds: &ty::GenericBounds<'tcx>,\n                                       type_substs: &VecPerParamSpace<Ty<'tcx>>)\n-                                      -> VecPerParamSpace<Obligation<'tcx>>\n+                                      -> VecPerParamSpace<TraitObligation<'tcx>>\n {\n \n     debug!(\"obligations_for_generics(generic_bounds={}, type_substs={})\",\n@@ -213,7 +213,7 @@ fn push_obligations_for_param_bounds<'tcx>(\n     index: uint,\n     param_bounds: &ty::ParamBounds<'tcx>,\n     param_type_substs: &VecPerParamSpace<Ty<'tcx>>,\n-    obligations: &mut VecPerParamSpace<Obligation<'tcx>>)\n+    obligations: &mut VecPerParamSpace<TraitObligation<'tcx>>)\n {\n     let param_ty = *param_type_substs.get(space, index);\n     for builtin_bound in param_bounds.builtin_bounds.iter() {\n@@ -262,7 +262,7 @@ pub fn obligation_for_builtin_bound<'tcx>(\n     builtin_bound: ty::BuiltinBound,\n     recursion_depth: uint,\n     param_ty: Ty<'tcx>)\n-    -> Result<Obligation<'tcx>, ErrorReported>\n+    -> Result<TraitObligation<'tcx>, ErrorReported>\n {\n     let trait_ref = trait_ref_for_builtin_bound(tcx, builtin_bound, param_ty);\n     match trait_ref {\n@@ -294,7 +294,7 @@ pub fn search_trait_and_supertraits_from_bound<'tcx>(tcx: &ty::ctxt<'tcx>,\n     return None;\n }\n \n-impl<'tcx> Repr<'tcx> for super::Obligation<'tcx> {\n+impl<'tcx,O:Repr<'tcx>> Repr<'tcx> for super::Obligation<'tcx, O> {\n     fn repr(&self, tcx: &ty::ctxt<'tcx>) -> String {\n         format!(\"Obligation(trait_ref={},depth={})\",\n                 self.trait_ref.repr(tcx),"}, {"sha": "5f5709f87f7783e2487b021ef6f90ead10b4015a", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4efaddf7c96743c087861ba15bd9b48a2200ddfd/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4efaddf7c96743c087861ba15bd9b48a2200ddfd/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=4efaddf7c96743c087861ba15bd9b48a2200ddfd", "patch": "@@ -1623,8 +1623,10 @@ pub struct Generics<'tcx> {\n \n impl<'tcx> Generics<'tcx> {\n     pub fn empty() -> Generics<'tcx> {\n-        Generics { types: VecPerParamSpace::empty(),\n-                   regions: VecPerParamSpace::empty() }\n+        Generics {\n+            types: VecPerParamSpace::empty(),\n+            regions: VecPerParamSpace::empty(),\n+        }\n     }\n \n     pub fn has_type_params(&self, space: subst::ParamSpace) -> bool {\n@@ -1743,7 +1745,7 @@ pub struct ParameterEnvironment<'tcx> {\n     ///\n     /// Note: This effectively *duplicates* the `bounds` array for\n     /// now.\n-    pub caller_obligations: VecPerParamSpace<traits::Obligation<'tcx>>,\n+    pub caller_obligations: VecPerParamSpace<traits::TraitObligation<'tcx>>,\n \n     /// Caches the results of trait selection. This cache is used\n     /// for things that have to do with the parameters in scope."}, {"sha": "543d2bdd95742b5bd394ae1ef54f7caeee7f860e", "filename": "src/librustc/middle/ty_fold.rs", "status": "modified", "additions": 9, "deletions": 19, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4efaddf7c96743c087861ba15bd9b48a2200ddfd/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4efaddf7c96743c087861ba15bd9b48a2200ddfd/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_fold.rs?ref=4efaddf7c96743c087861ba15bd9b48a2200ddfd", "patch": "@@ -137,11 +137,6 @@ pub trait TypeFolder<'tcx> {\n     fn fold_item_substs(&mut self, i: ty::ItemSubsts<'tcx>) -> ty::ItemSubsts<'tcx> {\n         super_fold_item_substs(self, i)\n     }\n-\n-    fn fold_obligation(&mut self, o: &traits::Obligation<'tcx>)\n-                       -> traits::Obligation<'tcx> {\n-        super_fold_obligation(self, o)\n-    }\n }\n \n ///////////////////////////////////////////////////////////////////////////\n@@ -434,9 +429,15 @@ impl<'tcx> TypeFoldable<'tcx> for ty::UnsizeKind<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for traits::Obligation<'tcx> {\n-    fn fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> traits::Obligation<'tcx> {\n-        folder.fold_obligation(self)\n+impl<'tcx,O> TypeFoldable<'tcx> for traits::Obligation<'tcx,O>\n+    where O : TypeFoldable<'tcx>\n+{\n+    fn fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> traits::Obligation<'tcx, O> {\n+        traits::Obligation {\n+            cause: self.cause,\n+            recursion_depth: self.recursion_depth,\n+            trait_ref: self.trait_ref.fold_with(folder),\n+        }\n     }\n }\n \n@@ -687,17 +688,6 @@ pub fn super_fold_item_substs<'tcx, T: TypeFolder<'tcx>>(this: &mut T,\n     }\n }\n \n-pub fn super_fold_obligation<'tcx, T:TypeFolder<'tcx>>(this: &mut T,\n-                                                       obligation: &traits::Obligation<'tcx>)\n-                                                       -> traits::Obligation<'tcx>\n-{\n-    traits::Obligation {\n-        cause: obligation.cause,\n-        recursion_depth: obligation.recursion_depth,\n-        trait_ref: obligation.trait_ref.fold_with(this),\n-    }\n-}\n-\n ///////////////////////////////////////////////////////////////////////////\n // Higher-ranked things\n "}, {"sha": "7270e66ab5302d12d2fef6fa813b8676ea41ace4", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4efaddf7c96743c087861ba15bd9b48a2200ddfd/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4efaddf7c96743c087861ba15bd9b48a2200ddfd/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=4efaddf7c96743c087861ba15bd9b48a2200ddfd", "patch": "@@ -1841,7 +1841,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n \n     pub fn register_obligation(&self,\n-                               obligation: traits::Obligation<'tcx>)\n+                               obligation: traits::TraitObligation<'tcx>)\n     {\n         debug!(\"register_obligation({})\",\n                obligation.repr(self.tcx()));"}, {"sha": "1f0a486edd380b48c5b782cfa7d27ddc0e138322", "filename": "src/librustc_typeck/check/vtable.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4efaddf7c96743c087861ba15bd9b48a2200ddfd/src%2Flibrustc_typeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4efaddf7c96743c087861ba15bd9b48a2200ddfd/src%2Flibrustc_typeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fvtable.rs?ref=4efaddf7c96743c087861ba15bd9b48a2200ddfd", "patch": "@@ -12,9 +12,9 @@ use check::{FnCtxt, structurally_resolved_type};\n use middle::subst::{SelfSpace, FnSpace};\n use middle::traits;\n use middle::traits::{SelectionError, OutputTypeParameterMismatch, Overflow, Unimplemented};\n-use middle::traits::{Obligation, obligation_for_builtin_bound};\n+use middle::traits::{Obligation, ObligationCause, obligation_for_builtin_bound};\n use middle::traits::{FulfillmentError, CodeSelectionError, CodeAmbiguity};\n-use middle::traits::{ObligationCause};\n+use middle::traits::{TraitObligation};\n use middle::ty::{mod, Ty};\n use middle::infer;\n use std::rc::Rc;\n@@ -323,7 +323,7 @@ pub fn select_all_fcx_obligations_or_error(fcx: &FnCtxt) {\n     }\n }\n \n-fn resolve_trait_ref<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>, obligation: &Obligation<'tcx>)\n+fn resolve_trait_ref<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>, obligation: &TraitObligation<'tcx>)\n                                -> (Rc<ty::TraitRef<'tcx>>, Ty<'tcx>)\n {\n     let trait_ref =\n@@ -354,7 +354,7 @@ pub fn report_fulfillment_error<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n }\n \n pub fn report_selection_error<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n-                                        obligation: &Obligation<'tcx>,\n+                                        obligation: &TraitObligation<'tcx>,\n                                         error: &SelectionError<'tcx>)\n {\n     match *error {\n@@ -411,7 +411,7 @@ pub fn report_selection_error<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n }\n \n pub fn maybe_report_ambiguity<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n-                                        obligation: &Obligation<'tcx>) {\n+                                        obligation: &TraitObligation<'tcx>) {\n     // Unable to successfully determine, probably means\n     // insufficient type information, but could mean\n     // ambiguous impls. The latter *ought* to be a\n@@ -500,7 +500,7 @@ pub fn select_new_fcx_obligations(fcx: &FnCtxt) {\n }\n \n fn note_obligation_cause<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n-                                   obligation: &Obligation<'tcx>) {\n+                                   obligation: &TraitObligation<'tcx>) {\n     let tcx = fcx.tcx();\n     let trait_name = ty::item_path_str(tcx, obligation.trait_ref.def_id);\n     match obligation.cause.code {"}, {"sha": "d29e5a9f43095a61f9731c5533db7194641498c2", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4efaddf7c96743c087861ba15bd9b48a2200ddfd/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4efaddf7c96743c087861ba15bd9b48a2200ddfd/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=4efaddf7c96743c087861ba15bd9b48a2200ddfd", "patch": "@@ -160,8 +160,10 @@ fn lookup_def_ccx(ccx: &CrateCtxt, sp: Span, id: ast::NodeId)\n \n fn no_params<'tcx>(t: Ty<'tcx>) -> ty::Polytype<'tcx> {\n     ty::Polytype {\n-        generics: ty::Generics {types: VecPerParamSpace::empty(),\n-                                regions: VecPerParamSpace::empty()},\n+        generics: ty::Generics {\n+            types: VecPerParamSpace::empty(),\n+            regions: VecPerParamSpace::empty(),\n+        },\n         ty: t\n     }\n }"}]}