{"sha": "27c228fad7d94a500866696f8c48ef1707a2507b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3YzIyOGZhZDdkOTRhNTAwODY2Njk2ZjhjNDhlZjE3MDdhMjUwN2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-14T15:11:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-14T15:11:01Z"}, "message": "auto merge of #6357 : dotdash/rust/fixfmt, r=bstrie\n\nfail!() used to require owned strings but can handle static strings\r\nnow. Also, it can pass its arguments to fmt!() on its own, no need for\r\nthe caller to call fmt!() itself.", "tree": {"sha": "bf394aa7ebda0ae70ae70d03f753d6de4388e939", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf394aa7ebda0ae70ae70d03f753d6de4388e939"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27c228fad7d94a500866696f8c48ef1707a2507b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27c228fad7d94a500866696f8c48ef1707a2507b", "html_url": "https://github.com/rust-lang/rust/commit/27c228fad7d94a500866696f8c48ef1707a2507b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27c228fad7d94a500866696f8c48ef1707a2507b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84745b483f322671f894b9e8d0a462c46275a9d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/84745b483f322671f894b9e8d0a462c46275a9d3", "html_url": "https://github.com/rust-lang/rust/commit/84745b483f322671f894b9e8d0a462c46275a9d3"}, {"sha": "04de8f852c4def51f02eb812f4ecee83d416911b", "url": "https://api.github.com/repos/rust-lang/rust/commits/04de8f852c4def51f02eb812f4ecee83d416911b", "html_url": "https://github.com/rust-lang/rust/commit/04de8f852c4def51f02eb812f4ecee83d416911b"}], "stats": {"total": 1116, "additions": 543, "deletions": 573}, "files": [{"sha": "fa1719c719592a08354af059526250d4fd6e3187", "filename": "doc/rust.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -2386,9 +2386,9 @@ enum List<X> { Nil, Cons(X, @List<X>) }\n let x: List<int> = Cons(10, @Cons(11, @Nil));\n \n match x {\n-    Cons(_, @Nil) => fail!(~\"singleton list\"),\n+    Cons(_, @Nil) => fail!(\"singleton list\"),\n     Cons(*)       => return,\n-    Nil           => fail!(~\"empty list\")\n+    Nil           => fail!(\"empty list\")\n }\n ~~~~\n "}, {"sha": "7e8ad2f582d5e28e15fb1981a7ed80d5dd5c4934", "filename": "doc/tutorial-macros.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/doc%2Ftutorial-macros.md", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/doc%2Ftutorial-macros.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-macros.md?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -223,7 +223,7 @@ match x {\n                 // complicated stuff goes here\n                 return result + val;\n             },\n-            _ => fail!(~\"Didn't get good_2\")\n+            _ => fail!(\"Didn't get good_2\")\n         }\n     }\n     _ => return 0 // default value\n@@ -265,7 +265,7 @@ macro_rules! biased_match (\n biased_match!((x)       ~ (good_1(g1, val)) else { return 0 };\n               binds g1, val )\n biased_match!((g1.body) ~ (good_2(result) )\n-                  else { fail!(~\"Didn't get good_2\") };\n+                  else { fail!(\"Didn't get good_2\") };\n               binds result )\n // complicated stuff goes here\n return result + val;\n@@ -366,7 +366,7 @@ macro_rules! biased_match (\n # fn f(x: t1) -> uint {\n biased_match!(\n     (x)       ~ (good_1(g1, val)) else { return 0 };\n-    (g1.body) ~ (good_2(result) ) else { fail!(~\"Didn't get good_2\") };\n+    (g1.body) ~ (good_2(result) ) else { fail!(\"Didn't get good_2\") };\n     binds val, result )\n // complicated stuff goes here\n return result + val;"}, {"sha": "402cfa84afcba97aced89ff3026ba006435b6c15", "filename": "doc/tutorial-tasks.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/doc%2Ftutorial-tasks.md", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/doc%2Ftutorial-tasks.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-tasks.md?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -325,7 +325,7 @@ let result: Result<int, ()> = do task::try {\n     if some_condition() {\n         calculate_result()\n     } else {\n-        fail!(~\"oops!\");\n+        fail!(\"oops!\");\n     }\n };\n assert!(result.is_err());"}, {"sha": "0f6833aa3d0519218b8464e59664356f8efe5d52", "filename": "src/compiletest/compiletest.rc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Fcompiletest%2Fcompiletest.rc", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Fcompiletest%2Fcompiletest.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rc?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -151,7 +151,7 @@ pub fn str_mode(s: ~str) -> mode {\n       ~\"run-pass\" => mode_run_pass,\n       ~\"pretty\" => mode_pretty,\n       ~\"debug-info\" => mode_debug_info,\n-      _ => fail!(~\"invalid mode\")\n+      _ => fail!(\"invalid mode\")\n     }\n }\n \n@@ -169,7 +169,7 @@ pub fn run_tests(config: config) {\n     let opts = test_opts(config);\n     let tests = make_tests(config);\n     let res = test::run_tests_console(&opts, tests);\n-    if !res { fail!(~\"Some tests failed\"); }\n+    if !res { fail!(\"Some tests failed\"); }\n }\n \n pub fn test_opts(config: config) -> test::TestOpts {"}, {"sha": "681e851b25b31a40c53203b4a9d44eca811c1a0c", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -139,7 +139,7 @@ fn parse_exec_env(line: ~str) -> Option<(~str, ~str)> {\n         match strs.len() {\n           1u => (strs[0], ~\"\"),\n           2u => (strs[0], strs[1]),\n-          n => fail!(fmt!(\"Expected 1 or 2 strings, not %u\", n))\n+          n => fail!(\"Expected 1 or 2 strings, not %u\", n)\n         }\n     }\n }"}, {"sha": "92daf2cb367cd2b39f846dc3219e8435a8170d42", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -561,7 +561,7 @@ fn compose_and_run_compiler(\n fn ensure_dir(path: &Path) {\n     if os::path_is_dir(path) { return; }\n     if !os::make_dir(path, 0x1c0i32) {\n-        fail!(fmt!(\"can't make dir %s\", path.to_str()));\n+        fail!(\"can't make dir %s\", path.to_str());\n     }\n }\n "}, {"sha": "cacde5535db4dcd7250a98b147956f7618d9d791", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -46,7 +46,7 @@ pub impl<T> Cell<T> {\n     fn take(&self) -> T {\n         let this = unsafe { transmute_mut(self) };\n         if this.is_empty() {\n-            fail!(~\"attempt to take an empty cell\");\n+            fail!(\"attempt to take an empty cell\");\n         }\n \n         replace(&mut this.value, None).unwrap()\n@@ -56,7 +56,7 @@ pub impl<T> Cell<T> {\n     fn put_back(&self, value: T) {\n         let this = unsafe { transmute_mut(self) };\n         if !this.is_empty() {\n-            fail!(~\"attempt to put a value back into a full cell\");\n+            fail!(\"attempt to put a value back into a full cell\");\n         }\n         this.value = Some(value);\n     }"}, {"sha": "68f283f1ad848546f52d5b3355863734894918fa", "filename": "src/libcore/char.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -145,7 +145,7 @@ pub fn is_digit_radix(c: char, radix: uint) -> bool {\n #[inline]\n pub fn to_digit(c: char, radix: uint) -> Option<uint> {\n     if radix > 36 {\n-        fail!(fmt!(\"to_digit: radix %? is to high (maximum 36)\", radix));\n+        fail!(\"to_digit: radix %? is to high (maximum 36)\", radix);\n     }\n     let val = match c {\n       '0' .. '9' => c as uint - ('0' as uint),\n@@ -168,7 +168,7 @@ pub fn to_digit(c: char, radix: uint) -> Option<uint> {\n #[inline]\n pub fn from_digit(num: uint, radix: uint) -> Option<char> {\n     if radix > 36 {\n-        fail!(fmt!(\"from_digit: radix %? is to high (maximum 36)\", num));\n+        fail!(\"from_digit: radix %? is to high (maximum 36)\", num);\n     }\n     if num < radix {\n         if num < 10 {\n@@ -241,7 +241,7 @@ pub fn len_utf8_bytes(c: char) -> uint {\n     else if code < max_two_b { 2u }\n     else if code < max_three_b { 3u }\n     else if code < max_four_b { 4u }\n-    else { fail!(~\"invalid character!\") }\n+    else { fail!(\"invalid character!\") }\n }\n \n #[cfg(not(test))]"}, {"sha": "34c60202b3f12607b81e6f7589a7d53b6d693a76", "filename": "src/libcore/comm.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibcore%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibcore%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcomm.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -210,7 +210,7 @@ impl<T: Owned> Peekable<T> for Port<T> {\n             let mut endp = replace(self_endp, None);\n             let peek = match endp {\n                 Some(ref mut endp) => peek(endp),\n-                None => fail!(~\"peeking empty stream\")\n+                None => fail!(\"peeking empty stream\")\n             };\n             *self_endp = endp;\n             peek\n@@ -222,7 +222,7 @@ impl<T: Owned> Selectable for Port<T> {\n     fn header(&mut self) -> *mut PacketHeader {\n             match self.endp {\n                 Some(ref mut endp) => endp.header(),\n-                None => fail!(~\"peeking empty stream\")\n+                None => fail!(\"peeking empty stream\")\n             }\n     }\n }\n@@ -522,7 +522,7 @@ pub fn select2i<A:Selectable, B:Selectable>(a: &mut A, b: &mut B)\n     match wait_many(endpoints) {\n         0 => Left(()),\n         1 => Right(()),\n-        _ => fail!(~\"wait returned unexpected index\"),\n+        _ => fail!(\"wait returned unexpected index\"),\n     }\n }\n "}, {"sha": "618a484a515ed874dce8d84a04b877d44b82740b", "filename": "src/libcore/either.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibcore%2Feither.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibcore%2Feither.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Feither.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -135,7 +135,7 @@ pub fn unwrap_left<T,U>(eith: Either<T,U>) -> T {\n \n     match eith {\n         Left(x) => x,\n-        Right(_) => fail!(~\"either::unwrap_left Right\")\n+        Right(_) => fail!(\"either::unwrap_left Right\")\n     }\n }\n \n@@ -145,7 +145,7 @@ pub fn unwrap_right<T,U>(eith: Either<T,U>) -> U {\n \n     match eith {\n         Right(x) => x,\n-        Left(_) => fail!(~\"either::unwrap_right Left\")\n+        Left(_) => fail!(\"either::unwrap_right Left\")\n     }\n }\n "}, {"sha": "264b2a78965e51a7a65a73da3be8c9c7fd217f71", "filename": "src/libcore/hashmap.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibcore%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibcore%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhashmap.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -200,7 +200,7 @@ priv impl<K:Hash + Eq,V> HashMap<K, V> {\n     fn value_for_bucket<'a>(&'a self, idx: uint) -> &'a V {\n         match self.buckets[idx] {\n             Some(ref bkt) => &bkt.value,\n-            None => fail!(~\"HashMap::find: internal logic error\"),\n+            None => fail!(\"HashMap::find: internal logic error\"),\n         }\n     }\n \n@@ -217,7 +217,7 @@ priv impl<K:Hash + Eq,V> HashMap<K, V> {\n     /// True if there was no previous entry with that key\n     fn insert_internal(&mut self, hash: uint, k: K, v: V) -> Option<V> {\n         match self.bucket_for_key_with_hash(hash, &k) {\n-            TableFull => { fail!(~\"Internal logic error\"); }\n+            TableFull => { fail!(\"Internal logic error\"); }\n             FoundHole(idx) => {\n                 debug!(\"insert fresh (%?->%?) at idx %?, hash %?\",\n                        k, v, idx, hash);\n@@ -230,7 +230,7 @@ priv impl<K:Hash + Eq,V> HashMap<K, V> {\n                 debug!(\"insert overwrite (%?->%?) at idx %?, hash %?\",\n                        k, v, idx, hash);\n                 match self.buckets[idx] {\n-                    None => { fail!(~\"insert_internal: Internal logic error\") }\n+                    None => { fail!(\"insert_internal: Internal logic error\") }\n                     Some(ref mut b) => {\n                         b.hash = hash;\n                         b.key = k;\n@@ -500,7 +500,7 @@ pub impl<K: Hash + Eq, V> HashMap<K, V> {\n \n         let hash = k.hash_keyed(self.k0, self.k1) as uint;\n         let idx = match self.bucket_for_key_with_hash(hash, &k) {\n-            TableFull => fail!(~\"Internal logic error\"),\n+            TableFull => fail!(\"Internal logic error\"),\n             FoundEntry(idx) => idx,\n             FoundHole(idx) => {\n                 self.buckets[idx] = Some(Bucket{hash: hash, key: k,\n@@ -531,7 +531,7 @@ pub impl<K: Hash + Eq, V> HashMap<K, V> {\n \n         let hash = k.hash_keyed(self.k0, self.k1) as uint;\n         let idx = match self.bucket_for_key_with_hash(hash, &k) {\n-            TableFull => fail!(~\"Internal logic error\"),\n+            TableFull => fail!(\"Internal logic error\"),\n             FoundEntry(idx) => idx,\n             FoundHole(idx) => {\n                 self.buckets[idx] = Some(Bucket{hash: hash, key: k,\n@@ -560,7 +560,7 @@ pub impl<K: Hash + Eq, V> HashMap<K, V> {\n \n         let hash = k.hash_keyed(self.k0, self.k1) as uint;\n         let idx = match self.bucket_for_key_with_hash(hash, &k) {\n-            TableFull => fail!(~\"Internal logic error\"),\n+            TableFull => fail!(\"Internal logic error\"),\n             FoundEntry(idx) => idx,\n             FoundHole(idx) => {\n                 let v = f(&k);\n@@ -592,7 +592,7 @@ pub impl<K: Hash + Eq, V> HashMap<K, V> {\n \n         let hash = k.hash_keyed(self.k0, self.k1) as uint;\n         let idx = match self.bucket_for_key_with_hash(hash, &k) {\n-            TableFull => fail!(~\"Internal logic error\"),\n+            TableFull => fail!(\"Internal logic error\"),\n             FoundEntry(idx) => idx,\n             FoundHole(idx) => {\n                 let v = f(&k);\n@@ -623,7 +623,7 @@ pub impl<K: Hash + Eq, V> HashMap<K, V> {\n     fn get<'a>(&'a self, k: &K) -> &'a V {\n         match self.find(k) {\n             Some(v) => v,\n-            None => fail!(fmt!(\"No entry found for key: %?\", k)),\n+            None => fail!(\"No entry found for key: %?\", k),\n         }\n     }\n "}, {"sha": "2cbf8b9f05ef8e9f29a6020a39549616b1e02996", "filename": "src/libcore/local_data.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibcore%2Flocal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibcore%2Flocal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flocal_data.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -132,15 +132,15 @@ fn test_tls_modify() {\n         fn my_key(_x: @~str) { }\n         local_data_modify(my_key, |data| {\n             match data {\n-                Some(@ref val) => fail!(~\"unwelcome value: \" + *val),\n-                None       => Some(@~\"first data\")\n+                Some(@ref val) => fail!(\"unwelcome value: %s\", *val),\n+                None           => Some(@~\"first data\")\n             }\n         });\n         local_data_modify(my_key, |data| {\n             match data {\n                 Some(@~\"first data\") => Some(@~\"next data\"),\n-                Some(@ref val)           => fail!(~\"wrong value: \" + *val),\n-                None                 => fail!(~\"missing value\")\n+                Some(@ref val)       => fail!(\"wrong value: %s\", *val),\n+                None                 => fail!(\"missing value\")\n             }\n         });\n         assert!(*(local_data_pop(my_key).get()) == ~\"next data\");\n@@ -223,4 +223,4 @@ fn test_static_pointer() {\n         static VALUE: int = 0;\n         local_data_set(key, @&VALUE);\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "af30e87bb0c659a638af22e40cd90b5367dde271", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -772,7 +772,7 @@ pub fn to_str_hex(num: f32) -> ~str {\n pub fn to_str_radix(num: f32, rdx: uint) -> ~str {\n     let (r, special) = strconv::to_str_common(\n         &num, rdx, true, strconv::SignNeg, strconv::DigAll);\n-    if special { fail!(~\"number has a special value, \\\n+    if special { fail!(\"number has a special value, \\\n                       try to_str_radix_special() if those are expected\") }\n     r\n }"}, {"sha": "240d84b84032a17993d8794ab5e13301490dec2f", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -814,7 +814,7 @@ pub fn to_str_hex(num: f64) -> ~str {\n pub fn to_str_radix(num: f64, rdx: uint) -> ~str {\n     let (r, special) = strconv::to_str_common(\n         &num, rdx, true, strconv::SignNeg, strconv::DigAll);\n-    if special { fail!(~\"number has a special value, \\\n+    if special { fail!(\"number has a special value, \\\n                       try to_str_radix_special() if those are expected\") }\n     r\n }"}, {"sha": "8b3c7b1e79ef88bfbc5892bc01a91b4643009479", "filename": "src/libcore/num/float.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibcore%2Fnum%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibcore%2Fnum%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ffloat.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -133,7 +133,7 @@ pub fn to_str_hex(num: float) -> ~str {\n pub fn to_str_radix(num: float, radix: uint) -> ~str {\n     let (r, special) = strconv::to_str_common(\n         &num, radix, true, strconv::SignNeg, strconv::DigAll);\n-    if special { fail!(~\"number has a special value, \\\n+    if special { fail!(\"number has a special value, \\\n                          try to_str_radix_special() if those are expected\") }\n     r\n }"}, {"sha": "348f72f9f0a742836694eec85a2406d9a9e383c6", "filename": "src/libcore/num/int-template.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibcore%2Fnum%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibcore%2Fnum%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint-template.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -89,7 +89,7 @@ pub fn gt(x: T, y: T) -> bool { x > y }\n pub fn _range_step(start: T, stop: T, step: T, it: &fn(T) -> bool) -> bool {\n     let mut i = start;\n     if step == 0 {\n-        fail!(~\"range_step called with step == 0\");\n+        fail!(\"range_step called with step == 0\");\n     } else if step > 0 { // ascending\n         while i < stop {\n             if !it(i) { return false; }\n@@ -923,16 +923,16 @@ mod tests {\n \n         // None of the `fail`s should execute.\n         for range(10,0) |_i| {\n-            fail!(~\"unreachable\");\n+            fail!(\"unreachable\");\n         }\n         for range_rev(0,10) |_i| {\n-            fail!(~\"unreachable\");\n+            fail!(\"unreachable\");\n         }\n         for range_step(10,0,1) |_i| {\n-            fail!(~\"unreachable\");\n+            fail!(\"unreachable\");\n         }\n         for range_step(0,10,-1) |_i| {\n-            fail!(~\"unreachable\");\n+            fail!(\"unreachable\");\n         }\n     }\n "}, {"sha": "1d65b84b7cec1e4dfa5570af5b853e2a87dbbb7c", "filename": "src/libcore/num/strconv.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibcore%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibcore%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fstrconv.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -178,11 +178,9 @@ pub fn to_str_bytes_common<T:NumCast+Zero+One+Eq+Ord+NumStrConv+Copy+\n         num: &T, radix: uint, negative_zero: bool,\n         sign: SignFormat, digits: SignificantDigits) -> (~[u8], bool) {\n     if (radix as int) < 2 {\n-        fail!(fmt!(\"to_str_bytes_common: radix %? to low, \\\n-                   must lie in the range [2, 36]\", radix));\n+        fail!(\"to_str_bytes_common: radix %? to low, must lie in the range [2, 36]\", radix);\n     } else if radix as int > 36 {\n-        fail!(fmt!(\"to_str_bytes_common: radix %? to high, \\\n-                   must lie in the range [2, 36]\", radix));\n+        fail!(\"to_str_bytes_common: radix %? to high, must lie in the range [2, 36]\", radix);\n     }\n \n     let _0: T = Zero::zero();\n@@ -444,20 +442,20 @@ pub fn from_str_bytes_common<T:NumCast+Zero+One+Eq+Ord+Copy+Div<T,T>+\n         ) -> Option<T> {\n     match exponent {\n         ExpDec if radix >= DIGIT_E_RADIX       // decimal exponent 'e'\n-          => fail!(fmt!(\"from_str_bytes_common: radix %? incompatible with \\\n-                        use of 'e' as decimal exponent\", radix)),\n+          => fail!(\"from_str_bytes_common: radix %? incompatible with \\\n+                    use of 'e' as decimal exponent\", radix),\n         ExpBin if radix >= DIGIT_P_RADIX       // binary exponent 'p'\n-          => fail!(fmt!(\"from_str_bytes_common: radix %? incompatible with \\\n-                        use of 'p' as binary exponent\", radix)),\n+          => fail!(\"from_str_bytes_common: radix %? incompatible with \\\n+                    use of 'p' as binary exponent\", radix),\n         _ if special && radix >= DIGIT_I_RADIX // first digit of 'inf'\n-          => fail!(fmt!(\"from_str_bytes_common: radix %? incompatible with \\\n-                        special values 'inf' and 'NaN'\", radix)),\n+          => fail!(\"from_str_bytes_common: radix %? incompatible with \\\n+                    special values 'inf' and 'NaN'\", radix),\n         _ if (radix as int) < 2\n-          => fail!(fmt!(\"from_str_bytes_common: radix %? to low, \\\n-                        must lie in the range [2, 36]\", radix)),\n+          => fail!(\"from_str_bytes_common: radix %? to low, \\\n+                    must lie in the range [2, 36]\", radix),\n         _ if (radix as int) > 36\n-          => fail!(fmt!(\"from_str_bytes_common: radix %? to high, \\\n-                        must lie in the range [2, 36]\", radix)),\n+          => fail!(\"from_str_bytes_common: radix %? to high, \\\n+                    must lie in the range [2, 36]\", radix),\n         _ => ()\n     }\n "}, {"sha": "da0815c264b064aba68934a7462c06c3815fa65b", "filename": "src/libcore/num/uint-template.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibcore%2Fnum%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibcore%2Fnum%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -57,7 +57,7 @@ pub fn _range_step(start: T,\n                    it: &fn(T) -> bool) -> bool {\n     let mut i = start;\n     if step == 0 {\n-        fail!(~\"range_step called with step == 0\");\n+        fail!(\"range_step called with step == 0\");\n     }\n     if step >= 0 {\n         while i < stop {\n@@ -630,16 +630,16 @@ mod tests {\n \n         // None of the `fail`s should execute.\n         for range(0,0) |_i| {\n-            fail!(~\"unreachable\");\n+            fail!(\"unreachable\");\n         }\n         for range_rev(0,0) |_i| {\n-            fail!(~\"unreachable\");\n+            fail!(\"unreachable\");\n         }\n         for range_step(10,0,1) |_i| {\n-            fail!(~\"unreachable\");\n+            fail!(\"unreachable\");\n         }\n         for range_step(0,1,-10) |_i| {\n-            fail!(~\"unreachable\");\n+            fail!(\"unreachable\");\n         }\n     }\n "}, {"sha": "7cffcb10a5321d68ffe0d4b7819e63b90677fa91", "filename": "src/libcore/old_iter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibcore%2Fold_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibcore%2Fold_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fold_iter.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -269,7 +269,7 @@ pub fn min<A:Copy + Ord,IA:BaseIter<A>>(this: &IA) -> A {\n         }\n     } {\n         Some(val) => val,\n-        None => fail!(~\"min called on empty iterator\")\n+        None => fail!(\"min called on empty iterator\")\n     }\n }\n \n@@ -284,7 +284,7 @@ pub fn max<A:Copy + Ord,IA:BaseIter<A>>(this: &IA) -> A {\n         }\n     } {\n         Some(val) => val,\n-        None => fail!(~\"max called on empty iterator\")\n+        None => fail!(\"max called on empty iterator\")\n     }\n }\n "}, {"sha": "9aaa2921fe700acee8efb772f0e78068afeed317", "filename": "src/libcore/option.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -265,7 +265,7 @@ pub impl<T> Option<T> {\n     fn get_ref<'a>(&'a self) -> &'a T {\n         match *self {\n           Some(ref x) => x,\n-          None => fail!(~\"option::get_ref none\")\n+          None => fail!(\"option::get_ref none\")\n         }\n     }\n \n@@ -287,7 +287,7 @@ pub impl<T> Option<T> {\n     fn get_mut_ref<'a>(&'a mut self) -> &'a mut T {\n         match *self {\n           Some(ref mut x) => x,\n-          None => fail!(~\"option::get_mut_ref none\")\n+          None => fail!(\"option::get_mut_ref none\")\n         }\n     }\n \n@@ -311,7 +311,7 @@ pub impl<T> Option<T> {\n          */\n         match self {\n           Some(x) => x,\n-          None => fail!(~\"option::unwrap none\")\n+          None => fail!(\"option::unwrap none\")\n         }\n     }\n \n@@ -325,7 +325,7 @@ pub impl<T> Option<T> {\n      */\n     #[inline(always)]\n     fn swap_unwrap(&mut self) -> T {\n-        if self.is_none() { fail!(~\"option::swap_unwrap none\") }\n+        if self.is_none() { fail!(\"option::swap_unwrap none\") }\n         util::replace(self, None).unwrap()\n     }\n \n@@ -365,7 +365,7 @@ pub impl<T:Copy> Option<T> {\n     fn get(self) -> T {\n         match self {\n           Some(copy x) => return x,\n-          None => fail!(~\"option::get none\")\n+          None => fail!(\"option::get none\")\n         }\n     }\n "}, {"sha": "9129b33fff54502031a959771ef02be15edaa9f3", "filename": "src/libcore/os.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -178,8 +178,7 @@ pub fn env() -> ~[(~str,~str)] {\n             };\n             let ch = GetEnvironmentStringsA();\n             if (ch as uint == 0) {\n-                fail!(fmt!(\"os::env() failure getting env string from OS: %s\",\n-                           os::last_os_error()));\n+                fail!(\"os::env() failure getting env string from OS: %s\", os::last_os_error());\n             }\n             let mut curr_ptr: uint = ch as uint;\n             let mut result = ~[];\n@@ -201,8 +200,7 @@ pub fn env() -> ~[(~str,~str)] {\n             }\n             let environ = rust_env_pairs();\n             if (environ as uint == 0) {\n-                fail!(fmt!(\"os::env() failure getting env string from OS: %s\",\n-                           os::last_os_error()));\n+                fail!(\"os::env() failure getting env string from OS: %s\", os::last_os_error());\n             }\n             let mut result = ~[];\n             ptr::array_each(environ, |e| {\n@@ -744,8 +742,7 @@ pub fn list_dir(p: &Path) -> ~[~str] {\n                     while more_files != 0 {\n                         let fp_buf = rust_list_dir_wfd_fp_buf(wfd_ptr);\n                         if fp_buf as uint == 0 {\n-                            fail!(~\"os::list_dir() failure:\"+\n-                                  ~\" got null ptr from wfd\");\n+                            fail!(\"os::list_dir() failure: got null ptr from wfd\");\n                         }\n                         else {\n                             let fp_vec = vec::from_buf(\n@@ -1062,7 +1059,7 @@ pub fn last_os_error() -> ~str {\n             let err = strerror_r(errno() as c_int, &mut buf[0],\n                                  TMPBUF_SZ as size_t);\n             if err < 0 {\n-                fail!(~\"strerror_r failure\");\n+                fail!(\"strerror_r failure\");\n             }\n \n             str::raw::from_c_str(&buf[0])\n@@ -1100,7 +1097,7 @@ pub fn last_os_error() -> ~str {\n                                      &mut buf[0], TMPBUF_SZ as DWORD,\n                                      ptr::null());\n             if res == 0 {\n-                fail!(fmt!(\"[%?] FormatMessage failure\", errno()));\n+                fail!(\"[%?] FormatMessage failure\", errno());\n             }\n \n             str::raw::from_c_str(&buf[0])\n@@ -1304,7 +1301,7 @@ pub fn glob(pattern: &str) -> ~[Path] {\n /// Returns a vector of Path objects that match the given glob pattern\n #[cfg(target_os = \"win32\")]\n pub fn glob(pattern: &str) -> ~[Path] {\n-    fail!(~\"glob() is unimplemented on Windows\")\n+    fail!(\"glob() is unimplemented on Windows\")\n }\n \n #[cfg(target_os = \"macos\")]\n@@ -1638,7 +1635,7 @@ mod tests {\n           let in_mode = in.get_mode();\n           let rs = os::copy_file(&in, &out);\n           if (!os::path_exists(&in)) {\n-            fail!(fmt!(\"%s doesn't exist\", in.to_str()));\n+            fail!(\"%s doesn't exist\", in.to_str());\n           }\n           assert!((rs));\n           let rslt = run::run_program(~\"diff\", ~[in.to_str(), out.to_str()]);"}, {"sha": "c0cf4c052c50981f0affbca72edfe50b536b948f", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -281,7 +281,7 @@ fn wait_event(this: *rust_task) -> *libc::c_void {\n \n         let killed = rustrt::task_wait_event(this, &mut event);\n         if killed && !task::failing() {\n-            fail!(~\"killed\")\n+            fail!(\"killed\")\n         }\n         event\n     }\n@@ -365,7 +365,7 @@ pub fn send<T,Tbuffer>(mut p: SendPacketBuffered<T,Tbuffer>,\n             //unsafe { forget(p); }\n             return true;\n         }\n-        Full => fail!(~\"duplicate send\"),\n+        Full => fail!(\"duplicate send\"),\n         Blocked => {\n             debug!(\"waking up task for %?\", p_);\n             let old_task = swap_task(&mut p.header.blocked_task, ptr::null());\n@@ -478,7 +478,7 @@ fn try_recv_<T:Owned>(p: &mut Packet<T>) -> Option<T> {\n             debug!(\"woke up, p.state = %?\", copy p.header.state);\n           }\n           Blocked => if first {\n-            fail!(~\"blocking on already blocked packet\")\n+            fail!(\"blocking on already blocked packet\")\n           },\n           Full => {\n             let payload = replace(&mut p.payload, None);\n@@ -514,7 +514,7 @@ pub fn peek<T:Owned,Tb:Owned>(p: &mut RecvPacketBuffered<T, Tb>) -> bool {\n     unsafe {\n         match (*p.header()).state {\n             Empty | Terminated => false,\n-            Blocked => fail!(~\"peeking on blocked packet\"),\n+            Blocked => fail!(\"peeking on blocked packet\"),\n             Full => true\n         }\n     }\n@@ -543,7 +543,7 @@ fn sender_terminate<T:Owned>(p: *mut Packet<T>) {\n       }\n       Full => {\n         // This is impossible\n-        fail!(~\"you dun goofed\")\n+        fail!(\"you dun goofed\")\n       }\n       Terminated => {\n         assert!(p.header.blocked_task.is_null());\n@@ -609,7 +609,7 @@ pub fn wait_many<T: Selectable>(pkts: &mut [T]) -> uint {\n                     (*p).state = old;\n                     break;\n                 }\n-                Blocked => fail!(~\"blocking on blocked packet\"),\n+                Blocked => fail!(\"blocking on blocked packet\"),\n                 Empty => ()\n             }\n         }\n@@ -704,7 +704,7 @@ pub impl<T,Tbuffer> SendPacketBuffered<T,Tbuffer> {\n                 let header = ptr::to_mut_unsafe_ptr(&mut packet.header);\n                 header\n             },\n-            None => fail!(~\"packet already consumed\")\n+            None => fail!(\"packet already consumed\")\n         }\n     }\n \n@@ -758,7 +758,7 @@ impl<T:Owned,Tbuffer:Owned> Selectable for RecvPacketBuffered<T, Tbuffer> {\n                 let header = ptr::to_mut_unsafe_ptr(&mut packet.header);\n                 header\n             },\n-            None => fail!(~\"packet already consumed\")\n+            None => fail!(\"packet already consumed\")\n         }\n     }\n }\n@@ -816,7 +816,7 @@ pub fn select2<A:Owned,Ab:Owned,B:Owned,Bb:Owned>(\n     match i {\n         0 => Left((try_recv(a), b)),\n         1 => Right((a, try_recv(b))),\n-        _ => fail!(~\"select2 return an invalid packet\")\n+        _ => fail!(\"select2 return an invalid packet\")\n     }\n }\n \n@@ -840,7 +840,7 @@ pub fn select2i<A:Selectable,B:Selectable>(a: &mut A, b: &mut B)\n     match wait_many(endpoints) {\n         0 => Left(()),\n         1 => Right(()),\n-        _ => fail!(~\"wait returned unexpected index\")\n+        _ => fail!(\"wait returned unexpected index\")\n     }\n }\n "}, {"sha": "9feb8676036d4399e085ac1e7296620c15df8a38", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -176,7 +176,7 @@ pub fn ref_eq<'a,'b,T>(thing: &'a T, other: &'b T) -> bool {\n pub unsafe fn array_each_with_len<T>(arr: **T, len: uint, cb: &fn(*T)) {\n     debug!(\"array_each_with_len: before iterate\");\n     if (arr as uint == 0) {\n-        fail!(~\"ptr::array_each_with_len failure: arr input is null pointer\");\n+        fail!(\"ptr::array_each_with_len failure: arr input is null pointer\");\n     }\n     //let start_ptr = *arr;\n     uint::iterate(0, len, |e| {\n@@ -198,7 +198,7 @@ pub unsafe fn array_each_with_len<T>(arr: **T, len: uint, cb: &fn(*T)) {\n */\n pub unsafe fn array_each<T>(arr: **T, cb: &fn(*T)) {\n     if (arr as uint == 0) {\n-        fail!(~\"ptr::array_each_with_len failure: arr input is null pointer\");\n+        fail!(\"ptr::array_each_with_len failure: arr input is null pointer\");\n     }\n     let len = buf_len(arr);\n     debug!(\"array_each inferred len: %u\","}, {"sha": "53f51fe1da2f40aea3bf4a3ca10effbdf4bded73", "filename": "src/libcore/repr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibcore%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibcore%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frepr.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -532,7 +532,7 @@ impl TyVisitor for ReprVisitor {\n                         -> bool {\n         let var_stk: &mut ~[VariantState] = self.var_stk;\n         match var_stk.pop() {\n-            SearchingFor(*) => fail!(~\"enum value matched no variant\"),\n+            SearchingFor(*) => fail!(\"enum value matched no variant\"),\n             _ => true\n         }\n     }"}, {"sha": "72704a429ed5a926a47f7677763ac3dcc65eb8c7", "filename": "src/libcore/result.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -42,7 +42,7 @@ pub fn get<T:Copy,U>(res: &Result<T, U>) -> T {\n     match *res {\n       Ok(copy t) => t,\n       Err(ref the_err) =>\n-        fail!(fmt!(\"get called on error result: %?\", *the_err))\n+        fail!(\"get called on error result: %?\", *the_err)\n     }\n }\n \n@@ -58,7 +58,7 @@ pub fn get_ref<'a, T, U>(res: &'a Result<T, U>) -> &'a T {\n     match *res {\n         Ok(ref t) => t,\n         Err(ref the_err) =>\n-            fail!(fmt!(\"get_ref called on error result: %?\", *the_err))\n+            fail!(\"get_ref called on error result: %?\", *the_err)\n     }\n }\n \n@@ -73,7 +73,7 @@ pub fn get_ref<'a, T, U>(res: &'a Result<T, U>) -> &'a T {\n pub fn get_err<T, U: Copy>(res: &Result<T, U>) -> U {\n     match *res {\n       Err(copy u) => u,\n-      Ok(_) => fail!(~\"get_err called on ok result\")\n+      Ok(_) => fail!(\"get_err called on ok result\")\n     }\n }\n \n@@ -378,7 +378,7 @@ pub fn iter_vec2<S,T,U:Copy>(ss: &[S], ts: &[T],\n pub fn unwrap<T, U>(res: Result<T, U>) -> T {\n     match res {\n       Ok(t) => t,\n-      Err(_) => fail!(~\"unwrap called on an err result\")\n+      Err(_) => fail!(\"unwrap called on an err result\")\n     }\n }\n \n@@ -387,7 +387,7 @@ pub fn unwrap<T, U>(res: Result<T, U>) -> T {\n pub fn unwrap_err<T, U>(res: Result<T, U>) -> U {\n     match res {\n       Err(u) => u,\n-      Ok(_) => fail!(~\"unwrap called on an ok result\")\n+      Ok(_) => fail!(\"unwrap called on an ok result\")\n     }\n }\n "}, {"sha": "bc945707e624f46db7da8e92025a1c754e9f4557", "filename": "src/libcore/rt/local_services.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibcore%2Frt%2Flocal_services.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibcore%2Frt%2Flocal_services.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Flocal_services.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -163,7 +163,7 @@ pub fn borrow_local_services(f: &fn(&mut LocalServices)) {\n                 f(&mut task.local_services)\n             }\n             None => {\n-                fail!(~\"no local services for schedulers yet\")\n+                fail!(\"no local services for schedulers yet\")\n             }\n         }\n     }\n@@ -177,7 +177,7 @@ pub unsafe fn unsafe_borrow_local_services() -> &mut LocalServices {\n             transmute_mut_region(&mut task.local_services)\n         }\n         None => {\n-            fail!(~\"no local services for schedulers yet\")\n+            fail!(\"no local services for schedulers yet\")\n         }\n     }\n }"}, {"sha": "dda1f27550f08f6a389ddc9eb947e00de26b61ef", "filename": "src/libcore/rt/sched/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibcore%2Frt%2Fsched%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibcore%2Frt%2Fsched%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fsched%2Fmod.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -295,7 +295,7 @@ pub impl Scheduler {\n             Some(DoNothing) => {\n                 None\n             }\n-            None => fail!(fmt!(\"all context switches should have a cleanup job\"))\n+            None => fail!(\"all context switches should have a cleanup job\")\n         };\n         // XXX: Pattern matching mutable pointers above doesn't work\n         // because borrowck thinks the three patterns are conflicting"}, {"sha": "c84e920a17202f897c5ec8078e7a13089189b82c", "filename": "src/libcore/run.rs", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibcore%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibcore%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frun.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -205,29 +205,29 @@ fn spawn_process_internal(prog: &str, args: &[~str],\n \n         let orig_std_in = get_osfhandle(if in_fd > 0 { in_fd } else { 0 }) as HANDLE;\n         if orig_std_in == INVALID_HANDLE_VALUE as HANDLE {\n-            fail!(fmt!(\"failure in get_osfhandle: %s\", os::last_os_error()));\n+            fail!(\"failure in get_osfhandle: %s\", os::last_os_error());\n         }\n         if DuplicateHandle(cur_proc, orig_std_in, cur_proc, &mut si.hStdInput,\n                            0, TRUE, DUPLICATE_SAME_ACCESS) == FALSE {\n-            fail!(fmt!(\"failure in DuplicateHandle: %s\", os::last_os_error()));\n+            fail!(\"failure in DuplicateHandle: %s\", os::last_os_error());\n         }\n \n         let orig_std_out = get_osfhandle(if out_fd > 0 { out_fd } else { 1 }) as HANDLE;\n         if orig_std_out == INVALID_HANDLE_VALUE as HANDLE {\n-            fail!(fmt!(\"failure in get_osfhandle: %s\", os::last_os_error()));\n+            fail!(\"failure in get_osfhandle: %s\", os::last_os_error());\n         }\n         if DuplicateHandle(cur_proc, orig_std_out, cur_proc, &mut si.hStdOutput,\n                            0, TRUE, DUPLICATE_SAME_ACCESS) == FALSE {\n-            fail!(fmt!(\"failure in DuplicateHandle: %s\", os::last_os_error()));\n+            fail!(\"failure in DuplicateHandle: %s\", os::last_os_error());\n         }\n \n         let orig_std_err = get_osfhandle(if err_fd > 0 { err_fd } else { 2 }) as HANDLE;\n         if orig_std_err as HANDLE == INVALID_HANDLE_VALUE as HANDLE {\n-            fail!(fmt!(\"failure in get_osfhandle: %s\", os::last_os_error()));\n+            fail!(\"failure in get_osfhandle: %s\", os::last_os_error());\n         }\n         if DuplicateHandle(cur_proc, orig_std_err, cur_proc, &mut si.hStdError,\n                            0, TRUE, DUPLICATE_SAME_ACCESS) == FALSE {\n-            fail!(fmt!(\"failure in DuplicateHandle: %s\", os::last_os_error()));\n+            fail!(\"failure in DuplicateHandle: %s\", os::last_os_error());\n         }\n \n         let cmd = make_command_line(prog, args);\n@@ -252,7 +252,7 @@ fn spawn_process_internal(prog: &str, args: &[~str],\n         CloseHandle(si.hStdError);\n \n         for create_err.each |msg| {\n-            fail!(fmt!(\"failure in CreateProcess: %s\", *msg));\n+            fail!(\"failure in CreateProcess: %s\", *msg);\n         }\n \n         // We close the thread handle because we don't care about keeping the thread id valid,\n@@ -379,21 +379,21 @@ fn spawn_process_internal(prog: &str, args: &[~str],\n \n         let pid = fork();\n         if pid < 0 {\n-            fail!(fmt!(\"failure in fork: %s\", os::last_os_error()));\n+            fail!(\"failure in fork: %s\", os::last_os_error());\n         } else if pid > 0 {\n             return RunProgramResult {pid: pid, handle: ptr::null()};\n         }\n \n         rustrt::rust_unset_sigprocmask();\n \n         if in_fd > 0 && dup2(in_fd, 0) == -1 {\n-            fail!(fmt!(\"failure in dup2(in_fd, 0): %s\", os::last_os_error()));\n+            fail!(\"failure in dup2(in_fd, 0): %s\", os::last_os_error());\n         }\n         if out_fd > 0 && dup2(out_fd, 1) == -1 {\n-            fail!(fmt!(\"failure in dup2(out_fd, 1): %s\", os::last_os_error()));\n+            fail!(\"failure in dup2(out_fd, 1): %s\", os::last_os_error());\n         }\n         if err_fd > 0 && dup2(err_fd, 2) == -1 {\n-            fail!(fmt!(\"failure in dup3(err_fd, 2): %s\", os::last_os_error()));\n+            fail!(\"failure in dup3(err_fd, 2): %s\", os::last_os_error());\n         }\n         // close all other fds\n         for int::range_rev(getdtablesize() as int - 1, 2) |fd| {\n@@ -403,7 +403,7 @@ fn spawn_process_internal(prog: &str, args: &[~str],\n         for dir.each |dir| {\n             do str::as_c_str(*dir) |dirp| {\n                 if chdir(dirp) == -1 {\n-                    fail!(fmt!(\"failure in chdir: %s\", os::last_os_error()));\n+                    fail!(\"failure in chdir: %s\", os::last_os_error());\n                 }\n             }\n         }\n@@ -415,7 +415,7 @@ fn spawn_process_internal(prog: &str, args: &[~str],\n             do with_argv(prog, args) |argv| {\n                 execvp(*argv, argv);\n                 // execvp only returns if an error occurred\n-                fail!(fmt!(\"failure in execvp: %s\", os::last_os_error()));\n+                fail!(\"failure in execvp: %s\", os::last_os_error());\n             }\n         }\n     }\n@@ -646,8 +646,7 @@ pub fn program_output(prog: &str, args: &[~str]) -> ProgramOutput {\n                 errs = s;\n             }\n             (n, _) => {\n-                fail!(fmt!(\"program_output received an unexpected file \\\n-                           number: %u\", n));\n+                fail!(\"program_output received an unexpected file number: %u\", n);\n             }\n         };\n         count -= 1;\n@@ -713,22 +712,22 @@ pub fn waitpid(pid: pid_t) -> int {\n \n             let proc = OpenProcess(SYNCHRONIZE | PROCESS_QUERY_INFORMATION, FALSE, pid as DWORD);\n             if proc.is_null() {\n-                fail!(fmt!(\"failure in OpenProcess: %s\", os::last_os_error()));\n+                fail!(\"failure in OpenProcess: %s\", os::last_os_error());\n             }\n \n             loop {\n                 let mut status = 0;\n                 if GetExitCodeProcess(proc, &mut status) == FALSE {\n                     CloseHandle(proc);\n-                    fail!(fmt!(\"failure in GetExitCodeProcess: %s\", os::last_os_error()));\n+                    fail!(\"failure in GetExitCodeProcess: %s\", os::last_os_error());\n                 }\n                 if status != STILL_ACTIVE {\n                     CloseHandle(proc);\n                     return status as int;\n                 }\n                 if WaitForSingleObject(proc, INFINITE) == WAIT_FAILED {\n                     CloseHandle(proc);\n-                    fail!(fmt!(\"failure in WaitForSingleObject: %s\", os::last_os_error()));\n+                    fail!(\"failure in WaitForSingleObject: %s\", os::last_os_error());\n                 }\n             }\n         }\n@@ -765,7 +764,7 @@ pub fn waitpid(pid: pid_t) -> int {\n \n         let mut status = 0 as c_int;\n         if unsafe { waitpid(pid, &mut status, 0) } == -1 {\n-            fail!(fmt!(\"failure in waitpid: %s\", os::last_os_error()));\n+            fail!(\"failure in waitpid: %s\", os::last_os_error());\n         }\n \n         return if WIFEXITED(status) {"}, {"sha": "ce9db796b674d533355a035a3da9240f42aed2db", "filename": "src/libcore/str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -1051,8 +1051,8 @@ pub fn _each_split_within<'a>(ss: &'a str,\n \n             (B, Cr, UnderLim) => { B }\n             (B, Cr, OverLim)  if (i - last_start + 1) > lim\n-                              => fail!(fmt!(\"word starting with %? longer than limit!\",\n-                                            self::slice(ss, last_start, i + 1))),\n+                              => fail!(\"word starting with %? longer than limit!\",\n+                                       self::slice(ss, last_start, i + 1)),\n             (B, Cr, OverLim)  => { slice(); slice_start = last_start; B }\n             (B, Ws, UnderLim) => { last_end = i; C }\n             (B, Ws, OverLim)  => { last_end = i; slice(); A }"}, {"sha": "d57bd5528bce4d9e5e9637b772e5c187404c3f3d", "filename": "src/libcore/task/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibcore%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibcore%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fmod.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -198,7 +198,7 @@ pub fn task() -> TaskBuilder {\n priv impl TaskBuilder {\n     fn consume(&mut self) -> TaskBuilder {\n         if self.consumed {\n-            fail!(~\"Cannot copy a task_builder\"); // Fake move mode on self\n+            fail!(\"Cannot copy a task_builder\"); // Fake move mode on self\n         }\n         self.consumed = true;\n         let gen_body = replace(&mut self.gen_body, None);\n@@ -263,7 +263,7 @@ pub impl TaskBuilder {\n         // sending out messages.\n \n         if self.opts.notify_chan.is_some() {\n-            fail!(~\"Can't set multiple future_results for one task!\");\n+            fail!(\"Can't set multiple future_results for one task!\");\n         }\n \n         // Construct the future and give it to the caller.\n@@ -494,7 +494,7 @@ pub fn yield() {\n         let task_ = rt::rust_get_task();\n         let killed = rt::rust_task_yield(task_);\n         if killed && !failing() {\n-            fail!(~\"killed\");\n+            fail!(\"killed\");\n         }\n     }\n }"}, {"sha": "fc38702bc1605e65e821100d3eb956b3bbe67c83", "filename": "src/libcore/task/spawn.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibcore%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibcore%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fspawn.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -569,10 +569,10 @@ pub fn spawn_raw(opts: TaskOpts, f: ~fn()) {\n             spawn_raw_newsched(opts, f)\n         }\n         SchedulerContext => {\n-            fail!(~\"can't spawn from scheduler context\")\n+            fail!(\"can't spawn from scheduler context\")\n         }\n         GlobalContext => {\n-            fail!(~\"can't spawn from global context\")\n+            fail!(\"can't spawn from global context\")\n         }\n     }\n }\n@@ -708,7 +708,7 @@ fn spawn_raw_oldsched(mut opts: TaskOpts, f: ~fn()) {\n \n     fn new_task_in_sched(opts: SchedOpts) -> *rust_task {\n         if opts.foreign_stack_size != None {\n-            fail!(~\"foreign_stack_size scheduler option unimplemented\");\n+            fail!(\"foreign_stack_size scheduler option unimplemented\");\n         }\n \n         let num_threads = match opts.mode {\n@@ -719,11 +719,11 @@ fn spawn_raw_oldsched(mut opts: TaskOpts, f: ~fn()) {\n             SingleThreaded => 1u,\n             ThreadPerCore => unsafe { rt::rust_num_threads() },\n             ThreadPerTask => {\n-                fail!(~\"ThreadPerTask scheduling mode unimplemented\")\n+                fail!(\"ThreadPerTask scheduling mode unimplemented\")\n             }\n             ManualThreads(threads) => {\n                 if threads == 0u {\n-                    fail!(~\"can not create a scheduler with no threads\");\n+                    fail!(\"can not create a scheduler with no threads\");\n                 }\n                 threads\n             }"}, {"sha": "3b35c2fb8047fa3b0c476a484c92773d4edcf23c", "filename": "src/libcore/unstable/exchange_alloc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibcore%2Funstable%2Fexchange_alloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibcore%2Funstable%2Fexchange_alloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Fexchange_alloc.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -46,7 +46,7 @@ stuff in exchange_alloc::malloc\n pub unsafe fn malloc_raw(size: uint) -> *c_void {\n     let p = c_malloc(size as size_t);\n     if p.is_null() {\n-        fail!(~\"Failure in malloc_raw: result ptr is null\");\n+        fail!(\"Failure in malloc_raw: result ptr is null\");\n     }\n     p\n }"}, {"sha": "4d5c3bf7a78a4d617023a5e19cab6cbea0075e5c", "filename": "src/libcore/unstable/sync.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibcore%2Funstable%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibcore%2Funstable%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Fsync.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -198,8 +198,7 @@ pub impl<T:Owned> Exclusive<T> {\n         let rec = self.x.get();\n         do (*rec).lock.lock {\n             if (*rec).failed {\n-                fail!(\n-                    ~\"Poisoned exclusive - another task failed inside!\");\n+                fail!(\"Poisoned exclusive - another task failed inside!\");\n             }\n             (*rec).failed = true;\n             let result = f(&mut (*rec).data);"}, {"sha": "d270fb23aaa1e2d5475cb30f9d4797b879effe2b", "filename": "src/libcore/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibcore%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibcore%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Futil.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -171,7 +171,7 @@ fn choose_weighted_item(v: &[Item]) -> Item {\n \n */\n pub fn unreachable() -> ! {\n-    fail!(~\"internal error: entered unreachable code\");\n+    fail!(\"internal error: entered unreachable code\");\n }\n \n #[cfg(test)]"}, {"sha": "190b493a6f0e63af3d942dd8ffcf205e668d038a", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -237,7 +237,7 @@ pub fn build_sized_opt<A>(size: Option<uint>,\n \n /// Returns the first element of a vector\n pub fn head<'r,T>(v: &'r [T]) -> &'r T {\n-    if v.len() == 0 { fail!(~\"head: empty vector\") }\n+    if v.len() == 0 { fail!(\"head: empty vector\") }\n     &v[0]\n }\n \n@@ -263,7 +263,7 @@ pub fn initn<'r,T>(v: &'r [T], n: uint) -> &'r [T] {\n \n /// Returns the last element of the slice `v`, failing if the slice is empty.\n pub fn last<'r,T>(v: &'r [T]) -> &'r T {\n-    if v.len() == 0 { fail!(~\"last: empty vector\") }\n+    if v.len() == 0 { fail!(\"last: empty vector\") }\n     &v[v.len() - 1]\n }\n \n@@ -587,7 +587,7 @@ pub fn consume_reverse<T>(mut v: ~[T], f: &fn(uint, v: T)) {\n pub fn pop<T>(v: &mut ~[T]) -> T {\n     let ln = v.len();\n     if ln == 0 {\n-        fail!(~\"sorry, cannot vec::pop an empty vector\")\n+        fail!(\"sorry, cannot vec::pop an empty vector\")\n     }\n     let valptr = ptr::to_mut_unsafe_ptr(&mut v[ln - 1u]);\n     unsafe {\n@@ -601,7 +601,7 @@ pub fn pop<T>(v: &mut ~[T]) -> T {\n pub fn pop<T>(v: &mut ~[T]) -> T {\n     let ln = v.len();\n     if ln == 0 {\n-        fail!(~\"sorry, cannot vec::pop an empty vector\")\n+        fail!(\"sorry, cannot vec::pop an empty vector\")\n     }\n     let valptr = ptr::to_mut_unsafe_ptr(&mut v[ln - 1u]);\n     unsafe {\n@@ -620,7 +620,7 @@ pub fn pop<T>(v: &mut ~[T]) -> T {\n pub fn swap_remove<T>(v: &mut ~[T], index: uint) -> T {\n     let ln = v.len();\n     if index >= ln {\n-        fail!(fmt!(\"vec::swap_remove - index %u >= length %u\", index, ln));\n+        fail!(\"vec::swap_remove - index %u >= length %u\", index, ln);\n     }\n     if index < ln - 1 {\n         swap(*v, index, ln - 1);"}, {"sha": "7a29c78dbf4bec6460f28f99d9ad71cdf1b044f4", "filename": "src/libfuzzer/fuzzer.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibfuzzer%2Ffuzzer.rc", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibfuzzer%2Ffuzzer.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfuzzer%2Ffuzzer.rc?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -606,7 +606,7 @@ pub fn check_roundtrip_convergence(code: @~str, maxIters: uint) {\n         run::run_program(~\"diff\",\n                          ~[~\"-w\", ~\"-u\", ~\"round-trip-a.rs\",\n                           ~\"round-trip-b.rs\"]);\n-        fail!(~\"Mismatch\");\n+        fail!(\"Mismatch\");\n     }\n }\n "}, {"sha": "eebb20b19f5e9af85f56c89425121c28af8c5fc2", "filename": "src/librustc/back/rpath.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Frpath.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -173,7 +173,7 @@ pub fn get_install_prefix_rpath(target_triple: &str) -> Path {\n     let install_prefix = env!(\"CFG_PREFIX\");\n \n     if install_prefix == ~\"\" {\n-        fail!(~\"rustc compiled without CFG_PREFIX environment variable\");\n+        fail!(\"rustc compiled without CFG_PREFIX environment variable\");\n     }\n \n     let tlib = filesearch::relative_target_lib_path(target_triple);"}, {"sha": "b11aec5b8417688164fa59b16273f08be45e37c5", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -523,7 +523,7 @@ pub fn host_triple() -> ~str {\n     return if ht != ~\"\" {\n             ht\n         } else {\n-            fail!(~\"rustc built without CFG_BUILD_TRIPLE\")\n+            fail!(\"rustc built without CFG_BUILD_TRIPLE\")\n         };\n }\n \n@@ -917,8 +917,7 @@ mod test {\n         let matches =\n             &match getopts(~[~\"--test\"], optgroups()) {\n               Ok(copy m) => m,\n-              Err(copy f) => fail!(~\"test_switch_implies_cfg_test: \" +\n-                             getopts::fail_str(f))\n+              Err(copy f) => fail!(\"test_switch_implies_cfg_test: %s\", getopts::fail_str(f))\n             };\n         let sessopts = build_session_options(\n             @~\"rustc\", matches, diagnostic::emit);\n@@ -935,8 +934,7 @@ mod test {\n             &match getopts(~[~\"--test\", ~\"--cfg=test\"], optgroups()) {\n               Ok(copy m) => m,\n               Err(copy f) => {\n-                fail!(~\"test_switch_implies_cfg_test_unless_cfg_test: \" +\n-                    getopts::fail_str(f));\n+                fail!(\"test_switch_implies_cfg_test_unless_cfg_test: %s\", getopts::fail_str(f));\n               }\n             };\n         let sessopts = build_session_options("}, {"sha": "ad40faebe0600751c9589e3ec425ef82e848bdde", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -2044,7 +2044,7 @@ pub fn float_width(llt: TypeRef) -> uint {\n               2 => 64u,\n               3 => 80u,\n               4 | 5 => 128u,\n-              _ => fail!(~\"llvm_float_width called on a non-float type\")\n+              _ => fail!(\"llvm_float_width called on a non-float type\")\n             };\n     }\n }"}, {"sha": "c3dd9cdf23bfffe7825e366f4ba1ec9ced44d9b7", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -87,7 +87,7 @@ fn find_item(item_id: int, items: ebml::Doc) -> ebml::Doc {\n fn lookup_item(item_id: int, data: @~[u8]) -> ebml::Doc {\n     let items = reader::get_doc(reader::Doc(data), tag_items);\n     match maybe_find_item(item_id, items) {\n-       None => fail!(fmt!(\"lookup_item: id not found: %d\", item_id)),\n+       None => fail!(\"lookup_item: id not found: %d\", item_id),\n        Some(d) => d\n     }\n }\n@@ -139,7 +139,7 @@ fn item_family(item: ebml::Doc) -> Family {\n       'g' => PublicField,\n       'j' => PrivateField,\n       'N' => InheritedField,\n-       c => fail!(fmt!(\"unexpected family char: %c\", c))\n+       c => fail!(\"unexpected family char: %c\", c)\n     }\n }\n \n@@ -151,7 +151,7 @@ fn item_visibility(item: ebml::Doc) -> ast::visibility {\n                 'y' => ast::public,\n                 'n' => ast::private,\n                 'i' => ast::inherited,\n-                _ => fail!(~\"unknown visibility character\")\n+                _ => fail!(\"unknown visibility character\")\n             }\n         }\n     }\n@@ -458,8 +458,8 @@ pub enum def_like {\n fn def_like_to_def(def_like: def_like) -> ast::def {\n     match def_like {\n         dl_def(def) => return def,\n-        dl_impl(*) => fail!(~\"found impl in def_like_to_def\"),\n-        dl_field => fail!(~\"found field in def_like_to_def\")\n+        dl_impl(*) => fail!(\"found impl in def_like_to_def\"),\n+        dl_field => fail!(\"found field in def_like_to_def\")\n     }\n }\n \n@@ -677,7 +677,7 @@ fn get_self_ty(item: ebml::Doc) -> ast::self_ty_ {\n             'm' => { ast::m_mutbl }\n             'c' => { ast::m_const }\n             _ => {\n-                fail!(fmt!(\"unknown mutability character: `%c`\", ch as char))\n+                fail!(\"unknown mutability character: `%c`\", ch as char)\n             }\n         }\n     }\n@@ -696,7 +696,7 @@ fn get_self_ty(item: ebml::Doc) -> ast::self_ty_ {\n             return ast::sty_region(None, get_mutability(string[1]));\n         }\n         _ => {\n-            fail!(fmt!(\"unknown self type code: `%c`\", self_ty_kind as char));\n+            fail!(\"unknown self type code: `%c`\", self_ty_kind as char);\n         }\n     }\n }\n@@ -998,7 +998,7 @@ fn describe_def(items: ebml::Doc, id: ast::def_id) -> ~str {\n     if id.crate != ast::local_crate { return ~\"external\"; }\n     let it = match maybe_find_item(id.node, items) {\n         Some(it) => it,\n-        None => fail!(fmt!(\"describe_def: item not found %?\", id))\n+        None => fail!(\"describe_def: item not found %?\", id)\n     };\n     return item_family_to_str(item_family(it));\n }\n@@ -1189,7 +1189,7 @@ pub fn translate_def_id(cdata: cmd, did: ast::def_id) -> ast::def_id {\n \n     match cdata.cnum_map.find(&did.crate) {\n       option::Some(&n) => ast::def_id { crate: n, node: did.node },\n-      option::None => fail!(~\"didn't find a crate in the cnum_map\")\n+      option::None => fail!(\"didn't find a crate in the cnum_map\")\n     }\n }\n "}, {"sha": "def24e5bc898d8528deb199cdd896f08d34d9d4f", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -696,7 +696,7 @@ fn purity_static_method_family(p: purity) -> char {\n       unsafe_fn => 'U',\n       pure_fn => 'P',\n       impure_fn => 'F',\n-      _ => fail!(~\"extern fn can't be static\")\n+      _ => fail!(\"extern fn can't be static\")\n     }\n }\n \n@@ -1009,7 +1009,7 @@ fn encode_info_for_item(ecx: @EncodeContext,\n             ebml_w.end_tag();\n         }\n       }\n-      item_mac(*) => fail!(~\"item macros unimplemented\")\n+      item_mac(*) => fail!(\"item macros unimplemented\")\n     }\n }\n \n@@ -1068,7 +1068,7 @@ fn encode_info_for_items(ecx: @EncodeContext,\n                         let mut ebml_w = copy ebml_w;\n                         encode_info_for_item(ecx, &mut ebml_w, i, index, *pt);\n                     }\n-                    _ => fail!(~\"bad item\")\n+                    _ => fail!(\"bad item\")\n                 }\n             }\n         },\n@@ -1087,7 +1087,7 @@ fn encode_info_for_items(ecx: @EncodeContext,\n                                                      abi);\n                     }\n                     // case for separate item and foreign-item tables\n-                    _ => fail!(~\"bad foreign item\")\n+                    _ => fail!(\"bad foreign item\")\n                 }\n             }\n         },"}, {"sha": "82d46c03101e4138495c3eea27eef0b134f375d5", "filename": "src/librustc/metadata/filesearch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -139,7 +139,7 @@ fn make_target_lib_path(sysroot: &Path,\n fn get_or_default_sysroot() -> Path {\n     match os::self_exe_path() {\n       option::Some(ref p) => (*p).pop(),\n-      option::None => fail!(~\"can't determine value for sysroot\")\n+      option::None => fail!(\"can't determine value for sysroot\")\n     }\n }\n \n@@ -207,7 +207,7 @@ fn get_rustpkg_lib_path_nearest() -> Result<Path, ~str> {\n pub fn libdir() -> ~str {\n    let libdir = env!(\"CFG_LIBDIR\");\n    if str::is_empty(libdir) {\n-      fail!(~\"rustc compiled without CFG_LIBDIR environment variable\");\n+      fail!(\"rustc compiled without CFG_LIBDIR environment variable\");\n    }\n    libdir\n }"}, {"sha": "ba2e336b6394dfbed67aa9f97275dd73a3030929", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -142,7 +142,7 @@ pub fn crate_name_from_metas(metas: &[@ast::meta_item]) -> @~str {\n                 _ => fail!()\n             }\n         }\n-        None => fail!(~\"expected to find the crate name\")\n+        None => fail!(\"expected to find the crate name\")\n     }\n }\n "}, {"sha": "cc9a18ea3a3778e1b3d971d1769d45079d574da1", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -219,7 +219,7 @@ fn parse_bound_region(st: @mut PState) -> ty::bound_region {\n         assert!(next(st) == '|');\n         ty::br_cap_avoid(id, @parse_bound_region(st))\n       },\n-      _ => fail!(~\"parse_bound_region: bad input\")\n+      _ => fail!(\"parse_bound_region: bad input\")\n     }\n }\n \n@@ -248,15 +248,15 @@ fn parse_region(st: @mut PState) -> ty::Region {\n       'e' => {\n         ty::re_static\n       }\n-      _ => fail!(~\"parse_region: bad input\")\n+      _ => fail!(\"parse_region: bad input\")\n     }\n }\n \n fn parse_opt<T>(st: @mut PState, f: &fn() -> T) -> Option<T> {\n     match next(st) {\n       'n' => None,\n       's' => Some(f()),\n-      _ => fail!(~\"parse_opt: bad input\")\n+      _ => fail!(\"parse_opt: bad input\")\n     }\n }\n \n@@ -295,7 +295,7 @@ fn parse_ty(st: @mut PState, conv: conv_did) -> ty::t {\n           'D' => return ty::mk_mach_int(ast::ty_i64),\n           'f' => return ty::mk_mach_float(ast::ty_f32),\n           'F' => return ty::mk_mach_float(ast::ty_f64),\n-          _ => fail!(~\"parse_ty: bad numeric type\")\n+          _ => fail!(\"parse_ty: bad numeric type\")\n         }\n       }\n       'c' => return ty::mk_char(),\n@@ -446,7 +446,7 @@ fn parse_purity(c: char) -> purity {\n       'p' => pure_fn,\n       'i' => impure_fn,\n       'c' => extern_fn,\n-      _ => fail!(~\"parse_purity: bad purity\")\n+      _ => fail!(\"parse_purity: bad purity\")\n     }\n }\n \n@@ -467,7 +467,7 @@ fn parse_onceness(c: char) -> ast::Onceness {\n     match c {\n         'o' => ast::Once,\n         'm' => ast::Many,\n-        _ => fail!(~\"parse_onceness: bad onceness\")\n+        _ => fail!(\"parse_onceness: bad onceness\")\n     }\n }\n \n@@ -531,13 +531,13 @@ pub fn parse_def_id(buf: &[u8]) -> ast::def_id {\n \n     let crate_num = match uint::parse_bytes(crate_part, 10u) {\n        Some(cn) => cn as int,\n-       None => fail!(fmt!(\"internal error: parse_def_id: crate number \\\n-                               expected, but found %?\", crate_part))\n+       None => fail!(\"internal error: parse_def_id: crate number expected, but found %?\",\n+                     crate_part)\n     };\n     let def_num = match uint::parse_bytes(def_part, 10u) {\n        Some(dn) => dn as int,\n-       None => fail!(fmt!(\"internal error: parse_def_id: id expected, but \\\n-                               found %?\", def_part))\n+       None => fail!(\"internal error: parse_def_id: id expected, but found %?\",\n+                     def_part)\n     };\n     ast::def_id { crate: crate_num, node: def_num }\n }\n@@ -581,7 +581,7 @@ fn parse_bounds(st: @mut PState, conv: conv_did) -> @ty::ParamBounds {\n                 return @param_bounds;\n             }\n             _ => {\n-                fail!(~\"parse_bounds: bad bounds\")\n+                fail!(\"parse_bounds: bad bounds\")\n             }\n         }\n     }"}, {"sha": "e1b3230b0ffc62a2e522ce6d39a2f4f06dcafdf0", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -332,7 +332,7 @@ fn enc_sty(w: @io::Writer, cx: @ctxt, st: ty::sty) {\n           debug!(\"~~~~ %s\", ~\"]\");\n           w.write_char(']');\n       }\n-      ty::ty_err => fail!(~\"Shouldn't encode error type\")\n+      ty::ty_err => fail!(\"Shouldn't encode error type\")\n     }\n }\n "}, {"sha": "20a56ab0ee90b3d880fb1d9fedae7ee4df922b2a", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -293,7 +293,7 @@ fn simplify_ast(ii: &ast::inlined_item) -> ast::inlined_item {\n                                              span: _}, _) => true,\n               ast::stmt_decl(@codemap::spanned { node: ast::decl_item(_),\n                                              span: _}, _) => false,\n-              ast::stmt_mac(*) => fail!(~\"unexpanded macro in astencode\")\n+              ast::stmt_mac(*) => fail!(\"unexpanded macro in astencode\")\n             }\n         };\n         let blk_sans_items = ast::blk_ {\n@@ -686,7 +686,7 @@ impl vtable_decoder_helpers for reader::Decoder {\n                     )\n                   }\n                   // hard to avoid - user input\n-                  _ => fail!(~\"bad enum variant\")\n+                  _ => fail!(\"bad enum variant\")\n                 }\n             }\n         }"}, {"sha": "faa489e5763f65acc22b8c45b6ba6816bea1feb6", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -241,7 +241,7 @@ pub fn check_item_recursion(sess: Session,\n                     ast_map::node_item(it, _) => {\n                       (v.visit_item)(it, env, v);\n                     }\n-                    _ => fail!(~\"const not bound to an item\")\n+                    _ => fail!(\"const not bound to an item\")\n                   }\n                 }\n               }"}, {"sha": "d859e03811f7fa2fa71bed5818b73965c3e9d8ec", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -147,14 +147,14 @@ pub fn check_exhaustive(cx: @MatchCheckCtxt, sp: span, pats: ~[@pat]) {\n                 ty::ty_enum(id, _) => {\n                     let vid = match *ctor {\n                         variant(id) => id,\n-                        _ => fail!(~\"check_exhaustive: non-variant ctor\"),\n+                        _ => fail!(\"check_exhaustive: non-variant ctor\"),\n                     };\n                     let variants = ty::enum_variants(cx.tcx, id);\n \n                     match variants.find(|v| v.id == vid) {\n                         Some(v) => Some(cx.tcx.sess.str_of(v.name)),\n                         None => {\n-                            fail!(~\"check_exhaustive: bad variant in ctor\")\n+                            fail!(\"check_exhaustive: bad variant in ctor\")\n                         }\n                     }\n                 }\n@@ -382,7 +382,7 @@ pub fn missing_ctor(cx: @MatchCheckCtxt,\n               None => (),\n               Some(val(const_bool(true))) => true_found = true,\n               Some(val(const_bool(false))) => false_found = true,\n-              _ => fail!(~\"impossible case\")\n+              _ => fail!(\"impossible case\")\n             }\n         }\n         if true_found && false_found { None }\n@@ -449,10 +449,10 @@ pub fn ctor_arity(cx: @MatchCheckCtxt, ctor: &ctor, ty: ty::t) -> uint {\n       ty::ty_box(_) | ty::ty_uniq(_) | ty::ty_rptr(*) => 1u,\n       ty::ty_enum(eid, _) => {\n           let id = match *ctor { variant(id) => id,\n-          _ => fail!(~\"impossible case\") };\n+          _ => fail!(\"impossible case\") };\n         match vec::find(*ty::enum_variants(cx.tcx, eid), |v| v.id == id ) {\n             Some(v) => v.args.len(),\n-            None => fail!(~\"impossible case\")\n+            None => fail!(\"impossible case\")\n         }\n       }\n       ty::ty_struct(cid, _) => ty::lookup_struct_fields(cx.tcx, cid).len(),\n@@ -504,7 +504,7 @@ pub fn specialize(cx: @MatchCheckCtxt,\n                                     compare_const_vals(c_hi, &e_v) <= 0\n                             }\n                             single => true,\n-                            _ => fail!(~\"type error\")\n+                            _ => fail!(\"type error\")\n                         };\n                         if match_ {\n                             Some(vec::to_owned(r.tail()))\n@@ -535,7 +535,7 @@ pub fn specialize(cx: @MatchCheckCtxt,\n                                     compare_const_vals(c_hi, &e_v) <= 0\n                             }\n                             single => true,\n-                            _ => fail!(~\"type error\")\n+                            _ => fail!(\"type error\")\n                         };\n                         if match_ {\n                             Some(vec::to_owned(r.tail()))\n@@ -625,7 +625,7 @@ pub fn specialize(cx: @MatchCheckCtxt,\n                             compare_const_vals(c_hi, &e_v) <= 0\n                     }\n                     single => true,\n-                    _ => fail!(~\"type error\")\n+                    _ => fail!(\"type error\")\n                 };\n                 if match_ { Some(vec::to_owned(r.tail())) } else { None }\n             }\n@@ -635,7 +635,7 @@ pub fn specialize(cx: @MatchCheckCtxt,\n                     range(ref lo, ref hi) =>\n                         ((/*bad*/copy *lo), (/*bad*/copy *hi)),\n                     single => return Some(vec::to_owned(r.tail())),\n-                    _ => fail!(~\"type error\")\n+                    _ => fail!(\"type error\")\n                 };\n                 let v_lo = eval_const_expr(cx.tcx, lo),\n                 v_hi = eval_const_expr(cx.tcx, hi);"}, {"sha": "6cc4409aee660b1a56d679e4e59bc78b9e2d0f43", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -467,7 +467,7 @@ pub fn compare_const_vals(a: &const_val, b: &const_val) -> int {\n             1\n         }\n     }\n-    _ => fail!(~\"compare_const_vals: ill-typed comparison\")\n+    _ => fail!(\"compare_const_vals: ill-typed comparison\")\n   }\n }\n "}, {"sha": "41e29132155e7a8b4a53ec80cd29332ad6c87d42", "filename": "src/librustc/middle/freevars.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmiddle%2Ffreevars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmiddle%2Ffreevars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ffreevars.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -48,7 +48,7 @@ fn collect_freevars(def_map: resolve::DefMap, blk: &ast::blk)\n               ast::expr_path(*) | ast::expr_self => {\n                   let mut i = 0;\n                   match def_map.find(&expr.id) {\n-                    None => fail!(~\"path not found\"),\n+                    None => fail!(\"path not found\"),\n                     Some(&df) => {\n                       let mut def = df;\n                       while i < depth {\n@@ -111,7 +111,7 @@ pub fn annotate_freevars(def_map: resolve::DefMap, crate: @ast::crate) ->\n \n pub fn get_freevars(tcx: ty::ctxt, fid: ast::node_id) -> freevar_info {\n     match tcx.freevars.find(&fid) {\n-      None => fail!(~\"get_freevars: \"+int::to_str(fid)+~\" has no freevars\"),\n+      None => fail!(\"get_freevars: %d has no freevars\", fid),\n       Some(&d) => return d\n     }\n }"}, {"sha": "b220379e330fa50665ecec78e14c6ae674b01a29", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -275,11 +275,11 @@ pub fn check_expr(e: @expr, cx: Context, v: visit::vt<Context>) {\n         };\n         if ts.len() != type_param_defs.len() {\n             // Fail earlier to make debugging easier\n-            fail!(fmt!(\"internal error: in kind::check_expr, length \\\n-                       mismatch between actual and declared bounds: actual = \\\n-                        %s, declared = %s\",\n-                       ts.repr(cx.tcx),\n-                       type_param_defs.repr(cx.tcx)));\n+            fail!(\"internal error: in kind::check_expr, length \\\n+                  mismatch between actual and declared bounds: actual = \\\n+                  %s, declared = %s\",\n+                  ts.repr(cx.tcx),\n+                  type_param_defs.repr(cx.tcx));\n         }\n         for vec::each2(**ts, *type_param_defs) |&ty, type_param_def| {\n             check_bounds(cx, type_parameter_id, e.span, ty, type_param_def)"}, {"sha": "2c62130feb170faff74a4f5cc61ae13026683dda", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -127,7 +127,7 @@ pub impl RegionMaps {\n \n         match self.scope_map.find(&id) {\n             Some(&r) => r,\n-            None => { fail!(fmt!(\"No enclosing scope for id %?\", id)); }\n+            None => { fail!(\"No enclosing scope for id %?\", id); }\n         }\n     }\n "}, {"sha": "a962ea07c54225fc79f5288a67720e2e07609181", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -319,7 +319,7 @@ pub fn namespace_for_duplicate_checking_mode(mode: DuplicateCheckingMode)\n         ForbidDuplicateModules | ForbidDuplicateTypes |\n         ForbidDuplicateTypesAndValues => TypeNS,\n         ForbidDuplicateValues => ValueNS,\n-        OverwriteDuplicates => fail!(~\"OverwriteDuplicates has no namespace\")\n+        OverwriteDuplicates => fail!(\"OverwriteDuplicates has no namespace\")\n     }\n }\n \n@@ -605,7 +605,7 @@ pub impl NameBindings {\n     fn get_module(@mut self) -> @mut Module {\n         match self.get_module_if_available() {\n             None => {\n-                fail!(~\"get_module called on a node with no module \\\n+                fail!(\"get_module called on a node with no module \\\n                        definition!\")\n             }\n             Some(module_def) => module_def\n@@ -1336,7 +1336,7 @@ pub impl Resolver {\n             }\n \n             item_mac(*) => {\n-                fail!(~\"item macros unimplemented\")\n+                fail!(\"item macros unimplemented\")\n             }\n         }\n     }\n@@ -1577,7 +1577,7 @@ pub impl Resolver {\n                     match existing_module.parent_link {\n                       NoParentLink |\n                       BlockParentLink(*) => {\n-                        fail!(~\"can't happen\");\n+                        fail!(\"can't happen\");\n                       }\n                       ModuleParentLink(parent_module, ident) => {\n                         let name_bindings = parent_module.children.get(\n@@ -1647,7 +1647,7 @@ pub impl Resolver {\n           def_prim_ty(*) | def_ty_param(*) | def_binding(*) |\n           def_use(*) | def_upvar(*) | def_region(*) |\n           def_typaram_binder(*) | def_label(*) | def_self_ty(*) => {\n-            fail!(fmt!(\"didn't expect `%?`\", def));\n+            fail!(\"didn't expect `%?`\", def);\n           }\n         }\n     }\n@@ -2269,7 +2269,7 @@ pub impl Resolver {\n             }\n             UnboundResult => { /* Continue. */ }\n             UnknownResult => {\n-                fail!(~\"value result should be known at this point\");\n+                fail!(\"value result should be known at this point\");\n             }\n         }\n         match type_result {\n@@ -2279,7 +2279,7 @@ pub impl Resolver {\n             }\n             UnboundResult => { /* Continue. */ }\n             UnknownResult => {\n-                fail!(~\"type result should be known at this point\");\n+                fail!(\"type result should be known at this point\");\n             }\n         }\n \n@@ -3573,7 +3573,7 @@ pub impl Resolver {\n             }\n \n           item_mac(*) => {\n-            fail!(~\"item macros unimplemented\")\n+            fail!(\"item macros unimplemented\")\n           }\n         }\n \n@@ -4310,7 +4310,7 @@ pub impl Resolver {\n             Success(target) => {\n                 match target.bindings.value_def {\n                     None => {\n-                        fail!(~\"resolved name in the value namespace to a \\\n+                        fail!(\"resolved name in the value namespace to a \\\n                               set of name bindings with no def?!\");\n                     }\n                     Some(def) => {\n@@ -4330,7 +4330,7 @@ pub impl Resolver {\n             }\n \n             Indeterminate => {\n-                fail!(~\"unexpected indeterminate result\");\n+                fail!(\"unexpected indeterminate result\");\n             }\n \n             Failed => {\n@@ -4501,7 +4501,7 @@ pub impl Resolver {\n             }\n \n             Indeterminate => {\n-                fail!(~\"indeterminate unexpected\");\n+                fail!(\"indeterminate unexpected\");\n             }\n \n             Success(resulting_module) => {\n@@ -4550,7 +4550,7 @@ pub impl Resolver {\n             }\n \n             Indeterminate => {\n-                fail!(~\"indeterminate unexpected\");\n+                fail!(\"indeterminate unexpected\");\n             }\n \n             Success(resulting_module) => {\n@@ -4660,7 +4660,7 @@ pub impl Resolver {\n                 }\n             }\n             Indeterminate => {\n-                fail!(~\"unexpected indeterminate result\");\n+                fail!(\"unexpected indeterminate result\");\n             }\n             Failed => {\n                 return None;"}, {"sha": "2fc0fdca317228208ceb836eae314a6dc9f3411c", "filename": "src/librustc/middle/resolve_stage0.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmiddle%2Fresolve_stage0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmiddle%2Fresolve_stage0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_stage0.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -320,7 +320,7 @@ pub fn namespace_for_duplicate_checking_mode(mode: DuplicateCheckingMode)\n         ForbidDuplicateModules | ForbidDuplicateTypes |\n         ForbidDuplicateTypesAndValues => TypeNS,\n         ForbidDuplicateValues => ValueNS,\n-        OverwriteDuplicates => fail!(~\"OverwriteDuplicates has no namespace\")\n+        OverwriteDuplicates => fail!(\"OverwriteDuplicates has no namespace\")\n     }\n }\n \n@@ -606,7 +606,7 @@ pub impl NameBindings {\n     fn get_module(@mut self) -> @mut Module {\n         match self.get_module_if_available() {\n             None => {\n-                fail!(~\"get_module called on a node with no module \\\n+                fail!(\"get_module called on a node with no module \\\n                        definition!\")\n             }\n             Some(module_def) => module_def\n@@ -1352,7 +1352,7 @@ pub impl Resolver {\n             }\n \n             item_mac(*) => {\n-                fail!(~\"item macros unimplemented\")\n+                fail!(\"item macros unimplemented\")\n             }\n         }\n     }\n@@ -1593,7 +1593,7 @@ pub impl Resolver {\n                     match existing_module.parent_link {\n                       NoParentLink |\n                       BlockParentLink(*) => {\n-                        fail!(~\"can't happen\");\n+                        fail!(\"can't happen\");\n                       }\n                       ModuleParentLink(parent_module, ident) => {\n                         let name_bindings = parent_module.children.get(\n@@ -1663,7 +1663,7 @@ pub impl Resolver {\n           def_prim_ty(*) | def_ty_param(*) | def_binding(*) |\n           def_use(*) | def_upvar(*) | def_region(*) |\n           def_typaram_binder(*) | def_label(*) | def_self_ty(*) => {\n-            fail!(fmt!(\"didn't expect `%?`\", def));\n+            fail!(\"didn't expect `%?`\", def);\n           }\n         }\n     }\n@@ -2286,7 +2286,7 @@ pub impl Resolver {\n             }\n             UnboundResult => { /* Continue. */ }\n             UnknownResult => {\n-                fail!(~\"value result should be known at this point\");\n+                fail!(\"value result should be known at this point\");\n             }\n         }\n         match type_result {\n@@ -2296,7 +2296,7 @@ pub impl Resolver {\n             }\n             UnboundResult => { /* Continue. */ }\n             UnknownResult => {\n-                fail!(~\"type result should be known at this point\");\n+                fail!(\"type result should be known at this point\");\n             }\n         }\n \n@@ -3599,7 +3599,7 @@ pub impl Resolver {\n             }\n \n           item_mac(*) => {\n-            fail!(~\"item macros unimplemented\")\n+            fail!(\"item macros unimplemented\")\n           }\n         }\n \n@@ -4337,7 +4337,7 @@ pub impl Resolver {\n             Success(target) => {\n                 match target.bindings.value_def {\n                     None => {\n-                        fail!(~\"resolved name in the value namespace to a \\\n+                        fail!(\"resolved name in the value namespace to a \\\n                               set of name bindings with no def?!\");\n                     }\n                     Some(def) => {\n@@ -4357,7 +4357,7 @@ pub impl Resolver {\n             }\n \n             Indeterminate => {\n-                fail!(~\"unexpected indeterminate result\");\n+                fail!(\"unexpected indeterminate result\");\n             }\n \n             Failed => {\n@@ -4528,7 +4528,7 @@ pub impl Resolver {\n             }\n \n             Indeterminate => {\n-                fail!(~\"indeterminate unexpected\");\n+                fail!(\"indeterminate unexpected\");\n             }\n \n             Success(resulting_module) => {\n@@ -4577,7 +4577,7 @@ pub impl Resolver {\n             }\n \n             Indeterminate => {\n-                fail!(~\"indeterminate unexpected\");\n+                fail!(\"indeterminate unexpected\");\n             }\n \n             Success(resulting_module) => {\n@@ -4687,7 +4687,7 @@ pub impl Resolver {\n                 }\n             }\n             Indeterminate => {\n-                fail!(~\"unexpected indeterminate result\");\n+                fail!(\"unexpected indeterminate result\");\n             }\n             Failed => {\n                 return None;"}, {"sha": "d2834a095aa9c461f965d4168d34edc36c2ea00b", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -205,7 +205,7 @@ pub fn opt_eq(tcx: ty::ctxt, a: &Opt, b: &Opt) -> bool {\n                         a_expr = e.get();\n                     }\n                     UnitLikeStructLit(_) => {\n-                        fail!(~\"UnitLikeStructLit should have been handled \\\n+                        fail!(\"UnitLikeStructLit should have been handled \\\n                                above\")\n                     }\n                 }\n@@ -218,7 +218,7 @@ pub fn opt_eq(tcx: ty::ctxt, a: &Opt, b: &Opt) -> bool {\n                         b_expr = e.get();\n                     }\n                     UnitLikeStructLit(_) => {\n-                        fail!(~\"UnitLikeStructLit should have been handled \\\n+                        fail!(\"UnitLikeStructLit should have been handled \\\n                                above\")\n                     }\n                 }"}, {"sha": "cac9bdd186c52270917ee0b61ae2b1555bbaf3d6", "filename": "src/librustc/middle/trans/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -47,7 +47,7 @@ pub fn trans_inline_asm(bcx: block, ia: &ast::inline_asm) -> block {\n \n         let e = match out.node {\n             ast::expr_addr_of(_, e) => e,\n-            _ => fail!(~\"Expression must be addr of\")\n+            _ => fail!(\"Expression must be addr of\")\n         };\n \n         let outty = ty::arg {"}, {"sha": "7015a8b7f8b76c6e2d86951fa0101397e49c3322", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -1985,7 +1985,7 @@ pub fn trans_enum_variant(ccx: @CrateContext,\n         // works. So we have to cast to the destination's view of the type.\n         let llarg = match fcx.llargs.find(&va.id) {\n             Some(&local_mem(x)) => x,\n-            _ => fail!(~\"trans_enum_variant: how do we know this works?\"),\n+            _ => fail!(\"trans_enum_variant: how do we know this works?\"),\n         };\n         let arg_ty = arg_tys[i].ty;\n         memcpy_ty(bcx, lldestptr, llarg, arg_ty);\n@@ -2097,7 +2097,7 @@ pub fn trans_item(ccx: @CrateContext, item: &ast::item) {\n     let path = match ccx.tcx.items.get_copy(&item.id) {\n         ast_map::node_item(_, p) => p,\n         // tjc: ?\n-        _ => fail!(~\"trans_item\"),\n+        _ => fail!(\"trans_item\"),\n     };\n     match item.node {\n       ast::item_fn(ref decl, purity, _abis, ref generics, ref body) => {\n@@ -2390,7 +2390,7 @@ pub fn item_path(ccx: @CrateContext, i: @ast::item) -> path {\n     let base = match ccx.tcx.items.get_copy(&i.id) {\n         ast_map::node_item(_, p) => p,\n             // separate map for paths?\n-        _ => fail!(~\"item_path\")\n+        _ => fail!(\"item_path\")\n     };\n     vec::append(/*bad*/copy *base, ~[path_name(i.ident)])\n }\n@@ -2436,7 +2436,7 @@ pub fn get_item_val(ccx: @CrateContext, id: ast::node_id) -> ValueRef {\n                 set_inline_hint_if_appr(i.attrs, llfn);\n                 llfn\n               }\n-              _ => fail!(~\"get_item_val: weird result in table\")\n+              _ => fail!(\"get_item_val: weird result in table\")\n             }\n           }\n           ast_map::node_trait_method(trait_method, _, pth) => {\n@@ -2493,11 +2493,11 @@ pub fn get_item_val(ccx: @CrateContext, id: ast::node_id) -> ValueRef {\n                       ast::item_enum(_, _) => {\n                         register_fn(ccx, (*v).span, pth, id, enm.attrs)\n                       }\n-                      _ => fail!(~\"node_variant, shouldn't happen\")\n+                      _ => fail!(\"node_variant, shouldn't happen\")\n                     };\n                 }\n                 ast::struct_variant_kind(_) => {\n-                    fail!(~\"struct variant kind unexpected in get_item_val\")\n+                    fail!(\"struct variant kind unexpected in get_item_val\")\n                 }\n             }\n             set_inline_hint(llfn);"}, {"sha": "7f1f35b33ab0d961f10bea76cc393cc1bec2ffc7", "filename": "src/librustc/middle/trans/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -25,7 +25,7 @@ pub fn terminate(cx: block, _: &str) {\n \n pub fn check_not_terminated(cx: block) {\n     if cx.terminated {\n-        fail!(~\"already terminated!\");\n+        fail!(\"already terminated!\");\n     }\n }\n "}, {"sha": "395356095985c6664eebd8bf8df5bd63ae868aba", "filename": "src/librustc/middle/trans/cabi_arm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_arm.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -52,7 +52,7 @@ fn ty_align(ty: TypeRef) -> uint {\n                 let elt = llvm::LLVMGetElementType(ty);\n                 ty_align(elt)\n             }\n-            _ => fail!(~\"ty_align: unhandled type\")\n+            _ => fail!(\"ty_align: unhandled type\")\n         };\n     }\n }\n@@ -84,7 +84,7 @@ fn ty_size(ty: TypeRef) -> uint {\n                 let eltsz = ty_size(elt);\n                 len * eltsz\n             }\n-            _ => fail!(~\"ty_size: unhandled type\")\n+            _ => fail!(\"ty_size: unhandled type\")\n         };\n     }\n }"}, {"sha": "a1f54c2d1827fb5dc5220851cd647034307a70a4", "filename": "src/librustc/middle/trans/cabi_mips.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_mips.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_mips.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_mips.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -60,7 +60,7 @@ fn ty_align(ty: TypeRef) -> uint {\n                 let elt = llvm::LLVMGetElementType(ty);\n                 ty_align(elt)\n             }\n-            _ => fail!(~\"ty_size: unhandled type\")\n+            _ => fail!(\"ty_size: unhandled type\")\n         };\n     }\n }\n@@ -92,7 +92,7 @@ fn ty_size(ty: TypeRef) -> uint {\n               let eltsz = ty_size(elt);\n               len * eltsz\n             }\n-            _ => fail!(~\"ty_size: unhandled type\")\n+            _ => fail!(\"ty_size: unhandled type\")\n         };\n     }\n }"}, {"sha": "3a2ab74c33aa88b8041955cc70a51b525bbaaa84", "filename": "src/librustc/middle/trans/cabi_x86_64.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -89,7 +89,7 @@ fn classify_ty(ty: TypeRef) -> ~[x86_64_reg_class] {\n                     let elt = llvm::LLVMGetElementType(ty);\n                     ty_align(elt)\n                 }\n-                _ => fail!(~\"ty_size: unhandled type\")\n+                _ => fail!(\"ty_size: unhandled type\")\n             };\n         }\n     }\n@@ -121,7 +121,7 @@ fn classify_ty(ty: TypeRef) -> ~[x86_64_reg_class] {\n                   let eltsz = ty_size(elt);\n                   len * eltsz\n                 }\n-                _ => fail!(~\"ty_size: unhandled type\")\n+                _ => fail!(\"ty_size: unhandled type\")\n             };\n         }\n     }\n@@ -214,7 +214,7 @@ fn classify_ty(ty: TypeRef) -> ~[x86_64_reg_class] {\n                         i += 1u;\n                     }\n                 }\n-                _ => fail!(~\"classify: unhandled type\")\n+                _ => fail!(\"classify: unhandled type\")\n             }\n         }\n     }\n@@ -315,7 +315,7 @@ fn llreg_ty(cls: &[x86_64_reg_class]) -> TypeRef {\n                 sse_ds_class => {\n                     tys.push(T_f64());\n                 }\n-                _ => fail!(~\"llregtype: unhandled class\")\n+                _ => fail!(\"llregtype: unhandled class\")\n             }\n             i += 1u;\n         }"}, {"sha": "0b56fe67f8a7024665220d44b21819f955b901e2", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -837,7 +837,7 @@ pub fn create_local_var(bcx: block, local: @ast::local)\n     let name = match local.node.pat.node {\n       ast::pat_ident(_, pth, _) => ast_util::path_to_ident(pth),\n       // FIXME this should be handled (#2533)\n-      _ => fail!(~\"no single variable name for local\")\n+      _ => fail!(\"no single variable name for local\")\n     };\n     let loc = cx.sess.codemap.lookup_char_pos(local.span.lo);\n     let ty = node_id_type(bcx, local.node.id);"}, {"sha": "fcf5d05a744191f36e25bfa554e2b9b7a084d6a0", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -753,7 +753,7 @@ pub fn trans_intrinsic(ccx: @CrateContext,\n             if in_type_size != out_type_size {\n                 let sp = match ccx.tcx.items.get_copy(&ref_id.get()) {\n                     ast_map::node_expr(e) => e.span,\n-                    _ => fail!(~\"transmute has non-expr arg\"),\n+                    _ => fail!(\"transmute has non-expr arg\"),\n                 };\n                 let pluralize = |n| if 1u == n { \"\" } else { \"s\" };\n                 ccx.sess.span_fatal(sp,"}, {"sha": "d4856de21849d3094e51832e970cd8970d0f5a8e", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -257,7 +257,7 @@ pub fn trans_method_callee(bcx: block,\n                                                trait_id, off, vtbl)\n                 }\n                 // how to get rid of this?\n-                None => fail!(~\"trans_method_callee: missing param_substs\")\n+                None => fail!(\"trans_method_callee: missing param_substs\")\n             }\n         }\n         typeck::method_trait(_, off, store) => {\n@@ -269,7 +269,7 @@ pub fn trans_method_callee(bcx: block,\n                                mentry.explicit_self)\n         }\n         typeck::method_self(*) | typeck::method_super(*) => {\n-            fail!(~\"method_self or method_super should have been handled \\\n+            fail!(\"method_self or method_super should have been handled \\\n                 above\")\n         }\n     }\n@@ -317,13 +317,13 @@ pub fn trans_static_method_callee(bcx: block,\n             ast_map::node_trait_method(trait_method, _, _) => {\n                 ast_util::trait_method_to_ty_method(trait_method).ident\n             }\n-            _ => fail!(~\"callee is not a trait method\")\n+            _ => fail!(\"callee is not a trait method\")\n         }\n     } else {\n         let path = csearch::get_item_path(bcx.tcx(), method_id);\n         match path[path.len()-1] {\n             path_name(s) => { s }\n-            path_mod(_) => { fail!(~\"path doesn't have a name?\") }\n+            path_mod(_) => { fail!(\"path doesn't have a name?\") }\n         }\n     };\n     debug!(\"trans_static_method_callee: method_id=%?, callee_id=%?, \\\n@@ -354,7 +354,7 @@ pub fn trans_static_method_callee(bcx: block,\n             FnData {llfn: PointerCast(bcx, lval, llty)}\n         }\n         _ => {\n-            fail!(~\"vtable_param left in monomorphized \\\n+            fail!(\"vtable_param left in monomorphized \\\n                    function's vtable substs\");\n         }\n     }\n@@ -375,7 +375,7 @@ pub fn method_with_name(ccx: @CrateContext, impl_id: ast::def_id,\n             }, _) => {\n             method_from_methods(*ms, name).get()\n           }\n-          _ => fail!(~\"method_with_name\")\n+          _ => fail!(\"method_with_name\")\n         }\n     } else {\n         csearch::get_impl_method(ccx.sess.cstore, impl_id, name)\n@@ -410,7 +410,7 @@ pub fn method_with_name_or_default(ccx: @CrateContext,\n                   }\n               }\n           }\n-          _ => fail!(~\"method_with_name\")\n+          _ => fail!(\"method_with_name\")\n         }\n     } else {\n         csearch::get_impl_method(ccx.sess.cstore, impl_id, name)\n@@ -436,7 +436,7 @@ pub fn method_ty_param_count(ccx: @CrateContext, m_id: ast::def_id,\n                                             _, _)) => {\n                 m.generics.ty_params.len()\n             }\n-            copy e => fail!(fmt!(\"method_ty_param_count %?\", e))\n+            copy e => fail!(\"method_ty_param_count %?\", e)\n         }\n     } else {\n         csearch::get_type_param_count(ccx.sess.cstore, m_id) -\n@@ -495,8 +495,7 @@ pub fn trans_monomorphized_callee(bcx: block,\n           }\n       }\n       typeck::vtable_param(*) => {\n-          fail!(~\"vtable_param left in monomorphized function's \" +\n-              \"vtable substs\");\n+          fail!(\"vtable_param left in monomorphized function's vtable substs\");\n       }\n     };\n \n@@ -752,7 +751,7 @@ pub fn vtable_id(ccx: @CrateContext,\n         }\n \n         // can't this be checked at the callee?\n-        _ => fail!(~\"vtable_id\")\n+        _ => fail!(\"vtable_id\")\n     }\n }\n \n@@ -767,7 +766,7 @@ pub fn get_vtable(ccx: @CrateContext,\n         typeck::vtable_static(id, substs, sub_vtables) => {\n             make_impl_vtable(ccx, id, substs, sub_vtables)\n         }\n-        _ => fail!(~\"get_vtable: expected a static origin\")\n+        _ => fail!(\"get_vtable: expected a static origin\")\n       }\n     }\n }"}, {"sha": "dfae7ca0e889b60772311ed804f48eebbcf5cda4", "filename": "src/librustc/middle/trans/reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmiddle%2Ftrans%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmiddle%2Ftrans%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freachable.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -147,7 +147,7 @@ fn traverse_public_item(cx: @mut ctx, item: @item) {\n       }\n       item_const(*) |\n       item_enum(*) | item_trait(*) => (),\n-      item_mac(*) => fail!(~\"item macros unimplemented\")\n+      item_mac(*) => fail!(\"item macros unimplemented\")\n     }\n }\n "}, {"sha": "c15c31055c36394ef2233b4cc245cfd9c85bbf40", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -154,7 +154,7 @@ pub fn type_uses_for(ccx: @CrateContext, fn_id: def_id, n_tps: uint)\n                 ~\"bswap16\" | ~\"bswap32\" | ~\"bswap64\" => 0,\n \n                 // would be cool to make these an enum instead of strings!\n-                _ => fail!(~\"unknown intrinsic in type_use\")\n+                _ => fail!(\"unknown intrinsic in type_use\")\n             };\n             for uint::range(0u, n_tps) |n| { cx.uses[n] |= flags;}\n         }"}, {"sha": "30a5430682509e800087ad4af2c2a6e6721cc159", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -1687,7 +1687,7 @@ pub fn simd_type(cx: ctxt, ty: t) -> t {\n             let fields = lookup_struct_fields(cx, did);\n             lookup_field_type(cx, did, fields[0].id, substs)\n         }\n-        _ => fail!(~\"simd_type called on invalid type\")\n+        _ => fail!(\"simd_type called on invalid type\")\n     }\n }\n \n@@ -1697,14 +1697,14 @@ pub fn simd_size(cx: ctxt, ty: t) -> uint {\n             let fields = lookup_struct_fields(cx, did);\n             fields.len()\n         }\n-        _ => fail!(~\"simd_size called on invalid type\")\n+        _ => fail!(\"simd_size called on invalid type\")\n     }\n }\n \n pub fn get_element_type(ty: t, i: uint) -> t {\n     match get(ty).sty {\n       ty_tup(ref ts) => return ts[i],\n-      _ => fail!(~\"get_element_type called on invalid type\")\n+      _ => fail!(\"get_element_type called on invalid type\")\n     }\n }\n \n@@ -3001,7 +3001,7 @@ pub fn ty_fn_sig(fty: t) -> FnSig {\n         ty_bare_fn(ref f) => copy f.sig,\n         ty_closure(ref f) => copy f.sig,\n         ref s => {\n-            fail!(fmt!(\"ty_fn_sig() called on non-fn type: %?\", s))\n+            fail!(\"ty_fn_sig() called on non-fn type: %?\", s)\n         }\n     }\n }\n@@ -3012,7 +3012,7 @@ pub fn ty_fn_args(fty: t) -> ~[arg] {\n         ty_bare_fn(ref f) => copy f.sig.inputs,\n         ty_closure(ref f) => copy f.sig.inputs,\n         ref s => {\n-            fail!(fmt!(\"ty_fn_args() called on non-fn type: %?\", s))\n+            fail!(\"ty_fn_args() called on non-fn type: %?\", s)\n         }\n     }\n }\n@@ -3021,8 +3021,7 @@ pub fn ty_closure_sigil(fty: t) -> Sigil {\n     match get(fty).sty {\n         ty_closure(ref f) => f.sigil,\n         ref s => {\n-            fail!(fmt!(\"ty_closure_sigil() called on non-closure type: %?\",\n-                       s))\n+            fail!(\"ty_closure_sigil() called on non-closure type: %?\", s)\n         }\n     }\n }\n@@ -3032,7 +3031,7 @@ pub fn ty_fn_purity(fty: t) -> ast::purity {\n         ty_bare_fn(ref f) => f.purity,\n         ty_closure(ref f) => f.purity,\n         ref s => {\n-            fail!(fmt!(\"ty_fn_purity() called on non-fn type: %?\", s))\n+            fail!(\"ty_fn_purity() called on non-fn type: %?\", s)\n         }\n     }\n }\n@@ -3042,7 +3041,7 @@ pub fn ty_fn_ret(fty: t) -> t {\n         ty_bare_fn(ref f) => f.sig.output,\n         ty_closure(ref f) => f.sig.output,\n         ref s => {\n-            fail!(fmt!(\"ty_fn_ret() called on non-fn type: %?\", s))\n+            fail!(\"ty_fn_ret() called on non-fn type: %?\", s)\n         }\n     }\n }\n@@ -3059,7 +3058,7 @@ pub fn ty_vstore(ty: t) -> vstore {\n     match get(ty).sty {\n         ty_evec(_, vstore) => vstore,\n         ty_estr(vstore) => vstore,\n-        ref s => fail!(fmt!(\"ty_vstore() called on invalid sty: %?\", s))\n+        ref s => fail!(\"ty_vstore() called on invalid sty: %?\", s)\n     }\n }\n \n@@ -3496,7 +3495,7 @@ pub fn stmt_node_id(s: @ast::stmt) -> ast::node_id {\n       ast::stmt_decl(_, id) | stmt_expr(_, id) | stmt_semi(_, id) => {\n         return id;\n       }\n-      ast::stmt_mac(*) => fail!(~\"unexpanded macro in trans\")\n+      ast::stmt_mac(*) => fail!(\"unexpanded macro in trans\")\n     }\n }\n \n@@ -3833,8 +3832,7 @@ fn lookup_locally_or_in_crate_store<V:Copy>(\n     }\n \n     if def_id.crate == ast::local_crate {\n-        fail!(fmt!(\"No def'n found for %? in tcx.%s\",\n-                   def_id, descr));\n+        fail!(\"No def'n found for %? in tcx.%s\", def_id, descr);\n     }\n     let v = load_external();\n     map.insert(def_id, v);\n@@ -4095,7 +4093,7 @@ pub fn enum_variants(cx: ctxt, id: ast::def_id) -> @~[VariantInfo] {\n                          }\n                     }\n                     ast::struct_variant_kind(_) => {\n-                        fail!(~\"struct variant kinds unimpl in enum_variants\")\n+                        fail!(\"struct variant kinds unimpl in enum_variants\")\n                     }\n                 }\n             })"}, {"sha": "24edf4a6033c9e0e50075d2661862ca841ac794a", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -1244,7 +1244,7 @@ pub impl<'self> LookupContext<'self> {\n         let span = if did.crate == ast::local_crate {\n             match self.tcx().items.find(&did.node) {\n               Some(&ast_map::node_method(m, _, _)) => m.span,\n-              _ => fail!(fmt!(\"report_static_candidate: bad item %?\", did))\n+              _ => fail!(\"report_static_candidate: bad item %?\", did)\n             }\n         } else {\n             self.expr.span"}, {"sha": "fd511b6fc53e8bc49bbfb299af5bb6185345535b", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -2147,8 +2147,7 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n                                 inner_ty, fcx.expr_ty(loop_body));\n             }\n             ref n => {\n-                fail!(fmt!(\n-                    \"check_loop_body expected expr_fn_block, not %?\", n))\n+                fail!(\"check_loop_body expected expr_fn_block, not %?\", n)\n             }\n         }\n \n@@ -2573,7 +2572,7 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n             demand::suptype(fcx, b.span, inner_ty, fcx.expr_ty(b));\n           }\n           // argh\n-          _ => fail!(~\"expected fn ty\")\n+          _ => fail!(\"expected fn ty\")\n         }\n         fcx.write_ty(expr.id, fcx.node_ty(b.id));\n       }"}, {"sha": "42ab9d977292ce3efb2b4f1b9488d42c8133272f", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -140,7 +140,7 @@ fn fixup_substs(vcx: &VtableContext, location_info: &LocationInfo,\n     do fixup_ty(vcx, location_info, t, is_early).map |t_f| {\n         match ty::get(*t_f).sty {\n           ty::ty_trait(_, ref substs_f, _, _) => (/*bad*/copy *substs_f),\n-          _ => fail!(~\"t_f should be a trait\")\n+          _ => fail!(\"t_f should be a trait\")\n         }\n     }\n }"}, {"sha": "17103806d1e3ad92e9259af8f672bebe44261df0", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -142,7 +142,7 @@ pub fn get_base_type_def_id(inference_context: @mut InferCtxt,\n                     return Some(def_id);\n                 }\n                 _ => {\n-                    fail!(~\"get_base_type() returned a type that wasn't an \\\n+                    fail!(\"get_base_type() returned a type that wasn't an \\\n                            enum, class, or trait\");\n                 }\n             }"}, {"sha": "dd4323524320315cb4908cc9290aafa5f62b4393", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -1137,7 +1137,7 @@ pub fn ty_of_item(ccx: &CrateCtxt, it: @ast::item)\n       }\n       ast::item_impl(*) | ast::item_mod(_) |\n       ast::item_foreign_mod(_) => fail!(),\n-      ast::item_mac(*) => fail!(~\"item macros unimplemented\")\n+      ast::item_mac(*) => fail!(\"item macros unimplemented\")\n     }\n }\n "}, {"sha": "1d24a4dbd4f91a67f8ef3fd58d073ef13d3bcba1", "filename": "src/librustc/middle/typeck/infer/test.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -100,7 +100,7 @@ pub impl Env {\n         return match search_mod(self, &self.crate.node.module, 0, names) {\n             Some(id) => id,\n             None => {\n-                fail!(fmt!(\"No item found: `%s`\", str::connect(names, \"::\")));\n+                fail!(\"No item found: `%s`\", str::connect(names, \"::\"));\n             }\n         };\n \n@@ -153,17 +153,17 @@ pub impl Env {\n \n     fn assert_subtype(&self, a: ty::t, b: ty::t) {\n         if !self.is_subtype(a, b) {\n-            fail!(fmt!(\"%s is not a subtype of %s, but it should be\",\n-                      self.ty_to_str(a),\n-                      self.ty_to_str(b)));\n+            fail!(\"%s is not a subtype of %s, but it should be\",\n+                  self.ty_to_str(a),\n+                  self.ty_to_str(b));\n         }\n     }\n \n     fn assert_not_subtype(&self, a: ty::t, b: ty::t) {\n         if self.is_subtype(a, b) {\n-            fail!(fmt!(\"%s is a subtype of %s, but it shouldn't be\",\n-                      self.ty_to_str(a),\n-                      self.ty_to_str(b)));\n+            fail!(\"%s is a subtype of %s, but it shouldn't be\",\n+                  self.ty_to_str(a),\n+                  self.ty_to_str(b));\n         }\n     }\n \n@@ -240,7 +240,7 @@ pub impl Env {\n     fn check_lub(&self, t1: ty::t, t2: ty::t, t_lub: ty::t) {\n         match self.lub().tys(t1, t2) {\n             Err(e) => {\n-                fail!(fmt!(\"Unexpected error computing LUB: %?\", e))\n+                fail!(\"Unexpected error computing LUB: %?\", e)\n             }\n             Ok(t) => {\n                 self.assert_eq(t, t_lub);\n@@ -262,7 +262,7 @@ pub impl Env {\n                self.ty_to_str(t_glb));\n         match self.glb().tys(t1, t2) {\n             Err(e) => {\n-                fail!(fmt!(\"Unexpected error computing LUB: %?\", e))\n+                fail!(\"Unexpected error computing LUB: %?\", e)\n             }\n             Ok(t) => {\n                 self.assert_eq(t, t_glb);\n@@ -281,8 +281,7 @@ pub impl Env {\n         match self.lub().tys(t1, t2) {\n             Err(_) => {}\n             Ok(t) => {\n-                fail!(fmt!(\"Unexpected success computing LUB: %?\",\n-                          self.ty_to_str(t)))\n+                fail!(\"Unexpected success computing LUB: %?\", self.ty_to_str(t))\n             }\n         }\n     }\n@@ -292,8 +291,7 @@ pub impl Env {\n         match self.glb().tys(t1, t2) {\n             Err(_) => {}\n             Ok(t) => {\n-                fail!(fmt!(\"Unexpected success computing GLB: %?\",\n-                          self.ty_to_str(t)))\n+                fail!(\"Unexpected success computing GLB: %?\", self.ty_to_str(t))\n             }\n         }\n     }"}, {"sha": "f7bf5106fa69c1e67331e943f6950248a3896259", "filename": "src/librustc/middle/typeck/rscope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -227,7 +227,7 @@ impl region_scope for type_rscope {\n             None => {\n                 // if the self region is used, region parameterization should\n                 // have inferred that this type is RP\n-                fail!(~\"region parameterization should have inferred that \\\n+                fail!(\"region parameterization should have inferred that \\\n                         this type is RP\");\n             }\n             Some(ref region_parameterization) => {"}, {"sha": "5ce3c13656776c142fe458734d45d459ac01e50b", "filename": "src/librustdoc/attr_pass.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fattr_pass.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -106,7 +106,7 @@ fn parse_item_attrs<T:Owned>(\n         let attrs = match *ctxt.ast_map.get(&id) {\n             ast_map::node_item(item, _) => copy item.attrs,\n             ast_map::node_foreign_item(item, _, _, _) => copy item.attrs,\n-            _ => fail!(~\"parse_item_attrs: not an item\")\n+            _ => fail!(\"parse_item_attrs: not an item\")\n         };\n         parse_attrs(attrs)\n     }\n@@ -140,9 +140,8 @@ fn fold_enum(\n                                 copy ast_variant.node.attrs)\n                         }\n                         _ => {\n-                            fail!(fmt!(\"Enum variant %s has id that's \\\n-                                        not bound to an enum item\",\n-                                       variant.name))\n+                            fail!(\"Enum variant %s has id that's not bound to an enum item\",\n+                                  variant.name)\n                         }\n                     }\n                 }\n@@ -202,7 +201,7 @@ fn merge_method_attrs(\n                      attr_parser::parse_desc(copy method.attrs))\n                 })\n             }\n-            _ => fail!(~\"unexpected item\")\n+            _ => fail!(\"unexpected item\")\n         }\n     };\n "}, {"sha": "a42c4738b2de790002420ca3d008a0fefe7aa53a", "filename": "src/librustdoc/markdown_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_pass.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -401,7 +401,7 @@ fn write_sig(ctxt: &Ctxt, sig: Option<~str>) {\n             ctxt.w.put_line(code_block_indent(sig));\n             ctxt.w.put_line(~\"\");\n         }\n-        None => fail!(~\"unimplemented\")\n+        None => fail!(\"unimplemented\")\n     }\n }\n "}, {"sha": "456a5f09a880067c2e1652353c61dfd948544279", "filename": "src/librustdoc/markdown_writer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustdoc%2Fmarkdown_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustdoc%2Fmarkdown_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_writer.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -135,7 +135,7 @@ fn pandoc_writer(\n         if status != 0 {\n             error!(\"pandoc-out: %s\", stdout);\n             error!(\"pandoc-err: %s\", stderr);\n-            fail!(~\"pandoc failed\");\n+            fail!(\"pandoc failed\");\n         }\n     }\n }"}, {"sha": "2bb53e02b4974ee687f1ac09960d3ba5aca479b7", "filename": "src/librustdoc/tystr_pass.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftystr_pass.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -75,7 +75,7 @@ fn get_fn_sig(srv: astsrv::Srv, fn_id: doc::AstId) -> Option<~str> {\n                 Some(pprust::fun_to_str(decl, purity, ident, None, tys,\n                                         extract::interner()))\n             }\n-            _ => fail!(~\"get_fn_sig: fn_id not bound to a fn item\")\n+            _ => fail!(\"get_fn_sig: fn_id not bound to a fn item\")\n         }\n     }\n }\n@@ -96,7 +96,7 @@ fn fold_const(\n                     }, _) => {\n                         pprust::ty_to_str(ty, extract::interner())\n                     }\n-                    _ => fail!(~\"fold_const: id not bound to a const item\")\n+                    _ => fail!(\"fold_const: id not bound to a const item\")\n                 }\n             }}),\n         .. doc\n@@ -127,7 +127,7 @@ fn fold_enum(\n                             pprust::variant_to_str(\n                                 ast_variant, extract::interner())\n                         }\n-                        _ => fail!(~\"enum variant not bound to an enum item\")\n+                        _ => fail!(\"enum variant not bound to an enum item\")\n                     }\n                 }\n             };\n@@ -204,7 +204,7 @@ fn get_method_sig(\n                             }\n                         }\n                     }\n-                    _ => fail!(~\"method not found\")\n+                    _ => fail!(\"method not found\")\n                 }\n             }\n             ast_map::node_item(@ast::item {\n@@ -223,10 +223,10 @@ fn get_method_sig(\n                             extract::interner()\n                         ))\n                     }\n-                    None => fail!(~\"method not found\")\n+                    None => fail!(\"method not found\")\n                 }\n             }\n-            _ => fail!(~\"get_method_sig: item ID not bound to trait or impl\")\n+            _ => fail!(\"get_method_sig: item ID not bound to trait or impl\")\n         }\n     }\n }\n@@ -255,7 +255,7 @@ fn fold_impl(\n                      Some(pprust::ty_to_str(\n                          self_ty, extract::interner())))\n                 }\n-                _ => fail!(~\"expected impl\")\n+                _ => fail!(\"expected impl\")\n             }\n         }\n     };\n@@ -294,7 +294,7 @@ fn fold_type(\n                                               extract::interner())\n                         ))\n                     }\n-                    _ => fail!(~\"expected type\")\n+                    _ => fail!(\"expected type\")\n                 }\n             }\n         },\n@@ -318,7 +318,7 @@ fn fold_struct(\n                         Some(pprust::item_to_str(item,\n                                                  extract::interner()))\n                     }\n-                    _ => fail!(~\"not an item\")\n+                    _ => fail!(\"not an item\")\n                 }\n             }\n         },\n@@ -333,7 +333,7 @@ fn fold_struct(\n fn strip_struct_extra_stuff(item: @ast::item) -> @ast::item {\n     let node = match copy item.node {\n         ast::item_struct(def, tys) => ast::item_struct(def, tys),\n-        _ => fail!(~\"not a struct\")\n+        _ => fail!(\"not a struct\")\n     };\n \n     @ast::item {"}, {"sha": "d8db44b9ee70cd91020fbf194ad50d039a511322", "filename": "src/librusti/rusti.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrusti%2Frusti.rc", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrusti%2Frusti.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Frusti.rc?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -312,7 +312,7 @@ fn run_cmd(repl: &mut Repl, _in: @io::Reader, _out: @io::Writer,\n             let mut end_multiline = false;\n             while (!end_multiline) {\n                 match get_line(use_rl, ~\"rusti| \") {\n-                    None => fail!(~\"unterminated multiline command :{ .. :}\"),\n+                    None => fail!(\"unterminated multiline command :{ .. :}\"),\n                     Some(line) => {\n                         if str::trim(line) == ~\":}\" {\n                             end_multiline = true;"}, {"sha": "30a84f56b5c43bd556c3208ccd0bf853d21878f2", "filename": "src/librustpkg/rustpkg.rc", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustpkg%2Frustpkg.rc", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustpkg%2Frustpkg.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Frustpkg.rc?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -146,8 +146,7 @@ impl PkgScript {\n                 }\n             }\n             Err(e) => {\n-                fail!(fmt!(\"Running package script, couldn't find rustpkg sysroot (%s)\",\n-                           e))\n+                fail!(\"Running package script, couldn't find rustpkg sysroot (%s)\", e)\n             }\n         }\n     }\n@@ -256,13 +255,13 @@ impl Ctx {\n \n                 self.unprefer(name.get(), vers);\n             }\n-            _ => fail!(~\"reached an unhandled command\")\n+            _ => fail!(\"reached an unhandled command\")\n         }\n     }\n \n     fn do_cmd(&self, _cmd: ~str, _pkgname: ~str)  {\n         // stub\n-        fail!(~\"`do` not yet implemented\");\n+        fail!(\"`do` not yet implemented\");\n     }\n \n     fn build(&self, workspace: &Path, pkgid: PkgId) {\n@@ -289,7 +288,7 @@ impl Ctx {\n                 let (cfgs, hook_result) = pscript.run_custom(~\"post_build\");\n                 debug!(\"Command return code = %?\", hook_result);\n                 if hook_result != 0 {\n-                    fail!(fmt!(\"Error running custom build command\"))\n+                    fail!(\"Error running custom build command\")\n                 }\n                 custom = true;\n                 // otherwise, the package script succeeded\n@@ -330,7 +329,7 @@ impl Ctx {\n \n     fn info(&self) {\n         // stub\n-        fail!(~\"info not yet implemented\");\n+        fail!(\"info not yet implemented\");\n     }\n \n     fn install(&self, workspace: &Path, id: PkgId)  {\n@@ -362,7 +361,7 @@ impl Ctx {\n \n     fn fetch(&self, _dir: &Path, _url: ~str, _target: Option<~str>)  {\n         // stub\n-        fail!(~\"fetch not yet implemented\");\n+        fail!(\"fetch not yet implemented\");\n     }\n \n     fn fetch_curl(&self, dir: &Path, url: ~str)  {\n@@ -448,15 +447,15 @@ impl Ctx {\n \n     fn test(&self)  {\n         // stub\n-        fail!(~\"test not yet implemented\");\n+        fail!(\"test not yet implemented\");\n     }\n \n     fn uninstall(&self, _id: ~str, _vers: Option<~str>)  {\n-        fail!(~\"uninstall not yet implemented\");\n+        fail!(\"uninstall not yet implemented\");\n     }\n \n     fn unprefer(&self, _id: ~str, _vers: Option<~str>)  {\n-        fail!(~\"unprefer not yet implemented\");\n+        fail!(\"unprefer not yet implemented\");\n     }\n }\n "}, {"sha": "14879c147e082b2b5f8f63dbc97873e2c1451a58", "filename": "src/librustpkg/util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustpkg%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustpkg%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Futil.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -324,7 +324,7 @@ pub fn parse_vers(vers: ~str) -> result::Result<semver::Version, ~str> {\n \n pub fn need_dir(s: &Path) {\n     if !os::path_is_dir(s) && !os::make_dir(s, 493_i32) {\n-        fail!(fmt!(\"can't create dir: %s\", s.to_str()));\n+        fail!(\"can't create dir: %s\", s.to_str());\n     }\n }\n \n@@ -421,12 +421,12 @@ pub fn wait_for_lock(path: &Path) {\n }\n \n pub fn load_pkgs() -> result::Result<~[json::Json], ~str> {\n-    fail!(~\"load_pkg not implemented\");\n+    fail!(\"load_pkg not implemented\");\n }\n \n pub fn get_pkg(_id: ~str,\n                _vers: Option<~str>) -> result::Result<Pkg, ~str> {\n-    fail!(~\"get_pkg not implemented\");\n+    fail!(\"get_pkg not implemented\");\n }\n \n pub fn add_pkg(pkg: &Pkg) -> bool {"}, {"sha": "b0c6df05038164ec824e8c9a1a4bfe08f798131b", "filename": "src/librustpkg/workspace.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustpkg%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibrustpkg%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fworkspace.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -21,10 +21,9 @@ pub fn pkg_parent_workspaces(pkgid: PkgId, action: &fn(&Path) -> bool) -> bool {\n         workspace_contains_package_id(pkgid, ws));\n     if workspaces.is_empty() {\n         // tjc: make this a condition\n-        fail!(fmt!(\"Package %s not found in any of \\\n-                    the following workspaces: %s\",\n-                   pkgid.path.to_str(),\n-                   rust_path().to_str()));\n+        fail!(\"Package %s not found in any of the following workspaces: %s\",\n+              pkgid.path.to_str(),\n+              rust_path().to_str());\n     }\n     for workspaces.each |ws| {\n         if action(ws) {"}, {"sha": "df49771258e2902b200e183a981a53eaa280a9bd", "filename": "src/libstd/arc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibstd%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibstd%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farc.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -208,9 +208,9 @@ pub impl<T:Owned> MutexARC<T> {\n fn check_poison(is_mutex: bool, failed: bool) {\n     if failed {\n         if is_mutex {\n-            fail!(~\"Poisoned MutexARC - another task failed inside!\");\n+            fail!(\"Poisoned MutexARC - another task failed inside!\");\n         } else {\n-            fail!(~\"Poisoned rw_arc - another task failed inside!\");\n+            fail!(\"Poisoned rw_arc - another task failed inside!\");\n         }\n     }\n }"}, {"sha": "68242f88fae5e2e68cec08618322d08c5062c157", "filename": "src/libstd/base64.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibstd%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibstd%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbase64.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -82,7 +82,7 @@ impl<'self> ToBase64 for &'self [u8] {\n             str::push_char(&mut s, CHARS[(n >> 6u) & 63u]);\n             str::push_char(&mut s, '=');\n           }\n-          _ => fail!(~\"Algebra is broken, please alert the math police\")\n+          _ => fail!(\"Algebra is broken, please alert the math police\")\n         }\n         s\n     }\n@@ -136,7 +136,7 @@ impl FromBase64 for ~[u8] {\n      * ~~~~\n      */\n     fn from_base64(&self) -> ~[u8] {\n-        if self.len() % 4u != 0u { fail!(~\"invalid base64 length\"); }\n+        if self.len() % 4u != 0u { fail!(\"invalid base64 length\"); }\n \n         let len = self.len();\n         let mut padding = 0u;\n@@ -173,10 +173,10 @@ impl FromBase64 for ~[u8] {\n                                 r.push(((n >> 10u) & 0xFFu) as u8);\n                                 return copy r;\n                             }\n-                            _ => fail!(~\"invalid base64 padding\")\n+                            _ => fail!(\"invalid base64 padding\")\n                         }\n                     }\n-                    _ => fail!(~\"invalid base64 character\")\n+                    _ => fail!(\"invalid base64 character\")\n                 }\n \n                 i += 1u;"}, {"sha": "e31818ecc1c16a552490a3ffd4fa02916118a027", "filename": "src/libstd/bitv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibstd%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibstd%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitv.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -236,7 +236,7 @@ pub struct Bitv {\n }\n \n fn die() -> ! {\n-    fail!(~\"Tried to do operation on bit vectors with different sizes\");\n+    fail!(\"Tried to do operation on bit vectors with different sizes\");\n }\n \n priv impl Bitv {\n@@ -1308,7 +1308,7 @@ mod tests {\n         let mut b = Bitv::new(14, true);\n         b.clear();\n         for b.ones |i| {\n-            fail!(fmt!(\"found 1 at %?\", i));\n+            fail!(\"found 1 at %?\", i);\n         }\n     }\n \n@@ -1317,7 +1317,7 @@ mod tests {\n         let mut b = Bitv::new(140, true);\n         b.clear();\n         for b.ones |i| {\n-            fail!(fmt!(\"found 1 at %?\", i));\n+            fail!(\"found 1 at %?\", i);\n         }\n     }\n "}, {"sha": "84bd803afe7e5e041dc2acb87d2809d5b6b4cf14", "filename": "src/libstd/dlist.rs", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibstd%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibstd%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdlist.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -40,18 +40,18 @@ priv impl<T> DListNode<T> {\n         match self.next {\n             Some(neighbour) => match neighbour.prev {\n               Some(me) => if !managed::mut_ptr_eq(self, me) {\n-                  fail!(~\"Asymmetric next-link in dlist node.\")\n+                  fail!(\"Asymmetric next-link in dlist node.\")\n               },\n-              None => fail!(~\"One-way next-link in dlist node.\")\n+              None => fail!(\"One-way next-link in dlist node.\")\n             },\n             None => ()\n         }\n         match self.prev {\n             Some(neighbour) => match neighbour.next {\n               Some(me) => if !managed::mut_ptr_eq(me, self) {\n-                  fail!(~\"Asymmetric prev-link in dlist node.\")\n+                  fail!(\"Asymmetric prev-link in dlist node.\")\n               },\n-              None => fail!(~\"One-way prev-link in dlist node.\")\n+              None => fail!(\"One-way prev-link in dlist node.\")\n             },\n             None => ()\n         }\n@@ -68,7 +68,7 @@ pub impl<T> DListNode<T> {\n     fn next_node(@mut self) -> @mut DListNode<T> {\n         match self.next_link() {\n             Some(nobe) => nobe,\n-            None       => fail!(~\"This dlist node has no next neighbour.\")\n+            None       => fail!(\"This dlist node has no next neighbour.\")\n         }\n     }\n     /// Get the previous node in the list, if there is one.\n@@ -80,7 +80,7 @@ pub impl<T> DListNode<T> {\n     fn prev_node(@mut self) -> @mut DListNode<T> {\n         match self.prev_link() {\n             Some(nobe) => nobe,\n-            None       => fail!(~\"This dlist node has no previous neighbour.\")\n+            None       => fail!(\"This dlist node has no previous neighbour.\")\n         }\n     }\n }\n@@ -132,21 +132,21 @@ priv impl<T> DList<T> {\n         // These asserts could be stronger if we had node-root back-pointers,\n         // but those wouldn't allow for O(1) append.\n         if self.size == 0 {\n-            fail!(~\"This dlist is empty; that node can't be on it.\")\n+            fail!(\"This dlist is empty; that node can't be on it.\")\n         }\n-        if !nobe.linked { fail!(~\"That node isn't linked to any dlist.\") }\n+        if !nobe.linked { fail!(\"That node isn't linked to any dlist.\") }\n         if !((nobe.prev.is_some()\n               || managed::mut_ptr_eq(self.hd.expect(~\"headless dlist?\"),\n                                  nobe)) &&\n              (nobe.next.is_some()\n               || managed::mut_ptr_eq(self.tl.expect(~\"tailless dlist?\"),\n                                  nobe))) {\n-            fail!(~\"That node isn't on this dlist.\")\n+            fail!(\"That node isn't on this dlist.\")\n         }\n     }\n     fn make_mine(&self, nobe: @mut DListNode<T>) {\n         if nobe.prev.is_some() || nobe.next.is_some() || nobe.linked {\n-            fail!(~\"Cannot insert node that's already on a dlist!\")\n+            fail!(\"Cannot insert node that's already on a dlist!\")\n         }\n         nobe.linked = true;\n     }\n@@ -318,16 +318,14 @@ pub impl<T> DList<T> {\n     fn head_n(@mut self) -> @mut DListNode<T> {\n         match self.hd {\n             Some(nobe) => nobe,\n-            None       => fail!(\n-                ~\"Attempted to get the head of an empty dlist.\")\n+            None       => fail!(\"Attempted to get the head of an empty dlist.\")\n         }\n     }\n     /// Get the node at the list's tail, failing if empty. O(1).\n     fn tail_n(@mut self) -> @mut DListNode<T> {\n         match self.tl {\n             Some(nobe) => nobe,\n-            None       => fail!(\n-                ~\"Attempted to get the tail of an empty dlist.\")\n+            None       => fail!(\"Attempted to get the tail of an empty dlist.\")\n         }\n     }\n \n@@ -340,7 +338,7 @@ pub impl<T> DList<T> {\n      */\n     fn append(@mut self, them: @mut DList<T>) {\n         if managed::mut_ptr_eq(self, them) {\n-            fail!(~\"Cannot append a dlist to itself!\")\n+            fail!(\"Cannot append a dlist to itself!\")\n         }\n         if them.len() > 0 {\n             self.link(self.tl, them.hd);\n@@ -357,7 +355,7 @@ pub impl<T> DList<T> {\n      */\n     fn prepend(@mut self, them: @mut DList<T>) {\n         if managed::mut_ptr_eq(self, them) {\n-            fail!(~\"Cannot prepend a dlist to itself!\")\n+            fail!(\"Cannot prepend a dlist to itself!\")\n         }\n         if them.len() > 0 {\n             self.link(them.tl, self.hd);\n@@ -524,7 +522,7 @@ impl<T> BaseIter<T> for @mut DList<T> {\n \n             // Check (weakly) that the user didn't do a remove.\n             if self.size == 0 {\n-                fail!(~\"The dlist became empty during iteration??\")\n+                fail!(\"The dlist became empty during iteration??\")\n             }\n             if !nobe.linked ||\n                 (!((nobe.prev.is_some()\n@@ -533,7 +531,7 @@ impl<T> BaseIter<T> for @mut DList<T> {\n                    && (nobe.next.is_some()\n                     || managed::mut_ptr_eq(self.tl.expect(~\"tailless dlist?\"),\n                                            nobe)))) {\n-                fail!(~\"Removing a dlist node during iteration is forbidden!\")\n+                fail!(\"Removing a dlist node during iteration is forbidden!\")\n             }\n             link = nobe.next_link();\n         }"}, {"sha": "062ad403dd6b7dc4d128bf734b06ecddbe7c4e3c", "filename": "src/libstd/ebml.rs", "status": "modified", "additions": 24, "deletions": 27, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibstd%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibstd%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Febml.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -116,7 +116,7 @@ pub mod reader {\n                         (data[start + 3u] as uint),\n                     next: start + 4u};\n         }\n-        fail!(~\"vint too big\");\n+        fail!(\"vint too big\");\n     }\n \n     #[cfg(target_arch = \"x86\")]\n@@ -319,9 +319,7 @@ pub mod reader {\n                     self.pos = r_doc.end;\n                     let str = doc_as_str(r_doc);\n                     if lbl != str {\n-                        fail!(fmt!(\"Expected label %s but found %s\",\n-                                   lbl,\n-                                   str));\n+                        fail!(\"Expected label %s but found %s\", lbl, str);\n                     }\n                 }\n             }\n@@ -330,20 +328,19 @@ pub mod reader {\n         fn next_doc(&mut self, exp_tag: EbmlEncoderTag) -> Doc {\n             debug!(\". next_doc(exp_tag=%?)\", exp_tag);\n             if self.pos >= self.parent.end {\n-                fail!(~\"no more documents in current node!\");\n+                fail!(\"no more documents in current node!\");\n             }\n             let TaggedDoc { tag: r_tag, doc: r_doc } =\n                 doc_at(self.parent.data, self.pos);\n             debug!(\"self.parent=%?-%? self.pos=%? r_tag=%? r_doc=%?-%?\",\n                    copy self.parent.start, copy self.parent.end,\n                    copy self.pos, r_tag, r_doc.start, r_doc.end);\n             if r_tag != (exp_tag as uint) {\n-                fail!(fmt!(\"expected EBML doc with tag %? but found tag %?\",\n-                          exp_tag, r_tag));\n+                fail!(\"expected EBML doc with tag %? but found tag %?\", exp_tag, r_tag);\n             }\n             if r_doc.end > self.parent.end {\n-                fail!(fmt!(\"invalid EBML, child extends to 0x%x, \\\n-                           parent to 0x%x\", r_doc.end, self.parent.end));\n+                fail!(\"invalid EBML, child extends to 0x%x, parent to 0x%x\",\n+                      r_doc.end, self.parent.end);\n             }\n             self.pos = r_doc.end;\n             r_doc\n@@ -393,7 +390,7 @@ pub mod reader {\n         fn read_uint(&mut self) -> uint {\n             let v = doc_as_u64(self.next_doc(EsUint));\n             if v > (::core::uint::max_value as u64) {\n-                fail!(fmt!(\"uint %? too large for this architecture\", v));\n+                fail!(\"uint %? too large for this architecture\", v);\n             }\n             v as uint\n         }\n@@ -414,7 +411,7 @@ pub mod reader {\n             let v = doc_as_u64(self.next_doc(EsInt)) as i64;\n             if v > (int::max_value as i64) || v < (int::min_value as i64) {\n                 debug!(\"FIXME #6122: Removing this makes this function miscompile\");\n-                fail!(fmt!(\"int %? out of range for this architecture\", v));\n+                fail!(\"int %? out of range for this architecture\", v);\n             }\n             v as int\n         }\n@@ -423,10 +420,10 @@ pub mod reader {\n             doc_as_u8(self.next_doc(EsBool)) as bool\n         }\n \n-        fn read_f64(&mut self) -> f64 { fail!(~\"read_f64()\"); }\n-        fn read_f32(&mut self) -> f32 { fail!(~\"read_f32()\"); }\n-        fn read_float(&mut self) -> float { fail!(~\"read_float()\"); }\n-        fn read_char(&mut self) -> char { fail!(~\"read_char()\"); }\n+        fn read_f64(&mut self) -> f64 { fail!(\"read_f64()\"); }\n+        fn read_f32(&mut self) -> f32 { fail!(\"read_f32()\"); }\n+        fn read_float(&mut self) -> float { fail!(\"read_float()\"); }\n+        fn read_char(&mut self) -> char { fail!(\"read_char()\"); }\n         fn read_str(&mut self) -> ~str { doc_as_str(self.next_doc(EsStr)) }\n \n         // Compound types:\n@@ -602,23 +599,23 @@ pub mod reader {\n \n         fn read_map<T>(&mut self, _: &fn(&mut Decoder, uint) -> T) -> T {\n             debug!(\"read_map()\");\n-            fail!(~\"read_map is unimplemented\");\n+            fail!(\"read_map is unimplemented\");\n         }\n \n         fn read_map_elt_key<T>(&mut self,\n                                idx: uint,\n                                _: &fn(&mut Decoder) -> T)\n                                -> T {\n             debug!(\"read_map_elt_key(idx=%u)\", idx);\n-            fail!(~\"read_map_elt_val is unimplemented\");\n+            fail!(\"read_map_elt_val is unimplemented\");\n         }\n \n         fn read_map_elt_val<T>(&mut self,\n                                idx: uint,\n                                _: &fn(&mut Decoder) -> T)\n                                -> T {\n             debug!(\"read_map_elt_val(idx=%u)\", idx);\n-            fail!(~\"read_map_elt_val is unimplemented\");\n+            fail!(\"read_map_elt_val is unimplemented\");\n         }\n     }\n }\n@@ -647,7 +644,7 @@ pub mod writer {\n                             n as u8]),\n             4u => w.write(&[0x10u8 | ((n >> 24_u) as u8), (n >> 16_u) as u8,\n                             (n >> 8_u) as u8, n as u8]),\n-            _ => fail!(fmt!(\"vint to write too big: %?\", n))\n+            _ => fail!(\"vint to write too big: %?\", n)\n         };\n     }\n \n@@ -656,7 +653,7 @@ pub mod writer {\n         if n < 0x4000_u { write_sized_vuint(w, n, 2u); return; }\n         if n < 0x200000_u { write_sized_vuint(w, n, 3u); return; }\n         if n < 0x10000000_u { write_sized_vuint(w, n, 4u); return; }\n-        fail!(fmt!(\"vint to write too big: %?\", n));\n+        fail!(\"vint to write too big: %?\", n);\n     }\n \n     #[cfg(stage0)]\n@@ -847,17 +844,17 @@ pub mod writer {\n \n         // FIXME (#2742): implement these\n         fn emit_f64(&mut self, _v: f64) {\n-            fail!(~\"Unimplemented: serializing an f64\");\n+            fail!(\"Unimplemented: serializing an f64\");\n         }\n         fn emit_f32(&mut self, _v: f32) {\n-            fail!(~\"Unimplemented: serializing an f32\");\n+            fail!(\"Unimplemented: serializing an f32\");\n         }\n         fn emit_float(&mut self, _v: float) {\n-            fail!(~\"Unimplemented: serializing a float\");\n+            fail!(\"Unimplemented: serializing a float\");\n         }\n \n         fn emit_char(&mut self, _v: char) {\n-            fail!(~\"Unimplemented: serializing a char\");\n+            fail!(\"Unimplemented: serializing a char\");\n         }\n \n         fn emit_str(&mut self, v: &str) {\n@@ -954,15 +951,15 @@ pub mod writer {\n         }\n \n         fn emit_map(&mut self, _len: uint, _f: &fn(&mut Encoder)) {\n-            fail!(~\"emit_map is unimplemented\");\n+            fail!(\"emit_map is unimplemented\");\n         }\n \n         fn emit_map_elt_key(&mut self, _idx: uint, _f: &fn(&mut Encoder)) {\n-            fail!(~\"emit_map_elt_key is unimplemented\");\n+            fail!(\"emit_map_elt_key is unimplemented\");\n         }\n \n         fn emit_map_elt_val(&mut self, _idx: uint, _f: &fn(&mut Encoder)) {\n-            fail!(~\"emit_map_elt_val is unimplemented\");\n+            fail!(\"emit_map_elt_val is unimplemented\");\n         }\n     }\n }"}, {"sha": "a31827f95d1ae6cc7d364680ba7194c587108d43", "filename": "src/libstd/fileinput.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibstd%2Ffileinput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibstd%2Ffileinput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffileinput.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -598,7 +598,7 @@ mod test {\n             let expected_path = match line {\n                 \"1\" | \"2\" => copy filenames[0],\n                 \"3\" | \"4\" => copy filenames[2],\n-                _ => fail!(~\"unexpected line\")\n+                _ => fail!(\"unexpected line\")\n             };\n             assert_eq!(copy state.current_path, expected_path);\n             count += 1;"}, {"sha": "dc95c50c31bdd64d4acf217fd9e09f61f9f88904", "filename": "src/libstd/flatpipes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibstd%2Fflatpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibstd%2Fflatpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fflatpipes.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -258,7 +258,7 @@ impl<T,U:Unflattener<T>,P:BytePort> GenericPort<T> for FlatPort<T, U, P> {\n     fn recv(&self) -> T {\n         match self.try_recv() {\n             Some(val) => val,\n-            None => fail!(~\"port is closed\")\n+            None => fail!(\"port is closed\")\n         }\n     }\n     fn try_recv(&self) -> Option<T> {\n@@ -294,7 +294,7 @@ impl<T,U:Unflattener<T>,P:BytePort> GenericPort<T> for FlatPort<T, U, P> {\n             }\n         }\n         else {\n-            fail!(~\"flatpipe: unrecognized command\");\n+            fail!(\"flatpipe: unrecognized command\");\n         }\n     }\n }\n@@ -473,7 +473,7 @@ pub mod flatteners {\n                 Ok(json) => {\n                     json::Decoder(json)\n                 }\n-                Err(e) => fail!(fmt!(\"flatpipe: can't parse json: %?\", e))\n+                Err(e) => fail!(\"flatpipe: can't parse json: %?\", e)\n             }\n         }\n     }"}, {"sha": "be33c0f4663edf412345ee64178025c67363a681", "filename": "src/libstd/future.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibstd%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibstd%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffuture.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -67,14 +67,14 @@ pub impl<A> Future<A> {\n             {\n                 match self.state {\n                     Forced(ref mut v) => { return cast::transmute(v); }\n-                    Evaluating => fail!(~\"Recursive forcing of future!\"),\n+                    Evaluating => fail!(\"Recursive forcing of future!\"),\n                     Pending(_) => {}\n                 }\n             }\n             {\n                 let state = replace(&mut self.state, Evaluating);\n                 match state {\n-                    Forced(_) | Evaluating => fail!(~\"Logic error.\"),\n+                    Forced(_) | Evaluating => fail!(\"Logic error.\"),\n                     Pending(f) => {\n                         self.state = Forced(f());\n                         cast::transmute(self.get_ref())"}, {"sha": "1cb6312445696f4efbc0b6a8f4298e70725ccb1b", "filename": "src/libstd/getopts.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibstd%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibstd%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgetopts.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -554,7 +554,7 @@ pub mod groups {\n                      _} = copy *lopt;\n \n         match (short_name.len(), long_name.len()) {\n-           (0,0) => fail!(~\"this long-format option was given no name\"),\n+           (0,0) => fail!(\"this long-format option was given no name\"),\n \n            (0,_) => ~[Opt {name: Long((long_name)),\n                            hasarg: hasarg,\n@@ -571,7 +571,7 @@ pub mod groups {\n                            hasarg: hasarg,\n                            occur:  occur}],\n \n-           (_,_) => fail!(~\"something is wrong with the long-form opt\")\n+           (_,_) => fail!(\"something is wrong with the long-form opt\")\n         }\n     }\n \n@@ -603,7 +603,7 @@ pub mod groups {\n             row += match short_name.len() {\n                 0 => ~\"\",\n                 1 => ~\"-\" + short_name + \" \",\n-                _ => fail!(~\"the short name should only be 1 ascii char long\"),\n+                _ => fail!(\"the short name should only be 1 ascii char long\"),\n             };\n \n             // long option\n@@ -686,7 +686,7 @@ mod tests {\n             assert!((opt_present(m, ~\"test\")));\n             assert!((opt_str(m, ~\"test\") == ~\"20\"));\n           }\n-          _ => { fail!(~\"test_reqopt_long failed\"); }\n+          _ => { fail!(\"test_reqopt_long failed\"); }\n         }\n     }\n "}, {"sha": "7702b46ddcbf9a18def097d52b344182860d2a77", "filename": "src/libstd/json.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -853,7 +853,7 @@ impl serialize::Decoder for Decoder {\n         debug!(\"read_nil\");\n         match self.stack.pop() {\n             Null => (),\n-            value => fail!(fmt!(\"not a null: %?\", value))\n+            value => fail!(\"not a null: %?\", value)\n         }\n     }\n \n@@ -873,7 +873,7 @@ impl serialize::Decoder for Decoder {\n         debug!(\"read_bool\");\n         match self.stack.pop() {\n             Boolean(b) => b,\n-            value => fail!(fmt!(\"not a boolean: %?\", value))\n+            value => fail!(\"not a boolean: %?\", value)\n         }\n     }\n \n@@ -883,22 +883,22 @@ impl serialize::Decoder for Decoder {\n         debug!(\"read_float\");\n         match self.stack.pop() {\n             Number(f) => f,\n-            value => fail!(fmt!(\"not a number: %?\", value))\n+            value => fail!(\"not a number: %?\", value)\n         }\n     }\n \n     fn read_char(&mut self) -> char {\n         let mut v = ~[];\n         for str::each_char(self.read_str()) |c| { v.push(c) }\n-        if v.len() != 1 { fail!(~\"string must have one character\") }\n+        if v.len() != 1 { fail!(\"string must have one character\") }\n         v[0]\n     }\n \n     fn read_str(&mut self) -> ~str {\n         debug!(\"read_str\");\n         match self.stack.pop() {\n             String(s) => s,\n-            json => fail!(fmt!(\"not a string: %?\", json))\n+            json => fail!(\"not a string: %?\", json)\n         }\n     }\n \n@@ -920,14 +920,14 @@ impl serialize::Decoder for Decoder {\n                 }\n                 match self.stack.pop() {\n                     String(s) => s,\n-                    value => fail!(fmt!(\"invalid variant name: %?\", value)),\n+                    value => fail!(\"invalid variant name: %?\", value),\n                 }\n             }\n-            ref json => fail!(fmt!(\"invalid variant: %?\", *json)),\n+            ref json => fail!(\"invalid variant: %?\", *json),\n         };\n         let idx = match vec::position(names, |n| str::eq_slice(*n, name)) {\n             Some(idx) => idx,\n-            None => fail!(fmt!(\"Unknown variant name: %?\", name)),\n+            None => fail!(\"Unknown variant name: %?\", name),\n         };\n         f(self, idx)\n     }\n@@ -979,7 +979,7 @@ impl serialize::Decoder for Decoder {\n             Object(obj) => {\n                 let mut obj = obj;\n                 let value = match obj.pop(&name.to_owned()) {\n-                    None => fail!(fmt!(\"no such field: %s\", name)),\n+                    None => fail!(\"no such field: %s\", name),\n                     Some(json) => {\n                         self.stack.push(json);\n                         f(self)\n@@ -988,7 +988,7 @@ impl serialize::Decoder for Decoder {\n                 self.stack.push(Object(obj));\n                 value\n             }\n-            value => fail!(fmt!(\"not an object: %?\", value))\n+            value => fail!(\"not an object: %?\", value)\n         }\n     }\n \n@@ -1038,7 +1038,7 @@ impl serialize::Decoder for Decoder {\n                 }\n                 len\n             }\n-            _ => fail!(~\"not a list\"),\n+            _ => fail!(\"not a list\"),\n         };\n         f(self, len)\n     }\n@@ -1060,7 +1060,7 @@ impl serialize::Decoder for Decoder {\n                 }\n                 len\n             }\n-            json => fail!(fmt!(\"not an object: %?\", json)),\n+            json => fail!(\"not an object: %?\", json),\n         };\n         f(self, len)\n     }"}, {"sha": "aa4abbac9d3d1322e5558e56beceba99ad3ec61b", "filename": "src/libstd/list.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibstd%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibstd%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flist.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -93,7 +93,7 @@ pub fn len<T>(ls: @List<T>) -> uint {\n pub fn tail<T:Copy>(ls: @List<T>) -> @List<T> {\n     match *ls {\n         Cons(_, tl) => return tl,\n-        Nil => fail!(~\"list empty\")\n+        Nil => fail!(\"list empty\")\n     }\n }\n \n@@ -102,7 +102,7 @@ pub fn head<T:Copy>(ls: @List<T>) -> T {\n     match *ls {\n       Cons(copy hd, _) => hd,\n       // makes me sad\n-      _ => fail!(~\"head invoked on empty list\")\n+      _ => fail!(\"head invoked on empty list\")\n     }\n }\n "}, {"sha": "f928f10b5fc15e5012e2e7450d025cbae19b94e5", "filename": "src/libstd/net_ip.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibstd%2Fnet_ip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibstd%2Fnet_ip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_ip.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -59,14 +59,14 @@ pub fn format_addr(ip: &IpAddr) -> ~str {\n       Ipv4(ref addr) =>  unsafe {\n         let result = uv_ip4_name(addr);\n         if result == ~\"\" {\n-            fail!(~\"failed to convert inner sockaddr_in address to str\")\n+            fail!(\"failed to convert inner sockaddr_in address to str\")\n         }\n         result\n       },\n       Ipv6(ref addr) => unsafe {\n         let result = uv_ip6_name(addr);\n         if result == ~\"\" {\n-            fail!(~\"failed to convert inner sockaddr_in address to str\")\n+            fail!(\"failed to convert inner sockaddr_in address to str\")\n         }\n         result\n       }\n@@ -394,7 +394,7 @@ mod test {\n             assert!(true);\n           }\n           result::Ok(ref addr) => {\n-            fail!(fmt!(\"Expected failure, but got addr %?\", addr));\n+            fail!(\"Expected failure, but got addr %?\", addr);\n           }\n         }\n     }\n@@ -407,7 +407,7 @@ mod test {\n             assert!(true);\n           }\n           result::Ok(ref addr) => {\n-            fail!(fmt!(\"Expected failure, but got addr %?\", addr));\n+            fail!(\"Expected failure, but got addr %?\", addr);\n           }\n         }\n     }\n@@ -418,7 +418,7 @@ mod test {\n         let iotask = &uv::global_loop::get();\n         let ga_result = get_addr(localhost_name, iotask);\n         if result::is_err(&ga_result) {\n-            fail!(~\"got err result from net::ip::get_addr();\")\n+            fail!(\"got err result from net::ip::get_addr();\")\n         }\n         // note really sure how to reliably test/assert\n         // this.. mostly just wanting to see it work, atm."}, {"sha": "9387903d8421bce4edf30b7f31b297db8f43a97c", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -1646,7 +1646,7 @@ mod test {\n             hl_loop);\n         match actual_resp_result.get_err() {\n           ConnectionRefused => (),\n-          _ => fail!(~\"unknown error.. expected connection_refused\")\n+          _ => fail!(\"unknown error.. expected connection_refused\")\n         }\n     }\n     pub fn impl_gl_tcp_ipv4_server_address_in_use() {\n@@ -1687,8 +1687,8 @@ mod test {\n             assert!(true);\n           }\n           _ => {\n-            fail!(~\"expected address_in_use listen error,\"+\n-                ~\"but got a different error varient. check logs.\");\n+            fail!(\"expected address_in_use listen error, \\\n+                   but got a different error varient. check logs.\");\n           }\n         }\n     }\n@@ -1706,8 +1706,8 @@ mod test {\n             assert!(true);\n           }\n           _ => {\n-            fail!(~\"expected address_in_use listen error,\"+\n-                      ~\"but got a different error varient. check logs.\");\n+            fail!(\"expected address_in_use listen error, \\\n+                   but got a different error varient. check logs.\");\n           }\n         }\n     }\n@@ -1888,14 +1888,13 @@ mod test {\n         if result::is_err(&listen_result) {\n             match result::get_err(&listen_result) {\n               GenericListenErr(ref name, ref msg) => {\n-                fail!(fmt!(\"SERVER: exited abnormally name %s msg %s\",\n-                                *name, *msg));\n+                fail!(\"SERVER: exited abnormally name %s msg %s\", *name, *msg);\n               }\n               AccessDenied => {\n-                fail!(~\"SERVER: exited abnormally, got access denied..\");\n+                fail!(\"SERVER: exited abnormally, got access denied..\");\n               }\n               AddressInUse => {\n-                fail!(~\"SERVER: exited abnormally, got address in use...\");\n+                fail!(\"SERVER: exited abnormally, got address in use...\");\n               }\n             }\n         }\n@@ -1914,15 +1913,14 @@ mod test {\n                 debug!(\"establish_cb %?\", kill_ch);\n             },\n             |new_conn, kill_ch| {\n-                fail!(fmt!(\"SERVER: shouldn't be called.. %? %?\",\n-                           new_conn, kill_ch));\n+                fail!(\"SERVER: shouldn't be called.. %? %?\", new_conn, kill_ch);\n         });\n         // err check on listen_result\n         if result::is_err(&listen_result) {\n             result::get_err(&listen_result)\n         }\n         else {\n-            fail!(~\"SERVER: did not fail as expected\")\n+            fail!(\"SERVER: did not fail as expected\")\n         }\n     }\n \n@@ -1966,7 +1964,7 @@ mod test {\n             debug!(\"tcp_write_single err name: %s msg: %s\",\n                 err_data.err_name, err_data.err_msg);\n             // meh. torn on what to do here.\n-            fail!(~\"tcp_write_single failed\");\n+            fail!(\"tcp_write_single failed\");\n         }\n     }\n }"}, {"sha": "a47f68091a751e77ec8bb88e447a0c6a98e43570", "filename": "src/libstd/num/rational.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibstd%2Fnum%2Frational.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibstd%2Fnum%2Frational.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Frational.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -48,7 +48,7 @@ impl<T: Copy + Num + Ord>\n     #[inline(always)]\n     pub fn new(numer: T, denom: T) -> Ratio<T> {\n         if denom == Zero::zero() {\n-            fail!(~\"denominator == 0\");\n+            fail!(\"denominator == 0\");\n         }\n         let mut ret = Ratio::new_raw(numer, denom);\n         ret.reduce();"}, {"sha": "0d94a1830a6489a4bb7ea435ab69b44fc803344f", "filename": "src/libstd/sort.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibstd%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibstd%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsort.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -581,7 +581,7 @@ impl<T:Copy + Ord> MergeState<T> {\n             shift_vec(array, dest, c2, len2);\n             swap(&mut array[dest+len2], &mut tmp[c1]);\n         } else if len1 == 0 {\n-            fail!(~\"Comparison violates its contract!\");\n+            fail!(\"Comparison violates its contract!\");\n         } else {\n             assert!(len2 == 0);\n             assert!(len1 > 1);\n@@ -703,7 +703,7 @@ impl<T:Copy + Ord> MergeState<T> {\n             shift_vec(array, dest+1, c1+1, len1);\n             swap(&mut array[dest], &mut tmp[c2]);\n         } else if len2 == 0 {\n-            fail!(~\"Comparison violates its contract!\");\n+            fail!(\"Comparison violates its contract!\");\n         } else {\n             assert!(len1 == 0);\n             assert!(len2 != 0);\n@@ -949,7 +949,7 @@ mod test_tim_sort {\n         fn lt(&self, other: &CVal) -> bool {\n             let mut rng = rand::rng();\n             if rng.gen::<float>() > 0.995 {\n-                fail!(~\"It's happening!!!\");\n+                fail!(\"It's happening!!!\");\n             }\n             (*self).val < other.val\n         }\n@@ -1004,7 +1004,7 @@ mod test_tim_sort {\n         };\n \n         tim_sort(arr);\n-        fail!(~\"Guarantee the fail\");\n+        fail!(\"Guarantee the fail\");\n     }\n \n     struct DVal { val: uint }\n@@ -1065,7 +1065,7 @@ mod big_tests {\n         fn isSorted<T:Ord>(arr: &[T]) {\n             for uint::range(0, arr.len()-1) |i| {\n                 if arr[i] > arr[i+1] {\n-                    fail!(~\"Array not sorted\");\n+                    fail!(\"Array not sorted\");\n                 }\n             }\n         }\n@@ -1136,7 +1136,7 @@ mod big_tests {\n         fn isSorted<T:Ord>(arr: &[@T]) {\n             for uint::range(0, arr.len()-1) |i| {\n                 if arr[i] > arr[i+1] {\n-                    fail!(~\"Array not sorted\");\n+                    fail!(\"Array not sorted\");\n                 }\n             }\n         }\n@@ -1219,7 +1219,7 @@ mod big_tests {\n                         local_data::local_data_set(self.key, @(y+1));\n                     }\n                 }\n-                _ => fail!(~\"Expected key to work\"),\n+                _ => fail!(\"Expected key to work\"),\n             }\n         }\n     }"}, {"sha": "270f7196d294bdf6dcffae2a637efca27c3e1deb", "filename": "src/libstd/sort_stage0.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibstd%2Fsort_stage0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibstd%2Fsort_stage0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsort_stage0.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -577,7 +577,7 @@ impl<T:Copy + Ord> MergeState<T> {\n             copy_vec(array, dest, array, c2, len2);\n             util::swap(&mut array[dest+len2], &mut tmp[c1]);\n         } else if len1 == 0 {\n-            fail!(~\"Comparison violates its contract!\");\n+            fail!(\"Comparison violates its contract!\");\n         } else {\n             assert!(len2 == 0);\n             assert!(len1 > 1);\n@@ -699,7 +699,7 @@ impl<T:Copy + Ord> MergeState<T> {\n             copy_vec(array, dest+1, array, c1+1, len1);\n             util::swap(&mut array[dest], &mut tmp[c2]);\n         } else if len2 == 0 {\n-            fail!(~\"Comparison violates its contract!\");\n+            fail!(\"Comparison violates its contract!\");\n         } else {\n             assert!(len1 == 0);\n             assert!(len2 != 0);\n@@ -941,7 +941,7 @@ mod test_tim_sort {\n     impl Ord for CVal {\n         fn lt(&self, other: &CVal) -> bool {\n             let rng = rand::rng();\n-            if rng.gen::<float>() > 0.995 { fail!(~\"It's happening!!!\"); }\n+            if rng.gen::<float>() > 0.995 { fail!(\"It's happening!!!\"); }\n             (*self).val < other.val\n         }\n         fn le(&self, other: &CVal) -> bool { (*self).val <= other.val }\n@@ -995,7 +995,7 @@ mod test_tim_sort {\n         };\n \n         tim_sort(arr);\n-        fail!(~\"Guarantee the fail\");\n+        fail!(\"Guarantee the fail\");\n     }\n \n     struct DVal { val: uint }\n@@ -1056,7 +1056,7 @@ mod big_tests {\n         fn isSorted<T:Ord>(arr: &const [T]) {\n             for uint::range(0, arr.len()-1) |i| {\n                 if arr[i] > arr[i+1] {\n-                    fail!(~\"Array not sorted\");\n+                    fail!(\"Array not sorted\");\n                 }\n             }\n         }\n@@ -1127,7 +1127,7 @@ mod big_tests {\n         fn isSorted<T:Ord>(arr: &const [@T]) {\n             for uint::range(0, arr.len()-1) |i| {\n                 if arr[i] > arr[i+1] {\n-                    fail!(~\"Array not sorted\");\n+                    fail!(\"Array not sorted\");\n                 }\n             }\n         }\n@@ -1210,7 +1210,7 @@ mod big_tests {\n                         local_data::local_data_set(self.key, @(y+1));\n                     }\n                 }\n-                _ => fail!(~\"Expected key to work\"),\n+                _ => fail!(\"Expected key to work\"),\n             }\n         }\n     }"}, {"sha": "59c6a804408b8e94678905f222150fd88eb0115e", "filename": "src/libstd/sync.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibstd%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibstd%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -329,11 +329,9 @@ fn check_cvar_bounds<U>(out_of_bounds: Option<uint>, id: uint, act: &str,\n                         blk: &fn() -> U) -> U {\n     match out_of_bounds {\n         Some(0) =>\n-            fail!(fmt!(\"%s with illegal ID %u - this lock has no condvars!\",\n-                      act, id)),\n+            fail!(\"%s with illegal ID %u - this lock has no condvars!\", act, id),\n         Some(length) =>\n-            fail!(fmt!(\"%s with illegal ID %u - ID must be less than %u\",\n-                      act, id, length)),\n+            fail!(\"%s with illegal ID %u - ID must be less than %u\", act, id, length),\n         None => blk()\n     }\n }\n@@ -578,7 +576,7 @@ pub impl RWlock {\n                      token: RWlockWriteMode<'a>)\n                   -> RWlockReadMode<'a> {\n         if !ptr::ref_eq(self, token.lock) {\n-            fail!(~\"Can't downgrade() with a different rwlock's write_mode!\");\n+            fail!(\"Can't downgrade() with a different rwlock's write_mode!\");\n         }\n         unsafe {\n             do task::unkillable {"}, {"sha": "78f46b4ca03f3e80775381782afa73b07ec36c8d", "filename": "src/libstd/test.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -89,7 +89,7 @@ pub fn test_main(args: &[~str], tests: ~[TestDescAndFn]) {\n           either::Left(o) => o,\n           either::Right(m) => fail!(m)\n         };\n-    if !run_tests_console(&opts, tests) { fail!(~\"Some tests failed\"); }\n+    if !run_tests_console(&opts, tests) { fail!(\"Some tests failed\"); }\n }\n \n // A variant optimized for invocation with a static test vector.\n@@ -109,7 +109,7 @@ pub fn test_main_static(args: &[~str], tests: &[TestDescAndFn]) {\n             TestDescAndFn { testfn: StaticBenchFn(f), desc: copy t.desc },\n \n             _ => {\n-                fail!(~\"non-static tests passed to test::test_main_static\");\n+                fail!(\"non-static tests passed to test::test_main_static\");\n             }\n         }\n     };\n@@ -250,7 +250,7 @@ pub fn run_tests_console(opts: &TestOpts,\n                                                   io::Truncate]) {\n           result::Ok(w) => Some(w),\n           result::Err(ref s) => {\n-              fail!(fmt!(\"can't open output file: %s\", *s))\n+              fail!(\"can't open output file: %s\", *s)\n           }\n         },\n         None => None\n@@ -849,7 +849,7 @@ mod tests {\n         let args = ~[~\"progname\", ~\"filter\"];\n         let opts = match parse_opts(args) {\n           either::Left(copy o) => o,\n-          _ => fail!(~\"Malformed arg in first_free_arg_should_be_a_filter\")\n+          _ => fail!(\"Malformed arg in first_free_arg_should_be_a_filter\")\n         };\n         assert!(\"filter\" == (copy opts.filter).get());\n     }\n@@ -859,7 +859,7 @@ mod tests {\n         let args = ~[~\"progname\", ~\"filter\", ~\"--ignored\"];\n         let opts = match parse_opts(args) {\n           either::Left(copy o) => o,\n-          _ => fail!(~\"Malformed arg in parse_ignored_flag\")\n+          _ => fail!(\"Malformed arg in parse_ignored_flag\")\n         };\n         assert!((opts.run_ignored));\n     }"}, {"sha": "e9fd0414244e880bce69c219f1624ca2e7c18538", "filename": "src/libstd/timer.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibstd%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibstd%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftimer.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -63,13 +63,11 @@ pub fn delayed_send<T:Owned>(iotask: &IoTask,\n                 } else {\n                     let error_msg = uv::ll::get_last_err_info(\n                         loop_ptr);\n-                    fail!(~\"timer::delayed_send() start failed: \" +\n-                        error_msg);\n+                    fail!(\"timer::delayed_send() start failed: %s\", error_msg);\n                 }\n             } else {\n                 let error_msg = uv::ll::get_last_err_info(loop_ptr);\n-                fail!(~\"timer::delayed_send() init failed: \" +\n-                    error_msg);\n+                fail!(\"timer::delayed_send() init failed: %s\", error_msg);\n             }\n         }\n     };\n@@ -158,7 +156,7 @@ extern fn delayed_send_cb(handle: *uv::ll::uv_timer_t, status: libc::c_int) {\n         } else {\n             let loop_ptr = uv::ll::get_loop_for_uv_handle(handle);\n             let error_msg = uv::ll::get_last_err_info(loop_ptr);\n-            fail!(~\"timer::sleep() init failed: \"+error_msg);\n+            fail!(\"timer::sleep() init failed: %s\", error_msg);\n         }\n     }\n }"}, {"sha": "e0ee3a1ee01c400f437e422f8bc1e136ff01eb79", "filename": "src/libstd/treemap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibstd%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibstd%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftreemap.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -716,7 +716,7 @@ pub impl<K: TotalOrd, V> TreeNode<K, V> {\n #[cfg(stage0)]\n fn each<'r, K: TotalOrd, V>(_: &'r Option<~TreeNode<K, V>>,\n                             _: &fn(&'r K, &'r V) -> bool) -> bool {\n-    fail!(~\"don't use me in stage0!\")\n+    fail!(\"don't use me in stage0!\")\n }\n #[cfg(not(stage0))]\n fn each<'r, K: TotalOrd, V>(node: &'r Option<~TreeNode<K, V>>,\n@@ -728,7 +728,7 @@ fn each<'r, K: TotalOrd, V>(node: &'r Option<~TreeNode<K, V>>,\n #[cfg(stage0)]\n fn each_reverse<'r, K: TotalOrd, V>(_: &'r Option<~TreeNode<K, V>>,\n                                     _: &fn(&'r K, &'r V) -> bool) -> bool {\n-    fail!(~\"don't use me in stage0!\")\n+    fail!(\"don't use me in stage0!\")\n }\n #[cfg(not(stage0))]\n fn each_reverse<'r, K: TotalOrd, V>(node: &'r Option<~TreeNode<K, V>>,"}, {"sha": "c7b5d9eef726bfbf3b457533d72c6730fb9886d8", "filename": "src/libstd/uv_global_loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibstd%2Fuv_global_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibstd%2Fuv_global_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_global_loop.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -180,11 +180,11 @@ mod test {\n                                                            simple_timer_cb,\n                                                            1u, 0u);\n                         if(start_status != 0i32) {\n-                            fail!(~\"failure on ll::timer_start()\");\n+                            fail!(\"failure on ll::timer_start()\");\n                         }\n                     }\n                     else {\n-                        fail!(~\"failure on ll::timer_init()\");\n+                        fail!(\"failure on ll::timer_init()\");\n                     }\n                 }\n             };"}, {"sha": "ee62bb270b8295755dc99f493ee6811891b9f647", "filename": "src/libsyntax/abi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibsyntax%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibsyntax%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fabi.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -338,7 +338,7 @@ fn cannot_combine(n: Abi, m: Abi) {\n                          (m == a && n == b));\n         }\n         None => {\n-            fail!(~\"Invalid match not detected\");\n+            fail!(\"Invalid match not detected\");\n         }\n     }\n }\n@@ -350,7 +350,7 @@ fn can_combine(n: Abi, m: Abi) {\n     set.add(m);\n     match set.check_valid() {\n         Some((_, _)) => {\n-            fail!(~\"Valid match declared invalid\");\n+            fail!(\"Valid match declared invalid\");\n         }\n         None => {}\n     }"}, {"sha": "94bd9a185891229448ccf969f4a2ca754c5c6c2a", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -74,7 +74,7 @@ impl<S:Encoder> Encodable<S> for ident {\n         unsafe {\n             let intr =\n                 match local_data::local_data_get(interner_key!()) {\n-                    None => fail!(~\"encode: TLS interner not set up\"),\n+                    None => fail!(\"encode: TLS interner not set up\"),\n                     Some(intr) => intr\n                 };\n \n@@ -88,7 +88,7 @@ impl<D:Decoder> Decodable<D> for ident {\n         let intr = match unsafe {\n             local_data::local_data_get(interner_key!())\n         } {\n-            None => fail!(~\"decode: TLS interner not set up\"),\n+            None => fail!(\"decode: TLS interner not set up\"),\n             Some(intr) => intr\n         };\n "}, {"sha": "72e9a3d2cd03ba2948666e4a5c9a2113b96a8a99", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -304,7 +304,7 @@ pub fn map_struct_def(\n                     cx.map.insert(ctor_id,\n                                   node_struct_ctor(struct_def, item, p));\n                 }\n-                _ => fail!(~\"struct def parent wasn't an item\")\n+                _ => fail!(\"struct def parent wasn't an item\")\n             }\n         }\n     }"}, {"sha": "0ea0dcf16f641639b4f31ba8ff1b80f9f1cec888", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -37,7 +37,7 @@ pub fn stmt_id(s: &stmt) -> node_id {\n       stmt_decl(_, id) => id,\n       stmt_expr(_, id) => id,\n       stmt_semi(_, id) => id,\n-      stmt_mac(*) => fail!(~\"attempted to analyze unexpanded stmt\")\n+      stmt_mac(*) => fail!(\"attempted to analyze unexpanded stmt\")\n     }\n }\n "}, {"sha": "e0392b476e458ca8095e18022d3ad03efb1ef38d", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -430,8 +430,7 @@ priv impl CodeMap {\n             }\n         }\n         if (a >= len) {\n-            fail!(fmt!(\"position %u does not resolve to a source location\",\n-                      pos.to_uint()))\n+            fail!(\"position %u does not resolve to a source location\", pos.to_uint())\n         }\n \n         return a;"}, {"sha": "9b78d9954d3f817177228e79cab2088f03ec0846", "filename": "src/libsyntax/ext/auto_encode.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_encode.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -917,7 +917,7 @@ fn mk_struct_fields(fields: &[@ast::struct_field]) -> ~[field] {\n     do fields.map |field| {\n         let ident = match field.node.kind {\n             ast::named_field(ident, _) => ident,\n-            _ => fail!(~\"[auto_encode] does not support unnamed fields\")\n+            _ => fail!(\"[auto_encode] does not support unnamed fields\")\n         };\n \n         field {\n@@ -1056,7 +1056,7 @@ fn mk_enum_ser_body(\n                     /*bad*/ copy *args\n                 ),\n             ast::struct_variant_kind(*) =>\n-                fail!(~\"struct variants unimplemented\"),\n+                fail!(\"struct variants unimplemented\"),\n         }\n     };\n \n@@ -1151,7 +1151,7 @@ fn mk_enum_deser_body(\n                 }\n             },\n             ast::struct_variant_kind(*) =>\n-                fail!(~\"struct variants unimplemented\"),\n+                fail!(\"struct variants unimplemented\"),\n         };\n \n         let pat = @ast::pat {"}, {"sha": "20bf01c0dc1d9f1f590f920a4a07887e9aceda6b", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -479,11 +479,11 @@ impl <K: Eq + Hash + IterBytes ,V: Copy> MapChain<K,V>{\n     // names? I think not.\n     // delaying implementing this....\n     fn each_key (&self, _f: &fn (&K)->bool) {\n-        fail!(~\"unimplemented 2013-02-15T10:01\");\n+        fail!(\"unimplemented 2013-02-15T10:01\");\n     }\n \n     fn each_value (&self, _f: &fn (&V) -> bool) {\n-        fail!(~\"unimplemented 2013-02-15T10:02\");\n+        fail!(\"unimplemented 2013-02-15T10:02\");\n     }\n \n     // Returns a copy of the value that the name maps to."}, {"sha": "55229edfa18331ae9e8fb9ede986d61e0b545cbd", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -468,7 +468,7 @@ pub fn core_macros() -> ~str {\n                 let expected_val = $expected;\n                 // check both directions of equality....\n                 if !((given_val == expected_val) && (expected_val == given_val)) {\n-                    fail!(fmt!(\\\"left: %? != right: %?\\\", given_val, expected_val));\n+                    fail!(\\\"left: %? does not equal right: %?\\\", given_val, expected_val);\n                 }\n             }\n         )\n@@ -660,7 +660,7 @@ mod test {\n \n     // make sure that fail! is present\n     #[test] fn fail_exists_test () {\n-        let src = ~\"fn main() { fail!(~\\\"something appropriately gloomy\\\");}\";\n+        let src = ~\"fn main() { fail!(\\\"something appropriately gloomy\\\");}\";\n         let sess = parse::new_parse_sess(None);\n         let cfg = ~[];\n         let crate_ast = parse::parse_crate_from_source_str(\n@@ -733,7 +733,7 @@ mod test {\n             cfg,~[make_dummy_attr (@~\"macro_escape\")],sess);\n         match item_ast {\n             Some(_) => (), // success\n-            None => fail!(~\"expected this to parse\")\n+            None => fail!(\"expected this to parse\")\n         }\n     }\n "}, {"sha": "d5b3adca1688a303d580035770c43cc80c10360c", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -556,7 +556,7 @@ fn mk_token(cx: @ext_ctxt, sp: span, tok: token::Token) -> @ast::expr {\n                                   ~[mk_ident(cx, sp, ident)]);\n         }\n \n-        INTERPOLATED(_) => fail!(~\"quote! with interpolated token\"),\n+        INTERPOLATED(_) => fail!(\"quote! with interpolated token\"),\n \n         _ => ()\n     }\n@@ -623,7 +623,7 @@ fn mk_tt(cx: @ext_ctxt, sp: span, tt: &ast::token_tree)\n         }\n \n         ast::tt_delim(ref tts) => mk_tts(cx, sp, *tts),\n-        ast::tt_seq(*) => fail!(~\"tt_seq in quote!\"),\n+        ast::tt_seq(*) => fail!(\"tt_seq in quote!\"),\n \n         ast::tt_nonterminal(sp, ident) => {\n "}, {"sha": "a98e93eec8430ab9d0850138fb1693d2eb947144", "filename": "src/libsyntax/opt_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibsyntax%2Fopt_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibsyntax%2Fopt_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fopt_vec.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -63,7 +63,7 @@ impl<T> OptVec<T> {\n \n     fn get<'a>(&'a self, i: uint) -> &'a T {\n         match *self {\n-            Empty => fail!(fmt!(\"Invalid index %u\", i)),\n+            Empty => fail!(\"Invalid index %u\", i),\n             Vec(ref v) => &v[i]\n         }\n     }"}, {"sha": "8faba022a901f7e0650d1aff544c29bfed699163", "filename": "src/libsyntax/parse/comments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibsyntax%2Fparse%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibsyntax%2Fparse%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcomments.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -111,7 +111,7 @@ pub fn strip_doc_comment_decoration(comment: &str) -> ~str {\n         return str::connect(lines, ~\"\\n\");\n     }\n \n-    fail!(~\"not a doc-comment: \" + comment);\n+    fail!(\"not a doc-comment: %s\", comment);\n }\n \n fn read_to_eol(rdr: @mut StringReader) -> ~str {"}, {"sha": "27686c4e4aa1bb52764277b471ee2ad78639e0bf", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -211,7 +211,7 @@ pub fn to_str(in: @ident_interner, t: &Token) -> ~str {\n                       nt_block(*) => ~\"block\",\n                       nt_stmt(*) => ~\"statement\",\n                       nt_pat(*) => ~\"pattern\",\n-                      nt_expr(*) => fail!(~\"should have been handled above\"),\n+                      nt_expr(*) => fail!(\"should have been handled above\"),\n                       nt_ty(*) => ~\"type\",\n                       nt_ident(*) => ~\"identifier\",\n                       nt_path(*) => ~\"path\","}, {"sha": "599024a781f7f1852892d8801dce3fde5372d54b", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -430,10 +430,10 @@ pub fn print_type(s: @ps, ty: @ast::Ty) {\n         word(s.s, ~\"]\");\n       }\n       ast::ty_mac(_) => {\n-          fail!(~\"print_type doesn't know how to print a ty_mac\");\n+          fail!(\"print_type doesn't know how to print a ty_mac\");\n       }\n       ast::ty_infer => {\n-          fail!(~\"print_type shouldn't see a ty_infer\");\n+          fail!(\"print_type shouldn't see a ty_infer\");\n       }\n \n     }\n@@ -683,7 +683,7 @@ pub fn print_struct(s: @ps,\n             popen(s);\n             do commasep(s, inconsistent, struct_def.fields) |s, field| {\n                 match field.node.kind {\n-                    ast::named_field(*) => fail!(~\"unexpected named field\"),\n+                    ast::named_field(*) => fail!(\"unexpected named field\"),\n                     ast::unnamed_field => {\n                         maybe_print_comment(s, field.span.lo);\n                         print_type(s, field.node.ty);\n@@ -702,7 +702,7 @@ pub fn print_struct(s: @ps,\n \n         for struct_def.fields.each |field| {\n             match field.node.kind {\n-                ast::unnamed_field => fail!(~\"unexpected unnamed field\"),\n+                ast::unnamed_field => fail!(\"unexpected unnamed field\"),\n                 ast::named_field(ident, visibility) => {\n                     hardbreak_if_not_bol(s);\n                     maybe_print_comment(s, field.span.lo);\n@@ -984,7 +984,7 @@ pub fn print_if(s: @ps, test: @ast::expr, blk: &ast::blk,\n               }\n               // BLEAH, constraints would be great here\n               _ => {\n-                  fail!(~\"print_if saw if with weird alternative\");\n+                  fail!(\"print_if saw if with weird alternative\");\n               }\n             }\n           }\n@@ -2237,7 +2237,7 @@ mod test {\n \n     fn string_check<T:Eq> (given : &T, expected: &T) {\n         if !(given == expected) {\n-            fail!(fmt!(\"given %?, expected %?\",given,expected));\n+            fail!(\"given %?, expected %?\", given, expected);\n         }\n     }\n "}, {"sha": "2ecd318db3c9261dc3bf1fa189d6849a56a0abe9", "filename": "src/test/auxiliary/static-methods-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Fauxiliary%2Fstatic-methods-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Fauxiliary%2Fstatic-methods-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fstatic-methods-crate.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -36,6 +36,6 @@ impl read for bool {\n pub fn read<T:read + Copy>(s: ~str) -> T {\n     match read::readMaybe(s) {\n       Some(x) => x,\n-      _ => fail!(~\"read failed!\")\n+      _ => fail!(\"read failed!\")\n     }\n }"}, {"sha": "6fd31aa7b9f33057b36f0cb798c439bb3fbac288", "filename": "src/test/bench/graph500-bfs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fgraph500-bfs.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -217,7 +217,7 @@ fn bfs2(graph: graph, key: node_id) -> bfs_result {\n         match *c {\n           white => { -1i64 }\n           black(parent) => { parent }\n-          _ => { fail!(~\"Found remaining gray nodes in BFS\") }\n+          _ => { fail!(\"Found remaining gray nodes in BFS\") }\n         }\n     }\n }\n@@ -305,7 +305,7 @@ fn pbfs(graph: &arc::ARC<graph>, key: node_id) -> bfs_result {\n             match *c {\n                 white => { -1i64 }\n                 black(parent) => { parent }\n-                _ => { fail!(~\"Found remaining gray nodes in BFS\") }\n+                _ => { fail!(\"Found remaining gray nodes in BFS\") }\n             }\n         };\n         result"}, {"sha": "03d452524327247bd804627e2dc70e71f8745cb7", "filename": "src/test/bench/shootout-chameneos-redux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -61,7 +61,7 @@ fn show_digit(nn: uint) -> ~str {\n         7 => {~\"seven\"}\n         8 => {~\"eight\"}\n         9 => {~\"nine\"}\n-        _ => {fail!(~\"expected digits from 0 to 9...\")}\n+        _ => {fail!(\"expected digits from 0 to 9...\")}\n     }\n }\n "}, {"sha": "c383cdf4318a72fcfafea9e1aeb7f0a120170468", "filename": "src/test/bench/sudoku.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Fbench%2Fsudoku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Fbench%2Fsudoku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fsudoku.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -76,7 +76,7 @@ pub impl Sudoku {\n                 g[row][col] = uint::from_str(comps[2]).get() as u8;\n             }\n             else {\n-                fail!(~\"Invalid sudoku file\");\n+                fail!(\"Invalid sudoku file\");\n             }\n         }\n         return Sudoku::new(g)\n@@ -112,7 +112,7 @@ pub impl Sudoku {\n                 ptr = ptr + 1u;\n             } else {\n                 // no: redo this field aft recoloring pred; unless there is none\n-                if ptr == 0u { fail!(~\"No solution found for this sudoku\"); }\n+                if ptr == 0u { fail!(\"No solution found for this sudoku\"); }\n                 ptr = ptr - 1u;\n             }\n         }"}, {"sha": "a6eaf8923108920e51a30f409926001c14bcc50e", "filename": "src/test/bench/task-perf-jargon-metal-smoke.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -50,6 +50,6 @@ fn main() {\n     let (p,c) = comm::stream();\n     child_generation(uint::from_str(args[1]).get(), c);\n     if p.try_recv().is_none() {\n-        fail!(~\"it happened when we slumbered\");\n+        fail!(\"it happened when we slumbered\");\n     }\n }"}, {"sha": "7f98eba599654ca77f708dff46d2ba40362b948b", "filename": "src/test/compile-fail/borrowck-vec-pattern-element-loan.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-element-loan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-element-loan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-element-loan.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -2,7 +2,7 @@ fn a() -> &[int] {\n     let vec = [1, 2, 3, 4];\n     let tail = match vec {\n         [_, ..tail] => tail, //~ ERROR does not live long enough\n-        _ => fail!(~\"a\")\n+        _ => fail!(\"a\")\n     };\n     tail\n }\n@@ -11,7 +11,7 @@ fn b() -> &[int] {\n     let vec = [1, 2, 3, 4];\n     let init = match vec {\n         [..init, _] => init, //~ ERROR does not live long enough\n-        _ => fail!(~\"b\")\n+        _ => fail!(\"b\")\n     };\n     init\n }\n@@ -20,7 +20,7 @@ fn c() -> &[int] {\n     let vec = [1, 2, 3, 4];\n     let slice = match vec {\n         [_, ..slice, _] => slice, //~ ERROR does not live long enough\n-        _ => fail!(~\"c\")\n+        _ => fail!(\"c\")\n     };\n     slice\n }"}, {"sha": "81f052918edd8cdbdda8f8544e08384e676245ae", "filename": "src/test/compile-fail/borrowck-vec-pattern-nesting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-nesting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-nesting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-nesting.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -4,7 +4,7 @@ fn a() {\n         [~ref _a] => {\n             vec[0] = ~4; //~ ERROR cannot assign to `vec[]` because it is borrowed\n         }\n-        _ => fail!(~\"foo\")\n+        _ => fail!(\"foo\")\n     }\n }\n "}, {"sha": "6f669e67ec7dd183a12bf2882fb5046ebe723ed5", "filename": "src/test/compile-fail/borrowck-vec-pattern-tail-element-loan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-tail-element-loan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-tail-element-loan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-tail-element-loan.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -2,7 +2,7 @@ fn a() -> &int {\n     let vec = [1, 2, 3, 4];\n     let tail = match vec {\n         [_a, ..tail] => &tail[0], //~ ERROR borrowed value does not live long enough\n-        _ => fail!(~\"foo\")\n+        _ => fail!(\"foo\")\n     };\n     tail\n }"}, {"sha": "c37c5a3e5afa58dbb06c08e66b4577e91bc8f0aa", "filename": "src/test/compile-fail/issue-3601.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Fcompile-fail%2Fissue-3601.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Fcompile-fail%2Fissue-3601.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3601.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -37,6 +37,6 @@ fn main() {\n         ~Element(ed) => match ed.kind { //~ ERROR non-exhaustive patterns\n             ~HTMLImageElement(ref d) if d.image.is_some() => { true }\n         },\n-        _ => fail!(~\"WAT\") //~ ERROR unreachable pattern\n+        _ => fail!(\"WAT\") //~ ERROR unreachable pattern\n     };\n }"}, {"sha": "b87b3c5245a8cbac80aa91f3e7f536fdaf949478", "filename": "src/test/compile-fail/non-exhaustive-match-nested.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-match-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-match-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-match-nested.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -16,7 +16,7 @@ enum u { c, d }\n fn main() {\n   let x = a(c);\n   match x {\n-      a(d) => { fail!(~\"hello\"); }\n-      b => { fail!(~\"goodbye\"); }\n+      a(d) => { fail!(\"hello\"); }\n+      b => { fail!(\"goodbye\"); }\n     }\n }"}, {"sha": "13ccd118c61861ac0f4eaebf90c45b9517c0edc2", "filename": "src/test/run-fail/alt-disc-bot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Falt-disc-bot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Falt-disc-bot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Falt-disc-bot.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n // error-pattern:quux\n-fn f() -> ! { fail!(~\"quux\") }\n+fn f() -> ! { fail!(\"quux\") }\n fn g() -> int { match f() { true => { 1 } false => { 0 } } }\n fn main() { g(); }"}, {"sha": "306357b00013e3f140de4191f7d7ce7b7a412051", "filename": "src/test/run-fail/alt-wildcards.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Falt-wildcards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Falt-wildcards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Falt-wildcards.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -11,9 +11,9 @@\n // error-pattern:squirrelcupcake\n fn cmp() -> int {\n     match (option::Some('a'), option::None::<char>) {\n-        (option::Some(_), _) => { fail!(~\"squirrelcupcake\"); }\n+        (option::Some(_), _) => { fail!(\"squirrelcupcake\"); }\n         (_, option::Some(_)) => { fail!(); }\n-        _                    => { fail!(~\"wat\"); }\n+        _                    => { fail!(\"wat\"); }\n     }\n }\n "}, {"sha": "911409b6898a3fb2a364705c938f32a6ff55049c", "filename": "src/test/run-fail/args-fail.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Fargs-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Fargs-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fargs-fail.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n // error-pattern:meep\n-fn f(a: int, b: int, c: @int) { fail!(~\"moop\"); }\n+fn f(a: int, b: int, c: @int) { fail!(\"moop\"); }\n \n-fn main() { f(1, fail!(~\"meep\"), @42); }\n+fn main() { f(1, fail!(\"meep\"), @42); }"}, {"sha": "facfb89409c28d7e0cd27452bc6868a7e50d77f5", "filename": "src/test/run-fail/assert-eq-macro-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Fassert-eq-macro-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Fassert-eq-macro-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fassert-eq-macro-fail.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:left: 14 != right: 15\n+// error-pattern:left: 14 does not equal right: 15\n \n #[deriving(Eq)]\n struct Point { x : int }"}, {"sha": "a49f96fced51fddcc7094d44d247d39188237206", "filename": "src/test/run-fail/binop-fail-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Fbinop-fail-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Fbinop-fail-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fbinop-fail-2.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n // error-pattern:quux\n-fn my_err(s: ~str) -> ! { error!(s); fail!(~\"quux\"); }\n+fn my_err(s: ~str) -> ! { error!(s); fail!(\"quux\"); }\n fn main() { 3u == my_err(~\"bye\"); }"}, {"sha": "a49f96fced51fddcc7094d44d247d39188237206", "filename": "src/test/run-fail/binop-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Fbinop-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Fbinop-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fbinop-fail.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n // error-pattern:quux\n-fn my_err(s: ~str) -> ! { error!(s); fail!(~\"quux\"); }\n+fn my_err(s: ~str) -> ! { error!(s); fail!(\"quux\"); }\n fn main() { 3u == my_err(~\"bye\"); }"}, {"sha": "b497b0224b9f73a4562a7e00d881639594e17b2b", "filename": "src/test/run-fail/bug-811.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Fbug-811.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Fbug-811.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fbug-811.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -21,4 +21,4 @@ struct chan_t<T> {\n \n fn send<T:Owned>(ch: chan_t<T>, data: T) { fail!(); }\n \n-fn main() { fail!(~\"quux\"); }\n+fn main() { fail!(\"quux\"); }"}, {"sha": "cf6f5a009d530abaa008b9d9f7c84075f571aac8", "filename": "src/test/run-fail/die-macro-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Fdie-macro-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Fdie-macro-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fdie-macro-expr.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -1,5 +1,5 @@\n // error-pattern:test\n \n fn main() {\n-    let i: int = fail!(~\"test\");\n+    let i: int = fail!(\"test\");\n }"}, {"sha": "bb62a7e8beff664b576fad114e36cfa4f9ed71fa", "filename": "src/test/run-fail/die-macro-pure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Fdie-macro-pure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Fdie-macro-pure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fdie-macro-pure.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -1,7 +1,7 @@\n // error-pattern:test\n \n fn f() {\n-    fail!(~\"test\");\n+    fail!(\"test\");\n }\n \n fn main() {"}, {"sha": "71cc7317e6ef20aadf6e6990b86828b59e435efa", "filename": "src/test/run-fail/die-macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Fdie-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Fdie-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fdie-macro.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -1,5 +1,5 @@\n // error-pattern:test\n \n fn main() {\n-    fail!(~\"test\");\n+    fail!(\"test\");\n }"}, {"sha": "ccf7aa5701908b45e9c49aa0bdb153d40b3ed203", "filename": "src/test/run-fail/doublefail.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Fdoublefail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Fdoublefail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fdoublefail.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -10,6 +10,6 @@\n \n //error-pattern:One\n fn main() {\n-    fail!(~\"One\");\n-    fail!(~\"Two\");\n+    fail!(\"One\");\n+    fail!(\"Two\");\n }"}, {"sha": "28fd9aff009b7f479a9e55fe4ec443747354b39a", "filename": "src/test/run-fail/explicit-fail-msg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Fexplicit-fail-msg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Fexplicit-fail-msg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fexplicit-fail-msg.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -10,5 +10,5 @@\n \n // error-pattern:wooooo\n fn main() {\n-    let mut a = 1; if 1 == 1 { a = 2; } fail!(~\"woooo\" + ~\"o\");\n+    let mut a = 1; if 1 == 1 { a = 2; } fail!(~\"woooo\" + \"o\");\n }"}, {"sha": "f0d9b5a3178fedfa9485fa46ed8f80fe6eddaa37", "filename": "src/test/run-fail/fail-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Ffail-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Ffail-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ffail-arg.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -11,4 +11,4 @@\n // error-pattern:woe\n fn f(a: int) { debug!(a); }\n \n-fn main() { f(fail!(~\"woe\")); }\n+fn main() { f(fail!(\"woe\")); }"}, {"sha": "e424647569a9f468632081118d6c3be4d416fb85", "filename": "src/test/run-fail/fail-macro-owned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Ffail-macro-owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Ffail-macro-owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ffail-macro-owned.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -11,5 +11,5 @@\n // error-pattern:task failed at 'test-fail-owned'\n \n fn main() {\n-    fail!(~\"test-fail-owned\");\n+    fail!(\"test-fail-owned\");\n }"}, {"sha": "beb0d38ea473bf085c6184ec18e50d6d42bee3c4", "filename": "src/test/run-fail/fail-main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Ffail-main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Ffail-main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ffail-main.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -10,4 +10,4 @@\n \n // error-pattern:moop\n extern mod std;\n-fn main() { fail!(~\"moop\"); }\n+fn main() { fail!(\"moop\"); }"}, {"sha": "90a44e42759377e416135c568cda77a819f96388", "filename": "src/test/run-fail/fail-parens.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Ffail-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Ffail-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ffail-parens.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -13,7 +13,7 @@\n // error-pattern:oops\n \n fn bigfail() {\n-    while (fail!(~\"oops\")) { if (fail!()) {\n+    while (fail!(\"oops\")) { if (fail!()) {\n         match (fail!()) { () => {\n         }\n                      }"}, {"sha": "3ae387952a2d74ef4ab4f9a243f8752ffaacbf64", "filename": "src/test/run-fail/for-each-loop-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Ffor-each-loop-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Ffor-each-loop-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ffor-each-loop-fail.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -10,4 +10,4 @@\n \n // error-pattern:moop\n extern mod std;\n-fn main() { for uint::range(0u, 10u) |_i| { fail!(~\"moop\"); } }\n+fn main() { for uint::range(0u, 10u) |_i| { fail!(\"moop\"); } }"}, {"sha": "72a89c22dc5fe450b8f831ea417e9cd44a0f260e", "filename": "src/test/run-fail/if-check-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Fif-check-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Fif-check-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fif-check-fail.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -19,7 +19,7 @@ fn foo(x: uint) {\n     if even(x) {\n         debug!(x);\n     } else {\n-        fail!(~\"Number is odd\");\n+        fail!(\"Number is odd\");\n     }\n }\n "}, {"sha": "9a36681da5f1692fea88bff87b5ff5c4ecd0e302", "filename": "src/test/run-fail/if-cond-bot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Fif-cond-bot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Fif-cond-bot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fif-cond-bot.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n // error-pattern:quux\n-fn my_err(s: ~str) -> ! { error!(s); fail!(~\"quux\"); }\n+fn my_err(s: ~str) -> ! { error!(s); fail!(\"quux\"); }\n fn main() { if my_err(~\"bye\") { } }"}, {"sha": "1743d9a6d407f936fe6590915ef4e19fbe1c1041", "filename": "src/test/run-fail/issue-3029.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Fissue-3029.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Fissue-3029.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-3029.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -11,7 +11,7 @@\n // error-pattern:so long\n fn main() {\n     let x = ~[], y = ~[3];\n-    fail!(~\"so long\");\n+    fail!(\"so long\");\n     x += y;\n     ~\"good\" + ~\"bye\";\n }"}, {"sha": "1ad4422e1a943ac37407a9545b683e51f23cb999", "filename": "src/test/run-fail/issue-948.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Fissue-948.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Fissue-948.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-948.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -14,5 +14,5 @@ struct Point { x: int, y: int }\n \n fn main() {\n     let origin = Point {x: 0, y: 0};\n-    let f: Point = Point {x: (fail!(~\"beep boop\")),.. origin};\n+    let f: Point = Point {x: (fail!(\"beep boop\")),.. origin};\n }"}, {"sha": "4b09cb75324c04bbd98bdd82e8a2f36ed1c0cea2", "filename": "src/test/run-fail/linked-failure3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Flinked-failure3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Flinked-failure3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Flinked-failure3.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -12,7 +12,7 @@\n \n // error-pattern:fail\n \n-fn grandchild() { fail!(~\"grandchild dies\"); }\n+fn grandchild() { fail!(\"grandchild dies\"); }\n \n fn child() {\n     let (p, _c) = comm::stream::<int>();"}, {"sha": "444c899188fadd8424b5acd2f176cc3b6262ff68", "filename": "src/test/run-fail/rhs-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Frhs-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Frhs-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Frhs-type.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -14,4 +14,4 @@\n \n struct T { t: ~str }\n \n-fn main() { let pth = fail!(~\"bye\"); let rs: T = T {t: pth}; }\n+fn main() { let pth = fail!(\"bye\"); let rs: T = T {t: pth}; }"}, {"sha": "1dd27d7d3ae2004df2fb657ace24283188d9bcb0", "filename": "src/test/run-fail/rt-log-trunc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Frt-log-trunc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Frt-log-trunc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Frt-log-trunc.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -12,7 +12,7 @@\n // error-pattern:[...]\n \n fn main() {\n-    fail!(~\"\\\n+    fail!(\"\\\n           aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n           aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n           aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\"}, {"sha": "b055bf4ed95633284cf8ecc58b0000da869ab8e8", "filename": "src/test/run-fail/run-unexported-tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Frun-unexported-tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Frun-unexported-tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Frun-unexported-tests.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -17,5 +17,5 @@ mod m {\n     pub fn exported() { }\n \n     #[test]\n-    fn unexported() { fail!(~\"runned an unexported test\"); }\n+    fn unexported() { fail!(\"runned an unexported test\"); }\n }"}, {"sha": "ca411872b61c7f60dcd50d30fb6f2dd0d9dc339b", "filename": "src/test/run-fail/task-comm-recv-block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Ftask-comm-recv-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Ftask-comm-recv-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ftask-comm-recv-block.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -12,7 +12,7 @@\n \n fn goodfail() {\n     task::yield();\n-    fail!(~\"goodfail\");\n+    fail!(\"goodfail\");\n }\n \n fn main() {\n@@ -21,5 +21,5 @@ fn main() {\n     // We shouldn't be able to get past this recv since there's no\n     // message available\n     let i: int = po.recv();\n-    fail!(~\"badfail\");\n+    fail!(\"badfail\");\n }"}, {"sha": "d7e079ad90716e999bf0d590c5c96240f958ee5f", "filename": "src/test/run-fail/unwind-alt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Funwind-alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Funwind-alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-alt.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -15,7 +15,7 @@ fn test_box() {\n }\n fn test_str() {\n   let res = match false { true => { ~\"happy\" },\n-     _ => fail!(~\"non-exhaustive match failure\") };\n+     _ => fail!(\"non-exhaustive match failure\") };\n   assert!(res == ~\"happy\");\n }\n fn main() {"}, {"sha": "75c3638a99dd48afd9c5b88bbe52fc551b0c6c41", "filename": "src/test/run-fail/unwind-lambda.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Funwind-lambda.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Funwind-lambda.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-lambda.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -22,7 +22,7 @@ fn main() {\n         let cheese = copy cheese;\n         let f: &fn() = || {\n             let chew = mush + cheese;\n-            fail!(~\"so yummy\")\n+            fail!(\"so yummy\")\n         };\n         f();\n     });"}, {"sha": "486c2dd3b36aa2a1df0a9bee158d37d8650c9047", "filename": "src/test/run-fail/unwind-resource-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Funwind-resource-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Funwind-resource-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-resource-fail.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -15,7 +15,7 @@ struct r {\n }\n \n impl Drop for r {\n-    fn finalize(&self) { fail!(~\"squirrel\") }\n+    fn finalize(&self) { fail!(\"squirrel\") }\n }\n \n fn r(i: int) -> r { r { i: i } }"}, {"sha": "ca98a61f23454d48fa88b05c50911985b380e2a0", "filename": "src/test/run-fail/unwind-resource-fail2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Funwind-resource-fail2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Funwind-resource-fail2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-resource-fail2.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -16,7 +16,7 @@ struct r {\n }\n \n impl Drop for r {\n-    fn finalize(&self) { fail!(~\"wombat\") }\n+    fn finalize(&self) { fail!(\"wombat\") }\n }\n \n fn r(i: int) -> r { r { i: i } }"}, {"sha": "9d6f877293b1b96355be95b743a648b177d2194b", "filename": "src/test/run-fail/unwind-resource-fail3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Funwind-resource-fail3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Funwind-resource-fail3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-resource-fail3.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -20,7 +20,7 @@ fn faily_box(i: @int) -> faily_box { faily_box { i: i } }\n #[unsafe_destructor]\n impl Drop for faily_box {\n     fn finalize(&self) {\n-        fail!(~\"quux\");\n+        fail!(\"quux\");\n     }\n }\n "}, {"sha": "836ed9c015586ef7caf0efe747db1183735aa5e1", "filename": "src/test/run-fail/while-body-fails.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Fwhile-body-fails.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Fwhile-body-fails.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fwhile-body-fails.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -9,4 +9,4 @@\n // except according to those terms.\n \n // error-pattern:quux\n-fn main() { let x: int = { while true { fail!(~\"quux\"); } ; 8 } ; }\n+fn main() { let x: int = { while true { fail!(\"quux\"); } ; 8 } ; }"}, {"sha": "db04026ed9739288991da3e7c46141706b95df2d", "filename": "src/test/run-fail/while-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Fwhile-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Fwhile-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fwhile-fail.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -10,5 +10,5 @@\n \n // error-pattern:giraffe\n fn main() {\n-    fail!({ while true { fail!(~\"giraffe\")}; ~\"clandestine\" });\n+    fail!({ while true { fail!(\"giraffe\") }; \"clandestine\" });\n }"}, {"sha": "ae76c4ba6034b7572428a6c3b3c0090993c7abaf", "filename": "src/test/run-fail/zip-different-lengths.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Fzip-different-lengths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-fail%2Fzip-different-lengths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fzip-different-lengths.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -37,5 +37,5 @@ fn main() {\n \n     assert!(same_length(chars, ints));\n     let ps = zip(chars, ints);\n-    fail!(~\"the impossible happened\");\n+    fail!(\"the impossible happened\");\n }"}, {"sha": "3e01253094b0700fa4cdb114521b6386f423e6d5", "filename": "src/test/run-pass/alt-pattern-lit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-pass%2Falt-pattern-lit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-pass%2Falt-pattern-lit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-pattern-lit.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -14,7 +14,7 @@ fn altlit(f: int) -> int {\n     match f {\n       10 => { debug!(\"case 10\"); return 20; }\n       11 => { debug!(\"case 11\"); return 22; }\n-      _  => fail!(~\"the impossible happened\")\n+      _  => fail!(\"the impossible happened\")\n     }\n }\n "}, {"sha": "6b02b21a084bd950bdf6d2af91c51530339d499b", "filename": "src/test/run-pass/alt-range.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-pass%2Falt-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-pass%2Falt-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-range.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -11,31 +11,31 @@\n pub fn main() {\n     match 5u {\n       1u..5u => {}\n-      _ => fail!(~\"should match range\"),\n+      _ => fail!(\"should match range\"),\n     }\n     match 5u {\n-      6u..7u => fail!(~\"shouldn't match range\"),\n+      6u..7u => fail!(\"shouldn't match range\"),\n       _ => {}\n     }\n     match 5u {\n-      1u => fail!(~\"should match non-first range\"),\n+      1u => fail!(\"should match non-first range\"),\n       2u..6u => {}\n-      _ => fail!(~\"math is broken\")\n+      _ => fail!(\"math is broken\")\n     }\n     match 'c' {\n       'a'..'z' => {}\n-      _ => fail!(~\"should suppport char ranges\")\n+      _ => fail!(\"should suppport char ranges\")\n     }\n     match -3 {\n       -7..5 => {}\n-      _ => fail!(~\"should match signed range\")\n+      _ => fail!(\"should match signed range\")\n     }\n     match 3.0 {\n       1.0..5.0 => {}\n-      _ => fail!(~\"should match float range\")\n+      _ => fail!(\"should match float range\")\n     }\n     match -1.5 {\n       -3.6..3.6 => {}\n-      _ => fail!(~\"should match negative float range\")\n+      _ => fail!(\"should match negative float range\")\n     }\n }"}, {"sha": "93f57c6722f21edb19582cc19e0f495fddab65dd", "filename": "src/test/run-pass/binary-minus-without-space.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-pass%2Fbinary-minus-without-space.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-pass%2Fbinary-minus-without-space.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinary-minus-without-space.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -11,6 +11,6 @@\n // Check that issue #954 stays fixed\n \n pub fn main() {\n-    match -1 { -1 => {}, _ => fail!(~\"wat\") }\n+    match -1 { -1 => {}, _ => fail!(\"wat\") }\n     assert!(1-1 == 0);\n }"}, {"sha": "04032900c5160c9cfd2c35ece4b448f46c18ad6d", "filename": "src/test/run-pass/block-arg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-pass%2Fblock-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-pass%2Fblock-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -35,14 +35,14 @@ pub fn main() {\n         assert!(false);\n     }\n     match do vec::all(v) |e| { e.is_negative() } {\n-        true => { fail!(~\"incorrect answer.\"); }\n+        true => { fail!(\"incorrect answer.\"); }\n         false => { }\n     }\n     match 3 {\n       _ if do vec::any(v) |e| { e.is_negative() } => {\n       }\n       _ => {\n-        fail!(~\"wrong answer.\");\n+        fail!(\"wrong answer.\");\n       }\n     }\n "}, {"sha": "f7d526cde911a2427c7bd9445b6bbe8f9754bc34", "filename": "src/test/run-pass/class-impl-very-parameterized-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -79,7 +79,7 @@ impl<T> Map<int, T> for cat<T> {\n     }\n \n     fn mutate_values(&mut self, _f: &fn(&int, &mut T) -> bool) -> bool {\n-        fail!(~\"nope\")\n+        fail!(\"nope\")\n     }\n \n     fn insert(&mut self, k: int, _: T) -> bool {\n@@ -114,7 +114,7 @@ pub impl<T> cat<T> {\n     fn get<'a>(&'a self, k: &int) -> &'a T {\n         match self.find(k) {\n           Some(v) => { v }\n-          None    => { fail!(~\"epic fail\"); }\n+          None    => { fail!(\"epic fail\"); }\n         }\n     }\n "}, {"sha": "2e65bb86655835b1d02c1ade40dae0b50e9bc0a1", "filename": "src/test/run-pass/expr-alt-box.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-pass%2Fexpr-alt-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-pass%2Fexpr-alt-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-box.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -15,13 +15,13 @@\n \n // Tests for match as expressions resulting in boxed types\n fn test_box() {\n-    let res = match true { true => { @100 } _ => fail!(~\"wat\") };\n+    let res = match true { true => { @100 } _ => fail!(\"wat\") };\n     assert!((*res == 100));\n }\n \n fn test_str() {\n     let res = match true { true => { ~\"happy\" },\n-                         _ => fail!(~\"not happy at all\") };\n+                         _ => fail!(\"not happy at all\") };\n     assert!((res == ~\"happy\"));\n }\n "}, {"sha": "c5c89b428255baf9d3ab27b2e381e0277b2c5550", "filename": "src/test/run-pass/expr-alt-generic-box2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box2.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -14,7 +14,7 @@\n type compare<T> = @fn(T, T) -> bool;\n \n fn test_generic<T:Copy>(expected: T, eq: compare<T>) {\n-    let actual: T = match true { true => { expected }, _ => fail!(~\"wat\") };\n+    let actual: T = match true { true => { expected }, _ => fail!(\"wat\") };\n     assert!((eq(expected, actual)));\n }\n "}, {"sha": "085d52d6d7f9ff4ca254632568b5764f97cdd965", "filename": "src/test/run-pass/expr-alt-generic-unique1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique1.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -16,7 +16,7 @@ type compare<T> = @fn(~T, ~T) -> bool;\n fn test_generic<T:Copy+Clone>(expected: ~T, eq: compare<T>) {\n     let actual: ~T = match true {\n         true => { expected.clone() },\n-        _ => fail!(~\"wat\")\n+        _ => fail!(\"wat\")\n     };\n     assert!((eq(expected, actual)));\n }"}, {"sha": "7ef1fb8cab844a072af82d11809c89a20b6b6e7d", "filename": "src/test/run-pass/expr-alt-generic-unique2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique2.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -16,7 +16,7 @@ type compare<T> = @fn(T, T) -> bool;\n fn test_generic<T:Copy+Clone>(expected: T, eq: compare<T>) {\n     let actual: T = match true {\n         true => expected.clone(),\n-        _ => fail!(~\"wat\")\n+        _ => fail!(\"wat\")\n     };\n     assert!((eq(expected, actual)));\n }"}, {"sha": "04a229f228008c86760bb01bf66633b114711fe8", "filename": "src/test/run-pass/expr-alt-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-pass%2Fexpr-alt-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-pass%2Fexpr-alt-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -14,7 +14,7 @@\n type compare<T> = @fn(T, T) -> bool;\n \n fn test_generic<T:Copy>(expected: T, eq: compare<T>) {\n-  let actual: T = match true { true => { expected }, _ => fail!(~\"wat\") };\n+  let actual: T = match true { true => { expected }, _ => fail!(\"wat\") };\n     assert!((eq(expected, actual)));\n }\n "}, {"sha": "cf69d754f37a4328dadb84518761e2ac9e77cfd2", "filename": "src/test/run-pass/for-loop-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-pass%2Ffor-loop-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-pass%2Ffor-loop-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffor-loop-fail.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -8,4 +8,4 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub fn main() { let x: ~[int] = ~[]; for x.each |_i| { fail!(~\"moop\"); } }\n+pub fn main() { let x: ~[int] = ~[]; for x.each |_i| { fail!(\"moop\"); } }"}, {"sha": "e46d2a923a8c52125f1eab02d30f70cc11d0f4e8", "filename": "src/test/run-pass/issue-2718.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2718.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -85,7 +85,7 @@ pub mod pipes {\n             // The receiver will eventually clean this up.\n             unsafe { forget(p); }\n           }\n-          full => { fail!(~\"duplicate send\") }\n+          full => { fail!(\"duplicate send\") }\n           blocked => {\n \n             // The receiver will eventually clean this up.\n@@ -127,7 +127,7 @@ pub mod pipes {\n           }\n           full => {\n             // This is impossible\n-            fail!(~\"you dun goofed\")\n+            fail!(\"you dun goofed\")\n           }\n           terminated => {\n             // I have to clean up, use drop_glue\n@@ -144,7 +144,7 @@ pub mod pipes {\n           }\n           blocked => {\n             // this shouldn't happen.\n-            fail!(~\"terminating a blocked packet\")\n+            fail!(\"terminating a blocked packet\")\n           }\n           terminated | full => {\n             // I have to clean up, use drop_glue\n@@ -269,7 +269,7 @@ pub mod pingpong {\n         pub fn do_pong(c: pong) -> (ping, ()) {\n             let packet = ::pipes::recv(c);\n             if packet.is_none() {\n-                fail!(~\"sender closed the connection\")\n+                fail!(\"sender closed the connection\")\n             }\n             (pingpong::liberate_pong(packet.unwrap()), ())\n         }\n@@ -284,7 +284,7 @@ pub mod pingpong {\n         pub fn do_ping(c: ping) -> (pong, ()) {\n             let packet = ::pipes::recv(c);\n             if packet.is_none() {\n-                fail!(~\"sender closed the connection\")\n+                fail!(\"sender closed the connection\")\n             }\n             (pingpong::liberate_ping(packet.unwrap()), ())\n         }"}, {"sha": "6ec2054996335a855e88053e24611791cceb350f", "filename": "src/test/run-pass/nullable-pointer-iotareduction.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-pass%2Fnullable-pointer-iotareduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-pass%2Fnullable-pointer-iotareduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnullable-pointer-iotareduction.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -28,7 +28,7 @@ impl<T> E<T> {\n     }\n     fn get_ref<'r>(&'r self) -> (int, &'r T) {\n         match *self {\n-            Nothing(*) => fail!(fmt!(\"E::get_ref(Nothing::<%s>)\",  stringify!($T))),\n+            Nothing(*) => fail!(\"E::get_ref(Nothing::<%s>)\",  stringify!($T)),\n             Thing(x, ref y) => (x, y)\n         }\n     }\n@@ -57,8 +57,8 @@ macro_rules! check_fancy {\n         let t_ = Thing::<$T>(23, $e);\n         match t_.get_ref() {\n             (23, $v) => { $chk }\n-            _ => fail!(fmt!(\"Thing::<%s>(23, %s).get_ref() != (23, _)\",\n-                            stringify!($T), stringify!($e)))\n+            _ => fail!(\"Thing::<%s>(23, %s).get_ref() != (23, _)\",\n+                       stringify!($T), stringify!($e))\n         }\n     }}\n }"}, {"sha": "10b8c92e7d60a96499d339edfc01d393e5acddec", "filename": "src/test/run-pass/option_addition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-pass%2Foption_addition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-pass%2Foption_addition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foption_addition.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -20,7 +20,7 @@ pub fn main() {\n \n     match nope {\n         None => (),\n-        Some(foo) => fail!(fmt!(\"expected None, but found %?\", foo))\n+        Some(foo) => fail!(\"expected None, but found %?\", foo)\n     }\n     assert!(foo == somefoo.get());\n     assert!(bar == somebar.get());"}, {"sha": "497c17d04590ed80b1a423739c624809a67b417b", "filename": "src/test/run-pass/overload-index-operator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-pass%2Foverload-index-operator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-pass%2Foverload-index-operator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverload-index-operator.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -35,7 +35,7 @@ impl<K:Eq,V:Copy> Index<K,V> for AssociationList<K,V> {\n                 return copy pair.value;\n             }\n         }\n-        fail!(fmt!(\"No value found for key: %?\", index));\n+        fail!(\"No value found for key: %?\", index);\n     }\n }\n \n@@ -52,4 +52,4 @@ pub fn main() {\n \n     assert!(list[foo] == 22)\n     assert!(list[bar] == 44)\n-}\n\\ No newline at end of file\n+}"}, {"sha": "26395e7307f9c94ac7650b2920c050c89a7bd9bb", "filename": "src/test/run-pass/pipe-bank-proto.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-pass%2Fpipe-bank-proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-pass%2Fpipe-bank-proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-bank-proto.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -74,7 +74,7 @@ fn client_follow(bank: bank::client::login) {\n     let bank = client::login(bank, ~\"theincredibleholk\", ~\"1234\");\n     let bank = switch(bank, follow! (\n         ok -> connected { connected }\n-        invalid -> _next { fail!(~\"bank closed the connected\") }\n+        invalid -> _next { fail!(\"bank closed the connected\") }\n     ));\n \n     let bank = client::deposit(bank, 100.00);\n@@ -84,7 +84,7 @@ fn client_follow(bank: bank::client::login) {\n             io::println(~\"Yay! I got money!\");\n         }\n         insufficient_funds -> _next {\n-            fail!(~\"someone stole my money\")\n+            fail!(\"someone stole my money\")\n         }\n     ));\n }\n@@ -97,8 +97,8 @@ fn bank_client(bank: bank::client::login) {\n       Some(ok(connected)) => {\n         move_it!(connected)\n       }\n-      Some(invalid(_)) => { fail!(~\"login unsuccessful\") }\n-      None => { fail!(~\"bank closed the connection\") }\n+      Some(invalid(_)) => { fail!(\"login unsuccessful\") }\n+      None => { fail!(\"bank closed the connection\") }\n     };\n \n     let bank = client::deposit(bank, 100.00);\n@@ -108,10 +108,10 @@ fn bank_client(bank: bank::client::login) {\n         io::println(~\"Yay! I got money!\");\n       }\n       Some(insufficient_funds(_)) => {\n-        fail!(~\"someone stole my money\")\n+        fail!(\"someone stole my money\")\n       }\n       None => {\n-        fail!(~\"bank closed the connection\")\n+        fail!(\"bank closed the connection\")\n       }\n     }\n }"}, {"sha": "8bb069990ee4803bdf797cbaf179410aa81c87da", "filename": "src/test/run-pass/region-return-interior-of-option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-pass%2Fregion-return-interior-of-option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-pass%2Fregion-return-interior-of-option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregion-return-interior-of-option.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -11,7 +11,7 @@\n fn get<'r, T>(opt: &'r Option<T>) -> &'r T {\n     match *opt {\n       Some(ref v) => v,\n-      None => fail!(~\"none\")\n+      None => fail!(\"none\")\n     }\n }\n "}, {"sha": "f226f315ff9ee7251b9484747b014d30a7ec6698", "filename": "src/test/run-pass/weird-exprs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-pass%2Fweird-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c228fad7d94a500866696f8c48ef1707a2507b/src%2Ftest%2Frun-pass%2Fweird-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fweird-exprs.rs?ref=27c228fad7d94a500866696f8c48ef1707a2507b", "patch": "@@ -67,7 +67,7 @@ fn canttouchthis() -> uint {\n fn angrydome() {\n     loop { if break { } }\n     let mut i = 0;\n-    loop { i += 1; if i == 1 { match (loop) { 1 => { }, _ => fail!(~\"wat\") } }\n+    loop { i += 1; if i == 1 { match (loop) { 1 => { }, _ => fail!(\"wat\") } }\n       break; }\n }\n "}]}