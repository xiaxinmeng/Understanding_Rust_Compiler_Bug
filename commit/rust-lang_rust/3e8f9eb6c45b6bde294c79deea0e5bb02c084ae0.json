{"sha": "3e8f9eb6c45b6bde294c79deea0e5bb02c084ae0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlOGY5ZWI2YzQ1YjZiZGUyOTRjNzlkZWVhMGU1YmIwMmMwODRhZTA=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-12-15T09:00:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-15T09:00:11Z"}, "message": "Merge #2559\n\n2559: Add some granularity to syntax highlighting. r=matklad a=omerbenamram\n\nHi,\r\n\r\nI wanted to start using `rust-analyzer` a bit more frequently - one of the main blockers for me so far was the highlighting.\r\n\r\nI just discovered it's possible to override the default colors with `ralsp.<something>` setting without waiting for #2061!\r\n\r\nHowever, the current implementation was lumping a bunch of different tokens into `type` and `literal`.\r\nThe golden standard IMO is what Clion is currently doing (and is my current daily driver for rust).\r\n\r\nClion allows users to control the coloring for specific literal kinds, and the default is to distinguish between them (numerics get a different color from strings, and special colors for bytestrings).\r\n\r\nI've also splitted the builtin types, which are also allowed to be highlighted speratly.\r\nMy goal is to match the default experience I'm getting with clion.\r\nThe only blockers now I think is that `rust-analyzer` doesn't corrently infer types in some situations, so the highlighting information is incorrect in those cases.\r\n\r\nThis is what it looks like so far (with colors overriden to match clion's theme):\r\n![image](https://user-images.githubusercontent.com/2467993/70848219-ccd97900-1e76-11ea-89e1-2e467cfcc9fb.png)\r\n\r\nIf there are any other changes you feel is necessary let me know.\r\n\r\nI did leave the default colors to match the current behavior, since I'm not familiar with the colors for this theme, I added some random (different) colors in the test to check that it indeed was working.\r\n\r\n\n\nCo-authored-by: Omer Ben-Amram <omerbenamram@gmail.com>", "tree": {"sha": "91e2b4c2738c89f22209bdb5925f0ba50f02349c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91e2b4c2738c89f22209bdb5925f0ba50f02349c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e8f9eb6c45b6bde294c79deea0e5bb02c084ae0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd9fYbCRBK7hj4Ov3rIwAAdHIIADI2PQjqlt3z5PMsumBADOqH\netjVr93hYKZpOyag3RNOStJXdapGonPkls6M0KGjWIxUAMAdjyFqZfMZ/4I981eZ\nlC48D96FdCaV1QiCwBzzWn80Opq4+fWvzxNcaaEadtQwfRw/aqRBht83yIjrBzB3\ncxABrI5V8h2hbe6QhQzIloF/kYUG0ehOnrrAukRr6T2Xb1GKKU+UjkiU9dCaYFTa\noDvfzFbTFXekRCXRHn/QG1CReHWEFwIsGCoL8saypt2TbLDHwvTzswZ7SqZQBbi7\nIBAnL+kQJyKJ1GWCT/GzdCqVzMtWHH14OZ92Hs8wXCoOGKs0G9Iencjl0NQOqz8=\n=qunM\n-----END PGP SIGNATURE-----\n", "payload": "tree 91e2b4c2738c89f22209bdb5925f0ba50f02349c\nparent d6223253b628b279f9ddae8f83f7173d01f6b32c\nparent feb5a4a8b8b0a30d71cf34c7927bd41cbae4e104\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1576400411 +0000\ncommitter GitHub <noreply@github.com> 1576400411 +0000\n\nMerge #2559\n\n2559: Add some granularity to syntax highlighting. r=matklad a=omerbenamram\n\nHi,\r\n\r\nI wanted to start using `rust-analyzer` a bit more frequently - one of the main blockers for me so far was the highlighting.\r\n\r\nI just discovered it's possible to override the default colors with `ralsp.<something>` setting without waiting for #2061!\r\n\r\nHowever, the current implementation was lumping a bunch of different tokens into `type` and `literal`.\r\nThe golden standard IMO is what Clion is currently doing (and is my current daily driver for rust).\r\n\r\nClion allows users to control the coloring for specific literal kinds, and the default is to distinguish between them (numerics get a different color from strings, and special colors for bytestrings).\r\n\r\nI've also splitted the builtin types, which are also allowed to be highlighted speratly.\r\nMy goal is to match the default experience I'm getting with clion.\r\nThe only blockers now I think is that `rust-analyzer` doesn't corrently infer types in some situations, so the highlighting information is incorrect in those cases.\r\n\r\nThis is what it looks like so far (with colors overriden to match clion's theme):\r\n![image](https://user-images.githubusercontent.com/2467993/70848219-ccd97900-1e76-11ea-89e1-2e467cfcc9fb.png)\r\n\r\nIf there are any other changes you feel is necessary let me know.\r\n\r\nI did leave the default colors to match the current behavior, since I'm not familiar with the colors for this theme, I added some random (different) colors in the test to check that it indeed was working.\r\n\r\n\n\nCo-authored-by: Omer Ben-Amram <omerbenamram@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e8f9eb6c45b6bde294c79deea0e5bb02c084ae0", "html_url": "https://github.com/rust-lang/rust/commit/3e8f9eb6c45b6bde294c79deea0e5bb02c084ae0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e8f9eb6c45b6bde294c79deea0e5bb02c084ae0/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6223253b628b279f9ddae8f83f7173d01f6b32c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6223253b628b279f9ddae8f83f7173d01f6b32c", "html_url": "https://github.com/rust-lang/rust/commit/d6223253b628b279f9ddae8f83f7173d01f6b32c"}, {"sha": "feb5a4a8b8b0a30d71cf34c7927bd41cbae4e104", "url": "https://api.github.com/repos/rust-lang/rust/commits/feb5a4a8b8b0a30d71cf34c7927bd41cbae4e104", "html_url": "https://github.com/rust-lang/rust/commit/feb5a4a8b8b0a30d71cf34c7927bd41cbae4e104"}], "stats": {"total": 116, "additions": 98, "deletions": 18}, "files": [{"sha": "40605d9efdfbc4a69573a08538bbac9e19622758", "filename": "crates/ra_ide/src/snapshots/highlighting.html", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3e8f9eb6c45b6bde294c79deea0e5bb02c084ae0/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/3e8f9eb6c45b6bde294c79deea0e5bb02c084ae0/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlighting.html?ref=3e8f9eb6c45b6bde294c79deea0e5bb02c084ae0", "patch": "@@ -10,8 +10,10 @@\n .builtin            { color: #DD6718; }\n .text               { color: #DCDCCC; }\n .type               { color: #7CB8BB; }\n+.type\\.param       { color: #20999D; }\n .attribute          { color: #94BFF3; }\n .literal            { color: #BFEBBF; }\n+.literal\\.numeric  { color: #6A8759; }\n .macro              { color: #94BFF3; }\n .variable           { color: #DCDCCC; }\n .variable\\.mut     { color: #DCDCCC; text-decoration: underline; }\n@@ -22,36 +24,36 @@\n </style>\n <pre><code><span class=\"attribute\">#</span><span class=\"attribute\">[</span><span class=\"attribute\">derive</span><span class=\"attribute\">(</span><span class=\"attribute\">Clone</span><span class=\"attribute\">,</span><span class=\"attribute\"> </span><span class=\"attribute\">Debug</span><span class=\"attribute\">)</span><span class=\"attribute\">]</span>\n <span class=\"keyword\">struct</span> <span class=\"type\">Foo</span> {\n-    <span class=\"keyword\">pub</span> <span class=\"field\">x</span>: <span class=\"type\">i32</span>,\n-    <span class=\"keyword\">pub</span> <span class=\"field\">y</span>: <span class=\"type\">i32</span>,\n+    <span class=\"keyword\">pub</span> <span class=\"field\">x</span>: <span class=\"type.builtin\">i32</span>,\n+    <span class=\"keyword\">pub</span> <span class=\"field\">y</span>: <span class=\"type.builtin\">i32</span>,\n }\n \n-<span class=\"keyword\">fn</span> <span class=\"function\">foo</span>&lt;<span class=\"type\">T</span>&gt;() -&gt; <span class=\"type\">T</span> {\n+<span class=\"keyword\">fn</span> <span class=\"function\">foo</span>&lt;<span class=\"type.param\">T</span>&gt;() -&gt; <span class=\"type.param\">T</span> {\n     <span class=\"macro\">unimplemented</span><span class=\"macro\">!</span>();\n-    <span class=\"function\">foo</span>::&lt;<span class=\"type\">i32</span>&gt;();\n+    <span class=\"function\">foo</span>::&lt;<span class=\"type.builtin\">i32</span>&gt;();\n }\n \n <span class=\"comment\">// comment</span>\n <span class=\"keyword\">fn</span> <span class=\"function\">main</span>() {\n-    <span class=\"macro\">println</span><span class=\"macro\">!</span>(<span class=\"string\">\"Hello, {}!\"</span>, <span class=\"literal\">92</span>);\n+    <span class=\"macro\">println</span><span class=\"macro\">!</span>(<span class=\"string\">\"Hello, {}!\"</span>, <span class=\"literal.numeric\">92</span>);\n \n     <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable.mut\">vec</span> = <span class=\"text\">Vec</span>::<span class=\"text\">new</span>();\n     <span class=\"keyword.control\">if</span> <span class=\"keyword\">true</span> {\n-        <span class=\"variable.mut\">vec</span>.<span class=\"text\">push</span>(<span class=\"type\">Foo</span> { <span class=\"field\">x</span>: <span class=\"literal\">0</span>, <span class=\"field\">y</span>: <span class=\"literal\">1</span> });\n+        <span class=\"variable.mut\">vec</span>.<span class=\"text\">push</span>(<span class=\"type\">Foo</span> { <span class=\"field\">x</span>: <span class=\"literal.numeric\">0</span>, <span class=\"field\">y</span>: <span class=\"literal.numeric\">1</span> });\n     }\n-    <span class=\"keyword.unsafe\">unsafe</span> { <span class=\"variable.mut\">vec</span>.<span class=\"text\">set_len</span>(<span class=\"literal\">0</span>); }\n+    <span class=\"keyword.unsafe\">unsafe</span> { <span class=\"variable.mut\">vec</span>.<span class=\"text\">set_len</span>(<span class=\"literal.numeric\">0</span>); }\n \n-    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable.mut\">x</span> = <span class=\"literal\">42</span>;\n+    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable.mut\">x</span> = <span class=\"literal.numeric\">42</span>;\n     <span class=\"keyword\">let</span> <span class=\"variable.mut\">y</span> = &<span class=\"keyword\">mut</span> <span class=\"variable.mut\">x</span>;\n     <span class=\"keyword\">let</span> <span class=\"variable\">z</span> = &<span class=\"variable.mut\">y</span>;\n \n     <span class=\"variable.mut\">y</span>;\n }\n \n-<span class=\"keyword\">enum</span> <span class=\"type\">E</span>&lt;<span class=\"type\">X</span>&gt; {\n-    <span class=\"constant\">V</span>(<span class=\"type\">X</span>)\n+<span class=\"keyword\">enum</span> <span class=\"type\">E</span>&lt;<span class=\"type.param\">X</span>&gt; {\n+    <span class=\"constant\">V</span>(<span class=\"type.param\">X</span>)\n }\n \n-<span class=\"keyword\">impl</span>&lt;<span class=\"type\">X</span>&gt; <span class=\"type\">E</span>&lt;<span class=\"type\">X</span>&gt; {\n-    <span class=\"keyword\">fn</span> <span class=\"function\">new</span>&lt;<span class=\"type\">T</span>&gt;() -&gt; <span class=\"type\">E</span>&lt;<span class=\"type\">T</span>&gt; {}\n+<span class=\"keyword\">impl</span>&lt;<span class=\"type.param\">X</span>&gt; <span class=\"type\">E</span>&lt;<span class=\"type.param\">X</span>&gt; {\n+    <span class=\"keyword\">fn</span> <span class=\"function\">new</span>&lt;<span class=\"type.param\">T</span>&gt;() -&gt; <span class=\"type\">E</span>&lt;<span class=\"type.param\">T</span>&gt; {}\n }</code></pre>\n\\ No newline at end of file"}, {"sha": "ecf26c708472c97caa96c553d9501472f4b66d3b", "filename": "crates/ra_ide/src/snapshots/rainbow_highlighting.html", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e8f9eb6c45b6bde294c79deea0e5bb02c084ae0/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Frainbow_highlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/3e8f9eb6c45b6bde294c79deea0e5bb02c084ae0/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Frainbow_highlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Frainbow_highlighting.html?ref=3e8f9eb6c45b6bde294c79deea0e5bb02c084ae0", "patch": "@@ -10,8 +10,10 @@\n .builtin            { color: #DD6718; }\n .text               { color: #DCDCCC; }\n .type               { color: #7CB8BB; }\n+.type\\.param       { color: #20999D; }\n .attribute          { color: #94BFF3; }\n .literal            { color: #BFEBBF; }\n+.literal\\.numeric  { color: #6A8759; }\n .macro              { color: #94BFF3; }\n .variable           { color: #DCDCCC; }\n .variable\\.mut     { color: #DCDCCC; text-decoration: underline; }"}, {"sha": "235e09ffca52ebf4aa82d6d340b419d9a2c6af66", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3e8f9eb6c45b6bde294c79deea0e5bb02c084ae0/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e8f9eb6c45b6bde294c79deea0e5bb02c084ae0/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=3e8f9eb6c45b6bde294c79deea0e5bb02c084ae0", "patch": "@@ -108,14 +108,17 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRa\n                 match name_kind {\n                     Some(name_kind) => highlight_name(db, name_kind),\n                     None => name.syntax().parent().map_or(\"function\", |x| match x.kind() {\n-                        TYPE_PARAM | STRUCT_DEF | ENUM_DEF | TRAIT_DEF | TYPE_ALIAS_DEF => \"type\",\n+                        STRUCT_DEF | ENUM_DEF | TRAIT_DEF | TYPE_ALIAS_DEF => \"type\",\n+                        TYPE_PARAM => \"type.param\",\n                         RECORD_FIELD_DEF => \"field\",\n                         _ => \"function\",\n                     }),\n                 }\n             }\n-            INT_NUMBER | FLOAT_NUMBER | CHAR | BYTE => \"literal\",\n-            LIFETIME => \"parameter\",\n+            INT_NUMBER | FLOAT_NUMBER => \"literal.numeric\",\n+            BYTE => \"literal.byte\",\n+            CHAR => \"literal.char\",\n+            LIFETIME => \"type.lifetime\",\n             T![unsafe] => \"keyword.unsafe\",\n             k if is_control_keyword(k) => \"keyword.control\",\n             k if k.is_keyword() => \"keyword\",\n@@ -224,8 +227,9 @@ fn highlight_name(db: &RootDatabase, name_kind: NameKind) -> &'static str {\n         Def(hir::ModuleDef::Static(_)) => \"constant\",\n         Def(hir::ModuleDef::Trait(_)) => \"type\",\n         Def(hir::ModuleDef::TypeAlias(_)) => \"type\",\n-        Def(hir::ModuleDef::BuiltinType(_)) => \"type\",\n-        SelfType(_) | TypeParam(_) => \"type\",\n+        Def(hir::ModuleDef::BuiltinType(_)) => \"type.builtin\",\n+        SelfType(_) => \"type.self\",\n+        TypeParam(_) => \"type.param\",\n         Local(local) => {\n             if local.is_mut(db) {\n                 \"variable.mut\"\n@@ -255,8 +259,10 @@ pre                 { color: #DCDCCC; background: #3F3F3F; font-size: 22px; padd\n .builtin            { color: #DD6718; }\n .text               { color: #DCDCCC; }\n .type               { color: #7CB8BB; }\n+.type\\\\.param       { color: #20999D; }\n .attribute          { color: #94BFF3; }\n .literal            { color: #BFEBBF; }\n+.literal\\\\.numeric  { color: #6A8759; }\n .macro              { color: #94BFF3; }\n .variable           { color: #DCDCCC; }\n .variable\\\\.mut     { color: #DCDCCC; text-decoration: underline; }"}, {"sha": "43db61a8bc0f82337d406e4e585086c081a8a085", "filename": "editors/code/package.json", "status": "modified", "additions": 64, "deletions": 1, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/3e8f9eb6c45b6bde294c79deea0e5bb02c084ae0/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/3e8f9eb6c45b6bde294c79deea0e5bb02c084ae0/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=3e8f9eb6c45b6bde294c79deea0e5bb02c084ae0", "patch": "@@ -437,6 +437,33 @@\n                     \"highContrast\": \"#B5CEA8\"\n                 }\n             },\n+            {\n+                \"id\": \"ralsp.literal.numeric\",\n+                \"description\": \"Color for numeric literals\",\n+                \"defaults\": {\n+                    \"dark\": \"#BECEA8\",\n+                    \"light\": \"#09885A\",\n+                    \"highContrast\": \"#B5CEA8\"\n+                }\n+            },\n+            {\n+                \"id\": \"ralsp.literal.char\",\n+                \"description\": \"Color for character literals\",\n+                \"defaults\": {\n+                    \"dark\": \"#BECEA8\",\n+                    \"light\": \"#09885A\",\n+                    \"highContrast\": \"#B5CEA8\"\n+                }\n+            },\n+            {\n+                \"id\": \"ralsp.literal.byte\",\n+                \"description\": \"Color for byte literals\",\n+                \"defaults\": {\n+                    \"dark\": \"#BECEA8\",\n+                    \"light\": \"#09885A\",\n+                    \"highContrast\": \"#B5CEA8\"\n+                }\n+            },\n             {\n                 \"id\": \"ralsp.macro\",\n                 \"description\": \"Color for macros\",\n@@ -457,7 +484,43 @@\n             },\n             {\n                 \"id\": \"ralsp.type\",\n-                \"description\": \"Color for types\",\n+                \"description\": \"Color for other types (traits, aliases..)\",\n+                \"defaults\": {\n+                    \"dark\": \"#4EC9B0\",\n+                    \"light\": \"#267F99\",\n+                    \"highContrast\": \"#4EC9B0\"\n+                }\n+            },\n+            {\n+                \"id\": \"ralsp.type.builtin\",\n+                \"description\": \"Color for built-in types (&str, bool, u16, u32)\",\n+                \"defaults\": {\n+                    \"dark\": \"#4EC9B0\",\n+                    \"light\": \"#267F99\",\n+                    \"highContrast\": \"#4EC9B0\"\n+                }\n+            },\n+            {\n+                \"id\": \"ralsp.type.lifetime\",\n+                \"description\": \"Color for `Self` param type\",\n+                \"defaults\": {\n+                    \"dark\": \"#4EC9B0\",\n+                    \"light\": \"#267F99\",\n+                    \"highContrast\": \"#4EC9B0\"\n+                }\n+            },\n+            {\n+                \"id\": \"ralsp.type.self\",\n+                \"description\": \"Color for `Self` param type\",\n+                \"defaults\": {\n+                    \"dark\": \"#4EC9B0\",\n+                    \"light\": \"#267F99\",\n+                    \"highContrast\": \"#4EC9B0\"\n+                }\n+            },\n+            {\n+                \"id\": \"ralsp.type.param\",\n+                \"description\": \"Color for type parameters\",\n                 \"defaults\": {\n                     \"dark\": \"#4EC9B0\",\n                     \"light\": \"#267F99\","}, {"sha": "d7c0ae1316a6b7105f5227b42ffd9e3ce0223d96", "filename": "editors/code/src/highlighting.ts", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3e8f9eb6c45b6bde294c79deea0e5bb02c084ae0/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "raw_url": "https://github.com/rust-lang/rust/raw/3e8f9eb6c45b6bde294c79deea0e5bb02c084ae0/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fhighlighting.ts?ref=3e8f9eb6c45b6bde294c79deea0e5bb02c084ae0", "patch": "@@ -53,10 +53,17 @@ export class Highlighter {\n             decoration('parameter'),\n             decoration('constant'),\n             decoration('type'),\n+            decoration('type.self'),\n+            decoration('type.generic'),\n+            decoration('type.param'),\n+            decoration('type.lifetime'),\n             decoration('builtin'),\n             decoration('text'),\n             decoration('attribute'),\n             decoration('literal'),\n+            decoration('literal.numeric'),\n+            decoration('literal.char'),\n+            decoration('literal.byte'),\n             decoration('macro'),\n             decoration('variable'),\n             decoration('variable.mut', 'underline'),"}]}