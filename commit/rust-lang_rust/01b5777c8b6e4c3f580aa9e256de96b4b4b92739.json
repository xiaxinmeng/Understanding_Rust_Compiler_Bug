{"sha": "01b5777c8b6e4c3f580aa9e256de96b4b4b92739", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxYjU3NzdjOGI2ZTRjM2Y1ODBhYTllMjU2ZGU5NmI0YjRiOTI3Mzk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-06-02T02:47:04Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-06-04T03:03:08Z"}, "message": "prohibit type parameters in native fns and other minor fixes\n\ntrans now can safely assert that it never sees a type param", "tree": {"sha": "7166174a44a9f294fdaacc0c5bc447cafc482cea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7166174a44a9f294fdaacc0c5bc447cafc482cea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01b5777c8b6e4c3f580aa9e256de96b4b4b92739", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01b5777c8b6e4c3f580aa9e256de96b4b4b92739", "html_url": "https://github.com/rust-lang/rust/commit/01b5777c8b6e4c3f580aa9e256de96b4b4b92739", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01b5777c8b6e4c3f580aa9e256de96b4b4b92739/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2ae333917c1ff0293fa93afa335e17608d0ca6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2ae333917c1ff0293fa93afa335e17608d0ca6e", "html_url": "https://github.com/rust-lang/rust/commit/b2ae333917c1ff0293fa93afa335e17608d0ca6e"}], "stats": {"total": 222, "additions": 125, "deletions": 97}, "files": [{"sha": "88fef46a3eb9242294b8f506112edcbd46d82051", "filename": "src/libcore/comm.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/01b5777c8b6e4c3f580aa9e256de96b4b4b92739/src%2Flibcore%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01b5777c8b6e4c3f580aa9e256de96b4b4b92739/src%2Flibcore%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcomm.rs?ref=01b5777c8b6e4c3f580aa9e256de96b4b4b92739", "patch": "@@ -156,7 +156,8 @@ whereupon the caller loses access to it.\n \"]\n fn send<T: send>(ch: chan<T>, -data: T) {\n     let chan_t(p) = ch;\n-    let res = rustrt::rust_port_id_send(p, data);\n+    let data_ptr = ptr::addr_of(data) as *();\n+    let res = rustrt::rust_port_id_send(p, data_ptr);\n     if res != 0u unsafe {\n         // Data sent successfully\n         unsafe::forget(data);\n@@ -250,8 +251,7 @@ type port_id = int;\n \n #[abi = \"cdecl\"]\n native mod rustrt {\n-    fn rust_port_id_send<T: send>(target_port: port_id,\n-                                  data: T) -> libc::uintptr_t;\n+    fn rust_port_id_send(target_port: port_id, data: *()) -> libc::uintptr_t;\n \n     fn new_port(unit_sz: libc::size_t) -> *rust_port;\n     fn del_port(po: *rust_port);"}, {"sha": "93f204cb58f5373e15416f7735a54595e46fc1b1", "filename": "src/libcore/sys.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/01b5777c8b6e4c3f580aa9e256de96b4b4b92739/src%2Flibcore%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01b5777c8b6e4c3f580aa9e256de96b4b4b92739/src%2Flibcore%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsys.rs?ref=01b5777c8b6e4c3f580aa9e256de96b4b4b92739", "patch": "@@ -17,9 +17,9 @@ enum type_desc = {\n \n #[abi = \"cdecl\"]\n native mod rustrt {\n-    fn refcount<T>(t: @T) -> libc::intptr_t;\n+    fn refcount(t: *()) -> libc::intptr_t;\n     fn unsupervise();\n-    fn shape_log_str<T>(t: *sys::type_desc, data: T) -> str;\n+    fn shape_log_str(t: *sys::type_desc, data: *()) -> str;\n }\n \n #[abi = \"rust-intrinsic\"]\n@@ -62,11 +62,16 @@ fn pref_align_of<T>() -> uint unsafe {\n \n #[doc = \"Returns the refcount of a shared box\"]\n fn refcount<T>(t: @T) -> uint {\n-    ret rustrt::refcount::<T>(t) as uint;\n+    unsafe {\n+        ret rustrt::refcount(unsafe::reinterpret_cast(t)) as uint;\n+    }\n }\n \n fn log_str<T>(t: T) -> str {\n-    rustrt::shape_log_str(get_type_desc::<T>(), t)\n+    unsafe {\n+        let data_ptr: *() = unsafe::reinterpret_cast(ptr::addr_of(t));\n+        rustrt::shape_log_str(get_type_desc::<T>(), data_ptr)\n+    }\n }\n \n #[cfg(test)]"}, {"sha": "aa823ee80502350579cb0143b95f772b81d3c7ff", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/01b5777c8b6e4c3f580aa9e256de96b4b4b92739/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01b5777c8b6e4c3f580aa9e256de96b4b4b92739/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=01b5777c8b6e4c3f580aa9e256de96b4b4b92739", "patch": "@@ -82,12 +82,12 @@ export extensions;\n \n #[abi = \"cdecl\"]\n native mod rustrt {\n-    fn vec_reserve_shared<T>(t: *sys::type_desc,\n-                             &v: [const T],\n-                             n: libc::size_t);\n-    fn vec_from_buf_shared<T>(t: *sys::type_desc,\n-                              ptr: *T,\n-                              count: libc::size_t) -> [T];\n+    fn vec_reserve_shared(++t: *sys::type_desc,\n+                          ++v: **unsafe::vec_repr,\n+                          ++n: libc::size_t);\n+    fn vec_from_buf_shared(++t: *sys::type_desc,\n+                           ++ptr: *(),\n+                           ++count: libc::size_t) -> *unsafe::vec_repr;\n }\n \n #[doc = \"A function used to initialize the elements of a vector\"]\n@@ -122,7 +122,8 @@ capacity, then no action is taken.\n fn reserve<T>(&v: [const T], n: uint) {\n     // Only make the (slow) call into the runtime if we have to\n     if capacity(v) < n {\n-        rustrt::vec_reserve_shared(sys::get_type_desc::<T>(), v, n);\n+        let ptr = ptr::addr_of(v) as **unsafe::vec_repr;\n+        rustrt::vec_reserve_shared(sys::get_type_desc::<T>(), ptr, n);\n     }\n }\n \n@@ -1209,8 +1210,10 @@ mod unsafe {\n     \"]\n     #[inline(always)]\n     unsafe fn from_buf<T>(ptr: *T, elts: uint) -> [T] {\n-        ret rustrt::vec_from_buf_shared(sys::get_type_desc::<T>(),\n-                                        ptr, elts);\n+        ret ::unsafe::reinterpret_cast(\n+            rustrt::vec_from_buf_shared(sys::get_type_desc::<T>(),\n+                                        ptr as *(),\n+                                        elts));\n     }\n \n     #[doc = \""}, {"sha": "6b8a4f36002e34dd74c82f4127a370503e5ad62f", "filename": "src/libstd/dbg.rs", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/01b5777c8b6e4c3f580aa9e256de96b4b4b92739/src%2Flibstd%2Fdbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01b5777c8b6e4c3f580aa9e256de96b4b4b92739/src%2Flibstd%2Fdbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdbg.rs?ref=01b5777c8b6e4c3f580aa9e256de96b4b4b92739", "patch": "@@ -1,37 +1,49 @@\n #[doc = \"Unsafe debugging functions for inspecting values.\"];\n \n+import unsafe::reinterpret_cast;\n+\n+export debug_tydesc;\n+export debug_opaque;\n+export debug_box;\n+export debug_tag;\n+export debug_fn;\n+export ptr_cast;\n+export refcount;\n+\n #[abi = \"cdecl\"]\n native mod rustrt {\n     fn debug_tydesc(td: *sys::type_desc);\n-    fn debug_opaque<T>(td: *sys::type_desc, x: T);\n-    fn debug_box<T>(td: *sys::type_desc, x: @T);\n-    fn debug_tag<T>(td: *sys::type_desc, x: T);\n-    fn debug_fn<T>(td: *sys::type_desc, x: T);\n-    fn debug_ptrcast<T, U>(td: *sys::type_desc, x: @T) -> @U;\n+    fn debug_opaque(td: *sys::type_desc, x: *());\n+    fn debug_box(td: *sys::type_desc, x: *());\n+    fn debug_tag(td: *sys::type_desc, x: *());\n+    fn debug_fn(td: *sys::type_desc, x: *());\n+    fn debug_ptrcast(td: *sys::type_desc, x: *()) -> *();\n }\n \n fn debug_tydesc<T>() {\n     rustrt::debug_tydesc(sys::get_type_desc::<T>());\n }\n \n fn debug_opaque<T>(x: T) {\n-    rustrt::debug_opaque::<T>(sys::get_type_desc::<T>(), x);\n+    rustrt::debug_opaque(sys::get_type_desc::<T>(), ptr::addr_of(x) as *());\n }\n \n fn debug_box<T>(x: @T) {\n-    rustrt::debug_box::<T>(sys::get_type_desc::<T>(), x);\n+    rustrt::debug_box(sys::get_type_desc::<T>(), ptr::addr_of(x) as *());\n }\n \n fn debug_tag<T>(x: T) {\n-    rustrt::debug_tag::<T>(sys::get_type_desc::<T>(), x);\n+    rustrt::debug_tag(sys::get_type_desc::<T>(), ptr::addr_of(x) as *());\n }\n \n fn debug_fn<T>(x: T) {\n-    rustrt::debug_fn::<T>(sys::get_type_desc::<T>(), x);\n+    rustrt::debug_fn(sys::get_type_desc::<T>(), ptr::addr_of(x) as *());\n }\n \n unsafe fn ptr_cast<T, U>(x: @T) -> @U {\n-    ret rustrt::debug_ptrcast::<T, U>(sys::get_type_desc::<T>(), x);\n+    reinterpret_cast(\n+        rustrt::debug_ptrcast(sys::get_type_desc::<T>(),\n+                              reinterpret_cast(x)))\n }\n \n fn refcount<T>(a: @T) -> uint unsafe {"}, {"sha": "bc2295d2dbd21dc4f14ae33f4af3668fc1916236", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/01b5777c8b6e4c3f580aa9e256de96b4b4b92739/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01b5777c8b6e4c3f580aa9e256de96b4b4b92739/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=01b5777c8b6e4c3f580aa9e256de96b4b4b92739", "patch": "@@ -2850,7 +2850,7 @@ fn trans_loop_body(bcx: block, e: @ast::expr, ret_flag: option<ValueRef>,\n       ast::expr_loop_body(b@@{node: ast::expr_fn_block(decl, body, cap), _}) {\n         alt check ty::get(expr_ty(bcx, e)).struct {\n           ty::ty_fn({proto, _}) {\n-            closure::trans_expr_fn(bcx, proto, decl, body, e.span, b.id,\n+            closure::trans_expr_fn(bcx, proto, decl, body, b.id,\n                                    cap, some(ret_flag),\n                                    dest)\n           }\n@@ -3556,15 +3556,15 @@ fn trans_expr(bcx: block, e: @ast::expr, dest: dest) -> block {\n           }\n           ast::expr_addr_of(_, x) { ret trans_addr_of(bcx, x, dest); }\n           ast::expr_fn(proto, decl, body, cap_clause) {\n-            ret closure::trans_expr_fn(bcx, proto, decl, body, e.span, e.id,\n+            ret closure::trans_expr_fn(bcx, proto, decl, body, e.id,\n                                        cap_clause, none, dest);\n           }\n           ast::expr_fn_block(decl, body, cap_clause) {\n             alt check ty::get(expr_ty(bcx, e)).struct {\n               ty::ty_fn({proto, _}) {\n                 #debug(\"translating fn_block %s with type %s\",\n                        expr_to_str(e), ty_to_str(tcx, expr_ty(bcx, e)));\n-                ret closure::trans_expr_fn(bcx, proto, decl, body, e.span,\n+                ret closure::trans_expr_fn(bcx, proto, decl, body,\n                                            e.id, cap_clause, none, dest);\n               }\n             }"}, {"sha": "9057c9ef63029abf98cb903276d352cafd512c5a", "filename": "src/rustc/middle/trans/closure.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01b5777c8b6e4c3f580aa9e256de96b4b4b92739/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01b5777c8b6e4c3f580aa9e256de96b4b4b92739/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=01b5777c8b6e4c3f580aa9e256de96b4b4b92739", "patch": "@@ -380,7 +380,6 @@ fn trans_expr_fn(bcx: block,\n                  proto: ast::proto,\n                  decl: ast::fn_decl,\n                  body: ast::blk,\n-                 sp: span,\n                  id: ast::node_id,\n                  cap_clause: ast::capture_clause,\n                  is_loop_body: option<option<ValueRef>>,\n@@ -393,7 +392,6 @@ fn trans_expr_fn(bcx: block,\n     let sub_path = bcx.fcx.path + [path_name(\"anon\")];\n     let s = mangle_internal_name_by_path(ccx, sub_path);\n     let llfn = decl_internal_cdecl_fn(ccx.llmod, s, llfnty);\n-    register_fn(ccx, sp, sub_path, id);\n \n     let trans_closure_env = fn@(ck: ty::closure_kind) -> ValueRef {\n         let cap_vars = capture::compute_capture_vars("}, {"sha": "e1628a705fbf54bca2115230e0e4958f460fea63", "filename": "src/rustc/middle/trans/type_of.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01b5777c8b6e4c3f580aa9e256de96b4b4b92739/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01b5777c8b6e4c3f580aa9e256de96b4b4b92739/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=01b5777c8b6e4c3f580aa9e256de96b4b4b92739", "patch": "@@ -62,8 +62,6 @@ fn type_of_non_gc_box(cx: @crate_ctxt, t: ty::t) -> TypeRef {\n }\n \n fn type_of(cx: @crate_ctxt, t: ty::t) -> TypeRef {\n-    assert !ty::type_needs_infer(t);\n-\n     #debug(\"type_of %?: %?\", t, ty::get(t));\n \n     // Check the cache.\n@@ -133,7 +131,6 @@ fn type_of(cx: @crate_ctxt, t: ty::t) -> TypeRef {\n             let sub1 = ty::subst(cx.tcx, substs, sub);\n             ret T_struct([T_i8(), type_of(cx, sub1)]);\n           }\n-          ty::ty_param(_, _) { T_typaram(cx.tn) }\n           ty::ty_type { T_ptr(cx.tydesc_type) }\n           ty::ty_tup(elts) {\n             let mut tys = [];\n@@ -161,6 +158,7 @@ fn type_of(cx: @crate_ctxt, t: ty::t) -> TypeRef {\n           }\n           ty::ty_self { cx.tcx.sess.unimpl(\"type_of: ty_self\"); }\n           ty::ty_var(_) { cx.tcx.sess.bug(\"type_of shouldn't see a ty_var\"); }\n+          ty::ty_param(*) { cx.tcx.sess.bug(\"type_of with ty_param\"); }\n           ty::ty_var_integral(_) {\n             cx.tcx.sess.bug(\"type_of shouldn't see a ty_var_integral\");\n           }"}, {"sha": "2649dc6c6756b8834b2800a00b3d3f1e11118fe9", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/01b5777c8b6e4c3f580aa9e256de96b4b4b92739/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01b5777c8b6e4c3f580aa9e256de96b4b4b92739/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=01b5777c8b6e4c3f580aa9e256de96b4b4b92739", "patch": "@@ -393,6 +393,23 @@ fn check_item(ccx: @crate_ctxt, it: @ast::item) {\n         let tpt_ty = ty::node_id_to_type(ccx.tcx, it.id);\n         check_bounds_are_used(ccx, t.span, tps, rp, tpt_ty);\n       }\n+      ast::item_native_mod(m) {\n+        if syntax::attr::native_abi(it.attrs) ==\n+            either::right(ast::native_abi_rust_intrinsic) {\n+            for m.items.each { |item|\n+                check_intrinsic_type(ccx, item);\n+            }\n+        } else {\n+            for m.items.each { |item|\n+                let tpt = ty::lookup_item_type(ccx.tcx, local_def(item.id));\n+                if (*tpt.bounds).is_not_empty() {\n+                    ccx.tcx.sess.span_err(\n+                        item.span,\n+                        #fmt[\"native items may not have type parameters\"]);\n+                }\n+            }\n+        }\n+      }\n       _ {/* nothing to do */ }\n     }\n }\n@@ -2267,3 +2284,57 @@ fn check_bounds_are_used(ccx: @crate_ctxt,\n     }\n }\n \n+fn check_intrinsic_type(ccx: @crate_ctxt, it: @ast::native_item) {\n+    fn param(ccx: @crate_ctxt, n: uint) -> ty::t {\n+        ty::mk_param(ccx.tcx, n, local_def(0))\n+    }\n+    fn arg(m: ast::rmode, ty: ty::t) -> ty::arg {\n+        {mode: ast::expl(m), ty: ty}\n+    }\n+    let tcx = ccx.tcx;\n+    let (n_tps, inputs, output) = alt it.ident {\n+      \"size_of\" |\n+      \"pref_align_of\" | \"min_align_of\" { (1u, [], ty::mk_uint(ccx.tcx)) }\n+      \"get_tydesc\" { (1u, [], ty::mk_nil_ptr(tcx)) }\n+      \"init\" { (1u, [], param(ccx, 0u)) }\n+      \"forget\" { (1u, [arg(ast::by_move, param(ccx, 0u))],\n+                  ty::mk_nil(tcx)) }\n+      \"reinterpret_cast\" { (2u, [arg(ast::by_ref, param(ccx, 0u))],\n+                            param(ccx, 1u)) }\n+      \"addr_of\" { (1u, [arg(ast::by_ref, param(ccx, 0u))],\n+                   ty::mk_imm_ptr(tcx, param(ccx, 0u))) }\n+      \"needs_drop\" { (1u, [], ty::mk_bool(tcx)) }\n+\n+      \"visit_ty\" {\n+        assert ccx.tcx.intrinsic_ifaces.contains_key(\"ty_visitor\");\n+        let (_, visitor_iface) = ccx.tcx.intrinsic_ifaces.get(\"ty_visitor\");\n+        (1u, [arg(ast::by_ref, visitor_iface)], ty::mk_nil(tcx))\n+      }\n+\n+      other {\n+        tcx.sess.span_err(it.span, \"unrecognized intrinsic function: `\" +\n+                          other + \"`\");\n+        ret;\n+      }\n+    };\n+    let fty = ty::mk_fn(tcx, {purity: ast::impure_fn,\n+                              proto: ast::proto_bare,\n+                              inputs: inputs, output: output,\n+                              ret_style: ast::return_val,\n+                              constraints: []});\n+    let i_ty = ty::lookup_item_type(ccx.tcx, local_def(it.id));\n+    let i_n_tps = (*i_ty.bounds).len();\n+    if i_n_tps != n_tps {\n+        tcx.sess.span_err(it.span, #fmt(\"intrinsic has wrong number \\\n+                                         of type parameters. found %u, \\\n+                                         expected %u\", i_n_tps, n_tps));\n+    } else {\n+        require_same_types(\n+            tcx, it.span, i_ty.ty, fty,\n+            {|| #fmt[\"intrinsic has wrong type. \\\n+                      expected %s\",\n+                     ty_to_str(ccx.tcx, fty)]});\n+    }\n+}\n+\n+"}, {"sha": "7087abfcd9e97172f95baa81bcccf9e051619159", "filename": "src/rustc/middle/typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 61, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/01b5777c8b6e4c3f580aa9e256de96b4b4b92739/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01b5777c8b6e4c3f580aa9e256de96b4b4b92739/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=01b5777c8b6e4c3f580aa9e256de96b4b4b92739", "patch": "@@ -301,13 +301,7 @@ fn convert(ccx: @crate_ctxt, it: @ast::item) {\n     let tcx = ccx.tcx;\n     alt it.node {\n       // These don't define types.\n-      ast::item_mod(_) {}\n-      ast::item_native_mod(m) {\n-        if syntax::attr::native_abi(it.attrs) ==\n-            either::right(ast::native_abi_rust_intrinsic) {\n-            for m.items.each { |item| check_intrinsic_type(ccx, item); }\n-        }\n-      }\n+      ast::item_native_mod(_) | ast::item_mod(_) {}\n       ast::item_enum(variants, ty_params, rp) {\n         let tpt = ty_of_item(ccx, it);\n         write_ty_to_tcx(tcx, it.id, tpt.ty);\n@@ -465,6 +459,7 @@ fn convert_native(ccx: @crate_ctxt, i: @ast::native_item) {\n     alt i.node {\n       ast::native_item_fn(_, _) {\n         write_ty_to_tcx(ccx.tcx, i.id, tpt.ty);\n+        ccx.tcx.tcache.insert(local_def(i.id), tpt);\n       }\n     }\n }\n@@ -491,60 +486,6 @@ fn ty_of_ty_method(self: @crate_ctxt,\n      purity: m.decl.purity, vis: ast::public}\n }\n \n-fn check_intrinsic_type(ccx: @crate_ctxt, it: @ast::native_item) {\n-    fn param(ccx: @crate_ctxt, n: uint) -> ty::t {\n-        ty::mk_param(ccx.tcx, n, local_def(0))\n-    }\n-    fn arg(m: ast::rmode, ty: ty::t) -> ty::arg {\n-        {mode: ast::expl(m), ty: ty}\n-    }\n-    let tcx = ccx.tcx;\n-    let (n_tps, inputs, output) = alt it.ident {\n-      \"size_of\" |\n-      \"pref_align_of\" | \"min_align_of\" { (1u, [], ty::mk_uint(ccx.tcx)) }\n-      \"get_tydesc\" { (1u, [], ty::mk_nil_ptr(tcx)) }\n-      \"init\" { (1u, [], param(ccx, 0u)) }\n-      \"forget\" { (1u, [arg(ast::by_move, param(ccx, 0u))],\n-                  ty::mk_nil(tcx)) }\n-      \"reinterpret_cast\" { (2u, [arg(ast::by_ref, param(ccx, 0u))],\n-                            param(ccx, 1u)) }\n-      \"addr_of\" { (1u, [arg(ast::by_ref, param(ccx, 0u))],\n-                   ty::mk_imm_ptr(tcx, param(ccx, 0u))) }\n-      \"needs_drop\" { (1u, [], ty::mk_bool(tcx)) }\n-\n-      \"visit_ty\" {\n-        assert ccx.tcx.intrinsic_ifaces.contains_key(\"ty_visitor\");\n-        let (_, visitor_iface) = ccx.tcx.intrinsic_ifaces.get(\"ty_visitor\");\n-        (1u, [arg(ast::by_ref, visitor_iface)], ty::mk_nil(tcx))\n-      }\n-\n-      other {\n-        tcx.sess.span_err(it.span, \"unrecognized intrinsic function: `\" +\n-                          other + \"`\");\n-        ret;\n-      }\n-    };\n-    let fty = ty::mk_fn(tcx, {purity: ast::impure_fn,\n-                              proto: ast::proto_bare,\n-                              inputs: inputs, output: output,\n-                              ret_style: ast::return_val,\n-                              constraints: []});\n-    let i_ty = ty_of_native_item(ccx, it);\n-    let i_n_tps = (*i_ty.bounds).len();\n-    if i_n_tps != n_tps {\n-        tcx.sess.span_err(it.span, #fmt(\"intrinsic has wrong number \\\n-                                         of type parameters. found %u, \\\n-                                         expected %u\", i_n_tps, n_tps));\n-    } else {\n-        require_same_types(\n-            tcx, it.span, i_ty.ty, fty,\n-            {|| #fmt[\"intrinsic has wrong type. \\\n-                      expected %s\",\n-                     ty_to_str(ccx.tcx, fty)]});\n-    }\n-}\n-\n-\n /*\n   Instantiates the path for the given iface reference, assuming that\n   it's bound to a valid iface type. Returns the def_id for the defining"}, {"sha": "8f4bd22f75dde8473157ac1b1ade88ae4e84230f", "filename": "src/test/run-pass/conditional-compile.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01b5777c8b6e4c3f580aa9e256de96b4b4b92739/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01b5777c8b6e4c3f580aa9e256de96b4b4b92739/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconditional-compile.rs?ref=01b5777c8b6e4c3f580aa9e256de96b4b4b92739", "patch": "@@ -81,7 +81,7 @@ mod test_native_items {\n     #[abi = \"cdecl\"]\n     native mod rustrt {\n         #[cfg(bogus)]\n-        fn vec_from_buf_shared<T>(ptr: *T, count: uint) -> [T];\n-        fn vec_from_buf_shared<T>(ptr: *T, count: uint) -> [T];\n+        fn vec_from_buf_shared();\n+        fn vec_from_buf_shared();\n     }\n }"}]}