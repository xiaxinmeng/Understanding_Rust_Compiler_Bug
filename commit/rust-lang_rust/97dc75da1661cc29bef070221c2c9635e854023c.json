{"sha": "97dc75da1661cc29bef070221c2c9635e854023c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3ZGM3NWRhMTY2MWNjMjliZWYwNzAyMjFjMmM5NjM1ZTg1NDAyM2M=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-12T04:01:31Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-12T19:11:11Z"}, "message": "Remove stdtest::vec", "tree": {"sha": "58bed66ba3417b622996d37c11ab19889aa0c2f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58bed66ba3417b622996d37c11ab19889aa0c2f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97dc75da1661cc29bef070221c2c9635e854023c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97dc75da1661cc29bef070221c2c9635e854023c", "html_url": "https://github.com/rust-lang/rust/commit/97dc75da1661cc29bef070221c2c9635e854023c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97dc75da1661cc29bef070221c2c9635e854023c/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae4c17e2677e7db41c47c958936e82fd56ca2a62", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae4c17e2677e7db41c47c958936e82fd56ca2a62", "html_url": "https://github.com/rust-lang/rust/commit/ae4c17e2677e7db41c47c958936e82fd56ca2a62"}], "stats": {"total": 95, "additions": 0, "deletions": 95}, "files": [{"sha": "b8907248cbd4092a4a2a0ad943eec9caa9cfd40e", "filename": "src/test/stdtest/stdtest.rc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/97dc75da1661cc29bef070221c2c9635e854023c/src%2Ftest%2Fstdtest%2Fstdtest.rc", "raw_url": "https://github.com/rust-lang/rust/raw/97dc75da1661cc29bef070221c2c9635e854023c/src%2Ftest%2Fstdtest%2Fstdtest.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fstdtest.rc?ref=97dc75da1661cc29bef070221c2c9635e854023c", "patch": "@@ -28,7 +28,6 @@ mod str;\n mod task;\n mod test;\n mod uint;\n-mod vec;\n mod vec_str_conversions;\n \n // Local Variables:"}, {"sha": "ab7ebd5a9e06abd25170a5a0d766e31b8e04a9d4", "filename": "src/test/stdtest/vec.rs", "status": "removed", "additions": 0, "deletions": 94, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/ae4c17e2677e7db41c47c958936e82fd56ca2a62/src%2Ftest%2Fstdtest%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae4c17e2677e7db41c47c958936e82fd56ca2a62/src%2Ftest%2Fstdtest%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fvec.rs?ref=ae4c17e2677e7db41c47c958936e82fd56ca2a62", "patch": "@@ -1,94 +0,0 @@\n-\n-use std;\n-\n-import std::vec::*;\n-import std::option;\n-\n-#[test]\n-fn test_init_elt() {\n-    let v: vec[uint] = init_elt[uint](5u, 3u);\n-    assert (len[uint](v) == 3u);\n-    assert (v.(0) == 5u);\n-    assert (v.(1) == 5u);\n-    assert (v.(2) == 5u);\n-}\n-\n-fn id(x: uint) -> uint { ret x; }\n-\n-#[test]\n-fn test_init_fn() {\n-    let op: fn(uint) -> uint  = id;\n-    let v: vec[uint] = init_fn[uint](op, 5u);\n-    assert (len[uint](v) == 5u);\n-    assert (v.(0) == 0u);\n-    assert (v.(1) == 1u);\n-    assert (v.(2) == 2u);\n-    assert (v.(3) == 3u);\n-    assert (v.(4) == 4u);\n-}\n-\n-#[test]\n-fn test_slice() {\n-    let v: vec[int] = [1, 2, 3, 4, 5];\n-    let v2 = slice[int](v, 2u, 4u);\n-    assert (len[int](v2) == 2u);\n-    assert (v2.(0) == 3);\n-    assert (v2.(1) == 4);\n-}\n-\n-#[test]\n-fn test_map() {\n-    fn square(x: &int) -> int { ret x * x; }\n-    let v: vec[int] = [1, 2, 3, 4, 5];\n-    let s: vec[int] = map(square, v);\n-    let i: int = 0;\n-    while i < 5 { assert (v.(i) * v.(i) == s.(i)); i += 1; }\n-}\n-\n-#[test]\n-fn test_map2() {\n-    fn times(x: &int, y: &int) -> int { ret x * y; }\n-    let f = times;\n-    let v0 = [1, 2, 3, 4, 5];\n-    let v1 = [5, 4, 3, 2, 1];\n-    let u = map2[int, int, int](f, v0, v1);\n-    let i = 0;\n-    while i < 5 { assert (v0.(i) * v1.(i) == u.(i)); i += 1; }\n-}\n-\n-#[test]\n-fn test_filter_map() {\n-    fn halve(i: &int) -> option::t[int] {\n-        if i % 2 == 0 {\n-            ret option::some[int](i / 2);\n-        } else { ret option::none[int]; }\n-    }\n-    fn halve_for_sure(i: &int) -> int { ret i / 2; }\n-    let all_even: vec[int] = [0, 2, 8, 6];\n-    let all_odd1: vec[int] = [1, 7, 3];\n-    let all_odd2: vec[int] = [];\n-    let mix: vec[int] = [9, 2, 6, 7, 1, 0, 0, 3];\n-    let mix_dest: vec[int] = [1, 3, 0, 0];\n-    assert (filter_map(halve, all_even) == map(halve_for_sure, all_even));\n-    assert (filter_map(halve, all_odd1) == empty[int]());\n-    assert (filter_map(halve, all_odd2) == empty[int]());\n-    assert (filter_map(halve, mix) == mix_dest);\n-}\n-\n-#[test]\n-fn test_position() {\n-    let v1: vec[int] = [1, 2, 3, 3, 2, 5];\n-    assert (position(1, v1) == option::some[uint](0u));\n-    assert (position(2, v1) == option::some[uint](1u));\n-    assert (position(5, v1) == option::some[uint](5u));\n-    assert (position(4, v1) == option::none[uint]);\n-}\n-\n-#[test]\n-fn test_position_pred() {\n-    fn less_than_three(i: &int) -> bool { ret i < 3; }\n-    fn is_eighteen(i: &int) -> bool { ret i == 18; }\n-    let v1: vec[int] = [5, 4, 3, 2, 1];\n-    assert (position_pred(less_than_three, v1) == option::some[uint](3u));\n-    assert (position_pred(is_eighteen, v1) == option::none[uint]);\n-}"}]}