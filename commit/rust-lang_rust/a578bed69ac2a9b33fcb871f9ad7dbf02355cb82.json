{"sha": "a578bed69ac2a9b33fcb871f9ad7dbf02355cb82", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1NzhiZWQ2OWFjMmE5YjMzZmNiODcxZjlhZDdkYmYwMjM1NWNiODI=", "commit": {"author": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2020-05-18T22:35:49Z"}, "committer": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2020-05-22T15:49:51Z"}, "message": "new_without_default: do not suggest deriving", "tree": {"sha": "c3ef55d6268e88698b5588d0edc21f50491fcd34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3ef55d6268e88698b5588d0edc21f50491fcd34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a578bed69ac2a9b33fcb871f9ad7dbf02355cb82", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQFKBAABCAA0FiEELriChyEaiMu0yCg7viIhAz7bw3QFAl7H9KAWHGFydXNzZWxs\nMTIzQGdtYWlsLmNvbQAKCRC+IiEDPtvDdC+zB/9ooEcTHzjQlXw34PkF89y/AVy1\nnwgVthEMcpLJw7cbyF0GxPMq5Vcn3dGvHKIPiewcsyCp1jPZ6753DN7IFkF6vaq6\nE0l8v24Z/Mr6EHvp/ty8/pA1kbIpfqo+WcqSFsIgb1viKuwPHZvx3cUFeOKeEncp\n4VL0OLSc9QrlX9ePMS96ca1sDqDJHMOJqfdL26JLMldbXYeZb/kwBXl4uMohToUF\nViz0kc31XoWoNoHTG/XTOA/6i2dm8Yeq1A/KTVv/4LKD6qYjXCGI+yZW30RCEkB+\nIUOlJDcmUinMjW1817gW3QIN5E4sg0+S/7O8r9t2durx0okE8qopTVGn2Nga\n=9Ogk\n-----END PGP SIGNATURE-----", "payload": "tree c3ef55d6268e88698b5588d0edc21f50491fcd34\nparent e214ea82ad0a751563acf67e1cd9279cf302db3a\nauthor Andy Russell <arussell123@gmail.com> 1589841349 -0400\ncommitter Andy Russell <arussell123@gmail.com> 1590162591 -0400\n\nnew_without_default: do not suggest deriving\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a578bed69ac2a9b33fcb871f9ad7dbf02355cb82", "html_url": "https://github.com/rust-lang/rust/commit/a578bed69ac2a9b33fcb871f9ad7dbf02355cb82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a578bed69ac2a9b33fcb871f9ad7dbf02355cb82/comments", "author": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e214ea82ad0a751563acf67e1cd9279cf302db3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e214ea82ad0a751563acf67e1cd9279cf302db3a", "html_url": "https://github.com/rust-lang/rust/commit/e214ea82ad0a751563acf67e1cd9279cf302db3a"}], "stats": {"total": 164, "additions": 64, "deletions": 100}, "files": [{"sha": "3b88e4c4cb194b95012aa335cfdd5c143f10287e", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 23, "deletions": 95, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/a578bed69ac2a9b33fcb871f9ad7dbf02355cb82/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a578bed69ac2a9b33fcb871f9ad7dbf02355cb82/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=a578bed69ac2a9b33fcb871f9ad7dbf02355cb82", "patch": "@@ -1,27 +1,20 @@\n use crate::utils::paths;\n use crate::utils::sugg::DiagnosticBuilderExt;\n-use crate::utils::{get_trait_def_id, implements_trait, return_ty, same_tys, span_lint_hir_and_then};\n+use crate::utils::{get_trait_def_id, return_ty, same_tys, span_lint_hir_and_then};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n-use rustc_hir::def_id::DefId;\n use rustc_hir::HirIdSet;\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n-use rustc_middle::ty::{self, Ty};\n+use rustc_middle::ty::Ty;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n-use rustc_span::source_map::Span;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for types with a `fn new() -> Self` method and no\n     /// implementation of\n     /// [`Default`](https://doc.rust-lang.org/std/default/trait.Default.html).\n     ///\n-    /// It detects both the case when a manual\n-    /// [`Default`](https://doc.rust-lang.org/std/default/trait.Default.html)\n-    /// implementation is required and also when it can be created with\n-    /// `#[derive(Default)]`\n-    ///\n     /// **Why is this bad?** The user might expect to be able to use\n     /// [`Default`](https://doc.rust-lang.org/std/default/trait.Default.html) as the\n     /// type can be constructed without arguments.\n@@ -40,46 +33,17 @@ declare_clippy_lint! {\n     /// }\n     /// ```\n     ///\n-    /// Instead, use:\n+    /// To fix the lint, and a `Default` implementation that delegates to `new`:\n     ///\n     /// ```ignore\n     /// struct Foo(Bar);\n     ///\n     /// impl Default for Foo {\n     ///     fn default() -> Self {\n-    ///         Foo(Bar::new())\n+    ///         Foo::new()\n     ///     }\n     /// }\n     /// ```\n-    ///\n-    /// Or, if\n-    /// [`Default`](https://doc.rust-lang.org/std/default/trait.Default.html)\n-    /// can be derived by `#[derive(Default)]`:\n-    ///\n-    /// ```rust\n-    /// struct Foo;\n-    ///\n-    /// impl Foo {\n-    ///     fn new() -> Self {\n-    ///         Foo\n-    ///     }\n-    /// }\n-    /// ```\n-    ///\n-    /// Instead, use:\n-    ///\n-    /// ```rust\n-    /// #[derive(Default)]\n-    /// struct Foo;\n-    ///\n-    /// impl Foo {\n-    ///     fn new() -> Self {\n-    ///         Foo\n-    ///     }\n-    /// }\n-    /// ```\n-    ///\n-    /// You can also have `new()` call `Default::default()`.\n     pub NEW_WITHOUT_DEFAULT,\n     style,\n     \"`fn new() -> Self` method without `Default` implementation\"\n@@ -158,46 +122,25 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NewWithoutDefault {\n                                         }\n                                     }\n \n-                                    if let Some(sp) = can_derive_default(self_ty, cx, default_trait_id) {\n-                                        span_lint_hir_and_then(\n-                                            cx,\n-                                            NEW_WITHOUT_DEFAULT,\n-                                            id,\n-                                            impl_item.span,\n-                                            &format!(\n-                                                \"you should consider deriving a `Default` implementation for `{}`\",\n-                                                self_ty\n-                                            ),\n-                                            |diag| {\n-                                                diag.suggest_item_with_attr(\n-                                                    cx,\n-                                                    sp,\n-                                                    \"try this\",\n-                                                    \"#[derive(Default)]\",\n-                                                    Applicability::MaybeIncorrect,\n-                                                );\n-                                            });\n-                                    } else {\n-                                        span_lint_hir_and_then(\n-                                            cx,\n-                                            NEW_WITHOUT_DEFAULT,\n-                                            id,\n-                                            impl_item.span,\n-                                            &format!(\n-                                                \"you should consider adding a `Default` implementation for `{}`\",\n-                                                self_ty\n-                                            ),\n-                                            |diag| {\n-                                                diag.suggest_prepend_item(\n-                                                    cx,\n-                                                    item.span,\n-                                                    \"try this\",\n-                                                    &create_new_without_default_suggest_msg(self_ty),\n-                                                    Applicability::MaybeIncorrect,\n-                                                );\n-                                            },\n-                                        );\n-                                    }\n+                                    span_lint_hir_and_then(\n+                                        cx,\n+                                        NEW_WITHOUT_DEFAULT,\n+                                        id,\n+                                        impl_item.span,\n+                                        &format!(\n+                                            \"you should consider adding a `Default` implementation for `{}`\",\n+                                            self_ty\n+                                        ),\n+                                        |diag| {\n+                                            diag.suggest_prepend_item(\n+                                                cx,\n+                                                item.span,\n+                                                \"try this\",\n+                                                &create_new_without_default_suggest_msg(self_ty),\n+                                                Applicability::MaybeIncorrect,\n+                                            );\n+                                        },\n+                                    );\n                                 }\n                             }\n                         }\n@@ -217,18 +160,3 @@ fn create_new_without_default_suggest_msg(ty: Ty<'_>) -> String {\n     }}\n }}\", ty)\n }\n-\n-fn can_derive_default<'t, 'c>(ty: Ty<'t>, cx: &LateContext<'c, 't>, default_trait_id: DefId) -> Option<Span> {\n-    match ty.kind {\n-        ty::Adt(adt_def, substs) if adt_def.is_struct() => {\n-            for field in adt_def.all_fields() {\n-                let f_ty = field.ty(cx.tcx, substs);\n-                if !implements_trait(cx, f_ty, default_trait_id, &[]) {\n-                    return None;\n-                }\n-            }\n-            Some(cx.tcx.def_span(adt_def.did))\n-        },\n-        _ => None,\n-    }\n-}"}, {"sha": "3b6041823d8786672ec6bb3d7bdae19acaeaa428", "filename": "tests/ui/new_without_default.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a578bed69ac2a9b33fcb871f9ad7dbf02355cb82/tests%2Fui%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a578bed69ac2a9b33fcb871f9ad7dbf02355cb82/tests%2Fui%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_without_default.rs?ref=a578bed69ac2a9b33fcb871f9ad7dbf02355cb82", "patch": "@@ -148,4 +148,15 @@ impl AllowDerive {\n     }\n }\n \n+pub struct NewNotEqualToDerive {\n+    foo: i32,\n+}\n+\n+impl NewNotEqualToDerive {\n+    // This `new` implementation is not equal to a derived `Default`, so do not suggest deriving.\n+    pub fn new() -> Self {\n+        NewNotEqualToDerive { foo: 1 }\n+    }\n+}\n+\n fn main() {}"}, {"sha": "e529e441eb735c6b60cb59d5090fa5a22763bfdb", "filename": "tests/ui/new_without_default.stderr", "status": "modified", "additions": 30, "deletions": 5, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/a578bed69ac2a9b33fcb871f9ad7dbf02355cb82/tests%2Fui%2Fnew_without_default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a578bed69ac2a9b33fcb871f9ad7dbf02355cb82/tests%2Fui%2Fnew_without_default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_without_default.stderr?ref=a578bed69ac2a9b33fcb871f9ad7dbf02355cb82", "patch": "@@ -1,4 +1,4 @@\n-error: you should consider deriving a `Default` implementation for `Foo`\n+error: you should consider adding a `Default` implementation for `Foo`\n   --> $DIR/new_without_default.rs:8:5\n    |\n LL | /     pub fn new() -> Foo {\n@@ -9,10 +9,14 @@ LL | |     }\n    = note: `-D clippy::new-without-default` implied by `-D warnings`\n help: try this\n    |\n-LL | #[derive(Default)]\n+LL | impl Default for Foo {\n+LL |     fn default() -> Self {\n+LL |         Self::new()\n+LL |     }\n+LL | }\n    |\n \n-error: you should consider deriving a `Default` implementation for `Bar`\n+error: you should consider adding a `Default` implementation for `Bar`\n   --> $DIR/new_without_default.rs:16:5\n    |\n LL | /     pub fn new() -> Self {\n@@ -22,7 +26,11 @@ LL | |     }\n    |\n help: try this\n    |\n-LL | #[derive(Default)]\n+LL | impl Default for Bar {\n+LL |     fn default() -> Self {\n+LL |         Self::new()\n+LL |     }\n+LL | }\n    |\n \n error: you should consider adding a `Default` implementation for `LtKo<'c>`\n@@ -42,5 +50,22 @@ LL |     }\n LL | }\n    |\n \n-error: aborting due to 3 previous errors\n+error: you should consider adding a `Default` implementation for `NewNotEqualToDerive`\n+  --> $DIR/new_without_default.rs:157:5\n+   |\n+LL | /     pub fn new() -> Self {\n+LL | |         NewNotEqualToDerive { foo: 1 }\n+LL | |     }\n+   | |_____^\n+   |\n+help: try this\n+   |\n+LL | impl Default for NewNotEqualToDerive {\n+LL |     fn default() -> Self {\n+LL |         Self::new()\n+LL |     }\n+LL | }\n+   |\n+\n+error: aborting due to 4 previous errors\n "}]}