{"sha": "c5cbfe89f8d4f98e557e8193f1378d3b60722752", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1Y2JmZTg5ZjhkNGY5OGU1NTdlODE5M2YxMzc4ZDNiNjA3MjI3NTI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-01-30T23:53:09Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-02-01T14:44:48Z"}, "message": "librustc: De-`@str` `NameAndSpan`", "tree": {"sha": "84fb12123016a01df191f0595dff0088e103893a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84fb12123016a01df191f0595dff0088e103893a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5cbfe89f8d4f98e557e8193f1378d3b60722752", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5cbfe89f8d4f98e557e8193f1378d3b60722752", "html_url": "https://github.com/rust-lang/rust/commit/c5cbfe89f8d4f98e557e8193f1378d3b60722752", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5cbfe89f8d4f98e557e8193f1378d3b60722752/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4dd3fe2f2266c10ed0e3bc07a165c2f094e1c1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4dd3fe2f2266c10ed0e3bc07a165c2f094e1c1b", "html_url": "https://github.com/rust-lang/rust/commit/a4dd3fe2f2266c10ed0e3bc07a165c2f094e1c1b"}], "stats": {"total": 63, "additions": 38, "deletions": 25}, "files": [{"sha": "b653af5b624d002f41da3d54dd4eebb517620923", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5cbfe89f8d4f98e557e8193f1378d3b60722752/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5cbfe89f8d4f98e557e8193f1378d3b60722752/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=c5cbfe89f8d4f98e557e8193f1378d3b60722752", "patch": "@@ -171,7 +171,7 @@ fn generate_test_harness(sess: session::Session, crate: ast::Crate)\n     cx.ext_cx.bt_push(ExpnInfo {\n         call_site: DUMMY_SP,\n         callee: NameAndSpan {\n-            name: @\"test\",\n+            name: ~\"test\",\n             format: MacroAttribute,\n             span: None\n         }"}, {"sha": "edaddc8e8bc1bbcb5df4ef88707ecf97fd9a5eee", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c5cbfe89f8d4f98e557e8193f1378d3b60722752/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5cbfe89f8d4f98e557e8193f1378d3b60722752/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=c5cbfe89f8d4f98e557e8193f1378d3b60722752", "patch": "@@ -160,17 +160,17 @@ pub struct LocWithOpt {\n pub struct FileMapAndLine {fm: @FileMap, line: uint}\n pub struct FileMapAndBytePos {fm: @FileMap, pos: BytePos}\n \n-#[deriving(IterBytes)]\n+#[deriving(Clone, IterBytes)]\n pub enum MacroFormat {\n     // e.g. #[deriving(...)] <item>\n     MacroAttribute,\n     // e.g. `format!()`\n     MacroBang\n }\n \n-#[deriving(IterBytes)]\n+#[deriving(Clone, IterBytes)]\n pub struct NameAndSpan {\n-    name: @str,\n+    name: ~str,\n     // the format with which the macro was invoked.\n     format: MacroFormat,\n     span: Option<Span>"}, {"sha": "31fcf857604f9fc87d0ceb44c9fe1d6059058be7", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c5cbfe89f8d4f98e557e8193f1378d3b60722752/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5cbfe89f8d4f98e557e8193f1378d3b60722752/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=c5cbfe89f8d4f98e557e8193f1378d3b60722752", "patch": "@@ -335,7 +335,8 @@ impl<'a> ExtCtxt<'a> {\n                     Some(@ExpnInfo {\n                         call_site: Span {lo: cs.lo, hi: cs.hi,\n                                          expn_info: self.backtrace},\n-                        callee: *callee});\n+                        callee: (*callee).clone()\n+                    });\n             }\n         }\n     }"}, {"sha": "8eaff592765b2ef7581c2551b684fa9e151a510b", "filename": "src/libsyntax/ext/deriving/generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5cbfe89f8d4f98e557e8193f1378d3b60722752/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5cbfe89f8d4f98e557e8193f1378d3b60722752/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs?ref=c5cbfe89f8d4f98e557e8193f1378d3b60722752", "patch": "@@ -944,7 +944,7 @@ impl<'a> TraitDef<'a> {\n         to_set.expn_info = Some(@codemap::ExpnInfo {\n             call_site: to_set,\n             callee: codemap::NameAndSpan {\n-                name: format!(\"deriving({})\", trait_name).to_managed(),\n+                name: format!(\"deriving({})\", trait_name),\n                 format: codemap::MacroAttribute,\n                 span: Some(self.span)\n             }"}, {"sha": "8e5bc1d61d2d65dc55113bd853aff557f0aa5537", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 31, "deletions": 19, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/c5cbfe89f8d4f98e557e8193f1378d3b60722752/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5cbfe89f8d4f98e557e8193f1378d3b60722752/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=c5cbfe89f8d4f98e557e8193f1378d3b60722752", "patch": "@@ -54,13 +54,14 @@ pub fn expand_expr(e: @ast::Expr, fld: &mut MacroExpander) -> @ast::Expr {\n                         return e;\n                     }\n                     let extname = &pth.segments[0].identifier;\n-                    let extnamestr = ident_to_str(extname);\n+                    let extnamestr = token::get_ident(extname.name);\n                     // leaving explicit deref here to highlight unbox op:\n                     let marked_after = match fld.extsbox.find(&extname.name) {\n                         None => {\n                             fld.cx.span_err(\n                                 pth.span,\n-                                format!(\"macro undefined: '{}'\", extnamestr));\n+                                format!(\"macro undefined: '{}'\",\n+                                        extnamestr.get()));\n \n                             // let compilation continue\n                             return e;\n@@ -69,7 +70,7 @@ pub fn expand_expr(e: @ast::Expr, fld: &mut MacroExpander) -> @ast::Expr {\n                             fld.cx.bt_push(ExpnInfo {\n                                 call_site: e.span,\n                                 callee: NameAndSpan {\n-                                    name: extnamestr,\n+                                    name: extnamestr.get().to_str(),\n                                     format: MacroBang,\n                                     span: exp_span,\n                                 },\n@@ -94,7 +95,7 @@ pub fn expand_expr(e: @ast::Expr, fld: &mut MacroExpander) -> @ast::Expr {\n                                         pth.span,\n                                         format!(\n                                             \"non-expr macro in expr pos: {}\",\n-                                            extnamestr\n+                                            extnamestr.get()\n                                         )\n                                     );\n                                     return e;\n@@ -107,7 +108,8 @@ pub fn expand_expr(e: @ast::Expr, fld: &mut MacroExpander) -> @ast::Expr {\n                         _ => {\n                             fld.cx.span_err(\n                                 pth.span,\n-                                format!(\"'{}' is not a tt-style macro\", extnamestr)\n+                                format!(\"'{}' is not a tt-style macro\",\n+                                        extnamestr.get())\n                             );\n                             return e;\n                         }\n@@ -226,7 +228,7 @@ pub fn expand_mod_items(module_: &ast::Mod, fld: &mut MacroExpander) -> ast::Mod\n                   fld.cx.bt_push(ExpnInfo {\n                       call_site: attr.span,\n                       callee: NameAndSpan {\n-                          name: mname.get().to_managed(),\n+                          name: mname.get().to_str(),\n                           format: MacroAttribute,\n                           span: None\n                       }\n@@ -295,12 +297,13 @@ pub fn expand_item_mac(it: @ast::Item, fld: &mut MacroExpander)\n     };\n \n     let extname = &pth.segments[0].identifier;\n-    let extnamestr = ident_to_str(extname);\n+    let extnamestr = token::get_ident(extname.name);\n     let fm = fresh_mark();\n     let expanded = match fld.extsbox.find(&extname.name) {\n         None => {\n             fld.cx.span_err(pth.span,\n-                            format!(\"macro undefined: '{}!'\", extnamestr));\n+                            format!(\"macro undefined: '{}!'\",\n+                                    extnamestr.get()));\n             // let compilation continue\n             return SmallVector::zero();\n         }\n@@ -309,14 +312,15 @@ pub fn expand_item_mac(it: @ast::Item, fld: &mut MacroExpander)\n             if it.ident.name != parse::token::special_idents::invalid.name {\n                 fld.cx.span_err(pth.span,\n                                 format!(\"macro {}! expects no ident argument, \\\n-                                        given '{}'\", extnamestr,\n+                                        given '{}'\",\n+                                        extnamestr.get(),\n                                         ident_to_str(&it.ident)));\n                 return SmallVector::zero();\n             }\n             fld.cx.bt_push(ExpnInfo {\n                 call_site: it.span,\n                 callee: NameAndSpan {\n-                    name: extnamestr,\n+                    name: extnamestr.get().to_str(),\n                     format: MacroBang,\n                     span: span\n                 }\n@@ -328,13 +332,14 @@ pub fn expand_item_mac(it: @ast::Item, fld: &mut MacroExpander)\n         Some(&IdentTT(ref expander, span)) => {\n             if it.ident.name == parse::token::special_idents::invalid.name {\n                 fld.cx.span_err(pth.span,\n-                                format!(\"macro {}! expects an ident argument\", extnamestr));\n+                                format!(\"macro {}! expects an ident argument\",\n+                                        extnamestr.get()));\n                 return SmallVector::zero();\n             }\n             fld.cx.bt_push(ExpnInfo {\n                 call_site: it.span,\n                 callee: NameAndSpan {\n-                    name: extnamestr,\n+                    name: extnamestr.get().to_str(),\n                     format: MacroBang,\n                     span: span\n                 }\n@@ -344,7 +349,9 @@ pub fn expand_item_mac(it: @ast::Item, fld: &mut MacroExpander)\n             expander.expand(fld.cx, it.span, it.ident, marked_tts)\n         }\n         _ => {\n-            fld.cx.span_err(it.span, format!(\"{}! is not legal in item position\", extnamestr));\n+            fld.cx.span_err(it.span,\n+                            format!(\"{}! is not legal in item position\",\n+                                    extnamestr.get()));\n             return SmallVector::zero();\n         }\n     };\n@@ -356,7 +363,9 @@ pub fn expand_item_mac(it: @ast::Item, fld: &mut MacroExpander)\n                 .collect()\n         }\n         MRExpr(_) => {\n-            fld.cx.span_err(pth.span, format!(\"expr macro in item position: {}\", extnamestr));\n+            fld.cx.span_err(pth.span,\n+                            format!(\"expr macro in item position: {}\",\n+                                    extnamestr.get()));\n             return SmallVector::zero();\n         }\n         MRAny(any_macro) => {\n@@ -475,18 +484,19 @@ pub fn expand_stmt(s: &Stmt, fld: &mut MacroExpander) -> SmallVector<@Stmt> {\n         return SmallVector::zero();\n     }\n     let extname = &pth.segments[0].identifier;\n-    let extnamestr = ident_to_str(extname);\n+    let extnamestr = token::get_ident(extname.name);\n     let marked_after = match fld.extsbox.find(&extname.name) {\n         None => {\n-            fld.cx.span_err(pth.span, format!(\"macro undefined: '{}'\", extnamestr));\n+            fld.cx.span_err(pth.span, format!(\"macro undefined: '{}'\",\n+                                              extnamestr.get()));\n             return SmallVector::zero();\n         }\n \n         Some(&NormalTT(ref expandfun, exp_span)) => {\n             fld.cx.bt_push(ExpnInfo {\n                 call_site: s.span,\n                 callee: NameAndSpan {\n-                    name: extnamestr,\n+                    name: extnamestr.get().to_str(),\n                     format: MacroBang,\n                     span: exp_span,\n                 }\n@@ -511,7 +521,8 @@ pub fn expand_stmt(s: &Stmt, fld: &mut MacroExpander) -> SmallVector<@Stmt> {\n                 MRAny(any_macro) => any_macro.make_stmt(),\n                 _ => {\n                     fld.cx.span_err(pth.span,\n-                                    format!(\"non-stmt macro in stmt pos: {}\", extnamestr));\n+                                    format!(\"non-stmt macro in stmt pos: {}\",\n+                                            extnamestr.get()));\n                     return SmallVector::zero();\n                 }\n             };\n@@ -520,7 +531,8 @@ pub fn expand_stmt(s: &Stmt, fld: &mut MacroExpander) -> SmallVector<@Stmt> {\n         }\n \n         _ => {\n-            fld.cx.span_err(pth.span, format!(\"'{}' is not a tt-style macro\", extnamestr));\n+            fld.cx.span_err(pth.span, format!(\"'{}' is not a tt-style macro\",\n+                                              extnamestr.get()));\n             return SmallVector::zero();\n         }\n     };"}]}