{"sha": "8fc425b67681e4beaf0c34dc802f56c7b97bf658", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmYzQyNWI2NzY4MWU0YmVhZjBjMzRkYzgwMmY1NmM3Yjk3YmY2NTg=", "commit": {"author": {"name": "Dale Wijnand", "email": "dale.wijnand@gmail.com", "date": "2018-08-10T17:58:23Z"}, "committer": {"name": "Dale Wijnand", "email": "dale.wijnand@gmail.com", "date": "2018-08-12T15:15:36Z"}, "message": "Add an internal lint for FxHashMap/FxHashSet", "tree": {"sha": "5cb16ea9b19c1d3868e788689aaa152554f47fc0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5cb16ea9b19c1d3868e788689aaa152554f47fc0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8fc425b67681e4beaf0c34dc802f56c7b97bf658", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEERGS9JmrgEHKCFADQTyVuPRUd9e8FAltwTy8ACgkQTyVuPRUd\n9e8cig//VeQOEYeIsk1Dh9nyAmEZoabuv8psOsf726arsD9wPxz3lxEjQ+iznzgA\n+vnhfXA66KU6Kq0UnrHcbemmHs2gRdFfSxQFEz1pt9fDdX2xcRGOxIfHriTb8wWG\n/u/Naw/z8edVFAZKvNherVt53wgQko0657zooJyysuXEM9uSXvd20U0Qscfi4n5b\nF23HnDmNtB6xj9cUY5oIx8aLA/mix2QK5cbyGzX8dCTWq7/W6qD6uSerM9D4iDgb\nQwN8KMhIYFgCWSo8AdaIzdr0B1hQMTg0A0EpvSpadvyA41kkJkiMy+T//+0U7tYC\nNw8nXGIL41hwPH6LAfDrZy+X1ZT7Ul0pGPhuCer28vNRRhyqFxeju7zdyEDDzUi+\nYKKF0AOC9ltVtEVsZgFs/nr6kujVLnqV+n+P/8nHg7SovirYDIDyrOWwG+KE355o\ny2Hn4aritdKjNnamRNlha/7dEbDAGGmnC3pLXi9dFHmjrOLisOdhZ+0QkDy1XIyf\nRymA2IxO//llLiw7YQnV011XSyBJmMtCIt4TD87OnwiEIX9hV7s5cQA/I/O1uhWz\nHEpDtDvfSDQhDMUpXdBmmryULSxmtlcwzuXVx7gM4tnAu/9HoDvbwWtqEhViZw5u\nexuNYGnd7Qbef07DkE242QLSODIJRYMTvs50X28xnmfyGEQ9My0=\n=1Di/\n-----END PGP SIGNATURE-----", "payload": "tree 5cb16ea9b19c1d3868e788689aaa152554f47fc0\nparent 82e9f5ffa3686612cc1f151f19c3ad9378b97b68\nauthor Dale Wijnand <dale.wijnand@gmail.com> 1533923903 +0100\ncommitter Dale Wijnand <dale.wijnand@gmail.com> 1534086936 +0100\n\nAdd an internal lint for FxHashMap/FxHashSet\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8fc425b67681e4beaf0c34dc802f56c7b97bf658", "html_url": "https://github.com/rust-lang/rust/commit/8fc425b67681e4beaf0c34dc802f56c7b97bf658", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8fc425b67681e4beaf0c34dc802f56c7b97bf658/comments", "author": {"login": "dwijnand", "id": 344610, "node_id": "MDQ6VXNlcjM0NDYxMA==", "avatar_url": "https://avatars.githubusercontent.com/u/344610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dwijnand", "html_url": "https://github.com/dwijnand", "followers_url": "https://api.github.com/users/dwijnand/followers", "following_url": "https://api.github.com/users/dwijnand/following{/other_user}", "gists_url": "https://api.github.com/users/dwijnand/gists{/gist_id}", "starred_url": "https://api.github.com/users/dwijnand/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dwijnand/subscriptions", "organizations_url": "https://api.github.com/users/dwijnand/orgs", "repos_url": "https://api.github.com/users/dwijnand/repos", "events_url": "https://api.github.com/users/dwijnand/events{/privacy}", "received_events_url": "https://api.github.com/users/dwijnand/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dwijnand", "id": 344610, "node_id": "MDQ6VXNlcjM0NDYxMA==", "avatar_url": "https://avatars.githubusercontent.com/u/344610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dwijnand", "html_url": "https://github.com/dwijnand", "followers_url": "https://api.github.com/users/dwijnand/followers", "following_url": "https://api.github.com/users/dwijnand/following{/other_user}", "gists_url": "https://api.github.com/users/dwijnand/gists{/gist_id}", "starred_url": "https://api.github.com/users/dwijnand/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dwijnand/subscriptions", "organizations_url": "https://api.github.com/users/dwijnand/orgs", "repos_url": "https://api.github.com/users/dwijnand/repos", "events_url": "https://api.github.com/users/dwijnand/events{/privacy}", "received_events_url": "https://api.github.com/users/dwijnand/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82e9f5ffa3686612cc1f151f19c3ad9378b97b68", "url": "https://api.github.com/repos/rust-lang/rust/commits/82e9f5ffa3686612cc1f151f19c3ad9378b97b68", "html_url": "https://github.com/rust-lang/rust/commit/82e9f5ffa3686612cc1f151f19c3ad9378b97b68"}], "stats": {"total": 104, "additions": 103, "deletions": 1}, "files": [{"sha": "82f974b724f7167cc6cf6e72ce8c9ff80f726044", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fc425b67681e4beaf0c34dc802f56c7b97bf658/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fc425b67681e4beaf0c34dc802f56c7b97bf658/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=8fc425b67681e4beaf0c34dc802f56c7b97bf658", "patch": "@@ -266,6 +266,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>) {\n     reg.register_late_lint_pass(box serde_api::Serde);\n     reg.register_early_lint_pass(box utils::internal_lints::Clippy);\n     reg.register_late_lint_pass(box utils::internal_lints::LintWithoutLintPass::default());\n+    reg.register_early_lint_pass(box utils::internal_lints::DefaultHashTypes::new());\n     reg.register_late_lint_pass(box utils::inspector::Pass);\n     reg.register_late_lint_pass(box utils::author::Pass);\n     reg.register_late_lint_pass(box types::TypePass);\n@@ -467,6 +468,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>) {\n     reg.register_lint_group(\"clippy_internal\", vec![\n         utils::internal_lints::CLIPPY_LINTS_INTERNAL,\n         utils::internal_lints::LINT_WITHOUT_LINT_PASS,\n+        utils::internal_lints::DEFAULT_HASH_TYPES,\n     ]);\n \n     reg.register_lint_group(\"clippy\", vec!["}, {"sha": "2e948ee60778ae9ae25b9f5aa891fa1337f89632", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/8fc425b67681e4beaf0c34dc802f56c7b97bf658/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fc425b67681e4beaf0c34dc802f56c7b97bf658/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=8fc425b67681e4beaf0c34dc802f56c7b97bf658", "patch": "@@ -3,9 +3,10 @@ use rustc::{declare_lint, lint_array};\n use rustc::hir::*;\n use rustc::hir;\n use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use rustc_data_structures::fx::FxHashMap;\n use crate::utils::{match_qpath, paths, span_lint};\n use syntax::symbol::LocalInternedString;\n-use syntax::ast::{Crate as AstCrate, ItemKind, Name};\n+use syntax::ast::{Crate as AstCrate, Ident, ItemKind, Name};\n use syntax::codemap::Span;\n use std::collections::{HashMap, HashSet};\n \n@@ -54,6 +55,18 @@ declare_clippy_lint! {\n }\n \n \n+/// **What it does:** Checks for the presence of the default hash types \"HashMap\" or \"HashSet\"\n+/// and recommends the FxHash* variants.\n+///\n+/// **Why is this bad?** The FxHash variants have better performance\n+/// and we don't need any collision prevention in clippy.\n+declare_clippy_lint! {\n+    pub DEFAULT_HASH_TYPES,\n+    internal,\n+    \"forbid HashMap and HashSet and suggest the FxHash* variants\"\n+}\n+\n+\n #[derive(Copy, Clone)]\n pub struct Clippy;\n \n@@ -207,3 +220,34 @@ impl<'a, 'tcx: 'a> Visitor<'tcx> for LintCollector<'a, 'tcx> {\n         NestedVisitorMap::All(&self.cx.tcx.hir)\n     }\n }\n+\n+\n+\n+pub struct DefaultHashTypes {\n+    map: FxHashMap<String, String>,\n+}\n+\n+impl DefaultHashTypes {\n+    pub fn new() -> Self {\n+        let mut map = FxHashMap::default();\n+        map.insert(\"HashMap\".to_owned(), \"FxHashMap\".to_owned());\n+        map.insert(\"HashSet\".to_owned(), \"FxHashSet\".to_owned());\n+        Self { map }\n+    }\n+}\n+\n+impl LintPass for DefaultHashTypes {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(DEFAULT_HASH_TYPES)\n+    }\n+}\n+\n+impl EarlyLintPass for DefaultHashTypes {\n+    fn check_ident(&mut self, cx: &EarlyContext<'_>, ident: Ident) {\n+        let ident_string = ident.to_string();\n+        if let Some(replace) = self.map.get(&ident_string) {\n+            let msg = format!(\"Prefer {} over {}, it has better performance and we don't need any collision prevention in clippy\", replace, ident_string);\n+            cx.span_lint(DEFAULT_HASH_TYPES, ident.span, &msg);\n+        }\n+    }\n+}"}, {"sha": "c6ed9436a51efe5f1318b0594943b0c4d87bf53f", "filename": "tests/ui/fxhash.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8fc425b67681e4beaf0c34dc802f56c7b97bf658/tests%2Fui%2Ffxhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fc425b67681e4beaf0c34dc802f56c7b97bf658/tests%2Fui%2Ffxhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffxhash.rs?ref=8fc425b67681e4beaf0c34dc802f56c7b97bf658", "patch": "@@ -0,0 +1,16 @@\n+#![warn(default_hash_types)]\n+#![feature(rustc_private)]\n+\n+extern crate rustc_data_structures;\n+\n+use std::collections::{HashMap, HashSet};\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+\n+fn main() {\n+    let _map: HashMap<String, String> = HashMap::default();\n+    let _set: HashSet<String> = HashSet::default();\n+\n+    // test that the lint doesn't also match the Fx variants themselves \ud83d\ude02\n+    let _fx_map: FxHashMap<String, String> = FxHashMap::default();\n+    let _fx_set: FxHashSet<String> = FxHashSet::default();\n+}"}, {"sha": "dc08ab88bacadeeca1cbdf107e3c894265a14b98", "filename": "tests/ui/fxhash.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/8fc425b67681e4beaf0c34dc802f56c7b97bf658/tests%2Fui%2Ffxhash.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8fc425b67681e4beaf0c34dc802f56c7b97bf658/tests%2Fui%2Ffxhash.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffxhash.stderr?ref=8fc425b67681e4beaf0c34dc802f56c7b97bf658", "patch": "@@ -0,0 +1,40 @@\n+error: Prefer FxHashMap over HashMap, it has better performance and we don't need any collision prevention in clippy\n+ --> $DIR/fxhash.rs:6:24\n+  |\n+6 | use std::collections::{HashMap, HashSet};\n+  |                        ^^^^^^^\n+  |\n+  = note: `-D default-hash-types` implied by `-D warnings`\n+\n+error: Prefer FxHashSet over HashSet, it has better performance and we don't need any collision prevention in clippy\n+ --> $DIR/fxhash.rs:6:33\n+  |\n+6 | use std::collections::{HashMap, HashSet};\n+  |                                 ^^^^^^^\n+\n+error: Prefer FxHashMap over HashMap, it has better performance and we don't need any collision prevention in clippy\n+  --> $DIR/fxhash.rs:10:15\n+   |\n+10 |     let _map: HashMap<String, String> = HashMap::default();\n+   |               ^^^^^^^\n+\n+error: Prefer FxHashMap over HashMap, it has better performance and we don't need any collision prevention in clippy\n+  --> $DIR/fxhash.rs:10:41\n+   |\n+10 |     let _map: HashMap<String, String> = HashMap::default();\n+   |                                         ^^^^^^^\n+\n+error: Prefer FxHashSet over HashSet, it has better performance and we don't need any collision prevention in clippy\n+  --> $DIR/fxhash.rs:11:15\n+   |\n+11 |     let _set: HashSet<String> = HashSet::default();\n+   |               ^^^^^^^\n+\n+error: Prefer FxHashSet over HashSet, it has better performance and we don't need any collision prevention in clippy\n+  --> $DIR/fxhash.rs:11:33\n+   |\n+11 |     let _set: HashSet<String> = HashSet::default();\n+   |                                 ^^^^^^^\n+\n+error: aborting due to 6 previous errors\n+"}]}