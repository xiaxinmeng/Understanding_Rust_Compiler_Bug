{"sha": "ffae6426630f719b6f1168c359f0f1a8b405bbc6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmYWU2NDI2NjMwZjcxOWI2ZjExNjhjMzU5ZjBmMWE4YjQwNWJiYzY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-16T22:31:59Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-17T00:23:20Z"}, "message": "rustc: Parse attributes in crate files\n\nIssue #487", "tree": {"sha": "aa2661acafbb2f0052e4703002e7045c6ad40051", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa2661acafbb2f0052e4703002e7045c6ad40051"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffae6426630f719b6f1168c359f0f1a8b405bbc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffae6426630f719b6f1168c359f0f1a8b405bbc6", "html_url": "https://github.com/rust-lang/rust/commit/ffae6426630f719b6f1168c359f0f1a8b405bbc6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffae6426630f719b6f1168c359f0f1a8b405bbc6/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62939e41b23ebcb0fb4fd1f2abefe360d313fe56", "url": "https://api.github.com/repos/rust-lang/rust/commits/62939e41b23ebcb0fb4fd1f2abefe360d313fe56", "html_url": "https://github.com/rust-lang/rust/commit/62939e41b23ebcb0fb4fd1f2abefe360d313fe56"}], "stats": {"total": 25, "additions": 19, "deletions": 6}, "files": [{"sha": "8ed646f38d040e837c19f145ccb6bb8370b8b41c", "filename": "src/comp/front/eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ffae6426630f719b6f1168c359f0f1a8b405bbc6/src%2Fcomp%2Ffront%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffae6426630f719b6f1168c359f0f1a8b405bbc6/src%2Fcomp%2Ffront%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Feval.rs?ref=ffae6426630f719b6f1168c359f0f1a8b405bbc6", "patch": "@@ -10,7 +10,7 @@ import ast::ident;\n import front::parser::parser;\n import front::parser::spanned;\n import front::parser::new_parser;\n-import front::parser::parse_inner_attributes;\n+import front::parser::parse_inner_attrs_and_next;\n import front::parser::parse_mod_items;\n import util::common;\n import util::common::filename;\n@@ -288,7 +288,7 @@ fn eval_crate_directive(ctx cx, env e, @ast::crate_directive cdir, str prefix,\n             auto p0 =\n                 new_parser(cx.sess, e, start_id, full_path, cx.chpos,\n                            cx.next_ann);\n-            auto inner_attrs = parse_inner_attributes(p0);\n+            auto inner_attrs = parse_inner_attrs_and_next(p0);\n             auto first_item_outer_attrs = inner_attrs._1;\n             auto m0 = parse_mod_items(p0, token::EOF,\n                                       first_item_outer_attrs);"}, {"sha": "f1121c814aa97371494d35f324461285da91891a", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ffae6426630f719b6f1168c359f0f1a8b405bbc6/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffae6426630f719b6f1168c359f0f1a8b405bbc6/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=ffae6426630f719b6f1168c359f0f1a8b405bbc6", "patch": "@@ -1838,7 +1838,7 @@ fn parse_item_mod(&parser p, vec[ast::attribute] attrs) -> @ast::item {\n     auto lo = p.get_last_lo_pos();\n     auto id = parse_ident(p);\n     expect(p, token::LBRACE);\n-    auto inner_attrs = parse_inner_attributes(p);\n+    auto inner_attrs = parse_inner_attrs_and_next(p);\n     auto first_item_outer_attrs = inner_attrs._1;\n     auto m = parse_mod_items(p, token::RBRACE,\n                              first_item_outer_attrs);\n@@ -2095,8 +2095,8 @@ fn parse_attribute_naked(&parser p, ast::attr_style style,\n // next item (since we can't know whether the attribute is an inner attribute\n // of the containing item or an outer attribute of the first contained item\n // until we see the semi).\n-fn parse_inner_attributes(&parser p) -> tup(vec[ast::attribute],\n-                                            vec[ast::attribute]) {\n+fn parse_inner_attrs_and_next(&parser p) -> tup(vec[ast::attribute],\n+                                                vec[ast::attribute]) {\n     let vec[ast::attribute] inner_attrs = [];\n     let vec[ast::attribute] next_outer_attrs = [];\n     while (p.peek() == token::POUND) {\n@@ -2117,6 +2117,14 @@ fn parse_inner_attributes(&parser p) -> tup(vec[ast::attribute],\n     ret tup(inner_attrs, next_outer_attrs);\n }\n \n+fn parse_inner_attrs(&parser p) -> vec[ast::attribute] {\n+    auto attrs_and_next = parse_inner_attrs_and_next(p);\n+    if (vec::len(attrs_and_next._1) > 0u) {\n+        // FIXME: Don't drop this dangling attr on the ground\n+    }\n+    ret attrs_and_next._0;\n+}\n+\n fn parse_meta_item(&parser p) -> @ast::meta_item {\n     auto lo = p.get_lo_pos();\n     auto ident = parse_ident(p);\n@@ -2369,6 +2377,8 @@ fn parse_crate_directives(&parser p, token::token term) ->\n fn parse_crate_from_crate_file(&parser p) -> @ast::crate {\n     auto lo = p.get_lo_pos();\n     auto prefix = std::fs::dirname(p.get_filemap().name);\n+    // FIXME (issue #487): Do something with these attrs\n+    auto attrs = parse_inner_attrs(p);\n     auto cdirs = parse_crate_directives(p, token::EOF);\n     let vec[str] deps = [];\n     auto cx ="}, {"sha": "0896f834b8bdd027cfb56eff3dc8e2d54f38e26a", "filename": "src/test/run-pass/crate-attributes.rc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ffae6426630f719b6f1168c359f0f1a8b405bbc6/src%2Ftest%2Frun-pass%2Fcrate-attributes.rc", "raw_url": "https://github.com/rust-lang/rust/raw/ffae6426630f719b6f1168c359f0f1a8b405bbc6/src%2Ftest%2Frun-pass%2Fcrate-attributes.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrate-attributes.rc?ref=ffae6426630f719b6f1168c359f0f1a8b405bbc6", "patch": "@@ -1,3 +1,6 @@\n+#[name = \"crate-attributes\"];\n+#[vers = \"1.0\"];\n+\n mod m = \"crate-attributes-src\" {\n   mod foo;\n-}\n\\ No newline at end of file\n+}"}]}