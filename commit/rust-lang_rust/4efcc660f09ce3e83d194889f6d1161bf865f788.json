{"sha": "4efcc660f09ce3e83d194889f6d1161bf865f788", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlZmNjNjYwZjA5Y2UzZTgzZDE5NDg4OWY2ZDExNjFiZjg2NWY3ODg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-05T09:11:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-05T09:11:45Z"}, "message": "Auto merge of #45754 - scottmcm:checked-npot, r=dtolnay\n\nFix #18604: next_power_of_two should panic on overflow\n\nFixes https://github.com/rust-lang/rust/issues/18604\n\nIs it possible to write a test for this?  My experiments showed `x.py test` running in release mode, so my attempt at a `#[should_panic]` didn't work.", "tree": {"sha": "687a9cd8774248d39bdca6df1f743f766bd99466", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/687a9cd8774248d39bdca6df1f743f766bd99466"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4efcc660f09ce3e83d194889f6d1161bf865f788", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4efcc660f09ce3e83d194889f6d1161bf865f788", "html_url": "https://github.com/rust-lang/rust/commit/4efcc660f09ce3e83d194889f6d1161bf865f788", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4efcc660f09ce3e83d194889f6d1161bf865f788/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16e9b9f15cc405cfccc4469216b8711abbeae9d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/16e9b9f15cc405cfccc4469216b8711abbeae9d5", "html_url": "https://github.com/rust-lang/rust/commit/16e9b9f15cc405cfccc4469216b8711abbeae9d5"}, {"sha": "0d745af29a7566538277bd7a3b16faf09df7fe63", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d745af29a7566538277bd7a3b16faf09df7fe63", "html_url": "https://github.com/rust-lang/rust/commit/0d745af29a7566538277bd7a3b16faf09df7fe63"}], "stats": {"total": 64, "additions": 63, "deletions": 1}, "files": [{"sha": "a50779bedfdc18ca16e72aaa69f15a3ab8e12493", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4efcc660f09ce3e83d194889f6d1161bf865f788/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4efcc660f09ce3e83d194889f6d1161bf865f788/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=4efcc660f09ce3e83d194889f6d1161bf865f788", "patch": "@@ -15,6 +15,7 @@\n use convert::{Infallible, TryFrom};\n use fmt;\n use intrinsics;\n+use ops;\n use str::FromStr;\n \n /// Provides intentionally-wrapped arithmetic on `T`.\n@@ -2223,7 +2224,8 @@ macro_rules! uint_impl {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[inline]\n         pub fn next_power_of_two(self) -> Self {\n-            self.one_less_than_next_power_of_two() + 1\n+            // Call the trait to get overflow checks\n+            ops::Add::add(self.one_less_than_next_power_of_two(), 1)\n         }\n \n         /// Returns the smallest power of two greater than or equal to `n`. If"}, {"sha": "a3e7ffd4e49d72c22228cb01553bb9744b31452b", "filename": "src/test/run-pass/next-power-of-two-overflow-debug.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4efcc660f09ce3e83d194889f6d1161bf865f788/src%2Ftest%2Frun-pass%2Fnext-power-of-two-overflow-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4efcc660f09ce3e83d194889f6d1161bf865f788/src%2Ftest%2Frun-pass%2Fnext-power-of-two-overflow-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnext-power-of-two-overflow-debug.rs?ref=4efcc660f09ce3e83d194889f6d1161bf865f788", "patch": "@@ -0,0 +1,36 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -C debug_assertions=yes\n+\n+#![feature(i128_type)]\n+\n+use std::panic;\n+\n+fn main() {\n+    macro_rules! overflow_test {\n+        ($t:ident) => (\n+            let r = panic::catch_unwind(|| {\n+                ($t::max_value()).next_power_of_two()\n+            });\n+            assert!(r.is_err());\n+\n+            let r = panic::catch_unwind(|| {\n+                (($t::max_value() >> 1) + 2).next_power_of_two()\n+            });\n+            assert!(r.is_err());\n+        )\n+    }\n+    overflow_test!(u8);\n+    overflow_test!(u16);\n+    overflow_test!(u32);\n+    overflow_test!(u64);\n+    overflow_test!(u128);\n+}"}, {"sha": "f8bcb961c68338400ab2b783c700ca22563ac782", "filename": "src/test/run-pass/next-power-of-two-overflow-ndebug.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4efcc660f09ce3e83d194889f6d1161bf865f788/src%2Ftest%2Frun-pass%2Fnext-power-of-two-overflow-ndebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4efcc660f09ce3e83d194889f6d1161bf865f788/src%2Ftest%2Frun-pass%2Fnext-power-of-two-overflow-ndebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnext-power-of-two-overflow-ndebug.rs?ref=4efcc660f09ce3e83d194889f6d1161bf865f788", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -C debug_assertions=no\n+\n+#![feature(i128_type)]\n+\n+fn main() {\n+    for i in 129..256 {\n+        assert_eq!((i as u8).next_power_of_two(), 0);\n+    }\n+\n+    assert_eq!(((1u16 << 15) + 1).next_power_of_two(), 0);\n+    assert_eq!(((1u32 << 31) + 1).next_power_of_two(), 0);\n+    assert_eq!(((1u64 << 63) + 1).next_power_of_two(), 0);\n+    assert_eq!(((1u128 << 127) + 1).next_power_of_two(), 0);\n+}"}]}