{"sha": "2e2ea26a8305d44e2441b8a97e05f7f4d69f7220", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlMmVhMjZhODMwNWQ0NGUyNDQxYjhhOTdlMDVmN2Y0ZDY5ZjcyMjA=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-08-05T05:42:18Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-08-05T05:42:18Z"}, "message": "remove unused tcx argument", "tree": {"sha": "864059d4eab0103a6e38ea29683a6c0c7e46ce75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/864059d4eab0103a6e38ea29683a6c0c7e46ce75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e2ea26a8305d44e2441b8a97e05f7f4d69f7220", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e2ea26a8305d44e2441b8a97e05f7f4d69f7220", "html_url": "https://github.com/rust-lang/rust/commit/2e2ea26a8305d44e2441b8a97e05f7f4d69f7220", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e2ea26a8305d44e2441b8a97e05f7f4d69f7220/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e2f337e6bc5a1b6bd1cfe0458acb4d5f3ff3c8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e2f337e6bc5a1b6bd1cfe0458acb4d5f3ff3c8b", "html_url": "https://github.com/rust-lang/rust/commit/5e2f337e6bc5a1b6bd1cfe0458acb4d5f3ff3c8b"}], "stats": {"total": 25, "additions": 10, "deletions": 15}, "files": [{"sha": "7e39f3d3b08418618516629ae866807f02ae392c", "filename": "src/librustc_mir/borrow_check/nll/escaping_locals.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2e2ea26a8305d44e2441b8a97e05f7f4d69f7220/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fescaping_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2ea26a8305d44e2441b8a97e05f7f4d69f7220/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fescaping_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fescaping_locals.rs?ref=2e2ea26a8305d44e2441b8a97e05f7f4d69f7220", "patch": "@@ -44,7 +44,6 @@\n \n use rustc::mir::visit::Visitor;\n use rustc::mir::*;\n-use rustc::ty::TyCtxt;\n \n use rustc_data_structures::indexed_vec::Idx;\n use rustc_data_structures::unify as ut;\n@@ -54,8 +53,8 @@ crate struct EscapingLocals {\n }\n \n impl EscapingLocals {\n-    crate fn compute(tcx: TyCtxt<'_, '_, 'tcx>, mir: &Mir<'tcx>) -> Self {\n-        let mut visitor = GatherAssignedLocalsVisitor::new(tcx, mir);\n+    crate fn compute(mir: &Mir<'tcx>) -> Self {\n+        let mut visitor = GatherAssignedLocalsVisitor::new();\n         visitor.visit_mir(mir);\n \n         EscapingLocals {\n@@ -74,10 +73,8 @@ impl EscapingLocals {\n \n /// The MIR visitor gathering the union-find of the locals used in\n /// assignments.\n-struct GatherAssignedLocalsVisitor<'cx, 'gcx: 'tcx, 'tcx: 'cx> {\n+struct GatherAssignedLocalsVisitor {\n     unification_table: ut::UnificationTable<ut::InPlace<AssignedLocal>>,\n-    tcx: TyCtxt<'cx, 'gcx, 'tcx>,\n-    mir: &'cx Mir<'tcx>,\n }\n \n #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq)]\n@@ -107,12 +104,10 @@ impl From<Local> for AssignedLocal {\n     }\n }\n \n-impl GatherAssignedLocalsVisitor<'cx, 'gcx, 'tcx> {\n-    fn new(tcx: TyCtxt<'cx, 'gcx, 'tcx>, mir: &'cx Mir<'tcx>) -> Self {\n+impl GatherAssignedLocalsVisitor {\n+    fn new() -> Self {\n         Self {\n             unification_table: ut::UnificationTable::new(),\n-            tcx,\n-            mir,\n         }\n     }\n \n@@ -154,7 +149,7 @@ fn find_local_in_operand(op: &Operand) -> Option<Local> {\n     }\n }\n \n-impl Visitor<'tcx> for GatherAssignedLocalsVisitor<'_, '_, 'tcx> {\n+impl Visitor<'tcx> for GatherAssignedLocalsVisitor {\n     fn visit_mir(&mut self, mir: &Mir<'tcx>) {\n         // We need as many union-find keys as there are locals\n         for _ in 0..mir.local_decls.len() {"}, {"sha": "d018a9277d83420158a50b2f0c14333f3d89d6ef", "filename": "src/librustc_mir/borrow_check/nll/liveness_map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2e2ea26a8305d44e2441b8a97e05f7f4d69f7220/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fliveness_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2ea26a8305d44e2441b8a97e05f7f4d69f7220/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fliveness_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fliveness_map.rs?ref=2e2ea26a8305d44e2441b8a97e05f7f4d69f7220", "patch": "@@ -18,7 +18,7 @@\n \n use borrow_check::nll::escaping_locals::EscapingLocals;\n use rustc::mir::{Local, Mir};\n-use rustc::ty::{TyCtxt, TypeFoldable};\n+use rustc::ty::TypeFoldable;\n use rustc_data_structures::indexed_vec::IndexVec;\n use util::liveness::LiveVariableMap;\n \n@@ -55,8 +55,8 @@ impl LiveVariableMap for NllLivenessMap {\n impl NllLivenessMap {\n     /// Iterates over the variables in Mir and assigns each Local whose type contains\n     /// regions a LocalWithRegion index. Returns a map for converting back and forth.\n-    crate fn compute(tcx: TyCtxt<'_, '_, 'tcx>, mir: &Mir<'tcx>) -> Self {\n-        let mut escaping_locals = EscapingLocals::compute(tcx, mir);\n+    crate fn compute(mir: &Mir<'tcx>) -> Self {\n+        let mut escaping_locals = EscapingLocals::compute(mir);\n \n         let mut to_local = IndexVec::default();\n         let mut escapes_into_return = 0;"}, {"sha": "44ed6b7676c0c61e18e517f8eaf1dc1cf554ca39", "filename": "src/librustc_mir/borrow_check/nll/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e2ea26a8305d44e2441b8a97e05f7f4d69f7220/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2ea26a8305d44e2441b8a97e05f7f4d69f7220/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs?ref=2e2ea26a8305d44e2441b8a97e05f7f4d69f7220", "patch": "@@ -109,7 +109,7 @@ pub(in borrow_check) fn compute_regions<'cx, 'gcx, 'tcx>(\n     let elements = &Rc::new(RegionValueElements::new(mir));\n \n     // Run the MIR type-checker.\n-    let liveness_map = NllLivenessMap::compute(infcx.tcx, &mir);\n+    let liveness_map = NllLivenessMap::compute(&mir);\n     let liveness = LivenessResults::compute(mir, &liveness_map);\n     let (constraint_sets, universal_region_relations) = type_check::type_check(\n         infcx,"}]}