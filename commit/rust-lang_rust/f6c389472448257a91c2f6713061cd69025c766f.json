{"sha": "f6c389472448257a91c2f6713061cd69025c766f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2YzM4OTQ3MjQ0ODI1N2E5MWMyZjY3MTMwNjFjZDY5MDI1Yzc2NmY=", "commit": {"author": {"name": "Tyler Lanphear", "email": "animemachine13@gmail.com", "date": "2020-02-02T06:05:53Z"}, "committer": {"name": "Tyler Lanphear", "email": "animemachine13@gmail.com", "date": "2020-02-02T07:08:30Z"}, "message": "compiletest: error if `compile-fail` header in ui test.", "tree": {"sha": "c140bb76116ea822b2ca342385e4d953c42374a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c140bb76116ea822b2ca342385e4d953c42374a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6c389472448257a91c2f6713061cd69025c766f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6c389472448257a91c2f6713061cd69025c766f", "html_url": "https://github.com/rust-lang/rust/commit/f6c389472448257a91c2f6713061cd69025c766f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6c389472448257a91c2f6713061cd69025c766f/comments", "author": {"login": "Tyg13", "id": 25281, "node_id": "MDQ6VXNlcjI1Mjgx", "avatar_url": "https://avatars.githubusercontent.com/u/25281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Tyg13", "html_url": "https://github.com/Tyg13", "followers_url": "https://api.github.com/users/Tyg13/followers", "following_url": "https://api.github.com/users/Tyg13/following{/other_user}", "gists_url": "https://api.github.com/users/Tyg13/gists{/gist_id}", "starred_url": "https://api.github.com/users/Tyg13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Tyg13/subscriptions", "organizations_url": "https://api.github.com/users/Tyg13/orgs", "repos_url": "https://api.github.com/users/Tyg13/repos", "events_url": "https://api.github.com/users/Tyg13/events{/privacy}", "received_events_url": "https://api.github.com/users/Tyg13/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Tyg13", "id": 25281, "node_id": "MDQ6VXNlcjI1Mjgx", "avatar_url": "https://avatars.githubusercontent.com/u/25281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Tyg13", "html_url": "https://github.com/Tyg13", "followers_url": "https://api.github.com/users/Tyg13/followers", "following_url": "https://api.github.com/users/Tyg13/following{/other_user}", "gists_url": "https://api.github.com/users/Tyg13/gists{/gist_id}", "starred_url": "https://api.github.com/users/Tyg13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Tyg13/subscriptions", "organizations_url": "https://api.github.com/users/Tyg13/orgs", "repos_url": "https://api.github.com/users/Tyg13/repos", "events_url": "https://api.github.com/users/Tyg13/events{/privacy}", "received_events_url": "https://api.github.com/users/Tyg13/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5b150edafc0e72cd7f5f3f67a4e8b417d515b01", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5b150edafc0e72cd7f5f3f67a4e8b417d515b01", "html_url": "https://github.com/rust-lang/rust/commit/e5b150edafc0e72cd7f5f3f67a4e8b417d515b01"}], "stats": {"total": 362, "additions": 168, "deletions": 194}, "files": [{"sha": "3db5e468b35bfa981715e512f63d08dc9070e9c6", "filename": "src/test/ui/associated-type-bounds/bad-bounds-on-assoc-in-trait.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.rs?ref=f6c389472448257a91c2f6713061cd69025c766f", "patch": "@@ -1,4 +1,3 @@\n-// compile-fail\n // ignore-tidy-linelength\n \n // NOTE: rustc cannot currently handle bounds of the form `for<'a> <Foo as Bar<'a>>::Assoc: Baz`."}, {"sha": "5303a09644d50a398c3f3fb63962a85e1f350bdc", "filename": "src/test/ui/associated-type-bounds/bad-bounds-on-assoc-in-trait.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr?ref=f6c389472448257a91c2f6713061cd69025c766f", "patch": "@@ -1,13 +1,13 @@\n error[E0277]: `<L1 as Lam<&'a u8>>::App` doesn't implement `std::fmt::Debug`\n-  --> $DIR/bad-bounds-on-assoc-in-trait.rs:32:6\n+  --> $DIR/bad-bounds-on-assoc-in-trait.rs:31:6\n    |\n LL | impl Case1 for S1 {\n    |      ^^^^^ `<L1 as Lam<&'a u8>>::App` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n    |\n    = help: the trait `for<'a> std::fmt::Debug` is not implemented for `<L1 as Lam<&'a u8>>::App`\n \n error[E0277]: `<<T as Case1>::C as std::iter::Iterator>::Item` is not an iterator\n-  --> $DIR/bad-bounds-on-assoc-in-trait.rs:37:1\n+  --> $DIR/bad-bounds-on-assoc-in-trait.rs:36:1\n    |\n LL |   fn assume_case1<T: Case1>() {\n    |   ^                          - help: consider further restricting the associated type: `where <<T as Case1>::C as std::iter::Iterator>::Item: std::iter::Iterator`\n@@ -24,7 +24,7 @@ LL | | }\n    = help: the trait `std::iter::Iterator` is not implemented for `<<T as Case1>::C as std::iter::Iterator>::Item`\n \n error[E0277]: `<<T as Case1>::C as std::iter::Iterator>::Item` cannot be sent between threads safely\n-  --> $DIR/bad-bounds-on-assoc-in-trait.rs:37:1\n+  --> $DIR/bad-bounds-on-assoc-in-trait.rs:36:1\n    |\n LL |   trait Case1 {\n    |   ----------- required by `Case1`\n@@ -44,7 +44,7 @@ LL | | }\n    = help: the trait `std::marker::Send` is not implemented for `<<T as Case1>::C as std::iter::Iterator>::Item`\n \n error[E0277]: `<<T as Case1>::C as std::iter::Iterator>::Item` cannot be shared between threads safely\n-  --> $DIR/bad-bounds-on-assoc-in-trait.rs:37:1\n+  --> $DIR/bad-bounds-on-assoc-in-trait.rs:36:1\n    |\n LL |   trait Case1 {\n    |   ----------- required by `Case1`\n@@ -64,7 +64,7 @@ LL | | }\n    = help: the trait `std::marker::Sync` is not implemented for `<<T as Case1>::C as std::iter::Iterator>::Item`\n \n error[E0277]: `<_ as Lam<&'a u8>>::App` doesn't implement `std::fmt::Debug`\n-  --> $DIR/bad-bounds-on-assoc-in-trait.rs:37:1\n+  --> $DIR/bad-bounds-on-assoc-in-trait.rs:36:1\n    |\n LL |   trait Case1 {\n    |   ----------- required by `Case1`"}, {"sha": "f8d230da36523211fe689db00a0232104cc45031", "filename": "src/test/ui/associated-type-bounds/duplicate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.rs?ref=f6c389472448257a91c2f6713061cd69025c766f", "patch": "@@ -1,4 +1,3 @@\n-// compile-fail\n // ignore-tidy-linelength\n \n #![feature(associated_type_bounds)]"}, {"sha": "df1151d876c04b17b3e3b7a96195c762f99b7d1d", "filename": "src/test/ui/associated-type-bounds/duplicate.stderr", "status": "modified", "additions": 97, "deletions": 97, "changes": 194, "blob_url": "https://github.com/rust-lang/rust/blob/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.stderr?ref=f6c389472448257a91c2f6713061cd69025c766f", "patch": "@@ -1,727 +1,727 @@\n warning: the feature `impl_trait_in_bindings` is incomplete and may cause the compiler to crash\n-  --> $DIR/duplicate.rs:6:12\n+  --> $DIR/duplicate.rs:5:12\n    |\n LL | #![feature(impl_trait_in_bindings)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:11:36\n+  --> $DIR/duplicate.rs:10:36\n    |\n LL | struct SI1<T: Iterator<Item: Copy, Item: Send>> { f: T }\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:13:36\n+  --> $DIR/duplicate.rs:12:36\n    |\n LL | struct SI2<T: Iterator<Item: Copy, Item: Copy>> { f: T }\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:15:39\n+  --> $DIR/duplicate.rs:14:39\n    |\n LL | struct SI3<T: Iterator<Item: 'static, Item: 'static>> { f: T }\n    |                        -------------  ^^^^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:17:45\n+  --> $DIR/duplicate.rs:16:45\n    |\n LL | struct SW1<T> where T: Iterator<Item: Copy, Item: Send> { f: T }\n    |                                 ----------  ^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:19:45\n+  --> $DIR/duplicate.rs:18:45\n    |\n LL | struct SW2<T> where T: Iterator<Item: Copy, Item: Copy> { f: T }\n    |                                 ----------  ^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:21:48\n+  --> $DIR/duplicate.rs:20:48\n    |\n LL | struct SW3<T> where T: Iterator<Item: 'static, Item: 'static> { f: T }\n    |                                 -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:24:34\n+  --> $DIR/duplicate.rs:23:34\n    |\n LL | enum EI1<T: Iterator<Item: Copy, Item: Send>> { V(T) }\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:26:34\n+  --> $DIR/duplicate.rs:25:34\n    |\n LL | enum EI2<T: Iterator<Item: Copy, Item: Copy>> { V(T) }\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:28:37\n+  --> $DIR/duplicate.rs:27:37\n    |\n LL | enum EI3<T: Iterator<Item: 'static, Item: 'static>> { V(T) }\n    |                      -------------  ^^^^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:30:43\n+  --> $DIR/duplicate.rs:29:43\n    |\n LL | enum EW1<T> where T: Iterator<Item: Copy, Item: Send> { V(T) }\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:32:43\n+  --> $DIR/duplicate.rs:31:43\n    |\n LL | enum EW2<T> where T: Iterator<Item: Copy, Item: Copy> { V(T) }\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:34:46\n+  --> $DIR/duplicate.rs:33:46\n    |\n LL | enum EW3<T> where T: Iterator<Item: 'static, Item: 'static> { V(T) }\n    |                               -------------  ^^^^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:37:35\n+  --> $DIR/duplicate.rs:36:35\n    |\n LL | union UI1<T: Iterator<Item: Copy, Item: Send>> { f: T }\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:39:35\n+  --> $DIR/duplicate.rs:38:35\n    |\n LL | union UI2<T: Iterator<Item: Copy, Item: Copy>> { f: T }\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:41:38\n+  --> $DIR/duplicate.rs:40:38\n    |\n LL | union UI3<T: Iterator<Item: 'static, Item: 'static>> { f: T }\n    |                       -------------  ^^^^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:43:44\n+  --> $DIR/duplicate.rs:42:44\n    |\n LL | union UW1<T> where T: Iterator<Item: Copy, Item: Send> { f: T }\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:45:44\n+  --> $DIR/duplicate.rs:44:44\n    |\n LL | union UW2<T> where T: Iterator<Item: Copy, Item: Copy> { f: T }\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:47:47\n+  --> $DIR/duplicate.rs:46:47\n    |\n LL | union UW3<T> where T: Iterator<Item: 'static, Item: 'static> { f: T }\n    |                                -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:50:32\n+  --> $DIR/duplicate.rs:49:32\n    |\n LL | fn FI1<T: Iterator<Item: Copy, Item: Send>>() {}\n    |                    ----------  ^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:52:32\n+  --> $DIR/duplicate.rs:51:32\n    |\n LL | fn FI2<T: Iterator<Item: Copy, Item: Copy>>() {}\n    |                    ----------  ^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:54:35\n+  --> $DIR/duplicate.rs:53:35\n    |\n LL | fn FI3<T: Iterator<Item: 'static, Item: 'static>>() {}\n    |                    -------------  ^^^^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:56:43\n+  --> $DIR/duplicate.rs:55:43\n    |\n LL | fn FW1<T>() where T: Iterator<Item: Copy, Item: Send> {}\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:58:43\n+  --> $DIR/duplicate.rs:57:43\n    |\n LL | fn FW2<T>() where T: Iterator<Item: Copy, Item: Copy> {}\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:60:46\n+  --> $DIR/duplicate.rs:59:46\n    |\n LL | fn FW3<T>() where T: Iterator<Item: 'static, Item: 'static> {}\n    |                               -------------  ^^^^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:69:40\n+  --> $DIR/duplicate.rs:68:40\n    |\n LL | fn FAPIT1(_: impl Iterator<Item: Copy, Item: Send>) {}\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:71:40\n+  --> $DIR/duplicate.rs:70:40\n    |\n LL | fn FAPIT2(_: impl Iterator<Item: Copy, Item: Copy>) {}\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:73:43\n+  --> $DIR/duplicate.rs:72:43\n    |\n LL | fn FAPIT3(_: impl Iterator<Item: 'static, Item: 'static>) {}\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:63:42\n+  --> $DIR/duplicate.rs:62:42\n    |\n LL | fn FRPIT1() -> impl Iterator<Item: Copy, Item: Send> { iter::empty() }\n    |                              ----------  ^^^^^^^^^^ re-bound here\n    |                              |\n    |                              `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:65:42\n+  --> $DIR/duplicate.rs:64:42\n    |\n LL | fn FRPIT2() -> impl Iterator<Item: Copy, Item: Copy> { iter::empty() }\n    |                              ----------  ^^^^^^^^^^ re-bound here\n    |                              |\n    |                              `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:67:45\n+  --> $DIR/duplicate.rs:66:45\n    |\n LL | fn FRPIT3() -> impl Iterator<Item: 'static, Item: 'static> { iter::empty() }\n    |                              -------------  ^^^^^^^^^^^^^ re-bound here\n    |                              |\n    |                              `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:76:39\n+  --> $DIR/duplicate.rs:75:39\n    |\n LL | const CIT1: impl Iterator<Item: Copy, Item: Send> = iter::empty();\n    |                           ----------  ^^^^^^^^^^ re-bound here\n    |                           |\n    |                           `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:78:39\n+  --> $DIR/duplicate.rs:77:39\n    |\n LL | const CIT2: impl Iterator<Item: Copy, Item: Copy> = iter::empty();\n    |                           ----------  ^^^^^^^^^^ re-bound here\n    |                           |\n    |                           `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:80:42\n+  --> $DIR/duplicate.rs:79:42\n    |\n LL | const CIT3: impl Iterator<Item: 'static, Item: 'static> = iter::empty();\n    |                           -------------  ^^^^^^^^^^^^^ re-bound here\n    |                           |\n    |                           `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:82:40\n+  --> $DIR/duplicate.rs:81:40\n    |\n LL | static SIT1: impl Iterator<Item: Copy, Item: Send> = iter::empty();\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:84:40\n+  --> $DIR/duplicate.rs:83:40\n    |\n LL | static SIT2: impl Iterator<Item: Copy, Item: Copy> = iter::empty();\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:86:43\n+  --> $DIR/duplicate.rs:85:43\n    |\n LL | static SIT3: impl Iterator<Item: 'static, Item: 'static> = iter::empty();\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:89:46\n+  --> $DIR/duplicate.rs:88:46\n    |\n LL | fn lit1() { let _: impl Iterator<Item: Copy, Item: Send> = iter::empty(); }\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:91:46\n+  --> $DIR/duplicate.rs:90:46\n    |\n LL | fn lit2() { let _: impl Iterator<Item: Copy, Item: Copy> = iter::empty(); }\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:93:49\n+  --> $DIR/duplicate.rs:92:49\n    |\n LL | fn lit3() { let _: impl Iterator<Item: 'static, Item: 'static> = iter::empty(); }\n    |                                  -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:96:35\n+  --> $DIR/duplicate.rs:95:35\n    |\n LL | type TAI1<T: Iterator<Item: Copy, Item: Send>> = T;\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:98:35\n+  --> $DIR/duplicate.rs:97:35\n    |\n LL | type TAI2<T: Iterator<Item: Copy, Item: Copy>> = T;\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:100:38\n+  --> $DIR/duplicate.rs:99:38\n    |\n LL | type TAI3<T: Iterator<Item: 'static, Item: 'static>> = T;\n    |                       -------------  ^^^^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:102:44\n+  --> $DIR/duplicate.rs:101:44\n    |\n LL | type TAW1<T> where T: Iterator<Item: Copy, Item: Send> = T;\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:104:44\n+  --> $DIR/duplicate.rs:103:44\n    |\n LL | type TAW2<T> where T: Iterator<Item: Copy, Item: Copy> = T;\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:106:47\n+  --> $DIR/duplicate.rs:105:47\n    |\n LL | type TAW3<T> where T: Iterator<Item: 'static, Item: 'static> = T;\n    |                                -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:109:1\n+  --> $DIR/duplicate.rs:108:1\n    |\n LL | type ETAI1<T: Iterator<Item: Copy, Item: Send>> = impl Copy;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:109:36\n+  --> $DIR/duplicate.rs:108:36\n    |\n LL | type ETAI1<T: Iterator<Item: Copy, Item: Send>> = impl Copy;\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:114:1\n+  --> $DIR/duplicate.rs:113:1\n    |\n LL | type ETAI2<T: Iterator<Item: Copy, Item: Copy>> = impl Copy;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:114:36\n+  --> $DIR/duplicate.rs:113:36\n    |\n LL | type ETAI2<T: Iterator<Item: Copy, Item: Copy>> = impl Copy;\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:119:1\n+  --> $DIR/duplicate.rs:118:1\n    |\n LL | type ETAI3<T: Iterator<Item: 'static, Item: 'static>> = impl Copy;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:119:39\n+  --> $DIR/duplicate.rs:118:39\n    |\n LL | type ETAI3<T: Iterator<Item: 'static, Item: 'static>> = impl Copy;\n    |                        -------------  ^^^^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:124:1\n+  --> $DIR/duplicate.rs:123:1\n    |\n LL | type ETAI4 = impl Iterator<Item: Copy, Item: Send>;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:124:40\n+  --> $DIR/duplicate.rs:123:40\n    |\n LL | type ETAI4 = impl Iterator<Item: Copy, Item: Send>;\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:129:1\n+  --> $DIR/duplicate.rs:128:1\n    |\n LL | type ETAI5 = impl Iterator<Item: Copy, Item: Copy>;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:129:40\n+  --> $DIR/duplicate.rs:128:40\n    |\n LL | type ETAI5 = impl Iterator<Item: Copy, Item: Copy>;\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:134:1\n+  --> $DIR/duplicate.rs:133:1\n    |\n LL | type ETAI6 = impl Iterator<Item: 'static, Item: 'static>;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:134:43\n+  --> $DIR/duplicate.rs:133:43\n    |\n LL | type ETAI6 = impl Iterator<Item: 'static, Item: 'static>;\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:140:36\n+  --> $DIR/duplicate.rs:139:36\n    |\n LL | trait TRI1<T: Iterator<Item: Copy, Item: Send>> {}\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:142:36\n+  --> $DIR/duplicate.rs:141:36\n    |\n LL | trait TRI2<T: Iterator<Item: Copy, Item: Copy>> {}\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:144:39\n+  --> $DIR/duplicate.rs:143:39\n    |\n LL | trait TRI3<T: Iterator<Item: 'static, Item: 'static>> {}\n    |                        -------------  ^^^^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:146:34\n+  --> $DIR/duplicate.rs:145:34\n    |\n LL | trait TRS1: Iterator<Item: Copy, Item: Send> {}\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:148:34\n+  --> $DIR/duplicate.rs:147:34\n    |\n LL | trait TRS2: Iterator<Item: Copy, Item: Copy> {}\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:150:37\n+  --> $DIR/duplicate.rs:149:37\n    |\n LL | trait TRS3: Iterator<Item: 'static, Item: 'static> {}\n    |                      -------------  ^^^^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:152:45\n+  --> $DIR/duplicate.rs:151:45\n    |\n LL | trait TRW1<T> where T: Iterator<Item: Copy, Item: Send> {}\n    |                                 ----------  ^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:154:45\n+  --> $DIR/duplicate.rs:153:45\n    |\n LL | trait TRW2<T> where T: Iterator<Item: Copy, Item: Copy> {}\n    |                                 ----------  ^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:156:48\n+  --> $DIR/duplicate.rs:155:48\n    |\n LL | trait TRW3<T> where T: Iterator<Item: 'static, Item: 'static> {}\n    |                                 -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:158:46\n+  --> $DIR/duplicate.rs:157:46\n    |\n LL | trait TRSW1 where Self: Iterator<Item: Copy, Item: Send> {}\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:158:46\n+  --> $DIR/duplicate.rs:157:46\n    |\n LL | trait TRSW1 where Self: Iterator<Item: Copy, Item: Send> {}\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:161:46\n+  --> $DIR/duplicate.rs:160:46\n    |\n LL | trait TRSW2 where Self: Iterator<Item: Copy, Item: Copy> {}\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:161:46\n+  --> $DIR/duplicate.rs:160:46\n    |\n LL | trait TRSW2 where Self: Iterator<Item: Copy, Item: Copy> {}\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:164:49\n+  --> $DIR/duplicate.rs:163:49\n    |\n LL | trait TRSW3 where Self: Iterator<Item: 'static, Item: 'static> {}\n    |                                  -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:164:49\n+  --> $DIR/duplicate.rs:163:49\n    |\n LL | trait TRSW3 where Self: Iterator<Item: 'static, Item: 'static> {}\n    |                                  -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:167:43\n+  --> $DIR/duplicate.rs:166:43\n    |\n LL | trait TRA1 { type A: Iterator<Item: Copy, Item: Send>; }\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:169:43\n+  --> $DIR/duplicate.rs:168:43\n    |\n LL | trait TRA2 { type A: Iterator<Item: Copy, Item: Copy>; }\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:171:46\n+  --> $DIR/duplicate.rs:170:46\n    |\n LL | trait TRA3 { type A: Iterator<Item: 'static, Item: 'static>; }\n    |                               -------------  ^^^^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:174:40\n+  --> $DIR/duplicate.rs:173:40\n    |\n LL | type TADyn1 = dyn Iterator<Item: Copy, Item: Send>;\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:178:44\n+  --> $DIR/duplicate.rs:177:44\n    |\n LL | type TADyn2 = Box<dyn Iterator<Item: Copy, Item: Copy>>;\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:182:43\n+  --> $DIR/duplicate.rs:181:43\n    |\n LL | type TADyn3 = dyn Iterator<Item: 'static, Item: 'static>;\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:109:24\n+  --> $DIR/duplicate.rs:108:24\n    |\n LL | type ETAI1<T: Iterator<Item: Copy, Item: Send>> = impl Copy;\n    |                        ^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:109:36\n+  --> $DIR/duplicate.rs:108:36\n    |\n LL | type ETAI1<T: Iterator<Item: Copy, Item: Send>> = impl Copy;\n    |                                    ^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:114:24\n+  --> $DIR/duplicate.rs:113:24\n    |\n LL | type ETAI2<T: Iterator<Item: Copy, Item: Copy>> = impl Copy;\n    |                        ^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:114:36\n+  --> $DIR/duplicate.rs:113:36\n    |\n LL | type ETAI2<T: Iterator<Item: Copy, Item: Copy>> = impl Copy;\n    |                                    ^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:119:24\n+  --> $DIR/duplicate.rs:118:24\n    |\n LL | type ETAI3<T: Iterator<Item: 'static, Item: 'static>> = impl Copy;\n    |                        ^^^^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:119:39\n+  --> $DIR/duplicate.rs:118:39\n    |\n LL | type ETAI3<T: Iterator<Item: 'static, Item: 'static>> = impl Copy;\n    |                                       ^^^^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:124:28\n+  --> $DIR/duplicate.rs:123:28\n    |\n LL | type ETAI4 = impl Iterator<Item: Copy, Item: Send>;\n    |                            ^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:124:40\n+  --> $DIR/duplicate.rs:123:40\n    |\n LL | type ETAI4 = impl Iterator<Item: Copy, Item: Send>;\n    |                                        ^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:129:28\n+  --> $DIR/duplicate.rs:128:28\n    |\n LL | type ETAI5 = impl Iterator<Item: Copy, Item: Copy>;\n    |                            ^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:129:40\n+  --> $DIR/duplicate.rs:128:40\n    |\n LL | type ETAI5 = impl Iterator<Item: Copy, Item: Copy>;\n    |                                        ^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:134:28\n+  --> $DIR/duplicate.rs:133:28\n    |\n LL | type ETAI6 = impl Iterator<Item: 'static, Item: 'static>;\n    |                            ^^^^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:134:43\n+  --> $DIR/duplicate.rs:133:43\n    |\n LL | type ETAI6 = impl Iterator<Item: 'static, Item: 'static>;\n    |                                           ^^^^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:174:28\n+  --> $DIR/duplicate.rs:173:28\n    |\n LL | type TADyn1 = dyn Iterator<Item: Copy, Item: Send>;\n    |                            ^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:174:40\n+  --> $DIR/duplicate.rs:173:40\n    |\n LL | type TADyn1 = dyn Iterator<Item: Copy, Item: Send>;\n    |                                        ^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:178:32\n+  --> $DIR/duplicate.rs:177:32\n    |\n LL | type TADyn2 = Box<dyn Iterator<Item: Copy, Item: Copy>>;\n    |                                ^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:178:44\n+  --> $DIR/duplicate.rs:177:44\n    |\n LL | type TADyn2 = Box<dyn Iterator<Item: Copy, Item: Copy>>;\n    |                                            ^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:182:28\n+  --> $DIR/duplicate.rs:181:28\n    |\n LL | type TADyn3 = dyn Iterator<Item: 'static, Item: 'static>;\n    |                            ^^^^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:182:43\n+  --> $DIR/duplicate.rs:181:43\n    |\n LL | type TADyn3 = dyn Iterator<Item: 'static, Item: 'static>;\n    |                                           ^^^^^^^^^^^^^"}, {"sha": "cddce8777eab7a740546a528e3bb6dca699f0bb3", "filename": "src/test/ui/associated-type-bounds/implied-region-constraints.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fimplied-region-constraints.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fimplied-region-constraints.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fimplied-region-constraints.nll.stderr?ref=f6c389472448257a91c2f6713061cd69025c766f", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/implied-region-constraints.rs:19:56\n+  --> $DIR/implied-region-constraints.rs:17:56\n    |\n LL | fn _bad_st<'a, 'b, T>(x: St<'a, 'b, T>)\n    |            --  -- lifetime `'b` defined here\n@@ -12,7 +12,7 @@ LL |     let _failure_proves_not_implied_outlives_region_b: &'b T = &x.f0;\n    = help: consider adding the following bound: `'a: 'b`\n \n error: lifetime may not live long enough\n-  --> $DIR/implied-region-constraints.rs:40:64\n+  --> $DIR/implied-region-constraints.rs:38:64\n    |\n LL | fn _bad_en7<'a, 'b, T>(x: En7<'a, 'b, T>)\n    |             --  -- lifetime `'b` defined here"}, {"sha": "ccad947f7f074d39c96b4c393b2c13898b67c655", "filename": "src/test/ui/associated-type-bounds/implied-region-constraints.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fimplied-region-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fimplied-region-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fimplied-region-constraints.rs?ref=f6c389472448257a91c2f6713061cd69025c766f", "patch": "@@ -1,5 +1,3 @@\n-// compile-fail\n-\n #![feature(associated_type_bounds)]\n \n trait Tr1 { type As1; }"}, {"sha": "c338e38d28f71625e6a73503407ab3651b5dd982", "filename": "src/test/ui/associated-type-bounds/implied-region-constraints.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fimplied-region-constraints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fimplied-region-constraints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fimplied-region-constraints.stderr?ref=f6c389472448257a91c2f6713061cd69025c766f", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/implied-region-constraints.rs:19:64\n+  --> $DIR/implied-region-constraints.rs:17:64\n    |\n LL | fn _bad_st<'a, 'b, T>(x: St<'a, 'b, T>)\n    |                          ------------- this type is declared with multiple lifetimes...\n@@ -8,7 +8,7 @@ LL |     let _failure_proves_not_implied_outlives_region_b: &'b T = &x.f0;\n    |                                                                ^^^^^ ...but data with one lifetime flows into the other here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/implied-region-constraints.rs:40:72\n+  --> $DIR/implied-region-constraints.rs:38:72\n    |\n LL | fn _bad_en7<'a, 'b, T>(x: En7<'a, 'b, T>)\n    |                           -------------- this type is declared with multiple lifetimes..."}, {"sha": "b74c03829b48b03db7509edc84dcbbab7dd867af", "filename": "src/test/ui/associated-type-bounds/inside-adt.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Fassociated-type-bounds%2Finside-adt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Fassociated-type-bounds%2Finside-adt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Finside-adt.rs?ref=f6c389472448257a91c2f6713061cd69025c766f", "patch": "@@ -1,4 +1,3 @@\n-// compile-fail\n #![feature(associated_type_bounds)]\n #![feature(untagged_unions)]\n "}, {"sha": "a532bb0c76697e2233a78e6e6add07bd82c958a3", "filename": "src/test/ui/associated-type-bounds/inside-adt.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Fassociated-type-bounds%2Finside-adt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Fassociated-type-bounds%2Finside-adt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Finside-adt.stderr?ref=f6c389472448257a91c2f6713061cd69025c766f", "patch": "@@ -1,107 +1,107 @@\n error: associated type bounds are not allowed within structs, enums, or unions\n-  --> $DIR/inside-adt.rs:5:29\n+  --> $DIR/inside-adt.rs:4:29\n    |\n LL | struct S1 { f: dyn Iterator<Item: Copy> }\n    |                             ^^^^^^^^^^\n \n error: associated type bounds are not allowed within structs, enums, or unions\n-  --> $DIR/inside-adt.rs:8:33\n+  --> $DIR/inside-adt.rs:7:33\n    |\n LL | struct S2 { f: Box<dyn Iterator<Item: Copy>> }\n    |                                 ^^^^^^^^^^\n \n error: associated type bounds are not allowed within structs, enums, or unions\n-  --> $DIR/inside-adt.rs:11:29\n+  --> $DIR/inside-adt.rs:10:29\n    |\n LL | struct S3 { f: dyn Iterator<Item: 'static> }\n    |                             ^^^^^^^^^^^^^\n \n error: associated type bounds are not allowed within structs, enums, or unions\n-  --> $DIR/inside-adt.rs:15:26\n+  --> $DIR/inside-adt.rs:14:26\n    |\n LL | enum E1 { V(dyn Iterator<Item: Copy>) }\n    |                          ^^^^^^^^^^\n \n error: associated type bounds are not allowed within structs, enums, or unions\n-  --> $DIR/inside-adt.rs:18:30\n+  --> $DIR/inside-adt.rs:17:30\n    |\n LL | enum E2 { V(Box<dyn Iterator<Item: Copy>>) }\n    |                              ^^^^^^^^^^\n \n error: associated type bounds are not allowed within structs, enums, or unions\n-  --> $DIR/inside-adt.rs:21:26\n+  --> $DIR/inside-adt.rs:20:26\n    |\n LL | enum E3 { V(dyn Iterator<Item: 'static>) }\n    |                          ^^^^^^^^^^^^^\n \n error: associated type bounds are not allowed within structs, enums, or unions\n-  --> $DIR/inside-adt.rs:25:28\n+  --> $DIR/inside-adt.rs:24:28\n    |\n LL | union U1 { f: dyn Iterator<Item: Copy> }\n    |                            ^^^^^^^^^^\n \n error: associated type bounds are not allowed within structs, enums, or unions\n-  --> $DIR/inside-adt.rs:28:32\n+  --> $DIR/inside-adt.rs:27:32\n    |\n LL | union U2 { f: Box<dyn Iterator<Item: Copy>> }\n    |                                ^^^^^^^^^^\n \n error: associated type bounds are not allowed within structs, enums, or unions\n-  --> $DIR/inside-adt.rs:31:28\n+  --> $DIR/inside-adt.rs:30:28\n    |\n LL | union U3 { f: dyn Iterator<Item: 'static> }\n    |                            ^^^^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/inside-adt.rs:5:29\n+  --> $DIR/inside-adt.rs:4:29\n    |\n LL | struct S1 { f: dyn Iterator<Item: Copy> }\n    |                             ^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/inside-adt.rs:8:33\n+  --> $DIR/inside-adt.rs:7:33\n    |\n LL | struct S2 { f: Box<dyn Iterator<Item: Copy>> }\n    |                                 ^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/inside-adt.rs:11:29\n+  --> $DIR/inside-adt.rs:10:29\n    |\n LL | struct S3 { f: dyn Iterator<Item: 'static> }\n    |                             ^^^^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/inside-adt.rs:15:26\n+  --> $DIR/inside-adt.rs:14:26\n    |\n LL | enum E1 { V(dyn Iterator<Item: Copy>) }\n    |                          ^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/inside-adt.rs:18:30\n+  --> $DIR/inside-adt.rs:17:30\n    |\n LL | enum E2 { V(Box<dyn Iterator<Item: Copy>>) }\n    |                              ^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/inside-adt.rs:21:26\n+  --> $DIR/inside-adt.rs:20:26\n    |\n LL | enum E3 { V(dyn Iterator<Item: 'static>) }\n    |                          ^^^^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/inside-adt.rs:25:28\n+  --> $DIR/inside-adt.rs:24:28\n    |\n LL | union U1 { f: dyn Iterator<Item: Copy> }\n    |                            ^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/inside-adt.rs:28:32\n+  --> $DIR/inside-adt.rs:27:32\n    |\n LL | union U2 { f: Box<dyn Iterator<Item: Copy>> }\n    |                                ^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/inside-adt.rs:31:28\n+  --> $DIR/inside-adt.rs:30:28\n    |\n LL | union U3 { f: dyn Iterator<Item: 'static> }\n    |                            ^^^^^^^^^^^^^"}, {"sha": "845941200fc9500ad5c56def864111788aa971f6", "filename": "src/test/ui/async-await/async-fn-nonsend.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.rs?ref=f6c389472448257a91c2f6713061cd69025c766f", "patch": "@@ -1,4 +1,3 @@\n-// compile-fail\n // edition:2018\n // compile-flags: --crate-type lib\n "}, {"sha": "3a2c42b383700a0186cff08590687d9f1a7cde05", "filename": "src/test/ui/async-await/async-fn-nonsend.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr?ref=f6c389472448257a91c2f6713061cd69025c766f", "patch": "@@ -1,5 +1,5 @@\n error: future cannot be sent between threads safely\n-  --> $DIR/async-fn-nonsend.rs:50:5\n+  --> $DIR/async-fn-nonsend.rs:49:5\n    |\n LL | fn assert_send(_: impl Send) {}\n    |    -----------         ---- required by this bound in `assert_send`\n@@ -9,7 +9,7 @@ LL |     assert_send(local_dropped_before_await());\n    |\n    = help: within `impl std::future::Future`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<()>`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/async-fn-nonsend.rs:25:5\n+  --> $DIR/async-fn-nonsend.rs:24:5\n    |\n LL |     let x = non_send();\n    |         - has type `impl std::fmt::Debug`\n@@ -20,7 +20,7 @@ LL | }\n    | - `x` is later dropped here\n \n error: future cannot be sent between threads safely\n-  --> $DIR/async-fn-nonsend.rs:52:5\n+  --> $DIR/async-fn-nonsend.rs:51:5\n    |\n LL | fn assert_send(_: impl Send) {}\n    |    -----------         ---- required by this bound in `assert_send`\n@@ -30,7 +30,7 @@ LL |     assert_send(non_send_temporary_in_match());\n    |\n    = help: within `impl std::future::Future`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<()>`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/async-fn-nonsend.rs:34:20\n+  --> $DIR/async-fn-nonsend.rs:33:20\n    |\n LL |     match Some(non_send()) {\n    |                ---------- has type `impl std::fmt::Debug`\n@@ -41,7 +41,7 @@ LL | }\n    | - `non_send()` is later dropped here\n \n error: future cannot be sent between threads safely\n-  --> $DIR/async-fn-nonsend.rs:54:5\n+  --> $DIR/async-fn-nonsend.rs:53:5\n    |\n LL | fn assert_send(_: impl Send) {}\n    |    -----------         ---- required by this bound in `assert_send`\n@@ -51,7 +51,7 @@ LL |     assert_send(non_sync_with_method_call());\n    |\n    = help: the trait `std::marker::Send` is not implemented for `dyn std::fmt::Write`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/async-fn-nonsend.rs:43:9\n+  --> $DIR/async-fn-nonsend.rs:42:9\n    |\n LL |     let f: &mut std::fmt::Formatter = panic!();\n    |         - has type `&mut std::fmt::Formatter<'_>`"}, {"sha": "64322990d0a9339d5d2c436870c6176a78833cc2", "filename": "src/test/ui/async-await/no-async-const.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Fasync-await%2Fno-async-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Fasync-await%2Fno-async-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-async-const.rs?ref=f6c389472448257a91c2f6713061cd69025c766f", "patch": "@@ -1,4 +1,3 @@\n-// compile-fail\n // edition:2018\n // compile-flags: --crate-type lib\n "}, {"sha": "d5b8b344abe625781912d37d8295135315bdad3a", "filename": "src/test/ui/async-await/no-async-const.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Fasync-await%2Fno-async-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Fasync-await%2Fno-async-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-async-const.stderr?ref=f6c389472448257a91c2f6713061cd69025c766f", "patch": "@@ -1,5 +1,5 @@\n error: expected one of `fn` or `unsafe`, found keyword `const`\n-  --> $DIR/no-async-const.rs:5:11\n+  --> $DIR/no-async-const.rs:4:11\n    |\n LL | pub async const fn x() {}\n    |           ^^^^^ expected one of `fn` or `unsafe`"}, {"sha": "55b27bd3fa1ac9768c133861d421115596bda53a", "filename": "src/test/ui/async-await/no-const-async.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.rs?ref=f6c389472448257a91c2f6713061cd69025c766f", "patch": "@@ -1,4 +1,3 @@\n-// compile-fail\n // edition:2018\n // compile-flags: --crate-type lib\n "}, {"sha": "62cd5c45d1950fa2d21ce517090213c8e29cbe79", "filename": "src/test/ui/async-await/no-const-async.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.stderr?ref=f6c389472448257a91c2f6713061cd69025c766f", "patch": "@@ -1,11 +1,11 @@\n error: expected identifier, found keyword `async`\n-  --> $DIR/no-const-async.rs:5:11\n+  --> $DIR/no-const-async.rs:4:11\n    |\n LL | pub const async fn x() {}\n    |           ^^^^^ expected identifier, found keyword\n \n error: expected `:`, found keyword `fn`\n-  --> $DIR/no-const-async.rs:5:17\n+  --> $DIR/no-const-async.rs:4:17\n    |\n LL | pub const async fn x() {}\n    |                 ^^ expected `:`"}, {"sha": "51c9a42b3f4e3e76083a109efef5787140bacf03", "filename": "src/test/ui/async-await/no-move-across-await-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-struct.rs?ref=f6c389472448257a91c2f6713061cd69025c766f", "patch": "@@ -1,4 +1,3 @@\n-// compile-fail\n // edition:2018\n // compile-flags: --crate-type lib\n "}, {"sha": "adfae09925fef564f3942ab056612c5b2aac79a6", "filename": "src/test/ui/async-await/no-move-across-await-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-struct.stderr?ref=f6c389472448257a91c2f6713061cd69025c766f", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: use of moved value: `s.x`\n-  --> $DIR/no-move-across-await-struct.rs:8:5\n+  --> $DIR/no-move-across-await-struct.rs:7:5\n    |\n LL |     needs_vec(s.x).await;\n    |               --- value moved here"}, {"sha": "a656332698c43bf5be0048574d0ae744405f8743", "filename": "src/test/ui/async-await/no-move-across-await-tuple.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-tuple.rs?ref=f6c389472448257a91c2f6713061cd69025c766f", "patch": "@@ -1,4 +1,3 @@\n-// compile-fail\n // edition:2018\n // compile-flags: --crate-type lib\n "}, {"sha": "a60fd9361a77920a2c182eb55c90b3c0225052b1", "filename": "src/test/ui/async-await/no-move-across-await-tuple.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-tuple.stderr?ref=f6c389472448257a91c2f6713061cd69025c766f", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: use of moved value: `x.1`\n-  --> $DIR/no-move-across-await-tuple.rs:9:5\n+  --> $DIR/no-move-across-await-tuple.rs:8:5\n    |\n LL |     drop(x.1);\n    |          --- value moved here"}, {"sha": "24070fe33083ca28fbfb0431d2c9264da6e2a72e", "filename": "src/test/ui/async-await/no-non-guaranteed-initialization.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Fasync-await%2Fno-non-guaranteed-initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Fasync-await%2Fno-non-guaranteed-initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-non-guaranteed-initialization.rs?ref=f6c389472448257a91c2f6713061cd69025c766f", "patch": "@@ -1,4 +1,3 @@\n-// compile-fail\n // edition:2018\n // compile-flags: --crate-type lib\n "}, {"sha": "f5991f4bccac942e718f0ec725ef8862fca47c4f", "filename": "src/test/ui/async-await/no-non-guaranteed-initialization.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Fasync-await%2Fno-non-guaranteed-initialization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Fasync-await%2Fno-non-guaranteed-initialization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-non-guaranteed-initialization.stderr?ref=f6c389472448257a91c2f6713061cd69025c766f", "patch": "@@ -1,5 +1,5 @@\n error[E0381]: use of possibly-uninitialized variable: `y`\n-  --> $DIR/no-non-guaranteed-initialization.rs:10:5\n+  --> $DIR/no-non-guaranteed-initialization.rs:9:5\n    |\n LL |     y\n    |     ^ use of possibly-uninitialized `y`"}, {"sha": "21ae25c16bb782fc653c00db1b06177d4e1298d5", "filename": "src/test/ui/borrowck/two-phase-nonrecv-autoref.nll.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.nll.stderr?ref=f6c389472448257a91c2f6713061cd69025c766f", "patch": "@@ -1,5 +1,5 @@\n error[E0499]: cannot borrow `*f` as mutable more than once at a time\n-  --> $DIR/two-phase-nonrecv-autoref.rs:58:11\n+  --> $DIR/two-phase-nonrecv-autoref.rs:51:11\n    |\n LL |         f(f(10));\n    |         - ^ second mutable borrow occurs here\n@@ -8,7 +8,7 @@ LL |         f(f(10));\n    |         first borrow later used by call\n \n error[E0382]: use of moved value: `f`\n-  --> $DIR/two-phase-nonrecv-autoref.rs:66:11\n+  --> $DIR/two-phase-nonrecv-autoref.rs:59:11\n    |\n LL |     fn twice_ten_so<F: FnOnce(i32) -> i32>(f: Box<F>) {\n    |                                            - move occurs because `f` has type `std::boxed::Box<F>`, which does not implement the `Copy` trait\n@@ -18,7 +18,7 @@ LL |         f(f(10));\n    |         value moved here\n \n error[E0499]: cannot borrow `*f` as mutable more than once at a time\n-  --> $DIR/two-phase-nonrecv-autoref.rs:72:11\n+  --> $DIR/two-phase-nonrecv-autoref.rs:65:11\n    |\n LL |         f(f(10));\n    |         - ^ second mutable borrow occurs here\n@@ -27,7 +27,7 @@ LL |         f(f(10));\n    |         first borrow later used by call\n \n error[E0382]: use of moved value: `f`\n-  --> $DIR/two-phase-nonrecv-autoref.rs:80:11\n+  --> $DIR/two-phase-nonrecv-autoref.rs:73:11\n    |\n LL |     fn twice_ten_oo(f: Box<dyn FnOnce(i32) -> i32>) {\n    |                     - move occurs because `f` has type `std::boxed::Box<dyn std::ops::FnOnce(i32) -> i32>`, which does not implement the `Copy` trait\n@@ -37,7 +37,7 @@ LL |         f(f(10));\n    |         value moved here\n \n error[E0502]: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/two-phase-nonrecv-autoref.rs:119:27\n+  --> $DIR/two-phase-nonrecv-autoref.rs:112:27\n    |\n LL |     double_access(&mut a, &a);\n    |     ------------- ------  ^^ immutable borrow occurs here\n@@ -46,7 +46,7 @@ LL |     double_access(&mut a, &a);\n    |     mutable borrow later used by call\n \n error[E0502]: cannot borrow `i` as immutable because it is also borrowed as mutable\n-  --> $DIR/two-phase-nonrecv-autoref.rs:145:7\n+  --> $DIR/two-phase-nonrecv-autoref.rs:138:7\n    |\n LL |     i[i[3]] = 4;\n    |     --^----\n@@ -56,7 +56,7 @@ LL |     i[i[3]] = 4;\n    |     mutable borrow later used here\n \n error[E0502]: cannot borrow `i` as immutable because it is also borrowed as mutable\n-  --> $DIR/two-phase-nonrecv-autoref.rs:150:7\n+  --> $DIR/two-phase-nonrecv-autoref.rs:143:7\n    |\n LL |     i[i[3]] = i[4];\n    |     --^----"}, {"sha": "918c7a1be197ac630948749e3ae4ed3ec8b0c4e3", "filename": "src/test/ui/borrowck/two-phase-nonrecv-autoref.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.rs?ref=f6c389472448257a91c2f6713061cd69025c766f", "patch": "@@ -13,13 +13,6 @@\n // receivers (namely, in many cases demonstrated below, the error\n // would not arise).\n \n-// (If we revise the compiler or this test so that the g2p revision\n-// passes, turn the `rustc_attrs` feature back on and tag the `fn\n-// main` with `#[rustc_error]` so that this remains a valid\n-// compile-fail test.)\n-//\n-// #![feature(rustc_attrs)]\n-\n use std::ops::{Index, IndexMut};\n \n fn foo(x: &mut u32, y: u32) {"}, {"sha": "5bf3ec733f5d78c3dee4f4500f14e1cc5b862fd7", "filename": "src/test/ui/impl-trait/bound-normalization-fail.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.rs?ref=f6c389472448257a91c2f6713061cd69025c766f", "patch": "@@ -1,4 +1,3 @@\n-// compile-fail\n // ignore-tidy-linelength\n // edition:2018\n "}, {"sha": "22ba8342ff41fdc87abb17770ba3d34aafad9f6a", "filename": "src/test/ui/impl-trait/bound-normalization-fail.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr?ref=f6c389472448257a91c2f6713061cd69025c766f", "patch": "@@ -1,13 +1,13 @@\n warning: the feature `impl_trait_in_bindings` is incomplete and may cause the compiler to crash\n-  --> $DIR/bound-normalization-fail.rs:5:12\n+  --> $DIR/bound-normalization-fail.rs:4:12\n    |\n LL | #![feature(impl_trait_in_bindings)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n \n error[E0271]: type mismatch resolving `<Foo<()> as FooLike>::Output == <T as impl_trait::Trait>::Assoc`\n-  --> $DIR/bound-normalization-fail.rs:28:32\n+  --> $DIR/bound-normalization-fail.rs:27:32\n    |\n LL |     fn foo_fail<T: Trait>() -> impl FooLike<Output=T::Assoc> {\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found associated type\n@@ -19,13 +19,13 @@ LL |     fn foo_fail<T: Trait>() -> impl FooLike<Output=T::Assoc> {\n    = note: the return type of a function must have a statically known size\n \n error: `impl Trait` return type cannot contain a projection or `Self` that references lifetimes from a parent scope\n-  --> $DIR/bound-normalization-fail.rs:44:41\n+  --> $DIR/bound-normalization-fail.rs:43:41\n    |\n LL |     fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output=T::Assoc> {\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0271]: type mismatch resolving `<Foo<()> as FooLike>::Output == <T as lifetimes::Trait<'static>>::Assoc`\n-  --> $DIR/bound-normalization-fail.rs:44:41\n+  --> $DIR/bound-normalization-fail.rs:43:41\n    |\n LL |     fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output=T::Assoc> {\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found associated type"}, {"sha": "73766c31b93b60779f52797906257f384c9cd78c", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.nll.stderr?ref=f6c389472448257a91c2f6713061cd69025c766f", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait.rs:8:31\n+  --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait.rs:6:31\n    |\n LL |     fn f(self: Pin<&Self>) -> impl Clone { self }\n    |                    -          ^^^^^^^^^^ opaque type requires that `'1` must outlive `'static`"}, {"sha": "5054568b18970ca0331dfde31bed23c1de9c65ac", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.rs?ref=f6c389472448257a91c2f6713061cd69025c766f", "patch": "@@ -1,5 +1,3 @@\n-// compile-fail\n-\n use std::pin::Pin;\n \n struct Foo;"}, {"sha": "47ab6fff83878ed478758fc29402ef5df7eb0569", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr?ref=f6c389472448257a91c2f6713061cd69025c766f", "patch": "@@ -1,17 +1,17 @@\n error: cannot infer an appropriate lifetime\n-  --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait.rs:8:44\n+  --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait.rs:6:44\n    |\n LL |     fn f(self: Pin<&Self>) -> impl Clone { self }\n    |                               ----------   ^^^^ ...but this borrow...\n    |                               |\n    |                               this return type evaluates to the `'static` lifetime...\n    |\n-note: ...can't outlive the anonymous lifetime #1 defined on the method body at 8:5\n-  --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait.rs:8:5\n+note: ...can't outlive the anonymous lifetime #1 defined on the method body at 6:5\n+  --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait.rs:6:5\n    |\n LL |     fn f(self: Pin<&Self>) -> impl Clone { self }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: you can add a bound to the return type to make it last less than `'static` and match the anonymous lifetime #1 defined on the method body at 8:5\n+help: you can add a bound to the return type to make it last less than `'static` and match the anonymous lifetime #1 defined on the method body at 6:5\n    |\n LL |     fn f(self: Pin<&Self>) -> impl Clone + '_ { self }\n    |                               ^^^^^^^^^^^^^^^"}, {"sha": "1a0904fcbba6eba38173f865232bc996c2f78c7e", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.nll.stderr?ref=f6c389472448257a91c2f6713061cd69025c766f", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch.rs:8:46\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch.rs:6:46\n    |\n LL |     fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n    |                    -         -               ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n@@ -8,7 +8,7 @@ LL |     fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n    |                    let's call the lifetime of this reference `'2`\n \n error: lifetime may not live long enough\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch.rs:10:69\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch.rs:8:69\n    |\n LL |     fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n    |                    -          -                                     ^^^^^^^^^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n@@ -17,7 +17,7 @@ LL |     fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self,\n    |                    let's call the lifetime of this reference `'2`\n \n error: lifetime may not live long enough\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch.rs:15:58\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch.rs:13:58\n    |\n LL |     fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> &() { arg }\n    |            --  ---- has type `std::pin::Pin<&'1 Foo>`    ^^^ function was supposed to return data with lifetime `'1` but it is returning data with lifetime `'a`"}, {"sha": "8291e44080b37dc4993e1971a4ab8f5a38477b92", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.rs?ref=f6c389472448257a91c2f6713061cd69025c766f", "patch": "@@ -1,5 +1,3 @@\n-// compile-fail\n-\n use std::pin::Pin;\n \n struct Foo;"}, {"sha": "6bb7ad7cdc7c22ee3c59d69810a1d05d7946622d", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.stderr?ref=f6c389472448257a91c2f6713061cd69025c766f", "patch": "@@ -1,21 +1,21 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch.rs:8:46\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch.rs:6:46\n    |\n LL |     fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n    |                              ----     ----   ^ ...but data from `f` is returned here\n    |                              |\n    |                              this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch.rs:10:76\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch.rs:8:76\n    |\n LL |     fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n    |                               ----              -----------------          ^ ...but data from `f` is returned here\n    |                               |\n    |                               this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch.rs:15:58\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch.rs:13:58\n    |\n LL |     fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> &() { arg }\n    |                                         ------     ---   ^^^ ...but data from `arg` is returned here"}, {"sha": "fa4a309315b4776cb2a47f13fb73dd50a3aa7bd0", "filename": "src/test/ui/traits/reservation-impls/reservation-impl-coherence-conflict.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Ftraits%2Freservation-impls%2Freservation-impl-coherence-conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Ftraits%2Freservation-impls%2Freservation-impl-coherence-conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Freservation-impls%2Freservation-impl-coherence-conflict.rs?ref=f6c389472448257a91c2f6713061cd69025c766f", "patch": "@@ -1,5 +1,3 @@\n-// compile-fail\n-\n // check that reservation impls are accounted for in negative reasoning.\n \n #![feature(rustc_attrs)]"}, {"sha": "d76d3a91c8d3f9508246749d838a602f5b10abb0", "filename": "src/test/ui/traits/reservation-impls/reservation-impl-coherence-conflict.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Ftraits%2Freservation-impls%2Freservation-impl-coherence-conflict.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Ftraits%2Freservation-impls%2Freservation-impl-coherence-conflict.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Freservation-impls%2Freservation-impl-coherence-conflict.stderr?ref=f6c389472448257a91c2f6713061cd69025c766f", "patch": "@@ -1,5 +1,5 @@\n error[E0119]: conflicting implementations of trait `OtherTrait` for type `()`:\n-  --> $DIR/reservation-impl-coherence-conflict.rs:13:1\n+  --> $DIR/reservation-impl-coherence-conflict.rs:11:1\n    |\n LL | impl OtherTrait for () {}\n    | ---------------------- first implementation here"}, {"sha": "65a55d9e20936ac97ab59303a2eeef45cf11f43d", "filename": "src/test/ui/traits/reservation-impls/reservation-impl-no-use.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Ftraits%2Freservation-impls%2Freservation-impl-no-use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Ftraits%2Freservation-impls%2Freservation-impl-no-use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Freservation-impls%2Freservation-impl-no-use.rs?ref=f6c389472448257a91c2f6713061cd69025c766f", "patch": "@@ -1,5 +1,3 @@\n-// compile-fail\n-\n // check that reservation impls can't be used as normal impls in positive reasoning.\n \n #![feature(rustc_attrs)]"}, {"sha": "794faff8848fe6a2fd5efb4aed238b1e5ec14217", "filename": "src/test/ui/traits/reservation-impls/reservation-impl-no-use.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Ftraits%2Freservation-impls%2Freservation-impl-no-use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Ftraits%2Freservation-impls%2Freservation-impl-no-use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Freservation-impls%2Freservation-impl-no-use.stderr?ref=f6c389472448257a91c2f6713061cd69025c766f", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `(): MyTrait` is not satisfied\n-  --> $DIR/reservation-impl-no-use.rs:12:26\n+  --> $DIR/reservation-impl-no-use.rs:10:26\n    |\n LL | trait MyTrait { fn foo(&self); }\n    |                 -------------- required by `MyTrait::foo`"}, {"sha": "17771e976ef3b3d6ce36faf8c804966334324831", "filename": "src/test/ui/traits/wf-trait-object-maybe-bound.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Ftraits%2Fwf-trait-object-maybe-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Ftraits%2Fwf-trait-object-maybe-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fwf-trait-object-maybe-bound.rs?ref=f6c389472448257a91c2f6713061cd69025c766f", "patch": "@@ -1,5 +1,3 @@\n-// compile-fail\n-\n // Test that `dyn ... + ?Sized + ...` is okay (though `?Sized` has no effect in trait objects).\n \n trait Foo {}"}, {"sha": "4a570efcb5dbcd969532e9838809286ec7747925", "filename": "src/test/ui/traits/wf-trait-object-maybe-bound.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Ftraits%2Fwf-trait-object-maybe-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftest%2Fui%2Ftraits%2Fwf-trait-object-maybe-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fwf-trait-object-maybe-bound.stderr?ref=f6c389472448257a91c2f6713061cd69025c766f", "patch": "@@ -1,29 +1,29 @@\n error: `?Trait` is not permitted in trait object types\n-  --> $DIR/wf-trait-object-maybe-bound.rs:7:15\n+  --> $DIR/wf-trait-object-maybe-bound.rs:5:15\n    |\n LL | type _0 = dyn ?Sized + Foo;\n    |               ^^^^^^\n \n error: `?Trait` is not permitted in trait object types\n-  --> $DIR/wf-trait-object-maybe-bound.rs:10:21\n+  --> $DIR/wf-trait-object-maybe-bound.rs:8:21\n    |\n LL | type _1 = dyn Foo + ?Sized;\n    |                     ^^^^^^\n \n error: `?Trait` is not permitted in trait object types\n-  --> $DIR/wf-trait-object-maybe-bound.rs:13:21\n+  --> $DIR/wf-trait-object-maybe-bound.rs:11:21\n    |\n LL | type _2 = dyn Foo + ?Sized + ?Sized;\n    |                     ^^^^^^\n \n error: `?Trait` is not permitted in trait object types\n-  --> $DIR/wf-trait-object-maybe-bound.rs:13:30\n+  --> $DIR/wf-trait-object-maybe-bound.rs:11:30\n    |\n LL | type _2 = dyn Foo + ?Sized + ?Sized;\n    |                              ^^^^^^\n \n error: `?Trait` is not permitted in trait object types\n-  --> $DIR/wf-trait-object-maybe-bound.rs:17:15\n+  --> $DIR/wf-trait-object-maybe-bound.rs:15:15\n    |\n LL | type _3 = dyn ?Sized + Foo;\n    |               ^^^^^^"}, {"sha": "555e79d3e065c5e920023bad3d4fd1ac07a1aa50", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6c389472448257a91c2f6713061cd69025c766f/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=f6c389472448257a91c2f6713061cd69025c766f", "patch": "@@ -554,6 +554,9 @@ impl TestProps {\n                 panic!(\"`{}-fail` header is only supported in UI tests\", mode);\n             }\n         };\n+        if config.mode == Mode::Ui && config.parse_name_directive(ln, \"compile-fail\") {\n+            panic!(\"`compile-fail` header is useless in UI tests\");\n+        }\n         let fail_mode = if config.parse_name_directive(ln, \"check-fail\") {\n             check_ui(\"check\");\n             Some(FailMode::Check)"}]}