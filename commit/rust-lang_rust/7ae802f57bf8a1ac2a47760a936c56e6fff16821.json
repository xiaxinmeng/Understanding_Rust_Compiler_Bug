{"sha": "7ae802f57bf8a1ac2a47760a936c56e6fff16821", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhZTgwMmY1N2JmOGExYWMyYTQ3NzYwYTkzNmM1NmU2ZmZmMTY4MjE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-10-02T21:53:18Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-10-02T21:53:18Z"}, "message": "rollup merge of #17666 : eddyb/take-garbage-out\n\nConflicts:\n\tsrc/libcollections/lib.rs\n\tsrc/libcore/lib.rs\n\tsrc/librustdoc/lib.rs\n\tsrc/librustrt/lib.rs\n\tsrc/libserialize/lib.rs\n\tsrc/libstd/lib.rs\n\tsrc/test/run-pass/issue-8898.rs", "tree": {"sha": "a6063128be15d8bb988d61b4ce695eafd8fb1ec6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6063128be15d8bb988d61b4ce695eafd8fb1ec6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ae802f57bf8a1ac2a47760a936c56e6fff16821", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ae802f57bf8a1ac2a47760a936c56e6fff16821", "html_url": "https://github.com/rust-lang/rust/commit/7ae802f57bf8a1ac2a47760a936c56e6fff16821", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ae802f57bf8a1ac2a47760a936c56e6fff16821/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebe4da971aa4b2a9db597b682b96133f373dbec5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebe4da971aa4b2a9db597b682b96133f373dbec5", "html_url": "https://github.com/rust-lang/rust/commit/ebe4da971aa4b2a9db597b682b96133f373dbec5"}, {"sha": "58bea31ca0e11bf49439d33e1d21f11de7161567", "url": "https://api.github.com/repos/rust-lang/rust/commits/58bea31ca0e11bf49439d33e1d21f11de7161567", "html_url": "https://github.com/rust-lang/rust/commit/58bea31ca0e11bf49439d33e1d21f11de7161567"}], "stats": {"total": 5523, "additions": 435, "deletions": 5088}, "files": [{"sha": "dd9c687172247425a74dc68e6811d6c3764348b4", "filename": "src/doc/guide-pointers.md", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Fdoc%2Fguide-pointers.md", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Fdoc%2Fguide-pointers.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-pointers.md?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -632,19 +632,6 @@ This part is coming soon.\n \n This part is coming soon.\n \n-# Gc\n-\n-The `Gc<T>` type exists for historical reasons, and is [still used\n-internally](https://github.com/rust-lang/rust/issues/7929) by the compiler.\n-It is not even a 'real' garbage collected type at the moment.\n-\n-In the future, Rust may have a real garbage collected type, and so it\n-has not yet been removed for that reason.\n-\n-## Best practices\n-\n-There is currently no legitimate use case for the `Gc<T>` type.\n-\n # Raw Pointers\n \n This part is coming soon."}, {"sha": "578ff0edf144bef03fab520475352de5ac0c2862", "filename": "src/doc/guide-runtime.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Fdoc%2Fguide-runtime.md", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Fdoc%2Fguide-runtime.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-runtime.md?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -31,7 +31,6 @@ list):\n * Task synchronization\n * Task-local storage\n * Logging\n-* Local heaps (GC heaps)\n * Task unwinding\n \n ## What is the runtime accomplishing?"}, {"sha": "fe6664bd8480a68a93b8b44eac241cba65a0b106", "filename": "src/doc/guide-unsafe.md", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Fdoc%2Fguide-unsafe.md", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Fdoc%2Fguide-unsafe.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-unsafe.md?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -208,9 +208,7 @@ pub struct Unique<T> {\n // Implement methods for creating and using the values in the box.\n \n // NB: For simplicity and correctness, we require that T has kind Send\n-// (owned boxes relax this restriction, and can contain managed (GC) boxes).\n-// This is because, as implemented, the garbage collector would not know\n-// about any shared boxes stored in the malloc'd region of memory.\n+// (owned boxes relax this restriction).\n impl<T: Send> Unique<T> {\n     pub fn new(value: T) -> Unique<T> {\n         unsafe {"}, {"sha": "74efa5425bdd2e58de516f5f88c50df5ea6fca9d", "filename": "src/doc/reference.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -3381,7 +3381,7 @@ fn main() {\n \n ```\n \n-Patterns can also dereference pointers by using the `&`, `box` or `@` symbols,\n+Patterns can also dereference pointers by using the `&`, `box` symbols,\n as appropriate. For example, these two matches on `x: &int` are equivalent:\n \n ```"}, {"sha": "c31d746d8f2a76b11ed2fff06d729e7aa177da7a", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -92,7 +92,6 @@ pub use boxed as owned;\n \n pub mod heap;\n pub mod libc_heap;\n-pub mod util;\n \n // Primitive types using the heaps above\n "}, {"sha": "049bf4eb1b02d2103e7ef1baf4ac85483ce794c9", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -541,14 +541,6 @@ mod tests {\n         assert!(y.upgrade().is_none());\n     }\n \n-    #[test]\n-    fn gc_inside() {\n-        // see issue #11532\n-        use std::gc::GC;\n-        let a = Rc::new(RefCell::new(box(GC) 1i));\n-        assert!(a.try_borrow_mut().is_some());\n-    }\n-\n     #[test]\n     fn weak_self_cyclic() {\n         struct Cycle {"}, {"sha": "d5f0d25fb01f92a9e64fd85127ffd66ae2806e99", "filename": "src/liballoc/util.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Fliballoc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Fliballoc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Futil.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,30 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![doc(hidden)]\n-\n-use core::mem;\n-use core::raw;\n-\n-#[inline]\n-#[deprecated]\n-pub fn get_box_size(body_size: uint, body_align: uint) -> uint {\n-    let header_size = mem::size_of::<raw::GcBox<()>>();\n-    let total_size = align_to(header_size, body_align) + body_size;\n-    total_size\n-}\n-\n-// Rounds size to the next alignment. Alignment is required to be a power of\n-// two.\n-#[inline]\n-fn align_to(size: uint, align: uint) -> uint {\n-    assert!(align != 0);\n-    (size + align - 1) & !(align - 1)\n-}"}, {"sha": "64369855ef8a46f9b92a5c7d7394dc7c35756440", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -19,7 +19,7 @@\n        html_root_url = \"http://doc.rust-lang.org/master/\",\n        html_playground_url = \"http://play.rust-lang.org/\")]\n \n-#![feature(macro_rules, managed_boxes, default_type_params, phase, globs)]\n+#![feature(macro_rules, default_type_params, phase, globs)]\n #![feature(unsafe_destructor, import_shadowing)]\n #![no_std]\n "}, {"sha": "33f3a08020dfe83b16bc816ed61bd6e41352d091", "filename": "src/libcollections/ringbuf.rs", "status": "modified", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibcollections%2Fringbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibcollections%2Fringbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fringbuf.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -532,7 +532,6 @@ impl<T: fmt::Show> fmt::Show for RingBuf<T> {\n mod tests {\n     use std::fmt::Show;\n     use std::prelude::*;\n-    use std::gc::{GC, Gc};\n     use std::hash;\n     use test::Bencher;\n     use test;\n@@ -587,43 +586,6 @@ mod tests {\n         assert_eq!(*d.get(3), 4);\n     }\n \n-    #[test]\n-    #[allow(deprecated)]\n-    fn test_boxes() {\n-        let a: Gc<int> = box(GC) 5;\n-        let b: Gc<int> = box(GC) 72;\n-        let c: Gc<int> = box(GC) 64;\n-        let d: Gc<int> = box(GC) 175;\n-\n-        let mut deq = RingBuf::new();\n-        assert_eq!(deq.len(), 0);\n-        deq.push_front(a);\n-        deq.push_front(b);\n-        deq.push(c);\n-        assert_eq!(deq.len(), 3);\n-        deq.push(d);\n-        assert_eq!(deq.len(), 4);\n-        assert_eq!(deq.front(), Some(&b));\n-        assert_eq!(deq.back(), Some(&d));\n-        assert_eq!(deq.pop_front(), Some(b));\n-        assert_eq!(deq.pop(), Some(d));\n-        assert_eq!(deq.pop(), Some(c));\n-        assert_eq!(deq.pop(), Some(a));\n-        assert_eq!(deq.len(), 0);\n-        deq.push(c);\n-        assert_eq!(deq.len(), 1);\n-        deq.push_front(b);\n-        assert_eq!(deq.len(), 2);\n-        deq.push(d);\n-        assert_eq!(deq.len(), 3);\n-        deq.push_front(a);\n-        assert_eq!(deq.len(), 4);\n-        assert_eq!(*deq.get(0), a);\n-        assert_eq!(*deq.get(1), b);\n-        assert_eq!(*deq.get(2), c);\n-        assert_eq!(*deq.get(3), d);\n-    }\n-\n     #[cfg(test)]\n     fn test_parameterized<T:Clone + PartialEq + Show>(a: T, b: T, c: T, d: T) {\n         let mut deq = RingBuf::new();\n@@ -755,12 +717,6 @@ mod tests {\n         test_parameterized::<int>(5, 72, 64, 175);\n     }\n \n-    #[test]\n-    fn test_param_at_int() {\n-        test_parameterized::<Gc<int>>(box(GC) 5, box(GC) 72,\n-                                      box(GC) 64, box(GC) 175);\n-    }\n-\n     #[test]\n     fn test_param_taggy() {\n         test_parameterized::<Taggy>(One(1), Two(1, 2), Three(1, 2, 3), Two(17, 42));"}, {"sha": "93c6f5bed852fbd98b01d7a4e020e3709d8a83d2", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -57,7 +57,7 @@\n        html_playground_url = \"http://play.rust-lang.org/\")]\n \n #![no_std]\n-#![feature(globs, intrinsics, lang_items, macro_rules, managed_boxes, phase)]\n+#![feature(globs, intrinsics, lang_items, macro_rules, phase)]\n #![feature(simd, unsafe_destructor)]\n #![deny(missing_doc)]\n "}, {"sha": "a62e2ecdca0328d9e22b392b7dd7904acbdb986d", "filename": "src/libcore/raw.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibcore%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibcore%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fraw.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -20,15 +20,6 @@\n \n use mem;\n \n-/// The representation of `std::gc::Gc`.\n-pub struct GcBox<T> {\n-    pub ref_count: uint,\n-    pub drop_glue: fn(ptr: *mut u8),\n-    pub prev: *mut GcBox<T>,\n-    pub next: *mut GcBox<T>,\n-    pub data: T,\n-}\n-\n /// The representation of a Rust slice\n pub struct Slice<T> {\n     pub data: *const T,"}, {"sha": "3fe1180294446b33ab34428541f99f67e59b7b21", "filename": "src/libcoretest/iter.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibcoretest%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibcoretest%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fiter.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -528,9 +528,8 @@ fn test_rposition() {\n #[test]\n #[should_fail]\n fn test_rposition_fail() {\n-    use std::gc::GC;\n-    let v = [(box 0i, box(GC) 0i), (box 0i, box(GC) 0i),\n-             (box 0i, box(GC) 0i), (box 0i, box(GC) 0i)];\n+    let v = [(box 0i, box 0i), (box 0i, box 0i),\n+             (box 0i, box 0i), (box 0i, box 0i)];\n     let mut i = 0i;\n     v.iter().rposition(|_elt| {\n         if i == 2 {"}, {"sha": "21abfae8be9636d3a83e1f1a8b8c42befe0785b4", "filename": "src/libdebug/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibdebug%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibdebug%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibdebug%2Flib.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -25,7 +25,7 @@\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/master/\")]\n #![experimental]\n-#![feature(managed_boxes, macro_rules)]\n+#![feature(macro_rules)]\n #![allow(experimental)]\n \n pub mod fmt;"}, {"sha": "1e771a2b40a2354caa9d4c1d0cac12b3676b4235", "filename": "src/libdebug/reflect.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibdebug%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibdebug%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibdebug%2Freflect.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -18,7 +18,6 @@ Runtime type reflection\n \n use std::intrinsics::{Disr, Opaque, TyDesc, TyVisitor};\n use std::mem;\n-use std::gc::Gc;\n \n /**\n  * Trait for visitor that wishes to reflect on data.\n@@ -194,9 +193,9 @@ impl<V:TyVisitor + MovePtr> TyVisitor for MovePtrAdaptor<V> {\n     }\n \n     fn visit_box(&mut self, mtbl: uint, inner: *const TyDesc) -> bool {\n-        self.align_to::<Gc<u8>>();\n+        self.align_to::<Box<u8>>();\n         if ! self.inner.visit_box(mtbl, inner) { return false; }\n-        self.bump_past::<Gc<u8>>();\n+        self.bump_past::<Box<u8>>();\n         true\n     }\n "}, {"sha": "e27816c81653972aec579f2c68c438e20089cf26", "filename": "src/libdebug/repr.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibdebug%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibdebug%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibdebug%2Frepr.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -274,13 +274,9 @@ impl<'a> TyVisitor for ReprVisitor<'a> {\n         self.get::<&str>(|this, s| this.write_escaped_slice(*s))\n     }\n \n-    fn visit_box(&mut self, mtbl: uint, inner: *const TyDesc) -> bool {\n-        try!(self, self.writer.write(\"box(GC) \".as_bytes()));\n-        self.write_mut_qualifier(mtbl);\n-        self.get::<&raw::GcBox<()>>(|this, b| {\n-            let p = &b.data as *const () as *const u8;\n-            this.visit_ptr_inner(p, inner)\n-        })\n+    fn visit_box(&mut self, _mtbl: uint, _inner: *const TyDesc) -> bool {\n+        try!(self, self.writer.write(\"box(GC) ???\".as_bytes()));\n+        true\n     }\n \n     fn visit_uniq(&mut self, _mtbl: uint, inner: *const TyDesc) -> bool {\n@@ -576,7 +572,6 @@ fn test_repr() {\n     use std::io::stdio::println;\n     use std::char::is_alphabetic;\n     use std::mem::swap;\n-    use std::gc::GC;\n \n     fn exact_test<T>(t: &T, e:&str) {\n         let mut m = io::MemWriter::new();\n@@ -591,7 +586,6 @@ fn test_repr() {\n     exact_test(&1.234f64, \"1.234f64\");\n     exact_test(&(\"hello\"), \"\\\"hello\\\"\");\n \n-    exact_test(&(box(GC) 10i), \"box(GC) 10\");\n     exact_test(&(box 10i), \"box 10\");\n     exact_test(&(&10i), \"&10\");\n     let mut x = 10i;\n@@ -605,8 +599,6 @@ fn test_repr() {\n                \"&[\\\"hi\\\", \\\"there\\\"]\");\n     exact_test(&(P{a:10, b:1.234}),\n                \"repr::P{a: 10, b: 1.234f64}\");\n-    exact_test(&(box(GC) P{a:10, b:1.234}),\n-               \"box(GC) repr::P{a: 10, b: 1.234f64}\");\n     exact_test(&(box P{a:10, b:1.234}),\n                \"box repr::P{a: 10, b: 1.234f64}\");\n "}, {"sha": "388373807d856aba5fbcfefdb325e2fad4d33ad4", "filename": "src/libfourcc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibfourcc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibfourcc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfourcc%2Flib.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -50,7 +50,7 @@ fn main() {\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/master/\")]\n \n-#![feature(plugin_registrar, managed_boxes)]\n+#![feature(plugin_registrar)]\n \n extern crate syntax;\n extern crate rustc;"}, {"sha": "2fcc3b9691a2593b92e5ea022945d1a229913608", "filename": "src/libhexfloat/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibhexfloat%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibhexfloat%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibhexfloat%2Flib.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -46,7 +46,7 @@ fn main() {\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/master/\")]\n-#![feature(plugin_registrar, managed_boxes)]\n+#![feature(plugin_registrar)]\n \n extern crate syntax;\n extern crate rustc;"}, {"sha": "f42631af0e799ac7c2680f41fb1c523ea44d77e1", "filename": "src/libregex_macros/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibregex_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibregex_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex_macros%2Flib.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -19,7 +19,7 @@\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/master/\")]\n \n-#![feature(plugin_registrar, managed_boxes, quote)]\n+#![feature(plugin_registrar, quote)]\n \n extern crate regex;\n extern crate syntax;"}, {"sha": "213e8b44813a05caff2dc3aacb2b9434cd1642e3", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -412,26 +412,16 @@ impl LintPass for CTypes {\n     }\n }\n \n-declare_lint!(MANAGED_HEAP_MEMORY, Allow,\n-              \"use of managed (@ type) heap memory\")\n-\n declare_lint!(OWNED_HEAP_MEMORY, Allow,\n               \"use of owned (Box type) heap memory\")\n \n-declare_lint!(HEAP_MEMORY, Allow,\n-              \"use of any (Box type or @ type) heap memory\")\n-\n pub struct HeapMemory;\n \n impl HeapMemory {\n     fn check_heap_type(&self, cx: &Context, span: Span, ty: ty::t) {\n-        let mut n_box = 0i;\n         let mut n_uniq = 0i;\n         ty::fold_ty(cx.tcx, ty, |t| {\n             match ty::get(t).sty {\n-                ty::ty_box(_) => {\n-                    n_box += 1;\n-                }\n                 ty::ty_uniq(_) |\n                 ty::ty_closure(box ty::ClosureTy {\n                     store: ty::UniqTraitStore,\n@@ -449,21 +439,13 @@ impl HeapMemory {\n             let s = ty_to_string(cx.tcx, ty);\n             let m = format!(\"type uses owned (Box type) pointers: {}\", s);\n             cx.span_lint(OWNED_HEAP_MEMORY, span, m.as_slice());\n-            cx.span_lint(HEAP_MEMORY, span, m.as_slice());\n-        }\n-\n-        if n_box > 0 {\n-            let s = ty_to_string(cx.tcx, ty);\n-            let m = format!(\"type uses managed (@ type) pointers: {}\", s);\n-            cx.span_lint(MANAGED_HEAP_MEMORY, span, m.as_slice());\n-            cx.span_lint(HEAP_MEMORY, span, m.as_slice());\n         }\n     }\n }\n \n impl LintPass for HeapMemory {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(MANAGED_HEAP_MEMORY, OWNED_HEAP_MEMORY, HEAP_MEMORY)\n+        lint_array!(OWNED_HEAP_MEMORY)\n     }\n \n     fn check_item(&mut self, cx: &Context, it: &ast::Item) {\n@@ -1289,7 +1271,7 @@ impl LintPass for UnnecessaryAllocation {\n \n     fn check_expr(&mut self, cx: &Context, e: &ast::Expr) {\n         match e.node {\n-            ast::ExprUnary(ast::UnUniq, _) | ast::ExprUnary(ast::UnBox, _) => (),\n+            ast::ExprUnary(ast::UnUniq, _) => (),\n             _ => return\n         }\n "}, {"sha": "c079663bc7a7de0f163231a2af17ec395bbb8b56", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -397,7 +397,6 @@ fn parse_ty(st: &mut PState, conv: conv_did) -> ty::t {\n         assert_eq!(next(st), '|');\n         return ty::mk_param(st.tcx, space, index, did);\n       }\n-      '@' => return ty::mk_box(st.tcx, parse_ty(st, |x,y| conv(x,y))),\n       '~' => return ty::mk_uniq(st.tcx, parse_ty(st, |x,y| conv(x,y))),\n       '*' => return ty::mk_ptr(st.tcx, parse_mt(st, |x,y| conv(x,y))),\n       '&' => {"}, {"sha": "e3d8d0e53757dc0aaa81d7287cbc228c3713c9f2", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -244,7 +244,6 @@ fn enc_sty(w: &mut SeekableMemWriter, cx: &ctxt, st: &ty::sty) {\n             for t in ts.iter() { enc_ty(w, cx, *t); }\n             mywrite!(w, \"]\");\n         }\n-        ty::ty_box(typ) => { mywrite!(w, \"@\"); enc_ty(w, cx, typ); }\n         ty::ty_uniq(typ) => { mywrite!(w, \"~\"); enc_ty(w, cx, typ); }\n         ty::ty_ptr(mt) => { mywrite!(w, \"*\"); enc_mt(w, cx, mt); }\n         ty::ty_rptr(r, mt) => {"}, {"sha": "e114eb88705bf72a88b2b5184a8117739ae6be7f", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -815,11 +815,6 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n                         return;\n                     }\n \n-                    mc::cat_deref(_, _, mc::GcPtr) => {\n-                        assert_eq!(cmt.mutbl, mc::McImmutable);\n-                        return;\n-                    }\n-\n                     mc::cat_rvalue(..) |\n                     mc::cat_static_item |\n                     mc::cat_deref(_, _, mc::UnsafePtr(..)) |"}, {"sha": "882b6bc842644d760c168a0ac8b6216c3ccf4d1b", "filename": "src/librustc/middle/borrowck/doc.rs", "status": "modified", "additions": 18, "deletions": 92, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fdoc.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -74,7 +74,7 @@ to an `LV` of `(*a).f`.\n Here is the formal grammar for the types we'll consider:\n \n ```text\n-TY = () | S<'LT...> | Box<TY> | & 'LT MQ TY | @ MQ TY\n+TY = () | S<'LT...> | Box<TY> | & 'LT MQ TY\n MQ = mut | imm | const\n ```\n \n@@ -263,9 +263,7 @@ compatible with the aliasability of `LV`. The goal is to prevent\n `&mut` borrows of aliasability data.\n \n 3. `LIFETIME(LV, LT, MQ)`: The lifetime of the borrow does not exceed\n-the lifetime of the value being borrowed. This pass is also\n-responsible for inserting root annotations to keep managed values\n-alive.\n+the lifetime of the value being borrowed.\n \n 4. `RESTRICTIONS(LV, LT, ACTIONS) = RS`: This pass checks and computes the\n restrictions to maintain memory safety. These are the restrictions\n@@ -316,17 +314,13 @@ MUTABILITY(*LV, MQ)                 // M-Deref-Unique\n \n ### Checking mutability of immutable pointer types\n \n-Immutable pointer types like `&T` and `@T` can only\n+Immutable pointer types like `&T` can only\n be borrowed if MQ is immutable or const:\n \n ```text\n MUTABILITY(*LV, MQ)                // M-Deref-Borrowed-Imm\n   TYPE(LV) = &Ty\n   MQ == imm | const\n-\n-MUTABILITY(*LV, MQ)                // M-Deref-Managed-Imm\n-  TYPE(LV) = @Ty\n-  MQ == imm | const\n ```\n \n ### Checking mutability of mutable pointer types\n@@ -390,11 +384,10 @@ ALIASABLE(*LV, MQ)                 // M-Deref-Borrowed-Mut\n ## Checking lifetime\n \n These rules aim to ensure that no data is borrowed for a scope that exceeds\n-its lifetime. In addition, these rules manage the rooting of `@` values.\n-These two computations wind up being intimately related. Formally, we define\n-a predicate `LIFETIME(LV, LT, MQ)`, which states that \"the lvalue `LV` can be\n-safely borrowed for the lifetime `LT` with mutability `MQ`\". The Rust\n-code corresponding to this predicate is the module\n+its lifetime. These two computations wind up being intimately related.\n+Formally, we define a predicate `LIFETIME(LV, LT, MQ)`, which states that\n+\"the lvalue `LV` can be safely borrowed for the lifetime `LT` with mutability\n+`MQ`\". The Rust code corresponding to this predicate is the module\n `middle::borrowck::gather_loans::lifetime`.\n \n ### The Scope function\n@@ -423,14 +416,6 @@ the pointer itself `LV` goes out of scope:\n   SCOPE(*LV) = SCOPE(LV) if LV has type Box<T>\n ```\n \n-The scope of a managed referent is also the scope of the pointer.  This\n-is a conservative approximation, since there may be other aliases for\n-that same managed box that would cause it to live longer:\n-\n-```text\n-  SCOPE(*LV) = SCOPE(LV) if LV has type @T\n-```\n-\n The scope of a borrowed referent is the scope associated with the\n pointer.  This is a conservative approximation, since the data that\n the pointer points at may actually live longer:\n@@ -477,59 +462,6 @@ LIFETIME(*LV, LT, MQ)               // L-Deref-Borrowed\n   LT <= LT'\n ```\n \n-### Checking lifetime for derefs of managed, immutable pointers\n-\n-Managed pointers are valid so long as the data within them is\n-*rooted*. There are two ways that this can be achieved. The first is\n-when the user guarantees such a root will exist. For this to be true,\n-three conditions must be met:\n-\n-```text\n-LIFETIME(*LV, LT, MQ)               // L-Deref-Managed-Imm-User-Root\n-  TYPE(LV) = @Ty\n-  LT <= SCOPE(LV)                   // (1)\n-  LV is immutable                   // (2)\n-  LV is not moved or not movable    // (3)\n-```\n-\n-Condition (1) guarantees that the managed box will be rooted for at\n-least the lifetime `LT` of the borrow, presuming that no mutation or\n-moves occur. Conditions (2) and (3) then serve to guarantee that the\n-value is not mutated or moved. Note that lvalues are either\n-(ultimately) owned by a local variable, in which case we can check\n-whether that local variable is ever moved in its scope, or they are\n-owned by the referent of an (immutable, due to condition 2) managed or\n-references, in which case moves are not permitted because the\n-location is aliasable.\n-\n-If the conditions of `L-Deref-Managed-Imm-User-Root` are not met, then\n-there is a second alternative. The compiler can attempt to root the\n-managed pointer itself. This permits great flexibility, because the\n-location `LV` where the managed pointer is found does not matter, but\n-there are some limitations. The lifetime of the borrow can only extend\n-to the innermost enclosing loop or function body. This guarantees that\n-the compiler never requires an unbounded amount of stack space to\n-perform the rooting; if this condition were violated, the compiler\n-might have to accumulate a list of rooted objects, for example if the\n-borrow occurred inside the body of a loop but the scope of the borrow\n-extended outside the loop. More formally, the requirement is that\n-there is no path starting from the borrow that leads back to the\n-borrow without crossing the exit from the scope `LT`.\n-\n-The rule for compiler rooting is as follows:\n-\n-```text\n-LIFETIME(*LV, LT, MQ)               // L-Deref-Managed-Imm-Compiler-Root\n-  TYPE(LV) = @Ty\n-  LT <= innermost enclosing loop/func\n-  ROOT LV at *LV for LT\n-```\n-\n-Here I have written `ROOT LV at *LV FOR LT` to indicate that the code\n-makes a note in a side-table that the box `LV` must be rooted into the\n-stack when `*LV` is evaluated, and that this root can be released when\n-the scope `LT` exits.\n-\n ## Computing the restrictions\n \n The final rules govern the computation of *restrictions*, meaning that\n@@ -599,22 +531,18 @@ RESTRICTIONS(*LV, LT, ACTIONS) = RS, (*LV, ACTIONS)    // R-Deref-Send-Pointer\n   RESTRICTIONS(LV, LT, ACTIONS|MUTATE|CLAIM) = RS\n ```\n \n-### Restrictions for loans of immutable managed/borrowed referents\n+### Restrictions for loans of immutable borrowed referents\n \n-Immutable managed/borrowed referents are freely aliasable, meaning that\n+Immutable borrowed referents are freely aliasable, meaning that\n the compiler does not prevent you from copying the pointer.  This\n implies that issuing restrictions is useless. We might prevent the\n user from acting on `*LV` itself, but there could be another path\n `*LV1` that refers to the exact same memory, and we would not be\n-restricting that path. Therefore, the rule for `&Ty` and `@Ty`\n-pointers always returns an empty set of restrictions, and it only\n-permits restricting `MUTATE` and `CLAIM` actions:\n+restricting that path. Therefore, the rule for `&Ty` pointers\n+always returns an empty set of restrictions, and it only permits\n+restricting `MUTATE` and `CLAIM` actions:\n \n ```text\n-RESTRICTIONS(*LV, LT, ACTIONS) = []                    // R-Deref-Imm-Managed\n-  TYPE(LV) = @Ty\n-  ACTIONS subset of [MUTATE, CLAIM]\n-\n RESTRICTIONS(*LV, LT, ACTIONS) = []                    // R-Deref-Imm-Borrowed\n   TYPE(LV) = &LT' Ty\n   LT <= LT'                                            // (1)\n@@ -623,8 +551,8 @@ RESTRICTIONS(*LV, LT, ACTIONS) = []                    // R-Deref-Imm-Borrowed\n \n The reason that we can restrict `MUTATE` and `CLAIM` actions even\n without a restrictions list is that it is never legal to mutate nor to\n-borrow mutably the contents of a `&Ty` or `@Ty` pointer. In other\n-words, those restrictions are already inherent in the type.\n+borrow mutably the contents of a `&Ty` pointer. In other words,\n+those restrictions are already inherent in the type.\n \n Clause (1) in the rule for `&Ty` deserves mention. Here I\n specify that the lifetime of the loan must be less than the lifetime\n@@ -729,13 +657,12 @@ are affine.)\n Freeze pointers are read-only. There may be `&mut` or `&` aliases, and\n we can not prevent *anything* but moves in that case. So the\n `RESTRICTIONS` function is only defined if `ACTIONS` is the empty set.\n-Because moves from a `&const` or `@const` lvalue are never legal, it\n-is not necessary to add any restrictions at all to the final\n-result.\n+Because moves from a `&const` lvalue are never legal, it is not\n+necessary to add any restrictions at all to the final result.\n \n ```text\n     RESTRICTIONS(*LV, LT, []) = []                         // R-Deref-Freeze-Borrowed\n-      TYPE(LV) = &const Ty or @const Ty\n+      TYPE(LV) = &const Ty\n ```\n \n ### Restrictions for loans of mutable borrowed referents\n@@ -957,8 +884,7 @@ moves and the declaration of uninitialized variables. For each of\n these points, we create a bit in the dataflow set. Assignments to a\n variable `x` or path `a.b.c` kill the move/uninitialization bits for\n those paths and any subpaths (e.g., `x`, `x.y`, `a.b.c`, `*a.b.c`).\n-The bits are also killed when the root variables (`x`, `a`) go out of\n-scope. Bits are unioned when two control-flow paths join. Thus, the\n+Bits are unioned when two control-flow paths join. Thus, the\n presence of a bit indicates that the move may have occurred without an\n intervening assignment to the same memory. At each use of a variable,\n we examine the bits in scope, and check that none of them are"}, {"sha": "1ae512a244c0f298e73e9fa0a6a7f6c76d1b6da1", "filename": "src/librustc/middle/borrowck/gather_loans/gather_moves.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fgather_moves.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -132,7 +132,6 @@ fn check_and_get_illegal_move_origin(bccx: &BorrowckCtxt,\n     match cmt.cat {\n         mc::cat_deref(_, _, mc::BorrowedPtr(..)) |\n         mc::cat_deref(_, _, mc::Implicit(..)) |\n-        mc::cat_deref(_, _, mc::GcPtr) |\n         mc::cat_deref(_, _, mc::UnsafePtr(..)) |\n         mc::cat_upvar(..) | mc::cat_static_item |\n         mc::cat_copied_upvar(mc::CopiedUpvar { onceness: ast::Many, .. }) => {"}, {"sha": "8ec58fe0eeedc7f359dd6310309ec6e49214f4f2", "filename": "src/librustc/middle/borrowck/gather_loans/lifetime.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Flifetime.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -82,8 +82,7 @@ impl<'a, 'tcx> GuaranteeLifetimeContext<'a, 'tcx> {\n \n             mc::cat_downcast(ref base) |\n             mc::cat_deref(ref base, _, mc::OwnedPtr) |     // L-Deref-Send\n-            mc::cat_interior(ref base, _) |                // L-Field\n-            mc::cat_deref(ref base, _, mc::GcPtr) => {\n+            mc::cat_interior(ref base, _) => {             // L-Field\n                 self.check(base, discr_scope)\n             }\n \n@@ -185,7 +184,6 @@ impl<'a, 'tcx> GuaranteeLifetimeContext<'a, 'tcx> {\n             }\n             mc::cat_downcast(ref cmt) |\n             mc::cat_deref(ref cmt, _, mc::OwnedPtr) |\n-            mc::cat_deref(ref cmt, _, mc::GcPtr) |\n             mc::cat_interior(ref cmt, _) |\n             mc::cat_discr(ref cmt, _) => {\n                 self.scope(cmt)"}, {"sha": "1b18d07f5905370b3db2d9d274382ce4ada561a8", "filename": "src/librustc/middle/borrowck/gather_loans/move_error.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmove_error.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -114,7 +114,6 @@ fn report_cannot_move_out_of(bccx: &BorrowckCtxt, move_from: mc::cmt) {\n     match move_from.cat {\n         mc::cat_deref(_, _, mc::BorrowedPtr(..)) |\n         mc::cat_deref(_, _, mc::Implicit(..)) |\n-        mc::cat_deref(_, _, mc::GcPtr) |\n         mc::cat_deref(_, _, mc::UnsafePtr(..)) |\n         mc::cat_upvar(..) | mc::cat_static_item |\n         mc::cat_copied_upvar(mc::CopiedUpvar { onceness: ast::Many, .. }) => {"}, {"sha": "067a73fcc9b7ea8e66a5bc9016629519e893d01d", "filename": "src/librustc/middle/borrowck/gather_loans/restrictions.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -101,16 +101,13 @@ impl<'a, 'tcx> RestrictionsContext<'a, 'tcx> {\n                 self.extend(result, cmt.mutbl, LpInterior(i))\n             }\n \n-            mc::cat_deref(cmt_base, _, pk @ mc::OwnedPtr) |\n-            mc::cat_deref(cmt_base, _, pk @ mc::GcPtr) => {\n+            mc::cat_deref(cmt_base, _, pk @ mc::OwnedPtr) => {\n                 // R-Deref-Send-Pointer\n                 //\n                 // When we borrow the interior of an owned pointer, we\n                 // cannot permit the base to be mutated, because that\n                 // would cause the unique pointer to be freed.\n                 //\n-                // For a managed pointer, the rules are basically the\n-                // same, because this could be the last ref.\n                 // Eventually we should make these non-special and\n                 // just rely on Deref<T> implementation.\n                 let result = self.restrict(cmt_base);"}, {"sha": "234afc7ae7a834a2891763ac4cabeeff1c914e6c", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -730,11 +730,6 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                     span,\n                     format!(\"{} in a static location\", prefix).as_slice());\n             }\n-            mc::AliasableManaged => {\n-                self.tcx.sess.span_err(\n-                    span,\n-                    format!(\"{} in a `Gc` pointer\", prefix).as_slice());\n-            }\n             mc::AliasableBorrowed => {\n                 self.tcx.sess.span_err(\n                     span,"}, {"sha": "5b6b0799235d0f4d77bc1b67c87d68e589073481", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -100,7 +100,7 @@ fn check_expr(v: &mut CheckCrateVisitor, e: &Expr) {\n     if v.in_const {\n         match e.node {\n           ExprUnary(UnDeref, _) => { }\n-          ExprUnary(UnBox, _) | ExprUnary(UnUniq, _) => {\n+          ExprUnary(UnUniq, _) => {\n             span_err!(v.tcx.sess, e.span, E0010, \"cannot do allocations in constant expressions\");\n             return;\n           }"}, {"sha": "74330174c5efdfe7696a4232cf6b31226d1dc27f", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -440,11 +440,6 @@ fn construct_witness(cx: &MatchCheckCtxt, ctor: &Constructor,\n             }\n         }\n \n-        ty::ty_box(_) => {\n-            assert_eq!(pats_len, 1);\n-            PatBox(pats.nth(0).unwrap())\n-        }\n-\n         ty::ty_vec(_, Some(len)) => {\n             assert_eq!(pats_len, len);\n             PatVec(pats.collect(), None, vec![])\n@@ -681,7 +676,7 @@ fn pat_constructors(cx: &MatchCheckCtxt, p: &Pat,\n pub fn constructor_arity(cx: &MatchCheckCtxt, ctor: &Constructor, ty: ty::t) -> uint {\n     match ty::get(ty).sty {\n         ty::ty_tup(ref fs) => fs.len(),\n-        ty::ty_box(_) | ty::ty_uniq(_) => 1u,\n+        ty::ty_uniq(_) => 1u,\n         ty::ty_rptr(_, ty::mt { ty: ty, .. }) => match ty::get(ty).sty {\n             ty::ty_vec(_, None) => match *ctor {\n                 Slice(length) => length,"}, {"sha": "64e4d7ff28425120113ca3e6db41b9be63187ac3", "filename": "src/librustc/middle/check_static.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Fcheck_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Fcheck_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_static.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -115,10 +115,6 @@ impl<'a, 'tcx, 'v> Visitor<'v> for CheckStaticVisitor<'a, 'tcx> {\n                 span_err!(self.tcx.sess, e.span, E0020,\n                     \"static items are not allowed to have mutable slices\");\n             },\n-            ast::ExprUnary(ast::UnBox, _) => {\n-                span_err!(self.tcx.sess, e.span, E0021,\n-                    \"static items are not allowed to have managed pointers\");\n-            }\n             ast::ExprBox(..) |\n             ast::ExprUnary(ast::UnUniq, _) => {\n                 span_err!(self.tcx.sess, e.span, E0022,"}, {"sha": "de291595cccfba2d01d37270f57bd6a7bc84edfa", "filename": "src/librustc/middle/intrinsicck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -28,8 +28,8 @@ fn type_size_is_affected_by_type_parameters(tcx: &ty::ctxt, typ: ty::t)\n     let mut result = false;\n     ty::maybe_walk_ty(typ, |typ| {\n         match ty::get(typ).sty {\n-            ty::ty_box(_) | ty::ty_uniq(_) | ty::ty_ptr(_) |\n-            ty::ty_rptr(..) | ty::ty_bare_fn(..) | ty::ty_closure(..) => {\n+            ty::ty_uniq(_) | ty::ty_ptr(_) | ty::ty_rptr(..) |\n+            ty::ty_bare_fn(..) | ty::ty_closure(..) => {\n                 false\n             }\n             ty::ty_param(_) => {"}, {"sha": "3c9ebd86b941e9fa5892fef66d0f2a9737e1695b", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -279,8 +279,6 @@ lets_do_this! {\n \n     ExchangeMallocFnLangItem,        \"exchange_malloc\",         exchange_malloc_fn;\n     ExchangeFreeFnLangItem,          \"exchange_free\",           exchange_free_fn;\n-    MallocFnLangItem,                \"malloc\",                  malloc_fn;\n-    FreeFnLangItem,                  \"free\",                    free_fn;\n     StrDupUniqFnLangItem,            \"strdup_uniq\",             strdup_uniq_fn;\n \n     StartFnLangItem,                 \"start\",                   start_fn;\n@@ -293,9 +291,7 @@ lets_do_this! {\n \n     EhPersonalityLangItem,           \"eh_personality\",          eh_personality;\n \n-    ManagedHeapLangItem,             \"managed_heap\",            managed_heap;\n     ExchangeHeapLangItem,            \"exchange_heap\",           exchange_heap;\n-    GcLangItem,                      \"gc\",                      gc;\n     OwnedBoxLangItem,                \"owned_box\",               owned_box;\n \n     CovariantTypeItem,               \"covariant_type\",          covariant_type;"}, {"sha": "25105232b33ed1a8fc472ce6a63989e1c594b9e7", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -104,7 +104,6 @@ pub struct CopiedUpvar {\n #[deriving(Clone, PartialEq, Eq, Hash)]\n pub enum PointerKind {\n     OwnedPtr,\n-    GcPtr,\n     BorrowedPtr(ty::BorrowKind, ty::Region),\n     Implicit(ty::BorrowKind, ty::Region),     // Implicit deref of a borrowed ptr.\n     UnsafePtr(ast::Mutability)\n@@ -191,10 +190,6 @@ pub fn opt_deref_kind(t: ty::t) -> Option<deref_kind> {\n             Some(deref_ptr(BorrowedPtr(ty::ImmBorrow, r)))\n         }\n \n-        ty::ty_box(..) => {\n-            Some(deref_ptr(GcPtr))\n-        }\n-\n         ty::ty_ptr(ref mt) => {\n             Some(deref_ptr(UnsafePtr(mt.mutbl)))\n         }\n@@ -302,9 +297,6 @@ impl MutabilityCategory {\n             BorrowedPtr(borrow_kind, _) | Implicit(borrow_kind, _) => {\n                 MutabilityCategory::from_borrow_kind(borrow_kind)\n             }\n-            GcPtr => {\n-                McImmutable\n-            }\n             UnsafePtr(m) => {\n                 MutabilityCategory::from_mutbl(m)\n             }\n@@ -1199,7 +1191,7 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n                           Implicit(..) => {\n                             \"dereference (dereference is implicit, due to indexing)\".to_string()\n                           }\n-                          OwnedPtr | GcPtr => format!(\"dereference of `{}`\", ptr_sigil(pk)),\n+                          OwnedPtr => format!(\"dereference of `{}`\", ptr_sigil(pk)),\n                           _ => format!(\"dereference of `{}`-pointer\", ptr_sigil(pk))\n                       }\n                   }\n@@ -1236,7 +1228,6 @@ pub enum InteriorSafety {\n }\n \n pub enum AliasableReason {\n-    AliasableManaged,\n     AliasableBorrowed,\n     AliasableOther,\n     AliasableStatic(InteriorSafety),\n@@ -1255,7 +1246,6 @@ impl cmt_ {\n             cat_copied_upvar(..) |\n             cat_local(..) |\n             cat_deref(_, _, UnsafePtr(..)) |\n-            cat_deref(_, _, GcPtr(..)) |\n             cat_deref(_, _, BorrowedPtr(..)) |\n             cat_deref(_, _, Implicit(..)) |\n             cat_upvar(..) => {\n@@ -1319,10 +1309,6 @@ impl cmt_ {\n                 }\n             }\n \n-            cat_deref(_, _, GcPtr) => {\n-                Some(AliasableManaged)\n-            }\n-\n             cat_deref(_, _, BorrowedPtr(ty::ImmBorrow, _)) |\n             cat_deref(_, _, Implicit(ty::ImmBorrow, _)) => {\n                 Some(AliasableBorrowed)\n@@ -1370,7 +1356,6 @@ impl Repr for categorization {\n pub fn ptr_sigil(ptr: PointerKind) -> &'static str {\n     match ptr {\n         OwnedPtr => \"Box\",\n-        GcPtr => \"Gc\",\n         BorrowedPtr(ty::ImmBorrow, _) |\n         Implicit(ty::ImmBorrow, _) => \"&\",\n         BorrowedPtr(ty::MutBorrow, _) |"}, {"sha": "080f9ff5bc7ab22e1ab2ed79d69d40e71bef2f50", "filename": "src/librustc/middle/traits/coherence.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -104,11 +104,6 @@ pub fn ty_is_local(tcx: &ty::ctxt,\n             krate == Some(ast::LOCAL_CRATE) || ty_is_local(tcx, t)\n         }\n \n-        ty::ty_box(t) => {\n-            let krate = tcx.lang_items.gc().map(|d| d.krate);\n-            krate == Some(ast::LOCAL_CRATE) || ty_is_local(tcx, t)\n-        }\n-\n         ty::ty_vec(t, _) |\n         ty::ty_ptr(ty::mt { ty: t, .. }) |\n         ty::ty_rptr(_, ty::mt { ty: t, .. }) => {"}, {"sha": "b86fabccf93de222f7ab68c0bfb97283fccea77d", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -713,23 +713,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 ok(self, Always)\n             }\n \n-            ty::ty_box(_) => {\n-                match bound {\n-                    ty::BoundSync |\n-                    ty::BoundSend |\n-                    ty::BoundCopy => {\n-                        // Managed data is not copyable, sendable, nor\n-                        // synchronized, regardless of referent.\n-                        ok(self, Never)\n-                    }\n-\n-                    ty::BoundSized => {\n-                        // But it is sized, regardless of referent.\n-                        ok(self, Always)\n-                    }\n-                }\n-            }\n-\n             ty::ty_uniq(referent_ty) => {  // Box<T>\n                 match bound {\n                     ty::BoundCopy => {"}, {"sha": "506b12de084678f77e1bf5af7a7613b06d910d3d", "filename": "src/librustc/middle/trans/adt.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -321,9 +321,6 @@ impl Case {\n                     _ => return Some(ThinPointer(i))\n                 },\n \n-                // Gc<T> is just a pointer\n-                ty::ty_box(..) => return Some(ThinPointer(i)),\n-\n                 // Functions are just pointers\n                 ty::ty_bare_fn(..) => return Some(ThinPointer(i)),\n "}, {"sha": "f65827753aa20da5afac614634d015a0228ad1f5", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -397,36 +397,6 @@ pub fn malloc_raw_dyn_proc<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, t: ty::t) -> Resu\n     Result::new(bcx, llbox)\n }\n \n-\n-pub fn malloc_raw_dyn_managed<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n-                                          t: ty::t,\n-                                          alloc_fn: LangItem,\n-                                          size: ValueRef)\n-                                          -> Result<'blk, 'tcx> {\n-    let _icx = push_ctxt(\"malloc_raw_dyn_managed\");\n-    let ccx = bcx.ccx();\n-\n-    let langcall = require_alloc_fn(bcx, t, alloc_fn);\n-\n-    // Grab the TypeRef type of box_ptr_ty.\n-    let box_ptr_ty = ty::mk_box(bcx.tcx(), t);\n-    let llty = type_of(ccx, box_ptr_ty);\n-    let llalign = C_uint(ccx, type_of::align_of(ccx, box_ptr_ty) as uint);\n-\n-    // Allocate space:\n-    let drop_glue = glue::get_drop_glue(ccx, t);\n-    let r = callee::trans_lang_call(\n-        bcx,\n-        langcall,\n-        [\n-            PointerCast(bcx, drop_glue, Type::glue_fn(ccx, Type::i8p(ccx)).ptr_to()),\n-            size,\n-            llalign\n-        ],\n-        None);\n-    Result::new(r.bcx, PointerCast(r.bcx, r.val, llty))\n-}\n-\n // Type descriptor and type glue stuff\n \n pub fn get_tydesc(ccx: &CrateContext, t: ty::t) -> Rc<tydesc_info> {"}, {"sha": "20fd0b0eb3d8f66728528969806f107bb1fc0e50", "filename": "src/librustc/middle/trans/cleanup.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcleanup.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -960,7 +960,6 @@ impl Cleanup for DropValue {\n }\n \n pub enum Heap {\n-    HeapManaged,\n     HeapExchange\n }\n \n@@ -986,9 +985,6 @@ impl Cleanup for FreeValue {\n         apply_debug_loc(bcx.fcx, debug_loc);\n \n         match self.heap {\n-            HeapManaged => {\n-                glue::trans_free(bcx, self.ptr)\n-            }\n             HeapExchange => {\n                 glue::trans_exchange_free_ty(bcx, self.ptr, self.content_ty)\n             }\n@@ -1019,9 +1015,6 @@ impl Cleanup for FreeSlice {\n         apply_debug_loc(bcx.fcx, debug_loc);\n \n         match self.heap {\n-            HeapManaged => {\n-                glue::trans_free(bcx, self.ptr)\n-            }\n             HeapExchange => {\n                 glue::trans_exchange_free_dyn(bcx, self.ptr, self.size, self.align)\n             }"}, {"sha": "7daee22e6146168a8bbef37904a1fc3d21f34fac", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -71,7 +71,7 @@ pub fn type_is_immediate(ccx: &CrateContext, ty: ty::t) -> bool {\n     use middle::trans::type_of::sizing_type_of;\n \n     let tcx = ccx.tcx();\n-    let simple = ty::type_is_scalar(ty) || ty::type_is_boxed(ty) ||\n+    let simple = ty::type_is_scalar(ty) ||\n         ty::type_is_unique(ty) || ty::type_is_region_ptr(ty) ||\n         type_is_newtype_immediate(ccx, ty) || ty::type_is_bot(ty) ||\n         ty::type_is_simd(tcx, ty);"}, {"sha": "c8356ccd2f05fbd2ebd7a79282656323b21dad51", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -421,7 +421,7 @@ fn const_expr_unadjusted(cx: &CrateContext, e: &ast::Expr,\n             let ty = ty::expr_ty(cx.tcx(), &**e);\n             let is_float = ty::type_is_fp(ty);\n             return (match u {\n-              ast::UnBox | ast::UnUniq | ast::UnDeref => {\n+              ast::UnUniq | ast::UnDeref => {\n                 let (dv, _dt) = const_deref(cx, te, ty, true);\n                 dv\n               }"}, {"sha": "260bde0f07f5d55eea35a4ad550275d6b15889a4", "filename": "src/librustc/middle/trans/datum.rs", "status": "modified", "additions": 17, "deletions": 27, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -20,7 +20,6 @@ use middle::trans::common::*;\n use middle::trans::cleanup;\n use middle::trans::cleanup::CleanupMethods;\n use middle::trans::expr;\n-use middle::trans::glue;\n use middle::trans::tvec;\n use middle::trans::type_of;\n use middle::ty;\n@@ -240,14 +239,9 @@ impl KindOps for Lvalue {\n          */\n \n         if ty::type_needs_drop(bcx.tcx(), ty) {\n-            if ty::type_moves_by_default(bcx.tcx(), ty) {\n-                // cancel cleanup of affine values by zeroing out\n-                let () = zero_mem(bcx, val, ty);\n-                bcx\n-            } else {\n-                // incr. refcount for @T or newtype'd @T\n-                glue::take_ty(bcx, val, ty)\n-            }\n+            // cancel cleanup of affine values by zeroing out\n+            let () = zero_mem(bcx, val, ty);\n+            bcx\n         } else {\n             bcx\n         }\n@@ -567,15 +561,15 @@ impl<K:KindOps> Datum<K> {\n          * is moved).\n          */\n \n-        self.shallow_copy(bcx, dst);\n+        self.shallow_copy_raw(bcx, dst);\n \n         self.kind.post_store(bcx, self.val, self.ty)\n     }\n \n-    fn shallow_copy<'blk, 'tcx>(&self,\n-                                bcx: Block<'blk, 'tcx>,\n-                                dst: ValueRef)\n-                                -> Block<'blk, 'tcx> {\n+    fn shallow_copy_raw<'blk, 'tcx>(&self,\n+                                    bcx: Block<'blk, 'tcx>,\n+                                    dst: ValueRef)\n+                                    -> Block<'blk, 'tcx> {\n         /*!\n          * Helper function that performs a shallow copy of this value\n          * into `dst`, which should be a pointer to a memory location\n@@ -584,10 +578,9 @@ impl<K:KindOps> Datum<K> {\n          *\n          * This function is private to datums because it leaves memory\n          * in an unstable state, where the source value has been\n-         * copied but not zeroed. Public methods are `store_to` (if\n-         * you no longer need the source value) or\n-         * `shallow_copy_and_take` (if you wish the source value to\n-         * remain valid).\n+         * copied but not zeroed. Public methods are `store_to`\n+         * (if you no longer need the source value) or `shallow_copy`\n+         * (if you wish the source value to remain valid).\n          */\n \n         let _icx = push_ctxt(\"copy_to_no_check\");\n@@ -605,22 +598,19 @@ impl<K:KindOps> Datum<K> {\n         return bcx;\n     }\n \n-    pub fn shallow_copy_and_take<'blk, 'tcx>(&self,\n-                                             bcx: Block<'blk, 'tcx>,\n-                                             dst: ValueRef)\n-                                             -> Block<'blk, 'tcx> {\n+    pub fn shallow_copy<'blk, 'tcx>(&self,\n+                                    bcx: Block<'blk, 'tcx>,\n+                                    dst: ValueRef)\n+                                    -> Block<'blk, 'tcx> {\n         /*!\n-         * Copies the value into a new location and runs any necessary\n-         * take glue on the new location. This function always\n+         * Copies the value into a new location. This function always\n          * preserves the existing datum as a valid value. Therefore,\n          * it does not consume `self` and, also, cannot be applied to\n          * affine values (since they must never be duplicated).\n          */\n \n         assert!(!ty::type_moves_by_default(bcx.tcx(), self.ty));\n-        let mut bcx = bcx;\n-        bcx = self.shallow_copy(bcx, dst);\n-        glue::take_ty(bcx, dst, self.ty)\n+        self.shallow_copy_raw(bcx, dst)\n     }\n \n     #[allow(dead_code)] // useful for debugging"}, {"sha": "8920994fd9585df1c3c0866917bd42f64ea49ead", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 125, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -373,12 +373,6 @@ impl TypeMap {\n                     unique_type_id.push_str(component_type_id.as_slice());\n                 }\n             },\n-            ty::ty_box(inner_type) => {\n-                unique_type_id.push_char('@');\n-                let inner_type_id = self.get_unique_type_id_of_type(cx, inner_type);\n-                let inner_type_id = self.get_unique_type_id_as_string(inner_type_id);\n-                unique_type_id.push_str(inner_type_id.as_slice());\n-            },\n             ty::ty_uniq(inner_type) => {\n                 unique_type_id.push_char('~');\n                 let inner_type_id = self.get_unique_type_id_of_type(cx, inner_type);\n@@ -596,18 +590,6 @@ impl TypeMap {\n         let interner_key = self.unique_id_interner.intern(Rc::new(enum_variant_type_id));\n         UniqueTypeId(interner_key)\n     }\n-\n-    fn get_unique_type_id_of_gc_box(&mut self,\n-                                    cx: &CrateContext,\n-                                    element_type: ty::t)\n-                                 -> UniqueTypeId {\n-        let element_type_id = self.get_unique_type_id_of_type(cx, element_type);\n-        let gc_box_type_id = format!(\"{{GC_BOX<{}>}}\",\n-                                     self.get_unique_type_id_as_string(element_type_id)\n-                                         .as_slice());\n-        let interner_key = self.unique_id_interner.intern(Rc::new(gc_box_type_id));\n-        UniqueTypeId(interner_key)\n-    }\n }\n \n // Returns from the enclosing function if the type metadata with the given\n@@ -2646,105 +2628,6 @@ fn create_struct_stub(cx: &CrateContext,\n     return metadata_stub;\n }\n \n-fn at_box_metadata(cx: &CrateContext,\n-                   at_pointer_type: ty::t,\n-                   content_type: ty::t,\n-                   unique_type_id: UniqueTypeId)\n-                -> MetadataCreationResult {\n-    let content_type_metadata = type_metadata(cx, content_type, codemap::DUMMY_SP);\n-\n-    return_if_metadata_created_in_meantime!(cx, unique_type_id);\n-\n-    let content_type_name = compute_debuginfo_type_name(cx, content_type, true);\n-    let content_type_name = content_type_name.as_slice();\n-    let content_llvm_type = type_of::type_of(cx, content_type);\n-\n-    let box_type_name = format!(\"GcBox<{}>\", content_type_name);\n-    let box_llvm_type = Type::at_box(cx, content_llvm_type);\n-    let member_llvm_types = box_llvm_type.field_types();\n-    assert!(box_layout_is_correct(cx,\n-                                  member_llvm_types.as_slice(),\n-                                  content_llvm_type));\n-\n-    let int_type = ty::mk_int();\n-    let nil_pointer_type = ty::mk_nil_ptr(cx.tcx());\n-    let nil_pointer_type_metadata = type_metadata(cx,\n-                                                  nil_pointer_type,\n-                                                  codemap::DUMMY_SP);\n-    let member_descriptions = [\n-        MemberDescription {\n-            name: \"refcnt\".to_string(),\n-            llvm_type: *member_llvm_types.get(0),\n-            type_metadata: type_metadata(cx, int_type, codemap::DUMMY_SP),\n-            offset: ComputedMemberOffset,\n-            flags: FLAGS_ARTIFICAL,\n-        },\n-        MemberDescription {\n-            name: \"drop_glue\".to_string(),\n-            llvm_type: *member_llvm_types.get(1),\n-            type_metadata: nil_pointer_type_metadata,\n-            offset: ComputedMemberOffset,\n-            flags: FLAGS_ARTIFICAL,\n-        },\n-        MemberDescription {\n-            name: \"prev\".to_string(),\n-            llvm_type: *member_llvm_types.get(2),\n-            type_metadata: nil_pointer_type_metadata,\n-            offset: ComputedMemberOffset,\n-            flags: FLAGS_ARTIFICAL,\n-        },\n-        MemberDescription {\n-            name: \"next\".to_string(),\n-            llvm_type: *member_llvm_types.get(3),\n-            type_metadata: nil_pointer_type_metadata,\n-            offset: ComputedMemberOffset,\n-            flags: FLAGS_ARTIFICAL,\n-        },\n-        MemberDescription {\n-            name: \"val\".to_string(),\n-            llvm_type: *member_llvm_types.get(4),\n-            type_metadata: content_type_metadata,\n-            offset: ComputedMemberOffset,\n-            flags: FLAGS_ARTIFICAL,\n-        }\n-    ];\n-\n-    let gc_box_unique_id = debug_context(cx).type_map\n-                                            .borrow_mut()\n-                                            .get_unique_type_id_of_gc_box(cx, content_type);\n-\n-    let gc_box_metadata = composite_type_metadata(\n-        cx,\n-        box_llvm_type,\n-        box_type_name.as_slice(),\n-        gc_box_unique_id,\n-        member_descriptions,\n-        UNKNOWN_SCOPE_METADATA,\n-        UNKNOWN_FILE_METADATA,\n-        codemap::DUMMY_SP);\n-\n-    let gc_pointer_metadata = pointer_type_metadata(cx,\n-                                                    at_pointer_type,\n-                                                    gc_box_metadata);\n-\n-    return MetadataCreationResult::new(gc_pointer_metadata, false);\n-\n-    // Unfortunately, we cannot assert anything but the correct types here---and\n-    // not whether the 'next' and 'prev' pointers are in the correct order.\n-    fn box_layout_is_correct(cx: &CrateContext,\n-                             member_llvm_types: &[Type],\n-                             content_llvm_type: Type)\n-                          -> bool {\n-        member_llvm_types.len() == 5 &&\n-        member_llvm_types[0] == cx.int_type() &&\n-        member_llvm_types[1] == Type::generic_glue_fn(cx).ptr_to() &&\n-        member_llvm_types[2] == Type::i8(cx).ptr_to() &&\n-        member_llvm_types[3] == Type::i8(cx).ptr_to() &&\n-        member_llvm_types[4] == content_llvm_type\n-    }\n-}\n-\n-\n fn fixed_vec_metadata(cx: &CrateContext,\n                       unique_type_id: UniqueTypeId,\n                       element_type: ty::t,\n@@ -2968,9 +2851,6 @@ fn type_metadata(cx: &CrateContext,\n         ty::ty_enum(def_id, _) => {\n             prepare_enum_metadata(cx, t, def_id, unique_type_id, usage_site_span).finalize(cx)\n         }\n-        ty::ty_box(pointee_type) => {\n-            at_box_metadata(cx, t, pointee_type, unique_type_id)\n-        }\n         ty::ty_vec(typ, Some(len)) => {\n             fixed_vec_metadata(cx, unique_type_id, typ, len, usage_site_span)\n         }\n@@ -3702,7 +3582,7 @@ fn populate_scope_map(cx: &CrateContext,\n             ast::ExprInlineAsm(ast::InlineAsm { inputs: ref inputs,\n                                                 outputs: ref outputs,\n                                                 .. }) => {\n-                // inputs, outputs: ~[(String, Gc<expr>)]\n+                // inputs, outputs: Vec<(String, P<Expr>)>\n                 for &(_, ref exp) in inputs.iter() {\n                     walk_expr(cx, &**exp, scope_stack, scope_map);\n                 }\n@@ -3777,10 +3657,6 @@ fn push_debuginfo_type_name(cx: &CrateContext,\n             push_debuginfo_type_name(cx, inner_type, true, output);\n             output.push_char('>');\n         },\n-        ty::ty_box(inner_type) => {\n-            output.push_char('@');\n-            push_debuginfo_type_name(cx, inner_type, true, output);\n-        },\n         ty::ty_ptr(ty::mt { ty: inner_type, mutbl } ) => {\n             output.push_char('*');\n             match mutbl {"}, {"sha": "d6df0d88a769ffde6ea60bfef002905f3bcf2920", "filename": "src/librustc/middle/trans/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdoc.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -65,7 +65,7 @@ Some of the datum methods, however, are designed to work only on\n copyable values such as ints or pointers. Those methods may borrow the\n datum (`&self`) rather than consume it, but they always include\n assertions on the type of the value represented to check that this\n-makes sense. An example is `shallow_copy_and_take()`, which duplicates\n+makes sense. An example is `shallow_copy()`, which duplicates\n a datum value.\n \n Translating an expression always yields a `Datum<Expr>` result, but"}, {"sha": "cd4ad85d0942ca4ec26e95af368b34bb77bb8c40", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 2, "deletions": 42, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -38,7 +38,6 @@ use llvm;\n use llvm::{ValueRef};\n use metadata::csearch;\n use middle::def;\n-use middle::lang_items::MallocFnLangItem;\n use middle::mem_categorization::Typer;\n use middle::subst;\n use middle::subst::Subst;\n@@ -624,18 +623,15 @@ fn trans_datum_unadjusted<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             DatumBlock::new(bcx, scratch.to_expr_datum())\n         }\n         ast::ExprBox(_, ref contents) => {\n-            // Special case for `Box<T>` and `Gc<T>`\n+            // Special case for `Box<T>`\n             let box_ty = expr_ty(bcx, expr);\n             let contents_ty = expr_ty(bcx, &**contents);\n             match ty::get(box_ty).sty {\n                 ty::ty_uniq(..) => {\n                     trans_uniq_expr(bcx, box_ty, &**contents, contents_ty)\n                 }\n-                ty::ty_box(..) => {\n-                    trans_managed_expr(bcx, box_ty, &**contents, contents_ty)\n-                }\n                 _ => bcx.sess().span_bug(expr.span,\n-                                         \"expected unique or managed box\")\n+                                         \"expected unique box\")\n             }\n \n         }\n@@ -1533,9 +1529,6 @@ fn trans_unary<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             };\n             immediate_rvalue_bcx(bcx, llneg, un_ty).to_expr_datumblock()\n         }\n-        ast::UnBox => {\n-            trans_managed_expr(bcx, un_ty, sub_expr, expr_ty(bcx, sub_expr))\n-        }\n         ast::UnUniq => {\n             trans_uniq_expr(bcx, un_ty, sub_expr, expr_ty(bcx, sub_expr))\n         }\n@@ -1575,26 +1568,6 @@ fn trans_uniq_expr<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     immediate_rvalue_bcx(bcx, val, box_ty).to_expr_datumblock()\n }\n \n-fn trans_managed_expr<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n-                                  box_ty: ty::t,\n-                                  contents: &ast::Expr,\n-                                  contents_ty: ty::t)\n-                                  -> DatumBlock<'blk, 'tcx, Expr> {\n-    let _icx = push_ctxt(\"trans_managed_expr\");\n-    let fcx = bcx.fcx;\n-    let ty = type_of::type_of(bcx.ccx(), contents_ty);\n-    let Result {bcx, val: bx} = malloc_raw_dyn_managed(bcx, contents_ty, MallocFnLangItem,\n-                                                        llsize_of(bcx.ccx(), ty));\n-    let body = GEPi(bcx, bx, [0u, abi::box_field_body]);\n-\n-    let custom_cleanup_scope = fcx.push_custom_cleanup_scope();\n-    fcx.schedule_free_value(cleanup::CustomScope(custom_cleanup_scope),\n-                            bx, cleanup::HeapManaged, contents_ty);\n-    let bcx = trans_into(bcx, contents, SaveIn(body));\n-    fcx.pop_custom_cleanup_scope(custom_cleanup_scope);\n-    immediate_rvalue_bcx(bcx, bx, box_ty).to_expr_datumblock()\n-}\n-\n fn trans_addr_of<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                              expr: &ast::Expr,\n                              subexpr: &ast::Expr)\n@@ -1927,10 +1900,6 @@ pub fn cast_type_kind(tcx: &ty::ctxt, t: ty::t) -> cast_kind {\n }\n \n fn cast_is_noop(t_in: ty::t, t_out: ty::t) -> bool {\n-    if ty::type_is_boxed(t_in) || ty::type_is_boxed(t_out) {\n-        return false;\n-    }\n-\n     match (ty::deref(t_in, true), ty::deref(t_out, true)) {\n         (Some(ty::mt{ ty: t_in, .. }), Some(ty::mt{ ty: t_out, .. })) => {\n             t_in == t_out\n@@ -2163,15 +2132,6 @@ fn deref_once<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             }\n         }\n \n-        ty::ty_box(content_ty) => {\n-            let datum = unpack_datum!(\n-                bcx, datum.to_lvalue_datum(bcx, \"deref\", expr.id));\n-            let llptrref = datum.to_llref();\n-            let llptr = Load(bcx, llptrref);\n-            let llbody = GEPi(bcx, llptr, [0u, abi::box_field_body]);\n-            DatumBlock::new(bcx, Datum::new(llbody, content_ty, LvalueExpr))\n-        }\n-\n         ty::ty_ptr(ty::mt { ty: content_ty, .. }) |\n         ty::ty_rptr(_, ty::mt { ty: content_ty, .. }) => {\n             if ty::type_is_sized(bcx.tcx(), content_ty) {"}, {"sha": "33a46c0ba36af729bf352683754d9034b7c53158", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 1, "deletions": 69, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -17,7 +17,7 @@ use back::abi;\n use back::link::*;\n use llvm::{ValueRef, True, get_param};\n use llvm;\n-use middle::lang_items::{FreeFnLangItem, ExchangeFreeFnLangItem};\n+use middle::lang_items::ExchangeFreeFnLangItem;\n use middle::subst;\n use middle::subst::Subst;\n use middle::trans::adt;\n@@ -46,15 +46,6 @@ use libc::c_uint;\n use syntax::ast;\n use syntax::parse::token;\n \n-pub fn trans_free<'blk, 'tcx>(cx: Block<'blk, 'tcx>, v: ValueRef)\n-                              -> Block<'blk, 'tcx> {\n-    let _icx = push_ctxt(\"trans_free\");\n-    callee::trans_lang_call(cx,\n-        langcall(cx, None, \"\", FreeFnLangItem),\n-        [PointerCast(cx, v, Type::i8p(cx.ccx()))],\n-        Some(expr::Ignore)).bcx\n-}\n-\n pub fn trans_exchange_free_dyn<'blk, 'tcx>(cx: Block<'blk, 'tcx>, v: ValueRef,\n                                            size: ValueRef, align: ValueRef)\n                                            -> Block<'blk, 'tcx> {\n@@ -87,20 +78,6 @@ pub fn trans_exchange_free_ty<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, ptr: ValueRef,\n     }\n }\n \n-pub fn take_ty<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, v: ValueRef, t: ty::t)\n-                           -> Block<'blk, 'tcx> {\n-    // NB: v is an *alias* of type t here, not a direct value.\n-    let _icx = push_ctxt(\"take_ty\");\n-    match ty::get(t).sty {\n-        ty::ty_box(_) => incr_refcnt_of_boxed(bcx, v),\n-        _ if ty::type_is_structural(t)\n-          && ty::type_needs_drop(bcx.tcx(), t) => {\n-            iter_structural_ty(bcx, v, t, take_ty)\n-        }\n-        _ => bcx\n-    }\n-}\n-\n pub fn get_drop_glue_type(ccx: &CrateContext, t: ty::t) -> ty::t {\n     let tcx = ccx.tcx();\n     // Even if there is no dtor for t, there might be one deeper down and we\n@@ -446,9 +423,6 @@ fn make_drop_glue<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, v0: ValueRef, t: ty::t)\n     // NB: v0 is an *alias* of type t here, not a direct value.\n     let _icx = push_ctxt(\"make_drop_glue\");\n     match ty::get(t).sty {\n-        ty::ty_box(body_ty) => {\n-            decr_refcnt_maybe_free(bcx, v0, body_ty)\n-        }\n         ty::ty_uniq(content_ty) => {\n             match ty::get(content_ty).sty {\n                 ty::ty_vec(ty, None) => {\n@@ -568,48 +542,6 @@ fn make_drop_glue<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, v0: ValueRef, t: ty::t)\n     }\n }\n \n-fn decr_refcnt_maybe_free<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n-                                      box_ptr_ptr: ValueRef,\n-                                      t: ty::t) -> Block<'blk, 'tcx> {\n-    let _icx = push_ctxt(\"decr_refcnt_maybe_free\");\n-    let fcx = bcx.fcx;\n-    let ccx = bcx.ccx();\n-\n-    let decr_bcx = fcx.new_temp_block(\"decr\");\n-    let free_bcx = fcx.new_temp_block(\"free\");\n-    let next_bcx = fcx.new_temp_block(\"next\");\n-\n-    let box_ptr = Load(bcx, box_ptr_ptr);\n-    let llnotnull = IsNotNull(bcx, box_ptr);\n-    CondBr(bcx, llnotnull, decr_bcx.llbb, next_bcx.llbb);\n-\n-    let rc_ptr = GEPi(decr_bcx, box_ptr, [0u, abi::box_field_refcnt]);\n-    let rc = Sub(decr_bcx, Load(decr_bcx, rc_ptr), C_int(ccx, 1));\n-    Store(decr_bcx, rc, rc_ptr);\n-    CondBr(decr_bcx, IsNull(decr_bcx, rc), free_bcx.llbb, next_bcx.llbb);\n-\n-    let v = Load(free_bcx, box_ptr_ptr);\n-    let body = GEPi(free_bcx, v, [0u, abi::box_field_body]);\n-    let free_bcx = drop_ty(free_bcx, body, t, None);\n-    let free_bcx = trans_free(free_bcx, v);\n-    Br(free_bcx, next_bcx.llbb);\n-\n-    next_bcx\n-}\n-\n-fn incr_refcnt_of_boxed<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n-                                    box_ptr_ptr: ValueRef) -> Block<'blk, 'tcx> {\n-    let _icx = push_ctxt(\"incr_refcnt_of_boxed\");\n-    let ccx = bcx.ccx();\n-    let box_ptr = Load(bcx, box_ptr_ptr);\n-    let rc_ptr = GEPi(bcx, box_ptr, [0u, abi::box_field_refcnt]);\n-    let rc = Load(bcx, rc_ptr);\n-    let rc = Add(bcx, rc, C_int(ccx, 1));\n-    Store(bcx, rc, rc_ptr);\n-    bcx\n-}\n-\n-\n // Generates the declaration for (but doesn't emit) a type descriptor.\n pub fn declare_tydesc(ccx: &CrateContext, t: ty::t) -> tydesc_info {\n     // If emit_tydescs already ran, then we shouldn't be creating any new"}, {"sha": "f004bea23c7a02d276b420db4d45926b92447b94", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -169,14 +169,6 @@ impl<'a, 'blk, 'tcx> Reflector<'a, 'blk, 'tcx> {\n               extra.push(self.c_tydesc(ty));\n               self.visit(\"evec_fixed\", extra.as_slice())\n           }\n-          // Should remove mt from box and uniq.\n-          ty::ty_box(typ) => {\n-              let extra = self.c_mt(&ty::mt {\n-                  ty: typ,\n-                  mutbl: ast::MutImmutable,\n-              });\n-              self.visit(\"box\", extra.as_slice())\n-          }\n           ty::ty_ptr(ref mt) => {\n               match ty::get(mt.ty).sty {\n                   ty::ty_vec(ty, None) => {"}, {"sha": "fac0ef2014ec66501499dd3c895630c6a0ad8134", "filename": "src/librustc/middle/trans/tvec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -325,7 +325,7 @@ pub fn write_content<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n \n                     let bcx = iter_vec_loop(bcx, lldest, vt,\n                                   C_uint(bcx.ccx(), count), |set_bcx, lleltptr, _| {\n-                        elem.shallow_copy_and_take(set_bcx, lleltptr)\n+                        elem.shallow_copy(set_bcx, lleltptr)\n                     });\n \n                     elem.add_clean_if_rvalue(bcx, element.id);"}, {"sha": "d41cd7ed9e5d4aa2b141f9c45069ce85be196cf4", "filename": "src/librustc/middle/trans/type_of.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -174,7 +174,6 @@ pub fn sizing_type_of(cx: &CrateContext, t: ty::t) -> Type {\n         ty::ty_uint(t) => Type::uint_from_ty(cx, t),\n         ty::ty_float(t) => Type::float_from_ty(cx, t),\n \n-        ty::ty_box(..) => Type::i8p(cx),\n         ty::ty_uniq(ty) | ty::ty_rptr(_, ty::mt{ty, ..}) | ty::ty_ptr(ty::mt{ty, ..}) => {\n             if ty::type_is_sized(cx.tcx(), ty) {\n                 Type::i8p(cx)\n@@ -299,9 +298,6 @@ pub fn type_of(cx: &CrateContext, t: ty::t) -> Type {\n         let name = llvm_type_name(cx, an_unboxed_closure, did, []);\n         adt::incomplete_type_of(cx, &*repr, name.as_slice())\n       }\n-      ty::ty_box(typ) => {\n-          Type::at_box(cx, type_of(cx, typ)).ptr_to()\n-      }\n \n       ty::ty_uniq(ty) | ty::ty_rptr(_, ty::mt{ty, ..}) | ty::ty_ptr(ty::mt{ty, ..}) => {\n           match ty::get(ty).sty {"}, {"sha": "edbdf427c0bc6166d8135f1717c142cb61671dd7", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 16, "deletions": 58, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -940,7 +940,6 @@ pub enum sty {\n     /// the `ast_ty_to_ty_cache`. This is probably true for `ty_struct` as\n     /// well.`\n     ty_enum(DefId, Substs),\n-    ty_box(t),\n     ty_uniq(t),\n     ty_str,\n     ty_vec(t, Option<uint>), // Second field is length.\n@@ -1621,7 +1620,7 @@ pub fn mk_t(cx: &ctxt, st: sty) -> t {\n           flags |= sflags(substs);\n           flags |= flags_for_bounds(bounds);\n       }\n-      &ty_box(tt) | &ty_uniq(tt) | &ty_vec(tt, _) | &ty_open(tt) => {\n+      &ty_uniq(tt) | &ty_vec(tt, _) | &ty_open(tt) => {\n         flags |= get(tt).flags\n       }\n       &ty_ptr(ref m) => {\n@@ -1776,8 +1775,6 @@ pub fn mk_enum(cx: &ctxt, did: ast::DefId, substs: Substs) -> t {\n     mk_t(cx, ty_enum(did, substs))\n }\n \n-pub fn mk_box(cx: &ctxt, ty: t) -> t { mk_t(cx, ty_box(ty)) }\n-\n pub fn mk_uniq(cx: &ctxt, ty: t) -> t { mk_t(cx, ty_uniq(ty)) }\n \n pub fn mk_ptr(cx: &ctxt, tm: mt) -> t { mk_t(cx, ty_ptr(tm)) }\n@@ -1901,7 +1898,7 @@ pub fn maybe_walk_ty(ty: t, f: |t| -> bool) {\n     match get(ty).sty {\n         ty_nil | ty_bot | ty_bool | ty_char | ty_int(_) | ty_uint(_) | ty_float(_) |\n         ty_str | ty_infer(_) | ty_param(_) | ty_unboxed_closure(_, _) | ty_err => {}\n-        ty_box(ty) | ty_uniq(ty) | ty_vec(ty, _) | ty_open(ty) => maybe_walk_ty(ty, f),\n+        ty_uniq(ty) | ty_vec(ty, _) | ty_open(ty) => maybe_walk_ty(ty, f),\n         ty_ptr(ref tm) | ty_rptr(_, ref tm) => {\n             maybe_walk_ty(tm.ty, f);\n         }\n@@ -2014,7 +2011,7 @@ pub fn type_is_vec(ty: t) -> bool {\n     match get(ty).sty {\n         ty_vec(..) => true,\n         ty_ptr(mt{ty: t, ..}) | ty_rptr(_, mt{ty: t, ..}) |\n-        ty_box(t) | ty_uniq(t) => match get(t).sty {\n+        ty_uniq(t) => match get(t).sty {\n             ty_vec(_, None) => true,\n             _ => false\n         },\n@@ -2067,13 +2064,6 @@ pub fn simd_size(cx: &ctxt, ty: t) -> uint {\n     }\n }\n \n-pub fn type_is_boxed(ty: t) -> bool {\n-    match get(ty).sty {\n-      ty_box(_) => true,\n-      _ => false\n-    }\n-}\n-\n pub fn type_is_region_ptr(ty: t) -> bool {\n     match get(ty).sty {\n         ty_rptr(..) => true,\n@@ -2144,29 +2134,22 @@ pub fn type_needs_unwind_cleanup(cx: &ctxt, ty: t) -> bool {\n \n     let mut tycache = HashSet::new();\n     let needs_unwind_cleanup =\n-        type_needs_unwind_cleanup_(cx, ty, &mut tycache, false);\n+        type_needs_unwind_cleanup_(cx, ty, &mut tycache);\n     cx.needs_unwind_cleanup_cache.borrow_mut().insert(ty, needs_unwind_cleanup);\n-    return needs_unwind_cleanup;\n+    needs_unwind_cleanup\n }\n \n fn type_needs_unwind_cleanup_(cx: &ctxt, ty: t,\n-                              tycache: &mut HashSet<t>,\n-                              encountered_box: bool) -> bool {\n+                              tycache: &mut HashSet<t>) -> bool {\n \n     // Prevent infinite recursion\n     if !tycache.insert(ty) {\n         return false;\n     }\n \n-    let mut encountered_box = encountered_box;\n     let mut needs_unwind_cleanup = false;\n     maybe_walk_ty(ty, |ty| {\n-        let old_encountered_box = encountered_box;\n         let result = match get(ty).sty {\n-          ty_box(_) => {\n-            encountered_box = true;\n-            true\n-          }\n           ty_nil | ty_bot | ty_bool | ty_int(_) | ty_uint(_) | ty_float(_) |\n           ty_tup(_) | ty_ptr(_) => {\n             true\n@@ -2176,33 +2159,21 @@ fn type_needs_unwind_cleanup_(cx: &ctxt, ty: t,\n                 for aty in v.args.iter() {\n                     let t = aty.subst(cx, substs);\n                     needs_unwind_cleanup |=\n-                        type_needs_unwind_cleanup_(cx, t, tycache,\n-                                                   encountered_box);\n+                        type_needs_unwind_cleanup_(cx, t, tycache);\n                 }\n             }\n             !needs_unwind_cleanup\n           }\n-          ty_uniq(_) => {\n-            // Once we're inside a box, the annihilator will find\n-            // it and destroy it.\n-            if !encountered_box {\n-                needs_unwind_cleanup = true;\n-                false\n-            } else {\n-                true\n-            }\n-          }\n           _ => {\n             needs_unwind_cleanup = true;\n             false\n           }\n         };\n \n-        encountered_box = old_encountered_box;\n         result\n     });\n \n-    return needs_unwind_cleanup;\n+    needs_unwind_cleanup\n }\n \n /**\n@@ -2460,10 +2431,6 @@ pub fn type_contents(cx: &ctxt, ty: t) -> TypeContents {\n                 closure_contents(cx, &**c) | TC::ReachesFfiUnsafe\n             }\n \n-            ty_box(typ) => {\n-                tc_ty(cx, typ, cache).managed_pointer() | TC::ReachesFfiUnsafe\n-            }\n-\n             ty_uniq(typ) => {\n                 TC::ReachesFfiUnsafe | match get(typ).sty {\n                     ty_str => TC::OwnsOwned,\n@@ -2782,7 +2749,7 @@ pub fn is_instantiable(cx: &ctxt, r_ty: t) -> bool {\n             ty_vec(_, None) => {\n                 false\n             }\n-            ty_box(typ) | ty_uniq(typ) | ty_open(typ) => {\n+            ty_uniq(typ) | ty_open(typ) => {\n                 type_requires(cx, seen, r_ty, typ)\n             }\n             ty_rptr(_, ref mt) => {\n@@ -3092,7 +3059,7 @@ pub fn type_is_c_like_enum(cx: &ctxt, ty: t) -> bool {\n // Some types---notably unsafe ptrs---can only be dereferenced explicitly.\n pub fn deref(t: t, explicit: bool) -> Option<mt> {\n     match get(t).sty {\n-        ty_box(ty) | ty_uniq(ty) => {\n+        ty_uniq(ty) => {\n             Some(mt {\n                 ty: ty,\n                 mutbl: ast::MutImmutable,\n@@ -3106,9 +3073,7 @@ pub fn deref(t: t, explicit: bool) -> Option<mt> {\n \n pub fn deref_or_dont(t: t) -> t {\n     match get(t).sty {\n-        ty_box(ty) | ty_uniq(ty) => {\n-            ty\n-        },\n+        ty_uniq(ty) => ty,\n         ty_rptr(_, mt) | ty_ptr(mt) => mt.ty,\n         _ => t\n     }\n@@ -3124,7 +3089,7 @@ pub fn close_type(cx: &ctxt, t: t) -> t {\n \n pub fn type_content(t: t) -> t {\n     match get(t).sty {\n-        ty_box(ty) | ty_uniq(ty) => ty,\n+        ty_uniq(ty) => ty,\n         ty_rptr(_, mt) |ty_ptr(mt) => mt.ty,\n         _ => t\n     }\n@@ -3695,14 +3660,13 @@ pub fn expr_kind(tcx: &ctxt, expr: &ast::Expr) -> ExprKind {\n         }\n \n         ast::ExprBox(ref place, _) => {\n-            // Special case `Box<T>`/`Gc<T>` for now:\n+            // Special case `Box<T>` for now:\n             let definition = match tcx.def_map.borrow().find(&place.id) {\n                 Some(&def) => def,\n                 None => fail!(\"no def for place\"),\n             };\n             let def_id = definition.def_id();\n-            if tcx.lang_items.exchange_heap() == Some(def_id) ||\n-               tcx.lang_items.managed_heap() == Some(def_id) {\n+            if tcx.lang_items.exchange_heap() == Some(def_id) {\n                 RvalueDatumExpr\n             } else {\n                 RvalueDpsExpr\n@@ -3753,7 +3717,6 @@ pub fn ty_sort_string(cx: &ctxt, t: t) -> String {\n         }\n \n         ty_enum(id, _) => format!(\"enum {}\", item_path_str(cx, id)),\n-        ty_box(_) => \"Gc-ptr\".to_string(),\n         ty_uniq(_) => \"box\".to_string(),\n         ty_vec(_, Some(_)) => \"array\".to_string(),\n         ty_vec(_, None) => \"unsized array\".to_string(),\n@@ -5223,19 +5186,15 @@ pub fn hash_crate_independent(tcx: &ctxt, t: t, svh: &Svh) -> u64 {\n                 byte!(8);\n                 did(&mut state, d);\n             }\n-            ty_box(_) => {\n-                byte!(9);\n-            }\n             ty_uniq(_) => {\n-                byte!(10);\n+                byte!(9);\n             }\n             ty_vec(_, Some(n)) => {\n-                byte!(11);\n+                byte!(10);\n                 n.hash(&mut state);\n             }\n             ty_vec(_, None) => {\n                 byte!(11);\n-                0u8.hash(&mut state);\n             }\n             ty_ptr(m) => {\n                 byte!(12);\n@@ -5586,7 +5545,6 @@ pub fn accumulate_lifetimes_in_type(accumulator: &mut Vec<ty::Region>,\n             ty_int(_) |\n             ty_uint(_) |\n             ty_float(_) |\n-            ty_box(_) |\n             ty_uniq(_) |\n             ty_str |\n             ty_vec(_, _) |"}, {"sha": "9dda4d15350a39845100c767e22a3bf795514940", "filename": "src/librustc/middle/ty_fold.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_fold.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -485,9 +485,6 @@ pub fn super_fold_mt<'tcx, T: TypeFolder<'tcx>>(this: &mut T,\n pub fn super_fold_sty<'tcx, T: TypeFolder<'tcx>>(this: &mut T,\n                                                  sty: &ty::sty) -> ty::sty {\n     match *sty {\n-        ty::ty_box(typ) => {\n-            ty::ty_box(typ.fold_with(this))\n-        }\n         ty::ty_uniq(typ) => {\n             ty::ty_uniq(typ.fold_with(this))\n         }"}, {"sha": "0a270cf951611ad92c2ae8da017ad3c3e1d21378", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 0, "deletions": 64, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -559,44 +559,6 @@ pub fn ast_ty_to_builtin_ty<'tcx, AC: AstConv<'tcx>, RS: RegionScope>(\n                               \"not enough type parameters supplied to `Box<T>`\");\n                     Some(ty::mk_err())\n                 }\n-                def::DefTy(did, _) | def::DefStruct(did)\n-                        if Some(did) == this.tcx().lang_items.gc() => {\n-                    if path.segments\n-                           .iter()\n-                           .flat_map(|s| s.types.iter())\n-                           .count() > 1 {\n-                        span_err!(this.tcx().sess, path.span, E0048,\n-                                  \"`Gc` has only one type parameter\");\n-                    }\n-\n-                    for inner_ast_type in path.segments\n-                                              .iter()\n-                                              .flat_map(|s| s.types.iter()) {\n-                        return Some(mk_pointer(this,\n-                                               rscope,\n-                                               ast::MutImmutable,\n-                                               &**inner_ast_type,\n-                                               Box,\n-                                               |typ| {\n-                            match ty::get(typ).sty {\n-                                ty::ty_str => {\n-                                    span_err!(this.tcx().sess, path.span, E0114,\n-                                              \"`Gc<str>` is not a type\");\n-                                    ty::mk_err()\n-                                }\n-                                ty::ty_vec(_, None) => {\n-                                    span_err!(this.tcx().sess, path.span, E0115,\n-                                              \"`Gc<[T]>` is not a type\");\n-                                    ty::mk_err()\n-                                }\n-                                _ => ty::mk_box(this.tcx(), typ),\n-                            }\n-                        }))\n-                    }\n-                    this.tcx().sess.span_bug(path.span,\n-                                             \"not enough type parameters \\\n-                                              supplied to `Gc<T>`\")\n-                }\n                 _ => None\n             }\n         }\n@@ -606,15 +568,13 @@ pub fn ast_ty_to_builtin_ty<'tcx, AC: AstConv<'tcx>, RS: RegionScope>(\n \n #[deriving(Show)]\n enum PointerTy {\n-    Box,\n     RPtr(ty::Region),\n     Uniq\n }\n \n impl PointerTy {\n     fn default_region(&self) -> ty::Region {\n         match *self {\n-            Box => ty::ReStatic,\n             Uniq => ty::ReStatic,\n             RPtr(r) => r,\n         }\n@@ -702,14 +662,6 @@ fn mk_pointer<'tcx, AC: AstConv<'tcx>, RS: RegionScope>(\n                                        r,\n                                        ty::mt {mutbl: a_seq_mutbl, ty: tr});\n                 }\n-                _ => {\n-                    tcx.sess.span_err(\n-                        a_seq_ty.span,\n-                        \"~trait or &trait are the only supported \\\n-                         forms of casting-to-trait\");\n-                    return ty::mk_err();\n-                }\n-\n             }\n         }\n         ast::TyPath(ref path, ref opt_bounds, id) => {\n@@ -726,11 +678,6 @@ fn mk_pointer<'tcx, AC: AstConv<'tcx>, RS: RegionScope>(\n                         RPtr(r) => {\n                             return ty::mk_str_slice(tcx, r, ast::MutImmutable);\n                         }\n-                        _ => {\n-                            tcx.sess\n-                               .span_err(path.span,\n-                                         \"managed strings are not supported\")\n-                        }\n                     }\n                 }\n                 Some(&def::DefTrait(trait_def_id)) => {\n@@ -767,13 +714,6 @@ fn mk_pointer<'tcx, AC: AstConv<'tcx>, RS: RegionScope>(\n                         RPtr(r) => {\n                             return ty::mk_rptr(tcx, r, ty::mt{mutbl: a_seq_mutbl, ty: tr});\n                         }\n-                        _ => {\n-                            tcx.sess.span_err(\n-                                path.span,\n-                                \"~trait or &trait are the only supported \\\n-                                 forms of casting-to-trait\");\n-                            return ty::mk_err();\n-                        }\n                     };\n                 }\n                 _ => {}\n@@ -856,10 +796,6 @@ pub fn ast_ty_to_ty<'tcx, AC: AstConv<'tcx>, RS: RegionScope>(\n         match ast_ty.node {\n             ast::TyNil => ty::mk_nil(),\n             ast::TyBot => ty::mk_bot(),\n-            ast::TyBox(ref ty) => {\n-                mk_pointer(this, rscope, ast::MutImmutable, &**ty, Box,\n-                           |ty| ty::mk_box(tcx, ty))\n-            }\n             ast::TyUniq(ref ty) => {\n                 mk_pointer(this, rscope, ast::MutImmutable, &**ty, Uniq,\n                            |ty| ty::mk_uniq(tcx, ty))"}, {"sha": "8711f4de512e6d7cc9d08d0b752c8914e5a61894", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -1094,7 +1094,7 @@ impl<'a, 'tcx> LookupContext<'a, 'tcx> {\n \n         let tcx = self.tcx();\n         match ty::get(self_ty).sty {\n-            ty_bare_fn(..) | ty_box(..) | ty_uniq(..) | ty_rptr(..) |\n+            ty_bare_fn(..) | ty_uniq(..) | ty_rptr(..) |\n             ty_infer(IntVar(_)) |\n             ty_infer(FloatVar(_)) |\n             ty_param(..) | ty_nil | ty_bot | ty_bool |"}, {"sha": "d882ee5d0e59c6d31c047a1db2a49df70cb4848e", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -3820,12 +3820,6 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n                   if tcx.lang_items.exchange_heap() == Some(def_id) {\n                       fcx.write_ty(id, ty::mk_uniq(tcx, referent_ty));\n                       checked = true\n-                  } else if tcx.lang_items.managed_heap() == Some(def_id) {\n-                      fcx.register_region_obligation(infer::Managed(expr.span),\n-                                                     referent_ty,\n-                                                     ty::ReStatic);\n-                      fcx.write_ty(id, ty::mk_box(tcx, referent_ty));\n-                      checked = true\n                   }\n               }\n               _ => {}\n@@ -3881,8 +3875,8 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n       ast::ExprUnary(unop, ref oprnd) => {\n         let expected_inner = expected.map(fcx, |sty| {\n             match unop {\n-                ast::UnBox | ast::UnUniq => match *sty {\n-                    ty::ty_box(ty) | ty::ty_uniq(ty) => {\n+                ast::UnUniq => match *sty {\n+                    ty::ty_uniq(ty) => {\n                         ExpectHasType(ty)\n                     }\n                     _ => {\n@@ -3907,11 +3901,6 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n \n         if !ty::type_is_error(oprnd_t) {\n             match unop {\n-                ast::UnBox => {\n-                    if !ty::type_is_bot(oprnd_t) {\n-                        oprnd_t = ty::mk_box(tcx, oprnd_t)\n-                    }\n-                }\n                 ast::UnUniq => {\n                     if !ty::type_is_bot(oprnd_t) {\n                         oprnd_t = ty::mk_uniq(tcx, oprnd_t);"}, {"sha": "4d19bc16a3e2c0d20d6cb28339c0282a11f13528", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -663,14 +663,6 @@ fn visit_expr(rcx: &mut Rcx, expr: &ast::Expr) {\n             visit::walk_expr(rcx, expr);\n         }\n \n-        ast::ExprUnary(ast::UnBox, ref base) => {\n-            // Managed data must not have borrowed pointers within it:\n-            let base_ty = rcx.resolve_node_type(base.id);\n-            type_must_outlive(rcx, infer::Managed(expr.span),\n-                              base_ty, ty::ReStatic);\n-            visit::walk_expr(rcx, expr);\n-        }\n-\n         ast::ExprUnary(ast::UnDeref, ref base) => {\n             // For *a, the lifetime of a must enclose the deref\n             let method_call = MethodCall::expr(expr.id);\n@@ -1474,7 +1466,6 @@ fn link_region(rcx: &Rcx,\n \n             mc::cat_discr(cmt_base, _) |\n             mc::cat_downcast(cmt_base) |\n-            mc::cat_deref(cmt_base, _, mc::GcPtr(..)) |\n             mc::cat_deref(cmt_base, _, mc::OwnedPtr) |\n             mc::cat_interior(cmt_base, _) => {\n                 // Borrowing interior or owned data requires the base\n@@ -1707,7 +1698,6 @@ fn adjust_upvar_borrow_kind_for_mut(rcx: &Rcx,\n             }\n \n             mc::cat_deref(_, _, mc::UnsafePtr(..)) |\n-            mc::cat_deref(_, _, mc::GcPtr) |\n             mc::cat_static_item |\n             mc::cat_rvalue(_) |\n             mc::cat_copied_upvar(_) |\n@@ -1758,7 +1748,6 @@ fn adjust_upvar_borrow_kind_for_unique(rcx: &Rcx, cmt: mc::cmt) {\n             }\n \n             mc::cat_deref(_, _, mc::UnsafePtr(..)) |\n-            mc::cat_deref(_, _, mc::GcPtr) |\n             mc::cat_static_item |\n             mc::cat_rvalue(_) |\n             mc::cat_copied_upvar(_) |"}, {"sha": "5d75d590a09f9bead511e75e0b59da8f8172c3e7", "filename": "src/librustc/middle/typeck/check/regionmanip.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -129,7 +129,6 @@ impl<'a, 'tcx> Wf<'a, 'tcx> {\n \n             ty::ty_vec(t, _) |\n             ty::ty_ptr(ty::mt { ty: t, .. }) |\n-            ty::ty_box(t) |\n             ty::ty_uniq(t) => {\n                 self.accumulate_from_ty(t)\n             }"}, {"sha": "1d765c6c7c6c2d58b3c5734c44601919e87442a7", "filename": "src/librustc/middle/typeck/check/vtable2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable2.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -95,7 +95,7 @@ pub fn check_object_cast(fcx: &FnCtxt,\n         }\n     }\n \n-    // Because we currently give unsound lifetimes to the \"ty_box\", I\n+    // Because we currently give unsound lifetimes to the \"t_box\", I\n     // could have written &'static ty::TyTrait here, but it seems\n     // gratuitously unsafe.\n     fn object_trait<'a>(t: &'a ty::t) -> &'a ty::TyTrait {"}, {"sha": "f6ac0e1666ca92915399d913e8878ee4dac57398", "filename": "src/librustc/middle/typeck/coherence/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence%2Fmod.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -23,7 +23,7 @@ use middle::subst::{Substs};\n use middle::ty::get;\n use middle::ty::{ImplContainer, ImplOrTraitItemId, MethodTraitItemId};\n use middle::ty::{TypeTraitItemId, lookup_item_type};\n-use middle::ty::{t, ty_bool, ty_char, ty_bot, ty_box, ty_enum, ty_err};\n+use middle::ty::{t, ty_bool, ty_char, ty_bot, ty_enum, ty_err};\n use middle::ty::{ty_str, ty_vec, ty_float, ty_infer, ty_int, ty_nil, ty_open};\n use middle::ty::{ty_param, Polytype, ty_ptr};\n use middle::ty::{ty_rptr, ty_struct, ty_trait, ty_tup};\n@@ -84,8 +84,8 @@ fn get_base_type(inference_context: &InferCtxt,\n \n         ty_nil | ty_bot | ty_bool | ty_char | ty_int(..) | ty_uint(..) | ty_float(..) |\n         ty_str(..) | ty_vec(..) | ty_bare_fn(..) | ty_closure(..) | ty_tup(..) |\n-        ty_infer(..) | ty_param(..) | ty_err | ty_open(..) |\n-        ty_box(_) | ty_uniq(_) | ty_ptr(_) | ty_rptr(_, _) => {\n+        ty_infer(..) | ty_param(..) | ty_err | ty_open(..) | ty_uniq(_) |\n+        ty_ptr(_) | ty_rptr(_, _) => {\n             debug!(\"(getting base type) no base type; found {:?}\",\n                    get(original_type).sty);\n             None"}, {"sha": "a0c190c5c817b0541230ace1dc4f9866b2d771d9", "filename": "src/librustc/middle/typeck/infer/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -258,7 +258,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n         let r_borrow = self.get_ref().infcx.next_region_var(coercion);\n \n         let inner_ty = match *sty_a {\n-            ty::ty_box(_) | ty::ty_uniq(_) => return Err(ty::terr_mismatch),\n+            ty::ty_uniq(_) => return Err(ty::terr_mismatch),\n             ty::ty_rptr(_, mt_a) => mt_a.ty,\n             _ => {\n                 return self.subtype(a, b);"}, {"sha": "a742cf45059a4784749179446afdb311c61dd741", "filename": "src/librustc/middle/typeck/infer/combine.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -495,10 +495,6 @@ pub fn super_tys<'tcx, C: Combine<'tcx>>(this: &C, a: ty::t, b: ty::t) -> cres<t\n           Ok(ty::mk_unboxed_closure(tcx, a_id, region))\n       }\n \n-      (&ty::ty_box(a_inner), &ty::ty_box(b_inner)) => {\n-        this.tys(a_inner, b_inner).and_then(|typ| Ok(ty::mk_box(tcx, typ)))\n-      }\n-\n       (&ty::ty_uniq(a_inner), &ty::ty_uniq(b_inner)) => {\n             let typ = try!(this.tys(a_inner, b_inner));\n             check_ptr_to_unsized(this, a, b, a_inner, b_inner, ty::mk_uniq(tcx, typ))"}, {"sha": "8ff5b3c9024931d285a6bd255dafa2cc537fc757", "filename": "src/librustc/middle/typeck/infer/error_reporting.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -776,11 +776,6 @@ impl<'a, 'tcx> ErrorReporting for InferCtxt<'a, 'tcx> {\n                     sup,\n                     \"\");\n             }\n-            infer::Managed(span) => {\n-                self.tcx.sess.span_err(\n-                    span,\n-                    format!(\"cannot put borrowed references into managed memory\").as_slice());\n-            }\n         }\n     }\n \n@@ -1285,7 +1280,6 @@ impl<'a, 'tcx> Rebuilder<'a, 'tcx> {\n                 ast::TyPtr(ref mut_ty) => {\n                     ty_queue.push(&*mut_ty.ty);\n                 }\n-                ast::TyBox(ref ty) |\n                 ast::TyVec(ref ty) |\n                 ast::TyUniq(ref ty) |\n                 ast::TyFixedLengthVec(ref ty, _) => {\n@@ -1323,7 +1317,6 @@ impl<'a, 'tcx> Rebuilder<'a, 'tcx> {\n                             ty: build_to(mut_ty.ty, to),\n                         })\n                     }\n-                    ast::TyBox(ty) => ast::TyBox(build_to(ty, to)),\n                     ast::TyVec(ty) => ast::TyVec(build_to(ty, to)),\n                     ast::TyUniq(ty) => ast::TyUniq(build_to(ty, to)),\n                     ast::TyFixedLengthVec(ty, e) => {\n@@ -1614,11 +1607,6 @@ impl<'a, 'tcx> ErrorReportingHelpers for InferCtxt<'a, 'tcx> {\n                              does not outlive the data it points at\",\n                             self.ty_to_string(ty)).as_slice());\n             }\n-            infer::Managed(span) => {\n-                self.tcx.sess.span_note(\n-                    span,\n-                    \"...so that the value can be stored in managed memory.\");\n-            }\n             infer::RelateParamBound(span, param_ty, t) => {\n                 self.tcx.sess.span_note(\n                     span,"}, {"sha": "44bda134909bb61f4d2d1cd631dcae9909affe09", "filename": "src/librustc/middle/typeck/infer/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -216,9 +216,6 @@ pub enum SubregionOrigin {\n \n     // An auto-borrow that does not enclose the expr where it occurs\n     AutoBorrow(Span),\n-\n-    // Managed data cannot contain borrowed pointers.\n-    Managed(Span),\n }\n \n /// Reasons to create a region inference variable\n@@ -1029,7 +1026,6 @@ impl SubregionOrigin {\n             CallReturn(a) => a,\n             AddrOf(a) => a,\n             AutoBorrow(a) => a,\n-            Managed(a) => a,\n         }\n     }\n }\n@@ -1102,7 +1098,6 @@ impl Repr for SubregionOrigin {\n             CallReturn(a) => format!(\"CallReturn({})\", a.repr(tcx)),\n             AddrOf(a) => format!(\"AddrOf({})\", a.repr(tcx)),\n             AutoBorrow(a) => format!(\"AutoBorrow({})\", a.repr(tcx)),\n-            Managed(a) => format!(\"Managed({})\", a.repr(tcx)),\n         }\n     }\n }"}, {"sha": "54ece395be94c1f17f6688e1f03066916fa88c85", "filename": "src/librustc/middle/typeck/infer/skolemize.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fskolemize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fskolemize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fskolemize.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -143,7 +143,6 @@ impl<'a, 'tcx> TypeFolder<'tcx> for TypeSkolemizer<'a, 'tcx> {\n             ty::ty_uint(..) |\n             ty::ty_float(..) |\n             ty::ty_enum(..) |\n-            ty::ty_box(..) |\n             ty::ty_uniq(..) |\n             ty::ty_str |\n             ty::ty_err |"}, {"sha": "9317ba2c7fa93dd99f920e3b66940c718bef4175", "filename": "src/librustc/middle/typeck/variance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -742,7 +742,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                 self.add_constraints_from_mt(mt, variance);\n             }\n \n-            ty::ty_uniq(typ) | ty::ty_box(typ) | ty::ty_vec(typ, _) | ty::ty_open(typ) => {\n+            ty::ty_uniq(typ) | ty::ty_vec(typ, _) | ty::ty_open(typ) => {\n                 self.add_constraints_from_ty(typ, variance);\n             }\n "}, {"sha": "7edd809e4442b9e4d9f04de263ddff03e69f2a9b", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -17,7 +17,7 @@ use middle::ty::{ReEarlyBound, BrFresh, ctxt};\n use middle::ty::{ReFree, ReScope, ReInfer, ReStatic, Region, ReEmpty};\n use middle::ty::{ReSkolemized, ReVar};\n use middle::ty::{mt, t, ParamTy};\n-use middle::ty::{ty_bool, ty_char, ty_bot, ty_box, ty_struct, ty_enum};\n+use middle::ty::{ty_bool, ty_char, ty_bot, ty_struct, ty_enum};\n use middle::ty::{ty_err, ty_str, ty_vec, ty_float, ty_bare_fn, ty_closure};\n use middle::ty::{ty_nil, ty_param, ty_ptr, ty_rptr, ty_tup, ty_open};\n use middle::ty::{ty_unboxed_closure};\n@@ -375,7 +375,6 @@ pub fn ty_to_string(cx: &ctxt, typ: t) -> String {\n       ty_int(t) => ast_util::int_ty_to_string(t, None).to_string(),\n       ty_uint(t) => ast_util::uint_ty_to_string(t, None).to_string(),\n       ty_float(t) => ast_util::float_ty_to_string(t).to_string(),\n-      ty_box(typ) => format!(\"Gc<{}>\", ty_to_string(cx, typ)),\n       ty_uniq(typ) => format!(\"Box<{}>\", ty_to_string(cx, typ)),\n       ty_ptr(ref tm) => {\n           format!(\"*{} {}\", match tm.mutbl {"}, {"sha": "2bbd7952776c3c69c4f0bb45c715da9a4aac054d", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -1087,7 +1087,6 @@ pub enum Type {\n     /// aka TyBot\n     Bottom,\n     Unique(Box<Type>),\n-    Managed(Box<Type>),\n     RawPointer(Mutability, Box<Type>),\n     BorrowedRef {\n         pub lifetime: Option<Lifetime>,\n@@ -1215,7 +1214,6 @@ impl Clean<Type> for ast::Ty {\n             TyRptr(ref l, ref m) =>\n                 BorrowedRef {lifetime: l.clean(cx), mutability: m.mutbl.clean(cx),\n                              type_: box m.ty.clean(cx)},\n-            TyBox(ref ty) => Managed(box ty.clean(cx)),\n             TyUniq(ref ty) => Unique(box ty.clean(cx)),\n             TyVec(ref ty) => Vector(box ty.clean(cx)),\n             TyFixedLengthVec(ref ty, ref e) => FixedVector(box ty.clean(cx),\n@@ -1254,12 +1252,6 @@ impl Clean<Type> for ty::t {\n             ty::ty_float(ast::TyF32) => Primitive(F32),\n             ty::ty_float(ast::TyF64) => Primitive(F64),\n             ty::ty_str => Primitive(Str),\n-            ty::ty_box(t) => {\n-                let gc_did = cx.tcx_opt().and_then(|tcx| {\n-                    tcx.lang_items.gc()\n-                });\n-                lang_struct(cx, gc_did, t, \"Gc\", Managed)\n-            }\n             ty::ty_uniq(t) => {\n                 let box_did = cx.tcx_opt().and_then(|tcx| {\n                     tcx.lang_items.owned_box()"}, {"sha": "417e16102125e43bee2d2a0637eb5870fce73d62", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -476,7 +476,7 @@ impl fmt::Show for clean::Type {\n                 };\n                 write!(f, \"&amp;{}{}{}\", lt, MutableSpace(mutability), **ty)\n             }\n-            clean::Unique(..) | clean::Managed(..) => {\n+            clean::Unique(..) => {\n                 fail!(\"should have been cleaned\")\n             }\n         }"}, {"sha": "8fef0404a011b66bfe69e7fdea162d20932292a9", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -15,7 +15,7 @@\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n \n-#![feature(globs, struct_variant, managed_boxes, macro_rules, phase)]\n+#![feature(globs, struct_variant, macro_rules, phase)]\n \n extern crate arena;\n extern crate debug;"}, {"sha": "b6782b375844d6abac599664a5681268088ada3d", "filename": "src/librustrt/lib.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustrt%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustrt%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Flib.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -16,7 +16,7 @@\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/master/\")]\n \n-#![feature(macro_rules, phase, globs, thread_local, managed_boxes, asm)]\n+#![feature(macro_rules, phase, globs, thread_local, asm)]\n #![feature(linkage, lang_items, unsafe_destructor, default_type_params)]\n #![feature(import_shadowing)]\n #![no_std]\n@@ -57,7 +57,6 @@ pub mod c_str;\n pub mod exclusive;\n pub mod local;\n pub mod local_data;\n-pub mod local_heap;\n pub mod mutex;\n pub mod rtio;\n pub mod stack;\n@@ -104,9 +103,8 @@ pub static DEFAULT_ERROR_CODE: int = 101;\n \n /// One-time runtime initialization.\n ///\n-/// Initializes global state, including frobbing\n-/// the crate's logging flags, registering GC\n-/// metadata, and storing the process arguments.\n+/// Initializes global state, including frobbing the crate's logging flags,\n+/// and storing the process arguments.\n pub fn init(argc: int, argv: *const *const u8) {\n     // FIXME: Derefing these pointers is not safe.\n     // Need to propagate the unsafety to `start`."}, {"sha": "fcef5981f0a35602c9d4e742130ac59bf1d266db", "filename": "src/librustrt/local_data.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustrt%2Flocal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustrt%2Flocal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Flocal_data.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -411,7 +411,6 @@ mod tests {\n     extern crate test;\n \n     use std::prelude::*;\n-    use std::gc::{Gc, GC};\n     use super::*;\n     use std::task;\n \n@@ -467,25 +466,25 @@ mod tests {\n     #[test]\n     fn test_tls_multiple_types() {\n         static str_key: Key<String> = &KeyValueKey;\n-        static box_key: Key<Gc<()>> = &KeyValueKey;\n+        static box_key: Key<Box<int>> = &KeyValueKey;\n         static int_key: Key<int> = &KeyValueKey;\n         task::spawn(proc() {\n             str_key.replace(Some(\"string data\".to_string()));\n-            box_key.replace(Some(box(GC) ()));\n+            box_key.replace(Some(box 0));\n             int_key.replace(Some(42));\n         });\n     }\n \n     #[test]\n     fn test_tls_overwrite_multiple_types() {\n         static str_key: Key<String> = &KeyValueKey;\n-        static box_key: Key<Gc<()>> = &KeyValueKey;\n+        static box_key: Key<Box<int>> = &KeyValueKey;\n         static int_key: Key<int> = &KeyValueKey;\n         task::spawn(proc() {\n             str_key.replace(Some(\"string data\".to_string()));\n             str_key.replace(Some(\"string data 2\".to_string()));\n-            box_key.replace(Some(box(GC) ()));\n-            box_key.replace(Some(box(GC) ()));\n+            box_key.replace(Some(box 0));\n+            box_key.replace(Some(box 1));\n             int_key.replace(Some(42));\n             // This could cause a segfault if overwriting-destruction is done\n             // with the crazy polymorphic transmute rather than the provided\n@@ -498,13 +497,13 @@ mod tests {\n     #[should_fail]\n     fn test_tls_cleanup_on_failure() {\n         static str_key: Key<String> = &KeyValueKey;\n-        static box_key: Key<Gc<()>> = &KeyValueKey;\n+        static box_key: Key<Box<int>> = &KeyValueKey;\n         static int_key: Key<int> = &KeyValueKey;\n         str_key.replace(Some(\"parent data\".to_string()));\n-        box_key.replace(Some(box(GC) ()));\n+        box_key.replace(Some(box 0));\n         task::spawn(proc() {\n             str_key.replace(Some(\"string data\".to_string()));\n-            box_key.replace(Some(box(GC) ()));\n+            box_key.replace(Some(box 2));\n             int_key.replace(Some(42));\n             fail!();\n         });"}, {"sha": "0e84e9c0097f55a8bbea436827aa168b07a520a3", "filename": "src/librustrt/local_heap.rs", "status": "removed", "additions": 0, "deletions": 345, "changes": 345, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Flibrustrt%2Flocal_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Flibrustrt%2Flocal_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Flocal_heap.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,345 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! The local, garbage collected heap\n-\n-use core::prelude::*;\n-\n-use alloc::libc_heap;\n-use alloc::util;\n-use libc::{c_void, free};\n-\n-use core::mem;\n-use core::ptr;\n-use core::raw;\n-use local::Local;\n-use task::Task;\n-\n-static RC_IMMORTAL : uint = 0x77777777;\n-\n-pub type Box = raw::GcBox<()>;\n-\n-pub struct MemoryRegion {\n-    live_allocations: uint,\n-}\n-\n-pub struct LocalHeap {\n-    memory_region: MemoryRegion,\n-    live_allocs: *mut raw::GcBox<()>,\n-}\n-\n-impl LocalHeap {\n-    pub fn new() -> LocalHeap {\n-        LocalHeap {\n-            memory_region: MemoryRegion { live_allocations: 0 },\n-            live_allocs: ptr::null_mut(),\n-        }\n-    }\n-\n-    #[inline]\n-    #[allow(deprecated)]\n-    pub fn alloc(&mut self,\n-                 drop_glue: fn(*mut u8),\n-                 size: uint,\n-                 align: uint) -> *mut Box {\n-        let total_size = util::get_box_size(size, align);\n-        let alloc = self.memory_region.malloc(total_size);\n-        {\n-            // Make sure that we can't use `mybox` outside of this scope\n-            let mybox: &mut Box = unsafe { mem::transmute(alloc) };\n-            // Clear out this box, and move it to the front of the live\n-            // allocations list\n-            mybox.drop_glue = drop_glue;\n-            mybox.ref_count = 1;\n-            mybox.prev = ptr::null_mut();\n-            mybox.next = self.live_allocs;\n-            if !self.live_allocs.is_null() {\n-                unsafe { (*self.live_allocs).prev = alloc; }\n-            }\n-            self.live_allocs = alloc;\n-        }\n-        return alloc;\n-    }\n-\n-    #[inline]\n-    pub fn realloc(&mut self, ptr: *mut Box, size: uint) -> *mut Box {\n-        // Make sure that we can't use `mybox` outside of this scope\n-        let total_size = size + mem::size_of::<Box>();\n-        let new_box = self.memory_region.realloc(ptr, total_size);\n-        {\n-            // Fix links because we could have moved around\n-            let mybox: &mut Box = unsafe { mem::transmute(new_box) };\n-            if !mybox.prev.is_null() {\n-                unsafe { (*mybox.prev).next = new_box; }\n-            }\n-            if !mybox.next.is_null() {\n-                unsafe { (*mybox.next).prev = new_box; }\n-            }\n-        }\n-        if self.live_allocs == ptr {\n-            self.live_allocs = new_box;\n-        }\n-        return new_box;\n-    }\n-\n-    #[inline]\n-    pub fn free(&mut self, alloc: *mut Box) {\n-        {\n-            // Make sure that we can't use `mybox` outside of this scope\n-            let mybox: &mut Box = unsafe { mem::transmute(alloc) };\n-\n-            // Unlink it from the linked list\n-            if !mybox.prev.is_null() {\n-                unsafe { (*mybox.prev).next = mybox.next; }\n-            }\n-            if !mybox.next.is_null() {\n-                unsafe { (*mybox.next).prev = mybox.prev; }\n-            }\n-            if self.live_allocs == alloc {\n-                self.live_allocs = mybox.next;\n-            }\n-        }\n-\n-        self.memory_region.free(alloc);\n-    }\n-\n-    /// Immortalize all pending allocations, forcing them to live forever.\n-    ///\n-    /// This function will freeze all allocations to prevent all pending\n-    /// allocations from being deallocated. This is used in preparation for when\n-    /// a task is about to destroy TLD.\n-    pub unsafe fn immortalize(&mut self) {\n-        let mut n_total_boxes = 0u;\n-\n-        // Pass 1: Make all boxes immortal.\n-        //\n-        // In this pass, nothing gets freed, so it does not matter whether\n-        // we read the next field before or after the callback.\n-        self.each_live_alloc(true, |_, alloc| {\n-            n_total_boxes += 1;\n-            (*alloc).ref_count = RC_IMMORTAL;\n-        });\n-\n-        if debug_mem() {\n-            // We do logging here w/o allocation.\n-            rterrln!(\"total boxes annihilated: {}\", n_total_boxes);\n-        }\n-    }\n-\n-    /// Continues deallocation of the all pending allocations in this arena.\n-    ///\n-    /// This is invoked from the destructor, and requires that `immortalize` has\n-    /// been called previously.\n-    unsafe fn annihilate(&mut self) {\n-        // Pass 2: Drop all boxes.\n-        //\n-        // In this pass, unique-managed boxes may get freed, but not\n-        // managed boxes, so we must read the `next` field *after* the\n-        // callback, as the original value may have been freed.\n-        self.each_live_alloc(false, |_, alloc| {\n-            let drop_glue = (*alloc).drop_glue;\n-            let data = &mut (*alloc).data as *mut ();\n-            drop_glue(data as *mut u8);\n-        });\n-\n-        // Pass 3: Free all boxes.\n-        //\n-        // In this pass, managed boxes may get freed (but not\n-        // unique-managed boxes, though I think that none of those are\n-        // left), so we must read the `next` field before, since it will\n-        // not be valid after.\n-        self.each_live_alloc(true, |me, alloc| {\n-            me.free(alloc);\n-        });\n-    }\n-\n-    unsafe fn each_live_alloc(&mut self, read_next_before: bool,\n-                              f: |&mut LocalHeap, alloc: *mut raw::GcBox<()>|) {\n-        //! Walks the internal list of allocations\n-\n-        let mut alloc = self.live_allocs;\n-        while alloc != ptr::null_mut() {\n-            let next_before = (*alloc).next;\n-\n-            f(self, alloc);\n-\n-            if read_next_before {\n-                alloc = next_before;\n-            } else {\n-                alloc = (*alloc).next;\n-            }\n-        }\n-    }\n-}\n-\n-impl Drop for LocalHeap {\n-    fn drop(&mut self) {\n-        unsafe { self.annihilate() }\n-        assert!(self.live_allocs.is_null());\n-    }\n-}\n-\n-struct AllocHeader;\n-\n-impl AllocHeader {\n-    fn init(&mut self, _size: u32) {}\n-    fn assert_sane(&self) {}\n-    fn update_size(&mut self, _size: u32) {}\n-\n-    fn as_box(&mut self) -> *mut Box {\n-        let myaddr: uint = unsafe { mem::transmute(self) };\n-        (myaddr + AllocHeader::size()) as *mut Box\n-    }\n-\n-    fn size() -> uint {\n-        // For some platforms, 16 byte alignment is required.\n-        let ptr_size = 16;\n-        let header_size = mem::size_of::<AllocHeader>();\n-        return (header_size + ptr_size - 1) / ptr_size * ptr_size;\n-    }\n-\n-    fn from(a_box: *mut Box) -> *mut AllocHeader {\n-        (a_box as uint - AllocHeader::size()) as *mut AllocHeader\n-    }\n-}\n-\n-#[cfg(unix)]\n-fn debug_mem() -> bool {\n-    // FIXME: Need to port the environment struct to newsched\n-    false\n-}\n-\n-#[cfg(windows)]\n-fn debug_mem() -> bool {\n-    false\n-}\n-\n-impl MemoryRegion {\n-    #[inline]\n-    fn malloc(&mut self, size: uint) -> *mut Box {\n-        let total_size = size + AllocHeader::size();\n-        let alloc: *mut AllocHeader = unsafe {\n-            libc_heap::malloc_raw(total_size) as *mut AllocHeader\n-        };\n-\n-        let alloc: &mut AllocHeader = unsafe { mem::transmute(alloc) };\n-        alloc.init(size as u32);\n-        self.claim(alloc);\n-        self.live_allocations += 1;\n-\n-        return alloc.as_box();\n-    }\n-\n-    #[inline]\n-    fn realloc(&mut self, alloc: *mut Box, size: uint) -> *mut Box {\n-        rtassert!(!alloc.is_null());\n-        let orig_alloc = AllocHeader::from(alloc);\n-        unsafe { (*orig_alloc).assert_sane(); }\n-\n-        let total_size = size + AllocHeader::size();\n-        let alloc: *mut AllocHeader = unsafe {\n-            libc_heap::realloc_raw(orig_alloc as *mut u8, total_size) as *mut AllocHeader\n-        };\n-\n-        let alloc: &mut AllocHeader = unsafe { mem::transmute(alloc) };\n-        alloc.assert_sane();\n-        alloc.update_size(size as u32);\n-        self.update(alloc, orig_alloc as *mut AllocHeader);\n-        return alloc.as_box();\n-    }\n-\n-    #[inline]\n-    fn free(&mut self, alloc: *mut Box) {\n-        rtassert!(!alloc.is_null());\n-        let alloc = AllocHeader::from(alloc);\n-        unsafe {\n-            (*alloc).assert_sane();\n-            self.release(mem::transmute(alloc));\n-            rtassert!(self.live_allocations > 0);\n-            self.live_allocations -= 1;\n-            free(alloc as *mut c_void)\n-        }\n-    }\n-\n-    #[inline]\n-    fn claim(&mut self, _alloc: &mut AllocHeader) {}\n-    #[inline]\n-    fn release(&mut self, _alloc: &AllocHeader) {}\n-    #[inline]\n-    fn update(&mut self, _alloc: &mut AllocHeader, _orig: *mut AllocHeader) {}\n-}\n-\n-impl Drop for MemoryRegion {\n-    fn drop(&mut self) {\n-        if self.live_allocations != 0 {\n-            rtabort!(\"leaked managed memory ({} objects)\", self.live_allocations);\n-        }\n-    }\n-}\n-\n-#[cfg(not(test))]\n-#[lang=\"malloc\"]\n-#[inline]\n-pub unsafe fn local_malloc_(drop_glue: fn(*mut u8), size: uint,\n-                            align: uint) -> *mut u8 {\n-    local_malloc(drop_glue, size, align)\n-}\n-\n-#[inline]\n-pub unsafe fn local_malloc(drop_glue: fn(*mut u8), size: uint,\n-                           align: uint) -> *mut u8 {\n-    // FIXME: Unsafe borrow for speed. Lame.\n-    let task: Option<*mut Task> = Local::try_unsafe_borrow();\n-    match task {\n-        Some(task) => {\n-            (*task).heap.alloc(drop_glue, size, align) as *mut u8\n-        }\n-        None => rtabort!(\"local malloc outside of task\")\n-    }\n-}\n-\n-#[cfg(not(test))]\n-#[lang=\"free\"]\n-#[inline]\n-pub unsafe fn local_free_(ptr: *mut u8) {\n-    local_free(ptr)\n-}\n-\n-// NB: Calls to free CANNOT be allowed to fail, as throwing an exception from\n-// inside a landing pad may corrupt the state of the exception handler. If a\n-// problem occurs, call exit instead.\n-#[inline]\n-pub unsafe fn local_free(ptr: *mut u8) {\n-    // FIXME: Unsafe borrow for speed. Lame.\n-    let task_ptr: Option<*mut Task> = Local::try_unsafe_borrow();\n-    match task_ptr {\n-        Some(task) => {\n-            (*task).heap.free(ptr as *mut Box)\n-        }\n-        None => rtabort!(\"local free outside of task\")\n-    }\n-}\n-\n-#[cfg(test)]\n-mod bench {\n-    extern crate test;\n-    use self::test::Bencher;\n-    use std::gc::GC;\n-\n-    #[bench]\n-    fn alloc_managed_small(b: &mut Bencher) {\n-        b.iter(|| { box(GC) 10i });\n-    }\n-\n-    #[bench]\n-    fn alloc_managed_big(b: &mut Bencher) {\n-        b.iter(|| { box(GC) ([10i, ..1000]) });\n-    }\n-}"}, {"sha": "ca5f76cf0d45a5122cdea9f84f877fe1d8c388b3", "filename": "src/librustrt/task.rs", "status": "modified", "additions": 13, "deletions": 62, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustrt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibrustrt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Ftask.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -9,9 +9,8 @@\n // except according to those terms.\n \n //! Language-level runtime services that should reasonably expected\n-//! to be available 'everywhere'. Local heaps, GC, unwinding,\n-//! local storage, and logging. Even a 'freestanding' Rust would likely want\n-//! to implement this.\n+//! to be available 'everywhere'. Unwinding, local storage, and logging.\n+//! Even a 'freestanding' Rust would likely want to implement this.\n \n use alloc::arc::Arc;\n use alloc::boxed::{BoxAny, Box};\n@@ -27,7 +26,6 @@ use core::raw;\n use local_data;\n use Runtime;\n use local::Local;\n-use local_heap::LocalHeap;\n use rtio::LocalIo;\n use unwind;\n use unwind::Unwinder;\n@@ -95,8 +93,6 @@ use collections::str::SendStr;\n /// # }\n /// ```\n pub struct Task {\n-    pub heap: LocalHeap,\n-    pub gc: GarbageCollector,\n     pub storage: LocalStorage,\n     pub unwinder: Unwinder,\n     pub death: Death,\n@@ -132,7 +128,6 @@ pub struct TaskOpts {\n /// children tasks complete, recommend using a result future.\n pub type Result = ::core::result::Result<(), Box<Any + Send>>;\n \n-pub struct GarbageCollector;\n pub struct LocalStorage(pub Option<local_data::Map>);\n \n /// A handle to a blocked task. Usually this means having the Box<Task>\n@@ -163,8 +158,6 @@ impl Task {\n     /// task creation functions through libnative or libgreen.\n     pub fn new() -> Task {\n         Task {\n-            heap: LocalHeap::new(),\n-            gc: GarbageCollector,\n             storage: LocalStorage(None),\n             unwinder: Unwinder::new(),\n             death: Death::new(),\n@@ -264,32 +257,22 @@ impl Task {\n     /// already been destroyed and/or annihilated.\n     fn cleanup(self: Box<Task>, result: Result) -> Box<Task> {\n         // The first thing to do when cleaning up is to deallocate our local\n-        // resources, such as TLD and GC data.\n+        // resources, such as TLD.\n         //\n         // FIXME: there are a number of problems with this code\n         //\n         // 1. If any TLD object fails destruction, then all of TLD will leak.\n         //    This appears to be a consequence of #14875.\n         //\n-        // 2. Failing during GC annihilation aborts the runtime #14876.\n+        // 2. Setting a TLD key while destroying TLD will abort the runtime #14807.\n         //\n-        // 3. Setting a TLD key while destroying TLD or while destroying GC will\n-        //    abort the runtime #14807.\n-        //\n-        // 4. Invoking GC in GC destructors will abort the runtime #6996.\n-        //\n-        // 5. The order of destruction of TLD and GC matters, but either way is\n-        //    susceptible to leaks (see 3/4) #8302.\n+        // 3. The order of destruction of TLD matters, but either way is\n+        //    susceptible to leaks (see 2) #8302.\n         //\n         // That being said, there are a few upshots to this code\n         //\n         // 1. If TLD destruction fails, heap destruction will be attempted.\n-        //    There is a test for this at fail-during-tld-destroy.rs. Sadly the\n-        //    other way can't be tested due to point 2 above. Note that we must\n-        //    immortalize the heap first because if any deallocations are\n-        //    attempted while TLD is being dropped it will attempt to free the\n-        //    allocation from the wrong heap (because the current one has been\n-        //    replaced).\n+        //    There is a test for this at fail-during-tld-destroy.rs.\n         //\n         // 2. One failure in destruction is tolerable, so long as the task\n         //    didn't originally fail while it was running.\n@@ -301,15 +284,10 @@ impl Task {\n                 let &LocalStorage(ref mut optmap) = &mut task.storage;\n                 optmap.take()\n             };\n-            let mut heap = mem::replace(&mut task.heap, LocalHeap::new());\n-            unsafe { heap.immortalize() }\n             drop(task);\n \n             // First, destroy task-local storage. This may run user dtors.\n             drop(tld);\n-\n-            // Destroy remaining boxes. Also may run user dtors.\n-            drop(heap);\n         });\n \n         // If the above `run` block failed, then it must be the case that the\n@@ -327,9 +305,8 @@ impl Task {\n         Local::put(task);\n \n         // FIXME: this is running in a seriously constrained context. If this\n-        //        allocates GC or allocates TLD then it will likely abort the\n-        //        runtime. Similarly, if this fails, this will also likely abort\n-        //        the runtime.\n+        //        allocates TLD then it will likely abort the runtime. Similarly,\n+        //        if this fails, this will also likely abort the runtime.\n         //\n         //        This closure is currently limited to a channel send via the\n         //        standard library's task interface, but this needs\n@@ -577,23 +554,14 @@ mod test {\n     use super::*;\n     use std::prelude::*;\n     use std::task;\n-    use std::gc::{Gc, GC};\n-\n-    #[test]\n-    fn local_heap() {\n-        let a = box(GC) 5i;\n-        let b = a;\n-        assert!(*a == 5);\n-        assert!(*b == 5);\n-    }\n \n     #[test]\n     fn tls() {\n-        local_data_key!(key: Gc<String>)\n-        key.replace(Some(box(GC) \"data\".to_string()));\n+        local_data_key!(key: String)\n+        key.replace(Some(\"data\".to_string()));\n         assert_eq!(key.get().unwrap().as_slice(), \"data\");\n-        local_data_key!(key2: Gc<String>)\n-        key2.replace(Some(box(GC) \"data\".to_string()));\n+        local_data_key!(key2: String)\n+        key2.replace(Some(\"data\".to_string()));\n         assert_eq!(key2.get().unwrap().as_slice(), \"data\");\n     }\n \n@@ -628,23 +596,6 @@ mod test {\n         assert!(rx.recv() == 10);\n     }\n \n-    #[test]\n-    fn heap_cycles() {\n-        use std::cell::RefCell;\n-\n-        struct List {\n-            next: Option<Gc<RefCell<List>>>,\n-        }\n-\n-        let a = box(GC) RefCell::new(List { next: None });\n-        let b = box(GC) RefCell::new(List { next: Some(a) });\n-\n-        {\n-            let mut a = a.borrow_mut();\n-            a.next = Some(b);\n-        }\n-    }\n-\n     #[test]\n     #[should_fail]\n     fn test_begin_unwind() {"}, {"sha": "4213a3e3b72b1365cff76687348396a5ddb0a33d", "filename": "src/libserialize/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibserialize%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibserialize%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Flib.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -23,7 +23,7 @@ Core encoding and decoding interfaces.\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/master/\",\n        html_playground_url = \"http://play.rust-lang.org/\")]\n-#![feature(macro_rules, managed_boxes, default_type_params, phase)]\n+#![feature(macro_rules, default_type_params, phase)]\n \n // test harness access\n #[cfg(test)]"}, {"sha": "3bed4e4040b3a1267c6a5ba57a6951b8bb3ee9f8", "filename": "src/libserialize/serialize.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibserialize%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibserialize%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fserialize.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -16,7 +16,6 @@ Core encoding and decoding interfaces.\n \n use std::path;\n use std::rc::Rc;\n-use std::gc::{Gc, GC};\n use std::cell::{Cell, RefCell};\n \n pub trait Encoder<E> {\n@@ -392,12 +391,6 @@ impl<E, D:Decoder<E>,T:Decodable<D, E>> Decodable<D, E> for Box<T> {\n     }\n }\n \n-impl<E, S:Encoder<E>,T:'static + Encodable<S, E>> Encodable<S, E> for Gc<T> {\n-    fn encode(&self, s: &mut S) -> Result<(), E> {\n-        (**self).encode(s)\n-    }\n-}\n-\n impl<E, S:Encoder<E>,T:Encodable<S, E>> Encodable<S, E> for Rc<T> {\n     #[inline]\n     fn encode(&self, s: &mut S) -> Result<(), E> {\n@@ -412,12 +405,6 @@ impl<E, D:Decoder<E>,T:Decodable<D, E>> Decodable<D, E> for Rc<T> {\n     }\n }\n \n-impl<E, D:Decoder<E>,T:Decodable<D, E> + 'static> Decodable<D, E> for Gc<T> {\n-    fn decode(d: &mut D) -> Result<Gc<T>, E> {\n-        Ok(box(GC) try!(Decodable::decode(d)))\n-    }\n-}\n-\n impl<'a, E, S:Encoder<E>,T:Encodable<S, E>> Encodable<S, E> for &'a [T] {\n     fn encode(&self, s: &mut S) -> Result<(), E> {\n         s.emit_seq(self.len(), |s| {"}, {"sha": "ecef8e9ed902231f2f70f0fabc9399d23b71b1c0", "filename": "src/libstd/gc.rs", "status": "removed", "additions": 0, "deletions": 156, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Flibstd%2Fgc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Flibstd%2Fgc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgc.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,156 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-/*! Task-local garbage-collected boxes\n-\n-The `Gc` type provides shared ownership of an immutable value. Destruction is not deterministic, and\n-will occur some time between every `Gc` handle being gone and the end of the task. The garbage\n-collector is task-local so `Gc<T>` is not sendable.\n-\n-*/\n-\n-#![experimental]\n-#![allow(experimental)]\n-\n-use clone::Clone;\n-use cmp::{Ord, PartialOrd, Ordering, Eq, PartialEq};\n-use default::Default;\n-use fmt;\n-use hash;\n-use kinds::marker;\n-use option::Option;\n-use ops::Deref;\n-use raw;\n-\n-/// Immutable garbage-collected pointer type\n-#[lang=\"gc\"]\n-#[experimental = \"Gc is currently based on reference-counting and will not collect cycles until \\\n-                  task annihilation. For now, cycles need to be broken manually by using `Rc<T>` \\\n-                  with a non-owning `Weak<T>` pointer. A tracing garbage collector is planned.\"]\n-pub struct Gc<T> {\n-    _ptr: *mut T,\n-    marker: marker::NoSend,\n-}\n-\n-#[unstable]\n-impl<T> Clone for Gc<T> {\n-    /// Clone the pointer only\n-    #[inline]\n-    fn clone(&self) -> Gc<T> { *self }\n-}\n-\n-/// An value that represents the task-local managed heap.\n-///\n-/// Use this like `let foo = box(GC) Bar::new(...);`\n-#[lang=\"managed_heap\"]\n-#[cfg(not(test))]\n-pub static GC: () = ();\n-\n-impl<T: PartialEq + 'static> PartialEq for Gc<T> {\n-    #[inline]\n-    fn eq(&self, other: &Gc<T>) -> bool { *(*self) == *(*other) }\n-    #[inline]\n-    fn ne(&self, other: &Gc<T>) -> bool { *(*self) != *(*other) }\n-}\n-impl<T: PartialOrd + 'static> PartialOrd for Gc<T> {\n-    #[inline]\n-    fn partial_cmp(&self, other: &Gc<T>) -> Option<Ordering> {\n-        (**self).partial_cmp(&**other)\n-    }\n-    #[inline]\n-    fn lt(&self, other: &Gc<T>) -> bool { *(*self) < *(*other) }\n-    #[inline]\n-    fn le(&self, other: &Gc<T>) -> bool { *(*self) <= *(*other) }\n-    #[inline]\n-    fn ge(&self, other: &Gc<T>) -> bool { *(*self) >= *(*other) }\n-    #[inline]\n-    fn gt(&self, other: &Gc<T>) -> bool { *(*self) > *(*other) }\n-}\n-impl<T: Ord + 'static> Ord for Gc<T> {\n-    #[inline]\n-    fn cmp(&self, other: &Gc<T>) -> Ordering { (**self).cmp(&**other) }\n-}\n-impl<T: Eq + 'static> Eq for Gc<T> {}\n-\n-impl<T: 'static> Deref<T> for Gc<T> {\n-    fn deref<'a>(&'a self) -> &'a T { &**self }\n-}\n-\n-impl<T: Default + 'static> Default for Gc<T> {\n-    fn default() -> Gc<T> {\n-        box(GC) Default::default()\n-    }\n-}\n-\n-impl<T: 'static> raw::Repr<*const raw::GcBox<T>> for Gc<T> {}\n-\n-impl<S: hash::Writer, T: hash::Hash<S> + 'static> hash::Hash<S> for Gc<T> {\n-    fn hash(&self, s: &mut S) {\n-        (**self).hash(s)\n-    }\n-}\n-\n-impl<T: 'static + fmt::Show> fmt::Show for Gc<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        (**self).fmt(f)\n-    }\n-}\n-\n-#[cfg(test)]\n-mod tests {\n-    use prelude::*;\n-    use super::*;\n-    use cell::RefCell;\n-\n-    #[test]\n-    fn test_managed_clone() {\n-        let a = box(GC) 5i;\n-        let b: Gc<int> = a.clone();\n-        assert!(a == b);\n-    }\n-\n-    #[test]\n-    fn test_clone() {\n-        let x = Gc::new(RefCell::new(5));\n-        let y = x.clone();\n-        *x.borrow().borrow_mut() = 20;\n-        assert_eq!(*y.borrow().borrow(), 20);\n-    }\n-\n-    #[test]\n-    fn test_simple() {\n-        let x = Gc::new(5);\n-        assert_eq!(*x.borrow(), 5);\n-    }\n-\n-    #[test]\n-    fn test_simple_clone() {\n-        let x = Gc::new(5);\n-        let y = x.clone();\n-        assert_eq!(*x.borrow(), 5);\n-        assert_eq!(*y.borrow(), 5);\n-    }\n-\n-    #[test]\n-    fn test_ptr_eq() {\n-        let x = Gc::new(5);\n-        let y = x.clone();\n-        let z = Gc::new(7);\n-        assert!(x.ptr_eq(&x));\n-        assert!(x.ptr_eq(&y));\n-        assert!(!x.ptr_eq(&z));\n-    }\n-\n-    #[test]\n-    fn test_destructor() {\n-        let x = Gc::new(box 5);\n-        assert_eq!(**x.borrow(), 5);\n-    }\n-}"}, {"sha": "c7e8da09e6936e533d904396e35c6970ce0ff682", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -105,7 +105,7 @@\n        html_root_url = \"http://doc.rust-lang.org/master/\",\n        html_playground_url = \"http://play.rust-lang.org/\")]\n \n-#![feature(macro_rules, globs, managed_boxes, linkage)]\n+#![feature(macro_rules, globs, linkage)]\n #![feature(default_type_params, phase, lang_items, unsafe_destructor)]\n #![feature(import_shadowing)]\n \n@@ -136,7 +136,6 @@ extern crate rustrt;\n #[cfg(test)] pub use realstd::cmp;\n #[cfg(test)] pub use realstd::ty;\n #[cfg(test)] pub use realstd::boxed;\n-#[cfg(test)] pub use realstd::gc;\n \n \n // NB: These reexports are in the order they should be listed in rustdoc\n@@ -219,9 +218,6 @@ pub mod rand;\n \n pub mod ascii;\n \n-#[cfg(not(test))]\n-pub mod gc;\n-\n pub mod time;\n \n /* Common traits */"}, {"sha": "0a87c0a344e5269ca9910eee33e8a5984bdc77fc", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -416,7 +416,6 @@ pub enum BinOp {\n \n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum UnOp {\n-    UnBox,\n     UnUniq,\n     UnDeref,\n     UnNot,\n@@ -953,7 +952,6 @@ pub struct UnboxedFnTy {\n pub enum Ty_ {\n     TyNil,\n     TyBot, /* bottom type */\n-    TyBox(P<Ty>),\n     TyUniq(P<Ty>),\n     TyVec(P<Ty>),\n     TyFixedLengthVec(P<Ty>, P<Expr>),"}, {"sha": "3186006258041dd58fbe77372eb0999a62b8e400", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -90,7 +90,6 @@ pub fn is_shift_binop(b: BinOp) -> bool {\n \n pub fn unop_to_string(op: UnOp) -> &'static str {\n     match op {\n-      UnBox => \"box(GC) \",\n       UnUniq => \"box() \",\n       UnDeref => \"*\",\n       UnNot => \"!\","}, {"sha": "1fdb6dd505f4537daf1f6225827371197111520e", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -112,7 +112,6 @@ pub trait AstBuilder {\n     fn expr_deref(&self, sp: Span, e: P<ast::Expr>) -> P<ast::Expr>;\n     fn expr_unary(&self, sp: Span, op: ast::UnOp, e: P<ast::Expr>) -> P<ast::Expr>;\n \n-    fn expr_managed(&self, sp: Span, e: P<ast::Expr>) -> P<ast::Expr>;\n     fn expr_addr_of(&self, sp: Span, e: P<ast::Expr>) -> P<ast::Expr>;\n     fn expr_mut_addr_of(&self, sp: Span, e: P<ast::Expr>) -> P<ast::Expr>;\n     fn expr_field_access(&self, span: Span, expr: P<ast::Expr>, ident: ast::Ident) -> P<ast::Expr>;\n@@ -565,10 +564,6 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         self.expr(sp, ast::ExprUnary(op, e))\n     }\n \n-    fn expr_managed(&self, sp: Span, e: P<ast::Expr>) -> P<ast::Expr> {\n-        self.expr_unary(sp, ast::UnBox, e)\n-    }\n-\n     fn expr_field_access(&self, sp: Span, expr: P<ast::Expr>, ident: ast::Ident) -> P<ast::Expr> {\n         let field_name = token::get_ident(ident);\n         let field_span = Span {"}, {"sha": "7f6302e6c4c9ca50ed313903def769a18b09870b", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -40,7 +40,7 @@ static KNOWN_FEATURES: &'static [(&'static str, Status)] = &[\n     (\"struct_variant\", Active),\n     (\"once_fns\", Active),\n     (\"asm\", Active),\n-    (\"managed_boxes\", Active),\n+    (\"managed_boxes\", Removed),\n     (\"non_ascii_idents\", Active),\n     (\"thread_local\", Active),\n     (\"link_args\", Active),\n@@ -135,14 +135,6 @@ impl<'a> Context<'a> {\n         }\n     }\n \n-    fn gate_box(&self, span: Span) {\n-        self.gate_feature(\"managed_boxes\", span,\n-                          \"The managed box syntax is being replaced by the \\\n-                           `std::gc::Gc` and `std::rc::Rc` types. Equivalent \\\n-                           functionality to managed trait objects will be \\\n-                           implemented but is currently missing.\");\n-    }\n-\n     fn has_feature(&self, feature: &str) -> bool {\n         self.features.iter().any(|n| n.as_slice() == feature)\n     }\n@@ -330,7 +322,6 @@ impl<'a, 'v> Visitor<'v> for Context<'a> {\n                                    experimental and likely to be removed\");\n \n             },\n-            ast::TyBox(_) => { self.gate_box(t.span); }\n             ast::TyUnboxedFn(..) => {\n                 self.gate_feature(\"unboxed_closure_sugar\",\n                                   t.span,\n@@ -344,9 +335,6 @@ impl<'a, 'v> Visitor<'v> for Context<'a> {\n \n     fn visit_expr(&mut self, e: &ast::Expr) {\n         match e.node {\n-            ast::ExprUnary(ast::UnBox, _) => {\n-                self.gate_box(e.span);\n-            }\n             ast::ExprUnboxedFn(..) => {\n                 self.gate_feature(\"unboxed_closures\",\n                                   e.span,"}, {"sha": "84de6c3b91339c7930aae7814b78fb90301a0dae", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -372,7 +372,6 @@ pub fn noop_fold_ty<T: Folder>(t: P<Ty>, fld: &mut T) -> P<Ty> {\n         id: fld.new_id(id),\n         node: match node {\n             TyNil | TyBot | TyInfer => node,\n-            TyBox(ty) => TyBox(fld.fold_ty(ty)),\n             TyUniq(ty) => TyUniq(fld.fold_ty(ty)),\n             TyVec(ty) => TyVec(fld.fold_ty(ty)),\n             TyPtr(mt) => TyPtr(fld.fold_mt(mt)),"}, {"sha": "1a6fb9b85dd255f7fcba5bd1e728d24f33f8933f", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -31,8 +31,6 @@ pub enum ObsoleteSyntax {\n     ObsoleteOwnedPattern,\n     ObsoleteOwnedVector,\n     ObsoleteOwnedSelf,\n-    ObsoleteManagedType,\n-    ObsoleteManagedExpr,\n     ObsoleteImportRenaming,\n     ObsoleteSubsliceMatch,\n     ObsoleteExternCrateRenaming,\n@@ -77,14 +75,6 @@ impl<'a> ParserObsoleteMethods for parser::Parser<'a> {\n                 \"`~self` is no longer supported\",\n                 \"write `self: Box<Self>` instead\"\n             ),\n-            ObsoleteManagedType => (\n-                \"`@` notation for managed pointers\",\n-                \"use `Gc<T>` in `std::gc` instead\"\n-            ),\n-            ObsoleteManagedExpr => (\n-                \"`@` notation for a managed pointer allocation\",\n-                \"use the `box(GC)` operator instead of `@`\"\n-            ),\n             ObsoleteImportRenaming => (\n                 \"`use foo = bar` syntax\",\n                 \"write `use bar as foo` instead\""}, {"sha": "7cce9c2dc3a800d57b15f02b03d09e8d6239630a", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -16,8 +16,7 @@ use ast::{RegionTyParamBound, TraitTyParamBound};\n use ast::{ProvidedMethod, Public, FnStyle};\n use ast::{Mod, BiAdd, Arg, Arm, Attribute, BindByRef, BindByValue};\n use ast::{BiBitAnd, BiBitOr, BiBitXor, BiRem, Block};\n-use ast::{BlockCheckMode, UnBox};\n-use ast::{CaptureByRef, CaptureByValue, CaptureClause};\n+use ast::{BlockCheckMode, CaptureByRef, CaptureByValue, CaptureClause};\n use ast::{Crate, CrateConfig, Decl, DeclItem};\n use ast::{DeclLocal, DefaultBlock, UnDeref, BiDiv, EMPTY_CTXT, EnumDef, ExplicitSelf};\n use ast::{Expr, Expr_, ExprAddrOf, ExprMatch, ExprAgain};\n@@ -50,7 +49,7 @@ use ast::{StructVariantKind, BiSub};\n use ast::StrStyle;\n use ast::{SelfExplicit, SelfRegion, SelfStatic, SelfValue};\n use ast::{TokenTree, TraitItem, TraitRef, TTDelim, TTSeq, TTTok};\n-use ast::{TTNonterminal, TupleVariantKind, Ty, Ty_, TyBot, TyBox};\n+use ast::{TTNonterminal, TupleVariantKind, Ty, Ty_, TyBot};\n use ast::{TypeField, TyFixedLengthVec, TyClosure, TyProc, TyBareFn};\n use ast::{TyTypeof, TyInfer, TypeMethod};\n use ast::{TyNil, TyParam, TyParamBound, TyParen, TyPath, TyPtr, TyQPath};\n@@ -1450,12 +1449,6 @@ impl<'a> Parser<'a> {\n                     t\n                 }\n             }\n-        } else if self.token == token::AT {\n-            // MANAGED POINTER\n-            self.bump();\n-            let span = self.last_span;\n-            self.obsolete(span, ObsoleteManagedType);\n-            TyBox(self.parse_ty(plus_allowed))\n         } else if self.token == token::TILDE {\n             // OWNED POINTER\n             self.bump();\n@@ -2723,14 +2716,6 @@ impl<'a> Parser<'a> {\n             hi = e.span.hi;\n             ex = ExprAddrOf(m, e);\n           }\n-          token::AT => {\n-            self.bump();\n-            let span = self.last_span;\n-            self.obsolete(span, ObsoleteManagedExpr);\n-            let e = self.parse_prefix_expr();\n-            hi = e.span.hi;\n-            ex = self.mk_unary(UnBox, e);\n-          }\n           token::TILDE => {\n             self.bump();\n             let last_span = self.last_span;"}, {"sha": "8400d9aea3b5958654537f6760c038f70e1f6e73", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -546,10 +546,6 @@ impl<'a> State<'a> {\n         match ty.node {\n             ast::TyNil => try!(word(&mut self.s, \"()\")),\n             ast::TyBot => try!(word(&mut self.s, \"!\")),\n-            ast::TyBox(ref ty) => {\n-                try!(word(&mut self.s, \"@\"));\n-                try!(self.print_type(&**ty));\n-            }\n             ast::TyUniq(ref ty) => {\n                 try!(word(&mut self.s, \"~\"));\n                 try!(self.print_type(&**ty));"}, {"sha": "00fdf43663673a2eea2a58f86609a04fd158300d", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -13,7 +13,6 @@\n #![allow(dead_code)]\n #![allow(unused_imports)]\n \n-use std::gc::{Gc, GC};\n use std::slice;\n use std::mem;\n use std::vec;"}, {"sha": "249f87d3102dd545f20402fc9740c0ea09765d71", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -326,7 +326,7 @@ pub fn skip_ty<'v, V: Visitor<'v>>(_: &mut V, _: &'v Ty) {\n \n pub fn walk_ty<'v, V: Visitor<'v>>(visitor: &mut V, typ: &'v Ty) {\n     match typ.node {\n-        TyUniq(ref ty) | TyVec(ref ty) | TyBox(ref ty) | TyParen(ref ty) => {\n+        TyUniq(ref ty) | TyVec(ref ty) | TyParen(ref ty) => {\n             visitor.visit_ty(&**ty)\n         }\n         TyPtr(ref mutable_type) => {"}, {"sha": "bbaf7991fd3cc5510c99ed9e1a5f1bc7529c2537", "filename": "src/test/auxiliary/cci_nested_lib.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -10,7 +10,6 @@\n \n \n use std::cell::RefCell;\n-use std::gc::{Gc, GC};\n \n pub struct Entry<A,B> {\n     key: A,\n@@ -19,7 +18,7 @@ pub struct Entry<A,B> {\n \n pub struct alist<A,B> {\n     eq_fn: extern \"Rust\" fn(A,A) -> bool,\n-    data: Gc<RefCell<Vec<Entry<A,B>>>>,\n+    data: Box<RefCell<Vec<Entry<A,B>>>>,\n }\n \n pub fn alist_add<A:'static,B:'static>(lst: &alist<A,B>, k: A, v: B) {\n@@ -47,7 +46,7 @@ pub fn new_int_alist<B:'static>() -> alist<int, B> {\n     fn eq_int(a: int, b: int) -> bool { a == b }\n     return alist {\n         eq_fn: eq_int,\n-        data: box(GC) RefCell::new(Vec::new()),\n+        data: box RefCell::new(Vec::new()),\n     };\n }\n \n@@ -57,6 +56,6 @@ pub fn new_int_alist_2<B:'static>() -> alist<int, B> {\n     fn eq_int(a: int, b: int) -> bool { a == b }\n     return alist {\n         eq_fn: eq_int,\n-        data: box(GC) RefCell::new(Vec::new()),\n+        data: box RefCell::new(Vec::new()),\n     };\n }"}, {"sha": "5e2a04001b5d6bca59b8ab86bcd2333923925125", "filename": "src/test/auxiliary/crate-method-reexport-grrrrrrr2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fauxiliary%2Fcrate-method-reexport-grrrrrrr2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fauxiliary%2Fcrate-method-reexport-grrrrrrr2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrate-method-reexport-grrrrrrr2.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -27,9 +27,8 @@ pub mod name_pool {\n \n pub mod rust {\n     pub use name_pool::add;\n-    use std::gc::Gc;\n \n-    pub type rt = Gc<()>;\n+    pub type rt = Box<()>;\n \n     pub trait cx {\n         fn cx(&self);"}, {"sha": "3bedbd9089ce2638f8eb91e220d3cba776a8b527", "filename": "src/test/auxiliary/issue-2631-a.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fauxiliary%2Fissue-2631-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fauxiliary%2Fissue-2631-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-2631-a.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -13,9 +13,9 @@\n \n use std::cell::RefCell;\n use std::collections::HashMap;\n-use std::gc::Gc;\n+use std::rc::Rc;\n \n-pub type header_map = HashMap<String, Gc<RefCell<Vec<Gc<String>>>>>;\n+pub type header_map = HashMap<String, Rc<RefCell<Vec<Rc<String>>>>>;\n \n // the unused ty param is necessary so this gets monomorphized\n pub fn request<T>(req: &header_map) {"}, {"sha": "d9d393cc7492c010b247d2759bb15bc2049f94b6", "filename": "src/test/auxiliary/issue-5521.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fauxiliary%2Fissue-5521.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fauxiliary%2Fissue-5521.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-5521.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -10,7 +10,6 @@\n \n \n use std::collections::HashMap;\n-use std::gc::Gc;\n \n-pub type map = Gc<HashMap<uint, uint>>;\n+pub type map = Box<HashMap<uint, uint>>;\n "}, {"sha": "961dad000914a0dfa3022b5520676bd81ba5e2bf", "filename": "src/test/auxiliary/issue13507.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fauxiliary%2Fissue13507.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fauxiliary%2Fissue13507.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue13507.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -56,8 +56,6 @@ pub mod testtypes {\n         VarB(uint, uint)\n     }\n \n-    // Skipping ty_box\n-\n     // Tests ty_uniq (of u8)\n     pub type FooUniq = Box<u8>;\n "}, {"sha": "bb57b4a98bb70674795558348a7570e29b84523a", "filename": "src/test/auxiliary/issue_16723_multiple_items_syntax_ext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fauxiliary%2Fissue_16723_multiple_items_syntax_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fauxiliary%2Fissue_16723_multiple_items_syntax_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_16723_multiple_items_syntax_ext.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -11,7 +11,7 @@\n // ignore-stage1\n // force-host\n \n-#![feature(plugin_registrar, managed_boxes, quote)]\n+#![feature(plugin_registrar, quote)]\n #![crate_type = \"dylib\"]\n \n extern crate syntax;"}, {"sha": "6729373296b769cf67e450afb34688ad2c997b63", "filename": "src/test/bench/task-perf-alloc-unwind.rs", "status": "modified", "additions": 9, "deletions": 19, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -10,18 +10,15 @@\n \n #![feature(unsafe_destructor)]\n \n-extern crate collections;\n extern crate time;\n \n use time::precise_time_s;\n use std::os;\n use std::task;\n-use std::vec;\n-use std::gc::{Gc, GC};\n \n #[deriving(Clone)]\n enum List<T> {\n-    Nil, Cons(T, Gc<List<T>>)\n+    Nil, Cons(T, Box<List<T>>)\n }\n \n enum UniqueList {\n@@ -53,23 +50,21 @@ type nillist = List<()>;\n // Filled with things that have to be unwound\n \n struct State {\n-    managed: Gc<nillist>,\n     unique: Box<nillist>,\n-    tuple: (Gc<nillist>, Box<nillist>),\n-    vec: Vec<Gc<nillist>>,\n+    vec: Vec<Box<nillist>>,\n     res: r\n }\n \n struct r {\n-  _l: Gc<nillist>,\n+  _l: Box<nillist>,\n }\n \n #[unsafe_destructor]\n impl Drop for r {\n     fn drop(&mut self) {}\n }\n \n-fn r(l: Gc<nillist>) -> r {\n+fn r(l: Box<nillist>) -> r {\n     r {\n         _l: l\n     }\n@@ -85,22 +80,17 @@ fn recurse_or_fail(depth: int, st: Option<State>) {\n         let st = match st {\n           None => {\n             State {\n-                managed: box(GC) Nil,\n                 unique: box Nil,\n-                tuple: (box(GC) Nil, box Nil),\n-                vec: vec!(box(GC) Nil),\n-                res: r(box(GC) Nil)\n+                vec: vec!(box Nil),\n+                res: r(box Nil)\n             }\n           }\n           Some(st) => {\n             State {\n-                managed: box(GC) Cons((), st.managed),\n-                unique: box Cons((), box(GC) *st.unique),\n-                tuple: (box(GC) Cons((), st.tuple.ref0().clone()),\n-                        box Cons((), box(GC) *st.tuple.ref1().clone())),\n+                unique: box Cons((), box *st.unique),\n                 vec: st.vec.clone().append(\n-                        &[box(GC) Cons((), *st.vec.last().unwrap())]),\n-                res: r(box(GC) Cons((), st.res._l))\n+                        &[box Cons((), *st.vec.last().unwrap())]),\n+                res: r(box Cons((), st.res._l))\n             }\n           }\n         };"}, {"sha": "7aa3b30ce4919373468783639d78316033c8e4e5", "filename": "src/test/compile-fail/autoderef-full-lval.rs", "status": "modified", "additions": 11, "deletions": 16, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fcompile-fail%2Fautoderef-full-lval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fcompile-fail%2Fautoderef-full-lval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fautoderef-full-lval.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -8,30 +8,25 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-extern crate debug;\n-\n-use std::gc::{Gc, GC};\n-\n struct clam {\n-    x: Gc<int>,\n-    y: Gc<int>,\n+    x: Box<int>,\n+    y: Box<int>,\n }\n \n struct fish {\n-    a: Gc<int>,\n+    a: Box<int>,\n }\n \n fn main() {\n-    let a: clam = clam{x: box(GC) 1, y: box(GC) 2};\n-    let b: clam = clam{x: box(GC) 10, y: box(GC) 20};\n-    let z: int = a.x + b.y; //~ ERROR binary operation `+` cannot be applied to type `Gc<int>`\n-    println!(\"{:?}\", z);\n+    let a: clam = clam{x: box 1, y: box 2};\n+    let b: clam = clam{x: box 10, y: box 20};\n+    let z: int = a.x + b.y; //~ ERROR binary operation `+` cannot be applied to type `Box<int>`\n+    println!(\"{}\", z);\n     assert_eq!(z, 21);\n-    let forty: fish = fish{a: box(GC) 40};\n-    let two: fish = fish{a: box(GC) 2};\n+    let forty: fish = fish{a: box 40};\n+    let two: fish = fish{a: box 2};\n     let answer: int = forty.a + two.a;\n-    //~^ ERROR binary operation `+` cannot be applied to type `Gc<int>`\n-    println!(\"{:?}\", answer);\n+    //~^ ERROR binary operation `+` cannot be applied to type `Box<int>`\n+    println!(\"{}\", answer);\n     assert_eq!(answer, 42);\n }"}, {"sha": "91eb20d19ed9385a34c32961d2e9f45b6b622f22", "filename": "src/test/compile-fail/borrowck-borrow-immut-deref-of-gc-as-mut.rs", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-immut-deref-of-gc-as-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-immut-deref-of-gc-as-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-immut-deref-of-gc-as-mut.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,25 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::GC;\n-\n-struct A;\n-\n-impl A {\n-    fn foo(&mut self) {\n-    }\n-}\n-\n-pub fn main() {\n-    let a = box(GC) A;\n-    a.foo();\n-    //~^ ERROR cannot borrow immutable dereference of `Gc` `*a` as mutable\n-}"}, {"sha": "a8a79056fb13c21963262cc6115f3c105861e98d", "filename": "src/test/compile-fail/borrowck-managed-pointer-deref-scope.rs", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Fcompile-fail%2Fborrowck-managed-pointer-deref-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Fcompile-fail%2Fborrowck-managed-pointer-deref-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-managed-pointer-deref-scope.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,34 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Verify that managed pointers scope is treated like owned pointers.\n-// regression test for #11586\n-\n-\n-use std::gc::{GC, Gc};\n-\n-fn foo(x: &Gc<int>) -> &int {\n-    match x {\n-        &ref y => {\n-            &**y // Do not expect an error here\n-        }\n-    }\n-}\n-\n-fn bar() {\n-    let a = 3i;\n-    let mut y = &a;\n-    if true {\n-        let x = box(GC) 3i;\n-        y = &*x; //~ ERROR `*x` does not live long enough\n-    }\n-}\n-\n-fn main() {}"}, {"sha": "ad1ac3cc15ee344a3ea20cff86a6fe7bca275a4d", "filename": "src/test/compile-fail/borrowck-preserve-box-in-field.rs", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-box-in-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-box-in-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-box-in-field.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,38 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// exec-env:RUST_POISON_ON_FREE=1\n-\n-\n-use std::gc::GC;\n-\n-fn borrow(x: &int, f: |x: &int|) {\n-    let before = *x;\n-    f(x);\n-    let after = *x;\n-    assert_eq!(before, after);\n-}\n-\n-struct F { f: Box<int> }\n-\n-pub fn main() {\n-    let mut x = box(GC) F {f: box 3};\n-    borrow(&*x.f, |b_x| {\n-    //~^ ERROR cannot borrow `x` as mutable because `*x.f` is also borrowed as immutable\n-        assert_eq!(*b_x, 3);\n-        assert_eq!(&(*x.f) as *const int, &(*b_x) as *const int);\n-        //~^ NOTE borrow occurs due to use of `x` in closure\n-        x = box(GC) F {f: box 4};\n-\n-        println!(\"&*b_x = {:p}\", &(*b_x));\n-        assert_eq!(*b_x, 3);\n-        assert!(&(*x.f) as *const int != &(*b_x) as *const int);\n-    })\n-}"}, {"sha": "ec52f0588363c73ba40fa9fdf83ae6f536d74d12", "filename": "src/test/compile-fail/borrowck-preserve-box-in-uniq.rs", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-box-in-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-box-in-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-box-in-uniq.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,38 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// exec-env:RUST_POISON_ON_FREE=1\n-\n-\n-use std::gc::GC;\n-\n-fn borrow(x: &int, f: |x: &int|) {\n-    let before = *x;\n-    f(x);\n-    let after = *x;\n-    assert_eq!(before, after);\n-}\n-\n-struct F { f: Box<int> }\n-\n-pub fn main() {\n-    let mut x = box box(GC) F{f: box 3};\n-    borrow(&*x.f, |b_x| {\n-    //~^ ERROR cannot borrow `x` as mutable because `*x.f` is also borrowed as immutable\n-        assert_eq!(*b_x, 3);\n-        assert_eq!(&(*x.f) as *const int, &(*b_x) as *const int);\n-        //~^ NOTE  borrow occurs due to use of `x` in closure\n-        *x = box(GC) F{f: box 4};\n-\n-        println!(\"&*b_x = {:p}\", &(*b_x));\n-        assert_eq!(*b_x, 3);\n-        assert!(&(*x.f) as *const int != &(*b_x) as *const int);\n-    })\n-}"}, {"sha": "5aff482a32320fb4f04c427351c1af6e4eb47631", "filename": "src/test/compile-fail/borrowck-preserve-box.rs", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-box.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,36 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// exec-env:RUST_POISON_ON_FREE=1\n-\n-\n-use std::gc::GC;\n-\n-fn borrow(x: &int, f: |x: &int|) {\n-    let before = *x;\n-    f(x);\n-    let after = *x;\n-    assert_eq!(before, after);\n-}\n-\n-pub fn main() {\n-    let mut x = box(GC) 3;\n-    borrow(&*x, |b_x| {\n-    //~^ ERROR cannot borrow `x` as mutable because `*x` is also borrowed as immutable\n-        assert_eq!(*b_x, 3);\n-        assert_eq!(&(*x) as *const int, &(*b_x) as *const int);\n-        //~^ NOTE borrow occurs due to use of `x` in closure\n-        x = box(GC) 22;\n-\n-        println!(\"&*b_x = {:p}\", &(*b_x));\n-        assert_eq!(*b_x, 3);\n-        assert!(&(*x) as *const int != &(*b_x) as *const int);\n-    })\n-}"}, {"sha": "6c3c340b97a0a5e190a535dced91b2434f455830", "filename": "src/test/compile-fail/borrowck-preserve-cond-box.rs", "status": "removed", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-cond-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-cond-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-cond-box.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,46 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// exec-env:RUST_POISON_ON_FREE=1\n-\n-\n-use std::gc::GC;\n-\n-fn testfn(cond: bool) {\n-    let mut x = box(GC) 3i;\n-    let mut y = box(GC) 4i;\n-\n-    // borrow x and y\n-    let r_x = &*x;\n-    let r_y = &*y;\n-    let mut r = r_x;\n-    let mut exp = 3;\n-\n-    if cond {\n-        r = r_y;\n-        exp = 4;\n-    }\n-\n-    println!(\"*r = {}, exp = {}\", *r, exp);\n-    assert_eq!(*r, exp);\n-\n-    x = box(GC) 5i; //~ERROR cannot assign to `x` because it is borrowed\n-    y = box(GC) 6i; //~ERROR cannot assign to `y` because it is borrowed\n-\n-    println!(\"*r = {}, exp = {}\", *r, exp);\n-    assert_eq!(*r, exp);\n-    assert_eq!(x, box(GC) 5i);\n-    assert_eq!(y, box(GC) 6i);\n-}\n-\n-pub fn main() {\n-    testfn(true);\n-    testfn(false);\n-}"}, {"sha": "2ad042c69c3bb72e7b988ac10a2e7fec69eb8916", "filename": "src/test/compile-fail/borrowck-preserve-expl-deref.rs", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-expl-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-expl-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-expl-deref.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,38 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// exec-env:RUST_POISON_ON_FREE=1\n-\n-\n-use std::gc::GC;\n-\n-fn borrow(x: &int, f: |x: &int|) {\n-    let before = *x;\n-    f(x);\n-    let after = *x;\n-    assert_eq!(before, after);\n-}\n-\n-struct F { f: Box<int> }\n-\n-pub fn main() {\n-    let mut x = box(GC) F {f: box 3};\n-    borrow(&*(*x).f, |b_x| {\n-    //~^ ERROR cannot borrow `x` as mutable because `*x.f` is also borrowed as immutable\n-        assert_eq!(*b_x, 3);\n-        assert_eq!(&(*x.f) as *const int, &(*b_x) as *const int);\n-        //~^ NOTE borrow occurs due to use of `x` in closure\n-        x = box(GC) F {f: box 4};\n-\n-        println!(\"&*b_x = {:p}\", &(*b_x));\n-        assert_eq!(*b_x, 3);\n-        assert!(&(*x.f) as *const int != &(*b_x) as *const int);\n-    })\n-}"}, {"sha": "29ee79b0079c32839a36fa083c3d3cf4a287de2e", "filename": "src/test/compile-fail/box-static-bound.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Fcompile-fail%2Fbox-static-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Fcompile-fail%2Fbox-static-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbox-static-bound.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,22 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::{Gc, GC};\n-\n-fn f<T>(x: T) -> Gc<T> {\n-    box(GC) x  //~ ERROR the parameter type `T` may not live long enough\n-}\n-\n-fn g<T:'static>(x: T) -> Gc<T> {\n-    box(GC) x  // ok\n-}\n-\n-fn main() {}"}, {"sha": "e29be22ca9acc1494cfe3dae5ed86ea28f7fc473", "filename": "src/test/compile-fail/check-static-values-constraints.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fcompile-fail%2Fcheck-static-values-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fcompile-fail%2Fcheck-static-values-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcheck-static-values-constraints.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -11,7 +11,6 @@\n // Verifies all possible restrictions for static items values.\n \n use std::kinds::marker;\n-use std::gc::{Gc, GC};\n \n struct WithDtor;\n \n@@ -124,9 +123,6 @@ static STATIC16: (&'static Box<MyOwned>, &'static Box<MyOwned>) =\n static mut STATIC17: SafeEnum = Variant1;\n //~^ ERROR mutable static items are not allowed to have destructors\n \n-static STATIC18: Gc<SafeStruct> = box(GC) SafeStruct{field1: Variant1, field2: Variant2(0)};\n-//~^ ERROR static items are not allowed to have custom pointers\n-\n static STATIC19: Box<int> = box 3;\n //~^ ERROR static items are not allowed to have custom pointers\n "}, {"sha": "d77c552be034c60850fe070e74c322782773eb28", "filename": "src/test/compile-fail/core-tls-store-pointer.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fcompile-fail%2Fcore-tls-store-pointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fcompile-fail%2Fcore-tls-store-pointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcore-tls-store-pointer.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -8,11 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Testing that we can't store a reference it task-local storage\n+// Testing that we can't store a reference in task-local storage\n \n-use std::gc::{GC, Gc};\n-\n-local_data_key!(key: Gc<&int>)\n+local_data_key!(key: Box<&int>)\n //~^ ERROR missing lifetime specifier\n \n fn main() {}"}, {"sha": "8cbbfb7b83a55bd1e7abd8d14b2c266fc36c631b", "filename": "src/test/compile-fail/issue-14915.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fcompile-fail%2Fissue-14915.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fcompile-fail%2Fissue-14915.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14915.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -8,12 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::gc::{GC,Gc};\n-\n fn main() {\n     let x: Box<int> = box 0;\n-    let y: Gc<int> = box (GC) 0;\n \n     println!(\"{}\", x + 1); //~ ERROR binary operation `+` cannot be applied to type `Box<int>`\n-    println!(\"{}\", y + 1); //~ ERROR binary operation `+` cannot be applied to type `Gc<int>`\n }"}, {"sha": "30cf7ee7d8888267f46239842a08331fb9193bbe", "filename": "src/test/compile-fail/issue-2063-resource.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fcompile-fail%2Fissue-2063-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fcompile-fail%2Fissue-2063-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2063-resource.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -9,17 +9,14 @@\n // except according to those terms.\n \n \n-use std::gc::Gc;\n-\n // test that autoderef of a type like this does not\n // cause compiler to loop.  Note that no instances\n // of such a type could ever be constructed.\n-struct t { //~ ERROR this type cannot be instantiated\n-  x: x,\n+struct S { //~ ERROR this type cannot be instantiated\n+  x: X,\n   to_str: (),\n }\n \n-struct x(Gc<t>); //~ ERROR this type cannot be instantiated\n+struct X(Box<S>); //~ ERROR this type cannot be instantiated\n \n-fn main() {\n-}\n+fn main() {}"}, {"sha": "cccf730095bdfad0ba5ad1a0902c717d934322bd", "filename": "src/test/compile-fail/issue-3668.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fcompile-fail%2Fissue-3668.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fcompile-fail%2Fissue-3668.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3668.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -8,17 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-use std::gc::Gc;\n-\n-struct P { child: Option<Gc<P>> }\n+struct P { child: Option<Box<P>> }\n trait PTrait {\n-   fn getChildOption(&self) -> Option<Gc<P>>;\n+   fn getChildOption(&self) -> Option<Box<P>>;\n }\n \n impl PTrait for P {\n-   fn getChildOption(&self) -> Option<Gc<P>> {\n-       static childVal: Gc<P> = self.child.get();\n+   fn getChildOption(&self) -> Option<Box<P>> {\n+       static childVal: Box<P> = self.child.get();\n        //~^ ERROR attempt to use a non-constant value in a constant\n        fail!();\n    }"}, {"sha": "73d42aa0de1ad0871493fbb333aa0b558d99e3dd", "filename": "src/test/compile-fail/issue-3763.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fcompile-fail%2Fissue-3763.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fcompile-fail%2Fissue-3763.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3763.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -9,8 +9,6 @@\n // except according to those terms.\n \n \n-use std::gc::GC;\n-\n mod my_mod {\n     pub struct MyStruct {\n         priv_field: int\n@@ -29,11 +27,8 @@ fn main() {\n     //~^ ERROR field `priv_field` of struct `my_mod::MyStruct` is private\n     let _woohoo = (box my_struct).priv_field;\n     //~^ ERROR field `priv_field` of struct `my_mod::MyStruct` is private\n-    let _woohoo = (box(GC) my_struct).priv_field;\n-    //~^ ERROR field `priv_field` of struct `my_mod::MyStruct` is private\n     (&my_struct).happyfun();               //~ ERROR method `happyfun` is private\n     (box my_struct).happyfun();            //~ ERROR method `happyfun` is private\n-    (box(GC) my_struct).happyfun();               //~ ERROR method `happyfun` is private\n     let nope = my_struct.priv_field;\n     //~^ ERROR field `priv_field` of struct `my_mod::MyStruct` is private\n }"}, {"sha": "c6869c44057f924885e18f2572723d5c7cfe1a52", "filename": "src/test/compile-fail/issue-7061.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fcompile-fail%2Fissue-7061.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fcompile-fail%2Fissue-7061.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7061.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -8,14 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-use std::gc::Gc;\n-\n struct BarStruct;\n \n impl<'a> BarStruct {\n-    fn foo(&'a mut self) -> Gc<BarStruct> { self }\n-    //~^ ERROR: error: mismatched types: expected `Gc<BarStruct>`, found `&'a mut BarStruct\n+    fn foo(&'a mut self) -> Box<BarStruct> { self }\n+    //~^ ERROR: error: mismatched types: expected `Box<BarStruct>`, found `&'a mut BarStruct\n }\n \n fn main() {}"}, {"sha": "e29b8bc04d80e1a01fd0becdc406587668b073bc", "filename": "src/test/compile-fail/issue-7364.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fcompile-fail%2Fissue-7364.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fcompile-fail%2Fissue-7364.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7364.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -10,10 +10,9 @@\n \n \n use std::cell::RefCell;\n-use std::gc::{Gc, GC};\n \n // Regresion test for issue 7364\n-static managed: Gc<RefCell<int>> = box(GC) RefCell::new(0);\n+static boxed: Box<RefCell<int>> = box RefCell::new(0);\n //~^ ERROR static items are not allowed to have custom pointers\n \n fn main() { }"}, {"sha": "499144698fb817296d0a5d85203a406cde678c7f", "filename": "src/test/compile-fail/kindck-copy.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -12,7 +12,6 @@\n \n \n use std::rc::Rc;\n-use std::gc::Gc;\n \n fn assert_copy<T:Copy>() { }\n trait Dummy { }\n@@ -76,8 +75,7 @@ fn test<'a,T,U:Copy>(_: &'a int) {\n     // structs containing non-POD are not ok\n     assert_copy::<MyNoncopyStruct>(); //~ ERROR `core::kinds::Copy` is not implemented\n \n-    // managed or ref counted types are not ok\n-    assert_copy::<Gc<int>>();   //~ ERROR `core::kinds::Copy` is not implemented\n+    // ref counted types are not ok\n     assert_copy::<Rc<int>>();   //~ ERROR `core::kinds::Copy` is not implemented\n }\n "}, {"sha": "26b0c5503e32fac47361f26ddb7b9f0251d77023", "filename": "src/test/compile-fail/kindck-destructor-owned.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fcompile-fail%2Fkindck-destructor-owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fcompile-fail%2Fkindck-destructor-owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-destructor-owned.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -9,10 +9,10 @@\n // except according to those terms.\n \n \n-use std::gc::Gc;\n+use std::rc::Rc;\n \n struct Foo {\n-    f: Gc<int>,\n+    f: Rc<int>,\n }\n \n impl Drop for Foo {"}, {"sha": "6ca3f0174bb7449c524cd393d06c371074110f44", "filename": "src/test/compile-fail/kindck-nonsendable-1.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -9,12 +9,12 @@\n // except according to those terms.\n \n \n-use std::gc::{Gc, GC};\n+use std::rc::Rc;\n \n-fn foo(_x: Gc<uint>) {}\n+fn foo(_x: Rc<uint>) {}\n \n fn main() {\n-    let x = box(GC) 3u;\n+    let x = Rc::new(3u);\n     let _: proc():Send = proc() foo(x); //~ ERROR `core::kinds::Send` is not implemented\n     let _: proc():Send = proc() foo(x); //~ ERROR `core::kinds::Send` is not implemented\n     let _: proc():Send = proc() foo(x); //~ ERROR `core::kinds::Send` is not implemented"}, {"sha": "375969ffb5267067e9044b58d7125b97d456dc94", "filename": "src/test/compile-fail/lint-heap-memory.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Fcompile-fail%2Flint-heap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Fcompile-fail%2Flint-heap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-heap-memory.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,30 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![forbid(heap_memory)]\n-#![allow(dead_code)]\n-\n-use std::gc::{Gc, GC};\n-\n-struct Foo {\n-    x: Gc<int>, //~ ERROR type uses managed\n-}\n-\n-struct Bar { x: Box<int> } //~ ERROR type uses owned\n-\n-fn main() {\n-    let _x : Bar = Bar {x : box 10i}; //~ ERROR type uses owned\n-\n-    box(GC) 2i; //~ ERROR type uses managed\n-\n-    box 2i; //~ ERROR type uses owned\n-    fn g(_: Box<Clone>) {} //~ ERROR type uses owned\n-    proc() {}; //~ ERROR type uses owned\n-}"}, {"sha": "0a28242fb1b3a950fb15ef80f013ec3b39c39dc8", "filename": "src/test/compile-fail/lint-managed-heap-memory.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Fcompile-fail%2Flint-managed-heap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Fcompile-fail%2Flint-managed-heap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-managed-heap-memory.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,23 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![allow(dead_code)]\n-#![forbid(managed_heap_memory)]\n-\n-use std::gc::{Gc, GC};\n-\n-struct Foo {\n-    x: Gc<int> //~ ERROR type uses managed\n-}\n-\n-fn main() {\n-    let _x : Foo = Foo {x : box(GC) 10};\n-    //~^ ERROR type uses managed\n-}"}, {"sha": "602ffe2680b04a7c7b79e7263d05810c0bc7d573", "filename": "src/test/compile-fail/new-box-syntax-bad.rs", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Fcompile-fail%2Fnew-box-syntax-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Fcompile-fail%2Fnew-box-syntax-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnew-box-syntax-bad.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,24 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-/* Any copyright is dedicated to the Public Domain.\n- * http://creativecommons.org/publicdomain/zero/1.0/ */\n-\n-// Tests that the new `box` syntax works with unique pointers and GC pointers.\n-\n-use std::gc::{Gc, GC};\n-use std::boxed::{Box, HEAP};\n-\n-pub fn main() {\n-    let x: Gc<int> = box(HEAP) 2;  //~ ERROR mismatched types\n-    let y: Gc<int> = box(HEAP)(1 + 2);  //~ ERROR mismatched types\n-    let z: Box<int> = box(GC)(4 + 5);   //~ ERROR mismatched types\n-}\n-"}, {"sha": "83dbd9ac1bf7282687c0575710d36425891508e3", "filename": "src/test/compile-fail/no-send-res-ports.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -10,14 +10,14 @@\n \n #![feature(unsafe_destructor)]\n \n-extern crate debug;\n-\n use std::task;\n-use std::gc::{Gc, GC};\n+use std::rc::Rc;\n \n-struct Port<T>(Gc<T>);\n+#[deriving(Show)]\n+struct Port<T>(Rc<T>);\n \n fn main() {\n+    #[deriving(Show)]\n     struct foo {\n       _x: Port<()>,\n     }\n@@ -33,11 +33,11 @@ fn main() {\n         }\n     }\n \n-    let x = foo(Port(box(GC) ()));\n+    let x = foo(Port(Rc::new(())));\n \n     task::spawn(proc() {\n         let y = x;\n         //~^ ERROR `core::kinds::Send` is not implemented\n-        println!(\"{:?}\", y);\n+        println!(\"{}\", y);\n     });\n }"}, {"sha": "2765182225f96183a03ad52d0c6a98f3ec9eaf1c", "filename": "src/test/compile-fail/occurs-check-2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fcompile-fail%2Foccurs-check-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fcompile-fail%2Foccurs-check-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Foccurs-check-2.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -8,11 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::gc::GC;\n \n fn main() {\n     let f;\n     let g;\n     g = f;\n-    f = box(GC) g; //~ ERROR cyclic type of infinite size\n+    f = box g; //~ ERROR cyclic type of infinite size\n }"}, {"sha": "44318b36f4b8a1c82b0137fc749f698e28ba9ead", "filename": "src/test/compile-fail/occurs-check.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fcompile-fail%2Foccurs-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fcompile-fail%2Foccurs-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Foccurs-check.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -9,9 +9,7 @@\n // except according to those terms.\n \n \n-use std::gc::GC;\n-\n fn main() {\n     let f;\n-    f = box(GC) f; //~ ERROR cyclic type of infinite size\n+    f = box f; //~ ERROR cyclic type of infinite size\n }"}, {"sha": "0e8bb40e0ffee01357bae2610b948078587603a1", "filename": "src/test/compile-fail/pinned-deep-copy.rs", "status": "removed", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,50 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(unsafe_destructor)]\n-\n-extern crate debug;\n-\n-use std::cell::Cell;\n-use std::gc::{Gc, GC};\n-\n-struct r {\n-  i: Gc<Cell<int>>,\n-}\n-\n-#[unsafe_destructor]\n-impl Drop for r {\n-    fn drop(&mut self) {\n-        unsafe {\n-            self.i.set(self.i.get() + 1);\n-        }\n-    }\n-}\n-\n-fn r(i: Gc<Cell<int>>) -> r {\n-    r {\n-        i: i\n-    }\n-}\n-\n-struct A {\n-    y: r,\n-}\n-\n-fn main() {\n-    let i = box(GC) Cell::new(0);\n-    {\n-        // Can't do this copy\n-        let x = box box box A {y: r(i)};\n-        let _z = x.clone(); //~ ERROR not implemented\n-        println!(\"{:?}\", x);\n-    }\n-    println!(\"{:?}\", *i);\n-}"}, {"sha": "2c068052c541c0aa9a8055936d61a2fbccfa5e72", "filename": "src/test/compile-fail/regions-appearance-constraint.rs", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Fcompile-fail%2Fregions-appearance-constraint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Fcompile-fail%2Fregions-appearance-constraint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-appearance-constraint.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,36 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test no-special rooting is used for managed boxes\n-\n-\n-use std::gc::GC;\n-\n-fn testfn(cond: bool) {\n-    let mut x = box(GC) 3i;\n-    let mut y = box(GC) 4i;\n-\n-    let mut a = &*x;\n-\n-    let mut exp = 3i;\n-    if cond {\n-        a = &*y;\n-\n-        exp = 4;\n-    }\n-\n-    x = box(GC) 5i; //~ERROR cannot assign to `x` because it is borrowed\n-    y = box(GC) 6i; //~ERROR cannot assign to `y` because it is borrowed\n-    assert_eq!(*a, exp);\n-    assert_eq!(x, box(GC) 5i);\n-    assert_eq!(y, box(GC) 6i);\n-}\n-\n-pub fn main() {}"}, {"sha": "b710578969b0d8bf6ed1f68585633c36c48174d4", "filename": "src/test/compile-fail/regions-infer-borrow-scope-too-big.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fcompile-fail%2Fregions-infer-borrow-scope-too-big.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fcompile-fail%2Fregions-infer-borrow-scope-too-big.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-borrow-scope-too-big.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -9,8 +9,6 @@\n // except according to those terms.\n \n \n-use std::gc::Gc;\n-\n struct point {\n     x: int,\n     y: int,\n@@ -20,7 +18,7 @@ fn x_coord<'r>(p: &'r point) -> &'r int {\n     return &p.x;\n }\n \n-fn foo<'a>(p: Gc<point>) -> &'a int {\n+fn foo<'a>(p: Box<point>) -> &'a int {\n     let xc = x_coord(&*p); //~ ERROR `*p` does not live long enough\n     assert_eq!(*xc, 3);\n     return xc;"}, {"sha": "cf1fa2cfc4c2cbd8986f850bf48f8d06becf6086", "filename": "src/test/compile-fail/regions-infer-borrow-scope-within-loop.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fcompile-fail%2Fregions-infer-borrow-scope-within-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fcompile-fail%2Fregions-infer-borrow-scope-within-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-borrow-scope-within-loop.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -9,11 +9,9 @@\n // except according to those terms.\n \n \n-use std::gc::Gc;\n-\n fn borrow<T>(x: &T) -> &T {x}\n \n-fn foo(cond: || -> bool, make_box: || -> Gc<int>) {\n+fn foo(cond: || -> bool, make_box: || -> Box<int>) {\n     let mut y: &int;\n     loop {\n         let x = make_box();"}, {"sha": "f93907f5e5cb00497d4a6c17d2b9850bb664e1df", "filename": "src/test/compile-fail/regions-infer-paramd-indirect.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-indirect.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -12,27 +12,25 @@\n // Check that we correctly infer that b and c must be region\n // parameterized because they reference a which requires a region.\n \n-use std::gc::Gc;\n-\n type a<'a> = &'a int;\n-type b<'a> = Gc<a<'a>>;\n+type b<'a> = Box<a<'a>>;\n \n struct c<'a> {\n-    f: Gc<b<'a>>\n+    f: Box<b<'a>>\n }\n \n trait set_f<'a> {\n-    fn set_f_ok(&mut self, b: Gc<b<'a>>);\n-    fn set_f_bad(&mut self, b: Gc<b>);\n+    fn set_f_ok(&mut self, b: Box<b<'a>>);\n+    fn set_f_bad(&mut self, b: Box<b>);\n }\n \n impl<'a> set_f<'a> for c<'a> {\n-    fn set_f_ok(&mut self, b: Gc<b<'a>>) {\n+    fn set_f_ok(&mut self, b: Box<b<'a>>) {\n         self.f = b;\n     }\n \n-    fn set_f_bad(&mut self, b: Gc<b>) {\n-        self.f = b; //~ ERROR mismatched types: expected `Gc<Gc<&'a int>>`, found `Gc<Gc<&int>>`\n+    fn set_f_bad(&mut self, b: Box<b>) {\n+        self.f = b; //~ ERROR mismatched types: expected `Box<Box<&'a int>>`, found `Box<Box<&int>>`\n     }\n }\n "}, {"sha": "1e5a5ecc08e0842946d8d255af1f5d6c6d51d768", "filename": "src/test/compile-fail/static-region-bound.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fcompile-fail%2Fstatic-region-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fcompile-fail%2Fstatic-region-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-region-bound.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -9,12 +9,10 @@\n // except according to those terms.\n \n \n-use std::gc::GC;\n-\n fn f<T:'static>(_: T) {}\n \n fn main() {\n-    let x = box(GC) 3i;\n+    let x = box 3i;\n     f(x);\n     let x = &3i; //~ ERROR borrowed value does not live long enough\n     f(x);"}, {"sha": "2c3d48e9bf735795db5ea8af67e8e67a7b72343f", "filename": "src/test/compile-fail/struct-field-assignability.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fcompile-fail%2Fstruct-field-assignability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fcompile-fail%2Fstruct-field-assignability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-field-assignability.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -11,13 +11,11 @@\n // except according to those terms.\n \n \n-use std::gc::{Gc, GC};\n-\n struct Foo<'a> {\n     x: &'a int\n }\n \n pub fn main() {\n-    let f = Foo { x: &*(box(GC) 3) }; //~ ERROR borrowed value does not live long enough\n+    let f = Foo { x: &*(box 3) }; //~ ERROR borrowed value does not live long enough\n     assert_eq!(*f.x, 3);\n }"}, {"sha": "53ebe1f9b5b64614e0c56ebdf5d6c1ee61099209", "filename": "src/test/compile-fail/terr-sorts.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fcompile-fail%2Fterr-sorts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fcompile-fail%2Fterr-sorts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fterr-sorts.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -9,18 +9,16 @@\n // except according to those terms.\n \n \n-use std::gc::Gc;\n-\n struct foo {\n     a: int,\n     b: int,\n }\n \n-type bar = Gc<foo>;\n+type bar = Box<foo>;\n \n fn want_foo(f: foo) {}\n fn have_bar(b: bar) {\n-    want_foo(b); //~ ERROR (expected struct foo, found Gc-ptr)\n+    want_foo(b); //~ ERROR (expected struct foo, found box)\n }\n \n fn main() {}"}, {"sha": "73224c7b45cec051d46695e80625460d40e734be", "filename": "src/test/compile-fail/trait-impl-method-mismatch.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fcompile-fail%2Ftrait-impl-method-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fcompile-fail%2Ftrait-impl-method-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-impl-method-mismatch.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -9,15 +9,13 @@\n // except according to those terms.\n \n \n-use std::gc::Gc;\n-\n trait Mumbo {\n-    fn jumbo(&self, x: Gc<uint>) -> uint;\n+    fn jumbo(&self, x: &uint) -> uint;\n }\n \n impl Mumbo for uint {\n     // Cannot have a larger effect than the trait:\n-    unsafe fn jumbo(&self, x: Gc<uint>) { *self + *x; }\n+    unsafe fn jumbo(&self, x: &uint) { *self + *x; }\n     //~^ ERROR expected normal fn, found unsafe fn\n }\n "}, {"sha": "4c2805bf4bd0c4d6c594d09ac8cc45a570e5599f", "filename": "src/test/compile-fail/unique-unique-kind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -9,12 +9,12 @@\n // except according to those terms.\n \n \n-use std::gc::GC;\n+use std::rc::Rc;\n \n fn f<T:Send>(_i: T) {\n }\n \n fn main() {\n-    let i = box box(GC) 100i;\n+    let i = box Rc::new(100i);\n     f(i); //~ ERROR `core::kinds::Send` is not implemented\n }"}, {"sha": "79f29c6b359d63629c9184805d7da9186c4695b4", "filename": "src/test/compile-fail/unique-vec-res.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -10,16 +10,15 @@\n \n #![feature(unsafe_destructor)]\n \n-extern crate debug;\n use std::cell::Cell;\n-use std::gc::{Gc, GC};\n \n-struct r {\n-  i: Gc<Cell<int>>,\n+#[deriving(Show)]\n+struct r<'a> {\n+  i: &'a Cell<int>,\n }\n \n #[unsafe_destructor]\n-impl Drop for r {\n+impl<'a> Drop for r<'a> {\n     fn drop(&mut self) {\n         unsafe {\n             self.i.set(self.i.get() + 1);\n@@ -31,13 +30,13 @@ fn f<T>(_i: Vec<T> , _j: Vec<T> ) {\n }\n \n fn main() {\n-    let i1 = box(GC) Cell::new(0);\n-    let i2 = box(GC) Cell::new(1);\n+    let i1 = &Cell::new(0);\n+    let i2 = &Cell::new(1);\n     let r1 = vec!(box r { i: i1 });\n     let r2 = vec!(box r { i: i2 });\n     f(r1.clone(), r2.clone());\n     //~^ ERROR the trait `core::clone::Clone` is not implemented\n     //~^^ ERROR the trait `core::clone::Clone` is not implemented\n-    println!(\"{:?}\", (r2, i1.get()));\n-    println!(\"{:?}\", (r1, i2.get()));\n+    println!(\"{}\", (r2, i1.get()));\n+    println!(\"{}\", (r1, i2.get()));\n }"}, {"sha": "102cb636550dba42336e365e83559141ddaae89a", "filename": "src/test/compile-fail/unsendable-class.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fcompile-fail%2Funsendable-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fcompile-fail%2Funsendable-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsendable-class.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -12,14 +12,14 @@\n // Test that a class with an unsendable field can't be\n // sent\n \n-use std::gc::{Gc, GC};\n+use std::rc::Rc;\n \n struct foo {\n   i: int,\n-  j: Gc<String>,\n+  j: Rc<String>,\n }\n \n-fn foo(i:int, j: Gc<String>) -> foo {\n+fn foo(i:int, j: Rc<String>) -> foo {\n     foo {\n         i: i,\n         j: j\n@@ -29,5 +29,5 @@ fn foo(i:int, j: Gc<String>) -> foo {\n fn main() {\n   let cat = \"kitty\".to_string();\n   let (tx, _) = channel(); //~ ERROR `core::kinds::Send` is not implemented\n-  tx.send(foo(42, box(GC) (cat))); //~ ERROR `core::kinds::Send` is not implemented\n+  tx.send(foo(42, Rc::new(cat))); //~ ERROR `core::kinds::Send` is not implemented\n }"}, {"sha": "a2b8c54c3801d4e5ea618cfeaebfdd4fe8e100b0", "filename": "src/test/debuginfo/borrowed-managed-basic.rs", "status": "removed", "additions": 0, "deletions": 166, "changes": 166, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Fdebuginfo%2Fborrowed-managed-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Fdebuginfo%2Fborrowed-managed-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fborrowed-managed-basic.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,166 +0,0 @@\n-// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-android: FIXME(#10381)\n-\n-\n-// Gdb doesn't know about UTF-32 character encoding and will print a rust char as only\n-// its numerical value.\n-\n-// compile-flags:-g\n-\n-// === GDB TESTS ===================================================================================\n-\n-// gdb-command:rbreak zzz\n-// gdb-command:run\n-// gdb-command:finish\n-// gdb-command:print *bool_ref\n-// gdb-check:$1 = true\n-\n-// gdb-command:print *int_ref\n-// gdb-check:$2 = -1\n-\n-// gdb-command:print *char_ref\n-// gdb-check:$3 = 97\n-\n-// gdb-command:print/d *i8_ref\n-// gdb-check:$4 = 68\n-\n-// gdb-command:print *i16_ref\n-// gdb-check:$5 = -16\n-\n-// gdb-command:print *i32_ref\n-// gdb-check:$6 = -32\n-\n-// gdb-command:print *i64_ref\n-// gdb-check:$7 = -64\n-\n-// gdb-command:print *uint_ref\n-// gdb-check:$8 = 1\n-\n-// gdb-command:print/d *u8_ref\n-// gdb-check:$9 = 100\n-\n-// gdb-command:print *u16_ref\n-// gdb-check:$10 = 16\n-\n-// gdb-command:print *u32_ref\n-// gdb-check:$11 = 32\n-\n-// gdb-command:print *u64_ref\n-// gdb-check:$12 = 64\n-\n-// gdb-command:print *f32_ref\n-// gdb-check:$13 = 2.5\n-\n-// gdb-command:print *f64_ref\n-// gdb-check:$14 = 3.5\n-\n-\n-// === LLDB TESTS ==================================================================================\n-\n-// lldb-command:type format add -f decimal char\n-// lldb-command:type format add -f decimal 'unsigned char'\n-// lldb-command:run\n-\n-// lldb-command:print *bool_ref\n-// lldb-check:[...]$0 = true\n-\n-// lldb-command:print *int_ref\n-// lldb-check:[...]$1 = -1\n-\n-// LLDB can't handle 32bit chars yet\n-// d ebugger:print *char_ref\n-// c heck:[...]$x = 97\n-\n-// lldb-command:print *i8_ref\n-// lldb-check:[...]$2 = 68\n-\n-// lldb-command:print *i16_ref\n-// lldb-check:[...]$3 = -16\n-\n-// lldb-command:print *i32_ref\n-// lldb-check:[...]$4 = -32\n-\n-// lldb-command:print *i64_ref\n-// lldb-check:[...]$5 = -64\n-\n-// lldb-command:print *uint_ref\n-// lldb-check:[...]$6 = 1\n-\n-// lldb-command:print *u8_ref\n-// lldb-check:[...]$7 = 100\n-\n-// lldb-command:print *u16_ref\n-// lldb-check:[...]$8 = 16\n-\n-// lldb-command:print *u32_ref\n-// lldb-check:[...]$9 = 32\n-\n-// lldb-command:print *u64_ref\n-// lldb-check:[...]$10 = 64\n-\n-// lldb-command:print *f32_ref\n-// lldb-check:[...]$11 = 2.5\n-\n-// lldb-command:print *f64_ref\n-// lldb-check:[...]$12 = 3.5\n-\n-#![allow(unused_variable)]\n-\n-use std::gc::{Gc, GC};\n-\n-fn main() {\n-    let bool_box: Gc<bool> = box(GC) true;\n-    let bool_ref: &bool = &*bool_box;\n-\n-    let int_box: Gc<int> = box(GC) -1;\n-    let int_ref: &int = &*int_box;\n-\n-    let char_box: Gc<char> = box(GC) 'a';\n-    let char_ref: &char = &*char_box;\n-\n-    let i8_box: Gc<i8> = box(GC) 68;\n-    let i8_ref: &i8 = &*i8_box;\n-\n-    let i16_box: Gc<i16> = box(GC) -16;\n-    let i16_ref: &i16 = &*i16_box;\n-\n-    let i32_box: Gc<i32> = box(GC) -32;\n-    let i32_ref: &i32 = &*i32_box;\n-\n-    let i64_box: Gc<i64> = box(GC) -64;\n-    let i64_ref: &i64 = &*i64_box;\n-\n-    let uint_box: Gc<uint> = box(GC) 1;\n-    let uint_ref: &uint = &*uint_box;\n-\n-    let u8_box: Gc<u8> = box(GC) 100;\n-    let u8_ref: &u8 = &*u8_box;\n-\n-    let u16_box: Gc<u16> = box(GC) 16;\n-    let u16_ref: &u16 = &*u16_box;\n-\n-    let u32_box: Gc<u32> = box(GC) 32;\n-    let u32_ref: &u32 = &*u32_box;\n-\n-    let u64_box: Gc<u64> = box(GC) 64;\n-    let u64_ref: &u64 = &*u64_box;\n-\n-    let f32_box: Gc<f32> = box(GC) 2.5;\n-    let f32_ref: &f32 = &*f32_box;\n-\n-    let f64_box: Gc<f64> = box(GC) 3.5;\n-    let f64_ref: &f64 = &*f64_box;\n-\n-    zzz(); // #break\n-}\n-\n-fn zzz() {()}"}, {"sha": "8b9c790bbbf5875dc1012fa77763a91e29b55549", "filename": "src/test/debuginfo/borrowed-struct.rs", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fdebuginfo%2Fborrowed-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fdebuginfo%2Fborrowed-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fborrowed-struct.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -29,15 +29,6 @@\n // gdb-command:print *ref_to_unnamed\n // gdb-check:$4 = {x = 11, y = 24.5}\n \n-// gdb-command:print *managed_val_ref\n-// gdb-check:$5 = {x = 12, y = 25.5}\n-\n-// gdb-command:print *managed_val_interior_ref_1\n-// gdb-check:$6 = 12\n-\n-// gdb-command:print *managed_val_interior_ref_2\n-// gdb-check:$7 = 25.5\n-\n // gdb-command:print *unique_val_ref\n // gdb-check:$8 = {x = 13, y = 26.5}\n \n@@ -64,15 +55,6 @@\n // lldb-command:print *ref_to_unnamed\n // lldb-check:[...]$3 = SomeStruct { x: 11, y: 24.5 }\n \n-// lldb-command:print *managed_val_ref\n-// lldb-check:[...]$4 = SomeStruct { x: 12, y: 25.5 }\n-\n-// lldb-command:print *managed_val_interior_ref_1\n-// lldb-check:[...]$5 = 12\n-\n-// lldb-command:print *managed_val_interior_ref_2\n-// lldb-check:[...]$6 = 25.5\n-\n // lldb-command:print *unique_val_ref\n // lldb-check:[...]$7 = SomeStruct { x: 13, y: 26.5 }\n \n@@ -84,8 +66,6 @@\n \n #![allow(unused_variable)]\n \n-use std::gc::GC;\n-\n struct SomeStruct {\n     x: int,\n     y: f64\n@@ -98,11 +78,6 @@ fn main() {\n     let stack_val_interior_ref_2: &f64 = &stack_val.y;\n     let ref_to_unnamed: &SomeStruct = &SomeStruct { x: 11, y: 24.5 };\n \n-    let managed_val = box(GC) SomeStruct { x: 12, y: 25.5 };\n-    let managed_val_ref: &SomeStruct = &*managed_val;\n-    let managed_val_interior_ref_1: &int = &managed_val.x;\n-    let managed_val_interior_ref_2: &f64 = &managed_val.y;\n-\n     let unique_val = box SomeStruct { x: 13, y: 26.5 };\n     let unique_val_ref: &SomeStruct = &*unique_val;\n     let unique_val_interior_ref_1: &int = &unique_val.x;"}, {"sha": "2c78d14a86c755abc65261f7e3f036f3ef73a38e", "filename": "src/test/debuginfo/borrowed-tuple.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fdebuginfo%2Fborrowed-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fdebuginfo%2Fborrowed-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fborrowed-tuple.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -25,9 +25,6 @@\n // gdb-command:print *ref_to_unnamed\n // gdb-check:$2 = {-15, -20}\n \n-// gdb-command:print *managed_val_ref\n-// gdb-check:$3 = {-16, -21}\n-\n // gdb-command:print *unique_val_ref\n // gdb-check:$4 = {-17, -22}\n \n@@ -42,25 +39,17 @@\n // lldb-command:print *ref_to_unnamed\n // lldb-check:[...]$1 = (-15, -20)\n \n-// lldb-command:print *managed_val_ref\n-// lldb-check:[...]$2 = (-16, -21)\n-\n // lldb-command:print *unique_val_ref\n // lldb-check:[...]$3 = (-17, -22)\n \n \n #![allow(unused_variable)]\n \n-use std::gc::{Gc, GC};\n-\n fn main() {\n     let stack_val: (i16, f32) = (-14, -19f32);\n     let stack_val_ref: &(i16, f32) = &stack_val;\n     let ref_to_unnamed: &(i16, f32) = &(-15, -20f32);\n \n-    let managed_val: Gc<(i16, f32)> = box(GC) (-16, -21f32);\n-    let managed_val_ref: &(i16, f32) = &*managed_val;\n-\n     let unique_val: Box<(i16, f32)> = box() (-17, -22f32);\n     let unique_val_ref: &(i16, f32) = &*unique_val;\n "}, {"sha": "c459b9be3d09ca08660e2435b8ad5a449d2c77d7", "filename": "src/test/debuginfo/box.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fdebuginfo%2Fbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fdebuginfo%2Fbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fbox.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -22,10 +22,6 @@\n // gdb-check:$1 = 1\n // gdb-command:print *b\n // gdb-check:$2 = {2, 3.5}\n-// gdb-command:print c->val\n-// gdb-check:$3 = 4\n-// gdb-command:print d->val\n-// gdb-check:$4 = false\n \n \n // === LLDB TESTS ==================================================================================\n@@ -35,20 +31,12 @@\n // lldb-check:[...]$0 = 1\n // lldb-command:print *b\n // lldb-check:[...]$1 = (2, 3.5)\n-// lldb-command:print c->val\n-// lldb-check:[...]$2 = 4\n-// lldb-command:print d->val\n-// lldb-check:[...]$3 = false\n \n #![allow(unused_variable)]\n \n-use std::gc::GC;\n-\n fn main() {\n     let a = box 1i;\n     let b = box() (2i, 3.5f64);\n-    let c = box(GC) 4i;\n-    let d = box(GC) false;\n \n     zzz(); // #break\n }"}, {"sha": "a22b9fdea5c8f273a13ab140f174b37283c9e9bd", "filename": "src/test/debuginfo/boxed-struct.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fdebuginfo%2Fboxed-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fdebuginfo%2Fboxed-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fboxed-struct.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -21,15 +21,9 @@\n // gdb-command:print *unique\n // gdb-check:$1 = {x = 99, y = 999, z = 9999, w = 99999}\n \n-// gdb-command:print managed->val\n-// gdb-check:$2 = {x = 88, y = 888, z = 8888, w = 88888}\n-\n // gdb-command:print *unique_dtor\n // gdb-check:$3 = {x = 77, y = 777, z = 7777, w = 77777}\n \n-// gdb-command:print managed_dtor->val\n-// gdb-check:$4 = {x = 33, y = 333, z = 3333, w = 33333}\n-\n \n // === LLDB TESTS ==================================================================================\n \n@@ -38,19 +32,11 @@\n // lldb-command:print *unique\n // lldb-check:[...]$0 = StructWithSomePadding { x: 99, y: 999, z: 9999, w: 99999 }\n \n-// lldb-command:print managed->val\n-// lldb-check:[...]$1 = StructWithSomePadding { x: 88, y: 888, z: 8888, w: 88888 }\n-\n // lldb-command:print *unique_dtor\n // lldb-check:[...]$2 = StructWithDestructor { x: 77, y: 777, z: 7777, w: 77777 }\n \n-// lldb-command:print managed_dtor->val\n-// lldb-check:[...]$3 = StructWithDestructor { x: 33, y: 333, z: 3333, w: 33333 }\n-\n #![allow(unused_variable)]\n \n-use std::gc::GC;\n-\n struct StructWithSomePadding {\n     x: i16,\n     y: i32,\n@@ -72,11 +58,8 @@ impl Drop for StructWithDestructor {\n fn main() {\n \n     let unique = box StructWithSomePadding { x: 99, y: 999, z: 9999, w: 99999 };\n-    let managed = box(GC) StructWithSomePadding { x: 88, y: 888, z: 8888, w: 88888 };\n \n     let unique_dtor = box StructWithDestructor { x: 77, y: 777, z: 7777, w: 77777 };\n-    let managed_dtor = box(GC) StructWithDestructor { x: 33, y: 333, z: 3333, w: 33333 };\n-\n     zzz(); // #break\n }\n "}, {"sha": "11df00ee4fe2683f3f7bb8376c9dd6a14876499d", "filename": "src/test/debuginfo/by-value-self-argument-in-trait-impl.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fdebuginfo%2Fby-value-self-argument-in-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fdebuginfo%2Fby-value-self-argument-in-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fby-value-self-argument-in-trait-impl.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -33,11 +33,6 @@\n // gdb-check:$3 = {4444.5, 5555, 6666, 7777.5}\n // gdb-command:continue\n \n-// gdb-command:finish\n-// gdb-command:print self->val\n-// gdb-check:$4 = 8888\n-// gdb-command:continue\n-\n \n // === LLDB TESTS ==================================================================================\n \n@@ -55,12 +50,6 @@\n // lldb-check:[...]$2 = (4444.5, 5555, 6666, 7777.5)\n // lldb-command:continue\n \n-// lldb-command:print self->val\n-// lldb-check:[...]$3 = 8888\n-// lldb-command:continue\n-\n-use std::gc::{Gc, GC};\n-\n trait Trait {\n     fn method(self) -> Self;\n }\n@@ -91,18 +80,10 @@ impl Trait for (f64, int, int, f64) {\n     }\n }\n \n-impl Trait for Gc<int> {\n-    fn method(self) -> Gc<int> {\n-        zzz(); // #break\n-        self\n-    }\n-}\n-\n fn main() {\n     let _ = (1111 as int).method();\n     let _ = Struct { x: 2222, y: 3333 }.method();\n     let _ = (4444.5, 5555, 6666, 7777.5).method();\n-    let _ = (box(GC) 8888).method();\n }\n \n fn zzz() { () }"}, {"sha": "e5da4d2cdb16f0ffc48524947f66c462c1dd02b9", "filename": "src/test/debuginfo/managed-enum.rs", "status": "removed", "additions": 0, "deletions": 85, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Fdebuginfo%2Fmanaged-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Fdebuginfo%2Fmanaged-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmanaged-enum.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,85 +0,0 @@\n-// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-android: FIXME(#10381)\n-\n-// compile-flags:-g\n-\n-// === GDB TESTS ===================================================================================\n-\n-// gdb-command:rbreak zzz\n-// gdb-command:run\n-// gdb-command:finish\n-\n-// gdb-command:print the_a->val\n-// gdb-check:$1 = {{TheA, x = 0, y = 8970181431921507452}, {TheA, 0, 2088533116, 2088533116}}\n-\n-// gdb-command:print the_b->val\n-// gdb-check:$2 = {{TheB, x = 0, y = 1229782938247303441}, {TheB, 0, 286331153, 286331153}}\n-\n-// gdb-command:print univariant->val\n-// gdb-check:$3 = {{-9747455}}\n-\n-\n-// === LLDB TESTS ==================================================================================\n-\n-// lldb-command:run\n-\n-// lldb-command:print the_a->val\n-// lldb-check:[...]$0 = TheA { x: 0, y: 8970181431921507452 }\n-\n-// lldb-command:print the_b->val\n-// lldb-check:[...]$1 = TheB(0, 286331153, 286331153)\n-\n-// lldb-command:print univariant->val\n-// lldb-check:[...]$2 = TheOnlyCase(-9747455)\n-\n-#![allow(unused_variable)]\n-#![feature(struct_variant)]\n-\n-use std::gc::GC;\n-\n-// The first element is to ensure proper alignment, irrespective of the machines word size. Since\n-// the size of the discriminant value is machine dependent, this has be taken into account when\n-// datatype layout should be predictable as in this case.\n-enum ABC {\n-    TheA { x: i64, y: i64 },\n-    TheB (i64, i32, i32),\n-}\n-\n-// This is a special case since it does not have the implicit discriminant field.\n-enum Univariant {\n-    TheOnlyCase(i64)\n-}\n-\n-fn main() {\n-\n-    // In order to avoid endianess trouble all of the following test values consist of a single\n-    // repeated byte. This way each interpretation of the union should look the same, no matter if\n-    // this is a big or little endian machine.\n-\n-    // 0b0111110001111100011111000111110001111100011111000111110001111100 = 8970181431921507452\n-    // 0b01111100011111000111110001111100 = 2088533116\n-    // 0b0111110001111100 = 31868\n-    // 0b01111100 = 124\n-    let the_a = box(GC) TheA { x: 0, y: 8970181431921507452 };\n-\n-    // 0b0001000100010001000100010001000100010001000100010001000100010001 = 1229782938247303441\n-    // 0b00010001000100010001000100010001 = 286331153\n-    // 0b0001000100010001 = 4369\n-    // 0b00010001 = 17\n-    let the_b = box(GC) TheB (0, 286331153, 286331153);\n-\n-    let univariant = box(GC) TheOnlyCase(-9747455);\n-\n-    zzz(); // #break\n-}\n-\n-fn zzz() {()}"}, {"sha": "69f3938ecee3cb6eb5583d1e1220ed8b44075748", "filename": "src/test/debuginfo/managed-pointer-within-unique-vec.rs", "status": "removed", "additions": 0, "deletions": 63, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Fdebuginfo%2Fmanaged-pointer-within-unique-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Fdebuginfo%2Fmanaged-pointer-within-unique-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmanaged-pointer-within-unique-vec.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,63 +0,0 @@\n-// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-android: FIXME(#10381)\n-\n-\n-// compile-flags:-g\n-\n-// === GDB TESTS ===================================================================================\n-\n-// gdb-command:rbreak zzz\n-// gdb-command:run\n-// gdb-command:finish\n-\n-// gdb-command:print unique.ptr[0]->val\n-// gdb-check:$1 = 10\n-\n-// gdb-command:print unique.ptr[1]->val\n-// gdb-check:$2 = 11\n-\n-// gdb-command:print unique.ptr[2]->val\n-// gdb-check:$3 = 12\n-\n-// gdb-command:print unique.ptr[3]->val\n-// gdb-check:$4 = 13\n-\n-\n-// === LLDB TESTS ==================================================================================\n-\n-// lldb-command:run\n-\n-// lldb-command:print unique.ptr[0]->val\n-// lldb-check:[...]$0 = 10\n-\n-// lldb-command:print unique.ptr[1]->val\n-// lldb-check:[...]$1 = 11\n-\n-// lldb-command:print unique.ptr[2]->val\n-// lldb-check:[...]$2 = 12\n-\n-// lldb-command:print unique.ptr[3]->val\n-// lldb-check:[...]$3 = 13\n-\n-\n-#![allow(unused_variable)]\n-\n-use std::gc::{Gc, GC};\n-\n-fn main() {\n-\n-    let unique: Vec<Gc<i64>> = vec!(box(GC) 10, box(GC) 11, box(GC) 12, box(GC) 13);\n-\n-    zzz(); // #break\n-}\n-\n-fn zzz() {()}"}, {"sha": "2690efb8f8588f6d2004e001175385dda4386791", "filename": "src/test/debuginfo/managed-pointer-within-unique.rs", "status": "removed", "additions": 0, "deletions": 62, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Fdebuginfo%2Fmanaged-pointer-within-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Fdebuginfo%2Fmanaged-pointer-within-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmanaged-pointer-within-unique.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,62 +0,0 @@\n-// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-android: FIXME(#10381)\n-\n-\n-// compile-flags:-g\n-\n-// === GDB TESTS ===================================================================================\n-\n-// gdb-command:set print pretty off\n-// gdb-command:rbreak zzz\n-// gdb-command:run\n-// gdb-command:finish\n-\n-// gdb-command:print *ordinary_unique\n-// gdb-check:$1 = {-1, -2}\n-\n-// gdb-command:print managed_within_unique->x\n-// gdb-check:$2 = -3\n-\n-// gdb-command:print managed_within_unique->y->val\n-// gdb-check:$3 = -4\n-\n-// === LLDB TESTS ==================================================================================\n-\n-// lldb-command:run\n-\n-// lldb-command:print *ordinary_unique\n-// lldb-check:[...]$0 = (-1, -2)\n-\n-// lldb-command:print managed_within_unique->x\n-// lldb-check:[...]$1 = -3\n-\n-// lldb-command:print managed_within_unique->y->val\n-// lldb-check:[...]$2 = -4\n-\n-#![allow(unused_variable)]\n-\n-use std::gc::{GC, Gc};\n-\n-struct ContainsManaged {\n-    x: int,\n-    y: Gc<int>,\n-}\n-\n-fn main() {\n-    let ordinary_unique = box() (-1i, -2i);\n-\n-    let managed_within_unique = box ContainsManaged { x: -3, y: box(GC) -4i };\n-\n-    zzz(); // #break\n-}\n-\n-fn zzz() {()}"}, {"sha": "412bdfaaf15aca8dd466929d5bcd150da51f25c6", "filename": "src/test/debuginfo/recursive-struct.rs", "status": "modified", "additions": 0, "deletions": 98, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fdebuginfo%2Frecursive-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fdebuginfo%2Frecursive-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Frecursive-struct.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -29,11 +29,6 @@\n // gdb-command:print unique_unique->next.RUST$ENCODED$ENUM$0$Empty.val->value\n // gdb-check:$4 = 3\n \n-// gdb-command:print box_unique->val.value\n-// gdb-check:$5 = 4\n-// gdb-command:print box_unique->val.next.RUST$ENCODED$ENUM$0$Empty.val->value\n-// gdb-check:$6 = 5\n-\n // gdb-command:print vec_unique[0].value\n // gdb-check:$7 = 6.5\n // gdb-command:print vec_unique[0].next.RUST$ENCODED$ENUM$0$Empty.val->value\n@@ -44,32 +39,6 @@\n // gdb-command:print borrowed_unique->next.RUST$ENCODED$ENUM$0$Empty.val->value\n // gdb-check:$10 = 9.5\n \n-// MANAGED\n-// gdb-command:print stack_managed.value\n-// gdb-check:$11 = 10\n-// gdb-command:print stack_managed.next.RUST$ENCODED$ENUM$0$Empty.val->val.value\n-// gdb-check:$12 = 11\n-\n-// gdb-command:print unique_managed->value\n-// gdb-check:$13 = 12\n-// gdb-command:print unique_managed->next.RUST$ENCODED$ENUM$0$Empty.val->val.value\n-// gdb-check:$14 = 13\n-\n-// gdb-command:print box_managed.val->value\n-// gdb-check:$15 = 14\n-// gdb-command:print box_managed->val->next.RUST$ENCODED$ENUM$0$Empty.val->val.value\n-// gdb-check:$16 = 15\n-\n-// gdb-command:print vec_managed[0].value\n-// gdb-check:$17 = 16.5\n-// gdb-command:print vec_managed[0].next.RUST$ENCODED$ENUM$0$Empty.val->val.value\n-// gdb-check:$18 = 17.5\n-\n-// gdb-command:print borrowed_managed->value\n-// gdb-check:$19 = 18.5\n-// gdb-command:print borrowed_managed->next.RUST$ENCODED$ENUM$0$Empty.val->val.value\n-// gdb-check:$20 = 19.5\n-\n // LONG CYCLE\n // gdb-command:print long_cycle1.value\n // gdb-check:$21 = 20\n@@ -106,8 +75,6 @@\n #![allow(unused_variable)]\n #![feature(struct_variant)]\n \n-use std::gc::{Gc, GC};\n-\n enum Opt<T> {\n     Empty,\n     Val { val: T }\n@@ -118,11 +85,6 @@ struct UniqueNode<T> {\n     value: T\n }\n \n-struct ManagedNode<T> {\n-    next: Opt<Gc<ManagedNode<T>>>,\n-    value: T\n-}\n-\n struct LongCycle1<T> {\n     next: Box<LongCycle2<T>>,\n     value: T,\n@@ -184,16 +146,6 @@ fn main() {\n         value: 2,\n     };\n \n-    let box_unique: Gc<UniqueNode<u64>> = box(GC) UniqueNode {\n-        next: Val {\n-            val: box UniqueNode {\n-                next: Empty,\n-                value: 5,\n-            }\n-        },\n-        value: 4,\n-    };\n-\n     let vec_unique: [UniqueNode<f32>, ..1] = [UniqueNode {\n         next: Val {\n             val: box UniqueNode {\n@@ -214,56 +166,6 @@ fn main() {\n         value: 8.5,\n     };\n \n-    let stack_managed: ManagedNode<u16> = ManagedNode {\n-        next: Val {\n-            val: box(GC) ManagedNode {\n-                next: Empty,\n-                value: 11,\n-            }\n-        },\n-        value: 10,\n-    };\n-\n-    let unique_managed: Box<ManagedNode<u32>> = box ManagedNode {\n-        next: Val {\n-            val: box(GC) ManagedNode {\n-                next: Empty,\n-                value: 13,\n-            }\n-        },\n-        value: 12,\n-    };\n-\n-    let box_managed: Gc<ManagedNode<u64>> = box(GC) ManagedNode {\n-        next: Val {\n-            val: box(GC) ManagedNode {\n-                next: Empty,\n-                value: 15,\n-            }\n-        },\n-        value: 14,\n-    };\n-\n-    let vec_managed: [ManagedNode<f32>, ..1] = [ManagedNode {\n-        next: Val {\n-            val: box(GC) ManagedNode {\n-                next: Empty,\n-                value: 17.5,\n-            }\n-        },\n-        value: 16.5,\n-    }];\n-\n-    let borrowed_managed: &ManagedNode<f64> = &ManagedNode {\n-        next: Val {\n-            val: box(GC) ManagedNode {\n-                next: Empty,\n-                value: 19.5,\n-            }\n-        },\n-        value: 18.5,\n-    };\n-\n     // LONG CYCLE\n     let long_cycle1: LongCycle1<u16> = LongCycle1 {\n         next: box LongCycle2 {"}, {"sha": "89415df3588fa7878c14f4a5c322511ddbd8db19", "filename": "src/test/debuginfo/var-captured-in-nested-closure.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-nested-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-nested-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-nested-closure.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -28,8 +28,6 @@\n // gdb-check:$4 = {a = -3, b = 4.5, c = 5}\n // gdb-command:print *owned\n // gdb-check:$5 = 6\n-// gdb-command:print managed->val\n-// gdb-check:$6 = 7\n // gdb-command:print closure_local\n // gdb-check:$7 = 8\n // gdb-command:continue\n@@ -45,8 +43,6 @@\n // gdb-check:$11 = {a = -3, b = 4.5, c = 5}\n // gdb-command:print *owned\n // gdb-check:$12 = 6\n-// gdb-command:print managed->val\n-// gdb-check:$13 = 7\n // gdb-command:print closure_local\n // gdb-check:$14 = 8\n // gdb-command:continue\n@@ -66,8 +62,6 @@\n // lldb-check:[...]$3 = Struct { a: -3, b: 4.5, c: 5 }\n // lldb-command:print *owned\n // lldb-check:[...]$4 = 6\n-// lldb-command:print managed->val\n-// lldb-check:[...]$5 = 7\n // lldb-command:print closure_local\n // lldb-check:[...]$6 = 8\n // lldb-command:continue\n@@ -82,16 +76,12 @@\n // lldb-check:[...]$10 = Struct { a: -3, b: 4.5, c: 5 }\n // lldb-command:print *owned\n // lldb-check:[...]$11 = 6\n-// lldb-command:print managed->val\n-// lldb-check:[...]$12 = 7\n // lldb-command:print closure_local\n // lldb-check:[...]$13 = 8\n // lldb-command:continue\n \n #![allow(unused_variable)]\n \n-use std::gc::GC;\n-\n struct Struct {\n     a: int,\n     b: f64,\n@@ -110,14 +100,13 @@ fn main() {\n \n     let struct_ref = &a_struct;\n     let owned = box 6;\n-    let managed = box(GC) 7;\n \n     let closure = || {\n         let closure_local = 8;\n \n         let nested_closure = || {\n             zzz(); // #break\n-            variable = constant + a_struct.a + struct_ref.a + *owned + *managed + closure_local;\n+            variable = constant + a_struct.a + struct_ref.a + *owned + closure_local;\n         };\n \n         zzz(); // #break"}, {"sha": "8ea407fc54470ab0b51a757c43b4d97be56997d2", "filename": "src/test/debuginfo/var-captured-in-stack-closure.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-stack-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-stack-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-stack-closure.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -28,8 +28,6 @@\n // gdb-check:$4 = {a = -3, b = 4.5, c = 5}\n // gdb-command:print *owned\n // gdb-check:$5 = 6\n-// gdb-command:print managed->val\n-// gdb-check:$6 = 7\n \n \n // === LLDB TESTS ==================================================================================\n@@ -46,13 +44,9 @@\n // lldb-check:[...]$3 = Struct { a: -3, b: 4.5, c: 5 }\n // lldb-command:print *owned\n // lldb-check:[...]$4 = 6\n-// lldb-command:print managed->val\n-// lldb-check:[...]$5 = 7\n \n #![allow(unused_variable)]\n \n-use std::gc::GC;\n-\n struct Struct {\n     a: int,\n     b: f64,\n@@ -71,11 +65,10 @@ fn main() {\n \n     let struct_ref = &a_struct;\n     let owned = box 6;\n-    let managed = box(GC) 7;\n \n     let closure = || {\n         zzz(); // #break\n-        variable = constant + a_struct.a + struct_ref.a + *owned + *managed;\n+        variable = constant + a_struct.a + struct_ref.a + *owned;\n     };\n \n     closure();"}, {"sha": "01fc70c1d2cc1cf9d08540a0e52db0f0b8075c46", "filename": "src/test/pretty/block-disambig.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fpretty%2Fblock-disambig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Fpretty%2Fblock-disambig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fblock-disambig.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -14,34 +14,33 @@\n \n \n use std::cell::Cell;\n-use std::gc::GC;\n \n-fn test1() { let val = box(GC) 0i; { } *val; }\n+fn test1() { let val = &0i; { } *val; }\n \n-fn test2() -> int { let val = box(GC) 0i; { } *val }\n+fn test2() -> int { let val = &0i; { } *val }\n \n struct S { eax: int }\n \n fn test3() {\n-    let regs = box(GC) Cell::new(S {eax: 0});\n+    let regs = &Cell::new(S {eax: 0});\n     match true { true => { } _ => { } }\n     regs.set(S {eax: 1});\n }\n \n-fn test4() -> bool { let regs = box(GC) true; if true { } *regs || false }\n+fn test4() -> bool { let regs = &true; if true { } *regs || false }\n \n fn test5() -> (int, int) { { } (0, 1) }\n \n fn test6() -> bool { { } (true || false) && true }\n \n fn test7() -> uint {\n-    let regs = box(GC) 0i;\n+    let regs = &0i;\n     match true { true => { } _ => { } }\n     (*regs < 2) as uint\n }\n \n fn test8() -> int {\n-    let val = box(GC) 0i;\n+    let val = &0i;\n     match true {\n         true => { }\n         _    => { }\n@@ -54,12 +53,12 @@ fn test8() -> int {\n }\n \n fn test9() {\n-    let regs = box(GC) Cell::new(0i);\n+    let regs = &Cell::new(0i);\n     match true { true => { } _ => { } } regs.set(regs.get() + 1);\n }\n \n fn test10() -> int {\n-    let regs = box(GC) vec!(0i);\n+    let regs = vec!(0i);\n     match true { true => { } _ => { } }\n     *(*regs).get(0)\n }"}, {"sha": "5e1b7bb69bb2bf29ec81d6f57fa0065f99f62b0e", "filename": "src/test/run-fail/args-fail.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-fail%2Fargs-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-fail%2Fargs-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fargs-fail.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -11,8 +11,6 @@\n \n // error-pattern:meep\n \n-use std::gc::{Gc, GC};\n+fn f(_a: int, _b: int, _c: Box<int>) { fail!(\"moop\"); }\n \n-fn f(_a: int, _b: int, _c: Gc<int>) { fail!(\"moop\"); }\n-\n-fn main() { f(1, fail!(\"meep\"), box(GC) 42); }\n+fn main() { f(1, fail!(\"meep\"), box 42); }"}, {"sha": "87de4d3d3f296c89e1c65b9d3b69f66f8d3d5302", "filename": "src/test/run-fail/issue-2272.rs", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-fail%2Fissue-2272.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-fail%2Fissue-2272.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-2272.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,29 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-// error-pattern:explicit failure\n-// Issue #2272 - unwind this without leaking the unique pointer\n-\n-use std::gc::{Gc, GC};\n-\n-struct X { y: Y, a: Box<int> }\n-\n-struct Y { z: Gc<int> }\n-\n-fn main() {\n-    let _x = X {\n-        y: Y {\n-            z: box(GC) 0\n-        },\n-        a: box 0\n-    };\n-    fail!();\n-}"}, {"sha": "4947093d10cb8b38221eb0fb1031302ddc230496", "filename": "src/test/run-fail/unwind-assert.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-fail%2Funwind-assert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-fail%2Funwind-assert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-assert.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern:fail\n-\n-\n-use std::gc::GC;\n-\n-fn main() {\n-    let _a = box(GC) 0i;\n-    assert!(false);\n-}"}, {"sha": "7ed58be60720411f8867c93b6217a2ce1a2b100c", "filename": "src/test/run-fail/unwind-box-fn-unique.rs", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-fail%2Funwind-box-fn-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-fail%2Funwind-box-fn-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-fn-unique.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,29 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-// error-pattern:fail\n-\n-extern crate debug;\n-\n-use std::gc::{GC, Gc};\n-\n-fn failfn() {\n-    fail!();\n-}\n-\n-fn main() {\n-    let y = box 0i;\n-    let x: Gc<proc():Send> = box(GC) (proc() {\n-        println!(\"{:?}\", y.clone());\n-    });\n-    failfn();\n-    println!(\"{:?}\", x);\n-}"}, {"sha": "ede8331173237903c4c7272c1a2cfc2414003b80", "filename": "src/test/run-fail/unwind-box-res.rs", "status": "removed", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-fail%2Funwind-box-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-fail%2Funwind-box-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-res.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,50 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern:fail\n-\n-\n-extern crate debug;\n-\n-use std::mem;\n-use std::gc::GC;\n-\n-fn failfn() {\n-    fail!();\n-}\n-\n-struct r {\n-  v: *const int,\n-}\n-\n-impl Drop for r {\n-    fn drop(&mut self) {\n-        unsafe {\n-            let _v2: Box<int> = mem::transmute(self.v);\n-        }\n-    }\n-}\n-\n-fn r(v: *const int) -> r {\n-    r {\n-        v: v\n-    }\n-}\n-\n-fn main() {\n-    unsafe {\n-        let i1 = box 0i;\n-        let i1p = mem::transmute_copy(&i1);\n-        mem::forget(i1);\n-        let x = box(GC) r(i1p);\n-        failfn();\n-        println!(\"{:?}\", x);\n-    }\n-}"}, {"sha": "07a8f5d4cfad6d25f2f258f160170015349b5f4f", "filename": "src/test/run-fail/unwind-box-str.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-fail%2Funwind-box-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-fail%2Funwind-box-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-str.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,26 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern:fail\n-\n-\n-extern crate debug;\n-\n-use std::gc::GC;\n-\n-fn failfn() {\n-    fail!();\n-}\n-\n-fn main() {\n-    let x = box(GC) \"hi\".to_string();\n-    failfn();\n-    println!(\"{:?}\", x);\n-}"}, {"sha": "9aa916a062e77e764596fc935e19484b8bbe0496", "filename": "src/test/run-fail/unwind-box-unique-unique.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-fail%2Funwind-box-unique-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-fail%2Funwind-box-unique-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-unique-unique.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,26 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern:fail\n-\n-\n-extern crate debug;\n-\n-use std::gc::GC;\n-\n-fn failfn() {\n-    fail!();\n-}\n-\n-fn main() {\n-    let x = box(GC) box box 0i;\n-    failfn();\n-    println!(\"{:?}\", x);\n-}"}, {"sha": "7135742db34b8f6fdea4e773c6c32a6a262e35bf", "filename": "src/test/run-fail/unwind-box-unique.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-fail%2Funwind-box-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-fail%2Funwind-box-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-unique.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,26 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern:fail\n-\n-\n-extern crate debug;\n-\n-use std::gc::GC;\n-\n-fn failfn() {\n-    fail!();\n-}\n-\n-fn main() {\n-    let x = box(GC) box 0i;\n-    failfn();\n-    println!(\"{:?}\", x);\n-}"}, {"sha": "e7d1476c2b6d830017ae7d5f68a485f3acb2618a", "filename": "src/test/run-fail/unwind-box-vec.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-fail%2Funwind-box-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-fail%2Funwind-box-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-vec.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,26 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern:fail\n-\n-\n-extern crate debug;\n-\n-use std::gc::GC;\n-\n-fn failfn() {\n-    fail!();\n-}\n-\n-fn main() {\n-    let x = box(GC) vec!(0i, 1, 2, 3, 4, 5);\n-    failfn();\n-    println!(\"{:?}\", x);\n-}"}, {"sha": "7d93ae5615688beb7c614160d7e3247701229517", "filename": "src/test/run-fail/unwind-box.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-fail%2Funwind-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-fail%2Funwind-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,23 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern:fail\n-\n-\n-use std::gc::GC;\n-\n-fn failfn() {\n-    fail!();\n-}\n-\n-fn main() {\n-    box(GC) 0i;\n-    failfn();\n-}"}, {"sha": "1e19522871af87cfce204e7f15d84f567e90cc8d", "filename": "src/test/run-fail/unwind-fail.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-fail%2Funwind-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-fail%2Funwind-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-fail.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern:fail\n-\n-\n-use std::gc::GC;\n-\n-fn main() {\n-    box(GC) 0i;\n-    fail!();\n-}"}, {"sha": "13ad5d2fae3dc627858849badaf0dbbe7003a689", "filename": "src/test/run-fail/unwind-initializer-indirect.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-fail%2Funwind-initializer-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-fail%2Funwind-initializer-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-initializer-indirect.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,20 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern:fail\n-\n-\n-use std::gc::Gc;\n-\n-fn f() -> Gc<int> { fail!(); }\n-\n-fn main() {\n-    let _a: Gc<int> = f();\n-}"}, {"sha": "7294b19ac9acc82911580bfe0410a91eb4a9a40a", "filename": "src/test/run-fail/unwind-initializer.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-fail%2Funwind-initializer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-fail%2Funwind-initializer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-initializer.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,20 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern:fail\n-\n-\n-use std::gc::Gc;\n-\n-fn main() {\n-    let _a: Gc<int> = {\n-        fail!();\n-    };\n-}"}, {"sha": "411b9a56a2f27ff80060036953b7b3f629440b9e", "filename": "src/test/run-fail/unwind-iter.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-fail%2Funwind-iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-fail%2Funwind-iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-iter.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,26 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern:fail\n-\n-#![allow(unreachable_code)]\n-#![allow(unused_variable)]\n-\n-use std::gc::GC;\n-\n-fn x(it: |int|) {\n-    fail!();\n-    it(0);\n-}\n-\n-fn main() {\n-    let a = box(GC) 0i;\n-    x(|_i| { } );\n-}"}, {"sha": "1a2492e0ac8971aa59224dfb6f16b4a5d4f64ad8", "filename": "src/test/run-fail/unwind-iter2.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-fail%2Funwind-iter2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-fail%2Funwind-iter2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-iter2.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,23 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern:fail\n-\n-\n-use std::gc::{GC};\n-\n-fn x(it: |int|) {\n-    let _a = box(GC) 0i;\n-    it(1);\n-}\n-\n-fn main() {\n-    x(|_x| fail!() );\n-}"}, {"sha": "e96bc14905e9d69377fa94c087c789c61fbb2ac8", "filename": "src/test/run-fail/unwind-lambda.rs", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-fail%2Funwind-lambda.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-fail%2Funwind-lambda.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-lambda.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,32 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern:fail\n-\n-\n-use std::gc::{Gc, GC};\n-\n-fn main() {\n-    let cheese = \"roquefort\".to_string();\n-    let carrots = box(GC) \"crunchy\".to_string();\n-\n-    let result: |Gc<String>, |String||: 'static = (|tasties, macerate| {\n-        macerate((*tasties).clone());\n-    });\n-    result(carrots, |food| {\n-        let mush = format!(\"{}{}\", food, cheese);\n-        let cheese = cheese.clone();\n-        let f: || = || {\n-            let _chew = format!(\"{}{}\", mush, cheese);\n-            fail!(\"so yummy\")\n-        };\n-        f();\n-    });\n-}"}, {"sha": "a6564a68e19a51f82bb91badee38ebab56f957ed", "filename": "src/test/run-fail/unwind-match.rs", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-fail%2Funwind-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-fail%2Funwind-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-match.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,28 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Issue #945\n-// error-pattern:non-exhaustive match failure\n-\n-\n-use std::gc::GC;\n-\n-fn test_box() {\n-    box(GC) 0i;\n-}\n-fn test_str() {\n-  let res = match false { true => { \"happy\".to_string() },\n-     _ => fail!(\"non-exhaustive match failure\") };\n-  assert_eq!(res, \"happy\".to_string());\n-}\n-fn main() {\n-    test_box();\n-    test_str();\n-}"}, {"sha": "23ec6cd0300a6b20ea172ed616bc3ba17a3a2834", "filename": "src/test/run-fail/unwind-misc-1.rs", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,31 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// exec-env:RUST_NEWRT=1\n-// error-pattern:fail\n-\n-\n-use std::vec;\n-use std::collections;\n-use std::gc::GC;\n-\n-fn main() {\n-    let _count = box(GC) 0u;\n-    let mut map = collections::HashMap::new();\n-    let mut arr = Vec::new();\n-    for _i in range(0u, 10u) {\n-        arr.push(box(GC) \"key stuff\".to_string());\n-        map.insert(arr.clone(),\n-                   arr.clone().append([box(GC) \"value stuff\".to_string()]));\n-        if arr.len() == 5 {\n-            fail!();\n-        }\n-    }\n-}"}, {"sha": "692bf713b405e8768f30595f33392527003d398b", "filename": "src/test/run-fail/unwind-move.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-fail%2Funwind-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-fail%2Funwind-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-move.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,23 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern:fail\n-\n-\n-use std::gc::{Gc, GC};\n-\n-fn f(_a: Gc<int>) {\n-    fail!();\n-}\n-\n-fn main() {\n-    let a = box(GC) 0;\n-    f(a);\n-}"}, {"sha": "84b727ea20f9f1b22d4ff2f3a172cfcb3098819e", "filename": "src/test/run-fail/unwind-nested.rs", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-fail%2Funwind-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-fail%2Funwind-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-nested.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,24 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern:fail\n-\n-\n-use std::gc::GC;\n-\n-fn main() {\n-    let _a = box(GC) 0i;\n-    {\n-        let _b = box(GC) 0i;\n-        {\n-            fail!();\n-        }\n-    }\n-}"}, {"sha": "366531b9127bc5c495c67ce58aa043c1587ad1fe", "filename": "src/test/run-fail/unwind-partial-box.rs", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-fail%2Funwind-partial-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-fail%2Funwind-partial-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-partial-box.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,31 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern:fail\n-\n-\n-use std::gc::GC;\n-\n-fn f() -> Vec<int> { fail!(); }\n-\n-// Voodoo. In unwind-alt we had to do this to trigger the bug. Might\n-// have been to do with memory allocation patterns.\n-fn prime() {\n-    box(GC) 0i;\n-}\n-\n-fn partial() {\n-    let _x = box(GC) f();\n-}\n-\n-fn main() {\n-    prime();\n-    partial();\n-}"}, {"sha": "725b57af7df5fab428f314c6dd6c3373b7ca41fb", "filename": "src/test/run-fail/unwind-partial-unique.rs", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-fail%2Funwind-partial-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-fail%2Funwind-partial-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-partial-unique.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,31 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern:fail\n-\n-\n-use std::gc::GC;\n-\n-fn f() -> Vec<int> { fail!(); }\n-\n-// Voodoo. In unwind-alt we had to do this to trigger the bug. Might\n-// have been to do with memory allocation patterns.\n-fn prime() {\n-    box(GC) 0i;\n-}\n-\n-fn partial() {\n-    let _x = box f();\n-}\n-\n-fn main() {\n-    prime();\n-    partial();\n-}"}, {"sha": "627fb3d028ed9f4d33b427795d8eae9a64a7f8bb", "filename": "src/test/run-fail/unwind-partial-vec.rs", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-fail%2Funwind-partial-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-fail%2Funwind-partial-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-partial-vec.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,31 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern:fail\n-\n-\n-use std::gc::GC;\n-\n-fn f() -> Vec<int> { fail!(); }\n-\n-// Voodoo. In unwind-alt we had to do this to trigger the bug. Might\n-// have been to do with memory allocation patterns.\n-fn prime() {\n-    box(GC) 0i;\n-}\n-\n-fn partial() {\n-    let _x = vec!(vec!(0i), f(), vec!(0i));\n-}\n-\n-fn main() {\n-    prime();\n-    partial();\n-}"}, {"sha": "66fd044d64e7e459ad8d0f51b8df1925b39b48a2", "filename": "src/test/run-fail/unwind-resource-fail.rs", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-fail%2Funwind-resource-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-fail%2Funwind-resource-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-resource-fail.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,29 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-// error-pattern:squirrel\n-\n-use std::gc::GC;\n-\n-struct r {\n-    i: int,\n-}\n-\n-impl Drop for r {\n-    fn drop(&mut self) { fail!(\"squirrel\") }\n-}\n-\n-fn r(i: int) -> r { r { i: i } }\n-\n-fn main() {\n-    box(GC) 0i;\n-    let _r = r(0);\n-}"}, {"sha": "add7fe3f0f35961208f825f310b3720238eb805d", "filename": "src/test/run-fail/unwind-resource-fail2.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-fail%2Funwind-resource-fail2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-fail%2Funwind-resource-fail2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-resource-fail2.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,30 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-test leaks\n-// error-pattern:wombat\n-\n-use std::gc::GC;\n-\n-struct r {\n-    i: int,\n-}\n-\n-impl Drop for r {\n-    fn drop(&mut self) { fail!(\"wombat\") }\n-}\n-\n-fn r(i: int) -> r { r { i: i } }\n-\n-fn main() {\n-    box(GC) 0;\n-    let r = r(0);\n-    fail!();\n-}"}, {"sha": "9ec7c4a1eb326c8575f7cce82e979cf3e236b60f", "filename": "src/test/run-fail/unwind-resource-fail3.rs", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-fail%2Funwind-resource-fail3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-fail%2Funwind-resource-fail3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-resource-fail3.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,33 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(unsafe_destructor)]\n-\n-// error-pattern:quux\n-\n-use std::gc::{Gc, GC};\n-\n-struct faily_box {\n-    i: Gc<int>\n-}\n-// What happens to the box pointer owned by this class?\n-\n-fn faily_box(i: Gc<int>) -> faily_box { faily_box { i: i } }\n-\n-#[unsafe_destructor]\n-impl Drop for faily_box {\n-    fn drop(&mut self) {\n-        fail!(\"quux\");\n-    }\n-}\n-\n-fn main() {\n-    faily_box(box(GC) 10);\n-}"}, {"sha": "1e1caac0004e2541c11498134749b872455aee04", "filename": "src/test/run-fail/unwind-stacked.rs", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-fail%2Funwind-stacked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-fail%2Funwind-stacked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-stacked.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,29 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern:fail\n-\n-\n-use std::gc::GC;\n-\n-fn f() {\n-    let _a = box(GC) 0i;\n-    fail!();\n-}\n-\n-fn g() {\n-    let _b = box(GC) 0i;\n-    f();\n-}\n-\n-fn main() {\n-    let _a = box(GC) 0i;\n-    g();\n-}"}, {"sha": "877e2beb703795c175e57eebc6183c6e9fa0f91f", "filename": "src/test/run-fail/unwind-tup.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-fail%2Funwind-tup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-fail%2Funwind-tup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-tup.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,22 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::Gc;\n-\n-// error-pattern:fail\n-\n-fn fold_local() -> Gc<Vec<int>> {\n-    fail!();\n-}\n-\n-fn main() {\n-    let _lss = (fold_local(), 0i);\n-}"}, {"sha": "01536233ffe5f90cac38b3d26e4ce5819ddb4191", "filename": "src/test/run-fail/unwind-tup2.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-fail%2Funwind-tup2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-fail%2Funwind-tup2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-tup2.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,26 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::{Gc, GC};\n-\n-// error-pattern:fail\n-\n-fn fold_local() -> Gc<Vec<int>> {\n-    box(GC) vec!(0,0,0,0,0,0)\n-}\n-\n-fn fold_remote() -> Gc<Vec<int>> {\n-    fail!();\n-}\n-\n-fn main() {\n-    let _lss = (fold_local(), fold_remote());\n-}"}, {"sha": "54321e98e734361d0ff17738976d3617f3655140", "filename": "src/test/run-fail/unwind-uninitialized.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-fail%2Funwind-uninitialized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-fail%2Funwind-uninitialized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-uninitialized.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,23 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern:fail\n-\n-\n-use std::gc::GC;\n-\n-fn f() {\n-    fail!();\n-}\n-\n-fn main() {\n-    f();\n-    let _a = box(GC) 0i;\n-}"}, {"sha": "49a374f343c6fa27e2ad03b98c886d2463940bb6", "filename": "src/test/run-pass/assert-eq-macro-success.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fassert-eq-macro-success.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fassert-eq-macro-success.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassert-eq-macro-success.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -9,8 +9,6 @@\n // except according to those terms.\n \n \n-use std::gc::GC;\n-\n #[deriving(PartialEq, Show)]\n struct Point { x : int }\n \n@@ -19,5 +17,4 @@ pub fn main() {\n     assert_eq!(\"abc\".to_string(),\"abc\".to_string());\n     assert_eq!(box Point{x:34},box Point{x:34});\n     assert_eq!(&Point{x:34},&Point{x:34});\n-    assert_eq!(box(GC) Point{x:34},box(GC) Point{x:34});\n }"}, {"sha": "cc4dd13cf61c9c715fa3c75e4b9775313ee87f75", "filename": "src/test/run-pass/autoderef-method-priority.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -9,8 +9,6 @@\n // except according to those terms.\n \n \n-use std::gc::{GC, Gc};\n-\n trait double {\n     fn double(self) -> uint;\n }\n@@ -19,11 +17,11 @@ impl double for uint {\n     fn double(self) -> uint { self }\n }\n \n-impl double for Gc<uint> {\n+impl double for Box<uint> {\n     fn double(self) -> uint { *self * 2u }\n }\n \n pub fn main() {\n-    let x = box(GC) 3u;\n+    let x = box 3u;\n     assert_eq!(x.double(), 6u);\n }"}, {"sha": "7f44bcdb50c1a328e57751b55a85a3c3bea24cb8", "filename": "src/test/run-pass/autoref-intermediate-types-issue-3585.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fautoref-intermediate-types-issue-3585.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fautoref-intermediate-types-issue-3585.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoref-intermediate-types-issue-3585.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -9,15 +9,13 @@\n // except according to those terms.\n \n \n-use std::gc::{Gc, GC};\n-\n trait Foo {\n     fn foo(&self) -> String;\n }\n \n-impl<T:Foo> Foo for Gc<T> {\n+impl<T:Foo> Foo for Box<T> {\n     fn foo(&self) -> String {\n-        format!(\"box(GC) {}\", (**self).foo())\n+        format!(\"box {}\", (**self).foo())\n     }\n }\n \n@@ -28,6 +26,6 @@ impl Foo for uint {\n }\n \n pub fn main() {\n-    let x = box(GC) 3u;\n-    assert_eq!(x.foo(), \"box(GC) 3\".to_string());\n+    let x = box 3u;\n+    assert_eq!(x.foo(), \"box 3\".to_string());\n }"}, {"sha": "3997c5d3d29b82e7ef051f873c7ae6752494b781", "filename": "src/test/run-pass/binops.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fbinops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fbinops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinops.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -10,9 +10,6 @@\n \n // Binop corner cases\n \n-\n-use std::gc::GC;\n-\n fn test_nil() {\n     assert_eq!((), ());\n     assert!((!(() != ())));\n@@ -45,10 +42,6 @@ fn test_bool() {\n     assert_eq!(true ^ true, false);\n }\n \n-fn test_box() {\n-    assert_eq!(box(GC) 10i, box(GC) 10i);\n-}\n-\n fn test_ptr() {\n     unsafe {\n         let p1: *const u8 = ::std::mem::transmute(0u);\n@@ -98,7 +91,6 @@ fn test_class() {\n pub fn main() {\n     test_nil();\n     test_bool();\n-    test_box();\n     test_ptr();\n     test_class();\n }"}, {"sha": "8c4995e710097b24366935a4c40cebf718c771e4", "filename": "src/test/run-pass/borrowck-borrow-from-expr-block.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-expr-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-expr-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-expr-block.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -9,13 +9,11 @@\n // except according to those terms.\n \n \n-use std::gc::{Gc, GC};\n-\n fn borrow(x: &int, f: |x: &int|) {\n     f(x)\n }\n \n-fn test1(x: Gc<Box<int>>) {\n+fn test1(x: &Box<int>) {\n     borrow(&*(*x).clone(), |p| {\n         let x_a = &**x as *const int;\n         assert!((x_a as uint) != (p as *const int as uint));\n@@ -24,5 +22,5 @@ fn test1(x: Gc<Box<int>>) {\n }\n \n pub fn main() {\n-    test1(box(GC) box 22);\n+    test1(&box 22);\n }"}, {"sha": "525a93a4c83de0b86598e0214ed8ea21576c9d7e", "filename": "src/test/run-pass/borrowck-preserve-box-in-moved-value.rs", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-moved-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-moved-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-moved-value.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,37 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// exec-env:RUST_POISON_ON_FREE=1\n-\n-// Test that we root `x` even though it is found in immutable memory,\n-// because it is moved.\n-\n-\n-use std::gc::{Gc, GC};\n-\n-fn free<T>(x: Gc<T>) {}\n-\n-struct Foo {\n-    f: Gc<Bar>\n-}\n-\n-struct Bar {\n-    g: int\n-}\n-\n-fn lend(x: Gc<Foo>) -> int {\n-    let y = &x.f.g;\n-    free(x); // specifically here, if x is not rooted, it will be freed\n-    *y\n-}\n-\n-pub fn main() {\n-    assert_eq!(lend(box(GC) Foo {f: box(GC) Bar {g: 22}}), 22);\n-}"}, {"sha": "344867568bb7a0e66fed569a4c9e9aafe455ca1e", "filename": "src/test/run-pass/borrowck-root-while-cond-2.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fborrowck-root-while-cond-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fborrowck-root-while-cond-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-root-while-cond-2.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,20 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::{GC, Gc};\n-\n-struct F { f: Gc<G> }\n-struct G { g: Vec<int> }\n-\n-pub fn main() {\n-    let rec = box(GC) F {f: box(GC) G {g: vec!(1, 2, 3)}};\n-    while rec.f.g.len() == 23 {}\n-}"}, {"sha": "163ccf5c029599437ce48efea80de3d7c01c3b51", "filename": "src/test/run-pass/borrowck-root-while-cond.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fborrowck-root-while-cond.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fborrowck-root-while-cond.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-root-while-cond.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,21 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::{Gc, GC};\n-\n-fn borrow<'r,T>(x: &'r T) -> &'r T {x}\n-\n-struct Rec { f: Gc<int> }\n-\n-pub fn main() {\n-    let rec = box(GC) Rec {f: box(GC) 22};\n-    while *borrow(&*rec.f) == 23 {}\n-}"}, {"sha": "129fa8bf7d926f7a6449021ed14d76a5463b5c2a", "filename": "src/test/run-pass/borrowck-univariant-enum.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fborrowck-univariant-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fborrowck-univariant-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-univariant-enum.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -10,7 +10,6 @@\n \n \n use std::cell::Cell;\n-use std::gc::GC;\n \n enum newtype {\n     newvar(int)\n@@ -21,8 +20,8 @@ pub fn main() {\n     // Test that borrowck treats enums with a single variant\n     // specially.\n \n-    let x = box(GC) Cell::new(5);\n-    let y = box(GC) Cell::new(newvar(3));\n+    let x = &Cell::new(5);\n+    let y = &Cell::new(newvar(3));\n     let z = match y.get() {\n       newvar(b) => {\n         x.set(x.get() + 1);"}, {"sha": "9e8e416d7b07d6707be65925defb78c8addad615", "filename": "src/test/run-pass/box-compare.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fbox-compare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fbox-compare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-compare.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,20 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::GC;\n-\n-pub fn main() {\n-    assert!((box(GC) 1i < box(GC) 3i));\n-    assert!((box(GC) box(GC) \"hello \".to_string() >\n-             box(GC) box(GC) \"hello\".to_string()));\n-    assert!((box(GC) box(GC) box(GC) \"hello\".to_string() !=\n-             box(GC) box(GC) box(GC) \"there\".to_string()));\n-}"}, {"sha": "8d7bb55028f686d6b7039fc661adc4376283bbac", "filename": "src/test/run-pass/box-in-tup.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fbox-in-tup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fbox-in-tup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-in-tup.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,17 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::{Gc, GC};\n-\n-pub fn main() {\n-    let i: (Gc<int>, int) = (box(GC) 10, 10);\n-    let (_a, _) = i;\n-}"}, {"sha": "47c7e7f16f488cfeff4c0095b186ba4dcdb1d0a5", "filename": "src/test/run-pass/box-inside-if.rs", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fbox-inside-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fbox-inside-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-inside-if.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,24 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::{GC, Gc};\n-\n-fn some_box(x: int) -> Gc<int> { return box(GC) x; }\n-\n-fn is_odd(_n: int) -> bool { return true; }\n-\n-fn length_is_even(_vs: Gc<int>) -> bool { return true; }\n-\n-fn foo(_acc: int, n: int) {\n-    if is_odd(n) && length_is_even(some_box(1)) { println!(\"bloop\"); }\n-}\n-\n-pub fn main() { foo(67, 5); }"}, {"sha": "e62050c8ea962f7eb92ea68aa277db7ff60cdd6b", "filename": "src/test/run-pass/box-inside-if2.rs", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fbox-inside-if2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fbox-inside-if2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-inside-if2.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,24 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::{Gc, GC};\n-\n-fn some_box(x: int) -> Gc<int> { return box(GC) x; }\n-\n-fn is_odd(_n: int) -> bool { return true; }\n-\n-fn length_is_even(_vs: Gc<int>) -> bool { return true; }\n-\n-fn foo(_acc: int, n: int) {\n-    if is_odd(n) || length_is_even(some_box(1)) { println!(\"bloop\"); }\n-}\n-\n-pub fn main() { foo(67, 5); }"}, {"sha": "21d1d2359019a60839d9b444833bb7b343dd2620", "filename": "src/test/run-pass/box-pattern.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fbox-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fbox-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-pattern.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,20 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn main() {\n-    let box x = box 3i;\n-    match box 3i {\n-        box y => {\n-            assert!(x == y);\n-            println!(\"{} {}\", x, y);\n-        }\n-    }\n-}\n-"}, {"sha": "bc8afff0cd626117a9bb3097a1d31da062263c6b", "filename": "src/test/run-pass/box-unbox.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fbox-unbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fbox-unbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-unbox.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,23 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::{Gc, GC};\n-\n-struct Box<T> {c: Gc<T>}\n-\n-fn unbox<T:Clone>(b: Box<T>) -> T { return (*b.c).clone(); }\n-\n-pub fn main() {\n-    let foo: int = 17;\n-    let bfoo: Box<int> = Box {c: box(GC) foo};\n-    println!(\"see what's in our box\");\n-    assert_eq!(unbox::<int>(bfoo), foo);\n-}"}, {"sha": "844b9392ec864095951e73c2a5c9e2a298cd2729", "filename": "src/test/run-pass/box.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,14 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::{Gc, GC};\n-\n-pub fn main() { let x: Gc<int> = box(GC) 10; assert!((*x == 10)); }"}, {"sha": "41ffdd7b4b9ad21eb00e87f1ca9636ccdb987de3", "filename": "src/test/run-pass/boxed-class-type-substitution.rs", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fboxed-class-type-substitution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fboxed-class-type-substitution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fboxed-class-type-substitution.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,37 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Regression test that rustc doesn't recurse infinitely substituting\n-// the boxed type parameter\n-\n-\n-use std::gc::Gc;\n-\n-struct Tree<T> {\n-    parent: Option<T>\n-}\n-\n-fn empty<T>() -> Tree<T> { fail!() }\n-\n-struct Box {\n-    tree: Tree<Gc<Box>>\n-}\n-\n-fn Box() -> Box {\n-    Box {\n-        tree: empty()\n-    }\n-}\n-\n-struct LayoutData {\n-    a_box: Option<Gc<Box>>\n-}\n-\n-pub fn main() { }"}, {"sha": "262c19174b18b9edd5f33d16520e59f7e4ea12da", "filename": "src/test/run-pass/cci_borrow.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fcci_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fcci_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_borrow.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -13,10 +13,9 @@\n \n extern crate cci_borrow_lib;\n use cci_borrow_lib::foo;\n-use std::gc::GC;\n \n pub fn main() {\n-    let p = box(GC) 22u;\n+    let p = box 22u;\n     let r = foo(&*p);\n     println!(\"r={}\", r);\n     assert_eq!(r, 22u);"}, {"sha": "a54a821a7b9b47bef62c3551c9b3580362a0d3a8", "filename": "src/test/run-pass/classes-self-referential.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fclasses-self-referential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fclasses-self-referential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-self-referential.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -9,8 +9,6 @@\n // except according to those terms.\n \n \n-use std::gc::Gc;\n-\n struct kitten {\n     cat: Option<cat>,\n }\n@@ -21,6 +19,6 @@ fn kitten(cat: Option<cat>) -> kitten {\n     }\n }\n \n-type cat = Gc<kitten>;\n+type cat = Box<kitten>;\n \n pub fn main() {}"}, {"sha": "3eec506c9e3197f20cfbe66824e9889878913987", "filename": "src/test/run-pass/cleanup-copy-mode.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fcleanup-copy-mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fcleanup-copy-mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcleanup-copy-mode.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,21 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::task;\n-use std::gc::{GC, Gc};\n-\n-fn adder(x: Gc<int>, y: Gc<int>) -> int { return *x + *y; }\n-fn failer() -> Gc<int> { fail!(); }\n-pub fn main() {\n-    assert!(task::try(proc() {\n-        adder(box(GC) 2, failer()); ()\n-    }).is_err());\n-}"}, {"sha": "0088a36eda9a3239019c73e0281eee4d8b1ad0d1", "filename": "src/test/run-pass/crate-method-reexport-grrrrrrr.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fcrate-method-reexport-grrrrrrr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fcrate-method-reexport-grrrrrrr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrate-method-reexport-grrrrrrr.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -17,12 +17,10 @@\n \n extern crate crate_method_reexport_grrrrrrr2;\n \n-use std::gc::GC;\n-\n pub fn main() {\n     use crate_method_reexport_grrrrrrr2::rust::add;\n     use crate_method_reexport_grrrrrrr2::rust::cx;\n-    let x = box(GC) ();\n+    let x = box() ();\n     x.cx();\n     let y = ();\n     y.add(\"hi\".to_string());"}, {"sha": "edcbd21476b42c2e4be56f1b619bc99c8f32f998", "filename": "src/test/run-pass/cycle-collection.rs", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fcycle-collection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fcycle-collection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcycle-collection.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,27 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::cell::RefCell;\n-use std::gc::{Gc, GC};\n-\n-enum taggy {\n-    cons(Gc<RefCell<taggy>>),\n-    nil,\n-}\n-\n-fn f() {\n-    let a_box = box(GC) RefCell::new(nil);\n-    *a_box.borrow_mut() = cons(a_box);\n-}\n-\n-pub fn main() {\n-    f();\n-}"}, {"sha": "d9b0940f80b3f328a745ba984ad29ee100ff94b6", "filename": "src/test/run-pass/deref-lval.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fderef-lval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fderef-lval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderef-lval.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -9,13 +9,10 @@\n // except according to those terms.\n \n \n-extern crate debug;\n-\n use std::cell::Cell;\n-use std::gc::GC;\n \n pub fn main() {\n-    let x = box(GC) Cell::new(5i);\n+    let x = box Cell::new(5i);\n     x.set(1000i);\n-    println!(\"{:?}\", x.get());\n+    println!(\"{}\", x.get());\n }"}, {"sha": "117b133a11319fcc55c2dd02a8006e14c2eca9fa", "filename": "src/test/run-pass/deref.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderef.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -9,9 +9,7 @@\n // except according to those terms.\n \n \n-use std::gc::{Gc, GC};\n-\n pub fn main() {\n-    let x: Gc<int> = box(GC) 10;\n+    let x: Box<int> = box 10;\n     let _y: int = *x;\n }"}, {"sha": "0d5556a867b6d6e0860603380e30906585799387", "filename": "src/test/run-pass/double-unbox.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fdouble-unbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fdouble-unbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdouble-unbox.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,21 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::Gc;\n-\n-struct Quux {\n-    bar: int\n-}\n-\n-fn g(_i: int) { }\n-fn f(foo: Gc<Gc<Quux>>) { g(foo.bar); }\n-\n-pub fn main() { }"}, {"sha": "c52549d286fd5bc44e6123a8910bc6ff27e5b7ad", "filename": "src/test/run-pass/drop-on-empty-block-exit.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fdrop-on-empty-block-exit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fdrop-on-empty-block-exit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-on-empty-block-exit.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -9,11 +9,9 @@\n // except according to those terms.\n \n \n-use std::gc::{Gc, GC};\n-\n-enum t { foo(Gc<int>), }\n+enum t { foo(Box<int>), }\n \n pub fn main() {\n-    let tt = foo(box(GC) 10);\n+    let tt = foo(box 10);\n     match tt { foo(_z) => { } }\n }"}, {"sha": "3e22c8331839306de32446ae5827da8fb4910f27", "filename": "src/test/run-pass/enum-null-pointer-opt.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fenum-null-pointer-opt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fenum-null-pointer-opt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-null-pointer-opt.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n \n-use std::gc::Gc;\n use std::mem::size_of;\n \n trait Trait {}\n@@ -33,9 +32,8 @@ fn main() {\n     assert_eq!(size_of::<&Trait>(), size_of::<Option<&Trait>>());\n     assert_eq!(size_of::<&mut Trait>(), size_of::<Option<&mut Trait>>());\n \n-    // Pointers - Box<T> / Gc<T>\n+    // Pointers - Box<T>\n     assert_eq!(size_of::<Box<int>>(), size_of::<Option<Box<int>>>());\n-    assert_eq!(size_of::<Gc<int>>(), size_of::<Option<Gc<int>>>());\n \n \n     // The optimization can't apply to raw pointers"}, {"sha": "24fb503aea3a96ebf549fe9892d789aa0f1272a1", "filename": "src/test/run-pass/enum-nullable-simplifycfg-misopt.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fenum-nullable-simplifycfg-misopt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fenum-nullable-simplifycfg-misopt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-nullable-simplifycfg-misopt.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -15,11 +15,9 @@\n  * represented with nullable pointers could be misoptimized in some cases.\n  */\n \n-use std::gc::{Gc, GC};\n-\n-enum List<X> { Nil, Cons(X, Gc<List<X>>) }\n+enum List<X> { Nil, Cons(X, Box<List<X>>) }\n pub fn main() {\n-    match Cons(10i, box(GC) Nil) {\n+    match Cons(10i, box Nil) {\n         Cons(10i, _) => {}\n         Nil => {}\n         _ => fail!()"}, {"sha": "63e034c0eaa30798beb2ac506d4cdcbdc179faf1", "filename": "src/test/run-pass/evec-internal-boxes.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fevec-internal-boxes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fevec-internal-boxes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fevec-internal-boxes.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,22 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![allow(dead_assignment)]\n-\n-use std::gc::{Gc, GC};\n-\n-pub fn main() {\n-    let x : [Gc<int>, ..5] = [box(GC) 1,box(GC) 2,box(GC) 3,box(GC) 4,box(GC) 5];\n-    let _y : [Gc<int>, ..5] = [box(GC) 1,box(GC) 2,box(GC) 3,box(GC) 4,box(GC) 5];\n-    let mut z = [box(GC) 1,box(GC) 2,box(GC) 3,box(GC) 4,box(GC) 5];\n-    z = x;\n-    assert_eq!(*z[0], 1);\n-    assert_eq!(*z[4], 5);\n-}"}, {"sha": "94652e30fe64f2ac86fd1419607c1bc114b35610", "filename": "src/test/run-pass/export-non-interference.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fexport-non-interference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fexport-non-interference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-non-interference.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -9,8 +9,6 @@\n // except according to those terms.\n \n \n-use std::gc::Gc;\n-\n-enum list_cell<T> { cons(Gc<list_cell<T>>), nil }\n+enum list_cell<T> { cons(Box<list_cell<T>>), nil }\n \n pub fn main() { }"}, {"sha": "9b3d2028edffb8d54f76f98d42a47fba7f2f1fc6", "filename": "src/test/run-pass/expr-block-box.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fexpr-block-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fexpr-block-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-box.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,14 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::GC;\n-\n-pub fn main() { let x = { box(GC) 100i }; assert!((*x == 100)); }"}, {"sha": "dfcef1712526a6b0b468a1dcdb93efd160896a63", "filename": "src/test/run-pass/expr-block-generic-box1.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box1.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,30 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::{Gc, GC};\n-\n-type compare<T> = |Gc<T>, Gc<T>|: 'static -> bool;\n-\n-fn test_generic<T>(expected: Gc<T>, eq: compare<T>) {\n-    let actual: Gc<T> = { expected };\n-    assert!((eq(expected, actual)));\n-}\n-\n-fn test_box() {\n-    fn compare_box(b1: Gc<bool>, b2: Gc<bool>) -> bool {\n-        println!(\"{}\", *b1);\n-        println!(\"{}\", *b2);\n-        return *b1 == *b2;\n-    }\n-    test_generic::<bool>(box(GC) true, compare_box);\n-}\n-\n-pub fn main() { test_box(); }"}, {"sha": "547e7dfa9110ebc16f02622ee2d27d758dae195a", "filename": "src/test/run-pass/expr-block-generic-box2.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box2.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,26 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::{GC, Gc};\n-\n-type compare<'a, T> = |T, T|: 'a -> bool;\n-\n-fn test_generic<T:Clone>(expected: T, eq: compare<T>) {\n-    let actual: T = { expected.clone() };\n-    assert!((eq(expected, actual)));\n-}\n-\n-fn test_vec() {\n-    fn compare_vec(v1: Gc<int>, v2: Gc<int>) -> bool { return v1 == v2; }\n-    test_generic::<Gc<int>>(box(GC) 1, compare_vec);\n-}\n-\n-pub fn main() { test_vec(); }"}, {"sha": "3d649b17b79372da5eaae8d50483d3b7c66c35e8", "filename": "src/test/run-pass/expr-block-ref.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fexpr-block-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fexpr-block-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-ref.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,15 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::GC;\n-\n-// Regression test for issue #388\n-pub fn main() { let _x = { { box(GC) 10i } }; }"}, {"sha": "f0b9c85a53d33e713ca0bc8063370c085a2ab7df", "filename": "src/test/run-pass/expr-elseif-ref.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fexpr-elseif-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fexpr-elseif-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-elseif-ref.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,20 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::{Gc, GC};\n-\n-// Make sure we drop the refs of the temporaries needed to return the\n-// values from the else if branch\n-pub fn main() {\n-    let y: Gc<uint> = box(GC) 10u;\n-    let _x = if false { y } else if true { y } else { y };\n-    assert_eq!(*y, 10u);\n-}"}, {"sha": "9d4efea7e3d104c5b89981cdcc0049e64d98dd58", "filename": "src/test/run-pass/expr-elseif-ref2.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fexpr-elseif-ref2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fexpr-elseif-ref2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-elseif-ref2.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,23 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::{GC};\n-\n-// Regression test for issue #388\n-pub fn main() {\n-    let _x = if false {\n-        box(GC) 0u\n-    } else if true {\n-        box(GC) 10u\n-    } else {\n-        box(GC) 0u\n-    };\n-}"}, {"sha": "3def4571e134bda151f1078a3e517f82ab7346e3", "filename": "src/test/run-pass/expr-if-box.rs", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fexpr-if-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fexpr-if-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-box.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,25 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::{Gc, GC};\n-\n-// Tests for if as expressions returning boxed types\n-fn test_box() {\n-    let rs = if true { box(GC) 100i } else { box(GC) 101i };\n-    assert_eq!(*rs, 100);\n-}\n-\n-fn test_str() {\n-    let rs = if true { \"happy\".to_string() } else { \"sad\".to_string() };\n-    assert_eq!(rs, \"happy\".to_string());\n-}\n-\n-pub fn main() { test_box(); test_str(); }"}, {"sha": "931f500a3093556e876609ce6682b9489d456231", "filename": "src/test/run-pass/expr-if-generic-box1.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box1.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,26 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::{GC, Gc};\n-\n-type compare<T> = |Gc<T>, Gc<T>|: 'static -> bool;\n-\n-fn test_generic<T>(expected: Gc<T>, not_expected: Gc<T>, eq: compare<T>) {\n-    let actual: Gc<T> = if true { expected } else { not_expected };\n-    assert!((eq(expected, actual)));\n-}\n-\n-fn test_box() {\n-    fn compare_box(b1: Gc<bool>, b2: Gc<bool>) -> bool { return *b1 == *b2; }\n-    test_generic::<bool>(box(GC) true, box(GC) false, compare_box);\n-}\n-\n-pub fn main() { test_box(); }"}, {"sha": "b8b8c9b89a8adf3c69e0655c7cf3890e19d18910", "filename": "src/test/run-pass/expr-if-generic-box2.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box2.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,26 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::{Gc, GC};\n-\n-type compare<T> = |T, T|: 'static -> bool;\n-\n-fn test_generic<T:Clone>(expected: T, not_expected: T, eq: compare<T>) {\n-    let actual: T = if true { expected.clone() } else { not_expected };\n-    assert!((eq(expected, actual)));\n-}\n-\n-fn test_vec() {\n-    fn compare_box(v1: Gc<int>, v2: Gc<int>) -> bool { return v1 == v2; }\n-    test_generic::<Gc<int>>(box(GC) 1, box(GC) 2, compare_box);\n-}\n-\n-pub fn main() { test_vec(); }"}, {"sha": "c2ba36006bd039db54da53a395695506a67a61ec", "filename": "src/test/run-pass/expr-match-box.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fexpr-match-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fexpr-match-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-box.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,26 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::GC;\n-\n-// Tests for match as expressions resulting in boxed types\n-fn test_box() {\n-    let res = match true { true => { box(GC) 100i } _ => fail!(\"wat\") };\n-    assert_eq!(*res, 100i);\n-}\n-\n-fn test_str() {\n-    let res = match true { true => { \"happy\".to_string() },\n-                         _ => fail!(\"not happy at all\") };\n-    assert_eq!(res, \"happy\".to_string());\n-}\n-\n-pub fn main() { test_box(); test_str(); }"}, {"sha": "97fa53b5e243905a0d5360d24ae749e2e6201ce5", "filename": "src/test/run-pass/expr-match-generic-box1.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fexpr-match-generic-box1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fexpr-match-generic-box1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-generic-box1.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,26 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::{Gc, GC};\n-\n-type compare<T> = |Gc<T>, Gc<T>|: 'static -> bool;\n-\n-fn test_generic<T>(expected: Gc<T>, eq: compare<T>) {\n-    let actual: Gc<T> = match true { true => { expected }, _ => fail!() };\n-    assert!((eq(expected, actual)));\n-}\n-\n-fn test_box() {\n-    fn compare_box(b1: Gc<bool>, b2: Gc<bool>) -> bool { return *b1 == *b2; }\n-    test_generic::<bool>(box(GC) true, compare_box);\n-}\n-\n-pub fn main() { test_box(); }"}, {"sha": "fd8179c59a59369ea32d34bca4701c7b0405bb25", "filename": "src/test/run-pass/expr-match-generic-box2.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fexpr-match-generic-box2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fexpr-match-generic-box2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-generic-box2.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,26 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::{Gc, GC};\n-\n-type compare<T> = |T, T|: 'static -> bool;\n-\n-fn test_generic<T:Clone>(expected: T, eq: compare<T>) {\n-    let actual: T = match true { true => { expected.clone() }, _ => fail!(\"wat\") };\n-    assert!((eq(expected, actual)));\n-}\n-\n-fn test_vec() {\n-    fn compare_box(v1: Gc<int>, v2: Gc<int>) -> bool { return v1 == v2; }\n-    test_generic::<Gc<int>>(box(GC) 1, compare_box);\n-}\n-\n-pub fn main() { test_vec(); }"}, {"sha": "e95c2034131552beed85a747b442bbac4233dfa2", "filename": "src/test/run-pass/exterior.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fexterior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fexterior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexterior.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -10,19 +10,18 @@\n \n \n use std::cell::Cell;\n-use std::gc::{Gc, GC};\n \n struct Point {x: int, y: int, z: int}\n \n-fn f(p: Gc<Cell<Point>>) {\n+fn f(p: &Cell<Point>) {\n     assert!((p.get().z == 12));\n     p.set(Point {x: 10, y: 11, z: 13});\n     assert!((p.get().z == 13));\n }\n \n pub fn main() {\n     let a: Point = Point {x: 10, y: 11, z: 12};\n-    let b: Gc<Cell<Point>> = box(GC) Cell::new(a);\n+    let b: &Cell<Point> = &Cell::new(a);\n     assert_eq!(b.get().z, 12);\n     f(b);\n     assert_eq!(a.z, 12);"}, {"sha": "3faa30c4c8a20e896e0d17e594bdfdffedea91c0", "filename": "src/test/run-pass/fail-during-tld-destroy.rs", "status": "modified", "additions": 5, "deletions": 25, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Ffail-during-tld-destroy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Ffail-during-tld-destroy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffail-during-tld-destroy.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -9,45 +9,25 @@\n // except according to those terms.\n \n use std::task;\n-use std::gc::{GC, Gc};\n-use std::cell::RefCell;\n \n static mut DROPS: uint = 0;\n \n-struct Foo(bool);\n+struct Foo;\n impl Drop for Foo {\n     fn drop(&mut self) {\n-        let Foo(fail) = *self;\n         unsafe { DROPS += 1; }\n-        if fail { fail!() }\n+        fail!()\n     }\n }\n \n-fn tld_fail(fail: bool) {\n-    local_data_key!(foo: Foo);\n-    foo.replace(Some(Foo(fail)));\n-}\n-\n-fn gc_fail(fail: bool) {\n-    struct A {\n-        inner: RefCell<Option<Gc<A>>>,\n-        other: Foo,\n-    }\n-    let a = box(GC) A {\n-        inner: RefCell::new(None),\n-        other: Foo(fail),\n-    };\n-    *a.inner.borrow_mut() = Some(a.clone());\n-}\n-\n fn main() {\n     let _ = task::try(proc() {\n-        tld_fail(true);\n-        gc_fail(false);\n+        local_data_key!(foo: Foo);\n+        foo.replace(Some(Foo));\n     });\n \n     unsafe {\n-        assert_eq!(DROPS, 2);\n+        assert_eq!(DROPS, 1);\n     }\n }\n "}, {"sha": "430ee16bc8a26682078697fd3d7fc92d517851a6", "filename": "src/test/run-pass/gc-vec.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fgc-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fgc-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgc-vec.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,22 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use std::gc::{GC};\n-\n-fn main() {\n-    // A fixed-size array allocated in a garbage-collected box\n-    let x = box(GC) [1i, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n-    assert_eq!(x[0], 1);\n-    assert_eq!(x[6], 7);\n-    assert_eq!(x[9], 10);\n-\n-    let y = x;\n-    assert!(*y == [1i, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n-}"}, {"sha": "325f6a2c8547301e0c1322ff60b6515c386a8fbe", "filename": "src/test/run-pass/generic-alias-box.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fgeneric-alias-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fgeneric-alias-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-alias-box.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,23 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-extern crate debug;\n-\n-use std::gc::{Gc, GC};\n-\n-fn id<T>(t: T) -> T { return t; }\n-\n-pub fn main() {\n-    let expected = box(GC) 100;\n-    let actual = id::<Gc<int>>(expected);\n-    println!(\"{:?}\", *actual);\n-    assert_eq!(*expected, *actual);\n-}"}, {"sha": "d5047eb8f863b125559fcd5eb386fe675370e497", "filename": "src/test/run-pass/generic-box.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fgeneric-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fgeneric-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-box.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,21 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::{Gc, GC};\n-\n-fn box_it<T:'static>(x: Box<T>) -> Gc<Box<T>> { return box(GC) x; }\n-\n-struct Box<T> {x: T, y: T, z: T}\n-\n-pub fn main() {\n-    let x: Gc<Box<int>> = box_it::<int>(Box{x: 1, y: 2, z: 3});\n-    assert_eq!(x.y, 2);\n-}"}, {"sha": "2cc3a89459eba2c4f5da39707ca091913764107b", "filename": "src/test/run-pass/generic-drop-glue.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fgeneric-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fgeneric-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-drop-glue.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,18 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::{Gc, GC};\n-\n-struct Pair { x: Gc<int>, y: Gc<int> }\n-\n-fn f<T>(t: T) { let _t1: T = t; }\n-\n-pub fn main() { let x = Pair {x: box(GC) 10, y: box(GC) 12}; f(x); }"}, {"sha": "2c1ae5d985489f5e9696ed367b34e6cbe62c3197", "filename": "src/test/run-pass/generic-exterior-box.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fgeneric-exterior-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fgeneric-exterior-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-exterior-box.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,22 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::{Gc, GC};\n-\n-struct Recbox<T> {x: Gc<T>}\n-\n-fn reclift<T:'static>(t: T) -> Recbox<T> { return Recbox {x: box(GC) t}; }\n-\n-pub fn main() {\n-    let foo: int = 17;\n-    let rbfoo: Recbox<int> = reclift::<int>(foo);\n-    assert_eq!(*rbfoo.x, foo);\n-}"}, {"sha": "2164b00e0669131c0aa6bcfb2bb740c06c47df92", "filename": "src/test/run-pass/generic-fn-box.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fgeneric-fn-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fgeneric-fn-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-fn-box.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,18 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-extern crate debug;\n-\n-use std::gc::{Gc, GC};\n-\n-fn f<T>(x: Gc<T>) -> Gc<T> { return x; }\n-\n-pub fn main() { let x = f(box(GC) 3i); println!(\"{:?}\", *x); }"}, {"sha": "68e7b98183b3c3e7aa14e47e34c54f11f5239282", "filename": "src/test/run-pass/generic-ivec.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fgeneric-ivec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fgeneric-ivec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-ivec.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,15 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::{Gc, GC};\n-\n-fn f<T>(_v: Gc<T>) { }\n-pub fn main() { f(box(GC) vec!(1i, 2, 3, 4, 5)); }"}, {"sha": "d8777515cecf05e510ba1c89f8684d17d3c5b257", "filename": "src/test/run-pass/generic-recursive-tag.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fgeneric-recursive-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fgeneric-recursive-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-recursive-tag.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -11,14 +11,12 @@\n // ignore-pretty FIXME(#14193)\n \n \n-use std::gc::{Gc, GC};\n-\n-enum list<T> { cons(Gc<T>, Gc<list<T>>), nil, }\n+enum list<T> { cons(Box<T>, Box<list<T>>), nil, }\n \n pub fn main() {\n     let _a: list<int> =\n-        cons::<int>(box(GC) 10,\n-        box(GC) cons::<int>(box(GC) 12,\n-        box(GC) cons::<int>(box(GC) 13,\n-        box(GC) nil::<int>)));\n+        cons::<int>(box 10,\n+        box cons::<int>(box 12,\n+        box cons::<int>(box 13,\n+        box nil::<int>)));\n }"}, {"sha": "52e512e515c589cd311ec59f29b0a0c72b0fc68b", "filename": "src/test/run-pass/generic-tag.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fgeneric-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fgeneric-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tag.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -11,11 +11,9 @@\n #![allow(dead_assignment)]\n #![allow(unused_variable)]\n \n-use std::gc::{Gc, GC};\n-\n-enum option<T> { some(Gc<T>), none, }\n+enum option<T> { some(Box<T>), none, }\n \n pub fn main() {\n-    let mut a: option<int> = some::<int>(box(GC) 10);\n+    let mut a: option<int> = some::<int>(box 10);\n     a = none::<int>;\n }"}, {"sha": "365070f704f8541efa68390296809412658b8741", "filename": "src/test/run-pass/ifmt.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fifmt.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -18,7 +18,6 @@\n extern crate debug;\n \n use std::fmt;\n-use std::gc::GC;\n use std::io::MemWriter;\n use std::io;\n use std::str;\n@@ -50,7 +49,6 @@ pub fn main() {\n     t!(format!(\"{:?}\", 1i), \"1\");\n     t!(format!(\"{:?}\", A), \"A\");\n     t!(format!(\"{:?}\", ()), \"()\");\n-    t!(format!(\"{:?}\", box(GC) (box 1i, \"foo\")), \"box(GC) (box 1, \\\"foo\\\")\");\n \n     // Various edge cases without formats\n     t!(format!(\"\"), \"\");"}, {"sha": "752e95f25dc5315d1fdc8664efbf2247c11a4c92", "filename": "src/test/run-pass/init-res-into-things.rs", "status": "modified", "additions": 16, "deletions": 26, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -11,89 +11,79 @@\n #![feature(unsafe_destructor)]\n \n use std::cell::Cell;\n-use std::gc::{Gc, GC};\n \n // Resources can't be copied, but storing into data structures counts\n // as a move unless the stored thing is used afterwards.\n \n-struct r {\n-    i: Gc<Cell<int>>,\n+struct r<'a> {\n+    i: &'a Cell<int>,\n }\n \n-struct Box { x: r }\n+struct BoxR<'a> { x: r<'a> }\n \n #[unsafe_destructor]\n-impl Drop for r {\n+impl<'a> Drop for r<'a> {\n     fn drop(&mut self) {\n         self.i.set(self.i.get() + 1)\n     }\n }\n \n-fn r(i: Gc<Cell<int>>) -> r {\n+fn r(i: &Cell<int>) -> r {\n     r {\n         i: i\n     }\n }\n \n-fn test_box() {\n-    let i = box(GC) Cell::new(0i);\n-    {\n-        let _a = box(GC) r(i);\n-    }\n-    assert_eq!(i.get(), 1);\n-}\n-\n fn test_rec() {\n-    let i = box(GC) Cell::new(0i);\n+    let i = &Cell::new(0i);\n     {\n-        let _a = Box {x: r(i)};\n+        let _a = BoxR {x: r(i)};\n     }\n     assert_eq!(i.get(), 1);\n }\n \n fn test_tag() {\n-    enum t {\n-        t0(r),\n+    enum t<'a> {\n+        t0(r<'a>),\n     }\n \n-    let i = box(GC) Cell::new(0i);\n+    let i = &Cell::new(0i);\n     {\n         let _a = t0(r(i));\n     }\n     assert_eq!(i.get(), 1);\n }\n \n fn test_tup() {\n-    let i = box(GC) Cell::new(0i);\n+    let i = &Cell::new(0i);\n     {\n         let _a = (r(i), 0i);\n     }\n     assert_eq!(i.get(), 1);\n }\n \n fn test_unique() {\n-    let i = box(GC) Cell::new(0i);\n+    let i = &Cell::new(0i);\n     {\n         let _a = box r(i);\n     }\n     assert_eq!(i.get(), 1);\n }\n \n-fn test_box_rec() {\n-    let i = box(GC) Cell::new(0i);\n+fn test_unique_rec() {\n+    let i = &Cell::new(0i);\n     {\n-        let _a = box(GC) Box {\n+        let _a = box BoxR {\n             x: r(i)\n         };\n     }\n     assert_eq!(i.get(), 1);\n }\n \n pub fn main() {\n-    test_box();\n     test_rec();\n     test_tag();\n     test_tup();\n     test_unique();\n-    test_box_rec();\n+    test_unique_rec();\n }"}, {"sha": "dd9a7c97c9ab5f5ca8a2431955e28e321607be8d", "filename": "src/test/run-pass/issue-14082.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fissue-14082.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fissue-14082.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14082.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -8,21 +8,20 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(globs)]\n #![allow(unused_imports, dead_code)]\n \n-use foo::GC;\n+use foo::Foo;\n \n mod foo {\n-    pub use m::GC; // this should shadow d::GC\n+    pub use m::Foo; // this should shadow d::Foo\n }\n \n mod m {\n-    pub struct GC;\n+    pub struct Foo;\n }\n \n mod d {\n-    pub struct GC;\n+    pub struct Foo;\n }\n \n fn main() {}"}, {"sha": "84f046499e439ca1f96c64e15c626a0a401760a2", "filename": "src/test/run-pass/issue-2631-b.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fissue-2631-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fissue-2631-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2631-b.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -11,17 +11,16 @@\n \n // aux-build:issue-2631-a.rs\n \n-extern crate collections;\n extern crate req;\n \n use req::request;\n use std::cell::RefCell;\n use std::collections::HashMap;\n-use std::gc::GC;\n+use std::rc::Rc;\n \n pub fn main() {\n-  let v = vec!(box(GC) \"hi\".to_string());\n+  let v = vec!(Rc::new(\"hi\".to_string()));\n   let mut m: req::header_map = HashMap::new();\n-  m.insert(\"METHOD\".to_string(), box(GC) RefCell::new(v));\n+  m.insert(\"METHOD\".to_string(), Rc::new(RefCell::new(v)));\n   request::<int>(&m);\n }"}, {"sha": "3ac4b874f3ad8cb00dd48fb3e1622c0d13c10174", "filename": "src/test/run-pass/issue-2708.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fissue-2708.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fissue-2708.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2708.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -9,8 +9,6 @@\n // except according to those terms.\n \n \n-use std::gc::GC;\n-\n struct Font {\n     fontbuf: uint,\n     cairo_font: uint,\n@@ -31,5 +29,5 @@ fn Font() -> Font {\n }\n \n pub fn main() {\n-    let _f = box(GC) Font();\n+    let _f = box Font();\n }"}, {"sha": "0d1cf1c339227689787ff76a3712ea3719973ff3", "filename": "src/test/run-pass/issue-2735-2.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fissue-2735-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fissue-2735-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2735-2.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -11,28 +11,27 @@\n #![feature(unsafe_destructor)]\n \n use std::cell::Cell;\n-use std::gc::{Gc, GC};\n \n // This test should behave exactly like issue-2735-3\n-struct defer {\n-    b: Gc<Cell<bool>>,\n+struct defer<'a> {\n+    b: &'a Cell<bool>,\n }\n \n #[unsafe_destructor]\n-impl Drop for defer {\n+impl<'a> Drop for defer<'a> {\n     fn drop(&mut self) {\n         self.b.set(true);\n     }\n }\n \n-fn defer(b: Gc<Cell<bool>>) -> defer {\n+fn defer(b: &Cell<bool>) -> defer {\n     defer {\n         b: b\n     }\n }\n \n pub fn main() {\n-    let dtor_ran = box(GC) Cell::new(false);\n+    let dtor_ran = &Cell::new(false);\n     let _  = defer(dtor_ran);\n     assert!(dtor_ran.get());\n }"}, {"sha": "658183cf6ff5437b64fc1c74f1d58b55aa033b02", "filename": "src/test/run-pass/issue-2735-3.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fissue-2735-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fissue-2735-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2735-3.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -11,28 +11,27 @@\n #![feature(unsafe_destructor)]\n \n use std::cell::Cell;\n-use std::gc::{Gc, GC};\n \n // This test should behave exactly like issue-2735-2\n-struct defer {\n-    b: Gc<Cell<bool>>,\n+struct defer<'a> {\n+    b: &'a Cell<bool>,\n }\n \n #[unsafe_destructor]\n-impl Drop for defer {\n+impl<'a> Drop for defer<'a> {\n     fn drop(&mut self) {\n         self.b.set(true);\n     }\n }\n \n-fn defer(b: Gc<Cell<bool>>) -> defer {\n+fn defer(b: &Cell<bool>) -> defer {\n     defer {\n         b: b\n     }\n }\n \n pub fn main() {\n-    let dtor_ran = box(GC) Cell::new(false);\n+    let dtor_ran = &Cell::new(false);\n     defer(dtor_ran);\n     assert!(dtor_ran.get());\n }"}, {"sha": "aa2ce824822b1d580e19a0e5d67a67a067549d7d", "filename": "src/test/run-pass/issue-3012-2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fissue-3012-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fissue-3012-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3012-2.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -14,10 +14,9 @@\n extern crate socketlib;\n extern crate libc;\n \n-use std::gc::GC;\n use socketlib::socket;\n \n pub fn main() {\n     let fd: libc::c_int = 1 as libc::c_int;\n-    let _sock = box(GC) socket::socket_handle(fd);\n+    let _sock = box socket::socket_handle(fd);\n }"}, {"sha": "6b320e1474624a5e66b6dcde3ba202701cb01c7e", "filename": "src/test/run-pass/issue-3121.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fissue-3121.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fissue-3121.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3121.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -9,13 +9,11 @@\n // except according to those terms.\n \n \n-use std::gc::{Gc, GC};\n-\n enum side { mayo, catsup, vinegar }\n enum order { hamburger, fries(side), shake }\n enum meal { to_go(order), for_here(order) }\n \n-fn foo(m: Gc<meal>, cond: bool) {\n+fn foo(m: Box<meal>, cond: bool) {\n     match *m {\n       to_go(_) => { }\n       for_here(_) if cond => {}\n@@ -26,5 +24,5 @@ fn foo(m: Gc<meal>, cond: bool) {\n }\n \n pub fn main() {\n-    foo(box(GC) for_here(hamburger), true)\n+    foo(box for_here(hamburger), true)\n }"}, {"sha": "4ebf981e4ee55aef4e4c1195c79b67b07204b5b9", "filename": "src/test/run-pass/issue-3447.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fissue-3447.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fissue-3447.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3447.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -10,13 +10,12 @@\n \n \n use std::cell::RefCell;\n-use std::gc::{Gc, GC};\n \n static S: &'static str = \"str\";\n \n struct list<T> {\n     element: T,\n-    next: Option<Gc<RefCell<list<T>>>>\n+    next: Option<Box<RefCell<list<T>>>>\n }\n \n impl<T:'static> list<T> {\n@@ -26,7 +25,7 @@ impl<T:'static> list<T> {\n             next: None\n         };\n \n-        self.next = Some(box(GC) RefCell::new(newList));\n+        self.next = Some(box RefCell::new(newList));\n     }\n }\n "}, {"sha": "e59cf9f77fa6e9fc82f0555b2e6989fc5dbd2534", "filename": "src/test/run-pass/issue-3556.rs", "status": "modified", "additions": 16, "deletions": 19, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fissue-3556.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fissue-3556.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3556.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -9,18 +9,15 @@\n // except according to those terms.\n \n \n-extern crate debug;\n-\n-use std::gc::{Gc, GC};\n-\n+#[deriving(Show)]\n enum Token {\n-    Text(Gc<String>),\n-    ETag(Gc<Vec<String>> , Gc<String>),\n-    UTag(Gc<Vec<String>> , Gc<String>),\n-    Section(Gc<Vec<String>> , bool, Gc<Vec<Token>>, Gc<String>,\n-            Gc<String>, Gc<String>, Gc<String>, Gc<String>),\n-    IncompleteSection(Gc<Vec<String>> , bool, Gc<String>, bool),\n-    Partial(Gc<String>, Gc<String>, Gc<String>),\n+    Text(String),\n+    ETag(Vec<String>, String),\n+    UTag(Vec<String>, String),\n+    Section(Vec<String>, bool, Vec<Token>, String,\n+            String, String, String, String),\n+    IncompleteSection(Vec<String>, bool, String, bool),\n+    Partial(String, String, String),\n }\n \n fn check_strs(actual: &str, expected: &str) -> bool\n@@ -39,13 +36,13 @@ pub fn main()\n // assert!(check_strs(fmt!(\"%?\", ETag(@~[\"foo\".to_string()], @\"bar\".to_string())),\n //                    \"ETag(@~[ ~\\\"foo\\\" ], @~\\\"bar\\\")\"));\n \n-    let t = Text(box(GC) \"foo\".to_string());\n-    let u = Section(box(GC) vec!(\"alpha\".to_string()),\n-                          true,\n-                          box(GC) vec!(t),\n-                          box(GC) \"foo\".to_string(),\n-                    box(GC) \"foo\".to_string(), box(GC) \"foo\".to_string(), box(GC) \"foo\".to_string(),\n-                    box(GC) \"foo\".to_string());\n-    let v = format!(\"{:?}\", u);    // this is the line that causes the seg fault\n+    let t = Text(\"foo\".to_string());\n+    let u = Section(vec![\"alpha\".to_string()],\n+                    true,\n+                    vec![t],\n+                    \"foo\".to_string(),\n+                    \"foo\".to_string(), \"foo\".to_string(), \"foo\".to_string(),\n+                    \"foo\".to_string());\n+    let v = format!(\"{}\", u);    // this is the line that causes the seg fault\n     assert!(v.len() > 0);\n }"}, {"sha": "4010c31eed50a3575394763b677d26458d6038fd", "filename": "src/test/run-pass/issue-5884.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fissue-5884.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fissue-5884.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5884.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -9,8 +9,6 @@\n // except according to those terms.\n \n \n-use std::gc::Gc;\n-\n pub struct Foo {\n     a: int,\n }\n@@ -20,7 +18,7 @@ struct Bar<'a> {\n     b: &'a Foo,\n }\n \n-fn check(a: Gc<Foo>) {\n+fn check(a: Box<Foo>) {\n     let _ic = Bar{ b: &*a, a: box None };\n }\n "}, {"sha": "7eaaa5ea74eda657b05d3253ca4c7aa35aa5e3aa", "filename": "src/test/run-pass/issue-6117.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fissue-6117.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fissue-6117.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6117.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -9,12 +9,10 @@\n // except according to those terms.\n \n \n-use std::gc::GC;\n-\n enum Either<T, U> { Left(T), Right(U) }\n \n pub fn main() {\n-    match Left(box(GC) 17i) {\n+    match Left(box 17i) {\n         Right(()) => {}\n         _ => {}\n     }"}, {"sha": "d8ced58155df28856e2f31a36dc7409aa1778515", "filename": "src/test/run-pass/issue-8898.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fissue-8898.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fissue-8898.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8898.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -11,8 +11,6 @@\n \n extern crate debug;\n \n-use std::gc::GC;\n-\n fn assert_repr_eq<T>(obj : T, expected : String) {\n     assert_eq!(expected, format!(\"{:?}\", obj));\n }\n@@ -21,13 +19,11 @@ pub fn main() {\n     let abc = [1i, 2, 3];\n     let tf = [true, false];\n     let x  = [(), ()];\n-    let slice = x.slice(0,1);\n-    let z = box(GC) x;\n+    let slice = x.slice(0, 1);\n \n     assert_repr_eq(abc, \"[1, 2, 3]\".to_string());\n     assert_repr_eq(tf, \"[true, false]\".to_string());\n     assert_repr_eq(x, \"[(), ()]\".to_string());\n     assert_repr_eq(slice, \"&[()]\".to_string());\n     assert_repr_eq(&x, \"&[(), ()]\".to_string());\n-    assert_repr_eq(z, \"box(GC) [(), ()]\".to_string());\n }"}, {"sha": "1291f0b6cd1c78b71835f696835513dba505824c", "filename": "src/test/run-pass/issue-8983.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fissue-8983.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fissue-8983.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8983.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,20 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::GC;\n-\n-fn main() {\n-    fn f(_: proc()) {}\n-    fn eat<T>(_: T) {}\n-\n-    let x = box(GC) 1i;\n-    f(proc() { eat(x) });\n-}"}, {"sha": "919f0aae38e0acb48a104fe9520d154ff0a75470", "filename": "src/test/run-pass/issue-979.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fissue-979.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fissue-979.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-979.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -11,27 +11,26 @@\n #![feature(unsafe_destructor)]\n \n use std::cell::Cell;\n-use std::gc::{GC, Gc};\n \n-struct r {\n-    b: Gc<Cell<int>>,\n+struct r<'a> {\n+    b: &'a Cell<int>,\n }\n \n #[unsafe_destructor]\n-impl Drop for r {\n+impl<'a> Drop for r<'a> {\n     fn drop(&mut self) {\n         self.b.set(self.b.get() + 1);\n     }\n }\n \n-fn r(b: Gc<Cell<int>>) -> r {\n+fn r(b: &Cell<int>) -> r {\n     r {\n         b: b\n     }\n }\n \n pub fn main() {\n-    let b = box(GC) Cell::new(0);\n+    let b = &Cell::new(0);\n     {\n         let _p = Some(r(b));\n     }"}, {"sha": "1083f1b3c71cb6513f2c77e943f381734e67a203", "filename": "src/test/run-pass/issue-980.rs", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fissue-980.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fissue-980.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-980.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,29 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::cell::RefCell;\n-use std::gc::{Gc, GC};\n-\n-enum maybe_pointy {\n-    no_pointy,\n-    yes_pointy(Gc<RefCell<Pointy>>),\n-}\n-\n-struct Pointy {\n-    x: maybe_pointy\n-}\n-\n-pub fn main() {\n-    let m = box(GC) RefCell::new(Pointy { x : no_pointy });\n-    *m.borrow_mut() = Pointy {\n-        x: yes_pointy(m)\n-    };\n-}"}, {"sha": "57b9b2494f5ff044098cbef1dd17f15d6b37e1e6", "filename": "src/test/run-pass/leak-box-as-tydesc.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fleak-box-as-tydesc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fleak-box-as-tydesc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fleak-box-as-tydesc.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,16 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::{Gc, GC};\n-\n-fn leaky<T>(_t: T) { }\n-\n-pub fn main() { let x = box(GC) 10; leaky::<Gc<int>>(x); }"}, {"sha": "3be122b38fa1ec5911e834df4d4aba028cc851d1", "filename": "src/test/run-pass/leak-tag-copy.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fleak-tag-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fleak-tag-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fleak-tag-copy.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,18 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![allow(dead_assignment)]\n-#![allow(unused_variable)]\n-\n-use std::gc::{Gc, GC};\n-\n-enum t { a, b(Gc<int>), }\n-\n-pub fn main() { let mut x = b(box(GC) 10); x = a; }"}, {"sha": "7d0778b685937f0cec8ba27a2bfe9b330de62b40", "filename": "src/test/run-pass/list.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flist.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -9,8 +9,6 @@\n // except according to those terms.\n \n \n-use std::gc::{Gc, GC};\n+enum list { cons(int, Box<list>), nil, }\n \n-enum list { cons(int, Gc<list>), nil, }\n-\n-pub fn main() { cons(10, box(GC) cons(11, box(GC) cons(12, box(GC) nil))); }\n+pub fn main() { cons(10, box cons(11, box cons(12, box nil))); }"}, {"sha": "ee91ae124b876f0f5386e7ffdcd69e759ef0e1df", "filename": "src/test/run-pass/mlist.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fmlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fmlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmlist.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,16 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::{Gc, GC};\n-\n-enum mlist { cons(int, Gc<mlist>), nil, }\n-\n-pub fn main() { cons(10, box(GC) cons(11, box(GC) cons(12, box(GC) nil))); }"}, {"sha": "6f4ffa51a4677f6434d16e07cab2c19a6c5c84b0", "filename": "src/test/run-pass/move-1.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fmove-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fmove-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-1.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,30 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::{Gc, GC};\n-\n-struct Triple { x: int, y: int, z: int }\n-\n-fn test(x: bool, foo: Gc<Triple>) -> int {\n-    let bar = foo;\n-    let mut y: Gc<Triple>;\n-    y = bar;\n-    if x { y = bar; } else { y = box(GC) Triple{x: 4, y: 5, z: 6}; }\n-    return y.y;\n-}\n-\n-pub fn main() {\n-    let x = box(GC) Triple {x: 1, y: 2, z: 3};\n-    assert_eq!(test(true, x), 2);\n-    assert_eq!(test(true, x), 2);\n-    assert_eq!(test(true, x), 2);\n-    assert_eq!(test(false, x), 5);\n-}"}, {"sha": "04540c2f35b29ef05fe73b00c59d5b973a38f4c1", "filename": "src/test/run-pass/move-2.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fmove-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fmove-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-2.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -9,8 +9,6 @@\n // except according to those terms.\n \n \n-use std::gc::GC;\n-\n struct X { x: int, y: int, z: int }\n \n-pub fn main() { let x = box(GC) X {x: 1, y: 2, z: 3}; let y = x; assert!((y.y == 2)); }\n+pub fn main() { let x = box X {x: 1, y: 2, z: 3}; let y = x; assert!((y.y == 2)); }"}, {"sha": "21a7d57b5631eaf6fd7355ef2ac50097b1876c42", "filename": "src/test/run-pass/move-3.rs", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fmove-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fmove-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-3.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,29 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::{Gc, GC};\n-\n-struct Triple { x: int, y: int, z: int }\n-\n-fn test(x: bool, foo: Gc<Triple>) -> int {\n-    let bar = foo;\n-    let mut y: Gc<Triple>;\n-    if x { y = bar; } else { y = box(GC) Triple{x: 4, y: 5, z: 6}; }\n-    return y.y;\n-}\n-\n-pub fn main() {\n-    let x = box(GC) Triple{x: 1, y: 2, z: 3};\n-    for _i in range(0u, 10000u) {\n-        assert_eq!(test(true, x), 2);\n-    }\n-    assert_eq!(test(false, x), 5);\n-}"}, {"sha": "5e5d01ae6ee4529d209f1d1b4bb29e8aa470ce78", "filename": "src/test/run-pass/move-4.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fmove-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fmove-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-4.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -9,11 +9,9 @@\n // except according to those terms.\n \n \n-use std::gc::{GC, Gc};\n-\n struct Triple { a: int, b: int, c: int }\n \n-fn test(foo: Gc<Triple>) -> Gc<Triple> {\n+fn test(foo: Box<Triple>) -> Box<Triple> {\n     let foo = foo;\n     let bar = foo;\n     let baz = bar;\n@@ -22,7 +20,7 @@ fn test(foo: Gc<Triple>) -> Gc<Triple> {\n }\n \n pub fn main() {\n-    let x = box(GC) Triple{a: 1, b: 2, c: 3};\n+    let x = box Triple{a: 1, b: 2, c: 3};\n     let y = test(x);\n     assert_eq!(y.c, 3);\n }"}, {"sha": "840a3c2a6ee86caf63b393390eec597a0f360e47", "filename": "src/test/run-pass/move-arg-2.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fmove-arg-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fmove-arg-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-arg-2.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -9,15 +9,13 @@\n // except according to those terms.\n \n \n-use std::gc::{Gc, GC};\n-\n-fn test(foo: Gc<Vec<int>>) { assert!((*foo.get(0) == 10)); }\n+fn test(foo: Box<Vec<int>>) { assert!((*foo.get(0) == 10)); }\n \n pub fn main() {\n-    let x = box(GC) vec!(10);\n+    let x = box vec!(10);\n     // Test forgetting a local by move-in\n     test(x);\n \n     // Test forgetting a temporary by move-in.\n-    test(box(GC) vec!(10));\n+    test(box vec!(10));\n }"}, {"sha": "665303ac487655c73e9987c9079341a15d1ef3bf", "filename": "src/test/run-pass/mutable-vec-drop.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fmutable-vec-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fmutable-vec-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmutable-vec-drop.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,23 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![allow(unused_mut)]\n-\n-use std::gc::{Gc, GC};\n-\n-struct Pair { a: int, b: int}\n-\n-pub fn main() {\n-    // This just tests whether the vec leaks its members.\n-    let mut _pvec: Vec<Gc<Pair>> =\n-        vec!(box(GC) Pair{a: 1, b: 2},\n-             box(GC) Pair{a: 3, b: 4},\n-             box(GC) Pair{a: 5, b: 6});\n-}"}, {"sha": "8444a632fe889c699f0cf932b524f83a1a56be3a", "filename": "src/test/run-pass/mutual-recursion-group.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fmutual-recursion-group.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fmutual-recursion-group.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmutual-recursion-group.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -9,14 +9,12 @@\n // except according to those terms.\n \n \n-use std::gc::Gc;\n-\n enum colour { red, green, blue, }\n \n-enum tree { children(Gc<list>), leaf(colour), }\n+enum tree { children(Box<list>), leaf(colour), }\n \n-enum list { cons(Gc<tree>, Gc<list>), nil, }\n+enum list { cons(Box<tree>, Box<list>), nil, }\n \n-enum small_list { kons(int, Gc<small_list>), neel, }\n+enum small_list { kons(int, Box<small_list>), neel, }\n \n pub fn main() { }"}, {"sha": "991d0ecdc87a642356d4d3a1ce0e47940b4819b1", "filename": "src/test/run-pass/new-box-syntax.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fnew-box-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fnew-box-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnew-box-syntax.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -11,9 +11,8 @@\n /* Any copyright is dedicated to the Public Domain.\n  * http://creativecommons.org/publicdomain/zero/1.0/ */\n \n-// Tests that the new `box` syntax works with unique pointers and GC pointers.\n+// Tests that the new `box` syntax works with unique pointers.\n \n-use std::gc::{Gc, GC};\n use std::boxed::{Box, HEAP};\n \n struct Structure {\n@@ -24,12 +23,6 @@ struct Structure {\n pub fn main() {\n     let x: Box<int> = box(HEAP) 2i;\n     let y: Box<int> = box 2i;\n-    let z: Gc<int> = box(GC) 2i;\n-    let a: Gc<Structure> = box(GC) Structure {\n-        x: 10,\n-        y: 20,\n-    };\n     let b: Box<int> = box()(1i + 2);\n     let c = box()(3i + 4);\n-    let d = box(GC)(5i + 6);\n }"}, {"sha": "8c35abad7f1e61e273b53a0595acb7a92e6ee06f", "filename": "src/test/run-pass/newtype-struct-drop-run.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fnewtype-struct-drop-run.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fnewtype-struct-drop-run.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewtype-struct-drop-run.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -13,20 +13,19 @@\n // Make sure the destructor is run for newtype structs.\n \n use std::cell::Cell;\n-use std::gc::{Gc, GC};\n \n-struct Foo(Gc<Cell<int>>);\n+struct Foo<'a>(&'a Cell<int>);\n \n #[unsafe_destructor]\n-impl Drop for Foo {\n+impl<'a> Drop for Foo<'a> {\n     fn drop(&mut self) {\n         let Foo(i) = *self;\n         i.set(23);\n     }\n }\n \n pub fn main() {\n-    let y = box(GC) Cell::new(32);\n+    let y = &Cell::new(32);\n     {\n         let _x = Foo(y);\n     }"}, {"sha": "0c66b139e7c2ede137450ff632631007339c7e13", "filename": "src/test/run-pass/nullable-pointer-iotareduction.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fnullable-pointer-iotareduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fnullable-pointer-iotareduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnullable-pointer-iotareduction.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -11,7 +11,6 @@\n #![feature(macro_rules)]\n \n use std::{option, mem};\n-use std::gc::{Gc, GC};\n \n // Iota-reduction is a rule in the Calculus of (Co-)Inductive Constructions,\n // which \"says that a destructor applied to an object built from a constructor\n@@ -76,7 +75,6 @@ macro_rules! check_type {\n pub fn main() {\n     check_type!(&17: &int);\n     check_type!(box 18: Box<int>);\n-    check_type!(box(GC) 19: Gc<int>);\n     check_type!(\"foo\".to_string(): String);\n     check_type!(vec!(20, 22): Vec<int> );\n     let mint: uint = unsafe { mem::transmute(main) };"}, {"sha": "5708310abadbfe88e0740d981feed67b5ff0edca", "filename": "src/test/run-pass/nullable-pointer-size.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fnullable-pointer-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fnullable-pointer-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnullable-pointer-size.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -11,7 +11,6 @@\n #![feature(macro_rules)]\n \n use std::mem;\n-use std::gc::Gc;\n \n enum E<T> { Thing(int, T), Nothing((), ((), ()), [i8, ..0]) }\n struct S<T>(int, T);\n@@ -40,6 +39,5 @@ macro_rules! check_type {\n pub fn main() {\n     check_type!(&'static int);\n     check_type!(Box<int>);\n-    check_type!(Gc<int>);\n     check_type!(extern fn());\n }"}, {"sha": "60c46d17b0699f1561495c72d39bbdcd4da54bc5", "filename": "src/test/run-pass/objects-owned-object-borrowed-method-header.rs", "status": "removed", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fobjects-owned-object-borrowed-method-header.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fobjects-owned-object-borrowed-method-header.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobjects-owned-object-borrowed-method-header.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,42 +0,0 @@\n-// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::{Gc, GC};\n-\n-// Test invoked `&self` methods on owned objects where the values\n-// closed over contain managed values. This implies that the boxes\n-// will have headers that must be skipped over.\n-\n-trait FooTrait {\n-    fn foo(&self) -> uint;\n-}\n-\n-struct BarStruct {\n-    x: Gc<uint>\n-}\n-\n-impl FooTrait for BarStruct {\n-    fn foo(&self) -> uint {\n-        *self.x\n-    }\n-}\n-\n-pub fn main() {\n-    let foos: Vec<Box<FooTrait>> = vec!(\n-        box BarStruct{ x: box(GC) 0 } as Box<FooTrait>,\n-        box BarStruct{ x: box(GC) 1 } as Box<FooTrait>,\n-        box BarStruct{ x: box(GC) 2 } as Box<FooTrait>\n-    );\n-\n-    for i in range(0u, foos.len()) {\n-        assert_eq!(i, foos.get(i).foo());\n-    }\n-}"}, {"sha": "8bdae89e523fd3e102c146a7cad8f712d5f488cf", "filename": "src/test/run-pass/option-unwrap.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Foption-unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Foption-unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foption-unwrap.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -11,16 +11,14 @@\n #![feature(unsafe_destructor)]\n \n use std::cell::Cell;\n-use std::gc::{GC, Gc};\n \n-struct dtor {\n-    x: Gc<Cell<int>>,\n+struct dtor<'a> {\n+    x: &'a Cell<int>,\n }\n \n #[unsafe_destructor]\n-impl Drop for dtor {\n+impl<'a> Drop for dtor<'a> {\n     fn drop(&mut self) {\n-        // abuse access to shared mutable state to write this code\n         self.x.set(self.x.get() - 1);\n     }\n }\n@@ -33,7 +31,7 @@ fn unwrap<T>(o: Option<T>) -> T {\n }\n \n pub fn main() {\n-    let x = box(GC) Cell::new(1);\n+    let x = &Cell::new(1);\n \n     {\n         let b = Some(dtor { x:x });"}, {"sha": "8a10cc8c1ef4b4798d859e01c1e58f25cb279461", "filename": "src/test/run-pass/output-slot-variants.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Foutput-slot-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Foutput-slot-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foutput-slot-variants.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -11,30 +11,28 @@\n #![allow(dead_assignment)]\n #![allow(unused_variable)]\n \n-use std::gc::{Gc, GC};\n-\n struct A { a: int, b: int }\n-struct Abox { a: Gc<int>, b: Gc<int> }\n+struct Abox { a: Box<int>, b: Box<int> }\n \n-fn ret_int_i() -> int { return 10; }\n+fn ret_int_i() -> int { 10 }\n \n-fn ret_ext_i() -> Gc<int> { return box(GC) 10; }\n+fn ret_ext_i() -> Box<int> { box 10 }\n \n-fn ret_int_rec() -> A { return A {a: 10, b: 10}; }\n+fn ret_int_rec() -> A { A {a: 10, b: 10} }\n \n-fn ret_ext_rec() -> Gc<A> { return box(GC) A {a: 10, b: 10}; }\n+fn ret_ext_rec() -> Box<A> { box A {a: 10, b: 10} }\n \n-fn ret_ext_mem() -> Abox { return Abox {a: box(GC) 10, b: box(GC) 10}; }\n+fn ret_ext_mem() -> Abox { Abox {a: box 10, b: box 10} }\n \n-fn ret_ext_ext_mem() -> Gc<Abox> { box(GC) Abox{a: box(GC) 10, b: box(GC) 10} }\n+fn ret_ext_ext_mem() -> Box<Abox> { box Abox{a: box 10, b: box 10} }\n \n pub fn main() {\n     let mut int_i: int;\n-    let mut ext_i: Gc<int>;\n+    let mut ext_i: Box<int>;\n     let mut int_rec: A;\n-    let mut ext_rec: Gc<A>;\n+    let mut ext_rec: Box<A>;\n     let mut ext_mem: Abox;\n-    let mut ext_ext_mem: Gc<Abox>;\n+    let mut ext_ext_mem: Box<Abox>;\n     int_i = ret_int_i(); // initializing\n \n     int_i = ret_int_i(); // non-initializing"}, {"sha": "e6bfc8ec1a53de6be5f18f5fa4b7a8549b4e6622", "filename": "src/test/run-pass/packed-struct-size.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fpacked-struct-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fpacked-struct-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked-struct-size.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -10,7 +10,6 @@\n \n \n use std::mem;\n-use std::gc::Gc;\n \n #[repr(packed)]\n struct S4 {\n@@ -48,7 +47,7 @@ struct S7_Option {\n     a: f32,\n     b: u8,\n     c: u16,\n-    d: Option<Gc<f64>>\n+    d: Option<Box<f64>>\n }\n \n // Placing packed structs in statics should work\n@@ -62,5 +61,5 @@ pub fn main() {\n     assert_eq!(mem::size_of::<S5>(), 5);\n     assert_eq!(mem::size_of::<S13>(), 13);\n     assert_eq!(mem::size_of::<S3_Foo>(), 3 + mem::size_of::<Foo>());\n-    assert_eq!(mem::size_of::<S7_Option>(), 7 + mem::size_of::<Option<Gc<f64>>>());\n+    assert_eq!(mem::size_of::<S7_Option>(), 7 + mem::size_of::<Option<Box<f64>>>());\n }"}, {"sha": "8967b07ca8823757b788c07edf1e52c79a515f88", "filename": "src/test/run-pass/packed-tuple-struct-size.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fpacked-tuple-struct-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fpacked-tuple-struct-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked-tuple-struct-size.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n \n-use std::gc::Gc;\n use std::mem;\n \n #[repr(packed)]\n@@ -30,7 +29,7 @@ enum Foo {\n struct S3_Foo(u8, u16, Foo);\n \n #[repr(packed)]\n-struct S7_Option(f32, u8, u16, Option<Gc<f64>>);\n+struct S7_Option(f32, u8, u16, Option<Box<f64>>);\n \n pub fn main() {\n     assert_eq!(mem::size_of::<S4>(), 4);\n@@ -43,5 +42,5 @@ pub fn main() {\n                3 + mem::size_of::<Foo>());\n \n     assert_eq!(mem::size_of::<S7_Option>(),\n-              7 + mem::size_of::<Option<Gc<f64>>>());\n+              7 + mem::size_of::<Option<Box<f64>>>());\n }"}, {"sha": "88209192422508169b2fd7168d24978ff5ab69fd", "filename": "src/test/run-pass/pass-by-copy.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fpass-by-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fpass-by-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpass-by-copy.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,26 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-extern crate debug;\n-\n-use std::gc::{GC, Gc};\n-\n-fn magic(x: A) { println!(\"{:?}\", x); }\n-fn magic2(x: Gc<int>) { println!(\"{:?}\", x); }\n-\n-struct A { a: Gc<int> }\n-\n-pub fn main() {\n-    let a = A {a: box(GC) 10};\n-    let b = box(GC) 10;\n-    magic(a); magic(A {a: box(GC) 20});\n-    magic2(b); magic2(box(GC) 20);\n-}"}, {"sha": "8ad2dbc1acb75965906deb0bbbfa23ce45fa3677", "filename": "src/test/run-pass/rcvr-borrowed-to-region.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-region.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -9,8 +9,6 @@\n // except according to those terms.\n \n \n-use std::gc::GC;\n-\n trait get {\n     fn get(self) -> int;\n }\n@@ -25,15 +23,6 @@ impl<'a> get for &'a int {\n }\n \n pub fn main() {\n-    let x = box(GC) 6;\n-    let y = x.get();\n-    assert_eq!(y, 6);\n-\n-    let x = box(GC) 6;\n-    let y = x.get();\n-    println!(\"y={}\", y);\n-    assert_eq!(y, 6);\n-\n     let x = box 6;\n     let y = x.get();\n     println!(\"y={}\", y);"}, {"sha": "9a758c5d8ada48e9f2adfbe2d9f6dfb3007c1e39", "filename": "src/test/run-pass/regions-borrow-at.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fregions-borrow-at.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fregions-borrow-at.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-borrow-at.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -9,14 +9,12 @@\n // except according to those terms.\n \n \n-use std::gc::GC;\n-\n fn foo(x: &uint) -> uint {\n     *x\n }\n \n pub fn main() {\n-    let p = box(GC) 22u;\n+    let p = box 22u;\n     let r = foo(&*p);\n     println!(\"r={}\", r);\n     assert_eq!(r, 22u);"}, {"sha": "5b0b7cc5b4ef1a3e9dc501b4aac8cfc3f6b76257", "filename": "src/test/run-pass/regions-escape-into-other-fn.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fregions-escape-into-other-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fregions-escape-into-other-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-escape-into-other-fn.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -9,12 +9,10 @@\n // except according to those terms.\n \n \n-use std::gc::GC;\n-\n fn foo(x: &uint) -> &uint { x }\n fn bar(x: &uint) -> uint { *x }\n \n pub fn main() {\n-    let p = box(GC) 3u;\n+    let p = box 3u;\n     assert_eq!(bar(foo(&*p)), 3);\n }"}, {"sha": "1ecaf41702e0642a179c0dfc2885f92d2c22e3a9", "filename": "src/test/run-pass/regions-infer-borrow-scope-within-loop-ok.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-within-loop-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-within-loop-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-within-loop-ok.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -8,12 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::gc::GC;\n-\n fn borrow<T>(x: &T) -> &T {x}\n \n pub fn main() {\n-    let x = box(GC) 3i;\n+    let x = box 3i;\n     loop {\n         let y = borrow(&*x);\n         assert_eq!(*x, *y);"}, {"sha": "d3dbca53f605f229c409ea528f788c3d26bed4c4", "filename": "src/test/run-pass/regions-infer-borrow-scope.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -9,16 +9,14 @@\n // except according to those terms.\n \n \n-use std::gc::GC;\n-\n struct Point {x: int, y: int}\n \n fn x_coord(p: &Point) -> &int {\n     return &p.x;\n }\n \n pub fn main() {\n-    let p = box(GC) Point {x: 3, y: 4};\n+    let p = box Point {x: 3, y: 4};\n     let xc = x_coord(&*p);\n     assert_eq!(*xc, 3);\n }"}, {"sha": "5ea22ae76c2c06b904dd0f395d7ef7e0682456e6", "filename": "src/test/run-pass/resource-assign-is-not-copy.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fresource-assign-is-not-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fresource-assign-is-not-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-assign-is-not-copy.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -10,36 +10,34 @@\n \n #![feature(unsafe_destructor)]\n \n-extern crate debug;\n-\n use std::cell::Cell;\n-use std::gc::{Gc, GC};\n \n-struct r {\n-    i: Gc<Cell<int>>,\n+#[deriving(Show)]\n+struct r<'a> {\n+    i: &'a Cell<int>,\n }\n \n #[unsafe_destructor]\n-impl Drop for r {\n+impl<'a> Drop for r<'a> {\n     fn drop(&mut self) {\n         self.i.set(self.i.get() + 1);\n     }\n }\n \n-fn r(i: Gc<Cell<int>>) -> r {\n+fn r(i: &Cell<int>) -> r {\n     r {\n         i: i\n     }\n }\n \n pub fn main() {\n-    let i = box(GC) Cell::new(0i);\n+    let i = &Cell::new(0i);\n     // Even though these look like copies, they are guaranteed not to be\n     {\n         let a = r(i);\n         let b = (a, 10i);\n         let (c, _d) = b;\n-        println!(\"{:?}\", c);\n+        println!(\"{}\", c);\n     }\n     assert_eq!(i.get(), 1);\n }"}, {"sha": "71bf6cc626153d38e962626512f59fd66a4c9c96", "filename": "src/test/run-pass/resource-destruct.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fresource-destruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fresource-destruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-destruct.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -11,31 +11,30 @@\n #![feature(unsafe_destructor)]\n \n use std::cell::Cell;\n-use std::gc::{GC, Gc};\n \n-struct shrinky_pointer {\n-  i: Gc<Gc<Cell<int>>>,\n+struct shrinky_pointer<'a> {\n+  i: &'a Cell<int>,\n }\n \n #[unsafe_destructor]\n-impl Drop for shrinky_pointer {\n+impl<'a> Drop for shrinky_pointer<'a> {\n     fn drop(&mut self) {\n         println!(\"Hello!\"); self.i.set(self.i.get() - 1);\n     }\n }\n \n-impl shrinky_pointer {\n+impl<'a> shrinky_pointer<'a> {\n     pub fn look_at(&self) -> int { return self.i.get(); }\n }\n \n-fn shrinky_pointer(i: Gc<Gc<Cell<int>>>) -> shrinky_pointer {\n+fn shrinky_pointer(i: &Cell<int>) -> shrinky_pointer {\n     shrinky_pointer {\n         i: i\n     }\n }\n \n pub fn main() {\n-    let my_total = box(GC) box(GC) Cell::new(10);\n+    let my_total = &Cell::new(10);\n     { let pt = shrinky_pointer(my_total); assert!((pt.look_at() == 10)); }\n     println!(\"my_total = {}\", my_total.get());\n     assert_eq!(my_total.get(), 9);"}, {"sha": "8e798fc6a0d28738f2c0289786efaa780e59a0a5", "filename": "src/test/run-pass/resource-in-struct.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fresource-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fresource-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-in-struct.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -14,17 +14,16 @@\n // variant\n \n use std::cell::Cell;\n-use std::gc::{Gc, GC};\n \n-type closable = Gc<Cell<bool>>;\n+type closable<'a> = &'a Cell<bool>;\n \n-struct close_res {\n-  i: closable,\n+struct close_res<'a> {\n+  i: closable<'a>,\n \n }\n \n #[unsafe_destructor]\n-impl Drop for close_res {\n+impl<'a> Drop for close_res<'a> {\n     fn drop(&mut self) {\n         self.i.set(false);\n     }\n@@ -41,7 +40,7 @@ enum option<T> { none, some(T), }\n fn sink(_res: option<close_res>) { }\n \n pub fn main() {\n-    let c = box(GC) Cell::new(true);\n+    let c = &Cell::new(true);\n     sink(none);\n     sink(some(close_res(c)));\n     assert!(!c.get());"}, {"sha": "2d6da26df52a32220c2f0be94bf2b15700cebaf0", "filename": "src/test/run-pass/shape_intrinsic_tag_then_rec.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fshape_intrinsic_tag_then_rec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fshape_intrinsic_tag_then_rec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fshape_intrinsic_tag_then_rec.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -9,63 +9,59 @@\n // except according to those terms.\n \n \n-extern crate debug;\n-\n // Exercises a bug in the shape code that was exposed\n // on x86_64: when there is an enum embedded in an\n // interior record which is then itself interior to\n // something else, shape calculations were off.\n \n-use std::gc::{Gc, GC};\n-\n-#[deriving(Clone)]\n+#[deriving(Clone, Show)]\n enum opt_span {\n     //hack (as opposed to option), to make `span` compile\n     os_none,\n-    os_some(Gc<Span>),\n+    os_some(Box<Span>),\n }\n \n-#[deriving(Clone)]\n+#[deriving(Clone, Show)]\n struct Span {\n     lo: uint,\n     hi: uint,\n     expanded_from: opt_span,\n }\n \n-#[deriving(Clone)]\n+#[deriving(Clone, Show)]\n struct Spanned<T> {\n     data: T,\n     span: Span,\n }\n \n type ty_ = uint;\n \n-#[deriving(Clone)]\n+#[deriving(Clone, Show)]\n struct Path_ {\n     global: bool,\n     idents: Vec<String> ,\n-    types: Vec<Gc<ty>>,\n+    types: Vec<Box<ty>>,\n }\n \n type path = Spanned<Path_>;\n type ty = Spanned<ty_>;\n \n-#[deriving(Clone)]\n+#[deriving(Clone, Show)]\n struct X {\n     sp: Span,\n     path: path,\n }\n \n pub fn main() {\n     let sp: Span = Span {lo: 57451u, hi: 57542u, expanded_from: os_none};\n-    let t: Gc<ty> = box(GC) Spanned { data: 3u, span: sp };\n+    let t: Box<ty> = box Spanned { data: 3u, span: sp.clone() };\n     let p_: Path_ = Path_ {\n         global: true,\n         idents: vec!(\"hi\".to_string()),\n         types: vec!(t),\n     };\n-    let p: path = Spanned { data: p_, span: sp };\n+    let p: path = Spanned { data: p_, span: sp.clone() };\n     let x = X { sp: sp, path: p };\n-    println!(\"{:?}\", x.path.clone());\n-    println!(\"{:?}\", x.clone());\n+    println!(\"{}\", x.path.clone());\n+    println!(\"{}\", x.clone());\n }"}, {"sha": "41a9e6e53f251772d893ab56406fd7c56c000730", "filename": "src/test/run-pass/terminate-in-initializer.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fterminate-in-initializer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fterminate-in-initializer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fterminate-in-initializer.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -13,22 +13,21 @@\n // Don't try to clean up uninitialized locals\n \n use std::task;\n-use std::gc::{Gc};\n \n-fn test_break() { loop { let _x: Gc<int> = break; } }\n+fn test_break() { loop { let _x: Box<int> = break; } }\n \n-fn test_cont() { let mut i = 0i; while i < 1 { i += 1; let _x: Gc<int> = continue; } }\n+fn test_cont() { let mut i = 0i; while i < 1 { i += 1; let _x: Box<int> = continue; } }\n \n-fn test_ret() { let _x: Gc<int> = return; }\n+fn test_ret() { let _x: Box<int> = return; }\n \n fn test_fail() {\n-    fn f() { let _x: Gc<int> = fail!(); }\n+    fn f() { let _x: Box<int> = fail!(); }\n     task::try(proc() f() );\n }\n \n fn test_fail_indirect() {\n     fn f() -> ! { fail!(); }\n-    fn g() { let _x: Gc<int> = f(); }\n+    fn g() { let _x: Box<int> = f(); }\n     task::try(proc() g() );\n }\n "}, {"sha": "30acf07ae60c7e2cd113d974ba58bf9f6bc1a77a", "filename": "src/test/run-pass/trait-cast.rs", "status": "removed", "additions": 0, "deletions": 74, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Ftrait-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Ftrait-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-cast.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,74 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-pretty FIXME(#14193)\n-\n-\n-// Test cyclic detector when using trait instances.\n-\n-use std::cell::RefCell;\n-use std::gc::{GC, Gc};\n-\n-struct Tree(Gc<RefCell<TreeR>>);\n-struct TreeR {\n-    left: Option<Tree>,\n-    right: Option<Tree>,\n-    val: Box<to_str+Send>\n-}\n-\n-trait to_str {\n-    fn to_str_(&self) -> String;\n-}\n-\n-impl<T:to_str> to_str for Option<T> {\n-    fn to_str_(&self) -> String {\n-        match *self {\n-          None => { \"none\".to_string() }\n-          Some(ref t) => format!(\"some({})\", t.to_str_()),\n-        }\n-    }\n-}\n-\n-impl to_str for int {\n-    fn to_str_(&self) -> String {\n-        self.to_string()\n-    }\n-}\n-\n-impl to_str for Tree {\n-    fn to_str_(&self) -> String {\n-        let Tree(t) = *self;\n-        let this = t.borrow();\n-        let (l, r) = (this.left, this.right);\n-        let val = &this.val;\n-        format!(\"[{}, {}, {}]\", val.to_str_(), l.to_str_(), r.to_str_())\n-    }\n-}\n-\n-fn foo<T:to_str>(x: T) -> String { x.to_str_() }\n-\n-pub fn main() {\n-    let t1 = Tree(box(GC) RefCell::new(TreeR{left: None,\n-                                       right: None,\n-                                       val: box 1i as Box<to_str+Send>}));\n-    let t2 = Tree(box(GC) RefCell::new(TreeR{left: Some(t1),\n-                                       right: Some(t1),\n-                                       val: box 2i as Box<to_str+Send>}));\n-    let expected =\n-        \"[2, some([1, none, none]), some([1, none, none])]\".to_string();\n-    assert!(t2.to_str_() == expected);\n-    assert!(foo(t2) == expected);\n-\n-    {\n-        let Tree(t1_) = t1;\n-        let mut t1 = t1_.borrow_mut();\n-        t1.left = Some(t2); // create cycle\n-    }\n-}"}, {"sha": "7265ddf661501934187c9d9749d2278fc7a16c37", "filename": "src/test/run-pass/type-param-constraints.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Ftype-param-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Ftype-param-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-param-constraints.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -9,8 +9,6 @@\n // except according to those terms.\n \n \n-use std::gc::GC;\n-\n fn p_foo<T>(_pinned: T) { }\n fn s_foo<T>(_shared: T) { }\n fn u_foo<T:Send>(_unique: T) { }\n@@ -31,15 +29,11 @@ fn r(i:int) -> r {\n \n pub fn main() {\n     p_foo(r(10));\n-    p_foo(box(GC) r(10));\n \n     p_foo(box r(10));\n-    p_foo(box(GC) 10i);\n     p_foo(box 10i);\n     p_foo(10i);\n \n-    s_foo(box(GC) r(10));\n-    s_foo(box(GC) 10i);\n     s_foo(box 10i);\n     s_foo(10i);\n "}, {"sha": "6d8e7d1aaf3fdb66fde42ce974851073f0f0484d", "filename": "src/test/run-pass/typeclasses-eq-example-static.rs", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example-static.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -12,17 +12,15 @@\n // Example from lkuper's intern talk, August 2012 -- now with static\n // methods!\n \n-use std::gc::{GC, Gc};\n-\n trait Equal {\n-    fn isEq(a: Self, b: Self) -> bool;\n+    fn isEq(a: &Self, b: &Self) -> bool;\n }\n \n enum Color { cyan, magenta, yellow, black }\n \n impl Equal for Color {\n-    fn isEq(a: Color, b: Color) -> bool {\n-        match (a, b) {\n+    fn isEq(a: &Color, b: &Color) -> bool {\n+        match (*a, *b) {\n           (cyan, cyan)       => { true  }\n           (magenta, magenta) => { true  }\n           (yellow, yellow)   => { true  }\n@@ -34,35 +32,35 @@ impl Equal for Color {\n \n enum ColorTree {\n     leaf(Color),\n-    branch(Gc<ColorTree>, Gc<ColorTree>)\n+    branch(Box<ColorTree>, Box<ColorTree>)\n }\n \n impl Equal for ColorTree {\n-    fn isEq(a: ColorTree, b: ColorTree) -> bool {\n+    fn isEq(a: &ColorTree, b: &ColorTree) -> bool {\n         match (a, b) {\n-          (leaf(x), leaf(y)) => { Equal::isEq(x, y) }\n-          (branch(l1, r1), branch(l2, r2)) => {\n-            Equal::isEq(*l1, *l2) && Equal::isEq(*r1, *r2)\n+          (&leaf(x), &leaf(y)) => { Equal::isEq(&x, &y) }\n+          (&branch(ref l1, ref r1), &branch(ref l2, ref r2)) => {\n+            Equal::isEq(&**l1, &**l2) && Equal::isEq(&**r1, &**r2)\n           }\n           _ => { false }\n         }\n     }\n }\n \n pub fn main() {\n-    assert!(Equal::isEq(cyan, cyan));\n-    assert!(Equal::isEq(magenta, magenta));\n-    assert!(!Equal::isEq(cyan, yellow));\n-    assert!(!Equal::isEq(magenta, cyan));\n+    assert!(Equal::isEq(&cyan, &cyan));\n+    assert!(Equal::isEq(&magenta, &magenta));\n+    assert!(!Equal::isEq(&cyan, &yellow));\n+    assert!(!Equal::isEq(&magenta, &cyan));\n \n-    assert!(Equal::isEq(leaf(cyan), leaf(cyan)));\n-    assert!(!Equal::isEq(leaf(cyan), leaf(yellow)));\n+    assert!(Equal::isEq(&leaf(cyan), &leaf(cyan)));\n+    assert!(!Equal::isEq(&leaf(cyan), &leaf(yellow)));\n \n-    assert!(Equal::isEq(branch(box(GC) leaf(magenta), box(GC) leaf(cyan)),\n-                branch(box(GC) leaf(magenta), box(GC) leaf(cyan))));\n+    assert!(Equal::isEq(&branch(box leaf(magenta), box leaf(cyan)),\n+                &branch(box leaf(magenta), box leaf(cyan))));\n \n-    assert!(!Equal::isEq(branch(box(GC) leaf(magenta), box(GC) leaf(cyan)),\n-                 branch(box(GC) leaf(magenta), box(GC) leaf(magenta))));\n+    assert!(!Equal::isEq(&branch(box leaf(magenta), box leaf(cyan)),\n+                 &branch(box leaf(magenta), box leaf(magenta))));\n \n     println!(\"Assertions all succeeded!\");\n }"}, {"sha": "cbb85b2b7b814500ca3cdfd4b09089f856c803ab", "filename": "src/test/run-pass/typeclasses-eq-example.rs", "status": "modified", "additions": 19, "deletions": 21, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -11,17 +11,15 @@\n \n // Example from lkuper's intern talk, August 2012.\n \n-use std::gc::{GC, Gc};\n-\n trait Equal {\n-    fn isEq(&self, a: Self) -> bool;\n+    fn isEq(&self, a: &Self) -> bool;\n }\n \n enum Color { cyan, magenta, yellow, black }\n \n impl Equal for Color {\n-    fn isEq(&self, a: Color) -> bool {\n-        match (*self, a) {\n+    fn isEq(&self, a: &Color) -> bool {\n+        match (*self, *a) {\n           (cyan, cyan)       => { true  }\n           (magenta, magenta) => { true  }\n           (yellow, yellow)   => { true  }\n@@ -33,35 +31,35 @@ impl Equal for Color {\n \n enum ColorTree {\n     leaf(Color),\n-    branch(Gc<ColorTree>, Gc<ColorTree>)\n+    branch(Box<ColorTree>, Box<ColorTree>)\n }\n \n impl Equal for ColorTree {\n-    fn isEq(&self, a: ColorTree) -> bool {\n-        match (*self, a) {\n-          (leaf(x), leaf(y)) => { x.isEq(y) }\n-          (branch(l1, r1), branch(l2, r2)) => {\n-            (*l1).isEq(*l2) && (*r1).isEq(*r2)\n+    fn isEq(&self, a: &ColorTree) -> bool {\n+        match (self, a) {\n+          (&leaf(x), &leaf(y)) => { x.isEq(&y) }\n+          (&branch(ref l1, ref r1), &branch(ref l2, ref r2)) => {\n+            (&**l1).isEq(&**l2) && (&**r1).isEq(&**r2)\n           }\n           _ => { false }\n         }\n     }\n }\n \n pub fn main() {\n-    assert!(cyan.isEq(cyan));\n-    assert!(magenta.isEq(magenta));\n-    assert!(!cyan.isEq(yellow));\n-    assert!(!magenta.isEq(cyan));\n+    assert!(cyan.isEq(&cyan));\n+    assert!(magenta.isEq(&magenta));\n+    assert!(!cyan.isEq(&yellow));\n+    assert!(!magenta.isEq(&cyan));\n \n-    assert!(leaf(cyan).isEq(leaf(cyan)));\n-    assert!(!leaf(cyan).isEq(leaf(yellow)));\n+    assert!(leaf(cyan).isEq(&leaf(cyan)));\n+    assert!(!leaf(cyan).isEq(&leaf(yellow)));\n \n-    assert!(branch(box(GC) leaf(magenta), box(GC) leaf(cyan))\n-        .isEq(branch(box(GC) leaf(magenta), box(GC) leaf(cyan))));\n+    assert!(branch(box leaf(magenta), box leaf(cyan))\n+        .isEq(&branch(box leaf(magenta), box leaf(cyan))));\n \n-    assert!(!branch(box(GC) leaf(magenta), box(GC) leaf(cyan))\n-        .isEq(branch(box(GC) leaf(magenta), box(GC) leaf(magenta))));\n+    assert!(!branch(box leaf(magenta), box leaf(cyan))\n+        .isEq(&branch(box leaf(magenta), box leaf(magenta))));\n \n     println!(\"Assertions all succeeded!\");\n }"}, {"sha": "e342dcb365dfafbe74cdf63c6b4a11cd870937c4", "filename": "src/test/run-pass/uniq-cc-generic.rs", "status": "removed", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Funiq-cc-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Funiq-cc-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funiq-cc-generic.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,44 +0,0 @@\n-// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-pretty FIXME(#14193)\n-\n-\n-use std::cell::RefCell;\n-use std::gc::{Gc, GC};\n-\n-enum maybe_pointy {\n-    none,\n-    p(Gc<RefCell<Pointy>>),\n-}\n-\n-struct Pointy {\n-    a : maybe_pointy,\n-    d : proc():Send -> uint,\n-}\n-\n-fn make_uniq_closure<A:Send>(a: A) -> proc():Send -> uint {\n-    proc() { &a as *const A as uint }\n-}\n-\n-fn empty_pointy() -> Gc<RefCell<Pointy>> {\n-    return box(GC) RefCell::new(Pointy {\n-        a : none,\n-        d : make_uniq_closure(\"hi\".to_string())\n-    })\n-}\n-\n-pub fn main() {\n-    let v = empty_pointy();\n-    {\n-        let mut vb = v.borrow_mut();\n-        vb.a = p(v);\n-    }\n-}"}, {"sha": "c7aca64c7cb95205a66a3915ae980a01642399d9", "filename": "src/test/run-pass/uniq-cc.rs", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Funiq-cc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Funiq-cc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funiq-cc.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,40 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::cell::RefCell;\n-use std::gc::{Gc, GC};\n-\n-enum maybe_pointy {\n-    none,\n-    p(Gc<RefCell<Pointy>>),\n-}\n-\n-struct Pointy {\n-    a : maybe_pointy,\n-    c : Box<int>,\n-    d : proc():Send->(),\n-}\n-\n-fn empty_pointy() -> Gc<RefCell<Pointy>> {\n-    return box(GC) RefCell::new(Pointy {\n-        a : none,\n-        c : box 22,\n-        d : proc() {},\n-    })\n-}\n-\n-pub fn main() {\n-    let v = empty_pointy();\n-    {\n-        let mut vb = v.borrow_mut();\n-        vb.a = p(v);\n-    }\n-}"}, {"sha": "493ec8ddc207d5b7a8763fc6a46fb4f64ad09fb4", "filename": "src/test/run-pass/unique-assign-generic.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Funique-assign-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Funique-assign-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-assign-generic.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -9,8 +9,6 @@\n // except according to those terms.\n \n \n-use std::gc::GC;\n-\n fn f<T>(t: T) -> T {\n     let t1 = t;\n     t1\n@@ -19,6 +17,4 @@ fn f<T>(t: T) -> T {\n pub fn main() {\n     let t = f(box 100i);\n     assert_eq!(t, box 100i);\n-    let t = f(box box(GC) vec!(100i));\n-    assert_eq!(t, box box(GC) vec!(100i));\n }"}, {"sha": "70c8c5b64e40836e8e5e85a63225c9943ec02b23", "filename": "src/test/run-pass/unwind-box.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Funwind-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Funwind-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-box.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,22 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::task;\n-use std::gc::GC;\n-\n-fn f() {\n-    let _a = box(GC) 0i;\n-    fail!();\n-}\n-\n-pub fn main() {\n-    task::spawn(f);\n-}"}, {"sha": "6d04c0e26ad0ca752706a199b0b23458d3e2ccdc", "filename": "src/test/run-pass/unwind-resource2.rs", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Funwind-resource2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Funwind-resource2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-resource2.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,38 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(unsafe_destructor)]\n-\n-use std::task;\n-use std::gc::{Gc, GC};\n-\n-struct complainer {\n-  c: Gc<int>,\n-}\n-\n-#[unsafe_destructor]\n-impl Drop for complainer {\n-    fn drop(&mut self) {}\n-}\n-\n-fn complainer(c: Gc<int>) -> complainer {\n-    complainer {\n-        c: c\n-    }\n-}\n-\n-fn f() {\n-    let _c = complainer(box(GC) 0);\n-    fail!();\n-}\n-\n-pub fn main() {\n-    task::spawn(f);\n-}"}, {"sha": "6cc95a2e548b17b41c0dfb5dac4254a4a2592b0b", "filename": "src/test/run-pass/vec-drop.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fvec-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe4da971aa4b2a9db597b682b96133f373dbec5/src%2Ftest%2Frun-pass%2Fvec-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-drop.rs?ref=ebe4da971aa4b2a9db597b682b96133f373dbec5", "patch": "@@ -1,23 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::{GC, Gc};\n-\n-struct Pair { x: int, y: int }\n-\n-pub fn main() {\n-    // This just tests whether the vec leaks its members.\n-\n-    let _pvec: Vec<Gc<Pair>> =\n-        vec!(box(GC) Pair{x: 1, y: 2},\n-             box(GC) Pair{x: 3, y: 4},\n-             box(GC) Pair{x: 5, y: 6});\n-}"}, {"sha": "498ec0e8fbaf1ae8974bea837a057c763bd8ae43", "filename": "src/test/run-pass/vec-slice-drop.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fvec-slice-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fvec-slice-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-slice-drop.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -11,28 +11,27 @@\n #![feature(unsafe_destructor)]\n \n use std::cell::Cell;\n-use std::gc::{Gc, GC};\n \n // Make sure that destructors get run on slice literals\n-struct foo {\n-    x: Gc<Cell<int>>,\n+struct foo<'a> {\n+    x: &'a Cell<int>,\n }\n \n #[unsafe_destructor]\n-impl Drop for foo {\n+impl<'a> Drop for foo<'a> {\n     fn drop(&mut self) {\n         self.x.set(self.x.get() + 1);\n     }\n }\n \n-fn foo(x: Gc<Cell<int>>) -> foo {\n+fn foo(x: &Cell<int>) -> foo {\n     foo {\n         x: x\n     }\n }\n \n pub fn main() {\n-    let x = box(GC) Cell::new(0);\n+    let x = &Cell::new(0);\n     {\n         let l = &[foo(x)];\n         assert_eq!(l[0].x.get(), 0);"}, {"sha": "72204c28f82ade773eb42141ea6cc504ec2f3df1", "filename": "src/test/run-pass/weird-exprs.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fweird-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae802f57bf8a1ac2a47760a936c56e6fff16821/src%2Ftest%2Frun-pass%2Fweird-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fweird-exprs.rs?ref=7ae802f57bf8a1ac2a47760a936c56e6fff16821", "patch": "@@ -11,7 +11,6 @@\n \n use std::cell::Cell;\n use std::mem::swap;\n-use std::gc::{Gc, GC};\n \n // Just a grab bag of stuff that you wouldn't want to actually write.\n \n@@ -23,10 +22,10 @@ fn funny() {\n }\n \n fn what() {\n-    fn the(x: Gc<Cell<bool>>) {\n+    fn the(x: &Cell<bool>) {\n         return while !x.get() { x.set(true); };\n     }\n-    let i = box(GC) Cell::new(false);\n+    let i = &Cell::new(false);\n     let dont = {||the(i)};\n     dont();\n     assert!((i.get()));"}]}