{"sha": "d8ece188b88569da794c2916ee6034a1054d2f35", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4ZWNlMTg4Yjg4NTY5ZGE3OTRjMjkxNmVlNjAzNGExMDU0ZDJmMzU=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-26T09:26:42Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-30T08:44:06Z"}, "message": "Improve the error around short circuiting and let bindings", "tree": {"sha": "e747bf73439a5ce9ee31763f6e3adabc4308b0ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e747bf73439a5ce9ee31763f6e3adabc4308b0ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8ece188b88569da794c2916ee6034a1054d2f35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8ece188b88569da794c2916ee6034a1054d2f35", "html_url": "https://github.com/rust-lang/rust/commit/d8ece188b88569da794c2916ee6034a1054d2f35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8ece188b88569da794c2916ee6034a1054d2f35/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75ce28a9745940bbc56110911cfd83b2498bcef6", "url": "https://api.github.com/repos/rust-lang/rust/commits/75ce28a9745940bbc56110911cfd83b2498bcef6", "html_url": "https://github.com/rust-lang/rust/commit/75ce28a9745940bbc56110911cfd83b2498bcef6"}], "stats": {"total": 68, "additions": 61, "deletions": 7}, "files": [{"sha": "b058748fca0243274f040d575b0b3ed6786f4702", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d8ece188b88569da794c2916ee6034a1054d2f35/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8ece188b88569da794c2916ee6034a1054d2f35/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=d8ece188b88569da794c2916ee6034a1054d2f35", "patch": "@@ -376,8 +376,8 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                         cx.control_flow_destroyed = true;\n                         cx.tcx.sess.struct_span_warn(\n                             op.span,\n-                            \"boolean short circuiting operators in constants do\n-                             not actually short circuit. Thus new const eval features\n+                            \"boolean short circuiting operators in constants do \\\n+                             not actually short circuit. Thus new const eval features \\\n                              are not accessible in constants.\"\n                         ).span_suggestion_with_applicability(\n                             op.span,\n@@ -395,8 +395,8 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                         cx.control_flow_destroyed = true;\n                         cx.tcx.sess.struct_span_warn(\n                             op.span,\n-                            \"boolean short circuiting operators in constants do\n-                             not actually short circuit. Thus new const eval features\n+                            \"boolean short circuiting operators in constants do \\\n+                             not actually short circuit. Thus new const eval features \\\n                              are not accessible in constants.\"\n                         ).span_suggestion_with_applicability(\n                             op.span,"}, {"sha": "d399543145dff92df615122beae5ce476a2beb82", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d8ece188b88569da794c2916ee6034a1054d2f35/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8ece188b88569da794c2916ee6034a1054d2f35/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=d8ece188b88569da794c2916ee6034a1054d2f35", "patch": "@@ -1184,13 +1184,13 @@ impl MirPass for QualifyAndPromoteConstants {\n             promote_consts::promote_candidates(mir, tcx, temps, candidates);\n         } else {\n             if mir.control_flow_destroyed {\n-                for local in mir.mut_vars_iter() {\n+                for local in mir.vars_iter() {\n                     let span = mir.local_decls[local].source_info.span;\n                     tcx.sess.span_err(\n                         span,\n                         &format!(\n-                            \"Cannot have both mutable bindings and \\\n-                            short circuiting operators in {}\",\n+                            \"short circuiting operators do not actually short circuit in {}. \\\n+                             Thus new features like let bindings are not permitted\",\n                             mode,\n                         ),\n                     );"}, {"sha": "9721c1969d577a73fb6e32f4cd7dde491ebef867", "filename": "src/test/ui/consts/const_short_circuit.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d8ece188b88569da794c2916ee6034a1054d2f35/src%2Ftest%2Fui%2Fconsts%2Fconst_short_circuit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8ece188b88569da794c2916ee6034a1054d2f35/src%2Ftest%2Fui%2Fconsts%2Fconst_short_circuit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_short_circuit.rs?ref=d8ece188b88569da794c2916ee6034a1054d2f35", "patch": "@@ -0,0 +1,16 @@\n+#![feature(underscore_const_names)]\n+\n+const _: bool = false && false; //~ WARN boolean short circuiting operators in constants\n+const _: bool = true && false; //~ WARN boolean short circuiting operators in constants\n+const _: bool = {\n+    let mut x = true && false; //~ WARN boolean short circuiting operators in constants\n+    //~^ ERROR short circuiting operators do not actually short circuit in constant\n+    x\n+};\n+const _: bool = {\n+    let x = true && false; //~ WARN boolean short circuiting operators in constants\n+    //~^ ERROR short circuiting operators do not actually short circuit in constant\n+    x\n+};\n+\n+fn main() {}\n\\ No newline at end of file"}, {"sha": "4c1e531ea872784e7e81f86252834712ded464d1", "filename": "src/test/ui/consts/const_short_circuit.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d8ece188b88569da794c2916ee6034a1054d2f35/src%2Ftest%2Fui%2Fconsts%2Fconst_short_circuit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d8ece188b88569da794c2916ee6034a1054d2f35/src%2Ftest%2Fui%2Fconsts%2Fconst_short_circuit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_short_circuit.stderr?ref=d8ece188b88569da794c2916ee6034a1054d2f35", "patch": "@@ -0,0 +1,38 @@\n+warning: boolean short circuiting operators in constants do not actually short circuit. Thus new const eval features are not accessible in constants.\n+  --> $DIR/const_short_circuit.rs:3:23\n+   |\n+LL | const _: bool = false && false; //~ WARN boolean short circuiting operators in constants\n+   |                       ^^ help: use a bit operator instead: `&`\n+\n+warning: boolean short circuiting operators in constants do not actually short circuit. Thus new const eval features are not accessible in constants.\n+  --> $DIR/const_short_circuit.rs:4:22\n+   |\n+LL | const _: bool = true && false; //~ WARN boolean short circuiting operators in constants\n+   |                      ^^ help: use a bit operator instead: `&`\n+\n+warning: boolean short circuiting operators in constants do not actually short circuit. Thus new const eval features are not accessible in constants.\n+  --> $DIR/const_short_circuit.rs:6:22\n+   |\n+LL |     let mut x = true && false; //~ WARN boolean short circuiting operators in constants\n+   |                      ^^ help: use a bit operator instead: `&`\n+\n+error: short circuiting operators do not actually short circuit in constant. Thus new features like let bindings are not permitted\n+  --> $DIR/const_short_circuit.rs:6:9\n+   |\n+LL |     let mut x = true && false; //~ WARN boolean short circuiting operators in constants\n+   |         ^^^^^\n+\n+warning: boolean short circuiting operators in constants do not actually short circuit. Thus new const eval features are not accessible in constants.\n+  --> $DIR/const_short_circuit.rs:11:18\n+   |\n+LL |     let x = true && false; //~ WARN boolean short circuiting operators in constants\n+   |                  ^^ help: use a bit operator instead: `&`\n+\n+error: short circuiting operators do not actually short circuit in constant. Thus new features like let bindings are not permitted\n+  --> $DIR/const_short_circuit.rs:11:9\n+   |\n+LL |     let x = true && false; //~ WARN boolean short circuiting operators in constants\n+   |         ^\n+\n+error: aborting due to 2 previous errors\n+"}]}