{"sha": "3874c7755f292abc87fa2ce4fe82479ad063367e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4NzRjNzc1NWYyOTJhYmM4N2ZhMmNlNGZlODI0NzlhZDA2MzM2N2U=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-01-14T01:29:32Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-01-14T01:29:32Z"}, "message": "Recover from item trailing semicolon", "tree": {"sha": "27586f8053eb526425a3b1002816b0fb430f20a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27586f8053eb526425a3b1002816b0fb430f20a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3874c7755f292abc87fa2ce4fe82479ad063367e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3874c7755f292abc87fa2ce4fe82479ad063367e", "html_url": "https://github.com/rust-lang/rust/commit/3874c7755f292abc87fa2ce4fe82479ad063367e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3874c7755f292abc87fa2ce4fe82479ad063367e/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2d381d39d282c0586d50ea7d7a431ffd5ddb3fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2d381d39d282c0586d50ea7d7a431ffd5ddb3fb", "html_url": "https://github.com/rust-lang/rust/commit/c2d381d39d282c0586d50ea7d7a431ffd5ddb3fb"}], "stats": {"total": 143, "additions": 113, "deletions": 30}, "files": [{"sha": "7a766cf52ba9509ae6291c784578eda3db375887", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 35, "deletions": 24, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/3874c7755f292abc87fa2ce4fe82479ad063367e/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3874c7755f292abc87fa2ce4fe82479ad063367e/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=3874c7755f292abc87fa2ce4fe82479ad063367e", "patch": "@@ -6408,41 +6408,52 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n+    fn maybe_consume_incorrect_semicolon(&mut self, items: &[P<Item>]) -> bool {\n+        if self.eat(&token::Semi) {\n+            let mut err = self.struct_span_err(self.prev_span, \"expected item, found `;`\");\n+            err.span_suggestion_short_with_applicability(\n+                self.prev_span,\n+                \"remove this semicolon\",\n+                String::new(),\n+                Applicability::MachineApplicable,\n+            );\n+            if !items.is_empty() {\n+                let previous_item = &items[items.len()-1];\n+                let previous_item_kind_name = match previous_item.node {\n+                    // say \"braced struct\" because tuple-structs and\n+                    // braceless-empty-struct declarations do take a semicolon\n+                    ItemKind::Struct(..) => Some(\"braced struct\"),\n+                    ItemKind::Enum(..) => Some(\"enum\"),\n+                    ItemKind::Trait(..) => Some(\"trait\"),\n+                    ItemKind::Union(..) => Some(\"union\"),\n+                    _ => None,\n+                };\n+                if let Some(name) = previous_item_kind_name {\n+                    err.help(&format!(\"{} declarations are not followed by a semicolon\", name));\n+                }\n+            }\n+            err.emit();\n+            true\n+        } else {\n+            false\n+        }\n+    }\n+\n     /// Given a termination token, parse all of the items in a module\n     fn parse_mod_items(&mut self, term: &token::Token, inner_lo: Span) -> PResult<'a, Mod> {\n         let mut items = vec![];\n         while let Some(item) = self.parse_item()? {\n             items.push(item);\n+            self.maybe_consume_incorrect_semicolon(&items);\n         }\n \n         if !self.eat(term) {\n             let token_str = self.this_token_descr();\n-            let mut err = self.fatal(&format!(\"expected item, found {}\", token_str));\n-            if self.token == token::Semi {\n-                let msg = \"consider removing this semicolon\";\n-                err.span_suggestion_short_with_applicability(\n-                    self.span, msg, String::new(), Applicability::MachineApplicable\n-                );\n-                if !items.is_empty() {  // Issue #51603\n-                    let previous_item = &items[items.len()-1];\n-                    let previous_item_kind_name = match previous_item.node {\n-                        // say \"braced struct\" because tuple-structs and\n-                        // braceless-empty-struct declarations do take a semicolon\n-                        ItemKind::Struct(..) => Some(\"braced struct\"),\n-                        ItemKind::Enum(..) => Some(\"enum\"),\n-                        ItemKind::Trait(..) => Some(\"trait\"),\n-                        ItemKind::Union(..) => Some(\"union\"),\n-                        _ => None,\n-                    };\n-                    if let Some(name) = previous_item_kind_name {\n-                        err.help(&format!(\"{} declarations are not followed by a semicolon\",\n-                                          name));\n-                    }\n-                }\n-            } else {\n+            if !self.maybe_consume_incorrect_semicolon(&items) {\n+                let mut err = self.fatal(&format!(\"expected item, found {}\", token_str));\n                 err.span_label(self.span, \"expected item\");\n+                return Err(err);\n             }\n-            return Err(err);\n         }\n \n         let hi = if self.span.is_dummy() {"}, {"sha": "9dfd61fdf3f20516ee339a95e0d3a40d4a779bfd", "filename": "src/test/ui/issues/issue-46186.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3874c7755f292abc87fa2ce4fe82479ad063367e/src%2Ftest%2Fui%2Fissues%2Fissue-46186.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3874c7755f292abc87fa2ce4fe82479ad063367e/src%2Ftest%2Fui%2Fissues%2Fissue-46186.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46186.rs?ref=3874c7755f292abc87fa2ce4fe82479ad063367e", "patch": "@@ -1,5 +1,6 @@\n struct Struct {\n     a: usize,\n-}; //~ ERROR expected item, found `;`\n+};\n+//~^ ERROR expected item, found `;`\n \n fn main() {}"}, {"sha": "eb0dbb8aa41b8faf464134c1f61acc1ff2d6a3d4", "filename": "src/test/ui/issues/issue-46186.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3874c7755f292abc87fa2ce4fe82479ad063367e/src%2Ftest%2Fui%2Fissues%2Fissue-46186.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3874c7755f292abc87fa2ce4fe82479ad063367e/src%2Ftest%2Fui%2Fissues%2Fissue-46186.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46186.stderr?ref=3874c7755f292abc87fa2ce4fe82479ad063367e", "patch": "@@ -1,8 +1,8 @@\n error: expected item, found `;`\n   --> $DIR/issue-46186.rs:3:2\n    |\n-LL | }; //~ ERROR expected item, found `;`\n-   |  ^ help: consider removing this semicolon\n+LL | };\n+   |  ^ help: remove this semicolon\n    |\n    = help: braced struct declarations are not followed by a semicolon\n "}, {"sha": "a5f05d2824eb88714f9437dabbcc3a455abe1732", "filename": "src/test/ui/issues/issue-49040.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3874c7755f292abc87fa2ce4fe82479ad063367e/src%2Ftest%2Fui%2Fissues%2Fissue-49040.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3874c7755f292abc87fa2ce4fe82479ad063367e/src%2Ftest%2Fui%2Fissues%2Fissue-49040.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-49040.rs?ref=3874c7755f292abc87fa2ce4fe82479ad063367e", "patch": "@@ -1,2 +1,2 @@\n #![allow(unused_variables)]; //~ ERROR expected item, found `;`\n-fn main() {}\n+fn foo() {}"}, {"sha": "12e78e2f3bc958ab12eff530bb140dea42ad66d7", "filename": "src/test/ui/issues/issue-49040.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3874c7755f292abc87fa2ce4fe82479ad063367e/src%2Ftest%2Fui%2Fissues%2Fissue-49040.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3874c7755f292abc87fa2ce4fe82479ad063367e/src%2Ftest%2Fui%2Fissues%2Fissue-49040.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-49040.stderr?ref=3874c7755f292abc87fa2ce4fe82479ad063367e", "patch": "@@ -2,7 +2,12 @@ error: expected item, found `;`\n   --> $DIR/issue-49040.rs:1:28\n    |\n LL | #![allow(unused_variables)]; //~ ERROR expected item, found `;`\n-   |                            ^ help: consider removing this semicolon\n+   |                            ^ help: remove this semicolon\n \n-error: aborting due to previous error\n+error[E0601]: `main` function not found in crate `issue_49040`\n+   |\n+   = note: consider adding a `main` function to `$DIR/issue-49040.rs`\n+\n+error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0601`."}, {"sha": "82935af0a81d221df375c446921d7433cec024a7", "filename": "src/test/ui/suggestions/recover-from-semicolon-trailing-item.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3874c7755f292abc87fa2ce4fe82479ad063367e/src%2Ftest%2Fui%2Fsuggestions%2Frecover-from-semicolon-trailing-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3874c7755f292abc87fa2ce4fe82479ad063367e/src%2Ftest%2Fui%2Fsuggestions%2Frecover-from-semicolon-trailing-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Frecover-from-semicolon-trailing-item.rs?ref=3874c7755f292abc87fa2ce4fe82479ad063367e", "patch": "@@ -0,0 +1,16 @@\n+// verify that after encountering a semicolon after an item the parser recovers\n+mod M {};\n+//~^ ERROR expected item, found `;`\n+struct S {};\n+//~^ ERROR expected item, found `;`\n+fn foo(a: usize) {};\n+//~^ ERROR expected item, found `;`\n+fn main() {\n+    struct X {};  // ok\n+    let _: usize = S {};\n+    //~^ ERROR mismatched types\n+    let _: usize = X {};\n+    //~^ ERROR mismatched types\n+    foo(\"\");\n+    //~^ ERROR mismatched types\n+}"}, {"sha": "9a47a1efb752afe5b4fbe89d27907a84158483e5", "filename": "src/test/ui/suggestions/recover-from-semicolon-trailing-item.stderr", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/3874c7755f292abc87fa2ce4fe82479ad063367e/src%2Ftest%2Fui%2Fsuggestions%2Frecover-from-semicolon-trailing-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3874c7755f292abc87fa2ce4fe82479ad063367e/src%2Ftest%2Fui%2Fsuggestions%2Frecover-from-semicolon-trailing-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Frecover-from-semicolon-trailing-item.stderr?ref=3874c7755f292abc87fa2ce4fe82479ad063367e", "patch": "@@ -0,0 +1,50 @@\n+error: expected item, found `;`\n+  --> $DIR/recover-from-semicolon-trailing-item.rs:2:9\n+   |\n+LL | mod M {};\n+   |         ^ help: remove this semicolon\n+\n+error: expected item, found `;`\n+  --> $DIR/recover-from-semicolon-trailing-item.rs:4:12\n+   |\n+LL | struct S {};\n+   |            ^ help: remove this semicolon\n+   |\n+   = help: braced struct declarations are not followed by a semicolon\n+\n+error: expected item, found `;`\n+  --> $DIR/recover-from-semicolon-trailing-item.rs:6:20\n+   |\n+LL | fn foo(a: usize) {};\n+   |                    ^ help: remove this semicolon\n+\n+error[E0308]: mismatched types\n+  --> $DIR/recover-from-semicolon-trailing-item.rs:10:20\n+   |\n+LL |     let _: usize = S {};\n+   |                    ^^^^ expected usize, found struct `S`\n+   |\n+   = note: expected type `usize`\n+              found type `S`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/recover-from-semicolon-trailing-item.rs:12:20\n+   |\n+LL |     let _: usize = X {};\n+   |                    ^^^^ expected usize, found struct `main::X`\n+   |\n+   = note: expected type `usize`\n+              found type `main::X`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/recover-from-semicolon-trailing-item.rs:14:9\n+   |\n+LL |     foo(\"\");\n+   |         ^^ expected usize, found reference\n+   |\n+   = note: expected type `usize`\n+              found type `&'static str`\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}