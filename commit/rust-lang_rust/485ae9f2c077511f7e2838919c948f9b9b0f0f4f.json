{"sha": "485ae9f2c077511f7e2838919c948f9b9b0f0f4f", "node_id": "C_kwDOAAsO6NoAKDQ4NWFlOWYyYzA3NzUxMWY3ZTI4Mzg5MTljOTQ4ZjliOWIwZjBmNGY", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2021-09-30T01:22:17Z"}, "committer": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2021-10-13T23:26:00Z"}, "message": "Always check predicates in can_coerce\n\nThis only changed two tests and I consider both changes an improvement.", "tree": {"sha": "d4ee25328b23c659d8e33a69be288ea15d541a4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4ee25328b23c659d8e33a69be288ea15d541a4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/485ae9f2c077511f7e2838919c948f9b9b0f0f4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/485ae9f2c077511f7e2838919c948f9b9b0f0f4f", "html_url": "https://github.com/rust-lang/rust/commit/485ae9f2c077511f7e2838919c948f9b9b0f0f4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/485ae9f2c077511f7e2838919c948f9b9b0f0f4f/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c14433c00b29fb2065af0eb664e2040f88b4429", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c14433c00b29fb2065af0eb664e2040f88b4429", "html_url": "https://github.com/rust-lang/rust/commit/5c14433c00b29fb2065af0eb664e2040f88b4429"}], "stats": {"total": 38, "additions": 11, "deletions": 27}, "files": [{"sha": "a87318ff34e6dc0a20d1e8718e6d262350a15c94", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/485ae9f2c077511f7e2838919c948f9b9b0f0f4f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485ae9f2c077511f7e2838919c948f9b9b0f0f4f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=485ae9f2c077511f7e2838919c948f9b9b0f0f4f", "patch": "@@ -934,20 +934,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n \n     /// Same as `try_coerce()`, but without side-effects.\n+    ///\n+    /// Returns false if the coercion creates any obligations that result in\n+    /// errors.\n     pub fn can_coerce(&self, expr_ty: Ty<'tcx>, target: Ty<'tcx>) -> bool {\n-        let source = self.resolve_vars_with_obligations(expr_ty);\n-        debug!(\"coercion::can({:?} -> {:?})\", source, target);\n-\n-        let cause = self.cause(rustc_span::DUMMY_SP, ObligationCauseCode::ExprAssignable);\n-        // We don't ever need two-phase here since we throw out the result of the coercion\n-        let coerce = Coerce::new(self, cause, AllowTwoPhase::No);\n-        self.probe(|_| coerce.coerce(source, target)).is_ok()\n-    }\n-\n-    /// Same as `try_coerce()`, but without side-effects and attempts to select\n-    /// all predicates created by the coercion. This is useful for e.g. checking\n-    /// that associated types are correct.\n-    pub fn can_coerce_and_satisfy_predicates(&self, expr_ty: Ty<'tcx>, target: Ty<'tcx>) -> bool {\n         let source = self.resolve_vars_with_obligations(expr_ty);\n         debug!(\"coercion::can_with_predicates({:?} -> {:?})\", source, target);\n "}, {"sha": "7fe841c3815627dd270d210390a230ecc9bdc71b", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/485ae9f2c077511f7e2838919c948f9b9b0f0f4f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485ae9f2c077511f7e2838919c948f9b9b0f0f4f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=485ae9f2c077511f7e2838919c948f9b9b0f0f4f", "patch": "@@ -373,7 +373,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let box_found = self.tcx.mk_box(found);\n         let pin_box_found = self.tcx.mk_lang_item(box_found, LangItem::Pin).unwrap();\n         let pin_found = self.tcx.mk_lang_item(found, LangItem::Pin).unwrap();\n-        if self.can_coerce_and_satisfy_predicates(pin_box_found, expected) {\n+        if self.can_coerce(pin_box_found, expected) {\n             debug!(\"can coerce {:?} to {:?}, suggesting Box::pin\", pin_box_found, expected);\n             match found.kind() {\n                 ty::Adt(def, _) if def.is_box() => {\n@@ -391,7 +391,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }\n             }\n             true\n-        } else if self.can_coerce_and_satisfy_predicates(pin_found, expected) {\n+        } else if self.can_coerce(pin_found, expected) {\n             match found.kind() {\n                 ty::Adt(def, _) if def.is_box() => {\n                     err.help(\"use `Box::pin`\");"}, {"sha": "81f309eae087c9755687a1dc426efa5c6e535528", "filename": "src/test/ui/cross/cross-borrow-trait.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/485ae9f2c077511f7e2838919c948f9b9b0f0f4f/src%2Ftest%2Fui%2Fcross%2Fcross-borrow-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/485ae9f2c077511f7e2838919c948f9b9b0f0f4f/src%2Ftest%2Fui%2Fcross%2Fcross-borrow-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcross%2Fcross-borrow-trait.stderr?ref=485ae9f2c077511f7e2838919c948f9b9b0f0f4f", "patch": "@@ -2,10 +2,8 @@ error[E0308]: mismatched types\n   --> $DIR/cross-borrow-trait.rs:10:26\n    |\n LL |     let _y: &dyn Trait = x;\n-   |             ----------   ^\n-   |             |            |\n-   |             |            expected `&dyn Trait`, found struct `Box`\n-   |             |            help: consider borrowing here: `&x`\n+   |             ----------   ^ expected `&dyn Trait`, found struct `Box`\n+   |             |\n    |             expected due to this\n    |\n    = note: expected reference `&dyn Trait`"}, {"sha": "01f862ed516e9d9ef25735436c67c6e8891cc65b", "filename": "src/test/ui/dst/dst-bad-coercions.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/485ae9f2c077511f7e2838919c948f9b9b0f0f4f/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coercions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/485ae9f2c077511f7e2838919c948f9b9b0f0f4f/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coercions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coercions.stderr?ref=485ae9f2c077511f7e2838919c948f9b9b0f0f4f", "patch": "@@ -13,10 +13,8 @@ error[E0308]: mismatched types\n   --> $DIR/dst-bad-coercions.rs:15:21\n    |\n LL |     let y: &dyn T = x;\n-   |            ------   ^\n-   |            |        |\n-   |            |        expected `&dyn T`, found *-ptr\n-   |            |        help: consider borrowing here: `&x`\n+   |            ------   ^ expected `&dyn T`, found *-ptr\n+   |            |\n    |            expected due to this\n    |\n    = note: expected reference `&dyn T`\n@@ -37,10 +35,8 @@ error[E0308]: mismatched types\n   --> $DIR/dst-bad-coercions.rs:20:21\n    |\n LL |     let y: &dyn T = x;\n-   |            ------   ^\n-   |            |        |\n-   |            |        expected `&dyn T`, found *-ptr\n-   |            |        help: consider borrowing here: `&x`\n+   |            ------   ^ expected `&dyn T`, found *-ptr\n+   |            |\n    |            expected due to this\n    |\n    = note: expected reference `&dyn T`"}]}