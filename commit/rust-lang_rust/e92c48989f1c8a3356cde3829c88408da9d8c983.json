{"sha": "e92c48989f1c8a3356cde3829c88408da9d8c983", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5MmM0ODk4OWYxYzhhMzM1NmNkZTM4MjljODg0MDhkYTlkOGM5ODM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-18T12:52:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-18T12:52:35Z"}, "message": "Auto merge of #4407 - mikerite:fix-breakage-20190818, r=flip1995\n\nFix breakage due to  rust-lang/rust#61708\n\nIncludes commits from #4406\n\nchangelog: none", "tree": {"sha": "bd10dc3dbb27538ed4434491f320430f8e52af32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd10dc3dbb27538ed4434491f320430f8e52af32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e92c48989f1c8a3356cde3829c88408da9d8c983", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e92c48989f1c8a3356cde3829c88408da9d8c983", "html_url": "https://github.com/rust-lang/rust/commit/e92c48989f1c8a3356cde3829c88408da9d8c983", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e92c48989f1c8a3356cde3829c88408da9d8c983/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49dff2c9f34995af9d2d665e712fcf17924b33e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/49dff2c9f34995af9d2d665e712fcf17924b33e3", "html_url": "https://github.com/rust-lang/rust/commit/49dff2c9f34995af9d2d665e712fcf17924b33e3"}, {"sha": "b313d25350bf8df41e65485a65b4536fe267bec0", "url": "https://api.github.com/repos/rust-lang/rust/commits/b313d25350bf8df41e65485a65b4536fe267bec0", "html_url": "https://github.com/rust-lang/rust/commit/b313d25350bf8df41e65485a65b4536fe267bec0"}], "stats": {"total": 67, "additions": 37, "deletions": 30}, "files": [{"sha": "32ca1cc1bb99fea654cee0a0f7703a96c2e6b6f8", "filename": "clippy_lints/src/assertions_on_constants.rs", "status": "modified", "additions": 20, "deletions": 25, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/e92c48989f1c8a3356cde3829c88408da9d8c983/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e92c48989f1c8a3356cde3829c88408da9d8c983/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassertions_on_constants.rs?ref=e92c48989f1c8a3356cde3829c88408da9d8c983", "patch": "@@ -1,11 +1,9 @@\n-use if_chain::if_chain;\n use rustc::hir::{Expr, ExprKind};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};\n-use syntax_pos::Span;\n \n use crate::consts::{constant, Constant};\n-use crate::utils::{in_macro_or_desugar, is_direct_expn_of, span_help_and_lint};\n+use crate::utils::{in_macro_or_desugar, is_direct_expn_of, is_expn_of, span_help_and_lint};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for `assert!(true)` and `assert!(false)` calls.\n@@ -33,42 +31,39 @@ declare_lint_pass!(AssertionsOnConstants => [ASSERTIONS_ON_CONSTANTS]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssertionsOnConstants {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n-        let mut is_debug_assert = false;\n-        let debug_assert_not_in_macro_or_desugar = |span: Span| {\n-            is_debug_assert = true;\n-            // Check that `debug_assert!` itself is not inside a macro\n-            !in_macro_or_desugar(span)\n-        };\n-        if_chain! {\n-            if let Some(assert_span) = is_direct_expn_of(e.span, \"assert\");\n-            if !in_macro_or_desugar(assert_span)\n-                || is_direct_expn_of(assert_span, \"debug_assert\")\n-                    .map_or(false, debug_assert_not_in_macro_or_desugar);\n-            if let ExprKind::Unary(_, ref lit) = e.node;\n-            if let Some(bool_const) = constant(cx, cx.tables, lit);\n-            then {\n-                match bool_const.0 {\n-                    Constant::Bool(true) => {\n+        let lint_assert_cb = |is_debug_assert: bool| {\n+            if let ExprKind::Unary(_, ref lit) = e.node {\n+                if let Some((Constant::Bool(is_true), _)) = constant(cx, cx.tables, lit) {\n+                    if is_true {\n                         span_help_and_lint(\n                             cx,\n                             ASSERTIONS_ON_CONSTANTS,\n                             e.span,\n                             \"`assert!(true)` will be optimized out by the compiler\",\n-                            \"remove it\"\n+                            \"remove it\",\n                         );\n-                    },\n-                    Constant::Bool(false) if !is_debug_assert => {\n+                    } else if !is_debug_assert {\n                         span_help_and_lint(\n                             cx,\n                             ASSERTIONS_ON_CONSTANTS,\n                             e.span,\n                             \"`assert!(false)` should probably be replaced\",\n-                            \"use `panic!()` or `unreachable!()`\"\n+                            \"use `panic!()` or `unreachable!()`\",\n                         );\n-                    },\n-                    _ => (),\n+                    }\n                 }\n             }\n+        };\n+        if let Some(debug_assert_span) = is_expn_of(e.span, \"debug_assert\") {\n+            if in_macro_or_desugar(debug_assert_span) {\n+                return;\n+            }\n+            lint_assert_cb(true);\n+        } else if let Some(assert_span) = is_direct_expn_of(e.span, \"assert\") {\n+            if in_macro_or_desugar(assert_span) {\n+                return;\n+            }\n+            lint_assert_cb(false);\n         }\n     }\n }"}, {"sha": "01989625b45a9a15a0d4d57658faae09e11f9387", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e92c48989f1c8a3356cde3829c88408da9d8c983/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e92c48989f1c8a3356cde3829c88408da9d8c983/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=e92c48989f1c8a3356cde3829c88408da9d8c983", "patch": "@@ -298,14 +298,14 @@ fn bindings<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, pat: &Pat) -> FxHashMap<LocalI\n                     bindings_impl(cx, as_pat, map);\n                 }\n             },\n-            PatKind::Struct(_, ref fields, _) => {\n+            PatKind::Or(ref fields) | PatKind::Tuple(ref fields, _) => {\n                 for pat in fields {\n-                    bindings_impl(cx, &pat.pat, map);\n+                    bindings_impl(cx, pat, map);\n                 }\n             },\n-            PatKind::Tuple(ref fields, _) => {\n+            PatKind::Struct(_, ref fields, _) => {\n                 for pat in fields {\n-                    bindings_impl(cx, pat, map);\n+                    bindings_impl(cx, &pat.pat, map);\n                 }\n             },\n             PatKind::Slice(ref lhs, ref mid, ref rhs) => {"}, {"sha": "4cf52ddac92920cc72b454630cd4669873af343c", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e92c48989f1c8a3356cde3829c88408da9d8c983/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e92c48989f1c8a3356cde3829c88408da9d8c983/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=e92c48989f1c8a3356cde3829c88408da9d8c983", "patch": "@@ -549,6 +549,12 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n                 println!(\"    if {}.len() == {};\", fields_pat, fields.len());\n                 println!(\"    // unimplemented: field checks\");\n             },\n+            PatKind::Or(ref fields) => {\n+                let fields_pat = self.next(\"fields\");\n+                println!(\"Or(ref {}) = {};\", fields_pat, current);\n+                println!(\"    if {}.len() == {};\", fields_pat, fields.len());\n+                println!(\"    // unimplemented: field checks\");\n+            },\n             PatKind::TupleStruct(ref path, ref fields, skip_pos) => {\n                 let path_pat = self.next(\"path\");\n                 let fields_pat = self.next(\"fields\");"}, {"sha": "b48ef7d293b4d9be6285b874e33ff1f2966a3ed3", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e92c48989f1c8a3356cde3829c88408da9d8c983/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e92c48989f1c8a3356cde3829c88408da9d8c983/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=e92c48989f1c8a3356cde3829c88408da9d8c983", "patch": "@@ -410,6 +410,12 @@ fn print_pat(cx: &LateContext<'_, '_>, pat: &hir::Pat, indent: usize) {\n                 print_pat(cx, inner, indent + 1);\n             }\n         },\n+        hir::PatKind::Or(ref fields) => {\n+            println!(\"{}Or\", ind);\n+            for field in fields {\n+                print_pat(cx, field, indent + 1);\n+            }\n+        },\n         hir::PatKind::Struct(ref path, ref fields, ignore) => {\n             println!(\"{}Struct\", ind);\n             println!("}, {"sha": "020068d4633a3878f3ea1c766a64d30e69b5d1c8", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e92c48989f1c8a3356cde3829c88408da9d8c983/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e92c48989f1c8a3356cde3829c88408da9d8c983/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=e92c48989f1c8a3356cde3829c88408da9d8c983", "patch": "@@ -791,7 +791,7 @@ pub fn is_refutable(cx: &LateContext<'_, '_>, pat: &Pat) -> bool {\n         PatKind::Box(ref pat) | PatKind::Ref(ref pat, _) => is_refutable(cx, pat),\n         PatKind::Lit(..) | PatKind::Range(..) => true,\n         PatKind::Path(ref qpath) => is_enum_variant(cx, qpath, pat.hir_id),\n-        PatKind::Tuple(ref pats, _) => are_refutable(cx, pats.iter().map(|pat| &**pat)),\n+        PatKind::Or(ref pats) | PatKind::Tuple(ref pats, _) => are_refutable(cx, pats.iter().map(|pat| &**pat)),\n         PatKind::Struct(ref qpath, ref fields, _) => {\n             if is_enum_variant(cx, qpath, pat.hir_id) {\n                 true"}]}