{"sha": "786a80e9ea7af4909f67207c542eb02727f74756", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4NmE4MGU5ZWE3YWY0OTA5ZjY3MjA3YzU0MmViMDI3MjdmNzQ3NTY=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-01-30T22:25:03Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-02-15T18:32:29Z"}, "message": "Only store a LocalDefId in hir::ImplItem.", "tree": {"sha": "393e94827c3a7e0209a68e7c2e83304538628041", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/393e94827c3a7e0209a68e7c2e83304538628041"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/786a80e9ea7af4909f67207c542eb02727f74756", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/786a80e9ea7af4909f67207c542eb02727f74756", "html_url": "https://github.com/rust-lang/rust/commit/786a80e9ea7af4909f67207c542eb02727f74756", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/786a80e9ea7af4909f67207c542eb02727f74756/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a871a0f11196ed028edeedc4843338f702880672", "url": "https://api.github.com/repos/rust-lang/rust/commits/a871a0f11196ed028edeedc4843338f702880672", "html_url": "https://github.com/rust-lang/rust/commit/a871a0f11196ed028edeedc4843338f702880672"}], "stats": {"total": 328, "additions": 163, "deletions": 165}, "files": [{"sha": "b80b4a6b9b24b58b786a5b4e06fc72871c29316b", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=786a80e9ea7af4909f67207c542eb02727f74756", "patch": "@@ -98,7 +98,7 @@ impl<'a> Visitor<'a> for ItemLowerer<'a, '_, '_> {\n             }\n             AssocCtxt::Impl => {\n                 let hir_item = lctx.lower_impl_item(item);\n-                let id = hir::ImplItemId { hir_id: hir_item.hir_id };\n+                let id = hir_item.impl_item_id();\n                 lctx.impl_items.insert(id, hir_item);\n                 lctx.modules.get_mut(&lctx.current_module).unwrap().impl_items.insert(id);\n             }\n@@ -931,7 +931,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         let has_value = true;\n         let (defaultness, _) = self.lower_defaultness(i.kind.defaultness(), has_value);\n         hir::ImplItem {\n-            hir_id: self.lower_node_id(i.id),\n+            def_id: self.lower_node_id(i.id).expect_owner(),\n             ident: i.ident,\n             attrs: self.lower_attrs(&i.attrs),\n             generics,\n@@ -947,7 +947,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         let has_value = true;\n         let (defaultness, _) = self.lower_defaultness(i.kind.defaultness(), has_value);\n         hir::ImplItemRef {\n-            id: hir::ImplItemId { hir_id: self.lower_node_id(i.id) },\n+            id: hir::ImplItemId { def_id: self.lower_node_id(i.id).expect_owner() },\n             ident: i.ident,\n             span: i.span,\n             vis: self.lower_visibility(&i.vis, Some(i.id)),"}, {"sha": "ea23013fa0abd35a2367cbaecfd73c175fbce559", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=786a80e9ea7af4909f67207c542eb02727f74756", "patch": "@@ -1969,14 +1969,21 @@ pub enum TraitItemKind<'hir> {\n // so it can fetched later.\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Encodable, Debug)]\n pub struct ImplItemId {\n-    pub hir_id: HirId,\n+    pub def_id: LocalDefId,\n+}\n+\n+impl ImplItemId {\n+    pub fn hir_id(&self) -> HirId {\n+        // Items are always HIR owners.\n+        HirId::make_owner(self.def_id)\n+    }\n }\n \n /// Represents anything within an `impl` block.\n #[derive(Debug)]\n pub struct ImplItem<'hir> {\n     pub ident: Ident,\n-    pub hir_id: HirId,\n+    pub def_id: LocalDefId,\n     pub vis: Visibility<'hir>,\n     pub defaultness: Defaultness,\n     pub attrs: &'hir [Attribute],\n@@ -1985,6 +1992,17 @@ pub struct ImplItem<'hir> {\n     pub span: Span,\n }\n \n+impl ImplItem<'_> {\n+    pub fn hir_id(&self) -> HirId {\n+        // Items are always HIR owners.\n+        HirId::make_owner(self.def_id)\n+    }\n+\n+    pub fn impl_item_id(&self) -> ImplItemId {\n+        ImplItemId { def_id: self.def_id }\n+    }\n+}\n+\n /// Represents various kinds of content within an `impl`.\n #[derive(Debug, HashStable_Generic)]\n pub enum ImplItemKind<'hir> {\n@@ -2903,11 +2921,10 @@ impl<'hir> Node<'hir> {\n \n     pub fn hir_id(&self) -> Option<HirId> {\n         match self {\n-            Node::Item(Item { def_id, .. }) | Node::TraitItem(TraitItem { def_id, .. }) => {\n-                Some(HirId::make_owner(*def_id))\n-            }\n+            Node::Item(Item { def_id, .. })\n+            | Node::TraitItem(TraitItem { def_id, .. })\n+            | Node::ImplItem(ImplItem { def_id, .. }) => Some(HirId::make_owner(*def_id)),\n             Node::ForeignItem(ForeignItem { hir_id, .. })\n-            | Node::ImplItem(ImplItem { hir_id, .. })\n             | Node::Field(StructField { hir_id, .. })\n             | Node::AnonConst(AnonConst { hir_id, .. })\n             | Node::Expr(Expr { hir_id, .. })"}, {"sha": "960a06e043865604ed49f4cd973d18b5d13ac7d6", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=786a80e9ea7af4909f67207c542eb02727f74756", "patch": "@@ -1004,7 +1004,7 @@ pub fn walk_trait_item_ref<'v, V: Visitor<'v>>(visitor: &mut V, trait_item_ref:\n pub fn walk_impl_item<'v, V: Visitor<'v>>(visitor: &mut V, impl_item: &'v ImplItem<'v>) {\n     // N.B., deliberately force a compilation error if/when new fields are added.\n     let ImplItem {\n-        hir_id: _,\n+        def_id: _,\n         ident,\n         ref vis,\n         ref defaultness,\n@@ -1021,7 +1021,7 @@ pub fn walk_impl_item<'v, V: Visitor<'v>>(visitor: &mut V, impl_item: &'v ImplIt\n     visitor.visit_generics(generics);\n     match *kind {\n         ImplItemKind::Const(ref ty, body) => {\n-            visitor.visit_id(impl_item.hir_id);\n+            visitor.visit_id(impl_item.hir_id());\n             visitor.visit_ty(ty);\n             visitor.visit_nested_body(body);\n         }\n@@ -1031,11 +1031,11 @@ pub fn walk_impl_item<'v, V: Visitor<'v>>(visitor: &mut V, impl_item: &'v ImplIt\n                 &sig.decl,\n                 body_id,\n                 impl_item.span,\n-                impl_item.hir_id,\n+                impl_item.hir_id(),\n             );\n         }\n         ImplItemKind::TyAlias(ref ty) => {\n-            visitor.visit_id(impl_item.hir_id);\n+            visitor.visit_id(impl_item.hir_id());\n             visitor.visit_ty(ty);\n         }\n     }"}, {"sha": "a344af1237f279ad5279c99da1cfe349ba2281f0", "filename": "compiler/rustc_hir/src/stable_hash_impls.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_hir%2Fsrc%2Fstable_hash_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_hir%2Fsrc%2Fstable_hash_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fstable_hash_impls.rs?ref=786a80e9ea7af4909f67207c542eb02727f74756", "patch": "@@ -53,11 +53,11 @@ impl<HirCtx: crate::HashStableContext> ToStableHashKey<HirCtx> for TraitItemId {\n }\n \n impl<HirCtx: crate::HashStableContext> ToStableHashKey<HirCtx> for ImplItemId {\n-    type KeyType = (DefPathHash, ItemLocalId);\n+    type KeyType = DefPathHash;\n \n     #[inline]\n-    fn to_stable_hash_key(&self, hcx: &HirCtx) -> (DefPathHash, ItemLocalId) {\n-        self.hir_id.to_stable_hash_key(hcx)\n+    fn to_stable_hash_key(&self, hcx: &HirCtx) -> DefPathHash {\n+        hcx.local_def_path_hash(self.def_id)\n     }\n }\n \n@@ -103,7 +103,7 @@ impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for ForeignItemId {\n \n impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for ImplItemId {\n     fn hash_stable(&self, hcx: &mut HirCtx, hasher: &mut StableHasher) {\n-        hcx.hash_reference_to_item(self.hir_id, hasher)\n+        hcx.hash_reference_to_item(self.hir_id(), hasher)\n     }\n }\n \n@@ -154,7 +154,7 @@ impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for TraitItem<'_> {\n impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for ImplItem<'_> {\n     fn hash_stable(&self, hcx: &mut HirCtx, hasher: &mut StableHasher) {\n         let ImplItem {\n-            hir_id: _,\n+            def_id: _,\n             ident,\n             ref vis,\n             defaultness,"}, {"sha": "02ca42c0f33ddcf6cf6833f11101b80f963385a7", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=786a80e9ea7af4909f67207c542eb02727f74756", "patch": "@@ -973,7 +973,7 @@ impl<'a> State<'a> {\n     }\n \n     pub fn print_impl_item(&mut self, ii: &hir::ImplItem<'_>) {\n-        self.ann.pre(self, AnnNode::SubItem(ii.hir_id));\n+        self.ann.pre(self, AnnNode::SubItem(ii.hir_id()));\n         self.hardbreak_if_not_bol();\n         self.maybe_print_comment(ii.span.lo());\n         self.print_outer_attributes(&ii.attrs);\n@@ -995,7 +995,7 @@ impl<'a> State<'a> {\n                 self.print_associated_type(ii.ident, &ii.generics, None, Some(ty));\n             }\n         }\n-        self.ann.post(self, AnnNode::SubItem(ii.hir_id))\n+        self.ann.post(self, AnnNode::SubItem(ii.hir_id()))\n     }\n \n     pub fn print_local(&mut self, init: Option<&hir::Expr<'_>>, decl: impl Fn(&mut Self)) {"}, {"sha": "1162379d3d9817616204f187b4cdd81bb3fef914", "filename": "compiler/rustc_incremental/src/assert_dep_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs?ref=786a80e9ea7af4909f67207c542eb02727f74756", "patch": "@@ -177,7 +177,7 @@ impl Visitor<'tcx> for IfThisChanged<'tcx> {\n     }\n \n     fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem<'tcx>) {\n-        self.process_attrs(impl_item.hir_id, &impl_item.attrs);\n+        self.process_attrs(impl_item.hir_id(), &impl_item.attrs);\n         intravisit::walk_impl_item(self, impl_item);\n     }\n "}, {"sha": "cbe1e29d6d4189d3e4aea5a2940c57f98611d1a1", "filename": "compiler/rustc_incremental/src/persist/dirty_clean.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs?ref=786a80e9ea7af4909f67207c542eb02727f74756", "patch": "@@ -458,7 +458,7 @@ impl ItemLikeVisitor<'tcx> for DirtyCleanVisitor<'tcx> {\n     }\n \n     fn visit_impl_item(&mut self, item: &hir::ImplItem<'_>) {\n-        self.check_item(item.hir_id, item.span);\n+        self.check_item(item.hir_id(), item.span);\n     }\n \n     fn visit_foreign_item(&mut self, item: &hir::ForeignItem<'_>) {"}, {"sha": "e88c827477e5247cd2afad712bfb9338223adde9", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=786a80e9ea7af4909f67207c542eb02727f74756", "patch": "@@ -7,9 +7,7 @@ use crate::traits::{ObligationCauseCode, UnifyReceiverContext};\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, ErrorReported};\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{walk_ty, ErasedMap, NestedVisitorMap, Visitor};\n-use rustc_hir::{\n-    self as hir, GenericBound, ImplItem, Item, ItemKind, Lifetime, LifetimeName, Node, TyKind,\n-};\n+use rustc_hir::{self as hir, GenericBound, Item, ItemKind, Lifetime, LifetimeName, Node, TyKind};\n use rustc_middle::ty::{self, AssocItemContainer, RegionKind, Ty, TypeFoldable, TypeVisitor};\n use rustc_span::symbol::Ident;\n use rustc_span::{MultiSpan, Span};\n@@ -342,12 +340,12 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n     ) -> Option<(Ident, &'tcx hir::Ty<'tcx>)> {\n         let tcx = self.tcx();\n         match tcx.hir().get_if_local(def_id) {\n-            Some(Node::ImplItem(ImplItem { ident, hir_id, .. })) => {\n-                match tcx.hir().find(tcx.hir().get_parent_item(*hir_id)) {\n+            Some(Node::ImplItem(impl_item)) => {\n+                match tcx.hir().find(tcx.hir().get_parent_item(impl_item.hir_id())) {\n                     Some(Node::Item(Item {\n                         kind: ItemKind::Impl(hir::Impl { self_ty, .. }),\n                         ..\n-                    })) => Some((*ident, self_ty)),\n+                    })) => Some((impl_item.ident, self_ty)),\n                     _ => None,\n                 }\n             }"}, {"sha": "6ab7089248946be7e15c4c0330c29ee9eca3e601", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=786a80e9ea7af4909f67207c542eb02727f74756", "patch": "@@ -600,7 +600,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n                     if let Some(Node::Item(item)) = cx.tcx.hir().find(hir_id) {\n                         if let hir::VisibilityKind::Inherited = item.vis.node {\n                             for impl_item_ref in items {\n-                                self.private_traits.insert(impl_item_ref.id.hir_id);\n+                                self.private_traits.insert(impl_item_ref.id.hir_id());\n                             }\n                         }\n                     }\n@@ -644,15 +644,14 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n \n     fn check_impl_item(&mut self, cx: &LateContext<'_>, impl_item: &hir::ImplItem<'_>) {\n         // If the method is an impl for a trait, don't doc.\n-        if method_context(cx, impl_item.hir_id) == MethodLateContext::TraitImpl {\n+        if method_context(cx, impl_item.hir_id()) == MethodLateContext::TraitImpl {\n             return;\n         }\n \n-        let def_id = cx.tcx.hir().local_def_id(impl_item.hir_id);\n-        let (article, desc) = cx.tcx.article_and_description(def_id.to_def_id());\n+        let (article, desc) = cx.tcx.article_and_description(impl_item.def_id.to_def_id());\n         self.check_missing_docs_attrs(\n             cx,\n-            Some(impl_item.hir_id),\n+            Some(impl_item.hir_id()),\n             &impl_item.attrs,\n             impl_item.span,\n             article,\n@@ -1378,7 +1377,7 @@ impl<'tcx> LateLintPass<'tcx> for UnreachablePub {\n     }\n \n     fn check_impl_item(&mut self, cx: &LateContext<'_>, impl_item: &hir::ImplItem<'_>) {\n-        self.perform_lint(cx, \"item\", impl_item.hir_id, &impl_item.vis, impl_item.span, false);\n+        self.perform_lint(cx, \"item\", impl_item.hir_id(), &impl_item.vis, impl_item.span, false);\n     }\n }\n "}, {"sha": "0c4dbd9c47f8cba03094f3d7612966c7976898e0", "filename": "compiler/rustc_lint/src/late.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flate.rs?ref=786a80e9ea7af4909f67207c542eb02727f74756", "patch": "@@ -314,8 +314,8 @@ impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPas\n     fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem<'tcx>) {\n         let generics = self.context.generics.take();\n         self.context.generics = Some(&impl_item.generics);\n-        self.with_lint_attrs(impl_item.hir_id, &impl_item.attrs, |cx| {\n-            cx.with_param_env(impl_item.hir_id, |cx| {\n+        self.with_lint_attrs(impl_item.hir_id(), &impl_item.attrs, |cx| {\n+            cx.with_param_env(impl_item.hir_id(), |cx| {\n                 lint_callback!(cx, check_impl_item, impl_item);\n                 hir_visit::walk_impl_item(cx, impl_item);\n                 lint_callback!(cx, check_impl_item_post, impl_item);"}, {"sha": "0b34186bfc1b6619524248c52c43154d9935ce2c", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=786a80e9ea7af4909f67207c542eb02727f74756", "patch": "@@ -637,7 +637,7 @@ impl<'tcx> intravisit::Visitor<'tcx> for LintLevelMapBuilder<'_, 'tcx> {\n     }\n \n     fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem<'tcx>) {\n-        self.with_lint_attrs(impl_item.hir_id, &impl_item.attrs, |builder| {\n+        self.with_lint_attrs(impl_item.hir_id(), &impl_item.attrs, |builder| {\n             intravisit::walk_impl_item(builder, impl_item);\n         });\n     }"}, {"sha": "9222ce1015ebaea69126cafb47f825fce23ce66c", "filename": "compiler/rustc_middle/src/hir/map/blocks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fblocks.rs?ref=786a80e9ea7af4909f67207c542eb02727f74756", "patch": "@@ -235,7 +235,7 @@ impl<'a> FnLikeNode<'a> {\n             },\n             Node::ImplItem(ii) => match ii.kind {\n                 hir::ImplItemKind::Fn(ref sig, body) => {\n-                    method(ii.hir_id, ii.ident, sig, Some(&ii.vis), body, ii.span, &ii.attrs)\n+                    method(ii.hir_id(), ii.ident, sig, Some(&ii.vis), body, ii.span, &ii.attrs)\n                 }\n                 _ => bug!(\"impl method FnLikeNode that is not fn-like\"),\n             },"}, {"sha": "5365f474ec3ee285ed3b55ce0ef556a8a37deed8", "filename": "compiler/rustc_middle/src/hir/map/collector.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs?ref=786a80e9ea7af4909f67207c542eb02727f74756", "patch": "@@ -401,14 +401,10 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n     }\n \n     fn visit_impl_item(&mut self, ii: &'hir ImplItem<'hir>) {\n-        debug_assert_eq!(\n-            ii.hir_id.owner,\n-            self.definitions.opt_hir_id_to_local_def_id(ii.hir_id).unwrap()\n-        );\n-        self.with_dep_node_owner(ii.hir_id.owner, ii, |this, hash| {\n-            this.insert_with_hash(ii.span, ii.hir_id, Node::ImplItem(ii), hash);\n+        self.with_dep_node_owner(ii.def_id, ii, |this, hash| {\n+            this.insert_with_hash(ii.span, ii.hir_id(), Node::ImplItem(ii), hash);\n \n-            this.with_parent(ii.hir_id, |this| {\n+            this.with_parent(ii.hir_id(), |this| {\n                 intravisit::walk_impl_item(this, ii);\n             });\n         });"}, {"sha": "4ded4171b5efcf8a78a308b96f51bd4e0f9174d7", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=786a80e9ea7af4909f67207c542eb02727f74756", "patch": "@@ -315,7 +315,7 @@ impl<'hir> Map<'hir> {\n     }\n \n     pub fn impl_item(&self, id: ImplItemId) -> &'hir ImplItem<'hir> {\n-        match self.find(id.hir_id).unwrap() {\n+        match self.find(id.hir_id()).unwrap() {\n             Node::ImplItem(item) => item,\n             _ => bug!(),\n         }"}, {"sha": "2b82bace8c057de7777213537210a9990df38d59", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=786a80e9ea7af4909f67207c542eb02727f74756", "patch": "@@ -836,7 +836,7 @@ fn foo(&self) -> Self::T { String::new() }\n             })) => {\n                 for item in &items[..] {\n                     if let hir::AssocItemKind::Type = item.kind {\n-                        if self.type_of(self.hir().local_def_id(item.id.hir_id)) == found {\n+                        if self.type_of(item.id.def_id) == found {\n                             db.span_label(item.span, \"expected this associated type\");\n                             return true;\n                         }"}, {"sha": "20cb989196a983ed75d3da85a20845afbf9e6c98", "filename": "compiler/rustc_mir/src/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs?ref=786a80e9ea7af4909f67207c542eb02727f74756", "patch": "@@ -1060,8 +1060,7 @@ impl ItemLikeVisitor<'v> for RootCollector<'_, 'v> {\n \n     fn visit_impl_item(&mut self, ii: &'v hir::ImplItem<'v>) {\n         if let hir::ImplItemKind::Fn(hir::FnSig { .. }, _) = ii.kind {\n-            let def_id = self.tcx.hir().local_def_id(ii.hir_id);\n-            self.push_if_root(def_id);\n+            self.push_if_root(ii.def_id);\n         }\n     }\n "}, {"sha": "368d58dc828e6720a3649036c48e8fcd99ea97fe", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=786a80e9ea7af4909f67207c542eb02727f74756", "patch": "@@ -29,7 +29,7 @@ pub(crate) fn target_from_impl_item<'tcx>(\n     match impl_item.kind {\n         hir::ImplItemKind::Const(..) => Target::AssocConst,\n         hir::ImplItemKind::Fn(..) => {\n-            let parent_hir_id = tcx.hir().get_parent_item(impl_item.hir_id);\n+            let parent_hir_id = tcx.hir().get_parent_item(impl_item.hir_id());\n             let containing_item = tcx.hir().expect_item(parent_hir_id);\n             let containing_impl_is_for_trait = match &containing_item.kind {\n                 hir::ItemKind::Impl(impl_) => impl_.of_trait.is_some(),\n@@ -1121,7 +1121,7 @@ impl Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n \n     fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem<'tcx>) {\n         let target = target_from_impl_item(self.tcx, impl_item);\n-        self.check_attributes(impl_item.hir_id, &impl_item.attrs, &impl_item.span, target, None);\n+        self.check_attributes(impl_item.hir_id(), &impl_item.attrs, &impl_item.span, target, None);\n         intravisit::walk_impl_item(self, impl_item)\n     }\n "}, {"sha": "13eed5bb349fd9e96b3267190cd131e426a46d80", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=786a80e9ea7af4909f67207c542eb02727f74756", "patch": "@@ -420,11 +420,11 @@ impl<'v, 'k, 'tcx> ItemLikeVisitor<'v> for LifeSeeder<'k, 'tcx> {\n                     if of_trait.is_some()\n                         || has_allow_dead_code_or_lang_attr(\n                             self.tcx,\n-                            impl_item.hir_id,\n+                            impl_item.hir_id(),\n                             &impl_item.attrs,\n                         )\n                     {\n-                        self.worklist.push(impl_item_ref.id.hir_id);\n+                        self.worklist.push(impl_item_ref.id.hir_id());\n                     }\n                 }\n             }\n@@ -664,9 +664,9 @@ impl Visitor<'tcx> for DeadVisitor<'tcx> {\n     fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem<'tcx>) {\n         match impl_item.kind {\n             hir::ImplItemKind::Const(_, body_id) => {\n-                if !self.symbol_is_live(impl_item.hir_id) {\n+                if !self.symbol_is_live(impl_item.hir_id()) {\n                     self.warn_dead_code(\n-                        impl_item.hir_id,\n+                        impl_item.hir_id(),\n                         impl_item.span,\n                         impl_item.ident.name,\n                         \"used\",\n@@ -675,7 +675,7 @@ impl Visitor<'tcx> for DeadVisitor<'tcx> {\n                 self.visit_nested_body(body_id)\n             }\n             hir::ImplItemKind::Fn(_, body_id) => {\n-                if !self.symbol_is_live(impl_item.hir_id) {\n+                if !self.symbol_is_live(impl_item.hir_id()) {\n                     // FIXME(66095): Because impl_item.span is annotated with things\n                     // like expansion data, and ident.span isn't, we use the\n                     // def_span method if it's part of a macro invocation\n@@ -687,7 +687,7 @@ impl Visitor<'tcx> for DeadVisitor<'tcx> {\n                     } else {\n                         impl_item.ident.span\n                     };\n-                    self.warn_dead_code(impl_item.hir_id, span, impl_item.ident.name, \"used\");\n+                    self.warn_dead_code(impl_item.hir_id(), span, impl_item.ident.name, \"used\");\n                 }\n                 self.visit_nested_body(body_id)\n             }"}, {"sha": "2357764a0b5fc158b2e45203fa1d777952f48306", "filename": "compiler/rustc_passes/src/diagnostic_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs?ref=786a80e9ea7af4909f67207c542eb02727f74756", "patch": "@@ -35,7 +35,7 @@ impl<'v, 'tcx> ItemLikeVisitor<'v> for DiagnosticItemCollector<'tcx> {\n     }\n \n     fn visit_impl_item(&mut self, impl_item: &hir::ImplItem<'_>) {\n-        self.observe_item(&impl_item.attrs, impl_item.hir_id);\n+        self.observe_item(&impl_item.attrs, impl_item.hir_id());\n     }\n \n     fn visit_foreign_item(&mut self, foreign_item: &hir::ForeignItem<'_>) {"}, {"sha": "e7cdacdddda108a131025958ea555a3799e539e9", "filename": "compiler/rustc_passes/src/hir_id_validator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs?ref=786a80e9ea7af4909f67207c542eb02727f74756", "patch": "@@ -66,7 +66,7 @@ impl<'a, 'hir> ItemLikeVisitor<'hir> for OuterVisitor<'a, 'hir> {\n \n     fn visit_impl_item(&mut self, i: &'hir hir::ImplItem<'hir>) {\n         let mut inner_visitor = self.new_inner_visitor(self.hir_map);\n-        inner_visitor.check(i.hir_id, |this| intravisit::walk_impl_item(this, i));\n+        inner_visitor.check(i.hir_id(), |this| intravisit::walk_impl_item(this, i));\n     }\n \n     fn visit_foreign_item(&mut self, i: &'hir hir::ForeignItem<'hir>) {"}, {"sha": "a660eb1ea2e72aa09d10b3b9d1d265ac4846409b", "filename": "compiler/rustc_passes/src/hir_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs?ref=786a80e9ea7af4909f67207c542eb02727f74756", "patch": "@@ -192,7 +192,7 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n     }\n \n     fn visit_impl_item(&mut self, ii: &'v hir::ImplItem<'v>) {\n-        self.record(\"ImplItem\", Id::Node(ii.hir_id), ii);\n+        self.record(\"ImplItem\", Id::Node(ii.hir_id()), ii);\n         hir_visit::walk_impl_item(self, ii)\n     }\n "}, {"sha": "8e2ad7f783e9bc8fc11c5911e58e4bb270d27407", "filename": "compiler/rustc_passes/src/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs?ref=786a80e9ea7af4909f67207c542eb02727f74756", "patch": "@@ -50,7 +50,7 @@ impl ItemLikeVisitor<'v> for LanguageItemCollector<'tcx> {\n     fn visit_impl_item(&mut self, impl_item: &hir::ImplItem<'_>) {\n         self.check_for_lang(\n             target_from_impl_item(self.tcx, impl_item),\n-            impl_item.hir_id,\n+            impl_item.hir_id(),\n             impl_item.attrs,\n         )\n     }"}, {"sha": "20aaaea5b9809703bd01870bb71756467962e0d5", "filename": "compiler/rustc_passes/src/reachable.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Freachable.rs?ref=786a80e9ea7af4909f67207c542eb02727f74756", "patch": "@@ -43,8 +43,8 @@ fn method_might_be_inlined(\n     impl_item: &hir::ImplItem<'_>,\n     impl_src: LocalDefId,\n ) -> bool {\n-    let codegen_fn_attrs = tcx.codegen_fn_attrs(impl_item.hir_id.owner.to_def_id());\n-    let generics = tcx.generics_of(tcx.hir().local_def_id(impl_item.hir_id));\n+    let codegen_fn_attrs = tcx.codegen_fn_attrs(impl_item.hir_id().owner.to_def_id());\n+    let generics = tcx.generics_of(impl_item.def_id);\n     if codegen_fn_attrs.requests_inline() || generics.requires_monomorphization(tcx) {\n         return true;\n     }\n@@ -356,8 +356,7 @@ impl<'a, 'tcx> ItemLikeVisitor<'tcx> for CollectPrivateImplItemsVisitor<'a, 'tcx\n             if !self.access_levels.is_reachable(item.hir_id()) {\n                 // FIXME(#53488) remove `let`\n                 let tcx = self.tcx;\n-                self.worklist\n-                    .extend(items.iter().map(|ii_ref| tcx.hir().local_def_id(ii_ref.id.hir_id)));\n+                self.worklist.extend(items.iter().map(|ii_ref| ii_ref.id.def_id));\n \n                 let trait_def_id = match trait_ref.path.res {\n                     Res::Def(DefKind::Trait, def_id) => def_id,"}, {"sha": "f18b9e4ea8f3563a6c34ef8acaed7a99997b12ce", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=786a80e9ea7af4909f67207c542eb02727f74756", "patch": "@@ -405,7 +405,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n         let kind =\n             if self.in_trait_impl { AnnotationKind::Prohibited } else { AnnotationKind::Required };\n         self.annotate(\n-            ii.hir_id,\n+            ii.hir_id(),\n             &ii.attrs,\n             ii.span,\n             kind,\n@@ -576,9 +576,9 @@ impl<'tcx> Visitor<'tcx> for MissingStabilityAnnotations<'tcx> {\n     }\n \n     fn visit_impl_item(&mut self, ii: &'tcx hir::ImplItem<'tcx>) {\n-        let impl_def_id = self.tcx.hir().local_def_id(self.tcx.hir().get_parent_item(ii.hir_id));\n+        let impl_def_id = self.tcx.hir().local_def_id(self.tcx.hir().get_parent_item(ii.hir_id()));\n         if self.tcx.impl_trait_ref(impl_def_id).is_none() {\n-            self.check_missing_stability(ii.hir_id, ii.span);\n+            self.check_missing_stability(ii.hir_id(), ii.span);\n         }\n         intravisit::walk_impl_item(self, ii);\n     }"}, {"sha": "20fec4a63655a182a5537ee88895da259ba48b9d", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=786a80e9ea7af4909f67207c542eb02727f74756", "patch": "@@ -663,7 +663,7 @@ impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n             hir::ItemKind::Impl(ref impl_) => {\n                 for impl_item_ref in impl_.items {\n                     if impl_.of_trait.is_some() || impl_item_ref.vis.node.is_pub() {\n-                        self.update(impl_item_ref.id.hir_id, item_level);\n+                        self.update(impl_item_ref.id.hir_id(), item_level);\n                     }\n                 }\n             }\n@@ -769,9 +769,9 @@ impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n                     self.reach(item.hir_id(), item_level).generics().predicates().ty().trait_ref();\n \n                     for impl_item_ref in impl_.items {\n-                        let impl_item_level = self.get(impl_item_ref.id.hir_id);\n+                        let impl_item_level = self.get(impl_item_ref.id.hir_id());\n                         if impl_item_level.is_some() {\n-                            self.reach(impl_item_ref.id.hir_id, impl_item_level)\n+                            self.reach(impl_item_ref.id.hir_id(), impl_item_level)\n                                 .generics()\n                                 .predicates()\n                                 .ty();\n@@ -1526,7 +1526,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n                         let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);\n                         match impl_item.kind {\n                             hir::ImplItemKind::Const(..) | hir::ImplItemKind::Fn(..) => {\n-                                self.access_levels.is_reachable(impl_item_ref.id.hir_id)\n+                                self.access_levels.is_reachable(impl_item_ref.id.hir_id())\n                             }\n                             hir::ImplItemKind::TyAlias(_) => false,\n                         }\n@@ -1546,8 +1546,10 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n                                 let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);\n                                 match impl_item.kind {\n                                     hir::ImplItemKind::Const(..) | hir::ImplItemKind::Fn(..)\n-                                        if self\n-                                            .item_is_public(&impl_item.hir_id, &impl_item.vis) =>\n+                                        if self.item_is_public(\n+                                            &impl_item.hir_id(),\n+                                            &impl_item.vis,\n+                                        ) =>\n                                     {\n                                         intravisit::walk_impl_item(self, impl_item)\n                                     }\n@@ -1588,7 +1590,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n                     // methods will be visible as `Public::foo`.\n                     let mut found_pub_static = false;\n                     for impl_item_ref in impl_.items {\n-                        if self.item_is_public(&impl_item_ref.id.hir_id, &impl_item_ref.vis) {\n+                        if self.item_is_public(&impl_item_ref.id.hir_id(), &impl_item_ref.vis) {\n                             let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);\n                             match impl_item_ref.kind {\n                                 AssocItemKind::Const => {\n@@ -2002,16 +2004,12 @@ impl<'a, 'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'a, 'tcx>\n                 self.check(item.hir_id(), impl_vis).generics().predicates();\n                 for impl_item_ref in impl_.items {\n                     let impl_item_vis = if impl_.of_trait.is_none() {\n-                        min(\n-                            tcx.visibility(tcx.hir().local_def_id(impl_item_ref.id.hir_id)),\n-                            impl_vis,\n-                            tcx,\n-                        )\n+                        min(tcx.visibility(impl_item_ref.id.def_id), impl_vis, tcx)\n                     } else {\n                         impl_vis\n                     };\n                     self.check_assoc_item(\n-                        impl_item_ref.id.hir_id,\n+                        impl_item_ref.id.hir_id(),\n                         impl_item_ref.kind,\n                         impl_item_ref.defaultness,\n                         impl_item_vis,"}, {"sha": "56e60d73fa851411ee70467f902be16f71a9fd0d", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=786a80e9ea7af4909f67207c542eb02727f74756", "patch": "@@ -634,7 +634,8 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                                 let parent_id = self.tcx.hir().get_parent_node(hir_id);\n                                 let parent_item_id =\n                                     hir::ItemId { def_id: parent_id.expect_owner() };\n-                                let parent_impl_id = hir::ImplItemId { hir_id: parent_id };\n+                                let parent_impl_id =\n+                                    hir::ImplItemId { def_id: parent_id.expect_owner() };\n                                 let parent_trait_id =\n                                     hir::TraitItemId { def_id: parent_id.expect_owner() };\n                                 let krate = self.tcx.hir().krate();\n@@ -803,7 +804,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 self.missing_named_lifetime_spots.push((&impl_item.generics).into());\n                 let tcx = self.tcx;\n                 self.visit_early_late(\n-                    Some(tcx.hir().get_parent_item(impl_item.hir_id)),\n+                    Some(tcx.hir().get_parent_item(impl_item.hir_id())),\n                     &sig.decl,\n                     &impl_item.generics,\n                     |this| intravisit::walk_impl_item(this, impl_item),\n@@ -2128,7 +2129,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                 {\n                     impl_self = Some(self_ty);\n                     assoc_item_kind =\n-                        items.iter().find(|ii| ii.id.hir_id == parent).map(|ii| ii.kind);\n+                        items.iter().find(|ii| ii.id.hir_id() == parent).map(|ii| ii.kind);\n                 }\n                 Some(body)\n             }"}, {"sha": "e9dbed20e44e120af2882e6789c4ab934d5a2ce6", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=786a80e9ea7af4909f67207c542eb02727f74756", "patch": "@@ -1073,7 +1073,7 @@ impl<'tcx> DumpVisitor<'tcx> {\n             hir::ImplItemKind::Const(ref ty, body) => {\n                 let body = self.tcx.hir().body(body);\n                 self.process_assoc_const(\n-                    impl_item.hir_id,\n+                    impl_item.hir_id(),\n                     impl_item.ident,\n                     &ty,\n                     Some(&body.value),\n@@ -1086,7 +1086,7 @@ impl<'tcx> DumpVisitor<'tcx> {\n                 self.process_method(\n                     sig,\n                     Some(body),\n-                    impl_item.hir_id,\n+                    impl_item.hir_id(),\n                     impl_item.ident,\n                     &impl_item.generics,\n                     &impl_item.vis,"}, {"sha": "5801926968a64e0a0787709593dd6570933f08e4", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=786a80e9ea7af4909f67207c542eb02727f74756", "patch": "@@ -358,7 +358,7 @@ impl<'tcx> SaveContext<'tcx> {\n                                 parent: None,\n                                 children: items\n                                     .iter()\n-                                    .map(|i| id_from_hir_id(i.id.hir_id, self))\n+                                    .map(|i| id_from_def_id(i.id.def_id.to_def_id()))\n                                     .collect(),\n                                 docs: String::new(),\n                                 sig: None,"}, {"sha": "b46bb39b1f71567cbd2887c27c5cb9e56e83837e", "filename": "compiler/rustc_symbol_mangling/src/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftest.rs?ref=786a80e9ea7af4909f67207c542eb02727f74756", "patch": "@@ -69,7 +69,7 @@ impl hir::itemlikevisit::ItemLikeVisitor<'tcx> for SymbolNamesTest<'tcx> {\n     }\n \n     fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem<'tcx>) {\n-        self.process_attrs(impl_item.hir_id);\n+        self.process_attrs(impl_item.hir_id());\n     }\n \n     fn visit_foreign_item(&mut self, foreign_item: &'tcx hir::ForeignItem<'tcx>) {"}, {"sha": "76d27c292262d8005500a67b5be2ca99cf80b1dc", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=786a80e9ea7af4909f67207c542eb02727f74756", "patch": "@@ -105,7 +105,7 @@ fn associated_item_from_impl_item_ref(\n     parent_def_id: LocalDefId,\n     impl_item_ref: &hir::ImplItemRef<'_>,\n ) -> ty::AssocItem {\n-    let def_id = tcx.hir().local_def_id(impl_item_ref.id.hir_id);\n+    let def_id = impl_item_ref.id.def_id;\n     let (kind, has_self) = match impl_item_ref.kind {\n         hir::AssocItemKind::Const => (ty::AssocKind::Const, false),\n         hir::AssocItemKind::Fn { has_self } => (ty::AssocKind::Fn, has_self),\n@@ -130,7 +130,9 @@ fn associated_item(tcx: TyCtxt<'_>, def_id: DefId) -> ty::AssocItem {\n     let parent_item = tcx.hir().expect_item(parent_id);\n     match parent_item.kind {\n         hir::ItemKind::Impl(ref impl_) => {\n-            if let Some(impl_item_ref) = impl_.items.iter().find(|i| i.id.hir_id == id) {\n+            if let Some(impl_item_ref) =\n+                impl_.items.iter().find(|i| i.id.def_id.to_def_id() == def_id)\n+            {\n                 let assoc_item =\n                     associated_item_from_impl_item_ref(tcx, parent_def_id, impl_item_ref);\n                 debug_assert_eq!(assoc_item.def_id, def_id);\n@@ -201,11 +203,7 @@ fn associated_item_def_ids(tcx: TyCtxt<'_>, def_id: DefId) -> &[DefId] {\n             trait_item_refs.iter().map(|trait_item_ref| trait_item_ref.id.def_id.to_def_id()),\n         ),\n         hir::ItemKind::Impl(ref impl_) => tcx.arena.alloc_from_iter(\n-            impl_\n-                .items\n-                .iter()\n-                .map(|impl_item_ref| impl_item_ref.id)\n-                .map(|id| tcx.hir().local_def_id(id.hir_id).to_def_id()),\n+            impl_.items.iter().map(|impl_item_ref| impl_item_ref.id.def_id.to_def_id()),\n         ),\n         hir::ItemKind::TraitAlias(..) => &[],\n         _ => span_bug!(item.span, \"associated_item_def_ids: not impl or trait\"),"}, {"sha": "43da911a42f126dfdb7b4e458cb5c30d226f47f0", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=786a80e9ea7af4909f67207c542eb02727f74756", "patch": "@@ -928,7 +928,7 @@ pub(super) fn check_impl_items_against_trait<'tcx>(\n     // Check existing impl methods to see if they are both present in trait\n     // and compatible with trait signature\n     for impl_item in impl_items {\n-        let ty_impl_item = tcx.associated_item(tcx.hir().local_def_id(impl_item.hir_id));\n+        let ty_impl_item = tcx.associated_item(impl_item.def_id);\n \n         let mut items =\n             associated_items.filter_by_name(tcx, ty_impl_item.ident, impl_trait_ref.def_id);"}, {"sha": "a30a81079335d7ab8ac07485c4adbc80c9d1c1a7", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=786a80e9ea7af4909f67207c542eb02727f74756", "patch": "@@ -826,8 +826,8 @@ fn compare_synthetic_generics<'tcx>(\n                         let trait_m = trait_m.def_id.as_local()?;\n                         let trait_m = tcx.hir().trait_item(hir::TraitItemId { def_id: trait_m });\n \n-                        let impl_m = tcx.hir().local_def_id_to_hir_id(impl_m.def_id.as_local()?);\n-                        let impl_m = tcx.hir().impl_item(hir::ImplItemId { hir_id: impl_m });\n+                        let impl_m = impl_m.def_id.as_local()?;\n+                        let impl_m = tcx.hir().impl_item(hir::ImplItemId { def_id: impl_m });\n \n                         // in case there are no generics, take the spot between the function name\n                         // and the opening paren of the argument list\n@@ -860,8 +860,8 @@ fn compare_synthetic_generics<'tcx>(\n                 (None, Some(hir::SyntheticTyParamKind::ImplTrait)) => {\n                     err.span_label(impl_span, \"expected `impl Trait`, found generic parameter\");\n                     (|| {\n-                        let impl_m = tcx.hir().local_def_id_to_hir_id(impl_m.def_id.as_local()?);\n-                        let impl_m = tcx.hir().impl_item(hir::ImplItemId { hir_id: impl_m });\n+                        let impl_m = impl_m.def_id.as_local()?;\n+                        let impl_m = tcx.hir().impl_item(hir::ImplItemId { def_id: impl_m });\n                         let input_tys = match impl_m.kind {\n                             hir::ImplItemKind::Fn(ref sig, _) => sig.decl.inputs,\n                             _ => unreachable!(),"}, {"sha": "0bdcee458d75ae66d55d87db2e6019d4bcd5d219", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=786a80e9ea7af4909f67207c542eb02727f74756", "patch": "@@ -271,7 +271,7 @@ pub fn check_impl_item(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n         _ => None,\n     };\n \n-    check_associated_item(tcx, impl_item.hir_id, impl_item.span, method_sig);\n+    check_associated_item(tcx, impl_item.hir_id(), impl_item.span, method_sig);\n }\n \n fn check_param_wf(tcx: TyCtxt<'_>, param: &hir::GenericParam<'_>) {\n@@ -1360,8 +1360,7 @@ impl Visitor<'tcx> for CheckTypeWellFormedVisitor<'tcx> {\n \n     fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem<'tcx>) {\n         debug!(\"visit_impl_item: {:?}\", impl_item);\n-        let def_id = self.tcx.hir().local_def_id(impl_item.hir_id);\n-        self.tcx.ensure().check_impl_item_well_formed(def_id);\n+        self.tcx.ensure().check_impl_item_well_formed(impl_item.def_id);\n         hir_visit::walk_impl_item(self, impl_item);\n     }\n "}, {"sha": "5ad575183086d20ec8df57e5e745c756f5d21444", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=786a80e9ea7af4909f67207c542eb02727f74756", "patch": "@@ -286,7 +286,7 @@ impl Visitor<'tcx> for CollectItemTypesVisitor<'tcx> {\n     }\n \n     fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem<'tcx>) {\n-        convert_impl_item(self.tcx, impl_item.hir_id);\n+        convert_impl_item(self.tcx, impl_item.impl_item_id());\n         intravisit::walk_impl_item(self, impl_item);\n     }\n }\n@@ -849,12 +849,12 @@ fn convert_trait_item(tcx: TyCtxt<'_>, trait_item_id: hir::TraitItemId) {\n     tcx.ensure().predicates_of(trait_item_id.def_id);\n }\n \n-fn convert_impl_item(tcx: TyCtxt<'_>, impl_item_id: hir::HirId) {\n-    let def_id = tcx.hir().local_def_id(impl_item_id);\n+fn convert_impl_item(tcx: TyCtxt<'_>, impl_item_id: hir::ImplItemId) {\n+    let def_id = impl_item_id.def_id;\n     tcx.ensure().generics_of(def_id);\n     tcx.ensure().type_of(def_id);\n     tcx.ensure().predicates_of(def_id);\n-    let impl_item = tcx.hir().expect_impl_item(impl_item_id);\n+    let impl_item = tcx.hir().impl_item(impl_item_id);\n     match impl_item.kind {\n         hir::ImplItemKind::Fn(..) => {\n             tcx.ensure().fn_sig(def_id);"}, {"sha": "a2aa3b308ec77bc17e67172b74d8f366fe4c2c55", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=786a80e9ea7af4909f67207c542eb02727f74756", "patch": "@@ -590,10 +590,9 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n         }\n         fn visit_impl_item(&mut self, it: &'tcx ImplItem<'tcx>) {\n             debug!(\"find_existential_constraints: visiting {:?}\", it);\n-            let def_id = self.tcx.hir().local_def_id(it.hir_id);\n             // The opaque type itself or its children are not within its reveal scope.\n-            if def_id.to_def_id() != self.def_id {\n-                self.check(def_id);\n+            if it.def_id.to_def_id() != self.def_id {\n+                self.check(it.def_id);\n                 intravisit::walk_impl_item(self, it);\n             }\n         }"}, {"sha": "d8ae0e42546a6c7f72b6c8df2d4b402f320d1118", "filename": "compiler/rustc_typeck/src/impl_wf_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check.rs?ref=786a80e9ea7af4909f67207c542eb02727f74756", "patch": "@@ -130,7 +130,7 @@ fn enforce_impl_params_are_constrained(\n     // Disallow unconstrained lifetimes, but only if they appear in assoc types.\n     let lifetimes_in_associated_types: FxHashSet<_> = impl_item_refs\n         .iter()\n-        .map(|item_ref| tcx.hir().local_def_id(item_ref.id.hir_id))\n+        .map(|item_ref| item_ref.id.def_id)\n         .flat_map(|def_id| {\n             let item = tcx.associated_item(def_id);\n             match item.kind {"}, {"sha": "61f3f957df84a64241a8cd7aec63828151defcd9", "filename": "compiler/rustc_typeck/src/variance/constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fconstraints.rs?ref=786a80e9ea7af4909f67207c542eb02727f74756", "patch": "@@ -104,7 +104,7 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for ConstraintContext<'a, 'tcx> {\n \n     fn visit_impl_item(&mut self, impl_item: &hir::ImplItem<'_>) {\n         if let hir::ImplItemKind::Fn(..) = impl_item.kind {\n-            self.visit_node_helper(impl_item.hir_id);\n+            self.visit_node_helper(impl_item.hir_id());\n         }\n     }\n "}, {"sha": "e60a1c4009c8258e9f76a53f6fd9448ad3a0cd3f", "filename": "compiler/rustc_typeck/src/variance/terms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fterms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786a80e9ea7af4909f67207c542eb02727f74756/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fterms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fterms.rs?ref=786a80e9ea7af4909f67207c542eb02727f74756", "patch": "@@ -165,7 +165,7 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for TermsContext<'a, 'tcx> {\n \n     fn visit_impl_item(&mut self, impl_item: &hir::ImplItem<'_>) {\n         if let hir::ImplItemKind::Fn(..) = impl_item.kind {\n-            self.add_inferreds_for_item(impl_item.hir_id);\n+            self.add_inferreds_for_item(impl_item.hir_id());\n         }\n     }\n "}, {"sha": "688470dd6918aced46c7c9c8da6a960ccd230ed9", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/786a80e9ea7af4909f67207c542eb02727f74756/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786a80e9ea7af4909f67207c542eb02727f74756/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=786a80e9ea7af4909f67207c542eb02727f74756", "patch": "@@ -1085,7 +1085,7 @@ impl Clean<Item> for hir::TraitItem<'_> {\n \n impl Clean<Item> for hir::ImplItem<'_> {\n     fn clean(&self, cx: &DocContext<'_>) -> Item {\n-        let local_did = cx.tcx.hir().local_def_id(self.hir_id).to_def_id();\n+        let local_did = self.def_id.to_def_id();\n         cx.with_param_env(local_did, || {\n             let inner = match self.kind {\n                 hir::ImplItemKind::Const(ref ty, expr) => {\n@@ -1116,7 +1116,7 @@ impl Clean<Item> for hir::ImplItem<'_> {\n \n             let what_rustc_thinks =\n                 Item::from_def_id_and_parts(local_did, Some(self.ident.name), inner, cx);\n-            let parent_item = cx.tcx.hir().expect_item(cx.tcx.hir().get_parent_item(self.hir_id));\n+            let parent_item = cx.tcx.hir().expect_item(cx.tcx.hir().get_parent_item(self.hir_id()));\n             if let hir::ItemKind::Impl(impl_) = &parent_item.kind {\n                 if impl_.of_trait.is_some() {\n                     // Trait impl items always inherit the impl's visibility --"}, {"sha": "be02b0050e8e9f53b13fbdd0741f895e5971ab19", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/786a80e9ea7af4909f67207c542eb02727f74756/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786a80e9ea7af4909f67207c542eb02727f74756/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=786a80e9ea7af4909f67207c542eb02727f74756", "patch": "@@ -1068,9 +1068,15 @@ impl<'a, 'hir, 'tcx> intravisit::Visitor<'hir> for HirCollector<'a, 'hir, 'tcx>\n     }\n \n     fn visit_impl_item(&mut self, item: &'hir hir::ImplItem<'_>) {\n-        self.visit_testable(item.ident.to_string(), &item.attrs, item.hir_id, item.span, |this| {\n-            intravisit::walk_impl_item(this, item);\n-        });\n+        self.visit_testable(\n+            item.ident.to_string(),\n+            &item.attrs,\n+            item.hir_id(),\n+            item.span,\n+            |this| {\n+                intravisit::walk_impl_item(this, item);\n+            },\n+        );\n     }\n \n     fn visit_foreign_item(&mut self, item: &'hir hir::ForeignItem<'_>) {"}, {"sha": "67b7cf91958655e65e93e671a3e3ac1499f67acc", "filename": "src/tools/clippy/clippy_lints/src/doc.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/786a80e9ea7af4909f67207c542eb02727f74756/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786a80e9ea7af4909f67207c542eb02727f74756/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs?ref=786a80e9ea7af4909f67207c542eb02727f74756", "patch": "@@ -258,14 +258,13 @@ impl<'tcx> LateLintPass<'tcx> for DocMarkdown {\n         }\n         if let hir::ImplItemKind::Fn(ref sig, body_id) = item.kind {\n             let body = cx.tcx.hir().body(body_id);\n-            let impl_item_def_id = cx.tcx.hir().local_def_id(item.hir_id);\n             let mut fpu = FindPanicUnwrap {\n                 cx,\n-                typeck_results: cx.tcx.typeck(impl_item_def_id),\n+                typeck_results: cx.tcx.typeck(item.def_id),\n                 panic_span: None,\n             };\n             fpu.visit_expr(&body.value);\n-            lint_for_missing_headers(cx, item.hir_id, item.span, sig, headers, Some(body_id), fpu.panic_span);\n+            lint_for_missing_headers(cx, item.hir_id(), item.span, sig, headers, Some(body_id), fpu.panic_span);\n         }\n     }\n }"}, {"sha": "6d522c7ef3398d231cdd10244b2e8c47054b45fd", "filename": "src/tools/clippy/clippy_lints/src/fallible_impl_from.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/786a80e9ea7af4909f67207c542eb02727f74756/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786a80e9ea7af4909f67207c542eb02727f74756/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffallible_impl_from.rs?ref=786a80e9ea7af4909f67207c542eb02727f74756", "patch": "@@ -116,10 +116,9 @@ fn lint_impl_body<'tcx>(cx: &LateContext<'tcx>, impl_span: Span, impl_items: &[h\n             then {\n                 // check the body for `begin_panic` or `unwrap`\n                 let body = cx.tcx.hir().body(body_id);\n-                let impl_item_def_id = cx.tcx.hir().local_def_id(impl_item.id.hir_id);\n                 let mut fpu = FindPanicUnwrap {\n                     lcx: cx,\n-                    typeck_results: cx.tcx.typeck(impl_item_def_id),\n+                    typeck_results: cx.tcx.typeck(impl_item.id.def_id),\n                     result: Vec::new(),\n                 };\n                 fpu.visit_expr(&body.value);"}, {"sha": "0c6bf8bbdf24adc943cbebbdf2cb196274c9b3ca", "filename": "src/tools/clippy/clippy_lints/src/functions.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/786a80e9ea7af4909f67207c542eb02727f74756/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786a80e9ea7af4909f67207c542eb02727f74756/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions.rs?ref=786a80e9ea7af4909f67207c542eb02727f74756", "patch": "@@ -308,24 +308,24 @@ impl<'tcx> LateLintPass<'tcx> for Functions {\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::ImplItem<'_>) {\n         if let hir::ImplItemKind::Fn(ref sig, ref body_id) = item.kind {\n-            let is_public = cx.access_levels.is_exported(item.hir_id);\n+            let is_public = cx.access_levels.is_exported(item.hir_id());\n             let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n-            if is_public && trait_ref_of_method(cx, item.hir_id).is_none() {\n+            if is_public && trait_ref_of_method(cx, item.hir_id()).is_none() {\n                 check_result_unit_err(cx, &sig.decl, item.span, fn_header_span);\n             }\n             let attr = must_use_attr(&item.attrs);\n             if let Some(attr) = attr {\n-                check_needless_must_use(cx, &sig.decl, item.hir_id, item.span, fn_header_span, attr);\n+                check_needless_must_use(cx, &sig.decl, item.hir_id(), item.span, fn_header_span, attr);\n             } else if is_public\n                 && !is_proc_macro(cx.sess(), &item.attrs)\n-                && trait_ref_of_method(cx, item.hir_id).is_none()\n+                && trait_ref_of_method(cx, item.hir_id()).is_none()\n             {\n                 check_must_use_candidate(\n                     cx,\n                     &sig.decl,\n                     cx.tcx.hir().body(*body_id),\n                     item.span,\n-                    item.hir_id,\n+                    item.hir_id(),\n                     item.span.with_hi(sig.decl.output.span().hi()),\n                     \"this method could have a `#[must_use]` attribute\",\n                 );"}, {"sha": "76e7a4992d345c4c57738d2a9636adb3ec582472", "filename": "src/tools/clippy/clippy_lints/src/inherent_to_string.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/786a80e9ea7af4909f67207c542eb02727f74756/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finherent_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786a80e9ea7af4909f67207c542eb02727f74756/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finherent_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finherent_to_string.rs?ref=786a80e9ea7af4909f67207c542eb02727f74756", "patch": "@@ -108,10 +108,10 @@ impl<'tcx> LateLintPass<'tcx> for InherentToString {\n             if decl.inputs.len() == 1;\n \n             // Check if return type is String\n-            if is_type_diagnostic_item(cx, return_ty(cx, impl_item.hir_id), sym::string_type);\n+            if is_type_diagnostic_item(cx, return_ty(cx, impl_item.hir_id()), sym::string_type);\n \n             // Filters instances of to_string which are required by a trait\n-            if trait_ref_of_method(cx, impl_item.hir_id).is_none();\n+            if trait_ref_of_method(cx, impl_item.hir_id()).is_none();\n \n             then {\n                 show_lint(cx, impl_item);\n@@ -124,8 +124,7 @@ fn show_lint(cx: &LateContext<'_>, item: &ImplItem<'_>) {\n     let display_trait_id = get_trait_def_id(cx, &paths::DISPLAY_TRAIT).expect(\"Failed to get trait ID of `Display`!\");\n \n     // Get the real type of 'self'\n-    let fn_def_id = cx.tcx.hir().local_def_id(item.hir_id);\n-    let self_type = cx.tcx.fn_sig(fn_def_id).input(0);\n+    let self_type = cx.tcx.fn_sig(item.def_id).input(0);\n     let self_type = self_type.skip_binder().peel_refs();\n \n     // Emit either a warning or an error"}, {"sha": "dab3e0565cafb30d8dd4e0240a782909355dbb81", "filename": "src/tools/clippy/clippy_lints/src/len_zero.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/786a80e9ea7af4909f67207c542eb02727f74756/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786a80e9ea7af4909f67207c542eb02727f74756/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flen_zero.rs?ref=786a80e9ea7af4909f67207c542eb02727f74756", "patch": "@@ -206,17 +206,14 @@ fn check_impl_items(cx: &LateContext<'_>, item: &Item<'_>, impl_items: &[ImplIte\n     fn is_named_self(cx: &LateContext<'_>, item: &ImplItemRef<'_>, name: &str) -> bool {\n         item.ident.name.as_str() == name\n             && if let AssocItemKind::Fn { has_self } = item.kind {\n-                has_self && {\n-                    let did = cx.tcx.hir().local_def_id(item.id.hir_id);\n-                    cx.tcx.fn_sig(did).inputs().skip_binder().len() == 1\n-                }\n+                has_self && cx.tcx.fn_sig(item.id.def_id).inputs().skip_binder().len() == 1\n             } else {\n                 false\n             }\n     }\n \n     let is_empty = if let Some(is_empty) = impl_items.iter().find(|i| is_named_self(cx, i, \"is_empty\")) {\n-        if cx.access_levels.is_exported(is_empty.id.hir_id) {\n+        if cx.access_levels.is_exported(is_empty.id.hir_id()) {\n             return;\n         }\n         \"a private\"\n@@ -225,7 +222,7 @@ fn check_impl_items(cx: &LateContext<'_>, item: &Item<'_>, impl_items: &[ImplIte\n     };\n \n     if let Some(i) = impl_items.iter().find(|i| is_named_self(cx, i, \"len\")) {\n-        if cx.access_levels.is_exported(i.id.hir_id) {\n+        if cx.access_levels.is_exported(i.id.hir_id()) {\n             let ty = cx.tcx.type_of(item.def_id);\n \n             span_lint("}, {"sha": "50e6383263dd3fd0ec424b32f77e35a9c39e02c8", "filename": "src/tools/clippy/clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/786a80e9ea7af4909f67207c542eb02727f74756/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786a80e9ea7af4909f67207c542eb02727f74756/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flifetimes.rs?ref=786a80e9ea7af4909f67207c542eb02727f74756", "patch": "@@ -87,7 +87,7 @@ impl<'tcx> LateLintPass<'tcx> for Lifetimes {\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx ImplItem<'_>) {\n         if let ImplItemKind::Fn(ref sig, id) = item.kind {\n-            let report_extra_lifetimes = trait_ref_of_method(cx, item.hir_id).is_none();\n+            let report_extra_lifetimes = trait_ref_of_method(cx, item.hir_id()).is_none();\n             check_fn_inner(\n                 cx,\n                 &sig.decl,"}, {"sha": "55660cc95a8e07df19f11a9f928691fb65fed724", "filename": "src/tools/clippy/clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/786a80e9ea7af4909f67207c542eb02727f74756/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786a80e9ea7af4909f67207c542eb02727f74756/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=786a80e9ea7af4909f67207c542eb02727f74756", "patch": "@@ -1685,7 +1685,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             return;\n         }\n         let name = impl_item.ident.name.as_str();\n-        let parent = cx.tcx.hir().get_parent_item(impl_item.hir_id);\n+        let parent = cx.tcx.hir().get_parent_item(impl_item.hir_id());\n         let item = cx.tcx.hir().expect_item(parent);\n         let self_ty = cx.tcx.type_of(item.def_id);\n \n@@ -1698,8 +1698,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             if let hir::ImplItemKind::Fn(ref sig, id) = impl_item.kind;\n             if let Some(first_arg) = iter_input_pats(&sig.decl, cx.tcx.hir().body(id)).next();\n \n-            let method_def_id = cx.tcx.hir().local_def_id(impl_item.hir_id);\n-            let method_sig = cx.tcx.fn_sig(method_def_id);\n+            let method_sig = cx.tcx.fn_sig(impl_item.def_id);\n             let method_sig = cx.tcx.erase_late_bound_regions(method_sig);\n \n             let first_arg_ty = &method_sig.inputs().iter().next();\n@@ -1708,7 +1707,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             if let Some(first_arg_ty) = first_arg_ty;\n \n             then {\n-                if cx.access_levels.is_exported(impl_item.hir_id) {\n+                if cx.access_levels.is_exported(impl_item.hir_id()) {\n                     // check missing trait implementations\n                     for method_config in &TRAIT_METHODS {\n                         if name == method_config.method_name &&\n@@ -1750,7 +1749,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n         }\n \n         if let hir::ImplItemKind::Fn(_, _) = impl_item.kind {\n-            let ret_ty = return_ty(cx, impl_item.hir_id);\n+            let ret_ty = return_ty(cx, impl_item.hir_id());\n \n             // walk the return type and check for Self (this does not check associated types)\n             if contains_ty(ret_ty, self_ty) {"}, {"sha": "761b9261772b2a170fc71f209c325b2918c9036f", "filename": "src/tools/clippy/clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/786a80e9ea7af4909f67207c542eb02727f74756/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786a80e9ea7af4909f67207c542eb02727f74756/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_doc.rs?ref=786a80e9ea7af4909f67207c542eb02727f74756", "patch": "@@ -171,8 +171,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, impl_item: &'tcx hir::ImplItem<'_>) {\n         // If the method is an impl for a trait, don't doc.\n-        let def_id = cx.tcx.hir().local_def_id(impl_item.hir_id);\n-        match cx.tcx.associated_item(def_id).container {\n+        match cx.tcx.associated_item(impl_item.def_id).container {\n             ty::TraitContainer(_) => return,\n             ty::ImplContainer(cid) => {\n                 if cx.tcx.impl_trait_ref(cid).is_some() {\n@@ -181,7 +180,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n             },\n         }\n \n-        let (article, desc) = cx.tcx.article_and_description(def_id.to_def_id());\n+        let (article, desc) = cx.tcx.article_and_description(impl_item.def_id.to_def_id());\n         self.check_missing_docs_attrs(cx, &impl_item.attrs, impl_item.span, article, desc);\n     }\n "}, {"sha": "47d7c5306c4331b45a6f48efeefac69eef59ac65", "filename": "src/tools/clippy/clippy_lints/src/missing_inline.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/786a80e9ea7af4909f67207c542eb02727f74756/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786a80e9ea7af4909f67207c542eb02727f74756/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_inline.rs?ref=786a80e9ea7af4909f67207c542eb02727f74756", "patch": "@@ -138,7 +138,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingInline {\n         }\n \n         // If the item being implemented is not exported, then we don't need #[inline]\n-        if !cx.access_levels.is_exported(impl_item.hir_id) {\n+        if !cx.access_levels.is_exported(impl_item.hir_id()) {\n             return;\n         }\n \n@@ -147,14 +147,13 @@ impl<'tcx> LateLintPass<'tcx> for MissingInline {\n             hir::ImplItemKind::Const(..) | hir::ImplItemKind::TyAlias(_) => return,\n         };\n \n-        let def_id = cx.tcx.hir().local_def_id(impl_item.hir_id);\n-        let trait_def_id = match cx.tcx.associated_item(def_id).container {\n+        let trait_def_id = match cx.tcx.associated_item(impl_item.def_id).container {\n             TraitContainer(cid) => Some(cid),\n             ImplContainer(cid) => cx.tcx.impl_trait_ref(cid).map(|t| t.def_id),\n         };\n \n         if let Some(trait_def_id) = trait_def_id {\n-            if trait_def_id.is_local() && !cx.access_levels.is_exported(impl_item.hir_id) {\n+            if trait_def_id.is_local() && !cx.access_levels.is_exported(impl_item.hir_id()) {\n                 // If a trait is being implemented for an item, and the\n                 // trait is not exported, we don't need #[inline]\n                 return;"}, {"sha": "908b7bb7ce00d13359c619bda5f54d812e89fb95", "filename": "src/tools/clippy/clippy_lints/src/mut_key.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/786a80e9ea7af4909f67207c542eb02727f74756/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786a80e9ea7af4909f67207c542eb02727f74756/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_key.rs?ref=786a80e9ea7af4909f67207c542eb02727f74756", "patch": "@@ -63,8 +63,8 @@ impl<'tcx> LateLintPass<'tcx> for MutableKeyType {\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::ImplItem<'tcx>) {\n         if let hir::ImplItemKind::Fn(ref sig, ..) = item.kind {\n-            if trait_ref_of_method(cx, item.hir_id).is_none() {\n-                check_sig(cx, item.hir_id, &sig.decl);\n+            if trait_ref_of_method(cx, item.hir_id()).is_none() {\n+                check_sig(cx, item.hir_id(), &sig.decl);\n             }\n         }\n     }"}, {"sha": "de2899c3462a4f6f8b71a0a727140c09f93e6232", "filename": "src/tools/clippy/clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/786a80e9ea7af4909f67207c542eb02727f74756/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786a80e9ea7af4909f67207c542eb02727f74756/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnew_without_default.rs?ref=786a80e9ea7af4909f67207c542eb02727f74756", "patch": "@@ -72,7 +72,7 @@ impl<'tcx> LateLintPass<'tcx> for NewWithoutDefault {\n                     }\n                     if let hir::ImplItemKind::Fn(ref sig, _) = impl_item.kind {\n                         let name = impl_item.ident.name;\n-                        let id = impl_item.hir_id;\n+                        let id = impl_item.hir_id();\n                         if sig.header.constness == hir::Constness::Const {\n                             // can't be implemented by default\n                             return;"}, {"sha": "8aebce67917afa1559e16925ced20f8f16238bf7", "filename": "src/tools/clippy/clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/786a80e9ea7af4909f67207c542eb02727f74756/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786a80e9ea7af4909f67207c542eb02727f74756/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=786a80e9ea7af4909f67207c542eb02727f74756", "patch": "@@ -271,7 +271,7 @@ impl<'tcx> LateLintPass<'tcx> for NonCopyConst {\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, impl_item: &'tcx ImplItem<'_>) {\n         if let ImplItemKind::Const(hir_ty, body_id) = &impl_item.kind {\n-            let item_hir_id = cx.tcx.hir().get_parent_node(impl_item.hir_id);\n+            let item_hir_id = cx.tcx.hir().get_parent_node(impl_item.hir_id());\n             let item = cx.tcx.hir().expect_item(item_hir_id);\n \n             match &item.kind {"}, {"sha": "3d6129aa78d4c47d71d832eb4b76d803fdc90c2d", "filename": "src/tools/clippy/clippy_lints/src/partialeq_ne_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/786a80e9ea7af4909f67207c542eb02727f74756/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786a80e9ea7af4909f67207c542eb02727f74756/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs?ref=786a80e9ea7af4909f67207c542eb02727f74756", "patch": "@@ -44,7 +44,7 @@ impl<'tcx> LateLintPass<'tcx> for PartialEqNeImpl {\n                         span_lint_hir(\n                             cx,\n                             PARTIALEQ_NE_IMPL,\n-                            impl_item.id.hir_id,\n+                            impl_item.id.hir_id(),\n                             impl_item.span,\n                             \"re-implementing `PartialEq::ne` is unnecessary\",\n                         );"}, {"sha": "de2fb8decb7150c42c53320715850be09d6a1033", "filename": "src/tools/clippy/clippy_lints/src/ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/786a80e9ea7af4909f67207c542eb02727f74756/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786a80e9ea7af4909f67207c542eb02727f74756/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs?ref=786a80e9ea7af4909f67207c542eb02727f74756", "patch": "@@ -130,13 +130,13 @@ impl<'tcx> LateLintPass<'tcx> for Ptr {\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx ImplItem<'_>) {\n         if let ImplItemKind::Fn(ref sig, body_id) = item.kind {\n-            let parent_item = cx.tcx.hir().get_parent_item(item.hir_id);\n+            let parent_item = cx.tcx.hir().get_parent_item(item.hir_id());\n             if let Some(Node::Item(it)) = cx.tcx.hir().find(parent_item) {\n                 if let ItemKind::Impl(Impl { of_trait: Some(_), .. }) = it.kind {\n                     return; // ignore trait impls\n                 }\n             }\n-            check_fn(cx, &sig.decl, item.hir_id, Some(body_id));\n+            check_fn(cx, &sig.decl, item.hir_id(), Some(body_id));\n         }\n     }\n "}, {"sha": "73c64b808405819239ca856976b32c61469e57b8", "filename": "src/tools/clippy/clippy_lints/src/unused_self.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/786a80e9ea7af4909f67207c542eb02727f74756/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786a80e9ea7af4909f67207c542eb02727f74756/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_self.rs?ref=786a80e9ea7af4909f67207c542eb02727f74756", "patch": "@@ -44,10 +44,9 @@ impl<'tcx> LateLintPass<'tcx> for UnusedSelf {\n         if impl_item.span.from_expansion() {\n             return;\n         }\n-        let parent = cx.tcx.hir().get_parent_item(impl_item.hir_id);\n+        let parent = cx.tcx.hir().get_parent_item(impl_item.hir_id());\n         let parent_item = cx.tcx.hir().expect_item(parent);\n-        let def_id = cx.tcx.hir().local_def_id(impl_item.hir_id);\n-        let assoc_item = cx.tcx.associated_item(def_id);\n+        let assoc_item = cx.tcx.associated_item(impl_item.def_id);\n         if_chain! {\n             if let ItemKind::Impl(Impl { of_trait: None, .. }) = parent_item.kind;\n             if assoc_item.fn_has_self_parameter;"}, {"sha": "8cb7429849da65bf207d9221c5f6805f5aecd17b", "filename": "src/tools/clippy/clippy_lints/src/unwrap_in_result.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/786a80e9ea7af4909f67207c542eb02727f74756/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funwrap_in_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786a80e9ea7af4909f67207c542eb02727f74756/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funwrap_in_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funwrap_in_result.rs?ref=786a80e9ea7af4909f67207c542eb02727f74756", "patch": "@@ -57,8 +57,8 @@ impl<'tcx> LateLintPass<'tcx> for UnwrapInResult {\n             // first check if it's a method or function\n             if let hir::ImplItemKind::Fn(ref _signature, _) = impl_item.kind;\n             // checking if its return type is `result` or `option`\n-            if is_type_diagnostic_item(cx, return_ty(cx, impl_item.hir_id), sym::result_type)\n-                || is_type_diagnostic_item(cx, return_ty(cx, impl_item.hir_id), sym::option_type);\n+            if is_type_diagnostic_item(cx, return_ty(cx, impl_item.hir_id()), sym::result_type)\n+                || is_type_diagnostic_item(cx, return_ty(cx, impl_item.hir_id()), sym::option_type);\n             then {\n                 lint_impl_body(cx, impl_item.span, impl_item);\n             }\n@@ -114,10 +114,9 @@ fn lint_impl_body<'tcx>(cx: &LateContext<'tcx>, impl_span: Span, impl_item: &'tc\n         if let ImplItemKind::Fn(_, body_id) = impl_item.kind;\n         then {\n             let body = cx.tcx.hir().body(body_id);\n-            let impl_item_def_id = cx.tcx.hir().local_def_id(impl_item.hir_id);\n             let mut fpu = FindExpectUnwrap {\n                 lcx: cx,\n-                typeck_results: cx.tcx.typeck(impl_item_def_id),\n+                typeck_results: cx.tcx.typeck(impl_item.def_id),\n                 result: Vec::new(),\n             };\n             fpu.visit_expr(&body.value);"}]}