{"sha": "b3c28dba830fb7c88133a0a402f02a5dff9d0738", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzYzI4ZGJhODMwZmI3Yzg4MTMzYTBhNDAyZjAyYTVkZmY5ZDA3Mzg=", "commit": {"author": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2019-03-01T18:20:57Z"}, "committer": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2019-03-04T17:19:30Z"}, "message": "Expose ModifiedLines and implement parsing data from the string output\n\nThis moves `Modified{Chunks,Lines}` from `src/formatting.rs` to\n`src/rustfmt_diff.rs` and reexports it in `src/lib.rs`.\n\nWith this, a conversion from `Vec<Mismatch>` to `ModifiedLines` was implemented\nand now this implements complementary `Display` and `FromStr`, which\nsimplified the previously used `output_modified` function and which allows to\nparse the raw data emitted with `EmitMode::ModifiedLines`.", "tree": {"sha": "9e9c13fa33180f6b3d9903dac3b88b3b689e452d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e9c13fa33180f6b3d9903dac3b88b3b689e452d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3c28dba830fb7c88133a0a402f02a5dff9d0738", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3c28dba830fb7c88133a0a402f02a5dff9d0738", "html_url": "https://github.com/rust-lang/rust/commit/b3c28dba830fb7c88133a0a402f02a5dff9d0738", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3c28dba830fb7c88133a0a402f02a5dff9d0738/comments", "author": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0437bf7a7d968af885dc05931e4e7d1eaddaadbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/0437bf7a7d968af885dc05931e4e7d1eaddaadbf", "html_url": "https://github.com/rust-lang/rust/commit/0437bf7a7d968af885dc05931e4e7d1eaddaadbf"}], "stats": {"total": 213, "additions": 150, "deletions": 63}, "files": [{"sha": "9ec887ebbdff17ccfe626bea40de63ea2d6c0653", "filename": "src/formatting.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b3c28dba830fb7c88133a0a402f02a5dff9d0738/src%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3c28dba830fb7c88133a0a402f02a5dff9d0738/src%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformatting.rs?ref=b3c28dba830fb7c88133a0a402f02a5dff9d0738", "patch": "@@ -338,25 +338,6 @@ impl ReportedErrors {\n     }\n }\n \n-/// A single span of changed lines, with 0 or more removed lines\n-/// and a vector of 0 or more inserted lines.\n-#[derive(Debug, PartialEq, Eq)]\n-pub(crate) struct ModifiedChunk {\n-    /// The first to be removed from the original text\n-    pub line_number_orig: u32,\n-    /// The number of lines which have been replaced\n-    pub lines_removed: u32,\n-    /// The new lines\n-    pub lines: Vec<String>,\n-}\n-\n-/// Set of changed sections of a file.\n-#[derive(Debug, PartialEq, Eq)]\n-pub(crate) struct ModifiedLines {\n-    /// The set of changed chunks.\n-    pub chunks: Vec<ModifiedChunk>,\n-}\n-\n #[derive(Clone, Copy, Debug)]\n enum Timer {\n     Disabled,"}, {"sha": "53e74210ede764d5f7e56f018ce8d2ac77fb2b94", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3c28dba830fb7c88133a0a402f02a5dff9d0738/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3c28dba830fb7c88133a0a402f02a5dff9d0738/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=b3c28dba830fb7c88133a0a402f02a5dff9d0738", "patch": "@@ -33,7 +33,7 @@ pub use crate::config::{\n     Range, Verbosity,\n };\n \n-pub use crate::rustfmt_diff::make_diff;\n+pub use crate::rustfmt_diff::{ModifiedChunk, ModifiedLines};\n \n #[macro_use]\n mod utils;"}, {"sha": "c796db09c87439d5e41ef4c426d54f53c23599ed", "filename": "src/rustfmt_diff.rs", "status": "modified", "additions": 145, "deletions": 39, "changes": 184, "blob_url": "https://github.com/rust-lang/rust/blob/b3c28dba830fb7c88133a0a402f02a5dff9d0738/src%2Frustfmt_diff.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3c28dba830fb7c88133a0a402f02a5dff9d0738/src%2Frustfmt_diff.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustfmt_diff.rs?ref=b3c28dba830fb7c88133a0a402f02a5dff9d0738", "patch": "@@ -1,4 +1,5 @@\n use std::collections::VecDeque;\n+use std::fmt;\n use std::io;\n use std::io::Write;\n \n@@ -33,6 +34,118 @@ impl Mismatch {\n     }\n }\n \n+/// A single span of changed lines, with 0 or more removed lines\n+/// and a vector of 0 or more inserted lines.\n+#[derive(Debug, PartialEq, Eq)]\n+pub struct ModifiedChunk {\n+    /// The first to be removed from the original text\n+    pub line_number_orig: u32,\n+    /// The number of lines which have been replaced\n+    pub lines_removed: u32,\n+    /// The new lines\n+    pub lines: Vec<String>,\n+}\n+\n+/// Set of changed sections of a file.\n+#[derive(Debug, PartialEq, Eq)]\n+pub struct ModifiedLines {\n+    /// The set of changed chunks.\n+    pub chunks: Vec<ModifiedChunk>,\n+}\n+\n+impl From<Vec<Mismatch>> for ModifiedLines {\n+    fn from(mismatches: Vec<Mismatch>) -> ModifiedLines {\n+        let chunks = mismatches.into_iter().map(|mismatch| {\n+            let lines = || mismatch.lines.iter();\n+            let num_removed = lines()\n+                .filter(|line| match line {\n+                    DiffLine::Resulting(_) => true,\n+                    _ => false,\n+                })\n+                .count();\n+\n+            let new_lines = mismatch.lines.into_iter().filter_map(|line| match line {\n+                DiffLine::Context(_) | DiffLine::Resulting(_) => None,\n+                DiffLine::Expected(str) => Some(str),\n+            });\n+\n+            ModifiedChunk {\n+                line_number_orig: mismatch.line_number_orig,\n+                lines_removed: num_removed as u32,\n+                lines: new_lines.collect(),\n+            }\n+        });\n+\n+        ModifiedLines {\n+            chunks: chunks.collect(),\n+        }\n+    }\n+}\n+\n+// Converts a `Mismatch` into a serialized form, which just includes\n+// enough information to modify the original file.\n+// Each section starts with a line with three integers, space separated:\n+//     lineno num_removed num_added\n+// followed by (`num_added`) lines of added text. The line numbers are\n+// relative to the original file.\n+impl fmt::Display for ModifiedLines {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        for chunk in &self.chunks {\n+            writeln!(\n+                f,\n+                \"{} {} {}\",\n+                chunk.line_number_orig,\n+                chunk.lines_removed,\n+                chunk.lines.iter().count()\n+            )?;\n+\n+            for line in &chunk.lines {\n+                writeln!(f, \"{}\", line)?;\n+            }\n+        }\n+\n+        Ok(())\n+    }\n+}\n+\n+// Allows to convert `Display`ed `ModifiedLines` back to the structural data.\n+impl std::str::FromStr for ModifiedLines {\n+    type Err = ();\n+\n+    fn from_str(s: &str) -> Result<ModifiedLines, ()> {\n+        let mut chunks = vec![];\n+\n+        let mut lines = s.lines();\n+        while let Some(header) = lines.next() {\n+            let mut header = header.split_whitespace();\n+            let (orig, rem, new_lines) = match (header.next(), header.next(), header.next()) {\n+                (Some(orig), Some(removed), Some(added)) => (orig, removed, added),\n+                _ => return Err(()),\n+            };\n+            eprintln!(\"{} {} {}\", orig, rem, new_lines);\n+            let (orig, rem, new_lines): (u32, u32, usize) =\n+                match (orig.parse(), rem.parse(), new_lines.parse()) {\n+                    (Ok(a), Ok(b), Ok(c)) => (a, b, c),\n+                    _ => return Err(()),\n+                };\n+            eprintln!(\"{} {} {}\", orig, rem, new_lines);\n+            let lines = lines.by_ref().take(new_lines);\n+            let lines: Vec<_> = lines.map(ToOwned::to_owned).collect();\n+            if lines.len() != new_lines {\n+                return Err(());\n+            }\n+\n+            chunks.push(ModifiedChunk {\n+                line_number_orig: orig,\n+                lines_removed: rem,\n+                lines,\n+            });\n+        }\n+\n+        Ok(ModifiedLines { chunks })\n+    }\n+}\n+\n // This struct handles writing output to stdout and abstracts away the logic\n // of printing in color, if it's possible in the executing environment.\n pub struct OutputWriter {\n@@ -174,49 +287,11 @@ where\n     }\n }\n \n-/// Converts a `Mismatch` into a serialized form, which just includes\n-/// enough information to modify the original file.\n-/// Each section starts with a line with three integers, space separated:\n-///     lineno num_removed num_added\n-/// followed by (`num_added`) lines of added text. The line numbers are\n-/// relative to the original file.\n-pub fn output_modified<W>(mut out: W, diff: Vec<Mismatch>)\n-where\n-    W: Write,\n-{\n-    for mismatch in diff {\n-        let (num_removed, num_added) =\n-            mismatch\n-                .lines\n-                .iter()\n-                .fold((0, 0), |(rem, add), line| match *line {\n-                    DiffLine::Context(_) => panic!(\"No Context expected\"),\n-                    DiffLine::Expected(_) => (rem, add + 1),\n-                    DiffLine::Resulting(_) => (rem + 1, add),\n-                });\n-        // Write a header with enough information to separate the modified lines.\n-        writeln!(\n-            out,\n-            \"{} {} {}\",\n-            mismatch.line_number_orig, num_removed, num_added\n-        )\n-        .unwrap();\n-\n-        for line in mismatch.lines {\n-            match line {\n-                DiffLine::Context(_) | DiffLine::Resulting(_) => (),\n-                DiffLine::Expected(ref str) => {\n-                    writeln!(out, \"{}\", str).unwrap();\n-                }\n-            }\n-        }\n-    }\n-}\n-\n #[cfg(test)]\n mod test {\n     use super::DiffLine::*;\n     use super::{make_diff, Mismatch};\n+    use super::{ModifiedChunk, ModifiedLines};\n \n     #[test]\n     fn diff_simple() {\n@@ -298,4 +373,35 @@ mod test {\n             }]\n         );\n     }\n+\n+    #[test]\n+    fn modified_lines_from_str() {\n+        use std::str::FromStr;\n+\n+        let src = \"1 6 2\\nfn some() {}\\nfn main() {}\\n25 3 1\\n  struct Test {}\";\n+        let lines = ModifiedLines::from_str(src).unwrap();\n+        assert_eq!(\n+            lines,\n+            ModifiedLines {\n+                chunks: vec![\n+                    ModifiedChunk {\n+                        line_number_orig: 1,\n+                        lines_removed: 6,\n+                        lines: vec![\"fn some() {}\".to_owned(), \"fn main() {}\".to_owned(),]\n+                    },\n+                    ModifiedChunk {\n+                        line_number_orig: 25,\n+                        lines_removed: 3,\n+                        lines: vec![\"  struct Test {}\".to_owned()]\n+                    }\n+                ]\n+            }\n+        );\n+\n+        let src = \"1 5 3\";\n+        assert_eq!(ModifiedLines::from_str(src), Err(()));\n+\n+        let src = \"1 5 3\\na\\nb\";\n+        assert_eq!(ModifiedLines::from_str(src), Err(()));\n+    }\n }"}, {"sha": "a779c4dfbe27f23bbda393400c44283356d2cae8", "filename": "src/source_file.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3c28dba830fb7c88133a0a402f02a5dff9d0738/src%2Fsource_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3c28dba830fb7c88133a0a402f02a5dff9d0738/src%2Fsource_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsource_file.rs?ref=b3c28dba830fb7c88133a0a402f02a5dff9d0738", "patch": "@@ -6,7 +6,7 @@ use syntax::source_map::SourceMap;\n \n use crate::checkstyle::output_checkstyle_file;\n use crate::config::{Config, EmitMode, FileName, Verbosity};\n-use crate::rustfmt_diff::{make_diff, output_modified, print_diff};\n+use crate::rustfmt_diff::{make_diff, print_diff, ModifiedLines};\n \n #[cfg(test)]\n use crate::formatting::FileRecord;\n@@ -107,7 +107,7 @@ where\n         EmitMode::ModifiedLines => {\n             let mismatch = make_diff(&original_text, formatted_text, 0);\n             let has_diff = !mismatch.is_empty();\n-            output_modified(out, mismatch);\n+            write!(out, \"{}\", ModifiedLines::from(mismatch))?;\n             return Ok(has_diff);\n         }\n         EmitMode::Checkstyle => {"}, {"sha": "24772d70c16f39db59775d74d27e0e57cceafe82", "filename": "src/test/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3c28dba830fb7c88133a0a402f02a5dff9d0738/src%2Ftest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3c28dba830fb7c88133a0a402f02a5dff9d0738/src%2Ftest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmod.rs?ref=b3c28dba830fb7c88133a0a402f02a5dff9d0738", "patch": "@@ -9,8 +9,8 @@ use std::process::{Command, Stdio};\n use std::str::Chars;\n \n use crate::config::{Color, Config, EmitMode, FileName, ReportTactic};\n-use crate::formatting::{ModifiedChunk, ReportedErrors, SourceFile};\n-use crate::rustfmt_diff::{make_diff, print_diff, DiffLine, Mismatch, OutputWriter};\n+use crate::formatting::{ReportedErrors, SourceFile};\n+use crate::rustfmt_diff::{make_diff, print_diff, DiffLine, Mismatch, ModifiedChunk, OutputWriter};\n use crate::source_file;\n use crate::{FormatReport, Input, Session};\n "}]}