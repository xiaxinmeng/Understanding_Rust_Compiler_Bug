{"sha": "f2f4a5c8621811c81d98f567e2505017aea94bce", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyZjRhNWM4NjIxODExYzgxZDk4ZjU2N2UyNTA1MDE3YWVhOTRiY2U=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2015-08-09T21:38:04Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2015-08-11T16:44:39Z"}, "message": "Add HashSet and HashMap tests", "tree": {"sha": "ee5e12ddc20b2579ee7940321551af7c9574e139", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee5e12ddc20b2579ee7940321551af7c9574e139"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2f4a5c8621811c81d98f567e2505017aea94bce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2f4a5c8621811c81d98f567e2505017aea94bce", "html_url": "https://github.com/rust-lang/rust/commit/f2f4a5c8621811c81d98f567e2505017aea94bce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2f4a5c8621811c81d98f567e2505017aea94bce/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4e4233828f0a8cb30278245d53dcb25b2e26a01", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4e4233828f0a8cb30278245d53dcb25b2e26a01", "html_url": "https://github.com/rust-lang/rust/commit/a4e4233828f0a8cb30278245d53dcb25b2e26a01"}], "stats": {"total": 48, "additions": 22, "deletions": 26}, "files": [{"sha": "fb594dadd738be984f61bee7f4cce4b0545644e1", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f2f4a5c8621811c81d98f567e2505017aea94bce/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2f4a5c8621811c81d98f567e2505017aea94bce/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=f2f4a5c8621811c81d98f567e2505017aea94bce", "patch": "@@ -11,7 +11,7 @@\n use borrow::Borrow;\n use clone::Clone;\n use cmp::{Eq, PartialEq};\n-use core::marker::{Sized, Send, Sync};\n+use core::marker::Sized;\n use default::Default;\n use fmt::Debug;\n use fmt;\n@@ -764,27 +764,18 @@ pub struct Iter<'a, K: 'a> {\n     iter: Keys<'a, K, ()>\n }\n \n-unsafe impl<'a, K: Send> Send for Iter<'a, K> {}\n-unsafe impl<'a, K: Sync> Sync for Iter<'a, K> {}\n-\n /// HashSet move iterator\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IntoIter<K> {\n     iter: Map<map::IntoIter<K, ()>, fn((K, ())) -> K>\n }\n \n-unsafe impl<K: Send> Send for IntoIter<K> {}\n-unsafe impl<K: Sync> Sync for IntoIter<K> {}\n-\n /// HashSet drain iterator\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Drain<'a, K: 'a> {\n     iter: Map<map::Drain<'a, K, ()>, fn((K, ())) -> K>,\n }\n \n-unsafe impl<'a, K: Send> Send for Drain<'a, K> {}\n-unsafe impl<'a, K: Sync> Sync for Drain<'a, K> {}\n-\n /// Intersection iterator\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Intersection<'a, T: 'a, S: 'a> {\n@@ -794,9 +785,6 @@ pub struct Intersection<'a, T: 'a, S: 'a> {\n     other: &'a HashSet<T, S>,\n }\n \n-unsafe impl<'a, K: Send, S: Send> Send for Intersection<'a, K, S> {}\n-unsafe impl<'a, K: Sync, S: Send> Sync for Intersection<'a, K, S> {}\n-\n /// Difference iterator\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Difference<'a, T: 'a, S: 'a> {\n@@ -806,27 +794,18 @@ pub struct Difference<'a, T: 'a, S: 'a> {\n     other: &'a HashSet<T, S>,\n }\n \n-unsafe impl<'a, K: Send, S: Send> Send for Difference<'a, K, S> {}\n-unsafe impl<'a, K: Sync, S: Send> Sync for Difference<'a, K, S> {}\n-\n /// Symmetric difference iterator.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct SymmetricDifference<'a, T: 'a, S: 'a> {\n     iter: Chain<Difference<'a, T, S>, Difference<'a, T, S>>\n }\n \n-unsafe impl<'a, K: Send, S: Send> Send for SymmetricDifference<'a, K, S> {}\n-unsafe impl<'a, K: Sync, S: Send> Sync for SymmetricDifference<'a, K, S> {}\n-\n /// Set union iterator.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Union<'a, T: 'a, S: 'a> {\n     iter: Chain<Iter<'a, T>, Difference<'a, T, S>>\n }\n \n-unsafe impl<'a, K: Send, S: Send> Send for Union<'a, K, S> {}\n-unsafe impl<'a, K: Sync, S: Send> Sync for Union<'a, K, S> {}\n-\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T, S> IntoIterator for &'a HashSet<T, S>\n     where T: Eq + Hash, S: HashState"}, {"sha": "8a822057bbff7f037bed645f334bdf4a076e40ae", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f2f4a5c8621811c81d98f567e2505017aea94bce/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2f4a5c8621811c81d98f567e2505017aea94bce/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=f2f4a5c8621811c81d98f567e2505017aea94bce", "patch": "@@ -741,9 +741,6 @@ struct RawBuckets<'a, K, V> {\n     marker: marker::PhantomData<&'a ()>,\n }\n \n-unsafe impl<'a, K: Send, V: Send> Send for RawBuckets<'a, K, V> {}\n-unsafe impl<'a, K: Sync, V: Sync> Sync for RawBuckets<'a, K, V> {}\n-\n // FIXME(#19839) Remove in favor of `#[derive(Clone)]`\n impl<'a, K, V> Clone for RawBuckets<'a, K, V> {\n     fn clone(&self) -> RawBuckets<'a, K, V> {\n@@ -821,6 +818,9 @@ pub struct Iter<'a, K: 'a, V: 'a> {\n     elems_left: usize,\n }\n \n+unsafe impl<'a, K: Sync, V: Sync> Sync for Iter<'a, K, V> {}\n+unsafe impl<'a, K: Sync, V: Sync> Send for Iter<'a, K, V> {}\n+\n // FIXME(#19839) Remove in favor of `#[derive(Clone)]`\n impl<'a, K, V> Clone for Iter<'a, K, V> {\n     fn clone(&self) -> Iter<'a, K, V> {\n@@ -838,18 +838,29 @@ pub struct IterMut<'a, K: 'a, V: 'a> {\n     elems_left: usize,\n }\n \n+unsafe impl<'a, K: Sync, V: Sync> Sync for IterMut<'a, K, V> {}\n+// Both K: Sync and K: Send are correct for IterMut's Send impl,\n+// but Send is the more useful bound\n+unsafe impl<'a, K: Send, V: Send> Send for IterMut<'a, K, V> {}\n+\n /// Iterator over the entries in a table, consuming the table.\n pub struct IntoIter<K, V> {\n     table: RawTable<K, V>,\n     iter: RawBuckets<'static, K, V>\n }\n \n+unsafe impl<K: Sync, V: Sync> Sync for IntoIter<K, V> {}\n+unsafe impl<K: Send, V: Send> Send for IntoIter<K, V> {}\n+\n /// Iterator over the entries in a table, clearing the table.\n pub struct Drain<'a, K: 'a, V: 'a> {\n     table: &'a mut RawTable<K, V>,\n     iter: RawBuckets<'static, K, V>,\n }\n \n+unsafe impl<'a, K: Sync, V: Sync> Sync for Drain<'a, K, V> {}\n+unsafe impl<'a, K: Send, V: Send> Send for Drain<'a, K, V> {}\n+\n impl<'a, K, V> Iterator for Iter<'a, K, V> {\n     type Item = (&'a K, &'a V);\n "}, {"sha": "cdfc4d32027bb1220f96e5a1d9a13fc2d7675411", "filename": "src/test/run-pass/sync-send-iterators-in-libcollections.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2f4a5c8621811c81d98f567e2505017aea94bce/src%2Ftest%2Frun-pass%2Fsync-send-iterators-in-libcollections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2f4a5c8621811c81d98f567e2505017aea94bce/src%2Ftest%2Frun-pass%2Fsync-send-iterators-in-libcollections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsync-send-iterators-in-libcollections.rs?ref=f2f4a5c8621811c81d98f567e2505017aea94bce", "patch": "@@ -26,6 +26,7 @@ use collections::Vec;\n use collections::VecDeque;\n use collections::VecMap;\n use std::collections::HashMap;\n+use std::collections::HashSet;\n \n use collections::Bound::Included;\n use collections::enum_set::CLike;\n@@ -78,7 +79,12 @@ fn main() {\n     is_sync_send!(BTreeSet::<usize>::new(), intersection(&BTreeSet::<usize>::new()));\n     is_sync_send!(BTreeSet::<usize>::new(), union(&BTreeSet::<usize>::new()));\n \n-    all_sync_send!(HashMap::<usize, usize>::new(), keys, values, iter, iter_mut);\n+    all_sync_send!(HashMap::<usize, usize>::new(), iter, iter_mut, drain, into_iter, keys, values);\n+    all_sync_send!(HashSet::<usize>::new(), iter, drain, into_iter);\n+    is_sync_send!(HashSet::<usize>::new(), difference(&HashSet::<usize>::new()));\n+    is_sync_send!(HashSet::<usize>::new(), symmetric_difference(&HashSet::<usize>::new()));\n+    is_sync_send!(HashSet::<usize>::new(), intersection(&HashSet::<usize>::new()));\n+    is_sync_send!(HashSet::<usize>::new(), union(&HashSet::<usize>::new()));\n \n     all_sync_send!(LinkedList::<usize>::new(), iter, iter_mut, into_iter);\n "}]}