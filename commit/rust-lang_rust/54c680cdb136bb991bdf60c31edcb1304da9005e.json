{"sha": "54c680cdb136bb991bdf60c31edcb1304da9005e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0YzY4MGNkYjEzNmJiOTkxYmRmNjBjMzFlZGNiMTMwNGRhOTAwNWU=", "commit": {"author": {"name": "Keegan McAllister", "email": "mcallister.keegan@gmail.com", "date": "2016-09-10T17:47:05Z"}, "committer": {"name": "Keegan McAllister", "email": "mcallister.keegan@gmail.com", "date": "2016-09-11T19:36:24Z"}, "message": "Tweak array docs\n\nFixes #29331.", "tree": {"sha": "17a12533591f22b5d4e5d6f21ff4ffc528537ca3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17a12533591f22b5d4e5d6f21ff4ffc528537ca3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54c680cdb136bb991bdf60c31edcb1304da9005e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54c680cdb136bb991bdf60c31edcb1304da9005e", "html_url": "https://github.com/rust-lang/rust/commit/54c680cdb136bb991bdf60c31edcb1304da9005e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54c680cdb136bb991bdf60c31edcb1304da9005e/comments", "author": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1fca1ab0e7be574022b2d229f0a6ad9bd580d1bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fca1ab0e7be574022b2d229f0a6ad9bd580d1bf", "html_url": "https://github.com/rust-lang/rust/commit/1fca1ab0e7be574022b2d229f0a6ad9bd580d1bf"}], "stats": {"total": 86, "additions": 65, "deletions": 21}, "files": [{"sha": "fdc84467015f90ca970796252524e6be03b6c537", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 65, "deletions": 21, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/54c680cdb136bb991bdf60c31edcb1304da9005e/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54c680cdb136bb991bdf60c31edcb1304da9005e/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=54c680cdb136bb991bdf60c31edcb1304da9005e", "patch": "@@ -249,37 +249,58 @@ mod prim_pointer { }\n #[doc(primitive = \"array\")]\n //\n /// A fixed-size array, denoted `[T; N]`, for the element type, `T`, and the\n-/// non-negative compile time constant size, `N`.\n+/// non-negative compile-time constant size, `N`.\n ///\n-/// Arrays values are created either with an explicit expression that lists\n-/// each element: `[x, y, z]` or a repeat expression: `[x; N]`. The repeat\n-/// expression requires that the element type is `Copy`.\n+/// There are two syntactic forms for creating an array:\n ///\n-/// The type `[T; N]` is `Copy` if `T: Copy`.\n+/// * A list with each element, i.e. `[x, y, z]`.\n+/// * A repeat expression `[x; N]`, which produces an array with `N` copies of `x`.\n+///   The type of `x` must be [`Copy`][copy].\n ///\n /// Arrays of sizes from 0 to 32 (inclusive) implement the following traits if\n /// the element type allows it:\n ///\n-/// - `Clone` (only if `T: Copy`)\n-/// - `Debug`\n-/// - `IntoIterator` (implemented for `&[T; N]` and `&mut [T; N]`)\n-/// - `PartialEq`, `PartialOrd`, `Ord`, `Eq`\n-/// - `Hash`\n-/// - `AsRef`, `AsMut`\n-/// - `Borrow`, `BorrowMut`\n-/// - `Default`\n-///\n-/// This limitation to `N in 0..33` exists because Rust does not yet support\n-/// generics over the size of an array type. `[Foo; 3]` and `[Bar; 3]` are\n-/// instances of same generic type `[T; 3]`, but `[Foo; 3]` and `[Foo; 5]` are\n+/// - [`Clone`][clone] (only if `T: Copy`)\n+/// - [`Debug`][debug]\n+/// - [`IntoIterator`][intoiterator] (implemented for `&[T; N]` and `&mut [T; N]`)\n+/// - [`PartialEq`][partialeq], [`PartialOrd`][partialord], [`Eq`][eq], [`Ord`][ord]\n+/// - [`Hash`][hash]\n+/// - [`AsRef`][asref], [`AsMut`][asmut]\n+/// - [`Borrow`][borrow], [`BorrowMut`][borrowmut]\n+/// - [`Default`][default]\n+///\n+/// This limitation on the size `N` exists because Rust does not yet support\n+/// code that is generic over the size of an array type. `[Foo; 3]` and `[Bar; 3]`\n+/// are instances of same generic type `[T; 3]`, but `[Foo; 3]` and `[Foo; 5]` are\n /// entirely different types. As a stopgap, trait implementations are\n-/// statically generated for `N in 0..33`.\n+/// statically generated up to size 32.\n ///\n-/// Arrays coerce to [slices (`[T]`)][slice], so their methods can be called on\n-/// arrays. Slices are dynamic and do not coerce to arrays; consequently more\n-/// methods are defined on `slice` where they support both types.\n+/// Arrays of *any* size are [`Copy`][copy] if the element type is `Copy`. This\n+/// works because the `Copy` trait is specially known to the compiler.\n+///\n+/// Arrays coerce to [slices (`[T]`)][slice], so a slice method may be called on\n+/// an array. Indeed, this provides most of the API for working with arrays.\n+/// Slices have a dynamic size and do not coerce to arrays.\n+///\n+/// There is no way to move elements out of an array. See [`mem::replace`][replace]\n+/// for an alternative.\n ///\n /// [slice]: primitive.slice.html\n+/// [copy]: marker/trait.Copy.html\n+/// [clone]: clone/trait.Clone.html\n+/// [debug]: fmt/trait.Debug.html\n+/// [intoiterator]: iter/trait.IntoIterator.html\n+/// [partialeq]: cmp/trait.PartialEq.html\n+/// [partialord]: cmp/trait.PartialOrd.html\n+/// [eq]: cmp/trait.Eq.html\n+/// [ord]: cmp/trait.Ord.html\n+/// [hash]: hash/trait.Hash.html\n+/// [asref]: convert/trait.AsRef.html\n+/// [asmut]: convert/trait.AsMut.html\n+/// [borrow]: borrow/trait.Borrow.html\n+/// [borrowmut]: borrow/trait.BorrowMut.html\n+/// [default]: default/trait.Default.html\n+/// [replace]: mem/fn.replace.html\n ///\n /// # Examples\n ///\n@@ -295,7 +316,30 @@ mod prim_pointer { }\n /// for x in &array {\n ///     print!(\"{} \", x);\n /// }\n+/// ```\n+///\n+/// An array itself is not iterable:\n+///\n+/// ```ignore\n+/// let array: [i32; 3] = [0; 3];\n+///\n+/// for x in array { }\n+/// // error: the trait bound `[i32; 3]: std::iter::Iterator` is not satisfied\n+/// ```\n ///\n+/// The solution is to coerce the array to a slice by calling a slice method:\n+///\n+/// ```\n+/// # let array: [i32; 3] = [0; 3];\n+/// for x in array.iter() { }\n+/// ```\n+///\n+/// If the array has 32 or fewer elements (see above), you can also use the\n+/// array reference's `IntoIterator` implementation:\n+///\n+/// ```\n+/// # let array: [i32; 3] = [0; 3];\n+/// for x in &array { }\n /// ```\n ///\n mod prim_array { }"}]}