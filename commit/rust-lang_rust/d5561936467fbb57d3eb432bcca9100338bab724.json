{"sha": "d5561936467fbb57d3eb432bcca9100338bab724", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1NTYxOTM2NDY3ZmJiNTdkM2ViNDMyYmNjYTkxMDAzMzhiYWI3MjQ=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-09-26T17:45:10Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-09-26T17:45:10Z"}, "message": "Rename `PatternContext` to `PatCtxt`", "tree": {"sha": "597ee42c7c103f60090e931e37b033e4fd050b00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/597ee42c7c103f60090e931e37b033e4fd050b00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5561936467fbb57d3eb432bcca9100338bab724", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5561936467fbb57d3eb432bcca9100338bab724", "html_url": "https://github.com/rust-lang/rust/commit/d5561936467fbb57d3eb432bcca9100338bab724", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5561936467fbb57d3eb432bcca9100338bab724/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fbc211fbda14d3e929921789ae3b518308204d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fbc211fbda14d3e929921789ae3b518308204d5", "html_url": "https://github.com/rust-lang/rust/commit/5fbc211fbda14d3e929921789ae3b518308204d5"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "bffe0be3968557059bdc03e5e973e669cb34d62c", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d5561936467fbb57d3eb432bcca9100338bab724/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5561936467fbb57d3eb432bcca9100338bab724/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=d5561936467fbb57d3eb432bcca9100338bab724", "patch": "@@ -476,7 +476,7 @@ pub enum WitnessPreference {\n }\n \n #[derive(Copy, Clone, Debug)]\n-struct PatternContext<'tcx> {\n+struct PatCtxt<'tcx> {\n     ty: Ty<'tcx>,\n     max_slice_length: u64,\n }\n@@ -636,7 +636,7 @@ impl<'tcx> Witness<'tcx> {\n /// `Option<!>`, we do not include `Some(_)` in the returned list of constructors.\n fn all_constructors<'a, 'tcx>(\n     cx: &mut MatchCheckCtxt<'a, 'tcx>,\n-    pcx: PatternContext<'tcx>,\n+    pcx: PatCtxt<'tcx>,\n ) -> Vec<Constructor<'tcx>> {\n     debug!(\"all_constructors({:?})\", pcx.ty);\n     let ctors = match pcx.ty.kind {\n@@ -1094,7 +1094,7 @@ pub fn is_useful<'p, 'a, 'tcx>(\n \n     assert!(rows.iter().all(|r| r.len() == v.len()));\n \n-    let pcx = PatternContext {\n+    let pcx = PatCtxt {\n         // TyErr is used to represent the type of wildcard patterns matching\n         // against inaccessible (private) fields of structs, so that we won't\n         // be able to observe whether the types of the struct's fields are\n@@ -1326,7 +1326,7 @@ fn is_useful_specialized<'p, 'a, 'tcx>(\n /// Returns `None` in case of a catch-all, which can't be specialized.\n fn pat_constructors<'tcx>(cx: &mut MatchCheckCtxt<'_, 'tcx>,\n                           pat: &Pattern<'tcx>,\n-                          pcx: PatternContext<'tcx>)\n+                          pcx: PatCtxt<'tcx>)\n                           -> Option<Vec<Constructor<'tcx>>>\n {\n     match *pat.kind {"}, {"sha": "46feccb813841956c4810a1daf70113e305e548b", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d5561936467fbb57d3eb432bcca9100338bab724/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5561936467fbb57d3eb432bcca9100338bab724/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=d5561936467fbb57d3eb432bcca9100338bab724", "patch": "@@ -2,7 +2,7 @@ use super::_match::{MatchCheckCtxt, Matrix, expand_pattern, is_useful};\n use super::_match::Usefulness::*;\n use super::_match::WitnessPreference::*;\n \n-use super::{Pattern, PatternContext, PatternError, PatKind};\n+use super::{Pattern, PatCtxt, PatternError, PatKind};\n \n use rustc::middle::borrowck::SignalledError;\n use rustc::session::Session;\n@@ -88,7 +88,7 @@ impl<'tcx> Visitor<'tcx> for MatchVisitor<'_, 'tcx> {\n     }\n }\n \n-impl PatternContext<'_, '_> {\n+impl PatCtxt<'_, '_> {\n     fn report_inlining_errors(&self, pat_span: Span) {\n         for error in &self.errors {\n             match *error {\n@@ -152,7 +152,7 @@ impl<'tcx> MatchVisitor<'_, 'tcx> {\n \n             let inlined_arms : Vec<(Vec<_>, _)> = arms.iter().map(|arm| (\n                 arm.top_pats_hack().iter().map(|pat| {\n-                    let mut patcx = PatternContext::new(self.tcx,\n+                    let mut patcx = PatCtxt::new(self.tcx,\n                                                         self.param_env.and(self.identity_substs),\n                                                         self.tables);\n                     patcx.include_lint_checks();\n@@ -249,7 +249,7 @@ impl<'tcx> MatchVisitor<'_, 'tcx> {\n     fn check_irrefutable(&self, pat: &'tcx Pat, origin: &str) {\n         let module = self.tcx.hir().get_module_parent(pat.hir_id);\n         MatchCheckCtxt::create_and_enter(self.tcx, self.param_env, module, |ref mut cx| {\n-            let mut patcx = PatternContext::new(self.tcx,\n+            let mut patcx = PatCtxt::new(self.tcx,\n                                                 self.param_env.and(self.identity_substs),\n                                                 self.tables);\n             patcx.include_lint_checks();"}, {"sha": "82a0085d4e867a80584a963fa6ce6de12ccc14f9", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d5561936467fbb57d3eb432bcca9100338bab724/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5561936467fbb57d3eb432bcca9100338bab724/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=d5561936467fbb57d3eb432bcca9100338bab724", "patch": "@@ -347,7 +347,7 @@ impl<'tcx> fmt::Display for Pattern<'tcx> {\n     }\n }\n \n-pub struct PatternContext<'a, 'tcx> {\n+pub struct PatCtxt<'a, 'tcx> {\n     pub tcx: TyCtxt<'tcx>,\n     pub param_env: ty::ParamEnv<'tcx>,\n     pub tables: &'a ty::TypeckTables<'tcx>,\n@@ -363,7 +363,7 @@ impl<'a, 'tcx> Pattern<'tcx> {\n         tables: &'a ty::TypeckTables<'tcx>,\n         pat: &'tcx hir::Pat,\n     ) -> Self {\n-        let mut pcx = PatternContext::new(tcx, param_env_and_substs, tables);\n+        let mut pcx = PatCtxt::new(tcx, param_env_and_substs, tables);\n         let result = pcx.lower_pattern(pat);\n         if !pcx.errors.is_empty() {\n             let msg = format!(\"encountered errors lowering pattern: {:?}\", pcx.errors);\n@@ -374,13 +374,13 @@ impl<'a, 'tcx> Pattern<'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n+impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n     pub fn new(\n         tcx: TyCtxt<'tcx>,\n         param_env_and_substs: ty::ParamEnvAnd<'tcx, SubstsRef<'tcx>>,\n         tables: &'a ty::TypeckTables<'tcx>,\n     ) -> Self {\n-        PatternContext {\n+        PatCtxt {\n             tcx,\n             param_env: param_env_and_substs.param_env,\n             tables,\n@@ -1293,7 +1293,7 @@ fn search_for_adt_without_structural_match<'tcx>(tcx: TyCtxt<'tcx>,\n     }\n }\n \n-impl UserAnnotatedTyHelpers<'tcx> for PatternContext<'_, 'tcx> {\n+impl UserAnnotatedTyHelpers<'tcx> for PatCtxt<'_, 'tcx> {\n     fn tcx(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }"}]}