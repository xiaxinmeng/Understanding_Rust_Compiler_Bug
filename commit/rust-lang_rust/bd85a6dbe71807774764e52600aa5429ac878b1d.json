{"sha": "bd85a6dbe71807774764e52600aa5429ac878b1d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkODVhNmRiZTcxODA3Nzc0NzY0ZTUyNjAwYWE1NDI5YWM4NzhiMWQ=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2016-12-19T03:25:46Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2016-12-19T03:25:46Z"}, "message": "target spec: add an asm-args field to pass arguments to the external ..\n\nassembler", "tree": {"sha": "9e375496f025cec8b817659797e8c0858b847dc1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e375496f025cec8b817659797e8c0858b847dc1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd85a6dbe71807774764e52600aa5429ac878b1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd85a6dbe71807774764e52600aa5429ac878b1d", "html_url": "https://github.com/rust-lang/rust/commit/bd85a6dbe71807774764e52600aa5429ac878b1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd85a6dbe71807774764e52600aa5429ac878b1d/comments", "author": null, "committer": null, "parents": [{"sha": "71c06a56a120a0d5e3b224105ee3e6754f83e5fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/71c06a56a120a0d5e3b224105ee3e6754f83e5fa", "html_url": "https://github.com/rust-lang/rust/commit/71c06a56a120a0d5e3b224105ee3e6754f83e5fa"}], "stats": {"total": 10, "additions": 10, "deletions": 0}, "files": [{"sha": "13333be66f5701a0dbb4c7123e1da9ab05d20cdd", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd85a6dbe71807774764e52600aa5429ac878b1d/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd85a6dbe71807774764e52600aa5429ac878b1d/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=bd85a6dbe71807774764e52600aa5429ac878b1d", "patch": "@@ -267,6 +267,9 @@ pub struct TargetOptions {\n     /// user-defined libraries.\n     pub post_link_args: Vec<String>,\n \n+    /// Extra arguments to pass to the external assembler (when used)\n+    pub asm_args: Vec<String>,\n+\n     /// Default CPU to pass to LLVM. Corresponds to `llc -mcpu=$cpu`. Defaults\n     /// to \"generic\".\n     pub cpu: String,\n@@ -394,6 +397,7 @@ impl Default for TargetOptions {\n             ar: option_env!(\"CFG_DEFAULT_AR\").unwrap_or(\"ar\").to_string(),\n             pre_link_args: Vec::new(),\n             post_link_args: Vec::new(),\n+            asm_args: Vec::new(),\n             cpu: \"generic\".to_string(),\n             features: \"\".to_string(),\n             dynamic_linking: false,\n@@ -561,6 +565,7 @@ impl Target {\n         key!(late_link_args, list);\n         key!(post_link_objects, list);\n         key!(post_link_args, list);\n+        key!(asm_args, list);\n         key!(cpu);\n         key!(features);\n         key!(dynamic_linking, bool);\n@@ -723,6 +728,7 @@ impl ToJson for Target {\n         target_option_val!(late_link_args);\n         target_option_val!(post_link_objects);\n         target_option_val!(post_link_args);\n+        target_option_val!(asm_args);\n         target_option_val!(cpu);\n         target_option_val!(features);\n         target_option_val!(dynamic_linking);"}, {"sha": "de8814f143e04f62b4c07b046a7c5ac0039b01f7", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd85a6dbe71807774764e52600aa5429ac878b1d/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd85a6dbe71807774764e52600aa5429ac878b1d/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=bd85a6dbe71807774764e52600aa5429ac878b1d", "patch": "@@ -1085,6 +1085,10 @@ fn run_work_multithreaded(sess: &Session,\n pub fn run_assembler(sess: &Session, outputs: &OutputFilenames) {\n     let (pname, mut cmd, _) = get_linker(sess);\n \n+    for arg in &sess.target.target.options.asm_args {\n+        cmd.arg(arg);\n+    }\n+\n     cmd.arg(\"-c\").arg(\"-o\").arg(&outputs.path(OutputType::Object))\n                            .arg(&outputs.temp_path(OutputType::Assembly, None));\n     debug!(\"{:?}\", cmd);"}]}