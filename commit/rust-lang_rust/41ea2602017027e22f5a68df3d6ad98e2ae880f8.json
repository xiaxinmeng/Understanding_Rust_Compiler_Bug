{"sha": "41ea2602017027e22f5a68df3d6ad98e2ae880f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxZWEyNjAyMDE3MDI3ZTIyZjVhNjhkZjNkNmFkOThlMmFlODgwZjg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-01-15T12:13:30Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-01-15T12:14:31Z"}, "message": "Simplify", "tree": {"sha": "f894fdce88b1299309cd3f933adf93d9c9f0dd6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f894fdce88b1299309cd3f933adf93d9c9f0dd6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41ea2602017027e22f5a68df3d6ad98e2ae880f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41ea2602017027e22f5a68df3d6ad98e2ae880f8", "html_url": "https://github.com/rust-lang/rust/commit/41ea2602017027e22f5a68df3d6ad98e2ae880f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41ea2602017027e22f5a68df3d6ad98e2ae880f8/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b1bc19d67ab6e4549f9bc0098949b842ce19fd0", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b1bc19d67ab6e4549f9bc0098949b842ce19fd0", "html_url": "https://github.com/rust-lang/rust/commit/9b1bc19d67ab6e4549f9bc0098949b842ce19fd0"}], "stats": {"total": 46, "additions": 19, "deletions": 27}, "files": [{"sha": "effc3e4bfc3cd97d7ec1bf5e57becf3ed0d9d53b", "filename": "crates/completion/src/completions/keyword.rs", "status": "modified", "additions": 19, "deletions": 27, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/41ea2602017027e22f5a68df3d6ad98e2ae880f8/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fkeyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41ea2602017027e22f5a68df3d6ad98e2ae880f8/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fkeyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fkeyword.rs?ref=41ea2602017027e22f5a68df3d6ad98e2ae880f8", "patch": "@@ -1,6 +1,6 @@\n //! Completes keywords.\n \n-use syntax::{ast, SyntaxKind};\n+use syntax::SyntaxKind;\n use test_utils::mark;\n \n use crate::{CompletionContext, CompletionItem, CompletionItemKind, CompletionKind, Completions};\n@@ -143,47 +143,39 @@ pub(crate) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionConte\n         Some(it) => it,\n         None => return,\n     };\n-    acc.add_all(complete_return(ctx, &fn_def, ctx.can_be_stmt));\n-}\n-\n-fn keyword(ctx: &CompletionContext, kw: &str, snippet: &str) -> CompletionItem {\n-    let res = CompletionItem::new(CompletionKind::Keyword, ctx.source_range(), kw)\n-        .kind(CompletionItemKind::Keyword);\n \n-    match ctx.config.snippet_cap {\n-        Some(cap) => res.insert_snippet(cap, snippet),\n-        _ => res.insert_text(if snippet.contains('$') { kw } else { snippet }),\n-    }\n-    .build()\n+    add_keyword(\n+        ctx,\n+        acc,\n+        \"return\",\n+        match (ctx.can_be_stmt, fn_def.ret_type().is_some()) {\n+            (true, true) => \"return $0;\",\n+            (true, false) => \"return;\",\n+            (false, true) => \"return $0\",\n+            (false, false) => \"return\",\n+        },\n+    )\n }\n \n fn add_keyword(ctx: &CompletionContext, acc: &mut Completions, kw: &str, snippet: &str) {\n-    acc.add(keyword(ctx, kw, snippet));\n-}\n-\n-fn complete_return(\n-    ctx: &CompletionContext,\n-    fn_def: &ast::Fn,\n-    can_be_stmt: bool,\n-) -> Option<CompletionItem> {\n-    let snip = match (can_be_stmt, fn_def.ret_type().is_some()) {\n-        (true, true) => \"return $0;\",\n-        (true, false) => \"return;\",\n-        (false, true) => \"return $0\",\n-        (false, false) => \"return\",\n+    let builder = CompletionItem::new(CompletionKind::Keyword, ctx.source_range(), kw)\n+        .kind(CompletionItemKind::Keyword);\n+    let builder = match ctx.config.snippet_cap {\n+        Some(cap) => builder.insert_snippet(cap, snippet),\n+        None => builder.insert_text(if snippet.contains('$') { kw } else { snippet }),\n     };\n-    Some(keyword(ctx, \"return\", snip))\n+    acc.add(builder.build());\n }\n \n #[cfg(test)]\n mod tests {\n     use expect_test::{expect, Expect};\n+    use test_utils::mark;\n \n     use crate::{\n         test_utils::{check_edit, completion_list},\n         CompletionKind,\n     };\n-    use test_utils::mark;\n \n     fn check(ra_fixture: &str, expect: Expect) {\n         let actual = completion_list(ra_fixture, CompletionKind::Keyword);"}]}