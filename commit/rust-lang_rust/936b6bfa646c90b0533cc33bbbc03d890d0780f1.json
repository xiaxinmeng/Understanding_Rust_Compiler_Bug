{"sha": "936b6bfa646c90b0533cc33bbbc03d890d0780f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzNmI2YmZhNjQ2YzkwYjA1MzNjYzMzYmJiYzAzZDg5MGQwNzgwZjE=", "commit": {"author": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-06-12T17:13:10Z"}, "committer": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-06-20T10:03:53Z"}, "message": "Move `trait_map` into `hir::Crate`", "tree": {"sha": "93ca05ca76317953c53bb35e2ec4a43eaa1ea5fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93ca05ca76317953c53bb35e2ec4a43eaa1ea5fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/936b6bfa646c90b0533cc33bbbc03d890d0780f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/936b6bfa646c90b0533cc33bbbc03d890d0780f1", "html_url": "https://github.com/rust-lang/rust/commit/936b6bfa646c90b0533cc33bbbc03d890d0780f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/936b6bfa646c90b0533cc33bbbc03d890d0780f1/comments", "author": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "033013cab3a861224fd55f494c8be1cb0349eb49", "url": "https://api.github.com/repos/rust-lang/rust/commits/033013cab3a861224fd55f494c8be1cb0349eb49", "html_url": "https://github.com/rust-lang/rust/commit/033013cab3a861224fd55f494c8be1cb0349eb49"}], "stats": {"total": 35, "additions": 20, "deletions": 15}, "files": [{"sha": "6abf3dac76a210ac51fb39192078eaa519d18d13", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/936b6bfa646c90b0533cc33bbbc03d890d0780f1/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936b6bfa646c90b0533cc33bbbc03d890d0780f1/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=936b6bfa646c90b0533cc33bbbc03d890d0780f1", "patch": "@@ -205,6 +205,8 @@ pub trait Resolver {\n     fn lint_buffer(&mut self) -> &mut LintBuffer;\n \n     fn next_node_id(&mut self) -> NodeId;\n+\n+    fn trait_map(&self) -> &NodeMap<Vec<hir::TraitCandidate>>;\n }\n \n type NtToTokenstream = fn(&Nonterminal, &ParseSess, Span) -> TokenStream;\n@@ -557,6 +559,13 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         let proc_macros =\n             c.proc_macros.iter().map(|id| self.node_id_to_hir_id[*id].unwrap()).collect();\n \n+        let trait_map = self\n+            .resolver\n+            .trait_map()\n+            .iter()\n+            .map(|(&k, v)| (self.node_id_to_hir_id[k].unwrap(), v.clone()))\n+            .collect();\n+\n         self.resolver.definitions().init_node_id_to_hir_id_mapping(self.node_id_to_hir_id);\n \n         hir::Crate {\n@@ -571,6 +580,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             trait_impls: self.trait_impls,\n             modules: self.modules,\n             proc_macros,\n+            trait_map,\n         }\n     }\n "}, {"sha": "7d1cb7738c35e71a8b31065b8933209fc5892311", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/936b6bfa646c90b0533cc33bbbc03d890d0780f1/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936b6bfa646c90b0533cc33bbbc03d890d0780f1/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=936b6bfa646c90b0533cc33bbbc03d890d0780f1", "patch": "@@ -639,6 +639,8 @@ pub struct Crate<'hir> {\n     /// A list of proc macro HirIds, written out in the order in which\n     /// they are declared in the static array generated by proc_macro_harness.\n     pub proc_macros: Vec<HirId>,\n+\n+    pub trait_map: BTreeMap<HirId, Vec<TraitCandidate>>,\n }\n \n impl Crate<'hir> {\n@@ -2651,7 +2653,7 @@ pub type CaptureModeMap = NodeMap<CaptureBy>;\n // The TraitCandidate's import_ids is empty if the trait is defined in the same module, and\n // has length > 0 if the trait is found through an chain of imports, starting with the\n // import/use statement in the scope where the trait is used.\n-#[derive(Clone, Debug)]\n+#[derive(RustcEncodable, RustcDecodable, Clone, Debug)]\n pub struct TraitCandidate {\n     pub def_id: DefId,\n     pub import_ids: SmallVec<[LocalDefId; 1]>,"}, {"sha": "2b3c21daa4635870ef0d35086892119c9b2bbe97", "filename": "src/librustc_middle/hir/map/collector.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/936b6bfa646c90b0533cc33bbbc03d890d0780f1/src%2Flibrustc_middle%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936b6bfa646c90b0533cc33bbbc03d890d0780f1/src%2Flibrustc_middle%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fhir%2Fmap%2Fcollector.rs?ref=936b6bfa646c90b0533cc33bbbc03d890d0780f1", "patch": "@@ -117,6 +117,7 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n                 body_ids: _,\n                 modules: _,\n                 proc_macros: _,\n+                trait_map: _,\n             } = *krate;\n \n             hash_body(&mut hcx, root_mod_def_path_hash, item, &mut hir_body_nodes)"}, {"sha": "5b44ffe8cafd73ade1e165e1acd660f194b7b69a", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/936b6bfa646c90b0533cc33bbbc03d890d0780f1/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936b6bfa646c90b0533cc33bbbc03d890d0780f1/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=936b6bfa646c90b0533cc33bbbc03d890d0780f1", "patch": "@@ -1101,9 +1101,9 @@ impl<'tcx> TyCtxt<'tcx> {\n         };\n \n         let mut trait_map: FxHashMap<_, FxHashMap<_, _>> = FxHashMap::default();\n-        for (hir_id, v) in resolutions.trait_map.into_iter() {\n+        for (hir_id, v) in krate.trait_map.iter() {\n             let map = trait_map.entry(hir_id.owner).or_default();\n-            map.insert(hir_id.local_id, StableVec::new(v));\n+            map.insert(hir_id.local_id, StableVec::new(v.to_vec()));\n         }\n \n         GlobalCtxt {"}, {"sha": "56fb3b58d3f6b52ee7c6b64ed658f633beab54b7", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/936b6bfa646c90b0533cc33bbbc03d890d0780f1/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936b6bfa646c90b0533cc33bbbc03d890d0780f1/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=936b6bfa646c90b0533cc33bbbc03d890d0780f1", "patch": "@@ -121,7 +121,6 @@ pub struct ResolverOutputs {\n     pub definitions: rustc_hir::definitions::Definitions,\n     pub cstore: Box<CrateStoreDyn>,\n     pub extern_crate_map: FxHashMap<LocalDefId, CrateNum>,\n-    pub trait_map: FxHashMap<hir::HirId, Vec<hir::TraitCandidate>>,\n     pub maybe_unused_trait_imports: FxHashSet<LocalDefId>,\n     pub maybe_unused_extern_crates: Vec<(LocalDefId, Span)>,\n     pub export_map: ExportMap<LocalDefId>,"}, {"sha": "91bd155614178b67831ef649e6308133f2f74985", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/936b6bfa646c90b0533cc33bbbc03d890d0780f1/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936b6bfa646c90b0533cc33bbbc03d890d0780f1/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=936b6bfa646c90b0533cc33bbbc03d890d0780f1", "patch": "@@ -1109,6 +1109,10 @@ impl rustc_ast_lowering::Resolver for Resolver<'_> {\n     fn next_node_id(&mut self) -> NodeId {\n         self.next_node_id()\n     }\n+\n+    fn trait_map(&self) -> &NodeMap<Vec<TraitCandidate>> {\n+        &self.trait_map\n+    }\n }\n \n impl<'a> Resolver<'a> {\n@@ -1284,11 +1288,6 @@ impl<'a> Resolver<'a> {\n         let definitions = self.definitions;\n         let extern_crate_map = self.extern_crate_map;\n         let export_map = self.export_map;\n-        let trait_map = self\n-            .trait_map\n-            .into_iter()\n-            .map(|(k, v)| (definitions.node_id_to_hir_id(k), v))\n-            .collect();\n         let maybe_unused_trait_imports = self.maybe_unused_trait_imports;\n         let maybe_unused_extern_crates = self.maybe_unused_extern_crates;\n         let glob_map = self.glob_map;\n@@ -1297,7 +1296,6 @@ impl<'a> Resolver<'a> {\n             cstore: Box::new(self.crate_loader.into_cstore()),\n             extern_crate_map,\n             export_map,\n-            trait_map,\n             glob_map,\n             maybe_unused_trait_imports,\n             maybe_unused_extern_crates,\n@@ -1315,11 +1313,6 @@ impl<'a> Resolver<'a> {\n             cstore: Box::new(self.cstore().clone()),\n             extern_crate_map: self.extern_crate_map.clone(),\n             export_map: self.export_map.clone(),\n-            trait_map: self\n-                .trait_map\n-                .iter()\n-                .map(|(&k, v)| (self.definitions.node_id_to_hir_id(k), v.clone()))\n-                .collect(),\n             glob_map: self.glob_map.clone(),\n             maybe_unused_trait_imports: self.maybe_unused_trait_imports.clone(),\n             maybe_unused_extern_crates: self.maybe_unused_extern_crates.clone(),"}]}