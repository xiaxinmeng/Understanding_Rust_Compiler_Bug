{"sha": "51af5af6fde92f6a15314310e756b3b2d19f22fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxYWY1YWY2ZmRlOTJmNmExNTMxNDMxMGU3NTZiM2IyZDE5ZjIyZmE=", "commit": {"author": {"name": "SNCPlay42", "email": "SNCPlay42@gmail.com", "date": "2020-07-22T18:44:33Z"}, "committer": {"name": "SNCPlay42", "email": "SNCPlay42@gmail.com", "date": "2020-07-22T22:52:49Z"}, "message": "extract RegionNameHighlight", "tree": {"sha": "5fcb747449dd108aef70aec8557d1f7329b36eca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fcb747449dd108aef70aec8557d1f7329b36eca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51af5af6fde92f6a15314310e756b3b2d19f22fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51af5af6fde92f6a15314310e756b3b2d19f22fa", "html_url": "https://github.com/rust-lang/rust/commit/51af5af6fde92f6a15314310e756b3b2d19f22fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51af5af6fde92f6a15314310e756b3b2d19f22fa/comments", "author": {"login": "SNCPlay42", "id": 5455518, "node_id": "MDQ6VXNlcjU0NTU1MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5455518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SNCPlay42", "html_url": "https://github.com/SNCPlay42", "followers_url": "https://api.github.com/users/SNCPlay42/followers", "following_url": "https://api.github.com/users/SNCPlay42/following{/other_user}", "gists_url": "https://api.github.com/users/SNCPlay42/gists{/gist_id}", "starred_url": "https://api.github.com/users/SNCPlay42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SNCPlay42/subscriptions", "organizations_url": "https://api.github.com/users/SNCPlay42/orgs", "repos_url": "https://api.github.com/users/SNCPlay42/repos", "events_url": "https://api.github.com/users/SNCPlay42/events{/privacy}", "received_events_url": "https://api.github.com/users/SNCPlay42/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SNCPlay42", "id": 5455518, "node_id": "MDQ6VXNlcjU0NTU1MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5455518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SNCPlay42", "html_url": "https://github.com/SNCPlay42", "followers_url": "https://api.github.com/users/SNCPlay42/followers", "following_url": "https://api.github.com/users/SNCPlay42/following{/other_user}", "gists_url": "https://api.github.com/users/SNCPlay42/gists{/gist_id}", "starred_url": "https://api.github.com/users/SNCPlay42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SNCPlay42/subscriptions", "organizations_url": "https://api.github.com/users/SNCPlay42/orgs", "repos_url": "https://api.github.com/users/SNCPlay42/repos", "events_url": "https://api.github.com/users/SNCPlay42/events{/privacy}", "received_events_url": "https://api.github.com/users/SNCPlay42/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c27633489d038765922d996ebd59ba032007d25c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c27633489d038765922d996ebd59ba032007d25c", "html_url": "https://github.com/rust-lang/rust/commit/c27633489d038765922d996ebd59ba032007d25c"}], "stats": {"total": 63, "additions": 40, "deletions": 23}, "files": [{"sha": "8521f900988e49a212043b3119e46928b45ad068", "filename": "src/librustc_mir/borrow_check/diagnostics/outlives_suggestion.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/51af5af6fde92f6a15314310e756b3b2d19f22fa/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Foutlives_suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51af5af6fde92f6a15314310e756b3b2d19f22fa/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Foutlives_suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Foutlives_suggestion.rs?ref=51af5af6fde92f6a15314310e756b3b2d19f22fa", "patch": "@@ -60,9 +60,7 @@ impl OutlivesSuggestionBuilder {\n             // Don't give suggestions for upvars, closure return types, or other unnamable\n             // regions.\n             RegionNameSource::SynthesizedFreeEnvRegion(..)\n-            | RegionNameSource::CannotMatchHirTy(..)\n-            | RegionNameSource::MatchedHirTy(..)\n-            | RegionNameSource::MatchedAdtAndSegment(..)\n+            | RegionNameSource::AnonRegionFromArgument(..)\n             | RegionNameSource::AnonRegionFromUpvar(..)\n             | RegionNameSource::AnonRegionFromOutput(..)\n             | RegionNameSource::AnonRegionFromYieldTy(..)"}, {"sha": "233f8158e2b76ef998cb1bc25ea06a80d1c154f6", "filename": "src/librustc_mir/borrow_check/diagnostics/region_name.rs", "status": "modified", "additions": 39, "deletions": 20, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/51af5af6fde92f6a15314310e756b3b2d19f22fa/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51af5af6fde92f6a15314310e756b3b2d19f22fa/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs?ref=51af5af6fde92f6a15314310e756b3b2d19f22fa", "patch": "@@ -34,13 +34,8 @@ crate enum RegionNameSource {\n     Static,\n     /// The free region corresponding to the environment of a closure.\n     SynthesizedFreeEnvRegion(Span, String),\n-    /// The region name corresponds to a region where the type annotation is completely missing\n-    /// from the code, e.g. in a closure arguments `|x| { ... }`, where `x` is a reference.\n-    CannotMatchHirTy(Span, String),\n-    /// The region name corresponds a reference that was found by traversing the type in the HIR.\n-    MatchedHirTy(Span),\n-    /// A region name from the generics list of a struct/enum/union.\n-    MatchedAdtAndSegment(Span),\n+    /// The region corresponding to an argument.\n+    AnonRegionFromArgument(RegionNameHighlight),\n     /// The region corresponding to a closure upvar.\n     AnonRegionFromUpvar(Span, String),\n     /// The region corresponding to the return type of a closure.\n@@ -51,16 +46,27 @@ crate enum RegionNameSource {\n     AnonRegionFromAsyncFn(Span),\n }\n \n+/// Describes what to highlight to explain to the user that we're giving an anonymous region a\n+/// synthesized name, and how to highlight it.\n+#[derive(Debug, Clone)]\n+crate enum RegionNameHighlight {\n+    /// The anonymous region corresponds to a reference that was found by traversing the type in the HIR.\n+    MatchedHirTy(Span),\n+    /// The anonymous region corresponds to a `'_` in the generics list of a struct/enum/union.\n+    MatchedAdtAndSegment(Span),\n+    /// The anonymous region corresponds to a region where the type annotation is completely missing\n+    /// from the code, e.g. in a closure arguments `|x| { ... }`, where `x` is a reference.\n+    CannotMatchHirTy(Span, String),\n+}\n+\n impl RegionName {\n     crate fn was_named(&self) -> bool {\n         match self.source {\n             RegionNameSource::NamedEarlyBoundRegion(..)\n             | RegionNameSource::NamedFreeRegion(..)\n             | RegionNameSource::Static => true,\n             RegionNameSource::SynthesizedFreeEnvRegion(..)\n-            | RegionNameSource::CannotMatchHirTy(..)\n-            | RegionNameSource::MatchedHirTy(..)\n-            | RegionNameSource::MatchedAdtAndSegment(..)\n+            | RegionNameSource::AnonRegionFromArgument(..)\n             | RegionNameSource::AnonRegionFromUpvar(..)\n             | RegionNameSource::AnonRegionFromOutput(..)\n             | RegionNameSource::AnonRegionFromYieldTy(..)\n@@ -74,13 +80,15 @@ impl RegionName {\n             RegionNameSource::NamedEarlyBoundRegion(span)\n             | RegionNameSource::NamedFreeRegion(span)\n             | RegionNameSource::SynthesizedFreeEnvRegion(span, _)\n-            | RegionNameSource::CannotMatchHirTy(span, _)\n-            | RegionNameSource::MatchedHirTy(span)\n-            | RegionNameSource::MatchedAdtAndSegment(span)\n             | RegionNameSource::AnonRegionFromUpvar(span, _)\n             | RegionNameSource::AnonRegionFromOutput(span, _, _)\n             | RegionNameSource::AnonRegionFromYieldTy(span, _)\n             | RegionNameSource::AnonRegionFromAsyncFn(span) => Some(span),\n+            RegionNameSource::AnonRegionFromArgument(ref highlight) => match *highlight {\n+                RegionNameHighlight::MatchedHirTy(span)\n+                | RegionNameHighlight::MatchedAdtAndSegment(span)\n+                | RegionNameHighlight::CannotMatchHirTy(span, _) => Some(span),\n+            },\n         }\n     }\n \n@@ -97,17 +105,22 @@ impl RegionName {\n                 );\n                 diag.note(&note);\n             }\n-            RegionNameSource::CannotMatchHirTy(span, type_name) => {\n+            RegionNameSource::AnonRegionFromArgument(RegionNameHighlight::CannotMatchHirTy(\n+                span,\n+                type_name,\n+            )) => {\n                 diag.span_label(*span, format!(\"has type `{}`\", type_name));\n             }\n-            RegionNameSource::MatchedHirTy(span)\n+            RegionNameSource::AnonRegionFromArgument(RegionNameHighlight::MatchedHirTy(span))\n             | RegionNameSource::AnonRegionFromAsyncFn(span) => {\n                 diag.span_label(\n                     *span,\n                     format!(\"let's call the lifetime of this reference `{}`\", self),\n                 );\n             }\n-            RegionNameSource::MatchedAdtAndSegment(span) => {\n+            RegionNameSource::AnonRegionFromArgument(\n+                RegionNameHighlight::MatchedAdtAndSegment(span),\n+            ) => {\n                 diag.span_label(*span, format!(\"let's call this `{}`\", self));\n             }\n             RegionNameSource::AnonRegionFromUpvar(span, upvar_name) => {\n@@ -393,7 +406,9 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n                 // it so the next value will be used next and return the region name that would\n                 // have been used.\n                 name: self.synthesize_region_name(),\n-                source: RegionNameSource::CannotMatchHirTy(span, type_name),\n+                source: RegionNameSource::AnonRegionFromArgument(\n+                    RegionNameHighlight::CannotMatchHirTy(span, type_name),\n+                ),\n             })\n         } else {\n             None\n@@ -453,7 +468,9 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n \n                         return Some(RegionName {\n                             name: region_name,\n-                            source: RegionNameSource::MatchedHirTy(ampersand_span),\n+                            source: RegionNameSource::AnonRegionFromArgument(\n+                                RegionNameHighlight::MatchedHirTy(ampersand_span),\n+                            ),\n                         });\n                     }\n \n@@ -534,10 +551,12 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n             | hir::LifetimeName::Static\n             | hir::LifetimeName::Underscore => {\n                 let region_name = self.synthesize_region_name();\n-                let ampersand_span = lifetime.span;\n+                let lifetime_span = lifetime.span;\n                 Some(RegionName {\n                     name: region_name,\n-                    source: RegionNameSource::MatchedAdtAndSegment(ampersand_span),\n+                    source: RegionNameSource::AnonRegionFromArgument(\n+                        RegionNameHighlight::MatchedAdtAndSegment(lifetime_span),\n+                    ),\n                 })\n             }\n "}]}