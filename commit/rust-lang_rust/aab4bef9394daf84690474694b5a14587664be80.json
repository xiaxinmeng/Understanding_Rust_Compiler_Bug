{"sha": "aab4bef9394daf84690474694b5a14587664be80", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhYjRiZWY5Mzk0ZGFmODQ2OTA0NzQ2OTRiNWExNDU4NzY2NGJlODA=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-03-25T15:49:21Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-03-26T13:08:55Z"}, "message": "Add tests exercising the dropflag checking functionality.", "tree": {"sha": "1f0d0dbfa0e392bd85175f0ba4af33dc01ff3832", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f0d0dbfa0e392bd85175f0ba4af33dc01ff3832"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aab4bef9394daf84690474694b5a14587664be80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aab4bef9394daf84690474694b5a14587664be80", "html_url": "https://github.com/rust-lang/rust/commit/aab4bef9394daf84690474694b5a14587664be80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aab4bef9394daf84690474694b5a14587664be80/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4053b00112f8c3d2c797adbb360a1961a82b6644", "url": "https://api.github.com/repos/rust-lang/rust/commits/4053b00112f8c3d2c797adbb360a1961a82b6644", "html_url": "https://github.com/rust-lang/rust/commit/4053b00112f8c3d2c797adbb360a1961a82b6644"}], "stats": {"total": 134, "additions": 134, "deletions": 0}, "files": [{"sha": "bc836f6c8487ce3dd85d241603d3ce590e76155c", "filename": "src/test/run-pass/drop-flag-sanity-check.rs", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/aab4bef9394daf84690474694b5a14587664be80/src%2Ftest%2Frun-pass%2Fdrop-flag-sanity-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aab4bef9394daf84690474694b5a14587664be80/src%2Ftest%2Frun-pass%2Fdrop-flag-sanity-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-flag-sanity-check.rs?ref=aab4bef9394daf84690474694b5a14587664be80", "patch": "@@ -0,0 +1,67 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z force-dropflag-checks=on\n+\n+// Quick-and-dirty test to ensure -Z force-dropflag-checks=on works as\n+// expected. Note that the inlined drop-flag is slated for removal\n+// (RFC 320); when that happens, the -Z flag and this test should\n+// simply be removed.\n+//\n+// See also drop-flag-skip-sanity-check.rs.\n+\n+use std::env;\n+use std::old_io::process::{Command, ExitSignal, ExitStatus};\n+\n+fn main() {\n+    let args: Vec<String> = env::args().collect();\n+    if args.len() > 1 && args[1] == \"test\" {\n+        return test();\n+    }\n+\n+    let mut p = Command::new(&args[0]).arg(\"test\").spawn().unwrap();\n+    // The invocation should fail due to the drop-flag sanity check.\n+    assert!(!p.wait().unwrap().success());\n+}\n+\n+#[derive(Debug)]\n+struct Corrupted {\n+    x: u8\n+}\n+\n+impl Drop for Corrupted {\n+    fn drop(&mut self) { println!(\"dropping\"); }\n+}\n+\n+fn test() {\n+    {\n+        let mut c1 = Corrupted { x: 1 };\n+        let mut c2 = Corrupted { x: 2 };\n+        unsafe {\n+            let p1 = &mut c1 as *mut Corrupted as *mut u8;\n+            let p2 = &mut c2 as *mut Corrupted as *mut u8;\n+            for i in 0..std::mem::size_of::<Corrupted>() {\n+                // corrupt everything, *including the drop flag.\n+                //\n+                // (We corrupt via two different means to safeguard\n+                // against the hypothetical assignment of the\n+                // dtor_needed/dtor_done values to v and v+k.  that\n+                // happen to match with one of the corruption values\n+                // below.)\n+                *p1.offset(i as isize) += 2;\n+                *p2.offset(i as isize) += 3;\n+            }\n+        }\n+        // Here, at the end of the scope of `c1` and `c2`, the\n+        // drop-glue should detect the corruption of (at least one of)\n+        // the drop-flags.\n+    }\n+    println!(\"We should never get here.\");\n+}"}, {"sha": "0b58bb16857fbec00e75f80659f28f07660cc3ff", "filename": "src/test/run-pass/drop-flag-skip-sanity-check.rs", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/aab4bef9394daf84690474694b5a14587664be80/src%2Ftest%2Frun-pass%2Fdrop-flag-skip-sanity-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aab4bef9394daf84690474694b5a14587664be80/src%2Ftest%2Frun-pass%2Fdrop-flag-skip-sanity-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-flag-skip-sanity-check.rs?ref=aab4bef9394daf84690474694b5a14587664be80", "patch": "@@ -0,0 +1,67 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z force-dropflag-checks=off\n+\n+// Quick-and-dirty test to ensure -Z force-dropflag-checks=off works as\n+// expected. Note that the inlined drop-flag is slated for removal\n+// (RFC 320); when that happens, the -Z flag and this test should\n+// simply be removed.\n+//\n+// See also drop-flag-sanity-check.rs.\n+\n+use std::env;\n+use std::old_io::process::{Command, ExitSignal, ExitStatus};\n+\n+fn main() {\n+    let args: Vec<String> = env::args().collect();\n+    if args.len() > 1 && args[1] == \"test\" {\n+        return test();\n+    }\n+\n+    let mut p = Command::new(&args[0]).arg(\"test\").spawn().unwrap();\n+    // Invocatinn should succeed as drop-flag sanity check is skipped.\n+    assert!(p.wait().unwrap().success());\n+}\n+\n+#[derive(Debug)]\n+struct Corrupted {\n+    x: u8\n+}\n+\n+impl Drop for Corrupted {\n+    fn drop(&mut self) { println!(\"dropping\"); }\n+}\n+\n+fn test() {\n+    {\n+        let mut c1 = Corrupted { x: 1 };\n+        let mut c2 = Corrupted { x: 2 };\n+        unsafe {\n+            let p1 = &mut c1 as *mut Corrupted as *mut u8;\n+            let p2 = &mut c2 as *mut Corrupted as *mut u8;\n+            for i in 0..std::mem::size_of::<Corrupted>() {\n+                // corrupt everything, *including the drop flag.\n+                //\n+                // (We corrupt via two different means to safeguard\n+                // against the hypothetical assignment of the\n+                // dtor_needed/dtor_done values to v and v+k.  that\n+                // happen to match with one of the corruption values\n+                // below.)\n+                *p1.offset(i as isize) += 2;\n+                *p2.offset(i as isize) += 3;\n+            }\n+        }\n+        // Here, at the end of the scope of `c1` and `c2`, the\n+        // drop-glue should detect the corruption of (at least one of)\n+        // the drop-flags.\n+    }\n+    println!(\"We should never get here.\");\n+}"}]}