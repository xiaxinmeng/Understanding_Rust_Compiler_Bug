{"sha": "f98ffb5bc348d1b11f10ebd5f4c5e2fe2813e167", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5OGZmYjViYzM0OGQxYjExZjEwZWJkNWY0YzVlMmZlMjgxM2UxNjc=", "commit": {"author": {"name": "Ian Douglas Scott", "email": "ian@iandouglasscott.com", "date": "2017-06-22T18:51:32Z"}, "committer": {"name": "Ian Douglas Scott", "email": "ian@iandouglasscott.com", "date": "2017-06-22T18:51:32Z"}, "message": "Make Build.cxx() return a Result instead of panicking", "tree": {"sha": "cfc7e212079d0b2cf681ff3ae768cad177ad58b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cfc7e212079d0b2cf681ff3ae768cad177ad58b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f98ffb5bc348d1b11f10ebd5f4c5e2fe2813e167", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEECYv1aaNg4jTOK4YaSSThDhmbWVkFAllMEc0ACgkQSSThDhmb\nWVmHtwgAnew1gB/LzxnnbZV6yH5rcFcyiJrQwJOBTgNooMg+Cf6ml9ockDB23Zgi\nWn/dw/4RRraGes/qgI8Tr5JHLj0h7d44QM5UZ+Bso+Vg1MGFQM/Vu9j2aNSgoe14\n2OfVZzpp06RTai2Mzs8F3xnsdGHAHm9kqIfO1iofT/TWykDgMuPKWUPpeJ8poE+S\nMacEJ/xJ9a/0uLE9D9MrigqsvRuEH7sxJJ+l4qOOGsk5qd6Ds/vVWjPRIHqo4UBc\nFBaSXmhpQaLXHp//Q9QW6ofPhBihfW69x6WEewmZ4XwLAeXa7cnN9uQvTOTXVxNS\niKlDZiZCEoW/hGvKarkI+c1ksEwv4w==\n=v7HO\n-----END PGP SIGNATURE-----", "payload": "tree cfc7e212079d0b2cf681ff3ae768cad177ad58b9\nparent 526afcb0a341c6036c069e113ebecf574c861c9f\nauthor Ian Douglas Scott <ian@iandouglasscott.com> 1498157492 -0700\ncommitter Ian Douglas Scott <ian@iandouglasscott.com> 1498157492 -0700\n\nMake Build.cxx() return a Result instead of panicking\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f98ffb5bc348d1b11f10ebd5f4c5e2fe2813e167", "html_url": "https://github.com/rust-lang/rust/commit/f98ffb5bc348d1b11f10ebd5f4c5e2fe2813e167", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f98ffb5bc348d1b11f10ebd5f4c5e2fe2813e167/comments", "author": {"login": "ids1024", "id": 2263150, "node_id": "MDQ6VXNlcjIyNjMxNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/2263150?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ids1024", "html_url": "https://github.com/ids1024", "followers_url": "https://api.github.com/users/ids1024/followers", "following_url": "https://api.github.com/users/ids1024/following{/other_user}", "gists_url": "https://api.github.com/users/ids1024/gists{/gist_id}", "starred_url": "https://api.github.com/users/ids1024/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ids1024/subscriptions", "organizations_url": "https://api.github.com/users/ids1024/orgs", "repos_url": "https://api.github.com/users/ids1024/repos", "events_url": "https://api.github.com/users/ids1024/events{/privacy}", "received_events_url": "https://api.github.com/users/ids1024/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ids1024", "id": 2263150, "node_id": "MDQ6VXNlcjIyNjMxNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/2263150?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ids1024", "html_url": "https://github.com/ids1024", "followers_url": "https://api.github.com/users/ids1024/followers", "following_url": "https://api.github.com/users/ids1024/following{/other_user}", "gists_url": "https://api.github.com/users/ids1024/gists{/gist_id}", "starred_url": "https://api.github.com/users/ids1024/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ids1024/subscriptions", "organizations_url": "https://api.github.com/users/ids1024/orgs", "repos_url": "https://api.github.com/users/ids1024/repos", "events_url": "https://api.github.com/users/ids1024/events{/privacy}", "received_events_url": "https://api.github.com/users/ids1024/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "526afcb0a341c6036c069e113ebecf574c861c9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/526afcb0a341c6036c069e113ebecf574c861c9f", "html_url": "https://github.com/rust-lang/rust/commit/526afcb0a341c6036c069e113ebecf574c861c9f"}], "stats": {"total": 25, "additions": 14, "deletions": 11}, "files": [{"sha": "277728b90b763c0b0381512653ecdb332ac0a5b2", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f98ffb5bc348d1b11f10ebd5f4c5e2fe2813e167/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98ffb5bc348d1b11f10ebd5f4c5e2fe2813e167/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=f98ffb5bc348d1b11f10ebd5f4c5e2fe2813e167", "patch": "@@ -265,7 +265,7 @@ pub fn compiletest(build: &Build,\n         let llvm_components = output(Command::new(&llvm_config).arg(\"--components\"));\n         let llvm_cxxflags = output(Command::new(&llvm_config).arg(\"--cxxflags\"));\n         cmd.arg(\"--cc\").arg(build.cc(target))\n-           .arg(\"--cxx\").arg(build.cxx(target))\n+           .arg(\"--cxx\").arg(build.cxx(target).unwrap())\n            .arg(\"--cflags\").arg(build.cflags(target).join(\" \"))\n            .arg(\"--llvm-components\").arg(llvm_components.trim())\n            .arg(\"--llvm-cxxflags\").arg(llvm_cxxflags.trim());"}, {"sha": "c8ab3a8fc1d9947ddf4f47460fa8a597fc8afd0d", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f98ffb5bc348d1b11f10ebd5f4c5e2fe2813e167/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98ffb5bc348d1b11f10ebd5f4c5e2fe2813e167/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=f98ffb5bc348d1b11f10ebd5f4c5e2fe2813e167", "patch": "@@ -291,7 +291,7 @@ pub fn rustc(build: &Build, target: &str, compiler: &Compiler) {\n        !target.contains(\"windows\") &&\n        !target.contains(\"apple\") {\n         cargo.env(\"LLVM_STATIC_STDCPP\",\n-                  compiler_file(build.cxx(target), \"libstdc++.a\"));\n+                  compiler_file(build.cxx(target).unwrap(), \"libstdc++.a\"));\n     }\n     if build.config.llvm_link_shared {\n         cargo.env(\"LLVM_LINK_SHARED\", \"1\");"}, {"sha": "ce7cde8fc9494b6eec53118d5bc0f4c312e8845c", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f98ffb5bc348d1b11f10ebd5f4c5e2fe2813e167/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98ffb5bc348d1b11f10ebd5f4c5e2fe2813e167/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=f98ffb5bc348d1b11f10ebd5f4c5e2fe2813e167", "patch": "@@ -450,9 +450,12 @@ impl Build {\n         // FIXME: the guard against msvc shouldn't need to be here\n         if !target.contains(\"msvc\") {\n             cargo.env(format!(\"CC_{}\", target), self.cc(target))\n-                 .env(format!(\"CXX_{}\", target), self.cxx(target))\n                  .env(format!(\"AR_{}\", target), self.ar(target).unwrap()) // only msvc is None\n                  .env(format!(\"CFLAGS_{}\", target), self.cflags(target).join(\" \"));\n+\n+            if let Ok(cxx) = self.cxx(target) {\n+                 cargo.env(format!(\"CXX_{}\", target), cxx);\n+            }\n         }\n \n         if self.config.extended && compiler.is_final_stage(self) {\n@@ -839,13 +842,13 @@ impl Build {\n         self.cc[target].1.as_ref().map(|p| &**p)\n     }\n \n-    /// Returns the path to the C++ compiler for the target specified, may panic\n-    /// if no C++ compiler was configured for the target.\n-    fn cxx(&self, target: &str) -> &Path {\n+    /// Returns the path to the C++ compiler for the target specified.\n+    fn cxx(&self, target: &str) -> Result<&Path, String> {\n         match self.cxx.get(target) {\n-            Some(p) => p.path(),\n-            None => panic!(\"\\n\\ntarget `{}` is not configured as a host,\n-                            only as a target\\n\\n\", target),\n+            Some(p) => Ok(p.path()),\n+            None => Err(format!(\n+                    \"target `{}` is not configured as a host, only as a target\",\n+                    target))\n         }\n     }\n "}, {"sha": "f150df6cdcdb0aa9745c450808ab47618ad09564", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f98ffb5bc348d1b11f10ebd5f4c5e2fe2813e167/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98ffb5bc348d1b11f10ebd5f4c5e2fe2813e167/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=f98ffb5bc348d1b11f10ebd5f4c5e2fe2813e167", "patch": "@@ -155,7 +155,7 @@ pub fn llvm(build: &Build, target: &str) {\n         }\n \n         let cc = build.cc(target);\n-        let cxx = build.cxx(target);\n+        let cxx = build.cxx(target).unwrap();\n \n         // Handle msvc + ninja + ccache specially (this is what the bots use)\n         if target.contains(\"msvc\") &&"}, {"sha": "46d047bb015e51134c279dff2fbd5e5acd77671e", "filename": "src/bootstrap/sanity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f98ffb5bc348d1b11f10ebd5f4c5e2fe2813e167/src%2Fbootstrap%2Fsanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98ffb5bc348d1b11f10ebd5f4c5e2fe2813e167/src%2Fbootstrap%2Fsanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsanity.rs?ref=f98ffb5bc348d1b11f10ebd5f4c5e2fe2813e167", "patch": "@@ -139,7 +139,7 @@ pub fn check(build: &mut Build) {\n         }\n     }\n     for host in build.config.host.iter() {\n-        need_cmd(build.cxx(host).as_ref());\n+        need_cmd(build.cxx(host).unwrap().as_ref());\n     }\n \n     // The msvc hosts don't use jemalloc, turn it off globally to"}]}