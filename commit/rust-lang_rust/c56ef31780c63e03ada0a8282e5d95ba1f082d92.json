{"sha": "c56ef31780c63e03ada0a8282e5d95ba1f082d92", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1NmVmMzE3ODBjNjNlMDNhZGEwYTgyODJlNWQ5NWJhMWYwODJkOTI=", "commit": {"author": {"name": "Vytautas Astrauskas", "email": "astrauv@amazon.com", "date": "2020-04-27T18:01:35Z"}, "committer": {"name": "Vytautas Astrauskas", "email": "astrauv@amazon.com", "date": "2020-04-27T21:26:36Z"}, "message": "Improve comments.", "tree": {"sha": "d75c9e3f9e6110f11a52c13fc08fec644f07d363", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d75c9e3f9e6110f11a52c13fc08fec644f07d363"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c56ef31780c63e03ada0a8282e5d95ba1f082d92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c56ef31780c63e03ada0a8282e5d95ba1f082d92", "html_url": "https://github.com/rust-lang/rust/commit/c56ef31780c63e03ada0a8282e5d95ba1f082d92", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c56ef31780c63e03ada0a8282e5d95ba1f082d92/comments", "author": null, "committer": null, "parents": [{"sha": "331dbd1469abb9ee7959684305732b0613f0bf15", "url": "https://api.github.com/repos/rust-lang/rust/commits/331dbd1469abb9ee7959684305732b0613f0bf15", "html_url": "https://github.com/rust-lang/rust/commit/331dbd1469abb9ee7959684305732b0613f0bf15"}], "stats": {"total": 6, "additions": 6, "deletions": 0}, "files": [{"sha": "d11853d5345232139831a4de803a330fcee349f0", "filename": "src/shims/thread.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c56ef31780c63e03ada0a8282e5d95ba1f082d92/src%2Fshims%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c56ef31780c63e03ada0a8282e5d95ba1f082d92/src%2Fshims%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fthread.rs?ref=c56ef31780c63e03ada0a8282e5d95ba1f082d92", "patch": "@@ -32,6 +32,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         let func_arg = this.read_immediate(arg)?;\n \n+        // Note: the returned value is currently ignored (see the FIXME in\n+        // pthread_join below) because the Rust standard library does not use\n+        // it.\n         let ret_place =\n             this.allocate(this.layout_of(this.tcx.types.usize)?, MiriMemoryKind::Machine.into());\n "}, {"sha": "715107530cefbdbea7698eefe6fc0c035c7de225", "filename": "src/thread.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c56ef31780c63e03ada0a8282e5d95ba1f082d92/src%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c56ef31780c63e03ada0a8282e5d95ba1f082d92/src%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fthread.rs?ref=c56ef31780c63e03ada0a8282e5d95ba1f082d92", "patch": "@@ -358,6 +358,9 @@ impl<'mir, 'tcx: 'mir> ThreadManager<'mir, 'tcx> {\n     /// long as we can and switch only when we have to (the active thread was\n     /// blocked, terminated, or has explicitly asked to be preempted).\n     fn schedule(&mut self) -> InterpResult<'tcx, SchedulingAction> {\n+        // Check whether the thread has **just** terminated (`check_terminated`\n+        // checks whether the thread has popped all its stack and if yes, sets\n+        // the thread state to terminated.)\n         if self.threads[self.active_thread].check_terminated() {\n             // Check if we need to unblock any threads.\n             for (i, thread) in self.threads.iter_enumerated_mut() {"}]}