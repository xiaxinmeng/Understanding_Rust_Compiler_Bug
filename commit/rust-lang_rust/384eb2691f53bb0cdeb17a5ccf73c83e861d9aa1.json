{"sha": "384eb2691f53bb0cdeb17a5ccf73c83e861d9aa1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4NGViMjY5MWY1M2JiMGNkZWIxN2E1Y2NmNzNjODNlODYxZDlhYTE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-09-30T19:49:59Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-09-30T19:58:35Z"}, "message": "rustc_metadata: Do not forget to encode inherent impls for foreign types", "tree": {"sha": "39067ff1278c01632ce935ae975942764ee6cf76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39067ff1278c01632ce935ae975942764ee6cf76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/384eb2691f53bb0cdeb17a5ccf73c83e861d9aa1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/384eb2691f53bb0cdeb17a5ccf73c83e861d9aa1", "html_url": "https://github.com/rust-lang/rust/commit/384eb2691f53bb0cdeb17a5ccf73c83e861d9aa1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/384eb2691f53bb0cdeb17a5ccf73c83e861d9aa1/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d92d28e523bf056ab4eb752510ec52fe4f1c6311", "url": "https://api.github.com/repos/rust-lang/rust/commits/d92d28e523bf056ab4eb752510ec52fe4f1c6311", "html_url": "https://github.com/rust-lang/rust/commit/d92d28e523bf056ab4eb752510ec52fe4f1c6311"}], "stats": {"total": 33, "additions": 25, "deletions": 8}, "files": [{"sha": "f58a792ef585ee28a3576b3d2b99a619d8b34e8c", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/384eb2691f53bb0cdeb17a5ccf73c83e861d9aa1/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/384eb2691f53bb0cdeb17a5ccf73c83e861d9aa1/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=384eb2691f53bb0cdeb17a5ccf73c83e861d9aa1", "patch": "@@ -1753,6 +1753,7 @@ impl EncodeContext<'a, 'tcx> {\n         self.encode_const_stability(def_id);\n         self.encode_deprecation(def_id);\n         self.encode_item_type(def_id);\n+        self.encode_inherent_implementations(def_id);\n         if let hir::ForeignItemKind::Fn(..) = nitem.kind {\n             record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));\n             self.encode_variances_of(def_id);"}, {"sha": "a1efe181843b201a0c7ab1cf6c0ae7e7ed8f6aa1", "filename": "src/test/ui/extern/auxiliary/extern-types-inherent-impl.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/384eb2691f53bb0cdeb17a5ccf73c83e861d9aa1/src%2Ftest%2Fui%2Fextern%2Fauxiliary%2Fextern-types-inherent-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/384eb2691f53bb0cdeb17a5ccf73c83e861d9aa1/src%2Ftest%2Fui%2Fextern%2Fauxiliary%2Fextern-types-inherent-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fauxiliary%2Fextern-types-inherent-impl.rs?ref=384eb2691f53bb0cdeb17a5ccf73c83e861d9aa1", "patch": "@@ -0,0 +1,9 @@\n+#![feature(extern_types)]\n+\n+extern \"C\" {\n+    pub type CrossCrate;\n+}\n+\n+impl CrossCrate {\n+    pub fn foo(&self) {}\n+}"}, {"sha": "3f09ac7b8c38881e52da9cced831cd2cb0366c66", "filename": "src/test/ui/extern/extern-types-inherent-impl.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/384eb2691f53bb0cdeb17a5ccf73c83e861d9aa1/src%2Ftest%2Fui%2Fextern%2Fextern-types-inherent-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/384eb2691f53bb0cdeb17a5ccf73c83e861d9aa1/src%2Ftest%2Fui%2Fextern%2Fextern-types-inherent-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-types-inherent-impl.rs?ref=384eb2691f53bb0cdeb17a5ccf73c83e861d9aa1", "patch": "@@ -1,19 +1,26 @@\n-// run-pass\n-#![allow(dead_code)]\n // Test that inherent impls can be defined for extern types.\n \n+// check-pass\n+// aux-build:extern-types-inherent-impl.rs\n+\n #![feature(extern_types)]\n \n-extern {\n-    type A;\n+extern crate extern_types_inherent_impl;\n+use extern_types_inherent_impl::CrossCrate;\n+\n+extern \"C\" {\n+    type Local;\n }\n \n-impl A {\n-    fn foo(&self) { }\n+impl Local {\n+    fn foo(&self) {}\n }\n \n-fn use_foo(x: &A) {\n+fn use_foo(x: &Local, y: &CrossCrate) {\n+    Local::foo(x);\n     x.foo();\n+    CrossCrate::foo(y);\n+    y.foo();\n }\n \n-fn main() { }\n+fn main() {}"}]}