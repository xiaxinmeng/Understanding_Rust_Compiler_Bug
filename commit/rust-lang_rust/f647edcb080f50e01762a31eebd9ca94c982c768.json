{"sha": "f647edcb080f50e01762a31eebd9ca94c982c768", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2NDdlZGNiMDgwZjUwZTAxNzYyYTMxZWViZDljYTk0Yzk4MmM3Njg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-08-25T17:42:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-25T17:42:27Z"}, "message": "Merge #5884\n\n5884: Add sysroot shortcut to rust-project.json\n r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "9ca14279d566ffa30e779a3178760d17962b624e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ca14279d566ffa30e779a3178760d17962b624e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f647edcb080f50e01762a31eebd9ca94c982c768", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfRU2DCRBK7hj4Ov3rIwAAdHIIACFkB27dpxclSEp7HW6yPsPC\nu0P6qQCz0JoG+m633Q0l4r5OjQPOSItRdQqrDM0QHQtJv6ISZbtaziVs/oxPJINA\nc3SlQ2oBpLzWvotZRQqoVo2FcwXeN4mmf/h9FRGFeSSzUjTaFMfy+uWXZ48RmK+g\nqD1uFI/95sRpOUvRiIaJcVA6fPTRM7RxLYjTJvuvpVik32VWy0tV7pdW9dhX1Nsd\niTFlv5mURz+HmyjD1MHOMMizq/2TrO8tMUMCM8JMMTBIyJdB4wpjZlOw+TXXwBKL\n1MOjoPzwNnT28LpdMZOBA3KVMpKPu8kuRw0FsenyLYB5RvNs6X/Mccmm8C5cvYo=\n=/lP1\n-----END PGP SIGNATURE-----\n", "payload": "tree 9ca14279d566ffa30e779a3178760d17962b624e\nparent 91bedefe491af3bf4eeb13bc7716cc419cafe067\nparent 189521a4db6e51e954f118367e07bb1cc6d2f40d\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1598377347 +0000\ncommitter GitHub <noreply@github.com> 1598377347 +0000\n\nMerge #5884\n\n5884: Add sysroot shortcut to rust-project.json\n r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f647edcb080f50e01762a31eebd9ca94c982c768", "html_url": "https://github.com/rust-lang/rust/commit/f647edcb080f50e01762a31eebd9ca94c982c768", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f647edcb080f50e01762a31eebd9ca94c982c768/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91bedefe491af3bf4eeb13bc7716cc419cafe067", "url": "https://api.github.com/repos/rust-lang/rust/commits/91bedefe491af3bf4eeb13bc7716cc419cafe067", "html_url": "https://github.com/rust-lang/rust/commit/91bedefe491af3bf4eeb13bc7716cc419cafe067"}, {"sha": "189521a4db6e51e954f118367e07bb1cc6d2f40d", "url": "https://api.github.com/repos/rust-lang/rust/commits/189521a4db6e51e954f118367e07bb1cc6d2f40d", "html_url": "https://github.com/rust-lang/rust/commit/189521a4db6e51e954f118367e07bb1cc6d2f40d"}], "stats": {"total": 92, "additions": 70, "deletions": 22}, "files": [{"sha": "2d91939ce0c62d5cc4c912299ba68425f06167e1", "filename": "crates/project_model/src/lib.rs", "status": "modified", "additions": 49, "deletions": 16, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/f647edcb080f50e01762a31eebd9ca94c982c768/crates%2Fproject_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f647edcb080f50e01762a31eebd9ca94c982c768/crates%2Fproject_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Flib.rs?ref=f647edcb080f50e01762a31eebd9ca94c982c768", "patch": "@@ -39,11 +39,18 @@ pub enum ProjectWorkspace {\n impl fmt::Debug for ProjectWorkspace {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self {\n-            ProjectWorkspace::Cargo { cargo, .. } => {\n-                f.debug_struct(\"Cargo\").field(\"n_packages\", &cargo.packages().len()).finish()\n-            }\n+            ProjectWorkspace::Cargo { cargo, sysroot } => f\n+                .debug_struct(\"Cargo\")\n+                .field(\"n_packages\", &cargo.packages().len())\n+                .field(\"n_sysroot_crates\", &sysroot.crates().len())\n+                .finish(),\n             ProjectWorkspace::Json { project } => {\n-                f.debug_struct(\"Json\").field(\"n_crates\", &project.n_crates()).finish()\n+                let mut debug_struct = f.debug_struct(\"Json\");\n+                debug_struct.field(\"n_crates\", &project.n_crates());\n+                if let Some(sysroot) = &project.sysroot {\n+                    debug_struct.field(\"n_sysroot_crates\", &sysroot.crates().len());\n+                }\n+                debug_struct.finish()\n             }\n         }\n     }\n@@ -210,6 +217,13 @@ impl ProjectWorkspace {\n                 })\n                 .collect::<FxHashSet<_>>()\n                 .into_iter()\n+                .chain(project.sysroot.as_ref().into_iter().flat_map(|sysroot| {\n+                    sysroot.crates().map(move |krate| PackageRoot {\n+                        is_member: false,\n+                        include: vec![sysroot[krate].root_dir().to_path_buf()],\n+                        exclude: Vec::new(),\n+                    })\n+                }))\n                 .collect::<Vec<_>>(),\n             ProjectWorkspace::Cargo { cargo, sysroot } => cargo\n                 .packages()\n@@ -272,6 +286,11 @@ impl ProjectWorkspace {\n         let mut crate_graph = CrateGraph::default();\n         match self {\n             ProjectWorkspace::Json { project } => {\n+                let sysroot_dps = project\n+                    .sysroot\n+                    .as_ref()\n+                    .map(|sysroot| sysroot_to_crate_graph(&mut crate_graph, sysroot, target, load));\n+\n                 let mut cfg_cache: FxHashMap<Option<&str>, Vec<CfgFlag>> = FxHashMap::default();\n                 let crates: FxHashMap<_, _> = project\n                     .crates()\n@@ -309,25 +328,33 @@ impl ProjectWorkspace {\n                     .collect();\n \n                 for (from, krate) in project.crates() {\n-                    for dep in &krate.deps {\n-                        let to_crate_id = dep.crate_id;\n-                        if let (Some(&from), Some(&to)) =\n-                            (crates.get(&from), crates.get(&to_crate_id))\n-                        {\n-                            if let Err(_) = crate_graph.add_dep(from, dep.name.clone(), to) {\n-                                log::error!(\"cyclic dependency {:?} -> {:?}\", from, to_crate_id);\n+                    if let Some(&from) = crates.get(&from) {\n+                        if let Some((public_deps, _proc_macro)) = &sysroot_dps {\n+                            for (name, to) in public_deps.iter() {\n+                                if let Err(_) = crate_graph.add_dep(from, name.clone(), *to) {\n+                                    log::error!(\"cyclic dependency on {} for {:?}\", name, from)\n+                                }\n+                            }\n+                        }\n+\n+                        for dep in &krate.deps {\n+                            let to_crate_id = dep.crate_id;\n+                            if let Some(&to) = crates.get(&to_crate_id) {\n+                                if let Err(_) = crate_graph.add_dep(from, dep.name.clone(), to) {\n+                                    log::error!(\"cyclic dependency {:?} -> {:?}\", from, to);\n+                                }\n                             }\n                         }\n                     }\n                 }\n             }\n             ProjectWorkspace::Cargo { cargo, sysroot } => {\n+                let (public_deps, libproc_macro) =\n+                    sysroot_to_crate_graph(&mut crate_graph, sysroot, target, load);\n+\n                 let mut cfg_options = CfgOptions::default();\n                 cfg_options.extend(get_rustc_cfg_options(target));\n \n-                let (public_deps, libproc_macro) =\n-                    sysroot_to_crate_graph(&mut crate_graph, sysroot, &cfg_options, load);\n-\n                 let mut pkg_to_lib_crate = FxHashMap::default();\n                 let mut pkg_crates = FxHashMap::default();\n \n@@ -410,7 +437,11 @@ impl ProjectWorkspace {\n                         }\n                         for (name, krate) in public_deps.iter() {\n                             if let Err(_) = crate_graph.add_dep(from, name.clone(), *krate) {\n-                                log::error!(\"cyclic dependency on core for {}\", &cargo[pkg].name)\n+                                log::error!(\n+                                    \"cyclic dependency on {} for {}\",\n+                                    name,\n+                                    &cargo[pkg].name\n+                                )\n                             }\n                         }\n                     }\n@@ -485,9 +516,11 @@ fn utf8_stdout(mut cmd: Command) -> Result<String> {\n fn sysroot_to_crate_graph(\n     crate_graph: &mut CrateGraph,\n     sysroot: &Sysroot,\n-    cfg_options: &CfgOptions,\n+    target: Option<&str>,\n     load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n ) -> (Vec<(CrateName, CrateId)>, Option<CrateId>) {\n+    let mut cfg_options = CfgOptions::default();\n+    cfg_options.extend(get_rustc_cfg_options(target));\n     let sysroot_crates: FxHashMap<_, _> = sysroot\n         .crates()\n         .filter_map(|krate| {"}, {"sha": "5a0fe749a597846bfae09ee2d5a322866ce7423c", "filename": "crates/project_model/src/project_json.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f647edcb080f50e01762a31eebd9ca94c982c768/crates%2Fproject_model%2Fsrc%2Fproject_json.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f647edcb080f50e01762a31eebd9ca94c982c768/crates%2Fproject_model%2Fsrc%2Fproject_json.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fproject_json.rs?ref=f647edcb080f50e01762a31eebd9ca94c982c768", "patch": "@@ -7,11 +7,12 @@ use paths::{AbsPath, AbsPathBuf};\n use rustc_hash::FxHashMap;\n use serde::{de, Deserialize};\n \n-use crate::cfg_flag::CfgFlag;\n+use crate::{cfg_flag::CfgFlag, Sysroot};\n \n /// Roots and crates that compose this Rust project.\n #[derive(Clone, Debug, Eq, PartialEq)]\n pub struct ProjectJson {\n+    pub(crate) sysroot: Option<Sysroot>,\n     crates: Vec<Crate>,\n }\n \n@@ -34,6 +35,7 @@ pub struct Crate {\n impl ProjectJson {\n     pub fn new(base: &AbsPath, data: ProjectJsonData) -> ProjectJson {\n         ProjectJson {\n+            sysroot: data.sysroot_src.map(|it| base.join(it)).map(|it| Sysroot::load(&it)),\n             crates: data\n                 .crates\n                 .into_iter()\n@@ -43,11 +45,13 @@ impl ProjectJson {\n                             && !crate_data.root_module.starts_with(\"..\")\n                             || crate_data.root_module.starts_with(base)\n                     });\n-                    let root_module = base.join(crate_data.root_module);\n+                    let root_module = base.join(crate_data.root_module).normalize();\n                     let (include, exclude) = match crate_data.source {\n                         Some(src) => {\n                             let absolutize = |dirs: Vec<PathBuf>| {\n-                                dirs.into_iter().map(|it| base.join(it)).collect::<Vec<_>>()\n+                                dirs.into_iter()\n+                                    .map(|it| base.join(it).normalize())\n+                                    .collect::<Vec<_>>()\n                             };\n                             (absolutize(src.include_dirs), absolutize(src.exclude_dirs))\n                         }\n@@ -89,6 +93,7 @@ impl ProjectJson {\n \n #[derive(Deserialize)]\n pub struct ProjectJsonData {\n+    sysroot_src: Option<PathBuf>,\n     crates: Vec<CrateData>,\n }\n "}, {"sha": "144130b51b35b7ef14e11a799dc2680e70a95844", "filename": "docs/user/manual.adoc", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f647edcb080f50e01762a31eebd9ca94c982c768/docs%2Fuser%2Fmanual.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/f647edcb080f50e01762a31eebd9ca94c982c768/docs%2Fuser%2Fmanual.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fmanual.adoc?ref=f647edcb080f50e01762a31eebd9ca94c982c768", "patch": "@@ -273,9 +273,19 @@ However, if you use some other build system, you'll have to describe the structu\n [source,TypeScript]\n ----\n interface JsonProject {\n-   /// The set of crates comprising the current project.\n-   /// Must include all transitive dependencies as well as sysroot crate (libstd, libcore and such).\n-   crates: Crate[];\n+    /// Path to the directory with *source code* of sysroot crates.\n+    ///\n+    /// It should point to the directory where std, core, and friends can be found:\n+    /// https://github.com/rust-lang/rust/tree/master/library.\n+    ///\n+    /// If provided, rust-analyzer automatically adds dependencies on sysroot\n+    /// crates. Conversely, if you omit this path, you can specify sysroot\n+    /// dependencies yourself and, for example, have several different \"sysroots\" in\n+    /// one graph of crates.\n+    sysroot_src?: string;\n+    /// The set of crates comprising the current project.\n+    /// Must include all transitive dependencies as well as sysroot crate (libstd, libcore and such).\n+    crates: Crate[];\n }\n \n interface Crate {"}]}