{"sha": "cdfff98394d01054acbe27f8416e8de2d6178c3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkZmZmOTgzOTRkMDEwNTRhY2JlMjdmODQxNmU4ZGUyZDYxNzhjM2I=", "commit": {"author": {"name": "Vytautas Astrauskas", "email": "vastrauskas@gmail.com", "date": "2021-02-28T13:30:26Z"}, "committer": {"name": "Vytautas Astrauskas", "email": "vastrauskas@gmail.com", "date": "2021-02-28T13:30:26Z"}, "message": "Try to clarify GlobalAlloc::realloc documentation comment.", "tree": {"sha": "f5d00f4e8828a3721bb53b67f142d0e605b6b8d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5d00f4e8828a3721bb53b67f142d0e605b6b8d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cdfff98394d01054acbe27f8416e8de2d6178c3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cdfff98394d01054acbe27f8416e8de2d6178c3b", "html_url": "https://github.com/rust-lang/rust/commit/cdfff98394d01054acbe27f8416e8de2d6178c3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cdfff98394d01054acbe27f8416e8de2d6178c3b/comments", "author": {"login": "vakaras", "id": 75347, "node_id": "MDQ6VXNlcjc1MzQ3", "avatar_url": "https://avatars.githubusercontent.com/u/75347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vakaras", "html_url": "https://github.com/vakaras", "followers_url": "https://api.github.com/users/vakaras/followers", "following_url": "https://api.github.com/users/vakaras/following{/other_user}", "gists_url": "https://api.github.com/users/vakaras/gists{/gist_id}", "starred_url": "https://api.github.com/users/vakaras/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vakaras/subscriptions", "organizations_url": "https://api.github.com/users/vakaras/orgs", "repos_url": "https://api.github.com/users/vakaras/repos", "events_url": "https://api.github.com/users/vakaras/events{/privacy}", "received_events_url": "https://api.github.com/users/vakaras/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vakaras", "id": 75347, "node_id": "MDQ6VXNlcjc1MzQ3", "avatar_url": "https://avatars.githubusercontent.com/u/75347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vakaras", "html_url": "https://github.com/vakaras", "followers_url": "https://api.github.com/users/vakaras/followers", "following_url": "https://api.github.com/users/vakaras/following{/other_user}", "gists_url": "https://api.github.com/users/vakaras/gists{/gist_id}", "starred_url": "https://api.github.com/users/vakaras/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vakaras/subscriptions", "organizations_url": "https://api.github.com/users/vakaras/orgs", "repos_url": "https://api.github.com/users/vakaras/repos", "events_url": "https://api.github.com/users/vakaras/events{/privacy}", "received_events_url": "https://api.github.com/users/vakaras/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e2801c44eadc5cd05532a19fe1093ef6f041abe", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e2801c44eadc5cd05532a19fe1093ef6f041abe", "html_url": "https://github.com/rust-lang/rust/commit/6e2801c44eadc5cd05532a19fe1093ef6f041abe"}], "stats": {"total": 7, "additions": 5, "deletions": 2}, "files": [{"sha": "6dcc110f1539c104ba3a560599bb47ffe7e096ca", "filename": "library/core/src/alloc/global.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cdfff98394d01054acbe27f8416e8de2d6178c3b/library%2Fcore%2Fsrc%2Falloc%2Fglobal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdfff98394d01054acbe27f8416e8de2d6178c3b/library%2Fcore%2Fsrc%2Falloc%2Fglobal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Fglobal.rs?ref=cdfff98394d01054acbe27f8416e8de2d6178c3b", "patch": "@@ -122,7 +122,7 @@ pub unsafe trait GlobalAlloc {\n     ///   this allocator,\n     ///\n     /// * `layout` must be the same layout that was used\n-    ///   to allocate that block of memory,\n+    ///   to allocate that block of memory.\n     #[stable(feature = \"global_alloc\", since = \"1.28.0\")]\n     unsafe fn dealloc(&self, ptr: *mut u8, layout: Layout);\n \n@@ -167,7 +167,10 @@ pub unsafe trait GlobalAlloc {\n     /// and should be considered unusable (unless of course it was\n     /// transferred back to the caller again via the return value of\n     /// this method). The new memory block is allocated with `layout`, but\n-    /// with the `size` updated to `new_size`.\n+    /// with the `size` updated to `new_size`. This new layout should be\n+    /// used when deallocating the new memory block with `dealloc`. The range\n+    /// `0..min(layout.size(), new_size)` of the new memory block is\n+    /// guaranteed to have the same values as the original block.\n     ///\n     /// If this method returns null, then ownership of the memory\n     /// block has not been transferred to this allocator, and the"}]}