{"sha": "a203482d2a20cba0c86298334ebd74438bd477ba", "node_id": "C_kwDOAAsO6NoAKGEyMDM0ODJkMmEyMGNiYTBjODYyOTgzMzRlYmQ3NDQzOGJkNDc3YmE", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-11-03T23:02:29Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-11-04T03:24:41Z"}, "message": "Inline and remove `validate_int_literal`.\n\nIt has a single callsite, and is fairly small. The `Float` match arm\nalready has base-specific checking inline, so this makes things more\nconsistent.", "tree": {"sha": "33ce0a61da56470c5a5242eca33f887b64fc1656", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33ce0a61da56470c5a5242eca33f887b64fc1656"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a203482d2a20cba0c86298334ebd74438bd477ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a203482d2a20cba0c86298334ebd74438bd477ba", "html_url": "https://github.com/rust-lang/rust/commit/a203482d2a20cba0c86298334ebd74438bd477ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a203482d2a20cba0c86298334ebd74438bd477ba/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d963686f5a87b9eaa2ac2bdc29ddb796e0e83f1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d963686f5a87b9eaa2ac2bdc29ddb796e0e83f1f", "html_url": "https://github.com/rust-lang/rust/commit/d963686f5a87b9eaa2ac2bdc29ddb796e0e83f1f"}], "stats": {"total": 41, "additions": 18, "deletions": 23}, "files": [{"sha": "0d29d7b1e3d9b04b3d926e4e75d4045a8d2026ab", "filename": "compiler/rustc_lexer/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a203482d2a20cba0c86298334ebd74438bd477ba/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a203482d2a20cba0c86298334ebd74438bd477ba/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Flib.rs?ref=a203482d2a20cba0c86298334ebd74438bd477ba", "patch": "@@ -203,13 +203,13 @@ pub enum RawStrError {\n #[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]\n pub enum Base {\n     /// Literal starts with \"0b\".\n-    Binary,\n+    Binary = 2,\n     /// Literal starts with \"0o\".\n-    Octal,\n-    /// Literal starts with \"0x\".\n-    Hexadecimal,\n+    Octal = 8,\n     /// Literal doesn't contain a prefix.\n-    Decimal,\n+    Decimal = 10,\n+    /// Literal starts with \"0x\".\n+    Hexadecimal = 16,\n }\n \n /// `rustc` allows files to have a shebang, e.g. \"#!/usr/bin/rustrun\","}, {"sha": "9de0c74f4b1d2f28c654425e8f1c2802b71ddf54", "filename": "compiler/rustc_parse/src/lexer/mod.rs", "status": "modified", "additions": 13, "deletions": 18, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a203482d2a20cba0c86298334ebd74438bd477ba/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a203482d2a20cba0c86298334ebd74438bd477ba/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs?ref=a203482d2a20cba0c86298334ebd74438bd477ba", "patch": "@@ -437,7 +437,19 @@ impl<'a> StringReader<'a> {\n                         .emit();\n                     (token::Integer, sym::integer(0))\n                 } else {\n-                    self.validate_int_literal(base, start, end);\n+                    if matches!(base, Base::Binary | Base::Octal) {\n+                        let base = base as u32;\n+                        let s = self.str_from_to(start + BytePos(2), end);\n+                        for (idx, c) in s.char_indices() {\n+                            if c != '_' && c.to_digit(base).is_none() {\n+                                self.err_span_(\n+                                    start + BytePos::from_usize(2 + idx),\n+                                    start + BytePos::from_usize(2 + idx + c.len_utf8()),\n+                                    &format!(\"invalid digit for a base {} literal\", base),\n+                                );\n+                            }\n+                        }\n+                    }\n                     (token::Integer, self.symbol_from_to(start, end))\n                 }\n             }\n@@ -683,23 +695,6 @@ impl<'a> StringReader<'a> {\n         });\n         (kind, Symbol::intern(lit_content))\n     }\n-\n-    fn validate_int_literal(&self, base: Base, content_start: BytePos, content_end: BytePos) {\n-        let base = match base {\n-            Base::Binary => 2,\n-            Base::Octal => 8,\n-            _ => return,\n-        };\n-        let s = self.str_from_to(content_start + BytePos(2), content_end);\n-        for (idx, c) in s.char_indices() {\n-            let idx = idx as u32;\n-            if c != '_' && c.to_digit(base).is_none() {\n-                let lo = content_start + BytePos(2 + idx);\n-                let hi = content_start + BytePos(2 + idx + c.len_utf8() as u32);\n-                self.err_span_(lo, hi, &format!(\"invalid digit for a base {} literal\", base));\n-            }\n-        }\n-    }\n }\n \n pub fn nfc_normalize(string: &str) -> Symbol {"}]}