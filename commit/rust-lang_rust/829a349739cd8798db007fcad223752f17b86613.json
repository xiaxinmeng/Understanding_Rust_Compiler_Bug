{"sha": "829a349739cd8798db007fcad223752f17b86613", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyOWEzNDk3MzljZDg3OThkYjAwN2ZjYWQyMjM3NTJmMTdiODY2MTM=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-12-04T19:08:25Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-12-08T09:02:26Z"}, "message": "incr.comp: Cache results of more queries.", "tree": {"sha": "17b3d3a94917cca4483834003200af78acc203bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17b3d3a94917cca4483834003200af78acc203bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/829a349739cd8798db007fcad223752f17b86613", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/829a349739cd8798db007fcad223752f17b86613", "html_url": "https://github.com/rust-lang/rust/commit/829a349739cd8798db007fcad223752f17b86613", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/829a349739cd8798db007fcad223752f17b86613/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f4b09ee480aab38e466700563e2a6276f9a73e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f4b09ee480aab38e466700563e2a6276f9a73e7", "html_url": "https://github.com/rust-lang/rust/commit/5f4b09ee480aab38e466700563e2a6276f9a73e7"}], "stats": {"total": 91, "additions": 90, "deletions": 1}, "files": [{"sha": "2d0a3799178a5c90f1fde58cb17f49364f2fe334", "filename": "src/librustc/ty/maps/config.rs", "status": "modified", "additions": 77, "deletions": 1, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/829a349739cd8798db007fcad223752f17b86613/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/829a349739cd8798db007fcad223752f17b86613/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs?ref=829a349739cd8798db007fcad223752f17b86613", "patch": "@@ -27,14 +27,15 @@ pub trait QueryConfig {\n pub(super) trait QueryDescription<'tcx>: QueryConfig {\n     fn describe(tcx: TyCtxt, key: Self::Key) -> String;\n \n+    #[inline]\n     fn cache_on_disk(_: Self::Key) -> bool {\n         false\n     }\n \n     fn try_load_from_disk(_: TyCtxt<'_, 'tcx, 'tcx>,\n                           _: SerializedDepNodeIndex)\n                           -> Option<Self::Value> {\n-        bug!(\"QueryDescription::load_from_disk() called for unsupport query.\")\n+        bug!(\"QueryDescription::load_from_disk() called for an unsupported query.\")\n     }\n }\n \n@@ -166,6 +167,18 @@ impl<'tcx> QueryDescription<'tcx> for queries::symbol_name<'tcx> {\n     fn describe(_tcx: TyCtxt, instance: ty::Instance<'tcx>) -> String {\n         format!(\"computing the symbol for `{}`\", instance)\n     }\n+\n+    #[inline]\n+    fn cache_on_disk(_: Self::Key) -> bool {\n+        true\n+    }\n+\n+    #[inline]\n+    fn try_load_from_disk<'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                              id: SerializedDepNodeIndex)\n+                              -> Option<Self::Value> {\n+        tcx.on_disk_query_result_cache.try_load_query_result(tcx, id)\n+    }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::describe_def<'tcx> {\n@@ -234,6 +247,18 @@ impl<'tcx> QueryDescription<'tcx> for queries::const_is_rvalue_promotable_to_sta\n         format!(\"const checking if rvalue is promotable to static `{}`\",\n             tcx.item_path_str(def_id))\n     }\n+\n+    #[inline]\n+    fn cache_on_disk(_: Self::Key) -> bool {\n+        true\n+    }\n+\n+    #[inline]\n+    fn try_load_from_disk<'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                          id: SerializedDepNodeIndex)\n+                          -> Option<Self::Value> {\n+        tcx.on_disk_query_result_cache.try_load_query_result(tcx, id)\n+    }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::rvalue_promotable_map<'tcx> {\n@@ -254,6 +279,18 @@ impl<'tcx> QueryDescription<'tcx> for queries::trans_fulfill_obligation<'tcx> {\n     fn describe(tcx: TyCtxt, key: (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>)) -> String {\n         format!(\"checking if `{}` fulfills its obligations\", tcx.item_path_str(key.1.def_id()))\n     }\n+\n+    #[inline]\n+    fn cache_on_disk(_: Self::Key) -> bool {\n+        true\n+    }\n+\n+    #[inline]\n+    fn try_load_from_disk<'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                              id: SerializedDepNodeIndex)\n+                              -> Option<Self::Value> {\n+        tcx.on_disk_query_result_cache.try_load_query_result(tcx, id)\n+    }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::trait_impls_of<'tcx> {\n@@ -567,3 +604,42 @@ impl<'tcx> QueryDescription<'tcx> for queries::typeck_tables_of<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription<'tcx> for queries::optimized_mir<'tcx> {\n+    #[inline]\n+    fn cache_on_disk(def_id: Self::Key) -> bool {\n+        def_id.is_local()\n+    }\n+\n+    fn try_load_from_disk<'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                          id: SerializedDepNodeIndex)\n+                          -> Option<Self::Value> {\n+        let mir: Option<::mir::Mir<'tcx>> = tcx.on_disk_query_result_cache\n+                                               .try_load_query_result(tcx, id);\n+        mir.map(|x| tcx.alloc_mir(x))\n+    }\n+}\n+\n+macro_rules! impl_disk_cacheable_query(\n+    ($query_name:ident, |$key:tt| $cond:expr) => {\n+        impl<'tcx> QueryDescription<'tcx> for queries::$query_name<'tcx> {\n+            #[inline]\n+            fn cache_on_disk($key: Self::Key) -> bool {\n+                $cond\n+            }\n+\n+            #[inline]\n+            fn try_load_from_disk<'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                      id: SerializedDepNodeIndex)\n+                                      -> Option<Self::Value> {\n+                tcx.on_disk_query_result_cache.try_load_query_result(tcx, id)\n+            }\n+        }\n+    }\n+);\n+\n+impl_disk_cacheable_query!(unsafety_check_result, |def_id| def_id.is_local());\n+impl_disk_cacheable_query!(borrowck, |def_id| def_id.is_local());\n+impl_disk_cacheable_query!(mir_borrowck, |def_id| def_id.is_local());\n+impl_disk_cacheable_query!(mir_const_qualif, |def_id| def_id.is_local());\n+impl_disk_cacheable_query!(contains_extern_indicator, |_| true);\n+impl_disk_cacheable_query!(def_symbol_name, |_| true);"}, {"sha": "079b518efd8981b49dc64c9e487e55529338028f", "filename": "src/librustc/ty/maps/on_disk_cache.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/829a349739cd8798db007fcad223752f17b86613/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/829a349739cd8798db007fcad223752f17b86613/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs?ref=829a349739cd8798db007fcad223752f17b86613", "patch": "@@ -207,6 +207,16 @@ impl<'sess> OnDiskCache<'sess> {\n \n             // Encode TypeckTables\n             encode_query_results::<typeck_tables_of, _>(tcx, enc, qri)?;\n+            encode_query_results::<optimized_mir, _>(tcx, enc, qri)?;\n+            encode_query_results::<unsafety_check_result, _>(tcx, enc, qri)?;\n+            encode_query_results::<borrowck, _>(tcx, enc, qri)?;\n+            encode_query_results::<mir_borrowck, _>(tcx, enc, qri)?;\n+            encode_query_results::<mir_const_qualif, _>(tcx, enc, qri)?;\n+            encode_query_results::<def_symbol_name, _>(tcx, enc, qri)?;\n+            encode_query_results::<const_is_rvalue_promotable_to_static, _>(tcx, enc, qri)?;\n+            encode_query_results::<contains_extern_indicator, _>(tcx, enc, qri)?;\n+            encode_query_results::<symbol_name, _>(tcx, enc, qri)?;\n+            encode_query_results::<trans_fulfill_obligation, _>(tcx, enc, qri)?;\n         }\n \n         // Encode diagnostics"}, {"sha": "ec6d190b8bde9478011fc353bed8a6adf1a1b782", "filename": "src/librustc/ty/maps/plumbing.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/829a349739cd8798db007fcad223752f17b86613/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/829a349739cd8798db007fcad223752f17b86613/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs?ref=829a349739cd8798db007fcad223752f17b86613", "patch": "@@ -974,4 +974,7 @@ impl_load_from_cache!(\n     BorrowCheck => borrowck,\n     MirBorrowCheck => mir_borrowck,\n     MirConstQualif => mir_const_qualif,\n+    SymbolName => def_symbol_name,\n+    ConstIsRvaluePromotableToStatic => const_is_rvalue_promotable_to_static,\n+    ContainsExternIndicator => contains_extern_indicator,\n );"}]}