{"sha": "026a67377f2b28968d293a92cad3f92e22f76b6d", "node_id": "C_kwDOAAsO6NoAKDAyNmE2NzM3N2YyYjI4OTY4ZDI5M2E5MmNhZDNmOTJlMjJmNzZiNmQ", "commit": {"author": {"name": "Bryan Garza", "email": "1396101+bryangarza@users.noreply.github.com", "date": "2022-12-29T03:38:34Z"}, "committer": {"name": "Bryan Garza", "email": "1396101+bryangarza@users.noreply.github.com", "date": "2023-01-23T23:56:22Z"}, "message": "Clean up CtfeLimit MirPass", "tree": {"sha": "b804e63dafc72083b7ac300b48055748f57a0c67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b804e63dafc72083b7ac300b48055748f57a0c67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/026a67377f2b28968d293a92cad3f92e22f76b6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/026a67377f2b28968d293a92cad3f92e22f76b6d", "html_url": "https://github.com/rust-lang/rust/commit/026a67377f2b28968d293a92cad3f92e22f76b6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/026a67377f2b28968d293a92cad3f92e22f76b6d/comments", "author": {"login": "bryangarza", "id": 1396101, "node_id": "MDQ6VXNlcjEzOTYxMDE=", "avatar_url": "https://avatars.githubusercontent.com/u/1396101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bryangarza", "html_url": "https://github.com/bryangarza", "followers_url": "https://api.github.com/users/bryangarza/followers", "following_url": "https://api.github.com/users/bryangarza/following{/other_user}", "gists_url": "https://api.github.com/users/bryangarza/gists{/gist_id}", "starred_url": "https://api.github.com/users/bryangarza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bryangarza/subscriptions", "organizations_url": "https://api.github.com/users/bryangarza/orgs", "repos_url": "https://api.github.com/users/bryangarza/repos", "events_url": "https://api.github.com/users/bryangarza/events{/privacy}", "received_events_url": "https://api.github.com/users/bryangarza/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bryangarza", "id": 1396101, "node_id": "MDQ6VXNlcjEzOTYxMDE=", "avatar_url": "https://avatars.githubusercontent.com/u/1396101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bryangarza", "html_url": "https://github.com/bryangarza", "followers_url": "https://api.github.com/users/bryangarza/followers", "following_url": "https://api.github.com/users/bryangarza/following{/other_user}", "gists_url": "https://api.github.com/users/bryangarza/gists{/gist_id}", "starred_url": "https://api.github.com/users/bryangarza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bryangarza/subscriptions", "organizations_url": "https://api.github.com/users/bryangarza/orgs", "repos_url": "https://api.github.com/users/bryangarza/repos", "events_url": "https://api.github.com/users/bryangarza/events{/privacy}", "received_events_url": "https://api.github.com/users/bryangarza/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "360db516ccf358bd4b35c483ae44634a74c66c0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/360db516ccf358bd4b35c483ae44634a74c66c0b", "html_url": "https://github.com/rust-lang/rust/commit/360db516ccf358bd4b35c483ae44634a74c66c0b"}], "stats": {"total": 142, "additions": 68, "deletions": 74}, "files": [{"sha": "f2c99b19433075ba8009b295f199c8dfbdae73ce", "filename": "compiler/rustc_mir_transform/src/ctfe_limit.rs", "status": "modified", "additions": 31, "deletions": 74, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/026a67377f2b28968d293a92cad3f92e22f76b6d/compiler%2Frustc_mir_transform%2Fsrc%2Fctfe_limit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/026a67377f2b28968d293a92cad3f92e22f76b6d/compiler%2Frustc_mir_transform%2Fsrc%2Fctfe_limit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fctfe_limit.rs?ref=026a67377f2b28968d293a92cad3f92e22f76b6d", "patch": "@@ -1,92 +1,49 @@\n use crate::MirPass;\n \n-use rustc_middle::mir::{BasicBlock, Body, Statement, StatementKind, TerminatorKind};\n+use rustc_middle::mir::{BasicBlockData, Body, Statement, StatementKind, TerminatorKind};\n use rustc_middle::ty::TyCtxt;\n \n-use tracing::{info, instrument};\n-\n pub struct CtfeLimit;\n \n impl<'tcx> MirPass<'tcx> for CtfeLimit {\n     #[instrument(skip(self, _tcx, body))]\n     fn run_pass(&self, _tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         let doms = body.basic_blocks.dominators();\n-        //info!(\"Got body with {} basic blocks: {:#?}\", body.basic_blocks.len(), body.basic_blocks);\n-        //info!(\"With doms: {doms:?}\");\n-\n-        /*\n-        for (index, basic_block) in body.basic_blocks.iter().enumerate() {\n-            info!(\"bb{index}: {basic_block:#?}\")\n-        }*/\n-        for (index, basic_block) in body.basic_blocks.iter().enumerate() {\n-            info!(\n-                \"bb{index} -> successors = {:?}\",\n-                basic_block.terminator().successors().collect::<Vec<BasicBlock>>()\n-            );\n-        }\n-        for (index, basic_block) in body.basic_blocks.iter().enumerate() {\n-            info!(\"bb{index} -> unwind = {:?}\", basic_block.terminator().unwind())\n-        }\n-\n-        let mut dominators = Vec::new();\n-        for idom in 0..body.basic_blocks.len() {\n-            let mut nodes = Vec::new();\n-            for inode in 0..body.basic_blocks.len() {\n-                let dom = BasicBlock::from_usize(idom);\n-                let node = BasicBlock::from_usize(inode);\n-                if doms.is_reachable(dom)\n+        let mut indices = Vec::new();\n+        for (node, node_data) in body.basic_blocks.iter_enumerated() {\n+            if let TerminatorKind::Call { .. } = node_data.terminator().kind {\n+                indices.push(node);\n+                continue;\n+            }\n+            // Back edges in a CFG indicate loops\n+            for (potential_dom, _) in body.basic_blocks.iter_enumerated() {\n+                if doms.is_reachable(potential_dom)\n                     && doms.is_reachable(node)\n-                    && doms.is_dominated_by(node, dom)\n+                    && doms.is_dominated_by(node, potential_dom)\n+                    && node_data\n+                        .terminator()\n+                        .successors()\n+                        .into_iter()\n+                        .any(|succ| succ == potential_dom)\n                 {\n-                    //info!(\"{idom} dominates {inode}\");\n-                    nodes.push(true);\n-                } else {\n-                    nodes.push(false);\n+                    indices.push(node);\n+                    continue;\n                 }\n             }\n-            dominators.push(nodes);\n         }\n-        /*\n-        for idom in 0..body.basic_blocks.len() {\n-            print!(\"{idom} | dom | \");\n-            for inode in 0..body.basic_blocks.len() {\n-                if dominators[idom][inode] {\n-                    print!(\"{inode} | \");\n-                } else {\n-                    print!(\"  | \");\n-                }\n-            }\n-            print!(\"\\n\");\n-        }\n-        */\n-\n-        for (index, basic_block) in body.basic_blocks_mut().iter_mut().enumerate() {\n-            // info!(\"bb{index}: {basic_block:#?}\");\n-            //info!(\"bb{index} -> successors = {:?}\", basic_block.terminator().successors().collect::<Vec<BasicBlock>>());\n-            let is_back_edge_or_fn_call = 'label: {\n-                match basic_block.terminator().kind {\n-                    TerminatorKind::Call { .. } => {\n-                        break 'label true;\n-                    }\n-                    _ => (),\n-                }\n-                for successor in basic_block.terminator().successors() {\n-                    let s_index = successor.as_usize();\n-                    if dominators[s_index][index] {\n-                        info!(\"{s_index} to {index} is a loop\");\n-                        break 'label true;\n-                    }\n-                }\n-                false\n-            };\n-            if is_back_edge_or_fn_call {\n-                basic_block.statements.push(Statement {\n-                    source_info: basic_block.terminator().source_info,\n-                    kind: StatementKind::ConstEvalCounter,\n-                });\n-                info!(\"New basic block statements vector: {:?}\", basic_block.statements);\n-            }\n+        for index in indices {\n+            insert_counter(\n+                body.basic_blocks_mut()\n+                    .get_mut(index)\n+                    .expect(\"basic_blocks index {index} should exist\"),\n+            );\n         }\n-        info!(\"With doms: {doms:?}\");\n     }\n }\n+\n+fn insert_counter(basic_block_data: &mut BasicBlockData<'_>) {\n+    basic_block_data.statements.push(Statement {\n+        source_info: basic_block_data.terminator().source_info,\n+        kind: StatementKind::ConstEvalCounter,\n+    });\n+}"}, {"sha": "33488bd1d1c55bd1076581d32b61bc58b789f94b", "filename": "src/test/ui/consts/const-eval/stable-metric/ctfe-fn-call.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/026a67377f2b28968d293a92cad3f92e22f76b6d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-fn-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/026a67377f2b28968d293a92cad3f92e22f76b6d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-fn-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-fn-call.rs?ref=026a67377f2b28968d293a92cad3f92e22f76b6d", "patch": "@@ -0,0 +1,33 @@\n+// check-pass\n+\n+const fn foo() {}\n+\n+const fn call_foo() -> u32 {\n+    foo();\n+    foo();\n+    foo();\n+    foo();\n+    foo();\n+    foo();\n+    foo();\n+    foo();\n+    foo();\n+    foo();\n+    foo();\n+    foo();\n+    foo();\n+    foo();\n+    foo();\n+    foo();\n+    foo();\n+    foo();\n+    foo();\n+    foo();\n+    0\n+}\n+\n+const X: u32 = call_foo();\n+\n+fn main() {\n+    println!(\"{X}\");\n+}"}, {"sha": "183bed3b75b253e4980d49d9bb69cecc4123dc01", "filename": "src/test/ui/consts/const-eval/stable-metric/ctfe-fn-call.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/026a67377f2b28968d293a92cad3f92e22f76b6d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-fn-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/026a67377f2b28968d293a92cad3f92e22f76b6d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-fn-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-fn-call.stderr?ref=026a67377f2b28968d293a92cad3f92e22f76b6d", "patch": "@@ -0,0 +1,4 @@\n+warning: Const eval counter limit (20) has been crossed\n+\n+warning: 1 warning emitted\n+"}]}