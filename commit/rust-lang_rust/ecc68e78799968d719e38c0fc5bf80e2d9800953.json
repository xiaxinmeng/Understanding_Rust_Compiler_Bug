{"sha": "ecc68e78799968d719e38c0fc5bf80e2d9800953", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjYzY4ZTc4Nzk5OTY4ZDcxOWUzOGMwZmM1YmY4MGUyZDk4MDA5NTM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-05-31T14:33:09Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-06-08T17:24:16Z"}, "message": "Replace Pin::new with .as_mut()", "tree": {"sha": "d19a47bce843fbaf1ffbda72516b95d9c91671bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d19a47bce843fbaf1ffbda72516b95d9c91671bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ecc68e78799968d719e38c0fc5bf80e2d9800953", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ecc68e78799968d719e38c0fc5bf80e2d9800953", "html_url": "https://github.com/rust-lang/rust/commit/ecc68e78799968d719e38c0fc5bf80e2d9800953", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ecc68e78799968d719e38c0fc5bf80e2d9800953/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bddf151deac83ad9306c31806ebacfede93e4b99", "url": "https://api.github.com/repos/rust-lang/rust/commits/bddf151deac83ad9306c31806ebacfede93e4b99", "html_url": "https://github.com/rust-lang/rust/commit/bddf151deac83ad9306c31806ebacfede93e4b99"}], "stats": {"total": 8, "additions": 5, "deletions": 3}, "files": [{"sha": "e888af97dc11335750957914bfe85a50daf74ee4", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ecc68e78799968d719e38c0fc5bf80e2d9800953/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecc68e78799968d719e38c0fc5bf80e2d9800953/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=ecc68e78799968d719e38c0fc5bf80e2d9800953", "patch": "@@ -140,7 +140,7 @@ impl BoxedResolver {\n         let mut generator = Box::pin(generator);\n \n         // Run it to the first yield to set it up\n-        let init = match Pin::new(&mut generator).resume(Action::Initial) {\n+        let init = match generator.as_mut().resume(Action::Initial) {\n             GeneratorState::Yielded(YieldType::Initial(y)) => y,\n             _ => panic!(),\n         };\n@@ -162,7 +162,9 @@ impl BoxedResolver {\n         // Get the generator to call our closure\n         unsafe {\n             // Call the generator, which in turn will call the closure\n-            if let GeneratorState::Complete(_) = Pin::new(&mut self.generator)\n+            if let GeneratorState::Complete(_) = self\n+                .generator\n+                .as_mut()\n                 .resume(Action::Access(AccessAction(::std::mem::transmute(mut_f))))\n             {\n                 panic!()\n@@ -175,7 +177,7 @@ impl BoxedResolver {\n \n     pub fn complete(mut self) -> ResolverOutputs {\n         // Tell the generator we want it to complete, consuming it and yielding a result\n-        let result = Pin::new(&mut self.generator).resume(Action::Complete);\n+        let result = self.generator.as_mut().resume(Action::Complete);\n         if let GeneratorState::Complete(r) = result { r } else { panic!() }\n     }\n "}]}