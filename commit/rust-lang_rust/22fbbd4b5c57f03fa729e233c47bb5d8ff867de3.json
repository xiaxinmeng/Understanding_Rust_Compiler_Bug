{"sha": "22fbbd4b5c57f03fa729e233c47bb5d8ff867de3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyZmJiZDRiNWM1N2YwM2ZhNzI5ZTIzM2M0N2JiNWQ4ZmY4NjdkZTM=", "commit": {"author": {"name": "Jonathan Hansford", "email": "dangthrimble@hansfords.net", "date": "2015-08-18T19:37:27Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-10-09T16:06:51Z"}, "message": "Some tidying up\n\nImproving the use of 2nd and 3rd person\nAdding a few contractions to make the text less formal\nTidying up some notes\nProviding a little bit more clarification for Windows users", "tree": {"sha": "7514dacc573321b9484b2d8f6bf346d822282b4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7514dacc573321b9484b2d8f6bf346d822282b4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22fbbd4b5c57f03fa729e233c47bb5d8ff867de3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22fbbd4b5c57f03fa729e233c47bb5d8ff867de3", "html_url": "https://github.com/rust-lang/rust/commit/22fbbd4b5c57f03fa729e233c47bb5d8ff867de3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22fbbd4b5c57f03fa729e233c47bb5d8ff867de3/comments", "author": {"login": "Dangthrimble", "id": 1872986, "node_id": "MDQ6VXNlcjE4NzI5ODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1872986?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dangthrimble", "html_url": "https://github.com/Dangthrimble", "followers_url": "https://api.github.com/users/Dangthrimble/followers", "following_url": "https://api.github.com/users/Dangthrimble/following{/other_user}", "gists_url": "https://api.github.com/users/Dangthrimble/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dangthrimble/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dangthrimble/subscriptions", "organizations_url": "https://api.github.com/users/Dangthrimble/orgs", "repos_url": "https://api.github.com/users/Dangthrimble/repos", "events_url": "https://api.github.com/users/Dangthrimble/events{/privacy}", "received_events_url": "https://api.github.com/users/Dangthrimble/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f116ab58b2d7e600d1530a25a41a64af2ca19c91", "url": "https://api.github.com/repos/rust-lang/rust/commits/f116ab58b2d7e600d1530a25a41a64af2ca19c91", "html_url": "https://github.com/rust-lang/rust/commit/f116ab58b2d7e600d1530a25a41a64af2ca19c91"}], "stats": {"total": 169, "additions": 86, "deletions": 83}, "files": [{"sha": "3cf9538ac0b84ab7b187810a102575c052de7eb8", "filename": "src/doc/trpl/README.md", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/22fbbd4b5c57f03fa729e233c47bb5d8ff867de3/src%2Fdoc%2Ftrpl%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/22fbbd4b5c57f03fa729e233c47bb5d8ff867de3/src%2Fdoc%2Ftrpl%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2FREADME.md?ref=22fbbd4b5c57f03fa729e233c47bb5d8ff867de3", "patch": "@@ -1,6 +1,6 @@\n % The Rust Programming Language\n \n-Welcome! This book will teach us about the [Rust Programming Language][rust].\n+Welcome! This book will teach you about the [Rust Programming Language][rust].\n Rust is a systems programming language focused on three goals: safety, speed,\n and concurrency. It maintains these goals without having a garbage collector,\n making it a useful language for a number of use cases other languages aren\u2019t\n@@ -17,7 +17,7 @@ Even then, Rust still allows precise control like a low-level language would.\n \u201cThe Rust Programming Language\u201d is split into eight sections. This introduction\n is the first. After this:\n \n-* [Getting started][gs] - Set up our computer for Rust development.\n+* [Getting started][gs] - Set up your computer for Rust development.\n * [Learn Rust][lr] - Learn Rust programming through small projects.\n * [Effective Rust][er] - Higher-level concepts for writing excellent Rust code.\n * [Syntax and Semantics][ss] - Each bit of Rust, broken down into small chunks.\n@@ -33,11 +33,11 @@ is the first. After this:\n [gl]: glossary.html\n [bi]: bibliography.html\n \n-After reading this introduction, we\u2019ll want to dive into either \u2018Learn Rust\u2019 or\n-\u2018Syntax and Semantics\u2019, depending on our preference: \u2018Learn Rust\u2019 if we want to\n-dive in with a project, or \u2018Syntax and Semantics\u2019 if we prefer to start small,\n-and learn a single concept thoroughly before moving onto the next. Copious\n-cross-linking connects these parts together.\n+After reading this introduction, you\u2019ll want to dive into either \u2018Learn Rust\u2019 or\n+\u2018Syntax and Semantics\u2019, depending on your preference: \u2018Learn Rust\u2019 if you want\n+to dive in with a project, or \u2018Syntax and Semantics\u2019 if you prefer to start\n+small, and learn a single concept thoroughly before moving onto the next.\n+Copious cross-linking connects these parts together.\n \n ### Contributing\n \n@@ -46,7 +46,7 @@ The source files from which this book is generated can be found on Github:\n \n ## A brief introduction to Rust\n \n-Is Rust a language we might be interested in? Let\u2019s examine a few small code\n+Is Rust a language you might be interested in? Let\u2019s examine a few small code\n samples to show off a few of its strengths.\n \n The main concept that makes Rust unique is called \u2018ownership\u2019. Consider this\n@@ -76,7 +76,7 @@ annotating types.\n \n Rust prefers stack allocation to heap allocation: `x` is placed directly on the\n stack. However, the `Vec<T>` type allocates space for the elements of the vector\n-on the heap. If we\u2019re not familiar with this distinction, we can ignore it for\n+on the heap. If you\u2019re not familiar with this distinction, you can ignore it for\n now, or check out [\u2018The Stack and the Heap\u2019][heap]. As a systems programming\n language, Rust gives us the ability to control how our memory is allocated, but\n when we\u2019re getting started, it\u2019s less of a big deal.\n@@ -104,13 +104,13 @@ fn main() {\n }\n ```\n \n-We\u2019ve introduced another binding, `y`. In this case, `y` is a \u2018reference\u2019 to\n-the first element of the vector. Rust\u2019s references are similar to pointers in\n-other languages, but with additional compile-time safety checks. References\n-interact with the ownership system by [\u2018borrowing\u2019][borrowing] what they point\n-to, rather than owning it. The difference is, when the reference goes out of\n-scope, it will not deallocate the underlying memory. If it did, we\u2019d\n-de-allocate twice, which is bad!\n+We\u2019ve introduced another binding, `y`. In this case, `y` is a \u2018reference\u2019 to the\n+first element of the vector. Rust\u2019s references are similar to pointers in other\n+languages, but with additional compile-time safety checks. References interact\n+with the ownership system by [\u2018borrowing\u2019][borrowing] what they point to, rather\n+than owning it. The difference is, when the reference goes out of scope, it\n+won't deallocate the underlying memory. If it did, we\u2019d de-allocate twice, which\n+is bad!\n \n [borrowing]: references-and-borrowing.html\n \n@@ -146,7 +146,7 @@ fn main() {\n \n Whew! The Rust compiler gives quite detailed errors at times, and this is one\n of those times. As the error explains, while we made our binding mutable, we\n-still cannot call `push`. This is because we already have a reference to an\n+still can't call `push`. This is because we already have a reference to an\n element of the vector, `y`. Mutating something while another reference exists\n is dangerous, because we may invalidate the reference. In this specific case,\n when we create the vector, we may have only allocated space for two elements."}, {"sha": "b155a4287e879a403228333864cface493b449d1", "filename": "src/doc/trpl/hello-cargo.md", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/22fbbd4b5c57f03fa729e233c47bb5d8ff867de3/src%2Fdoc%2Ftrpl%2Fhello-cargo.md", "raw_url": "https://github.com/rust-lang/rust/raw/22fbbd4b5c57f03fa729e233c47bb5d8ff867de3/src%2Fdoc%2Ftrpl%2Fhello-cargo.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fhello-cargo.md?ref=22fbbd4b5c57f03fa729e233c47bb5d8ff867de3", "patch": "@@ -13,9 +13,10 @@ any dependencies, so we\u2019ll only be using the first part of its functionality.\n Eventually, we\u2019ll add more. Since we started off by using Cargo, it'll be easy\n to add later.\n \n-If we installed Rust via the official installers we will also have Cargo. If we\n-installed Rust some other way, we may want to [check the Cargo\n-README][cargoreadme] for specific instructions about installing it.\n+If you installed Rust via the official installers you will also have Cargo. If\n+you installed Rust some other way, you may want to\n+[check the Cargo README][cargoreadme] for specific instructions about installing\n+it.\n \n [cargoreadme]: https://github.com/rust-lang/cargo#installing-cargo-from-nightlies\n \n@@ -30,14 +31,14 @@ old executable (`main.exe` on Windows, `main` everywhere else). Let's do that pa\n ```bash\n $ mkdir src\n $ mv main.rs src/main.rs\n-$ rm main  # or main.exe on Windows\n+$ rm main  # or 'rm main.exe' on Windows\n ```\n \n-Note that since we're creating an executable, we retain `main.rs` as the source\n-filename. If we want to make a library instead, we should use `lib.rs`. This\n-convention is used by Cargo to successfully compile our projects, but it can be\n-overridden if we wish. Custom file locations for the entry point can be\n-specified with a [`[lib]` or `[[bin]]`][crates-custom] key in the TOML file.\n+> Note: since we're creating an executable, we retain `main.rs` as the source\n+> filename. If we want to make a library instead, we should use `lib.rs`. This\n+> convention is used by Cargo to successfully compile our projects, but it can\n+> be overridden if we wish. Custom file locations for the entry point can be\n+> specified with a [`[lib]` or `[[bin]]`][crates-custom] key in the TOML file.\n \n [crates-custom]: http://doc.crates.io/manifest.html#configuring-a-target\n \n@@ -49,7 +50,7 @@ everything, and everything in its place.\n Next, our configuration file:\n \n ```bash\n-$ editor Cargo.toml\n+$ editor Cargo.toml # or 'notepad Cargo.toml' on Windows\n ```\n \n Make sure to get this name right: we need the capital `C`!\n@@ -112,7 +113,7 @@ grows, we can just run `cargo build`, and it\u2019ll work the right way.\n When our project is finally ready for release, we can use `cargo build\n --release` to compile our project with optimizations.\n \n-We'll also notice that Cargo has created a new file: `Cargo.lock`.\n+You'll also notice that Cargo has created a new file: `Cargo.lock`.\n \n ```toml\n [root]\n@@ -141,7 +142,7 @@ We don\u2019t have to go through this whole process every time we want to start a n\n project! Cargo has the ability to make a bare-bones project directory in which\n we can start developing right away.\n \n-To start a new project with Cargo, use `cargo new`:\n+To start a new project with Cargo, we use `cargo new`:\n \n ```bash\n $ cargo new hello_world --bin\n@@ -178,8 +179,8 @@ authors = [\"Your Name <you@example.com>\"]\n ```\n \n Cargo has populated this file with reasonable defaults based off the arguments\n-we gave it and our `git` global configuration. We may notice that Cargo has also\n-initialized the `hello_world` directory as a `git` repository.\n+we gave it and our `git` global configuration. You may notice that Cargo has\n+also initialized the `hello_world` directory as a `git` repository.\n \n Here\u2019s what\u2019s in `src/main.rs`:\n \n@@ -199,11 +200,11 @@ Now that we\u2019ve got the tools down, let\u2019s actually learn more about the Rust\n language itself. These are the basics that will serve us well through the rest\n of our time with Rust.\n \n-We have two options: Dive into a project with \u2018[Learn Rust][learnrust]\u2019, or\n-start from the bottom and work our way up with \u2018[Syntax and Semantics][syntax]\u2019.\n-More experienced systems programmers will probably prefer \u2018Learn Rust\u2019, while\n-those from dynamic backgrounds may enjoy either. Different people learn\n-differently! Choose whatever\u2019s right for us.\n+You have two options: Dive into a project with \u2018[Learn Rust][learnrust]\u2019, or\n+start from the bottom and work your way up with\n+\u2018[Syntax and Semantics][syntax]\u2019. More experienced systems programmers will\n+probably prefer \u2018Learn Rust\u2019, while those from dynamic backgrounds may enjoy\n+either. Different people learn differently! Choose whatever\u2019s right for you.\n \n [learnrust]: learn-rust.html\n [syntax]: syntax-and-semantics.html"}, {"sha": "c3de956d29dcba6aeca8825461a0f2a111745aad", "filename": "src/doc/trpl/hello-world.md", "status": "modified", "additions": 30, "deletions": 29, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/22fbbd4b5c57f03fa729e233c47bb5d8ff867de3/src%2Fdoc%2Ftrpl%2Fhello-world.md", "raw_url": "https://github.com/rust-lang/rust/raw/22fbbd4b5c57f03fa729e233c47bb5d8ff867de3/src%2Fdoc%2Ftrpl%2Fhello-world.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fhello-world.md?ref=22fbbd4b5c57f03fa729e233c47bb5d8ff867de3", "patch": "@@ -9,7 +9,7 @@ thing to do.\n \n The first thing that we need to do is make a file to put our code in. I like to\n make a `projects` directory in my home directory, and keep all my projects\n-there. Rust does not care where our code lives.\n+there. Rust doesn't care where our code lives.\n \n This actually leads to one other concern we should address: this guide will\n assume that we have basic familiarity with the command line. Rust itself makes\n@@ -71,10 +71,10 @@ were arguments, they would go inside the parentheses (`(` and `)`), and because\n we aren\u2019t returning anything from this function, we can omit the return type\n entirely. We\u2019ll get to it later.\n \n-We\u2019ll also note that the function is wrapped in curly braces (`{` and `}`). Rust\n-requires these around all function bodies. It is also considered good style to\n-put the opening curly brace on the same line as the function declaration, with\n-one space in between.\n+You\u2019ll also note that the function is wrapped in curly braces (`{` and `}`).\n+Rust requires these around all function bodies. It is also considered good style\n+to put the opening curly brace on the same line as the function declaration,\n+with one space in between.\n \n Next up is this line:\n \n@@ -84,29 +84,29 @@ Next up is this line:\n \n This line does all of the work in our little program. There are a number of\n details that are important here. The first is that it\u2019s indented with four\n-spaces, not tabs. Please configure our editor of choice to insert four spaces\n-with the tab key. We provide some [sample configurations for various\n-editors][configs].\n+spaces, not tabs. Please configure your editor of choice to insert four spaces\n+with the tab key. We provide some\n+[sample configurations for various editors][configs].\n \n [configs]: https://github.com/rust-lang/rust/tree/master/src/etc/CONFIGS.md\n \n The second point is the `println!()` part. This is calling a Rust\n [macro][macro], which is how metaprogramming is done in Rust. If it were a\n function instead, it would look like this: `println()`. For our purposes, we\n-don\u2019t need to worry about this difference. Just know that sometimes, we\u2019ll see a `!`,\n-and that means that we\u2019re calling a macro instead of a normal function. Rust\n-implements `println!` as a macro rather than a function for good reasons, but\n-that's an advanced topic. One last thing to mention: Rust\u2019s macros are\n-significantly different from C macros, if we\u2019ve used those. Don\u2019t be scared of\n-using macros. We\u2019ll get to the details eventually, we\u2019ll just have to take it on\n-trust for now.\n+don\u2019t need to worry about this difference. Just know that sometimes, we\u2019ll see a\n+`!`, and that means that we\u2019re calling a macro instead of a normal function.\n+Rust implements `println!` as a macro rather than a function for good reasons,\n+but that's an advanced topic. One last thing to mention: Rust\u2019s macros are\n+significantly different from C macros, if you\u2019ve used those. Don\u2019t be scared of\n+using macros. We\u2019ll get to the details eventually, you\u2019ll just have to take it\n+on trust for now.\n \n [macro]: macros.html\n \n Next, `\"Hello, world!\"` is a \u2018string\u2019. Strings are a surprisingly complicated\n topic in a systems programming language, and this is a \u2018statically allocated\u2019\n-string. If we want to read further about allocation, check out [the stack and\n-the heap][allocation], but we don\u2019t need to right now if we don\u2019t want to. We\n+string. If you want to read further about allocation, check out [the stack and\n+the heap][allocation], but you don\u2019t need to right now if you don\u2019t want to. We\n pass this string as an argument to `println!`, which prints the string to the\n screen. Easy enough!\n \n@@ -127,8 +127,8 @@ compiler, `rustc`, by passing it the name of our source file:\n $ rustc main.rs\n ```\n \n-This is similar to `gcc` or `clang`, if we come from a C or C++ background. Rust\n-will output a binary executable. We can see it with `ls`:\n+This is similar to `gcc` or `clang`, if you come from a C or C++ background.\n+Rust will output a binary executable. We can see it with `ls`:\n \n ```bash\n $ ls\n@@ -151,18 +151,19 @@ $ ./main  # or main.exe on Windows\n \n This prints out our `Hello, world!` text to our terminal.\n \n-If we come from a dynamic language like Ruby, Python, or JavaScript, we may not\n-be used to these two steps being separate. Rust is an \u2018ahead-of-time compiled\n-language\u2019, which means that we can compile a program, give it to someone else,\n-and they don't need to have Rust installed. If we give someone a `.rb` or `.py`\n-or `.js` file, they need to have a Ruby/Python/JavaScript implementation\n-installed, but we just need one command to both compile and run our program.\n-Everything is a tradeoff in language design, and Rust has made its choice.\n+If you come from a dynamic language like Ruby, Python, or JavaScript, you may\n+not be used to these two steps being separate. Rust is an \u2018ahead-of-time\n+compiled language\u2019, which means that we can compile a program, give it to\n+someone else, and they don't need to have Rust installed. If we give someone a\n+`.rb` or `.py` or `.js` file, they need to have a Ruby/Python/JavaScript\n+implementation installed, but we just need one command to both compile and run\n+our program. Everything is a tradeoff in language design, and Rust has made its\n+choice.\n \n-Congratulations! We have officially written a Rust program. That makes us Rust\n-programmers! Welcome. \ud83c\udf8a\ud83c\udf89\ud83d\udc4d\n+Congratulations! You have officially written a Rust program. That makes you a\n+Rust programmer! Welcome. \ud83c\udf8a\ud83c\udf89\ud83d\udc4d\n \n-Next, I'd like to introduce us to another tool, Cargo, which is used to write\n+Next, I'd like to introduce you to another tool, Cargo, which is used to write\n real-world Rust programs. Just using `rustc` is nice for simple things, but as\n our project grows, we'll want something to help us manage all of the options\n that it has, and to make it easy to share our code with other people and"}, {"sha": "a3666d1c08e0af92a874c0295afb9bd394f1e5e3", "filename": "src/doc/trpl/installing-rust.md", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/22fbbd4b5c57f03fa729e233c47bb5d8ff867de3/src%2Fdoc%2Ftrpl%2Finstalling-rust.md", "raw_url": "https://github.com/rust-lang/rust/raw/22fbbd4b5c57f03fa729e233c47bb5d8ff867de3/src%2Fdoc%2Ftrpl%2Finstalling-rust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Finstalling-rust.md?ref=22fbbd4b5c57f03fa729e233c47bb5d8ff867de3", "patch": "@@ -24,45 +24,46 @@ $ sh rustup.sh\n \n [insecurity]: http://curlpipesh.tumblr.com\n \n-If we're on Windows, please download the appropriate [installer][install-page].\n-**NOTE:** By default, the Windows installer will not add Rust to the %PATH%\n-system variable. If this is the only version of Rust we are installing and we\n-want to be able to run it from the command line, click on \"Advanced\" on the\n-install dialog and on the \"Product Features\" page ensure \"Add to PATH\" is\n-installed on the local hard drive.\n+If you're on Windows, please download the appropriate [installer][install-page].\n+\n+> Note: By default, the Windows installer won't add Rust to the %PATH% system\n+> variable. If this is the only version of Rust we are installing and we want to\n+> be able to run it from the command line, click on \"Advanced\" on the install\n+> dialog and on the \"Product Features\" page ensure \"Add to PATH\" is installed on\n+> the local hard drive.\n \n \n [install-page]: https://www.rust-lang.org/install.html\n \n ## Uninstalling\n \n-If we decide we don't want Rust anymore, we'll be a bit sad, but that's okay.\n-Not every programming language is great for everyone. Just run the uninstall\n-script:\n+If you decide you don't want Rust anymore, we'll be a bit sad, but that's okay.\n+Not every programming language is great for everyone. We'll just run the\n+uninstall script:\n \n ```bash\n $ sudo /usr/local/lib/rustlib/uninstall.sh\n ```\n \n-If we used the Windows installer, just re-run the `.msi` and it will give us an\n-uninstall option.\n+If we used the Windows installer, we'll just re-run the `.msi` and it will give\n+us an uninstall option.\n \n ## That disclaimer we promised\n \n Some people, and somewhat rightfully so, get very upset when we tell them to\n-`curl | sh`. Basically, when we do this, we are trusting that the good people\n-who maintain Rust aren't going to hack our computer and do bad things. That's a\n-good instinct! If we're one of those people, please check out the documentation\n-on [building Rust from Source][from-source], or [the official binary\n-downloads][install-page].\n+`curl | sh`. Basically, when they do this, they are trusting that the good\n+people who maintain Rust aren't going to hack their computer and do bad things.\n+That's a good instinct! If you're one of those people, please check out the\n+documentation on [building Rust from Source][from-source], or [the official\n+binary downloads][install-page].\n \n [from-source]: https://github.com/rust-lang/rust#building-from-source\n \n ## Platform support\n \n Oh, we should also mention the officially supported platforms:\n \n-* Windows (7, 8, Server 2008 R2)\n+* Windows (7 or later, Server 2008 R2)\n * Linux (2.6.18 or later, various distributions), x86 and x86-64\n * OSX 10.7 (Lion) or later, x86 and x86-64\n \n@@ -73,7 +74,7 @@ testing.\n Finally, a comment about Windows. Rust considers Windows to be a first-class\n platform upon release, but if we're honest, the Windows experience isn't as\n integrated as the Linux/OS X experience is. We're working on it! If anything\n-does not work, it is a bug. Please let us know if that happens. Each and every\n+doesn't work, it is a bug. Please let us know if that happens. Each and every\n commit is tested against Windows just like any other platform.\n \n ## After installation"}]}