{"sha": "0b5c0874b8bc35e5be57ca856994e311772ada1d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiNWMwODc0YjhiYzM1ZTViZTU3Y2E4NTY5OTRlMzExNzcyYWRhMWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-02T05:56:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-02T05:56:06Z"}, "message": "Auto merge of #43584 - arielb1:unused-reads, r=eddyb\n\nFix quadratic performance with lots of use statements\n\nThis fixes 2 problems that caused quadratic performance when lots of use-statements were present. After this patch, performance is linear (and very fast) even with 1M uses.\n\nFixes #43572.\nFixes #43573.\n\nr? @eddyb", "tree": {"sha": "e10f62aafcb915097f9532dc0ddf1e91504d0865", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e10f62aafcb915097f9532dc0ddf1e91504d0865"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b5c0874b8bc35e5be57ca856994e311772ada1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b5c0874b8bc35e5be57ca856994e311772ada1d", "html_url": "https://github.com/rust-lang/rust/commit/0b5c0874b8bc35e5be57ca856994e311772ada1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b5c0874b8bc35e5be57ca856994e311772ada1d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f3062c88e588211cb6ca109b22941f921938c3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f3062c88e588211cb6ca109b22941f921938c3e", "html_url": "https://github.com/rust-lang/rust/commit/4f3062c88e588211cb6ca109b22941f921938c3e"}, {"sha": "70478ca5c83513beb91cce78ae57ade70849fca4", "url": "https://api.github.com/repos/rust-lang/rust/commits/70478ca5c83513beb91cce78ae57ade70849fca4", "html_url": "https://github.com/rust-lang/rust/commit/70478ca5c83513beb91cce78ae57ade70849fca4"}], "stats": {"total": 38, "additions": 21, "deletions": 17}, "files": [{"sha": "cdd5a6e3da7f1a6ff9d6a90abffaf6be1a787bb3", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0b5c0874b8bc35e5be57ca856994e311772ada1d/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b5c0874b8bc35e5be57ca856994e311772ada1d/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=0b5c0874b8bc35e5be57ca856994e311772ada1d", "patch": "@@ -18,7 +18,7 @@ use hir;\n use hir::def_id::{CrateNum, DefId, DefIndex, LOCAL_CRATE, DefIndexAddressSpace,\n                   CRATE_DEF_INDEX};\n use ich::Fingerprint;\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::stable_hasher::StableHasher;\n use serialize::{Encodable, Decodable, Encoder, Decoder};\n@@ -153,7 +153,7 @@ pub struct Definitions {\n     pub(super) node_to_hir_id: IndexVec<ast::NodeId, hir::HirId>,\n     macro_def_scopes: FxHashMap<Mark, DefId>,\n     expansions: FxHashMap<DefIndex, Mark>,\n-    keys_created: FxHashSet<DefKey>,\n+    next_disambiguator: FxHashMap<(DefIndex, DefPathData), u32>,\n }\n \n // Unfortunately we have to provide a manual impl of Clone because of the\n@@ -170,7 +170,7 @@ impl Clone for Definitions {\n             node_to_hir_id: self.node_to_hir_id.clone(),\n             macro_def_scopes: self.macro_def_scopes.clone(),\n             expansions: self.expansions.clone(),\n-            keys_created: self.keys_created.clone(),\n+            next_disambiguator: self.next_disambiguator.clone(),\n         }\n     }\n }\n@@ -402,7 +402,7 @@ impl Definitions {\n             node_to_hir_id: IndexVec::new(),\n             macro_def_scopes: FxHashMap(),\n             expansions: FxHashMap(),\n-            keys_created: FxHashSet(),\n+            next_disambiguator: FxHashMap(),\n         }\n     }\n \n@@ -516,21 +516,21 @@ impl Definitions {\n         // The root node must be created with create_root_def()\n         assert!(data != DefPathData::CrateRoot);\n \n-        // Find a unique DefKey. This basically means incrementing the disambiguator\n-        // until we get no match.\n-        let mut key = DefKey {\n+        // Find the next free disambiguator for this key.\n+        let disambiguator = {\n+            let next_disamb = self.next_disambiguator.entry((parent, data.clone())).or_insert(0);\n+            let disambiguator = *next_disamb;\n+            *next_disamb = next_disamb.checked_add(1).expect(\"disambiguator overflow\");\n+            disambiguator\n+        };\n+\n+        let key = DefKey {\n             parent: Some(parent),\n             disambiguated_data: DisambiguatedDefPathData {\n-                data,\n-                disambiguator: 0\n+                data, disambiguator\n             }\n         };\n \n-        while self.keys_created.contains(&key) {\n-            key.disambiguated_data.disambiguator += 1;\n-        }\n-        self.keys_created.insert(key.clone());\n-\n         let parent_hash = self.table.def_path_hash(parent);\n         let def_path_hash = key.compute_stable_hash(parent_hash);\n "}, {"sha": "bfdcae7641dd52f2af9d07454b55982dcbb79eee", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0b5c0874b8bc35e5be57ca856994e311772ada1d/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b5c0874b8bc35e5be57ca856994e311772ada1d/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=0b5c0874b8bc35e5be57ca856994e311772ada1d", "patch": "@@ -561,8 +561,9 @@ impl CodeMapper for CodeMap {\n         sp\n     }\n     fn ensure_filemap_source_present(&self, file_map: Rc<FileMap>) -> bool {\n-        let src = self.file_loader.read_file(Path::new(&file_map.name)).ok();\n-        return file_map.add_external_src(src)\n+        file_map.add_external_src(\n+            || self.file_loader.read_file(Path::new(&file_map.name)).ok()\n+        )\n     }\n }\n "}, {"sha": "7006f45455e38830f484b10b97aaa287268d63cf", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0b5c0874b8bc35e5be57ca856994e311772ada1d/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b5c0874b8bc35e5be57ca856994e311772ada1d/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=0b5c0874b8bc35e5be57ca856994e311772ada1d", "patch": "@@ -618,8 +618,11 @@ impl FileMap {\n     /// If the hash of the input doesn't match or no input is supplied via None,\n     /// it is interpreted as an error and the corresponding enum variant is set.\n     /// The return value signifies whether some kind of source is present.\n-    pub fn add_external_src(&self, src: Option<String>) -> bool {\n+    pub fn add_external_src<F>(&self, get_src: F) -> bool\n+        where F: FnOnce() -> Option<String>\n+    {\n         if *self.external_src.borrow() == ExternalSource::AbsentOk {\n+            let src = get_src();\n             let mut external_src = self.external_src.borrow_mut();\n             if let Some(src) = src {\n                 let mut hasher: StableHasher<u128> = StableHasher::new();"}]}