{"sha": "3ce425c9edf87258b9a498844307a5c23f14b893", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjZTQyNWM5ZWRmODcyNThiOWE0OTg4NDQzMDdhNWMyM2YxNGI4OTM=", "commit": {"author": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-10-18T20:59:39Z"}, "committer": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-10-18T20:59:39Z"}, "message": "Factor out common item indentation idiom", "tree": {"sha": "983fe64e1fd3e3d8e3a293675b902606ef945083", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/983fe64e1fd3e3d8e3a293675b902606ef945083"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ce425c9edf87258b9a498844307a5c23f14b893", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ce425c9edf87258b9a498844307a5c23f14b893", "html_url": "https://github.com/rust-lang/rust/commit/3ce425c9edf87258b9a498844307a5c23f14b893", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ce425c9edf87258b9a498844307a5c23f14b893/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a7d39041e13c45f5a60570240f3c9c5c0447bb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a7d39041e13c45f5a60570240f3c9c5c0447bb6", "html_url": "https://github.com/rust-lang/rust/commit/1a7d39041e13c45f5a60570240f3c9c5c0447bb6"}], "stats": {"total": 96, "additions": 36, "deletions": 60}, "files": [{"sha": "1010be2f19af810a9895c612f41ea9e88b23990d", "filename": "src/items.rs", "status": "modified", "additions": 9, "deletions": 30, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/3ce425c9edf87258b9a498844307a5c23f14b893/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ce425c9edf87258b9a498844307a5c23f14b893/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=3ce425c9edf87258b9a498844307a5c23f14b893", "patch": "@@ -823,15 +823,15 @@ impl<'a> FmtVisitor<'a> {\n         }\n     }\n \n-    fn format_struct(&self,\n-                     item_name: &str,\n-                     ident: ast::Ident,\n-                     vis: ast::Visibility,\n-                     struct_def: &ast::VariantData,\n-                     generics: Option<&ast::Generics>,\n-                     span: Span,\n-                     offset: Indent)\n-                     -> Option<String> {\n+    pub fn format_struct(&self,\n+                         item_name: &str,\n+                         ident: ast::Ident,\n+                         vis: ast::Visibility,\n+                         struct_def: &ast::VariantData,\n+                         generics: Option<&ast::Generics>,\n+                         span: Span,\n+                         offset: Indent)\n+                         -> Option<String> {\n         let mut result = String::with_capacity(1024);\n \n         let header_str = self.format_header(item_name, ident, vis);\n@@ -927,27 +927,6 @@ impl<'a> FmtVisitor<'a> {\n         Some(result)\n     }\n \n-    pub fn visit_struct(&mut self,\n-                        ident: ast::Ident,\n-                        vis: ast::Visibility,\n-                        struct_def: &ast::VariantData,\n-                        generics: &ast::Generics,\n-                        span: Span) {\n-        let indent = self.block_indent;\n-        let result = self.format_struct(\"struct \",\n-                                        ident,\n-                                        vis,\n-                                        struct_def,\n-                                        Some(generics),\n-                                        span,\n-                                        indent);\n-\n-        if let Some(rewrite) = result {\n-            self.buffer.push_str(&rewrite);\n-            self.last_pos = span.hi;\n-        }\n-    }\n-\n     fn format_header(&self, item_name: &str, ident: ast::Ident, vis: ast::Visibility) -> String {\n         format!(\"{}{}{}\", format_visibility(vis), item_name, ident)\n     }"}, {"sha": "fb3b25eab2224eb0efae50d09bea0507d98771eb", "filename": "src/visitor.rs", "status": "modified", "additions": 27, "deletions": 30, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/3ce425c9edf87258b9a498844307a5c23f14b893/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ce425c9edf87258b9a498844307a5c23f14b893/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=3ce425c9edf87258b9a498844307a5c23f14b893", "patch": "@@ -45,7 +45,6 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n                 }\n             }\n             ast::Stmt_::StmtExpr(ref ex, _) | ast::Stmt_::StmtSemi(ref ex, _) => {\n-                self.format_missing_with_indent(stmt.span.lo);\n                 let suffix = if semicolon_for_stmt(stmt) {\n                     \";\"\n                 } else {\n@@ -54,13 +53,9 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n                 let rewrite = ex.rewrite(&self.get_context(),\n                                          self.config.max_width - self.block_indent.width() -\n                                          suffix.len(),\n-                                         self.block_indent);\n-\n-                if let Some(new_str) = rewrite {\n-                    self.buffer.push_str(&new_str);\n-                    self.buffer.push_str(suffix);\n-                    self.last_pos = stmt.span.hi;\n-                }\n+                                         self.block_indent)\n+                                .map(|s| s + suffix);\n+                self.push_rewrite(stmt.span, rewrite);\n             }\n             ast::Stmt_::StmtMac(ref _mac, _macro_style) => {\n                 self.format_missing_with_indent(stmt.span.lo);\n@@ -179,7 +174,7 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n             ast::Item_::ItemUse(ref vp) => {\n                 self.format_import(item.vis, vp, item.span);\n             }\n-            // TODO(#78): format traits and impl definitions.\n+            // FIXME(#78): format traits and impl definitions.\n             ast::Item_::ItemImpl(..) |\n             ast::Item_::ItemTrait(..) => {\n                 self.block_indent = self.block_indent.block_indent(self.config);\n@@ -193,8 +188,15 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n                 self.last_pos = item.span.hi;\n             }\n             ast::Item_::ItemStruct(ref def, ref generics) => {\n-                self.format_missing_with_indent(item.span.lo);\n-                self.visit_struct(item.ident, item.vis, def, generics, item.span);\n+                let indent = self.block_indent;\n+                let rewrite = self.format_struct(\"struct \",\n+                                                 item.ident,\n+                                                 item.vis,\n+                                                 def,\n+                                                 Some(generics),\n+                                                 item.span,\n+                                                 indent);\n+                self.push_rewrite(item.span, rewrite);\n             }\n             ast::Item_::ItemEnum(ref def, ref generics) => {\n                 self.format_missing_with_indent(item.span.lo);\n@@ -216,32 +218,24 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n                 self.format_foreign_mod(foreign_mod, item.span);\n             }\n             ast::Item_::ItemStatic(ref ty, mutability, ref expr) => {\n-                self.format_missing_with_indent(item.span.lo);\n                 let rewrite = rewrite_static(\"static\",\n                                              item.ident,\n                                              ty,\n                                              mutability,\n                                              expr,\n                                              &self.get_context());\n-                if let Some(s) = rewrite {\n-                    self.buffer.push_str(&s);\n-                    self.last_pos = item.span.hi;\n-                }\n+                self.push_rewrite(item.span, rewrite);\n             }\n             ast::Item_::ItemConst(ref ty, ref expr) => {\n-                self.format_missing_with_indent(item.span.lo);\n                 let rewrite = rewrite_static(\"const\",\n                                              item.ident,\n                                              ty,\n                                              ast::Mutability::MutImmutable,\n                                              expr,\n                                              &self.get_context());\n-                if let Some(s) = rewrite {\n-                    self.buffer.push_str(&s);\n-                    self.last_pos = item.span.hi;\n-                }\n+                self.push_rewrite(item.span, rewrite);\n             }\n-            // TODO(#486): format type aliases.\n+            // FIXME(#486): format type aliases.\n             ast::Item_::ItemDefaultImpl(..) |\n             ast::Item_::ItemFn(..) |\n             ast::Item_::ItemTy(..) => {\n@@ -256,15 +250,9 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n         }\n \n         if let ast::TraitItem_::MethodTraitItem(ref sig, None) = ti.node {\n-            self.format_missing_with_indent(ti.span.lo);\n-\n             let indent = self.block_indent;\n-            let new_fn = self.rewrite_required_fn(indent, ti.ident, sig, ti.span);\n-\n-            if let Some(fn_str) = new_fn {\n-                self.buffer.push_str(&fn_str);\n-                self.last_pos = ti.span.hi;\n-            }\n+            let rewrite = self.rewrite_required_fn(indent, ti.ident, sig, ti.span);\n+            self.push_rewrite(ti.span, rewrite);\n         }\n \n         visit::walk_trait_item(self, ti)\n@@ -290,6 +278,15 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n }\n \n impl<'a> FmtVisitor<'a> {\n+    fn push_rewrite(&mut self, span: Span, rewrite: Option<String>) {\n+        self.format_missing_with_indent(span.lo);\n+\n+        if let Some(res) = rewrite {\n+            self.buffer.push_str(&res);\n+            self.last_pos = span.hi;\n+        }\n+    }\n+\n     pub fn from_codemap(codemap: &'a CodeMap, config: &'a Config) -> FmtVisitor<'a> {\n         FmtVisitor {\n             codemap: codemap,"}]}