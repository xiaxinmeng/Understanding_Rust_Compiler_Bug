{"sha": "ed5843bcc64c156f69b05c1cf2c8cdf4674e262d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkNTg0M2JjYzY0YzE1NmY2OWIwNWMxY2YyYzhjZGY0Njc0ZTI2MmQ=", "commit": {"author": {"name": "Jared Roesch", "email": "roeschinc@gmail.com", "date": "2016-08-18T18:47:33Z"}, "committer": {"name": "Jared Roesch", "email": "roeschinc@gmail.com", "date": "2016-09-02T18:58:02Z"}, "message": "Address feedback on secondary changes", "tree": {"sha": "c25019aedcd8cf092f7276a2793ae513ea937bb2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c25019aedcd8cf092f7276a2793ae513ea937bb2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed5843bcc64c156f69b05c1cf2c8cdf4674e262d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed5843bcc64c156f69b05c1cf2c8cdf4674e262d", "html_url": "https://github.com/rust-lang/rust/commit/ed5843bcc64c156f69b05c1cf2c8cdf4674e262d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed5843bcc64c156f69b05c1cf2c8cdf4674e262d/comments", "author": {"login": "jroesch", "id": 696509, "node_id": "MDQ6VXNlcjY5NjUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/696509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jroesch", "html_url": "https://github.com/jroesch", "followers_url": "https://api.github.com/users/jroesch/followers", "following_url": "https://api.github.com/users/jroesch/following{/other_user}", "gists_url": "https://api.github.com/users/jroesch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jroesch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jroesch/subscriptions", "organizations_url": "https://api.github.com/users/jroesch/orgs", "repos_url": "https://api.github.com/users/jroesch/repos", "events_url": "https://api.github.com/users/jroesch/events{/privacy}", "received_events_url": "https://api.github.com/users/jroesch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jroesch", "id": 696509, "node_id": "MDQ6VXNlcjY5NjUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/696509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jroesch", "html_url": "https://github.com/jroesch", "followers_url": "https://api.github.com/users/jroesch/followers", "following_url": "https://api.github.com/users/jroesch/following{/other_user}", "gists_url": "https://api.github.com/users/jroesch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jroesch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jroesch/subscriptions", "organizations_url": "https://api.github.com/users/jroesch/orgs", "repos_url": "https://api.github.com/users/jroesch/repos", "events_url": "https://api.github.com/users/jroesch/events{/privacy}", "received_events_url": "https://api.github.com/users/jroesch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90d1a535510dfa098c908a76234d7b0db72eadf8", "url": "https://api.github.com/repos/rust-lang/rust/commits/90d1a535510dfa098c908a76234d7b0db72eadf8", "html_url": "https://github.com/rust-lang/rust/commit/90d1a535510dfa098c908a76234d7b0db72eadf8"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "6e39e33c9a8d5b8d878f66570f5abcaac7f48213", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ed5843bcc64c156f69b05c1cf2c8cdf4674e262d/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed5843bcc64c156f69b05c1cf2c8cdf4674e262d/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=ed5843bcc64c156f69b05c1cf2c8cdf4674e262d", "patch": "@@ -296,26 +296,28 @@ impl<'ccx, 'gcx> CheckTypeWellFormedVisitor<'ccx, 'gcx> {\n         // as it seems confusing to report an error about\n         // extraneous predicates created by things like\n         // an associated type inside the trait.\n-\n+        let mut err = None;\n         if !items.is_empty() {\n             error_380(self.ccx, span);\n         } else if has_ty_params {\n-            span_err!(self.tcx().sess, span, E0566,\n-                \"traits with auto impls (`e.g. unsafe impl \\\n-                    Trait for ..`) can not have type parameters\")\n+            err = Some(struct_span_err!(self.tcx().sess, span, E0566,\n+                \"traits with auto impls (`e.g. impl \\\n+                    Trait for ..`) can not have type parameters\"));\n         } else if has_predicates {\n-            span_err!(self.tcx().sess, span, E0565,\n-                \"traits with auto impls (`e.g. unsafe impl \\\n-                    Trait for ..`) can not have predicates\")\n+            err = Some(struct_span_err!(self.tcx().sess, span, E0565,\n+                \"traits with auto impls (`e.g. impl \\\n+                    Trait for ..`) cannot have predicates\"));\n         }\n \n         // Finally if either of the above conditions apply we should add a note\n         // indicating that this error is the result of a recent soundness fix.\n-        if has_ty_params || has_predicates {\n-            self.tcx().sess.span_note_without_error(\n-                span,\n-                \"the new auto trait rules are the result of a \\\n-                    recent soundness fix; see #29859 for more details\")\n+        match err {\n+            None => {},\n+            Some(mut e) => {\n+                e.note(\"the new auto trait rules are the result of a \\\n+                          recent soundness fix; see #29859 for more details\");\n+                e.emit();\n+            }\n         }\n     }\n \n@@ -325,8 +327,6 @@ impl<'ccx, 'gcx> CheckTypeWellFormedVisitor<'ccx, 'gcx> {\n     {\n         let trait_def_id = self.tcx().map.local_def_id(item.id);\n \n-        // TODO: in a second pass, globally rename to auto_trait,\n-        // from default_impl.\n         if self.tcx().trait_has_default_impl(trait_def_id) {\n             self.check_auto_trait(trait_def_id, items, item.span);\n         }\n@@ -701,7 +701,7 @@ fn error_192(ccx: &CrateCtxt, span: Span) {\n \n fn error_380(ccx: &CrateCtxt, span: Span) {\n     span_err!(ccx.tcx.sess, span, E0380,\n-              \"traits with default impls (`e.g. unsafe impl \\\n+              \"traits with default impls (`e.g. impl \\\n                Trait for ..`) must have no methods or associated items\")\n }\n "}]}