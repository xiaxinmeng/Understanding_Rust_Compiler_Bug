{"sha": "9ffdc2de8cd7fe564651a45766fe704be6d223b7", "node_id": "C_kwDOAAsO6NoAKDlmZmRjMmRlOGNkN2ZlNTY0NjUxYTQ1NzY2ZmU3MDRiZTZkMjIzYjc", "commit": {"author": {"name": "Alan Egerton", "email": "eggyal@gmail.com", "date": "2022-06-17T10:05:17Z"}, "committer": {"name": "Alan Egerton", "email": "eggyal@gmail.com", "date": "2022-07-05T21:25:33Z"}, "message": "impl TypeVisitable in type traversal macros", "tree": {"sha": "91e3ecb93612acf1b24206603d512e6977d846ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91e3ecb93612acf1b24206603d512e6977d846ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ffdc2de8cd7fe564651a45766fe704be6d223b7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEm/Nz5g9hEBdpmKVOB8rDzKfgZD8FAmLErE0ACgkQB8rDzKfg\nZD9VqQ/9EhCzG/1G9cPsQNxxTICbTC3ufqz8qcMLGFs6uXjGNWZrLbZxSguPfcFj\nl0zx+ULtOxq38ZxfM5ypiMAEXANlQ/gIPt/Nz+N2R8z7Dk3DnlL215OSILgthR76\nphiYKzTBI9K7JuF9bK9bnEhbZvTCHq8qtaQ7Z8nYOjS0bTyt/wp0ChPNFbrcIYZP\nwtZsxn3HJnt4CnB2KoKTYiAPqyJL/7UjoOKbqokLjRG8f6B6IWopD7Wt4bHWWYwL\niodWYaITHlVTifWh/vosDfwmxHbRetM4wBkORZeDbGCSDpZiwvlN97efDjukYZM4\nYQji27YoxUR3Gu8AWbLfrgihJ6vqeEYBNI3YSENyYcVNp5F+5y59t/FOyaU78oUb\nr6RLxQOf8tmcOQFfFn5vUbUYbxHWvtDz7nnrzOpIKWbCZPQ2T1JCVKxsf2i5YIca\nA3a/taCgcFup6WsVSOzYfV/2+7tZrO5+z8CMZO/ati0qrNFU5sxzsgjZmksMnY+d\n6Ok798Yh9v8TwWDp9QXyWuVfvzMg/b/xpGLojJc4nhubPZ78aiGVWpJ0Wytu7m6r\nkVqCi9Ns3ktZsTj6lhW+AtsyNn3yNFhpysAnvwMtCQLBH/WOLZIdRTUjnb18AmUj\n4R3ltcEZXK0mgW3StfRsGZ3qcnzQSgJqvrFvt3qytG9a8M/ZrZQ=\n=+cxM\n-----END PGP SIGNATURE-----", "payload": "tree 91e3ecb93612acf1b24206603d512e6977d846ad\nparent e4b9625b87c4d3b5845ea5660cf84739de224192\nauthor Alan Egerton <eggyal@gmail.com> 1655460317 +0100\ncommitter Alan Egerton <eggyal@gmail.com> 1657056333 +0100\n\nimpl TypeVisitable in type traversal macros\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ffdc2de8cd7fe564651a45766fe704be6d223b7", "html_url": "https://github.com/rust-lang/rust/commit/9ffdc2de8cd7fe564651a45766fe704be6d223b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ffdc2de8cd7fe564651a45766fe704be6d223b7/comments", "author": {"login": "eggyal", "id": 3089613, "node_id": "MDQ6VXNlcjMwODk2MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3089613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eggyal", "html_url": "https://github.com/eggyal", "followers_url": "https://api.github.com/users/eggyal/followers", "following_url": "https://api.github.com/users/eggyal/following{/other_user}", "gists_url": "https://api.github.com/users/eggyal/gists{/gist_id}", "starred_url": "https://api.github.com/users/eggyal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eggyal/subscriptions", "organizations_url": "https://api.github.com/users/eggyal/orgs", "repos_url": "https://api.github.com/users/eggyal/repos", "events_url": "https://api.github.com/users/eggyal/events{/privacy}", "received_events_url": "https://api.github.com/users/eggyal/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eggyal", "id": 3089613, "node_id": "MDQ6VXNlcjMwODk2MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3089613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eggyal", "html_url": "https://github.com/eggyal", "followers_url": "https://api.github.com/users/eggyal/followers", "following_url": "https://api.github.com/users/eggyal/following{/other_user}", "gists_url": "https://api.github.com/users/eggyal/gists{/gist_id}", "starred_url": "https://api.github.com/users/eggyal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eggyal/subscriptions", "organizations_url": "https://api.github.com/users/eggyal/orgs", "repos_url": "https://api.github.com/users/eggyal/repos", "events_url": "https://api.github.com/users/eggyal/events{/privacy}", "received_events_url": "https://api.github.com/users/eggyal/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4b9625b87c4d3b5845ea5660cf84739de224192", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4b9625b87c4d3b5845ea5660cf84739de224192", "html_url": "https://github.com/rust-lang/rust/commit/e4b9625b87c4d3b5845ea5660cf84739de224192"}], "stats": {"total": 92, "additions": 57, "deletions": 35}, "files": [{"sha": "c6fe3e721032f4e7957adc198d282ceaac78d40c", "filename": "compiler/rustc_middle/src/infer/canonical.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ffdc2de8cd7fe564651a45766fe704be6d223b7/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ffdc2de8cd7fe564651a45766fe704be6d223b7/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs?ref=9ffdc2de8cd7fe564651a45766fe704be6d223b7", "patch": "@@ -293,15 +293,15 @@ impl<'tcx, V> Canonical<'tcx, V> {\n pub type QueryOutlivesConstraint<'tcx> =\n     ty::Binder<'tcx, ty::OutlivesPredicate<GenericArg<'tcx>, Region<'tcx>>>;\n \n-TrivialTypeFoldableAndLiftImpls! {\n+TrivialTypeTraversalAndLiftImpls! {\n     for <'tcx> {\n         crate::infer::canonical::Certainty,\n         crate::infer::canonical::CanonicalVarInfo<'tcx>,\n         crate::infer::canonical::CanonicalVarKind<'tcx>,\n     }\n }\n \n-TrivialTypeFoldableImpls! {\n+TrivialTypeTraversalImpls! {\n     for <'tcx> {\n         crate::infer::canonical::CanonicalVarInfos<'tcx>,\n     }"}, {"sha": "0e85c60a363028f97befccb8ac51bb3fdf1bfc78", "filename": "compiler/rustc_middle/src/macros.rs", "status": "modified", "additions": 28, "deletions": 18, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/9ffdc2de8cd7fe564651a45766fe704be6d223b7/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ffdc2de8cd7fe564651a45766fe704be6d223b7/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs?ref=9ffdc2de8cd7fe564651a45766fe704be6d223b7", "patch": "@@ -18,7 +18,7 @@ macro_rules! span_bug {\n }\n \n ///////////////////////////////////////////////////////////////////////////\n-// Lift and TypeFoldable macros\n+// Lift and TypeFoldable/TypeVisitable macros\n //\n // When possible, use one of these (relatively) convenient macros to write\n // the impls for you.\n@@ -48,7 +48,7 @@ macro_rules! CloneLiftImpls {\n /// Used for types that are `Copy` and which **do not care arena\n /// allocated data** (i.e., don't need to be folded).\n #[macro_export]\n-macro_rules! TrivialTypeFoldableImpls {\n+macro_rules! TrivialTypeTraversalImpls {\n     (for <$tcx:lifetime> { $($ty:ty,)+ }) => {\n         $(\n             impl<$tcx> $crate::ty::fold::TypeFoldable<$tcx> for $ty {\n@@ -58,8 +58,10 @@ macro_rules! TrivialTypeFoldableImpls {\n                 ) -> ::std::result::Result<$ty, F::Error> {\n                     Ok(self)\n                 }\n+            }\n \n-                fn visit_with<F: $crate::ty::fold::TypeVisitor<$tcx>>(\n+            impl<$tcx> $crate::ty::visit::TypeVisitable<$tcx> for $ty {\n+                fn visit_with<F: $crate::ty::visit::TypeVisitor<$tcx>>(\n                     &self,\n                     _: &mut F)\n                     -> ::std::ops::ControlFlow<F::BreakTy>\n@@ -71,7 +73,7 @@ macro_rules! TrivialTypeFoldableImpls {\n     };\n \n     ($($ty:ty,)+) => {\n-        TrivialTypeFoldableImpls! {\n+        TrivialTypeTraversalImpls! {\n             for <'tcx> {\n                 $($ty,)+\n             }\n@@ -80,15 +82,15 @@ macro_rules! TrivialTypeFoldableImpls {\n }\n \n #[macro_export]\n-macro_rules! TrivialTypeFoldableAndLiftImpls {\n+macro_rules! TrivialTypeTraversalAndLiftImpls {\n     ($($t:tt)*) => {\n-        TrivialTypeFoldableImpls! { $($t)* }\n+        TrivialTypeTraversalImpls! { $($t)* }\n         CloneLiftImpls! { $($t)* }\n     }\n }\n \n #[macro_export]\n-macro_rules! EnumTypeFoldableImpl {\n+macro_rules! EnumTypeTraversalImpl {\n     (impl<$($p:tt),*> TypeFoldable<$tcx:tt> for $s:path {\n         $($variants:tt)*\n     } $(where $($wc:tt)*)*) => {\n@@ -99,14 +101,22 @@ macro_rules! EnumTypeFoldableImpl {\n                 self,\n                 folder: &mut V,\n             ) -> ::std::result::Result<Self, V::Error> {\n-                EnumTypeFoldableImpl!(@FoldVariants(self, folder) input($($variants)*) output())\n+                EnumTypeTraversalImpl!(@FoldVariants(self, folder) input($($variants)*) output())\n             }\n+        }\n+    };\n \n-            fn visit_with<V: $crate::ty::fold::TypeVisitor<$tcx>>(\n+    (impl<$($p:tt),*> TypeVisitable<$tcx:tt> for $s:path {\n+        $($variants:tt)*\n+    } $(where $($wc:tt)*)*) => {\n+        impl<$($p),*> $crate::ty::visit::TypeVisitable<$tcx> for $s\n+            $(where $($wc)*)*\n+        {\n+            fn visit_with<V: $crate::ty::visit::TypeVisitor<$tcx>>(\n                 &self,\n                 visitor: &mut V,\n             ) -> ::std::ops::ControlFlow<V::BreakTy> {\n-                EnumTypeFoldableImpl!(@VisitVariants(self, visitor) input($($variants)*) output())\n+                EnumTypeTraversalImpl!(@VisitVariants(self, visitor) input($($variants)*) output())\n             }\n         }\n     };\n@@ -120,7 +130,7 @@ macro_rules! EnumTypeFoldableImpl {\n     (@FoldVariants($this:expr, $folder:expr)\n      input( ($variant:path) ( $($variant_arg:ident),* ) , $($input:tt)*)\n      output( $($output:tt)*) ) => {\n-        EnumTypeFoldableImpl!(\n+        EnumTypeTraversalImpl!(\n             @FoldVariants($this, $folder)\n                 input($($input)*)\n                 output(\n@@ -137,7 +147,7 @@ macro_rules! EnumTypeFoldableImpl {\n     (@FoldVariants($this:expr, $folder:expr)\n      input( ($variant:path) { $($variant_arg:ident),* $(,)? } , $($input:tt)*)\n      output( $($output:tt)*) ) => {\n-        EnumTypeFoldableImpl!(\n+        EnumTypeTraversalImpl!(\n             @FoldVariants($this, $folder)\n                 input($($input)*)\n                 output(\n@@ -155,7 +165,7 @@ macro_rules! EnumTypeFoldableImpl {\n     (@FoldVariants($this:expr, $folder:expr)\n      input( ($variant:path), $($input:tt)*)\n      output( $($output:tt)*) ) => {\n-        EnumTypeFoldableImpl!(\n+        EnumTypeTraversalImpl!(\n             @FoldVariants($this, $folder)\n                 input($($input)*)\n                 output(\n@@ -174,12 +184,12 @@ macro_rules! EnumTypeFoldableImpl {\n     (@VisitVariants($this:expr, $visitor:expr)\n      input( ($variant:path) ( $($variant_arg:ident),* ) , $($input:tt)*)\n      output( $($output:tt)*) ) => {\n-        EnumTypeFoldableImpl!(\n+        EnumTypeTraversalImpl!(\n             @VisitVariants($this, $visitor)\n                 input($($input)*)\n                 output(\n                     $variant ( $($variant_arg),* ) => {\n-                        $($crate::ty::fold::TypeFoldable::visit_with(\n+                        $($crate::ty::visit::TypeVisitable::visit_with(\n                             $variant_arg, $visitor\n                         )?;)*\n                         ::std::ops::ControlFlow::CONTINUE\n@@ -192,12 +202,12 @@ macro_rules! EnumTypeFoldableImpl {\n     (@VisitVariants($this:expr, $visitor:expr)\n      input( ($variant:path) { $($variant_arg:ident),* $(,)? } , $($input:tt)*)\n      output( $($output:tt)*) ) => {\n-        EnumTypeFoldableImpl!(\n+        EnumTypeTraversalImpl!(\n             @VisitVariants($this, $visitor)\n                 input($($input)*)\n                 output(\n                     $variant { $($variant_arg),* } => {\n-                        $($crate::ty::fold::TypeFoldable::visit_with(\n+                        $($crate::ty::visit::TypeVisitable::visit_with(\n                             $variant_arg, $visitor\n                         )?;)*\n                         ::std::ops::ControlFlow::CONTINUE\n@@ -210,7 +220,7 @@ macro_rules! EnumTypeFoldableImpl {\n     (@VisitVariants($this:expr, $visitor:expr)\n      input( ($variant:path), $($input:tt)*)\n      output( $($output:tt)*) ) => {\n-        EnumTypeFoldableImpl!(\n+        EnumTypeTraversalImpl!(\n             @VisitVariants($this, $visitor)\n                 input($($input)*)\n                 output("}, {"sha": "f97bf2883b3691b3f9b10f5899dd2b629f25899c", "filename": "compiler/rustc_middle/src/mir/graph_cyclic_cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ffdc2de8cd7fe564651a45766fe704be6d223b7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fgraph_cyclic_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ffdc2de8cd7fe564651a45766fe704be6d223b7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fgraph_cyclic_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fgraph_cyclic_cache.rs?ref=9ffdc2de8cd7fe564651a45766fe704be6d223b7", "patch": "@@ -58,6 +58,6 @@ impl<CTX> HashStable<CTX> for GraphIsCyclicCache {\n     }\n }\n \n-TrivialTypeFoldableAndLiftImpls! {\n+TrivialTypeTraversalAndLiftImpls! {\n     GraphIsCyclicCache,\n }"}, {"sha": "c979627409c429560476f6de1f8f964dd2539afc", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ffdc2de8cd7fe564651a45766fe704be6d223b7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ffdc2de8cd7fe564651a45766fe704be6d223b7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=9ffdc2de8cd7fe564651a45766fe704be6d223b7", "patch": "@@ -29,7 +29,7 @@ impl From<ErrorGuaranteed> for ErrorHandled {\n     }\n }\n \n-TrivialTypeFoldableAndLiftImpls! {\n+TrivialTypeTraversalAndLiftImpls! {\n     ErrorHandled,\n }\n "}, {"sha": "b068b2715640055fa6e61992793a65c6c6af0139", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ffdc2de8cd7fe564651a45766fe704be6d223b7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ffdc2de8cd7fe564651a45766fe704be6d223b7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=9ffdc2de8cd7fe564651a45766fe704be6d223b7", "patch": "@@ -762,7 +762,7 @@ pub enum ImplicitSelfKind {\n     None,\n }\n \n-TrivialTypeFoldableAndLiftImpls! { BindingForm<'tcx>, }\n+TrivialTypeTraversalAndLiftImpls! { BindingForm<'tcx>, }\n \n mod binding_form_impl {\n     use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n@@ -2641,7 +2641,7 @@ impl UserTypeProjection {\n     }\n }\n \n-TrivialTypeFoldableAndLiftImpls! { ProjectionKind, }\n+TrivialTypeTraversalAndLiftImpls! { ProjectionKind, }\n \n impl<'tcx> TypeFoldable<'tcx> for UserTypeProjection {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {"}, {"sha": "5f1fadaf3bc4ceafe376b5fe3590d07589ad53ef", "filename": "compiler/rustc_middle/src/mir/predecessors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ffdc2de8cd7fe564651a45766fe704be6d223b7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpredecessors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ffdc2de8cd7fe564651a45766fe704be6d223b7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpredecessors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpredecessors.rs?ref=9ffdc2de8cd7fe564651a45766fe704be6d223b7", "patch": "@@ -73,6 +73,6 @@ impl<CTX> HashStable<CTX> for PredecessorCache {\n     }\n }\n \n-TrivialTypeFoldableAndLiftImpls! {\n+TrivialTypeTraversalAndLiftImpls! {\n     PredecessorCache,\n }"}, {"sha": "d1f3e6b6fe6bd5d2d213032a29e92f0341185db8", "filename": "compiler/rustc_middle/src/mir/switch_sources.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ffdc2de8cd7fe564651a45766fe704be6d223b7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fswitch_sources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ffdc2de8cd7fe564651a45766fe704be6d223b7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fswitch_sources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fswitch_sources.rs?ref=9ffdc2de8cd7fe564651a45766fe704be6d223b7", "patch": "@@ -73,6 +73,6 @@ impl<CTX> HashStable<CTX> for SwitchSourceCache {\n     }\n }\n \n-TrivialTypeFoldableAndLiftImpls! {\n+TrivialTypeTraversalAndLiftImpls! {\n     SwitchSourceCache,\n }"}, {"sha": "30648679daebfd4ade88bb8bea85e8e80b0ded03", "filename": "compiler/rustc_middle/src/mir/traversal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ffdc2de8cd7fe564651a45766fe704be6d223b7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftraversal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ffdc2de8cd7fe564651a45766fe704be6d223b7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftraversal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftraversal.rs?ref=9ffdc2de8cd7fe564651a45766fe704be6d223b7", "patch": "@@ -384,6 +384,6 @@ impl<CTX> HashStable<CTX> for PostorderCache {\n     }\n }\n \n-TrivialTypeFoldableAndLiftImpls! {\n+TrivialTypeTraversalAndLiftImpls! {\n     PostorderCache,\n }"}, {"sha": "e1d50460f82bdcd73f81dad824249acbd158f69f", "filename": "compiler/rustc_middle/src/mir/type_foldable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ffdc2de8cd7fe564651a45766fe704be6d223b7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ffdc2de8cd7fe564651a45766fe704be6d223b7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs?ref=9ffdc2de8cd7fe564651a45766fe704be6d223b7", "patch": "@@ -4,7 +4,7 @@ use super::*;\n use crate::ty;\n use rustc_data_structures::functor::IdFunctor;\n \n-TrivialTypeFoldableAndLiftImpls! {\n+TrivialTypeTraversalAndLiftImpls! {\n     BlockTailInfo,\n     MirPhase,\n     SourceInfo,"}, {"sha": "527dbd1cd090aa71ebdf677c498a3a93133903a9", "filename": "compiler/rustc_middle/src/thir/abstract_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ffdc2de8cd7fe564651a45766fe704be6d223b7/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fabstract_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ffdc2de8cd7fe564651a45766fe704be6d223b7/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fabstract_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fabstract_const.rs?ref=9ffdc2de8cd7fe564651a45766fe704be6d223b7", "patch": "@@ -42,7 +42,7 @@ impl From<ErrorGuaranteed> for NotConstEvaluatable {\n     }\n }\n \n-TrivialTypeFoldableAndLiftImpls! {\n+TrivialTypeTraversalAndLiftImpls! {\n     NotConstEvaluatable,\n }\n "}, {"sha": "34703b6282042d1a96754e9ba1307bc29d9de09c", "filename": "compiler/rustc_middle/src/traits/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ffdc2de8cd7fe564651a45766fe704be6d223b7/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ffdc2de8cd7fe564651a45766fe704be6d223b7/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs?ref=9ffdc2de8cd7fe564651a45766fe704be6d223b7", "patch": "@@ -283,7 +283,7 @@ impl From<ErrorGuaranteed> for OverflowError {\n     }\n }\n \n-TrivialTypeFoldableAndLiftImpls! {\n+TrivialTypeTraversalAndLiftImpls! {\n     OverflowError,\n }\n "}, {"sha": "8f1a1564fc8e87863916c544b107a372c7d38d51", "filename": "compiler/rustc_middle/src/traits/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ffdc2de8cd7fe564651a45766fe704be6d223b7/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ffdc2de8cd7fe564651a45766fe704be6d223b7/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fstructural_impls.rs?ref=9ffdc2de8cd7fe564651a45766fe704be6d223b7", "patch": "@@ -129,7 +129,7 @@ impl<N: fmt::Debug> fmt::Debug for traits::ImplSourceConstDestructData<N> {\n ///////////////////////////////////////////////////////////////////////////\n // Lift implementations\n \n-TrivialTypeFoldableAndLiftImpls! {\n+TrivialTypeTraversalAndLiftImpls! {\n     super::IfExpressionCause,\n     super::ImplSourceDiscriminantKindData,\n     super::ImplSourcePointeeData,"}, {"sha": "3d65429f2e53cd97dd8643d525577af51160f902", "filename": "compiler/rustc_middle/src/ty/binding.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ffdc2de8cd7fe564651a45766fe704be6d223b7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fbinding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ffdc2de8cd7fe564651a45766fe704be6d223b7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fbinding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fbinding.rs?ref=9ffdc2de8cd7fe564651a45766fe704be6d223b7", "patch": "@@ -8,7 +8,7 @@ pub enum BindingMode {\n     BindByValue(Mutability),\n }\n \n-TrivialTypeFoldableAndLiftImpls! { BindingMode, }\n+TrivialTypeTraversalAndLiftImpls! { BindingMode, }\n \n impl BindingMode {\n     pub fn convert(ba: BindingAnnotation) -> BindingMode {"}, {"sha": "4ec3f30600afb0ada24e230dec7e6cd41eb5828f", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9ffdc2de8cd7fe564651a45766fe704be6d223b7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ffdc2de8cd7fe564651a45766fe704be6d223b7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=9ffdc2de8cd7fe564651a45766fe704be6d223b7", "patch": "@@ -183,7 +183,7 @@ impl<'tcx> fmt::Debug for ty::PredicateKind<'tcx> {\n // For things that don't carry any arena-allocated data (and are\n // copy...), just add them to this list.\n \n-TrivialTypeFoldableAndLiftImpls! {\n+TrivialTypeTraversalAndLiftImpls! {\n     (),\n     bool,\n     usize,\n@@ -692,19 +692,31 @@ impl<'tcx, A: TypeFoldable<'tcx>, B: TypeFoldable<'tcx>, C: TypeFoldable<'tcx>>\n     }\n }\n \n-EnumTypeFoldableImpl! {\n+EnumTypeTraversalImpl! {\n     impl<'tcx, T> TypeFoldable<'tcx> for Option<T> {\n         (Some)(a),\n         (None),\n     } where T: TypeFoldable<'tcx>\n }\n+EnumTypeTraversalImpl! {\n+    impl<'tcx, T> TypeVisitable<'tcx> for Option<T> {\n+        (Some)(a),\n+        (None),\n+    } where T: TypeVisitable<'tcx>\n+}\n \n-EnumTypeFoldableImpl! {\n+EnumTypeTraversalImpl! {\n     impl<'tcx, T, E> TypeFoldable<'tcx> for Result<T, E> {\n         (Ok)(a),\n         (Err)(a),\n     } where T: TypeFoldable<'tcx>, E: TypeFoldable<'tcx>,\n }\n+EnumTypeTraversalImpl! {\n+    impl<'tcx, T, E> TypeVisitable<'tcx> for Result<T, E> {\n+        (Ok)(a),\n+        (Err)(a),\n+    } where T: TypeVisitable<'tcx>, E: TypeVisitable<'tcx>,\n+}\n \n impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Rc<T> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>("}]}