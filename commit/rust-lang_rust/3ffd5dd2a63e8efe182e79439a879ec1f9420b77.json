{"sha": "3ffd5dd2a63e8efe182e79439a879ec1f9420b77", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmZmQ1ZGQyYTYzZThlZmUxODJlNzk0MzlhODc5ZWMxZjk0MjBiNzc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-08T08:47:28Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-08T08:47:28Z"}, "message": "migrate ra_analysis to new rowan", "tree": {"sha": "5a674d9b89081a371f07b5a0c0a21f0b71d7e75a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a674d9b89081a371f07b5a0c0a21f0b71d7e75a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ffd5dd2a63e8efe182e79439a879ec1f9420b77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ffd5dd2a63e8efe182e79439a879ec1f9420b77", "html_url": "https://github.com/rust-lang/rust/commit/3ffd5dd2a63e8efe182e79439a879ec1f9420b77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ffd5dd2a63e8efe182e79439a879ec1f9420b77/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da0b348ae9f629c5cbe4a836a90ed85e36ca18e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/da0b348ae9f629c5cbe4a836a90ed85e36ca18e5", "html_url": "https://github.com/rust-lang/rust/commit/da0b348ae9f629c5cbe4a836a90ed85e36ca18e5"}], "stats": {"total": 145, "additions": 67, "deletions": 78}, "files": [{"sha": "c1739e47eab5f04673ce5db26bdb28b0ac6fcd1a", "filename": "crates/ra_analysis/src/completion/complete_fn_param.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ffd5dd2a63e8efe182e79439a879ec1f9420b77/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcomplete_fn_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ffd5dd2a63e8efe182e79439a879ec1f9420b77/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcomplete_fn_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcomplete_fn_param.rs?ref=3ffd5dd2a63e8efe182e79439a879ec1f9420b77", "patch": "@@ -39,9 +39,9 @@ pub(super) fn complete_fn_param(acc: &mut Completions, ctx: &CompletionContext)\n                 .add_to(acc)\n         });\n \n-    fn process<'a, N: ast::FnDefOwner<'a>>(\n-        node: N,\n-        params: &mut FxHashMap<String, (u32, ast::Param<'a>)>,\n+    fn process<'a, N: ast::FnDefOwner>(\n+        node: &'a N,\n+        params: &mut FxHashMap<String, (u32, &'a ast::Param)>,\n     ) {\n         node.functions()\n             .filter_map(|it| it.param_list())"}, {"sha": "d350f06ceb60f2551cff11f6cb8932e040edc925", "filename": "crates/ra_analysis/src/completion/complete_keyword.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ffd5dd2a63e8efe182e79439a879ec1f9420b77/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ffd5dd2a63e8efe182e79439a879ec1f9420b77/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs?ref=3ffd5dd2a63e8efe182e79439a879ec1f9420b77", "patch": "@@ -2,7 +2,7 @@ use ra_syntax::{\n     algo::visit::{visitor, Visitor},\n     AstNode,\n     ast::{self, LoopBodyOwner},\n-    SyntaxKind::*, SyntaxNodeRef,\n+    SyntaxKind::*, SyntaxNode,\n };\n \n use crate::completion::{CompletionContext, CompletionItem, Completions, CompletionKind, CompletionItemKind};\n@@ -76,7 +76,7 @@ pub(super) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionConte\n     acc.add_all(complete_return(fn_def, ctx.can_be_stmt));\n }\n \n-fn is_in_loop_body(leaf: SyntaxNodeRef) -> bool {\n+fn is_in_loop_body(leaf: &SyntaxNode) -> bool {\n     for node in leaf.ancestors() {\n         if node.kind() == FN_DEF || node.kind() == LAMBDA_EXPR {\n             break;\n@@ -95,7 +95,7 @@ fn is_in_loop_body(leaf: SyntaxNodeRef) -> bool {\n     false\n }\n \n-fn complete_return(fn_def: ast::FnDef, can_be_stmt: bool) -> Option<CompletionItem> {\n+fn complete_return(fn_def: &ast::FnDef, can_be_stmt: bool) -> Option<CompletionItem> {\n     let snip = match (can_be_stmt, fn_def.ret_type().is_some()) {\n         (true, true) => \"return $0;\",\n         (true, false) => \"return;\","}, {"sha": "988c21c58d3de30c378d228f9e2ca117c69bfdee", "filename": "crates/ra_analysis/src/completion/completion_context.rs", "status": "modified", "additions": 11, "deletions": 18, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3ffd5dd2a63e8efe182e79439a879ec1f9420b77/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ffd5dd2a63e8efe182e79439a879ec1f9420b77/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=3ffd5dd2a63e8efe182e79439a879ec1f9420b77", "patch": "@@ -1,13 +1,9 @@\n use ra_editor::find_node_at_offset;\n use ra_text_edit::AtomTextEdit;\n use ra_syntax::{\n-    algo::{find_leaf_at_offset, find_covering_node},\n+    AstNode, SyntaxNode, SourceFile, TextUnit, TextRange,\n     ast,\n-    AstNode,\n-    SyntaxNodeRef,\n-    SourceFileNode,\n-    TextUnit,\n-    TextRange,\n+    algo::{find_leaf_at_offset, find_covering_node},\n     SyntaxKind::*,\n };\n use hir::source_binder;\n@@ -20,11 +16,11 @@ use crate::{db, FilePosition, Cancelable};\n pub(super) struct CompletionContext<'a> {\n     pub(super) db: &'a db::RootDatabase,\n     pub(super) offset: TextUnit,\n-    pub(super) leaf: SyntaxNodeRef<'a>,\n+    pub(super) leaf: &'a SyntaxNode,\n     pub(super) module: Option<hir::Module>,\n     pub(super) function: Option<hir::Function>,\n-    pub(super) function_syntax: Option<ast::FnDef<'a>>,\n-    pub(super) use_item_syntax: Option<ast::UseItem<'a>>,\n+    pub(super) function_syntax: Option<&'a ast::FnDef>,\n+    pub(super) use_item_syntax: Option<&'a ast::UseItem>,\n     pub(super) is_param: bool,\n     /// A single-indent path, like `foo`.\n     pub(super) is_trivial_path: bool,\n@@ -36,15 +32,15 @@ pub(super) struct CompletionContext<'a> {\n     /// Something is typed at the \"top\" level, in module or impl/trait.\n     pub(super) is_new_item: bool,\n     /// The receiver if this is a field or method access, i.e. writing something.<|>\n-    pub(super) dot_receiver: Option<ast::Expr<'a>>,\n+    pub(super) dot_receiver: Option<&'a ast::Expr>,\n     /// If this is a method call in particular, i.e. the () are already there.\n     pub(super) is_method_call: bool,\n }\n \n impl<'a> CompletionContext<'a> {\n     pub(super) fn new(\n         db: &'a db::RootDatabase,\n-        original_file: &'a SourceFileNode,\n+        original_file: &'a SourceFile,\n         position: FilePosition,\n     ) -> Cancelable<Option<CompletionContext<'a>>> {\n         let module = source_binder::module_from_position(db, position)?;\n@@ -71,7 +67,7 @@ impl<'a> CompletionContext<'a> {\n         Ok(Some(ctx))\n     }\n \n-    fn fill(&mut self, original_file: &'a SourceFileNode, offset: TextUnit) {\n+    fn fill(&mut self, original_file: &'a SourceFile, offset: TextUnit) {\n         // Insert a fake ident to get a valid parse tree. We will use this file\n         // to determine context, though the original_file will be used for\n         // actual completion.\n@@ -100,7 +96,7 @@ impl<'a> CompletionContext<'a> {\n             }\n         }\n     }\n-    fn classify_name_ref(&mut self, original_file: &'a SourceFileNode, name_ref: ast::NameRef) {\n+    fn classify_name_ref(&mut self, original_file: &'a SourceFile, name_ref: &ast::NameRef) {\n         let name_range = name_ref.syntax().range();\n         let top_node = name_ref\n             .syntax()\n@@ -197,15 +193,12 @@ impl<'a> CompletionContext<'a> {\n     }\n }\n \n-fn find_node_with_range<'a, N: AstNode<'a>>(\n-    syntax: SyntaxNodeRef<'a>,\n-    range: TextRange,\n-) -> Option<N> {\n+fn find_node_with_range<N: AstNode>(syntax: &SyntaxNode, range: TextRange) -> Option<&N> {\n     let node = find_covering_node(syntax, range);\n     node.ancestors().find_map(N::cast)\n }\n \n-fn is_node<'a, N: AstNode<'a>>(node: SyntaxNodeRef<'a>) -> bool {\n+fn is_node<N: AstNode>(node: &SyntaxNode) -> bool {\n     match node.ancestors().filter_map(N::cast).next() {\n         None => false,\n         Some(n) => n.syntax().range() == node.range(),"}, {"sha": "3b130f96648d3879d9c34eb85fc0ecab22f1a65d", "filename": "crates/ra_analysis/src/extend_selection.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3ffd5dd2a63e8efe182e79439a879ec1f9420b77/crates%2Fra_analysis%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ffd5dd2a63e8efe182e79439a879ec1f9420b77/crates%2Fra_analysis%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fextend_selection.rs?ref=3ffd5dd2a63e8efe182e79439a879ec1f9420b77", "patch": "@@ -1,6 +1,6 @@\n use ra_db::SyntaxDatabase;\n use ra_syntax::{\n-    SyntaxNodeRef, AstNode, SourceFileNode,\n+    SyntaxNode, AstNode, SourceFile,\n     ast, algo::find_covering_node,\n };\n \n@@ -19,18 +19,18 @@ pub(crate) fn extend_selection(db: &RootDatabase, frange: FileRange) -> TextRang\n \n fn extend_selection_in_macro(\n     _db: &RootDatabase,\n-    source_file: &SourceFileNode,\n+    source_file: &SourceFile,\n     frange: FileRange,\n ) -> Option<TextRange> {\n     let macro_call = find_macro_call(source_file.syntax(), frange.range)?;\n     let (off, exp) = hir::MacroDef::ast_expand(macro_call)?;\n     let dst_range = exp.map_range_forward(frange.range - off)?;\n-    let dst_range = ra_editor::extend_selection(exp.syntax().borrowed(), dst_range)?;\n+    let dst_range = ra_editor::extend_selection(&exp.syntax(), dst_range)?;\n     let src_range = exp.map_range_back(dst_range)? + off;\n     Some(src_range)\n }\n \n-fn find_macro_call(node: SyntaxNodeRef, range: TextRange) -> Option<ast::MacroCall> {\n+fn find_macro_call(node: &SyntaxNode, range: TextRange) -> Option<&ast::MacroCall> {\n     find_covering_node(node, range)\n         .ancestors()\n         .find_map(ast::MacroCall::cast)"}, {"sha": "0bcf13ebde4574735dc08399e2cb98d8cffca43a", "filename": "crates/ra_analysis/src/goto_defenition.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ffd5dd2a63e8efe182e79439a879ec1f9420b77/crates%2Fra_analysis%2Fsrc%2Fgoto_defenition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ffd5dd2a63e8efe182e79439a879ec1f9420b77/crates%2Fra_analysis%2Fsrc%2Fgoto_defenition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fgoto_defenition.rs?ref=3ffd5dd2a63e8efe182e79439a879ec1f9420b77", "patch": "@@ -23,7 +23,7 @@ pub(crate) fn goto_defenition(\n pub(crate) fn reference_defenition(\n     db: &RootDatabase,\n     file_id: FileId,\n-    name_ref: ast::NameRef,\n+    name_ref: &ast::NameRef,\n ) -> Cancelable<Vec<NavigationTarget>> {\n     if let Some(fn_descr) =\n         hir::source_binder::function_from_child_node(db, file_id, name_ref.syntax())?\n@@ -53,7 +53,7 @@ pub(crate) fn reference_defenition(\n fn name_defenition(\n     db: &RootDatabase,\n     file_id: FileId,\n-    name: ast::Name,\n+    name: &ast::Name,\n ) -> Cancelable<Option<Vec<NavigationTarget>>> {\n     if let Some(module) = name.syntax().parent().and_then(ast::Module::cast) {\n         if module.has_semi() {"}, {"sha": "5607c3ef313513514518053dd3e624f1b79de374", "filename": "crates/ra_analysis/src/hover.rs", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3ffd5dd2a63e8efe182e79439a879ec1f9420b77/crates%2Fra_analysis%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ffd5dd2a63e8efe182e79439a879ec1f9420b77/crates%2Fra_analysis%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fhover.rs?ref=3ffd5dd2a63e8efe182e79439a879ec1f9420b77", "patch": "@@ -1,7 +1,7 @@\n use ra_db::{Cancelable, SyntaxDatabase};\n use ra_editor::find_node_at_offset;\n use ra_syntax::{\n-    AstNode, SyntaxNode,\n+    AstNode, SyntaxNode, TreePtr,\n     ast::{self, NameOwner},\n     algo::{find_covering_node, find_leaf_at_offset, visit::{visitor, Visitor}},\n };\n@@ -88,20 +88,19 @@ fn doc_text_for(db: &RootDatabase, nav: NavigationTarget) -> Cancelable<Option<S\n }\n \n impl NavigationTarget {\n-    fn node(&self, db: &RootDatabase) -> Option<SyntaxNode> {\n+    fn node(&self, db: &RootDatabase) -> Option<TreePtr<SyntaxNode>> {\n         let source_file = db.source_file(self.file_id);\n         let source_file = source_file.syntax();\n         let node = source_file\n             .descendants()\n             .find(|node| node.kind() == self.kind && node.range() == self.range)?\n-            .owned();\n+            .to_owned();\n         Some(node)\n     }\n \n     fn docs(&self, db: &RootDatabase) -> Option<String> {\n         let node = self.node(db)?;\n-        let node = node.borrowed();\n-        fn doc_comments<'a, N: ast::DocCommentsOwner<'a>>(node: N) -> Option<String> {\n+        fn doc_comments<N: ast::DocCommentsOwner>(node: &N) -> Option<String> {\n             let comments = node.doc_comment_text();\n             if comments.is_empty() {\n                 None\n@@ -119,7 +118,7 @@ impl NavigationTarget {\n             .visit(doc_comments::<ast::TypeDef>)\n             .visit(doc_comments::<ast::ConstDef>)\n             .visit(doc_comments::<ast::StaticDef>)\n-            .accept(node)?\n+            .accept(&node)?\n     }\n \n     /// Get a description of this node.\n@@ -128,50 +127,49 @@ impl NavigationTarget {\n     fn description(&self, db: &RootDatabase) -> Option<String> {\n         // TODO: After type inference is done, add type information to improve the output\n         let node = self.node(db)?;\n-        let node = node.borrowed();\n         // TODO: Refactor to be have less repetition\n         visitor()\n-            .visit(|node: ast::FnDef| {\n+            .visit(|node: &ast::FnDef| {\n                 let mut string = \"fn \".to_string();\n                 node.name()?.syntax().text().push_to(&mut string);\n                 Some(string)\n             })\n-            .visit(|node: ast::StructDef| {\n+            .visit(|node: &ast::StructDef| {\n                 let mut string = \"struct \".to_string();\n                 node.name()?.syntax().text().push_to(&mut string);\n                 Some(string)\n             })\n-            .visit(|node: ast::EnumDef| {\n+            .visit(|node: &ast::EnumDef| {\n                 let mut string = \"enum \".to_string();\n                 node.name()?.syntax().text().push_to(&mut string);\n                 Some(string)\n             })\n-            .visit(|node: ast::TraitDef| {\n+            .visit(|node: &ast::TraitDef| {\n                 let mut string = \"trait \".to_string();\n                 node.name()?.syntax().text().push_to(&mut string);\n                 Some(string)\n             })\n-            .visit(|node: ast::Module| {\n+            .visit(|node: &ast::Module| {\n                 let mut string = \"mod \".to_string();\n                 node.name()?.syntax().text().push_to(&mut string);\n                 Some(string)\n             })\n-            .visit(|node: ast::TypeDef| {\n+            .visit(|node: &ast::TypeDef| {\n                 let mut string = \"type \".to_string();\n                 node.name()?.syntax().text().push_to(&mut string);\n                 Some(string)\n             })\n-            .visit(|node: ast::ConstDef| {\n+            .visit(|node: &ast::ConstDef| {\n                 let mut string = \"const \".to_string();\n                 node.name()?.syntax().text().push_to(&mut string);\n                 Some(string)\n             })\n-            .visit(|node: ast::StaticDef| {\n+            .visit(|node: &ast::StaticDef| {\n                 let mut string = \"static \".to_string();\n                 node.name()?.syntax().text().push_to(&mut string);\n                 Some(string)\n             })\n-            .accept(node)?\n+            .accept(&node)?\n     }\n }\n "}, {"sha": "8ac430e416b9bd944c278295b9690381516b6945", "filename": "crates/ra_analysis/src/imp.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3ffd5dd2a63e8efe182e79439a879ec1f9420b77/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ffd5dd2a63e8efe182e79439a879ec1f9420b77/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fimp.rs?ref=3ffd5dd2a63e8efe182e79439a879ec1f9420b77", "patch": "@@ -8,10 +8,9 @@ use hir::{\n use ra_db::{FilesDatabase, SourceRoot, SourceRootId, SyntaxDatabase};\n use ra_editor::{self, find_node_at_offset, assists, LocalEdit, Severity};\n use ra_syntax::{\n-    ast::{self, ArgListOwner, Expr, NameOwner},\n-    AstNode, SourceFileNode,\n+    SyntaxNode, TextRange, TextUnit, AstNode, SourceFile,\n+    ast::{self, ArgListOwner, NameOwner},\n     SyntaxKind::*,\n-    SyntaxNodeRef, TextRange, TextUnit,\n };\n \n use crate::{\n@@ -113,7 +112,6 @@ impl db::RootDatabase {\n             None => return Ok(Vec::new()),\n             Some(it) => it,\n         };\n-        let ast_module = ast_module.borrowed();\n         let name = ast_module.name().unwrap();\n         Ok(vec![NavigationTarget {\n             file_id,\n@@ -163,9 +161,9 @@ impl db::RootDatabase {\n \n         fn find_binding<'a>(\n             db: &db::RootDatabase,\n-            source_file: &'a SourceFileNode,\n+            source_file: &'a SourceFile,\n             position: FilePosition,\n-        ) -> Cancelable<Option<(ast::BindPat<'a>, hir::Function)>> {\n+        ) -> Cancelable<Option<(&'a ast::BindPat, hir::Function)>> {\n             let syntax = source_file.syntax();\n             if let Some(binding) = find_node_at_offset::<ast::BindPat>(syntax, position.offset) {\n                 let descr = ctry!(source_binder::function_from_child_node(\n@@ -281,7 +279,7 @@ impl db::RootDatabase {\n             if symbol.ptr.kind() == FN_DEF {\n                 let fn_file = self.source_file(symbol.file_id);\n                 let fn_def = symbol.ptr.resolve(&fn_file);\n-                let fn_def = ast::FnDef::cast(fn_def.borrowed()).unwrap();\n+                let fn_def = ast::FnDef::cast(&fn_def).unwrap();\n                 let descr = ctry!(source_binder::function_from_source(\n                     self,\n                     symbol.file_id,\n@@ -352,7 +350,7 @@ impl db::RootDatabase {\n             .collect::<Vec<_>>();\n         Ok(res)\n     }\n-    pub(crate) fn index_resolve(&self, name_ref: ast::NameRef) -> Cancelable<Vec<FileSymbol>> {\n+    pub(crate) fn index_resolve(&self, name_ref: &ast::NameRef) -> Cancelable<Vec<FileSymbol>> {\n         let name = name_ref.text();\n         let mut query = Query::new(name.to_string());\n         query.exact();\n@@ -379,12 +377,12 @@ impl SourceChange {\n }\n \n enum FnCallNode<'a> {\n-    CallExpr(ast::CallExpr<'a>),\n-    MethodCallExpr(ast::MethodCallExpr<'a>),\n+    CallExpr(&'a ast::CallExpr),\n+    MethodCallExpr(&'a ast::MethodCallExpr),\n }\n \n impl<'a> FnCallNode<'a> {\n-    pub fn with_node(syntax: SyntaxNodeRef, offset: TextUnit) -> Option<FnCallNode> {\n+    pub fn with_node(syntax: &'a SyntaxNode, offset: TextUnit) -> Option<FnCallNode<'a>> {\n         if let Some(expr) = find_node_at_offset::<ast::CallExpr>(syntax, offset) {\n             return Some(FnCallNode::CallExpr(expr));\n         }\n@@ -394,10 +392,10 @@ impl<'a> FnCallNode<'a> {\n         None\n     }\n \n-    pub fn name_ref(&self) -> Option<ast::NameRef> {\n+    pub fn name_ref(&self) -> Option<&'a ast::NameRef> {\n         match *self {\n-            FnCallNode::CallExpr(call_expr) => Some(match call_expr.expr()? {\n-                Expr::PathExpr(path_expr) => path_expr.path()?.segment()?.name_ref()?,\n+            FnCallNode::CallExpr(call_expr) => Some(match call_expr.expr()?.kind() {\n+                ast::ExprKind::PathExpr(path_expr) => path_expr.path()?.segment()?.name_ref()?,\n                 _ => return None,\n             }),\n \n@@ -409,7 +407,7 @@ impl<'a> FnCallNode<'a> {\n         }\n     }\n \n-    pub fn arg_list(&self) -> Option<ast::ArgList> {\n+    pub fn arg_list(&self) -> Option<&'a ast::ArgList> {\n         match *self {\n             FnCallNode::CallExpr(expr) => expr.arg_list(),\n             FnCallNode::MethodCallExpr(expr) => expr.arg_list(),"}, {"sha": "ec400ffe23d0f2011e09d639c2079f2f13e32833", "filename": "crates/ra_analysis/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3ffd5dd2a63e8efe182e79439a879ec1f9420b77/crates%2Fra_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ffd5dd2a63e8efe182e79439a879ec1f9420b77/crates%2Fra_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Flib.rs?ref=3ffd5dd2a63e8efe182e79439a879ec1f9420b77", "patch": "@@ -26,7 +26,7 @@ mod syntax_highlighting;\n \n use std::{fmt, sync::Arc};\n \n-use ra_syntax::{SmolStr, SourceFileNode, SyntaxKind, TextRange, TextUnit};\n+use ra_syntax::{SmolStr, SourceFile, TreePtr, SyntaxKind, TextRange, TextUnit};\n use ra_text_edit::TextEdit;\n use rayon::prelude::*;\n use relative_path::RelativePathBuf;\n@@ -308,7 +308,7 @@ impl Analysis {\n         self.db.file_text(file_id)\n     }\n     /// Gets the syntax tree of the file.\n-    pub fn file_syntax(&self, file_id: FileId) -> SourceFileNode {\n+    pub fn file_syntax(&self, file_id: FileId) -> TreePtr<SourceFile> {\n         self.db.source_file(file_id).clone()\n     }\n     /// Gets the file's `LineIndex`: data structure to convert between absolute\n@@ -322,7 +322,7 @@ impl Analysis {\n     }\n     /// Returns position of the mathcing brace (all types of braces are\n     /// supported).\n-    pub fn matching_brace(&self, file: &SourceFileNode, offset: TextUnit) -> Option<TextUnit> {\n+    pub fn matching_brace(&self, file: &SourceFile, offset: TextUnit) -> Option<TextUnit> {\n         ra_editor::matching_brace(file, offset)\n     }\n     /// Returns a syntax tree represented as `String`, for debug purposes.\n@@ -469,7 +469,7 @@ impl LibraryData {\n         files: Vec<(FileId, RelativePathBuf, Arc<String>)>,\n     ) -> LibraryData {\n         let symbol_index = SymbolIndex::for_files(files.par_iter().map(|(file_id, _, text)| {\n-            let file = SourceFileNode::parse(text);\n+            let file = SourceFile::parse(text);\n             (*file_id, file)\n         }));\n         let mut root_change = RootChange::default();"}, {"sha": "98b1d2d5521170cc57d3ab4767d8da72a37500b3", "filename": "crates/ra_analysis/src/runnables.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3ffd5dd2a63e8efe182e79439a879ec1f9420b77/crates%2Fra_analysis%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ffd5dd2a63e8efe182e79439a879ec1f9420b77/crates%2Fra_analysis%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Frunnables.rs?ref=3ffd5dd2a63e8efe182e79439a879ec1f9420b77", "patch": "@@ -1,7 +1,7 @@\n use itertools::Itertools;\n use ra_syntax::{\n+    TextRange, SyntaxNode,\n     ast::{self, AstNode, NameOwner, ModuleItemOwner},\n-    TextRange, SyntaxNodeRef,\n };\n use ra_db::{Cancelable, SyntaxDatabase};\n \n@@ -30,7 +30,7 @@ pub(crate) fn runnables(db: &RootDatabase, file_id: FileId) -> Cancelable<Vec<Ru\n     Ok(res)\n }\n \n-fn runnable(db: &RootDatabase, file_id: FileId, item: SyntaxNodeRef) -> Option<Runnable> {\n+fn runnable(db: &RootDatabase, file_id: FileId, item: &SyntaxNode) -> Option<Runnable> {\n     if let Some(fn_def) = ast::FnDef::cast(item) {\n         runnable_fn(fn_def)\n     } else if let Some(m) = ast::Module::cast(item) {\n@@ -40,7 +40,7 @@ fn runnable(db: &RootDatabase, file_id: FileId, item: SyntaxNodeRef) -> Option<R\n     }\n }\n \n-fn runnable_fn(fn_def: ast::FnDef) -> Option<Runnable> {\n+fn runnable_fn(fn_def: &ast::FnDef) -> Option<Runnable> {\n     let name = fn_def.name()?.text();\n     let kind = if name == \"main\" {\n         RunnableKind::Bin\n@@ -57,12 +57,12 @@ fn runnable_fn(fn_def: ast::FnDef) -> Option<Runnable> {\n     })\n }\n \n-fn runnable_mod(db: &RootDatabase, file_id: FileId, module: ast::Module) -> Option<Runnable> {\n+fn runnable_mod(db: &RootDatabase, file_id: FileId, module: &ast::Module) -> Option<Runnable> {\n     let has_test_function = module\n         .item_list()?\n         .items()\n-        .filter_map(|it| match it {\n-            ast::ModuleItem::FnDef(it) => Some(it),\n+        .filter_map(|it| match it.kind() {\n+            ast::ModuleItemKind::FnDef(it) => Some(it),\n             _ => None,\n         })\n         .any(|f| f.has_atom_attr(\"test\"));"}, {"sha": "ed179675643618037473cefd08cbe0f5dcb5c385", "filename": "crates/ra_analysis/src/symbol_index.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3ffd5dd2a63e8efe182e79439a879ec1f9420b77/crates%2Fra_analysis%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ffd5dd2a63e8efe182e79439a879ec1f9420b77/crates%2Fra_analysis%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fsymbol_index.rs?ref=3ffd5dd2a63e8efe182e79439a879ec1f9420b77", "patch": "@@ -27,7 +27,7 @@ use std::{\n \n use fst::{self, Streamer};\n use ra_syntax::{\n-    SyntaxNodeRef, SourceFileNode, SmolStr,\n+    SyntaxNode, SourceFile, SmolStr, TreePtr, AstNode,\n     algo::{visit::{visitor, Visitor}, find_covering_node},\n     SyntaxKind::{self, *},\n     ast::{self, NameOwner},\n@@ -141,7 +141,7 @@ impl SymbolIndex {\n     }\n \n     pub(crate) fn for_files(\n-        files: impl ParallelIterator<Item = (FileId, SourceFileNode)>,\n+        files: impl ParallelIterator<Item = (FileId, TreePtr<SourceFile>)>,\n     ) -> SymbolIndex {\n         let symbols = files\n             .flat_map(|(file_id, file)| {\n@@ -203,8 +203,8 @@ pub(crate) struct FileSymbol {\n     pub(crate) ptr: LocalSyntaxPtr,\n }\n \n-fn to_symbol(node: SyntaxNodeRef) -> Option<(SmolStr, LocalSyntaxPtr)> {\n-    fn decl<'a, N: NameOwner<'a>>(node: N) -> Option<(SmolStr, LocalSyntaxPtr)> {\n+fn to_symbol(node: &SyntaxNode) -> Option<(SmolStr, LocalSyntaxPtr)> {\n+    fn decl<N: NameOwner>(node: &N) -> Option<(SmolStr, LocalSyntaxPtr)> {\n         let name = node.name()?.text();\n         let ptr = LocalSyntaxPtr::new(node.syntax());\n         Some((name, ptr))"}, {"sha": "d2dc6cfbb9b4a1e3746cfb4bf086757394f91f38", "filename": "crates/ra_analysis/src/syntax_highlighting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ffd5dd2a63e8efe182e79439a879ec1f9420b77/crates%2Fra_analysis%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ffd5dd2a63e8efe182e79439a879ec1f9420b77/crates%2Fra_analysis%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fsyntax_highlighting.rs?ref=3ffd5dd2a63e8efe182e79439a879ec1f9420b77", "patch": "@@ -16,7 +16,7 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Cancelable<Vec<Hi\n         .filter_map(ast::MacroCall::cast)\n     {\n         if let Some((off, exp)) = hir::MacroDef::ast_expand(macro_call) {\n-            let mapped_ranges = ra_editor::highlight(exp.syntax().borrowed())\n+            let mapped_ranges = ra_editor::highlight(&exp.syntax())\n                 .into_iter()\n                 .filter_map(|r| {\n                     let mapped_range = exp.map_range_back(r.range)?;"}, {"sha": "4c54449ef1332133179f89d4dcf56e04d8240824", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ffd5dd2a63e8efe182e79439a879ec1f9420b77/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ffd5dd2a63e8efe182e79439a879ec1f9420b77/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=3ffd5dd2a63e8efe182e79439a879ec1f9420b77", "patch": "@@ -77,7 +77,7 @@ impl BodySyntaxMapping {\n     pub fn syntax_expr(&self, ptr: LocalSyntaxPtr) -> Option<ExprId> {\n         self.expr_syntax_mapping.get(&ptr).cloned()\n     }\n-    pub fn node_expr(&self, node: ast::Expr) -> Option<ExprId> {\n+    pub fn node_expr(&self, node: &ast::Expr) -> Option<ExprId> {\n         self.expr_syntax_mapping\n             .get(&LocalSyntaxPtr::new(node.syntax()))\n             .cloned()\n@@ -88,7 +88,7 @@ impl BodySyntaxMapping {\n     pub fn syntax_pat(&self, ptr: LocalSyntaxPtr) -> Option<PatId> {\n         self.pat_syntax_mapping.get(&ptr).cloned()\n     }\n-    pub fn node_pat(&self, node: ast::Pat) -> Option<PatId> {\n+    pub fn node_pat(&self, node: &ast::Pat) -> Option<PatId> {\n         self.pat_syntax_mapping\n             .get(&LocalSyntaxPtr::new(node.syntax()))\n             .cloned()"}]}