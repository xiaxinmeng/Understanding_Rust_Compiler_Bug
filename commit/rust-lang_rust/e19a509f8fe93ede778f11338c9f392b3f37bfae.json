{"sha": "e19a509f8fe93ede778f11338c9f392b3f37bfae", "node_id": "C_kwDOAAsO6NoAKGUxOWE1MDlmOGZlOTNlZGU3NzhmMTEzMzhjOWYzOTJiM2YzN2JmYWU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-06-10T23:57:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-06-10T23:57:25Z"}, "message": "Rollup merge of #112475 - chenyukang:yukang-fix-112278, r=compiler-errors\n\nFix issue for module name when surround the struct literal with parentheses\n\nFixes #112278", "tree": {"sha": "37e8336290f6888df5e5efb676e9e3400b4dc965", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37e8336290f6888df5e5efb676e9e3400b4dc965"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e19a509f8fe93ede778f11338c9f392b3f37bfae", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkhQ3lCRBK7hj4Ov3rIwAAvLMIADCQ/Ms4L7MUU/MgDFzVchkL\nqZcLb/J9g/3S1oUmLr2FOvzlH15KrDJlwVF7ZIgeFFMyAJ+A4hLSxR5EU9lwJbEi\nO6SLvRWn0kB+I5QwSUEG9r+rbiaXHFroNVxclabgSz6Bw3fuRbnWsrHeAI/Ss61f\nO2PCa5Zlu8jzEr87FEZ62TrcMmn6tAfmDrTBJK143RdoSvDravvb2Q5eF9SUehf3\nhpiwYp2CIruwpGbDmXcggGLyBZFKrMws8XAdjJkiD7xwgY8GwjqVznd+mk+BT5xN\nrk7jb+zERG+ceXsjLVvlaQ6OAXy+2UUD0JAi4nFzicsHwUxkKyNfulE728F1L5k=\n=0l1L\n-----END PGP SIGNATURE-----\n", "payload": "tree 37e8336290f6888df5e5efb676e9e3400b4dc965\nparent 7820972f866ca2cea281ccc39201c0cd27087110\nparent f54e75730bb33d08281c91a9b77332606ec69942\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1686441445 +0200\ncommitter GitHub <noreply@github.com> 1686441445 +0200\n\nRollup merge of #112475 - chenyukang:yukang-fix-112278, r=compiler-errors\n\nFix issue for module name when surround the struct literal with parentheses\n\nFixes #112278\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e19a509f8fe93ede778f11338c9f392b3f37bfae", "html_url": "https://github.com/rust-lang/rust/commit/e19a509f8fe93ede778f11338c9f392b3f37bfae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e19a509f8fe93ede778f11338c9f392b3f37bfae/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7820972f866ca2cea281ccc39201c0cd27087110", "url": "https://api.github.com/repos/rust-lang/rust/commits/7820972f866ca2cea281ccc39201c0cd27087110", "html_url": "https://github.com/rust-lang/rust/commit/7820972f866ca2cea281ccc39201c0cd27087110"}, {"sha": "f54e75730bb33d08281c91a9b77332606ec69942", "url": "https://api.github.com/repos/rust-lang/rust/commits/f54e75730bb33d08281c91a9b77332606ec69942", "html_url": "https://github.com/rust-lang/rust/commit/f54e75730bb33d08281c91a9b77332606ec69942"}], "stats": {"total": 122, "additions": 113, "deletions": 9}, "files": [{"sha": "35eec2c8e1b17f2112471aba5997a557127f9ff9", "filename": "compiler/rustc_parse/messages.ftl", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e19a509f8fe93ede778f11338c9f392b3f37bfae/compiler%2Frustc_parse%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/e19a509f8fe93ede778f11338c9f392b3f37bfae/compiler%2Frustc_parse%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fmessages.ftl?ref=e19a509f8fe93ede778f11338c9f392b3f37bfae", "patch": "@@ -695,7 +695,7 @@ parse_struct_literal_body_without_path =\n \n parse_struct_literal_needing_parens =\n     invalid struct literal\n-    .suggestion = you might need to surround the struct literal in parentheses\n+    .suggestion = you might need to surround the struct literal with parentheses\n \n parse_struct_literal_not_allowed_here = struct literals are not allowed here\n     .suggestion = surround the struct literal with parentheses"}, {"sha": "228eff1269f1157fa84260101027a607bba264ab", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e19a509f8fe93ede778f11338c9f392b3f37bfae/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e19a509f8fe93ede778f11338c9f392b3f37bfae/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=e19a509f8fe93ede778f11338c9f392b3f37bfae", "patch": "@@ -751,13 +751,24 @@ impl<'a> Parser<'a> {\n                     tail.could_be_bare_literal = true;\n                     if maybe_struct_name.is_ident() && can_be_struct_literal {\n                         // Account for `if Example { a: one(), }.is_pos() {}`.\n-                        Err(self.sess.create_err(StructLiteralNeedingParens {\n-                            span: maybe_struct_name.span.to(expr.span),\n-                            sugg: StructLiteralNeedingParensSugg {\n-                                before: maybe_struct_name.span.shrink_to_lo(),\n-                                after: expr.span.shrink_to_hi(),\n-                            },\n-                        }))\n+                        // expand `before` so that we take care of module path such as:\n+                        // `foo::Bar { ... } `\n+                        // we expect to suggest `(foo::Bar { ... })` instead of `foo::(Bar { ... })`\n+                        let sm = self.sess.source_map();\n+                        let before = maybe_struct_name.span.shrink_to_lo();\n+                        if let Ok(extend_before) = sm.span_extend_prev_while(before, |t| {\n+                            t.is_alphanumeric() || t == ':' || t == '_'\n+                        }) {\n+                            Err(self.sess.create_err(StructLiteralNeedingParens {\n+                                span: maybe_struct_name.span.to(expr.span),\n+                                sugg: StructLiteralNeedingParensSugg {\n+                                    before: extend_before.shrink_to_lo(),\n+                                    after: expr.span.shrink_to_hi(),\n+                                },\n+                            }))\n+                        } else {\n+                            return None;\n+                        }\n                     } else {\n                         self.sess.emit_err(StructLiteralBodyWithoutPath {\n                             span: expr.span,"}, {"sha": "c53fe084c4db0f2f01779c5255975d701d69bc9a", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e19a509f8fe93ede778f11338c9f392b3f37bfae/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e19a509f8fe93ede778f11338c9f392b3f37bfae/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=e19a509f8fe93ede778f11338c9f392b3f37bfae", "patch": "@@ -744,6 +744,21 @@ impl SourceMap {\n         })\n     }\n \n+    /// Extends the given `Span` to previous character while the previous character matches the predicate\n+    pub fn span_extend_prev_while(\n+        &self,\n+        span: Span,\n+        f: impl Fn(char) -> bool,\n+    ) -> Result<Span, SpanSnippetError> {\n+        self.span_to_source(span, |s, start, _end| {\n+            let n = s[..start]\n+                .char_indices()\n+                .rfind(|&(_, c)| !f(c))\n+                .map_or(start, |(i, _)| start - i - 1);\n+            Ok(span.with_lo(span.lo() - BytePos(n as u32)))\n+        })\n+    }\n+\n     /// Extends the given `Span` to just before the next occurrence of `c`.\n     pub fn span_extend_to_next_char(&self, sp: Span, c: char, accept_newlines: bool) -> Span {\n         if let Ok(next_source) = self.span_to_next_source(sp) {"}, {"sha": "56096f706a8a7c647cd67e2feaa4c08881006520", "filename": "tests/ui/parser/issues/issue-111692.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e19a509f8fe93ede778f11338c9f392b3f37bfae/tests%2Fui%2Fparser%2Fissues%2Fissue-111692.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e19a509f8fe93ede778f11338c9f392b3f37bfae/tests%2Fui%2Fparser%2Fissues%2Fissue-111692.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-111692.rs?ref=e19a509f8fe93ede778f11338c9f392b3f37bfae", "patch": "@@ -0,0 +1,32 @@\n+mod module {\n+    #[derive(Eq, PartialEq)]\n+    pub struct Type {\n+        pub x: u8,\n+        pub y: u8,\n+    }\n+\n+    pub const C: u8 = 32u8;\n+}\n+\n+fn test(x: module::Type) {\n+    if x == module::Type { x: module::C, y: 1 } { //~ ERROR invalid struct literal\n+    }\n+}\n+\n+fn test2(x: module::Type) {\n+    if x ==module::Type { x: module::C, y: 1 } { //~ ERROR invalid struct literal\n+    }\n+}\n+\n+\n+fn test3(x: module::Type) {\n+    if x == Type { x: module::C, y: 1 } { //~ ERROR invalid struct literal\n+    }\n+}\n+\n+fn test4(x: module::Type) {\n+    if x == demo_module::Type { x: module::C, y: 1 } { //~ ERROR invalid struct literal\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "068b0483b0fd38ecb4d8efe2e855818b1d2175ec", "filename": "tests/ui/parser/issues/issue-111692.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/e19a509f8fe93ede778f11338c9f392b3f37bfae/tests%2Fui%2Fparser%2Fissues%2Fissue-111692.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e19a509f8fe93ede778f11338c9f392b3f37bfae/tests%2Fui%2Fparser%2Fissues%2Fissue-111692.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-111692.stderr?ref=e19a509f8fe93ede778f11338c9f392b3f37bfae", "patch": "@@ -0,0 +1,46 @@\n+error: invalid struct literal\n+  --> $DIR/issue-111692.rs:12:21\n+   |\n+LL |     if x == module::Type { x: module::C, y: 1 } {\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: you might need to surround the struct literal with parentheses\n+   |\n+LL |     if x == (module::Type { x: module::C, y: 1 }) {\n+   |             +                                   +\n+\n+error: invalid struct literal\n+  --> $DIR/issue-111692.rs:17:20\n+   |\n+LL |     if x ==module::Type { x: module::C, y: 1 } {\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: you might need to surround the struct literal with parentheses\n+   |\n+LL |     if x ==(module::Type { x: module::C, y: 1 }) {\n+   |            +                                   +\n+\n+error: invalid struct literal\n+  --> $DIR/issue-111692.rs:23:13\n+   |\n+LL |     if x == Type { x: module::C, y: 1 } {\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: you might need to surround the struct literal with parentheses\n+   |\n+LL |     if x == (Type { x: module::C, y: 1 }) {\n+   |             +                           +\n+\n+error: invalid struct literal\n+  --> $DIR/issue-111692.rs:28:26\n+   |\n+LL |     if x == demo_module::Type { x: module::C, y: 1 } {\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: you might need to surround the struct literal with parentheses\n+   |\n+LL |     if x == (demo_module::Type { x: module::C, y: 1 }) {\n+   |             +                                        +\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "dedbad9094594d9ab9b6cdecea9d44625419bef7", "filename": "tests/ui/parser/method-call-on-struct-literal-in-if-condition.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e19a509f8fe93ede778f11338c9f392b3f37bfae/tests%2Fui%2Fparser%2Fmethod-call-on-struct-literal-in-if-condition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e19a509f8fe93ede778f11338c9f392b3f37bfae/tests%2Fui%2Fparser%2Fmethod-call-on-struct-literal-in-if-condition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fmethod-call-on-struct-literal-in-if-condition.stderr?ref=e19a509f8fe93ede778f11338c9f392b3f37bfae", "patch": "@@ -4,7 +4,7 @@ error: invalid struct literal\n LL |     if Example { a: one(), }.is_pos() {\n    |        ^^^^^^^^^^^^^^^^^^^^^\n    |\n-help: you might need to surround the struct literal in parentheses\n+help: you might need to surround the struct literal with parentheses\n    |\n LL |     if (Example { a: one(), }).is_pos() {\n    |        +                     +"}]}