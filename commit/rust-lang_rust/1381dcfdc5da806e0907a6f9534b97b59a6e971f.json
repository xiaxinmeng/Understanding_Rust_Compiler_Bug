{"sha": "1381dcfdc5da806e0907a6f9534b97b59a6e971f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzODFkY2ZkYzVkYTgwNmUwOTA3YTZmOTUzNGI5N2I1OWE2ZTk3MWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-14T04:09:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-14T04:09:02Z"}, "message": "Auto merge of #83105 - JohnTitor:rollup-tqpm8pb, r=JohnTitor\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #81465 (Add documentation about formatting `Duration` values)\n - #82121 (Implement Extend and FromIterator for OsString)\n - #82617 (Document `everybody_loops`)\n - #82789 (Get with field index from pattern slice instead of directly indexing)\n - #82798 (Rename `rustdoc` to `rustdoc::all`)\n - #82804 (std: Fix a bug on the wasm32-wasi target opening files)\n - #82943 (Demonstrate best practice for feeding stdin of a child processes)\n - #83066 (Add `reverse` search alias for Iterator::rev())\n - #83070 (Update cargo)\n - #83081 (Fix panic message of `assert_failed_inner`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "18d422e623aa82ca72544dd4c495aeb0d9931652", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18d422e623aa82ca72544dd4c495aeb0d9931652"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1381dcfdc5da806e0907a6f9534b97b59a6e971f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1381dcfdc5da806e0907a6f9534b97b59a6e971f", "html_url": "https://github.com/rust-lang/rust/commit/1381dcfdc5da806e0907a6f9534b97b59a6e971f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1381dcfdc5da806e0907a6f9534b97b59a6e971f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "acca818928654807ed3bc1ce0e97df118f8716c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/acca818928654807ed3bc1ce0e97df118f8716c8", "html_url": "https://github.com/rust-lang/rust/commit/acca818928654807ed3bc1ce0e97df118f8716c8"}, {"sha": "f8206ac63d001fdadbdfc4ec38806f892e4fc2d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8206ac63d001fdadbdfc4ec38806f892e4fc2d9", "html_url": "https://github.com/rust-lang/rust/commit/f8206ac63d001fdadbdfc4ec38806f892e4fc2d9"}], "stats": {"total": 331, "additions": 269, "deletions": 62}, "files": [{"sha": "341cfa479002783655f4fca3c493a230d2c918c4", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1381dcfdc5da806e0907a6f9534b97b59a6e971f/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1381dcfdc5da806e0907a6f9534b97b59a6e971f/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=1381dcfdc5da806e0907a6f9534b97b59a6e971f", "patch": "@@ -712,16 +712,24 @@ pub fn non_durable_rename(src: &Path, dst: &Path) -> std::io::Result<()> {\n     std::fs::rename(src, dst)\n }\n \n-// Note: Also used by librustdoc, see PR #43348. Consider moving this struct elsewhere.\n-//\n-// FIXME: Currently the `everybody_loops` transformation is not applied to:\n-//  * `const fn`, due to issue #43636 that `loop` is not supported for const evaluation. We are\n-//    waiting for miri to fix that.\n-//  * `impl Trait`, due to issue #43869 that functions returning impl Trait cannot be diverging.\n-//    Solving this may require `!` to implement every trait, which relies on the an even more\n-//    ambitious form of the closed RFC #1637. See also [#34511].\n-//\n-// [#34511]: https://github.com/rust-lang/rust/issues/34511#issuecomment-322340401\n+/// Replaces function bodies with `loop {}` (an infinite loop). This gets rid of\n+/// all semantic errors in the body while still satisfying the return type,\n+/// except in certain cases, see below for more.\n+///\n+/// This pass is known as `everybody_loops`. Very punny.\n+///\n+/// As of March 2021, `everybody_loops` is only used for the\n+/// `-Z unpretty=everybody_loops` debugging option.\n+///\n+/// FIXME: Currently the `everybody_loops` transformation is not applied to:\n+///  * `const fn`; support could be added, but hasn't. Originally `const fn`\n+///    was skipped due to issue #43636 that `loop` was not supported for\n+///    const evaluation.\n+///  * `impl Trait`, due to issue #43869 that functions returning impl Trait cannot be diverging.\n+///    Solving this may require `!` to implement every trait, which relies on the an even more\n+///    ambitious form of the closed RFC #1637. See also [#34511].\n+///\n+/// [#34511]: https://github.com/rust-lang/rust/issues/34511#issuecomment-322340401\n pub struct ReplaceBodyWithLoop<'a, 'b> {\n     within_static_or_const: bool,\n     nested_blocks: Option<Vec<ast::Block>>,"}, {"sha": "408f41e91b03eb7a1ad29ac5212b2b22b6d32f90", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1381dcfdc5da806e0907a6f9534b97b59a6e971f/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1381dcfdc5da806e0907a6f9534b97b59a6e971f/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=1381dcfdc5da806e0907a6f9534b97b59a6e971f", "patch": "@@ -346,6 +346,7 @@ fn register_builtins(store: &mut LintStore, no_interleave_lints: bool) {\n         \"intra_doc_link_resolution_failure\",\n         \"use `rustdoc::broken_intra_doc_links` instead\",\n     );\n+    store.register_removed(\"rustdoc\", \"use `rustdoc::all` instead\");\n \n     store.register_removed(\"unknown_features\", \"replaced by an error\");\n     store.register_removed(\"unsigned_negation\", \"replaced by negate_unsigned feature gate\");"}, {"sha": "8c740a7ec155a3406f6ba5be9634a31a8f0c6b3c", "filename": "compiler/rustc_mir_build/src/thir/pattern/deconstruct_pat.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1381dcfdc5da806e0907a6f9534b97b59a6e971f/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1381dcfdc5da806e0907a6f9534b97b59a6e971f/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs?ref=1381dcfdc5da806e0907a6f9534b97b59a6e971f", "patch": "@@ -1343,7 +1343,9 @@ impl<'p, 'tcx> Fields<'p, 'tcx> {\n         match &mut fields {\n             Fields::Vec(pats) => {\n                 for (i, pat) in new_pats {\n-                    pats[i] = pat\n+                    if let Some(p) = pats.get_mut(i) {\n+                        *p = pat;\n+                    }\n                 }\n             }\n             Fields::Filtered { fields, .. } => {"}, {"sha": "f8504e842ee33b6d198d8595e133c990973f98ff", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1381dcfdc5da806e0907a6f9534b97b59a6e971f/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1381dcfdc5da806e0907a6f9534b97b59a6e971f/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=1381dcfdc5da806e0907a6f9534b97b59a6e971f", "patch": "@@ -2737,6 +2737,7 @@ pub trait Iterator {\n     /// assert_eq!(iter.next(), None);\n     /// ```\n     #[inline]\n+    #[doc(alias = \"reverse\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn rev(self) -> Rev<Self>\n     where"}, {"sha": "3e3e96fcd7f7843fb8a993cc63f46a8602a785e6", "filename": "library/core/src/panicking.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1381dcfdc5da806e0907a6f9534b97b59a6e971f/library%2Fcore%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1381dcfdc5da806e0907a6f9534b97b59a6e971f/library%2Fcore%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanicking.rs?ref=1381dcfdc5da806e0907a6f9534b97b59a6e971f", "patch": "@@ -154,7 +154,7 @@ fn assert_failed_inner(\n         Some(args) => panic!(\n             r#\"assertion failed: `(left {} right)`\n   left: `{:?}`,\n- right: `{:?}: {}`\"#,\n+ right: `{:?}`: {}\"#,\n             op, left, right, args\n         ),\n         None => panic!("}, {"sha": "8c0848c64aaaffa73eae6a8be8b5a80c8c53c6ec", "filename": "library/core/src/time.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1381dcfdc5da806e0907a6f9534b97b59a6e971f/library%2Fcore%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1381dcfdc5da806e0907a6f9534b97b59a6e971f/library%2Fcore%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftime.rs?ref=1381dcfdc5da806e0907a6f9534b97b59a6e971f", "patch": "@@ -48,6 +48,17 @@ const MICROS_PER_SEC: u64 = 1_000_000;\n ///\n /// let ten_millis = Duration::from_millis(10);\n /// ```\n+///\n+/// # Formatting `Duration` values\n+///\n+/// `Duration` intentionally does not have a `Display` impl, as there are a\n+/// variety of ways to format spans of time for human readability. `Duration`\n+/// provides a `Debug` impl that shows the full precision of the value.\n+///\n+/// The `Debug` output uses the non-ASCII \"\u00b5s\" suffix for microseconds. If your\n+/// program output may appear in contexts that cannot rely on full Unicode\n+/// compatibility, you may wish to format `Duration` objects yourself or use a\n+/// crate to do so.\n #[stable(feature = \"duration\", since = \"1.3.0\")]\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]\n pub struct Duration {"}, {"sha": "ce52ffc0241b04802c53e44b51119ceb09de659b", "filename": "library/std/src/ffi/os_str.rs", "status": "modified", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/1381dcfdc5da806e0907a6f9534b97b59a6e971f/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1381dcfdc5da806e0907a6f9534b97b59a6e971f/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs?ref=1381dcfdc5da806e0907a6f9534b97b59a6e971f", "patch": "@@ -5,6 +5,7 @@ use crate::borrow::{Borrow, Cow};\n use crate::cmp;\n use crate::fmt;\n use crate::hash::{Hash, Hasher};\n+use crate::iter::{Extend, FromIterator};\n use crate::ops;\n use crate::rc::Rc;\n use crate::str::FromStr;\n@@ -1192,3 +1193,88 @@ impl FromStr for OsString {\n         Ok(OsString::from(s))\n     }\n }\n+\n+#[stable(feature = \"osstring_extend\", since = \"1.52.0\")]\n+impl Extend<OsString> for OsString {\n+    #[inline]\n+    fn extend<T: IntoIterator<Item = OsString>>(&mut self, iter: T) {\n+        for s in iter {\n+            self.push(&s);\n+        }\n+    }\n+}\n+\n+#[stable(feature = \"osstring_extend\", since = \"1.52.0\")]\n+impl<'a> Extend<&'a OsStr> for OsString {\n+    #[inline]\n+    fn extend<T: IntoIterator<Item = &'a OsStr>>(&mut self, iter: T) {\n+        for s in iter {\n+            self.push(s);\n+        }\n+    }\n+}\n+\n+#[stable(feature = \"osstring_extend\", since = \"1.52.0\")]\n+impl<'a> Extend<Cow<'a, OsStr>> for OsString {\n+    #[inline]\n+    fn extend<T: IntoIterator<Item = Cow<'a, OsStr>>>(&mut self, iter: T) {\n+        for s in iter {\n+            self.push(&s);\n+        }\n+    }\n+}\n+\n+#[stable(feature = \"osstring_extend\", since = \"1.52.0\")]\n+impl FromIterator<OsString> for OsString {\n+    #[inline]\n+    fn from_iter<I: IntoIterator<Item = OsString>>(iter: I) -> Self {\n+        let mut iterator = iter.into_iter();\n+\n+        // Because we're iterating over `OsString`s, we can avoid at least\n+        // one allocation by getting the first string from the iterator\n+        // and appending to it all the subsequent strings.\n+        match iterator.next() {\n+            None => OsString::new(),\n+            Some(mut buf) => {\n+                buf.extend(iterator);\n+                buf\n+            }\n+        }\n+    }\n+}\n+\n+#[stable(feature = \"osstring_extend\", since = \"1.52.0\")]\n+impl<'a> FromIterator<&'a OsStr> for OsString {\n+    #[inline]\n+    fn from_iter<I: IntoIterator<Item = &'a OsStr>>(iter: I) -> Self {\n+        let mut buf = Self::new();\n+        for s in iter {\n+            buf.push(s);\n+        }\n+        buf\n+    }\n+}\n+\n+#[stable(feature = \"osstring_extend\", since = \"1.52.0\")]\n+impl<'a> FromIterator<Cow<'a, OsStr>> for OsString {\n+    #[inline]\n+    fn from_iter<I: IntoIterator<Item = Cow<'a, OsStr>>>(iter: I) -> Self {\n+        let mut iterator = iter.into_iter();\n+\n+        // Because we're iterating over `OsString`s, we can avoid at least\n+        // one allocation by getting the first owned string from the iterator\n+        // and appending to it all the subsequent strings.\n+        match iterator.next() {\n+            None => OsString::new(),\n+            Some(Cow::Owned(mut buf)) => {\n+                buf.extend(iterator);\n+                buf\n+            }\n+            Some(Cow::Borrowed(buf)) => {\n+                let mut buf = OsString::from(buf);\n+                buf.extend(iterator);\n+                buf\n+            }\n+        }\n+    }\n+}"}, {"sha": "f9cfd11e90650e2035c75b3413a4c03cc7881605", "filename": "library/std/src/process.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1381dcfdc5da806e0907a6f9534b97b59a6e971f/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1381dcfdc5da806e0907a6f9534b97b59a6e971f/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=1381dcfdc5da806e0907a6f9534b97b59a6e971f", "patch": "@@ -71,11 +71,15 @@\n //!     .spawn()\n //!     .expect(\"failed to execute child\");\n //!\n-//! {\n-//!     // limited borrow of stdin\n-//!     let stdin = child.stdin.as_mut().expect(\"failed to get stdin\");\n+//! // If the child process fills its stdout buffer, it may end up\n+//! // waiting until the parent reads the stdout, and not be able to\n+//! // read stdin in the meantime, causing a deadlock.\n+//! // Writing from another thread ensures that stdout is being read\n+//! // at the same time, avoiding the problem.\n+//! let mut stdin = child.stdin.take().expect(\"failed to get stdin\");\n+//! std::thread::spawn(move || {\n //!     stdin.write_all(b\"test\").expect(\"failed to write to stdin\");\n-//! }\n+//! });\n //!\n //! let output = child\n //!     .wait_with_output()\n@@ -1145,14 +1149,21 @@ impl Stdio {\n     ///     .spawn()\n     ///     .expect(\"Failed to spawn child process\");\n     ///\n-    /// {\n-    ///     let stdin = child.stdin.as_mut().expect(\"Failed to open stdin\");\n+    /// let mut stdin = child.stdin.take().expect(\"Failed to open stdin\");\n+    /// std::thread::spawn(move || {\n     ///     stdin.write_all(\"Hello, world!\".as_bytes()).expect(\"Failed to write to stdin\");\n-    /// }\n+    /// });\n     ///\n     /// let output = child.wait_with_output().expect(\"Failed to read stdout\");\n     /// assert_eq!(String::from_utf8_lossy(&output.stdout), \"!dlrow ,olleH\");\n     /// ```\n+    ///\n+    /// Writing more than a pipe buffer's worth of input to stdin without also reading\n+    /// stdout and stderr at the same time may cause a deadlock.\n+    /// This is an issue when running any program that doesn't guarantee that it reads\n+    /// its entire stdin before writing more than a pipe buffer's worth of output.\n+    /// The size of a pipe buffer varies on different targets.\n+    ///\n     #[stable(feature = \"process\", since = \"1.0.0\")]\n     pub fn piped() -> Stdio {\n         Stdio(imp::Stdio::MakePipe)"}, {"sha": "63c22136273fb4b9b723b6ab12aa56dc395ff466", "filename": "library/std/src/sys/wasi/fs.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1381dcfdc5da806e0907a6f9534b97b59a6e971f/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1381dcfdc5da806e0907a6f9534b97b59a6e971f/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffs.rs?ref=1381dcfdc5da806e0907a6f9534b97b59a6e971f", "patch": "@@ -650,13 +650,11 @@ fn open_parent(p: &Path) -> io::Result<(ManuallyDrop<WasiFd>, PathBuf)> {\n                 );\n                 return Err(io::Error::new(io::ErrorKind::Other, msg));\n             }\n-            let len = CStr::from_ptr(buf.as_ptr().cast()).to_bytes().len();\n-            buf.set_len(len);\n-            buf.shrink_to_fit();\n+            let relative = CStr::from_ptr(relative_path).to_bytes().to_vec();\n \n             return Ok((\n                 ManuallyDrop::new(WasiFd::from_raw(fd as u32)),\n-                PathBuf::from(OsString::from_vec(buf)),\n+                PathBuf::from(OsString::from_vec(relative)),\n             ));\n         }\n     }"}, {"sha": "754ec53b330f133012ad9a120bac3a457befc768", "filename": "src/librustdoc/lint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1381dcfdc5da806e0907a6f9534b97b59a6e971f/src%2Flibrustdoc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1381dcfdc5da806e0907a6f9534b97b59a6e971f/src%2Flibrustdoc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flint.rs?ref=1381dcfdc5da806e0907a6f9534b97b59a6e971f", "patch": "@@ -175,8 +175,8 @@ crate fn register_lints(_sess: &Session, lint_store: &mut LintStore) {\n     lint_store.register_lints(&**RUSTDOC_LINTS);\n     lint_store.register_group(\n         true,\n-        \"rustdoc\",\n-        None,\n+        \"rustdoc::all\",\n+        Some(\"rustdoc\"),\n         RUSTDOC_LINTS.iter().map(|&lint| LintId::of(lint)).collect(),\n     );\n     for lint in &*RUSTDOC_LINTS {"}, {"sha": "2355d6a3d6cbc24a4502d9a9644c730e96e643e2", "filename": "src/test/rustdoc-ui/check-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1381dcfdc5da806e0907a6f9534b97b59a6e971f/src%2Ftest%2Frustdoc-ui%2Fcheck-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1381dcfdc5da806e0907a6f9534b97b59a6e971f/src%2Ftest%2Frustdoc-ui%2Fcheck-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcheck-fail.rs?ref=1381dcfdc5da806e0907a6f9534b97b59a6e971f", "patch": "@@ -1,7 +1,7 @@\n // compile-flags: -Z unstable-options --check\n \n #![deny(missing_docs)]\n-#![deny(rustdoc)]\n+#![deny(rustdoc::all)]\n \n //! ```rust,testharness\n //~^ ERROR"}, {"sha": "2758c5490a3d8229bb0706aa6ced678ee991871b", "filename": "src/test/rustdoc-ui/check-fail.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1381dcfdc5da806e0907a6f9534b97b59a6e971f/src%2Ftest%2Frustdoc-ui%2Fcheck-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1381dcfdc5da806e0907a6f9534b97b59a6e971f/src%2Ftest%2Frustdoc-ui%2Fcheck-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcheck-fail.stderr?ref=1381dcfdc5da806e0907a6f9534b97b59a6e971f", "patch": "@@ -19,9 +19,9 @@ LL | pub fn foo() {}\n note: the lint level is defined here\n   --> $DIR/check-fail.rs:4:9\n    |\n-LL | #![deny(rustdoc)]\n-   |         ^^^^^^^\n-   = note: `#[deny(rustdoc::missing_doc_code_examples)]` implied by `#[deny(rustdoc)]`\n+LL | #![deny(rustdoc::all)]\n+   |         ^^^^^^^^^^^^\n+   = note: `#[deny(rustdoc::missing_doc_code_examples)]` implied by `#[deny(rustdoc::all)]`\n \n error: unknown attribute `testharness`. Did you mean `test_harness`?\n   --> $DIR/check-fail.rs:6:1\n@@ -35,9 +35,9 @@ LL | | //! ```\n note: the lint level is defined here\n   --> $DIR/check-fail.rs:4:9\n    |\n-LL | #![deny(rustdoc)]\n-   |         ^^^^^^^\n-   = note: `#[deny(rustdoc::invalid_codeblock_attributes)]` implied by `#[deny(rustdoc)]`\n+LL | #![deny(rustdoc::all)]\n+   |         ^^^^^^^^^^^^\n+   = note: `#[deny(rustdoc::invalid_codeblock_attributes)]` implied by `#[deny(rustdoc::all)]`\n    = help: the code block will either not be tested if not marked as a rust one or the code will be wrapped inside a main function\n \n error: unknown attribute `testharness`. Did you mean `test_harness`?"}, {"sha": "65a56e03d9dfcf4c1c36261525d7ed7aa12e2dd8", "filename": "src/test/rustdoc-ui/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1381dcfdc5da806e0907a6f9534b97b59a6e971f/src%2Ftest%2Frustdoc-ui%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1381dcfdc5da806e0907a6f9534b97b59a6e971f/src%2Ftest%2Frustdoc-ui%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcheck.rs?ref=1381dcfdc5da806e0907a6f9534b97b59a6e971f", "patch": "@@ -4,7 +4,7 @@\n #![warn(missing_docs)]\n //~^ WARN\n //~^^ WARN\n-#![warn(rustdoc)]\n+#![warn(rustdoc::all)]\n \n pub fn foo() {}\n //~^ WARN"}, {"sha": "2e1fc1eca4d6e7e9c0e400249d1fa1130f407915", "filename": "src/test/rustdoc-ui/check.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1381dcfdc5da806e0907a6f9534b97b59a6e971f/src%2Ftest%2Frustdoc-ui%2Fcheck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1381dcfdc5da806e0907a6f9534b97b59a6e971f/src%2Ftest%2Frustdoc-ui%2Fcheck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcheck.stderr?ref=1381dcfdc5da806e0907a6f9534b97b59a6e971f", "patch": "@@ -4,7 +4,7 @@ warning: missing documentation for the crate\n LL | / #![warn(missing_docs)]\n LL | |\n LL | |\n-LL | | #![warn(rustdoc)]\n+LL | | #![warn(rustdoc::all)]\n LL | |\n LL | | pub fn foo() {}\n    | |_______________^\n@@ -26,9 +26,9 @@ warning: no documentation found for this crate's top-level module\n note: the lint level is defined here\n   --> $DIR/check.rs:7:9\n    |\n-LL | #![warn(rustdoc)]\n-   |         ^^^^^^^\n-   = note: `#[warn(rustdoc::missing_crate_level_docs)]` implied by `#[warn(rustdoc)]`\n+LL | #![warn(rustdoc::all)]\n+   |         ^^^^^^^^^^^^\n+   = note: `#[warn(rustdoc::missing_crate_level_docs)]` implied by `#[warn(rustdoc::all)]`\n    = help: The following guide may be of use:\n            https://doc.rust-lang.org/nightly/rustdoc/how-to-write-documentation.html\n \n@@ -38,17 +38,17 @@ warning: missing code example in this documentation\n LL | / #![warn(missing_docs)]\n LL | |\n LL | |\n-LL | | #![warn(rustdoc)]\n+LL | | #![warn(rustdoc::all)]\n LL | |\n LL | | pub fn foo() {}\n    | |_______________^\n    |\n note: the lint level is defined here\n   --> $DIR/check.rs:7:9\n    |\n-LL | #![warn(rustdoc)]\n-   |         ^^^^^^^\n-   = note: `#[warn(rustdoc::missing_doc_code_examples)]` implied by `#[warn(rustdoc)]`\n+LL | #![warn(rustdoc::all)]\n+   |         ^^^^^^^^^^^^\n+   = note: `#[warn(rustdoc::missing_doc_code_examples)]` implied by `#[warn(rustdoc::all)]`\n \n warning: missing code example in this documentation\n   --> $DIR/check.rs:9:1"}, {"sha": "61555a6e68617f1736692ffb67400c1b9e7a3e92", "filename": "src/test/rustdoc-ui/lint-group.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1381dcfdc5da806e0907a6f9534b97b59a6e971f/src%2Ftest%2Frustdoc-ui%2Flint-group.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1381dcfdc5da806e0907a6f9534b97b59a6e971f/src%2Ftest%2Frustdoc-ui%2Flint-group.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Flint-group.rs?ref=1381dcfdc5da806e0907a6f9534b97b59a6e971f", "patch": "@@ -4,7 +4,7 @@\n //! println!(\"sup\");\n //! ```\n \n-#![deny(rustdoc)]\n+#![deny(rustdoc::all)]\n \n /// what up, let's make an [error]\n ///"}, {"sha": "cc6f03b03ff613431115dbdce0777476876aa8c4", "filename": "src/test/rustdoc-ui/lint-group.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1381dcfdc5da806e0907a6f9534b97b59a6e971f/src%2Ftest%2Frustdoc-ui%2Flint-group.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1381dcfdc5da806e0907a6f9534b97b59a6e971f/src%2Ftest%2Frustdoc-ui%2Flint-group.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Flint-group.stderr?ref=1381dcfdc5da806e0907a6f9534b97b59a6e971f", "patch": "@@ -7,9 +7,9 @@ LL | /// wait, this doesn't have a doctest?\n note: the lint level is defined here\n   --> $DIR/lint-group.rs:7:9\n    |\n-LL | #![deny(rustdoc)]\n-   |         ^^^^^^^\n-   = note: `#[deny(rustdoc::missing_doc_code_examples)]` implied by `#[deny(rustdoc)]`\n+LL | #![deny(rustdoc::all)]\n+   |         ^^^^^^^^^^^^\n+   = note: `#[deny(rustdoc::missing_doc_code_examples)]` implied by `#[deny(rustdoc::all)]`\n \n error: documentation test in private item\n   --> $DIR/lint-group.rs:19:1\n@@ -24,9 +24,9 @@ LL | | /// ```\n note: the lint level is defined here\n   --> $DIR/lint-group.rs:7:9\n    |\n-LL | #![deny(rustdoc)]\n-   |         ^^^^^^^\n-   = note: `#[deny(rustdoc::private_doc_tests)]` implied by `#[deny(rustdoc)]`\n+LL | #![deny(rustdoc::all)]\n+   |         ^^^^^^^^^^^^\n+   = note: `#[deny(rustdoc::private_doc_tests)]` implied by `#[deny(rustdoc::all)]`\n \n error: missing code example in this documentation\n   --> $DIR/lint-group.rs:26:1\n@@ -43,9 +43,9 @@ LL | /// what up, let's make an [error]\n note: the lint level is defined here\n   --> $DIR/lint-group.rs:7:9\n    |\n-LL | #![deny(rustdoc)]\n-   |         ^^^^^^^\n-   = note: `#[deny(rustdoc::broken_intra_doc_links)]` implied by `#[deny(rustdoc)]`\n+LL | #![deny(rustdoc::all)]\n+   |         ^^^^^^^^^^^^\n+   = note: `#[deny(rustdoc::broken_intra_doc_links)]` implied by `#[deny(rustdoc::all)]`\n    = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n error: unclosed HTML tag `unknown`\n@@ -57,9 +57,9 @@ LL | /// <unknown>\n note: the lint level is defined here\n   --> $DIR/lint-group.rs:7:9\n    |\n-LL | #![deny(rustdoc)]\n-   |         ^^^^^^^\n-   = note: `#[deny(rustdoc::invalid_html_tags)]` implied by `#[deny(rustdoc)]`\n+LL | #![deny(rustdoc::all)]\n+   |         ^^^^^^^^^^^^\n+   = note: `#[deny(rustdoc::invalid_html_tags)]` implied by `#[deny(rustdoc::all)]`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "9d20cb7d30d55c727a718a48af9039d80f4ffc15", "filename": "src/test/rustdoc-ui/unknown-renamed-lints.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1381dcfdc5da806e0907a6f9534b97b59a6e971f/src%2Ftest%2Frustdoc-ui%2Funknown-renamed-lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1381dcfdc5da806e0907a6f9534b97b59a6e971f/src%2Ftest%2Frustdoc-ui%2Funknown-renamed-lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Funknown-renamed-lints.rs?ref=1381dcfdc5da806e0907a6f9534b97b59a6e971f", "patch": "@@ -12,6 +12,9 @@\n #![deny(non_autolinks)]\n //~^ ERROR renamed to `rustdoc::non_autolinks`\n \n+#![deny(rustdoc)]\n+//~^ ERROR removed: use `rustdoc::all` instead\n+\n // Explicitly don't try to handle this case, it was never valid\n #![deny(rustdoc::intra_doc_link_resolution_failure)]\n //~^ ERROR unknown lint"}, {"sha": "2036335e855747e4264fe53188fd75215630510a", "filename": "src/test/rustdoc-ui/unknown-renamed-lints.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1381dcfdc5da806e0907a6f9534b97b59a6e971f/src%2Ftest%2Frustdoc-ui%2Funknown-renamed-lints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1381dcfdc5da806e0907a6f9534b97b59a6e971f/src%2Ftest%2Frustdoc-ui%2Funknown-renamed-lints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Funknown-renamed-lints.stderr?ref=1381dcfdc5da806e0907a6f9534b97b59a6e971f", "patch": "@@ -34,13 +34,19 @@ error: lint `non_autolinks` has been renamed to `rustdoc::non_autolinks`\n LL | #![deny(non_autolinks)]\n    |         ^^^^^^^^^^^^^ help: use the new name: `rustdoc::non_autolinks`\n \n+error: lint `rustdoc` has been removed: use `rustdoc::all` instead\n+  --> $DIR/unknown-renamed-lints.rs:15:9\n+   |\n+LL | #![deny(rustdoc)]\n+   |         ^^^^^^^\n+\n error: unknown lint: `rustdoc::intra_doc_link_resolution_failure`\n-  --> $DIR/unknown-renamed-lints.rs:16:9\n+  --> $DIR/unknown-renamed-lints.rs:19:9\n    |\n LL | #![deny(rustdoc::intra_doc_link_resolution_failure)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: Compilation failed, aborting rustdoc\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 7 previous errors\n "}, {"sha": "130abe4253a1392cfae8e4d1dc6d27296d9aeb2e", "filename": "src/test/ui/lint/rustdoc-group.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1381dcfdc5da806e0907a6f9534b97b59a6e971f/src%2Ftest%2Fui%2Flint%2Frustdoc-group.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1381dcfdc5da806e0907a6f9534b97b59a6e971f/src%2Ftest%2Fui%2Flint%2Frustdoc-group.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frustdoc-group.rs?ref=1381dcfdc5da806e0907a6f9534b97b59a6e971f", "patch": "@@ -0,0 +1,5 @@\n+// check-pass\n+// compile-flags: --crate-type lib\n+#![deny(rustdoc)]\n+//~^ WARNING removed: use `rustdoc::all`\n+#![deny(rustdoc::all)] // has no effect when run with rustc directly"}, {"sha": "fddc863ae1e99190fc577a8a87a29bb30cfb85d8", "filename": "src/test/ui/lint/rustdoc-group.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1381dcfdc5da806e0907a6f9534b97b59a6e971f/src%2Ftest%2Fui%2Flint%2Frustdoc-group.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1381dcfdc5da806e0907a6f9534b97b59a6e971f/src%2Ftest%2Fui%2Flint%2Frustdoc-group.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frustdoc-group.stderr?ref=1381dcfdc5da806e0907a6f9534b97b59a6e971f", "patch": "@@ -0,0 +1,10 @@\n+warning: lint `rustdoc` has been removed: use `rustdoc::all` instead\n+  --> $DIR/rustdoc-group.rs:3:9\n+   |\n+LL | #![deny(rustdoc)]\n+   |         ^^^^^^^\n+   |\n+   = note: `#[warn(renamed_and_removed_lints)]` on by default\n+\n+warning: 1 warning emitted\n+"}, {"sha": "accbd2d1e7f501d4bb3c774ff6b2f9dd0a2d5703", "filename": "src/test/ui/macros/assert-eq-macro-msg.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1381dcfdc5da806e0907a6f9534b97b59a6e971f/src%2Ftest%2Fui%2Fmacros%2Fassert-eq-macro-msg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1381dcfdc5da806e0907a6f9534b97b59a6e971f/src%2Ftest%2Fui%2Fmacros%2Fassert-eq-macro-msg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fassert-eq-macro-msg.rs?ref=1381dcfdc5da806e0907a6f9534b97b59a6e971f", "patch": "@@ -0,0 +1,9 @@\n+// run-fail\n+// error-pattern:panicked at 'assertion failed: `(left == right)`\n+// error-pattern: left: `2`\n+// error-pattern:right: `3`: 1 + 1 definitely should be 3'\n+// ignore-emscripten no processes\n+\n+fn main() {\n+    assert_eq!(1 + 1, 3, \"1 + 1 definitely should be 3\");\n+}"}, {"sha": "43be9532f5d1c068e70ea61217a6335476783ca8", "filename": "src/test/ui/macros/assert-matches-macro-msg.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1381dcfdc5da806e0907a6f9534b97b59a6e971f/src%2Ftest%2Fui%2Fmacros%2Fassert-matches-macro-msg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1381dcfdc5da806e0907a6f9534b97b59a6e971f/src%2Ftest%2Fui%2Fmacros%2Fassert-matches-macro-msg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fassert-matches-macro-msg.rs?ref=1381dcfdc5da806e0907a6f9534b97b59a6e971f", "patch": "@@ -0,0 +1,11 @@\n+// run-fail\n+// error-pattern:panicked at 'assertion failed: `(left matches right)`\n+// error-pattern: left: `2`\n+// error-pattern:right: `3`: 1 + 1 definitely should be 3'\n+// ignore-emscripten no processes\n+\n+#![feature(assert_matches)]\n+\n+fn main() {\n+    assert_matches!(1 + 1, 3, \"1 + 1 definitely should be 3\");\n+}"}, {"sha": "fc0472b99b4289f5ce0729e9a90a1757f32f4d0e", "filename": "src/test/ui/macros/assert-ne-macro-msg.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1381dcfdc5da806e0907a6f9534b97b59a6e971f/src%2Ftest%2Fui%2Fmacros%2Fassert-ne-macro-msg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1381dcfdc5da806e0907a6f9534b97b59a6e971f/src%2Ftest%2Fui%2Fmacros%2Fassert-ne-macro-msg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fassert-ne-macro-msg.rs?ref=1381dcfdc5da806e0907a6f9534b97b59a6e971f", "patch": "@@ -0,0 +1,9 @@\n+// run-fail\n+// error-pattern:panicked at 'assertion failed: `(left != right)`\n+// error-pattern: left: `2`\n+// error-pattern:right: `2`: 1 + 1 definitely should not be 2'\n+// ignore-emscripten no processes\n+\n+fn main() {\n+    assert_ne!(1 + 1, 2, \"1 + 1 definitely should not be 2\");\n+}"}, {"sha": "763ab952738b7a27a122dad3691b45ee934dd4df", "filename": "src/test/ui/structs/struct-variant-privacy-xc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1381dcfdc5da806e0907a6f9534b97b59a6e971f/src%2Ftest%2Fui%2Fstructs%2Fstruct-variant-privacy-xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1381dcfdc5da806e0907a6f9534b97b59a6e971f/src%2Ftest%2Fui%2Fstructs%2Fstruct-variant-privacy-xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-variant-privacy-xc.rs?ref=1381dcfdc5da806e0907a6f9534b97b59a6e971f", "patch": "@@ -1,7 +1,8 @@\n // aux-build:struct_variant_privacy.rs\n extern crate struct_variant_privacy;\n \n-fn f(b: struct_variant_privacy::Bar) { //~ ERROR enum `Bar` is private\n+fn f(b: struct_variant_privacy::Bar) {\n+    //~^ ERROR enum `Bar` is private\n     match b {\n         struct_variant_privacy::Bar::Baz { a: _a } => {} //~ ERROR enum `Bar` is private\n     }"}, {"sha": "1c1caaef8b79d17d8bc50506de192ede47d24ac1", "filename": "src/test/ui/structs/struct-variant-privacy-xc.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1381dcfdc5da806e0907a6f9534b97b59a6e971f/src%2Ftest%2Fui%2Fstructs%2Fstruct-variant-privacy-xc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1381dcfdc5da806e0907a6f9534b97b59a6e971f/src%2Ftest%2Fui%2Fstructs%2Fstruct-variant-privacy-xc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-variant-privacy-xc.stderr?ref=1381dcfdc5da806e0907a6f9534b97b59a6e971f", "patch": "@@ -11,7 +11,7 @@ LL | enum Bar {\n    | ^^^^^^^^\n \n error[E0603]: enum `Bar` is private\n-  --> $DIR/struct-variant-privacy-xc.rs:6:33\n+  --> $DIR/struct-variant-privacy-xc.rs:7:33\n    |\n LL |         struct_variant_privacy::Bar::Baz { a: _a } => {}\n    |                                 ^^^ private enum"}, {"sha": "fcdf9a22baf4b5cd9f92419bde0bfcacf8844050", "filename": "src/test/ui/structs/struct-variant-privacy.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1381dcfdc5da806e0907a6f9534b97b59a6e971f/src%2Ftest%2Fui%2Fstructs%2Fstruct-variant-privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1381dcfdc5da806e0907a6f9534b97b59a6e971f/src%2Ftest%2Fui%2Fstructs%2Fstruct-variant-privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-variant-privacy.rs?ref=1381dcfdc5da806e0907a6f9534b97b59a6e971f", "patch": "@@ -1,10 +1,11 @@\n mod foo {\n     enum Bar {\n-        Baz { a: isize }\n+        Baz { a: isize },\n     }\n }\n \n-fn f(b: foo::Bar) { //~ ERROR enum `Bar` is private\n+fn f(b: foo::Bar) {\n+    //~^ ERROR enum `Bar` is private\n     match b {\n         foo::Bar::Baz { a: _a } => {} //~ ERROR enum `Bar` is private\n     }"}, {"sha": "eafd26c716f116645776149ef8fe61f2e516853a", "filename": "src/test/ui/structs/struct-variant-privacy.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1381dcfdc5da806e0907a6f9534b97b59a6e971f/src%2Ftest%2Fui%2Fstructs%2Fstruct-variant-privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1381dcfdc5da806e0907a6f9534b97b59a6e971f/src%2Ftest%2Fui%2Fstructs%2Fstruct-variant-privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-variant-privacy.stderr?ref=1381dcfdc5da806e0907a6f9534b97b59a6e971f", "patch": "@@ -11,7 +11,7 @@ LL |     enum Bar {\n    |     ^^^^^^^^\n \n error[E0603]: enum `Bar` is private\n-  --> $DIR/struct-variant-privacy.rs:9:14\n+  --> $DIR/struct-variant-privacy.rs:10:14\n    |\n LL |         foo::Bar::Baz { a: _a } => {}\n    |              ^^^ private enum"}, {"sha": "326273bfe9229a1950c27e58140ba47ebbc39129", "filename": "src/test/ui/typeck/issue-82772.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1381dcfdc5da806e0907a6f9534b97b59a6e971f/src%2Ftest%2Fui%2Ftypeck%2Fissue-82772.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1381dcfdc5da806e0907a6f9534b97b59a6e971f/src%2Ftest%2Fui%2Ftypeck%2Fissue-82772.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-82772.rs?ref=1381dcfdc5da806e0907a6f9534b97b59a6e971f", "patch": "@@ -0,0 +1,13 @@\n+// edition:2018\n+\n+fn main() {\n+    use a::ModPrivateStruct;\n+    let Box { 0: _, .. }: Box<()>; //~ ERROR field `0` of\n+    let Box { 1: _, .. }: Box<()>; //~ ERROR field `1` of\n+    let ModPrivateStruct { 1: _, .. } = ModPrivateStruct::default(); //~ ERROR field `1` of\n+}\n+\n+mod a {\n+    #[derive(Default)]\n+    pub struct ModPrivateStruct(u8, u8);\n+}"}, {"sha": "321143cb9683d79e92b1f544f485c931673cdce7", "filename": "src/test/ui/typeck/issue-82772.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1381dcfdc5da806e0907a6f9534b97b59a6e971f/src%2Ftest%2Fui%2Ftypeck%2Fissue-82772.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1381dcfdc5da806e0907a6f9534b97b59a6e971f/src%2Ftest%2Fui%2Ftypeck%2Fissue-82772.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-82772.stderr?ref=1381dcfdc5da806e0907a6f9534b97b59a6e971f", "patch": "@@ -0,0 +1,21 @@\n+error[E0451]: field `0` of struct `Box` is private\n+  --> $DIR/issue-82772.rs:5:15\n+   |\n+LL |     let Box { 0: _, .. }: Box<()>;\n+   |               ^^^^ private field\n+\n+error[E0451]: field `1` of struct `Box` is private\n+  --> $DIR/issue-82772.rs:6:15\n+   |\n+LL |     let Box { 1: _, .. }: Box<()>;\n+   |               ^^^^ private field\n+\n+error[E0451]: field `1` of struct `ModPrivateStruct` is private\n+  --> $DIR/issue-82772.rs:7:28\n+   |\n+LL |     let ModPrivateStruct { 1: _, .. } = ModPrivateStruct::default();\n+   |                            ^^^^ private field\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0451`."}, {"sha": "32da9eaa5de5be241cf8096ca6b749a157194f77", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=1381dcfdc5da806e0907a6f9534b97b59a6e971f", "patch": "@@ -1 +1 @@\n-Subproject commit 970bc67c3775781b9708c8a36893576b9459c64a\n+Subproject commit 32da9eaa5de5be241cf8096ca6b749a157194f77"}]}