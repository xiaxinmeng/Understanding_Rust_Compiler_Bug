{"sha": "ffcb4613700c968041f891985927b77f70a51c0c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmY2I0NjEzNzAwYzk2ODA0MWY4OTE5ODU5MjdiNzdmNzBhNTFjMGM=", "commit": {"author": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-02-23T19:06:37Z"}, "committer": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-02-23T19:06:37Z"}, "message": "Parse the abi in native modules.", "tree": {"sha": "ed5a0566378482e48723d106edab384c1bbfac25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed5a0566378482e48723d106edab384c1bbfac25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffcb4613700c968041f891985927b77f70a51c0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffcb4613700c968041f891985927b77f70a51c0c", "html_url": "https://github.com/rust-lang/rust/commit/ffcb4613700c968041f891985927b77f70a51c0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffcb4613700c968041f891985927b77f70a51c0c/comments", "author": null, "committer": null, "parents": [{"sha": "6849abcf7df583f58f390eb55c7b0e84dfb1bd25", "url": "https://api.github.com/repos/rust-lang/rust/commits/6849abcf7df583f58f390eb55c7b0e84dfb1bd25", "html_url": "https://github.com/rust-lang/rust/commit/6849abcf7df583f58f390eb55c7b0e84dfb1bd25"}], "stats": {"total": 60, "additions": 49, "deletions": 11}, "files": [{"sha": "30b4d324abd3595a51d98af746837948ec69d111", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ffcb4613700c968041f891985927b77f70a51c0c/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcb4613700c968041f891985927b77f70a51c0c/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=ffcb4613700c968041f891985927b77f70a51c0c", "patch": "@@ -241,7 +241,13 @@ type _mod = rec(vec[@view_item] view_items,\n                 vec[@item] items,\n                 mod_index index);\n \n+tag native_abi {\n+    native_abi_rust;\n+    native_abi_cdecl;\n+}\n+\n type native_mod = rec(str native_name,\n+                      native_abi abi,\n                       vec[@native_item] items,\n                       native_mod_index index);\n type native_mod_index = hashmap[ident,@native_item];"}, {"sha": "03b24e4e361e6d4fd813ed17ef8e5077061b5387", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 33, "deletions": 11, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/ffcb4613700c968041f891985927b77f70a51c0c/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcb4613700c968041f891985927b77f70a51c0c/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=ffcb4613700c968041f891985927b77f70a51c0c", "patch": "@@ -1723,7 +1723,8 @@ impure fn parse_native_item(parser p) -> @ast.native_item {\n }\n \n impure fn parse_native_mod_items(parser p,\n-                                 str native_name) -> ast.native_mod {\n+                                 str native_name,\n+                                 ast.native_abi abi) -> ast.native_mod {\n     auto index = new_str_hash[@ast.native_item]();\n     let vec[@ast.native_item] items = vec();\n     while (p.peek() != token.RBRACE) {\n@@ -1733,28 +1734,49 @@ impure fn parse_native_mod_items(parser p,\n         // Index the item.\n         ast.index_native_item(index, item);\n     }\n-    ret rec(native_name=native_name, items=items, index=index);\n+    ret rec(native_name=native_name, abi=abi,\n+            items=items, index=index);\n+}\n+\n+fn default_native_name(session.session sess, str id) -> str {\n+    alt (sess.get_targ_cfg().os) {\n+        case (session.os_win32) {\n+            ret id + \".dll\";\n+        }\n+        case (session.os_macos) {\n+            ret \"lib\" + id + \".dylib\";\n+        }\n+        case (session.os_linux) {\n+            ret \"lib\" + id + \".so\";\n+        }\n+    }\n }\n \n impure fn parse_item_native_mod(parser p) -> @ast.item {\n     auto lo = p.get_span();\n     expect(p, token.NATIVE);\n-    auto has_eq;\n-    auto native_name = \"\";\n-    if (p.peek() == token.MOD) {\n-        has_eq = true;\n-    } else {\n-        native_name = parse_str_lit(p);\n-        has_eq = false;\n+    auto abi = ast.native_abi_cdecl;\n+    if (p.peek() != token.MOD) {\n+        auto t = parse_str_lit(p);\n+        if (t == \"cdecl\") {\n+        } else if (t == \"rust\") {\n+            abi = ast.native_abi_rust;\n+        } else {\n+            p.err(\"unsupported abi: \" + t);\n+            fail;\n+        }\n     }\n     expect(p, token.MOD);\n     auto id = parse_ident(p);\n-    if (has_eq) {\n+    auto native_name;\n+    if (p.peek() == token.EQ) {\n         expect(p, token.EQ);\n         native_name = parse_str_lit(p);\n+    } else {\n+        native_name = default_native_name(p.get_session(), id);\n     }\n     expect(p, token.LBRACE);\n-    auto m = parse_native_mod_items(p, native_name);\n+    auto m = parse_native_mod_items(p, native_name, ast.native_abi_cdecl);\n     auto hi = p.get_span();\n     expect(p, token.RBRACE);\n     auto item = ast.item_native_mod(id, m, p.next_def_id());"}, {"sha": "968d4737e66b01e724a0b99092a14897fdcfaf45", "filename": "src/comp/middle/fold.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ffcb4613700c968041f891985927b77f70a51c0c/src%2Fcomp%2Fmiddle%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcb4613700c968041f891985927b77f70a51c0c/src%2Fcomp%2Fmiddle%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffold.rs?ref=ffcb4613700c968041f891985927b77f70a51c0c", "patch": "@@ -944,6 +944,7 @@ fn fold_native_mod[ENV](&ENV e, ast_fold[ENV] fld,\n     }\n \n     ret fld.fold_native_mod(e, rec(native_name=m.native_name,\n+                                   abi=m.abi,\n                                    items=items,\n                                    index=index));\n }"}, {"sha": "4815345add651c807e6208c5beaac417534aa8e1", "filename": "src/test/run-pass/native2.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ffcb4613700c968041f891985927b77f70a51c0c/src%2Ftest%2Frun-pass%2Fnative2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcb4613700c968041f891985927b77f70a51c0c/src%2Ftest%2Frun-pass%2Fnative2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnative2.rs?ref=ffcb4613700c968041f891985927b77f70a51c0c", "patch": "@@ -3,9 +3,18 @@ native \"rust\" mod rustrt {\n     fn vec_buf[T](vec[T] v, uint offset) -> vbuf;\n }\n \n+native \"rust\" mod bar = \"foo\" {\n+}\n+\n+native mod zed {\n+}\n+\n native mod libc = \"libc.dylib\" {\n     fn write(int fd, rustrt.vbuf buf, uint count) -> int;\n }\n \n+native \"cdecl\" mod baz {\n+}\n+\n fn main(vec[str] args) {\n }"}]}