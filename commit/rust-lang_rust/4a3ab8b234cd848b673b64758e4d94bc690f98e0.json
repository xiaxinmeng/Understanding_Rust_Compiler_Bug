{"sha": "4a3ab8b234cd848b673b64758e4d94bc690f98e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhM2FiOGIyMzRjZDg0OGI2NzNiNjQ3NThlNGQ5NGJjNjkwZjk4ZTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-16T20:35:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-16T20:35:57Z"}, "message": "Auto merge of #50003 - kennytm:rollup, r=kennytm\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #49555 (Inline most of the code paths for conversions with boxed slices)\n - #49606 (Prevent broken pipes causing ICEs)\n - #49646 (Use box syntax instead of Box::new in Mutex::remutex on Windows)\n - #49647 (Remove `underscore_lifetimes` and `match_default_bindings` from active feature list)\n - #49931 (Fix incorrect span in `&mut` suggestion)\n - #49959 (rustbuild: allow building tools with debuginfo)\n - #49965 (Remove warning about f64->f32 cast being potential UB)\n - #49994 (Remove unnecessary indentation in rustdoc book codeblock.)\n\nFailed merges:", "tree": {"sha": "98450fb73c7d15d7294a9bf9e8b2715bda1695d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98450fb73c7d15d7294a9bf9e8b2715bda1695d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a3ab8b234cd848b673b64758e4d94bc690f98e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a3ab8b234cd848b673b64758e4d94bc690f98e0", "html_url": "https://github.com/rust-lang/rust/commit/4a3ab8b234cd848b673b64758e4d94bc690f98e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a3ab8b234cd848b673b64758e4d94bc690f98e0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49317cd511fbb60178bd5122e484609568938468", "url": "https://api.github.com/repos/rust-lang/rust/commits/49317cd511fbb60178bd5122e484609568938468", "html_url": "https://github.com/rust-lang/rust/commit/49317cd511fbb60178bd5122e484609568938468"}, {"sha": "bf16e4bc545640f7269d383edd1592737fbdc0c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf16e4bc545640f7269d383edd1592737fbdc0c9", "html_url": "https://github.com/rust-lang/rust/commit/bf16e4bc545640f7269d383edd1592737fbdc0c9"}], "stats": {"total": 131, "additions": 86, "deletions": 45}, "files": [{"sha": "73d4188d695498e68e10388ce24b0e57bab27b11", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a3ab8b234cd848b673b64758e4d94bc690f98e0/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/4a3ab8b234cd848b673b64758e4d94bc690f98e0/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=4a3ab8b234cd848b673b64758e4d94bc690f98e0", "patch": "@@ -121,6 +121,7 @@ configuration used in the build process. Some options to note:\n #### `[rust]`:\n - `debuginfo = true` - Build a compiler with debuginfo. Makes building rustc slower, but then you can use a debugger to debug `rustc`.\n - `debuginfo-lines = true` - An alternative to `debuginfo = true` that doesn't let you use a debugger, but doesn't make building rustc slower and still gives you line numbers in backtraces.\n+- `debuginfo-tools = true` - Build the extended tools with debuginfo.\n - `debug-assertions = true` - Makes the log output of `debug!` work.\n - `optimize = false` - Disable optimizations to speed up compilation of stage1 rust, but makes the stage1 compiler x100 slower.\n "}, {"sha": "effe00843810da1dcd993bfc48ec00f6df6e288c", "filename": "config.toml.example", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a3ab8b234cd848b673b64758e4d94bc690f98e0/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/4a3ab8b234cd848b673b64758e4d94bc690f98e0/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=4a3ab8b234cd848b673b64758e4d94bc690f98e0", "patch": "@@ -262,6 +262,10 @@\n # standard library.\n #debuginfo-only-std = false\n \n+# Enable debuginfo for the extended tools: cargo, rls, rustfmt\n+# Adding debuginfo makes them several times larger.\n+#debuginfo-tools = false\n+\n # Whether or not jemalloc is built and enabled\n #use-jemalloc = true\n "}, {"sha": "6874efa5a4c73f9941947a799d182c4b7f8070e4", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4a3ab8b234cd848b673b64758e4d94bc690f98e0/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a3ab8b234cd848b673b64758e4d94bc690f98e0/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=4a3ab8b234cd848b673b64758e4d94bc690f98e0", "patch": "@@ -622,10 +622,14 @@ impl<'a> Builder<'a> {\n             cargo.env(\"RUSTDOC_LIBDIR\", self.rustc_libdir(self.compiler(2, self.build.build)));\n         }\n \n-        if mode != Mode::Tool {\n-            // Tools don't get debuginfo right now, e.g. cargo and rls don't\n-            // get compiled with debuginfo.\n-            // Adding debuginfo increases their sizes by a factor of 3-4.\n+        if mode == Mode::Tool {\n+            // Tools like cargo and rls don't get debuginfo by default right now, but this can be\n+            // enabled in the config.  Adding debuginfo makes them several times larger.\n+            if self.config.rust_debuginfo_tools {\n+                cargo.env(\"RUSTC_DEBUGINFO\", self.config.rust_debuginfo.to_string());\n+                cargo.env(\"RUSTC_DEBUGINFO_LINES\", self.config.rust_debuginfo_lines.to_string());\n+            }\n+        } else {\n             cargo.env(\"RUSTC_DEBUGINFO\", self.config.rust_debuginfo.to_string());\n             cargo.env(\"RUSTC_DEBUGINFO_LINES\", self.config.rust_debuginfo_lines.to_string());\n             cargo.env(\"RUSTC_FORCE_UNSTABLE\", \"1\");"}, {"sha": "1b4b2c5fb2a54cab90d9bf633b6dfabd4f6b8d78", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4a3ab8b234cd848b673b64758e4d94bc690f98e0/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a3ab8b234cd848b673b64758e4d94bc690f98e0/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=4a3ab8b234cd848b673b64758e4d94bc690f98e0", "patch": "@@ -94,6 +94,7 @@ pub struct Config {\n     pub rust_debuginfo: bool,\n     pub rust_debuginfo_lines: bool,\n     pub rust_debuginfo_only_std: bool,\n+    pub rust_debuginfo_tools: bool,\n     pub rust_rpath: bool,\n     pub rustc_parallel_queries: bool,\n     pub rustc_default_linker: Option<String>,\n@@ -282,6 +283,7 @@ struct Rust {\n     debuginfo: Option<bool>,\n     debuginfo_lines: Option<bool>,\n     debuginfo_only_std: Option<bool>,\n+    debuginfo_tools: Option<bool>,\n     experimental_parallel_queries: Option<bool>,\n     debug_jemalloc: Option<bool>,\n     use_jemalloc: Option<bool>,\n@@ -462,6 +464,7 @@ impl Config {\n         let mut llvm_assertions = None;\n         let mut debuginfo_lines = None;\n         let mut debuginfo_only_std = None;\n+        let mut debuginfo_tools = None;\n         let mut debug = None;\n         let mut debug_jemalloc = None;\n         let mut debuginfo = None;\n@@ -499,6 +502,7 @@ impl Config {\n             debuginfo = rust.debuginfo;\n             debuginfo_lines = rust.debuginfo_lines;\n             debuginfo_only_std = rust.debuginfo_only_std;\n+            debuginfo_tools = rust.debuginfo_tools;\n             optimize = rust.optimize;\n             ignore_git = rust.ignore_git;\n             debug_jemalloc = rust.debug_jemalloc;\n@@ -582,6 +586,7 @@ impl Config {\n         };\n         config.rust_debuginfo_lines = debuginfo_lines.unwrap_or(default);\n         config.rust_debuginfo_only_std = debuginfo_only_std.unwrap_or(default);\n+        config.rust_debuginfo_tools = debuginfo_tools.unwrap_or(false);\n \n         let default = debug == Some(true);\n         config.debug_jemalloc = debug_jemalloc.unwrap_or(default);"}, {"sha": "a0123da6d8ff9ba077663f4f10334a03c271baef", "filename": "src/bootstrap/configure.py", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a3ab8b234cd848b673b64758e4d94bc690f98e0/src%2Fbootstrap%2Fconfigure.py", "raw_url": "https://github.com/rust-lang/rust/raw/4a3ab8b234cd848b673b64758e4d94bc690f98e0/src%2Fbootstrap%2Fconfigure.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfigure.py?ref=4a3ab8b234cd848b673b64758e4d94bc690f98e0", "patch": "@@ -79,6 +79,7 @@ def v(*args):\n o(\"debuginfo\", \"rust.debuginfo\", \"build with debugger metadata\")\n o(\"debuginfo-lines\", \"rust.debuginfo-lines\", \"build with line number debugger metadata\")\n o(\"debuginfo-only-std\", \"rust.debuginfo-only-std\", \"build only libstd with debugging information\")\n+o(\"debuginfo-tools\", \"rust.debuginfo-tools\", \"build extended tools with debugging information\")\n o(\"debug-jemalloc\", \"rust.debug-jemalloc\", \"build jemalloc with --enable-debug --enable-fill\")\n v(\"save-toolstates\", \"rust.save-toolstates\", \"save build and test status of external tools into this file\")\n "}, {"sha": "3098587a8a4ccc11f1e09e4cb40be02d604d3a01", "filename": "src/doc/rustdoc/src/documentation-tests.md", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4a3ab8b234cd848b673b64758e4d94bc690f98e0/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md", "raw_url": "https://github.com/rust-lang/rust/raw/4a3ab8b234cd848b673b64758e4d94bc690f98e0/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md?ref=4a3ab8b234cd848b673b64758e4d94bc690f98e0", "patch": "@@ -138,31 +138,31 @@ To keep each code block testable, we want the whole program in each block, but\n we don't want the reader to see every line every time.  Here's what we put in\n our source code:\n \n-```text\n-    First, we set `x` to five:\n+``````markdown\n+First, we set `x` to five:\n \n-    ```\n-    let x = 5;\n-    # let y = 6;\n-    # println!(\"{}\", x + y);\n-    ```\n+```\n+let x = 5;\n+# let y = 6;\n+# println!(\"{}\", x + y);\n+```\n \n-    Next, we set `y` to six:\n+Next, we set `y` to six:\n \n-    ```\n-    # let x = 5;\n-    let y = 6;\n-    # println!(\"{}\", x + y);\n-    ```\n+```\n+# let x = 5;\n+let y = 6;\n+# println!(\"{}\", x + y);\n+```\n \n-    Finally, we print the sum of `x` and `y`:\n+Finally, we print the sum of `x` and `y`:\n \n-    ```\n-    # let x = 5;\n-    # let y = 6;\n-    println!(\"{}\", x + y);\n-    ```\n ```\n+# let x = 5;\n+# let y = 6;\n+println!(\"{}\", x + y);\n+```\n+``````\n \n By repeating all parts of the example, you can ensure that your example still\n compiles, while only showing the parts that are relevant to that part of your"}, {"sha": "5ebd2cc6146371febfa208b013699eadee9e963a", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a3ab8b234cd848b673b64758e4d94bc690f98e0/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a3ab8b234cd848b673b64758e4d94bc690f98e0/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=4a3ab8b234cd848b673b64758e4d94bc690f98e0", "patch": "@@ -429,13 +429,15 @@ impl<'a, T: Copy> From<&'a [T]> for Box<[T]> {\n \n #[stable(feature = \"box_from_slice\", since = \"1.17.0\")]\n impl<'a> From<&'a str> for Box<str> {\n+    #[inline]\n     fn from(s: &'a str) -> Box<str> {\n         unsafe { from_boxed_utf8_unchecked(Box::from(s.as_bytes())) }\n     }\n }\n \n #[stable(feature = \"boxed_str_conv\", since = \"1.19.0\")]\n impl From<Box<str>> for Box<[u8]> {\n+    #[inline]\n     fn from(s: Box<str>) -> Self {\n         unsafe { Box::from_raw(Box::into_raw(s) as *mut [u8]) }\n     }"}, {"sha": "0e7084653329e8b32be0ebaa7df109795e4557db", "filename": "src/liballoc/str.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4a3ab8b234cd848b673b64758e4d94bc690f98e0/src%2Fliballoc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a3ab8b234cd848b673b64758e4d94bc690f98e0/src%2Fliballoc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstr.rs?ref=4a3ab8b234cd848b673b64758e4d94bc690f98e0", "patch": "@@ -1827,6 +1827,7 @@ impl str {\n     /// assert_eq!(*boxed_bytes, *s.as_bytes());\n     /// ```\n     #[stable(feature = \"str_box_extras\", since = \"1.20.0\")]\n+    #[inline]\n     pub fn into_boxed_bytes(self: Box<str>) -> Box<[u8]> {\n         self.into()\n     }\n@@ -2065,6 +2066,7 @@ impl str {\n     /// assert_eq!(boxed_str.into_string(), string);\n     /// ```\n     #[stable(feature = \"box_str\", since = \"1.4.0\")]\n+    #[inline]\n     pub fn into_string(self: Box<str>) -> String {\n         let slice = Box::<[u8]>::from(self);\n         unsafe { String::from_utf8_unchecked(slice.into_vec()) }\n@@ -2323,6 +2325,7 @@ impl str {\n /// assert_eq!(\"\u263a\", &*smile);\n /// ```\n #[stable(feature = \"str_box_extras\", since = \"1.20.0\")]\n+#[inline]\n pub unsafe fn from_boxed_utf8_unchecked(v: Box<[u8]>) -> Box<str> {\n     Box::from_raw(Box::into_raw(v) as *mut str)\n }"}, {"sha": "11fb82c09d3aa47839088a53dec68ba09baa177a", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a3ab8b234cd848b673b64758e4d94bc690f98e0/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a3ab8b234cd848b673b64758e4d94bc690f98e0/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=4a3ab8b234cd848b673b64758e4d94bc690f98e0", "patch": "@@ -1586,6 +1586,7 @@ impl String {\n     /// let b = s.into_boxed_str();\n     /// ```\n     #[stable(feature = \"box_str\", since = \"1.4.0\")]\n+    #[inline]\n     pub fn into_boxed_str(self) -> Box<str> {\n         let slice = self.vec.into_boxed_slice();\n         unsafe { from_boxed_utf8_unchecked(slice) }"}, {"sha": "7d1b2ed85c7e13655e871cdaff00be37796788d8", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a3ab8b234cd848b673b64758e4d94bc690f98e0/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a3ab8b234cd848b673b64758e4d94bc690f98e0/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=4a3ab8b234cd848b673b64758e4d94bc690f98e0", "patch": "@@ -583,7 +583,9 @@ impl<T> Vec<T> {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn shrink_to_fit(&mut self) {\n-        self.buf.shrink_to_fit(self.len);\n+        if self.capacity() != self.len {\n+            self.buf.shrink_to_fit(self.len);\n+        }\n     }\n \n     /// Shrinks the capacity of the vector with a lower bound."}, {"sha": "cb91ff6a43e9ce08e0fd631a786b2455ba7b7b50", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4a3ab8b234cd848b673b64758e4d94bc690f98e0/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a3ab8b234cd848b673b64758e4d94bc690f98e0/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=4a3ab8b234cd848b673b64758e4d94bc690f98e0", "patch": "@@ -547,6 +547,18 @@ fn run_compiler_impl<'a>(args: &[String],\n     (result, Some(sess))\n }\n \n+#[cfg(unix)]\n+pub fn set_sigpipe_handler() {\n+    unsafe {\n+        // Set the SIGPIPE signal handler, so that an EPIPE\n+        // will cause rustc to terminate, as expected.\n+        assert!(libc::signal(libc::SIGPIPE, libc::SIG_DFL) != libc::SIG_ERR);\n+    }\n+}\n+\n+#[cfg(windows)]\n+pub fn set_sigpipe_handler() {}\n+\n // Extract output directory and file from matches.\n fn make_output(matches: &getopts::Matches) -> (Option<PathBuf>, Option<PathBuf>) {\n     let odir = matches.opt_str(\"out-dir\").map(|o| PathBuf::from(&o));"}, {"sha": "87379651c232f1eea4d987324c0b2f1b7d73333b", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4a3ab8b234cd848b673b64758e4d94bc690f98e0/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a3ab8b234cd848b673b64758e4d94bc690f98e0/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=4a3ab8b234cd848b673b64758e4d94bc690f98e0", "patch": "@@ -1639,10 +1639,18 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                                             } else {\n                                                 self.get_default_err_msg(place)\n                                             };\n+                                            let sp = self.mir.source_info(locations[0]).span;\n+                                            let mut to_suggest_span = String::new();\n+                                            if let Ok(src) =\n+                                                self.tcx.sess.codemap().span_to_snippet(sp) {\n+                                                    to_suggest_span = src[1..].to_string();\n+                                            };\n                                             err_info = Some((\n-                                                self.mir.source_info(locations[0]).span,\n+                                                    sp,\n                                                     \"consider changing this to be a \\\n-                                                    mutable reference: `&mut`\", item_msg,\n+                                                    mutable reference\",\n+                                                    to_suggest_span,\n+                                                    item_msg,\n                                                     self.get_primary_err_msg(base)));\n                                         }\n                                 },\n@@ -1652,9 +1660,15 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                         _ => {},\n                     }\n \n-                    if let Some((err_help_span, err_help_stmt, item_msg, sec_span)) = err_info {\n+                    if let Some((err_help_span,\n+                                 err_help_stmt,\n+                                 to_suggest_span,\n+                                 item_msg,\n+                                 sec_span)) = err_info {\n                         let mut err = self.tcx.cannot_assign(span, &item_msg, Origin::Mir);\n-                        err.span_suggestion(err_help_span, err_help_stmt, format!(\"\"));\n+                        err.span_suggestion(err_help_span,\n+                                            err_help_stmt,\n+                                            format!(\"&mut {}\", to_suggest_span));\n                         if place != place_err {\n                             err.span_label(span, sec_span);\n                         }"}, {"sha": "49d0f638f206137c2685d65c15d110f67383588c", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a3ab8b234cd848b673b64758e4d94bc690f98e0/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a3ab8b234cd848b673b64758e4d94bc690f98e0/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=4a3ab8b234cd848b673b64758e4d94bc690f98e0", "patch": "@@ -29,7 +29,6 @@\n #![feature(slice_sort_by_cached_key)]\n #![feature(optin_builtin_traits)]\n #![feature(inclusive_range_fields)]\n-#![feature(underscore_lifetimes)]\n \n use rustc::dep_graph::WorkProduct;\n use syntax_pos::symbol::Symbol;"}, {"sha": "c0d6993c7d4dde1c133d3e11257dc3f5ce7951ae", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a3ab8b234cd848b673b64758e4d94bc690f98e0/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a3ab8b234cd848b673b64758e4d94bc690f98e0/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=4a3ab8b234cd848b673b64758e4d94bc690f98e0", "patch": "@@ -502,10 +502,6 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                             &format!(\"{}, producing the closest possible value\",\n                                                      msg),\n                                             cast_suggestion);\n-                        err.warn(\"casting here will cause undefined behavior if the value is \\\n-                                  finite but larger or smaller than the largest or smallest \\\n-                                  finite value representable by `f32` (this is a bug and will be \\\n-                                  fixed)\");\n                     }\n                     true\n                 }"}, {"sha": "4b66939963ed0a37add319284a78a58ae130fb4e", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a3ab8b234cd848b673b64758e4d94bc690f98e0/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a3ab8b234cd848b673b64758e4d94bc690f98e0/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=4a3ab8b234cd848b673b64758e4d94bc690f98e0", "patch": "@@ -82,7 +82,6 @@ This API is completely unstable and subject to change.\n #![feature(slice_patterns)]\n #![feature(slice_sort_by_cached_key)]\n #![feature(dyn_trait)]\n-#![feature(underscore_lifetimes)]\n \n #[macro_use] extern crate log;\n #[macro_use] extern crate syntax;"}, {"sha": "148a57c420f8d8e951c66d29e817eaf251a37bce", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a3ab8b234cd848b673b64758e4d94bc690f98e0/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a3ab8b234cd848b673b64758e4d94bc690f98e0/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=4a3ab8b234cd848b673b64758e4d94bc690f98e0", "patch": "@@ -100,6 +100,7 @@ struct Output {\n \n pub fn main() {\n     const STACK_SIZE: usize = 32_000_000; // 32MB\n+    rustc_driver::set_sigpipe_handler();\n     env_logger::init();\n     let res = std::thread::Builder::new().stack_size(STACK_SIZE).spawn(move || {\n         syntax::with_globals(move || {"}, {"sha": "c1298e5040dbeec35b3a503c17d1aa2e4aa961c8", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a3ab8b234cd848b673b64758e4d94bc690f98e0/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a3ab8b234cd848b673b64758e4d94bc690f98e0/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=4a3ab8b234cd848b673b64758e4d94bc690f98e0", "patch": "@@ -80,11 +80,11 @@ pub fn init() {\n         reset_sigpipe();\n     }\n \n-    #[cfg(not(any(target_os = \"emscripten\", target_os=\"fuchsia\")))]\n+    #[cfg(not(any(target_os = \"emscripten\", target_os = \"fuchsia\")))]\n     unsafe fn reset_sigpipe() {\n         assert!(signal(libc::SIGPIPE, libc::SIG_IGN) != libc::SIG_ERR);\n     }\n-    #[cfg(any(target_os = \"emscripten\", target_os=\"fuchsia\"))]\n+    #[cfg(any(target_os = \"emscripten\", target_os = \"fuchsia\"))]\n     unsafe fn reset_sigpipe() {}\n }\n "}, {"sha": "9bf9f749d4df252c89182265ccb7fc3d80290631", "filename": "src/libstd/sys/windows/mutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a3ab8b234cd848b673b64758e4d94bc690f98e0/src%2Flibstd%2Fsys%2Fwindows%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a3ab8b234cd848b673b64758e4d94bc690f98e0/src%2Flibstd%2Fsys%2Fwindows%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmutex.rs?ref=4a3ab8b234cd848b673b64758e4d94bc690f98e0", "patch": "@@ -117,7 +117,7 @@ impl Mutex {\n             0 => {}\n             n => return n as *mut _,\n         }\n-        let mut re = Box::new(ReentrantMutex::uninitialized());\n+        let mut re = box ReentrantMutex::uninitialized();\n         re.init();\n         let re = Box::into_raw(re);\n         match self.lock.compare_and_swap(0, re as usize, Ordering::SeqCst) {"}, {"sha": "eaa2050f608f3c8a4ad08137c397a2b2964212e2", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4a3ab8b234cd848b673b64758e4d94bc690f98e0/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a3ab8b234cd848b673b64758e4d94bc690f98e0/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=4a3ab8b234cd848b673b64758e4d94bc690f98e0", "patch": "@@ -378,12 +378,6 @@ declare_features! (\n     // Future-proofing enums/structs with #[non_exhaustive] attribute (RFC 2008)\n     (active, non_exhaustive, \"1.22.0\", Some(44109), None),\n \n-    // allow `'_` placeholder lifetimes\n-    (active, underscore_lifetimes, \"1.22.0\", Some(44524), None),\n-\n-    // Default match binding modes (RFC 2005)\n-    (active, match_default_bindings, \"1.22.0\", Some(42640), None),\n-\n     // Trait object syntax with `dyn` prefix\n     (active, dyn_trait, \"1.22.0\", Some(44662), Some(Edition::Edition2018)),\n "}, {"sha": "ab5a7c3f747eb3835aae5144032639e31215db30", "filename": "src/rustc/rustc.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4a3ab8b234cd848b673b64758e4d94bc690f98e0/src%2Frustc%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a3ab8b234cd848b673b64758e4d94bc690f98e0/src%2Frustc%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Frustc.rs?ref=4a3ab8b234cd848b673b64758e4d94bc690f98e0", "patch": "@@ -23,4 +23,7 @@ extern {}\n \n extern crate rustc_driver;\n \n-fn main() { rustc_driver::main() }\n+fn main() {\n+    rustc_driver::set_sigpipe_handler();\n+    rustc_driver::main()\n+}"}, {"sha": "f3952c49a2a36fecd13ff84996782ed83cff5d39", "filename": "src/test/ui/nll/issue-47388.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a3ab8b234cd848b673b64758e4d94bc690f98e0/src%2Ftest%2Fui%2Fnll%2Fissue-47388.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a3ab8b234cd848b673b64758e4d94bc690f98e0/src%2Ftest%2Fui%2Fnll%2Fissue-47388.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-47388.stderr?ref=4a3ab8b234cd848b673b64758e4d94bc690f98e0", "patch": "@@ -2,7 +2,7 @@ error[E0594]: cannot assign to data in a `&` reference\n   --> $DIR/issue-47388.rs:18:5\n    |\n LL |     let fancy_ref = &(&mut fancy);\n-   |                     ------------- help: consider changing this to be a mutable reference: `&mut`\n+   |                     ------------- help: consider changing this to be a mutable reference: `&mut (&mut fancy)`\n LL |     fancy_ref.num = 6; //~ ERROR E0594\n    |     ^^^^^^^^^^^^^^^^^ `fancy_ref` is a `&` reference, so the data it refers to cannot be written\n "}]}