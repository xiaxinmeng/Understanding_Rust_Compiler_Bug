{"sha": "9957cf60232d05db250e6c3b89210850bc7b1839", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5NTdjZjYwMjMyZDA1ZGIyNTBlNmMzYjg5MjEwODUwYmM3YjE4Mzk=", "commit": {"author": {"name": "Sebastian Dr\u00f6ge", "email": "sebastian@centricular.com", "date": "2018-01-01T23:46:50Z"}, "committer": {"name": "Sebastian Dr\u00f6ge", "email": "sebastian@centricular.com", "date": "2018-01-02T08:00:58Z"}, "message": "Consistently use chunk_size as the field name for Chunks and ChunksMut\n\nPreviously Chunks used size and ChunksMut used chunk_size", "tree": {"sha": "d2b02084efb4b2f49501abb6ccbd5603582275ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2b02084efb4b2f49501abb6ccbd5603582275ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9957cf60232d05db250e6c3b89210850bc7b1839", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9957cf60232d05db250e6c3b89210850bc7b1839", "html_url": "https://github.com/rust-lang/rust/commit/9957cf60232d05db250e6c3b89210850bc7b1839", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9957cf60232d05db250e6c3b89210850bc7b1839/comments", "author": {"login": "sdroege", "id": 301846, "node_id": "MDQ6VXNlcjMwMTg0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/301846?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sdroege", "html_url": "https://github.com/sdroege", "followers_url": "https://api.github.com/users/sdroege/followers", "following_url": "https://api.github.com/users/sdroege/following{/other_user}", "gists_url": "https://api.github.com/users/sdroege/gists{/gist_id}", "starred_url": "https://api.github.com/users/sdroege/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sdroege/subscriptions", "organizations_url": "https://api.github.com/users/sdroege/orgs", "repos_url": "https://api.github.com/users/sdroege/repos", "events_url": "https://api.github.com/users/sdroege/events{/privacy}", "received_events_url": "https://api.github.com/users/sdroege/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sdroege", "id": 301846, "node_id": "MDQ6VXNlcjMwMTg0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/301846?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sdroege", "html_url": "https://github.com/sdroege", "followers_url": "https://api.github.com/users/sdroege/followers", "following_url": "https://api.github.com/users/sdroege/following{/other_user}", "gists_url": "https://api.github.com/users/sdroege/gists{/gist_id}", "starred_url": "https://api.github.com/users/sdroege/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sdroege/subscriptions", "organizations_url": "https://api.github.com/users/sdroege/orgs", "repos_url": "https://api.github.com/users/sdroege/repos", "events_url": "https://api.github.com/users/sdroege/events{/privacy}", "received_events_url": "https://api.github.com/users/sdroege/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b65f0bedd2f22d9661ecb7092f07746dc2ccfb0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b65f0bedd2f22d9661ecb7092f07746dc2ccfb0d", "html_url": "https://github.com/rust-lang/rust/commit/b65f0bedd2f22d9661ecb7092f07746dc2ccfb0d"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "b880616833a4e1e43a5414f082da77ef89846e42", "filename": "src/liballoc/slice.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9957cf60232d05db250e6c3b89210850bc7b1839/src%2Fliballoc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9957cf60232d05db250e6c3b89210850bc7b1839/src%2Fliballoc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fslice.rs?ref=9957cf60232d05db250e6c3b89210850bc7b1839", "patch": "@@ -606,14 +606,14 @@ impl<T> [T] {\n         core_slice::SliceExt::windows(self, size)\n     }\n \n-    /// Returns an iterator over `size` elements of the slice at a\n-    /// time. The chunks are slices and do not overlap. If `size` does\n+    /// Returns an iterator over `chunk_size` elements of the slice at a\n+    /// time. The chunks are slices and do not overlap. If `chunk_size` does\n     /// not divide the length of the slice, then the last chunk will\n-    /// not have length `size`.\n+    /// not have length `chunk_size`.\n     ///\n     /// # Panics\n     ///\n-    /// Panics if `size` is 0.\n+    /// Panics if `chunk_size` is 0.\n     ///\n     /// # Examples\n     ///\n@@ -627,8 +627,8 @@ impl<T> [T] {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn chunks(&self, size: usize) -> Chunks<T> {\n-        core_slice::SliceExt::chunks(self, size)\n+    pub fn chunks(&self, chunk_size: usize) -> Chunks<T> {\n+        core_slice::SliceExt::chunks(self, chunk_size)\n     }\n \n     /// Returns an iterator over `chunk_size` elements of the slice at a time."}, {"sha": "817e309cf77662bbd7a03f3c97618a22025e3243", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9957cf60232d05db250e6c3b89210850bc7b1839/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9957cf60232d05db250e6c3b89210850bc7b1839/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=9957cf60232d05db250e6c3b89210850bc7b1839", "patch": "@@ -348,9 +348,9 @@ impl<T> SliceExt for [T] {\n     }\n \n     #[inline]\n-    fn chunks(&self, size: usize) -> Chunks<T> {\n-        assert!(size != 0);\n-        Chunks { v: self, size: size }\n+    fn chunks(&self, chunk_size: usize) -> Chunks<T> {\n+        assert!(chunk_size != 0);\n+        Chunks { v: self, chunk_size: chunk_size }\n     }\n \n     #[inline]\n@@ -2117,7 +2117,7 @@ impl<'a, T> ExactSizeIterator for Windows<'a, T> {}\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<'a, T> FusedIterator for Windows<'a, T> {}\n \n-/// An iterator over a slice in (non-overlapping) chunks (`size` elements at a\n+/// An iterator over a slice in (non-overlapping) chunks (`chunk_size` elements at a\n /// time).\n ///\n /// When the slice len is not evenly divided by the chunk size, the last slice\n@@ -2131,7 +2131,7 @@ impl<'a, T> FusedIterator for Windows<'a, T> {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Chunks<'a, T:'a> {\n     v: &'a [T],\n-    size: usize\n+    chunk_size: usize\n }\n \n // FIXME(#26925) Remove in favor of `#[derive(Clone)]`\n@@ -2140,7 +2140,7 @@ impl<'a, T> Clone for Chunks<'a, T> {\n     fn clone(&self) -> Chunks<'a, T> {\n         Chunks {\n             v: self.v,\n-            size: self.size,\n+            chunk_size: self.chunk_size,\n         }\n     }\n }\n@@ -2154,7 +2154,7 @@ impl<'a, T> Iterator for Chunks<'a, T> {\n         if self.v.is_empty() {\n             None\n         } else {\n-            let chunksz = cmp::min(self.v.len(), self.size);\n+            let chunksz = cmp::min(self.v.len(), self.chunk_size);\n             let (fst, snd) = self.v.split_at(chunksz);\n             self.v = snd;\n             Some(fst)\n@@ -2166,8 +2166,8 @@ impl<'a, T> Iterator for Chunks<'a, T> {\n         if self.v.is_empty() {\n             (0, Some(0))\n         } else {\n-            let n = self.v.len() / self.size;\n-            let rem = self.v.len() % self.size;\n+            let n = self.v.len() / self.chunk_size;\n+            let rem = self.v.len() % self.chunk_size;\n             let n = if rem > 0 { n+1 } else { n };\n             (n, Some(n))\n         }\n@@ -2180,12 +2180,12 @@ impl<'a, T> Iterator for Chunks<'a, T> {\n \n     #[inline]\n     fn nth(&mut self, n: usize) -> Option<Self::Item> {\n-        let (start, overflow) = n.overflowing_mul(self.size);\n+        let (start, overflow) = n.overflowing_mul(self.chunk_size);\n         if start >= self.v.len() || overflow {\n             self.v = &[];\n             None\n         } else {\n-            let end = match start.checked_add(self.size) {\n+            let end = match start.checked_add(self.chunk_size) {\n                 Some(sum) => cmp::min(self.v.len(), sum),\n                 None => self.v.len(),\n             };\n@@ -2200,7 +2200,7 @@ impl<'a, T> Iterator for Chunks<'a, T> {\n         if self.v.is_empty() {\n             None\n         } else {\n-            let start = (self.v.len() - 1) / self.size * self.size;\n+            let start = (self.v.len() - 1) / self.chunk_size * self.chunk_size;\n             Some(&self.v[start..])\n         }\n     }\n@@ -2213,8 +2213,8 @@ impl<'a, T> DoubleEndedIterator for Chunks<'a, T> {\n         if self.v.is_empty() {\n             None\n         } else {\n-            let remainder = self.v.len() % self.size;\n-            let chunksz = if remainder != 0 { remainder } else { self.size };\n+            let remainder = self.v.len() % self.chunk_size;\n+            let chunksz = if remainder != 0 { remainder } else { self.chunk_size };\n             let (fst, snd) = self.v.split_at(self.v.len() - chunksz);\n             self.v = fst;\n             Some(snd)\n@@ -2228,7 +2228,7 @@ impl<'a, T> ExactSizeIterator for Chunks<'a, T> {}\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<'a, T> FusedIterator for Chunks<'a, T> {}\n \n-/// An iterator over a slice in (non-overlapping) mutable chunks (`size`\n+/// An iterator over a slice in (non-overlapping) mutable chunks (`chunk_size`\n /// elements at a time). When the slice len is not evenly divided by the chunk\n /// size, the last slice of the iteration will be the remainder.\n ///"}]}