{"sha": "5679f5c55e15e4a42542c36b1abc86b469903d19", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2NzlmNWM1NWUxNWU0YTQyNTQyYzM2YjFhYmM4NmI0Njk5MDNkMTk=", "commit": {"author": {"name": "Lindsey Kuper", "email": "lkuper@mozilla.com", "date": "2011-05-14T00:26:14Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-05-14T00:37:01Z"}, "message": "'with' no longer a token; whitespace police.\n\nPlus renaming the anonymous objects test to a more descriptive name,\nand XFAILing it because it doesn't work yet.", "tree": {"sha": "05e621c2d05f678d2a15cbb70de7f09163619ef3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05e621c2d05f678d2a15cbb70de7f09163619ef3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5679f5c55e15e4a42542c36b1abc86b469903d19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5679f5c55e15e4a42542c36b1abc86b469903d19", "html_url": "https://github.com/rust-lang/rust/commit/5679f5c55e15e4a42542c36b1abc86b469903d19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5679f5c55e15e4a42542c36b1abc86b469903d19/comments", "author": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd31d5d532819d64772d0453fd1c2a3135b35f6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd31d5d532819d64772d0453fd1c2a3135b35f6c", "html_url": "https://github.com/rust-lang/rust/commit/cd31d5d532819d64772d0453fd1c2a3135b35f6c"}], "stats": {"total": 33, "additions": 15, "deletions": 18}, "files": [{"sha": "767e7e932f179f8d7e96925b01418279c756b15f", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5679f5c55e15e4a42542c36b1abc86b469903d19/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5679f5c55e15e4a42542c36b1abc86b469903d19/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=5679f5c55e15e4a42542c36b1abc86b469903d19", "patch": "@@ -801,15 +801,11 @@ fn parse_bottom_expr(parser p) -> @ast::expr {\n         expect(p, token::LBRACE);\n \n         while (p.peek() != token::RBRACE) {\n-            alt (p.peek()) {\n-                case (token::WITH) { \n-                    p.bump();\n-                    with_obj = some[ast::ident](parse_ident(p));\n-                }\n-                case (_) {\n-                    _vec::push[@ast::method](meths,\n-                                             parse_method(p));\n-                }\n+            if (eat_word(p, \"with\")) {\n+                with_obj = some[ast::ident](parse_ident(p));\n+            } else {\n+                _vec::push[@ast::method](meths,\n+                                         parse_method(p));\n             }\n         }\n "}, {"sha": "3a620fa75cf868c2e23e210a44bb35cfe6afea69", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5679f5c55e15e4a42542c36b1abc86b469903d19/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5679f5c55e15e4a42542c36b1abc86b469903d19/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=5679f5c55e15e4a42542c36b1abc86b469903d19", "patch": "@@ -762,7 +762,7 @@ mod Collect {\n             }\n         }\n     }\n-    \n+\n     // Anonymous objects are expressions, not items, but they're enough like\n     // items that we're going to include them in this fold.\n     fn fold_expr_anon_obj(&@env e, &span sp,\n@@ -1544,8 +1544,8 @@ mod Pushdown {\n                 write_type_only(fcx.ccx.node_types, ast::ann_tag(ann), t);\n             }\n             /* FIXME: should this check the type annotations? */\n-            case (ast::expr_fail(_))  { e_1 = e.node; } \n-            case (ast::expr_log(_,_,_)) { e_1 = e.node; } \n+            case (ast::expr_fail(_))  { e_1 = e.node; }\n+            case (ast::expr_log(_,_,_)) { e_1 = e.node; }\n             case (ast::expr_break(_)) { e_1 = e.node; }\n             case (ast::expr_cont(_))  { e_1 = e.node; }\n             case (ast::expr_ret(_,_)) { e_1 = e.node; }\n@@ -2262,7 +2262,7 @@ fn check_expr(&@fn_ctxt fcx, &@ast::expr expr) -> @ast::expr {\n                                      + \"slot variables or literals\");\n                                 }\n                             }\n-                            \n+\n                             require_pure_function(fcx.ccx, d_id, expr.span);\n \n                             ret @fold::respan[ast::expr_]\n@@ -2574,7 +2574,7 @@ fn check_expr(&@fn_ctxt fcx, &@ast::expr expr) -> @ast::expr {\n         case (ast::expr_call(?f, ?args, ?a)) {\n             /* here we're kind of hosed, as f can be any expr\n              need to restrict it to being an explicit expr_path if we're\n-            inside a pure function, and need an environment mapping from \n+            inside a pure function, and need an environment mapping from\n             function name onto purity-designation */\n             require_pure_call(fcx.ccx, fcx.purity, f, expr.span);\n \n@@ -2613,10 +2613,10 @@ fn check_expr(&@fn_ctxt fcx, &@ast::expr expr) -> @ast::expr {\n                 }\n                 // Otherwise, we should be able to look up the object we're\n                 // \"with\".\n-                case (_) { \n+                case (_) {\n                     // TODO.\n-                    \n-                    fail; \n+\n+                    fail;\n                 }\n             }\n \n@@ -2886,7 +2886,7 @@ fn check_expr(&@fn_ctxt fcx, &@ast::expr expr) -> @ast::expr {\n                 expr_ty(fcx.ccx.tcx, fcx.ccx.node_types, base_1));\n \n             auto idx_1 = check_expr(fcx, idx);\n-            auto idx_t = expr_ty(fcx.ccx.tcx, fcx.ccx.node_types, idx_1); \n+            auto idx_t = expr_ty(fcx.ccx.tcx, fcx.ccx.node_types, idx_1);\n             alt (struct(fcx.ccx.tcx, base_t)) {\n                 case (ty::ty_vec(?mt)) {\n                     if (! type_is_integral(fcx.ccx.tcx, idx_t)) {"}, {"sha": "14279db2e58cdb8bc753b28ed172b9a39e624e34", "filename": "src/test/run-pass/anon-objs.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5679f5c55e15e4a42542c36b1abc86b469903d19/src%2Ftest%2Frun-pass%2Fanon-objs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5679f5c55e15e4a42542c36b1abc86b469903d19/src%2Ftest%2Frun-pass%2Fanon-objs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fanon-objs.rs?ref=5679f5c55e15e4a42542c36b1abc86b469903d19", "patch": "@@ -1,5 +1,6 @@\n // xfail-boot\n // xfail-stage0\n+// xfail-stage1\n use std;\n \n fn main() {", "previous_filename": "src/test/run-pass/method-overriding.rs"}]}