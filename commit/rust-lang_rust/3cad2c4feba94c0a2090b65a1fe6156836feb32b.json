{"sha": "3cad2c4feba94c0a2090b65a1fe6156836feb32b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjYWQyYzRmZWJhOTRjMGEyMDkwYjY1YTFmZTYxNTY4MzZmZWIzMmI=", "commit": {"author": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-08-10T17:48:50Z"}, "committer": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-08-10T17:48:50Z"}, "message": "add partial_eq gen tests", "tree": {"sha": "d36582d31f8169404a7a27c7603ee28c230fb30a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d36582d31f8169404a7a27c7603ee28c230fb30a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3cad2c4feba94c0a2090b65a1fe6156836feb32b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3cad2c4feba94c0a2090b65a1fe6156836feb32b", "html_url": "https://github.com/rust-lang/rust/commit/3cad2c4feba94c0a2090b65a1fe6156836feb32b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3cad2c4feba94c0a2090b65a1fe6156836feb32b/comments", "author": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20c3b20db3354729df606f3b5a1ddd474ca7c78c", "url": "https://api.github.com/repos/rust-lang/rust/commits/20c3b20db3354729df606f3b5a1ddd474ca7c78c", "html_url": "https://github.com/rust-lang/rust/commit/20c3b20db3354729df606f3b5a1ddd474ca7c78c"}], "stats": {"total": 175, "additions": 175, "deletions": 0}, "files": [{"sha": "49750e354be459ef76e9381329099fc2bb0e49c4", "filename": "crates/ide_assists/src/handlers/replace_derive_with_manual_impl.rs", "status": "modified", "additions": 175, "deletions": 0, "changes": 175, "blob_url": "https://github.com/rust-lang/rust/blob/3cad2c4feba94c0a2090b65a1fe6156836feb32b/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cad2c4feba94c0a2090b65a1fe6156836feb32b/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs?ref=3cad2c4feba94c0a2090b65a1fe6156836feb32b", "patch": "@@ -606,6 +606,181 @@ impl Clone for Foo {\n         }\n     }\n }\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn add_custom_impl_partial_eq_record_struct() {\n+        check_assist(\n+            replace_derive_with_manual_impl,\n+            r#\"\n+//- minicore: eq\n+#[derive(Partial$0Eq)]\n+struct Foo {\n+    bin: usize,\n+    bar: usize,\n+}\n+\"#,\n+            r#\"\n+struct Foo {\n+    bin: usize,\n+    bar: usize,\n+}\n+\n+impl PartialEq for Foo {\n+    $0fn eq(&self, other: &Self) -> bool {\n+        self.bin == other.bin && self.bar == other.bar\n+    }\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn add_custom_impl_partial_eq_tuple_struct() {\n+        check_assist(\n+            replace_derive_with_manual_impl,\n+            r#\"\n+//- minicore: eq\n+#[derive(Partial$0Eq)]\n+struct Foo(usize, usize);\n+\"#,\n+            r#\"\n+struct Foo(usize, usize);\n+\n+impl PartialEq for Foo {\n+    $0fn eq(&self, other: &Self) -> bool {\n+        self.0 == other.0 && self.1 == other.1\n+    }\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn add_custom_impl_partial_eq_empty_struct() {\n+        check_assist(\n+            replace_derive_with_manual_impl,\n+            r#\"\n+//- minicore: eq\n+#[derive(Partial$0Eq)]\n+struct Foo;\n+\"#,\n+            r#\"\n+struct Foo;\n+\n+impl PartialEq for Foo {\n+    $0fn eq(&self, other: &Self) -> bool {\n+        true\n+    }\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn add_custom_impl_partial_eq_enum() {\n+        check_assist(\n+            replace_derive_with_manual_impl,\n+            r#\"\n+//- minicore: eq\n+#[derive(Partial$0Eq)]\n+enum Foo {\n+    Bar,\n+    Baz,\n+}\n+\"#,\n+            r#\"\n+enum Foo {\n+    Bar,\n+    Baz,\n+}\n+\n+impl PartialEq for Foo {\n+    $0fn eq(&self, other: &Self) -> bool {\n+        std::mem::discriminant(self) == std::mem::discriminant(other)\n+    }\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn add_custom_impl_partial_eq_tuple_enum() {\n+        check_assist(\n+            replace_derive_with_manual_impl,\n+            r#\"\n+//- minicore: eq\n+#[derive(Partial$0Eq)]\n+enum Foo {\n+    Bar(String),\n+    Baz,\n+}\n+\"#,\n+            r#\"\n+enum Foo {\n+    Bar(String),\n+    Baz,\n+}\n+\n+impl PartialEq for Foo {\n+    $0fn eq(&self, other: &Self) -> bool {\n+        if std::mem::discriminant(self) == std::mem::discriminant(other) {\n+            match (self, other) {\n+                (Self::Bar(l0), Self::Bar(r0)) => l0 == r0,\n+                _ => true,\n+            }\n+        } else {\n+            false\n+        }\n+    }\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn add_custom_impl_partial_eq_record_enum() {\n+        check_assist(\n+            replace_derive_with_manual_impl,\n+            r#\"\n+//- minicore: eq\n+#[derive(Partial$0Eq)]\n+enum Foo {\n+    Bar {\n+        bin: String,\n+    },\n+    Baz {\n+        quz: String,\n+        fez: String,\n+    },\n+}\n+\"#,\n+            r#\"\n+enum Foo {\n+    Bar {\n+        bin: String,\n+    },\n+    Baz {\n+        quz: String,\n+        fez: String,\n+    }\n+}\n+\n+impl PartialEq for Foo {\n+    $0fn eq(&self, other: &Self) -> bool {\n+        if std::mem::discriminant(self) == std::mem::discriminant(other) {\n+            match (self, other) {\n+                (Self::Bar { bin: l_bin }, Self::Bar { bin: r_bin }) => l_bin == r_bin,\n+                (Self::Baz { qux: l_qux, fez: l_fez }, Self::Bar { qux: r_qux, fez: r_fez }) => l_qux == r_qux && l_fez == r_fez,\n+                _ => true,\n+            }\n+        } else {\n+            false\n+        }\n+    }\n+}\n \"#,\n         )\n     }"}]}