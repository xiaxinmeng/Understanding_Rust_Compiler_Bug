{"sha": "758d855bff92cb35e13c5ae078639b862f02001f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1OGQ4NTViZmY5MmNiMzVlMTNjNWFlMDc4NjM5Yjg2MmYwMjAwMWY=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-01-21T16:57:01Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-01-21T16:57:01Z"}, "message": "Enforce statically that `MIN_NON_ZERO_CAP` is calculated at compile time\n\nPreviously, it would usually get computed by LLVM, but this enforces it.", "tree": {"sha": "b986c4a2a772012ed8704ca000e28b378a1df5dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b986c4a2a772012ed8704ca000e28b378a1df5dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/758d855bff92cb35e13c5ae078639b862f02001f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/758d855bff92cb35e13c5ae078639b862f02001f", "html_url": "https://github.com/rust-lang/rust/commit/758d855bff92cb35e13c5ae078639b862f02001f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/758d855bff92cb35e13c5ae078639b862f02001f/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4cbb44ae2c80545db957763b502dc7f6ea22085", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4cbb44ae2c80545db957763b502dc7f6ea22085", "html_url": "https://github.com/rust-lang/rust/commit/a4cbb44ae2c80545db957763b502dc7f6ea22085"}], "stats": {"total": 30, "additions": 14, "deletions": 16}, "files": [{"sha": "36e2d18d3ddfbeb182647a848459baac7a79b55a", "filename": "library/alloc/src/raw_vec.rs", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/758d855bff92cb35e13c5ae078639b862f02001f/library%2Falloc%2Fsrc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/758d855bff92cb35e13c5ae078639b862f02001f/library%2Falloc%2Fsrc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fraw_vec.rs?ref=758d855bff92cb35e13c5ae078639b862f02001f", "patch": "@@ -114,6 +114,19 @@ impl<T> RawVec<T, Global> {\n }\n \n impl<T, A: Allocator> RawVec<T, A> {\n+    // Tiny Vecs are dumb. Skip to:\n+    // - 8 if the element size is 1, because any heap allocators is likely\n+    //   to round up a request of less than 8 bytes to at least 8 bytes.\n+    // - 4 if elements are moderate-sized (<= 1 KiB).\n+    // - 1 otherwise, to avoid wasting too much space for very short Vecs.\n+    const MIN_NON_ZERO_CAP: usize = if mem::size_of::<T>() == 1 {\n+        8\n+    } else if mem::size_of::<T>() <= 1024 {\n+        4\n+    } else {\n+        1\n+    };\n+\n     /// Like `new`, but parameterized over the choice of allocator for\n     /// the returned `RawVec`.\n     #[rustc_allow_const_fn_unstable(const_fn)]\n@@ -399,22 +412,7 @@ impl<T, A: Allocator> RawVec<T, A> {\n         // This guarantees exponential growth. The doubling cannot overflow\n         // because `cap <= isize::MAX` and the type of `cap` is `usize`.\n         let cap = cmp::max(self.cap * 2, required_cap);\n-\n-        // Tiny Vecs are dumb. Skip to:\n-        // - 8 if the element size is 1, because any heap allocators is likely\n-        //   to round up a request of less than 8 bytes to at least 8 bytes.\n-        // - 4 if elements are moderate-sized (<= 1 KiB).\n-        // - 1 otherwise, to avoid wasting too much space for very short Vecs.\n-        // Note that `min_non_zero_cap` is computed statically.\n-        let elem_size = mem::size_of::<T>();\n-        let min_non_zero_cap = if elem_size == 1 {\n-            8\n-        } else if elem_size <= 1024 {\n-            4\n-        } else {\n-            1\n-        };\n-        let cap = cmp::max(min_non_zero_cap, cap);\n+        let cap = cmp::max(Self::MIN_NON_ZERO_CAP, cap);\n \n         let new_layout = Layout::array::<T>(cap);\n "}]}