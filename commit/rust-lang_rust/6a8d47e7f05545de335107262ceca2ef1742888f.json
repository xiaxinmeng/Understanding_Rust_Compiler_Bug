{"sha": "6a8d47e7f05545de335107262ceca2ef1742888f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhOGQ0N2U3ZjA1NTQ1ZGUzMzUxMDcyNjJjZWNhMmVmMTc0Mjg4OGY=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-05-10T19:03:50Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-05-10T19:14:59Z"}, "message": "Give MergeBehaviour variants better names", "tree": {"sha": "cc0296591c62cd3e1bb67f083a3869b6bee71e1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc0296591c62cd3e1bb67f083a3869b6bee71e1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a8d47e7f05545de335107262ceca2ef1742888f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a8d47e7f05545de335107262ceca2ef1742888f", "html_url": "https://github.com/rust-lang/rust/commit/6a8d47e7f05545de335107262ceca2ef1742888f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a8d47e7f05545de335107262ceca2ef1742888f/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07cea5e709f8232b27de646cee67bf1d3f7279c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/07cea5e709f8232b27de646cee67bf1d3f7279c9", "html_url": "https://github.com/rust-lang/rust/commit/07cea5e709f8232b27de646cee67bf1d3f7279c9"}], "stats": {"total": 142, "additions": 76, "deletions": 66}, "files": [{"sha": "3cd090737ea7601c5789d92526a9be0b2061a2fd", "filename": "crates/ide_assists/src/handlers/merge_imports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a8d47e7f05545de335107262ceca2ef1742888f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a8d47e7f05545de335107262ceca2ef1742888f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs?ref=6a8d47e7f05545de335107262ceca2ef1742888f", "patch": "@@ -27,14 +27,14 @@ pub(crate) fn merge_imports(acc: &mut Assists, ctx: &AssistContext) -> Option<()\n     if let Some(use_item) = tree.syntax().parent().and_then(ast::Use::cast) {\n         let (merged, to_remove) =\n             next_prev().filter_map(|dir| neighbor(&use_item, dir)).find_map(|use_item2| {\n-                try_merge_imports(&use_item, &use_item2, MergeBehavior::Full).zip(Some(use_item2))\n+                try_merge_imports(&use_item, &use_item2, MergeBehavior::Crate).zip(Some(use_item2))\n             })?;\n \n         imports = Some((use_item, merged, to_remove));\n     } else {\n         let (merged, to_remove) =\n             next_prev().filter_map(|dir| neighbor(&tree, dir)).find_map(|use_tree| {\n-                try_merge_trees(&tree, &use_tree, MergeBehavior::Full).zip(Some(use_tree))\n+                try_merge_trees(&tree, &use_tree, MergeBehavior::Crate).zip(Some(use_tree))\n             })?;\n \n         uses = Some((tree.clone(), merged, to_remove))"}, {"sha": "0d3969c36d87685e12e4dffa71255aa4858c2cc9", "filename": "crates/ide_assists/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a8d47e7f05545de335107262ceca2ef1742888f/crates%2Fide_assists%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a8d47e7f05545de335107262ceca2ef1742888f/crates%2Fide_assists%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests.rs?ref=6a8d47e7f05545de335107262ceca2ef1742888f", "patch": "@@ -21,7 +21,7 @@ pub(crate) const TEST_CONFIG: AssistConfig = AssistConfig {\n     snippet_cap: SnippetCap::new(true),\n     allowed: None,\n     insert_use: InsertUseConfig {\n-        merge: Some(MergeBehavior::Full),\n+        merge: Some(MergeBehavior::Crate),\n         prefix_kind: hir::PrefixKind::Plain,\n         group: true,\n     },"}, {"sha": "939fb2d470051d9c1c3a3112d873ff70441a48bd", "filename": "crates/ide_completion/src/test_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a8d47e7f05545de335107262ceca2ef1742888f/crates%2Fide_completion%2Fsrc%2Ftest_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a8d47e7f05545de335107262ceca2ef1742888f/crates%2Fide_completion%2Fsrc%2Ftest_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftest_utils.rs?ref=6a8d47e7f05545de335107262ceca2ef1742888f", "patch": "@@ -20,7 +20,7 @@ pub(crate) const TEST_CONFIG: CompletionConfig = CompletionConfig {\n     add_call_argument_snippets: true,\n     snippet_cap: SnippetCap::new(true),\n     insert_use: InsertUseConfig {\n-        merge: Some(MergeBehavior::Full),\n+        merge: Some(MergeBehavior::Crate),\n         prefix_kind: PrefixKind::Plain,\n         group: true,\n     },"}, {"sha": "248227d2951a8f72e6c45ffc1c685eec73295388", "filename": "crates/ide_db/src/helpers/insert_use/tests.rs", "status": "modified", "additions": 46, "deletions": 38, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/6a8d47e7f05545de335107262ceca2ef1742888f/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a8d47e7f05545de335107262ceca2ef1742888f/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use%2Ftests.rs?ref=6a8d47e7f05545de335107262ceca2ef1742888f", "patch": "@@ -44,7 +44,7 @@ fn insert_not_group_empty() {\n \n #[test]\n fn insert_existing() {\n-    check_full(\"std::fs\", \"use std::fs;\", \"use std::fs;\")\n+    check_crate(\"std::fs\", \"use std::fs;\", \"use std::fs;\")\n }\n \n #[test]\n@@ -249,7 +249,7 @@ use self::fmt;\",\n \n #[test]\n fn insert_no_imports() {\n-    check_full(\n+    check_crate(\n         \"foo::bar\",\n         \"fn main() {}\",\n         r\"use foo::bar;\n@@ -263,7 +263,7 @@ fn insert_empty_file() {\n     cov_mark::check!(insert_group_empty_file);\n     // empty files will get two trailing newlines\n     // this is due to the test case insert_no_imports above\n-    check_full(\n+    check_crate(\n         \"foo::bar\",\n         \"\",\n         r\"use foo::bar;\n@@ -290,7 +290,7 @@ fn insert_empty_module() {\n #[test]\n fn insert_after_inner_attr() {\n     cov_mark::check!(insert_group_empty_inner_attr);\n-    check_full(\n+    check_crate(\n         \"foo::bar\",\n         r\"#![allow(unused_imports)]\",\n         r\"#![allow(unused_imports)]\n@@ -301,7 +301,7 @@ use foo::bar;\",\n \n #[test]\n fn insert_after_inner_attr2() {\n-    check_full(\n+    check_crate(\n         \"foo::bar\",\n         r\"#![allow(unused_imports)]\n \n@@ -371,12 +371,12 @@ fn main() {}\"#,\n \n #[test]\n fn merge_groups() {\n-    check_last(\"std::io\", r\"use std::fmt;\", r\"use std::{fmt, io};\")\n+    check_module(\"std::io\", r\"use std::fmt;\", r\"use std::{fmt, io};\")\n }\n \n #[test]\n fn merge_groups_last() {\n-    check_last(\n+    check_module(\n         \"std::io\",\n         r\"use std::fmt::{Result, Display};\",\n         r\"use std::fmt::{Result, Display};\n@@ -386,12 +386,12 @@ use std::io;\",\n \n #[test]\n fn merge_last_into_self() {\n-    check_last(\"foo::bar::baz\", r\"use foo::bar;\", r\"use foo::bar::{self, baz};\");\n+    check_module(\"foo::bar::baz\", r\"use foo::bar;\", r\"use foo::bar::{self, baz};\");\n }\n \n #[test]\n fn merge_groups_full() {\n-    check_full(\n+    check_crate(\n         \"std::io\",\n         r\"use std::fmt::{Result, Display};\",\n         r\"use std::{fmt::{Result, Display}, io};\",\n@@ -400,17 +400,21 @@ fn merge_groups_full() {\n \n #[test]\n fn merge_groups_long_full() {\n-    check_full(\"std::foo::bar::Baz\", r\"use std::foo::bar::Qux;\", r\"use std::foo::bar::{Baz, Qux};\")\n+    check_crate(\"std::foo::bar::Baz\", r\"use std::foo::bar::Qux;\", r\"use std::foo::bar::{Baz, Qux};\")\n }\n \n #[test]\n fn merge_groups_long_last() {\n-    check_last(\"std::foo::bar::Baz\", r\"use std::foo::bar::Qux;\", r\"use std::foo::bar::{Baz, Qux};\")\n+    check_module(\n+        \"std::foo::bar::Baz\",\n+        r\"use std::foo::bar::Qux;\",\n+        r\"use std::foo::bar::{Baz, Qux};\",\n+    )\n }\n \n #[test]\n fn merge_groups_long_full_list() {\n-    check_full(\n+    check_crate(\n         \"std::foo::bar::Baz\",\n         r\"use std::foo::bar::{Qux, Quux};\",\n         r\"use std::foo::bar::{Baz, Quux, Qux};\",\n@@ -419,7 +423,7 @@ fn merge_groups_long_full_list() {\n \n #[test]\n fn merge_groups_long_last_list() {\n-    check_last(\n+    check_module(\n         \"std::foo::bar::Baz\",\n         r\"use std::foo::bar::{Qux, Quux};\",\n         r\"use std::foo::bar::{Baz, Quux, Qux};\",\n@@ -428,7 +432,7 @@ fn merge_groups_long_last_list() {\n \n #[test]\n fn merge_groups_long_full_nested() {\n-    check_full(\n+    check_crate(\n         \"std::foo::bar::Baz\",\n         r\"use std::foo::bar::{Qux, quux::{Fez, Fizz}};\",\n         r\"use std::foo::bar::{Baz, Qux, quux::{Fez, Fizz}};\",\n@@ -437,7 +441,7 @@ fn merge_groups_long_full_nested() {\n \n #[test]\n fn merge_groups_long_last_nested() {\n-    check_last(\n+    check_module(\n         \"std::foo::bar::Baz\",\n         r\"use std::foo::bar::{Qux, quux::{Fez, Fizz}};\",\n         r\"use std::foo::bar::Baz;\n@@ -447,7 +451,7 @@ use std::foo::bar::{Qux, quux::{Fez, Fizz}};\",\n \n #[test]\n fn merge_groups_full_nested_deep() {\n-    check_full(\n+    check_crate(\n         \"std::foo::bar::quux::Baz\",\n         r\"use std::foo::bar::{Qux, quux::{Fez, Fizz}};\",\n         r\"use std::foo::bar::{Qux, quux::{Baz, Fez, Fizz}};\",\n@@ -456,7 +460,7 @@ fn merge_groups_full_nested_deep() {\n \n #[test]\n fn merge_groups_full_nested_long() {\n-    check_full(\n+    check_crate(\n         \"std::foo::bar::Baz\",\n         r\"use std::{foo::bar::Qux};\",\n         r\"use std::{foo::bar::{Baz, Qux}};\",\n@@ -465,7 +469,7 @@ fn merge_groups_full_nested_long() {\n \n #[test]\n fn merge_groups_last_nested_long() {\n-    check_full(\n+    check_crate(\n         \"std::foo::bar::Baz\",\n         r\"use std::{foo::bar::Qux};\",\n         r\"use std::{foo::bar::{Baz, Qux}};\",\n@@ -474,7 +478,7 @@ fn merge_groups_last_nested_long() {\n \n #[test]\n fn merge_groups_skip_pub() {\n-    check_full(\n+    check_crate(\n         \"std::io\",\n         r\"pub use std::fmt::{Result, Display};\",\n         r\"pub use std::fmt::{Result, Display};\n@@ -484,7 +488,7 @@ use std::io;\",\n \n #[test]\n fn merge_groups_skip_pub_crate() {\n-    check_full(\n+    check_crate(\n         \"std::io\",\n         r\"pub(crate) use std::fmt::{Result, Display};\",\n         r\"pub(crate) use std::fmt::{Result, Display};\n@@ -494,7 +498,7 @@ use std::io;\",\n \n #[test]\n fn merge_groups_skip_attributed() {\n-    check_full(\n+    check_crate(\n         \"std::io\",\n         r#\"\n #[cfg(feature = \"gated\")] use std::fmt::{Result, Display};\n@@ -509,7 +513,7 @@ use std::io;\n #[test]\n #[ignore] // FIXME: Support this\n fn split_out_merge() {\n-    check_last(\n+    check_module(\n         \"std::fmt::Result\",\n         r\"use std::{fmt, io};\",\n         r\"use std::fmt::{self, Result};\n@@ -519,29 +523,33 @@ use std::io;\",\n \n #[test]\n fn merge_into_module_import() {\n-    check_full(\"std::fmt::Result\", r\"use std::{fmt, io};\", r\"use std::{fmt::{self, Result}, io};\")\n+    check_crate(\"std::fmt::Result\", r\"use std::{fmt, io};\", r\"use std::{fmt::{self, Result}, io};\")\n }\n \n #[test]\n fn merge_groups_self() {\n-    check_full(\"std::fmt::Debug\", r\"use std::fmt;\", r\"use std::fmt::{self, Debug};\")\n+    check_crate(\"std::fmt::Debug\", r\"use std::fmt;\", r\"use std::fmt::{self, Debug};\")\n }\n \n #[test]\n fn merge_mod_into_glob() {\n-    check_full(\"token::TokenKind\", r\"use token::TokenKind::*;\", r\"use token::TokenKind::{*, self};\")\n+    check_crate(\n+        \"token::TokenKind\",\n+        r\"use token::TokenKind::*;\",\n+        r\"use token::TokenKind::{*, self};\",\n+    )\n     // FIXME: have it emit `use token::TokenKind::{self, *}`?\n }\n \n #[test]\n fn merge_self_glob() {\n-    check_full(\"self\", r\"use self::*;\", r\"use self::{*, self};\")\n+    check_crate(\"self\", r\"use self::*;\", r\"use self::{*, self};\")\n     // FIXME: have it emit `use {self, *}`?\n }\n \n #[test]\n fn merge_glob_nested() {\n-    check_full(\n+    check_crate(\n         \"foo::bar::quux::Fez\",\n         r\"use foo::bar::{Baz, quux::*};\",\n         r\"use foo::bar::{Baz, quux::{self::*, Fez}};\",\n@@ -550,7 +558,7 @@ fn merge_glob_nested() {\n \n #[test]\n fn merge_nested_considers_first_segments() {\n-    check_full(\n+    check_crate(\n         \"hir_ty::display::write_bounds_like_dyn_trait\",\n         r\"use hir_ty::{autoderef, display::{HirDisplayError, HirFormatter}, method_resolution};\",\n         r\"use hir_ty::{autoderef, display::{HirDisplayError, HirFormatter, write_bounds_like_dyn_trait}, method_resolution};\",\n@@ -559,7 +567,7 @@ fn merge_nested_considers_first_segments() {\n \n #[test]\n fn skip_merge_last_too_long() {\n-    check_last(\n+    check_module(\n         \"foo::bar\",\n         r\"use foo::bar::baz::Qux;\",\n         r\"use foo::bar;\n@@ -569,7 +577,7 @@ use foo::bar::baz::Qux;\",\n \n #[test]\n fn skip_merge_last_too_long2() {\n-    check_last(\n+    check_module(\n         \"foo::bar::baz::Qux\",\n         r\"use foo::bar;\",\n         r\"use foo::bar;\n@@ -592,7 +600,7 @@ fn merge_last_fail() {\n     check_merge_only_fail(\n         r\"use foo::bar::{baz::{Qux, Fez}};\",\n         r\"use foo::bar::{baaz::{Quux, Feez}};\",\n-        MergeBehavior::Last,\n+        MergeBehavior::Module,\n     );\n }\n \n@@ -601,7 +609,7 @@ fn merge_last_fail1() {\n     check_merge_only_fail(\n         r\"use foo::bar::{baz::{Qux, Fez}};\",\n         r\"use foo::bar::baaz::{Quux, Feez};\",\n-        MergeBehavior::Last,\n+        MergeBehavior::Module,\n     );\n }\n \n@@ -610,7 +618,7 @@ fn merge_last_fail2() {\n     check_merge_only_fail(\n         r\"use foo::bar::baz::{Qux, Fez};\",\n         r\"use foo::bar::{baaz::{Quux, Feez}};\",\n-        MergeBehavior::Last,\n+        MergeBehavior::Module,\n     );\n }\n \n@@ -619,7 +627,7 @@ fn merge_last_fail3() {\n     check_merge_only_fail(\n         r\"use foo::bar::baz::{Qux, Fez};\",\n         r\"use foo::bar::baaz::{Quux, Feez};\",\n-        MergeBehavior::Last,\n+        MergeBehavior::Module,\n     );\n }\n \n@@ -648,12 +656,12 @@ fn check(\n     assert_eq_text!(ra_fixture_after, &result);\n }\n \n-fn check_full(path: &str, ra_fixture_before: &str, ra_fixture_after: &str) {\n-    check(path, ra_fixture_before, ra_fixture_after, Some(MergeBehavior::Full), false, true)\n+fn check_crate(path: &str, ra_fixture_before: &str, ra_fixture_after: &str) {\n+    check(path, ra_fixture_before, ra_fixture_after, Some(MergeBehavior::Crate), false, true)\n }\n \n-fn check_last(path: &str, ra_fixture_before: &str, ra_fixture_after: &str) {\n-    check(path, ra_fixture_before, ra_fixture_after, Some(MergeBehavior::Last), false, true)\n+fn check_module(path: &str, ra_fixture_before: &str, ra_fixture_after: &str) {\n+    check(path, ra_fixture_before, ra_fixture_after, Some(MergeBehavior::Module), false, true)\n }\n \n fn check_none(path: &str, ra_fixture_before: &str, ra_fixture_after: &str) {"}, {"sha": "af2a51a4d71cf6616ca45d0290e22fd4a3a67583", "filename": "crates/ide_db/src/helpers/merge_imports.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6a8d47e7f05545de335107262ceca2ef1742888f/crates%2Fide_db%2Fsrc%2Fhelpers%2Fmerge_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a8d47e7f05545de335107262ceca2ef1742888f/crates%2Fide_db%2Fsrc%2Fhelpers%2Fmerge_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Fmerge_imports.rs?ref=6a8d47e7f05545de335107262ceca2ef1742888f", "patch": "@@ -9,19 +9,19 @@ use syntax::ast::{\n /// What type of merges are allowed.\n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n pub enum MergeBehavior {\n-    /// Merge everything together creating deeply nested imports.\n-    Full,\n-    /// Only merge the last import level, doesn't allow import nesting.\n-    Last,\n+    /// Merge imports from the same crate into a single use statement.\n+    Crate,\n+    /// Merge imports from the same module into a single use statement.\n+    Module,\n }\n \n impl MergeBehavior {\n     #[inline]\n     fn is_tree_allowed(&self, tree: &ast::UseTree) -> bool {\n         match self {\n-            MergeBehavior::Full => true,\n+            MergeBehavior::Crate => true,\n             // only simple single segment paths are allowed\n-            MergeBehavior::Last => {\n+            MergeBehavior::Module => {\n                 tree.use_tree_list().is_none() && tree.path().map(path_len) <= Some(1)\n             }\n         }\n@@ -153,7 +153,7 @@ fn recursive_merge(\n                 }\n             }\n             Err(_)\n-                if merge == MergeBehavior::Last\n+                if merge == MergeBehavior::Module\n                     && use_trees.len() > 0\n                     && rhs_t.use_tree_list().is_some() =>\n             {"}, {"sha": "9773c4a90640cd55f7f940f459ec762f6446ce71", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6a8d47e7f05545de335107262ceca2ef1742888f/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a8d47e7f05545de335107262ceca2ef1742888f/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=6a8d47e7f05545de335107262ceca2ef1742888f", "patch": "@@ -36,7 +36,7 @@ config_data! {\n     struct ConfigData {\n         /// The strategy to use when inserting new imports or merging imports.\n         assist_importMergeBehavior |\n-        assist_importMergeBehaviour: MergeBehaviorDef  = \"\\\"full\\\"\",\n+        assist_importMergeBehaviour: MergeBehaviorDef  = \"\\\"crate\\\"\",\n         /// The path structure for newly inserted paths to use.\n         assist_importPrefix: ImportPrefixDef           = \"\\\"plain\\\"\",\n         /// Group inserted imports by the [following order](https://rust-analyzer.github.io/manual.html#auto-import). Groups are separated by newlines.\n@@ -604,8 +604,8 @@ impl Config {\n         InsertUseConfig {\n             merge: match self.data.assist_importMergeBehavior {\n                 MergeBehaviorDef::None => None,\n-                MergeBehaviorDef::Full => Some(MergeBehavior::Full),\n-                MergeBehaviorDef::Last => Some(MergeBehavior::Last),\n+                MergeBehaviorDef::Crate => Some(MergeBehavior::Crate),\n+                MergeBehaviorDef::Module => Some(MergeBehavior::Module),\n             },\n             prefix_kind: match self.data.assist_importPrefix {\n                 ImportPrefixDef::Plain => PrefixKind::Plain,\n@@ -709,8 +709,10 @@ enum ManifestOrProjectJson {\n #[serde(rename_all = \"snake_case\")]\n enum MergeBehaviorDef {\n     None,\n-    Full,\n-    Last,\n+    #[serde(alias = \"Full\")]\n+    Crate,\n+    #[serde(alias = \"Last\")]\n+    Module,\n }\n \n #[derive(Deserialize, Debug, Clone)]\n@@ -867,11 +869,11 @@ fn field_props(field: &str, ty: &str, doc: &[&str], default: &str) -> serde_json\n         },\n         \"MergeBehaviorDef\" => set! {\n             \"type\": \"string\",\n-            \"enum\": [\"none\", \"full\", \"last\"],\n+            \"enum\": [\"none\", \"crate\", \"module\"],\n             \"enumDescriptions\": [\n-                \"No merging\",\n-                \"Merge all layers of the import trees\",\n-                \"Only merge the last layer of the import trees\"\n+                \"Do not merge imports at all.\",\n+                \"Merge imports from the same crate into a single `use` statement.\",\n+                \"Merge imports from the same module into a single `use` statement.\"\n             ],\n         },\n         \"ImportPrefixDef\" => set! {"}, {"sha": "56de9681c41ff66a7bc3e275911e9dd8c3f39c12", "filename": "crates/rust-analyzer/src/integrated_benchmarks.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a8d47e7f05545de335107262ceca2ef1742888f/crates%2Frust-analyzer%2Fsrc%2Fintegrated_benchmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a8d47e7f05545de335107262ceca2ef1742888f/crates%2Frust-analyzer%2Fsrc%2Fintegrated_benchmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fintegrated_benchmarks.rs?ref=6a8d47e7f05545de335107262ceca2ef1742888f", "patch": "@@ -133,7 +133,7 @@ fn integrated_completion_benchmark() {\n             add_call_argument_snippets: true,\n             snippet_cap: SnippetCap::new(true),\n             insert_use: InsertUseConfig {\n-                merge: Some(MergeBehavior::Full),\n+                merge: Some(MergeBehavior::Crate),\n                 prefix_kind: hir::PrefixKind::ByCrate,\n                 group: true,\n             },\n@@ -166,7 +166,7 @@ fn integrated_completion_benchmark() {\n             add_call_argument_snippets: true,\n             snippet_cap: SnippetCap::new(true),\n             insert_use: InsertUseConfig {\n-                merge: Some(MergeBehavior::Full),\n+                merge: Some(MergeBehavior::Crate),\n                 prefix_kind: hir::PrefixKind::ByCrate,\n                 group: true,\n             },"}, {"sha": "f35d30898f7103f2d9d9d235c6cacee137459391", "filename": "editors/code/package.json", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6a8d47e7f05545de335107262ceca2ef1742888f/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/6a8d47e7f05545de335107262ceca2ef1742888f/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=6a8d47e7f05545de335107262ceca2ef1742888f", "patch": "@@ -382,17 +382,17 @@\n                 \"$generated-start\": false,\n                 \"rust-analyzer.assist.importMergeBehavior\": {\n                     \"markdownDescription\": \"The strategy to use when inserting new imports or merging imports.\",\n-                    \"default\": \"full\",\n+                    \"default\": \"crate\",\n                     \"type\": \"string\",\n                     \"enum\": [\n                         \"none\",\n-                        \"full\",\n-                        \"last\"\n+                        \"crate\",\n+                        \"module\"\n                     ],\n                     \"enumDescriptions\": [\n-                        \"No merging\",\n-                        \"Merge all layers of the import trees\",\n-                        \"Only merge the last layer of the import trees\"\n+                        \"Do not merge imports at all.\",\n+                        \"Merge imports from the same crate into a single `use` statement.\",\n+                        \"Merge imports from the same module into a single `use` statement.\"\n                     ]\n                 },\n                 \"rust-analyzer.assist.importPrefix\": {"}]}