{"sha": "b7df23c3d5a3950ea6432acd71d34cd847a3be89", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3ZGYyM2MzZDVhMzk1MGVhNjQzMmFjZDcxZDM0Y2Q4NDdhM2JlODk=", "commit": {"author": {"name": "Tibo", "email": "delor.thibault@gmail.com", "date": "2018-04-26T03:48:48Z"}, "committer": {"name": "Tibo", "email": "delor.thibault@gmail.com", "date": "2018-04-26T03:48:48Z"}, "message": "Replace completely std::error with failure crate", "tree": {"sha": "b529bd2a741dce5af1dd0e71997da5cbb25771a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b529bd2a741dce5af1dd0e71997da5cbb25771a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7df23c3d5a3950ea6432acd71d34cd847a3be89", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEEmVxnM0/G1oDSm5ipxT9CfVmUEWwFAlrhTCAACgkQxT9CfVmU\nEWwZrgf/Se89P9BuR+SYBGkkD8barlILkY/Yh9D2kHCQR/ZSv1qjunnr5yTMOUiu\njXiwWxOmGfNtAbajtQd/PBVcKazgLU67TvEj2WPF0BxTl9+rO2prVJgfEWX82y4p\nn+VQarZP67LBPevNeifB73FNswj3GXYe9LXkhDA+4JjW+jjHkccmZNjDlN93qocN\nJWJn3cJ03qDCG3qlwF8wUwcoNGpn/VtHr1QBzijfS6mZnQc+SzX9UumwQiw8HiCO\nKnZUigRCZw5ibLCvbqJMKJv+pUJBsVPaTkvytlj8cIDzVDW8gOrm4Z90EUD6BSap\nYiniYSekIAj9tHo+bJXE1dgE38b90Q==\n=Sq0g\n-----END PGP SIGNATURE-----", "payload": "tree b529bd2a741dce5af1dd0e71997da5cbb25771a3\nparent 5581be26162fb34275538a7c4660b5f4e69a5d2a\nauthor Tibo <delor.thibault@gmail.com> 1524714528 +1000\ncommitter Tibo <delor.thibault@gmail.com> 1524714528 +1000\n\nReplace completely std::error with failure crate\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7df23c3d5a3950ea6432acd71d34cd847a3be89", "html_url": "https://github.com/rust-lang/rust/commit/b7df23c3d5a3950ea6432acd71d34cd847a3be89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7df23c3d5a3950ea6432acd71d34cd847a3be89/comments", "author": {"login": "t-botz", "id": 693797, "node_id": "MDQ6VXNlcjY5Mzc5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/693797?v=4", "gravatar_id": "", "url": "https://api.github.com/users/t-botz", "html_url": "https://github.com/t-botz", "followers_url": "https://api.github.com/users/t-botz/followers", "following_url": "https://api.github.com/users/t-botz/following{/other_user}", "gists_url": "https://api.github.com/users/t-botz/gists{/gist_id}", "starred_url": "https://api.github.com/users/t-botz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/t-botz/subscriptions", "organizations_url": "https://api.github.com/users/t-botz/orgs", "repos_url": "https://api.github.com/users/t-botz/repos", "events_url": "https://api.github.com/users/t-botz/events{/privacy}", "received_events_url": "https://api.github.com/users/t-botz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "t-botz", "id": 693797, "node_id": "MDQ6VXNlcjY5Mzc5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/693797?v=4", "gravatar_id": "", "url": "https://api.github.com/users/t-botz", "html_url": "https://github.com/t-botz", "followers_url": "https://api.github.com/users/t-botz/followers", "following_url": "https://api.github.com/users/t-botz/following{/other_user}", "gists_url": "https://api.github.com/users/t-botz/gists{/gist_id}", "starred_url": "https://api.github.com/users/t-botz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/t-botz/subscriptions", "organizations_url": "https://api.github.com/users/t-botz/orgs", "repos_url": "https://api.github.com/users/t-botz/repos", "events_url": "https://api.github.com/users/t-botz/events{/privacy}", "received_events_url": "https://api.github.com/users/t-botz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5581be26162fb34275538a7c4660b5f4e69a5d2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5581be26162fb34275538a7c4660b5f4e69a5d2a", "html_url": "https://github.com/rust-lang/rust/commit/5581be26162fb34275538a7c4660b5f4e69a5d2a"}], "stats": {"total": 64, "additions": 35, "deletions": 29}, "files": [{"sha": "0ddf2f8c3df7fb925a372a85dd5a40bc040dd369", "filename": "src/bin/main.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b7df23c3d5a3950ea6432acd71d34cd847a3be89/src%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7df23c3d5a3950ea6432acd71d34cd847a3be89/src%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmain.rs?ref=b7df23c3d5a3950ea6432acd71d34cd847a3be89", "patch": "@@ -11,6 +11,7 @@\n #![cfg(not(test))]\n \n extern crate env_logger;\n+extern crate failure;\n extern crate getopts;\n extern crate rustfmt_nightly as rustfmt;\n \n@@ -19,6 +20,8 @@ use std::fs::File;\n use std::io::{self, stdout, Read, Write};\n use std::path::PathBuf;\n \n+use failure::err_msg;\n+\n use getopts::{Matches, Options};\n \n use rustfmt::{emit_post_matter, emit_pre_matter, load_config, CliOptions, Config, FmtResult,\n@@ -167,7 +170,7 @@ fn execute(opts: &Options) -> FmtResult<(WriteMode, Summary)> {\n             Ok((WriteMode::None, Summary::default()))\n         }\n         Operation::ConfigOutputDefault { path } => {\n-            let toml = Config::default().all_options().to_toml()?;\n+            let toml = Config::default().all_options().to_toml().map_err(err_msg)?;\n             if let Some(path) = path {\n                 let mut file = File::create(path)?;\n                 file.write_all(toml.as_bytes())?;\n@@ -186,7 +189,9 @@ fn execute(opts: &Options) -> FmtResult<(WriteMode, Summary)> {\n \n             // parse file_lines\n             if let Some(ref file_lines) = matches.opt_str(\"file-lines\") {\n-                config.set().file_lines(file_lines.parse()?);\n+                config\n+                    .set()\n+                    .file_lines(file_lines.parse().map_err(err_msg)?);\n                 for f in config.file_lines().files() {\n                     match *f {\n                         FileName::Custom(ref f) if f == \"stdin\" => {}\n@@ -273,7 +278,7 @@ fn format(\n     // that were used during formatting as TOML.\n     if let Some(path) = minimal_config_path {\n         let mut file = File::create(path)?;\n-        let toml = config.used_options().to_toml()?;\n+        let toml = config.used_options().to_toml().map_err(err_msg)?;\n         file.write_all(toml.as_bytes())?;\n     }\n "}, {"sha": "828dfe8b024f1f81c7bf817d1f764db3864f5611", "filename": "src/config/config_type.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b7df23c3d5a3950ea6432acd71d34cd847a3be89/src%2Fconfig%2Fconfig_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7df23c3d5a3950ea6432acd71d34cd847a3be89/src%2Fconfig%2Fconfig_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fconfig_type.rs?ref=b7df23c3d5a3950ea6432acd71d34cd847a3be89", "patch": "@@ -305,12 +305,12 @@ macro_rules! create_config {\n             ///\n             /// Return a `Config` if the config could be read and parsed from\n             /// the file, Error otherwise.\n-            pub(super) fn from_toml_path(file_path: &Path) -> Result<Config, Error> {\n+            pub(super) fn from_toml_path(file_path: &Path) -> Result<Config, ::failure::Error> {\n                 let mut file = File::open(&file_path)?;\n                 let mut toml = String::new();\n                 file.read_to_string(&mut toml)?;\n                 Config::from_toml(&toml, file_path.parent().unwrap())\n-                    .map_err(|err| Error::new(ErrorKind::InvalidData, err))\n+                    .map_err(::failure::err_msg)\n             }\n \n             /// Resolve the config for input in `dir`.\n@@ -322,12 +322,12 @@ macro_rules! create_config {\n             ///\n             /// Returns the `Config` to use, and the path of the project file if there was\n             /// one.\n-            pub(super) fn from_resolved_toml_path(dir: &Path) -> Result<(Config, Option<PathBuf>), Error> {\n+            pub(super) fn from_resolved_toml_path(dir: &Path) -> Result<(Config, Option<PathBuf>), ::failure::Error> {\n \n                 /// Try to find a project file in the given directory and its parents.\n                 /// Returns the path of a the nearest project file if one exists,\n                 /// or `None` if no project file was found.\n-                fn resolve_project_file(dir: &Path) -> Result<Option<PathBuf>, Error> {\n+                fn resolve_project_file(dir: &Path) -> Result<Option<PathBuf>, ::failure::Error> {\n                     let mut current = if dir.is_relative() {\n                         env::current_dir()?.join(dir)\n                     } else {"}, {"sha": "8c90c556b4d608d7494d08c4c2b01a57ac61ca23", "filename": "src/config/mod.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b7df23c3d5a3950ea6432acd71d34cd847a3be89/src%2Fconfig%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7df23c3d5a3950ea6432acd71d34cd847a3be89/src%2Fconfig%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fmod.rs?ref=b7df23c3d5a3950ea6432acd71d34cd847a3be89", "patch": "@@ -12,16 +12,17 @@ use regex::Regex;\n use std::cell::Cell;\n use std::default::Default;\n use std::fs::File;\n-use std::io::{Error, ErrorKind, Read};\n+use std::io::{ErrorKind, Read};\n use std::path::{Path, PathBuf};\n use std::{env, fs};\n \n-use {FmtError, FmtResult};\n+use FmtResult;\n \n use config::config_type::ConfigType;\n use config::file_lines::FileLines;\n pub use config::lists::*;\n pub use config::options::*;\n+use failure::Error;\n \n #[macro_use]\n pub mod config_type;\n@@ -161,11 +162,9 @@ pub fn load_config(\n     };\n \n     let result = if let Some(over_ride) = over_ride {\n-        Config::from_toml_path(over_ride.as_ref())\n-            .map(|p| (p, Some(over_ride.to_owned())))\n-            .map_err(FmtError::from)\n+        Config::from_toml_path(over_ride.as_ref()).map(|p| (p, Some(over_ride.to_owned())))\n     } else if let Some(file_path) = file_path {\n-        Config::from_resolved_toml_path(file_path).map_err(FmtError::from)\n+        Config::from_resolved_toml_path(file_path)\n     } else {\n         Ok((Config::default(), None))\n     };\n@@ -181,7 +180,7 @@ pub fn load_config(\n // Check for the presence of known config file names (`rustfmt.toml, `.rustfmt.toml`) in `dir`\n //\n // Return the path if a config file exists, empty if no file exists, and Error for IO errors\n-fn get_toml_path(dir: &Path) -> Result<Option<PathBuf>, Error> {\n+fn get_toml_path(dir: &Path) -> FmtResult<Option<PathBuf>> {\n     const CONFIG_FILE_NAMES: [&str; 2] = [\".rustfmt.toml\", \"rustfmt.toml\"];\n     for config_file_name in &CONFIG_FILE_NAMES {\n         let config_file = dir.join(config_file_name);\n@@ -193,7 +192,7 @@ fn get_toml_path(dir: &Path) -> Result<Option<PathBuf>, Error> {\n             // find the project file yet, and continue searching.\n             Err(e) => {\n                 if e.kind() != ErrorKind::NotFound {\n-                    return Err(e);\n+                    return Err(Error::from(e));\n                 }\n             }\n             _ => {}\n@@ -204,10 +203,10 @@ fn get_toml_path(dir: &Path) -> Result<Option<PathBuf>, Error> {\n \n fn config_path(options: &CliOptions) -> FmtResult<Option<PathBuf>> {\n     let config_path_not_found = |path: &str| -> FmtResult<Option<PathBuf>> {\n-        Err(FmtError::from(format!(\n+        Err(format_err!(\n             \"Error: unable to find a config file for the given path: `{}`\",\n             path\n-        )))\n+        ))\n     };\n \n     // Read the config_path and convert to parent dir if a file is provided."}, {"sha": "9721815eeeeb7d6e753e1592c83418de32046b51", "filename": "src/config/options.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b7df23c3d5a3950ea6432acd71d34cd847a3be89/src%2Fconfig%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7df23c3d5a3950ea6432acd71d34cd847a3be89/src%2Fconfig%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Foptions.rs?ref=b7df23c3d5a3950ea6432acd71d34cd847a3be89", "patch": "@@ -14,7 +14,9 @@ use config::config_type::ConfigType;\n use config::file_lines::FileLines;\n use config::lists::*;\n use config::Config;\n-use {FmtError, FmtResult, WRITE_MODE_LIST};\n+use {FmtResult, WRITE_MODE_LIST};\n+\n+use failure::err_msg;\n \n use getopts::Matches;\n use std::collections::HashSet;\n@@ -332,8 +334,8 @@ impl CliOptions {\n             .map(|c| c == \"nightly\")\n             .unwrap_or(false);\n         if unstable_features && !rust_nightly {\n-            return Err(FmtError::from(\n-                \"Unstable features are only available on Nightly channel\",\n+            return Err(format_err!(\n+                \"Unstable features are only available on Nightly channel\"\n             ));\n         } else {\n             options.unstable_features = unstable_features;\n@@ -345,22 +347,23 @@ impl CliOptions {\n             if let Ok(write_mode) = WriteMode::from_str(write_mode) {\n                 options.write_mode = Some(write_mode);\n             } else {\n-                return Err(FmtError::from(format!(\n+                return Err(format_err!(\n                     \"Invalid write-mode: {}, expected one of {}\",\n-                    write_mode, WRITE_MODE_LIST\n-                )));\n+                    write_mode,\n+                    WRITE_MODE_LIST\n+                ));\n             }\n         }\n \n         if let Some(ref color) = matches.opt_str(\"color\") {\n             match Color::from_str(color) {\n                 Ok(color) => options.color = Some(color),\n-                _ => return Err(FmtError::from(format!(\"Invalid color: {}\", color))),\n+                _ => return Err(format_err!(\"Invalid color: {}\", color)),\n             }\n         }\n \n         if let Some(ref file_lines) = matches.opt_str(\"file-lines\") {\n-            options.file_lines = file_lines.parse()?;\n+            options.file_lines = file_lines.parse().map_err(err_msg)?;\n         }\n \n         if matches.opt_present(\"skip-children\") {"}, {"sha": "b272402b20f64efcfc6a7ed91139b71cd12ab077", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b7df23c3d5a3950ea6432acd71d34cd847a3be89/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7df23c3d5a3950ea6432acd71d34cd847a3be89/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=b7df23c3d5a3950ea6432acd71d34cd847a3be89", "patch": "@@ -19,6 +19,7 @@\n #[macro_use]\n extern crate derive_new;\n extern crate diff;\n+#[macro_use]\n extern crate failure;\n extern crate getopts;\n extern crate itertools;\n@@ -38,7 +39,6 @@ extern crate toml;\n extern crate unicode_segmentation;\n \n use std::collections::HashMap;\n-use std::error;\n use std::fmt;\n use std::io::{self, stdout, Write};\n use std::panic::{catch_unwind, AssertUnwindSafe};\n@@ -64,8 +64,7 @@ pub use config::options::CliOptions;\n pub use config::summary::Summary;\n pub use config::{file_lines, load_config, Config, WriteMode};\n \n-pub type FmtError = Box<error::Error + Send + Sync>;\n-pub type FmtResult<T> = std::result::Result<T, FmtError>;\n+pub type FmtResult<T> = std::result::Result<T, failure::Error>;\n \n pub const WRITE_MODE_LIST: &str =\n     \"[replace|overwrite|display|plain|diff|coverage|checkstyle|check]\";\n@@ -896,7 +895,7 @@ pub enum Input {\n \n pub fn format_and_emit_report(input: Input, config: &Config) -> FmtResult<Summary> {\n     if !config.version_meets_requirement() {\n-        return Err(FmtError::from(\"Version mismatch\"));\n+        return Err(format_err!(\"Version mismatch\"));\n     }\n     let out = &mut stdout();\n     match format_input(input, config, Some(out)) {"}]}