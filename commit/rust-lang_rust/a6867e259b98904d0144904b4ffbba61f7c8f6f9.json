{"sha": "a6867e259b98904d0144904b4ffbba61f7c8f6f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2ODY3ZTI1OWI5ODkwNGQwMTQ0OTA0YjRmZmJiYTYxZjdjOGY2Zjk=", "commit": {"author": {"name": "Scott Lawrence", "email": "bytbox@gmail.com", "date": "2014-01-28T00:03:32Z"}, "committer": {"name": "Scott Lawrence", "email": "bytbox@gmail.com", "date": "2014-01-29T14:15:42Z"}, "message": "Removing support for the do syntax from libsyntax and librustc.\n\nFixes #10815.", "tree": {"sha": "2ab89dca745fb675f949efaf09467aaec5fe3dec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ab89dca745fb675f949efaf09467aaec5fe3dec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6867e259b98904d0144904b4ffbba61f7c8f6f9", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6867e259b98904d0144904b4ffbba61f7c8f6f9", "html_url": "https://github.com/rust-lang/rust/commit/a6867e259b98904d0144904b4ffbba61f7c8f6f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6867e259b98904d0144904b4ffbba61f7c8f6f9/comments", "author": {"login": "bytbox", "id": 160033, "node_id": "MDQ6VXNlcjE2MDAzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/160033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bytbox", "html_url": "https://github.com/bytbox", "followers_url": "https://api.github.com/users/bytbox/followers", "following_url": "https://api.github.com/users/bytbox/following{/other_user}", "gists_url": "https://api.github.com/users/bytbox/gists{/gist_id}", "starred_url": "https://api.github.com/users/bytbox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bytbox/subscriptions", "organizations_url": "https://api.github.com/users/bytbox/orgs", "repos_url": "https://api.github.com/users/bytbox/repos", "events_url": "https://api.github.com/users/bytbox/events{/privacy}", "received_events_url": "https://api.github.com/users/bytbox/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bytbox", "id": 160033, "node_id": "MDQ6VXNlcjE2MDAzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/160033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bytbox", "html_url": "https://github.com/bytbox", "followers_url": "https://api.github.com/users/bytbox/followers", "following_url": "https://api.github.com/users/bytbox/following{/other_user}", "gists_url": "https://api.github.com/users/bytbox/gists{/gist_id}", "starred_url": "https://api.github.com/users/bytbox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bytbox/subscriptions", "organizations_url": "https://api.github.com/users/bytbox/orgs", "repos_url": "https://api.github.com/users/bytbox/repos", "events_url": "https://api.github.com/users/bytbox/events{/privacy}", "received_events_url": "https://api.github.com/users/bytbox/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "221670b5bc02a9056e3cc278222296f8b3da00de", "url": "https://api.github.com/repos/rust-lang/rust/commits/221670b5bc02a9056e3cc278222296f8b3da00de", "html_url": "https://github.com/rust-lang/rust/commit/221670b5bc02a9056e3cc278222296f8b3da00de"}], "stats": {"total": 260, "additions": 48, "deletions": 212}, "files": [{"sha": "eb9c434ca28497192744ba58383873e14fa39f2c", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a6867e259b98904d0144904b4ffbba61f7c8f6f9/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6867e259b98904d0144904b4ffbba61f7c8f6f9/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=a6867e259b98904d0144904b4ffbba61f7c8f6f9", "patch": "@@ -398,7 +398,6 @@ impl CFGBuilder {\n             }\n \n             ast::ExprAddrOf(_, e) |\n-            ast::ExprDoBody(e) |\n             ast::ExprCast(e, _) |\n             ast::ExprUnary(_, _, e) |\n             ast::ExprParen(e) |"}, {"sha": "164b231fedc7198f5fe833e98158ba6e5a828862", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a6867e259b98904d0144904b4ffbba61f7c8f6f9/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6867e259b98904d0144904b4ffbba61f7c8f6f9/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=a6867e259b98904d0144904b4ffbba61f7c8f6f9", "patch": "@@ -706,7 +706,6 @@ impl<'a, O:DataFlowOperator> PropagationContext<'a, O> {\n             ast::ExprPath(..) => {}\n \n             ast::ExprAddrOf(_, e) |\n-            ast::ExprDoBody(e) |\n             ast::ExprCast(e, _) |\n             ast::ExprUnary(_, _, e) |\n             ast::ExprParen(e) |"}, {"sha": "6a1fa488121bb58ffff60a3ce3934f22de3c6b8c", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a6867e259b98904d0144904b4ffbba61f7c8f6f9/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6867e259b98904d0144904b4ffbba61f7c8f6f9/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=a6867e259b98904d0144904b4ffbba61f7c8f6f9", "patch": "@@ -538,7 +538,7 @@ fn visit_expr(v: &mut LivenessVisitor, expr: &Expr, this: @IrMaps) {\n       ExprIndex(..) | ExprField(..) | ExprVstore(..) | ExprVec(..) |\n       ExprCall(..) | ExprMethodCall(..) | ExprTup(..) | ExprLogLevel |\n       ExprBinary(..) | ExprAddrOf(..) |\n-      ExprDoBody(..) | ExprCast(..) | ExprUnary(..) | ExprBreak(_) |\n+      ExprCast(..) | ExprUnary(..) | ExprBreak(_) |\n       ExprAgain(_) | ExprLit(_) | ExprRet(..) | ExprBlock(..) |\n       ExprAssign(..) | ExprAssignOp(..) | ExprMac(..) |\n       ExprStruct(..) | ExprRepeat(..) | ExprParen(..) |\n@@ -1245,7 +1245,6 @@ impl Liveness {\n           }\n \n           ExprAddrOf(_, e) |\n-          ExprDoBody(e) |\n           ExprCast(e, _) |\n           ExprUnary(_, _, e) |\n           ExprParen(e) => {\n@@ -1529,7 +1528,7 @@ fn check_expr(this: &mut Liveness, expr: &Expr) {\n       ExprCall(..) | ExprMethodCall(..) | ExprIf(..) | ExprMatch(..) |\n       ExprWhile(..) | ExprLoop(..) | ExprIndex(..) | ExprField(..) |\n       ExprVstore(..) | ExprVec(..) | ExprTup(..) | ExprLogLevel |\n-      ExprBinary(..) | ExprDoBody(..) |\n+      ExprBinary(..) |\n       ExprCast(..) | ExprUnary(..) | ExprRet(..) | ExprBreak(..) |\n       ExprAgain(..) | ExprLit(_) | ExprBlock(..) |\n       ExprMac(..) | ExprAddrOf(..) | ExprStruct(..) | ExprRepeat(..) |"}, {"sha": "fadcd516e4ba8dff1ceaa76a8e856058f32979e0", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6867e259b98904d0144904b4ffbba61f7c8f6f9/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6867e259b98904d0144904b4ffbba61f7c8f6f9/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=a6867e259b98904d0144904b4ffbba61f7c8f6f9", "patch": "@@ -436,7 +436,7 @@ impl mem_categorization_ctxt {\n           ast::ExprAddrOf(..) | ast::ExprCall(..) |\n           ast::ExprAssign(..) | ast::ExprAssignOp(..) |\n           ast::ExprFnBlock(..) | ast::ExprProc(..) | ast::ExprRet(..) |\n-          ast::ExprDoBody(..) | ast::ExprUnary(..) |\n+          ast::ExprUnary(..) |\n           ast::ExprMethodCall(..) | ast::ExprCast(..) | ast::ExprVstore(..) |\n           ast::ExprVec(..) | ast::ExprTup(..) | ast::ExprIf(..) |\n           ast::ExprLogLevel | ast::ExprBinary(..) | ast::ExprWhile(..) |"}, {"sha": "b0171eafeb3fa1c041c9a0ed0f41f9493d93e88a", "filename": "src/librustc/middle/moves.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6867e259b98904d0144904b4ffbba61f7c8f6f9/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6867e259b98904d0144904b4ffbba61f7c8f6f9/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmoves.rs?ref=a6867e259b98904d0144904b4ffbba61f7c8f6f9", "patch": "@@ -570,10 +570,6 @@ impl VisitContext {\n                 self.consume_expr(count);\n             }\n \n-            ExprDoBody(base) => {\n-                self.use_expr(base, comp_mode);\n-            }\n-\n             ExprFnBlock(ref decl, body) |\n             ExprProc(ref decl, body) => {\n                 for a in decl.inputs.iter() {"}, {"sha": "b9877d327cb1a423bf7c1f565bfef6c2342ca219", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a6867e259b98904d0144904b4ffbba61f7c8f6f9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6867e259b98904d0144904b4ffbba61f7c8f6f9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=a6867e259b98904d0144904b4ffbba61f7c8f6f9", "patch": "@@ -2655,20 +2655,6 @@ fn populate_scope_map(cx: &CrateContext,\n                 })\n             }\n \n-            ast::ExprDoBody(inner_exp) => {\n-                let inner_expr_is_expr_fn_block = match *inner_exp {\n-                    ast::Expr { node: ast::ExprFnBlock(..), .. } => true,\n-                    _ => false\n-                };\n-\n-                if !inner_expr_is_expr_fn_block {\n-                    cx.sess.span_bug(inner_exp.span, \"debuginfo: Inner expression was expected \\\n-                                                      to be an ast::expr_fn_block.\");\n-                }\n-\n-                walk_expr(cx, inner_exp, scope_stack, scope_map);\n-            }\n-\n             ast::ExprCall(fn_exp, ref args, _) => {\n                 walk_expr(cx, fn_exp, scope_stack, scope_map);\n "}, {"sha": "d0a01f56b530c4ac084e726925fcd3accc42d019", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a6867e259b98904d0144904b4ffbba61f7c8f6f9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6867e259b98904d0144904b4ffbba61f7c8f6f9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=a6867e259b98904d0144904b4ffbba61f7c8f6f9", "patch": "@@ -867,9 +867,6 @@ fn trans_rvalue_dps_unadjusted<'a>(bcx: &'a Block<'a>,\n             closure::trans_expr_fn(bcx, sigil, decl, body,\n                                    expr.id, expr.id, dest)\n         }\n-        ast::ExprDoBody(blk) => {\n-            trans_into(bcx, blk, dest)\n-        }\n         ast::ExprCall(f, ref args, _) => {\n             callee::trans_call(bcx, expr, f,\n                                callee::ArgExprs(*args), expr.id, dest)"}, {"sha": "469df730a1290ec66ef5fc7a986225ebe49618b5", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a6867e259b98904d0144904b4ffbba61f7c8f6f9/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6867e259b98904d0144904b4ffbba61f7c8f6f9/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=a6867e259b98904d0144904b4ffbba61f7c8f6f9", "patch": "@@ -3166,7 +3166,6 @@ pub fn expr_kind(tcx: ctxt,\n         ast::ExprMatch(..) |\n         ast::ExprFnBlock(..) |\n         ast::ExprProc(..) |\n-        ast::ExprDoBody(..) |\n         ast::ExprBlock(..) |\n         ast::ExprRepeat(..) |\n         ast::ExprVstore(_, ast::ExprVstoreSlice) |"}, {"sha": "fe9998786f35fd586d206f89191a4c6cebd8c152", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 42, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/a6867e259b98904d0144904b4ffbba61f7c8f6f9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6867e259b98904d0144904b4ffbba61f7c8f6f9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=a6867e259b98904d0144904b4ffbba61f7c8f6f9", "patch": "@@ -1640,8 +1640,6 @@ pub fn check_expr_with_unifier(fcx: @FnCtxt,\n         } else {\n             let suffix = match sugar {\n                 ast::NoSugar => \"\",\n-                ast::DoSugar => \" (including the closure passed by \\\n-                                 the `do` keyword)\",\n                 ast::ForSugar => \" (including the closure passed by \\\n                                   the `for` keyword)\"\n             };\n@@ -1690,8 +1688,7 @@ pub fn check_expr_with_unifier(fcx: @FnCtxt,\n             for (i, arg) in args.iter().take(t).enumerate() {\n                 let is_block = match arg.node {\n                     ast::ExprFnBlock(..) |\n-                    ast::ExprProc(..) |\n-                    ast::ExprDoBody(..) => true,\n+                    ast::ExprProc(..) => true,\n                     _ => false\n                 };\n \n@@ -2928,44 +2925,6 @@ pub fn check_expr_with_unifier(fcx: @FnCtxt,\n                       Vanilla,\n                       expected);\n       }\n-      ast::ExprDoBody(b) => {\n-        let expected_sty = unpack_expected(fcx,\n-                                           expected,\n-                                           |x| Some((*x).clone()));\n-        let inner_ty = match expected_sty {\n-            Some(ty::ty_closure(ref closure_ty))\n-                    if closure_ty.sigil == ast::OwnedSigil => {\n-                expected.unwrap()\n-            }\n-            _ => match expected {\n-                Some(expected_t) => {\n-                    fcx.type_error_message(expr.span, |actual| {\n-                        format!(\"last argument in `do` call \\\n-                              has non-procedure type: {}\",\n-                             actual)\n-                    }, expected_t, None);\n-                    let err_ty = ty::mk_err();\n-                    fcx.write_ty(id, err_ty);\n-                    err_ty\n-                }\n-                None => {\n-                    fcx.tcx().sess.impossible_case(\n-                        expr.span,\n-                        \"do body must have expected type\")\n-                }\n-            }\n-        };\n-        match b.node {\n-          ast::ExprFnBlock(decl, body) => {\n-            check_expr_fn(fcx, b, None,\n-                          decl, body, DoBlock, Some(inner_ty));\n-            demand::suptype(fcx, b.span, inner_ty, fcx.expr_ty(b));\n-          }\n-          // argh\n-          _ => fail!(\"expected fn ty\")\n-        }\n-        fcx.write_ty(expr.id, fcx.node_ty(b.id));\n-      }\n       ast::ExprBlock(b) => {\n         check_block_with_expected(fcx, b, expected);\n         fcx.write_ty(id, fcx.node_ty(b.id));"}, {"sha": "f134fb3b6ae85d842d87d54ef10500a26aada8f2", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a6867e259b98904d0144904b4ffbba61f7c8f6f9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6867e259b98904d0144904b4ffbba61f7c8f6f9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=a6867e259b98904d0144904b4ffbba61f7c8f6f9", "patch": "@@ -1045,7 +1045,6 @@ pub mod guarantor {\n             ast::ExprMatch(..) |\n             ast::ExprFnBlock(..) |\n             ast::ExprProc(..) |\n-            ast::ExprDoBody(..) |\n             ast::ExprBlock(..) |\n             ast::ExprRepeat(..) |\n             ast::ExprVec(..) => {"}, {"sha": "3070ecde71e6be7e3f8591577faac41c0564306c", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6867e259b98904d0144904b4ffbba61f7c8f6f9/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6867e259b98904d0144904b4ffbba61f7c8f6f9/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=a6867e259b98904d0144904b4ffbba61f7c8f6f9", "patch": "@@ -539,7 +539,6 @@ impl Expr {\n #[deriving(Clone, Eq, Encodable, Decodable, IterBytes)]\n pub enum CallSugar {\n     NoSugar,\n-    DoSugar,\n     ForSugar\n }\n \n@@ -566,7 +565,6 @@ pub enum Expr_ {\n     ExprMatch(@Expr, ~[Arm]),\n     ExprFnBlock(P<FnDecl>, P<Block>),\n     ExprProc(P<FnDecl>, P<Block>),\n-    ExprDoBody(@Expr),\n     ExprBlock(P<Block>),\n \n     ExprAssign(@Expr, @Expr),"}, {"sha": "d02f6384990a95e6d0334c398c2484c7573cbda4", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a6867e259b98904d0144904b4ffbba61f7c8f6f9/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6867e259b98904d0144904b4ffbba61f7c8f6f9/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=a6867e259b98904d0144904b4ffbba61f7c8f6f9", "patch": "@@ -752,7 +752,6 @@ pub fn noop_fold_expr<T: Folder>(e: @Expr, folder: &mut T) -> @Expr {\n         ExprUnary(callee_id, binop, ohs) => {\n             ExprUnary(folder.new_id(callee_id), binop, folder.fold_expr(ohs))\n         }\n-        ExprDoBody(f) => ExprDoBody(folder.fold_expr(f)),\n         ExprLit(_) => e.node.clone(),\n         ExprCast(expr, ty) => {\n             ExprCast(folder.fold_expr(expr), folder.fold_ty(ty))"}, {"sha": "accf5e735404504f01ee4104e65e9e1fc4763dc0", "filename": "src/libsyntax/parse/classify.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6867e259b98904d0144904b4ffbba61f7c8f6f9/src%2Flibsyntax%2Fparse%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6867e259b98904d0144904b4ffbba61f7c8f6f9/src%2Flibsyntax%2Fparse%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fclassify.rs?ref=a6867e259b98904d0144904b4ffbba61f7c8f6f9", "patch": "@@ -29,9 +29,7 @@ pub fn expr_requires_semi_to_be_stmt(e: @ast::Expr) -> bool {\n       | ast::ExprWhile(..)\n       | ast::ExprLoop(..)\n       | ast::ExprForLoop(..)\n-      | ast::ExprCall(_, _, ast::DoSugar)\n       | ast::ExprCall(_, _, ast::ForSugar)\n-      | ast::ExprMethodCall(_, _, _, _, ast::DoSugar)\n       | ast::ExprMethodCall(_, _, _, _, ast::ForSugar) => false,\n       _ => true\n     }"}, {"sha": "b4de4dabfc6d0495d19e1ab52e45c2f2f7a281a4", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 74, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/a6867e259b98904d0144904b4ffbba61f7c8f6f9/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6867e259b98904d0144904b4ffbba61f7c8f6f9/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=a6867e259b98904d0144904b4ffbba61f7c8f6f9", "patch": "@@ -13,7 +13,7 @@\n use abi;\n use abi::AbiSet;\n use ast::{Sigil, BorrowedSigil, ManagedSigil, OwnedSigil};\n-use ast::{CallSugar, NoSugar, DoSugar};\n+use ast::{CallSugar, NoSugar};\n use ast::{BareFnTy, ClosureTy};\n use ast::{RegionTyParamBound, TraitTyParamBound};\n use ast::{Provided, Public, Purity};\n@@ -24,7 +24,7 @@ use ast::{Crate, CrateConfig, Decl, DeclItem};\n use ast::{DeclLocal, DefaultBlock, UnDeref, BiDiv, EMPTY_CTXT, EnumDef, ExplicitSelf};\n use ast::{Expr, Expr_, ExprAddrOf, ExprMatch, ExprAgain};\n use ast::{ExprAssign, ExprAssignOp, ExprBinary, ExprBlock, ExprBox};\n-use ast::{ExprBreak, ExprCall, ExprCast, ExprDoBody};\n+use ast::{ExprBreak, ExprCall, ExprCast};\n use ast::{ExprField, ExprFnBlock, ExprIf, ExprIndex};\n use ast::{ExprLit, ExprLogLevel, ExprLoop, ExprMac};\n use ast::{ExprMethodCall, ExprParen, ExprPath, ExprProc};\n@@ -1796,9 +1796,6 @@ impl Parser {\n             return self.parse_if_expr();\n         } else if self.eat_keyword(keywords::For) {\n             return self.parse_for_expr(None);\n-        } else if self.eat_keyword(keywords::Do) {\n-            return self.parse_sugary_call_expr(lo, ~\"do\", DoSugar,\n-                                               ExprDoBody);\n         } else if self.eat_keyword(keywords::While) {\n             return self.parse_while_expr();\n         } else if Parser::token_is_lifetime(&self.token) {\n@@ -2541,75 +2538,6 @@ impl Parser {\n         self.mk_expr(lo, hi, ExprForLoop(pat, expr, loop_block, opt_ident))\n     }\n \n-\n-    // parse a 'do'.\n-    // the 'do' expression parses as a call, but looks like\n-    // a function call followed by a closure expression.\n-    pub fn parse_sugary_call_expr(&mut self,\n-                                  lo: BytePos,\n-                                  keyword: ~str,\n-                                  sugar: CallSugar,\n-                                  ctor: |v: @Expr| -> Expr_)\n-                                  -> @Expr {\n-        // Parse the callee `foo` in\n-        //    do foo || {\n-        //    do foo.bar || {\n-        // etc, or the portion of the call expression before the lambda in\n-        //    do foo() || {\n-        // or\n-        //    do foo.bar(a) || {\n-        // Turn on the restriction to stop at | or || so we can parse\n-        // them as the lambda arguments\n-        let e = self.parse_expr_res(RESTRICT_NO_BAR_OR_DOUBLEBAR_OP);\n-        match e.node {\n-            ExprCall(f, ref args, NoSugar) => {\n-                let block = self.parse_lambda_block_expr();\n-                let last_arg = self.mk_expr(block.span.lo, block.span.hi,\n-                                            ctor(block));\n-                let args = vec::append_one((*args).clone(), last_arg);\n-                self.mk_expr(lo, block.span.hi, ExprCall(f, args, sugar))\n-            }\n-            ExprMethodCall(_, i, ref tps, ref args, NoSugar) => {\n-                let block = self.parse_lambda_block_expr();\n-                let last_arg = self.mk_expr(block.span.lo, block.span.hi,\n-                                            ctor(block));\n-                let args = vec::append_one((*args).clone(), last_arg);\n-                let method_call = self.mk_method_call(i,\n-                                                      (*tps).clone(),\n-                                                      args,\n-                                                      sugar);\n-                self.mk_expr(lo, block.span.hi, method_call)\n-            }\n-            ExprField(f, i, ref tps) => {\n-                let block = self.parse_lambda_block_expr();\n-                let last_arg = self.mk_expr(block.span.lo, block.span.hi,\n-                                            ctor(block));\n-                let method_call = self.mk_method_call(i,\n-                                                      (*tps).clone(),\n-                                                      ~[f, last_arg],\n-                                                      sugar);\n-                self.mk_expr(lo, block.span.hi, method_call)\n-            }\n-            ExprPath(..) | ExprCall(..) | ExprMethodCall(..) |\n-                ExprParen(..) => {\n-                let block = self.parse_lambda_block_expr();\n-                let last_arg = self.mk_expr(block.span.lo, block.span.hi,\n-                                            ctor(block));\n-                let call = self.mk_call(e, ~[last_arg], sugar);\n-                self.mk_expr(lo, last_arg.span.hi, call)\n-            }\n-            _ => {\n-                // There may be other types of expressions that can\n-                // represent the callee in `do` expressions\n-                // but they aren't represented by tests\n-                debug!(\"sugary call on {:?}\", e.node);\n-                self.span_fatal(\n-                    e.span,\n-                    format!(\"`{}` must be followed by a block call\", keyword));\n-            }\n-        }\n-    }\n-\n     pub fn parse_while_expr(&mut self) -> @Expr {\n         let lo = self.last_span.lo;\n         let cond = self.parse_expr();"}, {"sha": "68e2f44ebb18482a302609e6bd24e668604b75a4", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 39, "deletions": 40, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/a6867e259b98904d0144904b4ffbba61f7c8f6f9/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6867e259b98904d0144904b4ffbba61f7c8f6f9/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=a6867e259b98904d0144904b4ffbba61f7c8f6f9", "patch": "@@ -433,51 +433,50 @@ declare_special_idents_and_keywords! {\n         (14,                         As,         \"as\");\n         (15,                         Break,      \"break\");\n         (16,                         Const,      \"const\");\n-        (17,                         Do,         \"do\");\n-        (18,                         Else,       \"else\");\n-        (19,                         Enum,       \"enum\");\n-        (20,                         Extern,     \"extern\");\n-        (21,                         False,      \"false\");\n-        (22,                         Fn,         \"fn\");\n-        (23,                         For,        \"for\");\n-        (24,                         If,         \"if\");\n-        (25,                         Impl,       \"impl\");\n-        (26,                         In,         \"in\");\n-        (27,                         Let,        \"let\");\n-        (28,                         __LogLevel, \"__log_level\");\n-        (29,                         Loop,       \"loop\");\n-        (30,                         Match,      \"match\");\n-        (31,                         Mod,        \"mod\");\n-        (32,                         Mut,        \"mut\");\n-        (33,                         Once,       \"once\");\n-        (34,                         Priv,       \"priv\");\n-        (35,                         Pub,        \"pub\");\n-        (36,                         Ref,        \"ref\");\n-        (37,                         Return,     \"return\");\n+        (17,                         Else,       \"else\");\n+        (18,                         Enum,       \"enum\");\n+        (19,                         Extern,     \"extern\");\n+        (20,                         False,      \"false\");\n+        (21,                         Fn,         \"fn\");\n+        (22,                         For,        \"for\");\n+        (23,                         If,         \"if\");\n+        (24,                         Impl,       \"impl\");\n+        (25,                         In,         \"in\");\n+        (26,                         Let,        \"let\");\n+        (27,                         __LogLevel, \"__log_level\");\n+        (28,                         Loop,       \"loop\");\n+        (29,                         Match,      \"match\");\n+        (30,                         Mod,        \"mod\");\n+        (31,                         Mut,        \"mut\");\n+        (32,                         Once,       \"once\");\n+        (33,                         Priv,       \"priv\");\n+        (34,                         Pub,        \"pub\");\n+        (35,                         Ref,        \"ref\");\n+        (36,                         Return,     \"return\");\n         // Static and Self are also special idents (prefill de-dupes)\n         (super::STATIC_KEYWORD_NAME, Static,     \"static\");\n         (super::SELF_KEYWORD_NAME,   Self,       \"self\");\n-        (38,                         Struct,     \"struct\");\n-        (39,                         Super,      \"super\");\n-        (40,                         True,       \"true\");\n-        (41,                         Trait,      \"trait\");\n-        (42,                         Type,       \"type\");\n-        (43,                         Unsafe,     \"unsafe\");\n-        (44,                         Use,        \"use\");\n-        (45,                         While,      \"while\");\n-        (46,                         Continue,   \"continue\");\n-        (47,                         Proc,       \"proc\");\n-        (48,                         Box,        \"box\");\n+        (37,                         Struct,     \"struct\");\n+        (38,                         Super,      \"super\");\n+        (39,                         True,       \"true\");\n+        (40,                         Trait,      \"trait\");\n+        (41,                         Type,       \"type\");\n+        (42,                         Unsafe,     \"unsafe\");\n+        (43,                         Use,        \"use\");\n+        (44,                         While,      \"while\");\n+        (45,                         Continue,   \"continue\");\n+        (46,                         Proc,       \"proc\");\n+        (47,                         Box,        \"box\");\n \n         'reserved:\n-        (49,                         Alignof,    \"alignof\");\n-        (50,                         Be,         \"be\");\n-        (51,                         Offsetof,   \"offsetof\");\n-        (52,                         Pure,       \"pure\");\n-        (53,                         Sizeof,     \"sizeof\");\n-        (54,                         Typeof,     \"typeof\");\n-        (55,                         Unsized,    \"unsized\");\n-        (56,                         Yield,      \"yield\");\n+        (48,                         Alignof,    \"alignof\");\n+        (49,                         Be,         \"be\");\n+        (50,                         Offsetof,   \"offsetof\");\n+        (51,                         Pure,       \"pure\");\n+        (52,                         Sizeof,     \"sizeof\");\n+        (53,                         Typeof,     \"typeof\");\n+        (54,                         Unsized,    \"unsized\");\n+        (55,                         Yield,      \"yield\");\n     }\n }\n "}, {"sha": "68efdf31e03147da6da6a229a5fa7873dca955f7", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a6867e259b98904d0144904b4ffbba61f7c8f6f9/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6867e259b98904d0144904b4ffbba61f7c8f6f9/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=a6867e259b98904d0144904b4ffbba61f7c8f6f9", "patch": "@@ -1088,10 +1088,6 @@ pub fn print_call_pre(s: &mut State,\n                       base_args: &mut ~[@ast::Expr])\n                    -> Option<@ast::Expr> {\n     match sugar {\n-        ast::DoSugar => {\n-            head(s, \"do\");\n-            Some(base_args.pop().unwrap())\n-        }\n         ast::ForSugar => {\n             head(s, \"for\");\n             Some(base_args.pop().unwrap())\n@@ -1111,19 +1107,8 @@ pub fn print_call_post(s: &mut State,\n     }\n     if sugar != ast::NoSugar {\n         nbsp(s);\n-        match blk.unwrap().node {\n-          // need to handle closures specifically\n-          ast::ExprDoBody(e) => {\n-            end(s); // we close our head box; closure\n-                    // will create it's own.\n-            print_expr(s, e);\n-            end(s); // close outer box, as closures don't\n-          }\n-          _ => {\n-            // not sure if this can happen.\n-            print_expr(s, blk.unwrap());\n-          }\n-        }\n+        // not sure if this can happen\n+        print_expr(s, blk.unwrap());\n     }\n }\n \n@@ -1405,9 +1390,6 @@ pub fn print_expr(s: &mut State, expr: &ast::Expr) {\n         // empty box to satisfy the close.\n         ibox(s, 0);\n       }\n-      ast::ExprDoBody(body) => {\n-        print_expr(s, body);\n-      }\n       ast::ExprBlock(blk) => {\n         // containing cbox, will be closed by print-block at }\n         cbox(s, indent_unit);"}, {"sha": "7201fc3a380520f5f05731dad9b7586717bd631c", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a6867e259b98904d0144904b4ffbba61f7c8f6f9/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6867e259b98904d0144904b4ffbba61f7c8f6f9/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=a6867e259b98904d0144904b4ffbba61f7c8f6f9", "patch": "@@ -665,8 +665,7 @@ pub fn walk_expr<E: Clone, V: Visitor<E>>(visitor: &mut V, expression: &Expr, en\n             visitor.visit_expr(right_expression, env.clone())\n         }\n         ExprAddrOf(_, subexpression) |\n-        ExprUnary(_, _, subexpression) |\n-        ExprDoBody(subexpression) => {\n+        ExprUnary(_, _, subexpression) => {\n             visitor.visit_expr(subexpression, env.clone())\n         }\n         ExprLit(_) => {}"}]}