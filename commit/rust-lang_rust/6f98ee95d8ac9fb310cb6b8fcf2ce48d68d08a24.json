{"sha": "6f98ee95d8ac9fb310cb6b8fcf2ce48d68d08a24", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmOThlZTk1ZDhhYzlmYjMxMGNiNmI4ZmNmMmNlNDhkNjhkMDhhMjQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-05-10T23:04:02Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-05-10T23:39:00Z"}, "message": "ensure lint are issued in a stable order", "tree": {"sha": "a2fbf41cf696ab7e795f37b0a586f45b23348377", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2fbf41cf696ab7e795f37b0a586f45b23348377"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f98ee95d8ac9fb310cb6b8fcf2ce48d68d08a24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f98ee95d8ac9fb310cb6b8fcf2ce48d68d08a24", "html_url": "https://github.com/rust-lang/rust/commit/6f98ee95d8ac9fb310cb6b8fcf2ce48d68d08a24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f98ee95d8ac9fb310cb6b8fcf2ce48d68d08a24/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a9dcaf04f09882e4be5c4487a08bb1db7e61437", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a9dcaf04f09882e4be5c4487a08bb1db7e61437", "html_url": "https://github.com/rust-lang/rust/commit/0a9dcaf04f09882e4be5c4487a08bb1db7e61437"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "8c19a19523275d226692e95be3fa0d1349ed5323", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6f98ee95d8ac9fb310cb6b8fcf2ce48d68d08a24/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f98ee95d8ac9fb310cb6b8fcf2ce48d68d08a24/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=6f98ee95d8ac9fb310cb6b8fcf2ce48d68d08a24", "patch": "@@ -1306,33 +1306,33 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             }\n         };\n \n-        for region in defined_by.values() {\n-            debug!(\n-                \"check_uses_for_lifetimes_defined_by_scope: region = {:?}\",\n-                region\n-            );\n-\n-            let def_id = match region {\n+        let mut def_ids: Vec<_> = defined_by.values()\n+            .flat_map(|region| match region {\n                 Region::EarlyBound(_, def_id, _)\n                 | Region::LateBound(_, def_id, _)\n-                | Region::Free(_, def_id) => def_id,\n+                | Region::Free(_, def_id) => Some(*def_id),\n \n-                Region::LateBoundAnon(..) | Region::Static => continue,\n-            };\n+                Region::LateBoundAnon(..) | Region::Static => None,\n+            })\n+            .collect();\n+\n+        // ensure that we issue lints in a repeatable order\n+        def_ids.sort_by_key(|&def_id| self.tcx.def_path_hash(def_id));\n \n+        for def_id in def_ids {\n             debug!(\n                 \"check_uses_for_lifetimes_defined_by_scope: def_id = {:?}\",\n-                def_id\n+                def_id,\n             );\n \n-            let lifetimeuseset = self.lifetime_uses.remove(def_id);\n+            let lifetimeuseset = self.lifetime_uses.remove(&def_id);\n             debug!(\n                 \"check_uses_for_lifetimes_defined_by_scope: lifetimeuseset = {:?}\",\n                 lifetimeuseset\n             );\n             match lifetimeuseset {\n                 Some(LifetimeUseSet::One(_)) => {\n-                    let node_id = self.tcx.hir.as_local_node_id(*def_id).unwrap();\n+                    let node_id = self.tcx.hir.as_local_node_id(def_id).unwrap();\n                     debug!(\"node id first={:?}\", node_id);\n                     if let hir::map::NodeLifetime(hir_lifetime) = self.tcx.hir.get(node_id) {\n                         let span = hir_lifetime.span;\n@@ -1359,7 +1359,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                     debug!(\"Not one use lifetime\");\n                 }\n                 None => {\n-                    let node_id = self.tcx.hir.as_local_node_id(*def_id).unwrap();\n+                    let node_id = self.tcx.hir.as_local_node_id(def_id).unwrap();\n                     if let hir::map::NodeLifetime(hir_lifetime) = self.tcx.hir.get(node_id) {\n                         let span = hir_lifetime.span;\n                         let id = hir_lifetime.id;"}]}