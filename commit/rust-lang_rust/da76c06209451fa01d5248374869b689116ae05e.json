{"sha": "da76c06209451fa01d5248374869b689116ae05e", "node_id": "C_kwDOAAsO6NoAKGRhNzZjMDYyMDk0NTFmYTAxZDUyNDgzNzQ4NjliNjg5MTE2YWUwNWU", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2021-10-09T03:58:05Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2021-10-09T03:58:05Z"}, "message": "Add `--msrv` option to `new_lint` command", "tree": {"sha": "4a99fa0b2d9baffc0b896f1faad8d15c319c73a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a99fa0b2d9baffc0b896f1faad8d15c319c73a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da76c06209451fa01d5248374869b689116ae05e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da76c06209451fa01d5248374869b689116ae05e", "html_url": "https://github.com/rust-lang/rust/commit/da76c06209451fa01d5248374869b689116ae05e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da76c06209451fa01d5248374869b689116ae05e/comments", "author": null, "committer": null, "parents": [{"sha": "22144c02c2d790c2e3b74dc0363000511284f6d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/22144c02c2d790c2e3b74dc0363000511284f6d8", "html_url": "https://github.com/rust-lang/rust/commit/22144c02c2d790c2e3b74dc0363000511284f6d8"}], "stats": {"total": 114, "additions": 98, "deletions": 16}, "files": [{"sha": "b5c04efce3bc95bca885102df44ed2c612c6e8f1", "filename": "clippy_dev/src/main.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da76c06209451fa01d5248374869b689116ae05e/clippy_dev%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da76c06209451fa01d5248374869b689116ae05e/clippy_dev%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fmain.rs?ref=da76c06209451fa01d5248374869b689116ae05e", "patch": "@@ -28,6 +28,7 @@ fn main() {\n                 matches.value_of(\"pass\"),\n                 matches.value_of(\"name\"),\n                 matches.value_of(\"category\"),\n+                matches.is_present(\"msrv\"),\n             ) {\n                 Ok(_) => update_lints::run(update_lints::UpdateMode::Change),\n                 Err(e) => eprintln!(\"Unable to create lint: {}\", e),\n@@ -147,6 +148,11 @@ fn get_clap_config<'a>() -> ArgMatches<'a> {\n                             \"internal_warn\",\n                         ])\n                         .takes_value(true),\n+                )\n+                .arg(\n+                    Arg::with_name(\"msrv\")\n+                        .long(\"msrv\")\n+                        .help(\"Add MSRV config code to the lint\"),\n                 ),\n         )\n         .subcommand("}, {"sha": "ebbe26c46f7fd9ea63594f55bd53873af77d4ae2", "filename": "clippy_dev/src/new_lint.rs", "status": "modified", "additions": 92, "deletions": 16, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/da76c06209451fa01d5248374869b689116ae05e/clippy_dev%2Fsrc%2Fnew_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da76c06209451fa01d5248374869b689116ae05e/clippy_dev%2Fsrc%2Fnew_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fnew_lint.rs?ref=da76c06209451fa01d5248374869b689116ae05e", "patch": "@@ -32,19 +32,19 @@ impl<T> Context for io::Result<T> {\n /// # Errors\n ///\n /// This function errors out if the files couldn't be created or written to.\n-pub fn create(pass: Option<&str>, lint_name: Option<&str>, category: Option<&str>) -> io::Result<()> {\n+pub fn create(pass: Option<&str>, lint_name: Option<&str>, category: Option<&str>, msrv: bool) -> io::Result<()> {\n     let lint = LintData {\n         pass: pass.expect(\"`pass` argument is validated by clap\"),\n         name: lint_name.expect(\"`name` argument is validated by clap\"),\n         category: category.expect(\"`category` argument is validated by clap\"),\n         project_root: clippy_project_root(),\n     };\n \n-    create_lint(&lint).context(\"Unable to create lint implementation\")?;\n+    create_lint(&lint, msrv).context(\"Unable to create lint implementation\")?;\n     create_test(&lint).context(\"Unable to create a test for the new lint\")\n }\n \n-fn create_lint(lint: &LintData<'_>) -> io::Result<()> {\n+fn create_lint(lint: &LintData<'_>, enable_msrv: bool) -> io::Result<()> {\n     let (pass_type, pass_lifetimes, pass_import, context_import) = match lint.pass {\n         \"early\" => (\"EarlyLintPass\", \"\", \"use rustc_ast::ast::*;\", \"EarlyContext\"),\n         \"late\" => (\"LateLintPass\", \"<'_>\", \"use rustc_hir::*;\", \"LateContext\"),\n@@ -55,13 +55,15 @@ fn create_lint(lint: &LintData<'_>) -> io::Result<()> {\n \n     let camel_case_name = to_camel_case(lint.name);\n     let lint_contents = get_lint_file_contents(\n+        lint.pass,\n         pass_type,\n         pass_lifetimes,\n         lint.name,\n         &camel_case_name,\n         lint.category,\n         pass_import,\n         context_import,\n+        enable_msrv,\n     );\n \n     let lint_path = format!(\"clippy_lints/src/{}.rs\", lint.name);\n@@ -155,20 +157,49 @@ publish = false\n }\n \n fn get_lint_file_contents(\n+    pass_name: &str,\n     pass_type: &str,\n     pass_lifetimes: &str,\n     lint_name: &str,\n     camel_case_name: &str,\n     category: &str,\n     pass_import: &str,\n     context_import: &str,\n+    enable_msrv: bool,\n ) -> String {\n-    format!(\n-        \"use rustc_lint::{{{type}, {context_import}}};\n-use rustc_session::{{declare_lint_pass, declare_tool_lint}};\n+    let mut result = String::new();\n+\n+    let name_camel = camel_case_name;\n+    let name_upper = lint_name.to_uppercase();\n+\n+    result.push_str(&if enable_msrv {\n+        format!(\n+            \"use clippy_utils::msrvs;\n {pass_import}\n+use rustc_lint::{{{context_import}, {pass_type}, LintContext}};\n+use rustc_semver::RustcVersion;\n+use rustc_session::{{declare_tool_lint, impl_lint_pass}};\n+\n+\",\n+            pass_type = pass_type,\n+            pass_import = pass_import,\n+            context_import = context_import,\n+        )\n+    } else {\n+        format!(\n+            \"{pass_import}\n+use rustc_lint::{{{context_import}, {pass_type}}};\n+use rustc_session::{{declare_lint_pass, declare_tool_lint}};\n+\n+\",\n+            pass_import = pass_import,\n+            pass_type = pass_type,\n+            context_import = context_import\n+        )\n+    });\n \n-declare_clippy_lint! {{\n+    result.push_str(&format!(\n+        \"declare_clippy_lint! {{\n     /// ### What it does\n     ///\n     /// ### Why is this bad?\n@@ -184,20 +215,65 @@ declare_clippy_lint! {{\n     pub {name_upper},\n     {category},\n     \\\"default lint description\\\"\n+}}\",\n+        name_upper = name_upper,\n+        category = category,\n+    ));\n+\n+    result.push_str(&if enable_msrv {\n+        format!(\n+            \"\n+pub struct {name_camel} {{\n+    msrv: Option<RustcVersion>,\n+}}\n+\n+impl {name_camel} {{\n+    #[must_use]\n+    pub fn new(msrv: Option<RustcVersion>) -> Self {{\n+        Self {{ msrv }}\n+    }}\n+}}\n+\n+impl_lint_pass!({name_camel} => [{name_upper}]);\n+\n+impl {pass_type}{pass_lifetimes} for {name_camel} {{\n+    extract_msrv_attr!({context_import});\n }}\n \n+// TODO: Register the lint pass in `clippy_lints/src/lib.rs`,\n+//       e.g. store.register_{pass_name}_pass(move || Box::new({module_name}::{name_camel}::new(msrv)));\n+// TODO: Add MSRV level to `clippy_utils/src/msrvs.rs` if needed.\n+// TODO: Add MSRV test to `tests/ui/min_rust_version_attr.rs`.\n+// TODO: Update msrv config comment in `clippy_lints/src/utils/conf.rs`\n+\",\n+            pass_type = pass_type,\n+            pass_lifetimes = pass_lifetimes,\n+            pass_name = pass_name,\n+            name_upper = name_upper,\n+            name_camel = name_camel,\n+            module_name = lint_name,\n+            context_import = context_import,\n+        )\n+    } else {\n+        format!(\n+            \"\n declare_lint_pass!({name_camel} => [{name_upper}]);\n \n-impl {type}{lifetimes} for {name_camel} {{}}\n+impl {pass_type}{pass_lifetimes} for {name_camel} {{}}\n+//\n+// TODO: Register the lint pass in `clippy_lints/src/lib.rs`,\n+//       e.g. store.register_{pass_name}_pass(|| Box::new({module_name}::{name_camel}));\n \",\n-        type=pass_type,\n-        lifetimes=pass_lifetimes,\n-        name_upper=lint_name.to_uppercase(),\n-        name_camel=camel_case_name,\n-        category=category,\n-        pass_import=pass_import,\n-        context_import=context_import\n-    )\n+            pass_type = pass_type,\n+            pass_lifetimes = pass_lifetimes,\n+            pass_name = pass_name,\n+            name_upper = name_upper,\n+            name_camel = name_camel,\n+            module_name = lint_name,\n+        )\n+    });\n+\n+    result\n }\n \n #[test]"}]}