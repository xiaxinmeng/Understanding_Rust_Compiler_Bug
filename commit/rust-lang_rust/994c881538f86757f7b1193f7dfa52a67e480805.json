{"sha": "994c881538f86757f7b1193f7dfa52a67e480805", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5NGM4ODE1MzhmODY3NTdmN2IxMTkzZjdkZmE1MmE2N2U0ODA4MDU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-07-07T22:51:11Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-07-07T22:51:11Z"}, "message": "tutorial: Use blockquotes for asides. Add styling", "tree": {"sha": "7e763830415aa99d3fd7906bc7a52af965e42f6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e763830415aa99d3fd7906bc7a52af965e42f6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/994c881538f86757f7b1193f7dfa52a67e480805", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/994c881538f86757f7b1193f7dfa52a67e480805", "html_url": "https://github.com/rust-lang/rust/commit/994c881538f86757f7b1193f7dfa52a67e480805", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/994c881538f86757f7b1193f7dfa52a67e480805/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3413b3f5c51284d8f0090bde5da80652fa7366ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/3413b3f5c51284d8f0090bde5da80652fa7366ef", "html_url": "https://github.com/rust-lang/rust/commit/3413b3f5c51284d8f0090bde5da80652fa7366ef"}], "stats": {"total": 35, "additions": 21, "deletions": 14}, "files": [{"sha": "d68f0b851c25bd2e1727bb8ab3500d4ea3ff6c85", "filename": "doc/rust.css", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/994c881538f86757f7b1193f7dfa52a67e480805/doc%2Frust.css", "raw_url": "https://github.com/rust-lang/rust/raw/994c881538f86757f7b1193f7dfa52a67e480805/doc%2Frust.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.css?ref=994c881538f86757f7b1193f7dfa52a67e480805", "patch": "@@ -57,3 +57,10 @@ h1.title {\n   background-repeat: no-repeat;\n   background-position: right;\n }\n+\n+blockquote {\n+    color: black;\n+    background-color: lavender;\n+    margin: 1em;\n+    padding: 0.5em 1em 0.5em 1em;\n+}\n\\ No newline at end of file"}, {"sha": "fc0d3fbec2783b69404a5da726d2607b95a988d1", "filename": "doc/tutorial.md", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/994c881538f86757f7b1193f7dfa52a67e480805/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/994c881538f86757f7b1193f7dfa52a67e480805/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=994c881538f86757f7b1193f7dfa52a67e480805", "patch": "@@ -1553,8 +1553,8 @@ let y = x; // Copy the pointer, increase refcount\n // When x and y go out of scope, refcount goes to 0, box is freed\n ~~~~\n \n-***Note:*** We will in the future switch to garbage collection, rather\n-than reference counting, for shared boxes.\n+> ***Note:*** We will in the future switch to garbage collection,\n+> rather than reference counting, for shared boxes.\n \n Shared boxes never cross task boundaries.\n \n@@ -1642,8 +1642,8 @@ Rust vectors are always heap-allocated and unique. A value of type\n `~[T]` is represented by a pointer to a section of heap memory\n containing any number of values of type `T`.\n \n-***Note:*** This uniqueness is turning out to be quite awkward in\n-practice, and might change in the future.\n+> ***Note:*** This uniqueness is turning out to be quite awkward in\n+> practice, and might change in the future.\n \n Vector literals are enclosed in square brackets. Dereferencing is done\n with square brackets (zero-based):\n@@ -1676,10 +1676,10 @@ logarithmically, so the above code generates about the same amount of\n copying and reallocation as `push` implementations in most other\n languages.\n \n-***Note:*** Actually, currently, growing a vector is *exactly* as\n-inefficient as it looks, since vector `+` has been moved to the\n-libraries and Rust's operator overloading support is insufficient to\n-allow this optimization. Try using `vec::push`.\n+> ***Note:*** Actually, currently, growing a vector is *exactly* as\n+> inefficient as it looks, since vector `+` has been moved to the\n+> libraries and Rust's operator overloading support is insufficient to\n+> allow this optimization. Try using `vec::push`.\n \n ## Strings\n \n@@ -1946,8 +1946,8 @@ fn plus1(&&x: int) -> int { x + 1 }\n vec::map(~[1, 2, 3], plus1);\n ~~~~\n \n-***Note:***: This is inconvenient, and we are hoping to get rid of this\n-restriction in the future.\n+> ***Note:*** This is inconvenient, and we are hoping to get rid of\n+> this restriction in the future.\n \n # Modules and crates\n \n@@ -2222,8 +2222,8 @@ object-oriented languages tend to solve with methods and inheritance.\n For example, writing a function that can operate on multiple types of\n collections.\n \n-***Note:***: This feature is very new, and will need a few extensions to be\n-applicable to more advanced use cases.\n+> ***Note:*** This feature is very new, and will need a few extensions to be\n+> applicable to more advanced use cases.\n \n ## Declaration\n \n@@ -2663,8 +2663,8 @@ copying it by making use of [unique boxes](#unique-boxes), which allow\n the sending task to release ownership of a value, so that the\n receiving task can keep on using it.\n \n-***Note:***: As Rust evolves, we expect the task API to grow and change\n-somewhat.  The tutorial documents the API as it exists today.\n+> ***Note:*** As Rust evolves, we expect the task API to grow and\n+> change somewhat.  The tutorial documents the API as it exists today.\n \n ## Spawning a task\n "}]}