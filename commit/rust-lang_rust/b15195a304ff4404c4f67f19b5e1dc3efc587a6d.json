{"sha": "b15195a304ff4404c4f67f19b5e1dc3efc587a6d", "node_id": "C_kwDOAAsO6NoAKGIxNTE5NWEzMDRmZjQ0MDRjNGY2N2YxOWI1ZTFkYzNlZmM1ODdhNmQ", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2023-04-07T02:32:09Z"}, "committer": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2023-04-07T03:08:04Z"}, "message": "Remove u32 on BoundTyKind::Anon", "tree": {"sha": "5f782a038fbfdd76ee172f6bc6cb0baf841b979f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f782a038fbfdd76ee172f6bc6cb0baf841b979f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b15195a304ff4404c4f67f19b5e1dc3efc587a6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b15195a304ff4404c4f67f19b5e1dc3efc587a6d", "html_url": "https://github.com/rust-lang/rust/commit/b15195a304ff4404c4f67f19b5e1dc3efc587a6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b15195a304ff4404c4f67f19b5e1dc3efc587a6d/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0edcc8a6f457cbb27ae4559719cc42a5610378e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0edcc8a6f457cbb27ae4559719cc42a5610378e", "html_url": "https://github.com/rust-lang/rust/commit/f0edcc8a6f457cbb27ae4559719cc42a5610378e"}], "stats": {"total": 40, "additions": 17, "deletions": 23}, "files": [{"sha": "b4f2ad0bb34330b2c6c1b91ea69903145feb7308", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b15195a304ff4404c4f67f19b5e1dc3efc587a6d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b15195a304ff4404c4f67f19b5e1dc3efc587a6d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=b15195a304ff4404c4f67f19b5e1dc3efc587a6d", "patch": "@@ -2139,7 +2139,7 @@ fn replace_param_and_infer_substs_with_placeholder<'tcx>(\n                     universe: ty::UniverseIndex::ROOT,\n                     bound: ty::BoundTy {\n                         var: ty::BoundVar::from_u32(idx),\n-                        kind: ty::BoundTyKind::Anon(idx),\n+                        kind: ty::BoundTyKind::Anon,\n                     },\n                 })\n             } else {"}, {"sha": "203e16bea27fe9ccbe6603f5717dee40f9401352", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b15195a304ff4404c4f67f19b5e1dc3efc587a6d/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b15195a304ff4404c4f67f19b5e1dc3efc587a6d/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=b15195a304ff4404c4f67f19b5e1dc3efc587a6d", "patch": "@@ -389,9 +389,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                 let index = entry.index();\n                 let var = ty::BoundVar::from_usize(index);\n                 let kind = entry\n-                    .or_insert_with(|| {\n-                        ty::BoundVariableKind::Ty(ty::BoundTyKind::Anon(index as u32))\n-                    })\n+                    .or_insert_with(|| ty::BoundVariableKind::Ty(ty::BoundTyKind::Anon))\n                     .expect_ty();\n                 self.tcx.mk_bound(ty::INNERMOST, BoundTy { var, kind })\n             }"}, {"sha": "bc0ccc1ebc3a9e32c954a7430586be8ed38c6f81", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b15195a304ff4404c4f67f19b5e1dc3efc587a6d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b15195a304ff4404c4f67f19b5e1dc3efc587a6d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=b15195a304ff4404c4f67f19b5e1dc3efc587a6d", "patch": "@@ -701,9 +701,7 @@ pub trait PrettyPrinter<'tcx>:\n             ty::Error(_) => p!(\"[type error]\"),\n             ty::Param(ref param_ty) => p!(print(param_ty)),\n             ty::Bound(debruijn, bound_ty) => match bound_ty.kind {\n-                ty::BoundTyKind::Anon(bv) => {\n-                    self.pretty_print_bound_var(debruijn, ty::BoundVar::from_u32(bv))?\n-                }\n+                ty::BoundTyKind::Anon => self.pretty_print_bound_var(debruijn, bound_ty.var)?,\n                 ty::BoundTyKind::Param(_, s) => match self.should_print_verbose() {\n                     true if debruijn == ty::INNERMOST => p!(write(\"^{}\", s)),\n                     true => p!(write(\"^{}_{}\", debruijn.index(), s)),\n@@ -740,7 +738,7 @@ pub trait PrettyPrinter<'tcx>:\n                 }\n             }\n             ty::Placeholder(placeholder) => match placeholder.bound.kind {\n-                ty::BoundTyKind::Anon(_) => p!(write(\"Placeholder({:?})\", placeholder)),\n+                ty::BoundTyKind::Anon => p!(write(\"Placeholder({:?})\", placeholder)),\n                 ty::BoundTyKind::Param(_, name) => p!(write(\"{}\", name)),\n             },\n             ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. }) => {"}, {"sha": "d542d93b8c8199d4de3d0e46cdeac2449c2fc3b4", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b15195a304ff4404c4f67f19b5e1dc3efc587a6d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b15195a304ff4404c4f67f19b5e1dc3efc587a6d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=b15195a304ff4404c4f67f19b5e1dc3efc587a6d", "patch": "@@ -1524,13 +1524,13 @@ pub struct BoundTy {\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]\n #[derive(HashStable)]\n pub enum BoundTyKind {\n-    Anon(u32),\n+    Anon,\n     Param(DefId, Symbol),\n }\n \n impl From<BoundVar> for BoundTy {\n     fn from(var: BoundVar) -> Self {\n-        BoundTy { var, kind: BoundTyKind::Anon(var.as_u32()) }\n+        BoundTy { var, kind: BoundTyKind::Anon }\n     }\n }\n "}, {"sha": "55025e2e72b9c9589cdebafcdeb4fd04f3863918", "filename": "compiler/rustc_trait_selection/src/solve/canonicalize.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b15195a304ff4404c4f67f19b5e1dc3efc587a6d/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fcanonicalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b15195a304ff4404c4f67f19b5e1dc3efc587a6d/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fcanonicalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fcanonicalize.rs?ref=b15195a304ff4404c4f67f19b5e1dc3efc587a6d", "patch": "@@ -302,7 +302,7 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for Canonicalizer<'_, 'tcx> {\n                     universe: placeholder.universe,\n                     bound: ty::BoundTy {\n                         var: ty::BoundVar::from_usize(self.variables.len()),\n-                        kind: ty::BoundTyKind::Anon(self.variables.len() as u32),\n+                        kind: ty::BoundTyKind::Anon,\n                     },\n                 }),\n                 CanonicalizeMode::Response { .. } => CanonicalVarKind::PlaceholderTy(placeholder),\n@@ -312,7 +312,7 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for Canonicalizer<'_, 'tcx> {\n                     universe: ty::UniverseIndex::ROOT,\n                     bound: ty::BoundTy {\n                         var: ty::BoundVar::from_usize(self.variables.len()),\n-                        kind: ty::BoundTyKind::Anon(self.variables.len() as u32),\n+                        kind: ty::BoundTyKind::Anon,\n                     },\n                 }),\n                 CanonicalizeMode::Response { .. } => bug!(\"param ty in response: {t:?}\"),\n@@ -351,7 +351,7 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for Canonicalizer<'_, 'tcx> {\n                 var\n             }),\n         );\n-        let bt = ty::BoundTy { var, kind: BoundTyKind::Anon(var.index() as u32) };\n+        let bt = ty::BoundTy { var, kind: BoundTyKind::Anon };\n         self.interner().mk_bound(self.binder_index, bt)\n     }\n "}, {"sha": "9e851b788a5430177182a31c162bf7fe7b18dd49", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals/structural_traits.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b15195a304ff4404c4f67f19b5e1dc3efc587a6d/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b15195a304ff4404c4f67f19b5e1dc3efc587a6d/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs?ref=b15195a304ff4404c4f67f19b5e1dc3efc587a6d", "patch": "@@ -95,17 +95,15 @@ fn replace_erased_lifetimes_with_bound_vars<'tcx>(\n     let mut counter = 0;\n     let ty = tcx.fold_regions(ty, |mut r, current_depth| {\n         if let ty::ReErased = r.kind() {\n-            let br = ty::BoundRegion {\n-                var: ty::BoundVar::from_u32(counter),\n-                kind: ty::BrAnon(counter, None),\n-            };\n+            let br =\n+                ty::BoundRegion { var: ty::BoundVar::from_u32(counter), kind: ty::BrAnon(None) };\n             counter += 1;\n             r = tcx.mk_re_late_bound(current_depth, br);\n         }\n         r\n     });\n     let bound_vars = tcx.mk_bound_variable_kinds_from_iter(\n-        (0..counter).map(|i| ty::BoundVariableKind::Region(ty::BrAnon(i, None))),\n+        (0..counter).map(|_| ty::BoundVariableKind::Region(ty::BrAnon(None))),\n     );\n     ty::Binder::bind_with_vars(ty, bound_vars)\n }"}, {"sha": "2be72879b7b139e860702f2a4ee0c5353119b7aa", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b15195a304ff4404c4f67f19b5e1dc3efc587a6d/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b15195a304ff4404c4f67f19b5e1dc3efc587a6d/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=b15195a304ff4404c4f67f19b5e1dc3efc587a6d", "patch": "@@ -479,14 +479,14 @@ impl<'tcx> LowerInto<'tcx, Ty<'tcx>> for &chalk_ir::Ty<RustInterner<'tcx>> {\n                 ty::DebruijnIndex::from_usize(bound.debruijn.depth() as usize),\n                 ty::BoundTy {\n                     var: ty::BoundVar::from_usize(bound.index),\n-                    kind: ty::BoundTyKind::Anon(bound.index as u32),\n+                    kind: ty::BoundTyKind::Anon,\n                 },\n             ),\n             TyKind::Placeholder(placeholder) => ty::Placeholder(ty::Placeholder {\n                 universe: ty::UniverseIndex::from_usize(placeholder.ui.counter),\n                 bound: ty::BoundTy {\n                     var: ty::BoundVar::from_usize(placeholder.idx),\n-                    kind: ty::BoundTyKind::Anon(placeholder.idx as u32),\n+                    kind: ty::BoundTyKind::Anon,\n                 },\n             }),\n             TyKind::InferenceVar(_, _) => unimplemented!(),\n@@ -691,7 +691,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Binders<chalk_ir::QuantifiedWhereClauses<Ru\n         let self_ty = interner.tcx.mk_bound(\n             // This is going to be wrapped in a binder\n             ty::DebruijnIndex::from_usize(1),\n-            ty::BoundTy { var: ty::BoundVar::from_usize(0), kind: ty::BoundTyKind::Anon(0) },\n+            ty::BoundTy { var: ty::BoundVar::from_usize(0), kind: ty::BoundTyKind::Anon },\n         );\n         let where_clauses = predicates.into_iter().map(|predicate| {\n             let (predicate, binders, _named_regions) =\n@@ -1098,7 +1098,7 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for ParamsSubstitutor<'tcx> {\n                     universe: ty::UniverseIndex::from_usize(0),\n                     bound: ty::BoundTy {\n                         var: ty::BoundVar::from_usize(idx),\n-                        kind: ty::BoundTyKind::Anon(idx as u32),\n+                        kind: ty::BoundTyKind::Anon,\n                     },\n                 }),\n                 None => {\n@@ -1109,7 +1109,7 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for ParamsSubstitutor<'tcx> {\n                         universe: ty::UniverseIndex::from_usize(0),\n                         bound: ty::BoundTy {\n                             var: ty::BoundVar::from_usize(idx),\n-                            kind: ty::BoundTyKind::Anon(idx as u32),\n+                            kind: ty::BoundTyKind::Anon,\n                         },\n                     })\n                 }"}]}