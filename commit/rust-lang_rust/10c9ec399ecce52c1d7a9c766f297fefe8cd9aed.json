{"sha": "10c9ec399ecce52c1d7a9c766f297fefe8cd9aed", "node_id": "C_kwDOAAsO6NoAKDEwYzllYzM5OWVjY2U1MmMxZDdhOWM3NjZmMjk3ZmVmZThjZDlhZWQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-21T21:03:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-21T21:03:12Z"}, "message": "Rollup merge of #92467 - Aaron1011:extern-local-region, r=oli-obk\n\nEnsure that early-bound function lifetimes are always 'local'\n\nDuring borrowchecking, we treat any free (early-bound) regions on\nthe 'defining type' as `RegionClassification::External`. According\nto the doc comments, we should only have 'external' regions when\nchecking a closure/generator.\n\nHowever, a plain function can also have some if its regions\nbe considered 'early bound' - this occurs when the region is\nconstrained by an argument, appears in a `where` clause, or\nin an opaque type. This was causing us to incorrectly mark these\nregions as 'external', which caused some diagnostic code\nto act as if we were referring to a 'parent' region from inside\na closure.\n\nThis PR marks all instantiated region variables as 'local'\nwhen we're borrow-checking something other than a\nclosure/generator/inline-const.", "tree": {"sha": "6387924b1e0d4f1cb79507d13dda9eedf2f88fe8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6387924b1e0d4f1cb79507d13dda9eedf2f88fe8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh6x+RCRBK7hj4Ov3rIwAANAQIAExqxYCdU3oa1/yhq5sppD4Y\nVmyhzs1MYZyJGDydSA/DohBxDT+2gVWxBTL7sgC4vVeSitlQnxoJ3VQYdfn/0M19\nITEtaf/RaV8qn5kUi3wEHYJoMJsF6lyYXijqhtJ/2Krjt/LEdDYy8nemjJidaCzW\nH7NIAx16z+buAt3Sbo717EIv0+548WMm+A0teXKTOjG6pSHjFTNM77QUJsF5ROmc\nD908hg+L1QWoS/HD1bNflOEB3iowBeIdW9CrN0Rq48bh87mjZtb3+XtM7G8Pusyw\nRMiC+LbMrXnS5MPm0MZ1TnNGZAQI57nwgVnaKcP8T1DsjhWlltq/RwZUwwMhjRk=\n=l2bu\n-----END PGP SIGNATURE-----\n", "payload": "tree 6387924b1e0d4f1cb79507d13dda9eedf2f88fe8\nparent fc694064e8f2d9553738d4243c13c676327e9779\nparent e3a048c3c9da3ad6faa2b576de044cc52dee2c62\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1642798992 +0100\ncommitter GitHub <noreply@github.com> 1642798992 +0100\n\nRollup merge of #92467 - Aaron1011:extern-local-region, r=oli-obk\n\nEnsure that early-bound function lifetimes are always 'local'\n\nDuring borrowchecking, we treat any free (early-bound) regions on\nthe 'defining type' as `RegionClassification::External`. According\nto the doc comments, we should only have 'external' regions when\nchecking a closure/generator.\n\nHowever, a plain function can also have some if its regions\nbe considered 'early bound' - this occurs when the region is\nconstrained by an argument, appears in a `where` clause, or\nin an opaque type. This was causing us to incorrectly mark these\nregions as 'external', which caused some diagnostic code\nto act as if we were referring to a 'parent' region from inside\na closure.\n\nThis PR marks all instantiated region variables as 'local'\nwhen we're borrow-checking something other than a\nclosure/generator/inline-const.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed", "html_url": "https://github.com/rust-lang/rust/commit/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc694064e8f2d9553738d4243c13c676327e9779", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc694064e8f2d9553738d4243c13c676327e9779", "html_url": "https://github.com/rust-lang/rust/commit/fc694064e8f2d9553738d4243c13c676327e9779"}, {"sha": "e3a048c3c9da3ad6faa2b576de044cc52dee2c62", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3a048c3c9da3ad6faa2b576de044cc52dee2c62", "html_url": "https://github.com/rust-lang/rust/commit/e3a048c3c9da3ad6faa2b576de044cc52dee2c62"}], "stats": {"total": 222, "additions": 98, "deletions": 124}, "files": [{"sha": "16a903d5e593f75dd306d4859ee929aec251d94e", "filename": "compiler/rustc_borrowck/src/universal_regions.rs", "status": "modified", "additions": 25, "deletions": 16, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs?ref=10c9ec399ecce52c1d7a9c766f297fefe8cd9aed", "patch": "@@ -180,8 +180,9 @@ pub enum RegionClassification {\n     /// anywhere. There is only one, `'static`.\n     Global,\n \n-    /// An **external** region is only relevant for closures. In that\n-    /// case, it refers to regions that are free in the closure type\n+    /// An **external** region is only relevant for\n+    /// closures, generators, and inline consts. In that\n+    /// case, it refers to regions that are free in the type\n     /// -- basically, something bound in the surrounding context.\n     ///\n     /// Consider this example:\n@@ -198,8 +199,8 @@ pub enum RegionClassification {\n     /// Here, the lifetimes `'a` and `'b` would be **external** to the\n     /// closure.\n     ///\n-    /// If we are not analyzing a closure, there are no external\n-    /// lifetimes.\n+    /// If we are not analyzing a closure/generator/inline-const,\n+    /// there are no external lifetimes.\n     External,\n \n     /// A **local** lifetime is one about which we know the full set\n@@ -424,22 +425,30 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n \n         let typeck_root_def_id = self.infcx.tcx.typeck_root_def_id(self.mir_def.did.to_def_id());\n \n-        // If this is a closure or generator, then the late-bound regions from the enclosing\n-        // function are actually external regions to us. For example, here, 'a is not local\n-        // to the closure c (although it is local to the fn foo):\n-        // fn foo<'a>() {\n-        //     let c = || { let x: &'a u32 = ...; }\n-        // }\n-        if self.mir_def.did.to_def_id() != typeck_root_def_id {\n+        // If this is is a 'root' body (not a closure/generator/inline const), then\n+        // there are no extern regions, so the local regions start at the same\n+        // position as the (empty) sub-list of extern regions\n+        let first_local_index = if self.mir_def.did.to_def_id() == typeck_root_def_id {\n+            first_extern_index\n+        } else {\n+            // If this is a closure, generator, or inline-const, then the late-bound regions from the enclosing\n+            // function are actually external regions to us. For example, here, 'a is not local\n+            // to the closure c (although it is local to the fn foo):\n+            // fn foo<'a>() {\n+            //     let c = || { let x: &'a u32 = ...; }\n+            // }\n             self.infcx\n-                .replace_late_bound_regions_with_nll_infer_vars(self.mir_def.did, &mut indices)\n-        }\n-\n-        let bound_inputs_and_output = self.compute_inputs_and_output(&indices, defining_ty);\n+                .replace_late_bound_regions_with_nll_infer_vars(self.mir_def.did, &mut indices);\n+            // Any regions created during the execution of `defining_ty` or during the above\n+            // late-bound region replacement are all considered 'extern' regions\n+            self.infcx.num_region_vars()\n+        };\n \n         // \"Liberate\" the late-bound regions. These correspond to\n         // \"local\" free regions.\n-        let first_local_index = self.infcx.num_region_vars();\n+\n+        let bound_inputs_and_output = self.compute_inputs_and_output(&indices, defining_ty);\n+\n         let inputs_and_output = self.infcx.replace_bound_regions_with_nll_infer_vars(\n             FR,\n             self.mir_def.did,"}, {"sha": "975e2ffbf01e7e85eac7e512c28ffc438d6e0bb8", "filename": "src/test/mir-opt/nll/named_lifetimes_basic.use_x.nll.0.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fmir-opt%2Fnll%2Fnamed_lifetimes_basic.use_x.nll.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fmir-opt%2Fnll%2Fnamed_lifetimes_basic.use_x.nll.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fnamed_lifetimes_basic.use_x.nll.0.mir?ref=10c9ec399ecce52c1d7a9c766f297fefe8cd9aed", "patch": "@@ -2,8 +2,8 @@\n \n | Free Region Mapping\n | '_#0r | Global | ['_#2r, '_#1r, '_#0r, '_#4r, '_#3r]\n-| '_#1r | External | ['_#1r, '_#4r]\n-| '_#2r | External | ['_#2r, '_#1r, '_#4r]\n+| '_#1r | Local | ['_#1r, '_#4r]\n+| '_#2r | Local | ['_#2r, '_#1r, '_#4r]\n | '_#3r | Local | ['_#4r, '_#3r]\n | '_#4r | Local | ['_#4r]\n |"}, {"sha": "ff4da5251a9b24e895f420de1b874d67011b1372", "filename": "src/test/ui/c-variadic/variadic-ffi-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.stderr?ref=10c9ec399ecce52c1d7a9c766f297fefe8cd9aed", "patch": "@@ -20,7 +20,7 @@ LL | pub unsafe extern \"C\" fn no_escape0<'f>(_: usize, ap: ...) -> VaListImpl<'f\n    |                                     |\n    |                                     lifetime `'f` defined here\n LL |     ap\n-   |     ^^ returning this value requires that `'1` must outlive `'f`\n+   |     ^^ function was supposed to return data with lifetime `'f` but it is returning data with lifetime `'1`\n    |\n    = note: requirement occurs because of the type VaListImpl<'_>, which makes the generic argument '_ invariant\n    = note: the struct VaListImpl<'f> is invariant over the parameter 'f"}, {"sha": "8096f08385c8c67b7a6c7fe27962b7e8260a184a", "filename": "src/test/ui/fn/implied-bounds-unnorm-associated-type.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type.nll.stderr?ref=10c9ec399ecce52c1d7a9c766f297fefe8cd9aed", "patch": "@@ -6,7 +6,7 @@ LL | fn f<'a, 'b>(s: &'b str, _: <&'a &'b () as Trait>::Type) -> &'a str {\n    |      |\n    |      lifetime `'a` defined here\n LL |     s\n-   |     ^ returning this value requires that `'b` must outlive `'a`\n+   |     ^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n    |\n    = help: consider adding the following bound: `'b: 'a`\n "}, {"sha": "fff681b2e0b7621a4cb9d1a5d63350974c17df83", "filename": "src/test/ui/issues/issue-16683.nll.stderr", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fissues%2Fissue-16683.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fissues%2Fissue-16683.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16683.nll.stderr?ref=10c9ec399ecce52c1d7a9c766f297fefe8cd9aed", "patch": "@@ -1,20 +1,13 @@\n-error[E0521]: borrowed data escapes outside of associated function\n+error: lifetime may not live long enough\n   --> $DIR/issue-16683.rs:4:9\n    |\n LL | trait T<'a> {\n    |         -- lifetime `'a` defined here\n LL |     fn a(&'a self) -> &'a bool;\n LL |     fn b(&self) {\n-   |          -----\n-   |          |\n-   |          `self` is a reference that is only valid in the associated function body\n-   |          let's call the lifetime of this reference `'1`\n+   |          - let's call the lifetime of this reference `'1`\n LL |         self.a();\n-   |         ^^^^^^^^\n-   |         |\n-   |         `self` escapes the associated function body here\n-   |         argument requires that `'1` must outlive `'a`\n+   |         ^^^^^^^^ argument requires that `'1` must outlive `'a`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0521`."}, {"sha": "613ef6b907c547e3154c68667bb79644f2991d58", "filename": "src/test/ui/issues/issue-17758.nll.stderr", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fissues%2Fissue-17758.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fissues%2Fissue-17758.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17758.nll.stderr?ref=10c9ec399ecce52c1d7a9c766f297fefe8cd9aed", "patch": "@@ -1,20 +1,13 @@\n-error[E0521]: borrowed data escapes outside of associated function\n+error: lifetime may not live long enough\n   --> $DIR/issue-17758.rs:7:9\n    |\n LL | trait Foo<'a> {\n    |           -- lifetime `'a` defined here\n LL |     fn foo(&'a self);\n LL |     fn bar(&self) {\n-   |            -----\n-   |            |\n-   |            `self` is a reference that is only valid in the associated function body\n-   |            let's call the lifetime of this reference `'1`\n+   |            - let's call the lifetime of this reference `'1`\n LL |         self.foo();\n-   |         ^^^^^^^^^^\n-   |         |\n-   |         `self` escapes the associated function body here\n-   |         argument requires that `'1` must outlive `'a`\n+   |         ^^^^^^^^^^ argument requires that `'1` must outlive `'a`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0521`."}, {"sha": "da31bcd547507e41275aaeed4af5271bc17301e5", "filename": "src/test/ui/issues/issue-52213.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fissues%2Fissue-52213.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fissues%2Fissue-52213.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52213.nll.stderr?ref=10c9ec399ecce52c1d7a9c766f297fefe8cd9aed", "patch": "@@ -7,7 +7,7 @@ LL | fn transmute_lifetime<'a, 'b, T>(t: &'a (T,)) -> &'b T {\n    |                       lifetime `'a` defined here\n LL |     match (&t,) {\n LL |         ((u,),) => u,\n-   |                    ^ returning this value requires that `'a` must outlive `'b`\n+   |                    ^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n "}, {"sha": "c8a7876dc54c29cf9815ce5b9de1ecfd5747fa89", "filename": "src/test/ui/match/match-ref-mut-invariance.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-invariance.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-invariance.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-invariance.nll.stderr?ref=10c9ec399ecce52c1d7a9c766f297fefe8cd9aed", "patch": "@@ -6,7 +6,7 @@ LL | impl<'b> S<'b> {\n LL |     fn bar<'a>(&'a mut self) -> &'a mut &'a i32 {\n    |            -- lifetime `'a` defined here\n LL |         match self.0 { ref mut x => x }\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'b`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ associated function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n    = note: requirement occurs because of a mutable reference to &i32"}, {"sha": "11ddf1487dd7adb4502ad44731a28dc57590dc18", "filename": "src/test/ui/match/match-ref-mut-let-invariance.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-let-invariance.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-let-invariance.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-let-invariance.nll.stderr?ref=10c9ec399ecce52c1d7a9c766f297fefe8cd9aed", "patch": "@@ -7,7 +7,7 @@ LL |     fn bar<'a>(&'a mut self) -> &'a mut &'a i32 {\n    |            -- lifetime `'a` defined here\n LL |         let ref mut x = self.0;\n LL |         x\n-   |         ^ returning this value requires that `'a` must outlive `'b`\n+   |         ^ associated function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n    = note: requirement occurs because of a mutable reference to &i32"}, {"sha": "f70ae2edd7facd8555ad362fca93853a7a72edfe", "filename": "src/test/ui/nll/issue-52113.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fnll%2Fissue-52113.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fnll%2Fissue-52113.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52113.stderr?ref=10c9ec399ecce52c1d7a9c766f297fefe8cd9aed", "patch": "@@ -7,7 +7,7 @@ LL | fn produce_err<'a, 'b: 'a>(data: &'b mut Vec<&'b u32>, value: &'a u32) -> i\n    |                lifetime `'a` defined here\n ...\n LL |     x\n-   |     ^ returning this value requires that `'a` must outlive `'b`\n+   |     ^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n "}, {"sha": "24b8c84b4a96ad9d9aba1f66d145d4ff725fbf1d", "filename": "src/test/ui/nll/issue-55394.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fnll%2Fissue-55394.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fnll%2Fissue-55394.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55394.nll.stderr?ref=10c9ec399ecce52c1d7a9c766f297fefe8cd9aed", "patch": "@@ -6,7 +6,7 @@ LL |     fn new(bar: &mut Bar) -> Self {\n    |                 |\n    |                 let's call the lifetime of this reference `'1`\n LL |         Foo { bar }\n-   |         ^^^^^^^^^^^ returning this value requires that `'1` must outlive `'2`\n+   |         ^^^^^^^^^^^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: aborting due to previous error\n "}, {"sha": "99b6d512261b8eb67a26d8953bceefcf0ae3455d", "filename": "src/test/ui/nll/issue-67007-escaping-data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fnll%2Fissue-67007-escaping-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fnll%2Fissue-67007-escaping-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-67007-escaping-data.rs?ref=10c9ec399ecce52c1d7a9c766f297fefe8cd9aed", "patch": "@@ -14,7 +14,7 @@ struct Consumer<'tcx>(&'tcx ());\n \n impl<'tcx> Consumer<'tcx> {\n     fn bad_method<'a>(&self, fcx: &FnCtxt<'a, 'tcx>) {\n-        let other = self.use_fcx(fcx); //~ ERROR borrowed data\n+        let other = self.use_fcx(fcx); //~ ERROR lifetime may not live long enough\n         fcx.use_it(other);\n     }\n "}, {"sha": "ce067e23aa34a49594720fb2af8fc7d454c81f46", "filename": "src/test/ui/nll/issue-67007-escaping-data.stderr", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fnll%2Fissue-67007-escaping-data.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fnll%2Fissue-67007-escaping-data.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-67007-escaping-data.stderr?ref=10c9ec399ecce52c1d7a9c766f297fefe8cd9aed", "patch": "@@ -1,21 +1,14 @@\n-error[E0521]: borrowed data escapes outside of associated function\n+error: lifetime may not live long enough\n   --> $DIR/issue-67007-escaping-data.rs:17:21\n    |\n LL | impl<'tcx> Consumer<'tcx> {\n    |      ---- lifetime `'tcx` defined here\n LL |     fn bad_method<'a>(&self, fcx: &FnCtxt<'a, 'tcx>) {\n-   |                   --  -----  --- `fcx` is a reference that is only valid in the associated function body\n-   |                   |   |\n-   |                   |   `self` declared here, outside of the associated function body\n-   |                   lifetime `'a` defined here\n+   |                   -- lifetime `'a` defined here\n LL |         let other = self.use_fcx(fcx);\n-   |                     ^^^^^^^^^^^^^^^^^\n-   |                     |\n-   |                     `fcx` escapes the associated function body here\n-   |                     argument requires that `'a` must outlive `'tcx`\n+   |                     ^^^^^^^^^^^^^^^^^ argument requires that `'a` must outlive `'tcx`\n    |\n    = help: consider adding the following bound: `'a: 'tcx`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0521`."}, {"sha": "f34cafe308d3ee8baf9e40449e017c897718625e", "filename": "src/test/ui/nll/mir_check_cast_closure.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_closure.stderr?ref=10c9ec399ecce52c1d7a9c766f297fefe8cd9aed", "patch": "@@ -7,7 +7,7 @@ LL | fn bar<'a, 'b>() -> fn(&'a u32, &'b u32) -> &'a u32 {\n    |        lifetime `'a` defined here\n LL |     let g: fn(_, _) -> _ = |_x, y| y;\n LL |     g\n-   |     ^ returning this value requires that `'b` must outlive `'a`\n+   |     ^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n    |\n    = help: consider adding the following bound: `'b: 'a`\n "}, {"sha": "7f98aa5801d07887ed5c58e71c914995f2213485", "filename": "src/test/ui/nll/outlives-suggestion-more.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fnll%2Foutlives-suggestion-more.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fnll%2Foutlives-suggestion-more.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Foutlives-suggestion-more.stderr?ref=10c9ec399ecce52c1d7a9c766f297fefe8cd9aed", "patch": "@@ -6,7 +6,7 @@ LL | fn foo1<'a, 'b, 'c, 'd>(x: &'a usize, y: &'b usize) -> (&'c usize, &'d usiz\n    |         |\n    |         lifetime `'a` defined here\n LL |     (x, y)\n-   |     ^^^^^^ returning this value requires that `'a` must outlive `'c`\n+   |     ^^^^^^ function was supposed to return data with lifetime `'c` but it is returning data with lifetime `'a`\n    |\n    = help: consider adding the following bound: `'a: 'c`\n \n@@ -18,7 +18,7 @@ LL | fn foo1<'a, 'b, 'c, 'd>(x: &'a usize, y: &'b usize) -> (&'c usize, &'d usiz\n    |             |\n    |             lifetime `'b` defined here\n LL |     (x, y)\n-   |     ^^^^^^ returning this value requires that `'b` must outlive `'d`\n+   |     ^^^^^^ function was supposed to return data with lifetime `'d` but it is returning data with lifetime `'b`\n    |\n    = help: consider adding the following bound: `'b: 'd`\n \n@@ -35,7 +35,7 @@ LL | fn foo2<'a, 'b, 'c>(x: &'a usize, y: &'b usize) -> (&'c usize, &'static usi\n    |         |\n    |         lifetime `'a` defined here\n LL |     (x, y)\n-   |     ^^^^^^ returning this value requires that `'a` must outlive `'c`\n+   |     ^^^^^^ function was supposed to return data with lifetime `'c` but it is returning data with lifetime `'a`\n    |\n    = help: consider adding the following bound: `'a: 'c`\n "}, {"sha": "496cf92400c5401e10b05c2dc14d7110bfa84e91", "filename": "src/test/ui/nll/outlives-suggestion-simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fnll%2Foutlives-suggestion-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fnll%2Foutlives-suggestion-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Foutlives-suggestion-simple.rs?ref=10c9ec399ecce52c1d7a9c766f297fefe8cd9aed", "patch": "@@ -70,7 +70,7 @@ pub struct Foo2<'a> {\n impl<'a> Foo2<'a> {\n     // should not produce outlives suggestions to name 'self\n     fn get_bar(&self) -> Bar2 {\n-        Bar2::new(&self) //~ERROR borrowed data escapes outside of associated function\n+        Bar2::new(&self) //~ERROR lifetime may not live long enough\n     }\n }\n "}, {"sha": "8e6e4f1a47623d978d5b61ab4c7a8e95fbd8c3eb", "filename": "src/test/ui/nll/outlives-suggestion-simple.stderr", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fnll%2Foutlives-suggestion-simple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fnll%2Foutlives-suggestion-simple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Foutlives-suggestion-simple.stderr?ref=10c9ec399ecce52c1d7a9c766f297fefe8cd9aed", "patch": "@@ -6,7 +6,7 @@ LL | fn foo1<'a, 'b>(x: &'a usize) -> &'b usize {\n    |         |\n    |         lifetime `'a` defined here\n LL |     x\n-   |     ^ returning this value requires that `'a` must outlive `'b`\n+   |     ^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n \n@@ -53,7 +53,7 @@ LL | fn foo4<'a, 'b, 'c>(x: &'a usize) -> (&'b usize, &'c usize) {\n    |         lifetime `'a` defined here\n ...\n LL |     (x, x)\n-   |     ^^^^^^ returning this value requires that `'a` must outlive `'b`\n+   |     ^^^^^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n \n@@ -73,7 +73,7 @@ LL | impl<'a> Bar<'a> {\n LL |     pub fn get<'b>(&self) -> &'b usize {\n    |                -- lifetime `'b` defined here\n LL |         self.x\n-   |         ^^^^^^ returning this value requires that `'a` must outlive `'b`\n+   |         ^^^^^^ associated function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n \n@@ -85,28 +85,20 @@ LL | impl<'a> Baz<'a> {\n LL |     fn get<'b>(&'b self) -> &'a i32 {\n    |            -- lifetime `'b` defined here\n LL |         self.x\n-   |         ^^^^^^ returning this value requires that `'b` must outlive `'a`\n+   |         ^^^^^^ associated function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n    |\n    = help: consider adding the following bound: `'b: 'a`\n \n-error[E0521]: borrowed data escapes outside of associated function\n+error: lifetime may not live long enough\n   --> $DIR/outlives-suggestion-simple.rs:73:9\n    |\n LL | impl<'a> Foo2<'a> {\n    |      -- lifetime `'a` defined here\n LL |     // should not produce outlives suggestions to name 'self\n LL |     fn get_bar(&self) -> Bar2 {\n-   |                -----\n-   |                |\n-   |                `self` declared here, outside of the associated function body\n-   |                `self` is a reference that is only valid in the associated function body\n-   |                let's call the lifetime of this reference `'1`\n+   |                - let's call the lifetime of this reference `'1`\n LL |         Bar2::new(&self)\n-   |         ^^^^^^^^^^^^^^^^\n-   |         |\n-   |         `self` escapes the associated function body here\n-   |         argument requires that `'1` must outlive `'a`\n+   |         ^^^^^^^^^^^^^^^^ argument requires that `'1` must outlive `'a`\n \n error: aborting due to 9 previous errors\n \n-For more information about this error, try `rustc --explain E0521`."}, {"sha": "45fd5a2f1d6570e862cc328fc65d9c297d29ecb7", "filename": "src/test/ui/nll/type-alias-free-regions.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.nll.stderr?ref=10c9ec399ecce52c1d7a9c766f297fefe8cd9aed", "patch": "@@ -6,7 +6,7 @@ LL | impl<'a> FromBox<'a> for C<'a> {\n LL |     fn from_box(b: Box<B>) -> Self {\n    |                 - has type `Box<Box<&'1 isize>>`\n LL |         C { f: b }\n-   |         ^^^^^^^^^^ returning this value requires that `'1` must outlive `'a`\n+   |         ^^^^^^^^^^ associated function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/type-alias-free-regions.rs:27:9\n@@ -16,7 +16,7 @@ LL | impl<'a> FromTuple<'a> for C<'a> {\n LL |     fn from_tuple(b: (B,)) -> Self {\n    |                   - has type `(Box<&'1 isize>,)`\n LL |         C { f: Box::new(b.0) }\n-   |         ^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'1` must outlive `'a`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^ associated function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'1`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b392c2007d39805c96425575d997a52f2050671a", "filename": "src/test/ui/nll/type-check-pointer-coercions.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fnll%2Ftype-check-pointer-coercions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fnll%2Ftype-check-pointer-coercions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Ftype-check-pointer-coercions.stderr?ref=10c9ec399ecce52c1d7a9c766f297fefe8cd9aed", "patch": "@@ -6,7 +6,7 @@ LL | fn shared_to_const<'a, 'b>(x: &&'a i32) -> *const &'b i32 {\n    |                    |\n    |                    lifetime `'a` defined here\n LL |     x\n-   |     ^ returning this value requires that `'a` must outlive `'b`\n+   |     ^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n \n@@ -18,7 +18,7 @@ LL | fn unique_to_const<'a, 'b>(x: &mut &'a i32) -> *const &'b i32 {\n    |                    |\n    |                    lifetime `'a` defined here\n LL |     x\n-   |     ^ returning this value requires that `'a` must outlive `'b`\n+   |     ^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n \n@@ -47,7 +47,7 @@ LL | fn unique_to_mut<'a, 'b>(x: &mut &'a i32) -> *mut &'b i32 {\n    |                  lifetime `'a` defined here\n LL |     // Two errors because *mut is invariant\n LL |     x\n-   |     ^ returning this value requires that `'a` must outlive `'b`\n+   |     ^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n    = note: requirement occurs because of a mutable pointer to &i32\n@@ -64,7 +64,7 @@ LL | fn mut_to_const<'a, 'b>(x: *mut &'a i32) -> *const &'b i32 {\n    |                 |\n    |                 lifetime `'a` defined here\n LL |     x\n-   |     ^ returning this value requires that `'a` must outlive `'b`\n+   |     ^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n \n@@ -77,7 +77,7 @@ LL | fn array_elem<'a, 'b>(x: &'a i32) -> *const &'b i32 {\n    |               lifetime `'a` defined here\n ...\n LL |     y\n-   |     ^ returning this value requires that `'a` must outlive `'b`\n+   |     ^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n \n@@ -90,7 +90,7 @@ LL | fn array_coerce<'a, 'b>(x: &'a i32) -> *const [&'b i32; 3] {\n    |                 lifetime `'a` defined here\n ...\n LL |     y\n-   |     ^ returning this value requires that `'a` must outlive `'b`\n+   |     ^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n \n@@ -103,7 +103,7 @@ LL | fn nested_array<'a, 'b>(x: &'a i32) -> *const [&'b i32; 2] {\n    |                 lifetime `'a` defined here\n ...\n LL |     y\n-   |     ^ returning this value requires that `'a` must outlive `'b`\n+   |     ^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n "}, {"sha": "902b4c687554a69e96be031363dfcdce107dacc6", "filename": "src/test/ui/nll/user-annotations/wf-self-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fwf-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fwf-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fwf-self-type.stderr?ref=10c9ec399ecce52c1d7a9c766f297fefe8cd9aed", "patch": "@@ -6,7 +6,7 @@ LL | pub fn foo<'a, 'b>(u: &'b ()) -> &'a () {\n    |            |\n    |            lifetime `'a` defined here\n LL |     Foo::xmute(u)\n-   |     ^^^^^^^^^^^^^ returning this value requires that `'b` must outlive `'a`\n+   |     ^^^^^^^^^^^^^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n    |\n    = help: consider adding the following bound: `'b: 'a`\n "}, {"sha": "61e96f59fed9128fa557a720ea4c3df96c72eaed", "filename": "src/test/ui/object-lifetime/object-lifetime-default-elision.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-elision.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-elision.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-elision.nll.stderr?ref=10c9ec399ecce52c1d7a9c766f297fefe8cd9aed", "patch": "@@ -7,7 +7,7 @@ LL | fn load3<'a,'b>(ss: &'a dyn SomeTrait) -> &'b dyn SomeTrait {\n    |          lifetime `'a` defined here\n ...\n LL |     ss\n-   |     ^^ returning this value requires that `'a` must outlive `'b`\n+   |     ^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n "}, {"sha": "d95289f3f9def09c27b6261dde5aa814558a4822", "filename": "src/test/ui/regions/region-object-lifetime-2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-2.nll.stderr?ref=10c9ec399ecce52c1d7a9c766f297fefe8cd9aed", "patch": "@@ -6,7 +6,7 @@ LL | fn borrowed_receiver_different_lifetimes<'a,'b>(x: &'a dyn Foo) -> &'b () {\n    |                                          |\n    |                                          lifetime `'a` defined here\n LL |     x.borrowed()\n-   |     ^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'b`\n+   |     ^^^^^^^^^^^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n "}, {"sha": "92588819076d35ae9ef382e5e78c8bbbe2c34672", "filename": "src/test/ui/regions/region-object-lifetime-in-coercion.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.nll.stderr?ref=10c9ec399ecce52c1d7a9c766f297fefe8cd9aed", "patch": "@@ -31,7 +31,7 @@ LL | fn d<'a,'b>(v: &'a [u8]) -> Box<dyn Foo+'b> {\n    |      |\n    |      lifetime `'a` defined here\n LL |     Box::new(v)\n-   |     ^^^^^^^^^^^ returning this value requires that `'a` must outlive `'b`\n+   |     ^^^^^^^^^^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n "}, {"sha": "246b6483c21a8f15b2d13be48cf63e8c26bb28a7", "filename": "src/test/ui/regions/regions-bounded-method-type-parameters-trait-bound.nll.stderr", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-trait-bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-trait-bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-trait-bound.nll.stderr?ref=10c9ec399ecce52c1d7a9c766f297fefe8cd9aed", "patch": "@@ -1,18 +1,13 @@\n-error[E0521]: borrowed data escapes outside of function\n+error: lifetime may not live long enough\n   --> $DIR/regions-bounded-method-type-parameters-trait-bound.rs:20:5\n    |\n LL | fn caller2<'a,'b,F:Foo<'a>>(a: Inv<'a>, b: Inv<'b>, f: F) {\n-   |            -- --            -           - `b` is a reference that is only valid in the function body\n-   |            |  |             |\n-   |            |  |             `a` declared here, outside of the function body\n-   |            |  lifetime `'b` defined here\n+   |            -- -- lifetime `'b` defined here\n+   |            |\n    |            lifetime `'a` defined here\n LL |     // Here the value provided for 'y is 'b, and hence 'b:'a does not hold.\n LL |     f.method(b);\n-   |     ^^^^^^^^^^^\n-   |     |\n-   |     `b` escapes the function body here\n-   |     argument requires that `'b` must outlive `'a`\n+   |     ^^^^^^^^^^^ argument requires that `'b` must outlive `'a`\n    |\n    = help: consider adding the following bound: `'b: 'a`\n    = note: requirement occurs because of the type Inv<'_>, which makes the generic argument '_ invariant\n@@ -21,4 +16,3 @@ LL |     f.method(b);\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0521`."}, {"sha": "84226a5755319cf0e06572867df3b81fed9051c1", "filename": "src/test/ui/regions/regions-bounds.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fregions%2Fregions-bounds.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fregions%2Fregions-bounds.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-bounds.nll.stderr?ref=10c9ec399ecce52c1d7a9c766f297fefe8cd9aed", "patch": "@@ -6,7 +6,7 @@ LL | fn a_fn1<'a,'b>(e: TupleStruct<'a>) -> TupleStruct<'b> {\n    |          |\n    |          lifetime `'a` defined here\n LL |     return e;\n-   |            ^ returning this value requires that `'a` must outlive `'b`\n+   |            ^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n \n@@ -18,7 +18,7 @@ LL | fn a_fn3<'a,'b>(e: Struct<'a>) -> Struct<'b> {\n    |          |\n    |          lifetime `'a` defined here\n LL |     return e;\n-   |            ^ returning this value requires that `'a` must outlive `'b`\n+   |            ^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n "}, {"sha": "25566742099c261f23a13284b71232185a881bcb", "filename": "src/test/ui/regions/regions-close-over-type-parameter-multiple.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-multiple.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-multiple.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-multiple.nll.stderr?ref=10c9ec399ecce52c1d7a9c766f297fefe8cd9aed", "patch": "@@ -7,7 +7,7 @@ LL | fn make_object_bad<'a,'b,'c,A:SomeTrait+'a+'b>(v: A) -> Box<dyn SomeTrait +\n    |                    lifetime `'a` defined here\n LL |     // A outlives 'a AND 'b...but not 'c.\n LL |     Box::new(v) as Box<dyn SomeTrait + 'a>\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'c`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function was supposed to return data with lifetime `'c` but it is returning data with lifetime `'a`\n    |\n    = help: consider adding the following bound: `'a: 'c`\n "}, {"sha": "91cf57e099df9485273dcd83fbf95e7e88b6f497", "filename": "src/test/ui/regions/regions-creating-enums4.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums4.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums4.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums4.nll.stderr?ref=10c9ec399ecce52c1d7a9c766f297fefe8cd9aed", "patch": "@@ -6,7 +6,7 @@ LL | fn mk_add_bad2<'a,'b>(x: &'a Ast<'a>, y: &'a Ast<'a>, z: &Ast) -> Ast<'b> {\n    |                |\n    |                lifetime `'a` defined here\n LL |     Ast::Add(x, y)\n-   |     ^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'b`\n+   |     ^^^^^^^^^^^^^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n "}, {"sha": "7f10c051f2998eb63288d53376b2bf365275ef2d", "filename": "src/test/ui/regions/regions-early-bound-error-method.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error-method.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error-method.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error-method.nll.stderr?ref=10c9ec399ecce52c1d7a9c766f297fefe8cd9aed", "patch": "@@ -6,7 +6,7 @@ LL | impl<'a> Box<'a> {\n LL |     fn or<'b,G:GetRef<'b>>(&self, g2: G) -> &'a isize {\n    |           -- lifetime `'b` defined here\n LL |         g2.get()\n-   |         ^^^^^^^^ returning this value requires that `'b` must outlive `'a`\n+   |         ^^^^^^^^ associated function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n    |\n    = help: consider adding the following bound: `'b: 'a`\n "}, {"sha": "f7c75033c04865f3b2d28fb1849d49c751bf2654", "filename": "src/test/ui/regions/regions-free-region-ordering-incorrect.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-incorrect.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-incorrect.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-incorrect.nll.stderr?ref=10c9ec399ecce52c1d7a9c766f297fefe8cd9aed", "patch": "@@ -9,7 +9,7 @@ LL | /         match self.next {\n LL | |             Some(ref next) => next.get(),\n LL | |             None => &self.val\n LL | |         }\n-   | |_________^ returning this value requires that `'a` must outlive `'b`\n+   | |_________^ associated function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n "}, {"sha": "3183aee23d9369753ad94ab82c72e66920fbdfc5", "filename": "src/test/ui/regions/regions-infer-not-param.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fregions%2Fregions-infer-not-param.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fregions%2Fregions-infer-not-param.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-not-param.nll.stderr?ref=10c9ec399ecce52c1d7a9c766f297fefe8cd9aed", "patch": "@@ -2,7 +2,7 @@ error: lifetime may not live long enough\n   --> $DIR/regions-infer-not-param.rs:15:54\n    |\n LL | fn take_direct<'a,'b>(p: Direct<'a>) -> Direct<'b> { p }\n-   |                -- -- lifetime `'b` defined here      ^ returning this value requires that `'a` must outlive `'b`\n+   |                -- -- lifetime `'b` defined here      ^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n    |                |\n    |                lifetime `'a` defined here\n    |\n@@ -25,7 +25,7 @@ error: lifetime may not live long enough\n   --> $DIR/regions-infer-not-param.rs:19:63\n    |\n LL | fn take_indirect2<'a,'b>(p: Indirect2<'a>) -> Indirect2<'b> { p }\n-   |                   -- -- lifetime `'b` defined here            ^ returning this value requires that `'a` must outlive `'b`\n+   |                   -- -- lifetime `'b` defined here            ^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n    |                   |\n    |                   lifetime `'a` defined here\n    |"}, {"sha": "26f0fcae638d050326bb3db47b1d523f27659224", "filename": "src/test/ui/regions/regions-trait-object-subtyping.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.nll.stderr?ref=10c9ec399ecce52c1d7a9c766f297fefe8cd9aed", "patch": "@@ -7,7 +7,7 @@ LL | fn foo3<'a,'b>(x: &'a mut dyn Dummy) -> &'b mut dyn Dummy {\n    |         lifetime `'a` defined here\n LL |     // Without knowing 'a:'b, we can't coerce\n LL |     x\n-   |     ^ returning this value requires that `'a` must outlive `'b`\n+   |     ^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n    = note: requirement occurs because of a mutable reference to dyn Dummy\n@@ -23,7 +23,7 @@ LL | fn foo4<'a:'b,'b>(x: Wrapper<&'a mut dyn Dummy>) -> Wrapper<&'b mut dyn Dum\n    |         lifetime `'a` defined here\n LL |     // We can't coerce because it is packed in `Wrapper`\n LL |     x\n-   |     ^ returning this value requires that `'b` must outlive `'a`\n+   |     ^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n    |\n    = help: consider adding the following bound: `'b: 'a`\n    = note: requirement occurs because of a mutable reference to dyn Dummy"}, {"sha": "3315eaaf1c006e9788e0914c9435d183d3a8ee2f", "filename": "src/test/ui/variance/variance-contravariant-arg-object.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-object.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-object.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-object.nll.stderr?ref=10c9ec399ecce52c1d7a9c766f297fefe8cd9aed", "patch": "@@ -7,7 +7,7 @@ LL | fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n    |                     lifetime `'min` defined here\n ...\n LL |     v\n-   |     ^ returning this value requires that `'min` must outlive `'max`\n+   |     ^ function was supposed to return data with lifetime `'max` but it is returning data with lifetime `'min`\n    |\n    = help: consider adding the following bound: `'min: 'max`\n \n@@ -20,7 +20,7 @@ LL | fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)\n    |                     lifetime `'min` defined here\n ...\n LL |     v\n-   |     ^ returning this value requires that `'min` must outlive `'max`\n+   |     ^ function was supposed to return data with lifetime `'max` but it is returning data with lifetime `'min`\n    |\n    = help: consider adding the following bound: `'min: 'max`\n "}, {"sha": "b116b8e263fd2917bf18bf8149c94cc88376c932", "filename": "src/test/ui/variance/variance-covariant-arg-object.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-object.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-object.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-object.nll.stderr?ref=10c9ec399ecce52c1d7a9c766f297fefe8cd9aed", "patch": "@@ -7,7 +7,7 @@ LL | fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n    |                     lifetime `'min` defined here\n ...\n LL |     v\n-   |     ^ returning this value requires that `'min` must outlive `'max`\n+   |     ^ function was supposed to return data with lifetime `'max` but it is returning data with lifetime `'min`\n    |\n    = help: consider adding the following bound: `'min: 'max`\n \n@@ -20,7 +20,7 @@ LL | fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)\n    |                     lifetime `'min` defined here\n ...\n LL |     v\n-   |     ^ returning this value requires that `'min` must outlive `'max`\n+   |     ^ function was supposed to return data with lifetime `'max` but it is returning data with lifetime `'min`\n    |\n    = help: consider adding the following bound: `'min: 'max`\n "}, {"sha": "303c7f3388a7426bfa25c2596c5d18fbdca2003d", "filename": "src/test/ui/variance/variance-invariant-arg-object.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-object.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-object.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-object.nll.stderr?ref=10c9ec399ecce52c1d7a9c766f297fefe8cd9aed", "patch": "@@ -7,7 +7,7 @@ LL | fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n    |                     lifetime `'min` defined here\n ...\n LL |     v\n-   |     ^ returning this value requires that `'min` must outlive `'max`\n+   |     ^ function was supposed to return data with lifetime `'max` but it is returning data with lifetime `'min`\n    |\n    = help: consider adding the following bound: `'min: 'max`\n \n@@ -20,7 +20,7 @@ LL | fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)\n    |                     lifetime `'min` defined here\n ...\n LL |     v\n-   |     ^ returning this value requires that `'min` must outlive `'max`\n+   |     ^ function was supposed to return data with lifetime `'max` but it is returning data with lifetime `'min`\n    |\n    = help: consider adding the following bound: `'min: 'max`\n "}, {"sha": "837c70ca3136733190c6e619ca03334e47f6b517", "filename": "src/test/ui/variance/variance-use-contravariant-struct-1.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.nll.stderr?ref=10c9ec399ecce52c1d7a9c766f297fefe8cd9aed", "patch": "@@ -7,7 +7,7 @@ LL | fn foo<'min,'max>(v: SomeStruct<&'max ()>)\n    |        lifetime `'min` defined here\n ...\n LL |     v\n-   |     ^ returning this value requires that `'min` must outlive `'max`\n+   |     ^ function was supposed to return data with lifetime `'max` but it is returning data with lifetime `'min`\n    |\n    = help: consider adding the following bound: `'min: 'max`\n "}, {"sha": "bab858c5acb37ac71f4607c29908293cd40fbaca", "filename": "src/test/ui/variance/variance-use-covariant-struct-1.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-covariant-struct-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-covariant-struct-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-covariant-struct-1.nll.stderr?ref=10c9ec399ecce52c1d7a9c766f297fefe8cd9aed", "patch": "@@ -7,7 +7,7 @@ LL | fn foo<'min,'max>(v: SomeStruct<&'min ()>)\n    |        lifetime `'min` defined here\n ...\n LL |     v\n-   |     ^ returning this value requires that `'min` must outlive `'max`\n+   |     ^ function was supposed to return data with lifetime `'max` but it is returning data with lifetime `'min`\n    |\n    = help: consider adding the following bound: `'min: 'max`\n "}, {"sha": "f1df2a88b6bab354de860837c7727b389edf90fc", "filename": "src/test/ui/variance/variance-use-invariant-struct-1.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.nll.stderr?ref=10c9ec399ecce52c1d7a9c766f297fefe8cd9aed", "patch": "@@ -7,7 +7,7 @@ LL | fn foo<'min,'max>(v: SomeStruct<&'max ()>)\n    |        lifetime `'min` defined here\n ...\n LL |     v\n-   |     ^ returning this value requires that `'min` must outlive `'max`\n+   |     ^ function was supposed to return data with lifetime `'max` but it is returning data with lifetime `'min`\n    |\n    = help: consider adding the following bound: `'min: 'max`\n    = note: requirement occurs because of the type SomeStruct<&()>, which makes the generic argument &() invariant\n@@ -23,7 +23,7 @@ LL | fn bar<'min,'max>(v: SomeStruct<&'min ()>)\n    |        lifetime `'min` defined here\n ...\n LL |     v\n-   |     ^ returning this value requires that `'min` must outlive `'max`\n+   |     ^ function was supposed to return data with lifetime `'max` but it is returning data with lifetime `'min`\n    |\n    = help: consider adding the following bound: `'min: 'max`\n    = note: requirement occurs because of the type SomeStruct<&()>, which makes the generic argument &() invariant"}, {"sha": "265043111956a6888f91c03db3bfddbd4fac9324", "filename": "src/test/ui/wf/wf-static-method.nll.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10c9ec399ecce52c1d7a9c766f297fefe8cd9aed/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.nll.stderr?ref=10c9ec399ecce52c1d7a9c766f297fefe8cd9aed", "patch": "@@ -7,7 +7,7 @@ LL | impl<'a, 'b> Foo<'a, 'b, Evil<'a, 'b>> for () {\n    |      lifetime `'a` defined here\n ...\n LL |         u\n-   |         ^ returning this value requires that `'b` must outlive `'a`\n+   |         ^ associated function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n    |\n    = help: consider adding the following bound: `'b: 'a`\n \n@@ -33,7 +33,7 @@ LL | impl<'a, 'b> Evil<'a, 'b> {\n    |      lifetime `'a` defined here\n LL |     fn inherent_evil(u: &'b u32) -> &'a u32 {\n LL |         u\n-   |         ^ returning this value requires that `'b` must outlive `'a`\n+   |         ^ associated function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n    |\n    = help: consider adding the following bound: `'b: 'a`\n \n@@ -45,7 +45,7 @@ LL | fn evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n    |         |\n    |         lifetime `'a` defined here\n LL |     <()>::static_evil(b)\n-   |     ^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'b` must outlive `'a`\n+   |     ^^^^^^^^^^^^^^^^^^^^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n    |\n    = help: consider adding the following bound: `'b: 'a`\n \n@@ -57,7 +57,7 @@ LL | fn indirect_evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n    |                  |\n    |                  lifetime `'a` defined here\n LL |     <IndirectEvil>::static_evil(b)\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'b` must outlive `'a`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n    |\n    = help: consider adding the following bound: `'b: 'a`\n \n@@ -69,7 +69,7 @@ LL | fn inherent_evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n    |                  |\n    |                  lifetime `'a` defined here\n LL |     <Evil>::inherent_evil(b)\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'b` must outlive `'a`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n    |\n    = help: consider adding the following bound: `'b: 'a`\n "}]}