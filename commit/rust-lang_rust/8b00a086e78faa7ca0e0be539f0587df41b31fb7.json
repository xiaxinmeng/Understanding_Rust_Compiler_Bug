{"sha": "8b00a086e78faa7ca0e0be539f0587df41b31fb7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiMDBhMDg2ZTc4ZmFhN2NhMGUwYmU1MzlmMDU4N2RmNDFiMzFmYjc=", "commit": {"author": {"name": "Carol (Nichols || Goulding)", "email": "carol.nichols@gmail.com", "date": "2016-05-22T23:14:38Z"}, "committer": {"name": "Carol (Nichols || Goulding)", "email": "carol.nichols@gmail.com", "date": "2016-05-23T14:03:44Z"}, "message": "Add an explicit \"How can I implement `PartialOrd`\" doc section\n\nSimilar to the `Ord` examples but calling out that it can be defined\nusing `cmp` from `Ord` or using `partial_cmp` in a situation that\ndemands that.", "tree": {"sha": "65b65fc17ff457f4a8dea44b454dfc71e023c82f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65b65fc17ff457f4a8dea44b454dfc71e023c82f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b00a086e78faa7ca0e0be539f0587df41b31fb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b00a086e78faa7ca0e0be539f0587df41b31fb7", "html_url": "https://github.com/rust-lang/rust/commit/8b00a086e78faa7ca0e0be539f0587df41b31fb7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b00a086e78faa7ca0e0be539f0587df41b31fb7/comments", "author": {"login": "carols10cents", "id": 193874, "node_id": "MDQ6VXNlcjE5Mzg3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/193874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carols10cents", "html_url": "https://github.com/carols10cents", "followers_url": "https://api.github.com/users/carols10cents/followers", "following_url": "https://api.github.com/users/carols10cents/following{/other_user}", "gists_url": "https://api.github.com/users/carols10cents/gists{/gist_id}", "starred_url": "https://api.github.com/users/carols10cents/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carols10cents/subscriptions", "organizations_url": "https://api.github.com/users/carols10cents/orgs", "repos_url": "https://api.github.com/users/carols10cents/repos", "events_url": "https://api.github.com/users/carols10cents/events{/privacy}", "received_events_url": "https://api.github.com/users/carols10cents/received_events", "type": "User", "site_admin": false}, "committer": {"login": "carols10cents", "id": 193874, "node_id": "MDQ6VXNlcjE5Mzg3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/193874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carols10cents", "html_url": "https://github.com/carols10cents", "followers_url": "https://api.github.com/users/carols10cents/followers", "following_url": "https://api.github.com/users/carols10cents/following{/other_user}", "gists_url": "https://api.github.com/users/carols10cents/gists{/gist_id}", "starred_url": "https://api.github.com/users/carols10cents/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carols10cents/subscriptions", "organizations_url": "https://api.github.com/users/carols10cents/orgs", "repos_url": "https://api.github.com/users/carols10cents/repos", "events_url": "https://api.github.com/users/carols10cents/events{/privacy}", "received_events_url": "https://api.github.com/users/carols10cents/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9efa44565610054a790c64cda8cdb086e5fbc21c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9efa44565610054a790c64cda8cdb086e5fbc21c", "html_url": "https://github.com/rust-lang/rust/commit/9efa44565610054a790c64cda8cdb086e5fbc21c"}], "stats": {"total": 46, "additions": 44, "deletions": 2}, "files": [{"sha": "5b8620f4b8eb8c5cc22ca8f57a0faa4f1bec58dc", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 44, "deletions": 2, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/8b00a086e78faa7ca0e0be539f0587df41b31fb7/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00a086e78faa7ca0e0be539f0587df41b31fb7/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=8b00a086e78faa7ca0e0be539f0587df41b31fb7", "patch": "@@ -337,15 +337,57 @@ impl PartialOrd for Ordering {\n /// transitively: if `T: PartialOrd<U>` and `U: PartialOrd<V>` then `U: PartialOrd<T>` and `T:\n /// PartialOrd<V>`.\n ///\n+/// ## Derivable\n+///\n+/// This trait can be used with `#[derive]`. When `derive`d, it will produce a lexicographic\n+/// ordering based on the top-to-bottom declaration order of the struct's members.\n+///\n+/// ## How can I implement `Ord`?\n+///\n /// PartialOrd only requires implementation of the `partial_cmp` method, with the others generated\n /// from default implementations.\n ///\n /// However it remains possible to implement the others separately for types which do not have a\n /// total order. For example, for floating point numbers, `NaN < 0 == false` and `NaN >= 0 ==\n /// false` (cf. IEEE 754-2008 section 5.11).\n ///\n-/// This trait can be used with `#[derive]`. When `derive`d, it will produce a lexicographic\n-/// ordering based on the top-to-bottom declaration order of the struct's members.\n+/// `PartialOrd` requires your type to be `PartialEq`.\n+///\n+/// If your type is `Ord`, you can implement `partial_cmp` by using `cmp`:\n+///\n+/// ```\n+/// impl PartialOrd for Person {\n+///     fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n+///         Some(self.cmp(other))\n+///     }\n+/// }\n+/// ```\n+///\n+/// You may also find it useful to use `partial_cmp` on your type`s fields. Here\n+/// is an example of `Person` types who have a floating-point `height` field that\n+/// is the only field to be used for sorting:\n+///\n+/// ```\n+/// use std::cmp::Ordering;\n+///\n+/// struct Person {\n+///     id: u32,\n+///     name: String,\n+///     height: f64,\n+/// }\n+///\n+/// impl PartialOrd for Person {\n+///     fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n+///         self.height.partial_cmp(&other.height)\n+///     }\n+/// }\n+///\n+/// impl PartialEq for Person {\n+///     fn eq(&self, other: &Self) -> bool {\n+///         self.height == other.height\n+///     }\n+/// }\n+/// ```\n ///\n /// # Examples\n ///"}]}