{"sha": "33ee157f3b05865984957953df21f4711f8e5cd6", "node_id": "C_kwDOAAsO6NoAKDMzZWUxNTdmM2IwNTg2NTk4NDk1Nzk1M2RmMjFmNDcxMWY4ZTVjZDY", "commit": {"author": {"name": "hecatia-elegua", "email": "108802164+hecatia-elegua@users.noreply.github.com", "date": "2023-04-06T15:25:30Z"}, "committer": {"name": "hecatia-elegua", "email": "108802164+hecatia-elegua@users.noreply.github.com", "date": "2023-04-06T15:25:30Z"}, "message": "Render alias text for use imports\n\n* removes one method breaking the flow", "tree": {"sha": "4c1034332946777aab6c76558facbc5bc95577e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c1034332946777aab6c76558facbc5bc95577e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33ee157f3b05865984957953df21f4711f8e5cd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33ee157f3b05865984957953df21f4711f8e5cd6", "html_url": "https://github.com/rust-lang/rust/commit/33ee157f3b05865984957953df21f4711f8e5cd6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33ee157f3b05865984957953df21f4711f8e5cd6/comments", "author": {"login": "hecatia-elegua", "id": 108802164, "node_id": "U_kgDOBnwwdA", "avatar_url": "https://avatars.githubusercontent.com/u/108802164?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hecatia-elegua", "html_url": "https://github.com/hecatia-elegua", "followers_url": "https://api.github.com/users/hecatia-elegua/followers", "following_url": "https://api.github.com/users/hecatia-elegua/following{/other_user}", "gists_url": "https://api.github.com/users/hecatia-elegua/gists{/gist_id}", "starred_url": "https://api.github.com/users/hecatia-elegua/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hecatia-elegua/subscriptions", "organizations_url": "https://api.github.com/users/hecatia-elegua/orgs", "repos_url": "https://api.github.com/users/hecatia-elegua/repos", "events_url": "https://api.github.com/users/hecatia-elegua/events{/privacy}", "received_events_url": "https://api.github.com/users/hecatia-elegua/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hecatia-elegua", "id": 108802164, "node_id": "U_kgDOBnwwdA", "avatar_url": "https://avatars.githubusercontent.com/u/108802164?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hecatia-elegua", "html_url": "https://github.com/hecatia-elegua", "followers_url": "https://api.github.com/users/hecatia-elegua/followers", "following_url": "https://api.github.com/users/hecatia-elegua/following{/other_user}", "gists_url": "https://api.github.com/users/hecatia-elegua/gists{/gist_id}", "starred_url": "https://api.github.com/users/hecatia-elegua/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hecatia-elegua/subscriptions", "organizations_url": "https://api.github.com/users/hecatia-elegua/orgs", "repos_url": "https://api.github.com/users/hecatia-elegua/repos", "events_url": "https://api.github.com/users/hecatia-elegua/events{/privacy}", "received_events_url": "https://api.github.com/users/hecatia-elegua/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4515d987f53c5d874b69609f15708f503d3b32e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4515d987f53c5d874b69609f15708f503d3b32e", "html_url": "https://github.com/rust-lang/rust/commit/b4515d987f53c5d874b69609f15708f503d3b32e"}], "stats": {"total": 145, "additions": 84, "deletions": 61}, "files": [{"sha": "b94bbc406525bf197982f213bea5fab8d0691d38", "filename": "crates/ide-completion/src/completions.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/33ee157f3b05865984957953df21f4711f8e5cd6/crates%2Fide-completion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33ee157f3b05865984957953df21f4711f8e5cd6/crates%2Fide-completion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions.rs?ref=33ee157f3b05865984957953df21f4711f8e5cd6", "patch": "@@ -78,14 +78,6 @@ impl Completions {\n         }\n     }\n \n-    pub(crate) fn add_all<I>(&mut self, items: I)\n-    where\n-        I: IntoIterator,\n-        I::Item: Into<CompletionItem>,\n-    {\n-        items.into_iter().for_each(|item| self.add(item.into()))\n-    }\n-\n     pub(crate) fn add_keyword(&mut self, ctx: &CompletionContext<'_>, keyword: &'static str) {\n         let item = CompletionItem::new(CompletionItemKind::Keyword, ctx.source_range(), keyword);\n         item.add_to(self);"}, {"sha": "9daa6984c3e38ab824704867ced6ec207e836636", "filename": "crates/ide-completion/src/completions/expr.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/33ee157f3b05865984957953df21f4711f8e5cd6/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33ee157f3b05865984957953df21f4711f8e5cd6/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs?ref=33ee157f3b05865984957953df21f4711f8e5cd6", "patch": "@@ -88,7 +88,13 @@ pub(crate) fn complete_expr_path(\n                     let module_scope = module.scope(ctx.db, Some(ctx.module));\n                     for (name, def) in module_scope {\n                         if scope_def_applicable(def) {\n-                            acc.add_path_resolution(ctx, path_ctx, name, def, ctx.doc_aliases_in_scope(def));\n+                            acc.add_path_resolution(\n+                                ctx,\n+                                path_ctx,\n+                                name,\n+                                def,\n+                                ctx.doc_aliases_in_scope(def),\n+                            );\n                         }\n                     }\n                 }"}, {"sha": "6d023e12bca6f1fa07c48c20a28629b995796164", "filename": "crates/ide-completion/src/completions/flyimport.rs", "status": "modified", "additions": 32, "deletions": 48, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/33ee157f3b05865984957953df21f4711f8e5cd6/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33ee157f3b05865984957953df21f4711f8e5cd6/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fflyimport.rs?ref=33ee157f3b05865984957953df21f4711f8e5cd6", "patch": "@@ -257,30 +257,22 @@ fn import_on_the_fly(\n     };\n     let user_input_lowercased = potential_import_name.to_lowercase();\n \n-    acc.add_all(\n-        import_assets\n-            .search_for_imports(\n-                &ctx.sema,\n-                ctx.config.insert_use.prefix_kind,\n-                ctx.config.prefer_no_std,\n-            )\n-            .into_iter()\n-            .filter(ns_filter)\n-            .filter(|import| {\n-                !ctx.is_item_hidden(&import.item_to_import)\n-                    && !ctx.is_item_hidden(&import.original_item)\n-            })\n-            .sorted_by_key(|located_import| {\n-                compute_fuzzy_completion_order_key(\n-                    &located_import.import_path,\n-                    &user_input_lowercased,\n-                )\n-            })\n-            .filter_map(|import| {\n-                render_resolution_with_import(RenderContext::new(ctx), path_ctx, import)\n-            })\n-            .map(|builder| builder.build()),\n-    );\n+    import_assets\n+        .search_for_imports(&ctx.sema, ctx.config.insert_use.prefix_kind, ctx.config.prefer_no_std)\n+        .into_iter()\n+        .filter(ns_filter)\n+        .filter(|import| {\n+            !ctx.is_item_hidden(&import.item_to_import)\n+                && !ctx.is_item_hidden(&import.original_item)\n+        })\n+        .sorted_by_key(|located_import| {\n+            compute_fuzzy_completion_order_key(&located_import.import_path, &user_input_lowercased)\n+        })\n+        .filter_map(|import| {\n+            render_resolution_with_import(RenderContext::new(ctx), path_ctx, import)\n+        })\n+        .map(|builder| builder.build())\n+        .for_each(|item| acc.add(item));\n     Some(())\n }\n \n@@ -305,30 +297,22 @@ fn import_on_the_fly_pat_(\n     };\n     let user_input_lowercased = potential_import_name.to_lowercase();\n \n-    acc.add_all(\n-        import_assets\n-            .search_for_imports(\n-                &ctx.sema,\n-                ctx.config.insert_use.prefix_kind,\n-                ctx.config.prefer_no_std,\n-            )\n-            .into_iter()\n-            .filter(ns_filter)\n-            .filter(|import| {\n-                !ctx.is_item_hidden(&import.item_to_import)\n-                    && !ctx.is_item_hidden(&import.original_item)\n-            })\n-            .sorted_by_key(|located_import| {\n-                compute_fuzzy_completion_order_key(\n-                    &located_import.import_path,\n-                    &user_input_lowercased,\n-                )\n-            })\n-            .filter_map(|import| {\n-                render_resolution_with_import_pat(RenderContext::new(ctx), pattern_ctx, import)\n-            })\n-            .map(|builder| builder.build()),\n-    );\n+    import_assets\n+        .search_for_imports(&ctx.sema, ctx.config.insert_use.prefix_kind, ctx.config.prefer_no_std)\n+        .into_iter()\n+        .filter(ns_filter)\n+        .filter(|import| {\n+            !ctx.is_item_hidden(&import.item_to_import)\n+                && !ctx.is_item_hidden(&import.original_item)\n+        })\n+        .sorted_by_key(|located_import| {\n+            compute_fuzzy_completion_order_key(&located_import.import_path, &user_input_lowercased)\n+        })\n+        .filter_map(|import| {\n+            render_resolution_with_import_pat(RenderContext::new(ctx), pattern_ctx, import)\n+        })\n+        .map(|builder| builder.build())\n+        .for_each(|item| acc.add(item));\n     Some(())\n }\n "}, {"sha": "e95cae9d67ff0f4161f5aee305b5774908044e60", "filename": "crates/ide-completion/src/item.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/33ee157f3b05865984957953df21f4711f8e5cd6/crates%2Fide-completion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33ee157f3b05865984957953df21f4711f8e5cd6/crates%2Fide-completion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fitem.rs?ref=33ee157f3b05865984957953df21f4711f8e5cd6", "patch": "@@ -410,7 +410,12 @@ impl Builder {\n         resolution: hir::ScopeDef,\n     ) -> Self {\n         let doc_aliases = ctx.doc_aliases_in_scope(resolution);\n-        render_path_resolution(RenderContext::new(ctx).doc_aliases(doc_aliases), path_ctx, local_name, resolution)\n+        render_path_resolution(\n+            RenderContext::new(ctx).doc_aliases(doc_aliases),\n+            path_ctx,\n+            local_name,\n+            resolution,\n+        )\n     }\n \n     pub(crate) fn build(self) -> CompletionItem {"}, {"sha": "9673252ff52191dd3031a8733a0a1d746b4f975d", "filename": "crates/ide-completion/src/render.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/33ee157f3b05865984957953df21f4711f8e5cd6/crates%2Fide-completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33ee157f3b05865984957953df21f4711f8e5cd6/crates%2Fide-completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender.rs?ref=33ee157f3b05865984957953df21f4711f8e5cd6", "patch": "@@ -14,7 +14,6 @@ use hir::{AsAssocItem, HasAttrs, HirDisplay, ScopeDef};\n use ide_db::{\n     helpers::item_name, imports::import_assets::LocatedImport, RootDatabase, SnippetCap, SymbolKind,\n };\n-use itertools::Itertools;\n use syntax::{AstNode, SmolStr, SyntaxKind, TextRange};\n \n use crate::{\n@@ -210,7 +209,9 @@ pub(crate) fn render_resolution_with_import(\n ) -> Option<Builder> {\n     let resolution = ScopeDef::from(import_edit.original_item);\n     let local_name = scope_def_to_name(resolution, &ctx, &import_edit)?;\n-\n+    //this now just renders the alias text, but we need to find the aliases earlier and call this with the alias instead\n+    let doc_aliases = ctx.completion.doc_aliases_in_scope(resolution);\n+    let ctx = ctx.doc_aliases(doc_aliases);\n     Some(render_resolution_path(ctx, path_ctx, local_name, Some(import_edit), resolution))\n }\n "}, {"sha": "e23f3ae72ebdb70a8c62cf046c053d95da9bde7d", "filename": "crates/ide-completion/src/tests/special.rs", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/33ee157f3b05865984957953df21f4711f8e5cd6/crates%2Fide-completion%2Fsrc%2Ftests%2Fspecial.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33ee157f3b05865984957953df21f4711f8e5cd6/crates%2Fide-completion%2Fsrc%2Ftests%2Fspecial.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fspecial.rs?ref=33ee157f3b05865984957953df21f4711f8e5cd6", "patch": "@@ -1188,4 +1188,39 @@ fn here_we_go() {\n             st Bar (alias Qux)\n         \"#]],\n     );\n-}\n\\ No newline at end of file\n+}\n+\n+#[test]\n+fn completes_flyimport_with_doc_alias_in_another_mod() {\n+    check(\n+        r#\"\n+mod foo {\n+    #[doc(alias = \"Qux\")]\n+    pub struct Bar();\n+}\n+\n+fn here_we_go() {\n+    let foo = Bar$0\n+}\n+\"#,\n+        expect![[r#\"\n+            fn here_we_go()           fn()\n+            md foo\n+            st Bar (alias Qux) (use foo::Bar)\n+            bt u32\n+            kw crate::\n+            kw false\n+            kw for\n+            kw if\n+            kw if let\n+            kw loop\n+            kw match\n+            kw return\n+            kw self::\n+            kw true\n+            kw unsafe\n+            kw while\n+            kw while let\n+        \"#]],\n+    );\n+}"}]}