{"sha": "af4e75533f2c071330e740e2fa94b131e3a2b538", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmNGU3NTUzM2YyYzA3MTMzMGU3NDBlMmZhOTRiMTMxZTNhMmI1Mzg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-10-20T13:38:11Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-10-20T13:38:11Z"}, "message": "Rename declaration_name -> display_name\n\nDeclaration names sounds like a name of declaration -- something you\ncan use for analysis. It empathically isn't, and is just a label\ndisplayed in various UI. It's important not to confuse the two, least\nwe accidentally mix semantics with UI (I believe, there's already a\ncase of this in the FamousDefs at least).", "tree": {"sha": "6f517a43814751d8b1ea478b5ed03baf57b4f0b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f517a43814751d8b1ea478b5ed03baf57b4f0b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af4e75533f2c071330e740e2fa94b131e3a2b538", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af4e75533f2c071330e740e2fa94b131e3a2b538", "html_url": "https://github.com/rust-lang/rust/commit/af4e75533f2c071330e740e2fa94b131e3a2b538", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af4e75533f2c071330e740e2fa94b131e3a2b538/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be762ccccd5a86632e60351518528d078785a3e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/be762ccccd5a86632e60351518528d078785a3e2", "html_url": "https://github.com/rust-lang/rust/commit/be762ccccd5a86632e60351518528d078785a3e2"}], "stats": {"total": 63, "additions": 28, "deletions": 35}, "files": [{"sha": "4e89a7aedb2bc15b4ee094de4f6b58d75c26abab", "filename": "crates/assists/src/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af4e75533f2c071330e740e2fa94b131e3a2b538/crates%2Fassists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af4e75533f2c071330e740e2fa94b131e3a2b538/crates%2Fassists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Futils.rs?ref=af4e75533f2c071330e740e2fa94b131e3a2b538", "patch": "@@ -406,7 +406,7 @@ pub use prelude::*;\n         let std_crate = path.next()?;\n         let std_crate = if self\n             .1\n-            .declaration_name(db)\n+            .display_name(db)\n             .map(|name| name.to_string() == std_crate)\n             .unwrap_or(false)\n         {"}, {"sha": "eb3aac88dc2cff3223fb21fb876131cc0668a4fb", "filename": "crates/base_db/src/input.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/af4e75533f2c071330e740e2fa94b131e3a2b538/crates%2Fbase_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af4e75533f2c071330e740e2fa94b131e3a2b538/crates%2Fbase_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Finput.rs?ref=af4e75533f2c071330e740e2fa94b131e3a2b538", "patch": "@@ -127,11 +127,13 @@ impl PartialEq for ProcMacro {\n pub struct CrateData {\n     pub root_file_id: FileId,\n     pub edition: Edition,\n-    /// A name used in the package's project declaration: for Cargo projects, it's [package].name,\n-    /// can be different for other project types or even absent (a dummy crate for the code snippet, for example).\n-    /// NOTE: The crate can be referenced as a dependency under a different name,\n-    /// this one should be used when working with crate hierarchies.\n-    pub declaration_name: Option<CrateName>,\n+    /// A name used in the package's project declaration: for Cargo projects,\n+    /// it's [package].name, can be different for other project types or even\n+    /// absent (a dummy crate for the code snippet, for example).\n+    ///\n+    /// For purposes of analysis, crates are anonymous (only names in\n+    /// `Dependency` matters), this name should only be used for UI.\n+    pub display_name: Option<CrateName>,\n     pub cfg_options: CfgOptions,\n     pub env: Env,\n     pub dependencies: Vec<Dependency>,\n@@ -160,7 +162,7 @@ impl CrateGraph {\n         &mut self,\n         file_id: FileId,\n         edition: Edition,\n-        declaration_name: Option<CrateName>,\n+        display_name: Option<CrateName>,\n         cfg_options: CfgOptions,\n         env: Env,\n         proc_macro: Vec<(SmolStr, Arc<dyn tt::TokenExpander>)>,\n@@ -171,7 +173,7 @@ impl CrateGraph {\n         let data = CrateData {\n             root_file_id: file_id,\n             edition,\n-            declaration_name,\n+            display_name,\n             cfg_options,\n             env,\n             proc_macro,\n@@ -310,8 +312,8 @@ impl CrateGraph {\n         }\n     }\n \n-    fn hacky_find_crate(&self, declaration_name: &str) -> Option<CrateId> {\n-        self.iter().find(|it| self[*it].declaration_name.as_deref() == Some(declaration_name))\n+    fn hacky_find_crate(&self, display_name: &str) -> Option<CrateId> {\n+        self.iter().find(|it| self[*it].display_name.as_deref() == Some(display_name))\n     }\n }\n "}, {"sha": "64f3fbe3102816fb791990fa5441910967eebb7f", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af4e75533f2c071330e740e2fa94b131e3a2b538/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af4e75533f2c071330e740e2fa94b131e3a2b538/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=af4e75533f2c071330e740e2fa94b131e3a2b538", "patch": "@@ -103,8 +103,8 @@ impl Crate {\n         db.crate_graph()[self.id].edition\n     }\n \n-    pub fn declaration_name(self, db: &dyn HirDatabase) -> Option<CrateName> {\n-        db.crate_graph()[self.id].declaration_name.clone()\n+    pub fn display_name(self, db: &dyn HirDatabase) -> Option<CrateName> {\n+        db.crate_graph()[self.id].display_name.clone()\n     }\n \n     pub fn query_external_importables("}, {"sha": "1e24f29a81f4a400b36e69f9343ab7edd1761776", "filename": "crates/hir_def/src/import_map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/af4e75533f2c071330e740e2fa94b131e3a2b538/crates%2Fhir_def%2Fsrc%2Fimport_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af4e75533f2c071330e740e2fa94b131e3a2b538/crates%2Fhir_def%2Fsrc%2Fimport_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fimport_map.rs?ref=af4e75533f2c071330e740e2fa94b131e3a2b538", "patch": "@@ -356,7 +356,7 @@ mod tests {\n         let krate = crate_graph\n             .iter()\n             .find(|krate| {\n-                crate_graph[*krate].declaration_name.as_ref().map(|n| n.to_string())\n+                crate_graph[*krate].display_name.as_ref().map(|n| n.to_string())\n                     == Some(crate_name.to_string())\n             })\n             .unwrap();\n@@ -375,7 +375,7 @@ mod tests {\n                     let path = map.path_of(item).unwrap();\n                     format!(\n                         \"{}::{} ({})\\n\",\n-                        crate_graph[krate].declaration_name.as_ref().unwrap(),\n+                        crate_graph[krate].display_name.as_ref().unwrap(),\n                         path,\n                         mark\n                     )\n@@ -416,7 +416,7 @@ mod tests {\n             .iter()\n             .filter_map(|krate| {\n                 let cdata = &crate_graph[krate];\n-                let name = cdata.declaration_name.as_ref()?;\n+                let name = cdata.display_name.as_ref()?;\n \n                 let map = db.import_map(krate);\n "}, {"sha": "3d04f81c64383d5cccee9a71269c701e14df042a", "filename": "crates/hir_def/src/nameres.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/af4e75533f2c071330e740e2fa94b131e3a2b538/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af4e75533f2c071330e740e2fa94b131e3a2b538/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres.rs?ref=af4e75533f2c071330e740e2fa94b131e3a2b538", "patch": "@@ -172,11 +172,7 @@ pub struct ModuleData {\n impl CrateDefMap {\n     pub(crate) fn crate_def_map_query(db: &dyn DefDatabase, krate: CrateId) -> Arc<CrateDefMap> {\n         let _p = profile::span(\"crate_def_map_query\").detail(|| {\n-            db.crate_graph()[krate]\n-                .declaration_name\n-                .as_ref()\n-                .map(ToString::to_string)\n-                .unwrap_or_default()\n+            db.crate_graph()[krate].display_name.as_deref().unwrap_or_default().to_string()\n         });\n         let def_map = {\n             let edition = db.crate_graph()[krate].edition;"}, {"sha": "b9d8b8a2b5b9f189e98cc8b07bd4b15aebeb5096", "filename": "crates/ide/src/doc_links.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/af4e75533f2c071330e740e2fa94b131e3a2b538/crates%2Fide%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af4e75533f2c071330e740e2fa94b131e3a2b538/crates%2Fide%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links.rs?ref=af4e75533f2c071330e740e2fa94b131e3a2b538", "patch": "@@ -130,7 +130,7 @@ fn get_doc_link(db: &RootDatabase, definition: Definition) -> Option<String> {\n     let module = definition.module(db)?;\n     let krate = module.krate();\n     let import_map = db.import_map(krate.into());\n-    let base = once(krate.declaration_name(db)?.to_string())\n+    let base = once(krate.display_name(db)?.to_string())\n         .chain(import_map.path_of(ns)?.segments.iter().map(|name| name.to_string()))\n         .join(\"/\");\n \n@@ -188,7 +188,7 @@ fn rewrite_intra_doc_link(\n     let krate = resolved.module(db)?.krate();\n     let canonical_path = resolved.canonical_path(db)?;\n     let new_target = get_doc_url(db, &krate)?\n-        .join(&format!(\"{}/\", krate.declaration_name(db)?))\n+        .join(&format!(\"{}/\", krate.display_name(db)?))\n         .ok()?\n         .join(&canonical_path.replace(\"::\", \"/\"))\n         .ok()?\n@@ -208,7 +208,7 @@ fn rewrite_url_link(db: &RootDatabase, def: ModuleDef, target: &str) -> Option<S\n     let module = def.module(db)?;\n     let krate = module.krate();\n     let canonical_path = def.canonical_path(db)?;\n-    let base = format!(\"{}/{}\", krate.declaration_name(db)?, canonical_path.replace(\"::\", \"/\"));\n+    let base = format!(\"{}/{}\", krate.display_name(db)?, canonical_path.replace(\"::\", \"/\"));\n \n     get_doc_url(db, &krate)\n         .and_then(|url| url.join(&base).ok())\n@@ -357,7 +357,7 @@ fn get_doc_url(db: &RootDatabase, krate: &Crate) -> Option<Url> {\n             //\n             // FIXME: clicking on the link should just open the file in the editor,\n             // instead of falling back to external urls.\n-            Some(format!(\"https://docs.rs/{}/*/\", krate.declaration_name(db)?))\n+            Some(format!(\"https://docs.rs/{}/*/\", krate.display_name(db)?))\n         })\n         .and_then(|s| Url::parse(&s).ok())\n }"}, {"sha": "6466422c5ee61985236abcc9c401778747b63a47", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af4e75533f2c071330e740e2fa94b131e3a2b538/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af4e75533f2c071330e740e2fa94b131e3a2b538/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=af4e75533f2c071330e740e2fa94b131e3a2b538", "patch": "@@ -300,7 +300,7 @@ fn definition_owner_name(db: &RootDatabase, def: &Definition) -> Option<String>\n \n fn render_path(db: &RootDatabase, module: Module, item_name: Option<String>) -> String {\n     let crate_name =\n-        db.crate_graph()[module.krate().into()].declaration_name.as_ref().map(ToString::to_string);\n+        db.crate_graph()[module.krate().into()].display_name.as_ref().map(|it| it.to_string());\n     let module_path = module\n         .path_to_root(db)\n         .into_iter()"}, {"sha": "f5f3663542b3e84aada9c43387456c10a43f335b", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af4e75533f2c071330e740e2fa94b131e3a2b538/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af4e75533f2c071330e740e2fa94b131e3a2b538/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=af4e75533f2c071330e740e2fa94b131e3a2b538", "patch": "@@ -215,7 +215,7 @@ fn hint_iterator(\n         .last()\n         .and_then(|strukt| strukt.as_adt())?;\n     let krate = strukt.krate(db)?;\n-    if krate.declaration_name(db).as_deref() != Some(\"core\") {\n+    if krate.display_name(db).as_deref() != Some(\"core\") {\n         return None;\n     }\n     let iter_trait = FamousDefs(sema, krate).core_iter_Iterator()?;"}, {"sha": "6944dbcd2a761b2e9bf3df7a1ba0b624773d0647", "filename": "crates/ide/src/prime_caches.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/af4e75533f2c071330e740e2fa94b131e3a2b538/crates%2Fide%2Fsrc%2Fprime_caches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af4e75533f2c071330e740e2fa94b131e3a2b538/crates%2Fide%2Fsrc%2Fprime_caches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fprime_caches.rs?ref=af4e75533f2c071330e740e2fa94b131e3a2b538", "patch": "@@ -32,8 +32,7 @@ pub(crate) fn prime_caches(db: &RootDatabase, cb: &(dyn Fn(PrimeCachesProgress)\n     // Unfortunately rayon prevents panics from propagation out of a `scope`, which breaks\n     // cancellation, so we cannot use rayon.\n     for (i, krate) in topo.iter().enumerate() {\n-        let crate_name =\n-            graph[*krate].declaration_name.as_ref().map(ToString::to_string).unwrap_or_default();\n+        let crate_name = graph[*krate].display_name.as_deref().unwrap_or_default().to_string();\n \n         cb(PrimeCachesProgress::StartedOnCrate {\n             on_crate: crate_name,"}, {"sha": "0af84daa0a7daf5011ebe5ce6c97a5dc82a0dfbf", "filename": "crates/ide/src/status.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af4e75533f2c071330e740e2fa94b131e3a2b538/crates%2Fide%2Fsrc%2Fstatus.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af4e75533f2c071330e740e2fa94b131e3a2b538/crates%2Fide%2Fsrc%2Fstatus.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fstatus.rs?ref=af4e75533f2c071330e740e2fa94b131e3a2b538", "patch": "@@ -45,7 +45,7 @@ pub(crate) fn status(db: &RootDatabase, file_id: Option<FileId>) -> String {\n         match krate {\n             Some(krate) => {\n                 let crate_graph = db.crate_graph();\n-                let display_crate = |krate: CrateId| match &crate_graph[krate].declaration_name {\n+                let display_crate = |krate: CrateId| match &crate_graph[krate].display_name {\n                     Some(it) => format!(\"{}({:?})\", it, krate),\n                     None => format!(\"{:?}\", krate),\n                 };"}, {"sha": "a89993a2b2f0973734f97134f0a0c5156c37b2a6", "filename": "crates/rust-analyzer/src/cli/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/af4e75533f2c071330e740e2fa94b131e3a2b538/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af4e75533f2c071330e740e2fa94b131e3a2b538/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs?ref=af4e75533f2c071330e740e2fa94b131e3a2b538", "patch": "@@ -36,12 +36,8 @@ pub fn diagnostics(path: &Path, load_output_dirs: bool, with_proc_macro: bool) -\n     for module in work {\n         let file_id = module.definition_source(db).file_id.original_file(db);\n         if !visited_files.contains(&file_id) {\n-            let crate_name = module\n-                .krate()\n-                .declaration_name(db)\n-                .as_ref()\n-                .map(ToString::to_string)\n-                .unwrap_or_else(|| \"unknown\".to_string());\n+            let crate_name =\n+                module.krate().display_name(db).as_deref().unwrap_or(\"unknown\").to_string();\n             println!(\"processing crate: {}, module: {}\", crate_name, _vfs.file_path(file_id));\n             for diagnostic in analysis.diagnostics(&DiagnosticsConfig::default(), file_id).unwrap()\n             {"}]}