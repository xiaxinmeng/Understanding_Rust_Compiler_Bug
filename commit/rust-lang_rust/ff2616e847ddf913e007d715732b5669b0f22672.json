{"sha": "ff2616e847ddf913e007d715732b5669b0f22672", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmMjYxNmU4NDdkZGY5MTNlMDA3ZDcxNTczMmI1NjY5YjBmMjI2NzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-01T09:22:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-01T09:22:15Z"}, "message": "auto merge of #17630 : sfackler/rust/cfg-warnings, r=brson\n\nCloses #17490", "tree": {"sha": "e279e0568b2bc92c8f99d01a02a45a3a1fe040ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e279e0568b2bc92c8f99d01a02a45a3a1fe040ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff2616e847ddf913e007d715732b5669b0f22672", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff2616e847ddf913e007d715732b5669b0f22672", "html_url": "https://github.com/rust-lang/rust/commit/ff2616e847ddf913e007d715732b5669b0f22672", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff2616e847ddf913e007d715732b5669b0f22672/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60e7317345f246a8169bbfe721473f693d54cade", "url": "https://api.github.com/repos/rust-lang/rust/commits/60e7317345f246a8169bbfe721473f693d54cade", "html_url": "https://github.com/rust-lang/rust/commit/60e7317345f246a8169bbfe721473f693d54cade"}, {"sha": "b4909f6eb713b51c73010e888053a1aed7b8fb64", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4909f6eb713b51c73010e888053a1aed7b8fb64", "html_url": "https://github.com/rust-lang/rust/commit/b4909f6eb713b51c73010e888053a1aed7b8fb64"}], "stats": {"total": 680, "additions": 322, "deletions": 358}, "files": [{"sha": "0003de117a8359250ee02835d1c756e3948591d8", "filename": "src/etc/mklldeps.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff2616e847ddf913e007d715732b5669b0f22672/src%2Fetc%2Fmklldeps.py", "raw_url": "https://github.com/rust-lang/rust/raw/ff2616e847ddf913e007d715732b5669b0f22672/src%2Fetc%2Fmklldeps.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fmklldeps.py?ref=ff2616e847ddf913e007d715732b5669b0f22672", "patch": "@@ -67,7 +67,7 @@ def run(args):\n         \"target_os = \\\"\" + os + \"\\\"\",\n     ]\n \n-    f.write(\"#[cfg(\" + ', '.join(cfg) + \")]\\n\")\n+    f.write(\"#[cfg(all(\" + ', '.join(cfg) + \"))]\\n\")\n \n     version = run([llconfig, '--version']).strip()\n "}, {"sha": "0d2872bcba06bbacf9eec24d7ec1a06cc1499fb7", "filename": "src/liballoc/heap.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ff2616e847ddf913e007d715732b5669b0f22672/src%2Fliballoc%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2616e847ddf913e007d715732b5669b0f22672/src%2Fliballoc%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fheap.rs?ref=ff2616e847ddf913e007d715732b5669b0f22672", "patch": "@@ -111,12 +111,12 @@ unsafe fn exchange_free(ptr: *mut u8, size: uint, align: uint) {\n // The minimum alignment guaranteed by the architecture. This value is used to\n // add fast paths for low alignment values. In practice, the alignment is a\n // constant at the call site and the branch will be optimized out.\n-#[cfg(target_arch = \"arm\")]\n-#[cfg(target_arch = \"mips\")]\n-#[cfg(target_arch = \"mipsel\")]\n+#[cfg(any(target_arch = \"arm\",\n+          target_arch = \"mips\",\n+          target_arch = \"mipsel\"))]\n static MIN_ALIGN: uint = 8;\n-#[cfg(target_arch = \"x86\")]\n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(any(target_arch = \"x86\",\n+          target_arch = \"x86_64\"))]\n static MIN_ALIGN: uint = 16;\n \n #[cfg(jemalloc)]\n@@ -146,7 +146,7 @@ mod imp {\n     }\n \n     // -lpthread needs to occur after -ljemalloc, the earlier argument isn't enough\n-    #[cfg(not(windows), not(target_os = \"android\"))]\n+    #[cfg(all(not(windows), not(target_os = \"android\")))]\n     #[link(name = \"pthread\")]\n     extern {}\n \n@@ -206,7 +206,7 @@ mod imp {\n     }\n }\n \n-#[cfg(not(jemalloc), unix)]\n+#[cfg(all(not(jemalloc), unix))]\n mod imp {\n     use core::cmp;\n     use core::ptr;\n@@ -268,7 +268,7 @@ mod imp {\n     pub fn stats_print() {}\n }\n \n-#[cfg(not(jemalloc), windows)]\n+#[cfg(all(not(jemalloc), windows))]\n mod imp {\n     use libc::{c_void, size_t};\n     use libc;"}, {"sha": "a665d41aadf96531ec64a067366fb98358201547", "filename": "src/libgreen/context.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ff2616e847ddf913e007d715732b5669b0f22672/src%2Flibgreen%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2616e847ddf913e007d715732b5669b0f22672/src%2Flibgreen%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fcontext.rs?ref=ff2616e847ddf913e007d715732b5669b0f22672", "patch": "@@ -188,27 +188,27 @@ fn initialize_call_frame(regs: &mut Registers, fptr: InitFn, arg: uint,\n \n // windows requires saving more registers (both general and XMM), so the windows\n // register context must be larger.\n-#[cfg(windows, target_arch = \"x86_64\")]\n+#[cfg(all(windows, target_arch = \"x86_64\"))]\n #[repr(C)]\n struct Registers {\n     gpr:[libc::uintptr_t, ..14],\n     _xmm:[simd::u32x4, ..10]\n }\n-#[cfg(not(windows), target_arch = \"x86_64\")]\n+#[cfg(all(not(windows), target_arch = \"x86_64\"))]\n #[repr(C)]\n struct Registers {\n     gpr:[libc::uintptr_t, ..10],\n     _xmm:[simd::u32x4, ..6]\n }\n \n-#[cfg(windows, target_arch = \"x86_64\")]\n+#[cfg(all(windows, target_arch = \"x86_64\"))]\n fn new_regs() -> Box<Registers> {\n     box() Registers {\n         gpr:[0,..14],\n         _xmm:[simd::u32x4(0,0,0,0),..10]\n     }\n }\n-#[cfg(not(windows), target_arch = \"x86_64\")]\n+#[cfg(all(not(windows), target_arch = \"x86_64\"))]\n fn new_regs() -> Box<Registers> {\n     box() Registers {\n         gpr:[0,..10],\n@@ -288,16 +288,13 @@ fn initialize_call_frame(regs: &mut Registers, fptr: InitFn, arg: uint,\n     regs[14] = rust_bootstrap_green_task as libc::uintptr_t;   // #56 pc, r14 --> lr\n }\n \n-#[cfg(target_arch = \"mips\")]\n-#[cfg(target_arch = \"mipsel\")]\n+#[cfg(any(target_arch = \"mips\", target_arch = \"mipsel\"))]\n type Registers = [libc::uintptr_t, ..32];\n \n-#[cfg(target_arch = \"mips\")]\n-#[cfg(target_arch = \"mipsel\")]\n+#[cfg(any(target_arch = \"mips\", target_arch = \"mipsel\"))]\n fn new_regs() -> Box<Registers> { box {[0, .. 32]} }\n \n-#[cfg(target_arch = \"mips\")]\n-#[cfg(target_arch = \"mipsel\")]\n+#[cfg(any(target_arch = \"mips\", target_arch = \"mipsel\"))]\n fn initialize_call_frame(regs: &mut Registers, fptr: InitFn, arg: uint,\n                          procedure: raw::Procedure, sp: *mut uint) {\n     let sp = align_down(sp);"}, {"sha": "23b41f6c6e75bc2a8c2d1c83a1d5b140d1caae0a", "filename": "src/libgreen/stack.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ff2616e847ddf913e007d715732b5669b0f22672/src%2Flibgreen%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2616e847ddf913e007d715732b5669b0f22672/src%2Flibgreen%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fstack.rs?ref=ff2616e847ddf913e007d715732b5669b0f22672", "patch": "@@ -28,11 +28,10 @@ pub struct Stack {\n //\n // DragonFly BSD also seems to suffer from the same problem. When MAP_STACK is\n // used, it returns the same `ptr` multiple times.\n-#[cfg(not(windows), not(target_os = \"freebsd\"), not(target_os = \"dragonfly\"))]\n+#[cfg(not(any(windows, target_os = \"freebsd\", target_os = \"dragonfly\")))]\n static STACK_FLAGS: libc::c_int = libc::MAP_STACK | libc::MAP_PRIVATE |\n                                   libc::MAP_ANON;\n-#[cfg(target_os = \"freebsd\")]\n-#[cfg(target_os = \"dragonfly\")]\n+#[cfg(any(target_os = \"freebsd\", target_os = \"dragonfly\"))]\n static STACK_FLAGS: libc::c_int = libc::MAP_PRIVATE | libc::MAP_ANON;\n #[cfg(windows)]\n static STACK_FLAGS: libc::c_int = 0;"}, {"sha": "affa452eb49de06b09d79e1f207cd97f8c88f6d0", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 93, "deletions": 108, "changes": 201, "blob_url": "https://github.com/rust-lang/rust/blob/ff2616e847ddf913e007d715732b5669b0f22672/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2616e847ddf913e007d715732b5669b0f22672/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=ff2616e847ddf913e007d715732b5669b0f22672", "patch": "@@ -278,32 +278,31 @@ pub use funcs::bsd43::{shutdown};\n #[cfg(windows)] pub use funcs::extra::msvcrt::{get_osfhandle, open_osfhandle};\n #[cfg(windows)] pub use funcs::extra::winsock::{ioctlsocket};\n \n-#[cfg(target_os = \"linux\")] #[cfg(target_os = \"android\")]\n-#[cfg(target_os = \"freebsd\")] #[cfg(target_os = \"dragonfly\")]\n+#[cfg(any(target_os = \"linux\",\n+          target_os = \"android\",\n+          target_os = \"freebsd\",\n+          target_os = \"dragonfly\"))]\n pub use consts::os::posix01::{CLOCK_REALTIME, CLOCK_MONOTONIC};\n \n-#[cfg(target_os = \"linux\")] #[cfg(target_os = \"android\")]\n+#[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n pub use funcs::posix01::unistd::{fdatasync};\n-#[cfg(target_os = \"linux\")] #[cfg(target_os = \"android\")]\n+#[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n pub use types::os::arch::extra::{sockaddr_ll};\n-#[cfg(target_os = \"linux\")] #[cfg(target_os = \"android\")]\n+#[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n pub use consts::os::extra::{AF_PACKET};\n \n-#[cfg(unix, not(target_os = \"freebsd\"))]\n+#[cfg(all(unix, not(target_os = \"freebsd\")))]\n pub use consts::os::extra::{MAP_STACK};\n \n-#[cfg(target_os = \"freebsd\")]\n-#[cfg(target_os = \"dragonfly\")]\n+#[cfg(any(target_os = \"freebsd\", target_os = \"dragonfly\"))]\n pub use consts::os::bsd44::{TCP_KEEPIDLE};\n \n-#[cfg(target_os = \"macos\")]\n-#[cfg(target_os = \"ios\")]\n+#[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n pub use consts::os::bsd44::{TCP_KEEPALIVE};\n-#[cfg(target_os = \"macos\")]\n-#[cfg(target_os = \"ios\")]\n+#[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n pub use consts::os::extra::{F_FULLFSYNC};\n-#[cfg(target_os = \"macos\")]\n-#[cfg(target_os = \"ios\")]\n+\n+#[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n pub use types::os::arch::extra::{mach_timebase_info};\n \n \n@@ -372,8 +371,7 @@ pub mod types {\n \n     // Standard types that are scalar but vary by OS and arch.\n \n-    #[cfg(target_os = \"linux\")]\n-    #[cfg(target_os = \"android\")]\n+    #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n     pub mod os {\n         pub mod common {\n             pub mod posix01 {\n@@ -506,10 +504,10 @@ pub mod types {\n             }\n         }\n \n-        #[cfg(target_arch = \"x86\")]\n-        #[cfg(target_arch = \"arm\")]\n-        #[cfg(target_arch = \"mips\")]\n-        #[cfg(target_arch = \"mipsel\")]\n+        #[cfg(any(target_arch = \"x86\",\n+                  target_arch = \"arm\",\n+                  target_arch = \"mips\",\n+                  target_arch = \"mipsel\"))]\n         pub mod arch {\n             pub mod c95 {\n                 pub type c_char = i8;\n@@ -536,9 +534,9 @@ pub mod types {\n                 pub type intptr_t = i32;\n                 pub type uintptr_t = u32;\n             }\n-            #[cfg(target_arch = \"x86\")]\n-            #[cfg(target_arch = \"mips\")]\n-            #[cfg(target_arch = \"mipsel\")]\n+            #[cfg(any(target_arch = \"x86\",\n+                      target_arch = \"mips\",\n+                      target_arch = \"mipsel\"))]\n             pub mod posix88 {\n                 pub type off_t = i32;\n                 pub type dev_t = u64;\n@@ -652,8 +650,7 @@ pub mod types {\n                     pub __size: [u32, ..9]\n                 }\n             }\n-            #[cfg(target_arch = \"mips\")]\n-            #[cfg(target_arch = \"mipsel\")]\n+            #[cfg(any(target_arch = \"mips\", target_arch = \"mipsel\"))]\n             pub mod posix01 {\n                 use types::os::arch::c95::{c_long, c_ulong, time_t};\n                 use types::os::arch::posix88::{gid_t, ino_t};\n@@ -1660,8 +1657,7 @@ pub mod types {\n         }\n     }\n \n-    #[cfg(target_os = \"macos\")]\n-    #[cfg(target_os = \"ios\")]\n+    #[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n     pub mod os {\n         pub mod common {\n             pub mod posix01 {\n@@ -1793,8 +1789,7 @@ pub mod types {\n             }\n         }\n \n-        #[cfg(target_arch = \"arm\")]\n-        #[cfg(target_arch = \"x86\")]\n+        #[cfg(any(target_arch = \"arm\", target_arch = \"x86\"))]\n         pub mod arch {\n             pub mod c95 {\n                 pub type c_char = i8;\n@@ -2383,8 +2378,7 @@ pub mod consts {\n     }\n \n \n-    #[cfg(target_os = \"linux\")]\n-    #[cfg(target_os = \"android\")]\n+    #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n     pub mod os {\n         pub mod c95 {\n             use types::os::arch::c95::{c_int, c_uint};\n@@ -2407,9 +2401,9 @@ pub mod consts {\n         }\n         pub mod c99 {\n         }\n-        #[cfg(target_arch = \"x86\")]\n-        #[cfg(target_arch = \"x86_64\")]\n-        #[cfg(target_arch = \"arm\")]\n+        #[cfg(any(target_arch = \"x86\",\n+                  target_arch = \"x86_64\",\n+                  target_arch = \"arm\"))]\n         pub mod posix88 {\n             use types::os::arch::c95::c_int;\n             use types::common::c95::c_void;\n@@ -2621,8 +2615,7 @@ pub mod consts {\n             pub static EHWPOISON: c_int = 133;\n         }\n \n-        #[cfg(target_arch = \"mips\")]\n-        #[cfg(target_arch = \"mipsel\")]\n+        #[cfg(any(target_arch = \"mips\", target_arch = \"mipsel\"))]\n         pub mod posix88 {\n             use types::os::arch::c95::c_int;\n             use types::common::c95::c_void;\n@@ -2898,23 +2891,24 @@ pub mod consts {\n             #[cfg(target_os = \"android\")]\n             pub static PTHREAD_STACK_MIN: size_t = 8192;\n \n-            #[cfg(target_arch = \"arm\", target_os = \"linux\")]\n-            #[cfg(target_arch = \"x86\", target_os = \"linux\")]\n-            #[cfg(target_arch = \"x86_64\", target_os = \"linux\")]\n+            #[cfg(all(target_os = \"linux\",\n+                      any(target_arch = \"arm\",\n+                          target_arch = \"x86\",\n+                          target_arch = \"x86_64\")))]\n             pub static PTHREAD_STACK_MIN: size_t = 16384;\n \n-            #[cfg(target_arch = \"mips\", target_os = \"linux\")]\n-            #[cfg(target_arch = \"mipsel\", target_os = \"linux\")]\n+            #[cfg(all(target_os = \"linux\",\n+                      any(target_arch = \"mips\", target_arch = \"mipsel\")))]\n             pub static PTHREAD_STACK_MIN: size_t = 131072;\n \n             pub static CLOCK_REALTIME: c_int = 0;\n             pub static CLOCK_MONOTONIC: c_int = 1;\n         }\n         pub mod posix08 {\n         }\n-        #[cfg(target_arch = \"arm\")]\n-        #[cfg(target_arch = \"x86\")]\n-        #[cfg(target_arch = \"x86_64\")]\n+        #[cfg(any(target_arch = \"arm\",\n+                  target_arch = \"x86\",\n+                  target_arch = \"x86_64\"))]\n         pub mod bsd44 {\n             use types::os::arch::c95::c_int;\n \n@@ -2961,8 +2955,7 @@ pub mod consts {\n             pub static SHUT_WR: c_int = 1;\n             pub static SHUT_RDWR: c_int = 2;\n         }\n-        #[cfg(target_arch = \"mips\")]\n-        #[cfg(target_arch = \"mipsel\")]\n+        #[cfg(any(target_arch = \"mips\", target_arch = \"mipsel\"))]\n         pub mod bsd44 {\n             use types::os::arch::c95::c_int;\n \n@@ -3007,9 +3000,9 @@ pub mod consts {\n             pub static SHUT_WR: c_int = 1;\n             pub static SHUT_RDWR: c_int = 2;\n         }\n-        #[cfg(target_arch = \"x86\")]\n-        #[cfg(target_arch = \"x86_64\")]\n-        #[cfg(target_arch = \"arm\")]\n+        #[cfg(any(target_arch = \"x86\",\n+                  target_arch = \"x86_64\",\n+                  target_arch = \"arm\"))]\n         pub mod extra {\n             use types::os::arch::c95::c_int;\n \n@@ -3036,8 +3029,7 @@ pub mod consts {\n             pub static MAP_NONBLOCK : c_int = 0x010000;\n             pub static MAP_STACK : c_int = 0x020000;\n         }\n-        #[cfg(target_arch = \"mips\")]\n-        #[cfg(target_arch = \"mipsel\")]\n+        #[cfg(any(target_arch = \"mips\", target_arch = \"mipsel\"))]\n         pub mod extra {\n             use types::os::arch::c95::c_int;\n \n@@ -3160,8 +3152,7 @@ pub mod consts {\n         }\n     }\n \n-    #[cfg(target_os = \"freebsd\")]\n-    #[cfg(target_os = \"dragonfly\")]\n+    #[cfg(any(target_os = \"freebsd\", target_os = \"dragonfly\"))]\n     pub mod os {\n         pub mod c95 {\n             use types::os::arch::c95::{c_int, c_uint};\n@@ -3421,10 +3412,11 @@ pub mod consts {\n             #[cfg(target_arch = \"arm\")]\n             pub static PTHREAD_STACK_MIN: size_t = 4096;\n \n-            #[cfg(target_os = \"freebsd\", target_arch = \"mips\")]\n-            #[cfg(target_os = \"freebsd\", target_arch = \"mipsel\")]\n-            #[cfg(target_os = \"freebsd\", target_arch = \"x86\")]\n-            #[cfg(target_os = \"freebsd\", target_arch = \"x86_64\")]\n+            #[cfg(all(target_os = \"freebsd\",\n+                      any(target_arch = \"mips\",\n+                          target_arch = \"mipsel\",\n+                          target_arch = \"x86\",\n+                          target_arch = \"x86_64\")))]\n             pub static PTHREAD_STACK_MIN: size_t = 2048;\n \n             #[cfg(target_os = \"dragonfly\")]\n@@ -3569,8 +3561,7 @@ pub mod consts {\n         }\n     }\n \n-    #[cfg(target_os = \"macos\")]\n-    #[cfg(target_os = \"ios\")]\n+    #[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n     pub mod os {\n         pub mod c95 {\n             use types::os::arch::c95::{c_int, c_uint};\n@@ -4261,13 +4252,12 @@ pub mod funcs {\n         }\n     }\n \n-\n-    #[cfg(target_os = \"linux\")]\n-    #[cfg(target_os = \"android\")]\n-    #[cfg(target_os = \"macos\")]\n-    #[cfg(target_os = \"ios\")]\n-    #[cfg(target_os = \"freebsd\")]\n-    #[cfg(target_os = \"dragonfly\")]\n+    #[cfg(any(target_os = \"linux\",\n+              target_os = \"android\",\n+              target_os = \"macos\",\n+              target_os = \"ios\",\n+              target_os = \"freebsd\",\n+              target_os = \"dragonfly\"))]\n     pub mod posix88 {\n         pub mod stat_ {\n             use types::os::arch::c95::{c_char, c_int};\n@@ -4278,11 +4268,11 @@ pub mod funcs {\n                 pub fn chmod(path: *const c_char, mode: mode_t) -> c_int;\n                 pub fn fchmod(fd: c_int, mode: mode_t) -> c_int;\n \n-                #[cfg(target_os = \"linux\")]\n-                #[cfg(target_os = \"freebsd\")]\n-                #[cfg(target_os = \"dragonfly\")]\n-                #[cfg(target_os = \"android\")]\n-                #[cfg(target_os = \"ios\")]\n+                #[cfg(any(target_os = \"linux\",\n+                          target_os = \"freebsd\",\n+                          target_os = \"dragonfly\",\n+                          target_os = \"android\",\n+                          target_os = \"ios\"))]\n                 pub fn fstat(fildes: c_int, buf: *mut stat) -> c_int;\n \n                 #[cfg(target_os = \"macos\")]\n@@ -4292,11 +4282,11 @@ pub mod funcs {\n                 pub fn mkdir(path: *const c_char, mode: mode_t) -> c_int;\n                 pub fn mkfifo(path: *const c_char, mode: mode_t) -> c_int;\n \n-                #[cfg(target_os = \"linux\")]\n-                #[cfg(target_os = \"freebsd\")]\n-                #[cfg(target_os = \"dragonfly\")]\n-                #[cfg(target_os = \"android\")]\n-                #[cfg(target_os = \"ios\")]\n+                #[cfg(any(target_os = \"linux\",\n+                          target_os = \"freebsd\",\n+                          target_os = \"dragonfly\",\n+                          target_os = \"android\",\n+                          target_os = \"ios\"))]\n                 pub fn stat(path: *const c_char, buf: *mut stat) -> c_int;\n \n                 #[cfg(target_os = \"macos\")]\n@@ -4481,23 +4471,23 @@ pub mod funcs {\n \n     }\n \n-    #[cfg(target_os = \"linux\")]\n-    #[cfg(target_os = \"android\")]\n-    #[cfg(target_os = \"macos\")]\n-    #[cfg(target_os = \"ios\")]\n-    #[cfg(target_os = \"freebsd\")]\n-    #[cfg(target_os = \"dragonfly\")]\n+    #[cfg(any(target_os = \"linux\",\n+              target_os = \"android\",\n+              target_os = \"macos\",\n+              target_os = \"ios\",\n+              target_os = \"freebsd\",\n+              target_os = \"dragonfly\"))]\n     pub mod posix01 {\n         pub mod stat_ {\n             use types::os::arch::c95::{c_char, c_int};\n             use types::os::arch::posix01::stat;\n \n             extern {\n-                #[cfg(target_os = \"linux\")]\n-                #[cfg(target_os = \"freebsd\")]\n-                #[cfg(target_os = \"dragonfly\")]\n-                #[cfg(target_os = \"android\")]\n-                #[cfg(target_os = \"ios\")]\n+                #[cfg(any(target_os = \"linux\",\n+                          target_os = \"freebsd\",\n+                          target_os = \"dragonfly\",\n+                          target_os = \"android\",\n+                          target_os = \"ios\"))]\n                 pub fn lstat(path: *const c_char, buf: *mut stat) -> c_int;\n \n                 #[cfg(target_os = \"macos\")]\n@@ -4518,8 +4508,7 @@ pub mod funcs {\n \n                 pub fn fsync(fd: c_int) -> c_int;\n \n-                #[cfg(target_os = \"linux\")]\n-                #[cfg(target_os = \"android\")]\n+                #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n                 pub fn fdatasync(fd: c_int) -> c_int;\n \n                 pub fn setenv(name: *const c_char, val: *const c_char,\n@@ -4598,13 +4587,13 @@ pub mod funcs {\n     }\n \n \n-    #[cfg(target_os = \"windows\")]\n-    #[cfg(target_os = \"linux\")]\n-    #[cfg(target_os = \"android\")]\n-    #[cfg(target_os = \"macos\")]\n-    #[cfg(target_os = \"ios\")]\n-    #[cfg(target_os = \"freebsd\")]\n-    #[cfg(target_os = \"dragonfly\")]\n+    #[cfg(any(target_os = \"windows\",\n+              target_os = \"linux\",\n+              target_os = \"android\",\n+              target_os = \"macos\",\n+              target_os = \"ios\",\n+              target_os = \"freebsd\",\n+              target_os = \"dragonfly\"))]\n     pub mod posix08 {\n         pub mod unistd {\n         }\n@@ -4687,10 +4676,10 @@ pub mod funcs {\n         }\n     }\n \n-    #[cfg(target_os = \"macos\")]\n-    #[cfg(target_os = \"ios\")]\n-    #[cfg(target_os = \"freebsd\")]\n-    #[cfg(target_os = \"dragonfly\")]\n+    #[cfg(any(target_os = \"macos\",\n+              target_os = \"ios\",\n+              target_os = \"freebsd\",\n+              target_os = \"dragonfly\"))]\n     pub mod bsd44 {\n         use types::common::c95::{c_void};\n         use types::os::arch::c95::{c_char, c_uchar, c_int, c_uint, c_ulong, size_t};\n@@ -4723,8 +4712,7 @@ pub mod funcs {\n     }\n \n \n-    #[cfg(target_os = \"linux\")]\n-    #[cfg(target_os = \"android\")]\n+    #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n     pub mod bsd44 {\n         use types::common::c95::{c_void};\n         use types::os::arch::c95::{c_uchar, c_int, size_t};\n@@ -4744,8 +4732,7 @@ pub mod funcs {\n     pub mod bsd44 {\n     }\n \n-    #[cfg(target_os = \"macos\")]\n-    #[cfg(target_os = \"ios\")]\n+    #[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n     pub mod extra {\n         use types::os::arch::c95::{c_char, c_int};\n \n@@ -4755,13 +4742,11 @@ pub mod funcs {\n         }\n     }\n \n-    #[cfg(target_os = \"freebsd\")]\n-    #[cfg(target_os = \"dragonfly\")]\n+    #[cfg(any(target_os = \"freebsd\", target_os = \"dragonfly\"))]\n     pub mod extra {\n     }\n \n-    #[cfg(target_os = \"linux\")]\n-    #[cfg(target_os = \"android\")]\n+    #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n     pub mod extra {\n     }\n "}, {"sha": "2601d493443a17099ab64da5652a23a39029aa08", "filename": "src/libnative/io/c_unix.rs", "status": "modified", "additions": 43, "deletions": 42, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/ff2616e847ddf913e007d715732b5669b0f22672/src%2Flibnative%2Fio%2Fc_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2616e847ddf913e007d715732b5669b0f22672/src%2Flibnative%2Fio%2Fc_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fc_unix.rs?ref=ff2616e847ddf913e007d715732b5669b0f22672", "patch": "@@ -19,41 +19,42 @@ pub use self::signal::{SA_NODEFER, SA_NOCLDWAIT, SA_SIGINFO, SIGCHLD};\n \n use libc;\n \n-#[cfg(target_os = \"macos\")]\n-#[cfg(target_os = \"ios\")]\n-#[cfg(target_os = \"freebsd\")]\n-#[cfg(target_os = \"dragonfly\")]\n+#[cfg(any(target_os = \"macos\",\n+          target_os = \"ios\",\n+          target_os = \"freebsd\",\n+          target_os = \"dragonfly\"))]\n pub static FIONBIO: libc::c_ulong = 0x8004667e;\n-#[cfg(target_os = \"linux\", target_arch = \"x86\")]\n-#[cfg(target_os = \"linux\", target_arch = \"x86_64\")]\n-#[cfg(target_os = \"linux\", target_arch = \"arm\")]\n-#[cfg(target_os = \"android\")]\n+#[cfg(any(all(target_os = \"linux\",\n+              any(target_arch = \"x86\",\n+                  target_arch = \"x86_64\",\n+                  target_arch = \"arm\")),\n+          target_os = \"android\"))]\n pub static FIONBIO: libc::c_ulong = 0x5421;\n-#[cfg(target_os = \"linux\", target_arch = \"mips\")]\n-#[cfg(target_os = \"linux\", target_arch = \"mipsel\")]\n+#[cfg(all(target_os = \"linux\",\n+          any(target_arch = \"mips\", target_arch = \"mipsel\")))]\n pub static FIONBIO: libc::c_ulong = 0x667e;\n \n-#[cfg(target_os = \"macos\")]\n-#[cfg(target_os = \"ios\")]\n-#[cfg(target_os = \"freebsd\")]\n-#[cfg(target_os = \"dragonfly\")]\n+#[cfg(any(target_os = \"macos\",\n+          target_os = \"ios\",\n+          target_os = \"freebsd\",\n+          target_os = \"dragonfly\"))]\n pub static FIOCLEX: libc::c_ulong = 0x20006601;\n-#[cfg(target_os = \"linux\", target_arch = \"x86\")]\n-#[cfg(target_os = \"linux\", target_arch = \"x86_64\")]\n-#[cfg(target_os = \"linux\", target_arch = \"arm\")]\n-#[cfg(target_os = \"android\")]\n+#[cfg(any(all(target_os = \"linux\",\n+              any(target_arch = \"x86\",\n+                  target_arch = \"x86_64\",\n+                  target_arch = \"arm\")),\n+          target_os = \"android\"))]\n pub static FIOCLEX: libc::c_ulong = 0x5451;\n-#[cfg(target_os = \"linux\", target_arch = \"mips\")]\n-#[cfg(target_os = \"linux\", target_arch = \"mipsel\")]\n+#[cfg(all(target_os = \"linux\",\n+          any(target_arch = \"mips\", target_arch = \"mipsel\")))]\n pub static FIOCLEX: libc::c_ulong = 0x6601;\n \n-#[cfg(target_os = \"macos\")]\n-#[cfg(target_os = \"ios\")]\n-#[cfg(target_os = \"freebsd\")]\n-#[cfg(target_os = \"dragonfly\")]\n+#[cfg(any(target_os = \"macos\",\n+          target_os = \"ios\",\n+          target_os = \"freebsd\",\n+          target_os = \"dragonfly\"))]\n pub static MSG_DONTWAIT: libc::c_int = 0x80;\n-#[cfg(target_os = \"linux\")]\n-#[cfg(target_os = \"android\")]\n+#[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n pub static MSG_DONTWAIT: libc::c_int = 0x40;\n \n pub static WNOHANG: libc::c_int = 1;\n@@ -86,8 +87,7 @@ extern {\n     pub fn sigemptyset(set: *mut sigset_t) -> libc::c_int;\n }\n \n-#[cfg(target_os = \"macos\")]\n-#[cfg(target_os = \"ios\")]\n+#[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n mod select {\n     pub static FD_SETSIZE: uint = 1024;\n \n@@ -101,10 +101,10 @@ mod select {\n     }\n }\n \n-#[cfg(target_os = \"android\")]\n-#[cfg(target_os = \"freebsd\")]\n-#[cfg(target_os = \"dragonfly\")]\n-#[cfg(target_os = \"linux\")]\n+#[cfg(any(target_os = \"android\",\n+          target_os = \"freebsd\",\n+          target_os = \"dragonfly\",\n+          target_os = \"linux\"))]\n mod select {\n     use std::uint;\n     use libc;\n@@ -123,10 +123,11 @@ mod select {\n     }\n }\n \n-#[cfg(target_os = \"linux\", target_arch = \"x86\")]\n-#[cfg(target_os = \"linux\", target_arch = \"x86_64\")]\n-#[cfg(target_os = \"linux\", target_arch = \"arm\")]\n-#[cfg(target_os = \"android\")]\n+#[cfg(any(all(target_os = \"linux\",\n+              any(target_arch = \"x86\",\n+                  target_arch = \"x86_64\",\n+                  target_arch = \"arm\")),\n+          target_os = \"android\"))]\n mod signal {\n     use libc;\n \n@@ -173,8 +174,8 @@ mod signal {\n     }\n }\n \n-#[cfg(target_os = \"linux\", target_arch = \"mips\")]\n-#[cfg(target_os = \"linux\", target_arch = \"mipsel\")]\n+#[cfg(all(target_os = \"linux\",\n+          any(target_arch = \"mips\", target_arch = \"mipsel\")))]\n mod signal {\n     use libc;\n \n@@ -215,10 +216,10 @@ mod signal {\n     }\n }\n \n-#[cfg(target_os = \"macos\")]\n-#[cfg(target_os = \"ios\")]\n-#[cfg(target_os = \"freebsd\")]\n-#[cfg(target_os = \"dragonfly\")]\n+#[cfg(any(target_os = \"macos\",\n+          target_os = \"ios\",\n+          target_os = \"freebsd\",\n+          target_os = \"dragonfly\"))]\n mod signal {\n     use libc;\n "}, {"sha": "67aad1904b96f86971a45ac429b34d4a5625f8c9", "filename": "src/libnative/io/file_unix.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ff2616e847ddf913e007d715732b5669b0f22672/src%2Flibnative%2Fio%2Ffile_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2616e847ddf913e007d715732b5669b0f22672/src%2Flibnative%2Fio%2Ffile_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ffile_unix.rs?ref=ff2616e847ddf913e007d715732b5669b0f22672", "patch": "@@ -130,16 +130,15 @@ impl rtio::RtioFileStream for FileDesc {\n     fn datasync(&mut self) -> IoResult<()> {\n         return super::mkerr_libc(os_datasync(self.fd()));\n \n-        #[cfg(target_os = \"macos\")]\n-        #[cfg(target_os = \"ios\")]\n+        #[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n         fn os_datasync(fd: c_int) -> c_int {\n             unsafe { libc::fcntl(fd, libc::F_FULLFSYNC) }\n         }\n         #[cfg(target_os = \"linux\")]\n         fn os_datasync(fd: c_int) -> c_int {\n             retry(|| unsafe { libc::fdatasync(fd) })\n         }\n-        #[cfg(not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"linux\"))]\n+        #[cfg(not(any(target_os = \"macos\", target_os = \"ios\", target_os = \"linux\")))]\n         fn os_datasync(fd: c_int) -> c_int {\n             retry(|| unsafe { libc::fsync(fd) })\n         }\n@@ -445,14 +444,14 @@ fn mkstat(stat: &libc::stat) -> rtio::FileStat {\n     // FileStat times are in milliseconds\n     fn mktime(secs: u64, nsecs: u64) -> u64 { secs * 1000 + nsecs / 1000000 }\n \n-    #[cfg(not(target_os = \"linux\"), not(target_os = \"android\"))]\n+    #[cfg(not(any(target_os = \"linux\", target_os = \"android\")))]\n     fn flags(stat: &libc::stat) -> u64 { stat.st_flags as u64 }\n-    #[cfg(target_os = \"linux\")] #[cfg(target_os = \"android\")]\n+    #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n     fn flags(_stat: &libc::stat) -> u64 { 0 }\n \n-    #[cfg(not(target_os = \"linux\"), not(target_os = \"android\"))]\n+    #[cfg(not(any(target_os = \"linux\", target_os = \"android\")))]\n     fn gen(stat: &libc::stat) -> u64 { stat.st_gen as u64 }\n-    #[cfg(target_os = \"linux\")] #[cfg(target_os = \"android\")]\n+    #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n     fn gen(_stat: &libc::stat) -> u64 { 0 }\n \n     rtio::FileStat {"}, {"sha": "954f7bbc59adcd0dd48b8b4039d99d5e1419c26a", "filename": "src/libnative/io/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff2616e847ddf913e007d715732b5669b0f22672/src%2Flibnative%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2616e847ddf913e007d715732b5669b0f22672/src%2Flibnative%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fmod.rs?ref=ff2616e847ddf913e007d715732b5669b0f22672", "patch": "@@ -48,12 +48,12 @@ pub mod file;\n #[path = \"file_windows.rs\"]\n pub mod file;\n \n-#[cfg(target_os = \"macos\")]\n-#[cfg(target_os = \"ios\")]\n-#[cfg(target_os = \"freebsd\")]\n-#[cfg(target_os = \"dragonfly\")]\n-#[cfg(target_os = \"android\")]\n-#[cfg(target_os = \"linux\")]\n+#[cfg(any(target_os = \"macos\",\n+          target_os = \"ios\",\n+          target_os = \"freebsd\",\n+          target_os = \"dragonfly\",\n+          target_os = \"android\",\n+          target_os = \"linux\"))]\n #[path = \"timer_unix.rs\"]\n pub mod timer;\n "}, {"sha": "419748b75c324c56f47a736ce2942ca035f8a4d4", "filename": "src/libnative/io/net.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff2616e847ddf913e007d715732b5669b0f22672/src%2Flibnative%2Fio%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2616e847ddf913e007d715732b5669b0f22672/src%2Flibnative%2Fio%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fnet.rs?ref=ff2616e847ddf913e007d715732b5669b0f22672", "patch": "@@ -282,20 +282,20 @@ impl TcpStream {\n         }\n     }\n \n-    #[cfg(target_os = \"macos\")]\n-    #[cfg(target_os = \"ios\")]\n+    #[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n     fn set_tcp_keepalive(&mut self, seconds: uint) -> IoResult<()> {\n         setsockopt(self.fd(), libc::IPPROTO_TCP, libc::TCP_KEEPALIVE,\n                    seconds as libc::c_int)\n     }\n-    #[cfg(target_os = \"freebsd\")]\n-    #[cfg(target_os = \"dragonfly\")]\n+    #[cfg(any(target_os = \"freebsd\", target_os = \"dragonfly\"))]\n     fn set_tcp_keepalive(&mut self, seconds: uint) -> IoResult<()> {\n         setsockopt(self.fd(), libc::IPPROTO_TCP, libc::TCP_KEEPIDLE,\n                    seconds as libc::c_int)\n     }\n-    #[cfg(not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"freebsd\"),\n-      not(target_os = \"dragonfly\"))]\n+    #[cfg(not(any(target_os = \"macos\",\n+                  target_os = \"ios\",\n+                  target_os = \"freebsd\",\n+                  target_os = \"dragonfly\")))]\n     fn set_tcp_keepalive(&mut self, _seconds: uint) -> IoResult<()> {\n         Ok(())\n     }"}, {"sha": "3a6ae42f9468dfe6da214182b4873c07308f091b", "filename": "src/libnative/io/process.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ff2616e847ddf913e007d715732b5669b0f22672/src%2Flibnative%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2616e847ddf913e007d715732b5669b0f22672/src%2Flibnative%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fprocess.rs?ref=ff2616e847ddf913e007d715732b5669b0f22672", "patch": "@@ -840,18 +840,17 @@ fn free_handle(_handle: *mut ()) {\n #[cfg(unix)]\n fn translate_status(status: c_int) -> rtio::ProcessExit {\n     #![allow(non_snake_case)]\n-    #[cfg(target_os = \"linux\")]\n-    #[cfg(target_os = \"android\")]\n+    #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n     mod imp {\n         pub fn WIFEXITED(status: i32) -> bool { (status & 0xff) == 0 }\n         pub fn WEXITSTATUS(status: i32) -> i32 { (status >> 8) & 0xff }\n         pub fn WTERMSIG(status: i32) -> i32 { status & 0x7f }\n     }\n \n-    #[cfg(target_os = \"macos\")]\n-    #[cfg(target_os = \"ios\")]\n-    #[cfg(target_os = \"freebsd\")]\n-    #[cfg(target_os = \"dragonfly\")]\n+    #[cfg(any(target_os = \"macos\",\n+              target_os = \"ios\",\n+              target_os = \"freebsd\",\n+              target_os = \"dragonfly\"))]\n     mod imp {\n         pub fn WIFEXITED(status: i32) -> bool { (status & 0x7f) == 0 }\n         pub fn WEXITSTATUS(status: i32) -> i32 { status >> 8 }"}, {"sha": "267ff3d2a81742542cd3ee61c5538d6635042b35", "filename": "src/libnative/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ff2616e847ddf913e007d715732b5669b0f22672/src%2Flibnative%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2616e847ddf913e007d715732b5669b0f22672/src%2Flibnative%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Flib.rs?ref=ff2616e847ddf913e007d715732b5669b0f22672", "patch": "@@ -77,10 +77,9 @@ pub use task::NativeTaskBuilder;\n pub mod io;\n pub mod task;\n \n-#[cfg(windows)]\n-#[cfg(android)]\n+#[cfg(any(windows, android))]\n static OS_DEFAULT_STACK_ESTIMATE: uint = 1 << 20;\n-#[cfg(unix, not(android))]\n+#[cfg(all(unix, not(android)))]\n static OS_DEFAULT_STACK_ESTIMATE: uint = 2 * (1 << 20);\n \n #[lang = \"start\"]"}, {"sha": "d898931cb330b64307761b0b943a4e7179dbde2c", "filename": "src/librustc/middle/trans/asm.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ff2616e847ddf913e007d715732b5669b0f22672/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2616e847ddf913e007d715732b5669b0f22672/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs?ref=ff2616e847ddf913e007d715732b5669b0f22672", "patch": "@@ -162,15 +162,14 @@ pub fn trans_inline_asm<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, ia: &ast::InlineAsm)\n // Default per-arch clobbers\n // Basically what clang does\n \n-#[cfg(target_arch = \"arm\")]\n-#[cfg(target_arch = \"mips\")]\n-#[cfg(target_arch = \"mipsel\")]\n+#[cfg(any(target_arch = \"arm\",\n+          target_arch = \"mips\",\n+          target_arch = \"mipsel\"))]\n fn get_clobbers() -> String {\n     \"\".to_string()\n }\n \n-#[cfg(target_arch = \"x86\")]\n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n fn get_clobbers() -> String {\n     \"~{dirflag},~{fpsr},~{flags}\".to_string()\n }"}, {"sha": "756516d17a2ea844636170bd1527ba7ba29140b0", "filename": "src/librustc_back/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff2616e847ddf913e007d715732b5669b0f22672/src%2Flibrustc_back%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2616e847ddf913e007d715732b5669b0f22672/src%2Flibrustc_back%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ffs.rs?ref=ff2616e847ddf913e007d715732b5669b0f22672", "patch": "@@ -51,7 +51,7 @@ pub fn realpath(original: &Path) -> io::IoResult<Path> {\n     return Ok(result);\n }\n \n-#[cfg(not(windows), test)]\n+#[cfg(all(not(windows), test))]\n mod test {\n     use std::io;\n     use std::io::fs::{File, symlink, mkdir, mkdir_recursive};"}, {"sha": "abb594d6e47a847a503b9612418a0d3ddab54142", "filename": "src/librustc_back/rpath.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff2616e847ddf913e007d715732b5669b0f22672/src%2Flibrustc_back%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2616e847ddf913e007d715732b5669b0f22672/src%2Flibrustc_back%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Frpath.rs?ref=ff2616e847ddf913e007d715732b5669b0f22672", "patch": "@@ -147,7 +147,7 @@ fn minimize_rpaths(rpaths: &[String]) -> Vec<String> {\n     minimized\n }\n \n-#[cfg(unix, test)]\n+#[cfg(all(unix, test))]\n mod test {\n     use super::{RPathConfig};\n     use super::{minimize_rpaths, rpaths_to_flags, get_rpath_relative_to_output};"}, {"sha": "d1cc37497dc44ef061def74d0156d5e9d221d8fc", "filename": "src/librustdoc/flock.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ff2616e847ddf913e007d715732b5669b0f22672/src%2Flibrustdoc%2Fflock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2616e847ddf913e007d715732b5669b0f22672/src%2Flibrustdoc%2Fflock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fflock.rs?ref=ff2616e847ddf913e007d715732b5669b0f22672", "patch": "@@ -84,8 +84,7 @@ mod imp {\n         pub static F_SETLKW: libc::c_int = 9;\n     }\n \n-    #[cfg(target_os = \"macos\")]\n-    #[cfg(target_os = \"ios\")]\n+    #[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n     mod os {\n         use libc;\n "}, {"sha": "2b5595131d0a7e74c22c5d01ad2295ee3f8cb49c", "filename": "src/librustdoc/plugins.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff2616e847ddf913e007d715732b5669b0f22672/src%2Flibrustdoc%2Fplugins.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2616e847ddf913e007d715732b5669b0f22672/src%2Flibrustdoc%2Fplugins.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fplugins.rs?ref=ff2616e847ddf913e007d715732b5669b0f22672", "patch": "@@ -85,7 +85,7 @@ fn libname(mut n: String) -> String {\n     n\n }\n \n-#[cfg(not(target_os=\"windows\"), not(target_os=\"macos\"))]\n+#[cfg(all(not(target_os=\"windows\"), not(target_os=\"macos\")))]\n fn libname(n: String) -> String {\n     let mut i = String::from_str(\"lib\");\n     i.push_str(n.as_slice());"}, {"sha": "bd63886baeeda176a95558d77445a7046e474d1e", "filename": "src/librustrt/args.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ff2616e847ddf913e007d715732b5669b0f22672/src%2Flibrustrt%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2616e847ddf913e007d715732b5669b0f22672/src%2Flibrustrt%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Fargs.rs?ref=ff2616e847ddf913e007d715732b5669b0f22672", "patch": "@@ -39,10 +39,10 @@ pub fn put(args: Vec<Vec<u8>>) { imp::put(args) }\n /// Make a clone of the global arguments.\n pub fn clone() -> Option<Vec<Vec<u8>>> { imp::clone() }\n \n-#[cfg(target_os = \"linux\")]\n-#[cfg(target_os = \"android\")]\n-#[cfg(target_os = \"freebsd\")]\n-#[cfg(target_os = \"dragonfly\")]\n+#[cfg(any(target_os = \"linux\",\n+          target_os = \"android\",\n+          target_os = \"freebsd\",\n+          target_os = \"dragonfly\"))]\n mod imp {\n     use core::prelude::*;\n \n@@ -146,9 +146,9 @@ mod imp {\n     }\n }\n \n-#[cfg(target_os = \"macos\")]\n-#[cfg(target_os = \"ios\")]\n-#[cfg(target_os = \"windows\")]\n+#[cfg(any(target_os = \"macos\",\n+          target_os = \"ios\",\n+          target_os = \"windows\"))]\n mod imp {\n     use core::prelude::*;\n     use collections::vec::Vec;"}, {"sha": "72c7d89a3b98b701c007b106436e088bc8ce6d9c", "filename": "src/librustrt/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff2616e847ddf913e007d715732b5669b0f22672/src%2Flibrustrt%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2616e847ddf913e007d715732b5669b0f22672/src%2Flibrustrt%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Flib.rs?ref=ff2616e847ddf913e007d715732b5669b0f22672", "patch": "@@ -160,7 +160,7 @@ pub unsafe fn cleanup() {\n pub mod shouldnt_be_public {\n     #[cfg(not(test))]\n     pub use super::local_ptr::native::maybe_tls_key;\n-    #[cfg(not(windows), not(target_os = \"android\"), not(target_os = \"ios\"))]\n+    #[cfg(all(not(windows), not(target_os = \"android\"), not(target_os = \"ios\")))]\n     pub use super::local_ptr::compiled::RT_TLS_PTR;\n }\n "}, {"sha": "2e7408d91591cc05b6cf3a12b9ac9773cc257bb4", "filename": "src/librustrt/libunwind.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ff2616e847ddf913e007d715732b5669b0f22672/src%2Flibrustrt%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2616e847ddf913e007d715732b5669b0f22672/src%2Flibrustrt%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Flibunwind.rs?ref=ff2616e847ddf913e007d715732b5669b0f22672", "patch": "@@ -16,8 +16,7 @@\n \n use libc;\n \n-#[cfg(not(target_arch = \"arm\"))]\n-#[cfg(target_os = \"ios\")]\n+#[cfg(any(not(target_arch = \"arm\"), target_os = \"ios\"))]\n #[repr(C)]\n pub enum _Unwind_Action {\n     _UA_SEARCH_PHASE = 1,\n@@ -62,14 +61,13 @@ pub static unwinder_private_data_size: uint = 5;\n #[cfg(target_arch = \"x86_64\")]\n pub static unwinder_private_data_size: uint = 6;\n \n-#[cfg(target_arch = \"arm\", not(target_os = \"ios\"))]\n+#[cfg(all(target_arch = \"arm\", not(target_os = \"ios\")))]\n pub static unwinder_private_data_size: uint = 20;\n \n-#[cfg(target_arch = \"arm\", target_os = \"ios\")]\n+#[cfg(all(target_arch = \"arm\", target_os = \"ios\"))]\n pub static unwinder_private_data_size: uint = 5;\n \n-#[cfg(target_arch = \"mips\")]\n-#[cfg(target_arch = \"mipsel\")]\n+#[cfg(any(target_arch = \"mips\", target_arch = \"mipsel\"))]\n pub static unwinder_private_data_size: uint = 2;\n \n #[repr(C)]\n@@ -85,8 +83,7 @@ pub type _Unwind_Exception_Cleanup_Fn =\n         extern \"C\" fn(unwind_code: _Unwind_Reason_Code,\n                       exception: *mut _Unwind_Exception);\n \n-#[cfg(target_os = \"linux\")]\n-#[cfg(target_os = \"freebsd\")]\n+#[cfg(any(target_os = \"linux\", target_os = \"freebsd\"))]\n #[link(name = \"gcc_s\")]\n extern {}\n \n@@ -101,11 +98,11 @@ extern {}\n extern \"C\" {\n     // iOS on armv7 uses SjLj exceptions and requires to link\n     // against corresponding routine (..._SjLj_...)\n-    #[cfg(not(target_os = \"ios\", target_arch = \"arm\"))]\n+    #[cfg(not(all(target_os = \"ios\", target_arch = \"arm\")))]\n     pub fn _Unwind_RaiseException(exception: *mut _Unwind_Exception)\n                                   -> _Unwind_Reason_Code;\n \n-    #[cfg(target_os = \"ios\", target_arch = \"arm\")]\n+    #[cfg(all(target_os = \"ios\", target_arch = \"arm\"))]\n     fn _Unwind_SjLj_RaiseException(e: *mut _Unwind_Exception)\n                                    -> _Unwind_Reason_Code;\n \n@@ -115,7 +112,7 @@ extern \"C\" {\n // ... and now we just providing access to SjLj counterspart\n // through a standard name to hide those details from others\n // (see also comment above regarding _Unwind_RaiseException)\n-#[cfg(target_os = \"ios\", target_arch = \"arm\")]\n+#[cfg(all(target_os = \"ios\", target_arch = \"arm\"))]\n #[inline(always)]\n pub unsafe fn _Unwind_RaiseException(exc: *mut _Unwind_Exception)\n                                      -> _Unwind_Reason_Code {"}, {"sha": "58f8f8b310f5551dd14f591efa8de292de6371d9", "filename": "src/librustrt/local_ptr.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ff2616e847ddf913e007d715732b5669b0f22672/src%2Flibrustrt%2Flocal_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2616e847ddf913e007d715732b5669b0f22672/src%2Flibrustrt%2Flocal_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Flocal_ptr.rs?ref=ff2616e847ddf913e007d715732b5669b0f22672", "patch": "@@ -22,13 +22,13 @@ use core::prelude::*;\n use core::mem;\n use alloc::boxed::Box;\n \n-#[cfg(windows)]               // mingw-w32 doesn't like thread_local things\n-#[cfg(target_os = \"android\")] // see #10686\n-#[cfg(target_os = \"ios\")]\n+#[cfg(any(windows, // mingw-w32 doesn't like thread_local things\n+          target_os = \"android\", // see #10686\n+          target_os = \"ios\"))]\n pub use self::native::{init, cleanup, put, take, try_take, unsafe_take, exists,\n                        unsafe_borrow, try_unsafe_borrow};\n \n-#[cfg(not(windows), not(target_os = \"android\"), not(target_os = \"ios\"))]\n+#[cfg(not(any(windows, target_os = \"android\", target_os = \"ios\")))]\n pub use self::compiled::{init, cleanup, put, take, try_take, unsafe_take, exists,\n                          unsafe_borrow, try_unsafe_borrow};\n \n@@ -82,7 +82,7 @@ pub unsafe fn borrow<T>() -> Borrowed<T> {\n /// implemented using LLVM's thread_local attribute which isn't necessarily\n /// working on all platforms. This implementation is faster, however, so we use\n /// it wherever possible.\n-#[cfg(not(windows), not(target_os = \"android\"), not(target_os = \"ios\"))]\n+#[cfg(not(any(windows, target_os = \"android\", target_os = \"ios\")))]\n pub mod compiled {\n     use core::prelude::*;\n "}, {"sha": "86dc9b85a792dc769db4e89ae32459697222b2c2", "filename": "src/librustrt/mutex.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ff2616e847ddf913e007d715732b5669b0f22672/src%2Flibrustrt%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2616e847ddf913e007d715732b5669b0f22672/src%2Flibrustrt%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Fmutex.rs?ref=ff2616e847ddf913e007d715732b5669b0f22672", "patch": "@@ -346,8 +346,7 @@ mod imp {\n     type pthread_mutexattr_t = libc::c_void;\n     type pthread_condattr_t = libc::c_void;\n \n-    #[cfg(target_os = \"freebsd\")]\n-    #[cfg(target_os = \"dragonfly\")]\n+    #[cfg(any(target_os = \"freebsd\", target_os = \"dragonfly\"))]\n     mod os {\n         use libc;\n \n@@ -360,8 +359,7 @@ mod imp {\n             0 as pthread_cond_t;\n     }\n \n-    #[cfg(target_os = \"macos\")]\n-    #[cfg(target_os = \"ios\")]\n+    #[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n     mod os {\n         use libc;\n "}, {"sha": "5c94ef61bfdb7ceb68f56c6cdf1b8adbe76b21b1", "filename": "src/librustrt/stack.rs", "status": "modified", "additions": 40, "deletions": 32, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/ff2616e847ddf913e007d715732b5669b0f22672/src%2Flibrustrt%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2616e847ddf913e007d715732b5669b0f22672/src%2Flibrustrt%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Fstack.rs?ref=ff2616e847ddf913e007d715732b5669b0f22672", "patch": "@@ -156,13 +156,13 @@ pub unsafe fn record_rust_managed_stack_bounds(stack_lo: uint, stack_hi: uint) {\n     #[cfg(not(windows))] #[inline(always)]\n     unsafe fn target_record_stack_bounds(_stack_lo: uint, _stack_hi: uint) {}\n \n-    #[cfg(windows, target_arch = \"x86\")] #[inline(always)]\n+    #[cfg(all(windows, target_arch = \"x86\"))] #[inline(always)]\n     unsafe fn target_record_stack_bounds(stack_lo: uint, stack_hi: uint) {\n         // stack range is at TIB: %fs:0x04 (top) and %fs:0x08 (bottom)\n         asm!(\"mov $0, %fs:0x04\" :: \"r\"(stack_hi) :: \"volatile\");\n         asm!(\"mov $0, %fs:0x08\" :: \"r\"(stack_lo) :: \"volatile\");\n     }\n-    #[cfg(windows, target_arch = \"x86_64\")] #[inline(always)]\n+    #[cfg(all(windows, target_arch = \"x86_64\"))] #[inline(always)]\n     unsafe fn target_record_stack_bounds(stack_lo: uint, stack_hi: uint) {\n         // stack range is at TIB: %gs:0x08 (top) and %gs:0x10 (bottom)\n         asm!(\"mov $0, %gs:0x08\" :: \"r\"(stack_hi) :: \"volatile\");\n@@ -189,49 +189,53 @@ pub unsafe fn record_sp_limit(limit: uint) {\n     return target_record_sp_limit(limit);\n \n     // x86-64\n-    #[cfg(target_arch = \"x86_64\", target_os = \"macos\")]\n-    #[cfg(target_arch = \"x86_64\", target_os = \"ios\")] #[inline(always)]\n+    #[cfg(all(target_arch = \"x86_64\",\n+              any(target_os = \"macos\", target_os = \"ios\")))]\n+    #[inline(always)]\n     unsafe fn target_record_sp_limit(limit: uint) {\n         asm!(\"movq $$0x60+90*8, %rsi\n               movq $0, %gs:(%rsi)\" :: \"r\"(limit) : \"rsi\" : \"volatile\")\n     }\n-    #[cfg(target_arch = \"x86_64\", target_os = \"linux\")] #[inline(always)]\n+    #[cfg(all(target_arch = \"x86_64\", target_os = \"linux\"))] #[inline(always)]\n     unsafe fn target_record_sp_limit(limit: uint) {\n         asm!(\"movq $0, %fs:112\" :: \"r\"(limit) :: \"volatile\")\n     }\n-    #[cfg(target_arch = \"x86_64\", target_os = \"windows\")] #[inline(always)]\n+    #[cfg(all(target_arch = \"x86_64\", target_os = \"windows\"))] #[inline(always)]\n     unsafe fn target_record_sp_limit(_: uint) {\n     }\n-    #[cfg(target_arch = \"x86_64\", target_os = \"freebsd\")] #[inline(always)]\n+    #[cfg(all(target_arch = \"x86_64\", target_os = \"freebsd\"))] #[inline(always)]\n     unsafe fn target_record_sp_limit(limit: uint) {\n         asm!(\"movq $0, %fs:24\" :: \"r\"(limit) :: \"volatile\")\n     }\n-    #[cfg(target_arch = \"x86_64\", target_os = \"dragonfly\")] #[inline(always)]\n+    #[cfg(all(target_arch = \"x86_64\", target_os = \"dragonfly\"))] #[inline(always)]\n     unsafe fn target_record_sp_limit(limit: uint) {\n         asm!(\"movq $0, %fs:32\" :: \"r\"(limit) :: \"volatile\")\n     }\n \n     // x86\n-    #[cfg(target_arch = \"x86\", target_os = \"macos\")]\n-    #[cfg(target_arch = \"x86\", target_os = \"ios\")] #[inline(always)]\n+    #[cfg(all(target_arch = \"x86\",\n+              any(target_os = \"macos\", target_os = \"ios\")))]\n+    #[inline(always)]\n     unsafe fn target_record_sp_limit(limit: uint) {\n         asm!(\"movl $$0x48+90*4, %eax\n               movl $0, %gs:(%eax)\" :: \"r\"(limit) : \"eax\" : \"volatile\")\n     }\n-    #[cfg(target_arch = \"x86\", target_os = \"linux\")]\n-    #[cfg(target_arch = \"x86\", target_os = \"freebsd\")] #[inline(always)]\n+    #[cfg(all(target_arch = \"x86\",\n+              any(target_os = \"linux\", target_os = \"freebsd\")))]\n+    #[inline(always)]\n     unsafe fn target_record_sp_limit(limit: uint) {\n         asm!(\"movl $0, %gs:48\" :: \"r\"(limit) :: \"volatile\")\n     }\n-    #[cfg(target_arch = \"x86\", target_os = \"windows\")] #[inline(always)]\n+    #[cfg(all(target_arch = \"x86\", target_os = \"windows\"))] #[inline(always)]\n     unsafe fn target_record_sp_limit(_: uint) {\n     }\n \n     // mips, arm - Some brave soul can port these to inline asm, but it's over\n     //             my head personally\n-    #[cfg(target_arch = \"mips\")]\n-    #[cfg(target_arch = \"mipsel\")]\n-    #[cfg(target_arch = \"arm\", not(target_os = \"ios\"))] #[inline(always)]\n+    #[cfg(any(target_arch = \"mips\",\n+              target_arch = \"mipsel\",\n+              all(target_arch = \"arm\", not(target_os = \"ios\"))))]\n+    #[inline(always)]\n     unsafe fn target_record_sp_limit(limit: uint) {\n         use libc::c_void;\n         return record_sp_limit(limit as *const c_void);\n@@ -241,7 +245,7 @@ pub unsafe fn record_sp_limit(limit: uint) {\n     }\n \n     // iOS segmented stack is disabled for now, see related notes\n-    #[cfg(target_arch = \"arm\", target_os = \"ios\")] #[inline(always)]\n+    #[cfg(all(target_arch = \"arm\", target_os = \"ios\"))] #[inline(always)]\n     unsafe fn target_record_sp_limit(_: uint) {\n     }\n }\n@@ -259,31 +263,32 @@ pub unsafe fn get_sp_limit() -> uint {\n     return target_get_sp_limit();\n \n     // x86-64\n-    #[cfg(target_arch = \"x86_64\", target_os = \"macos\")]\n-    #[cfg(target_arch = \"x86_64\", target_os = \"ios\")] #[inline(always)]\n+    #[cfg(all(target_arch = \"x86_64\",\n+              any(target_os = \"macos\", target_os = \"ios\")))]\n+    #[inline(always)]\n     unsafe fn target_get_sp_limit() -> uint {\n         let limit;\n         asm!(\"movq $$0x60+90*8, %rsi\n               movq %gs:(%rsi), $0\" : \"=r\"(limit) :: \"rsi\" : \"volatile\");\n         return limit;\n     }\n-    #[cfg(target_arch = \"x86_64\", target_os = \"linux\")] #[inline(always)]\n+    #[cfg(all(target_arch = \"x86_64\", target_os = \"linux\"))] #[inline(always)]\n     unsafe fn target_get_sp_limit() -> uint {\n         let limit;\n         asm!(\"movq %fs:112, $0\" : \"=r\"(limit) ::: \"volatile\");\n         return limit;\n     }\n-    #[cfg(target_arch = \"x86_64\", target_os = \"windows\")] #[inline(always)]\n+    #[cfg(all(target_arch = \"x86_64\", target_os = \"windows\"))] #[inline(always)]\n     unsafe fn target_get_sp_limit() -> uint {\n         return 1024;\n     }\n-    #[cfg(target_arch = \"x86_64\", target_os = \"freebsd\")] #[inline(always)]\n+    #[cfg(all(target_arch = \"x86_64\", target_os = \"freebsd\"))] #[inline(always)]\n     unsafe fn target_get_sp_limit() -> uint {\n         let limit;\n         asm!(\"movq %fs:24, $0\" : \"=r\"(limit) ::: \"volatile\");\n         return limit;\n     }\n-    #[cfg(target_arch = \"x86_64\", target_os = \"dragonfly\")] #[inline(always)]\n+    #[cfg(all(target_arch = \"x86_64\", target_os = \"dragonfly\"))] #[inline(always)]\n     unsafe fn target_get_sp_limit() -> uint {\n         let limit;\n         asm!(\"movq %fs:32, $0\" : \"=r\"(limit) ::: \"volatile\");\n@@ -292,31 +297,34 @@ pub unsafe fn get_sp_limit() -> uint {\n \n \n     // x86\n-    #[cfg(target_arch = \"x86\", target_os = \"macos\")]\n-    #[cfg(target_arch = \"x86\", target_os = \"ios\")] #[inline(always)]\n+    #[cfg(all(target_arch = \"x86\",\n+              any(target_os = \"macos\", target_os = \"ios\")))]\n+    #[inline(always)]\n     unsafe fn target_get_sp_limit() -> uint {\n         let limit;\n         asm!(\"movl $$0x48+90*4, %eax\n               movl %gs:(%eax), $0\" : \"=r\"(limit) :: \"eax\" : \"volatile\");\n         return limit;\n     }\n-    #[cfg(target_arch = \"x86\", target_os = \"linux\")]\n-    #[cfg(target_arch = \"x86\", target_os = \"freebsd\")] #[inline(always)]\n+    #[cfg(all(target_arch = \"x86\",\n+              any(target_os = \"linux\", target_os = \"freebsd\")))]\n+    #[inline(always)]\n     unsafe fn target_get_sp_limit() -> uint {\n         let limit;\n         asm!(\"movl %gs:48, $0\" : \"=r\"(limit) ::: \"volatile\");\n         return limit;\n     }\n-    #[cfg(target_arch = \"x86\", target_os = \"windows\")] #[inline(always)]\n+    #[cfg(all(target_arch = \"x86\", target_os = \"windows\"))] #[inline(always)]\n     unsafe fn target_get_sp_limit() -> uint {\n         return 1024;\n     }\n \n     // mips, arm - Some brave soul can port these to inline asm, but it's over\n     //             my head personally\n-    #[cfg(target_arch = \"mips\")]\n-    #[cfg(target_arch = \"mipsel\")]\n-    #[cfg(target_arch = \"arm\", not(target_os = \"ios\"))] #[inline(always)]\n+    #[cfg(any(target_arch = \"mips\",\n+              target_arch = \"mipsel\",\n+              all(target_arch = \"arm\", not(target_os = \"ios\"))))]\n+    #[inline(always)]\n     unsafe fn target_get_sp_limit() -> uint {\n         use libc::c_void;\n         return get_sp_limit() as uint;\n@@ -328,7 +336,7 @@ pub unsafe fn get_sp_limit() -> uint {\n     // iOS doesn't support segmented stacks yet. This function might\n     // be called by runtime though so it is unsafe to mark it as\n     // unreachable, let's return a fixed constant.\n-    #[cfg(target_arch = \"arm\", target_os = \"ios\")] #[inline(always)]\n+    #[cfg(all(target_arch = \"arm\", target_os = \"ios\"))] #[inline(always)]\n     unsafe fn target_get_sp_limit() -> uint {\n         1024\n     }"}, {"sha": "aee70980bbaf7145e62eee52a36e7bbda01c07bc", "filename": "src/librustrt/thread_local_storage.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ff2616e847ddf913e007d715732b5669b0f22672/src%2Flibrustrt%2Fthread_local_storage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2616e847ddf913e007d715732b5669b0f22672/src%2Flibrustrt%2Fthread_local_storage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Fthread_local_storage.rs?ref=ff2616e847ddf913e007d715732b5669b0f22672", "patch": "@@ -41,11 +41,11 @@ pub unsafe fn destroy(key: Key) {\n #[allow(non_camel_case_types)] // foreign type\n type pthread_key_t = ::libc::c_ulong;\n \n-#[cfg(target_os=\"linux\")]\n-#[cfg(target_os=\"freebsd\")]\n-#[cfg(target_os=\"dragonfly\")]\n-#[cfg(target_os=\"android\")]\n-#[cfg(target_os = \"ios\")]\n+#[cfg(any(target_os=\"linux\",\n+          target_os=\"freebsd\",\n+          target_os=\"dragonfly\",\n+          target_os=\"android\",\n+          target_os = \"ios\"))]\n #[allow(non_camel_case_types)] // foreign type\n type pthread_key_t = ::libc::c_uint;\n "}, {"sha": "1561f428ce5484f84a13ebee6b7ead3c5e5b7c04", "filename": "src/librustrt/unwind.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ff2616e847ddf913e007d715732b5669b0f22672/src%2Flibrustrt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2616e847ddf913e007d715732b5669b0f22672/src%2Flibrustrt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Funwind.rs?ref=ff2616e847ddf913e007d715732b5669b0f22672", "patch": "@@ -235,7 +235,9 @@ fn rust_exception_class() -> uw::_Unwind_Exception_Class {\n //\n // See also: rt/rust_try.ll\n \n-#[cfg(not(target_arch = \"arm\"), not(windows, target_arch = \"x86_64\"), not(test))]\n+#[cfg(all(not(target_arch = \"arm\"),\n+          not(all(windows, target_arch = \"x86_64\")),\n+          not(test)))]\n #[doc(hidden)]\n pub mod eabi {\n     use libunwind as uw;\n@@ -288,7 +290,7 @@ pub mod eabi {\n // iOS on armv7 is using SjLj exceptions and therefore requires to use\n // a specialized personality routine: __gcc_personality_sj0\n \n-#[cfg(target_os = \"ios\", target_arch = \"arm\", not(test))]\n+#[cfg(all(target_os = \"ios\", target_arch = \"arm\", not(test)))]\n #[doc(hidden)]\n pub mod eabi {\n     use libunwind as uw;\n@@ -343,7 +345,7 @@ pub mod eabi {\n \n // ARM EHABI uses a slightly different personality routine signature,\n // but otherwise works the same.\n-#[cfg(target_arch = \"arm\", not(target_os = \"ios\"), not(test))]\n+#[cfg(all(target_arch = \"arm\", not(target_os = \"ios\"), not(test)))]\n #[doc(hidden)]\n pub mod eabi {\n     use libunwind as uw;\n@@ -392,7 +394,7 @@ pub mod eabi {\n // GCC reuses the same personality routine as for the other architectures by wrapping it\n // with an \"API translator\" layer (_GCC_specific_handler).\n \n-#[cfg(windows, target_arch = \"x86_64\", not(test))]\n+#[cfg(all(windows, target_arch = \"x86_64\", not(test)))]\n #[doc(hidden)]\n #[allow(non_camel_case_types, non_snake_case)]\n pub mod eabi {"}, {"sha": "35bd20c0dd90b7bcee88e6f768c4d9278ae0a891", "filename": "src/librustuv/uvll.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ff2616e847ddf913e007d715732b5669b0f22672/src%2Flibrustuv%2Fuvll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2616e847ddf913e007d715732b5669b0f22672/src%2Flibrustuv%2Fuvll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fuvll.rs?ref=ff2616e847ddf913e007d715732b5669b0f22672", "patch": "@@ -723,12 +723,11 @@ extern {\n \n // libuv doesn't use pthread on windows\n // android libc (bionic) provides pthread, so no additional link is required\n-#[cfg(not(windows), not(target_os = \"android\"))]\n+#[cfg(not(any(windows, target_os = \"android\")))]\n #[link(name = \"pthread\")]\n extern {}\n \n-#[cfg(target_os = \"linux\")]\n-#[cfg(target_os = \"dragonfly\")]\n+#[cfg(any(target_os = \"linux\", target_os = \"dragonfly\"))]\n #[link(name = \"rt\")]\n extern {}\n \n@@ -738,7 +737,6 @@ extern {}\n #[link(name = \"iphlpapi\")]\n extern {}\n \n-#[cfg(target_os = \"freebsd\")]\n-#[cfg(target_os = \"dragonfly\")]\n+#[cfg(any(target_os = \"freebsd\", target_os = \"dragonfly\"))]\n #[link(name = \"kvm\")]\n extern {}"}, {"sha": "bd2bd1ad0904a161fc98a35d96a9416c98435a03", "filename": "src/libstd/dynamic_lib.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ff2616e847ddf913e007d715732b5669b0f22672/src%2Flibstd%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2616e847ddf913e007d715732b5669b0f22672/src%2Flibstd%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdynamic_lib.rs?ref=ff2616e847ddf913e007d715732b5669b0f22672", "patch": "@@ -154,7 +154,7 @@ impl DynamicLibrary {\n     }\n }\n \n-#[cfg(test, not(target_os = \"ios\"))]\n+#[cfg(all(test, not(target_os = \"ios\")))]\n mod test {\n     use super::*;\n     use prelude::*;\n@@ -189,10 +189,10 @@ mod test {\n     }\n \n     #[test]\n-    #[cfg(target_os = \"linux\")]\n-    #[cfg(target_os = \"macos\")]\n-    #[cfg(target_os = \"freebsd\")]\n-    #[cfg(target_os = \"dragonfly\")]\n+    #[cfg(any(target_os = \"linux\",\n+              target_os = \"macos\",\n+              target_os = \"freebsd\",\n+              target_os = \"dragonfly\"))]\n     fn test_errors_do_not_crash() {\n         // Open /dev/null as a library to get an error, and make sure\n         // that only causes an error, and not a crash.\n@@ -204,12 +204,12 @@ mod test {\n     }\n }\n \n-#[cfg(target_os = \"linux\")]\n-#[cfg(target_os = \"android\")]\n-#[cfg(target_os = \"macos\")]\n-#[cfg(target_os = \"ios\")]\n-#[cfg(target_os = \"freebsd\")]\n-#[cfg(target_os = \"dragonfly\")]\n+#[cfg(any(target_os = \"linux\",\n+          target_os = \"android\",\n+          target_os = \"macos\",\n+          target_os = \"ios\",\n+          target_os = \"freebsd\",\n+          target_os = \"dragonfly\"))]\n pub mod dl {\n \n     use c_str::{CString, ToCStr};"}, {"sha": "ea1dd12f323a7f82a4ac2c1fef803b44e8d2524b", "filename": "src/libstd/io/net/addrinfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff2616e847ddf913e007d715732b5669b0f22672/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2616e847ddf913e007d715732b5669b0f22672/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs?ref=ff2616e847ddf913e007d715732b5669b0f22672", "patch": "@@ -123,7 +123,7 @@ fn lookup(hostname: Option<&str>, servname: Option<&str>, hint: Option<Hint>)\n \n // Ignored on android since we cannot give tcp/ip\n // permission without help of apk\n-#[cfg(test, not(target_os = \"android\"))]\n+#[cfg(all(test, not(target_os = \"android\")))]\n mod test {\n     iotest!(fn dns_smoke_test() {\n         let ipaddrs = get_host_addresses(\"localhost\").unwrap();"}, {"sha": "f97e9f4647ba018321fc8f65e85dd9d5ae3fec4a", "filename": "src/libstd/io/process.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ff2616e847ddf913e007d715732b5669b0f22672/src%2Flibstd%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2616e847ddf913e007d715732b5669b0f22672/src%2Flibstd%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fprocess.rs?ref=ff2616e847ddf913e007d715732b5669b0f22672", "patch": "@@ -693,7 +693,7 @@ mod tests {\n         drop(p.wait().clone());\n     })\n \n-    #[cfg(unix, not(target_os=\"android\"))]\n+    #[cfg(all(unix, not(target_os=\"android\")))]\n     iotest!(fn signal_reported_right() {\n         let p = Command::new(\"/bin/sh\").arg(\"-c\").arg(\"kill -1 $$\").spawn();\n         assert!(p.is_ok());\n@@ -725,7 +725,7 @@ mod tests {\n         assert_eq!(run_output(cmd), \"foobar\\n\".to_string());\n     })\n \n-    #[cfg(unix, not(target_os=\"android\"))]\n+    #[cfg(all(unix, not(target_os=\"android\")))]\n     iotest!(fn set_cwd_works() {\n         let mut cmd = Command::new(\"/bin/sh\");\n         cmd.arg(\"-c\").arg(\"pwd\")\n@@ -734,7 +734,7 @@ mod tests {\n         assert_eq!(run_output(cmd), \"/\\n\".to_string());\n     })\n \n-    #[cfg(unix, not(target_os=\"android\"))]\n+    #[cfg(all(unix, not(target_os=\"android\")))]\n     iotest!(fn stdin_works() {\n         let mut p = Command::new(\"/bin/sh\")\n                             .arg(\"-c\").arg(\"read line; echo $line\")\n@@ -759,7 +759,7 @@ mod tests {\n         assert!(Command::new(\"test\").uid(10).spawn().is_err());\n     })\n \n-    #[cfg(unix, not(target_os=\"android\"))]\n+    #[cfg(all(unix, not(target_os=\"android\")))]\n     iotest!(fn uid_works() {\n         use libc;\n         let mut p = Command::new(\"/bin/sh\")\n@@ -770,7 +770,7 @@ mod tests {\n         assert!(p.wait().unwrap().success());\n     })\n \n-    #[cfg(unix, not(target_os=\"android\"))]\n+    #[cfg(all(unix, not(target_os=\"android\")))]\n     iotest!(fn uid_to_root_fails() {\n         use libc;\n \n@@ -847,7 +847,7 @@ mod tests {\n         }\n     })\n \n-    #[cfg(unix,not(target_os=\"android\"))]\n+    #[cfg(all(unix, not(target_os=\"android\")))]\n     pub fn pwd_cmd() -> Command {\n         Command::new(\"pwd\")\n     }\n@@ -897,7 +897,7 @@ mod tests {\n         assert_eq!(parent_stat.unstable.inode, child_stat.unstable.inode);\n     })\n \n-    #[cfg(unix,not(target_os=\"android\"))]\n+    #[cfg(all(unix, not(target_os=\"android\")))]\n     pub fn env_cmd() -> Command {\n         Command::new(\"env\")\n     }"}, {"sha": "79a00e90b40746d8fde0b6a3ce555bb3f17d8130", "filename": "src/libstd/io/signal.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff2616e847ddf913e007d715732b5669b0f22672/src%2Flibstd%2Fio%2Fsignal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2616e847ddf913e007d715732b5669b0f22672/src%2Flibstd%2Fio%2Fsignal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fsignal.rs?ref=ff2616e847ddf913e007d715732b5669b0f22672", "patch": "@@ -160,7 +160,7 @@ impl Listener {\n     }\n }\n \n-#[cfg(test, unix)]\n+#[cfg(all(test, unix))]\n mod test_unix {\n     use prelude::*;\n     use libc;\n@@ -218,7 +218,7 @@ mod test_unix {\n     }\n }\n \n-#[cfg(test, windows)]\n+#[cfg(all(test, windows))]\n mod test_windows {\n     use super::{User1, Listener};\n     use result::{Ok, Err};"}, {"sha": "d904e657e403b082e61110c71af92c7b60732ca6", "filename": "src/libstd/os.rs", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ff2616e847ddf913e007d715732b5669b0f22672/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2616e847ddf913e007d715732b5669b0f22672/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=ff2616e847ddf913e007d715732b5669b0f22672", "patch": "@@ -653,8 +653,7 @@ pub fn dll_filename(base: &str) -> String {\n /// ```\n pub fn self_exe_name() -> Option<Path> {\n \n-    #[cfg(target_os = \"freebsd\")]\n-    #[cfg(target_os = \"dragonfly\")]\n+    #[cfg(any(target_os = \"freebsd\", target_os = \"dragonfly\"))]\n     fn load_self() -> Option<Vec<u8>> {\n         unsafe {\n             use libc::funcs::bsd44::*;\n@@ -680,8 +679,7 @@ pub fn self_exe_name() -> Option<Path> {\n         }\n     }\n \n-    #[cfg(target_os = \"linux\")]\n-    #[cfg(target_os = \"android\")]\n+    #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n     fn load_self() -> Option<Vec<u8>> {\n         use std::io;\n \n@@ -691,8 +689,7 @@ pub fn self_exe_name() -> Option<Path> {\n         }\n     }\n \n-    #[cfg(target_os = \"macos\")]\n-    #[cfg(target_os = \"ios\")]\n+    #[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n     fn load_self() -> Option<Vec<u8>> {\n         unsafe {\n             use libc::funcs::extra::_NSGetExecutablePath;\n@@ -909,9 +906,9 @@ pub fn change_dir(p: &Path) -> bool {\n #[cfg(unix)]\n /// Returns the platform-specific value of errno\n pub fn errno() -> int {\n-    #[cfg(target_os = \"macos\")]\n-    #[cfg(target_os = \"ios\")]\n-    #[cfg(target_os = \"freebsd\")]\n+    #[cfg(any(target_os = \"macos\",\n+              target_os = \"ios\",\n+              target_os = \"freebsd\"))]\n     fn errno_location() -> *const c_int {\n         extern {\n             fn __error() -> *const c_int;\n@@ -931,8 +928,7 @@ pub fn errno() -> int {\n         }\n     }\n \n-    #[cfg(target_os = \"linux\")]\n-    #[cfg(target_os = \"android\")]\n+    #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n     fn errno_location() -> *const c_int {\n         extern {\n             fn __errno_location() -> *const c_int;\n@@ -975,11 +971,11 @@ pub fn error_string(errnum: uint) -> String {\n \n     #[cfg(unix)]\n     fn strerror(errnum: uint) -> String {\n-        #[cfg(target_os = \"macos\")]\n-        #[cfg(target_os = \"ios\")]\n-        #[cfg(target_os = \"android\")]\n-        #[cfg(target_os = \"freebsd\")]\n-        #[cfg(target_os = \"dragonfly\")]\n+        #[cfg(any(target_os = \"macos\",\n+                  target_os = \"ios\",\n+                  target_os = \"android\",\n+                  target_os = \"freebsd\",\n+                  target_os = \"dragonfly\"))]\n         fn strerror_r(errnum: c_int, buf: *mut c_char, buflen: libc::size_t)\n                       -> c_int {\n             extern {\n@@ -1180,10 +1176,10 @@ fn real_args_as_bytes() -> Vec<Vec<u8>> {\n     res\n }\n \n-#[cfg(target_os = \"linux\")]\n-#[cfg(target_os = \"android\")]\n-#[cfg(target_os = \"freebsd\")]\n-#[cfg(target_os = \"dragonfly\")]\n+#[cfg(any(target_os = \"linux\",\n+          target_os = \"android\",\n+          target_os = \"freebsd\",\n+          target_os = \"dragonfly\"))]\n fn real_args_as_bytes() -> Vec<Vec<u8>> {\n     use rt;\n "}, {"sha": "c5b7154ffdb57d00dd5d5eb6f03fb33fc31ccf1d", "filename": "src/libstd/rand/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff2616e847ddf913e007d715732b5669b0f22672/src%2Flibstd%2Frand%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2616e847ddf913e007d715732b5669b0f22672/src%2Flibstd%2Frand%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fos.rs?ref=ff2616e847ddf913e007d715732b5669b0f22672", "patch": "@@ -13,7 +13,7 @@\n \n pub use self::imp::OsRng;\n \n-#[cfg(unix, not(target_os = \"ios\"))]\n+#[cfg(all(unix, not(target_os = \"ios\")))]\n mod imp {\n     use io::{IoResult, File};\n     use path::Path;"}, {"sha": "33f8713e1a13c9f61fa67856ec89997f4f268cd6", "filename": "src/libstd/rt/backtrace.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ff2616e847ddf913e007d715732b5669b0f22672/src%2Flibstd%2Frt%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2616e847ddf913e007d715732b5669b0f22672/src%2Flibstd%2Frt%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fbacktrace.rs?ref=ff2616e847ddf913e007d715732b5669b0f22672", "patch": "@@ -253,7 +253,7 @@ mod imp {\n     /// play well with green threads, so while it is extremely nice\n     /// and simple to use it should be used only on iOS devices as the\n     /// only viable option.\n-    #[cfg(target_os = \"ios\", target_arch = \"arm\")]\n+    #[cfg(all(target_os = \"ios\", target_arch = \"arm\"))]\n     #[inline(never)]\n     pub fn write(w: &mut Writer) -> IoResult<()> {\n         use iter::{Iterator, range};\n@@ -284,7 +284,7 @@ mod imp {\n         result::fold(iter, (), |_, _| ())\n     }\n \n-    #[cfg(not(target_os = \"ios\", target_arch = \"arm\"))]\n+    #[cfg(not(all(target_os = \"ios\", target_arch = \"arm\")))]\n     #[inline(never)] // if we know this is a function call, we can skip it when\n                      // tracing\n     pub fn write(w: &mut Writer) -> IoResult<()> {\n@@ -365,8 +365,7 @@ mod imp {\n         }\n     }\n \n-    #[cfg(target_os = \"macos\")]\n-    #[cfg(target_os = \"ios\")]\n+    #[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n     fn print(w: &mut Writer, idx: int, addr: *mut libc::c_void) -> IoResult<()> {\n         use intrinsics;\n         #[repr(C)]\n@@ -391,7 +390,7 @@ mod imp {\n         }\n     }\n \n-    #[cfg(not(target_os = \"macos\"), not(target_os = \"ios\"))]\n+    #[cfg(not(any(target_os = \"macos\", target_os = \"ios\")))]\n     fn print(w: &mut Writer, idx: int, addr: *mut libc::c_void) -> IoResult<()> {\n         use collections::Collection;\n         use iter::Iterator;\n@@ -571,25 +570,26 @@ mod imp {\n \n         extern {\n             // No native _Unwind_Backtrace on iOS\n-            #[cfg(not(target_os = \"ios\", target_arch = \"arm\"))]\n+            #[cfg(not(all(target_os = \"ios\", target_arch = \"arm\")))]\n             pub fn _Unwind_Backtrace(trace: _Unwind_Trace_Fn,\n                                      trace_argument: *mut libc::c_void)\n                         -> _Unwind_Reason_Code;\n \n-            #[cfg(not(target_os = \"android\"),\n-                  not(target_os = \"linux\", target_arch = \"arm\"))]\n+            #[cfg(all(not(target_os = \"android\"),\n+                      not(all(target_os = \"linux\", target_arch = \"arm\"))))]\n             pub fn _Unwind_GetIP(ctx: *mut _Unwind_Context) -> libc::uintptr_t;\n-            #[cfg(not(target_os = \"android\"),\n-                  not(target_os = \"linux\", target_arch = \"arm\"))]\n+\n+            #[cfg(all(not(target_os = \"android\"),\n+                      not(all(target_os = \"linux\", target_arch = \"arm\"))))]\n             pub fn _Unwind_FindEnclosingFunction(pc: *mut libc::c_void)\n                 -> *mut libc::c_void;\n         }\n \n         // On android, the function _Unwind_GetIP is a macro, and this is the\n         // expansion of the macro. This is all copy/pasted directly from the\n         // header file with the definition of _Unwind_GetIP.\n-        #[cfg(target_os = \"android\")]\n-        #[cfg(target_os = \"linux\", target_arch = \"arm\")]\n+        #[cfg(any(target_os = \"android\",\n+                  all(target_os = \"linux\", target_arch = \"arm\")))]\n         pub unsafe fn _Unwind_GetIP(ctx: *mut _Unwind_Context) -> libc::uintptr_t {\n             #[repr(C)]\n             enum _Unwind_VRS_Result {\n@@ -634,8 +634,8 @@ mod imp {\n \n         // This function also doesn't exist on Android or ARM/Linux, so make it\n         // a no-op\n-        #[cfg(target_os = \"android\")]\n-        #[cfg(target_os = \"linux\", target_arch = \"arm\")]\n+        #[cfg(any(target_os = \"android\",\n+                  all(target_os = \"linux\", target_arch = \"arm\")))]\n         pub unsafe fn _Unwind_FindEnclosingFunction(pc: *mut libc::c_void)\n             -> *mut libc::c_void\n         {"}, {"sha": "1491f02b3f5c15833c52940b063e752f6e963a53", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ff2616e847ddf913e007d715732b5669b0f22672/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2616e847ddf913e007d715732b5669b0f22672/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=ff2616e847ddf913e007d715732b5669b0f22672", "patch": "@@ -315,14 +315,11 @@ pub fn cfg_matches(diagnostic: &SpanHandler, cfgs: &[P<MetaItem>], cfg: &ast::Me\n         ast::MetaList(ref pred, ref mis) if pred.get() == \"all\" =>\n             mis.iter().all(|mi| cfg_matches(diagnostic, cfgs, &**mi)),\n         ast::MetaList(ref pred, ref mis) if pred.get() == \"not\" => {\n-            // NOTE: turn on after snapshot\n-            /*\n             if mis.len() != 1 {\n                 diagnostic.span_warn(cfg.span, \"the use of multiple cfgs in the same `not` \\\n                                                 statement is deprecated. Change `not(a, b)` to \\\n                                                 `not(all(a, b))`.\");\n             }\n-            */\n             !mis.iter().all(|mi| cfg_matches(diagnostic, cfgs, &**mi))\n         }\n         ast::MetaList(ref pred, _) => {"}, {"sha": "9b4748f88ab25d7ac8f8f0995e0841f4d9cb6ba7", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ff2616e847ddf913e007d715732b5669b0f22672/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2616e847ddf913e007d715732b5669b0f22672/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=ff2616e847ddf913e007d715732b5669b0f22672", "patch": "@@ -260,8 +260,6 @@ fn in_cfg(diagnostic: &SpanHandler, cfg: &[P<ast::MetaItem>], attrs: &[ast::Attr\n             _ => continue\n         };\n \n-        // NOTE: turn on after snapshot\n-        /*\n         if mis.len() != 1 {\n             diagnostic.span_warn(attr.span, \"The use of multiple cfgs in the top level of \\\n                                              `#[cfg(..)]` is deprecated. Change `#[cfg(a, b)]` to \\\n@@ -274,7 +272,6 @@ fn in_cfg(diagnostic: &SpanHandler, cfg: &[P<ast::MetaItem>], attrs: &[ast::Attr\n                                              the intersection of the cfgs. Change `#[cfg(a)] \\\n                                              #[cfg(b)]` to `#[cfg(any(a, b))]`.\");\n         }\n-        */\n \n         seen_cfg = true;\n         in_cfg |= mis.iter().all(|mi| attr::cfg_matches(diagnostic, cfg, &**mi));"}, {"sha": "74039da6cabdb07037c8331be45429a847e09ff1", "filename": "src/libsyntax/ext/cfg.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ff2616e847ddf913e007d715732b5669b0f22672/src%2Flibsyntax%2Fext%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2616e847ddf913e007d715732b5669b0f22672/src%2Flibsyntax%2Fext%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fcfg.rs?ref=ff2616e847ddf913e007d715732b5669b0f22672", "patch": "@@ -38,14 +38,11 @@ pub fn expand_cfg<'cx>(cx: &mut ExtCtxt,\n         p.expect(&token::COMMA);\n     }\n \n-    // NOTE: turn on after snapshot\n-    /*\n     if cfgs.len() != 1 {\n         cx.span_warn(sp, \"The use of multiple cfgs at the top level of `cfg!` \\\n                           is deprecated. Change `cfg!(a, b)` to \\\n                           `cfg!(all(a, b))`.\");\n     }\n-    */\n \n     let matches_cfg = cfgs.iter().all(|cfg| attr::cfg_matches(&cx.parse_sess.span_diagnostic,\n                                                               cx.cfg.as_slice(), &**cfg));"}, {"sha": "6ca33f0dabc7ca28078d474a529bd2353137c2f0", "filename": "src/libtime/lib.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ff2616e847ddf913e007d715732b5669b0f22672/src%2Flibtime%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2616e847ddf913e007d715732b5669b0f22672/src%2Flibtime%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtime%2Flib.rs?ref=ff2616e847ddf913e007d715732b5669b0f22672", "patch": "@@ -47,7 +47,7 @@ mod rustrt {\n     }\n }\n \n-#[cfg(unix, not(target_os = \"macos\"), not(target_os = \"ios\"))]\n+#[cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\")))]\n mod imp {\n     use libc::{c_int, timespec};\n \n@@ -61,8 +61,7 @@ mod imp {\n     }\n \n }\n-#[cfg(target_os = \"macos\")]\n-#[cfg(target_os = \"ios\")]\n+#[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n mod imp {\n     use libc::{timeval, timezone, c_int, mach_timebase_info};\n \n@@ -150,16 +149,15 @@ pub fn get_time() -> Timespec {\n          ((ns_since_1970 % 1000000) * 1000) as i32)\n     }\n \n-    #[cfg(target_os = \"macos\")]\n-    #[cfg(target_os = \"ios\")]\n+    #[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n     unsafe fn os_get_time() -> (i64, i32) {\n         use std::ptr;\n         let mut tv = libc::timeval { tv_sec: 0, tv_usec: 0 };\n         imp::gettimeofday(&mut tv, ptr::null_mut());\n         (tv.tv_sec as i64, tv.tv_usec * 1000)\n     }\n \n-    #[cfg(not(target_os = \"macos\"), not(target_os = \"ios\"), not(windows))]\n+    #[cfg(not(any(target_os = \"macos\", target_os = \"ios\", windows)))]\n     unsafe fn os_get_time() -> (i64, i32) {\n         let mut tv = libc::timespec { tv_sec: 0, tv_nsec: 0 };\n         imp::clock_gettime(libc::CLOCK_REALTIME, &mut tv);\n@@ -190,8 +188,7 @@ pub fn precise_time_ns() -> u64 {\n         return (ticks as u64 * 1000000000) / (ticks_per_s as u64);\n     }\n \n-    #[cfg(target_os = \"macos\")]\n-    #[cfg(target_os = \"ios\")]\n+    #[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n     fn os_precise_time_ns() -> u64 {\n         static mut TIMEBASE: libc::mach_timebase_info = libc::mach_timebase_info { numer: 0,\n                                                                                    denom: 0 };\n@@ -205,7 +202,7 @@ pub fn precise_time_ns() -> u64 {\n         }\n     }\n \n-    #[cfg(not(windows), not(target_os = \"macos\"), not(target_os = \"ios\"))]\n+    #[cfg(not(any(windows, target_os = \"macos\", target_os = \"ios\")))]\n     fn os_precise_time_ns() -> u64 {\n         let mut ts = libc::timespec { tv_sec: 0, tv_nsec: 0 };\n         unsafe {"}]}