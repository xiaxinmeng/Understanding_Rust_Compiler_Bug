{"sha": "380f7218b3876225e726617531d9f02d42da0e38", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4MGY3MjE4YjM4NzYyMjVlNzI2NjE3NTMxZDlmMDJkNDJkYTBlMzg=", "commit": {"author": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-02-29T17:41:18Z"}, "committer": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-04-09T07:09:39Z"}, "message": "Add lint on large const arrays", "tree": {"sha": "4fd8eafa2b03ed8872eb2c7d0eb5cbd74c6b3361", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fd8eafa2b03ed8872eb2c7d0eb5cbd74c6b3361"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/380f7218b3876225e726617531d9f02d42da0e38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/380f7218b3876225e726617531d9f02d42da0e38", "html_url": "https://github.com/rust-lang/rust/commit/380f7218b3876225e726617531d9f02d42da0e38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/380f7218b3876225e726617531d9f02d42da0e38/comments", "author": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c25f26d4ca8d194fd1edfda643f2c96170a85a77", "url": "https://api.github.com/repos/rust-lang/rust/commits/c25f26d4ca8d194fd1edfda643f2c96170a85a77", "html_url": "https://github.com/rust-lang/rust/commit/c25f26d4ca8d194fd1edfda643f2c96170a85a77"}], "stats": {"total": 247, "additions": 247, "deletions": 0}, "files": [{"sha": "cbc7d98c8782f35394b7d62a81ae18bb889ce2ee", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/380f7218b3876225e726617531d9f02d42da0e38/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/380f7218b3876225e726617531d9f02d42da0e38/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=380f7218b3876225e726617531d9f02d42da0e38", "patch": "@@ -1319,6 +1319,7 @@ Released 2018-09-13\n [`iter_skip_next`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_skip_next\n [`iterator_step_by_zero`]: https://rust-lang.github.io/rust-clippy/master/index.html#iterator_step_by_zero\n [`just_underscores_and_digits`]: https://rust-lang.github.io/rust-clippy/master/index.html#just_underscores_and_digits\n+[`large_const_arrays`]: https://rust-lang.github.io/rust-clippy/master/index.html#large_const_arrays\n [`large_digit_groups`]: https://rust-lang.github.io/rust-clippy/master/index.html#large_digit_groups\n [`large_enum_variant`]: https://rust-lang.github.io/rust-clippy/master/index.html#large_enum_variant\n [`large_stack_arrays`]: https://rust-lang.github.io/rust-clippy/master/index.html#large_stack_arrays"}, {"sha": "2f62e6ad9dc5c0a498378debed2107b4a74ee19c", "filename": "clippy_lints/src/large_const_arrays.rs", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/380f7218b3876225e726617531d9f02d42da0e38/clippy_lints%2Fsrc%2Flarge_const_arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/380f7218b3876225e726617531d9f02d42da0e38/clippy_lints%2Fsrc%2Flarge_const_arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_const_arrays.rs?ref=380f7218b3876225e726617531d9f02d42da0e38", "patch": "@@ -0,0 +1,85 @@\n+use crate::rustc_target::abi::LayoutOf;\n+use crate::utils::span_lint_and_then;\n+use if_chain::if_chain;\n+use rustc::mir::interpret::ConstValue;\n+use rustc::ty::{self, ConstKind};\n+use rustc_errors::Applicability;\n+use rustc_hir::{Item, ItemKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::{BytePos, Pos, Span};\n+use rustc_typeck::hir_ty_to_ty;\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for large `const` arrays that should\n+    /// be defined as `static` instead.\n+    ///\n+    /// **Why is this bad?** Performance: const variables are inlined upon use.\n+    /// Static items result in only one instance and has a fixed location in memory.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    /// ```rust,ignore\n+    /// // Bad\n+    /// pub const a = [0u32; 1_000_000];\n+    ///\n+    /// // Good\n+    /// pub static a = [0u32; 1_000_000];\n+    /// ```\n+    pub LARGE_CONST_ARRAYS,\n+    perf,\n+    \"large non-scalar const array may cause performance overhead\"\n+}\n+\n+pub struct LargeConstArrays {\n+    maximum_allowed_size: u64,\n+}\n+\n+impl LargeConstArrays {\n+    #[must_use]\n+    pub fn new(maximum_allowed_size: u64) -> Self {\n+        Self { maximum_allowed_size }\n+    }\n+}\n+\n+impl_lint_pass!(LargeConstArrays => [LARGE_CONST_ARRAYS]);\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LargeConstArrays {\n+    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item<'_>) {\n+        if_chain! {\n+            if !item.span.from_expansion();\n+            if let ItemKind::Const(hir_ty, _) = &item.kind;\n+            let ty = hir_ty_to_ty(cx.tcx, hir_ty);\n+            if let ty::Array(element_type, cst) = ty.kind;\n+            if let ConstKind::Value(val) = cst.val;\n+            if let ConstValue::Scalar(element_count) = val;\n+            if let Ok(element_count) = element_count.to_machine_usize(&cx.tcx);\n+            if let Ok(element_size) = cx.layout_of(element_type).map(|l| l.size.bytes());\n+            if self.maximum_allowed_size < element_count * element_size;\n+\n+            then {\n+                let hi_pos = item.ident.span.lo() - BytePos::from_usize(1);\n+                let sugg_span = Span::new(\n+                    hi_pos - BytePos::from_usize(\"const\".len()),\n+                    hi_pos,\n+                    item.span.ctxt(),\n+                );\n+                span_lint_and_then(\n+                    cx,\n+                    LARGE_CONST_ARRAYS,\n+                    item.span,\n+                    \"large array defined as const\",\n+                    |db| {\n+                        db.span_suggestion(\n+                            sugg_span,\n+                            \"make this a static item\",\n+                            \"static\".to_string(),\n+                            Applicability::MachineApplicable,\n+                        );\n+                    }\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "909115f7a3a94ad127651ce98ac297b22efa72bd", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/380f7218b3876225e726617531d9f02d42da0e38/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/380f7218b3876225e726617531d9f02d42da0e38/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=380f7218b3876225e726617531d9f02d42da0e38", "patch": "@@ -580,6 +580,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &int_plus_one::INT_PLUS_ONE,\n         &integer_division::INTEGER_DIVISION,\n         &items_after_statements::ITEMS_AFTER_STATEMENTS,\n+        &large_const_arrays::LARGE_CONST_ARRAYS,\n         &large_enum_variant::LARGE_ENUM_VARIANT,\n         &large_stack_arrays::LARGE_STACK_ARRAYS,\n         &len_zero::LEN_WITHOUT_IS_EMPTY,\n@@ -1024,6 +1025,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box to_digit_is_some::ToDigitIsSome);\n     let array_size_threshold = conf.array_size_threshold;\n     store.register_late_pass(move || box large_stack_arrays::LargeStackArrays::new(array_size_threshold));\n+    store.register_late_pass(move || box large_const_arrays::LargeConstArrays::new(array_size_threshold));\n     store.register_late_pass(move || box floating_point_arithmetic::FloatingPointArithmetic);\n     store.register_early_pass(|| box as_conversions::AsConversions);\n     store.register_early_pass(|| box utils::internal_lints::ProduceIce);\n@@ -1222,6 +1224,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&inherent_to_string::INHERENT_TO_STRING_SHADOW_DISPLAY),\n         LintId::of(&inline_fn_without_body::INLINE_FN_WITHOUT_BODY),\n         LintId::of(&int_plus_one::INT_PLUS_ONE),\n+        LintId::of(&large_const_arrays::LARGE_CONST_ARRAYS),\n         LintId::of(&large_enum_variant::LARGE_ENUM_VARIANT),\n         LintId::of(&len_zero::LEN_WITHOUT_IS_EMPTY),\n         LintId::of(&len_zero::LEN_ZERO),\n@@ -1651,6 +1654,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&bytecount::NAIVE_BYTECOUNT),\n         LintId::of(&entry::MAP_ENTRY),\n         LintId::of(&escape::BOXED_LOCAL),\n+        LintId::of(&large_const_arrays::LARGE_CONST_ARRAYS),\n         LintId::of(&large_enum_variant::LARGE_ENUM_VARIANT),\n         LintId::of(&loops::MANUAL_MEMCPY),\n         LintId::of(&loops::NEEDLESS_COLLECT),"}, {"sha": "771b6d49634c890352c7a786e4018a61ad979564", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/380f7218b3876225e726617531d9f02d42da0e38/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/380f7218b3876225e726617531d9f02d42da0e38/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=380f7218b3876225e726617531d9f02d42da0e38", "patch": "@@ -941,6 +941,13 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"non_expressive_names\",\n     },\n+    Lint {\n+        name: \"large_const_arrays\",\n+        group: \"perf\",\n+        desc: \"large non-scalar const array may cause performance overhead\",\n+        deprecation: None,\n+        module: \"large_const_arrays\",\n+    },\n     Lint {\n         name: \"large_digit_groups\",\n         group: \"pedantic\","}, {"sha": "c5af07c8a1728bc671c4837ccb7d7bec70150ae5", "filename": "tests/ui/large_const_arrays.fixed", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/380f7218b3876225e726617531d9f02d42da0e38/tests%2Fui%2Flarge_const_arrays.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/380f7218b3876225e726617531d9f02d42da0e38/tests%2Fui%2Flarge_const_arrays.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_const_arrays.fixed?ref=380f7218b3876225e726617531d9f02d42da0e38", "patch": "@@ -0,0 +1,37 @@\n+// run-rustfix\n+\n+#![warn(clippy::large_const_arrays)]\n+#![allow(dead_code)]\n+\n+#[derive(Clone, Copy)]\n+pub struct S {\n+    pub data: [u64; 32],\n+}\n+\n+// Should lint\n+pub(crate) static FOO_PUB_CRATE: [u32; 1_000_000] = [0u32; 1_000_000];\n+pub static FOO_PUB: [u32; 1_000_000] = [0u32; 1_000_000];\n+static FOO: [u32; 1_000_000] = [0u32; 1_000_000];\n+\n+// Good\n+pub(crate) const G_FOO_PUB_CRATE: [u32; 1_000] = [0u32; 1_000];\n+pub const G_FOO_PUB: [u32; 1_000] = [0u32; 1_000];\n+const G_FOO: [u32; 1_000] = [0u32; 1_000];\n+\n+fn main() {\n+    // Should lint\n+    pub static BAR_PUB: [u32; 1_000_000] = [0u32; 1_000_000];\n+    static BAR: [u32; 1_000_000] = [0u32; 1_000_000];\n+    pub static BAR_STRUCT_PUB: [S; 5_000] = [S { data: [0; 32] }; 5_000];\n+    static BAR_STRUCT: [S; 5_000] = [S { data: [0; 32] }; 5_000];\n+    pub static BAR_S_PUB: [Option<&str>; 200_000] = [Some(\"str\"); 200_000];\n+    static BAR_S: [Option<&str>; 200_000] = [Some(\"str\"); 200_000];\n+\n+    // Good\n+    pub const G_BAR_PUB: [u32; 1_000] = [0u32; 1_000];\n+    const G_BAR: [u32; 1_000] = [0u32; 1_000];\n+    pub const G_BAR_STRUCT_PUB: [S; 500] = [S { data: [0; 32] }; 500];\n+    const G_BAR_STRUCT: [S; 500] = [S { data: [0; 32] }; 500];\n+    pub const G_BAR_S_PUB: [Option<&str>; 200] = [Some(\"str\"); 200];\n+    const G_BAR_S: [Option<&str>; 200] = [Some(\"str\"); 200];\n+}"}, {"sha": "a160b9f8ad5b0249adeb8099f4dbcfa40c8abe51", "filename": "tests/ui/large_const_arrays.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/380f7218b3876225e726617531d9f02d42da0e38/tests%2Fui%2Flarge_const_arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/380f7218b3876225e726617531d9f02d42da0e38/tests%2Fui%2Flarge_const_arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_const_arrays.rs?ref=380f7218b3876225e726617531d9f02d42da0e38", "patch": "@@ -0,0 +1,37 @@\n+// run-rustfix\n+\n+#![warn(clippy::large_const_arrays)]\n+#![allow(dead_code)]\n+\n+#[derive(Clone, Copy)]\n+pub struct S {\n+    pub data: [u64; 32],\n+}\n+\n+// Should lint\n+pub(crate) const FOO_PUB_CRATE: [u32; 1_000_000] = [0u32; 1_000_000];\n+pub const FOO_PUB: [u32; 1_000_000] = [0u32; 1_000_000];\n+const FOO: [u32; 1_000_000] = [0u32; 1_000_000];\n+\n+// Good\n+pub(crate) const G_FOO_PUB_CRATE: [u32; 1_000] = [0u32; 1_000];\n+pub const G_FOO_PUB: [u32; 1_000] = [0u32; 1_000];\n+const G_FOO: [u32; 1_000] = [0u32; 1_000];\n+\n+fn main() {\n+    // Should lint\n+    pub const BAR_PUB: [u32; 1_000_000] = [0u32; 1_000_000];\n+    const BAR: [u32; 1_000_000] = [0u32; 1_000_000];\n+    pub const BAR_STRUCT_PUB: [S; 5_000] = [S { data: [0; 32] }; 5_000];\n+    const BAR_STRUCT: [S; 5_000] = [S { data: [0; 32] }; 5_000];\n+    pub const BAR_S_PUB: [Option<&str>; 200_000] = [Some(\"str\"); 200_000];\n+    const BAR_S: [Option<&str>; 200_000] = [Some(\"str\"); 200_000];\n+\n+    // Good\n+    pub const G_BAR_PUB: [u32; 1_000] = [0u32; 1_000];\n+    const G_BAR: [u32; 1_000] = [0u32; 1_000];\n+    pub const G_BAR_STRUCT_PUB: [S; 500] = [S { data: [0; 32] }; 500];\n+    const G_BAR_STRUCT: [S; 500] = [S { data: [0; 32] }; 500];\n+    pub const G_BAR_S_PUB: [Option<&str>; 200] = [Some(\"str\"); 200];\n+    const G_BAR_S: [Option<&str>; 200] = [Some(\"str\"); 200];\n+}"}, {"sha": "3fb0acbca67de8225e1df60c6ba873cedd6fdc82", "filename": "tests/ui/large_const_arrays.stderr", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/380f7218b3876225e726617531d9f02d42da0e38/tests%2Fui%2Flarge_const_arrays.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/380f7218b3876225e726617531d9f02d42da0e38/tests%2Fui%2Flarge_const_arrays.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_const_arrays.stderr?ref=380f7218b3876225e726617531d9f02d42da0e38", "patch": "@@ -0,0 +1,76 @@\n+error: large array defined as const\n+  --> $DIR/large_const_arrays.rs:12:1\n+   |\n+LL | pub(crate) const FOO_PUB_CRATE: [u32; 1_000_000] = [0u32; 1_000_000];\n+   | ^^^^^^^^^^^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            |\n+   |            help: make this a static item: `static`\n+   |\n+   = note: `-D clippy::large-const-arrays` implied by `-D warnings`\n+\n+error: large array defined as const\n+  --> $DIR/large_const_arrays.rs:13:1\n+   |\n+LL | pub const FOO_PUB: [u32; 1_000_000] = [0u32; 1_000_000];\n+   | ^^^^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     |\n+   |     help: make this a static item: `static`\n+\n+error: large array defined as const\n+  --> $DIR/large_const_arrays.rs:14:1\n+   |\n+LL | const FOO: [u32; 1_000_000] = [0u32; 1_000_000];\n+   | -----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | |\n+   | help: make this a static item: `static`\n+\n+error: large array defined as const\n+  --> $DIR/large_const_arrays.rs:23:5\n+   |\n+LL |     pub const BAR_PUB: [u32; 1_000_000] = [0u32; 1_000_000];\n+   |     ^^^^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         |\n+   |         help: make this a static item: `static`\n+\n+error: large array defined as const\n+  --> $DIR/large_const_arrays.rs:24:5\n+   |\n+LL |     const BAR: [u32; 1_000_000] = [0u32; 1_000_000];\n+   |     -----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     |\n+   |     help: make this a static item: `static`\n+\n+error: large array defined as const\n+  --> $DIR/large_const_arrays.rs:25:5\n+   |\n+LL |     pub const BAR_STRUCT_PUB: [S; 5_000] = [S { data: [0; 32] }; 5_000];\n+   |     ^^^^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         |\n+   |         help: make this a static item: `static`\n+\n+error: large array defined as const\n+  --> $DIR/large_const_arrays.rs:26:5\n+   |\n+LL |     const BAR_STRUCT: [S; 5_000] = [S { data: [0; 32] }; 5_000];\n+   |     -----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     |\n+   |     help: make this a static item: `static`\n+\n+error: large array defined as const\n+  --> $DIR/large_const_arrays.rs:27:5\n+   |\n+LL |     pub const BAR_S_PUB: [Option<&str>; 200_000] = [Some(\"str\"); 200_000];\n+   |     ^^^^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         |\n+   |         help: make this a static item: `static`\n+\n+error: large array defined as const\n+  --> $DIR/large_const_arrays.rs:28:5\n+   |\n+LL |     const BAR_S: [Option<&str>; 200_000] = [Some(\"str\"); 200_000];\n+   |     -----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     |\n+   |     help: make this a static item: `static`\n+\n+error: aborting due to 9 previous errors\n+"}]}