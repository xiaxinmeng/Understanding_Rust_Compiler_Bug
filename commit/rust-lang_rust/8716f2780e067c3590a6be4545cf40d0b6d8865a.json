{"sha": "8716f2780e067c3590a6be4545cf40d0b6d8865a", "node_id": "C_kwDOAAsO6NoAKDg3MTZmMjc4MGUwNjdjMzU5MGE2YmU0NTQ1Y2Y0MGQwYjZkODg2NWE", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2021-12-07T23:46:38Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2021-12-10T00:51:39Z"}, "message": "asm: Allow using r9 (ARM) and x18 (AArch64) if they are not reserved by\nthe current target.", "tree": {"sha": "8087d0d6f4784def74dc308848ee6adc679db7b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8087d0d6f4784def74dc308848ee6adc679db7b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8716f2780e067c3590a6be4545cf40d0b6d8865a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8716f2780e067c3590a6be4545cf40d0b6d8865a", "html_url": "https://github.com/rust-lang/rust/commit/8716f2780e067c3590a6be4545cf40d0b6d8865a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8716f2780e067c3590a6be4545cf40d0b6d8865a/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b42deaccc2cbe17a68067aa5fdb76104369e1fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b42deaccc2cbe17a68067aa5fdb76104369e1fd", "html_url": "https://github.com/rust-lang/rust/commit/0b42deaccc2cbe17a68067aa5fdb76104369e1fd"}], "stats": {"total": 81, "additions": 72, "deletions": 9}, "files": [{"sha": "9c28f3c7f5899c36f5a0029102ba61e84cb31b87", "filename": "compiler/rustc_ast_lowering/src/asm.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8716f2780e067c3590a6be4545cf40d0b6d8865a/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8716f2780e067c3590a6be4545cf40d0b6d8865a/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs?ref=8716f2780e067c3590a6be4545cf40d0b6d8865a", "patch": "@@ -64,7 +64,12 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         let mut clobber_abis = FxHashMap::default();\n         if let Some(asm_arch) = asm_arch {\n             for (abi_name, abi_span) in &asm.clobber_abis {\n-                match asm::InlineAsmClobberAbi::parse(asm_arch, &self.sess.target, *abi_name) {\n+                match asm::InlineAsmClobberAbi::parse(\n+                    asm_arch,\n+                    |feature| self.sess.target_features.contains(&Symbol::intern(feature)),\n+                    &self.sess.target,\n+                    *abi_name,\n+                ) {\n                     Ok(abi) => {\n                         // If the abi was already in the list, emit an error\n                         match clobber_abis.get(&abi) {"}, {"sha": "63cc6faf9ec5ea01de532406e44fcc2b98ff9f84", "filename": "compiler/rustc_codegen_ssa/src/target_features.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8716f2780e067c3590a6be4545cf40d0b6d8865a/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8716f2780e067c3590a6be4545cf40d0b6d8865a/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs?ref=8716f2780e067c3590a6be4545cf40d0b6d8865a", "patch": "@@ -36,6 +36,7 @@ const ARM_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n     // #[target_feature].\n     (\"thumb-mode\", Some(sym::arm_target_feature)),\n     (\"thumb2\", Some(sym::arm_target_feature)),\n+    (\"reserve-r9\", Some(sym::arm_target_feature)),\n ];\n \n const AARCH64_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &["}, {"sha": "4bf909ce46d257955a319c518726ae605b1cba26", "filename": "compiler/rustc_target/src/asm/aarch64.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8716f2780e067c3590a6be4545cf40d0b6d8865a/compiler%2Frustc_target%2Fsrc%2Fasm%2Faarch64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8716f2780e067c3590a6be4545cf40d0b6d8865a/compiler%2Frustc_target%2Fsrc%2Fasm%2Faarch64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Faarch64.rs?ref=8716f2780e067c3590a6be4545cf40d0b6d8865a", "patch": "@@ -1,4 +1,5 @@\n use super::{InlineAsmArch, InlineAsmType};\n+use crate::spec::Target;\n use rustc_macros::HashStable_Generic;\n use std::fmt;\n \n@@ -70,6 +71,22 @@ impl AArch64InlineAsmRegClass {\n     }\n }\n \n+pub fn reserved_x18(\n+    _arch: InlineAsmArch,\n+    _has_feature: impl FnMut(&str) -> bool,\n+    target: &Target,\n+) -> Result<(), &'static str> {\n+    if target.os == \"android\"\n+        || target.is_like_fuchsia\n+        || target.is_like_osx\n+        || target.is_like_windows\n+    {\n+        Err(\"x18 is a reserved register on this target\")\n+    } else {\n+        Ok(())\n+    }\n+}\n+\n def_regs! {\n     AArch64 AArch64InlineAsmReg AArch64InlineAsmRegClass {\n         x0: reg = [\"x0\", \"w0\"],\n@@ -90,6 +107,7 @@ def_regs! {\n         x15: reg = [\"x15\", \"w15\"],\n         x16: reg = [\"x16\", \"w16\"],\n         x17: reg = [\"x17\", \"w17\"],\n+        x18: reg = [\"x18\", \"w18\"] % reserved_x18,\n         x20: reg = [\"x20\", \"w20\"],\n         x21: reg = [\"x21\", \"w21\"],\n         x22: reg = [\"x22\", \"w22\"],\n@@ -149,8 +167,6 @@ def_regs! {\n         p14: preg = [\"p14\"],\n         p15: preg = [\"p15\"],\n         ffr: preg = [\"ffr\"],\n-        #error = [\"x18\", \"w18\"] =>\n-            \"x18 is used as a reserved register on some targets and cannot be used as an operand for inline asm\",\n         #error = [\"x19\", \"w19\"] =>\n             \"x19 is used internally by LLVM and cannot be used as an operand for inline asm\",\n         #error = [\"x29\", \"w29\", \"fp\", \"wfp\"] =>"}, {"sha": "b03594b3151a3788a54f5296b0d105b850c39ef5", "filename": "compiler/rustc_target/src/asm/arm.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8716f2780e067c3590a6be4545cf40d0b6d8865a/compiler%2Frustc_target%2Fsrc%2Fasm%2Farm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8716f2780e067c3590a6be4545cf40d0b6d8865a/compiler%2Frustc_target%2Fsrc%2Fasm%2Farm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Farm.rs?ref=8716f2780e067c3590a6be4545cf40d0b6d8865a", "patch": "@@ -99,6 +99,22 @@ fn not_thumb1(\n     }\n }\n \n+fn reserved_r9(\n+    arch: InlineAsmArch,\n+    mut has_feature: impl FnMut(&str) -> bool,\n+    target: &Target,\n+) -> Result<(), &'static str> {\n+    not_thumb1(arch, &mut has_feature, target)?;\n+\n+    // We detect this using the reserved-r9 feature instead of using the target\n+    // because the relocation model can be changed with compiler options.\n+    if has_feature(\"reserved-r9\") {\n+        Err(\"the RWPI static base register (r9) cannot be used as an operand for inline asm\")\n+    } else {\n+        Ok(())\n+    }\n+}\n+\n def_regs! {\n     Arm ArmInlineAsmReg ArmInlineAsmRegClass {\n         r0: reg = [\"r0\", \"a1\"],\n@@ -109,6 +125,7 @@ def_regs! {\n         r5: reg = [\"r5\", \"v2\"],\n         r7: reg = [\"r7\", \"v4\"] % frame_pointer_r7,\n         r8: reg = [\"r8\", \"v5\"] % not_thumb1,\n+        r9: reg = [\"r9\", \"v6\", \"rfp\"] % reserved_r9,\n         r10: reg = [\"r10\", \"sl\"] % not_thumb1,\n         r11: reg = [\"r11\", \"fp\"] % frame_pointer_r11,\n         r12: reg = [\"r12\", \"ip\"] % not_thumb1,\n@@ -195,8 +212,6 @@ def_regs! {\n         q15: qreg = [\"q15\"],\n         #error = [\"r6\", \"v3\"] =>\n             \"r6 is used internally by LLVM and cannot be used as an operand for inline asm\",\n-        #error = [\"r9\", \"v6\", \"rfp\"] =>\n-            \"r9 is used internally by LLVM and cannot be used as an operand for inline asm\",\n         #error = [\"r13\", \"sp\"] =>\n             \"the stack pointer cannot be used as an operand for inline asm\",\n         #error = [\"r15\", \"pc\"] =>"}, {"sha": "f1f5f4389e3e9097b9e0ef7ac12cec97afecde97", "filename": "compiler/rustc_target/src/asm/mod.rs", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8716f2780e067c3590a6be4545cf40d0b6d8865a/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8716f2780e067c3590a6be4545cf40d0b6d8865a/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs?ref=8716f2780e067c3590a6be4545cf40d0b6d8865a", "patch": "@@ -785,6 +785,7 @@ pub enum InlineAsmClobberAbi {\n     X86_64SysV,\n     Arm,\n     AArch64,\n+    AArch64NoX18,\n     RiscV,\n }\n \n@@ -793,6 +794,7 @@ impl InlineAsmClobberAbi {\n     /// clobber ABIs for the target.\n     pub fn parse(\n         arch: InlineAsmArch,\n+        has_feature: impl FnMut(&str) -> bool,\n         target: &Target,\n         name: Symbol,\n     ) -> Result<Self, &'static [&'static str]> {\n@@ -816,7 +818,13 @@ impl InlineAsmClobberAbi {\n                 _ => Err(&[\"C\", \"system\", \"efiapi\", \"aapcs\"]),\n             },\n             InlineAsmArch::AArch64 => match name {\n-                \"C\" | \"system\" | \"efiapi\" => Ok(InlineAsmClobberAbi::AArch64),\n+                \"C\" | \"system\" | \"efiapi\" => {\n+                    Ok(if aarch64::reserved_x18(arch, has_feature, target).is_err() {\n+                        InlineAsmClobberAbi::AArch64NoX18\n+                    } else {\n+                        InlineAsmClobberAbi::AArch64\n+                    })\n+                }\n                 _ => Err(&[\"C\", \"system\", \"efiapi\"]),\n             },\n             InlineAsmArch::RiscV32 | InlineAsmArch::RiscV64 => match name {\n@@ -891,8 +899,25 @@ impl InlineAsmClobberAbi {\n                 AArch64 AArch64InlineAsmReg {\n                     x0, x1, x2, x3, x4, x5, x6, x7,\n                     x8, x9, x10, x11, x12, x13, x14, x15,\n-                    // x18 is platform-reserved or temporary, but we exclude it\n-                    // here since it is a reserved register.\n+                    x16, x17, x18, x30,\n+\n+                    // Technically the low 64 bits of v8-v15 are preserved, but\n+                    // we have no way of expressing this using clobbers.\n+                    v0, v1, v2, v3, v4, v5, v6, v7,\n+                    v8, v9, v10, v11, v12, v13, v14, v15,\n+                    v16, v17, v18, v19, v20, v21, v22, v23,\n+                    v24, v25, v26, v27, v28, v29, v30, v31,\n+\n+                    p0, p1, p2, p3, p4, p5, p6, p7,\n+                    p8, p9, p10, p11, p12, p13, p14, p15,\n+                    ffr,\n+\n+                }\n+            },\n+            InlineAsmClobberAbi::AArch64NoX18 => clobbered_regs! {\n+                AArch64 AArch64InlineAsmReg {\n+                    x0, x1, x2, x3, x4, x5, x6, x7,\n+                    x8, x9, x10, x11, x12, x13, x14, x15,\n                     x16, x17, x30,\n \n                     // Technically the low 64 bits of v8-v15 are preserved, but\n@@ -910,7 +935,8 @@ impl InlineAsmClobberAbi {\n             },\n             InlineAsmClobberAbi::Arm => clobbered_regs! {\n                 Arm ArmInlineAsmReg {\n-                    // r9 is platform-reserved and is treated as callee-saved.\n+                    // r9 is either platform-reserved or callee-saved. Either\n+                    // way we don't need to clobber it.\n                     r0, r1, r2, r3, r12, r14,\n \n                     // The finest-grained register variant is used here so that"}]}