{"sha": "6d2689526b168d0208af0930e46dc2ef360f07fc", "node_id": "C_kwDOAAsO6NoAKDZkMjY4OTUyNmIxNjhkMDIwOGFmMDkzMGU0NmRjMmVmMzYwZjA3ZmM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-19T09:45:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-19T09:45:50Z"}, "message": "Rollup merge of #91141 - jhpratt:int_roundings, r=joshtriplett\n\nRevert \"Temporarily rename int_roundings functions to avoid conflicts\"\n\nThis reverts commit 3ece63b64e192146fcdd1724e25856a93d7626aa.\n\nThis should be okay because #90329 has been merged.\n\nr? `@joshtriplett`", "tree": {"sha": "63b1b70432d34f5e4dc1f51bd967477b245bd615", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63b1b70432d34f5e4dc1f51bd967477b245bd615"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d2689526b168d0208af0930e46dc2ef360f07fc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhvv9PCRBK7hj4Ov3rIwAAomQIAEpNsClkfI1Oe1zryq8CWKrA\nyEhDR+iVFgvJrRf0OGFyF5Sadjf1aIDNktfU1whUxRYsHwEGREu45i61xhRWIgJb\nSqjuijndtTHo3B9grMC2lekIBLeajO6mfQOkDwQgf9z0qAMBJxFLX2Vm5L5CgK+a\nOIRQAx3GIP22u/DzdHAHqSz3REk0eIt859Eq5cSd3oen4CJwsLm3mzbSj3NBjPB4\n6iRVAE9fFRPKV7Rc8JtfeYLlX235tl7uTH77YwEAwt6+M884TzvbkUoK5MUdfrPq\nL9jC2E2TaK69k3Qv5kX4tczBIwknTXKLx8zePUGU3m5THpCQMIWPpc4+a+mTxRg=\n=kMGb\n-----END PGP SIGNATURE-----\n", "payload": "tree 63b1b70432d34f5e4dc1f51bd967477b245bd615\nparent 8f540619007c1aa62dfc915409d881f52f21dc84\nparent 41f70f3491f02533819ab6584328ffd266ce02f2\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1639907150 +0100\ncommitter GitHub <noreply@github.com> 1639907150 +0100\n\nRollup merge of #91141 - jhpratt:int_roundings, r=joshtriplett\n\nRevert \"Temporarily rename int_roundings functions to avoid conflicts\"\n\nThis reverts commit 3ece63b64e192146fcdd1724e25856a93d7626aa.\n\nThis should be okay because #90329 has been merged.\n\nr? `@joshtriplett`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d2689526b168d0208af0930e46dc2ef360f07fc", "html_url": "https://github.com/rust-lang/rust/commit/6d2689526b168d0208af0930e46dc2ef360f07fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d2689526b168d0208af0930e46dc2ef360f07fc/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f540619007c1aa62dfc915409d881f52f21dc84", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f540619007c1aa62dfc915409d881f52f21dc84", "html_url": "https://github.com/rust-lang/rust/commit/8f540619007c1aa62dfc915409d881f52f21dc84"}, {"sha": "41f70f3491f02533819ab6584328ffd266ce02f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/41f70f3491f02533819ab6584328ffd266ce02f2", "html_url": "https://github.com/rust-lang/rust/commit/41f70f3491f02533819ab6584328ffd266ce02f2"}], "stats": {"total": 96, "additions": 48, "deletions": 48}, "files": [{"sha": "e6ae4afd7c192b7aa111d32983e2aac24821b3e5", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/6d2689526b168d0208af0930e46dc2ef360f07fc/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d2689526b168d0208af0930e46dc2ef360f07fc/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=6d2689526b168d0208af0930e46dc2ef360f07fc", "patch": "@@ -2025,17 +2025,17 @@ macro_rules! int_impl {\n         #[doc = concat!(\"let a: \", stringify!($SelfT),\" = 8;\")]\n         /// let b = 3;\n         ///\n-        /// assert_eq!(a.unstable_div_floor(b), 2);\n-        /// assert_eq!(a.unstable_div_floor(-b), -3);\n-        /// assert_eq!((-a).unstable_div_floor(b), -3);\n-        /// assert_eq!((-a).unstable_div_floor(-b), 2);\n+        /// assert_eq!(a.div_floor(b), 2);\n+        /// assert_eq!(a.div_floor(-b), -3);\n+        /// assert_eq!((-a).div_floor(b), -3);\n+        /// assert_eq!((-a).div_floor(-b), 2);\n         /// ```\n         #[unstable(feature = \"int_roundings\", issue = \"88581\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n         #[rustc_inherit_overflow_checks]\n-        pub const fn unstable_div_floor(self, rhs: Self) -> Self {\n+        pub const fn div_floor(self, rhs: Self) -> Self {\n             let d = self / rhs;\n             let r = self % rhs;\n             if (r > 0 && rhs < 0) || (r < 0 && rhs > 0) {\n@@ -2060,17 +2060,17 @@ macro_rules! int_impl {\n         #[doc = concat!(\"let a: \", stringify!($SelfT),\" = 8;\")]\n         /// let b = 3;\n         ///\n-        /// assert_eq!(a.unstable_div_ceil(b), 3);\n-        /// assert_eq!(a.unstable_div_ceil(-b), -2);\n-        /// assert_eq!((-a).unstable_div_ceil(b), -2);\n-        /// assert_eq!((-a).unstable_div_ceil(-b), 3);\n+        /// assert_eq!(a.div_ceil(b), 3);\n+        /// assert_eq!(a.div_ceil(-b), -2);\n+        /// assert_eq!((-a).div_ceil(b), -2);\n+        /// assert_eq!((-a).div_ceil(-b), 3);\n         /// ```\n         #[unstable(feature = \"int_roundings\", issue = \"88581\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n         #[rustc_inherit_overflow_checks]\n-        pub const fn unstable_div_ceil(self, rhs: Self) -> Self {\n+        pub const fn div_ceil(self, rhs: Self) -> Self {\n             let d = self / rhs;\n             let r = self % rhs;\n             if (r > 0 && rhs > 0) || (r < 0 && rhs < 0) {\n@@ -2095,21 +2095,21 @@ macro_rules! int_impl {\n         ///\n         /// ```\n         /// #![feature(int_roundings)]\n-        #[doc = concat!(\"assert_eq!(16_\", stringify!($SelfT), \".unstable_next_multiple_of(8), 16);\")]\n-        #[doc = concat!(\"assert_eq!(23_\", stringify!($SelfT), \".unstable_next_multiple_of(8), 24);\")]\n-        #[doc = concat!(\"assert_eq!(16_\", stringify!($SelfT), \".unstable_next_multiple_of(-8), 16);\")]\n-        #[doc = concat!(\"assert_eq!(23_\", stringify!($SelfT), \".unstable_next_multiple_of(-8), 16);\")]\n-        #[doc = concat!(\"assert_eq!((-16_\", stringify!($SelfT), \").unstable_next_multiple_of(8), -16);\")]\n-        #[doc = concat!(\"assert_eq!((-23_\", stringify!($SelfT), \").unstable_next_multiple_of(8), -16);\")]\n-        #[doc = concat!(\"assert_eq!((-16_\", stringify!($SelfT), \").unstable_next_multiple_of(-8), -16);\")]\n-        #[doc = concat!(\"assert_eq!((-23_\", stringify!($SelfT), \").unstable_next_multiple_of(-8), -24);\")]\n+        #[doc = concat!(\"assert_eq!(16_\", stringify!($SelfT), \".next_multiple_of(8), 16);\")]\n+        #[doc = concat!(\"assert_eq!(23_\", stringify!($SelfT), \".next_multiple_of(8), 24);\")]\n+        #[doc = concat!(\"assert_eq!(16_\", stringify!($SelfT), \".next_multiple_of(-8), 16);\")]\n+        #[doc = concat!(\"assert_eq!(23_\", stringify!($SelfT), \".next_multiple_of(-8), 16);\")]\n+        #[doc = concat!(\"assert_eq!((-16_\", stringify!($SelfT), \").next_multiple_of(8), -16);\")]\n+        #[doc = concat!(\"assert_eq!((-23_\", stringify!($SelfT), \").next_multiple_of(8), -16);\")]\n+        #[doc = concat!(\"assert_eq!((-16_\", stringify!($SelfT), \").next_multiple_of(-8), -16);\")]\n+        #[doc = concat!(\"assert_eq!((-23_\", stringify!($SelfT), \").next_multiple_of(-8), -24);\")]\n         /// ```\n         #[unstable(feature = \"int_roundings\", issue = \"88581\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n         #[rustc_inherit_overflow_checks]\n-        pub const fn unstable_next_multiple_of(self, rhs: Self) -> Self {\n+        pub const fn next_multiple_of(self, rhs: Self) -> Self {\n             // This would otherwise fail when calculating `r` when self == T::MIN.\n             if rhs == -1 {\n                 return self;"}, {"sha": "3cc454baf35d79aea0994510008064099600a74a", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6d2689526b168d0208af0930e46dc2ef360f07fc/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d2689526b168d0208af0930e46dc2ef360f07fc/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=6d2689526b168d0208af0930e46dc2ef360f07fc", "patch": "@@ -2024,14 +2024,14 @@ macro_rules! uint_impl {\n         ///\n         /// ```\n         /// #![feature(int_roundings)]\n-        #[doc = concat!(\"assert_eq!(7_\", stringify!($SelfT), \".unstable_div_floor(4), 1);\")]\n+        #[doc = concat!(\"assert_eq!(7_\", stringify!($SelfT), \".div_floor(4), 1);\")]\n         /// ```\n         #[unstable(feature = \"int_roundings\", issue = \"88581\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline(always)]\n         #[rustc_inherit_overflow_checks]\n-        pub const fn unstable_div_floor(self, rhs: Self) -> Self {\n+        pub const fn div_floor(self, rhs: Self) -> Self {\n             self / rhs\n         }\n \n@@ -2047,14 +2047,14 @@ macro_rules! uint_impl {\n         ///\n         /// ```\n         /// #![feature(int_roundings)]\n-        #[doc = concat!(\"assert_eq!(7_\", stringify!($SelfT), \".unstable_div_ceil(4), 2);\")]\n+        #[doc = concat!(\"assert_eq!(7_\", stringify!($SelfT), \".div_ceil(4), 2);\")]\n         /// ```\n         #[unstable(feature = \"int_roundings\", issue = \"88581\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n         #[rustc_inherit_overflow_checks]\n-        pub const fn unstable_div_ceil(self, rhs: Self) -> Self {\n+        pub const fn div_ceil(self, rhs: Self) -> Self {\n             let d = self / rhs;\n             let r = self % rhs;\n             if r > 0 && rhs > 0 {\n@@ -2077,15 +2077,15 @@ macro_rules! uint_impl {\n         ///\n         /// ```\n         /// #![feature(int_roundings)]\n-        #[doc = concat!(\"assert_eq!(16_\", stringify!($SelfT), \".unstable_next_multiple_of(8), 16);\")]\n-        #[doc = concat!(\"assert_eq!(23_\", stringify!($SelfT), \".unstable_next_multiple_of(8), 24);\")]\n+        #[doc = concat!(\"assert_eq!(16_\", stringify!($SelfT), \".next_multiple_of(8), 16);\")]\n+        #[doc = concat!(\"assert_eq!(23_\", stringify!($SelfT), \".next_multiple_of(8), 24);\")]\n         /// ```\n         #[unstable(feature = \"int_roundings\", issue = \"88581\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n         #[rustc_inherit_overflow_checks]\n-        pub const fn unstable_next_multiple_of(self, rhs: Self) -> Self {\n+        pub const fn next_multiple_of(self, rhs: Self) -> Self {\n             match self % rhs {\n                 0 => self,\n                 r => self + (rhs - r)"}, {"sha": "d2d655ea2c75015959b518a695d6b4dd8f63240a", "filename": "library/core/tests/num/int_macros.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/6d2689526b168d0208af0930e46dc2ef360f07fc/library%2Fcore%2Ftests%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d2689526b168d0208af0930e46dc2ef360f07fc/library%2Fcore%2Ftests%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnum%2Fint_macros.rs?ref=6d2689526b168d0208af0930e46dc2ef360f07fc", "patch": "@@ -294,33 +294,33 @@ macro_rules! int_module {\n             fn test_div_floor() {\n                 let a: $T = 8;\n                 let b = 3;\n-                assert_eq!(a.unstable_div_floor(b), 2);\n-                assert_eq!(a.unstable_div_floor(-b), -3);\n-                assert_eq!((-a).unstable_div_floor(b), -3);\n-                assert_eq!((-a).unstable_div_floor(-b), 2);\n+                assert_eq!(a.div_floor(b), 2);\n+                assert_eq!(a.div_floor(-b), -3);\n+                assert_eq!((-a).div_floor(b), -3);\n+                assert_eq!((-a).div_floor(-b), 2);\n             }\n \n             #[test]\n             fn test_div_ceil() {\n                 let a: $T = 8;\n                 let b = 3;\n-                assert_eq!(a.unstable_div_ceil(b), 3);\n-                assert_eq!(a.unstable_div_ceil(-b), -2);\n-                assert_eq!((-a).unstable_div_ceil(b), -2);\n-                assert_eq!((-a).unstable_div_ceil(-b), 3);\n+                assert_eq!(a.div_ceil(b), 3);\n+                assert_eq!(a.div_ceil(-b), -2);\n+                assert_eq!((-a).div_ceil(b), -2);\n+                assert_eq!((-a).div_ceil(-b), 3);\n             }\n \n             #[test]\n             fn test_next_multiple_of() {\n-                assert_eq!((16 as $T).unstable_next_multiple_of(8), 16);\n-                assert_eq!((23 as $T).unstable_next_multiple_of(8), 24);\n-                assert_eq!((16 as $T).unstable_next_multiple_of(-8), 16);\n-                assert_eq!((23 as $T).unstable_next_multiple_of(-8), 16);\n-                assert_eq!((-16 as $T).unstable_next_multiple_of(8), -16);\n-                assert_eq!((-23 as $T).unstable_next_multiple_of(8), -16);\n-                assert_eq!((-16 as $T).unstable_next_multiple_of(-8), -16);\n-                assert_eq!((-23 as $T).unstable_next_multiple_of(-8), -24);\n-                assert_eq!(MIN.unstable_next_multiple_of(-1), MIN);\n+                assert_eq!((16 as $T).next_multiple_of(8), 16);\n+                assert_eq!((23 as $T).next_multiple_of(8), 24);\n+                assert_eq!((16 as $T).next_multiple_of(-8), 16);\n+                assert_eq!((23 as $T).next_multiple_of(-8), 16);\n+                assert_eq!((-16 as $T).next_multiple_of(8), -16);\n+                assert_eq!((-23 as $T).next_multiple_of(8), -16);\n+                assert_eq!((-16 as $T).next_multiple_of(-8), -16);\n+                assert_eq!((-23 as $T).next_multiple_of(-8), -24);\n+                assert_eq!(MIN.next_multiple_of(-1), MIN);\n             }\n \n             #[test]"}, {"sha": "49f8f1f13fad46ffc0a79fd228b5e4f8bbf0f5e2", "filename": "library/core/tests/num/uint_macros.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6d2689526b168d0208af0930e46dc2ef360f07fc/library%2Fcore%2Ftests%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d2689526b168d0208af0930e46dc2ef360f07fc/library%2Fcore%2Ftests%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnum%2Fuint_macros.rs?ref=6d2689526b168d0208af0930e46dc2ef360f07fc", "patch": "@@ -208,19 +208,19 @@ macro_rules! uint_module {\n \n             #[test]\n             fn test_div_floor() {\n-                assert_eq!((8 as $T).unstable_div_floor(3), 2);\n+                assert_eq!((8 as $T).div_floor(3), 2);\n             }\n \n             #[test]\n             fn test_div_ceil() {\n-                assert_eq!((8 as $T).unstable_div_ceil(3), 3);\n+                assert_eq!((8 as $T).div_ceil(3), 3);\n             }\n \n             #[test]\n             fn test_next_multiple_of() {\n-                assert_eq!((16 as $T).unstable_next_multiple_of(8), 16);\n-                assert_eq!((23 as $T).unstable_next_multiple_of(8), 24);\n-                assert_eq!(MAX.unstable_next_multiple_of(1), MAX);\n+                assert_eq!((16 as $T).next_multiple_of(8), 16);\n+                assert_eq!((23 as $T).next_multiple_of(8), 24);\n+                assert_eq!(MAX.next_multiple_of(1), MAX);\n             }\n \n             #[test]"}]}