{"sha": "0a1e251e81b0849fa5bd86b6fe0f2f5312d50bb5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhMWUyNTFlODFiMDg0OWZhNWJkODZiNmZlMGYyZjUzMTJkNTBiYjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-14T02:16:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-14T02:16:28Z"}, "message": "auto merge of #15497 : jasonthompson/rust/docs/str3, r=cmr\n\n  - for 3 implementations of into_maybe_owned()\r\n  - is_slice()\r\n  - is_owned()", "tree": {"sha": "20d83014b41dfdb28cf5d82e0f5722470aeb625b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20d83014b41dfdb28cf5d82e0f5722470aeb625b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a1e251e81b0849fa5bd86b6fe0f2f5312d50bb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a1e251e81b0849fa5bd86b6fe0f2f5312d50bb5", "html_url": "https://github.com/rust-lang/rust/commit/0a1e251e81b0849fa5bd86b6fe0f2f5312d50bb5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a1e251e81b0849fa5bd86b6fe0f2f5312d50bb5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d70f50b2ce2e04bb8db934721eeaddb80a7cc27", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d70f50b2ce2e04bb8db934721eeaddb80a7cc27", "html_url": "https://github.com/rust-lang/rust/commit/3d70f50b2ce2e04bb8db934721eeaddb80a7cc27"}, {"sha": "7158e8a1b7cad8fc55e390bf0c026f297a690931", "url": "https://api.github.com/repos/rust-lang/rust/commits/7158e8a1b7cad8fc55e390bf0c026f297a690931", "html_url": "https://github.com/rust-lang/rust/commit/7158e8a1b7cad8fc55e390bf0c026f297a690931"}], "stats": {"total": 47, "additions": 47, "deletions": 0}, "files": [{"sha": "19db88453809fc9fe46145b71913d676d2c5a863", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/0a1e251e81b0849fa5bd86b6fe0f2f5312d50bb5/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a1e251e81b0849fa5bd86b6fe0f2f5312d50bb5/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=0a1e251e81b0849fa5bd86b6fe0f2f5312d50bb5", "patch": "@@ -352,6 +352,15 @@ impl<'a> Iterator<char> for Decompositions<'a> {\n /// # Return value\n ///\n /// The original string with all occurrences of `from` replaced with `to`\n+///\n+/// # Example\n+///\n+/// ```rust\n+/// use std::str;\n+/// let string = \"orange\";\n+/// let new_string = str::replace(string, \"or\", \"str\");\n+/// assert_eq!(new_string.as_slice(), \"strange\");\n+/// ```\n pub fn replace(s: &str, from: &str, to: &str) -> String {\n     let mut result = String::new();\n     let mut last_end = 0;\n@@ -573,6 +582,14 @@ pub type SendStr = MaybeOwned<'static>;\n \n impl<'a> MaybeOwned<'a> {\n     /// Returns `true` if this `MaybeOwned` wraps an owned string\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// let string = String::from_str(\"orange\");\n+    /// let maybe_owned_string = string.into_maybe_owned();\n+    /// assert_eq!(true, maybe_owned_string.is_owned());\n+    /// ```\n     #[inline]\n     pub fn is_owned(&self) -> bool {\n         match *self {\n@@ -582,6 +599,14 @@ impl<'a> MaybeOwned<'a> {\n     }\n \n     /// Returns `true` if this `MaybeOwned` wraps a borrowed string\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// let string = \"orange\";\n+    /// let maybe_owned_string = string.as_slice().into_maybe_owned();\n+    /// assert_eq!(true, maybe_owned_string.is_slice());\n+    /// ```\n     #[inline]\n     pub fn is_slice(&self) -> bool {\n         match *self {\n@@ -597,18 +622,40 @@ pub trait IntoMaybeOwned<'a> {\n     fn into_maybe_owned(self) -> MaybeOwned<'a>;\n }\n \n+/// # Example\n+///\n+/// ```rust\n+/// let owned_string = String::from_str(\"orange\");\n+/// let maybe_owned_string = owned_string.into_maybe_owned();\n+/// assert_eq!(true, maybe_owned_string.is_owned());\n+/// ```\n impl<'a> IntoMaybeOwned<'a> for String {\n     #[inline]\n     fn into_maybe_owned(self) -> MaybeOwned<'a> {\n         Owned(self)\n     }\n }\n \n+/// # Example\n+///\n+/// ```rust\n+/// let string = \"orange\";\n+/// let maybe_owned_str = string.as_slice().into_maybe_owned();\n+/// assert_eq!(false, maybe_owned_str.is_owned());\n+/// ```\n impl<'a> IntoMaybeOwned<'a> for &'a str {\n     #[inline]\n     fn into_maybe_owned(self) -> MaybeOwned<'a> { Slice(self) }\n }\n \n+/// # Example\n+///\n+/// ```rust\n+/// let str = \"orange\";\n+/// let maybe_owned_str = str.as_slice().into_maybe_owned();\n+/// let maybe_maybe_owned_str = maybe_owned_str.into_maybe_owned();\n+/// assert_eq!(false, maybe_maybe_owned_str.is_owned());\n+/// ```\n impl<'a> IntoMaybeOwned<'a> for MaybeOwned<'a> {\n     #[inline]\n     fn into_maybe_owned(self) -> MaybeOwned<'a> { self }"}]}