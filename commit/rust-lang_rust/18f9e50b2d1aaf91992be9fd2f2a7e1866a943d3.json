{"sha": "18f9e50b2d1aaf91992be9fd2f2a7e1866a943d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4ZjllNTBiMmQxYWFmOTE5OTJiZTlmZDJmMmE3ZTE4NjZhOTQzZDM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-01-07T10:09:13Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-01-07T10:09:13Z"}, "message": "Error placement", "tree": {"sha": "e984c18fb8fa2e81950a582672077f966ce570e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e984c18fb8fa2e81950a582672077f966ce570e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18f9e50b2d1aaf91992be9fd2f2a7e1866a943d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18f9e50b2d1aaf91992be9fd2f2a7e1866a943d3", "html_url": "https://github.com/rust-lang/rust/commit/18f9e50b2d1aaf91992be9fd2f2a7e1866a943d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18f9e50b2d1aaf91992be9fd2f2a7e1866a943d3/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efcfaae34ac7a54e858aad82e6503a7c69d6c550", "url": "https://api.github.com/repos/rust-lang/rust/commits/efcfaae34ac7a54e858aad82e6503a7c69d6c550", "html_url": "https://github.com/rust-lang/rust/commit/efcfaae34ac7a54e858aad82e6503a7c69d6c550"}], "stats": {"total": 46, "additions": 37, "deletions": 9}, "files": [{"sha": "b07f4027b402021292988f970ffb15a1dc64b3ef", "filename": "src/tree/file_builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/18f9e50b2d1aaf91992be9fd2f2a7e1866a943d3/src%2Ftree%2Ffile_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18f9e50b2d1aaf91992be9fd2f2a7e1866a943d3/src%2Ftree%2Ffile_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftree%2Ffile_builder.rs?ref=18f9e50b2d1aaf91992be9fd2f2a7e1866a943d3", "patch": "@@ -156,7 +156,7 @@ impl<'f> ErrorBuilder<'f> {\n \n     pub fn emit(self) {\n         let message = self.message.expect(\"Error message not set\");\n-        let node = self.builder.current_id();\n-        self.builder.errors.push(SyntaxErrorData { node, message })\n+        let &(node, after_child) = self.builder.in_progress.last().unwrap();\n+        self.builder.errors.push(SyntaxErrorData { node, message, after_child })\n     }\n }"}, {"sha": "7f4d427ba9a4b755ceaa7a800e51cd9963e9dd6c", "filename": "src/tree/mod.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/18f9e50b2d1aaf91992be9fd2f2a7e1866a943d3/src%2Ftree%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18f9e50b2d1aaf91992be9fd2f2a7e1866a943d3/src%2Ftree%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftree%2Fmod.rs?ref=18f9e50b2d1aaf91992be9fd2f2a7e1866a943d3", "patch": "@@ -2,6 +2,7 @@ use text::{TextUnit, TextRange};\n use syntax_kinds::syntax_info;\n \n use std::fmt;\n+use std::cmp;\n \n mod file_builder;\n pub use self::file_builder::{FileBuilder, Sink};\n@@ -96,6 +97,15 @@ impl<'f> fmt::Debug for Node<'f> {\n \t}\n }\n \n+impl<'f> cmp::PartialEq<Node<'f>> for Node<'f> {\n+\tfn eq(&self, other: &Node<'f>) -> bool {\n+\t\tself.idx == other.idx && ::std::ptr::eq(self.file, other.file)\n+\t}\n+}\n+\n+impl<'f> cmp::Eq for Node<'f> {\n+}\n+\n #[derive(Clone, Copy)]\n pub struct SyntaxError<'f> {\n \tfile: &'f File,\n@@ -107,6 +117,11 @@ impl<'f> SyntaxError<'f> {\n \t\tself.data().message.as_str()\n \t}\n \n+\tpub fn after_child(&self) -> Option<Node<'f>> {\n+\t\tlet idx = self.data().after_child?;\n+\t\tSome(Node { file: self.file, idx })\n+\t}\n+\n \tfn data(&self) -> &'f SyntaxErrorData {\n \t\t&self.file.errors[self.idx]\n \t}\n@@ -187,6 +202,7 @@ struct ErrorIdx(u32);\n struct SyntaxErrorData {\n \tnode: NodeIdx,\n \tmessage: String,\n+\tafter_child: Option<NodeIdx>,\n }\n \n impl ::std::ops::Index<ErrorIdx> for Vec<SyntaxErrorData> {"}, {"sha": "55a4ad9150ef88b0422119a08b533ad6d3f54dd5", "filename": "tests/data/parser/err/0000_struct_field_missing_comma.txt", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/18f9e50b2d1aaf91992be9fd2f2a7e1866a943d3/tests%2Fdata%2Fparser%2Ferr%2F0000_struct_field_missing_comma.txt", "raw_url": "https://github.com/rust-lang/rust/raw/18f9e50b2d1aaf91992be9fd2f2a7e1866a943d3/tests%2Fdata%2Fparser%2Ferr%2F0000_struct_field_missing_comma.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Ferr%2F0000_struct_field_missing_comma.txt?ref=18f9e50b2d1aaf91992be9fd2f2a7e1866a943d3", "patch": "@@ -1,5 +1,5 @@\n FILE@[0; 34)\n-  STRUCT_ITEM@[0; 34) err: `expected COMMA`\n+  STRUCT_ITEM@[0; 34)\n     STRUCT_KW@[0; 6)\n     WHITESPACE@[6; 7)\n     IDENT@[7; 8)\n@@ -12,9 +12,11 @@ FILE@[0; 34)\n       WHITESPACE@[17; 18)\n       IDENT@[18; 21)\n       WHITESPACE@[21; 26)\n+    err: `expected COMMA`\n     STRUCT_FIELD@[26; 33)\n       IDENT@[26; 27)\n       COLON@[27; 28)\n       WHITESPACE@[28; 29)\n       IDENT@[29; 32)\n-      WHITESPACE@[32;\n\\ No newline at end of file\n+      WHITESPACE@[32; 33)\n+    R_CURLY@[33; 34)"}, {"sha": "43d04e49190efde3736c100c54c7a45c0650ae9a", "filename": "tests/parser.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/18f9e50b2d1aaf91992be9fd2f2a7e1866a943d3/tests%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18f9e50b2d1aaf91992be9fd2f2a7e1866a943d3/tests%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fparser.rs?ref=18f9e50b2d1aaf91992be9fd2f2a7e1866a943d3", "patch": "@@ -7,7 +7,7 @@ use std::path::{PathBuf, Path};\n use std::fs::read_dir;\n use std::fmt::Write;\n \n-use libsyntax2::{tokenize, parse, Token, Node, File, FileBuilder};\n+use libsyntax2::{tokenize, parse, Node, File};\n \n #[test]\n fn parser_tests() {\n@@ -70,14 +70,24 @@ fn dump_tree(file: &File) -> String {\n \n     fn go(node: Node, buff: &mut String, level: usize) {\n         buff.push_str(&String::from(\"  \").repeat(level));\n-        write!(buff, \"{:?}\", node).unwrap();\n-        for err in node.errors() {\n-            write!(buff, \" err: `{}`\", err.message()).unwrap();\n+        write!(buff, \"{:?}\\n\", node).unwrap();\n+        let my_errors = node.errors().filter(|e| e.after_child().is_none());\n+        let parent_errors = node.parent().into_iter()\n+            .flat_map(|n| n.errors())\n+            .filter(|e| e.after_child() == Some(node));\n+\n+        for err in my_errors {\n+            buff.push_str(&String::from(\"  \").repeat(level));\n+            write!(buff, \"err: `{}`\\n\", err.message()).unwrap();\n         }\n-        write!(buff, \"\\n\").unwrap();\n \n         for child in node.children() {\n             go(child, buff, level + 1)\n         }\n+\n+        for err in parent_errors {\n+            buff.push_str(&String::from(\"  \").repeat(level));\n+            write!(buff, \"err: `{}`\\n\", err.message()).unwrap();\n+        }\n     }\n }"}]}