{"sha": "11b09e7f9e8f5e5600be65a16daa564af60d8c57", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExYjA5ZTdmOWU4ZjVlNTYwMGJlNjVhMTZkYWE1NjRhZjYwZDhjNTc=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-06-21T01:06:40Z"}, "committer": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-06-28T22:39:33Z"}, "message": "Add size tests for moved locals in generators", "tree": {"sha": "f56fa030ab1ec3887bae3387e9ce3d1de668b692", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f56fa030ab1ec3887bae3387e9ce3d1de668b692"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11b09e7f9e8f5e5600be65a16daa564af60d8c57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11b09e7f9e8f5e5600be65a16daa564af60d8c57", "html_url": "https://github.com/rust-lang/rust/commit/11b09e7f9e8f5e5600be65a16daa564af60d8c57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11b09e7f9e8f5e5600be65a16daa564af60d8c57/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99694177f981a6e4f85decc1cacff3f8e2f77d6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/99694177f981a6e4f85decc1cacff3f8e2f77d6c", "html_url": "https://github.com/rust-lang/rust/commit/99694177f981a6e4f85decc1cacff3f8e2f77d6c"}], "stats": {"total": 146, "additions": 146, "deletions": 0}, "files": [{"sha": "139be7fe0132b0f1527ac01a0a0a13772c3d94a4", "filename": "src/test/run-pass/async-await/async-fn-size-moved-locals.rs", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/11b09e7f9e8f5e5600be65a16daa564af60d8c57/src%2Ftest%2Frun-pass%2Fasync-await%2Fasync-fn-size-moved-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11b09e7f9e8f5e5600be65a16daa564af60d8c57/src%2Ftest%2Frun-pass%2Fasync-await%2Fasync-fn-size-moved-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fasync-await%2Fasync-fn-size-moved-locals.rs?ref=11b09e7f9e8f5e5600be65a16daa564af60d8c57", "patch": "@@ -0,0 +1,98 @@\n+// Test that we don't duplicate storage for futures moved around in .await, and\n+// for futures moved into other futures.\n+//\n+// The exact sizes can change by a few bytes (we'd like to know when they do).\n+// What we don't want to see is the wrong multiple of 1024 (the size of BigFut)\n+// being reflected in the size.\n+//\n+// See issue #59123 for a full explanation.\n+\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+use std::future::Future;\n+use std::pin::Pin;\n+use std::task::{Context, Poll};\n+\n+const BIG_FUT_SIZE: usize = 1024;\n+struct BigFut([u8; BIG_FUT_SIZE]);\n+\n+impl BigFut {\n+    fn new() -> Self {\n+        BigFut([0; BIG_FUT_SIZE])\n+    } }\n+\n+impl Drop for BigFut {\n+    fn drop(&mut self) {}\n+}\n+\n+impl Future for BigFut {\n+    type Output = ();\n+\n+    fn poll(self: Pin<&mut Self>, _ctx: &mut Context<'_>) -> Poll<Self::Output> {\n+        Poll::Ready(())\n+    }\n+}\n+\n+#[allow(dead_code)]\n+struct Joiner {\n+    a: Option<BigFut>,\n+    b: Option<BigFut>,\n+    c: Option<BigFut>,\n+}\n+\n+impl Future for Joiner {\n+    type Output = ();\n+\n+    fn poll(self: Pin<&mut Self>, _ctx: &mut Context<'_>) -> Poll<Self::Output> {\n+        Poll::Ready(())\n+    }\n+}\n+\n+fn noop() {}\n+\n+async fn single() {\n+    let x = BigFut::new();\n+    x.await;\n+}\n+\n+async fn single_with_noop() {\n+    let x = BigFut::new();\n+    noop();\n+    x.await;\n+}\n+\n+async fn joined() {\n+    let a = BigFut::new();\n+    let b = BigFut::new();\n+    let c = BigFut::new();\n+\n+    let joiner = Joiner {\n+        a: Some(a),\n+        b: Some(b),\n+        c: Some(c),\n+    };\n+    joiner.await\n+}\n+\n+async fn joined_with_noop() {\n+    let a = BigFut::new();\n+    let b = BigFut::new();\n+    let c = BigFut::new();\n+\n+    let joiner = Joiner {\n+        a: Some(a),\n+        b: Some(b),\n+        c: Some(c),\n+    };\n+    noop();\n+    joiner.await\n+}\n+\n+fn main() {\n+    assert_eq!(1028, std::mem::size_of_val(&single()));\n+    assert_eq!(1032, std::mem::size_of_val(&single_with_noop()));\n+    assert_eq!(3084, std::mem::size_of_val(&joined()));\n+    assert_eq!(3084, std::mem::size_of_val(&joined_with_noop()));\n+}"}, {"sha": "9aa7ad02f3eecf5403466bfce9f97befa2d95541", "filename": "src/test/run-pass/generator/size-moved-locals.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/11b09e7f9e8f5e5600be65a16daa564af60d8c57/src%2Ftest%2Frun-pass%2Fgenerator%2Fsize-moved-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11b09e7f9e8f5e5600be65a16daa564af60d8c57/src%2Ftest%2Frun-pass%2Fgenerator%2Fsize-moved-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fsize-moved-locals.rs?ref=11b09e7f9e8f5e5600be65a16daa564af60d8c57", "patch": "@@ -0,0 +1,48 @@\n+// Test that we don't duplicate storage for a variable that is moved to another\n+// binding. This used to happen in the presence of unwind and drop edges (see\n+// `complex` below.)\n+//\n+// The exact sizes here can change (we'd like to know when they do). What we\n+// don't want to see is the `complex` generator size being upwards of 2048 bytes\n+// (which would indicate it is reserving space for two copies of Foo.)\n+//\n+// See issue #59123 for a full explanation.\n+\n+// edition:2018\n+\n+#![feature(generators, generator_trait)]\n+\n+use std::ops::Generator;\n+\n+const FOO_SIZE: usize = 1024;\n+struct Foo([u8; FOO_SIZE]);\n+\n+impl Drop for Foo {\n+    fn drop(&mut self) {}\n+}\n+\n+fn simple() -> impl Generator<Yield = (), Return = ()> {\n+    static || {\n+        let first = Foo([0; FOO_SIZE]);\n+        let _second = first;\n+        yield;\n+        // _second dropped here\n+    }\n+}\n+\n+fn noop() {}\n+\n+fn complex() -> impl Generator<Yield = (), Return = ()> {\n+    static || {\n+        let first = Foo([0; FOO_SIZE]);\n+        noop();\n+        let _second = first;\n+        yield;\n+        // _second dropped here\n+    }\n+}\n+\n+fn main() {\n+    assert_eq!(1028, std::mem::size_of_val(&simple()));\n+    assert_eq!(1032, std::mem::size_of_val(&complex()));\n+}"}]}