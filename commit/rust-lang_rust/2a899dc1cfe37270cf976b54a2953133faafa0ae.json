{"sha": "2a899dc1cfe37270cf976b54a2953133faafa0ae", "node_id": "C_kwDOAAsO6NoAKDJhODk5ZGMxY2ZlMzcyNzBjZjk3NmI1NGEyOTUzMTMzZmFhZmEwYWU", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-07-07T10:46:22Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-07-07T10:46:22Z"}, "message": "`UnsafeCell` now has no niches, ever.", "tree": {"sha": "25a59ae0560ff4d4d2490f4985e9424051fb871a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25a59ae0560ff4d4d2490f4985e9424051fb871a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a899dc1cfe37270cf976b54a2953133faafa0ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a899dc1cfe37270cf976b54a2953133faafa0ae", "html_url": "https://github.com/rust-lang/rust/commit/2a899dc1cfe37270cf976b54a2953133faafa0ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a899dc1cfe37270cf976b54a2953133faafa0ae/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e78e747f53c36e53ff99c94438d2efa26830fc4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e78e747f53c36e53ff99c94438d2efa26830fc4b", "html_url": "https://github.com/rust-lang/rust/commit/e78e747f53c36e53ff99c94438d2efa26830fc4b"}], "stats": {"total": 581, "additions": 71, "deletions": 510}, "files": [{"sha": "6673d75d99df070de5b6a5bb6b3727b6c786bfd1", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2a899dc1cfe37270cf976b54a2953133faafa0ae/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a899dc1cfe37270cf976b54a2953133faafa0ae/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=2a899dc1cfe37270cf976b54a2953133faafa0ae", "patch": "@@ -856,7 +856,6 @@ pub enum ReprAttr {\n     ReprSimd,\n     ReprTransparent,\n     ReprAlign(u32),\n-    ReprNoNiche,\n }\n \n #[derive(Eq, PartialEq, Debug, Copy, Clone)]\n@@ -904,7 +903,6 @@ pub fn parse_repr_attr(sess: &Session, attr: &Attribute) -> Vec<ReprAttr> {\n                     sym::packed => Some(ReprPacked(1)),\n                     sym::simd => Some(ReprSimd),\n                     sym::transparent => Some(ReprTransparent),\n-                    sym::no_niche => Some(ReprNoNiche),\n                     sym::align => {\n                         let mut err = struct_span_err!(\n                             diagnostic,\n@@ -943,7 +941,7 @@ pub fn parse_repr_attr(sess: &Session, attr: &Attribute) -> Vec<ReprAttr> {\n                         Ok(literal) => acc.push(ReprPacked(literal)),\n                         Err(message) => literal_error = Some(message),\n                     };\n-                } else if matches!(name, sym::C | sym::simd | sym::transparent | sym::no_niche)\n+                } else if matches!(name, sym::C | sym::simd | sym::transparent)\n                     || int_type_of_word(name).is_some()\n                 {\n                     recognised = true;\n@@ -1001,7 +999,7 @@ pub fn parse_repr_attr(sess: &Session, attr: &Attribute) -> Vec<ReprAttr> {\n                     } else {\n                         if matches!(\n                             meta_item.name_or_empty(),\n-                            sym::C | sym::simd | sym::transparent | sym::no_niche\n+                            sym::C | sym::simd | sym::transparent\n                         ) || int_type_of_word(meta_item.name_or_empty()).is_some()\n                         {\n                             recognised = true;\n@@ -1039,7 +1037,7 @@ pub fn parse_repr_attr(sess: &Session, attr: &Attribute) -> Vec<ReprAttr> {\n                         .emit();\n                     } else if matches!(\n                         meta_item.name_or_empty(),\n-                        sym::C | sym::simd | sym::transparent | sym::no_niche\n+                        sym::C | sym::simd | sym::transparent\n                     ) || int_type_of_word(meta_item.name_or_empty()).is_some()\n                     {\n                         recognised = true;"}, {"sha": "7616e7a63d1079aa2cbc1fb592b2152be28a04ce", "filename": "compiler/rustc_const_eval/src/interpret/intern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a899dc1cfe37270cf976b54a2953133faafa0ae/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a899dc1cfe37270cf976b54a2953133faafa0ae/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintern.rs?ref=2a899dc1cfe37270cf976b54a2953133faafa0ae", "patch": "@@ -217,7 +217,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: CompileTimeMachine<'mir, 'tcx, const_eval::Memory\n         }\n \n         if let Some(def) = mplace.layout.ty.ty_adt_def() {\n-            if Some(def.did()) == self.ecx.tcx.lang_items().unsafe_cell_type() {\n+            if def.is_unsafe_cell() {\n                 // We are crossing over an `UnsafeCell`, we can mutate again. This means that\n                 // References we encounter inside here are interned as pointing to mutable\n                 // allocations."}, {"sha": "48ca5913fabbd87111b421ce49c8310005032f1e", "filename": "compiler/rustc_const_eval/src/interpret/validity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a899dc1cfe37270cf976b54a2953133faafa0ae/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a899dc1cfe37270cf976b54a2953133faafa0ae/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs?ref=2a899dc1cfe37270cf976b54a2953133faafa0ae", "patch": "@@ -821,7 +821,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n         // Special check preventing `UnsafeCell` in the inner part of constants\n         if let Some(def) = op.layout.ty.ty_adt_def() {\n             if matches!(self.ctfe_mode, Some(CtfeValidationMode::Const { inner: true, .. }))\n-                && Some(def.did()) == self.ecx.tcx.lang_items().unsafe_cell_type()\n+                && def.is_unsafe_cell()\n             {\n                 throw_validation_failure!(self.path, { \"`UnsafeCell` in a `const`\" });\n             }"}, {"sha": "770286599d25f16c21bab721fc1ef64130b3ca79", "filename": "compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a899dc1cfe37270cf976b54a2953133faafa0ae/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a899dc1cfe37270cf976b54a2953133faafa0ae/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=2a899dc1cfe37270cf976b54a2953133faafa0ae", "patch": "@@ -96,13 +96,13 @@ impl Qualif for HasMutInterior {\n     }\n \n     fn in_adt_inherently<'tcx>(\n-        cx: &ConstCx<'_, 'tcx>,\n+        _cx: &ConstCx<'_, 'tcx>,\n         adt: AdtDef<'tcx>,\n         _: SubstsRef<'tcx>,\n     ) -> bool {\n         // Exactly one type, `UnsafeCell`, has the `HasMutInterior` qualif inherently.\n         // It arises structurally for all other types.\n-        Some(adt.did()) == cx.tcx.lang_items().unsafe_cell_type()\n+        adt.is_unsafe_cell()\n     }\n }\n "}, {"sha": "117bdad971a208fef20b4b29830273877f262319", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a899dc1cfe37270cf976b54a2953133faafa0ae/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a899dc1cfe37270cf976b54a2953133faafa0ae/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=2a899dc1cfe37270cf976b54a2953133faafa0ae", "patch": "@@ -156,9 +156,6 @@ declare_features! (\n     (active, intrinsics, \"1.0.0\", None, None),\n     /// Allows using `#[lang = \"..\"]` attribute for linking items to special compiler logic.\n     (active, lang_items, \"1.0.0\", None, None),\n-    /// Allows `#[repr(no_niche)]` (an implementation detail of `rustc`,\n-    /// it is not on path for eventual stabilization).\n-    (active, no_niche, \"1.42.0\", None, None),\n     /// Allows using `#[omit_gdb_pretty_printer_section]`.\n     (active, omit_gdb_pretty_printer_section, \"1.5.0\", None, None),\n     /// Allows using `#[prelude_import]` on glob `use` items."}, {"sha": "4ed9d9b27b297eeaf297f3f9e6d661d7e73585be", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a899dc1cfe37270cf976b54a2953133faafa0ae/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a899dc1cfe37270cf976b54a2953133faafa0ae/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=2a899dc1cfe37270cf976b54a2953133faafa0ae", "patch": "@@ -705,7 +705,7 @@ fn ty_is_known_nonnull<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>, mode: CItemKi\n \n             // Types with a `#[repr(no_niche)]` attribute have their niche hidden.\n             // The attribute is used by the UnsafeCell for example (the only use so far).\n-            if def.repr().hide_niche() {\n+            if def.is_unsafe_cell() {\n                 return false;\n             }\n "}, {"sha": "9972199c62e04e93f41ed26bd01d5a188923f360", "filename": "compiler/rustc_middle/src/ty/adt.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2a899dc1cfe37270cf976b54a2953133faafa0ae/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a899dc1cfe37270cf976b54a2953133faafa0ae/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs?ref=2a899dc1cfe37270cf976b54a2953133faafa0ae", "patch": "@@ -52,6 +52,8 @@ bitflags! {\n         /// Indicates whether the variant list of this ADT is `#[non_exhaustive]`.\n         /// (i.e., this flag is never set unless this ADT is an enum).\n         const IS_VARIANT_LIST_NON_EXHAUSTIVE = 1 << 8;\n+        /// Indicates whether the type is `UnsafeCell`.\n+        const IS_UNSAFE_CELL              = 1 << 9;\n     }\n }\n \n@@ -242,6 +244,9 @@ impl AdtDefData {\n         if Some(did) == tcx.lang_items().manually_drop() {\n             flags |= AdtFlags::IS_MANUALLY_DROP;\n         }\n+        if Some(did) == tcx.lang_items().unsafe_cell_type() {\n+            flags |= AdtFlags::IS_UNSAFE_CELL;\n+        }\n \n         AdtDefData { did, variants, flags, repr }\n     }\n@@ -328,6 +333,12 @@ impl<'tcx> AdtDef<'tcx> {\n         self.flags().contains(AdtFlags::IS_BOX)\n     }\n \n+    /// Returns `true` if this is UnsafeCell<T>.\n+    #[inline]\n+    pub fn is_unsafe_cell(self) -> bool {\n+        self.flags().contains(AdtFlags::IS_UNSAFE_CELL)\n+    }\n+\n     /// Returns `true` if this is `ManuallyDrop<T>`.\n     #[inline]\n     pub fn is_manually_drop(self) -> bool {"}, {"sha": "cef8a1dba7f8d5629f1fe8a1550af3da5458bf3a", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 26, "deletions": 22, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/2a899dc1cfe37270cf976b54a2953133faafa0ae/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a899dc1cfe37270cf976b54a2953133faafa0ae/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=2a899dc1cfe37270cf976b54a2953133faafa0ae", "patch": "@@ -542,14 +542,12 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n             debug!(\"univariant offset: {:?} field: {:#?}\", offset, field);\n             offsets[i as usize] = offset;\n \n-            if !repr.hide_niche() {\n-                if let Some(mut niche) = field.largest_niche {\n-                    let available = niche.available(dl);\n-                    if available > largest_niche_available {\n-                        largest_niche_available = available;\n-                        niche.offset += offset;\n-                        largest_niche = Some(niche);\n-                    }\n+            if let Some(mut niche) = field.largest_niche {\n+                let available = niche.available(dl);\n+                if available > largest_niche_available {\n+                    largest_niche_available = available;\n+                    niche.offset += offset;\n+                    largest_niche = Some(niche);\n                 }\n             }\n \n@@ -1104,23 +1102,29 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                                 assert!(valid_range.end >= end);\n                                 valid_range.end = end;\n                             }\n-\n-                            // Update `largest_niche` if we have introduced a larger niche.\n-                            let niche = if def.repr().hide_niche() {\n-                                None\n+                            if def.is_unsafe_cell() {\n+                                match scalar {\n+                                    Scalar::Initialized { value, valid_range } => {\n+                                        *valid_range = WrappingRange::full(value.size(dl))\n+                                    }\n+                                    // Already doesn't have any niches\n+                                    Scalar::Union { .. } => {}\n+                                }\n+                                st.largest_niche = None;\n                             } else {\n-                                Niche::from_scalar(dl, Size::ZERO, *scalar)\n-                            };\n-                            if let Some(niche) = niche {\n-                                match st.largest_niche {\n-                                    Some(largest_niche) => {\n-                                        // Replace the existing niche even if they're equal,\n-                                        // because this one is at a lower offset.\n-                                        if largest_niche.available(dl) <= niche.available(dl) {\n-                                            st.largest_niche = Some(niche);\n+                                // Update `largest_niche` if we have introduced a larger niche.\n+                                let niche = Niche::from_scalar(dl, Size::ZERO, *scalar);\n+                                if let Some(niche) = niche {\n+                                    match st.largest_niche {\n+                                        Some(largest_niche) => {\n+                                            // Replace the existing niche even if they're equal,\n+                                            // because this one is at a lower offset.\n+                                            if largest_niche.available(dl) <= niche.available(dl) {\n+                                                st.largest_niche = Some(niche);\n+                                            }\n                                         }\n+                                        None => st.largest_niche = Some(niche),\n                                     }\n-                                    None => st.largest_niche = Some(niche),\n                                 }\n                             }\n                         }"}, {"sha": "058cf1a4183df424bd5ba5963558c3267361552d", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2a899dc1cfe37270cf976b54a2953133faafa0ae/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a899dc1cfe37270cf976b54a2953133faafa0ae/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=2a899dc1cfe37270cf976b54a2953133faafa0ae", "patch": "@@ -1719,11 +1719,9 @@ bitflags! {\n         const IS_TRANSPARENT     = 1 << 2;\n         // Internal only for now. If true, don't reorder fields.\n         const IS_LINEAR          = 1 << 3;\n-        // If true, don't expose any niche to type's context.\n-        const HIDE_NICHE         = 1 << 4;\n         // If true, the type's layout can be randomized using\n         // the seed stored in `ReprOptions.layout_seed`\n-        const RANDOMIZE_LAYOUT   = 1 << 5;\n+        const RANDOMIZE_LAYOUT   = 1 << 4;\n         // Any of these flags being set prevent field reordering optimisation.\n         const IS_UNOPTIMISABLE   = ReprFlags::IS_C.bits\n                                  | ReprFlags::IS_SIMD.bits\n@@ -1780,7 +1778,6 @@ impl ReprOptions {\n                         ReprFlags::empty()\n                     }\n                     attr::ReprTransparent => ReprFlags::IS_TRANSPARENT,\n-                    attr::ReprNoNiche => ReprFlags::HIDE_NICHE,\n                     attr::ReprSimd => ReprFlags::IS_SIMD,\n                     attr::ReprInt(i) => {\n                         size = Some(i);\n@@ -1833,11 +1830,6 @@ impl ReprOptions {\n         self.flags.contains(ReprFlags::IS_LINEAR)\n     }\n \n-    #[inline]\n-    pub fn hide_niche(&self) -> bool {\n-        self.flags.contains(ReprFlags::HIDE_NICHE)\n-    }\n-\n     /// Returns the discriminant type, given these `repr` options.\n     /// This must only be called on enums!\n     pub fn discr_type(&self) -> attr::IntType {"}, {"sha": "cd5357d796d9acacb0f1dce6cb11f7da3caa63d4", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2a899dc1cfe37270cf976b54a2953133faafa0ae/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a899dc1cfe37270cf976b54a2953133faafa0ae/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=2a899dc1cfe37270cf976b54a2953133faafa0ae", "patch": "@@ -1808,21 +1808,6 @@ impl CheckAttrVisitor<'_> {\n                         _ => (\"a\", \"struct, enum, or union\"),\n                     }\n                 }\n-                sym::no_niche => {\n-                    if !self.tcx.features().enabled(sym::no_niche) {\n-                        feature_err(\n-                            &self.tcx.sess.parse_sess,\n-                            sym::no_niche,\n-                            hint.span(),\n-                            \"the attribute `repr(no_niche)` is currently unstable\",\n-                        )\n-                        .emit();\n-                    }\n-                    match target {\n-                        Target::Struct | Target::Enum => continue,\n-                        _ => (\"a\", \"struct or enum\"),\n-                    }\n-                }\n                 sym::i8\n                 | sym::u8\n                 | sym::i16\n@@ -1870,10 +1855,8 @@ impl CheckAttrVisitor<'_> {\n         // This is not ideal, but tracking precisely which ones are at fault is a huge hassle.\n         let hint_spans = hints.iter().map(|hint| hint.span());\n \n-        // Error on repr(transparent, <anything else apart from no_niche>).\n-        let non_no_niche = |hint: &&NestedMetaItem| hint.name_or_empty() != sym::no_niche;\n-        let non_no_niche_count = hints.iter().filter(non_no_niche).count();\n-        if is_transparent && non_no_niche_count > 1 {\n+        // Error on repr(transparent, <anything else>).\n+        if is_transparent && hints.len() > 1 {\n             let hint_spans: Vec<_> = hint_spans.clone().collect();\n             struct_span_err!(\n                 self.tcx.sess,"}, {"sha": "43312105fd6b0d0bfe57254001c0c240b828f390", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a899dc1cfe37270cf976b54a2953133faafa0ae/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a899dc1cfe37270cf976b54a2953133faafa0ae/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=2a899dc1cfe37270cf976b54a2953133faafa0ae", "patch": "@@ -979,7 +979,6 @@ symbols! {\n         no_link,\n         no_main,\n         no_mangle,\n-        no_niche,\n         no_sanitize,\n         no_stack_check,\n         no_start,\n@@ -1152,7 +1151,6 @@ symbols! {\n         repr128,\n         repr_align,\n         repr_align_enum,\n-        repr_no_niche,\n         repr_packed,\n         repr_simd,\n         repr_transparent,"}, {"sha": "8a37fadc56f4c8ef583f50fbac292c13ad4cb418", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a899dc1cfe37270cf976b54a2953133faafa0ae/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a899dc1cfe37270cf976b54a2953133faafa0ae/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=2a899dc1cfe37270cf976b54a2953133faafa0ae", "patch": "@@ -1856,7 +1856,6 @@ impl<T: ?Sized + fmt::Display> fmt::Display for RefMut<'_, T> {\n #[lang = \"unsafe_cell\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[repr(transparent)]\n-#[repr(no_niche)] // rust-lang/rust#68303.\n pub struct UnsafeCell<T: ?Sized> {\n     value: T,\n }"}, {"sha": "19775e7acda2ffd645206db55df276087b493020", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a899dc1cfe37270cf976b54a2953133faafa0ae/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a899dc1cfe37270cf976b54a2953133faafa0ae/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=2a899dc1cfe37270cf976b54a2953133faafa0ae", "patch": "@@ -191,7 +191,6 @@\n #![feature(never_type)]\n #![feature(no_core)]\n #![feature(no_coverage)] // rust-lang/rust#84605\n-#![feature(no_niche)] // rust-lang/rust#68303\n #![feature(platform_intrinsics)]\n #![feature(prelude_import)]\n #![feature(repr_simd)]"}, {"sha": "eb65756a5f64372fc4184c6173e7d14ca95b974b", "filename": "src/test/ui/layout/unsafe-cell-hides-niche.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2a899dc1cfe37270cf976b54a2953133faafa0ae/src%2Ftest%2Fui%2Flayout%2Funsafe-cell-hides-niche.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a899dc1cfe37270cf976b54a2953133faafa0ae/src%2Ftest%2Fui%2Flayout%2Funsafe-cell-hides-niche.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Funsafe-cell-hides-niche.rs?ref=2a899dc1cfe37270cf976b54a2953133faafa0ae", "patch": "@@ -5,8 +5,6 @@\n \n // run-pass\n \n-#![feature(no_niche)]\n-\n use std::cell::UnsafeCell;\n use std::mem::size_of;\n use std::num::NonZeroU32 as N32;\n@@ -16,8 +14,7 @@ struct Wrapper<T>(T);\n #[repr(transparent)]\n struct Transparent<T>(T);\n \n-#[repr(no_niche)]\n-struct NoNiche<T>(T);\n+struct NoNiche<T>(UnsafeCell<T>);\n \n fn main() {\n     assert_eq!(size_of::<Option<Wrapper<u32>>>(),     8);"}, {"sha": "809e0602671febce0af951ec3c6bd0477ea67688", "filename": "src/test/ui/lint/clashing-extern-fn.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a899dc1cfe37270cf976b54a2953133faafa0ae/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a899dc1cfe37270cf976b54a2953133faafa0ae/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn.rs?ref=2a899dc1cfe37270cf976b54a2953133faafa0ae", "patch": "@@ -1,7 +1,6 @@\n // check-pass\n // aux-build:external_extern_fn.rs\n #![crate_type = \"lib\"]\n-#![feature(no_niche)]\n #![warn(clashing_extern_declarations)]\n \n mod redeclared_different_signature {\n@@ -400,9 +399,8 @@ mod hidden_niche {\n         #[repr(transparent)]\n         struct Transparent { x: NonZeroUsize }\n \n-        #[repr(no_niche)]\n         #[repr(transparent)]\n-        struct TransparentNoNiche { y: NonZeroUsize }\n+        struct TransparentNoNiche { y: UnsafeCell<NonZeroUsize> }\n \n         extern \"C\" {\n             fn hidden_niche_transparent() -> Option<Transparent>;"}, {"sha": "4607f68499322263dd4f85bf93bf4955eb76206b", "filename": "src/test/ui/lint/clashing-extern-fn.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/2a899dc1cfe37270cf976b54a2953133faafa0ae/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a899dc1cfe37270cf976b54a2953133faafa0ae/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn.stderr?ref=2a899dc1cfe37270cf976b54a2953133faafa0ae", "patch": "@@ -1,5 +1,5 @@\n warning: `clash` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:15:13\n+  --> $DIR/clashing-extern-fn.rs:14:13\n    |\n LL |             fn clash(x: u8);\n    |             ---------------- `clash` previously declared here\n@@ -8,15 +8,15 @@ LL |             fn clash(x: u64);\n    |             ^^^^^^^^^^^^^^^^^ this signature doesn't match the previous declaration\n    |\n note: the lint level is defined here\n-  --> $DIR/clashing-extern-fn.rs:5:9\n+  --> $DIR/clashing-extern-fn.rs:4:9\n    |\n LL | #![warn(clashing_extern_declarations)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: expected `unsafe extern \"C\" fn(u8)`\n               found `unsafe extern \"C\" fn(u64)`\n \n warning: `extern_link_name` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:53:9\n+  --> $DIR/clashing-extern-fn.rs:52:9\n    |\n LL | /     #[link_name = \"extern_link_name\"]\n LL | |     fn some_new_name(x: i16);\n@@ -29,7 +29,7 @@ LL |           fn extern_link_name(x: u32);\n               found `unsafe extern \"C\" fn(u32)`\n \n warning: `some_other_extern_link_name` redeclares `some_other_new_name` with a different signature\n-  --> $DIR/clashing-extern-fn.rs:56:9\n+  --> $DIR/clashing-extern-fn.rs:55:9\n    |\n LL |       fn some_other_new_name(x: i16);\n    |       ------------------------------- `some_other_new_name` previously declared here\n@@ -43,7 +43,7 @@ LL | |         fn some_other_extern_link_name(x: u32);\n               found `unsafe extern \"C\" fn(u32)`\n \n warning: `other_both_names_different` redeclares `link_name_same` with a different signature\n-  --> $DIR/clashing-extern-fn.rs:60:9\n+  --> $DIR/clashing-extern-fn.rs:59:9\n    |\n LL | /     #[link_name = \"link_name_same\"]\n LL | |     fn both_names_different(x: i16);\n@@ -58,7 +58,7 @@ LL | |         fn other_both_names_different(x: u32);\n               found `unsafe extern \"C\" fn(u32)`\n \n warning: `different_mod` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:73:9\n+  --> $DIR/clashing-extern-fn.rs:72:9\n    |\n LL |         fn different_mod(x: u8);\n    |         ------------------------ `different_mod` previously declared here\n@@ -70,7 +70,7 @@ LL |         fn different_mod(x: u64);\n               found `unsafe extern \"C\" fn(u64)`\n \n warning: `variadic_decl` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:83:9\n+  --> $DIR/clashing-extern-fn.rs:82:9\n    |\n LL |     fn variadic_decl(x: u8, ...);\n    |     ----------------------------- `variadic_decl` previously declared here\n@@ -82,7 +82,7 @@ LL |         fn variadic_decl(x: u8);\n               found `unsafe extern \"C\" fn(u8)`\n \n warning: `weigh_banana` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:143:13\n+  --> $DIR/clashing-extern-fn.rs:142:13\n    |\n LL |             fn weigh_banana(count: *const Banana) -> u64;\n    |             --------------------------------------------- `weigh_banana` previously declared here\n@@ -94,7 +94,7 @@ LL |             fn weigh_banana(count: *const Banana) -> u64;\n               found `unsafe extern \"C\" fn(*const three::Banana) -> u64`\n \n warning: `draw_point` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:172:13\n+  --> $DIR/clashing-extern-fn.rs:171:13\n    |\n LL |             fn draw_point(p: Point);\n    |             ------------------------ `draw_point` previously declared here\n@@ -106,7 +106,7 @@ LL |             fn draw_point(p: Point);\n               found `unsafe extern \"C\" fn(sameish_members::b::Point)`\n \n warning: `origin` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:198:13\n+  --> $DIR/clashing-extern-fn.rs:197:13\n    |\n LL |             fn origin() -> Point3;\n    |             ---------------------- `origin` previously declared here\n@@ -118,7 +118,7 @@ LL |             fn origin() -> Point3;\n               found `unsafe extern \"C\" fn() -> same_sized_members_clash::b::Point3`\n \n warning: `transparent_incorrect` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:221:13\n+  --> $DIR/clashing-extern-fn.rs:220:13\n    |\n LL |             fn transparent_incorrect() -> T;\n    |             -------------------------------- `transparent_incorrect` previously declared here\n@@ -130,7 +130,7 @@ LL |             fn transparent_incorrect() -> isize;\n               found `unsafe extern \"C\" fn() -> isize`\n \n warning: `missing_return_type` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:239:13\n+  --> $DIR/clashing-extern-fn.rs:238:13\n    |\n LL |             fn missing_return_type() -> usize;\n    |             ---------------------------------- `missing_return_type` previously declared here\n@@ -142,7 +142,7 @@ LL |             fn missing_return_type();\n               found `unsafe extern \"C\" fn()`\n \n warning: `non_zero_usize` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:257:13\n+  --> $DIR/clashing-extern-fn.rs:256:13\n    |\n LL |             fn non_zero_usize() -> core::num::NonZeroUsize;\n    |             ----------------------------------------------- `non_zero_usize` previously declared here\n@@ -154,7 +154,7 @@ LL |             fn non_zero_usize() -> usize;\n               found `unsafe extern \"C\" fn() -> usize`\n \n warning: `non_null_ptr` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:259:13\n+  --> $DIR/clashing-extern-fn.rs:258:13\n    |\n LL |             fn non_null_ptr() -> core::ptr::NonNull<usize>;\n    |             ----------------------------------------------- `non_null_ptr` previously declared here\n@@ -166,7 +166,7 @@ LL |             fn non_null_ptr() -> *const usize;\n               found `unsafe extern \"C\" fn() -> *const usize`\n \n warning: `option_non_zero_usize_incorrect` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:357:13\n+  --> $DIR/clashing-extern-fn.rs:356:13\n    |\n LL |             fn option_non_zero_usize_incorrect() -> usize;\n    |             ---------------------------------------------- `option_non_zero_usize_incorrect` previously declared here\n@@ -178,7 +178,7 @@ LL |             fn option_non_zero_usize_incorrect() -> isize;\n               found `unsafe extern \"C\" fn() -> isize`\n \n warning: `option_non_null_ptr_incorrect` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:359:13\n+  --> $DIR/clashing-extern-fn.rs:358:13\n    |\n LL |             fn option_non_null_ptr_incorrect() -> *const usize;\n    |             --------------------------------------------------- `option_non_null_ptr_incorrect` previously declared here\n@@ -190,7 +190,7 @@ LL |             fn option_non_null_ptr_incorrect() -> *const isize;\n               found `unsafe extern \"C\" fn() -> *const isize`\n \n warning: `hidden_niche_transparent_no_niche` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:410:13\n+  --> $DIR/clashing-extern-fn.rs:408:13\n    |\n LL |             fn hidden_niche_transparent_no_niche() -> usize;\n    |             ------------------------------------------------ `hidden_niche_transparent_no_niche` previously declared here\n@@ -202,7 +202,7 @@ LL |             fn hidden_niche_transparent_no_niche() -> Option<TransparentNoN\n               found `unsafe extern \"C\" fn() -> Option<TransparentNoNiche>`\n \n warning: `hidden_niche_unsafe_cell` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:414:13\n+  --> $DIR/clashing-extern-fn.rs:412:13\n    |\n LL |             fn hidden_niche_unsafe_cell() -> usize;\n    |             --------------------------------------- `hidden_niche_unsafe_cell` previously declared here\n@@ -214,7 +214,7 @@ LL |             fn hidden_niche_unsafe_cell() -> Option<UnsafeCell<NonZeroUsize\n               found `unsafe extern \"C\" fn() -> Option<UnsafeCell<NonZeroUsize>>`\n \n warning: `extern` block uses type `Option<TransparentNoNiche>`, which is not FFI-safe\n-  --> $DIR/clashing-extern-fn.rs:410:55\n+  --> $DIR/clashing-extern-fn.rs:408:55\n    |\n LL |             fn hidden_niche_transparent_no_niche() -> Option<TransparentNoNiche>;\n    |                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe\n@@ -224,7 +224,7 @@ LL |             fn hidden_niche_transparent_no_niche() -> Option<TransparentNoN\n    = note: enum has no representation hint\n \n warning: `extern` block uses type `Option<UnsafeCell<NonZeroUsize>>`, which is not FFI-safe\n-  --> $DIR/clashing-extern-fn.rs:414:46\n+  --> $DIR/clashing-extern-fn.rs:412:46\n    |\n LL |             fn hidden_niche_unsafe_cell() -> Option<UnsafeCell<NonZeroUsize>>;\n    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe"}, {"sha": "8872ee7119e4a399bba16b4895b5d6bc6026f4a4", "filename": "src/test/ui/repr/feature-gate-no-niche.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e78e747f53c36e53ff99c94438d2efa26830fc4b/src%2Ftest%2Fui%2Frepr%2Ffeature-gate-no-niche.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e78e747f53c36e53ff99c94438d2efa26830fc4b/src%2Ftest%2Fui%2Frepr%2Ffeature-gate-no-niche.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Ffeature-gate-no-niche.rs?ref=e78e747f53c36e53ff99c94438d2efa26830fc4b", "patch": "@@ -1,20 +0,0 @@\n-use std::num::NonZeroU8 as N8;\n-use std::num::NonZeroU16 as N16;\n-\n-#[repr(no_niche)]\n-pub struct Cloaked(N16);\n-//~^^ ERROR the attribute `repr(no_niche)` is currently unstable [E0658]\n-\n-#[repr(transparent, no_niche)]\n-pub struct Shadowy(N16);\n-//~^^ ERROR the attribute `repr(no_niche)` is currently unstable [E0658]\n-\n-#[repr(no_niche)]\n-pub enum Cloaked1 { _A(N16), }\n-//~^^ ERROR the attribute `repr(no_niche)` is currently unstable [E0658]\n-\n-#[repr(no_niche)]\n-pub enum Cloaked2 { _A(N16), _B(u8, N8) }\n-//~^^ ERROR the attribute `repr(no_niche)` is currently unstable [E0658]\n-\n-fn main() { }"}, {"sha": "34fd417cc99a2e0c4f7e085cf3b6fe82d4e9f49e", "filename": "src/test/ui/repr/feature-gate-no-niche.stderr", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e78e747f53c36e53ff99c94438d2efa26830fc4b/src%2Ftest%2Fui%2Frepr%2Ffeature-gate-no-niche.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e78e747f53c36e53ff99c94438d2efa26830fc4b/src%2Ftest%2Fui%2Frepr%2Ffeature-gate-no-niche.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Ffeature-gate-no-niche.stderr?ref=e78e747f53c36e53ff99c94438d2efa26830fc4b", "patch": "@@ -1,35 +0,0 @@\n-error[E0658]: the attribute `repr(no_niche)` is currently unstable\n-  --> $DIR/feature-gate-no-niche.rs:4:8\n-   |\n-LL | #[repr(no_niche)]\n-   |        ^^^^^^^^\n-   |\n-   = help: add `#![feature(no_niche)]` to the crate attributes to enable\n-\n-error[E0658]: the attribute `repr(no_niche)` is currently unstable\n-  --> $DIR/feature-gate-no-niche.rs:8:21\n-   |\n-LL | #[repr(transparent, no_niche)]\n-   |                     ^^^^^^^^\n-   |\n-   = help: add `#![feature(no_niche)]` to the crate attributes to enable\n-\n-error[E0658]: the attribute `repr(no_niche)` is currently unstable\n-  --> $DIR/feature-gate-no-niche.rs:12:8\n-   |\n-LL | #[repr(no_niche)]\n-   |        ^^^^^^^^\n-   |\n-   = help: add `#![feature(no_niche)]` to the crate attributes to enable\n-\n-error[E0658]: the attribute `repr(no_niche)` is currently unstable\n-  --> $DIR/feature-gate-no-niche.rs:16:8\n-   |\n-LL | #[repr(no_niche)]\n-   |        ^^^^^^^^\n-   |\n-   = help: add `#![feature(no_niche)]` to the crate attributes to enable\n-\n-error: aborting due to 4 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "870eda89c20d7cd0cb9b4d575287d882e7f3ca2a", "filename": "src/test/ui/repr/repr-no-niche-inapplicable-to-unions.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e78e747f53c36e53ff99c94438d2efa26830fc4b/src%2Ftest%2Fui%2Frepr%2Frepr-no-niche-inapplicable-to-unions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e78e747f53c36e53ff99c94438d2efa26830fc4b/src%2Ftest%2Fui%2Frepr%2Frepr-no-niche-inapplicable-to-unions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Frepr-no-niche-inapplicable-to-unions.rs?ref=e78e747f53c36e53ff99c94438d2efa26830fc4b", "patch": "@@ -1,14 +0,0 @@\n-#![feature(no_niche)]\n-\n-use std::num::NonZeroU8 as N8;\n-use std::num::NonZeroU16 as N16;\n-\n-#[repr(no_niche)]\n-pub union Cloaked1 { _A: N16 }\n-//~^^ ERROR attribute should be applied to a struct or enum [E0517]\n-\n-#[repr(no_niche)]\n-pub union Cloaked2 { _A: N16, _B: (u8, N8) }\n-//~^^ ERROR attribute should be applied to a struct or enum [E0517]\n-\n-fn main() { }"}, {"sha": "9af929d409473991a78be237f0df950fc9543736", "filename": "src/test/ui/repr/repr-no-niche-inapplicable-to-unions.stderr", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e78e747f53c36e53ff99c94438d2efa26830fc4b/src%2Ftest%2Fui%2Frepr%2Frepr-no-niche-inapplicable-to-unions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e78e747f53c36e53ff99c94438d2efa26830fc4b/src%2Ftest%2Fui%2Frepr%2Frepr-no-niche-inapplicable-to-unions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Frepr-no-niche-inapplicable-to-unions.stderr?ref=e78e747f53c36e53ff99c94438d2efa26830fc4b", "patch": "@@ -1,19 +0,0 @@\n-error[E0517]: attribute should be applied to a struct or enum\n-  --> $DIR/repr-no-niche-inapplicable-to-unions.rs:6:8\n-   |\n-LL | #[repr(no_niche)]\n-   |        ^^^^^^^^\n-LL | pub union Cloaked1 { _A: N16 }\n-   | ------------------------------ not a struct or enum\n-\n-error[E0517]: attribute should be applied to a struct or enum\n-  --> $DIR/repr-no-niche-inapplicable-to-unions.rs:10:8\n-   |\n-LL | #[repr(no_niche)]\n-   |        ^^^^^^^^\n-LL | pub union Cloaked2 { _A: N16, _B: (u8, N8) }\n-   | -------------------------------------------- not a struct or enum\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0517`."}, {"sha": "2e6064aeb00744f1e1c620fe8212fed9d3f28a04", "filename": "src/test/ui/repr/repr-no-niche.rs", "status": "removed", "additions": 0, "deletions": 327, "changes": 327, "blob_url": "https://github.com/rust-lang/rust/blob/e78e747f53c36e53ff99c94438d2efa26830fc4b/src%2Ftest%2Fui%2Frepr%2Frepr-no-niche.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e78e747f53c36e53ff99c94438d2efa26830fc4b/src%2Ftest%2Fui%2Frepr%2Frepr-no-niche.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Frepr-no-niche.rs?ref=e78e747f53c36e53ff99c94438d2efa26830fc4b", "patch": "@@ -1,327 +0,0 @@\n-// run-pass\n-\n-// This file tests repr(no_niche), which causes an struct/enum to hide\n-// any niche space that may exist in its internal state from the\n-// context it appears in.\n-\n-// Here are the axes this test is seeking to cover:\n-//\n-// repr annotation:\n-// visible: (); cloaked: (no_niche); transparent: (transparent); shadowy: (transparent, no_niche)\n-//\n-// enum vs struct\n-//\n-// niche-type via type-parameter vs inline declaration\n-\n-#![feature(decl_macro)]\n-#![feature(no_niche)]\n-\n-use std::mem::size_of;\n-use std::num::{NonZeroU8, NonZeroU16};\n-\n-mod struct_inline {\n-    use std::num::NonZeroU16 as N16;\n-\n-    #[derive(Debug)] pub struct Visible(N16);\n-\n-    #[repr(no_niche)]\n-    #[derive(Debug)] pub struct Cloaked(N16);\n-\n-    #[repr(transparent)]\n-    #[derive(Debug)] pub struct Transparent(N16);\n-\n-    #[repr(transparent, no_niche)]\n-    #[derive(Debug)] pub struct Shadowy(N16);\n-}\n-\n-mod struct_param {\n-    #[derive(Debug)] pub struct Visible<T>(T);\n-\n-    #[repr(no_niche)]\n-    #[derive(Debug)] pub struct Cloaked<T>(T);\n-\n-    #[repr(transparent)]\n-    #[derive(Debug)] pub struct Transparent<T>(T);\n-\n-    #[repr(transparent, no_niche)]\n-    #[derive(Debug)] pub struct Shadowy<T>(T);\n-}\n-\n-mod enum_inline {\n-    use crate::two_fifty_six_variant_enum;\n-    use std::num::{NonZeroU8 as N8, NonZeroU16 as N16};\n-\n-    #[derive(Debug)] pub enum Visible1 { _A(N16), }\n-\n-    #[repr(no_niche)]\n-    #[derive(Debug)] pub enum Cloaked1 { _A(N16), }\n-\n-    // (N.B.: transparent enums must be univariant)\n-    #[repr(transparent)]\n-    #[derive(Debug)] pub enum Transparent { _A(N16), }\n-\n-    #[repr(transparent, no_niche)]\n-    #[derive(Debug)] pub enum Shadowy { _A(N16), }\n-\n-    // including multivariant enums for completeness. Payload and\n-    // number of variants (i.e. discriminant size) have been chosen so\n-    // that layout including discriminant is 4 bytes, with no space in\n-    // padding to hide another discrimnant from the surrounding\n-    // context.\n-    //\n-    // (Note that multivariant enums cannot usefully expose a niche in\n-    // general; this test is relying on that.)\n-    two_fifty_six_variant_enum!(Visible2, N8);\n-\n-    two_fifty_six_variant_enum!(#[repr(no_niche)] Cloaked2, N8);\n-}\n-\n-mod enum_param {\n-    use super::two_fifty_six_variant_enum;\n-\n-    #[derive(Debug)] pub enum Visible1<T> { _A(T), }\n-\n-    #[repr(no_niche)]\n-    #[derive(Debug)] pub enum Cloaked1<T> { _A(T), }\n-\n-    // (N.B.: transparent enums must be univariant)\n-    #[repr(transparent)]\n-    #[derive(Debug)] pub enum Transparent<T> { _A(T), }\n-\n-    #[repr(transparent, no_niche)]\n-    #[derive(Debug)] pub enum Shadowy<T> { _A(T), }\n-\n-    // including multivariant enums for completeness. Same notes apply\n-    // here as above (assuming `T` is instantiated with `NonZeroU8`).\n-    two_fifty_six_variant_enum!(Visible2<T>);\n-\n-    two_fifty_six_variant_enum!(#[repr(no_niche)] Cloaked2<T>);\n-}\n-\n-fn main() {\n-    // sanity-checks\n-    assert_eq!(size_of::<struct_inline::Visible>(),               2);\n-    assert_eq!(size_of::<struct_inline::Cloaked>(),               2);\n-    assert_eq!(size_of::<struct_inline::Transparent>(),           2);\n-    assert_eq!(size_of::<struct_inline::Shadowy>(),               2);\n-\n-    assert_eq!(size_of::<struct_param::Visible<NonZeroU16>>(), 2);\n-    assert_eq!(size_of::<struct_param::Cloaked<NonZeroU16>>(), 2);\n-    assert_eq!(size_of::<struct_param::Transparent<NonZeroU16>>(), 2);\n-    assert_eq!(size_of::<struct_param::Shadowy<NonZeroU16>>(), 2);\n-\n-    assert_eq!(size_of::<enum_inline::Visible1>(),    2);\n-    assert_eq!(size_of::<enum_inline::Cloaked1>(),    2);\n-    assert_eq!(size_of::<enum_inline::Transparent>(), 2); // transparent enums are univariant\n-    assert_eq!(size_of::<enum_inline::Shadowy>(),     2);\n-    assert_eq!(size_of::<enum_inline::Visible2>(),    4);\n-    assert_eq!(size_of::<enum_inline::Cloaked2>(),    4);\n-\n-    assert_eq!(size_of::<enum_param::Visible1<NonZeroU16>>(),    2);\n-    assert_eq!(size_of::<enum_param::Cloaked1<NonZeroU16>>(),    2);\n-    assert_eq!(size_of::<enum_param::Transparent<NonZeroU16>>(), 2);\n-    assert_eq!(size_of::<enum_param::Shadowy<NonZeroU16>>(),     2);\n-    assert_eq!(size_of::<enum_param::Visible2<NonZeroU8>>(),     4);\n-    assert_eq!(size_of::<enum_param::Cloaked2<NonZeroU8>>(),     4);\n-\n-    // now the actual tests of no_niche: how do inputs above compose\n-    // with `Option` type constructor. The cases with a `_+2` are the\n-    // ones where no_niche fires.\n-    assert_eq!(size_of::<Option<struct_inline::Visible>>(),       2);\n-    assert_eq!(size_of::<Option<struct_inline::Cloaked>>(),       2+2);\n-    assert_eq!(size_of::<Option<struct_inline::Transparent>>(),   2);\n-    assert_eq!(size_of::<Option<struct_inline::Shadowy>>(),       2+2);\n-\n-    assert_eq!(size_of::<Option<struct_param::Visible<NonZeroU16>>>(),     2);\n-    assert_eq!(size_of::<Option<struct_param::Cloaked<NonZeroU16>>>(),     2+2);\n-    assert_eq!(size_of::<Option<struct_param::Transparent<NonZeroU16>>>(), 2);\n-    assert_eq!(size_of::<Option<struct_param::Shadowy<NonZeroU16>>>(),     2+2);\n-\n-    assert_eq!(size_of::<Option<enum_inline::Visible1>>(),    2);\n-    assert_eq!(size_of::<Option<enum_inline::Cloaked1>>(),    2+2);\n-    assert_eq!(size_of::<Option<enum_inline::Transparent>>(), 2);\n-    assert_eq!(size_of::<Option<enum_inline::Shadowy>>(),     2+2);\n-    // cannot use niche of multivariant payload\n-    assert_eq!(size_of::<Option<enum_inline::Visible2>>(),    4+2);\n-    assert_eq!(size_of::<Option<enum_inline::Cloaked2>>(),    4+2);\n-\n-    assert_eq!(size_of::<Option<enum_param::Visible1<NonZeroU16>>>(),    2);\n-    assert_eq!(size_of::<Option<enum_param::Cloaked1<NonZeroU16>>>(),    2+2);\n-    assert_eq!(size_of::<Option<enum_param::Transparent<NonZeroU16>>>(), 2);\n-    assert_eq!(size_of::<Option<enum_param::Shadowy<NonZeroU16>>>(),     2+2);\n-    // cannot use niche of multivariant payload\n-    assert_eq!(size_of::<Option<enum_param::Visible2<NonZeroU8>>>(),    4+2);\n-    assert_eq!(size_of::<Option<enum_param::Cloaked2<NonZeroU8>>>(),    4+2);\n-}\n-\n-macro two_fifty_six_variant_enum {\n-    ($(#[$attr:meta])* $name:ident<$param:ident>) => {\n-        #[derive(Debug)] $(#[$attr])*\n-        pub enum $name<$param> {\n-            _V00($param, u16), _V01(u16, $param), _V02($param, u16), _V03(u16, $param),\n-            _V04($param, u16), _V05(u16, $param), _V06($param, u16), _V07(u16, $param),\n-            _V08($param, u16), _V09(u16, $param), _V0a($param, u16), _V0b(u16, $param),\n-            _V0c($param, u16), _V0d(u16, $param), _V0e($param, u16), _V0f(u16, $param),\n-\n-            _V10($param, u16), _V11(u16, $param), _V12($param, u16), _V13(u16, $param),\n-            _V14($param, u16), _V15(u16, $param), _V16($param, u16), _V17(u16, $param),\n-            _V18($param, u16), _V19(u16, $param), _V1a($param, u16), _V1b(u16, $param),\n-            _V1c($param, u16), _V1d(u16, $param), _V1e($param, u16), _V1f(u16, $param),\n-\n-            _V20($param, u16), _V21(u16, $param), _V22($param, u16), _V23(u16, $param),\n-            _V24($param, u16), _V25(u16, $param), _V26($param, u16), _V27(u16, $param),\n-            _V28($param, u16), _V29(u16, $param), _V2a($param, u16), _V2b(u16, $param),\n-            _V2c($param, u16), _V2d(u16, $param), _V2e($param, u16), _V2f(u16, $param),\n-\n-            _V30($param, u16), _V31(u16, $param), _V32($param, u16), _V33(u16, $param),\n-            _V34($param, u16), _V35(u16, $param), _V36($param, u16), _V37(u16, $param),\n-            _V38($param, u16), _V39(u16, $param), _V3a($param, u16), _V3b(u16, $param),\n-            _V3c($param, u16), _V3d(u16, $param), _V3e($param, u16), _V3f(u16, $param),\n-\n-            _V40($param, u16), _V41(u16, $param), _V42($param, u16), _V43(u16, $param),\n-            _V44($param, u16), _V45(u16, $param), _V46($param, u16), _V47(u16, $param),\n-            _V48($param, u16), _V49(u16, $param), _V4a($param, u16), _V4b(u16, $param),\n-            _V4c($param, u16), _V4d(u16, $param), _V4e($param, u16), _V4f(u16, $param),\n-\n-            _V50($param, u16), _V51(u16, $param), _V52($param, u16), _V53(u16, $param),\n-            _V54($param, u16), _V55(u16, $param), _V56($param, u16), _V57(u16, $param),\n-            _V58($param, u16), _V59(u16, $param), _V5a($param, u16), _V5b(u16, $param),\n-            _V5c($param, u16), _V5d(u16, $param), _V5e($param, u16), _V5f(u16, $param),\n-\n-            _V60($param, u16), _V61(u16, $param), _V62($param, u16), _V63(u16, $param),\n-            _V64($param, u16), _V65(u16, $param), _V66($param, u16), _V67(u16, $param),\n-            _V68($param, u16), _V69(u16, $param), _V6a($param, u16), _V6b(u16, $param),\n-            _V6c($param, u16), _V6d(u16, $param), _V6e($param, u16), _V6f(u16, $param),\n-\n-            _V70($param, u16), _V71(u16, $param), _V72($param, u16), _V73(u16, $param),\n-            _V74($param, u16), _V75(u16, $param), _V76($param, u16), _V77(u16, $param),\n-            _V78($param, u16), _V79(u16, $param), _V7a($param, u16), _V7b(u16, $param),\n-            _V7c($param, u16), _V7d(u16, $param), _V7e($param, u16), _V7f(u16, $param),\n-\n-            _V80($param, u16), _V81(u16, $param), _V82($param, u16), _V83(u16, $param),\n-            _V84($param, u16), _V85(u16, $param), _V86($param, u16), _V87(u16, $param),\n-            _V88($param, u16), _V89(u16, $param), _V8a($param, u16), _V8b(u16, $param),\n-            _V8c($param, u16), _V8d(u16, $param), _V8e($param, u16), _V8f(u16, $param),\n-\n-            _V90($param, u16), _V91(u16, $param), _V92($param, u16), _V93(u16, $param),\n-            _V94($param, u16), _V95(u16, $param), _V96($param, u16), _V97(u16, $param),\n-            _V98($param, u16), _V99(u16, $param), _V9a($param, u16), _V9b(u16, $param),\n-            _V9c($param, u16), _V9d(u16, $param), _V9e($param, u16), _V9f(u16, $param),\n-\n-            _Va0($param, u16), _Va1(u16, $param), _Va2($param, u16), _Va3(u16, $param),\n-            _Va4($param, u16), _Va5(u16, $param), _Va6($param, u16), _Va7(u16, $param),\n-            _Va8($param, u16), _Va9(u16, $param), _Vaa($param, u16), _Vab(u16, $param),\n-            _Vac($param, u16), _Vad(u16, $param), _Vae($param, u16), _Vaf(u16, $param),\n-\n-            _Vb0($param, u16), _Vb1(u16, $param), _Vb2($param, u16), _Vb3(u16, $param),\n-            _Vb4($param, u16), _Vb5(u16, $param), _Vb6($param, u16), _Vb7(u16, $param),\n-            _Vb8($param, u16), _Vb9(u16, $param), _Vba($param, u16), _Vbb(u16, $param),\n-            _Vbc($param, u16), _Vbd(u16, $param), _Vbe($param, u16), _Vbf(u16, $param),\n-\n-            _Vc0($param, u16), _Vc1(u16, $param), _Vc2($param, u16), _Vc3(u16, $param),\n-            _Vc4($param, u16), _Vc5(u16, $param), _Vc6($param, u16), _Vc7(u16, $param),\n-            _Vc8($param, u16), _Vc9(u16, $param), _Vca($param, u16), _Vcb(u16, $param),\n-            _Vcc($param, u16), _Vcd(u16, $param), _Vce($param, u16), _Vcf(u16, $param),\n-\n-            _Vd0($param, u16), _Vd1(u16, $param), _Vd2($param, u16), _Vd3(u16, $param),\n-            _Vd4($param, u16), _Vd5(u16, $param), _Vd6($param, u16), _Vd7(u16, $param),\n-            _Vd8($param, u16), _Vd9(u16, $param), _Vda($param, u16), _Vdb(u16, $param),\n-            _Vdc($param, u16), _Vdd(u16, $param), _Vde($param, u16), _Vdf(u16, $param),\n-\n-            _Ve0($param, u16), _Ve1(u16, $param), _Ve2($param, u16), _Ve3(u16, $param),\n-            _Ve4($param, u16), _Ve5(u16, $param), _Ve6($param, u16), _Ve7(u16, $param),\n-            _Ve8($param, u16), _Ve9(u16, $param), _Vea($param, u16), _Veb(u16, $param),\n-            _Vec($param, u16), _Ved(u16, $param), _Vee($param, u16), _Vef(u16, $param),\n-\n-            _Vf0($param, u16), _Vf1(u16, $param), _Vf2($param, u16), _Vf3(u16, $param),\n-            _Vf4($param, u16), _Vf5(u16, $param), _Vf6($param, u16), _Vf7(u16, $param),\n-            _Vf8($param, u16), _Vf9(u16, $param), _Vfa($param, u16), _Vfb(u16, $param),\n-            _Vfc($param, u16), _Vfd(u16, $param), _Vfe($param, u16), _Vff(u16, $param),\n-        }\n-    },\n-\n-    ($(#[$attr:meta])* $name:ident, $param:ty) => {\n-        #[derive(Debug)] $(#[$attr])*\n-        pub enum $name {\n-            _V00($param, u16), _V01(u16, $param), _V02($param, u16), _V03(u16, $param),\n-            _V04($param, u16), _V05(u16, $param), _V06($param, u16), _V07(u16, $param),\n-            _V08($param, u16), _V09(u16, $param), _V0a($param, u16), _V0b(u16, $param),\n-            _V0c($param, u16), _V0d(u16, $param), _V0e($param, u16), _V0f(u16, $param),\n-\n-            _V10($param, u16), _V11(u16, $param), _V12($param, u16), _V13(u16, $param),\n-            _V14($param, u16), _V15(u16, $param), _V16($param, u16), _V17(u16, $param),\n-            _V18($param, u16), _V19(u16, $param), _V1a($param, u16), _V1b(u16, $param),\n-            _V1c($param, u16), _V1d(u16, $param), _V1e($param, u16), _V1f(u16, $param),\n-\n-            _V20($param, u16), _V21(u16, $param), _V22($param, u16), _V23(u16, $param),\n-            _V24($param, u16), _V25(u16, $param), _V26($param, u16), _V27(u16, $param),\n-            _V28($param, u16), _V29(u16, $param), _V2a($param, u16), _V2b(u16, $param),\n-            _V2c($param, u16), _V2d(u16, $param), _V2e($param, u16), _V2f(u16, $param),\n-\n-            _V30($param, u16), _V31(u16, $param), _V32($param, u16), _V33(u16, $param),\n-            _V34($param, u16), _V35(u16, $param), _V36($param, u16), _V37(u16, $param),\n-            _V38($param, u16), _V39(u16, $param), _V3a($param, u16), _V3b(u16, $param),\n-            _V3c($param, u16), _V3d(u16, $param), _V3e($param, u16), _V3f(u16, $param),\n-\n-            _V40($param, u16), _V41(u16, $param), _V42($param, u16), _V43(u16, $param),\n-            _V44($param, u16), _V45(u16, $param), _V46($param, u16), _V47(u16, $param),\n-            _V48($param, u16), _V49(u16, $param), _V4a($param, u16), _V4b(u16, $param),\n-            _V4c($param, u16), _V4d(u16, $param), _V4e($param, u16), _V4f(u16, $param),\n-\n-            _V50($param, u16), _V51(u16, $param), _V52($param, u16), _V53(u16, $param),\n-            _V54($param, u16), _V55(u16, $param), _V56($param, u16), _V57(u16, $param),\n-            _V58($param, u16), _V59(u16, $param), _V5a($param, u16), _V5b(u16, $param),\n-            _V5c($param, u16), _V5d(u16, $param), _V5e($param, u16), _V5f(u16, $param),\n-\n-            _V60($param, u16), _V61(u16, $param), _V62($param, u16), _V63(u16, $param),\n-            _V64($param, u16), _V65(u16, $param), _V66($param, u16), _V67(u16, $param),\n-            _V68($param, u16), _V69(u16, $param), _V6a($param, u16), _V6b(u16, $param),\n-            _V6c($param, u16), _V6d(u16, $param), _V6e($param, u16), _V6f(u16, $param),\n-\n-            _V70($param, u16), _V71(u16, $param), _V72($param, u16), _V73(u16, $param),\n-            _V74($param, u16), _V75(u16, $param), _V76($param, u16), _V77(u16, $param),\n-            _V78($param, u16), _V79(u16, $param), _V7a($param, u16), _V7b(u16, $param),\n-            _V7c($param, u16), _V7d(u16, $param), _V7e($param, u16), _V7f(u16, $param),\n-\n-            _V80($param, u16), _V81(u16, $param), _V82($param, u16), _V83(u16, $param),\n-            _V84($param, u16), _V85(u16, $param), _V86($param, u16), _V87(u16, $param),\n-            _V88($param, u16), _V89(u16, $param), _V8a($param, u16), _V8b(u16, $param),\n-            _V8c($param, u16), _V8d(u16, $param), _V8e($param, u16), _V8f(u16, $param),\n-\n-            _V90($param, u16), _V91(u16, $param), _V92($param, u16), _V93(u16, $param),\n-            _V94($param, u16), _V95(u16, $param), _V96($param, u16), _V97(u16, $param),\n-            _V98($param, u16), _V99(u16, $param), _V9a($param, u16), _V9b(u16, $param),\n-            _V9c($param, u16), _V9d(u16, $param), _V9e($param, u16), _V9f(u16, $param),\n-\n-            _Va0($param, u16), _Va1(u16, $param), _Va2($param, u16), _Va3(u16, $param),\n-            _Va4($param, u16), _Va5(u16, $param), _Va6($param, u16), _Va7(u16, $param),\n-            _Va8($param, u16), _Va9(u16, $param), _Vaa($param, u16), _Vab(u16, $param),\n-            _Vac($param, u16), _Vad(u16, $param), _Vae($param, u16), _Vaf(u16, $param),\n-\n-            _Vb0($param, u16), _Vb1(u16, $param), _Vb2($param, u16), _Vb3(u16, $param),\n-            _Vb4($param, u16), _Vb5(u16, $param), _Vb6($param, u16), _Vb7(u16, $param),\n-            _Vb8($param, u16), _Vb9(u16, $param), _Vba($param, u16), _Vbb(u16, $param),\n-            _Vbc($param, u16), _Vbd(u16, $param), _Vbe($param, u16), _Vbf(u16, $param),\n-\n-            _Vc0($param, u16), _Vc1(u16, $param), _Vc2($param, u16), _Vc3(u16, $param),\n-            _Vc4($param, u16), _Vc5(u16, $param), _Vc6($param, u16), _Vc7(u16, $param),\n-            _Vc8($param, u16), _Vc9(u16, $param), _Vca($param, u16), _Vcb(u16, $param),\n-            _Vcc($param, u16), _Vcd(u16, $param), _Vce($param, u16), _Vcf(u16, $param),\n-\n-            _Vd0($param, u16), _Vd1(u16, $param), _Vd2($param, u16), _Vd3(u16, $param),\n-            _Vd4($param, u16), _Vd5(u16, $param), _Vd6($param, u16), _Vd7(u16, $param),\n-            _Vd8($param, u16), _Vd9(u16, $param), _Vda($param, u16), _Vdb(u16, $param),\n-            _Vdc($param, u16), _Vdd(u16, $param), _Vde($param, u16), _Vdf(u16, $param),\n-\n-            _Ve0($param, u16), _Ve1(u16, $param), _Ve2($param, u16), _Ve3(u16, $param),\n-            _Ve4($param, u16), _Ve5(u16, $param), _Ve6($param, u16), _Ve7(u16, $param),\n-            _Ve8($param, u16), _Ve9(u16, $param), _Vea($param, u16), _Veb(u16, $param),\n-            _Vec($param, u16), _Ved(u16, $param), _Vee($param, u16), _Vef(u16, $param),\n-\n-            _Vf0($param, u16), _Vf1(u16, $param), _Vf2($param, u16), _Vf3(u16, $param),\n-            _Vf4($param, u16), _Vf5(u16, $param), _Vf6($param, u16), _Vf7(u16, $param),\n-            _Vf8($param, u16), _Vf9(u16, $param), _Vfa($param, u16), _Vfb(u16, $param),\n-            _Vfc($param, u16), _Vfd(u16, $param), _Vfe($param, u16), _Vff(u16, $param),\n-        }\n-    }\n-}"}, {"sha": "6bce5fbd4c1fecf24cb1144fa812569186834f26", "filename": "src/tools/clippy/clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a899dc1cfe37270cf976b54a2953133faafa0ae/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a899dc1cfe37270cf976b54a2953133faafa0ae/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=2a899dc1cfe37270cf976b54a2953133faafa0ae", "patch": "@@ -148,7 +148,7 @@ fn is_value_unfrozen_raw<'tcx>(\n         match val.ty().kind() {\n             // the fact that we have to dig into every structs to search enums\n             // leads us to the point checking `UnsafeCell` directly is the only option.\n-            ty::Adt(ty_def, ..) if Some(ty_def.did()) == cx.tcx.lang_items().unsafe_cell_type() => true,\n+            ty::Adt(ty_def, ..) if ty_def.is_unsafe_cell() => true,\n             ty::Array(..) | ty::Adt(..) | ty::Tuple(..) => {\n                 let val = cx.tcx.destructure_mir_constant(cx.param_env, val);\n                 val.fields.iter().any(|field| inner(cx, *field))"}]}