{"sha": "3632629acc96b2e3094033de47d6dd311749e112", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2MzI2MjlhY2M5NmIyZTMwOTQwMzNkZTQ3ZDZkZDMxMTc0OWUxMTI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-09-19T17:34:27Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-09-19T18:40:41Z"}, "message": "rt: Introduce a self-describing box representation and functions to create and free them", "tree": {"sha": "0ba16168499bbac2551e5ddaedc53ad713733c9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ba16168499bbac2551e5ddaedc53ad713733c9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3632629acc96b2e3094033de47d6dd311749e112", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3632629acc96b2e3094033de47d6dd311749e112", "html_url": "https://github.com/rust-lang/rust/commit/3632629acc96b2e3094033de47d6dd311749e112", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3632629acc96b2e3094033de47d6dd311749e112/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f44a1356e2b0adce5157f5e331ab9a55e891b0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f44a1356e2b0adce5157f5e331ab9a55e891b0a", "html_url": "https://github.com/rust-lang/rust/commit/5f44a1356e2b0adce5157f5e331ab9a55e891b0a"}], "stats": {"total": 60, "additions": 59, "deletions": 1}, "files": [{"sha": "52d1046895cf9e6e47b5547ca524a857973484d1", "filename": "src/rt/rust_box.h", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3632629acc96b2e3094033de47d6dd311749e112/src%2Frt%2Frust_box.h", "raw_url": "https://github.com/rust-lang/rust/raw/3632629acc96b2e3094033de47d6dd311749e112/src%2Frt%2Frust_box.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_box.h?ref=3632629acc96b2e3094033de47d6dd311749e112", "patch": "@@ -0,0 +1,18 @@\n+/* Rust box representation. */\n+\n+#ifndef RUST_BOX_H\n+#define RUST_BOX_H\n+\n+#include \"rust_internal.h\"\n+#include <stdint.h>\n+\n+struct rust_box {\n+    RUST_REFCOUNTED(rust_box)\n+    type_desc *tydesc;\n+    rust_box *gc_next;\n+    rust_box *gc_prev;\n+    uint8_t data[0];\n+};\n+\n+#endif\n+"}, {"sha": "afc6f682ceb01eb33ca8dd2229c5f036dc63decc", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3632629acc96b2e3094033de47d6dd311749e112/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/3632629acc96b2e3094033de47d6dd311749e112/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=3632629acc96b2e3094033de47d6dd311749e112", "patch": "@@ -10,6 +10,8 @@\n #include \"context.h\"\n #include \"rust_obstack.h\"\n \n+struct rust_box;\n+\n struct stk_seg {\n     unsigned int valgrind_id;\n     uintptr_t limit;\n@@ -57,7 +59,7 @@ rust_task : public kernel_owned<rust_task>, rust_cond\n     context ctx;\n     stk_seg *stk;\n     uintptr_t runtime_sp;      // Runtime sp while task running.\n-    void *gc_alloc_chain;      // Linked list of GC allocations.\n+    rust_box *gc_alloc_chain;      // Linked list of GC allocations.\n     rust_scheduler *sched;\n     rust_crate_cache *cache;\n "}, {"sha": "0150cc31e48f47c38fbbe7e818551b46a116964d", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/3632629acc96b2e3094033de47d6dd311749e112/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/3632629acc96b2e3094033de47d6dd311749e112/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=3632629acc96b2e3094033de47d6dd311749e112", "patch": "@@ -1,3 +1,4 @@\n+#include \"rust_box.h\"\n #include \"rust_gc.h\"\n #include \"rust_internal.h\"\n #include \"rust_unwind.h\"\n@@ -76,6 +77,25 @@ upcall_malloc(rust_task *task, size_t nbytes, type_desc *td) {\n     return (uintptr_t) p;\n }\n \n+extern \"C\" CDECL rust_box *\n+upcall_malloc_box(rust_task *task, size_t nbytes, type_desc *td) {\n+    LOG_UPCALL_ENTRY(task);\n+\n+    gc::maybe_gc(task);\n+\n+    rust_box *box = reinterpret_cast<rust_box *>\n+        (task->malloc(nbytes + sizeof(rust_box), \"tdesc\", td));\n+    box->ref_count = 1;\n+    box->tydesc = td;\n+\n+    box->gc_prev = NULL;\n+    if ((box->gc_next = task->gc_alloc_chain) != NULL)\n+        box->gc_next->gc_prev = box;\n+    task->gc_alloc_chain = box;\n+\n+    return box;\n+}\n+\n /**\n  * Called whenever an object's ref count drops to zero.\n  */\n@@ -90,6 +110,24 @@ upcall_free(rust_task *task, void* ptr, uintptr_t is_gc) {\n     task->free(ptr, (bool) is_gc);\n }\n \n+extern \"C\" CDECL void\n+upcall_free_box(rust_task *task, rust_box *box) {\n+    LOG_UPCALL_ENTRY(task);\n+\n+    assert(!box->ref_count && \"Box reference count is nonzero on free!\");\n+\n+    if (box->gc_prev)\n+        box->gc_prev->gc_next = box->gc_next;\n+    else\n+        task->gc_alloc_chain = box->gc_next;\n+    if (box->gc_next)\n+        box->gc_next->gc_prev = box->gc_prev;\n+\n+    box->tydesc->drop_glue(NULL, task, (void *)box->tydesc,\n+                           box->tydesc->first_param, box->data);\n+    task->free(box, false);\n+}\n+\n extern \"C\" CDECL uintptr_t\n upcall_shared_malloc(rust_task *task, size_t nbytes, type_desc *td) {\n     LOG_UPCALL_ENTRY(task);"}]}