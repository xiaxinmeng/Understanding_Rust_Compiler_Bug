{"sha": "707bd7b21398044e4c2a84028b42dadbac5e91bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwN2JkN2IyMTM5ODA0NGU0YzJhODQwMjhiNDJkYWRiYWM1ZTkxYmM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-30T18:37:58Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-01T08:50:04Z"}, "message": "rename InvalidIntPtrUsage", "tree": {"sha": "172889d3233d2af402575807fefe3507fde7478a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/172889d3233d2af402575807fefe3507fde7478a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/707bd7b21398044e4c2a84028b42dadbac5e91bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/707bd7b21398044e4c2a84028b42dadbac5e91bc", "html_url": "https://github.com/rust-lang/rust/commit/707bd7b21398044e4c2a84028b42dadbac5e91bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/707bd7b21398044e4c2a84028b42dadbac5e91bc/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2feeb88b62e7ae9cdf3ef85ff850239cf60c9ec7", "url": "https://api.github.com/repos/rust-lang/rust/commits/2feeb88b62e7ae9cdf3ef85ff850239cf60c9ec7", "html_url": "https://github.com/rust-lang/rust/commit/2feeb88b62e7ae9cdf3ef85ff850239cf60c9ec7"}], "stats": {"total": 104, "additions": 54, "deletions": 50}, "files": [{"sha": "7710ed0255112a34e2f5a4eb24391cf2b60f6b78", "filename": "src/librustc_middle/mir/interpret/error.rs", "status": "modified", "additions": 40, "deletions": 10, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/707bd7b21398044e4c2a84028b42dadbac5e91bc/src%2Flibrustc_middle%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/707bd7b21398044e4c2a84028b42dadbac5e91bc/src%2Flibrustc_middle%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Finterpret%2Ferror.rs?ref=707bd7b21398044e4c2a84028b42dadbac5e91bc", "patch": "@@ -1,4 +1,4 @@\n-use super::{AllocId, CheckInAllocMsg, Pointer, RawConst, ScalarMaybeUndef};\n+use super::{AllocId, Pointer, RawConst, ScalarMaybeUndef};\n \n use crate::mir::interpret::ConstValue;\n use crate::ty::layout::LayoutError;\n@@ -304,6 +304,32 @@ impl fmt::Display for InvalidProgramInfo<'_> {\n     }\n }\n \n+/// Details of why a pointer had to be in-bounds.\n+#[derive(Debug, Copy, Clone, RustcEncodable, RustcDecodable, HashStable)]\n+pub enum CheckInAllocMsg {\n+    MemoryAccessTest,\n+    NullPointerTest,\n+    PointerArithmeticTest,\n+    InboundsTest,\n+}\n+\n+impl fmt::Display for CheckInAllocMsg {\n+    /// When this is printed as an error the context looks like this\n+    /// \"{test name} failed: pointer must be in-bounds at offset...\"\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(\n+            f,\n+            \"{}\",\n+            match *self {\n+                CheckInAllocMsg::MemoryAccessTest => \"memory access\",\n+                CheckInAllocMsg::NullPointerTest => \"NULL pointer test\",\n+                CheckInAllocMsg::PointerArithmeticTest => \"pointer arithmetic\",\n+                CheckInAllocMsg::InboundsTest => \"inbounds test\",\n+            }\n+        )\n+    }\n+}\n+\n /// Error information for when the program caused Undefined Behavior.\n pub enum UndefinedBehaviorInfo {\n     /// Free-form case. Only for errors that are never caught!\n@@ -333,17 +359,15 @@ pub enum UndefinedBehaviorInfo {\n         msg: CheckInAllocMsg,\n         allocation_size: Size,\n     },\n+    /// Using an integer as a pointer in the wrong way.\n+    DanglingIntPointer(u64, CheckInAllocMsg),\n     /// Used a pointer with bad alignment.\n     AlignmentCheckFailed {\n         required: Align,\n         has: Align,\n     },\n-    /// Using an integer as a pointer in the wrong way.\n-    InvalidIntPointerUsage(u64),\n     /// Writing to read-only memory.\n     WriteToReadOnly(AllocId),\n-    /// Using a pointer-not-to-a-function as function pointer.\n-    InvalidFunctionPointer(Pointer),\n     // Trying to access the data behind a function pointer.\n     DerefFunctionPointer(AllocId),\n     /// The value validity check found a problem.\n@@ -356,6 +380,8 @@ pub enum UndefinedBehaviorInfo {\n     InvalidChar(u32),\n     /// An enum discriminant was set to a value which was outside the range of valid values.\n     InvalidDiscriminant(ScalarMaybeUndef),\n+    /// Using a pointer-not-to-a-function as function pointer.\n+    InvalidFunctionPointer(Pointer),\n     /// Using uninitialized data where it is not allowed.\n     InvalidUndefBytes(Option<Pointer>),\n     /// Working with a local that is not currently live.\n@@ -397,23 +423,27 @@ impl fmt::Display for UndefinedBehaviorInfo {\n                 ptr.alloc_id,\n                 allocation_size.bytes()\n             ),\n-            InvalidIntPointerUsage(0) => write!(f, \"dereferencing NULL pointer\"),\n-            InvalidIntPointerUsage(i) => write!(f, \"dereferencing dangling pointer to 0x{:x}\", i),\n+            DanglingIntPointer(_, CheckInAllocMsg::NullPointerTest) => {\n+                write!(f, \"NULL pointer is not allowed for this operation\")\n+            }\n+            DanglingIntPointer(i, msg) => {\n+                write!(f, \"{} failed: 0x{:x} is not a valid pointer\", msg, i)\n+            }\n             AlignmentCheckFailed { required, has } => write!(\n                 f,\n                 \"accessing memory with alignment {}, but alignment {} is required\",\n                 has.bytes(),\n                 required.bytes()\n             ),\n             WriteToReadOnly(a) => write!(f, \"writing to {} which is read-only\", a),\n-            InvalidFunctionPointer(p) => {\n-                write!(f, \"using {} as function pointer but it does not point to a function\", p)\n-            }\n             DerefFunctionPointer(a) => write!(f, \"accessing {} which contains a function\", a),\n             ValidationFailure(ref err) => write!(f, \"type validation failed: {}\", err),\n             InvalidBool(b) => write!(f, \"interpreting an invalid 8-bit value as a bool: {}\", b),\n             InvalidChar(c) => write!(f, \"interpreting an invalid 32-bit value as a char: {}\", c),\n             InvalidDiscriminant(val) => write!(f, \"enum value has invalid discriminant: {}\", val),\n+            InvalidFunctionPointer(p) => {\n+                write!(f, \"using {} as function pointer but it does not point to a function\", p)\n+            }\n             InvalidUndefBytes(Some(p)) => write!(\n                 f,\n                 \"reading uninitialized memory at {}, but this operation requires initialized memory\","}, {"sha": "6b86bbfd19722a168f52550da846dd0f49986bc5", "filename": "src/librustc_middle/mir/interpret/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/707bd7b21398044e4c2a84028b42dadbac5e91bc/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/707bd7b21398044e4c2a84028b42dadbac5e91bc/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fmod.rs?ref=707bd7b21398044e4c2a84028b42dadbac5e91bc", "patch": "@@ -117,16 +117,16 @@ use crate::ty::subst::GenericArgKind;\n use crate::ty::{self, Instance, Ty, TyCtxt};\n \n pub use self::error::{\n-    struct_error, ConstEvalErr, ConstEvalRawResult, ConstEvalResult, ErrorHandled, FrameInfo,\n-    InterpError, InterpErrorInfo, InterpResult, InvalidProgramInfo, MachineStopType,\n+    struct_error, CheckInAllocMsg, ConstEvalErr, ConstEvalRawResult, ConstEvalResult, ErrorHandled,\n+    FrameInfo, InterpError, InterpErrorInfo, InterpResult, InvalidProgramInfo, MachineStopType,\n     ResourceExhaustionInfo, UndefinedBehaviorInfo, UnsupportedOpInfo,\n };\n \n pub use self::value::{get_slice_bytes, ConstValue, RawConst, Scalar, ScalarMaybeUndef};\n \n pub use self::allocation::{Allocation, AllocationExtra, Relocations, UndefMask};\n \n-pub use self::pointer::{CheckInAllocMsg, Pointer, PointerArithmetic};\n+pub use self::pointer::{Pointer, PointerArithmetic};\n \n /// Uniquely identifies one of the following:\n /// - A constant"}, {"sha": "19642278b44e355841aa7716700c3a0a36950844", "filename": "src/librustc_middle/mir/interpret/pointer.rs", "status": "modified", "additions": 1, "deletions": 27, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/707bd7b21398044e4c2a84028b42dadbac5e91bc/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/707bd7b21398044e4c2a84028b42dadbac5e91bc/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fpointer.rs?ref=707bd7b21398044e4c2a84028b42dadbac5e91bc", "patch": "@@ -4,33 +4,7 @@ use rustc_macros::HashStable;\n use rustc_target::abi::{HasDataLayout, Size};\n \n use std::convert::TryFrom;\n-use std::fmt::{self, Display};\n-\n-/// Used by `check_in_alloc` to indicate context of check\n-#[derive(Debug, Copy, Clone, RustcEncodable, RustcDecodable, HashStable)]\n-pub enum CheckInAllocMsg {\n-    MemoryAccessTest,\n-    NullPointerTest,\n-    PointerArithmeticTest,\n-    InboundsTest,\n-}\n-\n-impl Display for CheckInAllocMsg {\n-    /// When this is printed as an error the context looks like this\n-    /// \"{test name} failed: pointer must be in-bounds at offset...\"\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(\n-            f,\n-            \"{}\",\n-            match *self {\n-                CheckInAllocMsg::MemoryAccessTest => \"Memory access\",\n-                CheckInAllocMsg::NullPointerTest => \"Null pointer test\",\n-                CheckInAllocMsg::PointerArithmeticTest => \"Pointer arithmetic\",\n-                CheckInAllocMsg::InboundsTest => \"Inbounds test\",\n-            }\n-        )\n-    }\n-}\n+use std::fmt;\n \n ////////////////////////////////////////////////////////////////////////////////\n // Pointer arithmetic"}, {"sha": "39b0218c5d73fda1ad1c3c6c12724d3a4a904a0e", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/707bd7b21398044e4c2a84028b42dadbac5e91bc/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/707bd7b21398044e4c2a84028b42dadbac5e91bc/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=707bd7b21398044e4c2a84028b42dadbac5e91bc", "patch": "@@ -10,8 +10,8 @@ use rustc_middle::ty::{self, Ty};\n use rustc_span::def_id::DefId;\n \n use super::{\n-    AllocId, Allocation, AllocationExtra, Frame, ImmTy, InterpCx, InterpResult, Memory, MemoryKind,\n-    OpTy, Operand, PlaceTy, Pointer, Scalar,\n+    AllocId, Allocation, AllocationExtra, CheckInAllocMsg, Frame, ImmTy, InterpCx, InterpResult,\n+    Memory, MemoryKind, OpTy, Operand, PlaceTy, Pointer, Scalar,\n };\n \n /// Data returned by Machine::stack_pop,\n@@ -346,7 +346,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     ) -> InterpResult<'tcx, Pointer<Self::PointerTag>> {\n         Err((if int == 0 {\n             // This is UB, seriously.\n-            err_ub!(InvalidIntPointerUsage(0))\n+            err_ub!(DanglingIntPointer(0, CheckInAllocMsg::InboundsTest))\n         } else {\n             // This is just something we cannot support during const-eval.\n             err_unsup!(ReadBytesAsPointer)"}, {"sha": "d1881524172cc840036c12d2882255ae58a32737", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/707bd7b21398044e4c2a84028b42dadbac5e91bc/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/707bd7b21398044e4c2a84028b42dadbac5e91bc/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=707bd7b21398044e4c2a84028b42dadbac5e91bc", "patch": "@@ -365,7 +365,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n                 assert!(size.bytes() == 0);\n                 // Must be non-NULL.\n                 if bits == 0 {\n-                    throw_ub!(InvalidIntPointerUsage(0))\n+                    throw_ub!(DanglingIntPointer(0, msg))\n                 }\n                 // Must be aligned.\n                 if let Some(align) = align {"}, {"sha": "a9586b74a56d7314c0aa2a40f1f6f09a7f31dc79", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/707bd7b21398044e4c2a84028b42dadbac5e91bc/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/707bd7b21398044e4c2a84028b42dadbac5e91bc/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=707bd7b21398044e4c2a84028b42dadbac5e91bc", "patch": "@@ -360,10 +360,10 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                     place.ptr, size, align\n                 );\n                 match err.kind {\n-                    err_ub!(InvalidIntPointerUsage(0)) => {\n+                    err_ub!(DanglingIntPointer(0, _)) => {\n                         throw_validation_failure!(format_args!(\"a NULL {}\", kind), self.path)\n                     }\n-                    err_ub!(InvalidIntPointerUsage(i)) => throw_validation_failure!(\n+                    err_ub!(DanglingIntPointer(i, _)) => throw_validation_failure!(\n                         format_args!(\"a {} to unallocated address {}\", kind, i),\n                         self.path\n                     ),"}, {"sha": "38e9bdecdb9d2b8245a5f840f4618dc1fbfaf1f3", "filename": "src/test/ui/consts/const-eval/ub-nonnull.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/707bd7b21398044e4c2a84028b42dadbac5e91bc/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/707bd7b21398044e4c2a84028b42dadbac5e91bc/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.stderr?ref=707bd7b21398044e4c2a84028b42dadbac5e91bc", "patch": "@@ -13,7 +13,7 @@ LL | / const OUT_OF_BOUNDS_PTR: NonNull<u8> = { unsafe {\n LL | |     let ptr: &[u8; 256] = mem::transmute(&0u8); // &0 gets promoted so it does not dangle\n LL | |     // Use address-of-element for pointer arithmetic. This could wrap around to NULL!\n LL | |     let out_of_bounds_ptr = &ptr[255];\n-   | |                             ^^^^^^^^^ Memory access failed: pointer must be in-bounds at offset 256, but is outside bounds of alloc11 which has size 1\n+   | |                             ^^^^^^^^^ memory access failed: pointer must be in-bounds at offset 256, but is outside bounds of alloc11 which has size 1\n LL | |     mem::transmute(out_of_bounds_ptr)\n LL | | } };\n    | |____-"}, {"sha": "e56459a7bdeb52abd299b071f3e937284c2cd178", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/707bd7b21398044e4c2a84028b42dadbac5e91bc/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/707bd7b21398044e4c2a84028b42dadbac5e91bc/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.stderr?ref=707bd7b21398044e4c2a84028b42dadbac5e91bc", "patch": "@@ -186,13 +186,13 @@ error[E0080]: could not evaluate static initializer\n   --> $DIR/ub-wide-ptr.rs:121:5\n    |\n LL |     mem::transmute::<_, &dyn Trait>((&92u8, 0usize))\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereferencing NULL pointer\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ inbounds test failed: 0x0 is not a valid pointer\n \n error[E0080]: could not evaluate static initializer\n   --> $DIR/ub-wide-ptr.rs:125:5\n    |\n LL |     mem::transmute::<_, &dyn Trait>((&92u8, &3u64))\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Memory access failed: pointer must be in-bounds at offset N, but is outside bounds of allocN which has size N\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ memory access failed: pointer must be in-bounds at offset N, but is outside bounds of allocN which has size N\n \n error: aborting due to 24 previous errors\n "}, {"sha": "92ecea5fdacddb8f46cf44b7126f33c22b269ae4", "filename": "src/test/ui/consts/offset_from_ub.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/707bd7b21398044e4c2a84028b42dadbac5e91bc/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/707bd7b21398044e4c2a84028b42dadbac5e91bc/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr?ref=707bd7b21398044e4c2a84028b42dadbac5e91bc", "patch": "@@ -66,7 +66,7 @@ error: any use of this value will cause an error\n LL |           intrinsics::ptr_offset_from(self, origin)\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |           |\n-   |           dereferencing NULL pointer\n+   |           inbounds test failed: 0x0 is not a valid pointer\n    |           inside `std::ptr::const_ptr::<impl *const u8>::offset_from` at $SRC_DIR/libcore/ptr/const_ptr.rs:LL:COL\n    |           inside `OFFSET_FROM_NULL` at $DIR/offset_from_ub.rs:37:14\n    | "}]}