{"sha": "4161ae747740e9d61426d26da3e9f3f74fbabaca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxNjFhZTc0Nzc0MGU5ZDYxNDI2ZDI2ZGEzZTlmM2Y3NGZiYWJhY2E=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-03-23T17:48:03Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-03-23T17:50:33Z"}, "message": "Improved comments for UserAssertTy statement.", "tree": {"sha": "c2906ed2f6794169f291e72aa3d7c4a703c6522f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2906ed2f6794169f291e72aa3d7c4a703c6522f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4161ae747740e9d61426d26da3e9f3f74fbabaca", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlq1PnEACgkQAXYLT59T\n8VQwuw/9EniOvMxavcQtdmAcnB7QoTI7SW05nNG2KXclZVrAfvwgUUVrsi4PrsaH\n+So8fU21izuAXgFIMoV6mFAszrKn/a/NXiP/SzZdNikyuR2Ulmzc370asy0BsWpv\nXM5usyzYoFUnQuai8u4VHFCvfbsJDsF8Y0CnvnCztqtE9OA7KtQBvNyfnHby93cw\nQJlu0qkePN9RLg+7OpjxrIauM91SJkvbBjGp3op9MXUnGvtABE36C+YMFAjAVF6R\n3v7lZpdfWTPWlXgwG5ckntxZz2vaQ6zlZg2L/vznDKhTPdCZ0ijmxpHJGGQjBFzU\nBoCG6lI1QQXqvWcDDjSY8ljjqtwJ/40IcJuc4x9rSS6E/32UXz2Yyb/PoOBvSwK4\nEwFMtWk8DkdQY54Cm4p+MIbKkY71fDiPxeVRh5+u5k1T/IeyQjv4EODVl/dm6P3t\nsWx+t9sFSQaAqA5qzM6uMI7w/mSlFYEGCuC5INCfCebf7DoLHNL3ayAzRw8ok7QA\n/HOWUCLQip7q58jI+5m1m7+aRphapEXmWILJekElf7YQZ1K/L7Vh7yMILtDDDByR\nl2tmMzv25EDfWfPHySLpEMToCRkzl/HzPsfXLsK2ufJlkviumN7C0YMv19m+k7By\n9D08E6ebUYG1LBLdjfejYXImsOHzRCmkLhFYtkFMatcxJ9BrcKM=\n=LfqW\n-----END PGP SIGNATURE-----", "payload": "tree c2906ed2f6794169f291e72aa3d7c4a703c6522f\nparent 3a0162b7cb7f23236a23ef7747cc0ea5374bbb33\nauthor David Wood <david@davidtw.co> 1521827283 +0000\ncommitter David Wood <david@davidtw.co> 1521827433 +0000\n\nImproved comments for UserAssertTy statement.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4161ae747740e9d61426d26da3e9f3f74fbabaca", "html_url": "https://github.com/rust-lang/rust/commit/4161ae747740e9d61426d26da3e9f3f74fbabaca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4161ae747740e9d61426d26da3e9f3f74fbabaca/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a0162b7cb7f23236a23ef7747cc0ea5374bbb33", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a0162b7cb7f23236a23ef7747cc0ea5374bbb33", "html_url": "https://github.com/rust-lang/rust/commit/3a0162b7cb7f23236a23ef7747cc0ea5374bbb33"}], "stats": {"total": 17, "additions": 13, "deletions": 4}, "files": [{"sha": "9ed4e6a8e00ae5e3c7bc325362c6c9288fe1eedc", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4161ae747740e9d61426d26da3e9f3f74fbabaca/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4161ae747740e9d61426d26da3e9f3f74fbabaca/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=4161ae747740e9d61426d26da3e9f3f74fbabaca", "patch": "@@ -1260,6 +1260,14 @@ pub enum StatementKind<'tcx> {\n     ///\n     /// Here we would insert a `UserAssertTy<(T, U)>(y)` instruction to check that the type of `y`\n     /// is the right thing.\n+    ///\n+    /// `CanonicalTy` is used to capture \"inference variables\" from the user's types. For example:\n+    ///\n+    ///     let x: Vec<_> = ...;\n+    ///     let y: &u32 = ...;\n+    ///\n+    /// would result in `Vec<?0>` and `&'?0 u32` respectively (where `?0` is a canonicalized\n+    /// variable).\n     UserAssertTy(CanonicalTy<'tcx>, Local),\n \n     /// No-op. Useful for deleting instructions without affecting statement indices."}, {"sha": "55e695bb18c83378a44f10fa69f0e925909a1f75", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4161ae747740e9d61426d26da3e9f3f74fbabaca/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4161ae747740e9d61426d26da3e9f3f74fbabaca/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=4161ae747740e9d61426d26da3e9f3f74fbabaca", "patch": "@@ -345,7 +345,8 @@ pub struct TypeckTables<'tcx> {\n     /// method calls, including those of overloaded operators.\n     type_dependent_defs: ItemLocalMap<Def>,\n \n-    /// Stores the canonicalized types provided by the user.\n+    /// Stores the canonicalized types provided by the user. See also `UserAssertTy` statement in\n+    /// MIR.\n     user_provided_tys: ItemLocalMap<CanonicalTy<'tcx>>,\n \n     /// Stores the types for various nodes in the AST.  Note that this table"}, {"sha": "94702927d260067820931f1fc8d786c95b10f792", "filename": "src/librustc_mir/build/block.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4161ae747740e9d61426d26da3e9f3f74fbabaca/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4161ae747740e9d61426d26da3e9f3f74fbabaca/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fblock.rs?ref=4161ae747740e9d61426d26da3e9f3f74fbabaca", "patch": "@@ -125,9 +125,9 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                                 })\n                             }));\n                     } else {\n-                        // FIXME: We currently only insert `UserAssertTy` statements for patterns\n-                        // that are bindings, this is as we do not want to deconstruct the type\n-                        // being assertion to match the pattern.\n+                        // FIXME(#47184): We currently only insert `UserAssertTy` statements for\n+                        // patterns that are bindings, this is as we do not want to deconstruct\n+                        // the type being assertion to match the pattern.\n                         if let PatternKind::Binding { var, .. } = *pattern.kind {\n                             if let Some(ty) = ty {\n                                 this.user_assert_ty(block, ty, var, span);"}]}