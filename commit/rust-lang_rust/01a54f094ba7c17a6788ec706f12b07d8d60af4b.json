{"sha": "01a54f094ba7c17a6788ec706f12b07d8d60af4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxYTU0ZjA5NGJhN2MxN2E2Nzg4ZWM3MDZmMTJiMDdkOGQ2MGFmNGI=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-04-02T18:14:00Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-04-02T18:14:00Z"}, "message": "Merge #1094\n\n1094: Improve cargo-watch animation and refactoring r=matklad a=edwin0cheng\n\n* Refactoring code and fixed some minor bugs.\r\n* Add more error log and better error handling.\r\n* Add current checking artifact name in Cargo-watch animation.\r\n\r\n![new_status_animation](https://i.imgur.com/Zr2JLa5.gif)\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>", "tree": {"sha": "65d4eed3620f65f8f349660adfc7fe91d6ef9910", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65d4eed3620f65f8f349660adfc7fe91d6ef9910"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01a54f094ba7c17a6788ec706f12b07d8d60af4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01a54f094ba7c17a6788ec706f12b07d8d60af4b", "html_url": "https://github.com/rust-lang/rust/commit/01a54f094ba7c17a6788ec706f12b07d8d60af4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01a54f094ba7c17a6788ec706f12b07d8d60af4b/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "5cdf525caa51311515854c4dd398d3fb907d1368", "url": "https://api.github.com/repos/rust-lang/rust/commits/5cdf525caa51311515854c4dd398d3fb907d1368", "html_url": "https://github.com/rust-lang/rust/commit/5cdf525caa51311515854c4dd398d3fb907d1368"}, {"sha": "88bcaf0e1874f1552b1aa117bb78c3d237d2a953", "url": "https://api.github.com/repos/rust-lang/rust/commits/88bcaf0e1874f1552b1aa117bb78c3d237d2a953", "html_url": "https://github.com/rust-lang/rust/commit/88bcaf0e1874f1552b1aa117bb78c3d237d2a953"}], "stats": {"total": 122, "additions": 78, "deletions": 44}, "files": [{"sha": "d45d0e7d1bdd51c203e0552dfdf21af2877fd02d", "filename": "editors/code/src/commands/cargo_watch.ts", "status": "modified", "additions": 67, "deletions": 43, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/01a54f094ba7c17a6788ec706f12b07d8d60af4b/editors%2Fcode%2Fsrc%2Fcommands%2Fcargo_watch.ts", "raw_url": "https://github.com/rust-lang/rust/raw/01a54f094ba7c17a6788ec706f12b07d8d60af4b/editors%2Fcode%2Fsrc%2Fcommands%2Fcargo_watch.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fcargo_watch.ts?ref=01a54f094ba7c17a6788ec706f12b07d8d60af4b", "patch": "@@ -68,7 +68,11 @@ export class CargoWatchProvider {\n         this.cargoProcess.stdout.on('data', (s: string) => {\n             stdoutData.processOutput(s, line => {\n                 this.logInfo(line);\n-                this.parseLine(line);\n+                try {\n+                    this.parseLine(line);\n+                } catch (err) {\n+                    this.logError(`Failed to parse: ${err}, content : ${line}`);\n+                }\n             });\n         });\n \n@@ -133,79 +137,99 @@ export class CargoWatchProvider {\n             if (s === 'error') {\n                 return vscode.DiagnosticSeverity.Error;\n             }\n-\n             if (s.startsWith('warn')) {\n                 return vscode.DiagnosticSeverity.Warning;\n             }\n-\n             return vscode.DiagnosticSeverity.Information;\n         }\n \n-        interface ErrorSpan {\n+        // Reference:\n+        // https://github.com/rust-lang/rust/blob/master/src/libsyntax/json.rs\n+        interface RustDiagnosticSpan {\n             line_start: number;\n             line_end: number;\n             column_start: number;\n             column_end: number;\n+            is_primary: boolean;\n+            file_name: string;\n         }\n \n-        interface ErrorMessage {\n-            reason: string;\n-            message: {\n-                spans: ErrorSpan[];\n-                rendered: string;\n-                level: string;\n-                code?: {\n-                    code: string;\n-                };\n+        interface RustDiagnostic {\n+            spans: RustDiagnosticSpan[];\n+            rendered: string;\n+            level: string;\n+            code?: {\n+                code: string;\n             };\n         }\n \n+        interface CargoArtifact {\n+            reason: string;\n+            package_id: string;\n+        }\n+\n+        // https://github.com/rust-lang/cargo/blob/master/src/cargo/util/machine_message.rs\n+        interface CargoMessage {\n+            reason: string;\n+            package_id: string;\n+            message: RustDiagnostic;\n+        }\n+\n         // cargo-watch itself output non json format\n         // Ignore these lines\n-        let data: ErrorMessage;\n+        let data: CargoMessage;\n         try {\n             data = JSON.parse(line.trim());\n         } catch (error) {\n-            this.logError(`Fail to pass to json : { ${error} }`);\n+            this.logError(`Fail to parse to json : { ${error} }`);\n             return;\n         }\n \n-        // Only handle compiler-message now\n-        if (data.reason !== 'compiler-message') {\n-            return;\n-        }\n+        if (data.reason === 'compiler-artifact') {\n+            const msg = data as CargoArtifact;\n \n-        let spans: any[] = data.message.spans;\n-        spans = spans.filter(o => o.is_primary);\n+            // The format of the package_id is \"{name} {version} ({source_id})\",\n+            // https://github.com/rust-lang/cargo/blob/37ad03f86e895bb80b474c1c088322634f4725f5/src/cargo/core/package_id.rs#L53\n+            this.statusDisplay!.packageName = msg.package_id.split(' ')[0];\n+        } else if (data.reason === 'compiler-message') {\n+            const msg = data.message as RustDiagnostic;\n \n-        // We only handle primary span right now.\n-        if (spans.length > 0) {\n-            const o = spans[0];\n+            const spans = msg.spans.filter(o => o.is_primary);\n \n-            const rendered = data.message.rendered;\n-            const level = getLevel(data.message.level);\n-            const range = new vscode.Range(\n-                new vscode.Position(o.line_start - 1, o.column_start - 1),\n-                new vscode.Position(o.line_end - 1, o.column_end - 1)\n-            );\n+            // We only handle primary span right now.\n+            if (spans.length > 0) {\n+                const o = spans[0];\n+\n+                const rendered = msg.rendered;\n+                const level = getLevel(msg.level);\n+                const range = new vscode.Range(\n+                    new vscode.Position(o.line_start - 1, o.column_start - 1),\n+                    new vscode.Position(o.line_end - 1, o.column_end - 1)\n+                );\n \n-            const fileName = path.join(vscode.workspace.rootPath!, o.file_name);\n-            const diagnostic = new vscode.Diagnostic(range, rendered, level);\n+                const fileName = path.join(\n+                    vscode.workspace.rootPath!,\n+                    o.file_name\n+                );\n+                const diagnostic = new vscode.Diagnostic(\n+                    range,\n+                    rendered,\n+                    level\n+                );\n \n-            diagnostic.source = 'rustc';\n-            diagnostic.code = data.message.code\n-                ? data.message.code.code\n-                : undefined;\n-            diagnostic.relatedInformation = [];\n+                diagnostic.source = 'rustc';\n+                diagnostic.code = msg.code ? msg.code.code : undefined;\n+                diagnostic.relatedInformation = [];\n \n-            const fileUrl = vscode.Uri.file(fileName!);\n+                const fileUrl = vscode.Uri.file(fileName!);\n \n-            const diagnostics: vscode.Diagnostic[] = [\n-                ...(this.diagnosticCollection!.get(fileUrl) || [])\n-            ];\n-            diagnostics.push(diagnostic);\n+                const diagnostics: vscode.Diagnostic[] = [\n+                    ...(this.diagnosticCollection!.get(fileUrl) || [])\n+                ];\n+                diagnostics.push(diagnostic);\n \n-            this.diagnosticCollection!.set(fileUrl, diagnostics);\n+                this.diagnosticCollection!.set(fileUrl, diagnostics);\n+            }\n         }\n     }\n }"}, {"sha": "86ae821de7d64eb9789e5e4da46c28cded177e04", "filename": "editors/code/src/commands/watch_status.ts", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/01a54f094ba7c17a6788ec706f12b07d8d60af4b/editors%2Fcode%2Fsrc%2Fcommands%2Fwatch_status.ts", "raw_url": "https://github.com/rust-lang/rust/raw/01a54f094ba7c17a6788ec706f12b07d8d60af4b/editors%2Fcode%2Fsrc%2Fcommands%2Fwatch_status.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fwatch_status.ts?ref=01a54f094ba7c17a6788ec706f12b07d8d60af4b", "patch": "@@ -3,6 +3,8 @@ import * as vscode from 'vscode';\n const spinnerFrames = ['\u280b', '\u2819', '\u2839', '\u2838', '\u283c', '\u2834', '\u2826', '\u2827', '\u2807', '\u280f'];\n \n export class StatusDisplay {\n+    public packageName?: string;\n+\n     private i = 0;\n     private statusBarItem: vscode.StatusBarItem;\n     private timer?: NodeJS.Timeout;\n@@ -17,10 +19,18 @@ export class StatusDisplay {\n     }\n \n     public show() {\n+        this.packageName = undefined;\n+\n         this.timer =\n             this.timer ||\n             setInterval(() => {\n-                this.statusBarItem!.text = 'cargo check ' + this.frame();\n+                if (this.packageName) {\n+                    this.statusBarItem!.text = `cargo check [${\n+                        this.packageName\n+                    }] ${this.frame()}`;\n+                } else {\n+                    this.statusBarItem!.text = `cargo check ${this.frame()}`;\n+                }\n             }, 300);\n \n         this.statusBarItem!.show();"}]}