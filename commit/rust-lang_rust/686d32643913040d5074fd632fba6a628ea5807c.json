{"sha": "686d32643913040d5074fd632fba6a628ea5807c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4NmQzMjY0MzkxMzA0MGQ1MDc0ZmQ2MzJmYmE2YTYyOGVhNTgwN2M=", "commit": {"author": {"name": "Alisdair Owens", "email": "awo101@zepler.net", "date": "2015-07-19T14:18:09Z"}, "committer": {"name": "Alisdair Owens", "email": "awo101@zepler.net", "date": "2015-07-20T17:49:05Z"}, "message": "Add diagnostics for E0172, fix inline error message for E0139", "tree": {"sha": "d7cf0bf3c13f6b1fd2bf82ab79e7e549c7d64910", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7cf0bf3c13f6b1fd2bf82ab79e7e549c7d64910"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/686d32643913040d5074fd632fba6a628ea5807c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/686d32643913040d5074fd632fba6a628ea5807c", "html_url": "https://github.com/rust-lang/rust/commit/686d32643913040d5074fd632fba6a628ea5807c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/686d32643913040d5074fd632fba6a628ea5807c/comments", "author": {"login": "AlisdairO", "id": 6296622, "node_id": "MDQ6VXNlcjYyOTY2MjI=", "avatar_url": "https://avatars.githubusercontent.com/u/6296622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlisdairO", "html_url": "https://github.com/AlisdairO", "followers_url": "https://api.github.com/users/AlisdairO/followers", "following_url": "https://api.github.com/users/AlisdairO/following{/other_user}", "gists_url": "https://api.github.com/users/AlisdairO/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlisdairO/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlisdairO/subscriptions", "organizations_url": "https://api.github.com/users/AlisdairO/orgs", "repos_url": "https://api.github.com/users/AlisdairO/repos", "events_url": "https://api.github.com/users/AlisdairO/events{/privacy}", "received_events_url": "https://api.github.com/users/AlisdairO/received_events", "type": "User", "site_admin": false}, "committer": {"login": "AlisdairO", "id": 6296622, "node_id": "MDQ6VXNlcjYyOTY2MjI=", "avatar_url": "https://avatars.githubusercontent.com/u/6296622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlisdairO", "html_url": "https://github.com/AlisdairO", "followers_url": "https://api.github.com/users/AlisdairO/followers", "following_url": "https://api.github.com/users/AlisdairO/following{/other_user}", "gists_url": "https://api.github.com/users/AlisdairO/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlisdairO/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlisdairO/subscriptions", "organizations_url": "https://api.github.com/users/AlisdairO/orgs", "repos_url": "https://api.github.com/users/AlisdairO/repos", "events_url": "https://api.github.com/users/AlisdairO/events{/privacy}", "received_events_url": "https://api.github.com/users/AlisdairO/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c88aeda5809b570da7f92a82113fa8bd6184c4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c88aeda5809b570da7f92a82113fa8bd6184c4b", "html_url": "https://github.com/rust-lang/rust/commit/6c88aeda5809b570da7f92a82113fa8bd6184c4b"}], "stats": {"total": 30, "additions": 28, "deletions": 2}, "files": [{"sha": "a10e0b8dfc29e4b8ddd360f372d9be1cb279dbf3", "filename": "src/librustc/middle/intrinsicck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/686d32643913040d5074fd632fba6a628ea5807c/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d32643913040d5074fd632fba6a628ea5807c/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs?ref=686d32643913040d5074fd632fba6a628ea5807c", "patch": "@@ -165,7 +165,7 @@ impl<'a, 'tcx> IntrinsicCheckingVisitor<'a, 'tcx> {\n         if from_tc.interior_param() || to_tc.interior_param() {\n             span_err!(self.tcx.sess, span, E0139,\n                       \"cannot transmute to or from a type that contains \\\n-                       type parameters in its interior\");\n+                       unsubstituted type parameters\");\n             return;\n         }\n "}, {"sha": "a6c574e29ef93c54d6f803f679f68117a4b35632", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/686d32643913040d5074fd632fba6a628ea5807c/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d32643913040d5074fd632fba6a628ea5807c/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=686d32643913040d5074fd632fba6a628ea5807c", "patch": "@@ -1476,6 +1476,33 @@ return, for example with a `loop` that never breaks or a call to another\n diverging function (such as `panic!()`).\n \"##,\n \n+E0172: r##\"\n+This error means that an attempt was made to specify the type of a variable with\n+a combination of a concrete type and a trait. Consider the following example:\n+\n+```\n+fn foo(bar: i32+std::fmt::Display) {}\n+```\n+\n+The code is trying to specify that we want to receive a signed 32-bit integer\n+which also implements `Display`. This doesn't make sense: when we pass `i32`, a\n+concrete type, it implicitly includes all of the traits that it implements.\n+This includes `Display`, `Debug`, `Clone`, and a host of others.\n+\n+If `i32` implements the trait we desire, there's no need to specify the trait\n+separately. If it does not, then we need to `impl` the trait for `i32` before\n+passing it into `foo`. Either way, a fixed definition for `foo` will look like\n+the following:\n+\n+```\n+fn foo(bar: i32) {}\n+```\n+\n+To learn more about traits, take a look at the Book:\n+\n+https://doc.rust-lang.org/book/traits.html\n+\"##,\n+\n E0178: r##\"\n In types, the `+` type operator has low precedence, so it is often necessary\n to use parentheses.\n@@ -2196,7 +2223,6 @@ register_diagnostics! {\n     E0164,\n     E0167,\n     E0168,\n-    E0172,\n     E0173, // manual implementations of unboxed closure traits are experimental\n     E0174, // explicit use of unboxed closure methods are experimental\n     E0182,"}]}