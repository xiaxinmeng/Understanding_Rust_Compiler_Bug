{"sha": "486dc5c07020714e49476ebd6571ac02247acd2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4NmRjNWMwNzAyMDcxNGU0OTQ3NmViZDY1NzFhYzAyMjQ3YWNkMmQ=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2018-04-15T12:30:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-04-15T12:30:45Z"}, "message": "Merge pull request #2650 from thekidxp/fixEmptyPrintln\n\nfixEmptyPrintln", "tree": {"sha": "a04536e48aedaff046865160f847ad6e0da8eb44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a04536e48aedaff046865160f847ad6e0da8eb44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/486dc5c07020714e49476ebd6571ac02247acd2d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJa00X1CRBK7hj4Ov3rIwAAdHIIAEOZvUG8ylYiLRwUnDhjmp/M\nai0r9iuiFjPIthtBi40IPV0MYdMjuQPSvCIj4Lnb0I0GqQtV6nwh3unvI8VFpnDG\nr9Kkj36fP6QPCfFLs6BYtlRkbWWJ7Ny5o2pf6iNfj0hZBofK3ewU2LbS8hhO98Pz\nUxLfQ+PeU/vBvlDNtlthjBif+2OH4ngRRi1Tlu2rlOnwqKiTkO1TuD0y5In+mIbq\nBQDdT7IWYIlJtqXTLU/jrIODQ7PKvE4TQqFv1LIuHaNHyVHGC6uA/O0ZfjJ/HERJ\niV0dqNq92+D+BCWGJHn1dejz7ImdizkQXUvCq8NQlrQT/hNnTBmaGCiEpMhp4k0=\n=JJus\n-----END PGP SIGNATURE-----\n", "payload": "tree a04536e48aedaff046865160f847ad6e0da8eb44\nparent b2e4b88d180bca5c2f896cf8fbd1ba96a0208d15\nparent d175c797e5299ba530460a619a4c34d9a818b187\nauthor Oliver Schneider <oli-obk@users.noreply.github.com> 1523795445 +0200\ncommitter GitHub <noreply@github.com> 1523795445 +0200\n\nMerge pull request #2650 from thekidxp/fixEmptyPrintln\n\nfixEmptyPrintln"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/486dc5c07020714e49476ebd6571ac02247acd2d", "html_url": "https://github.com/rust-lang/rust/commit/486dc5c07020714e49476ebd6571ac02247acd2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/486dc5c07020714e49476ebd6571ac02247acd2d/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2e4b88d180bca5c2f896cf8fbd1ba96a0208d15", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2e4b88d180bca5c2f896cf8fbd1ba96a0208d15", "html_url": "https://github.com/rust-lang/rust/commit/b2e4b88d180bca5c2f896cf8fbd1ba96a0208d15"}, {"sha": "d175c797e5299ba530460a619a4c34d9a818b187", "url": "https://api.github.com/repos/rust-lang/rust/commits/d175c797e5299ba530460a619a4c34d9a818b187", "html_url": "https://github.com/rust-lang/rust/commit/d175c797e5299ba530460a619a4c34d9a818b187"}], "stats": {"total": 38, "additions": 26, "deletions": 12}, "files": [{"sha": "3c8f96c0f6fb3fa8203079dbbe0c0b8485ea259a", "filename": ".gitignore", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/486dc5c07020714e49476ebd6571ac02247acd2d/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/486dc5c07020714e49476ebd6571ac02247acd2d/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=486dc5c07020714e49476ebd6571ac02247acd2d", "patch": "@@ -28,5 +28,6 @@ util/gh-pages/lints.json\n *.rs.bk\n \n helper.txt\n-\n+*.iml\n .vscode\n+.idea"}, {"sha": "5f6c15e222d28b105f9db10f525f77e2942da274", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/486dc5c07020714e49476ebd6571ac02247acd2d/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/486dc5c07020714e49476ebd6571ac02247acd2d/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=486dc5c07020714e49476ebd6571ac02247acd2d", "patch": "@@ -12,7 +12,7 @@ use url::Url;\n ///\n /// **Why is this bad?** *Rustdoc* supports markdown formatting, `_`, `::` and\n /// camel-case probably indicates some code which should be included between\n-/// ticks. `_` can also be used for empasis in markdown, this lint tries to\n+/// ticks. `_` can also be used for emphasis in markdown, this lint tries to\n /// consider that.\n ///\n /// **Known problems:** Lots of bad docs won\u2019t be fixed, what the lint checks"}, {"sha": "4773aab27da8ef8b6bed52471f97d4d3218710e9", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/486dc5c07020714e49476ebd6571ac02247acd2d/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/486dc5c07020714e49476ebd6571ac02247acd2d/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=486dc5c07020714e49476ebd6571ac02247acd2d", "patch": "@@ -230,11 +230,11 @@ fn check_write_variants<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr,\n                                         \"using `write!()` with a format string that ends in a \\\n                                         newline, consider using `writeln!()` instead\");\n                             },\n-                            \"writeln\" => if has_empty_arg(cx, span, fmtstr, fmtlen) {\n+                            \"writeln\" => if let Some(final_span) = has_empty_arg(cx, span, fmtstr, fmtlen) {\n                                 span_lint_and_sugg(\n                                     cx,\n                                     WRITE_WITH_NEWLINE,\n-                                    span,\n+                                    final_span,\n                                     \"using `writeln!(v, \\\"\\\")`\",\n                                     \"replace it with\",\n                                     \"writeln!(v)\".to_string(),\n@@ -295,11 +295,11 @@ fn check_print_variants<'a, 'tcx>(\n                                                 newline, consider using `println!()` instead\");\n                                     },\n                                 \"println\" =>\n-                                    if has_empty_arg(cx, span, fmtstr, fmtlen) {\n+                                    if let Some(final_span) = has_empty_arg(cx, span, fmtstr, fmtlen) {\n                                         span_lint_and_sugg(\n                                             cx,\n                                             PRINT_WITH_NEWLINE,\n-                                            span,\n+                                            final_span,\n                                             \"using `println!(\\\"\\\")`\",\n                                             \"replace it with\",\n                                             \"println!()\".to_string(),\n@@ -390,7 +390,7 @@ fn has_newline_end(args: &HirVec<Expr>, fmtstr: InternedString, fmtlen: usize) -\n }\n \n /// Check for writeln!(v, \"\") / println!(\"\")\n-fn has_empty_arg<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, span: Span, fmtstr: InternedString, fmtlen: usize) -> bool {\n+fn has_empty_arg<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, span: Span, fmtstr: InternedString, fmtlen: usize) -> Option<Span> {\n     if_chain! {\n         // check that the string is empty\n         if fmtlen == 1;\n@@ -400,10 +400,13 @@ fn has_empty_arg<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, span: Span, fmtstr: Inter\n         if let Ok(snippet) = cx.sess().codemap().span_to_snippet(span);\n         if snippet.contains(\"\\\"\\\"\");\n         then {\n-            return true\n+            if snippet.ends_with(';') {\n+                return Some(cx.sess().codemap().span_until_char(span, ';'));\n+            }\n+            return Some(span)\n         }\n     }\n-    false\n+    None\n }\n \n /// Returns the slice of format string parts in an `Arguments::new_v1` call."}, {"sha": "9df348050ad70984a1f6f50460217ed53e2002e0", "filename": "tests/ui/println_empty_string.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/486dc5c07020714e49476ebd6571ac02247acd2d/tests%2Fui%2Fprintln_empty_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/486dc5c07020714e49476ebd6571ac02247acd2d/tests%2Fui%2Fprintln_empty_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprintln_empty_string.rs?ref=486dc5c07020714e49476ebd6571ac02247acd2d", "patch": "@@ -1,4 +1,8 @@\n fn main() {\n     println!();\n     println!(\"\");\n+\n+    match \"a\" {\n+        _ => println!(\"\"),\n+    }\n }"}, {"sha": "1148a4496a5852f3e5cb0f47de96e971002bc9c6", "filename": "tests/ui/println_empty_string.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/486dc5c07020714e49476ebd6571ac02247acd2d/tests%2Fui%2Fprintln_empty_string.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/486dc5c07020714e49476ebd6571ac02247acd2d/tests%2Fui%2Fprintln_empty_string.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprintln_empty_string.stderr?ref=486dc5c07020714e49476ebd6571ac02247acd2d", "patch": "@@ -2,9 +2,15 @@ error: using `println!(\"\")`\n  --> $DIR/println_empty_string.rs:3:5\n   |\n 3 |     println!(\"\");\n-  |     ^^^^^^^^^^^^^ help: replace it with: `println!()`\n+  |     ^^^^^^^^^^^^ help: replace it with: `println!()`\n   |\n   = note: `-D print-with-newline` implied by `-D warnings`\n \n-error: aborting due to previous error\n+error: using `println!(\"\")`\n+ --> $DIR/println_empty_string.rs:6:14\n+  |\n+6 |         _ => println!(\"\"),\n+  |              ^^^^^^^^^^^^ help: replace it with: `println!()`\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "b46493848655208e3267766619bbae0aadd5022e", "filename": "tests/ui/writeln_empty_string.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/486dc5c07020714e49476ebd6571ac02247acd2d/tests%2Fui%2Fwriteln_empty_string.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/486dc5c07020714e49476ebd6571ac02247acd2d/tests%2Fui%2Fwriteln_empty_string.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwriteln_empty_string.stderr?ref=486dc5c07020714e49476ebd6571ac02247acd2d", "patch": "@@ -2,7 +2,7 @@ error: using `writeln!(v, \"\")`\n  --> $DIR/writeln_empty_string.rs:9:5\n   |\n 9 |     writeln!(&mut v, \"\");\n-  |     ^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `writeln!(v)`\n+  |     ^^^^^^^^^^^^^^^^^^^^ help: replace it with: `writeln!(v)`\n   |\n   = note: `-D write-with-newline` implied by `-D warnings`\n "}]}