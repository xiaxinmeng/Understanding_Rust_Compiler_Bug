{"sha": "00e14f16225fcf529b6d8a20c4c000d803064ec8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwZTE0ZjE2MjI1ZmNmNTI5YjZkOGEyMGM0YzAwMGQ4MDMwNjRlYzg=", "commit": {"author": {"name": "Ulrik Sverdrup", "email": "root@localhost", "date": "2015-03-24T18:57:49Z"}, "committer": {"name": "Ulrik Sverdrup", "email": "root@localhost", "date": "2015-03-24T21:21:38Z"}, "message": "core: Update docs for StrExt demotion in libstd\n\nMain access point of .split() and other similar methods are not using\nthe StrExt trait anymore, so update the libcore docs to reflect this\n(because these docs are visible in libstd API documentation).", "tree": {"sha": "15807f7edb28ebdf7e49cd5e1d38f2464ecef36c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15807f7edb28ebdf7e49cd5e1d38f2464ecef36c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00e14f16225fcf529b6d8a20c4c000d803064ec8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00e14f16225fcf529b6d8a20c4c000d803064ec8", "html_url": "https://github.com/rust-lang/rust/commit/00e14f16225fcf529b6d8a20c4c000d803064ec8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00e14f16225fcf529b6d8a20c4c000d803064ec8/comments", "author": {"login": "invalid-email-address", "id": 148100, "node_id": "MDQ6VXNlcjE0ODEwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/148100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/invalid-email-address", "html_url": "https://github.com/invalid-email-address", "followers_url": "https://api.github.com/users/invalid-email-address/followers", "following_url": "https://api.github.com/users/invalid-email-address/following{/other_user}", "gists_url": "https://api.github.com/users/invalid-email-address/gists{/gist_id}", "starred_url": "https://api.github.com/users/invalid-email-address/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/invalid-email-address/subscriptions", "organizations_url": "https://api.github.com/users/invalid-email-address/orgs", "repos_url": "https://api.github.com/users/invalid-email-address/repos", "events_url": "https://api.github.com/users/invalid-email-address/events{/privacy}", "received_events_url": "https://api.github.com/users/invalid-email-address/received_events", "type": "User", "site_admin": false}, "committer": {"login": "invalid-email-address", "id": 148100, "node_id": "MDQ6VXNlcjE0ODEwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/148100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/invalid-email-address", "html_url": "https://github.com/invalid-email-address", "followers_url": "https://api.github.com/users/invalid-email-address/followers", "following_url": "https://api.github.com/users/invalid-email-address/following{/other_user}", "gists_url": "https://api.github.com/users/invalid-email-address/gists{/gist_id}", "starred_url": "https://api.github.com/users/invalid-email-address/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/invalid-email-address/subscriptions", "organizations_url": "https://api.github.com/users/invalid-email-address/orgs", "repos_url": "https://api.github.com/users/invalid-email-address/repos", "events_url": "https://api.github.com/users/invalid-email-address/events{/privacy}", "received_events_url": "https://api.github.com/users/invalid-email-address/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "227d30414ca88aad644ea4fde2c33852b1fd6ad9", "url": "https://api.github.com/repos/rust-lang/rust/commits/227d30414ca88aad644ea4fde2c33852b1fd6ad9", "html_url": "https://github.com/rust-lang/rust/commit/227d30414ca88aad644ea4fde2c33852b1fd6ad9"}], "stats": {"total": 17, "additions": 8, "deletions": 9}, "files": [{"sha": "aaa73badcac99a1b0c21bf7794b803a82317549f", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00e14f16225fcf529b6d8a20c4c000d803064ec8/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e14f16225fcf529b6d8a20c4c000d803064ec8/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=00e14f16225fcf529b6d8a20c4c000d803064ec8", "patch": "@@ -19,7 +19,7 @@\n //! are owned elsewhere.\n //!\n //! Basic operations are implemented directly by the compiler, but more advanced\n-//! operations are defined on the [`StrExt`](trait.StrExt.html) trait.\n+//! operations are defined as methods on the `str` type.\n //!\n //! # Examples\n //!"}, {"sha": "5c4d8427ea2fc906158400bbdaea428c78de0833", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/00e14f16225fcf529b6d8a20c4c000d803064ec8/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e14f16225fcf529b6d8a20c4c000d803064ec8/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=00e14f16225fcf529b6d8a20c4c000d803064ec8", "patch": "@@ -164,8 +164,7 @@ impl FromStr for bool {\n     /// assert!(<bool as FromStr>::from_str(\"not even a boolean\").is_err());\n     /// ```\n     ///\n-    /// Note, in many cases, the StrExt::parse() which is based on\n-    /// this FromStr::from_str() is more proper.\n+    /// Note, in many cases, the `.parse()` method on `str` is more proper.\n     ///\n     /// ```\n     /// assert_eq!(\"true\".parse(), Ok(true));\n@@ -530,7 +529,7 @@ impl<'a> DoubleEndedIterator for CharIndices<'a> {\n /// External iterator for a string's bytes.\n /// Use with the `std::iter` module.\n ///\n-/// Created with `StrExt::bytes`\n+/// Created with `str::bytes`\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n pub struct Bytes<'a>(Map<slice::Iter<'a, u8>, BytesDeref>);\n@@ -1461,27 +1460,27 @@ impl<'a, S: ?Sized> Str for &'a S where S: Str {\n     fn as_slice(&self) -> &str { Str::as_slice(*self) }\n }\n \n-/// Return type of `StrExt::split`\n+/// Return type of `str::split`\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Split<'a, P: Pattern<'a>>(CharSplits<'a, P>);\n delegate_iter!{pattern &'a str : Split<'a, P>}\n \n-/// Return type of `StrExt::split_terminator`\n+/// Return type of `str::split_terminator`\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct SplitTerminator<'a, P: Pattern<'a>>(CharSplits<'a, P>);\n delegate_iter!{pattern &'a str : SplitTerminator<'a, P>}\n \n-/// Return type of `StrExt::splitn`\n+/// Return type of `str::splitn`\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct SplitN<'a, P: Pattern<'a>>(CharSplitsN<'a, P>);\n delegate_iter!{pattern forward &'a str : SplitN<'a, P>}\n \n-/// Return type of `StrExt::rsplit`\n+/// Return type of `str::rsplit`\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct RSplit<'a, P: Pattern<'a>>(RCharSplits<'a, P>);\n delegate_iter!{pattern reverse &'a str : RSplit<'a, P>}\n \n-/// Return type of `StrExt::rsplitn`\n+/// Return type of `str::rsplitn`\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct RSplitN<'a, P: Pattern<'a>>(RCharSplitsN<'a, P>);\n delegate_iter!{pattern reverse &'a str : RSplitN<'a, P>}"}]}