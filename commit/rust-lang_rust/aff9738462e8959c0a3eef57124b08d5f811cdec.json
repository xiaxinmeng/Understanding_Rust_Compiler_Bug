{"sha": "aff9738462e8959c0a3eef57124b08d5f811cdec", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmZjk3Mzg0NjJlODk1OWMwYTNlZWY1NzEyNGIwOGQ1ZjgxMWNkZWM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-06-30T12:58:56Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-10T21:12:08Z"}, "message": "hygiene: Reuse `MacroKind` in `ExpnKind`\n\nOrthogonality and reuse are good.", "tree": {"sha": "36b8c1e8b6dd8daf9a02486f6b2552f1996c1443", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36b8c1e8b6dd8daf9a02486f6b2552f1996c1443"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aff9738462e8959c0a3eef57124b08d5f811cdec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aff9738462e8959c0a3eef57124b08d5f811cdec", "html_url": "https://github.com/rust-lang/rust/commit/aff9738462e8959c0a3eef57124b08d5f811cdec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aff9738462e8959c0a3eef57124b08d5f811cdec/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4dcf9b15c451e2994ee92cba6efdd2779a931b99", "url": "https://api.github.com/repos/rust-lang/rust/commits/4dcf9b15c451e2994ee92cba6efdd2779a931b99", "html_url": "https://github.com/rust-lang/rust/commit/4dcf9b15c451e2994ee92cba6efdd2779a931b99"}], "stats": {"total": 144, "additions": 67, "deletions": 77}, "files": [{"sha": "69e8c355019612574f7bf2eed70239b82a19f20b", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aff9738462e8959c0a3eef57124b08d5f811cdec/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff9738462e8959c0a3eef57124b08d5f811cdec/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=aff9738462e8959c0a3eef57124b08d5f811cdec", "patch": "@@ -408,8 +408,7 @@ impl_stable_hash_for!(struct ::syntax_pos::hygiene::ExpnInfo {\n });\n \n impl_stable_hash_for!(enum ::syntax_pos::hygiene::ExpnKind {\n-    MacroAttribute(sym),\n-    MacroBang(sym),\n+    Macro(kind, descr),\n     Desugaring(kind)\n });\n "}, {"sha": "3c8b0041a9847792e879f41c2cee60afd4474aed", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/aff9738462e8959c0a3eef57124b08d5f811cdec/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff9738462e8959c0a3eef57124b08d5f811cdec/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=aff9738462e8959c0a3eef57124b08d5f811cdec", "patch": "@@ -38,6 +38,7 @@ use syntax::ast;\n use syntax::source_map::{MultiSpan, ExpnKind, DesugaringKind};\n use syntax::early_buffered_lints::BufferedEarlyLintId;\n use syntax::edition::Edition;\n+use syntax::ext::base::MacroKind;\n use syntax::symbol::{Symbol, sym};\n use syntax_pos::Span;\n \n@@ -884,10 +885,9 @@ pub fn in_external_macro(sess: &Session, span: Span) -> bool {\n     };\n \n     match info.kind {\n-        ExpnKind::MacroAttribute(..) => true, // definitely a plugin\n         ExpnKind::Desugaring(DesugaringKind::ForLoop) => false,\n         ExpnKind::Desugaring(_) => true, // well, it's \"external\"\n-        ExpnKind::MacroBang(..) => {\n+        ExpnKind::Macro(MacroKind::Bang, _) => {\n             if info.def_site.is_dummy() {\n                 // dummy span for the def_site means it's an external macro\n                 return true;\n@@ -898,19 +898,16 @@ pub fn in_external_macro(sess: &Session, span: Span) -> bool {\n                 Err(_) => true,\n             }\n         }\n+        ExpnKind::Macro(..) => true, // definitely a plugin\n     }\n }\n \n /// Returns whether `span` originates in a derive macro's expansion\n pub fn in_derive_expansion(span: Span) -> bool {\n-    let info = match span.ctxt().outer_expn_info() {\n-        Some(info) => info,\n-        // no ExpnInfo means this span doesn't come from a macro\n-        None => return false,\n-    };\n-\n-    match info.kind {\n-        ExpnKind::MacroAttribute(symbol) => symbol.as_str().starts_with(\"derive(\"),\n-        _ => false,\n+    if let Some(info) = span.ctxt().outer_expn_info() {\n+        if let ExpnKind::Macro(MacroKind::Derive, _) = info.kind {\n+            return true;\n+        }\n     }\n+    false\n }"}, {"sha": "d0eefbb11799fb8e886cbb8183964ef41336eeb9", "filename": "src/librustc_allocator/expand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aff9738462e8959c0a3eef57124b08d5f811cdec/src%2Flibrustc_allocator%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff9738462e8959c0a3eef57124b08d5f811cdec/src%2Flibrustc_allocator%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_allocator%2Fexpand.rs?ref=aff9738462e8959c0a3eef57124b08d5f811cdec", "patch": "@@ -11,7 +11,7 @@ use syntax::{\n         respan, ExpnInfo, ExpnKind,\n     },\n     ext::{\n-        base::{ExtCtxt, Resolver},\n+        base::{ExtCtxt, MacroKind, Resolver},\n         build::AstBuilder,\n         expand::ExpansionConfig,\n         hygiene::{Mark, SyntaxContext},\n@@ -87,7 +87,7 @@ impl MutVisitor for ExpandAllocatorDirectives<'_> {\n         // Create a fresh Mark for the new macro expansion we are about to do\n         let mark = Mark::fresh(Mark::root());\n         mark.set_expn_info(ExpnInfo::with_unstable(\n-            ExpnKind::MacroAttribute(sym::global_allocator), item.span, self.sess.edition,\n+            ExpnKind::Macro(MacroKind::Attr, sym::global_allocator), item.span, self.sess.edition,\n             &[sym::rustc_attrs],\n         ));\n "}, {"sha": "7f57b0a5052afd907403f44f51b5a3aba1b70fff", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/aff9738462e8959c0a3eef57124b08d5f811cdec/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff9738462e8959c0a3eef57124b08d5f811cdec/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=aff9738462e8959c0a3eef57124b08d5f811cdec", "patch": "@@ -114,17 +114,21 @@ fn sub_namespace_match(candidate: Option<MacroKind>, requirement: Option<MacroKi\n // We don't want to format a path using pretty-printing,\n // `format!(\"{}\", path)`, because that tries to insert\n // line-breaks and is slow.\n-fn fast_print_path(path: &ast::Path) -> String {\n-    let mut path_str = String::with_capacity(64);\n-    for (i, segment) in path.segments.iter().enumerate() {\n-        if i != 0 {\n-            path_str.push_str(\"::\");\n-        }\n-        if segment.ident.name != kw::PathRoot {\n-            path_str.push_str(&segment.ident.as_str())\n+fn fast_print_path(path: &ast::Path) -> Symbol {\n+    if path.segments.len() == 1 {\n+        return path.segments[0].ident.name\n+    } else {\n+        let mut path_str = String::with_capacity(64);\n+        for (i, segment) in path.segments.iter().enumerate() {\n+            if i != 0 {\n+                path_str.push_str(\"::\");\n+            }\n+            if segment.ident.name != kw::PathRoot {\n+                path_str.push_str(&segment.ident.as_str())\n+            }\n         }\n+        Symbol::intern(&path_str)\n     }\n-    path_str\n }\n \n impl<'a> base::Resolver for Resolver<'a> {\n@@ -219,14 +223,10 @@ impl<'a> base::Resolver for Resolver<'a> {\n         };\n \n         let span = invoc.span();\n-        let path = fast_print_path(path);\n-        let format = match kind {\n-            MacroKind::Derive => format!(\"derive({})\", path),\n-            _ => path.clone(),\n-        };\n-        invoc.expansion_data.mark.set_expn_info(ext.expn_info(span, &format));\n+        let descr = fast_print_path(path);\n+        invoc.expansion_data.mark.set_expn_info(ext.expn_info(span, descr));\n \n-        self.check_stability_and_deprecation(&ext, &path, span);\n+        self.check_stability_and_deprecation(&ext, descr, span);\n \n         if let Res::Def(_, def_id) = res {\n             if after_derive {\n@@ -991,7 +991,7 @@ impl<'a> Resolver<'a> {\n         }\n     }\n \n-    fn check_stability_and_deprecation(&self, ext: &SyntaxExtension, path: &str, span: Span) {\n+    fn check_stability_and_deprecation(&self, ext: &SyntaxExtension, descr: Symbol, span: Span) {\n         if let Some(stability) = &ext.stability {\n             if let StabilityLevel::Unstable { reason, issue } = stability.level {\n                 let feature = stability.feature;\n@@ -1000,14 +1000,14 @@ impl<'a> Resolver<'a> {\n                 }\n             }\n             if let Some(depr) = &stability.rustc_depr {\n-                let (message, lint) = stability::rustc_deprecation_message(depr, path);\n+                let (message, lint) = stability::rustc_deprecation_message(depr, &descr.as_str());\n                 stability::early_report_deprecation(\n                     self.session, &message, depr.suggestion, lint, span\n                 );\n             }\n         }\n         if let Some(depr) = &ext.deprecation {\n-            let (message, lint) = stability::deprecation_message(depr, path);\n+            let (message, lint) = stability::deprecation_message(depr, &descr.as_str());\n             stability::early_report_deprecation(self.session, &message, None, lint, span);\n         }\n     }"}, {"sha": "2c8f7a44f5a27d69771b51a33493f56d7b795264", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aff9738462e8959c0a3eef57124b08d5f811cdec/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff9738462e8959c0a3eef57124b08d5f811cdec/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=aff9738462e8959c0a3eef57124b08d5f811cdec", "patch": "@@ -843,7 +843,8 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n         let callee = span.source_callee()?;\n \n         // Ignore attribute macros, their spans are usually mangled\n-        if let ExpnKind::MacroAttribute(_) = callee.kind {\n+        if let ExpnKind::Macro(MacroKind::Attr, _) |\n+               ExpnKind::Macro(MacroKind::Derive, _) = callee.kind {\n             return None;\n         }\n "}, {"sha": "04f124685cbb5f9091af1628358aa62920ec6984", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/aff9738462e8959c0a3eef57124b08d5f811cdec/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff9738462e8959c0a3eef57124b08d5f811cdec/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=aff9738462e8959c0a3eef57124b08d5f811cdec", "patch": "@@ -640,18 +640,10 @@ impl SyntaxExtension {\n         }\n     }\n \n-    fn expn_kind(&self, descr: Symbol) -> ExpnKind {\n-        match self.kind {\n-            SyntaxExtensionKind::Bang(..) |\n-            SyntaxExtensionKind::LegacyBang(..) => ExpnKind::MacroBang(descr),\n-            _ => ExpnKind::MacroAttribute(descr),\n-        }\n-    }\n-\n-    pub fn expn_info(&self, call_site: Span, descr: &str) -> ExpnInfo {\n+    pub fn expn_info(&self, call_site: Span, descr: Symbol) -> ExpnInfo {\n         ExpnInfo {\n             call_site,\n-            kind: self.expn_kind(Symbol::intern(descr)),\n+            kind: ExpnKind::Macro(self.macro_kind(), descr),\n             def_site: self.span,\n             default_transparency: self.default_transparency,\n             allow_internal_unstable: self.allow_internal_unstable.clone(),"}, {"sha": "68e7225c3cfc586ef2b3c9620b94ddeff18c397b", "filename": "src/libsyntax/ext/derive.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/aff9738462e8959c0a3eef57124b08d5f811cdec/src%2Flibsyntax%2Fext%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff9738462e8959c0a3eef57124b08d5f811cdec/src%2Flibsyntax%2Fext%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderive.rs?ref=aff9738462e8959c0a3eef57124b08d5f811cdec", "patch": "@@ -1,7 +1,7 @@\n use crate::attr::HasAttrs;\n use crate::ast;\n use crate::source_map::{ExpnInfo, ExpnKind};\n-use crate::ext::base::ExtCtxt;\n+use crate::ext::base::{ExtCtxt, MacroKind};\n use crate::ext::build::AstBuilder;\n use crate::parse::parser::PathStyle;\n use crate::symbol::{Symbol, sym};\n@@ -46,19 +46,18 @@ pub fn collect_derives(cx: &mut ExtCtxt<'_>, attrs: &mut Vec<ast::Attribute>) ->\n pub fn add_derived_markers<T>(cx: &mut ExtCtxt<'_>, span: Span, traits: &[ast::Path], item: &mut T)\n     where T: HasAttrs,\n {\n-    let (mut names, mut pretty_name) = (FxHashSet::default(), \"derive(\".to_owned());\n+    let (mut names, mut pretty_name) = (FxHashSet::default(), String::new());\n     for (i, path) in traits.iter().enumerate() {\n         if i > 0 {\n             pretty_name.push_str(\", \");\n         }\n         pretty_name.push_str(&path.to_string());\n         names.insert(unwrap_or!(path.segments.get(0), continue).ident.name);\n     }\n-    pretty_name.push(')');\n \n     cx.current_expansion.mark.set_expn_info(ExpnInfo::with_unstable(\n-        ExpnKind::MacroAttribute(Symbol::intern(&pretty_name)), span, cx.parse_sess.edition,\n-        &[sym::rustc_attrs, sym::structural_match],\n+        ExpnKind::Macro(MacroKind::Derive, Symbol::intern(&pretty_name)), span,\n+        cx.parse_sess.edition, &[sym::rustc_attrs, sym::structural_match],\n     ));\n \n     let span = span.with_ctxt(cx.backtrace());"}, {"sha": "81f9ff9b6613b196bbc2789474310b0076298df0", "filename": "src/libsyntax/std_inject.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aff9738462e8959c0a3eef57124b08d5f811cdec/src%2Flibsyntax%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff9738462e8959c0a3eef57124b08d5f811cdec/src%2Flibsyntax%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fstd_inject.rs?ref=aff9738462e8959c0a3eef57124b08d5f811cdec", "patch": "@@ -1,7 +1,7 @@\n use crate::ast;\n use crate::attr;\n use crate::edition::Edition;\n-use crate::ext::hygiene::{Mark, SyntaxContext};\n+use crate::ext::hygiene::{Mark, SyntaxContext, MacroKind};\n use crate::symbol::{Ident, Symbol, kw, sym};\n use crate::source_map::{ExpnInfo, ExpnKind, dummy_spanned, respan};\n use crate::ptr::P;\n@@ -17,7 +17,8 @@ use syntax_pos::{DUMMY_SP, Span};\n fn ignored_span(sp: Span, edition: Edition) -> Span {\n     let mark = Mark::fresh(Mark::root());\n     mark.set_expn_info(ExpnInfo::with_unstable(\n-        ExpnKind::MacroAttribute(Symbol::intern(\"std_inject\")), sp, edition, &[sym::prelude_import]\n+        ExpnKind::Macro(MacroKind::Attr, Symbol::intern(\"std_inject\")), sp, edition,\n+        &[sym::prelude_import],\n     ));\n     sp.with_ctxt(SyntaxContext::empty().apply_mark(mark))\n }"}, {"sha": "7ec7bb6ff458f2873c4e18b2bf01e626168b1611", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aff9738462e8959c0a3eef57124b08d5f811cdec/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff9738462e8959c0a3eef57124b08d5f811cdec/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=aff9738462e8959c0a3eef57124b08d5f811cdec", "patch": "@@ -21,7 +21,7 @@ use crate::entry::{self, EntryPointType};\n use crate::ext::base::{ExtCtxt, Resolver};\n use crate::ext::build::AstBuilder;\n use crate::ext::expand::ExpansionConfig;\n-use crate::ext::hygiene::{self, Mark, SyntaxContext};\n+use crate::ext::hygiene::{self, Mark, SyntaxContext, MacroKind};\n use crate::mut_visit::{*, ExpectOne};\n use crate::feature_gate::Features;\n use crate::util::map_in_place::MapInPlace;\n@@ -280,7 +280,7 @@ fn generate_test_harness(sess: &ParseSess,\n     };\n \n     mark.set_expn_info(ExpnInfo::with_unstable(\n-        ExpnKind::MacroAttribute(sym::test_case), DUMMY_SP, sess.edition,\n+        ExpnKind::Macro(MacroKind::Attr, sym::test_case), DUMMY_SP, sess.edition,\n         &[sym::main, sym::test, sym::rustc_attrs],\n     ));\n "}, {"sha": "0733a8ec95c71b2d45d69a9493ad315c7654eea6", "filename": "src/libsyntax_ext/proc_macro_decls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aff9738462e8959c0a3eef57124b08d5f811cdec/src%2Flibsyntax_ext%2Fproc_macro_decls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff9738462e8959c0a3eef57124b08d5f811cdec/src%2Flibsyntax_ext%2Fproc_macro_decls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_decls.rs?ref=aff9738462e8959c0a3eef57124b08d5f811cdec", "patch": "@@ -5,7 +5,7 @@ use crate::deriving;\n use syntax::ast::{self, Ident};\n use syntax::attr;\n use syntax::source_map::{ExpnInfo, ExpnKind, respan};\n-use syntax::ext::base::ExtCtxt;\n+use syntax::ext::base::{ExtCtxt, MacroKind};\n use syntax::ext::build::AstBuilder;\n use syntax::ext::expand::ExpansionConfig;\n use syntax::ext::hygiene::Mark;\n@@ -348,7 +348,7 @@ fn mk_decls(\n ) -> P<ast::Item> {\n     let mark = Mark::fresh(Mark::root());\n     mark.set_expn_info(ExpnInfo::with_unstable(\n-        ExpnKind::MacroAttribute(sym::proc_macro), DUMMY_SP, cx.parse_sess.edition,\n+        ExpnKind::Macro(MacroKind::Attr, sym::proc_macro), DUMMY_SP, cx.parse_sess.edition,\n         &[sym::rustc_attrs, Symbol::intern(\"proc_macro_internals\")],\n     ));\n     let span = DUMMY_SP.apply_mark(mark);"}, {"sha": "28d452233cceb3824997eee0c2356bf64df1237e", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/aff9738462e8959c0a3eef57124b08d5f811cdec/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff9738462e8959c0a3eef57124b08d5f811cdec/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=aff9738462e8959c0a3eef57124b08d5f811cdec", "patch": "@@ -135,11 +135,9 @@ impl Mark {\n     pub fn looks_like_proc_macro_derive(self) -> bool {\n         HygieneData::with(|data| {\n             if data.default_transparency(self) == Transparency::Opaque {\n-                if let Some(expn_info) = &data.marks[self.0 as usize].expn_info {\n-                    if let ExpnKind::MacroAttribute(name) = expn_info.kind {\n-                        if name.as_str().starts_with(\"derive(\") {\n-                            return true;\n-                        }\n+                if let Some(expn_info) = data.expn_info(self) {\n+                    if let ExpnKind::Macro(MacroKind::Derive, _) = expn_info.kind {\n+                        return true;\n                     }\n                 }\n             }\n@@ -193,7 +191,7 @@ impl HygieneData {\n     }\n \n     fn default_transparency(&self, mark: Mark) -> Transparency {\n-        self.marks[mark.0 as usize].expn_info.as_ref().map_or(\n+        self.expn_info(mark).map_or(\n             Transparency::SemiTransparent, |einfo| einfo.default_transparency\n         )\n     }\n@@ -613,7 +611,8 @@ impl fmt::Debug for SyntaxContext {\n     }\n }\n \n-/// Extra information for tracking spans of macro and syntax sugar expansion\n+/// A subset of properties from both macro definition and macro call available through global data.\n+/// Avoid using this if you have access to the original definition or call structures.\n #[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n pub struct ExpnInfo {\n     // --- The part unique to each expansion.\n@@ -627,7 +626,7 @@ pub struct ExpnInfo {\n     /// call_site span would have its own ExpnInfo, with the call_site\n     /// pointing to the `foo!` invocation.\n     pub call_site: Span,\n-    /// The format with which the macro was invoked.\n+    /// The kind of this expansion - macro or compiler desugaring.\n     pub kind: ExpnKind,\n \n     // --- The part specific to the macro/desugaring definition.\n@@ -675,22 +674,21 @@ impl ExpnInfo {\n     }\n }\n \n-/// The source of expansion.\n+/// Expansion kind.\n #[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n pub enum ExpnKind {\n-    /// e.g., #[derive(...)] <item>\n-    MacroAttribute(Symbol),\n-    /// e.g., `format!()`\n-    MacroBang(Symbol),\n+    /// Expansion produced by a macro.\n+    /// FIXME: Some code injected by the compiler before HIR lowering also gets this kind.\n+    Macro(MacroKind, Symbol),\n     /// Desugaring done by the compiler during HIR lowering.\n     Desugaring(DesugaringKind)\n }\n \n impl ExpnKind {\n     pub fn descr(&self) -> Symbol {\n         match *self {\n-            ExpnKind::MacroBang(name) | ExpnKind::MacroAttribute(name) => name,\n-            ExpnKind::Desugaring(kind) => kind.descr(),\n+            ExpnKind::Macro(_, descr) => descr,\n+            ExpnKind::Desugaring(kind) => Symbol::intern(kind.descr()),\n         }\n     }\n }\n@@ -743,16 +741,16 @@ pub enum DesugaringKind {\n }\n \n impl DesugaringKind {\n-    pub fn descr(self) -> Symbol {\n-        Symbol::intern(match self {\n+    pub fn descr(self) -> &'static str {\n+        match self {\n             DesugaringKind::CondTemporary => \"if and while condition\",\n             DesugaringKind::Async => \"async\",\n             DesugaringKind::Await => \"await\",\n             DesugaringKind::QuestionMark => \"?\",\n             DesugaringKind::TryBlock => \"try block\",\n             DesugaringKind::ExistentialType => \"existential type\",\n             DesugaringKind::ForLoop => \"for loop\",\n-        })\n+        }\n     }\n }\n "}, {"sha": "4fd27ce4f9633b04a81deb030aa19a31028dac82", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/aff9738462e8959c0a3eef57124b08d5f811cdec/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff9738462e8959c0a3eef57124b08d5f811cdec/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=aff9738462e8959c0a3eef57124b08d5f811cdec", "patch": "@@ -27,7 +27,7 @@ extern crate serialize as rustc_serialize; // used by deriving\n pub mod edition;\n use edition::Edition;\n pub mod hygiene;\n-pub use hygiene::{Mark, SyntaxContext, ExpnInfo, ExpnKind, DesugaringKind};\n+pub use hygiene::{Mark, SyntaxContext, ExpnInfo, ExpnKind, MacroKind, DesugaringKind};\n \n mod span_encoding;\n pub use span_encoding::{Span, DUMMY_SP};\n@@ -442,9 +442,12 @@ impl Span {\n             // Don't print recursive invocations.\n             if !info.call_site.source_equal(&prev_span) {\n                 let (pre, post) = match info.kind {\n-                    ExpnKind::MacroAttribute(..) => (\"#[\", \"]\"),\n-                    ExpnKind::MacroBang(..) => (\"\", \"!\"),\n                     ExpnKind::Desugaring(..) => (\"desugaring of `\", \"`\"),\n+                    ExpnKind::Macro(macro_kind, _) => match macro_kind {\n+                        MacroKind::Bang => (\"\", \"!\"),\n+                        MacroKind::Attr => (\"#[\", \"]\"),\n+                        MacroKind::Derive => (\"#[derive(\", \")]\"),\n+                    }\n                 };\n                 result.push(MacroBacktrace {\n                     call_site: info.call_site,"}]}