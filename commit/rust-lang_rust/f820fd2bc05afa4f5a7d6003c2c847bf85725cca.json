{"sha": "f820fd2bc05afa4f5a7d6003c2c847bf85725cca", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4MjBmZDJiYzA1YWZhNGY1YTdkNjAwM2MyYzg0N2JmODU3MjVjY2E=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-03-21T21:40:08Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-03-21T21:42:06Z"}, "message": "rustdoc: Replace pair of `Option`s with an enum\n\nThey are never both `None` or both `Some`, so it makes more sense to use\nan enum so that we \"make impossible states impossible\".", "tree": {"sha": "45289cd7690125b475fb92b6690b3a305fe54e17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45289cd7690125b475fb92b6690b3a305fe54e17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f820fd2bc05afa4f5a7d6003c2c847bf85725cca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f820fd2bc05afa4f5a7d6003c2c847bf85725cca", "html_url": "https://github.com/rust-lang/rust/commit/f820fd2bc05afa4f5a7d6003c2c847bf85725cca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f820fd2bc05afa4f5a7d6003c2c847bf85725cca/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61edfd591cedff66fca639c02f66984f6271e5a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/61edfd591cedff66fca639c02f66984f6271e5a6", "html_url": "https://github.com/rust-lang/rust/commit/61edfd591cedff66fca639c02f66984f6271e5a6"}], "stats": {"total": 19, "additions": 11, "deletions": 8}, "files": [{"sha": "b39f9f878921a9b9b2fac73ffe3ba9739e2d53a5", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f820fd2bc05afa4f5a7d6003c2c847bf85725cca/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f820fd2bc05afa4f5a7d6003c2c847bf85725cca/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=f820fd2bc05afa4f5a7d6003c2c847bf85725cca", "patch": "@@ -690,25 +690,29 @@ crate fn find_testable_code<T: doctest::Tester>(\n }\n \n crate struct ExtraInfo<'tcx> {\n-    hir_id: Option<HirId>,\n-    item_did: Option<DefId>,\n+    id: ExtraInfoId,\n     sp: Span,\n     tcx: TyCtxt<'tcx>,\n }\n \n+enum ExtraInfoId {\n+    Hir(HirId),\n+    Def(DefId),\n+}\n+\n impl<'tcx> ExtraInfo<'tcx> {\n     crate fn new(tcx: TyCtxt<'tcx>, hir_id: HirId, sp: Span) -> ExtraInfo<'tcx> {\n-        ExtraInfo { hir_id: Some(hir_id), item_did: None, sp, tcx }\n+        ExtraInfo { id: ExtraInfoId::Hir(hir_id), sp, tcx }\n     }\n \n     crate fn new_did(tcx: TyCtxt<'tcx>, did: DefId, sp: Span) -> ExtraInfo<'tcx> {\n-        ExtraInfo { hir_id: None, item_did: Some(did), sp, tcx }\n+        ExtraInfo { id: ExtraInfoId::Def(did), sp, tcx }\n     }\n \n     fn error_invalid_codeblock_attr(&self, msg: &str, help: &str) {\n-        let hir_id = match (self.hir_id, self.item_did) {\n-            (Some(h), _) => h,\n-            (None, Some(item_did)) => {\n+        let hir_id = match self.id {\n+            ExtraInfoId::Hir(hir_id) => hir_id,\n+            ExtraInfoId::Def(item_did) => {\n                 match item_did.as_local() {\n                     Some(item_did) => self.tcx.hir().local_def_id_to_hir_id(item_did),\n                     None => {\n@@ -717,7 +721,6 @@ impl<'tcx> ExtraInfo<'tcx> {\n                     }\n                 }\n             }\n-            (None, None) => return,\n         };\n         self.tcx.struct_span_lint_hir(\n             crate::lint::INVALID_CODEBLOCK_ATTRIBUTES,"}]}