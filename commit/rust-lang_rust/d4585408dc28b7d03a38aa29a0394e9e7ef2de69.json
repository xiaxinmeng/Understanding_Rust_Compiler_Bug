{"sha": "d4585408dc28b7d03a38aa29a0394e9e7ef2de69", "node_id": "C_kwDOAAsO6NoAKGQ0NTg1NDA4ZGMyOGI3ZDAzYTM4YWEyOWEwMzk0ZTllN2VmMmRlNjk", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-01-30T10:53:11Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-01-30T10:53:11Z"}, "message": "Split `has_allow_dead_code_or_lang_attr` into sub functions", "tree": {"sha": "65ff606f8bc1cc74bbc8f2c6eef45efe219dc433", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65ff606f8bc1cc74bbc8f2c6eef45efe219dc433"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4585408dc28b7d03a38aa29a0394e9e7ef2de69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4585408dc28b7d03a38aa29a0394e9e7ef2de69", "html_url": "https://github.com/rust-lang/rust/commit/d4585408dc28b7d03a38aa29a0394e9e7ef2de69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4585408dc28b7d03a38aa29a0394e9e7ef2de69/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f55b0022db8dccc6aa6bf3f650b562eaec0fdc54", "url": "https://api.github.com/repos/rust-lang/rust/commits/f55b0022db8dccc6aa6bf3f650b562eaec0fdc54", "html_url": "https://github.com/rust-lang/rust/commit/f55b0022db8dccc6aa6bf3f650b562eaec0fdc54"}], "stats": {"total": 34, "additions": 18, "deletions": 16}, "files": [{"sha": "c061787c30d2dfd18164ae600e7f56dcad102f28", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d4585408dc28b7d03a38aa29a0394e9e7ef2de69/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4585408dc28b7d03a38aa29a0394e9e7ef2de69/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=d4585408dc28b7d03a38aa29a0394e9e7ef2de69", "patch": "@@ -459,30 +459,32 @@ impl<'tcx> Visitor<'tcx> for MarkSymbolVisitor<'tcx> {\n }\n \n fn has_allow_dead_code_or_lang_attr(tcx: TyCtxt<'_>, def_id: LocalDefId) -> bool {\n-    if tcx.has_attr(def_id.to_def_id(), sym::lang) {\n-        return true;\n+    fn has_lang_attr(tcx: TyCtxt<'_>, def_id: LocalDefId) -> bool {\n+        tcx.has_attr(def_id.to_def_id(), sym::lang)\n+            // Stable attribute for #[lang = \"panic_impl\"]\n+            || tcx.has_attr(def_id.to_def_id(), sym::panic_handler)\n     }\n \n-    // Stable attribute for #[lang = \"panic_impl\"]\n-    if tcx.has_attr(def_id.to_def_id(), sym::panic_handler) {\n-        return true;\n+    fn has_allow_dead_code(tcx: TyCtxt<'_>, def_id: LocalDefId) -> bool {\n+        let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n+        tcx.lint_level_at_node(lint::builtin::DEAD_CODE, hir_id).0 == lint::Allow\n     }\n \n-    if tcx.def_kind(def_id).has_codegen_attrs() {\n-        let cg_attrs = tcx.codegen_fn_attrs(def_id);\n+    fn has_used_like_attr(tcx: TyCtxt<'_>, def_id: LocalDefId) -> bool {\n+        tcx.def_kind(def_id).has_codegen_attrs() && {\n+            let cg_attrs = tcx.codegen_fn_attrs(def_id);\n \n-        // #[used], #[no_mangle], #[export_name], etc also keeps the item alive\n-        // forcefully, e.g., for placing it in a specific section.\n-        if cg_attrs.contains_extern_indicator()\n-            || cg_attrs.flags.contains(CodegenFnAttrFlags::USED)\n-            || cg_attrs.flags.contains(CodegenFnAttrFlags::USED_LINKER)\n-        {\n-            return true;\n+            // #[used], #[no_mangle], #[export_name], etc also keeps the item alive\n+            // forcefully, e.g., for placing it in a specific section.\n+            cg_attrs.contains_extern_indicator()\n+                || cg_attrs.flags.contains(CodegenFnAttrFlags::USED)\n+                || cg_attrs.flags.contains(CodegenFnAttrFlags::USED_LINKER)\n         }\n     }\n \n-    let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n-    tcx.lint_level_at_node(lint::builtin::DEAD_CODE, hir_id).0 == lint::Allow\n+    has_lang_attr(tcx, def_id)\n+        || has_used_like_attr(tcx, def_id)\n+        || has_allow_dead_code(tcx, def_id)\n }\n \n // These check_* functions seeds items that"}]}