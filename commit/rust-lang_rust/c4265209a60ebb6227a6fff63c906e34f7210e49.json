{"sha": "c4265209a60ebb6227a6fff63c906e34f7210e49", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0MjY1MjA5YTYwZWJiNjIyN2E2ZmZmNjNjOTA2ZTM0ZjcyMTBlNDk=", "commit": {"author": {"name": "Lindsey Kuper", "email": "lkuper@mozilla.com", "date": "2011-07-15T22:33:40Z"}, "committer": {"name": "Lindsey Kuper", "email": "lkuper@mozilla.com", "date": "2011-07-15T22:33:40Z"}, "message": "More tests for anonymous objects.  Issues #702, #703.", "tree": {"sha": "11a9c0800030bbeeb3f4544efa5820532f348674", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11a9c0800030bbeeb3f4544efa5820532f348674"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4265209a60ebb6227a6fff63c906e34f7210e49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4265209a60ebb6227a6fff63c906e34f7210e49", "html_url": "https://github.com/rust-lang/rust/commit/c4265209a60ebb6227a6fff63c906e34f7210e49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4265209a60ebb6227a6fff63c906e34f7210e49/comments", "author": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c610d027d9a0bc196d3449cb482c26b601853f0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c610d027d9a0bc196d3449cb482c26b601853f0a", "html_url": "https://github.com/rust-lang/rust/commit/c610d027d9a0bc196d3449cb482c26b601853f0a"}], "stats": {"total": 118, "additions": 118, "deletions": 0}, "files": [{"sha": "d0e61ef99f887035f1816a8906322754f4051a46", "filename": "src/test/compile-fail/anon-obj-overloading-wrong-type.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c4265209a60ebb6227a6fff63c906e34f7210e49/src%2Ftest%2Fcompile-fail%2Fanon-obj-overloading-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4265209a60ebb6227a6fff63c906e34f7210e49/src%2Ftest%2Fcompile-fail%2Fanon-obj-overloading-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fanon-obj-overloading-wrong-type.rs?ref=c4265209a60ebb6227a6fff63c906e34f7210e49", "patch": "@@ -0,0 +1,29 @@\n+//xfail-stage0\n+//xfail-stage1\n+//xfail-stage2\n+use std;\n+\n+fn main() {\n+\n+    obj a() {\n+        fn foo() -> int {\n+            ret 2;\n+        }\n+        fn bar() -> int {\n+            ret self.foo();\n+        }\n+    }\n+\n+    auto my_a = a();\n+\n+    // This compiles and shouldn't.  You should only be able to\n+    // overload a method with one of the same type.  Issue #703.\n+    auto my_b = obj() {\n+        fn foo() -> str {\n+            ret \"hello\";\n+        }\n+        with my_a\n+    };\n+\n+    log_err my_b.foo();\n+}"}, {"sha": "e7d8a4b172f0b631866b392ef9516159b52a7b00", "filename": "src/test/run-pass/anon-obj-backwarding.rs", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/c4265209a60ebb6227a6fff63c906e34f7210e49/src%2Ftest%2Frun-pass%2Fanon-obj-backwarding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4265209a60ebb6227a6fff63c906e34f7210e49/src%2Ftest%2Frun-pass%2Fanon-obj-backwarding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fanon-obj-backwarding.rs?ref=c4265209a60ebb6227a6fff63c906e34f7210e49", "patch": "@@ -0,0 +1,65 @@\n+//xfail-stage0\n+//xfail-stage1\n+//xfail-stage2\n+use std;\n+\n+fn main() {\n+\n+    obj inner() {\n+        fn a() -> int {\n+            ret 2;\n+        }\n+        fn m() -> uint {\n+            ret 3u;\n+        }\n+        fn z() -> uint {\n+            ret self.m();\n+        }\n+    }\n+\n+    auto my_inner = inner();\n+\n+    auto my_outer = obj() {\n+        fn b() -> uint {\n+            ret 5u;\n+        }\n+        fn n() -> str {\n+            ret \"world!\";\n+        }\n+        with my_inner\n+    };\n+\n+    log_err my_inner.z();\n+    assert (my_inner.z() == 3u);\n+    log_err my_outer.z();\n+    assert (my_outer.z() == 3u);\n+}\n+\n+/*\n+   Here, when we make the self-call to self.m() in inner, we're going\n+   back through the outer \"self\".  That outer \"self\" has 5 methods in\n+   its vtable: a, b, m, n, z.  But the method z has already been\n+   compiled, and at the time it was compiled, it expected \"self\" to\n+   only have three methods in its vtable: a, m, and z.  So, the method\n+   z thinks that \"self.m()\" means \"look up method #1 (indexing from 0)\n+   in my vtable and call it\".  That means that it'll call method #1 on\n+   the larger vtable that it thinks is \"self\", and method #1 at that\n+   point is b.\n+\n+   So, when we call my_inner.z(), we get 3, which is what we'd\n+   expect.  When we call my_outer.z(), we should also get 3, because\n+   at no point is z being overridden.\n+\n+   To fix this bug, we need to add a second level of forwarding\n+   functions (let's call them \"backwarding functions\") on the inner\n+   object.  Every time an object is extended with another object, we\n+   have to rewrite the inner object's vtable to account for the fact\n+   that future self-calls will get a larger object.  The inner\n+   object's vtable will need to have five slots, too.  The ones for b\n+   and n will point right back at the outer object.  (These are the\n+   \"backwarding\" ones.)  And the ones for a, m, and z will point at\n+   the original, real vtable for inner.\n+\n+   Adding support for this is issue #702.\n+\n+*/"}, {"sha": "1b40c0484d244314b3ed05ef79bb2c434d653ac0", "filename": "src/test/run-pass/anon-obj-overloading-reduced.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c4265209a60ebb6227a6fff63c906e34f7210e49/src%2Ftest%2Frun-pass%2Fanon-obj-overloading-reduced.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4265209a60ebb6227a6fff63c906e34f7210e49/src%2Ftest%2Frun-pass%2Fanon-obj-overloading-reduced.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fanon-obj-overloading-reduced.rs?ref=c4265209a60ebb6227a6fff63c906e34f7210e49", "patch": "@@ -0,0 +1,24 @@\n+//xfail-stage0\n+//xfail-stage1\n+//xfail-stage2\n+\n+// Reduced test case for issue #543.\n+fn main() {\n+\n+    obj a() {\n+        fn foo() -> int {\n+            ret 2;\n+        }\n+    }\n+\n+    auto my_a = a();\n+\n+    auto my_b = obj() {\n+        fn foo() -> int {\n+            ret 3;\n+        }\n+        with my_a\n+    };\n+\n+    assert (my_b.foo() == 3);\n+}"}]}