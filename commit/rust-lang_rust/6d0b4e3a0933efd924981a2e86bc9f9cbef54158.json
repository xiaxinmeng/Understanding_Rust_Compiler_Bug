{"sha": "6d0b4e3a0933efd924981a2e86bc9f9cbef54158", "node_id": "C_kwDOAAsO6NoAKDZkMGI0ZTNhMDkzM2VmZDkyNDk4MWEyZTg2YmM5ZjljYmVmNTQxNTg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-25T18:36:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-25T18:36:50Z"}, "message": "Auto merge of #9945 - kraktus:uninlined_multiple_lines, r=llogiq\n\nRe-enable `uninlined_format_args` on multiline `format!`\n\nfix https://github.com/rust-lang/rust-clippy/issues/9719\n\nThere was an issue with the code suggestion which can be sometimes completely broken (fortunately when applied it's valid), so we do not show it.\n\nchangelog: [`uninlined_format_args`] re-enable for multiline format expression, but do not show the literal code suggestion in those cases", "tree": {"sha": "62687280aaf7b32a5d853ee8e79bc5ce6f8f49cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62687280aaf7b32a5d853ee8e79bc5ce6f8f49cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d0b4e3a0933efd924981a2e86bc9f9cbef54158", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d0b4e3a0933efd924981a2e86bc9f9cbef54158", "html_url": "https://github.com/rust-lang/rust/commit/6d0b4e3a0933efd924981a2e86bc9f9cbef54158", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d0b4e3a0933efd924981a2e86bc9f9cbef54158/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08a80d3a8b640a54a5030fe62ae7652602ecc4f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/08a80d3a8b640a54a5030fe62ae7652602ecc4f8", "html_url": "https://github.com/rust-lang/rust/commit/08a80d3a8b640a54a5030fe62ae7652602ecc4f8"}, {"sha": "2fd10bc59b2c4c39691a1a9ec9de318a01cbf60c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fd10bc59b2c4c39691a1a9ec9de318a01cbf60c", "html_url": "https://github.com/rust-lang/rust/commit/2fd10bc59b2c4c39691a1a9ec9de318a01cbf60c"}], "stats": {"total": 91, "additions": 58, "deletions": 33}, "files": [{"sha": "fd3ce2f3d6cd6ab503011cfe479a104abcb63a86", "filename": "clippy_lints/src/format_args.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6d0b4e3a0933efd924981a2e86bc9f9cbef54158/clippy_lints%2Fsrc%2Fformat_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0b4e3a0933efd924981a2e86bc9f9cbef54158/clippy_lints%2Fsrc%2Fformat_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat_args.rs?ref=6d0b4e3a0933efd924981a2e86bc9f9cbef54158", "patch": "@@ -9,7 +9,10 @@ use clippy_utils::source::snippet_opt;\n use clippy_utils::ty::{implements_trait, is_type_diagnostic_item};\n use if_chain::if_chain;\n use itertools::Itertools;\n-use rustc_errors::Applicability;\n+use rustc_errors::{\n+    Applicability,\n+    SuggestionStyle::{CompletelyHidden, ShowCode},\n+};\n use rustc_hir::{Expr, ExprKind, HirId, QPath};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::ty::adjustment::{Adjust, Adjustment};\n@@ -286,18 +289,22 @@ fn check_uninlined_args(cx: &LateContext<'_>, args: &FormatArgsExpn<'_>, call_si\n         return;\n     }\n \n-    // Temporarily ignore multiline spans: https://github.com/rust-lang/rust/pull/102729#discussion_r988704308\n-    if fixes.iter().any(|(span, _)| cx.sess().source_map().is_multiline(*span)) {\n-        return;\n-    }\n+    // multiline span display suggestion is sometimes broken: https://github.com/rust-lang/rust/pull/102729#discussion_r988704308\n+    // in those cases, make the code suggestion hidden\n+    let multiline_fix = fixes.iter().any(|(span, _)| cx.sess().source_map().is_multiline(*span));\n \n     span_lint_and_then(\n         cx,\n         UNINLINED_FORMAT_ARGS,\n         call_site,\n         \"variables can be used directly in the `format!` string\",\n         |diag| {\n-            diag.multipart_suggestion(\"change this to\", fixes, Applicability::MachineApplicable);\n+            diag.multipart_suggestion_with_style(\n+                \"change this to\",\n+                fixes,\n+                Applicability::MachineApplicable,\n+                if multiline_fix { CompletelyHidden } else { ShowCode },\n+            );\n         },\n     );\n }"}, {"sha": "09967f317f891e4e05153c895db4cf8cc605a4d7", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6d0b4e3a0933efd924981a2e86bc9f9cbef54158/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0b4e3a0933efd924981a2e86bc9f9cbef54158/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=6d0b4e3a0933efd924981a2e86bc9f9cbef54158", "patch": "@@ -1005,14 +1005,12 @@ pub fn make_projection<'tcx>(\n \n             debug_assert!(\n                 generic_count == substs.len(),\n-                \"wrong number of substs for `{:?}`: found `{}` expected `{}`.\\n\\\n+                \"wrong number of substs for `{:?}`: found `{}` expected `{generic_count}`.\\n\\\n                     note: the expected parameters are: {:#?}\\n\\\n-                    the given arguments are: `{:#?}`\",\n+                    the given arguments are: `{substs:#?}`\",\n                 assoc_item.def_id,\n                 substs.len(),\n-                generic_count,\n                 params.map(GenericParamDefKind::descr).collect::<Vec<_>>(),\n-                substs,\n             );\n \n             if let Some((idx, (param, arg))) = params\n@@ -1030,14 +1028,11 @@ pub fn make_projection<'tcx>(\n             {\n                 debug_assert!(\n                     false,\n-                    \"mismatched subst type at index {}: expected a {}, found `{:?}`\\n\\\n+                    \"mismatched subst type at index {idx}: expected a {}, found `{arg:?}`\\n\\\n                         note: the expected parameters are {:#?}\\n\\\n-                        the given arguments are {:#?}\",\n-                    idx,\n+                        the given arguments are {substs:#?}\",\n                     param.descr(),\n-                    arg,\n-                    params.map(GenericParamDefKind::descr).collect::<Vec<_>>(),\n-                    substs,\n+                    params.map(GenericParamDefKind::descr).collect::<Vec<_>>()\n                 );\n             }\n         }"}, {"sha": "bd49f096072630309ef3b38ab333429135ef5e6f", "filename": "lintcheck/src/main.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6d0b4e3a0933efd924981a2e86bc9f9cbef54158/lintcheck%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0b4e3a0933efd924981a2e86bc9f9cbef54158/lintcheck%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lintcheck%2Fsrc%2Fmain.rs?ref=6d0b4e3a0933efd924981a2e86bc9f9cbef54158", "patch": "@@ -120,8 +120,8 @@ impl ClippyWarning {\n             format!(\"$CARGO_HOME/{}\", stripped.display())\n         } else {\n             format!(\n-                \"target/lintcheck/sources/{}-{}/{}\",\n-                crate_name, crate_version, span.file_name\n+                \"target/lintcheck/sources/{crate_name}-{crate_version}/{}\",\n+                span.file_name\n             )\n         };\n \n@@ -322,13 +322,13 @@ impl Crate {\n \n         if config.max_jobs == 1 {\n             println!(\n-                \"{}/{} {}% Linting {} {}\",\n-                index, total_crates_to_lint, perc, &self.name, &self.version\n+                \"{index}/{total_crates_to_lint} {perc}% Linting {} {}\",\n+                &self.name, &self.version\n             );\n         } else {\n             println!(\n-                \"{}/{} {}% Linting {} {} in target dir {:?}\",\n-                index, total_crates_to_lint, perc, &self.name, &self.version, thread_index\n+                \"{index}/{total_crates_to_lint} {perc}% Linting {} {} in target dir {thread_index:?}\",\n+                &self.name, &self.version\n             );\n         }\n \n@@ -398,8 +398,7 @@ impl Crate {\n             .output()\n             .unwrap_or_else(|error| {\n                 panic!(\n-                    \"Encountered error:\\n{:?}\\ncargo_clippy_path: {}\\ncrate path:{}\\n\",\n-                    error,\n+                    \"Encountered error:\\n{error:?}\\ncargo_clippy_path: {}\\ncrate path:{}\\n\",\n                     &cargo_clippy_path.display(),\n                     &self.path.display()\n                 );"}, {"sha": "ca56c95c23f403f354212cf3dc789934b677de65", "filename": "tests/ui/uninlined_format_args.fixed", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6d0b4e3a0933efd924981a2e86bc9f9cbef54158/tests%2Fui%2Funinlined_format_args.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/6d0b4e3a0933efd924981a2e86bc9f9cbef54158/tests%2Fui%2Funinlined_format_args.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinlined_format_args.fixed?ref=6d0b4e3a0933efd924981a2e86bc9f9cbef54158", "patch": "@@ -44,9 +44,7 @@ fn tester(fn_arg: i32) {\n     println!(\"val='{local_i32}'\"); // space+tab\n     println!(\"val='{local_i32}'\"); // tab+space\n     println!(\n-        \"val='{\n-    }'\",\n-        local_i32\n+        \"val='{local_i32}'\"\n     );\n     println!(\"{local_i32}\");\n     println!(\"{fn_arg}\");\n@@ -110,8 +108,7 @@ fn tester(fn_arg: i32) {\n     println!(\"{local_f64:width$.prec$}\");\n     println!(\"{local_f64:width$.prec$} {local_f64} {width} {prec}\");\n     println!(\n-        \"{0:1$.2$} {0:2$.1$} {1:0$.2$} {1:2$.0$} {2:0$.1$} {2:1$.0$}\",\n-        local_i32, width, prec,\n+        \"{local_i32:width$.prec$} {local_i32:prec$.width$} {width:local_i32$.prec$} {width:prec$.local_i32$} {prec:local_i32$.width$} {prec:width$.local_i32$}\",\n     );\n     println!(\n         \"{0:1$.2$} {0:2$.1$} {1:0$.2$} {1:2$.0$} {2:0$.1$} {2:1$.0$} {3}\",\n@@ -142,9 +139,7 @@ fn tester(fn_arg: i32) {\n     println!(no_param_str!(), local_i32);\n \n     println!(\n-        \"{}\",\n-        // comment with a comma , in it\n-        val,\n+        \"{val}\",\n     );\n     println!(\"{val}\");\n "}, {"sha": "1182d57ce9b7e066d0275e808d04d2364e08feaa", "filename": "tests/ui/uninlined_format_args.stderr", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/6d0b4e3a0933efd924981a2e86bc9f9cbef54158/tests%2Fui%2Funinlined_format_args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d0b4e3a0933efd924981a2e86bc9f9cbef54158/tests%2Fui%2Funinlined_format_args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinlined_format_args.stderr?ref=6d0b4e3a0933efd924981a2e86bc9f9cbef54158", "patch": "@@ -59,6 +59,16 @@ LL -     println!(\"val='{     }'\", local_i32); // tab+space\n LL +     println!(\"val='{local_i32}'\"); // tab+space\n    |\n \n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:46:5\n+   |\n+LL | /     println!(\n+LL | |         \"val='{\n+LL | |     }'\",\n+LL | |         local_i32\n+LL | |     );\n+   | |_____^\n+\n error: variables can be used directly in the `format!` string\n   --> $DIR/uninlined_format_args.rs:51:5\n    |\n@@ -767,6 +777,15 @@ LL -     println!(\"{:1$.2$} {0} {1} {2}\", local_f64, width, prec);\n LL +     println!(\"{local_f64:width$.prec$} {local_f64} {width} {prec}\");\n    |\n \n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:112:5\n+   |\n+LL | /     println!(\n+LL | |         \"{0:1$.2$} {0:2$.1$} {1:0$.2$} {1:2$.0$} {2:0$.1$} {2:1$.0$}\",\n+LL | |         local_i32, width, prec,\n+LL | |     );\n+   | |_____^\n+\n error: variables can be used directly in the `format!` string\n   --> $DIR/uninlined_format_args.rs:123:5\n    |\n@@ -815,6 +834,16 @@ LL -     println!(\"{}\", format!(\"{}\", local_i32));\n LL +     println!(\"{}\", format!(\"{local_i32}\"));\n    |\n \n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:144:5\n+   |\n+LL | /     println!(\n+LL | |         \"{}\",\n+LL | |         // comment with a comma , in it\n+LL | |         val,\n+LL | |     );\n+   | |_____^\n+\n error: variables can be used directly in the `format!` string\n   --> $DIR/uninlined_format_args.rs:149:5\n    |\n@@ -875,5 +904,5 @@ LL -     println!(\"expand='{}'\", local_i32);\n LL +     println!(\"expand='{local_i32}'\");\n    |\n \n-error: aborting due to 73 previous errors\n+error: aborting due to 76 previous errors\n "}]}