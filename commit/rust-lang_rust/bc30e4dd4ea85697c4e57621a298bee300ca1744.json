{"sha": "bc30e4dd4ea85697c4e57621a298bee300ca1744", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjMzBlNGRkNGVhODU2OTdjNGU1NzYyMWEyOThiZWUzMDBjYTE3NDQ=", "commit": {"author": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-04-08T11:22:19Z"}, "committer": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-04-10T11:13:54Z"}, "message": "librustc_middle: return LocalDefId instead of DefId in opt_local_def_id_from_node_id", "tree": {"sha": "f7047acc172ff17b5d232b1f189ae446de09ccc7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7047acc172ff17b5d232b1f189ae446de09ccc7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc30e4dd4ea85697c4e57621a298bee300ca1744", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc30e4dd4ea85697c4e57621a298bee300ca1744", "html_url": "https://github.com/rust-lang/rust/commit/bc30e4dd4ea85697c4e57621a298bee300ca1744", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc30e4dd4ea85697c4e57621a298bee300ca1744/comments", "author": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96d77f0e5f103612d62b85938aacfb33f5768433", "url": "https://api.github.com/repos/rust-lang/rust/commits/96d77f0e5f103612d62b85938aacfb33f5768433", "html_url": "https://github.com/rust-lang/rust/commit/96d77f0e5f103612d62b85938aacfb33f5768433"}], "stats": {"total": 30, "additions": 16, "deletions": 14}, "files": [{"sha": "343afab154b44d4afbc71c9bb92a1c5a5772e40d", "filename": "src/librustc_middle/hir/map/mod.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bc30e4dd4ea85697c4e57621a298bee300ca1744/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc30e4dd4ea85697c4e57621a298bee300ca1744/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs?ref=bc30e4dd4ea85697c4e57621a298bee300ca1744", "patch": "@@ -160,14 +160,16 @@ impl<'hir> Map<'hir> {\n     // FIXME(eddyb) this function can and should return `LocalDefId`.\n     #[inline]\n     pub fn local_def_id_from_node_id(&self, node: NodeId) -> DefId {\n-        self.opt_local_def_id_from_node_id(node).unwrap_or_else(|| {\n-            let hir_id = self.node_id_to_hir_id(node);\n-            bug!(\n-                \"local_def_id_from_node_id: no entry for `{}`, which has a map of `{:?}`\",\n-                node,\n-                self.find_entry(hir_id)\n-            )\n-        })\n+        self.opt_local_def_id_from_node_id(node)\n+            .unwrap_or_else(|| {\n+                let hir_id = self.node_id_to_hir_id(node);\n+                bug!(\n+                    \"local_def_id_from_node_id: no entry for `{}`, which has a map of `{:?}`\",\n+                    node,\n+                    self.find_entry(hir_id)\n+                )\n+            })\n+            .to_def_id()\n     }\n \n     // FIXME(eddyb) this function can and should return `LocalDefId`.\n@@ -185,12 +187,12 @@ impl<'hir> Map<'hir> {\n     #[inline]\n     pub fn opt_local_def_id(&self, hir_id: HirId) -> Option<DefId> {\n         let node_id = self.hir_id_to_node_id(hir_id);\n-        self.opt_local_def_id_from_node_id(node_id)\n+        Some(self.opt_local_def_id_from_node_id(node_id)?.to_def_id())\n     }\n \n     #[inline]\n-    pub fn opt_local_def_id_from_node_id(&self, node: NodeId) -> Option<DefId> {\n-        Some(self.tcx.definitions.opt_local_def_id(node)?.to_def_id())\n+    pub fn opt_local_def_id_from_node_id(&self, node: NodeId) -> Option<LocalDefId> {\n+        self.tcx.definitions.opt_local_def_id(node)\n     }\n \n     #[inline]"}, {"sha": "dc557fe37428a312824b238e91e523deb70b6076", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc30e4dd4ea85697c4e57621a298bee300ca1744/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc30e4dd4ea85697c4e57621a298bee300ca1744/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=bc30e4dd4ea85697c4e57621a298bee300ca1744", "patch": "@@ -1134,7 +1134,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n             .tcx\n             .hir()\n             .opt_local_def_id_from_node_id(id)\n-            .and_then(|id| self.save_ctxt.tcx.parent(id))\n+            .and_then(|id| self.save_ctxt.tcx.parent(id.to_def_id()))\n             .map(id_from_def_id);\n \n         match use_tree.kind {\n@@ -1273,7 +1273,7 @@ impl<'l, 'tcx> Visitor<'l> for DumpVisitor<'l, 'tcx> {\n                         .tcx\n                         .hir()\n                         .opt_local_def_id_from_node_id(item.id)\n-                        .and_then(|id| self.save_ctxt.tcx.parent(id))\n+                        .and_then(|id| self.save_ctxt.tcx.parent(id.to_def_id()))\n                         .map(id_from_def_id);\n                     self.dumper.import(\n                         &Access { public: false, reachable: false },"}, {"sha": "717f3ac35e7f0edf00397278dd484c3f3133cc50", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc30e4dd4ea85697c4e57621a298bee300ca1744/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc30e4dd4ea85697c4e57621a298bee300ca1744/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=bc30e4dd4ea85697c4e57621a298bee300ca1744", "patch": "@@ -1073,7 +1073,7 @@ fn id_from_def_id(id: DefId) -> rls_data::Id {\n \n fn id_from_node_id(id: NodeId, scx: &SaveContext<'_, '_>) -> rls_data::Id {\n     let def_id = scx.tcx.hir().opt_local_def_id_from_node_id(id);\n-    def_id.map(id_from_def_id).unwrap_or_else(|| {\n+    def_id.map(|id| id_from_def_id(id.to_def_id())).unwrap_or_else(|| {\n         // Create a *fake* `DefId` out of a `NodeId` by subtracting the `NodeId`\n         // out of the maximum u32 value. This will work unless you have *billions*\n         // of definitions in a single crate (very unlikely to actually happen)."}]}