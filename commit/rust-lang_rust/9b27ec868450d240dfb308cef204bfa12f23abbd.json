{"sha": "9b27ec868450d240dfb308cef204bfa12f23abbd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliMjdlYzg2ODQ1MGQyNDBkZmIzMDhjZWYyMDRiZmExMmYyM2FiYmQ=", "commit": {"author": {"name": "gareth", "email": "gareth@gareth-N56VM.(none)", "date": "2013-01-22T22:52:20Z"}, "committer": {"name": "gareth", "email": "gareth@gareth-N56VM.(none)", "date": "2013-01-22T22:52:20Z"}, "message": "Add more constructors for managed vectors (as proposed in issue #4553)", "tree": {"sha": "000895b56f1f2b0b49ff90a557ada1ca6e1f6487", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/000895b56f1f2b0b49ff90a557ada1ca6e1f6487"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b27ec868450d240dfb308cef204bfa12f23abbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b27ec868450d240dfb308cef204bfa12f23abbd", "html_url": "https://github.com/rust-lang/rust/commit/9b27ec868450d240dfb308cef204bfa12f23abbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b27ec868450d240dfb308cef204bfa12f23abbd/comments", "author": null, "committer": null, "parents": [{"sha": "a8d076d2de662cb1a13cc1efa092e7202b129eae", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8d076d2de662cb1a13cc1efa092e7202b129eae", "html_url": "https://github.com/rust-lang/rust/commit/a8d076d2de662cb1a13cc1efa092e7202b129eae"}], "stats": {"total": 42, "additions": 42, "deletions": 0}, "files": [{"sha": "c6285f623779b4c2edebe6ba9ace1b58057055a0", "filename": "src/libcore/at_vec.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/9b27ec868450d240dfb308cef204bfa12f23abbd/src%2Flibcore%2Fat_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b27ec868450d240dfb308cef204bfa12f23abbd/src%2Flibcore%2Fat_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fat_vec.rs?ref=9b27ec868450d240dfb308cef204bfa12f23abbd", "patch": "@@ -150,6 +150,29 @@ pub pure fn from_elem<T: Copy>(n_elts: uint, t: T) -> @[T] {\n     }\n }\n \n+/**\n+ * Creates and initializes an immutable managed vector by moving all the\n+ * elements from an owned vector.\n+ */\n+fn from_owned<T>(v: ~[T]) -> @[T] {\n+    let mut av = @[];\n+    unsafe {\n+        raw::reserve(&mut av, v.len());\n+        do vec::consume(v) |_i, x| {\n+            raw::push(&mut av, x);\n+        }\n+        transmute(av)\n+    }\n+}\n+\n+/**\n+ * Creates and initializes an immutable managed vector by copying all the\n+ * elements of a slice.\n+ */\n+fn from_slice<T:Copy>(v: &[T]) -> @[T] {\n+    from_fn(v.len(), |i| v[i])\n+}\n+\n #[cfg(notest)]\n pub mod traits {\n     use at_vec::append;\n@@ -281,3 +304,22 @@ pub fn test() {\n pub fn append_test() {\n     assert @[1,2,3] + @[4,5,6] == @[1,2,3,4,5,6];\n }\n+\n+#[test]\n+pub fn test_from_owned() {\n+    assert from_owned::<int>(~[]) == @[];\n+    assert from_owned(~[true]) == @[true];\n+    assert from_owned(~[1, 2, 3, 4, 5]) == @[1, 2, 3, 4, 5];\n+    assert from_owned(~[~\"abc\", ~\"123\"]) == @[~\"abc\", ~\"123\"];\n+    assert from_owned(~[~[42]]) == @[~[42]];\n+}\n+\n+#[test]\n+pub fn test_from_slice() {\n+    assert from_slice::<int>([]) == @[];\n+    assert from_slice([true]) == @[true];\n+    assert from_slice([1, 2, 3, 4, 5]) == @[1, 2, 3, 4, 5];\n+    assert from_slice([@\"abc\", @\"123\"]) == @[@\"abc\", @\"123\"];\n+    assert from_slice([@[42]]) == @[@[42]];\n+}\n+"}]}