{"sha": "c5830a954e3be1cc19f7ec4700599fcb0030b1fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1ODMwYTk1NGUzYmUxY2MxOWY3ZWM0NzAwNTk5ZmNiMDAzMGIxZmQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-29T16:58:09Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-06-01T04:59:50Z"}, "message": "doc: Fix a number of broken links\n\ncc #14515", "tree": {"sha": "4dab5b67029e472d48b3927af9048648862380d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4dab5b67029e472d48b3927af9048648862380d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5830a954e3be1cc19f7ec4700599fcb0030b1fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5830a954e3be1cc19f7ec4700599fcb0030b1fd", "html_url": "https://github.com/rust-lang/rust/commit/c5830a954e3be1cc19f7ec4700599fcb0030b1fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5830a954e3be1cc19f7ec4700599fcb0030b1fd/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c669d7f749a1f714e00eb4cdcac3a68e2208951", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c669d7f749a1f714e00eb4cdcac3a68e2208951", "html_url": "https://github.com/rust-lang/rust/commit/8c669d7f749a1f714e00eb4cdcac3a68e2208951"}], "stats": {"total": 87, "additions": 52, "deletions": 35}, "files": [{"sha": "e2dae8c8b52a2ead59b1c8f1051c6ce62ca90d0e", "filename": "src/doc/complement-cheatsheet.md", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/c5830a954e3be1cc19f7ec4700599fcb0030b1fd/src%2Fdoc%2Fcomplement-cheatsheet.md", "raw_url": "https://github.com/rust-lang/rust/raw/c5830a954e3be1cc19f7ec4700599fcb0030b1fd/src%2Fdoc%2Fcomplement-cheatsheet.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fcomplement-cheatsheet.md?ref=c5830a954e3be1cc19f7ec4700599fcb0030b1fd", "patch": "@@ -4,7 +4,7 @@\n \n **Int to string**\n \n-Use [`ToStr`](../std/to_str/trait.ToStr.html).\n+Use [`ToStr`](std/to_str/trait.ToStr.html).\n \n ~~~\n let x: int = 42;\n@@ -13,8 +13,8 @@ let y: String = x.to_str().to_string();\n \n **String to int**\n \n-Use [`FromStr`](../std/from_str/trait.FromStr.html), and its helper function,\n-[`from_str`](../std/from_str/fn.from_str.html).\n+Use [`FromStr`](std/from_str/trait.FromStr.html), and its helper function,\n+[`from_str`](std/from_str/fn.from_str.html).\n \n ~~~\n let x: Option<int> = from_str(\"42\");\n@@ -35,8 +35,8 @@ let y: String = format!(\"{:X}\", x);   // uppercase hexadecimal\n \n **String to int, in non-base-10**\n \n-Use [`FromStrRadix`](../std/num/trait.FromStrRadix.html), and its helper\n-function, [`from_str_radix`](../std/num/fn.from_str_radix.html).\n+Use [`FromStrRadix`](std/num/trait.FromStrRadix.html), and its helper\n+function, [`from_str_radix`](std/num/fn.from_str_radix.html).\n \n ~~~\n use std::num;\n@@ -48,7 +48,7 @@ let y: i64 = x.unwrap();\n **Vector of Bytes to String**\n \n To return a Borrowed String Slice (&str) use the str helper function\n-[`from_utf8`](../std/str/fn.from_utf8.html).\n+[`from_utf8`](std/str/fn.from_utf8.html).\n \n ~~~\n use std::str;\n@@ -58,7 +58,7 @@ let x: &str = str::from_utf8(bytes).unwrap();\n ~~~\n \n To return an Owned String use the str helper function\n-[`from_utf8_owned`](../std/str/fn.from_utf8_owned.html).\n+[`from_utf8_owned`](std/str/fn.from_utf8_owned.html).\n \n ~~~\n use std::str;\n@@ -68,8 +68,8 @@ let x: Option<String> =\n let y: String = x.unwrap();\n ~~~\n \n-To return a [`MaybeOwned`](../std/str/enum.MaybeOwned.html) use the str helper\n-function [`from_utf8_lossy`](../std/str/fn.from_utf8_owned.html).\n+To return a [`MaybeOwned`](std/str/type.MaybeOwned.html) use the str helper\n+function [`from_utf8_lossy`](std/str/fn.from_utf8_owned.html).\n This function also replaces non-valid utf-8 sequences with U+FFFD replacement\n character.\n \n@@ -85,11 +85,11 @@ let y = str::from_utf8_lossy(x);\n ## How do I read from a file?\n \n Use\n-[`File::open`](../std/io/fs/struct.File.html#method.open)\n+[`File::open`](std/io/fs/struct.File.html#method.open)\n to create a\n-[`File`](../std/io/fs/struct.File.html)\n+[`File`](std/io/fs/struct.File.html)\n struct, which implements the\n-[`Reader`](../std/io/trait.Reader.html)\n+[`Reader`](std/io/trait.Reader.html)\n trait.\n \n ~~~ {.ignore}\n@@ -103,7 +103,8 @@ let reader : File = File::open(&path).unwrap_or_else(on_error);\n \n ## How do I iterate over the lines in a file?\n \n-Use the [`lines`](../std/io/trait.Buffer.html#method.lines) method on a [`BufferedReader`](../std/io/buffered/struct.BufferedReader.html).\n+Use the [`lines`](std/io/trait.Buffer.html#method.lines) method on a\n+[`BufferedReader`](std/io/struct.BufferedReader.html).\n \n ~~~\n use std::io::BufferedReader;\n@@ -121,7 +122,7 @@ for line in reader.lines() {\n \n ## How do I search for a substring?\n \n-Use the [`find_str`](../std/str/trait.StrSlice.html#tymethod.find_str) method.\n+Use the [`find_str`](std/str/trait.StrSlice.html#tymethod.find_str) method.\n \n ~~~\n let str = \"Hello, this is some random string\";\n@@ -132,7 +133,7 @@ let index: Option<uint> = str.find_str(\"rand\");\n \n ## How do I get the length of a vector?\n \n-The [`Container`](../std/container/trait.Container.html) trait provides the `len` method.\n+The [`Container`](std/container/trait.Container.html) trait provides the `len` method.\n \n ~~~\n let u: Vec<u32> = vec![0, 1, 2];\n@@ -144,7 +145,7 @@ println!(\"u: {}, v: {}, w: {}\", u.len(), v.len(), w.len()); // 3, 4, 5\n \n ## How do I iterate over a vector?\n \n-Use the [`iter`](../std/vec/trait.ImmutableVector.html#tymethod.iter) method.\n+Use the [`iter`](std/slice/trait.ImmutableVector.html#tymethod.iter) method.\n \n ~~~\n let values: Vec<int> = vec![1, 2, 3, 4, 5];\n@@ -153,9 +154,9 @@ for value in values.iter() {  // value: &int\n }\n ~~~\n \n-(See also [`mut_iter`](../std/vec/trait.MutableVector.html#tymethod.mut_iter)\n+(See also [`mut_iter`](std/slice/trait.MutableVector.html#tymethod.mut_iter)\n which yields `&mut int` and\n-[`move_iter`](../std/vec/trait.OwnedVector.html#tymethod.move_iter) which yields\n+[`move_iter`](std/slice/trait.OwnedVector.html#tymethod.move_iter) which yields\n `int` while consuming the `values` vector.)\n \n # Type system"}, {"sha": "c03c72ca35fd12e84fa5aec59cddd36774c6537b", "filename": "src/doc/complement-lang-faq.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c5830a954e3be1cc19f7ec4700599fcb0030b1fd/src%2Fdoc%2Fcomplement-lang-faq.md", "raw_url": "https://github.com/rust-lang/rust/raw/c5830a954e3be1cc19f7ec4700599fcb0030b1fd/src%2Fdoc%2Fcomplement-lang-faq.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fcomplement-lang-faq.md?ref=c5830a954e3be1cc19f7ec4700599fcb0030b1fd", "patch": "@@ -21,7 +21,7 @@ Some examples that demonstrate different aspects of the language:\n * The extra library's [json] module. Enums and pattern matching\n \n [sprocketnes]: https://github.com/pcwalton/sprocketnes\n-[hash]: https://github.com/mozilla/rust/blob/master/src/libstd/hash.rs\n+[hash]: https://github.com/mozilla/rust/blob/master/src/libstd/hash/mod.rs\n [HashMap]: https://github.com/mozilla/rust/blob/master/src/libcollections/hashmap.rs\n [json]: https://github.com/mozilla/rust/blob/master/src/libserialize/json.rs\n \n@@ -149,6 +149,6 @@ example we were setting RUST_LOG to the name of the hello crate. Multiple paths\n can be combined to control the exact logging you want to see. For example, when\n debugging linking in the compiler you might set\n `RUST_LOG=rustc::metadata::creader,rustc::util::filesearch,rustc::back::rpath`\n-For a full description see [the language reference][1].\n+For a full description see [the logging crate][1].\n \n-[1]:http://doc.rust-lang.org/doc/master/rust.html#logging-system\n+[1]:log/index.html"}, {"sha": "a85e889ed486ddda1ce5a9a0048ef00d0a3a55f9", "filename": "src/doc/guide-unsafe.md", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c5830a954e3be1cc19f7ec4700599fcb0030b1fd/src%2Fdoc%2Fguide-unsafe.md", "raw_url": "https://github.com/rust-lang/rust/raw/c5830a954e3be1cc19f7ec4700599fcb0030b1fd/src%2Fdoc%2Fguide-unsafe.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-unsafe.md?ref=c5830a954e3be1cc19f7ec4700599fcb0030b1fd", "patch": "@@ -499,9 +499,9 @@ shouldn't get triggered.\n \n The second of these two functions, `eh_personality`, is used by the failure\n mechanisms of the compiler. This is often mapped to GCC's personality function\n-(see the [libstd implementation](../std/rt/unwind/) for more information), but\n-crates which do not trigger failure can be assured that this function is never\n-called.\n+(see the [libstd implementation](std/rt/unwind/index.html) for more\n+information), but crates which do not trigger failure can be assured that this\n+function is never called.\n \n ## Using libcore\n \n@@ -511,7 +511,8 @@ called.\n With the above techniques, we've got a bare-metal executable running some Rust\n code. There is a good deal of functionality provided by the standard library,\n however, that is necessary to be productive in Rust. If the standard library is\n-not sufficient, then [libcore](../core/) is designed to be used instead.\n+not sufficient, then [libcore](../core/index.html) is designed to be used\n+instead.\n \n The core library has very few dependencies and is much more portable than the\n standard library itself. Additionally, the core library has most of the"}, {"sha": "511983da4f7f24a8bb07c6ad7d5da220acb2eb65", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c5830a954e3be1cc19f7ec4700599fcb0030b1fd/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5830a954e3be1cc19f7ec4700599fcb0030b1fd/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=c5830a954e3be1cc19f7ec4700599fcb0030b1fd", "patch": "@@ -97,6 +97,7 @@ pub mod arc;\n pub mod rc;\n \n #[cfg(not(test))]\n+#[doc(hidden)]\n mod std {\n     pub use core::fmt;\n     pub use core::option;"}, {"sha": "6aa07415e9cc71edb19a7666edf54414c53b434d", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5830a954e3be1cc19f7ec4700599fcb0030b1fd/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5830a954e3be1cc19f7ec4700599fcb0030b1fd/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=c5830a954e3be1cc19f7ec4700599fcb0030b1fd", "patch": "@@ -134,10 +134,12 @@ pub mod fmt;\n //        crate.\n mod should_not_exist;\n \n+#[doc(hidden)]\n mod core {\n     pub use failure;\n }\n \n+#[doc(hidden)]\n mod std {\n     pub use clone;\n     pub use cmp;"}, {"sha": "0762c7458d906c450c20da748fc673b6d284ef7f", "filename": "src/libcore/result.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5830a954e3be1cc19f7ec4700599fcb0030b1fd/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5830a954e3be1cc19f7ec4700599fcb0030b1fd/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=c5830a954e3be1cc19f7ec4700599fcb0030b1fd", "patch": "@@ -234,8 +234,8 @@\n //! similar and complementary: they are often employed to indicate a\n //! lack of a return value; and they are trivially converted between\n //! each other, so `Result`s are often handled by first converting to\n-//! `Option` with the [`ok`](enum.Result.html#method.ok) and\n-//! [`err`](enum.Result.html#method.ok) methods.\n+//! `Option` with the [`ok`](type.Result.html#method.ok) and\n+//! [`err`](type.Result.html#method.ok) methods.\n //!\n //! Whereas `Option` only indicates the lack of a value, `Result` is\n //! specifically for error reporting, and carries with it an error"}, {"sha": "54900ab0ab8416741a2dedcfa24385fc14c23cd0", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c5830a954e3be1cc19f7ec4700599fcb0030b1fd/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5830a954e3be1cc19f7ec4700599fcb0030b1fd/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=c5830a954e3be1cc19f7ec4700599fcb0030b1fd", "patch": "@@ -278,18 +278,24 @@ fn primitive_link(f: &mut fmt::Formatter,\n             needs_termination = true;\n         }\n         Some(&cnum) => {\n+            let path = m.paths.get(&ast::DefId {\n+                krate: cnum,\n+                node: ast::CRATE_NODE_ID,\n+            });\n             let loc = match *m.extern_locations.get(&cnum) {\n                 render::Remote(ref s) => Some(s.to_string()),\n                 render::Local => {\n                     let loc = current_location_key.get().unwrap();\n-                    Some((\"../\".repeat(loc.len())).to_string())\n+                    Some(\"../\".repeat(loc.len()))\n                 }\n                 render::Unknown => None,\n             };\n             match loc {\n-                Some(s) => {\n-                    try!(write!(f, \"<a href='{}/primitive.{}.html'>\",\n-                                s, prim.to_url_str()));\n+                Some(root) => {\n+                    try!(write!(f, \"<a href='{}{}/primitive.{}.html'>\",\n+                                root,\n+                                path.ref0().as_slice().head().unwrap(),\n+                                prim.to_url_str()));\n                     needs_termination = true;\n                 }\n                 None => {}"}, {"sha": "fa93a0261070efb11e5d79fe014d263de2ab46b6", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c5830a954e3be1cc19f7ec4700599fcb0030b1fd/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5830a954e3be1cc19f7ec4700599fcb0030b1fd/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=c5830a954e3be1cc19f7ec4700599fcb0030b1fd", "patch": "@@ -1380,8 +1380,13 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n                         if s.len() == 0 { return Ok(()); }\n                         try!(write!(f, \"<code> = </code>\"));\n                         if s.contains(\"\\n\") {\n-                            write!(f, \"<a href='{}'>[definition]</a>\",\n-                                   item.href())\n+                            match item.href() {\n+                                Some(url) => {\n+                                    write!(f, \"<a href='{}'>[definition]</a>\",\n+                                           url)\n+                                }\n+                                None => Ok(()),\n+                            }\n                         } else {\n                             write!(f, \"<code>{}</code>\", s.as_slice())\n                         }\n@@ -1547,8 +1552,8 @@ fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n     }\n     try!(write!(w, \"</ul>\"));\n     try!(write!(w, r#\"<script type=\"text/javascript\" async\n-                              src=\"{root_path}/implementors/{path}/\\\n-                                   {ty}.{name}.js\"></script>\"#,\n+                              src=\"{root_path}/implementors/{path}/{ty}.{name}.js\">\n+                      </script>\"#,\n                 root_path = Vec::from_elem(cx.current.len(), \"..\").connect(\"/\"),\n                 path = if ast_util::is_local(it.def_id) {\n                     cx.current.connect(\"/\")"}, {"sha": "4f565de6791d4f4aa5638c27516eca98444499de", "filename": "src/librustuv/homing.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c5830a954e3be1cc19f7ec4700599fcb0030b1fd/src%2Flibrustuv%2Fhoming.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5830a954e3be1cc19f7ec4700599fcb0030b1fd/src%2Flibrustuv%2Fhoming.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fhoming.rs?ref=c5830a954e3be1cc19f7ec4700599fcb0030b1fd", "patch": "@@ -82,6 +82,7 @@ pub fn local_id() -> uint {\n     }\n }\n \n+#[doc(hidden)]\n pub trait HomingIO {\n     fn home<'r>(&'r mut self) -> &'r mut HomeHandle;\n "}]}