{"sha": "059b68dd677808e14e560802d235ad40beeba71e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1OWI2OGRkNjc3ODA4ZTE0ZTU2MDgwMmQyMzVhZDQwYmVlYmE3MWU=", "commit": {"author": {"name": "jedel1043", "email": "jedel0124@gmail.com", "date": "2021-05-16T14:49:16Z"}, "committer": {"name": "jedel1043", "email": "jedel0124@gmail.com", "date": "2021-05-16T14:49:16Z"}, "message": "Implement Anonymous{Struct, Union} in the AST\n\nAdd unnamed_fields feature gate and gate unnamed fields on parsing", "tree": {"sha": "6527e4bbf4bb32c98f5c566a427fd176542569f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6527e4bbf4bb32c98f5c566a427fd176542569f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/059b68dd677808e14e560802d235ad40beeba71e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/059b68dd677808e14e560802d235ad40beeba71e", "html_url": "https://github.com/rust-lang/rust/commit/059b68dd677808e14e560802d235ad40beeba71e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/059b68dd677808e14e560802d235ad40beeba71e/comments", "author": {"login": "jedel1043", "id": 38230983, "node_id": "MDQ6VXNlcjM4MjMwOTgz", "avatar_url": "https://avatars.githubusercontent.com/u/38230983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedel1043", "html_url": "https://github.com/jedel1043", "followers_url": "https://api.github.com/users/jedel1043/followers", "following_url": "https://api.github.com/users/jedel1043/following{/other_user}", "gists_url": "https://api.github.com/users/jedel1043/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedel1043/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedel1043/subscriptions", "organizations_url": "https://api.github.com/users/jedel1043/orgs", "repos_url": "https://api.github.com/users/jedel1043/repos", "events_url": "https://api.github.com/users/jedel1043/events{/privacy}", "received_events_url": "https://api.github.com/users/jedel1043/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jedel1043", "id": 38230983, "node_id": "MDQ6VXNlcjM4MjMwOTgz", "avatar_url": "https://avatars.githubusercontent.com/u/38230983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedel1043", "html_url": "https://github.com/jedel1043", "followers_url": "https://api.github.com/users/jedel1043/followers", "following_url": "https://api.github.com/users/jedel1043/following{/other_user}", "gists_url": "https://api.github.com/users/jedel1043/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedel1043/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedel1043/subscriptions", "organizations_url": "https://api.github.com/users/jedel1043/orgs", "repos_url": "https://api.github.com/users/jedel1043/repos", "events_url": "https://api.github.com/users/jedel1043/events{/privacy}", "received_events_url": "https://api.github.com/users/jedel1043/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8cf990c9b5c59f25c806fad9f4466f9d6509bbea", "url": "https://api.github.com/repos/rust-lang/rust/commits/8cf990c9b5c59f25c806fad9f4466f9d6509bbea", "html_url": "https://github.com/rust-lang/rust/commit/8cf990c9b5c59f25c806fad9f4466f9d6509bbea"}], "stats": {"total": 263, "additions": 232, "deletions": 31}, "files": [{"sha": "b3bac1d7ecdefd1525320faa61b892de9c572c30", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/059b68dd677808e14e560802d235ad40beeba71e/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059b68dd677808e14e560802d235ad40beeba71e/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=059b68dd677808e14e560802d235ad40beeba71e", "patch": "@@ -1861,6 +1861,10 @@ pub enum TyKind {\n     Never,\n     /// A tuple (`(A, B, C, D,...)`).\n     Tup(Vec<P<Ty>>),\n+    /// An anonymous struct type i.e. `struct { foo: Type }`\n+    AnonymousStruct(Vec<FieldDef>, bool),\n+    /// An anonymous union type i.e. `union { bar: Type }`\n+    AnonymousUnion(Vec<FieldDef>, bool),\n     /// A path (`module::module::...::Type`), optionally\n     /// \"qualified\", e.g., `<Vec<T> as SomeTrait>::SomeType`.\n     ///"}, {"sha": "071d41ea2b2c7c83718af8fd8b9b65cc307b9d2e", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/059b68dd677808e14e560802d235ad40beeba71e/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059b68dd677808e14e560802d235ad40beeba71e/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=059b68dd677808e14e560802d235ad40beeba71e", "patch": "@@ -484,6 +484,9 @@ pub fn noop_visit_ty<T: MutVisitor>(ty: &mut P<Ty>, vis: &mut T) {\n             visit_vec(bounds, |bound| vis.visit_param_bound(bound));\n         }\n         TyKind::MacCall(mac) => vis.visit_mac_call(mac),\n+        TyKind::AnonymousStruct(fields, ..) | TyKind::AnonymousUnion(fields, ..) => {\n+            fields.flat_map_in_place(|field| vis.flat_map_field_def(field));\n+        }\n     }\n     vis.visit_span(span);\n     visit_lazy_tts(tokens, vis);"}, {"sha": "f1a99bc51c96d0eb1c8de4be0d0b83de317104ec", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/059b68dd677808e14e560802d235ad40beeba71e/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059b68dd677808e14e560802d235ad40beeba71e/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=059b68dd677808e14e560802d235ad40beeba71e", "patch": "@@ -404,6 +404,9 @@ pub fn walk_ty<'a, V: Visitor<'a>>(visitor: &mut V, typ: &'a Ty) {\n         TyKind::Typeof(ref expression) => visitor.visit_anon_const(expression),\n         TyKind::Infer | TyKind::ImplicitSelf | TyKind::Err => {}\n         TyKind::MacCall(ref mac) => visitor.visit_mac_call(mac),\n+        TyKind::AnonymousStruct(ref fields, ..) | TyKind::AnonymousUnion(ref fields, ..) => {\n+            walk_list!(visitor, visit_field_def, fields)\n+        }\n         TyKind::Never | TyKind::CVarArgs => {}\n     }\n }"}, {"sha": "292643d6d7510821cdbf653455290170dda6bd86", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/059b68dd677808e14e560802d235ad40beeba71e/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059b68dd677808e14e560802d235ad40beeba71e/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=059b68dd677808e14e560802d235ad40beeba71e", "patch": "@@ -789,7 +789,10 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         }\n     }\n \n-    fn lower_field_def(&mut self, (index, f): (usize, &FieldDef)) -> hir::FieldDef<'hir> {\n+    pub(super) fn lower_field_def(\n+        &mut self,\n+        (index, f): (usize, &FieldDef),\n+    ) -> hir::FieldDef<'hir> {\n         let ty = if let TyKind::Path(ref qself, ref path) = f.ty.kind {\n             let t = self.lower_path_ty(\n                 &f.ty,"}, {"sha": "740dfc65df8c5c1e824fe966501730e32bb791e5", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/059b68dd677808e14e560802d235ad40beeba71e/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059b68dd677808e14e560802d235ad40beeba71e/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=059b68dd677808e14e560802d235ad40beeba71e", "patch": "@@ -1267,6 +1267,15 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         let kind = match t.kind {\n             TyKind::Infer => hir::TyKind::Infer,\n             TyKind::Err => hir::TyKind::Err,\n+            // FIXME(unnamed_fields): IMPLEMENTATION IN PROGRESS\n+            TyKind::AnonymousStruct(ref _fields, _recovered) => {\n+                self.sess.struct_span_err(t.span, \"anonymous structs are unimplemented\").emit();\n+                hir::TyKind::Err\n+            }\n+            TyKind::AnonymousUnion(ref _fields, _recovered) => {\n+                self.sess.struct_span_err(t.span, \"anonymous unions are unimplemented\").emit();\n+                hir::TyKind::Err\n+            }\n             TyKind::Slice(ref ty) => hir::TyKind::Slice(self.lower_ty(ty, itctx)),\n             TyKind::Ptr(ref mt) => hir::TyKind::Ptr(self.lower_mt(mt, itctx)),\n             TyKind::Rptr(ref region, ref mt) => {"}, {"sha": "4215d5c55a049d9a23620c4b27b769eef1988ed0", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/059b68dd677808e14e560802d235ad40beeba71e/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059b68dd677808e14e560802d235ad40beeba71e/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=059b68dd677808e14e560802d235ad40beeba71e", "patch": "@@ -725,6 +725,7 @@ pub fn check_crate(krate: &ast::Crate, sess: &Session) {\n         // involved, so we only emit errors where there are no other parsing errors.\n         gate_all!(destructuring_assignment, \"destructuring assignments are unstable\");\n     }\n+    gate_all!(unnamed_fields, \"unnamed fields are not yet fully implemented\");\n \n     // All uses of `gate_all!` below this point were added in #65742,\n     // and subsequently disabled (with the non-early gating readded)."}, {"sha": "da9d89745a824221b7207e2763eb4d86d0584123", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 33, "deletions": 17, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/059b68dd677808e14e560802d235ad40beeba71e/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059b68dd677808e14e560802d235ad40beeba71e/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=059b68dd677808e14e560802d235ad40beeba71e", "patch": "@@ -954,6 +954,14 @@ impl<'a> State<'a> {\n                 }\n                 self.pclose();\n             }\n+            ast::TyKind::AnonymousStruct(ref fields, ..) => {\n+                self.s.word(\"struct\");\n+                self.print_record_struct_body(fields, ty.span);\n+            }\n+            ast::TyKind::AnonymousUnion(ref fields, ..) => {\n+                self.s.word(\"union\");\n+                self.print_record_struct_body(fields, ty.span);\n+            }\n             ast::TyKind::Paren(ref typ) => {\n                 self.popen();\n                 self.print_type(typ);\n@@ -1389,6 +1397,29 @@ impl<'a> State<'a> {\n         }\n     }\n \n+    crate fn print_record_struct_body(\n+        &mut self,\n+        fields: &Vec<ast::FieldDef>,\n+        span: rustc_span::Span,\n+    ) {\n+        self.nbsp();\n+        self.bopen();\n+        self.hardbreak_if_not_bol();\n+\n+        for field in fields {\n+            self.hardbreak_if_not_bol();\n+            self.maybe_print_comment(field.span.lo());\n+            self.print_outer_attributes(&field.attrs);\n+            self.print_visibility(&field.vis);\n+            self.print_ident(field.ident.unwrap());\n+            self.word_nbsp(\":\");\n+            self.print_type(&field.ty);\n+            self.s.word(\",\");\n+        }\n+\n+        self.bclose(span)\n+    }\n+\n     crate fn print_struct(\n         &mut self,\n         struct_def: &ast::VariantData,\n@@ -1418,24 +1449,9 @@ impl<'a> State<'a> {\n                 self.end();\n                 self.end(); // Close the outer-box.\n             }\n-            ast::VariantData::Struct(..) => {\n+            ast::VariantData::Struct(ref fields, ..) => {\n                 self.print_where_clause(&generics.where_clause);\n-                self.nbsp();\n-                self.bopen();\n-                self.hardbreak_if_not_bol();\n-\n-                for field in struct_def.fields() {\n-                    self.hardbreak_if_not_bol();\n-                    self.maybe_print_comment(field.span.lo());\n-                    self.print_outer_attributes(&field.attrs);\n-                    self.print_visibility(&field.vis);\n-                    self.print_ident(field.ident.unwrap());\n-                    self.word_nbsp(\":\");\n-                    self.print_type(&field.ty);\n-                    self.s.word(\",\");\n-                }\n-\n-                self.bclose(span)\n+                self.print_record_struct_body(fields, span);\n             }\n         }\n     }"}, {"sha": "eb6abc00be32916080d049ac92984477dfa0dfe1", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/059b68dd677808e14e560802d235ad40beeba71e/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059b68dd677808e14e560802d235ad40beeba71e/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=059b68dd677808e14e560802d235ad40beeba71e", "patch": "@@ -668,6 +668,9 @@ declare_features! (\n     /// Allows specifying the as-needed link modifier\n     (active, native_link_modifiers_as_needed, \"1.53.0\", Some(81490), None),\n \n+    /// Allows unnamed fields of struct and union type\n+    (active, unnamed_fields, \"1.53.0\", Some(49804), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------\n@@ -701,6 +704,7 @@ pub const INCOMPLETE_FEATURES: &[Symbol] = &[\n     sym::native_link_modifiers_whole_archive,\n     sym::native_link_modifiers_as_needed,\n     sym::rustc_insignificant_dtor,\n+    sym::unnamed_fields,\n ];\n \n /// Some features are not allowed to be used together at the same time, if"}, {"sha": "c64fab0507c942636824149d7d5a6ea6e4c5e5c8", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/059b68dd677808e14e560802d235ad40beeba71e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059b68dd677808e14e560802d235ad40beeba71e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=059b68dd677808e14e560802d235ad40beeba71e", "patch": "@@ -1236,7 +1236,7 @@ impl<'a> Parser<'a> {\n         Ok((class_name, ItemKind::Union(vdata, generics)))\n     }\n \n-    fn parse_record_struct_body(\n+    pub(super) fn parse_record_struct_body(\n         &mut self,\n         adt_ty: &str,\n     ) -> PResult<'a, (Vec<FieldDef>, /* recovered */ bool)> {\n@@ -1470,19 +1470,25 @@ impl<'a> Parser<'a> {\n     fn parse_field_ident(&mut self, adt_ty: &str, lo: Span) -> PResult<'a, Ident> {\n         let (ident, is_raw) = self.ident_or_err()?;\n         if !is_raw && ident.is_reserved() {\n-            let err = if self.check_fn_front_matter(false) {\n-                let _ = self.parse_fn(&mut Vec::new(), |_| true, lo);\n-                let mut err = self.struct_span_err(\n-                    lo.to(self.prev_token.span),\n-                    &format!(\"functions are not allowed in {} definitions\", adt_ty),\n-                );\n-                err.help(\"unlike in C++, Java, and C#, functions are declared in `impl` blocks\");\n-                err.help(\"see https://doc.rust-lang.org/book/ch05-03-method-syntax.html for more information\");\n-                err\n+            if ident.name == kw::Underscore {\n+                self.sess.gated_spans.gate(sym::unnamed_fields, lo);\n             } else {\n-                self.expected_ident_found()\n-            };\n-            return Err(err);\n+                let err = if self.check_fn_front_matter(false) {\n+                    let _ = self.parse_fn(&mut Vec::new(), |_| true, lo);\n+                    let mut err = self.struct_span_err(\n+                        lo.to(self.prev_token.span),\n+                        &format!(\"functions are not allowed in {} definitions\", adt_ty),\n+                    );\n+                    err.help(\n+                        \"unlike in C++, Java, and C#, functions are declared in `impl` blocks\",\n+                    );\n+                    err.help(\"see https://doc.rust-lang.org/book/ch05-03-method-syntax.html for more information\");\n+                    err\n+                } else {\n+                    self.expected_ident_found()\n+                };\n+                return Err(err);\n+            }\n         }\n         self.bump();\n         Ok(ident)"}, {"sha": "89cf2d7876e1d9d523935bb3d9505f2425e7bc5e", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/059b68dd677808e14e560802d235ad40beeba71e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059b68dd677808e14e560802d235ad40beeba71e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=059b68dd677808e14e560802d235ad40beeba71e", "patch": "@@ -226,6 +226,19 @@ impl<'a> Parser<'a> {\n             }\n         } else if self.eat_keyword(kw::Impl) {\n             self.parse_impl_ty(&mut impl_dyn_multi)?\n+        } else if self.token.is_keyword(kw::Union)\n+            && self.look_ahead(1, |t| t == &token::OpenDelim(token::Brace))\n+        {\n+            self.bump();\n+            let (fields, recovered) = self.parse_record_struct_body(\"union\")?;\n+            let span = lo.to(self.prev_token.span);\n+            self.sess.gated_spans.gate(sym::unnamed_fields, span);\n+            TyKind::AnonymousUnion(fields, recovered)\n+        } else if self.eat_keyword(kw::Struct) {\n+            let (fields, recovered) = self.parse_record_struct_body(\"struct\")?;\n+            let span = lo.to(self.prev_token.span);\n+            self.sess.gated_spans.gate(sym::unnamed_fields, span);\n+            TyKind::AnonymousStruct(fields, recovered)\n         } else if self.is_explicit_dyn_type() {\n             self.parse_dyn_ty(&mut impl_dyn_multi)?\n         } else if self.eat_lt() {"}, {"sha": "24d2618f1b275ab2084f2b27f47cba6368b95f6f", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/059b68dd677808e14e560802d235ad40beeba71e/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059b68dd677808e14e560802d235ad40beeba71e/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=059b68dd677808e14e560802d235ad40beeba71e", "patch": "@@ -1269,6 +1269,7 @@ symbols! {\n         unix,\n         unlikely,\n         unmarked_api,\n+        unnamed_fields,\n         unpin,\n         unreachable,\n         unreachable_code,"}, {"sha": "bd815dbcc92424274e1cff1f4a7438247549a909", "filename": "src/test/ui/feature-gates/feature-gate-unnamed_fields.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/059b68dd677808e14e560802d235ad40beeba71e/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unnamed_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059b68dd677808e14e560802d235ad40beeba71e/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unnamed_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unnamed_fields.rs?ref=059b68dd677808e14e560802d235ad40beeba71e", "patch": "@@ -0,0 +1,27 @@\n+struct Foo {\n+    foo: u8,\n+    _: union { //~ ERROR unnamed fields are not yet fully implemented [E0658]\n+    //~^ ERROR unnamed fields are not yet fully implemented [E0658]\n+    //~| ERROR anonymous unions are unimplemented\n+        bar: u8,\n+        baz: u16\n+    }\n+}\n+\n+union Bar {\n+    foobar: u8,\n+    _: struct { //~ ERROR unnamed fields are not yet fully implemented [E0658]\n+    //~^ ERROR unnamed fields are not yet fully implemented [E0658]\n+    //~| ERROR anonymous structs are unimplemented\n+    //~| ERROR unions may not contain fields that need dropping [E0740]\n+        foobaz: u8,\n+        barbaz: u16\n+    }\n+}\n+\n+struct S;\n+struct Baz {\n+    _: S //~ ERROR unnamed fields are not yet fully implemented [E0658]\n+}\n+\n+fn main(){}"}, {"sha": "4f3ab85c987926247d167c1540fd64f883803586", "filename": "src/test/ui/feature-gates/feature-gate-unnamed_fields.stderr", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/059b68dd677808e14e560802d235ad40beeba71e/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unnamed_fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/059b68dd677808e14e560802d235ad40beeba71e/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unnamed_fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unnamed_fields.stderr?ref=059b68dd677808e14e560802d235ad40beeba71e", "patch": "@@ -0,0 +1,111 @@\n+error[E0658]: unnamed fields are not yet fully implemented\n+  --> $DIR/feature-gate-unnamed_fields.rs:3:5\n+   |\n+LL |     _: union {\n+   |     ^\n+   |\n+   = note: see issue #49804 <https://github.com/rust-lang/rust/issues/49804> for more information\n+   = help: add `#![feature(unnamed_fields)]` to the crate attributes to enable\n+\n+error[E0658]: unnamed fields are not yet fully implemented\n+  --> $DIR/feature-gate-unnamed_fields.rs:3:8\n+   |\n+LL |       _: union {\n+   |  ________^\n+LL | |\n+LL | |\n+LL | |         bar: u8,\n+LL | |         baz: u16\n+LL | |     }\n+   | |_____^\n+   |\n+   = note: see issue #49804 <https://github.com/rust-lang/rust/issues/49804> for more information\n+   = help: add `#![feature(unnamed_fields)]` to the crate attributes to enable\n+\n+error[E0658]: unnamed fields are not yet fully implemented\n+  --> $DIR/feature-gate-unnamed_fields.rs:13:5\n+   |\n+LL |     _: struct {\n+   |     ^\n+   |\n+   = note: see issue #49804 <https://github.com/rust-lang/rust/issues/49804> for more information\n+   = help: add `#![feature(unnamed_fields)]` to the crate attributes to enable\n+\n+error[E0658]: unnamed fields are not yet fully implemented\n+  --> $DIR/feature-gate-unnamed_fields.rs:13:8\n+   |\n+LL |       _: struct {\n+   |  ________^\n+LL | |\n+LL | |\n+LL | |\n+LL | |         foobaz: u8,\n+LL | |         barbaz: u16\n+LL | |     }\n+   | |_____^\n+   |\n+   = note: see issue #49804 <https://github.com/rust-lang/rust/issues/49804> for more information\n+   = help: add `#![feature(unnamed_fields)]` to the crate attributes to enable\n+\n+error[E0658]: unnamed fields are not yet fully implemented\n+  --> $DIR/feature-gate-unnamed_fields.rs:24:5\n+   |\n+LL |     _: S\n+   |     ^\n+   |\n+   = note: see issue #49804 <https://github.com/rust-lang/rust/issues/49804> for more information\n+   = help: add `#![feature(unnamed_fields)]` to the crate attributes to enable\n+\n+error: anonymous unions are unimplemented\n+  --> $DIR/feature-gate-unnamed_fields.rs:3:8\n+   |\n+LL |       _: union {\n+   |  ________^\n+LL | |\n+LL | |\n+LL | |         bar: u8,\n+LL | |         baz: u16\n+LL | |     }\n+   | |_____^\n+\n+error: anonymous structs are unimplemented\n+  --> $DIR/feature-gate-unnamed_fields.rs:13:8\n+   |\n+LL |       _: struct {\n+   |  ________^\n+LL | |\n+LL | |\n+LL | |\n+LL | |         foobaz: u8,\n+LL | |         barbaz: u16\n+LL | |     }\n+   | |_____^\n+\n+error[E0740]: unions may not contain fields that need dropping\n+  --> $DIR/feature-gate-unnamed_fields.rs:13:5\n+   |\n+LL | /     _: struct {\n+LL | |\n+LL | |\n+LL | |\n+LL | |         foobaz: u8,\n+LL | |         barbaz: u16\n+LL | |     }\n+   | |_____^\n+   |\n+note: `std::mem::ManuallyDrop` can be used to wrap the type\n+  --> $DIR/feature-gate-unnamed_fields.rs:13:5\n+   |\n+LL | /     _: struct {\n+LL | |\n+LL | |\n+LL | |\n+LL | |         foobaz: u8,\n+LL | |         barbaz: u16\n+LL | |     }\n+   | |_____^\n+\n+error: aborting due to 8 previous errors\n+\n+Some errors have detailed explanations: E0658, E0740.\n+For more information about an error, try `rustc --explain E0658`."}]}