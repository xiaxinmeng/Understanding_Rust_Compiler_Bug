{"sha": "b97334f65ed5092e0172fd2fa01fd6c47e5a1841", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5NzMzNGY2NWVkNTA5MmUwMTcyZmQyZmEwMWZkNmM0N2U1YTE4NDE=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-10-01T23:25:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-01T23:25:20Z"}, "message": "Rollup merge of #77375 - petrochenkov:inherext, r=oli-obk\n\nrustc_metadata: Do not forget to encode inherent impls for foreign types\n\nSo I tried to move FFI interface for LLVM from `rustc_codegen_llvm` to `rustc_llvm` and immediately encountered this fascinating issue.\n\nFixes https://github.com/rust-lang/rust/issues/46665.", "tree": {"sha": "b88484e709e983650e1a7958dd8a519af8ca4626", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b88484e709e983650e1a7958dd8a519af8ca4626"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b97334f65ed5092e0172fd2fa01fd6c47e5a1841", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfdmVhCRBK7hj4Ov3rIwAAdHIIAEKipHczKKvsjgvTka4Sf9pC\nnJg7UTLNBtAbXz9Q9gxfcB0dyD8nOxtclpijLE+DH8kdRse6jaM/i4SAfmS9CCBG\nc3AxAnXPmNObWebP80YyGjahloWuFgLaXTJ/d/7Bk/ZdV/0Awlf3TMe0GU4O2NoK\nOGp0Cm/7E5EiHJ32kFMeiWyt+9W4Owvf6Oj3NeTfATgJNzDsd+ePcKJN8MMX0oM2\nongtloSWRHptDV0RJ6zq7sh2qWUidsEMSLGpqRv0WXokEXvSjgKgHdj9PKU5QXf2\np1lScRWX1jSkfc8QU0L+E3p8fc/yAyJiQ/EA0ot9X28v24WxFd0rbUvwiaOKoew=\n=Y2w0\n-----END PGP SIGNATURE-----\n", "payload": "tree b88484e709e983650e1a7958dd8a519af8ca4626\nparent 55d0959328d2212c0b16906200bdde3dc8ec2cc5\nparent 384eb2691f53bb0cdeb17a5ccf73c83e861d9aa1\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1601594720 +0900\ncommitter GitHub <noreply@github.com> 1601594720 +0900\n\nRollup merge of #77375 - petrochenkov:inherext, r=oli-obk\n\nrustc_metadata: Do not forget to encode inherent impls for foreign types\n\nSo I tried to move FFI interface for LLVM from `rustc_codegen_llvm` to `rustc_llvm` and immediately encountered this fascinating issue.\n\nFixes https://github.com/rust-lang/rust/issues/46665.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b97334f65ed5092e0172fd2fa01fd6c47e5a1841", "html_url": "https://github.com/rust-lang/rust/commit/b97334f65ed5092e0172fd2fa01fd6c47e5a1841", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b97334f65ed5092e0172fd2fa01fd6c47e5a1841/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55d0959328d2212c0b16906200bdde3dc8ec2cc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/55d0959328d2212c0b16906200bdde3dc8ec2cc5", "html_url": "https://github.com/rust-lang/rust/commit/55d0959328d2212c0b16906200bdde3dc8ec2cc5"}, {"sha": "384eb2691f53bb0cdeb17a5ccf73c83e861d9aa1", "url": "https://api.github.com/repos/rust-lang/rust/commits/384eb2691f53bb0cdeb17a5ccf73c83e861d9aa1", "html_url": "https://github.com/rust-lang/rust/commit/384eb2691f53bb0cdeb17a5ccf73c83e861d9aa1"}], "stats": {"total": 33, "additions": 25, "deletions": 8}, "files": [{"sha": "f58a792ef585ee28a3576b3d2b99a619d8b34e8c", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b97334f65ed5092e0172fd2fa01fd6c47e5a1841/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b97334f65ed5092e0172fd2fa01fd6c47e5a1841/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=b97334f65ed5092e0172fd2fa01fd6c47e5a1841", "patch": "@@ -1753,6 +1753,7 @@ impl EncodeContext<'a, 'tcx> {\n         self.encode_const_stability(def_id);\n         self.encode_deprecation(def_id);\n         self.encode_item_type(def_id);\n+        self.encode_inherent_implementations(def_id);\n         if let hir::ForeignItemKind::Fn(..) = nitem.kind {\n             record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));\n             self.encode_variances_of(def_id);"}, {"sha": "a1efe181843b201a0c7ab1cf6c0ae7e7ed8f6aa1", "filename": "src/test/ui/extern/auxiliary/extern-types-inherent-impl.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b97334f65ed5092e0172fd2fa01fd6c47e5a1841/src%2Ftest%2Fui%2Fextern%2Fauxiliary%2Fextern-types-inherent-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b97334f65ed5092e0172fd2fa01fd6c47e5a1841/src%2Ftest%2Fui%2Fextern%2Fauxiliary%2Fextern-types-inherent-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fauxiliary%2Fextern-types-inherent-impl.rs?ref=b97334f65ed5092e0172fd2fa01fd6c47e5a1841", "patch": "@@ -0,0 +1,9 @@\n+#![feature(extern_types)]\n+\n+extern \"C\" {\n+    pub type CrossCrate;\n+}\n+\n+impl CrossCrate {\n+    pub fn foo(&self) {}\n+}"}, {"sha": "3f09ac7b8c38881e52da9cced831cd2cb0366c66", "filename": "src/test/ui/extern/extern-types-inherent-impl.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b97334f65ed5092e0172fd2fa01fd6c47e5a1841/src%2Ftest%2Fui%2Fextern%2Fextern-types-inherent-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b97334f65ed5092e0172fd2fa01fd6c47e5a1841/src%2Ftest%2Fui%2Fextern%2Fextern-types-inherent-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-types-inherent-impl.rs?ref=b97334f65ed5092e0172fd2fa01fd6c47e5a1841", "patch": "@@ -1,19 +1,26 @@\n-// run-pass\n-#![allow(dead_code)]\n // Test that inherent impls can be defined for extern types.\n \n+// check-pass\n+// aux-build:extern-types-inherent-impl.rs\n+\n #![feature(extern_types)]\n \n-extern {\n-    type A;\n+extern crate extern_types_inherent_impl;\n+use extern_types_inherent_impl::CrossCrate;\n+\n+extern \"C\" {\n+    type Local;\n }\n \n-impl A {\n-    fn foo(&self) { }\n+impl Local {\n+    fn foo(&self) {}\n }\n \n-fn use_foo(x: &A) {\n+fn use_foo(x: &Local, y: &CrossCrate) {\n+    Local::foo(x);\n     x.foo();\n+    CrossCrate::foo(y);\n+    y.foo();\n }\n \n-fn main() { }\n+fn main() {}"}]}