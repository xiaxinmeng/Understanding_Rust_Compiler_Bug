{"sha": "d316874c87e25669895c306658e15aa3746d66ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzMTY4NzRjODdlMjU2Njk4OTVjMzA2NjU4ZTE1YWEzNzQ2ZDY2YWI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-06-21T19:42:44Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2017-06-26T02:08:14Z"}, "message": "Update and fix a few tests", "tree": {"sha": "9ab96132aa38d62adb3098324caa9c209cf8134d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ab96132aa38d62adb3098324caa9c209cf8134d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d316874c87e25669895c306658e15aa3746d66ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d316874c87e25669895c306658e15aa3746d66ab", "html_url": "https://github.com/rust-lang/rust/commit/d316874c87e25669895c306658e15aa3746d66ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d316874c87e25669895c306658e15aa3746d66ab/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "302935ff2a169d57cdde78f17591e13e8aa47f9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/302935ff2a169d57cdde78f17591e13e8aa47f9e", "html_url": "https://github.com/rust-lang/rust/commit/302935ff2a169d57cdde78f17591e13e8aa47f9e"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "bd9a621c00c00a692f639c29171fb131b4ba1d68", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d316874c87e25669895c306658e15aa3746d66ab/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d316874c87e25669895c306658e15aa3746d66ab/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=d316874c87e25669895c306658e15aa3746d66ab", "patch": "@@ -687,7 +687,7 @@ mod tests {\n                     id: ast::DUMMY_NODE_ID,\n                     node: ast::ExprKind::Path(None, ast::Path {\n                         span: sp(0, 6),\n-                        segments: vec![ast::PathSegment::crate_root(),\n+                        segments: vec![ast::PathSegment::crate_root(sp(0, 2)),\n                                        str2seg(\"a\", 2, 3),\n                                        str2seg(\"b\", 5, 6)]\n                     }),"}, {"sha": "d993ba14a4ab562bfeafc858801b025088da3cb5", "filename": "src/libsyntax/util/parser_testing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d316874c87e25669895c306658e15aa3746d66ab/src%2Flibsyntax%2Futil%2Fparser_testing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d316874c87e25669895c306658e15aa3746d66ab/src%2Flibsyntax%2Futil%2Fparser_testing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fparser_testing.rs?ref=d316874c87e25669895c306658e15aa3746d66ab", "patch": "@@ -20,7 +20,7 @@ use std::iter::Peekable;\n /// Map a string to tts, using a made-up filename:\n pub fn string_to_stream(source_str: String) -> TokenStream {\n     let ps = ParseSess::new(FilePathMapping::empty());\n-    filemap_to_stream(&ps, ps.codemap().new_filemap(\"bogofile\".to_string(), source_str))\n+    filemap_to_stream(&ps, ps.codemap().new_filemap(\"bogofile\".to_string(), source_str), None)\n }\n \n /// Map string to parser (via tts)"}, {"sha": "e2c68a626f91e9b87d478a935cde7541ec7fe314", "filename": "src/test/run-pass-fulldeps/auxiliary/cond_plugin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d316874c87e25669895c306658e15aa3746d66ab/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcond_plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d316874c87e25669895c306658e15aa3746d66ab/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcond_plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcond_plugin.rs?ref=d316874c87e25669895c306658e15aa3746d66ab", "patch": "@@ -11,7 +11,7 @@\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]\n-#![feature(proc_macro, proc_macro_lib)]\n+#![feature(proc_macro)]\n \n extern crate proc_macro;\n \n@@ -23,7 +23,7 @@ pub fn cond(input: TokenStream) -> TokenStream {\n     let mut input = input.into_iter().peekable();\n     while let Some(tree) = input.next() {\n         let cond = match tree.kind {\n-            TokenNode::Sequence(_, cond) => cond,\n+            TokenNode::Group(_, cond) => cond,\n             _ => panic!(\"Invalid input\"),\n         };\n         let mut cond_trees = cond.clone().into_iter();\n@@ -33,7 +33,7 @@ pub fn cond(input: TokenStream) -> TokenStream {\n             panic!(\"Invalid macro usage in cond: {}\", cond);\n         }\n         let is_else = match test.kind {\n-            TokenNode::Word(word) => word.as_str() == \"else\",\n+            TokenNode::Term(word) => word.as_str() == \"else\",\n             _ => false,\n         };\n         conds.push(if is_else || input.peek().is_none() {"}, {"sha": "ec2ff0d1e2b8c81769fd777fa2ff9cfa7d243014", "filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/count_compound_ops.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d316874c87e25669895c306658e15aa3746d66ab/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fcount_compound_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d316874c87e25669895c306658e15aa3746d66ab/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fcount_compound_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fcount_compound_ops.rs?ref=d316874c87e25669895c306658e15aa3746d66ab", "patch": "@@ -15,7 +15,7 @@\n \n extern crate proc_macro;\n \n-use proc_macro::{TokenStream, TokenNode, OpKind, Literal, quote};\n+use proc_macro::{TokenStream, TokenNode, Spacing, Literal, quote};\n \n #[proc_macro]\n pub fn count_compound_ops(input: TokenStream) -> TokenStream {\n@@ -27,8 +27,8 @@ fn count_compound_ops_helper(input: TokenStream) -> u32 {\n     let mut count = 0;\n     for token in input {\n         match token.kind {\n-            TokenNode::Op(c, OpKind::Alone) => count += 1,\n-            TokenNode::Sequence(_, tokens) => count += count_compound_ops_helper(tokens),\n+            TokenNode::Op(c, Spacing::Alone) => count += 1,\n+            TokenNode::Group(_, tokens) => count += count_compound_ops_helper(tokens),\n             _ => {}\n         }\n     }"}]}