{"sha": "871a1e1cf8e58c51416954d3afac5d681a3d27eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3MWExZTFjZjhlNThjNTE0MTY5NTRkM2FmYWM1ZDY4MWEzZDI3ZWI=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-02-21T16:56:35Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-03-09T14:45:29Z"}, "message": "typeck: rename mk_assignty to coercion::try.", "tree": {"sha": "e6742f64334f33fdbd2e248f0a2738bab8f7df86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6742f64334f33fdbd2e248f0a2738bab8f7df86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/871a1e1cf8e58c51416954d3afac5d681a3d27eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/871a1e1cf8e58c51416954d3afac5d681a3d27eb", "html_url": "https://github.com/rust-lang/rust/commit/871a1e1cf8e58c51416954d3afac5d681a3d27eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/871a1e1cf8e58c51416954d3afac5d681a3d27eb/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b1bd80f3411abec5c6af2e0a9c1110f55d81e24", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b1bd80f3411abec5c6af2e0a9c1110f55d81e24", "html_url": "https://github.com/rust-lang/rust/commit/2b1bd80f3411abec5c6af2e0a9c1110f55d81e24"}], "stats": {"total": 23, "additions": 8, "deletions": 15}, "files": [{"sha": "087665663232421c8321f77efd7d09a685e5430b", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/871a1e1cf8e58c51416954d3afac5d681a3d27eb/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/871a1e1cf8e58c51416954d3afac5d681a3d27eb/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=871a1e1cf8e58c51416954d3afac5d681a3d27eb", "patch": "@@ -239,7 +239,7 @@ impl<'tcx> CastCheck<'tcx> {\n             (None, Some(t_cast)) => {\n                 if let ty::TyFnDef(_, _, f) = self.expr_ty.sty {\n                     // Attempt a coercion to a fn pointer type.\n-                    let res = coercion::mk_assignty(fcx, &self.expr,\n+                    let res = coercion::try(fcx, &self.expr,\n                         self.expr_ty, fcx.tcx().mk_ty(ty::TyFnPtr(f)));\n                     if !res.is_ok() {\n                         return Err(CastError::NonScalar);\n@@ -390,14 +390,7 @@ impl<'tcx> CastCheck<'tcx> {\n     }\n \n     fn try_coercion_cast<'a>(&self, fcx: &FnCtxt<'a, 'tcx>) -> bool {\n-        if let Ok(()) = coercion::mk_assignty(fcx,\n-                                              &self.expr,\n-                                              self.expr_ty,\n-                                              self.cast_ty) {\n-            true\n-        } else {\n-            false\n-        }\n+        coercion::try(fcx, &self.expr, self.expr_ty, self.cast_ty).is_ok()\n     }\n \n }"}, {"sha": "65ef211321416121db7ab9bf6ad791480d618ebf", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/871a1e1cf8e58c51416954d3afac5d681a3d27eb/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/871a1e1cf8e58c51416954d3afac5d681a3d27eb/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=871a1e1cf8e58c51416954d3afac5d681a3d27eb", "patch": "@@ -435,12 +435,12 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n     }\n }\n \n-pub fn mk_assignty<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n-                             expr: &hir::Expr,\n-                             a: Ty<'tcx>,\n-                             b: Ty<'tcx>)\n-                             -> RelateResult<'tcx, ()> {\n-    debug!(\"mk_assignty({:?} -> {:?})\", a, b);\n+pub fn try<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n+                     expr: &hir::Expr,\n+                     a: Ty<'tcx>,\n+                     b: Ty<'tcx>)\n+                     -> RelateResult<'tcx, ()> {\n+    debug!(\"coercion::try({:?} -> {:?})\", a, b);\n     let mut unsizing_obligations = vec![];\n     let adjustment = try!(indent(|| {\n         fcx.infcx().commit_if_ok(|_| {"}]}