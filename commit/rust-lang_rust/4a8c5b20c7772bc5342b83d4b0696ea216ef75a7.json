{"sha": "4a8c5b20c7772bc5342b83d4b0696ea216ef75a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhOGM1YjIwYzc3NzJiYzUzNDJiODNkNGIwNjk2ZWEyMTZlZjc1YTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-23T13:34:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-23T13:34:27Z"}, "message": "Auto merge of #57545 - bovinebuddha:object_safe_for_dispatch, r=nikomatsakis\n\nObject safe for dispatch\n\ncc #43561", "tree": {"sha": "e1bfe23ad7752e352bedf2dbe3044e3cece52c72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1bfe23ad7752e352bedf2dbe3044e3cece52c72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7", "html_url": "https://github.com/rust-lang/rust/commit/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f466f52c1bf8f2e4454e31c683a88625ad4b4033", "url": "https://api.github.com/repos/rust-lang/rust/commits/f466f52c1bf8f2e4454e31c683a88625ad4b4033", "html_url": "https://github.com/rust-lang/rust/commit/f466f52c1bf8f2e4454e31c683a88625ad4b4033"}, {"sha": "ef5acdecebb48a02cb34d19fa17d1bd59e41a4d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef5acdecebb48a02cb34d19fa17d1bd59e41a4d3", "html_url": "https://github.com/rust-lang/rust/commit/ef5acdecebb48a02cb34d19fa17d1bd59e41a4d3"}], "stats": {"total": 936, "additions": 847, "deletions": 89}, "files": [{"sha": "51ae789b32eb569800c63d80a1175f57c8a859c1", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=4a8c5b20c7772bc5342b83d4b0696ea216ef75a7", "patch": "@@ -1146,10 +1146,17 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n         let span = cause.span(self.tcx);\n \n-        diag.span_label(span, terr.to_string());\n-        if let Some((sp, msg)) = secondary_span {\n-            diag.span_label(sp, msg);\n-        }\n+        // Ignore msg for object safe coercion\n+        // since E0038 message will be printed\n+        match terr {\n+            TypeError::ObjectUnsafeCoercion(_) => {}\n+            _ => {\n+                diag.span_label(span, terr.to_string());\n+                if let Some((sp, msg)) = secondary_span {\n+                    diag.span_label(sp, msg);\n+                }\n+            }\n+        };\n \n         if let Some((expected, found)) = expected_found {\n             match (terr, is_simple_error, expected == found) {\n@@ -1169,6 +1176,9 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                         &sort_string(values.found),\n                     );\n                 }\n+                (TypeError::ObjectUnsafeCoercion(_), ..) => {\n+                    diag.note_unsuccessfull_coercion(found, expected);\n+                }\n                 (_, false, _) => {\n                     if let Some(exp_found) = exp_found {\n                         self.suggest_as_ref_where_appropriate(span, &exp_found, diag);\n@@ -1267,6 +1277,10 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         let span = trace.cause.span(self.tcx);\n         let failure_code = trace.cause.as_failure_code(terr);\n         let mut diag = match failure_code {\n+            FailureCode::Error0038(did) => {\n+                let violations = self.tcx.object_safety_violations(did);\n+                self.tcx.report_object_safety_error(span, did, violations)\n+            }\n             FailureCode::Error0317(failure_str) => {\n                 struct_span_err!(self.tcx.sess, span, E0317, \"{}\", failure_str)\n             }\n@@ -1628,6 +1642,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n }\n \n enum FailureCode {\n+    Error0038(DefId),\n     Error0317(&'static str),\n     Error0580(&'static str),\n     Error0308(&'static str),\n@@ -1666,6 +1681,7 @@ impl<'tcx> ObligationCause<'tcx> {\n                 TypeError::IntrinsicCast => {\n                     Error0308(\"cannot coerce intrinsics to function pointers\")\n                 }\n+                TypeError::ObjectUnsafeCoercion(did) => Error0038(did.clone()),\n                 _ => Error0308(\"mismatched types\"),\n             },\n         }"}, {"sha": "18b25a43e0c806f75685e350ac44d6b062ab2480", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=4a8c5b20c7772bc5342b83d4b0696ea216ef75a7", "patch": "@@ -793,15 +793,11 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n                     ty::Predicate::ObjectSafe(trait_def_id) => {\n                         let violations = self.tcx.object_safety_violations(trait_def_id);\n-                        if let Some(err) = self.tcx.report_object_safety_error(\n+                        self.tcx.report_object_safety_error(\n                             span,\n                             trait_def_id,\n                             violations,\n-                        ) {\n-                            err\n-                        } else {\n-                            return;\n-                        }\n+                        )\n                     }\n \n                     ty::Predicate::ClosureKind(closure_def_id, closure_substs, kind) => {\n@@ -937,11 +933,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n             TraitNotObjectSafe(did) => {\n                 let violations = self.tcx.object_safety_violations(did);\n-                if let Some(err) = self.tcx.report_object_safety_error(span, did, violations) {\n-                    err\n-                } else {\n-                    return;\n-                }\n+                self.tcx.report_object_safety_error(span, did, violations)\n             }\n \n             // already reported in the query\n@@ -1665,11 +1657,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         span: Span,\n         trait_def_id: DefId,\n         violations: Vec<ObjectSafetyViolation>,\n-    ) -> Option<DiagnosticBuilder<'tcx>> {\n-        if self.sess.trait_methods_not_found.borrow().contains(&span) {\n-            // Avoid emitting error caused by non-existing method (#58734)\n-            return None;\n-        }\n+    ) -> DiagnosticBuilder<'tcx> {\n         let trait_str = self.def_path_str(trait_def_id);\n         let span = self.sess.source_map().def_span(span);\n         let mut err = struct_span_err!(\n@@ -1687,7 +1675,13 @@ impl<'tcx> TyCtxt<'tcx> {\n                 };\n             }\n         }\n-        Some(err)\n+\n+        if self.sess.trait_methods_not_found.borrow().contains(&span) {\n+            // Avoid emitting error caused by non-existing method (#58734)\n+            err.cancel();\n+        }\n+\n+        err\n     }\n }\n \n@@ -2098,6 +2092,10 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 err.note(&format!(\"required for the cast to the object type `{}`\",\n                                   self.ty_to_string(object_ty)));\n             }\n+            ObligationCauseCode::Coercion { source: _, target } => {\n+                err.note(&format!(\"required by cast to type `{}`\",\n+                                  self.ty_to_string(target)));\n+            }\n             ObligationCauseCode::RepeatVec => {\n                 err.note(\"the `Copy` trait is required because the \\\n                           repeated element will be copied\");"}, {"sha": "eb4b114eb301ca5db79a4d5a6ab2625bae3913a7", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=4a8c5b20c7772bc5342b83d4b0696ea216ef75a7", "patch": "@@ -188,6 +188,9 @@ pub enum ObligationCauseCode<'tcx> {\n     /// Obligation incurred due to an object cast.\n     ObjectCastObligation(/* Object type */ Ty<'tcx>),\n \n+    /// Obligation incurred due to a coercion.\n+    Coercion { source: Ty<'tcx>, target: Ty<'tcx> },\n+\n     // Various cases where expressions must be sized/copy/etc:\n     /// L = X implies that L is Sized\n     AssignmentLhsSized,"}, {"sha": "d8a27f1e04051726e1c3c86f5936f9bf8b74ab61", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=4a8c5b20c7772bc5342b83d4b0696ea216ef75a7", "patch": "@@ -2246,7 +2246,13 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     }\n \n                     if let Some(principal) = data.principal() {\n-                        principal.with_self_ty(self.tcx(), self_ty)\n+                        if !self.infcx.tcx.features().object_safe_for_dispatch {\n+                            principal.with_self_ty(self.tcx(), self_ty)\n+                        } else if self.tcx().is_object_safe(principal.def_id()) {\n+                            principal.with_self_ty(self.tcx(), self_ty)\n+                        } else {\n+                            return;\n+                        }\n                     } else {\n                         // Only auto-trait bounds exist.\n                         return;"}, {"sha": "9729368edfee5cfe25687af8f18373edcdc7bed9", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=4a8c5b20c7772bc5342b83d4b0696ea216ef75a7", "patch": "@@ -481,6 +481,10 @@ impl<'a, 'tcx> Lift<'tcx> for traits::ObligationCauseCode<'a> {\n                    .and_then(|r| Some(super::ObjectTypeBound(ty, r)))\n             ),\n             super::ObjectCastObligation(ty) => tcx.lift(&ty).map(super::ObjectCastObligation),\n+            super::Coercion { source, target } => Some(super::Coercion {\n+                source: tcx.lift(&source)?,\n+                target: tcx.lift(&target)?,\n+            }),\n             super::AssignmentLhsSized => Some(super::AssignmentLhsSized),\n             super::TupleInitializerSized => Some(super::TupleInitializerSized),\n             super::StructInitializerSized => Some(super::StructInitializerSized),"}, {"sha": "77613b548cfdb438b55b6f9796dd71abc4d82934", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=4a8c5b20c7772bc5342b83d4b0696ea216ef75a7", "patch": "@@ -45,7 +45,7 @@ pub enum TypeError<'tcx> {\n     ProjectionMismatched(ExpectedFound<DefId>),\n     ProjectionBoundsLength(ExpectedFound<usize>),\n     ExistentialMismatch(ExpectedFound<&'tcx ty::List<ty::ExistentialPredicate<'tcx>>>),\n-\n+    ObjectUnsafeCoercion(DefId),\n     ConstMismatch(ExpectedFound<&'tcx ty::Const<'tcx>>),\n \n     IntrinsicCast,\n@@ -178,6 +178,7 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n             IntrinsicCast => {\n                 write!(f, \"cannot coerce intrinsics to function pointers\")\n             }\n+            ObjectUnsafeCoercion(_) => write!(f, \"coercion to object-unsafe trait object\"),\n         }\n     }\n }"}, {"sha": "5d78d563e9a4b0aa53fb473489d6948b7817477c", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=4a8c5b20c7772bc5342b83d4b0696ea216ef75a7", "patch": "@@ -749,6 +749,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::error::TypeError<'a> {\n             ExistentialMismatch(ref x) => return tcx.lift(x).map(ExistentialMismatch),\n             ConstMismatch(ref x) => return tcx.lift(x).map(ConstMismatch),\n             IntrinsicCast => IntrinsicCast,\n+            ObjectUnsafeCoercion(ref x) => return tcx.lift(x).map(ObjectUnsafeCoercion),\n         })\n     }\n }\n@@ -1350,6 +1351,7 @@ EnumTypeFoldableImpl! {\n         (ty::error::TypeError::ExistentialMismatch)(x),\n         (ty::error::TypeError::ConstMismatch)(x),\n         (ty::error::TypeError::IntrinsicCast),\n+        (ty::error::TypeError::ObjectUnsafeCoercion)(x),\n     }\n }\n "}, {"sha": "b50e819c956e0dd710d262f032c322273a42dcbb", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=4a8c5b20c7772bc5342b83d4b0696ea216ef75a7", "patch": "@@ -380,16 +380,21 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                     // obligations that don't refer to Self and\n                     // checking those\n \n-                    let cause = self.cause(traits::MiscObligation);\n-                    let component_traits =\n-                        data.auto_traits().chain(data.principal_def_id());\n-                    self.out.extend(\n-                        component_traits.map(|did| traits::Obligation::new(\n-                            cause.clone(),\n-                            param_env,\n-                            ty::Predicate::ObjectSafe(did)\n-                        ))\n-                    );\n+                    let defer_to_coercion =\n+                        self.infcx.tcx.features().object_safe_for_dispatch;\n+\n+                    if !defer_to_coercion {\n+                        let cause = self.cause(traits::MiscObligation);\n+                        let component_traits =\n+                            data.auto_traits().chain(data.principal_def_id());\n+                        self.out.extend(\n+                            component_traits.map(|did| traits::Obligation::new(\n+                                cause.clone(),\n+                                param_env,\n+                                ty::Predicate::ObjectSafe(did)\n+                            ))\n+                        );\n+                    }\n                 }\n \n                 // Inference variables are the complicated case, since we don't"}, {"sha": "1781f2e165033976daadb9b3fed123a8aa68451f", "filename": "src/librustc_errors/diagnostic.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Flibrustc_errors%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Flibrustc_errors%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic.rs?ref=4a8c5b20c7772bc5342b83d4b0696ea216ef75a7", "patch": "@@ -152,6 +152,32 @@ impl Diagnostic {\n         self.note_expected_found_extra(label, expected, found, &\"\", &\"\")\n     }\n \n+    pub fn note_unsuccessfull_coercion(&mut self,\n+                                       expected: DiagnosticStyledString,\n+                                       found: DiagnosticStyledString)\n+                                       -> &mut Self\n+    {\n+        let mut msg: Vec<_> =\n+            vec![(format!(\"required when trying to coerce from type `\"),\n+                  Style::NoStyle)];\n+        msg.extend(expected.0.iter()\n+                   .map(|x| match *x {\n+                       StringPart::Normal(ref s) => (s.to_owned(), Style::NoStyle),\n+                       StringPart::Highlighted(ref s) => (s.to_owned(), Style::Highlight),\n+                   }));\n+        msg.push((format!(\"` to type '\"), Style::NoStyle));\n+        msg.extend(found.0.iter()\n+                   .map(|x| match *x {\n+                       StringPart::Normal(ref s) => (s.to_owned(), Style::NoStyle),\n+                       StringPart::Highlighted(ref s) => (s.to_owned(), Style::Highlight),\n+                   }));\n+        msg.push((format!(\"`\"), Style::NoStyle));\n+\n+        // For now, just attach these as notes\n+        self.highlighted_note(msg);\n+        self\n+    }\n+\n     pub fn note_expected_found_extra(&mut self,\n                                      label: &dyn fmt::Display,\n                                      expected: DiagnosticStyledString,"}, {"sha": "40642dd14b8f7c7ce75ed81ed4d3de98ef66dc42", "filename": "src/librustc_errors/diagnostic_builder.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic_builder.rs?ref=4a8c5b20c7772bc5342b83d4b0696ea216ef75a7", "patch": "@@ -209,6 +209,11 @@ impl<'a> DiagnosticBuilder<'a> {\n                                               found_extra: &dyn fmt::Display,\n                                               ) -> &mut Self);\n \n+    forward!(pub fn note_unsuccessfull_coercion(&mut self,\n+                                                expected: DiagnosticStyledString,\n+                                                found: DiagnosticStyledString,\n+                                                ) -> &mut Self);\n+\n     forward!(pub fn note(&mut self, msg: &str) -> &mut Self);\n     forward!(pub fn span_note<S: Into<MultiSpan>>(&mut self,\n                                                   sp: S,"}, {"sha": "a052ad95ed58a5365a242355b24aa34c1f8bd453", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=4a8c5b20c7772bc5342b83d4b0696ea216ef75a7", "patch": "@@ -1274,8 +1274,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     span,\n                     item.trait_ref().def_id(),\n                     object_safety_violations\n-                )\n-                    .map(|mut err| err.emit());\n+                ).emit();\n                 return tcx.types.err;\n             }\n         }"}, {"sha": "9cbde276ae97ce1d933423d5b5413eb4d1310c80", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 32, "deletions": 11, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=4a8c5b20c7772bc5342b83d4b0696ea216ef75a7", "patch": "@@ -428,21 +428,36 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n             self.report_cast_to_unsized_type(fcx);\n         } else if self.expr_ty.references_error() || self.cast_ty.references_error() {\n             // No sense in giving duplicate error messages\n-        } else if self.try_coercion_cast(fcx) {\n-            self.trivial_cast_lint(fcx);\n-            debug!(\" -> CoercionCast\");\n-            fcx.tables.borrow_mut().set_coercion_cast(self.expr.hir_id.local_id);\n-\n         } else {\n-            match self.do_check(fcx) {\n-                Ok(k) => {\n-                    debug!(\" -> {:?}\", k);\n+            match self.try_coercion_cast(fcx) {\n+                Ok(()) => {\n+                    self.trivial_cast_lint(fcx);\n+                    debug!(\" -> CoercionCast\");\n+                    fcx.tables.borrow_mut()\n+                        .set_coercion_cast(self.expr.hir_id.local_id);\n+                }\n+                Err(ty::error::TypeError::ObjectUnsafeCoercion(did)) => {\n+                    self.report_object_unsafe_cast(&fcx, did);\n+                }\n+                Err(_) => {\n+                    match self.do_check(fcx) {\n+                        Ok(k) => {\n+                            debug!(\" -> {:?}\", k);\n+                        }\n+                        Err(e) => self.report_cast_error(fcx, e),\n+                    };\n                 }\n-                Err(e) => self.report_cast_error(fcx, e),\n             };\n         }\n     }\n \n+    fn report_object_unsafe_cast(&self, fcx: &FnCtxt<'a, 'tcx>, did: DefId) {\n+        let violations = fcx.tcx.object_safety_violations(did);\n+        let mut err = fcx.tcx.report_object_safety_error(self.cast_span, did, violations);\n+        err.note(&format!(\"required by cast to type '{}'\", fcx.ty_to_string(self.cast_ty)));\n+        err.emit();\n+    }\n+\n     /// Checks a cast, and report an error if one exists. In some cases, this\n     /// can return Ok and create type errors in the fcx rather than returning\n     /// directly. coercion-cast is handled in check instead of here.\n@@ -646,8 +661,14 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n         }\n     }\n \n-    fn try_coercion_cast(&self, fcx: &FnCtxt<'a, 'tcx>) -> bool {\n-        fcx.try_coerce(self.expr, self.expr_ty, self.cast_ty, AllowTwoPhase::No).is_ok()\n+    fn try_coercion_cast(\n+        &self,\n+        fcx: &FnCtxt<'a, 'tcx>,\n+    ) -> Result<(), ty::error::TypeError<'_>> {\n+        match fcx.try_coerce(self.expr, self.expr_ty, self.cast_ty, AllowTwoPhase::No) {\n+            Ok(_) => Ok(()),\n+            Err(err) => Err(err),\n+        }\n     }\n }\n "}, {"sha": "f79351dc903106cd1d89d6edd0a5119253e078f4", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=4a8c5b20c7772bc5342b83d4b0696ea216ef75a7", "patch": "@@ -61,10 +61,11 @@ use rustc::traits::{self, ObligationCause, ObligationCauseCode};\n use rustc::ty::adjustment::{\n     Adjustment, Adjust, AllowTwoPhase, AutoBorrow, AutoBorrowMutability, PointerCast\n };\n-use rustc::ty::{self, TypeAndMut, Ty, subst::SubstsRef};\n+use rustc::ty::{self, TypeAndMut, Ty};\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::error::TypeError;\n use rustc::ty::relate::RelateResult;\n+use rustc::ty::subst::SubstsRef;\n use smallvec::{smallvec, SmallVec};\n use std::ops::Deref;\n use syntax::feature_gate;\n@@ -196,9 +197,16 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n         // a \"spurious\" type variable, and we don't want to have that\n         // type variable in memory if the coercion fails.\n         let unsize = self.commit_if_ok(|_| self.coerce_unsized(a, b));\n-        if unsize.is_ok() {\n-            debug!(\"coerce: unsize successful\");\n-            return unsize;\n+        match unsize {\n+            Ok(_) => {\n+                debug!(\"coerce: unsize successful\");\n+                return unsize;\n+            }\n+            Err(TypeError::ObjectUnsafeCoercion(did)) => {\n+                debug!(\"coerce: unsize not object safe\");\n+                return Err(TypeError::ObjectUnsafeCoercion(did));\n+            }\n+            Err(_) => {}\n         }\n         debug!(\"coerce: unsize failed\");\n \n@@ -539,7 +547,11 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n         let mut selcx = traits::SelectionContext::new(self);\n \n         // Create an obligation for `Source: CoerceUnsized<Target>`.\n-        let cause = ObligationCause::misc(self.cause.span, self.body_id);\n+        let cause = ObligationCause::new(\n+            self.cause.span,\n+            self.body_id,\n+            ObligationCauseCode::Coercion { source, target },\n+        );\n \n         // Use a FIFO queue for this custom fulfillment procedure.\n         //\n@@ -566,14 +578,15 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n             let obligation = queue.remove(0);\n             debug!(\"coerce_unsized resolve step: {:?}\", obligation);\n             let trait_ref = match obligation.predicate {\n-                ty::Predicate::Trait(ref t) if traits.contains(&t.def_id()) => {\n-                    if unsize_did == t.def_id() {\n-                        if let ty::Tuple(..) = &t.skip_binder().input_types().nth(1).unwrap().kind {\n+                ty::Predicate::Trait(ref tr) if traits.contains(&tr.def_id()) => {\n+                    if unsize_did == tr.def_id() {\n+                        let sty = &tr.skip_binder().input_types().nth(1).unwrap().kind;\n+                        if let ty::Tuple(..) = sty {\n                             debug!(\"coerce_unsized: found unsized tuple coercion\");\n                             has_unsized_tuple_coercion = true;\n                         }\n                     }\n-                    t.clone()\n+                    tr.clone()\n                 }\n                 _ => {\n                     coercion.obligations.push(obligation);"}, {"sha": "8adf4bb94a898c66d88f63157e6a206f55122f0f", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=4a8c5b20c7772bc5342b83d4b0696ea216ef75a7", "patch": "@@ -183,8 +183,11 @@ fn check_impl_overlap<'tcx>(tcx: TyCtxt<'tcx>, hir_id: HirId) {\n \n         for component_def_id in component_def_ids {\n             if !tcx.is_object_safe(component_def_id) {\n-                // This is an error, but it will be reported by wfcheck.  Ignore it here.\n+                // Without the 'object_safe_for_dispatch' feature this is an error\n+                // which will be reported by wfcheck.  Ignore it here.\n                 // This is tested by `coherence-impl-trait-for-trait-object-safe.rs`.\n+                // With the feature enabled, the trait is not implemented automatically,\n+                // so this is valid.\n             } else {\n                 let mut supertrait_def_ids =\n                     traits::supertrait_def_ids(tcx, component_def_id);"}, {"sha": "1386eac48dae2ca09b527a184b5c0a82ef5ce325", "filename": "src/libsyntax/feature_gate/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Factive.rs?ref=4a8c5b20c7772bc5342b83d4b0696ea216ef75a7", "patch": "@@ -528,6 +528,9 @@ declare_features! (\n     /// Enable accurate caller location reporting during panic (RFC 2091).\n     (active, track_caller, \"1.40.0\", Some(47809), None),\n \n+    /// Non-object safe trait objects safe to use but cannot be created in safe rust\n+    (active, object_safe_for_dispatch, \"1.40.0\", Some(43561), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "634f58c528502d0f3aa84dbfadccfa558e05efb9", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=4a8c5b20c7772bc5342b83d4b0696ea216ef75a7", "patch": "@@ -459,6 +459,7 @@ symbols! {\n         no_std,\n         not,\n         note,\n+        object_safe_for_dispatch,\n         Ok,\n         omit_gdb_pretty_printer_section,\n         on,"}, {"sha": "9859a226efd0074b24491988e808cc48d8c46916", "filename": "src/test/ui/coherence/coherence-unsafe-trait-object-impl.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-unsafe-trait-object-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-unsafe-trait-object-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-unsafe-trait-object-impl.rs?ref=4a8c5b20c7772bc5342b83d4b0696ea216ef75a7", "patch": "@@ -0,0 +1,18 @@\n+// Check that unsafe trait object do not implement themselves\n+// automatically\n+\n+#![feature(object_safe_for_dispatch)]\n+\n+trait Trait: Sized {\n+    fn call(&self);\n+}\n+\n+fn takes_t<S: Trait>(s: S) {\n+    s.call();\n+}\n+\n+fn takes_t_obj(t: &dyn Trait) {\n+    takes_t(t); //~ ERROR E0277\n+}\n+\n+fn main() {}"}, {"sha": "b5a86acfb978f2e1a6e596b321aeba797032c9c0", "filename": "src/test/ui/coherence/coherence-unsafe-trait-object-impl.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-unsafe-trait-object-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-unsafe-trait-object-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-unsafe-trait-object-impl.stderr?ref=4a8c5b20c7772bc5342b83d4b0696ea216ef75a7", "patch": "@@ -0,0 +1,12 @@\n+error[E0277]: the trait bound `&dyn Trait: Trait` is not satisfied\n+  --> $DIR/coherence-unsafe-trait-object-impl.rs:15:13\n+   |\n+LL | fn takes_t<S: Trait>(s: S) {\n+   |    -------    ----- required by this bound in `takes_t`\n+...\n+LL |     takes_t(t);\n+   |             ^ the trait `Trait` is not implemented for `&dyn Trait`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "8945360b7be6d4d86d2b94410eb4366d7d445971", "filename": "src/test/ui/feature-gates/feature-gate-object_safe_for_dispatch.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-object_safe_for_dispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-object_safe_for_dispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-object_safe_for_dispatch.rs?ref=4a8c5b20c7772bc5342b83d4b0696ea216ef75a7", "patch": "@@ -0,0 +1,41 @@\n+// Test that the use of the non object-safe trait objects\n+// are gated by `object_safe_for_dispatch` feature gate.\n+\n+trait NonObjectSafe1: Sized {}\n+\n+trait NonObjectSafe2 {\n+    fn static_fn() {}\n+}\n+\n+trait NonObjectSafe3 {\n+    fn foo<T>(&self);\n+}\n+\n+trait NonObjectSafe4 {\n+    fn foo(&self, &Self);\n+}\n+\n+fn takes_non_object_safe_ref<T>(obj: &dyn NonObjectSafe1) {\n+    //~^ ERROR E0038\n+}\n+\n+fn return_non_object_safe_ref() -> &'static dyn NonObjectSafe2 {\n+    //~^ ERROR E0038\n+    loop {}\n+}\n+\n+fn takes_non_object_safe_box(obj: Box<dyn NonObjectSafe3>) {\n+    //~^ ERROR E0038\n+}\n+\n+fn return_non_object_safe_rc() -> std::rc::Rc<dyn NonObjectSafe4> {\n+    //~^ ERROR E0038\n+    loop {}\n+}\n+\n+trait Trait {}\n+\n+impl Trait for dyn NonObjectSafe1 {}\n+//~^ ERROR E0038\n+\n+fn main() {}"}, {"sha": "54e64e2fc1bd4b9716f5473cb09d4352a33395fb", "filename": "src/test/ui/feature-gates/feature-gate-object_safe_for_dispatch.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-object_safe_for_dispatch.stderr?ref=4a8c5b20c7772bc5342b83d4b0696ea216ef75a7", "patch": "@@ -0,0 +1,46 @@\n+error[E0038]: the trait `NonObjectSafe1` cannot be made into an object\n+  --> $DIR/feature-gate-object_safe_for_dispatch.rs:18:1\n+   |\n+LL | fn takes_non_object_safe_ref<T>(obj: &dyn NonObjectSafe1) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `NonObjectSafe1` cannot be made into an object\n+   |\n+   = note: the trait cannot require that `Self : Sized`\n+\n+error[E0038]: the trait `NonObjectSafe2` cannot be made into an object\n+  --> $DIR/feature-gate-object_safe_for_dispatch.rs:22:1\n+   |\n+LL |     fn static_fn() {}\n+   |        --------- associated function `static_fn` has no `self` parameter\n+...\n+LL | fn return_non_object_safe_ref() -> &'static dyn NonObjectSafe2 {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `NonObjectSafe2` cannot be made into an object\n+\n+error[E0038]: the trait `NonObjectSafe3` cannot be made into an object\n+  --> $DIR/feature-gate-object_safe_for_dispatch.rs:27:1\n+   |\n+LL |     fn foo<T>(&self);\n+   |        --- method `foo` has generic type parameters\n+...\n+LL | fn takes_non_object_safe_box(obj: Box<dyn NonObjectSafe3>) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `NonObjectSafe3` cannot be made into an object\n+\n+error[E0038]: the trait `NonObjectSafe4` cannot be made into an object\n+  --> $DIR/feature-gate-object_safe_for_dispatch.rs:31:1\n+   |\n+LL |     fn foo(&self, &Self);\n+   |        --- method `foo` references the `Self` type in its parameters or return type\n+...\n+LL | fn return_non_object_safe_rc() -> std::rc::Rc<dyn NonObjectSafe4> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `NonObjectSafe4` cannot be made into an object\n+\n+error[E0038]: the trait `NonObjectSafe1` cannot be made into an object\n+  --> $DIR/feature-gate-object_safe_for_dispatch.rs:38:6\n+   |\n+LL | impl Trait for dyn NonObjectSafe1 {}\n+   |      ^^^^^ the trait `NonObjectSafe1` cannot be made into an object\n+   |\n+   = note: the trait cannot require that `Self : Sized`\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0038`."}, {"sha": "83c03b514ddcc8dd919d23ad82002acb46676d4a", "filename": "src/test/ui/issues/issue-19538.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fissues%2Fissue-19538.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fissues%2Fissue-19538.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19538.stderr?ref=4a8c5b20c7772bc5342b83d4b0696ea216ef75a7", "patch": "@@ -17,6 +17,7 @@ LL |     let test: &mut dyn Bar = &mut thing;\n    |                              ^^^^^^^^^^ the trait `Bar` cannot be made into an object\n    |\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&mut dyn Bar>` for `&mut Thing`\n+   = note: required by cast to type `&mut dyn Bar`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "06c83f65be26c7b01fd3e26d9a11533097a44eca", "filename": "src/test/ui/issues/issue-20692.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fissues%2Fissue-20692.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fissues%2Fissue-20692.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20692.stderr?ref=4a8c5b20c7772bc5342b83d4b0696ea216ef75a7", "patch": "@@ -14,6 +14,7 @@ LL |     let _ = x\n    |\n    = note: the trait cannot require that `Self : Sized`\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&dyn Array>` for `&T`\n+   = note: required by cast to type `&dyn Array`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "8b923a2c6b23f45c1cba0739eb1dfe4bb51866e8", "filename": "src/test/ui/issues/issue-38604.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fissues%2Fissue-38604.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fissues%2Fissue-38604.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38604.stderr?ref=4a8c5b20c7772bc5342b83d4b0696ea216ef75a7", "patch": "@@ -14,6 +14,7 @@ LL |         Box::new(());\n    |\n    = note: the trait cannot use `Self` as a type parameter in the supertraits or where-clauses\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<std::boxed::Box<dyn Foo>>` for `std::boxed::Box<()>`\n+   = note: required by cast to type `std::boxed::Box<dyn Foo>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "a93f4686496ac6c6a307227839fc582ddcc210fe", "filename": "src/test/ui/kindck/kindck-inherited-copy-bound.curr.stderr", "status": "renamed", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.curr.stderr?ref=4a8c5b20c7772bc5342b83d4b0696ea216ef75a7", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `std::boxed::Box<{integer}>: std::marker::Copy` is not satisfied\n-  --> $DIR/kindck-inherited-copy-bound.rs:18:16\n+  --> $DIR/kindck-inherited-copy-bound.rs:21:16\n    |\n LL | fn take_param<T:Foo>(foo: &T) { }\n    |    ----------   --- required by this bound in `take_param`\n@@ -10,21 +10,22 @@ LL |     take_param(&x);\n    = note: required because of the requirements on the impl of `Foo` for `std::boxed::Box<{integer}>`\n \n error[E0038]: the trait `Foo` cannot be made into an object\n-  --> $DIR/kindck-inherited-copy-bound.rs:24:19\n+  --> $DIR/kindck-inherited-copy-bound.rs:28:19\n    |\n LL |     let z = &x as &dyn Foo;\n    |                   ^^^^^^^^ the trait `Foo` cannot be made into an object\n    |\n    = note: the trait cannot require that `Self : Sized`\n \n error[E0038]: the trait `Foo` cannot be made into an object\n-  --> $DIR/kindck-inherited-copy-bound.rs:24:13\n+  --> $DIR/kindck-inherited-copy-bound.rs:28:13\n    |\n LL |     let z = &x as &dyn Foo;\n    |             ^^ the trait `Foo` cannot be made into an object\n    |\n    = note: the trait cannot require that `Self : Sized`\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&dyn Foo>` for `&std::boxed::Box<{integer}>`\n+   = note: required by cast to type `&dyn Foo`\n \n error: aborting due to 3 previous errors\n ", "previous_filename": "src/test/ui/kindck/kindck-inherited-copy-bound.stderr"}, {"sha": "7c67c5f9e9596dd5610f0c5073ec2db33027c3da", "filename": "src/test/ui/kindck/kindck-inherited-copy-bound.object_safe_for_dispatch.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.object_safe_for_dispatch.stderr?ref=4a8c5b20c7772bc5342b83d4b0696ea216ef75a7", "patch": "@@ -0,0 +1,25 @@\n+error[E0277]: the trait bound `std::boxed::Box<{integer}>: std::marker::Copy` is not satisfied\n+  --> $DIR/kindck-inherited-copy-bound.rs:21:16\n+   |\n+LL | fn take_param<T:Foo>(foo: &T) { }\n+   |    ----------   --- required by this bound in `take_param`\n+...\n+LL |     take_param(&x);\n+   |                ^^ the trait `std::marker::Copy` is not implemented for `std::boxed::Box<{integer}>`\n+   |\n+   = note: required because of the requirements on the impl of `Foo` for `std::boxed::Box<{integer}>`\n+\n+error[E0038]: the trait `Foo` cannot be made into an object\n+  --> $DIR/kindck-inherited-copy-bound.rs:28:13\n+   |\n+LL |     let z = &x as &dyn Foo;\n+   |             ^^ the trait `Foo` cannot be made into an object\n+   |\n+   = note: the trait cannot require that `Self : Sized`\n+   = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&dyn Foo>` for `&std::boxed::Box<i32>`\n+   = note: required by cast to type `&dyn Foo`\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0038, E0277.\n+For more information about an error, try `rustc --explain E0038`."}, {"sha": "aad693e5b193708149bf63f1d1aa968e5634c134", "filename": "src/test/ui/kindck/kindck-inherited-copy-bound.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.rs?ref=4a8c5b20c7772bc5342b83d4b0696ea216ef75a7", "patch": "@@ -1,5 +1,8 @@\n // Test that Copy bounds inherited by trait are checked.\n+//\n+// revisions: curr object_safe_for_dispatch\n \n+#![cfg_attr(object_safe_for_dispatch, feature(object_safe_for_dispatch))]\n #![feature(box_syntax)]\n \n use std::any::Any;\n@@ -15,15 +18,17 @@ fn take_param<T:Foo>(foo: &T) { }\n \n fn a() {\n     let x: Box<_> = box 3;\n-    take_param(&x); //~ ERROR E0277\n+    take_param(&x); //[curr]~ ERROR E0277\n+    //[object_safe_for_dispatch]~^ ERROR E0277\n }\n \n fn b() {\n     let x: Box<_> = box 3;\n     let y = &x;\n     let z = &x as &dyn Foo;\n-    //~^ ERROR E0038\n-    //~| ERROR E0038\n+    //[curr]~^ ERROR E0038\n+    //[curr]~| ERROR E0038\n+    //[object_safe_for_dispatch]~^^^ ERROR E0038\n }\n \n fn main() { }"}, {"sha": "67ef7a62f1052453537d23a7f73a9aa7a6a955f5", "filename": "src/test/ui/object-safety/object-safety-associated-consts.curr.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.curr.stderr?ref=4a8c5b20c7772bc5342b83d4b0696ea216ef75a7", "patch": "@@ -1,5 +1,5 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n-  --> $DIR/object-safety-associated-consts.rs:9:1\n+  --> $DIR/object-safety-associated-consts.rs:12:1\n    |\n LL |     const X: usize;\n    |           - the trait cannot contain associated consts like `X`", "previous_filename": "src/test/ui/object-safety/object-safety-associated-consts.stderr"}, {"sha": "20993a680ba48d52768bd64590ea7ce84b676b61", "filename": "src/test/ui/object-safety/object-safety-associated-consts.object_safe_for_dispatch.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.object_safe_for_dispatch.stderr?ref=4a8c5b20c7772bc5342b83d4b0696ea216ef75a7", "patch": "@@ -0,0 +1,15 @@\n+error[E0038]: the trait `Bar` cannot be made into an object\n+  --> $DIR/object-safety-associated-consts.rs:14:5\n+   |\n+LL |     const X: usize;\n+   |           - the trait cannot contain associated consts like `X`\n+...\n+LL |     t\n+   |     ^ the trait `Bar` cannot be made into an object\n+   |\n+   = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&dyn Bar>` for `&T`\n+   = note: required by cast to type `&dyn Bar`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0038`."}, {"sha": "e1a772e5ab2f32e2da2d32059098aa4f3fde5d67", "filename": "src/test/ui/object-safety/object-safety-associated-consts.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.rs?ref=4a8c5b20c7772bc5342b83d4b0696ea216ef75a7", "patch": "@@ -1,14 +1,18 @@\n // Check that we correctly prevent users from making trait objects\n // from traits with associated consts.\n+//\n+// revisions: curr object_safe_for_dispatch\n \n+#![cfg_attr(object_safe_for_dispatch, feature(object_safe_for_dispatch))]\n \n trait Bar {\n     const X: usize;\n }\n \n fn make_bar<T:Bar>(t: &T) -> &dyn Bar {\n-    //~^ ERROR E0038\n+    //[curr]~^ ERROR E0038\n     t\n+    //[object_safe_for_dispatch]~^ ERROR E0038\n }\n \n fn main() {"}, {"sha": "8ae9236a5c3228d2a0e01cb3640801896352bd61", "filename": "src/test/ui/object-safety/object-safety-generics.curr.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-generics.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-generics.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-generics.curr.stderr?ref=4a8c5b20c7772bc5342b83d4b0696ea216ef75a7", "patch": "@@ -1,5 +1,5 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n-  --> $DIR/object-safety-generics.rs:14:1\n+  --> $DIR/object-safety-generics.rs:18:1\n    |\n LL |     fn bar<T>(&self, t: T);\n    |        --- method `bar` has generic type parameters\n@@ -8,7 +8,7 @@ LL | fn make_bar<T:Bar>(t: &T) -> &dyn Bar {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Bar` cannot be made into an object\n \n error[E0038]: the trait `Bar` cannot be made into an object\n-  --> $DIR/object-safety-generics.rs:19:1\n+  --> $DIR/object-safety-generics.rs:24:1\n    |\n LL |     fn bar<T>(&self, t: T);\n    |        --- method `bar` has generic type parameters", "previous_filename": "src/test/ui/object-safety/object-safety-generics.stderr"}, {"sha": "d3d8d36888836bb11ace8fa71d387115d98123af", "filename": "src/test/ui/object-safety/object-safety-generics.object_safe_for_dispatch.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-generics.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-generics.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-generics.object_safe_for_dispatch.stderr?ref=4a8c5b20c7772bc5342b83d4b0696ea216ef75a7", "patch": "@@ -0,0 +1,27 @@\n+error[E0038]: the trait `Bar` cannot be made into an object\n+  --> $DIR/object-safety-generics.rs:20:5\n+   |\n+LL |     fn bar<T>(&self, t: T);\n+   |        --- method `bar` has generic type parameters\n+...\n+LL |     t\n+   |     ^ the trait `Bar` cannot be made into an object\n+   |\n+   = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&dyn Bar>` for `&T`\n+   = note: required by cast to type `&dyn Bar`\n+\n+error[E0038]: the trait `Bar` cannot be made into an object\n+  --> $DIR/object-safety-generics.rs:26:5\n+   |\n+LL |     fn bar<T>(&self, t: T);\n+   |        --- method `bar` has generic type parameters\n+...\n+LL |     t as &dyn Bar\n+   |     ^ the trait `Bar` cannot be made into an object\n+   |\n+   = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&dyn Bar>` for `&T`\n+   = note: required by cast to type `&dyn Bar`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0038`."}, {"sha": "63dcd169925e411a05e03558c224b808d5fddcd4", "filename": "src/test/ui/object-safety/object-safety-generics.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-generics.rs?ref=4a8c5b20c7772bc5342b83d4b0696ea216ef75a7", "patch": "@@ -1,6 +1,10 @@\n // Check that we correctly prevent users from making trait objects\n // from traits with generic methods, unless `where Self : Sized` is\n // present.\n+// revisions: curr object_safe_for_dispatch\n+\n+#![cfg_attr(object_safe_for_dispatch, feature(object_safe_for_dispatch))]\n+\n \n trait Bar {\n     fn bar<T>(&self, t: T);\n@@ -12,13 +16,15 @@ trait Quux {\n }\n \n fn make_bar<T:Bar>(t: &T) -> &dyn Bar {\n-        //~^ ERROR E0038\n+    //[curr]~^ ERROR E0038\n     t\n+    //[object_safe_for_dispatch]~^ ERROR E0038\n }\n \n fn make_bar_explicit<T:Bar>(t: &T) -> &dyn Bar {\n-    //~^ ERROR E0038\n+    //[curr]~^ ERROR E0038\n     t as &dyn Bar\n+    //[object_safe_for_dispatch]~^ ERROR E0038\n }\n \n fn make_quux<T:Quux>(t: &T) -> &dyn Quux {"}, {"sha": "297cd876187fe077aefd9ae27d870d1d192413eb", "filename": "src/test/ui/object-safety/object-safety-mentions-Self.curr.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.curr.stderr?ref=4a8c5b20c7772bc5342b83d4b0696ea216ef75a7", "patch": "@@ -1,5 +1,5 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n-  --> $DIR/object-safety-mentions-Self.rs:17:1\n+  --> $DIR/object-safety-mentions-Self.rs:22:1\n    |\n LL |     fn bar(&self, x: &Self);\n    |        --- method `bar` references the `Self` type in its parameters or return type\n@@ -8,10 +8,10 @@ LL | fn make_bar<T:Bar>(t: &T) -> &dyn Bar {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Bar` cannot be made into an object\n \n error[E0038]: the trait `Baz` cannot be made into an object\n-  --> $DIR/object-safety-mentions-Self.rs:22:1\n+  --> $DIR/object-safety-mentions-Self.rs:28:1\n    |\n-LL |     fn bar(&self) -> Self;\n-   |        --- method `bar` references the `Self` type in its parameters or return type\n+LL |     fn baz(&self) -> Self;\n+   |        --- method `baz` references the `Self` type in its parameters or return type\n ...\n LL | fn make_baz<T:Baz>(t: &T) -> &dyn Baz {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Baz` cannot be made into an object", "previous_filename": "src/test/ui/object-safety/object-safety-mentions-Self.stderr"}, {"sha": "03b2b8da07533b8b30738f2d7d3544d4eb505235", "filename": "src/test/ui/object-safety/object-safety-mentions-Self.object_safe_for_dispatch.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.object_safe_for_dispatch.stderr?ref=4a8c5b20c7772bc5342b83d4b0696ea216ef75a7", "patch": "@@ -0,0 +1,27 @@\n+error[E0038]: the trait `Bar` cannot be made into an object\n+  --> $DIR/object-safety-mentions-Self.rs:24:5\n+   |\n+LL |     fn bar(&self, x: &Self);\n+   |        --- method `bar` references the `Self` type in its parameters or return type\n+...\n+LL |     t\n+   |     ^ the trait `Bar` cannot be made into an object\n+   |\n+   = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&dyn Bar>` for `&T`\n+   = note: required by cast to type `&dyn Bar`\n+\n+error[E0038]: the trait `Baz` cannot be made into an object\n+  --> $DIR/object-safety-mentions-Self.rs:30:5\n+   |\n+LL |     fn baz(&self) -> Self;\n+   |        --- method `baz` references the `Self` type in its parameters or return type\n+...\n+LL |     t\n+   |     ^ the trait `Baz` cannot be made into an object\n+   |\n+   = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&dyn Baz>` for `&T`\n+   = note: required by cast to type `&dyn Baz`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0038`."}, {"sha": "412d16ff3c7ce6dd3fed5faf636d541c7cf7f904", "filename": "src/test/ui/object-safety/object-safety-mentions-Self.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.rs?ref=4a8c5b20c7772bc5342b83d4b0696ea216ef75a7", "patch": "@@ -1,27 +1,34 @@\n // Check that we correctly prevent users from making trait objects\n // form traits that make use of `Self` in an argument or return\n // position, unless `where Self : Sized` is present..\n+//\n+// revisions: curr object_safe_for_dispatch\n+\n+#![cfg_attr(object_safe_for_dispatch, feature(object_safe_for_dispatch))]\n+\n \n trait Bar {\n     fn bar(&self, x: &Self);\n }\n \n trait Baz {\n-    fn bar(&self) -> Self;\n+    fn baz(&self) -> Self;\n }\n \n trait Quux {\n-    fn get(&self, s: &Self) -> Self where Self : Sized;\n+    fn quux(&self, s: &Self) -> Self where Self : Sized;\n }\n \n fn make_bar<T:Bar>(t: &T) -> &dyn Bar {\n-        //~^ ERROR E0038\n-    loop { }\n+    //[curr]~^ ERROR E0038\n+    t\n+    //[object_safe_for_dispatch]~^ ERROR E0038\n }\n \n fn make_baz<T:Baz>(t: &T) -> &dyn Baz {\n-        //~^ ERROR E0038\n+    //[curr]~^ ERROR E0038\n     t\n+    //[object_safe_for_dispatch]~^ ERROR E0038\n }\n \n fn make_quux<T:Quux>(t: &T) -> &dyn Quux {\n@@ -32,5 +39,4 @@ fn make_quux_explicit<T:Quux>(t: &T) -> &dyn Quux {\n     t as &dyn Quux\n }\n \n-fn main() {\n-}\n+fn main() {}"}, {"sha": "1641ce577719e80b22bf45e273c1a43cf0b52e76", "filename": "src/test/ui/object-safety/object-safety-no-static.curr.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-no-static.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-no-static.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-no-static.curr.stderr?ref=4a8c5b20c7772bc5342b83d4b0696ea216ef75a7", "patch": "@@ -0,0 +1,12 @@\n+error[E0038]: the trait `Foo` cannot be made into an object\n+  --> $DIR/object-safety-no-static.rs:12:1\n+   |\n+LL |     fn foo() {}\n+   |        --- associated function `foo` has no `self` parameter\n+...\n+LL | fn diverges() -> Box<dyn Foo> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0038`."}, {"sha": "91a9285b63cccf01cad52bd05e4245b300429764", "filename": "src/test/ui/object-safety/object-safety-no-static.object_safe_for_dispatch.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-no-static.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-no-static.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-no-static.object_safe_for_dispatch.stderr?ref=4a8c5b20c7772bc5342b83d4b0696ea216ef75a7", "patch": "@@ -0,0 +1,15 @@\n+error[E0038]: the trait `Foo` cannot be made into an object\n+  --> $DIR/object-safety-no-static.rs:22:27\n+   |\n+LL |     fn foo() {}\n+   |        --- associated function `foo` has no `self` parameter\n+...\n+LL |     let b: Box<dyn Foo> = Box::new(Bar);\n+   |                           ^^^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n+   |\n+   = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<std::boxed::Box<dyn Foo>>` for `std::boxed::Box<Bar>`\n+   = note: required by cast to type `std::boxed::Box<dyn Foo>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0038`."}, {"sha": "03b6221748388622375091b35e177791040f6e85", "filename": "src/test/ui/object-safety/object-safety-no-static.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-no-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-no-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-no-static.rs?ref=4a8c5b20c7772bc5342b83d4b0696ea216ef75a7", "patch": "@@ -1,14 +1,24 @@\n // Check that we correctly prevent users from making trait objects\n // from traits with static methods.\n+//\n+// revisions: curr object_safe_for_dispatch\n+\n+#![cfg_attr(object_safe_for_dispatch, feature(object_safe_for_dispatch))]\n \n trait Foo {\n-    fn foo();\n+    fn foo() {}\n }\n \n-fn foo_implicit<T:Foo+'static>(b: Box<T>) -> Box<dyn Foo + 'static> {\n-    //~^ ERROR E0038\n+fn diverges() -> Box<dyn Foo> {\n+    //[curr]~^ ERROR E0038\n     loop { }\n }\n \n+struct Bar;\n+\n+impl Foo for Bar {}\n+\n fn main() {\n+    let b: Box<dyn Foo> = Box::new(Bar);\n+    //[object_safe_for_dispatch]~^ ERROR E0038\n }"}, {"sha": "1e1d2bf64c42740da3a8facbfb9a1ec3d9708ebf", "filename": "src/test/ui/object-safety/object-safety-sized-2.curr.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized-2.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized-2.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized-2.curr.stderr?ref=4a8c5b20c7772bc5342b83d4b0696ea216ef75a7", "patch": "@@ -1,5 +1,5 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n-  --> $DIR/object-safety-sized-2.rs:10:1\n+  --> $DIR/object-safety-sized-2.rs:14:1\n    |\n LL | fn make_bar<T:Bar>(t: &T) -> &dyn Bar {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Bar` cannot be made into an object", "previous_filename": "src/test/ui/object-safety/object-safety-sized-2.stderr"}, {"sha": "06ecfd019c841b7fcc8e4883f59bb7773ec29b69", "filename": "src/test/ui/object-safety/object-safety-sized-2.object_safe_for_dispatch.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized-2.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized-2.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized-2.object_safe_for_dispatch.stderr?ref=4a8c5b20c7772bc5342b83d4b0696ea216ef75a7", "patch": "@@ -0,0 +1,13 @@\n+error[E0038]: the trait `Bar` cannot be made into an object\n+  --> $DIR/object-safety-sized-2.rs:16:5\n+   |\n+LL |     t\n+   |     ^ the trait `Bar` cannot be made into an object\n+   |\n+   = note: the trait cannot require that `Self : Sized`\n+   = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&dyn Bar>` for `&T`\n+   = note: required by cast to type `&dyn Bar`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0038`."}, {"sha": "1e79b8cd917c7f07a09040b0fc600378b0b82954", "filename": "src/test/ui/object-safety/object-safety-sized-2.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized-2.rs?ref=4a8c5b20c7772bc5342b83d4b0696ea216ef75a7", "patch": "@@ -1,5 +1,9 @@\n // Check that we correctly prevent users from making trait objects\n // from traits where `Self : Sized`.\n+//\n+// revisions: curr object_safe_for_dispatch\n+\n+#![cfg_attr(object_safe_for_dispatch, feature(object_safe_for_dispatch))]\n \n trait Bar\n     where Self : Sized\n@@ -8,8 +12,9 @@ trait Bar\n }\n \n fn make_bar<T:Bar>(t: &T) -> &dyn Bar {\n-        //~^ ERROR E0038\n-    loop { }\n+    //[curr]~^ ERROR E0038\n+    t\n+    //[object_safe_for_dispatch]~^ ERROR E0038\n }\n \n fn main() {"}, {"sha": "1a67e79e83d32d4ce9fd65252f9f98f1cb43d86c", "filename": "src/test/ui/object-safety/object-safety-sized.curr.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized.curr.stderr?ref=4a8c5b20c7772bc5342b83d4b0696ea216ef75a7", "patch": "@@ -1,5 +1,5 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n-  --> $DIR/object-safety-sized.rs:8:1\n+  --> $DIR/object-safety-sized.rs:12:1\n    |\n LL | fn make_bar<T:Bar>(t: &T) -> &dyn Bar {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Bar` cannot be made into an object", "previous_filename": "src/test/ui/object-safety/object-safety-sized.stderr"}, {"sha": "3d88dfc40ed385eb40eda611c9f8d7e6744b0740", "filename": "src/test/ui/object-safety/object-safety-sized.object_safe_for_dispatch.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized.object_safe_for_dispatch.stderr?ref=4a8c5b20c7772bc5342b83d4b0696ea216ef75a7", "patch": "@@ -0,0 +1,13 @@\n+error[E0038]: the trait `Bar` cannot be made into an object\n+  --> $DIR/object-safety-sized.rs:14:5\n+   |\n+LL |     t\n+   |     ^ the trait `Bar` cannot be made into an object\n+   |\n+   = note: the trait cannot require that `Self : Sized`\n+   = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&dyn Bar>` for `&T`\n+   = note: required by cast to type `&dyn Bar`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0038`."}, {"sha": "b424b892d3b4525cb4b7b4b295b77e70d2a9e571", "filename": "src/test/ui/object-safety/object-safety-sized.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized.rs?ref=4a8c5b20c7772bc5342b83d4b0696ea216ef75a7", "patch": "@@ -1,13 +1,18 @@\n // Check that we correctly prevent users from making trait objects\n // from traits where `Self : Sized`.\n+//\n+// revisions: curr object_safe_for_dispatch\n+\n+#![cfg_attr(object_safe_for_dispatch, feature(object_safe_for_dispatch))]\n \n trait Bar : Sized {\n     fn bar<T>(&self, t: T);\n }\n \n fn make_bar<T:Bar>(t: &T) -> &dyn Bar {\n-        //~^ ERROR E0038\n+    //[curr]~^ ERROR E0038\n     t\n+    //[object_safe_for_dispatch]~^ ERROR E0038\n }\n \n fn main() {"}, {"sha": "fa04f4b12d5fe603f1b455c7467f3ba1a4518b31", "filename": "src/test/ui/rfc-2027-object-safe-for-dispatch/downcast-unsafe-trait-objects.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Frfc-2027-object-safe-for-dispatch%2Fdowncast-unsafe-trait-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Frfc-2027-object-safe-for-dispatch%2Fdowncast-unsafe-trait-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2027-object-safe-for-dispatch%2Fdowncast-unsafe-trait-objects.rs?ref=4a8c5b20c7772bc5342b83d4b0696ea216ef75a7", "patch": "@@ -0,0 +1,23 @@\n+// Check that we if we get ahold of an object unsafe trait\n+// object with auto traits and lifetimes, we can downcast it\n+//\n+// check-pass\n+\n+#![feature(object_safe_for_dispatch)]\n+\n+trait Trait: Sized {}\n+\n+fn downcast_auto(t: &(dyn Trait + Send)) -> &dyn Trait {\n+    t\n+}\n+\n+fn downcast_lifetime<'a, 'b, 't>(t: &'a (dyn Trait + 't))\n+                                 -> &'b (dyn Trait + 't)\n+where\n+    'a: 'b,\n+    't: 'a + 'b,\n+{\n+    t\n+}\n+\n+fn main() {}"}, {"sha": "1dea40122656927d57648b81983b3c7757f342a5", "filename": "src/test/ui/rfc-2027-object-safe-for-dispatch/manual-self-impl-for-unsafe-obj.rs", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Frfc-2027-object-safe-for-dispatch%2Fmanual-self-impl-for-unsafe-obj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Frfc-2027-object-safe-for-dispatch%2Fmanual-self-impl-for-unsafe-obj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2027-object-safe-for-dispatch%2Fmanual-self-impl-for-unsafe-obj.rs?ref=4a8c5b20c7772bc5342b83d4b0696ea216ef75a7", "patch": "@@ -0,0 +1,69 @@\n+// Check that we can manually implement an object\n+// unsafe trait for its trait object\n+//\n+// run-pass\n+\n+#![feature(object_safe_for_dispatch)]\n+\n+trait Bad {\n+    fn stat() -> char {\n+        'A'\n+    }\n+    fn virt(&self) -> char {\n+        'B'\n+    }\n+    fn indirect(&self) -> char {\n+        Self::stat()\n+    }\n+}\n+\n+trait Good {\n+    fn good_virt(&self) -> char {\n+        panic!()\n+    }\n+    fn good_indirect(&self) -> char {\n+        panic!()\n+    }\n+}\n+\n+impl<'a> Bad for dyn Bad + 'a {\n+    fn stat() -> char {\n+        'C'\n+    }\n+    fn virt(&self) -> char {\n+        'D'\n+    }\n+}\n+\n+struct Struct {}\n+\n+impl Bad for Struct {}\n+\n+impl Good for Struct {}\n+\n+fn main() {\n+    let s = Struct {};\n+\n+    let mut res = String::new();\n+\n+    // Directly call static\n+    res.push(Struct::stat()); // \"A\"\n+    res.push(<dyn Bad>::stat()); // \"AC\"\n+\n+    let good: &dyn Good = &s;\n+\n+    // These look similar enough...\n+    let bad = unsafe { std::mem::transmute::<&dyn Good, &dyn Bad>(good) };\n+\n+    // Call virtual\n+    res.push(s.virt()); // \"ACB\"\n+    res.push(bad.virt()); // \"ACBD\"\n+\n+    // Indirectly call static\n+    res.push(s.indirect()); // \"ACBDA\"\n+    res.push(bad.indirect()); // \"ACBDAC\"\n+\n+    if &res != \"ACBDAC\" {\n+        panic!();\n+    }\n+}"}, {"sha": "df97d2c13278e941005d900ab4b5af0db3b49beb", "filename": "src/test/ui/rfc-2027-object-safe-for-dispatch/static-dispatch-unsafe-object.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Frfc-2027-object-safe-for-dispatch%2Fstatic-dispatch-unsafe-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Frfc-2027-object-safe-for-dispatch%2Fstatic-dispatch-unsafe-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2027-object-safe-for-dispatch%2Fstatic-dispatch-unsafe-object.rs?ref=4a8c5b20c7772bc5342b83d4b0696ea216ef75a7", "patch": "@@ -0,0 +1,37 @@\n+// Check that we can statically dispatch methods for object\n+// unsafe trait objects, directly and indirectly\n+//\n+// check-pass\n+\n+#![feature(object_safe_for_dispatch)]\n+\n+trait Statics {\n+    fn plain() {}\n+    fn generic<T>() {}\n+}\n+\n+trait Trait: Sized {}\n+\n+impl<'a> Statics for dyn Trait + 'a {}\n+\n+fn static_poly<T: Statics + ?Sized>() {\n+    T::plain();\n+    T::generic::<usize>();\n+}\n+\n+fn inferred_poly<T: Statics + ?Sized>(t: &T) {\n+    static_poly::<T>();\n+    T::plain();\n+    T::generic::<usize>();\n+}\n+\n+fn call(t: &dyn Trait) {\n+    static_poly::<dyn Trait>();\n+    inferred_poly(t);\n+}\n+\n+fn main() {\n+    static_poly::<dyn Trait>();\n+    <dyn Trait>::plain();\n+    <dyn Trait>::generic::<usize>()\n+}"}, {"sha": "cdffc1d86edfb965bde49898d41a014587c446a1", "filename": "src/test/ui/self/arbitrary-self-types-not-object-safe.curr.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.curr.stderr?ref=4a8c5b20c7772bc5342b83d4b0696ea216ef75a7", "patch": "@@ -0,0 +1,24 @@\n+error[E0038]: the trait `Foo` cannot be made into an object\n+  --> $DIR/arbitrary-self-types-not-object-safe.rs:34:32\n+   |\n+LL |     fn foo(self: &Rc<Self>) -> usize;\n+   |        --- method `foo`'s `self` parameter cannot be dispatched on\n+...\n+LL |     let x = Rc::new(5usize) as Rc<dyn Foo>;\n+   |                                ^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n+\n+error[E0038]: the trait `Foo` cannot be made into an object\n+  --> $DIR/arbitrary-self-types-not-object-safe.rs:34:13\n+   |\n+LL |     fn foo(self: &Rc<Self>) -> usize;\n+   |        --- method `foo`'s `self` parameter cannot be dispatched on\n+...\n+LL |     let x = Rc::new(5usize) as Rc<dyn Foo>;\n+   |             ^^^^^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n+   |\n+   = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<std::rc::Rc<dyn Foo>>` for `std::rc::Rc<usize>`\n+   = note: required by cast to type `std::rc::Rc<dyn Foo>`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0038`."}, {"sha": "725632a12126e5e6ab538030229646895f1056e4", "filename": "src/test/ui/self/arbitrary-self-types-not-object-safe.object_safe_for_dispatch.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.object_safe_for_dispatch.stderr?ref=4a8c5b20c7772bc5342b83d4b0696ea216ef75a7", "patch": "@@ -0,0 +1,15 @@\n+error[E0038]: the trait `Foo` cannot be made into an object\n+  --> $DIR/arbitrary-self-types-not-object-safe.rs:34:13\n+   |\n+LL |     fn foo(self: &Rc<Self>) -> usize;\n+   |        --- method `foo`'s `self` parameter cannot be dispatched on\n+...\n+LL |     let x = Rc::new(5usize) as Rc<dyn Foo>;\n+   |             ^^^^^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n+   |\n+   = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<std::rc::Rc<dyn Foo>>` for `std::rc::Rc<usize>`\n+   = note: required by cast to type `std::rc::Rc<dyn Foo>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0038`."}, {"sha": "2eeabad28db0202507f3706b2c15a411e9f8a276", "filename": "src/test/ui/self/arbitrary-self-types-not-object-safe.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.rs?ref=4a8c5b20c7772bc5342b83d4b0696ea216ef75a7", "patch": "@@ -1,3 +1,6 @@\n+// revisions: curr object_safe_for_dispatch\n+\n+#![cfg_attr(object_safe_for_dispatch, feature(object_safe_for_dispatch))]\n #![feature(arbitrary_self_types)]\n \n use std::rc::Rc;\n@@ -29,8 +32,9 @@ impl Bar for usize {\n \n fn make_foo() {\n     let x = Rc::new(5usize) as Rc<dyn Foo>;\n-    //~^ ERROR E0038\n-    //~| ERROR E0038\n+    //[curr]~^ ERROR E0038\n+    //[curr]~| ERROR E0038\n+    //[object_safe_for_dispatch]~^^^ ERROR E0038\n }\n \n fn make_bar() {"}, {"sha": "028e9eedd641a227cd11e60ee2bf952c260d8aa0", "filename": "src/test/ui/traits/trait-object-safety.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-safety.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-safety.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-safety.stderr?ref=4a8c5b20c7772bc5342b83d4b0696ea216ef75a7", "patch": "@@ -8,6 +8,7 @@ LL |     let _: &dyn Tr = &St;\n    |                      ^^^ the trait `Tr` cannot be made into an object\n    |\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&dyn Tr>` for `&St`\n+   = note: required by cast to type `&dyn Tr`\n \n error[E0038]: the trait `Tr` cannot be made into an object\n   --> $DIR/trait-object-safety.rs:15:12"}, {"sha": "9b750d382ec962b227c4b4735ef48b1932ca9632", "filename": "src/test/ui/traits/trait-test-2.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Ftraits%2Ftrait-test-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Ftraits%2Ftrait-test-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-test-2.stderr?ref=4a8c5b20c7772bc5342b83d4b0696ea216ef75a7", "patch": "@@ -33,6 +33,7 @@ LL |     (box 10 as Box<dyn bar>).dup();\n    |      ^^^^^^ the trait `bar` cannot be made into an object\n    |\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<std::boxed::Box<dyn bar>>` for `std::boxed::Box<{integer}>`\n+   = note: required by cast to type `std::boxed::Box<dyn bar>`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "ffdb49a3be5c7219a59d786754b7e528c389f896", "filename": "src/test/ui/wf/wf-convert-unsafe-trait-obj-box.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj-box.rs?ref=4a8c5b20c7772bc5342b83d4b0696ea216ef75a7", "patch": "@@ -0,0 +1,18 @@\n+// Check that we do not allow casts or coercions\n+// to object unsafe trait objects inside a Box\n+\n+#![feature(object_safe_for_dispatch)]\n+\n+trait Trait: Sized {}\n+\n+struct S;\n+\n+impl Trait for S {}\n+\n+fn takes_box(t: Box<dyn Trait>) {}\n+\n+fn main() {\n+    Box::new(S) as Box<dyn Trait>; //~ ERROR E0038\n+    let t_box: Box<dyn Trait> = Box::new(S); //~ ERROR E0038\n+    takes_box(Box::new(S)); //~ ERROR E0038\n+}"}, {"sha": "0b63aef2bce1077110a722478c4f15c60b0124f1", "filename": "src/test/ui/wf/wf-convert-unsafe-trait-obj-box.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj-box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj-box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj-box.stderr?ref=4a8c5b20c7772bc5342b83d4b0696ea216ef75a7", "patch": "@@ -0,0 +1,33 @@\n+error[E0038]: the trait `Trait` cannot be made into an object\n+  --> $DIR/wf-convert-unsafe-trait-obj-box.rs:16:33\n+   |\n+LL |     let t_box: Box<dyn Trait> = Box::new(S);\n+   |                                 ^^^^^^^^^^^ the trait `Trait` cannot be made into an object\n+   |\n+   = note: the trait cannot require that `Self : Sized`\n+   = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<std::boxed::Box<dyn Trait>>` for `std::boxed::Box<S>`\n+   = note: required by cast to type `std::boxed::Box<dyn Trait>`\n+\n+error[E0038]: the trait `Trait` cannot be made into an object\n+  --> $DIR/wf-convert-unsafe-trait-obj-box.rs:17:15\n+   |\n+LL |     takes_box(Box::new(S));\n+   |               ^^^^^^^^^^^ the trait `Trait` cannot be made into an object\n+   |\n+   = note: the trait cannot require that `Self : Sized`\n+   = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<std::boxed::Box<dyn Trait>>` for `std::boxed::Box<S>`\n+   = note: required by cast to type `std::boxed::Box<(dyn Trait + 'static)>`\n+\n+error[E0038]: the trait `Trait` cannot be made into an object\n+  --> $DIR/wf-convert-unsafe-trait-obj-box.rs:15:5\n+   |\n+LL |     Box::new(S) as Box<dyn Trait>;\n+   |     ^^^^^^^^^^^ the trait `Trait` cannot be made into an object\n+   |\n+   = note: the trait cannot require that `Self : Sized`\n+   = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<std::boxed::Box<dyn Trait>>` for `std::boxed::Box<S>`\n+   = note: required by cast to type `std::boxed::Box<dyn Trait>`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0038`."}, {"sha": "143b854ed6b2d344a8b2c73c56d55086264fad01", "filename": "src/test/ui/wf/wf-convert-unsafe-trait-obj.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj.rs?ref=4a8c5b20c7772bc5342b83d4b0696ea216ef75a7", "patch": "@@ -0,0 +1,18 @@\n+// Check that we do not allow casts or coercions\n+// to object unsafe trait objects by ref\n+\n+#![feature(object_safe_for_dispatch)]\n+\n+trait Trait: Sized {}\n+\n+struct S;\n+\n+impl Trait for S {}\n+\n+fn takes_trait(t: &dyn Trait) {}\n+\n+fn main() {\n+    &S as &dyn Trait; //~ ERROR E0038\n+    let t: &dyn Trait = &S; //~ ERROR E0038\n+    takes_trait(&S); //~ ERROR E0038\n+}"}, {"sha": "7aeefd731fb28d6afbcbb997201edf4612167e6b", "filename": "src/test/ui/wf/wf-convert-unsafe-trait-obj.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj.stderr?ref=4a8c5b20c7772bc5342b83d4b0696ea216ef75a7", "patch": "@@ -0,0 +1,33 @@\n+error[E0038]: the trait `Trait` cannot be made into an object\n+  --> $DIR/wf-convert-unsafe-trait-obj.rs:16:25\n+   |\n+LL |     let t: &dyn Trait = &S;\n+   |                         ^^ the trait `Trait` cannot be made into an object\n+   |\n+   = note: the trait cannot require that `Self : Sized`\n+   = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&dyn Trait>` for `&S`\n+   = note: required by cast to type `&dyn Trait`\n+\n+error[E0038]: the trait `Trait` cannot be made into an object\n+  --> $DIR/wf-convert-unsafe-trait-obj.rs:17:17\n+   |\n+LL |     takes_trait(&S);\n+   |                 ^^ the trait `Trait` cannot be made into an object\n+   |\n+   = note: the trait cannot require that `Self : Sized`\n+   = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&dyn Trait>` for `&S`\n+   = note: required by cast to type `&dyn Trait`\n+\n+error[E0038]: the trait `Trait` cannot be made into an object\n+  --> $DIR/wf-convert-unsafe-trait-obj.rs:15:5\n+   |\n+LL |     &S as &dyn Trait;\n+   |     ^^ the trait `Trait` cannot be made into an object\n+   |\n+   = note: the trait cannot require that `Self : Sized`\n+   = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&dyn Trait>` for `&S`\n+   = note: required by cast to type `&dyn Trait`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0038`."}, {"sha": "c8731a8ecafa4fb57eac79fe31970082ccdf5376", "filename": "src/test/ui/wf/wf-unsafe-trait-obj-match.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fwf%2Fwf-unsafe-trait-obj-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fwf%2Fwf-unsafe-trait-obj-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-unsafe-trait-obj-match.rs?ref=4a8c5b20c7772bc5342b83d4b0696ea216ef75a7", "patch": "@@ -0,0 +1,29 @@\n+// Check that we do not allow coercions to object\n+// unsafe trait objects in match arms\n+\n+#![feature(object_safe_for_dispatch)]\n+\n+trait Trait: Sized {}\n+\n+struct S;\n+\n+impl Trait for S {}\n+\n+struct R;\n+\n+impl Trait for R {}\n+\n+fn opt() -> Option<()> {\n+    Some(())\n+}\n+\n+fn main() {\n+    match opt() {\n+        Some(()) => &S,\n+        None => &R,  //~ ERROR E0308\n+    }\n+    let t: &dyn Trait = match opt() { //~ ERROR E0038\n+        Some(()) => &S, //~ ERROR E0038\n+        None => &R,\n+    };\n+}"}, {"sha": "185b1e6c36b5569068fdbb77ef0d4248daeb15fa", "filename": "src/test/ui/wf/wf-unsafe-trait-obj-match.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fwf%2Fwf-unsafe-trait-obj-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7/src%2Ftest%2Fui%2Fwf%2Fwf-unsafe-trait-obj-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-unsafe-trait-obj-match.stderr?ref=4a8c5b20c7772bc5342b83d4b0696ea216ef75a7", "patch": "@@ -0,0 +1,38 @@\n+error[E0308]: match arms have incompatible types\n+  --> $DIR/wf-unsafe-trait-obj-match.rs:23:17\n+   |\n+LL | /     match opt() {\n+LL | |         Some(()) => &S,\n+   | |                     -- this is found to be of type `&S`\n+LL | |         None => &R,\n+   | |                 ^^ expected struct `S`, found struct `R`\n+LL | |     }\n+   | |_____- `match` arms have incompatible types\n+   |\n+   = note: expected type `&S`\n+              found type `&R`\n+\n+error[E0038]: the trait `Trait` cannot be made into an object\n+  --> $DIR/wf-unsafe-trait-obj-match.rs:26:21\n+   |\n+LL |         Some(()) => &S,\n+   |                     ^^ the trait `Trait` cannot be made into an object\n+   |\n+   = note: the trait cannot require that `Self : Sized`\n+   = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&dyn Trait>` for `&S`\n+   = note: required by cast to type `&dyn Trait`\n+\n+error[E0038]: the trait `Trait` cannot be made into an object\n+  --> $DIR/wf-unsafe-trait-obj-match.rs:25:25\n+   |\n+LL |     let t: &dyn Trait = match opt() {\n+   |                         ^^^^^^^^^^^ the trait `Trait` cannot be made into an object\n+   |\n+   = note: the trait cannot require that `Self : Sized`\n+   = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&dyn Trait>` for `&R`\n+   = note: required by cast to type `&dyn Trait`\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0038, E0308.\n+For more information about an error, try `rustc --explain E0038`."}]}