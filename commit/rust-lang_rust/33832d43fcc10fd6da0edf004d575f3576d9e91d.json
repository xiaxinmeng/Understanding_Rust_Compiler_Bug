{"sha": "33832d43fcc10fd6da0edf004d575f3576d9e91d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzODMyZDQzZmNjMTBmZDZkYTBlZGYwMDRkNTc1ZjM1NzZkOWU5MWQ=", "commit": {"author": {"name": "Leander Tentrup", "email": "leander.tentrup@gmail.com", "date": "2020-07-13T20:59:42Z"}, "committer": {"name": "Leander Tentrup", "email": "leander.tentrup@gmail.com", "date": "2020-07-15T14:40:38Z"}, "message": "Highlight punctuation as `HighlightTag::Operator`", "tree": {"sha": "f39cd0be40d8abda16eb5036ccc7219eb9ba282c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f39cd0be40d8abda16eb5036ccc7219eb9ba282c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33832d43fcc10fd6da0edf004d575f3576d9e91d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33832d43fcc10fd6da0edf004d575f3576d9e91d", "html_url": "https://github.com/rust-lang/rust/commit/33832d43fcc10fd6da0edf004d575f3576d9e91d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33832d43fcc10fd6da0edf004d575f3576d9e91d/comments", "author": {"login": "ltentrup", "id": 201808, "node_id": "MDQ6VXNlcjIwMTgwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/201808?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ltentrup", "html_url": "https://github.com/ltentrup", "followers_url": "https://api.github.com/users/ltentrup/followers", "following_url": "https://api.github.com/users/ltentrup/following{/other_user}", "gists_url": "https://api.github.com/users/ltentrup/gists{/gist_id}", "starred_url": "https://api.github.com/users/ltentrup/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ltentrup/subscriptions", "organizations_url": "https://api.github.com/users/ltentrup/orgs", "repos_url": "https://api.github.com/users/ltentrup/repos", "events_url": "https://api.github.com/users/ltentrup/events{/privacy}", "received_events_url": "https://api.github.com/users/ltentrup/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ltentrup", "id": 201808, "node_id": "MDQ6VXNlcjIwMTgwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/201808?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ltentrup", "html_url": "https://github.com/ltentrup", "followers_url": "https://api.github.com/users/ltentrup/followers", "following_url": "https://api.github.com/users/ltentrup/following{/other_user}", "gists_url": "https://api.github.com/users/ltentrup/gists{/gist_id}", "starred_url": "https://api.github.com/users/ltentrup/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ltentrup/subscriptions", "organizations_url": "https://api.github.com/users/ltentrup/orgs", "repos_url": "https://api.github.com/users/ltentrup/repos", "events_url": "https://api.github.com/users/ltentrup/events{/privacy}", "received_events_url": "https://api.github.com/users/ltentrup/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57652fc9d439de1315f78fb6aba34e834cb7f727", "url": "https://api.github.com/repos/rust-lang/rust/commits/57652fc9d439de1315f78fb6aba34e834cb7f727", "html_url": "https://github.com/rust-lang/rust/commit/57652fc9d439de1315f78fb6aba34e834cb7f727"}], "stats": {"total": 395, "additions": 198, "deletions": 197}, "files": [{"sha": "6067207d970f2c28b18a8fec7b300e97bd92b6bb", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/33832d43fcc10fd6da0edf004d575f3576d9e91d/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33832d43fcc10fd6da0edf004d575f3576d9e91d/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=33832d43fcc10fd6da0edf004d575f3576d9e91d", "patch": "@@ -553,6 +553,7 @@ fn highlight_element(\n         T![!] if element.parent().and_then(ast::MacroCall::cast).is_some() => {\n             Highlight::new(HighlightTag::Macro)\n         }\n+        p if p.is_punct() => HighlightTag::Operator.into(),\n \n         k if k.is_keyword() => {\n             let h = Highlight::new(HighlightTag::Keyword);"}, {"sha": "8170ad895220cacddd19c4f2bdaa77f68cafbb89", "filename": "crates/ra_ide/test_data/highlight_doctest.html", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/33832d43fcc10fd6da0edf004d575f3576d9e91d/crates%2Fra_ide%2Ftest_data%2Fhighlight_doctest.html", "raw_url": "https://github.com/rust-lang/rust/raw/33832d43fcc10fd6da0edf004d575f3576d9e91d/crates%2Fra_ide%2Ftest_data%2Fhighlight_doctest.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Ftest_data%2Fhighlight_doctest.html?ref=33832d43fcc10fd6da0edf004d575f3576d9e91d", "patch": "@@ -36,67 +36,67 @@\n .unresolved_reference { color: #FC5555; text-decoration: wavy underline; }\n </style>\n <pre><code><span class=\"comment documentation\">/// ```</span>\n-<span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"generic injected\"> _ = </span><span class=\"string_literal injected\">\"early doctests should not go boom\"</span><span class=\"generic injected\">;</span>\n-<span class=\"comment documentation\">/// ```</span>\n-<span class=\"keyword\">struct</span> <span class=\"struct declaration\">Foo</span> {\n-    <span class=\"field declaration\">bar</span>: <span class=\"builtin_type\">bool</span>,\n-}\n+<span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"generic injected\"> </span><span class=\"operator injected\">_</span><span class=\"generic injected\"> </span><span class=\"operator injected\">=</span><span class=\"generic injected\"> </span><span class=\"string_literal injected\">\"early doctests should not go boom\"</span><span class=\"operator injected\">;</span><span class=\"operator injected\">\n+</span><span class=\"comment documentation\">/// ```</span>\n+<span class=\"keyword\">struct</span> <span class=\"struct declaration\">Foo</span> <span class=\"operator\">{</span>\n+    <span class=\"field declaration\">bar</span><span class=\"operator\">:</span> <span class=\"builtin_type\">bool</span><span class=\"operator\">,</span>\n+<span class=\"operator\">}</span>\n \n-<span class=\"keyword\">impl</span> <span class=\"struct\">Foo</span> {\n-    <span class=\"keyword\">pub</span> <span class=\"keyword\">const</span> <span class=\"constant declaration\">bar</span>: <span class=\"builtin_type\">bool</span> = <span class=\"bool_literal\">true</span>;\n+<span class=\"keyword\">impl</span> <span class=\"struct\">Foo</span> <span class=\"operator\">{</span>\n+    <span class=\"keyword\">pub</span> <span class=\"keyword\">const</span> <span class=\"constant declaration\">bar</span><span class=\"operator\">:</span> <span class=\"builtin_type\">bool</span> <span class=\"operator\">=</span> <span class=\"bool_literal\">true</span><span class=\"operator\">;</span>\n \n     <span class=\"comment documentation\">/// Constructs a new `Foo`.</span>\n     <span class=\"comment documentation\">///</span>\n     <span class=\"comment documentation\">/// # Examples</span>\n     <span class=\"comment documentation\">///</span>\n     <span class=\"comment documentation\">/// ```</span>\n-    <span class=\"comment documentation\">/// #</span><span class=\"generic injected\"> </span><span class=\"attribute injected\">#![</span><span class=\"function attribute injected\">allow</span><span class=\"attribute injected\">(unused_mut)]</span>\n-    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"generic injected\"> </span><span class=\"keyword injected\">mut</span><span class=\"generic injected\"> </span><span class=\"variable declaration injected mutable\">foo</span><span class=\"generic injected\">: </span><span class=\"struct injected\">Foo</span><span class=\"generic injected\"> = </span><span class=\"struct injected\">Foo</span><span class=\"generic injected\">::</span><span class=\"function injected\">new</span><span class=\"generic injected\">();</span>\n-    <span class=\"comment documentation\">/// ```</span>\n-    <span class=\"keyword\">pub</span> <span class=\"keyword\">const</span> <span class=\"keyword\">fn</span> <span class=\"function declaration\">new</span>() -&gt; <span class=\"struct\">Foo</span> {\n-        <span class=\"struct\">Foo</span> { <span class=\"field\">bar</span>: <span class=\"bool_literal\">true</span> }\n-    }\n+    <span class=\"comment documentation\">/// #</span><span class=\"generic injected\"> </span><span class=\"operator injected\">#</span><span class=\"operator injected\">!</span><span class=\"operator injected\">[</span><span class=\"function attribute injected\">allow</span><span class=\"operator injected\">(</span><span class=\"attribute injected\">unused_mut</span><span class=\"operator injected\">)</span><span class=\"operator injected\">]</span>\n+    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"generic injected\"> </span><span class=\"keyword injected\">mut</span><span class=\"generic injected\"> </span><span class=\"variable declaration injected mutable\">foo</span><span class=\"operator injected\">:</span><span class=\"generic injected\"> </span><span class=\"struct injected\">Foo</span><span class=\"generic injected\"> </span><span class=\"operator injected\">=</span><span class=\"generic injected\"> </span><span class=\"struct injected\">Foo</span><span class=\"operator injected\">::</span><span class=\"function injected\">new</span><span class=\"operator injected\">(</span><span class=\"operator injected\">)</span><span class=\"operator injected\">;</span><span class=\"operator injected\">\n+</span>    <span class=\"comment documentation\">/// ```</span>\n+    <span class=\"keyword\">pub</span> <span class=\"keyword\">const</span> <span class=\"keyword\">fn</span> <span class=\"function declaration\">new</span><span class=\"operator\">(</span><span class=\"operator\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"struct\">Foo</span> <span class=\"operator\">{</span>\n+        <span class=\"struct\">Foo</span> <span class=\"operator\">{</span> <span class=\"field\">bar</span><span class=\"operator\">:</span> <span class=\"bool_literal\">true</span> <span class=\"operator\">}</span>\n+    <span class=\"operator\">}</span>\n \n     <span class=\"comment documentation\">/// `bar` method on `Foo`.</span>\n     <span class=\"comment documentation\">///</span>\n     <span class=\"comment documentation\">/// # Examples</span>\n     <span class=\"comment documentation\">///</span>\n     <span class=\"comment documentation\">/// ```</span>\n-    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">use</span><span class=\"generic injected\"> </span><span class=\"module injected\">x</span><span class=\"generic injected\">::</span><span class=\"module injected\">y</span><span class=\"generic injected\">;</span>\n+    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">use</span><span class=\"generic injected\"> </span><span class=\"module injected\">x</span><span class=\"operator injected\">::</span><span class=\"module injected\">y</span><span class=\"operator injected\">;</span>\n     <span class=\"comment documentation\">///</span>\n-    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"generic injected\"> </span><span class=\"variable declaration injected\">foo</span><span class=\"generic injected\"> = </span><span class=\"struct injected\">Foo</span><span class=\"generic injected\">::</span><span class=\"function injected\">new</span><span class=\"generic injected\">();</span>\n+    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"generic injected\"> </span><span class=\"variable declaration injected\">foo</span><span class=\"generic injected\"> </span><span class=\"operator injected\">=</span><span class=\"generic injected\"> </span><span class=\"struct injected\">Foo</span><span class=\"operator injected\">::</span><span class=\"function injected\">new</span><span class=\"operator injected\">(</span><span class=\"operator injected\">)</span><span class=\"operator injected\">;</span>\n     <span class=\"comment documentation\">///</span>\n     <span class=\"comment documentation\">/// </span><span class=\"comment injected\">// calls bar on foo</span>\n-    <span class=\"comment documentation\">/// </span><span class=\"macro injected\">assert!</span><span class=\"generic injected\">(foo.bar());</span>\n+    <span class=\"comment documentation\">/// </span><span class=\"macro injected\">assert!</span><span class=\"operator injected\">(</span><span class=\"generic injected\">foo</span><span class=\"operator injected\">.</span><span class=\"generic injected\">bar</span><span class=\"operator injected\">(</span><span class=\"operator injected\">)</span><span class=\"operator injected\">)</span><span class=\"operator injected\">;</span>\n     <span class=\"comment documentation\">///</span>\n-    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"generic injected\"> </span><span class=\"variable declaration injected\">bar</span><span class=\"generic injected\"> = </span><span class=\"variable injected\">foo</span><span class=\"generic injected\">.</span><span class=\"field injected\">bar</span><span class=\"generic injected\"> || </span><span class=\"struct injected\">Foo</span><span class=\"generic injected\">::</span><span class=\"constant injected\">bar</span><span class=\"generic injected\">;</span>\n+    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"generic injected\"> </span><span class=\"variable declaration injected\">bar</span><span class=\"generic injected\"> </span><span class=\"operator injected\">=</span><span class=\"generic injected\"> </span><span class=\"variable injected\">foo</span><span class=\"operator injected\">.</span><span class=\"field injected\">bar</span><span class=\"generic injected\"> </span><span class=\"operator injected\">||</span><span class=\"generic injected\"> </span><span class=\"struct injected\">Foo</span><span class=\"operator injected\">::</span><span class=\"constant injected\">bar</span><span class=\"operator injected\">;</span>\n     <span class=\"comment documentation\">///</span>\n     <span class=\"comment documentation\">/// </span><span class=\"comment injected\">/* multi-line\n     </span><span class=\"comment documentation\">/// </span><span class=\"comment injected\">       comment */</span>\n     <span class=\"comment documentation\">///</span>\n-    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"generic injected\"> </span><span class=\"variable declaration injected\">multi_line_string</span><span class=\"generic injected\"> = </span><span class=\"string_literal injected\">\"Foo\n+    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"generic injected\"> </span><span class=\"variable declaration injected\">multi_line_string</span><span class=\"generic injected\"> </span><span class=\"operator injected\">=</span><span class=\"generic injected\"> </span><span class=\"string_literal injected\">\"Foo\n     </span><span class=\"comment documentation\">/// </span><span class=\"string_literal injected\">  bar\n-    </span><span class=\"comment documentation\">/// </span><span class=\"string_literal injected\">         \"</span><span class=\"generic injected\">;</span>\n+    </span><span class=\"comment documentation\">/// </span><span class=\"string_literal injected\">         \"</span><span class=\"operator injected\">;</span>\n     <span class=\"comment documentation\">///</span>\n     <span class=\"comment documentation\">/// ```</span>\n     <span class=\"comment documentation\">///</span>\n     <span class=\"comment documentation\">/// ```rust,no_run</span>\n-    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"generic injected\"> </span><span class=\"variable declaration injected\">foobar</span><span class=\"generic injected\"> = </span><span class=\"struct injected\">Foo</span><span class=\"generic injected\">::</span><span class=\"function injected\">new</span><span class=\"generic injected\">().</span><span class=\"function injected\">bar</span><span class=\"generic injected\">();</span>\n-    <span class=\"comment documentation\">/// ```</span>\n+    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"generic injected\"> </span><span class=\"variable declaration injected\">foobar</span><span class=\"generic injected\"> </span><span class=\"operator injected\">=</span><span class=\"generic injected\"> </span><span class=\"struct injected\">Foo</span><span class=\"operator injected\">::</span><span class=\"function injected\">new</span><span class=\"operator injected\">(</span><span class=\"operator injected\">)</span><span class=\"operator injected\">.</span><span class=\"function injected\">bar</span><span class=\"operator injected\">(</span><span class=\"operator injected\">)</span><span class=\"operator injected\">;</span><span class=\"operator injected\">\n+</span>    <span class=\"comment documentation\">/// ```</span>\n     <span class=\"comment documentation\">///</span>\n     <span class=\"comment documentation\">/// ```sh</span>\n     <span class=\"comment documentation\">/// echo 1</span>\n     <span class=\"comment documentation\">/// ```</span>\n-    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function declaration\">foo</span>(&<span class=\"self_keyword\">self</span>) -&gt; <span class=\"builtin_type\">bool</span> {\n+    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function declaration\">foo</span><span class=\"operator\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"operator\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">bool</span> <span class=\"operator\">{</span>\n         <span class=\"bool_literal\">true</span>\n-    }\n-}\n+    <span class=\"operator\">}</span>\n+<span class=\"operator\">}</span>\n \n <span class=\"comment documentation\">/// ```</span>\n-<span class=\"comment documentation\">/// </span><span class=\"macro injected\">noop!</span><span class=\"generic injected\">(</span><span class=\"numeric_literal injected\">1</span><span class=\"generic injected\">);</span>\n-<span class=\"comment documentation\">/// ```</span>\n-<span class=\"macro\">macro_rules!</span> <span class=\"macro declaration\">noop</span> {\n-    ($expr:expr) =&gt; {\n-        $expr\n-    }\n-}</code></pre>\n\\ No newline at end of file\n+<span class=\"comment documentation\">/// </span><span class=\"macro injected\">noop!</span><span class=\"operator injected\">(</span><span class=\"numeric_literal injected\">1</span><span class=\"operator injected\">)</span><span class=\"operator injected\">;</span><span class=\"operator injected\">\n+</span><span class=\"comment documentation\">/// ```</span>\n+<span class=\"macro\">macro_rules!</span> <span class=\"macro declaration\">noop</span> <span class=\"operator\">{</span>\n+    <span class=\"operator\">(</span><span class=\"operator\">$</span>expr<span class=\"operator\">:</span>expr<span class=\"operator\">)</span> <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"operator\">{</span>\n+        <span class=\"operator\">$</span>expr\n+    <span class=\"operator\">}</span>\n+<span class=\"operator\">}</span></code></pre>\n\\ No newline at end of file"}, {"sha": "62cba023dd4df269318ab68e808c76b9648375c9", "filename": "crates/ra_ide/test_data/highlight_injection.html", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/33832d43fcc10fd6da0edf004d575f3576d9e91d/crates%2Fra_ide%2Ftest_data%2Fhighlight_injection.html", "raw_url": "https://github.com/rust-lang/rust/raw/33832d43fcc10fd6da0edf004d575f3576d9e91d/crates%2Fra_ide%2Ftest_data%2Fhighlight_injection.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Ftest_data%2Fhighlight_injection.html?ref=33832d43fcc10fd6da0edf004d575f3576d9e91d", "patch": "@@ -35,14 +35,14 @@\n \n .unresolved_reference { color: #FC5555; text-decoration: wavy underline; }\n </style>\n-<pre><code><span class=\"keyword\">fn</span> <span class=\"function declaration\">fixture</span>(<span class=\"value_param declaration\">ra_fixture</span>: &<span class=\"builtin_type\">str</span>) {}\n+<pre><code><span class=\"keyword\">fn</span> <span class=\"function declaration\">fixture</span><span class=\"operator\">(</span><span class=\"value_param declaration\">ra_fixture</span><span class=\"operator\">:</span> <span class=\"operator\">&</span><span class=\"builtin_type\">str</span><span class=\"operator\">)</span> <span class=\"operator\">{</span><span class=\"operator\">}</span>\n \n-<span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span>() {\n-    <span class=\"function\">fixture</span>(<span class=\"string_literal\">r#\"</span>\n-        <span class=\"keyword\">trait</span> <span class=\"trait declaration\">Foo</span> {\n-            <span class=\"keyword\">fn</span> <span class=\"function declaration\">foo</span>() {\n-                <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"2 + 2 = {}\"</span>, <span class=\"numeric_literal\">4</span>);\n-            }\n-        }<span class=\"string_literal\">\"#</span>\n-    );\n-}</code></pre>\n\\ No newline at end of file\n+<span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span><span class=\"operator\">(</span><span class=\"operator\">)</span> <span class=\"operator\">{</span>\n+    <span class=\"function\">fixture</span><span class=\"operator\">(</span><span class=\"string_literal\">r#\"</span>\n+        <span class=\"keyword\">trait</span> <span class=\"trait declaration\">Foo</span> <span class=\"operator\">{</span>\n+            <span class=\"keyword\">fn</span> <span class=\"function declaration\">foo</span><span class=\"operator\">(</span><span class=\"operator\">)</span> <span class=\"operator\">{</span>\n+                <span class=\"macro\">println!</span><span class=\"operator\">(</span><span class=\"string_literal\">\"2 + 2 = {}\"</span><span class=\"operator\">,</span> <span class=\"numeric_literal\">4</span><span class=\"operator\">)</span><span class=\"operator\">;</span>\n+            <span class=\"operator\">}</span>\n+        <span class=\"operator\">}</span><span class=\"string_literal\">\"#</span>\n+    <span class=\"operator\">)</span><span class=\"operator\">;</span>\n+<span class=\"operator\">}</span></code></pre>\n\\ No newline at end of file"}, {"sha": "1ee7bdee4913c6f5087f0e2788166f44eeeabdc2", "filename": "crates/ra_ide/test_data/highlight_strings.html", "status": "modified", "additions": 52, "deletions": 52, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/33832d43fcc10fd6da0edf004d575f3576d9e91d/crates%2Fra_ide%2Ftest_data%2Fhighlight_strings.html", "raw_url": "https://github.com/rust-lang/rust/raw/33832d43fcc10fd6da0edf004d575f3576d9e91d/crates%2Fra_ide%2Ftest_data%2Fhighlight_strings.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Ftest_data%2Fhighlight_strings.html?ref=33832d43fcc10fd6da0edf004d575f3576d9e91d", "patch": "@@ -35,62 +35,62 @@\n \n .unresolved_reference { color: #FC5555; text-decoration: wavy underline; }\n </style>\n-<pre><code><span class=\"macro\">macro_rules!</span> <span class=\"macro declaration\">println</span> {\n-    ($($arg:tt)*) =&gt; ({\n-        $<span class=\"keyword\">crate</span>::io::_print($<span class=\"keyword\">crate</span>::format_args_nl!($($arg)*));\n-    })\n-}\n+<pre><code><span class=\"macro\">macro_rules!</span> <span class=\"macro declaration\">println</span> <span class=\"operator\">{</span>\n+    <span class=\"operator\">(</span><span class=\"operator\">$</span><span class=\"operator\">(</span><span class=\"operator\">$</span>arg<span class=\"operator\">:</span>tt<span class=\"operator\">)</span>*<span class=\"operator\">)</span> <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"operator\">(</span><span class=\"operator\">{</span>\n+        <span class=\"operator\">$</span><span class=\"keyword\">crate</span><span class=\"operator\">:</span><span class=\"operator\">:</span>io<span class=\"operator\">:</span><span class=\"operator\">:</span>_print<span class=\"operator\">(</span><span class=\"operator\">$</span><span class=\"keyword\">crate</span><span class=\"operator\">:</span><span class=\"operator\">:</span>format_args_nl<span class=\"operator\">!</span><span class=\"operator\">(</span><span class=\"operator\">$</span><span class=\"operator\">(</span><span class=\"operator\">$</span>arg<span class=\"operator\">)</span>*<span class=\"operator\">)</span><span class=\"operator\">)</span><span class=\"operator\">;</span>\n+    <span class=\"operator\">}</span><span class=\"operator\">)</span>\n+<span class=\"operator\">}</span>\n #[rustc_builtin_macro]\n-<span class=\"macro\">macro_rules!</span> <span class=\"macro declaration\">format_args_nl</span> {\n-    ($fmt:expr) =&gt; {{ <span class=\"comment\">/* compiler built-in */</span> }};\n-    ($fmt:expr, $($args:tt)*) =&gt; {{ <span class=\"comment\">/* compiler built-in */</span> }};\n-}\n+<span class=\"macro\">macro_rules!</span> <span class=\"macro declaration\">format_args_nl</span> <span class=\"operator\">{</span>\n+    <span class=\"operator\">(</span><span class=\"operator\">$</span>fmt<span class=\"operator\">:</span>expr<span class=\"operator\">)</span> <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"operator\">{</span><span class=\"operator\">{</span> <span class=\"comment\">/* compiler built-in */</span> <span class=\"operator\">}</span><span class=\"operator\">}</span><span class=\"operator\">;</span>\n+    <span class=\"operator\">(</span><span class=\"operator\">$</span>fmt<span class=\"operator\">:</span>expr<span class=\"operator\">,</span> <span class=\"operator\">$</span><span class=\"operator\">(</span><span class=\"operator\">$</span>args<span class=\"operator\">:</span>tt<span class=\"operator\">)</span>*<span class=\"operator\">)</span> <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"operator\">{</span><span class=\"operator\">{</span> <span class=\"comment\">/* compiler built-in */</span> <span class=\"operator\">}</span><span class=\"operator\">}</span><span class=\"operator\">;</span>\n+<span class=\"operator\">}</span>\n \n-<span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span>() {\n+<span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span><span class=\"operator\">(</span><span class=\"operator\">)</span> <span class=\"operator\">{</span>\n     <span class=\"comment\">// from https://doc.rust-lang.org/std/fmt/index.html</span>\n-    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"Hello\"</span>);                 <span class=\"comment\">// =&gt; \"Hello\"</span>\n-    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"Hello, </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span>, <span class=\"string_literal\">\"world\"</span>);   <span class=\"comment\">// =&gt; \"Hello, world!\"</span>\n-    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"The number is </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span>, <span class=\"numeric_literal\">1</span>);   <span class=\"comment\">// =&gt; \"The number is 1\"</span>\n-    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">?</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span>, (<span class=\"numeric_literal\">3</span>, <span class=\"numeric_literal\">4</span>));          <span class=\"comment\">// =&gt; \"(3, 4)\"</span>\n-    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"variable\">value</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span>, value=<span class=\"numeric_literal\">4</span>);      <span class=\"comment\">// =&gt; \"4\"</span>\n-    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span>, <span class=\"numeric_literal\">1</span>, <span class=\"numeric_literal\">2</span>);           <span class=\"comment\">// =&gt; \"1 2\"</span>\n-    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">4</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span>, <span class=\"numeric_literal\">42</span>);             <span class=\"comment\">// =&gt; \"0042\" with leading zerosV</span>\n-    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span>, <span class=\"numeric_literal\">1</span>, <span class=\"numeric_literal\">2</span>);   <span class=\"comment\">// =&gt; \"2 1 1 2\"</span>\n-    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"variable\">argument</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span>, argument = <span class=\"string_literal\">\"test\"</span>);   <span class=\"comment\">// =&gt; \"test\"</span>\n-    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"variable\">name</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span>, <span class=\"numeric_literal\">1</span>, name = <span class=\"numeric_literal\">2</span>);          <span class=\"comment\">// =&gt; \"2 1\"</span>\n-    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"variable\">a</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"variable\">c</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"variable\">b</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span>, a=<span class=\"string_literal\">\"a\"</span>, b=<span class=\"char_literal\">'b'</span>, c=<span class=\"numeric_literal\">3</span>);  <span class=\"comment\">// =&gt; \"a 3 b\"</span>\n-    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"{{</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">}}\"</span>, <span class=\"numeric_literal\">2</span>);                       <span class=\"comment\">// =&gt; \"{2}\"</span>\n-    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span>, <span class=\"string_literal\">\"x\"</span>);\n-    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span>, <span class=\"string_literal\">\"x\"</span>, <span class=\"numeric_literal\">5</span>);\n-    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span>, <span class=\"numeric_literal\">5</span>, <span class=\"string_literal\">\"x\"</span>);\n-    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"variable\">width</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span>, <span class=\"string_literal\">\"x\"</span>, width = <span class=\"numeric_literal\">5</span>);\n-    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">&lt;</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span>, <span class=\"string_literal\">\"x\"</span>);\n-    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">-</span><span class=\"format_specifier\">&lt;</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span>, <span class=\"string_literal\">\"x\"</span>);\n-    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">^</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span>, <span class=\"string_literal\">\"x\"</span>);\n-    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">&gt;</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span>, <span class=\"string_literal\">\"x\"</span>);\n-    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">+</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span>, <span class=\"numeric_literal\">5</span>);\n-    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">#</span><span class=\"variable\">x</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span>, <span class=\"numeric_literal\">27</span>);\n-    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span>, <span class=\"numeric_literal\">5</span>);\n-    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span>, -<span class=\"numeric_literal\">5</span>);\n-    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">#</span><span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">10</span><span class=\"variable\">x</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span>, <span class=\"numeric_literal\">27</span>);\n-    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span>, <span class=\"string_literal\">\"x\"</span>, <span class=\"numeric_literal\">0.01</span>);\n-    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">2</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span>, <span class=\"numeric_literal\">5</span>, <span class=\"string_literal\">\"x\"</span>, <span class=\"numeric_literal\">0.01</span>);\n-    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">2</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span>, <span class=\"string_literal\">\"x\"</span>, <span class=\"numeric_literal\">5</span>, <span class=\"numeric_literal\">0.01</span>);\n-    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span>,    <span class=\"string_literal\">\"x\"</span>, <span class=\"numeric_literal\">5</span>, <span class=\"numeric_literal\">0.01</span>);\n-    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">2</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span>,   <span class=\"string_literal\">\"x\"</span>, <span class=\"numeric_literal\">5</span>, <span class=\"numeric_literal\">0.01</span>);\n-    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"variable\">number</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"variable\">prec</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span>, <span class=\"string_literal\">\"x\"</span>, prec = <span class=\"numeric_literal\">5</span>, number = <span class=\"numeric_literal\">0.01</span>);\n-    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">, `</span><span class=\"format_specifier\">{</span><span class=\"variable\">name</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">` has 3 fractional digits\"</span>, <span class=\"string_literal\">\"Hello\"</span>, <span class=\"numeric_literal\">3</span>, name=<span class=\"numeric_literal\">1234.56</span>);\n-    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">, `</span><span class=\"format_specifier\">{</span><span class=\"variable\">name</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">` has 3 characters\"</span>, <span class=\"string_literal\">\"Hello\"</span>, <span class=\"numeric_literal\">3</span>, name=<span class=\"string_literal\">\"1234.56\"</span>);\n-    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">, `</span><span class=\"format_specifier\">{</span><span class=\"variable\">name</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">&gt;</span><span class=\"numeric_literal\">8</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">` has 3 right-aligned characters\"</span>, <span class=\"string_literal\">\"Hello\"</span>, <span class=\"numeric_literal\">3</span>, name=<span class=\"string_literal\">\"1234.56\"</span>);\n-    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"Hello {{}}\"</span>);\n-    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"{{ Hello\"</span>);\n+    <span class=\"macro\">println!</span><span class=\"operator\">(</span><span class=\"string_literal\">\"Hello\"</span><span class=\"operator\">)</span><span class=\"operator\">;</span>                 <span class=\"comment\">// =&gt; \"Hello\"</span>\n+    <span class=\"macro\">println!</span><span class=\"operator\">(</span><span class=\"string_literal\">\"Hello, </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"operator\">,</span> <span class=\"string_literal\">\"world\"</span><span class=\"operator\">)</span><span class=\"operator\">;</span>   <span class=\"comment\">// =&gt; \"Hello, world!\"</span>\n+    <span class=\"macro\">println!</span><span class=\"operator\">(</span><span class=\"string_literal\">\"The number is </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"operator\">,</span> <span class=\"numeric_literal\">1</span><span class=\"operator\">)</span><span class=\"operator\">;</span>   <span class=\"comment\">// =&gt; \"The number is 1\"</span>\n+    <span class=\"macro\">println!</span><span class=\"operator\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">?</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"operator\">,</span> <span class=\"operator\">(</span><span class=\"numeric_literal\">3</span><span class=\"operator\">,</span> <span class=\"numeric_literal\">4</span><span class=\"operator\">)</span><span class=\"operator\">)</span><span class=\"operator\">;</span>          <span class=\"comment\">// =&gt; \"(3, 4)\"</span>\n+    <span class=\"macro\">println!</span><span class=\"operator\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"variable\">value</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"operator\">,</span> value<span class=\"operator\">=</span><span class=\"numeric_literal\">4</span><span class=\"operator\">)</span><span class=\"operator\">;</span>      <span class=\"comment\">// =&gt; \"4\"</span>\n+    <span class=\"macro\">println!</span><span class=\"operator\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"operator\">,</span> <span class=\"numeric_literal\">1</span><span class=\"operator\">,</span> <span class=\"numeric_literal\">2</span><span class=\"operator\">)</span><span class=\"operator\">;</span>           <span class=\"comment\">// =&gt; \"1 2\"</span>\n+    <span class=\"macro\">println!</span><span class=\"operator\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">4</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"operator\">,</span> <span class=\"numeric_literal\">42</span><span class=\"operator\">)</span><span class=\"operator\">;</span>             <span class=\"comment\">// =&gt; \"0042\" with leading zerosV</span>\n+    <span class=\"macro\">println!</span><span class=\"operator\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"operator\">,</span> <span class=\"numeric_literal\">1</span><span class=\"operator\">,</span> <span class=\"numeric_literal\">2</span><span class=\"operator\">)</span><span class=\"operator\">;</span>   <span class=\"comment\">// =&gt; \"2 1 1 2\"</span>\n+    <span class=\"macro\">println!</span><span class=\"operator\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"variable\">argument</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"operator\">,</span> argument <span class=\"operator\">=</span> <span class=\"string_literal\">\"test\"</span><span class=\"operator\">)</span><span class=\"operator\">;</span>   <span class=\"comment\">// =&gt; \"test\"</span>\n+    <span class=\"macro\">println!</span><span class=\"operator\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"variable\">name</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"operator\">,</span> <span class=\"numeric_literal\">1</span><span class=\"operator\">,</span> name <span class=\"operator\">=</span> <span class=\"numeric_literal\">2</span><span class=\"operator\">)</span><span class=\"operator\">;</span>          <span class=\"comment\">// =&gt; \"2 1\"</span>\n+    <span class=\"macro\">println!</span><span class=\"operator\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"variable\">a</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"variable\">c</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"variable\">b</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"operator\">,</span> a<span class=\"operator\">=</span><span class=\"string_literal\">\"a\"</span><span class=\"operator\">,</span> b<span class=\"operator\">=</span><span class=\"char_literal\">'b'</span><span class=\"operator\">,</span> c<span class=\"operator\">=</span><span class=\"numeric_literal\">3</span><span class=\"operator\">)</span><span class=\"operator\">;</span>  <span class=\"comment\">// =&gt; \"a 3 b\"</span>\n+    <span class=\"macro\">println!</span><span class=\"operator\">(</span><span class=\"string_literal\">\"{{</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">}}\"</span><span class=\"operator\">,</span> <span class=\"numeric_literal\">2</span><span class=\"operator\">)</span><span class=\"operator\">;</span>                       <span class=\"comment\">// =&gt; \"{2}\"</span>\n+    <span class=\"macro\">println!</span><span class=\"operator\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"operator\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"operator\">)</span><span class=\"operator\">;</span>\n+    <span class=\"macro\">println!</span><span class=\"operator\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"operator\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"operator\">,</span> <span class=\"numeric_literal\">5</span><span class=\"operator\">)</span><span class=\"operator\">;</span>\n+    <span class=\"macro\">println!</span><span class=\"operator\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"operator\">,</span> <span class=\"numeric_literal\">5</span><span class=\"operator\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"operator\">)</span><span class=\"operator\">;</span>\n+    <span class=\"macro\">println!</span><span class=\"operator\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"variable\">width</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"operator\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"operator\">,</span> width <span class=\"operator\">=</span> <span class=\"numeric_literal\">5</span><span class=\"operator\">)</span><span class=\"operator\">;</span>\n+    <span class=\"macro\">println!</span><span class=\"operator\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">&lt;</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"operator\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"operator\">)</span><span class=\"operator\">;</span>\n+    <span class=\"macro\">println!</span><span class=\"operator\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">-</span><span class=\"format_specifier\">&lt;</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"operator\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"operator\">)</span><span class=\"operator\">;</span>\n+    <span class=\"macro\">println!</span><span class=\"operator\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">^</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"operator\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"operator\">)</span><span class=\"operator\">;</span>\n+    <span class=\"macro\">println!</span><span class=\"operator\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">&gt;</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"operator\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"operator\">)</span><span class=\"operator\">;</span>\n+    <span class=\"macro\">println!</span><span class=\"operator\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">+</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"operator\">,</span> <span class=\"numeric_literal\">5</span><span class=\"operator\">)</span><span class=\"operator\">;</span>\n+    <span class=\"macro\">println!</span><span class=\"operator\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">#</span><span class=\"variable\">x</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"operator\">,</span> <span class=\"numeric_literal\">27</span><span class=\"operator\">)</span><span class=\"operator\">;</span>\n+    <span class=\"macro\">println!</span><span class=\"operator\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"operator\">,</span> <span class=\"numeric_literal\">5</span><span class=\"operator\">)</span><span class=\"operator\">;</span>\n+    <span class=\"macro\">println!</span><span class=\"operator\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"operator\">,</span> <span class=\"operator\">-</span><span class=\"numeric_literal\">5</span><span class=\"operator\">)</span><span class=\"operator\">;</span>\n+    <span class=\"macro\">println!</span><span class=\"operator\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">#</span><span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">10</span><span class=\"variable\">x</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"operator\">,</span> <span class=\"numeric_literal\">27</span><span class=\"operator\">)</span><span class=\"operator\">;</span>\n+    <span class=\"macro\">println!</span><span class=\"operator\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"operator\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"operator\">,</span> <span class=\"numeric_literal\">0.01</span><span class=\"operator\">)</span><span class=\"operator\">;</span>\n+    <span class=\"macro\">println!</span><span class=\"operator\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">2</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"operator\">,</span> <span class=\"numeric_literal\">5</span><span class=\"operator\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"operator\">,</span> <span class=\"numeric_literal\">0.01</span><span class=\"operator\">)</span><span class=\"operator\">;</span>\n+    <span class=\"macro\">println!</span><span class=\"operator\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">2</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"operator\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"operator\">,</span> <span class=\"numeric_literal\">5</span><span class=\"operator\">,</span> <span class=\"numeric_literal\">0.01</span><span class=\"operator\">)</span><span class=\"operator\">;</span>\n+    <span class=\"macro\">println!</span><span class=\"operator\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"operator\">,</span>    <span class=\"string_literal\">\"x\"</span><span class=\"operator\">,</span> <span class=\"numeric_literal\">5</span><span class=\"operator\">,</span> <span class=\"numeric_literal\">0.01</span><span class=\"operator\">)</span><span class=\"operator\">;</span>\n+    <span class=\"macro\">println!</span><span class=\"operator\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">2</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"operator\">,</span>   <span class=\"string_literal\">\"x\"</span><span class=\"operator\">,</span> <span class=\"numeric_literal\">5</span><span class=\"operator\">,</span> <span class=\"numeric_literal\">0.01</span><span class=\"operator\">)</span><span class=\"operator\">;</span>\n+    <span class=\"macro\">println!</span><span class=\"operator\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"variable\">number</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"variable\">prec</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"operator\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"operator\">,</span> prec <span class=\"operator\">=</span> <span class=\"numeric_literal\">5</span><span class=\"operator\">,</span> number <span class=\"operator\">=</span> <span class=\"numeric_literal\">0.01</span><span class=\"operator\">)</span><span class=\"operator\">;</span>\n+    <span class=\"macro\">println!</span><span class=\"operator\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">, `</span><span class=\"format_specifier\">{</span><span class=\"variable\">name</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">` has 3 fractional digits\"</span><span class=\"operator\">,</span> <span class=\"string_literal\">\"Hello\"</span><span class=\"operator\">,</span> <span class=\"numeric_literal\">3</span><span class=\"operator\">,</span> name<span class=\"operator\">=</span><span class=\"numeric_literal\">1234.56</span><span class=\"operator\">)</span><span class=\"operator\">;</span>\n+    <span class=\"macro\">println!</span><span class=\"operator\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">, `</span><span class=\"format_specifier\">{</span><span class=\"variable\">name</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">` has 3 characters\"</span><span class=\"operator\">,</span> <span class=\"string_literal\">\"Hello\"</span><span class=\"operator\">,</span> <span class=\"numeric_literal\">3</span><span class=\"operator\">,</span> name<span class=\"operator\">=</span><span class=\"string_literal\">\"1234.56\"</span><span class=\"operator\">)</span><span class=\"operator\">;</span>\n+    <span class=\"macro\">println!</span><span class=\"operator\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">, `</span><span class=\"format_specifier\">{</span><span class=\"variable\">name</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">&gt;</span><span class=\"numeric_literal\">8</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">` has 3 right-aligned characters\"</span><span class=\"operator\">,</span> <span class=\"string_literal\">\"Hello\"</span><span class=\"operator\">,</span> <span class=\"numeric_literal\">3</span><span class=\"operator\">,</span> name<span class=\"operator\">=</span><span class=\"string_literal\">\"1234.56\"</span><span class=\"operator\">)</span><span class=\"operator\">;</span>\n+    <span class=\"macro\">println!</span><span class=\"operator\">(</span><span class=\"string_literal\">\"Hello {{}}\"</span><span class=\"operator\">)</span><span class=\"operator\">;</span>\n+    <span class=\"macro\">println!</span><span class=\"operator\">(</span><span class=\"string_literal\">\"{{ Hello\"</span><span class=\"operator\">)</span><span class=\"operator\">;</span>\n \n-    <span class=\"macro\">println!</span>(<span class=\"string_literal\">r\"Hello, </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span>, <span class=\"string_literal\">\"world\"</span>);\n+    <span class=\"macro\">println!</span><span class=\"operator\">(</span><span class=\"string_literal\">r\"Hello, </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"operator\">,</span> <span class=\"string_literal\">\"world\"</span><span class=\"operator\">)</span><span class=\"operator\">;</span>\n \n     <span class=\"comment\">// escape sequences</span>\n-    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"Hello</span><span class=\"escape_sequence\">\\n</span><span class=\"string_literal\">World\"</span>);\n-    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"</span><span class=\"escape_sequence\">\\u{48}</span><span class=\"escape_sequence\">\\x65</span><span class=\"escape_sequence\">\\x6C</span><span class=\"escape_sequence\">\\x6C</span><span class=\"escape_sequence\">\\x6F</span><span class=\"string_literal\"> World\"</span>);\n+    <span class=\"macro\">println!</span><span class=\"operator\">(</span><span class=\"string_literal\">\"Hello</span><span class=\"escape_sequence\">\\n</span><span class=\"string_literal\">World\"</span><span class=\"operator\">)</span><span class=\"operator\">;</span>\n+    <span class=\"macro\">println!</span><span class=\"operator\">(</span><span class=\"string_literal\">\"</span><span class=\"escape_sequence\">\\u{48}</span><span class=\"escape_sequence\">\\x65</span><span class=\"escape_sequence\">\\x6C</span><span class=\"escape_sequence\">\\x6C</span><span class=\"escape_sequence\">\\x6F</span><span class=\"string_literal\"> World\"</span><span class=\"operator\">)</span><span class=\"operator\">;</span>\n \n-    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"escape_sequence\">\\x41</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span>, A = <span class=\"numeric_literal\">92</span>);\n-    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"variable\">\u043d\u0438\u0447\u043e\u0441\u0438</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span>, \u043d\u0438\u0447\u043e\u0441\u0438 = <span class=\"numeric_literal\">92</span>);\n-}</code></pre>\n\\ No newline at end of file\n+    <span class=\"macro\">println!</span><span class=\"operator\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"escape_sequence\">\\x41</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"operator\">,</span> A <span class=\"operator\">=</span> <span class=\"numeric_literal\">92</span><span class=\"operator\">)</span><span class=\"operator\">;</span>\n+    <span class=\"macro\">println!</span><span class=\"operator\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"variable\">\u043d\u0438\u0447\u043e\u0441\u0438</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"operator\">,</span> \u043d\u0438\u0447\u043e\u0441\u0438 <span class=\"operator\">=</span> <span class=\"numeric_literal\">92</span><span class=\"operator\">)</span><span class=\"operator\">;</span>\n+<span class=\"operator\">}</span></code></pre>\n\\ No newline at end of file"}, {"sha": "f41d775e4e08f0c0616bf6e777a2c1a62e456f59", "filename": "crates/ra_ide/test_data/highlight_unsafe.html", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/33832d43fcc10fd6da0edf004d575f3576d9e91d/crates%2Fra_ide%2Ftest_data%2Fhighlight_unsafe.html", "raw_url": "https://github.com/rust-lang/rust/raw/33832d43fcc10fd6da0edf004d575f3576d9e91d/crates%2Fra_ide%2Ftest_data%2Fhighlight_unsafe.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Ftest_data%2Fhighlight_unsafe.html?ref=33832d43fcc10fd6da0edf004d575f3576d9e91d", "patch": "@@ -35,20 +35,20 @@\n \n .unresolved_reference { color: #FC5555; text-decoration: wavy underline; }\n </style>\n-<pre><code><span class=\"keyword unsafe\">unsafe</span> <span class=\"keyword\">fn</span> <span class=\"function declaration unsafe\">unsafe_fn</span>() {}\n+<pre><code><span class=\"keyword unsafe\">unsafe</span> <span class=\"keyword\">fn</span> <span class=\"function declaration unsafe\">unsafe_fn</span><span class=\"operator\">(</span><span class=\"operator\">)</span> <span class=\"operator\">{</span><span class=\"operator\">}</span>\n \n-<span class=\"keyword\">struct</span> <span class=\"struct declaration\">HasUnsafeFn</span>;\n+<span class=\"keyword\">struct</span> <span class=\"struct declaration\">HasUnsafeFn</span><span class=\"operator\">;</span>\n \n-<span class=\"keyword\">impl</span> <span class=\"struct\">HasUnsafeFn</span> {\n-    <span class=\"keyword unsafe\">unsafe</span> <span class=\"keyword\">fn</span> <span class=\"function declaration unsafe\">unsafe_method</span>(&<span class=\"self_keyword\">self</span>) {}\n-}\n+<span class=\"keyword\">impl</span> <span class=\"struct\">HasUnsafeFn</span> <span class=\"operator\">{</span>\n+    <span class=\"keyword unsafe\">unsafe</span> <span class=\"keyword\">fn</span> <span class=\"function declaration unsafe\">unsafe_method</span><span class=\"operator\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"operator\">)</span> <span class=\"operator\">{</span><span class=\"operator\">}</span>\n+<span class=\"operator\">}</span>\n \n-<span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span>() {\n-    <span class=\"keyword\">let</span> <span class=\"variable declaration\">x</span> = &<span class=\"numeric_literal\">5</span> <span class=\"keyword\">as</span> *<span class=\"keyword\">const</span> <span class=\"builtin_type\">usize</span>;\n-    <span class=\"keyword unsafe\">unsafe</span> {\n-        <span class=\"function unsafe\">unsafe_fn</span>();\n-        <span class=\"struct\">HasUnsafeFn</span>.<span class=\"function unsafe\">unsafe_method</span>();\n-        <span class=\"keyword\">let</span> <span class=\"variable declaration\">y</span> = <span class=\"operator unsafe\">*</span>(<span class=\"variable\">x</span>);\n-        <span class=\"keyword\">let</span> <span class=\"variable declaration\">z</span> = -<span class=\"variable\">x</span>;\n-    }\n-}</code></pre>\n\\ No newline at end of file\n+<span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span><span class=\"operator\">(</span><span class=\"operator\">)</span> <span class=\"operator\">{</span>\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\">x</span> <span class=\"operator\">=</span> <span class=\"operator\">&</span><span class=\"numeric_literal\">5</span> <span class=\"keyword\">as</span> *<span class=\"keyword\">const</span> <span class=\"builtin_type\">usize</span><span class=\"operator\">;</span>\n+    <span class=\"keyword unsafe\">unsafe</span> <span class=\"operator\">{</span>\n+        <span class=\"function unsafe\">unsafe_fn</span><span class=\"operator\">(</span><span class=\"operator\">)</span><span class=\"operator\">;</span>\n+        <span class=\"struct\">HasUnsafeFn</span><span class=\"operator\">.</span><span class=\"function unsafe\">unsafe_method</span><span class=\"operator\">(</span><span class=\"operator\">)</span><span class=\"operator\">;</span>\n+        <span class=\"keyword\">let</span> <span class=\"variable declaration\">y</span> <span class=\"operator\">=</span> <span class=\"operator unsafe\">*</span><span class=\"operator\">(</span><span class=\"variable\">x</span><span class=\"operator\">)</span><span class=\"operator\">;</span>\n+        <span class=\"keyword\">let</span> <span class=\"variable declaration\">z</span> <span class=\"operator\">=</span> <span class=\"operator\">-</span><span class=\"variable\">x</span><span class=\"operator\">;</span>\n+    <span class=\"operator\">}</span>\n+<span class=\"operator\">}</span></code></pre>\n\\ No newline at end of file"}, {"sha": "42ffa831b6a94f05717f0027ba35e217cff554aa", "filename": "crates/ra_ide/test_data/highlighting.html", "status": "modified", "additions": 80, "deletions": 80, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/33832d43fcc10fd6da0edf004d575f3576d9e91d/crates%2Fra_ide%2Ftest_data%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/33832d43fcc10fd6da0edf004d575f3576d9e91d/crates%2Fra_ide%2Ftest_data%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Ftest_data%2Fhighlighting.html?ref=33832d43fcc10fd6da0edf004d575f3576d9e91d", "patch": "@@ -35,94 +35,94 @@\n \n .unresolved_reference { color: #FC5555; text-decoration: wavy underline; }\n </style>\n-<pre><code><span class=\"attribute\">#[</span><span class=\"function attribute\">derive</span><span class=\"attribute\">(Clone, Debug)]</span>\n-<span class=\"keyword\">struct</span> <span class=\"struct declaration\">Foo</span> {\n-    <span class=\"keyword\">pub</span> <span class=\"field declaration\">x</span>: <span class=\"builtin_type\">i32</span>,\n-    <span class=\"keyword\">pub</span> <span class=\"field declaration\">y</span>: <span class=\"builtin_type\">i32</span>,\n-}\n-\n-<span class=\"keyword\">trait</span> <span class=\"trait declaration\">Bar</span> {\n-    <span class=\"keyword\">fn</span> <span class=\"function declaration\">bar</span>(&<span class=\"self_keyword\">self</span>) -&gt; <span class=\"builtin_type\">i32</span>;\n-}\n-\n-<span class=\"keyword\">impl</span> <span class=\"trait\">Bar</span> <span class=\"keyword\">for</span> <span class=\"struct\">Foo</span> {\n-    <span class=\"keyword\">fn</span> <span class=\"function declaration\">bar</span>(&<span class=\"self_keyword\">self</span>) -&gt; <span class=\"builtin_type\">i32</span> {\n-        <span class=\"self_keyword\">self</span>.<span class=\"field\">x</span>\n-    }\n-}\n-\n-<span class=\"keyword\">impl</span> <span class=\"struct\">Foo</span> {\n-    <span class=\"keyword\">fn</span> <span class=\"function declaration\">baz</span>(<span class=\"keyword\">mut</span> <span class=\"self_keyword mutable\">self</span>) -&gt; <span class=\"builtin_type\">i32</span> {\n-        <span class=\"self_keyword\">self</span>.<span class=\"field\">x</span>\n-    }\n-\n-    <span class=\"keyword\">fn</span> <span class=\"function declaration\">qux</span>(&<span class=\"keyword\">mut</span> <span class=\"self_keyword mutable\">self</span>) {\n-        <span class=\"self_keyword mutable\">self</span>.<span class=\"field\">x</span> = <span class=\"numeric_literal\">0</span>;\n-    }\n-}\n-\n-<span class=\"keyword\">static</span> <span class=\"keyword\">mut</span> <span class=\"static declaration mutable\">STATIC_MUT</span>: <span class=\"builtin_type\">i32</span> = <span class=\"numeric_literal\">0</span>;\n-\n-<span class=\"keyword\">fn</span> <span class=\"function declaration\">foo</span>&lt;<span class=\"lifetime declaration\">'a</span>, <span class=\"type_param declaration\">T</span>&gt;() -&gt; <span class=\"type_param\">T</span> {\n-    <span class=\"function\">foo</span>::&lt;<span class=\"lifetime\">'a</span>, <span class=\"builtin_type\">i32</span>&gt;()\n-}\n-\n-<span class=\"macro\">macro_rules!</span> <span class=\"macro declaration\">def_fn</span> {\n-    ($($tt:tt)*) =&gt; {$($tt)*}\n-}\n-\n-<span class=\"macro\">def_fn!</span> {\n-    <span class=\"keyword\">fn</span> <span class=\"function declaration\">bar</span>() -&gt; <span class=\"builtin_type\">u32</span> {\n+<pre><code><span class=\"operator\">#</span><span class=\"operator\">[</span><span class=\"function attribute\">derive</span><span class=\"operator\">(</span><span class=\"attribute\">Clone</span><span class=\"operator\">,</span><span class=\"attribute\"> Debug</span><span class=\"operator\">)</span><span class=\"operator\">]</span>\n+<span class=\"keyword\">struct</span> <span class=\"struct declaration\">Foo</span> <span class=\"operator\">{</span>\n+    <span class=\"keyword\">pub</span> <span class=\"field declaration\">x</span><span class=\"operator\">:</span> <span class=\"builtin_type\">i32</span><span class=\"operator\">,</span>\n+    <span class=\"keyword\">pub</span> <span class=\"field declaration\">y</span><span class=\"operator\">:</span> <span class=\"builtin_type\">i32</span><span class=\"operator\">,</span>\n+<span class=\"operator\">}</span>\n+\n+<span class=\"keyword\">trait</span> <span class=\"trait declaration\">Bar</span> <span class=\"operator\">{</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration\">bar</span><span class=\"operator\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"operator\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">i32</span><span class=\"operator\">;</span>\n+<span class=\"operator\">}</span>\n+\n+<span class=\"keyword\">impl</span> <span class=\"trait\">Bar</span> <span class=\"keyword\">for</span> <span class=\"struct\">Foo</span> <span class=\"operator\">{</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration\">bar</span><span class=\"operator\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"operator\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">i32</span> <span class=\"operator\">{</span>\n+        <span class=\"self_keyword\">self</span><span class=\"operator\">.</span><span class=\"field\">x</span>\n+    <span class=\"operator\">}</span>\n+<span class=\"operator\">}</span>\n+\n+<span class=\"keyword\">impl</span> <span class=\"struct\">Foo</span> <span class=\"operator\">{</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration\">baz</span><span class=\"operator\">(</span><span class=\"keyword\">mut</span> <span class=\"self_keyword mutable\">self</span><span class=\"operator\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">i32</span> <span class=\"operator\">{</span>\n+        <span class=\"self_keyword\">self</span><span class=\"operator\">.</span><span class=\"field\">x</span>\n+    <span class=\"operator\">}</span>\n+\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration\">qux</span><span class=\"operator\">(</span><span class=\"operator\">&</span><span class=\"keyword\">mut</span> <span class=\"self_keyword mutable\">self</span><span class=\"operator\">)</span> <span class=\"operator\">{</span>\n+        <span class=\"self_keyword mutable\">self</span><span class=\"operator\">.</span><span class=\"field\">x</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">0</span><span class=\"operator\">;</span>\n+    <span class=\"operator\">}</span>\n+<span class=\"operator\">}</span>\n+\n+<span class=\"keyword\">static</span> <span class=\"keyword\">mut</span> <span class=\"static declaration mutable\">STATIC_MUT</span><span class=\"operator\">:</span> <span class=\"builtin_type\">i32</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">0</span><span class=\"operator\">;</span>\n+\n+<span class=\"keyword\">fn</span> <span class=\"function declaration\">foo</span><span class=\"operator\">&lt;</span><span class=\"lifetime declaration\">'a</span><span class=\"operator\">,</span> <span class=\"type_param declaration\">T</span><span class=\"operator\">&gt;</span><span class=\"operator\">(</span><span class=\"operator\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"type_param\">T</span> <span class=\"operator\">{</span>\n+    <span class=\"function\">foo</span><span class=\"operator\">::</span><span class=\"operator\">&lt;</span><span class=\"lifetime\">'a</span><span class=\"operator\">,</span> <span class=\"builtin_type\">i32</span><span class=\"operator\">&gt;</span><span class=\"operator\">(</span><span class=\"operator\">)</span>\n+<span class=\"operator\">}</span>\n+\n+<span class=\"macro\">macro_rules!</span> <span class=\"macro declaration\">def_fn</span> <span class=\"operator\">{</span>\n+    <span class=\"operator\">(</span><span class=\"operator\">$</span><span class=\"operator\">(</span><span class=\"operator\">$</span>tt<span class=\"operator\">:</span>tt<span class=\"operator\">)</span>*<span class=\"operator\">)</span> <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"operator\">{</span><span class=\"operator\">$</span><span class=\"operator\">(</span><span class=\"operator\">$</span>tt<span class=\"operator\">)</span>*<span class=\"operator\">}</span>\n+<span class=\"operator\">}</span>\n+\n+<span class=\"macro\">def_fn!</span> <span class=\"operator\">{</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration\">bar</span><span class=\"operator\">(</span><span class=\"operator\">)</span> <span class=\"operator\">-</span><span class=\"operator\">&gt;</span> <span class=\"builtin_type\">u32</span> <span class=\"operator\">{</span>\n         <span class=\"numeric_literal\">100</span>\n-    }\n-}\n+    <span class=\"operator\">}</span>\n+<span class=\"operator\">}</span>\n \n-<span class=\"macro\">macro_rules!</span> <span class=\"macro declaration\">noop</span> {\n-    ($expr:expr) =&gt; {\n-        $expr\n-    }\n-}\n+<span class=\"macro\">macro_rules!</span> <span class=\"macro declaration\">noop</span> <span class=\"operator\">{</span>\n+    <span class=\"operator\">(</span><span class=\"operator\">$</span>expr<span class=\"operator\">:</span>expr<span class=\"operator\">)</span> <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"operator\">{</span>\n+        <span class=\"operator\">$</span>expr\n+    <span class=\"operator\">}</span>\n+<span class=\"operator\">}</span>\n \n <span class=\"comment\">// comment</span>\n-<span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span>() {\n-    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"Hello, {}!\"</span>, <span class=\"numeric_literal\">92</span>);\n-\n-    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\">vec</span> = <span class=\"unresolved_reference\">Vec</span>::<span class=\"unresolved_reference\">new</span>();\n-    <span class=\"keyword control\">if</span> <span class=\"bool_literal\">true</span> {\n-        <span class=\"keyword\">let</span> <span class=\"variable declaration\">x</span> = <span class=\"numeric_literal\">92</span>;\n-        <span class=\"variable mutable\">vec</span>.<span class=\"unresolved_reference\">push</span>(<span class=\"struct\">Foo</span> { <span class=\"field\">x</span>, <span class=\"field\">y</span>: <span class=\"numeric_literal\">1</span> });\n-    }\n-    <span class=\"keyword unsafe\">unsafe</span> {\n-        <span class=\"variable mutable\">vec</span>.<span class=\"unresolved_reference\">set_len</span>(<span class=\"numeric_literal\">0</span>);\n-        <span class=\"static mutable\">STATIC_MUT</span> = <span class=\"numeric_literal\">1</span>;\n-    }\n-\n-    <span class=\"keyword control\">for</span> <span class=\"variable declaration\">e</span> <span class=\"keyword control\">in</span> <span class=\"variable mutable\">vec</span> {\n+<span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span><span class=\"operator\">(</span><span class=\"operator\">)</span> <span class=\"operator\">{</span>\n+    <span class=\"macro\">println!</span><span class=\"operator\">(</span><span class=\"string_literal\">\"Hello, {}!\"</span><span class=\"operator\">,</span> <span class=\"numeric_literal\">92</span><span class=\"operator\">)</span><span class=\"operator\">;</span>\n+\n+    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\">vec</span> <span class=\"operator\">=</span> <span class=\"unresolved_reference\">Vec</span><span class=\"operator\">::</span><span class=\"unresolved_reference\">new</span><span class=\"operator\">(</span><span class=\"operator\">)</span><span class=\"operator\">;</span>\n+    <span class=\"keyword control\">if</span> <span class=\"bool_literal\">true</span> <span class=\"operator\">{</span>\n+        <span class=\"keyword\">let</span> <span class=\"variable declaration\">x</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">92</span><span class=\"operator\">;</span>\n+        <span class=\"variable mutable\">vec</span><span class=\"operator\">.</span><span class=\"unresolved_reference\">push</span><span class=\"operator\">(</span><span class=\"struct\">Foo</span> <span class=\"operator\">{</span> <span class=\"field\">x</span><span class=\"operator\">,</span> <span class=\"field\">y</span><span class=\"operator\">:</span> <span class=\"numeric_literal\">1</span> <span class=\"operator\">}</span><span class=\"operator\">)</span><span class=\"operator\">;</span>\n+    <span class=\"operator\">}</span>\n+    <span class=\"keyword unsafe\">unsafe</span> <span class=\"operator\">{</span>\n+        <span class=\"variable mutable\">vec</span><span class=\"operator\">.</span><span class=\"unresolved_reference\">set_len</span><span class=\"operator\">(</span><span class=\"numeric_literal\">0</span><span class=\"operator\">)</span><span class=\"operator\">;</span>\n+        <span class=\"static mutable\">STATIC_MUT</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">1</span><span class=\"operator\">;</span>\n+    <span class=\"operator\">}</span>\n+\n+    <span class=\"keyword control\">for</span> <span class=\"variable declaration\">e</span> <span class=\"keyword control\">in</span> <span class=\"variable mutable\">vec</span> <span class=\"operator\">{</span>\n         <span class=\"comment\">// Do nothing</span>\n-    }\n+    <span class=\"operator\">}</span>\n \n-    <span class=\"macro\">noop!</span>(<span class=\"macro\">noop</span><span class=\"macro\">!</span>(<span class=\"numeric_literal\">1</span>));\n+    <span class=\"macro\">noop!</span><span class=\"operator\">(</span><span class=\"macro\">noop</span><span class=\"macro\">!</span><span class=\"operator\">(</span><span class=\"numeric_literal\">1</span><span class=\"operator\">)</span><span class=\"operator\">)</span><span class=\"operator\">;</span>\n \n-    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\">x</span> = <span class=\"numeric_literal\">42</span>;\n-    <span class=\"keyword\">let</span> <span class=\"variable declaration mutable\">y</span> = &<span class=\"keyword\">mut</span> <span class=\"variable mutable\">x</span>;\n-    <span class=\"keyword\">let</span> <span class=\"variable declaration\">z</span> = &<span class=\"variable mutable\">y</span>;\n+    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\">x</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">42</span><span class=\"operator\">;</span>\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration mutable\">y</span> <span class=\"operator\">=</span> <span class=\"operator\">&</span><span class=\"keyword\">mut</span> <span class=\"variable mutable\">x</span><span class=\"operator\">;</span>\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\">z</span> <span class=\"operator\">=</span> <span class=\"operator\">&</span><span class=\"variable mutable\">y</span><span class=\"operator\">;</span>\n \n-    <span class=\"keyword\">let</span> <span class=\"struct\">Foo</span> { <span class=\"field\">x</span>: <span class=\"variable declaration\">z</span>, <span class=\"field\">y</span> } = <span class=\"struct\">Foo</span> { <span class=\"field\">x</span>: <span class=\"variable\">z</span>, <span class=\"field\">y</span> };\n+    <span class=\"keyword\">let</span> <span class=\"struct\">Foo</span> <span class=\"operator\">{</span> <span class=\"field\">x</span><span class=\"operator\">:</span> <span class=\"variable declaration\">z</span><span class=\"operator\">,</span> <span class=\"field\">y</span> <span class=\"operator\">}</span> <span class=\"operator\">=</span> <span class=\"struct\">Foo</span> <span class=\"operator\">{</span> <span class=\"field\">x</span><span class=\"operator\">:</span> <span class=\"variable\">z</span><span class=\"operator\">,</span> <span class=\"field\">y</span> <span class=\"operator\">}</span><span class=\"operator\">;</span>\n \n-    <span class=\"variable\">y</span>;\n-}\n+    <span class=\"variable\">y</span><span class=\"operator\">;</span>\n+<span class=\"operator\">}</span>\n \n-<span class=\"keyword\">enum</span> <span class=\"enum declaration\">Option</span>&lt;<span class=\"type_param declaration\">T</span>&gt; {\n-    <span class=\"enum_variant declaration\">Some</span>(<span class=\"type_param\">T</span>),\n-    <span class=\"enum_variant declaration\">None</span>,\n-}\n-<span class=\"keyword\">use</span> <span class=\"enum\">Option</span>::*;\n+<span class=\"keyword\">enum</span> <span class=\"enum declaration\">Option</span><span class=\"operator\">&lt;</span><span class=\"type_param declaration\">T</span><span class=\"operator\">&gt;</span> <span class=\"operator\">{</span>\n+    <span class=\"enum_variant declaration\">Some</span><span class=\"operator\">(</span><span class=\"type_param\">T</span><span class=\"operator\">)</span><span class=\"operator\">,</span>\n+    <span class=\"enum_variant declaration\">None</span><span class=\"operator\">,</span>\n+<span class=\"operator\">}</span>\n+<span class=\"keyword\">use</span> <span class=\"enum\">Option</span><span class=\"operator\">::</span>*<span class=\"operator\">;</span>\n \n-<span class=\"keyword\">impl</span>&lt;<span class=\"type_param declaration\">T</span>&gt; <span class=\"enum\">Option</span>&lt;<span class=\"type_param\">T</span>&gt; {\n-    <span class=\"keyword\">fn</span> <span class=\"function declaration\">and</span>&lt;<span class=\"type_param declaration\">U</span>&gt;(<span class=\"self_keyword\">self</span>, <span class=\"value_param declaration\">other</span>: <span class=\"enum\">Option</span>&lt;<span class=\"type_param\">U</span>&gt;) -&gt; <span class=\"enum\">Option</span>&lt;(<span class=\"type_param\">T</span>, <span class=\"type_param\">U</span>)&gt; {\n-        <span class=\"keyword control\">match</span> <span class=\"value_param\">other</span> {\n-            <span class=\"enum_variant\">None</span> =&gt; <span class=\"macro\">unimplemented!</span>(),\n-            <span class=\"variable declaration\">Nope</span> =&gt; <span class=\"variable\">Nope</span>,\n-        }\n-    }\n-}</code></pre>\n\\ No newline at end of file\n+<span class=\"keyword\">impl</span><span class=\"operator\">&lt;</span><span class=\"type_param declaration\">T</span><span class=\"operator\">&gt;</span> <span class=\"enum\">Option</span><span class=\"operator\">&lt;</span><span class=\"type_param\">T</span><span class=\"operator\">&gt;</span> <span class=\"operator\">{</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration\">and</span><span class=\"operator\">&lt;</span><span class=\"type_param declaration\">U</span><span class=\"operator\">&gt;</span><span class=\"operator\">(</span><span class=\"self_keyword\">self</span><span class=\"operator\">,</span> <span class=\"value_param declaration\">other</span><span class=\"operator\">:</span> <span class=\"enum\">Option</span><span class=\"operator\">&lt;</span><span class=\"type_param\">U</span><span class=\"operator\">&gt;</span><span class=\"operator\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"enum\">Option</span><span class=\"operator\">&lt;</span><span class=\"operator\">(</span><span class=\"type_param\">T</span><span class=\"operator\">,</span> <span class=\"type_param\">U</span><span class=\"operator\">)</span><span class=\"operator\">&gt;</span> <span class=\"operator\">{</span>\n+        <span class=\"keyword control\">match</span> <span class=\"value_param\">other</span> <span class=\"operator\">{</span>\n+            <span class=\"enum_variant\">None</span> <span class=\"operator\">=&gt;</span> <span class=\"macro\">unimplemented!</span><span class=\"operator\">(</span><span class=\"operator\">)</span><span class=\"operator\">,</span>\n+            <span class=\"variable declaration\">Nope</span> <span class=\"operator\">=&gt;</span> <span class=\"variable\">Nope</span><span class=\"operator\">,</span>\n+        <span class=\"operator\">}</span>\n+    <span class=\"operator\">}</span>\n+<span class=\"operator\">}</span></code></pre>\n\\ No newline at end of file"}, {"sha": "47c7c7d63cedb5cb6d665f21744c9cb52e62123b", "filename": "crates/ra_ide/test_data/rainbow_highlighting.html", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/33832d43fcc10fd6da0edf004d575f3576d9e91d/crates%2Fra_ide%2Ftest_data%2Frainbow_highlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/33832d43fcc10fd6da0edf004d575f3576d9e91d/crates%2Fra_ide%2Ftest_data%2Frainbow_highlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Ftest_data%2Frainbow_highlighting.html?ref=33832d43fcc10fd6da0edf004d575f3576d9e91d", "patch": "@@ -35,15 +35,15 @@\n \n .unresolved_reference { color: #FC5555; text-decoration: wavy underline; }\n </style>\n-<pre><code><span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span>() {\n-    <span class=\"keyword\">let</span> <span class=\"variable declaration\" data-binding-hash=\"8121853618659664005\" style=\"color: hsl(261,57%,61%);\">hello</span> = <span class=\"string_literal\">\"hello\"</span>;\n-    <span class=\"keyword\">let</span> <span class=\"variable declaration\" data-binding-hash=\"2705725358298919760\" style=\"color: hsl(17,51%,74%);\">x</span> = <span class=\"variable\" data-binding-hash=\"8121853618659664005\" style=\"color: hsl(261,57%,61%);\">hello</span>.<span class=\"unresolved_reference\">to_string</span>();\n-    <span class=\"keyword\">let</span> <span class=\"variable declaration\" data-binding-hash=\"3365759661443752373\" style=\"color: hsl(127,76%,66%);\">y</span> = <span class=\"variable\" data-binding-hash=\"8121853618659664005\" style=\"color: hsl(261,57%,61%);\">hello</span>.<span class=\"unresolved_reference\">to_string</span>();\n+<pre><code><span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span><span class=\"operator\">(</span><span class=\"operator\">)</span> <span class=\"operator\">{</span>\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\" data-binding-hash=\"8121853618659664005\" style=\"color: hsl(261,57%,61%);\">hello</span> <span class=\"operator\">=</span> <span class=\"string_literal\">\"hello\"</span><span class=\"operator\">;</span>\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\" data-binding-hash=\"2705725358298919760\" style=\"color: hsl(17,51%,74%);\">x</span> <span class=\"operator\">=</span> <span class=\"variable\" data-binding-hash=\"8121853618659664005\" style=\"color: hsl(261,57%,61%);\">hello</span><span class=\"operator\">.</span><span class=\"unresolved_reference\">to_string</span><span class=\"operator\">(</span><span class=\"operator\">)</span><span class=\"operator\">;</span>\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\" data-binding-hash=\"3365759661443752373\" style=\"color: hsl(127,76%,66%);\">y</span> <span class=\"operator\">=</span> <span class=\"variable\" data-binding-hash=\"8121853618659664005\" style=\"color: hsl(261,57%,61%);\">hello</span><span class=\"operator\">.</span><span class=\"unresolved_reference\">to_string</span><span class=\"operator\">(</span><span class=\"operator\">)</span><span class=\"operator\">;</span>\n \n-    <span class=\"keyword\">let</span> <span class=\"variable declaration\" data-binding-hash=\"794745962933817518\" style=\"color: hsl(19,74%,76%);\">x</span> = <span class=\"string_literal\">\"other color please!\"</span>;\n-    <span class=\"keyword\">let</span> <span class=\"variable declaration\" data-binding-hash=\"6717528807933952652\" style=\"color: hsl(85,49%,84%);\">y</span> = <span class=\"variable\" data-binding-hash=\"794745962933817518\" style=\"color: hsl(19,74%,76%);\">x</span>.<span class=\"unresolved_reference\">to_string</span>();\n-}\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\" data-binding-hash=\"794745962933817518\" style=\"color: hsl(19,74%,76%);\">x</span> <span class=\"operator\">=</span> <span class=\"string_literal\">\"other color please!\"</span><span class=\"operator\">;</span>\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\" data-binding-hash=\"6717528807933952652\" style=\"color: hsl(85,49%,84%);\">y</span> <span class=\"operator\">=</span> <span class=\"variable\" data-binding-hash=\"794745962933817518\" style=\"color: hsl(19,74%,76%);\">x</span><span class=\"operator\">.</span><span class=\"unresolved_reference\">to_string</span><span class=\"operator\">(</span><span class=\"operator\">)</span><span class=\"operator\">;</span>\n+<span class=\"operator\">}</span>\n \n-<span class=\"keyword\">fn</span> <span class=\"function declaration\">bar</span>() {\n-    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\" data-binding-hash=\"8121853618659664005\" style=\"color: hsl(261,57%,61%);\">hello</span> = <span class=\"string_literal\">\"hello\"</span>;\n-}</code></pre>\n\\ No newline at end of file\n+<span class=\"keyword\">fn</span> <span class=\"function declaration\">bar</span><span class=\"operator\">(</span><span class=\"operator\">)</span> <span class=\"operator\">{</span>\n+    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\" data-binding-hash=\"8121853618659664005\" style=\"color: hsl(261,57%,61%);\">hello</span> <span class=\"operator\">=</span> <span class=\"string_literal\">\"hello\"</span><span class=\"operator\">;</span>\n+<span class=\"operator\">}</span></code></pre>\n\\ No newline at end of file"}]}