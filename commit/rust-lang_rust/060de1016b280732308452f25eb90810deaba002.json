{"sha": "060de1016b280732308452f25eb90810deaba002", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2MGRlMTAxNmIyODA3MzIzMDg0NTJmMjVlYjkwODEwZGVhYmEwMDI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-17T18:28:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-17T18:28:46Z"}, "message": "auto merge of #7844 : huonw/rust/no-implicit-prelude, r=alexcrichton\n\nIt disables the insertion of `use std::prelude::*;` into the top of\r\nall the modules below the item on which it is placed (including that\r\nitem itself).\r\n\r\n(Similar to GHC's `-XNoImplicitPrelude`.)", "tree": {"sha": "bba5742d914c28e7373b129a25cc8f2b61e46054", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bba5742d914c28e7373b129a25cc8f2b61e46054"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/060de1016b280732308452f25eb90810deaba002", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/060de1016b280732308452f25eb90810deaba002", "html_url": "https://github.com/rust-lang/rust/commit/060de1016b280732308452f25eb90810deaba002", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/060de1016b280732308452f25eb90810deaba002/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c1e530bde3a8123f4da645a92b8a2b12fd3ecab", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c1e530bde3a8123f4da645a92b8a2b12fd3ecab", "html_url": "https://github.com/rust-lang/rust/commit/9c1e530bde3a8123f4da645a92b8a2b12fd3ecab"}, {"sha": "040e470f475944a355101aa89e9ec447c10b0caa", "url": "https://api.github.com/repos/rust-lang/rust/commits/040e470f475944a355101aa89e9ec447c10b0caa", "html_url": "https://github.com/rust-lang/rust/commit/040e470f475944a355101aa89e9ec447c10b0caa"}], "stats": {"total": 117, "additions": 116, "deletions": 1}, "files": [{"sha": "ee0ce32bfec2a36f441608d5edab09f074cdf99a", "filename": "src/librustc/front/std_inject.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/060de1016b280732308452f25eb90810deaba002/src%2Flibrustc%2Ffront%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/060de1016b280732308452f25eb90810deaba002/src%2Flibrustc%2Ffront%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fstd_inject.rs?ref=060de1016b280732308452f25eb90810deaba002", "patch": "@@ -32,6 +32,9 @@ pub fn maybe_inject_libstd_ref(sess: Session, crate: @ast::crate)\n fn use_std(crate: &ast::crate) -> bool {\n     !attr::attrs_contains_name(crate.node.attrs, \"no_std\")\n }\n+fn no_prelude(attrs: &[ast::attribute]) -> bool {\n+    attr::attrs_contains_name(attrs, \"no_implicit_prelude\")\n+}\n \n fn inject_libstd_ref(sess: Session, crate: &ast::crate) -> @ast::crate {\n     fn spanned<T:Copy>(x: T) -> codemap::spanned<T> {\n@@ -63,7 +66,12 @@ fn inject_libstd_ref(sess: Session, crate: &ast::crate) -> @ast::crate {\n                 view_items: vis,\n                 ../*bad*/copy crate.module\n             };\n-            new_module = fld.fold_mod(&new_module);\n+\n+            if !no_prelude(crate.attrs) {\n+                // only add `use std::prelude::*;` if there wasn't a\n+                // `#[no_implicit_prelude];` at the crate level.\n+                new_module = fld.fold_mod(&new_module);\n+            }\n \n             // FIXME #2543: Bad copy.\n             let new_crate = ast::crate_ {\n@@ -72,6 +80,16 @@ fn inject_libstd_ref(sess: Session, crate: &ast::crate) -> @ast::crate {\n             };\n             (new_crate, span)\n         },\n+        fold_item: |item, fld| {\n+            if !no_prelude(item.attrs) {\n+                // only recur if there wasn't `#[no_implicit_prelude];`\n+                // on this item, i.e. this means that the prelude is not\n+                // implicitly imported though the whole subtree\n+                fold::noop_fold_item(item, fld)\n+            } else {\n+                Some(item)\n+            }\n+        },\n         fold_mod: |module, fld| {\n             let n2 = sess.next_node_id();\n "}, {"sha": "e215407ec87d1efbcbb4ee452ae5c860e8ee9ebf", "filename": "src/test/compile-fail/no-implicit-prelude-nested.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/060de1016b280732308452f25eb90810deaba002/src%2Ftest%2Fcompile-fail%2Fno-implicit-prelude-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/060de1016b280732308452f25eb90810deaba002/src%2Ftest%2Fcompile-fail%2Fno-implicit-prelude-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-implicit-prelude-nested.rs?ref=060de1016b280732308452f25eb90810deaba002", "patch": "@@ -0,0 +1,68 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that things from the prelude aren't in scope. Use many of them\n+// so that renaming some things won't magically make this test fail\n+// for the wrong reason (e.g. if `Add` changes to `Addition`, and\n+// `no_implicit_prelude` stops working, then the `impl Add` will still\n+// fail with the same error message).\n+\n+#[no_implicit_prelude]\n+mod foo {\n+    mod baz {\n+        struct Test;\n+        impl Add for Test {} //~ ERROR: attempt to implement a nonexistent trait\n+        impl Clone for Test {} //~ ERROR: attempt to implement a nonexistent trait\n+        impl Iterator for Test {} //~ ERROR: attempt to implement a nonexistent trait\n+        impl ToStr for Test {} //~ ERROR: attempt to implement a nonexistent trait\n+        impl Writer for Test {} //~ ERROR: attempt to implement a nonexistent trait\n+\n+        fn foo() {\n+            print(\"foo\"); //~ ERROR: unresolved name\n+            println(\"bar\"); //~ ERROR: unresolved name\n+        }\n+    }\n+\n+    struct Test;\n+    impl Add for Test {} //~ ERROR: attempt to implement a nonexistent trait\n+    impl Clone for Test {} //~ ERROR: attempt to implement a nonexistent trait\n+    impl Iterator for Test {} //~ ERROR: attempt to implement a nonexistent trait\n+    impl ToStr for Test {} //~ ERROR: attempt to implement a nonexistent trait\n+    impl Writer for Test {} //~ ERROR: attempt to implement a nonexistent trait\n+\n+    fn foo() {\n+        print(\"foo\"); //~ ERROR: unresolved name\n+        println(\"bar\"); //~ ERROR: unresolved name\n+    }\n+}\n+\n+fn qux() {\n+    #[no_implicit_prelude]\n+    mod qux_inner {\n+        struct Test;\n+        impl Add for Test {} //~ ERROR: attempt to implement a nonexistent trait\n+        impl Clone for Test {} //~ ERROR: attempt to implement a nonexistent trait\n+        impl Iterator for Test {} //~ ERROR: attempt to implement a nonexistent trait\n+        impl ToStr for Test {} //~ ERROR: attempt to implement a nonexistent trait\n+        impl Writer for Test {} //~ ERROR: attempt to implement a nonexistent trait\n+\n+        fn foo() {\n+            print(\"foo\"); //~ ERROR: unresolved name\n+            println(\"bar\"); //~ ERROR: unresolved name\n+        }\n+    }\n+}\n+\n+\n+fn main() {\n+    // these should work fine\n+    print(\"foo\");\n+    println(\"bar\");\n+}"}, {"sha": "ca4533a03c864acde1137d4246c37f3d7074a13f", "filename": "src/test/compile-fail/no-implicit-prelude.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/060de1016b280732308452f25eb90810deaba002/src%2Ftest%2Fcompile-fail%2Fno-implicit-prelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/060de1016b280732308452f25eb90810deaba002/src%2Ftest%2Fcompile-fail%2Fno-implicit-prelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-implicit-prelude.rs?ref=060de1016b280732308452f25eb90810deaba002", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[no_implicit_prelude];\n+\n+// Test that things from the prelude aren't in scope. Use many of them\n+// so that renaming some things won't magically make this test fail\n+// for the wrong reason (e.g. if `Add` changes to `Addition`, and\n+// `no_implicit_prelude` stops working, then the `impl Add` will still\n+// fail with the same error message).\n+\n+struct Test;\n+impl Add for Test {} //~ ERROR: attempt to implement a nonexistent trait\n+impl Clone for Test {} //~ ERROR: attempt to implement a nonexistent trait\n+impl Iterator for Test {} //~ ERROR: attempt to implement a nonexistent trait\n+impl ToStr for Test {} //~ ERROR: attempt to implement a nonexistent trait\n+impl Writer for Test {} //~ ERROR: attempt to implement a nonexistent trait\n+\n+fn main() {\n+    print(\"foo\"); //~ ERROR: unresolved name\n+    println(\"bar\"); //~ ERROR: unresolved name\n+}"}]}