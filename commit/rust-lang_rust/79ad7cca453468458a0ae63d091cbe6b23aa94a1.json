{"sha": "79ad7cca453468458a0ae63d091cbe6b23aa94a1", "node_id": "C_kwDOAAsO6NoAKDc5YWQ3Y2NhNDUzNDY4NDU4YTBhZTYzZDA5MWNiZTZiMjNhYTk0YTE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-13T20:37:04Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-17T15:33:24Z"}, "message": "Erase escaping late-bound regions when probing for ambiguous associated types", "tree": {"sha": "b501f1019a116f926eb85fb214ee13e98f6f37b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b501f1019a116f926eb85fb214ee13e98f6f37b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79ad7cca453468458a0ae63d091cbe6b23aa94a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79ad7cca453468458a0ae63d091cbe6b23aa94a1", "html_url": "https://github.com/rust-lang/rust/commit/79ad7cca453468458a0ae63d091cbe6b23aa94a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79ad7cca453468458a0ae63d091cbe6b23aa94a1/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c50c62d225e004f5b488006d3d205a34363a128c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c50c62d225e004f5b488006d3d205a34363a128c", "html_url": "https://github.com/rust-lang/rust/commit/c50c62d225e004f5b488006d3d205a34363a128c"}], "stats": {"total": 46, "additions": 43, "deletions": 3}, "files": [{"sha": "d820a3da5550a84f694d79b36c26b856ee9da74f", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/79ad7cca453468458a0ae63d091cbe6b23aa94a1/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79ad7cca453468458a0ae63d091cbe6b23aa94a1/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=79ad7cca453468458a0ae63d091cbe6b23aa94a1", "patch": "@@ -2396,13 +2396,24 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                                     tcx,\n                                     infcx.fresh_substs_for_item(DUMMY_SP, impl_def_id),\n                                 );\n+                                // I guess we don't need to make a universe unless we need it,\n+                                // but also we're on the error path, so it doesn't matter here.\n+                                let universe = infcx.create_next_universe();\n                                 infcx\n                                     .can_eq(\n                                         ty::ParamEnv::empty(),\n                                         impl_.self_ty(),\n-                                        // Must fold past escaping bound vars too,\n-                                        // since we have those at this point in astconv.\n-                                        tcx.fold_regions(qself_ty, |_, _| tcx.lifetimes.re_erased),\n+                                        tcx.replace_escaping_bound_vars_uncached(qself_ty, ty::fold::FnMutDelegate {\n+                                            regions: &mut |_| tcx.lifetimes.re_erased,\n+                                            types: &mut |bv| tcx.mk_placeholder(ty::PlaceholderType {\n+                                                universe,\n+                                                name: bv.kind,\n+                                            }),\n+                                            consts: &mut |bv, ty| tcx.mk_const(ty::PlaceholderConst {\n+                                                universe,\n+                                                name: bv\n+                                            }, ty),\n+                                        })\n                                     )\n                             })\n                             && tcx.impl_polarity(impl_def_id) != ty::ImplPolarity::Negative"}, {"sha": "50f0152e904f4706c1874bd043d834b46a9c1549", "filename": "tests/ui/traits/non_lifetime_binders/missing-assoc-item.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/79ad7cca453468458a0ae63d091cbe6b23aa94a1/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fmissing-assoc-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79ad7cca453468458a0ae63d091cbe6b23aa94a1/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fmissing-assoc-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fmissing-assoc-item.rs?ref=79ad7cca453468458a0ae63d091cbe6b23aa94a1", "patch": "@@ -0,0 +1,11 @@\n+#![feature(non_lifetime_binders)]\n+//~^ WARN the feature `non_lifetime_binders` is incomplete\n+\n+fn f()\n+where\n+    for<B> B::Item: Send,\n+    //~^ ERROR ambiguous associated type\n+{\n+}\n+\n+fn main() {}"}, {"sha": "be6955c111e834ff04fde224e7bbe3f90979e624", "filename": "tests/ui/traits/non_lifetime_binders/missing-assoc-item.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/79ad7cca453468458a0ae63d091cbe6b23aa94a1/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fmissing-assoc-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79ad7cca453468458a0ae63d091cbe6b23aa94a1/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fmissing-assoc-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fmissing-assoc-item.stderr?ref=79ad7cca453468458a0ae63d091cbe6b23aa94a1", "patch": "@@ -0,0 +1,18 @@\n+warning: the feature `non_lifetime_binders` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/missing-assoc-item.rs:1:12\n+   |\n+LL | #![feature(non_lifetime_binders)]\n+   |            ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #108185 <https://github.com/rust-lang/rust/issues/108185> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0223]: ambiguous associated type\n+  --> $DIR/missing-assoc-item.rs:6:12\n+   |\n+LL |     for<B> B::Item: Send,\n+   |            ^^^^^^^ help: use the fully-qualified path: `<B as IntoIterator>::Item`\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0223`."}]}