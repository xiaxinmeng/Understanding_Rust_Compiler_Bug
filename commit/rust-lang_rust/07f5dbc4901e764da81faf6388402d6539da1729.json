{"sha": "07f5dbc4901e764da81faf6388402d6539da1729", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3ZjVkYmM0OTAxZTc2NGRhODFmYWY2Mzg4NDAyZDY1MzlkYTE3Mjk=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-12-25T05:25:57Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-12-25T05:25:57Z"}, "message": "Revert \"Rollup merge of #56944 - alexcrichton:less-thin2, r=michaelwoerister\"\n\nThis reverts commit f1051b574c26e20608ff26415a3dddd13f140925, reversing\nchanges made to 833e0b3b8a9f1487a61152ca76f7f74a6b32cc0c.", "tree": {"sha": "1ed19b06f3bde8cfc2a93acb7adb401724798c1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ed19b06f3bde8cfc2a93acb7adb401724798c1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07f5dbc4901e764da81faf6388402d6539da1729", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlwhv2wACgkQ/vbIBR0O\nATzAJg//bajufI6gxHuG75kATLq4aK4UQ+s0z52rIEgWrIaMzyDEo6mf4PFylBoP\nUMTVbjS8hAkf4+VvK2vnwiEdgjph/cufQTXWekrdk347Qzqtcc03snXvbKLRSw4C\nhV311r4G865lV33MJUgUpFdGiGAWnrbdZy+L5UfuApSfX+/m0lwAydEX24dryo/6\nZIe5XHbg21Bf9Q7IXK8C/o4aR07mq8mURVi6tgTRKbDnM6ubX1/59uwmJkLbDqwj\nSrngR8TbhpLfpyiOmOGnOxKJFzd19U39IKqogppMOZy5DXtyRfZO7DDHktcNKgoj\nMbqRFlbuE2JQ94GR/Yn9aZpPNgVksUF00v6tSgGOK8+ywj6JTIbANtHZ8SIawkeT\nqQxnSjU9WIXzndhf9SbQ0HhUsXOAId/nLWErUkd8ifwR9ngbBsY0ChicSb594nua\nCj2TSKolmeD1O9PNarxd+N8d6dmmERhYXfnnsEfX7OKAlfOzaC/AIIFZobg44+JP\nTlEbYrcSwutvXEhFzGWDJK2jsnaqGJtygaFKhWI59kEJPGUdm1jAiaz5G5daSTZX\nDQCJqcxuRFcI9283KCROyi+2wH20CRpgemw5JnzlSzDWkW2J1Phgq9Iab9XVG8ne\n9a0+YkyopUSZesDZR9cGgjPG7NXrixn73yi8g87NlirFc79PmIo=\n=EVuY\n-----END PGP SIGNATURE-----", "payload": "tree 1ed19b06f3bde8cfc2a93acb7adb401724798c1b\nparent ad781a065ac874e402e15927a22faa080e97fe94\nauthor kennytm <kennytm@gmail.com> 1545715557 +0800\ncommitter kennytm <kennytm@gmail.com> 1545715557 +0800\n\nRevert \"Rollup merge of #56944 - alexcrichton:less-thin2, r=michaelwoerister\"\n\nThis reverts commit f1051b574c26e20608ff26415a3dddd13f140925, reversing\nchanges made to 833e0b3b8a9f1487a61152ca76f7f74a6b32cc0c.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07f5dbc4901e764da81faf6388402d6539da1729", "html_url": "https://github.com/rust-lang/rust/commit/07f5dbc4901e764da81faf6388402d6539da1729", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07f5dbc4901e764da81faf6388402d6539da1729/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad781a065ac874e402e15927a22faa080e97fe94", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad781a065ac874e402e15927a22faa080e97fe94", "html_url": "https://github.com/rust-lang/rust/commit/ad781a065ac874e402e15927a22faa080e97fe94"}], "stats": {"total": 258, "additions": 240, "deletions": 18}, "files": [{"sha": "84e7c40e4559e479a94d2b71257ea0bc9fdff3c3", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/07f5dbc4901e764da81faf6388402d6539da1729/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07f5dbc4901e764da81faf6388402d6539da1729/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=07f5dbc4901e764da81faf6388402d6539da1729", "patch": "@@ -48,6 +48,7 @@ impl Step for Std {\n         builder.info(&format!(\"Checking std artifacts ({} -> {})\", &compiler.host, target));\n         run_cargo(builder,\n                   &mut cargo,\n+                  vec![],\n                   &libstd_stamp(builder, compiler, target),\n                   true);\n \n@@ -94,6 +95,7 @@ impl Step for Rustc {\n         builder.info(&format!(\"Checking compiler artifacts ({} -> {})\", &compiler.host, target));\n         run_cargo(builder,\n                   &mut cargo,\n+                  vec![],\n                   &librustc_stamp(builder, compiler, target),\n                   true);\n \n@@ -144,6 +146,7 @@ impl Step for CodegenBackend {\n         let _folder = builder.fold_output(|| format!(\"stage{}-rustc_codegen_llvm\", compiler.stage));\n         run_cargo(builder,\n                   &mut cargo,\n+                  vec![],\n                   &codegen_backend_stamp(builder, compiler, target, backend),\n                   true);\n     }\n@@ -181,6 +184,7 @@ impl Step for Test {\n         builder.info(&format!(\"Checking test artifacts ({} -> {})\", &compiler.host, target));\n         run_cargo(builder,\n                   &mut cargo,\n+                  vec![],\n                   &libtest_stamp(builder, compiler, target),\n                   true);\n \n@@ -228,6 +232,7 @@ impl Step for Rustdoc {\n         println!(\"Checking rustdoc artifacts ({} -> {})\", &compiler.host, target);\n         run_cargo(builder,\n                   &mut cargo,\n+                  vec![],\n                   &rustdoc_stamp(builder, compiler, target),\n                   true);\n "}, {"sha": "61a04b97206029fbb3679f7e17358dc893456bb5", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 41, "deletions": 8, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/07f5dbc4901e764da81faf6388402d6539da1729/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07f5dbc4901e764da81faf6388402d6539da1729/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=07f5dbc4901e764da81faf6388402d6539da1729", "patch": "@@ -29,7 +29,6 @@ use build_helper::{output, mtime, up_to_date};\n use filetime::FileTime;\n use serde_json;\n \n-use crate::dist;\n use crate::util::{exe, libdir, is_dylib};\n use crate::{Compiler, Mode, GitRepo};\n use crate::native;\n@@ -115,6 +114,7 @@ impl Step for Std {\n                 &compiler.host, target));\n         run_cargo(builder,\n                   &mut cargo,\n+                  vec![],\n                   &libstd_stamp(builder, compiler, target),\n                   false);\n \n@@ -375,6 +375,7 @@ impl Step for Test {\n                 &compiler.host, target));\n         run_cargo(builder,\n                   &mut cargo,\n+                  vec![],\n                   &libtest_stamp(builder, compiler, target),\n                   false);\n \n@@ -502,6 +503,7 @@ impl Step for Rustc {\n                  compiler.stage, &compiler.host, target));\n         run_cargo(builder,\n                   &mut cargo,\n+                  vec![],\n                   &librustc_stamp(builder, compiler, target),\n                   false);\n \n@@ -644,18 +646,47 @@ impl Step for CodegenBackend {\n \n         let out_dir = builder.cargo_out(compiler, Mode::Codegen, target);\n \n-        let mut cargo = builder.cargo(compiler, Mode::Codegen, target, \"build\");\n+        let mut cargo = builder.cargo(compiler, Mode::Codegen, target, \"rustc\");\n         cargo.arg(\"--manifest-path\")\n             .arg(builder.src.join(\"src/librustc_codegen_llvm/Cargo.toml\"));\n         rustc_cargo_env(builder, &mut cargo);\n \n         let features = build_codegen_backend(&builder, &mut cargo, &compiler, target, backend);\n \n+        let mut cargo_tails_args = vec![];\n+\n+        if builder.config.llvm_thin_lto {\n+            cargo_tails_args.push(\"--\".to_string());\n+\n+            let num_jobs = builder.jobs();\n+\n+            if !target.contains(\"msvc\") {\n+                // Here we assume that the linker is clang. If it's not, there'll\n+                // be linker errors.\n+                cargo_tails_args.push(\"-Clink-arg=-fuse-ld=lld\".to_string());\n+                cargo_tails_args.push(\"-Clink-arg=-flto=thin\".to_string());\n+\n+                if builder.config.llvm_optimize {\n+                    cargo_tails_args.push(\"-Clink-arg=-O2\".to_string());\n+                }\n+\n+                // Let's make LLD respect the `-j` option.\n+                let num_jobs_arg = format!(\"-Clink-arg=-Wl,--thinlto-jobs={}\", num_jobs);\n+                cargo_tails_args.push(num_jobs_arg);\n+            } else {\n+                // Here we assume that the linker is lld-link.exe. lld-link.exe\n+                // does not need the extra arguments except for num_jobs\n+                let num_jobs_arg = format!(\"-Clink-arg=/opt:lldltojobs={}\", num_jobs);\n+                cargo_tails_args.push(num_jobs_arg);\n+            }\n+        }\n+\n         let tmp_stamp = out_dir.join(\".tmp.stamp\");\n \n         let _folder = builder.fold_output(|| format!(\"stage{}-rustc_codegen_llvm\", compiler.stage));\n         let files = run_cargo(builder,\n                               cargo.arg(\"--features\").arg(features),\n+                              cargo_tails_args,\n                               &tmp_stamp,\n                               false);\n         if builder.config.dry_run {\n@@ -728,9 +759,7 @@ pub fn build_codegen_backend(builder: &Builder,\n                                          \"libstdc++.a\");\n                 cargo.env(\"LLVM_STATIC_STDCPP\", file);\n             }\n-            if builder.config.llvm_link_shared ||\n-                (builder.config.llvm_thin_lto && backend != \"emscripten\")\n-            {\n+            if builder.config.llvm_link_shared {\n                 cargo.env(\"LLVM_LINK_SHARED\", \"1\");\n             }\n         }\n@@ -970,8 +999,6 @@ impl Step for Assemble {\n             copy_lld_to_sysroot(builder, target_compiler, &lld_install);\n         }\n \n-        dist::maybe_install_llvm_dylib(builder, target_compiler.host, &sysroot);\n-\n         // Link the compiler binary itself into place\n         let out_dir = builder.cargo_out(build_compiler, Mode::Rustc, host);\n         let rustc = out_dir.join(exe(\"rustc_binary\", &*host));\n@@ -998,6 +1025,7 @@ pub fn add_to_sysroot(builder: &Builder, sysroot_dst: &Path, stamp: &Path) {\n \n pub fn run_cargo(builder: &Builder,\n                  cargo: &mut Command,\n+                 tail_args: Vec<String>,\n                  stamp: &Path,\n                  is_check: bool)\n     -> Vec<PathBuf>\n@@ -1020,7 +1048,7 @@ pub fn run_cargo(builder: &Builder,\n     // files we need to probe for later.\n     let mut deps = Vec::new();\n     let mut toplevel = Vec::new();\n-    let ok = stream_cargo(builder, cargo, &mut |msg| {\n+    let ok = stream_cargo(builder, cargo, tail_args, &mut |msg| {\n         let filenames = match msg {\n             CargoMessage::CompilerArtifact { filenames, .. } => filenames,\n             _ => return,\n@@ -1145,6 +1173,7 @@ pub fn run_cargo(builder: &Builder,\n pub fn stream_cargo(\n     builder: &Builder,\n     cargo: &mut Command,\n+    tail_args: Vec<String>,\n     cb: &mut dyn FnMut(CargoMessage),\n ) -> bool {\n     if builder.config.dry_run {\n@@ -1155,6 +1184,10 @@ pub fn stream_cargo(\n     cargo.arg(\"--message-format\").arg(\"json\")\n          .stdout(Stdio::piped());\n \n+    for arg in tail_args {\n+        cargo.arg(arg);\n+    }\n+\n     builder.verbose(&format!(\"running: {:?}\", cargo));\n     let mut child = match cargo.spawn() {\n         Ok(child) => child,"}, {"sha": "f6f4d6084654455b4c79d067e0497c31a146951d", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07f5dbc4901e764da81faf6388402d6539da1729/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07f5dbc4901e764da81faf6388402d6539da1729/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=07f5dbc4901e764da81faf6388402d6539da1729", "patch": "@@ -1887,13 +1887,13 @@ impl Step for HashSign {\n // LLVM tools are linked dynamically.\n // Note: This function does no yet support Windows but we also don't support\n //       linking LLVM tools dynamically on Windows yet.\n-pub fn maybe_install_llvm_dylib(builder: &Builder,\n-                                target: Interned<String>,\n-                                sysroot: &Path) {\n+fn maybe_install_llvm_dylib(builder: &Builder,\n+                            target: Interned<String>,\n+                            image: &Path) {\n     let src_libdir = builder\n         .llvm_out(target)\n         .join(\"lib\");\n-    let dst_libdir = sysroot.join(\"lib/rustlib\").join(&*target).join(\"lib\");\n+    let dst_libdir = image.join(\"lib/rustlib\").join(&*target).join(\"lib\");\n     t!(fs::create_dir_all(&dst_libdir));\n \n     if target.contains(\"apple-darwin\") {"}, {"sha": "4335359e11589c7295c18e2f4832f615d61d7b2e", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07f5dbc4901e764da81faf6388402d6539da1729/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07f5dbc4901e764da81faf6388402d6539da1729/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=07f5dbc4901e764da81faf6388402d6539da1729", "patch": "@@ -87,7 +87,7 @@ impl Step for ToolBuild {\n         let _folder = builder.fold_output(|| format!(\"stage{}-{}\", compiler.stage, tool));\n         builder.info(&format!(\"Building stage{} tool {} ({})\", compiler.stage, tool, target));\n         let mut duplicates = Vec::new();\n-        let is_expected = compile::stream_cargo(builder, &mut cargo, &mut |msg| {\n+        let is_expected = compile::stream_cargo(builder, &mut cargo, vec![], &mut |msg| {\n             // Only care about big things like the RLS/Cargo for now\n             match tool {\n                 | \"rls\""}, {"sha": "6c1417741f252f7379f407051f38631b3c1f9f44", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/07f5dbc4901e764da81faf6388402d6539da1729/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07f5dbc4901e764da81faf6388402d6539da1729/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=07f5dbc4901e764da81faf6388402d6539da1729", "patch": "@@ -210,7 +210,14 @@ pub fn run<F>(run_compiler: F) -> isize\n }\n \n fn load_backend_from_dylib(path: &Path) -> fn() -> Box<dyn CodegenBackend> {\n-    let lib = DynamicLibrary::open(Some(path)).unwrap_or_else(|err| {\n+    // Note that we're specifically using `open_global_now` here rather than\n+    // `open`, namely we want the behavior on Unix of RTLD_GLOBAL and RTLD_NOW,\n+    // where NOW means \"bind everything right now\" because we don't want\n+    // surprises later on and RTLD_GLOBAL allows the symbols to be made\n+    // available for future dynamic libraries opened. This is currently used by\n+    // loading LLVM and then making its symbols available for other dynamic\n+    // libraries.\n+    let lib = DynamicLibrary::open_global_now(path).unwrap_or_else(|err| {\n         let err = format!(\"couldn't load codegen backend {:?}: {:?}\", path, err);\n         early_error(ErrorOutputType::default(), &err);\n     });"}, {"sha": "ce482087bbae57caa5d4116d8995d2d30d71b935", "filename": "src/librustc_llvm/build.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07f5dbc4901e764da81faf6388402d6539da1729/src%2Flibrustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07f5dbc4901e764da81faf6388402d6539da1729/src%2Flibrustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fbuild.rs?ref=07f5dbc4901e764da81faf6388402d6539da1729", "patch": "@@ -142,10 +142,6 @@ fn main() {\n             continue;\n         }\n \n-        if flag.starts_with(\"-flto\") {\n-            continue;\n-        }\n-\n         // -Wdate-time is not supported by the netbsd cross compiler\n         if is_crossed && target.contains(\"netbsd\") && flag.contains(\"date-time\") {\n             continue;"}, {"sha": "8a18aadf36a8bb635684927b165c09f869f0c862", "filename": "src/test/run-make-fulldeps/llvm-pass/Makefile", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/07f5dbc4901e764da81faf6388402d6539da1729/src%2Ftest%2Frun-make-fulldeps%2Fllvm-pass%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/07f5dbc4901e764da81faf6388402d6539da1729/src%2Ftest%2Frun-make-fulldeps%2Fllvm-pass%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fllvm-pass%2FMakefile?ref=07f5dbc4901e764da81faf6388402d6539da1729", "patch": "@@ -0,0 +1,28 @@\n+-include ../tools.mk\n+\n+ifeq ($(UNAME),Darwin)\n+PLUGIN_FLAGS := -C link-args=-Wl,-undefined,dynamic_lookup\n+endif\n+\n+ifeq ($(findstring stage1,$(RUST_BUILD_STAGE)),stage1)\n+# ignore stage1\n+all:\n+\n+else\n+# Windows doesn't correctly handle include statements with escaping paths,\n+# so this test will not get run on Windows.\n+ifdef IS_WINDOWS\n+all:\n+else\n+all: $(call NATIVE_STATICLIB,llvm-function-pass) $(call NATIVE_STATICLIB,llvm-module-pass)\n+\t$(RUSTC) plugin.rs -C prefer-dynamic $(PLUGIN_FLAGS)\n+\t$(RUSTC) main.rs\n+\n+$(TMPDIR)/libllvm-function-pass.o:\n+\t$(CXX) $(CFLAGS) $(LLVM_CXXFLAGS) -c llvm-function-pass.so.cc -o $(TMPDIR)/libllvm-function-pass.o\n+\n+$(TMPDIR)/libllvm-module-pass.o:\n+\t$(CXX) $(CFLAGS) $(LLVM_CXXFLAGS) -c llvm-module-pass.so.cc -o $(TMPDIR)/libllvm-module-pass.o\n+endif\n+\n+endif"}, {"sha": "c0a17d920cffc91154ee4b0e22d473225a408b92", "filename": "src/test/run-make-fulldeps/llvm-pass/llvm-function-pass.so.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/07f5dbc4901e764da81faf6388402d6539da1729/src%2Ftest%2Frun-make-fulldeps%2Fllvm-pass%2Fllvm-function-pass.so.cc", "raw_url": "https://github.com/rust-lang/rust/raw/07f5dbc4901e764da81faf6388402d6539da1729/src%2Ftest%2Frun-make-fulldeps%2Fllvm-pass%2Fllvm-function-pass.so.cc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fllvm-pass%2Fllvm-function-pass.so.cc?ref=07f5dbc4901e764da81faf6388402d6539da1729", "patch": "@@ -0,0 +1,56 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <unistd.h>\n+\n+#include \"llvm/Pass.h\"\n+#include \"llvm/IR/Function.h\"\n+\n+using namespace llvm;\n+\n+namespace {\n+\n+  class TestLLVMPass : public FunctionPass {\n+\n+  public:\n+\n+    static char ID;\n+    TestLLVMPass() : FunctionPass(ID) { }\n+\n+    bool runOnFunction(Function &F) override;\n+\n+    StringRef getPassName() const override {\n+      return \"Some LLVM pass\";\n+    }\n+\n+  };\n+\n+}\n+\n+bool TestLLVMPass::runOnFunction(Function &F) {\n+  // A couple examples of operations that previously caused segmentation faults\n+  // https://github.com/rust-lang/rust/issues/31067\n+\n+  for (auto N = F.begin(); N != F.end(); ++N) {\n+    /* code */\n+  }\n+\n+  LLVMContext &C = F.getContext();\n+  IntegerType *Int8Ty  = IntegerType::getInt8Ty(C);\n+  PointerType::get(Int8Ty, 0);\n+  return true;\n+}\n+\n+char TestLLVMPass::ID = 0;\n+\n+static RegisterPass<TestLLVMPass> RegisterAFLPass(\n+  \"some-llvm-function-pass\", \"Some LLVM pass\");"}, {"sha": "70051681ab0350393a8f25eae75e5becce325974", "filename": "src/test/run-make-fulldeps/llvm-pass/llvm-module-pass.so.cc", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/07f5dbc4901e764da81faf6388402d6539da1729/src%2Ftest%2Frun-make-fulldeps%2Fllvm-pass%2Fllvm-module-pass.so.cc", "raw_url": "https://github.com/rust-lang/rust/raw/07f5dbc4901e764da81faf6388402d6539da1729/src%2Ftest%2Frun-make-fulldeps%2Fllvm-pass%2Fllvm-module-pass.so.cc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fllvm-pass%2Fllvm-module-pass.so.cc?ref=07f5dbc4901e764da81faf6388402d6539da1729", "patch": "@@ -0,0 +1,55 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <unistd.h>\n+\n+#include \"llvm/IR/Module.h\"\n+\n+using namespace llvm;\n+\n+namespace {\n+\n+  class TestLLVMPass : public ModulePass {\n+\n+  public:\n+\n+    static char ID;\n+    TestLLVMPass() : ModulePass(ID) { }\n+\n+    bool runOnModule(Module &M) override;\n+\n+    StringRef getPassName() const override {\n+      return \"Some LLVM pass\";\n+    }\n+\n+  };\n+\n+}\n+\n+bool TestLLVMPass::runOnModule(Module &M) {\n+  // A couple examples of operations that previously caused segmentation faults\n+  // https://github.com/rust-lang/rust/issues/31067\n+\n+  for (auto F = M.begin(); F != M.end(); ++F) {\n+    /* code */\n+  }\n+\n+  LLVMContext &C = M.getContext();\n+  IntegerType *Int8Ty  = IntegerType::getInt8Ty(C);\n+  PointerType::get(Int8Ty, 0);\n+  return true;\n+}\n+\n+char TestLLVMPass::ID = 0;\n+\n+static RegisterPass<TestLLVMPass> RegisterAFLPass(\n+  \"some-llvm-module-pass\", \"Some LLVM pass\");"}, {"sha": "5b5ab94bcef02c139cb8493936050b5b2c0ca5ce", "filename": "src/test/run-make-fulldeps/llvm-pass/main.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/07f5dbc4901e764da81faf6388402d6539da1729/src%2Ftest%2Frun-make-fulldeps%2Fllvm-pass%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07f5dbc4901e764da81faf6388402d6539da1729/src%2Ftest%2Frun-make-fulldeps%2Fllvm-pass%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fllvm-pass%2Fmain.rs?ref=07f5dbc4901e764da81faf6388402d6539da1729", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(plugin)]\n+#![plugin(some_plugin)]\n+\n+fn main() {}"}, {"sha": "f77b2fca857a613e3759bb50b4fec40995186fc6", "filename": "src/test/run-make-fulldeps/llvm-pass/plugin.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/07f5dbc4901e764da81faf6388402d6539da1729/src%2Ftest%2Frun-make-fulldeps%2Fllvm-pass%2Fplugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07f5dbc4901e764da81faf6388402d6539da1729/src%2Ftest%2Frun-make-fulldeps%2Fllvm-pass%2Fplugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fllvm-pass%2Fplugin.rs?ref=07f5dbc4901e764da81faf6388402d6539da1729", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(plugin_registrar, rustc_private)]\n+#![crate_type = \"dylib\"]\n+#![crate_name = \"some_plugin\"]\n+\n+extern crate rustc;\n+extern crate rustc_plugin;\n+\n+#[link(name = \"llvm-function-pass\", kind = \"static\")]\n+#[link(name = \"llvm-module-pass\", kind = \"static\")]\n+extern {}\n+\n+use rustc_plugin::registry::Registry;\n+\n+#[plugin_registrar]\n+pub fn plugin_registrar(reg: &mut Registry) {\n+    reg.register_llvm_pass(\"some-llvm-function-pass\");\n+    reg.register_llvm_pass(\"some-llvm-module-pass\");\n+}"}]}