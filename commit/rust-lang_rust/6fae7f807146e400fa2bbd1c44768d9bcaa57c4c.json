{"sha": "6fae7f807146e400fa2bbd1c44768d9bcaa57c4c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmYWU3ZjgwNzE0NmU0MDBmYTJiYmQxYzQ0NzY4ZDliY2FhNTdjNGM=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-07-27T02:36:26Z"}, "committer": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-07-29T19:17:49Z"}, "message": "Wrap promoted generator fields in MaybeUninit\n\nThis prevents uninhabited fields from \"infecting\" the abi and\nlargest_niche of the generator layout.\n\nThis fixes a latent bug, where an uninhabited field could be promoted to\nthe generator prefix and cause the entire generator to become\nuninhabited.", "tree": {"sha": "83c3496735c01f5d7b0f4408b4c8d2f4e12761a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83c3496735c01f5d7b0f4408b4c8d2f4e12761a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fae7f807146e400fa2bbd1c44768d9bcaa57c4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fae7f807146e400fa2bbd1c44768d9bcaa57c4c", "html_url": "https://github.com/rust-lang/rust/commit/6fae7f807146e400fa2bbd1c44768d9bcaa57c4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fae7f807146e400fa2bbd1c44768d9bcaa57c4c/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c43753f910aae000f8bcb0a502407ea332afc74b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c43753f910aae000f8bcb0a502407ea332afc74b", "html_url": "https://github.com/rust-lang/rust/commit/c43753f910aae000f8bcb0a502407ea332afc74b"}], "stats": {"total": 47, "additions": 37, "deletions": 10}, "files": [{"sha": "1a37326c132f2a80b3332737deb7947928ad9d1c", "filename": "src/libcore/mem/maybe_uninit.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fae7f807146e400fa2bbd1c44768d9bcaa57c4c/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fae7f807146e400fa2bbd1c44768d9bcaa57c4c/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs?ref=6fae7f807146e400fa2bbd1c44768d9bcaa57c4c", "patch": "@@ -208,6 +208,8 @@ use crate::mem::ManuallyDrop;\n /// guarantee may evolve.\n #[allow(missing_debug_implementations)]\n #[stable(feature = \"maybe_uninit\", since = \"1.36.0\")]\n+// Lang item so we can wrap other types in it. This is useful for generators.\n+#[cfg_attr(not(bootstrap), lang = \"maybe_uninit\")]\n #[derive(Copy)]\n #[repr(transparent)]\n pub union MaybeUninit<T> {"}, {"sha": "c5c8639324358123035b0f1bcf2145254b56d8da", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fae7f807146e400fa2bbd1c44768d9bcaa57c4c/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fae7f807146e400fa2bbd1c44768d9bcaa57c4c/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=6fae7f807146e400fa2bbd1c44768d9bcaa57c4c", "patch": "@@ -365,6 +365,8 @@ language_item_table! {\n \n     ManuallyDropItem,            \"manually_drop\",      manually_drop,           Target::Struct;\n \n+    MaybeUninitLangItem,         \"maybe_uninit\",       maybe_uninit,            Target::Union;\n+\n     DebugTraitLangItem,          \"debug_trait\",        debug_trait,             Target::Trait;\n \n     // Align offset for stride != 1, must not panic."}, {"sha": "57bababc101e4db0add8a1b39a9acbcb495bb0e3", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6fae7f807146e400fa2bbd1c44768d9bcaa57c4c/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fae7f807146e400fa2bbd1c44768d9bcaa57c4c/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=6fae7f807146e400fa2bbd1c44768d9bcaa57c4c", "patch": "@@ -2347,18 +2347,17 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.mk_ty(Foreign(def_id))\n     }\n \n-    pub fn mk_box(self, ty: Ty<'tcx>) -> Ty<'tcx> {\n-        let def_id = self.require_lang_item(lang_items::OwnedBoxLangItem);\n-        let adt_def = self.adt_def(def_id);\n-        let substs = InternalSubsts::for_item(self, def_id, |param, substs| {\n+    fn mk_generic_adt(self, wrapper_def_id: DefId, ty_param: Ty<'tcx>) -> Ty<'tcx> {\n+        let adt_def = self.adt_def(wrapper_def_id);\n+        let substs = InternalSubsts::for_item(self, wrapper_def_id, |param, substs| {\n             match param.kind {\n                 GenericParamDefKind::Lifetime |\n                 GenericParamDefKind::Const => {\n                     bug!()\n                 }\n                 GenericParamDefKind::Type { has_default, .. } => {\n                     if param.index == 0 {\n-                        ty.into()\n+                        ty_param.into()\n                     } else {\n                         assert!(has_default);\n                         self.type_of(param.def_id).subst(self, substs).into()\n@@ -2369,6 +2368,18 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.mk_ty(Adt(adt_def, substs))\n     }\n \n+    #[inline]\n+    pub fn mk_box(self, ty: Ty<'tcx>) -> Ty<'tcx> {\n+        let def_id = self.require_lang_item(lang_items::OwnedBoxLangItem);\n+        self.mk_generic_adt(def_id, ty)\n+    }\n+\n+    #[inline]\n+    pub fn mk_maybe_uninit(self, ty: Ty<'tcx>) -> Ty<'tcx> {\n+        let def_id = self.require_lang_item(lang_items::MaybeUninitLangItem);\n+        self.mk_generic_adt(def_id, ty)\n+    }\n+\n     #[inline]\n     pub fn mk_ptr(self, tm: TypeAndMut<'tcx>) -> Ty<'tcx> {\n         self.mk_ty(RawPtr(tm))"}, {"sha": "03b95bc3a943df0e7b38b4bc881b2e4a045d5514", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6fae7f807146e400fa2bbd1c44768d9bcaa57c4c/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fae7f807146e400fa2bbd1c44768d9bcaa57c4c/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=6fae7f807146e400fa2bbd1c44768d9bcaa57c4c", "patch": "@@ -1406,24 +1406,21 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n             Abi::Scalar(s) => s.clone(),\n             _ => bug!(),\n         };\n-        // FIXME(eddyb) wrap each promoted type in `MaybeUninit` so that they\n-        // don't poison the `largest_niche` or `abi` fields of `prefix`.\n         let promoted_layouts = ineligible_locals.iter()\n             .map(|local| subst_field(info.field_tys[local]))\n+            .map(|ty| tcx.mk_maybe_uninit(ty))\n             .map(|ty| self.layout_of(ty));\n         let prefix_layouts = substs.prefix_tys(def_id, tcx)\n             .map(|ty| self.layout_of(ty))\n             .chain(iter::once(Ok(discr_layout)))\n             .chain(promoted_layouts)\n             .collect::<Result<Vec<_>, _>>()?;\n-        let mut prefix = self.univariant_uninterned(\n+        let prefix = self.univariant_uninterned(\n             ty,\n             &prefix_layouts,\n             &ReprOptions::default(),\n             StructKind::AlwaysSized,\n         )?;\n-        // FIXME(eddyb) need `MaybeUninit` around promoted types (see above).\n-        prefix.largest_niche = None;\n \n         let (prefix_size, prefix_align) = (prefix.size, prefix.align);\n "}, {"sha": "8f4254b10ceafec8485651b0d2d692fa62887c78", "filename": "src/test/ui/async-await/issues/issue-59972.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6fae7f807146e400fa2bbd1c44768d9bcaa57c4c/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-59972.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fae7f807146e400fa2bbd1c44768d9bcaa57c4c/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-59972.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-59972.rs?ref=6fae7f807146e400fa2bbd1c44768d9bcaa57c4c", "patch": "@@ -1,3 +1,7 @@\n+// Incorrect handling of uninhabited types could cause us to mark generator\n+// types as entirely uninhabited, when they were in fact constructible. This\n+// caused us to hit \"unreachable\" code (illegal instruction on x86).\n+\n // run-pass\n \n // compile-flags: --edition=2018\n@@ -19,7 +23,18 @@ async fn contains_never() {\n     let error2 = error;\n }\n \n+#[allow(unused)]\n+async fn overlap_never() {\n+    let error1 = uninhabited_async();\n+    noop().await;\n+    let error2 = uninhabited_async();\n+    drop(error1);\n+    noop().await;\n+    drop(error2);\n+}\n+\n #[allow(unused_must_use)]\n fn main() {\n     contains_never();\n+    overlap_never();\n }"}]}