{"sha": "8cfbffea3bca6152ab1a829c4a1cbff009581ebb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjZmJmZmVhM2JjYTYxNTJhYjFhODI5YzRhMWNiZmYwMDk1ODFlYmI=", "commit": {"author": {"name": "Austin Hicks", "email": "camlorn@camlorn.net", "date": "2016-11-16T22:00:35Z"}, "committer": {"name": "Austin Hicks", "email": "camlorn@camlorn.net", "date": "2016-12-14T17:28:19Z"}, "message": "Fix bugs to optimizing enums:\n\n- The discriminant must be first in all variants.\n- The loop responsible for patching enum variants when the discriminant is enlarged was nonfunctional.", "tree": {"sha": "96fba813d21ade8c5c14427ca9cda24c02884ee2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96fba813d21ade8c5c14427ca9cda24c02884ee2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8cfbffea3bca6152ab1a829c4a1cbff009581ebb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8cfbffea3bca6152ab1a829c4a1cbff009581ebb", "html_url": "https://github.com/rust-lang/rust/commit/8cfbffea3bca6152ab1a829c4a1cbff009581ebb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8cfbffea3bca6152ab1a829c4a1cbff009581ebb/comments", "author": {"login": "ahicks92", "id": 6968705, "node_id": "MDQ6VXNlcjY5Njg3MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/6968705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahicks92", "html_url": "https://github.com/ahicks92", "followers_url": "https://api.github.com/users/ahicks92/followers", "following_url": "https://api.github.com/users/ahicks92/following{/other_user}", "gists_url": "https://api.github.com/users/ahicks92/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahicks92/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahicks92/subscriptions", "organizations_url": "https://api.github.com/users/ahicks92/orgs", "repos_url": "https://api.github.com/users/ahicks92/repos", "events_url": "https://api.github.com/users/ahicks92/events{/privacy}", "received_events_url": "https://api.github.com/users/ahicks92/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ahicks92", "id": 6968705, "node_id": "MDQ6VXNlcjY5Njg3MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/6968705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahicks92", "html_url": "https://github.com/ahicks92", "followers_url": "https://api.github.com/users/ahicks92/followers", "following_url": "https://api.github.com/users/ahicks92/following{/other_user}", "gists_url": "https://api.github.com/users/ahicks92/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahicks92/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahicks92/subscriptions", "organizations_url": "https://api.github.com/users/ahicks92/orgs", "repos_url": "https://api.github.com/users/ahicks92/repos", "events_url": "https://api.github.com/users/ahicks92/events{/privacy}", "received_events_url": "https://api.github.com/users/ahicks92/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cae94e8ec0971d6762fb06aa05c3d733e670abe5", "url": "https://api.github.com/repos/rust-lang/rust/commits/cae94e8ec0971d6762fb06aa05c3d733e670abe5", "html_url": "https://github.com/rust-lang/rust/commit/cae94e8ec0971d6762fb06aa05c3d733e670abe5"}], "stats": {"total": 21, "additions": 15, "deletions": 6}, "files": [{"sha": "f4960b5680f01d7b70c90a78cd7b4bc235e54986", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8cfbffea3bca6152ab1a829c4a1cbff009581ebb/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cfbffea3bca6152ab1a829c4a1cbff009581ebb/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=8cfbffea3bca6152ab1a829c4a1cbff009581ebb", "patch": "@@ -550,6 +550,7 @@ impl<'a, 'gcx, 'tcx> Struct {\n                      -> Result<(), LayoutError<'gcx>>\n     where I: Iterator<Item=Result<&'a Layout, LayoutError<'gcx>>> {\n         let fields = fields.collect::<Result<Vec<_>, LayoutError<'gcx>>>()?;\n+        if is_enum_variant { assert!(fields.len() >= 1, \"Enum variants must have at least a discriminant field.\") }\n         if fields.len() == 0 {return Ok(())};\n \n         self.offsets = vec![Size::from_bytes(0); fields.len()];\n@@ -566,6 +567,7 @@ impl<'a, 'gcx, 'tcx> Struct {\n                 let optimizing  = &mut inverse_gep_index[start..end];\n                 optimizing.sort_by_key(|&x| fields[x as usize].align(dl).abi());\n             }\n+        if is_enum_variant { assert_eq!(inverse_gep_index[0], 0, \"Enums must have field 0 as the field with lowest offset.\") }\n         }\n         \n         // At this point, inverse_gep_index holds field indices by increasing offset.\n@@ -1053,7 +1055,7 @@ impl<'a, 'gcx, 'tcx> Layout {\n             // Tuples and closures.\n             ty::TyClosure(def_id, ref substs) => {\n                 let tys = substs.upvar_tys(def_id, tcx);\n-                let mut st = Struct::new(dl,\n+                let st = Struct::new(dl,\n                     tys.map(|ty| ty.layout(infcx)),\n                     attr::ReprAny,\n                     false, ty)?;\n@@ -1228,7 +1230,8 @@ impl<'a, 'gcx, 'tcx> Layout {\n                         hint, false, ty)?;\n                     // Find the first field we can't move later\n                     // to make room for a larger discriminant.\n-                    for i in st.field_index_by_increasing_offset() {\n+                    // It is important to skip the first field.\n+                    for i in st.field_index_by_increasing_offset().skip(1) {\n                         let field = fields[i].unwrap();\n                         let field_align = field.align(dl);\n                         if field.size(dl).bytes() != 0 || field_align.abi() != 1 {\n@@ -1270,7 +1273,9 @@ impl<'a, 'gcx, 'tcx> Layout {\n                     let new_ity_size = Int(ity).size(dl);\n                     for variant in &mut variants {\n                         for i in variant.offsets.iter_mut() {\n-                            if *i <= old_ity_size {\n+                            // The first field is the discrimminant, at offset 0.\n+                            // These aren't in order, and we need to skip it.\n+                            if *i <= old_ity_size && *i > Size::from_bytes(0){\n                                 *i = new_ity_size;\n                             }\n                         }"}, {"sha": "49bbcc18efb2891e799694ca59d2827c2f72fcd4", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cfbffea3bca6152ab1a829c4a1cbff009581ebb/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cfbffea3bca6152ab1a829c4a1cbff009581ebb/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=8cfbffea3bca6152ab1a829c4a1cbff009581ebb", "patch": "@@ -750,7 +750,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for VariantSizeDifferences {\n                 if let Layout::General { ref variants, ref size, discr, .. } = *layout {\n                     let discr_size = Primitive::Int(discr).size(&cx.tcx.data_layout).bytes();\n \n-                    debug!(\"enum `{}` is {} bytes large\", t, size.bytes());\n+                    debug!(\"enum `{}` is {} bytes large with layout:\\n{:#?}\", t, size.bytes(), layout);\n \n                     let (largest, slargest, largest_index) = enum_definition.variants\n                         .iter()"}, {"sha": "beccbf5eb0394a64c3202a9863912d74b631d50e", "filename": "src/test/run-pass/enum-size-variance.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8cfbffea3bca6152ab1a829c4a1cbff009581ebb/src%2Ftest%2Frun-pass%2Fenum-size-variance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cfbffea3bca6152ab1a829c4a1cbff009581ebb/src%2Ftest%2Frun-pass%2Fenum-size-variance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-size-variance.rs?ref=8cfbffea3bca6152ab1a829c4a1cbff009581ebb", "patch": "@@ -11,6 +11,9 @@\n #![warn(variant_size_differences)]\n #![allow(dead_code)]\n \n+// Note that the following test only works because all fields of the enum variants are of the same size.\n+// If this test is modified so that the reordering logic in librustc/ty/layout.rs kicks in, it will fail.\n+\n enum Enum1 { }\n \n enum Enum2 { A, B, C }"}, {"sha": "2cd3136b0ebe6fb3182b7e03b671b820cee6b123", "filename": "src/test/run-pass/nonzero-enum.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8cfbffea3bca6152ab1a829c4a1cbff009581ebb/src%2Ftest%2Frun-pass%2Fnonzero-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cfbffea3bca6152ab1a829c4a1cbff009581ebb/src%2Ftest%2Frun-pass%2Fnonzero-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnonzero-enum.rs?ref=8cfbffea3bca6152ab1a829c4a1cbff009581ebb", "patch": "@@ -26,8 +26,9 @@ fn main() {\n     assert_eq!(size_of::<E>(), 1);\n     assert_eq!(size_of::<Option<E>>(), 1);\n     assert_eq!(size_of::<Result<E, ()>>(), 1);\n-    assert_eq!(size_of::<S>(), 4);\n-    assert_eq!(size_of::<Option<S>>(), 4);\n+    // The next asserts are correct given the currently dumb field reordering algorithm, which actually makes this struct larger.\n+    assert_eq!(size_of::<S>(), 6);\n+    assert_eq!(size_of::<Option<S>>(), 6);\n     let enone = None::<E>;\n     let esome = Some(E::A);\n     if let Some(..) = enone {"}]}