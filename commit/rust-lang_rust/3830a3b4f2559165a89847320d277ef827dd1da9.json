{"sha": "3830a3b4f2559165a89847320d277ef827dd1da9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4MzBhM2I0ZjI1NTkxNjVhODk4NDczMjBkMjc3ZWY4MjdkZDFkYTk=", "commit": {"author": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2014-01-18T17:10:17Z"}, "committer": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2014-01-18T19:17:12Z"}, "message": "Replace old pow_with_uint with the new pow func\n\nThere was an old and barely used implementation of pow, which expected\nboth parameters to be uint and required more traits to be implemented.\nSince a new implementation for `pow` landed, I'm proposing to remove\nthis old impl in favor of the new one.\n\nThe benchmark shows that the new implementation is faster than the one\nbeing removed:\n\ntest num::bench::bench_pow_function               ..bench:      9429 ns/iter (+/- 2055)\ntest num::bench::bench_pow_with_uint_function     ...bench:     28476 ns/iter (+/- 2202)", "tree": {"sha": "ea47f8d1d18f2f5f8c8b8b058e1b07862a0f3230", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea47f8d1d18f2f5f8c8b8b058e1b07862a0f3230"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3830a3b4f2559165a89847320d277ef827dd1da9", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3830a3b4f2559165a89847320d277ef827dd1da9", "html_url": "https://github.com/rust-lang/rust/commit/3830a3b4f2559165a89847320d277ef827dd1da9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3830a3b4f2559165a89847320d277ef827dd1da9/comments", "author": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aaf8ba7c51011570e7a6bb350345c23378c4152c", "url": "https://api.github.com/repos/rust-lang/rust/commits/aaf8ba7c51011570e7a6bb350345c23378c4152c", "html_url": "https://github.com/rust-lang/rust/commit/aaf8ba7c51011570e7a6bb350345c23378c4152c"}], "stats": {"total": 52, "additions": 8, "deletions": 44}, "files": [{"sha": "a1f29d944f7639142b78c70f41076581b661538f", "filename": "src/libextra/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3830a3b4f2559165a89847320d277ef827dd1da9/src%2Flibextra%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3830a3b4f2559165a89847320d277ef827dd1da9/src%2Flibextra%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fjson.rs?ref=3830a3b4f2559165a89847320d277ef827dd1da9", "patch": "@@ -688,7 +688,7 @@ impl<T : Iterator<char>> Parser<T> {\n             }\n         }\n \n-        let exp: f64 = num::pow_with_uint(10u, exp);\n+        let exp: f64 = num::pow(10u as f64, exp);\n         if neg_exp {\n             res /= exp;\n         } else {"}, {"sha": "c374d6c21574a57eed603995865281e81a3c0d63", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/3830a3b4f2559165a89847320d277ef827dd1da9/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3830a3b4f2559165a89847320d277ef827dd1da9/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=3830a3b4f2559165a89847320d277ef827dd1da9", "patch": "@@ -993,37 +993,6 @@ pub fn from_str_radix<T: FromStrRadix>(str: &str, radix: uint) -> Option<T> {\n     FromStrRadix::from_str_radix(str, radix)\n }\n \n-/// Calculates a power to a given radix, optimized for uint `pow` and `radix`.\n-///\n-/// Returns `radix^pow` as `T`.\n-///\n-/// Note:\n-/// Also returns `1` for `0^0`, despite that technically being an\n-/// undefined number. The reason for this is twofold:\n-/// - If code written to use this function cares about that special case, it's\n-///   probably going to catch it before making the call.\n-/// - If code written to use this function doesn't care about it, it's\n-///   probably assuming that `x^0` always equals `1`.\n-///\n-pub fn pow_with_uint<T:NumCast+One+Zero+Div<T,T>+Mul<T,T>>(radix: uint, pow: uint) -> T {\n-    let _0: T = Zero::zero();\n-    let _1: T = One::one();\n-\n-    if pow   == 0u { return _1; }\n-    if radix == 0u { return _0; }\n-    let mut my_pow     = pow;\n-    let mut total      = _1;\n-    let mut multiplier = cast(radix).unwrap();\n-    while (my_pow > 0u) {\n-        if my_pow % 2u == 1u {\n-            total = total * multiplier;\n-        }\n-        my_pow = my_pow / 2u;\n-        multiplier = multiplier * multiplier;\n-    }\n-    total\n-}\n-\n impl<T: Zero + 'static> Zero for @T {\n     fn zero() -> @T { @Zero::zero() }\n     fn is_zero(&self) -> bool { (**self).is_zero() }\n@@ -1698,10 +1667,4 @@ mod bench {\n         let v = vec::from_fn(1024, |n| n);\n         b.iter(|| {v.iter().fold(0, |old, new| num::pow(old, *new));});\n     }\n-\n-    #[bench]\n-    fn bench_pow_with_uint_function(b: &mut BenchHarness) {\n-        let v = vec::from_fn(1024, |n| n);\n-        b.iter(|| {v.iter().fold(0, |old, new| num::pow_with_uint(old, *new));});\n-    }\n }"}, {"sha": "0c41c538c6c498181a1b5e3c6b1794cc6cd0c241", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3830a3b4f2559165a89847320d277ef827dd1da9/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3830a3b4f2559165a89847320d277ef827dd1da9/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=3830a3b4f2559165a89847320d277ef827dd1da9", "patch": "@@ -20,7 +20,8 @@ use str::{StrSlice};\n use str;\n use vec::{CopyableVector, ImmutableVector, MutableVector};\n use vec::OwnedVector;\n-use num::{NumCast, Zero, One, cast, pow_with_uint, Integer};\n+use num;\n+use num::{NumCast, Zero, One, cast, Integer};\n use num::{Round, Float, FPNaN, FPInfinite, ToPrimitive};\n \n pub enum ExponentFormat {\n@@ -648,10 +649,10 @@ pub fn from_str_bytes_common<T:NumCast+Zero+One+Eq+Ord+Div<T,T>+\n \n     if exp_found {\n         let c = buf[i] as char;\n-        let base = match (c, exponent) {\n+        let base: T = match (c, exponent) {\n             // c is never _ so don't need to handle specially\n-            ('e', ExpDec) | ('E', ExpDec) => 10u,\n-            ('p', ExpBin) | ('P', ExpBin) => 2u,\n+            ('e', ExpDec) | ('E', ExpDec) => cast(10u).unwrap(),\n+            ('p', ExpBin) | ('P', ExpBin) => cast(2u).unwrap(),\n             _ => return None // char doesn't fit given exponent format\n         };\n \n@@ -664,9 +665,9 @@ pub fn from_str_bytes_common<T:NumCast+Zero+One+Eq+Ord+Div<T,T>+\n         match exp {\n             Some(exp_pow) => {\n                 multiplier = if exp_pow < 0 {\n-                    _1 / pow_with_uint::<T>(base, (-exp_pow.to_int().unwrap()) as uint)\n+                    _1 / num::pow(base, (-exp_pow.to_int().unwrap()) as uint)\n                 } else {\n-                    pow_with_uint::<T>(base, exp_pow.to_int().unwrap() as uint)\n+                    num::pow(base, exp_pow.to_int().unwrap() as uint)\n                 }\n             }\n             None => return None // invalid exponent -> invalid number"}]}