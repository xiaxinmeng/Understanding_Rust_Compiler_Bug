{"sha": "98450757e5fa18ee0be9213d2830c9363b0f5fd3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4NDUwNzU3ZTVmYTE4ZWUwYmU5MjEzZDI4MzBjOTM2M2IwZjVmZDM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-06T19:53:44Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-16T16:58:17Z"}, "message": "Revert \"Remove \"important traits\" feature\"\n\nThis reverts commit 1244ced9580b942926afc06815e0691cf3f4a846.", "tree": {"sha": "9ad6b743aa1994062558a71568569cce2664b033", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ad6b743aa1994062558a71568569cce2664b033"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98450757e5fa18ee0be9213d2830c9363b0f5fd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98450757e5fa18ee0be9213d2830c9363b0f5fd3", "html_url": "https://github.com/rust-lang/rust/commit/98450757e5fa18ee0be9213d2830c9363b0f5fd3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98450757e5fa18ee0be9213d2830c9363b0f5fd3/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ee1b62c811a6eb68d6db6dfb91f66a49956749b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ee1b62c811a6eb68d6db6dfb91f66a49956749b", "html_url": "https://github.com/rust-lang/rust/commit/6ee1b62c811a6eb68d6db6dfb91f66a49956749b"}], "stats": {"total": 402, "additions": 393, "deletions": 9}, "files": [{"sha": "d16c2a9d0342c71f4512a02c4db1a1dab0d5abea", "filename": "src/doc/rustdoc/src/unstable-features.md", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/98450757e5fa18ee0be9213d2830c9363b0f5fd3/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "raw_url": "https://github.com/rust-lang/rust/raw/98450757e5fa18ee0be9213d2830c9363b0f5fd3/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md?ref=98450757e5fa18ee0be9213d2830c9363b0f5fd3", "patch": "@@ -150,6 +150,27 @@ Book][unstable-doc-cfg] and [its tracking issue][issue-doc-cfg].\n [unstable-doc-cfg]: ../unstable-book/language-features/doc-cfg.html\n [issue-doc-cfg]: https://github.com/rust-lang/rust/issues/43781\n \n+### Adding your trait to the \"Important Traits\" dialog\n+\n+Rustdoc keeps a list of a few traits that are believed to be \"fundamental\" to a given type when\n+implemented on it. These traits are intended to be the primary interface for their types, and are\n+often the only thing available to be documented on their types. For this reason, Rustdoc will track\n+when a given type implements one of these traits and call special attention to it when a function\n+returns one of these types. This is the \"Important Traits\" dialog, visible as a circle-i button next\n+to the function, which, when clicked, shows the dialog.\n+\n+In the standard library, the traits that qualify for inclusion are `Iterator`, `io::Read`, and\n+`io::Write`. However, rather than being implemented as a hard-coded list, these traits have a\n+special marker attribute on them: `#[doc(spotlight)]`. This means that you could apply this\n+attribute to your own trait to include it in the \"Important Traits\" dialog in documentation.\n+\n+The `#[doc(spotlight)]` attribute currently requires the `#![feature(doc_spotlight)]` feature gate.\n+For more information, see [its chapter in the Unstable Book][unstable-spotlight] and [its tracking\n+issue][issue-spotlight].\n+\n+[unstable-spotlight]: ../unstable-book/language-features/doc-spotlight.html\n+[issue-spotlight]: https://github.com/rust-lang/rust/issues/45040\n+\n ### Exclude certain dependencies from documentation\n \n The standard library uses several dependencies which, in turn, use several types and traits from the"}, {"sha": "8117755fef1c8741f45648c178c98d37f4e3928d", "filename": "src/doc/unstable-book/src/language-features/doc-spotlight.md", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/98450757e5fa18ee0be9213d2830c9363b0f5fd3/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdoc-spotlight.md", "raw_url": "https://github.com/rust-lang/rust/raw/98450757e5fa18ee0be9213d2830c9363b0f5fd3/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdoc-spotlight.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdoc-spotlight.md?ref=98450757e5fa18ee0be9213d2830c9363b0f5fd3", "patch": "@@ -0,0 +1,30 @@\n+# `doc_spotlight`\n+\n+The tracking issue for this feature is: [#45040]\n+\n+The `doc_spotlight` feature allows the use of the `spotlight` parameter to the `#[doc]` attribute,\n+to \"spotlight\" a specific trait on the return values of functions. Adding a `#[doc(spotlight)]`\n+attribute to a trait definition will make rustdoc print extra information for functions which return\n+a type that implements that trait. This attribute is applied to the `Iterator`, `io::Read`, and\n+`io::Write` traits in the standard library.\n+\n+You can do this on your own traits, like this:\n+\n+```\n+#![feature(doc_spotlight)]\n+\n+#[doc(spotlight)]\n+pub trait MyTrait {}\n+\n+pub struct MyStruct;\n+impl MyTrait for MyStruct {}\n+\n+/// The docs for this function will have an extra line about `MyStruct` implementing `MyTrait`,\n+/// without having to write that yourself!\n+pub fn my_fn() -> MyStruct { MyStruct }\n+```\n+\n+This feature was originally implemented in PR [#45039].\n+\n+[#45040]: https://github.com/rust-lang/rust/issues/45040\n+[#45039]: https://github.com/rust-lang/rust/pull/45039"}, {"sha": "d7c310a8b4c8b2111e3a77f3e6564ac100fae3bb", "filename": "src/librustc_feature/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/98450757e5fa18ee0be9213d2830c9363b0f5fd3/src%2Flibrustc_feature%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98450757e5fa18ee0be9213d2830c9363b0f5fd3/src%2Flibrustc_feature%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Factive.rs?ref=98450757e5fa18ee0be9213d2830c9363b0f5fd3", "patch": "@@ -368,6 +368,9 @@ declare_features! (\n     /// Allows `#[doc(masked)]`.\n     (active, doc_masked, \"1.21.0\", Some(44027), None),\n \n+    /// Allows `#[doc(spotlight)]`.\n+    (active, doc_spotlight, \"1.22.0\", Some(45040), None),\n+\n     /// Allows `#[doc(include = \"some-file\")]`.\n     (active, external_doc, \"1.22.0\", Some(44732), None),\n "}, {"sha": "1387389981d2604aa2fa47b944b76d25a22306ce", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98450757e5fa18ee0be9213d2830c9363b0f5fd3/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98450757e5fa18ee0be9213d2830c9363b0f5fd3/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=98450757e5fa18ee0be9213d2830c9363b0f5fd3", "patch": "@@ -12,7 +12,7 @@ use rustc_metadata::creader::LoadedMacro;\n use rustc_middle::ty;\n use rustc_mir::const_eval::is_min_const_fn;\n use rustc_span::hygiene::MacroKind;\n-use rustc_span::symbol::Symbol;\n+use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n \n use crate::clean::{self, GetDefId, ToSource, TypeKind};\n@@ -194,13 +194,15 @@ pub fn build_external_trait(cx: &DocContext<'_>, did: DefId) -> clean::Trait {\n     let generics = (cx.tcx.generics_of(did), predicates).clean(cx);\n     let generics = filter_non_trait_generics(did, generics);\n     let (generics, supertrait_bounds) = separate_supertrait_bounds(generics);\n+    let is_spotlight = load_attrs(cx, did).clean(cx).has_doc_flag(sym::spotlight);\n     let is_auto = cx.tcx.trait_is_auto(did);\n     clean::Trait {\n         auto: auto_trait,\n         unsafety: cx.tcx.trait_def(did).unsafety,\n         generics,\n         items: trait_items,\n         bounds: supertrait_bounds,\n+        is_spotlight,\n         is_auto,\n     }\n }"}, {"sha": "8a4ee91df405fcb8b033ec6911e8916b71154aaf", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98450757e5fa18ee0be9213d2830c9363b0f5fd3/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98450757e5fa18ee0be9213d2830c9363b0f5fd3/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=98450757e5fa18ee0be9213d2830c9363b0f5fd3", "patch": "@@ -1007,6 +1007,7 @@ impl Clean<FnRetTy> for hir::FnRetTy<'_> {\n impl Clean<Item> for doctree::Trait<'_> {\n     fn clean(&self, cx: &DocContext<'_>) -> Item {\n         let attrs = self.attrs.clean(cx);\n+        let is_spotlight = attrs.has_doc_flag(sym::spotlight);\n         Item {\n             name: Some(self.name.clean(cx)),\n             attrs,\n@@ -1021,6 +1022,7 @@ impl Clean<Item> for doctree::Trait<'_> {\n                 items: self.items.iter().map(|ti| ti.clean(cx)).collect(),\n                 generics: self.generics.clean(cx),\n                 bounds: self.bounds.clean(cx),\n+                is_spotlight,\n                 is_auto: self.is_auto.clean(cx),\n             }),\n         }"}, {"sha": "5f6d9ecc0476d9c90a36c25d36dee6f33b04da2e", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98450757e5fa18ee0be9213d2830c9363b0f5fd3/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98450757e5fa18ee0be9213d2830c9363b0f5fd3/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=98450757e5fa18ee0be9213d2830c9363b0f5fd3", "patch": "@@ -995,6 +995,7 @@ pub struct Trait {\n     pub items: Vec<Item>,\n     pub generics: Generics,\n     pub bounds: Vec<GenericBound>,\n+    pub is_spotlight: bool,\n     pub is_auto: bool,\n }\n "}, {"sha": "0d8284029afc72f87143d5367a6a8fd84e6bab08", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/98450757e5fa18ee0be9213d2830c9363b0f5fd3/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98450757e5fa18ee0be9213d2830c9363b0f5fd3/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=98450757e5fa18ee0be9213d2830c9363b0f5fd3", "patch": "@@ -63,10 +63,22 @@ impl Buffer {\n         Buffer { for_html: false, buffer: String::new() }\n     }\n \n+    crate fn is_empty(&self) -> bool {\n+        self.buffer.is_empty()\n+    }\n+\n     crate fn into_inner(self) -> String {\n         self.buffer\n     }\n \n+    crate fn insert_str(&mut self, idx: usize, s: &str) {\n+        self.buffer.insert_str(idx, s);\n+    }\n+\n+    crate fn push_str(&mut self, s: &str) {\n+        self.buffer.push_str(s);\n+    }\n+\n     // Intended for consumption by write! and writeln! (std::fmt) but without\n     // the fmt::Result return type imposed by fmt::Write (and avoiding the trait\n     // import)."}, {"sha": "940d7e87a183bccad01892b41571ca13d7db1e8f", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 82, "deletions": 5, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/98450757e5fa18ee0be9213d2830c9363b0f5fd3/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98450757e5fa18ee0be9213d2830c9363b0f5fd3/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=98450757e5fa18ee0be9213d2830c9363b0f5fd3", "patch": "@@ -2410,7 +2410,7 @@ fn item_function(w: &mut Buffer, cx: &Context, it: &clean::Item, f: &clean::Func\n         f.generics.print()\n     )\n     .len();\n-    write!(w, \"<pre class='rust fn'>\");\n+    write!(w, \"{}<pre class='rust fn'>\", render_spotlight_traits(it));\n     render_attributes(w, it, false);\n     write!(\n         w,\n@@ -2612,7 +2612,12 @@ fn item_trait(w: &mut Buffer, cx: &Context, it: &clean::Item, t: &clean::Trait)\n         let name = m.name.as_ref().unwrap();\n         let item_type = m.type_();\n         let id = cx.derive_id(format!(\"{}.{}\", item_type, name));\n-        write!(w, \"<h3 id='{id}' class='method'><code>\", id = id);\n+        write!(\n+            w,\n+            \"<h3 id='{id}' class='method'>{extra}<code>\",\n+            extra = render_spotlight_traits(m),\n+            id = id\n+        );\n         render_assoc_item(w, m, AssocItemLink::Anchor(Some(&id)), ItemType::Impl);\n         write!(w, \"</code>\");\n         render_stability_since(w, m, t);\n@@ -3559,6 +3564,76 @@ fn should_render_item(item: &clean::Item, deref_mut_: bool) -> bool {\n     }\n }\n \n+fn render_spotlight_traits(item: &clean::Item) -> String {\n+    match item.inner {\n+        clean::FunctionItem(clean::Function { ref decl, .. })\n+        | clean::TyMethodItem(clean::TyMethod { ref decl, .. })\n+        | clean::MethodItem(clean::Method { ref decl, .. })\n+        | clean::ForeignFunctionItem(clean::Function { ref decl, .. }) => spotlight_decl(decl),\n+        _ => String::new(),\n+    }\n+}\n+\n+fn spotlight_decl(decl: &clean::FnDecl) -> String {\n+    let mut out = Buffer::html();\n+    let mut trait_ = String::new();\n+\n+    if let Some(did) = decl.output.def_id() {\n+        let c = cache();\n+        if let Some(impls) = c.impls.get(&did) {\n+            for i in impls {\n+                let impl_ = i.inner_impl();\n+                if impl_.trait_.def_id().map_or(false, |d| c.traits[&d].is_spotlight) {\n+                    if out.is_empty() {\n+                        out.push_str(&format!(\n+                            \"<h3 class=\\\"important\\\">Important traits for {}</h3>\\\n+                                      <code class=\\\"content\\\">\",\n+                            impl_.for_.print()\n+                        ));\n+                        trait_.push_str(&impl_.for_.print().to_string());\n+                    }\n+\n+                    //use the \"where\" class here to make it small\n+                    out.push_str(&format!(\n+                        \"<span class=\\\"where fmt-newline\\\">{}</span>\",\n+                        impl_.print()\n+                    ));\n+                    let t_did = impl_.trait_.def_id().unwrap();\n+                    for it in &impl_.items {\n+                        if let clean::TypedefItem(ref tydef, _) = it.inner {\n+                            out.push_str(\"<span class=\\\"where fmt-newline\\\">    \");\n+                            assoc_type(\n+                                &mut out,\n+                                it,\n+                                &[],\n+                                Some(&tydef.type_),\n+                                AssocItemLink::GotoSource(t_did, &FxHashSet::default()),\n+                                \"\",\n+                            );\n+                            out.push_str(\";</span>\");\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    if !out.is_empty() {\n+        out.insert_str(\n+            0,\n+            &format!(\n+                \"<div class=\\\"important-traits\\\"><div class='tooltip'>\u24d8\\\n+                                    <span class='tooltiptext'>Important traits for {}</span></div>\\\n+                                    <div class=\\\"content hidden\\\">\",\n+                trait_\n+            ),\n+        );\n+        out.push_str(\"</code></div></div>\");\n+    }\n+\n+    out.into_inner()\n+}\n+\n fn render_impl(\n     w: &mut Buffer,\n     cx: &Context,\n@@ -3665,12 +3740,14 @@ fn render_impl(\n                 (true, \" hidden\")\n             };\n         match item.inner {\n-            clean::MethodItem(clean::Method { .. })\n-            | clean::TyMethodItem(clean::TyMethod { .. }) => {\n+            clean::MethodItem(clean::Method { ref decl, .. })\n+            | clean::TyMethodItem(clean::TyMethod { ref decl, .. }) => {\n                 // Only render when the method is not static or we allow static methods\n                 if render_method_item {\n                     let id = cx.derive_id(format!(\"{}.{}\", item_type, name));\n-                    write!(w, \"<h4 id='{}' class=\\\"{}{}\\\"><code>\", id, item_type, extra_class);\n+                    write!(w, \"<h4 id='{}' class=\\\"{}{}\\\">\", id, item_type, extra_class);\n+                    write!(w, \"{}\", spotlight_decl(decl));\n+                    write!(w, \"<code>\");\n                     render_assoc_item(w, item, link.anchor(&id), ItemType::Impl);\n                     write!(w, \"</code>\");\n                     render_stability_since_raw(w, item.stable_since(), outer_version);"}, {"sha": "524a841e098b731a172388408dd3080a768a4415", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/98450757e5fa18ee0be9213d2830c9363b0f5fd3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/98450757e5fa18ee0be9213d2830c9363b0f5fd3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=98450757e5fa18ee0be9213d2830c9363b0f5fd3", "patch": "@@ -365,6 +365,7 @@ function defocusSearchBar() {\n     function handleEscape(ev) {\n         var help = getHelpElement();\n         var search = getSearchElement();\n+        hideModal();\n         if (hasClass(help, \"hidden\") === false) {\n             displayHelp(false, ev, help);\n         } else if (hasClass(search, \"hidden\") === false) {\n@@ -397,6 +398,7 @@ function defocusSearchBar() {\n             case \"s\":\n             case \"S\":\n                 displayHelp(false, ev);\n+                hideModal();\n                 ev.preventDefault();\n                 focusSearchBar();\n                 break;\n@@ -409,6 +411,7 @@ function defocusSearchBar() {\n \n             case \"?\":\n                 if (ev.shiftKey) {\n+                    hideModal();\n                     displayHelp(true, ev);\n                 }\n                 break;\n@@ -2636,6 +2639,31 @@ function defocusSearchBar() {\n         });\n     }());\n \n+    function showModal(content) {\n+        var modal = document.createElement(\"div\");\n+        modal.id = \"important\";\n+        addClass(modal, \"modal\");\n+        modal.innerHTML = \"<div class=\\\"modal-content\\\"><div class=\\\"close\\\" id=\\\"modal-close\\\">\u2715\" +\n+                          \"</div><div class=\\\"whiter\\\"></div><span class=\\\"docblock\\\">\" + content +\n+                          \"</span></div>\";\n+        document.getElementsByTagName(\"body\")[0].appendChild(modal);\n+        document.getElementById(\"modal-close\").onclick = hideModal;\n+        modal.onclick = hideModal;\n+    }\n+\n+    function hideModal() {\n+        var modal = document.getElementById(\"important\");\n+        if (modal) {\n+            modal.parentNode.removeChild(modal);\n+        }\n+    }\n+\n+    onEachLazy(document.getElementsByClassName(\"important-traits\"), function(e) {\n+        e.onclick = function() {\n+            showModal(e.lastElementChild.innerHTML);\n+        };\n+    });\n+\n     // In the search display, allows to switch between tabs.\n     function printTab(nb) {\n         if (nb === 0 || nb === 1 || nb === 2) {"}, {"sha": "3b2a28a0f5e4577e69a328fbeec663fb7b758299", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 93, "deletions": 3, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/98450757e5fa18ee0be9213d2830c9363b0f5fd3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/98450757e5fa18ee0be9213d2830c9363b0f5fd3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=98450757e5fa18ee0be9213d2830c9363b0f5fd3", "patch": "@@ -146,9 +146,12 @@ code, pre, a.test-arrow {\n \tborder-radius: 3px;\n \tpadding: 0 0.1em;\n }\n-.docblock pre code, .docblock-short pre code {\n+.docblock pre code, .docblock-short pre code, .docblock code.spotlight {\n \tpadding: 0;\n }\n+.docblock code.spotlight :last-child {\n+\tpadding-bottom: 0.6em;\n+}\n pre {\n \tpadding: 14px;\n }\n@@ -523,7 +526,7 @@ h4 > code, h3 > code, .invisible > code {\n \tfont-size: 0.8em;\n }\n \n-.content .methods > div {\n+.content .methods > div:not(.important-traits) {\n \tmargin-left: 40px;\n \tmargin-bottom: 15px;\n }\n@@ -1098,7 +1101,7 @@ h3 > .collapse-toggle, h4 > .collapse-toggle {\n \tfont-size: 20px;\n }\n \n-.tooltip .tooltiptext {\n+.important-traits .tooltip .tooltiptext {\n \tborder: 1px solid;\n \tfont-weight: normal;\n }\n@@ -1144,6 +1147,17 @@ pre.rust {\n \tfont-size: 16px;\n }\n \n+.important-traits {\n+\tcursor: pointer;\n+\tz-index: 2;\n+}\n+\n+h4 > .important-traits {\n+\tposition: absolute;\n+\tleft: -44px;\n+\ttop: 2px;\n+}\n+\n #all-types {\n \ttext-align: center;\n \tborder: 1px solid;\n@@ -1370,6 +1384,12 @@ pre.rust {\n \t\tz-index: 1;\n \t}\n \n+\th4 > .important-traits {\n+\t\tposition: absolute;\n+\t\tleft: -22px;\n+\t\ttop: 24px;\n+\t}\n+\n \t#titles > div > div.count {\n \t\tfloat: left;\n \t\twidth: 100%;\n@@ -1472,12 +1492,82 @@ pre.rust {\n \t}\n }\n \n+.modal {\n+\tposition: fixed;\n+\twidth: 100vw;\n+\theight: 100vh;\n+\tz-index: 10000;\n+\ttop: 0;\n+\tleft: 0;\n+}\n+\n+.modal-content {\n+\tdisplay: block;\n+\tmax-width: 60%;\n+\tmin-width: 200px;\n+\tpadding: 8px;\n+\ttop: 40%;\n+\tposition: absolute;\n+\tleft: 50%;\n+\ttransform: translate(-50%, -40%);\n+\tborder: 1px solid;\n+\tborder-radius: 4px;\n+\tborder-top-right-radius: 0;\n+}\n+\n+.modal-content > .docblock {\n+\tmargin: 0;\n+}\n+\n h3.important {\n \tmargin: 0;\n \tmargin-bottom: 13px;\n \tfont-size: 19px;\n }\n \n+.modal-content > .docblock > code.content {\n+\tmargin: 0;\n+\tpadding: 0;\n+\tfont-size: 20px;\n+}\n+\n+.modal-content > .close {\n+\tposition: absolute;\n+\tfont-weight: 900;\n+\tright: -25px;\n+\ttop: -1px;\n+\tfont-size: 18px;\n+\twidth: 25px;\n+\tpadding-right: 2px;\n+\tborder-top-right-radius: 5px;\n+\tborder-bottom-right-radius: 5px;\n+\ttext-align: center;\n+\tborder: 1px solid;\n+\tborder-right: 0;\n+\tcursor: pointer;\n+}\n+\n+.modal-content > .whiter {\n+\theight: 25px;\n+\tposition: absolute;\n+\twidth: 3px;\n+\tright: -2px;\n+\ttop: 0px;\n+}\n+\n+#main > div.important-traits {\n+\tposition: absolute;\n+\tleft: -24px;\n+\tmargin-top: 16px;\n+}\n+\n+.content > .methods > .method > div.important-traits {\n+\tposition: absolute;\n+\tfont-weight: 400;\n+\tleft: -42px;\n+\tmargin-top: 2px;\n+}\n+\n kbd {\n \tdisplay: inline-block;\n \tpadding: 3px 5px;"}, {"sha": "daa5ccf34bb18313078cafef2ec35a5f34e0319b", "filename": "src/librustdoc/html/static/themes/dark.css", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/98450757e5fa18ee0be9213d2830c9363b0f5fd3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/98450757e5fa18ee0be9213d2830c9363b0f5fd3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css?ref=98450757e5fa18ee0be9213d2830c9363b0f5fd3", "patch": "@@ -337,6 +337,12 @@ pre.ignore:hover, .information:hover + pre.ignore {\n \tborder-color: transparent black transparent transparent;\n }\n \n+.important-traits .tooltip .tooltiptext {\n+\tbackground-color: white;\n+\tcolor: black;\n+\tborder-color: black;\n+}\n+\n #titles > div:not(.selected) {\n \tbackground-color: #252525;\n \tborder-top-color: #252525;\n@@ -350,6 +356,33 @@ pre.ignore:hover, .information:hover + pre.ignore {\n \tcolor: #888;\n }\n \n+.modal {\n+\tbackground-color: rgba(0,0,0,0.3);\n+}\n+\n+.modal-content {\n+\tbackground-color: #272727;\n+\tborder-color: #999;\n+}\n+\n+.modal-content > .close {\n+\tbackground-color: #272727;\n+\tborder-color: #999;\n+}\n+\n+.modal-content > .close:hover {\n+\tbackground-color: #ff1f1f;\n+\tcolor: white;\n+}\n+\n+.modal-content > .whiter {\n+\tbackground-color: #272727;\n+}\n+\n+.modal-content > .close:hover + .whiter {\n+\tbackground-color: #ff1f1f;\n+}\n+\n @media (max-width: 700px) {\n \t.sidebar-menu {\n \t\tbackground-color: #505050;"}, {"sha": "aa7df01dc02b3358df0e46d332f45ee1f50bd783", "filename": "src/librustdoc/html/static/themes/light.css", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/98450757e5fa18ee0be9213d2830c9363b0f5fd3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/98450757e5fa18ee0be9213d2830c9363b0f5fd3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css?ref=98450757e5fa18ee0be9213d2830c9363b0f5fd3", "patch": "@@ -331,6 +331,12 @@ pre.ignore:hover, .information:hover + pre.ignore {\n \tborder-color: transparent black transparent transparent;\n }\n \n+.important-traits .tooltip .tooltiptext {\n+\tbackground-color: white;\n+\tcolor: black;\n+\tborder-color: black;\n+}\n+\n #titles > div:not(.selected) {\n \tbackground-color: #e6e6e6;\n \tborder-top-color: #e6e6e6;\n@@ -344,6 +350,33 @@ pre.ignore:hover, .information:hover + pre.ignore {\n \tcolor: #888;\n }\n \n+.modal {\n+\tbackground-color: rgba(0,0,0,0.3);\n+}\n+\n+.modal-content {\n+\tbackground-color: #eee;\n+\tborder-color: #999;\n+}\n+\n+.modal-content > .close {\n+\tbackground-color: #eee;\n+\tborder-color: #999;\n+}\n+\n+.modal-content > .close:hover {\n+\tbackground-color: #ff1f1f;\n+\tcolor: white;\n+}\n+\n+.modal-content > .whiter {\n+\tbackground-color: #eee;\n+}\n+\n+.modal-content > .close:hover + .whiter {\n+\tbackground-color: #ff1f1f;\n+}\n+\n @media (max-width: 700px) {\n \t.sidebar-menu {\n \t\tbackground-color: #F1F1F1;"}, {"sha": "ddd46c3c2155f8b74a55aa30144381499c3498d3", "filename": "src/test/rustdoc/doc-spotlight.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/98450757e5fa18ee0be9213d2830c9363b0f5fd3/src%2Ftest%2Frustdoc%2Fdoc-spotlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98450757e5fa18ee0be9213d2830c9363b0f5fd3/src%2Ftest%2Frustdoc%2Fdoc-spotlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdoc-spotlight.rs?ref=98450757e5fa18ee0be9213d2830c9363b0f5fd3", "patch": "@@ -0,0 +1,36 @@\n+#![feature(doc_spotlight)]\n+\n+pub struct Wrapper<T> {\n+    inner: T,\n+}\n+\n+impl<T: SomeTrait> SomeTrait for Wrapper<T> {}\n+\n+#[doc(spotlight)]\n+pub trait SomeTrait {\n+    // @has doc_spotlight/trait.SomeTrait.html\n+    // @has - '//code[@class=\"content\"]' 'impl<T: SomeTrait> SomeTrait for Wrapper<T>'\n+    fn wrap_me(self) -> Wrapper<Self> where Self: Sized {\n+        Wrapper {\n+            inner: self,\n+        }\n+    }\n+}\n+\n+pub struct SomeStruct;\n+impl SomeTrait for SomeStruct {}\n+\n+impl SomeStruct {\n+    // @has doc_spotlight/struct.SomeStruct.html\n+    // @has - '//code[@class=\"content\"]' 'impl SomeTrait for SomeStruct'\n+    // @has - '//code[@class=\"content\"]' 'impl<T: SomeTrait> SomeTrait for Wrapper<T>'\n+    pub fn new() -> SomeStruct {\n+        SomeStruct\n+    }\n+}\n+\n+// @has doc_spotlight/fn.bare_fn.html\n+// @has - '//code[@class=\"content\"]' 'impl SomeTrait for SomeStruct'\n+pub fn bare_fn() -> SomeStruct {\n+    SomeStruct\n+}"}, {"sha": "452b45b34456bbb37771e3bbe31eefc1602cfa39", "filename": "src/test/ui/feature-gates/feature-gate-doc_spotlight.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98450757e5fa18ee0be9213d2830c9363b0f5fd3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_spotlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98450757e5fa18ee0be9213d2830c9363b0f5fd3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_spotlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_spotlight.rs?ref=98450757e5fa18ee0be9213d2830c9363b0f5fd3", "patch": "@@ -0,0 +1,4 @@\n+#[doc(spotlight)] //~ ERROR: `#[doc(spotlight)]` is experimental\n+trait SomeTrait {}\n+\n+fn main() {}"}, {"sha": "010d74054a4120fa3b687afc2e8e9f21a0405164", "filename": "src/test/ui/feature-gates/feature-gate-doc_spotlight.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/98450757e5fa18ee0be9213d2830c9363b0f5fd3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_spotlight.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98450757e5fa18ee0be9213d2830c9363b0f5fd3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_spotlight.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_spotlight.stderr?ref=98450757e5fa18ee0be9213d2830c9363b0f5fd3", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: `#[doc(spotlight)]` is experimental\n+  --> $DIR/feature-gate-doc_spotlight.rs:1:1\n+   |\n+LL | #[doc(spotlight)]\n+   | ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #45040 <https://github.com/rust-lang/rust/issues/45040> for more information\n+   = help: add `#![feature(doc_spotlight)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}]}