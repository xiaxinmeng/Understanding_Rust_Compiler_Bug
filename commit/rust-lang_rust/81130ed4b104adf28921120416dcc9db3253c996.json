{"sha": "81130ed4b104adf28921120416dcc9db3253c996", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxMTMwZWQ0YjEwNGFkZjI4OTIxMTIwNDE2ZGNjOWRiMzI1M2M5OTY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-03-10T10:22:55Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-03-10T10:25:12Z"}, "message": "Split param-bounds-ignored into two, it was testing two independent things\n\nAlso, tweak the test for ignored type aliases such that replacing the type alias\nby a newtype struct leads to a well-formed type definition, and errors when used\nthe way the type alias is used.", "tree": {"sha": "789c6dca6e7022ed27260ddee5fceb297c7eb366", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/789c6dca6e7022ed27260ddee5fceb297c7eb366"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81130ed4b104adf28921120416dcc9db3253c996", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81130ed4b104adf28921120416dcc9db3253c996", "html_url": "https://github.com/rust-lang/rust/commit/81130ed4b104adf28921120416dcc9db3253c996", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81130ed4b104adf28921120416dcc9db3253c996/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3edb3cc26c4030e62f26fd5f0d9d53fb7b78d618", "url": "https://api.github.com/repos/rust-lang/rust/commits/3edb3cc26c4030e62f26fd5f0d9d53fb7b78d618", "html_url": "https://github.com/rust-lang/rust/commit/3edb3cc26c4030e62f26fd5f0d9d53fb7b78d618"}], "stats": {"total": 157, "additions": 95, "deletions": 62}, "files": [{"sha": "70b3b34fbd8fc2574038506cafb9e98d1cec99b7", "filename": "src/test/ui/higher-lifetime-bounds.rs", "status": "renamed", "additions": 1, "deletions": 25, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/81130ed4b104adf28921120416dcc9db3253c996/src%2Ftest%2Fui%2Fhigher-lifetime-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81130ed4b104adf28921120416dcc9db3253c996/src%2Ftest%2Fui%2Fhigher-lifetime-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-lifetime-bounds.rs?ref=81130ed4b104adf28921120416dcc9db3253c996", "patch": "@@ -10,31 +10,7 @@\n \n #![allow(dead_code, non_camel_case_types)]\n \n-use std::rc::Rc;\n-\n-type SVec<T: Send+Send> = Vec<T>;\n-//~^ WARN bounds on generic parameters are ignored in type aliases\n-type VVec<'b, 'a: 'b+'b> = Vec<&'a i32>;\n-//~^ WARN bounds on generic parameters are ignored in type aliases\n-type WVec<'b, T: 'b+'b> = Vec<T>;\n-//~^ WARN bounds on generic parameters are ignored in type aliases\n-type W2Vec<'b, T> where T: 'b, T: 'b = Vec<T>;\n-//~^ WARN where clauses are ignored in type aliases\n-\n-fn foo<'a>(y: &'a i32) {\n-    // If the bounds above would matter, the code below would be rejected.\n-    let mut x : SVec<_> = Vec::new();\n-    x.push(Rc::new(42));\n-\n-    let mut x : VVec<'static, 'a> = Vec::new();\n-    x.push(y);\n-\n-    let mut x : WVec<'static, & 'a i32> = Vec::new();\n-    x.push(y);\n-\n-    let mut x : W2Vec<'static, & 'a i32> = Vec::new();\n-    x.push(y);\n-}\n+// Test that bounds on higher-kinded lifetime binders are rejected.\n \n fn bar1<'a, 'b>(\n     x: &'a i32,", "previous_filename": "src/test/ui/param-bounds-ignored.rs"}, {"sha": "82c007474360413138920f748fbc0fe83e4d9175", "filename": "src/test/ui/higher-lifetime-bounds.stderr", "status": "renamed", "additions": 11, "deletions": 37, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/81130ed4b104adf28921120416dcc9db3253c996/src%2Ftest%2Fui%2Fhigher-lifetime-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81130ed4b104adf28921120416dcc9db3253c996/src%2Ftest%2Fui%2Fhigher-lifetime-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-lifetime-bounds.stderr?ref=81130ed4b104adf28921120416dcc9db3253c996", "patch": "@@ -1,94 +1,68 @@\n error: lifetime bounds cannot be used in this context\n-  --> $DIR/param-bounds-ignored.rs:42:22\n+  --> $DIR/higher-lifetime-bounds.rs:18:22\n    |\n LL |     f: for<'xa, 'xb: 'xa+'xa> fn(&'xa i32, &'xb i32) -> &'xa i32)\n    |                      ^^^ ^^^\n \n error: lifetime bounds cannot be used in this context\n-  --> $DIR/param-bounds-ignored.rs:50:34\n+  --> $DIR/higher-lifetime-bounds.rs:26:34\n    |\n LL | fn bar2<'a, 'b, F: for<'xa, 'xb: 'xa> Fn(&'xa i32, &'xb i32) -> &'xa i32>(\n    |                                  ^^^\n \n error: lifetime bounds cannot be used in this context\n-  --> $DIR/param-bounds-ignored.rs:65:28\n+  --> $DIR/higher-lifetime-bounds.rs:41:28\n    |\n LL |     where F: for<'xa, 'xb: 'xa> Fn(&'xa i32, &'xb i32) -> &'xa i32\n    |                            ^^^\n \n error: lifetime bounds cannot be used in this context\n-  --> $DIR/param-bounds-ignored.rs:77:25\n+  --> $DIR/higher-lifetime-bounds.rs:53:25\n    |\n LL |     where for<'xa, 'xb: 'xa> F: Fn(&'xa i32, &'xb i32) -> &'xa i32\n    |                         ^^^\n \n error: lifetime bounds cannot be used in this context\n-  --> $DIR/param-bounds-ignored.rs:85:28\n+  --> $DIR/higher-lifetime-bounds.rs:61:28\n    |\n LL | struct S1<F: for<'xa, 'xb: 'xa> Fn(&'xa i32, &'xb i32) -> &'xa i32>(F);\n    |                            ^^^\n \n error: lifetime bounds cannot be used in this context\n-  --> $DIR/param-bounds-ignored.rs:87:40\n+  --> $DIR/higher-lifetime-bounds.rs:63:40\n    |\n LL | struct S2<F>(F) where F: for<'xa, 'xb: 'xa> Fn(&'xa i32, &'xb i32) -> &'xa i32;\n    |                                        ^^^\n \n error: lifetime bounds cannot be used in this context\n-  --> $DIR/param-bounds-ignored.rs:89:37\n+  --> $DIR/higher-lifetime-bounds.rs:65:37\n    |\n LL | struct S3<F>(F) where for<'xa, 'xb: 'xa> F: Fn(&'xa i32, &'xb i32) -> &'xa i32;\n    |                                     ^^^\n \n error: lifetime bounds cannot be used in this context\n-  --> $DIR/param-bounds-ignored.rs:92:29\n+  --> $DIR/higher-lifetime-bounds.rs:68:29\n    |\n LL | struct S_fnty(for<'xa, 'xb: 'xa> fn(&'xa i32, &'xb i32) -> &'xa i32);\n    |                             ^^^\n \n error: lifetime bounds cannot be used in this context\n-  --> $DIR/param-bounds-ignored.rs:95:29\n+  --> $DIR/higher-lifetime-bounds.rs:71:29\n    |\n LL | type T1 = Box<for<'xa, 'xb: 'xa> Fn(&'xa i32, &'xb i32) -> &'xa i32>;\n    |                             ^^^\n \n error: lifetime bounds cannot be used in this context\n-  --> $DIR/param-bounds-ignored.rs:99:34\n+  --> $DIR/higher-lifetime-bounds.rs:75:34\n    |\n LL |     let _ : Option<for<'xa, 'xb: 'xa> fn(&'xa i32, &'xb i32) -> &'xa i32> = None;\n    |                                  ^^^\n \n error: lifetime bounds cannot be used in this context\n-  --> $DIR/param-bounds-ignored.rs:101:38\n+  --> $DIR/higher-lifetime-bounds.rs:77:38\n    |\n LL |     let _ : Option<Box<for<'xa, 'xb: 'xa> Fn(&'xa i32, &'xb i32) -> &'xa i32>> = None;\n    |                                      ^^^\n \n-warning: bounds on generic parameters are ignored in type aliases\n-  --> $DIR/param-bounds-ignored.rs:15:14\n-   |\n-LL | type SVec<T: Send+Send> = Vec<T>;\n-   |              ^^^^ ^^^^\n-   |\n-   = note: #[warn(ignored_generic_bounds)] on by default\n-\n-warning: bounds on generic parameters are ignored in type aliases\n-  --> $DIR/param-bounds-ignored.rs:17:19\n-   |\n-LL | type VVec<'b, 'a: 'b+'b> = Vec<&'a i32>;\n-   |                   ^^ ^^\n-\n-warning: bounds on generic parameters are ignored in type aliases\n-  --> $DIR/param-bounds-ignored.rs:19:18\n-   |\n-LL | type WVec<'b, T: 'b+'b> = Vec<T>;\n-   |                  ^^ ^^\n-\n-warning: where clauses are ignored in type aliases\n-  --> $DIR/param-bounds-ignored.rs:21:25\n-   |\n-LL | type W2Vec<'b, T> where T: 'b, T: 'b = Vec<T>;\n-   |                         ^^^^^  ^^^^^\n-\n error: aborting due to 11 previous errors\n ", "previous_filename": "src/test/ui/param-bounds-ignored.stderr"}, {"sha": "ed368e8f1500eec5deeb0771baf1f2238e787f7e", "filename": "src/test/ui/type-alias-bounds.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/81130ed4b104adf28921120416dcc9db3253c996/src%2Ftest%2Fui%2Ftype-alias-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81130ed4b104adf28921120416dcc9db3253c996/src%2Ftest%2Fui%2Ftype-alias-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-bounds.rs?ref=81130ed4b104adf28921120416dcc9db3253c996", "patch": "@@ -0,0 +1,51 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test ignored_generic_bounds lint warning about bounds in type aliases\n+\n+// must-compile-successfully\n+#![allow(dead_code)]\n+\n+use std::rc::Rc;\n+\n+type SVec<T: Send+Send> = Vec<T>;\n+//~^ WARN bounds on generic parameters are ignored in type aliases\n+type S2Vec<T> where T: Send = Vec<T>;\n+//~^ WARN where clauses are ignored in type aliases\n+type VVec<'b, 'a: 'b+'b> = (&'b u32, Vec<&'a i32>);\n+//~^ WARN bounds on generic parameters are ignored in type aliases\n+type WVec<'b, T: 'b+'b> = (&'b u32, Vec<T>);\n+//~^ WARN bounds on generic parameters are ignored in type aliases\n+type W2Vec<'b, T> where T: 'b, T: 'b = (&'b u32, Vec<T>);\n+//~^ WARN where clauses are ignored in type aliases\n+\n+static STATIC : u32 = 0;\n+\n+fn foo<'a>(y: &'a i32) {\n+    // If any of the bounds above would matter, the code below would be rejected.\n+    // This can be seen when replacing the type aliases above by newtype structs.\n+    // (The type aliases have no unused parameters to make that a valid transformation.)\n+    let mut x : SVec<_> = Vec::new();\n+    x.push(Rc::new(42)); // is not send\n+\n+    let mut x : S2Vec<_> = Vec::new();\n+    x.push(Rc::new(42)); // is not send\n+\n+    let mut x : VVec<'static, 'a> = (&STATIC, Vec::new());\n+    x.1.push(y); // 'a: 'static does not hold\n+\n+    let mut x : WVec<'static, &'a i32> = (&STATIC, Vec::new());\n+    x.1.push(y); // &'a i32: 'static does not hold\n+\n+    let mut x : W2Vec<'static, &'a i32> = (&STATIC, Vec::new());\n+    x.1.push(y); // &'a i32: 'static does not hold\n+}\n+\n+fn main() {}"}, {"sha": "5237f3c19efcda53acc855246e9aa0f4520b41e8", "filename": "src/test/ui/type-alias-bounds.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/81130ed4b104adf28921120416dcc9db3253c996/src%2Ftest%2Fui%2Ftype-alias-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81130ed4b104adf28921120416dcc9db3253c996/src%2Ftest%2Fui%2Ftype-alias-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-bounds.stderr?ref=81130ed4b104adf28921120416dcc9db3253c996", "patch": "@@ -0,0 +1,32 @@\n+warning: bounds on generic parameters are ignored in type aliases\n+  --> $DIR/type-alias-bounds.rs:18:14\n+   |\n+LL | type SVec<T: Send+Send> = Vec<T>;\n+   |              ^^^^ ^^^^\n+   |\n+   = note: #[warn(ignored_generic_bounds)] on by default\n+\n+warning: where clauses are ignored in type aliases\n+  --> $DIR/type-alias-bounds.rs:20:21\n+   |\n+LL | type S2Vec<T> where T: Send = Vec<T>;\n+   |                     ^^^^^^^\n+\n+warning: bounds on generic parameters are ignored in type aliases\n+  --> $DIR/type-alias-bounds.rs:22:19\n+   |\n+LL | type VVec<'b, 'a: 'b+'b> = (&'b u32, Vec<&'a i32>);\n+   |                   ^^ ^^\n+\n+warning: bounds on generic parameters are ignored in type aliases\n+  --> $DIR/type-alias-bounds.rs:24:18\n+   |\n+LL | type WVec<'b, T: 'b+'b> = (&'b u32, Vec<T>);\n+   |                  ^^ ^^\n+\n+warning: where clauses are ignored in type aliases\n+  --> $DIR/type-alias-bounds.rs:26:25\n+   |\n+LL | type W2Vec<'b, T> where T: 'b, T: 'b = (&'b u32, Vec<T>);\n+   |                         ^^^^^  ^^^^^\n+"}]}