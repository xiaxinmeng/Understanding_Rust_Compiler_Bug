{"sha": "a7254201df07fb929ca689857d7472564d484c3e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3MjU0MjAxZGYwN2ZiOTI5Y2E2ODk4NTdkNzQ3MjU2NGQ0ODRjM2U=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-04-07T16:12:07Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-04-07T16:12:07Z"}, "message": "Combine all tokensource to one and refactoring", "tree": {"sha": "bb32649bf733ed892971ff5ada4fabbe58acc77c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb32649bf733ed892971ff5ada4fabbe58acc77c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7254201df07fb929ca689857d7472564d484c3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7254201df07fb929ca689857d7472564d484c3e", "html_url": "https://github.com/rust-lang/rust/commit/a7254201df07fb929ca689857d7472564d484c3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7254201df07fb929ca689857d7472564d484c3e/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f1e93a3c934342a9b9c418865ff395b8ad245ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f1e93a3c934342a9b9c418865ff395b8ad245ce", "html_url": "https://github.com/rust-lang/rust/commit/7f1e93a3c934342a9b9c418865ff395b8ad245ce"}], "stats": {"total": 180, "additions": 94, "deletions": 86}, "files": [{"sha": "84ce2b783d112918716e9c472f68f1aef8ed62a1", "filename": "crates/ra_mbe/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a7254201df07fb929ca689857d7472564d484c3e/crates%2Fra_mbe%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7254201df07fb929ca689857d7472564d484c3e/crates%2Fra_mbe%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Flib.rs?ref=a7254201df07fb929ca689857d7472564d484c3e", "patch": "@@ -21,6 +21,7 @@ mod mbe_expander;\n mod syntax_bridge;\n mod tt_cursor;\n mod subtree_source;\n+mod subtree_parser;\n \n use ra_syntax::SmolStr;\n "}, {"sha": "48eee6fa7d389ccfc0f20cde11dafcc3628db48f", "filename": "crates/ra_mbe/src/subtree_parser.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/a7254201df07fb929ca689857d7472564d484c3e/crates%2Fra_mbe%2Fsrc%2Fsubtree_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7254201df07fb929ca689857d7472564d484c3e/crates%2Fra_mbe%2Fsrc%2Fsubtree_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsubtree_parser.rs?ref=a7254201df07fb929ca689857d7472564d484c3e", "patch": "@@ -0,0 +1,59 @@\n+use crate::subtree_source::SubtreeTokenSource;\n+\n+use ra_parser::{TokenSource, TreeSink};\n+use ra_syntax::{SyntaxKind};\n+\n+struct OffsetTokenSink {\n+    token_pos: usize,\n+}\n+\n+impl TreeSink for OffsetTokenSink {\n+    fn token(&mut self, _kind: SyntaxKind, n_tokens: u8) {\n+        self.token_pos += n_tokens as usize;\n+    }\n+    fn start_node(&mut self, _kind: SyntaxKind) {}\n+    fn finish_node(&mut self) {}\n+    fn error(&mut self, _error: ra_parser::ParseError) {}\n+}\n+\n+pub(crate) struct Parser<'a> {\n+    subtree: &'a tt::Subtree,\n+    pos: &'a mut usize,\n+}\n+\n+impl<'a> Parser<'a> {\n+    pub fn new(pos: &'a mut usize, subtree: &'a tt::Subtree) -> Parser<'a> {\n+        Parser { pos, subtree }\n+    }\n+\n+    pub fn parse_path(self) -> Option<tt::TokenTree> {\n+        self.parse(ra_parser::parse_path)\n+    }\n+\n+    fn parse<F>(self, f: F) -> Option<tt::TokenTree>\n+    where\n+        F: FnOnce(&dyn TokenSource, &mut dyn TreeSink),\n+    {\n+        let mut src = SubtreeTokenSource::new(self.subtree);\n+        src.advance(*self.pos, true);\n+        let mut sink = OffsetTokenSink { token_pos: 0 };\n+\n+        f(&src, &mut sink);\n+\n+        self.finish(sink.token_pos, &mut src)\n+    }\n+\n+    fn finish(self, parsed_token: usize, src: &mut SubtreeTokenSource) -> Option<tt::TokenTree> {\n+        let res = src.bump_n(parsed_token, self.pos);\n+        let res: Vec<_> = res.into_iter().cloned().collect();\n+\n+        match res.len() {\n+            0 => None,\n+            1 => Some(res[0].clone()),\n+            _ => Some(tt::TokenTree::Subtree(tt::Subtree {\n+                delimiter: tt::Delimiter::None,\n+                token_trees: res,\n+            })),\n+        }\n+    }\n+}"}, {"sha": "d9ba5d3d0f9d7cab3160d406875f200ad2d6a5c0", "filename": "crates/ra_mbe/src/subtree_source.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/a7254201df07fb929ca689857d7472564d484c3e/crates%2Fra_mbe%2Fsrc%2Fsubtree_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7254201df07fb929ca689857d7472564d484c3e/crates%2Fra_mbe%2Fsrc%2Fsubtree_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsubtree_source.rs?ref=a7254201df07fb929ca689857d7472564d484c3e", "patch": "@@ -9,12 +9,12 @@ struct TtToken {\n     pub n_tokens: usize,\n }\n \n-/// SubtreeSourceQuerier let outside to query internal tokens as string\n-pub(crate) struct SubtreeSourceQuerier<'a> {\n+/// Querier let outside to query internal tokens as string\n+pub(crate) struct Querier<'a> {\n     src: &'a SubtreeTokenSource<'a>,\n }\n \n-impl<'a> SubtreeSourceQuerier<'a> {\n+impl<'a> Querier<'a> {\n     pub(crate) fn token(&self, uidx: usize) -> (SyntaxKind, &SmolStr) {\n         let tkn = &self.src.tokens[uidx];\n         (tkn.kind, &tkn.text)\n@@ -32,7 +32,8 @@ impl<'a> SubtreeTokenSource<'a> {\n         SubtreeTokenSource { tokens: TtTokenBuilder::build(subtree), tt_pos: 0, subtree }\n     }\n \n-    pub fn advance(&mut self, curr: usize, skip_first_delimiter: bool) {\n+    // Advance token source and skip the first delimiter\n+    pub fn advance(&mut self, n_token: usize, skip_first_delimiter: bool) {\n         if skip_first_delimiter {\n             self.tt_pos += 1;\n         }\n@@ -47,32 +48,20 @@ impl<'a> SubtreeTokenSource<'a> {\n         // Such that we cannot simpliy advance the cursor\n         // We have to bump it one by one\n         let mut pos = 0;\n-        while pos < curr {\n+        while pos < n_token {\n             pos += self.bump(&self.subtree.token_trees[pos]);\n         }\n     }\n \n-    pub fn querier(&self) -> SubtreeSourceQuerier {\n-        SubtreeSourceQuerier { src: self }\n-    }\n-\n-    fn count(&self, tt: &tt::TokenTree) -> usize {\n-        assert!(!self.tokens.is_empty());\n-        TtTokenBuilder::count_tt_tokens(tt, None)\n-    }\n-\n-    pub(crate) fn bump(&mut self, tt: &tt::TokenTree) -> usize {\n-        let cur = &self.tokens[self.tt_pos];\n-        let n_tokens = cur.n_tokens;\n-        self.tt_pos += self.count(tt);\n-        n_tokens\n+    pub fn querier(&self) -> Querier {\n+        Querier { src: self }\n     }\n \n     pub(crate) fn bump_n(\n         &mut self,\n-        n_tokens: usize,\n-        mut token_pos: usize,\n-    ) -> (usize, Vec<&tt::TokenTree>) {\n+        n_tt_tokens: usize,\n+        token_pos: &mut usize,\n+    ) -> Vec<&tt::TokenTree> {\n         let mut res = vec![];\n         // Matching `TtToken` cursor to `tt::TokenTree` cursor\n         // It is because TtToken is not One to One mapping to tt::Token\n@@ -83,17 +72,28 @@ impl<'a> SubtreeTokenSource<'a> {\n         //\n         // Such that we cannot simpliy advance the cursor\n         // We have to bump it one by one\n-        let next_pos = self.tt_pos + n_tokens;\n-        let old_token_pos = token_pos;\n+        let next_pos = self.tt_pos + n_tt_tokens;\n \n         while self.tt_pos < next_pos {\n-            let current = &self.subtree.token_trees[token_pos];\n+            let current = &self.subtree.token_trees[*token_pos];\n             let n = self.bump(current);\n-            res.extend((0..n).map(|i| &self.subtree.token_trees[token_pos + i]));\n-            token_pos += n;\n+            res.extend((0..n).map(|i| &self.subtree.token_trees[*token_pos + i]));\n+            *token_pos += n;\n         }\n \n-        (token_pos - old_token_pos, res)\n+        res\n+    }\n+\n+    fn count(&self, tt: &tt::TokenTree) -> usize {\n+        assert!(!self.tokens.is_empty());\n+        TtTokenBuilder::count_tt_tokens(tt, None)\n+    }\n+\n+    fn bump(&mut self, tt: &tt::TokenTree) -> usize {\n+        let cur = &self.tokens[self.tt_pos];\n+        let n_tokens = cur.n_tokens;\n+        self.tt_pos += self.count(tt);\n+        n_tokens\n     }\n }\n "}, {"sha": "b0fb91a63e63d030da82809458b4761cb3abb8d5", "filename": "crates/ra_mbe/src/syntax_bridge.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a7254201df07fb929ca689857d7472564d484c3e/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7254201df07fb929ca689857d7472564d484c3e/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs?ref=a7254201df07fb929ca689857d7472564d484c3e", "patch": "@@ -4,7 +4,7 @@ use ra_syntax::{\n     ast, SyntaxKind::*, TextUnit\n };\n \n-use crate::subtree_source::{SubtreeTokenSource, SubtreeSourceQuerier};\n+use crate::subtree_source::{SubtreeTokenSource, Querier};\n \n /// Maps `tt::TokenId` to the relative range of the original token.\n #[derive(Default)]\n@@ -107,14 +107,14 @@ fn convert_tt(\n \n struct TtTreeSink<'a> {\n     buf: String,\n-    src_querier: SubtreeSourceQuerier<'a>,\n+    src_querier: Querier<'a>,\n     text_pos: TextUnit,\n     token_pos: usize,\n     inner: SyntaxTreeBuilder,\n }\n \n impl<'a> TtTreeSink<'a> {\n-    fn new(src_querier: SubtreeSourceQuerier<'a>) -> TtTreeSink {\n+    fn new(src_querier: Querier<'a>) -> TtTreeSink {\n         TtTreeSink {\n             buf: String::new(),\n             src_querier,"}, {"sha": "d29faa77ce8dbc26cf9f47f0775c8a32389c87e5", "filename": "crates/ra_mbe/src/tt_cursor.rs", "status": "modified", "additions": 3, "deletions": 55, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/a7254201df07fb929ca689857d7472564d484c3e/crates%2Fra_mbe%2Fsrc%2Ftt_cursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7254201df07fb929ca689857d7472564d484c3e/crates%2Fra_mbe%2Fsrc%2Ftt_cursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Ftt_cursor.rs?ref=a7254201df07fb929ca689857d7472564d484c3e", "patch": "@@ -1,25 +1,5 @@\n use crate::ParseError;\n-use crate::subtree_source::SubtreeTokenSource;\n-\n-use ra_parser::{TokenSource, TreeSink};\n-\n-use ra_syntax::{\n-    SyntaxKind\n-};\n-\n-struct SubtreeTokenSink {\n-    token_pos: usize,\n-}\n-\n-impl TreeSink for SubtreeTokenSink {\n-    fn token(&mut self, _kind: SyntaxKind, n_tokens: u8) {\n-        self.token_pos += n_tokens as usize;\n-    }\n-\n-    fn start_node(&mut self, _kind: SyntaxKind) {}\n-    fn finish_node(&mut self) {}\n-    fn error(&mut self, _error: ra_parser::ParseError) {}\n-}\n+use crate::subtree_parser::Parser;\n \n #[derive(Clone)]\n pub(crate) struct TtCursor<'a> {\n@@ -99,41 +79,9 @@ impl<'a> TtCursor<'a> {\n         })\n     }\n \n-    fn eat_parse_result(\n-        &mut self,\n-        parsed_token: usize,\n-        src: &mut SubtreeTokenSource,\n-    ) -> Option<tt::TokenTree> {\n-        let (adv, res) = src.bump_n(parsed_token, self.pos);\n-        self.pos += adv;\n-\n-        let res: Vec<_> = res.into_iter().cloned().collect();\n-\n-        match res.len() {\n-            0 => None,\n-            1 => Some(res[0].clone()),\n-            _ => Some(tt::TokenTree::Subtree(tt::Subtree {\n-                delimiter: tt::Delimiter::None,\n-                token_trees: res,\n-            })),\n-        }\n-    }\n-\n-    fn eat_parse<F>(&mut self, f: F) -> Option<tt::TokenTree>\n-    where\n-        F: FnOnce(&dyn TokenSource, &mut dyn TreeSink),\n-    {\n-        let mut src = SubtreeTokenSource::new(self.subtree);\n-        src.advance(self.pos, true);\n-        let mut sink = SubtreeTokenSink { token_pos: 0 };\n-\n-        f(&src, &mut sink);\n-\n-        self.eat_parse_result(sink.token_pos, &mut src)\n-    }\n-\n     pub(crate) fn eat_path(&mut self) -> Option<tt::TokenTree> {\n-        self.eat_parse(ra_parser::parse_path)\n+        let parser = Parser::new(&mut self.pos, self.subtree);\n+        parser.parse_path()\n     }\n \n     pub(crate) fn expect_char(&mut self, char: char) -> Result<(), ParseError> {"}]}