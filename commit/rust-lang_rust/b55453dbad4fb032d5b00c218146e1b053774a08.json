{"sha": "b55453dbad4fb032d5b00c218146e1b053774a08", "node_id": "C_kwDOAAsO6NoAKGI1NTQ1M2RiYWQ0ZmIwMzJkNWIwMGMyMTgxNDZlMWIwNTM3NzRhMDg", "commit": {"author": {"name": "Jane Lusby", "email": "jlusby@yaah.dev", "date": "2022-05-09T22:18:53Z"}, "committer": {"name": "Jane Losare-Lusby", "email": "jlusby@yaah.dev", "date": "2022-07-08T21:18:15Z"}, "message": "add opt in attribute for stable-in-unstable items", "tree": {"sha": "3d5247d5b23f336378e5741e2d80ed90e953ba36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d5247d5b23f336378e5741e2d80ed90e953ba36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b55453dbad4fb032d5b00c218146e1b053774a08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b55453dbad4fb032d5b00c218146e1b053774a08", "html_url": "https://github.com/rust-lang/rust/commit/b55453dbad4fb032d5b00c218146e1b053774a08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b55453dbad4fb032d5b00c218146e1b053774a08/comments", "author": {"login": "yaahc", "id": 1993852, "node_id": "MDQ6VXNlcjE5OTM4NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1993852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaahc", "html_url": "https://github.com/yaahc", "followers_url": "https://api.github.com/users/yaahc/followers", "following_url": "https://api.github.com/users/yaahc/following{/other_user}", "gists_url": "https://api.github.com/users/yaahc/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaahc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaahc/subscriptions", "organizations_url": "https://api.github.com/users/yaahc/orgs", "repos_url": "https://api.github.com/users/yaahc/repos", "events_url": "https://api.github.com/users/yaahc/events{/privacy}", "received_events_url": "https://api.github.com/users/yaahc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yaahc", "id": 1993852, "node_id": "MDQ6VXNlcjE5OTM4NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1993852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaahc", "html_url": "https://github.com/yaahc", "followers_url": "https://api.github.com/users/yaahc/followers", "following_url": "https://api.github.com/users/yaahc/following{/other_user}", "gists_url": "https://api.github.com/users/yaahc/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaahc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaahc/subscriptions", "organizations_url": "https://api.github.com/users/yaahc/orgs", "repos_url": "https://api.github.com/users/yaahc/repos", "events_url": "https://api.github.com/users/yaahc/events{/privacy}", "received_events_url": "https://api.github.com/users/yaahc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a13f30036aed7151f77a04d227501bfb822c8cb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a13f30036aed7151f77a04d227501bfb822c8cb5", "html_url": "https://github.com/rust-lang/rust/commit/a13f30036aed7151f77a04d227501bfb822c8cb5"}], "stats": {"total": 125, "additions": 119, "deletions": 6}, "files": [{"sha": "46643df84ccdd303a57dfdddf5195c5dfb029ba5", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b55453dbad4fb032d5b00c218146e1b053774a08/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b55453dbad4fb032d5b00c218146e1b053774a08/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=b55453dbad4fb032d5b00c218146e1b053774a08", "patch": "@@ -137,7 +137,7 @@ impl ConstStability {\n pub enum StabilityLevel {\n     // Reason for the current stability level and the relevant rust-lang issue\n     Unstable { reason: Option<Symbol>, issue: Option<NonZeroU32>, is_soft: bool },\n-    Stable { since: Symbol },\n+    Stable { since: Symbol, allowed_through_unstable_modules: bool },\n }\n \n impl StabilityLevel {\n@@ -172,6 +172,7 @@ where\n     let mut stab: Option<(Stability, Span)> = None;\n     let mut const_stab: Option<(ConstStability, Span)> = None;\n     let mut promotable = false;\n+    let mut allowed_through_unstable_modules = false;\n \n     let diagnostic = &sess.parse_sess.span_diagnostic;\n \n@@ -182,6 +183,7 @@ where\n             sym::unstable,\n             sym::stable,\n             sym::rustc_promotable,\n+            sym::rustc_allowed_through_unstable_modules,\n         ]\n         .iter()\n         .any(|&s| attr.has_name(s))\n@@ -193,6 +195,8 @@ where\n \n         if attr.has_name(sym::rustc_promotable) {\n             promotable = true;\n+        } else if attr.has_name(sym::rustc_allowed_through_unstable_modules) {\n+            allowed_through_unstable_modules = true;\n         }\n         // attributes with data\n         else if let Some(MetaItem { kind: MetaItemKind::List(ref metas), .. }) = meta {\n@@ -406,7 +410,7 @@ where\n \n                     match (feature, since) {\n                         (Some(feature), Some(since)) => {\n-                            let level = Stable { since };\n+                            let level = Stable { since, allowed_through_unstable_modules: false };\n                             if sym::stable == meta_name {\n                                 stab = Some((Stability { level, feature }, attr.span));\n                             } else {\n@@ -447,6 +451,27 @@ where\n         }\n     }\n \n+    if allowed_through_unstable_modules {\n+        if let Some((\n+            Stability {\n+                level: StabilityLevel::Stable { ref mut allowed_through_unstable_modules, .. },\n+                ..\n+            },\n+            _,\n+        )) = stab\n+        {\n+            *allowed_through_unstable_modules = true;\n+        } else {\n+            struct_span_err!(\n+                diagnostic,\n+                item_sp,\n+                E0788,\n+                \"`rustc_allowed_through_unstable_modules` attribute must be paired with a `stable` attribute\"\n+            )\n+            .emit();\n+        }\n+    }\n+\n     (stab, const_stab)\n }\n "}, {"sha": "56f29dcc5ce9fcaf08c35e5a53187be4948a142a", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b55453dbad4fb032d5b00c218146e1b053774a08/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b55453dbad4fb032d5b00c218146e1b053774a08/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=b55453dbad4fb032d5b00c218146e1b053774a08", "patch": "@@ -644,4 +644,5 @@ E0788: include_str!(\"./error_codes/E0788.md\"),\n //  E0721, // `await` keyword\n //  E0723, // unstable feature in `const` context\n //  E0738, // Removed; errored on `#[track_caller] fn`s in `extern \"Rust\" { ... }`.\n+    E0788, // rustc_allowed_through_unstable_modules without stability attribute\n }"}, {"sha": "c806df8214586859883b28b34d6a97227d01153a", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b55453dbad4fb032d5b00c218146e1b053774a08/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b55453dbad4fb032d5b00c218146e1b053774a08/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=b55453dbad4fb032d5b00c218146e1b053774a08", "patch": "@@ -512,6 +512,9 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         allow_internal_unsafe, Normal, template!(Word), WarnFollowing,\n         \"allow_internal_unsafe side-steps the unsafe_code lint\",\n     ),\n+    rustc_attr!(rustc_allowed_through_unstable_modules, Normal, template!(Word), WarnFollowing,\n+    \"rustc_allowed_through_unstable_modules special cases accidental stabilizations of stable items \\\n+    through unstable paths\"),\n \n     // ==========================================================================\n     // Internal attributes: Type system related:"}, {"sha": "7bfa4d37e8c408715f61bef47ec3132152e0fe4e", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b55453dbad4fb032d5b00c218146e1b053774a08/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b55453dbad4fb032d5b00c218146e1b053774a08/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=b55453dbad4fb032d5b00c218146e1b053774a08", "patch": "@@ -139,6 +139,7 @@ impl CheckAttrVisitor<'_> {\n                 | sym::rustc_const_stable\n                 | sym::unstable\n                 | sym::stable\n+                | sym::rustc_allowed_through_unstable_modules\n                 | sym::rustc_promotable => self.check_stability_promotable(&attr, span, target),\n                 _ => true,\n             };"}, {"sha": "cf23e0ae5ef23edfde4d53d8fbddfe5014e77382", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b55453dbad4fb032d5b00c218146e1b053774a08/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b55453dbad4fb032d5b00c218146e1b053774a08/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=b55453dbad4fb032d5b00c218146e1b053774a08", "patch": "@@ -1,6 +1,7 @@\n //! A pass that annotates every item and method with its stability level,\n //! propagating default levels lexically from parent to children ast nodes.\n \n+use attr::StabilityLevel;\n use rustc_attr::{self as attr, ConstStability, Stability};\n use rustc_data_structures::fx::{FxHashSet, FxIndexMap};\n use rustc_errors::struct_span_err;\n@@ -224,7 +225,7 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n \n             // Check if deprecated_since < stable_since. If it is,\n             // this is *almost surely* an accident.\n-            if let (&Some(dep_since), &attr::Stable { since: stab_since }) =\n+            if let (&Some(dep_since), &attr::Stable { since: stab_since, .. }) =\n                 (&depr.as_ref().and_then(|(d, _)| d.since), &stab.level)\n             {\n                 // Explicit version of iter::order::lt to handle parse errors properly\n@@ -819,14 +820,30 @@ impl<'tcx> Visitor<'tcx> for Checker<'tcx> {\n                 },\n             );\n \n-            if item_is_allowed {\n+            let is_allowed_through_unstable_modules = |def_id| {\n+                self.tcx\n+                    .lookup_stability(def_id)\n+                    .map(|stab| match stab.level {\n+                        StabilityLevel::Stable { allowed_through_unstable_modules, .. } => {\n+                            allowed_through_unstable_modules\n+                        }\n+                        _ => false,\n+                    })\n+                    .unwrap_or(false)\n+            };\n+\n+            if item_is_allowed && !is_allowed_through_unstable_modules(def_id) {\n                 // Check parent modules stability as well if the item the path refers to is itself\n                 // stable. We only emit warnings for unstable path segments if the item is stable\n                 // or allowed because stability is often inherited, so the most common case is that\n                 // both the segments and the item are unstable behind the same feature flag.\n                 //\n                 // We check here rather than in `visit_path_segment` to prevent visiting the last\n                 // path segment twice\n+                //\n+                // We include special cases via #[rustc_allowed_through_unstable_modules] for items\n+                // that were accidentally stabilized through unstable paths before this check was\n+                // added, such as `core::intrinsics::transmute`\n                 let parents = path.segments.iter().rev().skip(1);\n                 for path_segment in parents {\n                     if let Some(def_id) = path_segment.res.as_ref().and_then(Res::opt_def_id) {"}, {"sha": "61a3100c04920becad910cef7854053c79321b31", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b55453dbad4fb032d5b00c218146e1b053774a08/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b55453dbad4fb032d5b00c218146e1b053774a08/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=b55453dbad4fb032d5b00c218146e1b053774a08", "patch": "@@ -1191,6 +1191,7 @@ symbols! {\n         rustc_allocator_nounwind,\n         rustc_allow_const_fn_unstable,\n         rustc_allow_incoherent_impl,\n+        rustc_allowed_through_unstable_modules,\n         rustc_attrs,\n         rustc_box,\n         rustc_builtin_macro,"}, {"sha": "9097ffc2cc5a7e61834a014aa8edc5dc316369b6", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b55453dbad4fb032d5b00c218146e1b053774a08/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b55453dbad4fb032d5b00c218146e1b053774a08/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=b55453dbad4fb032d5b00c218146e1b053774a08", "patch": "@@ -1457,6 +1457,7 @@ extern \"rust-intrinsic\" {\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(not(bootstrap), rustc_allowed_through_unstable_modules)]\n     #[rustc_const_stable(feature = \"const_transmute\", since = \"1.56.0\")]\n     #[rustc_diagnostic_item = \"transmute\"]\n     pub fn transmute<T, U>(e: T) -> U;"}, {"sha": "c1fdece9ec6da3f819502f009015dfa2cb834b29", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b55453dbad4fb032d5b00c218146e1b053774a08/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b55453dbad4fb032d5b00c218146e1b053774a08/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=b55453dbad4fb032d5b00c218146e1b053774a08", "patch": "@@ -854,7 +854,7 @@ fn render_stability_since_raw(\n     }\n \n     let const_title_and_stability = match const_stability {\n-        Some(ConstStability { level: StabilityLevel::Stable { since }, .. })\n+        Some(ConstStability { level: StabilityLevel::Stable { since, .. }, .. })\n             if Some(since) != containing_const_ver =>\n         {\n             Some((format!(\"const since {}\", since), format!(\"const: {}\", since)))"}, {"sha": "f8bbe90cfc53b21ec3e943b1ef049e03e59cde90", "filename": "src/test/ui/stability-attribute/accidental-stable-in-unstable.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b55453dbad4fb032d5b00c218146e1b053774a08/src%2Ftest%2Fui%2Fstability-attribute%2Faccidental-stable-in-unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b55453dbad4fb032d5b00c218146e1b053774a08/src%2Ftest%2Fui%2Fstability-attribute%2Faccidental-stable-in-unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Faccidental-stable-in-unstable.rs?ref=b55453dbad4fb032d5b00c218146e1b053774a08", "patch": "@@ -0,0 +1,10 @@\n+#![crate_type = \"lib\"]\n+extern crate core;\n+\n+// Known accidental stabilizations with no known users, slated for un-stabilization\n+// fully stable @ core::char::UNICODE_VERSION\n+use core::unicode::UNICODE_VERSION; //~ ERROR use of unstable library feature 'unicode_internals'\n+\n+// Known accidental stabilizations with known users\n+// fully stable @ core::mem::transmute\n+use core::intrinsics::transmute; // depended upon by rand_core"}, {"sha": "ff733822cab98c5f979149d6c505c35cf82b1a9c", "filename": "src/test/ui/stability-attribute/accidental-stable-in-unstable.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b55453dbad4fb032d5b00c218146e1b053774a08/src%2Ftest%2Fui%2Fstability-attribute%2Faccidental-stable-in-unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b55453dbad4fb032d5b00c218146e1b053774a08/src%2Ftest%2Fui%2Fstability-attribute%2Faccidental-stable-in-unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Faccidental-stable-in-unstable.stderr?ref=b55453dbad4fb032d5b00c218146e1b053774a08", "patch": "@@ -0,0 +1,11 @@\n+error[E0658]: use of unstable library feature 'unicode_internals'\n+  --> $DIR/accidental-stable-in-unstable.rs:6:5\n+   |\n+LL | use core::unicode::UNICODE_VERSION;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add `#![feature(unicode_internals)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "7f942309e049b4c947eccb2ccb0345bfd6b645ca", "filename": "src/test/ui/stability-attribute/allow-through-unstable-misuse.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b55453dbad4fb032d5b00c218146e1b053774a08/src%2Ftest%2Fui%2Fstability-attribute%2Fallow-through-unstable-misuse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b55453dbad4fb032d5b00c218146e1b053774a08/src%2Ftest%2Fui%2Fstability-attribute%2Fallow-through-unstable-misuse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fallow-through-unstable-misuse.rs?ref=b55453dbad4fb032d5b00c218146e1b053774a08", "patch": "@@ -0,0 +1,8 @@\n+#![crate_type = \"lib\"]\n+#![feature(staged_api)]\n+#![feature(rustc_attrs)]\n+#![stable(feature = \"foo\", since = \"1.0.0\")]\n+\n+#[unstable(feature = \"bar\", issue = \"none\")]\n+#[rustc_allowed_through_unstable_modules]\n+pub struct UnstableType(());"}, {"sha": "ff0228e4da6a8acbc7c7025fb644ea7f88162b63", "filename": "src/test/ui/stability-attribute/allowed-through-unstable.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b55453dbad4fb032d5b00c218146e1b053774a08/src%2Ftest%2Fui%2Fstability-attribute%2Fallowed-through-unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b55453dbad4fb032d5b00c218146e1b053774a08/src%2Ftest%2Fui%2Fstability-attribute%2Fallowed-through-unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fallowed-through-unstable.rs?ref=b55453dbad4fb032d5b00c218146e1b053774a08", "patch": "@@ -0,0 +1,9 @@\n+// Test for new `#[rustc_allowed_through_unstable_modules]` attribute\n+//\n+// aux-build:allowed-through-unstable-core.rs\n+#![crate_type = \"lib\"]\n+\n+extern crate allowed_through_unstable_core;\n+\n+use allowed_through_unstable_core::unstable_module::OldStableTraitAllowedThoughUnstable;\n+use allowed_through_unstable_core::unstable_module::NewStableTraitNotAllowedThroughUnstable; //~ ERROR use of unstable library feature 'unstable_test_feature'"}, {"sha": "70b1dc3010a408fdae4587cad2e4ca75aac83e39", "filename": "src/test/ui/stability-attribute/allowed-through-unstable.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b55453dbad4fb032d5b00c218146e1b053774a08/src%2Ftest%2Fui%2Fstability-attribute%2Fallowed-through-unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b55453dbad4fb032d5b00c218146e1b053774a08/src%2Ftest%2Fui%2Fstability-attribute%2Fallowed-through-unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fallowed-through-unstable.stderr?ref=b55453dbad4fb032d5b00c218146e1b053774a08", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: use of unstable library feature 'unstable_test_feature'\n+  --> $DIR/allowed-through-unstable.rs:10:5\n+   |\n+LL | use allowed_through_unstable_core::unstable_module::NewStableTraitNotAllowedThroughUnstable;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #1 <https://github.com/rust-lang/rust/issues/1> for more information\n+   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "b597009a309c97cfdcd62fbcf7c801339e0f85bf", "filename": "src/test/ui/stability-attribute/auxiliary/allowed-through-unstable-core.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b55453dbad4fb032d5b00c218146e1b053774a08/src%2Ftest%2Fui%2Fstability-attribute%2Fauxiliary%2Fallowed-through-unstable-core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b55453dbad4fb032d5b00c218146e1b053774a08/src%2Ftest%2Fui%2Fstability-attribute%2Fauxiliary%2Fallowed-through-unstable-core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fauxiliary%2Fallowed-through-unstable-core.rs?ref=b55453dbad4fb032d5b00c218146e1b053774a08", "patch": "@@ -0,0 +1,14 @@\n+#![crate_type = \"lib\"]\n+#![feature(staged_api)]\n+#![feature(rustc_attrs)]\n+#![stable(feature = \"stable_test_feature\", since = \"1.2.0\")]\n+\n+#[unstable(feature = \"unstable_test_feature\", issue = \"1\")]\n+pub mod unstable_module {\n+    #[stable(feature = \"stable_test_feature\", since = \"1.2.0\")]\n+    #[rustc_allowed_through_unstable_modules]\n+    pub trait OldStableTraitAllowedThoughUnstable {}\n+\n+    #[stable(feature = \"stable_test_feature\", since = \"1.2.0\")]\n+    pub trait NewStableTraitNotAllowedThroughUnstable {}\n+}"}, {"sha": "0e19b0296f6edec4cc731d81879325bc0a80914b", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b55453dbad4fb032d5b00c218146e1b053774a08/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b55453dbad4fb032d5b00c218146e1b053774a08/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=b55453dbad4fb032d5b00c218146e1b053774a08", "patch": "@@ -353,7 +353,7 @@ fn check_terminator<'a, 'tcx>(\n fn is_const_fn(tcx: TyCtxt<'_>, def_id: DefId, msrv: Option<RustcVersion>) -> bool {\n     tcx.is_const_fn(def_id)\n         && tcx.lookup_const_stability(def_id).map_or(true, |const_stab| {\n-            if let rustc_attr::StabilityLevel::Stable { since } = const_stab.level {\n+            if let rustc_attr::StabilityLevel::Stable { since, .. } = const_stab.level {\n                 // Checking MSRV is manually necessary because `rustc` has no such concept. This entire\n                 // function could be removed if `rustc` provided a MSRV-aware version of `is_const_fn`.\n                 // as a part of an unimplemented MSRV check https://github.com/rust-lang/rust/issues/65262."}]}