{"sha": "c10e0cb9c984ece484a5c8c9c4c20369e2be499b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxMGUwY2I5Yzk4NGVjZTQ4NGE1YzhjOWM0YzIwMzY5ZTJiZTQ5OWI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-05-20T22:20:16Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-05-23T04:57:08Z"}, "message": "syntax: Change syntax extensions to expand to `std::foo` instead of `core::foo`", "tree": {"sha": "23f4a3a11a7efc8861f9b8878a8d6ec8bfa14260", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23f4a3a11a7efc8861f9b8878a8d6ec8bfa14260"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c10e0cb9c984ece484a5c8c9c4c20369e2be499b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c10e0cb9c984ece484a5c8c9c4c20369e2be499b", "html_url": "https://github.com/rust-lang/rust/commit/c10e0cb9c984ece484a5c8c9c4c20369e2be499b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c10e0cb9c984ece484a5c8c9c4c20369e2be499b/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9200237b4d86cba8f3b222ff8957f79d54ecd0e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/9200237b4d86cba8f3b222ff8957f79d54ecd0e1", "html_url": "https://github.com/rust-lang/rust/commit/9200237b4d86cba8f3b222ff8957f79d54ecd0e1"}], "stats": {"total": 128, "additions": 75, "deletions": 53}, "files": [{"sha": "7f9902dfc8c531aa133d3b370c30af8e1966041a", "filename": "src/libextra/std.rc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c10e0cb9c984ece484a5c8c9c4c20369e2be499b/src%2Flibextra%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/c10e0cb9c984ece484a5c8c9c4c20369e2be499b/src%2Flibextra%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fstd.rc?ref=c10e0cb9c984ece484a5c8c9c4c20369e2be499b", "patch": "@@ -125,6 +125,12 @@ pub mod serialize;\n pub mod std {\n     pub use serialize;\n     pub use test;\n+\n+    // For bootstrapping.\n+    pub use core::clone;\n+    pub use core::condition;\n+    pub use core::cmp;\n+    pub use core::sys;\n }\n #[doc(hidden)] // FIXME #3538\n pub mod extra {"}, {"sha": "2b392efaa859c3c3bf911e9a3fcb337996bd9242", "filename": "src/librustc/rustc.rc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c10e0cb9c984ece484a5c8c9c4c20369e2be499b/src%2Flibrustc%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/c10e0cb9c984ece484a5c8c9c4c20369e2be499b/src%2Flibrustc%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rc?ref=c10e0cb9c984ece484a5c8c9c4c20369e2be499b", "patch": "@@ -29,7 +29,10 @@ extern mod extra(name = \"extra\");\n extern mod syntax;\n \n // For deriving(Encodable) purposes...\n+#[cfg(stage0)]\n extern mod std(name = \"extra\", vers = \"0.7-pre\");\n+#[cfg(not(stage0))]\n+extern mod std(name = \"std\", vers = \"0.7-pre\");\n \n use core::prelude::*;\n "}, {"sha": "0b9e09cfa8db40fdbe4d4cdcc7dc6a09d694a761", "filename": "src/libstd/core.rc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c10e0cb9c984ece484a5c8c9c4c20369e2be499b/src%2Flibstd%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/c10e0cb9c984ece484a5c8c9c4c20369e2be499b/src%2Flibstd%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcore.rc?ref=c10e0cb9c984ece484a5c8c9c4c20369e2be499b", "patch": "@@ -225,4 +225,14 @@ mod core {\n     pub use sys;\n     pub use pipes;\n }\n+#[doc(hidden)]\n+mod std {\n+    pub use clone;\n+    pub use cmp;\n+    pub use condition;\n+    pub use option;\n+    pub use kinds;\n+    pub use sys;\n+    pub use pipes;\n+}\n "}, {"sha": "8d9abb186fd1c2788c8e5f11a8d6240c8a6d8f3b", "filename": "src/libsyntax/ext/deriving/clone.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c10e0cb9c984ece484a5c8c9c4c20369e2be499b/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10e0cb9c984ece484a5c8c9c4c20369e2be499b/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs?ref=c10e0cb9c984ece484a5c8c9c4c20369e2be499b", "patch": "@@ -22,7 +22,7 @@ pub fn expand_deriving_clone(cx: @ExtCtxt,\n                              in_items: ~[@item])\n                           -> ~[@item] {\n     let trait_def = TraitDef {\n-        path: Path::new(~[\"core\", \"clone\", \"Clone\"]),\n+        path: Path::new(~[\"std\", \"clone\", \"Clone\"]),\n         additional_bounds: ~[],\n         generics: LifetimeBounds::empty(),\n         methods: ~[\n@@ -49,7 +49,7 @@ pub fn expand_deriving_deep_clone(cx: @ExtCtxt,\n                                  in_items: ~[@item])\n     -> ~[@item] {\n     let trait_def = TraitDef {\n-        path: Path::new(~[\"core\", \"clone\", \"DeepClone\"]),\n+        path: Path::new(~[\"std\", \"clone\", \"DeepClone\"]),\n         additional_bounds: ~[],\n         generics: LifetimeBounds::empty(),\n         methods: ~["}, {"sha": "67107b4218acf6d4b7e98957b6a3345e700c7ad1", "filename": "src/libsyntax/ext/deriving/cmp/eq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c10e0cb9c984ece484a5c8c9c4c20369e2be499b/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10e0cb9c984ece484a5c8c9c4c20369e2be499b/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs?ref=c10e0cb9c984ece484a5c8c9c4c20369e2be499b", "patch": "@@ -46,7 +46,7 @@ pub fn expand_deriving_eq(cx: @ExtCtxt,\n     );\n \n     let trait_def = TraitDef {\n-        path: Path::new(~[\"core\", \"cmp\", \"Eq\"]),\n+        path: Path::new(~[\"std\", \"cmp\", \"Eq\"]),\n         additional_bounds: ~[],\n         generics: LifetimeBounds::empty(),\n         methods: ~["}, {"sha": "8b8ee37691cb076f488cdcd5c6f1cd2f1397f041", "filename": "src/libsyntax/ext/deriving/cmp/ord.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c10e0cb9c984ece484a5c8c9c4c20369e2be499b/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10e0cb9c984ece484a5c8c9c4c20369e2be499b/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs?ref=c10e0cb9c984ece484a5c8c9c4c20369e2be499b", "patch": "@@ -38,9 +38,9 @@ pub fn expand_deriving_ord(cx: @ExtCtxt,\n \n \n     let trait_def = TraitDef {\n-        path: Path::new(~[\"core\", \"cmp\", \"Ord\"]),\n+        path: Path::new(~[\"std\", \"cmp\", \"Ord\"]),\n         // XXX: Ord doesn't imply Eq yet\n-        additional_bounds: ~[Literal(Path::new(~[\"core\", \"cmp\", \"Eq\"]))],\n+        additional_bounds: ~[Literal(Path::new(~[\"std\", \"cmp\", \"Eq\"]))],\n         generics: LifetimeBounds::empty(),\n         methods: ~[\n             md!(\"lt\", true,  false),"}, {"sha": "f07c8949438689a4f050b2d8d8a0ce436ef34d9a", "filename": "src/libsyntax/ext/deriving/cmp/totaleq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c10e0cb9c984ece484a5c8c9c4c20369e2be499b/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10e0cb9c984ece484a5c8c9c4c20369e2be499b/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs?ref=c10e0cb9c984ece484a5c8c9c4c20369e2be499b", "patch": "@@ -27,7 +27,7 @@ pub fn expand_deriving_totaleq(cx: @ExtCtxt,\n     }\n \n     let trait_def = TraitDef {\n-        path: Path::new(~[\"core\", \"cmp\", \"TotalEq\"]),\n+        path: Path::new(~[\"std\", \"cmp\", \"TotalEq\"]),\n         additional_bounds: ~[],\n         generics: LifetimeBounds::empty(),\n         methods: ~["}, {"sha": "4c1c940927b9b1de0161ef480f9014154193f457", "filename": "src/libsyntax/ext/deriving/cmp/totalord.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c10e0cb9c984ece484a5c8c9c4c20369e2be499b/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10e0cb9c984ece484a5c8c9c4c20369e2be499b/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs?ref=c10e0cb9c984ece484a5c8c9c4c20369e2be499b", "patch": "@@ -22,7 +22,7 @@ pub fn expand_deriving_totalord(cx: @ExtCtxt,\n                                 mitem: @meta_item,\n                                 in_items: ~[@item]) -> ~[@item] {\n     let trait_def = TraitDef {\n-        path: Path::new(~[\"core\", \"cmp\", \"TotalOrd\"]),\n+        path: Path::new(~[\"std\", \"cmp\", \"TotalOrd\"]),\n         additional_bounds: ~[],\n         generics: LifetimeBounds::empty(),\n         methods: ~[\n@@ -31,7 +31,7 @@ pub fn expand_deriving_totalord(cx: @ExtCtxt,\n                 generics: LifetimeBounds::empty(),\n                 explicit_self: borrowed_explicit_self(),\n                 args: ~[borrowed_self()],\n-                ret_ty: Literal(Path::new(~[\"core\", \"cmp\", \"Ordering\"])),\n+                ret_ty: Literal(Path::new(~[\"std\", \"cmp\", \"Ordering\"])),\n                 const_nonmatching: false,\n                 combine_substructure: cs_cmp\n             }\n@@ -51,7 +51,7 @@ pub fn ordering_const(cx: @ExtCtxt, span: span, cnst: Ordering) -> @expr {\n     };\n     cx.expr_path(\n         cx.path_global(span,\n-                       ~[cx.ident_of(\"core\"),\n+                       ~[cx.ident_of(\"std\"),\n                          cx.ident_of(\"cmp\"),\n                          cx.ident_of(cnst)]))\n }\n@@ -64,7 +64,7 @@ pub fn cs_cmp(cx: @ExtCtxt, span: span,\n         false,\n         |cx, span, old, new| {\n             cx.expr_call_global(span,\n-                                ~[cx.ident_of(\"core\"),\n+                                ~[cx.ident_of(\"std\"),\n                                   cx.ident_of(\"cmp\"),\n                                   cx.ident_of(\"lexical_ordering\")],\n                                 ~[old, new])"}, {"sha": "401b91227fc0d94cc60a7ece4040c96e8e56c864", "filename": "src/libsyntax/ext/deriving/iter_bytes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c10e0cb9c984ece484a5c8c9c4c20369e2be499b/src%2Flibsyntax%2Fext%2Fderiving%2Fiter_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10e0cb9c984ece484a5c8c9c4c20369e2be499b/src%2Flibsyntax%2Fext%2Fderiving%2Fiter_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fiter_bytes.rs?ref=c10e0cb9c984ece484a5c8c9c4c20369e2be499b", "patch": "@@ -21,7 +21,7 @@ pub fn expand_deriving_iter_bytes(cx: @ExtCtxt,\n                                   mitem: @meta_item,\n                                   in_items: ~[@item]) -> ~[@item] {\n     let trait_def = TraitDef {\n-        path: Path::new(~[\"core\", \"to_bytes\", \"IterBytes\"]),\n+        path: Path::new(~[\"std\", \"to_bytes\", \"IterBytes\"]),\n         additional_bounds: ~[],\n         generics: LifetimeBounds::empty(),\n         methods: ~[\n@@ -31,7 +31,7 @@ pub fn expand_deriving_iter_bytes(cx: @ExtCtxt,\n                 explicit_self: borrowed_explicit_self(),\n                 args: ~[\n                     Literal(Path::new(~[\"bool\"])),\n-                    Literal(Path::new(~[\"core\", \"to_bytes\", \"Cb\"]))\n+                    Literal(Path::new(~[\"std\", \"to_bytes\", \"Cb\"]))\n                 ],\n                 ret_ty: Literal(Path::new(~[\"bool\"])),\n                 const_nonmatching: false,"}, {"sha": "3159b6db0af39c7f710d90ee45d5b478af7548bb", "filename": "src/libsyntax/ext/deriving/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c10e0cb9c984ece484a5c8c9c4c20369e2be499b/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10e0cb9c984ece484a5c8c9c4c20369e2be499b/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs?ref=c10e0cb9c984ece484a5c8c9c4c20369e2be499b", "patch": "@@ -13,7 +13,7 @@ The compiler code necessary to implement the #[deriving] extensions.\n \n \n FIXME (#2810)--Hygiene. Search for \"__\" strings (in other files too).\n-We also assume \"extra\" is the standard library, and \"core\" is the core\n+We also assume \"extra\" is the standard library, and \"std\" is the core\n library.\n \n */"}, {"sha": "d62e4972fd1fdfbbc878b4970186e8d2838f081b", "filename": "src/libsyntax/ext/deriving/rand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c10e0cb9c984ece484a5c8c9c4c20369e2be499b/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10e0cb9c984ece484a5c8c9c4c20369e2be499b/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs?ref=c10e0cb9c984ece484a5c8c9c4c20369e2be499b", "patch": "@@ -23,7 +23,7 @@ pub fn expand_deriving_rand(cx: @ExtCtxt,\n                             in_items: ~[@item])\n     -> ~[@item] {\n     let trait_def = TraitDef {\n-        path: Path::new(~[\"core\", \"rand\", \"Rand\"]),\n+        path: Path::new(~[\"std\", \"rand\", \"Rand\"]),\n         additional_bounds: ~[],\n         generics: LifetimeBounds::empty(),\n         methods: ~[\n@@ -32,7 +32,7 @@ pub fn expand_deriving_rand(cx: @ExtCtxt,\n                 generics: LifetimeBounds {\n                     lifetimes: ~[],\n                     bounds: ~[(\"R\",\n-                               ~[ Path::new(~[\"core\", \"rand\", \"Rng\"]) ])]\n+                               ~[ Path::new(~[\"std\", \"rand\", \"Rng\"]) ])]\n                 },\n                 explicit_self: None,\n                 args: ~[\n@@ -55,7 +55,7 @@ fn rand_substructure(cx: @ExtCtxt, span: span, substr: &Substructure) -> @expr {\n         _ => cx.bug(\"Incorrect number of arguments to `rand` in `deriving(Rand)`\")\n     };\n     let rand_ident = ~[\n-        cx.ident_of(\"core\"),\n+        cx.ident_of(\"std\"),\n         cx.ident_of(\"rand\"),\n         cx.ident_of(\"Rand\"),\n         cx.ident_of(\"rand\")"}, {"sha": "52efabd4b9b87696be1c3befe9bb661e1945ba30", "filename": "src/libsyntax/ext/deriving/to_str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c10e0cb9c984ece484a5c8c9c4c20369e2be499b/src%2Flibsyntax%2Fext%2Fderiving%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10e0cb9c984ece484a5c8c9c4c20369e2be499b/src%2Flibsyntax%2Fext%2Fderiving%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fto_str.rs?ref=c10e0cb9c984ece484a5c8c9c4c20369e2be499b", "patch": "@@ -22,7 +22,7 @@ pub fn expand_deriving_to_str(cx: @ExtCtxt,\n                               in_items: ~[@item])\n     -> ~[@item] {\n     let trait_def = TraitDef {\n-        path: Path::new(~[\"core\", \"to_str\", \"ToStr\"]),\n+        path: Path::new(~[\"std\", \"to_str\", \"ToStr\"]),\n         additional_bounds: ~[],\n         generics: LifetimeBounds::empty(),\n         methods: ~[\n@@ -46,7 +46,7 @@ fn to_str_substructure(cx: @ExtCtxt, span: span, substr: &Substructure) -> @expr\n         [self_obj] => {\n             let self_addr = cx.expr_addr_of(span, self_obj);\n             cx.expr_call_global(span,\n-                                ~[cx.ident_of(\"core\"),\n+                                ~[cx.ident_of(\"std\"),\n                                   cx.ident_of(\"sys\"),\n                                   cx.ident_of(\"log_str\")],\n                                 ~[self_addr])"}, {"sha": "7fa235fc334b82aa8ef0bb383f6f6026e8b88b51", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c10e0cb9c984ece484a5c8c9c4c20369e2be499b/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10e0cb9c984ece484a5c8c9c4c20369e2be499b/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=c10e0cb9c984ece484a5c8c9c4c20369e2be499b", "patch": "@@ -438,28 +438,28 @@ pub fn core_macros() -> ~str {\n             fail!(\\\"explicit failure\\\")\n         );\n         ($msg:expr) => (\n-            ::core::sys::FailWithCause::fail_with($msg, file!(), line!())\n+            ::std::sys::FailWithCause::fail_with($msg, file!(), line!())\n         );\n         ($( $arg:expr ),+) => (\n-            ::core::sys::FailWithCause::fail_with(fmt!( $($arg),+ ), file!(), line!())\n+            ::std::sys::FailWithCause::fail_with(fmt!( $($arg),+ ), file!(), line!())\n         )\n     )\n \n     macro_rules! assert(\n         ($cond:expr) => {\n             if !$cond {\n-                ::core::sys::FailWithCause::fail_with(\n+                ::std::sys::FailWithCause::fail_with(\n                     ~\\\"assertion failed: \\\" + stringify!($cond), file!(), line!())\n             }\n         };\n         ($cond:expr, $msg:expr) => {\n             if !$cond {\n-                ::core::sys::FailWithCause::fail_with($msg, file!(), line!())\n+                ::std::sys::FailWithCause::fail_with($msg, file!(), line!())\n             }\n         };\n         ($cond:expr, $( $arg:expr ),+) => {\n             if !$cond {\n-                ::core::sys::FailWithCause::fail_with(fmt!( $($arg),+ ), file!(), line!())\n+                ::std::sys::FailWithCause::fail_with(fmt!( $($arg),+ ), file!(), line!())\n             }\n         }\n     )\n@@ -480,7 +480,7 @@ pub fn core_macros() -> ~str {\n     macro_rules! assert_approx_eq (\n         ($given:expr , $expected:expr) => (\n             {\n-                use core::cmp::ApproxEq;\n+                use std::cmp::ApproxEq;\n \n                 let given_val = $given;\n                 let expected_val = $expected;\n@@ -496,7 +496,7 @@ pub fn core_macros() -> ~str {\n         );\n         ($given:expr , $expected:expr , $epsilon:expr) => (\n             {\n-                use core::cmp::ApproxEq;\n+                use std::cmp::ApproxEq;\n \n                 let given_val = $given;\n                 let expected_val = $expected;\n@@ -518,11 +518,11 @@ pub fn core_macros() -> ~str {\n         { pub $c:ident: $in:ty -> $out:ty; } => {\n \n             pub mod $c {\n-                fn key(_x: @::core::condition::Handler<$in,$out>) { }\n+                fn key(_x: @::std::condition::Handler<$in,$out>) { }\n \n                 pub static cond :\n-                    ::core::condition::Condition<'static,$in,$out> =\n-                    ::core::condition::Condition {\n+                    ::std::condition::Condition<'static,$in,$out> =\n+                    ::std::condition::Condition {\n                         name: stringify!($c),\n                         key: key\n                     };\n@@ -533,11 +533,11 @@ pub fn core_macros() -> ~str {\n \n             // FIXME (#6009): remove mod's `pub` below once variant above lands.\n             pub mod $c {\n-                fn key(_x: @::core::condition::Handler<$in,$out>) { }\n+                fn key(_x: @::std::condition::Handler<$in,$out>) { }\n \n                 pub static cond :\n-                    ::core::condition::Condition<'static,$in,$out> =\n-                    ::core::condition::Condition {\n+                    ::std::condition::Condition<'static,$in,$out> =\n+                    ::std::condition::Condition {\n                         name: stringify!($c),\n                         key: key\n                     };"}, {"sha": "545b5338ab1075095334d869526f075f629cbcd7", "filename": "src/libsyntax/ext/pipes/ast_builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c10e0cb9c984ece484a5c8c9c4c20369e2be499b/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10e0cb9c984ece484a5c8c9c4c20369e2be499b/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs?ref=c10e0cb9c984ece484a5c8c9c4c20369e2be499b", "patch": "@@ -63,3 +63,4 @@ impl append_types for @ast::Path {\n         }\n     }\n }\n+"}, {"sha": "1a7b7e55acea94e602c538194d2b4dcc9034e09f", "filename": "src/libsyntax/ext/pipes/pipec.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/c10e0cb9c984ece484a5c8c9c4c20369e2be499b/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10e0cb9c984ece484a5c8c9c4c20369e2be499b/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs?ref=c10e0cb9c984ece484a5c8c9c4c20369e2be499b", "patch": "@@ -77,10 +77,10 @@ impl gen_send for message {\n                 };\n \n                 body += ~\"let mut b = pipe.reuse_buffer();\\n\";\n-                body += fmt!(\"let %s = ::core::pipes::SendPacketBuffered(\\\n+                body += fmt!(\"let %s = ::std::pipes::SendPacketBuffered(\\\n                               &mut (b.buffer.data.%s));\\n\",\n                              sp, next.name);\n-                body += fmt!(\"let %s = ::core::pipes::RecvPacketBuffered(\\\n+                body += fmt!(\"let %s = ::std::pipes::RecvPacketBuffered(\\\n                               &mut (b.buffer.data.%s));\\n\",\n                              rp, next.name);\n             }\n@@ -92,7 +92,7 @@ impl gen_send for message {\n                   (recv, recv) => \"(c, s)\"\n                 };\n \n-                body += fmt!(\"let %s = ::core::pipes::entangle();\\n\", pat);\n+                body += fmt!(\"let %s = ::std::pipes::entangle();\\n\", pat);\n             }\n             body += fmt!(\"let message = %s(%s);\\n\",\n                          name,\n@@ -101,14 +101,14 @@ impl gen_send for message {\n                              ~\"s\"), \", \"));\n \n             if !try {\n-                body += fmt!(\"::core::pipes::send(pipe, message);\\n\");\n+                body += fmt!(\"::std::pipes::send(pipe, message);\\n\");\n                 // return the new channel\n                 body += ~\"c }\";\n             }\n             else {\n-                body += fmt!(\"if ::core::pipes::send(pipe, message) {\\n \\\n-                                  ::core::pipes::rt::make_some(c) \\\n-                              } else { ::core::pipes::rt::make_none() } }\");\n+                body += fmt!(\"if ::std::pipes::send(pipe, message) {\\n \\\n+                                  ::std::pipes::rt::make_some(c) \\\n+                              } else { ::std::pipes::rt::make_none() } }\");\n             }\n \n             let body = cx.parse_expr(body);\n@@ -160,14 +160,14 @@ impl gen_send for message {\n                 body += fmt!(\"let message = %s%s;\\n\", name, message_args);\n \n                 if !try {\n-                    body += fmt!(\"::core::pipes::send(pipe, message);\\n\");\n+                    body += fmt!(\"::std::pipes::send(pipe, message);\\n\");\n                     body += ~\" }\";\n                 } else {\n-                    body += fmt!(\"if ::core::pipes::send(pipe, message) \\\n+                    body += fmt!(\"if ::std::pipes::send(pipe, message) \\\n                                         { \\\n-                                      ::core::pipes::rt::make_some(()) \\\n+                                      ::std::pipes::rt::make_some(()) \\\n                                   } else { \\\n-                                    ::core::pipes::rt::make_none() \\\n+                                    ::std::pipes::rt::make_none() \\\n                                   } }\");\n                 }\n \n@@ -270,7 +270,7 @@ impl to_type_decls for state {\n                     self.span,\n                     self.data_name(),\n                     cx.ty_path(\n-                        path_global(~[cx.ident_of(\"core\"),\n+                        path_global(~[cx.ident_of(\"std\"),\n                                       cx.ident_of(\"pipes\"),\n                                       cx.ident_of(dir.to_str() + \"Packet\")],\n                              dummy_sp())\n@@ -288,7 +288,7 @@ impl to_type_decls for state {\n                     self.span,\n                     self.data_name(),\n                     cx.ty_path(\n-                        path_global(~[cx.ident_of(\"core\"),\n+                        path_global(~[cx.ident_of(\"std\"),\n                                       cx.ident_of(\"pipes\"),\n                                       cx.ident_of(dir.to_str()\n                                                   + \"PacketBuffered\")],\n@@ -315,10 +315,10 @@ impl gen_init for protocol {\n \n         let body = if !self.is_bounded() {\n             match start_state.dir {\n-              send => quote_expr!( ::core::pipes::entangle() ),\n+              send => quote_expr!( ::std::pipes::entangle() ),\n               recv => {\n                 quote_expr!({\n-                    let (s, c) = ::core::pipes::entangle();\n+                    let (s, c) = ::std::pipes::entangle();\n                     (c, s)\n                 })\n               }\n@@ -338,7 +338,7 @@ impl gen_init for protocol {\n         };\n \n         cx.parse_item(fmt!(\"pub fn init%s() -> (client::%s, server::%s)\\\n-                            { pub use core::pipes::HasBuffer; %s }\",\n+                            { pub use std::pipes::HasBuffer; %s }\",\n                            start_state.generics.to_source(cx),\n                            start_state.to_ty(cx).to_source(cx),\n                            start_state.to_ty(cx).to_source(cx),\n@@ -355,16 +355,16 @@ impl gen_init for protocol {\n                 ext_cx.field_imm(dummy_sp(),\n                                  ext_cx.ident_of(s.name),\n                                  quote_expr!(\n-                                     ::core::pipes::mk_packet::<$fty>()\n+                                     ::std::pipes::mk_packet::<$fty>()\n                                  ))\n             }))\n     }\n \n     fn gen_init_bounded(&self, ext_cx: @ExtCtxt) -> @ast::expr {\n         debug!(\"gen_init_bounded\");\n         let buffer_fields = self.gen_buffer_init(ext_cx);\n-        let buffer = quote_expr!(~::core::pipes::Buffer {\n-            header: ::core::pipes::BufferHeader(),\n+        let buffer = quote_expr!(~::std::pipes::Buffer {\n+            header: ::std::pipes::BufferHeader(),\n             data: $buffer_fields,\n         });\n \n@@ -376,12 +376,12 @@ impl gen_init for protocol {\n                         fmt!(\"data.%s.set_buffer(buffer)\",\n                              s.name))),\n                 Some(ext_cx.parse_expr(fmt!(\n-                    \"::core::ptr::to_mut_unsafe_ptr(&mut (data.%s))\",\n+                    \"::std::ptr::to_mut_unsafe_ptr(&mut (data.%s))\",\n                     self.states[0].name)))));\n \n         quote_expr!({\n             let buffer = $buffer;\n-            do ::core::pipes::entangle_buffer(buffer) |buffer, data| {\n+            do ::std::pipes::entangle_buffer(buffer) |buffer, data| {\n                 $entangle_body\n             }\n         })\n@@ -416,7 +416,7 @@ impl gen_init for protocol {\n             }\n \n             let ty = s.to_ty(cx);\n-            let fty = quote_ty!( ::core::pipes::Packet<$ty> );\n+            let fty = quote_ty!( ::std::pipes::Packet<$ty> );\n \n             @spanned {\n                 node: ast::struct_field_ {"}, {"sha": "cb1c2269c1e0accefd959ea6dc24a7a0fc33b741", "filename": "src/libsyntax/syntax.rc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c10e0cb9c984ece484a5c8c9c4c20369e2be499b/src%2Flibsyntax%2Fsyntax.rc", "raw_url": "https://github.com/rust-lang/rust/raw/c10e0cb9c984ece484a5c8c9c4c20369e2be499b/src%2Flibsyntax%2Fsyntax.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsyntax.rc?ref=c10e0cb9c984ece484a5c8c9c4c20369e2be499b", "patch": "@@ -32,6 +32,8 @@ extern mod extra(name = \"extra\");\n // For deriving(Encodable) purposes...\n #[cfg(stage0)]\n extern mod std(name = \"extra\");\n+#[cfg(not(stage0))]\n+extern mod std(name = \"std\");\n \n use core::prelude::*;\n "}]}