{"sha": "33337bb855d453c0077764f6a5488b3ff109b6f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzMzM3YmI4NTVkNDUzYzAwNzc3NjRmNmE1NDg4YjNmZjEwOWI2ZjU=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-10-02T20:11:24Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-10-04T11:54:02Z"}, "message": "Bless mir-opt tests", "tree": {"sha": "17e4b610314912a87ec966c2643431a5796441fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17e4b610314912a87ec966c2643431a5796441fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33337bb855d453c0077764f6a5488b3ff109b6f5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl95t9oACgkQtAh+UQ6Y\nsWTiKQ/+JBDxeFXh9AJW0TNhp15QjbapN0kTXmaVO56FgOfq6DQl5/nlOyF7Hb4F\n1zjiyJmXToRZM2Q2h8D1TH+iJk+cj2hu+bo1qYr4iXyR4M/b7Y4EM+KyMcdCWPDe\nkE2asD9zQkvAvLpSBI46PZbcW/y/0FnXrH7VgLep9yVHGxFlPV80sElLofl219jC\npZjARDIa3iVE67UgKSooviHYdBdvq42WkPz0i+3Iy7zcqS1COLaRza3PqXGUIKhX\nJTtTe/Ug2w2tN+2ifM5GsWiNOoYJfesxO6UHQuo7Er1950Jm6/2HIMLWy8+G7Z3y\nLleFWsMxglbcsQja8ORJ7gXA5UTMVpdvP0pLL+YiHmkCpifoqlQAZpgulmg7kXFb\nmph7n8hM3Lrr19OD6UbqLl9GRz8mo/whku/Gg6JyKgcEt6To4rKfd311Cie2slcx\ntqcp8RRqgl2hy9YUo/sJsfv2j2tnjgv+qFVfi3F5G4dltlEcG4k2b6FHDT41j1P3\nEkOwZl/KqzBOni1q8C28P0NNixEh68on5riRjVSCXEiV99i1aBS+E9YfRxACbWH/\nSSqZYJgnzBBJnXusLd8vnozadhEmL8eTNJVXSjcPZOuv4augrchUj1OnRVpRF1At\nEJnzHzt3QgPVYWPX5kG+hxCVYWeGR7/jhe++973TdsUzAswpTiA=\n=w3Oi\n-----END PGP SIGNATURE-----", "payload": "tree 17e4b610314912a87ec966c2643431a5796441fb\nparent 8478385ea49ea0cfa0b11ec3ed4f2aa9a76eaf9c\nauthor Aaron Hill <aa1ronham@gmail.com> 1601669484 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1601812442 -0400\n\nBless mir-opt tests\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33337bb855d453c0077764f6a5488b3ff109b6f5", "html_url": "https://github.com/rust-lang/rust/commit/33337bb855d453c0077764f6a5488b3ff109b6f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33337bb855d453c0077764f6a5488b3ff109b6f5/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8478385ea49ea0cfa0b11ec3ed4f2aa9a76eaf9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8478385ea49ea0cfa0b11ec3ed4f2aa9a76eaf9c", "html_url": "https://github.com/rust-lang/rust/commit/8478385ea49ea0cfa0b11ec3ed4f2aa9a76eaf9c"}], "stats": {"total": 1830, "additions": 827, "deletions": 1003}, "files": [{"sha": "7e0ca3dea4b71aafe350344b65ab54fe88890b60", "filename": "src/test/mir-opt/basic_assignment.main.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fbasic_assignment.main.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fbasic_assignment.main.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbasic_assignment.main.SimplifyCfg-initial.after.mir?ref=33337bb855d453c0077764f6a5488b3ff109b6f5", "patch": "@@ -41,44 +41,44 @@ fn main() -> () {\n         StorageLive(_5);                 // scope 3 at $DIR/basic_assignment.rs:19:9: 19:15\n         StorageLive(_6);                 // scope 4 at $DIR/basic_assignment.rs:23:14: 23:20\n         _6 = move _4;                    // scope 4 at $DIR/basic_assignment.rs:23:14: 23:20\n-        replace(_5 <- move _6) -> [return: bb2, unwind: bb5]; // scope 4 at $DIR/basic_assignment.rs:23:5: 23:11\n+        replace(_5 <- move _6) -> [return: bb1, unwind: bb5]; // scope 4 at $DIR/basic_assignment.rs:23:5: 23:11\n     }\n \n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/basic_assignment.rs:10:1: 24:2\n+    bb1: {\n+        drop(_6) -> [return: bb2, unwind: bb6]; // scope 4 at $DIR/basic_assignment.rs:23:19: 23:20\n     }\n \n     bb2: {\n-        drop(_6) -> [return: bb6, unwind: bb4]; // scope 4 at $DIR/basic_assignment.rs:23:19: 23:20\n+        StorageDead(_6);                 // scope 4 at $DIR/basic_assignment.rs:23:19: 23:20\n+        _0 = const ();                   // scope 0 at $DIR/basic_assignment.rs:10:11: 24:2\n+        drop(_5) -> [return: bb3, unwind: bb7]; // scope 3 at $DIR/basic_assignment.rs:24:1: 24:2\n     }\n \n-    bb3 (cleanup): {\n-        drop(_4) -> bb1;                 // scope 2 at $DIR/basic_assignment.rs:24:1: 24:2\n+    bb3: {\n+        StorageDead(_5);                 // scope 3 at $DIR/basic_assignment.rs:24:1: 24:2\n+        drop(_4) -> [return: bb4, unwind: bb8]; // scope 2 at $DIR/basic_assignment.rs:24:1: 24:2\n     }\n \n-    bb4 (cleanup): {\n-        drop(_5) -> bb3;                 // scope 3 at $DIR/basic_assignment.rs:24:1: 24:2\n+    bb4: {\n+        StorageDead(_4);                 // scope 2 at $DIR/basic_assignment.rs:24:1: 24:2\n+        StorageDead(_2);                 // scope 1 at $DIR/basic_assignment.rs:24:1: 24:2\n+        StorageDead(_1);                 // scope 0 at $DIR/basic_assignment.rs:24:1: 24:2\n+        return;                          // scope 0 at $DIR/basic_assignment.rs:24:2: 24:2\n     }\n \n     bb5 (cleanup): {\n-        drop(_6) -> bb4;                 // scope 4 at $DIR/basic_assignment.rs:23:19: 23:20\n+        drop(_6) -> bb6;                 // scope 4 at $DIR/basic_assignment.rs:23:19: 23:20\n     }\n \n-    bb6: {\n-        StorageDead(_6);                 // scope 4 at $DIR/basic_assignment.rs:23:19: 23:20\n-        _0 = const ();                   // scope 0 at $DIR/basic_assignment.rs:10:11: 24:2\n-        drop(_5) -> [return: bb7, unwind: bb3]; // scope 3 at $DIR/basic_assignment.rs:24:1: 24:2\n+    bb6 (cleanup): {\n+        drop(_5) -> bb7;                 // scope 3 at $DIR/basic_assignment.rs:24:1: 24:2\n     }\n \n-    bb7: {\n-        StorageDead(_5);                 // scope 3 at $DIR/basic_assignment.rs:24:1: 24:2\n-        drop(_4) -> [return: bb8, unwind: bb1]; // scope 2 at $DIR/basic_assignment.rs:24:1: 24:2\n+    bb7 (cleanup): {\n+        drop(_4) -> bb8;                 // scope 2 at $DIR/basic_assignment.rs:24:1: 24:2\n     }\n \n-    bb8: {\n-        StorageDead(_4);                 // scope 2 at $DIR/basic_assignment.rs:24:1: 24:2\n-        StorageDead(_2);                 // scope 1 at $DIR/basic_assignment.rs:24:1: 24:2\n-        StorageDead(_1);                 // scope 0 at $DIR/basic_assignment.rs:24:1: 24:2\n-        return;                          // scope 0 at $DIR/basic_assignment.rs:24:2: 24:2\n+    bb8 (cleanup): {\n+        resume;                          // scope 0 at $DIR/basic_assignment.rs:10:1: 24:2\n     }\n }"}, {"sha": "cfbd3a58637c0edd08c958bf59739c1b9841d761", "filename": "src/test/mir-opt/box_expr.main.ElaborateDrops.before.mir", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fbox_expr.main.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fbox_expr.main.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbox_expr.main.ElaborateDrops.before.mir?ref=33337bb855d453c0077764f6a5488b3ff109b6f5", "patch": "@@ -14,53 +14,53 @@ fn main() -> () {\n         StorageLive(_1);                 // scope 0 at $DIR/box_expr.rs:7:9: 7:10\n         StorageLive(_2);                 // scope 0 at $DIR/box_expr.rs:7:13: 7:25\n         _2 = Box(S);                     // scope 0 at $DIR/box_expr.rs:7:13: 7:25\n-        (*_2) = S::new() -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/box_expr.rs:7:17: 7:25\n+        (*_2) = S::new() -> [return: bb1, unwind: bb7]; // scope 0 at $DIR/box_expr.rs:7:17: 7:25\n                                          // mir::Constant\n                                          // + span: $DIR/box_expr.rs:7:17: 7:23\n                                          // + literal: Const { ty: fn() -> S {S::new}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/box_expr.rs:6:1: 9:2\n-    }\n-\n-    bb2: {\n+    bb1: {\n         _1 = move _2;                    // scope 0 at $DIR/box_expr.rs:7:13: 7:25\n-        drop(_2) -> bb4;                 // scope 0 at $DIR/box_expr.rs:7:24: 7:25\n-    }\n-\n-    bb3 (cleanup): {\n-        drop(_2) -> bb1;                 // scope 0 at $DIR/box_expr.rs:7:24: 7:25\n+        drop(_2) -> bb2;                 // scope 0 at $DIR/box_expr.rs:7:24: 7:25\n     }\n \n-    bb4: {\n+    bb2: {\n         StorageDead(_2);                 // scope 0 at $DIR/box_expr.rs:7:24: 7:25\n         StorageLive(_3);                 // scope 1 at $DIR/box_expr.rs:8:5: 8:12\n         StorageLive(_4);                 // scope 1 at $DIR/box_expr.rs:8:10: 8:11\n         _4 = move _1;                    // scope 1 at $DIR/box_expr.rs:8:10: 8:11\n-        _3 = std::mem::drop::<Box<S>>(move _4) -> [return: bb5, unwind: bb7]; // scope 1 at $DIR/box_expr.rs:8:5: 8:12\n+        _3 = std::mem::drop::<Box<S>>(move _4) -> [return: bb3, unwind: bb5]; // scope 1 at $DIR/box_expr.rs:8:5: 8:12\n                                          // mir::Constant\n                                          // + span: $DIR/box_expr.rs:8:5: 8:9\n                                          // + literal: Const { ty: fn(std::boxed::Box<S>) {std::mem::drop::<std::boxed::Box<S>>}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb5: {\n+    bb3: {\n         StorageDead(_4);                 // scope 1 at $DIR/box_expr.rs:8:11: 8:12\n         StorageDead(_3);                 // scope 1 at $DIR/box_expr.rs:8:12: 8:13\n         _0 = const ();                   // scope 0 at $DIR/box_expr.rs:6:11: 9:2\n-        drop(_1) -> bb8;                 // scope 0 at $DIR/box_expr.rs:9:1: 9:2\n+        drop(_1) -> bb4;                 // scope 0 at $DIR/box_expr.rs:9:1: 9:2\n+    }\n+\n+    bb4: {\n+        StorageDead(_1);                 // scope 0 at $DIR/box_expr.rs:9:1: 9:2\n+        return;                          // scope 0 at $DIR/box_expr.rs:9:2: 9:2\n+    }\n+\n+    bb5 (cleanup): {\n+        drop(_4) -> bb6;                 // scope 1 at $DIR/box_expr.rs:8:11: 8:12\n     }\n \n     bb6 (cleanup): {\n-        drop(_1) -> bb1;                 // scope 0 at $DIR/box_expr.rs:9:1: 9:2\n+        drop(_1) -> bb8;                 // scope 0 at $DIR/box_expr.rs:9:1: 9:2\n     }\n \n     bb7 (cleanup): {\n-        drop(_4) -> bb6;                 // scope 1 at $DIR/box_expr.rs:8:11: 8:12\n+        drop(_2) -> bb8;                 // scope 0 at $DIR/box_expr.rs:7:24: 7:25\n     }\n \n-    bb8: {\n-        StorageDead(_1);                 // scope 0 at $DIR/box_expr.rs:9:1: 9:2\n-        return;                          // scope 0 at $DIR/box_expr.rs:9:2: 9:2\n+    bb8 (cleanup): {\n+        resume;                          // scope 0 at $DIR/box_expr.rs:6:1: 9:2\n     }\n }"}, {"sha": "bbce9c288efa933d59d66c7ec333435ca7a844be", "filename": "src/test/mir-opt/const_promotion_extern_static.BAR.PromoteTemps.diff", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff?ref=33337bb855d453c0077764f6a5488b3ff109b6f5", "patch": "@@ -33,21 +33,21 @@\n +                                          // + literal: Const { ty: &[&i32; 1], val: Unevaluated(WithOptConstParam { did: DefId(0:6 ~ const_promotion_extern_static[317d]::BAR), const_param_did: None }, [], Some(promoted[0])) }\n +         _2 = &(*_6);                     // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n           _1 = move _2 as &[&i32] (Pointer(Unsize)); // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n-          _0 = core::slice::<impl [&i32]>::as_ptr(move _1) -> [return: bb2, unwind: bb1]; // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:44\n+          _0 = core::slice::<impl [&i32]>::as_ptr(move _1) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:44\n                                            // mir::Constant\n                                            // + span: $DIR/const-promotion-extern-static.rs:9:36: 9:42\n                                            // + literal: Const { ty: for<'r> fn(&'r [&i32]) -> *const &i32 {core::slice::<impl [&i32]>::as_ptr}, val: Value(Scalar(<ZST>)) }\n       }\n   \n-      bb1 (cleanup): {\n-          resume;                          // scope 0 at $DIR/const-promotion-extern-static.rs:9:1: 9:45\n-      }\n-  \n-      bb2: {\n+      bb1: {\n -         StorageDead(_5);                 // scope 0 at $DIR/const-promotion-extern-static.rs:9:43: 9:44\n -         StorageDead(_3);                 // scope 0 at $DIR/const-promotion-extern-static.rs:9:43: 9:44\n           return;                          // scope 0 at $DIR/const-promotion-extern-static.rs:9:1: 9:45\n       }\n+  \n+      bb2 (cleanup): {\n+          resume;                          // scope 0 at $DIR/const-promotion-extern-static.rs:9:1: 9:45\n+      }\n - }\n - \n - alloc0 (static: Y, size: 4, align: 4) {"}, {"sha": "a392334e0c955062069b61be16a0232868b03630", "filename": "src/test/mir-opt/const_promotion_extern_static.FOO.PromoteTemps.diff", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff?ref=33337bb855d453c0077764f6a5488b3ff109b6f5", "patch": "@@ -35,21 +35,21 @@\n +                                          // + literal: Const { ty: &[&i32; 1], val: Unevaluated(WithOptConstParam { did: DefId(0:7 ~ const_promotion_extern_static[317d]::FOO), const_param_did: None }, [], Some(promoted[0])) }\n +         _2 = &(*_6);                     // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n           _1 = move _2 as &[&i32] (Pointer(Unsize)); // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n-          _0 = core::slice::<impl [&i32]>::as_ptr(move _1) -> [return: bb2, unwind: bb1]; // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:55\n+          _0 = core::slice::<impl [&i32]>::as_ptr(move _1) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:55\n                                            // mir::Constant\n                                            // + span: $DIR/const-promotion-extern-static.rs:13:47: 13:53\n                                            // + literal: Const { ty: for<'r> fn(&'r [&i32]) -> *const &i32 {core::slice::<impl [&i32]>::as_ptr}, val: Value(Scalar(<ZST>)) }\n       }\n   \n-      bb1 (cleanup): {\n-          resume;                          // scope 0 at $DIR/const-promotion-extern-static.rs:13:1: 13:56\n-      }\n-  \n-      bb2: {\n+      bb1: {\n -         StorageDead(_5);                 // scope 0 at $DIR/const-promotion-extern-static.rs:13:54: 13:55\n -         StorageDead(_3);                 // scope 0 at $DIR/const-promotion-extern-static.rs:13:54: 13:55\n           return;                          // scope 0 at $DIR/const-promotion-extern-static.rs:13:1: 13:56\n       }\n+  \n+      bb2 (cleanup): {\n+          resume;                          // scope 0 at $DIR/const-promotion-extern-static.rs:13:1: 13:56\n+      }\n   }\n - \n - alloc2 (extern static: X)"}, {"sha": "1412162d78bff5f31bc47095e16bfb6f74b15eb8", "filename": "src/test/mir-opt/const_prop/boxes.main.ConstProp.diff", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fboxes.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fboxes.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fboxes.main.ConstProp.diff?ref=33337bb855d453c0077764f6a5488b3ff109b6f5", "patch": "@@ -23,18 +23,18 @@\n           _2 = (*_3);                      // scope 0 at $DIR/boxes.rs:12:13: 12:22\n           _1 = Add(move _2, const 0_i32);  // scope 0 at $DIR/boxes.rs:12:13: 12:26\n           StorageDead(_2);                 // scope 0 at $DIR/boxes.rs:12:25: 12:26\n-          drop(_3) -> [return: bb2, unwind: bb1]; // scope 0 at $DIR/boxes.rs:12:26: 12:27\n+          drop(_3) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/boxes.rs:12:26: 12:27\n       }\n   \n-      bb1 (cleanup): {\n-          resume;                          // scope 0 at $DIR/boxes.rs:11:1: 13:2\n-      }\n-  \n-      bb2: {\n+      bb1: {\n           StorageDead(_3);                 // scope 0 at $DIR/boxes.rs:12:26: 12:27\n           _0 = const ();                   // scope 0 at $DIR/boxes.rs:11:11: 13:2\n           StorageDead(_1);                 // scope 0 at $DIR/boxes.rs:13:1: 13:2\n           return;                          // scope 0 at $DIR/boxes.rs:13:2: 13:2\n       }\n+  \n+      bb2 (cleanup): {\n+          resume;                          // scope 0 at $DIR/boxes.rs:11:1: 13:2\n+      }\n   }\n   "}, {"sha": "9a5a309fd272b72d59572cd60cc66dbf07b0684a", "filename": "src/test/mir-opt/early_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.before-SimplifyBranches-after-copy-prop.after.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.before-SimplifyBranches-after-copy-prop.after.diff", "raw_url": "https://github.com/rust-lang/rust/raw/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.before-SimplifyBranches-after-copy-prop.after.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.before-SimplifyBranches-after-copy-prop.after.diff?ref=33337bb855d453c0077764f6a5488b3ff109b6f5", "patch": "@@ -109,7 +109,7 @@\n -         StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:29:1: 29:2\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:28:6: 28:7\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:29:1: 29:2\n-          return;                          // scope 0 at $DIR/early_otherwise_branch_68867.rs:27:14: 27:28\n+          return;                          // scope 0 at $DIR/early_otherwise_branch_68867.rs:29:2: 29:2\n       }\n   \n +     bb2: {"}, {"sha": "05ef6721e65357d198f4631c37ba7888482bc565", "filename": "src/test/mir-opt/early_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff?ref=33337bb855d453c0077764f6a5488b3ff109b6f5", "patch": "@@ -89,7 +89,7 @@\n           StorageDead(_33);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:27:27: 27:28\n           StorageDead(_3);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:28:6: 28:7\n           StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:29:1: 29:2\n-          return;                          // scope 0 at $DIR/early_otherwise_branch_68867.rs:27:14: 27:28\n+          return;                          // scope 0 at $DIR/early_otherwise_branch_68867.rs:29:2: 29:2\n       }\n   \n -     bb3: {"}, {"sha": "8e8ab08823578d4bb3516935007994a9b37fa253", "filename": "src/test/mir-opt/generator_drop_cleanup.main-{closure#0}.generator_drop.0.mir", "status": "modified", "additions": 18, "deletions": 22, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fgenerator_drop_cleanup.main-%7Bclosure%230%7D.generator_drop.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fgenerator_drop_cleanup.main-%7Bclosure%230%7D.generator_drop.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator_drop_cleanup.main-%7Bclosure%230%7D.generator_drop.0.mir?ref=33337bb855d453c0077764f6a5488b3ff109b6f5", "patch": "@@ -34,60 +34,56 @@ fn main::{closure#0}(_1: *mut [generator@$DIR/generator-drop-cleanup.rs:10:15: 1\n \n     bb0: {\n         _9 = discriminant((*_1));        // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n-        switchInt(move _9) -> [0_u32: bb7, 3_u32: bb11, otherwise: bb12]; // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n+        switchInt(move _9) -> [0_u32: bb7, 3_u32: bb10, otherwise: bb11]; // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n     }\n \n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n+    bb1: {\n+        StorageDead(_5);                 // scope 1 at $DIR/generator-drop-cleanup.rs:12:13: 12:14\n+        StorageDead(_4);                 // scope 1 at $DIR/generator-drop-cleanup.rs:12:14: 12:15\n+        drop((((*_1) as variant#3).0: std::string::String)) -> [return: bb2, unwind: bb5]; // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n     }\n \n-    bb2 (cleanup): {\n+    bb2: {\n         nop;                             // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n         goto -> bb8;                     // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n     }\n \n     bb3: {\n-        StorageDead(_5);                 // scope 1 at $DIR/generator-drop-cleanup.rs:12:13: 12:14\n-        StorageDead(_4);                 // scope 1 at $DIR/generator-drop-cleanup.rs:12:14: 12:15\n-        drop((((*_1) as variant#3).0: std::string::String)) -> [return: bb4, unwind: bb2]; // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n+        return;                          // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n     }\n \n-    bb4: {\n-        nop;                             // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n-        goto -> bb9;                     // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n+    bb4 (cleanup): {\n+        resume;                          // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n     }\n \n-    bb5: {\n-        return;                          // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n+    bb5 (cleanup): {\n+        nop;                             // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n+        goto -> bb4;                     // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n     }\n \n     bb6: {\n         return;                          // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n     }\n \n     bb7: {\n-        goto -> bb10;                    // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n+        goto -> bb9;                     // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n     }\n \n-    bb8 (cleanup): {\n-        goto -> bb1;                     // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n+    bb8: {\n+        goto -> bb3;                     // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n     }\n \n     bb9: {\n-        goto -> bb5;                     // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n-    }\n-\n-    bb10: {\n         goto -> bb6;                     // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n     }\n \n-    bb11: {\n+    bb10: {\n         StorageLive(_4);                 // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n         StorageLive(_5);                 // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n-        goto -> bb3;                     // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n+        goto -> bb1;                     // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n     }\n \n-    bb12: {\n+    bb11: {\n         return;                          // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n     }\n }"}, {"sha": "42b95b5c68c4854715eb3abca9df69052339acd3", "filename": "src/test/mir-opt/generator_storage_dead_unwind.main-{closure#0}.StateTransform.before.mir", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fgenerator_storage_dead_unwind.main-%7Bclosure%230%7D.StateTransform.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fgenerator_storage_dead_unwind.main-%7Bclosure%230%7D.StateTransform.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator_storage_dead_unwind.main-%7Bclosure%230%7D.StateTransform.before.mir?ref=33337bb855d453c0077764f6a5488b3ff109b6f5", "patch": "@@ -26,86 +26,86 @@ yields ()\n         (_4.0: i32) = const 6_i32;       // scope 1 at $DIR/generator-storage-dead-unwind.rs:24:17: 24:23\n         StorageLive(_5);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n         StorageLive(_6);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n-        _5 = yield(move _6) -> [resume: bb2, drop: bb4]; // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n+        _5 = yield(move _6) -> [resume: bb1, drop: bb5]; // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n     }\n \n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/generator-storage-dead-unwind.rs:22:16: 28:6\n-    }\n-\n-    bb2: {\n+    bb1: {\n         StorageDead(_6);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:13: 25:14\n         StorageDead(_5);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:14: 25:15\n         StorageLive(_7);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:9: 26:16\n         StorageLive(_8);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:14: 26:15\n         _8 = move _3;                    // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:14: 26:15\n-        _7 = take::<Foo>(move _8) -> [return: bb7, unwind: bb9]; // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:9: 26:16\n+        _7 = take::<Foo>(move _8) -> [return: bb2, unwind: bb9]; // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:9: 26:16\n                                          // mir::Constant\n                                          // + span: $DIR/generator-storage-dead-unwind.rs:26:9: 26:13\n                                          // + literal: Const { ty: fn(Foo) {take::<Foo>}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb3 (cleanup): {\n+    bb2: {\n+        StorageDead(_8);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:15: 26:16\n+        StorageDead(_7);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:16: 26:17\n+        StorageLive(_9);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:9: 27:16\n+        StorageLive(_10);                // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:14: 27:15\n+        _10 = move _4;                   // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:14: 27:15\n+        _9 = take::<Bar>(move _10) -> [return: bb3, unwind: bb8]; // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:9: 27:16\n+                                         // mir::Constant\n+                                         // + span: $DIR/generator-storage-dead-unwind.rs:27:9: 27:13\n+                                         // + literal: Const { ty: fn(Bar) {take::<Bar>}, val: Value(Scalar(<ZST>)) }\n+    }\n+\n+    bb3: {\n+        StorageDead(_10);                // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:15: 27:16\n+        StorageDead(_9);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:16: 27:17\n+        _0 = const ();                   // scope 0 at $DIR/generator-storage-dead-unwind.rs:22:19: 28:6\n+        StorageDead(_4);                 // scope 1 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n         StorageDead(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n-        drop(_1) -> bb1;                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        drop(_1) -> [return: bb4, unwind: bb11]; // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n     }\n \n     bb4: {\n-        StorageDead(_6);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:13: 25:14\n-        StorageDead(_5);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:14: 25:15\n-        StorageDead(_4);                 // scope 1 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n-        drop(_3) -> [return: bb5, unwind: bb3]; // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        return;                          // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:6: 28:6\n     }\n \n     bb5: {\n-        StorageDead(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n-        drop(_1) -> [return: bb6, unwind: bb1]; // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        StorageDead(_6);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:13: 25:14\n+        StorageDead(_5);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:14: 25:15\n+        StorageDead(_4);                 // scope 1 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        drop(_3) -> [return: bb6, unwind: bb12]; // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n     }\n \n     bb6: {\n-        generator_drop;                  // scope 0 at $DIR/generator-storage-dead-unwind.rs:22:16: 28:6\n+        StorageDead(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        drop(_1) -> [return: bb7, unwind: bb11]; // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n     }\n \n     bb7: {\n-        StorageDead(_8);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:15: 26:16\n-        StorageDead(_7);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:16: 26:17\n-        StorageLive(_9);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:9: 27:16\n-        StorageLive(_10);                // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:14: 27:15\n-        _10 = move _4;                   // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:14: 27:15\n-        _9 = take::<Bar>(move _10) -> [return: bb10, unwind: bb11]; // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:9: 27:16\n-                                         // mir::Constant\n-                                         // + span: $DIR/generator-storage-dead-unwind.rs:27:9: 27:13\n-                                         // + literal: Const { ty: fn(Bar) {take::<Bar>}, val: Value(Scalar(<ZST>)) }\n+        generator_drop;                  // scope 0 at $DIR/generator-storage-dead-unwind.rs:22:16: 28:6\n     }\n \n     bb8 (cleanup): {\n-        StorageDead(_4);                 // scope 1 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n-        StorageDead(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n-        drop(_1) -> bb1;                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        StorageDead(_10);                // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:15: 27:16\n+        StorageDead(_9);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:16: 27:17\n+        goto -> bb10;                    // scope 2 at $DIR/generator-storage-dead-unwind.rs:1:1: 1:1\n     }\n \n     bb9 (cleanup): {\n         StorageDead(_8);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:15: 26:16\n         StorageDead(_7);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:16: 26:17\n-        goto -> bb8;                     // scope 2 at $DIR/generator-storage-dead-unwind.rs:1:1: 1:1\n+        goto -> bb10;                    // scope 2 at $DIR/generator-storage-dead-unwind.rs:1:1: 1:1\n     }\n \n-    bb10: {\n-        StorageDead(_10);                // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:15: 27:16\n-        StorageDead(_9);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:16: 27:17\n-        _0 = const ();                   // scope 0 at $DIR/generator-storage-dead-unwind.rs:22:19: 28:6\n+    bb10 (cleanup): {\n         StorageDead(_4);                 // scope 1 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n         StorageDead(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n-        drop(_1) -> [return: bb12, unwind: bb1]; // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        drop(_1) -> bb11;                // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n     }\n \n     bb11 (cleanup): {\n-        StorageDead(_10);                // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:15: 27:16\n-        StorageDead(_9);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:16: 27:17\n-        goto -> bb8;                     // scope 2 at $DIR/generator-storage-dead-unwind.rs:1:1: 1:1\n+        resume;                          // scope 0 at $DIR/generator-storage-dead-unwind.rs:22:16: 28:6\n     }\n \n-    bb12: {\n-        return;                          // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:6: 28:6\n+    bb12 (cleanup): {\n+        StorageDead(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        drop(_1) -> bb11;                // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n     }\n }"}, {"sha": "8d1da7f1b9651c5224281abf544534966c29f886", "filename": "src/test/mir-opt/graphviz.main.mir_map.0.dot.mir", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fgraphviz.main.mir_map.0.dot.mir", "raw_url": "https://github.com/rust-lang/rust/raw/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fgraphviz.main.mir_map.0.dot.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgraphviz.main.mir_map.0.dot.mir?ref=33337bb855d453c0077764f6a5488b3ff109b6f5", "patch": "@@ -3,8 +3,5 @@ digraph Mir_0_3 {\n     node [fontname=\"Courier, monospace\"];\n     edge [fontname=\"Courier, monospace\"];\n     label=<fn main() -&gt; ()<br align=\"left\"/>>;\n-    bb0__0_3 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">0</td></tr><tr><td align=\"left\" balign=\"left\">_0 = const ()<br/></td></tr><tr><td align=\"left\">goto</td></tr></table>>];\n-    bb1__0_3 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">1</td></tr><tr><td align=\"left\">resume</td></tr></table>>];\n-    bb2__0_3 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">2</td></tr><tr><td align=\"left\">return</td></tr></table>>];\n-    bb0__0_3 -> bb2__0_3 [label=\"\"];\n+    bb0__0_3 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">0</td></tr><tr><td align=\"left\" balign=\"left\">_0 = const ()<br/></td></tr><tr><td align=\"left\">return</td></tr></table>>];\n }"}, {"sha": "fac2f6bd1ec1504c4295c0ecf05e4c514bb197df", "filename": "src/test/mir-opt/inline/inline_into_box_place.main.Inline.32bit.diff", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.32bit.diff?ref=33337bb855d453c0077764f6a5488b3ff109b6f5", "patch": "@@ -17,7 +17,7 @@\n           StorageLive(_1);                 // scope 0 at $DIR/inline-into-box-place.rs:8:9: 8:11\n           StorageLive(_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n           _2 = Box(std::vec::Vec<u32>);    // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n--         (*_2) = Vec::<u32>::new() -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n+-         (*_2) = Vec::<u32>::new() -> [return: bb1, unwind: bb4]; // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +         _4 = &mut (*_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +         ((*_4).0: alloc::raw_vec::RawVec<u32>) = const alloc::raw_vec::RawVec::<u32> { ptr: Unique::<u32> { pointer: {0x4 as *const u32}, _marker: PhantomData::<u32> }, cap: 0_usize, alloc: std::alloc::Global }; // scope 2 at $SRC_DIR/alloc/src/vec.rs:LL:COL\n +                                          // ty::Const\n@@ -27,34 +27,33 @@\n -                                          // + span: $DIR/inline-into-box-place.rs:8:33: 8:41\n -                                          // + user_ty: UserType(1)\n -                                          // + literal: Const { ty: fn() -> std::vec::Vec<u32> {std::vec::Vec::<u32>::new}, val: Value(Scalar(<ZST>)) }\n+-     }\n+- \n+-     bb1: {\n +                                          // + span: $SRC_DIR/alloc/src/vec.rs:LL:COL\n +                                          // + user_ty: UserType(0)\n +                                          // + literal: Const { ty: alloc::raw_vec::RawVec<u32>, val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }\n +         ((*_4).1: usize) = const 0_usize; // scope 2 at $SRC_DIR/alloc/src/vec.rs:LL:COL\n-+         _1 = move _2;                    // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n-+         StorageDead(_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n-+         _0 = const ();                   // scope 0 at $DIR/inline-into-box-place.rs:7:11: 9:2\n-+         drop(_1) -> [return: bb2, unwind: bb1]; // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n-      }\n-  \n-      bb1 (cleanup): {\n-          resume;                          // scope 0 at $DIR/inline-into-box-place.rs:7:1: 9:2\n+          _1 = move _2;                    // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+          StorageDead(_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n+          _0 = const ();                   // scope 0 at $DIR/inline-into-box-place.rs:7:11: 9:2\n+-         drop(_1) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n++         drop(_1) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n       }\n   \n-      bb2: {\n--         _1 = move _2;                    // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n--         StorageDead(_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n--         _0 = const ();                   // scope 0 at $DIR/inline-into-box-place.rs:7:11: 9:2\n--         drop(_1) -> [return: bb3, unwind: bb1]; // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n--     }\n-- \n--     bb3: {\n+-     bb2: {\n++     bb1: {\n           StorageDead(_1);                 // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n           return;                          // scope 0 at $DIR/inline-into-box-place.rs:9:2: 9:2\n+      }\n+  \n+-     bb3 (cleanup): {\n++     bb2 (cleanup): {\n+          resume;                          // scope 0 at $DIR/inline-into-box-place.rs:7:1: 9:2\n -     }\n - \n -     bb4 (cleanup): {\n--         _3 = alloc::alloc::box_free::<Vec<u32>>(move (_2.0: std::ptr::Unique<std::vec::Vec<u32>>)) -> bb1; // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n+-         _3 = alloc::alloc::box_free::<Vec<u32>>(move (_2.0: std::ptr::Unique<std::vec::Vec<u32>>)) -> bb3; // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-into-box-place.rs:8:42: 8:43\n -                                          // + literal: Const { ty: unsafe fn(std::ptr::Unique<std::vec::Vec<u32>>) {alloc::alloc::box_free::<std::vec::Vec<u32>>}, val: Value(Scalar(<ZST>)) }"}, {"sha": "4535cf290a1da65fbb43958c6fc78941dae80038", "filename": "src/test/mir-opt/inline/inline_into_box_place.main.Inline.64bit.diff", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff?ref=33337bb855d453c0077764f6a5488b3ff109b6f5", "patch": "@@ -17,7 +17,7 @@\n           StorageLive(_1);                 // scope 0 at $DIR/inline-into-box-place.rs:8:9: 8:11\n           StorageLive(_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n           _2 = Box(std::vec::Vec<u32>);    // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n--         (*_2) = Vec::<u32>::new() -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n+-         (*_2) = Vec::<u32>::new() -> [return: bb1, unwind: bb4]; // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +         _4 = &mut (*_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +         ((*_4).0: alloc::raw_vec::RawVec<u32>) = const alloc::raw_vec::RawVec::<u32> { ptr: Unique::<u32> { pointer: {0x4 as *const u32}, _marker: PhantomData::<u32> }, cap: 0_usize, alloc: std::alloc::Global }; // scope 2 at $SRC_DIR/alloc/src/vec.rs:LL:COL\n +                                          // ty::Const\n@@ -27,34 +27,33 @@\n -                                          // + span: $DIR/inline-into-box-place.rs:8:33: 8:41\n -                                          // + user_ty: UserType(1)\n -                                          // + literal: Const { ty: fn() -> std::vec::Vec<u32> {std::vec::Vec::<u32>::new}, val: Value(Scalar(<ZST>)) }\n+-     }\n+- \n+-     bb1: {\n +                                          // + span: $SRC_DIR/alloc/src/vec.rs:LL:COL\n +                                          // + user_ty: UserType(0)\n +                                          // + literal: Const { ty: alloc::raw_vec::RawVec<u32>, val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [65535], len: Size { raw: 16 } }, size: Size { raw: 16 }, align: Align { pow2: 3 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }\n +         ((*_4).1: usize) = const 0_usize; // scope 2 at $SRC_DIR/alloc/src/vec.rs:LL:COL\n-+         _1 = move _2;                    // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n-+         StorageDead(_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n-+         _0 = const ();                   // scope 0 at $DIR/inline-into-box-place.rs:7:11: 9:2\n-+         drop(_1) -> [return: bb2, unwind: bb1]; // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n-      }\n-  \n-      bb1 (cleanup): {\n-          resume;                          // scope 0 at $DIR/inline-into-box-place.rs:7:1: 9:2\n+          _1 = move _2;                    // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+          StorageDead(_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n+          _0 = const ();                   // scope 0 at $DIR/inline-into-box-place.rs:7:11: 9:2\n+-         drop(_1) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n++         drop(_1) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n       }\n   \n-      bb2: {\n--         _1 = move _2;                    // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n--         StorageDead(_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n--         _0 = const ();                   // scope 0 at $DIR/inline-into-box-place.rs:7:11: 9:2\n--         drop(_1) -> [return: bb3, unwind: bb1]; // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n--     }\n-- \n--     bb3: {\n+-     bb2: {\n++     bb1: {\n           StorageDead(_1);                 // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n           return;                          // scope 0 at $DIR/inline-into-box-place.rs:9:2: 9:2\n+      }\n+  \n+-     bb3 (cleanup): {\n++     bb2 (cleanup): {\n+          resume;                          // scope 0 at $DIR/inline-into-box-place.rs:7:1: 9:2\n -     }\n - \n -     bb4 (cleanup): {\n--         _3 = alloc::alloc::box_free::<Vec<u32>>(move (_2.0: std::ptr::Unique<std::vec::Vec<u32>>)) -> bb1; // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n+-         _3 = alloc::alloc::box_free::<Vec<u32>>(move (_2.0: std::ptr::Unique<std::vec::Vec<u32>>)) -> bb3; // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-into-box-place.rs:8:42: 8:43\n -                                          // + literal: Const { ty: unsafe fn(std::ptr::Unique<std::vec::Vec<u32>>) {alloc::alloc::box_free::<std::vec::Vec<u32>>}, val: Value(Scalar(<ZST>)) }"}, {"sha": "0929ba9d8a266a4be62afdf73e95af727298bcf4", "filename": "src/test/mir-opt/issue_38669.main.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fissue_38669.main.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fissue_38669.main.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_38669.main.SimplifyCfg-initial.after.mir?ref=33337bb855d453c0077764f6a5488b3ff109b6f5", "patch": "@@ -15,43 +15,43 @@ fn main() -> () {\n         StorageLive(_1);                 // scope 0 at $DIR/issue-38669.rs:5:9: 5:25\n         _1 = const false;                // scope 0 at $DIR/issue-38669.rs:5:28: 5:33\n         FakeRead(ForLet, _1);            // scope 0 at $DIR/issue-38669.rs:5:9: 5:25\n-        goto -> bb2;                     // scope 1 at $DIR/issue-38669.rs:6:5: 11:6\n+        goto -> bb1;                     // scope 1 at $DIR/issue-38669.rs:6:5: 11:6\n     }\n \n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-38669.rs:4:1: 12:2\n+    bb1: {\n+        falseUnwind -> [real: bb2, cleanup: bb6]; // scope 1 at $DIR/issue-38669.rs:6:5: 11:6\n     }\n \n     bb2: {\n-        falseUnwind -> [real: bb3, cleanup: bb1]; // scope 1 at $DIR/issue-38669.rs:6:5: 11:6\n-    }\n-\n-    bb3: {\n         StorageLive(_3);                 // scope 1 at $DIR/issue-38669.rs:7:9: 9:10\n         StorageLive(_4);                 // scope 1 at $DIR/issue-38669.rs:7:12: 7:24\n         _4 = _1;                         // scope 1 at $DIR/issue-38669.rs:7:12: 7:24\n         FakeRead(ForMatchedPlace, _4);   // scope 1 at $DIR/issue-38669.rs:7:12: 7:24\n-        switchInt(_4) -> [false: bb5, otherwise: bb4]; // scope 1 at $DIR/issue-38669.rs:7:9: 9:10\n+        switchInt(_4) -> [false: bb4, otherwise: bb3]; // scope 1 at $DIR/issue-38669.rs:7:9: 9:10\n     }\n \n-    bb4: {\n-        falseEdge -> [real: bb6, imaginary: bb5]; // scope 1 at $DIR/issue-38669.rs:7:9: 9:10\n+    bb3: {\n+        falseEdge -> [real: bb5, imaginary: bb4]; // scope 1 at $DIR/issue-38669.rs:7:9: 9:10\n     }\n \n-    bb5: {\n+    bb4: {\n         _3 = const ();                   // scope 1 at $DIR/issue-38669.rs:7:9: 9:10\n         StorageDead(_4);                 // scope 1 at $DIR/issue-38669.rs:9:9: 9:10\n         StorageDead(_3);                 // scope 1 at $DIR/issue-38669.rs:9:9: 9:10\n         _1 = const true;                 // scope 1 at $DIR/issue-38669.rs:10:9: 10:28\n         _2 = const ();                   // scope 1 at $DIR/issue-38669.rs:6:10: 11:6\n-        goto -> bb2;                     // scope 1 at $DIR/issue-38669.rs:6:5: 11:6\n+        goto -> bb1;                     // scope 1 at $DIR/issue-38669.rs:6:5: 11:6\n     }\n \n-    bb6: {\n+    bb5: {\n         _0 = const ();                   // scope 1 at $DIR/issue-38669.rs:8:13: 8:18\n         StorageDead(_4);                 // scope 1 at $DIR/issue-38669.rs:9:9: 9:10\n         StorageDead(_3);                 // scope 1 at $DIR/issue-38669.rs:9:9: 9:10\n         StorageDead(_1);                 // scope 0 at $DIR/issue-38669.rs:12:1: 12:2\n         return;                          // scope 0 at $DIR/issue-38669.rs:12:2: 12:2\n     }\n+\n+    bb6 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-38669.rs:4:1: 12:2\n+    }\n }"}, {"sha": "7113c42b9c77f97088ae3ab70be33c53fdb48e96", "filename": "src/test/mir-opt/issue_41110.main.ElaborateDrops.after.mir", "status": "modified", "additions": 19, "deletions": 24, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fissue_41110.main.ElaborateDrops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fissue_41110.main.ElaborateDrops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_41110.main.ElaborateDrops.after.mir?ref=33337bb855d453c0077764f6a5488b3ff109b6f5", "patch": "@@ -20,56 +20,51 @@ fn main() -> () {\n         StorageLive(_3);                 // scope 0 at $DIR/issue-41110.rs:8:21: 8:27\n         StorageLive(_4);                 // scope 0 at $DIR/issue-41110.rs:8:21: 8:22\n         _4 = S;                          // scope 0 at $DIR/issue-41110.rs:8:21: 8:22\n-        _3 = S::id(move _4) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/issue-41110.rs:8:21: 8:27\n+        _3 = S::id(move _4) -> [return: bb1, unwind: bb4]; // scope 0 at $DIR/issue-41110.rs:8:21: 8:27\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41110.rs:8:23: 8:25\n                                          // + literal: Const { ty: fn(S) -> S {S::id}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-41110.rs:7:1: 9:2\n-    }\n-\n-    bb2: {\n+    bb1: {\n         StorageDead(_4);                 // scope 0 at $DIR/issue-41110.rs:8:26: 8:27\n         _5 = const false;                // scope 0 at $DIR/issue-41110.rs:8:13: 8:28\n-        _1 = S::other(move _2, move _3) -> [return: bb6, unwind: bb5]; // scope 0 at $DIR/issue-41110.rs:8:13: 8:28\n+        _1 = S::other(move _2, move _3) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/issue-41110.rs:8:13: 8:28\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41110.rs:8:15: 8:20\n                                          // + literal: Const { ty: fn(S, S) {S::other}, val: Value(Scalar(<ZST>)) }\n     }\n \n+    bb2: {\n+        StorageDead(_3);                 // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n+        _5 = const false;                // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n+        StorageDead(_2);                 // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n+        _0 = const ();                   // scope 0 at $DIR/issue-41110.rs:7:11: 9:2\n+        StorageDead(_1);                 // scope 0 at $DIR/issue-41110.rs:9:1: 9:2\n+        return;                          // scope 0 at $DIR/issue-41110.rs:9:2: 9:2\n+    }\n+\n     bb3 (cleanup): {\n-        goto -> bb9;                     // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n+        goto -> bb5;                     // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n     }\n \n     bb4 (cleanup): {\n-        goto -> bb3;                     // scope 0 at $DIR/issue-41110.rs:8:26: 8:27\n+        goto -> bb5;                     // scope 0 at $DIR/issue-41110.rs:8:26: 8:27\n     }\n \n     bb5 (cleanup): {\n-        goto -> bb3;                     // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n+        goto -> bb8;                     // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n     }\n \n-    bb6: {\n-        StorageDead(_3);                 // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n-        _5 = const false;                // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n-        StorageDead(_2);                 // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n-        _0 = const ();                   // scope 0 at $DIR/issue-41110.rs:7:11: 9:2\n-        StorageDead(_1);                 // scope 0 at $DIR/issue-41110.rs:9:1: 9:2\n-        return;                          // scope 0 at $DIR/issue-41110.rs:9:2: 9:2\n+    bb6 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-41110.rs:7:1: 9:2\n     }\n \n     bb7 (cleanup): {\n-        drop(_2) -> bb1;                 // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n+        drop(_2) -> bb6;                 // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n     }\n \n     bb8 (cleanup): {\n-        _5 = const false;                // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n-        goto -> bb7;                     // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n-    }\n-\n-    bb9 (cleanup): {\n-        switchInt(_5) -> [false: bb1, otherwise: bb8]; // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n+        switchInt(_5) -> [false: bb6, otherwise: bb7]; // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n     }\n }"}, {"sha": "c4e852ca3212a5d9eddf51c4476cfcfedf6335e3", "filename": "src/test/mir-opt/issue_41110.test.ElaborateDrops.after.mir", "status": "modified", "additions": 29, "deletions": 34, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fissue_41110.test.ElaborateDrops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fissue_41110.test.ElaborateDrops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_41110.test.ElaborateDrops.after.mir?ref=33337bb855d453c0077764f6a5488b3ff109b6f5", "patch": "@@ -25,17 +25,13 @@ fn test() -> () {\n         StorageLive(_3);                 // scope 2 at $DIR/issue-41110.rs:17:5: 17:12\n         StorageLive(_4);                 // scope 2 at $DIR/issue-41110.rs:17:10: 17:11\n         _4 = move _2;                    // scope 2 at $DIR/issue-41110.rs:17:10: 17:11\n-        _3 = std::mem::drop::<S>(move _4) -> [return: bb2, unwind: bb5]; // scope 2 at $DIR/issue-41110.rs:17:5: 17:12\n+        _3 = std::mem::drop::<S>(move _4) -> [return: bb1, unwind: bb7]; // scope 2 at $DIR/issue-41110.rs:17:5: 17:12\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41110.rs:17:5: 17:9\n                                          // + literal: Const { ty: fn(S) {std::mem::drop::<S>}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-41110.rs:14:1: 19:2\n-    }\n-\n-    bb2: {\n+    bb1: {\n         StorageDead(_4);                 // scope 2 at $DIR/issue-41110.rs:17:11: 17:12\n         StorageDead(_3);                 // scope 2 at $DIR/issue-41110.rs:17:12: 17:13\n         StorageLive(_5);                 // scope 2 at $DIR/issue-41110.rs:18:9: 18:10\n@@ -44,63 +40,62 @@ fn test() -> () {\n         goto -> bb12;                    // scope 2 at $DIR/issue-41110.rs:18:5: 18:6\n     }\n \n-    bb3 (cleanup): {\n-        goto -> bb15;                    // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n+    bb2: {\n+        goto -> bb3;                     // scope 2 at $DIR/issue-41110.rs:18:9: 18:10\n     }\n \n-    bb4 (cleanup): {\n-        goto -> bb3;                     // scope 1 at $DIR/issue-41110.rs:19:1: 19:2\n+    bb3: {\n+        StorageDead(_5);                 // scope 2 at $DIR/issue-41110.rs:18:9: 18:10\n+        _0 = const ();                   // scope 0 at $DIR/issue-41110.rs:14:15: 19:2\n+        drop(_2) -> [return: bb4, unwind: bb9]; // scope 1 at $DIR/issue-41110.rs:19:1: 19:2\n     }\n \n-    bb5 (cleanup): {\n-        goto -> bb4;                     // scope 2 at $DIR/issue-41110.rs:17:11: 17:12\n+    bb4: {\n+        StorageDead(_2);                 // scope 1 at $DIR/issue-41110.rs:19:1: 19:2\n+        goto -> bb5;                     // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n+    }\n+\n+    bb5: {\n+        _6 = const false;                // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n+        StorageDead(_1);                 // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n+        return;                          // scope 0 at $DIR/issue-41110.rs:19:2: 19:2\n     }\n \n-    bb6: {\n+    bb6 (cleanup): {\n         goto -> bb8;                     // scope 2 at $DIR/issue-41110.rs:18:9: 18:10\n     }\n \n     bb7 (cleanup): {\n-        goto -> bb4;                     // scope 2 at $DIR/issue-41110.rs:18:9: 18:10\n+        goto -> bb8;                     // scope 2 at $DIR/issue-41110.rs:17:11: 17:12\n     }\n \n-    bb8: {\n-        StorageDead(_5);                 // scope 2 at $DIR/issue-41110.rs:18:9: 18:10\n-        _0 = const ();                   // scope 0 at $DIR/issue-41110.rs:14:15: 19:2\n-        drop(_2) -> [return: bb9, unwind: bb3]; // scope 1 at $DIR/issue-41110.rs:19:1: 19:2\n+    bb8 (cleanup): {\n+        goto -> bb9;                     // scope 1 at $DIR/issue-41110.rs:19:1: 19:2\n     }\n \n-    bb9: {\n-        StorageDead(_2);                 // scope 1 at $DIR/issue-41110.rs:19:1: 19:2\n-        goto -> bb10;                    // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n+    bb9 (cleanup): {\n+        goto -> bb14;                    // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n     }\n \n-    bb10: {\n-        _6 = const false;                // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n-        StorageDead(_1);                 // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n-        return;                          // scope 0 at $DIR/issue-41110.rs:19:2: 19:2\n+    bb10 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-41110.rs:14:1: 19:2\n     }\n \n     bb11 (cleanup): {\n         _2 = move _5;                    // scope 2 at $DIR/issue-41110.rs:18:5: 18:6\n-        goto -> bb7;                     // scope 2 at $DIR/issue-41110.rs:18:5: 18:6\n+        goto -> bb6;                     // scope 2 at $DIR/issue-41110.rs:18:5: 18:6\n     }\n \n     bb12: {\n         _2 = move _5;                    // scope 2 at $DIR/issue-41110.rs:18:5: 18:6\n-        goto -> bb6;                     // scope 2 at $DIR/issue-41110.rs:18:5: 18:6\n+        goto -> bb2;                     // scope 2 at $DIR/issue-41110.rs:18:5: 18:6\n     }\n \n     bb13 (cleanup): {\n-        drop(_1) -> bb1;                 // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n+        drop(_1) -> bb10;                // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n     }\n \n     bb14 (cleanup): {\n-        _6 = const false;                // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n-        goto -> bb13;                    // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n-    }\n-\n-    bb15 (cleanup): {\n-        switchInt(_6) -> [false: bb1, otherwise: bb14]; // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n+        switchInt(_6) -> [false: bb10, otherwise: bb13]; // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n     }\n }"}, {"sha": "db9caf843145bba9aaba0c9fe8ed59e66e2e5220", "filename": "src/test/mir-opt/issue_41697.{impl#0}-{constant#0}.SimplifyCfg-promote-consts.after.32bit.mir", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fissue_41697.%7Bimpl%230%7D-%7Bconstant%230%7D.SimplifyCfg-promote-consts.after.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fissue_41697.%7Bimpl%230%7D-%7Bconstant%230%7D.SimplifyCfg-promote-consts.after.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_41697.%7Bimpl%230%7D-%7Bconstant%230%7D.SimplifyCfg-promote-consts.after.32bit.mir?ref=33337bb855d453c0077764f6a5488b3ff109b6f5", "patch": "@@ -6,15 +6,15 @@\n \n     bb0: {\n         _1 = CheckedAdd(const 1_usize, const 1_usize); // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n-        assert(!move (_1.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const 1_usize, const 1_usize) -> [success: bb2, unwind: bb1]; // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n+        assert(!move (_1.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const 1_usize, const 1_usize) -> [success: bb1, unwind: bb2]; // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n     }\n \n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n-    }\n-\n-    bb2: {\n+    bb1: {\n         _0 = move (_1.0: usize);         // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n         return;                          // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n     }\n+\n+    bb2 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n+    }\n }"}, {"sha": "db9caf843145bba9aaba0c9fe8ed59e66e2e5220", "filename": "src/test/mir-opt/issue_41697.{impl#0}-{constant#0}.SimplifyCfg-promote-consts.after.64bit.mir", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fissue_41697.%7Bimpl%230%7D-%7Bconstant%230%7D.SimplifyCfg-promote-consts.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fissue_41697.%7Bimpl%230%7D-%7Bconstant%230%7D.SimplifyCfg-promote-consts.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_41697.%7Bimpl%230%7D-%7Bconstant%230%7D.SimplifyCfg-promote-consts.after.64bit.mir?ref=33337bb855d453c0077764f6a5488b3ff109b6f5", "patch": "@@ -6,15 +6,15 @@\n \n     bb0: {\n         _1 = CheckedAdd(const 1_usize, const 1_usize); // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n-        assert(!move (_1.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const 1_usize, const 1_usize) -> [success: bb2, unwind: bb1]; // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n+        assert(!move (_1.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const 1_usize, const 1_usize) -> [success: bb1, unwind: bb2]; // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n     }\n \n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n-    }\n-\n-    bb2: {\n+    bb1: {\n         _0 = move (_1.0: usize);         // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n         return;                          // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n     }\n+\n+    bb2 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n+    }\n }"}, {"sha": "d7b4e073cea4c5b209f2afe1527654bf483ebf79", "filename": "src/test/mir-opt/issue_41888.main.ElaborateDrops.after.mir", "status": "modified", "additions": 44, "deletions": 49, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fissue_41888.main.ElaborateDrops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fissue_41888.main.ElaborateDrops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_41888.main.ElaborateDrops.after.mir?ref=33337bb855d453c0077764f6a5488b3ff109b6f5", "patch": "@@ -26,30 +26,22 @@ fn main() -> () {\n         _8 = const false;                // scope 0 at $DIR/issue-41888.rs:7:9: 7:10\n         StorageLive(_1);                 // scope 0 at $DIR/issue-41888.rs:7:9: 7:10\n         StorageLive(_2);                 // scope 1 at $DIR/issue-41888.rs:8:8: 8:14\n-        _2 = cond() -> [return: bb2, unwind: bb3]; // scope 1 at $DIR/issue-41888.rs:8:8: 8:14\n+        _2 = cond() -> [return: bb1, unwind: bb11]; // scope 1 at $DIR/issue-41888.rs:8:8: 8:14\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41888.rs:8:8: 8:12\n                                          // + literal: Const { ty: fn() -> bool {cond}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-41888.rs:6:1: 15:2\n+    bb1: {\n+        switchInt(_2) -> [false: bb2, otherwise: bb3]; // scope 1 at $DIR/issue-41888.rs:8:5: 14:6\n     }\n \n     bb2: {\n-        switchInt(_2) -> [false: bb4, otherwise: bb5]; // scope 1 at $DIR/issue-41888.rs:8:5: 14:6\n-    }\n-\n-    bb3 (cleanup): {\n-        goto -> bb1;                     // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n-    }\n-\n-    bb4: {\n         _0 = const ();                   // scope 1 at $DIR/issue-41888.rs:8:5: 14:6\n-        goto -> bb11;                    // scope 1 at $DIR/issue-41888.rs:8:5: 14:6\n+        goto -> bb8;                     // scope 1 at $DIR/issue-41888.rs:8:5: 14:6\n     }\n \n-    bb5: {\n+    bb3: {\n         StorageLive(_3);                 // scope 1 at $DIR/issue-41888.rs:9:13: 9:20\n         StorageLive(_4);                 // scope 1 at $DIR/issue-41888.rs:9:18: 9:19\n         _4 = K;                          // scope 1 at $DIR/issue-41888.rs:9:18: 9:19\n@@ -58,39 +50,35 @@ fn main() -> () {\n         goto -> bb14;                    // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n     }\n \n-    bb6: {\n-        goto -> bb8;                     // scope 1 at $DIR/issue-41888.rs:9:19: 9:20\n-    }\n-\n-    bb7 (cleanup): {\n-        goto -> bb3;                     // scope 1 at $DIR/issue-41888.rs:9:19: 9:20\n+    bb4: {\n+        goto -> bb5;                     // scope 1 at $DIR/issue-41888.rs:9:19: 9:20\n     }\n \n-    bb8: {\n+    bb5: {\n         StorageDead(_3);                 // scope 1 at $DIR/issue-41888.rs:9:19: 9:20\n         _5 = discriminant(_1);           // scope 1 at $DIR/issue-41888.rs:10:16: 10:24\n-        switchInt(move _5) -> [0_isize: bb10, otherwise: bb9]; // scope 1 at $DIR/issue-41888.rs:10:16: 10:24\n+        switchInt(move _5) -> [0_isize: bb7, otherwise: bb6]; // scope 1 at $DIR/issue-41888.rs:10:16: 10:24\n     }\n \n-    bb9: {\n+    bb6: {\n         _0 = const ();                   // scope 1 at $DIR/issue-41888.rs:10:9: 13:10\n-        goto -> bb11;                    // scope 1 at $DIR/issue-41888.rs:10:9: 13:10\n+        goto -> bb8;                     // scope 1 at $DIR/issue-41888.rs:10:9: 13:10\n     }\n \n-    bb10: {\n+    bb7: {\n         StorageLive(_6);                 // scope 1 at $DIR/issue-41888.rs:10:21: 10:23\n         _9 = const false;                // scope 1 at $DIR/issue-41888.rs:10:21: 10:23\n         _6 = move ((_1 as F).0: K);      // scope 1 at $DIR/issue-41888.rs:10:21: 10:23\n         _0 = const ();                   // scope 2 at $DIR/issue-41888.rs:10:29: 13:10\n         StorageDead(_6);                 // scope 1 at $DIR/issue-41888.rs:13:9: 13:10\n-        goto -> bb11;                    // scope 1 at $DIR/issue-41888.rs:10:9: 13:10\n+        goto -> bb8;                     // scope 1 at $DIR/issue-41888.rs:10:9: 13:10\n     }\n \n-    bb11: {\n-        goto -> bb21;                    // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+    bb8: {\n+        goto -> bb20;                    // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n-    bb12: {\n+    bb9: {\n         _7 = const false;                // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n         _8 = const false;                // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n         _9 = const false;                // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n@@ -99,59 +87,66 @@ fn main() -> () {\n         return;                          // scope 0 at $DIR/issue-41888.rs:15:2: 15:2\n     }\n \n+    bb10 (cleanup): {\n+        goto -> bb11;                    // scope 1 at $DIR/issue-41888.rs:9:19: 9:20\n+    }\n+\n+    bb11 (cleanup): {\n+        goto -> bb12;                    // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+    }\n+\n+    bb12 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-41888.rs:6:1: 15:2\n+    }\n+\n     bb13 (cleanup): {\n         _7 = const true;                 // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n         _8 = const true;                 // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n         _9 = const true;                 // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n         _1 = move _3;                    // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n-        goto -> bb7;                     // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n+        goto -> bb10;                    // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n     }\n \n     bb14: {\n         _7 = const true;                 // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n         _8 = const true;                 // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n         _9 = const true;                 // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n         _1 = move _3;                    // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n-        goto -> bb6;                     // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n+        goto -> bb4;                     // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n     }\n \n     bb15: {\n         _7 = const false;                // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n-        goto -> bb12;                    // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+        goto -> bb9;                     // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n     bb16 (cleanup): {\n-        _7 = const false;                // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n-        goto -> bb1;                     // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n-    }\n-\n-    bb17 (cleanup): {\n-        goto -> bb16;                    // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+        goto -> bb12;                    // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n-    bb18: {\n-        drop(_1) -> [return: bb15, unwind: bb16]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+    bb17: {\n+        drop(_1) -> [return: bb15, unwind: bb12]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n-    bb19 (cleanup): {\n-        drop(_1) -> bb16;                // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+    bb18 (cleanup): {\n+        drop(_1) -> bb12;                // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n-    bb20: {\n+    bb19: {\n         _10 = discriminant(_1);          // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n-        switchInt(move _10) -> [0_isize: bb15, otherwise: bb18]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+        switchInt(move _10) -> [0_isize: bb15, otherwise: bb17]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n-    bb21: {\n-        switchInt(_7) -> [false: bb15, otherwise: bb20]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+    bb20: {\n+        switchInt(_7) -> [false: bb15, otherwise: bb19]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n-    bb22 (cleanup): {\n+    bb21 (cleanup): {\n         _11 = discriminant(_1);          // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n-        switchInt(move _11) -> [0_isize: bb17, otherwise: bb19]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+        switchInt(move _11) -> [0_isize: bb16, otherwise: bb18]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n-    bb23 (cleanup): {\n-        switchInt(_7) -> [false: bb16, otherwise: bb22]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+    bb22 (cleanup): {\n+        switchInt(_7) -> [false: bb12, otherwise: bb21]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n }"}, {"sha": "79f5495c78828c0f359e4a1b16d0f04000b3fc57", "filename": "src/test/mir-opt/issue_49232.main.mir_map.0.mir", "status": "modified", "additions": 21, "deletions": 33, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fissue_49232.main.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fissue_49232.main.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_49232.main.mir_map.0.mir?ref=33337bb855d453c0077764f6a5488b3ff109b6f5", "patch": "@@ -17,78 +17,66 @@ fn main() -> () {\n     }\n \n     bb1: {\n-        falseUnwind -> [real: bb3, cleanup: bb4]; // scope 0 at $DIR/issue-49232.rs:6:5: 14:6\n+        falseUnwind -> [real: bb2, cleanup: bb11]; // scope 0 at $DIR/issue-49232.rs:6:5: 14:6\n     }\n \n     bb2: {\n-        goto -> bb14;                    // scope 0 at $DIR/issue-49232.rs:15:2: 15:2\n-    }\n-\n-    bb3: {\n         StorageLive(_2);                 // scope 0 at $DIR/issue-49232.rs:7:13: 7:19\n         StorageLive(_3);                 // scope 0 at $DIR/issue-49232.rs:8:19: 8:23\n         _3 = const true;                 // scope 0 at $DIR/issue-49232.rs:8:19: 8:23\n         FakeRead(ForMatchedPlace, _3);   // scope 0 at $DIR/issue-49232.rs:8:19: 8:23\n-        switchInt(_3) -> [false: bb5, otherwise: bb6]; // scope 0 at $DIR/issue-49232.rs:9:17: 9:22\n-    }\n-\n-    bb4 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-49232.rs:5:1: 15:2\n+        switchInt(_3) -> [false: bb3, otherwise: bb4]; // scope 0 at $DIR/issue-49232.rs:9:17: 9:22\n     }\n \n-    bb5: {\n-        falseEdge -> [real: bb7, imaginary: bb6]; // scope 0 at $DIR/issue-49232.rs:9:17: 9:22\n+    bb3: {\n+        falseEdge -> [real: bb5, imaginary: bb4]; // scope 0 at $DIR/issue-49232.rs:9:17: 9:22\n     }\n \n-    bb6: {\n+    bb4: {\n         _0 = const ();                   // scope 0 at $DIR/issue-49232.rs:10:25: 10:30\n-        goto -> bb8;                     // scope 0 at $DIR/issue-49232.rs:10:25: 10:30\n+        goto -> bb10;                    // scope 0 at $DIR/issue-49232.rs:10:25: 10:30\n     }\n \n-    bb7: {\n+    bb5: {\n         _2 = const 4_i32;                // scope 0 at $DIR/issue-49232.rs:9:26: 9:27\n-        goto -> bb12;                    // scope 0 at $DIR/issue-49232.rs:8:13: 11:14\n-    }\n-\n-    bb8: {\n-        StorageDead(_3);                 // scope 0 at $DIR/issue-49232.rs:12:10: 12:11\n-        goto -> bb9;                     // scope 0 at $DIR/issue-49232.rs:10:25: 10:30\n+        goto -> bb8;                     // scope 0 at $DIR/issue-49232.rs:8:13: 11:14\n     }\n \n-    bb9: {\n-        StorageDead(_2);                 // scope 0 at $DIR/issue-49232.rs:14:5: 14:6\n-        goto -> bb2;                     // scope 0 at $DIR/issue-49232.rs:10:25: 10:30\n-    }\n-\n-    bb10: {\n+    bb6: {\n         unreachable;                     // scope 0 at $DIR/issue-49232.rs:10:25: 10:30\n     }\n \n-    bb11: {\n-        goto -> bb12;                    // scope 0 at $DIR/issue-49232.rs:8:13: 11:14\n+    bb7: {\n+        goto -> bb8;                     // scope 0 at $DIR/issue-49232.rs:8:13: 11:14\n     }\n \n-    bb12: {\n+    bb8: {\n         FakeRead(ForLet, _2);            // scope 0 at $DIR/issue-49232.rs:7:13: 7:19\n         StorageDead(_3);                 // scope 0 at $DIR/issue-49232.rs:12:10: 12:11\n         StorageLive(_5);                 // scope 1 at $DIR/issue-49232.rs:13:9: 13:22\n         StorageLive(_6);                 // scope 1 at $DIR/issue-49232.rs:13:14: 13:21\n         _6 = &_2;                        // scope 1 at $DIR/issue-49232.rs:13:14: 13:21\n-        _5 = std::mem::drop::<&i32>(move _6) -> [return: bb13, unwind: bb4]; // scope 1 at $DIR/issue-49232.rs:13:9: 13:22\n+        _5 = std::mem::drop::<&i32>(move _6) -> [return: bb9, unwind: bb11]; // scope 1 at $DIR/issue-49232.rs:13:9: 13:22\n                                          // mir::Constant\n                                          // + span: $DIR/issue-49232.rs:13:9: 13:13\n                                          // + literal: Const { ty: fn(&i32) {std::mem::drop::<&i32>}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb13: {\n+    bb9: {\n         StorageDead(_6);                 // scope 1 at $DIR/issue-49232.rs:13:21: 13:22\n         StorageDead(_5);                 // scope 1 at $DIR/issue-49232.rs:13:22: 13:23\n         _1 = const ();                   // scope 0 at $DIR/issue-49232.rs:6:10: 14:6\n         StorageDead(_2);                 // scope 0 at $DIR/issue-49232.rs:14:5: 14:6\n         goto -> bb1;                     // scope 0 at $DIR/issue-49232.rs:6:5: 14:6\n     }\n \n-    bb14: {\n+    bb10: {\n+        StorageDead(_3);                 // scope 0 at $DIR/issue-49232.rs:12:10: 12:11\n+        StorageDead(_2);                 // scope 0 at $DIR/issue-49232.rs:14:5: 14:6\n         return;                          // scope 0 at $DIR/issue-49232.rs:15:2: 15:2\n     }\n+\n+    bb11 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-49232.rs:5:1: 15:2\n+    }\n }"}, {"sha": "62bf97a772ead783b641339a0236865277ddb875", "filename": "src/test/mir-opt/issue_62289.test.ElaborateDrops.before.mir", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fissue_62289.test.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fissue_62289.test.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_62289.test.ElaborateDrops.before.mir?ref=33337bb855d453c0077764f6a5488b3ff109b6f5", "patch": "@@ -30,89 +30,89 @@ fn test() -> Option<Box<u32>> {\n         StorageLive(_3);                 // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n         StorageLive(_4);                 // scope 0 at $DIR/issue-62289.rs:9:15: 9:19\n         _4 = Option::<u32>::None;        // scope 0 at $DIR/issue-62289.rs:9:15: 9:19\n-        _3 = <Option<u32> as Try>::into_result(move _4) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n+        _3 = <Option<u32> as Try>::into_result(move _4) -> [return: bb1, unwind: bb12]; // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n                                          // mir::Constant\n                                          // + span: $DIR/issue-62289.rs:9:15: 9:20\n                                          // + literal: Const { ty: fn(std::option::Option<u32>) -> std::result::Result<<std::option::Option<u32> as std::ops::Try>::Ok, <std::option::Option<u32> as std::ops::Try>::Error> {<std::option::Option<u32> as std::ops::Try>::into_result}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-62289.rs:8:1: 10:2\n-    }\n-\n-    bb2: {\n+    bb1: {\n         StorageDead(_4);                 // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n         _5 = discriminant(_3);           // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n-        switchInt(move _5) -> [0_isize: bb4, 1_isize: bb6, otherwise: bb5]; // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n-    }\n-\n-    bb3 (cleanup): {\n-        drop(_2) -> bb1;                 // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n+        switchInt(move _5) -> [0_isize: bb2, 1_isize: bb4, otherwise: bb3]; // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n     }\n \n-    bb4: {\n+    bb2: {\n         StorageLive(_10);                // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n         _10 = ((_3 as Ok).0: u32);       // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n         (*_2) = _10;                     // scope 4 at $DIR/issue-62289.rs:9:15: 9:20\n         StorageDead(_10);                // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n         _1 = move _2;                    // scope 0 at $DIR/issue-62289.rs:9:10: 9:21\n-        drop(_2) -> [return: bb12, unwind: bb11]; // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n+        drop(_2) -> [return: bb7, unwind: bb11]; // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n     }\n \n-    bb5: {\n+    bb3: {\n         unreachable;                     // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n     }\n \n-    bb6: {\n+    bb4: {\n         StorageLive(_6);                 // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n         _6 = ((_3 as Err).0: std::option::NoneError); // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n         StorageLive(_8);                 // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n         StorageLive(_9);                 // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n         _9 = _6;                         // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n-        _8 = <NoneError as From<NoneError>>::from(move _9) -> [return: bb8, unwind: bb3]; // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n+        _8 = <NoneError as From<NoneError>>::from(move _9) -> [return: bb5, unwind: bb12]; // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n                                          // mir::Constant\n                                          // + span: $DIR/issue-62289.rs:9:19: 9:20\n                                          // + literal: Const { ty: fn(std::option::NoneError) -> std::option::NoneError {<std::option::NoneError as std::convert::From<std::option::NoneError>>::from}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb7: {\n-        return;                          // scope 0 at $DIR/issue-62289.rs:10:2: 10:2\n-    }\n-\n-    bb8: {\n+    bb5: {\n         StorageDead(_9);                 // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n-        _0 = <Option<Box<u32>> as Try>::from_error(move _8) -> [return: bb9, unwind: bb3]; // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n+        _0 = <Option<Box<u32>> as Try>::from_error(move _8) -> [return: bb6, unwind: bb12]; // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n                                          // mir::Constant\n                                          // + span: $DIR/issue-62289.rs:9:15: 9:20\n                                          // + literal: Const { ty: fn(<std::option::Option<std::boxed::Box<u32>> as std::ops::Try>::Error) -> std::option::Option<std::boxed::Box<u32>> {<std::option::Option<std::boxed::Box<u32>> as std::ops::Try>::from_error}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb9: {\n+    bb6: {\n         StorageDead(_8);                 // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n         StorageDead(_6);                 // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n-        drop(_2) -> bb10;                // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n+        drop(_2) -> bb9;                 // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n     }\n \n-    bb10: {\n+    bb7: {\n         StorageDead(_2);                 // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n+        _0 = Option::<Box<u32>>::Some(move _1); // scope 0 at $DIR/issue-62289.rs:9:5: 9:22\n+        drop(_1) -> bb8;                 // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n+    }\n+\n+    bb8: {\n         StorageDead(_1);                 // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n         StorageDead(_3);                 // scope 0 at $DIR/issue-62289.rs:10:1: 10:2\n-        goto -> bb7;                     // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n+        goto -> bb10;                    // scope 0 at $DIR/issue-62289.rs:10:2: 10:2\n     }\n \n-    bb11 (cleanup): {\n-        drop(_1) -> bb1;                 // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n+    bb9: {\n+        StorageDead(_2);                 // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n+        StorageDead(_1);                 // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n+        StorageDead(_3);                 // scope 0 at $DIR/issue-62289.rs:10:1: 10:2\n+        goto -> bb10;                    // scope 0 at $DIR/issue-62289.rs:10:2: 10:2\n     }\n \n-    bb12: {\n-        StorageDead(_2);                 // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n-        _0 = Option::<Box<u32>>::Some(move _1); // scope 0 at $DIR/issue-62289.rs:9:5: 9:22\n+    bb10: {\n+        return;                          // scope 0 at $DIR/issue-62289.rs:10:2: 10:2\n+    }\n+\n+    bb11 (cleanup): {\n         drop(_1) -> bb13;                // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n     }\n \n-    bb13: {\n-        StorageDead(_1);                 // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n-        StorageDead(_3);                 // scope 0 at $DIR/issue-62289.rs:10:1: 10:2\n-        goto -> bb7;                     // scope 0 at $DIR/issue-62289.rs:10:2: 10:2\n+    bb12 (cleanup): {\n+        drop(_2) -> bb13;                // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n+    }\n+\n+    bb13 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-62289.rs:8:1: 10:2\n     }\n }"}, {"sha": "e19cd745279854eba1da447ee9fb628d9c82a715", "filename": "src/test/mir-opt/issue_72181.bar.mir_map.0.32bit.mir", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fissue_72181.bar.mir_map.0.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fissue_72181.bar.mir_map.0.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181.bar.mir_map.0.32bit.mir?ref=33337bb855d453c0077764f6a5488b3ff109b6f5", "patch": "@@ -12,14 +12,6 @@ fn bar(_1: [(Never, u32); 1]) -> u32 {\n         _2 = (_1[0 of 1].1: u32);        // scope 0 at $DIR/issue-72181.rs:19:13: 19:14\n         _0 = _2;                         // scope 1 at $DIR/issue-72181.rs:19:46: 19:47\n         StorageDead(_2);                 // scope 0 at $DIR/issue-72181.rs:19:48: 19:49\n-        goto -> bb2;                     // scope 0 at $DIR/issue-72181.rs:19:49: 19:49\n-    }\n-\n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-72181.rs:19:1: 19:49\n-    }\n-\n-    bb2: {\n         return;                          // scope 0 at $DIR/issue-72181.rs:19:49: 19:49\n     }\n }"}, {"sha": "e19cd745279854eba1da447ee9fb628d9c82a715", "filename": "src/test/mir-opt/issue_72181.bar.mir_map.0.64bit.mir", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fissue_72181.bar.mir_map.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fissue_72181.bar.mir_map.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181.bar.mir_map.0.64bit.mir?ref=33337bb855d453c0077764f6a5488b3ff109b6f5", "patch": "@@ -12,14 +12,6 @@ fn bar(_1: [(Never, u32); 1]) -> u32 {\n         _2 = (_1[0 of 1].1: u32);        // scope 0 at $DIR/issue-72181.rs:19:13: 19:14\n         _0 = _2;                         // scope 1 at $DIR/issue-72181.rs:19:46: 19:47\n         StorageDead(_2);                 // scope 0 at $DIR/issue-72181.rs:19:48: 19:49\n-        goto -> bb2;                     // scope 0 at $DIR/issue-72181.rs:19:49: 19:49\n-    }\n-\n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-72181.rs:19:1: 19:49\n-    }\n-\n-    bb2: {\n         return;                          // scope 0 at $DIR/issue-72181.rs:19:49: 19:49\n     }\n }"}, {"sha": "c9a2b9c0d83a376064d817dc23c6e50d8663f2a2", "filename": "src/test/mir-opt/issue_72181.foo.mir_map.0.32bit.mir", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fissue_72181.foo.mir_map.0.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fissue_72181.foo.mir_map.0.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181.foo.mir_map.0.32bit.mir?ref=33337bb855d453c0077764f6a5488b3ff109b6f5", "patch": "@@ -12,20 +12,16 @@ fn foo(_1: [(Never, u32); 1]) -> u32 {\n         _2 = const 0_usize;              // scope 0 at $DIR/issue-72181.rs:16:43: 16:44\n         _3 = Len(_1);                    // scope 0 at $DIR/issue-72181.rs:16:40: 16:45\n         _4 = Lt(_2, _3);                 // scope 0 at $DIR/issue-72181.rs:16:40: 16:45\n-        assert(move _4, \"index out of bounds: the length is {} but the index is {}\", move _3, _2) -> [success: bb2, unwind: bb1]; // scope 0 at $DIR/issue-72181.rs:16:40: 16:45\n+        assert(move _4, \"index out of bounds: the length is {} but the index is {}\", move _3, _2) -> [success: bb1, unwind: bb2]; // scope 0 at $DIR/issue-72181.rs:16:40: 16:45\n     }\n \n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-72181.rs:16:1: 16:49\n-    }\n-\n-    bb2: {\n+    bb1: {\n         _0 = (_1[_2].1: u32);            // scope 0 at $DIR/issue-72181.rs:16:40: 16:47\n         StorageDead(_2);                 // scope 0 at $DIR/issue-72181.rs:16:48: 16:49\n-        goto -> bb3;                     // scope 0 at $DIR/issue-72181.rs:16:49: 16:49\n+        return;                          // scope 0 at $DIR/issue-72181.rs:16:49: 16:49\n     }\n \n-    bb3: {\n-        return;                          // scope 0 at $DIR/issue-72181.rs:16:49: 16:49\n+    bb2 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-72181.rs:16:1: 16:49\n     }\n }"}, {"sha": "c9a2b9c0d83a376064d817dc23c6e50d8663f2a2", "filename": "src/test/mir-opt/issue_72181.foo.mir_map.0.64bit.mir", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fissue_72181.foo.mir_map.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fissue_72181.foo.mir_map.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181.foo.mir_map.0.64bit.mir?ref=33337bb855d453c0077764f6a5488b3ff109b6f5", "patch": "@@ -12,20 +12,16 @@ fn foo(_1: [(Never, u32); 1]) -> u32 {\n         _2 = const 0_usize;              // scope 0 at $DIR/issue-72181.rs:16:43: 16:44\n         _3 = Len(_1);                    // scope 0 at $DIR/issue-72181.rs:16:40: 16:45\n         _4 = Lt(_2, _3);                 // scope 0 at $DIR/issue-72181.rs:16:40: 16:45\n-        assert(move _4, \"index out of bounds: the length is {} but the index is {}\", move _3, _2) -> [success: bb2, unwind: bb1]; // scope 0 at $DIR/issue-72181.rs:16:40: 16:45\n+        assert(move _4, \"index out of bounds: the length is {} but the index is {}\", move _3, _2) -> [success: bb1, unwind: bb2]; // scope 0 at $DIR/issue-72181.rs:16:40: 16:45\n     }\n \n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-72181.rs:16:1: 16:49\n-    }\n-\n-    bb2: {\n+    bb1: {\n         _0 = (_1[_2].1: u32);            // scope 0 at $DIR/issue-72181.rs:16:40: 16:47\n         StorageDead(_2);                 // scope 0 at $DIR/issue-72181.rs:16:48: 16:49\n-        goto -> bb3;                     // scope 0 at $DIR/issue-72181.rs:16:49: 16:49\n+        return;                          // scope 0 at $DIR/issue-72181.rs:16:49: 16:49\n     }\n \n-    bb3: {\n-        return;                          // scope 0 at $DIR/issue-72181.rs:16:49: 16:49\n+    bb2 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-72181.rs:16:1: 16:49\n     }\n }"}, {"sha": "cf66a501e35eef4a2d0d05de72da1ec5f9da5bf4", "filename": "src/test/mir-opt/issue_72181.main.mir_map.0.32bit.mir", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.32bit.mir?ref=33337bb855d453c0077764f6a5488b3ff109b6f5", "patch": "@@ -22,17 +22,13 @@ fn main() -> () {\n \n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/issue-72181.rs:24:13: 24:34\n-        _1 = std::mem::size_of::<Foo>() -> [return: bb2, unwind: bb1]; // scope 0 at $DIR/issue-72181.rs:24:13: 24:34\n+        _1 = std::mem::size_of::<Foo>() -> [return: bb1, unwind: bb3]; // scope 0 at $DIR/issue-72181.rs:24:13: 24:34\n                                          // mir::Constant\n                                          // + span: $DIR/issue-72181.rs:24:13: 24:32\n                                          // + literal: Const { ty: fn() -> usize {std::mem::size_of::<Foo>}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-72181.rs:23:1: 28:2\n-    }\n-\n-    bb2: {\n+    bb1: {\n         StorageDead(_1);                 // scope 0 at $DIR/issue-72181.rs:24:34: 24:35\n         StorageLive(_2);                 // scope 1 at $DIR/issue-72181.rs:26:9: 26:10\n         StorageLive(_3);                 // scope 1 at $DIR/issue-72181.rs:26:14: 26:27\n@@ -48,19 +44,19 @@ fn main() -> () {\n         _6 = const 0_usize;              // scope 4 at $DIR/issue-72181.rs:27:24: 27:25\n         _7 = Len(_2);                    // scope 4 at $DIR/issue-72181.rs:27:22: 27:26\n         _8 = Lt(_6, _7);                 // scope 4 at $DIR/issue-72181.rs:27:22: 27:26\n-        assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> [success: bb3, unwind: bb1]; // scope 4 at $DIR/issue-72181.rs:27:22: 27:26\n+        assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> [success: bb2, unwind: bb3]; // scope 4 at $DIR/issue-72181.rs:27:22: 27:26\n     }\n \n-    bb3: {\n+    bb2: {\n         _5 = (_2[_6].0: u64);            // scope 4 at $DIR/issue-72181.rs:27:22: 27:28\n         StorageDead(_6);                 // scope 2 at $DIR/issue-72181.rs:27:30: 27:31\n         StorageDead(_5);                 // scope 2 at $DIR/issue-72181.rs:27:30: 27:31\n         _0 = const ();                   // scope 0 at $DIR/issue-72181.rs:23:11: 28:2\n         StorageDead(_2);                 // scope 1 at $DIR/issue-72181.rs:28:1: 28:2\n-        goto -> bb4;                     // scope 0 at $DIR/issue-72181.rs:28:2: 28:2\n+        return;                          // scope 0 at $DIR/issue-72181.rs:28:2: 28:2\n     }\n \n-    bb4: {\n-        return;                          // scope 0 at $DIR/issue-72181.rs:28:2: 28:2\n+    bb3 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-72181.rs:23:1: 28:2\n     }\n }"}, {"sha": "cf66a501e35eef4a2d0d05de72da1ec5f9da5bf4", "filename": "src/test/mir-opt/issue_72181.main.mir_map.0.64bit.mir", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.64bit.mir?ref=33337bb855d453c0077764f6a5488b3ff109b6f5", "patch": "@@ -22,17 +22,13 @@ fn main() -> () {\n \n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/issue-72181.rs:24:13: 24:34\n-        _1 = std::mem::size_of::<Foo>() -> [return: bb2, unwind: bb1]; // scope 0 at $DIR/issue-72181.rs:24:13: 24:34\n+        _1 = std::mem::size_of::<Foo>() -> [return: bb1, unwind: bb3]; // scope 0 at $DIR/issue-72181.rs:24:13: 24:34\n                                          // mir::Constant\n                                          // + span: $DIR/issue-72181.rs:24:13: 24:32\n                                          // + literal: Const { ty: fn() -> usize {std::mem::size_of::<Foo>}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-72181.rs:23:1: 28:2\n-    }\n-\n-    bb2: {\n+    bb1: {\n         StorageDead(_1);                 // scope 0 at $DIR/issue-72181.rs:24:34: 24:35\n         StorageLive(_2);                 // scope 1 at $DIR/issue-72181.rs:26:9: 26:10\n         StorageLive(_3);                 // scope 1 at $DIR/issue-72181.rs:26:14: 26:27\n@@ -48,19 +44,19 @@ fn main() -> () {\n         _6 = const 0_usize;              // scope 4 at $DIR/issue-72181.rs:27:24: 27:25\n         _7 = Len(_2);                    // scope 4 at $DIR/issue-72181.rs:27:22: 27:26\n         _8 = Lt(_6, _7);                 // scope 4 at $DIR/issue-72181.rs:27:22: 27:26\n-        assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> [success: bb3, unwind: bb1]; // scope 4 at $DIR/issue-72181.rs:27:22: 27:26\n+        assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> [success: bb2, unwind: bb3]; // scope 4 at $DIR/issue-72181.rs:27:22: 27:26\n     }\n \n-    bb3: {\n+    bb2: {\n         _5 = (_2[_6].0: u64);            // scope 4 at $DIR/issue-72181.rs:27:22: 27:28\n         StorageDead(_6);                 // scope 2 at $DIR/issue-72181.rs:27:30: 27:31\n         StorageDead(_5);                 // scope 2 at $DIR/issue-72181.rs:27:30: 27:31\n         _0 = const ();                   // scope 0 at $DIR/issue-72181.rs:23:11: 28:2\n         StorageDead(_2);                 // scope 1 at $DIR/issue-72181.rs:28:1: 28:2\n-        goto -> bb4;                     // scope 0 at $DIR/issue-72181.rs:28:2: 28:2\n+        return;                          // scope 0 at $DIR/issue-72181.rs:28:2: 28:2\n     }\n \n-    bb4: {\n-        return;                          // scope 0 at $DIR/issue-72181.rs:28:2: 28:2\n+    bb3 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-72181.rs:23:1: 28:2\n     }\n }"}, {"sha": "7571d7bb94f92f30d8f9f898306178ce674b0e37", "filename": "src/test/mir-opt/issue_72181_1.f.mir_map.0.mir", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fissue_72181_1.f.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fissue_72181_1.f.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181_1.f.mir_map.0.mir?ref=33337bb855d453c0077764f6a5488b3ff109b6f5", "patch": "@@ -13,25 +13,17 @@ fn f(_1: Void) -> ! {\n         unreachable;                     // scope 0 at $DIR/issue-72181-1.rs:11:11: 11:12\n     }\n \n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-72181-1.rs:10:1: 12:2\n-    }\n-\n-    bb2: {\n+    bb1: {\n         unreachable;                     // scope 0 at $DIR/issue-72181-1.rs:11:5: 11:15\n     }\n \n-    bb3: {\n+    bb2: {\n         StorageDead(_3);                 // scope 0 at $DIR/issue-72181-1.rs:11:14: 11:15\n         unreachable;                     // scope 0 at $DIR/issue-72181-1.rs:10:20: 12:2\n     }\n \n-    bb4: {\n+    bb3: {\n         StorageDead(_2);                 // scope 0 at $DIR/issue-72181-1.rs:12:1: 12:2\n-        goto -> bb5;                     // scope 0 at $DIR/issue-72181-1.rs:12:2: 12:2\n-    }\n-\n-    bb5: {\n         return;                          // scope 0 at $DIR/issue-72181-1.rs:12:2: 12:2\n     }\n }"}, {"sha": "1fd91c2056bf854660cf3145a92292aa2e280cc4", "filename": "src/test/mir-opt/issue_72181_1.main.mir_map.0.mir", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fissue_72181_1.main.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fissue_72181_1.main.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181_1.main.mir_map.0.mir?ref=33337bb855d453c0077764f6a5488b3ff109b6f5", "patch": "@@ -21,41 +21,37 @@ fn main() -> () {\n         StorageLive(_2);                 // scope 0 at $DIR/issue-72181-1.rs:16:9: 16:10\n         StorageLive(_3);                 // scope 2 at $DIR/issue-72181-1.rs:17:41: 17:43\n         _3 = ();                         // scope 2 at $DIR/issue-72181-1.rs:17:41: 17:43\n-        _2 = transmute::<(), Void>(move _3) -> [return: bb2, unwind: bb1]; // scope 2 at $DIR/issue-72181-1.rs:17:9: 17:44\n+        _2 = transmute::<(), Void>(move _3) -> [return: bb1, unwind: bb4]; // scope 2 at $DIR/issue-72181-1.rs:17:9: 17:44\n                                          // mir::Constant\n                                          // + span: $DIR/issue-72181-1.rs:17:9: 17:40\n                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(()) -> Void {std::intrinsics::transmute::<(), Void>}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-72181-1.rs:15:1: 21:2\n-    }\n-\n-    bb2: {\n+    bb1: {\n         StorageDead(_3);                 // scope 2 at $DIR/issue-72181-1.rs:17:43: 17:44\n         FakeRead(ForLet, _2);            // scope 0 at $DIR/issue-72181-1.rs:16:9: 16:10\n         AscribeUserType(_2, o, UserTypeProjection { base: UserType(1), projs: [] }); // scope 0 at $DIR/issue-72181-1.rs:16:12: 16:16\n         StorageLive(_4);                 // scope 1 at $DIR/issue-72181-1.rs:20:5: 20:9\n         StorageLive(_5);                 // scope 1 at $DIR/issue-72181-1.rs:20:7: 20:8\n         _5 = move _2;                    // scope 1 at $DIR/issue-72181-1.rs:20:7: 20:8\n-        f(move _5) -> bb1;               // scope 1 at $DIR/issue-72181-1.rs:20:5: 20:9\n+        f(move _5) -> bb4;               // scope 1 at $DIR/issue-72181-1.rs:20:5: 20:9\n                                          // mir::Constant\n                                          // + span: $DIR/issue-72181-1.rs:20:5: 20:6\n                                          // + literal: Const { ty: fn(Void) -> ! {f}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb3: {\n+    bb2: {\n         StorageDead(_5);                 // scope 1 at $DIR/issue-72181-1.rs:20:8: 20:9\n         StorageDead(_4);                 // scope 1 at $DIR/issue-72181-1.rs:20:9: 20:10\n         StorageDead(_2);                 // scope 0 at $DIR/issue-72181-1.rs:21:1: 21:2\n         unreachable;                     // scope 0 at $DIR/issue-72181-1.rs:15:11: 21:2\n     }\n \n-    bb4: {\n-        goto -> bb5;                     // scope 0 at $DIR/issue-72181-1.rs:21:2: 21:2\n+    bb3: {\n+        return;                          // scope 0 at $DIR/issue-72181-1.rs:21:2: 21:2\n     }\n \n-    bb5: {\n-        return;                          // scope 0 at $DIR/issue-72181-1.rs:21:2: 21:2\n+    bb4 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-72181-1.rs:15:1: 21:2\n     }\n }"}, {"sha": "9039735f6ba382b86265e6825c686c574e181487", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.32bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff?ref=33337bb855d453c0077764f6a5488b3ff109b6f5", "patch": "@@ -106,7 +106,7 @@\n           _0 = const ();                   // scope 0 at $DIR/issue-73223.rs:4:17: 4:23\n           StorageDead(_2);                 // scope 0 at $DIR/issue-73223.rs:5:6: 5:7\n           StorageDead(_1);                 // scope 0 at $DIR/issue-73223.rs:9:1: 9:2\n-          return;                          // scope 0 at $DIR/issue-73223.rs:4:17: 4:23\n+          return;                          // scope 0 at $DIR/issue-73223.rs:9:2: 9:2\n       }\n   \n       bb2: {"}, {"sha": "9039735f6ba382b86265e6825c686c574e181487", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.64bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff?ref=33337bb855d453c0077764f6a5488b3ff109b6f5", "patch": "@@ -106,7 +106,7 @@\n           _0 = const ();                   // scope 0 at $DIR/issue-73223.rs:4:17: 4:23\n           StorageDead(_2);                 // scope 0 at $DIR/issue-73223.rs:5:6: 5:7\n           StorageDead(_1);                 // scope 0 at $DIR/issue-73223.rs:9:1: 9:2\n-          return;                          // scope 0 at $DIR/issue-73223.rs:4:17: 4:23\n+          return;                          // scope 0 at $DIR/issue-73223.rs:9:2: 9:2\n       }\n   \n       bb2: {"}, {"sha": "05def56e65eb5bf078e358b81c2ab19c34b778a7", "filename": "src/test/mir-opt/loop_test.main.SimplifyCfg-promote-consts.after.mir", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Floop_test.main.SimplifyCfg-promote-consts.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Floop_test.main.SimplifyCfg-promote-consts.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Floop_test.main.SimplifyCfg-promote-consts.after.mir?ref=33337bb855d453c0077764f6a5488b3ff109b6f5", "patch": "@@ -17,41 +17,41 @@ fn main() -> () {\n         StorageLive(_2);                 // scope 0 at $DIR/loop_test.rs:10:8: 10:12\n         _2 = const true;                 // scope 0 at $DIR/loop_test.rs:10:8: 10:12\n         FakeRead(ForMatchedPlace, _2);   // scope 0 at $DIR/loop_test.rs:10:8: 10:12\n-        switchInt(_2) -> [false: bb3, otherwise: bb2]; // scope 0 at $DIR/loop_test.rs:10:5: 12:6\n+        switchInt(_2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/loop_test.rs:10:5: 12:6\n     }\n \n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/loop_test.rs:6:1: 17:2\n+    bb1: {\n+        falseEdge -> [real: bb3, imaginary: bb2]; // scope 0 at $DIR/loop_test.rs:10:5: 12:6\n     }\n \n     bb2: {\n-        falseEdge -> [real: bb4, imaginary: bb3]; // scope 0 at $DIR/loop_test.rs:10:5: 12:6\n-    }\n-\n-    bb3: {\n         _1 = const ();                   // scope 0 at $DIR/loop_test.rs:10:5: 12:6\n         StorageDead(_2);                 // scope 0 at $DIR/loop_test.rs:12:5: 12:6\n         StorageDead(_1);                 // scope 0 at $DIR/loop_test.rs:12:5: 12:6\n         StorageLive(_4);                 // scope 0 at $DIR/loop_test.rs:13:5: 16:6\n-        goto -> bb5;                     // scope 0 at $DIR/loop_test.rs:13:5: 16:6\n+        goto -> bb4;                     // scope 0 at $DIR/loop_test.rs:13:5: 16:6\n     }\n \n-    bb4: {\n+    bb3: {\n         _0 = const ();                   // scope 0 at $DIR/loop_test.rs:11:9: 11:15\n         StorageDead(_2);                 // scope 0 at $DIR/loop_test.rs:12:5: 12:6\n         StorageDead(_1);                 // scope 0 at $DIR/loop_test.rs:12:5: 12:6\n         return;                          // scope 0 at $DIR/loop_test.rs:17:2: 17:2\n     }\n \n-    bb5: {\n-        falseUnwind -> [real: bb6, cleanup: bb1]; // scope 0 at $DIR/loop_test.rs:13:5: 16:6\n+    bb4: {\n+        falseUnwind -> [real: bb5, cleanup: bb6]; // scope 0 at $DIR/loop_test.rs:13:5: 16:6\n     }\n \n-    bb6: {\n+    bb5: {\n         StorageLive(_6);                 // scope 0 at $DIR/loop_test.rs:14:13: 14:14\n         _6 = const 1_i32;                // scope 0 at $DIR/loop_test.rs:14:17: 14:18\n         FakeRead(ForLet, _6);            // scope 0 at $DIR/loop_test.rs:14:13: 14:14\n         StorageDead(_6);                 // scope 0 at $DIR/loop_test.rs:16:5: 16:6\n-        goto -> bb5;                     // scope 0 at $DIR/loop_test.rs:15:9: 15:17\n+        goto -> bb4;                     // scope 0 at $DIR/loop_test.rs:1:1: 1:1\n+    }\n+\n+    bb6 (cleanup): {\n+        resume;                          // scope 0 at $DIR/loop_test.rs:6:1: 17:2\n     }\n }"}, {"sha": "4e7cd77035eec70d7d0ec90be3e19d791e07eaa7", "filename": "src/test/mir-opt/match_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff", "status": "modified", "additions": 112, "deletions": 121, "changes": 233, "blob_url": "https://github.com/rust-lang/rust/blob/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fmatch_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff", "raw_url": "https://github.com/rust-lang/rust/raw/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fmatch_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff?ref=33337bb855d453c0077764f6a5488b3ff109b6f5", "patch": "@@ -32,54 +32,50 @@\n   \n       bb0: {\n -         FakeRead(ForMatchedPlace, _2);   // scope 0 at $DIR/match-arm-scopes.rs:14:11: 14:16\n--         switchInt((_2.0: bool)) -> [false: bb2, otherwise: bb3]; // scope 0 at $DIR/match-arm-scopes.rs:15:10: 15:15\n-+         switchInt((_2.0: bool)) -> [false: bb6, otherwise: bb2]; // scope 0 at $DIR/match-arm-scopes.rs:15:10: 15:15\n+-         switchInt((_2.0: bool)) -> [false: bb1, otherwise: bb2]; // scope 0 at $DIR/match-arm-scopes.rs:15:10: 15:15\n++         switchInt((_2.0: bool)) -> [false: bb5, otherwise: bb1]; // scope 0 at $DIR/match-arm-scopes.rs:15:10: 15:15\n       }\n   \n-      bb1 (cleanup): {\n-          resume;                          // scope 0 at $DIR/match-arm-scopes.rs:13:1: 18:2\n+      bb1: {\n+-         falseEdge -> [real: bb8, imaginary: bb3]; // scope 0 at $DIR/match-arm-scopes.rs:15:9: 15:22\n++         switchInt((_2.1: bool)) -> [false: bb10, otherwise: bb2]; // scope 0 at $DIR/match-arm-scopes.rs:15:29: 15:34\n       }\n   \n       bb2: {\n--         falseEdge -> [real: bb9, imaginary: bb4]; // scope 0 at $DIR/match-arm-scopes.rs:15:9: 15:22\n-+         switchInt((_2.1: bool)) -> [false: bb14, otherwise: bb3]; // scope 0 at $DIR/match-arm-scopes.rs:15:29: 15:34\n+-         switchInt((_2.1: bool)) -> [false: bb3, otherwise: bb4]; // scope 0 at $DIR/match-arm-scopes.rs:15:29: 15:34\n++         switchInt((_2.0: bool)) -> [false: bb3, otherwise: bb17]; // scope 0 at $DIR/match-arm-scopes.rs:16:10: 16:14\n       }\n   \n       bb3: {\n--         switchInt((_2.1: bool)) -> [false: bb4, otherwise: bb5]; // scope 0 at $DIR/match-arm-scopes.rs:15:29: 15:34\n-+         switchInt((_2.0: bool)) -> [false: bb4, otherwise: bb21]; // scope 0 at $DIR/match-arm-scopes.rs:16:10: 16:14\n-      }\n-  \n-      bb4: {\n--         falseEdge -> [real: bb18, imaginary: bb6]; // scope 0 at $DIR/match-arm-scopes.rs:15:25: 15:38\n+-         falseEdge -> [real: bb14, imaginary: bb5]; // scope 0 at $DIR/match-arm-scopes.rs:15:25: 15:38\n -     }\n - \n--     bb5: {\n--         switchInt((_2.0: bool)) -> [false: bb7, otherwise: bb6]; // scope 0 at $DIR/match-arm-scopes.rs:16:10: 16:14\n+-     bb4: {\n+-         switchInt((_2.0: bool)) -> [false: bb6, otherwise: bb5]; // scope 0 at $DIR/match-arm-scopes.rs:16:10: 16:14\n -     }\n - \n--     bb6: {\n--         falseEdge -> [real: bb26, imaginary: bb7]; // scope 0 at $DIR/match-arm-scopes.rs:16:9: 16:21\n+-     bb5: {\n+-         falseEdge -> [real: bb22, imaginary: bb6]; // scope 0 at $DIR/match-arm-scopes.rs:16:9: 16:21\n -     }\n - \n--     bb7: {\n+-     bb6: {\n           StorageLive(_15);                // scope 0 at $DIR/match-arm-scopes.rs:16:32: 16:33\n           _15 = (_2.1: bool);              // scope 0 at $DIR/match-arm-scopes.rs:16:32: 16:33\n           StorageLive(_16);                // scope 0 at $DIR/match-arm-scopes.rs:16:35: 16:36\n           _16 = move (_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:16:35: 16:36\n--         goto -> bb25;                    // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n-+         goto -> bb20;                    // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n+-         goto -> bb21;                    // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n++         goto -> bb16;                    // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n       }\n   \n--     bb8: {\n-+     bb5: {\n+-     bb7: {\n++     bb4: {\n           _0 = const 1_i32;                // scope 1 at $DIR/match-arm-scopes.rs:15:77: 15:78\n--         drop(_7) -> [return: bb24, unwind: bb14]; // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n-+         drop(_7) -> [return: bb19, unwind: bb10]; // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n+-         drop(_7) -> [return: bb20, unwind: bb27]; // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n++         drop(_7) -> [return: bb15, unwind: bb22]; // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n       }\n   \n--     bb9: {\n-+     bb6: {\n+-     bb8: {\n++     bb5: {\n           StorageLive(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:15:17: 15:18\n           _6 = &(_2.1: bool);              // scope 0 at $DIR/match-arm-scopes.rs:15:17: 15:18\n           StorageLive(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:15:20: 15:21\n@@ -90,52 +86,33 @@\n           StorageLive(_10);                // scope 0 at $DIR/match-arm-scopes.rs:15:45: 15:49\n           _10 = _1;                        // scope 0 at $DIR/match-arm-scopes.rs:15:45: 15:49\n -         FakeRead(ForMatchedPlace, _10);  // scope 0 at $DIR/match-arm-scopes.rs:15:45: 15:49\n--         switchInt(_10) -> [false: bb11, otherwise: bb10]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n-+         switchInt(_10) -> [false: bb7, otherwise: bb8]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n+-         switchInt(_10) -> [false: bb10, otherwise: bb9]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n++         switchInt(_10) -> [false: bb6, otherwise: bb7]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n       }\n   \n--     bb10: {\n--         falseEdge -> [real: bb12, imaginary: bb11]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n+-     bb9: {\n+-         falseEdge -> [real: bb11, imaginary: bb10]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n -     }\n - \n--     bb11: {\n-+     bb7: {\n+-     bb10: {\n++     bb6: {\n           _9 = (*_6);                      // scope 0 at $DIR/match-arm-scopes.rs:15:70: 15:71\n           StorageDead(_10);                // scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n--         switchInt(move _9) -> [false: bb17, otherwise: bb16]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n-+         switchInt(move _9) -> [false: bb13, otherwise: bb12]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n+-         switchInt(move _9) -> [false: bb13, otherwise: bb12]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n++         switchInt(move _9) -> [false: bb9, otherwise: bb8]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n       }\n   \n--     bb12: {\n-+     bb8: {\n+-     bb11: {\n++     bb7: {\n           _0 = const 3_i32;                // scope 0 at $DIR/match-arm-scopes.rs:15:59: 15:60\n           StorageDead(_10);                // scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n           StorageDead(_9);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n-          StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n-          StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n--         goto -> bb15;                    // scope 0 at $DIR/match-arm-scopes.rs:15:52: 15:60\n-+         goto -> bb11;                    // scope 0 at $DIR/match-arm-scopes.rs:15:52: 15:60\n-      }\n-  \n--     bb13: {\n-+     bb9: {\n-          return;                          // scope 0 at $DIR/match-arm-scopes.rs:18:2: 18:2\n-      }\n-  \n--     bb14 (cleanup): {\n--         drop(_2) -> bb1;                 // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n-+     bb10 (cleanup): {\n-+         goto -> bb25;                    // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n-      }\n-  \n--     bb15: {\n--         drop(_2) -> [return: bb13, unwind: bb1]; // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n-+     bb11: {\n-+         drop(_2) -> [return: bb9, unwind: bb1]; // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n+-         goto -> bb25;                    // scope 0 at $DIR/match-arm-scopes.rs:1:1: 1:1\n++         goto -> bb20;                    // scope 0 at $DIR/match-arm-scopes.rs:1:1: 1:1\n       }\n   \n--     bb16: {\n-+     bb12: {\n+-     bb12: {\n++     bb8: {\n           StorageDead(_9);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n -         FakeRead(ForMatchGuard, _3);     // scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n -         FakeRead(ForMatchGuard, _4);     // scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n@@ -145,21 +122,21 @@\n           _5 = (_2.1: bool);               // scope 0 at $DIR/match-arm-scopes.rs:15:17: 15:18\n           StorageLive(_7);                 // scope 0 at $DIR/match-arm-scopes.rs:15:20: 15:21\n           _7 = move (_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:15:20: 15:21\n--         goto -> bb8;                     // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n-+         goto -> bb5;                     // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n+-         goto -> bb7;                     // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n++         goto -> bb4;                     // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n       }\n   \n--     bb17: {\n-+     bb13: {\n+-     bb13: {\n++     bb9: {\n           StorageDead(_9);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n           StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n           StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n--         falseEdge -> [real: bb3, imaginary: bb4]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n-+         goto -> bb2;                     // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n+-         falseEdge -> [real: bb2, imaginary: bb3]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n++         goto -> bb1;                     // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n       }\n   \n--     bb18: {\n-+     bb14: {\n+-     bb14: {\n++     bb10: {\n           StorageLive(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:15:26: 15:27\n           _6 = &(_2.0: bool);              // scope 0 at $DIR/match-arm-scopes.rs:15:26: 15:27\n           StorageLive(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:15:36: 15:37\n@@ -170,35 +147,33 @@\n           StorageLive(_13);                // scope 0 at $DIR/match-arm-scopes.rs:15:45: 15:49\n           _13 = _1;                        // scope 0 at $DIR/match-arm-scopes.rs:15:45: 15:49\n -         FakeRead(ForMatchedPlace, _13);  // scope 0 at $DIR/match-arm-scopes.rs:15:45: 15:49\n--         switchInt(_13) -> [false: bb20, otherwise: bb19]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n-+         switchInt(_13) -> [false: bb15, otherwise: bb16]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n+-         switchInt(_13) -> [false: bb16, otherwise: bb15]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n++         switchInt(_13) -> [false: bb11, otherwise: bb12]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n       }\n   \n--     bb19: {\n--         falseEdge -> [real: bb21, imaginary: bb20]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n+-     bb15: {\n+-         falseEdge -> [real: bb17, imaginary: bb16]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n -     }\n - \n--     bb20: {\n-+     bb15: {\n+-     bb16: {\n++     bb11: {\n           _12 = (*_6);                     // scope 0 at $DIR/match-arm-scopes.rs:15:70: 15:71\n           StorageDead(_13);                // scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n--         switchInt(move _12) -> [false: bb23, otherwise: bb22]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n-+         switchInt(move _12) -> [false: bb18, otherwise: bb17]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n+-         switchInt(move _12) -> [false: bb19, otherwise: bb18]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n++         switchInt(move _12) -> [false: bb14, otherwise: bb13]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n       }\n   \n--     bb21: {\n-+     bb16: {\n+-     bb17: {\n++     bb12: {\n           _0 = const 3_i32;                // scope 0 at $DIR/match-arm-scopes.rs:15:59: 15:60\n           StorageDead(_13);                // scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n           StorageDead(_12);                // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n-          StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n-          StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n--         goto -> bb15;                    // scope 0 at $DIR/match-arm-scopes.rs:15:52: 15:60\n-+         goto -> bb11;                    // scope 0 at $DIR/match-arm-scopes.rs:15:52: 15:60\n+-         goto -> bb25;                    // scope 0 at $DIR/match-arm-scopes.rs:1:1: 1:1\n++         goto -> bb20;                    // scope 0 at $DIR/match-arm-scopes.rs:1:1: 1:1\n       }\n   \n--     bb22: {\n-+     bb17: {\n+-     bb18: {\n++     bb13: {\n           StorageDead(_12);                // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n -         FakeRead(ForMatchGuard, _3);     // scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n -         FakeRead(ForMatchGuard, _4);     // scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n@@ -208,82 +183,98 @@\n           _5 = (_2.0: bool);               // scope 0 at $DIR/match-arm-scopes.rs:15:26: 15:27\n           StorageLive(_7);                 // scope 0 at $DIR/match-arm-scopes.rs:15:36: 15:37\n           _7 = move (_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:15:36: 15:37\n--         goto -> bb8;                     // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n-+         goto -> bb5;                     // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n+-         goto -> bb7;                     // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n++         goto -> bb4;                     // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n       }\n   \n--     bb23: {\n-+     bb18: {\n+-     bb19: {\n++     bb14: {\n           StorageDead(_12);                // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n           StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n           StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n--         falseEdge -> [real: bb5, imaginary: bb6]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n-+         goto -> bb3;                     // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n+-         falseEdge -> [real: bb4, imaginary: bb5]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n++         goto -> bb2;                     // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n       }\n   \n--     bb24: {\n-+     bb19: {\n+-     bb20: {\n++     bb15: {\n           StorageDead(_7);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n           StorageDead(_5);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n           StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n           StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n--         goto -> bb28;                    // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n-+         goto -> bb23;                    // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n+-         goto -> bb24;                    // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n++         goto -> bb19;                    // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n       }\n   \n--     bb25: {\n-+     bb20: {\n+-     bb21: {\n++     bb16: {\n           _0 = const 2_i32;                // scope 2 at $DIR/match-arm-scopes.rs:16:41: 16:42\n--         drop(_16) -> [return: bb27, unwind: bb14]; // scope 0 at $DIR/match-arm-scopes.rs:16:41: 16:42\n-+         drop(_16) -> [return: bb22, unwind: bb10]; // scope 0 at $DIR/match-arm-scopes.rs:16:41: 16:42\n+-         drop(_16) -> [return: bb23, unwind: bb27]; // scope 0 at $DIR/match-arm-scopes.rs:16:41: 16:42\n++         drop(_16) -> [return: bb18, unwind: bb22]; // scope 0 at $DIR/match-arm-scopes.rs:16:41: 16:42\n       }\n   \n--     bb26: {\n-+     bb21: {\n+-     bb22: {\n++     bb17: {\n           StorageLive(_15);                // scope 0 at $DIR/match-arm-scopes.rs:16:16: 16:17\n           _15 = (_2.1: bool);              // scope 0 at $DIR/match-arm-scopes.rs:16:16: 16:17\n           StorageLive(_16);                // scope 0 at $DIR/match-arm-scopes.rs:16:19: 16:20\n           _16 = move (_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:16:19: 16:20\n--         goto -> bb25;                    // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n-+         goto -> bb20;                    // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n+-         goto -> bb21;                    // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n++         goto -> bb16;                    // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n       }\n   \n--     bb27: {\n-+     bb22: {\n+-     bb23: {\n++     bb18: {\n           StorageDead(_16);                // scope 0 at $DIR/match-arm-scopes.rs:16:41: 16:42\n           StorageDead(_15);                // scope 0 at $DIR/match-arm-scopes.rs:16:41: 16:42\n--         goto -> bb28;                    // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n-+         goto -> bb23;                    // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n+-         goto -> bb24;                    // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n++         goto -> bb19;                    // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n       }\n   \n--     bb28: {\n--         drop(_2) -> [return: bb13, unwind: bb1]; // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n-+     bb23: {\n-+         goto -> bb29;                    // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n+-     bb24: {\n+-         drop(_2) -> [return: bb26, unwind: bb28]; // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n++     bb19: {\n++         goto -> bb26;                    // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n+      }\n+  \n+-     bb25: {\n++     bb20: {\n+          StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n+          StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n+-         drop(_2) -> [return: bb26, unwind: bb28]; // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n++         drop(_2) -> [return: bb21, unwind: bb23]; // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n+      }\n+  \n+-     bb26: {\n++     bb21: {\n+          return;                          // scope 0 at $DIR/match-arm-scopes.rs:18:2: 18:2\n+      }\n+  \n+-     bb27 (cleanup): {\n+-         drop(_2) -> bb28;                // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n++     bb22 (cleanup): {\n++         goto -> bb27;                    // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n+      }\n+  \n+-     bb28 (cleanup): {\n++     bb23 (cleanup): {\n+          resume;                          // scope 0 at $DIR/match-arm-scopes.rs:13:1: 18:2\n +     }\n + \n-+     bb24 (cleanup): {\n-+         goto -> bb1;                     // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n++     bb24: {\n++         goto -> bb21;                    // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n +     }\n + \n +     bb25 (cleanup): {\n-+         goto -> bb24;                    // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n++         goto -> bb23;                    // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n +     }\n + \n +     bb26: {\n-+         goto -> bb9;                     // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n++         goto -> bb24;                    // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n +     }\n + \n +     bb27 (cleanup): {\n-+         goto -> bb1;                     // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n-+     }\n-+ \n-+     bb28 (cleanup): {\n-+         goto -> bb27;                    // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n-+     }\n-+ \n-+     bb29: {\n-+         goto -> bb26;                    // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n++         goto -> bb23;                    // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n       }\n   }\n   "}, {"sha": "2332e5beafe0f38d71a8bbd0d7177e5cd45d8784", "filename": "src/test/mir-opt/match_false_edges.full_tested_match.PromoteTemps.after.mir", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir?ref=33337bb855d453c0077764f6a5488b3ff109b6f5", "patch": "@@ -29,31 +29,27 @@ fn full_tested_match() -> () {\n         _2 = Option::<i32>::Some(const 42_i32); // scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n         FakeRead(ForMatchedPlace, _2);   // scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n         _3 = discriminant(_2);           // scope 0 at $DIR/match_false_edges.rs:16:9: 16:16\n-        switchInt(move _3) -> [0_isize: bb2, 1_isize: bb3, otherwise: bb5]; // scope 0 at $DIR/match_false_edges.rs:16:9: 16:16\n+        switchInt(move _3) -> [0_isize: bb1, 1_isize: bb2, otherwise: bb4]; // scope 0 at $DIR/match_false_edges.rs:16:9: 16:16\n     }\n \n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/match_false_edges.rs:14:1: 20:2\n+    bb1: {\n+        _1 = (const 3_i32, const 3_i32); // scope 0 at $DIR/match_false_edges.rs:18:17: 18:23\n+        goto -> bb10;                    // scope 0 at $DIR/match_false_edges.rs:15:13: 19:6\n     }\n \n     bb2: {\n-        _1 = (const 3_i32, const 3_i32); // scope 0 at $DIR/match_false_edges.rs:18:17: 18:23\n-        goto -> bb11;                    // scope 0 at $DIR/match_false_edges.rs:15:13: 19:6\n+        falseEdge -> [real: bb5, imaginary: bb3]; // scope 0 at $DIR/match_false_edges.rs:16:9: 16:16\n     }\n \n     bb3: {\n-        falseEdge -> [real: bb6, imaginary: bb4]; // scope 0 at $DIR/match_false_edges.rs:16:9: 16:16\n+        falseEdge -> [real: bb9, imaginary: bb1]; // scope 0 at $DIR/match_false_edges.rs:17:9: 17:16\n     }\n \n     bb4: {\n-        falseEdge -> [real: bb10, imaginary: bb2]; // scope 0 at $DIR/match_false_edges.rs:17:9: 17:16\n-    }\n-\n-    bb5: {\n         unreachable;                     // scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n     }\n \n-    bb6: {\n+    bb5: {\n         StorageLive(_6);                 // scope 0 at $DIR/match_false_edges.rs:16:14: 16:15\n         _11 = const full_tested_match::promoted[0]; // scope 0 at $DIR/match_false_edges.rs:16:14: 16:15\n                                          // ty::Const\n@@ -65,17 +61,17 @@ fn full_tested_match() -> () {\n         _6 = &(((*_11) as Some).0: i32); // scope 0 at $DIR/match_false_edges.rs:16:14: 16:15\n         _4 = &shallow _2;                // scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n         StorageLive(_7);                 // scope 0 at $DIR/match_false_edges.rs:16:20: 16:27\n-        _7 = guard() -> [return: bb7, unwind: bb1]; // scope 0 at $DIR/match_false_edges.rs:16:20: 16:27\n+        _7 = guard() -> [return: bb6, unwind: bb11]; // scope 0 at $DIR/match_false_edges.rs:16:20: 16:27\n                                          // mir::Constant\n                                          // + span: $DIR/match_false_edges.rs:16:20: 16:25\n                                          // + literal: Const { ty: fn() -> bool {guard}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb7: {\n-        switchInt(move _7) -> [false: bb9, otherwise: bb8]; // scope 0 at $DIR/match_false_edges.rs:16:20: 16:27\n+    bb6: {\n+        switchInt(move _7) -> [false: bb8, otherwise: bb7]; // scope 0 at $DIR/match_false_edges.rs:16:20: 16:27\n     }\n \n-    bb8: {\n+    bb7: {\n         StorageDead(_7);                 // scope 0 at $DIR/match_false_edges.rs:16:36: 16:37\n         FakeRead(ForMatchGuard, _4);     // scope 0 at $DIR/match_false_edges.rs:16:26: 16:27\n         FakeRead(ForGuardBinding, _6);   // scope 0 at $DIR/match_false_edges.rs:16:26: 16:27\n@@ -87,30 +83,34 @@ fn full_tested_match() -> () {\n         StorageDead(_8);                 // scope 2 at $DIR/match_false_edges.rs:16:36: 16:37\n         StorageDead(_5);                 // scope 0 at $DIR/match_false_edges.rs:16:36: 16:37\n         StorageDead(_6);                 // scope 0 at $DIR/match_false_edges.rs:16:36: 16:37\n-        goto -> bb11;                    // scope 0 at $DIR/match_false_edges.rs:15:13: 19:6\n+        goto -> bb10;                    // scope 0 at $DIR/match_false_edges.rs:15:13: 19:6\n     }\n \n-    bb9: {\n+    bb8: {\n         StorageDead(_7);                 // scope 0 at $DIR/match_false_edges.rs:16:36: 16:37\n         StorageDead(_6);                 // scope 0 at $DIR/match_false_edges.rs:16:36: 16:37\n-        goto -> bb4;                     // scope 0 at $DIR/match_false_edges.rs:16:20: 16:27\n+        goto -> bb3;                     // scope 0 at $DIR/match_false_edges.rs:16:20: 16:27\n     }\n \n-    bb10: {\n+    bb9: {\n         StorageLive(_9);                 // scope 0 at $DIR/match_false_edges.rs:17:14: 17:15\n         _9 = ((_2 as Some).0: i32);      // scope 0 at $DIR/match_false_edges.rs:17:14: 17:15\n         StorageLive(_10);                // scope 3 at $DIR/match_false_edges.rs:17:24: 17:25\n         _10 = _9;                        // scope 3 at $DIR/match_false_edges.rs:17:24: 17:25\n         _1 = (const 2_i32, move _10);    // scope 3 at $DIR/match_false_edges.rs:17:20: 17:26\n         StorageDead(_10);                // scope 3 at $DIR/match_false_edges.rs:17:25: 17:26\n         StorageDead(_9);                 // scope 0 at $DIR/match_false_edges.rs:17:25: 17:26\n-        goto -> bb11;                    // scope 0 at $DIR/match_false_edges.rs:15:13: 19:6\n+        goto -> bb10;                    // scope 0 at $DIR/match_false_edges.rs:15:13: 19:6\n     }\n \n-    bb11: {\n+    bb10: {\n         StorageDead(_2);                 // scope 0 at $DIR/match_false_edges.rs:19:6: 19:7\n         StorageDead(_1);                 // scope 0 at $DIR/match_false_edges.rs:19:6: 19:7\n         _0 = const ();                   // scope 0 at $DIR/match_false_edges.rs:14:28: 20:2\n         return;                          // scope 0 at $DIR/match_false_edges.rs:20:2: 20:2\n     }\n+\n+    bb11 (cleanup): {\n+        resume;                          // scope 0 at $DIR/match_false_edges.rs:14:1: 20:2\n+    }\n }"}, {"sha": "c7b1cce061bc6d797d5ea3bc6e85e7245e1e2840", "filename": "src/test/mir-opt/match_false_edges.full_tested_match2.PromoteTemps.before.mir", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match2.PromoteTemps.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match2.PromoteTemps.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match2.PromoteTemps.before.mir?ref=33337bb855d453c0077764f6a5488b3ff109b6f5", "patch": "@@ -28,52 +28,48 @@ fn full_tested_match2() -> () {\n         _2 = Option::<i32>::Some(const 42_i32); // scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n         FakeRead(ForMatchedPlace, _2);   // scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n         _3 = discriminant(_2);           // scope 0 at $DIR/match_false_edges.rs:27:9: 27:16\n-        switchInt(move _3) -> [0_isize: bb2, 1_isize: bb3, otherwise: bb5]; // scope 0 at $DIR/match_false_edges.rs:27:9: 27:16\n+        switchInt(move _3) -> [0_isize: bb1, 1_isize: bb2, otherwise: bb4]; // scope 0 at $DIR/match_false_edges.rs:27:9: 27:16\n     }\n \n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/match_false_edges.rs:25:1: 31:2\n+    bb1: {\n+        falseEdge -> [real: bb9, imaginary: bb3]; // scope 0 at $DIR/match_false_edges.rs:28:9: 28:13\n     }\n \n     bb2: {\n-        falseEdge -> [real: bb10, imaginary: bb4]; // scope 0 at $DIR/match_false_edges.rs:28:9: 28:13\n+        falseEdge -> [real: bb5, imaginary: bb1]; // scope 0 at $DIR/match_false_edges.rs:27:9: 27:16\n     }\n \n     bb3: {\n-        falseEdge -> [real: bb6, imaginary: bb2]; // scope 0 at $DIR/match_false_edges.rs:27:9: 27:16\n-    }\n-\n-    bb4: {\n         StorageLive(_9);                 // scope 0 at $DIR/match_false_edges.rs:29:14: 29:15\n         _9 = ((_2 as Some).0: i32);      // scope 0 at $DIR/match_false_edges.rs:29:14: 29:15\n         StorageLive(_10);                // scope 3 at $DIR/match_false_edges.rs:29:24: 29:25\n         _10 = _9;                        // scope 3 at $DIR/match_false_edges.rs:29:24: 29:25\n         _1 = (const 2_i32, move _10);    // scope 3 at $DIR/match_false_edges.rs:29:20: 29:26\n         StorageDead(_10);                // scope 3 at $DIR/match_false_edges.rs:29:25: 29:26\n         StorageDead(_9);                 // scope 0 at $DIR/match_false_edges.rs:29:25: 29:26\n-        goto -> bb11;                    // scope 0 at $DIR/match_false_edges.rs:26:13: 30:6\n+        goto -> bb10;                    // scope 0 at $DIR/match_false_edges.rs:26:13: 30:6\n     }\n \n-    bb5: {\n+    bb4: {\n         unreachable;                     // scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n     }\n \n-    bb6: {\n+    bb5: {\n         StorageLive(_6);                 // scope 0 at $DIR/match_false_edges.rs:27:14: 27:15\n         _6 = &((_2 as Some).0: i32);     // scope 0 at $DIR/match_false_edges.rs:27:14: 27:15\n         _4 = &shallow _2;                // scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n         StorageLive(_7);                 // scope 0 at $DIR/match_false_edges.rs:27:20: 27:27\n-        _7 = guard() -> [return: bb7, unwind: bb1]; // scope 0 at $DIR/match_false_edges.rs:27:20: 27:27\n+        _7 = guard() -> [return: bb6, unwind: bb11]; // scope 0 at $DIR/match_false_edges.rs:27:20: 27:27\n                                          // mir::Constant\n                                          // + span: $DIR/match_false_edges.rs:27:20: 27:25\n                                          // + literal: Const { ty: fn() -> bool {guard}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb7: {\n-        switchInt(move _7) -> [false: bb9, otherwise: bb8]; // scope 0 at $DIR/match_false_edges.rs:27:20: 27:27\n+    bb6: {\n+        switchInt(move _7) -> [false: bb8, otherwise: bb7]; // scope 0 at $DIR/match_false_edges.rs:27:20: 27:27\n     }\n \n-    bb8: {\n+    bb7: {\n         StorageDead(_7);                 // scope 0 at $DIR/match_false_edges.rs:27:36: 27:37\n         FakeRead(ForMatchGuard, _4);     // scope 0 at $DIR/match_false_edges.rs:27:26: 27:27\n         FakeRead(ForGuardBinding, _6);   // scope 0 at $DIR/match_false_edges.rs:27:26: 27:27\n@@ -85,24 +81,28 @@ fn full_tested_match2() -> () {\n         StorageDead(_8);                 // scope 2 at $DIR/match_false_edges.rs:27:36: 27:37\n         StorageDead(_5);                 // scope 0 at $DIR/match_false_edges.rs:27:36: 27:37\n         StorageDead(_6);                 // scope 0 at $DIR/match_false_edges.rs:27:36: 27:37\n-        goto -> bb11;                    // scope 0 at $DIR/match_false_edges.rs:26:13: 30:6\n+        goto -> bb10;                    // scope 0 at $DIR/match_false_edges.rs:26:13: 30:6\n     }\n \n-    bb9: {\n+    bb8: {\n         StorageDead(_7);                 // scope 0 at $DIR/match_false_edges.rs:27:36: 27:37\n         StorageDead(_6);                 // scope 0 at $DIR/match_false_edges.rs:27:36: 27:37\n-        falseEdge -> [real: bb4, imaginary: bb2]; // scope 0 at $DIR/match_false_edges.rs:27:20: 27:27\n+        falseEdge -> [real: bb3, imaginary: bb1]; // scope 0 at $DIR/match_false_edges.rs:27:20: 27:27\n     }\n \n-    bb10: {\n+    bb9: {\n         _1 = (const 3_i32, const 3_i32); // scope 0 at $DIR/match_false_edges.rs:28:17: 28:23\n-        goto -> bb11;                    // scope 0 at $DIR/match_false_edges.rs:26:13: 30:6\n+        goto -> bb10;                    // scope 0 at $DIR/match_false_edges.rs:26:13: 30:6\n     }\n \n-    bb11: {\n+    bb10: {\n         StorageDead(_2);                 // scope 0 at $DIR/match_false_edges.rs:30:6: 30:7\n         StorageDead(_1);                 // scope 0 at $DIR/match_false_edges.rs:30:6: 30:7\n         _0 = const ();                   // scope 0 at $DIR/match_false_edges.rs:25:29: 31:2\n         return;                          // scope 0 at $DIR/match_false_edges.rs:31:2: 31:2\n     }\n+\n+    bb11 (cleanup): {\n+        resume;                          // scope 0 at $DIR/match_false_edges.rs:25:1: 31:2\n+    }\n }"}, {"sha": "9b8ce2c1ed0473f894a449f996835b9515157ff0", "filename": "src/test/mir-opt/match_false_edges.main.PromoteTemps.before.mir", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.main.PromoteTemps.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.main.PromoteTemps.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.main.PromoteTemps.before.mir?ref=33337bb855d453c0077764f6a5488b3ff109b6f5", "patch": "@@ -39,49 +39,45 @@ fn main() -> () {\n         _2 = Option::<i32>::Some(const 1_i32); // scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n         FakeRead(ForMatchedPlace, _2);   // scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n         _4 = discriminant(_2);           // scope 0 at $DIR/match_false_edges.rs:36:9: 36:17\n-        switchInt(move _4) -> [1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/match_false_edges.rs:36:9: 36:17\n+        switchInt(move _4) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/match_false_edges.rs:36:9: 36:17\n     }\n \n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/match_false_edges.rs:34:1: 41:2\n+    bb1: {\n+        falseEdge -> [real: bb9, imaginary: bb4]; // scope 0 at $DIR/match_false_edges.rs:37:9: 37:11\n     }\n \n     bb2: {\n-        falseEdge -> [real: bb10, imaginary: bb5]; // scope 0 at $DIR/match_false_edges.rs:37:9: 37:11\n+        falseEdge -> [real: bb5, imaginary: bb1]; // scope 0 at $DIR/match_false_edges.rs:36:9: 36:17\n     }\n \n     bb3: {\n-        falseEdge -> [real: bb6, imaginary: bb2]; // scope 0 at $DIR/match_false_edges.rs:36:9: 36:17\n-    }\n-\n-    bb4: {\n         StorageLive(_14);                // scope 0 at $DIR/match_false_edges.rs:39:9: 39:11\n         _14 = _2;                        // scope 0 at $DIR/match_false_edges.rs:39:9: 39:11\n         _1 = const 4_i32;                // scope 5 at $DIR/match_false_edges.rs:39:15: 39:16\n         StorageDead(_14);                // scope 0 at $DIR/match_false_edges.rs:39:15: 39:16\n-        goto -> bb15;                    // scope 0 at $DIR/match_false_edges.rs:35:13: 40:6\n+        goto -> bb14;                    // scope 0 at $DIR/match_false_edges.rs:35:13: 40:6\n     }\n \n-    bb5: {\n-        falseEdge -> [real: bb11, imaginary: bb4]; // scope 0 at $DIR/match_false_edges.rs:38:9: 38:16\n+    bb4: {\n+        falseEdge -> [real: bb10, imaginary: bb3]; // scope 0 at $DIR/match_false_edges.rs:38:9: 38:16\n     }\n \n-    bb6: {\n+    bb5: {\n         StorageLive(_7);                 // scope 0 at $DIR/match_false_edges.rs:36:14: 36:16\n         _7 = &((_2 as Some).0: i32);     // scope 0 at $DIR/match_false_edges.rs:36:14: 36:16\n         _5 = &shallow _2;                // scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n         StorageLive(_8);                 // scope 0 at $DIR/match_false_edges.rs:36:21: 36:28\n-        _8 = guard() -> [return: bb7, unwind: bb1]; // scope 0 at $DIR/match_false_edges.rs:36:21: 36:28\n+        _8 = guard() -> [return: bb6, unwind: bb15]; // scope 0 at $DIR/match_false_edges.rs:36:21: 36:28\n                                          // mir::Constant\n                                          // + span: $DIR/match_false_edges.rs:36:21: 36:26\n                                          // + literal: Const { ty: fn() -> bool {guard}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb7: {\n-        switchInt(move _8) -> [false: bb9, otherwise: bb8]; // scope 0 at $DIR/match_false_edges.rs:36:21: 36:28\n+    bb6: {\n+        switchInt(move _8) -> [false: bb8, otherwise: bb7]; // scope 0 at $DIR/match_false_edges.rs:36:21: 36:28\n     }\n \n-    bb8: {\n+    bb7: {\n         StorageDead(_8);                 // scope 0 at $DIR/match_false_edges.rs:36:32: 36:33\n         FakeRead(ForMatchGuard, _5);     // scope 0 at $DIR/match_false_edges.rs:36:27: 36:28\n         FakeRead(ForGuardBinding, _7);   // scope 0 at $DIR/match_false_edges.rs:36:27: 36:28\n@@ -90,42 +86,42 @@ fn main() -> () {\n         _1 = const 1_i32;                // scope 2 at $DIR/match_false_edges.rs:36:32: 36:33\n         StorageDead(_6);                 // scope 0 at $DIR/match_false_edges.rs:36:32: 36:33\n         StorageDead(_7);                 // scope 0 at $DIR/match_false_edges.rs:36:32: 36:33\n-        goto -> bb15;                    // scope 0 at $DIR/match_false_edges.rs:35:13: 40:6\n+        goto -> bb14;                    // scope 0 at $DIR/match_false_edges.rs:35:13: 40:6\n     }\n \n-    bb9: {\n+    bb8: {\n         StorageDead(_8);                 // scope 0 at $DIR/match_false_edges.rs:36:32: 36:33\n         StorageDead(_7);                 // scope 0 at $DIR/match_false_edges.rs:36:32: 36:33\n-        falseEdge -> [real: bb2, imaginary: bb2]; // scope 0 at $DIR/match_false_edges.rs:36:21: 36:28\n+        falseEdge -> [real: bb1, imaginary: bb1]; // scope 0 at $DIR/match_false_edges.rs:36:21: 36:28\n     }\n \n-    bb10: {\n+    bb9: {\n         StorageLive(_9);                 // scope 0 at $DIR/match_false_edges.rs:37:9: 37:11\n         _9 = _2;                         // scope 0 at $DIR/match_false_edges.rs:37:9: 37:11\n         _1 = const 2_i32;                // scope 3 at $DIR/match_false_edges.rs:37:15: 37:16\n         StorageDead(_9);                 // scope 0 at $DIR/match_false_edges.rs:37:15: 37:16\n-        goto -> bb15;                    // scope 0 at $DIR/match_false_edges.rs:35:13: 40:6\n+        goto -> bb14;                    // scope 0 at $DIR/match_false_edges.rs:35:13: 40:6\n     }\n \n-    bb11: {\n+    bb10: {\n         StorageLive(_11);                // scope 0 at $DIR/match_false_edges.rs:38:14: 38:15\n         _11 = &((_2 as Some).0: i32);    // scope 0 at $DIR/match_false_edges.rs:38:14: 38:15\n         _5 = &shallow _2;                // scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n         StorageLive(_12);                // scope 0 at $DIR/match_false_edges.rs:38:20: 38:29\n         StorageLive(_13);                // scope 0 at $DIR/match_false_edges.rs:38:27: 38:28\n         _13 = (*_11);                    // scope 0 at $DIR/match_false_edges.rs:38:27: 38:28\n-        _12 = guard2(move _13) -> [return: bb12, unwind: bb1]; // scope 0 at $DIR/match_false_edges.rs:38:20: 38:29\n+        _12 = guard2(move _13) -> [return: bb11, unwind: bb15]; // scope 0 at $DIR/match_false_edges.rs:38:20: 38:29\n                                          // mir::Constant\n                                          // + span: $DIR/match_false_edges.rs:38:20: 38:26\n                                          // + literal: Const { ty: fn(i32) -> bool {guard2}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb12: {\n+    bb11: {\n         StorageDead(_13);                // scope 0 at $DIR/match_false_edges.rs:38:28: 38:29\n-        switchInt(move _12) -> [false: bb14, otherwise: bb13]; // scope 0 at $DIR/match_false_edges.rs:38:20: 38:29\n+        switchInt(move _12) -> [false: bb13, otherwise: bb12]; // scope 0 at $DIR/match_false_edges.rs:38:20: 38:29\n     }\n \n-    bb13: {\n+    bb12: {\n         StorageDead(_12);                // scope 0 at $DIR/match_false_edges.rs:38:33: 38:34\n         FakeRead(ForMatchGuard, _5);     // scope 0 at $DIR/match_false_edges.rs:38:28: 38:29\n         FakeRead(ForGuardBinding, _11);  // scope 0 at $DIR/match_false_edges.rs:38:28: 38:29\n@@ -134,19 +130,23 @@ fn main() -> () {\n         _1 = const 3_i32;                // scope 4 at $DIR/match_false_edges.rs:38:33: 38:34\n         StorageDead(_10);                // scope 0 at $DIR/match_false_edges.rs:38:33: 38:34\n         StorageDead(_11);                // scope 0 at $DIR/match_false_edges.rs:38:33: 38:34\n-        goto -> bb15;                    // scope 0 at $DIR/match_false_edges.rs:35:13: 40:6\n+        goto -> bb14;                    // scope 0 at $DIR/match_false_edges.rs:35:13: 40:6\n     }\n \n-    bb14: {\n+    bb13: {\n         StorageDead(_12);                // scope 0 at $DIR/match_false_edges.rs:38:33: 38:34\n         StorageDead(_11);                // scope 0 at $DIR/match_false_edges.rs:38:33: 38:34\n-        falseEdge -> [real: bb4, imaginary: bb4]; // scope 0 at $DIR/match_false_edges.rs:38:20: 38:29\n+        falseEdge -> [real: bb3, imaginary: bb3]; // scope 0 at $DIR/match_false_edges.rs:38:20: 38:29\n     }\n \n-    bb15: {\n+    bb14: {\n         StorageDead(_2);                 // scope 0 at $DIR/match_false_edges.rs:40:6: 40:7\n         StorageDead(_1);                 // scope 0 at $DIR/match_false_edges.rs:40:6: 40:7\n         _0 = const ();                   // scope 0 at $DIR/match_false_edges.rs:34:11: 41:2\n         return;                          // scope 0 at $DIR/match_false_edges.rs:41:2: 41:2\n     }\n+\n+    bb15 (cleanup): {\n+        resume;                          // scope 0 at $DIR/match_false_edges.rs:34:1: 41:2\n+    }\n }"}, {"sha": "d8538a5461ed6fbca9489b0c928dc74633dba123", "filename": "src/test/mir-opt/nll/region_subtyping_basic.main.nll.0.32bit.mir", "status": "modified", "additions": 49, "deletions": 49, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.32bit.mir?ref=33337bb855d453c0077764f6a5488b3ff109b6f5", "patch": "@@ -5,21 +5,21 @@\n | '_#1r | Local | ['_#1r]\n |\n | Inferred Region Values\n-| '_#0r | U0 | {bb0[0..=8], bb1[0], bb2[0..=8], bb3[0], bb4[0..=1], bb5[0..=3], bb6[0..=3], bb7[0..=2], bb8[0..=5], '_#0r, '_#1r}\n-| '_#1r | U0 | {bb0[0..=8], bb1[0], bb2[0..=8], bb3[0], bb4[0..=1], bb5[0..=3], bb6[0..=3], bb7[0..=2], bb8[0..=5], '_#1r}\n+| '_#0r | U0 | {bb0[0..=8], bb1[0..=8], bb2[0], bb3[0..=1], bb4[0..=3], bb5[0..=3], bb6[0..=2], bb7[0..=5], bb8[0], '_#0r, '_#1r}\n+| '_#1r | U0 | {bb0[0..=8], bb1[0..=8], bb2[0], bb3[0..=1], bb4[0..=3], bb5[0..=3], bb6[0..=2], bb7[0..=5], bb8[0], '_#1r}\n | '_#2r | U0 | {}\n-| '_#3r | U0 | {bb2[0..=8], bb3[0], bb5[0..=2]}\n-| '_#4r | U0 | {bb2[1..=8], bb3[0], bb5[0..=2]}\n-| '_#5r | U0 | {bb2[4..=8], bb3[0], bb5[0..=2]}\n+| '_#3r | U0 | {bb1[0..=8], bb2[0], bb4[0..=2]}\n+| '_#4r | U0 | {bb1[1..=8], bb2[0], bb4[0..=2]}\n+| '_#5r | U0 | {bb1[4..=8], bb2[0], bb4[0..=2]}\n |\n | Inference Constraints\n-| '_#0r live at {bb0[0..=8], bb1[0], bb2[0..=8], bb3[0], bb4[0..=1], bb5[0..=3], bb6[0..=3], bb7[0..=2], bb8[0..=5]}\n-| '_#1r live at {bb0[0..=8], bb1[0], bb2[0..=8], bb3[0], bb4[0..=1], bb5[0..=3], bb6[0..=3], bb7[0..=2], bb8[0..=5]}\n-| '_#3r live at {bb2[0]}\n-| '_#4r live at {bb2[1..=3]}\n-| '_#5r live at {bb2[4..=8], bb3[0], bb5[0..=2]}\n-| '_#3r: '_#4r due to Assignment at Single(bb2[0])\n-| '_#4r: '_#5r due to Assignment at Single(bb2[3])\n+| '_#0r live at {bb0[0..=8], bb1[0..=8], bb2[0], bb3[0..=1], bb4[0..=3], bb5[0..=3], bb6[0..=2], bb7[0..=5], bb8[0]}\n+| '_#1r live at {bb0[0..=8], bb1[0..=8], bb2[0], bb3[0..=1], bb4[0..=3], bb5[0..=3], bb6[0..=2], bb7[0..=5], bb8[0]}\n+| '_#3r live at {bb1[0]}\n+| '_#4r live at {bb1[1..=3]}\n+| '_#5r live at {bb1[4..=8], bb2[0], bb4[0..=2]}\n+| '_#3r: '_#4r due to Assignment at Single(bb1[0])\n+| '_#4r: '_#5r due to Assignment at Single(bb1[3])\n |\n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/region-subtyping-basic.rs:16:11: 16:11\n@@ -52,66 +52,66 @@ fn main() -> () {\n         _3 = const Const(Value(Scalar(0x00000000)): usize); // bb0[5]: scope 1 at $DIR/region-subtyping-basic.rs:18:16: 18:17\n         _4 = Len(_1);                    // bb0[6]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n         _5 = Lt(_3, _4);                 // bb0[7]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n-        assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> [success: bb2, unwind: bb1]; // bb0[8]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n+        assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> [success: bb1, unwind: bb8]; // bb0[8]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n     }\n \n-    bb1 (cleanup): {\n-        resume;                          // bb1[0]: scope 0 at $DIR/region-subtyping-basic.rs:16:1: 25:2\n+    bb1: {\n+        _2 = &'_#3r _1[_3];              // bb1[0]: scope 1 at $DIR/region-subtyping-basic.rs:18:13: 18:18\n+        FakeRead(ForLet, _2);            // bb1[1]: scope 1 at $DIR/region-subtyping-basic.rs:18:9: 18:10\n+        StorageLive(_6);                 // bb1[2]: scope 2 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n+        _6 = _2;                         // bb1[3]: scope 2 at $DIR/region-subtyping-basic.rs:19:13: 19:14\n+        FakeRead(ForLet, _6);            // bb1[4]: scope 2 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n+        StorageLive(_7);                 // bb1[5]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n+        _7 = const Const(Value(Scalar(0x01)): bool); // bb1[6]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n+        FakeRead(ForMatchedPlace, _7);   // bb1[7]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n+        switchInt(_7) -> [Const(Value(Scalar(0x00)): bool): bb3, otherwise: bb2]; // bb1[8]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n     }\n \n     bb2: {\n-        _2 = &'_#3r _1[_3];              // bb2[0]: scope 1 at $DIR/region-subtyping-basic.rs:18:13: 18:18\n-        FakeRead(ForLet, _2);            // bb2[1]: scope 1 at $DIR/region-subtyping-basic.rs:18:9: 18:10\n-        StorageLive(_6);                 // bb2[2]: scope 2 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n-        _6 = _2;                         // bb2[3]: scope 2 at $DIR/region-subtyping-basic.rs:19:13: 19:14\n-        FakeRead(ForLet, _6);            // bb2[4]: scope 2 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n-        StorageLive(_7);                 // bb2[5]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n-        _7 = const Const(Value(Scalar(0x01)): bool); // bb2[6]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n-        FakeRead(ForMatchedPlace, _7);   // bb2[7]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n-        switchInt(_7) -> [Const(Value(Scalar(0x00)): bool): bb4, otherwise: bb3]; // bb2[8]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n+        falseEdge -> [real: bb4, imaginary: bb3]; // bb2[0]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n     }\n \n     bb3: {\n-        falseEdge -> [real: bb5, imaginary: bb4]; // bb3[0]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n-    }\n-\n-    bb4: {\n-        StorageLive(_10);                // bb4[0]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n-        _10 = Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(const Const(Value(Scalar(0x00000016)): usize)) -> [return: bb7, unwind: bb1]; // bb4[1]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n+        StorageLive(_10);                // bb3[0]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n+        _10 = Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(const Const(Value(Scalar(0x00000016)): usize)) -> [return: bb6, unwind: bb8]; // bb3[1]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n                                          // mir::Constant\n                                          // + span: $DIR/region-subtyping-basic.rs:23:9: 23:14\n                                          // + literal: Const { ty: fn(usize) -> bool {use_x}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb5: {\n-        StorageLive(_8);                 // bb5[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n-        StorageLive(_9);                 // bb5[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n-        _9 = (*_6);                      // bb5[2]: scope 3 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n-        _8 = Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(move _9) -> [return: bb6, unwind: bb1]; // bb5[3]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n+    bb4: {\n+        StorageLive(_8);                 // bb4[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n+        StorageLive(_9);                 // bb4[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n+        _9 = (*_6);                      // bb4[2]: scope 3 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n+        _8 = Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(move _9) -> [return: bb5, unwind: bb8]; // bb4[3]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n                                          // mir::Constant\n                                          // + span: $DIR/region-subtyping-basic.rs:21:9: 21:14\n                                          // + literal: Const { ty: fn(usize) -> bool {use_x}, val: Value(Scalar(<ZST>)) }\n     }\n \n+    bb5: {\n+        StorageDead(_9);                 // bb5[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:17: 21:18\n+        StorageDead(_8);                 // bb5[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:18: 21:19\n+        _0 = const Const(Value(Scalar(<ZST>)): ()); // bb5[2]: scope 3 at $DIR/region-subtyping-basic.rs:20:13: 22:6\n+        goto -> bb7;                     // bb5[3]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n+    }\n+\n     bb6: {\n-        StorageDead(_9);                 // bb6[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:17: 21:18\n-        StorageDead(_8);                 // bb6[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:18: 21:19\n-        _0 = const Const(Value(Scalar(<ZST>)): ()); // bb6[2]: scope 3 at $DIR/region-subtyping-basic.rs:20:13: 22:6\n-        goto -> bb8;                     // bb6[3]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n+        StorageDead(_10);                // bb6[0]: scope 3 at $DIR/region-subtyping-basic.rs:23:18: 23:19\n+        _0 = const Const(Value(Scalar(<ZST>)): ()); // bb6[1]: scope 3 at $DIR/region-subtyping-basic.rs:22:12: 24:6\n+        goto -> bb7;                     // bb6[2]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n     }\n \n     bb7: {\n-        StorageDead(_10);                // bb7[0]: scope 3 at $DIR/region-subtyping-basic.rs:23:18: 23:19\n-        _0 = const Const(Value(Scalar(<ZST>)): ()); // bb7[1]: scope 3 at $DIR/region-subtyping-basic.rs:22:12: 24:6\n-        goto -> bb8;                     // bb7[2]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n+        StorageDead(_6);                 // bb7[0]: scope 2 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n+        StorageDead(_3);                 // bb7[1]: scope 1 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n+        StorageDead(_2);                 // bb7[2]: scope 1 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n+        StorageDead(_1);                 // bb7[3]: scope 0 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n+        StorageDead(_7);                 // bb7[4]: scope 0 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n+        return;                          // bb7[5]: scope 0 at $DIR/region-subtyping-basic.rs:25:2: 25:2\n     }\n \n-    bb8: {\n-        StorageDead(_6);                 // bb8[0]: scope 2 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n-        StorageDead(_3);                 // bb8[1]: scope 1 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n-        StorageDead(_2);                 // bb8[2]: scope 1 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n-        StorageDead(_1);                 // bb8[3]: scope 0 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n-        StorageDead(_7);                 // bb8[4]: scope 0 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n-        return;                          // bb8[5]: scope 0 at $DIR/region-subtyping-basic.rs:25:2: 25:2\n+    bb8 (cleanup): {\n+        resume;                          // bb8[0]: scope 0 at $DIR/region-subtyping-basic.rs:16:1: 25:2\n     }\n }"}, {"sha": "15aba40f169cd61b4ecd89ac43cef29ff1a7fffe", "filename": "src/test/mir-opt/nll/region_subtyping_basic.main.nll.0.64bit.mir", "status": "modified", "additions": 49, "deletions": 49, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir?ref=33337bb855d453c0077764f6a5488b3ff109b6f5", "patch": "@@ -5,21 +5,21 @@\n | '_#1r | Local | ['_#1r]\n |\n | Inferred Region Values\n-| '_#0r | U0 | {bb0[0..=8], bb1[0], bb2[0..=8], bb3[0], bb4[0..=1], bb5[0..=3], bb6[0..=3], bb7[0..=2], bb8[0..=5], '_#0r, '_#1r}\n-| '_#1r | U0 | {bb0[0..=8], bb1[0], bb2[0..=8], bb3[0], bb4[0..=1], bb5[0..=3], bb6[0..=3], bb7[0..=2], bb8[0..=5], '_#1r}\n+| '_#0r | U0 | {bb0[0..=8], bb1[0..=8], bb2[0], bb3[0..=1], bb4[0..=3], bb5[0..=3], bb6[0..=2], bb7[0..=5], bb8[0], '_#0r, '_#1r}\n+| '_#1r | U0 | {bb0[0..=8], bb1[0..=8], bb2[0], bb3[0..=1], bb4[0..=3], bb5[0..=3], bb6[0..=2], bb7[0..=5], bb8[0], '_#1r}\n | '_#2r | U0 | {}\n-| '_#3r | U0 | {bb2[0..=8], bb3[0], bb5[0..=2]}\n-| '_#4r | U0 | {bb2[1..=8], bb3[0], bb5[0..=2]}\n-| '_#5r | U0 | {bb2[4..=8], bb3[0], bb5[0..=2]}\n+| '_#3r | U0 | {bb1[0..=8], bb2[0], bb4[0..=2]}\n+| '_#4r | U0 | {bb1[1..=8], bb2[0], bb4[0..=2]}\n+| '_#5r | U0 | {bb1[4..=8], bb2[0], bb4[0..=2]}\n |\n | Inference Constraints\n-| '_#0r live at {bb0[0..=8], bb1[0], bb2[0..=8], bb3[0], bb4[0..=1], bb5[0..=3], bb6[0..=3], bb7[0..=2], bb8[0..=5]}\n-| '_#1r live at {bb0[0..=8], bb1[0], bb2[0..=8], bb3[0], bb4[0..=1], bb5[0..=3], bb6[0..=3], bb7[0..=2], bb8[0..=5]}\n-| '_#3r live at {bb2[0]}\n-| '_#4r live at {bb2[1..=3]}\n-| '_#5r live at {bb2[4..=8], bb3[0], bb5[0..=2]}\n-| '_#3r: '_#4r due to Assignment at Single(bb2[0])\n-| '_#4r: '_#5r due to Assignment at Single(bb2[3])\n+| '_#0r live at {bb0[0..=8], bb1[0..=8], bb2[0], bb3[0..=1], bb4[0..=3], bb5[0..=3], bb6[0..=2], bb7[0..=5], bb8[0]}\n+| '_#1r live at {bb0[0..=8], bb1[0..=8], bb2[0], bb3[0..=1], bb4[0..=3], bb5[0..=3], bb6[0..=2], bb7[0..=5], bb8[0]}\n+| '_#3r live at {bb1[0]}\n+| '_#4r live at {bb1[1..=3]}\n+| '_#5r live at {bb1[4..=8], bb2[0], bb4[0..=2]}\n+| '_#3r: '_#4r due to Assignment at Single(bb1[0])\n+| '_#4r: '_#5r due to Assignment at Single(bb1[3])\n |\n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/region-subtyping-basic.rs:16:11: 16:11\n@@ -52,66 +52,66 @@ fn main() -> () {\n         _3 = const Const(Value(Scalar(0x0000000000000000)): usize); // bb0[5]: scope 1 at $DIR/region-subtyping-basic.rs:18:16: 18:17\n         _4 = Len(_1);                    // bb0[6]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n         _5 = Lt(_3, _4);                 // bb0[7]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n-        assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> [success: bb2, unwind: bb1]; // bb0[8]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n+        assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> [success: bb1, unwind: bb8]; // bb0[8]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n     }\n \n-    bb1 (cleanup): {\n-        resume;                          // bb1[0]: scope 0 at $DIR/region-subtyping-basic.rs:16:1: 25:2\n+    bb1: {\n+        _2 = &'_#3r _1[_3];              // bb1[0]: scope 1 at $DIR/region-subtyping-basic.rs:18:13: 18:18\n+        FakeRead(ForLet, _2);            // bb1[1]: scope 1 at $DIR/region-subtyping-basic.rs:18:9: 18:10\n+        StorageLive(_6);                 // bb1[2]: scope 2 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n+        _6 = _2;                         // bb1[3]: scope 2 at $DIR/region-subtyping-basic.rs:19:13: 19:14\n+        FakeRead(ForLet, _6);            // bb1[4]: scope 2 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n+        StorageLive(_7);                 // bb1[5]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n+        _7 = const Const(Value(Scalar(0x01)): bool); // bb1[6]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n+        FakeRead(ForMatchedPlace, _7);   // bb1[7]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n+        switchInt(_7) -> [Const(Value(Scalar(0x00)): bool): bb3, otherwise: bb2]; // bb1[8]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n     }\n \n     bb2: {\n-        _2 = &'_#3r _1[_3];              // bb2[0]: scope 1 at $DIR/region-subtyping-basic.rs:18:13: 18:18\n-        FakeRead(ForLet, _2);            // bb2[1]: scope 1 at $DIR/region-subtyping-basic.rs:18:9: 18:10\n-        StorageLive(_6);                 // bb2[2]: scope 2 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n-        _6 = _2;                         // bb2[3]: scope 2 at $DIR/region-subtyping-basic.rs:19:13: 19:14\n-        FakeRead(ForLet, _6);            // bb2[4]: scope 2 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n-        StorageLive(_7);                 // bb2[5]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n-        _7 = const Const(Value(Scalar(0x01)): bool); // bb2[6]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n-        FakeRead(ForMatchedPlace, _7);   // bb2[7]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n-        switchInt(_7) -> [Const(Value(Scalar(0x00)): bool): bb4, otherwise: bb3]; // bb2[8]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n+        falseEdge -> [real: bb4, imaginary: bb3]; // bb2[0]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n     }\n \n     bb3: {\n-        falseEdge -> [real: bb5, imaginary: bb4]; // bb3[0]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n-    }\n-\n-    bb4: {\n-        StorageLive(_10);                // bb4[0]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n-        _10 = Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(const Const(Value(Scalar(0x0000000000000016)): usize)) -> [return: bb7, unwind: bb1]; // bb4[1]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n+        StorageLive(_10);                // bb3[0]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n+        _10 = Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(const Const(Value(Scalar(0x0000000000000016)): usize)) -> [return: bb6, unwind: bb8]; // bb3[1]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n                                          // mir::Constant\n                                          // + span: $DIR/region-subtyping-basic.rs:23:9: 23:14\n                                          // + literal: Const { ty: fn(usize) -> bool {use_x}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb5: {\n-        StorageLive(_8);                 // bb5[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n-        StorageLive(_9);                 // bb5[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n-        _9 = (*_6);                      // bb5[2]: scope 3 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n-        _8 = Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(move _9) -> [return: bb6, unwind: bb1]; // bb5[3]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n+    bb4: {\n+        StorageLive(_8);                 // bb4[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n+        StorageLive(_9);                 // bb4[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n+        _9 = (*_6);                      // bb4[2]: scope 3 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n+        _8 = Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(move _9) -> [return: bb5, unwind: bb8]; // bb4[3]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n                                          // mir::Constant\n                                          // + span: $DIR/region-subtyping-basic.rs:21:9: 21:14\n                                          // + literal: Const { ty: fn(usize) -> bool {use_x}, val: Value(Scalar(<ZST>)) }\n     }\n \n+    bb5: {\n+        StorageDead(_9);                 // bb5[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:17: 21:18\n+        StorageDead(_8);                 // bb5[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:18: 21:19\n+        _0 = const Const(Value(Scalar(<ZST>)): ()); // bb5[2]: scope 3 at $DIR/region-subtyping-basic.rs:20:13: 22:6\n+        goto -> bb7;                     // bb5[3]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n+    }\n+\n     bb6: {\n-        StorageDead(_9);                 // bb6[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:17: 21:18\n-        StorageDead(_8);                 // bb6[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:18: 21:19\n-        _0 = const Const(Value(Scalar(<ZST>)): ()); // bb6[2]: scope 3 at $DIR/region-subtyping-basic.rs:20:13: 22:6\n-        goto -> bb8;                     // bb6[3]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n+        StorageDead(_10);                // bb6[0]: scope 3 at $DIR/region-subtyping-basic.rs:23:18: 23:19\n+        _0 = const Const(Value(Scalar(<ZST>)): ()); // bb6[1]: scope 3 at $DIR/region-subtyping-basic.rs:22:12: 24:6\n+        goto -> bb7;                     // bb6[2]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n     }\n \n     bb7: {\n-        StorageDead(_10);                // bb7[0]: scope 3 at $DIR/region-subtyping-basic.rs:23:18: 23:19\n-        _0 = const Const(Value(Scalar(<ZST>)): ()); // bb7[1]: scope 3 at $DIR/region-subtyping-basic.rs:22:12: 24:6\n-        goto -> bb8;                     // bb7[2]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n+        StorageDead(_6);                 // bb7[0]: scope 2 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n+        StorageDead(_3);                 // bb7[1]: scope 1 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n+        StorageDead(_2);                 // bb7[2]: scope 1 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n+        StorageDead(_1);                 // bb7[3]: scope 0 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n+        StorageDead(_7);                 // bb7[4]: scope 0 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n+        return;                          // bb7[5]: scope 0 at $DIR/region-subtyping-basic.rs:25:2: 25:2\n     }\n \n-    bb8: {\n-        StorageDead(_6);                 // bb8[0]: scope 2 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n-        StorageDead(_3);                 // bb8[1]: scope 1 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n-        StorageDead(_2);                 // bb8[2]: scope 1 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n-        StorageDead(_1);                 // bb8[3]: scope 0 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n-        StorageDead(_7);                 // bb8[4]: scope 0 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n-        return;                          // bb8[5]: scope 0 at $DIR/region-subtyping-basic.rs:25:2: 25:2\n+    bb8 (cleanup): {\n+        resume;                          // bb8[0]: scope 0 at $DIR/region-subtyping-basic.rs:16:1: 25:2\n     }\n }"}, {"sha": "1e4b329830bd54084991ee747c1f96ac5d91430f", "filename": "src/test/mir-opt/no_drop_for_inactive_variant.unwrap.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fno_drop_for_inactive_variant.unwrap.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fno_drop_for_inactive_variant.unwrap.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fno_drop_for_inactive_variant.unwrap.SimplifyCfg-elaborate-drops.after.mir?ref=33337bb855d453c0077764f6a5488b3ff109b6f5", "patch": "@@ -41,12 +41,12 @@ fn unwrap(_1: Option<T>) -> T {\n         _3 = move ((_1 as Some).0: T);   // scope 0 at $DIR/no-drop-for-inactive-variant.rs:9:14: 9:15\n         _0 = move _3;                    // scope 1 at $DIR/no-drop-for-inactive-variant.rs:9:20: 9:21\n         StorageDead(_3);                 // scope 0 at $DIR/no-drop-for-inactive-variant.rs:9:20: 9:21\n-        _6 = discriminant(_1);           // scope 0 at $DIR/no-drop-for-inactive-variant.rs:12:1: 12:2\n+        _5 = discriminant(_1);           // scope 0 at $DIR/no-drop-for-inactive-variant.rs:12:1: 12:2\n         return;                          // scope 0 at $DIR/no-drop-for-inactive-variant.rs:12:2: 12:2\n     }\n \n     bb4 (cleanup): {\n-        _5 = discriminant(_1);           // scope 0 at $DIR/no-drop-for-inactive-variant.rs:12:1: 12:2\n+        _7 = discriminant(_1);           // scope 0 at $DIR/no-drop-for-inactive-variant.rs:12:1: 12:2\n         resume;                          // scope 0 at $DIR/no-drop-for-inactive-variant.rs:7:1: 12:2\n     }\n }"}, {"sha": "bbb433dbe25c787203525dbe6561d0ff04946023", "filename": "src/test/mir-opt/no_spurious_drop_after_call.main.ElaborateDrops.before.mir", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fno_spurious_drop_after_call.main.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fno_spurious_drop_after_call.main.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fno_spurious_drop_after_call.main.ElaborateDrops.before.mir?ref=33337bb855d453c0077764f6a5488b3ff109b6f5", "patch": "@@ -20,33 +20,33 @@ fn main() -> () {\n                                          // + span: $DIR/no-spurious-drop-after-call.rs:9:20: 9:22\n                                          // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [], len: Size { raw: 0 } }, size: Size { raw: 0 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 0 }) }\n         _3 = &(*_4);                     // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:22\n-        _2 = <str as ToString>::to_string(move _3) -> bb2; // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:34\n+        _2 = <str as ToString>::to_string(move _3) -> bb1; // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:34\n                                          // mir::Constant\n                                          // + span: $DIR/no-spurious-drop-after-call.rs:9:23: 9:32\n                                          // + literal: Const { ty: for<'r> fn(&'r str) -> std::string::String {<str as std::string::ToString>::to_string}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/no-spurious-drop-after-call.rs:8:1: 10:2\n-    }\n-\n-    bb2: {\n+    bb1: {\n         StorageDead(_3);                 // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:33: 9:34\n-        _1 = std::mem::drop::<String>(move _2) -> [return: bb3, unwind: bb4]; // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:5: 9:35\n+        _1 = std::mem::drop::<String>(move _2) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:5: 9:35\n                                          // mir::Constant\n                                          // + span: $DIR/no-spurious-drop-after-call.rs:9:5: 9:19\n                                          // + literal: Const { ty: fn(std::string::String) {std::mem::drop::<std::string::String>}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb3: {\n+    bb2: {\n         StorageDead(_2);                 // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:34: 9:35\n         StorageDead(_4);                 // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:35: 9:36\n         StorageDead(_1);                 // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:35: 9:36\n         _0 = const ();                   // scope 0 at $DIR/no-spurious-drop-after-call.rs:8:11: 10:2\n         return;                          // scope 0 at $DIR/no-spurious-drop-after-call.rs:10:2: 10:2\n     }\n \n+    bb3 (cleanup): {\n+        drop(_2) -> bb4;                 // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:34: 9:35\n+    }\n+\n     bb4 (cleanup): {\n-        drop(_2) -> bb1;                 // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:34: 9:35\n+        resume;                          // scope 0 at $DIR/no-spurious-drop-after-call.rs:8:1: 10:2\n     }\n }"}, {"sha": "81f428d607177da336a13b8b12d19c04d08d286b", "filename": "src/test/mir-opt/packed_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.32bit.mir", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fpacked_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fpacked_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fpacked_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.32bit.mir?ref=33337bb855d453c0077764f6a5488b3ff109b6f5", "patch": "@@ -31,25 +31,25 @@ fn main() -> () {\n         drop(_6) -> [return: bb4, unwind: bb3]; // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n     }\n \n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/packed-struct-drop-aligned.rs:5:1: 8:2\n-    }\n-\n-    bb2: {\n+    bb1: {\n         StorageDead(_1);                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:8:1: 8:2\n         return;                          // scope 0 at $DIR/packed-struct-drop-aligned.rs:8:2: 8:2\n     }\n \n+    bb2 (cleanup): {\n+        resume;                          // scope 0 at $DIR/packed-struct-drop-aligned.rs:5:1: 8:2\n+    }\n+\n     bb3 (cleanup): {\n         (_1.0: Aligned) = move _4;       // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n-        drop(_1) -> bb1;                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:8:1: 8:2\n+        drop(_1) -> bb2;                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:8:1: 8:2\n     }\n \n     bb4: {\n         StorageDead(_6);                 // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n         (_1.0: Aligned) = move _4;       // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n         StorageDead(_4);                 // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:28: 7:29\n         _0 = const ();                   // scope 0 at $DIR/packed-struct-drop-aligned.rs:5:11: 8:2\n-        drop(_1) -> [return: bb2, unwind: bb1]; // scope 0 at $DIR/packed-struct-drop-aligned.rs:8:1: 8:2\n+        drop(_1) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/packed-struct-drop-aligned.rs:8:1: 8:2\n     }\n }"}, {"sha": "81f428d607177da336a13b8b12d19c04d08d286b", "filename": "src/test/mir-opt/packed_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.64bit.mir", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fpacked_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fpacked_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fpacked_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.64bit.mir?ref=33337bb855d453c0077764f6a5488b3ff109b6f5", "patch": "@@ -31,25 +31,25 @@ fn main() -> () {\n         drop(_6) -> [return: bb4, unwind: bb3]; // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n     }\n \n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/packed-struct-drop-aligned.rs:5:1: 8:2\n-    }\n-\n-    bb2: {\n+    bb1: {\n         StorageDead(_1);                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:8:1: 8:2\n         return;                          // scope 0 at $DIR/packed-struct-drop-aligned.rs:8:2: 8:2\n     }\n \n+    bb2 (cleanup): {\n+        resume;                          // scope 0 at $DIR/packed-struct-drop-aligned.rs:5:1: 8:2\n+    }\n+\n     bb3 (cleanup): {\n         (_1.0: Aligned) = move _4;       // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n-        drop(_1) -> bb1;                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:8:1: 8:2\n+        drop(_1) -> bb2;                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:8:1: 8:2\n     }\n \n     bb4: {\n         StorageDead(_6);                 // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n         (_1.0: Aligned) = move _4;       // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n         StorageDead(_4);                 // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:28: 7:29\n         _0 = const ();                   // scope 0 at $DIR/packed-struct-drop-aligned.rs:5:11: 8:2\n-        drop(_1) -> [return: bb2, unwind: bb1]; // scope 0 at $DIR/packed-struct-drop-aligned.rs:8:1: 8:2\n+        drop(_1) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/packed-struct-drop-aligned.rs:8:1: 8:2\n     }\n }"}, {"sha": "8c7d79262b242438cc898d7015ddbdbf3cf3ce62", "filename": "src/test/mir-opt/retag.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir?ref=33337bb855d453c0077764f6a5488b3ff109b6f5", "patch": "@@ -70,29 +70,21 @@ fn main() -> () {\n         Retag(_7);                       // scope 1 at $DIR/retag.rs:32:29: 32:35\n         _6 = &mut (*_7);                 // scope 1 at $DIR/retag.rs:32:29: 32:35\n         Retag([2phase] _6);              // scope 1 at $DIR/retag.rs:32:29: 32:35\n-        _3 = Test::foo(move _4, move _6) -> [return: bb2, unwind: bb3]; // scope 1 at $DIR/retag.rs:32:17: 32:36\n+        _3 = Test::foo(move _4, move _6) -> [return: bb1, unwind: bb7]; // scope 1 at $DIR/retag.rs:32:17: 32:36\n                                          // mir::Constant\n                                          // + span: $DIR/retag.rs:32:25: 32:28\n                                          // + literal: Const { ty: for<'r, 'x> fn(&'r Test, &'x mut i32) -> &'x mut i32 {Test::foo}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/retag.rs:29:1: 51:2\n-    }\n-\n-    bb2: {\n+    bb1: {\n         Retag(_3);                       // scope 1 at $DIR/retag.rs:32:17: 32:36\n         StorageDead(_6);                 // scope 1 at $DIR/retag.rs:32:35: 32:36\n         StorageDead(_4);                 // scope 1 at $DIR/retag.rs:32:35: 32:36\n         StorageDead(_7);                 // scope 1 at $DIR/retag.rs:32:36: 32:37\n-        drop(_5) -> [return: bb4, unwind: bb1]; // scope 1 at $DIR/retag.rs:32:36: 32:37\n-    }\n-\n-    bb3 (cleanup): {\n-        drop(_5) -> bb1;                 // scope 1 at $DIR/retag.rs:32:36: 32:37\n+        drop(_5) -> [return: bb2, unwind: bb8]; // scope 1 at $DIR/retag.rs:32:36: 32:37\n     }\n \n-    bb4: {\n+    bb2: {\n         StorageDead(_5);                 // scope 1 at $DIR/retag.rs:32:36: 32:37\n         StorageLive(_8);                 // scope 2 at $DIR/retag.rs:33:13: 33:14\n         StorageLive(_9);                 // scope 2 at $DIR/retag.rs:33:19: 33:20\n@@ -138,10 +130,10 @@ fn main() -> () {\n         Retag(_18);                      // scope 6 at $DIR/retag.rs:44:16: 44:18\n         _17 = &(*_18);                   // scope 6 at $DIR/retag.rs:44:16: 44:18\n         Retag(_17);                      // scope 6 at $DIR/retag.rs:44:16: 44:18\n-        _15 = move _16(move _17) -> bb5; // scope 6 at $DIR/retag.rs:44:14: 44:19\n+        _15 = move _16(move _17) -> bb3; // scope 6 at $DIR/retag.rs:44:14: 44:19\n     }\n \n-    bb5: {\n+    bb3: {\n         Retag(_15);                      // scope 6 at $DIR/retag.rs:44:14: 44:19\n         StorageDead(_17);                // scope 6 at $DIR/retag.rs:44:18: 44:19\n         StorageDead(_16);                // scope 6 at $DIR/retag.rs:44:18: 44:19\n@@ -166,25 +158,21 @@ fn main() -> () {\n         Retag(_23);                      // scope 7 at $DIR/retag.rs:47:21: 47:23\n         _22 = &(*_23);                   // scope 7 at $DIR/retag.rs:47:21: 47:23\n         Retag(_22);                      // scope 7 at $DIR/retag.rs:47:21: 47:23\n-        _19 = Test::foo_shr(move _20, move _22) -> [return: bb6, unwind: bb7]; // scope 7 at $DIR/retag.rs:47:5: 47:24\n+        _19 = Test::foo_shr(move _20, move _22) -> [return: bb4, unwind: bb6]; // scope 7 at $DIR/retag.rs:47:5: 47:24\n                                          // mir::Constant\n                                          // + span: $DIR/retag.rs:47:13: 47:20\n                                          // + literal: Const { ty: for<'r, 'x> fn(&'r Test, &'x i32) -> &'x i32 {Test::foo_shr}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb6: {\n+    bb4: {\n         Retag(_19);                      // scope 7 at $DIR/retag.rs:47:5: 47:24\n         StorageDead(_22);                // scope 7 at $DIR/retag.rs:47:23: 47:24\n         StorageDead(_20);                // scope 7 at $DIR/retag.rs:47:23: 47:24\n         StorageDead(_23);                // scope 7 at $DIR/retag.rs:47:24: 47:25\n-        drop(_21) -> [return: bb8, unwind: bb1]; // scope 7 at $DIR/retag.rs:47:24: 47:25\n-    }\n-\n-    bb7 (cleanup): {\n-        drop(_21) -> bb1;                // scope 7 at $DIR/retag.rs:47:24: 47:25\n+        drop(_21) -> [return: bb5, unwind: bb8]; // scope 7 at $DIR/retag.rs:47:24: 47:25\n     }\n \n-    bb8: {\n+    bb5: {\n         StorageDead(_21);                // scope 7 at $DIR/retag.rs:47:24: 47:25\n         StorageDead(_19);                // scope 7 at $DIR/retag.rs:47:24: 47:25\n         StorageLive(_25);                // scope 7 at $DIR/retag.rs:50:9: 50:11\n@@ -200,4 +188,16 @@ fn main() -> () {\n         StorageDead(_1);                 // scope 0 at $DIR/retag.rs:51:1: 51:2\n         return;                          // scope 0 at $DIR/retag.rs:51:2: 51:2\n     }\n+\n+    bb6 (cleanup): {\n+        drop(_21) -> bb8;                // scope 7 at $DIR/retag.rs:47:24: 47:25\n+    }\n+\n+    bb7 (cleanup): {\n+        drop(_5) -> bb8;                 // scope 1 at $DIR/retag.rs:32:36: 32:37\n+    }\n+\n+    bb8 (cleanup): {\n+        resume;                          // scope 0 at $DIR/retag.rs:29:1: 51:2\n+    }\n }"}, {"sha": "5bcb20ca72a3f021814c412afd03ce182ab44c08", "filename": "src/test/mir-opt/simple_match.match_bool.mir_map.0.32bit.mir", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fsimple_match.match_bool.mir_map.0.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fsimple_match.match_bool.mir_map.0.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimple_match.match_bool.mir_map.0.32bit.mir?ref=33337bb855d453c0077764f6a5488b3ff109b6f5", "patch": "@@ -6,32 +6,24 @@ fn match_bool(_1: bool) -> usize {\n \n     bb0: {\n         FakeRead(ForMatchedPlace, _1);   // scope 0 at $DIR/simple-match.rs:6:11: 6:12\n-        switchInt(_1) -> [false: bb3, otherwise: bb2]; // scope 0 at $DIR/simple-match.rs:7:9: 7:13\n+        switchInt(_1) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/simple-match.rs:7:9: 7:13\n     }\n \n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/simple-match.rs:5:1: 10:2\n+    bb1: {\n+        falseEdge -> [real: bb3, imaginary: bb2]; // scope 0 at $DIR/simple-match.rs:7:9: 7:13\n     }\n \n     bb2: {\n-        falseEdge -> [real: bb4, imaginary: bb3]; // scope 0 at $DIR/simple-match.rs:7:9: 7:13\n-    }\n-\n-    bb3: {\n         _0 = const 20_usize;             // scope 0 at $DIR/simple-match.rs:8:14: 8:16\n-        goto -> bb5;                     // scope 0 at $DIR/simple-match.rs:6:5: 9:6\n+        goto -> bb4;                     // scope 0 at $DIR/simple-match.rs:6:5: 9:6\n     }\n \n-    bb4: {\n+    bb3: {\n         _0 = const 10_usize;             // scope 0 at $DIR/simple-match.rs:7:17: 7:19\n-        goto -> bb5;                     // scope 0 at $DIR/simple-match.rs:6:5: 9:6\n-    }\n-\n-    bb5: {\n-        goto -> bb6;                     // scope 0 at $DIR/simple-match.rs:10:2: 10:2\n+        goto -> bb4;                     // scope 0 at $DIR/simple-match.rs:6:5: 9:6\n     }\n \n-    bb6: {\n+    bb4: {\n         return;                          // scope 0 at $DIR/simple-match.rs:10:2: 10:2\n     }\n }"}, {"sha": "5bcb20ca72a3f021814c412afd03ce182ab44c08", "filename": "src/test/mir-opt/simple_match.match_bool.mir_map.0.64bit.mir", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fsimple_match.match_bool.mir_map.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fsimple_match.match_bool.mir_map.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimple_match.match_bool.mir_map.0.64bit.mir?ref=33337bb855d453c0077764f6a5488b3ff109b6f5", "patch": "@@ -6,32 +6,24 @@ fn match_bool(_1: bool) -> usize {\n \n     bb0: {\n         FakeRead(ForMatchedPlace, _1);   // scope 0 at $DIR/simple-match.rs:6:11: 6:12\n-        switchInt(_1) -> [false: bb3, otherwise: bb2]; // scope 0 at $DIR/simple-match.rs:7:9: 7:13\n+        switchInt(_1) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/simple-match.rs:7:9: 7:13\n     }\n \n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/simple-match.rs:5:1: 10:2\n+    bb1: {\n+        falseEdge -> [real: bb3, imaginary: bb2]; // scope 0 at $DIR/simple-match.rs:7:9: 7:13\n     }\n \n     bb2: {\n-        falseEdge -> [real: bb4, imaginary: bb3]; // scope 0 at $DIR/simple-match.rs:7:9: 7:13\n-    }\n-\n-    bb3: {\n         _0 = const 20_usize;             // scope 0 at $DIR/simple-match.rs:8:14: 8:16\n-        goto -> bb5;                     // scope 0 at $DIR/simple-match.rs:6:5: 9:6\n+        goto -> bb4;                     // scope 0 at $DIR/simple-match.rs:6:5: 9:6\n     }\n \n-    bb4: {\n+    bb3: {\n         _0 = const 10_usize;             // scope 0 at $DIR/simple-match.rs:7:17: 7:19\n-        goto -> bb5;                     // scope 0 at $DIR/simple-match.rs:6:5: 9:6\n-    }\n-\n-    bb5: {\n-        goto -> bb6;                     // scope 0 at $DIR/simple-match.rs:10:2: 10:2\n+        goto -> bb4;                     // scope 0 at $DIR/simple-match.rs:6:5: 9:6\n     }\n \n-    bb6: {\n+    bb4: {\n         return;                          // scope 0 at $DIR/simple-match.rs:10:2: 10:2\n     }\n }"}, {"sha": "33245b65e8c42fba438f86608ae485eb9ecfcf0d", "filename": "src/test/mir-opt/simplify_arm.id_try.SimplifyArmIdentity.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyArmIdentity.diff?ref=33337bb855d453c0077764f6a5488b3ff109b6f5", "patch": "@@ -92,7 +92,7 @@\n +         _0 = move _3;                    // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n           StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:24:15: 24:16\n           StorageDead(_2);                 // scope 0 at $DIR/simplify-arm.rs:26:1: 26:2\n-          goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n+          goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:26:2: 26:2\n       }\n   \n       bb4: {"}, {"sha": "eb2521c8ba08ec7cac792ce5d74b0697e20304cf", "filename": "src/test/mir-opt/simplify_arm.id_try.SimplifyBranchSame.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyBranchSame.diff", "raw_url": "https://github.com/rust-lang/rust/raw/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyBranchSame.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyBranchSame.diff?ref=33337bb855d453c0077764f6a5488b3ff109b6f5", "patch": "@@ -66,7 +66,7 @@\n -         _0 = move _3;                    // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n -         StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:24:15: 24:16\n -         StorageDead(_2);                 // scope 0 at $DIR/simplify-arm.rs:26:1: 26:2\n--         goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n+-         goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:26:2: 26:2\n -     }\n - \n -     bb4: {"}, {"sha": "62743057048fbf9d88bbc5e8ac61f572a41f1e18", "filename": "src/test/mir-opt/simplify_cfg.main.SimplifyCfg-early-opt.diff", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fsimplify_cfg.main.SimplifyCfg-early-opt.diff", "raw_url": "https://github.com/rust-lang/rust/raw/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fsimplify_cfg.main.SimplifyCfg-early-opt.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_cfg.main.SimplifyCfg-early-opt.diff?ref=33337bb855d453c0077764f6a5488b3ff109b6f5", "patch": "@@ -13,40 +13,40 @@\n - \n -     bb1: {\n           StorageLive(_2);                 // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n--         _2 = bar() -> bb3;               // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n+-         _2 = bar() -> bb2;               // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n +         _2 = bar() -> bb1;               // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n                                            // mir::Constant\n                                            // + span: $DIR/simplify_cfg.rs:7:12: 7:15\n                                            // + literal: Const { ty: fn() -> bool {bar}, val: Value(Scalar(<ZST>)) }\n       }\n   \n--     bb2 (cleanup): {\n--         resume;                          // scope 0 at $DIR/simplify_cfg.rs:5:1: 11:2\n+-     bb2: {\n+-         nop;                             // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n+-         switchInt(_2) -> [false: bb4, otherwise: bb3]; // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n +     bb1: {\n +         switchInt(_2) -> [false: bb2, otherwise: bb3]; // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n       }\n   \n -     bb3: {\n--         nop;                             // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n--         switchInt(_2) -> [false: bb5, otherwise: bb4]; // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n+-         goto -> bb5;                     // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n -     }\n - \n -     bb4: {\n--         goto -> bb6;                     // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n--     }\n-- \n--     bb5: {\n +     bb2: {\n           _1 = const ();                   // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n           StorageDead(_2);                 // scope 0 at $DIR/simplify_cfg.rs:10:5: 10:6\n           goto -> bb0;                     // scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n       }\n   \n--     bb6: {\n+-     bb5: {\n +     bb3: {\n           _0 = const ();                   // scope 0 at $DIR/simplify_cfg.rs:8:13: 8:18\n           StorageDead(_2);                 // scope 0 at $DIR/simplify_cfg.rs:10:5: 10:6\n           return;                          // scope 0 at $DIR/simplify_cfg.rs:11:2: 11:2\n+-     }\n+- \n+-     bb6 (cleanup): {\n+-         resume;                          // scope 0 at $DIR/simplify_cfg.rs:5:1: 11:2\n       }\n   }\n   "}, {"sha": "9a6afc58c4e9ddc82d038a737ed739e5054e1329", "filename": "src/test/mir-opt/simplify_cfg.main.SimplifyCfg-initial.diff", "status": "modified", "additions": 29, "deletions": 37, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fsimplify_cfg.main.SimplifyCfg-initial.diff", "raw_url": "https://github.com/rust-lang/rust/raw/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fsimplify_cfg.main.SimplifyCfg-initial.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_cfg.main.SimplifyCfg-initial.diff?ref=33337bb855d453c0077764f6a5488b3ff109b6f5", "patch": "@@ -9,78 +9,70 @@\n   \n       bb0: {\n -         goto -> bb1;                     // scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n-+         falseUnwind -> [real: bb1, cleanup: bb2]; // scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n++         falseUnwind -> [real: bb1, cleanup: bb6]; // scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n       }\n   \n       bb1: {\n--         falseUnwind -> [real: bb3, cleanup: bb4]; // scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n+-         falseUnwind -> [real: bb2, cleanup: bb11]; // scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n -     }\n - \n -     bb2: {\n--         goto -> bb13;                    // scope 0 at $DIR/simplify_cfg.rs:11:2: 11:2\n--     }\n-- \n--     bb3: {\n           StorageLive(_2);                 // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n--         _2 = bar() -> [return: bb5, unwind: bb4]; // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n-+         _2 = bar() -> [return: bb3, unwind: bb2]; // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n+-         _2 = bar() -> [return: bb3, unwind: bb11]; // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n++         _2 = bar() -> [return: bb2, unwind: bb6]; // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n                                            // mir::Constant\n                                            // + span: $DIR/simplify_cfg.rs:7:12: 7:15\n                                            // + literal: Const { ty: fn() -> bool {bar}, val: Value(Scalar(<ZST>)) }\n       }\n   \n--     bb4 (cleanup): {\n-+     bb2 (cleanup): {\n-          resume;                          // scope 0 at $DIR/simplify_cfg.rs:5:1: 11:2\n+-     bb3: {\n++     bb2: {\n+          FakeRead(ForMatchedPlace, _2);   // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n+-         switchInt(_2) -> [false: bb5, otherwise: bb4]; // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n++         switchInt(_2) -> [false: bb4, otherwise: bb3]; // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n       }\n   \n--     bb5: {\n+-     bb4: {\n+-         falseEdge -> [real: bb6, imaginary: bb5]; // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n +     bb3: {\n-          FakeRead(ForMatchedPlace, _2);   // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n--         switchInt(_2) -> [false: bb7, otherwise: bb6]; // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n-+         switchInt(_2) -> [false: bb5, otherwise: bb4]; // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n++         falseEdge -> [real: bb5, imaginary: bb4]; // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n       }\n   \n--     bb6: {\n--         falseEdge -> [real: bb8, imaginary: bb7]; // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n+-     bb5: {\n +     bb4: {\n-+         falseEdge -> [real: bb6, imaginary: bb5]; // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n-      }\n-  \n--     bb7: {\n-+     bb5: {\n           _1 = const ();                   // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n--         goto -> bb12;                    // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n+-         goto -> bb9;                     // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n +         StorageDead(_2);                 // scope 0 at $DIR/simplify_cfg.rs:10:5: 10:6\n +         goto -> bb0;                     // scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n       }\n   \n--     bb8: {\n-+     bb6: {\n+-     bb6: {\n++     bb5: {\n           _0 = const ();                   // scope 0 at $DIR/simplify_cfg.rs:8:13: 8:18\n--         goto -> bb9;                     // scope 0 at $DIR/simplify_cfg.rs:8:13: 8:18\n--     }\n-- \n--     bb9: {\n-          StorageDead(_2);                 // scope 0 at $DIR/simplify_cfg.rs:10:5: 10:6\n--         goto -> bb2;                     // scope 0 at $DIR/simplify_cfg.rs:8:13: 8:18\n+-         goto -> bb10;                    // scope 0 at $DIR/simplify_cfg.rs:8:13: 8:18\n -     }\n - \n--     bb10: {\n+-     bb7: {\n -         unreachable;                     // scope 0 at $DIR/simplify_cfg.rs:7:18: 9:10\n -     }\n - \n--     bb11: {\n--         goto -> bb12;                    // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n+-     bb8: {\n+-         goto -> bb9;                     // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n -     }\n - \n--     bb12: {\n--         StorageDead(_2);                 // scope 0 at $DIR/simplify_cfg.rs:10:5: 10:6\n+-     bb9: {\n+          StorageDead(_2);                 // scope 0 at $DIR/simplify_cfg.rs:10:5: 10:6\n -         goto -> bb1;                     // scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n -     }\n - \n--     bb13: {\n+-     bb10: {\n+-         StorageDead(_2);                 // scope 0 at $DIR/simplify_cfg.rs:10:5: 10:6\n           return;                          // scope 0 at $DIR/simplify_cfg.rs:11:2: 11:2\n       }\n+  \n+-     bb11 (cleanup): {\n++     bb6 (cleanup): {\n+          resume;                          // scope 0 at $DIR/simplify_cfg.rs:5:1: 11:2\n+      }\n   }\n   "}, {"sha": "6fa14f1e0d840fae389aeb1771a34d1f25d45adf", "filename": "src/test/mir-opt/simplify_try.try_identity.SimplifyArmIdentity.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyArmIdentity.diff?ref=33337bb855d453c0077764f6a5488b3ff109b6f5", "patch": "@@ -88,7 +88,7 @@\n +         _0 = move _3;                    // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n           StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:8:15: 8:16\n           StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:10:1: 10:2\n-          return;                          // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n+          return;                          // scope 0 at $DIR/simplify_try.rs:10:2: 10:2\n       }\n   }\n   "}, {"sha": "f8ecf1437672395938796f52504836a294a9281a", "filename": "src/test/mir-opt/spanview_block.main.mir_map.0.html.mir", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fspanview_block.main.mir_map.0.html.mir", "raw_url": "https://github.com/rust-lang/rust/raw/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fspanview_block.main.mir_map.0.html.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fspanview_block.main.mir_map.0.html.mir?ref=33337bb855d453c0077764f6a5488b3ff109b6f5", "patch": "@@ -61,7 +61,6 @@\n <body>\n <div class=\"code\" style=\"counter-reset: line 4\"><span class=\"line\"><span class=\"code\" style=\"--layer: 0\">fn main() </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"0: $DIR/spanview-block.rs:5:11: 5:13:\n     5:11-5:13: Assign: _0 = const ()\n-    5:13-5:13: Goto: goto -&gt; bb2\"><span class=\"annotation\">0\u298a</span>{}<span class=\"annotation\">\u29890</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"2: $DIR/spanview-block.rs:5:13: 5:13:\n-    5:13-5:13: Return: return\"><span class=\"annotation\">2\u298a</span>\u2038<span class=\"annotation\">\u29892</span></span></span></span></div>\n+    5:13-5:13: Return: return\"><span class=\"annotation\">0\u298a</span>{}<span class=\"annotation\">\u29890</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "8a34b8b5daecb3406a80017bc6c974a27e84c59d", "filename": "src/test/mir-opt/spanview_statement.main.mir_map.0.html.mir", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fspanview_statement.main.mir_map.0.html.mir", "raw_url": "https://github.com/rust-lang/rust/raw/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fspanview_statement.main.mir_map.0.html.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fspanview_statement.main.mir_map.0.html.mir?ref=33337bb855d453c0077764f6a5488b3ff109b6f5", "patch": "@@ -60,8 +60,7 @@\n </head>\n <body>\n <div class=\"code\" style=\"counter-reset: line 4\"><span class=\"line\"><span class=\"code\" style=\"--layer: 0\">fn main() </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"0[0]: $DIR/spanview-statement.rs:5:11: 5:13:\n-    5:11-5:13: Assign: _0 = const ()\"><span class=\"annotation\">0[0]\u298a</span>{}<span class=\"annotation\">\u29890[0]</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"0:Goto: $DIR/spanview-statement.rs:5:13: 5:13:\n-    5:13-5:13: Goto: goto -&gt; bb2\"><span class=\"annotation\">0:Goto\u298a</span>\u2038<span class=\"annotation\">\u29890:Goto</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"2:Return: $DIR/spanview-statement.rs:5:13: 5:13:\n-    5:13-5:13: Return: return\"><span class=\"annotation\">2:Return\u298a</span>\u2038<span class=\"annotation\">\u29892:Return</span></span></span></span></div>\n+    5:11-5:13: Assign: _0 = const ()\"><span class=\"annotation\">0[0]\u298a</span>{}<span class=\"annotation\">\u29890[0]</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"0:Return: $DIR/spanview-statement.rs:5:13: 5:13:\n+    5:13-5:13: Return: return\"><span class=\"annotation\">0:Return\u298a</span>\u2038<span class=\"annotation\">\u29890:Return</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "984b021384b084fe758fcbfb3cc6930201291c5b", "filename": "src/test/mir-opt/spanview_terminator.main.mir_map.0.html.mir", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fspanview_terminator.main.mir_map.0.html.mir", "raw_url": "https://github.com/rust-lang/rust/raw/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fspanview_terminator.main.mir_map.0.html.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fspanview_terminator.main.mir_map.0.html.mir?ref=33337bb855d453c0077764f6a5488b3ff109b6f5", "patch": "@@ -59,8 +59,7 @@\n     </style>\n </head>\n <body>\n-<div class=\"code\" style=\"counter-reset: line 4\"><span class=\"line\"><span class=\"code\" style=\"--layer: 0\">fn main() {}</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"0:Goto: $DIR/spanview-terminator.rs:5:13: 5:13:\n-    5:13-5:13: Goto: goto -&gt; bb2\"><span class=\"annotation\">0:Goto\u298a</span>\u2038<span class=\"annotation\">\u29890:Goto</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"2:Return: $DIR/spanview-terminator.rs:5:13: 5:13:\n-    5:13-5:13: Return: return\"><span class=\"annotation\">2:Return\u298a</span>\u2038<span class=\"annotation\">\u29892:Return</span></span></span></span></div>\n+<div class=\"code\" style=\"counter-reset: line 4\"><span class=\"line\"><span class=\"code\" style=\"--layer: 0\">fn main() {}</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"0:Return: $DIR/spanview-terminator.rs:5:13: 5:13:\n+    5:13-5:13: Return: return\"><span class=\"annotation\">0:Return\u298a</span>\u2038<span class=\"annotation\">\u29890:Return</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "6d05e8278ba527b20f047794063017a64a9b35a2", "filename": "src/test/mir-opt/storage_live_dead_in_statics.XXX.mir_map.0.mir", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics.XXX.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics.XXX.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics.XXX.mir_map.0.mir?ref=33337bb855d453c0077764f6a5488b3ff109b6f5", "patch": "@@ -159,8 +159,4 @@ static XXX: &Foo = {\n         StorageDead(_1);                 // scope 0 at $DIR/storage_live_dead_in_statics.rs:23:1: 23:2\n         return;                          // scope 0 at $DIR/storage_live_dead_in_statics.rs:5:1: 23:3\n     }\n-\n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/storage_live_dead_in_statics.rs:5:1: 23:3\n-    }\n }"}, {"sha": "d18f6308ded84e93308851faf27a822ff1b8e3c3", "filename": "src/test/mir-opt/uniform_array_move_out.move_out_by_subslice.mir_map.0.mir", "status": "modified", "additions": 25, "deletions": 41, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_by_subslice.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_by_subslice.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_by_subslice.mir_map.0.mir?ref=33337bb855d453c0077764f6a5488b3ff109b6f5", "patch": "@@ -22,78 +22,62 @@ fn move_out_by_subslice() -> () {\n         _3 = Box(i32);                   // scope 0 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n         (*_3) = const 1_i32;             // scope 0 at $DIR/uniform_array_move_out.rs:11:18: 11:19\n         _2 = move _3;                    // scope 0 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n-        drop(_3) -> [return: bb4, unwind: bb2]; // scope 0 at $DIR/uniform_array_move_out.rs:11:18: 11:19\n+        drop(_3) -> [return: bb1, unwind: bb9]; // scope 0 at $DIR/uniform_array_move_out.rs:11:18: 11:19\n     }\n \n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/uniform_array_move_out.rs:10:1: 13:2\n-    }\n-\n-    bb2 (cleanup): {\n-        drop(_2) -> bb1;                 // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n-    }\n-\n-    bb3 (cleanup): {\n-        drop(_3) -> bb2;                 // scope 0 at $DIR/uniform_array_move_out.rs:11:18: 11:19\n-    }\n-\n-    bb4: {\n+    bb1: {\n         StorageDead(_3);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:18: 11:19\n         StorageLive(_4);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n         StorageLive(_5);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n         _5 = Box(i32);                   // scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n         (*_5) = const 2_i32;             // scope 0 at $DIR/uniform_array_move_out.rs:11:25: 11:26\n         _4 = move _5;                    // scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n-        drop(_5) -> [return: bb7, unwind: bb5]; // scope 0 at $DIR/uniform_array_move_out.rs:11:25: 11:26\n-    }\n-\n-    bb5 (cleanup): {\n-        drop(_4) -> bb2;                 // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n-    }\n-\n-    bb6 (cleanup): {\n-        drop(_5) -> bb5;                 // scope 0 at $DIR/uniform_array_move_out.rs:11:25: 11:26\n+        drop(_5) -> [return: bb2, unwind: bb8]; // scope 0 at $DIR/uniform_array_move_out.rs:11:25: 11:26\n     }\n \n-    bb7: {\n+    bb2: {\n         StorageDead(_5);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:25: 11:26\n         _1 = [move _2, move _4];         // scope 0 at $DIR/uniform_array_move_out.rs:11:13: 11:27\n-        drop(_4) -> [return: bb8, unwind: bb2]; // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n+        drop(_4) -> [return: bb3, unwind: bb9]; // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n     }\n \n-    bb8: {\n+    bb3: {\n         StorageDead(_4);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n-        drop(_2) -> [return: bb9, unwind: bb1]; // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n+        drop(_2) -> [return: bb4, unwind: bb10]; // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n     }\n \n-    bb9: {\n+    bb4: {\n         StorageDead(_2);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n         FakeRead(ForLet, _1);            // scope 0 at $DIR/uniform_array_move_out.rs:11:9: 11:10\n         StorageLive(_6);                 // scope 1 at $DIR/uniform_array_move_out.rs:12:10: 12:17\n         _6 = move _1[0..2];              // scope 1 at $DIR/uniform_array_move_out.rs:12:10: 12:17\n         _0 = const ();                   // scope 0 at $DIR/uniform_array_move_out.rs:10:27: 13:2\n-        drop(_6) -> [return: bb12, unwind: bb10]; // scope 1 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n+        drop(_6) -> [return: bb5, unwind: bb7]; // scope 1 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n     }\n \n-    bb10 (cleanup): {\n-        drop(_1) -> bb1;                 // scope 0 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n+    bb5: {\n+        StorageDead(_6);                 // scope 1 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n+        drop(_1) -> [return: bb6, unwind: bb10]; // scope 0 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n     }\n \n-    bb11 (cleanup): {\n-        drop(_6) -> bb10;                // scope 1 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n+    bb6: {\n+        StorageDead(_1);                 // scope 0 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n+        return;                          // scope 0 at $DIR/uniform_array_move_out.rs:13:2: 13:2\n     }\n \n-    bb12: {\n-        StorageDead(_6);                 // scope 1 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n-        drop(_1) -> [return: bb13, unwind: bb1]; // scope 0 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n+    bb7 (cleanup): {\n+        drop(_1) -> bb10;                // scope 0 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n     }\n \n-    bb13: {\n-        StorageDead(_1);                 // scope 0 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n-        goto -> bb14;                    // scope 0 at $DIR/uniform_array_move_out.rs:13:2: 13:2\n+    bb8 (cleanup): {\n+        drop(_4) -> bb9;                 // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n     }\n \n-    bb14: {\n-        return;                          // scope 0 at $DIR/uniform_array_move_out.rs:13:2: 13:2\n+    bb9 (cleanup): {\n+        drop(_2) -> bb10;                // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n+    }\n+\n+    bb10 (cleanup): {\n+        resume;                          // scope 0 at $DIR/uniform_array_move_out.rs:10:1: 13:2\n     }\n }"}, {"sha": "eda8e5fd3afe7939f056584cb5d88b753a4afc51", "filename": "src/test/mir-opt/uniform_array_move_out.move_out_from_end.mir_map.0.mir", "status": "modified", "additions": 25, "deletions": 41, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_from_end.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_from_end.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_from_end.mir_map.0.mir?ref=33337bb855d453c0077764f6a5488b3ff109b6f5", "patch": "@@ -22,78 +22,62 @@ fn move_out_from_end() -> () {\n         _3 = Box(i32);                   // scope 0 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n         (*_3) = const 1_i32;             // scope 0 at $DIR/uniform_array_move_out.rs:5:18: 5:19\n         _2 = move _3;                    // scope 0 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n-        drop(_3) -> [return: bb4, unwind: bb2]; // scope 0 at $DIR/uniform_array_move_out.rs:5:18: 5:19\n+        drop(_3) -> [return: bb1, unwind: bb9]; // scope 0 at $DIR/uniform_array_move_out.rs:5:18: 5:19\n     }\n \n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/uniform_array_move_out.rs:4:1: 7:2\n-    }\n-\n-    bb2 (cleanup): {\n-        drop(_2) -> bb1;                 // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n-    }\n-\n-    bb3 (cleanup): {\n-        drop(_3) -> bb2;                 // scope 0 at $DIR/uniform_array_move_out.rs:5:18: 5:19\n-    }\n-\n-    bb4: {\n+    bb1: {\n         StorageDead(_3);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:18: 5:19\n         StorageLive(_4);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n         StorageLive(_5);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n         _5 = Box(i32);                   // scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n         (*_5) = const 2_i32;             // scope 0 at $DIR/uniform_array_move_out.rs:5:25: 5:26\n         _4 = move _5;                    // scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n-        drop(_5) -> [return: bb7, unwind: bb5]; // scope 0 at $DIR/uniform_array_move_out.rs:5:25: 5:26\n-    }\n-\n-    bb5 (cleanup): {\n-        drop(_4) -> bb2;                 // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n-    }\n-\n-    bb6 (cleanup): {\n-        drop(_5) -> bb5;                 // scope 0 at $DIR/uniform_array_move_out.rs:5:25: 5:26\n+        drop(_5) -> [return: bb2, unwind: bb8]; // scope 0 at $DIR/uniform_array_move_out.rs:5:25: 5:26\n     }\n \n-    bb7: {\n+    bb2: {\n         StorageDead(_5);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:25: 5:26\n         _1 = [move _2, move _4];         // scope 0 at $DIR/uniform_array_move_out.rs:5:13: 5:27\n-        drop(_4) -> [return: bb8, unwind: bb2]; // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n+        drop(_4) -> [return: bb3, unwind: bb9]; // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n     }\n \n-    bb8: {\n+    bb3: {\n         StorageDead(_4);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n-        drop(_2) -> [return: bb9, unwind: bb1]; // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n+        drop(_2) -> [return: bb4, unwind: bb10]; // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n     }\n \n-    bb9: {\n+    bb4: {\n         StorageDead(_2);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n         FakeRead(ForLet, _1);            // scope 0 at $DIR/uniform_array_move_out.rs:5:9: 5:10\n         StorageLive(_6);                 // scope 1 at $DIR/uniform_array_move_out.rs:6:14: 6:16\n         _6 = move _1[1 of 2];            // scope 1 at $DIR/uniform_array_move_out.rs:6:14: 6:16\n         _0 = const ();                   // scope 0 at $DIR/uniform_array_move_out.rs:4:24: 7:2\n-        drop(_6) -> [return: bb12, unwind: bb10]; // scope 1 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n+        drop(_6) -> [return: bb5, unwind: bb7]; // scope 1 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n     }\n \n-    bb10 (cleanup): {\n-        drop(_1) -> bb1;                 // scope 0 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n+    bb5: {\n+        StorageDead(_6);                 // scope 1 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n+        drop(_1) -> [return: bb6, unwind: bb10]; // scope 0 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n     }\n \n-    bb11 (cleanup): {\n-        drop(_6) -> bb10;                // scope 1 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n+    bb6: {\n+        StorageDead(_1);                 // scope 0 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n+        return;                          // scope 0 at $DIR/uniform_array_move_out.rs:7:2: 7:2\n     }\n \n-    bb12: {\n-        StorageDead(_6);                 // scope 1 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n-        drop(_1) -> [return: bb13, unwind: bb1]; // scope 0 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n+    bb7 (cleanup): {\n+        drop(_1) -> bb10;                // scope 0 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n     }\n \n-    bb13: {\n-        StorageDead(_1);                 // scope 0 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n-        goto -> bb14;                    // scope 0 at $DIR/uniform_array_move_out.rs:7:2: 7:2\n+    bb8 (cleanup): {\n+        drop(_4) -> bb9;                 // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n     }\n \n-    bb14: {\n-        return;                          // scope 0 at $DIR/uniform_array_move_out.rs:7:2: 7:2\n+    bb9 (cleanup): {\n+        drop(_2) -> bb10;                // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n+    }\n+\n+    bb10 (cleanup): {\n+        resume;                          // scope 0 at $DIR/uniform_array_move_out.rs:4:1: 7:2\n     }\n }"}, {"sha": "7c7f03ea6ad3ca96db660d231f8cc3e00d388a1b", "filename": "src/test/mir-opt/unusual_item_types.E-V-{constant#0}.mir_map.0.32bit.mir", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Funusual_item_types.E-V-%7Bconstant%230%7D.mir_map.0.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Funusual_item_types.E-V-%7Bconstant%230%7D.mir_map.0.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.E-V-%7Bconstant%230%7D.mir_map.0.32bit.mir?ref=33337bb855d453c0077764f6a5488b3ff109b6f5", "patch": "@@ -7,8 +7,4 @@ E::V::{constant#0}: isize = {\n         _0 = const 5_isize;              // scope 0 at $DIR/unusual-item-types.rs:22:9: 22:10\n         return;                          // scope 0 at $DIR/unusual-item-types.rs:22:9: 22:10\n     }\n-\n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/unusual-item-types.rs:22:9: 22:10\n-    }\n }"}, {"sha": "7c7f03ea6ad3ca96db660d231f8cc3e00d388a1b", "filename": "src/test/mir-opt/unusual_item_types.E-V-{constant#0}.mir_map.0.64bit.mir", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Funusual_item_types.E-V-%7Bconstant%230%7D.mir_map.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Funusual_item_types.E-V-%7Bconstant%230%7D.mir_map.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.E-V-%7Bconstant%230%7D.mir_map.0.64bit.mir?ref=33337bb855d453c0077764f6a5488b3ff109b6f5", "patch": "@@ -7,8 +7,4 @@ E::V::{constant#0}: isize = {\n         _0 = const 5_isize;              // scope 0 at $DIR/unusual-item-types.rs:22:9: 22:10\n         return;                          // scope 0 at $DIR/unusual-item-types.rs:22:9: 22:10\n     }\n-\n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/unusual-item-types.rs:22:9: 22:10\n-    }\n }"}, {"sha": "e4af5b3dfabef9c4b5e2b88f56d0f4f6832a7e16", "filename": "src/test/mir-opt/unusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.32bit.mir", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.32bit.mir?ref=33337bb855d453c0077764f6a5488b3ff109b6f5", "patch": "@@ -6,7 +6,7 @@ fn drop_in_place(_1: *mut Vec<i32>) -> () {\n     let mut _3: ();                      // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n \n     bb0: {\n-        goto -> bb7;                     // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+        goto -> bb6;                     // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n     }\n \n     bb1: {\n@@ -22,20 +22,16 @@ fn drop_in_place(_1: *mut Vec<i32>) -> () {\n     }\n \n     bb4 (cleanup): {\n-        goto -> bb2;                     // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+        drop(((*_1).0: alloc::raw_vec::RawVec<i32>)) -> bb2; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n     }\n \n-    bb5 (cleanup): {\n-        drop(((*_1).0: alloc::raw_vec::RawVec<i32>)) -> bb4; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+    bb5: {\n+        drop(((*_1).0: alloc::raw_vec::RawVec<i32>)) -> [return: bb3, unwind: bb2]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n     }\n \n     bb6: {\n-        drop(((*_1).0: alloc::raw_vec::RawVec<i32>)) -> [return: bb3, unwind: bb4]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-    }\n-\n-    bb7: {\n         _2 = &mut (*_1);                 // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-        _3 = <Vec<i32> as Drop>::drop(move _2) -> [return: bb6, unwind: bb5]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+        _3 = <Vec<i32> as Drop>::drop(move _2) -> [return: bb5, unwind: bb4]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n                                          // + literal: Const { ty: for<'r> fn(&'r mut std::vec::Vec<i32>) {<std::vec::Vec<i32> as std::ops::Drop>::drop}, val: Value(Scalar(<ZST>)) }"}, {"sha": "e4af5b3dfabef9c4b5e2b88f56d0f4f6832a7e16", "filename": "src/test/mir-opt/unusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.64bit.mir", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.64bit.mir?ref=33337bb855d453c0077764f6a5488b3ff109b6f5", "patch": "@@ -6,7 +6,7 @@ fn drop_in_place(_1: *mut Vec<i32>) -> () {\n     let mut _3: ();                      // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n \n     bb0: {\n-        goto -> bb7;                     // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+        goto -> bb6;                     // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n     }\n \n     bb1: {\n@@ -22,20 +22,16 @@ fn drop_in_place(_1: *mut Vec<i32>) -> () {\n     }\n \n     bb4 (cleanup): {\n-        goto -> bb2;                     // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+        drop(((*_1).0: alloc::raw_vec::RawVec<i32>)) -> bb2; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n     }\n \n-    bb5 (cleanup): {\n-        drop(((*_1).0: alloc::raw_vec::RawVec<i32>)) -> bb4; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+    bb5: {\n+        drop(((*_1).0: alloc::raw_vec::RawVec<i32>)) -> [return: bb3, unwind: bb2]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n     }\n \n     bb6: {\n-        drop(((*_1).0: alloc::raw_vec::RawVec<i32>)) -> [return: bb3, unwind: bb4]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-    }\n-\n-    bb7: {\n         _2 = &mut (*_1);                 // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-        _3 = <Vec<i32> as Drop>::drop(move _2) -> [return: bb6, unwind: bb5]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+        _3 = <Vec<i32> as Drop>::drop(move _2) -> [return: bb5, unwind: bb4]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n                                          // + literal: Const { ty: for<'r> fn(&'r mut std::vec::Vec<i32>) {<std::vec::Vec<i32> as std::ops::Drop>::drop}, val: Value(Scalar(<ZST>)) }"}, {"sha": "a046a89bc8cf216db48b9980e6f64acd6f3c5cfc", "filename": "src/test/mir-opt/unusual_item_types.{impl#0}-ASSOCIATED_CONSTANT.mir_map.0.32bit.mir", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Funusual_item_types.%7Bimpl%230%7D-ASSOCIATED_CONSTANT.mir_map.0.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Funusual_item_types.%7Bimpl%230%7D-ASSOCIATED_CONSTANT.mir_map.0.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.%7Bimpl%230%7D-ASSOCIATED_CONSTANT.mir_map.0.32bit.mir?ref=33337bb855d453c0077764f6a5488b3ff109b6f5", "patch": "@@ -7,8 +7,4 @@ const <impl at $DIR/unusual-item-types.rs:9:1: 11:2>::ASSOCIATED_CONSTANT: i32 =\n         _0 = const 2_i32;                // scope 0 at $DIR/unusual-item-types.rs:10:38: 10:39\n         return;                          // scope 0 at $DIR/unusual-item-types.rs:10:5: 10:40\n     }\n-\n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/unusual-item-types.rs:10:5: 10:40\n-    }\n }"}, {"sha": "a046a89bc8cf216db48b9980e6f64acd6f3c5cfc", "filename": "src/test/mir-opt/unusual_item_types.{impl#0}-ASSOCIATED_CONSTANT.mir_map.0.64bit.mir", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Funusual_item_types.%7Bimpl%230%7D-ASSOCIATED_CONSTANT.mir_map.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Funusual_item_types.%7Bimpl%230%7D-ASSOCIATED_CONSTANT.mir_map.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.%7Bimpl%230%7D-ASSOCIATED_CONSTANT.mir_map.0.64bit.mir?ref=33337bb855d453c0077764f6a5488b3ff109b6f5", "patch": "@@ -7,8 +7,4 @@ const <impl at $DIR/unusual-item-types.rs:9:1: 11:2>::ASSOCIATED_CONSTANT: i32 =\n         _0 = const 2_i32;                // scope 0 at $DIR/unusual-item-types.rs:10:38: 10:39\n         return;                          // scope 0 at $DIR/unusual-item-types.rs:10:5: 10:40\n     }\n-\n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/unusual-item-types.rs:10:5: 10:40\n-    }\n }"}, {"sha": "c27c68d870247ca55ab44392f377f9be6f345982", "filename": "src/test/mir-opt/while_storage.while_loop.PreCodegen.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fwhile_storage.while_loop.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/33337bb855d453c0077764f6a5488b3ff109b6f5/src%2Ftest%2Fmir-opt%2Fwhile_storage.while_loop.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile_storage.while_loop.PreCodegen.after.mir?ref=33337bb855d453c0077764f6a5488b3ff109b6f5", "patch": "@@ -52,7 +52,7 @@ fn while_loop(_1: bool) -> () {\n     bb6: {\n         _0 = const ();                   // scope 0 at $DIR/while-storage.rs:12:13: 12:18\n         StorageDead(_4);                 // scope 0 at $DIR/while-storage.rs:14:5: 14:6\n-        goto -> bb7;                     // scope 0 at $DIR/while-storage.rs:12:13: 12:18\n+        goto -> bb7;                     // scope 0 at $DIR/while-storage.rs:1:1: 1:1\n     }\n \n     bb7: {"}]}