{"sha": "7e76a196649e1675e9c210f659074499e37fb353", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlNzZhMTk2NjQ5ZTE2NzVlOWMyMTBmNjU5MDc0NDk5ZTM3ZmIzNTM=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-01-19T01:00:34Z"}, "committer": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-01-19T01:14:03Z"}, "message": "Apply review comments", "tree": {"sha": "abb5aa6c605b7defad1593e024cfc7a9a1360d17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abb5aa6c605b7defad1593e024cfc7a9a1360d17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e76a196649e1675e9c210f659074499e37fb353", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e76a196649e1675e9c210f659074499e37fb353", "html_url": "https://github.com/rust-lang/rust/commit/7e76a196649e1675e9c210f659074499e37fb353", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e76a196649e1675e9c210f659074499e37fb353/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce06ba3d30c2331c00596317284a0e1049b79929", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce06ba3d30c2331c00596317284a0e1049b79929", "html_url": "https://github.com/rust-lang/rust/commit/ce06ba3d30c2331c00596317284a0e1049b79929"}], "stats": {"total": 61, "additions": 28, "deletions": 33}, "files": [{"sha": "8a3dcb7b6e9c550bd1d079966e516c4e77a63510", "filename": "clippy_lints/src/if_let_some_result.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7e76a196649e1675e9c210f659074499e37fb353/clippy_lints%2Fsrc%2Fif_let_some_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e76a196649e1675e9c210f659074499e37fb353/clippy_lints%2Fsrc%2Fif_let_some_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_let_some_result.rs?ref=7e76a196649e1675e9c210f659074499e37fb353", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{match_type, method_chain_args, paths, snippet_with_applicability, span_lint_and_then};\n+use crate::utils::{match_type, method_chain_args, paths, snippet_with_applicability, span_lint_and_sugg};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::*;\n@@ -50,28 +50,27 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for OkIfLet {\n             then {\n                 let is_result_type = match_type(cx, cx.tables.expr_ty(&result_types[0]), &paths::RESULT);\n                 let mut applicability = Applicability::MachineApplicable;\n-                let trimed_ok_span = op.span.until(op.span.with_lo(ok_span.lo() - BytePos(1)));\n+                // ok_span = `ok`\n+                // op.span = `x.parse()   .   ok()`\n+                // op.span.until(op.span.with_lo(ok_span.lo() - BytePos(1))) = `x.parse()   .`\n+                // op.span.with_lo(ok_span.lo() - BytePos(1)) = ` ok()`\n+                // op.span.with_hi(ok_span.hi() - BytePos(1)) = `x.parse()   .   o`\n                 let some_expr_string = snippet_with_applicability(cx, y[0].span, \"\", &mut applicability);\n-                let trimmed_ok = snippet_with_applicability(cx, trimed_ok_span, \"\", &mut applicability);\n+                let trimmed_ok = snippet_with_applicability(cx, op.span.until(ok_span), \"\", &mut applicability);\n                 let sugg = format!(\n                     \"if let Ok({}) = {}\",\n                     some_expr_string,\n-                    trimmed_ok,\n+                    trimmed_ok.trim().trim_end_matches('.'),\n                 );\n                 if print::to_string(print::NO_ANN, |s| s.print_path(x, false)) == \"Some\" && is_result_type {\n-                    span_lint_and_then(\n+                    span_lint_and_sugg(\n                         cx,\n                         IF_LET_SOME_RESULT,\n-                        expr.span,\n+                        expr.span.with_hi(ok_span.hi() + BytePos(2)),\n                         \"Matching on `Some` with `ok()` is redundant\",\n-                        |db| {\n-                            db.span_suggestion(\n-                                expr.span.shrink_to_lo().to(ok_span.with_hi(ok_span.hi() + BytePos(2))),\n-                                &format!(\"Consider matching on `Ok({})` and removing the call to `ok` instead\", some_expr_string),\n-                                sugg,\n-                                applicability,\n-                            );\n-                        },\n+                        &format!(\"Consider matching on `Ok({})` and removing the call to `ok` instead\", some_expr_string),\n+                        sugg,\n+                        applicability,\n                     );\n                 }\n             }"}, {"sha": "80505fd997f42628919c4ceed0959b31411c2ebc", "filename": "tests/ui/if_let_some_result.fixed", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7e76a196649e1675e9c210f659074499e37fb353/tests%2Fui%2Fif_let_some_result.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7e76a196649e1675e9c210f659074499e37fb353/tests%2Fui%2Fif_let_some_result.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_let_some_result.fixed?ref=7e76a196649e1675e9c210f659074499e37fb353", "patch": "@@ -18,9 +18,10 @@ fn str_to_int_ok(x: &str) -> i32 {\n     }\n }\n \n-fn nested_some_no_else(x: &str) -> i32 {\n+#[rustfmt::skip]\n+fn strange_some_no_else(x: &str) -> i32 {\n     {\n-        if let Ok(y) = x.parse() {\n+        if let Ok(y) = x   .   parse()       {\n             return y;\n         };\n         0\n@@ -30,5 +31,5 @@ fn nested_some_no_else(x: &str) -> i32 {\n fn main() {\n     let _ = str_to_int(\"1\");\n     let _ = str_to_int_ok(\"2\");\n-    let _ = nested_some_no_else(\"3\");\n+    let _ = strange_some_no_else(\"3\");\n }"}, {"sha": "bee8156e08401539d1655cbd7a0e716137ecb78f", "filename": "tests/ui/if_let_some_result.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7e76a196649e1675e9c210f659074499e37fb353/tests%2Fui%2Fif_let_some_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e76a196649e1675e9c210f659074499e37fb353/tests%2Fui%2Fif_let_some_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_let_some_result.rs?ref=7e76a196649e1675e9c210f659074499e37fb353", "patch": "@@ -18,9 +18,10 @@ fn str_to_int_ok(x: &str) -> i32 {\n     }\n }\n \n-fn nested_some_no_else(x: &str) -> i32 {\n+#[rustfmt::skip]\n+fn strange_some_no_else(x: &str) -> i32 {\n     {\n-        if let Some(y) = x.parse().ok() {\n+        if let Some(y) = x   .   parse()   .   ok()    {\n             return y;\n         };\n         0\n@@ -30,5 +31,5 @@ fn nested_some_no_else(x: &str) -> i32 {\n fn main() {\n     let _ = str_to_int(\"1\");\n     let _ = str_to_int_ok(\"2\");\n-    let _ = nested_some_no_else(\"3\");\n+    let _ = strange_some_no_else(\"3\");\n }"}, {"sha": "b4adc526efa6c07ec3d7342cdfc9cfa63c5b7796", "filename": "tests/ui/if_let_some_result.stderr", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7e76a196649e1675e9c210f659074499e37fb353/tests%2Fui%2Fif_let_some_result.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e76a196649e1675e9c210f659074499e37fb353/tests%2Fui%2Fif_let_some_result.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_let_some_result.stderr?ref=7e76a196649e1675e9c210f659074499e37fb353", "patch": "@@ -1,12 +1,8 @@\n error: Matching on `Some` with `ok()` is redundant\n   --> $DIR/if_let_some_result.rs:6:5\n    |\n-LL | /     if let Some(y) = x.parse().ok() {\n-LL | |         y\n-LL | |     } else {\n-LL | |         0\n-LL | |     }\n-   | |_____^\n+LL |     if let Some(y) = x.parse().ok() {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::if-let-some-result` implied by `-D warnings`\n help: Consider matching on `Ok(y)` and removing the call to `ok` instead\n@@ -15,17 +11,15 @@ LL |     if let Ok(y) = x.parse() {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: Matching on `Some` with `ok()` is redundant\n-  --> $DIR/if_let_some_result.rs:23:9\n+  --> $DIR/if_let_some_result.rs:24:9\n    |\n-LL | /         if let Some(y) = x.parse().ok() {\n-LL | |             return y;\n-LL | |         };\n-   | |_________^\n+LL |         if let Some(y) = x   .   parse()   .   ok()    {\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n help: Consider matching on `Ok(y)` and removing the call to `ok` instead\n    |\n-LL |         if let Ok(y) = x.parse() {\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         if let Ok(y) = x   .   parse()       {\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}]}