{"sha": "482a67d20f3c7059c33368df424f781585ead7cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4MmE2N2QyMGYzYzcwNTljMzMzNjhkZjQyNGY3ODE1ODVlYWQ3Y2M=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-01-03T15:09:32Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-01-13T20:20:29Z"}, "message": "Properly handle `SyntaxContext` of dummy spans in incr comp\n\nFixes #80336\n\nDue to macro expansion, we may end up with spans with an invalid\nlocation and non-root `SyntaxContext`. This commits preserves the\n`SyntaxContext` of such spans in the incremental cache, and ensures\nthat we always hash the `SyntaxContext` when computing the `Fingerprint`\nof a `Span`\n\nPreviously, we would discard the `SyntaxContext` during serialization to\nthe incremental cache, causing the span's `Fingerprint` to change across\ncompilation sessions.", "tree": {"sha": "18062afb585364430c33ada59740403a208a3198", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18062afb585364430c33ada59740403a208a3198"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/482a67d20f3c7059c33368df424f781585ead7cc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl//Vg4ACgkQtAh+UQ6Y\nsWQODBAAmca575La9vC2fYohhujs3Rn6VVOqGsCzVqwiFVROoztjGvy3tLUebZND\njEjtCUURUZ1gAui+h7A6KHRJpGxi+BnIz2/FaTZNiIU5ocDuLg8whk17vmJWT/gt\nz8lbc3gkmNEfr6gGQEj3UPLNfCU9NWc+Mpd3BHWtldxCwtBxx+BkCLqtp2DIkcLJ\nkJJfJCIfftAw9d9hyZaIg/k38AFkbQ85SA5L6N+Jmfygy1oz4DebjLD1loq6QoGs\nF1qE82Xer5peUjTyT/sUzfLXjaT6u81qGXvMZgxxYilJpkmtdIbOFsDnZDy1rf3T\njZJ8BH3ZWMaWOd8OA6oa4skwIp4NDWWPWC1cyWFnXKt7Z/IGAfFF6tsVSUQ//yC1\nWe9TXuYFoDOFJvw9MR6J6WkOfiUT9aN7cX+8b6BVuH53kbJU0HiCnFYiecRnv/Yq\n4jE2DowwHVr6F8HVDdpimNs9bI7rVGapJeMWE5R2sPo8UB5ooamuhjCoJfGeztdu\ngfkPCbZM1tSS0gOHDEZVrbgM96pqwEDg+/JFxCILPZ4ERA2/xC1sov51a1KuZwNo\nrUeojV9cZJ9ULarFb0t7tYe9eaiSjFsk1NXBZfehimltmZureYI06LK4PJBlExf+\njIOL110FOY8R5gO9UeLY1Fdi5sI+BaTA00ncxOnVbonk3AhSNZM=\n=xjMI\n-----END PGP SIGNATURE-----", "payload": "tree 18062afb585364430c33ada59740403a208a3198\nparent fd2df74902fa98bcb71f85fd548c3eb399e6a96a\nauthor Aaron Hill <aa1ronham@gmail.com> 1609686572 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1610569229 -0500\n\nProperly handle `SyntaxContext` of dummy spans in incr comp\n\nFixes #80336\n\nDue to macro expansion, we may end up with spans with an invalid\nlocation and non-root `SyntaxContext`. This commits preserves the\n`SyntaxContext` of such spans in the incremental cache, and ensures\nthat we always hash the `SyntaxContext` when computing the `Fingerprint`\nof a `Span`\n\nPreviously, we would discard the `SyntaxContext` during serialization to\nthe incremental cache, causing the span's `Fingerprint` to change across\ncompilation sessions.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/482a67d20f3c7059c33368df424f781585ead7cc", "html_url": "https://github.com/rust-lang/rust/commit/482a67d20f3c7059c33368df424f781585ead7cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/482a67d20f3c7059c33368df424f781585ead7cc/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd2df74902fa98bcb71f85fd548c3eb399e6a96a", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd2df74902fa98bcb71f85fd548c3eb399e6a96a", "html_url": "https://github.com/rust-lang/rust/commit/fd2df74902fa98bcb71f85fd548c3eb399e6a96a"}], "stats": {"total": 45, "additions": 32, "deletions": 13}, "files": [{"sha": "6003509780a1da82ff0bb3e81cfc5f933b85e440", "filename": "compiler/rustc_middle/src/ty/query/on_disk_cache.rs", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/482a67d20f3c7059c33368df424f781585ead7cc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/482a67d20f3c7059c33368df424f781585ead7cc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=482a67d20f3c7059c33368df424f781585ead7cc", "patch": "@@ -32,8 +32,10 @@ use std::mem;\n \n const TAG_FILE_FOOTER: u128 = 0xC0FFEE_C0FFEE_C0FFEE_C0FFEE_C0FFEE;\n \n-const TAG_VALID_SPAN: u8 = 0;\n-const TAG_INVALID_SPAN: u8 = 1;\n+// A normal span encoded with both location information and a `SyntaxContext`\n+const TAG_FULL_SPAN: u8 = 0;\n+// A partial span with no location information, encoded only with a `SyntaxContext`\n+const TAG_PARTIAL_SPAN: u8 = 1;\n \n const TAG_SYNTAX_CONTEXT: u8 = 0;\n const TAG_EXPN_DATA: u8 = 1;\n@@ -864,10 +866,11 @@ impl<'a, 'tcx> Decodable<CacheDecoder<'a, 'tcx>> for Span {\n     fn decode(decoder: &mut CacheDecoder<'a, 'tcx>) -> Result<Self, String> {\n         let tag: u8 = Decodable::decode(decoder)?;\n \n-        if tag == TAG_INVALID_SPAN {\n-            return Ok(DUMMY_SP);\n+        if tag == TAG_PARTIAL_SPAN {\n+            let ctxt = SyntaxContext::decode(decoder)?;\n+            return Ok(DUMMY_SP.with_ctxt(ctxt));\n         } else {\n-            debug_assert_eq!(tag, TAG_VALID_SPAN);\n+            debug_assert_eq!(tag, TAG_FULL_SPAN);\n         }\n \n         let file_lo_index = SourceFileIndex::decode(decoder)?;\n@@ -1057,24 +1060,29 @@ where\n {\n     fn encode(&self, s: &mut CacheEncoder<'a, 'tcx, E>) -> Result<(), E::Error> {\n         if *self == DUMMY_SP {\n-            return TAG_INVALID_SPAN.encode(s);\n+            TAG_PARTIAL_SPAN.encode(s)?;\n+            return SyntaxContext::root().encode(s);\n         }\n \n         let span_data = self.data();\n-        let (file_lo, line_lo, col_lo) = match s.source_map.byte_pos_to_line_and_col(span_data.lo) {\n-            Some(pos) => pos,\n-            None => return TAG_INVALID_SPAN.encode(s),\n+        let pos = s.source_map.byte_pos_to_line_and_col(span_data.lo);\n+        let partial_span = match &pos {\n+            Some((file_lo, _, _)) => !file_lo.contains(span_data.hi),\n+            None => true,\n         };\n \n-        if !file_lo.contains(span_data.hi) {\n-            return TAG_INVALID_SPAN.encode(s);\n+        if partial_span {\n+            TAG_PARTIAL_SPAN.encode(s)?;\n+            return span_data.ctxt.encode(s);\n         }\n \n+        let (file_lo, line_lo, col_lo) = pos.unwrap();\n+\n         let len = span_data.hi - span_data.lo;\n \n         let source_file_index = s.source_file_index(file_lo);\n \n-        TAG_VALID_SPAN.encode(s)?;\n+        TAG_FULL_SPAN.encode(s)?;\n         source_file_index.encode(s)?;\n         line_lo.encode(s)?;\n         col_lo.encode(s)?;"}, {"sha": "50cb15554864fb92acf9abcbfab7eecd49bcea28", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/482a67d20f3c7059c33368df424f781585ead7cc/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/482a67d20f3c7059c33368df424f781585ead7cc/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=482a67d20f3c7059c33368df424f781585ead7cc", "patch": "@@ -1899,8 +1899,9 @@ where\n             return;\n         }\n \n-        if *self == DUMMY_SP {\n+        if self.is_dummy() {\n             Hash::hash(&TAG_INVALID_SPAN, hasher);\n+            self.ctxt().hash_stable(ctx, hasher);\n             return;\n         }\n "}, {"sha": "7757d915911dfce356c8b86dc730320aa77e628e", "filename": "src/test/incremental/issue-80336-invalid-span.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/482a67d20f3c7059c33368df424f781585ead7cc/src%2Ftest%2Fincremental%2Fissue-80336-invalid-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/482a67d20f3c7059c33368df424f781585ead7cc/src%2Ftest%2Fincremental%2Fissue-80336-invalid-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fissue-80336-invalid-span.rs?ref=482a67d20f3c7059c33368df424f781585ead7cc", "patch": "@@ -0,0 +1,10 @@\n+// Regression test for issue #80336\n+// Test that we properly handle encoding, decoding, and hashing\n+// of spans with an invalid location and non-root `SyntaxContext`\n+\n+// revisions:rpass1 rpass2\n+// only-x86_64\n+\n+pub fn main() {\n+    let _ = is_x86_feature_detected!(\"avx2\");\n+}"}]}