{"sha": "075c212849ad2207c0b0ccbd0ec6cc5b1f392275", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3NWMyMTI4NDlhZDIyMDdjMGIwY2NiZDBlYzZjYzViMWYzOTIyNzU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-19T09:46:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-19T09:46:29Z"}, "message": "Auto merge of #3776 - notriddle:drop-bounds, r=oli-obk\n\nAdd a lint to warn on `T: Drop` bounds\n\n**What it does:** Checks for generics with `std::ops::Drop` as bounds.\n\n**Why is this bad?** `Drop` bounds do not really accomplish anything.\nA type may have compiler-generated drop glue without implementing the\n`Drop` trait itself. The `Drop` trait also only has one method,\n`Drop::drop`, and that function is by fiat not callable in user code.\nSo there is really no use case for using `Drop` in trait bounds.\n\n**Known problems:** None.\n\n**Example:**\n```rust\nfn foo<T: Drop>() {}\n```\n\nFixes #3773", "tree": {"sha": "ef599c1d547203942bf3dabe51a3a5ad21de14c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef599c1d547203942bf3dabe51a3a5ad21de14c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/075c212849ad2207c0b0ccbd0ec6cc5b1f392275", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/075c212849ad2207c0b0ccbd0ec6cc5b1f392275", "html_url": "https://github.com/rust-lang/rust/commit/075c212849ad2207c0b0ccbd0ec6cc5b1f392275", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/075c212849ad2207c0b0ccbd0ec6cc5b1f392275/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d61b25419bec5a3e839fdb16f720cfb12e52ddf1", "url": "https://api.github.com/repos/rust-lang/rust/commits/d61b25419bec5a3e839fdb16f720cfb12e52ddf1", "html_url": "https://github.com/rust-lang/rust/commit/d61b25419bec5a3e839fdb16f720cfb12e52ddf1"}, {"sha": "bc4c3b6ff15f81e8e589b52b2098b929b4347449", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc4c3b6ff15f81e8e589b52b2098b929b4347449", "html_url": "https://github.com/rust-lang/rust/commit/bc4c3b6ff15f81e8e589b52b2098b929b4347449"}], "stats": {"total": 111, "additions": 110, "deletions": 1}, "files": [{"sha": "2545e90b3483705dfa9c513fd7bfb940be450c78", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/075c212849ad2207c0b0ccbd0ec6cc5b1f392275/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/075c212849ad2207c0b0ccbd0ec6cc5b1f392275/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=075c212849ad2207c0b0ccbd0ec6cc5b1f392275", "patch": "@@ -785,6 +785,7 @@ All notable changes to this project will be documented in this file.\n [`double_comparisons`]: https://rust-lang.github.io/rust-clippy/master/index.html#double_comparisons\n [`double_neg`]: https://rust-lang.github.io/rust-clippy/master/index.html#double_neg\n [`double_parens`]: https://rust-lang.github.io/rust-clippy/master/index.html#double_parens\n+[`drop_bounds`]: https://rust-lang.github.io/rust-clippy/master/index.html#drop_bounds\n [`drop_copy`]: https://rust-lang.github.io/rust-clippy/master/index.html#drop_copy\n [`drop_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#drop_ref\n [`duplicate_underscore_argument`]: https://rust-lang.github.io/rust-clippy/master/index.html#duplicate_underscore_argument"}, {"sha": "65ba445ded8be970894deb834f997e04f1e44460", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/075c212849ad2207c0b0ccbd0ec6cc5b1f392275/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/075c212849ad2207c0b0ccbd0ec6cc5b1f392275/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=075c212849ad2207c0b0ccbd0ec6cc5b1f392275", "patch": "@@ -7,7 +7,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 296 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are 297 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "90be6c34fe55c8fe5161a65a4b9f44963b2773eb", "filename": "clippy_lints/src/drop_bounds.rs", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/075c212849ad2207c0b0ccbd0ec6cc5b1f392275/clippy_lints%2Fsrc%2Fdrop_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/075c212849ad2207c0b0ccbd0ec6cc5b1f392275/clippy_lints%2Fsrc%2Fdrop_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdrop_bounds.rs?ref=075c212849ad2207c0b0ccbd0ec6cc5b1f392275", "patch": "@@ -0,0 +1,79 @@\n+use crate::utils::{match_def_path, paths, span_lint};\n+use if_chain::if_chain;\n+use rustc::hir::*;\n+use rustc::lint::{LateLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+\n+/// **What it does:** Checks for generics with `std::ops::Drop` as bounds.\n+///\n+/// **Why is this bad?** `Drop` bounds do not really accomplish anything.\n+/// A type may have compiler-generated drop glue without implementing the\n+/// `Drop` trait itself. The `Drop` trait also only has one method,\n+/// `Drop::drop`, and that function is by fiat not callable in user code.\n+/// So there is really no use case for using `Drop` in trait bounds.\n+///\n+/// The most likely use case of a drop bound is to distinguish between types\n+/// that have destructors and types that don't. Combined with specialization,\n+/// a naive coder would write an implementation that assumed a type could be\n+/// trivially dropped, then write a specialization for `T: Drop` that actually\n+/// calls the destructor. Except that doing so is not correct; String, for\n+/// example, doesn't actually implement Drop, but because String contains a\n+/// Vec, assuming it can be trivially dropped will leak memory.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// fn foo<T: Drop>() {}\n+/// ```\n+declare_clippy_lint! {\n+    pub DROP_BOUNDS,\n+    correctness,\n+    \"Bounds of the form `T: Drop` are useless\"\n+}\n+\n+const DROP_BOUNDS_SUMMARY: &str = \"Bounds of the form `T: Drop` are useless. \\\n+                                   Use `std::mem::needs_drop` to detect if a type has drop glue.\";\n+\n+pub struct Pass;\n+\n+impl LintPass for Pass {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(DROP_BOUNDS)\n+    }\n+\n+    fn name(&self) -> &'static str {\n+        \"DropBounds\"\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+    fn check_generic_param(&mut self, cx: &rustc::lint::LateContext<'a, 'tcx>, p: &'tcx GenericParam) {\n+        for bound in &p.bounds {\n+            lint_bound(cx, bound);\n+        }\n+    }\n+    fn check_where_predicate(&mut self, cx: &rustc::lint::LateContext<'a, 'tcx>, p: &'tcx WherePredicate) {\n+        if let WherePredicate::BoundPredicate(WhereBoundPredicate { bounds, .. }) = p {\n+            for bound in bounds {\n+                lint_bound(cx, bound);\n+            }\n+        }\n+    }\n+}\n+\n+fn lint_bound<'a, 'tcx>(cx: &rustc::lint::LateContext<'a, 'tcx>, bound: &'tcx GenericBound) {\n+    if_chain! {\n+        if let GenericBound::Trait(t, _) = bound;\n+        if let Some(def_id) = t.trait_ref.path.def.opt_def_id();\n+        if match_def_path(cx.tcx, def_id, &paths::DROP_TRAIT);\n+        then {\n+            span_lint(\n+                cx,\n+                DROP_BOUNDS,\n+                t.span,\n+                DROP_BOUNDS_SUMMARY\n+            );\n+        }\n+    }\n+}"}, {"sha": "1e2e861ea27fe5fb5611d1528808261d1a398a4b", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/075c212849ad2207c0b0ccbd0ec6cc5b1f392275/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/075c212849ad2207c0b0ccbd0ec6cc5b1f392275/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=075c212849ad2207c0b0ccbd0ec6cc5b1f392275", "patch": "@@ -144,6 +144,7 @@ pub mod derive;\n pub mod doc;\n pub mod double_comparison;\n pub mod double_parens;\n+pub mod drop_bounds;\n pub mod drop_forget_ref;\n pub mod duration_subsec;\n pub mod else_if_without_else;\n@@ -467,6 +468,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n     reg.register_late_lint_pass(box derive::Derive);\n     reg.register_late_lint_pass(box types::CharLitAsU8);\n     reg.register_late_lint_pass(box vec::Pass);\n+    reg.register_late_lint_pass(box drop_bounds::Pass);\n     reg.register_late_lint_pass(box drop_forget_ref::Pass);\n     reg.register_late_lint_pass(box empty_enum::EmptyEnum);\n     reg.register_late_lint_pass(box types::AbsurdExtremeComparisons);\n@@ -653,6 +655,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         derive::DERIVE_HASH_XOR_EQ,\n         double_comparison::DOUBLE_COMPARISONS,\n         double_parens::DOUBLE_PARENS,\n+        drop_bounds::DROP_BOUNDS,\n         drop_forget_ref::DROP_COPY,\n         drop_forget_ref::DROP_REF,\n         drop_forget_ref::FORGET_COPY,\n@@ -1017,6 +1020,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         copies::IFS_SAME_COND,\n         copies::IF_SAME_THEN_ELSE,\n         derive::DERIVE_HASH_XOR_EQ,\n+        drop_bounds::DROP_BOUNDS,\n         drop_forget_ref::DROP_COPY,\n         drop_forget_ref::DROP_REF,\n         drop_forget_ref::FORGET_COPY,"}, {"sha": "4108732653ff3619923a246c81f051d9b34a8aa1", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/075c212849ad2207c0b0ccbd0ec6cc5b1f392275/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/075c212849ad2207c0b0ccbd0ec6cc5b1f392275/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=075c212849ad2207c0b0ccbd0ec6cc5b1f392275", "patch": "@@ -24,6 +24,7 @@ pub const DEREF_TRAIT_METHOD: [&str; 5] = [\"core\", \"ops\", \"deref\", \"Deref\", \"der\n pub const DISPLAY_FMT_METHOD: [&str; 4] = [\"core\", \"fmt\", \"Display\", \"fmt\"];\n pub const DOUBLE_ENDED_ITERATOR: [&str; 4] = [\"core\", \"iter\", \"traits\", \"DoubleEndedIterator\"];\n pub const DROP: [&str; 3] = [\"core\", \"mem\", \"drop\"];\n+pub const DROP_TRAIT: [&str; 4] = [\"core\", \"ops\", \"drop\", \"Drop\"];\n pub const DURATION: [&str; 3] = [\"core\", \"time\", \"Duration\"];\n pub const EARLY_CONTEXT: [&str; 4] = [\"rustc\", \"lint\", \"context\", \"EarlyContext\"];\n pub const FMT_ARGUMENTS_NEWV1: [&str; 4] = [\"core\", \"fmt\", \"Arguments\", \"new_v1\"];"}, {"sha": "6d6a9dc0783993f4f2e63520c78a23eb5c0f3331", "filename": "tests/ui/drop_bounds.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/075c212849ad2207c0b0ccbd0ec6cc5b1f392275/tests%2Fui%2Fdrop_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/075c212849ad2207c0b0ccbd0ec6cc5b1f392275/tests%2Fui%2Fdrop_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_bounds.rs?ref=075c212849ad2207c0b0ccbd0ec6cc5b1f392275", "patch": "@@ -0,0 +1,8 @@\n+#![allow(unused)]\n+fn foo<T: Drop>() {}\n+fn bar<T>()\n+where\n+    T: Drop,\n+{\n+}\n+fn main() {}"}, {"sha": "cc87913ecb1a316698bcec945e1089540b39e8b0", "filename": "tests/ui/drop_bounds.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/075c212849ad2207c0b0ccbd0ec6cc5b1f392275/tests%2Fui%2Fdrop_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/075c212849ad2207c0b0ccbd0ec6cc5b1f392275/tests%2Fui%2Fdrop_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_bounds.stderr?ref=075c212849ad2207c0b0ccbd0ec6cc5b1f392275", "patch": "@@ -0,0 +1,16 @@\n+error: Bounds of the form `T: Drop` are useless. Use `std::mem::needs_drop` to detect if a type has drop glue.\n+  --> $DIR/drop_bounds.rs:2:11\n+   |\n+LL | fn foo<T: Drop>() {}\n+   |           ^^^^\n+   |\n+   = note: #[deny(clippy::drop_bounds)] on by default\n+\n+error: Bounds of the form `T: Drop` are useless. Use `std::mem::needs_drop` to detect if a type has drop glue.\n+  --> $DIR/drop_bounds.rs:5:8\n+   |\n+LL |     T: Drop,\n+   |        ^^^^\n+\n+error: aborting due to 2 previous errors\n+"}]}