{"sha": "372673b58c09355c6ca963a05e2cbc142b832eac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3MjY3M2I1OGMwOTM1NWM2Y2E5NjNhMDVlMmNiYzE0MmI4MzJlYWM=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-03-23T21:41:02Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-03-23T23:25:10Z"}, "message": "Remove char::to_lower, char::to_upper, use libc versions instead\n\nAs per Graydon's comments on #1985: remove char::to_lower and\nchar::to_upper. The str versions of these functions now call\nlibc::tolower and libc::toupper (using wrappers that cast between\nchar and c_char). Not sure how much better that is, but it at least\nmakes it clearer that these functions are Unicode-unsafe.", "tree": {"sha": "87a049772e1586af333c49c1bf9e19ccfabc03c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87a049772e1586af333c49c1bf9e19ccfabc03c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/372673b58c09355c6ca963a05e2cbc142b832eac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/372673b58c09355c6ca963a05e2cbc142b832eac", "html_url": "https://github.com/rust-lang/rust/commit/372673b58c09355c6ca963a05e2cbc142b832eac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/372673b58c09355c6ca963a05e2cbc142b832eac/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cab4f1685b6dde0503570e351f893a75d2efd8e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/cab4f1685b6dde0503570e351f893a75d2efd8e1", "html_url": "https://github.com/rust-lang/rust/commit/cab4f1685b6dde0503570e351f893a75d2efd8e1"}], "stats": {"total": 73, "additions": 17, "deletions": 56}, "files": [{"sha": "910c28409a1e5be010689181540d55cc9b23c170", "filename": "src/libcore/char.rs", "status": "modified", "additions": 1, "deletions": 43, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/372673b58c09355c6ca963a05e2cbc142b832eac/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372673b58c09355c6ca963a05e2cbc142b832eac/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=372673b58c09355c6ca963a05e2cbc142b832eac", "patch": "@@ -38,7 +38,7 @@ export is_alphabetic,\n        is_lowercase, is_uppercase,\n        is_whitespace, is_alphanumeric,\n        is_ascii, is_digit,\n-       to_digit, to_lower, to_upper, cmp;\n+       to_digit, cmp;\n \n import is_alphabetic = unicode::derived_property::Alphabetic;\n import is_XID_start = unicode::derived_property::XID_Start;\n@@ -122,30 +122,6 @@ pure fn to_digit(c: char, radix: uint) -> option<uint> {\n     else { none }\n }\n \n-/*\n- FIXME: works only on ASCII (Issue #1985)\n-*/\n-#[doc = \"Convert a char to the corresponding lower case.\"]\n-pure fn to_lower(c: char) -> char {\n-    assert is_ascii(c);\n-    alt c {\n-      'A' to 'Z' { ((c as u8) + 32u8) as char }\n-      _ { c }\n-    }\n-}\n-\n-/*\n- FIXME: works only on ASCII (Issue 1985)\n-*/\n-#[doc = \"Convert a char to the corresponding upper case.\"]\n-pure fn to_upper(c: char) -> char {\n-    assert is_ascii(c);\n-    alt c {\n-      'a' to 'z' { ((c as u8) - 32u8) as char }\n-      _ { c }\n-    }\n-}\n-\n #[doc = \"\n Compare two chars\n \n@@ -206,24 +182,6 @@ fn test_to_digit() {\n     assert to_digit('$', 36u) == none;\n }\n \n-#[test]\n-fn test_to_lower() {\n-    assert (to_lower('H') == 'h');\n-    assert (to_lower('e') == 'e');\n-    // non-ASCII, shouldn't work (see earlier FIXME)\n-    //assert (to_lower('\u00d6') == '\u00f6');\n-    //assert (to_lower('\u00df') == '\u00df');\n-}\n-\n-#[test]\n-fn test_to_upper() {\n-    assert (to_upper('l') == 'L');\n-    assert (to_upper('Q') == 'Q');\n-    // non-ASCII, shouldn't work (see earlier FIXME)\n-    //assert (to_upper('\u00fc') == '\u00dc');\n-    //assert (to_upper('\u00df') == '\u00df');\n-}\n-\n #[test]\n fn test_is_ascii() unsafe {\n    assert str::all(\"banana\", char::is_ascii);"}, {"sha": "912ab3a7429d6dbde5731ce46076cba655c9b524", "filename": "src/libcore/libc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/372673b58c09355c6ca963a05e2cbc142b832eac/src%2Flibcore%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372673b58c09355c6ca963a05e2cbc142b832eac/src%2Flibcore%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flibc.rs?ref=372673b58c09355c6ca963a05e2cbc142b832eac", "patch": "@@ -736,8 +736,8 @@ mod funcs {\n             fn isspace(c: c_int) -> c_int;\n             fn isupper(c: c_int) -> c_int;\n             fn isxdigit(c: c_int) -> c_int;\n-            fn tolower(c: c_int) -> c_int;\n-            fn toupper(c: c_int) -> c_int;\n+            fn tolower(c: c_char) -> c_char;\n+            fn toupper(c: c_char) -> c_char;\n         }\n \n         #[nolink]"}, {"sha": "057c0b0d187fee861afeb93f91df5a8b20af4905", "filename": "src/libcore/str.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/372673b58c09355c6ca963a05e2cbc142b832eac/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372673b58c09355c6ca963a05e2cbc142b832eac/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=372673b58c09355c6ca963a05e2cbc142b832eac", "patch": "@@ -95,7 +95,6 @@ export\n \n    unsafe;\n \n-\n #[abi = \"cdecl\"]\n native mod rustrt {\n     fn rust_str_push(&s: str, ch: u8);\n@@ -492,14 +491,14 @@ fn words(s: str) -> [str] {\n     split_nonempty(s, {|c| char::is_whitespace(c)})\n }\n \n-#[doc = \"Convert a string to lowercase\"]\n+#[doc = \"Convert a string to lowercase. ASCII only\"]\n fn to_lower(s: str) -> str {\n-    map(s, char::to_lower)\n+    map(s, {|c| (libc::tolower(c as libc::c_char)) as char})\n }\n \n-#[doc = \"Convert a string to uppercase\"]\n+#[doc = \"Convert a string to uppercase. ASCII only\"]\n fn to_upper(s: str) -> str {\n-    map(s, char::to_upper)\n+    map(s, {|c| (libc::toupper(c as libc::c_char)) as char})\n }\n \n #[doc = \"\n@@ -1629,6 +1628,8 @@ mod unsafe {\n #[cfg(test)]\n mod tests {\n \n+    import libc::c_char;\n+\n     #[test]\n     fn test_eq() {\n         assert (eq(\"\", \"\"));\n@@ -1937,9 +1938,9 @@ mod tests {\n \n     #[test]\n     fn test_to_upper() {\n-        // char::to_upper, and hence str::to_upper\n+        // libc::toupper, and hence str::to_upper\n         // are culturally insensitive: they only work for ASCII\n-        // (see Issue #1985)\n+        // (see Issue #1347)\n         let unicode = \"\"; //\"\\u65e5\\u672c\"; // uncomment once non-ASCII works\n         let input = \"abcDEF\" + unicode + \"xyz:.;\";\n         let expected = \"ABCDEF\" + unicode + \"XYZ:.;\";\n@@ -1949,8 +1950,9 @@ mod tests {\n \n     #[test]\n     fn test_to_lower() {\n-        assert \"\" == map(\"\", char::to_lower);\n-        assert \"ymca\" == map(\"YMCA\", char::to_lower);\n+        assert \"\" == map(\"\", {|c| libc::tolower(c as c_char) as char});\n+        assert \"ymca\" == map(\"YMCA\",\n+                             {|c| libc::tolower(c as c_char) as char});\n     }\n \n     #[test]\n@@ -2401,8 +2403,9 @@ mod tests {\n \n     #[test]\n     fn test_map() {\n-        assert \"\" == map(\"\", char::to_upper);\n-        assert \"YMCA\" == map(\"ymca\", char::to_upper);\n+        assert \"\" == map(\"\", {|c| libc::toupper(c as c_char) as char});\n+        assert \"YMCA\" == map(\"ymca\", {|c| libc::toupper(c as c_char)\n+              as char});\n     }\n \n     #[test]"}]}