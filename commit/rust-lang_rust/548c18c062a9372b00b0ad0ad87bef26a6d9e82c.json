{"sha": "548c18c062a9372b00b0ad0ad87bef26a6d9e82c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0OGMxOGMwNjJhOTM3MmIwMGIwYWQwYWQ4N2JlZjI2YTZkOWU4MmM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-05-02T18:34:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-02T18:34:29Z"}, "message": "Merge #8693\n\n8693: Ensure that only one cache priming task can run at a time r=matklad a=Bobo1239\n\nFixes #8632.\n\nCo-authored-by: Boris-Chengbiao Zhou <bobo1239@web.de>", "tree": {"sha": "b43ba7416724e4fbe68186d0d1d6a4d396e4f675", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b43ba7416724e4fbe68186d0d1d6a4d396e4f675"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/548c18c062a9372b00b0ad0ad87bef26a6d9e82c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgjvC1CRBK7hj4Ov3rIwAADmgIAGAYIB+tVNzior7fomv0Xqe6\nEJnGxmneeSz7ZIMPNdLUIZJXwYoZY5mHykUSC0n/hEOitZiAYtPBuH61riIMYIB3\nI1Jo7WiHTT4mf3JR8flVQVbASP3RuPq/GvSL83Z9So3BtC65FZ/x+1KWCinrjfkU\nrdMvwnSfBkmDC/TWsIbdLtd97H5O5UYZPsW5uHO1PfHJHVKCfJ46kjQoAsO1cu2P\nNCBGNrzAgNMyIHfb71T21JFwxZpLCgN4/W9fAJ5taoKTqKZj1wma0QaKf6sbnXpT\n6NOGDsEcN4TNA4geb7i6Yz6CgVyDCnueBJWgyM+wuiVO613++KfcbuGGpOKageY=\n=a8sF\n-----END PGP SIGNATURE-----\n", "payload": "tree b43ba7416724e4fbe68186d0d1d6a4d396e4f675\nparent e1bef531095f152649a7e20e992cf97ba6b3f990\nparent ce8c6c47626c3fee3ca49fb3aec4f2c588b3db7a\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1619980469 +0000\ncommitter GitHub <noreply@github.com> 1619980469 +0000\n\nMerge #8693\n\n8693: Ensure that only one cache priming task can run at a time r=matklad a=Bobo1239\n\nFixes #8632.\n\nCo-authored-by: Boris-Chengbiao Zhou <bobo1239@web.de>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/548c18c062a9372b00b0ad0ad87bef26a6d9e82c", "html_url": "https://github.com/rust-lang/rust/commit/548c18c062a9372b00b0ad0ad87bef26a6d9e82c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/548c18c062a9372b00b0ad0ad87bef26a6d9e82c/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1bef531095f152649a7e20e992cf97ba6b3f990", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1bef531095f152649a7e20e992cf97ba6b3f990", "html_url": "https://github.com/rust-lang/rust/commit/e1bef531095f152649a7e20e992cf97ba6b3f990"}, {"sha": "ce8c6c47626c3fee3ca49fb3aec4f2c588b3db7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce8c6c47626c3fee3ca49fb3aec4f2c588b3db7a", "html_url": "https://github.com/rust-lang/rust/commit/ce8c6c47626c3fee3ca49fb3aec4f2c588b3db7a"}], "stats": {"total": 18, "additions": 18, "deletions": 0}, "files": [{"sha": "6f2f482c150636de271fc84efe0aa92e36c7165e", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/548c18c062a9372b00b0ad0ad87bef26a6d9e82c/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/548c18c062a9372b00b0ad0ad87bef26a6d9e82c/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=548c18c062a9372b00b0ad0ad87bef26a6d9e82c", "patch": "@@ -84,6 +84,7 @@ pub(crate) struct GlobalState {\n     pub(crate) workspace_build_data: Option<BuildDataResult>,\n     pub(crate) fetch_build_data_queue:\n         OpQueue<BuildDataCollector, Option<anyhow::Result<BuildDataResult>>>,\n+    pub(crate) prime_caches_queue: OpQueue<(), ()>,\n \n     latest_requests: Arc<RwLock<LatestRequests>>,\n }\n@@ -146,6 +147,7 @@ impl GlobalState {\n             workspaces: Arc::new(Vec::new()),\n             fetch_workspaces_queue: OpQueue::default(),\n             workspace_build_data: None,\n+            prime_caches_queue: OpQueue::default(),\n \n             fetch_build_data_queue: OpQueue::default(),\n             latest_requests: Default::default(),"}, {"sha": "a3e974e928ff4eab0e62e54f2cb9ad8f4a301246", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/548c18c062a9372b00b0ad0ad87bef26a6d9e82c/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/548c18c062a9372b00b0ad0ad87bef26a6d9e82c/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=548c18c062a9372b00b0ad0ad87bef26a6d9e82c", "patch": "@@ -278,6 +278,8 @@ impl GlobalState {\n                     };\n                 }\n \n+                let mut finished = false;\n+\n                 for progress in prime_caches_progress {\n                     let (state, message, fraction);\n                     match progress {\n@@ -295,11 +297,18 @@ impl GlobalState {\n                             state = Progress::End;\n                             message = None;\n                             fraction = 1.0;\n+                            finished = true;\n                         }\n                     };\n \n                     self.report_progress(\"Indexing\", state, message, Some(fraction));\n                 }\n+\n+                // If the task is cancelled we may observe two `PrimeCachesProgress::Finished` so we\n+                // have to make sure to only call `op_completed()` once.\n+                if finished {\n+                    self.prime_caches_queue.op_completed(());\n+                }\n             }\n             Event::Vfs(mut task) => {\n                 let _p = profile::span(\"GlobalState::handle_event/vfs\");\n@@ -711,6 +720,13 @@ impl GlobalState {\n     }\n     fn update_file_notifications_on_threadpool(&mut self) {\n         self.maybe_update_diagnostics();\n+\n+        // Ensure that only one cache priming task can run at a time\n+        self.prime_caches_queue.request_op(());\n+        if self.prime_caches_queue.should_start_op().is_none() {\n+            return;\n+        }\n+\n         self.task_pool.handle.spawn_with_sender({\n             let snap = self.snapshot();\n             move |sender| {"}]}