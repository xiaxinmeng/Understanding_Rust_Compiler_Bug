{"sha": "0c017ea058a9f99176295496e1eda29330303f0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjMDE3ZWEwNThhOWY5OTE3NjI5NTQ5NmUxZWRhMjkzMzAzMDNmMGQ=", "commit": {"author": {"name": "mbartlett21", "email": "29034492+mbartlett21@users.noreply.github.com", "date": "2021-05-25T02:12:27Z"}, "committer": {"name": "mbartlett21", "email": "29034492+mbartlett21@users.noreply.github.com", "date": "2021-05-25T02:12:27Z"}, "message": "Remove semicolons in `clippy_utils`", "tree": {"sha": "ebe16cf85e5c66bfd52abc5bc625192cd3d1cb16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebe16cf85e5c66bfd52abc5bc625192cd3d1cb16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c017ea058a9f99176295496e1eda29330303f0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c017ea058a9f99176295496e1eda29330303f0d", "html_url": "https://github.com/rust-lang/rust/commit/0c017ea058a9f99176295496e1eda29330303f0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c017ea058a9f99176295496e1eda29330303f0d/comments", "author": {"login": "mbartlett21", "id": 29034492, "node_id": "MDQ6VXNlcjI5MDM0NDky", "avatar_url": "https://avatars.githubusercontent.com/u/29034492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbartlett21", "html_url": "https://github.com/mbartlett21", "followers_url": "https://api.github.com/users/mbartlett21/followers", "following_url": "https://api.github.com/users/mbartlett21/following{/other_user}", "gists_url": "https://api.github.com/users/mbartlett21/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbartlett21/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbartlett21/subscriptions", "organizations_url": "https://api.github.com/users/mbartlett21/orgs", "repos_url": "https://api.github.com/users/mbartlett21/repos", "events_url": "https://api.github.com/users/mbartlett21/events{/privacy}", "received_events_url": "https://api.github.com/users/mbartlett21/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mbartlett21", "id": 29034492, "node_id": "MDQ6VXNlcjI5MDM0NDky", "avatar_url": "https://avatars.githubusercontent.com/u/29034492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbartlett21", "html_url": "https://github.com/mbartlett21", "followers_url": "https://api.github.com/users/mbartlett21/followers", "following_url": "https://api.github.com/users/mbartlett21/following{/other_user}", "gists_url": "https://api.github.com/users/mbartlett21/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbartlett21/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbartlett21/subscriptions", "organizations_url": "https://api.github.com/users/mbartlett21/orgs", "repos_url": "https://api.github.com/users/mbartlett21/repos", "events_url": "https://api.github.com/users/mbartlett21/events{/privacy}", "received_events_url": "https://api.github.com/users/mbartlett21/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9cad27fce878977e40dd5b8042165b9a45e86c83", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cad27fce878977e40dd5b8042165b9a45e86c83", "html_url": "https://github.com/rust-lang/rust/commit/9cad27fce878977e40dd5b8042165b9a45e86c83"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "0318c483959f2182a47f996dba7f88f6d584fc04", "filename": "clippy_utils/src/attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c017ea058a9f99176295496e1eda29330303f0d/clippy_utils%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c017ea058a9f99176295496e1eda29330303f0d/clippy_utils%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fattrs.rs?ref=0c017ea058a9f99176295496e1eda29330303f0d", "patch": "@@ -115,7 +115,7 @@ fn parse_attrs<F: FnMut(u64)>(sess: &Session, attrs: &[ast::Attribute], name: &'\n     for attr in get_attr(sess, attrs, name) {\n         if let Some(ref value) = attr.value_str() {\n             if let Ok(value) = FromStr::from_str(&value.as_str()) {\n-                f(value)\n+                f(value);\n             } else {\n                 sess.span_err(attr.span, \"not a number\");\n             }"}, {"sha": "a1f5f5f333821e448d77bfd261535693cacc4286", "filename": "clippy_utils/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c017ea058a9f99176295496e1eda29330303f0d/clippy_utils%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c017ea058a9f99176295496e1eda29330303f0d/clippy_utils%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fdiagnostics.rs?ref=0c017ea058a9f99176295496e1eda29330303f0d", "patch": "@@ -223,7 +223,7 @@ pub fn multispan_sugg<I>(diag: &mut DiagnosticBuilder<'_>, help_msg: &str, sugg:\n where\n     I: IntoIterator<Item = (Span, String)>,\n {\n-    multispan_sugg_with_applicability(diag, help_msg, Applicability::Unspecified, sugg)\n+    multispan_sugg_with_applicability(diag, help_msg, Applicability::Unspecified, sugg);\n }\n \n /// Create a suggestion made from several `span \u2192 replacement`."}, {"sha": "a21ad42c0617edcee3dc1b615bcc8317a85efe12", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c017ea058a9f99176295496e1eda29330303f0d/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c017ea058a9f99176295496e1eda29330303f0d/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=0c017ea058a9f99176295496e1eda29330303f0d", "patch": "@@ -810,7 +810,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                     self.hash_name(f.ident.name);\n                     self.hash_pat(f.pat);\n                 }\n-                e.hash(&mut self.s)\n+                e.hash(&mut self.s);\n             },\n             PatKind::Tuple(pats, e) => {\n                 for pat in pats {"}, {"sha": "769836aaf18ed6c54c3773c5c4e052e8528f96c5", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c017ea058a9f99176295496e1eda29330303f0d/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c017ea058a9f99176295496e1eda29330303f0d/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=0c017ea058a9f99176295496e1eda29330303f0d", "patch": "@@ -667,7 +667,7 @@ pub fn method_chain_args<'a>(expr: &'a Expr<'_>, methods: &[&str]) -> Option<Vec\n                     return None;\n                 }\n                 matched.push(args); // build up `matched` backwards\n-                current = &args[0] // go to parent expression\n+                current = &args[0]; // go to parent expression\n             } else {\n                 return None;\n             }\n@@ -1094,9 +1094,9 @@ pub fn is_refutable(cx: &LateContext<'_>, pat: &Pat<'_>) -> bool {\n /// the function once on the given pattern.\n pub fn recurse_or_patterns<'tcx, F: FnMut(&'tcx Pat<'tcx>)>(pat: &'tcx Pat<'tcx>, mut f: F) {\n     if let PatKind::Or(pats) = pat.kind {\n-        pats.iter().copied().for_each(f)\n+        pats.iter().copied().for_each(f);\n     } else {\n-        f(pat)\n+        f(pat);\n     }\n }\n "}, {"sha": "e5a70f0beac4b770fb8c0f0b27dac19515c608f0", "filename": "clippy_utils/src/sugg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c017ea058a9f99176295496e1eda29330303f0d/clippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c017ea058a9f99176295496e1eda29330303f0d/clippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsugg.rs?ref=0c017ea058a9f99176295496e1eda29330303f0d", "patch": "@@ -684,7 +684,7 @@ impl<T: LintContext> DiagnosticBuilderExt<T> for rustc_errors::DiagnosticBuilder\n \n             if let Some(non_whitespace_offset) = non_whitespace_offset {\n                 remove_span = remove_span\n-                    .with_hi(remove_span.hi() + BytePos(non_whitespace_offset.try_into().expect(\"offset too large\")))\n+                    .with_hi(remove_span.hi() + BytePos(non_whitespace_offset.try_into().expect(\"offset too large\")));\n             }\n         }\n "}, {"sha": "2c55021ac88374f0c8fe450e8d8d3bbd75127b6d", "filename": "clippy_utils/src/usage.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c017ea058a9f99176295496e1eda29330303f0d/clippy_utils%2Fsrc%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c017ea058a9f99176295496e1eda29330303f0d/clippy_utils%2Fsrc%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fusage.rs?ref=0c017ea058a9f99176295496e1eda29330303f0d", "patch": "@@ -59,7 +59,7 @@ impl<'tcx> MutVarsDelegate {\n                 //FIXME: This causes false negatives. We can't get the `NodeId` from\n                 //`Categorization::Upvar(_)`. So we search for any `Upvar`s in the\n                 //`while`-body, not just the ones in the condition.\n-                self.skip = true\n+                self.skip = true;\n             },\n             _ => {},\n         }\n@@ -71,12 +71,12 @@ impl<'tcx> Delegate<'tcx> for MutVarsDelegate {\n \n     fn borrow(&mut self, cmt: &PlaceWithHirId<'tcx>, _: HirId, bk: ty::BorrowKind) {\n         if let ty::BorrowKind::MutBorrow = bk {\n-            self.update(cmt)\n+            self.update(cmt);\n         }\n     }\n \n     fn mutate(&mut self, cmt: &PlaceWithHirId<'tcx>, _: HirId) {\n-        self.update(cmt)\n+        self.update(cmt);\n     }\n \n     fn fake_read(&mut self, _: rustc_typeck::expr_use_visitor::Place<'tcx>, _: FakeReadCause, _: HirId) {}"}, {"sha": "ce00106dd4d8087afc501f234cfd442ca73c1047", "filename": "clippy_utils/src/visitors.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c017ea058a9f99176295496e1eda29330303f0d/clippy_utils%2Fsrc%2Fvisitors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c017ea058a9f99176295496e1eda29330303f0d/clippy_utils%2Fsrc%2Fvisitors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fvisitors.rs?ref=0c017ea058a9f99176295496e1eda29330303f0d", "patch": "@@ -87,7 +87,7 @@ where\n         }\n \n         fn visit_stmt(&mut self, stmt: &'hir hir::Stmt<'_>) {\n-            intravisit::walk_stmt(&mut *self.inside_stmt(true), stmt)\n+            intravisit::walk_stmt(&mut *self.inside_stmt(true), stmt);\n         }\n \n         fn visit_expr(&mut self, expr: &'hir hir::Expr<'_>) {\n@@ -219,7 +219,7 @@ pub fn visit_break_exprs<'tcx>(\n \n         fn visit_expr(&mut self, e: &'tcx Expr<'_>) {\n             if let ExprKind::Break(dest, sub_expr) = e.kind {\n-                self.0(e, dest, sub_expr)\n+                self.0(e, dest, sub_expr);\n             }\n             walk_expr(self, e);\n         }\n@@ -251,7 +251,7 @@ pub fn is_res_used(cx: &LateContext<'_>, res: Res, body: BodyId) -> bool {\n                     self.found = true;\n                 }\n             } else {\n-                walk_expr(self, e)\n+                walk_expr(self, e);\n             }\n         }\n     }"}]}