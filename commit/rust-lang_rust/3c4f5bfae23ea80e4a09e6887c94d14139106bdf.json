{"sha": "3c4f5bfae23ea80e4a09e6887c94d14139106bdf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjNGY1YmZhZTIzZWE4MGU0YTA5ZTY4ODdjOTRkMTQxMzkxMDZiZGY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2017-12-28T12:04:11Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-01-17T13:04:42Z"}, "message": "Use rustc_driver::run (fixes #2303)\n\nThis internally uses monitor() which catches panics and stuff", "tree": {"sha": "559a604136e5b822d2402d1e83cafdbc8b90eb58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/559a604136e5b822d2402d1e83cafdbc8b90eb58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c4f5bfae23ea80e4a09e6887c94d14139106bdf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlpfSeoACgkQpp+NIls6\n19lkIBAAoOmaE6klEnOiRKFYdb+hC0MOIH0lwnb885VXgUELJ8gQAH2Vv9fNQq5W\nxgYHLCzo9FbxJYWnb5aWE7KgEVloEFm3grgh3Z6wu/GvxfxFrWAVGLbdUrUaCh2h\nSU1Y4/646lSpeavrkjRKuhlNZNr+RXu1z9FgWERttcuJoeNSjtxeOprWqbtHJf9N\nnY8RdYGV6pn3ooHshekPmZBqLUsmy4b4OuFH5zWZCg4CXqKJvbbjmAb/sKikL63A\n16FowLyyr5O6GZeo82msE+/6CnpLx5Yjw/gf6rJn/AA1XAitg5Q9Wy5kjvPBVcTT\nDBof+Vpk36rTZHaIHoT7x0XXq+rQAXi1hv+GKmJ8uibbq4ki/XzY8PbpdwqvinrK\n6zcdHZeRp5x3eVzGoQzSP3iTiVSmO8zjZcaOZZTiAgoSA9VSprRoIAl4mNzbm1VE\nU2edOZYmvwzSYtzc/NCEKkq1Abz0/A14t8t5Dl7GAKS61J8f21H6Fm1j/dtEwnP+\nVUU6B0FcaoYFMKX7uuF97a2PgzbtaCPGnLSK8QQltrZkliPOzOoQ18xSZGpipzz3\nIpjzFrxjpjjXSEXkACe5KuJbCzqeco4cCspI8pGBTFEAYgRBnkYDrOtWgOZ/K34H\n5miFWCAcQ07tdqo+C4cyBlNUkPas3vAJZo775m27xAxTdPny2Sk=\n=82db\n-----END PGP SIGNATURE-----", "payload": "tree 559a604136e5b822d2402d1e83cafdbc8b90eb58\nparent a2fdfc05d761bf19b208e5706d6dbcbb2df438b2\nauthor Manish Goregaokar <manishsmail@gmail.com> 1514462651 +0530\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1516194282 +0100\n\nUse rustc_driver::run (fixes #2303)\n\nThis internally uses monitor() which catches panics and stuff\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c4f5bfae23ea80e4a09e6887c94d14139106bdf", "html_url": "https://github.com/rust-lang/rust/commit/3c4f5bfae23ea80e4a09e6887c94d14139106bdf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c4f5bfae23ea80e4a09e6887c94d14139106bdf/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2fdfc05d761bf19b208e5706d6dbcbb2df438b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2fdfc05d761bf19b208e5706d6dbcbb2df438b2", "html_url": "https://github.com/rust-lang/rust/commit/a2fdfc05d761bf19b208e5706d6dbcbb2df438b2"}], "stats": {"total": 83, "additions": 40, "deletions": 43}, "files": [{"sha": "bc766496cfb91801d3244152559c9fd2b7a9e6bc", "filename": "src/driver.rs", "status": "modified", "additions": 40, "deletions": 43, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/3c4f5bfae23ea80e4a09e6887c94d14139106bdf/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c4f5bfae23ea80e4a09e6887c94d14139106bdf/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=3c4f5bfae23ea80e4a09e6887c94d14139106bdf", "patch": "@@ -12,7 +12,7 @@ extern crate rustc_plugin;\n extern crate syntax;\n \n use rustc_driver::{driver, Compilation, CompilerCalls, RustcDefaultCalls};\n-use rustc::session::{config, CompileIncomplete, Session};\n+use rustc::session::{config, Session};\n use rustc::session::config::{ErrorOutputType, Input};\n use std::path::PathBuf;\n use std::process::Command;\n@@ -153,47 +153,44 @@ pub fn main() {\n         })\n         .expect(\"need to specify SYSROOT env var during clippy compilation, or use rustup or multirust\");\n \n-    rustc_driver::in_rustc_thread(|| {\n-        // Setting RUSTC_WRAPPER causes Cargo to pass 'rustc' as the first argument.\n-        // We're invoking the compiler programmatically, so we ignore this/\n-        let mut orig_args: Vec<String> = env::args().collect();\n-        if orig_args.len() <= 1 {\n-            std::process::exit(1);\n-        }\n-        if orig_args[1] == \"rustc\" {\n-            // we still want to be able to invoke it normally though\n-            orig_args.remove(1);\n-        }\n-        // this conditional check for the --sysroot flag is there so users can call\n-        // `clippy_driver` directly\n-        // without having to pass --sysroot or anything\n-        let mut args: Vec<String> = if orig_args.iter().any(|s| s == \"--sysroot\") {\n-            orig_args.clone()\n-        } else {\n-            orig_args\n-                .clone()\n-                .into_iter()\n-                .chain(Some(\"--sysroot\".to_owned()))\n-                .chain(Some(sys_root))\n-                .collect()\n-        };\n-\n-        // this check ensures that dependencies are built but not linted and the final\n-        // crate is\n-        // linted but not built\n-        let clippy_enabled = env::var(\"CLIPPY_TESTS\")\n-            .ok()\n-            .map_or(false, |val| val == \"true\")\n-            || orig_args.iter().any(|s| s == \"--emit=metadata\");\n-\n-        if clippy_enabled {\n-            args.extend_from_slice(&[\"--cfg\".to_owned(), r#\"feature=\"cargo-clippy\"\"#.to_owned()]);\n-        }\n+    // Setting RUSTC_WRAPPER causes Cargo to pass 'rustc' as the first argument.\n+    // We're invoking the compiler programmatically, so we ignore this/\n+    let mut orig_args: Vec<String> = env::args().collect();\n+    if orig_args.len() <= 1 {\n+        std::process::exit(1);\n+    }\n+    if orig_args[1] == \"rustc\" {\n+        // we still want to be able to invoke it normally though\n+        orig_args.remove(1);\n+    }\n+    // this conditional check for the --sysroot flag is there so users can call\n+    // `clippy_driver` directly\n+    // without having to pass --sysroot or anything\n+    let mut args: Vec<String> = if orig_args.iter().any(|s| s == \"--sysroot\") {\n+        orig_args.clone()\n+    } else {\n+        orig_args\n+            .clone()\n+            .into_iter()\n+            .chain(Some(\"--sysroot\".to_owned()))\n+            .chain(Some(sys_root))\n+            .collect()\n+    };\n+\n+    // this check ensures that dependencies are built but not linted and the final\n+    // crate is\n+    // linted but not built\n+    let clippy_enabled = env::var(\"CLIPPY_TESTS\")\n+        .ok()\n+        .map_or(false, |val| val == \"true\")\n+        || orig_args.iter().any(|s| s == \"--emit=metadata\");\n+\n+    if clippy_enabled {\n+        args.extend_from_slice(&[\"--cfg\".to_owned(), r#\"feature=\"cargo-clippy\"\"#.to_owned()]);\n+    }\n \n-        let mut ccc = ClippyCompilerCalls::new(clippy_enabled);\n-        let (result, _) = rustc_driver::run_compiler(&args, &mut ccc, None, None);\n-        if let Err(CompileIncomplete::Errored(_)) = result {\n-            std::process::exit(1);\n-        }\n-    }).expect(\"rustc_thread failed\");\n+    let mut ccc = ClippyCompilerCalls::new(clippy_enabled);\n+    rustc_driver::run(move || {\n+        rustc_driver::run_compiler(&args, &mut ccc, None, None)\n+    });\n }"}]}