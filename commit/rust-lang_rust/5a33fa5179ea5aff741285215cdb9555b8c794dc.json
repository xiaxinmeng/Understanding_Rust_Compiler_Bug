{"sha": "5a33fa5179ea5aff741285215cdb9555b8c794dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhMzNmYTUxNzllYTVhZmY3NDEyODUyMTVjZGI5NTU1YjhjNzk0ZGM=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-10-26T23:45:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-26T23:45:10Z"}, "message": "Rollup merge of #78375 - taiki-e:question-in-macros, r=kennytm\n\nUse ? in core/std macros", "tree": {"sha": "58eb24f790157c639bc65512f8b6d1b2c4a0b500", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58eb24f790157c639bc65512f8b6d1b2c4a0b500"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a33fa5179ea5aff741285215cdb9555b8c794dc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfl1+HCRBK7hj4Ov3rIwAAdHIIAEerSJuiO197yJZKND+yc/PD\n7wN8dD3+MbqZEWlvZAfeB4huyXeu90/XTL4xN0p3TYRn/Wm36uDO22XxtRRWEWmj\ne7CUfm18Es4UhPTZHCcXiQMvF8PN7ixQfUeQ66LaW9z6Q41AHM3Z0B0f6Em0ia/t\nsCMHRViRWR8OmJY+ObsKbA/VT9uhw7nG1FkjzB5JhlqRt5s1knMEayGog2Pi5ofv\nl2aNP4F3xYDR0egXd1cTKCNKPQD46R/6vZLArHLeHZfYOnjZ0ltwieqycKBNYj0V\nWyW0YQ6163nUnR8Kobb4Iq+khF/wrDlIlnmbLmKTXz1en562oozf6yspHC7Jrng=\n=CQGV\n-----END PGP SIGNATURE-----\n", "payload": "tree 58eb24f790157c639bc65512f8b6d1b2c4a0b500\nparent 6abd2a59e7f1097ed27b37df32481db1934c4d82\nparent 04c0018d1b08875b6e51205d2b62b67925b6238a\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1603755910 +0900\ncommitter GitHub <noreply@github.com> 1603755910 +0900\n\nRollup merge of #78375 - taiki-e:question-in-macros, r=kennytm\n\nUse ? in core/std macros\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a33fa5179ea5aff741285215cdb9555b8c794dc", "html_url": "https://github.com/rust-lang/rust/commit/5a33fa5179ea5aff741285215cdb9555b8c794dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a33fa5179ea5aff741285215cdb9555b8c794dc/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6abd2a59e7f1097ed27b37df32481db1934c4d82", "url": "https://api.github.com/repos/rust-lang/rust/commits/6abd2a59e7f1097ed27b37df32481db1934c4d82", "html_url": "https://github.com/rust-lang/rust/commit/6abd2a59e7f1097ed27b37df32481db1934c4d82"}, {"sha": "04c0018d1b08875b6e51205d2b62b67925b6238a", "url": "https://api.github.com/repos/rust-lang/rust/commits/04c0018d1b08875b6e51205d2b62b67925b6238a", "html_url": "https://github.com/rust-lang/rust/commit/04c0018d1b08875b6e51205d2b62b67925b6238a"}], "stats": {"total": 68, "additions": 19, "deletions": 49}, "files": [{"sha": "bce8a70e92f31cef9db12978ce5a766988e43de2", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 16, "deletions": 43, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/5a33fa5179ea5aff741285215cdb9555b8c794dc/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a33fa5179ea5aff741285215cdb9555b8c794dc/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=5a33fa5179ea5aff741285215cdb9555b8c794dc", "patch": "@@ -6,15 +6,12 @@ macro_rules! panic {\n     () => (\n         $crate::panic!(\"explicit panic\")\n     );\n-    ($msg:literal) => (\n+    ($msg:literal $(,)?) => (\n         $crate::panicking::panic($msg)\n     );\n-    ($msg:expr) => (\n+    ($msg:expr $(,)?) => (\n         $crate::panicking::panic_str($msg)\n     );\n-    ($msg:expr,) => (\n-        $crate::panic!($msg)\n-    );\n     ($fmt:expr, $($arg:tt)+) => (\n         $crate::panicking::panic_fmt($crate::format_args!($fmt, $($arg)+))\n     );\n@@ -40,7 +37,7 @@ macro_rules! panic {\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n macro_rules! assert_eq {\n-    ($left:expr, $right:expr) => ({\n+    ($left:expr, $right:expr $(,)?) => ({\n         match (&$left, &$right) {\n             (left_val, right_val) => {\n                 if !(*left_val == *right_val) {\n@@ -54,9 +51,6 @@ macro_rules! assert_eq {\n             }\n         }\n     });\n-    ($left:expr, $right:expr,) => ({\n-        $crate::assert_eq!($left, $right)\n-    });\n     ($left:expr, $right:expr, $($arg:tt)+) => ({\n         match (&($left), &($right)) {\n             (left_val, right_val) => {\n@@ -94,7 +88,7 @@ macro_rules! assert_eq {\n #[macro_export]\n #[stable(feature = \"assert_ne\", since = \"1.13.0\")]\n macro_rules! assert_ne {\n-    ($left:expr, $right:expr) => ({\n+    ($left:expr, $right:expr $(,)?) => ({\n         match (&$left, &$right) {\n             (left_val, right_val) => {\n                 if *left_val == *right_val {\n@@ -108,9 +102,6 @@ macro_rules! assert_ne {\n             }\n         }\n     });\n-    ($left:expr, $right:expr,) => {\n-        $crate::assert_ne!($left, $right)\n-    };\n     ($left:expr, $right:expr, $($arg:tt)+) => ({\n         match (&($left), &($right)) {\n             (left_val, right_val) => {\n@@ -315,17 +306,14 @@ macro_rules! matches {\n #[rustc_deprecated(since = \"1.39.0\", reason = \"use the `?` operator instead\")]\n #[doc(alias = \"?\")]\n macro_rules! r#try {\n-    ($expr:expr) => {\n+    ($expr:expr $(,)?) => {\n         match $expr {\n             $crate::result::Result::Ok(val) => val,\n             $crate::result::Result::Err(err) => {\n                 return $crate::result::Result::Err($crate::convert::From::from(err));\n             }\n         }\n     };\n-    ($expr:expr,) => {\n-        $crate::r#try!($expr)\n-    };\n }\n \n /// Writes formatted data into a buffer.\n@@ -451,12 +439,9 @@ macro_rules! write {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow_internal_unstable(format_args_nl)]\n macro_rules! writeln {\n-    ($dst:expr) => (\n+    ($dst:expr $(,)?) => (\n         $crate::write!($dst, \"\\n\")\n     );\n-    ($dst:expr,) => (\n-        $crate::writeln!($dst)\n-    );\n     ($dst:expr, $($arg:tt)*) => (\n         $dst.write_fmt($crate::format_args_nl!($($arg)*))\n     );\n@@ -517,12 +502,9 @@ macro_rules! unreachable {\n     () => ({\n         panic!(\"internal error: entered unreachable code\")\n     });\n-    ($msg:expr) => ({\n+    ($msg:expr $(,)?) => ({\n         $crate::unreachable!(\"{}\", $msg)\n     });\n-    ($msg:expr,) => ({\n-        $crate::unreachable!($msg)\n-    });\n     ($fmt:expr, $($arg:tt)*) => ({\n         panic!($crate::concat!(\"internal error: entered unreachable code: \", $fmt), $($arg)*)\n     });\n@@ -711,8 +693,7 @@ pub(crate) mod builtin {\n     #[rustc_builtin_macro]\n     #[macro_export]\n     macro_rules! compile_error {\n-        ($msg:expr) => {{ /* compiler built-in */ }};\n-        ($msg:expr,) => {{ /* compiler built-in */ }};\n+        ($msg:expr $(,)?) => {{ /* compiler built-in */ }};\n     }\n \n     /// Constructs parameters for the other string-formatting macros.\n@@ -816,8 +797,7 @@ pub(crate) mod builtin {\n     #[rustc_builtin_macro]\n     #[macro_export]\n     macro_rules! env {\n-        ($name:expr) => {{ /* compiler built-in */ }};\n-        ($name:expr,) => {{ /* compiler built-in */ }};\n+        ($name:expr $(,)?) => {{ /* compiler built-in */ }};\n     }\n \n     /// Optionally inspects an environment variable at compile time.\n@@ -841,8 +821,7 @@ pub(crate) mod builtin {\n     #[rustc_builtin_macro]\n     #[macro_export]\n     macro_rules! option_env {\n-        ($name:expr) => {{ /* compiler built-in */ }};\n-        ($name:expr,) => {{ /* compiler built-in */ }};\n+        ($name:expr $(,)?) => {{ /* compiler built-in */ }};\n     }\n \n     /// Concatenates identifiers into one identifier.\n@@ -877,8 +856,7 @@ pub(crate) mod builtin {\n     #[rustc_builtin_macro]\n     #[macro_export]\n     macro_rules! concat_idents {\n-        ($($e:ident),+) => {{ /* compiler built-in */ }};\n-        ($($e:ident,)+) => {{ /* compiler built-in */ }};\n+        ($($e:ident),+ $(,)?) => {{ /* compiler built-in */ }};\n     }\n \n     /// Concatenates literals into a static string slice.\n@@ -900,8 +878,7 @@ pub(crate) mod builtin {\n     #[rustc_builtin_macro]\n     #[macro_export]\n     macro_rules! concat {\n-        ($($e:expr),*) => {{ /* compiler built-in */ }};\n-        ($($e:expr,)*) => {{ /* compiler built-in */ }};\n+        ($($e:expr),* $(,)?) => {{ /* compiler built-in */ }};\n     }\n \n     /// Expands to the line number on which it was invoked.\n@@ -1043,8 +1020,7 @@ pub(crate) mod builtin {\n     #[rustc_builtin_macro]\n     #[macro_export]\n     macro_rules! include_str {\n-        ($file:expr) => {{ /* compiler built-in */ }};\n-        ($file:expr,) => {{ /* compiler built-in */ }};\n+        ($file:expr $(,)?) => {{ /* compiler built-in */ }};\n     }\n \n     /// Includes a file as a reference to a byte array.\n@@ -1083,8 +1059,7 @@ pub(crate) mod builtin {\n     #[rustc_builtin_macro]\n     #[macro_export]\n     macro_rules! include_bytes {\n-        ($file:expr) => {{ /* compiler built-in */ }};\n-        ($file:expr,) => {{ /* compiler built-in */ }};\n+        ($file:expr $(,)?) => {{ /* compiler built-in */ }};\n     }\n \n     /// Expands to a string that represents the current module path.\n@@ -1191,8 +1166,7 @@ pub(crate) mod builtin {\n     #[rustc_builtin_macro]\n     #[macro_export]\n     macro_rules! include {\n-        ($file:expr) => {{ /* compiler built-in */ }};\n-        ($file:expr,) => {{ /* compiler built-in */ }};\n+        ($file:expr $(,)?) => {{ /* compiler built-in */ }};\n     }\n \n     /// Asserts that a boolean expression is `true` at runtime.\n@@ -1242,8 +1216,7 @@ pub(crate) mod builtin {\n     #[rustc_builtin_macro]\n     #[macro_export]\n     macro_rules! assert {\n-        ($cond:expr) => {{ /* compiler built-in */ }};\n-        ($cond:expr,) => {{ /* compiler built-in */ }};\n+        ($cond:expr $(,)?) => {{ /* compiler built-in */ }};\n         ($cond:expr, $($arg:tt)+) => {{ /* compiler built-in */ }};\n     }\n "}, {"sha": "57649d6f8f25243312f1f3982c1650e01e9804e3", "filename": "library/std/src/macros.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5a33fa5179ea5aff741285215cdb9555b8c794dc/library%2Fstd%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a33fa5179ea5aff741285215cdb9555b8c794dc/library%2Fstd%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fmacros.rs?ref=5a33fa5179ea5aff741285215cdb9555b8c794dc", "patch": "@@ -10,8 +10,7 @@\n #[allow_internal_unstable(libstd_sys_internals)]\n macro_rules! panic {\n     () => ({ $crate::panic!(\"explicit panic\") });\n-    ($msg:expr) => ({ $crate::rt::begin_panic($msg) });\n-    ($msg:expr,) => ({ $crate::panic!($msg) });\n+    ($msg:expr $(,)?) => ({ $crate::rt::begin_panic($msg) });\n     ($fmt:expr, $($arg:tt)+) => ({\n         $crate::rt::begin_panic_fmt(&$crate::format_args!($fmt, $($arg)+))\n     });\n@@ -285,7 +284,7 @@ macro_rules! dbg {\n     () => {\n         $crate::eprintln!(\"[{}:{}]\", $crate::file!(), $crate::line!());\n     };\n-    ($val:expr) => {\n+    ($val:expr $(,)?) => {\n         // Use of `match` here is intentional because it affects the lifetimes\n         // of temporaries - https://stackoverflow.com/a/48732525/1063961\n         match $val {\n@@ -296,8 +295,6 @@ macro_rules! dbg {\n             }\n         }\n     };\n-    // Trailing comma with single argument is ignored\n-    ($val:expr,) => { $crate::dbg!($val) };\n     ($($val:expr),+ $(,)?) => {\n         ($($crate::dbg!($val)),+,)\n     };"}, {"sha": "cf3727c9d579d22447005d760edd68cdd2682434", "filename": "src/test/ui/parser/issue-62894.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a33fa5179ea5aff741285215cdb9555b8c794dc/src%2Ftest%2Fui%2Fparser%2Fissue-62894.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a33fa5179ea5aff741285215cdb9555b8c794dc/src%2Ftest%2Fui%2Fparser%2Fissue-62894.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-62894.stderr?ref=5a33fa5179ea5aff741285215cdb9555b8c794dc", "patch": "@@ -45,7 +45,7 @@ LL | fn main() {}\n    | \n   ::: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n    |\n-LL |     ($left:expr, $right:expr) => ({\n+LL |     ($left:expr, $right:expr $(,)?) => ({\n    |      ---------- while parsing argument for this `expr` macro fragment\n \n error: aborting due to 4 previous errors"}]}