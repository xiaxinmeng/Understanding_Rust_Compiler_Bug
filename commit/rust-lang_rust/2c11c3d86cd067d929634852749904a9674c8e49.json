{"sha": "2c11c3d86cd067d929634852749904a9674c8e49", "node_id": "C_kwDOAAsO6NoAKDJjMTFjM2Q4NmNkMDY3ZDkyOTYzNDg1Mjc0OTkwNGE5Njc0YzhlNDk", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-05-09T15:29:59Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-05-09T15:46:35Z"}, "message": "make sure ScalarPair enums have ScalarPair variants; add some layout sanity checks", "tree": {"sha": "31691879a59fb03bde7ac688e13bd3cc6cb0dfc4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31691879a59fb03bde7ac688e13bd3cc6cb0dfc4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c11c3d86cd067d929634852749904a9674c8e49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c11c3d86cd067d929634852749904a9674c8e49", "html_url": "https://github.com/rust-lang/rust/commit/2c11c3d86cd067d929634852749904a9674c8e49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c11c3d86cd067d929634852749904a9674c8e49/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "html_url": "https://github.com/rust-lang/rust/commit/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8"}], "stats": {"total": 253, "additions": 221, "deletions": 32}, "files": [{"sha": "1a1b795b0a4ced6d88df7b788f023e3933a0cb52", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 112, "deletions": 11, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/2c11c3d86cd067d929634852749904a9674c8e49/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c11c3d86cd067d929634852749904a9674c8e49/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=2c11c3d86cd067d929634852749904a9674c8e49", "patch": "@@ -220,6 +220,91 @@ impl<'tcx> fmt::Display for LayoutError<'tcx> {\n     }\n }\n \n+/// Enforce some basic invariants on layouts.\n+fn sanity_check_layout<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n+    layout: &TyAndLayout<'tcx>,\n+) {\n+    // Type-level uninhabitedness should always imply ABI uninhabitedness.\n+    if tcx.conservative_is_privately_uninhabited(param_env.and(layout.ty)) {\n+        assert!(layout.abi.is_uninhabited());\n+    }\n+\n+    if cfg!(debug_assertions) {\n+        fn check_layout_abi<'tcx>(tcx: TyCtxt<'tcx>, layout: Layout<'tcx>) {\n+            match layout.abi() {\n+                Abi::Scalar(_scalar) => {\n+                    // No padding in scalars.\n+                    /* FIXME(#96185):\n+                    assert_eq!(\n+                        layout.align().abi,\n+                        scalar.align(&tcx).abi,\n+                        \"alignment mismatch between ABI and layout in {layout:#?}\"\n+                    );\n+                    assert_eq!(\n+                        layout.size(),\n+                        scalar.size(&tcx),\n+                        \"size mismatch between ABI and layout in {layout:#?}\"\n+                    );*/\n+                }\n+                Abi::ScalarPair(scalar1, scalar2) => {\n+                    // Sanity-check scalar pair size.\n+                    let field2_offset = scalar1.size(&tcx).align_to(scalar2.align(&tcx).abi);\n+                    let total = field2_offset + scalar2.size(&tcx);\n+                    assert!(\n+                        layout.size() >= total,\n+                        \"size mismatch between ABI and layout in {layout:#?}\"\n+                    );\n+                }\n+                _ => {}\n+            }\n+        }\n+\n+        check_layout_abi(tcx, layout.layout);\n+\n+        if let Variants::Multiple { variants, .. } = &layout.variants {\n+            for variant in variants {\n+                check_layout_abi(tcx, *variant);\n+                // No nested \"multiple\".\n+                assert!(matches!(variant.variants(), Variants::Single { .. }));\n+                // Skip empty variants.\n+                if variant.size() == Size::ZERO\n+                    || variant.fields().count() == 0\n+                    || variant.abi().is_uninhabited()\n+                {\n+                    // These are never actually accessed anyway, so we can skip them. (Note that\n+                    // sometimes, variants with fields have size 0, and sometimes, variants without\n+                    // fields have non-0 size.)\n+                    continue;\n+                }\n+                // Variants should have the same or a smaller size as the full thing.\n+                if variant.size() > layout.size {\n+                    bug!(\n+                        \"Type with size {} bytes has variant with size {} bytes: {layout:#?}\",\n+                        layout.size.bytes(),\n+                        variant.size().bytes(),\n+                    )\n+                }\n+                // The top-level ABI and the ABI of the variants should be coherent.\n+                let abi_coherent = match (layout.abi, variant.abi()) {\n+                    (Abi::Scalar(..), Abi::Scalar(..)) => true,\n+                    (Abi::ScalarPair(..), Abi::ScalarPair(..)) => true,\n+                    (Abi::Uninhabited, _) => true,\n+                    (Abi::Aggregate { .. }, _) => true,\n+                    _ => false,\n+                };\n+                if !abi_coherent {\n+                    bug!(\n+                        \"Variant ABI is incompatible with top-level ABI:\\nvariant={:#?}\\nTop-level: {layout:#?}\",\n+                        variant\n+                    );\n+                }\n+            }\n+        }\n+    }\n+}\n+\n #[instrument(skip(tcx, query), level = \"debug\")]\n fn layout_of<'tcx>(\n     tcx: TyCtxt<'tcx>,\n@@ -263,10 +348,7 @@ fn layout_of<'tcx>(\n \n             cx.record_layout_for_printing(layout);\n \n-            // Type-level uninhabitedness should always imply ABI uninhabitedness.\n-            if tcx.conservative_is_privately_uninhabited(param_env.and(ty)) {\n-                assert!(layout.abi.is_uninhabited());\n-            }\n+            sanity_check_layout(tcx, param_env, &layout);\n \n             Ok(layout)\n         })\n@@ -1313,10 +1395,22 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                 };\n                 let mut abi = Abi::Aggregate { sized: true };\n \n-                // Without latter check aligned enums with custom discriminant values\n-                // Would result in ICE see the issue #92464 for more info\n-                if tag.size(dl) == size || variants.iter().all(|layout| layout.is_empty()) {\n+                if layout_variants.iter().all(|v| v.abi.is_uninhabited()) {\n+                    abi = Abi::Uninhabited;\n+                } else if tag.size(dl) == size || variants.iter().all(|layout| layout.is_empty()) {\n+                    // Without latter check aligned enums with custom discriminant values\n+                    // Would result in ICE see the issue #92464 for more info\n                     abi = Abi::Scalar(tag);\n+                    // Make sure the variants with fields have the same ABI as the enum itself\n+                    // (since downcasting to them is a NOP).\n+                    for variant in &mut layout_variants {\n+                        if variant.fields.count() > 0\n+                            && matches!(variant.abi, Abi::Aggregate { .. })\n+                        {\n+                            assert_eq!(variant.size, size);\n+                            variant.abi = abi;\n+                        }\n+                    }\n                 } else {\n                     // Try to use a ScalarPair for all tagged enums.\n                     let mut common_prim = None;\n@@ -1385,14 +1479,21 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                             // We can use `ScalarPair` only when it matches our\n                             // already computed layout (including `#[repr(C)]`).\n                             abi = pair.abi;\n+                            // Make sure the variants with fields have the same ABI as the enum itself\n+                            // (since downcasting to them is a NOP).\n+                            for variant in &mut layout_variants {\n+                                if variant.fields.count() > 0\n+                                    && matches!(variant.abi, Abi::Aggregate { .. })\n+                                {\n+                                    variant.abi = abi;\n+                                    // Also need to bump up the size, so that the pair fits inside.\n+                                    variant.size = size;\n+                                }\n+                            }\n                         }\n                     }\n                 }\n \n-                if layout_variants.iter().all(|v| v.abi.is_uninhabited()) {\n-                    abi = Abi::Uninhabited;\n-                }\n-\n                 let largest_niche = Niche::from_scalar(dl, Size::ZERO, tag);\n \n                 let layout_variants ="}, {"sha": "7dbcc151855016fa5ab0545924ccb3693ee6385d", "filename": "src/test/ui/layout/debug.stderr", "status": "modified", "additions": 32, "deletions": 6, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/2c11c3d86cd067d929634852749904a9674c8e49/src%2Ftest%2Fui%2Flayout%2Fdebug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c11c3d86cd067d929634852749904a9674c8e49/src%2Ftest%2Fui%2Flayout%2Fdebug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fdebug.stderr?ref=2c11c3d86cd067d929634852749904a9674c8e49", "patch": "@@ -184,9 +184,22 @@ error: layout_of(std::result::Result<i32, i32>) = Layout {\n                        variants: Single {\n                            index: 0,\n                        },\n-                       abi: Aggregate {\n-                           sized: true,\n-                       },\n+                       abi: ScalarPair(\n+                           Initialized {\n+                               value: Int(\n+                                   I32,\n+                                   false,\n+                               ),\n+                               valid_range: 0..=1,\n+                           },\n+                           Initialized {\n+                               value: Int(\n+                                   I32,\n+                                   true,\n+                               ),\n+                               valid_range: 0..=4294967295,\n+                           },\n+                       ),\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n                            abi: Align(4 bytes),\n@@ -206,9 +219,22 @@ error: layout_of(std::result::Result<i32, i32>) = Layout {\n                        variants: Single {\n                            index: 1,\n                        },\n-                       abi: Aggregate {\n-                           sized: true,\n-                       },\n+                       abi: ScalarPair(\n+                           Initialized {\n+                               value: Int(\n+                                   I32,\n+                                   false,\n+                               ),\n+                               valid_range: 0..=1,\n+                           },\n+                           Initialized {\n+                               value: Int(\n+                                   I32,\n+                                   true,\n+                               ),\n+                               valid_range: 0..=4294967295,\n+                           },\n+                       ),\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n                            abi: Align(4 bytes),"}, {"sha": "33dfa307c1d271a9ac819e53ebf5cd2967f60a4c", "filename": "src/test/ui/layout/issue-96158-scalarpair-payload-might-be-uninit.stderr", "status": "modified", "additions": 77, "deletions": 15, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/2c11c3d86cd067d929634852749904a9674c8e49/src%2Ftest%2Fui%2Flayout%2Fissue-96158-scalarpair-payload-might-be-uninit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c11c3d86cd067d929634852749904a9674c8e49/src%2Ftest%2Fui%2Flayout%2Fissue-96158-scalarpair-payload-might-be-uninit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fissue-96158-scalarpair-payload-might-be-uninit.stderr?ref=2c11c3d86cd067d929634852749904a9674c8e49", "patch": "@@ -30,9 +30,21 @@ error: layout_of(MissingPayloadField) = Layout {\n                        variants: Single {\n                            index: 0,\n                        },\n-                       abi: Aggregate {\n-                           sized: true,\n-                       },\n+                       abi: ScalarPair(\n+                           Initialized {\n+                               value: Int(\n+                                   I8,\n+                                   false,\n+                               ),\n+                               valid_range: 0..=1,\n+                           },\n+                           Union {\n+                               value: Int(\n+                                   I8,\n+                                   false,\n+                               ),\n+                           },\n+                       ),\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n                            abi: Align(1 bytes),\n@@ -131,9 +143,22 @@ error: layout_of(CommonPayloadField) = Layout {\n                        variants: Single {\n                            index: 0,\n                        },\n-                       abi: Aggregate {\n-                           sized: true,\n-                       },\n+                       abi: ScalarPair(\n+                           Initialized {\n+                               value: Int(\n+                                   I8,\n+                                   false,\n+                               ),\n+                               valid_range: 0..=1,\n+                           },\n+                           Initialized {\n+                               value: Int(\n+                                   I8,\n+                                   false,\n+                               ),\n+                               valid_range: 0..=255,\n+                           },\n+                       ),\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n                            abi: Align(1 bytes),\n@@ -153,9 +178,22 @@ error: layout_of(CommonPayloadField) = Layout {\n                        variants: Single {\n                            index: 1,\n                        },\n-                       abi: Aggregate {\n-                           sized: true,\n-                       },\n+                       abi: ScalarPair(\n+                           Initialized {\n+                               value: Int(\n+                                   I8,\n+                                   false,\n+                               ),\n+                               valid_range: 0..=1,\n+                           },\n+                           Initialized {\n+                               value: Int(\n+                                   I8,\n+                                   false,\n+                               ),\n+                               valid_range: 0..=255,\n+                           },\n+                       ),\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n                            abi: Align(1 bytes),\n@@ -237,9 +275,21 @@ error: layout_of(CommonPayloadFieldIsMaybeUninit) = Layout {\n                        variants: Single {\n                            index: 0,\n                        },\n-                       abi: Aggregate {\n-                           sized: true,\n-                       },\n+                       abi: ScalarPair(\n+                           Initialized {\n+                               value: Int(\n+                                   I8,\n+                                   false,\n+                               ),\n+                               valid_range: 0..=1,\n+                           },\n+                           Union {\n+                               value: Int(\n+                                   I8,\n+                                   false,\n+                               ),\n+                           },\n+                       ),\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n                            abi: Align(1 bytes),\n@@ -259,9 +309,21 @@ error: layout_of(CommonPayloadFieldIsMaybeUninit) = Layout {\n                        variants: Single {\n                            index: 1,\n                        },\n-                       abi: Aggregate {\n-                           sized: true,\n-                       },\n+                       abi: ScalarPair(\n+                           Initialized {\n+                               value: Int(\n+                                   I8,\n+                                   false,\n+                               ),\n+                               valid_range: 0..=1,\n+                           },\n+                           Union {\n+                               value: Int(\n+                                   I8,\n+                                   false,\n+                               ),\n+                           },\n+                       ),\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n                            abi: Align(1 bytes),"}]}