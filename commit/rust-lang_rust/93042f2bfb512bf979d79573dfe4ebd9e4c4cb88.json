{"sha": "93042f2bfb512bf979d79573dfe4ebd9e4c4cb88", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzMDQyZjJiZmI1MTJiZjk3OWQ3OTU3M2RmZTRlYmQ5ZTRjNGNiODg=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-02-02T21:24:24Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-02-02T21:24:24Z"}, "message": "Rollup merge of #31329 - quodlibetor:no-const-doc-in-stable, r=alexcrichton\n\nFixes #31098\n\nAFAICT this is the only place where rustdoc explicitly checks if we are on stable before emitting content, so I can't tell if this is the sane way to handle this, or if anything else should be done to make sure that nobody forgets to remove this check when `const` is stabilized.", "tree": {"sha": "a16b735d7c734ede40dff08f2e12dd240bff5afd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a16b735d7c734ede40dff08f2e12dd240bff5afd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93042f2bfb512bf979d79573dfe4ebd9e4c4cb88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93042f2bfb512bf979d79573dfe4ebd9e4c4cb88", "html_url": "https://github.com/rust-lang/rust/commit/93042f2bfb512bf979d79573dfe4ebd9e4c4cb88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93042f2bfb512bf979d79573dfe4ebd9e4c4cb88/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae96e51ac74ddfec533f5cd60b2bc91ec2dabcd4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae96e51ac74ddfec533f5cd60b2bc91ec2dabcd4", "html_url": "https://github.com/rust-lang/rust/commit/ae96e51ac74ddfec533f5cd60b2bc91ec2dabcd4"}, {"sha": "d59372b7aad364a287f21cfbcf12e85d8be97fc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d59372b7aad364a287f21cfbcf12e85d8be97fc7", "html_url": "https://github.com/rust-lang/rust/commit/d59372b7aad364a287f21cfbcf12e85d8be97fc7"}], "stats": {"total": 14, "additions": 12, "deletions": 2}, "files": [{"sha": "dfbe08a0e423d2d204914dbb69cc5185d4a2224b", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/93042f2bfb512bf979d79573dfe4ebd9e4c4cb88/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93042f2bfb512bf979d79573dfe4ebd9e4c4cb88/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=93042f2bfb512bf979d79573dfe4ebd9e4c4cb88", "patch": "@@ -54,10 +54,12 @@ use externalfiles::ExternalHtml;\n \n use serialize::json::{self, ToJson};\n use syntax::{abi, ast};\n+use syntax::feature_gate::UnstableFeatures;\n use rustc::middle::cstore::LOCAL_CRATE;\n use rustc::middle::def_id::{CRATE_DEF_INDEX, DefId};\n use rustc::middle::privacy::AccessLevels;\n use rustc::middle::stability;\n+use rustc::session::config::get_unstable_features_setting;\n use rustc_front::hir;\n \n use clean::{self, SelfTy};\n@@ -1897,10 +1899,14 @@ fn item_static(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n \n fn item_function(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n                  f: &clean::Function) -> fmt::Result {\n+    let vis_constness = match get_unstable_features_setting() {\n+        UnstableFeatures::Allow => f.constness,\n+        _ => hir::Constness::NotConst\n+    };\n     try!(write!(w, \"<pre class='rust fn'>{vis}{constness}{unsafety}{abi}fn \\\n                     {name}{generics}{decl}{where_clause}</pre>\",\n            vis = VisSpace(it.visibility),\n-           constness = ConstnessSpace(f.constness),\n+           constness = ConstnessSpace(vis_constness),\n            unsafety = UnsafetySpace(f.unsafety),\n            abi = AbiSpace(f.abi),\n            name = it.name.as_ref().unwrap(),\n@@ -2122,9 +2128,13 @@ fn render_assoc_item(w: &mut fmt::Formatter, meth: &clean::Item,\n                 href(did).map(|p| format!(\"{}{}\", p.0, anchor)).unwrap_or(anchor)\n             }\n         };\n+        let vis_constness = match get_unstable_features_setting() {\n+            UnstableFeatures::Allow => constness,\n+            _ => hir::Constness::NotConst\n+        };\n         write!(w, \"{}{}{}fn <a href='{href}' class='fnname'>{name}</a>\\\n                    {generics}{decl}{where_clause}\",\n-               ConstnessSpace(constness),\n+               ConstnessSpace(vis_constness),\n                UnsafetySpace(unsafety),\n                match abi {\n                    Abi::Rust => String::new(),"}]}