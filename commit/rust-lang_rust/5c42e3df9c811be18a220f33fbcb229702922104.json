{"sha": "5c42e3df9c811be18a220f33fbcb229702922104", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjNDJlM2RmOWM4MTFiZTE4YTIyMGYzM2ZiY2IyMjk3MDI5MjIxMDQ=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-31T12:31:02Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-02-06T08:13:32Z"}, "message": "Allow non-semicolon-requiring expressions to be followed by .field\n\nThere is no valid expression that starts with a dot token (.5 is a number token),\nso this introduces no ambiguities.\n\nIssue #1716", "tree": {"sha": "09c9978cd068011e8541862bc46fb3de29f17231", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09c9978cd068011e8541862bc46fb3de29f17231"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c42e3df9c811be18a220f33fbcb229702922104", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c42e3df9c811be18a220f33fbcb229702922104", "html_url": "https://github.com/rust-lang/rust/commit/5c42e3df9c811be18a220f33fbcb229702922104", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c42e3df9c811be18a220f33fbcb229702922104/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da61e1ff15a3f1ad3aa8dfcf7ac0a646d08f60eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/da61e1ff15a3f1ad3aa8dfcf7ac0a646d08f60eb", "html_url": "https://github.com/rust-lang/rust/commit/da61e1ff15a3f1ad3aa8dfcf7ac0a646d08f60eb"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "7879aecb7a0d5725796f3004fbe9106f64410810", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/5c42e3df9c811be18a220f33fbcb229702922104/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c42e3df9c811be18a220f33fbcb229702922104/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=5c42e3df9c811be18a220f33fbcb229702922104", "patch": "@@ -1039,7 +1039,28 @@ fn parse_dot_or_call_expr_with(p: parser, e0: pexpr) -> pexpr {\n     let e = e0;\n     let lo = e.span.lo;\n     let hi = e.span.hi;\n-    while !expr_is_complete(p, e) {\n+    while true {\n+        // expr.f\n+        if eat(p, token::DOT) {\n+            alt p.token {\n+              token::IDENT(i, _) {\n+                hi = p.span.hi;\n+                p.bump();\n+                let tys = if eat(p, token::MOD_SEP) {\n+                    expect(p, token::LT);\n+                    parse_seq_to_gt(some(token::COMMA),\n+                                    {|p| parse_ty(p, false)}, p)\n+                } else { [] };\n+                e = mk_pexpr(p, lo, hi,\n+                             ast::expr_field(to_expr(e),\n+                                             p.get_str(i),\n+                                             tys));\n+              }\n+              t { unexpected(p, t); }\n+            }\n+            cont;\n+        }\n+        if expr_is_complete(p, e) { break; }\n         alt p.token {\n           // expr(...)\n           token::LPAREN if permits_call(p) {\n@@ -1076,27 +1097,6 @@ fn parse_dot_or_call_expr_with(p: parser, e0: pexpr) -> pexpr {\n             e = mk_pexpr(p, lo, hi, ast::expr_index(to_expr(e), ix));\n           }\n \n-          // expr.f\n-          token::DOT {\n-            p.bump();\n-            alt p.token {\n-              token::IDENT(i, _) {\n-                hi = p.span.hi;\n-                p.bump();\n-                let tys = if eat(p, token::MOD_SEP) {\n-                    expect(p, token::LT);\n-                    parse_seq_to_gt(some(token::COMMA),\n-                                    {|p| parse_ty(p, false)}, p)\n-                } else { [] };\n-                e = mk_pexpr(p, lo, hi,\n-                             ast::expr_field(to_expr(e),\n-                                             p.get_str(i),\n-                                             tys));\n-              }\n-              t { unexpected(p, t); }\n-            }\n-          }\n-\n           _ { ret e; }\n         }\n     }"}]}