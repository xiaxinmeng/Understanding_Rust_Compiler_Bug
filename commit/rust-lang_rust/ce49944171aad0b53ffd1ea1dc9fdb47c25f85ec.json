{"sha": "ce49944171aad0b53ffd1ea1dc9fdb47c25f85ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlNDk5NDQxNzFhYWQwYjUzZmZkMWVhMWRjOWZkYjQ3YzI1Zjg1ZWM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-02T03:35:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-02T03:35:48Z"}, "message": "Rollup merge of #73569 - Aaron1011:fix/macro-rules-group, r=petrochenkov\n\nHandle `macro_rules!` tokens consistently across crates\n\nWhen we serialize a `macro_rules!` macro, we used a 'lowered' `TokenStream` for its body, which has all `Nonterminal`s expanded in-place via `nt_to_tokenstream`. This matters when an 'outer' `macro_rules!` macro expands to an 'inner' `macro_rules!` macro - the inner macro may use tokens captured from the 'outer' macro in its definition.\n\nThis means that invoking a foreign `macro_rules!` macro may use a different body `TokenStream` than when the same `macro_rules!` macro is invoked in the same crate. This difference is observable by proc-macros invoked by a `macro_rules!` macro - a `None`-delimited group will be seen in the same-crate case (inserted when convering `Nonterminal`s to the `proc_macro` crate's structs), but no `None`-delimited group in the cross-crate case.\n\nTo fix this inconsistency, we now insert `None`-delimited groups when 'lowering' a `Nonterminal` `macro_rules!` body, just as we do in `proc_macro_server`. Additionally, we no longer print extra spaces for `None`-delimited groups - as far as pretty-printing is concerned, they don't exist (only their contents do). This ensures that `Display` output of a `TokenStream` does not depend on which crate a `macro_rules!` macro was invoked from.\n\nThis PR is necessary in order to patch the `solana-genesis-programs` for the upcoming hygiene serialization breakage (https://github.com/rust-lang/rust/pull/72121#issuecomment-646924847). The `solana-genesis-programs` crate will need to use a proc macro to re-span certain tokens in a nested `macro_rules!`, which requires us to consistently use a `None`-delimited group.\n\nSee `src/test/ui/proc-macro/nested-macro-rules.rs` for an example of the kind of nested `macro_rules!` affected by this crate.", "tree": {"sha": "d63f148a77ae33ac03ebeb4b178bfe01f9b11abd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d63f148a77ae33ac03ebeb4b178bfe01f9b11abd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce49944171aad0b53ffd1ea1dc9fdb47c25f85ec", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe/VYVCRBK7hj4Ov3rIwAAdHIIAF9Qf1JyOfM6KD3D1c+M5r4y\nfru6hNjtXQFtTdA6el4iuUjZ078a/aVfdgDh9Ych+yuqlw7J3POGZzGBRoj3oH9t\n3f8paQZOuQDKXMHLkkzna4rf1g1OJiov7ZjnmwxB02WEOEbzI3ICdOZTA+ryHktH\nwEL1vzALhDUklpXJn4gYzZk4UkV65MbLXzsv2txW4VN6Tk6XAZWWiIHfDAFHcAEW\ndO9BrPFEH55/LCyrTat5UlqUgSDf2UDO0DbTjF64JPcApwz2nBNh1CPIqNg6byNG\nE4QsTxHD7GPhpCgb1vsIr/0QF+rvUr5dhnh7kVNrNNjTXB8iXrxKXtxb1niY4+o=\n=1XWP\n-----END PGP SIGNATURE-----\n", "payload": "tree d63f148a77ae33ac03ebeb4b178bfe01f9b11abd\nparent 6b57050b17de7055ca2345867ee4eb8c5b5f1fa9\nparent 1ded7a581589b65be35724ea00bb5cec4e13c673\nauthor Manish Goregaokar <manishsmail@gmail.com> 1593660948 -0700\ncommitter GitHub <noreply@github.com> 1593660948 -0700\n\nRollup merge of #73569 - Aaron1011:fix/macro-rules-group, r=petrochenkov\n\nHandle `macro_rules!` tokens consistently across crates\n\nWhen we serialize a `macro_rules!` macro, we used a 'lowered' `TokenStream` for its body, which has all `Nonterminal`s expanded in-place via `nt_to_tokenstream`. This matters when an 'outer' `macro_rules!` macro expands to an 'inner' `macro_rules!` macro - the inner macro may use tokens captured from the 'outer' macro in its definition.\n\nThis means that invoking a foreign `macro_rules!` macro may use a different body `TokenStream` than when the same `macro_rules!` macro is invoked in the same crate. This difference is observable by proc-macros invoked by a `macro_rules!` macro - a `None`-delimited group will be seen in the same-crate case (inserted when convering `Nonterminal`s to the `proc_macro` crate's structs), but no `None`-delimited group in the cross-crate case.\n\nTo fix this inconsistency, we now insert `None`-delimited groups when 'lowering' a `Nonterminal` `macro_rules!` body, just as we do in `proc_macro_server`. Additionally, we no longer print extra spaces for `None`-delimited groups - as far as pretty-printing is concerned, they don't exist (only their contents do). This ensures that `Display` output of a `TokenStream` does not depend on which crate a `macro_rules!` macro was invoked from.\n\nThis PR is necessary in order to patch the `solana-genesis-programs` for the upcoming hygiene serialization breakage (https://github.com/rust-lang/rust/pull/72121#issuecomment-646924847). The `solana-genesis-programs` crate will need to use a proc macro to re-span certain tokens in a nested `macro_rules!`, which requires us to consistently use a `None`-delimited group.\n\nSee `src/test/ui/proc-macro/nested-macro-rules.rs` for an example of the kind of nested `macro_rules!` affected by this crate.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce49944171aad0b53ffd1ea1dc9fdb47c25f85ec", "html_url": "https://github.com/rust-lang/rust/commit/ce49944171aad0b53ffd1ea1dc9fdb47c25f85ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce49944171aad0b53ffd1ea1dc9fdb47c25f85ec/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b57050b17de7055ca2345867ee4eb8c5b5f1fa9", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b57050b17de7055ca2345867ee4eb8c5b5f1fa9", "html_url": "https://github.com/rust-lang/rust/commit/6b57050b17de7055ca2345867ee4eb8c5b5f1fa9"}, {"sha": "1ded7a581589b65be35724ea00bb5cec4e13c673", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ded7a581589b65be35724ea00bb5cec4e13c673", "html_url": "https://github.com/rust-lang/rust/commit/1ded7a581589b65be35724ea00bb5cec4e13c673"}], "stats": {"total": 451, "additions": 395, "deletions": 56}, "files": [{"sha": "76139209c9151da807c35e77c73bd2ce401f8cad", "filename": "src/librustc_ast/attr/mod.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ce49944171aad0b53ffd1ea1dc9fdb47c25f85ec/src%2Flibrustc_ast%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce49944171aad0b53ffd1ea1dc9fdb47c25f85ec/src%2Flibrustc_ast%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fattr%2Fmod.rs?ref=ce49944171aad0b53ffd1ea1dc9fdb47c25f85ec", "patch": "@@ -560,6 +560,9 @@ impl MetaItemKind {\n         tokens: &mut impl Iterator<Item = TokenTree>,\n     ) -> Option<MetaItemKind> {\n         match tokens.next() {\n+            Some(TokenTree::Delimited(_, token::NoDelim, inner_tokens)) => {\n+                MetaItemKind::name_value_from_tokens(&mut inner_tokens.trees())\n+            }\n             Some(TokenTree::Token(token)) => {\n                 Lit::from_token(&token).ok().map(MetaItemKind::NameValue)\n             }\n@@ -619,13 +622,20 @@ impl NestedMetaItem {\n     where\n         I: Iterator<Item = TokenTree>,\n     {\n-        if let Some(TokenTree::Token(token)) = tokens.peek() {\n-            if let Ok(lit) = Lit::from_token(token) {\n+        match tokens.peek() {\n+            Some(TokenTree::Token(token)) => {\n+                if let Ok(lit) = Lit::from_token(token) {\n+                    tokens.next();\n+                    return Some(NestedMetaItem::Literal(lit));\n+                }\n+            }\n+            Some(TokenTree::Delimited(_, token::NoDelim, inner_tokens)) => {\n+                let inner_tokens = inner_tokens.clone();\n                 tokens.next();\n-                return Some(NestedMetaItem::Literal(lit));\n+                return NestedMetaItem::from_tokens(&mut inner_tokens.into_trees().peekable());\n             }\n+            _ => {}\n         }\n-\n         MetaItem::from_tokens(tokens).map(NestedMetaItem::MetaItem)\n     }\n }"}, {"sha": "b5d3beb4f8a9b70331639b0d3e9ec8aa7ce2645f", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ce49944171aad0b53ffd1ea1dc9fdb47c25f85ec/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce49944171aad0b53ffd1ea1dc9fdb47c25f85ec/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=ce49944171aad0b53ffd1ea1dc9fdb47c25f85ec", "patch": "@@ -39,8 +39,8 @@ use rustc_ast::ast;\n use rustc_ast::ast::*;\n use rustc_ast::attr;\n use rustc_ast::node_id::NodeMap;\n-use rustc_ast::token::{self, Nonterminal, Token};\n-use rustc_ast::tokenstream::{TokenStream, TokenTree};\n+use rustc_ast::token::{self, DelimToken, Nonterminal, Token};\n+use rustc_ast::tokenstream::{DelimSpan, TokenStream, TokenTree};\n use rustc_ast::visit::{self, AssocCtxt, Visitor};\n use rustc_ast::walk_list;\n use rustc_ast_pretty::pprust;\n@@ -1029,7 +1029,12 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         match token.kind {\n             token::Interpolated(nt) => {\n                 let tts = (self.nt_to_tokenstream)(&nt, &self.sess.parse_sess, token.span);\n-                self.lower_token_stream(tts)\n+                TokenTree::Delimited(\n+                    DelimSpan::from_single(token.span),\n+                    DelimToken::NoDelim,\n+                    self.lower_token_stream(tts),\n+                )\n+                .into()\n             }\n             _ => TokenTree::Token(token).into(),\n         }"}, {"sha": "5a6e10f49f9e6959666d73c7ac37d14e7beae1f1", "filename": "src/librustc_ast_pretty/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce49944171aad0b53ffd1ea1dc9fdb47c25f85ec/src%2Flibrustc_ast_pretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce49944171aad0b53ffd1ea1dc9fdb47c25f85ec/src%2Flibrustc_ast_pretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust.rs?ref=ce49944171aad0b53ffd1ea1dc9fdb47c25f85ec", "patch": "@@ -257,7 +257,7 @@ fn token_kind_to_string_ext(tok: &TokenKind, convert_dollar_crate: Option<Span>)\n         token::CloseDelim(token::Bracket) => \"]\".to_string(),\n         token::OpenDelim(token::Brace) => \"{\".to_string(),\n         token::CloseDelim(token::Brace) => \"}\".to_string(),\n-        token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim) => \" \".to_string(),\n+        token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim) => \"\".to_string(),\n         token::Pound => \"#\".to_string(),\n         token::Dollar => \"$\".to_string(),\n         token::Question => \"?\".to_string(),"}, {"sha": "7101525b3097721272e0de0cb09a09c871c3a511", "filename": "src/librustc_expand/mbe/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce49944171aad0b53ffd1ea1dc9fdb47c25f85ec/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce49944171aad0b53ffd1ea1dc9fdb47c25f85ec/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs?ref=ce49944171aad0b53ffd1ea1dc9fdb47c25f85ec", "patch": "@@ -387,6 +387,7 @@ pub fn compile_declarative_macro(\n     def: &ast::Item,\n     edition: Edition,\n ) -> SyntaxExtension {\n+    debug!(\"compile_declarative_macro: {:?}\", def);\n     let mk_syn_ext = |expander| {\n         SyntaxExtension::new(\n             sess,"}, {"sha": "09306f26ee0adb76436b0781ca37b6551e6cc9c7", "filename": "src/librustc_expand/mbe/quoted.rs", "status": "modified", "additions": 63, "deletions": 47, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/ce49944171aad0b53ffd1ea1dc9fdb47c25f85ec/src%2Flibrustc_expand%2Fmbe%2Fquoted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce49944171aad0b53ffd1ea1dc9fdb47c25f85ec/src%2Flibrustc_expand%2Fmbe%2Fquoted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Fquoted.rs?ref=ce49944171aad0b53ffd1ea1dc9fdb47c25f85ec", "patch": "@@ -90,72 +90,88 @@ pub(super) fn parse(\n /// # Parameters\n ///\n /// - `tree`: the tree we wish to convert.\n-/// - `trees`: an iterator over trees. We may need to read more tokens from it in order to finish\n+/// - `outer_trees`: an iterator over trees. We may need to read more tokens from it in order to finish\n ///   converting `tree`\n /// - `expect_matchers`: same as for `parse` (see above).\n /// - `sess`: the parsing session. Any errors will be emitted to this session.\n /// - `features`, `attrs`: language feature flags and attributes so that we know whether to use\n ///   unstable features or not.\n fn parse_tree(\n     tree: tokenstream::TokenTree,\n-    trees: &mut impl Iterator<Item = tokenstream::TokenTree>,\n+    outer_trees: &mut impl Iterator<Item = tokenstream::TokenTree>,\n     expect_matchers: bool,\n     sess: &ParseSess,\n     node_id: NodeId,\n ) -> TokenTree {\n     // Depending on what `tree` is, we could be parsing different parts of a macro\n     match tree {\n         // `tree` is a `$` token. Look at the next token in `trees`\n-        tokenstream::TokenTree::Token(Token { kind: token::Dollar, span }) => match trees.next() {\n-            // `tree` is followed by a delimited set of token trees. This indicates the beginning\n-            // of a repetition sequence in the macro (e.g. `$(pat)*`).\n-            Some(tokenstream::TokenTree::Delimited(span, delim, tts)) => {\n-                // Must have `(` not `{` or `[`\n-                if delim != token::Paren {\n-                    let tok = pprust::token_kind_to_string(&token::OpenDelim(delim));\n-                    let msg = format!(\"expected `(`, found `{}`\", tok);\n-                    sess.span_diagnostic.span_err(span.entire(), &msg);\n-                }\n-                // Parse the contents of the sequence itself\n-                let sequence = parse(tts, expect_matchers, sess, node_id);\n-                // Get the Kleene operator and optional separator\n-                let (separator, kleene) = parse_sep_and_kleene_op(trees, span.entire(), sess);\n-                // Count the number of captured \"names\" (i.e., named metavars)\n-                let name_captures = macro_parser::count_names(&sequence);\n-                TokenTree::Sequence(\n-                    span,\n-                    Lrc::new(SequenceRepetition {\n-                        tts: sequence,\n-                        separator,\n-                        kleene,\n-                        num_captures: name_captures,\n-                    }),\n-                )\n+        tokenstream::TokenTree::Token(Token { kind: token::Dollar, span }) => {\n+            // FIXME: Handle `None`-delimited groups in a more systematic way\n+            // during parsing.\n+            let mut next = outer_trees.next();\n+            let mut trees: Box<dyn Iterator<Item = tokenstream::TokenTree>>;\n+            if let Some(tokenstream::TokenTree::Delimited(_, token::NoDelim, tts)) = next {\n+                trees = Box::new(tts.into_trees());\n+                next = trees.next();\n+            } else {\n+                trees = Box::new(outer_trees);\n             }\n \n-            // `tree` is followed by an `ident`. This could be `$meta_var` or the `$crate` special\n-            // metavariable that names the crate of the invocation.\n-            Some(tokenstream::TokenTree::Token(token)) if token.is_ident() => {\n-                let (ident, is_raw) = token.ident().unwrap();\n-                let span = ident.span.with_lo(span.lo());\n-                if ident.name == kw::Crate && !is_raw {\n-                    TokenTree::token(token::Ident(kw::DollarCrate, is_raw), span)\n-                } else {\n-                    TokenTree::MetaVar(span, ident)\n+            match next {\n+                // `tree` is followed by a delimited set of token trees. This indicates the beginning\n+                // of a repetition sequence in the macro (e.g. `$(pat)*`).\n+                Some(tokenstream::TokenTree::Delimited(span, delim, tts)) => {\n+                    // Must have `(` not `{` or `[`\n+                    if delim != token::Paren {\n+                        let tok = pprust::token_kind_to_string(&token::OpenDelim(delim));\n+                        let msg = format!(\"expected `(`, found `{}`\", tok);\n+                        sess.span_diagnostic.span_err(span.entire(), &msg);\n+                    }\n+                    // Parse the contents of the sequence itself\n+                    let sequence = parse(tts, expect_matchers, sess, node_id);\n+                    // Get the Kleene operator and optional separator\n+                    let (separator, kleene) =\n+                        parse_sep_and_kleene_op(&mut trees, span.entire(), sess);\n+                    // Count the number of captured \"names\" (i.e., named metavars)\n+                    let name_captures = macro_parser::count_names(&sequence);\n+                    TokenTree::Sequence(\n+                        span,\n+                        Lrc::new(SequenceRepetition {\n+                            tts: sequence,\n+                            separator,\n+                            kleene,\n+                            num_captures: name_captures,\n+                        }),\n+                    )\n                 }\n-            }\n \n-            // `tree` is followed by a random token. This is an error.\n-            Some(tokenstream::TokenTree::Token(token)) => {\n-                let msg =\n-                    format!(\"expected identifier, found `{}`\", pprust::token_to_string(&token),);\n-                sess.span_diagnostic.span_err(token.span, &msg);\n-                TokenTree::MetaVar(token.span, Ident::invalid())\n-            }\n+                // `tree` is followed by an `ident`. This could be `$meta_var` or the `$crate` special\n+                // metavariable that names the crate of the invocation.\n+                Some(tokenstream::TokenTree::Token(token)) if token.is_ident() => {\n+                    let (ident, is_raw) = token.ident().unwrap();\n+                    let span = ident.span.with_lo(span.lo());\n+                    if ident.name == kw::Crate && !is_raw {\n+                        TokenTree::token(token::Ident(kw::DollarCrate, is_raw), span)\n+                    } else {\n+                        TokenTree::MetaVar(span, ident)\n+                    }\n+                }\n \n-            // There are no more tokens. Just return the `$` we already have.\n-            None => TokenTree::token(token::Dollar, span),\n-        },\n+                // `tree` is followed by a random token. This is an error.\n+                Some(tokenstream::TokenTree::Token(token)) => {\n+                    let msg = format!(\n+                        \"expected identifier, found `{}`\",\n+                        pprust::token_to_string(&token),\n+                    );\n+                    sess.span_diagnostic.span_err(token.span, &msg);\n+                    TokenTree::MetaVar(token.span, Ident::invalid())\n+                }\n+\n+                // There are no more tokens. Just return the `$` we already have.\n+                None => TokenTree::token(token::Dollar, span),\n+            }\n+        }\n \n         // `tree` is an arbitrary token. Keep it.\n         tokenstream::TokenTree::Token(token) => TokenTree::Token(token),"}, {"sha": "d29f7380d9ee77d90699fbca240dd7d0b2fbc501", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce49944171aad0b53ffd1ea1dc9fdb47c25f85ec/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce49944171aad0b53ffd1ea1dc9fdb47c25f85ec/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=ce49944171aad0b53ffd1ea1dc9fdb47c25f85ec", "patch": "@@ -1049,6 +1049,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                 Some(attr) => attr,\n                 None => return Bound::Unbounded,\n             };\n+            debug!(\"layout_scalar_valid_range: attr={:?}\", attr);\n             for meta in attr.meta_item_list().expect(\"rustc_layout_scalar_valid_range takes args\") {\n                 match meta.literal().expect(\"attribute takes lit\").kind {\n                     ast::LitKind::Int(a, _) => return Bound::Included(a),"}, {"sha": "9de39e9b56c986da89bc8365f0ffa788bc68588e", "filename": "src/test/ui/macros/doc-comment.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ce49944171aad0b53ffd1ea1dc9fdb47c25f85ec/src%2Ftest%2Fui%2Fmacros%2Fdoc-comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce49944171aad0b53ffd1ea1dc9fdb47c25f85ec/src%2Ftest%2Fui%2Fmacros%2Fdoc-comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fdoc-comment.rs?ref=ce49944171aad0b53ffd1ea1dc9fdb47c25f85ec", "patch": "@@ -0,0 +1,25 @@\n+// check-pass\n+// Tests that we properly handle a nested macro expansion\n+// involving a `#[doc]` attribute\n+#![deny(missing_docs)]\n+//! Crate docs\n+\n+macro_rules! doc_comment {\n+    ($x:expr, $($tt:tt)*) => {\n+        #[doc = $x]\n+        $($tt)*\n+    }\n+}\n+\n+macro_rules! make_comment {\n+    () => {\n+        doc_comment!(\"Function docs\",\n+            pub fn bar() {}\n+        );\n+    }\n+}\n+\n+\n+make_comment!();\n+\n+fn main() {}"}, {"sha": "54e3d7857267b9efdf23520444b8c6bfe31fa068", "filename": "src/test/ui/proc-macro/auxiliary/meta-delim.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ce49944171aad0b53ffd1ea1dc9fdb47c25f85ec/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fmeta-delim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce49944171aad0b53ffd1ea1dc9fdb47c25f85ec/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fmeta-delim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fmeta-delim.rs?ref=ce49944171aad0b53ffd1ea1dc9fdb47c25f85ec", "patch": "@@ -0,0 +1,12 @@\n+macro_rules! produce_it {\n+    ($dollar_one:tt $foo:ident $my_name:ident) => {\n+        #[macro_export]\n+        macro_rules! meta_delim {\n+            ($dollar_one ($dollar_one $my_name:ident)*) => {\n+                stringify!($dollar_one ($dollar_one $my_name)*)\n+            }\n+        }\n+    }\n+}\n+\n+produce_it!($my_name name);"}, {"sha": "52ebe8e7fb2ef1d8906f00d0c2389853cd8f53ed", "filename": "src/test/ui/proc-macro/auxiliary/nested-macro-rules.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ce49944171aad0b53ffd1ea1dc9fdb47c25f85ec/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fnested-macro-rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce49944171aad0b53ffd1ea1dc9fdb47c25f85ec/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fnested-macro-rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fnested-macro-rules.rs?ref=ce49944171aad0b53ffd1ea1dc9fdb47c25f85ec", "patch": "@@ -0,0 +1,15 @@\n+pub struct FirstStruct;\n+\n+#[macro_export]\n+macro_rules! outer_macro {\n+    ($name:ident) => {\n+        #[macro_export]\n+        macro_rules! inner_macro {\n+            ($wrapper:ident) => {\n+                $wrapper!($name)\n+            }\n+        }\n+    }\n+}\n+\n+outer_macro!(FirstStruct);"}, {"sha": "8682ebdd109f02f8d7c2b405abcb7a258225d320", "filename": "src/test/ui/proc-macro/auxiliary/test-macros.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ce49944171aad0b53ffd1ea1dc9fdb47c25f85ec/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Ftest-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce49944171aad0b53ffd1ea1dc9fdb47c25f85ec/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Ftest-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Ftest-macros.rs?ref=ce49944171aad0b53ffd1ea1dc9fdb47c25f85ec", "patch": "@@ -101,6 +101,12 @@ pub fn print_bang(input: TokenStream) -> TokenStream {\n     print_helper(input, \"BANG\")\n }\n \n+#[proc_macro]\n+pub fn print_bang_consume(input: TokenStream) -> TokenStream {\n+    print_helper(input, \"BANG\");\n+    TokenStream::new()\n+}\n+\n #[proc_macro_attribute]\n pub fn print_attr(_: TokenStream, input: TokenStream) -> TokenStream {\n     print_helper(input, \"ATTR\")"}, {"sha": "ee988d48b461d30d1e76bd50d72e1bd35f0f7877", "filename": "src/test/ui/proc-macro/input-interpolated.stdout", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce49944171aad0b53ffd1ea1dc9fdb47c25f85ec/src%2Ftest%2Fui%2Fproc-macro%2Finput-interpolated.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/ce49944171aad0b53ffd1ea1dc9fdb47c25f85ec/src%2Ftest%2Fui%2Fproc-macro%2Finput-interpolated.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finput-interpolated.stdout?ref=ce49944171aad0b53ffd1ea1dc9fdb47c25f85ec", "patch": "@@ -1,5 +1,4 @@\n PRINT-BANG INPUT (DISPLAY): A\n-PRINT-BANG RE-COLLECTED (DISPLAY):  A \n PRINT-BANG INPUT (DEBUG): TokenStream [\n     Group {\n         delimiter: None,"}, {"sha": "964291bc6784c822c095502aa87ad0e916ef2563", "filename": "src/test/ui/proc-macro/meta-delim.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ce49944171aad0b53ffd1ea1dc9fdb47c25f85ec/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-delim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce49944171aad0b53ffd1ea1dc9fdb47c25f85ec/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-delim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-delim.rs?ref=ce49944171aad0b53ffd1ea1dc9fdb47c25f85ec", "patch": "@@ -0,0 +1,12 @@\n+// aux-build:meta-delim.rs\n+// edition:2018\n+// run-pass\n+\n+// Tests that we can properly deserialize a macro with strange delimiters\n+// See https://github.com/rust-lang/rust/pull/73569#issuecomment-650860457\n+\n+extern crate meta_delim;\n+\n+fn main() {\n+    assert_eq!(\"a bunch of idents\", meta_delim::meta_delim!(a bunch of idents));\n+}"}, {"sha": "2f8ef20232782d663d91dc669e93d0e13580855e", "filename": "src/test/ui/proc-macro/nested-macro-rules.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ce49944171aad0b53ffd1ea1dc9fdb47c25f85ec/src%2Ftest%2Fui%2Fproc-macro%2Fnested-macro-rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce49944171aad0b53ffd1ea1dc9fdb47c25f85ec/src%2Ftest%2Fui%2Fproc-macro%2Fnested-macro-rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnested-macro-rules.rs?ref=ce49944171aad0b53ffd1ea1dc9fdb47c25f85ec", "patch": "@@ -0,0 +1,20 @@\n+// run-pass\n+// aux-build:nested-macro-rules.rs\n+// aux-build:test-macros.rs\n+// compile-flags: -Z span-debug\n+// edition:2018\n+\n+extern crate nested_macro_rules;\n+extern crate test_macros;\n+\n+use test_macros::print_bang;\n+\n+use nested_macro_rules::FirstStruct;\n+struct SecondStruct;\n+\n+fn main() {\n+    nested_macro_rules::inner_macro!(print_bang);\n+\n+    nested_macro_rules::outer_macro!(SecondStruct);\n+    inner_macro!(print_bang);\n+}"}, {"sha": "e4cfe020324b8b9090f1856e8c3ebad95b2766af", "filename": "src/test/ui/proc-macro/nested-macro-rules.stdout", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ce49944171aad0b53ffd1ea1dc9fdb47c25f85ec/src%2Ftest%2Fui%2Fproc-macro%2Fnested-macro-rules.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/ce49944171aad0b53ffd1ea1dc9fdb47c25f85ec/src%2Ftest%2Fui%2Fproc-macro%2Fnested-macro-rules.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnested-macro-rules.stdout?ref=ce49944171aad0b53ffd1ea1dc9fdb47c25f85ec", "patch": "@@ -0,0 +1,26 @@\n+PRINT-BANG INPUT (DISPLAY): FirstStruct\n+PRINT-BANG INPUT (DEBUG): TokenStream [\n+    Group {\n+        delimiter: None,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"FirstStruct\",\n+                span: $DIR/auxiliary/nested-macro-rules.rs:15:14: 15:25 (#3),\n+            },\n+        ],\n+        span: $DIR/auxiliary/nested-macro-rules.rs:9:27: 9:32 (#3),\n+    },\n+]\n+PRINT-BANG INPUT (DISPLAY): SecondStruct\n+PRINT-BANG INPUT (DEBUG): TokenStream [\n+    Group {\n+        delimiter: None,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"SecondStruct\",\n+                span: $DIR/nested-macro-rules.rs:18:38: 18:50 (#9),\n+            },\n+        ],\n+        span: $DIR/auxiliary/nested-macro-rules.rs:9:27: 9:32 (#8),\n+    },\n+]"}, {"sha": "cfcd4c0d2a658071b66780086b6a00c50a449d98", "filename": "src/test/ui/proc-macro/nodelim-groups.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ce49944171aad0b53ffd1ea1dc9fdb47c25f85ec/src%2Ftest%2Fui%2Fproc-macro%2Fnodelim-groups.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce49944171aad0b53ffd1ea1dc9fdb47c25f85ec/src%2Ftest%2Fui%2Fproc-macro%2Fnodelim-groups.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnodelim-groups.rs?ref=ce49944171aad0b53ffd1ea1dc9fdb47c25f85ec", "patch": "@@ -0,0 +1,19 @@\n+// run-pass\n+// aux-build:test-macros.rs\n+// compile-flags: -Z span-debug\n+// edition:2018\n+//\n+// Tests the pretty-printing behavior of inserting `NoDelim` groups\n+\n+extern crate test_macros;\n+use test_macros::print_bang_consume;\n+\n+macro_rules! expand_it {\n+    (($val1:expr) ($val2:expr)) => { expand_it!($val1 + $val2) };\n+    ($val:expr) => { print_bang_consume!(\"hi\" $val (1 + 1)) };\n+}\n+\n+fn main() {\n+    expand_it!(1 + (25) + 1);\n+    expand_it!((\"hello\".len()) (\"world\".len()));\n+}"}, {"sha": "75a189a9fcdeab28073086e5282a7de052ef1cae", "filename": "src/test/ui/proc-macro/nodelim-groups.stdout", "status": "added", "additions": 156, "deletions": 0, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/ce49944171aad0b53ffd1ea1dc9fdb47c25f85ec/src%2Ftest%2Fui%2Fproc-macro%2Fnodelim-groups.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/ce49944171aad0b53ffd1ea1dc9fdb47c25f85ec/src%2Ftest%2Fui%2Fproc-macro%2Fnodelim-groups.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnodelim-groups.stdout?ref=ce49944171aad0b53ffd1ea1dc9fdb47c25f85ec", "patch": "@@ -0,0 +1,156 @@\n+PRINT-BANG INPUT (DISPLAY): \"hi\" 1 + (25) + 1 (1 + 1)\n+PRINT-BANG INPUT (DEBUG): TokenStream [\n+    Literal {\n+        kind: Str,\n+        symbol: \"hi\",\n+        suffix: None,\n+        span: $DIR/nodelim-groups.rs:13:42: 13:46 (#3),\n+    },\n+    Group {\n+        delimiter: None,\n+        stream: TokenStream [\n+            Literal {\n+                kind: Integer,\n+                symbol: \"1\",\n+                suffix: None,\n+                span: $DIR/nodelim-groups.rs:17:16: 17:17 (#0),\n+            },\n+            Punct {\n+                ch: '+',\n+                spacing: Alone,\n+                span: $DIR/nodelim-groups.rs:17:18: 17:19 (#0),\n+            },\n+            Group {\n+                delimiter: Parenthesis,\n+                stream: TokenStream [\n+                    Literal {\n+                        kind: Integer,\n+                        symbol: \"25\",\n+                        suffix: None,\n+                        span: $DIR/nodelim-groups.rs:17:21: 17:23 (#0),\n+                    },\n+                ],\n+                span: $DIR/nodelim-groups.rs:17:20: 17:24 (#0),\n+            },\n+            Punct {\n+                ch: '+',\n+                spacing: Alone,\n+                span: $DIR/nodelim-groups.rs:17:25: 17:26 (#0),\n+            },\n+            Literal {\n+                kind: Integer,\n+                symbol: \"1\",\n+                suffix: None,\n+                span: $DIR/nodelim-groups.rs:17:27: 17:28 (#0),\n+            },\n+        ],\n+        span: $DIR/nodelim-groups.rs:13:47: 13:51 (#3),\n+    },\n+    Group {\n+        delimiter: Parenthesis,\n+        stream: TokenStream [\n+            Literal {\n+                kind: Integer,\n+                symbol: \"1\",\n+                suffix: None,\n+                span: $DIR/nodelim-groups.rs:13:53: 13:54 (#3),\n+            },\n+            Punct {\n+                ch: '+',\n+                spacing: Alone,\n+                span: $DIR/nodelim-groups.rs:13:55: 13:56 (#3),\n+            },\n+            Literal {\n+                kind: Integer,\n+                symbol: \"1\",\n+                suffix: None,\n+                span: $DIR/nodelim-groups.rs:13:57: 13:58 (#3),\n+            },\n+        ],\n+        span: $DIR/nodelim-groups.rs:13:52: 13:59 (#3),\n+    },\n+]\n+PRINT-BANG INPUT (DISPLAY): \"hi\" \"hello\".len() + \"world\".len() (1 + 1)\n+PRINT-BANG RE-COLLECTED (DISPLAY): \"hi\" \"hello\" . len() + \"world\" . len() (1 + 1)\n+PRINT-BANG INPUT (DEBUG): TokenStream [\n+    Literal {\n+        kind: Str,\n+        symbol: \"hi\",\n+        suffix: None,\n+        span: $DIR/nodelim-groups.rs:13:42: 13:46 (#8),\n+    },\n+    Group {\n+        delimiter: None,\n+        stream: TokenStream [\n+            Literal {\n+                kind: Str,\n+                symbol: \"hello\",\n+                suffix: None,\n+                span: $DIR/nodelim-groups.rs:13:47: 13:51 (#8),\n+            },\n+            Punct {\n+                ch: '.',\n+                spacing: Alone,\n+                span: $DIR/nodelim-groups.rs:13:47: 13:51 (#8),\n+            },\n+            Ident {\n+                ident: \"len\",\n+                span: $DIR/nodelim-groups.rs:13:47: 13:51 (#8),\n+            },\n+            Group {\n+                delimiter: Parenthesis,\n+                stream: TokenStream [],\n+                span: $DIR/nodelim-groups.rs:13:47: 13:51 (#8),\n+            },\n+            Punct {\n+                ch: '+',\n+                spacing: Alone,\n+                span: $DIR/nodelim-groups.rs:13:47: 13:51 (#8),\n+            },\n+            Literal {\n+                kind: Str,\n+                symbol: \"world\",\n+                suffix: None,\n+                span: $DIR/nodelim-groups.rs:13:47: 13:51 (#8),\n+            },\n+            Punct {\n+                ch: '.',\n+                spacing: Alone,\n+                span: $DIR/nodelim-groups.rs:13:47: 13:51 (#8),\n+            },\n+            Ident {\n+                ident: \"len\",\n+                span: $DIR/nodelim-groups.rs:13:47: 13:51 (#8),\n+            },\n+            Group {\n+                delimiter: Parenthesis,\n+                stream: TokenStream [],\n+                span: $DIR/nodelim-groups.rs:13:47: 13:51 (#8),\n+            },\n+        ],\n+        span: $DIR/nodelim-groups.rs:13:47: 13:51 (#8),\n+    },\n+    Group {\n+        delimiter: Parenthesis,\n+        stream: TokenStream [\n+            Literal {\n+                kind: Integer,\n+                symbol: \"1\",\n+                suffix: None,\n+                span: $DIR/nodelim-groups.rs:13:53: 13:54 (#8),\n+            },\n+            Punct {\n+                ch: '+',\n+                spacing: Alone,\n+                span: $DIR/nodelim-groups.rs:13:55: 13:56 (#8),\n+            },\n+            Literal {\n+                kind: Integer,\n+                symbol: \"1\",\n+                suffix: None,\n+                span: $DIR/nodelim-groups.rs:13:57: 13:58 (#8),\n+            },\n+        ],\n+        span: $DIR/nodelim-groups.rs:13:52: 13:59 (#8),\n+    },\n+]"}, {"sha": "9192ecfe196cb9d3f2b09eb2e87bd0889c337e7c", "filename": "src/test/ui/unsafe/ranged_ints_macro.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ce49944171aad0b53ffd1ea1dc9fdb47c25f85ec/src%2Ftest%2Fui%2Funsafe%2Franged_ints_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce49944171aad0b53ffd1ea1dc9fdb47c25f85ec/src%2Ftest%2Fui%2Funsafe%2Franged_ints_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints_macro.rs?ref=ce49944171aad0b53ffd1ea1dc9fdb47c25f85ec", "patch": "@@ -0,0 +1,16 @@\n+// build-pass\n+#![feature(rustc_attrs)]\n+\n+macro_rules! apply {\n+    ($val:expr) => {\n+        #[rustc_layout_scalar_valid_range_start($val)]\n+        #[repr(transparent)]\n+        pub(crate) struct NonZero<T>(pub(crate) T);\n+    }\n+}\n+\n+apply!(1);\n+\n+fn main() {\n+    let _x = unsafe { NonZero(1) };\n+}"}]}