{"sha": "ca9f5645f3d4e363cad96bdacef8998cb30207d6", "node_id": "C_kwDOAAsO6NoAKGNhOWY1NjQ1ZjNkNGUzNjNjYWQ5NmJkYWNlZjg5OThjYjMwMjA3ZDY", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-06-08T19:11:08Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-08-30T17:04:58Z"}, "message": "Move AssocContainer to a metadata table.", "tree": {"sha": "deda1b18608b519ad1e711d8bc70f531aa112c1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/deda1b18608b519ad1e711d8bc70f531aa112c1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca9f5645f3d4e363cad96bdacef8998cb30207d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca9f5645f3d4e363cad96bdacef8998cb30207d6", "html_url": "https://github.com/rust-lang/rust/commit/ca9f5645f3d4e363cad96bdacef8998cb30207d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca9f5645f3d4e363cad96bdacef8998cb30207d6/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "927e58d633a569a404a6cb75df3a41d1af210d56", "url": "https://api.github.com/repos/rust-lang/rust/commits/927e58d633a569a404a6cb75df3a41d1af210d56", "html_url": "https://github.com/rust-lang/rust/commit/927e58d633a569a404a6cb75df3a41d1af210d56"}], "stats": {"total": 42, "additions": 25, "deletions": 17}, "files": [{"sha": "7e2ade03c73e6c901ce4ed0d40d94105cc79304d", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ca9f5645f3d4e363cad96bdacef8998cb30207d6/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca9f5645f3d4e363cad96bdacef8998cb30207d6/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=ca9f5645f3d4e363cad96bdacef8998cb30207d6", "patch": "@@ -1112,7 +1112,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n \n     fn get_fn_has_self_parameter(self, id: DefIndex) -> bool {\n         match self.kind(id) {\n-            EntryKind::AssocFn { has_self, .. } => has_self,\n+            EntryKind::AssocFn { has_self } => has_self,\n             _ => false,\n         }\n     }\n@@ -1134,12 +1134,13 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n     fn get_associated_item(self, id: DefIndex) -> ty::AssocItem {\n         let name = self.item_name(id);\n \n-        let (kind, container, has_self) = match self.kind(id) {\n-            EntryKind::AssocConst(container) => (ty::AssocKind::Const, container, false),\n-            EntryKind::AssocFn { container, has_self } => (ty::AssocKind::Fn, container, has_self),\n-            EntryKind::AssocType(container) => (ty::AssocKind::Type, container, false),\n-            _ => bug!(\"cannot get associated-item of `{:?}`\", id),\n+        let (kind, has_self) = match self.kind(id) {\n+            EntryKind::AssocConst => (ty::AssocKind::Const, false),\n+            EntryKind::AssocFn { has_self } => (ty::AssocKind::Fn, has_self),\n+            EntryKind::AssocType => (ty::AssocKind::Type, false),\n+            _ => bug!(\"cannot get associated-item of `{:?}`\", self.def_key(id)),\n         };\n+        let container = self.root.tables.assoc_container.get(self, id).unwrap();\n \n         ty::AssocItem {\n             name,"}, {"sha": "25590af84f64fa5a1b0db4b81a3b1c315fad4c60", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ca9f5645f3d4e363cad96bdacef8998cb30207d6/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca9f5645f3d4e363cad96bdacef8998cb30207d6/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=ca9f5645f3d4e363cad96bdacef8998cb30207d6", "patch": "@@ -1326,11 +1326,11 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         let ast_item = tcx.hir().expect_trait_item(def_id.expect_local());\n         self.tables.impl_defaultness.set(def_id.index, ast_item.defaultness);\n         let trait_item = tcx.associated_item(def_id);\n+        self.tables.assoc_container.set(def_id.index, trait_item.container);\n \n         match trait_item.kind {\n             ty::AssocKind::Const => {\n-                let container = trait_item.container;\n-                record!(self.tables.kind[def_id] <- EntryKind::AssocConst(container));\n+                record!(self.tables.kind[def_id] <- EntryKind::AssocConst);\n             }\n             ty::AssocKind::Fn => {\n                 let hir::TraitItemKind::Fn(m_sig, m) = &ast_item.kind else { bug!() };\n@@ -1345,13 +1345,12 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 self.tables.asyncness.set(def_id.index, m_sig.header.asyncness);\n                 self.tables.constness.set(def_id.index, hir::Constness::NotConst);\n                 record!(self.tables.kind[def_id] <- EntryKind::AssocFn {\n-                    container: ty::AssocItemContainer::TraitContainer,\n                     has_self: trait_item.fn_has_self_parameter,\n                 });\n             }\n             ty::AssocKind::Type => {\n                 self.encode_explicit_item_bounds(def_id);\n-                record!(self.tables.kind[def_id] <- EntryKind::AssocType(ty::AssocItemContainer::TraitContainer));\n+                record!(self.tables.kind[def_id] <- EntryKind::AssocType);\n             }\n         }\n         if trait_item.kind == ty::AssocKind::Fn {\n@@ -1366,11 +1365,11 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         let ast_item = self.tcx.hir().expect_impl_item(def_id.expect_local());\n         self.tables.impl_defaultness.set(def_id.index, ast_item.defaultness);\n         let impl_item = self.tcx.associated_item(def_id);\n+        self.tables.assoc_container.set(def_id.index, impl_item.container);\n \n         match impl_item.kind {\n             ty::AssocKind::Const => {\n-                let container = impl_item.container;\n-                record!(self.tables.kind[def_id] <- EntryKind::AssocConst(container));\n+                record!(self.tables.kind[def_id] <- EntryKind::AssocConst);\n             }\n             ty::AssocKind::Fn => {\n                 let hir::ImplItemKind::Fn(ref sig, body) = ast_item.kind else { bug!() };\n@@ -1384,12 +1383,11 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 };\n                 self.tables.constness.set(def_id.index, constness);\n                 record!(self.tables.kind[def_id] <- EntryKind::AssocFn {\n-                    container: ty::AssocItemContainer::ImplContainer,\n                     has_self: impl_item.fn_has_self_parameter,\n                 });\n             }\n             ty::AssocKind::Type => {\n-                record!(self.tables.kind[def_id] <- EntryKind::AssocType(ty::AssocItemContainer::ImplContainer));\n+                record!(self.tables.kind[def_id] <- EntryKind::AssocType);\n             }\n         }\n         if let Some(trait_item_def_id) = impl_item.trait_item_def_id {"}, {"sha": "7537f2c68e59307790f153814e8cff67336825db", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ca9f5645f3d4e363cad96bdacef8998cb30207d6/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca9f5645f3d4e363cad96bdacef8998cb30207d6/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=ca9f5645f3d4e363cad96bdacef8998cb30207d6", "patch": "@@ -394,6 +394,7 @@ define_tables! {\n     generator_diagnostic_data: Table<DefIndex, LazyValue<GeneratorDiagnosticData<'static>>>,\n     may_have_doc_links: Table<DefIndex, ()>,\n     variant_data: Table<DefIndex, LazyValue<VariantData>>,\n+    assoc_container: Table<DefIndex, ty::AssocItemContainer>,\n }\n \n #[derive(Copy, Clone, MetadataEncodable, MetadataDecodable)]\n@@ -423,9 +424,9 @@ enum EntryKind {\n     Generator,\n     Trait,\n     Impl,\n-    AssocFn { container: ty::AssocItemContainer, has_self: bool },\n-    AssocType(ty::AssocItemContainer),\n-    AssocConst(ty::AssocItemContainer),\n+    AssocFn { has_self: bool },\n+    AssocType,\n+    AssocConst,\n     TraitAlias,\n }\n "}, {"sha": "6000df75934885a7f377ca67b3b8985e09604e82", "filename": "compiler/rustc_metadata/src/rmeta/table.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ca9f5645f3d4e363cad96bdacef8998cb30207d6/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca9f5645f3d4e363cad96bdacef8998cb30207d6/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs?ref=ca9f5645f3d4e363cad96bdacef8998cb30207d6", "patch": "@@ -141,6 +141,13 @@ fixed_size_enum! {\n     }\n }\n \n+fixed_size_enum! {\n+    ty::AssocItemContainer {\n+        ( TraitContainer )\n+        ( ImplContainer  )\n+    }\n+}\n+\n // We directly encode `DefPathHash` because a `LazyValue` would incur a 25% cost.\n impl FixedSizeEncoding for Option<DefPathHash> {\n     type ByteArray = [u8; 16];"}, {"sha": "ca24c0d1ce386fc5801be18526395b68e3589677", "filename": "compiler/rustc_middle/src/ty/parameterized.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca9f5645f3d4e363cad96bdacef8998cb30207d6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fparameterized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca9f5645f3d4e363cad96bdacef8998cb30207d6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fparameterized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fparameterized.rs?ref=ca9f5645f3d4e363cad96bdacef8998cb30207d6", "patch": "@@ -55,6 +55,7 @@ trivially_parameterized_over_tcx! {\n     crate::middle::exported_symbols::SymbolExportInfo,\n     crate::middle::resolve_lifetime::ObjectLifetimeDefault,\n     crate::mir::ConstQualifs,\n+    ty::AssocItemContainer,\n     ty::Generics,\n     ty::ImplPolarity,\n     ty::ReprOptions,"}]}