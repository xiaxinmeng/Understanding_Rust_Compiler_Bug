{"sha": "7a87258155dce69e5c2146278af974fb854850da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhODcyNTgxNTVkY2U2OWU1YzIxNDYyNzhhZjk3NGZiODU0ODUwZGE=", "commit": {"author": {"name": "Grahame Bowland", "email": "grahame@angrygoats.net", "date": "2012-03-28T17:27:37Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-29T07:20:05Z"}, "message": "Rewrite str::push_char in rust.\n\nAvoid crossing to C to reallocate underlying array when possible,\nif we must we now only cross once per char (not once per byte.)", "tree": {"sha": "a8d4ceda427e24b4331aa9cce28bd46ad0c66853", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8d4ceda427e24b4331aa9cce28bd46ad0c66853"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a87258155dce69e5c2146278af974fb854850da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a87258155dce69e5c2146278af974fb854850da", "html_url": "https://github.com/rust-lang/rust/commit/7a87258155dce69e5c2146278af974fb854850da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a87258155dce69e5c2146278af974fb854850da/comments", "author": null, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7b66b6cb3aa7b04d611f22d9d0029945e539db1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7b66b6cb3aa7b04d611f22d9d0029945e539db1", "html_url": "https://github.com/rust-lang/rust/commit/b7b66b6cb3aa7b04d611f22d9d0029945e539db1"}], "stats": {"total": 95, "additions": 67, "deletions": 28}, "files": [{"sha": "8e36bc6db14f475a04dcb8213979c181eacab133", "filename": "src/libcore/str.rs", "status": "modified", "additions": 67, "deletions": 28, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/7a87258155dce69e5c2146278af974fb854850da/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a87258155dce69e5c2146278af974fb854850da/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=7a87258155dce69e5c2146278af974fb854850da", "patch": "@@ -13,7 +13,6 @@ export\n    from_byte,\n    from_char,\n    from_chars,\n-   push_char,\n    concat,\n    connect,\n \n@@ -102,6 +101,8 @@ export\n native mod rustrt {\n     fn rust_str_push(&s: str, ch: u8);\n     fn str_reserve_shared(&ss: str, nn: libc::size_t);\n+    #[rust_stack]\n+    fn upcall_vec_grow(&s: str, new_sz: libc::size_t);\n }\n \n /*\n@@ -138,34 +139,72 @@ fn from_byte(b: u8) -> str unsafe {\n #[doc = \"Appends a character at the end of a string\"]\n fn push_char(&s: str, ch: char) unsafe {\n     let code = ch as uint;\n-    if code < max_one_b {\n-        rustrt::rust_str_push(s, code as u8);\n-    } else if code < max_two_b {\n-        rustrt::rust_str_push(s, (code >> 6u & 31u | tag_two_b) as u8);\n-        rustrt::rust_str_push(s, (code & 63u | tag_cont) as u8);\n-    } else if code < max_three_b {\n-        rustrt::rust_str_push(s, (code >> 12u & 15u | tag_three_b) as u8);\n-        rustrt::rust_str_push(s, (code >> 6u & 63u | tag_cont) as u8);\n-        rustrt::rust_str_push(s, (code & 63u | tag_cont) as u8);\n-    } else if code < max_four_b {\n-        rustrt::rust_str_push(s, (code >> 18u & 7u | tag_four_b) as u8);\n-        rustrt::rust_str_push(s, (code >> 12u & 63u | tag_cont) as u8);\n-        rustrt::rust_str_push(s, (code >> 6u & 63u | tag_cont) as u8);\n-        rustrt::rust_str_push(s, (code & 63u | tag_cont) as u8);\n-    } else if code < max_five_b {\n-        rustrt::rust_str_push(s, (code >> 24u & 3u | tag_five_b) as u8);\n-        rustrt::rust_str_push(s, (code >> 18u & 63u | tag_cont) as u8);\n-        rustrt::rust_str_push(s, (code >> 12u & 63u | tag_cont) as u8);\n-        rustrt::rust_str_push(s, (code >> 6u & 63u | tag_cont) as u8);\n-        rustrt::rust_str_push(s, (code & 63u | tag_cont) as u8);\n+    let nb = if code < max_one_b { 1u }\n+        else if code < max_two_b { 2u }\n+        else if code < max_three_b { 3u }\n+        else if code < max_four_b { 4u }\n+        else if code < max_five_b { 5u }\n+        else { 6u };\n+    let mut repr: *vec::unsafe::vec_repr = ::unsafe::reinterpret_cast(s);\n+    let fill = (*repr).fill;\n+    if fill + nb <= (*repr).alloc {\n+        (*repr).fill = fill + nb;\n     } else {\n-        rustrt::rust_str_push(s, (code >> 30u & 1u | tag_six_b) as u8);\n-        rustrt::rust_str_push(s, (code >> 24u & 63u | tag_cont) as u8);\n-        rustrt::rust_str_push(s, (code >> 18u & 63u | tag_cont) as u8);\n-        rustrt::rust_str_push(s, (code >> 12u & 63u | tag_cont) as u8);\n-        rustrt::rust_str_push(s, (code >> 6u & 63u | tag_cont) as u8);\n-        rustrt::rust_str_push(s, (code & 63u | tag_cont) as u8);\n-    }\n+        rustrt::upcall_vec_grow(s, fill + nb);\n+        // possibly realloc'd\n+        repr = ::unsafe::reinterpret_cast(s);\n+    }\n+    let off = fill - 1u;\n+    if nb == 1u {\n+        *ptr::mut_offset(ptr::mut_addr_of((*repr).data), off) =\n+            code as u8;\n+    } else if nb == 2u {\n+        *ptr::mut_offset(ptr::mut_addr_of((*repr).data), off) =\n+            (code >> 6u & 31u | tag_two_b) as u8;\n+        *ptr::mut_offset(ptr::mut_addr_of((*repr).data), off + 1u) =\n+            (code & 63u | tag_cont) as u8;\n+    } else if nb == 3u {\n+        *ptr::mut_offset(ptr::mut_addr_of((*repr).data), off) =\n+            (code >> 12u & 15u | tag_three_b) as u8;\n+        *ptr::mut_offset(ptr::mut_addr_of((*repr).data), off + 1u) =\n+            (code >> 6u & 63u | tag_cont) as u8;\n+        *ptr::mut_offset(ptr::mut_addr_of((*repr).data), off + 2u) =\n+            (code & 63u | tag_cont) as u8;\n+    } else if nb == 4u {\n+        *ptr::mut_offset(ptr::mut_addr_of((*repr).data), off) =\n+            (code >> 18u & 7u | tag_four_b) as u8;\n+        *ptr::mut_offset(ptr::mut_addr_of((*repr).data), off + 1u) =\n+            (code >> 12u & 63u | tag_cont) as u8;\n+        *ptr::mut_offset(ptr::mut_addr_of((*repr).data), off + 2u) =\n+            (code >> 6u & 63u | tag_cont) as u8;\n+        *ptr::mut_offset(ptr::mut_addr_of((*repr).data), off + 3u) =\n+            (code & 63u | tag_cont) as u8;\n+    } else if nb == 5u {\n+        *ptr::mut_offset(ptr::mut_addr_of((*repr).data), off) =\n+            (code >> 24u & 3u | tag_five_b) as u8;\n+        *ptr::mut_offset(ptr::mut_addr_of((*repr).data), off + 1u) =\n+            (code >> 18u & 63u | tag_cont) as u8;\n+        *ptr::mut_offset(ptr::mut_addr_of((*repr).data), off + 2u) =\n+            (code >> 12u & 63u | tag_cont) as u8;\n+        *ptr::mut_offset(ptr::mut_addr_of((*repr).data), off + 3u) =\n+            (code >> 6u & 63u | tag_cont) as u8;\n+        *ptr::mut_offset(ptr::mut_addr_of((*repr).data), off + 4u) =\n+            (code & 63u | tag_cont) as u8;\n+    } else if nb == 6u {\n+        *ptr::mut_offset(ptr::mut_addr_of((*repr).data), off) =\n+            (code >> 30u & 1u | tag_six_b) as u8;\n+        *ptr::mut_offset(ptr::mut_addr_of((*repr).data), off + 1u) =\n+            (code >> 24u & 63u | tag_cont) as u8;\n+        *ptr::mut_offset(ptr::mut_addr_of((*repr).data), off + 2u) =\n+            (code >> 18u & 63u | tag_cont) as u8;\n+        *ptr::mut_offset(ptr::mut_addr_of((*repr).data), off + 3u) =\n+            (code >> 12u & 63u | tag_cont) as u8;\n+        *ptr::mut_offset(ptr::mut_addr_of((*repr).data), off + 4u) =\n+            (code >> 6u & 63u | tag_cont) as u8;\n+        *ptr::mut_offset(ptr::mut_addr_of((*repr).data), off + 5u) =\n+            (code & 63u | tag_cont) as u8;\n+    }\n+    *ptr::mut_offset(ptr::mut_addr_of((*repr).data), off + nb) = 0u8;\n }\n \n #[doc = \"Convert a char to a string\"]"}]}