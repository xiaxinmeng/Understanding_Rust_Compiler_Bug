{"sha": "f13d9fd506eefd8efaa68175a984f12e4a89e9c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxM2Q5ZmQ1MDZlZWZkOGVmYWE2ODE3NWE5ODRmMTJlNGE4OWU5YzQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-12-28T09:44:32Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-12-28T09:44:32Z"}, "message": "Rustup to rustc 1.33.0-nightly (fb86d604b 2018-12-27)", "tree": {"sha": "cc7f2df5727fc9a1f7bba5519c0ff8d254f9abf0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc7f2df5727fc9a1f7bba5519c0ff8d254f9abf0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f13d9fd506eefd8efaa68175a984f12e4a89e9c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f13d9fd506eefd8efaa68175a984f12e4a89e9c4", "html_url": "https://github.com/rust-lang/rust/commit/f13d9fd506eefd8efaa68175a984f12e4a89e9c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f13d9fd506eefd8efaa68175a984f12e4a89e9c4/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e40f150d0c2d0c1a60edec304a6395c9b79e4c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e40f150d0c2d0c1a60edec304a6395c9b79e4c0", "html_url": "https://github.com/rust-lang/rust/commit/3e40f150d0c2d0c1a60edec304a6395c9b79e4c0"}], "stats": {"total": 438, "additions": 195, "deletions": 243}, "files": [{"sha": "a6f1a893b27053afa7f31f8359ae6cd32a86fda6", "filename": "patches/0002-Disable-u128-and-i128-in-libcore.patch", "status": "modified", "additions": 195, "deletions": 96, "changes": 291, "blob_url": "https://github.com/rust-lang/rust/blob/f13d9fd506eefd8efaa68175a984f12e4a89e9c4/patches%2F0002-Disable-u128-and-i128-in-libcore.patch", "raw_url": "https://github.com/rust-lang/rust/raw/f13d9fd506eefd8efaa68175a984f12e4a89e9c4/patches%2F0002-Disable-u128-and-i128-in-libcore.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0002-Disable-u128-and-i128-in-libcore.patch?ref=f13d9fd506eefd8efaa68175a984f12e4a89e9c4", "patch": "@@ -1,6 +1,6 @@\n-From a759066c5c2c63d945b23f1e9d35d0dd0489faf1 Mon Sep 17 00:00:00 2001\n+From 84040eb5ffeecaeb13863ff6d4106d6e4e2daaa9 Mon Sep 17 00:00:00 2001\n From: bjorn3 <bjorn3@users.noreply.github.com>\n-Date: Sat, 15 Dec 2018 11:28:12 +0100\n+Date: Fri, 28 Dec 2018 10:31:59 +0100\n Subject: [PATCH] Disable u128 and i128 in libcore\n \n ---\n@@ -14,21 +14,25 @@ Subject: [PATCH] Disable u128 and i128 in libcore\n  src/libcore/lib.rs           |   2 -\n  src/libcore/marker.rs        |   4 +-\n  src/libcore/mem.rs           |   2 -\n- src/libcore/num/mod.rs       |  99 ++++++++-------------------\n+ src/libcore/num/mod.rs       |  99 ++++++++--------------------\n  src/libcore/num/wrapping.rs  |  14 ++--\n- src/libcore/ops/arith.rs     |  22 +++---\n- src/libcore/ops/bit.rs       |  30 +++------\n+ src/libcore/ops/arith.rs     |  22 +++----\n+ src/libcore/ops/bit.rs       |  30 ++++-----\n  src/libcore/sync/atomic.rs   |  28 --------\n  src/libcore/tests/iter.rs    |  15 -----\n  src/libcore/tests/num/mod.rs |  18 -----\n- src/libcore/time.rs          | 126 -----------------------------------\n- 18 files changed, 62 insertions(+), 339 deletions(-)\n+ src/libcore/time.rs          | 123 -----------------------------------\n+ src/libstd/lib.rs            |   5 --\n+ src/libstd/net/ip.rs         |  20 ------\n+ src/libstd/num.rs            |   2 +-\n+ src/libstd/panic.rs          |   6 --\n+ 22 files changed, 63 insertions(+), 368 deletions(-)\n \n diff --git a/src/libcore/clone.rs b/src/libcore/clone.rs\n-index 225ea3d..a7f2637 100644\n+index 74b3ce4..9617ed1 100644\n --- a/src/libcore/clone.rs\n +++ b/src/libcore/clone.rs\n-@@ -172,8 +172,8 @@ mod impls {\n+@@ -162,8 +162,8 @@ mod impls {\n      }\n  \n      impl_clone! {\n@@ -40,10 +44,10 @@ index 225ea3d..a7f2637 100644\n          bool char\n      }\n diff --git a/src/libcore/cmp.rs b/src/libcore/cmp.rs\n-index 33881de..0e1e823 100644\n+index 9336b13..8faa03f 100644\n --- a/src/libcore/cmp.rs\n +++ b/src/libcore/cmp.rs\n-@@ -883,7 +883,7 @@ mod impls {\n+@@ -873,7 +873,7 @@ mod impls {\n      }\n  \n      partial_eq_impl! {\n@@ -52,7 +56,7 @@ index 33881de..0e1e823 100644\n      }\n  \n      macro_rules! eq_impl {\n-@@ -893,7 +893,7 @@ mod impls {\n+@@ -883,7 +883,7 @@ mod impls {\n          )*)\n      }\n  \n@@ -61,7 +65,7 @@ index 33881de..0e1e823 100644\n  \n      macro_rules! partial_ord_impl {\n          ($($t:ty)*) => ($(\n-@@ -982,7 +982,7 @@ mod impls {\n+@@ -972,7 +972,7 @@ mod impls {\n          }\n      }\n  \n@@ -71,10 +75,10 @@ index 33881de..0e1e823 100644\n      #[unstable(feature = \"never_type\", issue = \"35121\")]\n      impl PartialEq for ! {\n diff --git a/src/libcore/default.rs b/src/libcore/default.rs\n-index 638aceb..8b6ff80 100644\n+index 0e47c2f..570b949 100644\n --- a/src/libcore/default.rs\n +++ b/src/libcore/default.rs\n-@@ -145,14 +145,12 @@ default_impl! { u8, 0, \"Returns the default value of `0`\" }\n+@@ -135,14 +135,12 @@ default_impl! { u8, 0, \"Returns the default value of `0`\" }\n  default_impl! { u16, 0, \"Returns the default value of `0`\" }\n  default_impl! { u32, 0, \"Returns the default value of `0`\" }\n  default_impl! { u64, 0, \"Returns the default value of `0`\" }\n@@ -90,18 +94,18 @@ index 638aceb..8b6ff80 100644\n  default_impl! { f32, 0.0f32, \"Returns the default value of `0.0`\" }\n  default_impl! { f64, 0.0f64, \"Returns the default value of `0.0`\" }\n diff --git a/src/libcore/fmt/num.rs b/src/libcore/fmt/num.rs\n-index 51391fa..140255e 100644\n+index c7c8fc5..689d611 100644\n --- a/src/libcore/fmt/num.rs\n +++ b/src/libcore/fmt/num.rs\n-@@ -29,7 +29,6 @@ trait Int: PartialEq + PartialOrd + Div<Output=Self> + Rem<Output=Self> +\n+@@ -19,7 +19,6 @@ trait Int: PartialEq + PartialOrd + Div<Output=Self> + Rem<Output=Self> +\n      fn to_u16(&self) -> u16;\n      fn to_u32(&self) -> u32;\n      fn to_u64(&self) -> u64;\n -    fn to_u128(&self) -> u128;\n  }\n  \n  macro_rules! doit {\n-@@ -40,10 +39,9 @@ macro_rules! doit {\n+@@ -30,10 +29,9 @@ macro_rules! doit {\n          fn to_u16(&self) -> u16 { *self as u16 }\n          fn to_u32(&self) -> u32 { *self as u32 }\n          fn to_u64(&self) -> u64 { *self as u64 }\n@@ -113,15 +117,15 @@ index 51391fa..140255e 100644\n  \n  /// A type that represents a specific radix\n  #[doc(hidden)]\n-@@ -184,7 +182,6 @@ integer! { i8, u8 }\n+@@ -174,7 +172,6 @@ integer! { i8, u8 }\n  integer! { i16, u16 }\n  integer! { i32, u32 }\n  integer! { i64, u64 }\n -integer! { i128, u128 }\n  \n  const DEC_DIGITS_LUT: &'static[u8] =\n      b\"0001020304050607080910111213141516171819\\\n-@@ -260,7 +257,6 @@ macro_rules! impl_Display {\n+@@ -250,7 +247,6 @@ macro_rules! impl_Display {\n  \n  impl_Display!(i8, u8, i16, u16, i32, u32: to_u32);\n  impl_Display!(i64, u64: to_u64);\n@@ -130,10 +134,10 @@ index 51391fa..140255e 100644\n  impl_Display!(isize, usize: to_u16);\n  #[cfg(target_pointer_width = \"32\")]\n diff --git a/src/libcore/hash/mod.rs b/src/libcore/hash/mod.rs\n-index 3e59ee1..3f8d682 100644\n+index d5d29c9..f98f382 100644\n --- a/src/libcore/hash/mod.rs\n +++ b/src/libcore/hash/mod.rs\n-@@ -306,12 +306,6 @@ pub trait Hasher {\n+@@ -296,12 +296,6 @@ pub trait Hasher {\n      fn write_u64(&mut self, i: u64) {\n          self.write(&unsafe { mem::transmute::<_, [u8; 8]>(i) })\n      }\n@@ -146,7 +150,7 @@ index 3e59ee1..3f8d682 100644\n      /// Writes a single `usize` into this hasher.\n      #[inline]\n      #[stable(feature = \"hasher_write\", since = \"1.3.0\")]\n-@@ -346,12 +340,6 @@ pub trait Hasher {\n+@@ -336,12 +330,6 @@ pub trait Hasher {\n      fn write_i64(&mut self, i: i64) {\n          self.write_u64(i as u64)\n      }\n@@ -159,7 +163,7 @@ index 3e59ee1..3f8d682 100644\n      /// Writes a single `isize` into this hasher.\n      #[inline]\n      #[stable(feature = \"hasher_write\", since = \"1.3.0\")]\n-@@ -380,9 +368,6 @@ impl<H: Hasher + ?Sized> Hasher for &mut H {\n+@@ -370,9 +358,6 @@ impl<H: Hasher + ?Sized> Hasher for &mut H {\n      fn write_u64(&mut self, i: u64) {\n          (**self).write_u64(i)\n      }\n@@ -169,7 +173,7 @@ index 3e59ee1..3f8d682 100644\n      fn write_usize(&mut self, i: usize) {\n          (**self).write_usize(i)\n      }\n-@@ -398,9 +383,6 @@ impl<H: Hasher + ?Sized> Hasher for &mut H {\n+@@ -388,9 +373,6 @@ impl<H: Hasher + ?Sized> Hasher for &mut H {\n      fn write_i64(&mut self, i: i64) {\n          (**self).write_i64(i)\n      }\n@@ -179,7 +183,7 @@ index 3e59ee1..3f8d682 100644\n      fn write_isize(&mut self, i: isize) {\n          (**self).write_isize(i)\n      }\n-@@ -587,8 +569,6 @@ mod impls {\n+@@ -577,8 +559,6 @@ mod impls {\n          (i32, write_i32),\n          (i64, write_i64),\n          (isize, write_isize),\n@@ -189,10 +193,10 @@ index 3e59ee1..3f8d682 100644\n  \n      #[stable(feature = \"rust1\", since = \"1.0.0\")]\n diff --git a/src/libcore/iter/range.rs b/src/libcore/iter/range.rs\n-index f0fd07b..72a3ec9 100644\n+index 66c09a0..1b8c5c9 100644\n --- a/src/libcore/iter/range.rs\n +++ b/src/libcore/iter/range.rs\n-@@ -183,7 +183,6 @@ step_impl_signed!([i64: u64]);\n+@@ -173,7 +173,6 @@ step_impl_signed!([i64: u64]);\n  // assume here that it is less than 64-bits.\n  #[cfg(not(target_pointer_width = \"64\"))]\n  step_impl_no_between!(u64 i64);\n@@ -201,10 +205,10 @@ index f0fd07b..72a3ec9 100644\n  macro_rules! range_exact_iter_impl {\n      ($($t:ty)*) => ($(\n diff --git a/src/libcore/iter/traits.rs b/src/libcore/iter/traits.rs\n-index 45e5b61..64a3038 100644\n+index e8c6cd8..f58b446 100644\n --- a/src/libcore/iter/traits.rs\n +++ b/src/libcore/iter/traits.rs\n-@@ -843,7 +843,7 @@ macro_rules! float_sum_product {\n+@@ -901,7 +901,7 @@ macro_rules! float_sum_product {\n      )*)\n  }\n  \n@@ -214,10 +218,10 @@ index 45e5b61..64a3038 100644\n  \n  /// An iterator adapter that produces output as long as the underlying\n diff --git a/src/libcore/lib.rs b/src/libcore/lib.rs\n-index 313c173..4315135 100644\n+index 252d7da..3c13282 100644\n --- a/src/libcore/lib.rs\n +++ b/src/libcore/lib.rs\n-@@ -154,14 +154,12 @@ mod uint_macros;\n+@@ -145,14 +145,12 @@ mod uint_macros;\n  #[path = \"num/i16.rs\"]   pub mod i16;\n  #[path = \"num/i32.rs\"]   pub mod i32;\n  #[path = \"num/i64.rs\"]   pub mod i64;\n@@ -233,10 +237,10 @@ index 313c173..4315135 100644\n  #[path = \"num/f32.rs\"]   pub mod f32;\n  #[path = \"num/f64.rs\"]   pub mod f64;\n diff --git a/src/libcore/marker.rs b/src/libcore/marker.rs\n-index d3d1612..f827f64 100644\n+index 53af924..243a4f3 100644\n --- a/src/libcore/marker.rs\n +++ b/src/libcore/marker.rs\n-@@ -674,8 +674,8 @@ mod copy_impls {\n+@@ -663,8 +663,8 @@ mod copy_impls {\n      }\n  \n      impl_copy! {\n@@ -248,10 +252,10 @@ index d3d1612..f827f64 100644\n          bool char\n      }\n diff --git a/src/libcore/mem.rs b/src/libcore/mem.rs\n-index afd9fcb..ad3362c 100644\n+index c024868..e512596 100644\n --- a/src/libcore/mem.rs\n +++ b/src/libcore/mem.rs\n-@@ -173,12 +173,10 @@ pub fn forget_unsized<T: ?Sized>(t: T) {\n+@@ -163,12 +163,10 @@ pub fn forget_unsized<T: ?Sized>(t: T) {\n  /// u16 | 2\n  /// u32 | 4\n  /// u64 | 8\n@@ -265,18 +269,18 @@ index afd9fcb..ad3362c 100644\n  /// f64 | 8\n  /// char | 4\n diff --git a/src/libcore/num/mod.rs b/src/libcore/num/mod.rs\n-index 4acf3a1..b5b3f54 100644\n+index e776513..6018aea 100644\n --- a/src/libcore/num/mod.rs\n +++ b/src/libcore/num/mod.rs\n-@@ -112,7 +112,6 @@ nonzero_integers! {\n+@@ -102,7 +102,6 @@ nonzero_integers! {\n      NonZeroU16(u16);\n      NonZeroU32(u32);\n      NonZeroU64(u64);\n -    NonZeroU128(u128);\n      NonZeroUsize(usize);\n  }\n  \n-@@ -2114,18 +2113,6 @@ impl i64 {\n+@@ -2110,18 +2109,6 @@ impl i64 {\n           \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\" }\n  }\n  \n@@ -295,7 +299,7 @@ index 4acf3a1..b5b3f54 100644\n  #[cfg(target_pointer_width = \"16\")]\n  #[lang = \"isize\"]\n  impl isize {\n-@@ -4394,17 +4381,6 @@ impl u64 {\n+@@ -4393,17 +4380,6 @@ impl u64 {\n          \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\" }\n  }\n  \n@@ -313,7 +317,7 @@ index 4acf3a1..b5b3f54 100644\n  #[cfg(target_pointer_width = \"16\")]\n  #[lang = \"usize\"]\n  impl usize {\n-@@ -4488,7 +4464,7 @@ macro_rules! from_str_radix_int_impl {\n+@@ -4487,7 +4463,7 @@ macro_rules! from_str_radix_int_impl {\n          }\n      )*}\n  }\n@@ -322,7 +326,7 @@ index 4acf3a1..b5b3f54 100644\n  \n  /// The error type returned when a checked integral type conversion fails.\n  #[unstable(feature = \"try_from\", issue = \"33417\")]\n-@@ -4604,30 +4580,25 @@ macro_rules! rev {\n+@@ -4603,30 +4579,25 @@ macro_rules! rev {\n  try_from_upper_bounded!(u16, u8);\n  try_from_upper_bounded!(u32, u16, u8);\n  try_from_upper_bounded!(u64, u32, u16, u8);\n@@ -357,7 +361,7 @@ index 4acf3a1..b5b3f54 100644\n  \n  // usize/isize\n  try_from_upper_bounded!(usize, isize);\n-@@ -4639,21 +4610,21 @@ mod ptr_try_from_impls {\n+@@ -4638,21 +4609,21 @@ mod ptr_try_from_impls {\n      use convert::TryFrom;\n  \n      try_from_upper_bounded!(usize, u8);\n@@ -387,7 +391,7 @@ index 4acf3a1..b5b3f54 100644\n  }\n  \n  #[cfg(target_pointer_width = \"32\")]\n-@@ -4662,24 +4633,24 @@ mod ptr_try_from_impls {\n+@@ -4661,24 +4632,24 @@ mod ptr_try_from_impls {\n      use convert::TryFrom;\n  \n      try_from_upper_bounded!(usize, u8, u16);\n@@ -420,7 +424,7 @@ index 4acf3a1..b5b3f54 100644\n  }\n  \n  #[cfg(target_pointer_width = \"64\")]\n-@@ -4688,24 +4659,20 @@ mod ptr_try_from_impls {\n+@@ -4687,24 +4658,20 @@ mod ptr_try_from_impls {\n      use convert::TryFrom;\n  \n      try_from_upper_bounded!(usize, u8, u16, u32);\n@@ -449,7 +453,7 @@ index 4acf3a1..b5b3f54 100644\n  }\n  \n  #[doc(hidden)]\n-@@ -4740,7 +4707,7 @@ macro_rules! doit {\n+@@ -4739,7 +4706,7 @@ macro_rules! doit {\n          }\n      })*)\n  }\n@@ -458,7 +462,7 @@ index 4acf3a1..b5b3f54 100644\n  \n  fn from_str_radix<T: FromStrRadixHelper>(src: &str, radix: u32) -> Result<T, ParseIntError> {\n      use self::IntErrorKind::*;\n-@@ -4931,52 +4898,38 @@ impl_from_bool! { u8, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n+@@ -4930,52 +4897,38 @@ impl_from_bool! { u8, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n  impl_from_bool! { u16, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n  impl_from_bool! { u32, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n  impl_from_bool! { u64, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n@@ -512,10 +516,10 @@ index 4acf3a1..b5b3f54 100644\n  // The C99 standard defines bounds on INTPTR_MIN, INTPTR_MAX, and UINTPTR_MAX\n  // which imply that pointer-sized integers must be at least 16 bits:\n diff --git a/src/libcore/num/wrapping.rs b/src/libcore/num/wrapping.rs\n-index 94dd657..fba1319 100644\n+index 50e189c..2da3b35 100644\n --- a/src/libcore/num/wrapping.rs\n +++ b/src/libcore/num/wrapping.rs\n-@@ -112,19 +112,17 @@ macro_rules! sh_impl_all {\n+@@ -102,19 +102,17 @@ macro_rules! sh_impl_all {\n          //sh_impl_unsigned! { $t, u16 }\n          //sh_impl_unsigned! { $t, u32 }\n          //sh_impl_unsigned! { $t, u64 }\n@@ -536,7 +540,7 @@ index 94dd657..fba1319 100644\n  \n  // FIXME(30524): impl Op<T> for Wrapping<T>, impl OpAssign<T> for Wrapping<T>\n  macro_rules! wrapping_impl {\n-@@ -323,7 +321,7 @@ macro_rules! wrapping_impl {\n+@@ -313,7 +311,7 @@ macro_rules! wrapping_impl {\n      )*)\n  }\n  \n@@ -545,7 +549,7 @@ index 94dd657..fba1319 100644\n  \n  macro_rules! wrapping_int_impl {\n      ($($t:ty)*) => ($(\n-@@ -685,7 +683,7 @@ assert_eq!(Wrapping(3i8).pow(6), Wrapping(-39));\n+@@ -675,7 +673,7 @@ assert_eq!(Wrapping(3i8).pow(6), Wrapping(-39));\n      )*)\n  }\n  \n@@ -554,7 +558,7 @@ index 94dd657..fba1319 100644\n  \n  macro_rules! wrapping_int_impl_signed {\n      ($($t:ty)*) => ($(\n-@@ -814,7 +812,7 @@ assert!(!Wrapping(10\", stringify!($t), \").is_negative());\n+@@ -804,7 +802,7 @@ assert!(!Wrapping(10\", stringify!($t), \").is_negative());\n      )*)\n  }\n  \n@@ -563,7 +567,7 @@ index 94dd657..fba1319 100644\n  \n  macro_rules! wrapping_int_impl_unsigned {\n      ($($t:ty)*) => ($(\n-@@ -891,7 +889,7 @@ assert_eq!(Wrapping(200_u8).next_power_of_two(), Wrapping(0));\n+@@ -881,7 +879,7 @@ assert_eq!(Wrapping(200_u8).next_power_of_two(), Wrapping(0));\n      )*)\n  }\n  \n@@ -572,7 +576,7 @@ index 94dd657..fba1319 100644\n  \n  mod shift_max {\n      #![allow(non_upper_case_globals)]\n-@@ -918,13 +916,11 @@ mod shift_max {\n+@@ -908,13 +906,11 @@ mod shift_max {\n      pub const i16: u32 = (1 << 4) - 1;\n      pub const i32: u32 = (1 << 5) - 1;\n      pub const i64: u32 = (1 << 6) - 1;\n@@ -587,10 +591,10 @@ index 94dd657..fba1319 100644\n      pub use self::platform::usize;\n  }\n diff --git a/src/libcore/ops/arith.rs b/src/libcore/ops/arith.rs\n-index a1bc546..38742be 100644\n+index 7d8bf18..91fd879 100644\n --- a/src/libcore/ops/arith.rs\n +++ b/src/libcore/ops/arith.rs\n-@@ -114,7 +114,7 @@ macro_rules! add_impl {\n+@@ -104,7 +104,7 @@ macro_rules! add_impl {\n      )*)\n  }\n  \n@@ -599,7 +603,7 @@ index a1bc546..38742be 100644\n  \n  /// The subtraction operator `-`.\n  ///\n-@@ -212,7 +212,7 @@ macro_rules! sub_impl {\n+@@ -202,7 +202,7 @@ macro_rules! sub_impl {\n      )*)\n  }\n  \n@@ -608,7 +612,7 @@ index a1bc546..38742be 100644\n  \n  /// The multiplication operator `*`.\n  ///\n-@@ -332,7 +332,7 @@ macro_rules! mul_impl {\n+@@ -322,7 +322,7 @@ macro_rules! mul_impl {\n      )*)\n  }\n  \n@@ -617,7 +621,7 @@ index a1bc546..38742be 100644\n  \n  /// The division operator `/`.\n  ///\n-@@ -457,7 +457,7 @@ macro_rules! div_impl_integer {\n+@@ -447,7 +447,7 @@ macro_rules! div_impl_integer {\n      )*)\n  }\n  \n@@ -626,7 +630,7 @@ index a1bc546..38742be 100644\n  \n  macro_rules! div_impl_float {\n      ($($t:ty)*) => ($(\n-@@ -542,7 +542,7 @@ macro_rules! rem_impl_integer {\n+@@ -532,7 +532,7 @@ macro_rules! rem_impl_integer {\n      )*)\n  }\n  \n@@ -635,7 +639,7 @@ index a1bc546..38742be 100644\n  \n  \n  macro_rules! rem_impl_float {\n-@@ -641,7 +641,7 @@ macro_rules! neg_impl_unsigned {\n+@@ -631,7 +631,7 @@ macro_rules! neg_impl_unsigned {\n  }\n  \n  // neg_impl_unsigned! { usize u8 u16 u32 u64 }\n@@ -644,7 +648,7 @@ index a1bc546..38742be 100644\n  \n  /// The addition assignment operator `+=`.\n  ///\n-@@ -697,7 +697,7 @@ macro_rules! add_assign_impl {\n+@@ -687,7 +687,7 @@ macro_rules! add_assign_impl {\n      )+)\n  }\n  \n@@ -653,7 +657,7 @@ index a1bc546..38742be 100644\n  \n  /// The subtraction assignment operator `-=`.\n  ///\n-@@ -753,7 +753,7 @@ macro_rules! sub_assign_impl {\n+@@ -743,7 +743,7 @@ macro_rules! sub_assign_impl {\n      )+)\n  }\n  \n@@ -662,7 +666,7 @@ index a1bc546..38742be 100644\n  \n  /// The multiplication assignment operator `*=`.\n  ///\n-@@ -800,7 +800,7 @@ macro_rules! mul_assign_impl {\n+@@ -790,7 +790,7 @@ macro_rules! mul_assign_impl {\n      )+)\n  }\n  \n@@ -671,7 +675,7 @@ index a1bc546..38742be 100644\n  \n  /// The division assignment operator `/=`.\n  ///\n-@@ -846,7 +846,7 @@ macro_rules! div_assign_impl {\n+@@ -836,7 +836,7 @@ macro_rules! div_assign_impl {\n      )+)\n  }\n  \n@@ -680,17 +684,17 @@ index a1bc546..38742be 100644\n  \n  /// The remainder assignment operator `%=`.\n  ///\n-@@ -896,4 +896,4 @@ macro_rules! rem_assign_impl {\n+@@ -886,4 +886,4 @@ macro_rules! rem_assign_impl {\n      )+)\n  }\n  \n -rem_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n +rem_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n diff --git a/src/libcore/ops/bit.rs b/src/libcore/ops/bit.rs\n-index 3900f36..66b7980 100644\n+index 2c9bf24..af2ab6f 100644\n --- a/src/libcore/ops/bit.rs\n +++ b/src/libcore/ops/bit.rs\n-@@ -65,7 +65,7 @@ macro_rules! not_impl {\n+@@ -55,7 +55,7 @@ macro_rules! not_impl {\n      )*)\n  }\n  \n@@ -699,7 +703,7 @@ index 3900f36..66b7980 100644\n  \n  /// The bitwise AND operator `&`.\n  ///\n-@@ -149,7 +149,7 @@ macro_rules! bitand_impl {\n+@@ -139,7 +139,7 @@ macro_rules! bitand_impl {\n      )*)\n  }\n  \n@@ -708,7 +712,7 @@ index 3900f36..66b7980 100644\n  \n  /// The bitwise OR operator `|`.\n  ///\n-@@ -233,7 +233,7 @@ macro_rules! bitor_impl {\n+@@ -223,7 +223,7 @@ macro_rules! bitor_impl {\n      )*)\n  }\n  \n@@ -717,7 +721,7 @@ index 3900f36..66b7980 100644\n  \n  /// The bitwise XOR operator `^`.\n  ///\n-@@ -320,7 +320,7 @@ macro_rules! bitxor_impl {\n+@@ -310,7 +310,7 @@ macro_rules! bitxor_impl {\n      )*)\n  }\n  \n@@ -726,7 +730,7 @@ index 3900f36..66b7980 100644\n  \n  /// The left shift operator `<<`. Note that because this trait is implemented\n  /// for all integer types with multiple right-hand-side types, Rust's type\n-@@ -417,19 +417,17 @@ macro_rules! shl_impl_all {\n+@@ -407,19 +407,17 @@ macro_rules! shl_impl_all {\n          shl_impl! { $t, u16 }\n          shl_impl! { $t, u32 }\n          shl_impl! { $t, u64 }\n@@ -747,7 +751,7 @@ index 3900f36..66b7980 100644\n  \n  /// The right shift operator `>>`. Note that because this trait is implemented\n  /// for all integer types with multiple right-hand-side types, Rust's type\n-@@ -526,19 +524,17 @@ macro_rules! shr_impl_all {\n+@@ -516,19 +514,17 @@ macro_rules! shr_impl_all {\n          shr_impl! { $t, u16 }\n          shr_impl! { $t, u32 }\n          shr_impl! { $t, u64 }\n@@ -768,7 +772,7 @@ index 3900f36..66b7980 100644\n  \n  /// The bitwise AND assignment operator `&=`.\n  ///\n-@@ -626,7 +622,7 @@ macro_rules! bitand_assign_impl {\n+@@ -616,7 +612,7 @@ macro_rules! bitand_assign_impl {\n      )+)\n  }\n  \n@@ -777,7 +781,7 @@ index 3900f36..66b7980 100644\n  \n  /// The bitwise OR assignment operator `|=`.\n  ///\n-@@ -675,7 +671,7 @@ macro_rules! bitor_assign_impl {\n+@@ -665,7 +661,7 @@ macro_rules! bitor_assign_impl {\n      )+)\n  }\n  \n@@ -786,7 +790,7 @@ index 3900f36..66b7980 100644\n  \n  /// The bitwise XOR assignment operator `^=`.\n  ///\n-@@ -724,7 +720,7 @@ macro_rules! bitxor_assign_impl {\n+@@ -714,7 +710,7 @@ macro_rules! bitxor_assign_impl {\n      )+)\n  }\n  \n@@ -795,7 +799,7 @@ index 3900f36..66b7980 100644\n  \n  /// The left shift assignment operator `<<=`.\n  ///\n-@@ -780,19 +776,17 @@ macro_rules! shl_assign_impl_all {\n+@@ -770,19 +766,17 @@ macro_rules! shl_assign_impl_all {\n          shl_assign_impl! { $t, u16 }\n          shl_assign_impl! { $t, u32 }\n          shl_assign_impl! { $t, u64 }\n@@ -816,7 +820,7 @@ index 3900f36..66b7980 100644\n  \n  /// The right shift assignment operator `>>=`.\n  ///\n-@@ -848,16 +842,14 @@ macro_rules! shr_assign_impl_all {\n+@@ -838,16 +832,14 @@ macro_rules! shr_assign_impl_all {\n          shr_assign_impl! { $t, u16 }\n          shr_assign_impl! { $t, u32 }\n          shr_assign_impl! { $t, u64 }\n@@ -835,10 +839,10 @@ index 3900f36..66b7980 100644\n -shr_assign_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 i128 isize }\n +shr_assign_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n diff --git a/src/libcore/sync/atomic.rs b/src/libcore/sync/atomic.rs\n-index 060983a..ade04a5 100644\n+index 99e6365..d863e33 100644\n --- a/src/libcore/sync/atomic.rs\n +++ b/src/libcore/sync/atomic.rs\n-@@ -1940,34 +1940,6 @@ atomic_int! {\n+@@ -1943,34 +1943,6 @@ atomic_int! {\n      8,\n      u64 AtomicU64 ATOMIC_U64_INIT\n  }\n@@ -874,10 +878,10 @@ index 060983a..ade04a5 100644\n  macro_rules! ptr_width {\n      () => { 2 }\n diff --git a/src/libcore/tests/iter.rs b/src/libcore/tests/iter.rs\n-index 4efa013..717bcdc 100644\n+index cf19851..6b4a72b 100644\n --- a/src/libcore/tests/iter.rs\n +++ b/src/libcore/tests/iter.rs\n-@@ -224,8 +224,6 @@ fn test_iterator_step_by_nth_overflow() {\n+@@ -214,8 +214,6 @@ fn test_iterator_step_by_nth_overflow() {\n      type Bigger = u32;\n      #[cfg(target_pointer_width = \"32\")]\n      type Bigger = u64;\n@@ -886,7 +890,7 @@ index 4efa013..717bcdc 100644\n  \n      #[derive(Clone)]\n      struct Test(Bigger);\n-@@ -1914,19 +1912,6 @@ fn test_step_replace_signed() {\n+@@ -1950,19 +1948,6 @@ fn test_step_replace_signed() {\n      assert_eq!(y, 5);\n  }\n  \n@@ -907,10 +911,10 @@ index 4efa013..717bcdc 100644\n  fn test_rev_try_folds() {\n      let f = &|acc, x| i32::checked_add(2*acc, x);\n diff --git a/src/libcore/tests/num/mod.rs b/src/libcore/tests/num/mod.rs\n-index 0928f75..34a5296 100644\n+index a17c094..3c36d10 100644\n --- a/src/libcore/tests/num/mod.rs\n +++ b/src/libcore/tests/num/mod.rs\n-@@ -188,12 +188,10 @@ test_impl_from! { test_boolu8, bool, u8 }\n+@@ -178,12 +178,10 @@ test_impl_from! { test_boolu8, bool, u8 }\n  test_impl_from! { test_boolu16, bool, u16 }\n  test_impl_from! { test_boolu32, bool, u32 }\n  test_impl_from! { test_boolu64, bool, u64 }\n@@ -923,7 +927,7 @@ index 0928f75..34a5296 100644\n  \n  // Signed -> Float\n  test_impl_from! { test_i8f32, i8, f32 }\n-@@ -275,51 +273,35 @@ test_impl_try_from_always_ok! { test_try_u8u8, u8, u8 }\n+@@ -265,51 +263,35 @@ test_impl_try_from_always_ok! { test_try_u8u8, u8, u8 }\n  test_impl_try_from_always_ok! { test_try_u8u16, u8, u16 }\n  test_impl_try_from_always_ok! { test_try_u8u32, u8, u32 }\n  test_impl_try_from_always_ok! { test_try_u8u64, u8, u64 }\n@@ -976,18 +980,18 @@ index 0928f75..34a5296 100644\n  test_impl_try_from_always_ok! { test_try_usizeusize, usize, usize }\n  test_impl_try_from_always_ok! { test_try_isizeisize, isize, isize }\n diff --git a/src/libcore/time.rs b/src/libcore/time.rs\n-index 475bb72..a8a9d42 100644\n+index b12ee04..fe0faad 100644\n --- a/src/libcore/time.rs\n +++ b/src/libcore/time.rs\n-@@ -30,7 +30,6 @@ const NANOS_PER_MILLI: u32 = 1_000_000;\n+@@ -21,7 +21,6 @@ const NANOS_PER_MILLI: u32 = 1_000_000;\n  const NANOS_PER_MICRO: u32 = 1_000;\n  const MILLIS_PER_SEC: u64 = 1_000;\n  const MICROS_PER_SEC: u64 = 1_000_000;\n -const MAX_NANOS_F64: f64 = ((u64::MAX as u128 + 1)*(NANOS_PER_SEC as u128)) as f64;\n  \n  /// A `Duration` type to represent a span of time, typically used for system\n  /// timeouts.\n-@@ -269,57 +268,6 @@ impl Duration {\n+@@ -260,54 +259,6 @@ impl Duration {\n      #[inline]\n      pub const fn subsec_nanos(&self) -> u32 { self.nanos }\n  \n@@ -996,13 +1000,12 @@ index 475bb72..a8a9d42 100644\n -    /// # Examples\n -    ///\n -    /// ```\n--    /// # #![feature(duration_as_u128)]\n -    /// use std::time::Duration;\n -    ///\n -    /// let duration = Duration::new(5, 730023852);\n -    /// assert_eq!(duration.as_millis(), 5730);\n -    /// ```\n--    #[unstable(feature = \"duration_as_u128\", issue = \"50202\")]\n+-    #[stable(feature = \"duration_as_u128\", since = \"1.33.0\")]\n -    #[inline]\n -    pub const fn as_millis(&self) -> u128 {\n -        self.secs as u128 * MILLIS_PER_SEC as u128 + (self.nanos / NANOS_PER_MILLI) as u128\n@@ -1013,13 +1016,12 @@ index 475bb72..a8a9d42 100644\n -    /// # Examples\n -    ///\n -    /// ```\n--    /// # #![feature(duration_as_u128)]\n -    /// use std::time::Duration;\n -    ///\n -    /// let duration = Duration::new(5, 730023852);\n -    /// assert_eq!(duration.as_micros(), 5730023);\n -    /// ```\n--    #[unstable(feature = \"duration_as_u128\", issue = \"50202\")]\n+-    #[stable(feature = \"duration_as_u128\", since = \"1.33.0\")]\n -    #[inline]\n -    pub const fn as_micros(&self) -> u128 {\n -        self.secs as u128 * MICROS_PER_SEC as u128 + (self.nanos / NANOS_PER_MICRO) as u128\n@@ -1030,13 +1032,12 @@ index 475bb72..a8a9d42 100644\n -    /// # Examples\n -    ///\n -    /// ```\n--    /// # #![feature(duration_as_u128)]\n -    /// use std::time::Duration;\n -    ///\n -    /// let duration = Duration::new(5, 730023852);\n -    /// assert_eq!(duration.as_nanos(), 5730023852);\n -    /// ```\n--    #[unstable(feature = \"duration_as_u128\", issue = \"50202\")]\n+-    #[stable(feature = \"duration_as_u128\", since = \"1.33.0\")]\n -    #[inline]\n -    pub const fn as_nanos(&self) -> u128 {\n -        self.secs as u128 * NANOS_PER_SEC as u128 + self.nanos as u128\n@@ -1045,7 +1046,7 @@ index 475bb72..a8a9d42 100644\n      /// Checked `Duration` addition. Computes `self + other`, returning [`None`]\n      /// if overflow occurred.\n      ///\n-@@ -478,80 +426,6 @@ impl Duration {\n+@@ -466,80 +417,6 @@ impl Duration {\n          (self.secs as f64) + (self.nanos as f64) / (NANOS_PER_SEC as f64)\n      }\n  \n@@ -1126,6 +1127,104 @@ index 475bb72..a8a9d42 100644\n      /// Divide `Duration` by `Duration` and return `f64`.\n      ///\n      /// # Examples\n+diff --git a/src/libstd/lib.rs b/src/libstd/lib.rs\n+index 3051100..61001a4 100644\n+--- a/src/libstd/lib.rs\n++++ b/src/libstd/lib.rs\n+@@ -248,7 +248,6 @@\n+ #![feature(const_cstr_unchecked)]\n+ #![feature(core_intrinsics)]\n+ #![feature(dropck_eyepatch)]\n+-#![cfg_attr(stage0, feature(duration_as_u128))]\n+ #![feature(exact_size_is_empty)]\n+ #![feature(external_doc)]\n+ #![feature(fixed_size_array)]\n+@@ -404,8 +403,6 @@ pub use core::i16;\n+ pub use core::i32;\n+ #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+ pub use core::i64;\n+-#[stable(feature = \"i128\", since = \"1.26.0\")]\n+-pub use core::i128;\n+ #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+ pub use core::usize;\n+ #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+@@ -438,8 +435,6 @@ pub use alloc_crate::string;\n+ pub use alloc_crate::vec;\n+ #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+ pub use core::char;\n+-#[stable(feature = \"i128\", since = \"1.26.0\")]\n+-pub use core::u128;\n+ #[stable(feature = \"core_hint\", since = \"1.27.0\")]\n+ pub use core::hint;\n+ \n+diff --git a/src/libstd/net/ip.rs b/src/libstd/net/ip.rs\n+index 52a29f4..cafe50e 100644\n+--- a/src/libstd/net/ip.rs\n++++ b/src/libstd/net/ip.rs\n+@@ -1382,26 +1382,6 @@ impl FromInner<c::in6_addr> for Ipv6Addr {\n+     }\n+ }\n+ \n+-#[stable(feature = \"i128\", since = \"1.26.0\")]\n+-impl From<Ipv6Addr> for u128 {\n+-    fn from(ip: Ipv6Addr) -> u128 {\n+-        let ip = ip.segments();\n+-        ((ip[0] as u128) << 112) + ((ip[1] as u128) << 96) + ((ip[2] as u128) << 80) +\n+-            ((ip[3] as u128) << 64) + ((ip[4] as u128) << 48) + ((ip[5] as u128) << 32) +\n+-            ((ip[6] as u128) << 16) + (ip[7] as u128)\n+-    }\n+-}\n+-#[stable(feature = \"i128\", since = \"1.26.0\")]\n+-impl From<u128> for Ipv6Addr {\n+-    fn from(ip: u128) -> Ipv6Addr {\n+-        Ipv6Addr::new(\n+-            (ip >> 112) as u16, (ip >> 96) as u16, (ip >> 80) as u16,\n+-            (ip >> 64) as u16, (ip >> 48) as u16, (ip >> 32) as u16,\n+-            (ip >> 16) as u16, ip as u16,\n+-        )\n+-    }\n+-}\n+-\n+ #[stable(feature = \"ipv6_from_octets\", since = \"1.9.0\")]\n+ impl From<[u8; 16]> for Ipv6Addr {\n+     fn from(octets: [u8; 16]) -> Ipv6Addr {\n+diff --git a/src/libstd/num.rs b/src/libstd/num.rs\n+index c80b9a5..e32a6b3 100644\n+--- a/src/libstd/num.rs\n++++ b/src/libstd/num.rs\n+@@ -12,7 +12,7 @@ pub use core::num::{FpCategory, ParseIntError, ParseFloatError, TryFromIntError}\n+ pub use core::num::Wrapping;\n+ \n+ #[stable(feature = \"nonzero\", since = \"1.28.0\")]\n+-pub use core::num::{NonZeroU8, NonZeroU16, NonZeroU32, NonZeroU64, NonZeroU128, NonZeroUsize};\n++pub use core::num::{NonZeroU8, NonZeroU16, NonZeroU32, NonZeroU64, NonZeroUsize};\n+ \n+ #[cfg(test)] use fmt;\n+ #[cfg(test)] use ops::{Add, Sub, Mul, Div, Rem};\n+diff --git a/src/libstd/panic.rs b/src/libstd/panic.rs\n+index d27f6ca..8ac2a44 100644\n+--- a/src/libstd/panic.rs\n++++ b/src/libstd/panic.rs\n+@@ -254,9 +254,6 @@ impl RefUnwindSafe for atomic::AtomicI32 {}\n+ #[cfg(target_has_atomic = \"64\")]\n+ #[unstable(feature = \"integer_atomics\", issue = \"32976\")]\n+ impl RefUnwindSafe for atomic::AtomicI64 {}\n+-#[cfg(target_has_atomic = \"128\")]\n+-#[unstable(feature = \"integer_atomics\", issue = \"32976\")]\n+-impl RefUnwindSafe for atomic::AtomicI128 {}\n+ \n+ #[cfg(target_has_atomic = \"ptr\")]\n+ #[stable(feature = \"unwind_safe_atomic_refs\", since = \"1.14.0\")]\n+@@ -273,9 +270,6 @@ impl RefUnwindSafe for atomic::AtomicU32 {}\n+ #[cfg(target_has_atomic = \"64\")]\n+ #[unstable(feature = \"integer_atomics\", issue = \"32976\")]\n+ impl RefUnwindSafe for atomic::AtomicU64 {}\n+-#[cfg(target_has_atomic = \"128\")]\n+-#[unstable(feature = \"integer_atomics\", issue = \"32976\")]\n+-impl RefUnwindSafe for atomic::AtomicU128 {}\n+ \n+ #[cfg(target_has_atomic = \"8\")]\n+ #[stable(feature = \"unwind_safe_atomic_refs\", since = \"1.14.0\")]\n -- \n 2.17.2 (Apple Git-113)\n "}, {"sha": "398a2b60ed16f4c465e200e945ea7438c16f0c4e", "filename": "patches/0007-Fix-libstd-building.patch", "status": "removed", "additions": 0, "deletions": 147, "changes": 147, "blob_url": "https://github.com/rust-lang/rust/blob/3e40f150d0c2d0c1a60edec304a6395c9b79e4c0/patches%2F0007-Fix-libstd-building.patch", "raw_url": "https://github.com/rust-lang/rust/raw/3e40f150d0c2d0c1a60edec304a6395c9b79e4c0/patches%2F0007-Fix-libstd-building.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0007-Fix-libstd-building.patch?ref=3e40f150d0c2d0c1a60edec304a6395c9b79e4c0", "patch": "@@ -1,147 +0,0 @@\n-From a99af7473c8b334ed6febe97294813298b6a3633 Mon Sep 17 00:00:00 2001\n-From: bjorn3 <bjorn3@users.noreply.github.com>\n-Date: Sat, 15 Dec 2018 14:32:15 +0100\n-Subject: [PATCH] Fix libstd building\n-\n----\n- src/libstd/lib.rs            |  6 ------\n- src/libstd/net/ip.rs         | 20 --------------------\n- src/libstd/num.rs            |  2 +-\n- src/libstd/panic.rs          |  6 ------\n- src/libstd/primitive_docs.rs | 16 ----------------\n- 5 files changed, 1 insertion(+), 49 deletions(-)\n-\n-diff --git a/src/libstd/lib.rs b/src/libstd/lib.rs\n-index f3965f3..13e17b1 100644\n---- a/src/libstd/lib.rs\n-+++ b/src/libstd/lib.rs\n-@@ -256,7 +256,6 @@\n- #![feature(const_cstr_unchecked)]\n- #![feature(core_intrinsics)]\n- #![feature(dropck_eyepatch)]\n--#![feature(duration_as_u128)]\n- #![feature(exact_size_is_empty)]\n- #![feature(external_doc)]\n- #![feature(fixed_size_array)]\n-@@ -409,8 +407,6 @@ pub use core::i16;\n- pub use core::i32;\n- #[stable(feature = \"rust1\", since = \"1.0.0\")]\n- pub use core::i64;\n--#[stable(feature = \"i128\", since = \"1.26.0\")]\n--pub use core::i128;\n- #[stable(feature = \"rust1\", since = \"1.0.0\")]\n- pub use core::usize;\n- #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-@@ -443,8 +439,6 @@ pub use alloc_crate::string;\n- pub use alloc_crate::vec;\n- #[stable(feature = \"rust1\", since = \"1.0.0\")]\n- pub use core::char;\n--#[stable(feature = \"i128\", since = \"1.26.0\")]\n--pub use core::u128;\n- #[stable(feature = \"core_hint\", since = \"1.27.0\")]\n- pub use core::hint;\n-\n-diff --git a/src/libstd/net/ip.rs b/src/libstd/net/ip.rs\n-index 8685cb7..c4bf4d2 100644\n---- a/src/libstd/net/ip.rs\n-+++ b/src/libstd/net/ip.rs\n-@@ -1392,26 +1392,6 @@ impl FromInner<c::in6_addr> for Ipv6Addr {\n-     }\n- }\n-\n--#[stable(feature = \"i128\", since = \"1.26.0\")]\n--impl From<Ipv6Addr> for u128 {\n--    fn from(ip: Ipv6Addr) -> u128 {\n--        let ip = ip.segments();\n--        ((ip[0] as u128) << 112) + ((ip[1] as u128) << 96) + ((ip[2] as u128) << 80) +\n--            ((ip[3] as u128) << 64) + ((ip[4] as u128) << 48) + ((ip[5] as u128) << 32) +\n--            ((ip[6] as u128) << 16) + (ip[7] as u128)\n--    }\n--}\n--#[stable(feature = \"i128\", since = \"1.26.0\")]\n--impl From<u128> for Ipv6Addr {\n--    fn from(ip: u128) -> Ipv6Addr {\n--        Ipv6Addr::new(\n--            (ip >> 112) as u16, (ip >> 96) as u16, (ip >> 80) as u16,\n--            (ip >> 64) as u16, (ip >> 48) as u16, (ip >> 32) as u16,\n--            (ip >> 16) as u16, ip as u16,\n--        )\n--    }\n--}\n--\n- #[stable(feature = \"ipv6_from_octets\", since = \"1.9.0\")]\n- impl From<[u8; 16]> for Ipv6Addr {\n-     fn from(octets: [u8; 16]) -> Ipv6Addr {\n-diff --git a/src/libstd/num.rs b/src/libstd/num.rs\n-index 3f90c1f..85aab83 100644\n---- a/src/libstd/num.rs\n-+++ b/src/libstd/num.rs\n-@@ -22,7 +22,7 @@ pub use core::num::{FpCategory, ParseIntError, ParseFloatError, TryFromIntError}\n- pub use core::num::Wrapping;\n-\n- #[stable(feature = \"nonzero\", since = \"1.28.0\")]\n--pub use core::num::{NonZeroU8, NonZeroU16, NonZeroU32, NonZeroU64, NonZeroU128, NonZeroUsize};\n-+pub use core::num::{NonZeroU8, NonZeroU16, NonZeroU32, NonZeroU64, NonZeroUsize};\n-\n- #[cfg(test)] use fmt;\n- #[cfg(test)] use ops::{Add, Sub, Mul, Div, Rem};\n-diff --git a/src/libstd/panic.rs b/src/libstd/panic.rs\n-index 3eacc7a..b518448 100644\n---- a/src/libstd/panic.rs\n-+++ b/src/libstd/panic.rs\n-@@ -264,9 +264,6 @@ impl RefUnwindSafe for atomic::AtomicI32 {}\n- #[cfg(target_has_atomic = \"64\")]\n- #[unstable(feature = \"integer_atomics\", issue = \"32976\")]\n- impl RefUnwindSafe for atomic::AtomicI64 {}\n--#[cfg(target_has_atomic = \"128\")]\n--#[unstable(feature = \"integer_atomics\", issue = \"32976\")]\n--impl RefUnwindSafe for atomic::AtomicI128 {}\n-\n- #[cfg(target_has_atomic = \"ptr\")]\n- #[stable(feature = \"unwind_safe_atomic_refs\", since = \"1.14.0\")]\n-@@ -283,9 +280,6 @@ impl RefUnwindSafe for atomic::AtomicU32 {}\n- #[cfg(target_has_atomic = \"64\")]\n- #[unstable(feature = \"integer_atomics\", issue = \"32976\")]\n- impl RefUnwindSafe for atomic::AtomicU64 {}\n--#[cfg(target_has_atomic = \"128\")]\n--#[unstable(feature = \"integer_atomics\", issue = \"32976\")]\n--impl RefUnwindSafe for atomic::AtomicU128 {}\n-\n- #[cfg(target_has_atomic = \"8\")]\n- #[stable(feature = \"unwind_safe_atomic_refs\", since = \"1.14.0\")]\n-diff --git a/src/libstd/primitive_docs.rs b/src/libstd/primitive_docs.rs\n-index 7c1654f..cc96271 100644\n---- a/src/libstd/primitive_docs.rs\n-+++ b/src/libstd/primitive_docs.rs\n-@@ -808,14 +808,6 @@ mod prim_i32 { }\n- #[stable(feature = \"rust1\", since = \"1.0.0\")]\n- mod prim_i64 { }\n-\n--#[doc(primitive = \"i128\")]\n--//\n--/// The 128-bit signed integer type.\n--///\n--/// *[See also the `std::i128` module](i128/index.html).*\n--#[stable(feature = \"i128\", since=\"1.26.0\")]\n--mod prim_i128 { }\n--\n- #[doc(primitive = \"u8\")]\n- //\n- /// The 8-bit unsigned integer type.\n-@@ -848,14 +840,6 @@ mod prim_u32 { }\n- #[stable(feature = \"rust1\", since = \"1.0.0\")]\n- mod prim_u64 { }\n-\n--#[doc(primitive = \"u128\")]\n--//\n--/// The 128-bit unsigned integer type.\n--///\n--/// *[See also the `std::u128` module](u128/index.html).*\n--#[stable(feature = \"i128\", since=\"1.26.0\")]\n--mod prim_u128 { }\n--\n- #[doc(primitive = \"isize\")]\n- //\n- /// The pointer-sized signed integer type.\n---\n-2.17.2 (Apple Git-113)"}]}