{"sha": "48c78248a35385f474b7b27a1da3da1d146b04dc", "node_id": "C_kwDOAAsO6NoAKDQ4Yzc4MjQ4YTM1Mzg1ZjQ3NGI3YjI3YTFkYTNkYTFkMTQ2YjA0ZGM", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2023-05-03T23:42:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-03T23:42:51Z"}, "message": "Rollup merge of #111146 - petrochenkov:decident, r=compiler-errors\n\nrustc_middle: Fix `opt_item_ident` for non-local def ids\n\nNoticed while working on https://github.com/rust-lang/rust/pull/110855.", "tree": {"sha": "c16021555bb5e1a977bbe8d8955b0aaa9d942540", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c16021555bb5e1a977bbe8d8955b0aaa9d942540"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48c78248a35385f474b7b27a1da3da1d146b04dc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkUvF7CRBK7hj4Ov3rIwAAND4IAIu2CSwVD4Rq4RqlXRqwp8Nj\nniZXs2qNSSnpZAsxItM47e1Z/72xd1x8WJgXWJoIy3BllHKw2eCGu+hgRI/reAbV\noTQV6TcRVLS52blVcBGTNT87YvQMJFA+dztJWHAlzLEyVL1QAz1lRABfd+UhQvP/\nS7IeHMDZfnv0V4rpfynhMknx89y4rUmQlRusXRjaDyTNKDyNDR6SmhUQJVkzaD2o\nD1o2Clx3abUVKsT9qzu/1hq5wq1tPeAX8fV4LSGf3MC7Uif4/YzLYHPc94wKrzRT\nd8xSQucQJQDzCDb2kmM2CccThUT1F2Utmq61veXpI57Fyb/ayCt8g5prsgx3VIo=\n=EeTV\n-----END PGP SIGNATURE-----\n", "payload": "tree c16021555bb5e1a977bbe8d8955b0aaa9d942540\nparent 54cf5618899e90293783e0300d5080790956782b\nparent 6f6c379ee065d65fb8121db46bf5b0fbcdcb905c\nauthor Manish Goregaokar <manishsmail@gmail.com> 1683157371 -0700\ncommitter GitHub <noreply@github.com> 1683157371 -0700\n\nRollup merge of #111146 - petrochenkov:decident, r=compiler-errors\n\nrustc_middle: Fix `opt_item_ident` for non-local def ids\n\nNoticed while working on https://github.com/rust-lang/rust/pull/110855.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48c78248a35385f474b7b27a1da3da1d146b04dc", "html_url": "https://github.com/rust-lang/rust/commit/48c78248a35385f474b7b27a1da3da1d146b04dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48c78248a35385f474b7b27a1da3da1d146b04dc/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54cf5618899e90293783e0300d5080790956782b", "url": "https://api.github.com/repos/rust-lang/rust/commits/54cf5618899e90293783e0300d5080790956782b", "html_url": "https://github.com/rust-lang/rust/commit/54cf5618899e90293783e0300d5080790956782b"}, {"sha": "6f6c379ee065d65fb8121db46bf5b0fbcdcb905c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f6c379ee065d65fb8121db46bf5b0fbcdcb905c", "html_url": "https://github.com/rust-lang/rust/commit/6f6c379ee065d65fb8121db46bf5b0fbcdcb905c"}], "stats": {"total": 130, "additions": 88, "deletions": 42}, "files": [{"sha": "58e5c84fc815a067665684a1d4d53576f2040de5", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/48c78248a35385f474b7b27a1da3da1d146b04dc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48c78248a35385f474b7b27a1da3da1d146b04dc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=48c78248a35385f474b7b27a1da3da1d146b04dc", "patch": "@@ -2108,10 +2108,9 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// See [`item_name`][Self::item_name] for more information.\n     pub fn opt_item_ident(self, def_id: DefId) -> Option<Ident> {\n         let def = self.opt_item_name(def_id)?;\n-        let span = def_id\n-            .as_local()\n-            .and_then(|id| self.def_ident_span(id))\n-            .unwrap_or(rustc_span::DUMMY_SP);\n+        let span = self\n+            .def_ident_span(def_id)\n+            .unwrap_or_else(|| bug!(\"missing ident span for {def_id:?}\"));\n         Some(Ident::new(def, span))\n     }\n "}, {"sha": "3a7f3cd0ba00cd757efae8da2c8415e0dfe3cb8a", "filename": "tests/ui/const-generics/generic_const_exprs/cross_crate_predicate.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/48c78248a35385f474b7b27a1da3da1d146b04dc/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fcross_crate_predicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48c78248a35385f474b7b27a1da3da1d146b04dc/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fcross_crate_predicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fcross_crate_predicate.stderr?ref=48c78248a35385f474b7b27a1da3da1d146b04dc", "patch": "@@ -8,6 +8,9 @@ LL |     let _ = const_evaluatable_lib::test1::<T>();\n note: required by a bound in `test1`\n   --> $DIR/auxiliary/const_evaluatable_lib.rs:6:10\n    |\n+LL | pub fn test1<T>() -> [u8; std::mem::size_of::<T>() - 1]\n+   |        ----- required by a bound in this function\n+LL | where\n LL |     [u8; std::mem::size_of::<T>() - 1]: Sized,\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `test1`\n \n@@ -34,6 +37,9 @@ LL |     let _ = const_evaluatable_lib::test1::<T>();\n note: required by a bound in `test1`\n   --> $DIR/auxiliary/const_evaluatable_lib.rs:6:10\n    |\n+LL | pub fn test1<T>() -> [u8; std::mem::size_of::<T>() - 1]\n+   |        ----- required by a bound in this function\n+LL | where\n LL |     [u8; std::mem::size_of::<T>() - 1]: Sized,\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `test1`\n "}, {"sha": "440e43dff81885ddc571c66a29871066cc6e1db0", "filename": "tests/ui/error-codes/E0277.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/48c78248a35385f474b7b27a1da3da1d146b04dc/tests%2Fui%2Ferror-codes%2FE0277.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48c78248a35385f474b7b27a1da3da1d146b04dc/tests%2Fui%2Ferror-codes%2FE0277.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0277.stderr?ref=48c78248a35385f474b7b27a1da3da1d146b04dc", "patch": "@@ -5,7 +5,8 @@ LL | fn f(p: Path) { }\n    |      ^ doesn't have a size known at compile-time\n    |\n    = help: within `Path`, the trait `Sized` is not implemented for `[u8]`\n-   = note: required because it appears within the type `Path`\n+note: required because it appears within the type `Path`\n+  --> $SRC_DIR/std/src/path.rs:LL:COL\n    = help: unsized fn params are gated as an unstable feature\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |"}, {"sha": "e3ebe6cdcb81aaf71ebf87b0b9366e6dced9d4bb", "filename": "tests/ui/fmt/send-sync.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/48c78248a35385f474b7b27a1da3da1d146b04dc/tests%2Fui%2Ffmt%2Fsend-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48c78248a35385f474b7b27a1da3da1d146b04dc/tests%2Fui%2Ffmt%2Fsend-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffmt%2Fsend-sync.stderr?ref=48c78248a35385f474b7b27a1da3da1d146b04dc", "patch": "@@ -8,10 +8,12 @@ LL |     send(format_args!(\"{:?}\", c));\n    |\n    = help: within `[core::fmt::rt::Argument<'_>]`, the trait `Sync` is not implemented for `core::fmt::rt::Opaque`\n    = note: required because it appears within the type `&core::fmt::rt::Opaque`\n-   = note: required because it appears within the type `Argument<'_>`\n+note: required because it appears within the type `Argument<'_>`\n+  --> $SRC_DIR/core/src/fmt/rt.rs:LL:COL\n    = note: required because it appears within the type `[Argument<'_>]`\n    = note: required for `&[core::fmt::rt::Argument<'_>]` to implement `Send`\n-   = note: required because it appears within the type `Arguments<'_>`\n+note: required because it appears within the type `Arguments<'_>`\n+  --> $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n note: required by a bound in `send`\n   --> $DIR/send-sync.rs:1:12\n    |\n@@ -28,10 +30,12 @@ LL |     sync(format_args!(\"{:?}\", c));\n    |\n    = help: within `Arguments<'_>`, the trait `Sync` is not implemented for `core::fmt::rt::Opaque`\n    = note: required because it appears within the type `&core::fmt::rt::Opaque`\n-   = note: required because it appears within the type `Argument<'_>`\n+note: required because it appears within the type `Argument<'_>`\n+  --> $SRC_DIR/core/src/fmt/rt.rs:LL:COL\n    = note: required because it appears within the type `[Argument<'_>]`\n    = note: required because it appears within the type `&[Argument<'_>]`\n-   = note: required because it appears within the type `Arguments<'_>`\n+note: required because it appears within the type `Arguments<'_>`\n+  --> $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n note: required by a bound in `sync`\n   --> $DIR/send-sync.rs:2:12\n    |"}, {"sha": "0c3be7ca60774acb4a8029acc818c492b1b76e8c", "filename": "tests/ui/interior-mutability/interior-mutability.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/48c78248a35385f474b7b27a1da3da1d146b04dc/tests%2Fui%2Finterior-mutability%2Finterior-mutability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48c78248a35385f474b7b27a1da3da1d146b04dc/tests%2Fui%2Finterior-mutability%2Finterior-mutability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finterior-mutability%2Finterior-mutability.stderr?ref=48c78248a35385f474b7b27a1da3da1d146b04dc", "patch": "@@ -7,7 +7,8 @@ LL |     catch_unwind(|| { x.set(23); });\n    |     required by a bound introduced by this call\n    |\n    = help: within `Cell<i32>`, the trait `RefUnwindSafe` is not implemented for `UnsafeCell<i32>`\n-   = note: required because it appears within the type `Cell<i32>`\n+note: required because it appears within the type `Cell<i32>`\n+  --> $SRC_DIR/core/src/cell.rs:LL:COL\n    = note: required for `&Cell<i32>` to implement `UnwindSafe`\n note: required because it's used within this closure\n   --> $DIR/interior-mutability.rs:5:18"}, {"sha": "38103ff4f9c8549d10bb90cd68e186ccfabd9fa5", "filename": "tests/ui/issues/issue-21763.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48c78248a35385f474b7b27a1da3da1d146b04dc/tests%2Fui%2Fissues%2Fissue-21763.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48c78248a35385f474b7b27a1da3da1d146b04dc/tests%2Fui%2Fissues%2Fissue-21763.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-21763.rs?ref=48c78248a35385f474b7b27a1da3da1d146b04dc", "patch": "@@ -1,5 +1,7 @@\n // Regression test for HashMap only impl'ing Send/Sync if its contents do\n \n+// normalize-stderr-test: \"\\S+hashbrown-\\S+\" -> \"$$HASHBROWN_SRC_LOCATION\"\n+\n use std::collections::HashMap;\n use std::rc::Rc;\n "}, {"sha": "df50118ac477467044c73041ef67abf633357e8f", "filename": "tests/ui/issues/issue-21763.stderr", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/48c78248a35385f474b7b27a1da3da1d146b04dc/tests%2Fui%2Fissues%2Fissue-21763.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48c78248a35385f474b7b27a1da3da1d146b04dc/tests%2Fui%2Fissues%2Fissue-21763.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-21763.stderr?ref=48c78248a35385f474b7b27a1da3da1d146b04dc", "patch": "@@ -1,16 +1,21 @@\n error[E0277]: `Rc<()>` cannot be sent between threads safely\n-  --> $DIR/issue-21763.rs:9:11\n+  --> $DIR/issue-21763.rs:11:11\n    |\n LL |     foo::<HashMap<Rc<()>, Rc<()>>>();\n    |           ^^^^^^^^^^^^^^^^^^^^^^^ `Rc<()>` cannot be sent between threads safely\n    |\n    = help: within `(Rc<()>, Rc<()>)`, the trait `Send` is not implemented for `Rc<()>`\n    = note: required because it appears within the type `(Rc<()>, Rc<()>)`\n    = note: required for `hashbrown::raw::RawTable<(Rc<()>, Rc<()>)>` to implement `Send`\n-   = note: required because it appears within the type `HashMap<Rc<()>, Rc<()>, RandomState>`\n-   = note: required because it appears within the type `HashMap<Rc<()>, Rc<()>>`\n+note: required because it appears within the type `HashMap<Rc<()>, Rc<()>, RandomState>`\n+  --> $HASHBROWN_SRC_LOCATION\n+   |\n+LL | pub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator + Clone = Global> {\n+   |            ^^^^^^^\n+note: required because it appears within the type `HashMap<Rc<()>, Rc<()>>`\n+  --> $SRC_DIR/std/src/collections/hash/map.rs:LL:COL\n note: required by a bound in `foo`\n-  --> $DIR/issue-21763.rs:6:11\n+  --> $DIR/issue-21763.rs:8:11\n    |\n LL | fn foo<T: Send>() {}\n    |           ^^^^ required by this bound in `foo`"}, {"sha": "7449fe697ae9f3823cce5656ba7d4a0a6154ad24", "filename": "tests/ui/issues/issue-7364.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/48c78248a35385f474b7b27a1da3da1d146b04dc/tests%2Fui%2Fissues%2Fissue-7364.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48c78248a35385f474b7b27a1da3da1d146b04dc/tests%2Fui%2Fissues%2Fissue-7364.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-7364.stderr?ref=48c78248a35385f474b7b27a1da3da1d146b04dc", "patch": "@@ -7,7 +7,8 @@ LL | static boxed: Box<RefCell<isize>> = Box::new(RefCell::new(0));\n    = help: the trait `Sync` is not implemented for `RefCell<isize>`\n    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead\n    = note: required for `Unique<RefCell<isize>>` to implement `Sync`\n-   = note: required because it appears within the type `Box<RefCell<isize>>`\n+note: required because it appears within the type `Box<RefCell<isize>>`\n+  --> $SRC_DIR/alloc/src/boxed.rs:LL:COL\n    = note: shared static variables must have a type that implements `Sync`\n \n error: aborting due to previous error"}, {"sha": "284d5dcec310740b34a1757cbdf33afded12b09b", "filename": "tests/ui/kindck/kindck-send-object.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/48c78248a35385f474b7b27a1da3da1d146b04dc/tests%2Fui%2Fkindck%2Fkindck-send-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48c78248a35385f474b7b27a1da3da1d146b04dc/tests%2Fui%2Fkindck%2Fkindck-send-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fkindck%2Fkindck-send-object.stderr?ref=48c78248a35385f474b7b27a1da3da1d146b04dc", "patch": "@@ -20,7 +20,8 @@ LL |     assert_send::<Box<dyn Dummy>>();\n    |\n    = help: the trait `Send` is not implemented for `dyn Dummy`\n    = note: required for `Unique<dyn Dummy>` to implement `Send`\n-   = note: required because it appears within the type `Box<dyn Dummy>`\n+note: required because it appears within the type `Box<dyn Dummy>`\n+  --> $SRC_DIR/alloc/src/boxed.rs:LL:COL\n note: required by a bound in `assert_send`\n   --> $DIR/kindck-send-object.rs:5:18\n    |"}, {"sha": "269193f73b4752f1ccf4091285bd425c71a1fb46", "filename": "tests/ui/kindck/kindck-send-object1.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/48c78248a35385f474b7b27a1da3da1d146b04dc/tests%2Fui%2Fkindck%2Fkindck-send-object1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48c78248a35385f474b7b27a1da3da1d146b04dc/tests%2Fui%2Fkindck%2Fkindck-send-object1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fkindck%2Fkindck-send-object1.stderr?ref=48c78248a35385f474b7b27a1da3da1d146b04dc", "patch": "@@ -20,7 +20,8 @@ LL |     assert_send::<Box<dyn Dummy + 'a>>();\n    |\n    = help: the trait `Send` is not implemented for `(dyn Dummy + 'a)`\n    = note: required for `Unique<(dyn Dummy + 'a)>` to implement `Send`\n-   = note: required because it appears within the type `Box<dyn Dummy>`\n+note: required because it appears within the type `Box<dyn Dummy>`\n+  --> $SRC_DIR/alloc/src/boxed.rs:LL:COL\n note: required by a bound in `assert_send`\n   --> $DIR/kindck-send-object1.rs:5:18\n    |"}, {"sha": "6b8df60227f5526522795b051a1f4b588d33f57d", "filename": "tests/ui/kindck/kindck-send-object2.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/48c78248a35385f474b7b27a1da3da1d146b04dc/tests%2Fui%2Fkindck%2Fkindck-send-object2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48c78248a35385f474b7b27a1da3da1d146b04dc/tests%2Fui%2Fkindck%2Fkindck-send-object2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fkindck%2Fkindck-send-object2.stderr?ref=48c78248a35385f474b7b27a1da3da1d146b04dc", "patch": "@@ -20,7 +20,8 @@ LL |     assert_send::<Box<dyn Dummy>>();\n    |\n    = help: the trait `Send` is not implemented for `dyn Dummy`\n    = note: required for `Unique<dyn Dummy>` to implement `Send`\n-   = note: required because it appears within the type `Box<dyn Dummy>`\n+note: required because it appears within the type `Box<dyn Dummy>`\n+  --> $SRC_DIR/alloc/src/boxed.rs:LL:COL\n note: required by a bound in `assert_send`\n   --> $DIR/kindck-send-object2.rs:3:18\n    |"}, {"sha": "dc1bb6206afcfab413dbdd2ade3c902f583181c6", "filename": "tests/ui/kindck/kindck-send-owned.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/48c78248a35385f474b7b27a1da3da1d146b04dc/tests%2Fui%2Fkindck%2Fkindck-send-owned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48c78248a35385f474b7b27a1da3da1d146b04dc/tests%2Fui%2Fkindck%2Fkindck-send-owned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fkindck%2Fkindck-send-owned.stderr?ref=48c78248a35385f474b7b27a1da3da1d146b04dc", "patch": "@@ -6,7 +6,8 @@ LL |     assert_send::<Box<*mut u8>>();\n    |\n    = help: the trait `Send` is not implemented for `*mut u8`\n    = note: required for `Unique<*mut u8>` to implement `Send`\n-   = note: required because it appears within the type `Box<*mut u8>`\n+note: required because it appears within the type `Box<*mut u8>`\n+  --> $SRC_DIR/alloc/src/boxed.rs:LL:COL\n note: required by a bound in `assert_send`\n   --> $DIR/kindck-send-owned.rs:3:18\n    |"}, {"sha": "0c399f15a25bba46d78dbd2e8c8fcb6f2fcf231b", "filename": "tests/ui/not-panic/not-panic-safe-2.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/48c78248a35385f474b7b27a1da3da1d146b04dc/tests%2Fui%2Fnot-panic%2Fnot-panic-safe-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48c78248a35385f474b7b27a1da3da1d146b04dc/tests%2Fui%2Fnot-panic%2Fnot-panic-safe-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnot-panic%2Fnot-panic-safe-2.stderr?ref=48c78248a35385f474b7b27a1da3da1d146b04dc", "patch": "@@ -5,7 +5,8 @@ LL |     assert::<Rc<RefCell<i32>>>();\n    |              ^^^^^^^^^^^^^^^^ `UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n    |\n    = help: within `RefCell<i32>`, the trait `RefUnwindSafe` is not implemented for `UnsafeCell<i32>`\n-   = note: required because it appears within the type `RefCell<i32>`\n+note: required because it appears within the type `RefCell<i32>`\n+  --> $SRC_DIR/core/src/cell.rs:LL:COL\n    = note: required for `Rc<RefCell<i32>>` to implement `UnwindSafe`\n note: required by a bound in `assert`\n   --> $DIR/not-panic-safe-2.rs:7:14\n@@ -20,8 +21,10 @@ LL |     assert::<Rc<RefCell<i32>>>();\n    |              ^^^^^^^^^^^^^^^^ `UnsafeCell<isize>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n    |\n    = help: within `RefCell<i32>`, the trait `RefUnwindSafe` is not implemented for `UnsafeCell<isize>`\n-   = note: required because it appears within the type `Cell<isize>`\n-   = note: required because it appears within the type `RefCell<i32>`\n+note: required because it appears within the type `Cell<isize>`\n+  --> $SRC_DIR/core/src/cell.rs:LL:COL\n+note: required because it appears within the type `RefCell<i32>`\n+  --> $SRC_DIR/core/src/cell.rs:LL:COL\n    = note: required for `Rc<RefCell<i32>>` to implement `UnwindSafe`\n note: required by a bound in `assert`\n   --> $DIR/not-panic-safe-2.rs:7:14"}, {"sha": "53028d6a3371a4d7d4aa87e52407609de910d536", "filename": "tests/ui/not-panic/not-panic-safe-3.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/48c78248a35385f474b7b27a1da3da1d146b04dc/tests%2Fui%2Fnot-panic%2Fnot-panic-safe-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48c78248a35385f474b7b27a1da3da1d146b04dc/tests%2Fui%2Fnot-panic%2Fnot-panic-safe-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnot-panic%2Fnot-panic-safe-3.stderr?ref=48c78248a35385f474b7b27a1da3da1d146b04dc", "patch": "@@ -5,7 +5,8 @@ LL |     assert::<Arc<RefCell<i32>>>();\n    |              ^^^^^^^^^^^^^^^^^ `UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n    |\n    = help: within `RefCell<i32>`, the trait `RefUnwindSafe` is not implemented for `UnsafeCell<i32>`\n-   = note: required because it appears within the type `RefCell<i32>`\n+note: required because it appears within the type `RefCell<i32>`\n+  --> $SRC_DIR/core/src/cell.rs:LL:COL\n    = note: required for `Arc<RefCell<i32>>` to implement `UnwindSafe`\n note: required by a bound in `assert`\n   --> $DIR/not-panic-safe-3.rs:7:14\n@@ -20,8 +21,10 @@ LL |     assert::<Arc<RefCell<i32>>>();\n    |              ^^^^^^^^^^^^^^^^^ `UnsafeCell<isize>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n    |\n    = help: within `RefCell<i32>`, the trait `RefUnwindSafe` is not implemented for `UnsafeCell<isize>`\n-   = note: required because it appears within the type `Cell<isize>`\n-   = note: required because it appears within the type `RefCell<i32>`\n+note: required because it appears within the type `Cell<isize>`\n+  --> $SRC_DIR/core/src/cell.rs:LL:COL\n+note: required because it appears within the type `RefCell<i32>`\n+  --> $SRC_DIR/core/src/cell.rs:LL:COL\n    = note: required for `Arc<RefCell<i32>>` to implement `UnwindSafe`\n note: required by a bound in `assert`\n   --> $DIR/not-panic-safe-3.rs:7:14"}, {"sha": "b1361cfd87ef2ead6a11d1d5b541ad478f036900", "filename": "tests/ui/not-panic/not-panic-safe-4.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/48c78248a35385f474b7b27a1da3da1d146b04dc/tests%2Fui%2Fnot-panic%2Fnot-panic-safe-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48c78248a35385f474b7b27a1da3da1d146b04dc/tests%2Fui%2Fnot-panic%2Fnot-panic-safe-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnot-panic%2Fnot-panic-safe-4.stderr?ref=48c78248a35385f474b7b27a1da3da1d146b04dc", "patch": "@@ -5,7 +5,8 @@ LL |     assert::<&RefCell<i32>>();\n    |              ^^^^^^^^^^^^^ `UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n    |\n    = help: within `RefCell<i32>`, the trait `RefUnwindSafe` is not implemented for `UnsafeCell<i32>`\n-   = note: required because it appears within the type `RefCell<i32>`\n+note: required because it appears within the type `RefCell<i32>`\n+  --> $SRC_DIR/core/src/cell.rs:LL:COL\n    = note: required for `&RefCell<i32>` to implement `UnwindSafe`\n note: required by a bound in `assert`\n   --> $DIR/not-panic-safe-4.rs:6:14\n@@ -25,8 +26,10 @@ LL |     assert::<&RefCell<i32>>();\n    |              ^^^^^^^^^^^^^ `UnsafeCell<isize>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n    |\n    = help: within `RefCell<i32>`, the trait `RefUnwindSafe` is not implemented for `UnsafeCell<isize>`\n-   = note: required because it appears within the type `Cell<isize>`\n-   = note: required because it appears within the type `RefCell<i32>`\n+note: required because it appears within the type `Cell<isize>`\n+  --> $SRC_DIR/core/src/cell.rs:LL:COL\n+note: required because it appears within the type `RefCell<i32>`\n+  --> $SRC_DIR/core/src/cell.rs:LL:COL\n    = note: required for `&RefCell<i32>` to implement `UnwindSafe`\n note: required by a bound in `assert`\n   --> $DIR/not-panic-safe-4.rs:6:14"}, {"sha": "47f28257409eb5e05a14b3a5d2fc91430c17c650", "filename": "tests/ui/not-panic/not-panic-safe-6.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/48c78248a35385f474b7b27a1da3da1d146b04dc/tests%2Fui%2Fnot-panic%2Fnot-panic-safe-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48c78248a35385f474b7b27a1da3da1d146b04dc/tests%2Fui%2Fnot-panic%2Fnot-panic-safe-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnot-panic%2Fnot-panic-safe-6.stderr?ref=48c78248a35385f474b7b27a1da3da1d146b04dc", "patch": "@@ -5,7 +5,8 @@ LL |     assert::<*mut RefCell<i32>>();\n    |              ^^^^^^^^^^^^^^^^^ `UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n    |\n    = help: within `RefCell<i32>`, the trait `RefUnwindSafe` is not implemented for `UnsafeCell<i32>`\n-   = note: required because it appears within the type `RefCell<i32>`\n+note: required because it appears within the type `RefCell<i32>`\n+  --> $SRC_DIR/core/src/cell.rs:LL:COL\n    = note: required for `*mut RefCell<i32>` to implement `UnwindSafe`\n note: required by a bound in `assert`\n   --> $DIR/not-panic-safe-6.rs:6:14\n@@ -20,8 +21,10 @@ LL |     assert::<*mut RefCell<i32>>();\n    |              ^^^^^^^^^^^^^^^^^ `UnsafeCell<isize>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n    |\n    = help: within `RefCell<i32>`, the trait `RefUnwindSafe` is not implemented for `UnsafeCell<isize>`\n-   = note: required because it appears within the type `Cell<isize>`\n-   = note: required because it appears within the type `RefCell<i32>`\n+note: required because it appears within the type `Cell<isize>`\n+  --> $SRC_DIR/core/src/cell.rs:LL:COL\n+note: required because it appears within the type `RefCell<i32>`\n+  --> $SRC_DIR/core/src/cell.rs:LL:COL\n    = note: required for `*mut RefCell<i32>` to implement `UnwindSafe`\n note: required by a bound in `assert`\n   --> $DIR/not-panic-safe-6.rs:6:14"}, {"sha": "5af648f6a0cf131b5aebbbda6577ac249d5c41df", "filename": "tests/ui/phantom-auto-trait.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/48c78248a35385f474b7b27a1da3da1d146b04dc/tests%2Fui%2Fphantom-auto-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48c78248a35385f474b7b27a1da3da1d146b04dc/tests%2Fui%2Fphantom-auto-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fphantom-auto-trait.stderr?ref=48c78248a35385f474b7b27a1da3da1d146b04dc", "patch": "@@ -11,7 +11,8 @@ note: required for `&T` to implement `Zen`\n    |\n LL | unsafe impl<'a, T: 'a> Zen for &'a T where T: Sync {}\n    |                        ^^^     ^^^^^          ---- unsatisfied trait bound introduced here\n-   = note: required because it appears within the type `PhantomData<&T>`\n+note: required because it appears within the type `PhantomData<&T>`\n+  --> $SRC_DIR/core/src/marker.rs:LL:COL\n note: required because it appears within the type `Guard<'_, T>`\n   --> $DIR/phantom-auto-trait.rs:12:8\n    |\n@@ -40,7 +41,8 @@ note: required for `&T` to implement `Zen`\n    |\n LL | unsafe impl<'a, T: 'a> Zen for &'a T where T: Sync {}\n    |                        ^^^     ^^^^^          ---- unsatisfied trait bound introduced here\n-   = note: required because it appears within the type `PhantomData<&T>`\n+note: required because it appears within the type `PhantomData<&T>`\n+  --> $SRC_DIR/core/src/marker.rs:LL:COL\n note: required because it appears within the type `Guard<'_, T>`\n   --> $DIR/phantom-auto-trait.rs:12:8\n    |"}, {"sha": "bb63f7cd0dce03d6d57088ee416cb16825969233", "filename": "tests/ui/recursion/recursive-requirements.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/48c78248a35385f474b7b27a1da3da1d146b04dc/tests%2Fui%2Frecursion%2Frecursive-requirements.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48c78248a35385f474b7b27a1da3da1d146b04dc/tests%2Fui%2Frecursion%2Frecursive-requirements.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frecursion%2Frecursive-requirements.stderr?ref=48c78248a35385f474b7b27a1da3da1d146b04dc", "patch": "@@ -28,7 +28,8 @@ note: required because it appears within the type `Bar`\n    |\n LL | pub struct Bar {\n    |            ^^^\n-   = note: required because it appears within the type `PhantomData<Bar>`\n+note: required because it appears within the type `PhantomData<Bar>`\n+  --> $SRC_DIR/core/src/marker.rs:LL:COL\n note: required because it appears within the type `Foo`\n   --> $DIR/recursive-requirements.rs:5:12\n    |"}, {"sha": "fd3646b8c3c6a46a2797ebfb86af8bf87b1d49e4", "filename": "tests/ui/suggestions/path-by-value.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/48c78248a35385f474b7b27a1da3da1d146b04dc/tests%2Fui%2Fsuggestions%2Fpath-by-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48c78248a35385f474b7b27a1da3da1d146b04dc/tests%2Fui%2Fsuggestions%2Fpath-by-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fpath-by-value.stderr?ref=48c78248a35385f474b7b27a1da3da1d146b04dc", "patch": "@@ -5,7 +5,8 @@ LL | fn f(p: Path) { }\n    |      ^ doesn't have a size known at compile-time\n    |\n    = help: within `Path`, the trait `Sized` is not implemented for `[u8]`\n-   = note: required because it appears within the type `Path`\n+note: required because it appears within the type `Path`\n+  --> $SRC_DIR/std/src/path.rs:LL:COL\n    = help: unsized fn params are gated as an unstable feature\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |"}, {"sha": "365c1016eb3dcb3ed5d28e541f70e06add3330e1", "filename": "tests/ui/suggestions/suggest-borrow-to-dyn-object.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/48c78248a35385f474b7b27a1da3da1d146b04dc/tests%2Fui%2Fsuggestions%2Fsuggest-borrow-to-dyn-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48c78248a35385f474b7b27a1da3da1d146b04dc/tests%2Fui%2Fsuggestions%2Fsuggest-borrow-to-dyn-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fsuggest-borrow-to-dyn-object.stderr?ref=48c78248a35385f474b7b27a1da3da1d146b04dc", "patch": "@@ -5,7 +5,8 @@ LL |     check(s);\n    |           ^ doesn't have a size known at compile-time\n    |\n    = help: within `OsStr`, the trait `Sized` is not implemented for `[u8]`\n-   = note: required because it appears within the type `OsStr`\n+note: required because it appears within the type `OsStr`\n+  --> $SRC_DIR/std/src/ffi/os_str.rs:LL:COL\n    = note: required for the cast from `OsStr` to the object type `dyn AsRef<Path>`\n help: consider borrowing the value, since `&OsStr` can be coerced into `dyn AsRef<Path>`\n    |"}, {"sha": "9ac5c4725ab120b282cb9a7bbd94187a97e05fea", "filename": "tests/ui/traits/issue-7013.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/48c78248a35385f474b7b27a1da3da1d146b04dc/tests%2Fui%2Ftraits%2Fissue-7013.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48c78248a35385f474b7b27a1da3da1d146b04dc/tests%2Fui%2Ftraits%2Fissue-7013.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fissue-7013.stderr?ref=48c78248a35385f474b7b27a1da3da1d146b04dc", "patch": "@@ -5,7 +5,8 @@ LL |     let a = A {v: Box::new(B{v: None}) as Box<dyn Foo + Send>};\n    |                   ^^^^^^^^^^^^^^^^^^^^ `Rc<RefCell<A>>` cannot be sent between threads safely\n    |\n    = help: within `B`, the trait `Send` is not implemented for `Rc<RefCell<A>>`\n-   = note: required because it appears within the type `Option<Rc<RefCell<A>>>`\n+note: required because it appears within the type `Option<Rc<RefCell<A>>>`\n+  --> $SRC_DIR/core/src/option.rs:LL:COL\n note: required because it appears within the type `B`\n   --> $DIR/issue-7013.rs:8:8\n    |"}, {"sha": "a53879657f5a4705d8ddbc46075f09a644d23bb5", "filename": "tests/ui/traits/negative-impls/negated-auto-traits-error.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/48c78248a35385f474b7b27a1da3da1d146b04dc/tests%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48c78248a35385f474b7b27a1da3da1d146b04dc/tests%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.stderr?ref=48c78248a35385f474b7b27a1da3da1d146b04dc", "patch": "@@ -67,7 +67,8 @@ LL |     is_send(Box::new(TestType));\n    |\n    = note: the trait bound `Unique<dummy2::TestType>: Send` is not satisfied\n    = note: required for `Unique<dummy2::TestType>` to implement `Send`\n-   = note: required because it appears within the type `Box<TestType>`\n+note: required because it appears within the type `Box<TestType>`\n+  --> $SRC_DIR/alloc/src/boxed.rs:LL:COL\n note: required by a bound in `is_send`\n   --> $DIR/negated-auto-traits-error.rs:16:15\n    |\n@@ -93,7 +94,8 @@ note: required because it appears within the type `Outer2<TestType>`\n LL | struct Outer2<T>(T);\n    |        ^^^^^^\n    = note: required for `Unique<Outer2<dummy3::TestType>>` to implement `Send`\n-   = note: required because it appears within the type `Box<Outer2<TestType>>`\n+note: required because it appears within the type `Box<Outer2<TestType>>`\n+  --> $SRC_DIR/alloc/src/boxed.rs:LL:COL\n note: required by a bound in `is_send`\n   --> $DIR/negated-auto-traits-error.rs:16:15\n    |"}, {"sha": "bf1ff9c8bc154f300740d052edec4e9dc9efa862", "filename": "tests/ui/union/union-sized-field.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/48c78248a35385f474b7b27a1da3da1d146b04dc/tests%2Fui%2Funion%2Funion-sized-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48c78248a35385f474b7b27a1da3da1d146b04dc/tests%2Fui%2Funion%2Funion-sized-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funion%2Funion-sized-field.stderr?ref=48c78248a35385f474b7b27a1da3da1d146b04dc", "patch": "@@ -6,7 +6,8 @@ LL | union Foo<T: ?Sized> {\n LL |     value: ManuallyDrop<T>,\n    |            ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n-   = note: required because it appears within the type `ManuallyDrop<T>`\n+note: required because it appears within the type `ManuallyDrop<T>`\n+  --> $SRC_DIR/core/src/mem/manually_drop.rs:LL:COL\n    = note: no field of a union may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n help: consider removing the `?Sized` bound to make the type parameter `Sized`\n@@ -31,7 +32,8 @@ LL | struct Foo2<T: ?Sized> {\n LL |     value: ManuallyDrop<T>,\n    |            ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n-   = note: required because it appears within the type `ManuallyDrop<T>`\n+note: required because it appears within the type `ManuallyDrop<T>`\n+  --> $SRC_DIR/core/src/mem/manually_drop.rs:LL:COL\n    = note: only the last field of a struct may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n help: consider removing the `?Sized` bound to make the type parameter `Sized`\n@@ -56,7 +58,8 @@ LL | enum Foo3<T: ?Sized> {\n LL |     Value(ManuallyDrop<T>),\n    |           ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n-   = note: required because it appears within the type `ManuallyDrop<T>`\n+note: required because it appears within the type `ManuallyDrop<T>`\n+  --> $SRC_DIR/core/src/mem/manually_drop.rs:LL:COL\n    = note: no field of an enum variant may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n help: consider removing the `?Sized` bound to make the type parameter `Sized`"}]}