{"sha": "e5b69978c1137f05bf8b469875503d5f7fa7f747", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1YjY5OTc4YzExMzdmMDViZjhiNDY5ODc1NTAzZDVmN2ZhN2Y3NDc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-01T06:29:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-01T06:29:16Z"}, "message": "Rollup merge of #60417 - Centril:hir-exprkind-use-renamed-to-drop-temps, r=oli-obk\n\nRename hir::ExprKind::Use to ::DropTemps and improve docs.\n\nAddresses https://github.com/rust-lang/rust/pull/60225#discussion_r279797691.\n\nr? @oli-obk\n\ncc @eddyb @Manishearth", "tree": {"sha": "da8c24a6486ef13d732e2de71c33cd0632252bfa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da8c24a6486ef13d732e2de71c33cd0632252bfa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5b69978c1137f05bf8b469875503d5f7fa7f747", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcyTy8CRBK7hj4Ov3rIwAAdHIIAExORBggltmKmISyMKmnj0HV\n1D0GFYGB6M2C9Ostn9+Zw29oSx2VIxDCrpK9TkqW/EEZD46pDT3KbT4pYOmCifCJ\nIWyVhlpFkYQmuqanb+r6YZQIcL5jFuhFc3XOkb17ZWJsMMjH7cm3VDtQdYjSCNkk\nbWGE2BXcO21RiRkuoVAoBjn9RhEMDQ/k+rat8AzRVP3G1JC/tT1GWLvqSxwMKRiZ\nzlWFZExwjkuNIBw0/qp6YTHovWsYG/2jUQnFO1FDNAxHl0EkEUUARym2EcciEl3k\nD+m8tzrm6mhoeZLVb70FG7vVkoDdn9bpEgANIyRkc0LexPk5PU9mmBRow38cjds=\n=BKwT\n-----END PGP SIGNATURE-----\n", "payload": "tree da8c24a6486ef13d732e2de71c33cd0632252bfa\nparent c8c195fb38cebe55cb579c0b9ae20bee03e3e664\nparent d58cb934cb78b1f11c2fa44c469621c10a8359fd\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1556692156 +0200\ncommitter GitHub <noreply@github.com> 1556692156 +0200\n\nRollup merge of #60417 - Centril:hir-exprkind-use-renamed-to-drop-temps, r=oli-obk\n\nRename hir::ExprKind::Use to ::DropTemps and improve docs.\n\nAddresses https://github.com/rust-lang/rust/pull/60225#discussion_r279797691.\n\nr? @oli-obk\n\ncc @eddyb @Manishearth\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5b69978c1137f05bf8b469875503d5f7fa7f747", "html_url": "https://github.com/rust-lang/rust/commit/e5b69978c1137f05bf8b469875503d5f7fa7f747", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5b69978c1137f05bf8b469875503d5f7fa7f747/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8c195fb38cebe55cb579c0b9ae20bee03e3e664", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8c195fb38cebe55cb579c0b9ae20bee03e3e664", "html_url": "https://github.com/rust-lang/rust/commit/c8c195fb38cebe55cb579c0b9ae20bee03e3e664"}, {"sha": "d58cb934cb78b1f11c2fa44c469621c10a8359fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/d58cb934cb78b1f11c2fa44c469621c10a8359fd", "html_url": "https://github.com/rust-lang/rust/commit/d58cb934cb78b1f11c2fa44c469621c10a8359fd"}], "stats": {"total": 58, "additions": 32, "deletions": 26}, "files": [{"sha": "2592af7d4ad5a7045367d25b67becfe7dc7dcb83", "filename": "src/librustc/cfg/construct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5b69978c1137f05bf8b469875503d5f7fa7f747/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b69978c1137f05bf8b469875503d5f7fa7f747/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fconstruct.rs?ref=e5b69978c1137f05bf8b469875503d5f7fa7f747", "patch": "@@ -369,7 +369,7 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n             hir::ExprKind::AddrOf(_, ref e) |\n             hir::ExprKind::Cast(ref e, _) |\n             hir::ExprKind::Type(ref e, _) |\n-            hir::ExprKind::Use(ref e) |\n+            hir::ExprKind::DropTemps(ref e) |\n             hir::ExprKind::Unary(_, ref e) |\n             hir::ExprKind::Field(ref e, _) |\n             hir::ExprKind::Yield(ref e) |"}, {"sha": "0c73d97394fdac00152e20b3321cd1b7cc4c6442", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5b69978c1137f05bf8b469875503d5f7fa7f747/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b69978c1137f05bf8b469875503d5f7fa7f747/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=e5b69978c1137f05bf8b469875503d5f7fa7f747", "patch": "@@ -1029,7 +1029,7 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) {\n             visitor.visit_expr(subexpression);\n             visitor.visit_ty(typ)\n         }\n-        ExprKind::Use(ref subexpression) => {\n+        ExprKind::DropTemps(ref subexpression) => {\n             visitor.visit_expr(subexpression);\n         }\n         ExprKind::If(ref head_expression, ref if_block, ref optional_else) => {"}, {"sha": "f4209a39c83a789daebe837b8bcb21d775308dbd", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e5b69978c1137f05bf8b469875503d5f7fa7f747/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b69978c1137f05bf8b469875503d5f7fa7f747/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=e5b69978c1137f05bf8b469875503d5f7fa7f747", "patch": "@@ -4671,7 +4671,7 @@ impl<'a> LoweringContext<'a> {\n                 // The construct was introduced in #21984.\n                 // FIXME(60253): Is this still necessary?\n                 // Also, add the attributes to the outer returned expr node.\n-                return self.expr_use(head_sp, match_expr, e.attrs.clone())\n+                return self.expr_drop_temps(head_sp, match_expr, e.attrs.clone())\n             }\n \n             // Desugar `ExprKind::Try`\n@@ -5030,15 +5030,19 @@ impl<'a> LoweringContext<'a> {\n         )\n     }\n \n-    /// Wrap the given `expr` in `hir::ExprKind::Use`.\n+    /// Wrap the given `expr` in a terminating scope using `hir::ExprKind::DropTemps`.\n     ///\n-    /// In terms of drop order, it has the same effect as\n-    /// wrapping `expr` in `{ let _t = $expr; _t }` but\n-    /// should provide better compile-time performance.\n+    /// In terms of drop order, it has the same effect as wrapping `expr` in\n+    /// `{ let _t = $expr; _t }` but should provide better compile-time performance.\n     ///\n     /// The drop order can be important in e.g. `if expr { .. }`.\n-    fn expr_use(&mut self, span: Span, expr: P<hir::Expr>, attrs: ThinVec<Attribute>) -> hir::Expr {\n-        self.expr(span, hir::ExprKind::Use(expr), attrs)\n+    fn expr_drop_temps(\n+        &mut self,\n+        span: Span,\n+        expr: P<hir::Expr>,\n+        attrs: ThinVec<Attribute>\n+    ) -> hir::Expr {\n+        self.expr(span, hir::ExprKind::DropTemps(expr), attrs)\n     }\n \n     fn expr_match("}, {"sha": "5a2807ac93d85b93ed46280c7af7da8bb8890f6c", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e5b69978c1137f05bf8b469875503d5f7fa7f747/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b69978c1137f05bf8b469875503d5f7fa7f747/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=e5b69978c1137f05bf8b469875503d5f7fa7f747", "patch": "@@ -1366,7 +1366,7 @@ impl Expr {\n             ExprKind::Unary(..) => ExprPrecedence::Unary,\n             ExprKind::Lit(_) => ExprPrecedence::Lit,\n             ExprKind::Type(..) | ExprKind::Cast(..) => ExprPrecedence::Cast,\n-            ExprKind::Use(ref expr, ..) => expr.precedence(),\n+            ExprKind::DropTemps(ref expr, ..) => expr.precedence(),\n             ExprKind::If(..) => ExprPrecedence::If,\n             ExprKind::While(..) => ExprPrecedence::While,\n             ExprKind::Loop(..) => ExprPrecedence::Loop,\n@@ -1438,7 +1438,7 @@ impl Expr {\n             ExprKind::Binary(..) |\n             ExprKind::Yield(..) |\n             ExprKind::Cast(..) |\n-            ExprKind::Use(..) |\n+            ExprKind::DropTemps(..) |\n             ExprKind::Err => {\n                 false\n             }\n@@ -1488,10 +1488,12 @@ pub enum ExprKind {\n     Cast(P<Expr>, P<Ty>),\n     /// A type reference (e.g., `Foo`).\n     Type(P<Expr>, P<Ty>),\n-    /// Semantically equivalent to `{ let _t = expr; _t }`.\n-    /// Maps directly to `hair::ExprKind::Use`.\n-    /// Only exists to tweak the drop order in HIR.\n-    Use(P<Expr>),\n+    /// Wraps the expression in a terminating scope.\n+    /// This makes it semantically equivalent to `{ let _t = expr; _t }`.\n+    ///\n+    /// This construct only exists to tweak the drop order in HIR lowering.\n+    /// An example of that is the desugaring of `for` loops.\n+    DropTemps(P<Expr>),\n     /// An `if` block, with an optional else block.\n     ///\n     /// I.e., `if <expr> { <expr> } else { <expr> }`."}, {"sha": "54816316f0bf5dcae0b7734bf0d29ad486140cde", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5b69978c1137f05bf8b469875503d5f7fa7f747/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b69978c1137f05bf8b469875503d5f7fa7f747/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=e5b69978c1137f05bf8b469875503d5f7fa7f747", "patch": "@@ -1388,7 +1388,7 @@ impl<'a> State<'a> {\n                 self.word_space(\":\")?;\n                 self.print_type(&ty)?;\n             }\n-            hir::ExprKind::Use(ref init) => {\n+            hir::ExprKind::DropTemps(ref init) => {\n                 // Print `{`:\n                 self.cbox(indent_unit)?;\n                 self.ibox(0)?;"}, {"sha": "ebc80c272135b67294d4141b9308c07823703386", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5b69978c1137f05bf8b469875503d5f7fa7f747/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b69978c1137f05bf8b469875503d5f7fa7f747/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=e5b69978c1137f05bf8b469875503d5f7fa7f747", "patch": "@@ -520,7 +520,7 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n                 self.consume_expr(&base);\n             }\n \n-            hir::ExprKind::Use(ref expr) => {\n+            hir::ExprKind::DropTemps(ref expr) => {\n                 self.consume_expr(&expr);\n             }\n "}, {"sha": "2ae53a5df3a866ec20d2e326d2d1a723f463b9a3", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e5b69978c1137f05bf8b469875503d5f7fa7f747/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b69978c1137f05bf8b469875503d5f7fa7f747/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=e5b69978c1137f05bf8b469875503d5f7fa7f747", "patch": "@@ -521,7 +521,7 @@ fn visit_expr<'a, 'tcx>(ir: &mut IrMaps<'a, 'tcx>, expr: &'tcx Expr) {\n       hir::ExprKind::Binary(..) |\n       hir::ExprKind::AddrOf(..) |\n       hir::ExprKind::Cast(..) |\n-      hir::ExprKind::Use(..) |\n+      hir::ExprKind::DropTemps(..) |\n       hir::ExprKind::Unary(..) |\n       hir::ExprKind::Break(..) |\n       hir::ExprKind::Continue(_) |\n@@ -1222,7 +1222,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n             hir::ExprKind::AddrOf(_, ref e) |\n             hir::ExprKind::Cast(ref e, _) |\n             hir::ExprKind::Type(ref e, _) |\n-            hir::ExprKind::Use(ref e) |\n+            hir::ExprKind::DropTemps(ref e) |\n             hir::ExprKind::Unary(_, ref e) |\n             hir::ExprKind::Yield(ref e) |\n             hir::ExprKind::Repeat(ref e, _) => {\n@@ -1526,7 +1526,7 @@ fn check_expr<'a, 'tcx>(this: &mut Liveness<'a, 'tcx>, expr: &'tcx Expr) {\n         hir::ExprKind::Match(..) | hir::ExprKind::While(..) | hir::ExprKind::Loop(..) |\n         hir::ExprKind::Index(..) | hir::ExprKind::Field(..) |\n         hir::ExprKind::Array(..) | hir::ExprKind::Tup(..) | hir::ExprKind::Binary(..) |\n-        hir::ExprKind::Cast(..) | hir::ExprKind::Use(..) | hir::ExprKind::Unary(..) |\n+        hir::ExprKind::Cast(..) | hir::ExprKind::DropTemps(..) | hir::ExprKind::Unary(..) |\n         hir::ExprKind::Ret(..) | hir::ExprKind::Break(..) | hir::ExprKind::Continue(..) |\n         hir::ExprKind::Lit(_) | hir::ExprKind::Block(..) | hir::ExprKind::AddrOf(..) |\n         hir::ExprKind::Struct(..) | hir::ExprKind::Repeat(..) |"}, {"sha": "b6df7f2326a49c208bda864049afe3c6873b989d", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5b69978c1137f05bf8b469875503d5f7fa7f747/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b69978c1137f05bf8b469875503d5f7fa7f747/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=e5b69978c1137f05bf8b469875503d5f7fa7f747", "patch": "@@ -677,7 +677,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n             hir::ExprKind::Assign(..) | hir::ExprKind::AssignOp(..) |\n             hir::ExprKind::Closure(..) | hir::ExprKind::Ret(..) |\n             hir::ExprKind::Unary(..) | hir::ExprKind::Yield(..) |\n-            hir::ExprKind::MethodCall(..) | hir::ExprKind::Cast(..) | hir::ExprKind::Use(..) |\n+            hir::ExprKind::MethodCall(..) | hir::ExprKind::Cast(..) | hir::ExprKind::DropTemps(..) |\n             hir::ExprKind::Array(..) | hir::ExprKind::Tup(..) | hir::ExprKind::If(..) |\n             hir::ExprKind::Binary(..) | hir::ExprKind::While(..) |\n             hir::ExprKind::Block(..) | hir::ExprKind::Loop(..) | hir::ExprKind::Match(..) |"}, {"sha": "2b88f273adce42936d989a1e7c5138231808d3c4", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5b69978c1137f05bf8b469875503d5f7fa7f747/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b69978c1137f05bf8b469875503d5f7fa7f747/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=e5b69978c1137f05bf8b469875503d5f7fa7f747", "patch": "@@ -908,8 +908,8 @@ fn resolve_expr<'a, 'tcx>(visitor: &mut RegionResolutionVisitor<'a, 'tcx>, expr:\n                 visitor.cx.var_parent = visitor.cx.parent;\n             }\n \n-            hir::ExprKind::Use(ref expr) => {\n-                // `Use(expr)` does not denote a conditional scope.\n+            hir::ExprKind::DropTemps(ref expr) => {\n+                // `DropTemps(expr)` does not denote a conditional scope.\n                 // Rather, we want to achieve the same behavior as `{ let _t = expr; _t }`.\n                 terminating(expr.hir_id.local_id);\n             }"}, {"sha": "07701952b3221883faaff5ae14e95526ac4ca415", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5b69978c1137f05bf8b469875503d5f7fa7f747/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b69978c1137f05bf8b469875503d5f7fa7f747/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=e5b69978c1137f05bf8b469875503d5f7fa7f747", "patch": "@@ -759,7 +759,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                 }\n             }\n         }\n-        hir::ExprKind::Use(ref source) => {\n+        hir::ExprKind::DropTemps(ref source) => {\n             ExprKind::Use { source: source.to_ref() }\n         }\n         hir::ExprKind::Box(ref value) => {"}, {"sha": "881f63e994d59e908a413c62098104f494d06a6c", "filename": "src/librustc_passes/rvalue_promotion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5b69978c1137f05bf8b469875503d5f7fa7f747/src%2Flibrustc_passes%2Frvalue_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b69978c1137f05bf8b469875503d5f7fa7f747/src%2Flibrustc_passes%2Frvalue_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalue_promotion.rs?ref=e5b69978c1137f05bf8b469875503d5f7fa7f747", "patch": "@@ -437,7 +437,7 @@ fn check_expr_kind<'a, 'tcx>(\n         hir::ExprKind::AddrOf(_, ref expr) |\n         hir::ExprKind::Repeat(ref expr, _) |\n         hir::ExprKind::Type(ref expr, _) |\n-        hir::ExprKind::Use(ref expr) => {\n+        hir::ExprKind::DropTemps(ref expr) => {\n             v.check_expr(&expr)\n         }\n "}, {"sha": "f6c263b98551f9ae379422023257b4e3fdc366cb", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5b69978c1137f05bf8b469875503d5f7fa7f747/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b69978c1137f05bf8b469875503d5f7fa7f747/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=e5b69978c1137f05bf8b469875503d5f7fa7f747", "patch": "@@ -4538,7 +4538,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 self.check_expr_eq_type(&e, ty);\n                 ty\n             }\n-            ExprKind::Use(ref e) => {\n+            ExprKind::DropTemps(ref e) => {\n                 self.check_expr_with_expectation(e, expected)\n             }\n             ExprKind::Array(ref args) => {"}]}