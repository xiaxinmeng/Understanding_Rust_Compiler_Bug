{"sha": "8c7433a3ccf80b38270b3e29bf37fe58c1796d2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjNzQzM2EzY2NmODBiMzgyNzBiM2UyOWJmMzdmZTU4YzE3OTZkMmE=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-06-18T04:52:59Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-06-18T23:37:26Z"}, "message": "Avoid allocations in `has_any_child_of`.\n\n`has_any_child_of` is hot. It allocates a `Vec` that almost always\ndoesn't exceed a length of 1.\n\nThis patch peels off the first iteration of the loop, avoiding the need\nfor the `Vec` creation in ~99% of cases.", "tree": {"sha": "84c390224cc1ecd27a24191e4f51162f9c6a8b4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84c390224cc1ecd27a24191e4f51162f9c6a8b4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c7433a3ccf80b38270b3e29bf37fe58c1796d2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c7433a3ccf80b38270b3e29bf37fe58c1796d2a", "html_url": "https://github.com/rust-lang/rust/commit/8c7433a3ccf80b38270b3e29bf37fe58c1796d2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c7433a3ccf80b38270b3e29bf37fe58c1796d2a/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b973e653257f965e33a61b58c0eb7e863aed6c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b973e653257f965e33a61b58c0eb7e863aed6c8", "html_url": "https://github.com/rust-lang/rust/commit/2b973e653257f965e33a61b58c0eb7e863aed6c8"}], "stats": {"total": 29, "additions": 18, "deletions": 11}, "files": [{"sha": "a89d1afae8637bc25e89d876c03365f2b45dfccc", "filename": "src/librustc_mir/dataflow/at_location.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/8c7433a3ccf80b38270b3e29bf37fe58c1796d2a/src%2Flibrustc_mir%2Fdataflow%2Fat_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c7433a3ccf80b38270b3e29bf37fe58c1796d2a/src%2Flibrustc_mir%2Fdataflow%2Fat_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fat_location.rs?ref=8c7433a3ccf80b38270b3e29bf37fe58c1796d2a", "patch": "@@ -204,10 +204,22 @@ where\n     T: HasMoveData<'tcx> + BitDenotation<Idx = MovePathIndex>,\n {\n     pub fn has_any_child_of(&self, mpi: T::Idx) -> Option<T::Idx> {\n+        // We process `mpi` before the loop below, for two reasons:\n+        // - it's a little different from the loop case (we don't traverse its\n+        //   siblings);\n+        // - ~99% of the time the loop isn't reached, and this code is hot, so\n+        //   we don't want to allocate `todo` unnecessarily.\n+        if self.contains(&mpi) {\n+            return Some(mpi);\n+        }\n         let move_data = self.operator().move_data();\n+        let move_path = &move_data.move_paths[mpi];\n+        let mut todo = if let Some(child) = move_path.first_child {\n+            vec![child]\n+        } else {\n+            return None;\n+        };\n \n-        let mut todo = vec![mpi];\n-        let mut push_siblings = false; // don't look at siblings of original `mpi`.\n         while let Some(mpi) = todo.pop() {\n             if self.contains(&mpi) {\n                 return Some(mpi);\n@@ -216,15 +228,10 @@ where\n             if let Some(child) = move_path.first_child {\n                 todo.push(child);\n             }\n-            if push_siblings {\n-                if let Some(sibling) = move_path.next_sibling {\n-                    todo.push(sibling);\n-                }\n-            } else {\n-                // after we've processed the original `mpi`, we should\n-                // always traverse the siblings of any of its\n-                // children.\n-                push_siblings = true;\n+            // After we've processed the original `mpi`, we should always\n+            // traverse the siblings of any of its children.\n+            if let Some(sibling) = move_path.next_sibling {\n+                todo.push(sibling);\n             }\n         }\n         return None;"}]}