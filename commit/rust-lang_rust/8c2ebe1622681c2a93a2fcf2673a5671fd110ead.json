{"sha": "8c2ebe1622681c2a93a2fcf2673a5671fd110ead", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjMmViZTE2MjI2ODFjMmE5M2EyZmNmMjY3M2E1NjcxZmQxMTBlYWQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-05T22:56:41Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-10T23:13:12Z"}, "message": "libextra: Remove various cells involved in `Arc`s.\n\nI could have done this by making `Arc` use RAII, but this is too\ninvolved for now.", "tree": {"sha": "a19f92b2d86f6d64356cf4ddc34ff2d38038fad7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a19f92b2d86f6d64356cf4ddc34ff2d38038fad7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c2ebe1622681c2a93a2fcf2673a5671fd110ead", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c2ebe1622681c2a93a2fcf2673a5671fd110ead", "html_url": "https://github.com/rust-lang/rust/commit/8c2ebe1622681c2a93a2fcf2673a5671fd110ead", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c2ebe1622681c2a93a2fcf2673a5671fd110ead/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a6ebbbeccd926dc9eed1cfc34534bebb590ec75", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a6ebbbeccd926dc9eed1cfc34534bebb590ec75", "html_url": "https://github.com/rust-lang/rust/commit/9a6ebbbeccd926dc9eed1cfc34534bebb590ec75"}], "stats": {"total": 14, "additions": 6, "deletions": 8}, "files": [{"sha": "005328c6934700de3744b9779c51da667f752913", "filename": "src/libextra/arc.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8c2ebe1622681c2a93a2fcf2673a5671fd110ead/src%2Flibextra%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c2ebe1622681c2a93a2fcf2673a5671fd110ead/src%2Flibextra%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farc.rs?ref=8c2ebe1622681c2a93a2fcf2673a5671fd110ead", "patch": "@@ -597,7 +597,6 @@ mod tests {\n \n     use arc::*;\n \n-    use std::cell::Cell;\n     use std::comm;\n     use std::task;\n \n@@ -628,7 +627,6 @@ mod tests {\n         let arc = ~MutexArc::new(false);\n         let arc2 = ~arc.clone();\n         let (p,c) = comm::oneshot();\n-        let c = Cell::new(c);\n         do task::spawn {\n             // wait until parent gets in\n             p.recv();\n@@ -638,8 +636,9 @@ mod tests {\n             })\n         }\n \n+        let mut c = Some(c);\n         arc.access_cond(|state, cond| {\n-            c.take().send(());\n+            c.take_unwrap().send(());\n             assert!(!*state);\n             while !*state {\n                 cond.wait();"}, {"sha": "88207bfbae45304ca4b1342257a7214426522691", "filename": "src/libextra/sync.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8c2ebe1622681c2a93a2fcf2673a5671fd110ead/src%2Flibextra%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c2ebe1622681c2a93a2fcf2673a5671fd110ead/src%2Flibextra%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsync.rs?ref=8c2ebe1622681c2a93a2fcf2673a5671fd110ead", "patch": "@@ -676,7 +676,6 @@ mod tests {\n     use sync::*;\n \n     use std::cast;\n-    use std::cell::Cell;\n     use std::comm;\n     use std::result;\n     use std::task;\n@@ -762,9 +761,9 @@ mod tests {\n             let s = Semaphore::new(1);\n             let s2 = s.clone();\n             let (p, c) = comm::stream();\n-            let child_data = Cell::new((s2, c));\n+            let mut child_data = Some((s2, c));\n             s.access(|| {\n-                let (s2, c) = child_data.take();\n+                let (s2, c) = child_data.take_unwrap();\n                 do task::spawn {\n                     c.send(());\n                     s2.access(|| { });\n@@ -947,13 +946,13 @@ mod tests {\n             let mut sibling_convos = ~[];\n             2.times(|| {\n                 let (p, c) = comm::stream();\n-                let c = Cell::new(c);\n                 sibling_convos.push(p);\n                 let mi = m2.clone();\n                 // spawn sibling task\n                 do task::spawn { // linked\n+                    let mut c = Some(c);\n                     mi.lock_cond(|cond| {\n-                        let c = c.take();\n+                        let c = c.take_unwrap();\n                         c.send(()); // tell sibling to go ahead\n                         (|| {\n                             cond.wait(); // block forever"}]}