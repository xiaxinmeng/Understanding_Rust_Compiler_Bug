{"sha": "f529af0d5020a1d635a18304f138c9247fd10ec5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1MjlhZjBkNTAyMGExZDYzNWExODMwNGYxMzhjOTI0N2ZkMTBlYzU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-08T18:53:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-08T18:53:16Z"}, "message": "auto merge of #4844 : jld/rust/const-index-fix, r=graydon\n\nFixes #3169 and uses that to fix const array indexing, which I broke (in a way that doesn't break tests but will greatly confuse users) while trying to fix const enum vectors.", "tree": {"sha": "df3780c5701a3ba0565114734a864558fbb559f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df3780c5701a3ba0565114734a864558fbb559f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f529af0d5020a1d635a18304f138c9247fd10ec5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f529af0d5020a1d635a18304f138c9247fd10ec5", "html_url": "https://github.com/rust-lang/rust/commit/f529af0d5020a1d635a18304f138c9247fd10ec5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f529af0d5020a1d635a18304f138c9247fd10ec5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee93fb2ad586a98ab1e5766cfd74b3bba6529b14", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee93fb2ad586a98ab1e5766cfd74b3bba6529b14", "html_url": "https://github.com/rust-lang/rust/commit/ee93fb2ad586a98ab1e5766cfd74b3bba6529b14"}, {"sha": "9318babf6cf5c2d053d78dfb788575905226215e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9318babf6cf5c2d053d78dfb788575905226215e", "html_url": "https://github.com/rust-lang/rust/commit/9318babf6cf5c2d053d78dfb788575905226215e"}], "stats": {"total": 52, "additions": 11, "deletions": 41}, "files": [{"sha": "515239883e2d8098513deab6757cd073377dee7a", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 2, "deletions": 31, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/f529af0d5020a1d635a18304f138c9247fd10ec5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f529af0d5020a1d635a18304f138c9247fd10ec5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=f529af0d5020a1d635a18304f138c9247fd10ec5", "patch": "@@ -254,7 +254,7 @@ pub fn const_expr(cx: @crate_ctxt, e: @ast::expr) -> ValueRef {\n                                         ~\"index is not an integer-constant \\\n                                           expression\")\n               };\n-              let (arr, _len) = match ty::get(bt).sty {\n+              let (arr, len) = match ty::get(bt).sty {\n                   ty::ty_evec(_, vstore) | ty::ty_estr(vstore) =>\n                       match vstore {\n                       ty::vstore_fixed(u) =>\n@@ -278,36 +278,7 @@ pub fn const_expr(cx: @crate_ctxt, e: @ast::expr) -> ValueRef {\n                                            a vector or string type\")\n               };\n \n-              // FIXME #3169: This is a little odd but it arises due to a\n-              // weird wrinkle in LLVM: it doesn't appear willing to let us\n-              // call LLVMConstIntGetZExtValue on the size element of the\n-              // slice, or seemingly any integer-const involving a sizeof()\n-              // call. Despite that being \"a const\", it's not the kind of\n-              // const you can ask for the integer-value of, evidently. This\n-              // might be an LLVM bug, not sure. In any case, to work around\n-              // this we obtain the initializer and count how many elements it\n-              // has, ignoring the length we pulled out of the slice. (Note\n-              // that the initializer might be a struct rather than an array,\n-              // if enums are involved.) This only works because we picked out\n-              // the original globalvar via const_deref and so can recover the\n-              // array-size of the underlying array (or the element count of\n-              // the underlying struct), and all this will hold together\n-              // exactly as long as we _don't_ support const sub-slices (that\n-              // is, slices that represent something other than a whole\n-              // array).  At that point we'll have more and uglier work to do\n-              // here, but for now this should work.\n-              //\n-              // In the future, what we should be doing here is the\n-              // moral equivalent of:\n-              //\n-              // let len = llvm::LLVMConstIntGetZExtValue(len) as u64;\n-              //\n-              // but we might have to do substantially more magic to\n-              // make it work. Or figure out what is causing LLVM to\n-              // not want to consider sizeof() a constant expression\n-              // we can get the value (as a number) out of.\n-\n-              let len = llvm::LLVMGetNumOperands(arr) as u64;\n+              let len = llvm::LLVMConstIntGetZExtValue(len) as u64;\n               let len = match ty::get(bt).sty {\n                   ty::ty_estr(*) => {assert len > 0; len - 1},\n                   _ => len"}, {"sha": "dfbc75376c7cdc3159b759b7db486a5ef20a498c", "filename": "src/librustc/middle/trans/machine.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f529af0d5020a1d635a18304f138c9247fd10ec5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f529af0d5020a1d635a18304f138c9247fd10ec5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmachine.rs?ref=f529af0d5020a1d635a18304f138c9247fd10ec5", "patch": "@@ -126,17 +126,16 @@ pub fn llbitsize_of_real(cx: @crate_ctxt, t: TypeRef) -> uint {\n     }\n }\n \n-// Returns the \"default\" size of t, which is calculated by casting null to a\n-// *T and then doing gep(1) on it and measuring the result. Really, look in\n-// the LLVM sources. It does that. So this is likely similar to the ABI size\n-// (i.e. including alignment-padding), but goodness knows which alignment it\n-// winds up using. Probably the ABI one? Not recommended.\n+/// Returns the size of the type as an LLVM constant integer value.\n pub fn llsize_of(cx: @crate_ctxt, t: TypeRef) -> ValueRef {\n-    unsafe {\n-        return llvm::LLVMConstIntCast(lib::llvm::llvm::LLVMSizeOf(t),\n-                                      cx.int_type,\n-                                      False);\n-    }\n+    // Once upon a time, this called LLVMSizeOf, which does a\n+    // getelementptr(1) on a null pointer and casts to an int, in\n+    // order to obtain the type size as a value without requiring the\n+    // target data layout.  But we have the target data layout, so\n+    // there's no need for that contrivance.  The instruction\n+    // selection DAG generator would flatten that GEP(1) node into a\n+    // constant of the type's alloc size, so let's save it some work.\n+    return C_uint(cx, llsize_of_alloc(cx, t));\n }\n \n // Returns the \"default\" size of t (see above), or 1 if the size would"}]}