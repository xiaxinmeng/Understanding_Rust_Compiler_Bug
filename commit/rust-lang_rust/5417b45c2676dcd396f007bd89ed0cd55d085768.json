{"sha": "5417b45c2676dcd396f007bd89ed0cd55d085768", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0MTdiNDVjMjY3NmRjZDM5NmYwMDdiZDg5ZWQwY2Q1NWQwODU3Njg=", "commit": {"author": {"name": "Andy Wang", "email": "cbeuw.andy@gmail.com", "date": "2021-04-19T22:27:02Z"}, "committer": {"name": "Andy Wang", "email": "cbeuw.andy@gmail.com", "date": "2021-05-05T14:31:28Z"}, "message": "Use local and remapped paths where appropriate", "tree": {"sha": "25a9819f523855d604aa373edb93c850f817532f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25a9819f523855d604aa373edb93c850f817532f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5417b45c2676dcd396f007bd89ed0cd55d085768", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCAAdFiEE7dcbcBMl24/h63ldGBtJ+fOPM3QFAmCSrEMACgkQGBtJ+fOP\nM3RNqQwAoO6KGwHlMtANbzRxTcbGJIaoT7DtZDP+hZkBQ4S1ps8rCFjl6UldPCd6\n8uGS8P2t11dQ46jquwLZplTzqJMthSsvsRc4LEqRfuqNWV2Nd1RGVRLqZtJkr48q\nvo9HSnch8fOqNRBv+xYShtE53bfE46Le1yaQnPMLsFJG81HYy5Ua+luiqalQvxa4\nihr3JQKkISVOEZhgIHTpwfEozViEMgEAWLwIZFctXsD3RqtHtdFEzQNromryUW8q\nBN23fa64M7bGw4b/4LEaOzenC4ySXJr8AWO8LdKaV5vM/TTVeCDxXahItUWX15jn\nAMs0xfTnEmydcDXMUOlreo9ylFM5Ja/aM937zWQIebr8XJl66Fq7O3UetbHOz+Xz\nXMmWIro4o8ye+vgEJe04QEuiP98hvnY79A3YzGZY/YV3NbT9qSLgNDf8qve15/Hq\nqTgUy1OTdlbqYnHUWdyxgbix7l+jYGCwVBnhpmSqL7mMLYahDE1PriOtX0TJtetC\nNtDji49Y\n=vL18\n-----END PGP SIGNATURE-----", "payload": "tree 25a9819f523855d604aa373edb93c850f817532f\nparent fb4f6439f62d4b940bdfab3f78771d76eacab379\nauthor Andy Wang <cbeuw.andy@gmail.com> 1618871222 +0100\ncommitter Andy Wang <cbeuw.andy@gmail.com> 1620225088 +0100\n\nUse local and remapped paths where appropriate\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5417b45c2676dcd396f007bd89ed0cd55d085768", "html_url": "https://github.com/rust-lang/rust/commit/5417b45c2676dcd396f007bd89ed0cd55d085768", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5417b45c2676dcd396f007bd89ed0cd55d085768/comments", "author": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb4f6439f62d4b940bdfab3f78771d76eacab379", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb4f6439f62d4b940bdfab3f78771d76eacab379", "html_url": "https://github.com/rust-lang/rust/commit/fb4f6439f62d4b940bdfab3f78771d76eacab379"}], "stats": {"total": 159, "additions": 85, "deletions": 74}, "files": [{"sha": "ccb9f15b0f50585effc0e1918fd6d718a18abcbc", "filename": "compiler/rustc_builtin_macros/src/source_util.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5417b45c2676dcd396f007bd89ed0cd55d085768/compiler%2Frustc_builtin_macros%2Fsrc%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5417b45c2676dcd396f007bd89ed0cd55d085768/compiler%2Frustc_builtin_macros%2Fsrc%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fsource_util.rs?ref=5417b45c2676dcd396f007bd89ed0cd55d085768", "patch": "@@ -61,7 +61,9 @@ pub fn expand_file(\n \n     let topmost = cx.expansion_cause().unwrap_or(sp);\n     let loc = cx.source_map().lookup_char_pos(topmost.lo());\n-    base::MacEager::expr(cx.expr_str(topmost, Symbol::intern(&loc.file.name.to_string())))\n+    base::MacEager::expr(\n+        cx.expr_str(topmost, Symbol::intern(&loc.file.name.prefer_remapped().to_string_lossy())),\n+    )\n }\n \n pub fn expand_stringify("}, {"sha": "c12d6d0f1414306a13c698059eb544493129766a", "filename": "compiler/rustc_codegen_cranelift/src/common.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5417b45c2676dcd396f007bd89ed0cd55d085768/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5417b45c2676dcd396f007bd89ed0cd55d085768/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs?ref=5417b45c2676dcd396f007bd89ed0cd55d085768", "patch": "@@ -334,7 +334,9 @@ impl<'tcx> FunctionCx<'_, '_, 'tcx> {\n         let topmost = span.ctxt().outer_expn().expansion_cause().unwrap_or(span);\n         let caller = self.tcx.sess.source_map().lookup_char_pos(topmost.lo());\n         let const_loc = self.tcx.const_caller_location((\n-            rustc_span::symbol::Symbol::intern(&caller.file.name.to_string()),\n+            rustc_span::symbol::Symbol::intern(\n+                &caller.file.name.prefer_remapped().to_string_lossy(),\n+            ),\n             caller.line as u32,\n             caller.col_display as u32 + 1,\n         ));"}, {"sha": "9eb067706309e12cebc5a06146d24e433da1f6e0", "filename": "compiler/rustc_codegen_cranelift/src/debuginfo/line_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5417b45c2676dcd396f007bd89ed0cd55d085768/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Fline_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5417b45c2676dcd396f007bd89ed0cd55d085768/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Fline_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Fline_info.rs?ref=5417b45c2676dcd396f007bd89ed0cd55d085768", "patch": "@@ -87,7 +87,7 @@ fn line_program_add_file(\n         filename => {\n             let dir_id = line_program.default_directory();\n             let dummy_file_name = LineString::new(\n-                filename.to_string().into_bytes(),\n+                filename.prefer_remapped().to_string().into_bytes(),\n                 line_program.encoding(),\n                 line_strings,\n             );"}, {"sha": "1eee1eaa211e76230270d2eca07e7a1554002395", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5417b45c2676dcd396f007bd89ed0cd55d085768/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5417b45c2676dcd396f007bd89ed0cd55d085768/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=5417b45c2676dcd396f007bd89ed0cd55d085768", "patch": "@@ -759,10 +759,10 @@ fn hex_encode(data: &[u8]) -> String {\n }\n \n pub fn file_metadata(cx: &CodegenCx<'ll, '_>, source_file: &SourceFile) -> &'ll DIFile {\n-    debug!(\"file_metadata: file_name: {}\", source_file.name);\n+    debug!(\"file_metadata: file_name: {:?}\", source_file.name);\n \n     let hash = Some(&source_file.src_hash);\n-    let file_name = Some(source_file.name.to_string());\n+    let file_name = Some(source_file.name.prefer_remapped().to_string());\n     let directory = if source_file.is_real_file() && !source_file.is_imported() {\n         Some(cx.sess().working_dir.to_string_lossy(false).to_string())\n     } else {"}, {"sha": "72e9163b88e21195bfce3cab152f423bbcf86222", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5417b45c2676dcd396f007bd89ed0cd55d085768/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5417b45c2676dcd396f007bd89ed0cd55d085768/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=5417b45c2676dcd396f007bd89ed0cd55d085768", "patch": "@@ -1144,7 +1144,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             let topmost = span.ctxt().outer_expn().expansion_cause().unwrap_or(span);\n             let caller = tcx.sess.source_map().lookup_char_pos(topmost.lo());\n             let const_loc = tcx.const_caller_location((\n-                Symbol::intern(&caller.file.name.to_string()),\n+                Symbol::intern(&caller.file.name.prefer_remapped().to_string_lossy()),\n                 caller.line as u32,\n                 caller.col_display as u32 + 1,\n             ));"}, {"sha": "577baec21f064f232d96a83914619cdac7ce4004", "filename": "compiler/rustc_errors/src/annotate_snippet_emitter_writer.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5417b45c2676dcd396f007bd89ed0cd55d085768/compiler%2Frustc_errors%2Fsrc%2Fannotate_snippet_emitter_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5417b45c2676dcd396f007bd89ed0cd55d085768/compiler%2Frustc_errors%2Fsrc%2Fannotate_snippet_emitter_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fannotate_snippet_emitter_writer.rs?ref=5417b45c2676dcd396f007bd89ed0cd55d085768", "patch": "@@ -126,7 +126,8 @@ impl AnnotateSnippetEmitterWriter {\n             }\n             // owned: line source, line index, annotations\n             type Owned = (String, usize, Vec<crate::snippet::Annotation>);\n-            let origin = primary_lo.file.name.to_string();\n+            let filename = primary_lo.file.name.prefer_local();\n+            let origin = filename.to_string_lossy();\n             let annotated_files: Vec<Owned> = annotated_files\n                 .into_iter()\n                 .flat_map(|annotated_file| {"}, {"sha": "3443bb5366ca0b33a63f4741caef72ebd28137a4", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5417b45c2676dcd396f007bd89ed0cd55d085768/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5417b45c2676dcd396f007bd89ed0cd55d085768/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=5417b45c2676dcd396f007bd89ed0cd55d085768", "patch": "@@ -1309,7 +1309,7 @@ impl EmitterWriter {\n                         buffer_msg_line_offset,\n                         &format!(\n                             \"{}:{}:{}\",\n-                            loc.file.name,\n+                            loc.file.name.prefer_local(),\n                             sm.doctest_offset_line(&loc.file.name, loc.line),\n                             loc.col.0 + 1,\n                         ),\n@@ -1323,7 +1323,7 @@ impl EmitterWriter {\n                         0,\n                         &format!(\n                             \"{}:{}:{}: \",\n-                            loc.file.name,\n+                            loc.file.name.prefer_local(),\n                             sm.doctest_offset_line(&loc.file.name, loc.line),\n                             loc.col.0 + 1,\n                         ),\n@@ -1347,12 +1347,12 @@ impl EmitterWriter {\n                     };\n                     format!(\n                         \"{}:{}{}\",\n-                        annotated_file.file.name,\n+                        annotated_file.file.name.prefer_local(),\n                         sm.doctest_offset_line(&annotated_file.file.name, first_line.line_index),\n                         col\n                     )\n                 } else {\n-                    annotated_file.file.name.to_string()\n+                    format!(\"{}\", annotated_file.file.name.prefer_local())\n                 };\n                 buffer.append(buffer_msg_line_offset + 1, &loc, Style::LineAndColumn);\n                 for _ in 0..max_line_num_len {"}, {"sha": "5d175a3ade9a2438671595d829616d563c3d4499", "filename": "compiler/rustc_errors/src/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5417b45c2676dcd396f007bd89ed0cd55d085768/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5417b45c2676dcd396f007bd89ed0cd55d085768/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fjson.rs?ref=5417b45c2676dcd396f007bd89ed0cd55d085768", "patch": "@@ -468,7 +468,7 @@ impl DiagnosticSpan {\n         });\n \n         DiagnosticSpan {\n-            file_name: start.file.name.to_string(),\n+            file_name: start.file.name.prefer_local().to_string(),\n             byte_start: start.file.original_relative_byte_pos(span.lo()).0,\n             byte_end: start.file.original_relative_byte_pos(span.hi()).0,\n             line_start: start.line,"}, {"sha": "8a9f3fc668ecf06f76159ae5f76277b7d26c216a", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5417b45c2676dcd396f007bd89ed0cd55d085768/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5417b45c2676dcd396f007bd89ed0cd55d085768/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=5417b45c2676dcd396f007bd89ed0cd55d085768", "patch": "@@ -1080,7 +1080,10 @@ impl<'a> ExtCtxt<'a> {\n                 other => {\n                     return Err(self.struct_span_err(\n                         span,\n-                        &format!(\"cannot resolve relative path in non-file source `{}`\", other),\n+                        &format!(\n+                            \"cannot resolve relative path in non-file source `{}`\",\n+                            other.prefer_local()\n+                        ),\n                     ));\n                 }\n             };"}, {"sha": "f5c6bb3db654202ee1f7db9856107f58ba85fc17", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5417b45c2676dcd396f007bd89ed0cd55d085768/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5417b45c2676dcd396f007bd89ed0cd55d085768/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=5417b45c2676dcd396f007bd89ed0cd55d085768", "patch": "@@ -365,7 +365,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             FileName::Real(name) => name\n                 .into_local_path()\n                 .expect(\"attempting to resolve a file path in an external file\"),\n-            other => PathBuf::from(other.to_string()),\n+            other => PathBuf::from(other.prefer_local().to_string()),\n         };\n         let dir_path = file_path.parent().unwrap_or(&file_path).to_owned();\n         self.cx.root_path = dir_path.clone();"}, {"sha": "dba708ab2cd9a3d2bdea5c0d11d97f36224c2356", "filename": "compiler/rustc_expand/src/proc_macro_server.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5417b45c2676dcd396f007bd89ed0cd55d085768/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5417b45c2676dcd396f007bd89ed0cd55d085768/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs?ref=5417b45c2676dcd396f007bd89ed0cd55d085768", "patch": "@@ -627,7 +627,7 @@ impl server::SourceFile for Rustc<'_> {\n                 .to_str()\n                 .expect(\"non-UTF8 file path in `proc_macro::SourceFile::path`\")\n                 .to_string(),\n-            _ => file.name.to_string(),\n+            _ => file.name.prefer_local().to_string(),\n         }\n     }\n     fn is_real(&mut self, file: &Self::SourceFile) -> bool {"}, {"sha": "dd3fa248bffeab03e444d46d5da9c0a4cf476632", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5417b45c2676dcd396f007bd89ed0cd55d085768/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5417b45c2676dcd396f007bd89ed0cd55d085768/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=5417b45c2676dcd396f007bd89ed0cd55d085768", "patch": "@@ -1604,13 +1604,19 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             match (&terr, expected == found) {\n                 (TypeError::Sorts(values), extra) => {\n                     let sort_string = |ty: Ty<'tcx>| match (extra, ty.kind()) {\n-                        (true, ty::Opaque(def_id, _)) => format!(\n-                            \" (opaque type at {})\",\n-                            self.tcx\n+                        (true, ty::Opaque(def_id, _)) => {\n+                            let pos = self\n+                                .tcx\n                                 .sess\n                                 .source_map()\n-                                .mk_substr_filename(self.tcx.def_span(*def_id)),\n-                        ),\n+                                .lookup_char_pos(self.tcx.def_span(*def_id).lo());\n+                            format!(\n+                                \" (opaque type at <{}:{}:{}>)\",\n+                                pos.file.name.prefer_local(),\n+                                pos.line,\n+                                pos.col.to_usize() + 1,\n+                            )\n+                        }\n                         (true, _) => format!(\" ({})\", ty.sort_string(self.tcx)),\n                         (false, _) => \"\".to_string(),\n                     };"}, {"sha": "df141f2b7bf2707144a13f416be04fd782de0b29", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5417b45c2676dcd396f007bd89ed0cd55d085768/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5417b45c2676dcd396f007bd89ed0cd55d085768/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=5417b45c2676dcd396f007bd89ed0cd55d085768", "patch": "@@ -36,7 +36,6 @@ use rustc_session::output::{filename_for_input, filename_for_metadata};\n use rustc_session::search_paths::PathKind;\n use rustc_session::Session;\n use rustc_span::symbol::{Ident, Symbol};\n-use rustc_span::FileName;\n use rustc_trait_selection::traits;\n use rustc_typeck as typeck;\n use tracing::{info, warn};\n@@ -575,14 +574,7 @@ fn write_out_deps(\n             .iter()\n             .filter(|fmap| fmap.is_real_file())\n             .filter(|fmap| !fmap.is_imported())\n-            .map(|fmap| {\n-                escape_dep_filename(&match &fmap.name {\n-                    FileName::Real(real) => {\n-                        real.local_path().unwrap_or(real.stable_name()).display().to_string()\n-                    }\n-                    _ => fmap.name.to_string(),\n-                })\n-            })\n+            .map(|fmap| escape_dep_filename(&fmap.name.prefer_local().to_string()))\n             .collect();\n \n         if let Some(ref backend) = sess.opts.debugging_opts.codegen_backend {"}, {"sha": "e9dd7a3fe68f1cbfbee51a981154a9c50c86a379", "filename": "compiler/rustc_mir/src/interpret/eval_context.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5417b45c2676dcd396f007bd89ed0cd55d085768/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5417b45c2676dcd396f007bd89ed0cd55d085768/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs?ref=5417b45c2676dcd396f007bd89ed0cd55d085768", "patch": "@@ -263,7 +263,13 @@ impl<'tcx> fmt::Display for FrameInfo<'tcx> {\n             }\n             if !self.span.is_dummy() {\n                 let lo = tcx.sess.source_map().lookup_char_pos(self.span.lo());\n-                write!(f, \" at {}:{}:{}\", lo.file.name, lo.line, lo.col.to_usize() + 1)?;\n+                write!(\n+                    f,\n+                    \" at {}:{}:{}\",\n+                    lo.file.name.prefer_local(),\n+                    lo.line,\n+                    lo.col.to_usize() + 1\n+                )?;\n             }\n             Ok(())\n         })"}, {"sha": "2b996cf62a3d39166877d449973c9cf7399ad09c", "filename": "compiler/rustc_mir/src/interpret/intrinsics/caller_location.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5417b45c2676dcd396f007bd89ed0cd55d085768/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5417b45c2676dcd396f007bd89ed0cd55d085768/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics%2Fcaller_location.rs?ref=5417b45c2676dcd396f007bd89ed0cd55d085768", "patch": "@@ -106,7 +106,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         let topmost = span.ctxt().outer_expn().expansion_cause().unwrap_or(span);\n         let caller = self.tcx.sess.source_map().lookup_char_pos(topmost.lo());\n         (\n-            Symbol::intern(&caller.file.name.to_string()),\n+            Symbol::intern(&caller.file.name.prefer_remapped().to_string_lossy()),\n             u32::try_from(caller.line).unwrap(),\n             u32::try_from(caller.col_display).unwrap().checked_add(1).unwrap(),\n         )"}, {"sha": "1270be5a52ef45fa97f8e03649a1a6ea726200f5", "filename": "compiler/rustc_mir/src/transform/coverage/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5417b45c2676dcd396f007bd89ed0cd55d085768/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5417b45c2676dcd396f007bd89ed0cd55d085768/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fmod.rs?ref=5417b45c2676dcd396f007bd89ed0cd55d085768", "patch": "@@ -290,7 +290,7 @@ impl<'a, 'tcx> Instrumentor<'a, 'tcx> {\n         let tcx = self.tcx;\n         let source_map = tcx.sess.source_map();\n         let body_span = self.body_span;\n-        let file_name = Symbol::intern(&self.source_file.name.to_string());\n+        let file_name = Symbol::intern(&self.source_file.name.prefer_remapped().to_string_lossy());\n \n         let mut bcb_counters = IndexVec::from_elem_n(None, self.basic_coverage_blocks.num_nodes());\n         for covspan in coverage_spans {"}, {"sha": "077b19fa959596c1fba44713a6c075f3fbba95e8", "filename": "compiler/rustc_parse/src/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5417b45c2676dcd396f007bd89ed0cd55d085768/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5417b45c2676dcd396f007bd89ed0cd55d085768/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flib.rs?ref=5417b45c2676dcd396f007bd89ed0cd55d085768", "patch": "@@ -188,8 +188,10 @@ pub fn maybe_file_to_stream(\n     override_span: Option<Span>,\n ) -> Result<(TokenStream, Vec<lexer::UnmatchedBrace>), Vec<Diagnostic>> {\n     let src = source_file.src.as_ref().unwrap_or_else(|| {\n-        sess.span_diagnostic\n-            .bug(&format!(\"cannot lex `source_file` without source: {}\", source_file.name));\n+        sess.span_diagnostic.bug(&format!(\n+            \"cannot lex `source_file` without source: {}\",\n+            source_file.name.prefer_local()\n+        ));\n     });\n \n     let (token_trees, unmatched_braces) ="}, {"sha": "54b6a1215858153f3924214e466085eff3817aae", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5417b45c2676dcd396f007bd89ed0cd55d085768/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5417b45c2676dcd396f007bd89ed0cd55d085768/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=5417b45c2676dcd396f007bd89ed0cd55d085768", "patch": "@@ -1112,7 +1112,7 @@ impl<'tcx> DumpVisitor<'tcx> {\n                 name: String::new(),\n                 qualname,\n                 span,\n-                value: filename.to_string(),\n+                value: filename.prefer_remapped().to_string(),\n                 children,\n                 parent: None,\n                 decl_id: None,"}, {"sha": "7e60d881d89fadfad84f6d2504e973b70d9f8355", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5417b45c2676dcd396f007bd89ed0cd55d085768/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5417b45c2676dcd396f007bd89ed0cd55d085768/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=5417b45c2676dcd396f007bd89ed0cd55d085768", "patch": "@@ -80,7 +80,7 @@ impl<'tcx> SaveContext<'tcx> {\n         let end = sm.lookup_char_pos(span.hi());\n \n         SpanData {\n-            file_name: start.file.name.to_string().into(),\n+            file_name: start.file.name.prefer_remapped().to_string().into(),\n             byte_start: span.lo().0,\n             byte_end: span.hi().0,\n             line_start: Row::new_one_indexed(start.line as u32),\n@@ -290,7 +290,7 @@ impl<'tcx> SaveContext<'tcx> {\n                     name: item.ident.to_string(),\n                     qualname,\n                     span: self.span_from_span(item.ident.span),\n-                    value: filename.to_string(),\n+                    value: filename.prefer_remapped().to_string(),\n                     parent: None,\n                     children: m\n                         .item_ids"}, {"sha": "1947b04f441c30025dad52f7152a5ad43fc17a09", "filename": "compiler/rustc_save_analysis/src/span_utils.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5417b45c2676dcd396f007bd89ed0cd55d085768/compiler%2Frustc_save_analysis%2Fsrc%2Fspan_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5417b45c2676dcd396f007bd89ed0cd55d085768/compiler%2Frustc_save_analysis%2Fsrc%2Fspan_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fspan_utils.rs?ref=5417b45c2676dcd396f007bd89ed0cd55d085768", "patch": "@@ -34,12 +34,7 @@ impl<'a> SpanUtils<'a> {\n                         .to_string()\n                 }\n             }\n-            // If the file name was remapped, we assume the user\n-            // configured it the way they wanted to, so use that directly\n-            FileName::Real(RealFileName::Remapped { local_path: _, virtual_name }) => {\n-                virtual_name.display().to_string()\n-            }\n-            filename => filename.to_string(),\n+            filename => filename.prefer_remapped().to_string(),\n         }\n     }\n "}, {"sha": "458874e4e65f5e39bf1782b94e92d2f50d0b203d", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5417b45c2676dcd396f007bd89ed0cd55d085768/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5417b45c2676dcd396f007bd89ed0cd55d085768/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=5417b45c2676dcd396f007bd89ed0cd55d085768", "patch": "@@ -305,6 +305,16 @@ impl FileName {\n         }\n     }\n \n+    pub fn prefer_remapped(&self) -> FileNameDisplay<'_> {\n+        FileNameDisplay { inner: self, prefer_local: false }\n+    }\n+\n+    // This may include transient local filesystem information.\n+    // Must not be embedded in build outputs.\n+    pub fn prefer_local(&self) -> FileNameDisplay<'_> {\n+        FileNameDisplay { inner: self, prefer_local: true }\n+    }\n+\n     pub fn macro_expansion_source_code(src: &str) -> FileName {\n         let mut hasher = StableHasher::new();\n         src.hash(&mut hasher);"}, {"sha": "82e6c579be4fb4ce645543f734bd6c0121836dda", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5417b45c2676dcd396f007bd89ed0cd55d085768/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5417b45c2676dcd396f007bd89ed0cd55d085768/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=5417b45c2676dcd396f007bd89ed0cd55d085768", "patch": "@@ -369,11 +369,6 @@ impl SourceMap {\n         source_file\n     }\n \n-    pub fn mk_substr_filename(&self, sp: Span) -> String {\n-        let pos = self.lookup_char_pos(sp.lo());\n-        format!(\"<{}:{}:{}>\", pos.file.name, pos.line, pos.col.to_usize() + 1)\n-    }\n-\n     // If there is a doctest offset, applies it to the line.\n     pub fn doctest_offset_line(&self, file: &FileName, orig: usize) -> usize {\n         match file {\n@@ -420,7 +415,7 @@ impl SourceMap {\n         let hi = self.lookup_char_pos(sp.hi());\n         format!(\n             \"{}:{}:{}: {}:{}\",\n-            lo.file.name,\n+            lo.file.name.prefer_remapped(),\n             lo.line,\n             lo.col.to_usize() + 1,\n             hi.line,"}, {"sha": "3999ce7fa2a7815d9fead0c74b624b000a1f2aaf", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5417b45c2676dcd396f007bd89ed0cd55d085768/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5417b45c2676dcd396f007bd89ed0cd55d085768/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=5417b45c2676dcd396f007bd89ed0cd55d085768", "patch": "@@ -93,7 +93,7 @@ impl ExternalCrate {\n \n     crate fn src_root(&self, tcx: TyCtxt<'_>) -> PathBuf {\n         match self.src(tcx) {\n-            FileName::Real(ref p) => match p.local_path().parent() {\n+            FileName::Real(ref p) => match p.local_path_if_available().parent() {\n                 Some(p) => p.to_path_buf(),\n                 None => PathBuf::new(),\n             },"}, {"sha": "780f451de59633de5de61e01c3e7405954417e09", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5417b45c2676dcd396f007bd89ed0cd55d085768/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5417b45c2676dcd396f007bd89ed0cd55d085768/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=5417b45c2676dcd396f007bd89ed0cd55d085768", "patch": "@@ -840,7 +840,7 @@ impl Collector {\n         if !item_path.is_empty() {\n             item_path.push(' ');\n         }\n-        format!(\"{} - {}(line {})\", filename, item_path, line)\n+        format!(\"{} - {}(line {})\", filename.prefer_local(), item_path, line)\n     }\n \n     crate fn set_position(&mut self, position: Span) {\n@@ -891,15 +891,16 @@ impl Tester for Collector {\n                     local_path.to_path_buf()\n                 } else {\n                     // Somehow we got the filename from the metadata of another crate, should never happen\n-                    PathBuf::from(r\"doctest.rs\")\n+                    unreachable!(\"doctest from a different crate\");\n                 }\n             }\n             _ => PathBuf::from(r\"doctest.rs\"),\n         };\n \n         // For example `module/file.rs` would become `module_file_rs`\n         let file = filename\n-            .to_string()\n+            .prefer_local()\n+            .to_string_lossy()\n             .chars()\n             .map(|c| if c.is_ascii_alphanumeric() { c } else { '_' })\n             .collect::<String>();"}, {"sha": "288c7785bc9ecb0f49fa5244363cdd992935a78f", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5417b45c2676dcd396f007bd89ed0cd55d085768/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5417b45c2676dcd396f007bd89ed0cd55d085768/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=5417b45c2676dcd396f007bd89ed0cd55d085768", "patch": "@@ -376,17 +376,10 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n         } = options;\n \n         let src_root = match krate.src {\n-            FileName::Real(ref p) => {\n-                if let Some(local_path) = p.local_path() {\n-                    match local_path.parent() {\n-                        Some(p) => p.to_path_buf(),\n-                        None => PathBuf::new(),\n-                    }\n-                } else {\n-                    // Somehow we got the filename from the metadata of another crate, should never happen\n-                    PathBuf::new()\n-                }\n-            }\n+            FileName::Real(ref p) => match p.local_path_if_available().parent() {\n+                Some(p) => p.to_path_buf(),\n+                None => PathBuf::new(),\n+            },\n             _ => PathBuf::new(),\n         };\n         // If user passed in `--playground-url` arg, we fill in crate name here"}, {"sha": "55bef87496d5ef8aeeda75efbaebfad17b3b57be", "filename": "src/librustdoc/html/sources.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5417b45c2676dcd396f007bd89ed0cd55d085768/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5417b45c2676dcd396f007bd89ed0cd55d085768/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fsources.rs?ref=5417b45c2676dcd396f007bd89ed0cd55d085768", "patch": "@@ -56,7 +56,11 @@ impl DocFolder for SourceCollector<'_, '_> {\n                 Err(e) => {\n                     self.scx.tcx.sess.span_err(\n                         item.span(self.scx.tcx).inner(),\n-                        &format!(\"failed to render source code for `{}`: {}\", filename, e),\n+                        &format!(\n+                            \"failed to render source code for `{}`: {}\",\n+                            filename.prefer_local(),\n+                            e\n+                        ),\n                     );\n                     false\n                 }\n@@ -80,7 +84,7 @@ impl SourceCollector<'_, 'tcx> {\n                 if let Some(local_path) = file.local_path() {\n                     local_path.to_path_buf()\n                 } else {\n-                    return Ok(());\n+                    unreachable!(\"only the current crate should have sources emitted\");\n                 }\n             }\n             _ => return Ok(()),\n@@ -119,7 +123,7 @@ impl SourceCollector<'_, 'tcx> {\n         href.push_str(&fname.to_string_lossy());\n \n         let title = format!(\"{} - source\", src_fname.to_string_lossy());\n-        let desc = format!(\"Source of the Rust file `{}`.\", filename);\n+        let desc = format!(\"Source of the Rust file `{}`.\", filename.prefer_remapped());\n         let page = layout::Page {\n             title: &title,\n             css_class: \"source\","}, {"sha": "c115f741afc52694b675cfddea84fde360aa7cdb", "filename": "src/librustdoc/passes/calculate_doc_coverage.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5417b45c2676dcd396f007bd89ed0cd55d085768/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5417b45c2676dcd396f007bd89ed0cd55d085768/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs?ref=5417b45c2676dcd396f007bd89ed0cd55d085768", "patch": "@@ -119,7 +119,7 @@ impl<'a, 'b> CoverageCalculator<'a, 'b> {\n             &self\n                 .items\n                 .iter()\n-                .map(|(k, v)| (k.to_string(), v))\n+                .map(|(k, v)| (k.prefer_local().to_string(), v))\n                 .collect::<BTreeMap<String, &ItemCount>>(),\n         )\n         .expect(\"failed to convert JSON data to string\")\n@@ -159,7 +159,7 @@ impl<'a, 'b> CoverageCalculator<'a, 'b> {\n         for (file, &count) in &self.items {\n             if let Some(percentage) = count.percentage() {\n                 print_table_record(\n-                    &limit_filename_len(file.to_string()),\n+                    &limit_filename_len(file.prefer_local().to_string_lossy().into()),\n                     count,\n                     percentage,\n                     count.examples_percentage().unwrap_or(0.),"}, {"sha": "314bf11e2d66616edc9f9636310fb5f483e221a8", "filename": "src/tools/clippy/clippy_lints/src/macro_use.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5417b45c2676dcd396f007bd89ed0cd55d085768/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmacro_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5417b45c2676dcd396f007bd89ed0cd55d085768/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmacro_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmacro_use.rs?ref=5417b45c2676dcd396f007bd89ed0cd55d085768", "patch": "@@ -47,7 +47,7 @@ pub struct MacroRefData {\n \n impl MacroRefData {\n     pub fn new(name: String, callee: Span, cx: &LateContext<'_>) -> Self {\n-        let mut path = cx.sess().source_map().span_to_filename(callee).to_string();\n+        let mut path = cx.sess().source_map().span_to_filename(callee).prefer_local().to_string();\n \n         // std lib paths are <::std::module::file type>\n         // so remove brackets, space and type.\n@@ -96,8 +96,7 @@ impl MacroUseImports {\n         let name = snippet(cx, cx.sess().source_map().span_until_char(call_site, '!'), \"_\");\n         if let Some(callee) = span.source_callee() {\n             if !self.collected.contains(&call_site) {\n-                self.mac_refs\n-                    .push(MacroRefData::new(name.to_string(), callee.def_site, cx));\n+                self.mac_refs.push(MacroRefData::new(name.to_string(), callee.def_site, cx));\n                 self.collected.insert(call_site);\n             }\n         }\n@@ -175,7 +174,7 @@ impl<'tcx> LateLintPass<'tcx> for MacroUseImports {\n                                 .push((*item).to_string());\n                             check_dup.push((*item).to_string());\n                         }\n-                    },\n+                    }\n                     [root, rest @ ..] => {\n                         if rest.iter().all(|item| !check_dup.contains(&(*item).to_string())) {\n                             let filtered = rest\n@@ -199,7 +198,7 @@ impl<'tcx> LateLintPass<'tcx> for MacroUseImports {\n                                 .push(rest.join(\"::\"));\n                             check_dup.extend(rest.iter().map(ToString::to_string));\n                         }\n-                    },\n+                    }\n                 }\n             }\n         }"}]}