{"sha": "d6e1a6b237d4c3b04a7dff6609c3427eb99bbc60", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2ZTFhNmIyMzdkNGMzYjA0YTdkZmY2NjA5YzM0MjdlYjk5YmJjNjA=", "commit": {"author": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2013-07-25T19:43:45Z"}, "committer": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2013-07-25T19:50:19Z"}, "message": "libstd: Get rid of duplication in {peer, socket}_name and remove extra *.", "tree": {"sha": "780065153ab3571fa3c55212be5594ce25c307a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/780065153ab3571fa3c55212be5594ce25c307a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6e1a6b237d4c3b04a7dff6609c3427eb99bbc60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6e1a6b237d4c3b04a7dff6609c3427eb99bbc60", "html_url": "https://github.com/rust-lang/rust/commit/d6e1a6b237d4c3b04a7dff6609c3427eb99bbc60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6e1a6b237d4c3b04a7dff6609c3427eb99bbc60/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2bb32bea19f8bfd2165361b5ad2d025c2ffeba0", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2bb32bea19f8bfd2165361b5ad2d025c2ffeba0", "html_url": "https://github.com/rust-lang/rust/commit/e2bb32bea19f8bfd2165361b5ad2d025c2ffeba0"}], "stats": {"total": 152, "additions": 49, "deletions": 103}, "files": [{"sha": "0107d30519e5ece08d307ad88d0a7ec87503b86d", "filename": "src/libstd/rt/io/net/tcp.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d6e1a6b237d4c3b04a7dff6609c3427eb99bbc60/src%2Flibstd%2Frt%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6e1a6b237d4c3b04a7dff6609c3427eb99bbc60/src%2Flibstd%2Frt%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fnet%2Ftcp.rs?ref=d6e1a6b237d4c3b04a7dff6609c3427eb99bbc60", "patch": "@@ -45,7 +45,7 @@ impl TcpStream {\n     }\n \n     pub fn peer_name(&mut self) -> Option<IpAddr> {\n-        match (***self).peer_name() {\n+        match (**self).peer_name() {\n             Ok(pn) => Some(pn),\n             Err(ioerr) => {\n                 rtdebug!(\"failed to get peer name: %?\", ioerr);\n@@ -56,7 +56,7 @@ impl TcpStream {\n     }\n \n     pub fn socket_name(&mut self) -> Option<IpAddr> {\n-        match (***self).socket_name() {\n+        match (**self).socket_name() {\n             Ok(sn) => Some(sn),\n             Err(ioerr) => {\n                 rtdebug!(\"failed to get socket name: %?\", ioerr);\n@@ -115,7 +115,7 @@ impl TcpListener {\n     }\n \n     pub fn socket_name(&mut self) -> Option<IpAddr> {\n-        match (***self).socket_name() {\n+        match (**self).socket_name() {\n             Ok(sn) => Some(sn),\n             Err(ioerr) => {\n                 rtdebug!(\"failed to get socket name: %?\", ioerr);"}, {"sha": "42408507f5de340366c1732d7942bc60739075a6", "filename": "src/libstd/rt/uv/uvio.rs", "status": "modified", "additions": 46, "deletions": 100, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/d6e1a6b237d4c3b04a7dff6609c3427eb99bbc60/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6e1a6b237d4c3b04a7dff6609c3427eb99bbc60/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs?ref=d6e1a6b237d4c3b04a7dff6609c3427eb99bbc60", "patch": "@@ -15,6 +15,7 @@ use cell::Cell;\n use cast;\n use cast::transmute;\n use clone::Clone;\n+use libc::c_void;\n use rt::io::IoError;\n use rt::io::net::ip::IpAddr;\n use rt::uv::*;\n@@ -34,6 +35,47 @@ use unstable::sync::{Exclusive, exclusive};\n                             next_test_ip4,\n                             run_in_newsched_task};\n \n+enum SocketNameKind {\n+    TcpPeer,\n+    Tcp,\n+    Udp\n+}\n+\n+fn socket_name<T, U: Watcher + NativeHandle<*T>>(sk: SocketNameKind,\n+                                                 handle: U) -> Result<IpAddr, IoError> {\n+\n+    let getsockname = match sk {\n+        TcpPeer => uvll::rust_uv_tcp_getpeername,\n+        Tcp     => uvll::rust_uv_tcp_getsockname,\n+        Udp     => uvll::rust_uv_udp_getsockname\n+    };\n+\n+    // Allocate a sockaddr_storage\n+    // since we don't know if it's ipv4 or ipv6\n+    let r_addr = unsafe { uvll::malloc_sockaddr_storage() };\n+\n+    let r = unsafe {\n+        getsockname(handle.native_handle() as *c_void, r_addr as *uvll::sockaddr_storage)\n+    };\n+\n+    if r != 0 {\n+        let status = status_to_maybe_uv_error(handle, r);\n+        return Err(uv_error_to_io_error(status.unwrap()));\n+    }\n+\n+    let addr = unsafe {\n+        if uvll::is_ip6_addr(r_addr as *uvll::sockaddr) {\n+            net::uv_ip_to_ip(UvIpv6(r_addr as *uvll::sockaddr_in6))\n+        } else {\n+            net::uv_ip_to_ip(UvIpv4(r_addr as *uvll::sockaddr_in))\n+        }\n+    };\n+\n+    unsafe { uvll::free_sockaddr_storage(r_addr); }\n+\n+    Ok(addr)\n+\n+}\n \n pub struct UvEventLoop {\n     uvio: UvIoFactory\n@@ -323,31 +365,7 @@ impl Drop for UvTcpListener {\n \n impl RtioSocket for UvTcpListener {\n     fn socket_name(&mut self) -> Result<IpAddr, IoError> {\n-        // Allocate a sockaddr_storage\n-        // since we don't know if it's ipv4 or ipv6\n-        let r_addr = unsafe { uvll::malloc_sockaddr_storage() };\n-\n-        let r = unsafe {\n-            uvll::rust_uv_tcp_getsockname(self.watcher.native_handle(),\n-                                          r_addr as *uvll::sockaddr_storage)\n-        };\n-\n-        if r != 0 {\n-            let status = status_to_maybe_uv_error(self.watcher, r);\n-            return Err(uv_error_to_io_error(status.unwrap()));\n-        }\n-\n-        let addr = unsafe {\n-            if uvll::is_ip6_addr(r_addr as *uvll::sockaddr) {\n-                net::uv_ip_to_ip(UvIpv6(r_addr as *uvll::sockaddr_in6))\n-            } else {\n-                net::uv_ip_to_ip(UvIpv4(r_addr as *uvll::sockaddr_in))\n-            }\n-        };\n-\n-        unsafe { uvll::free_sockaddr_storage(r_addr); }\n-\n-        Ok(addr)\n+        socket_name(Tcp, self.watcher)\n     }\n }\n \n@@ -409,31 +427,7 @@ impl Drop for UvTcpStream {\n \n impl RtioSocket for UvTcpStream {\n     fn socket_name(&mut self) -> Result<IpAddr, IoError> {\n-        // Allocate a sockaddr_storage\n-        // since we don't know if it's ipv4 or ipv6\n-        let r_addr = unsafe { uvll::malloc_sockaddr_storage() };\n-\n-        let r = unsafe {\n-            uvll::rust_uv_tcp_getsockname(self.native_handle(),\n-                                          r_addr as *uvll::sockaddr_storage)\n-        };\n-\n-        if r != 0 {\n-            let status = status_to_maybe_uv_error(**self, r);\n-            return Err(uv_error_to_io_error(status.unwrap()));\n-        }\n-\n-        let addr = unsafe {\n-            if uvll::is_ip6_addr(r_addr as *uvll::sockaddr) {\n-                net::uv_ip_to_ip(UvIpv6(r_addr as *uvll::sockaddr_in6))\n-            } else {\n-                net::uv_ip_to_ip(UvIpv4(r_addr as *uvll::sockaddr_in))\n-            }\n-        };\n-\n-        unsafe { uvll::free_sockaddr_storage(r_addr); }\n-\n-        Ok(addr)\n+        socket_name(Tcp, **self)\n     }\n }\n \n@@ -510,31 +504,7 @@ impl RtioTcpStream for UvTcpStream {\n     }\n \n     fn peer_name(&mut self) -> Result<IpAddr, IoError> {\n-        // Allocate a sockaddr_storage\n-        // since we don't know if it's ipv4 or ipv6\n-        let r_addr = unsafe { uvll::malloc_sockaddr_storage() };\n-\n-        let r = unsafe {\n-            uvll::rust_uv_tcp_getpeername(self.native_handle(),\n-                                          r_addr as *uvll::sockaddr_storage)\n-        };\n-\n-        if r != 0 {\n-            let status = status_to_maybe_uv_error(**self, r);\n-            return Err(uv_error_to_io_error(status.unwrap()));\n-        }\n-\n-        let addr = unsafe {\n-            if uvll::is_ip6_addr(r_addr as *uvll::sockaddr) {\n-                net::uv_ip_to_ip(UvIpv6(r_addr as *uvll::sockaddr_in6))\n-            } else {\n-                net::uv_ip_to_ip(UvIpv4(r_addr as *uvll::sockaddr_in))\n-            }\n-        };\n-\n-        unsafe { uvll::free_sockaddr_storage(r_addr); }\n-\n-        Ok(addr)\n+        socket_name(TcpPeer, **self)\n     }\n \n     // XXX implement\n@@ -562,31 +532,7 @@ impl Drop for UvUdpSocket {\n \n impl RtioSocket for UvUdpSocket {\n     fn socket_name(&mut self) -> Result<IpAddr, IoError> {\n-        // Allocate a sockaddr_storage\n-        // since we don't know if it's ipv4 or ipv6\n-        let r_addr = unsafe { uvll::malloc_sockaddr_storage() };\n-\n-        let r = unsafe {\n-            uvll::rust_uv_udp_getsockname(self.native_handle(),\n-                                          r_addr as *uvll::sockaddr_storage)\n-        };\n-\n-        if r != 0 {\n-            let status = status_to_maybe_uv_error(**self, r);\n-            return Err(uv_error_to_io_error(status.unwrap()));\n-        }\n-\n-        let addr = unsafe {\n-            if uvll::is_ip6_addr(r_addr as *uvll::sockaddr) {\n-                net::uv_ip_to_ip(UvIpv6(r_addr as *uvll::sockaddr_in6))\n-            } else {\n-                net::uv_ip_to_ip(UvIpv4(r_addr as *uvll::sockaddr_in))\n-            }\n-        };\n-\n-        unsafe { uvll::free_sockaddr_storage(r_addr); }\n-\n-        Ok(addr)\n+        socket_name(Udp, **self)\n     }\n }\n "}]}