{"sha": "0bb72a2c66d0daa417baa27eaf2d276d835b87a2", "node_id": "C_kwDOAAsO6NoAKDBiYjcyYTJjNjZkMGRhYTQxN2JhYTI3ZWFmMmQyNzZkODM1Yjg3YTI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-18T22:23:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-18T22:23:03Z"}, "message": "Rollup merge of #91675 - ivanloz:memtagsan, r=nagisa\n\nAdd MemTagSanitizer Support\n\nAdd support for the LLVM [MemTagSanitizer](https://llvm.org/docs/MemTagSanitizer.html).\n\nOn hardware which supports it (see caveats below), the MemTagSanitizer can catch bugs similar to AddressSanitizer and HardwareAddressSanitizer, but with lower overhead.\n\nOn a tag mismatch, a SIGSEGV is signaled with code SEGV_MTESERR / SEGV_MTEAERR.\n\n# Usage\n\n`-Zsanitizer=memtag -C target-feature=\"+mte\"`\n\n# Comments/Caveats\n\n* MemTagSanitizer is only supported on AArch64 targets with hardware support\n* Requires `-C target-feature=\"+mte\"`\n* LLVM MemTagSanitizer currently only performs stack tagging.\n\n# TODO\n\n* Tests\n* Example", "tree": {"sha": "7a60885694e580e76b90562ba1df9557837151e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a60885694e580e76b90562ba1df9557837151e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bb72a2c66d0daa417baa27eaf2d276d835b87a2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiEBxHCRBK7hj4Ov3rIwAA5V0IAEPsONlZD4BAkBuwnm5gJPj3\n+U2xHuTcS7m8iDm/4WIGEpXi8zPSwT7dYS7/hSn1AwKVtUFXy9HLPji4kwGOaXO2\n8/Z4OQfQWe/gyInZ8dWqdwUuDjaLZjFDeMqNnXE5asH518CQ71Np8NK46SOWuUTy\nJdsWUYTrznwCd7tspc8jtV6sKbMIJd0bR3KZGX//QmdwlVoVoVhsQIV3Hj3nKHbu\nMqJ0fsEUgXeoSPZw5I1Xe4NB4TKJUaRpj0+sD7BaAx7vlNDImKc5xNDrXxsGL4G3\n2LtNGvKDfUT4q/OUyVZR0Z6P1ByTFs5BLA9lz1FkQfTh+kHegbQAZMWvX/WiE7s=\n=dzFs\n-----END PGP SIGNATURE-----\n", "payload": "tree 7a60885694e580e76b90562ba1df9557837151e6\nparent f8b83a2aa60d60b60386ef460071261963c8b988\nparent 568aeda9e955ca2a4c043bc2ae7f854e60f6103a\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1645222983 +0100\ncommitter GitHub <noreply@github.com> 1645222983 +0100\n\nRollup merge of #91675 - ivanloz:memtagsan, r=nagisa\n\nAdd MemTagSanitizer Support\n\nAdd support for the LLVM [MemTagSanitizer](https://llvm.org/docs/MemTagSanitizer.html).\n\nOn hardware which supports it (see caveats below), the MemTagSanitizer can catch bugs similar to AddressSanitizer and HardwareAddressSanitizer, but with lower overhead.\n\nOn a tag mismatch, a SIGSEGV is signaled with code SEGV_MTESERR / SEGV_MTEAERR.\n\n# Usage\n\n`-Zsanitizer=memtag -C target-feature=\"+mte\"`\n\n# Comments/Caveats\n\n* MemTagSanitizer is only supported on AArch64 targets with hardware support\n* Requires `-C target-feature=\"+mte\"`\n* LLVM MemTagSanitizer currently only performs stack tagging.\n\n# TODO\n\n* Tests\n* Example\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bb72a2c66d0daa417baa27eaf2d276d835b87a2", "html_url": "https://github.com/rust-lang/rust/commit/0bb72a2c66d0daa417baa27eaf2d276d835b87a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bb72a2c66d0daa417baa27eaf2d276d835b87a2/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8b83a2aa60d60b60386ef460071261963c8b988", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8b83a2aa60d60b60386ef460071261963c8b988", "html_url": "https://github.com/rust-lang/rust/commit/f8b83a2aa60d60b60386ef460071261963c8b988"}, {"sha": "568aeda9e955ca2a4c043bc2ae7f854e60f6103a", "url": "https://api.github.com/repos/rust-lang/rust/commits/568aeda9e955ca2a4c043bc2ae7f854e60f6103a", "html_url": "https://github.com/rust-lang/rust/commit/568aeda9e955ca2a4c043bc2ae7f854e60f6103a"}], "stats": {"total": 73, "additions": 67, "deletions": 6}, "files": [{"sha": "f6d7221d4e9e8afa56a13160b7eb364b06b7ab79", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0bb72a2c66d0daa417baa27eaf2d276d835b87a2/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bb72a2c66d0daa417baa27eaf2d276d835b87a2/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=0bb72a2c66d0daa417baa27eaf2d276d835b87a2", "patch": "@@ -55,6 +55,19 @@ pub fn sanitize<'ll>(cx: &CodegenCx<'ll, '_>, no_sanitize: SanitizerSet, llfn: &\n     if enabled.contains(SanitizerSet::HWADDRESS) {\n         llvm::Attribute::SanitizeHWAddress.apply_llfn(Function, llfn);\n     }\n+    if enabled.contains(SanitizerSet::MEMTAG) {\n+        // Check to make sure the mte target feature is actually enabled.\n+        let sess = cx.tcx.sess;\n+        let features = llvm_util::llvm_global_features(sess).join(\",\");\n+        let mte_feature_enabled = features.rfind(\"+mte\");\n+        let mte_feature_disabled = features.rfind(\"-mte\");\n+\n+        if mte_feature_enabled.is_none() || (mte_feature_disabled > mte_feature_enabled) {\n+            sess.err(\"`-Zsanitizer=memtag` requires `-Ctarget-feature=+mte`\");\n+        }\n+\n+        llvm::Attribute::SanitizeMemTag.apply_llfn(Function, llfn);\n+    }\n }\n \n /// Tell LLVM to emit or not emit the information necessary to unwind the stack for the function."}, {"sha": "657f1fcf31e838fd496b3f105203837e61304396", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0bb72a2c66d0daa417baa27eaf2d276d835b87a2/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bb72a2c66d0daa417baa27eaf2d276d835b87a2/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=0bb72a2c66d0daa417baa27eaf2d276d835b87a2", "patch": "@@ -190,6 +190,7 @@ pub enum Attribute {\n     StackProtectStrong = 31,\n     StackProtect = 32,\n     NoUndef = 33,\n+    SanitizeMemTag = 34,\n }\n \n /// LLVMIntPredicate"}, {"sha": "a2b0e9b4d29d861fc7d5634b29828681c71f4a6e", "filename": "compiler/rustc_llvm/llvm-wrapper/LLVMWrapper.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0bb72a2c66d0daa417baa27eaf2d276d835b87a2/compiler%2Frustc_llvm%2Fllvm-wrapper%2FLLVMWrapper.h", "raw_url": "https://github.com/rust-lang/rust/raw/0bb72a2c66d0daa417baa27eaf2d276d835b87a2/compiler%2Frustc_llvm%2Fllvm-wrapper%2FLLVMWrapper.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FLLVMWrapper.h?ref=0bb72a2c66d0daa417baa27eaf2d276d835b87a2", "patch": "@@ -83,6 +83,7 @@ enum LLVMRustAttribute {\n   StackProtectStrong = 31,\n   StackProtect = 32,\n   NoUndef = 33,\n+  SanitizeMemTag = 34,\n };\n \n typedef struct OpaqueRustString *RustStringRef;"}, {"sha": "c8f31adbfd9ffb6444f3d7567b07a78393a198e1", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0bb72a2c66d0daa417baa27eaf2d276d835b87a2/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/0bb72a2c66d0daa417baa27eaf2d276d835b87a2/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=0bb72a2c66d0daa417baa27eaf2d276d835b87a2", "patch": "@@ -226,6 +226,8 @@ static Attribute::AttrKind fromRust(LLVMRustAttribute Kind) {\n     return Attribute::StackProtect;\n   case NoUndef:\n     return Attribute::NoUndef;\n+  case SanitizeMemTag:\n+    return Attribute::SanitizeMemTag;\n   }\n   report_fatal_error(\"bad AttributeKind\");\n }"}, {"sha": "0a4bd23937dec6eb356181dbaadacf93874d996b", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0bb72a2c66d0daa417baa27eaf2d276d835b87a2/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bb72a2c66d0daa417baa27eaf2d276d835b87a2/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=0bb72a2c66d0daa417baa27eaf2d276d835b87a2", "patch": "@@ -376,7 +376,7 @@ mod desc {\n     pub const parse_panic_strategy: &str = \"either `unwind` or `abort`\";\n     pub const parse_opt_panic_strategy: &str = parse_panic_strategy;\n     pub const parse_relro_level: &str = \"one of: `full`, `partial`, or `off`\";\n-    pub const parse_sanitizers: &str = \"comma separated list of sanitizers: `address`, `cfi`, `hwaddress`, `leak`, `memory` or `thread`\";\n+    pub const parse_sanitizers: &str = \"comma separated list of sanitizers: `address`, `cfi`, `hwaddress`, `leak`, `memory`, `memtag`, or `thread`\";\n     pub const parse_sanitizer_memory_track_origins: &str = \"0, 1, or 2\";\n     pub const parse_cfguard: &str =\n         \"either a boolean (`yes`, `no`, `on`, `off`, etc), `checks`, or `nochecks`\";\n@@ -639,6 +639,7 @@ mod parse {\n                     \"cfi\" => SanitizerSet::CFI,\n                     \"leak\" => SanitizerSet::LEAK,\n                     \"memory\" => SanitizerSet::MEMORY,\n+                    \"memtag\" => SanitizerSet::MEMTAG,\n                     \"thread\" => SanitizerSet::THREAD,\n                     \"hwaddress\" => SanitizerSet::HWADDRESS,\n                     _ => return false,"}, {"sha": "5220c884644fe4fe00d419afe9ae9e73da25f120", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0bb72a2c66d0daa417baa27eaf2d276d835b87a2/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bb72a2c66d0daa417baa27eaf2d276d835b87a2/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=0bb72a2c66d0daa417baa27eaf2d276d835b87a2", "patch": "@@ -876,6 +876,7 @@ symbols! {\n         mem_zeroed,\n         member_constraints,\n         memory,\n+        memtag,\n         message,\n         meta,\n         metadata_type,"}, {"sha": "5692925f63beb2057fe5841634de915cad2e0898", "filename": "compiler/rustc_target/src/spec/aarch64_linux_android.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0bb72a2c66d0daa417baa27eaf2d276d835b87a2/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_linux_android.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bb72a2c66d0daa417baa27eaf2d276d835b87a2/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_linux_android.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_linux_android.rs?ref=0bb72a2c66d0daa417baa27eaf2d276d835b87a2", "patch": "@@ -14,7 +14,9 @@ pub fn target() -> Target {\n             // As documented in https://developer.android.com/ndk/guides/cpu-features.html\n             // the neon (ASIMD) and FP must exist on all android aarch64 targets.\n             features: \"+neon,+fp-armv8\".to_string(),\n-            supported_sanitizers: SanitizerSet::CFI | SanitizerSet::HWADDRESS,\n+            supported_sanitizers: SanitizerSet::CFI\n+                | SanitizerSet::HWADDRESS\n+                | SanitizerSet::MEMTAG,\n             ..super::android_base::opts()\n         },\n     }"}, {"sha": "974a5b84d1dc44ec56d6657428333ff44b5123cd", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0bb72a2c66d0daa417baa27eaf2d276d835b87a2/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bb72a2c66d0daa417baa27eaf2d276d835b87a2/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_gnu.rs?ref=0bb72a2c66d0daa417baa27eaf2d276d835b87a2", "patch": "@@ -14,6 +14,7 @@ pub fn target() -> Target {\n                 | SanitizerSet::CFI\n                 | SanitizerSet::LEAK\n                 | SanitizerSet::MEMORY\n+                | SanitizerSet::MEMTAG\n                 | SanitizerSet::THREAD\n                 | SanitizerSet::HWADDRESS,\n             ..super::linux_gnu_base::opts()"}, {"sha": "92678aed5b1a291dcc0fd808793f90e30e22668c", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0bb72a2c66d0daa417baa27eaf2d276d835b87a2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bb72a2c66d0daa417baa27eaf2d276d835b87a2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=0bb72a2c66d0daa417baa27eaf2d276d835b87a2", "patch": "@@ -606,6 +606,7 @@ bitflags::bitflags! {\n         const THREAD  = 1 << 3;\n         const HWADDRESS = 1 << 4;\n         const CFI     = 1 << 5;\n+        const MEMTAG  = 1 << 6;\n     }\n }\n \n@@ -619,6 +620,7 @@ impl SanitizerSet {\n             SanitizerSet::CFI => \"cfi\",\n             SanitizerSet::LEAK => \"leak\",\n             SanitizerSet::MEMORY => \"memory\",\n+            SanitizerSet::MEMTAG => \"memtag\",\n             SanitizerSet::THREAD => \"thread\",\n             SanitizerSet::HWADDRESS => \"hwaddress\",\n             _ => return None,\n@@ -652,6 +654,7 @@ impl IntoIterator for SanitizerSet {\n             SanitizerSet::CFI,\n             SanitizerSet::LEAK,\n             SanitizerSet::MEMORY,\n+            SanitizerSet::MEMTAG,\n             SanitizerSet::THREAD,\n             SanitizerSet::HWADDRESS,\n         ]\n@@ -1883,6 +1886,7 @@ impl Target {\n                                 Some(\"cfi\") => SanitizerSet::CFI,\n                                 Some(\"leak\") => SanitizerSet::LEAK,\n                                 Some(\"memory\") => SanitizerSet::MEMORY,\n+                                Some(\"memtag\") => SanitizerSet::MEMTAG,\n                                 Some(\"thread\") => SanitizerSet::THREAD,\n                                 Some(\"hwaddress\") => SanitizerSet::HWADDRESS,\n                                 Some(s) => return Err(format!(\"unknown sanitizer {}\", s)),"}, {"sha": "18f54eb2246bcd8c9683e2e6c248548acf39c85f", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0bb72a2c66d0daa417baa27eaf2d276d835b87a2/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bb72a2c66d0daa417baa27eaf2d276d835b87a2/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=0bb72a2c66d0daa417baa27eaf2d276d835b87a2", "patch": "@@ -3009,14 +3009,16 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n                         codegen_fn_attrs.no_sanitize |= SanitizerSet::CFI;\n                     } else if item.has_name(sym::memory) {\n                         codegen_fn_attrs.no_sanitize |= SanitizerSet::MEMORY;\n+                    } else if item.has_name(sym::memtag) {\n+                        codegen_fn_attrs.no_sanitize |= SanitizerSet::MEMTAG;\n                     } else if item.has_name(sym::thread) {\n                         codegen_fn_attrs.no_sanitize |= SanitizerSet::THREAD;\n                     } else if item.has_name(sym::hwaddress) {\n                         codegen_fn_attrs.no_sanitize |= SanitizerSet::HWADDRESS;\n                     } else {\n                         tcx.sess\n                             .struct_span_err(item.span(), \"invalid argument for `no_sanitize`\")\n-                            .note(\"expected one of: `address`, `hwaddress`, `memory` or `thread`\")\n+                            .note(\"expected one of: `address`, `cfi`, `hwaddress`, `memory`, `memtag`, or `thread`\")\n                             .emit();\n                     }\n                 }"}, {"sha": "457851b0cc7a42945fd4b6d28224297c6d25ad4f", "filename": "src/doc/unstable-book/src/compiler-flags/sanitizer.md", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0bb72a2c66d0daa417baa27eaf2d276d835b87a2/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md", "raw_url": "https://github.com/rust-lang/rust/raw/0bb72a2c66d0daa417baa27eaf2d276d835b87a2/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md?ref=0bb72a2c66d0daa417baa27eaf2d276d835b87a2", "patch": "@@ -16,11 +16,13 @@ This feature allows for use of one of following sanitizers:\n   AddressSanitizer, but based on partial hardware assistance.\n * [LeakSanitizer][clang-lsan] a run-time memory leak detector.\n * [MemorySanitizer][clang-msan] a detector of uninitialized reads.\n+* [MemTagSanitizer][clang-memtag] fast memory error detector based on\n+  Armv8.5-A Memory Tagging Extension.\n * [ThreadSanitizer][clang-tsan] a fast data race detector.\n \n To enable a sanitizer compile with `-Zsanitizer=address`,`-Zsanitizer=cfi`,\n-`-Zsanitizer=hwaddress`, `-Zsanitizer=leak`, `-Zsanitizer=memory` or\n-`-Zsanitizer=thread`.\n+`-Zsanitizer=hwaddress`, `-Zsanitizer=leak`, `-Zsanitizer=memory`,\n+`-Zsanitizer=memtag`, or `-Zsanitizer=thread`.\n \n # AddressSanitizer\n \n@@ -494,6 +496,20 @@ $ cargo run -Zbuild-std --target x86_64-unknown-linux-gnu\n     #0 0x560c04b2bc50 in memory::main::hd2333c1899d997f5 $CWD/src/main.rs:3\n ```\n \n+# MemTagSanitizer\n+\n+MemTagSanitizer detects a similar class of errors as AddressSanitizer and HardwareAddressSanitizer, but with lower overhead suitable for use as hardening for production binaries.\n+\n+MemTagSanitizer is supported on the following targets:\n+\n+* `aarch64-linux-android`\n+* `aarch64-unknown-linux-gnu`\n+\n+MemTagSanitizer requires hardware support and the `mte` target feature.\n+To enable this target feature compile with `-C target-feature=\"+mte\"`.\n+\n+More information can be found in the associated [LLVM documentation](https://llvm.org/docs/MemTagSanitizer.html).\n+\n # ThreadSanitizer\n \n ThreadSanitizer is a data race detection tool. It is supported on the following"}, {"sha": "2fd362656d4b7dd3505e870392f7d1ad0315c431", "filename": "src/test/codegen/sanitizer_memtag_attr_check.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0bb72a2c66d0daa417baa27eaf2d276d835b87a2/src%2Ftest%2Fcodegen%2Fsanitizer_memtag_attr_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bb72a2c66d0daa417baa27eaf2d276d835b87a2/src%2Ftest%2Fcodegen%2Fsanitizer_memtag_attr_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsanitizer_memtag_attr_check.rs?ref=0bb72a2c66d0daa417baa27eaf2d276d835b87a2", "patch": "@@ -0,0 +1,12 @@\n+// This tests that the sanitize_memtag attribute is\n+// applied when enabling the memtag sanitizer.\n+//\n+// needs-sanitizer-memtag\n+// compile-flags: -Zsanitizer=memtag -Ctarget-feature=+mte\n+\n+#![crate_type = \"lib\"]\n+\n+// CHECK: ; Function Attrs:{{.*}}sanitize_memtag\n+pub fn tagged() {}\n+\n+// CHECK: attributes #0 = {{.*}}sanitize_memtag"}, {"sha": "5a92555eb322e9f6de60831790288115e09d39c0", "filename": "src/test/ui/invalid/invalid-no-sanitize.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0bb72a2c66d0daa417baa27eaf2d276d835b87a2/src%2Ftest%2Fui%2Finvalid%2Finvalid-no-sanitize.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0bb72a2c66d0daa417baa27eaf2d276d835b87a2/src%2Ftest%2Fui%2Finvalid%2Finvalid-no-sanitize.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid%2Finvalid-no-sanitize.stderr?ref=0bb72a2c66d0daa417baa27eaf2d276d835b87a2", "patch": "@@ -4,7 +4,7 @@ error: invalid argument for `no_sanitize`\n LL | #[no_sanitize(brontosaurus)]\n    |               ^^^^^^^^^^^^\n    |\n-   = note: expected one of: `address`, `hwaddress`, `memory` or `thread`\n+   = note: expected one of: `address`, `cfi`, `hwaddress`, `memory`, `memtag`, or `thread`\n \n error: aborting due to previous error\n "}, {"sha": "60c94eff47a0dbf16494e6b68115b86ed7ca6d6d", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0bb72a2c66d0daa417baa27eaf2d276d835b87a2/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bb72a2c66d0daa417baa27eaf2d276d835b87a2/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=0bb72a2c66d0daa417baa27eaf2d276d835b87a2", "patch": "@@ -863,6 +863,7 @@ pub fn make_test_description<R: Read>(\n     let has_msan = util::MSAN_SUPPORTED_TARGETS.contains(&&*config.target);\n     let has_tsan = util::TSAN_SUPPORTED_TARGETS.contains(&&*config.target);\n     let has_hwasan = util::HWASAN_SUPPORTED_TARGETS.contains(&&*config.target);\n+    let has_memtag = util::MEMTAG_SUPPORTED_TARGETS.contains(&&*config.target);\n     // for `-Z gcc-ld=lld`\n     let has_rust_lld = config\n         .compile_lib_path\n@@ -899,6 +900,7 @@ pub fn make_test_description<R: Read>(\n         ignore |= !has_msan && config.parse_name_directive(ln, \"needs-sanitizer-memory\");\n         ignore |= !has_tsan && config.parse_name_directive(ln, \"needs-sanitizer-thread\");\n         ignore |= !has_hwasan && config.parse_name_directive(ln, \"needs-sanitizer-hwaddress\");\n+        ignore |= !has_memtag && config.parse_name_directive(ln, \"needs-sanitizer-memtag\");\n         ignore |= config.target_panic == PanicStrategy::Abort\n             && config.parse_name_directive(ln, \"needs-unwind\");\n         ignore |= config.target == \"wasm32-unknown-unknown\" && config.parse_check_run_results(ln);"}, {"sha": "bed509d77be77f32be5d95cebc58c214b49c3937", "filename": "src/tools/compiletest/src/util.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0bb72a2c66d0daa417baa27eaf2d276d835b87a2/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bb72a2c66d0daa417baa27eaf2d276d835b87a2/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs?ref=0bb72a2c66d0daa417baa27eaf2d276d835b87a2", "patch": "@@ -117,6 +117,9 @@ pub const TSAN_SUPPORTED_TARGETS: &[&str] = &[\n pub const HWASAN_SUPPORTED_TARGETS: &[&str] =\n     &[\"aarch64-linux-android\", \"aarch64-unknown-linux-gnu\"];\n \n+pub const MEMTAG_SUPPORTED_TARGETS: &[&str] =\n+    &[\"aarch64-linux-android\", \"aarch64-unknown-linux-gnu\"];\n+\n const BIG_ENDIAN: &[&str] = &[\n     \"aarch64_be\",\n     \"armebv7r\","}]}