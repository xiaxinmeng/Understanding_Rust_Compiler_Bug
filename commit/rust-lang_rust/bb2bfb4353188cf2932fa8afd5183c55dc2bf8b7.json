{"sha": "bb2bfb4353188cf2932fa8afd5183c55dc2bf8b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiMmJmYjQzNTMxODhjZjI5MzJmYThhZmQ1MTgzYzU1ZGMyYmY4Yjc=", "commit": {"author": {"name": "David Renshaw", "email": "dwrenshaw@gmail.com", "date": "2017-09-04T02:39:03Z"}, "committer": {"name": "David Renshaw", "email": "dwrenshaw@gmail.com", "date": "2017-09-04T02:39:03Z"}, "message": "update for upstream rename: CodeExtent -> Scope", "tree": {"sha": "2a928f286e1d2ffd60fac4db9972b297c1a234cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a928f286e1d2ffd60fac4db9972b297c1a234cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb2bfb4353188cf2932fa8afd5183c55dc2bf8b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb2bfb4353188cf2932fa8afd5183c55dc2bf8b7", "html_url": "https://github.com/rust-lang/rust/commit/bb2bfb4353188cf2932fa8afd5183c55dc2bf8b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb2bfb4353188cf2932fa8afd5183c55dc2bf8b7/comments", "author": {"login": "dwrensha", "id": 495768, "node_id": "MDQ6VXNlcjQ5NTc2OA==", "avatar_url": "https://avatars.githubusercontent.com/u/495768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dwrensha", "html_url": "https://github.com/dwrensha", "followers_url": "https://api.github.com/users/dwrensha/followers", "following_url": "https://api.github.com/users/dwrensha/following{/other_user}", "gists_url": "https://api.github.com/users/dwrensha/gists{/gist_id}", "starred_url": "https://api.github.com/users/dwrensha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dwrensha/subscriptions", "organizations_url": "https://api.github.com/users/dwrensha/orgs", "repos_url": "https://api.github.com/users/dwrensha/repos", "events_url": "https://api.github.com/users/dwrensha/events{/privacy}", "received_events_url": "https://api.github.com/users/dwrensha/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dwrensha", "id": 495768, "node_id": "MDQ6VXNlcjQ5NTc2OA==", "avatar_url": "https://avatars.githubusercontent.com/u/495768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dwrensha", "html_url": "https://github.com/dwrensha", "followers_url": "https://api.github.com/users/dwrensha/followers", "following_url": "https://api.github.com/users/dwrensha/following{/other_user}", "gists_url": "https://api.github.com/users/dwrensha/gists{/gist_id}", "starred_url": "https://api.github.com/users/dwrensha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dwrensha/subscriptions", "organizations_url": "https://api.github.com/users/dwrensha/orgs", "repos_url": "https://api.github.com/users/dwrensha/repos", "events_url": "https://api.github.com/users/dwrensha/events{/privacy}", "received_events_url": "https://api.github.com/users/dwrensha/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "324384375537ef1e40f7fad550ba1da83e2d1458", "url": "https://api.github.com/repos/rust-lang/rust/commits/324384375537ef1e40f7fad550ba1da83e2d1458", "html_url": "https://github.com/rust-lang/rust/commit/324384375537ef1e40f7fad550ba1da83e2d1458"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "44777caa4f5d2f8e085c9990a3ef27135dd03064", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb2bfb4353188cf2932fa8afd5183c55dc2bf8b7/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2bfb4353188cf2932fa8afd5183c55dc2bf8b7/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=bb2bfb4353188cf2932fa8afd5183c55dc2bf8b7", "patch": "@@ -4,7 +4,7 @@ use std::fmt::Write;\n use rustc::hir::def_id::DefId;\n use rustc::hir::map::definitions::DefPathData;\n use rustc::middle::const_val::ConstVal;\n-use rustc::middle::region::CodeExtent;\n+use rustc::middle::region;\n use rustc::mir;\n use rustc::traits::Reveal;\n use rustc::ty::layout::{self, Layout, Size, Align, HasDataLayout};\n@@ -106,7 +106,7 @@ pub enum StackPopCleanup {\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n pub struct DynamicLifetime {\n     pub frame: usize,\n-    pub region: Option<CodeExtent>, // \"None\" indicates \"until the function ends\"\n+    pub region: Option<region::Scope>, // \"None\" indicates \"until the function ends\"\n }\n \n #[derive(Copy, Clone, Debug)]"}, {"sha": "7454f1c908e0f1d34b5f16986308a355af6e8513", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bb2bfb4353188cf2932fa8afd5183c55dc2bf8b7/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2bfb4353188cf2932fa8afd5183c55dc2bf8b7/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=bb2bfb4353188cf2932fa8afd5183c55dc2bf8b7", "patch": "@@ -6,7 +6,7 @@ use std::cell::Cell;\n use rustc::ty::Instance;\n use rustc::ty::layout::{self, TargetDataLayout, HasDataLayout};\n use syntax::ast::Mutability;\n-use rustc::middle::region::CodeExtent;\n+use rustc::middle::region;\n \n use super::{EvalResult, EvalErrorKind, PrimVal, Pointer, EvalContext, DynamicLifetime, Machine,\n             RangeMap};\n@@ -26,7 +26,7 @@ pub enum AccessKind {\n struct LockInfo {\n     /// Stores for which lifetimes (of the original write lock) we got\n     /// which suspensions.\n-    suspended: HashMap<DynamicLifetime, Vec<CodeExtent>>,\n+    suspended: HashMap<DynamicLifetime, Vec<region::Scope>>,\n     /// The current state of the lock that's actually effective.\n     active: Lock,\n }\n@@ -567,7 +567,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> Memory<'a, 'tcx, M> {\n         &mut self,\n         ptr: MemoryPointer,\n         len: u64,\n-        region: Option<CodeExtent>,\n+        region: Option<region::Scope>,\n         kind: AccessKind,\n     ) -> EvalResult<'tcx> {\n         let frame = self.cur_frame;\n@@ -620,8 +620,8 @@ impl<'a, 'tcx, M: Machine<'tcx>> Memory<'a, 'tcx, M> {\n         &mut self,\n         ptr: MemoryPointer,\n         len: u64,\n-        lock_region: Option<CodeExtent>,\n-        suspend: Option<CodeExtent>,\n+        lock_region: Option<region::Scope>,\n+        suspend: Option<region::Scope>,\n     ) -> EvalResult<'tcx> {\n         assert!(len > 0);\n         let cur_frame = self.cur_frame;\n@@ -680,8 +680,8 @@ impl<'a, 'tcx, M: Machine<'tcx>> Memory<'a, 'tcx, M> {\n         &mut self,\n         ptr: MemoryPointer,\n         len: u64,\n-        lock_region: Option<CodeExtent>,\n-        suspended_region: CodeExtent,\n+        lock_region: Option<region::Scope>,\n+        suspended_region: region::Scope,\n     ) -> EvalResult<'tcx> {\n         assert!(len > 0);\n         let cur_frame = self.cur_frame;\n@@ -741,7 +741,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> Memory<'a, 'tcx, M> {\n         Ok(())\n     }\n \n-    pub(crate) fn locks_lifetime_ended(&mut self, ending_region: Option<CodeExtent>) {\n+    pub(crate) fn locks_lifetime_ended(&mut self, ending_region: Option<region::Scope>) {\n         let cur_frame = self.cur_frame;\n         trace!(\n             \"Releasing frame {} locks that expire at {:?}\","}, {"sha": "d40a2eb83a511eefa0ceef79032765d3222472de", "filename": "src/librustc_mir/interpret/validation.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bb2bfb4353188cf2932fa8afd5183c55dc2bf8b7/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2bfb4353188cf2932fa8afd5183c55dc2bf8b7/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs?ref=bb2bfb4353188cf2932fa8afd5183c55dc2bf8b7", "patch": "@@ -6,7 +6,7 @@ use rustc::ty::subst::{Substs, Subst};\n use rustc::traits;\n use rustc::infer::InferCtxt;\n use rustc::traits::Reveal;\n-use rustc::middle::region::CodeExtent;\n+use rustc::middle::region;\n \n use super::{EvalError, EvalResult, EvalErrorKind, EvalContext, DynamicLifetime, AccessKind, Value,\n             Lvalue, LvalueExtra, Machine};\n@@ -17,8 +17,8 @@ pub type ValidationQuery<'tcx> = ValidationOperand<'tcx, Lvalue>;\n enum ValidationMode {\n     Acquire,\n     /// Recover because the given region ended\n-    Recover(CodeExtent),\n-    ReleaseUntil(Option<CodeExtent>),\n+    Recover(region::Scope),\n+    ReleaseUntil(Option<region::Scope>),\n }\n \n impl ValidationMode {\n@@ -106,7 +106,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n         self.validate(query, mode)\n     }\n \n-    pub(crate) fn end_region(&mut self, ce: CodeExtent) -> EvalResult<'tcx> {\n+    pub(crate) fn end_region(&mut self, ce: region::Scope) -> EvalResult<'tcx> {\n         self.memory.locks_lifetime_ended(Some(ce));\n         // Recover suspended lvals\n         let lft = DynamicLifetime {\n@@ -268,7 +268,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n         &mut self,\n         val: Value,\n         pointee_ty: Ty<'tcx>,\n-        re: Option<CodeExtent>,\n+        re: Option<region::Scope>,\n         mutbl: Mutability,\n         mode: ValidationMode,\n     ) -> EvalResult<'tcx> {"}]}