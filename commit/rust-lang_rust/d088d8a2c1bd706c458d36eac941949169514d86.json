{"sha": "d088d8a2c1bd706c458d36eac941949169514d86", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwODhkOGEyYzFiZDcwNmM0NThkMzZlYWM5NDE5NDkxNjk1MTRkODY=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-01-16T23:47:52Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-01-16T23:47:52Z"}, "message": "Revert previous attempt at detecting unsatisfiable predicates", "tree": {"sha": "51441970320c365fdf0f88d85361d4bd36c8ffd4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51441970320c365fdf0f88d85361d4bd36c8ffd4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d088d8a2c1bd706c458d36eac941949169514d86", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl4g9jQACgkQtAh+UQ6Y\nsWQIhw//abofQIqjZjjbcp5rxRxPMNe7Gu9IX1YtKFNUot/Jmet+W4eBMBb9Noi6\nNKY/D/ORtKePyB+OXhlmRpmQALcmLtKqJfmWDRNzPXinx6T2r+Rvpoz38opNyoEm\nGZHSCaWqF5qDmCWeBUZAqHZtLNDfD8XN1j/SvqMSME3Ze3tchgQdvm20zvj13T9M\nrRhOzWe3S4Z+L51Dzzq5puhcuJWcLUNTuE1KZ3MXv6Hg3aHKE7iaQR8de3wWOViB\nPROeriP8hNdp/SaiAmwhYO9/zmHX/4Bw3XesZi5QI7Wbpw+/xKDZWo9sRI2YJFVq\n8J26SGK8o7bPXSBmyPxyDheCJ6uYPiZDD6LbTWEecjN+xsOxHszIf4nXZGJEyCvj\ncNkT3l60pwM7mydvYwHIKWhEdhhCoXWvZ1Neahk7sIaT+VRNbSRHDUQ2sEv/klaz\ndxB4oavi+JfzG7uT1t0nFJT8fvtnck/5gtkJZEbwBEUnnn56mtkGutoYe2QAtIMC\nw6cYUCMI2yqXPTfxP//nxRx/XgjS4wtkxT8LeAfcyD92wvG3tRuXUrfvDL+Pvwts\numat9411LWEfGfIW7w5WmG5iSX201YR238S478quaDxdOgEIAaJyNft9LACtuhUd\n+O273161VnXbPnzCwdqYGQuHvsEhyvZoRKiXKkiSuCPPLHJoVIc=\n=M58u\n-----END PGP SIGNATURE-----", "payload": "tree 51441970320c365fdf0f88d85361d4bd36c8ffd4\nparent 48840618382eccb8a799320c8e5d08e3b52f4c42\nauthor Aaron Hill <aa1ronham@gmail.com> 1579218472 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1579218472 -0500\n\nRevert previous attempt at detecting unsatisfiable predicates\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d088d8a2c1bd706c458d36eac941949169514d86", "html_url": "https://github.com/rust-lang/rust/commit/d088d8a2c1bd706c458d36eac941949169514d86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d088d8a2c1bd706c458d36eac941949169514d86/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48840618382eccb8a799320c8e5d08e3b52f4c42", "url": "https://api.github.com/repos/rust-lang/rust/commits/48840618382eccb8a799320c8e5d08e3b52f4c42", "html_url": "https://github.com/rust-lang/rust/commit/48840618382eccb8a799320c8e5d08e3b52f4c42"}], "stats": {"total": 64, "additions": 14, "deletions": 50}, "files": [{"sha": "51ce575e51f3b61aaec5fdd72cfc51d831a1abab", "filename": "src/librustc/mir/mono.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d088d8a2c1bd706c458d36eac941949169514d86/src%2Flibrustc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d088d8a2c1bd706c458d36eac941949169514d86/src%2Flibrustc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmono.rs?ref=d088d8a2c1bd706c458d36eac941949169514d86", "patch": "@@ -1,7 +1,6 @@\n use crate::dep_graph::{DepConstructor, DepNode, WorkProduct, WorkProductId};\n use crate::ich::{Fingerprint, NodeIdHashingMode, StableHashingContext};\n use crate::session::config::OptLevel;\n-use crate::traits::TraitQueryMode;\n use crate::ty::print::obsolete::DefPathBasedNames;\n use crate::ty::{subst::InternalSubsts, Instance, InstanceDef, SymbolName, TyCtxt};\n use rustc_data_structures::base_n;\n@@ -168,9 +167,7 @@ impl<'tcx> MonoItem<'tcx> {\n             MonoItem::GlobalAsm(..) => return true,\n         };\n \n-        // We shouldn't encounter any overflow here, so we use TraitQueryMode::Standard\\\n-        // to report an error if overflow somehow occurs.\n-        tcx.substitute_normalize_and_test_predicates((def_id, &substs, TraitQueryMode::Standard))\n+        tcx.substitute_normalize_and_test_predicates((def_id, &substs))\n     }\n \n     pub fn to_string(&self, tcx: TyCtxt<'tcx>, debug: bool) -> String {"}, {"sha": "f4c262fbac1d47d40b8d25b451f2c947761baab2", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d088d8a2c1bd706c458d36eac941949169514d86/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d088d8a2c1bd706c458d36eac941949169514d86/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=d088d8a2c1bd706c458d36eac941949169514d86", "patch": "@@ -1148,11 +1148,11 @@ rustc_queries! {\n             desc { \"normalizing `{:?}`\", goal }\n         }\n \n-        query substitute_normalize_and_test_predicates(key: (DefId, SubstsRef<'tcx>, traits::TraitQueryMode)) -> bool {\n+        query substitute_normalize_and_test_predicates(key: (DefId, SubstsRef<'tcx>)) -> bool {\n             no_force\n             desc { |tcx|\n-                \"testing substituted normalized predicates in mode {:?}:`{}`\",\n-                key.2, tcx.def_path_str(key.0)\n+                \"testing substituted normalized predicates:`{}`\",\n+                tcx.def_path_str(key.0)\n             }\n         }\n "}, {"sha": "46ece6fc4059364039f0d72d885d6411476a39b3", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 2, "deletions": 22, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d088d8a2c1bd706c458d36eac941949169514d86/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d088d8a2c1bd706c458d36eac941949169514d86/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=d088d8a2c1bd706c458d36eac941949169514d86", "patch": "@@ -16,7 +16,6 @@ use super::CodeSelectionError;\n use super::{ConstEvalFailure, Unimplemented};\n use super::{FulfillmentError, FulfillmentErrorCode};\n use super::{ObligationCause, PredicateObligation};\n-use crate::traits::TraitQueryMode;\n \n impl<'tcx> ForestObligation for PendingPredicateObligation<'tcx> {\n     type Predicate = ty::Predicate<'tcx>;\n@@ -63,9 +62,6 @@ pub struct FulfillmentContext<'tcx> {\n     // a snapshot (they don't *straddle* a snapshot, so there\n     // is no trouble there).\n     usable_in_snapshot: bool,\n-\n-    // The `TraitQueryMode` used when constructing a `SelectionContext`\n-    query_mode: TraitQueryMode,\n }\n \n #[derive(Clone, Debug)]\n@@ -79,26 +75,12 @@ pub struct PendingPredicateObligation<'tcx> {\n static_assert_size!(PendingPredicateObligation<'_>, 136);\n \n impl<'a, 'tcx> FulfillmentContext<'tcx> {\n-    /// Creates a new fulfillment context with `TraitQueryMode::Standard`\n-    /// You almost always want to use this instead of `with_query_mode`\n+    /// Creates a new fulfillment context.\n     pub fn new() -> FulfillmentContext<'tcx> {\n         FulfillmentContext {\n             predicates: ObligationForest::new(),\n             register_region_obligations: true,\n             usable_in_snapshot: false,\n-            query_mode: TraitQueryMode::Standard,\n-        }\n-    }\n-\n-    /// Creates a new fulfillment context with the specified query mode.\n-    /// This should only be used when you want to ignore overflow,\n-    /// rather than reporting it as an error.\n-    pub fn with_query_mode(query_mode: TraitQueryMode) -> FulfillmentContext<'tcx> {\n-        FulfillmentContext {\n-            predicates: ObligationForest::new(),\n-            register_region_obligations: true,\n-            usable_in_snapshot: false,\n-            query_mode,\n         }\n     }\n \n@@ -107,7 +89,6 @@ impl<'a, 'tcx> FulfillmentContext<'tcx> {\n             predicates: ObligationForest::new(),\n             register_region_obligations: true,\n             usable_in_snapshot: true,\n-            query_mode: TraitQueryMode::Standard,\n         }\n     }\n \n@@ -116,7 +97,6 @@ impl<'a, 'tcx> FulfillmentContext<'tcx> {\n             predicates: ObligationForest::new(),\n             register_region_obligations: false,\n             usable_in_snapshot: false,\n-            query_mode: TraitQueryMode::Standard,\n         }\n     }\n \n@@ -237,7 +217,7 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n         &mut self,\n         infcx: &InferCtxt<'_, 'tcx>,\n     ) -> Result<(), Vec<FulfillmentError<'tcx>>> {\n-        let mut selcx = SelectionContext::with_query_mode(infcx, self.query_mode);\n+        let mut selcx = SelectionContext::new(infcx);\n         self.select(&mut selcx)\n     }\n "}, {"sha": "7509c2251f083d4dc211f2a8a5a35fd1a0c2e0ae", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d088d8a2c1bd706c458d36eac941949169514d86/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d088d8a2c1bd706c458d36eac941949169514d86/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=d088d8a2c1bd706c458d36eac941949169514d86", "patch": "@@ -95,7 +95,7 @@ pub enum IntercrateMode {\n }\n \n /// The mode that trait queries run in.\n-#[derive(Copy, Clone, PartialEq, Eq, Debug, Hash, HashStable)]\n+#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n pub enum TraitQueryMode {\n     // Standard/un-canonicalized queries get accurate\n     // spans etc. passed in and hence can do reasonable\n@@ -1014,17 +1014,16 @@ where\n /// environment. If this returns false, then either normalize\n /// encountered an error or one of the predicates did not hold. Used\n /// when creating vtables to check for unsatisfiable methods.\n-fn normalize_and_test_predicates<'tcx>(\n+pub fn normalize_and_test_predicates<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     predicates: Vec<ty::Predicate<'tcx>>,\n-    mode: TraitQueryMode,\n ) -> bool {\n-    debug!(\"normalize_and_test_predicates(predicates={:?}, mode={:?})\", predicates, mode);\n+    debug!(\"normalize_and_test_predicates(predicates={:?})\", predicates);\n \n     let result = tcx.infer_ctxt().enter(|infcx| {\n         let param_env = ty::ParamEnv::reveal_all();\n-        let mut selcx = SelectionContext::with_query_mode(&infcx, mode);\n-        let mut fulfill_cx = FulfillmentContext::with_query_mode(mode);\n+        let mut selcx = SelectionContext::new(&infcx);\n+        let mut fulfill_cx = FulfillmentContext::new();\n         let cause = ObligationCause::dummy();\n         let Normalized { value: predicates, obligations } =\n             normalize(&mut selcx, param_env, cause.clone(), &predicates);\n@@ -1044,12 +1043,12 @@ fn normalize_and_test_predicates<'tcx>(\n \n fn substitute_normalize_and_test_predicates<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    key: (DefId, SubstsRef<'tcx>, TraitQueryMode),\n+    key: (DefId, SubstsRef<'tcx>),\n ) -> bool {\n     debug!(\"substitute_normalize_and_test_predicates(key={:?})\", key);\n \n     let predicates = tcx.predicates_of(key.0).instantiate(tcx, key.1).predicates;\n-    let result = normalize_and_test_predicates(tcx, predicates, key.2);\n+    let result = normalize_and_test_predicates(tcx, predicates);\n \n     debug!(\"substitute_normalize_and_test_predicates(key={:?}) = {:?}\", key, result);\n     result\n@@ -1102,10 +1101,7 @@ fn vtable_methods<'tcx>(\n             // Note that this method could then never be called, so we\n             // do not want to try and codegen it, in that case (see #23435).\n             let predicates = tcx.predicates_of(def_id).instantiate_own(tcx, substs);\n-            // We don't expect overflow here, so report an error if it somehow ends\n-            // up happening.\n-            if !normalize_and_test_predicates(tcx, predicates.predicates, TraitQueryMode::Standard)\n-            {\n+            if !normalize_and_test_predicates(tcx, predicates.predicates) {\n                 debug!(\"vtable_methods: predicates do not hold\");\n                 return None;\n             }"}, {"sha": "cbf335ad607ef3e9f1ae84ed3825cde3a0f32df9", "filename": "src/librustc/ty/query/keys.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d088d8a2c1bd706c458d36eac941949169514d86/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d088d8a2c1bd706c458d36eac941949169514d86/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs?ref=d088d8a2c1bd706c458d36eac941949169514d86", "patch": "@@ -125,15 +125,6 @@ impl<'tcx> Key for (DefId, SubstsRef<'tcx>) {\n     }\n }\n \n-impl<'tcx> Key for (DefId, SubstsRef<'tcx>, traits::TraitQueryMode) {\n-    fn query_crate(&self) -> CrateNum {\n-        self.0.krate\n-    }\n-    fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n-        self.0.default_span(tcx)\n-    }\n-}\n-\n impl<'tcx> Key for (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>) {\n     fn query_crate(&self) -> CrateNum {\n         self.1.def_id().krate"}]}