{"sha": "86af7135aeb5cd326c4f181134d51b856876050c", "node_id": "C_kwDOAAsO6NoAKDg2YWY3MTM1YWViNWNkMzI2YzRmMTgxMTM0ZDUxYjg1Njg3NjA1MGM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-07-10T09:52:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-10T09:52:17Z"}, "message": "Rollup merge of #99103 - TaKO8Ki:avoid-&str-to-string-conversions, r=oli-obk\n\nAvoid some `&str` to `String` conversions\n\nThis patch removes some `&str` to `String` conversions.", "tree": {"sha": "da329a7586d7b3da6fad8cbe9fc39eec779d62de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da329a7586d7b3da6fad8cbe9fc39eec779d62de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86af7135aeb5cd326c4f181134d51b856876050c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiyqFRCRBK7hj4Ov3rIwAAGg4IACps+uWK6MNMvhBDYS/6w6Gk\ngNgshLpY5kYaN6PReG4ACipEzbXgX0UY4y/bYTX3XoUqVi0i36uJ8n3G4KDq299L\np18GxbNQTzOD7LpuDsT+Ti2tzSH/6P2i5nPQubs/q7HxABMxhz9vLT5oVsFFNZIX\n0+PdWqdTHPupDY68jJhTguRIRficfzR8EELhnQyJlTZBOCJY/a4o+7vUEcymHC+r\nFZqVw2WIBkuLXDSa/O/pb7T5ByJovkAFBl/Cj2PlA0LXi4wC/FNf+aZGwsa+1TvT\ndf9LpEgRu9GYo2gaJbkELRdN4mbUSQ1+nVqwt9FkYTlxVWcIjYkQjK9JV10gHgg=\n=4eL2\n-----END PGP SIGNATURE-----\n", "payload": "tree da329a7586d7b3da6fad8cbe9fc39eec779d62de\nparent 76f968dadc75feb5580217a83d382ddb9ea15a8f\nparent bda83e6543fa89fd64efafdfb93924fede792850\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1657446737 +0200\ncommitter GitHub <noreply@github.com> 1657446737 +0200\n\nRollup merge of #99103 - TaKO8Ki:avoid-&str-to-string-conversions, r=oli-obk\n\nAvoid some `&str` to `String` conversions\n\nThis patch removes some `&str` to `String` conversions.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86af7135aeb5cd326c4f181134d51b856876050c", "html_url": "https://github.com/rust-lang/rust/commit/86af7135aeb5cd326c4f181134d51b856876050c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86af7135aeb5cd326c4f181134d51b856876050c/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76f968dadc75feb5580217a83d382ddb9ea15a8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/76f968dadc75feb5580217a83d382ddb9ea15a8f", "html_url": "https://github.com/rust-lang/rust/commit/76f968dadc75feb5580217a83d382ddb9ea15a8f"}, {"sha": "bda83e6543fa89fd64efafdfb93924fede792850", "url": "https://api.github.com/repos/rust-lang/rust/commits/bda83e6543fa89fd64efafdfb93924fede792850", "html_url": "https://github.com/rust-lang/rust/commit/bda83e6543fa89fd64efafdfb93924fede792850"}], "stats": {"total": 57, "additions": 23, "deletions": 34}, "files": [{"sha": "d296a1a0ac61bd31a1e3e2745a867e94ccecf713", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/86af7135aeb5cd326c4f181134d51b856876050c/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86af7135aeb5cd326c4f181134d51b856876050c/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=86af7135aeb5cd326c4f181134d51b856876050c", "patch": "@@ -597,16 +597,16 @@ impl UseSpans<'_> {\n     }\n \n     /// Describe the span associated with a use of a place.\n-    pub(super) fn describe(&self) -> String {\n+    pub(super) fn describe(&self) -> &str {\n         match *self {\n             UseSpans::ClosureUse { generator_kind, .. } => {\n                 if generator_kind.is_some() {\n-                    \" in generator\".to_string()\n+                    \" in generator\"\n                 } else {\n-                    \" in closure\".to_string()\n+                    \" in closure\"\n                 }\n             }\n-            _ => String::new(),\n+            _ => \"\",\n         }\n     }\n "}, {"sha": "26314e3fe8eacf7d1e2d60b0a9671d348c73d102", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/86af7135aeb5cd326c4f181134d51b856876050c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86af7135aeb5cd326c4f181134d51b856876050c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=86af7135aeb5cd326c4f181134d51b856876050c", "patch": "@@ -1824,12 +1824,10 @@ impl BorrowKind {\n         }\n     }\n \n-    pub fn describe_mutability(&self) -> String {\n+    pub fn describe_mutability(&self) -> &str {\n         match *self {\n-            BorrowKind::Shared | BorrowKind::Shallow | BorrowKind::Unique => {\n-                \"immutable\".to_string()\n-            }\n-            BorrowKind::Mut { .. } => \"mutable\".to_string(),\n+            BorrowKind::Shared | BorrowKind::Shallow | BorrowKind::Unique => \"immutable\",\n+            BorrowKind::Mut { .. } => \"mutable\",\n         }\n     }\n }"}, {"sha": "2eb38941f1a5084b993f20d724361d4ab67cec24", "filename": "compiler/rustc_mir_transform/src/check_packed_ref.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86af7135aeb5cd326c4f181134d51b856876050c/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_packed_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86af7135aeb5cd326c4f181134d51b856876050c/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_packed_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_packed_ref.rs?ref=86af7135aeb5cd326c4f181134d51b856876050c", "patch": "@@ -39,13 +39,11 @@ fn unsafe_derive_on_repr_packed(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n         let message = if tcx.generics_of(def_id).own_requires_monomorphization() {\n             \"`#[derive]` can't be used on a `#[repr(packed)]` struct with \\\n              type or const parameters (error E0133)\"\n-                .to_string()\n         } else {\n             \"`#[derive]` can't be used on a `#[repr(packed)]` struct that \\\n              does not derive Copy (error E0133)\"\n-                .to_string()\n         };\n-        lint.build(&message).emit();\n+        lint.build(message).emit();\n     });\n }\n "}, {"sha": "b4a39982b74b0a62eb4fb65e7f560140cb603df2", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/86af7135aeb5cd326c4f181134d51b856876050c/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86af7135aeb5cd326c4f181134d51b856876050c/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=86af7135aeb5cd326c4f181134d51b856876050c", "patch": "@@ -943,10 +943,7 @@ impl<'a> Resolver<'a> {\n                     \"generic parameters with a default cannot use \\\n                                                 forward declared identifiers\"\n                 );\n-                err.span_label(\n-                    span,\n-                    \"defaulted generic parameters cannot be forward declared\".to_string(),\n-                );\n+                err.span_label(span, \"defaulted generic parameters cannot be forward declared\");\n                 err\n             }\n             ResolutionError::ParamInTyOfConstParam(name) => {"}, {"sha": "677d7036b2f1be54064dc27ce02823ce18f1bfbb", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/86af7135aeb5cd326c4f181134d51b856876050c/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86af7135aeb5cd326c4f181134d51b856876050c/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=86af7135aeb5cd326c4f181134d51b856876050c", "patch": "@@ -349,10 +349,8 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n \n             err.code(rustc_errors::error_code!(E0424));\n             err.span_label(span, match source {\n-                PathSource::Pat => \"`self` value is a keyword and may not be bound to variables or shadowed\"\n-                                   .to_string(),\n-                _ => \"`self` value is a keyword only available in methods with a `self` parameter\"\n-                     .to_string(),\n+                PathSource::Pat => \"`self` value is a keyword and may not be bound to variables or shadowed\",\n+                _ => \"`self` value is a keyword only available in methods with a `self` parameter\",\n             });\n             if let Some((fn_kind, span)) = &self.diagnostic_metadata.current_function {\n                 // The current function has a `self' parameter, but we were unable to resolve"}, {"sha": "3df4dfb74b319921c507dd3b647e5360dae9efbb", "filename": "compiler/rustc_span/src/hygiene.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/86af7135aeb5cd326c4f181134d51b856876050c/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86af7135aeb5cd326c4f181134d51b856876050c/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs?ref=86af7135aeb5cd326c4f181134d51b856876050c", "patch": "@@ -629,8 +629,7 @@ pub fn debug_hygiene_data(verbose: bool) -> String {\n         if verbose {\n             format!(\"{:#?}\", data)\n         } else {\n-            let mut s = String::from(\"\");\n-            s.push_str(\"Expansions:\");\n+            let mut s = String::from(\"Expansions:\");\n             let mut debug_expn_data = |(id, expn_data): (&ExpnId, &ExpnData)| {\n                 s.push_str(&format!(\n                     \"\\n{:?}: parent: {:?}, call_site_ctxt: {:?}, def_site_ctxt: {:?}, kind: {:?}\","}, {"sha": "13848d378909d9f3a8536f96dab23bbf74ac0978", "filename": "compiler/rustc_trait_selection/src/traits/specialize/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86af7135aeb5cd326c4f181134d51b856876050c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86af7135aeb5cd326c4f181134d51b856876050c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs?ref=86af7135aeb5cd326c4f181134d51b856876050c", "patch": "@@ -406,7 +406,7 @@ fn report_conflicting_impls(\n         let mut err = err.build(&msg);\n         match tcx.span_of_impl(overlap.with_impl) {\n             Ok(span) => {\n-                err.span_label(span, \"first implementation here\".to_string());\n+                err.span_label(span, \"first implementation here\");\n \n                 err.span_label(\n                     impl_span,"}, {"sha": "79e402b542a6022dc362805294f1dccdaec68aac", "filename": "compiler/rustc_typeck/src/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86af7135aeb5cd326c4f181134d51b856876050c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86af7135aeb5cd326c4f181134d51b856876050c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs?ref=86af7135aeb5cd326c4f181134d51b856876050c", "patch": "@@ -263,7 +263,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 } else if let ExprKind::Block(block, _) = &then_expr.kind\n                     && let Some(expr) = &block.expr\n                 {\n-                    err.span_label(expr.span, \"found here\".to_string());\n+                    err.span_label(expr.span, \"found here\");\n                 }\n                 err.note(\"`if` expressions without `else` evaluate to `()`\");\n                 err.help(\"consider adding an `else` block that evaluates to the expected type\");"}, {"sha": "eb7e52c5ed37651883256c324c084190d524e609", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86af7135aeb5cd326c4f181134d51b856876050c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86af7135aeb5cd326c4f181134d51b856876050c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=86af7135aeb5cd326c4f181134d51b856876050c", "patch": "@@ -317,9 +317,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 .tcx\n                                 .is_diagnostic_item(sym::Result, expected_adt.did())\n                             {\n-                                vec![\"Ok(())\".to_string()]\n+                                vec![\"Ok(())\"]\n                             } else if self.tcx.is_diagnostic_item(sym::Option, expected_adt.did()) {\n-                                vec![\"None\".to_string(), \"Some(())\".to_string()]\n+                                vec![\"None\", \"Some(())\"]\n                             } else {\n                                 return;\n                             };"}, {"sha": "0887c27ea360c832115ea0e70e54a7ff855ddbe5", "filename": "compiler/rustc_typeck/src/check/op.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86af7135aeb5cd326c4f181134d51b856876050c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86af7135aeb5cd326c4f181134d51b856876050c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs?ref=86af7135aeb5cd326c4f181134d51b856876050c", "patch": "@@ -565,9 +565,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 .is_ok()\n             {\n                 let (variable_snippet, applicability) = if !fn_sig.inputs().is_empty() {\n-                    (\"( /* arguments */ )\".to_string(), Applicability::HasPlaceholders)\n+                    (\"( /* arguments */ )\", Applicability::HasPlaceholders)\n                 } else {\n-                    (\"()\".to_string(), Applicability::MaybeIncorrect)\n+                    (\"()\", Applicability::MaybeIncorrect)\n                 };\n \n                 err.span_suggestion_verbose("}, {"sha": "3dc728271b07a87441a63f0269023393f5501495", "filename": "compiler/rustc_typeck/src/hir_wf_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86af7135aeb5cd326c4f181134d51b856876050c/compiler%2Frustc_typeck%2Fsrc%2Fhir_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86af7135aeb5cd326c4f181134d51b856876050c/compiler%2Frustc_typeck%2Fsrc%2Fhir_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fhir_wf_check.rs?ref=86af7135aeb5cd326c4f181134d51b856876050c", "patch": "@@ -86,7 +86,7 @@ fn diagnostic_hir_wf_check<'tcx>(\n \n                 let errors = fulfill.select_all_or_error(&infcx);\n                 if !errors.is_empty() {\n-                    tracing::debug!(\"Wf-check got errors for {:?}: {:?}\", ty, errors);\n+                    debug!(\"Wf-check got errors for {:?}: {:?}\", ty, errors);\n                     for error in errors {\n                         if error.obligation.predicate == self.predicate {\n                             // Save the cause from the greatest depth - this corresponds"}, {"sha": "dd712fd7ed71dbf202f32aa78dbf646fc92c09f6", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/86af7135aeb5cd326c4f181134d51b856876050c/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86af7135aeb5cd326c4f181134d51b856876050c/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=86af7135aeb5cd326c4f181134d51b856876050c", "patch": "@@ -252,7 +252,7 @@ fn check_main_fn_ty(tcx: TyCtxt<'_>, main_def_id: DefId) {\n         let mut diag =\n             struct_span_err!(tcx.sess, generics_param_span.unwrap_or(main_span), E0131, \"{}\", msg);\n         if let Some(generics_param_span) = generics_param_span {\n-            let label = \"`main` cannot have generic parameters\".to_string();\n+            let label = \"`main` cannot have generic parameters\";\n             diag.span_label(generics_param_span, label);\n         }\n         diag.emit();\n@@ -307,8 +307,7 @@ fn check_main_fn_ty(tcx: TyCtxt<'_>, main_def_id: DefId) {\n         let return_ty_span = main_fn_return_type_span(tcx, main_def_id).unwrap_or(main_span);\n         if !return_ty.bound_vars().is_empty() {\n             let msg = \"`main` function return type is not allowed to have generic \\\n-                    parameters\"\n-                .to_owned();\n+                    parameters\";\n             struct_span_err!(tcx.sess, return_ty_span, E0131, \"{}\", msg).emit();\n             error = true;\n         }"}, {"sha": "265a57c392944f73eb26cefc2a86689fd7ead3cf", "filename": "compiler/rustc_typeck/src/structured_errors/wrong_number_of_generic_args.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86af7135aeb5cd326c4f181134d51b856876050c/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86af7135aeb5cd326c4f181134d51b856876050c/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs?ref=86af7135aeb5cd326c4f181134d51b856876050c", "patch": "@@ -126,8 +126,8 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n         }\n     }\n \n-    fn kind(&self) -> String {\n-        if self.missing_lifetimes() { \"lifetime\".to_string() } else { \"generic\".to_string() }\n+    fn kind(&self) -> &str {\n+        if self.missing_lifetimes() { \"lifetime\" } else { \"generic\" }\n     }\n \n     fn num_provided_args(&self) -> usize {"}]}