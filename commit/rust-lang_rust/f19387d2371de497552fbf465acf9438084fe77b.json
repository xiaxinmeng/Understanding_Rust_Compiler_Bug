{"sha": "f19387d2371de497552fbf465acf9438084fe77b", "node_id": "C_kwDOAAsO6NoAKGYxOTM4N2QyMzcxZGU0OTc1NTJmYmY0NjVhY2Y5NDM4MDg0ZmU3N2I", "commit": {"author": {"name": "kyoto7250", "email": "50972773+kyoto7250@users.noreply.github.com", "date": "2022-04-16T08:53:22Z"}, "committer": {"name": "kyoto7250", "email": "50972773+kyoto7250@users.noreply.github.com", "date": "2022-04-19T01:48:12Z"}, "message": "add checking type\n\nadding test patterns\n\ncargo dev bless\n\nfix comment\n\nadd ;\n\ndelete :\n\nfix suggestion code\n\nand update stderr in tests.\n\nuse match_def_path when checking method name", "tree": {"sha": "8578e65f7f2a00426af2ba03b395e9fc274b3db8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8578e65f7f2a00426af2ba03b395e9fc274b3db8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f19387d2371de497552fbf465acf9438084fe77b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f19387d2371de497552fbf465acf9438084fe77b", "html_url": "https://github.com/rust-lang/rust/commit/f19387d2371de497552fbf465acf9438084fe77b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f19387d2371de497552fbf465acf9438084fe77b/comments", "author": {"login": "kyoto7250", "id": 50972773, "node_id": "MDQ6VXNlcjUwOTcyNzcz", "avatar_url": "https://avatars.githubusercontent.com/u/50972773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kyoto7250", "html_url": "https://github.com/kyoto7250", "followers_url": "https://api.github.com/users/kyoto7250/followers", "following_url": "https://api.github.com/users/kyoto7250/following{/other_user}", "gists_url": "https://api.github.com/users/kyoto7250/gists{/gist_id}", "starred_url": "https://api.github.com/users/kyoto7250/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kyoto7250/subscriptions", "organizations_url": "https://api.github.com/users/kyoto7250/orgs", "repos_url": "https://api.github.com/users/kyoto7250/repos", "events_url": "https://api.github.com/users/kyoto7250/events{/privacy}", "received_events_url": "https://api.github.com/users/kyoto7250/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kyoto7250", "id": 50972773, "node_id": "MDQ6VXNlcjUwOTcyNzcz", "avatar_url": "https://avatars.githubusercontent.com/u/50972773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kyoto7250", "html_url": "https://github.com/kyoto7250", "followers_url": "https://api.github.com/users/kyoto7250/followers", "following_url": "https://api.github.com/users/kyoto7250/following{/other_user}", "gists_url": "https://api.github.com/users/kyoto7250/gists{/gist_id}", "starred_url": "https://api.github.com/users/kyoto7250/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kyoto7250/subscriptions", "organizations_url": "https://api.github.com/users/kyoto7250/orgs", "repos_url": "https://api.github.com/users/kyoto7250/repos", "events_url": "https://api.github.com/users/kyoto7250/events{/privacy}", "received_events_url": "https://api.github.com/users/kyoto7250/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df1ec91d952aa39646f38775a51834205fb75bef", "url": "https://api.github.com/repos/rust-lang/rust/commits/df1ec91d952aa39646f38775a51834205fb75bef", "html_url": "https://github.com/rust-lang/rust/commit/df1ec91d952aa39646f38775a51834205fb75bef"}], "stats": {"total": 138, "additions": 109, "deletions": 29}, "files": [{"sha": "d70dbf5b23904aa282d7be16b3c025add46f1781", "filename": "clippy_lints/src/bytes_count_to_len.rs", "status": "modified", "additions": 29, "deletions": 13, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/f19387d2371de497552fbf465acf9438084fe77b/clippy_lints%2Fsrc%2Fbytes_count_to_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19387d2371de497552fbf465acf9438084fe77b/clippy_lints%2Fsrc%2Fbytes_count_to_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbytes_count_to_len.rs?ref=f19387d2371de497552fbf465acf9438084fe77b", "patch": "@@ -1,8 +1,14 @@\n-use clippy_utils::diagnostics::span_lint_and_note;\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::ty::is_type_diagnostic_item;\n+use clippy_utils::{match_def_path, paths};\n use if_chain::if_chain;\n+use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::sym;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -16,37 +22,47 @@ declare_clippy_lint! {\n     /// ### Example\n     /// ```rust\n     /// \"hello\".bytes().count();\n+    /// String::from(\"hello\").bytes().count();\n     /// ```\n     /// Use instead:\n     /// ```rust\n     /// \"hello\".len();\n+    /// String::from(\"hello\").len();\n     /// ```\n-    #[clippy::version = \"1.60.0\"]\n+    #[clippy::version = \"1.62.0\"]\n     pub BYTES_COUNT_TO_LEN,\n     complexity,\n-    \"Using bytest().count() when len() performs the same functionality\"\n+    \"Using `bytes().count()` when `len()` performs the same functionality\"\n }\n \n declare_lint_pass!(BytesCountToLen => [BYTES_COUNT_TO_LEN]);\n \n impl<'tcx> LateLintPass<'tcx> for BytesCountToLen {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) {\n         if_chain! {\n-            //check for method call called \"count\"\n-            if let hir::ExprKind::MethodCall(count_path, count_args, _) = &expr.kind;\n-            if count_path.ident.name == rustc_span::sym::count;\n-            if let [bytes_expr] = &**count_args;\n-            //check for method call called \"bytes\" that was linked to \"count\"\n-            if let hir::ExprKind::MethodCall(bytes_path, _, _) = &bytes_expr.kind;\n-            if bytes_path.ident.name.as_str() == \"bytes\";\n+            if let hir::ExprKind::MethodCall(_, expr_args, _) = &expr.kind;\n+            if let Some(expr_def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n+            if match_def_path(cx, expr_def_id, &paths::ITER_COUNT);\n+\n+            if let [bytes_expr] = &**expr_args;\n+            if let hir::ExprKind::MethodCall(_, bytes_args, _) = &bytes_expr.kind;\n+            if let Some(bytes_def_id) = cx.typeck_results().type_dependent_def_id(bytes_expr.hir_id);\n+            if match_def_path(cx, bytes_def_id, &paths::STR_BYTES);\n+\n+            if let [str_expr] = &**bytes_args;\n+            let ty = cx.typeck_results().expr_ty(str_expr).peel_refs();\n+\n+            if is_type_diagnostic_item(cx, ty, sym::String) || ty.kind() == &ty::Str;\n             then {\n-                span_lint_and_note(\n+                let mut applicability = Applicability::MachineApplicable;\n+                span_lint_and_sugg(\n                     cx,\n                     BYTES_COUNT_TO_LEN,\n                     expr.span,\n                     \"using long and hard to read `.bytes().count()`\",\n-                    None,\n-                    \"`.len()` achieves same functionality\"\n+                    \"consider calling `.len()` instead\",\n+                    format!(\"{}.len()\", snippet_with_applicability(cx, str_expr.span, \"..\", &mut applicability)),\n+                    applicability\n                 );\n             }\n         };"}, {"sha": "4291a5e2299c7f1ecc0e6211d9687253b8ea8734", "filename": "clippy_utils/src/paths.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19387d2371de497552fbf465acf9438084fe77b/clippy_utils%2Fsrc%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19387d2371de497552fbf465acf9438084fe77b/clippy_utils%2Fsrc%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fpaths.rs?ref=f19387d2371de497552fbf465acf9438084fe77b", "patch": "@@ -61,6 +61,7 @@ pub const IO_READ: [&str; 3] = [\"std\", \"io\", \"Read\"];\n pub const IO_WRITE: [&str; 3] = [\"std\", \"io\", \"Write\"];\n pub const IPADDR_V4: [&str; 5] = [\"std\", \"net\", \"ip\", \"IpAddr\", \"V4\"];\n pub const IPADDR_V6: [&str; 5] = [\"std\", \"net\", \"ip\", \"IpAddr\", \"V6\"];\n+pub const ITER_COUNT: [&str; 6] = [\"core\", \"iter\", \"traits\", \"iterator\", \"Iterator\", \"count\"];\n pub const ITER_REPEAT: [&str; 5] = [\"core\", \"iter\", \"sources\", \"repeat\", \"repeat\"];\n #[allow(clippy::invalid_paths)] // internal lints do not know about all external crates\n pub const ITERTOOLS_NEXT_TUPLE: [&str; 3] = [\"itertools\", \"Itertools\", \"next_tuple\"];\n@@ -149,6 +150,7 @@ pub const STD_FS_CREATE_DIR: [&str; 3] = [\"std\", \"fs\", \"create_dir\"];\n pub const STRING_AS_MUT_STR: [&str; 4] = [\"alloc\", \"string\", \"String\", \"as_mut_str\"];\n pub const STRING_AS_STR: [&str; 4] = [\"alloc\", \"string\", \"String\", \"as_str\"];\n pub const STRING_NEW: [&str; 4] = [\"alloc\", \"string\", \"String\", \"new\"];\n+pub const STR_BYTES: [&str; 4] = [\"core\", \"str\", \"<impl str>\", \"bytes\"];\n pub const STR_ENDS_WITH: [&str; 4] = [\"core\", \"str\", \"<impl str>\", \"ends_with\"];\n pub const STR_FROM_UTF8: [&str; 4] = [\"core\", \"str\", \"converts\", \"from_utf8\"];\n pub const STR_LEN: [&str; 4] = [\"core\", \"str\", \"<impl str>\", \"len\"];"}, {"sha": "860642363b5f0ecf370379dc2ee071b58a66e72a", "filename": "tests/ui/bytes_count_to_len.fixed", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f19387d2371de497552fbf465acf9438084fe77b/tests%2Fui%2Fbytes_count_to_len.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f19387d2371de497552fbf465acf9438084fe77b/tests%2Fui%2Fbytes_count_to_len.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbytes_count_to_len.fixed?ref=f19387d2371de497552fbf465acf9438084fe77b", "patch": "@@ -0,0 +1,34 @@\n+// run-rustfix\n+#![warn(clippy::bytes_count_to_len)]\n+use std::fs::File;\n+use std::io::Read;\n+\n+fn main() {\n+    // should fix, because type is String\n+    let _ = String::from(\"foo\").len();\n+\n+    let s1 = String::from(\"foo\");\n+    let _ = s1.len();\n+\n+    // should fix, because type is &str\n+    let _ = \"foo\".len();\n+\n+    let s2 = \"foo\";\n+    let _ = s2.len();\n+\n+    // make sure using count() normally doesn't trigger warning\n+    let vector = [0, 1, 2];\n+    let _ = vector.iter().count();\n+\n+    // The type is slice, so should not fix\n+    let _ = &[1, 2, 3].bytes().count();\n+\n+    let bytes: &[u8] = &[1, 2, 3];\n+    bytes.bytes().count();\n+\n+    // The type is File, so should not fix\n+    let _ = File::open(\"foobar\").unwrap().bytes().count();\n+\n+    let f = File::open(\"foobar\").unwrap();\n+    let _ = f.bytes().count();\n+}"}, {"sha": "162730c2842a1615db2b1fe1cbb5e68d369737a7", "filename": "tests/ui/bytes_count_to_len.rs", "status": "modified", "additions": 26, "deletions": 7, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/f19387d2371de497552fbf465acf9438084fe77b/tests%2Fui%2Fbytes_count_to_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19387d2371de497552fbf465acf9438084fe77b/tests%2Fui%2Fbytes_count_to_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbytes_count_to_len.rs?ref=f19387d2371de497552fbf465acf9438084fe77b", "patch": "@@ -1,15 +1,34 @@\n+// run-rustfix\n #![warn(clippy::bytes_count_to_len)]\n+use std::fs::File;\n+use std::io::Read;\n \n fn main() {\n-    let s1 = String::from(\"world\");\n+    // should fix, because type is String\n+    let _ = String::from(\"foo\").bytes().count();\n \n-    //test warning against a string literal\n-    \"hello\".bytes().count();\n+    let s1 = String::from(\"foo\");\n+    let _ = s1.bytes().count();\n \n-    //test warning against a string variable\n-    s1.bytes().count();\n+    // should fix, because type is &str\n+    let _ = \"foo\".bytes().count();\n \n-    //make sure using count() normally doesn't trigger warning\n+    let s2 = \"foo\";\n+    let _ = s2.bytes().count();\n+\n+    // make sure using count() normally doesn't trigger warning\n     let vector = [0, 1, 2];\n-    let size = vector.iter().count();\n+    let _ = vector.iter().count();\n+\n+    // The type is slice, so should not fix\n+    let _ = &[1, 2, 3].bytes().count();\n+\n+    let bytes: &[u8] = &[1, 2, 3];\n+    bytes.bytes().count();\n+\n+    // The type is File, so should not fix\n+    let _ = File::open(\"foobar\").unwrap().bytes().count();\n+\n+    let f = File::open(\"foobar\").unwrap();\n+    let _ = f.bytes().count();\n }"}, {"sha": "224deb779871c7bdd81ffa5b38d0d9dcfff2fbb4", "filename": "tests/ui/bytes_count_to_len.stderr", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f19387d2371de497552fbf465acf9438084fe77b/tests%2Fui%2Fbytes_count_to_len.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f19387d2371de497552fbf465acf9438084fe77b/tests%2Fui%2Fbytes_count_to_len.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbytes_count_to_len.stderr?ref=f19387d2371de497552fbf465acf9438084fe77b", "patch": "@@ -1,19 +1,28 @@\n error: using long and hard to read `.bytes().count()`\n-  --> $DIR/bytes_count_to_len.rs:7:5\n+  --> $DIR/bytes_count_to_len.rs:8:13\n    |\n-LL |     \"hello\".bytes().count();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     let _ = String::from(\"foo\").bytes().count();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling `.len()` instead: `String::from(\"foo\").len()`\n    |\n    = note: `-D clippy::bytes-count-to-len` implied by `-D warnings`\n-   = note: `.len()` achieves same functionality\n \n error: using long and hard to read `.bytes().count()`\n-  --> $DIR/bytes_count_to_len.rs:10:5\n+  --> $DIR/bytes_count_to_len.rs:11:13\n    |\n-LL |     s1.bytes().count();\n-   |     ^^^^^^^^^^^^^^^^^^\n+LL |     let _ = s1.bytes().count();\n+   |             ^^^^^^^^^^^^^^^^^^ help: consider calling `.len()` instead: `s1.len()`\n+\n+error: using long and hard to read `.bytes().count()`\n+  --> $DIR/bytes_count_to_len.rs:14:13\n+   |\n+LL |     let _ = \"foo\".bytes().count();\n+   |             ^^^^^^^^^^^^^^^^^^^^^ help: consider calling `.len()` instead: `\"foo\".len()`\n+\n+error: using long and hard to read `.bytes().count()`\n+  --> $DIR/bytes_count_to_len.rs:17:13\n    |\n-   = note: `.len()` achieves same functionality\n+LL |     let _ = s2.bytes().count();\n+   |             ^^^^^^^^^^^^^^^^^^ help: consider calling `.len()` instead: `s2.len()`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 4 previous errors\n "}]}