{"sha": "0654374750bb7b2606396e8dce7cf93820c69ec1", "node_id": "C_kwDOAAsO6NoAKDA2NTQzNzQ3NTBiYjdiMjYwNjM5NmU4ZGNlN2NmOTM4MjBjNjllYzE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-27T04:31:51Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-27T20:06:12Z"}, "message": "Add some comments", "tree": {"sha": "76c2754c7b9ab3b452762983f02634ba1b00774c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76c2754c7b9ab3b452762983f02634ba1b00774c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0654374750bb7b2606396e8dce7cf93820c69ec1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0654374750bb7b2606396e8dce7cf93820c69ec1", "html_url": "https://github.com/rust-lang/rust/commit/0654374750bb7b2606396e8dce7cf93820c69ec1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0654374750bb7b2606396e8dce7cf93820c69ec1/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff2413db1b72b78137c7c0c7295eab112c0192d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff2413db1b72b78137c7c0c7295eab112c0192d9", "html_url": "https://github.com/rust-lang/rust/commit/ff2413db1b72b78137c7c0c7295eab112c0192d9"}], "stats": {"total": 31, "additions": 31, "deletions": 0}, "files": [{"sha": "61319a3ed7c191065bb9c60f1fbb008df1fba8ad", "filename": "compiler/rustc_trait_selection/src/solve/assembly.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0654374750bb7b2606396e8dce7cf93820c69ec1/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0654374750bb7b2606396e8dce7cf93820c69ec1/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs?ref=0654374750bb7b2606396e8dce7cf93820c69ec1", "patch": "@@ -1,6 +1,8 @@\n //! Code shared by trait and projection goals for candidate assembly.\n \n use super::infcx_ext::InferCtxtExt;\n+#[cfg(doc)]\n+use super::trait_goals::structural_traits::*;\n use super::{CanonicalResponse, Certainty, EvalCtxt, Goal, QueryResult};\n use rustc_hir::def_id::DefId;\n use rustc_infer::traits::query::NoSolution;\n@@ -98,52 +100,75 @@ pub(super) trait GoalKind<'tcx>: TypeFoldable<'tcx> + Copy + Eq {\n         assumption: ty::Predicate<'tcx>,\n     ) -> QueryResult<'tcx>;\n \n+    // A type implements an `auto trait` if its components do as well. These components\n+    // are given by built-in rules from [`instantiate_constituent_tys_for_auto_trait`].\n     fn consider_auto_trait_candidate(\n         ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, Self>,\n     ) -> QueryResult<'tcx>;\n \n+    // A trait alias holds if the RHS traits and `where` clauses hold.\n     fn consider_trait_alias_candidate(\n         ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, Self>,\n     ) -> QueryResult<'tcx>;\n \n+    // A type is `Copy` or `Clone` if its components are `Sized`. These components\n+    // are given by built-in rules from [`instantiate_constituent_tys_for_sized_trait`].\n     fn consider_builtin_sized_candidate(\n         ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, Self>,\n     ) -> QueryResult<'tcx>;\n \n+    // A type is `Copy` or `Clone` if its components are `Copy` or `Clone`. These\n+    // components are given by built-in rules from [`instantiate_constituent_tys_for_copy_clone_trait`].\n     fn consider_builtin_copy_clone_candidate(\n         ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, Self>,\n     ) -> QueryResult<'tcx>;\n \n+    // A type is `PointerSized` if we can compute its layout, and that layout\n+    // matches the layout of `usize`.\n     fn consider_builtin_pointer_sized_candidate(\n         ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, Self>,\n     ) -> QueryResult<'tcx>;\n \n+    // A callable type (a closure, fn def, or fn ptr) is known to implement the `Fn<A>`\n+    // family of traits where `A` is given by the signature of the type.\n     fn consider_builtin_fn_trait_candidates(\n         ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, Self>,\n         kind: ty::ClosureKind,\n     ) -> QueryResult<'tcx>;\n \n+    // `Tuple` is implemented if the `Self` type is a tuple.\n     fn consider_builtin_tuple_candidate(\n         ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, Self>,\n     ) -> QueryResult<'tcx>;\n \n+    // `Pointee` is always implemented.\n+    //\n+    // See the projection implementation for the `Metadata` types for all of\n+    // the built-in types. For structs, the metadata type is given by the struct\n+    // tail.\n     fn consider_builtin_pointee_candidate(\n         ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, Self>,\n     ) -> QueryResult<'tcx>;\n \n+    // A generator (that comes from an `async` desugaring) is known to implement\n+    // `Future<Output = O>`, where `O` is given by the generator's return type\n+    // that was computed during type-checking.\n     fn consider_builtin_future_candidate(\n         ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, Self>,\n     ) -> QueryResult<'tcx>;\n \n+    // A generator (that doesn't come from an `async` desugaring) is known to\n+    // implement `Generator<R, Yield = Y, Return = O>`, given the resume, yield,\n+    // and return types of the generator computed during type-checking.\n     fn consider_builtin_generator_candidate(\n         ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, Self>,"}, {"sha": "cc7bb94537673c9de6a9abec541cef02f0ff87d6", "filename": "compiler/rustc_trait_selection/src/solve/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0654374750bb7b2606396e8dce7cf93820c69ec1/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0654374750bb7b2606396e8dce7cf93820c69ec1/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs?ref=0654374750bb7b2606396e8dce7cf93820c69ec1", "patch": "@@ -390,6 +390,8 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n }\n \n impl<'tcx> EvalCtxt<'_, 'tcx> {\n+    // Recursively evaluates a list of goals to completion, returning the certainty\n+    // of all of the goals.\n     fn evaluate_all(\n         &mut self,\n         mut goals: Vec<Goal<'tcx, ty::Predicate<'tcx>>>,\n@@ -426,6 +428,10 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n         })\n     }\n \n+    // Recursively evaluates a list of goals to completion, making a query response.\n+    //\n+    // This is just a convenient way of calling [`EvalCtxt::evaluate_all`],\n+    // then [`EvalCtxt::make_canonical_response`].\n     fn evaluate_all_and_make_canonical_response(\n         &mut self,\n         goals: Vec<Goal<'tcx, ty::Predicate<'tcx>>>,"}]}