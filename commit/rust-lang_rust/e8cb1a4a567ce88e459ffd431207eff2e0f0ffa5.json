{"sha": "e8cb1a4a567ce88e459ffd431207eff2e0f0ffa5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4Y2IxYTRhNTY3Y2U4OGU0NTlmZmQ0MzEyMDdlZmYyZTBmMGZmYTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-27T20:33:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-27T20:33:25Z"}, "message": "Auto merge of #85359 - lrh2000:reserved-prefixes, r=nikomatsakis\n\nReserve prefixed identifiers and literals (RFC 3101)\n\nThis PR denies any identifiers immediately followed by one of three tokens `\"`, `'` or `#`, which is stricter than the requirements of RFC 3101 but may be necessary according to the discussion at [Zulip].\n\n[Zulip]: https://rust-lang.zulipchat.com/#narrow/stream/268952-edition-2021/topic/reserved.20prefixes/near/238470099\n\nThe tracking issue #84599 says we'll add a feature gate named `reserved_prefixes`, but I don't think I can do this because it is impossible for the lexer to know whether a feature is enabled or not. I guess determining the behavior by the edition information should be enough.\n\nFixes #84599", "tree": {"sha": "197eb8612e926b0c09149a35e033ea8ac0f72209", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/197eb8612e926b0c09149a35e033ea8ac0f72209"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8cb1a4a567ce88e459ffd431207eff2e0f0ffa5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8cb1a4a567ce88e459ffd431207eff2e0f0ffa5", "html_url": "https://github.com/rust-lang/rust/commit/e8cb1a4a567ce88e459ffd431207eff2e0f0ffa5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8cb1a4a567ce88e459ffd431207eff2e0f0ffa5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4f832b2755fa1421edd3bf6d8b4d61f2c1732b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4f832b2755fa1421edd3bf6d8b4d61f2c1732b6", "html_url": "https://github.com/rust-lang/rust/commit/a4f832b2755fa1421edd3bf6d8b4d61f2c1732b6"}, {"sha": "f6dd1378f0918554ace992df0b3d03529f6a2715", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6dd1378f0918554ace992df0b3d03529f6a2715", "html_url": "https://github.com/rust-lang/rust/commit/f6dd1378f0918554ace992df0b3d03529f6a2715"}], "stats": {"total": 527, "additions": 518, "deletions": 9}, "files": [{"sha": "4cb2a6ca50f8dc1c71991c9a528802cf08940248", "filename": "compiler/rustc_lexer/src/lib.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e8cb1a4a567ce88e459ffd431207eff2e0f0ffa5/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8cb1a4a567ce88e459ffd431207eff2e0f0ffa5/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Flib.rs?ref=e8cb1a4a567ce88e459ffd431207eff2e0f0ffa5", "patch": "@@ -66,6 +66,13 @@ pub enum TokenKind {\n     Ident,\n     /// \"r#ident\"\n     RawIdent,\n+    /// An unknown prefix like `foo#`, `foo'`, `foo\"`. Note that only the\n+    /// prefix (`foo`) is included in the token, not the separator (which is\n+    /// lexed as its own distinct token). In Rust 2021 and later, reserved\n+    /// prefixes are reported as errors; in earlier editions, they result in a\n+    /// (allowed by default) lint, and are treated as regular identifier\n+    /// tokens.\n+    UnknownPrefix,\n     /// \"12_u8\", \"1.0e-40\", \"b\"123\"\". See `LiteralKind` for more details.\n     Literal { kind: LiteralKind, suffix_start: usize },\n     /// \"'a\"\n@@ -323,7 +330,7 @@ impl Cursor<'_> {\n                     let kind = RawStr { n_hashes, err };\n                     Literal { kind, suffix_start }\n                 }\n-                _ => self.ident(),\n+                _ => self.ident_or_unknown_prefix(),\n             },\n \n             // Byte literal, byte string literal, raw byte string literal or identifier.\n@@ -358,12 +365,12 @@ impl Cursor<'_> {\n                     let kind = RawByteStr { n_hashes, err };\n                     Literal { kind, suffix_start }\n                 }\n-                _ => self.ident(),\n+                _ => self.ident_or_unknown_prefix(),\n             },\n \n             // Identifier (this should be checked after other variant that can\n             // start as identifier).\n-            c if is_id_start(c) => self.ident(),\n+            c if is_id_start(c) => self.ident_or_unknown_prefix(),\n \n             // Numeric literal.\n             c @ '0'..='9' => {\n@@ -487,11 +494,16 @@ impl Cursor<'_> {\n         RawIdent\n     }\n \n-    fn ident(&mut self) -> TokenKind {\n+    fn ident_or_unknown_prefix(&mut self) -> TokenKind {\n         debug_assert!(is_id_start(self.prev()));\n         // Start is already eaten, eat the rest of identifier.\n         self.eat_while(is_id_continue);\n-        Ident\n+        // Known prefixes must have been handled earlier. So if\n+        // we see a prefix here, it is definitely a unknown prefix.\n+        match self.first() {\n+            '#' | '\"' | '\\'' => UnknownPrefix,\n+            _ => Ident,\n+        }\n     }\n \n     fn number(&mut self, first_digit: char) -> LiteralKind {"}, {"sha": "933f7e47c3e9d1b36c75235ad791843f7051fee3", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e8cb1a4a567ce88e459ffd431207eff2e0f0ffa5/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8cb1a4a567ce88e459ffd431207eff2e0f0ffa5/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=e8cb1a4a567ce88e459ffd431207eff2e0f0ffa5", "patch": "@@ -723,6 +723,15 @@ pub trait LintContext: Sized {\n                 BuiltinLintDiagnostics::OrPatternsBackCompat(span,suggestion) => {\n                     db.span_suggestion(span, \"use pat_param to preserve semantics\", suggestion, Applicability::MachineApplicable);\n                 }\n+                BuiltinLintDiagnostics::ReservedPrefix(span) => {\n+                    db.span_label(span, \"unknown prefix\");\n+                    db.span_suggestion_verbose(\n+                        span.shrink_to_hi(),\n+                        \"insert whitespace here to avoid this being parsed as a prefix in Rust 2021\",\n+                        \" \".into(),\n+                        Applicability::MachineApplicable,\n+                    );\n+                }\n             }\n             // Rewrap `db`, and pass control to the user.\n             decorate(LintDiagnosticBuilder::new(db));"}, {"sha": "dbc9a11100f5b31a65dac85f61ca97632fd75d92", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e8cb1a4a567ce88e459ffd431207eff2e0f0ffa5/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8cb1a4a567ce88e459ffd431207eff2e0f0ffa5/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=e8cb1a4a567ce88e459ffd431207eff2e0f0ffa5", "patch": "@@ -2973,6 +2973,7 @@ declare_lint_pass! {\n         OR_PATTERNS_BACK_COMPAT,\n         LARGE_ASSIGNMENTS,\n         FUTURE_PRELUDE_COLLISION,\n+        RESERVED_PREFIX,\n     ]\n }\n \n@@ -3263,3 +3264,39 @@ declare_lint! {\n         reason: FutureIncompatibilityReason::EditionError(Edition::Edition2021),\n     };\n }\n+\n+declare_lint! {\n+    /// The `reserved_prefix` lint detects identifiers that will be parsed as a\n+    /// prefix instead in Rust 2021.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust,compile_fail\n+    /// #![deny(reserved_prefix)]\n+    ///\n+    /// macro_rules! m {\n+    ///     (z $x:expr) => ();\n+    /// }\n+    ///\n+    /// m!(z\"hey\");\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// In Rust 2015 and 2018, `z\"hey\"` is two tokens: the identifier `z`\n+    /// followed by the string literal `\"hey\"`. In Rust 2021, the `z` is\n+    /// considered a prefix for `\"hey\"`.\n+    ///\n+    /// This lint suggests to add whitespace between the `z` and `\"hey\"` tokens\n+    /// to keep them separated in Rust 2021.\n+    pub RESERVED_PREFIX,\n+    Allow,\n+    \"identifiers that will be parsed as a prefix in Rust 2021\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #84978 <https://github.com/rust-lang/rust/issues/84978>\",\n+        reason: FutureIncompatibilityReason::EditionError(Edition::Edition2021),\n+    };\n+    crate_level_only\n+}"}, {"sha": "3372bc716d28ce150b9c7fb1a948c51c27231cb7", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e8cb1a4a567ce88e459ffd431207eff2e0f0ffa5/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8cb1a4a567ce88e459ffd431207eff2e0f0ffa5/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=e8cb1a4a567ce88e459ffd431207eff2e0f0ffa5", "patch": "@@ -300,6 +300,7 @@ pub enum BuiltinLintDiagnostics {\n     ExternDepSpec(String, ExternDepSpec),\n     ProcMacroBackCompat(String),\n     OrPatternsBackCompat(Span, String),\n+    ReservedPrefix(Span),\n }\n \n /// Lints that are buffered up early on in the `Session` before the"}, {"sha": "87e60a48e4457430c2787014611412e937e658c5", "filename": "compiler/rustc_parse/src/lexer/mod.rs", "status": "modified", "additions": 47, "deletions": 3, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/e8cb1a4a567ce88e459ffd431207eff2e0f0ffa5/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8cb1a4a567ce88e459ffd431207eff2e0f0ffa5/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs?ref=e8cb1a4a567ce88e459ffd431207eff2e0f0ffa5", "patch": "@@ -1,12 +1,14 @@\n-use rustc_ast::ast::AttrStyle;\n+use rustc_ast::ast::{self, AttrStyle};\n use rustc_ast::token::{self, CommentKind, Token, TokenKind};\n use rustc_ast::tokenstream::{Spacing, TokenStream};\n use rustc_errors::{error_code, Applicability, DiagnosticBuilder, FatalError, PResult};\n use rustc_lexer::unescape::{self, Mode};\n use rustc_lexer::{Base, DocStyle, RawStrError};\n+use rustc_session::lint::builtin::RESERVED_PREFIX;\n+use rustc_session::lint::BuiltinLintDiagnostics;\n use rustc_session::parse::ParseSess;\n use rustc_span::symbol::{sym, Symbol};\n-use rustc_span::{BytePos, Pos, Span};\n+use rustc_span::{edition::Edition, BytePos, Pos, Span};\n \n use tracing::debug;\n \n@@ -166,12 +168,18 @@ impl<'a> StringReader<'a> {\n                 self.cook_doc_comment(content_start, content, CommentKind::Block, doc_style)\n             }\n             rustc_lexer::TokenKind::Whitespace => return None,\n-            rustc_lexer::TokenKind::Ident | rustc_lexer::TokenKind::RawIdent => {\n+            rustc_lexer::TokenKind::Ident\n+            | rustc_lexer::TokenKind::RawIdent\n+            | rustc_lexer::TokenKind::UnknownPrefix => {\n                 let is_raw_ident = token == rustc_lexer::TokenKind::RawIdent;\n+                let is_unknown_prefix = token == rustc_lexer::TokenKind::UnknownPrefix;\n                 let mut ident_start = start;\n                 if is_raw_ident {\n                     ident_start = ident_start + BytePos(2);\n                 }\n+                if is_unknown_prefix {\n+                    self.report_unknown_prefix(start);\n+                }\n                 let sym = nfc_normalize(self.str_from(ident_start));\n                 let span = self.mk_sp(start, self.pos);\n                 self.sess.symbol_gallery.insert(sym, span);\n@@ -491,6 +499,42 @@ impl<'a> StringReader<'a> {\n         FatalError.raise()\n     }\n \n+    // RFC 3101 introduced the idea of (reserved) prefixes. As of Rust 2021,\n+    // using a (unknown) prefix is an error. In earlier editions, however, they\n+    // only result in a (allowed by default) lint, and are treated as regular\n+    // identifier tokens.\n+    fn report_unknown_prefix(&self, start: BytePos) {\n+        let prefix_span = self.mk_sp(start, self.pos);\n+        let msg = format!(\"prefix `{}` is unknown\", self.str_from_to(start, self.pos));\n+\n+        let expn_data = prefix_span.ctxt().outer_expn_data();\n+\n+        if expn_data.edition >= Edition::Edition2021 {\n+            // In Rust 2021, this is a hard error.\n+            let mut err = self.sess.span_diagnostic.struct_span_err(prefix_span, &msg);\n+            err.span_label(prefix_span, \"unknown prefix\");\n+            if expn_data.is_root() {\n+                err.span_suggestion_verbose(\n+                    prefix_span.shrink_to_hi(),\n+                    \"consider inserting whitespace here\",\n+                    \" \".into(),\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+            err.note(\"prefixed identifiers and literals are reserved since Rust 2021\");\n+            err.emit();\n+        } else {\n+            // Before Rust 2021, only emit a lint for migration.\n+            self.sess.buffer_lint_with_diagnostic(\n+                &RESERVED_PREFIX,\n+                prefix_span,\n+                ast::CRATE_NODE_ID,\n+                &msg,\n+                BuiltinLintDiagnostics::ReservedPrefix(prefix_span),\n+            );\n+        }\n+    }\n+\n     /// Note: It was decided to not add a test case, because it would be too big.\n     /// <https://github.com/rust-lang/rust/pull/50296#issuecomment-392135180>\n     fn report_too_many_hashes(&self, start: BytePos, found: usize) -> ! {"}, {"sha": "33b1d98313ce3cd3c5efb3cc3404f26f1fdeab36", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8cb1a4a567ce88e459ffd431207eff2e0f0ffa5/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8cb1a4a567ce88e459ffd431207eff2e0f0ffa5/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=e8cb1a4a567ce88e459ffd431207eff2e0f0ffa5", "patch": "@@ -413,7 +413,7 @@ impl<'a> Classifier<'a> {\n                 },\n                 c => c,\n             },\n-            TokenKind::RawIdent => Class::Ident,\n+            TokenKind::RawIdent | TokenKind::UnknownPrefix => Class::Ident,\n             TokenKind::Lifetime { .. } => Class::Lifetime,\n         };\n         // Anything that didn't return above is the simple case where we the"}, {"sha": "eb301e5e1be32f26cabf18f39bf7d1712cc3cb43", "filename": "src/test/ui/rust-2021/auxiliary/reserved-prefixes-macro-2018.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e8cb1a4a567ce88e459ffd431207eff2e0f0ffa5/src%2Ftest%2Fui%2Frust-2021%2Fauxiliary%2Freserved-prefixes-macro-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8cb1a4a567ce88e459ffd431207eff2e0f0ffa5/src%2Ftest%2Fui%2Frust-2021%2Fauxiliary%2Freserved-prefixes-macro-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Fauxiliary%2Freserved-prefixes-macro-2018.rs?ref=e8cb1a4a567ce88e459ffd431207eff2e0f0ffa5", "patch": "@@ -0,0 +1,25 @@\n+// force-host\n+// edition:2018\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::TokenStream;\n+use std::str::FromStr;\n+\n+#[proc_macro]\n+pub fn number_of_tokens_in_a_prefixed_integer_literal(_: TokenStream) -> TokenStream {\n+    TokenStream::from_str(\"hey#123\").unwrap().into_iter().count().to_string().parse().unwrap()\n+}\n+\n+#[proc_macro]\n+pub fn number_of_tokens_in_a_prefixed_char_literal(_: TokenStream) -> TokenStream {\n+    TokenStream::from_str(\"hey#'a'\").unwrap().into_iter().count().to_string().parse().unwrap()\n+}\n+\n+#[proc_macro]\n+pub fn number_of_tokens_in_a_prefixed_string_literal(_: TokenStream) -> TokenStream {\n+    TokenStream::from_str(\"hey#\\\"abc\\\"\").unwrap().into_iter().count().to_string().parse().unwrap()\n+}"}, {"sha": "691bfdc15c3ad685586ae19d555bcbf157ebb719", "filename": "src/test/ui/rust-2021/auxiliary/reserved-prefixes-macro-2021.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e8cb1a4a567ce88e459ffd431207eff2e0f0ffa5/src%2Ftest%2Fui%2Frust-2021%2Fauxiliary%2Freserved-prefixes-macro-2021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8cb1a4a567ce88e459ffd431207eff2e0f0ffa5/src%2Ftest%2Fui%2Frust-2021%2Fauxiliary%2Freserved-prefixes-macro-2021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Fauxiliary%2Freserved-prefixes-macro-2021.rs?ref=e8cb1a4a567ce88e459ffd431207eff2e0f0ffa5", "patch": "@@ -0,0 +1,25 @@\n+// force-host\n+// edition:2021\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::TokenStream;\n+use std::str::FromStr;\n+\n+#[proc_macro]\n+pub fn number_of_tokens_in_a_prefixed_integer_literal(_: TokenStream) -> TokenStream {\n+    TokenStream::from_str(\"hey#123\").unwrap().into_iter().count().to_string().parse().unwrap()\n+}\n+\n+#[proc_macro]\n+pub fn number_of_tokens_in_a_prefixed_char_literal(_: TokenStream) -> TokenStream {\n+    TokenStream::from_str(\"hey#'a'\").unwrap().into_iter().count().to_string().parse().unwrap()\n+}\n+\n+#[proc_macro]\n+pub fn number_of_tokens_in_a_prefixed_string_literal(_: TokenStream) -> TokenStream {\n+    TokenStream::from_str(\"hey#\\\"abc\\\"\").unwrap().into_iter().count().to_string().parse().unwrap()\n+}"}, {"sha": "dbc2ec6d42ee2eeeab358f9e667dad270696ce6a", "filename": "src/test/ui/rust-2021/reserved-prefixes-migration.fixed", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/e8cb1a4a567ce88e459ffd431207eff2e0f0ffa5/src%2Ftest%2Fui%2Frust-2021%2Freserved-prefixes-migration.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e8cb1a4a567ce88e459ffd431207eff2e0f0ffa5/src%2Ftest%2Fui%2Frust-2021%2Freserved-prefixes-migration.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Freserved-prefixes-migration.fixed?ref=e8cb1a4a567ce88e459ffd431207eff2e0f0ffa5", "patch": "@@ -0,0 +1,38 @@\n+// check-pass\n+// run-rustfix\n+// compile-flags: -Z unstable-options --edition 2018\n+\n+#![warn(reserved_prefix)]\n+\n+macro_rules! m2 {\n+    ($a:tt $b:tt) => {};\n+}\n+\n+macro_rules! m3 {\n+    ($a:tt $b:tt $c:tt) => {};\n+}\n+\n+fn main() {\n+    m2!(z \"hey\");\n+    //~^ WARNING prefix `z` is unknown [reserved_prefix]\n+    //~| WARNING hard error in Rust 2021\n+    m2!(prefix \"hey\");\n+    //~^ WARNING prefix `prefix` is unknown [reserved_prefix]\n+    //~| WARNING hard error in Rust 2021\n+    m3!(hey #123);\n+    //~^ WARNING prefix `hey` is unknown [reserved_prefix]\n+    //~| WARNING hard error in Rust 2021\n+    m3!(hey #hey);\n+    //~^ WARNING prefix `hey` is unknown [reserved_prefix]\n+    //~| WARNING hard error in Rust 2021\n+}\n+\n+macro_rules! quote {\n+    (# name = # kind # value) => {};\n+}\n+\n+quote! {\n+    #name = #kind #value\n+    //~^ WARNING prefix `kind` is unknown [reserved_prefix]\n+    //~| WARNING hard error in Rust 2021\n+}"}, {"sha": "6f7e3eb7a43a6b7b44999126dbc2cf60c56dffc4", "filename": "src/test/ui/rust-2021/reserved-prefixes-migration.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/e8cb1a4a567ce88e459ffd431207eff2e0f0ffa5/src%2Ftest%2Fui%2Frust-2021%2Freserved-prefixes-migration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8cb1a4a567ce88e459ffd431207eff2e0f0ffa5/src%2Ftest%2Fui%2Frust-2021%2Freserved-prefixes-migration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Freserved-prefixes-migration.rs?ref=e8cb1a4a567ce88e459ffd431207eff2e0f0ffa5", "patch": "@@ -0,0 +1,38 @@\n+// check-pass\n+// run-rustfix\n+// compile-flags: -Z unstable-options --edition 2018\n+\n+#![warn(reserved_prefix)]\n+\n+macro_rules! m2 {\n+    ($a:tt $b:tt) => {};\n+}\n+\n+macro_rules! m3 {\n+    ($a:tt $b:tt $c:tt) => {};\n+}\n+\n+fn main() {\n+    m2!(z\"hey\");\n+    //~^ WARNING prefix `z` is unknown [reserved_prefix]\n+    //~| WARNING hard error in Rust 2021\n+    m2!(prefix\"hey\");\n+    //~^ WARNING prefix `prefix` is unknown [reserved_prefix]\n+    //~| WARNING hard error in Rust 2021\n+    m3!(hey#123);\n+    //~^ WARNING prefix `hey` is unknown [reserved_prefix]\n+    //~| WARNING hard error in Rust 2021\n+    m3!(hey#hey);\n+    //~^ WARNING prefix `hey` is unknown [reserved_prefix]\n+    //~| WARNING hard error in Rust 2021\n+}\n+\n+macro_rules! quote {\n+    (# name = # kind # value) => {};\n+}\n+\n+quote! {\n+    #name = #kind#value\n+    //~^ WARNING prefix `kind` is unknown [reserved_prefix]\n+    //~| WARNING hard error in Rust 2021\n+}"}, {"sha": "28ac1966a1bce087619daaaa7c3faab4471e38a1", "filename": "src/test/ui/rust-2021/reserved-prefixes-migration.stderr", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/e8cb1a4a567ce88e459ffd431207eff2e0f0ffa5/src%2Ftest%2Fui%2Frust-2021%2Freserved-prefixes-migration.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8cb1a4a567ce88e459ffd431207eff2e0f0ffa5/src%2Ftest%2Fui%2Frust-2021%2Freserved-prefixes-migration.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Freserved-prefixes-migration.stderr?ref=e8cb1a4a567ce88e459ffd431207eff2e0f0ffa5", "patch": "@@ -0,0 +1,72 @@\n+warning: prefix `z` is unknown\n+  --> $DIR/reserved-prefixes-migration.rs:16:9\n+   |\n+LL |     m2!(z\"hey\");\n+   |         ^ unknown prefix\n+   |\n+note: the lint level is defined here\n+  --> $DIR/reserved-prefixes-migration.rs:5:9\n+   |\n+LL | #![warn(reserved_prefix)]\n+   |         ^^^^^^^^^^^^^^^\n+   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n+   = note: for more information, see issue #84978 <https://github.com/rust-lang/rust/issues/84978>\n+help: insert whitespace here to avoid this being parsed as a prefix in Rust 2021\n+   |\n+LL |     m2!(z \"hey\");\n+   |          --\n+\n+warning: prefix `prefix` is unknown\n+  --> $DIR/reserved-prefixes-migration.rs:19:9\n+   |\n+LL |     m2!(prefix\"hey\");\n+   |         ^^^^^^ unknown prefix\n+   |\n+   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n+   = note: for more information, see issue #84978 <https://github.com/rust-lang/rust/issues/84978>\n+help: insert whitespace here to avoid this being parsed as a prefix in Rust 2021\n+   |\n+LL |     m2!(prefix \"hey\");\n+   |               --\n+\n+warning: prefix `hey` is unknown\n+  --> $DIR/reserved-prefixes-migration.rs:22:9\n+   |\n+LL |     m3!(hey#123);\n+   |         ^^^ unknown prefix\n+   |\n+   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n+   = note: for more information, see issue #84978 <https://github.com/rust-lang/rust/issues/84978>\n+help: insert whitespace here to avoid this being parsed as a prefix in Rust 2021\n+   |\n+LL |     m3!(hey #123);\n+   |            --\n+\n+warning: prefix `hey` is unknown\n+  --> $DIR/reserved-prefixes-migration.rs:25:9\n+   |\n+LL |     m3!(hey#hey);\n+   |         ^^^ unknown prefix\n+   |\n+   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n+   = note: for more information, see issue #84978 <https://github.com/rust-lang/rust/issues/84978>\n+help: insert whitespace here to avoid this being parsed as a prefix in Rust 2021\n+   |\n+LL |     m3!(hey #hey);\n+   |            --\n+\n+warning: prefix `kind` is unknown\n+  --> $DIR/reserved-prefixes-migration.rs:35:14\n+   |\n+LL |     #name = #kind#value\n+   |              ^^^^ unknown prefix\n+   |\n+   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n+   = note: for more information, see issue #84978 <https://github.com/rust-lang/rust/issues/84978>\n+help: insert whitespace here to avoid this being parsed as a prefix in Rust 2021\n+   |\n+LL |     #name = #kind #value\n+   |                  --\n+\n+warning: 5 warnings emitted\n+"}, {"sha": "74f20660613ad1b3b0cf18543009cf4923149182", "filename": "src/test/ui/rust-2021/reserved-prefixes-via-macro-2.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e8cb1a4a567ce88e459ffd431207eff2e0f0ffa5/src%2Ftest%2Fui%2Frust-2021%2Freserved-prefixes-via-macro-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8cb1a4a567ce88e459ffd431207eff2e0f0ffa5/src%2Ftest%2Fui%2Frust-2021%2Freserved-prefixes-via-macro-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Freserved-prefixes-via-macro-2.rs?ref=e8cb1a4a567ce88e459ffd431207eff2e0f0ffa5", "patch": "@@ -0,0 +1,21 @@\n+// edition:2018\n+// aux-build:reserved-prefixes-macro-2018.rs\n+// aux-build:reserved-prefixes-macro-2021.rs\n+\n+extern crate reserved_prefixes_macro_2018 as m2018;\n+extern crate reserved_prefixes_macro_2021 as m2021;\n+\n+fn main() {\n+    // Ok:\n+    m2018::number_of_tokens_in_a_prefixed_integer_literal!();\n+    m2018::number_of_tokens_in_a_prefixed_char_literal!();\n+    m2018::number_of_tokens_in_a_prefixed_string_literal!();\n+\n+    // Error, even though *this* crate is 2018:\n+    m2021::number_of_tokens_in_a_prefixed_integer_literal!();\n+    //~^ ERROR prefix `hey` is unknown\n+    m2021::number_of_tokens_in_a_prefixed_char_literal!();\n+    //~^ ERROR prefix `hey` is unknown\n+    m2021::number_of_tokens_in_a_prefixed_string_literal!();\n+    //~^ ERROR prefix `hey` is unknown\n+}"}, {"sha": "9d7ca570c4cc3aab11d8b96928efdfcc4bdc631d", "filename": "src/test/ui/rust-2021/reserved-prefixes-via-macro-2.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e8cb1a4a567ce88e459ffd431207eff2e0f0ffa5/src%2Ftest%2Fui%2Frust-2021%2Freserved-prefixes-via-macro-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8cb1a4a567ce88e459ffd431207eff2e0f0ffa5/src%2Ftest%2Fui%2Frust-2021%2Freserved-prefixes-via-macro-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Freserved-prefixes-via-macro-2.stderr?ref=e8cb1a4a567ce88e459ffd431207eff2e0f0ffa5", "patch": "@@ -0,0 +1,29 @@\n+error: prefix `hey` is unknown\n+  --> $DIR/reserved-prefixes-via-macro-2.rs:15:5\n+   |\n+LL |     m2021::number_of_tokens_in_a_prefixed_integer_literal!();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unknown prefix\n+   |\n+   = note: prefixed identifiers and literals are reserved since Rust 2021\n+   = note: this error originates in the macro `m2021::number_of_tokens_in_a_prefixed_integer_literal` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: prefix `hey` is unknown\n+  --> $DIR/reserved-prefixes-via-macro-2.rs:17:5\n+   |\n+LL |     m2021::number_of_tokens_in_a_prefixed_char_literal!();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unknown prefix\n+   |\n+   = note: prefixed identifiers and literals are reserved since Rust 2021\n+   = note: this error originates in the macro `m2021::number_of_tokens_in_a_prefixed_char_literal` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: prefix `hey` is unknown\n+  --> $DIR/reserved-prefixes-via-macro-2.rs:19:5\n+   |\n+LL |     m2021::number_of_tokens_in_a_prefixed_string_literal!();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unknown prefix\n+   |\n+   = note: prefixed identifiers and literals are reserved since Rust 2021\n+   = note: this error originates in the macro `m2021::number_of_tokens_in_a_prefixed_string_literal` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "110b6d64ccc68f7d866940d91e6df91cb0eec044", "filename": "src/test/ui/rust-2021/reserved-prefixes-via-macro.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e8cb1a4a567ce88e459ffd431207eff2e0f0ffa5/src%2Ftest%2Fui%2Frust-2021%2Freserved-prefixes-via-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8cb1a4a567ce88e459ffd431207eff2e0f0ffa5/src%2Ftest%2Fui%2Frust-2021%2Freserved-prefixes-via-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Freserved-prefixes-via-macro.rs?ref=e8cb1a4a567ce88e459ffd431207eff2e0f0ffa5", "patch": "@@ -0,0 +1,12 @@\n+// run-pass\n+// edition:2021\n+// aux-build:reserved-prefixes-macro-2018.rs\n+\n+extern crate reserved_prefixes_macro_2018 as m2018;\n+\n+fn main() {\n+    // Ok, even though *this* crate is 2021:\n+    assert_eq!(m2018::number_of_tokens_in_a_prefixed_integer_literal!(), 3);\n+    assert_eq!(m2018::number_of_tokens_in_a_prefixed_char_literal!(), 3);\n+    assert_eq!(m2018::number_of_tokens_in_a_prefixed_string_literal!(), 3);\n+}"}, {"sha": "5882c7d83d8bebf5d54eb73f39a8e2f194863861", "filename": "src/test/ui/rust-2021/reserved-prefixes.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e8cb1a4a567ce88e459ffd431207eff2e0f0ffa5/src%2Ftest%2Fui%2Frust-2021%2Freserved-prefixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8cb1a4a567ce88e459ffd431207eff2e0f0ffa5/src%2Ftest%2Fui%2Frust-2021%2Freserved-prefixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Freserved-prefixes.rs?ref=e8cb1a4a567ce88e459ffd431207eff2e0f0ffa5", "patch": "@@ -0,0 +1,36 @@\n+// compile-flags: -Z unstable-options --edition 2021\n+\n+macro_rules! demo2 {\n+    ( $a:tt $b:tt ) => { println!(\"two tokens\") };\n+}\n+\n+macro_rules! demo3 {\n+    ( $a:tt $b:tt $c:tt ) => { println!(\"three tokens\") };\n+}\n+\n+macro_rules! demo4 {\n+    ( $a:tt $b:tt $c:tt $d:tt ) => { println!(\"four tokens\") };\n+}\n+\n+fn main() {\n+    demo3!(foo#bar);   //~ ERROR prefix `foo` is unknown\n+    demo2!(foo\"bar\");  //~ ERROR prefix `foo` is unknown\n+    demo2!(foo'b');    //~ ERROR prefix `foo` is unknown\n+\n+    demo2!(foo'b);     //~ ERROR prefix `foo` is unknown\n+    demo3!(foo# bar);  //~ ERROR prefix `foo` is unknown\n+    demo4!(foo#! bar); //~ ERROR prefix `foo` is unknown\n+    demo4!(foo## bar); //~ ERROR prefix `foo` is unknown\n+\n+    demo4!(foo#bar#);\n+    //~^ ERROR prefix `foo` is unknown\n+    //~| ERROR prefix `bar` is unknown\n+\n+    demo3!(foo # bar);\n+    demo3!(foo #bar);\n+    demo4!(foo!#bar);\n+    demo4!(foo ##bar);\n+\n+    demo3!(r\"foo\"#bar);\n+    demo3!(r#foo#bar);\n+}"}, {"sha": "32e18563329252a7443ba57f70e64ca9ef461e89", "filename": "src/test/ui/rust-2021/reserved-prefixes.stderr", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/e8cb1a4a567ce88e459ffd431207eff2e0f0ffa5/src%2Ftest%2Fui%2Frust-2021%2Freserved-prefixes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8cb1a4a567ce88e459ffd431207eff2e0f0ffa5/src%2Ftest%2Fui%2Frust-2021%2Freserved-prefixes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Freserved-prefixes.stderr?ref=e8cb1a4a567ce88e459ffd431207eff2e0f0ffa5", "patch": "@@ -0,0 +1,110 @@\n+error: prefix `foo` is unknown\n+  --> $DIR/reserved-prefixes.rs:16:12\n+   |\n+LL |     demo3!(foo#bar);\n+   |            ^^^ unknown prefix\n+   |\n+   = note: prefixed identifiers and literals are reserved since Rust 2021\n+help: consider inserting whitespace here\n+   |\n+LL |     demo3!(foo #bar);\n+   |               --\n+\n+error: prefix `foo` is unknown\n+  --> $DIR/reserved-prefixes.rs:17:12\n+   |\n+LL |     demo2!(foo\"bar\");\n+   |            ^^^ unknown prefix\n+   |\n+   = note: prefixed identifiers and literals are reserved since Rust 2021\n+help: consider inserting whitespace here\n+   |\n+LL |     demo2!(foo \"bar\");\n+   |               --\n+\n+error: prefix `foo` is unknown\n+  --> $DIR/reserved-prefixes.rs:18:12\n+   |\n+LL |     demo2!(foo'b');\n+   |            ^^^ unknown prefix\n+   |\n+   = note: prefixed identifiers and literals are reserved since Rust 2021\n+help: consider inserting whitespace here\n+   |\n+LL |     demo2!(foo 'b');\n+   |               --\n+\n+error: prefix `foo` is unknown\n+  --> $DIR/reserved-prefixes.rs:20:12\n+   |\n+LL |     demo2!(foo'b);\n+   |            ^^^ unknown prefix\n+   |\n+   = note: prefixed identifiers and literals are reserved since Rust 2021\n+help: consider inserting whitespace here\n+   |\n+LL |     demo2!(foo 'b);\n+   |               --\n+\n+error: prefix `foo` is unknown\n+  --> $DIR/reserved-prefixes.rs:21:12\n+   |\n+LL |     demo3!(foo# bar);\n+   |            ^^^ unknown prefix\n+   |\n+   = note: prefixed identifiers and literals are reserved since Rust 2021\n+help: consider inserting whitespace here\n+   |\n+LL |     demo3!(foo # bar);\n+   |               --\n+\n+error: prefix `foo` is unknown\n+  --> $DIR/reserved-prefixes.rs:22:12\n+   |\n+LL |     demo4!(foo#! bar);\n+   |            ^^^ unknown prefix\n+   |\n+   = note: prefixed identifiers and literals are reserved since Rust 2021\n+help: consider inserting whitespace here\n+   |\n+LL |     demo4!(foo #! bar);\n+   |               --\n+\n+error: prefix `foo` is unknown\n+  --> $DIR/reserved-prefixes.rs:23:12\n+   |\n+LL |     demo4!(foo## bar);\n+   |            ^^^ unknown prefix\n+   |\n+   = note: prefixed identifiers and literals are reserved since Rust 2021\n+help: consider inserting whitespace here\n+   |\n+LL |     demo4!(foo ## bar);\n+   |               --\n+\n+error: prefix `foo` is unknown\n+  --> $DIR/reserved-prefixes.rs:25:12\n+   |\n+LL |     demo4!(foo#bar#);\n+   |            ^^^ unknown prefix\n+   |\n+   = note: prefixed identifiers and literals are reserved since Rust 2021\n+help: consider inserting whitespace here\n+   |\n+LL |     demo4!(foo #bar#);\n+   |               --\n+\n+error: prefix `bar` is unknown\n+  --> $DIR/reserved-prefixes.rs:25:16\n+   |\n+LL |     demo4!(foo#bar#);\n+   |                ^^^ unknown prefix\n+   |\n+   = note: prefixed identifiers and literals are reserved since Rust 2021\n+help: consider inserting whitespace here\n+   |\n+LL |     demo4!(foo#bar #);\n+   |                   --\n+\n+error: aborting due to 9 previous errors\n+"}]}